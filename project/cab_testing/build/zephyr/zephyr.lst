
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 57 00 20 f5 37 00 00 97 ac 00 00 ad 37 00 00     .W. .7.......7..
  10:	ad 37 00 00 ad 37 00 00 ad 37 00 00 00 00 00 00     .7...7...7......
	...
  2c:	79 2f 00 00 ad 37 00 00 00 00 00 00 21 2f 00 00     y/...7......!/..
  3c:	ad 37 00 00                                         .7..

00000040 <_irq_vector_table>:
  40:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  50:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  60:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  70:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  80:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  90:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  a0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  b0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  c0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  d0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  e0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..
  f0:	59 30 00 00 59 30 00 00 59 30 00 00 59 30 00 00     Y0..Y0..Y0..Y0..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>

000003da <strlen>:
     3da:	4603      	mov	r3, r0
     3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
     3e0:	2a00      	cmp	r2, #0
     3e2:	d1fb      	bne.n	3dc <strlen+0x2>
     3e4:	1a18      	subs	r0, r3, r0
     3e6:	3801      	subs	r0, #1
     3e8:	4770      	bx	lr
	...

000003ec <producers_code>:

} 

/* Thread code implementation */
void producers_code(void *argA , void *argB, void *argC)
{
     3ec:	b538      	push	{r3, r4, r5, lr}
    /* Timing variables to control task periodicity */

    /* Other variables */
    
    printk("Thread producer init \n");
     3ee:	480e      	ldr	r0, [pc, #56]	; (428 <CONFIG_FLASH_SIZE+0x28>)
     3f0:	f00a fa6d 	bl	a8ce <printk>
    while(1) {
        
        /* Do the workload */          
        
        /* reserve image from CAB */
        uint8_t *img = (uint8_t *)reserve(image_cab);
     3f4:	4d0d      	ldr	r5, [pc, #52]	; (42c <CONFIG_FLASH_SIZE+0x2c>)
     3f6:	6828      	ldr	r0, [r5, #0]
     3f8:	f00a f98d 	bl	a716 <reserve>
     3fc:	4604      	mov	r4, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     3fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     402:	490b      	ldr	r1, [pc, #44]	; (430 <CONFIG_FLASH_SIZE+0x30>)
     404:	f00b fd9c 	bl	bf40 <memcpy>

        memcpy(img, vertical_guide_image_data, IMGWIDTH*IMGWIDTH);

        printk("Task producer insert obstacle \n");
     408:	480a      	ldr	r0, [pc, #40]	; (434 <CONFIG_FLASH_SIZE+0x34>)
     40a:	f00a fa60 	bl	a8ce <printk>
        img[126*IMGWIDTH+60] = 128;
     40e:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
     412:	2280      	movs	r2, #128	; 0x80
     414:	f883 2f3c 	strb.w	r2, [r3, #3900]	; 0xf3c


        put_mes((void*)img, image_cab);
     418:	6829      	ldr	r1, [r5, #0]
     41a:	4620      	mov	r0, r4
     41c:	f00a f99d 	bl	a75a <put_mes>
        printk("Task producer put image to CAB \n");
     420:	4805      	ldr	r0, [pc, #20]	; (438 <CONFIG_FLASH_SIZE+0x38>)
     422:	f00a fa54 	bl	a8ce <printk>
    while(1) {
     426:	e7e5      	b.n	3f4 <producers_code+0x8>
     428:	0000c328 	.word	0x0000c328
     42c:	20004578 	.word	0x20004578
     430:	20000000 	.word	0x20000000
     434:	0000c340 	.word	0x0000c340
     438:	0000c360 	.word	0x0000c360

0000043c <consumers_code>:

}


void consumers_code(void *argA , void *argB, void *argC)
{
     43c:	b538      	push	{r3, r4, r5, lr}
     43e:	e01a      	b.n	476 <consumers_code+0x3a>
    else{
        /* check if image and vertical image are the same*/
        for(int i = 0; i < IMGWIDTH; i++){
            for(int j = 0; j < IMGWIDTH; j++){
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
                    printk("Error\n");
     440:	4814      	ldr	r0, [pc, #80]	; (494 <consumers_code+0x58>)
     442:	f00a fa44 	bl	a8ce <printk>
        for(int i = 0; i < IMGWIDTH; i++){
     446:	3401      	adds	r4, #1
     448:	2c7f      	cmp	r4, #127	; 0x7f
     44a:	dc0f      	bgt.n	46c <consumers_code+0x30>
            for(int j = 0; j < IMGWIDTH; j++){
     44c:	2300      	movs	r3, #0
     44e:	2b7f      	cmp	r3, #127	; 0x7f
     450:	dcf9      	bgt.n	446 <consumers_code+0xa>
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
     452:	eb03 12c4 	add.w	r2, r3, r4, lsl #7
     456:	5ca9      	ldrb	r1, [r5, r2]
     458:	4a0f      	ldr	r2, [pc, #60]	; (498 <consumers_code+0x5c>)
     45a:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
     45e:	5cd2      	ldrb	r2, [r2, r3]
     460:	4291      	cmp	r1, r2
     462:	d1ed      	bne.n	440 <consumers_code+0x4>
            for(int j = 0; j < IMGWIDTH; j++){
     464:	3301      	adds	r3, #1
     466:	e7f2      	b.n	44e <consumers_code+0x12>
        for(int i = 0; i < IMGWIDTH; i++){
     468:	2400      	movs	r4, #0
     46a:	e7ed      	b.n	448 <consumers_code+0xc>
        }

    }

    /* unget image from CAB*/
    unget((void*)img, image_cab);
     46c:	4b0b      	ldr	r3, [pc, #44]	; (49c <consumers_code+0x60>)
     46e:	6819      	ldr	r1, [r3, #0]
     470:	4628      	mov	r0, r5
     472:	f00a f9bc 	bl	a7ee <unget>
    uint8_t *img = (uint8_t *)get_mes(image_cab);
     476:	4b09      	ldr	r3, [pc, #36]	; (49c <consumers_code+0x60>)
     478:	6818      	ldr	r0, [r3, #0]
     47a:	f00a f98f 	bl	a79c <get_mes>
     47e:	4605      	mov	r5, r0
    if(img[126*IMGWIDTH+60] == 128){
     480:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
     484:	f893 3f3c 	ldrb.w	r3, [r3, #3900]	; 0xf3c
     488:	2b80      	cmp	r3, #128	; 0x80
     48a:	d1ed      	bne.n	468 <consumers_code+0x2c>
        printk("Task consumer obstacle detected \n");
     48c:	4804      	ldr	r0, [pc, #16]	; (4a0 <consumers_code+0x64>)
     48e:	f00a fa1e 	bl	a8ce <printk>
     492:	e7eb      	b.n	46c <consumers_code+0x30>
     494:	0000c3a8 	.word	0x0000c3a8
     498:	20000000 	.word	0x20000000
     49c:	20004578 	.word	0x20004578
     4a0:	0000c384 	.word	0x0000c384

000004a4 <main>:
void main(void) {
     4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4a8:	b08e      	sub	sp, #56	; 0x38
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
     4aa:	f44f 7000 	mov.w	r0, #512	; 0x200
     4ae:	f009 fe9d 	bl	a1ec <malloc>
     4b2:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4b4:	2500      	movs	r5, #0
     4b6:	e006      	b.n	4c6 <main+0x22>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
     4b8:	2080      	movs	r0, #128	; 0x80
     4ba:	f009 fe97 	bl	a1ec <malloc>
     4be:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4c2:	3501      	adds	r5, #1
     4c4:	b2ed      	uxtb	r5, r5
     4c6:	f015 0f80 	tst.w	r5, #128	; 0x80
     4ca:	d0f5      	beq.n	4b8 <main+0x14>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4cc:	2100      	movs	r1, #0
     4ce:	e00a      	b.n	4e6 <main+0x42>
            img1[i][j] = vertical_guide_image_data[i][j];
     4d0:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
     4d4:	4a4b      	ldr	r2, [pc, #300]	; (604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>)
     4d6:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
     4da:	5cd2      	ldrb	r2, [r2, r3]
     4dc:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
     4de:	3301      	adds	r3, #1
     4e0:	2b7f      	cmp	r3, #127	; 0x7f
     4e2:	d9f5      	bls.n	4d0 <main+0x2c>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4e4:	3101      	adds	r1, #1
     4e6:	297f      	cmp	r1, #127	; 0x7f
     4e8:	d801      	bhi.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
        for (size_t j = 0; j < IMGWIDTH; j++)
     4ea:	2300      	movs	r3, #0
     4ec:	e7f8      	b.n	4e0 <main+0x3c>
    image_cab = open_cab("image cab", N_PRODUCERS+N_CONSUMERS+1, IMGWIDTH*IMGWIDTH, (void*)img1);
     4ee:	4623      	mov	r3, r4
     4f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4f4:	2107      	movs	r1, #7
     4f6:	4844      	ldr	r0, [pc, #272]	; (608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>)
     4f8:	f00a f8cd 	bl	a696 <open_cab>
     4fc:	4b43      	ldr	r3, [pc, #268]	; (60c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x124>)
     4fe:	6018      	str	r0, [r3, #0]
    printk("Cab initialized\n");
     500:	4843      	ldr	r0, [pc, #268]	; (610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>)
     502:	f00a f9e4 	bl	a8ce <printk>
    k_tid_t* producers = (k_tid_t*)malloc(sizeof(k_tid_t)*N_PRODUCERS);
     506:	200c      	movs	r0, #12
     508:	f009 fe70 	bl	a1ec <malloc>
     50c:	4680      	mov	r8, r0
    k_tid_t* consumers = (k_tid_t*)malloc(sizeof(k_tid_t)*N_CONSUMERS);
     50e:	200c      	movs	r0, #12
     510:	f009 fe6c 	bl	a1ec <malloc>
     514:	4605      	mov	r5, r0
    k_thread_stack_t *producers_stacks = calloc(N_PRODUCERS, sizeof(k_thread_stack_t));
     516:	2101      	movs	r1, #1
     518:	2003      	movs	r0, #3
     51a:	f009 fe5f 	bl	a1dc <calloc>
     51e:	4607      	mov	r7, r0
    k_thread_stack_t *consumers_stacks = calloc(N_CONSUMERS, sizeof(k_thread_stack_t));
     520:	2101      	movs	r1, #1
     522:	2003      	movs	r0, #3
     524:	f009 fe5a 	bl	a1dc <calloc>
     528:	4606      	mov	r6, r0
    printk("stacks allocated\n");
     52a:	483a      	ldr	r0, [pc, #232]	; (614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>)
     52c:	f00a f9cf 	bl	a8ce <printk>
    for(int i = 0; i < N_PRODUCERS; i++){
     530:	2400      	movs	r4, #0
     532:	e01c      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
        producers[i] = k_thread_create(producer_threads[i], &producers_stacks[i],
     534:	ab0e      	add	r3, sp, #56	; 0x38
     536:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     53a:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     53e:	1939      	adds	r1, r7, r4
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     540:	2200      	movs	r2, #0
     542:	2300      	movs	r3, #0
     544:	e9cd 2306 	strd	r2, r3, [sp, #24]
     548:	2300      	movs	r3, #0
     54a:	9304      	str	r3, [sp, #16]
     54c:	2201      	movs	r2, #1
     54e:	9203      	str	r2, [sp, #12]
     550:	9302      	str	r3, [sp, #8]
     552:	9301      	str	r3, [sp, #4]
     554:	9300      	str	r3, [sp, #0]
     556:	4b30      	ldr	r3, [pc, #192]	; (618 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x130>)
     558:	f06f 021b 	mvn.w	r2, #27
     55c:	f007 f9f8 	bl	7950 <z_impl_k_thread_create>
     560:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        printk("producer %d created\n", i);
     564:	4621      	mov	r1, r4
     566:	482d      	ldr	r0, [pc, #180]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
     568:	f00a f9b1 	bl	a8ce <printk>
    for(int i = 0; i < N_PRODUCERS; i++){
     56c:	3401      	adds	r4, #1
     56e:	2c02      	cmp	r4, #2
     570:	dde0      	ble.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
    printk("producers created\n");
     572:	482b      	ldr	r0, [pc, #172]	; (620 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x138>)
     574:	f00a f9ab 	bl	a8ce <printk>
    for(int i = 0; i < N_CONSUMERS; i++){
     578:	2400      	movs	r4, #0
     57a:	e018      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
        consumers[i] = k_thread_create(consumer_threads[i], &consumers_stacks[i],
     57c:	ab0e      	add	r3, sp, #56	; 0x38
     57e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     582:	f853 0c18 	ldr.w	r0, [r3, #-24]
     586:	1931      	adds	r1, r6, r4
     588:	2200      	movs	r2, #0
     58a:	2300      	movs	r3, #0
     58c:	e9cd 2306 	strd	r2, r3, [sp, #24]
     590:	2300      	movs	r3, #0
     592:	9304      	str	r3, [sp, #16]
     594:	2201      	movs	r2, #1
     596:	9203      	str	r2, [sp, #12]
     598:	9302      	str	r3, [sp, #8]
     59a:	9301      	str	r3, [sp, #4]
     59c:	9300      	str	r3, [sp, #0]
     59e:	4b21      	ldr	r3, [pc, #132]	; (624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>)
     5a0:	f06f 021b 	mvn.w	r2, #27
     5a4:	f007 f9d4 	bl	7950 <z_impl_k_thread_create>
     5a8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for(int i = 0; i < N_CONSUMERS; i++){
     5ac:	3401      	adds	r4, #1
     5ae:	2c02      	cmp	r4, #2
     5b0:	dde4      	ble.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>
    printk("consumers created\n");
     5b2:	481d      	ldr	r0, [pc, #116]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     5b4:	f00a f98b 	bl	a8ce <printk>
    for(int i = 0; i < N_PRODUCERS; i++){
     5b8:	2400      	movs	r4, #0
     5ba:	e00b      	b.n	5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>
        k_thread_join(producer_threads[i], K_FOREVER);
     5bc:	ab0e      	add	r3, sp, #56	; 0x38
     5be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     5c2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_THREAD_JOIN);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_join(thread, timeout);
     5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     5ce:	f009 f87f 	bl	96d0 <z_impl_k_thread_join>
    for(int i = 0; i < N_PRODUCERS; i++){
     5d2:	3401      	adds	r4, #1
     5d4:	2c02      	cmp	r4, #2
     5d6:	ddf1      	ble.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
    for(int i = 0; i < N_CONSUMERS; i++){
     5d8:	2400      	movs	r4, #0
     5da:	e00b      	b.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
        k_thread_join(consumer_threads[i], K_FOREVER);
     5dc:	ab0e      	add	r3, sp, #56	; 0x38
     5de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     5e2:	f853 0c18 	ldr.w	r0, [r3, #-24]
     5e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     5ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     5ee:	f009 f86f 	bl	96d0 <z_impl_k_thread_join>
    for(int i = 0; i < N_CONSUMERS; i++){
     5f2:	3401      	adds	r4, #1
     5f4:	2c02      	cmp	r4, #2
     5f6:	ddf1      	ble.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
    printk("joins done\n");
     5f8:	480c      	ldr	r0, [pc, #48]	; (62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>)
     5fa:	f00a f968 	bl	a8ce <printk>
} 
     5fe:	b00e      	add	sp, #56	; 0x38
     600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     604:	20000000 	.word	0x20000000
     608:	0000c3b0 	.word	0x0000c3b0
     60c:	20004578 	.word	0x20004578
     610:	0000c3bc 	.word	0x0000c3bc
     614:	0000c3d0 	.word	0x0000c3d0
     618:	000003ed 	.word	0x000003ed
     61c:	0000c3e4 	.word	0x0000c3e4
     620:	0000c3fc 	.word	0x0000c3fc
     624:	0000043d 	.word	0x0000043d
     628:	0000c410 	.word	0x0000c410
     62c:	0000c424 	.word	0x0000c424

00000630 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     634:	b08d      	sub	sp, #52	; 0x34
     636:	9205      	str	r2, [sp, #20]
     638:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     63a:	4613      	mov	r3, r2
     63c:	f002 0204 	and.w	r2, r2, #4
     640:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     642:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     646:	f010 0303 	ands.w	r3, r0, #3
     64a:	9302      	str	r3, [sp, #8]
     64c:	f040 8293 	bne.w	b76 <CONFIG_ISR_STACK_SIZE+0x376>
     650:	4607      	mov	r7, r0
     652:	468a      	mov	sl, r1
     654:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     656:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     658:	2800      	cmp	r0, #0
     65a:	d041      	beq.n	6e0 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     65c:	b127      	cbz	r7, 668 <cbvprintf_package+0x38>
     65e:	1be3      	subs	r3, r4, r7
     660:	3304      	adds	r3, #4
     662:	4553      	cmp	r3, sl
     664:	f200 828a 	bhi.w	b7c <CONFIG_ISR_STACK_SIZE+0x37c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     668:	9b03      	ldr	r3, [sp, #12]
     66a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     66c:	f8dd b008 	ldr.w	fp, [sp, #8]
     670:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     674:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     678:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     67a:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     67e:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     680:	b10f      	cbz	r7, 686 <cbvprintf_package+0x56>
				*(const char **)buf = s;
     682:	9b03      	ldr	r3, [sp, #12]
     684:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     686:	1e53      	subs	r3, r2, #1
     688:	9307      	str	r3, [sp, #28]
     68a:	2a00      	cmp	r2, #0
     68c:	f340 80b7 	ble.w	7fe <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     690:	9b05      	ldr	r3, [sp, #20]
     692:	f013 0202 	ands.w	r2, r3, #2
     696:	d021      	beq.n	6dc <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     698:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     69a:	1be1      	subs	r1, r4, r7
     69c:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     69e:	b11a      	cbz	r2, 6a8 <cbvprintf_package+0x78>
     6a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     6a4:	f080 80bf 	bcs.w	826 <CONFIG_ISR_STACK_SIZE+0x26>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     6a8:	f1bb 0f0f 	cmp.w	fp, #15
     6ac:	f200 80ce 	bhi.w	84c <CONFIG_ISR_STACK_SIZE+0x4c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     6b0:	2f00      	cmp	r7, #0
     6b2:	f000 80e2 	beq.w	87a <CONFIG_ISR_STACK_SIZE+0x7a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     6b6:	b2db      	uxtb	r3, r3
     6b8:	aa0c      	add	r2, sp, #48	; 0x30
     6ba:	445a      	add	r2, fp
     6bc:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     6c0:	2800      	cmp	r0, #0
     6c2:	f000 80d6 	beq.w	872 <CONFIG_ISR_STACK_SIZE+0x72>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     6c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
     6ca:	aa0c      	add	r2, sp, #48	; 0x30
     6cc:	445a      	add	r2, fp
     6ce:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     6d2:	9b04      	ldr	r3, [sp, #16]
     6d4:	3301      	adds	r3, #1
     6d6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     6d8:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     6dc:	3404      	adds	r4, #4
     6de:	e0f6      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     6e0:	f001 0a07 	and.w	sl, r1, #7
     6e4:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     6e6:	f1ca 0a08 	rsb	sl, sl, #8
     6ea:	e7b7      	b.n	65c <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     6ec:	2b25      	cmp	r3, #37	; 0x25
     6ee:	f040 80ed 	bne.w	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
				parsing = true;
     6f2:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     6f4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     6f8:	46c1      	mov	r9, r8
			continue;
     6fa:	e0e7      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			align = VA_STACK_ALIGN(intmax_t);
     6fc:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     700:	46c1      	mov	r9, r8
			continue;
     702:	e0e3      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			align = VA_STACK_ALIGN(size_t);
     704:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     708:	46c1      	mov	r9, r8
			continue;
     70a:	e0df      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			align = VA_STACK_ALIGN(ptrdiff_t);
     70c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     710:	46c1      	mov	r9, r8
			continue;
     712:	e0db      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
			if (fmt[-1] == 'l') {
     714:	782a      	ldrb	r2, [r5, #0]
     716:	2a6c      	cmp	r2, #108	; 0x6c
     718:	d026      	beq.n	768 <cbvprintf_package+0x138>
			parsing = false;
     71a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     71c:	eb04 0208 	add.w	r2, r4, r8
     720:	3a01      	subs	r2, #1
     722:	f1c8 0100 	rsb	r1, r8, #0
     726:	400a      	ands	r2, r1
     728:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     72a:	b127      	cbz	r7, 736 <cbvprintf_package+0x106>
     72c:	1bd1      	subs	r1, r2, r7
     72e:	4449      	add	r1, r9
     730:	458a      	cmp	sl, r1
     732:	f0c0 8226 	bcc.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		if (*fmt == 's') {
     736:	2b73      	cmp	r3, #115	; 0x73
     738:	d059      	beq.n	7ee <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     73a:	f1b9 0f04 	cmp.w	r9, #4
     73e:	f000 80a8 	beq.w	892 <CONFIG_ISR_STACK_SIZE+0x92>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     742:	f1b9 0f08 	cmp.w	r9, #8
     746:	f040 80ac 	bne.w	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
			long long v = va_arg(ap, long long);
     74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     74c:	3307      	adds	r3, #7
     74e:	f023 0307 	bic.w	r3, r3, #7
     752:	f103 0108 	add.w	r1, r3, #8
     756:	9116      	str	r1, [sp, #88]	; 0x58
     758:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     75c:	b10f      	cbz	r7, 762 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     75e:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     762:	f102 0408 	add.w	r4, r2, #8
     766:	e0b1      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
				if (fmt[-2] == 'l') {
     768:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     76c:	2a6c      	cmp	r2, #108	; 0x6c
     76e:	d004      	beq.n	77a <cbvprintf_package+0x14a>
			parsing = false;
     770:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     772:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     776:	46c1      	mov	r9, r8
     778:	e7d0      	b.n	71c <cbvprintf_package+0xec>
			parsing = false;
     77a:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     77c:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     780:	46c1      	mov	r9, r8
     782:	e7cb      	b.n	71c <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     784:	782b      	ldrb	r3, [r5, #0]
     786:	2b4c      	cmp	r3, #76	; 0x4c
     788:	d01c      	beq.n	7c4 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     78a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     78c:	3307      	adds	r3, #7
     78e:	f023 0307 	bic.w	r3, r3, #7
     792:	f103 0208 	add.w	r2, r3, #8
     796:	9216      	str	r2, [sp, #88]	; 0x58
     798:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     79c:	1de2      	adds	r2, r4, #7
     79e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     7a2:	b147      	cbz	r7, 7b6 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     7a4:	1bd3      	subs	r3, r2, r7
     7a6:	3308      	adds	r3, #8
     7a8:	4553      	cmp	r3, sl
     7aa:	d815      	bhi.n	7d8 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     7ac:	782b      	ldrb	r3, [r5, #0]
     7ae:	2b4c      	cmp	r3, #76	; 0x4c
     7b0:	d015      	beq.n	7de <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     7b2:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     7b6:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     7ba:	2600      	movs	r6, #0
			continue;
     7bc:	f04f 0808 	mov.w	r8, #8
     7c0:	46c1      	mov	r9, r8
     7c2:	e083      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
				v.ld = va_arg(ap, long double);
     7c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
     7c6:	3307      	adds	r3, #7
     7c8:	f023 0307 	bic.w	r3, r3, #7
     7cc:	f103 0208 	add.w	r2, r3, #8
     7d0:	9216      	str	r2, [sp, #88]	; 0x58
     7d2:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     7d6:	e7e1      	b.n	79c <cbvprintf_package+0x16c>
					return -ENOSPC;
     7d8:	f06f 001b 	mvn.w	r0, #27
     7dc:	e1c8      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
					*(long double *)buf = v.ld;
     7de:	e9c2 0100 	strd	r0, r1, [r2]
     7e2:	e7e8      	b.n	7b6 <cbvprintf_package+0x186>
			parsing = false;
     7e4:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     7e6:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     7ea:	46c1      	mov	r9, r8
     7ec:	e796      	b.n	71c <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     7ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
     7f0:	1d1a      	adds	r2, r3, #4
     7f2:	9216      	str	r2, [sp, #88]	; 0x58
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7f8:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     7fa:	4665      	mov	r5, ip
     7fc:	e740      	b.n	680 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     7fe:	4bbb      	ldr	r3, [pc, #748]	; (aec <CONFIG_ISR_STACK_SIZE+0x2ec>)
     800:	9a03      	ldr	r2, [sp, #12]
     802:	429a      	cmp	r2, r3
     804:	d304      	bcc.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     806:	4bba      	ldr	r3, [pc, #744]	; (af0 <CONFIG_ISR_STACK_SIZE+0x2f0>)
     808:	429a      	cmp	r2, r3
     80a:	d30a      	bcc.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     80c:	2300      	movs	r3, #0
     80e:	e000      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
     810:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     812:	2b00      	cmp	r3, #0
     814:	f47f af3c 	bne.w	690 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     818:	9b05      	ldr	r3, [sp, #20]
     81a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     81e:	2000      	movs	r0, #0
     820:	e73b      	b.n	69a <cbvprintf_package+0x6a>
     822:	2301      	movs	r3, #1
     824:	e7f5      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
					__ASSERT(false, "String with too many arguments");
     826:	4cb3      	ldr	r4, [pc, #716]	; (af4 <CONFIG_ISR_STACK_SIZE+0x2f4>)
     828:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     82c:	4622      	mov	r2, r4
     82e:	49b2      	ldr	r1, [pc, #712]	; (af8 <CONFIG_ISR_STACK_SIZE+0x2f8>)
     830:	48b2      	ldr	r0, [pc, #712]	; (afc <CONFIG_ISR_STACK_SIZE+0x2fc>)
     832:	f00a f955 	bl	aae0 <assert_print>
     836:	48b2      	ldr	r0, [pc, #712]	; (b00 <CONFIG_ISR_STACK_SIZE+0x300>)
     838:	f00a f952 	bl	aae0 <assert_print>
     83c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     840:	4620      	mov	r0, r4
     842:	f00a f946 	bl	aad2 <assert_post_action>
					return -EINVAL;
     846:	f06f 0015 	mvn.w	r0, #21
     84a:	e191      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
					__ASSERT(false, "str_ptr_pos[] too small");
     84c:	4ca9      	ldr	r4, [pc, #676]	; (af4 <CONFIG_ISR_STACK_SIZE+0x2f4>)
     84e:	f240 13f5 	movw	r3, #501	; 0x1f5
     852:	4622      	mov	r2, r4
     854:	49a8      	ldr	r1, [pc, #672]	; (af8 <CONFIG_ISR_STACK_SIZE+0x2f8>)
     856:	48a9      	ldr	r0, [pc, #676]	; (afc <CONFIG_ISR_STACK_SIZE+0x2fc>)
     858:	f00a f942 	bl	aae0 <assert_print>
     85c:	48a9      	ldr	r0, [pc, #676]	; (b04 <CONFIG_ISR_STACK_SIZE+0x304>)
     85e:	f00a f93f 	bl	aae0 <assert_print>
     862:	f240 11f5 	movw	r1, #501	; 0x1f5
     866:	4620      	mov	r0, r4
     868:	f00a f933 	bl	aad2 <assert_post_action>
					return -EINVAL;
     86c:	f06f 0015 	mvn.w	r0, #21
     870:	e17e      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
						s_rw_cnt++;
     872:	9b06      	ldr	r3, [sp, #24]
     874:	3301      	adds	r3, #1
     876:	9306      	str	r3, [sp, #24]
     878:	e72e      	b.n	6d8 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     87a:	b908      	cbnz	r0, 880 <CONFIG_ISR_STACK_SIZE+0x80>
     87c:	9b01      	ldr	r3, [sp, #4]
     87e:	b113      	cbz	r3, 886 <CONFIG_ISR_STACK_SIZE+0x86>
					len += 1;
     880:	f10a 0a01 	add.w	sl, sl, #1
     884:	e728      	b.n	6d8 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     886:	9803      	ldr	r0, [sp, #12]
     888:	f7ff fda7 	bl	3da <strlen>
     88c:	1c83      	adds	r3, r0, #2
     88e:	449a      	add	sl, r3
     890:	e722      	b.n	6d8 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     892:	9b16      	ldr	r3, [sp, #88]	; 0x58
     894:	1d19      	adds	r1, r3, #4
     896:	9116      	str	r1, [sp, #88]	; 0x58
     898:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     89a:	b107      	cbz	r7, 89e <CONFIG_ISR_STACK_SIZE+0x9e>
				*(int *)buf = v;
     89c:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     89e:	1d14      	adds	r4, r2, #4
     8a0:	e014      	b.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     8a2:	4c94      	ldr	r4, [pc, #592]	; (af4 <CONFIG_ISR_STACK_SIZE+0x2f4>)
     8a4:	f240 2331 	movw	r3, #561	; 0x231
     8a8:	4622      	mov	r2, r4
     8aa:	4993      	ldr	r1, [pc, #588]	; (af8 <CONFIG_ISR_STACK_SIZE+0x2f8>)
     8ac:	4893      	ldr	r0, [pc, #588]	; (afc <CONFIG_ISR_STACK_SIZE+0x2fc>)
     8ae:	f00a f917 	bl	aae0 <assert_print>
     8b2:	4649      	mov	r1, r9
     8b4:	4894      	ldr	r0, [pc, #592]	; (b08 <CONFIG_ISR_STACK_SIZE+0x308>)
     8b6:	f00a f913 	bl	aae0 <assert_print>
     8ba:	f240 2131 	movw	r1, #561	; 0x231
     8be:	4620      	mov	r0, r4
     8c0:	f00a f907 	bl	aad2 <assert_post_action>
			return -EINVAL;
     8c4:	f06f 0015 	mvn.w	r0, #21
     8c8:	e152      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
		switch (*fmt) {
     8ca:	2600      	movs	r6, #0
     8cc:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     8ce:	f105 0c01 	add.w	ip, r5, #1
     8d2:	786b      	ldrb	r3, [r5, #1]
     8d4:	2b00      	cmp	r3, #0
     8d6:	f000 80c1 	beq.w	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		if (!parsing) {
     8da:	2e00      	cmp	r6, #0
     8dc:	f43f af06 	beq.w	6ec <cbvprintf_package+0xbc>
		switch (*fmt) {
     8e0:	f1a3 0120 	sub.w	r1, r3, #32
     8e4:	295a      	cmp	r1, #90	; 0x5a
     8e6:	d8f0      	bhi.n	8ca <CONFIG_ISR_STACK_SIZE+0xca>
     8e8:	a201      	add	r2, pc, #4	; (adr r2, 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8ea:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     8ee:	bf00      	nop
     8f0:	000008cd 	.word	0x000008cd
     8f4:	000008cb 	.word	0x000008cb
     8f8:	000008cb 	.word	0x000008cb
     8fc:	000008cd 	.word	0x000008cd
     900:	000008cb 	.word	0x000008cb
     904:	000008cb 	.word	0x000008cb
     908:	000008cb 	.word	0x000008cb
     90c:	000008cb 	.word	0x000008cb
     910:	000008cb 	.word	0x000008cb
     914:	000008cb 	.word	0x000008cb
     918:	0000071d 	.word	0x0000071d
     91c:	000008cd 	.word	0x000008cd
     920:	000008cb 	.word	0x000008cb
     924:	000008cd 	.word	0x000008cd
     928:	000008cd 	.word	0x000008cd
     92c:	000008cb 	.word	0x000008cb
     930:	000008cd 	.word	0x000008cd
     934:	000008cd 	.word	0x000008cd
     938:	000008cd 	.word	0x000008cd
     93c:	000008cd 	.word	0x000008cd
     940:	000008cd 	.word	0x000008cd
     944:	000008cd 	.word	0x000008cd
     948:	000008cd 	.word	0x000008cd
     94c:	000008cd 	.word	0x000008cd
     950:	000008cd 	.word	0x000008cd
     954:	000008cd 	.word	0x000008cd
     958:	000008cb 	.word	0x000008cb
     95c:	000008cb 	.word	0x000008cb
     960:	000008cb 	.word	0x000008cb
     964:	000008cb 	.word	0x000008cb
     968:	000008cb 	.word	0x000008cb
     96c:	000008cb 	.word	0x000008cb
     970:	000008cb 	.word	0x000008cb
     974:	00000785 	.word	0x00000785
     978:	000008cb 	.word	0x000008cb
     97c:	000008cb 	.word	0x000008cb
     980:	000008cb 	.word	0x000008cb
     984:	00000785 	.word	0x00000785
     988:	00000785 	.word	0x00000785
     98c:	00000785 	.word	0x00000785
     990:	000008cb 	.word	0x000008cb
     994:	000008cb 	.word	0x000008cb
     998:	000008cb 	.word	0x000008cb
     99c:	000008cb 	.word	0x000008cb
     9a0:	000008cd 	.word	0x000008cd
     9a4:	000008cb 	.word	0x000008cb
     9a8:	000008cb 	.word	0x000008cb
     9ac:	000008cb 	.word	0x000008cb
     9b0:	000008cb 	.word	0x000008cb
     9b4:	000008cb 	.word	0x000008cb
     9b8:	000008cb 	.word	0x000008cb
     9bc:	000008cb 	.word	0x000008cb
     9c0:	000008cb 	.word	0x000008cb
     9c4:	000008cb 	.word	0x000008cb
     9c8:	000008cb 	.word	0x000008cb
     9cc:	000008cb 	.word	0x000008cb
     9d0:	00000715 	.word	0x00000715
     9d4:	000008cb 	.word	0x000008cb
     9d8:	000008cb 	.word	0x000008cb
     9dc:	000008cb 	.word	0x000008cb
     9e0:	000008cb 	.word	0x000008cb
     9e4:	000008cb 	.word	0x000008cb
     9e8:	000008cb 	.word	0x000008cb
     9ec:	000008cb 	.word	0x000008cb
     9f0:	000008cb 	.word	0x000008cb
     9f4:	00000785 	.word	0x00000785
     9f8:	000008cb 	.word	0x000008cb
     9fc:	00000715 	.word	0x00000715
     a00:	00000715 	.word	0x00000715
     a04:	00000785 	.word	0x00000785
     a08:	00000785 	.word	0x00000785
     a0c:	00000785 	.word	0x00000785
     a10:	000008cd 	.word	0x000008cd
     a14:	00000715 	.word	0x00000715
     a18:	000006fd 	.word	0x000006fd
     a1c:	000008cb 	.word	0x000008cb
     a20:	000008cd 	.word	0x000008cd
     a24:	000008cb 	.word	0x000008cb
     a28:	000007e5 	.word	0x000007e5
     a2c:	00000715 	.word	0x00000715
     a30:	000007e5 	.word	0x000007e5
     a34:	000008cb 	.word	0x000008cb
     a38:	000008cb 	.word	0x000008cb
     a3c:	000007e5 	.word	0x000007e5
     a40:	0000070d 	.word	0x0000070d
     a44:	00000715 	.word	0x00000715
     a48:	000008cb 	.word	0x000008cb
     a4c:	000008cb 	.word	0x000008cb
     a50:	00000715 	.word	0x00000715
     a54:	000008cb 	.word	0x000008cb
     a58:	00000705 	.word	0x00000705
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     a5c:	1be3      	subs	r3, r4, r7
     a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     a62:	d211      	bcs.n	a88 <CONFIG_ISR_STACK_SIZE+0x288>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     a64:	b31f      	cbz	r7, aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     a66:	2200      	movs	r2, #0
     a68:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     a6a:	089b      	lsrs	r3, r3, #2
     a6c:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     a6e:	9b01      	ldr	r3, [sp, #4]
     a70:	b30b      	cbz	r3, ab6 <CONFIG_ISR_STACK_SIZE+0x2b6>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     a72:	9b06      	ldr	r3, [sp, #24]
     a74:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     a76:	9b04      	ldr	r3, [sp, #16]
     a78:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     a7a:	bbab      	cbnz	r3, ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     a7c:	9d02      	ldr	r5, [sp, #8]
     a7e:	f8dd 9010 	ldr.w	r9, [sp, #16]
     a82:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a86:	e058      	b.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
		__ASSERT(false, "too many format args");
     a88:	4c1a      	ldr	r4, [pc, #104]	; (af4 <CONFIG_ISR_STACK_SIZE+0x2f4>)
     a8a:	f240 233d 	movw	r3, #573	; 0x23d
     a8e:	4622      	mov	r2, r4
     a90:	4919      	ldr	r1, [pc, #100]	; (af8 <CONFIG_ISR_STACK_SIZE+0x2f8>)
     a92:	481a      	ldr	r0, [pc, #104]	; (afc <CONFIG_ISR_STACK_SIZE+0x2fc>)
     a94:	f00a f824 	bl	aae0 <assert_print>
     a98:	481c      	ldr	r0, [pc, #112]	; (b0c <CONFIG_ISR_STACK_SIZE+0x30c>)
     a9a:	f00a f821 	bl	aae0 <assert_print>
     a9e:	f240 213d 	movw	r1, #573	; 0x23d
     aa2:	4620      	mov	r0, r4
     aa4:	f00a f815 	bl	aad2 <assert_post_action>
		return -EINVAL;
     aa8:	f06f 0015 	mvn.w	r0, #21
     aac:	e060      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     aae:	4453      	add	r3, sl
     ab0:	f1a3 0008 	sub.w	r0, r3, #8
     ab4:	e05c      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
		buf0[1] = s_rw_cnt;
     ab6:	9b06      	ldr	r3, [sp, #24]
     ab8:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     aba:	e7dc      	b.n	a76 <CONFIG_ISR_STACK_SIZE+0x276>
			*buf++ = pos;
     abc:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     ac0:	3301      	adds	r3, #1
     ac2:	459b      	cmp	fp, r3
     ac4:	d9da      	bls.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     ac6:	aa0c      	add	r2, sp, #48	; 0x30
     ac8:	441a      	add	r2, r3
     aca:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     ace:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     ad2:	2a00      	cmp	r2, #0
     ad4:	daf4      	bge.n	ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     ad6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     ada:	1be2      	subs	r2, r4, r7
     adc:	3201      	adds	r2, #1
     ade:	4592      	cmp	sl, r2
     ae0:	d2ec      	bcs.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
				return -ENOSPC;
     ae2:	f06f 001b 	mvn.w	r0, #27
     ae6:	e043      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
		for (i = 0; i < s_idx; i++) {
     ae8:	9b02      	ldr	r3, [sp, #8]
     aea:	e7ea      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     aec:	0000bfd4 	.word	0x0000bfd4
     af0:	0000e338 	.word	0x0000e338
     af4:	0000c430 	.word	0x0000c430
     af8:	0000cb38 	.word	0x0000cb38
     afc:	0000c478 	.word	0x0000c478
     b00:	0000c498 	.word	0x0000c498
     b04:	0000c4bc 	.word	0x0000c4bc
     b08:	0000c4d8 	.word	0x0000c4d8
     b0c:	0000c4f0 	.word	0x0000c4f0
		if (rws_pos_en) {
     b10:	9b01      	ldr	r3, [sp, #4]
     b12:	b1f3      	cbz	r3, b52 <CONFIG_ISR_STACK_SIZE+0x352>
			size = 0;
     b14:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     b16:	1be3      	subs	r3, r4, r7
     b18:	4433      	add	r3, r6
     b1a:	3301      	adds	r3, #1
     b1c:	459a      	cmp	sl, r3
     b1e:	d333      	bcc.n	b88 <CONFIG_ISR_STACK_SIZE+0x388>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     b20:	ab0c      	add	r3, sp, #48	; 0x30
     b22:	442b      	add	r3, r5
     b24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     b28:	f804 3b01 	strb.w	r3, [r4], #1
     b2c:	4632      	mov	r2, r6
     b2e:	4641      	mov	r1, r8
     b30:	4620      	mov	r0, r4
     b32:	f00b fa05 	bl	bf40 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
     b36:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     b38:	3501      	adds	r5, #1
     b3a:	45ab      	cmp	fp, r5
     b3c:	d917      	bls.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     b3e:	f1b9 0f00 	cmp.w	r9, #0
     b42:	d0e5      	beq.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b44:	ab0c      	add	r3, sp, #48	; 0x30
     b46:	442b      	add	r3, r5
     b48:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     b4c:	2b00      	cmp	r3, #0
     b4e:	dadf      	bge.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b50:	e7f2      	b.n	b38 <CONFIG_ISR_STACK_SIZE+0x338>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     b52:	ab0c      	add	r3, sp, #48	; 0x30
     b54:	442b      	add	r3, r5
     b56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     b5a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     b5e:	2200      	movs	r2, #0
     b60:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     b64:	4640      	mov	r0, r8
     b66:	f7ff fc38 	bl	3da <strlen>
     b6a:	1c46      	adds	r6, r0, #1
     b6c:	e7d3      	b.n	b16 <CONFIG_ISR_STACK_SIZE+0x316>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     b6e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     b70:	b00d      	add	sp, #52	; 0x34
     b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     b76:	f06f 000d 	mvn.w	r0, #13
     b7a:	e7f9      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
		return -ENOSPC;
     b7c:	f06f 001b 	mvn.w	r0, #27
     b80:	e7f6      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
			return -ENOSPC;
     b82:	f06f 001b 	mvn.w	r0, #27
     b86:	e7f3      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
			return -ENOSPC;
     b88:	f06f 001b 	mvn.w	r0, #27
     b8c:	e7f0      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
     b8e:	bf00      	nop

00000b90 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     b90:	b538      	push	{r3, r4, r5, lr}
     b92:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     b94:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     b96:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     b9a:	6081      	str	r1, [r0, #8]
	switch (method) {
     b9c:	2b02      	cmp	r3, #2
     b9e:	d903      	bls.n	ba8 <sys_notify_finalize+0x18>
     ba0:	2b03      	cmp	r3, #3
     ba2:	d102      	bne.n	baa <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     ba4:	6800      	ldr	r0, [r0, #0]
		break;
     ba6:	e00e      	b.n	bc6 <sys_notify_finalize+0x36>
	switch (method) {
     ba8:	b963      	cbnz	r3, bc4 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     baa:	4d08      	ldr	r5, [pc, #32]	; (bcc <sys_notify_finalize+0x3c>)
     bac:	2345      	movs	r3, #69	; 0x45
     bae:	462a      	mov	r2, r5
     bb0:	4907      	ldr	r1, [pc, #28]	; (bd0 <sys_notify_finalize+0x40>)
     bb2:	4808      	ldr	r0, [pc, #32]	; (bd4 <sys_notify_finalize+0x44>)
     bb4:	f009 ff94 	bl	aae0 <assert_print>
     bb8:	2145      	movs	r1, #69	; 0x45
     bba:	4628      	mov	r0, r5
     bbc:	f009 ff89 	bl	aad2 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     bc0:	2000      	movs	r0, #0
     bc2:	e000      	b.n	bc6 <sys_notify_finalize+0x36>
	switch (method) {
     bc4:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     bc6:	2300      	movs	r3, #0
     bc8:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     bca:	bd38      	pop	{r3, r4, r5, pc}
     bcc:	0000c508 	.word	0x0000c508
     bd0:	0000cb38 	.word	0x0000cb38
     bd4:	0000c478 	.word	0x0000c478

00000bd8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     bd8:	4b01      	ldr	r3, [pc, #4]	; (be0 <__printk_hook_install+0x8>)
     bda:	6018      	str	r0, [r3, #0]
}
     bdc:	4770      	bx	lr
     bde:	bf00      	nop
     be0:	20004000 	.word	0x20004000

00000be4 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     be4:	b538      	push	{r3, r4, r5, lr}
     be6:	4604      	mov	r4, r0
     be8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     bea:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     bec:	2a00      	cmp	r2, #0
     bee:	db14      	blt.n	c1a <process_complete+0x36>
     bf0:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     bf4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     bf6:	2a01      	cmp	r2, #1
     bf8:	d91b      	bls.n	c32 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     bfa:	2b04      	cmp	r3, #4
     bfc:	d050      	beq.n	ca0 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     bfe:	4c2f      	ldr	r4, [pc, #188]	; (cbc <process_complete+0xd8>)
     c00:	f240 131b 	movw	r3, #283	; 0x11b
     c04:	4622      	mov	r2, r4
     c06:	492e      	ldr	r1, [pc, #184]	; (cc0 <process_complete+0xdc>)
     c08:	482e      	ldr	r0, [pc, #184]	; (cc4 <process_complete+0xe0>)
     c0a:	f009 ff69 	bl	aae0 <assert_print>
     c0e:	f240 111b 	movw	r1, #283	; 0x11b
     c12:	4620      	mov	r0, r4
     c14:	f009 ff5d 	bl	aad2 <assert_post_action>
	}
}
     c18:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     c1a:	e9d0 0100 	ldrd	r0, r1, [r0]
     c1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     c22:	2300      	movs	r3, #0
     c24:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     c26:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     c28:	2101      	movs	r1, #1
     c2a:	4620      	mov	r0, r4
     c2c:	f009 fe5d 	bl	a8ea <set_state>
     c30:	e7f2      	b.n	c18 <process_complete+0x34>
		*clients = mgr->clients;
     c32:	e9d0 0100 	ldrd	r0, r1, [r0]
     c36:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     c3a:	2200      	movs	r2, #0
     c3c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     c3e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     c40:	2b06      	cmp	r3, #6
     c42:	d00f      	beq.n	c64 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     c44:	2b05      	cmp	r3, #5
     c46:	d11d      	bne.n	c84 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     c48:	2100      	movs	r1, #0
     c4a:	4620      	mov	r0, r4
     c4c:	f009 fe4d 	bl	a8ea <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     c50:	4620      	mov	r0, r4
     c52:	f009 fe71 	bl	a938 <process_recheck>
     c56:	2800      	cmp	r0, #0
     c58:	d0de      	beq.n	c18 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c5a:	8ba3      	ldrh	r3, [r4, #28]
     c5c:	f043 0320 	orr.w	r3, r3, #32
     c60:	83a3      	strh	r3, [r4, #28]
     c62:	e7d9      	b.n	c18 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     c64:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c68:	b13b      	cbz	r3, c7a <process_complete+0x96>
				mgr->refs += 1U;
     c6a:	8be2      	ldrh	r2, [r4, #30]
     c6c:	3201      	adds	r2, #1
     c6e:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     c70:	2b00      	cmp	r3, #0
     c72:	d0f9      	beq.n	c68 <process_complete+0x84>
	return node->next;
     c74:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c76:	2b00      	cmp	r3, #0
     c78:	d1f6      	bne.n	c68 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     c7a:	2102      	movs	r1, #2
     c7c:	4620      	mov	r0, r4
     c7e:	f009 fe34 	bl	a8ea <set_state>
     c82:	e7e5      	b.n	c50 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     c84:	4d0d      	ldr	r5, [pc, #52]	; (cbc <process_complete+0xd8>)
     c86:	f240 1309 	movw	r3, #265	; 0x109
     c8a:	462a      	mov	r2, r5
     c8c:	490e      	ldr	r1, [pc, #56]	; (cc8 <process_complete+0xe4>)
     c8e:	480d      	ldr	r0, [pc, #52]	; (cc4 <process_complete+0xe0>)
     c90:	f009 ff26 	bl	aae0 <assert_print>
     c94:	f240 1109 	movw	r1, #265	; 0x109
     c98:	4628      	mov	r0, r5
     c9a:	f009 ff1a 	bl	aad2 <assert_post_action>
     c9e:	e7d3      	b.n	c48 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     ca0:	2100      	movs	r1, #0
     ca2:	f009 fe22 	bl	a8ea <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     ca6:	4620      	mov	r0, r4
     ca8:	f009 fe46 	bl	a938 <process_recheck>
     cac:	2800      	cmp	r0, #0
     cae:	d0b3      	beq.n	c18 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     cb0:	8ba3      	ldrh	r3, [r4, #28]
     cb2:	f043 0320 	orr.w	r3, r3, #32
     cb6:	83a3      	strh	r3, [r4, #28]
     cb8:	e7ae      	b.n	c18 <process_complete+0x34>
     cba:	bf00      	nop
     cbc:	0000c52c 	.word	0x0000c52c
     cc0:	0000cb38 	.word	0x0000cb38
     cc4:	0000c478 	.word	0x0000c478
     cc8:	0000c550 	.word	0x0000c550

00000ccc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cd0:	b083      	sub	sp, #12
     cd2:	4604      	mov	r4, r0
     cd4:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cd6:	8b83      	ldrh	r3, [r0, #28]
     cd8:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     cdc:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     ce0:	460d      	mov	r5, r1
     ce2:	b131      	cbz	r1, cf2 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     ce4:	f1b8 0f00 	cmp.w	r8, #0
     ce8:	d112      	bne.n	d10 <process_event+0x44>
	list->head = NULL;
     cea:	2300      	movs	r3, #0
     cec:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     cee:	9301      	str	r3, [sp, #4]
}
     cf0:	e0aa      	b.n	e48 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     cf2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; fd4 <process_event+0x308>
     cf6:	f240 1333 	movw	r3, #307	; 0x133
     cfa:	464a      	mov	r2, r9
     cfc:	49b6      	ldr	r1, [pc, #728]	; (fd8 <process_event+0x30c>)
     cfe:	48b7      	ldr	r0, [pc, #732]	; (fdc <process_event+0x310>)
     d00:	f009 feee 	bl	aae0 <assert_print>
     d04:	f240 1133 	movw	r1, #307	; 0x133
     d08:	4648      	mov	r0, r9
     d0a:	f009 fee2 	bl	aad2 <assert_post_action>
     d0e:	e7e9      	b.n	ce4 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     d10:	2d01      	cmp	r5, #1
     d12:	d013      	beq.n	d3c <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     d14:	2d02      	cmp	r5, #2
     d16:	d116      	bne.n	d46 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d18:	8ba3      	ldrh	r3, [r4, #28]
     d1a:	f043 0320 	orr.w	r3, r3, #32
     d1e:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     d20:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     d22:	4620      	mov	r0, r4
     d24:	f006 fcdc 	bl	76e0 <z_spin_unlock_valid>
     d28:	2800      	cmp	r0, #0
     d2a:	f000 819c 	beq.w	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d2e:	f386 8811 	msr	BASEPRI, r6
     d32:	f3bf 8f6f 	isb	sy
}
     d36:	b003      	add	sp, #12
     d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d3c:	8ba3      	ldrh	r3, [r4, #28]
     d3e:	f043 0310 	orr.w	r3, r3, #16
     d42:	83a3      	strh	r3, [r4, #28]
     d44:	e7ec      	b.n	d20 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     d46:	4da3      	ldr	r5, [pc, #652]	; (fd4 <process_event+0x308>)
     d48:	f44f 739e 	mov.w	r3, #316	; 0x13c
     d4c:	462a      	mov	r2, r5
     d4e:	49a4      	ldr	r1, [pc, #656]	; (fe0 <process_event+0x314>)
     d50:	48a2      	ldr	r0, [pc, #648]	; (fdc <process_event+0x310>)
     d52:	f009 fec5 	bl	aae0 <assert_print>
     d56:	f44f 719e 	mov.w	r1, #316	; 0x13c
     d5a:	4628      	mov	r0, r5
     d5c:	f009 feb9 	bl	aad2 <assert_post_action>
     d60:	e7da      	b.n	d18 <process_event+0x4c>
			evt = process_recheck(mgr);
     d62:	4620      	mov	r0, r4
     d64:	f009 fde8 	bl	a938 <process_recheck>
     d68:	4605      	mov	r5, r0
     d6a:	e06f      	b.n	e4c <process_event+0x180>
			res = mgr->last_res;
     d6c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     d70:	464a      	mov	r2, r9
     d72:	4669      	mov	r1, sp
     d74:	4620      	mov	r0, r4
     d76:	f7ff ff35 	bl	be4 <process_complete>
		onoff_transition_fn transit = NULL;
     d7a:	2500      	movs	r5, #0
     d7c:	e011      	b.n	da2 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     d7e:	2f00      	cmp	r7, #0
     d80:	f040 8081 	bne.w	e86 <process_event+0x1ba>
	return list->head;
     d84:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     d86:	2b00      	cmp	r3, #0
     d88:	f000 808b 	beq.w	ea2 <process_event+0x1d6>
			transit = mgr->transitions->start;
     d8c:	6923      	ldr	r3, [r4, #16]
     d8e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     d90:	2d00      	cmp	r5, #0
     d92:	f000 8094 	beq.w	ebe <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     d96:	2106      	movs	r1, #6
     d98:	4620      	mov	r0, r4
     d9a:	f009 fda6 	bl	a8ea <set_state>
		res = 0;
     d9e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     da2:	8ba3      	ldrh	r3, [r4, #28]
     da4:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     da8:	45b8      	cmp	r8, r7
     daa:	f000 810b 	beq.w	fc4 <process_event+0x2f8>
     dae:	68a2      	ldr	r2, [r4, #8]
     db0:	2a00      	cmp	r2, #0
     db2:	f000 8109 	beq.w	fc8 <process_event+0x2fc>
     db6:	2201      	movs	r2, #1
		if (do_monitors
     db8:	4617      	mov	r7, r2
     dba:	b91a      	cbnz	r2, dc4 <process_event+0xf8>
     dbc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     dbe:	2a00      	cmp	r2, #0
     dc0:	f000 8104 	beq.w	fcc <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     dc4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     dc8:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     dca:	f104 0a14 	add.w	sl, r4, #20
     dce:	4650      	mov	r0, sl
     dd0:	f006 fc86 	bl	76e0 <z_spin_unlock_valid>
     dd4:	2800      	cmp	r0, #0
     dd6:	f000 8115 	beq.w	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     dda:	f386 8811 	msr	BASEPRI, r6
     dde:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     de2:	2f00      	cmp	r7, #0
     de4:	f040 811f 	bne.w	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
     de8:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     dea:	b12b      	cbz	r3, df8 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     dec:	464b      	mov	r3, r9
     dee:	4642      	mov	r2, r8
     df0:	4669      	mov	r1, sp
     df2:	4620      	mov	r0, r4
     df4:	f009 fde2 	bl	a9bc <notify_all>
			if (transit != NULL) {
     df8:	b115      	cbz	r5, e00 <process_event+0x134>
				transit(mgr, transition_complete);
     dfa:	497a      	ldr	r1, [pc, #488]	; (fe4 <process_event+0x318>)
     dfc:	4620      	mov	r0, r4
     dfe:	47a8      	blx	r5
	__asm__ volatile(
     e00:	f04f 0320 	mov.w	r3, #32
     e04:	f3ef 8611 	mrs	r6, BASEPRI
     e08:	f383 8812 	msr	BASEPRI_MAX, r3
     e0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     e10:	4650      	mov	r0, sl
     e12:	f006 fc55 	bl	76c0 <z_spin_lock_valid>
     e16:	2800      	cmp	r0, #0
     e18:	f000 810b 	beq.w	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
	z_spin_lock_set_owner(l);
     e1c:	4650      	mov	r0, sl
     e1e:	f006 fc6f 	bl	7700 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e22:	8ba3      	ldrh	r3, [r4, #28]
     e24:	f023 0308 	bic.w	r3, r3, #8
     e28:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e2a:	8ba3      	ldrh	r3, [r4, #28]
     e2c:	f013 0f10 	tst.w	r3, #16
     e30:	f000 810f 	beq.w	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e34:	f023 0310 	bic.w	r3, r3, #16
     e38:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     e3a:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e3c:	8ba7      	ldrh	r7, [r4, #28]
     e3e:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     e42:	2d00      	cmp	r5, #0
     e44:	f43f af6c 	beq.w	d20 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     e48:	2d02      	cmp	r5, #2
     e4a:	d08a      	beq.n	d62 <process_event+0x96>
		if (evt == EVT_NOP) {
     e4c:	2d00      	cmp	r5, #0
     e4e:	f43f af67 	beq.w	d20 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     e52:	2d01      	cmp	r5, #1
     e54:	d08a      	beq.n	d6c <process_event+0xa0>
		} else if (evt == EVT_START) {
     e56:	2d03      	cmp	r5, #3
     e58:	d091      	beq.n	d7e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     e5a:	2d04      	cmp	r5, #4
     e5c:	d03e      	beq.n	edc <process_event+0x210>
		} else if (evt == EVT_RESET) {
     e5e:	2d05      	cmp	r5, #5
     e60:	f040 80a0 	bne.w	fa4 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     e64:	2f01      	cmp	r7, #1
     e66:	d172      	bne.n	f4e <process_event+0x282>
     e68:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e6a:	2b00      	cmp	r3, #0
     e6c:	d07d      	beq.n	f6a <process_event+0x29e>
			transit = mgr->transitions->reset;
     e6e:	6923      	ldr	r3, [r4, #16]
     e70:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     e72:	2d00      	cmp	r5, #0
     e74:	f000 8087 	beq.w	f86 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     e78:	2105      	movs	r1, #5
     e7a:	4620      	mov	r0, r4
     e7c:	f009 fd35 	bl	a8ea <set_state>
		res = 0;
     e80:	f04f 0900 	mov.w	r9, #0
     e84:	e78d      	b.n	da2 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     e86:	4d53      	ldr	r5, [pc, #332]	; (fd4 <process_event+0x308>)
     e88:	f44f 73ab 	mov.w	r3, #342	; 0x156
     e8c:	462a      	mov	r2, r5
     e8e:	4956      	ldr	r1, [pc, #344]	; (fe8 <process_event+0x31c>)
     e90:	4852      	ldr	r0, [pc, #328]	; (fdc <process_event+0x310>)
     e92:	f009 fe25 	bl	aae0 <assert_print>
     e96:	f44f 71ab 	mov.w	r1, #342	; 0x156
     e9a:	4628      	mov	r0, r5
     e9c:	f009 fe19 	bl	aad2 <assert_post_action>
     ea0:	e770      	b.n	d84 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     ea2:	4d4c      	ldr	r5, [pc, #304]	; (fd4 <process_event+0x308>)
     ea4:	f240 1357 	movw	r3, #343	; 0x157
     ea8:	462a      	mov	r2, r5
     eaa:	4950      	ldr	r1, [pc, #320]	; (fec <process_event+0x320>)
     eac:	484b      	ldr	r0, [pc, #300]	; (fdc <process_event+0x310>)
     eae:	f009 fe17 	bl	aae0 <assert_print>
     eb2:	f240 1157 	movw	r1, #343	; 0x157
     eb6:	4628      	mov	r0, r5
     eb8:	f009 fe0b 	bl	aad2 <assert_post_action>
     ebc:	e766      	b.n	d8c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     ebe:	f8df 8114 	ldr.w	r8, [pc, #276]	; fd4 <process_event+0x308>
     ec2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     ec6:	4642      	mov	r2, r8
     ec8:	4949      	ldr	r1, [pc, #292]	; (ff0 <process_event+0x324>)
     eca:	4844      	ldr	r0, [pc, #272]	; (fdc <process_event+0x310>)
     ecc:	f009 fe08 	bl	aae0 <assert_print>
     ed0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     ed4:	4640      	mov	r0, r8
     ed6:	f009 fdfc 	bl	aad2 <assert_post_action>
     eda:	e75c      	b.n	d96 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     edc:	2f02      	cmp	r7, #2
     ede:	d10b      	bne.n	ef8 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     ee0:	8be3      	ldrh	r3, [r4, #30]
     ee2:	b9bb      	cbnz	r3, f14 <process_event+0x248>
			transit = mgr->transitions->stop;
     ee4:	6923      	ldr	r3, [r4, #16]
     ee6:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     ee8:	b315      	cbz	r5, f30 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     eea:	2104      	movs	r1, #4
     eec:	4620      	mov	r0, r4
     eee:	f009 fcfc 	bl	a8ea <set_state>
		res = 0;
     ef2:	f04f 0900 	mov.w	r9, #0
     ef6:	e754      	b.n	da2 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     ef8:	4d36      	ldr	r5, [pc, #216]	; (fd4 <process_event+0x308>)
     efa:	f240 135d 	movw	r3, #349	; 0x15d
     efe:	462a      	mov	r2, r5
     f00:	493c      	ldr	r1, [pc, #240]	; (ff4 <process_event+0x328>)
     f02:	4836      	ldr	r0, [pc, #216]	; (fdc <process_event+0x310>)
     f04:	f009 fdec 	bl	aae0 <assert_print>
     f08:	f240 115d 	movw	r1, #349	; 0x15d
     f0c:	4628      	mov	r0, r5
     f0e:	f009 fde0 	bl	aad2 <assert_post_action>
     f12:	e7e5      	b.n	ee0 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     f14:	4d2f      	ldr	r5, [pc, #188]	; (fd4 <process_event+0x308>)
     f16:	f44f 73af 	mov.w	r3, #350	; 0x15e
     f1a:	462a      	mov	r2, r5
     f1c:	4936      	ldr	r1, [pc, #216]	; (ff8 <process_event+0x32c>)
     f1e:	482f      	ldr	r0, [pc, #188]	; (fdc <process_event+0x310>)
     f20:	f009 fdde 	bl	aae0 <assert_print>
     f24:	f44f 71af 	mov.w	r1, #350	; 0x15e
     f28:	4628      	mov	r0, r5
     f2a:	f009 fdd2 	bl	aad2 <assert_post_action>
     f2e:	e7d9      	b.n	ee4 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     f30:	f8df 80a0 	ldr.w	r8, [pc, #160]	; fd4 <process_event+0x308>
     f34:	f240 1361 	movw	r3, #353	; 0x161
     f38:	4642      	mov	r2, r8
     f3a:	492d      	ldr	r1, [pc, #180]	; (ff0 <process_event+0x324>)
     f3c:	4827      	ldr	r0, [pc, #156]	; (fdc <process_event+0x310>)
     f3e:	f009 fdcf 	bl	aae0 <assert_print>
     f42:	f240 1161 	movw	r1, #353	; 0x161
     f46:	4640      	mov	r0, r8
     f48:	f009 fdc3 	bl	aad2 <assert_post_action>
     f4c:	e7cd      	b.n	eea <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     f4e:	4d21      	ldr	r5, [pc, #132]	; (fd4 <process_event+0x308>)
     f50:	f44f 73b2 	mov.w	r3, #356	; 0x164
     f54:	462a      	mov	r2, r5
     f56:	4929      	ldr	r1, [pc, #164]	; (ffc <process_event+0x330>)
     f58:	4820      	ldr	r0, [pc, #128]	; (fdc <process_event+0x310>)
     f5a:	f009 fdc1 	bl	aae0 <assert_print>
     f5e:	f44f 71b2 	mov.w	r1, #356	; 0x164
     f62:	4628      	mov	r0, r5
     f64:	f009 fdb5 	bl	aad2 <assert_post_action>
     f68:	e77e      	b.n	e68 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     f6a:	4d1a      	ldr	r5, [pc, #104]	; (fd4 <process_event+0x308>)
     f6c:	f240 1365 	movw	r3, #357	; 0x165
     f70:	462a      	mov	r2, r5
     f72:	491e      	ldr	r1, [pc, #120]	; (fec <process_event+0x320>)
     f74:	4819      	ldr	r0, [pc, #100]	; (fdc <process_event+0x310>)
     f76:	f009 fdb3 	bl	aae0 <assert_print>
     f7a:	f240 1165 	movw	r1, #357	; 0x165
     f7e:	4628      	mov	r0, r5
     f80:	f009 fda7 	bl	aad2 <assert_post_action>
     f84:	e773      	b.n	e6e <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     f86:	f8df 804c 	ldr.w	r8, [pc, #76]	; fd4 <process_event+0x308>
     f8a:	f44f 73b4 	mov.w	r3, #360	; 0x168
     f8e:	4642      	mov	r2, r8
     f90:	4917      	ldr	r1, [pc, #92]	; (ff0 <process_event+0x324>)
     f92:	4812      	ldr	r0, [pc, #72]	; (fdc <process_event+0x310>)
     f94:	f009 fda4 	bl	aae0 <assert_print>
     f98:	f44f 71b4 	mov.w	r1, #360	; 0x168
     f9c:	4640      	mov	r0, r8
     f9e:	f009 fd98 	bl	aad2 <assert_post_action>
     fa2:	e769      	b.n	e78 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     fa4:	4d0b      	ldr	r5, [pc, #44]	; (fd4 <process_event+0x308>)
     fa6:	f240 136b 	movw	r3, #363	; 0x16b
     faa:	462a      	mov	r2, r5
     fac:	4914      	ldr	r1, [pc, #80]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     fae:	480b      	ldr	r0, [pc, #44]	; (fdc <process_event+0x310>)
     fb0:	f009 fd96 	bl	aae0 <assert_print>
     fb4:	f240 116b 	movw	r1, #363	; 0x16b
     fb8:	4628      	mov	r0, r5
     fba:	f009 fd8a 	bl	aad2 <assert_post_action>
		onoff_transition_fn transit = NULL;
     fbe:	2500      	movs	r5, #0
		res = 0;
     fc0:	46a9      	mov	r9, r5
     fc2:	e6ee      	b.n	da2 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     fc4:	2200      	movs	r2, #0
     fc6:	e6f7      	b.n	db8 <process_event+0xec>
     fc8:	2200      	movs	r2, #0
     fca:	e6f5      	b.n	db8 <process_event+0xec>
		    || (transit != NULL)) {
     fcc:	2d00      	cmp	r5, #0
     fce:	f47f aef9 	bne.w	dc4 <process_event+0xf8>
     fd2:	e72a      	b.n	e2a <process_event+0x15e>
     fd4:	0000c52c 	.word	0x0000c52c
     fd8:	0000c578 	.word	0x0000c578
     fdc:	0000c478 	.word	0x0000c478
     fe0:	0000c588 	.word	0x0000c588
     fe4:	000010a1 	.word	0x000010a1
     fe8:	0000c59c 	.word	0x0000c59c
     fec:	0000c5a8 	.word	0x0000c5a8
     ff0:	0000c5cc 	.word	0x0000c5cc
     ff4:	0000c5e4 	.word	0x0000c5e4
     ff8:	0000c5fc 	.word	0x0000c5fc
     ffc:	0000c60c 	.word	0x0000c60c
    1000:	0000cb38 	.word	0x0000cb38
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1004:	f8df b080 	ldr.w	fp, [pc, #128]	; 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1008:	23b9      	movs	r3, #185	; 0xb9
    100a:	465a      	mov	r2, fp
    100c:	491f      	ldr	r1, [pc, #124]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    100e:	4820      	ldr	r0, [pc, #128]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1010:	f009 fd66 	bl	aae0 <assert_print>
    1014:	4651      	mov	r1, sl
    1016:	481f      	ldr	r0, [pc, #124]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1018:	f009 fd62 	bl	aae0 <assert_print>
    101c:	21b9      	movs	r1, #185	; 0xb9
    101e:	4658      	mov	r0, fp
    1020:	f009 fd57 	bl	aad2 <assert_post_action>
    1024:	e6d9      	b.n	dda <process_event+0x10e>
				notify_monitors(mgr, state, res);
    1026:	464a      	mov	r2, r9
    1028:	4641      	mov	r1, r8
    102a:	4620      	mov	r0, r4
    102c:	f009 fc65 	bl	a8fa <notify_monitors>
    1030:	e6da      	b.n	de8 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1032:	4d15      	ldr	r5, [pc, #84]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1034:	238e      	movs	r3, #142	; 0x8e
    1036:	462a      	mov	r2, r5
    1038:	4917      	ldr	r1, [pc, #92]	; (1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
    103a:	4815      	ldr	r0, [pc, #84]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    103c:	f009 fd50 	bl	aae0 <assert_print>
    1040:	4651      	mov	r1, sl
    1042:	4816      	ldr	r0, [pc, #88]	; (109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>)
    1044:	f009 fd4c 	bl	aae0 <assert_print>
    1048:	218e      	movs	r1, #142	; 0x8e
    104a:	4628      	mov	r0, r5
    104c:	f009 fd41 	bl	aad2 <assert_post_action>
    1050:	e6e4      	b.n	e1c <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1052:	f013 0f20 	tst.w	r3, #32
    1056:	d004      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1058:	f023 0320 	bic.w	r3, r3, #32
    105c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    105e:	2502      	movs	r5, #2
    1060:	e6ec      	b.n	e3c <process_event+0x170>
		evt = EVT_NOP;
    1062:	2500      	movs	r5, #0
    1064:	e6ea      	b.n	e3c <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1066:	4d08      	ldr	r5, [pc, #32]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1068:	23b9      	movs	r3, #185	; 0xb9
    106a:	462a      	mov	r2, r5
    106c:	4907      	ldr	r1, [pc, #28]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    106e:	4808      	ldr	r0, [pc, #32]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1070:	f009 fd36 	bl	aae0 <assert_print>
    1074:	4621      	mov	r1, r4
    1076:	4807      	ldr	r0, [pc, #28]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1078:	f009 fd32 	bl	aae0 <assert_print>
    107c:	21b9      	movs	r1, #185	; 0xb9
    107e:	4628      	mov	r0, r5
    1080:	f009 fd27 	bl	aad2 <assert_post_action>
    1084:	e653      	b.n	d2e <process_event+0x62>
    1086:	bf00      	nop
    1088:	0000c624 	.word	0x0000c624
    108c:	0000c654 	.word	0x0000c654
    1090:	0000c478 	.word	0x0000c478
    1094:	0000c66c 	.word	0x0000c66c
    1098:	0000c684 	.word	0x0000c684
    109c:	0000c69c 	.word	0x0000c69c

000010a0 <transition_complete>:
{
    10a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10a4:	4604      	mov	r4, r0
    10a6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    10a8:	f100 0614 	add.w	r6, r0, #20
    10ac:	f04f 0320 	mov.w	r3, #32
    10b0:	f3ef 8711 	mrs	r7, BASEPRI
    10b4:	f383 8812 	msr	BASEPRI_MAX, r3
    10b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    10bc:	4630      	mov	r0, r6
    10be:	f006 faff 	bl	76c0 <z_spin_lock_valid>
    10c2:	b150      	cbz	r0, 10da <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    10c4:	4630      	mov	r0, r6
    10c6:	f006 fb1b 	bl	7700 <z_spin_lock_set_owner>
	mgr->last_res = res;
    10ca:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    10cc:	463a      	mov	r2, r7
    10ce:	2101      	movs	r1, #1
    10d0:	4620      	mov	r0, r4
    10d2:	f7ff fdfb 	bl	ccc <process_event>
}
    10d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    10da:	f8df 8020 	ldr.w	r8, [pc, #32]	; 10fc <transition_complete+0x5c>
    10de:	238e      	movs	r3, #142	; 0x8e
    10e0:	4642      	mov	r2, r8
    10e2:	4907      	ldr	r1, [pc, #28]	; (1100 <transition_complete+0x60>)
    10e4:	4807      	ldr	r0, [pc, #28]	; (1104 <transition_complete+0x64>)
    10e6:	f009 fcfb 	bl	aae0 <assert_print>
    10ea:	4631      	mov	r1, r6
    10ec:	4806      	ldr	r0, [pc, #24]	; (1108 <transition_complete+0x68>)
    10ee:	f009 fcf7 	bl	aae0 <assert_print>
    10f2:	218e      	movs	r1, #142	; 0x8e
    10f4:	4640      	mov	r0, r8
    10f6:	f009 fcec 	bl	aad2 <assert_post_action>
    10fa:	e7e3      	b.n	10c4 <transition_complete+0x24>
    10fc:	0000c624 	.word	0x0000c624
    1100:	0000c684 	.word	0x0000c684
    1104:	0000c478 	.word	0x0000c478
    1108:	0000c69c 	.word	0x0000c69c

0000110c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    110c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1110:	4604      	mov	r4, r0
    1112:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1114:	f009 fc29 	bl	a96a <validate_args>

	if (rv < 0) {
    1118:	1e06      	subs	r6, r0, #0
    111a:	db58      	blt.n	11ce <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    111c:	f104 0714 	add.w	r7, r4, #20
    1120:	f04f 0320 	mov.w	r3, #32
    1124:	f3ef 8911 	mrs	r9, BASEPRI
    1128:	f383 8812 	msr	BASEPRI_MAX, r3
    112c:	f3bf 8f6f 	isb	sy
    1130:	4638      	mov	r0, r7
    1132:	f006 fac5 	bl	76c0 <z_spin_lock_valid>
    1136:	b1e8      	cbz	r0, 1174 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    1138:	4638      	mov	r0, r7
    113a:	f006 fae1 	bl	7700 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    113e:	8ba5      	ldrh	r5, [r4, #28]
    1140:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1144:	8be3      	ldrh	r3, [r4, #30]
    1146:	f64f 72ff 	movw	r2, #65535	; 0xffff
    114a:	4293      	cmp	r3, r2
    114c:	d056      	beq.n	11fc <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    114e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    1150:	2d02      	cmp	r5, #2
    1152:	d01f      	beq.n	1194 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    1154:	b32d      	cbz	r5, 11a2 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    1156:	2d04      	cmp	r5, #4
    1158:	d023      	beq.n	11a2 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    115a:	2d06      	cmp	r5, #6
    115c:	d021      	beq.n	11a2 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    115e:	2d05      	cmp	r5, #5
    1160:	d053      	beq.n	120a <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1162:	2d01      	cmp	r5, #1
    1164:	d136      	bne.n	11d4 <onoff_request+0xc8>
		rv = -EIO;
    1166:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    116a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    116e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1170:	4652      	mov	r2, sl
    1172:	e01c      	b.n	11ae <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1174:	4d3c      	ldr	r5, [pc, #240]	; (1268 <onoff_request+0x15c>)
    1176:	238e      	movs	r3, #142	; 0x8e
    1178:	462a      	mov	r2, r5
    117a:	493c      	ldr	r1, [pc, #240]	; (126c <onoff_request+0x160>)
    117c:	483c      	ldr	r0, [pc, #240]	; (1270 <onoff_request+0x164>)
    117e:	f009 fcaf 	bl	aae0 <assert_print>
    1182:	4639      	mov	r1, r7
    1184:	483b      	ldr	r0, [pc, #236]	; (1274 <onoff_request+0x168>)
    1186:	f009 fcab 	bl	aae0 <assert_print>
    118a:	218e      	movs	r1, #142	; 0x8e
    118c:	4628      	mov	r0, r5
    118e:	f009 fca0 	bl	aad2 <assert_post_action>
    1192:	e7d1      	b.n	1138 <onoff_request+0x2c>
		mgr->refs += 1U;
    1194:	3301      	adds	r3, #1
    1196:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1198:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    119c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    119e:	461a      	mov	r2, r3
    11a0:	e005      	b.n	11ae <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    11a2:	fab5 f385 	clz	r3, r5
    11a6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    11a8:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    11ac:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    11ae:	b142      	cbz	r2, 11c2 <onoff_request+0xb6>
	parent->next = child;
    11b0:	2200      	movs	r2, #0
    11b2:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    11b6:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    11b8:	b372      	cbz	r2, 1218 <onoff_request+0x10c>
	parent->next = child;
    11ba:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    11be:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    11c2:	b373      	cbz	r3, 1222 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    11c4:	464a      	mov	r2, r9
    11c6:	2102      	movs	r1, #2
    11c8:	4620      	mov	r0, r4
    11ca:	f7ff fd7f 	bl	ccc <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    11ce:	4630      	mov	r0, r6
    11d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    11d4:	4e28      	ldr	r6, [pc, #160]	; (1278 <onoff_request+0x16c>)
    11d6:	f240 13c9 	movw	r3, #457	; 0x1c9
    11da:	4632      	mov	r2, r6
    11dc:	4927      	ldr	r1, [pc, #156]	; (127c <onoff_request+0x170>)
    11de:	4824      	ldr	r0, [pc, #144]	; (1270 <onoff_request+0x164>)
    11e0:	f009 fc7e 	bl	aae0 <assert_print>
    11e4:	f240 11c9 	movw	r1, #457	; 0x1c9
    11e8:	4630      	mov	r0, r6
    11ea:	f009 fc72 	bl	aad2 <assert_post_action>
		rv = -EIO;
    11ee:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    11f2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    11f6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    11f8:	4652      	mov	r2, sl
    11fa:	e7d8      	b.n	11ae <onoff_request+0xa2>
		rv = -EAGAIN;
    11fc:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1200:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1204:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1206:	4652      	mov	r2, sl
    1208:	e7d1      	b.n	11ae <onoff_request+0xa2>
		rv = -ENOTSUP;
    120a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    120e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1212:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1214:	4652      	mov	r2, sl
    1216:	e7ca      	b.n	11ae <onoff_request+0xa2>
    1218:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    121c:	f8c4 8000 	str.w	r8, [r4]
}
    1220:	e7cf      	b.n	11c2 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1222:	4638      	mov	r0, r7
    1224:	f006 fa5c 	bl	76e0 <z_spin_unlock_valid>
    1228:	b168      	cbz	r0, 1246 <onoff_request+0x13a>
	__asm__ volatile(
    122a:	f389 8811 	msr	BASEPRI, r9
    122e:	f3bf 8f6f 	isb	sy
		if (notify) {
    1232:	f1ba 0f00 	cmp.w	sl, #0
    1236:	d0ca      	beq.n	11ce <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    1238:	2300      	movs	r3, #0
    123a:	462a      	mov	r2, r5
    123c:	4641      	mov	r1, r8
    123e:	4620      	mov	r0, r4
    1240:	f009 fba9 	bl	a996 <notify_one>
    1244:	e7c3      	b.n	11ce <onoff_request+0xc2>
    1246:	f8df b020 	ldr.w	fp, [pc, #32]	; 1268 <onoff_request+0x15c>
    124a:	23b9      	movs	r3, #185	; 0xb9
    124c:	465a      	mov	r2, fp
    124e:	490c      	ldr	r1, [pc, #48]	; (1280 <onoff_request+0x174>)
    1250:	4807      	ldr	r0, [pc, #28]	; (1270 <onoff_request+0x164>)
    1252:	f009 fc45 	bl	aae0 <assert_print>
    1256:	4639      	mov	r1, r7
    1258:	480a      	ldr	r0, [pc, #40]	; (1284 <onoff_request+0x178>)
    125a:	f009 fc41 	bl	aae0 <assert_print>
    125e:	21b9      	movs	r1, #185	; 0xb9
    1260:	4658      	mov	r0, fp
    1262:	f009 fc36 	bl	aad2 <assert_post_action>
    1266:	e7e0      	b.n	122a <onoff_request+0x11e>
    1268:	0000c624 	.word	0x0000c624
    126c:	0000c684 	.word	0x0000c684
    1270:	0000c478 	.word	0x0000c478
    1274:	0000c69c 	.word	0x0000c69c
    1278:	0000c52c 	.word	0x0000c52c
    127c:	0000c60c 	.word	0x0000c60c
    1280:	0000c654 	.word	0x0000c654
    1284:	0000c66c 	.word	0x0000c66c

00001288 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    128c:	4606      	mov	r6, r0
    128e:	460d      	mov	r5, r1
    1290:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1292:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    1296:	d222      	bcs.n	12de <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1298:	2c04      	cmp	r4, #4
    129a:	d931      	bls.n	1300 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    129c:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    129e:	1dec      	adds	r4, r5, #7
    12a0:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    12a4:	4415      	add	r5, r2
    12a6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    12aa:	1b2d      	subs	r5, r5, r4
    12ac:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12b0:	2d17      	cmp	r5, #23
    12b2:	d936      	bls.n	1322 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    12b4:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    12b6:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    12ba:	2300      	movs	r3, #0
    12bc:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    12be:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    12c2:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    12c6:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    12ca:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    12cc:	3607      	adds	r6, #7
    12ce:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    12d2:	f109 0301 	add.w	r3, r9, #1
    12d6:	4543      	cmp	r3, r8
    12d8:	d834      	bhi.n	1344 <sys_heap_init+0xbc>
{
    12da:	2300      	movs	r3, #0
    12dc:	e049      	b.n	1372 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    12de:	4f38      	ldr	r7, [pc, #224]	; (13c0 <sys_heap_init+0x138>)
    12e0:	f240 13e3 	movw	r3, #483	; 0x1e3
    12e4:	463a      	mov	r2, r7
    12e6:	4937      	ldr	r1, [pc, #220]	; (13c4 <sys_heap_init+0x13c>)
    12e8:	4837      	ldr	r0, [pc, #220]	; (13c8 <sys_heap_init+0x140>)
    12ea:	f009 fbf9 	bl	aae0 <assert_print>
    12ee:	4837      	ldr	r0, [pc, #220]	; (13cc <sys_heap_init+0x144>)
    12f0:	f009 fbf6 	bl	aae0 <assert_print>
    12f4:	f240 11e3 	movw	r1, #483	; 0x1e3
    12f8:	4638      	mov	r0, r7
    12fa:	f009 fbea 	bl	aad2 <assert_post_action>
    12fe:	e7cb      	b.n	1298 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1300:	4f2f      	ldr	r7, [pc, #188]	; (13c0 <sys_heap_init+0x138>)
    1302:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1306:	463a      	mov	r2, r7
    1308:	4931      	ldr	r1, [pc, #196]	; (13d0 <sys_heap_init+0x148>)
    130a:	482f      	ldr	r0, [pc, #188]	; (13c8 <sys_heap_init+0x140>)
    130c:	f009 fbe8 	bl	aae0 <assert_print>
    1310:	4830      	ldr	r0, [pc, #192]	; (13d4 <sys_heap_init+0x14c>)
    1312:	f009 fbe5 	bl	aae0 <assert_print>
    1316:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    131a:	4638      	mov	r0, r7
    131c:	f009 fbd9 	bl	aad2 <assert_post_action>
    1320:	e7bc      	b.n	129c <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1322:	4f27      	ldr	r7, [pc, #156]	; (13c0 <sys_heap_init+0x138>)
    1324:	f240 13f3 	movw	r3, #499	; 0x1f3
    1328:	463a      	mov	r2, r7
    132a:	492b      	ldr	r1, [pc, #172]	; (13d8 <sys_heap_init+0x150>)
    132c:	4826      	ldr	r0, [pc, #152]	; (13c8 <sys_heap_init+0x140>)
    132e:	f009 fbd7 	bl	aae0 <assert_print>
    1332:	4828      	ldr	r0, [pc, #160]	; (13d4 <sys_heap_init+0x14c>)
    1334:	f009 fbd4 	bl	aae0 <assert_print>
    1338:	f240 11f3 	movw	r1, #499	; 0x1f3
    133c:	4638      	mov	r0, r7
    133e:	f009 fbc8 	bl	aad2 <assert_post_action>
    1342:	e7b7      	b.n	12b4 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1344:	f8df a078 	ldr.w	sl, [pc, #120]	; 13c0 <sys_heap_init+0x138>
    1348:	f44f 7301 	mov.w	r3, #516	; 0x204
    134c:	4652      	mov	r2, sl
    134e:	4923      	ldr	r1, [pc, #140]	; (13dc <sys_heap_init+0x154>)
    1350:	481d      	ldr	r0, [pc, #116]	; (13c8 <sys_heap_init+0x140>)
    1352:	f009 fbc5 	bl	aae0 <assert_print>
    1356:	481f      	ldr	r0, [pc, #124]	; (13d4 <sys_heap_init+0x14c>)
    1358:	f009 fbc2 	bl	aae0 <assert_print>
    135c:	f44f 7101 	mov.w	r1, #516	; 0x204
    1360:	4650      	mov	r0, sl
    1362:	f009 fbb6 	bl	aad2 <assert_post_action>
    1366:	e7b8      	b.n	12da <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1368:	1d1a      	adds	r2, r3, #4
    136a:	2100      	movs	r1, #0
    136c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1370:	3301      	adds	r3, #1
    1372:	42bb      	cmp	r3, r7
    1374:	dbf8      	blt.n	1368 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1376:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    137a:	b29b      	uxth	r3, r3
    137c:	8063      	strh	r3, [r4, #2]
    137e:	2200      	movs	r2, #0
    1380:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1382:	f043 0301 	orr.w	r3, r3, #1
    1386:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1388:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    138c:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1390:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    1394:	1cb3      	adds	r3, r6, #2
    1396:	52e1      	strh	r1, [r4, r3]
    1398:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    139c:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    13a0:	1ca9      	adds	r1, r5, #2
    13a2:	5262      	strh	r2, [r4, r1]
    13a4:	4425      	add	r5, r4
    13a6:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    13aa:	886b      	ldrh	r3, [r5, #2]
    13ac:	f043 0301 	orr.w	r3, r3, #1
    13b0:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    13b2:	4649      	mov	r1, r9
    13b4:	4620      	mov	r0, r4
    13b6:	f009 fb66 	bl	aa86 <free_list_add>
}
    13ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13be:	bf00      	nop
    13c0:	0000c6b4 	.word	0x0000c6b4
    13c4:	0000c788 	.word	0x0000c788
    13c8:	0000c478 	.word	0x0000c478
    13cc:	0000c7a0 	.word	0x0000c7a0
    13d0:	0000c7b8 	.word	0x0000c7b8
    13d4:	0000c7dc 	.word	0x0000c7dc
    13d8:	0000c7f8 	.word	0x0000c7f8
    13dc:	0000c824 	.word	0x0000c824

000013e0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    13e0:	4684      	mov	ip, r0
	const char *sp = *str;
    13e2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    13e4:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    13e6:	e005      	b.n	13f4 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    13e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    13ec:	3201      	adds	r2, #1
    13ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    13f2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    13f4:	7813      	ldrb	r3, [r2, #0]
    13f6:	4904      	ldr	r1, [pc, #16]	; (1408 <extract_decimal+0x28>)
    13f8:	5c59      	ldrb	r1, [r3, r1]
    13fa:	f011 0f04 	tst.w	r1, #4
    13fe:	d1f3      	bne.n	13e8 <extract_decimal+0x8>
	}
	*str = sp;
    1400:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    1404:	4770      	bx	lr
    1406:	bf00      	nop
    1408:	0000e235 	.word	0x0000e235

0000140c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    140c:	b570      	push	{r4, r5, r6, lr}
    140e:	b082      	sub	sp, #8
    1410:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    1412:	2300      	movs	r3, #0
    1414:	6003      	str	r3, [r0, #0]
    1416:	6043      	str	r3, [r0, #4]
    1418:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    141a:	784b      	ldrb	r3, [r1, #1]
    141c:	2b25      	cmp	r3, #37	; 0x25
    141e:	d002      	beq.n	1426 <extract_conversion+0x1a>
    1420:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    1422:	2501      	movs	r5, #1
    1424:	e01f      	b.n	1466 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    1426:	1c88      	adds	r0, r1, #2
    1428:	70e3      	strb	r3, [r4, #3]
		return sp;
    142a:	e145      	b.n	16b8 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    142c:	7823      	ldrb	r3, [r4, #0]
    142e:	f043 0304 	orr.w	r3, r3, #4
    1432:	7023      	strb	r3, [r4, #0]
		if (loop) {
    1434:	b1b5      	cbz	r5, 1464 <extract_conversion+0x58>
			++sp;
    1436:	3601      	adds	r6, #1
    1438:	e014      	b.n	1464 <extract_conversion+0x58>
			conv->flag_plus = true;
    143a:	7823      	ldrb	r3, [r4, #0]
    143c:	f043 0308 	orr.w	r3, r3, #8
    1440:	7023      	strb	r3, [r4, #0]
			break;
    1442:	e7f7      	b.n	1434 <extract_conversion+0x28>
			conv->flag_space = true;
    1444:	7823      	ldrb	r3, [r4, #0]
    1446:	f043 0310 	orr.w	r3, r3, #16
    144a:	7023      	strb	r3, [r4, #0]
			break;
    144c:	e7f2      	b.n	1434 <extract_conversion+0x28>
			conv->flag_hash = true;
    144e:	7823      	ldrb	r3, [r4, #0]
    1450:	f043 0320 	orr.w	r3, r3, #32
    1454:	7023      	strb	r3, [r4, #0]
			break;
    1456:	e7ed      	b.n	1434 <extract_conversion+0x28>
			conv->flag_zero = true;
    1458:	7823      	ldrb	r3, [r4, #0]
    145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    145e:	7023      	strb	r3, [r4, #0]
			break;
    1460:	e7e8      	b.n	1434 <extract_conversion+0x28>
		switch (*sp) {
    1462:	2500      	movs	r5, #0
	} while (loop);
    1464:	b345      	cbz	r5, 14b8 <extract_conversion+0xac>
		switch (*sp) {
    1466:	7833      	ldrb	r3, [r6, #0]
    1468:	3b20      	subs	r3, #32
    146a:	2b10      	cmp	r3, #16
    146c:	d8f9      	bhi.n	1462 <extract_conversion+0x56>
    146e:	a201      	add	r2, pc, #4	; (adr r2, 1474 <extract_conversion+0x68>)
    1470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1474:	00001445 	.word	0x00001445
    1478:	00001463 	.word	0x00001463
    147c:	00001463 	.word	0x00001463
    1480:	0000144f 	.word	0x0000144f
    1484:	00001463 	.word	0x00001463
    1488:	00001463 	.word	0x00001463
    148c:	00001463 	.word	0x00001463
    1490:	00001463 	.word	0x00001463
    1494:	00001463 	.word	0x00001463
    1498:	00001463 	.word	0x00001463
    149c:	00001463 	.word	0x00001463
    14a0:	0000143b 	.word	0x0000143b
    14a4:	00001463 	.word	0x00001463
    14a8:	0000142d 	.word	0x0000142d
    14ac:	00001463 	.word	0x00001463
    14b0:	00001463 	.word	0x00001463
    14b4:	00001459 	.word	0x00001459
	if (conv->flag_zero && conv->flag_dash) {
    14b8:	7823      	ldrb	r3, [r4, #0]
    14ba:	f003 0344 	and.w	r3, r3, #68	; 0x44
    14be:	2b44      	cmp	r3, #68	; 0x44
    14c0:	d05f      	beq.n	1582 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    14c2:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    14c4:	7823      	ldrb	r3, [r4, #0]
    14c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    14ca:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    14cc:	7833      	ldrb	r3, [r6, #0]
    14ce:	2b2a      	cmp	r3, #42	; 0x2a
    14d0:	d05c      	beq.n	158c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    14d2:	a801      	add	r0, sp, #4
    14d4:	f7ff ff84 	bl	13e0 <extract_decimal>
	if (sp != wp) {
    14d8:	9b01      	ldr	r3, [sp, #4]
    14da:	429e      	cmp	r6, r3
    14dc:	d00f      	beq.n	14fe <extract_conversion+0xf2>
		conv->width_present = true;
    14de:	7823      	ldrb	r3, [r4, #0]
    14e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    14e4:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    14e6:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    14e8:	b2db      	uxtb	r3, r3
    14ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    14ee:	2800      	cmp	r0, #0
    14f0:	db54      	blt.n	159c <extract_conversion+0x190>
    14f2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    14f4:	4313      	orrs	r3, r2
    14f6:	7822      	ldrb	r2, [r4, #0]
    14f8:	f363 0241 	bfi	r2, r3, #1, #1
    14fc:	7022      	strb	r2, [r4, #0]
	return sp;
    14fe:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1500:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    1502:	781b      	ldrb	r3, [r3, #0]
    1504:	2b2e      	cmp	r3, #46	; 0x2e
    1506:	bf14      	ite	ne
    1508:	2300      	movne	r3, #0
    150a:	2301      	moveq	r3, #1
    150c:	7862      	ldrb	r2, [r4, #1]
    150e:	f363 0241 	bfi	r2, r3, #1, #1
    1512:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1514:	2b00      	cmp	r3, #0
    1516:	d043      	beq.n	15a0 <extract_conversion+0x194>
	++sp;
    1518:	9b01      	ldr	r3, [sp, #4]
    151a:	1c5a      	adds	r2, r3, #1
    151c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    151e:	785b      	ldrb	r3, [r3, #1]
    1520:	2b2a      	cmp	r3, #42	; 0x2a
    1522:	d03f      	beq.n	15a4 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1524:	a801      	add	r0, sp, #4
    1526:	f7ff ff5b 	bl	13e0 <extract_decimal>
	conv->prec_value = prec;
    152a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    152c:	7823      	ldrb	r3, [r4, #0]
    152e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1532:	2800      	cmp	r0, #0
    1534:	db3e      	blt.n	15b4 <extract_conversion+0x1a8>
    1536:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1538:	4313      	orrs	r3, r2
    153a:	7822      	ldrb	r2, [r4, #0]
    153c:	f363 0241 	bfi	r2, r3, #1, #1
    1540:	7022      	strb	r2, [r4, #0]
	return sp;
    1542:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    1544:	7803      	ldrb	r3, [r0, #0]
    1546:	3b4c      	subs	r3, #76	; 0x4c
    1548:	2b2e      	cmp	r3, #46	; 0x2e
    154a:	f200 809d 	bhi.w	1688 <extract_conversion+0x27c>
    154e:	e8df f003 	tbb	[pc, r3]
    1552:	9b90      	.short	0x9b90
    1554:	9b9b9b9b 	.word	0x9b9b9b9b
    1558:	9b9b9b9b 	.word	0x9b9b9b9b
    155c:	9b9b9b9b 	.word	0x9b9b9b9b
    1560:	9b9b9b9b 	.word	0x9b9b9b9b
    1564:	9b9b9b9b 	.word	0x9b9b9b9b
    1568:	9b9b9b9b 	.word	0x9b9b9b9b
    156c:	9b339b9b 	.word	0x9b339b9b
    1570:	9b459b57 	.word	0x9b459b57
    1574:	9b9b9b9b 	.word	0x9b9b9b9b
    1578:	9b899b9b 	.word	0x9b899b9b
    157c:	9b9b9b9b 	.word	0x9b9b9b9b
    1580:	82          	.byte	0x82
    1581:	00          	.byte	0x00
		conv->flag_zero = false;
    1582:	7823      	ldrb	r3, [r4, #0]
    1584:	f36f 1386 	bfc	r3, #6, #1
    1588:	7023      	strb	r3, [r4, #0]
    158a:	e79a      	b.n	14c2 <extract_conversion+0xb6>
		conv->width_star = true;
    158c:	7863      	ldrb	r3, [r4, #1]
    158e:	f043 0301 	orr.w	r3, r3, #1
    1592:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1594:	4633      	mov	r3, r6
    1596:	3301      	adds	r3, #1
    1598:	9301      	str	r3, [sp, #4]
    159a:	e7b1      	b.n	1500 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    159c:	2201      	movs	r2, #1
    159e:	e7a9      	b.n	14f4 <extract_conversion+0xe8>
		return sp;
    15a0:	9801      	ldr	r0, [sp, #4]
    15a2:	e7cf      	b.n	1544 <extract_conversion+0x138>
		conv->prec_star = true;
    15a4:	7863      	ldrb	r3, [r4, #1]
    15a6:	f043 0304 	orr.w	r3, r3, #4
    15aa:	7063      	strb	r3, [r4, #1]
		return ++sp;
    15ac:	4610      	mov	r0, r2
    15ae:	3001      	adds	r0, #1
    15b0:	9001      	str	r0, [sp, #4]
    15b2:	e7c7      	b.n	1544 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    15b4:	2201      	movs	r2, #1
    15b6:	e7bf      	b.n	1538 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    15b8:	1c42      	adds	r2, r0, #1
    15ba:	7843      	ldrb	r3, [r0, #1]
    15bc:	2b68      	cmp	r3, #104	; 0x68
    15be:	d006      	beq.n	15ce <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    15c0:	7863      	ldrb	r3, [r4, #1]
    15c2:	2102      	movs	r1, #2
    15c4:	f361 03c6 	bfi	r3, r1, #3, #4
    15c8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    15ca:	4610      	mov	r0, r2
    15cc:	e01e      	b.n	160c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    15ce:	7863      	ldrb	r3, [r4, #1]
    15d0:	2201      	movs	r2, #1
    15d2:	f362 03c6 	bfi	r3, r2, #3, #4
    15d6:	7063      	strb	r3, [r4, #1]
			++sp;
    15d8:	3002      	adds	r0, #2
    15da:	e017      	b.n	160c <extract_conversion+0x200>
		if (*++sp == 'l') {
    15dc:	1c42      	adds	r2, r0, #1
    15de:	7843      	ldrb	r3, [r0, #1]
    15e0:	2b6c      	cmp	r3, #108	; 0x6c
    15e2:	d006      	beq.n	15f2 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    15e4:	7863      	ldrb	r3, [r4, #1]
    15e6:	2103      	movs	r1, #3
    15e8:	f361 03c6 	bfi	r3, r1, #3, #4
    15ec:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    15ee:	4610      	mov	r0, r2
    15f0:	e00c      	b.n	160c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    15f2:	7863      	ldrb	r3, [r4, #1]
    15f4:	2204      	movs	r2, #4
    15f6:	f362 03c6 	bfi	r3, r2, #3, #4
    15fa:	7063      	strb	r3, [r4, #1]
			++sp;
    15fc:	3002      	adds	r0, #2
    15fe:	e005      	b.n	160c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    1600:	7863      	ldrb	r3, [r4, #1]
    1602:	2205      	movs	r2, #5
    1604:	f362 03c6 	bfi	r3, r2, #3, #4
    1608:	7063      	strb	r3, [r4, #1]
		++sp;
    160a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    160c:	f810 3b01 	ldrb.w	r3, [r0], #1
    1610:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    1612:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1616:	2a37      	cmp	r2, #55	; 0x37
    1618:	d87d      	bhi.n	1716 <extract_conversion+0x30a>
    161a:	e8df f002 	tbb	[pc, r2]
    161e:	7c5e      	.short	0x7c5e
    1620:	5e5e7c7c 	.word	0x5e5e7c7c
    1624:	7c7c7c5e 	.word	0x7c7c7c5e
    1628:	7c7c7c7c 	.word	0x7c7c7c7c
    162c:	7c7c7c7c 	.word	0x7c7c7c7c
    1630:	7c7c7c7c 	.word	0x7c7c7c7c
    1634:	7c7c4f7c 	.word	0x7c7c4f7c
    1638:	7c7c7c7c 	.word	0x7c7c7c7c
    163c:	7c5e7c7c 	.word	0x7c5e7c7c
    1640:	5e5e3a4f 	.word	0x5e5e3a4f
    1644:	7c3a7c5e 	.word	0x7c3a7c5e
    1648:	657c7c7c 	.word	0x657c7c7c
    164c:	7c7c714f 	.word	0x7c7c714f
    1650:	7c4f7c71 	.word	0x7c4f7c71
    1654:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    1656:	7863      	ldrb	r3, [r4, #1]
    1658:	2206      	movs	r2, #6
    165a:	f362 03c6 	bfi	r3, r2, #3, #4
    165e:	7063      	strb	r3, [r4, #1]
		++sp;
    1660:	3001      	adds	r0, #1
		break;
    1662:	e7d3      	b.n	160c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    1664:	7863      	ldrb	r3, [r4, #1]
    1666:	2207      	movs	r2, #7
    1668:	f362 03c6 	bfi	r3, r2, #3, #4
    166c:	7063      	strb	r3, [r4, #1]
		++sp;
    166e:	3001      	adds	r0, #1
		break;
    1670:	e7cc      	b.n	160c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1672:	7863      	ldrb	r3, [r4, #1]
    1674:	2208      	movs	r2, #8
    1676:	f362 03c6 	bfi	r3, r2, #3, #4
    167a:	7063      	strb	r3, [r4, #1]
		++sp;
    167c:	3001      	adds	r0, #1
		conv->unsupported = true;
    167e:	7823      	ldrb	r3, [r4, #0]
    1680:	f043 0302 	orr.w	r3, r3, #2
    1684:	7023      	strb	r3, [r4, #0]
		break;
    1686:	e7c1      	b.n	160c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1688:	7863      	ldrb	r3, [r4, #1]
    168a:	f36f 03c6 	bfc	r3, #3, #4
    168e:	7063      	strb	r3, [r4, #1]
		break;
    1690:	e7bc      	b.n	160c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1692:	78a2      	ldrb	r2, [r4, #2]
    1694:	2101      	movs	r1, #1
    1696:	f361 0202 	bfi	r2, r1, #0, #3
    169a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    169c:	7862      	ldrb	r2, [r4, #1]
    169e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    16a2:	2a40      	cmp	r2, #64	; 0x40
    16a4:	d010      	beq.n	16c8 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    16a6:	2b63      	cmp	r3, #99	; 0x63
    16a8:	d013      	beq.n	16d2 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    16aa:	7823      	ldrb	r3, [r4, #0]
    16ac:	f3c3 0240 	ubfx	r2, r3, #1, #1
    16b0:	4315      	orrs	r5, r2
    16b2:	f365 0341 	bfi	r3, r5, #1, #1
    16b6:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    16b8:	b002      	add	sp, #8
    16ba:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    16bc:	78a2      	ldrb	r2, [r4, #2]
    16be:	2102      	movs	r1, #2
    16c0:	f361 0202 	bfi	r2, r1, #0, #3
    16c4:	70a2      	strb	r2, [r4, #2]
    16c6:	e7e9      	b.n	169c <extract_conversion+0x290>
			conv->invalid = true;
    16c8:	7821      	ldrb	r1, [r4, #0]
    16ca:	f041 0101 	orr.w	r1, r1, #1
    16ce:	7021      	strb	r1, [r4, #0]
    16d0:	e7e9      	b.n	16a6 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    16d2:	1e15      	subs	r5, r2, #0
    16d4:	bf18      	it	ne
    16d6:	2501      	movne	r5, #1
    16d8:	e7e7      	b.n	16aa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    16da:	78a3      	ldrb	r3, [r4, #2]
    16dc:	2204      	movs	r2, #4
    16de:	f362 0302 	bfi	r3, r2, #0, #3
    16e2:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    16e4:	2501      	movs	r5, #1
			break;
    16e6:	e7e0      	b.n	16aa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    16e8:	78a3      	ldrb	r3, [r4, #2]
    16ea:	2203      	movs	r2, #3
    16ec:	f362 0302 	bfi	r3, r2, #0, #3
    16f0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    16f2:	7863      	ldrb	r3, [r4, #1]
    16f4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    16f8:	2b40      	cmp	r3, #64	; 0x40
    16fa:	d1d6      	bne.n	16aa <extract_conversion+0x29e>
			unsupported = true;
    16fc:	2501      	movs	r5, #1
    16fe:	e7d4      	b.n	16aa <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1700:	78a3      	ldrb	r3, [r4, #2]
    1702:	2203      	movs	r2, #3
    1704:	f362 0302 	bfi	r3, r2, #0, #3
    1708:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    170a:	7863      	ldrb	r3, [r4, #1]
    170c:	f013 0f78 	tst.w	r3, #120	; 0x78
    1710:	d0cb      	beq.n	16aa <extract_conversion+0x29e>
			unsupported = true;
    1712:	2501      	movs	r5, #1
    1714:	e7c9      	b.n	16aa <extract_conversion+0x29e>
		conv->invalid = true;
    1716:	7823      	ldrb	r3, [r4, #0]
    1718:	f043 0301 	orr.w	r3, r3, #1
    171c:	7023      	strb	r3, [r4, #0]
		break;
    171e:	e7c4      	b.n	16aa <extract_conversion+0x29e>

00001720 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1724:	b083      	sub	sp, #12
    1726:	4604      	mov	r4, r0
    1728:	460d      	mov	r5, r1
    172a:	9201      	str	r2, [sp, #4]
    172c:	469a      	mov	sl, r3
    172e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    1730:	78d3      	ldrb	r3, [r2, #3]
    1732:	4a32      	ldr	r2, [pc, #200]	; (17fc <encode_uint+0xdc>)
    1734:	f813 b002 	ldrb.w	fp, [r3, r2]
    1738:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    173c:	2b6f      	cmp	r3, #111	; 0x6f
    173e:	d00f      	beq.n	1760 <encode_uint+0x40>
    1740:	d906      	bls.n	1750 <encode_uint+0x30>
    1742:	2b70      	cmp	r3, #112	; 0x70
    1744:	d00f      	beq.n	1766 <encode_uint+0x46>
    1746:	2b78      	cmp	r3, #120	; 0x78
    1748:	d110      	bne.n	176c <encode_uint+0x4c>
		return 16;
    174a:	f04f 0910 	mov.w	r9, #16
    174e:	e023      	b.n	1798 <encode_uint+0x78>
	switch (specifier) {
    1750:	2b58      	cmp	r3, #88	; 0x58
    1752:	d002      	beq.n	175a <encode_uint+0x3a>
    1754:	f04f 090a 	mov.w	r9, #10
    1758:	e01e      	b.n	1798 <encode_uint+0x78>
		return 16;
    175a:	f04f 0910 	mov.w	r9, #16
    175e:	e01b      	b.n	1798 <encode_uint+0x78>
		return 8;
    1760:	f04f 0908 	mov.w	r9, #8
    1764:	e018      	b.n	1798 <encode_uint+0x78>
		return 16;
    1766:	f04f 0910 	mov.w	r9, #16
    176a:	e015      	b.n	1798 <encode_uint+0x78>
	switch (specifier) {
    176c:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    1770:	e012      	b.n	1798 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    1772:	b2d2      	uxtb	r2, r2
    1774:	3230      	adds	r2, #48	; 0x30
    1776:	b2d2      	uxtb	r2, r2
    1778:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    177c:	463a      	mov	r2, r7
    177e:	4643      	mov	r3, r8
    1780:	4620      	mov	r0, r4
    1782:	4629      	mov	r1, r5
    1784:	f7fe fcbc 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    1788:	42bc      	cmp	r4, r7
    178a:	f175 0300 	sbcs.w	r3, r5, #0
    178e:	d319      	bcc.n	17c4 <encode_uint+0xa4>
    1790:	4556      	cmp	r6, sl
    1792:	d917      	bls.n	17c4 <encode_uint+0xa4>
		value /= radix;
    1794:	4604      	mov	r4, r0
    1796:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    1798:	f04f 0800 	mov.w	r8, #0
    179c:	464f      	mov	r7, r9
    179e:	464a      	mov	r2, r9
    17a0:	4643      	mov	r3, r8
    17a2:	4620      	mov	r0, r4
    17a4:	4629      	mov	r1, r5
    17a6:	f7fe fcab 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    17aa:	2a09      	cmp	r2, #9
    17ac:	d9e1      	bls.n	1772 <encode_uint+0x52>
    17ae:	f1bb 0f01 	cmp.w	fp, #1
    17b2:	d003      	beq.n	17bc <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    17b4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    17b6:	3257      	adds	r2, #87	; 0x57
    17b8:	b2d2      	uxtb	r2, r2
    17ba:	e7dd      	b.n	1778 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    17bc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    17be:	3237      	adds	r2, #55	; 0x37
    17c0:	b2d2      	uxtb	r2, r2
    17c2:	e7d9      	b.n	1778 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    17c4:	9b01      	ldr	r3, [sp, #4]
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	f013 0f20 	tst.w	r3, #32
    17cc:	d005      	beq.n	17da <encode_uint+0xba>
		if (radix == 8) {
    17ce:	f1b9 0f08 	cmp.w	r9, #8
    17d2:	d006      	beq.n	17e2 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    17d4:	f1b9 0f10 	cmp.w	r9, #16
    17d8:	d009      	beq.n	17ee <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    17da:	4630      	mov	r0, r6
    17dc:	b003      	add	sp, #12
    17de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    17e2:	9a01      	ldr	r2, [sp, #4]
    17e4:	7893      	ldrb	r3, [r2, #2]
    17e6:	f043 0308 	orr.w	r3, r3, #8
    17ea:	7093      	strb	r3, [r2, #2]
    17ec:	e7f5      	b.n	17da <encode_uint+0xba>
			conv->altform_0c = true;
    17ee:	9a01      	ldr	r2, [sp, #4]
    17f0:	7893      	ldrb	r3, [r2, #2]
    17f2:	f043 0310 	orr.w	r3, r3, #16
    17f6:	7093      	strb	r3, [r2, #2]
    17f8:	e7ef      	b.n	17da <encode_uint+0xba>
    17fa:	bf00      	nop
    17fc:	0000e235 	.word	0x0000e235

00001800 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1804:	b091      	sub	sp, #68	; 0x44
    1806:	4606      	mov	r6, r0
    1808:	460d      	mov	r5, r1
    180a:	4691      	mov	r9, r2
    180c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    180e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1810:	f899 0000 	ldrb.w	r0, [r9]
    1814:	2800      	cmp	r0, #0
    1816:	f000 82d5 	beq.w	1dc4 <cbvprintf+0x5c4>
		if (*fp != '%') {
    181a:	2825      	cmp	r0, #37	; 0x25
    181c:	d008      	beq.n	1830 <cbvprintf+0x30>
			OUTC(*fp++);
    181e:	f109 0901 	add.w	r9, r9, #1
    1822:	4629      	mov	r1, r5
    1824:	47b0      	blx	r6
    1826:	2800      	cmp	r0, #0
    1828:	f2c0 82cd 	blt.w	1dc6 <cbvprintf+0x5c6>
    182c:	3401      	adds	r4, #1
			continue;
    182e:	e7ef      	b.n	1810 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1830:	2300      	movs	r3, #0
    1832:	9304      	str	r3, [sp, #16]
    1834:	9305      	str	r3, [sp, #20]
    1836:	9306      	str	r3, [sp, #24]
    1838:	9307      	str	r3, [sp, #28]
    183a:	9308      	str	r3, [sp, #32]
    183c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    183e:	4649      	mov	r1, r9
    1840:	a806      	add	r0, sp, #24
    1842:	f7ff fde3 	bl	140c <extract_conversion>
    1846:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1848:	f89d 3019 	ldrb.w	r3, [sp, #25]
    184c:	f013 0f01 	tst.w	r3, #1
    1850:	f000 8097 	beq.w	1982 <cbvprintf+0x182>
			width = va_arg(ap, int);
    1854:	9b03      	ldr	r3, [sp, #12]
    1856:	1d1a      	adds	r2, r3, #4
    1858:	9203      	str	r2, [sp, #12]
    185a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    185c:	2f00      	cmp	r7, #0
    185e:	f2c0 8088 	blt.w	1972 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1862:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1866:	f013 0f04 	tst.w	r3, #4
    186a:	f000 809c 	beq.w	19a6 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    186e:	9b03      	ldr	r3, [sp, #12]
    1870:	1d1a      	adds	r2, r3, #4
    1872:	9203      	str	r2, [sp, #12]
    1874:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1878:	f1ba 0f00 	cmp.w	sl, #0
    187c:	f2c0 808a 	blt.w	1994 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1880:	2300      	movs	r3, #0
    1882:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1884:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1886:	f89d 301a 	ldrb.w	r3, [sp, #26]
    188a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    188e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1892:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1896:	2b01      	cmp	r3, #1
    1898:	f000 808e 	beq.w	19b8 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    189c:	2b02      	cmp	r3, #2
    189e:	f000 80d3 	beq.w	1a48 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    18a2:	2b04      	cmp	r3, #4
    18a4:	f000 8124 	beq.w	1af0 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    18a8:	2b03      	cmp	r3, #3
    18aa:	f000 813b 	beq.w	1b24 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    18ae:	f89d 8018 	ldrb.w	r8, [sp, #24]
    18b2:	f018 0b03 	ands.w	fp, r8, #3
    18b6:	f040 813b 	bne.w	1b30 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    18ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
    18be:	3b25      	subs	r3, #37	; 0x25
    18c0:	2b53      	cmp	r3, #83	; 0x53
    18c2:	f200 81e6 	bhi.w	1c92 <cbvprintf+0x492>
    18c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    18ca:	0140      	.short	0x0140
    18cc:	01e401e4 	.word	0x01e401e4
    18d0:	01e401e4 	.word	0x01e401e4
    18d4:	01e401e4 	.word	0x01e401e4
    18d8:	01e401e4 	.word	0x01e401e4
    18dc:	01e401e4 	.word	0x01e401e4
    18e0:	01e401e4 	.word	0x01e401e4
    18e4:	01e401e4 	.word	0x01e401e4
    18e8:	01e401e4 	.word	0x01e401e4
    18ec:	01e401e4 	.word	0x01e401e4
    18f0:	01e401e4 	.word	0x01e401e4
    18f4:	01e401e4 	.word	0x01e401e4
    18f8:	01e401e4 	.word	0x01e401e4
    18fc:	01e401e4 	.word	0x01e401e4
    1900:	01e401e4 	.word	0x01e401e4
    1904:	01e401e4 	.word	0x01e401e4
    1908:	01e401e4 	.word	0x01e401e4
    190c:	01e401e4 	.word	0x01e401e4
    1910:	01e401e4 	.word	0x01e401e4
    1914:	01e401e4 	.word	0x01e401e4
    1918:	01e401e4 	.word	0x01e401e4
    191c:	01e401e4 	.word	0x01e401e4
    1920:	01e401e4 	.word	0x01e401e4
    1924:	01e401e4 	.word	0x01e401e4
    1928:	01e401e4 	.word	0x01e401e4
    192c:	01e401e4 	.word	0x01e401e4
    1930:	01e40181 	.word	0x01e40181
    1934:	01e401e4 	.word	0x01e401e4
    1938:	01e401e4 	.word	0x01e401e4
    193c:	01e401e4 	.word	0x01e401e4
    1940:	01e401e4 	.word	0x01e401e4
    1944:	015e01e4 	.word	0x015e01e4
    1948:	01e40167 	.word	0x01e40167
    194c:	01e401e4 	.word	0x01e401e4
    1950:	016701e4 	.word	0x016701e4
    1954:	01e401e4 	.word	0x01e401e4
    1958:	01e401e4 	.word	0x01e401e4
    195c:	018101be 	.word	0x018101be
    1960:	01e401a2 	.word	0x01e401a2
    1964:	014d01e4 	.word	0x014d01e4
    1968:	018101e4 	.word	0x018101e4
    196c:	01e401e4 	.word	0x01e401e4
    1970:	0181      	.short	0x0181
				conv->flag_dash = true;
    1972:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1976:	f043 0304 	orr.w	r3, r3, #4
    197a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    197e:	427f      	negs	r7, r7
    1980:	e76f      	b.n	1862 <cbvprintf+0x62>
		} else if (conv->width_present) {
    1982:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1986:	2b00      	cmp	r3, #0
    1988:	db02      	blt.n	1990 <cbvprintf+0x190>
		int width = -1;
    198a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    198e:	e768      	b.n	1862 <cbvprintf+0x62>
			width = conv->width_value;
    1990:	9f07      	ldr	r7, [sp, #28]
    1992:	e766      	b.n	1862 <cbvprintf+0x62>
				conv->prec_present = false;
    1994:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1998:	f36f 0341 	bfc	r3, #1, #1
    199c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    19a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    19a4:	e76c      	b.n	1880 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    19a6:	f013 0f02 	tst.w	r3, #2
    19aa:	d002      	beq.n	19b2 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    19ac:	f8dd a020 	ldr.w	sl, [sp, #32]
    19b0:	e766      	b.n	1880 <cbvprintf+0x80>
		int precision = -1;
    19b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    19b6:	e763      	b.n	1880 <cbvprintf+0x80>
			switch (length_mod) {
    19b8:	1ecb      	subs	r3, r1, #3
    19ba:	2b04      	cmp	r3, #4
    19bc:	d804      	bhi.n	19c8 <cbvprintf+0x1c8>
    19be:	e8df f003 	tbb	[pc, r3]
    19c2:	1d0b      	.short	0x1d0b
    19c4:	3529      	.short	0x3529
    19c6:	35          	.byte	0x35
    19c7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    19c8:	9b03      	ldr	r3, [sp, #12]
    19ca:	1d1a      	adds	r2, r3, #4
    19cc:	9203      	str	r2, [sp, #12]
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	17da      	asrs	r2, r3, #31
    19d2:	9304      	str	r3, [sp, #16]
    19d4:	9205      	str	r2, [sp, #20]
				break;
    19d6:	e006      	b.n	19e6 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    19d8:	9b03      	ldr	r3, [sp, #12]
    19da:	1d1a      	adds	r2, r3, #4
    19dc:	9203      	str	r2, [sp, #12]
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	17da      	asrs	r2, r3, #31
    19e2:	9304      	str	r3, [sp, #16]
    19e4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    19e6:	2901      	cmp	r1, #1
    19e8:	d028      	beq.n	1a3c <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    19ea:	2902      	cmp	r1, #2
    19ec:	f47f af5f 	bne.w	18ae <cbvprintf+0xae>
				value->sint = (short)value->sint;
    19f0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    19f4:	17da      	asrs	r2, r3, #31
    19f6:	9304      	str	r3, [sp, #16]
    19f8:	9205      	str	r2, [sp, #20]
    19fa:	e758      	b.n	18ae <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    19fc:	9b03      	ldr	r3, [sp, #12]
    19fe:	3307      	adds	r3, #7
    1a00:	f023 0307 	bic.w	r3, r3, #7
    1a04:	f103 0208 	add.w	r2, r3, #8
    1a08:	9203      	str	r2, [sp, #12]
    1a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1a12:	e7e8      	b.n	19e6 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1a14:	9b03      	ldr	r3, [sp, #12]
    1a16:	3307      	adds	r3, #7
    1a18:	f023 0307 	bic.w	r3, r3, #7
    1a1c:	f103 0208 	add.w	r2, r3, #8
    1a20:	9203      	str	r2, [sp, #12]
    1a22:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1a26:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1a2a:	e7dc      	b.n	19e6 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	1d1a      	adds	r2, r3, #4
    1a30:	9203      	str	r2, [sp, #12]
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	17da      	asrs	r2, r3, #31
				value->sint =
    1a36:	9304      	str	r3, [sp, #16]
    1a38:	9205      	str	r2, [sp, #20]
				break;
    1a3a:	e7d4      	b.n	19e6 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    1a3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1a40:	9304      	str	r3, [sp, #16]
    1a42:	2300      	movs	r3, #0
    1a44:	9305      	str	r3, [sp, #20]
    1a46:	e732      	b.n	18ae <cbvprintf+0xae>
			switch (length_mod) {
    1a48:	1ecb      	subs	r3, r1, #3
    1a4a:	2b04      	cmp	r3, #4
    1a4c:	d804      	bhi.n	1a58 <cbvprintf+0x258>
    1a4e:	e8df f003 	tbb	[pc, r3]
    1a52:	1f0b      	.short	0x1f0b
    1a54:	4135      	.short	0x4135
    1a56:	41          	.byte	0x41
    1a57:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1a58:	9b03      	ldr	r3, [sp, #12]
    1a5a:	1d1a      	adds	r2, r3, #4
    1a5c:	9203      	str	r2, [sp, #12]
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	9304      	str	r3, [sp, #16]
    1a62:	2300      	movs	r3, #0
    1a64:	9305      	str	r3, [sp, #20]
				break;
    1a66:	e01e      	b.n	1aa6 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    1a68:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1a6c:	2b63      	cmp	r3, #99	; 0x63
    1a6e:	d007      	beq.n	1a80 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1a70:	9b03      	ldr	r3, [sp, #12]
    1a72:	1d1a      	adds	r2, r3, #4
    1a74:	9203      	str	r2, [sp, #12]
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	9304      	str	r3, [sp, #16]
    1a7a:	2300      	movs	r3, #0
    1a7c:	9305      	str	r3, [sp, #20]
    1a7e:	e012      	b.n	1aa6 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1a80:	9b03      	ldr	r3, [sp, #12]
    1a82:	1d1a      	adds	r2, r3, #4
    1a84:	9203      	str	r2, [sp, #12]
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	9304      	str	r3, [sp, #16]
    1a8a:	2300      	movs	r3, #0
    1a8c:	9305      	str	r3, [sp, #20]
    1a8e:	e00a      	b.n	1aa6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	3307      	adds	r3, #7
    1a94:	f023 0307 	bic.w	r3, r3, #7
    1a98:	f103 0208 	add.w	r2, r3, #8
    1a9c:	9203      	str	r2, [sp, #12]
    1a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    1aa6:	2901      	cmp	r1, #1
    1aa8:	d01c      	beq.n	1ae4 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1aaa:	2902      	cmp	r1, #2
    1aac:	f47f aeff 	bne.w	18ae <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1ab0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1ab4:	9304      	str	r3, [sp, #16]
    1ab6:	2300      	movs	r3, #0
    1ab8:	9305      	str	r3, [sp, #20]
    1aba:	e6f8      	b.n	18ae <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1abc:	9b03      	ldr	r3, [sp, #12]
    1abe:	3307      	adds	r3, #7
    1ac0:	f023 0307 	bic.w	r3, r3, #7
    1ac4:	f103 0208 	add.w	r2, r3, #8
    1ac8:	9203      	str	r2, [sp, #12]
    1aca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1ad2:	e7e8      	b.n	1aa6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1ad4:	9b03      	ldr	r3, [sp, #12]
    1ad6:	1d1a      	adds	r2, r3, #4
    1ad8:	9203      	str	r2, [sp, #12]
    1ada:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1adc:	9304      	str	r3, [sp, #16]
    1ade:	2300      	movs	r3, #0
    1ae0:	9305      	str	r3, [sp, #20]
				break;
    1ae2:	e7e0      	b.n	1aa6 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    1ae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1ae8:	9304      	str	r3, [sp, #16]
    1aea:	2300      	movs	r3, #0
    1aec:	9305      	str	r3, [sp, #20]
    1aee:	e6de      	b.n	18ae <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1af0:	2908      	cmp	r1, #8
    1af2:	d00b      	beq.n	1b0c <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    1af4:	9b03      	ldr	r3, [sp, #12]
    1af6:	3307      	adds	r3, #7
    1af8:	f023 0307 	bic.w	r3, r3, #7
    1afc:	f103 0208 	add.w	r2, r3, #8
    1b00:	9203      	str	r2, [sp, #12]
    1b02:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b0a:	e6d0      	b.n	18ae <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1b0c:	9b03      	ldr	r3, [sp, #12]
    1b0e:	3307      	adds	r3, #7
    1b10:	f023 0307 	bic.w	r3, r3, #7
    1b14:	f103 0208 	add.w	r2, r3, #8
    1b18:	9203      	str	r2, [sp, #12]
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b22:	e6c4      	b.n	18ae <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    1b24:	9b03      	ldr	r3, [sp, #12]
    1b26:	1d1a      	adds	r2, r3, #4
    1b28:	9203      	str	r2, [sp, #12]
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	9304      	str	r3, [sp, #16]
    1b2e:	e6be      	b.n	18ae <cbvprintf+0xae>
			OUTS(sp, fp);
    1b30:	9f02      	ldr	r7, [sp, #8]
    1b32:	463b      	mov	r3, r7
    1b34:	464a      	mov	r2, r9
    1b36:	4629      	mov	r1, r5
    1b38:	4630      	mov	r0, r6
    1b3a:	f008 ffb0 	bl	aa9e <outs>
    1b3e:	2800      	cmp	r0, #0
    1b40:	f2c0 8141 	blt.w	1dc6 <cbvprintf+0x5c6>
    1b44:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1b46:	46b9      	mov	r9, r7
			continue;
    1b48:	e662      	b.n	1810 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1b4a:	4629      	mov	r1, r5
    1b4c:	2025      	movs	r0, #37	; 0x25
    1b4e:	47b0      	blx	r6
    1b50:	2800      	cmp	r0, #0
    1b52:	f2c0 8138 	blt.w	1dc6 <cbvprintf+0x5c6>
    1b56:	3401      	adds	r4, #1
		char sign = 0;
    1b58:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1b5a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1b5e:	f04f 0900 	mov.w	r9, #0
			break;
    1b62:	e09b      	b.n	1c9c <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    1b64:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1b68:	f1ba 0f00 	cmp.w	sl, #0
    1b6c:	db07      	blt.n	1b7e <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    1b6e:	4651      	mov	r1, sl
    1b70:	4648      	mov	r0, r9
    1b72:	f00a fa1c 	bl	bfae <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1b76:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    1b7a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1b7c:	e08e      	b.n	1c9c <cbvprintf+0x49c>
				len = strlen(bps);
    1b7e:	4648      	mov	r0, r9
    1b80:	f7fe fc2b 	bl	3da <strlen>
    1b84:	e7f7      	b.n	1b76 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1b86:	9b04      	ldr	r3, [sp, #16]
    1b88:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1b8c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1b8e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1b92:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1b96:	e081      	b.n	1c9c <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1b98:	f018 0f08 	tst.w	r8, #8
    1b9c:	d105      	bne.n	1baa <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1b9e:	f018 0810 	ands.w	r8, r8, #16
    1ba2:	d004      	beq.n	1bae <cbvprintf+0x3ae>
				sign = ' ';
    1ba4:	f04f 0820 	mov.w	r8, #32
    1ba8:	e001      	b.n	1bae <cbvprintf+0x3ae>
				sign = '+';
    1baa:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1bae:	9a04      	ldr	r2, [sp, #16]
    1bb0:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	db02      	blt.n	1bbc <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1bb6:	9204      	str	r2, [sp, #16]
    1bb8:	9305      	str	r3, [sp, #20]
    1bba:	e008      	b.n	1bce <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1bbc:	4252      	negs	r2, r2
    1bbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1bc2:	9204      	str	r2, [sp, #16]
    1bc4:	9305      	str	r3, [sp, #20]
				sign = '-';
    1bc6:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1bca:	e000      	b.n	1bce <cbvprintf+0x3ce>
		switch (conv->specifier) {
    1bcc:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1bce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1bd2:	9300      	str	r3, [sp, #0]
    1bd4:	ab0a      	add	r3, sp, #40	; 0x28
    1bd6:	aa06      	add	r2, sp, #24
    1bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1bdc:	f7ff fda0 	bl	1720 <encode_uint>
    1be0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1be2:	f1ba 0f00 	cmp.w	sl, #0
    1be6:	f2c0 8088 	blt.w	1cfa <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1bea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1bee:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1bf2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1bf6:	f36f 1286 	bfc	r2, #6, #1
    1bfa:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1bfe:	459a      	cmp	sl, r3
    1c00:	d97e      	bls.n	1d00 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1c02:	ebaa 0303 	sub.w	r3, sl, r3
    1c06:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1c08:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c0c:	e046      	b.n	1c9c <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1c0e:	9804      	ldr	r0, [sp, #16]
    1c10:	b928      	cbnz	r0, 1c1e <cbvprintf+0x41e>
		char sign = 0;
    1c12:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1c14:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1dcc <cbvprintf+0x5cc>
			bps = "(nil)";
    1c18:	f1aa 0905 	sub.w	r9, sl, #5
    1c1c:	e03e      	b.n	1c9c <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1c1e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1c22:	9300      	str	r3, [sp, #0]
    1c24:	ab0a      	add	r3, sp, #40	; 0x28
    1c26:	aa06      	add	r2, sp, #24
    1c28:	2100      	movs	r1, #0
    1c2a:	f7ff fd79 	bl	1720 <encode_uint>
    1c2e:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1c30:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1c34:	f043 0310 	orr.w	r3, r3, #16
    1c38:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1c3c:	2378      	movs	r3, #120	; 0x78
    1c3e:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1c42:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1c44:	e7cd      	b.n	1be2 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1c46:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1c48:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1c4c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1c50:	2b07      	cmp	r3, #7
    1c52:	d806      	bhi.n	1c62 <cbvprintf+0x462>
    1c54:	e8df f003 	tbb	[pc, r3]
    1c58:	0f0d0b04 	.word	0x0f0d0b04
    1c5c:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1c60:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1c62:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1c64:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1c68:	f04f 0900 	mov.w	r9, #0
}
    1c6c:	e016      	b.n	1c9c <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1c6e:	7014      	strb	r4, [r2, #0]
		break;
    1c70:	e7f7      	b.n	1c62 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1c72:	8014      	strh	r4, [r2, #0]
		break;
    1c74:	e7f5      	b.n	1c62 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1c76:	6014      	str	r4, [r2, #0]
		break;
    1c78:	e7f3      	b.n	1c62 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    1c7a:	17e3      	asrs	r3, r4, #31
    1c7c:	6014      	str	r4, [r2, #0]
    1c7e:	6053      	str	r3, [r2, #4]
		break;
    1c80:	e7ef      	b.n	1c62 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1c82:	17e3      	asrs	r3, r4, #31
    1c84:	6014      	str	r4, [r2, #0]
    1c86:	6053      	str	r3, [r2, #4]
		break;
    1c88:	e7eb      	b.n	1c62 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    1c8a:	6014      	str	r4, [r2, #0]
		break;
    1c8c:	e7e9      	b.n	1c62 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1c8e:	6014      	str	r4, [r2, #0]
		break;
    1c90:	e7e7      	b.n	1c62 <cbvprintf+0x462>
		switch (conv->specifier) {
    1c92:	46d8      	mov	r8, fp
    1c94:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c98:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1c9c:	f1b9 0f00 	cmp.w	r9, #0
    1ca0:	f000 808d 	beq.w	1dbe <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1ca4:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1ca8:	f1b8 0f00 	cmp.w	r8, #0
    1cac:	d000      	beq.n	1cb0 <cbvprintf+0x4b0>
			nj_len += 1U;
    1cae:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1cb0:	f89d 101a 	ldrb.w	r1, [sp, #26]
    1cb4:	f011 0f10 	tst.w	r1, #16
    1cb8:	d025      	beq.n	1d06 <cbvprintf+0x506>
			nj_len += 2U;
    1cba:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1cbc:	9b07      	ldr	r3, [sp, #28]
    1cbe:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1cc0:	f011 0f40 	tst.w	r1, #64	; 0x40
    1cc4:	d001      	beq.n	1cca <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    1cc6:	9a08      	ldr	r2, [sp, #32]
    1cc8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1cca:	2f00      	cmp	r7, #0
    1ccc:	dd31      	ble.n	1d32 <cbvprintf+0x532>
			width -= (int)nj_len;
    1cce:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1cd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1cd4:	f013 0f04 	tst.w	r3, #4
    1cd8:	d12b      	bne.n	1d32 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1cda:	f013 0f40 	tst.w	r3, #64	; 0x40
    1cde:	d017      	beq.n	1d10 <cbvprintf+0x510>
					if (sign != 0) {
    1ce0:	f1b8 0f00 	cmp.w	r8, #0
    1ce4:	d017      	beq.n	1d16 <cbvprintf+0x516>
						OUTC(sign);
    1ce6:	4629      	mov	r1, r5
    1ce8:	4640      	mov	r0, r8
    1cea:	47b0      	blx	r6
    1cec:	2800      	cmp	r0, #0
    1cee:	db6a      	blt.n	1dc6 <cbvprintf+0x5c6>
    1cf0:	3401      	adds	r4, #1
						sign = 0;
    1cf2:	46d8      	mov	r8, fp
					}
					pad = '0';
    1cf4:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1cf8:	e00f      	b.n	1d1a <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1cfa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1cfe:	e7cd      	b.n	1c9c <cbvprintf+0x49c>
    1d00:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1d04:	e7ca      	b.n	1c9c <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1d06:	f011 0f08 	tst.w	r1, #8
    1d0a:	d0d7      	beq.n	1cbc <cbvprintf+0x4bc>
			nj_len += 1U;
    1d0c:	3201      	adds	r2, #1
    1d0e:	e7d5      	b.n	1cbc <cbvprintf+0x4bc>
				char pad = ' ';
    1d10:	f04f 0b20 	mov.w	fp, #32
    1d14:	e001      	b.n	1d1a <cbvprintf+0x51a>
					pad = '0';
    1d16:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1d1a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1d1c:	1e5f      	subs	r7, r3, #1
    1d1e:	2b00      	cmp	r3, #0
    1d20:	dd07      	ble.n	1d32 <cbvprintf+0x532>
					OUTC(pad);
    1d22:	4629      	mov	r1, r5
    1d24:	4658      	mov	r0, fp
    1d26:	47b0      	blx	r6
    1d28:	2800      	cmp	r0, #0
    1d2a:	db4c      	blt.n	1dc6 <cbvprintf+0x5c6>
    1d2c:	3401      	adds	r4, #1
				while (width-- > 0) {
    1d2e:	463b      	mov	r3, r7
    1d30:	e7f4      	b.n	1d1c <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1d32:	f1b8 0f00 	cmp.w	r8, #0
    1d36:	d005      	beq.n	1d44 <cbvprintf+0x544>
			OUTC(sign);
    1d38:	4629      	mov	r1, r5
    1d3a:	4640      	mov	r0, r8
    1d3c:	47b0      	blx	r6
    1d3e:	2800      	cmp	r0, #0
    1d40:	db41      	blt.n	1dc6 <cbvprintf+0x5c6>
    1d42:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1d44:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1d48:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1d4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1d50:	4313      	orrs	r3, r2
    1d52:	d005      	beq.n	1d60 <cbvprintf+0x560>
				OUTC('0');
    1d54:	4629      	mov	r1, r5
    1d56:	2030      	movs	r0, #48	; 0x30
    1d58:	47b0      	blx	r6
    1d5a:	2800      	cmp	r0, #0
    1d5c:	db33      	blt.n	1dc6 <cbvprintf+0x5c6>
    1d5e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1d60:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1d64:	f013 0f10 	tst.w	r3, #16
    1d68:	d006      	beq.n	1d78 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1d6a:	4629      	mov	r1, r5
    1d6c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1d70:	47b0      	blx	r6
    1d72:	2800      	cmp	r0, #0
    1d74:	db27      	blt.n	1dc6 <cbvprintf+0x5c6>
    1d76:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1d78:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1d7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1d7e:	2b00      	cmp	r3, #0
    1d80:	dd07      	ble.n	1d92 <cbvprintf+0x592>
				OUTC('0');
    1d82:	4629      	mov	r1, r5
    1d84:	2030      	movs	r0, #48	; 0x30
    1d86:	47b0      	blx	r6
    1d88:	2800      	cmp	r0, #0
    1d8a:	db1c      	blt.n	1dc6 <cbvprintf+0x5c6>
    1d8c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1d8e:	4643      	mov	r3, r8
    1d90:	e7f3      	b.n	1d7a <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1d92:	4653      	mov	r3, sl
    1d94:	464a      	mov	r2, r9
    1d96:	4629      	mov	r1, r5
    1d98:	4630      	mov	r0, r6
    1d9a:	f008 fe80 	bl	aa9e <outs>
    1d9e:	2800      	cmp	r0, #0
    1da0:	db11      	blt.n	1dc6 <cbvprintf+0x5c6>
    1da2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1da4:	2f00      	cmp	r7, #0
    1da6:	dd07      	ble.n	1db8 <cbvprintf+0x5b8>
			OUTC(' ');
    1da8:	4629      	mov	r1, r5
    1daa:	2020      	movs	r0, #32
    1dac:	47b0      	blx	r6
    1dae:	2800      	cmp	r0, #0
    1db0:	db09      	blt.n	1dc6 <cbvprintf+0x5c6>
    1db2:	3401      	adds	r4, #1
			--width;
    1db4:	3f01      	subs	r7, #1
    1db6:	e7f5      	b.n	1da4 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1db8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1dbc:	e528      	b.n	1810 <cbvprintf+0x10>
    1dbe:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1dc2:	e525      	b.n	1810 <cbvprintf+0x10>
		}
	}

	return count;
    1dc4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1dc6:	b011      	add	sp, #68	; 0x44
    1dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dcc:	0000c855 	.word	0x0000c855

00001dd0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1dd0:	b508      	push	{r3, lr}
	__asm__ volatile(
    1dd2:	f04f 0220 	mov.w	r2, #32
    1dd6:	f3ef 8311 	mrs	r3, BASEPRI
    1dda:	f382 8812 	msr	BASEPRI_MAX, r2
    1dde:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1de2:	f001 ff8f 	bl	3d04 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1de6:	4803      	ldr	r0, [pc, #12]	; (1df4 <sys_reboot+0x24>)
    1de8:	f008 fd71 	bl	a8ce <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1dec:	f000 ffa8 	bl	2d40 <arch_cpu_idle>
    1df0:	e7fc      	b.n	1dec <sys_reboot+0x1c>
    1df2:	bf00      	nop
    1df4:	0000c858 	.word	0x0000c858

00001df8 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    1df8:	2900      	cmp	r1, #0
    1dfa:	d150      	bne.n	1e9e <msg_process+0xa6>
{
    1dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e00:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1e02:	2400      	movs	r4, #0
    1e04:	e022      	b.n	1e4c <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    1e06:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1ea0 <msg_process+0xa8>
    1e0a:	f44f 7399 	mov.w	r3, #306	; 0x132
    1e0e:	464a      	mov	r2, r9
    1e10:	4924      	ldr	r1, [pc, #144]	; (1ea4 <msg_process+0xac>)
    1e12:	4825      	ldr	r0, [pc, #148]	; (1ea8 <msg_process+0xb0>)
    1e14:	f008 fe64 	bl	aae0 <assert_print>
    1e18:	f44f 7199 	mov.w	r1, #306	; 0x132
    1e1c:	4648      	mov	r0, r9
    1e1e:	f008 fe58 	bl	aad2 <assert_post_action>
    1e22:	e01f      	b.n	1e64 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    1e24:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1ea0 <msg_process+0xa8>
    1e28:	2385      	movs	r3, #133	; 0x85
    1e2a:	464a      	mov	r2, r9
    1e2c:	491d      	ldr	r1, [pc, #116]	; (1ea4 <msg_process+0xac>)
    1e2e:	481e      	ldr	r0, [pc, #120]	; (1ea8 <msg_process+0xb0>)
    1e30:	f008 fe56 	bl	aae0 <assert_print>
    1e34:	2185      	movs	r1, #133	; 0x85
    1e36:	4648      	mov	r0, r9
    1e38:	f008 fe4b 	bl	aad2 <assert_post_action>
    1e3c:	e01e      	b.n	1e7c <msg_process+0x84>
	backend->api->process(backend, msg);
    1e3e:	f858 3005 	ldr.w	r3, [r8, r5]
    1e42:	681b      	ldr	r3, [r3, #0]
    1e44:	4639      	mov	r1, r7
    1e46:	4630      	mov	r0, r6
    1e48:	4798      	blx	r3
    1e4a:	3401      	adds	r4, #1
    1e4c:	4b17      	ldr	r3, [pc, #92]	; (1eac <msg_process+0xb4>)
    1e4e:	4a18      	ldr	r2, [pc, #96]	; (1eb0 <msg_process+0xb8>)
    1e50:	1a9b      	subs	r3, r3, r2
    1e52:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1e56:	da20      	bge.n	1e9a <msg_process+0xa2>
	return &__log_backends_start[idx];
    1e58:	ea4f 1804 	mov.w	r8, r4, lsl #4
    1e5c:	4d14      	ldr	r5, [pc, #80]	; (1eb0 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    1e5e:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1e62:	d0d0      	beq.n	1e06 <msg_process+0xe>
	return backend->cb->active;
    1e64:	6873      	ldr	r3, [r6, #4]
    1e66:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d0ee      	beq.n	1e4a <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    1e6c:	4639      	mov	r1, r7
    1e6e:	4630      	mov	r0, r6
    1e70:	f008 fe47 	bl	ab02 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1e74:	2800      	cmp	r0, #0
    1e76:	d0e8      	beq.n	1e4a <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    1e78:	2e00      	cmp	r6, #0
    1e7a:	d0d3      	beq.n	1e24 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    1e7c:	2f00      	cmp	r7, #0
    1e7e:	d1de      	bne.n	1e3e <msg_process+0x46>
    1e80:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1ea0 <msg_process+0xa8>
    1e84:	2386      	movs	r3, #134	; 0x86
    1e86:	464a      	mov	r2, r9
    1e88:	490a      	ldr	r1, [pc, #40]	; (1eb4 <msg_process+0xbc>)
    1e8a:	4807      	ldr	r0, [pc, #28]	; (1ea8 <msg_process+0xb0>)
    1e8c:	f008 fe28 	bl	aae0 <assert_print>
    1e90:	2186      	movs	r1, #134	; 0x86
    1e92:	4648      	mov	r0, r9
    1e94:	f008 fe1d 	bl	aad2 <assert_post_action>
    1e98:	e7d1      	b.n	1e3e <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e9e:	4770      	bx	lr
    1ea0:	0000c884 	.word	0x0000c884
    1ea4:	0000c8bc 	.word	0x0000c8bc
    1ea8:	0000c478 	.word	0x0000c478
    1eac:	0000c2ac 	.word	0x0000c2ac
    1eb0:	0000c28c 	.word	0x0000c28c
    1eb4:	0000c8d4 	.word	0x0000c8d4

00001eb8 <log_format_func_t_get>:
}
    1eb8:	4b01      	ldr	r3, [pc, #4]	; (1ec0 <log_format_func_t_get+0x8>)
    1eba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1ebe:	4770      	bx	lr
    1ec0:	0000c958 	.word	0x0000c958

00001ec4 <log_init>:
{
    1ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    1ec6:	4b20      	ldr	r3, [pc, #128]	; (1f48 <log_init+0x84>)
    1ec8:	4a20      	ldr	r2, [pc, #128]	; (1f4c <log_init+0x88>)
    1eca:	1a9b      	subs	r3, r3, r2
    1ecc:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1ece:	2b90      	cmp	r3, #144	; 0x90
    1ed0:	d80e      	bhi.n	1ef0 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1ed2:	4b1f      	ldr	r3, [pc, #124]	; (1f50 <log_init+0x8c>)
    1ed4:	f3bf 8f5b 	dmb	ish
    1ed8:	e853 2f00 	ldrex	r2, [r3]
    1edc:	1c51      	adds	r1, r2, #1
    1ede:	e843 1000 	strex	r0, r1, [r3]
    1ee2:	2800      	cmp	r0, #0
    1ee4:	d1f8      	bne.n	1ed8 <log_init+0x14>
    1ee6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1eea:	bb5a      	cbnz	r2, 1f44 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    1eec:	2400      	movs	r4, #0
    1eee:	e017      	b.n	1f20 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1ef0:	4c18      	ldr	r4, [pc, #96]	; (1f54 <log_init+0x90>)
    1ef2:	f240 2373 	movw	r3, #627	; 0x273
    1ef6:	4622      	mov	r2, r4
    1ef8:	4917      	ldr	r1, [pc, #92]	; (1f58 <log_init+0x94>)
    1efa:	4818      	ldr	r0, [pc, #96]	; (1f5c <log_init+0x98>)
    1efc:	f008 fdf0 	bl	aae0 <assert_print>
    1f00:	f240 2173 	movw	r1, #627	; 0x273
    1f04:	4620      	mov	r0, r4
    1f06:	f008 fde4 	bl	aad2 <assert_post_action>
    1f0a:	e7e2      	b.n	1ed2 <log_init+0xe>
					   backend->cb->ctx,
    1f0c:	4b0f      	ldr	r3, [pc, #60]	; (1f4c <log_init+0x88>)
    1f0e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    1f12:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1f14:	2204      	movs	r2, #4
    1f16:	6819      	ldr	r1, [r3, #0]
    1f18:	4628      	mov	r0, r5
    1f1a:	f000 f8d3 	bl	20c4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1f1e:	3401      	adds	r4, #1
    1f20:	42b4      	cmp	r4, r6
    1f22:	da0f      	bge.n	1f44 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    1f24:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    1f26:	4d09      	ldr	r5, [pc, #36]	; (1f4c <log_init+0x88>)
    1f28:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1f2c:	7b2b      	ldrb	r3, [r5, #12]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d0f5      	beq.n	1f1e <log_init+0x5a>
			if (backend->api->init != NULL) {
    1f32:	0123      	lsls	r3, r4, #4
    1f34:	4a05      	ldr	r2, [pc, #20]	; (1f4c <log_init+0x88>)
    1f36:	58d3      	ldr	r3, [r2, r3]
    1f38:	699b      	ldr	r3, [r3, #24]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d0e6      	beq.n	1f0c <log_init+0x48>
				backend->api->init(backend);
    1f3e:	4628      	mov	r0, r5
    1f40:	4798      	blx	r3
    1f42:	e7e3      	b.n	1f0c <log_init+0x48>
}
    1f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f46:	bf00      	nop
    1f48:	0000c2ac 	.word	0x0000c2ac
    1f4c:	0000c28c 	.word	0x0000c28c
    1f50:	20004584 	.word	0x20004584
    1f54:	0000c8e8 	.word	0x0000c8e8
    1f58:	0000c930 	.word	0x0000c930
    1f5c:	0000c478 	.word	0x0000c478

00001f60 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1f60:	b138      	cbz	r0, 1f72 <log_set_timestamp_func+0x12>
{
    1f62:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1f64:	4a04      	ldr	r2, [pc, #16]	; (1f78 <log_set_timestamp_func+0x18>)
    1f66:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1f68:	4608      	mov	r0, r1
    1f6a:	f000 fac3 	bl	24f4 <log_output_timestamp_freq_set>
	return 0;
    1f6e:	2000      	movs	r0, #0
}
    1f70:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1f72:	f06f 0015 	mvn.w	r0, #21
}
    1f76:	4770      	bx	lr
    1f78:	20004004 	.word	0x20004004

00001f7c <log_core_init>:
{
    1f7c:	b508      	push	{r3, lr}
	panic_mode = false;
    1f7e:	2300      	movs	r3, #0
    1f80:	4a04      	ldr	r2, [pc, #16]	; (1f94 <log_core_init+0x18>)
    1f82:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1f84:	4a04      	ldr	r2, [pc, #16]	; (1f98 <log_core_init+0x1c>)
    1f86:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f8c:	4803      	ldr	r0, [pc, #12]	; (1f9c <log_core_init+0x20>)
    1f8e:	f7ff ffe7 	bl	1f60 <log_set_timestamp_func>
}
    1f92:	bd08      	pop	{r3, pc}
    1f94:	200052e5 	.word	0x200052e5
    1f98:	20004580 	.word	0x20004580
    1f9c:	0000ab07 	.word	0x0000ab07

00001fa0 <z_impl_log_panic>:
	if (panic_mode) {
    1fa0:	4b20      	ldr	r3, [pc, #128]	; (2024 <z_impl_log_panic+0x84>)
    1fa2:	781b      	ldrb	r3, [r3, #0]
    1fa4:	b103      	cbz	r3, 1fa8 <z_impl_log_panic+0x8>
    1fa6:	4770      	bx	lr
{
    1fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    1fac:	f7ff ff8a 	bl	1ec4 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1fb0:	2400      	movs	r4, #0
    1fb2:	e013      	b.n	1fdc <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    1fb4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2028 <z_impl_log_panic+0x88>
    1fb8:	f44f 7399 	mov.w	r3, #306	; 0x132
    1fbc:	4642      	mov	r2, r8
    1fbe:	491b      	ldr	r1, [pc, #108]	; (202c <z_impl_log_panic+0x8c>)
    1fc0:	481b      	ldr	r0, [pc, #108]	; (2030 <z_impl_log_panic+0x90>)
    1fc2:	f008 fd8d 	bl	aae0 <assert_print>
    1fc6:	f44f 7199 	mov.w	r1, #306	; 0x132
    1fca:	4640      	mov	r0, r8
    1fcc:	f008 fd81 	bl	aad2 <assert_post_action>
    1fd0:	e00f      	b.n	1ff2 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    1fd2:	597b      	ldr	r3, [r7, r5]
    1fd4:	695b      	ldr	r3, [r3, #20]
    1fd6:	4630      	mov	r0, r6
    1fd8:	4798      	blx	r3
    1fda:	3401      	adds	r4, #1
    1fdc:	4b15      	ldr	r3, [pc, #84]	; (2034 <z_impl_log_panic+0x94>)
    1fde:	4a16      	ldr	r2, [pc, #88]	; (2038 <z_impl_log_panic+0x98>)
    1fe0:	1a9b      	subs	r3, r3, r2
    1fe2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1fe6:	da17      	bge.n	2018 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    1fe8:	0127      	lsls	r7, r4, #4
    1fea:	4d13      	ldr	r5, [pc, #76]	; (2038 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    1fec:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1ff0:	d0e0      	beq.n	1fb4 <z_impl_log_panic+0x14>
	return backend->cb->active;
    1ff2:	6873      	ldr	r3, [r6, #4]
    1ff4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d0ef      	beq.n	1fda <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    1ffa:	2e00      	cmp	r6, #0
    1ffc:	d1e9      	bne.n	1fd2 <z_impl_log_panic+0x32>
    1ffe:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2028 <z_impl_log_panic+0x88>
    2002:	23d7      	movs	r3, #215	; 0xd7
    2004:	4642      	mov	r2, r8
    2006:	4909      	ldr	r1, [pc, #36]	; (202c <z_impl_log_panic+0x8c>)
    2008:	4809      	ldr	r0, [pc, #36]	; (2030 <z_impl_log_panic+0x90>)
    200a:	f008 fd69 	bl	aae0 <assert_print>
    200e:	21d7      	movs	r1, #215	; 0xd7
    2010:	4640      	mov	r0, r8
    2012:	f008 fd5e 	bl	aad2 <assert_post_action>
    2016:	e7dc      	b.n	1fd2 <z_impl_log_panic+0x32>
	panic_mode = true;
    2018:	4b02      	ldr	r3, [pc, #8]	; (2024 <z_impl_log_panic+0x84>)
    201a:	2201      	movs	r2, #1
    201c:	701a      	strb	r2, [r3, #0]
}
    201e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2022:	bf00      	nop
    2024:	200052e5 	.word	0x200052e5
    2028:	0000c884 	.word	0x0000c884
    202c:	0000c8bc 	.word	0x0000c8bc
    2030:	0000c478 	.word	0x0000c478
    2034:	0000c2ac 	.word	0x0000c2ac
    2038:	0000c28c 	.word	0x0000c28c

0000203c <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    203c:	4b01      	ldr	r3, [pc, #4]	; (2044 <z_log_notify_backend_enabled+0x8>)
    203e:	2201      	movs	r2, #1
    2040:	701a      	strb	r2, [r3, #0]
}
    2042:	4770      	bx	lr
    2044:	200052e4 	.word	0x200052e4

00002048 <z_log_dropped>:
    2048:	4b0d      	ldr	r3, [pc, #52]	; (2080 <z_log_dropped+0x38>)
    204a:	f3bf 8f5b 	dmb	ish
    204e:	e853 2f00 	ldrex	r2, [r3]
    2052:	3201      	adds	r2, #1
    2054:	e843 2100 	strex	r1, r2, [r3]
    2058:	2900      	cmp	r1, #0
    205a:	d1f8      	bne.n	204e <z_log_dropped+0x6>
    205c:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    2060:	b900      	cbnz	r0, 2064 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    2062:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2064:	4b07      	ldr	r3, [pc, #28]	; (2084 <z_log_dropped+0x3c>)
    2066:	f3bf 8f5b 	dmb	ish
    206a:	e853 2f00 	ldrex	r2, [r3]
    206e:	3a01      	subs	r2, #1
    2070:	e843 2100 	strex	r1, r2, [r3]
    2074:	2900      	cmp	r1, #0
    2076:	d1f8      	bne.n	206a <z_log_dropped+0x22>
    2078:	f3bf 8f5b 	dmb	ish
    207c:	e7f1      	b.n	2062 <z_log_dropped+0x1a>
    207e:	bf00      	nop
    2080:	20004580 	.word	0x20004580
    2084:	2000457c 	.word	0x2000457c

00002088 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    2088:	b510      	push	{r4, lr}
    208a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    208c:	4b04      	ldr	r3, [pc, #16]	; (20a0 <z_log_msg2_commit+0x18>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	4798      	blx	r3
    2092:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2094:	2100      	movs	r1, #0
    2096:	4620      	mov	r0, r4
    2098:	f7ff feae 	bl	1df8 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    209c:	bd10      	pop	{r4, pc}
    209e:	bf00      	nop
    20a0:	20004004 	.word	0x20004004

000020a4 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    20a4:	4b05      	ldr	r3, [pc, #20]	; (20bc <log_source_name_get+0x18>)
    20a6:	4a06      	ldr	r2, [pc, #24]	; (20c0 <log_source_name_get+0x1c>)
    20a8:	1a9b      	subs	r3, r3, r2
    20aa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    20ae:	d202      	bcs.n	20b6 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    20b0:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    20b4:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    20b6:	2000      	movs	r0, #0
}
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	0000c28c 	.word	0x0000c28c
    20c0:	0000c244 	.word	0x0000c244

000020c4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    20c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20c6:	4604      	mov	r4, r0
    20c8:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    20ca:	4d1e      	ldr	r5, [pc, #120]	; (2144 <log_backend_enable+0x80>)
    20cc:	1b45      	subs	r5, r0, r5
    20ce:	112d      	asrs	r5, r5, #4
    20d0:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    20d2:	6803      	ldr	r3, [r0, #0]
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	b163      	cbz	r3, 20f2 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    20d8:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    20da:	b1cc      	cbz	r4, 2110 <log_backend_enable+0x4c>
	backend->cb->id = id;
    20dc:	6863      	ldr	r3, [r4, #4]
    20de:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    20e0:	b314      	cbz	r4, 2128 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    20e2:	6863      	ldr	r3, [r4, #4]
    20e4:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    20e6:	6863      	ldr	r3, [r4, #4]
    20e8:	2201      	movs	r2, #1
    20ea:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    20ec:	f7ff ffa6 	bl	203c <z_log_notify_backend_enabled>
}
    20f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    20f2:	4f15      	ldr	r7, [pc, #84]	; (2148 <log_backend_enable+0x84>)
    20f4:	23bb      	movs	r3, #187	; 0xbb
    20f6:	463a      	mov	r2, r7
    20f8:	4914      	ldr	r1, [pc, #80]	; (214c <log_backend_enable+0x88>)
    20fa:	4815      	ldr	r0, [pc, #84]	; (2150 <log_backend_enable+0x8c>)
    20fc:	f008 fcf0 	bl	aae0 <assert_print>
    2100:	4814      	ldr	r0, [pc, #80]	; (2154 <log_backend_enable+0x90>)
    2102:	f008 fced 	bl	aae0 <assert_print>
    2106:	21bb      	movs	r1, #187	; 0xbb
    2108:	4638      	mov	r0, r7
    210a:	f008 fce2 	bl	aad2 <assert_post_action>
    210e:	e7e3      	b.n	20d8 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    2110:	4f11      	ldr	r7, [pc, #68]	; (2158 <log_backend_enable+0x94>)
    2112:	23e6      	movs	r3, #230	; 0xe6
    2114:	463a      	mov	r2, r7
    2116:	4911      	ldr	r1, [pc, #68]	; (215c <log_backend_enable+0x98>)
    2118:	480d      	ldr	r0, [pc, #52]	; (2150 <log_backend_enable+0x8c>)
    211a:	f008 fce1 	bl	aae0 <assert_print>
    211e:	21e6      	movs	r1, #230	; 0xe6
    2120:	4638      	mov	r0, r7
    2122:	f008 fcd6 	bl	aad2 <assert_post_action>
    2126:	e7d9      	b.n	20dc <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    2128:	4d0b      	ldr	r5, [pc, #44]	; (2158 <log_backend_enable+0x94>)
    212a:	f240 1317 	movw	r3, #279	; 0x117
    212e:	462a      	mov	r2, r5
    2130:	490a      	ldr	r1, [pc, #40]	; (215c <log_backend_enable+0x98>)
    2132:	4807      	ldr	r0, [pc, #28]	; (2150 <log_backend_enable+0x8c>)
    2134:	f008 fcd4 	bl	aae0 <assert_print>
    2138:	f240 1117 	movw	r1, #279	; 0x117
    213c:	4628      	mov	r0, r5
    213e:	f008 fcc8 	bl	aad2 <assert_post_action>
    2142:	e7ce      	b.n	20e2 <log_backend_enable+0x1e>
    2144:	0000c28c 	.word	0x0000c28c
    2148:	0000c964 	.word	0x0000c964
    214c:	0000c9c0 	.word	0x0000c9c0
    2150:	0000c478 	.word	0x0000c478
    2154:	0000c9d8 	.word	0x0000c9d8
    2158:	0000c884 	.word	0x0000c884
    215c:	0000c8bc 	.word	0x0000c8bc

00002160 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2160:	b40e      	push	{r1, r2, r3}
    2162:	b500      	push	{lr}
    2164:	b082      	sub	sp, #8
    2166:	4601      	mov	r1, r0
    2168:	ab03      	add	r3, sp, #12
    216a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    216e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2170:	4803      	ldr	r0, [pc, #12]	; (2180 <print_formatted+0x20>)
    2172:	f7ff fb45 	bl	1800 <cbvprintf>
	va_end(args);

	return length;
}
    2176:	b002      	add	sp, #8
    2178:	f85d eb04 	ldr.w	lr, [sp], #4
    217c:	b003      	add	sp, #12
    217e:	4770      	bx	lr
    2180:	0000ab3b 	.word	0x0000ab3b

00002184 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2184:	b530      	push	{r4, r5, lr}
    2186:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2188:	f011 0f44 	tst.w	r1, #68	; 0x44
    218c:	d005      	beq.n	219a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    218e:	4b1a      	ldr	r3, [pc, #104]	; (21f8 <timestamp_print+0x74>)
    2190:	681c      	ldr	r4, [r3, #0]
    2192:	b934      	cbnz	r4, 21a2 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2194:	2000      	movs	r0, #0
	}

	return length;
}
    2196:	b005      	add	sp, #20
    2198:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    219a:	4918      	ldr	r1, [pc, #96]	; (21fc <timestamp_print+0x78>)
    219c:	f7ff ffe0 	bl	2160 <print_formatted>
    21a0:	e7f9      	b.n	2196 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    21a2:	4b17      	ldr	r3, [pc, #92]	; (2200 <timestamp_print+0x7c>)
    21a4:	6819      	ldr	r1, [r3, #0]
    21a6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    21aa:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    21ae:	4a15      	ldr	r2, [pc, #84]	; (2204 <timestamp_print+0x80>)
    21b0:	fba2 320c 	umull	r3, r2, r2, ip
    21b4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    21b6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    21ba:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    21be:	4b12      	ldr	r3, [pc, #72]	; (2208 <timestamp_print+0x84>)
    21c0:	fba3 530e 	umull	r5, r3, r3, lr
    21c4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    21c6:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    21ca:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    21ce:	fb0c f101 	mul.w	r1, ip, r1
    21d2:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21d6:	fb05 1114 	mls	r1, r5, r4, r1
    21da:	fb0c f101 	mul.w	r1, ip, r1
    21de:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    21e2:	9102      	str	r1, [sp, #8]
    21e4:	9501      	str	r5, [sp, #4]
    21e6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    21ea:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    21ee:	9100      	str	r1, [sp, #0]
    21f0:	4906      	ldr	r1, [pc, #24]	; (220c <timestamp_print+0x88>)
    21f2:	f7ff ffb5 	bl	2160 <print_formatted>
    21f6:	e7ce      	b.n	2196 <timestamp_print+0x12>
    21f8:	20004588 	.word	0x20004588
    21fc:	0000c9fc 	.word	0x0000c9fc
    2200:	2000458c 	.word	0x2000458c
    2204:	91a2b3c5 	.word	0x91a2b3c5
    2208:	88888889 	.word	0x88888889
    220c:	0000ca08 	.word	0x0000ca08

00002210 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2210:	b161      	cbz	r1, 222c <color_print+0x1c>
{
    2212:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2214:	b12a      	cbz	r2, 2222 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2216:	4a06      	ldr	r2, [pc, #24]	; (2230 <color_print+0x20>)
    2218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    221c:	b912      	cbnz	r2, 2224 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    221e:	4a05      	ldr	r2, [pc, #20]	; (2234 <color_print+0x24>)
    2220:	e000      	b.n	2224 <color_print+0x14>
    2222:	4a04      	ldr	r2, [pc, #16]	; (2234 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2224:	4904      	ldr	r1, [pc, #16]	; (2238 <color_print+0x28>)
    2226:	f7ff ff9b 	bl	2160 <print_formatted>
	}
}
    222a:	bd08      	pop	{r3, pc}
    222c:	4770      	bx	lr
    222e:	bf00      	nop
    2230:	0000cacc 	.word	0x0000cacc
    2234:	0000ca24 	.word	0x0000ca24
    2238:	0000ca2c 	.word	0x0000ca2c

0000223c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    223c:	f011 0f10 	tst.w	r1, #16
    2240:	d10b      	bne.n	225a <newline_print+0x1e>
{
    2242:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2244:	f011 0f20 	tst.w	r1, #32
    2248:	d003      	beq.n	2252 <newline_print+0x16>
		print_formatted(ctx, "\n");
    224a:	4904      	ldr	r1, [pc, #16]	; (225c <newline_print+0x20>)
    224c:	f7ff ff88 	bl	2160 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    2250:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    2252:	4903      	ldr	r1, [pc, #12]	; (2260 <newline_print+0x24>)
    2254:	f7ff ff84 	bl	2160 <print_formatted>
    2258:	e7fa      	b.n	2250 <newline_print+0x14>
    225a:	4770      	bx	lr
    225c:	0000c3a4 	.word	0x0000c3a4
    2260:	0000e210 	.word	0x0000e210

00002264 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2268:	4605      	mov	r5, r0
    226a:	460f      	mov	r7, r1
    226c:	4616      	mov	r6, r2
    226e:	4698      	mov	r8, r3
	newline_print(output, flags);
    2270:	9906      	ldr	r1, [sp, #24]
    2272:	f7ff ffe3 	bl	223c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2276:	2400      	movs	r4, #0
    2278:	4544      	cmp	r4, r8
    227a:	da05      	bge.n	2288 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    227c:	4924      	ldr	r1, [pc, #144]	; (2310 <hexdump_line_print+0xac>)
    227e:	4628      	mov	r0, r5
    2280:	f7ff ff6e 	bl	2160 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2284:	3401      	adds	r4, #1
    2286:	e7f7      	b.n	2278 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2288:	2400      	movs	r4, #0
    228a:	e009      	b.n	22a0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    228c:	4920      	ldr	r1, [pc, #128]	; (2310 <hexdump_line_print+0xac>)
    228e:	4628      	mov	r0, r5
    2290:	f7ff ff66 	bl	2160 <print_formatted>
    2294:	e00b      	b.n	22ae <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2296:	491f      	ldr	r1, [pc, #124]	; (2314 <hexdump_line_print+0xb0>)
    2298:	4628      	mov	r0, r5
    229a:	f7ff ff61 	bl	2160 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    229e:	3401      	adds	r4, #1
    22a0:	2c0f      	cmp	r4, #15
    22a2:	dc0c      	bgt.n	22be <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    22a4:	2c00      	cmp	r4, #0
    22a6:	dd02      	ble.n	22ae <hexdump_line_print+0x4a>
    22a8:	f014 0f07 	tst.w	r4, #7
    22ac:	d0ee      	beq.n	228c <hexdump_line_print+0x28>
		if (i < length) {
    22ae:	42b4      	cmp	r4, r6
    22b0:	d2f1      	bcs.n	2296 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    22b2:	5d3a      	ldrb	r2, [r7, r4]
    22b4:	4918      	ldr	r1, [pc, #96]	; (2318 <hexdump_line_print+0xb4>)
    22b6:	4628      	mov	r0, r5
    22b8:	f7ff ff52 	bl	2160 <print_formatted>
    22bc:	e7ef      	b.n	229e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    22be:	4917      	ldr	r1, [pc, #92]	; (231c <hexdump_line_print+0xb8>)
    22c0:	4628      	mov	r0, r5
    22c2:	f7ff ff4d 	bl	2160 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    22c6:	2400      	movs	r4, #0
    22c8:	e009      	b.n	22de <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    22ca:	4911      	ldr	r1, [pc, #68]	; (2310 <hexdump_line_print+0xac>)
    22cc:	4628      	mov	r0, r5
    22ce:	f7ff ff47 	bl	2160 <print_formatted>
    22d2:	e00b      	b.n	22ec <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    22d4:	4912      	ldr	r1, [pc, #72]	; (2320 <hexdump_line_print+0xbc>)
    22d6:	4628      	mov	r0, r5
    22d8:	f7ff ff42 	bl	2160 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    22dc:	3401      	adds	r4, #1
    22de:	2c0f      	cmp	r4, #15
    22e0:	dc13      	bgt.n	230a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    22e2:	2c00      	cmp	r4, #0
    22e4:	dd02      	ble.n	22ec <hexdump_line_print+0x88>
    22e6:	f014 0f07 	tst.w	r4, #7
    22ea:	d0ee      	beq.n	22ca <hexdump_line_print+0x66>
		if (i < length) {
    22ec:	42b4      	cmp	r4, r6
    22ee:	d207      	bcs.n	2300 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    22f0:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    22f2:	4b0c      	ldr	r3, [pc, #48]	; (2324 <hexdump_line_print+0xc0>)
    22f4:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    22f6:	f013 0f97 	tst.w	r3, #151	; 0x97
    22fa:	d1eb      	bne.n	22d4 <hexdump_line_print+0x70>
    22fc:	222e      	movs	r2, #46	; 0x2e
    22fe:	e7e9      	b.n	22d4 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    2300:	4903      	ldr	r1, [pc, #12]	; (2310 <hexdump_line_print+0xac>)
    2302:	4628      	mov	r0, r5
    2304:	f7ff ff2c 	bl	2160 <print_formatted>
    2308:	e7e8      	b.n	22dc <hexdump_line_print+0x78>
		}
	}
}
    230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    230e:	bf00      	nop
    2310:	0000ca54 	.word	0x0000ca54
    2314:	0000ca38 	.word	0x0000ca38
    2318:	0000ca30 	.word	0x0000ca30
    231c:	0000ca3c 	.word	0x0000ca3c
    2320:	0000ca40 	.word	0x0000ca40
    2324:	0000e235 	.word	0x0000e235

00002328 <ids_print>:
{
    2328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    232c:	4680      	mov	r8, r0
    232e:	4616      	mov	r6, r2
    2330:	461d      	mov	r5, r3
    2332:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    2336:	b959      	cbnz	r1, 2350 <ids_print+0x28>
	int total = 0;
    2338:	2400      	movs	r4, #0
	if (source_id >= 0) {
    233a:	2f00      	cmp	r7, #0
    233c:	db1c      	blt.n	2378 <ids_print+0x50>
		total += print_formatted(output,
    233e:	b186      	cbz	r6, 2362 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2340:	2301      	movs	r3, #1
    2342:	9a07      	ldr	r2, [sp, #28]
    2344:	4093      	lsls	r3, r2
				(func_on &&
    2346:	f013 0f10 	tst.w	r3, #16
    234a:	d118      	bne.n	237e <ids_print+0x56>
		total += print_formatted(output,
    234c:	4e0d      	ldr	r6, [pc, #52]	; (2384 <ids_print+0x5c>)
    234e:	e009      	b.n	2364 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2350:	4b0d      	ldr	r3, [pc, #52]	; (2388 <ids_print+0x60>)
    2352:	9a07      	ldr	r2, [sp, #28]
    2354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2358:	490c      	ldr	r1, [pc, #48]	; (238c <ids_print+0x64>)
    235a:	f7ff ff01 	bl	2160 <print_formatted>
    235e:	4604      	mov	r4, r0
    2360:	e7eb      	b.n	233a <ids_print+0x12>
		total += print_formatted(output,
    2362:	4e08      	ldr	r6, [pc, #32]	; (2384 <ids_print+0x5c>)
    2364:	4639      	mov	r1, r7
    2366:	4628      	mov	r0, r5
    2368:	f7ff fe9c 	bl	20a4 <log_source_name_get>
    236c:	4602      	mov	r2, r0
    236e:	4631      	mov	r1, r6
    2370:	4640      	mov	r0, r8
    2372:	f7ff fef5 	bl	2160 <print_formatted>
    2376:	4404      	add	r4, r0
}
    2378:	4620      	mov	r0, r4
    237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    237e:	4e04      	ldr	r6, [pc, #16]	; (2390 <ids_print+0x68>)
    2380:	e7f0      	b.n	2364 <ids_print+0x3c>
    2382:	bf00      	nop
    2384:	0000ca44 	.word	0x0000ca44
    2388:	0000cae0 	.word	0x0000cae0
    238c:	0000ca50 	.word	0x0000ca50
    2390:	0000ca4c 	.word	0x0000ca4c

00002394 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2398:	b085      	sub	sp, #20
    239a:	4605      	mov	r5, r0
    239c:	460c      	mov	r4, r1
    239e:	4616      	mov	r6, r2
    23a0:	9303      	str	r3, [sp, #12]
    23a2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    23a6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    23aa:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    23ae:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    23b2:	f008 fbc0 	bl	ab36 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    23b6:	b1e8      	cbz	r0, 23f4 <prefix_print+0x60>
    23b8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    23ba:	4913      	ldr	r1, [pc, #76]	; (2408 <prefix_print+0x74>)
    23bc:	4628      	mov	r0, r5
    23be:	f7ff fecf 	bl	2160 <print_formatted>
    23c2:	4607      	mov	r7, r0
	}

	if (stamp) {
    23c4:	f1bb 0f00 	cmp.w	fp, #0
    23c8:	d116      	bne.n	23f8 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    23ca:	4642      	mov	r2, r8
    23cc:	4651      	mov	r1, sl
    23ce:	4628      	mov	r0, r5
    23d0:	f008 fbdd 	bl	ab8e <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    23d4:	f8cd 8004 	str.w	r8, [sp, #4]
    23d8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    23dc:	9300      	str	r3, [sp, #0]
    23de:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    23e2:	4632      	mov	r2, r6
    23e4:	4649      	mov	r1, r9
    23e6:	4628      	mov	r0, r5
    23e8:	f7ff ff9e 	bl	2328 <ids_print>
			domain_id, source_id, level);


	return length;
}
    23ec:	4438      	add	r0, r7
    23ee:	b005      	add	sp, #20
    23f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    23f4:	2700      	movs	r7, #0
    23f6:	e7e5      	b.n	23c4 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    23f8:	9a03      	ldr	r2, [sp, #12]
    23fa:	4621      	mov	r1, r4
    23fc:	4628      	mov	r0, r5
    23fe:	f7ff fec1 	bl	2184 <timestamp_print>
    2402:	4407      	add	r7, r0
    2404:	e7e1      	b.n	23ca <prefix_print+0x36>
    2406:	bf00      	nop
    2408:	0000ca58 	.word	0x0000ca58

0000240c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2410:	b084      	sub	sp, #16
    2412:	4606      	mov	r6, r0
    2414:	460c      	mov	r4, r1
    2416:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    2418:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    241a:	880a      	ldrh	r2, [r1, #0]
    241c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2420:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    2424:	d037      	beq.n	2496 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    2426:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    2428:	7809      	ldrb	r1, [r1, #0]
    242a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    242e:	b37a      	cbz	r2, 2490 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2430:	4829      	ldr	r0, [pc, #164]	; (24d8 <log_output_msg2_process+0xcc>)
    2432:	1a12      	subs	r2, r2, r0
    2434:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2438:	9202      	str	r2, [sp, #8]
    243a:	9101      	str	r1, [sp, #4]
    243c:	f8cd 8000 	str.w	r8, [sp]
    2440:	2200      	movs	r2, #0
    2442:	4639      	mov	r1, r7
    2444:	4630      	mov	r0, r6
    2446:	f7ff ffa5 	bl	2394 <prefix_print>
    244a:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    244c:	4625      	mov	r5, r4
    244e:	f855 3b10 	ldr.w	r3, [r5], #16
    2452:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2456:	b153      	cbz	r3, 246e <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2458:	f1b8 0f00 	cmp.w	r8, #0
    245c:	d11e      	bne.n	249c <log_output_msg2_process+0x90>
    245e:	481f      	ldr	r0, [pc, #124]	; (24dc <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2460:	462b      	mov	r3, r5
    2462:	4632      	mov	r2, r6
    2464:	491e      	ldr	r1, [pc, #120]	; (24e0 <log_output_msg2_process+0xd4>)
    2466:	f008 f9e6 	bl	a836 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    246a:	2800      	cmp	r0, #0
    246c:	db18      	blt.n	24a0 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    246e:	8862      	ldrh	r2, [r4, #2]
    2470:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    2474:	6821      	ldr	r1, [r4, #0]
    2476:	f3c1 2149 	ubfx	r1, r1, #9, #10
    247a:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    247c:	b9fa      	cbnz	r2, 24be <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    247e:	f1b8 0f00 	cmp.w	r8, #0
    2482:	d122      	bne.n	24ca <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2484:	4630      	mov	r0, r6
    2486:	f008 fbb5 	bl	abf4 <log_output_flush>
}
    248a:	b004      	add	sp, #16
    248c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2494:	e7d0      	b.n	2438 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    2496:	f04f 0900 	mov.w	r9, #0
    249a:	e7d7      	b.n	244c <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    249c:	4811      	ldr	r0, [pc, #68]	; (24e4 <log_output_msg2_process+0xd8>)
    249e:	e7df      	b.n	2460 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    24a0:	f8df a044 	ldr.w	sl, [pc, #68]	; 24e8 <log_output_msg2_process+0xdc>
    24a4:	f240 23b7 	movw	r3, #695	; 0x2b7
    24a8:	4652      	mov	r2, sl
    24aa:	4910      	ldr	r1, [pc, #64]	; (24ec <log_output_msg2_process+0xe0>)
    24ac:	4810      	ldr	r0, [pc, #64]	; (24f0 <log_output_msg2_process+0xe4>)
    24ae:	f008 fb17 	bl	aae0 <assert_print>
    24b2:	f240 21b7 	movw	r1, #695	; 0x2b7
    24b6:	4650      	mov	r0, sl
    24b8:	f008 fb0b 	bl	aad2 <assert_post_action>
    24bc:	e7d7      	b.n	246e <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    24be:	9700      	str	r7, [sp, #0]
    24c0:	464b      	mov	r3, r9
    24c2:	4630      	mov	r0, r6
    24c4:	f008 fb7b 	bl	abbe <log_msg2_hexdump>
    24c8:	e7d9      	b.n	247e <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    24ca:	4642      	mov	r2, r8
    24cc:	4639      	mov	r1, r7
    24ce:	4630      	mov	r0, r6
    24d0:	f008 fb69 	bl	aba6 <postfix_print>
    24d4:	e7d6      	b.n	2484 <log_output_msg2_process+0x78>
    24d6:	bf00      	nop
    24d8:	0000c244 	.word	0x0000c244
    24dc:	0000ab59 	.word	0x0000ab59
    24e0:	00001801 	.word	0x00001801
    24e4:	0000ab3b 	.word	0x0000ab3b
    24e8:	0000ca5c 	.word	0x0000ca5c
    24ec:	0000caa0 	.word	0x0000caa0
    24f0:	0000c478 	.word	0x0000c478

000024f4 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    24f4:	4b07      	ldr	r3, [pc, #28]	; (2514 <log_output_timestamp_freq_set+0x20>)
    24f6:	2201      	movs	r2, #1
    24f8:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    24fa:	e004      	b.n	2506 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    24fc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    24fe:	4a05      	ldr	r2, [pc, #20]	; (2514 <log_output_timestamp_freq_set+0x20>)
    2500:	6813      	ldr	r3, [r2, #0]
    2502:	005b      	lsls	r3, r3, #1
    2504:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2506:	4b04      	ldr	r3, [pc, #16]	; (2518 <log_output_timestamp_freq_set+0x24>)
    2508:	4298      	cmp	r0, r3
    250a:	d8f7      	bhi.n	24fc <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    250c:	4b03      	ldr	r3, [pc, #12]	; (251c <log_output_timestamp_freq_set+0x28>)
    250e:	6018      	str	r0, [r3, #0]
}
    2510:	4770      	bx	lr
    2512:	bf00      	nop
    2514:	2000458c 	.word	0x2000458c
    2518:	000f4240 	.word	0x000f4240
    251c:	20004588 	.word	0x20004588

00002520 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2524:	b087      	sub	sp, #28
    2526:	af02      	add	r7, sp, #8
    2528:	4682      	mov	sl, r0
    252a:	6079      	str	r1, [r7, #4]
    252c:	4691      	mov	r9, r2
    252e:	4698      	mov	r8, r3
    2530:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    2532:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    2536:	f1bb 0f00 	cmp.w	fp, #0
    253a:	d016      	beq.n	256a <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    253c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    253e:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2540:	9300      	str	r3, [sp, #0]
    2542:	465b      	mov	r3, fp
    2544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2546:	2110      	movs	r1, #16
    2548:	2000      	movs	r0, #0
    254a:	f7fe f871 	bl	630 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    254e:	1e05      	subs	r5, r0, #0
    2550:	da0c      	bge.n	256c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    2552:	4c26      	ldr	r4, [pc, #152]	; (25ec <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    2554:	2367      	movs	r3, #103	; 0x67
    2556:	4622      	mov	r2, r4
    2558:	4925      	ldr	r1, [pc, #148]	; (25f0 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    255a:	4826      	ldr	r0, [pc, #152]	; (25f4 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    255c:	f008 fac0 	bl	aae0 <assert_print>
    2560:	2167      	movs	r1, #103	; 0x67
    2562:	4620      	mov	r0, r4
    2564:	f008 fab5 	bl	aad2 <assert_post_action>
		va_end(ap2);
    2568:	e000      	b.n	256c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    256a:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    256c:	4629      	mov	r1, r5
    256e:	19ab      	adds	r3, r5, r6
    2570:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2572:	2400      	movs	r4, #0
    2574:	f36f 0400 	bfc	r4, #0, #1
    2578:	f36f 0441 	bfc	r4, #1, #1
    257c:	f36f 0482 	bfc	r4, #2, #1
    2580:	f36a 04c5 	bfi	r4, sl, #3, #3
    2584:	f369 1488 	bfi	r4, r9, #6, #3
    2588:	f365 2452 	bfi	r4, r5, #9, #10
    258c:	f366 44de 	bfi	r4, r6, #19, #12
    2590:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2594:	f023 0307 	bic.w	r3, r3, #7
    2598:	ebad 0d03 	sub.w	sp, sp, r3
    259c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    259e:	466b      	mov	r3, sp
    25a0:	f113 0018 	adds.w	r0, r3, #24
    25a4:	d00a      	beq.n	25bc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    25a6:	f1bb 0f00 	cmp.w	fp, #0
    25aa:	d007      	beq.n	25bc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    25ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    25ae:	9300      	str	r3, [sp, #0]
    25b0:	465b      	mov	r3, fp
    25b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    25b4:	f7fe f83c 	bl	630 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    25b8:	2800      	cmp	r0, #0
    25ba:	db09      	blt.n	25d0 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    25bc:	4643      	mov	r3, r8
    25be:	4622      	mov	r2, r4
    25c0:	6879      	ldr	r1, [r7, #4]
    25c2:	4628      	mov	r0, r5
    25c4:	f008 fb23 	bl	ac0e <z_log_msg2_finalize>
	}
}
    25c8:	3714      	adds	r7, #20
    25ca:	46bd      	mov	sp, r7
    25cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    25d0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 25ec <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    25d4:	2381      	movs	r3, #129	; 0x81
    25d6:	464a      	mov	r2, r9
    25d8:	4905      	ldr	r1, [pc, #20]	; (25f0 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    25da:	4806      	ldr	r0, [pc, #24]	; (25f4 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    25dc:	f008 fa80 	bl	aae0 <assert_print>
    25e0:	2181      	movs	r1, #129	; 0x81
    25e2:	4648      	mov	r0, r9
    25e4:	f008 fa75 	bl	aad2 <assert_post_action>
    25e8:	e7e8      	b.n	25bc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    25ea:	bf00      	nop
    25ec:	0000caf4 	.word	0x0000caf4
    25f0:	0000cb30 	.word	0x0000cb30
    25f4:	0000c478 	.word	0x0000c478

000025f8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    25f8:	b570      	push	{r4, r5, r6, lr}
    25fa:	4606      	mov	r6, r0
    25fc:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    25fe:	2400      	movs	r4, #0
    2600:	e006      	b.n	2610 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2602:	4b05      	ldr	r3, [pc, #20]	; (2618 <char_out+0x20>)
    2604:	6818      	ldr	r0, [r3, #0]
    2606:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2608:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    260a:	69db      	ldr	r3, [r3, #28]
    260c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    260e:	3401      	adds	r4, #1
    2610:	42ac      	cmp	r4, r5
    2612:	d3f6      	bcc.n	2602 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2614:	4628      	mov	r0, r5
    2616:	bd70      	pop	{r4, r5, r6, pc}
    2618:	200045a8 	.word	0x200045a8

0000261c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    261c:	4b01      	ldr	r3, [pc, #4]	; (2624 <format_set+0x8>)
    261e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2620:	2000      	movs	r0, #0
    2622:	4770      	bx	lr
    2624:	20004598 	.word	0x20004598

00002628 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    2628:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    262a:	4809      	ldr	r0, [pc, #36]	; (2650 <log_backend_uart_init+0x28>)
    262c:	4b09      	ldr	r3, [pc, #36]	; (2654 <log_backend_uart_init+0x2c>)
    262e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2630:	f009 fb74 	bl	bd1c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2634:	b100      	cbz	r0, 2638 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    2636:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2638:	4c07      	ldr	r4, [pc, #28]	; (2658 <log_backend_uart_init+0x30>)
    263a:	2379      	movs	r3, #121	; 0x79
    263c:	4622      	mov	r2, r4
    263e:	4907      	ldr	r1, [pc, #28]	; (265c <log_backend_uart_init+0x34>)
    2640:	4807      	ldr	r0, [pc, #28]	; (2660 <log_backend_uart_init+0x38>)
    2642:	f008 fa4d 	bl	aae0 <assert_print>
    2646:	2179      	movs	r1, #121	; 0x79
    2648:	4620      	mov	r0, r4
    264a:	f008 fa42 	bl	aad2 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    264e:	e7f2      	b.n	2636 <log_backend_uart_init+0xe>
    2650:	0000c0ac 	.word	0x0000c0ac
    2654:	200045a8 	.word	0x200045a8
    2658:	0000cb3c 	.word	0x0000cb3c
    265c:	0000cb74 	.word	0x0000cb74
    2660:	0000c478 	.word	0x0000c478

00002664 <panic>:

static void panic(struct log_backend const *const backend)
{
    2664:	b508      	push	{r3, lr}
	in_panic = true;
    2666:	4b03      	ldr	r3, [pc, #12]	; (2674 <panic+0x10>)
    2668:	2201      	movs	r2, #1
    266a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    266c:	4802      	ldr	r0, [pc, #8]	; (2678 <panic+0x14>)
    266e:	f008 fac1 	bl	abf4 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2672:	bd08      	pop	{r3, pc}
    2674:	200052e6 	.word	0x200052e6
    2678:	0000cbd0 	.word	0x0000cbd0

0000267c <process>:
{
    267c:	b510      	push	{r4, lr}
    267e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2680:	4b04      	ldr	r3, [pc, #16]	; (2694 <process+0x18>)
    2682:	6818      	ldr	r0, [r3, #0]
    2684:	f7ff fc18 	bl	1eb8 <log_format_func_t_get>
    2688:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    268a:	220f      	movs	r2, #15
    268c:	4621      	mov	r1, r4
    268e:	4802      	ldr	r0, [pc, #8]	; (2698 <process+0x1c>)
    2690:	4798      	blx	r3
}
    2692:	bd10      	pop	{r4, pc}
    2694:	20004598 	.word	0x20004598
    2698:	0000cbd0 	.word	0x0000cbd0

0000269c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    269c:	4b03      	ldr	r3, [pc, #12]	; (26ac <log_backend_rtt_init+0x10>)
    269e:	2201      	movs	r2, #1
    26a0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    26a2:	4b03      	ldr	r3, [pc, #12]	; (26b0 <log_backend_rtt_init+0x14>)
    26a4:	4a03      	ldr	r2, [pc, #12]	; (26b4 <log_backend_rtt_init+0x18>)
    26a6:	601a      	str	r2, [r3, #0]
}
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	200052e7 	.word	0x200052e7
    26b0:	200045d4 	.word	0x200045d4
    26b4:	200045bc 	.word	0x200045bc

000026b8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    26b8:	4b01      	ldr	r3, [pc, #4]	; (26c0 <format_set+0x8>)
    26ba:	6019      	str	r1, [r3, #0]
	return 0;
}
    26bc:	2000      	movs	r0, #0
    26be:	4770      	bx	lr
    26c0:	200045d8 	.word	0x200045d8

000026c4 <on_failed_write>:
{
    26c4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    26c6:	b918      	cbnz	r0, 26d0 <on_failed_write+0xc>
		host_present = false;
    26c8:	4b04      	ldr	r3, [pc, #16]	; (26dc <on_failed_write+0x18>)
    26ca:	2200      	movs	r2, #0
    26cc:	701a      	strb	r2, [r3, #0]
}
    26ce:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    26d0:	f241 3088 	movw	r0, #5000	; 0x1388
    26d4:	f009 fbff 	bl	bed6 <z_impl_k_busy_wait>
    26d8:	e7f9      	b.n	26ce <on_failed_write+0xa>
    26da:	bf00      	nop
    26dc:	200052e7 	.word	0x200052e7

000026e0 <on_write>:
{
    26e0:	b538      	push	{r3, r4, r5, lr}
    26e2:	4604      	mov	r4, r0
	host_present = true;
    26e4:	4b0a      	ldr	r3, [pc, #40]	; (2710 <on_write+0x30>)
    26e6:	2201      	movs	r2, #1
    26e8:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    26ea:	4b0a      	ldr	r3, [pc, #40]	; (2714 <on_write+0x34>)
    26ec:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    26ee:	b92b      	cbnz	r3, 26fc <on_write+0x1c>
}
    26f0:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    26f2:	1e65      	subs	r5, r4, #1
    26f4:	4620      	mov	r0, r4
    26f6:	f7ff ffe5 	bl	26c4 <on_failed_write>
    26fa:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    26fc:	2000      	movs	r0, #0
    26fe:	f004 fceb 	bl	70d8 <SEGGER_RTT_HasDataUp>
    2702:	2800      	cmp	r0, #0
    2704:	d0f4      	beq.n	26f0 <on_write+0x10>
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <on_write+0x30>)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	2b00      	cmp	r3, #0
    270c:	d1f1      	bne.n	26f2 <on_write+0x12>
    270e:	e7ef      	b.n	26f0 <on_write+0x10>
    2710:	200052e7 	.word	0x200052e7
    2714:	200052e8 	.word	0x200052e8

00002718 <data_out_block_mode>:
{
    2718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    271a:	4606      	mov	r6, r0
    271c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    271e:	2704      	movs	r7, #4
    2720:	e006      	b.n	2730 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    2722:	4638      	mov	r0, r7
    2724:	f7ff ffdc 	bl	26e0 <on_write>
	} while ((ret == 0) && host_present);
    2728:	b99c      	cbnz	r4, 2752 <data_out_block_mode+0x3a>
    272a:	4b0d      	ldr	r3, [pc, #52]	; (2760 <data_out_block_mode+0x48>)
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	b183      	cbz	r3, 2752 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2730:	462a      	mov	r2, r5
    2732:	4631      	mov	r1, r6
    2734:	2000      	movs	r0, #0
    2736:	f004 fc6b 	bl	7010 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    273a:	4604      	mov	r4, r0
    273c:	2800      	cmp	r0, #0
    273e:	d1f0      	bne.n	2722 <data_out_block_mode+0xa>
		} else if (host_present) {
    2740:	4b07      	ldr	r3, [pc, #28]	; (2760 <data_out_block_mode+0x48>)
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	2b00      	cmp	r3, #0
    2746:	d0ef      	beq.n	2728 <data_out_block_mode+0x10>
			retry_cnt--;
    2748:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    274a:	4638      	mov	r0, r7
    274c:	f7ff ffba 	bl	26c4 <on_failed_write>
    2750:	e7ea      	b.n	2728 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    2752:	b914      	cbnz	r4, 275a <data_out_block_mode+0x42>
    2754:	4b02      	ldr	r3, [pc, #8]	; (2760 <data_out_block_mode+0x48>)
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	b903      	cbnz	r3, 275c <data_out_block_mode+0x44>
    275a:	462c      	mov	r4, r5
}
    275c:	4620      	mov	r0, r4
    275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2760:	200052e7 	.word	0x200052e7

00002764 <panic>:
{
    2764:	b508      	push	{r3, lr}
	panic_mode = true;
    2766:	4b03      	ldr	r3, [pc, #12]	; (2774 <panic+0x10>)
    2768:	2201      	movs	r2, #1
    276a:	701a      	strb	r2, [r3, #0]
    276c:	4802      	ldr	r0, [pc, #8]	; (2778 <panic+0x14>)
    276e:	f008 fa41 	bl	abf4 <log_output_flush>
}
    2772:	bd08      	pop	{r3, pc}
    2774:	200052e8 	.word	0x200052e8
    2778:	0000cc10 	.word	0x0000cc10

0000277c <process>:
{
    277c:	b510      	push	{r4, lr}
    277e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2780:	4b04      	ldr	r3, [pc, #16]	; (2794 <process+0x18>)
    2782:	6818      	ldr	r0, [r3, #0]
    2784:	f7ff fb98 	bl	1eb8 <log_format_func_t_get>
    2788:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    278a:	220f      	movs	r2, #15
    278c:	4621      	mov	r1, r4
    278e:	4802      	ldr	r0, [pc, #8]	; (2798 <process+0x1c>)
    2790:	4798      	blx	r3
}
    2792:	bd10      	pop	{r4, pc}
    2794:	200045d8 	.word	0x200045d8
    2798:	0000cc10 	.word	0x0000cc10

0000279c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    279c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    279e:	4b40      	ldr	r3, [pc, #256]	; (28a0 <pm_system_resume+0x104>)
    27a0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    27a2:	f005 031f 	and.w	r3, r5, #31
    27a6:	2201      	movs	r2, #1
    27a8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27aa:	0969      	lsrs	r1, r5, #5
    27ac:	4b3d      	ldr	r3, [pc, #244]	; (28a4 <pm_system_resume+0x108>)
    27ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    27b2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27b4:	f3bf 8f5b 	dmb	ish
    27b8:	e853 1f00 	ldrex	r1, [r3]
    27bc:	ea01 0400 	and.w	r4, r1, r0
    27c0:	e843 4600 	strex	r6, r4, [r3]
    27c4:	2e00      	cmp	r6, #0
    27c6:	d1f7      	bne.n	27b8 <pm_system_resume+0x1c>
    27c8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    27cc:	420a      	tst	r2, r1
    27ce:	d100      	bne.n	27d2 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    27d0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    27d2:	4a35      	ldr	r2, [pc, #212]	; (28a8 <pm_system_resume+0x10c>)
    27d4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    27d8:	0098      	lsls	r0, r3, #2
    27da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    27de:	4933      	ldr	r1, [pc, #204]	; (28ac <pm_system_resume+0x110>)
    27e0:	b1a9      	cbz	r1, 280e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    27e2:	7859      	ldrb	r1, [r3, #1]
    27e4:	5c10      	ldrb	r0, [r2, r0]
    27e6:	f008 faf0 	bl	adca <pm_state_exit_post_ops>
    27ea:	f04f 0320 	mov.w	r3, #32
    27ee:	f3ef 8611 	mrs	r6, BASEPRI
    27f2:	f383 8812 	msr	BASEPRI_MAX, r3
    27f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27fa:	482d      	ldr	r0, [pc, #180]	; (28b0 <pm_system_resume+0x114>)
    27fc:	f004 ff60 	bl	76c0 <z_spin_lock_valid>
    2800:	b158      	cbz	r0, 281a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    2802:	482b      	ldr	r0, [pc, #172]	; (28b0 <pm_system_resume+0x114>)
    2804:	f004 ff7c 	bl	7700 <z_spin_lock_set_owner>
	return list->head;
    2808:	4b2a      	ldr	r3, [pc, #168]	; (28b4 <pm_system_resume+0x118>)
    280a:	681c      	ldr	r4, [r3, #0]
    280c:	e020      	b.n	2850 <pm_system_resume+0xb4>
	__asm__ volatile(
    280e:	2300      	movs	r3, #0
    2810:	f383 8811 	msr	BASEPRI, r3
    2814:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2818:	e7e7      	b.n	27ea <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    281a:	4c27      	ldr	r4, [pc, #156]	; (28b8 <pm_system_resume+0x11c>)
    281c:	238e      	movs	r3, #142	; 0x8e
    281e:	4622      	mov	r2, r4
    2820:	4926      	ldr	r1, [pc, #152]	; (28bc <pm_system_resume+0x120>)
    2822:	4827      	ldr	r0, [pc, #156]	; (28c0 <pm_system_resume+0x124>)
    2824:	f008 f95c 	bl	aae0 <assert_print>
    2828:	4921      	ldr	r1, [pc, #132]	; (28b0 <pm_system_resume+0x114>)
    282a:	4826      	ldr	r0, [pc, #152]	; (28c4 <pm_system_resume+0x128>)
    282c:	f008 f958 	bl	aae0 <assert_print>
    2830:	218e      	movs	r1, #142	; 0x8e
    2832:	4620      	mov	r0, r4
    2834:	f008 f94d 	bl	aad2 <assert_post_action>
    2838:	e7e3      	b.n	2802 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    283a:	4b19      	ldr	r3, [pc, #100]	; (28a0 <pm_system_resume+0x104>)
    283c:	7d1b      	ldrb	r3, [r3, #20]
    283e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2842:	4919      	ldr	r1, [pc, #100]	; (28a8 <pm_system_resume+0x10c>)
    2844:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2848:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    284a:	b10c      	cbz	r4, 2850 <pm_system_resume+0xb4>
	return node->next;
    284c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    284e:	b124      	cbz	r4, 285a <pm_system_resume+0xbe>
    2850:	b11c      	cbz	r4, 285a <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    2852:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    2854:	2a00      	cmp	r2, #0
    2856:	d1f0      	bne.n	283a <pm_system_resume+0x9e>
    2858:	e7f7      	b.n	284a <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    285a:	4815      	ldr	r0, [pc, #84]	; (28b0 <pm_system_resume+0x114>)
    285c:	f004 ff40 	bl	76e0 <z_spin_unlock_valid>
    2860:	b170      	cbz	r0, 2880 <pm_system_resume+0xe4>
	__asm__ volatile(
    2862:	f386 8811 	msr	BASEPRI, r6
    2866:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    286a:	4a0f      	ldr	r2, [pc, #60]	; (28a8 <pm_system_resume+0x10c>)
    286c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2870:	00a9      	lsls	r1, r5, #2
    2872:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2876:	2300      	movs	r3, #0
    2878:	5053      	str	r3, [r2, r1]
    287a:	606b      	str	r3, [r5, #4]
    287c:	60ab      	str	r3, [r5, #8]
}
    287e:	e7a7      	b.n	27d0 <pm_system_resume+0x34>
    2880:	4c0d      	ldr	r4, [pc, #52]	; (28b8 <pm_system_resume+0x11c>)
    2882:	23b9      	movs	r3, #185	; 0xb9
    2884:	4622      	mov	r2, r4
    2886:	4910      	ldr	r1, [pc, #64]	; (28c8 <pm_system_resume+0x12c>)
    2888:	480d      	ldr	r0, [pc, #52]	; (28c0 <pm_system_resume+0x124>)
    288a:	f008 f929 	bl	aae0 <assert_print>
    288e:	4908      	ldr	r1, [pc, #32]	; (28b0 <pm_system_resume+0x114>)
    2890:	480e      	ldr	r0, [pc, #56]	; (28cc <pm_system_resume+0x130>)
    2892:	f008 f925 	bl	aae0 <assert_print>
    2896:	21b9      	movs	r1, #185	; 0xb9
    2898:	4620      	mov	r0, r4
    289a:	f008 f91a 	bl	aad2 <assert_post_action>
    289e:	e7e0      	b.n	2862 <pm_system_resume+0xc6>
    28a0:	200050ac 	.word	0x200050ac
    28a4:	20004604 	.word	0x20004604
    28a8:	200045f4 	.word	0x200045f4
    28ac:	0000adcb 	.word	0x0000adcb
    28b0:	200045e8 	.word	0x200045e8
    28b4:	200045ec 	.word	0x200045ec
    28b8:	0000c624 	.word	0x0000c624
    28bc:	0000c684 	.word	0x0000c684
    28c0:	0000c478 	.word	0x0000c478
    28c4:	0000c69c 	.word	0x0000c69c
    28c8:	0000c654 	.word	0x0000c654
    28cc:	0000c66c 	.word	0x0000c66c

000028d0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    28d4:	4b6d      	ldr	r3, [pc, #436]	; (2a8c <pm_system_suspend+0x1bc>)
    28d6:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    28d8:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28da:	f3bf 8f5b 	dmb	ish
    28de:	4b6c      	ldr	r3, [pc, #432]	; (2a90 <pm_system_suspend+0x1c0>)
    28e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    28e4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    28e8:	f005 021f 	and.w	r2, r5, #31
    28ec:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    28ee:	f013 0f01 	tst.w	r3, #1
    28f2:	d01d      	beq.n	2930 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    28f4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    28f8:	4a66      	ldr	r2, [pc, #408]	; (2a94 <pm_system_suspend+0x1c4>)
    28fa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    28fe:	b333      	cbz	r3, 294e <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2900:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2904:	d139      	bne.n	297a <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2906:	f005 fd45 	bl	8394 <k_sched_lock>
	__asm__ volatile(
    290a:	f04f 0320 	mov.w	r3, #32
    290e:	f3ef 8611 	mrs	r6, BASEPRI
    2912:	f383 8812 	msr	BASEPRI_MAX, r3
    2916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    291a:	485f      	ldr	r0, [pc, #380]	; (2a98 <pm_system_suspend+0x1c8>)
    291c:	f004 fed0 	bl	76c0 <z_spin_lock_valid>
    2920:	2800      	cmp	r0, #0
    2922:	d040      	beq.n	29a6 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    2924:	485c      	ldr	r0, [pc, #368]	; (2a98 <pm_system_suspend+0x1c8>)
    2926:	f004 feeb 	bl	7700 <z_spin_lock_set_owner>
	return list->head;
    292a:	4b5c      	ldr	r3, [pc, #368]	; (2a9c <pm_system_suspend+0x1cc>)
    292c:	681c      	ldr	r4, [r3, #0]
    292e:	e055      	b.n	29dc <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    2930:	4601      	mov	r1, r0
    2932:	4628      	mov	r0, r5
    2934:	f000 f8d6 	bl	2ae4 <pm_policy_next_state>
		if (info != NULL) {
    2938:	2800      	cmp	r0, #0
    293a:	d0db      	beq.n	28f4 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    293c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2940:	4a54      	ldr	r2, [pc, #336]	; (2a94 <pm_system_suspend+0x1c4>)
    2942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2946:	c807      	ldmia	r0, {r0, r1, r2}
    2948:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    294c:	e7d2      	b.n	28f4 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    294e:	f005 021f 	and.w	r2, r5, #31
    2952:	2301      	movs	r3, #1
    2954:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2956:	096d      	lsrs	r5, r5, #5
    2958:	4a4d      	ldr	r2, [pc, #308]	; (2a90 <pm_system_suspend+0x1c0>)
    295a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    295e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2960:	f3bf 8f5b 	dmb	ish
    2964:	e855 2f00 	ldrex	r2, [r5]
    2968:	401a      	ands	r2, r3
    296a:	e845 2100 	strex	r1, r2, [r5]
    296e:	2900      	cmp	r1, #0
    2970:	d1f8      	bne.n	2964 <pm_system_suspend+0x94>
    2972:	f3bf 8f5b 	dmb	ish
		ret = false;
    2976:	2000      	movs	r0, #0
		goto end;
    2978:	e077      	b.n	2a6a <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    297a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    297e:	4a45      	ldr	r2, [pc, #276]	; (2a94 <pm_system_suspend+0x1c4>)
    2980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2984:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2986:	0c41      	lsrs	r1, r0, #17
    2988:	03c0      	lsls	r0, r0, #15
    298a:	4b45      	ldr	r3, [pc, #276]	; (2aa0 <pm_system_suspend+0x1d0>)
    298c:	18c0      	adds	r0, r0, r3
    298e:	4a45      	ldr	r2, [pc, #276]	; (2aa4 <pm_system_suspend+0x1d4>)
    2990:	f04f 0300 	mov.w	r3, #0
    2994:	f141 0100 	adc.w	r1, r1, #0
    2998:	f7fd fbb2 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    299c:	2101      	movs	r1, #1
    299e:	1a20      	subs	r0, r4, r0
    29a0:	f007 f934 	bl	9c0c <z_set_timeout_expiry>
    29a4:	e7af      	b.n	2906 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    29a6:	4c40      	ldr	r4, [pc, #256]	; (2aa8 <pm_system_suspend+0x1d8>)
    29a8:	238e      	movs	r3, #142	; 0x8e
    29aa:	4622      	mov	r2, r4
    29ac:	493f      	ldr	r1, [pc, #252]	; (2aac <pm_system_suspend+0x1dc>)
    29ae:	4840      	ldr	r0, [pc, #256]	; (2ab0 <pm_system_suspend+0x1e0>)
    29b0:	f008 f896 	bl	aae0 <assert_print>
    29b4:	4938      	ldr	r1, [pc, #224]	; (2a98 <pm_system_suspend+0x1c8>)
    29b6:	483f      	ldr	r0, [pc, #252]	; (2ab4 <pm_system_suspend+0x1e4>)
    29b8:	f008 f892 	bl	aae0 <assert_print>
    29bc:	218e      	movs	r1, #142	; 0x8e
    29be:	4620      	mov	r0, r4
    29c0:	f008 f887 	bl	aad2 <assert_post_action>
    29c4:	e7ae      	b.n	2924 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    29c6:	4b31      	ldr	r3, [pc, #196]	; (2a8c <pm_system_suspend+0x1bc>)
    29c8:	7d1b      	ldrb	r3, [r3, #20]
    29ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    29ce:	4931      	ldr	r1, [pc, #196]	; (2a94 <pm_system_suspend+0x1c4>)
    29d0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    29d4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    29d6:	b10c      	cbz	r4, 29dc <pm_system_suspend+0x10c>
	return node->next;
    29d8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    29da:	b124      	cbz	r4, 29e6 <pm_system_suspend+0x116>
    29dc:	b11c      	cbz	r4, 29e6 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    29de:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    29e0:	2a00      	cmp	r2, #0
    29e2:	d1f0      	bne.n	29c6 <pm_system_suspend+0xf6>
    29e4:	e7f7      	b.n	29d6 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    29e6:	482c      	ldr	r0, [pc, #176]	; (2a98 <pm_system_suspend+0x1c8>)
    29e8:	f004 fe7a 	bl	76e0 <z_spin_unlock_valid>
    29ec:	2800      	cmp	r0, #0
    29ee:	d03d      	beq.n	2a6c <pm_system_suspend+0x19c>
	__asm__ volatile(
    29f0:	f386 8811 	msr	BASEPRI, r6
    29f4:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    29f8:	f005 031f 	and.w	r3, r5, #31
    29fc:	2101      	movs	r1, #1
    29fe:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a00:	096b      	lsrs	r3, r5, #5
    2a02:	4a2d      	ldr	r2, [pc, #180]	; (2ab8 <pm_system_suspend+0x1e8>)
    2a04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a08:	f3bf 8f5b 	dmb	ish
    2a0c:	e853 2f00 	ldrex	r2, [r3]
    2a10:	430a      	orrs	r2, r1
    2a12:	e843 2000 	strex	r0, r2, [r3]
    2a16:	2800      	cmp	r0, #0
    2a18:	d1f8      	bne.n	2a0c <pm_system_suspend+0x13c>
    2a1a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2a1e:	4b27      	ldr	r3, [pc, #156]	; (2abc <pm_system_suspend+0x1ec>)
    2a20:	b14b      	cbz	r3, 2a36 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    2a22:	4b1c      	ldr	r3, [pc, #112]	; (2a94 <pm_system_suspend+0x1c4>)
    2a24:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    2a28:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2a2c:	7849      	ldrb	r1, [r1, #1]
    2a2e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2a32:	f008 f9be 	bl	adb2 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2a36:	f7ff feb1 	bl	279c <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    2a3a:	f005 031f 	and.w	r3, r5, #31
    2a3e:	2401      	movs	r4, #1
    2a40:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a44:	096d      	lsrs	r5, r5, #5
    2a46:	4a12      	ldr	r2, [pc, #72]	; (2a90 <pm_system_suspend+0x1c0>)
    2a48:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2a4c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2a4e:	f3bf 8f5b 	dmb	ish
    2a52:	e855 2f00 	ldrex	r2, [r5]
    2a56:	401a      	ands	r2, r3
    2a58:	e845 2100 	strex	r1, r2, [r5]
    2a5c:	2900      	cmp	r1, #0
    2a5e:	d1f8      	bne.n	2a52 <pm_system_suspend+0x182>
    2a60:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    2a64:	f006 fa22 	bl	8eac <k_sched_unlock>
	bool ret = true;
    2a68:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2a6a:	bd70      	pop	{r4, r5, r6, pc}
    2a6c:	4c0e      	ldr	r4, [pc, #56]	; (2aa8 <pm_system_suspend+0x1d8>)
    2a6e:	23b9      	movs	r3, #185	; 0xb9
    2a70:	4622      	mov	r2, r4
    2a72:	4913      	ldr	r1, [pc, #76]	; (2ac0 <pm_system_suspend+0x1f0>)
    2a74:	480e      	ldr	r0, [pc, #56]	; (2ab0 <pm_system_suspend+0x1e0>)
    2a76:	f008 f833 	bl	aae0 <assert_print>
    2a7a:	4907      	ldr	r1, [pc, #28]	; (2a98 <pm_system_suspend+0x1c8>)
    2a7c:	4811      	ldr	r0, [pc, #68]	; (2ac4 <pm_system_suspend+0x1f4>)
    2a7e:	f008 f82f 	bl	aae0 <assert_print>
    2a82:	21b9      	movs	r1, #185	; 0xb9
    2a84:	4620      	mov	r0, r4
    2a86:	f008 f824 	bl	aad2 <assert_post_action>
    2a8a:	e7b1      	b.n	29f0 <pm_system_suspend+0x120>
    2a8c:	200050ac 	.word	0x200050ac
    2a90:	20004600 	.word	0x20004600
    2a94:	200045f4 	.word	0x200045f4
    2a98:	200045e8 	.word	0x200045e8
    2a9c:	200045ec 	.word	0x200045ec
    2aa0:	000f423f 	.word	0x000f423f
    2aa4:	000f4240 	.word	0x000f4240
    2aa8:	0000c624 	.word	0x0000c624
    2aac:	0000c684 	.word	0x0000c684
    2ab0:	0000c478 	.word	0x0000c478
    2ab4:	0000c69c 	.word	0x0000c69c
    2ab8:	20004604 	.word	0x20004604
    2abc:	0000adb3 	.word	0x0000adb3
    2ac0:	0000c654 	.word	0x0000c654
    2ac4:	0000c66c 	.word	0x0000c66c

00002ac8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2ac8:	f3bf 8f5b 	dmb	ish
    2acc:	4b04      	ldr	r3, [pc, #16]	; (2ae0 <pm_policy_state_lock_is_active+0x18>)
    2ace:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2ad2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2ad6:	3800      	subs	r0, #0
    2ad8:	bf18      	it	ne
    2ada:	2001      	movne	r0, #1
    2adc:	4770      	bx	lr
    2ade:	bf00      	nop
    2ae0:	20004608 	.word	0x20004608

00002ae4 <pm_policy_next_state>:
{
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae8:	b082      	sub	sp, #8
    2aea:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2aec:	a901      	add	r1, sp, #4
    2aee:	f000 f843 	bl	2b78 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2af2:	1e44      	subs	r4, r0, #1
    2af4:	b224      	sxth	r4, r4
    2af6:	e007      	b.n	2b08 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2af8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2afc:	d032      	beq.n	2b64 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2afe:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2b00:	42b0      	cmp	r0, r6
    2b02:	d92f      	bls.n	2b64 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2b04:	3c01      	subs	r4, #1
    2b06:	b224      	sxth	r4, r4
    2b08:	2c00      	cmp	r4, #0
    2b0a:	db2a      	blt.n	2b62 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2b0c:	9b01      	ldr	r3, [sp, #4]
    2b0e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2b12:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2b16:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2b1a:	f7ff ffd5 	bl	2ac8 <pm_policy_state_lock_is_active>
    2b1e:	2800      	cmp	r0, #0
    2b20:	d1f0      	bne.n	2b04 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    2b22:	6868      	ldr	r0, [r5, #4]
    2b24:	0c41      	lsrs	r1, r0, #17
    2b26:	03c0      	lsls	r0, r0, #15
    2b28:	4f10      	ldr	r7, [pc, #64]	; (2b6c <pm_policy_next_state+0x88>)
    2b2a:	19c0      	adds	r0, r0, r7
    2b2c:	4a10      	ldr	r2, [pc, #64]	; (2b70 <pm_policy_next_state+0x8c>)
    2b2e:	f04f 0300 	mov.w	r3, #0
    2b32:	f141 0100 	adc.w	r1, r1, #0
    2b36:	f7fd fae3 	bl	100 <__aeabi_uldivmod>
    2b3a:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    2b3c:	68ab      	ldr	r3, [r5, #8]
    2b3e:	0c59      	lsrs	r1, r3, #17
    2b40:	03db      	lsls	r3, r3, #15
    2b42:	19d8      	adds	r0, r3, r7
    2b44:	4a0a      	ldr	r2, [pc, #40]	; (2b70 <pm_policy_next_state+0x8c>)
    2b46:	f04f 0300 	mov.w	r3, #0
    2b4a:	f141 0100 	adc.w	r1, r1, #0
    2b4e:	f7fd fad7 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2b52:	4b08      	ldr	r3, [pc, #32]	; (2b74 <pm_policy_next_state+0x90>)
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2b5a:	d0cd      	beq.n	2af8 <pm_policy_next_state+0x14>
    2b5c:	4283      	cmp	r3, r0
    2b5e:	d8cb      	bhi.n	2af8 <pm_policy_next_state+0x14>
    2b60:	e7d0      	b.n	2b04 <pm_policy_next_state+0x20>
	return NULL;
    2b62:	2500      	movs	r5, #0
}
    2b64:	4628      	mov	r0, r5
    2b66:	b002      	add	sp, #8
    2b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b6c:	000f423f 	.word	0x000f423f
    2b70:	000f4240 	.word	0x000f4240
    2b74:	20004008 	.word	0x20004008

00002b78 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2b78:	b908      	cbnz	r0, 2b7e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2b7a:	4b02      	ldr	r3, [pc, #8]	; (2b84 <pm_state_cpu_get_all+0xc>)
    2b7c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2b7e:	2000      	movs	r0, #0
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	0000cc24 	.word	0x0000cc24

00002b88 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2b88:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2b8a:	4802      	ldr	r0, [pc, #8]	; (2b94 <nrf_cc3xx_platform_abort_init+0xc>)
    2b8c:	f007 fbf4 	bl	a378 <nrf_cc3xx_platform_set_abort>
}
    2b90:	bd08      	pop	{r3, pc}
    2b92:	bf00      	nop
    2b94:	0000cc24 	.word	0x0000cc24

00002b98 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2b98:	b1d0      	cbz	r0, 2bd0 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b9a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2b9c:	6842      	ldr	r2, [r0, #4]
    2b9e:	2a04      	cmp	r2, #4
    2ba0:	d005      	beq.n	2bae <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ba2:	b1d2      	cbz	r2, 2bda <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2ba4:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2ba6:	f005 f8eb 	bl	7d80 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2baa:	2000      	movs	r0, #0
    }
}
    2bac:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2bae:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2bb0:	2200      	movs	r2, #0
    2bb2:	f3bf 8f5b 	dmb	ish
    2bb6:	e853 1f00 	ldrex	r1, [r3]
    2bba:	2901      	cmp	r1, #1
    2bbc:	d103      	bne.n	2bc6 <mutex_unlock_platform+0x2e>
    2bbe:	e843 2000 	strex	r0, r2, [r3]
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d1f7      	bne.n	2bb6 <mutex_unlock_platform+0x1e>
    2bc6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2bca:	d104      	bne.n	2bd6 <mutex_unlock_platform+0x3e>
    2bcc:	4610      	mov	r0, r2
    2bce:	e7ed      	b.n	2bac <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2bd0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2bd4:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2bd6:	4802      	ldr	r0, [pc, #8]	; (2be0 <mutex_unlock_platform+0x48>)
    2bd8:	e7e8      	b.n	2bac <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2bda:	4802      	ldr	r0, [pc, #8]	; (2be4 <mutex_unlock_platform+0x4c>)
    2bdc:	e7e6      	b.n	2bac <mutex_unlock_platform+0x14>
    2bde:	bf00      	nop
    2be0:	ffff8fe9 	.word	0xffff8fe9
    2be4:	ffff8fea 	.word	0xffff8fea

00002be8 <mutex_lock_platform>:
    if(mutex == NULL) {
    2be8:	b320      	cbz	r0, 2c34 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2bea:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2bec:	6842      	ldr	r2, [r0, #4]
    2bee:	2a04      	cmp	r2, #4
    2bf0:	d002      	beq.n	2bf8 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2bf2:	b992      	cbnz	r2, 2c1a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2bf4:	4811      	ldr	r0, [pc, #68]	; (2c3c <mutex_lock_platform+0x54>)
    2bf6:	e00f      	b.n	2c18 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2bf8:	6803      	ldr	r3, [r0, #0]
    2bfa:	2201      	movs	r2, #1
    2bfc:	f3bf 8f5b 	dmb	ish
    2c00:	e853 1f00 	ldrex	r1, [r3]
    2c04:	2900      	cmp	r1, #0
    2c06:	d103      	bne.n	2c10 <mutex_lock_platform+0x28>
    2c08:	e843 2000 	strex	r0, r2, [r3]
    2c0c:	2800      	cmp	r0, #0
    2c0e:	d1f7      	bne.n	2c00 <mutex_lock_platform+0x18>
    2c10:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c14:	d10c      	bne.n	2c30 <mutex_lock_platform+0x48>
    2c16:	2000      	movs	r0, #0
}
    2c18:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2c1a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c24:	f004 ff8c 	bl	7b40 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2c28:	2800      	cmp	r0, #0
    2c2a:	d0f5      	beq.n	2c18 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2c2c:	4804      	ldr	r0, [pc, #16]	; (2c40 <mutex_lock_platform+0x58>)
    2c2e:	e7f3      	b.n	2c18 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2c30:	4803      	ldr	r0, [pc, #12]	; (2c40 <mutex_lock_platform+0x58>)
    2c32:	e7f1      	b.n	2c18 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2c34:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2c38:	4770      	bx	lr
    2c3a:	bf00      	nop
    2c3c:	ffff8fea 	.word	0xffff8fea
    2c40:	ffff8fe9 	.word	0xffff8fe9

00002c44 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c44:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c46:	4604      	mov	r4, r0
    2c48:	b190      	cbz	r0, 2c70 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c4a:	6863      	ldr	r3, [r4, #4]
    2c4c:	2b04      	cmp	r3, #4
    2c4e:	d00e      	beq.n	2c6e <mutex_free_platform+0x2a>
    2c50:	2b08      	cmp	r3, #8
    2c52:	d00c      	beq.n	2c6e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2c54:	b15b      	cbz	r3, 2c6e <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2c56:	f013 0f02 	tst.w	r3, #2
    2c5a:	d10e      	bne.n	2c7a <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2c5c:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2c5e:	2200      	movs	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
    2c62:	605a      	str	r2, [r3, #4]
    2c64:	609a      	str	r2, [r3, #8]
    2c66:	60da      	str	r2, [r3, #12]
    2c68:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2c6a:	2300      	movs	r3, #0
    2c6c:	6063      	str	r3, [r4, #4]
}
    2c6e:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2c70:	4b05      	ldr	r3, [pc, #20]	; (2c88 <mutex_free_platform+0x44>)
    2c72:	685b      	ldr	r3, [r3, #4]
    2c74:	4805      	ldr	r0, [pc, #20]	; (2c8c <mutex_free_platform+0x48>)
    2c76:	4798      	blx	r3
    2c78:	e7e7      	b.n	2c4a <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2c7a:	4621      	mov	r1, r4
    2c7c:	4804      	ldr	r0, [pc, #16]	; (2c90 <mutex_free_platform+0x4c>)
    2c7e:	f004 fca9 	bl	75d4 <k_mem_slab_free>
        mutex->mutex = NULL;
    2c82:	2300      	movs	r3, #0
    2c84:	6023      	str	r3, [r4, #0]
    2c86:	e7f0      	b.n	2c6a <mutex_free_platform+0x26>
    2c88:	20004150 	.word	0x20004150
    2c8c:	0000cc2c 	.word	0x0000cc2c
    2c90:	20004624 	.word	0x20004624

00002c94 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c94:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c96:	4604      	mov	r4, r0
    2c98:	b178      	cbz	r0, 2cba <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c9a:	6863      	ldr	r3, [r4, #4]
    2c9c:	2b04      	cmp	r3, #4
    2c9e:	d00b      	beq.n	2cb8 <mutex_init_platform+0x24>
    2ca0:	2b08      	cmp	r3, #8
    2ca2:	d009      	beq.n	2cb8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2ca4:	b90b      	cbnz	r3, 2caa <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2ca6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2ca8:	b163      	cbz	r3, 2cc4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2caa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2cac:	f009 f8c5 	bl	be3a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2cb0:	6863      	ldr	r3, [r4, #4]
    2cb2:	f043 0301 	orr.w	r3, r3, #1
    2cb6:	6063      	str	r3, [r4, #4]
}
    2cb8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2cba:	4b10      	ldr	r3, [pc, #64]	; (2cfc <mutex_init_platform+0x68>)
    2cbc:	685b      	ldr	r3, [r3, #4]
    2cbe:	4810      	ldr	r0, [pc, #64]	; (2d00 <mutex_init_platform+0x6c>)
    2cc0:	4798      	blx	r3
    2cc2:	e7ea      	b.n	2c9a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ccc:	4621      	mov	r1, r4
    2cce:	480d      	ldr	r0, [pc, #52]	; (2d04 <mutex_init_platform+0x70>)
    2cd0:	f004 fc0a 	bl	74e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2cd4:	b908      	cbnz	r0, 2cda <mutex_init_platform+0x46>
    2cd6:	6823      	ldr	r3, [r4, #0]
    2cd8:	b91b      	cbnz	r3, 2ce2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2cda:	4b08      	ldr	r3, [pc, #32]	; (2cfc <mutex_init_platform+0x68>)
    2cdc:	685b      	ldr	r3, [r3, #4]
    2cde:	480a      	ldr	r0, [pc, #40]	; (2d08 <mutex_init_platform+0x74>)
    2ce0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2ce2:	6823      	ldr	r3, [r4, #0]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
    2ce8:	605a      	str	r2, [r3, #4]
    2cea:	609a      	str	r2, [r3, #8]
    2cec:	60da      	str	r2, [r3, #12]
    2cee:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2cf0:	6863      	ldr	r3, [r4, #4]
    2cf2:	f043 0302 	orr.w	r3, r3, #2
    2cf6:	6063      	str	r3, [r4, #4]
    2cf8:	e7d7      	b.n	2caa <mutex_init_platform+0x16>
    2cfa:	bf00      	nop
    2cfc:	20004150 	.word	0x20004150
    2d00:	0000cc2c 	.word	0x0000cc2c
    2d04:	20004624 	.word	0x20004624
    2d08:	0000cc54 	.word	0x0000cc54

00002d0c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2d0c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2d0e:	2340      	movs	r3, #64	; 0x40
    2d10:	2214      	movs	r2, #20
    2d12:	4904      	ldr	r1, [pc, #16]	; (2d24 <nrf_cc3xx_platform_mutex_init+0x18>)
    2d14:	4804      	ldr	r0, [pc, #16]	; (2d28 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2d16:	f009 f83c 	bl	bd92 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2d1a:	4904      	ldr	r1, [pc, #16]	; (2d2c <nrf_cc3xx_platform_mutex_init+0x20>)
    2d1c:	4804      	ldr	r0, [pc, #16]	; (2d30 <nrf_cc3xx_platform_mutex_init+0x24>)
    2d1e:	f007 fb8b 	bl	a438 <nrf_cc3xx_platform_set_mutexes>
}
    2d22:	bd08      	pop	{r3, pc}
    2d24:	20004644 	.word	0x20004644
    2d28:	20004624 	.word	0x20004624
    2d2c:	0000cc94 	.word	0x0000cc94
    2d30:	0000cc84 	.word	0x0000cc84

00002d34 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2d34:	4901      	ldr	r1, [pc, #4]	; (2d3c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2d36:	2210      	movs	r2, #16
	str	r2, [r1]
    2d38:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2d3a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2d3c:	e000ed10 	.word	0xe000ed10

00002d40 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2d40:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2d42:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2d44:	f380 8811 	msr	BASEPRI, r0
	isb
    2d48:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2d4c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2d50:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2d52:	b662      	cpsie	i
	isb
    2d54:	f3bf 8f6f 	isb	sy

	bx	lr
    2d58:	4770      	bx	lr
    2d5a:	bf00      	nop

00002d5c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2d5c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2d5e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2d60:	f381 8811 	msr	BASEPRI, r1

	wfe
    2d64:	bf20      	wfe

	msr	BASEPRI, r0
    2d66:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2d6a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2d6c:	4770      	bx	lr
    2d6e:	bf00      	nop

00002d70 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2d70:	b570      	push	{r4, r5, r6, lr}
    2d72:	b086      	sub	sp, #24
    2d74:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2d76:	4e1e      	ldr	r6, [pc, #120]	; (2df0 <esf_dump+0x80>)
    2d78:	6883      	ldr	r3, [r0, #8]
    2d7a:	9305      	str	r3, [sp, #20]
    2d7c:	6843      	ldr	r3, [r0, #4]
    2d7e:	9304      	str	r3, [sp, #16]
    2d80:	6803      	ldr	r3, [r0, #0]
    2d82:	9303      	str	r3, [sp, #12]
    2d84:	4b1b      	ldr	r3, [pc, #108]	; (2df4 <esf_dump+0x84>)
    2d86:	9302      	str	r3, [sp, #8]
    2d88:	2400      	movs	r4, #0
    2d8a:	9401      	str	r4, [sp, #4]
    2d8c:	9400      	str	r4, [sp, #0]
    2d8e:	4623      	mov	r3, r4
    2d90:	2201      	movs	r2, #1
    2d92:	4631      	mov	r1, r6
    2d94:	4620      	mov	r0, r4
    2d96:	f007 ff57 	bl	ac48 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2d9a:	696b      	ldr	r3, [r5, #20]
    2d9c:	9305      	str	r3, [sp, #20]
    2d9e:	692b      	ldr	r3, [r5, #16]
    2da0:	9304      	str	r3, [sp, #16]
    2da2:	68eb      	ldr	r3, [r5, #12]
    2da4:	9303      	str	r3, [sp, #12]
    2da6:	4b14      	ldr	r3, [pc, #80]	; (2df8 <esf_dump+0x88>)
    2da8:	9302      	str	r3, [sp, #8]
    2daa:	9401      	str	r4, [sp, #4]
    2dac:	9400      	str	r4, [sp, #0]
    2dae:	4623      	mov	r3, r4
    2db0:	2201      	movs	r2, #1
    2db2:	4631      	mov	r1, r6
    2db4:	4620      	mov	r0, r4
    2db6:	f007 ff47 	bl	ac48 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2dba:	69eb      	ldr	r3, [r5, #28]
    2dbc:	9303      	str	r3, [sp, #12]
    2dbe:	4b0f      	ldr	r3, [pc, #60]	; (2dfc <esf_dump+0x8c>)
    2dc0:	9302      	str	r3, [sp, #8]
    2dc2:	9401      	str	r4, [sp, #4]
    2dc4:	9400      	str	r4, [sp, #0]
    2dc6:	4623      	mov	r3, r4
    2dc8:	2201      	movs	r2, #1
    2dca:	4631      	mov	r1, r6
    2dcc:	4620      	mov	r0, r4
    2dce:	f007 ff3b 	bl	ac48 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2dd2:	69ab      	ldr	r3, [r5, #24]
    2dd4:	9303      	str	r3, [sp, #12]
    2dd6:	4b0a      	ldr	r3, [pc, #40]	; (2e00 <esf_dump+0x90>)
    2dd8:	9302      	str	r3, [sp, #8]
    2dda:	9401      	str	r4, [sp, #4]
    2ddc:	9400      	str	r4, [sp, #0]
    2dde:	4623      	mov	r3, r4
    2de0:	2201      	movs	r2, #1
    2de2:	4631      	mov	r1, r6
    2de4:	4620      	mov	r0, r4
    2de6:	f007 ff2f 	bl	ac48 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    2dea:	b006      	add	sp, #24
    2dec:	bd70      	pop	{r4, r5, r6, pc}
    2dee:	bf00      	nop
    2df0:	0000c26c 	.word	0x0000c26c
    2df4:	0000cca8 	.word	0x0000cca8
    2df8:	0000ccd8 	.word	0x0000ccd8
    2dfc:	0000cd08 	.word	0x0000cd08
    2e00:	0000cd18 	.word	0x0000cd18

00002e04 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2e04:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2e06:	2800      	cmp	r0, #0
    2e08:	db07      	blt.n	2e1a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e0a:	f000 021f 	and.w	r2, r0, #31
    2e0e:	0940      	lsrs	r0, r0, #5
    2e10:	2301      	movs	r3, #1
    2e12:	4093      	lsls	r3, r2
    2e14:	4a01      	ldr	r2, [pc, #4]	; (2e1c <arch_irq_enable+0x18>)
    2e16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    2e1a:	4770      	bx	lr
    2e1c:	e000e100 	.word	0xe000e100

00002e20 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2e20:	0942      	lsrs	r2, r0, #5
    2e22:	4b05      	ldr	r3, [pc, #20]	; (2e38 <arch_irq_is_enabled+0x18>)
    2e24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2e28:	f000 001f 	and.w	r0, r0, #31
    2e2c:	2301      	movs	r3, #1
    2e2e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2e32:	4010      	ands	r0, r2
    2e34:	4770      	bx	lr
    2e36:	bf00      	nop
    2e38:	e000e100 	.word	0xe000e100

00002e3c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3e:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2e40:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2e42:	2d07      	cmp	r5, #7
    2e44:	d80b      	bhi.n	2e5e <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2e46:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2e48:	2800      	cmp	r0, #0
    2e4a:	db1b      	blt.n	2e84 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e4c:	016d      	lsls	r5, r5, #5
    2e4e:	b2ed      	uxtb	r5, r5
    2e50:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2e54:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2e58:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    2e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e5e:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2e60:	4f0c      	ldr	r7, [pc, #48]	; (2e94 <z_arm_irq_priority_set+0x58>)
    2e62:	2357      	movs	r3, #87	; 0x57
    2e64:	463a      	mov	r2, r7
    2e66:	490c      	ldr	r1, [pc, #48]	; (2e98 <z_arm_irq_priority_set+0x5c>)
    2e68:	480c      	ldr	r0, [pc, #48]	; (2e9c <z_arm_irq_priority_set+0x60>)
    2e6a:	f007 fe39 	bl	aae0 <assert_print>
    2e6e:	2307      	movs	r3, #7
    2e70:	4622      	mov	r2, r4
    2e72:	4631      	mov	r1, r6
    2e74:	480a      	ldr	r0, [pc, #40]	; (2ea0 <z_arm_irq_priority_set+0x64>)
    2e76:	f007 fe33 	bl	aae0 <assert_print>
    2e7a:	2157      	movs	r1, #87	; 0x57
    2e7c:	4638      	mov	r0, r7
    2e7e:	f007 fe28 	bl	aad2 <assert_post_action>
    2e82:	e7e0      	b.n	2e46 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e84:	f000 000f 	and.w	r0, r0, #15
    2e88:	016d      	lsls	r5, r5, #5
    2e8a:	b2ed      	uxtb	r5, r5
    2e8c:	4b05      	ldr	r3, [pc, #20]	; (2ea4 <z_arm_irq_priority_set+0x68>)
    2e8e:	541d      	strb	r5, [r3, r0]
}
    2e90:	e7e4      	b.n	2e5c <z_arm_irq_priority_set+0x20>
    2e92:	bf00      	nop
    2e94:	0000cd48 	.word	0x0000cd48
    2e98:	0000cd80 	.word	0x0000cd80
    2e9c:	0000c478 	.word	0x0000c478
    2ea0:	0000cd9c 	.word	0x0000cd9c
    2ea4:	e000ed14 	.word	0xe000ed14

00002ea8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2ea8:	bf30      	wfi
    b z_SysNmiOnReset
    2eaa:	f7ff bffd 	b.w	2ea8 <z_SysNmiOnReset>
    2eae:	bf00      	nop

00002eb0 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2eb0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2eb2:	4b0b      	ldr	r3, [pc, #44]	; (2ee0 <z_arm_prep_c+0x30>)
    2eb4:	4a0b      	ldr	r2, [pc, #44]	; (2ee4 <z_arm_prep_c+0x34>)
    2eb6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2eba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2ebc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ec0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ec8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2ed0:	f004 fa36 	bl	7340 <z_bss_zero>
	z_data_copy();
    2ed4:	f006 fca8 	bl	9828 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2ed8:	f000 fc72 	bl	37c0 <z_arm_interrupt_init>
	z_cstart();
    2edc:	f004 fa8e 	bl	73fc <z_cstart>
    2ee0:	e000ed00 	.word	0xe000ed00
    2ee4:	00000000 	.word	0x00000000

00002ee8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ee8:	4a0a      	ldr	r2, [pc, #40]	; (2f14 <arch_swap+0x2c>)
    2eea:	6893      	ldr	r3, [r2, #8]
    2eec:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2ef0:	4909      	ldr	r1, [pc, #36]	; (2f18 <arch_swap+0x30>)
    2ef2:	6809      	ldr	r1, [r1, #0]
    2ef4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ef8:	4908      	ldr	r1, [pc, #32]	; (2f1c <arch_swap+0x34>)
    2efa:	684b      	ldr	r3, [r1, #4]
    2efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2f00:	604b      	str	r3, [r1, #4]
    2f02:	2300      	movs	r3, #0
    2f04:	f383 8811 	msr	BASEPRI, r3
    2f08:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2f0c:	6893      	ldr	r3, [r2, #8]
}
    2f0e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2f12:	4770      	bx	lr
    2f14:	200050ac 	.word	0x200050ac
    2f18:	0000da98 	.word	0x0000da98
    2f1c:	e000ed00 	.word	0xe000ed00

00002f20 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2f20:	4913      	ldr	r1, [pc, #76]	; (2f70 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2f22:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2f24:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2f28:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2f2a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2f2e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2f32:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2f34:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2f38:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2f3c:	4f0d      	ldr	r7, [pc, #52]	; (2f74 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2f3e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2f42:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2f44:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2f46:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2f48:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2f4c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2f4e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2f52:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2f56:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2f58:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2f5a:	f000 fcdb 	bl	3914 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2f5e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2f62:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2f66:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2f6a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2f6e:	4770      	bx	lr
    ldr r1, =_kernel
    2f70:	200050ac 	.word	0x200050ac
    ldr v4, =_SCS_ICSR
    2f74:	e000ed04 	.word	0xe000ed04

00002f78 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2f78:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2f7c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2f7e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2f82:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f86:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f88:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f8c:	2902      	cmp	r1, #2
    beq _oops
    2f8e:	d0ff      	beq.n	2f90 <_oops>

00002f90 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f90:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f92:	f007 fe74 	bl	ac7e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f96:	bd01      	pop	{r0, pc}

00002f98 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2f98:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2f9a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2f9e:	490e      	ldr	r1, [pc, #56]	; (2fd8 <arch_new_thread+0x40>)
    2fa0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2fa4:	f021 0101 	bic.w	r1, r1, #1
    2fa8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2fac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2fb0:	9b01      	ldr	r3, [sp, #4]
    2fb2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2fb6:	9b02      	ldr	r3, [sp, #8]
    2fb8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2fbc:	9b03      	ldr	r3, [sp, #12]
    2fbe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2fc6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2fca:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2fcc:	2300      	movs	r3, #0
    2fce:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2fd2:	bc10      	pop	{r4}
    2fd4:	4770      	bx	lr
    2fd6:	bf00      	nop
    2fd8:	0000aa23 	.word	0x0000aa23

00002fdc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2fdc:	4b12      	ldr	r3, [pc, #72]	; (3028 <z_check_thread_stack_fail+0x4c>)
    2fde:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2fe0:	b302      	cbz	r2, 3024 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2fe2:	f110 0f16 	cmn.w	r0, #22
    2fe6:	d011      	beq.n	300c <z_check_thread_stack_fail+0x30>
    2fe8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2fec:	f1a3 0c20 	sub.w	ip, r3, #32
    2ff0:	4584      	cmp	ip, r0
    2ff2:	d805      	bhi.n	3000 <z_check_thread_stack_fail+0x24>
    2ff4:	4283      	cmp	r3, r0
    2ff6:	d905      	bls.n	3004 <z_check_thread_stack_fail+0x28>
    2ff8:	428b      	cmp	r3, r1
    2ffa:	d805      	bhi.n	3008 <z_check_thread_stack_fail+0x2c>
    2ffc:	2100      	movs	r1, #0
    2ffe:	e00b      	b.n	3018 <z_check_thread_stack_fail+0x3c>
    3000:	2100      	movs	r1, #0
    3002:	e009      	b.n	3018 <z_check_thread_stack_fail+0x3c>
    3004:	2100      	movs	r1, #0
    3006:	e007      	b.n	3018 <z_check_thread_stack_fail+0x3c>
    3008:	2101      	movs	r1, #1
    300a:	e005      	b.n	3018 <z_check_thread_stack_fail+0x3c>
    300c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3010:	428b      	cmp	r3, r1
    3012:	bf94      	ite	ls
    3014:	2100      	movls	r1, #0
    3016:	2101      	movhi	r1, #1
    3018:	b909      	cbnz	r1, 301e <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    301a:	2000      	movs	r0, #0
}
    301c:	4770      	bx	lr
		return thread->stack_info.start;
    301e:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3022:	4770      	bx	lr
		return 0;
    3024:	2000      	movs	r0, #0
    3026:	4770      	bx	lr
    3028:	200050ac 	.word	0x200050ac

0000302c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    302c:	b508      	push	{r3, lr}
    302e:	460d      	mov	r5, r1
    3030:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3032:	4b08      	ldr	r3, [pc, #32]	; (3054 <arch_switch_to_main_thread+0x28>)
    3034:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3036:	f000 fc6d 	bl	3914 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    303a:	4620      	mov	r0, r4
    303c:	f385 8809 	msr	PSP, r5
    3040:	2100      	movs	r1, #0
    3042:	b663      	cpsie	if
    3044:	f381 8811 	msr	BASEPRI, r1
    3048:	f3bf 8f6f 	isb	sy
    304c:	2200      	movs	r2, #0
    304e:	2300      	movs	r3, #0
    3050:	f007 fce7 	bl	aa22 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3054:	200050ac 	.word	0x200050ac

00003058 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3058:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    305a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    305c:	4a0b      	ldr	r2, [pc, #44]	; (308c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    305e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3060:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3062:	bf1e      	ittt	ne
	movne	r1, #0
    3064:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3066:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3068:	f008 fecb 	blne	be02 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    306c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    306e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3072:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3076:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    307a:	4905      	ldr	r1, [pc, #20]	; (3090 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    307c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    307e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3080:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3082:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3086:	4903      	ldr	r1, [pc, #12]	; (3094 <_isr_wrapper+0x3c>)
	bx r1
    3088:	4708      	bx	r1
    308a:	0000      	.short	0x0000
	ldr r2, =_kernel
    308c:	200050ac 	.word	0x200050ac
	ldr r1, =_sw_isr_table
    3090:	0000c0c4 	.word	0x0000c0c4
	ldr r1, =z_arm_int_exit
    3094:	00003099 	.word	0x00003099

00003098 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3098:	4b04      	ldr	r3, [pc, #16]	; (30ac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    309a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    309c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    309e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    30a0:	d003      	beq.n	30aa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    30a2:	4903      	ldr	r1, [pc, #12]	; (30b0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    30a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    30a8:	600a      	str	r2, [r1, #0]

000030aa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    30aa:	4770      	bx	lr
	ldr r3, =_kernel
    30ac:	200050ac 	.word	0x200050ac
	ldr r1, =_SCS_ICSR
    30b0:	e000ed04 	.word	0xe000ed04

000030b4 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	b084      	sub	sp, #16
    30b8:	4605      	mov	r5, r0
    30ba:	460e      	mov	r6, r1
    30bc:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    30be:	4b47      	ldr	r3, [pc, #284]	; (31dc <bus_fault+0x128>)
    30c0:	9302      	str	r3, [sp, #8]
    30c2:	2000      	movs	r0, #0
    30c4:	9001      	str	r0, [sp, #4]
    30c6:	9000      	str	r0, [sp, #0]
    30c8:	4603      	mov	r3, r0
    30ca:	2201      	movs	r2, #1
    30cc:	4944      	ldr	r1, [pc, #272]	; (31e0 <bus_fault+0x12c>)
    30ce:	f007 fdea 	bl	aca6 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    30d2:	4b44      	ldr	r3, [pc, #272]	; (31e4 <bus_fault+0x130>)
    30d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    30da:	d125      	bne.n	3128 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    30dc:	4b41      	ldr	r3, [pc, #260]	; (31e4 <bus_fault+0x130>)
    30de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    30e4:	d12b      	bne.n	313e <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    30e6:	4b3f      	ldr	r3, [pc, #252]	; (31e4 <bus_fault+0x130>)
    30e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ea:	f413 7f00 	tst.w	r3, #512	; 0x200
    30ee:	d131      	bne.n	3154 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    30f0:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <bus_fault+0x130>)
    30f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30f4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    30f8:	d14f      	bne.n	319a <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    30fa:	4b3a      	ldr	r3, [pc, #232]	; (31e4 <bus_fault+0x130>)
    30fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30fe:	f413 7f80 	tst.w	r3, #256	; 0x100
    3102:	d155      	bne.n	31b0 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3104:	4b37      	ldr	r3, [pc, #220]	; (31e4 <bus_fault+0x130>)
    3106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3108:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    310c:	d15b      	bne.n	31c6 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    310e:	4a35      	ldr	r2, [pc, #212]	; (31e4 <bus_fault+0x130>)
    3110:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3112:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3116:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3118:	2101      	movs	r1, #1
    311a:	4628      	mov	r0, r5
    311c:	f007 fdc1 	bl	aca2 <memory_fault_recoverable>
    3120:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3122:	2000      	movs	r0, #0
    3124:	b004      	add	sp, #16
    3126:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    3128:	4b2f      	ldr	r3, [pc, #188]	; (31e8 <bus_fault+0x134>)
    312a:	9302      	str	r3, [sp, #8]
    312c:	2000      	movs	r0, #0
    312e:	9001      	str	r0, [sp, #4]
    3130:	9000      	str	r0, [sp, #0]
    3132:	4603      	mov	r3, r0
    3134:	2201      	movs	r2, #1
    3136:	492a      	ldr	r1, [pc, #168]	; (31e0 <bus_fault+0x12c>)
    3138:	f007 fdb5 	bl	aca6 <z_log_msg2_runtime_create>
    313c:	e7ce      	b.n	30dc <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    313e:	4b2b      	ldr	r3, [pc, #172]	; (31ec <bus_fault+0x138>)
    3140:	9302      	str	r3, [sp, #8]
    3142:	2000      	movs	r0, #0
    3144:	9001      	str	r0, [sp, #4]
    3146:	9000      	str	r0, [sp, #0]
    3148:	4603      	mov	r3, r0
    314a:	2201      	movs	r2, #1
    314c:	4924      	ldr	r1, [pc, #144]	; (31e0 <bus_fault+0x12c>)
    314e:	f007 fdaa 	bl	aca6 <z_log_msg2_runtime_create>
    3152:	e7c8      	b.n	30e6 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    3154:	4b26      	ldr	r3, [pc, #152]	; (31f0 <bus_fault+0x13c>)
    3156:	9302      	str	r3, [sp, #8]
    3158:	2000      	movs	r0, #0
    315a:	9001      	str	r0, [sp, #4]
    315c:	9000      	str	r0, [sp, #0]
    315e:	4603      	mov	r3, r0
    3160:	2201      	movs	r2, #1
    3162:	491f      	ldr	r1, [pc, #124]	; (31e0 <bus_fault+0x12c>)
    3164:	f007 fd9f 	bl	aca6 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3168:	4b1e      	ldr	r3, [pc, #120]	; (31e4 <bus_fault+0x130>)
    316a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    316e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3172:	d0bd      	beq.n	30f0 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3174:	9203      	str	r2, [sp, #12]
    3176:	4b1f      	ldr	r3, [pc, #124]	; (31f4 <bus_fault+0x140>)
    3178:	9302      	str	r3, [sp, #8]
    317a:	2000      	movs	r0, #0
    317c:	9001      	str	r0, [sp, #4]
    317e:	9000      	str	r0, [sp, #0]
    3180:	4603      	mov	r3, r0
    3182:	2201      	movs	r2, #1
    3184:	4916      	ldr	r1, [pc, #88]	; (31e0 <bus_fault+0x12c>)
    3186:	f007 fd8e 	bl	aca6 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    318a:	2e00      	cmp	r6, #0
    318c:	d0b0      	beq.n	30f0 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    318e:	4a15      	ldr	r2, [pc, #84]	; (31e4 <bus_fault+0x130>)
    3190:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3192:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3196:	6293      	str	r3, [r2, #40]	; 0x28
    3198:	e7aa      	b.n	30f0 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    319a:	4b17      	ldr	r3, [pc, #92]	; (31f8 <bus_fault+0x144>)
    319c:	9302      	str	r3, [sp, #8]
    319e:	2000      	movs	r0, #0
    31a0:	9001      	str	r0, [sp, #4]
    31a2:	9000      	str	r0, [sp, #0]
    31a4:	4603      	mov	r3, r0
    31a6:	2201      	movs	r2, #1
    31a8:	490d      	ldr	r1, [pc, #52]	; (31e0 <bus_fault+0x12c>)
    31aa:	f007 fd7c 	bl	aca6 <z_log_msg2_runtime_create>
    31ae:	e7a4      	b.n	30fa <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    31b0:	4b12      	ldr	r3, [pc, #72]	; (31fc <bus_fault+0x148>)
    31b2:	9302      	str	r3, [sp, #8]
    31b4:	2000      	movs	r0, #0
    31b6:	9001      	str	r0, [sp, #4]
    31b8:	9000      	str	r0, [sp, #0]
    31ba:	4603      	mov	r3, r0
    31bc:	2201      	movs	r2, #1
    31be:	4908      	ldr	r1, [pc, #32]	; (31e0 <bus_fault+0x12c>)
    31c0:	f007 fd71 	bl	aca6 <z_log_msg2_runtime_create>
    31c4:	e7a3      	b.n	310e <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    31c6:	4b0e      	ldr	r3, [pc, #56]	; (3200 <bus_fault+0x14c>)
    31c8:	9302      	str	r3, [sp, #8]
    31ca:	2000      	movs	r0, #0
    31cc:	9001      	str	r0, [sp, #4]
    31ce:	9000      	str	r0, [sp, #0]
    31d0:	4603      	mov	r3, r0
    31d2:	2201      	movs	r2, #1
    31d4:	4902      	ldr	r1, [pc, #8]	; (31e0 <bus_fault+0x12c>)
    31d6:	f007 fd66 	bl	aca6 <z_log_msg2_runtime_create>
    31da:	e798      	b.n	310e <bus_fault+0x5a>
    31dc:	0000cddc 	.word	0x0000cddc
    31e0:	0000c26c 	.word	0x0000c26c
    31e4:	e000ed00 	.word	0xe000ed00
    31e8:	0000cdf4 	.word	0x0000cdf4
    31ec:	0000ce08 	.word	0x0000ce08
    31f0:	0000ce1c 	.word	0x0000ce1c
    31f4:	0000ce38 	.word	0x0000ce38
    31f8:	0000ce50 	.word	0x0000ce50
    31fc:	0000ce6c 	.word	0x0000ce6c
    3200:	0000ce84 	.word	0x0000ce84

00003204 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3204:	b500      	push	{lr}
    3206:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3208:	4b3a      	ldr	r3, [pc, #232]	; (32f4 <usage_fault+0xf0>)
    320a:	9302      	str	r3, [sp, #8]
    320c:	2000      	movs	r0, #0
    320e:	9001      	str	r0, [sp, #4]
    3210:	9000      	str	r0, [sp, #0]
    3212:	4603      	mov	r3, r0
    3214:	2201      	movs	r2, #1
    3216:	4938      	ldr	r1, [pc, #224]	; (32f8 <usage_fault+0xf4>)
    3218:	f007 fd45 	bl	aca6 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    321c:	4b37      	ldr	r3, [pc, #220]	; (32fc <usage_fault+0xf8>)
    321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3220:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3224:	d123      	bne.n	326e <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3226:	4b35      	ldr	r3, [pc, #212]	; (32fc <usage_fault+0xf8>)
    3228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    322a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    322e:	d129      	bne.n	3284 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3230:	4b32      	ldr	r3, [pc, #200]	; (32fc <usage_fault+0xf8>)
    3232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3234:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3238:	d12f      	bne.n	329a <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    323a:	4b30      	ldr	r3, [pc, #192]	; (32fc <usage_fault+0xf8>)
    323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    323e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3242:	d135      	bne.n	32b0 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3244:	4b2d      	ldr	r3, [pc, #180]	; (32fc <usage_fault+0xf8>)
    3246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3248:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    324c:	d13b      	bne.n	32c6 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    324e:	4b2b      	ldr	r3, [pc, #172]	; (32fc <usage_fault+0xf8>)
    3250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3252:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3256:	d141      	bne.n	32dc <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3258:	4a28      	ldr	r2, [pc, #160]	; (32fc <usage_fault+0xf8>)
    325a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    325c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3260:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3264:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3266:	2000      	movs	r0, #0
    3268:	b005      	add	sp, #20
    326a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    326e:	4b24      	ldr	r3, [pc, #144]	; (3300 <usage_fault+0xfc>)
    3270:	9302      	str	r3, [sp, #8]
    3272:	2000      	movs	r0, #0
    3274:	9001      	str	r0, [sp, #4]
    3276:	9000      	str	r0, [sp, #0]
    3278:	4603      	mov	r3, r0
    327a:	2201      	movs	r2, #1
    327c:	491e      	ldr	r1, [pc, #120]	; (32f8 <usage_fault+0xf4>)
    327e:	f007 fd12 	bl	aca6 <z_log_msg2_runtime_create>
    3282:	e7d0      	b.n	3226 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    3284:	4b1f      	ldr	r3, [pc, #124]	; (3304 <usage_fault+0x100>)
    3286:	9302      	str	r3, [sp, #8]
    3288:	2000      	movs	r0, #0
    328a:	9001      	str	r0, [sp, #4]
    328c:	9000      	str	r0, [sp, #0]
    328e:	4603      	mov	r3, r0
    3290:	2201      	movs	r2, #1
    3292:	4919      	ldr	r1, [pc, #100]	; (32f8 <usage_fault+0xf4>)
    3294:	f007 fd07 	bl	aca6 <z_log_msg2_runtime_create>
    3298:	e7ca      	b.n	3230 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    329a:	4b1b      	ldr	r3, [pc, #108]	; (3308 <usage_fault+0x104>)
    329c:	9302      	str	r3, [sp, #8]
    329e:	2000      	movs	r0, #0
    32a0:	9001      	str	r0, [sp, #4]
    32a2:	9000      	str	r0, [sp, #0]
    32a4:	4603      	mov	r3, r0
    32a6:	2201      	movs	r2, #1
    32a8:	4913      	ldr	r1, [pc, #76]	; (32f8 <usage_fault+0xf4>)
    32aa:	f007 fcfc 	bl	aca6 <z_log_msg2_runtime_create>
    32ae:	e7c4      	b.n	323a <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    32b0:	4b16      	ldr	r3, [pc, #88]	; (330c <usage_fault+0x108>)
    32b2:	9302      	str	r3, [sp, #8]
    32b4:	2000      	movs	r0, #0
    32b6:	9001      	str	r0, [sp, #4]
    32b8:	9000      	str	r0, [sp, #0]
    32ba:	4603      	mov	r3, r0
    32bc:	2201      	movs	r2, #1
    32be:	490e      	ldr	r1, [pc, #56]	; (32f8 <usage_fault+0xf4>)
    32c0:	f007 fcf1 	bl	aca6 <z_log_msg2_runtime_create>
    32c4:	e7be      	b.n	3244 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    32c6:	4b12      	ldr	r3, [pc, #72]	; (3310 <usage_fault+0x10c>)
    32c8:	9302      	str	r3, [sp, #8]
    32ca:	2000      	movs	r0, #0
    32cc:	9001      	str	r0, [sp, #4]
    32ce:	9000      	str	r0, [sp, #0]
    32d0:	4603      	mov	r3, r0
    32d2:	2201      	movs	r2, #1
    32d4:	4908      	ldr	r1, [pc, #32]	; (32f8 <usage_fault+0xf4>)
    32d6:	f007 fce6 	bl	aca6 <z_log_msg2_runtime_create>
    32da:	e7b8      	b.n	324e <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    32dc:	4b0d      	ldr	r3, [pc, #52]	; (3314 <usage_fault+0x110>)
    32de:	9302      	str	r3, [sp, #8]
    32e0:	2000      	movs	r0, #0
    32e2:	9001      	str	r0, [sp, #4]
    32e4:	9000      	str	r0, [sp, #0]
    32e6:	4603      	mov	r3, r0
    32e8:	2201      	movs	r2, #1
    32ea:	4903      	ldr	r1, [pc, #12]	; (32f8 <usage_fault+0xf4>)
    32ec:	f007 fcdb 	bl	aca6 <z_log_msg2_runtime_create>
    32f0:	e7b2      	b.n	3258 <usage_fault+0x54>
    32f2:	bf00      	nop
    32f4:	0000ceb4 	.word	0x0000ceb4
    32f8:	0000c26c 	.word	0x0000c26c
    32fc:	e000ed00 	.word	0xe000ed00
    3300:	0000cecc 	.word	0x0000cecc
    3304:	0000cee0 	.word	0x0000cee0
    3308:	0000cefc 	.word	0x0000cefc
    330c:	0000cf1c 	.word	0x0000cf1c
    3310:	0000cf44 	.word	0x0000cf44
    3314:	0000cf60 	.word	0x0000cf60

00003318 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    3318:	b500      	push	{lr}
    331a:	b085      	sub	sp, #20
	*recoverable = false;
    331c:	2000      	movs	r0, #0
    331e:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    3320:	4b05      	ldr	r3, [pc, #20]	; (3338 <debug_monitor+0x20>)
    3322:	9302      	str	r3, [sp, #8]
    3324:	9001      	str	r0, [sp, #4]
    3326:	9000      	str	r0, [sp, #0]
    3328:	4603      	mov	r3, r0
    332a:	2201      	movs	r2, #1
    332c:	4903      	ldr	r1, [pc, #12]	; (333c <debug_monitor+0x24>)
    332e:	f007 fcba 	bl	aca6 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    3332:	b005      	add	sp, #20
    3334:	f85d fb04 	ldr.w	pc, [sp], #4
    3338:	0000cf8c 	.word	0x0000cf8c
    333c:	0000c26c 	.word	0x0000c26c

00003340 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    3340:	b500      	push	{lr}
    3342:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    3344:	290f      	cmp	r1, #15
    3346:	dc10      	bgt.n	336a <reserved_exception+0x2a>
    3348:	4b09      	ldr	r3, [pc, #36]	; (3370 <reserved_exception+0x30>)
    334a:	3910      	subs	r1, #16
    334c:	9104      	str	r1, [sp, #16]
    334e:	9303      	str	r3, [sp, #12]
    3350:	4b08      	ldr	r3, [pc, #32]	; (3374 <reserved_exception+0x34>)
    3352:	9302      	str	r3, [sp, #8]
    3354:	2000      	movs	r0, #0
    3356:	9001      	str	r0, [sp, #4]
    3358:	9000      	str	r0, [sp, #0]
    335a:	4603      	mov	r3, r0
    335c:	2201      	movs	r2, #1
    335e:	4906      	ldr	r1, [pc, #24]	; (3378 <reserved_exception+0x38>)
    3360:	f007 fca1 	bl	aca6 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    3364:	b007      	add	sp, #28
    3366:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    336a:	4b04      	ldr	r3, [pc, #16]	; (337c <reserved_exception+0x3c>)
    336c:	e7ed      	b.n	334a <reserved_exception+0xa>
    336e:	bf00      	nop
    3370:	0000cfcc 	.word	0x0000cfcc
    3374:	0000cfe4 	.word	0x0000cfe4
    3378:	0000c26c 	.word	0x0000c26c
    337c:	0000cfb0 	.word	0x0000cfb0

00003380 <mem_manage_fault>:
{
    3380:	b5f0      	push	{r4, r5, r6, r7, lr}
    3382:	b085      	sub	sp, #20
    3384:	4605      	mov	r5, r0
    3386:	460c      	mov	r4, r1
    3388:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    338a:	4b5f      	ldr	r3, [pc, #380]	; (3508 <mem_manage_fault+0x188>)
    338c:	9302      	str	r3, [sp, #8]
    338e:	2000      	movs	r0, #0
    3390:	9001      	str	r0, [sp, #4]
    3392:	9000      	str	r0, [sp, #0]
    3394:	4603      	mov	r3, r0
    3396:	2201      	movs	r2, #1
    3398:	495c      	ldr	r1, [pc, #368]	; (350c <mem_manage_fault+0x18c>)
    339a:	f007 fc84 	bl	aca6 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    339e:	4b5c      	ldr	r3, [pc, #368]	; (3510 <mem_manage_fault+0x190>)
    33a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a2:	f013 0f10 	tst.w	r3, #16
    33a6:	d13b      	bne.n	3420 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    33a8:	4b59      	ldr	r3, [pc, #356]	; (3510 <mem_manage_fault+0x190>)
    33aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33ac:	f013 0f08 	tst.w	r3, #8
    33b0:	d141      	bne.n	3436 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    33b2:	4b57      	ldr	r3, [pc, #348]	; (3510 <mem_manage_fault+0x190>)
    33b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33b6:	f013 0f02 	tst.w	r3, #2
    33ba:	d147      	bne.n	344c <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    33bc:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    33c0:	4b53      	ldr	r3, [pc, #332]	; (3510 <mem_manage_fault+0x190>)
    33c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33c4:	f013 0f01 	tst.w	r3, #1
    33c8:	d166      	bne.n	3498 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    33ca:	4b51      	ldr	r3, [pc, #324]	; (3510 <mem_manage_fault+0x190>)
    33cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33ce:	f013 0f20 	tst.w	r3, #32
    33d2:	d16c      	bne.n	34ae <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    33d4:	4b4e      	ldr	r3, [pc, #312]	; (3510 <mem_manage_fault+0x190>)
    33d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33d8:	f013 0f10 	tst.w	r3, #16
    33dc:	d104      	bne.n	33e8 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    33de:	4b4c      	ldr	r3, [pc, #304]	; (3510 <mem_manage_fault+0x190>)
    33e0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    33e2:	f014 0402 	ands.w	r4, r4, #2
    33e6:	d004      	beq.n	33f2 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    33e8:	4b49      	ldr	r3, [pc, #292]	; (3510 <mem_manage_fault+0x190>)
    33ea:	685c      	ldr	r4, [r3, #4]
    33ec:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    33f0:	d168      	bne.n	34c4 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    33f2:	4b47      	ldr	r3, [pc, #284]	; (3510 <mem_manage_fault+0x190>)
    33f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33f6:	f013 0f20 	tst.w	r3, #32
    33fa:	d004      	beq.n	3406 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    33fc:	4a44      	ldr	r2, [pc, #272]	; (3510 <mem_manage_fault+0x190>)
    33fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3404:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3406:	4a42      	ldr	r2, [pc, #264]	; (3510 <mem_manage_fault+0x190>)
    3408:	6a93      	ldr	r3, [r2, #40]	; 0x28
    340a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    340e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3410:	2101      	movs	r1, #1
    3412:	4628      	mov	r0, r5
    3414:	f007 fc45 	bl	aca2 <memory_fault_recoverable>
    3418:	7030      	strb	r0, [r6, #0]
}
    341a:	4620      	mov	r0, r4
    341c:	b005      	add	sp, #20
    341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    3420:	4b3c      	ldr	r3, [pc, #240]	; (3514 <mem_manage_fault+0x194>)
    3422:	9302      	str	r3, [sp, #8]
    3424:	2000      	movs	r0, #0
    3426:	9001      	str	r0, [sp, #4]
    3428:	9000      	str	r0, [sp, #0]
    342a:	4603      	mov	r3, r0
    342c:	2201      	movs	r2, #1
    342e:	4937      	ldr	r1, [pc, #220]	; (350c <mem_manage_fault+0x18c>)
    3430:	f007 fc39 	bl	aca6 <z_log_msg2_runtime_create>
    3434:	e7b8      	b.n	33a8 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    3436:	4b38      	ldr	r3, [pc, #224]	; (3518 <mem_manage_fault+0x198>)
    3438:	9302      	str	r3, [sp, #8]
    343a:	2000      	movs	r0, #0
    343c:	9001      	str	r0, [sp, #4]
    343e:	9000      	str	r0, [sp, #0]
    3440:	4603      	mov	r3, r0
    3442:	2201      	movs	r2, #1
    3444:	4931      	ldr	r1, [pc, #196]	; (350c <mem_manage_fault+0x18c>)
    3446:	f007 fc2e 	bl	aca6 <z_log_msg2_runtime_create>
    344a:	e7b2      	b.n	33b2 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    344c:	4b33      	ldr	r3, [pc, #204]	; (351c <mem_manage_fault+0x19c>)
    344e:	9302      	str	r3, [sp, #8]
    3450:	2000      	movs	r0, #0
    3452:	9001      	str	r0, [sp, #4]
    3454:	9000      	str	r0, [sp, #0]
    3456:	4603      	mov	r3, r0
    3458:	2201      	movs	r2, #1
    345a:	492c      	ldr	r1, [pc, #176]	; (350c <mem_manage_fault+0x18c>)
    345c:	f007 fc23 	bl	aca6 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    3460:	4b2b      	ldr	r3, [pc, #172]	; (3510 <mem_manage_fault+0x190>)
    3462:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	f013 0f80 	tst.w	r3, #128	; 0x80
    346a:	d102      	bne.n	3472 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    346c:	f06f 0715 	mvn.w	r7, #21
    3470:	e7a6      	b.n	33c0 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3472:	9703      	str	r7, [sp, #12]
    3474:	4b2a      	ldr	r3, [pc, #168]	; (3520 <mem_manage_fault+0x1a0>)
    3476:	9302      	str	r3, [sp, #8]
    3478:	2000      	movs	r0, #0
    347a:	9001      	str	r0, [sp, #4]
    347c:	9000      	str	r0, [sp, #0]
    347e:	4603      	mov	r3, r0
    3480:	2201      	movs	r2, #1
    3482:	4922      	ldr	r1, [pc, #136]	; (350c <mem_manage_fault+0x18c>)
    3484:	f007 fc0f 	bl	aca6 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3488:	2c00      	cmp	r4, #0
    348a:	d099      	beq.n	33c0 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    348c:	4a20      	ldr	r2, [pc, #128]	; (3510 <mem_manage_fault+0x190>)
    348e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3494:	6293      	str	r3, [r2, #40]	; 0x28
    3496:	e793      	b.n	33c0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3498:	4b22      	ldr	r3, [pc, #136]	; (3524 <mem_manage_fault+0x1a4>)
    349a:	9302      	str	r3, [sp, #8]
    349c:	2000      	movs	r0, #0
    349e:	9001      	str	r0, [sp, #4]
    34a0:	9000      	str	r0, [sp, #0]
    34a2:	4603      	mov	r3, r0
    34a4:	2201      	movs	r2, #1
    34a6:	4919      	ldr	r1, [pc, #100]	; (350c <mem_manage_fault+0x18c>)
    34a8:	f007 fbfd 	bl	aca6 <z_log_msg2_runtime_create>
    34ac:	e78d      	b.n	33ca <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    34ae:	4b1e      	ldr	r3, [pc, #120]	; (3528 <mem_manage_fault+0x1a8>)
    34b0:	9302      	str	r3, [sp, #8]
    34b2:	2000      	movs	r0, #0
    34b4:	9001      	str	r0, [sp, #4]
    34b6:	9000      	str	r0, [sp, #0]
    34b8:	4603      	mov	r3, r0
    34ba:	2201      	movs	r2, #1
    34bc:	4913      	ldr	r1, [pc, #76]	; (350c <mem_manage_fault+0x18c>)
    34be:	f007 fbf2 	bl	aca6 <z_log_msg2_runtime_create>
    34c2:	e787      	b.n	33d4 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    34c4:	4629      	mov	r1, r5
    34c6:	4638      	mov	r0, r7
    34c8:	f7ff fd88 	bl	2fdc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    34cc:	4607      	mov	r7, r0
    34ce:	b9b0      	cbnz	r0, 34fe <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    34d0:	4b0f      	ldr	r3, [pc, #60]	; (3510 <mem_manage_fault+0x190>)
    34d2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    34d4:	f014 0410 	ands.w	r4, r4, #16
    34d8:	d08b      	beq.n	33f2 <mem_manage_fault+0x72>
    34da:	4c14      	ldr	r4, [pc, #80]	; (352c <mem_manage_fault+0x1ac>)
    34dc:	f240 1349 	movw	r3, #329	; 0x149
    34e0:	4622      	mov	r2, r4
    34e2:	4913      	ldr	r1, [pc, #76]	; (3530 <mem_manage_fault+0x1b0>)
    34e4:	4813      	ldr	r0, [pc, #76]	; (3534 <mem_manage_fault+0x1b4>)
    34e6:	f007 fafb 	bl	aae0 <assert_print>
    34ea:	4813      	ldr	r0, [pc, #76]	; (3538 <mem_manage_fault+0x1b8>)
    34ec:	f007 faf8 	bl	aae0 <assert_print>
    34f0:	f240 1149 	movw	r1, #329	; 0x149
    34f4:	4620      	mov	r0, r4
    34f6:	f007 faec 	bl	aad2 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34fa:	463c      	mov	r4, r7
    34fc:	e779      	b.n	33f2 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    34fe:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3502:	2402      	movs	r4, #2
    3504:	e775      	b.n	33f2 <mem_manage_fault+0x72>
    3506:	bf00      	nop
    3508:	0000cff8 	.word	0x0000cff8
    350c:	0000c26c 	.word	0x0000c26c
    3510:	e000ed00 	.word	0xe000ed00
    3514:	0000d010 	.word	0x0000d010
    3518:	0000ce08 	.word	0x0000ce08
    351c:	0000d044 	.word	0x0000d044
    3520:	0000d05c 	.word	0x0000d05c
    3524:	0000d074 	.word	0x0000d074
    3528:	0000ce84 	.word	0x0000ce84
    352c:	0000d094 	.word	0x0000d094
    3530:	0000d0d0 	.word	0x0000d0d0
    3534:	0000c478 	.word	0x0000c478
    3538:	0000d11c 	.word	0x0000d11c

0000353c <hard_fault>:
{
    353c:	b5f0      	push	{r4, r5, r6, r7, lr}
    353e:	b085      	sub	sp, #20
    3540:	4607      	mov	r7, r0
    3542:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    3544:	4b4b      	ldr	r3, [pc, #300]	; (3674 <hard_fault+0x138>)
    3546:	9302      	str	r3, [sp, #8]
    3548:	2400      	movs	r4, #0
    354a:	9401      	str	r4, [sp, #4]
    354c:	9400      	str	r4, [sp, #0]
    354e:	4623      	mov	r3, r4
    3550:	2201      	movs	r2, #1
    3552:	4949      	ldr	r1, [pc, #292]	; (3678 <hard_fault+0x13c>)
    3554:	4620      	mov	r0, r4
    3556:	f007 fba6 	bl	aca6 <z_log_msg2_runtime_create>
	*recoverable = false;
    355a:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    355c:	4b47      	ldr	r3, [pc, #284]	; (367c <hard_fault+0x140>)
    355e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    3560:	f015 0502 	ands.w	r5, r5, #2
    3564:	d12d      	bne.n	35c2 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3566:	4b45      	ldr	r3, [pc, #276]	; (367c <hard_fault+0x140>)
    3568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    356a:	2b00      	cmp	r3, #0
    356c:	db36      	blt.n	35dc <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    356e:	4b43      	ldr	r3, [pc, #268]	; (367c <hard_fault+0x140>)
    3570:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3572:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3576:	d06b      	beq.n	3650 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    3578:	4b41      	ldr	r3, [pc, #260]	; (3680 <hard_fault+0x144>)
    357a:	9302      	str	r3, [sp, #8]
    357c:	2000      	movs	r0, #0
    357e:	9001      	str	r0, [sp, #4]
    3580:	9000      	str	r0, [sp, #0]
    3582:	4603      	mov	r3, r0
    3584:	2201      	movs	r2, #1
    3586:	493c      	ldr	r1, [pc, #240]	; (3678 <hard_fault+0x13c>)
    3588:	f007 fb8d 	bl	aca6 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    358c:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    358e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3592:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3596:	429a      	cmp	r2, r3
    3598:	d02c      	beq.n	35f4 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    359a:	4b38      	ldr	r3, [pc, #224]	; (367c <hard_fault+0x140>)
    359c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    35a0:	2b00      	cmp	r3, #0
    35a2:	d135      	bne.n	3610 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    35a4:	4b35      	ldr	r3, [pc, #212]	; (367c <hard_fault+0x140>)
    35a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    35aa:	2b00      	cmp	r3, #0
    35ac:	d137      	bne.n	361e <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    35ae:	4b33      	ldr	r3, [pc, #204]	; (367c <hard_fault+0x140>)
    35b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    35b2:	b29b      	uxth	r3, r3
    35b4:	2b00      	cmp	r3, #0
    35b6:	d039      	beq.n	362c <hard_fault+0xf0>
			reason = usage_fault(esf);
    35b8:	4638      	mov	r0, r7
    35ba:	f7ff fe23 	bl	3204 <usage_fault>
    35be:	4604      	mov	r4, r0
    35c0:	e009      	b.n	35d6 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    35c2:	4b30      	ldr	r3, [pc, #192]	; (3684 <hard_fault+0x148>)
    35c4:	9302      	str	r3, [sp, #8]
    35c6:	9401      	str	r4, [sp, #4]
    35c8:	9400      	str	r4, [sp, #0]
    35ca:	4623      	mov	r3, r4
    35cc:	2201      	movs	r2, #1
    35ce:	492a      	ldr	r1, [pc, #168]	; (3678 <hard_fault+0x13c>)
    35d0:	4620      	mov	r0, r4
    35d2:	f007 fb68 	bl	aca6 <z_log_msg2_runtime_create>
}
    35d6:	4620      	mov	r0, r4
    35d8:	b005      	add	sp, #20
    35da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    35dc:	4b2a      	ldr	r3, [pc, #168]	; (3688 <hard_fault+0x14c>)
    35de:	9302      	str	r3, [sp, #8]
    35e0:	2000      	movs	r0, #0
    35e2:	9001      	str	r0, [sp, #4]
    35e4:	9000      	str	r0, [sp, #0]
    35e6:	4603      	mov	r3, r0
    35e8:	2201      	movs	r2, #1
    35ea:	4923      	ldr	r1, [pc, #140]	; (3678 <hard_fault+0x13c>)
    35ec:	f007 fb5b 	bl	aca6 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    35f0:	462c      	mov	r4, r5
    35f2:	e7f0      	b.n	35d6 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    35f4:	683b      	ldr	r3, [r7, #0]
    35f6:	9303      	str	r3, [sp, #12]
    35f8:	4b24      	ldr	r3, [pc, #144]	; (368c <hard_fault+0x150>)
    35fa:	9302      	str	r3, [sp, #8]
    35fc:	2000      	movs	r0, #0
    35fe:	9001      	str	r0, [sp, #4]
    3600:	9000      	str	r0, [sp, #0]
    3602:	4603      	mov	r3, r0
    3604:	2201      	movs	r2, #1
    3606:	491c      	ldr	r1, [pc, #112]	; (3678 <hard_fault+0x13c>)
    3608:	f007 fb4d 	bl	aca6 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    360c:	683c      	ldr	r4, [r7, #0]
    360e:	e7e2      	b.n	35d6 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3610:	4632      	mov	r2, r6
    3612:	2101      	movs	r1, #1
    3614:	4638      	mov	r0, r7
    3616:	f7ff feb3 	bl	3380 <mem_manage_fault>
    361a:	4604      	mov	r4, r0
    361c:	e7db      	b.n	35d6 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    361e:	4632      	mov	r2, r6
    3620:	2101      	movs	r1, #1
    3622:	4638      	mov	r0, r7
    3624:	f7ff fd46 	bl	30b4 <bus_fault>
    3628:	4604      	mov	r4, r0
    362a:	e7d4      	b.n	35d6 <hard_fault+0x9a>
			__ASSERT(0,
    362c:	4c18      	ldr	r4, [pc, #96]	; (3690 <hard_fault+0x154>)
    362e:	f240 23cd 	movw	r3, #717	; 0x2cd
    3632:	4622      	mov	r2, r4
    3634:	4917      	ldr	r1, [pc, #92]	; (3694 <hard_fault+0x158>)
    3636:	4818      	ldr	r0, [pc, #96]	; (3698 <hard_fault+0x15c>)
    3638:	f007 fa52 	bl	aae0 <assert_print>
    363c:	4817      	ldr	r0, [pc, #92]	; (369c <hard_fault+0x160>)
    363e:	f007 fa4f 	bl	aae0 <assert_print>
    3642:	f240 21cd 	movw	r1, #717	; 0x2cd
    3646:	4620      	mov	r0, r4
    3648:	f007 fa43 	bl	aad2 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    364c:	462c      	mov	r4, r5
    364e:	e7c2      	b.n	35d6 <hard_fault+0x9a>
		__ASSERT(0,
    3650:	4d0f      	ldr	r5, [pc, #60]	; (3690 <hard_fault+0x154>)
    3652:	f240 23d1 	movw	r3, #721	; 0x2d1
    3656:	462a      	mov	r2, r5
    3658:	490e      	ldr	r1, [pc, #56]	; (3694 <hard_fault+0x158>)
    365a:	480f      	ldr	r0, [pc, #60]	; (3698 <hard_fault+0x15c>)
    365c:	f007 fa40 	bl	aae0 <assert_print>
    3660:	480f      	ldr	r0, [pc, #60]	; (36a0 <hard_fault+0x164>)
    3662:	f007 fa3d 	bl	aae0 <assert_print>
    3666:	f240 21d1 	movw	r1, #721	; 0x2d1
    366a:	4628      	mov	r0, r5
    366c:	f007 fa31 	bl	aad2 <assert_post_action>
	return reason;
    3670:	e7b1      	b.n	35d6 <hard_fault+0x9a>
    3672:	bf00      	nop
    3674:	0000d140 	.word	0x0000d140
    3678:	0000c26c 	.word	0x0000c26c
    367c:	e000ed00 	.word	0xe000ed00
    3680:	0000d18c 	.word	0x0000d18c
    3684:	0000d158 	.word	0x0000d158
    3688:	0000d17c 	.word	0x0000d17c
    368c:	0000d1ac 	.word	0x0000d1ac
    3690:	0000d094 	.word	0x0000d094
    3694:	0000cb38 	.word	0x0000cb38
    3698:	0000c478 	.word	0x0000c478
    369c:	0000d1c8 	.word	0x0000d1c8
    36a0:	0000d1ec 	.word	0x0000d1ec

000036a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    36a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36a6:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    36a8:	4b35      	ldr	r3, [pc, #212]	; (3780 <z_arm_fault+0xdc>)
    36aa:	685d      	ldr	r5, [r3, #4]
    36ac:	f3c5 0508 	ubfx	r5, r5, #0, #9
    36b0:	2300      	movs	r3, #0
    36b2:	f383 8811 	msr	BASEPRI, r3
    36b6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    36ba:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    36be:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    36c2:	d125      	bne.n	3710 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    36c4:	f002 030c 	and.w	r3, r2, #12
    36c8:	2b08      	cmp	r3, #8
    36ca:	d011      	beq.n	36f0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    36cc:	f012 0f08 	tst.w	r2, #8
    36d0:	d01b      	beq.n	370a <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    36d2:	460c      	mov	r4, r1
	*nested_exc = false;
    36d4:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    36d6:	b1f4      	cbz	r4, 3716 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    36d8:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    36dc:	4629      	mov	r1, r5
    36de:	4620      	mov	r0, r4
    36e0:	f007 faf0 	bl	acc4 <fault_handle>
    36e4:	4605      	mov	r5, r0
	if (recoverable) {
    36e6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    36ea:	b32b      	cbz	r3, 3738 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    36ec:	b00f      	add	sp, #60	; 0x3c
    36ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    36f0:	4b24      	ldr	r3, [pc, #144]	; (3784 <z_arm_fault+0xe0>)
    36f2:	9302      	str	r3, [sp, #8]
    36f4:	2400      	movs	r4, #0
    36f6:	9401      	str	r4, [sp, #4]
    36f8:	9400      	str	r4, [sp, #0]
    36fa:	4623      	mov	r3, r4
    36fc:	2201      	movs	r2, #1
    36fe:	4922      	ldr	r1, [pc, #136]	; (3788 <z_arm_fault+0xe4>)
    3700:	4620      	mov	r0, r4
    3702:	f007 fad0 	bl	aca6 <z_log_msg2_runtime_create>
	*nested_exc = false;
    3706:	4626      	mov	r6, r4
		return NULL;
    3708:	e7e5      	b.n	36d6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    370a:	4604      	mov	r4, r0
			*nested_exc = true;
    370c:	2601      	movs	r6, #1
    370e:	e7e2      	b.n	36d6 <z_arm_fault+0x32>
	*nested_exc = false;
    3710:	2600      	movs	r6, #0
		return NULL;
    3712:	4634      	mov	r4, r6
    3714:	e7df      	b.n	36d6 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    3716:	4f1d      	ldr	r7, [pc, #116]	; (378c <z_arm_fault+0xe8>)
    3718:	f240 33fb 	movw	r3, #1019	; 0x3fb
    371c:	463a      	mov	r2, r7
    371e:	491c      	ldr	r1, [pc, #112]	; (3790 <z_arm_fault+0xec>)
    3720:	481c      	ldr	r0, [pc, #112]	; (3794 <z_arm_fault+0xf0>)
    3722:	f007 f9dd 	bl	aae0 <assert_print>
    3726:	481c      	ldr	r0, [pc, #112]	; (3798 <z_arm_fault+0xf4>)
    3728:	f007 f9da 	bl	aae0 <assert_print>
    372c:	f240 31fb 	movw	r1, #1019	; 0x3fb
    3730:	4638      	mov	r0, r7
    3732:	f007 f9ce 	bl	aad2 <assert_post_action>
    3736:	e7cf      	b.n	36d8 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3738:	f10d 0c14 	add.w	ip, sp, #20
    373c:	6820      	ldr	r0, [r4, #0]
    373e:	6861      	ldr	r1, [r4, #4]
    3740:	68a2      	ldr	r2, [r4, #8]
    3742:	68e3      	ldr	r3, [r4, #12]
    3744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3748:	6920      	ldr	r0, [r4, #16]
    374a:	6961      	ldr	r1, [r4, #20]
    374c:	69a2      	ldr	r2, [r4, #24]
    374e:	69e3      	ldr	r3, [r4, #28]
    3750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    3754:	b146      	cbz	r6, 3768 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3756:	f3c3 0208 	ubfx	r2, r3, #0, #9
    375a:	b95a      	cbnz	r2, 3774 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    375c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3760:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    3764:	930c      	str	r3, [sp, #48]	; 0x30
    3766:	e005      	b.n	3774 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    376a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    376e:	f023 0301 	bic.w	r3, r3, #1
    3772:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    3774:	a905      	add	r1, sp, #20
    3776:	4628      	mov	r0, r5
    3778:	f007 fa75 	bl	ac66 <z_arm_fatal_error>
    377c:	e7b6      	b.n	36ec <z_arm_fault+0x48>
    377e:	bf00      	nop
    3780:	e000ed00 	.word	0xe000ed00
    3784:	0000d21c 	.word	0x0000d21c
    3788:	0000c26c 	.word	0x0000c26c
    378c:	0000d094 	.word	0x0000d094
    3790:	0000d248 	.word	0x0000d248
    3794:	0000c478 	.word	0x0000c478
    3798:	0000d25c 	.word	0x0000d25c

0000379c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    379c:	4a02      	ldr	r2, [pc, #8]	; (37a8 <z_arm_fault_init+0xc>)
    379e:	6953      	ldr	r3, [r2, #20]
    37a0:	f043 0310 	orr.w	r3, r3, #16
    37a4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    37a6:	4770      	bx	lr
    37a8:	e000ed00 	.word	0xe000ed00

000037ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    37ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    37b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    37b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    37b6:	4672      	mov	r2, lr
	bl z_arm_fault
    37b8:	f7ff ff74 	bl	36a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    37bc:	bd01      	pop	{r0, pc}
    37be:	bf00      	nop

000037c0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    37c0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    37c2:	e006      	b.n	37d2 <z_arm_interrupt_init+0x12>
    37c4:	f002 010f 	and.w	r1, r2, #15
    37c8:	4b09      	ldr	r3, [pc, #36]	; (37f0 <z_arm_interrupt_init+0x30>)
    37ca:	440b      	add	r3, r1
    37cc:	2120      	movs	r1, #32
    37ce:	7619      	strb	r1, [r3, #24]
    37d0:	3201      	adds	r2, #1
    37d2:	2a2f      	cmp	r2, #47	; 0x2f
    37d4:	dc0a      	bgt.n	37ec <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    37d6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    37d8:	2b00      	cmp	r3, #0
    37da:	dbf3      	blt.n	37c4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    37e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    37e4:	2120      	movs	r1, #32
    37e6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    37ea:	e7f1      	b.n	37d0 <z_arm_interrupt_init+0x10>
	}
}
    37ec:	4770      	bx	lr
    37ee:	bf00      	nop
    37f0:	e000ecfc 	.word	0xe000ecfc

000037f4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    37f4:	2000      	movs	r0, #0
    msr CONTROL, r0
    37f6:	f380 8814 	msr	CONTROL, r0
    isb
    37fa:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    37fe:	f008 fbe3 	bl	bfc8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3802:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3804:	490d      	ldr	r1, [pc, #52]	; (383c <__start+0x48>)
    str r0, [r1]
    3806:	6008      	str	r0, [r1, #0]
    dsb
    3808:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    380c:	480c      	ldr	r0, [pc, #48]	; (3840 <__start+0x4c>)
    msr msp, r0
    380e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3812:	f000 f82d 	bl	3870 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3816:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3818:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    381c:	4809      	ldr	r0, [pc, #36]	; (3844 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    381e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3822:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3824:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3828:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    382c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    382e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3830:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3834:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3838:	f7ff fb3a 	bl	2eb0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    383c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3840:	20005700 	.word	0x20005700
    ldr r0, =z_interrupt_stacks
    3844:	20005880 	.word	0x20005880

00003848 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3848:	4b08      	ldr	r3, [pc, #32]	; (386c <z_arm_clear_arm_mpu_config+0x24>)
    384a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    384e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    3852:	2300      	movs	r3, #0
    3854:	e006      	b.n	3864 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3856:	4a05      	ldr	r2, [pc, #20]	; (386c <z_arm_clear_arm_mpu_config+0x24>)
    3858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    385c:	2100      	movs	r1, #0
    385e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3862:	3301      	adds	r3, #1
    3864:	4283      	cmp	r3, r0
    3866:	dbf6      	blt.n	3856 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    3868:	4770      	bx	lr
    386a:	bf00      	nop
    386c:	e000ed00 	.word	0xe000ed00

00003870 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3870:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3872:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3874:	2400      	movs	r4, #0
    3876:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    387a:	f7ff ffe5 	bl	3848 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    387e:	4623      	mov	r3, r4
    3880:	e008      	b.n	3894 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3882:	f103 0120 	add.w	r1, r3, #32
    3886:	4a0e      	ldr	r2, [pc, #56]	; (38c0 <z_arm_init_arch_hw_at_boot+0x50>)
    3888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    388c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3890:	3301      	adds	r3, #1
    3892:	b2db      	uxtb	r3, r3
    3894:	2b07      	cmp	r3, #7
    3896:	d9f4      	bls.n	3882 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3898:	2300      	movs	r3, #0
    389a:	e008      	b.n	38ae <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    389c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    38a0:	4a07      	ldr	r2, [pc, #28]	; (38c0 <z_arm_init_arch_hw_at_boot+0x50>)
    38a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    38a6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    38aa:	3301      	adds	r3, #1
    38ac:	b2db      	uxtb	r3, r3
    38ae:	2b07      	cmp	r3, #7
    38b0:	d9f4      	bls.n	389c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    38b2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    38b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38b8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    38bc:	bd10      	pop	{r4, pc}
    38be:	bf00      	nop
    38c0:	e000e100 	.word	0xe000e100

000038c4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    38c4:	b508      	push	{r3, lr}
	if (_current == thread) {
    38c6:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <z_impl_k_thread_abort+0x2c>)
    38c8:	689b      	ldr	r3, [r3, #8]
    38ca:	4283      	cmp	r3, r0
    38cc:	d002      	beq.n	38d4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    38ce:	f005 fe5d 	bl	958c <z_thread_abort>
}
    38d2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    38d4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    38d8:	2b00      	cmp	r3, #0
    38da:	d0f8      	beq.n	38ce <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    38dc:	4b05      	ldr	r3, [pc, #20]	; (38f4 <z_impl_k_thread_abort+0x30>)
    38de:	685a      	ldr	r2, [r3, #4]
    38e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    38e4:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    38e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    38e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    38ec:	625a      	str	r2, [r3, #36]	; 0x24
    38ee:	e7ee      	b.n	38ce <z_impl_k_thread_abort+0xa>
    38f0:	200050ac 	.word	0x200050ac
    38f4:	e000ed00 	.word	0xe000ed00

000038f8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    38f8:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    38fa:	4b03      	ldr	r3, [pc, #12]	; (3908 <z_arm_configure_static_mpu_regions+0x10>)
    38fc:	4a03      	ldr	r2, [pc, #12]	; (390c <z_arm_configure_static_mpu_regions+0x14>)
    38fe:	2101      	movs	r1, #1
    3900:	4803      	ldr	r0, [pc, #12]	; (3910 <z_arm_configure_static_mpu_regions+0x18>)
    3902:	f000 f8bb 	bl	3a7c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3906:	bd08      	pop	{r3, pc}
    3908:	20040000 	.word	0x20040000
    390c:	20000000 	.word	0x20000000
    3910:	0000d2a0 	.word	0x0000d2a0

00003914 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3914:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3916:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    391a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    391c:	4804      	ldr	r0, [pc, #16]	; (3930 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    391e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3920:	2320      	movs	r3, #32
    3922:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3924:	4b03      	ldr	r3, [pc, #12]	; (3934 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3926:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3928:	2101      	movs	r1, #1
    392a:	f000 f8c9 	bl	3ac0 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    392e:	bd08      	pop	{r3, pc}
    3930:	20004b44 	.word	0x20004b44
    3934:	150b0000 	.word	0x150b0000

00003938 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3938:	4a08      	ldr	r2, [pc, #32]	; (395c <region_init+0x24>)
    393a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    393e:	680b      	ldr	r3, [r1, #0]
    3940:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3944:	4303      	orrs	r3, r0
    3946:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    394a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    394e:	688b      	ldr	r3, [r1, #8]
    3950:	f043 0301 	orr.w	r3, r3, #1
    3954:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    3958:	4770      	bx	lr
    395a:	bf00      	nop
    395c:	e000ed00 	.word	0xe000ed00

00003960 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3960:	b510      	push	{r4, lr}
    3962:	b084      	sub	sp, #16
    3964:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3966:	2807      	cmp	r0, #7
    3968:	d804      	bhi.n	3974 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    396a:	f7ff ffe5 	bl	3938 <region_init>

	return index;
    396e:	4620      	mov	r0, r4
}
    3970:	b004      	add	sp, #16
    3972:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3974:	9003      	str	r0, [sp, #12]
    3976:	4b06      	ldr	r3, [pc, #24]	; (3990 <region_allocate_and_init+0x30>)
    3978:	9302      	str	r3, [sp, #8]
    397a:	2000      	movs	r0, #0
    397c:	9001      	str	r0, [sp, #4]
    397e:	9000      	str	r0, [sp, #0]
    3980:	4603      	mov	r3, r0
    3982:	2201      	movs	r2, #1
    3984:	4903      	ldr	r1, [pc, #12]	; (3994 <region_allocate_and_init+0x34>)
    3986:	f007 f9d3 	bl	ad30 <z_log_msg2_runtime_create>
		return -EINVAL;
    398a:	f06f 0015 	mvn.w	r0, #21
    398e:	e7ef      	b.n	3970 <region_allocate_and_init+0x10>
    3990:	0000d2ac 	.word	0x0000d2ac
    3994:	0000c264 	.word	0x0000c264

00003998 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    399c:	b085      	sub	sp, #20
    399e:	4680      	mov	r8, r0
    39a0:	460f      	mov	r7, r1
    39a2:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    39a4:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    39a6:	2500      	movs	r5, #0
    39a8:	e009      	b.n	39be <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    39aa:	4621      	mov	r1, r4
    39ac:	b2f0      	uxtb	r0, r6
    39ae:	f007 f9ce 	bl	ad4e <mpu_configure_region>
    39b2:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    39b4:	f110 0f16 	cmn.w	r0, #22
    39b8:	d01e      	beq.n	39f8 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    39ba:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    39bc:	3501      	adds	r5, #1
    39be:	42bd      	cmp	r5, r7
    39c0:	da1a      	bge.n	39f8 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    39c2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    39c6:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    39ca:	6862      	ldr	r2, [r4, #4]
    39cc:	2a00      	cmp	r2, #0
    39ce:	d0f5      	beq.n	39bc <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    39d0:	f1b9 0f00 	cmp.w	r9, #0
    39d4:	d0e9      	beq.n	39aa <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    39d6:	4620      	mov	r0, r4
    39d8:	f007 f999 	bl	ad0e <mpu_partition_is_valid>
		if (do_sanity_check &&
    39dc:	2800      	cmp	r0, #0
    39de:	d1e4      	bne.n	39aa <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    39e0:	9503      	str	r5, [sp, #12]
    39e2:	4b07      	ldr	r3, [pc, #28]	; (3a00 <mpu_configure_regions+0x68>)
    39e4:	9302      	str	r3, [sp, #8]
    39e6:	9001      	str	r0, [sp, #4]
    39e8:	9000      	str	r0, [sp, #0]
    39ea:	4603      	mov	r3, r0
    39ec:	2201      	movs	r2, #1
    39ee:	4905      	ldr	r1, [pc, #20]	; (3a04 <mpu_configure_regions+0x6c>)
    39f0:	f007 f99e 	bl	ad30 <z_log_msg2_runtime_create>
			return -EINVAL;
    39f4:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    39f8:	4630      	mov	r0, r6
    39fa:	b005      	add	sp, #20
    39fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a00:	0000d2d4 	.word	0x0000d2d4
    3a04:	0000c264 	.word	0x0000c264

00003a08 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3a08:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3a0a:	4c03      	ldr	r4, [pc, #12]	; (3a18 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3a0c:	2301      	movs	r3, #1
    3a0e:	7822      	ldrb	r2, [r4, #0]
    3a10:	f7ff ffc2 	bl	3998 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3a14:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	200052e9 	.word	0x200052e9

00003a1c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3a1c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3a1e:	2300      	movs	r3, #0
    3a20:	4a09      	ldr	r2, [pc, #36]	; (3a48 <mpu_configure_dynamic_mpu_regions+0x2c>)
    3a22:	7812      	ldrb	r2, [r2, #0]
    3a24:	f7ff ffb8 	bl	3998 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3a28:	f110 0f16 	cmn.w	r0, #22
    3a2c:	d00a      	beq.n	3a44 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3a2e:	4603      	mov	r3, r0
    3a30:	e006      	b.n	3a40 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    3a32:	4a06      	ldr	r2, [pc, #24]	; (3a4c <mpu_configure_dynamic_mpu_regions+0x30>)
    3a34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3a38:	2100      	movs	r1, #0
    3a3a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3a3e:	3301      	adds	r3, #1
    3a40:	2b07      	cmp	r3, #7
    3a42:	ddf6      	ble.n	3a32 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    3a44:	bd08      	pop	{r3, pc}
    3a46:	bf00      	nop
    3a48:	200052e9 	.word	0x200052e9
    3a4c:	e000ed00 	.word	0xe000ed00

00003a50 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3a50:	4b04      	ldr	r3, [pc, #16]	; (3a64 <arm_core_mpu_enable+0x14>)
    3a52:	2205      	movs	r2, #5
    3a54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a5c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	e000ed00 	.word	0xe000ed00

00003a68 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3a68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3a6c:	4b02      	ldr	r3, [pc, #8]	; (3a78 <arm_core_mpu_disable+0x10>)
    3a6e:	2200      	movs	r2, #0
    3a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	e000ed00 	.word	0xe000ed00

00003a7c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3a7c:	b538      	push	{r3, r4, r5, lr}
    3a7e:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3a80:	f7ff ffc2 	bl	3a08 <mpu_configure_static_mpu_regions>
    3a84:	f110 0f16 	cmn.w	r0, #22
    3a88:	d000      	beq.n	3a8c <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3a8a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3a8c:	4d08      	ldr	r5, [pc, #32]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a8e:	f240 1311 	movw	r3, #273	; 0x111
    3a92:	462a      	mov	r2, r5
    3a94:	4907      	ldr	r1, [pc, #28]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a96:	4808      	ldr	r0, [pc, #32]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a98:	f007 f822 	bl	aae0 <assert_print>
    3a9c:	4621      	mov	r1, r4
    3a9e:	4807      	ldr	r0, [pc, #28]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3aa0:	f007 f81e 	bl	aae0 <assert_print>
    3aa4:	f240 1111 	movw	r1, #273	; 0x111
    3aa8:	4628      	mov	r0, r5
    3aaa:	f007 f812 	bl	aad2 <assert_post_action>
}
    3aae:	e7ec      	b.n	3a8a <arm_core_mpu_configure_static_mpu_regions+0xe>
    3ab0:	0000d2f8 	.word	0x0000d2f8
    3ab4:	0000cb38 	.word	0x0000cb38
    3ab8:	0000c478 	.word	0x0000c478
    3abc:	0000d330 	.word	0x0000d330

00003ac0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3ac0:	b538      	push	{r3, r4, r5, lr}
    3ac2:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    3ac4:	f7ff ffaa 	bl	3a1c <mpu_configure_dynamic_mpu_regions>
    3ac8:	f110 0f16 	cmn.w	r0, #22
    3acc:	d000      	beq.n	3ad0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3ace:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3ad0:	4d08      	ldr	r5, [pc, #32]	; (3af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    3ad2:	f44f 7398 	mov.w	r3, #304	; 0x130
    3ad6:	462a      	mov	r2, r5
    3ad8:	4907      	ldr	r1, [pc, #28]	; (3af8 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    3ada:	4808      	ldr	r0, [pc, #32]	; (3afc <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    3adc:	f007 f800 	bl	aae0 <assert_print>
    3ae0:	4621      	mov	r1, r4
    3ae2:	4807      	ldr	r0, [pc, #28]	; (3b00 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    3ae4:	f006 fffc 	bl	aae0 <assert_print>
    3ae8:	f44f 7198 	mov.w	r1, #304	; 0x130
    3aec:	4628      	mov	r0, r5
    3aee:	f006 fff0 	bl	aad2 <assert_post_action>
}
    3af2:	e7ec      	b.n	3ace <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    3af4:	0000d2f8 	.word	0x0000d2f8
    3af8:	0000cb38 	.word	0x0000cb38
    3afc:	0000c478 	.word	0x0000c478
    3b00:	0000d35c 	.word	0x0000d35c

00003b04 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3b04:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3b06:	4b24      	ldr	r3, [pc, #144]	; (3b98 <z_arm_mpu_init+0x94>)
    3b08:	681d      	ldr	r5, [r3, #0]
    3b0a:	2d08      	cmp	r5, #8
    3b0c:	d803      	bhi.n	3b16 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3b0e:	f7ff ffab 	bl	3a68 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b12:	2400      	movs	r4, #0
    3b14:	e01e      	b.n	3b54 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    3b16:	4c21      	ldr	r4, [pc, #132]	; (3b9c <z_arm_mpu_init+0x98>)
    3b18:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3b1c:	4622      	mov	r2, r4
    3b1e:	4920      	ldr	r1, [pc, #128]	; (3ba0 <z_arm_mpu_init+0x9c>)
    3b20:	4820      	ldr	r0, [pc, #128]	; (3ba4 <z_arm_mpu_init+0xa0>)
    3b22:	f006 ffdd 	bl	aae0 <assert_print>
    3b26:	2208      	movs	r2, #8
    3b28:	4629      	mov	r1, r5
    3b2a:	481f      	ldr	r0, [pc, #124]	; (3ba8 <z_arm_mpu_init+0xa4>)
    3b2c:	f006 ffd8 	bl	aae0 <assert_print>
    3b30:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3b34:	4620      	mov	r0, r4
    3b36:	f006 ffcc 	bl	aad2 <assert_post_action>
		return -1;
    3b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b3e:	e017      	b.n	3b70 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3b40:	4b15      	ldr	r3, [pc, #84]	; (3b98 <z_arm_mpu_init+0x94>)
    3b42:	6859      	ldr	r1, [r3, #4]
    3b44:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3b48:	0093      	lsls	r3, r2, #2
    3b4a:	4419      	add	r1, r3
    3b4c:	4620      	mov	r0, r4
    3b4e:	f7ff fef3 	bl	3938 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b52:	3401      	adds	r4, #1
    3b54:	42a5      	cmp	r5, r4
    3b56:	d8f3      	bhi.n	3b40 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3b58:	4b14      	ldr	r3, [pc, #80]	; (3bac <z_arm_mpu_init+0xa8>)
    3b5a:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3b5c:	f7ff ff78 	bl	3a50 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    3b60:	4b13      	ldr	r3, [pc, #76]	; (3bb0 <z_arm_mpu_init+0xac>)
    3b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    3b66:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3b6a:	2b08      	cmp	r3, #8
    3b6c:	d101      	bne.n	3b72 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3b6e:	2000      	movs	r0, #0
}
    3b70:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    3b72:	4c0a      	ldr	r4, [pc, #40]	; (3b9c <z_arm_mpu_init+0x98>)
    3b74:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3b78:	4622      	mov	r2, r4
    3b7a:	490e      	ldr	r1, [pc, #56]	; (3bb4 <z_arm_mpu_init+0xb0>)
    3b7c:	4809      	ldr	r0, [pc, #36]	; (3ba4 <z_arm_mpu_init+0xa0>)
    3b7e:	f006 ffaf 	bl	aae0 <assert_print>
    3b82:	480d      	ldr	r0, [pc, #52]	; (3bb8 <z_arm_mpu_init+0xb4>)
    3b84:	f006 ffac 	bl	aae0 <assert_print>
    3b88:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3b8c:	4620      	mov	r0, r4
    3b8e:	f006 ffa0 	bl	aad2 <assert_post_action>
	return 0;
    3b92:	2000      	movs	r0, #0
    3b94:	e7ec      	b.n	3b70 <z_arm_mpu_init+0x6c>
    3b96:	bf00      	nop
    3b98:	0000d598 	.word	0x0000d598
    3b9c:	0000d2f8 	.word	0x0000d2f8
    3ba0:	0000cb38 	.word	0x0000cb38
    3ba4:	0000c478 	.word	0x0000c478
    3ba8:	0000d38c 	.word	0x0000d38c
    3bac:	200052e9 	.word	0x200052e9
    3bb0:	e000ed00 	.word	0xe000ed00
    3bb4:	0000d3c0 	.word	0x0000d3c0
    3bb8:	0000d410 	.word	0x0000d410

00003bbc <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3bbc:	4b0d      	ldr	r3, [pc, #52]	; (3bf4 <malloc_prepare+0x38>)
    3bbe:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3bc2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3bca:	d301      	bcc.n	3bd0 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    3bcc:	2000      	movs	r0, #0
    3bce:	4770      	bx	lr
{
    3bd0:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3bd2:	4c09      	ldr	r4, [pc, #36]	; (3bf8 <malloc_prepare+0x3c>)
    3bd4:	2381      	movs	r3, #129	; 0x81
    3bd6:	4622      	mov	r2, r4
    3bd8:	4908      	ldr	r1, [pc, #32]	; (3bfc <malloc_prepare+0x40>)
    3bda:	4809      	ldr	r0, [pc, #36]	; (3c00 <malloc_prepare+0x44>)
    3bdc:	f006 ff80 	bl	aae0 <assert_print>
    3be0:	4808      	ldr	r0, [pc, #32]	; (3c04 <malloc_prepare+0x48>)
    3be2:	f006 ff7d 	bl	aae0 <assert_print>
    3be6:	2181      	movs	r1, #129	; 0x81
    3be8:	4620      	mov	r0, r4
    3bea:	f006 ff72 	bl	aad2 <assert_post_action>
}
    3bee:	2000      	movs	r0, #0
    3bf0:	bd10      	pop	{r4, pc}
    3bf2:	bf00      	nop
    3bf4:	200061a0 	.word	0x200061a0
    3bf8:	0000d434 	.word	0x0000d434
    3bfc:	0000d464 	.word	0x0000d464
    3c00:	0000c478 	.word	0x0000c478
    3c04:	0000d4ac 	.word	0x0000d4ac

00003c08 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3c08:	4b01      	ldr	r3, [pc, #4]	; (3c10 <__stdout_hook_install+0x8>)
    3c0a:	6018      	str	r0, [r3, #0]
}
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop
    3c10:	2000402c 	.word	0x2000402c

00003c14 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    3c14:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    3c16:	4b08      	ldr	r3, [pc, #32]	; (3c38 <_sbrk+0x24>)
    3c18:	6819      	ldr	r1, [r3, #0]
    3c1a:	4b08      	ldr	r3, [pc, #32]	; (3c3c <_sbrk+0x28>)
    3c1c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    3c1e:	440a      	add	r2, r1
    3c20:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3c24:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3c28:	429a      	cmp	r2, r3
    3c2a:	d202      	bcs.n	3c32 <_sbrk+0x1e>
		heap_sz += count;
    3c2c:	4b02      	ldr	r3, [pc, #8]	; (3c38 <_sbrk+0x24>)
    3c2e:	601a      	str	r2, [r3, #0]
		ret = ptr;
    3c30:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    3c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    3c36:	4770      	bx	lr
    3c38:	20004b50 	.word	0x20004b50
    3c3c:	200061a0 	.word	0x200061a0

00003c40 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    3c40:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3c42:	4604      	mov	r4, r0
    3c44:	b138      	cbz	r0, 3c56 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    3c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c4e:	4620      	mov	r0, r4
    3c50:	f003 ff76 	bl	7b40 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    3c54:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3c56:	4d07      	ldr	r5, [pc, #28]	; (3c74 <__retarget_lock_acquire_recursive+0x34>)
    3c58:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    3c5c:	462a      	mov	r2, r5
    3c5e:	4906      	ldr	r1, [pc, #24]	; (3c78 <__retarget_lock_acquire_recursive+0x38>)
    3c60:	4806      	ldr	r0, [pc, #24]	; (3c7c <__retarget_lock_acquire_recursive+0x3c>)
    3c62:	f006 ff3d 	bl	aae0 <assert_print>
    3c66:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    3c6a:	4628      	mov	r0, r5
    3c6c:	f006 ff31 	bl	aad2 <assert_post_action>
    3c70:	e7e9      	b.n	3c46 <__retarget_lock_acquire_recursive+0x6>
    3c72:	bf00      	nop
    3c74:	0000d434 	.word	0x0000d434
    3c78:	0000d534 	.word	0x0000d534
    3c7c:	0000c478 	.word	0x0000c478

00003c80 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    3c80:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3c82:	4604      	mov	r4, r0
    3c84:	b118      	cbz	r0, 3c8e <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    3c86:	4620      	mov	r0, r4
    3c88:	f004 f87a 	bl	7d80 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    3c8c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3c8e:	4d07      	ldr	r5, [pc, #28]	; (3cac <__retarget_lock_release_recursive+0x2c>)
    3c90:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    3c94:	462a      	mov	r2, r5
    3c96:	4906      	ldr	r1, [pc, #24]	; (3cb0 <__retarget_lock_release_recursive+0x30>)
    3c98:	4806      	ldr	r0, [pc, #24]	; (3cb4 <__retarget_lock_release_recursive+0x34>)
    3c9a:	f006 ff21 	bl	aae0 <assert_print>
    3c9e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    3ca2:	4628      	mov	r0, r5
    3ca4:	f006 ff15 	bl	aad2 <assert_post_action>
    3ca8:	e7ed      	b.n	3c86 <__retarget_lock_release_recursive+0x6>
    3caa:	bf00      	nop
    3cac:	0000d434 	.word	0x0000d434
    3cb0:	0000d534 	.word	0x0000d534
    3cb4:	0000c478 	.word	0x0000c478

00003cb8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3cb8:	b510      	push	{r4, lr}
	__asm__ volatile(
    3cba:	f04f 0320 	mov.w	r3, #32
    3cbe:	f3ef 8411 	mrs	r4, BASEPRI
    3cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    3cc6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3cca:	2301      	movs	r3, #1
    3ccc:	4a0c      	ldr	r2, [pc, #48]	; (3d00 <nordicsemi_nrf52_init+0x48>)
    3cce:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3cd6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3cda:	f007 f85a 	bl	ad92 <nrf52_errata_197>
    3cde:	b120      	cbz	r0, 3cea <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ce4:	2201      	movs	r2, #1
    3ce6:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cee:	2201      	movs	r2, #1
    3cf0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3cf4:	f384 8811 	msr	BASEPRI, r4
    3cf8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3cfc:	2000      	movs	r0, #0
    3cfe:	bd10      	pop	{r4, pc}
    3d00:	4001e000 	.word	0x4001e000

00003d04 <sys_arch_reboot>:
    *p_gpregret = val;
    3d04:	b2c0      	uxtb	r0, r0
    3d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d0a:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3d0e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3d12:	4905      	ldr	r1, [pc, #20]	; (3d28 <sys_arch_reboot+0x24>)
    3d14:	68ca      	ldr	r2, [r1, #12]
    3d16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3d1a:	4b04      	ldr	r3, [pc, #16]	; (3d2c <sys_arch_reboot+0x28>)
    3d1c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3d1e:	60cb      	str	r3, [r1, #12]
    3d20:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3d24:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3d26:	e7fd      	b.n	3d24 <sys_arch_reboot+0x20>
    3d28:	e000ed00 	.word	0xe000ed00
    3d2c:	05fa0004 	.word	0x05fa0004

00003d30 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3d30:	b130      	cbz	r0, 3d40 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3d32:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3d34:	0180      	lsls	r0, r0, #6
    3d36:	4b03      	ldr	r3, [pc, #12]	; (3d44 <arch_busy_wait+0x14>)
    3d38:	f043 0301 	orr.w	r3, r3, #1
    3d3c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3d3e:	bd08      	pop	{r3, pc}
    3d40:	4770      	bx	lr
    3d42:	bf00      	nop
    3d44:	0000c320 	.word	0x0000c320

00003d48 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3d48:	4800      	ldr	r0, [pc, #0]	; (3d4c <get_hf_flags+0x4>)
    3d4a:	4770      	bx	lr
    3d4c:	20004bac 	.word	0x20004bac

00003d50 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3d50:	4b01      	ldr	r3, [pc, #4]	; (3d58 <get_subsys+0x8>)
    3d52:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3d54:	1140      	asrs	r0, r0, #5
    3d56:	4770      	bx	lr
    3d58:	20004b64 	.word	0x20004b64

00003d5c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3d5c:	b530      	push	{r4, r5, lr}
    3d5e:	b083      	sub	sp, #12
    3d60:	4605      	mov	r5, r0
    3d62:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3d64:	f7ff fff4 	bl	3d50 <get_subsys>
    3d68:	4601      	mov	r1, r0
    3d6a:	2340      	movs	r3, #64	; 0x40
    3d6c:	9300      	str	r3, [sp, #0]
    3d6e:	4623      	mov	r3, r4
    3d70:	4a05      	ldr	r2, [pc, #20]	; (3d88 <onoff_start+0x2c>)
    3d72:	4806      	ldr	r0, [pc, #24]	; (3d8c <onoff_start+0x30>)
    3d74:	f007 f89c 	bl	aeb0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3d78:	1e01      	subs	r1, r0, #0
    3d7a:	db01      	blt.n	3d80 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3d7c:	b003      	add	sp, #12
    3d7e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3d80:	4628      	mov	r0, r5
    3d82:	47a0      	blx	r4
}
    3d84:	e7fa      	b.n	3d7c <onoff_start+0x20>
    3d86:	bf00      	nop
    3d88:	0000aef9 	.word	0x0000aef9
    3d8c:	0000c04c 	.word	0x0000c04c

00003d90 <generic_hfclk_stop>:
{
    3d90:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d92:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <generic_hfclk_stop+0x2c>)
    3d94:	f3bf 8f5b 	dmb	ish
    3d98:	e853 2f00 	ldrex	r2, [r3]
    3d9c:	f022 0102 	bic.w	r1, r2, #2
    3da0:	e843 1000 	strex	r0, r1, [r3]
    3da4:	2800      	cmp	r0, #0
    3da6:	d1f7      	bne.n	3d98 <generic_hfclk_stop+0x8>
    3da8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3dac:	f012 0f01 	tst.w	r2, #1
    3db0:	d000      	beq.n	3db4 <generic_hfclk_stop+0x24>
}
    3db2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3db4:	f007 f8b2 	bl	af1c <hfclk_stop>
    3db8:	e7fb      	b.n	3db2 <generic_hfclk_stop+0x22>
    3dba:	bf00      	nop
    3dbc:	20004bbc 	.word	0x20004bbc

00003dc0 <get_status>:
{
    3dc0:	b570      	push	{r4, r5, r6, lr}
    3dc2:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3dc4:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3dc6:	2c01      	cmp	r4, #1
    3dc8:	d807      	bhi.n	3dda <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3dca:	4621      	mov	r1, r4
    3dcc:	4628      	mov	r0, r5
    3dce:	f007 f802 	bl	add6 <get_sub_data>
    3dd2:	6880      	ldr	r0, [r0, #8]
}
    3dd4:	f000 0007 	and.w	r0, r0, #7
    3dd8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3dda:	4e06      	ldr	r6, [pc, #24]	; (3df4 <get_status+0x34>)
    3ddc:	2379      	movs	r3, #121	; 0x79
    3dde:	4632      	mov	r2, r6
    3de0:	4905      	ldr	r1, [pc, #20]	; (3df8 <get_status+0x38>)
    3de2:	4806      	ldr	r0, [pc, #24]	; (3dfc <get_status+0x3c>)
    3de4:	f006 fe7c 	bl	aae0 <assert_print>
    3de8:	2179      	movs	r1, #121	; 0x79
    3dea:	4630      	mov	r0, r6
    3dec:	f006 fe71 	bl	aad2 <assert_post_action>
    3df0:	e7eb      	b.n	3dca <get_status+0xa>
    3df2:	bf00      	nop
    3df4:	0000d5bc 	.word	0x0000d5bc
    3df8:	0000d5fc 	.word	0x0000d5fc
    3dfc:	0000c478 	.word	0x0000c478

00003e00 <stop>:
{
    3e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e04:	4607      	mov	r7, r0
    3e06:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3e08:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3e0a:	4621      	mov	r1, r4
    3e0c:	f006 ffe3 	bl	add6 <get_sub_data>
    3e10:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e12:	2c01      	cmp	r4, #1
    3e14:	d80f      	bhi.n	3e36 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3e16:	4631      	mov	r1, r6
    3e18:	f105 0008 	add.w	r0, r5, #8
    3e1c:	f006 ffec 	bl	adf8 <set_off_state>
	if (err < 0) {
    3e20:	2800      	cmp	r0, #0
    3e22:	db06      	blt.n	3e32 <stop+0x32>
	get_sub_config(dev, type)->stop();
    3e24:	4621      	mov	r1, r4
    3e26:	4638      	mov	r0, r7
    3e28:	f006 ffdc 	bl	ade4 <get_sub_config>
    3e2c:	6843      	ldr	r3, [r0, #4]
    3e2e:	4798      	blx	r3
	return 0;
    3e30:	2000      	movs	r0, #0
}
    3e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e36:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3e54 <stop+0x54>
    3e3a:	f240 134d 	movw	r3, #333	; 0x14d
    3e3e:	4642      	mov	r2, r8
    3e40:	4905      	ldr	r1, [pc, #20]	; (3e58 <stop+0x58>)
    3e42:	4806      	ldr	r0, [pc, #24]	; (3e5c <stop+0x5c>)
    3e44:	f006 fe4c 	bl	aae0 <assert_print>
    3e48:	f240 114d 	movw	r1, #333	; 0x14d
    3e4c:	4640      	mov	r0, r8
    3e4e:	f006 fe40 	bl	aad2 <assert_post_action>
    3e52:	e7e0      	b.n	3e16 <stop+0x16>
    3e54:	0000d5bc 	.word	0x0000d5bc
    3e58:	0000d5fc 	.word	0x0000d5fc
    3e5c:	0000c478 	.word	0x0000c478

00003e60 <onoff_stop>:
{
    3e60:	b538      	push	{r3, r4, r5, lr}
    3e62:	4605      	mov	r5, r0
    3e64:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3e66:	f7ff ff73 	bl	3d50 <get_subsys>
    3e6a:	4601      	mov	r1, r0
    3e6c:	2240      	movs	r2, #64	; 0x40
    3e6e:	4803      	ldr	r0, [pc, #12]	; (3e7c <onoff_stop+0x1c>)
    3e70:	f7ff ffc6 	bl	3e00 <stop>
    3e74:	4601      	mov	r1, r0
	notify(mgr, res);
    3e76:	4628      	mov	r0, r5
    3e78:	47a0      	blx	r4
}
    3e7a:	bd38      	pop	{r3, r4, r5, pc}
    3e7c:	0000c04c 	.word	0x0000c04c

00003e80 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3e80:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3e82:	2801      	cmp	r0, #1
    3e84:	d01d      	beq.n	3ec2 <clock_event_handler+0x42>
    3e86:	2803      	cmp	r0, #3
    3e88:	d020      	beq.n	3ecc <clock_event_handler+0x4c>
    3e8a:	b168      	cbz	r0, 3ea8 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3e8c:	4c16      	ldr	r4, [pc, #88]	; (3ee8 <clock_event_handler+0x68>)
    3e8e:	f240 2362 	movw	r3, #610	; 0x262
    3e92:	4622      	mov	r2, r4
    3e94:	4915      	ldr	r1, [pc, #84]	; (3eec <clock_event_handler+0x6c>)
    3e96:	4816      	ldr	r0, [pc, #88]	; (3ef0 <clock_event_handler+0x70>)
    3e98:	f006 fe22 	bl	aae0 <assert_print>
    3e9c:	f240 2162 	movw	r1, #610	; 0x262
    3ea0:	4620      	mov	r0, r4
    3ea2:	f006 fe16 	bl	aad2 <assert_post_action>
		break;
	}
}
    3ea6:	e010      	b.n	3eca <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3ea8:	2100      	movs	r1, #0
    3eaa:	4812      	ldr	r0, [pc, #72]	; (3ef4 <clock_event_handler+0x74>)
    3eac:	f006 ff93 	bl	add6 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3eb0:	6883      	ldr	r3, [r0, #8]
    3eb2:	f013 0f07 	tst.w	r3, #7
    3eb6:	d108      	bne.n	3eca <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3eb8:	2100      	movs	r1, #0
    3eba:	480e      	ldr	r0, [pc, #56]	; (3ef4 <clock_event_handler+0x74>)
    3ebc:	f006 ffe6 	bl	ae8c <clkstarted_handle>
    3ec0:	e003      	b.n	3eca <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3ec2:	2101      	movs	r1, #1
    3ec4:	480b      	ldr	r0, [pc, #44]	; (3ef4 <clock_event_handler+0x74>)
    3ec6:	f006 ffe1 	bl	ae8c <clkstarted_handle>
}
    3eca:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3ecc:	4c06      	ldr	r4, [pc, #24]	; (3ee8 <clock_event_handler+0x68>)
    3ece:	f240 235e 	movw	r3, #606	; 0x25e
    3ed2:	4622      	mov	r2, r4
    3ed4:	4905      	ldr	r1, [pc, #20]	; (3eec <clock_event_handler+0x6c>)
    3ed6:	4806      	ldr	r0, [pc, #24]	; (3ef0 <clock_event_handler+0x70>)
    3ed8:	f006 fe02 	bl	aae0 <assert_print>
    3edc:	f240 215e 	movw	r1, #606	; 0x25e
    3ee0:	4620      	mov	r0, r4
    3ee2:	f006 fdf6 	bl	aad2 <assert_post_action>
		break;
    3ee6:	e7f0      	b.n	3eca <clock_event_handler+0x4a>
    3ee8:	0000d5bc 	.word	0x0000d5bc
    3eec:	0000cb38 	.word	0x0000cb38
    3ef0:	0000c478 	.word	0x0000c478
    3ef4:	0000c04c 	.word	0x0000c04c

00003ef8 <api_blocking_start>:
{
    3ef8:	b500      	push	{lr}
    3efa:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3efc:	f8cd d000 	str.w	sp, [sp]
    3f00:	f8cd d004 	str.w	sp, [sp, #4]
    3f04:	2300      	movs	r3, #0
    3f06:	9302      	str	r3, [sp, #8]
    3f08:	2301      	movs	r3, #1
    3f0a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3f0c:	466b      	mov	r3, sp
    3f0e:	4a07      	ldr	r2, [pc, #28]	; (3f2c <api_blocking_start+0x34>)
    3f10:	f006 ffea 	bl	aee8 <api_start>
	if (err < 0) {
    3f14:	2800      	cmp	r0, #0
    3f16:	db05      	blt.n	3f24 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3f18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3f1c:	2300      	movs	r3, #0
    3f1e:	4668      	mov	r0, sp
    3f20:	f004 f846 	bl	7fb0 <z_impl_k_sem_take>
}
    3f24:	b005      	add	sp, #20
    3f26:	f85d fb04 	ldr.w	pc, [sp], #4
    3f2a:	bf00      	nop
    3f2c:	0000af3b 	.word	0x0000af3b

00003f30 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f34:	2200      	movs	r2, #0
    3f36:	2101      	movs	r1, #1
    3f38:	4610      	mov	r0, r2
    3f3a:	f7fe ff7f 	bl	2e3c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3f3e:	4811      	ldr	r0, [pc, #68]	; (3f84 <clk_init+0x54>)
    3f40:	f001 ff24 	bl	5d8c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3f44:	4b10      	ldr	r3, [pc, #64]	; (3f88 <clk_init+0x58>)
    3f46:	4298      	cmp	r0, r3
    3f48:	d119      	bne.n	3f7e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3f4a:	f001 ff49 	bl	5de0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3f4e:	2400      	movs	r4, #0
    3f50:	2c01      	cmp	r4, #1
    3f52:	d812      	bhi.n	3f7a <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3f54:	4621      	mov	r1, r4
    3f56:	4630      	mov	r0, r6
    3f58:	f006 ff3d 	bl	add6 <get_sub_data>
    3f5c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3f5e:	4621      	mov	r1, r4
    3f60:	4630      	mov	r0, r6
    3f62:	f006 ff45 	bl	adf0 <get_onoff_manager>
    3f66:	4909      	ldr	r1, [pc, #36]	; (3f8c <clk_init+0x5c>)
    3f68:	f006 fd3f 	bl	a9ea <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3f6c:	2800      	cmp	r0, #0
    3f6e:	db05      	blt.n	3f7c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3f70:	2301      	movs	r3, #1
    3f72:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3f74:	441c      	add	r4, r3
    3f76:	b2e4      	uxtb	r4, r4
    3f78:	e7ea      	b.n	3f50 <clk_init+0x20>
	}

	return 0;
    3f7a:	2000      	movs	r0, #0
}
    3f7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3f7e:	f06f 0004 	mvn.w	r0, #4
    3f82:	e7fb      	b.n	3f7c <clk_init+0x4c>
    3f84:	00003e81 	.word	0x00003e81
    3f88:	0bad0000 	.word	0x0bad0000
    3f8c:	0000d678 	.word	0x0000d678

00003f90 <lfclk_spinwait>:
{
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f94:	2801      	cmp	r0, #1
    3f96:	d107      	bne.n	3fa8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f9c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3fa0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3fa4:	2b01      	cmp	r3, #1
    3fa6:	d05a      	beq.n	405e <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3fa8:	f007 ff14 	bl	bdd4 <k_is_in_isr>
    3fac:	b928      	cbnz	r0, 3fba <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3fae:	4b2f      	ldr	r3, [pc, #188]	; (406c <lfclk_spinwait+0xdc>)
    3fb0:	781b      	ldrb	r3, [r3, #0]
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d043      	beq.n	403e <lfclk_spinwait+0xae>
    3fb6:	2300      	movs	r3, #0
    3fb8:	e000      	b.n	3fbc <lfclk_spinwait+0x2c>
    3fba:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3fbc:	461c      	mov	r4, r3
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d03f      	beq.n	4042 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3fc2:	f04f 0320 	mov.w	r3, #32
    3fc6:	f3ef 8611 	mrs	r6, BASEPRI
    3fca:	f383 8812 	msr	BASEPRI_MAX, r3
    3fce:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3fd2:	b924      	cbnz	r4, 3fde <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fd8:	2202      	movs	r2, #2
    3fda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fe2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3fe6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3fea:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3fee:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3ff2:	d12d      	bne.n	4050 <lfclk_spinwait+0xc0>
    return false;
    3ff4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3ff6:	b11a      	cbz	r2, 4000 <lfclk_spinwait+0x70>
    3ff8:	2b01      	cmp	r3, #1
    3ffa:	d02b      	beq.n	4054 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3ffc:	2d01      	cmp	r5, #1
    3ffe:	d029      	beq.n	4054 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4000:	b30c      	cbz	r4, 4046 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4002:	4630      	mov	r0, r6
    4004:	f7fe feaa 	bl	2d5c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    400c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4010:	2b00      	cmp	r3, #0
    4012:	d1e4      	bne.n	3fde <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4018:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    401c:	2b00      	cmp	r3, #0
    401e:	d0de      	beq.n	3fde <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4024:	2200      	movs	r2, #0
    4026:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    402a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    402e:	2201      	movs	r2, #1
    4030:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4034:	490e      	ldr	r1, [pc, #56]	; (4070 <lfclk_spinwait+0xe0>)
    4036:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    403a:	609a      	str	r2, [r3, #8]
}
    403c:	e7cf      	b.n	3fde <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    403e:	2301      	movs	r3, #1
    4040:	e7bc      	b.n	3fbc <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    4042:	2600      	movs	r6, #0
    4044:	e7c5      	b.n	3fd2 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4046:	2021      	movs	r0, #33	; 0x21
    4048:	2100      	movs	r1, #0
    404a:	f005 fa4d 	bl	94e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    404e:	e7db      	b.n	4008 <lfclk_spinwait+0x78>
                return true;
    4050:	2201      	movs	r2, #1
    4052:	e7d0      	b.n	3ff6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    4054:	b124      	cbz	r4, 4060 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    4056:	f386 8811 	msr	BASEPRI, r6
    405a:	f3bf 8f6f 	isb	sy
}
    405e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4064:	2202      	movs	r2, #2
    4066:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    406a:	e7f8      	b.n	405e <lfclk_spinwait+0xce>
    406c:	200052ea 	.word	0x200052ea
    4070:	e000e100 	.word	0xe000e100

00004074 <generic_hfclk_start>:
{
    4074:	b510      	push	{r4, lr}
	__asm__ volatile(
    4076:	f04f 0320 	mov.w	r3, #32
    407a:	f3ef 8411 	mrs	r4, BASEPRI
    407e:	f383 8812 	msr	BASEPRI_MAX, r3
    4082:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4086:	4a13      	ldr	r2, [pc, #76]	; (40d4 <generic_hfclk_start+0x60>)
    4088:	6813      	ldr	r3, [r2, #0]
    408a:	f043 0302 	orr.w	r3, r3, #2
    408e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4090:	f013 0f01 	tst.w	r3, #1
    4094:	d108      	bne.n	40a8 <generic_hfclk_start+0x34>
	bool already_started = false;
    4096:	2300      	movs	r3, #0
	__asm__ volatile(
    4098:	f384 8811 	msr	BASEPRI, r4
    409c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    40a0:	b99b      	cbnz	r3, 40ca <generic_hfclk_start+0x56>
	hfclk_start();
    40a2:	f006 ff31 	bl	af08 <hfclk_start>
}
    40a6:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    40a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40ac:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    40b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    40b4:	f012 0f01 	tst.w	r2, #1
    40b8:	d101      	bne.n	40be <generic_hfclk_start+0x4a>
	bool already_started = false;
    40ba:	2300      	movs	r3, #0
    40bc:	e7ec      	b.n	4098 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    40be:	f7ff fe43 	bl	3d48 <get_hf_flags>
    40c2:	f006 fed0 	bl	ae66 <set_on_state>
			already_started = true;
    40c6:	2301      	movs	r3, #1
    40c8:	e7e6      	b.n	4098 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    40ca:	2100      	movs	r1, #0
    40cc:	4802      	ldr	r0, [pc, #8]	; (40d8 <generic_hfclk_start+0x64>)
    40ce:	f006 fedd 	bl	ae8c <clkstarted_handle>
		return;
    40d2:	e7e8      	b.n	40a6 <generic_hfclk_start+0x32>
    40d4:	20004bbc 	.word	0x20004bbc
    40d8:	0000c04c 	.word	0x0000c04c

000040dc <z_nrf_clock_control_lf_on>:
{
    40dc:	b538      	push	{r3, r4, r5, lr}
    40de:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    40e0:	4b1f      	ldr	r3, [pc, #124]	; (4160 <z_nrf_clock_control_lf_on+0x84>)
    40e2:	2101      	movs	r1, #1
    40e4:	f3bf 8f5b 	dmb	ish
    40e8:	e853 2f00 	ldrex	r2, [r3]
    40ec:	e843 1000 	strex	r0, r1, [r3]
    40f0:	2800      	cmp	r0, #0
    40f2:	d1f9      	bne.n	40e8 <z_nrf_clock_control_lf_on+0xc>
    40f4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    40f8:	b142      	cbz	r2, 410c <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    40fa:	b134      	cbz	r4, 410a <z_nrf_clock_control_lf_on+0x2e>
    40fc:	1e63      	subs	r3, r4, #1
    40fe:	b2db      	uxtb	r3, r3
    4100:	2b01      	cmp	r3, #1
    4102:	d81f      	bhi.n	4144 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    4104:	4620      	mov	r0, r4
    4106:	f7ff ff43 	bl	3f90 <lfclk_spinwait>
}
    410a:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    410c:	4815      	ldr	r0, [pc, #84]	; (4164 <z_nrf_clock_control_lf_on+0x88>)
    410e:	f006 fe6f 	bl	adf0 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4112:	4915      	ldr	r1, [pc, #84]	; (4168 <z_nrf_clock_control_lf_on+0x8c>)
    4114:	2300      	movs	r3, #0
    4116:	604b      	str	r3, [r1, #4]
    4118:	608b      	str	r3, [r1, #8]
    411a:	60cb      	str	r3, [r1, #12]
    411c:	2301      	movs	r3, #1
    411e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4120:	f7fc fff4 	bl	110c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4124:	2800      	cmp	r0, #0
    4126:	dae8      	bge.n	40fa <z_nrf_clock_control_lf_on+0x1e>
    4128:	4d10      	ldr	r5, [pc, #64]	; (416c <z_nrf_clock_control_lf_on+0x90>)
    412a:	f44f 7308 	mov.w	r3, #544	; 0x220
    412e:	462a      	mov	r2, r5
    4130:	490f      	ldr	r1, [pc, #60]	; (4170 <z_nrf_clock_control_lf_on+0x94>)
    4132:	4810      	ldr	r0, [pc, #64]	; (4174 <z_nrf_clock_control_lf_on+0x98>)
    4134:	f006 fcd4 	bl	aae0 <assert_print>
    4138:	f44f 7108 	mov.w	r1, #544	; 0x220
    413c:	4628      	mov	r0, r5
    413e:	f006 fcc8 	bl	aad2 <assert_post_action>
    4142:	e7da      	b.n	40fa <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    4144:	4c09      	ldr	r4, [pc, #36]	; (416c <z_nrf_clock_control_lf_on+0x90>)
    4146:	f240 2332 	movw	r3, #562	; 0x232
    414a:	4622      	mov	r2, r4
    414c:	490a      	ldr	r1, [pc, #40]	; (4178 <z_nrf_clock_control_lf_on+0x9c>)
    414e:	4809      	ldr	r0, [pc, #36]	; (4174 <z_nrf_clock_control_lf_on+0x98>)
    4150:	f006 fcc6 	bl	aae0 <assert_print>
    4154:	f240 2132 	movw	r1, #562	; 0x232
    4158:	4620      	mov	r0, r4
    415a:	f006 fcba 	bl	aad2 <assert_post_action>
    415e:	e7d4      	b.n	410a <z_nrf_clock_control_lf_on+0x2e>
    4160:	20004bc0 	.word	0x20004bc0
    4164:	0000c04c 	.word	0x0000c04c
    4168:	20004b54 	.word	0x20004b54
    416c:	0000d5bc 	.word	0x0000d5bc
    4170:	0000caa0 	.word	0x0000caa0
    4174:	0000c478 	.word	0x0000c478
    4178:	0000cb38 	.word	0x0000cb38

0000417c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    417c:	b510      	push	{r4, lr}
    417e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4180:	280a      	cmp	r0, #10
    4182:	d007      	beq.n	4194 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4184:	4b07      	ldr	r3, [pc, #28]	; (41a4 <console_out+0x28>)
    4186:	6818      	ldr	r0, [r3, #0]
    4188:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    418a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    418c:	69db      	ldr	r3, [r3, #28]
    418e:	4798      	blx	r3

	return c;
}
    4190:	4620      	mov	r0, r4
    4192:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4194:	4b03      	ldr	r3, [pc, #12]	; (41a4 <console_out+0x28>)
    4196:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4198:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    419a:	69db      	ldr	r3, [r3, #28]
    419c:	210d      	movs	r1, #13
    419e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    41a0:	e7f0      	b.n	4184 <console_out+0x8>
    41a2:	bf00      	nop
    41a4:	20004bc4 	.word	0x20004bc4

000041a8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    41a8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    41aa:	4c04      	ldr	r4, [pc, #16]	; (41bc <__data_size+0xc>)
    41ac:	4620      	mov	r0, r4
    41ae:	f7ff fd2b 	bl	3c08 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    41b2:	4620      	mov	r0, r4
    41b4:	f7fc fd10 	bl	bd8 <__printk_hook_install>
#endif
}
    41b8:	bd10      	pop	{r4, pc}
    41ba:	bf00      	nop
    41bc:	0000417d 	.word	0x0000417d

000041c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    41c0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    41c2:	4806      	ldr	r0, [pc, #24]	; (41dc <uart_console_init+0x1c>)
    41c4:	4b06      	ldr	r3, [pc, #24]	; (41e0 <uart_console_init+0x20>)
    41c6:	6018      	str	r0, [r3, #0]
    41c8:	f007 fda8 	bl	bd1c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    41cc:	b118      	cbz	r0, 41d6 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    41ce:	f7ff ffeb 	bl	41a8 <uart_console_hook_install>

	return 0;
    41d2:	2000      	movs	r0, #0
}
    41d4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    41d6:	f06f 0012 	mvn.w	r0, #18
    41da:	e7fb      	b.n	41d4 <uart_console_init+0x14>
    41dc:	0000c0ac 	.word	0x0000c0ac
    41e0:	20004bc4 	.word	0x20004bc4

000041e4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41e4:	b128      	cbz	r0, 41f2 <get_dev+0xe>
    41e6:	2801      	cmp	r0, #1
    41e8:	d101      	bne.n	41ee <get_dev+0xa>
    41ea:	4803      	ldr	r0, [pc, #12]	; (41f8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    41ec:	4770      	bx	lr
	const struct device *dev = NULL;
    41ee:	2000      	movs	r0, #0
    41f0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41f2:	4802      	ldr	r0, [pc, #8]	; (41fc <get_dev+0x18>)
    41f4:	4770      	bx	lr
    41f6:	bf00      	nop
    41f8:	0000c064 	.word	0x0000c064
    41fc:	0000c07c 	.word	0x0000c07c

00004200 <gpio_nrfx_manage_callback>:
{
    4200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4204:	4616      	mov	r6, r2
	return port->data;
    4206:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4208:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    420a:	460c      	mov	r4, r1
    420c:	b131      	cbz	r1, 421c <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    420e:	6863      	ldr	r3, [r4, #4]
    4210:	b1a3      	cbz	r3, 423c <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    4212:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4214:	2b00      	cmp	r3, #0
    4216:	d03b      	beq.n	4290 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4218:	2100      	movs	r1, #0
    421a:	e02a      	b.n	4272 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    421c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 42b4 <gpio_nrfx_manage_callback+0xb4>
    4220:	2324      	movs	r3, #36	; 0x24
    4222:	4642      	mov	r2, r8
    4224:	4924      	ldr	r1, [pc, #144]	; (42b8 <gpio_nrfx_manage_callback+0xb8>)
    4226:	4825      	ldr	r0, [pc, #148]	; (42bc <gpio_nrfx_manage_callback+0xbc>)
    4228:	f006 fc5a 	bl	aae0 <assert_print>
    422c:	4824      	ldr	r0, [pc, #144]	; (42c0 <gpio_nrfx_manage_callback+0xc0>)
    422e:	f006 fc57 	bl	aae0 <assert_print>
    4232:	2124      	movs	r1, #36	; 0x24
    4234:	4640      	mov	r0, r8
    4236:	f006 fc4c 	bl	aad2 <assert_post_action>
    423a:	e7e8      	b.n	420e <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    423c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 42b4 <gpio_nrfx_manage_callback+0xb4>
    4240:	2325      	movs	r3, #37	; 0x25
    4242:	4642      	mov	r2, r8
    4244:	491f      	ldr	r1, [pc, #124]	; (42c4 <gpio_nrfx_manage_callback+0xc4>)
    4246:	481d      	ldr	r0, [pc, #116]	; (42bc <gpio_nrfx_manage_callback+0xbc>)
    4248:	f006 fc4a 	bl	aae0 <assert_print>
    424c:	481e      	ldr	r0, [pc, #120]	; (42c8 <gpio_nrfx_manage_callback+0xc8>)
    424e:	f006 fc47 	bl	aae0 <assert_print>
    4252:	2125      	movs	r1, #37	; 0x25
    4254:	4640      	mov	r0, r8
    4256:	f006 fc3c 	bl	aad2 <assert_post_action>
    425a:	e7da      	b.n	4212 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    425c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    425e:	606b      	str	r3, [r5, #4]
	return list->tail;
    4260:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4262:	4294      	cmp	r4, r2
    4264:	d10f      	bne.n	4286 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    4266:	607b      	str	r3, [r7, #4]
}
    4268:	e00d      	b.n	4286 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    426a:	6079      	str	r1, [r7, #4]
}
    426c:	e00b      	b.n	4286 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    426e:	4619      	mov	r1, r3
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	b15b      	cbz	r3, 428c <gpio_nrfx_manage_callback+0x8c>
    4274:	429c      	cmp	r4, r3
    4276:	d1fa      	bne.n	426e <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    4278:	2900      	cmp	r1, #0
    427a:	d0ef      	beq.n	425c <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    427c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    427e:	600b      	str	r3, [r1, #0]
	return list->tail;
    4280:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4282:	429c      	cmp	r4, r3
    4284:	d0f1      	beq.n	426a <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    4286:	2300      	movs	r3, #0
    4288:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    428a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    428c:	b903      	cbnz	r3, 4290 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    428e:	b156      	cbz	r6, 42a6 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4290:	b166      	cbz	r6, 42ac <gpio_nrfx_manage_callback+0xac>
	return list->head;
    4292:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4294:	6023      	str	r3, [r4, #0]
	list->head = node;
    4296:	606c      	str	r4, [r5, #4]
	return list->tail;
    4298:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    429a:	b10b      	cbz	r3, 42a0 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    429c:	2000      	movs	r0, #0
    429e:	e006      	b.n	42ae <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    42a0:	607c      	str	r4, [r7, #4]
    42a2:	2000      	movs	r0, #0
}
    42a4:	e003      	b.n	42ae <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    42a6:	f06f 0015 	mvn.w	r0, #21
    42aa:	e000      	b.n	42ae <gpio_nrfx_manage_callback+0xae>
	return 0;
    42ac:	2000      	movs	r0, #0
}
    42ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42b2:	bf00      	nop
    42b4:	0000d684 	.word	0x0000d684
    42b8:	0000d6b4 	.word	0x0000d6b4
    42bc:	0000c478 	.word	0x0000c478
    42c0:	0000d6c0 	.word	0x0000d6c0
    42c4:	0000d6d0 	.word	0x0000d6d0
    42c8:	0000d6e4 	.word	0x0000d6e4

000042cc <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    42cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    42d0:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    42d4:	0940      	lsrs	r0, r0, #5
    42d6:	f7ff ff85 	bl	41e4 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    42da:	b380      	cbz	r0, 433e <nrfx_gpio_handler+0x72>
    42dc:	4607      	mov	r7, r0
	return port->data;
    42de:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    42e0:	2601      	movs	r6, #1
    42e2:	40a6      	lsls	r6, r4
	return list->head;
    42e4:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42e6:	b11c      	cbz	r4, 42f0 <nrfx_gpio_handler+0x24>
    42e8:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    42ea:	b17c      	cbz	r4, 430c <nrfx_gpio_handler+0x40>
	return node->next;
    42ec:	6825      	ldr	r5, [r4, #0]
    42ee:	e00d      	b.n	430c <nrfx_gpio_handler+0x40>
    42f0:	4625      	mov	r5, r4
    42f2:	e00b      	b.n	430c <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    42f4:	6863      	ldr	r3, [r4, #4]
    42f6:	68a2      	ldr	r2, [r4, #8]
    42f8:	4032      	ands	r2, r6
    42fa:	4621      	mov	r1, r4
    42fc:	4638      	mov	r0, r7
    42fe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4300:	b1dd      	cbz	r5, 433a <nrfx_gpio_handler+0x6e>
    4302:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4304:	b105      	cbz	r5, 4308 <nrfx_gpio_handler+0x3c>
	return node->next;
    4306:	682b      	ldr	r3, [r5, #0]
    4308:	462c      	mov	r4, r5
    430a:	461d      	mov	r5, r3
    430c:	b1bc      	cbz	r4, 433e <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    430e:	68a3      	ldr	r3, [r4, #8]
    4310:	421e      	tst	r6, r3
    4312:	d0f5      	beq.n	4300 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    4314:	6863      	ldr	r3, [r4, #4]
    4316:	2b00      	cmp	r3, #0
    4318:	d1ec      	bne.n	42f4 <nrfx_gpio_handler+0x28>
    431a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4344 <nrfx_gpio_handler+0x78>
    431e:	2345      	movs	r3, #69	; 0x45
    4320:	4642      	mov	r2, r8
    4322:	4909      	ldr	r1, [pc, #36]	; (4348 <nrfx_gpio_handler+0x7c>)
    4324:	4809      	ldr	r0, [pc, #36]	; (434c <nrfx_gpio_handler+0x80>)
    4326:	f006 fbdb 	bl	aae0 <assert_print>
    432a:	4809      	ldr	r0, [pc, #36]	; (4350 <nrfx_gpio_handler+0x84>)
    432c:	f006 fbd8 	bl	aae0 <assert_print>
    4330:	2145      	movs	r1, #69	; 0x45
    4332:	4640      	mov	r0, r8
    4334:	f006 fbcd 	bl	aad2 <assert_post_action>
    4338:	e7dc      	b.n	42f4 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    433a:	462b      	mov	r3, r5
    433c:	e7e4      	b.n	4308 <nrfx_gpio_handler+0x3c>
}
    433e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4342:	bf00      	nop
    4344:	0000d684 	.word	0x0000d684
    4348:	0000d6fc 	.word	0x0000d6fc
    434c:	0000c478 	.word	0x0000c478
    4350:	0000d6e4 	.word	0x0000d6e4

00004354 <gpio_nrfx_pin_interrupt_configure>:
{
    4354:	b5f0      	push	{r4, r5, r6, r7, lr}
    4356:	b085      	sub	sp, #20
    4358:	460e      	mov	r6, r1
    435a:	4619      	mov	r1, r3
	return port->config;
    435c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    435e:	7b1b      	ldrb	r3, [r3, #12]
    4360:	f006 041f 	and.w	r4, r6, #31
    4364:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4368:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    436c:	d022      	beq.n	43b4 <gpio_nrfx_pin_interrupt_configure+0x60>
    436e:	4607      	mov	r7, r0
    4370:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4372:	2300      	movs	r3, #0
    4374:	9302      	str	r3, [sp, #8]
    4376:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    4378:	4610      	mov	r0, r2
    437a:	f006 fe5c 	bl	b036 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    437e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    4382:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4384:	6899      	ldr	r1, [r3, #8]
    4386:	40f1      	lsrs	r1, r6
    4388:	f011 0101 	ands.w	r1, r1, #1
    438c:	d102      	bne.n	4394 <gpio_nrfx_pin_interrupt_configure+0x40>
    438e:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    4392:	d014      	beq.n	43be <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4394:	2300      	movs	r3, #0
    4396:	aa02      	add	r2, sp, #8
    4398:	4619      	mov	r1, r3
    439a:	4620      	mov	r0, r4
    439c:	f002 f99a 	bl	66d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    43a0:	4b32      	ldr	r3, [pc, #200]	; (446c <gpio_nrfx_pin_interrupt_configure+0x118>)
    43a2:	4298      	cmp	r0, r3
    43a4:	d15f      	bne.n	4466 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    43a6:	2101      	movs	r1, #1
    43a8:	4620      	mov	r0, r4
    43aa:	f002 fbf7 	bl	6b9c <nrfx_gpiote_trigger_enable>
	return 0;
    43ae:	2000      	movs	r0, #0
}
    43b0:	b005      	add	sp, #20
    43b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    43b4:	4620      	mov	r0, r4
    43b6:	f002 fcfd 	bl	6db4 <nrfx_gpiote_trigger_disable>
		return 0;
    43ba:	2000      	movs	r0, #0
    43bc:	e7f8      	b.n	43b0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    43be:	0963      	lsrs	r3, r4, #5
    43c0:	d01f      	beq.n	4402 <gpio_nrfx_pin_interrupt_configure+0xae>
    43c2:	2b01      	cmp	r3, #1
    43c4:	d101      	bne.n	43ca <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    43c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    43ca:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    43ce:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    43d0:	f011 0f01 	tst.w	r1, #1
    43d4:	d018      	beq.n	4408 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    43d6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43da:	0963      	lsrs	r3, r4, #5
    43dc:	d022      	beq.n	4424 <gpio_nrfx_pin_interrupt_configure+0xd0>
    43de:	2b01      	cmp	r3, #1
    43e0:	d023      	beq.n	442a <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    43e2:	4e23      	ldr	r6, [pc, #140]	; (4470 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43e4:	f240 232e 	movw	r3, #558	; 0x22e
    43e8:	4632      	mov	r2, r6
    43ea:	4922      	ldr	r1, [pc, #136]	; (4474 <gpio_nrfx_pin_interrupt_configure+0x120>)
    43ec:	4822      	ldr	r0, [pc, #136]	; (4478 <gpio_nrfx_pin_interrupt_configure+0x124>)
    43ee:	f006 fb77 	bl	aae0 <assert_print>
    43f2:	f240 212e 	movw	r1, #558	; 0x22e
    43f6:	4630      	mov	r0, r6
    43f8:	f006 fb6b 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    43fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4400:	e014      	b.n	442c <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    4402:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4406:	e7e0      	b.n	43ca <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4408:	4d19      	ldr	r5, [pc, #100]	; (4470 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    440a:	f240 2329 	movw	r3, #553	; 0x229
    440e:	462a      	mov	r2, r5
    4410:	491a      	ldr	r1, [pc, #104]	; (447c <gpio_nrfx_pin_interrupt_configure+0x128>)
    4412:	4819      	ldr	r0, [pc, #100]	; (4478 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4414:	f006 fb64 	bl	aae0 <assert_print>
    4418:	f240 2129 	movw	r1, #553	; 0x229
    441c:	4628      	mov	r0, r5
    441e:	f006 fb58 	bl	aad2 <assert_post_action>
    4422:	e7d8      	b.n	43d6 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    4424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4428:	e000      	b.n	442c <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    442a:	4b15      	ldr	r3, [pc, #84]	; (4480 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    442c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4430:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4434:	f013 0f01 	tst.w	r3, #1
    4438:	d1ac      	bne.n	4394 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    443a:	f10d 0107 	add.w	r1, sp, #7
    443e:	4620      	mov	r0, r4
    4440:	f002 fb3c 	bl	6abc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4444:	4b0f      	ldr	r3, [pc, #60]	; (4484 <gpio_nrfx_pin_interrupt_configure+0x130>)
    4446:	4298      	cmp	r0, r3
    4448:	d003      	beq.n	4452 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    444a:	f10d 0307 	add.w	r3, sp, #7
    444e:	9303      	str	r3, [sp, #12]
    4450:	e7a0      	b.n	4394 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    4452:	f10d 0007 	add.w	r0, sp, #7
    4456:	f002 fb99 	bl	6b8c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    445a:	4b04      	ldr	r3, [pc, #16]	; (446c <gpio_nrfx_pin_interrupt_configure+0x118>)
    445c:	4298      	cmp	r0, r3
    445e:	d0f4      	beq.n	444a <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    4460:	f06f 000b 	mvn.w	r0, #11
    4464:	e7a4      	b.n	43b0 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    4466:	f06f 0004 	mvn.w	r0, #4
    446a:	e7a1      	b.n	43b0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    446c:	0bad0000 	.word	0x0bad0000
    4470:	0000d708 	.word	0x0000d708
    4474:	0000cb38 	.word	0x0000cb38
    4478:	0000c478 	.word	0x0000c478
    447c:	0000d73c 	.word	0x0000d73c
    4480:	50000300 	.word	0x50000300
    4484:	0bad0004 	.word	0x0bad0004

00004488 <pin_uninit>:
{
    4488:	b530      	push	{r4, r5, lr}
    448a:	b083      	sub	sp, #12
    448c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    448e:	f10d 0107 	add.w	r1, sp, #7
    4492:	f002 fb13 	bl	6abc <nrfx_gpiote_channel_get>
    4496:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4498:	4620      	mov	r0, r4
    449a:	f002 fcf3 	bl	6e84 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    449e:	4b0b      	ldr	r3, [pc, #44]	; (44cc <pin_uninit+0x44>)
    44a0:	4298      	cmp	r0, r3
    44a2:	d10f      	bne.n	44c4 <pin_uninit+0x3c>
	if (free_ch) {
    44a4:	429d      	cmp	r5, r3
    44a6:	d005      	beq.n	44b4 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    44a8:	4b08      	ldr	r3, [pc, #32]	; (44cc <pin_uninit+0x44>)
    44aa:	4298      	cmp	r0, r3
    44ac:	d107      	bne.n	44be <pin_uninit+0x36>
    44ae:	2000      	movs	r0, #0
}
    44b0:	b003      	add	sp, #12
    44b2:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    44b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    44b8:	f002 fb60 	bl	6b7c <nrfx_gpiote_channel_free>
    44bc:	e7f4      	b.n	44a8 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    44be:	f06f 0004 	mvn.w	r0, #4
    44c2:	e7f5      	b.n	44b0 <pin_uninit+0x28>
		return -EIO;
    44c4:	f06f 0004 	mvn.w	r0, #4
    44c8:	e7f2      	b.n	44b0 <pin_uninit+0x28>
    44ca:	bf00      	nop
    44cc:	0bad0000 	.word	0x0bad0000

000044d0 <gpio_nrfx_pin_configure>:
{
    44d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44d4:	b087      	sub	sp, #28
	return port->config;
    44d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    44da:	f898 300c 	ldrb.w	r3, [r8, #12]
    44de:	f001 051f 	and.w	r5, r1, #31
    44e2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    44e6:	2a00      	cmp	r2, #0
    44e8:	d044      	beq.n	4574 <gpio_nrfx_pin_configure+0xa4>
    44ea:	460c      	mov	r4, r1
    44ec:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    44ee:	2600      	movs	r6, #0
    44f0:	9603      	str	r6, [sp, #12]
    44f2:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    44f4:	f10d 0117 	add.w	r1, sp, #23
    44f8:	4620      	mov	r0, r4
    44fa:	f002 fadf 	bl	6abc <nrfx_gpiote_channel_get>
    44fe:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4500:	4633      	mov	r3, r6
    4502:	aa03      	add	r2, sp, #12
    4504:	4631      	mov	r1, r6
    4506:	4628      	mov	r0, r5
    4508:	f002 f8e4 	bl	66d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    450c:	4b30      	ldr	r3, [pc, #192]	; (45d0 <gpio_nrfx_pin_configure+0x100>)
    450e:	4298      	cmp	r0, r3
    4510:	d15b      	bne.n	45ca <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    4512:	4599      	cmp	r9, r3
    4514:	d036      	beq.n	4584 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    4516:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    451a:	d043      	beq.n	45a4 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    451c:	f10d 0103 	add.w	r1, sp, #3
    4520:	4638      	mov	r0, r7
    4522:	f006 fd0f 	bl	af44 <get_drive>
		if (rv != 0) {
    4526:	4606      	mov	r6, r0
    4528:	bb40      	cbnz	r0, 457c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    452a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    452e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4532:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    4536:	bf0c      	ite	eq
    4538:	2301      	moveq	r3, #1
    453a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    453c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    4540:	4638      	mov	r0, r7
    4542:	f006 fd45 	bl	afd0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    4546:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    454a:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    454e:	d01e      	beq.n	458e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4550:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4554:	2101      	movs	r1, #1
    4556:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    455a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    455e:	2200      	movs	r2, #0
    4560:	a901      	add	r1, sp, #4
    4562:	4628      	mov	r0, r5
    4564:	f002 f9aa 	bl	68bc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4568:	4b19      	ldr	r3, [pc, #100]	; (45d0 <gpio_nrfx_pin_configure+0x100>)
    456a:	4298      	cmp	r0, r3
    456c:	d006      	beq.n	457c <gpio_nrfx_pin_configure+0xac>
    456e:	f06f 0615 	mvn.w	r6, #21
    4572:	e003      	b.n	457c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    4574:	4628      	mov	r0, r5
    4576:	f7ff ff87 	bl	4488 <pin_uninit>
    457a:	4606      	mov	r6, r0
}
    457c:	4630      	mov	r0, r6
    457e:	b007      	add	sp, #28
    4580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    4584:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4588:	f002 faf8 	bl	6b7c <nrfx_gpiote_channel_free>
    458c:	e7c3      	b.n	4516 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    458e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    4592:	d0e4      	beq.n	455e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4594:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4598:	2301      	movs	r3, #1
    459a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    459e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    45a2:	e7dc      	b.n	455e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    45a4:	4638      	mov	r0, r7
    45a6:	f006 fd13 	bl	afd0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    45aa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    45ae:	2300      	movs	r3, #0
    45b0:	461a      	mov	r2, r3
    45b2:	a902      	add	r1, sp, #8
    45b4:	4628      	mov	r0, r5
    45b6:	f002 f88d 	bl	66d4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    45ba:	4b05      	ldr	r3, [pc, #20]	; (45d0 <gpio_nrfx_pin_configure+0x100>)
    45bc:	4298      	cmp	r0, r3
    45be:	d101      	bne.n	45c4 <gpio_nrfx_pin_configure+0xf4>
    45c0:	2600      	movs	r6, #0
    45c2:	e7db      	b.n	457c <gpio_nrfx_pin_configure+0xac>
    45c4:	f06f 0615 	mvn.w	r6, #21
    45c8:	e7d8      	b.n	457c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    45ca:	f06f 0615 	mvn.w	r6, #21
    45ce:	e7d5      	b.n	457c <gpio_nrfx_pin_configure+0xac>
    45d0:	0bad0000 	.word	0x0bad0000

000045d4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    45d4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    45d6:	f002 fac7 	bl	6b68 <nrfx_gpiote_is_init>
    45da:	b108      	cbz	r0, 45e0 <gpio_nrfx_init+0xc>
		return 0;
    45dc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    45de:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    45e0:	f002 fa98 	bl	6b14 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    45e4:	4b08      	ldr	r3, [pc, #32]	; (4608 <gpio_nrfx_init+0x34>)
    45e6:	4298      	cmp	r0, r3
    45e8:	d10a      	bne.n	4600 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    45ea:	2100      	movs	r1, #0
    45ec:	4807      	ldr	r0, [pc, #28]	; (460c <gpio_nrfx_init+0x38>)
    45ee:	f002 fa5f 	bl	6ab0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    45f2:	2200      	movs	r2, #0
    45f4:	2105      	movs	r1, #5
    45f6:	2006      	movs	r0, #6
    45f8:	f7fe fc20 	bl	2e3c <z_arm_irq_priority_set>
	return 0;
    45fc:	2000      	movs	r0, #0
    45fe:	e7ee      	b.n	45de <gpio_nrfx_init+0xa>
		return -EIO;
    4600:	f06f 0004 	mvn.w	r0, #4
    4604:	e7eb      	b.n	45de <gpio_nrfx_init+0xa>
    4606:	bf00      	nop
    4608:	0bad0000 	.word	0x0bad0000
    460c:	000042cd 	.word	0x000042cd

00004610 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    4610:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    4612:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4614:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4618:	d06f      	beq.n	46fa <baudrate_set+0xea>
    461a:	d83a      	bhi.n	4692 <baudrate_set+0x82>
    461c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4620:	d06e      	beq.n	4700 <baudrate_set+0xf0>
    4622:	d90a      	bls.n	463a <baudrate_set+0x2a>
    4624:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    4628:	d075      	beq.n	4716 <baudrate_set+0x106>
    462a:	d924      	bls.n	4676 <baudrate_set+0x66>
    462c:	f647 2312 	movw	r3, #31250	; 0x7a12
    4630:	4299      	cmp	r1, r3
    4632:	d12b      	bne.n	468c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4634:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4638:	e013      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    463a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    463e:	d061      	beq.n	4704 <baudrate_set+0xf4>
    4640:	d907      	bls.n	4652 <baudrate_set+0x42>
    4642:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    4646:	d063      	beq.n	4710 <baudrate_set+0x100>
    4648:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    464c:	d110      	bne.n	4670 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    464e:	4b3c      	ldr	r3, [pc, #240]	; (4740 <baudrate_set+0x130>)
    4650:	e007      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    4652:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    4656:	d058      	beq.n	470a <baudrate_set+0xfa>
    4658:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    465c:	d105      	bne.n	466a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    465e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4662:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    4666:	2000      	movs	r0, #0
    4668:	4770      	bx	lr
	switch (baudrate) {
    466a:	f06f 0015 	mvn.w	r0, #21
    466e:	4770      	bx	lr
    4670:	f06f 0015 	mvn.w	r0, #21
    4674:	4770      	bx	lr
    4676:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    467a:	d04e      	beq.n	471a <baudrate_set+0x10a>
    467c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4680:	d101      	bne.n	4686 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4682:	4b30      	ldr	r3, [pc, #192]	; (4744 <baudrate_set+0x134>)
    4684:	e7ed      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    4686:	f06f 0015 	mvn.w	r0, #21
    468a:	4770      	bx	lr
    468c:	f06f 0015 	mvn.w	r0, #21
    4690:	4770      	bx	lr
    4692:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    4696:	d042      	beq.n	471e <baudrate_set+0x10e>
    4698:	d909      	bls.n	46ae <baudrate_set+0x9e>
    469a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    469e:	d046      	beq.n	472e <baudrate_set+0x11e>
    46a0:	d91f      	bls.n	46e2 <baudrate_set+0xd2>
    46a2:	4b29      	ldr	r3, [pc, #164]	; (4748 <baudrate_set+0x138>)
    46a4:	4299      	cmp	r1, r3
    46a6:	d148      	bne.n	473a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    46a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    46ac:	e7d9      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    46ae:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    46b2:	d037      	beq.n	4724 <baudrate_set+0x114>
    46b4:	d905      	bls.n	46c2 <baudrate_set+0xb2>
    46b6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    46ba:	d10f      	bne.n	46dc <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    46bc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    46c0:	e7cf      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    46c2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    46c6:	4299      	cmp	r1, r3
    46c8:	d02e      	beq.n	4728 <baudrate_set+0x118>
    46ca:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    46ce:	d102      	bne.n	46d6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    46d0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    46d4:	e7c5      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    46d6:	f06f 0015 	mvn.w	r0, #21
    46da:	4770      	bx	lr
    46dc:	f06f 0015 	mvn.w	r0, #21
    46e0:	4770      	bx	lr
    46e2:	4b1a      	ldr	r3, [pc, #104]	; (474c <baudrate_set+0x13c>)
    46e4:	4299      	cmp	r1, r3
    46e6:	d025      	beq.n	4734 <baudrate_set+0x124>
    46e8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    46ec:	d102      	bne.n	46f4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    46ee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    46f2:	e7b6      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    46f4:	f06f 0015 	mvn.w	r0, #21
    46f8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    46fa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    46fe:	e7b0      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4700:	4b13      	ldr	r3, [pc, #76]	; (4750 <baudrate_set+0x140>)
    4702:	e7ae      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4704:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4708:	e7ab      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    470a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    470e:	e7a8      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4710:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4714:	e7a5      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4716:	4b0f      	ldr	r3, [pc, #60]	; (4754 <baudrate_set+0x144>)
    4718:	e7a3      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    471a:	4b0f      	ldr	r3, [pc, #60]	; (4758 <baudrate_set+0x148>)
    471c:	e7a1      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    471e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4722:	e79e      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4724:	4b0d      	ldr	r3, [pc, #52]	; (475c <baudrate_set+0x14c>)
    4726:	e79c      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4728:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    472c:	e799      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    472e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4732:	e796      	b.n	4662 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4734:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4738:	e793      	b.n	4662 <baudrate_set+0x52>
	switch (baudrate) {
    473a:	f06f 0015 	mvn.w	r0, #21
}
    473e:	4770      	bx	lr
    4740:	0013b000 	.word	0x0013b000
    4744:	004ea000 	.word	0x004ea000
    4748:	000f4240 	.word	0x000f4240
    474c:	0003d090 	.word	0x0003d090
    4750:	00275000 	.word	0x00275000
    4754:	0075c000 	.word	0x0075c000
    4758:	003af000 	.word	0x003af000
    475c:	013a9000 	.word	0x013a9000

00004760 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4764:	4605      	mov	r5, r0
    4766:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    4768:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    476a:	f007 fb33 	bl	bdd4 <k_is_in_isr>
    476e:	b920      	cbnz	r0, 477a <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    4770:	4b1e      	ldr	r3, [pc, #120]	; (47ec <uarte_nrfx_poll_out+0x8c>)
    4772:	781b      	ldrb	r3, [r3, #0]
    4774:	b1a3      	cbz	r3, 47a0 <uarte_nrfx_poll_out+0x40>
    4776:	2300      	movs	r3, #0
    4778:	e000      	b.n	477c <uarte_nrfx_poll_out+0x1c>
    477a:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    477c:	b9b3      	cbnz	r3, 47ac <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    477e:	4628      	mov	r0, r5
    4780:	f006 fdea 	bl	b358 <wait_tx_ready>
    4784:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4786:	4639      	mov	r1, r7
    4788:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    478c:	2201      	movs	r2, #1
    478e:	4628      	mov	r0, r5
    4790:	f006 fd05 	bl	b19e <tx_start>
    4794:	f386 8811 	msr	BASEPRI, r6
    4798:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    47a0:	2301      	movs	r3, #1
    47a2:	e7eb      	b.n	477c <uarte_nrfx_poll_out+0x1c>
    47a4:	f384 8811 	msr	BASEPRI, r4
    47a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    47ac:	f04f 0320 	mov.w	r3, #32
    47b0:	f3ef 8411 	mrs	r4, BASEPRI
    47b4:	f383 8812 	msr	BASEPRI_MAX, r3
    47b8:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    47bc:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    47be:	4628      	mov	r0, r5
    47c0:	f006 fccb 	bl	b15a <is_tx_ready>
    47c4:	2800      	cmp	r0, #0
    47c6:	d0ed      	beq.n	47a4 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d0db      	beq.n	4786 <uarte_nrfx_poll_out+0x26>
    47ce:	68da      	ldr	r2, [r3, #12]
    47d0:	2a00      	cmp	r2, #0
    47d2:	d0d8      	beq.n	4786 <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    47d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    47d8:	2a00      	cmp	r2, #0
    47da:	dad4      	bge.n	4786 <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    47dc:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    47de:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    47e0:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    47e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    47e8:	e7cd      	b.n	4786 <uarte_nrfx_poll_out+0x26>
    47ea:	bf00      	nop
    47ec:	200052ea 	.word	0x200052ea

000047f0 <uarte_nrfx_rx_enable>:
{
    47f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47f4:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    47f6:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    47f8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    47fc:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    4800:	f899 2008 	ldrb.w	r2, [r9, #8]
    4804:	b992      	cbnz	r2, 482c <uarte_nrfx_rx_enable+0x3c>
    4806:	4680      	mov	r8, r0
    4808:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    480a:	68e2      	ldr	r2, [r4, #12]
    480c:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    4810:	2900      	cmp	r1, #0
    4812:	f040 8084 	bne.w	491e <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    4816:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    4818:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    481c:	dd19      	ble.n	4852 <uarte_nrfx_rx_enable+0x62>
    481e:	4a41      	ldr	r2, [pc, #260]	; (4924 <uarte_nrfx_rx_enable+0x134>)
    4820:	fb82 1203 	smull	r1, r2, r2, r3
    4824:	17db      	asrs	r3, r3, #31
    4826:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    482a:	e013      	b.n	4854 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    482c:	4c3e      	ldr	r4, [pc, #248]	; (4928 <uarte_nrfx_rx_enable+0x138>)
    482e:	f240 337f 	movw	r3, #895	; 0x37f
    4832:	4622      	mov	r2, r4
    4834:	493d      	ldr	r1, [pc, #244]	; (492c <uarte_nrfx_rx_enable+0x13c>)
    4836:	483e      	ldr	r0, [pc, #248]	; (4930 <uarte_nrfx_rx_enable+0x140>)
    4838:	f006 f952 	bl	aae0 <assert_print>
    483c:	483d      	ldr	r0, [pc, #244]	; (4934 <uarte_nrfx_rx_enable+0x144>)
    483e:	f006 f94f 	bl	aae0 <assert_print>
    4842:	f240 317f 	movw	r1, #895	; 0x37f
    4846:	4620      	mov	r0, r4
    4848:	f006 f943 	bl	aad2 <assert_post_action>
		return -ENOTSUP;
    484c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4850:	e03d      	b.n	48ce <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    4852:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    4854:	68e2      	ldr	r2, [r4, #12]
    4856:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    485a:	68e3      	ldr	r3, [r4, #12]
    485c:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    485e:	68e3      	ldr	r3, [r4, #12]
    4860:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    4862:	68e2      	ldr	r2, [r4, #12]
    4864:	2300      	movs	r3, #0
    4866:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    4868:	68e2      	ldr	r2, [r4, #12]
    486a:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    486c:	68e2      	ldr	r2, [r4, #12]
    486e:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4870:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4874:	f013 0f10 	tst.w	r3, #16
    4878:	d010      	beq.n	489c <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    487a:	68e1      	ldr	r1, [r4, #12]
    487c:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    4880:	b163      	cbz	r3, 489c <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    4882:	42b3      	cmp	r3, r6
    4884:	bf28      	it	cs
    4886:	4633      	movcs	r3, r6
    4888:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    488a:	461a      	mov	r2, r3
    488c:	31cc      	adds	r1, #204	; 0xcc
    488e:	4638      	mov	r0, r7
    4890:	f007 fb56 	bl	bf40 <memcpy>
			buf += cpy_len;
    4894:	4457      	add	r7, sl
			if (!len) {
    4896:	ebb6 060a 	subs.w	r6, r6, sl
    489a:	d01a      	beq.n	48d2 <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    489c:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    48a0:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48a4:	2300      	movs	r3, #0
    48a6:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    48aa:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    48ae:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    48b2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    48b6:	68e3      	ldr	r3, [r4, #12]
    48b8:	2201      	movs	r2, #1
    48ba:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    48be:	f8d9 3004 	ldr.w	r3, [r9, #4]
    48c2:	f013 0f10 	tst.w	r3, #16
    48c6:	d119      	bne.n	48fc <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48c8:	2301      	movs	r3, #1
    48ca:	602b      	str	r3, [r5, #0]
	return 0;
    48cc:	2000      	movs	r0, #0
}
    48ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    48d2:	68e2      	ldr	r2, [r4, #12]
    48d4:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    48d8:	eba3 030a 	sub.w	r3, r3, sl
    48dc:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    48e0:	4651      	mov	r1, sl
    48e2:	4640      	mov	r0, r8
    48e4:	f006 fcaa 	bl	b23c <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    48e8:	68e1      	ldr	r1, [r4, #12]
    48ea:	3160      	adds	r1, #96	; 0x60
    48ec:	4640      	mov	r0, r8
    48ee:	f006 fcbd 	bl	b26c <rx_buf_release>
				notify_rx_disable(dev);
    48f2:	4640      	mov	r0, r8
    48f4:	f006 fcd1 	bl	b29a <notify_rx_disable>
				return 0;
    48f8:	2000      	movs	r0, #0
    48fa:	e7e8      	b.n	48ce <uarte_nrfx_rx_enable+0xde>
    48fc:	f04f 0320 	mov.w	r3, #32
    4900:	f3ef 8411 	mrs	r4, BASEPRI
    4904:	f383 8812 	msr	BASEPRI_MAX, r3
    4908:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    490c:	2102      	movs	r1, #2
    490e:	4640      	mov	r0, r8
    4910:	f006 fc37 	bl	b182 <uarte_enable>
	__asm__ volatile(
    4914:	f384 8811 	msr	BASEPRI, r4
    4918:	f3bf 8f6f 	isb	sy
}
    491c:	e7d4      	b.n	48c8 <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    491e:	f06f 000f 	mvn.w	r0, #15
    4922:	e7d4      	b.n	48ce <uarte_nrfx_rx_enable+0xde>
    4924:	66666667 	.word	0x66666667
    4928:	0000d7b4 	.word	0x0000d7b4
    492c:	0000cb38 	.word	0x0000cb38
    4930:	0000c478 	.word	0x0000c478
    4934:	0000d7e8 	.word	0x0000d7e8

00004938 <uarte_nrfx_tx>:
{
    4938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    493c:	b083      	sub	sp, #12
    493e:	4605      	mov	r5, r0
    4940:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    4942:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    4944:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    4946:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    4948:	f04f 0020 	mov.w	r0, #32
    494c:	f3ef 8911 	mrs	r9, BASEPRI
    4950:	f380 8812 	msr	BASEPRI_MAX, r0
    4954:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    4958:	68e6      	ldr	r6, [r4, #12]
    495a:	68f7      	ldr	r7, [r6, #12]
    495c:	b9f7      	cbnz	r7, 499c <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    495e:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    4960:	68e0      	ldr	r0, [r4, #12]
    4962:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    4964:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    4968:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    496c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    4970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4974:	d119      	bne.n	49aa <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    4976:	68e3      	ldr	r3, [r4, #12]
    4978:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    497a:	68e3      	ldr	r3, [r4, #12]
    497c:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    497e:	4621      	mov	r1, r4
    4980:	4628      	mov	r0, r5
    4982:	f006 fc38 	bl	b1f6 <start_tx_locked>
	__asm__ volatile(
    4986:	f389 8811 	msr	BASEPRI, r9
    498a:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    498e:	7ae3      	ldrb	r3, [r4, #11]
    4990:	2b01      	cmp	r3, #1
    4992:	d011      	beq.n	49b8 <uarte_nrfx_tx+0x80>
	return 0;
    4994:	2000      	movs	r0, #0
}
    4996:	b003      	add	sp, #12
    4998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    499c:	f389 8811 	msr	BASEPRI, r9
    49a0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    49a4:	f06f 000f 	mvn.w	r0, #15
    49a8:	e7f5      	b.n	4996 <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    49aa:	68e3      	ldr	r3, [r4, #12]
    49ac:	2200      	movs	r2, #0
    49ae:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    49b0:	4620      	mov	r0, r4
    49b2:	f006 fe10 	bl	b5d6 <setup_tx_cache>
    49b6:	e7e2      	b.n	497e <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    49b8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    49bc:	d101      	bne.n	49c2 <uarte_nrfx_tx+0x8a>
	return 0;
    49be:	2000      	movs	r0, #0
    49c0:	e7e9      	b.n	4996 <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    49c2:	68e4      	ldr	r4, [r4, #12]
    49c4:	3428      	adds	r4, #40	; 0x28
    49c6:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    49ca:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    49cc:	03c9      	lsls	r1, r1, #15
    49ce:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    49d2:	03c0      	lsls	r0, r0, #15
    49d4:	4b09      	ldr	r3, [pc, #36]	; (49fc <uarte_nrfx_tx+0xc4>)
    49d6:	18c0      	adds	r0, r0, r3
    49d8:	4a09      	ldr	r2, [pc, #36]	; (4a00 <uarte_nrfx_tx+0xc8>)
    49da:	f04f 0300 	mov.w	r3, #0
    49de:	f141 0100 	adc.w	r1, r1, #0
    49e2:	f7fb fb8d 	bl	100 <__aeabi_uldivmod>
    49e6:	4602      	mov	r2, r0
    49e8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    49ea:	2000      	movs	r0, #0
    49ec:	2100      	movs	r1, #0
    49ee:	e9cd 0100 	strd	r0, r1, [sp]
    49f2:	4620      	mov	r0, r4
    49f4:	f005 fb5c 	bl	a0b0 <z_impl_k_timer_start>
	return 0;
    49f8:	2000      	movs	r0, #0
    49fa:	e7cc      	b.n	4996 <uarte_nrfx_tx+0x5e>
    49fc:	000f423f 	.word	0x000f423f
    4a00:	000f4240 	.word	0x000f4240

00004a04 <rxstarted_isr>:
{
    4a04:	b510      	push	{r4, lr}
    4a06:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    4a08:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    4a0a:	2300      	movs	r3, #0
    4a0c:	9303      	str	r3, [sp, #12]
    4a0e:	9304      	str	r3, [sp, #16]
    4a10:	9305      	str	r3, [sp, #20]
    4a12:	9306      	str	r3, [sp, #24]
    4a14:	9307      	str	r3, [sp, #28]
    4a16:	2303      	movs	r3, #3
    4a18:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    4a1c:	a903      	add	r1, sp, #12
    4a1e:	f006 fc05 	bl	b22c <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    4a22:	68e3      	ldr	r3, [r4, #12]
    4a24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    4a26:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    4a2a:	d101      	bne.n	4a30 <rxstarted_isr+0x2c>
}
    4a2c:	b008      	add	sp, #32
    4a2e:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    4a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    4a34:	68e3      	ldr	r3, [r4, #12]
    4a36:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    4a3a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    4a3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4a42:	17c1      	asrs	r1, r0, #31
    4a44:	03c9      	lsls	r1, r1, #15
    4a46:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4a4a:	03c0      	lsls	r0, r0, #15
    4a4c:	4b08      	ldr	r3, [pc, #32]	; (4a70 <rxstarted_isr+0x6c>)
    4a4e:	18c0      	adds	r0, r0, r3
    4a50:	4a08      	ldr	r2, [pc, #32]	; (4a74 <rxstarted_isr+0x70>)
    4a52:	f04f 0300 	mov.w	r3, #0
    4a56:	f141 0100 	adc.w	r1, r1, #0
    4a5a:	f7fb fb51 	bl	100 <__aeabi_uldivmod>
    4a5e:	4602      	mov	r2, r0
    4a60:	460b      	mov	r3, r1
    4a62:	9000      	str	r0, [sp, #0]
    4a64:	9101      	str	r1, [sp, #4]
    4a66:	4620      	mov	r0, r4
    4a68:	f005 fb22 	bl	a0b0 <z_impl_k_timer_start>
}
    4a6c:	e7de      	b.n	4a2c <rxstarted_isr+0x28>
    4a6e:	bf00      	nop
    4a70:	000f423f 	.word	0x000f423f
    4a74:	000f4240 	.word	0x000f4240

00004a78 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4a78:	b530      	push	{r4, r5, lr}
    4a7a:	b085      	sub	sp, #20
    4a7c:	4604      	mov	r4, r0
    4a7e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4a80:	f101 0016 	add.w	r0, r1, #22
    4a84:	f002 fa8a 	bl	6f9c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4a88:	4b11      	ldr	r3, [pc, #68]	; (4ad0 <endtx_stoptx_ppi_init+0x58>)
    4a8a:	4298      	cmp	r0, r3
    4a8c:	d112      	bne.n	4ab4 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4a8e:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4a90:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4a94:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4a96:	4a0f      	ldr	r2, [pc, #60]	; (4ad4 <endtx_stoptx_ppi_init+0x5c>)
    4a98:	33a2      	adds	r3, #162	; 0xa2
    4a9a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4a9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4aa2:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4aa4:	7da9      	ldrb	r1, [r5, #22]
    4aa6:	2301      	movs	r3, #1
    4aa8:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4aaa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4aae:	2000      	movs	r0, #0
}
    4ab0:	b005      	add	sp, #20
    4ab2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4ab4:	4b08      	ldr	r3, [pc, #32]	; (4ad8 <endtx_stoptx_ppi_init+0x60>)
    4ab6:	9302      	str	r3, [sp, #8]
    4ab8:	2000      	movs	r0, #0
    4aba:	9001      	str	r0, [sp, #4]
    4abc:	9000      	str	r0, [sp, #0]
    4abe:	4603      	mov	r3, r0
    4ac0:	2201      	movs	r2, #1
    4ac2:	4906      	ldr	r1, [pc, #24]	; (4adc <endtx_stoptx_ppi_init+0x64>)
    4ac4:	f006 fda0 	bl	b608 <z_log_msg2_runtime_create>
		return -EIO;
    4ac8:	f06f 0004 	mvn.w	r0, #4
    4acc:	e7f0      	b.n	4ab0 <endtx_stoptx_ppi_init+0x38>
    4ace:	bf00      	nop
    4ad0:	0bad0000 	.word	0x0bad0000
    4ad4:	4001f000 	.word	0x4001f000
    4ad8:	0000d804 	.word	0x0000d804
    4adc:	0000c284 	.word	0x0000c284

00004ae0 <uarte_nrfx_init>:
{
    4ae0:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    4ae2:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    4ae4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4ae6:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    4ae8:	f006 fb7e 	bl	b1e8 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    4aec:	4606      	mov	r6, r0
    4aee:	bb90      	cbnz	r0, 4b56 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4af0:	68eb      	ldr	r3, [r5, #12]
    4af2:	2201      	movs	r2, #1
    4af4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    4af8:	4b18      	ldr	r3, [pc, #96]	; (4b5c <uarte_nrfx_init+0x7c>)
    4afa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4afe:	2308      	movs	r3, #8
    4b00:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b04:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4b08:	b1a3      	cbz	r3, 4b34 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b0a:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b0c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4b10:	b91b      	cbnz	r3, 4b1a <uarte_nrfx_init+0x3a>
    4b12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    4b16:	2b00      	cmp	r3, #0
    4b18:	d0f8      	beq.n	4b0c <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b1a:	2300      	movs	r3, #0
    4b1c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    4b20:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    4b24:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4b28:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    4b2c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    4b30:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    4b34:	68e8      	ldr	r0, [r5, #12]
    4b36:	2200      	movs	r2, #0
    4b38:	4909      	ldr	r1, [pc, #36]	; (4b60 <uarte_nrfx_init+0x80>)
    4b3a:	3088      	adds	r0, #136	; 0x88
    4b3c:	f007 f9d1 	bl	bee2 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    4b40:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    4b42:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    4b46:	68e8      	ldr	r0, [r5, #12]
    4b48:	2200      	movs	r2, #0
    4b4a:	4906      	ldr	r1, [pc, #24]	; (4b64 <uarte_nrfx_init+0x84>)
    4b4c:	3028      	adds	r0, #40	; 0x28
    4b4e:	f007 f9c8 	bl	bee2 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    4b52:	68eb      	ldr	r3, [r5, #12]
    4b54:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    4b56:	4630      	mov	r0, r6
    4b58:	bd70      	pop	{r4, r5, r6, pc}
    4b5a:	bf00      	nop
    4b5c:	000a0210 	.word	0x000a0210
    4b60:	0000b47d 	.word	0x0000b47d
    4b64:	0000b471 	.word	0x0000b471

00004b68 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4b68:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4b6c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b70:	4b01      	ldr	r3, [pc, #4]	; (4b78 <set_comparator+0x10>)
    4b72:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4b76:	4770      	bx	lr
    4b78:	40011000 	.word	0x40011000

00004b7c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4b7c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b80:	4b01      	ldr	r3, [pc, #4]	; (4b88 <get_comparator+0xc>)
    4b82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4b86:	4770      	bx	lr
    4b88:	40011000 	.word	0x40011000

00004b8c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b90:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4b92:	4a02      	ldr	r2, [pc, #8]	; (4b9c <event_enable+0x10>)
    4b94:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4b98:	4770      	bx	lr
    4b9a:	bf00      	nop
    4b9c:	40011000 	.word	0x40011000

00004ba0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ba4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4ba6:	4a02      	ldr	r2, [pc, #8]	; (4bb0 <event_disable+0x10>)
    4ba8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4bac:	4770      	bx	lr
    4bae:	bf00      	nop
    4bb0:	40011000 	.word	0x40011000

00004bb4 <counter>:
     return p_reg->COUNTER;
    4bb4:	4b01      	ldr	r3, [pc, #4]	; (4bbc <counter+0x8>)
    4bb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4bba:	4770      	bx	lr
    4bbc:	40011000 	.word	0x40011000

00004bc0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4bc0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4bc2:	2301      	movs	r3, #1
    4bc4:	4083      	lsls	r3, r0
    4bc6:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4bca:	4a10      	ldr	r2, [pc, #64]	; (4c0c <compare_int_lock+0x4c>)
    4bcc:	f3bf 8f5b 	dmb	ish
    4bd0:	e852 1f00 	ldrex	r1, [r2]
    4bd4:	ea01 0e0c 	and.w	lr, r1, ip
    4bd8:	e842 e400 	strex	r4, lr, [r2]
    4bdc:	2c00      	cmp	r4, #0
    4bde:	d1f7      	bne.n	4bd0 <compare_int_lock+0x10>
    4be0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4be8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4bec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4bf4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4bf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bfc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4c00:	420b      	tst	r3, r1
}
    4c02:	bf14      	ite	ne
    4c04:	2001      	movne	r0, #1
    4c06:	2000      	moveq	r0, #0
    4c08:	bd10      	pop	{r4, pc}
    4c0a:	bf00      	nop
    4c0c:	20004be4 	.word	0x20004be4

00004c10 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4c10:	b570      	push	{r4, r5, r6, lr}
    4c12:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4c14:	f006 ff26 	bl	ba64 <full_int_lock>
    4c18:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c1e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4c20:	4a17      	ldr	r2, [pc, #92]	; (4c80 <channel_processing_check_and_clear+0x70>)
    4c22:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4c26:	4213      	tst	r3, r2
    4c28:	d105      	bne.n	4c36 <channel_processing_check_and_clear+0x26>
	bool result = false;
    4c2a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4c2c:	4628      	mov	r0, r5
    4c2e:	f006 ff22 	bl	ba76 <full_int_unlock>

	return result;
}
    4c32:	4630      	mov	r0, r6
    4c34:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4c36:	2301      	movs	r3, #1
    4c38:	40a3      	lsls	r3, r4
    4c3a:	43db      	mvns	r3, r3
    4c3c:	4a11      	ldr	r2, [pc, #68]	; (4c84 <channel_processing_check_and_clear+0x74>)
    4c3e:	f3bf 8f5b 	dmb	ish
    4c42:	e852 1f00 	ldrex	r1, [r2]
    4c46:	ea01 0003 	and.w	r0, r1, r3
    4c4a:	e842 0600 	strex	r6, r0, [r2]
    4c4e:	2e00      	cmp	r6, #0
    4c50:	d1f7      	bne.n	4c42 <channel_processing_check_and_clear+0x32>
    4c52:	f3bf 8f5b 	dmb	ish
    4c56:	b959      	cbnz	r1, 4c70 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4c58:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4c5c:	009b      	lsls	r3, r3, #2
    4c5e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4c64:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4c68:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4c6a:	b113      	cbz	r3, 4c72 <channel_processing_check_and_clear+0x62>
    4c6c:	2301      	movs	r3, #1
    4c6e:	e000      	b.n	4c72 <channel_processing_check_and_clear+0x62>
    4c70:	2301      	movs	r3, #1
		if (result) {
    4c72:	461e      	mov	r6, r3
    4c74:	2b00      	cmp	r3, #0
    4c76:	d0d9      	beq.n	4c2c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4c78:	4620      	mov	r0, r4
    4c7a:	f006 fee4 	bl	ba46 <event_clear>
    4c7e:	e7d5      	b.n	4c2c <channel_processing_check_and_clear+0x1c>
    4c80:	40011000 	.word	0x40011000
    4c84:	20004be0 	.word	0x20004be0

00004c88 <compare_int_unlock>:
	if (key) {
    4c88:	b901      	cbnz	r1, 4c8c <compare_int_unlock+0x4>
}
    4c8a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4c8c:	2301      	movs	r3, #1
    4c8e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c90:	4a11      	ldr	r2, [pc, #68]	; (4cd8 <compare_int_unlock+0x50>)
    4c92:	f3bf 8f5b 	dmb	ish
    4c96:	e852 1f00 	ldrex	r1, [r2]
    4c9a:	4319      	orrs	r1, r3
    4c9c:	e842 1c00 	strex	ip, r1, [r2]
    4ca0:	f1bc 0f00 	cmp.w	ip, #0
    4ca4:	d1f7      	bne.n	4c96 <compare_int_unlock+0xe>
    4ca6:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4cae:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4cb0:	4a0a      	ldr	r2, [pc, #40]	; (4cdc <compare_int_unlock+0x54>)
    4cb2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4cb6:	f3bf 8f5b 	dmb	ish
    4cba:	4b09      	ldr	r3, [pc, #36]	; (4ce0 <compare_int_unlock+0x58>)
    4cbc:	681b      	ldr	r3, [r3, #0]
    4cbe:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4cc2:	fa23 f000 	lsr.w	r0, r3, r0
    4cc6:	f010 0f01 	tst.w	r0, #1
    4cca:	d0de      	beq.n	4c8a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ccc:	4b05      	ldr	r3, [pc, #20]	; (4ce4 <compare_int_unlock+0x5c>)
    4cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4cd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4cd6:	e7d8      	b.n	4c8a <compare_int_unlock+0x2>
    4cd8:	20004be4 	.word	0x20004be4
    4cdc:	40011000 	.word	0x40011000
    4ce0:	20004be0 	.word	0x20004be0
    4ce4:	e000e100 	.word	0xe000e100

00004ce8 <sys_clock_timeout_handler>:
{
    4ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4cec:	4607      	mov	r7, r0
    4cee:	4614      	mov	r4, r2
    4cf0:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4cf2:	4610      	mov	r0, r2
    4cf4:	4619      	mov	r1, r3
    4cf6:	f006 feb2 	bl	ba5e <absolute_time_to_cc>
    4cfa:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4cfc:	4b15      	ldr	r3, [pc, #84]	; (4d54 <sys_clock_timeout_handler+0x6c>)
    4cfe:	681a      	ldr	r2, [r3, #0]
    4d00:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4d02:	601c      	str	r4, [r3, #0]
    4d04:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4d06:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4d0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4d0e:	d309      	bcc.n	4d24 <sys_clock_timeout_handler+0x3c>
	return false;
    4d10:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4d12:	f004 ffe1 	bl	9cd8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4d16:	4638      	mov	r0, r7
    4d18:	f7ff ff30 	bl	4b7c <get_comparator>
    4d1c:	42a8      	cmp	r0, r5
    4d1e:	d00e      	beq.n	4d3e <sys_clock_timeout_handler+0x56>
}
    4d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4d24:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <sys_clock_timeout_handler+0x70>)
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	0a1a      	lsrs	r2, r3, #8
    4d2a:	061b      	lsls	r3, r3, #24
    4d2c:	eb15 0803 	adds.w	r8, r5, r3
    4d30:	f142 0900 	adc.w	r9, r2, #0
    4d34:	4b09      	ldr	r3, [pc, #36]	; (4d5c <sys_clock_timeout_handler+0x74>)
    4d36:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    4d3a:	2401      	movs	r4, #1
    4d3c:	e7e9      	b.n	4d12 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    4d3e:	b11c      	cbz	r4, 4d48 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    4d40:	4638      	mov	r0, r7
    4d42:	f7ff ff23 	bl	4b8c <event_enable>
}
    4d46:	e7eb      	b.n	4d20 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4d48:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4d4c:	4638      	mov	r0, r7
    4d4e:	f7ff ff0b 	bl	4b68 <set_comparator>
    4d52:	e7f5      	b.n	4d40 <sys_clock_timeout_handler+0x58>
    4d54:	20004408 	.word	0x20004408
    4d58:	20004be8 	.word	0x20004be8
    4d5c:	200043f0 	.word	0x200043f0

00004d60 <z_nrf_rtc_timer_read>:
{
    4d60:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4d62:	4b0d      	ldr	r3, [pc, #52]	; (4d98 <z_nrf_rtc_timer_read+0x38>)
    4d64:	681c      	ldr	r4, [r3, #0]
    4d66:	0a25      	lsrs	r5, r4, #8
    4d68:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4d6a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4d6e:	f7ff ff21 	bl	4bb4 <counter>
    4d72:	4603      	mov	r3, r0
	val += cntr;
    4d74:	1900      	adds	r0, r0, r4
    4d76:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4d7e:	d20a      	bcs.n	4d96 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4d80:	4b06      	ldr	r3, [pc, #24]	; (4d9c <z_nrf_rtc_timer_read+0x3c>)
    4d82:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d86:	4290      	cmp	r0, r2
    4d88:	eb71 0303 	sbcs.w	r3, r1, r3
    4d8c:	d203      	bcs.n	4d96 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4d8e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4d92:	f141 0100 	adc.w	r1, r1, #0
}
    4d96:	bd38      	pop	{r3, r4, r5, pc}
    4d98:	20004be8 	.word	0x20004be8
    4d9c:	200043f0 	.word	0x200043f0

00004da0 <compare_set_nolocks>:
{
    4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4da2:	4606      	mov	r6, r0
    4da4:	4614      	mov	r4, r2
    4da6:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4da8:	4610      	mov	r0, r2
    4daa:	4619      	mov	r1, r3
    4dac:	f006 fe57 	bl	ba5e <absolute_time_to_cc>
    4db0:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4db2:	f7ff ffd5 	bl	4d60 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4db6:	42a0      	cmp	r0, r4
    4db8:	eb71 0305 	sbcs.w	r3, r1, r5
    4dbc:	d21d      	bcs.n	4dfa <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4dbe:	1a23      	subs	r3, r4, r0
    4dc0:	eb65 0101 	sbc.w	r1, r5, r1
    4dc4:	4a1b      	ldr	r2, [pc, #108]	; (4e34 <compare_set_nolocks+0x94>)
    4dc6:	4293      	cmp	r3, r2
    4dc8:	f171 0300 	sbcs.w	r3, r1, #0
    4dcc:	d22f      	bcs.n	4e2e <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    4dce:	4b1a      	ldr	r3, [pc, #104]	; (4e38 <compare_set_nolocks+0x98>)
    4dd0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4dd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4dd8:	42ab      	cmp	r3, r5
    4dda:	bf08      	it	eq
    4ddc:	42a2      	cmpeq	r2, r4
    4dde:	d01a      	beq.n	4e16 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4de0:	4639      	mov	r1, r7
    4de2:	4630      	mov	r0, r6
    4de4:	f006 fe4c 	bl	ba80 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4de8:	4639      	mov	r1, r7
    4dea:	f006 fe28 	bl	ba3e <counter_sub>
    4dee:	1900      	adds	r0, r0, r4
    4df0:	f145 0300 	adc.w	r3, r5, #0
    4df4:	4604      	mov	r4, r0
    4df6:	461d      	mov	r5, r3
    4df8:	e00d      	b.n	4e16 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4dfa:	2301      	movs	r3, #1
    4dfc:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4dfe:	4a0f      	ldr	r2, [pc, #60]	; (4e3c <compare_set_nolocks+0x9c>)
    4e00:	f3bf 8f5b 	dmb	ish
    4e04:	e852 1f00 	ldrex	r1, [r2]
    4e08:	4319      	orrs	r1, r3
    4e0a:	e842 1000 	strex	r0, r1, [r2]
    4e0e:	2800      	cmp	r0, #0
    4e10:	d1f8      	bne.n	4e04 <compare_set_nolocks+0x64>
    4e12:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4e16:	4b08      	ldr	r3, [pc, #32]	; (4e38 <compare_set_nolocks+0x98>)
    4e18:	0132      	lsls	r2, r6, #4
    4e1a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4e1e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4e22:	9906      	ldr	r1, [sp, #24]
    4e24:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4e26:	9b07      	ldr	r3, [sp, #28]
    4e28:	6073      	str	r3, [r6, #4]
	return ret;
    4e2a:	2000      	movs	r0, #0
}
    4e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    4e2e:	f06f 0015 	mvn.w	r0, #21
    4e32:	e7fb      	b.n	4e2c <compare_set_nolocks+0x8c>
    4e34:	01000001 	.word	0x01000001
    4e38:	200043f8 	.word	0x200043f8
    4e3c:	20004be0 	.word	0x20004be0

00004e40 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4e40:	b530      	push	{r4, r5, lr}
    4e42:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4e44:	2300      	movs	r3, #0
    4e46:	4a1d      	ldr	r2, [pc, #116]	; (4ebc <sys_clock_driver_init+0x7c>)
    4e48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	dd24      	ble.n	4e9a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    4e50:	4c1a      	ldr	r4, [pc, #104]	; (4ebc <sys_clock_driver_init+0x7c>)
    4e52:	2502      	movs	r5, #2
    4e54:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e58:	4b19      	ldr	r3, [pc, #100]	; (4ec0 <sys_clock_driver_init+0x80>)
    4e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4e5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4e62:	2200      	movs	r2, #0
    4e64:	2101      	movs	r1, #1
    4e66:	2011      	movs	r0, #17
    4e68:	f7fd ffe8 	bl	2e3c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4e6c:	2011      	movs	r0, #17
    4e6e:	f7fd ffc9 	bl	2e04 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4e72:	2301      	movs	r3, #1
    4e74:	60a3      	str	r3, [r4, #8]
    4e76:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4e78:	4a12      	ldr	r2, [pc, #72]	; (4ec4 <sys_clock_driver_init+0x84>)
    4e7a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4e7c:	2400      	movs	r4, #0
    4e7e:	9401      	str	r4, [sp, #4]
    4e80:	4b11      	ldr	r3, [pc, #68]	; (4ec8 <sys_clock_driver_init+0x88>)
    4e82:	9300      	str	r3, [sp, #0]
    4e84:	4a11      	ldr	r2, [pc, #68]	; (4ecc <sys_clock_driver_init+0x8c>)
    4e86:	2300      	movs	r3, #0
    4e88:	4620      	mov	r0, r4
    4e8a:	f006 fe34 	bl	baf6 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4e8e:	4628      	mov	r0, r5
    4e90:	f7ff f924 	bl	40dc <z_nrf_clock_control_lf_on>

	return 0;
}
    4e94:	4620      	mov	r0, r4
    4e96:	b003      	add	sp, #12
    4e98:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e9a:	4a0d      	ldr	r2, [pc, #52]	; (4ed0 <sys_clock_driver_init+0x90>)
    4e9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ea8:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4eb0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4eb2:	4902      	ldr	r1, [pc, #8]	; (4ebc <sys_clock_driver_init+0x7c>)
    4eb4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4eb8:	3301      	adds	r3, #1
    4eba:	e7c7      	b.n	4e4c <sys_clock_driver_init+0xc>
    4ebc:	40011000 	.word	0x40011000
    4ec0:	e000e100 	.word	0xe000e100
    4ec4:	20004be4 	.word	0x20004be4
    4ec8:	00004ce9 	.word	0x00004ce9
    4ecc:	007fffff 	.word	0x007fffff
    4ed0:	200043f8 	.word	0x200043f8

00004ed4 <process_channel>:
{
    4ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ed8:	b082      	sub	sp, #8
    4eda:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4edc:	f7ff fe98 	bl	4c10 <channel_processing_check_and_clear>
    4ee0:	b910      	cbnz	r0, 4ee8 <process_channel+0x14>
}
    4ee2:	b002      	add	sp, #8
    4ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4ee8:	f7ff ff3a 	bl	4d60 <z_nrf_rtc_timer_read>
    4eec:	4682      	mov	sl, r0
    4eee:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    4ef0:	f006 fdb8 	bl	ba64 <full_int_lock>
    4ef4:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    4ef6:	4b13      	ldr	r3, [pc, #76]	; (4f44 <process_channel+0x70>)
    4ef8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4efc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4f00:	45c2      	cmp	sl, r8
    4f02:	eb76 0309 	sbcs.w	r3, r6, r9
    4f06:	d20b      	bcs.n	4f20 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4f08:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4f0a:	4628      	mov	r0, r5
    4f0c:	f006 fdb3 	bl	ba76 <full_int_unlock>
		if (handler) {
    4f10:	2e00      	cmp	r6, #0
    4f12:	d0e6      	beq.n	4ee2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4f14:	9700      	str	r7, [sp, #0]
    4f16:	4642      	mov	r2, r8
    4f18:	464b      	mov	r3, r9
    4f1a:	4620      	mov	r0, r4
    4f1c:	47b0      	blx	r6
}
    4f1e:	e7e0      	b.n	4ee2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    4f20:	4a08      	ldr	r2, [pc, #32]	; (4f44 <process_channel+0x70>)
    4f22:	0123      	lsls	r3, r4, #4
    4f24:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4f28:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4f2a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4f2c:	2000      	movs	r0, #0
    4f2e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f38:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4f3c:	4620      	mov	r0, r4
    4f3e:	f7ff fe2f 	bl	4ba0 <event_disable>
    4f42:	e7e2      	b.n	4f0a <process_channel+0x36>
    4f44:	200043f8 	.word	0x200043f8

00004f48 <rtc_nrf_isr>:
{
    4f48:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4f4a:	4b0e      	ldr	r3, [pc, #56]	; (4f84 <rtc_nrf_isr+0x3c>)
    4f4c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4f50:	f013 0f02 	tst.w	r3, #2
    4f54:	d00d      	beq.n	4f72 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f56:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <rtc_nrf_isr+0x3c>)
    4f58:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4f5c:	b14b      	cbz	r3, 4f72 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f5e:	4b09      	ldr	r3, [pc, #36]	; (4f84 <rtc_nrf_isr+0x3c>)
    4f60:	2200      	movs	r2, #0
    4f62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4f66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    4f6a:	4a07      	ldr	r2, [pc, #28]	; (4f88 <rtc_nrf_isr+0x40>)
    4f6c:	6813      	ldr	r3, [r2, #0]
    4f6e:	3301      	adds	r3, #1
    4f70:	6013      	str	r3, [r2, #0]
{
    4f72:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f74:	2c00      	cmp	r4, #0
    4f76:	dd00      	ble.n	4f7a <rtc_nrf_isr+0x32>
}
    4f78:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4f7a:	4620      	mov	r0, r4
    4f7c:	f7ff ffaa 	bl	4ed4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f80:	3401      	adds	r4, #1
    4f82:	e7f7      	b.n	4f74 <rtc_nrf_isr+0x2c>
    4f84:	40011000 	.word	0x40011000
    4f88:	20004be8 	.word	0x20004be8

00004f8c <sys_clock_set_timeout>:
{
    4f8c:	b510      	push	{r4, lr}
    4f8e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4f94:	d006      	beq.n	4fa4 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f96:	2801      	cmp	r0, #1
    4f98:	dd06      	ble.n	4fa8 <sys_clock_set_timeout+0x1c>
    4f9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f9e:	da05      	bge.n	4fac <sys_clock_set_timeout+0x20>
    4fa0:	1e44      	subs	r4, r0, #1
    4fa2:	e004      	b.n	4fae <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4fa4:	480f      	ldr	r0, [pc, #60]	; (4fe4 <sys_clock_set_timeout+0x58>)
    4fa6:	e7f8      	b.n	4f9a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4fa8:	2400      	movs	r4, #0
    4faa:	e000      	b.n	4fae <sys_clock_set_timeout+0x22>
    4fac:	4c0d      	ldr	r4, [pc, #52]	; (4fe4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4fae:	f7ff fed7 	bl	4d60 <z_nrf_rtc_timer_read>
    4fb2:	4b0d      	ldr	r3, [pc, #52]	; (4fe8 <sys_clock_set_timeout+0x5c>)
    4fb4:	6819      	ldr	r1, [r3, #0]
    4fb6:	685b      	ldr	r3, [r3, #4]
    4fb8:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4fba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4fbe:	d300      	bcc.n	4fc2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    4fc0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4fc2:	4420      	add	r0, r4
    4fc4:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4fc6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4fca:	d300      	bcc.n	4fce <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4fcc:	4a05      	ldr	r2, [pc, #20]	; (4fe4 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4fce:	2000      	movs	r0, #0
    4fd0:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4fd2:	9001      	str	r0, [sp, #4]
    4fd4:	4905      	ldr	r1, [pc, #20]	; (4fec <sys_clock_set_timeout+0x60>)
    4fd6:	9100      	str	r1, [sp, #0]
    4fd8:	f143 0300 	adc.w	r3, r3, #0
    4fdc:	f006 fd8b 	bl	baf6 <compare_set>
}
    4fe0:	b002      	add	sp, #8
    4fe2:	bd10      	pop	{r4, pc}
    4fe4:	007fffff 	.word	0x007fffff
    4fe8:	20004408 	.word	0x20004408
    4fec:	00004ce9 	.word	0x00004ce9

00004ff0 <sys_clock_elapsed>:
{
    4ff0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4ff2:	f7ff feb5 	bl	4d60 <z_nrf_rtc_timer_read>
    4ff6:	4b02      	ldr	r3, [pc, #8]	; (5000 <sys_clock_elapsed+0x10>)
    4ff8:	681b      	ldr	r3, [r3, #0]
}
    4ffa:	1ac0      	subs	r0, r0, r3
    4ffc:	bd08      	pop	{r3, pc}
    4ffe:	bf00      	nop
    5000:	20004408 	.word	0x20004408

00005004 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    5004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5008:	460c      	mov	r4, r1
    500a:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    500c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5010:	d002      	beq.n	5018 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5012:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    5016:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    5018:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    501c:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    5020:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    5024:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    5028:	f010 0f20 	tst.w	r0, #32
    502c:	d01d      	beq.n	506a <nrf_pin_configure+0x66>
    502e:	b1fb      	cbz	r3, 5070 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    5030:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5034:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5038:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    503a:	f013 0f01 	tst.w	r3, #1
    503e:	d019      	beq.n	5074 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    5040:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5044:	096d      	lsrs	r5, r5, #5
    5046:	d023      	beq.n	5090 <nrf_pin_configure+0x8c>
    5048:	bb2d      	cbnz	r5, 5096 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    504a:	4d19      	ldr	r5, [pc, #100]	; (50b0 <nrf_pin_configure+0xac>)
    504c:	f240 232e 	movw	r3, #558	; 0x22e
    5050:	462a      	mov	r2, r5
    5052:	4918      	ldr	r1, [pc, #96]	; (50b4 <nrf_pin_configure+0xb0>)
    5054:	4818      	ldr	r0, [pc, #96]	; (50b8 <nrf_pin_configure+0xb4>)
    5056:	f005 fd43 	bl	aae0 <assert_print>
    505a:	f240 212e 	movw	r1, #558	; 0x22e
    505e:	4628      	mov	r0, r5
    5060:	f005 fd37 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5068:	e016      	b.n	5098 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    506a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    506e:	e7e1      	b.n	5034 <nrf_pin_configure+0x30>
    switch (port)
    5070:	2300      	movs	r3, #0
    5072:	e7df      	b.n	5034 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5074:	4e0e      	ldr	r6, [pc, #56]	; (50b0 <nrf_pin_configure+0xac>)
    5076:	f240 2329 	movw	r3, #553	; 0x229
    507a:	4632      	mov	r2, r6
    507c:	490f      	ldr	r1, [pc, #60]	; (50bc <nrf_pin_configure+0xb8>)
    507e:	480e      	ldr	r0, [pc, #56]	; (50b8 <nrf_pin_configure+0xb4>)
    5080:	f005 fd2e 	bl	aae0 <assert_print>
    5084:	f240 2129 	movw	r1, #553	; 0x229
    5088:	4630      	mov	r0, r6
    508a:	f005 fd22 	bl	aad2 <assert_post_action>
    508e:	e7d7      	b.n	5040 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    5090:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5094:	e000      	b.n	5098 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5096:	4b0a      	ldr	r3, [pc, #40]	; (50c0 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5098:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    509c:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    50a0:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    50a4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    50a8:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    50ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50b0:	0000d708 	.word	0x0000d708
    50b4:	0000cb38 	.word	0x0000cb38
    50b8:	0000c478 	.word	0x0000c478
    50bc:	0000d73c 	.word	0x0000d73c
    50c0:	50000300 	.word	0x50000300

000050c4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    50c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50c8:	4605      	mov	r5, r0
    50ca:	460e      	mov	r6, r1
    50cc:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    50ce:	2400      	movs	r4, #0
    50d0:	e04e      	b.n	5170 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    50d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    50d6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    50da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    50de:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    50e2:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    50e6:	f013 0f20 	tst.w	r3, #32
    50ea:	d01f      	beq.n	512c <pinctrl_configure_pins+0x68>
    50ec:	b109      	cbz	r1, 50f2 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    50ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    50f2:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50f6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50f8:	f012 0f01 	tst.w	r2, #1
    50fc:	d019      	beq.n	5132 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    50fe:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5102:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5106:	d023      	beq.n	5150 <pinctrl_configure_pins+0x8c>
    5108:	bb2b      	cbnz	r3, 5156 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    510a:	f8df 9344 	ldr.w	r9, [pc, #836]	; 5450 <pinctrl_configure_pins+0x38c>
    510e:	f240 232e 	movw	r3, #558	; 0x22e
    5112:	464a      	mov	r2, r9
    5114:	49cf      	ldr	r1, [pc, #828]	; (5454 <pinctrl_configure_pins+0x390>)
    5116:	48d0      	ldr	r0, [pc, #832]	; (5458 <pinctrl_configure_pins+0x394>)
    5118:	f005 fce2 	bl	aae0 <assert_print>
    511c:	f240 212e 	movw	r1, #558	; 0x22e
    5120:	4648      	mov	r0, r9
    5122:	f005 fcd6 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    512a:	e015      	b.n	5158 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    512c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5130:	e7df      	b.n	50f2 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5132:	f8df a31c 	ldr.w	sl, [pc, #796]	; 5450 <pinctrl_configure_pins+0x38c>
    5136:	f240 2329 	movw	r3, #553	; 0x229
    513a:	4652      	mov	r2, sl
    513c:	49c7      	ldr	r1, [pc, #796]	; (545c <pinctrl_configure_pins+0x398>)
    513e:	48c6      	ldr	r0, [pc, #792]	; (5458 <pinctrl_configure_pins+0x394>)
    5140:	f005 fcce 	bl	aae0 <assert_print>
    5144:	f240 2129 	movw	r1, #553	; 0x229
    5148:	4650      	mov	r0, sl
    514a:	f005 fcc2 	bl	aad2 <assert_post_action>
    514e:	e7d6      	b.n	50fe <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    5150:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5154:	e000      	b.n	5158 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5156:	4ac2      	ldr	r2, [pc, #776]	; (5460 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5158:	2101      	movs	r1, #1
    515a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    515e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5162:	460a      	mov	r2, r1
    5164:	f855 0008 	ldr.w	r0, [r5, r8]
    5168:	f7ff ff4c 	bl	5004 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    516c:	3401      	adds	r4, #1
    516e:	b2e4      	uxtb	r4, r4
    5170:	42b4      	cmp	r4, r6
    5172:	f080 841e 	bcs.w	59b2 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    5176:	ea4f 0884 	mov.w	r8, r4, lsl #2
    517a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    517e:	0c1a      	lsrs	r2, r3, #16
    5180:	2a22      	cmp	r2, #34	; 0x22
    5182:	f200 8418 	bhi.w	59b6 <pinctrl_configure_pins+0x8f2>
    5186:	a101      	add	r1, pc, #4	; (adr r1, 518c <pinctrl_configure_pins+0xc8>)
    5188:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    518c:	000050d3 	.word	0x000050d3
    5190:	00005219 	.word	0x00005219
    5194:	0000522f 	.word	0x0000522f
    5198:	000052cf 	.word	0x000052cf
    519c:	000052e5 	.word	0x000052e5
    51a0:	00005385 	.word	0x00005385
    51a4:	00005425 	.word	0x00005425
    51a8:	000059b7 	.word	0x000059b7
    51ac:	000059b7 	.word	0x000059b7
    51b0:	000059b7 	.word	0x000059b7
    51b4:	000059b7 	.word	0x000059b7
    51b8:	0000543b 	.word	0x0000543b
    51bc:	00005465 	.word	0x00005465
    51c0:	000059b7 	.word	0x000059b7
    51c4:	000059b7 	.word	0x000059b7
    51c8:	000059b7 	.word	0x000059b7
    51cc:	000059b7 	.word	0x000059b7
    51d0:	000059b7 	.word	0x000059b7
    51d4:	000059b7 	.word	0x000059b7
    51d8:	000059b7 	.word	0x000059b7
    51dc:	000059b7 	.word	0x000059b7
    51e0:	000059b7 	.word	0x000059b7
    51e4:	0000547b 	.word	0x0000547b
    51e8:	000055a1 	.word	0x000055a1
    51ec:	000056c7 	.word	0x000056c7
    51f0:	00005803 	.word	0x00005803
    51f4:	000059b7 	.word	0x000059b7
    51f8:	000059b7 	.word	0x000059b7
    51fc:	000059b7 	.word	0x000059b7
    5200:	00005929 	.word	0x00005929
    5204:	0000593f 	.word	0x0000593f
    5208:	00005955 	.word	0x00005955
    520c:	0000596b 	.word	0x0000596b
    5210:	00005983 	.word	0x00005983
    5214:	0000599b 	.word	0x0000599b
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    521c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5220:	2200      	movs	r2, #0
    5222:	4611      	mov	r1, r2
    5224:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5228:	f7ff feec 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    522c:	e79e      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5232:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5236:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    523a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    523e:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5242:	f013 0f20 	tst.w	r3, #32
    5246:	d01f      	beq.n	5288 <pinctrl_configure_pins+0x1c4>
    5248:	b30a      	cbz	r2, 528e <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    524a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    524e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5252:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5254:	f013 0f01 	tst.w	r3, #1
    5258:	d01b      	beq.n	5292 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    525a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    525e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5262:	d025      	beq.n	52b0 <pinctrl_configure_pins+0x1ec>
    5264:	bb3b      	cbnz	r3, 52b6 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    5266:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 5450 <pinctrl_configure_pins+0x38c>
    526a:	f240 232e 	movw	r3, #558	; 0x22e
    526e:	464a      	mov	r2, r9
    5270:	4978      	ldr	r1, [pc, #480]	; (5454 <pinctrl_configure_pins+0x390>)
    5272:	4879      	ldr	r0, [pc, #484]	; (5458 <pinctrl_configure_pins+0x394>)
    5274:	f005 fc34 	bl	aae0 <assert_print>
    5278:	f240 212e 	movw	r1, #558	; 0x22e
    527c:	4648      	mov	r0, r9
    527e:	f005 fc28 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5286:	e017      	b.n	52b8 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    5288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    528c:	e7df      	b.n	524e <pinctrl_configure_pins+0x18a>
    switch (port)
    528e:	2300      	movs	r3, #0
    5290:	e7dd      	b.n	524e <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5292:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5450 <pinctrl_configure_pins+0x38c>
    5296:	f240 2329 	movw	r3, #553	; 0x229
    529a:	4652      	mov	r2, sl
    529c:	496f      	ldr	r1, [pc, #444]	; (545c <pinctrl_configure_pins+0x398>)
    529e:	486e      	ldr	r0, [pc, #440]	; (5458 <pinctrl_configure_pins+0x394>)
    52a0:	f005 fc1e 	bl	aae0 <assert_print>
    52a4:	f240 2129 	movw	r1, #553	; 0x229
    52a8:	4650      	mov	r0, sl
    52aa:	f005 fc12 	bl	aad2 <assert_post_action>
    52ae:	e7d4      	b.n	525a <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    52b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52b4:	e000      	b.n	52b8 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52b6:	4a6a      	ldr	r2, [pc, #424]	; (5460 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    52b8:	2101      	movs	r1, #1
    52ba:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    52be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    52c2:	460a      	mov	r2, r1
    52c4:	f855 0008 	ldr.w	r0, [r5, r8]
    52c8:	f7ff fe9c 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    52cc:	e74e      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    52ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    52d2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    52d6:	2200      	movs	r2, #0
    52d8:	4611      	mov	r1, r2
    52da:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    52de:	f7ff fe91 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    52e2:	e743      	b.n	516c <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    52e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    52e8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    52ec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    52f0:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    52f4:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    52f8:	f013 0f20 	tst.w	r3, #32
    52fc:	d01f      	beq.n	533e <pinctrl_configure_pins+0x27a>
    52fe:	b30a      	cbz	r2, 5344 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    5300:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5304:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5308:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    530a:	f013 0f01 	tst.w	r3, #1
    530e:	d01b      	beq.n	5348 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    5310:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5314:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5318:	d025      	beq.n	5366 <pinctrl_configure_pins+0x2a2>
    531a:	bb3b      	cbnz	r3, 536c <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    531c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 5450 <pinctrl_configure_pins+0x38c>
    5320:	f240 232e 	movw	r3, #558	; 0x22e
    5324:	464a      	mov	r2, r9
    5326:	494b      	ldr	r1, [pc, #300]	; (5454 <pinctrl_configure_pins+0x390>)
    5328:	484b      	ldr	r0, [pc, #300]	; (5458 <pinctrl_configure_pins+0x394>)
    532a:	f005 fbd9 	bl	aae0 <assert_print>
    532e:	f240 212e 	movw	r1, #558	; 0x22e
    5332:	4648      	mov	r0, r9
    5334:	f005 fbcd 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5338:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    533c:	e017      	b.n	536e <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    533e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5342:	e7df      	b.n	5304 <pinctrl_configure_pins+0x240>
    switch (port)
    5344:	2300      	movs	r3, #0
    5346:	e7dd      	b.n	5304 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5348:	f8df a104 	ldr.w	sl, [pc, #260]	; 5450 <pinctrl_configure_pins+0x38c>
    534c:	f240 2329 	movw	r3, #553	; 0x229
    5350:	4652      	mov	r2, sl
    5352:	4942      	ldr	r1, [pc, #264]	; (545c <pinctrl_configure_pins+0x398>)
    5354:	4840      	ldr	r0, [pc, #256]	; (5458 <pinctrl_configure_pins+0x394>)
    5356:	f005 fbc3 	bl	aae0 <assert_print>
    535a:	f240 2129 	movw	r1, #553	; 0x229
    535e:	4650      	mov	r0, sl
    5360:	f005 fbb7 	bl	aad2 <assert_post_action>
    5364:	e7d4      	b.n	5310 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    5366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    536a:	e000      	b.n	536e <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    536c:	4a3c      	ldr	r2, [pc, #240]	; (5460 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    536e:	2101      	movs	r1, #1
    5370:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5374:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5378:	2200      	movs	r2, #0
    537a:	f855 0008 	ldr.w	r0, [r5, r8]
    537e:	f7ff fe41 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5382:	e6f3      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5388:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    538c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5390:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5394:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5398:	f013 0f20 	tst.w	r3, #32
    539c:	d01f      	beq.n	53de <pinctrl_configure_pins+0x31a>
    539e:	b30a      	cbz	r2, 53e4 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    53a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    53a4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    53a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    53aa:	f013 0f01 	tst.w	r3, #1
    53ae:	d01b      	beq.n	53e8 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    53b0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    53b4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    53b8:	d025      	beq.n	5406 <pinctrl_configure_pins+0x342>
    53ba:	bb3b      	cbnz	r3, 540c <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    53bc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5450 <pinctrl_configure_pins+0x38c>
    53c0:	f240 232e 	movw	r3, #558	; 0x22e
    53c4:	464a      	mov	r2, r9
    53c6:	4923      	ldr	r1, [pc, #140]	; (5454 <pinctrl_configure_pins+0x390>)
    53c8:	4823      	ldr	r0, [pc, #140]	; (5458 <pinctrl_configure_pins+0x394>)
    53ca:	f005 fb89 	bl	aae0 <assert_print>
    53ce:	f240 212e 	movw	r1, #558	; 0x22e
    53d2:	4648      	mov	r0, r9
    53d4:	f005 fb7d 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    53d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    53dc:	e017      	b.n	540e <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    53de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53e2:	e7df      	b.n	53a4 <pinctrl_configure_pins+0x2e0>
    switch (port)
    53e4:	2300      	movs	r3, #0
    53e6:	e7dd      	b.n	53a4 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    53e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 5450 <pinctrl_configure_pins+0x38c>
    53ec:	f240 2329 	movw	r3, #553	; 0x229
    53f0:	4652      	mov	r2, sl
    53f2:	491a      	ldr	r1, [pc, #104]	; (545c <pinctrl_configure_pins+0x398>)
    53f4:	4818      	ldr	r0, [pc, #96]	; (5458 <pinctrl_configure_pins+0x394>)
    53f6:	f005 fb73 	bl	aae0 <assert_print>
    53fa:	f240 2129 	movw	r1, #553	; 0x229
    53fe:	4650      	mov	r0, sl
    5400:	f005 fb67 	bl	aad2 <assert_post_action>
    5404:	e7d4      	b.n	53b0 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    5406:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    540a:	e000      	b.n	540e <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    540c:	4a14      	ldr	r2, [pc, #80]	; (5460 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    540e:	2101      	movs	r1, #1
    5410:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5414:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5418:	460a      	mov	r2, r1
    541a:	f855 0008 	ldr.w	r0, [r5, r8]
    541e:	f7ff fdf1 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5422:	e6a3      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5428:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    542c:	2200      	movs	r2, #0
    542e:	4611      	mov	r1, r2
    5430:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5434:	f7ff fde6 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5438:	e698      	b.n	516c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    543a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    543e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5442:	2200      	movs	r2, #0
    5444:	4611      	mov	r1, r2
    5446:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    544a:	f7ff fddb 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    544e:	e68d      	b.n	516c <pinctrl_configure_pins+0xa8>
    5450:	0000d708 	.word	0x0000d708
    5454:	0000cb38 	.word	0x0000cb38
    5458:	0000c478 	.word	0x0000c478
    545c:	0000d73c 	.word	0x0000d73c
    5460:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5468:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    546c:	2200      	movs	r2, #0
    546e:	4611      	mov	r1, r2
    5470:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5474:	f7ff fdc6 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5478:	e678      	b.n	516c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    547a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    547e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5482:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5486:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    548a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    548e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5492:	d144      	bne.n	551e <pinctrl_configure_pins+0x45a>
    switch (port)
    5494:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5498:	d01f      	beq.n	54da <pinctrl_configure_pins+0x416>
    549a:	b10b      	cbz	r3, 54a0 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    549c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    54a0:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    54a4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54a6:	f012 0f01 	tst.w	r2, #1
    54aa:	d019      	beq.n	54e0 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    54ac:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54b0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    54b4:	d023      	beq.n	54fe <pinctrl_configure_pins+0x43a>
    54b6:	bb2b      	cbnz	r3, 5504 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    54b8:	f8df 9300 	ldr.w	r9, [pc, #768]	; 57bc <pinctrl_configure_pins+0x6f8>
    54bc:	f240 232e 	movw	r3, #558	; 0x22e
    54c0:	464a      	mov	r2, r9
    54c2:	49bf      	ldr	r1, [pc, #764]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    54c4:	48bf      	ldr	r0, [pc, #764]	; (57c4 <pinctrl_configure_pins+0x700>)
    54c6:	f005 fb0b 	bl	aae0 <assert_print>
    54ca:	f240 212e 	movw	r1, #558	; 0x22e
    54ce:	4648      	mov	r0, r9
    54d0:	f005 faff 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    54d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    54d8:	e015      	b.n	5506 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    54da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    54de:	e7df      	b.n	54a0 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54e0:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 57bc <pinctrl_configure_pins+0x6f8>
    54e4:	f240 2329 	movw	r3, #553	; 0x229
    54e8:	4652      	mov	r2, sl
    54ea:	49b7      	ldr	r1, [pc, #732]	; (57c8 <pinctrl_configure_pins+0x704>)
    54ec:	48b5      	ldr	r0, [pc, #724]	; (57c4 <pinctrl_configure_pins+0x700>)
    54ee:	f005 faf7 	bl	aae0 <assert_print>
    54f2:	f240 2129 	movw	r1, #553	; 0x229
    54f6:	4650      	mov	r0, sl
    54f8:	f005 faeb 	bl	aad2 <assert_post_action>
    54fc:	e7d6      	b.n	54ac <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    54fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5502:	e000      	b.n	5506 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5504:	4ab1      	ldr	r2, [pc, #708]	; (57cc <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5506:	2301      	movs	r3, #1
    5508:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    550c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5510:	2201      	movs	r2, #1
    5512:	4611      	mov	r1, r2
    5514:	f855 0008 	ldr.w	r0, [r5, r8]
    5518:	f7ff fd74 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    551c:	e626      	b.n	516c <pinctrl_configure_pins+0xa8>
    switch (port)
    551e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5522:	d01f      	beq.n	5564 <pinctrl_configure_pins+0x4a0>
    5524:	b30b      	cbz	r3, 556a <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    5526:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    552a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    552e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5530:	f013 0f01 	tst.w	r3, #1
    5534:	d01b      	beq.n	556e <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    5536:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    553a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    553e:	d025      	beq.n	558c <pinctrl_configure_pins+0x4c8>
    5540:	bb3b      	cbnz	r3, 5592 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    5542:	f8df 9278 	ldr.w	r9, [pc, #632]	; 57bc <pinctrl_configure_pins+0x6f8>
    5546:	f240 232e 	movw	r3, #558	; 0x22e
    554a:	464a      	mov	r2, r9
    554c:	499c      	ldr	r1, [pc, #624]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    554e:	489d      	ldr	r0, [pc, #628]	; (57c4 <pinctrl_configure_pins+0x700>)
    5550:	f005 fac6 	bl	aae0 <assert_print>
    5554:	f240 212e 	movw	r1, #558	; 0x22e
    5558:	4648      	mov	r0, r9
    555a:	f005 faba 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    555e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5562:	e017      	b.n	5594 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    5564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5568:	e7df      	b.n	552a <pinctrl_configure_pins+0x466>
    switch (port)
    556a:	2300      	movs	r3, #0
    556c:	e7dd      	b.n	552a <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    556e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 57bc <pinctrl_configure_pins+0x6f8>
    5572:	f240 2329 	movw	r3, #553	; 0x229
    5576:	4652      	mov	r2, sl
    5578:	4993      	ldr	r1, [pc, #588]	; (57c8 <pinctrl_configure_pins+0x704>)
    557a:	4892      	ldr	r0, [pc, #584]	; (57c4 <pinctrl_configure_pins+0x700>)
    557c:	f005 fab0 	bl	aae0 <assert_print>
    5580:	f240 2129 	movw	r1, #553	; 0x229
    5584:	4650      	mov	r0, sl
    5586:	f005 faa4 	bl	aad2 <assert_post_action>
    558a:	e7d4      	b.n	5536 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    558c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5590:	e000      	b.n	5594 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5592:	4a8e      	ldr	r2, [pc, #568]	; (57cc <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5594:	2301      	movs	r3, #1
    5596:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    559a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    559e:	e7b7      	b.n	5510 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    55a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    55a4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    55a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    55ac:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    55b0:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    55b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    55b8:	d144      	bne.n	5644 <pinctrl_configure_pins+0x580>
    switch (port)
    55ba:	ea5f 1359 	movs.w	r3, r9, lsr #5
    55be:	d01f      	beq.n	5600 <pinctrl_configure_pins+0x53c>
    55c0:	b10b      	cbz	r3, 55c6 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    55c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    55c6:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    55ca:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55cc:	f012 0f01 	tst.w	r2, #1
    55d0:	d019      	beq.n	5606 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    55d2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55d6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    55da:	d023      	beq.n	5624 <pinctrl_configure_pins+0x560>
    55dc:	bb2b      	cbnz	r3, 562a <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    55de:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 57bc <pinctrl_configure_pins+0x6f8>
    55e2:	f240 232e 	movw	r3, #558	; 0x22e
    55e6:	464a      	mov	r2, r9
    55e8:	4975      	ldr	r1, [pc, #468]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    55ea:	4876      	ldr	r0, [pc, #472]	; (57c4 <pinctrl_configure_pins+0x700>)
    55ec:	f005 fa78 	bl	aae0 <assert_print>
    55f0:	f240 212e 	movw	r1, #558	; 0x22e
    55f4:	4648      	mov	r0, r9
    55f6:	f005 fa6c 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    55fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    55fe:	e015      	b.n	562c <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    5600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5604:	e7df      	b.n	55c6 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5606:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 57bc <pinctrl_configure_pins+0x6f8>
    560a:	f240 2329 	movw	r3, #553	; 0x229
    560e:	4652      	mov	r2, sl
    5610:	496d      	ldr	r1, [pc, #436]	; (57c8 <pinctrl_configure_pins+0x704>)
    5612:	486c      	ldr	r0, [pc, #432]	; (57c4 <pinctrl_configure_pins+0x700>)
    5614:	f005 fa64 	bl	aae0 <assert_print>
    5618:	f240 2129 	movw	r1, #553	; 0x229
    561c:	4650      	mov	r0, sl
    561e:	f005 fa58 	bl	aad2 <assert_post_action>
    5622:	e7d6      	b.n	55d2 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    5624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5628:	e000      	b.n	562c <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    562a:	4a68      	ldr	r2, [pc, #416]	; (57cc <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    562c:	2301      	movs	r3, #1
    562e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5632:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5636:	2201      	movs	r2, #1
    5638:	4611      	mov	r1, r2
    563a:	f855 0008 	ldr.w	r0, [r5, r8]
    563e:	f7ff fce1 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5642:	e593      	b.n	516c <pinctrl_configure_pins+0xa8>
    switch (port)
    5644:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5648:	d01f      	beq.n	568a <pinctrl_configure_pins+0x5c6>
    564a:	b30b      	cbz	r3, 5690 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    564c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5650:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5654:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5656:	f013 0f01 	tst.w	r3, #1
    565a:	d01b      	beq.n	5694 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    565c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5660:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5664:	d025      	beq.n	56b2 <pinctrl_configure_pins+0x5ee>
    5666:	bb3b      	cbnz	r3, 56b8 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    5668:	f8df 9150 	ldr.w	r9, [pc, #336]	; 57bc <pinctrl_configure_pins+0x6f8>
    566c:	f240 232e 	movw	r3, #558	; 0x22e
    5670:	464a      	mov	r2, r9
    5672:	4953      	ldr	r1, [pc, #332]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    5674:	4853      	ldr	r0, [pc, #332]	; (57c4 <pinctrl_configure_pins+0x700>)
    5676:	f005 fa33 	bl	aae0 <assert_print>
    567a:	f240 212e 	movw	r1, #558	; 0x22e
    567e:	4648      	mov	r0, r9
    5680:	f005 fa27 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5684:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5688:	e017      	b.n	56ba <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    568a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    568e:	e7df      	b.n	5650 <pinctrl_configure_pins+0x58c>
    switch (port)
    5690:	2300      	movs	r3, #0
    5692:	e7dd      	b.n	5650 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5694:	f8df a124 	ldr.w	sl, [pc, #292]	; 57bc <pinctrl_configure_pins+0x6f8>
    5698:	f240 2329 	movw	r3, #553	; 0x229
    569c:	4652      	mov	r2, sl
    569e:	494a      	ldr	r1, [pc, #296]	; (57c8 <pinctrl_configure_pins+0x704>)
    56a0:	4848      	ldr	r0, [pc, #288]	; (57c4 <pinctrl_configure_pins+0x700>)
    56a2:	f005 fa1d 	bl	aae0 <assert_print>
    56a6:	f240 2129 	movw	r1, #553	; 0x229
    56aa:	4650      	mov	r0, sl
    56ac:	f005 fa11 	bl	aad2 <assert_post_action>
    56b0:	e7d4      	b.n	565c <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    56b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56b6:	e000      	b.n	56ba <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56b8:	4a44      	ldr	r2, [pc, #272]	; (57cc <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    56ba:	2301      	movs	r3, #1
    56bc:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    56c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    56c4:	e7b7      	b.n	5636 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    56c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    56ca:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    56ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    56d2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    56d6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    56da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    56de:	d144      	bne.n	576a <pinctrl_configure_pins+0x6a6>
    switch (port)
    56e0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    56e4:	d01f      	beq.n	5726 <pinctrl_configure_pins+0x662>
    56e6:	b10b      	cbz	r3, 56ec <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    56e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    56ec:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    56f0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56f2:	f012 0f01 	tst.w	r2, #1
    56f6:	d019      	beq.n	572c <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    56f8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56fc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5700:	d023      	beq.n	574a <pinctrl_configure_pins+0x686>
    5702:	bb2b      	cbnz	r3, 5750 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    5704:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 57bc <pinctrl_configure_pins+0x6f8>
    5708:	f240 232e 	movw	r3, #558	; 0x22e
    570c:	464a      	mov	r2, r9
    570e:	492c      	ldr	r1, [pc, #176]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    5710:	482c      	ldr	r0, [pc, #176]	; (57c4 <pinctrl_configure_pins+0x700>)
    5712:	f005 f9e5 	bl	aae0 <assert_print>
    5716:	f240 212e 	movw	r1, #558	; 0x22e
    571a:	4648      	mov	r0, r9
    571c:	f005 f9d9 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    5720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5724:	e015      	b.n	5752 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    5726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    572a:	e7df      	b.n	56ec <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    572c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 57bc <pinctrl_configure_pins+0x6f8>
    5730:	f240 2329 	movw	r3, #553	; 0x229
    5734:	4652      	mov	r2, sl
    5736:	4924      	ldr	r1, [pc, #144]	; (57c8 <pinctrl_configure_pins+0x704>)
    5738:	4822      	ldr	r0, [pc, #136]	; (57c4 <pinctrl_configure_pins+0x700>)
    573a:	f005 f9d1 	bl	aae0 <assert_print>
    573e:	f240 2129 	movw	r1, #553	; 0x229
    5742:	4650      	mov	r0, sl
    5744:	f005 f9c5 	bl	aad2 <assert_post_action>
    5748:	e7d6      	b.n	56f8 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    574a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    574e:	e000      	b.n	5752 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5750:	4a1e      	ldr	r2, [pc, #120]	; (57cc <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5752:	2301      	movs	r3, #1
    5754:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5758:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    575c:	2201      	movs	r2, #1
    575e:	4611      	mov	r1, r2
    5760:	f855 0008 	ldr.w	r0, [r5, r8]
    5764:	f7ff fc4e 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5768:	e500      	b.n	516c <pinctrl_configure_pins+0xa8>
    switch (port)
    576a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    576e:	d01f      	beq.n	57b0 <pinctrl_configure_pins+0x6ec>
    5770:	b30b      	cbz	r3, 57b6 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    5772:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5776:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    577a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    577c:	f013 0f01 	tst.w	r3, #1
    5780:	d026      	beq.n	57d0 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    5782:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5786:	ea5f 1359 	movs.w	r3, r9, lsr #5
    578a:	d030      	beq.n	57ee <pinctrl_configure_pins+0x72a>
    578c:	bb93      	cbnz	r3, 57f4 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    578e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 57bc <pinctrl_configure_pins+0x6f8>
    5792:	f240 232e 	movw	r3, #558	; 0x22e
    5796:	464a      	mov	r2, r9
    5798:	4909      	ldr	r1, [pc, #36]	; (57c0 <pinctrl_configure_pins+0x6fc>)
    579a:	480a      	ldr	r0, [pc, #40]	; (57c4 <pinctrl_configure_pins+0x700>)
    579c:	f005 f9a0 	bl	aae0 <assert_print>
    57a0:	f240 212e 	movw	r1, #558	; 0x22e
    57a4:	4648      	mov	r0, r9
    57a6:	f005 f994 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    57aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    57ae:	e022      	b.n	57f6 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    57b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57b4:	e7df      	b.n	5776 <pinctrl_configure_pins+0x6b2>
    switch (port)
    57b6:	2300      	movs	r3, #0
    57b8:	e7dd      	b.n	5776 <pinctrl_configure_pins+0x6b2>
    57ba:	bf00      	nop
    57bc:	0000d708 	.word	0x0000d708
    57c0:	0000cb38 	.word	0x0000cb38
    57c4:	0000c478 	.word	0x0000c478
    57c8:	0000d73c 	.word	0x0000d73c
    57cc:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57d0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 59c0 <pinctrl_configure_pins+0x8fc>
    57d4:	f240 2329 	movw	r3, #553	; 0x229
    57d8:	4652      	mov	r2, sl
    57da:	497a      	ldr	r1, [pc, #488]	; (59c4 <pinctrl_configure_pins+0x900>)
    57dc:	487a      	ldr	r0, [pc, #488]	; (59c8 <pinctrl_configure_pins+0x904>)
    57de:	f005 f97f 	bl	aae0 <assert_print>
    57e2:	f240 2129 	movw	r1, #553	; 0x229
    57e6:	4650      	mov	r0, sl
    57e8:	f005 f973 	bl	aad2 <assert_post_action>
    57ec:	e7c9      	b.n	5782 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    57ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    57f2:	e000      	b.n	57f6 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57f4:	4a75      	ldr	r2, [pc, #468]	; (59cc <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57f6:	2301      	movs	r3, #1
    57f8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    57fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5800:	e7ac      	b.n	575c <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5806:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    580a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    580e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5812:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5816:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    581a:	d144      	bne.n	58a6 <pinctrl_configure_pins+0x7e2>
    switch (port)
    581c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5820:	d01f      	beq.n	5862 <pinctrl_configure_pins+0x79e>
    5822:	b10b      	cbz	r3, 5828 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    5824:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5828:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    582c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    582e:	f012 0f01 	tst.w	r2, #1
    5832:	d019      	beq.n	5868 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    5834:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5838:	ea5f 1359 	movs.w	r3, r9, lsr #5
    583c:	d023      	beq.n	5886 <pinctrl_configure_pins+0x7c2>
    583e:	bb2b      	cbnz	r3, 588c <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    5840:	f8df 917c 	ldr.w	r9, [pc, #380]	; 59c0 <pinctrl_configure_pins+0x8fc>
    5844:	f240 232e 	movw	r3, #558	; 0x22e
    5848:	464a      	mov	r2, r9
    584a:	4961      	ldr	r1, [pc, #388]	; (59d0 <pinctrl_configure_pins+0x90c>)
    584c:	485e      	ldr	r0, [pc, #376]	; (59c8 <pinctrl_configure_pins+0x904>)
    584e:	f005 f947 	bl	aae0 <assert_print>
    5852:	f240 212e 	movw	r1, #558	; 0x22e
    5856:	4648      	mov	r0, r9
    5858:	f005 f93b 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    585c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5860:	e015      	b.n	588e <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    5862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5866:	e7df      	b.n	5828 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5868:	f8df a154 	ldr.w	sl, [pc, #340]	; 59c0 <pinctrl_configure_pins+0x8fc>
    586c:	f240 2329 	movw	r3, #553	; 0x229
    5870:	4652      	mov	r2, sl
    5872:	4954      	ldr	r1, [pc, #336]	; (59c4 <pinctrl_configure_pins+0x900>)
    5874:	4854      	ldr	r0, [pc, #336]	; (59c8 <pinctrl_configure_pins+0x904>)
    5876:	f005 f933 	bl	aae0 <assert_print>
    587a:	f240 2129 	movw	r1, #553	; 0x229
    587e:	4650      	mov	r0, sl
    5880:	f005 f927 	bl	aad2 <assert_post_action>
    5884:	e7d6      	b.n	5834 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    5886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    588a:	e000      	b.n	588e <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    588c:	4a4f      	ldr	r2, [pc, #316]	; (59cc <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    588e:	2301      	movs	r3, #1
    5890:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5894:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5898:	2201      	movs	r2, #1
    589a:	4611      	mov	r1, r2
    589c:	f855 0008 	ldr.w	r0, [r5, r8]
    58a0:	f7ff fbb0 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58a4:	e462      	b.n	516c <pinctrl_configure_pins+0xa8>
    switch (port)
    58a6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    58aa:	d01f      	beq.n	58ec <pinctrl_configure_pins+0x828>
    58ac:	b30b      	cbz	r3, 58f2 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    58ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    58b2:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    58b6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    58b8:	f013 0f01 	tst.w	r3, #1
    58bc:	d01b      	beq.n	58f6 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    58be:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58c2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    58c6:	d025      	beq.n	5914 <pinctrl_configure_pins+0x850>
    58c8:	bb3b      	cbnz	r3, 591a <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    58ca:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 59c0 <pinctrl_configure_pins+0x8fc>
    58ce:	f240 232e 	movw	r3, #558	; 0x22e
    58d2:	464a      	mov	r2, r9
    58d4:	493e      	ldr	r1, [pc, #248]	; (59d0 <pinctrl_configure_pins+0x90c>)
    58d6:	483c      	ldr	r0, [pc, #240]	; (59c8 <pinctrl_configure_pins+0x904>)
    58d8:	f005 f902 	bl	aae0 <assert_print>
    58dc:	f240 212e 	movw	r1, #558	; 0x22e
    58e0:	4648      	mov	r0, r9
    58e2:	f005 f8f6 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    58e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    58ea:	e017      	b.n	591c <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    58ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    58f0:	e7df      	b.n	58b2 <pinctrl_configure_pins+0x7ee>
    switch (port)
    58f2:	2300      	movs	r3, #0
    58f4:	e7dd      	b.n	58b2 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    58f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 59c0 <pinctrl_configure_pins+0x8fc>
    58fa:	f240 2329 	movw	r3, #553	; 0x229
    58fe:	4652      	mov	r2, sl
    5900:	4930      	ldr	r1, [pc, #192]	; (59c4 <pinctrl_configure_pins+0x900>)
    5902:	4831      	ldr	r0, [pc, #196]	; (59c8 <pinctrl_configure_pins+0x904>)
    5904:	f005 f8ec 	bl	aae0 <assert_print>
    5908:	f240 2129 	movw	r1, #553	; 0x229
    590c:	4650      	mov	r0, sl
    590e:	f005 f8e0 	bl	aad2 <assert_post_action>
    5912:	e7d4      	b.n	58be <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    5914:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5918:	e000      	b.n	591c <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    591a:	4a2c      	ldr	r2, [pc, #176]	; (59cc <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    591c:	2301      	movs	r3, #1
    591e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5922:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5926:	e7b7      	b.n	5898 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    592c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5930:	2201      	movs	r2, #1
    5932:	2100      	movs	r1, #0
    5934:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5938:	f7ff fb64 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    593c:	e416      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    593e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5942:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5946:	2201      	movs	r2, #1
    5948:	2100      	movs	r1, #0
    594a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    594e:	f7ff fb59 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5952:	e40b      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    5954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5958:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    595c:	2201      	movs	r2, #1
    595e:	2100      	movs	r1, #0
    5960:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5964:	f7ff fb4e 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5968:	e400      	b.n	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    596a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    596e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5972:	2201      	movs	r2, #1
    5974:	2100      	movs	r1, #0
    5976:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    597a:	f7ff fb43 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    597e:	f7ff bbf5 	b.w	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    5982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5986:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    598a:	2201      	movs	r2, #1
    598c:	2100      	movs	r1, #0
    598e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5992:	f7ff fb37 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5996:	f7ff bbe9 	b.w	516c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    599a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    599e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    59a2:	2201      	movs	r2, #1
    59a4:	2100      	movs	r1, #0
    59a6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    59aa:	f7ff fb2b 	bl	5004 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    59ae:	f7ff bbdd 	b.w	516c <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    59b2:	2000      	movs	r0, #0
    59b4:	e001      	b.n	59ba <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    59b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    59ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59be:	bf00      	nop
    59c0:	0000d708 	.word	0x0000d708
    59c4:	0000d73c 	.word	0x0000d73c
    59c8:	0000c478 	.word	0x0000c478
    59cc:	50000300 	.word	0x50000300
    59d0:	0000cb38 	.word	0x0000cb38

000059d4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    59d4:	b510      	push	{r4, lr}
    59d6:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    59d8:	f7fc fae2 	bl	1fa0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    59dc:	4b06      	ldr	r3, [pc, #24]	; (59f8 <k_sys_fatal_error_handler+0x24>)
    59de:	9302      	str	r3, [sp, #8]
    59e0:	2400      	movs	r4, #0
    59e2:	9401      	str	r4, [sp, #4]
    59e4:	9400      	str	r4, [sp, #0]
    59e6:	4623      	mov	r3, r4
    59e8:	2201      	movs	r2, #1
    59ea:	4904      	ldr	r1, [pc, #16]	; (59fc <k_sys_fatal_error_handler+0x28>)
    59ec:	4620      	mov	r0, r4
    59ee:	f006 f8b9 	bl	bb64 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    59f2:	4620      	mov	r0, r4
    59f4:	f7fe f986 	bl	3d04 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    59f8:	0000d8e0 	.word	0x0000d8e0
    59fc:	0000c24c 	.word	0x0000c24c

00005a00 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5a00:	4b02      	ldr	r3, [pc, #8]	; (5a0c <nvmc_wait+0xc>)
    5a02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5a06:	2b00      	cmp	r3, #0
    5a08:	d0fa      	beq.n	5a00 <nvmc_wait>
}
    5a0a:	4770      	bx	lr
    5a0c:	4001e000 	.word	0x4001e000

00005a10 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5a10:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a12:	4b03      	ldr	r3, [pc, #12]	; (5a20 <nvmc_config+0x10>)
    5a14:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5a18:	f7ff fff2 	bl	5a00 <nvmc_wait>
}
    5a1c:	bd08      	pop	{r3, pc}
    5a1e:	bf00      	nop
    5a20:	4001e000 	.word	0x4001e000

00005a24 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5a24:	4b01      	ldr	r3, [pc, #4]	; (5a2c <SystemCoreClockUpdate+0x8>)
    5a26:	4a02      	ldr	r2, [pc, #8]	; (5a30 <SystemCoreClockUpdate+0xc>)
    5a28:	601a      	str	r2, [r3, #0]
}
    5a2a:	4770      	bx	lr
    5a2c:	20004060 	.word	0x20004060
    5a30:	03d09000 	.word	0x03d09000

00005a34 <SystemInit>:

void SystemInit(void)
{
    5a34:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5a36:	f006 f8b2 	bl	bb9e <nrf52_errata_36>
    5a3a:	b140      	cbz	r0, 5a4e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a40:	2200      	movs	r2, #0
    5a42:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5a46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5a4a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5a4e:	f006 f8b0 	bl	bbb2 <nrf52_errata_66>
    5a52:	2800      	cmp	r0, #0
    5a54:	d046      	beq.n	5ae4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a5a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5a5e:	4b59      	ldr	r3, [pc, #356]	; (5bc4 <SystemInit+0x190>)
    5a60:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5a64:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5a68:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5a6c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5a70:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5a74:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5a78:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5a7c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5a80:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5a84:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5a88:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5a8c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5a90:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5a94:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5a98:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5a9c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5aa0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5aa4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5aa8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5aac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5ab0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5ab4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5ab8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5abc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5ac0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5ac4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5ac8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5acc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5ad0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5ad4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5ad8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5adc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5ae0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5ae4:	f006 f86f 	bl	bbc6 <nrf52_errata_98>
    5ae8:	b118      	cbz	r0, 5af2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5aea:	4b37      	ldr	r3, [pc, #220]	; (5bc8 <SystemInit+0x194>)
    5aec:	4a37      	ldr	r2, [pc, #220]	; (5bcc <SystemInit+0x198>)
    5aee:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5af2:	f006 f87b 	bl	bbec <nrf52_errata_103>
    5af6:	b118      	cbz	r0, 5b00 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5af8:	4b35      	ldr	r3, [pc, #212]	; (5bd0 <SystemInit+0x19c>)
    5afa:	22fb      	movs	r2, #251	; 0xfb
    5afc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5b00:	f006 f887 	bl	bc12 <nrf52_errata_115>
    5b04:	b170      	cbz	r0, 5b24 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5b06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5b0a:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    5b0e:	f023 030f 	bic.w	r3, r3, #15
    5b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5b16:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    5b1a:	f002 020f 	and.w	r2, r2, #15
    5b1e:	4313      	orrs	r3, r2
    5b20:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5b24:	f006 f888 	bl	bc38 <nrf52_errata_120>
    5b28:	b120      	cbz	r0, 5b34 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5b2a:	4b2a      	ldr	r3, [pc, #168]	; (5bd4 <SystemInit+0x1a0>)
    5b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5b30:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5b34:	f006 f893 	bl	bc5e <nrf52_errata_136>
    5b38:	b160      	cbz	r0, 5b54 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5b42:	f013 0f01 	tst.w	r3, #1
    5b46:	d005      	beq.n	5b54 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b4c:	f06f 0201 	mvn.w	r2, #1
    5b50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5b54:	f006 f88d 	bl	bc72 <nrf52_configuration_249>
    5b58:	b138      	cbz	r0, 5b6a <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5b5a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5b5e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b66:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5b6a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5b72:	2b00      	cmp	r3, #0
    5b74:	db08      	blt.n	5b88 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5b76:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5b7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5b7e:	2b00      	cmp	r3, #0
    5b80:	db02      	blt.n	5b88 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5b82:	f7ff ff4f 	bl	5a24 <SystemCoreClockUpdate>
}
    5b86:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5b88:	2001      	movs	r0, #1
    5b8a:	f7ff ff41 	bl	5a10 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5b8e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5b92:	2512      	movs	r5, #18
    5b94:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5b98:	f7ff ff32 	bl	5a00 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5b9c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    5ba0:	f7ff ff2e 	bl	5a00 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    5ba4:	2000      	movs	r0, #0
    5ba6:	f7ff ff33 	bl	5a10 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5baa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5bae:	490a      	ldr	r1, [pc, #40]	; (5bd8 <SystemInit+0x1a4>)
    5bb0:	68ca      	ldr	r2, [r1, #12]
    5bb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5bb6:	4b09      	ldr	r3, [pc, #36]	; (5bdc <SystemInit+0x1a8>)
    5bb8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5bba:	60cb      	str	r3, [r1, #12]
    5bbc:	f3bf 8f4f 	dsb	sy
    __NOP();
    5bc0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5bc2:	e7fd      	b.n	5bc0 <SystemInit+0x18c>
    5bc4:	4000c000 	.word	0x4000c000
    5bc8:	40005000 	.word	0x40005000
    5bcc:	00038148 	.word	0x00038148
    5bd0:	4000f000 	.word	0x4000f000
    5bd4:	40029000 	.word	0x40029000
    5bd8:	e000ed00 	.word	0xe000ed00
    5bdc:	05fa0004 	.word	0x05fa0004

00005be0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5be0:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    5be2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5be4:	fab4 f384 	clz	r3, r4
    5be8:	f1c3 031f 	rsb	r3, r3, #31
    5bec:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	db16      	blt.n	5c22 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5bf4:	2201      	movs	r2, #1
    5bf6:	fa02 f303 	lsl.w	r3, r2, r3
    5bfa:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5bfe:	f3bf 8f5b 	dmb	ish
    5c02:	e850 2f00 	ldrex	r2, [r0]
    5c06:	42a2      	cmp	r2, r4
    5c08:	d104      	bne.n	5c14 <nrfx_flag32_alloc+0x34>
    5c0a:	e840 3e00 	strex	lr, r3, [r0]
    5c0e:	f1be 0f00 	cmp.w	lr, #0
    5c12:	d1f6      	bne.n	5c02 <nrfx_flag32_alloc+0x22>
    5c14:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5c18:	d1e3      	bne.n	5be2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    5c1a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    5c1e:	4802      	ldr	r0, [pc, #8]	; (5c28 <nrfx_flag32_alloc+0x48>)
}
    5c20:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    5c22:	4802      	ldr	r0, [pc, #8]	; (5c2c <nrfx_flag32_alloc+0x4c>)
    5c24:	e7fc      	b.n	5c20 <nrfx_flag32_alloc+0x40>
    5c26:	bf00      	nop
    5c28:	0bad0000 	.word	0x0bad0000
    5c2c:	0bad0002 	.word	0x0bad0002

00005c30 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5c30:	6803      	ldr	r3, [r0, #0]
    5c32:	40cb      	lsrs	r3, r1
    5c34:	f013 0f01 	tst.w	r3, #1
    5c38:	d115      	bne.n	5c66 <nrfx_flag32_free+0x36>
{
    5c3a:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5c3c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5c3e:	2301      	movs	r3, #1
    5c40:	408b      	lsls	r3, r1
    5c42:	4313      	orrs	r3, r2
    5c44:	f3bf 8f5b 	dmb	ish
    5c48:	e850 cf00 	ldrex	ip, [r0]
    5c4c:	4594      	cmp	ip, r2
    5c4e:	d104      	bne.n	5c5a <nrfx_flag32_free+0x2a>
    5c50:	e840 3e00 	strex	lr, r3, [r0]
    5c54:	f1be 0f00 	cmp.w	lr, #0
    5c58:	d1f6      	bne.n	5c48 <nrfx_flag32_free+0x18>
    5c5a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5c5e:	d1ed      	bne.n	5c3c <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    5c60:	4802      	ldr	r0, [pc, #8]	; (5c6c <nrfx_flag32_free+0x3c>)
}
    5c62:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    5c66:	4802      	ldr	r0, [pc, #8]	; (5c70 <nrfx_flag32_free+0x40>)
}
    5c68:	4770      	bx	lr
    5c6a:	bf00      	nop
    5c6c:	0bad0000 	.word	0x0bad0000
    5c70:	0bad0004 	.word	0x0bad0004

00005c74 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c76:	b083      	sub	sp, #12
    switch (domain)
    5c78:	4605      	mov	r5, r0
    5c7a:	b168      	cbz	r0, 5c98 <clock_stop+0x24>
    5c7c:	2801      	cmp	r0, #1
    5c7e:	d020      	beq.n	5cc2 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5c80:	4c3d      	ldr	r4, [pc, #244]	; (5d78 <clock_stop+0x104>)
    5c82:	23d8      	movs	r3, #216	; 0xd8
    5c84:	4622      	mov	r2, r4
    5c86:	493d      	ldr	r1, [pc, #244]	; (5d7c <clock_stop+0x108>)
    5c88:	483d      	ldr	r0, [pc, #244]	; (5d80 <clock_stop+0x10c>)
    5c8a:	f004 ff29 	bl	aae0 <assert_print>
    5c8e:	21d8      	movs	r1, #216	; 0xd8
    5c90:	4620      	mov	r0, r4
    5c92:	f004 ff1e 	bl	aad2 <assert_post_action>
            return;
    5c96:	e068      	b.n	5d6a <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    5c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c9c:	2202      	movs	r2, #2
    5c9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ca2:	2200      	movs	r2, #0
    5ca4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5ca8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cac:	2201      	movs	r2, #1
    5cae:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5cb0:	2301      	movs	r3, #1
    5cb2:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5cb6:	429d      	cmp	r5, r3
    5cb8:	d00f      	beq.n	5cda <clock_stop+0x66>
    5cba:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5cbc:	f242 7410 	movw	r4, #10000	; 0x2710
    5cc0:	e029      	b.n	5d16 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    5cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cc6:	2201      	movs	r2, #1
    5cc8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ccc:	2100      	movs	r1, #0
    5cce:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    5cd2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cd6:	605a      	str	r2, [r3, #4]
}
    5cd8:	e7ea      	b.n	5cb0 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5cda:	f10d 0607 	add.w	r6, sp, #7
    5cde:	e7ed      	b.n	5cbc <clock_stop+0x48>
            if (p_clk_src != NULL)
    5ce0:	b136      	cbz	r6, 5cf0 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ce6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5cea:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5cee:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cf4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5cf8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5cfc:	d12f      	bne.n	5d5e <clock_stop+0xea>
    return false;
    5cfe:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5d00:	b38b      	cbz	r3, 5d66 <clock_stop+0xf2>
    5d02:	b11e      	cbz	r6, 5d0c <clock_stop+0x98>
    5d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d08:	2b01      	cmp	r3, #1
    5d0a:	d12c      	bne.n	5d66 <clock_stop+0xf2>
    5d0c:	2001      	movs	r0, #1
    5d0e:	f005 ffc3 	bl	bc98 <nrfx_busy_wait>
    5d12:	3c01      	subs	r4, #1
    5d14:	d027      	beq.n	5d66 <clock_stop+0xf2>
    switch (domain)
    5d16:	2d00      	cmp	r5, #0
    5d18:	d0e2      	beq.n	5ce0 <clock_stop+0x6c>
    5d1a:	2d01      	cmp	r5, #1
    5d1c:	d00e      	beq.n	5d3c <clock_stop+0xc8>
            NRFX_ASSERT(0);
    5d1e:	4f19      	ldr	r7, [pc, #100]	; (5d84 <clock_stop+0x110>)
    5d20:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5d24:	463a      	mov	r2, r7
    5d26:	4915      	ldr	r1, [pc, #84]	; (5d7c <clock_stop+0x108>)
    5d28:	4815      	ldr	r0, [pc, #84]	; (5d80 <clock_stop+0x10c>)
    5d2a:	f004 fed9 	bl	aae0 <assert_print>
    5d2e:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5d32:	4638      	mov	r0, r7
    5d34:	f004 fecd 	bl	aad2 <assert_post_action>
            return false;
    5d38:	2300      	movs	r3, #0
    5d3a:	e7e1      	b.n	5d00 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    5d3c:	b136      	cbz	r6, 5d4c <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5d46:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5d4a:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d50:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5d54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5d58:	d103      	bne.n	5d62 <clock_stop+0xee>
    return false;
    5d5a:	2300      	movs	r3, #0
    5d5c:	e7d0      	b.n	5d00 <clock_stop+0x8c>
                return true;
    5d5e:	2301      	movs	r3, #1
    5d60:	e7ce      	b.n	5d00 <clock_stop+0x8c>
                return true;
    5d62:	2301      	movs	r3, #1
    5d64:	e7cc      	b.n	5d00 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5d66:	2d01      	cmp	r5, #1
    5d68:	d001      	beq.n	5d6e <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5d6a:	b003      	add	sp, #12
    5d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    5d6e:	4b06      	ldr	r3, [pc, #24]	; (5d88 <clock_stop+0x114>)
    5d70:	2200      	movs	r2, #0
    5d72:	715a      	strb	r2, [r3, #5]
    5d74:	e7f9      	b.n	5d6a <clock_stop+0xf6>
    5d76:	bf00      	nop
    5d78:	0000d900 	.word	0x0000d900
    5d7c:	0000cb38 	.word	0x0000cb38
    5d80:	0000c478 	.word	0x0000c478
    5d84:	0000d940 	.word	0x0000d940
    5d88:	20004bec 	.word	0x20004bec

00005d8c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5d8c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    5d8e:	4604      	mov	r4, r0
    5d90:	b150      	cbz	r0, 5da8 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5d92:	4b0d      	ldr	r3, [pc, #52]	; (5dc8 <nrfx_clock_init+0x3c>)
    5d94:	791b      	ldrb	r3, [r3, #4]
    5d96:	b9ab      	cbnz	r3, 5dc4 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5d98:	4b0b      	ldr	r3, [pc, #44]	; (5dc8 <nrfx_clock_init+0x3c>)
    5d9a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5d9c:	2201      	movs	r2, #1
    5d9e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5da0:	2200      	movs	r2, #0
    5da2:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5da4:	4809      	ldr	r0, [pc, #36]	; (5dcc <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5da6:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    5da8:	4d09      	ldr	r5, [pc, #36]	; (5dd0 <nrfx_clock_init+0x44>)
    5daa:	f240 1315 	movw	r3, #277	; 0x115
    5dae:	462a      	mov	r2, r5
    5db0:	4908      	ldr	r1, [pc, #32]	; (5dd4 <nrfx_clock_init+0x48>)
    5db2:	4809      	ldr	r0, [pc, #36]	; (5dd8 <nrfx_clock_init+0x4c>)
    5db4:	f004 fe94 	bl	aae0 <assert_print>
    5db8:	f240 1115 	movw	r1, #277	; 0x115
    5dbc:	4628      	mov	r0, r5
    5dbe:	f004 fe88 	bl	aad2 <assert_post_action>
    5dc2:	e7e6      	b.n	5d92 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5dc4:	4805      	ldr	r0, [pc, #20]	; (5ddc <nrfx_clock_init+0x50>)
    return err_code;
    5dc6:	e7ee      	b.n	5da6 <nrfx_clock_init+0x1a>
    5dc8:	20004bec 	.word	0x20004bec
    5dcc:	0bad0000 	.word	0x0bad0000
    5dd0:	0000d900 	.word	0x0000d900
    5dd4:	0000d974 	.word	0x0000d974
    5dd8:	0000c478 	.word	0x0000c478
    5ddc:	0bad000c 	.word	0x0bad000c

00005de0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5de0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5de2:	4b0f      	ldr	r3, [pc, #60]	; (5e20 <nrfx_clock_enable+0x40>)
    5de4:	791b      	ldrb	r3, [r3, #4]
    5de6:	b153      	cbz	r3, 5dfe <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5de8:	2000      	movs	r0, #0
    5dea:	f7fd f819 	bl	2e20 <arch_irq_is_enabled>
    5dee:	b1a0      	cbz	r0, 5e1a <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5df0:	f005 ff56 	bl	bca0 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5df8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5dfc:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5dfe:	4c09      	ldr	r4, [pc, #36]	; (5e24 <nrfx_clock_enable+0x44>)
    5e00:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5e04:	4622      	mov	r2, r4
    5e06:	4908      	ldr	r1, [pc, #32]	; (5e28 <nrfx_clock_enable+0x48>)
    5e08:	4808      	ldr	r0, [pc, #32]	; (5e2c <nrfx_clock_enable+0x4c>)
    5e0a:	f004 fe69 	bl	aae0 <assert_print>
    5e0e:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5e12:	4620      	mov	r0, r4
    5e14:	f004 fe5d 	bl	aad2 <assert_post_action>
    5e18:	e7e6      	b.n	5de8 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5e1a:	f7fc fff3 	bl	2e04 <arch_irq_enable>
    5e1e:	e7e7      	b.n	5df0 <nrfx_clock_enable+0x10>
    5e20:	20004bec 	.word	0x20004bec
    5e24:	0000d900 	.word	0x0000d900
    5e28:	0000d984 	.word	0x0000d984
    5e2c:	0000c478 	.word	0x0000c478

00005e30 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5e30:	b530      	push	{r4, r5, lr}
    5e32:	b083      	sub	sp, #12
    5e34:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5e36:	4b34      	ldr	r3, [pc, #208]	; (5f08 <nrfx_clock_start+0xd8>)
    5e38:	791b      	ldrb	r3, [r3, #4]
    5e3a:	b183      	cbz	r3, 5e5e <nrfx_clock_start+0x2e>
    switch (domain)
    5e3c:	b1ec      	cbz	r4, 5e7a <nrfx_clock_start+0x4a>
    5e3e:	2c01      	cmp	r4, #1
    5e40:	d055      	beq.n	5eee <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5e42:	4c32      	ldr	r4, [pc, #200]	; (5f0c <nrfx_clock_start+0xdc>)
    5e44:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5e48:	4622      	mov	r2, r4
    5e4a:	4931      	ldr	r1, [pc, #196]	; (5f10 <nrfx_clock_start+0xe0>)
    5e4c:	4831      	ldr	r0, [pc, #196]	; (5f14 <nrfx_clock_start+0xe4>)
    5e4e:	f004 fe47 	bl	aae0 <assert_print>
    5e52:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5e56:	4620      	mov	r0, r4
    5e58:	f004 fe3b 	bl	aad2 <assert_post_action>
            break;
    }
}
    5e5c:	e052      	b.n	5f04 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5e5e:	4d2b      	ldr	r5, [pc, #172]	; (5f0c <nrfx_clock_start+0xdc>)
    5e60:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5e64:	462a      	mov	r2, r5
    5e66:	492c      	ldr	r1, [pc, #176]	; (5f18 <nrfx_clock_start+0xe8>)
    5e68:	482a      	ldr	r0, [pc, #168]	; (5f14 <nrfx_clock_start+0xe4>)
    5e6a:	f004 fe39 	bl	aae0 <assert_print>
    5e6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5e72:	4628      	mov	r0, r5
    5e74:	f004 fe2d 	bl	aad2 <assert_post_action>
    5e78:	e7e0      	b.n	5e3c <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e7e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5e82:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5e86:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e88:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e90:	d117      	bne.n	5ec2 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5e92:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5e96:	f013 0f01 	tst.w	r3, #1
    5e9a:	d116      	bne.n	5eca <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    5e9c:	f005 ff00 	bl	bca0 <clock_initial_lfclksrc_get>
    5ea0:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ea6:	9a01      	ldr	r2, [sp, #4]
    5ea8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eac:	2200      	movs	r2, #0
    5eae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5eb2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5eb6:	2202      	movs	r2, #2
    5eb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ebc:	2201      	movs	r2, #1
    5ebe:	609a      	str	r2, [r3, #8]
}
    5ec0:	e020      	b.n	5f04 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    5ec2:	a801      	add	r0, sp, #4
    5ec4:	f005 feee 	bl	bca4 <clock_lfclksrc_tweak>
    5ec8:	e7eb      	b.n	5ea2 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ece:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5ed2:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    5ed6:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5ed8:	a801      	add	r0, sp, #4
    5eda:	f005 fee3 	bl	bca4 <clock_lfclksrc_tweak>
    5ede:	2800      	cmp	r0, #0
    5ee0:	d0df      	beq.n	5ea2 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    5ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ee6:	2202      	movs	r2, #2
    5ee8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5eec:	e00a      	b.n	5f04 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ef2:	2200      	movs	r2, #0
    5ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5ef8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5efc:	2201      	movs	r2, #1
    5efe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f02:	601a      	str	r2, [r3, #0]
}
    5f04:	b003      	add	sp, #12
    5f06:	bd30      	pop	{r4, r5, pc}
    5f08:	20004bec 	.word	0x20004bec
    5f0c:	0000d900 	.word	0x0000d900
    5f10:	0000cb38 	.word	0x0000cb38
    5f14:	0000c478 	.word	0x0000c478
    5f18:	0000d984 	.word	0x0000d984

00005f1c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5f1c:	b538      	push	{r3, r4, r5, lr}
    5f1e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f20:	4b0a      	ldr	r3, [pc, #40]	; (5f4c <nrfx_clock_stop+0x30>)
    5f22:	791b      	ldrb	r3, [r3, #4]
    5f24:	b11b      	cbz	r3, 5f2e <nrfx_clock_stop+0x12>
    clock_stop(domain);
    5f26:	4620      	mov	r0, r4
    5f28:	f7ff fea4 	bl	5c74 <clock_stop>
}
    5f2c:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f2e:	4d08      	ldr	r5, [pc, #32]	; (5f50 <nrfx_clock_stop+0x34>)
    5f30:	f240 13ad 	movw	r3, #429	; 0x1ad
    5f34:	462a      	mov	r2, r5
    5f36:	4907      	ldr	r1, [pc, #28]	; (5f54 <nrfx_clock_stop+0x38>)
    5f38:	4807      	ldr	r0, [pc, #28]	; (5f58 <nrfx_clock_stop+0x3c>)
    5f3a:	f004 fdd1 	bl	aae0 <assert_print>
    5f3e:	f240 11ad 	movw	r1, #429	; 0x1ad
    5f42:	4628      	mov	r0, r5
    5f44:	f004 fdc5 	bl	aad2 <assert_post_action>
    5f48:	e7ed      	b.n	5f26 <nrfx_clock_stop+0xa>
    5f4a:	bf00      	nop
    5f4c:	20004bec 	.word	0x20004bec
    5f50:	0000d900 	.word	0x0000d900
    5f54:	0000d984 	.word	0x0000d984
    5f58:	0000c478 	.word	0x0000c478

00005f5c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5f5c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5f66:	b18b      	cbz	r3, 5f8c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f6c:	2200      	movs	r2, #0
    5f6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5f72:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5f76:	2201      	movs	r2, #1
    5f78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5f7c:	4b15      	ldr	r3, [pc, #84]	; (5fd4 <nrfx_power_clock_irq_handler+0x78>)
    5f7e:	795b      	ldrb	r3, [r3, #5]
    5f80:	b923      	cbnz	r3, 5f8c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    5f82:	4b14      	ldr	r3, [pc, #80]	; (5fd4 <nrfx_power_clock_irq_handler+0x78>)
    5f84:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5f86:	681b      	ldr	r3, [r3, #0]
    5f88:	2000      	movs	r0, #0
    5f8a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f90:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5f94:	b19b      	cbz	r3, 5fbe <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f9a:	2200      	movs	r2, #0
    5f9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5fa0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fa4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fa8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5fac:	f012 0f03 	tst.w	r2, #3
    5fb0:	d106      	bne.n	5fc0 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fb6:	2201      	movs	r2, #1
    5fb8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fbc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5fbe:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fc4:	2202      	movs	r2, #2
    5fc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5fca:	4b02      	ldr	r3, [pc, #8]	; (5fd4 <nrfx_power_clock_irq_handler+0x78>)
    5fcc:	681b      	ldr	r3, [r3, #0]
    5fce:	2001      	movs	r0, #1
    5fd0:	4798      	blx	r3
}
    5fd2:	e7f4      	b.n	5fbe <nrfx_power_clock_irq_handler+0x62>
    5fd4:	20004bec 	.word	0x20004bec

00005fd8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5fd8:	3008      	adds	r0, #8
    5fda:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <pin_in_use+0x10>)
    5fdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fe0:	f000 0001 	and.w	r0, r0, #1
    5fe4:	4770      	bx	lr
    5fe6:	bf00      	nop
    5fe8:	20004064 	.word	0x20004064

00005fec <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5fec:	3008      	adds	r0, #8
    5fee:	4b03      	ldr	r3, [pc, #12]	; (5ffc <pin_in_use_by_te+0x10>)
    5ff0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5ff4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5ff8:	4770      	bx	lr
    5ffa:	bf00      	nop
    5ffc:	20004064 	.word	0x20004064

00006000 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6000:	3008      	adds	r0, #8
    6002:	4b04      	ldr	r3, [pc, #16]	; (6014 <pin_has_trigger+0x14>)
    6004:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6008:	f010 001c 	ands.w	r0, r0, #28
    600c:	bf18      	it	ne
    600e:	2001      	movne	r0, #1
    6010:	4770      	bx	lr
    6012:	bf00      	nop
    6014:	20004064 	.word	0x20004064

00006018 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6018:	3008      	adds	r0, #8
    601a:	4b03      	ldr	r3, [pc, #12]	; (6028 <pin_is_output+0x10>)
    601c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6020:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6024:	4770      	bx	lr
    6026:	bf00      	nop
    6028:	20004064 	.word	0x20004064

0000602c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    602c:	3008      	adds	r0, #8
    602e:	4b02      	ldr	r3, [pc, #8]	; (6038 <pin_te_get+0xc>)
    6030:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6034:	0b40      	lsrs	r0, r0, #13
    6036:	4770      	bx	lr
    6038:	20004064 	.word	0x20004064

0000603c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    603c:	2200      	movs	r2, #0
    603e:	e004      	b.n	604a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6044:	4283      	cmp	r3, r0
    6046:	d00f      	beq.n	6068 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6048:	3201      	adds	r2, #1
    604a:	2a2f      	cmp	r2, #47	; 0x2f
    604c:	d80a      	bhi.n	6064 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    604e:	f102 0308 	add.w	r3, r2, #8
    6052:	4906      	ldr	r1, [pc, #24]	; (606c <handler_in_use+0x30>)
    6054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6058:	f413 7f80 	tst.w	r3, #256	; 0x100
    605c:	d0f0      	beq.n	6040 <handler_in_use+0x4>
    605e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6062:	e7ef      	b.n	6044 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    6064:	2000      	movs	r0, #0
    6066:	4770      	bx	lr
            return true;
    6068:	2001      	movs	r0, #1
}
    606a:	4770      	bx	lr
    606c:	20004064 	.word	0x20004064

00006070 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6070:	2300      	movs	r3, #0
    6072:	b113      	cbz	r3, 607a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    6074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6078:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    607a:	4a07      	ldr	r2, [pc, #28]	; (6098 <find_handler+0x28>)
    607c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6080:	4282      	cmp	r2, r0
    6082:	d001      	beq.n	6088 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6084:	3301      	adds	r3, #1
    6086:	e7f4      	b.n	6072 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6088:	4a03      	ldr	r2, [pc, #12]	; (6098 <find_handler+0x28>)
    608a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    608e:	6852      	ldr	r2, [r2, #4]
    6090:	428a      	cmp	r2, r1
    6092:	d1f7      	bne.n	6084 <find_handler+0x14>
            return i;
    6094:	4618      	mov	r0, r3
    6096:	4770      	bx	lr
    6098:	20004064 	.word	0x20004064

0000609c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    609c:	3008      	adds	r0, #8
    609e:	4b06      	ldr	r3, [pc, #24]	; (60b8 <channel_handler_get+0x1c>)
    60a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    60a4:	f410 7f80 	tst.w	r0, #256	; 0x100
    60a8:	d004      	beq.n	60b4 <channel_handler_get+0x18>
    60aa:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    60ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    60b2:	4770      	bx	lr
        return NULL;
    60b4:	2000      	movs	r0, #0
}
    60b6:	4770      	bx	lr
    60b8:	20004064 	.word	0x20004064

000060bc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    60bc:	b570      	push	{r4, r5, r6, lr}
    60be:	4604      	mov	r4, r0
    60c0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    60c2:	f7ff ffeb 	bl	609c <channel_handler_get>

    if (handler)
    60c6:	b120      	cbz	r0, 60d2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    60c8:	6806      	ldr	r6, [r0, #0]
    60ca:	6842      	ldr	r2, [r0, #4]
    60cc:	4629      	mov	r1, r5
    60ce:	4620      	mov	r0, r4
    60d0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    60d2:	4b04      	ldr	r3, [pc, #16]	; (60e4 <call_handler+0x28>)
    60d4:	689b      	ldr	r3, [r3, #8]
    60d6:	b123      	cbz	r3, 60e2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    60d8:	4a02      	ldr	r2, [pc, #8]	; (60e4 <call_handler+0x28>)
    60da:	68d2      	ldr	r2, [r2, #12]
    60dc:	4629      	mov	r1, r5
    60de:	4620      	mov	r0, r4
    60e0:	4798      	blx	r3
    }
}
    60e2:	bd70      	pop	{r4, r5, r6, pc}
    60e4:	20004064 	.word	0x20004064

000060e8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    60e8:	f100 0208 	add.w	r2, r0, #8
    60ec:	4b16      	ldr	r3, [pc, #88]	; (6148 <release_handler+0x60>)
    60ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    60f2:	f413 7f80 	tst.w	r3, #256	; 0x100
    60f6:	d026      	beq.n	6146 <release_handler+0x5e>
{
    60f8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    60fa:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    60fe:	4610      	mov	r0, r2
    6100:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6104:	4a10      	ldr	r2, [pc, #64]	; (6148 <release_handler+0x60>)
    6106:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    610a:	4620      	mov	r0, r4
    610c:	f7ff ff96 	bl	603c <handler_in_use>
    6110:	b100      	cbz	r0, 6114 <release_handler+0x2c>
}
    6112:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    6114:	480c      	ldr	r0, [pc, #48]	; (6148 <release_handler+0x60>)
    6116:	2300      	movs	r3, #0
    6118:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    611c:	4621      	mov	r1, r4
    611e:	3074      	adds	r0, #116	; 0x74
    6120:	f7ff fd86 	bl	5c30 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6124:	4b09      	ldr	r3, [pc, #36]	; (614c <release_handler+0x64>)
    6126:	4298      	cmp	r0, r3
    6128:	d0f3      	beq.n	6112 <release_handler+0x2a>
    612a:	4c09      	ldr	r4, [pc, #36]	; (6150 <release_handler+0x68>)
    612c:	f44f 7399 	mov.w	r3, #306	; 0x132
    6130:	4622      	mov	r2, r4
    6132:	4908      	ldr	r1, [pc, #32]	; (6154 <release_handler+0x6c>)
    6134:	4808      	ldr	r0, [pc, #32]	; (6158 <release_handler+0x70>)
    6136:	f004 fcd3 	bl	aae0 <assert_print>
    613a:	f44f 7199 	mov.w	r1, #306	; 0x132
    613e:	4620      	mov	r0, r4
    6140:	f004 fcc7 	bl	aad2 <assert_post_action>
    6144:	e7e5      	b.n	6112 <release_handler+0x2a>
    6146:	4770      	bx	lr
    6148:	20004064 	.word	0x20004064
    614c:	0bad0000 	.word	0x0bad0000
    6150:	0000d9a4 	.word	0x0000d9a4
    6154:	0000d9e4 	.word	0x0000d9e4
    6158:	0000c478 	.word	0x0000c478

0000615c <pin_handler_trigger_uninit>:
{
    615c:	b510      	push	{r4, lr}
    615e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6160:	f7ff ff44 	bl	5fec <pin_in_use_by_te>
    6164:	b140      	cbz	r0, 6178 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6166:	4620      	mov	r0, r4
    6168:	f7ff ff60 	bl	602c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    616c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6170:	4b06      	ldr	r3, [pc, #24]	; (618c <pin_handler_trigger_uninit+0x30>)
    6172:	2200      	movs	r2, #0
    6174:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6178:	4620      	mov	r0, r4
    617a:	f7ff ffb5 	bl	60e8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    617e:	3408      	adds	r4, #8
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <pin_handler_trigger_uninit+0x34>)
    6182:	2200      	movs	r2, #0
    6184:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6188:	bd10      	pop	{r4, pc}
    618a:	bf00      	nop
    618c:	40006000 	.word	0x40006000
    6190:	20004064 	.word	0x20004064

00006194 <pin_handler_set>:
{
    6194:	b570      	push	{r4, r5, r6, lr}
    6196:	b082      	sub	sp, #8
    6198:	4606      	mov	r6, r0
    619a:	460c      	mov	r4, r1
    619c:	4615      	mov	r5, r2
    release_handler(pin);
    619e:	f7ff ffa3 	bl	60e8 <release_handler>
    if (!handler)
    61a2:	b324      	cbz	r4, 61ee <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    61a4:	4629      	mov	r1, r5
    61a6:	4620      	mov	r0, r4
    61a8:	f7ff ff62 	bl	6070 <find_handler>
    if (handler_id < 0)
    61ac:	1e03      	subs	r3, r0, #0
    61ae:	db13      	blt.n	61d8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    61b0:	4a10      	ldr	r2, [pc, #64]	; (61f4 <pin_handler_set+0x60>)
    61b2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    61b6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    61ba:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    61bc:	025b      	lsls	r3, r3, #9
    61be:	b29b      	uxth	r3, r3
    61c0:	f106 0008 	add.w	r0, r6, #8
    61c4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    61c8:	430b      	orrs	r3, r1
    61ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    61ce:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    61d2:	4809      	ldr	r0, [pc, #36]	; (61f8 <pin_handler_set+0x64>)
}
    61d4:	b002      	add	sp, #8
    61d6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    61d8:	f10d 0107 	add.w	r1, sp, #7
    61dc:	4807      	ldr	r0, [pc, #28]	; (61fc <pin_handler_set+0x68>)
    61de:	f7ff fcff 	bl	5be0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    61e2:	4b05      	ldr	r3, [pc, #20]	; (61f8 <pin_handler_set+0x64>)
    61e4:	4298      	cmp	r0, r3
    61e6:	d1f5      	bne.n	61d4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    61e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61ec:	e7e0      	b.n	61b0 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    61ee:	4802      	ldr	r0, [pc, #8]	; (61f8 <pin_handler_set+0x64>)
    61f0:	e7f0      	b.n	61d4 <pin_handler_set+0x40>
    61f2:	bf00      	nop
    61f4:	20004064 	.word	0x20004064
    61f8:	0bad0000 	.word	0x0bad0000
    61fc:	200040d8 	.word	0x200040d8

00006200 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6200:	b538      	push	{r3, r4, r5, lr}
    6202:	4604      	mov	r4, r0
    while (mask)
    6204:	e018      	b.n	6238 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    6206:	fa94 f3a4 	rbit	r3, r4
    620a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    620e:	2201      	movs	r2, #1
    6210:	409a      	lsls	r2, r3
    6212:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6216:	4a0a      	ldr	r2, [pc, #40]	; (6240 <gpiote_evt_handle+0x40>)
    6218:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    621c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6220:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6224:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6228:	f3c0 4001 	ubfx	r0, r0, #16, #2
    622c:	f005 fd66 	bl	bcfc <gpiote_polarity_to_trigger>
    6230:	4601      	mov	r1, r0
    6232:	4628      	mov	r0, r5
    6234:	f7ff ff42 	bl	60bc <call_handler>
    while (mask)
    6238:	2c00      	cmp	r4, #0
    623a:	d1e4      	bne.n	6206 <gpiote_evt_handle+0x6>
    }
}
    623c:	bd38      	pop	{r3, r4, r5, pc}
    623e:	bf00      	nop
    6240:	40006000 	.word	0x40006000

00006244 <latch_pending_read_and_check>:
{
    6244:	b082      	sub	sp, #8
    6246:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6248:	4b11      	ldr	r3, [pc, #68]	; (6290 <latch_pending_read_and_check+0x4c>)
    624a:	e893 0003 	ldmia.w	r3, {r0, r1}
    624e:	ab02      	add	r3, sp, #8
    6250:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    6254:	4660      	mov	r0, ip
    6256:	2300      	movs	r3, #0
    6258:	e00b      	b.n	6272 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    625a:	aa02      	add	r2, sp, #8
    625c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6260:	f852 2c08 	ldr.w	r2, [r2, #-8]
    6264:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6268:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    626c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6270:	3301      	adds	r3, #1
    6272:	2b01      	cmp	r3, #1
    6274:	d9f1      	bls.n	625a <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6276:	2300      	movs	r3, #0
    6278:	2b01      	cmp	r3, #1
    627a:	d804      	bhi.n	6286 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    627c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    6280:	b922      	cbnz	r2, 628c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6282:	3301      	adds	r3, #1
    6284:	e7f8      	b.n	6278 <latch_pending_read_and_check+0x34>
    return false;
    6286:	2000      	movs	r0, #0
}
    6288:	b002      	add	sp, #8
    628a:	4770      	bx	lr
            return true;
    628c:	2001      	movs	r0, #1
    628e:	e7fb      	b.n	6288 <latch_pending_read_and_check+0x44>
    6290:	0000c310 	.word	0x0000c310

00006294 <next_sense_cond_call_handler>:
{
    6294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6298:	4604      	mov	r4, r0
    629a:	460d      	mov	r5, r1
    629c:	4616      	mov	r6, r2
    if (is_level(trigger))
    629e:	4608      	mov	r0, r1
    62a0:	f005 fd2e 	bl	bd00 <is_level>
    62a4:	bb60      	cbnz	r0, 6300 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    62a6:	2e02      	cmp	r6, #2
    62a8:	f000 80f5 	beq.w	6496 <next_sense_cond_call_handler+0x202>
    62ac:	f04f 0802 	mov.w	r8, #2
    switch (port)
    62b0:	0963      	lsrs	r3, r4, #5
    62b2:	f000 80f3 	beq.w	649c <next_sense_cond_call_handler+0x208>
    62b6:	2b01      	cmp	r3, #1
    62b8:	f040 80f3 	bne.w	64a2 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    62bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    62c0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    62c4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62c6:	f013 0f01 	tst.w	r3, #1
    62ca:	f000 80ec 	beq.w	64a6 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    62ce:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62d2:	0963      	lsrs	r3, r4, #5
    62d4:	f000 80f5 	beq.w	64c2 <next_sense_cond_call_handler+0x22e>
    62d8:	2b01      	cmp	r3, #1
    62da:	f000 80f5 	beq.w	64c8 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    62de:	f8df 9224 	ldr.w	r9, [pc, #548]	; 6504 <next_sense_cond_call_handler+0x270>
    62e2:	f240 232e 	movw	r3, #558	; 0x22e
    62e6:	464a      	mov	r2, r9
    62e8:	4987      	ldr	r1, [pc, #540]	; (6508 <next_sense_cond_call_handler+0x274>)
    62ea:	4888      	ldr	r0, [pc, #544]	; (650c <next_sense_cond_call_handler+0x278>)
    62ec:	f004 fbf8 	bl	aae0 <assert_print>
    62f0:	f240 212e 	movw	r1, #558	; 0x22e
    62f4:	4648      	mov	r0, r9
    62f6:	f004 fbec 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    62fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    62fe:	e0e4      	b.n	64ca <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    6300:	4629      	mov	r1, r5
    6302:	4620      	mov	r0, r4
    6304:	f7ff feda 	bl	60bc <call_handler>
    switch (port)
    6308:	0963      	lsrs	r3, r4, #5
    630a:	d01f      	beq.n	634c <next_sense_cond_call_handler+0xb8>
    630c:	2b01      	cmp	r3, #1
    630e:	d120      	bne.n	6352 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    6310:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6314:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6318:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    631a:	f013 0f01 	tst.w	r3, #1
    631e:	d01a      	beq.n	6356 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    6320:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6324:	0963      	lsrs	r3, r4, #5
    6326:	d024      	beq.n	6372 <next_sense_cond_call_handler+0xde>
    6328:	2b01      	cmp	r3, #1
    632a:	d025      	beq.n	6378 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    632c:	4f75      	ldr	r7, [pc, #468]	; (6504 <next_sense_cond_call_handler+0x270>)
    632e:	f240 232e 	movw	r3, #558	; 0x22e
    6332:	463a      	mov	r2, r7
    6334:	4974      	ldr	r1, [pc, #464]	; (6508 <next_sense_cond_call_handler+0x274>)
    6336:	4875      	ldr	r0, [pc, #468]	; (650c <next_sense_cond_call_handler+0x278>)
    6338:	f004 fbd2 	bl	aae0 <assert_print>
    633c:	f240 212e 	movw	r1, #558	; 0x22e
    6340:	4638      	mov	r0, r7
    6342:	f004 fbc6 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    634a:	e016      	b.n	637a <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    634c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6350:	e7e0      	b.n	6314 <next_sense_cond_call_handler+0x80>
    switch (port)
    6352:	2300      	movs	r3, #0
    6354:	e7de      	b.n	6314 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6356:	4d6b      	ldr	r5, [pc, #428]	; (6504 <next_sense_cond_call_handler+0x270>)
    6358:	f240 2329 	movw	r3, #553	; 0x229
    635c:	462a      	mov	r2, r5
    635e:	496c      	ldr	r1, [pc, #432]	; (6510 <next_sense_cond_call_handler+0x27c>)
    6360:	486a      	ldr	r0, [pc, #424]	; (650c <next_sense_cond_call_handler+0x278>)
    6362:	f004 fbbd 	bl	aae0 <assert_print>
    6366:	f240 2129 	movw	r1, #553	; 0x229
    636a:	4628      	mov	r0, r5
    636c:	f004 fbb1 	bl	aad2 <assert_post_action>
    6370:	e7d6      	b.n	6320 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    6372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6376:	e000      	b.n	637a <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6378:	4b66      	ldr	r3, [pc, #408]	; (6514 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    637a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    637e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6382:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6386:	429e      	cmp	r6, r3
    6388:	f040 80af 	bne.w	64ea <next_sense_cond_call_handler+0x256>
    switch (port)
    638c:	0963      	lsrs	r3, r4, #5
    638e:	d01f      	beq.n	63d0 <next_sense_cond_call_handler+0x13c>
    6390:	2b01      	cmp	r3, #1
    6392:	d120      	bne.n	63d6 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    6394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6398:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    639c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    639e:	f013 0f01 	tst.w	r3, #1
    63a2:	d01a      	beq.n	63da <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    63a4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63a8:	0963      	lsrs	r3, r4, #5
    63aa:	d024      	beq.n	63f6 <next_sense_cond_call_handler+0x162>
    63ac:	2b01      	cmp	r3, #1
    63ae:	d025      	beq.n	63fc <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    63b0:	4f54      	ldr	r7, [pc, #336]	; (6504 <next_sense_cond_call_handler+0x270>)
    63b2:	f240 232e 	movw	r3, #558	; 0x22e
    63b6:	463a      	mov	r2, r7
    63b8:	4953      	ldr	r1, [pc, #332]	; (6508 <next_sense_cond_call_handler+0x274>)
    63ba:	4854      	ldr	r0, [pc, #336]	; (650c <next_sense_cond_call_handler+0x278>)
    63bc:	f004 fb90 	bl	aae0 <assert_print>
    63c0:	f240 212e 	movw	r1, #558	; 0x22e
    63c4:	4638      	mov	r0, r7
    63c6:	f004 fb84 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    63ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    63ce:	e016      	b.n	63fe <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    63d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63d4:	e7e0      	b.n	6398 <next_sense_cond_call_handler+0x104>
    switch (port)
    63d6:	2300      	movs	r3, #0
    63d8:	e7de      	b.n	6398 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63da:	4d4a      	ldr	r5, [pc, #296]	; (6504 <next_sense_cond_call_handler+0x270>)
    63dc:	f240 2329 	movw	r3, #553	; 0x229
    63e0:	462a      	mov	r2, r5
    63e2:	494b      	ldr	r1, [pc, #300]	; (6510 <next_sense_cond_call_handler+0x27c>)
    63e4:	4849      	ldr	r0, [pc, #292]	; (650c <next_sense_cond_call_handler+0x278>)
    63e6:	f004 fb7b 	bl	aae0 <assert_print>
    63ea:	f240 2129 	movw	r1, #553	; 0x229
    63ee:	4628      	mov	r0, r5
    63f0:	f004 fb6f 	bl	aad2 <assert_post_action>
    63f4:	e7d6      	b.n	63a4 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    63f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    63fa:	e000      	b.n	63fe <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63fc:	4945      	ldr	r1, [pc, #276]	; (6514 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    63fe:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6402:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6406:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    640a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    640e:	0963      	lsrs	r3, r4, #5
    6410:	d01f      	beq.n	6452 <next_sense_cond_call_handler+0x1be>
    6412:	2b01      	cmp	r3, #1
    6414:	d120      	bne.n	6458 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    6416:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    641a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    641e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6420:	f013 0f01 	tst.w	r3, #1
    6424:	d01a      	beq.n	645c <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    6426:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    642a:	0964      	lsrs	r4, r4, #5
    642c:	d024      	beq.n	6478 <next_sense_cond_call_handler+0x1e4>
    642e:	2c01      	cmp	r4, #1
    6430:	d025      	beq.n	647e <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    6432:	4c34      	ldr	r4, [pc, #208]	; (6504 <next_sense_cond_call_handler+0x270>)
    6434:	f240 232e 	movw	r3, #558	; 0x22e
    6438:	4622      	mov	r2, r4
    643a:	4933      	ldr	r1, [pc, #204]	; (6508 <next_sense_cond_call_handler+0x274>)
    643c:	4833      	ldr	r0, [pc, #204]	; (650c <next_sense_cond_call_handler+0x278>)
    643e:	f004 fb4f 	bl	aae0 <assert_print>
    6442:	f240 212e 	movw	r1, #558	; 0x22e
    6446:	4620      	mov	r0, r4
    6448:	f004 fb43 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    644c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6450:	e016      	b.n	6480 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    6452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6456:	e7e0      	b.n	641a <next_sense_cond_call_handler+0x186>
    switch (port)
    6458:	2300      	movs	r3, #0
    645a:	e7de      	b.n	641a <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    645c:	4d29      	ldr	r5, [pc, #164]	; (6504 <next_sense_cond_call_handler+0x270>)
    645e:	f240 2329 	movw	r3, #553	; 0x229
    6462:	462a      	mov	r2, r5
    6464:	492a      	ldr	r1, [pc, #168]	; (6510 <next_sense_cond_call_handler+0x27c>)
    6466:	4829      	ldr	r0, [pc, #164]	; (650c <next_sense_cond_call_handler+0x278>)
    6468:	f004 fb3a 	bl	aae0 <assert_print>
    646c:	f240 2129 	movw	r1, #553	; 0x229
    6470:	4628      	mov	r0, r5
    6472:	f004 fb2e 	bl	aad2 <assert_post_action>
    6476:	e7d6      	b.n	6426 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    6478:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    647c:	e000      	b.n	6480 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    647e:	4925      	ldr	r1, [pc, #148]	; (6514 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6480:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6484:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6488:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    648c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6490:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    6494:	e029      	b.n	64ea <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6496:	f04f 0803 	mov.w	r8, #3
    649a:	e709      	b.n	62b0 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    649c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64a0:	e70e      	b.n	62c0 <next_sense_cond_call_handler+0x2c>
    switch (port)
    64a2:	2300      	movs	r3, #0
    64a4:	e70c      	b.n	62c0 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    64a6:	4f17      	ldr	r7, [pc, #92]	; (6504 <next_sense_cond_call_handler+0x270>)
    64a8:	f240 2329 	movw	r3, #553	; 0x229
    64ac:	463a      	mov	r2, r7
    64ae:	4918      	ldr	r1, [pc, #96]	; (6510 <next_sense_cond_call_handler+0x27c>)
    64b0:	4816      	ldr	r0, [pc, #88]	; (650c <next_sense_cond_call_handler+0x278>)
    64b2:	f004 fb15 	bl	aae0 <assert_print>
    64b6:	f240 2129 	movw	r1, #553	; 0x229
    64ba:	4638      	mov	r0, r7
    64bc:	f004 fb09 	bl	aad2 <assert_post_action>
    64c0:	e705      	b.n	62ce <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    64c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    64c6:	e000      	b.n	64ca <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64c8:	4912      	ldr	r1, [pc, #72]	; (6514 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    64ca:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    64ce:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    64d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    64d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    64da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    64de:	2d03      	cmp	r5, #3
    64e0:	d007      	beq.n	64f2 <next_sense_cond_call_handler+0x25e>
    64e2:	2e02      	cmp	r6, #2
    64e4:	d003      	beq.n	64ee <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    64e6:	2e03      	cmp	r6, #3
    64e8:	d008      	beq.n	64fc <next_sense_cond_call_handler+0x268>
}
    64ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    64ee:	2d01      	cmp	r5, #1
    64f0:	d1f9      	bne.n	64e6 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    64f2:	4629      	mov	r1, r5
    64f4:	4620      	mov	r0, r4
    64f6:	f7ff fde1 	bl	60bc <call_handler>
}
    64fa:	e7f6      	b.n	64ea <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    64fc:	2d02      	cmp	r5, #2
    64fe:	d1f4      	bne.n	64ea <next_sense_cond_call_handler+0x256>
    6500:	e7f7      	b.n	64f2 <next_sense_cond_call_handler+0x25e>
    6502:	bf00      	nop
    6504:	0000d708 	.word	0x0000d708
    6508:	0000cb38 	.word	0x0000cb38
    650c:	0000c478 	.word	0x0000c478
    6510:	0000d73c 	.word	0x0000d73c
    6514:	50000300 	.word	0x50000300

00006518 <port_event_handle>:
{
    6518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    651c:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    651e:	4a65      	ldr	r2, [pc, #404]	; (66b4 <port_event_handle+0x19c>)
    6520:	466b      	mov	r3, sp
    6522:	e892 0003 	ldmia.w	r2, {r0, r1}
    6526:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    652a:	2300      	movs	r3, #0
    652c:	a802      	add	r0, sp, #8
    652e:	e00b      	b.n	6548 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    6530:	aa04      	add	r2, sp, #16
    6532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6536:	f852 2c10 	ldr.w	r2, [r2, #-16]
    653a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    653e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    6542:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6546:	3301      	adds	r3, #1
    6548:	2b01      	cmp	r3, #1
    654a:	d9f1      	bls.n	6530 <port_event_handle+0x18>
    654c:	e0ad      	b.n	66aa <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    654e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6552:	e07f      	b.n	6654 <port_event_handle+0x13c>
    switch (port)
    6554:	2300      	movs	r3, #0
    6556:	e07d      	b.n	6654 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6558:	4f57      	ldr	r7, [pc, #348]	; (66b8 <port_event_handle+0x1a0>)
    655a:	f240 2329 	movw	r3, #553	; 0x229
    655e:	463a      	mov	r2, r7
    6560:	4956      	ldr	r1, [pc, #344]	; (66bc <port_event_handle+0x1a4>)
    6562:	4857      	ldr	r0, [pc, #348]	; (66c0 <port_event_handle+0x1a8>)
    6564:	f004 fabc 	bl	aae0 <assert_print>
    6568:	f240 2129 	movw	r1, #553	; 0x229
    656c:	4638      	mov	r0, r7
    656e:	f004 fab0 	bl	aad2 <assert_post_action>
    6572:	e076      	b.n	6662 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    6574:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6578:	e000      	b.n	657c <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    657a:	4b52      	ldr	r3, [pc, #328]	; (66c4 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    657c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6580:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    6584:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6588:	4631      	mov	r1, r6
    658a:	4620      	mov	r0, r4
    658c:	f7ff fe82 	bl	6294 <next_sense_cond_call_handler>
    switch (port)
    6590:	0963      	lsrs	r3, r4, #5
    6592:	d01f      	beq.n	65d4 <port_event_handle+0xbc>
    6594:	2b01      	cmp	r3, #1
    6596:	d120      	bne.n	65da <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    6598:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    659c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    65a0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    65a2:	f013 0f01 	tst.w	r3, #1
    65a6:	d01a      	beq.n	65de <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    65a8:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    65ac:	0964      	lsrs	r4, r4, #5
    65ae:	d024      	beq.n	65fa <port_event_handle+0xe2>
    65b0:	2c01      	cmp	r4, #1
    65b2:	d025      	beq.n	6600 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    65b4:	4c40      	ldr	r4, [pc, #256]	; (66b8 <port_event_handle+0x1a0>)
    65b6:	f240 232e 	movw	r3, #558	; 0x22e
    65ba:	4622      	mov	r2, r4
    65bc:	4942      	ldr	r1, [pc, #264]	; (66c8 <port_event_handle+0x1b0>)
    65be:	4840      	ldr	r0, [pc, #256]	; (66c0 <port_event_handle+0x1a8>)
    65c0:	f004 fa8e 	bl	aae0 <assert_print>
    65c4:	f240 212e 	movw	r1, #558	; 0x22e
    65c8:	4620      	mov	r0, r4
    65ca:	f004 fa82 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    65ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    65d2:	e016      	b.n	6602 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    65d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65d8:	e7e0      	b.n	659c <port_event_handle+0x84>
    switch (port)
    65da:	2300      	movs	r3, #0
    65dc:	e7de      	b.n	659c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    65de:	4e36      	ldr	r6, [pc, #216]	; (66b8 <port_event_handle+0x1a0>)
    65e0:	f240 2329 	movw	r3, #553	; 0x229
    65e4:	4632      	mov	r2, r6
    65e6:	4935      	ldr	r1, [pc, #212]	; (66bc <port_event_handle+0x1a4>)
    65e8:	4835      	ldr	r0, [pc, #212]	; (66c0 <port_event_handle+0x1a8>)
    65ea:	f004 fa79 	bl	aae0 <assert_print>
    65ee:	f240 2129 	movw	r1, #553	; 0x229
    65f2:	4630      	mov	r0, r6
    65f4:	f004 fa6d 	bl	aad2 <assert_post_action>
    65f8:	e7d6      	b.n	65a8 <port_event_handle+0x90>
        case 0: return NRF_P0;
    65fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    65fe:	e000      	b.n	6602 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6600:	4a30      	ldr	r2, [pc, #192]	; (66c4 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    6602:	2301      	movs	r3, #1
    6604:	40b3      	lsls	r3, r6
    6606:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    660a:	ab04      	add	r3, sp, #16
    660c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6610:	f853 4c08 	ldr.w	r4, [r3, #-8]
    6614:	2c00      	cmp	r4, #0
    6616:	d03b      	beq.n	6690 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    6618:	fa94 f4a4 	rbit	r4, r4
    661c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6620:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6624:	f104 0208 	add.w	r2, r4, #8
    6628:	4b28      	ldr	r3, [pc, #160]	; (66cc <port_event_handle+0x1b4>)
    662a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    662e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6632:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    6634:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6638:	a802      	add	r0, sp, #8
    663a:	2301      	movs	r3, #1
    663c:	fa03 f202 	lsl.w	r2, r3, r2
    6640:	5c43      	ldrb	r3, [r0, r1]
    6642:	ea23 0302 	bic.w	r3, r3, r2
    6646:	5443      	strb	r3, [r0, r1]
    switch (port)
    6648:	0963      	lsrs	r3, r4, #5
    664a:	d080      	beq.n	654e <port_event_handle+0x36>
    664c:	2b01      	cmp	r3, #1
    664e:	d181      	bne.n	6554 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    6650:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6654:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6658:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    665a:	f013 0f01 	tst.w	r3, #1
    665e:	f43f af7b 	beq.w	6558 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    6662:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6666:	0963      	lsrs	r3, r4, #5
    6668:	d084      	beq.n	6574 <port_event_handle+0x5c>
    666a:	2b01      	cmp	r3, #1
    666c:	d085      	beq.n	657a <port_event_handle+0x62>
            NRFX_ASSERT(0);
    666e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 66b8 <port_event_handle+0x1a0>
    6672:	f240 232e 	movw	r3, #558	; 0x22e
    6676:	4642      	mov	r2, r8
    6678:	4913      	ldr	r1, [pc, #76]	; (66c8 <port_event_handle+0x1b0>)
    667a:	4811      	ldr	r0, [pc, #68]	; (66c0 <port_event_handle+0x1a8>)
    667c:	f004 fa30 	bl	aae0 <assert_print>
    6680:	f240 212e 	movw	r1, #558	; 0x22e
    6684:	4640      	mov	r0, r8
    6686:	f004 fa24 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    668a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    668e:	e775      	b.n	657c <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6690:	3501      	adds	r5, #1
    6692:	2d01      	cmp	r5, #1
    6694:	d9b9      	bls.n	660a <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6696:	4b0e      	ldr	r3, [pc, #56]	; (66d0 <port_event_handle+0x1b8>)
    6698:	2200      	movs	r2, #0
    669a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    669e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    66a2:	a802      	add	r0, sp, #8
    66a4:	f7ff fdce 	bl	6244 <latch_pending_read_and_check>
    66a8:	b108      	cbz	r0, 66ae <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    66aa:	2500      	movs	r5, #0
    66ac:	e7f1      	b.n	6692 <port_event_handle+0x17a>
}
    66ae:	b004      	add	sp, #16
    66b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b4:	0000c310 	.word	0x0000c310
    66b8:	0000d708 	.word	0x0000d708
    66bc:	0000d73c 	.word	0x0000d73c
    66c0:	0000c478 	.word	0x0000c478
    66c4:	50000300 	.word	0x50000300
    66c8:	0000cb38 	.word	0x0000cb38
    66cc:	20004064 	.word	0x20004064
    66d0:	40006000 	.word	0x40006000

000066d4 <nrfx_gpiote_input_configure>:
{
    66d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66d8:	4604      	mov	r4, r0
    66da:	4615      	mov	r5, r2
    66dc:	461e      	mov	r6, r3
    if (p_input_config)
    66de:	2900      	cmp	r1, #0
    66e0:	d064      	beq.n	67ac <nrfx_gpiote_input_configure+0xd8>
    66e2:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    66e4:	f005 faf4 	bl	bcd0 <pin_is_task_output>
    66e8:	2800      	cmp	r0, #0
    66ea:	f040 80cd 	bne.w	6888 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    66ee:	0963      	lsrs	r3, r4, #5
    66f0:	d020      	beq.n	6734 <nrfx_gpiote_input_configure+0x60>
    66f2:	2b01      	cmp	r3, #1
    66f4:	d121      	bne.n	673a <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    66f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    66fa:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    66fe:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6700:	f013 0f01 	tst.w	r3, #1
    6704:	d01b      	beq.n	673e <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    6706:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    670a:	0963      	lsrs	r3, r4, #5
    670c:	d025      	beq.n	675a <nrfx_gpiote_input_configure+0x86>
    670e:	2b01      	cmp	r3, #1
    6710:	d026      	beq.n	6760 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    6712:	f8df 9184 	ldr.w	r9, [pc, #388]	; 6898 <nrfx_gpiote_input_configure+0x1c4>
    6716:	f240 232e 	movw	r3, #558	; 0x22e
    671a:	464a      	mov	r2, r9
    671c:	495f      	ldr	r1, [pc, #380]	; (689c <nrfx_gpiote_input_configure+0x1c8>)
    671e:	4860      	ldr	r0, [pc, #384]	; (68a0 <nrfx_gpiote_input_configure+0x1cc>)
    6720:	f004 f9de 	bl	aae0 <assert_print>
    6724:	f240 212e 	movw	r1, #558	; 0x22e
    6728:	4648      	mov	r0, r9
    672a:	f004 f9d2 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    672e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6732:	e016      	b.n	6762 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    6734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6738:	e7df      	b.n	66fa <nrfx_gpiote_input_configure+0x26>
    switch (port)
    673a:	2300      	movs	r3, #0
    673c:	e7dd      	b.n	66fa <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    673e:	4f56      	ldr	r7, [pc, #344]	; (6898 <nrfx_gpiote_input_configure+0x1c4>)
    6740:	f240 2329 	movw	r3, #553	; 0x229
    6744:	463a      	mov	r2, r7
    6746:	4957      	ldr	r1, [pc, #348]	; (68a4 <nrfx_gpiote_input_configure+0x1d0>)
    6748:	4855      	ldr	r0, [pc, #340]	; (68a0 <nrfx_gpiote_input_configure+0x1cc>)
    674a:	f004 f9c9 	bl	aae0 <assert_print>
    674e:	f240 2129 	movw	r1, #553	; 0x229
    6752:	4638      	mov	r0, r7
    6754:	f004 f9bd 	bl	aad2 <assert_post_action>
    6758:	e7d5      	b.n	6706 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    675a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    675e:	e000      	b.n	6762 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6760:	4951      	ldr	r1, [pc, #324]	; (68a8 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6762:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    6766:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    676a:	f1b8 0f00 	cmp.w	r8, #0
    676e:	d03f      	beq.n	67f0 <nrfx_gpiote_input_configure+0x11c>
    6770:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6772:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    6776:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    677a:	f1b8 0f00 	cmp.w	r8, #0
    677e:	d039      	beq.n	67f4 <nrfx_gpiote_input_configure+0x120>
    6780:	f898 2000 	ldrb.w	r2, [r8]
    6784:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6786:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    6788:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    678c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6790:	4a46      	ldr	r2, [pc, #280]	; (68ac <nrfx_gpiote_input_configure+0x1d8>)
    6792:	f104 0108 	add.w	r1, r4, #8
    6796:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    679a:	f023 0302 	bic.w	r3, r3, #2
    679e:	b29b      	uxth	r3, r3
    67a0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    67a4:	f043 0301 	orr.w	r3, r3, #1
    67a8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    67ac:	b1bd      	cbz	r5, 67de <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    67ae:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    67b0:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    67b4:	4620      	mov	r0, r4
    67b6:	f7ff fc2f 	bl	6018 <pin_is_output>
    67ba:	b1e8      	cbz	r0, 67f8 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    67bc:	f1b8 0f00 	cmp.w	r8, #0
    67c0:	d164      	bne.n	688c <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    67c2:	4a3a      	ldr	r2, [pc, #232]	; (68ac <nrfx_gpiote_input_configure+0x1d8>)
    67c4:	f104 0108 	add.w	r1, r4, #8
    67c8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    67cc:	f023 031c 	bic.w	r3, r3, #28
    67d0:	b29b      	uxth	r3, r3
    67d2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    67d6:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    67da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    67de:	2e00      	cmp	r6, #0
    67e0:	d058      	beq.n	6894 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    67e2:	6872      	ldr	r2, [r6, #4]
    67e4:	6831      	ldr	r1, [r6, #0]
    67e6:	4620      	mov	r0, r4
    67e8:	f7ff fcd4 	bl	6194 <pin_handler_set>
}
    67ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    67f0:	2200      	movs	r2, #0
    67f2:	e7be      	b.n	6772 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    67f4:	2200      	movs	r2, #0
    67f6:	e7c6      	b.n	6786 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    67f8:	4a2c      	ldr	r2, [pc, #176]	; (68ac <nrfx_gpiote_input_configure+0x1d8>)
    67fa:	f104 0108 	add.w	r1, r4, #8
    67fe:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6802:	f023 0320 	bic.w	r3, r3, #32
    6806:	04db      	lsls	r3, r3, #19
    6808:	0cdb      	lsrs	r3, r3, #19
    680a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    680e:	f1b8 0f00 	cmp.w	r8, #0
    6812:	d0d6      	beq.n	67c2 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    6814:	2f03      	cmp	r7, #3
    6816:	d83b      	bhi.n	6890 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6818:	686b      	ldr	r3, [r5, #4]
    681a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    681c:	b937      	cbnz	r7, 682c <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    681e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6822:	4b23      	ldr	r3, [pc, #140]	; (68b0 <nrfx_gpiote_input_configure+0x1dc>)
    6824:	2200      	movs	r2, #0
    6826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    682a:	e7ca      	b.n	67c2 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    682c:	4638      	mov	r0, r7
    682e:	f005 fa66 	bl	bcfe <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6832:	4b1f      	ldr	r3, [pc, #124]	; (68b0 <nrfx_gpiote_input_configure+0x1dc>)
    6834:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    6838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    683c:	f021 0103 	bic.w	r1, r1, #3
    6840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6848:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    684c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    6850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6854:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    6858:	0221      	lsls	r1, r4, #8
    685a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    685e:	0400      	lsls	r0, r0, #16
    6860:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6864:	4301      	orrs	r1, r0
    6866:	ea4c 0101 	orr.w	r1, ip, r1
    686a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    686e:	036b      	lsls	r3, r5, #13
    6870:	b29b      	uxth	r3, r3
    6872:	4a0e      	ldr	r2, [pc, #56]	; (68ac <nrfx_gpiote_input_configure+0x1d8>)
    6874:	f104 0108 	add.w	r1, r4, #8
    6878:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    687c:	4303      	orrs	r3, r0
    687e:	f043 0320 	orr.w	r3, r3, #32
    6882:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    6886:	e79c      	b.n	67c2 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    6888:	480a      	ldr	r0, [pc, #40]	; (68b4 <nrfx_gpiote_input_configure+0x1e0>)
    688a:	e7af      	b.n	67ec <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    688c:	4809      	ldr	r0, [pc, #36]	; (68b4 <nrfx_gpiote_input_configure+0x1e0>)
    688e:	e7ad      	b.n	67ec <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    6890:	4808      	ldr	r0, [pc, #32]	; (68b4 <nrfx_gpiote_input_configure+0x1e0>)
    6892:	e7ab      	b.n	67ec <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    6894:	4808      	ldr	r0, [pc, #32]	; (68b8 <nrfx_gpiote_input_configure+0x1e4>)
    6896:	e7a9      	b.n	67ec <nrfx_gpiote_input_configure+0x118>
    6898:	0000d708 	.word	0x0000d708
    689c:	0000cb38 	.word	0x0000cb38
    68a0:	0000c478 	.word	0x0000c478
    68a4:	0000d73c 	.word	0x0000d73c
    68a8:	50000300 	.word	0x50000300
    68ac:	20004064 	.word	0x20004064
    68b0:	40006000 	.word	0x40006000
    68b4:	0bad0004 	.word	0x0bad0004
    68b8:	0bad0000 	.word	0x0bad0000

000068bc <nrfx_gpiote_output_configure>:
{
    68bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68c0:	4604      	mov	r4, r0
    68c2:	4615      	mov	r5, r2
    if (p_config)
    68c4:	2900      	cmp	r1, #0
    68c6:	f000 8086 	beq.w	69d6 <nrfx_gpiote_output_configure+0x11a>
    68ca:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    68cc:	f005 fa0f 	bl	bcee <pin_is_input>
    68d0:	b128      	cbz	r0, 68de <nrfx_gpiote_output_configure+0x22>
    68d2:	4620      	mov	r0, r4
    68d4:	f7ff fb8a 	bl	5fec <pin_in_use_by_te>
    68d8:	2800      	cmp	r0, #0
    68da:	f040 80ce 	bne.w	6a7a <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    68de:	4620      	mov	r0, r4
    68e0:	f7ff fb8e 	bl	6000 <pin_has_trigger>
    68e4:	b118      	cbz	r0, 68ee <nrfx_gpiote_output_configure+0x32>
    68e6:	787b      	ldrb	r3, [r7, #1]
    68e8:	2b01      	cmp	r3, #1
    68ea:	f000 80c8 	beq.w	6a7e <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    68ee:	f107 0901 	add.w	r9, r7, #1
    68f2:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    68f6:	0963      	lsrs	r3, r4, #5
    68f8:	d020      	beq.n	693c <nrfx_gpiote_output_configure+0x80>
    68fa:	2b01      	cmp	r3, #1
    68fc:	d121      	bne.n	6942 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    68fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6902:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6906:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6908:	f013 0f01 	tst.w	r3, #1
    690c:	d01b      	beq.n	6946 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    690e:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6912:	0963      	lsrs	r3, r4, #5
    6914:	d025      	beq.n	6962 <nrfx_gpiote_output_configure+0xa6>
    6916:	2b01      	cmp	r3, #1
    6918:	d026      	beq.n	6968 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    691a:	f8df a170 	ldr.w	sl, [pc, #368]	; 6a8c <nrfx_gpiote_output_configure+0x1d0>
    691e:	f240 232e 	movw	r3, #558	; 0x22e
    6922:	4652      	mov	r2, sl
    6924:	495a      	ldr	r1, [pc, #360]	; (6a90 <nrfx_gpiote_output_configure+0x1d4>)
    6926:	485b      	ldr	r0, [pc, #364]	; (6a94 <nrfx_gpiote_output_configure+0x1d8>)
    6928:	f004 f8da 	bl	aae0 <assert_print>
    692c:	f240 212e 	movw	r1, #558	; 0x22e
    6930:	4650      	mov	r0, sl
    6932:	f004 f8ce 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    693a:	e016      	b.n	696a <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    693c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6940:	e7df      	b.n	6902 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    6942:	2300      	movs	r3, #0
    6944:	e7dd      	b.n	6902 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6946:	4e51      	ldr	r6, [pc, #324]	; (6a8c <nrfx_gpiote_output_configure+0x1d0>)
    6948:	f240 2329 	movw	r3, #553	; 0x229
    694c:	4632      	mov	r2, r6
    694e:	4952      	ldr	r1, [pc, #328]	; (6a98 <nrfx_gpiote_output_configure+0x1dc>)
    6950:	4850      	ldr	r0, [pc, #320]	; (6a94 <nrfx_gpiote_output_configure+0x1d8>)
    6952:	f004 f8c5 	bl	aae0 <assert_print>
    6956:	f240 2129 	movw	r1, #553	; 0x229
    695a:	4630      	mov	r0, r6
    695c:	f004 f8b9 	bl	aad2 <assert_post_action>
    6960:	e7d5      	b.n	690e <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    6962:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6966:	e000      	b.n	696a <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6968:	4a4c      	ldr	r2, [pc, #304]	; (6a9c <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    696a:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    696e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6972:	f1b9 0f00 	cmp.w	r9, #0
    6976:	d04b      	beq.n	6a10 <nrfx_gpiote_output_configure+0x154>
    6978:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    697a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    697e:	f1b8 0f00 	cmp.w	r8, #0
    6982:	d047      	beq.n	6a14 <nrfx_gpiote_output_configure+0x158>
    6984:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6986:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6988:	2f00      	cmp	r7, #0
    698a:	d045      	beq.n	6a18 <nrfx_gpiote_output_configure+0x15c>
    698c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6990:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    6992:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6996:	f1b9 0f00 	cmp.w	r9, #0
    699a:	d03f      	beq.n	6a1c <nrfx_gpiote_output_configure+0x160>
    699c:	787b      	ldrb	r3, [r7, #1]
    699e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    69a0:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    69a4:	f1b8 0f00 	cmp.w	r8, #0
    69a8:	d03a      	beq.n	6a20 <nrfx_gpiote_output_configure+0x164>
    69aa:	78b8      	ldrb	r0, [r7, #2]
    69ac:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    69ae:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    69b0:	2f00      	cmp	r7, #0
    69b2:	d037      	beq.n	6a24 <nrfx_gpiote_output_configure+0x168>
    69b4:	7838      	ldrb	r0, [r7, #0]
    69b6:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    69b8:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    69ba:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    69bc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    69c0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    69c4:	4a36      	ldr	r2, [pc, #216]	; (6aa0 <nrfx_gpiote_output_configure+0x1e4>)
    69c6:	f104 0108 	add.w	r1, r4, #8
    69ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    69ce:	f043 0303 	orr.w	r3, r3, #3
    69d2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    69d6:	2d00      	cmp	r5, #0
    69d8:	d053      	beq.n	6a82 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    69da:	4620      	mov	r0, r4
    69dc:	f005 f987 	bl	bcee <pin_is_input>
    69e0:	2800      	cmp	r0, #0
    69e2:	d150      	bne.n	6a86 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    69e4:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    69e6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    69ea:	4a2e      	ldr	r2, [pc, #184]	; (6aa4 <nrfx_gpiote_output_configure+0x1e8>)
    69ec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    69f0:	492b      	ldr	r1, [pc, #172]	; (6aa0 <nrfx_gpiote_output_configure+0x1e4>)
    69f2:	f104 0008 	add.w	r0, r4, #8
    69f6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    69fa:	f022 0220 	bic.w	r2, r2, #32
    69fe:	04d2      	lsls	r2, r2, #19
    6a00:	0cd2      	lsrs	r2, r2, #19
    6a02:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6a06:	786a      	ldrb	r2, [r5, #1]
    6a08:	b972      	cbnz	r2, 6a28 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    6a0a:	4827      	ldr	r0, [pc, #156]	; (6aa8 <nrfx_gpiote_output_configure+0x1ec>)
}
    6a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6a10:	2300      	movs	r3, #0
    6a12:	e7b2      	b.n	697a <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6a14:	2000      	movs	r0, #0
    6a16:	e7b6      	b.n	6986 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6a18:	2000      	movs	r0, #0
    6a1a:	e7b9      	b.n	6990 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6a1c:	2300      	movs	r3, #0
    6a1e:	e7bf      	b.n	69a0 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6a20:	2000      	movs	r0, #0
    6a22:	e7c4      	b.n	69ae <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6a24:	2000      	movs	r0, #0
    6a26:	e7c7      	b.n	69b8 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6a28:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6a2a:	481e      	ldr	r0, [pc, #120]	; (6aa4 <nrfx_gpiote_output_configure+0x1e8>)
    6a2c:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    6a30:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    6a34:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    6a38:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    6a3c:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a40:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    6a44:	0221      	lsls	r1, r4, #8
    6a46:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6a4a:	0412      	lsls	r2, r2, #16
    6a4c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a50:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6a52:	0539      	lsls	r1, r7, #20
    6a54:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6a58:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a5a:	4332      	orrs	r2, r6
    6a5c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6a60:	035b      	lsls	r3, r3, #13
    6a62:	b29b      	uxth	r3, r3
    6a64:	4a0e      	ldr	r2, [pc, #56]	; (6aa0 <nrfx_gpiote_output_configure+0x1e4>)
    6a66:	3408      	adds	r4, #8
    6a68:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6a6c:	430b      	orrs	r3, r1
    6a6e:	f043 0320 	orr.w	r3, r3, #32
    6a72:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    6a76:	480c      	ldr	r0, [pc, #48]	; (6aa8 <nrfx_gpiote_output_configure+0x1ec>)
    6a78:	e7c8      	b.n	6a0c <nrfx_gpiote_output_configure+0x150>
    6a7a:	480c      	ldr	r0, [pc, #48]	; (6aac <nrfx_gpiote_output_configure+0x1f0>)
    6a7c:	e7c6      	b.n	6a0c <nrfx_gpiote_output_configure+0x150>
    6a7e:	480b      	ldr	r0, [pc, #44]	; (6aac <nrfx_gpiote_output_configure+0x1f0>)
    6a80:	e7c4      	b.n	6a0c <nrfx_gpiote_output_configure+0x150>
    6a82:	4809      	ldr	r0, [pc, #36]	; (6aa8 <nrfx_gpiote_output_configure+0x1ec>)
    6a84:	e7c2      	b.n	6a0c <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    6a86:	4809      	ldr	r0, [pc, #36]	; (6aac <nrfx_gpiote_output_configure+0x1f0>)
    6a88:	e7c0      	b.n	6a0c <nrfx_gpiote_output_configure+0x150>
    6a8a:	bf00      	nop
    6a8c:	0000d708 	.word	0x0000d708
    6a90:	0000cb38 	.word	0x0000cb38
    6a94:	0000c478 	.word	0x0000c478
    6a98:	0000d73c 	.word	0x0000d73c
    6a9c:	50000300 	.word	0x50000300
    6aa0:	20004064 	.word	0x20004064
    6aa4:	40006000 	.word	0x40006000
    6aa8:	0bad0000 	.word	0x0bad0000
    6aac:	0bad0004 	.word	0x0bad0004

00006ab0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6ab0:	4b01      	ldr	r3, [pc, #4]	; (6ab8 <nrfx_gpiote_global_callback_set+0x8>)
    6ab2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6ab4:	60d9      	str	r1, [r3, #12]
}
    6ab6:	4770      	bx	lr
    6ab8:	20004064 	.word	0x20004064

00006abc <nrfx_gpiote_channel_get>:
{
    6abc:	b570      	push	{r4, r5, r6, lr}
    6abe:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6ac0:	460d      	mov	r5, r1
    6ac2:	b159      	cbz	r1, 6adc <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    6ac4:	4620      	mov	r0, r4
    6ac6:	f7ff fa91 	bl	5fec <pin_in_use_by_te>
    6aca:	b1a8      	cbz	r0, 6af8 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6acc:	3408      	adds	r4, #8
    6ace:	4b0b      	ldr	r3, [pc, #44]	; (6afc <nrfx_gpiote_channel_get+0x40>)
    6ad0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6ad4:	0b5b      	lsrs	r3, r3, #13
    6ad6:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6ad8:	4809      	ldr	r0, [pc, #36]	; (6b00 <nrfx_gpiote_channel_get+0x44>)
}
    6ada:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    6adc:	4e09      	ldr	r6, [pc, #36]	; (6b04 <nrfx_gpiote_channel_get+0x48>)
    6ade:	f240 2335 	movw	r3, #565	; 0x235
    6ae2:	4632      	mov	r2, r6
    6ae4:	4908      	ldr	r1, [pc, #32]	; (6b08 <nrfx_gpiote_channel_get+0x4c>)
    6ae6:	4809      	ldr	r0, [pc, #36]	; (6b0c <nrfx_gpiote_channel_get+0x50>)
    6ae8:	f003 fffa 	bl	aae0 <assert_print>
    6aec:	f240 2135 	movw	r1, #565	; 0x235
    6af0:	4630      	mov	r0, r6
    6af2:	f003 ffee 	bl	aad2 <assert_post_action>
    6af6:	e7e5      	b.n	6ac4 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6af8:	4805      	ldr	r0, [pc, #20]	; (6b10 <nrfx_gpiote_channel_get+0x54>)
    6afa:	e7ee      	b.n	6ada <nrfx_gpiote_channel_get+0x1e>
    6afc:	20004064 	.word	0x20004064
    6b00:	0bad0000 	.word	0x0bad0000
    6b04:	0000d9a4 	.word	0x0000d9a4
    6b08:	0000d9f8 	.word	0x0000d9f8
    6b0c:	0000c478 	.word	0x0000c478
    6b10:	0bad0004 	.word	0x0bad0004

00006b14 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6b14:	4b10      	ldr	r3, [pc, #64]	; (6b58 <nrfx_gpiote_init+0x44>)
    6b16:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6b1a:	b10b      	cbz	r3, 6b20 <nrfx_gpiote_init+0xc>
        return err_code;
    6b1c:	480f      	ldr	r0, [pc, #60]	; (6b5c <nrfx_gpiote_init+0x48>)
}
    6b1e:	4770      	bx	lr
{
    6b20:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6b22:	4c0d      	ldr	r4, [pc, #52]	; (6b58 <nrfx_gpiote_init+0x44>)
    6b24:	2260      	movs	r2, #96	; 0x60
    6b26:	2100      	movs	r1, #0
    6b28:	f104 0010 	add.w	r0, r4, #16
    6b2c:	f005 fa16 	bl	bf5c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6b30:	2006      	movs	r0, #6
    6b32:	f7fc f967 	bl	2e04 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b36:	4b0a      	ldr	r3, [pc, #40]	; (6b60 <nrfx_gpiote_init+0x4c>)
    6b38:	2200      	movs	r2, #0
    6b3a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6b3e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6b46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6b4a:	2301      	movs	r3, #1
    6b4c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6b50:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    6b52:	4804      	ldr	r0, [pc, #16]	; (6b64 <nrfx_gpiote_init+0x50>)
}
    6b54:	bd10      	pop	{r4, pc}
    6b56:	bf00      	nop
    6b58:	20004064 	.word	0x20004064
    6b5c:	0bad0005 	.word	0x0bad0005
    6b60:	40006000 	.word	0x40006000
    6b64:	0bad0000 	.word	0x0bad0000

00006b68 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6b68:	4b03      	ldr	r3, [pc, #12]	; (6b78 <nrfx_gpiote_is_init+0x10>)
    6b6a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6b6e:	3800      	subs	r0, #0
    6b70:	bf18      	it	ne
    6b72:	2001      	movne	r0, #1
    6b74:	4770      	bx	lr
    6b76:	bf00      	nop
    6b78:	20004064 	.word	0x20004064

00006b7c <nrfx_gpiote_channel_free>:
{
    6b7c:	b508      	push	{r3, lr}
    6b7e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6b80:	4801      	ldr	r0, [pc, #4]	; (6b88 <nrfx_gpiote_channel_free+0xc>)
    6b82:	f7ff f855 	bl	5c30 <nrfx_flag32_free>
}
    6b86:	bd08      	pop	{r3, pc}
    6b88:	200040d4 	.word	0x200040d4

00006b8c <nrfx_gpiote_channel_alloc>:
{
    6b8c:	b508      	push	{r3, lr}
    6b8e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6b90:	4801      	ldr	r0, [pc, #4]	; (6b98 <nrfx_gpiote_channel_alloc+0xc>)
    6b92:	f7ff f825 	bl	5be0 <nrfx_flag32_alloc>
}
    6b96:	bd08      	pop	{r3, pc}
    6b98:	200040d4 	.word	0x200040d4

00006b9c <nrfx_gpiote_trigger_enable>:
{
    6b9c:	b570      	push	{r4, r5, r6, lr}
    6b9e:	4604      	mov	r4, r0
    6ba0:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6ba2:	f7ff fa2d 	bl	6000 <pin_has_trigger>
    6ba6:	b1b8      	cbz	r0, 6bd8 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6ba8:	4620      	mov	r0, r4
    6baa:	f7ff fa1f 	bl	5fec <pin_in_use_by_te>
    6bae:	b118      	cbz	r0, 6bb8 <nrfx_gpiote_trigger_enable+0x1c>
    6bb0:	4620      	mov	r0, r4
    6bb2:	f005 f89c 	bl	bcee <pin_is_input>
    6bb6:	b9e8      	cbnz	r0, 6bf4 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    6bb8:	2d00      	cmp	r5, #0
    6bba:	d04c      	beq.n	6c56 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6bbc:	f104 0308 	add.w	r3, r4, #8
    6bc0:	4a70      	ldr	r2, [pc, #448]	; (6d84 <nrfx_gpiote_trigger_enable+0x1e8>)
    6bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6bc6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6bca:	2b04      	cmp	r3, #4
    6bcc:	f000 8092 	beq.w	6cf4 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6bd0:	2b05      	cmp	r3, #5
    6bd2:	d14e      	bne.n	6c72 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6bd4:	2602      	movs	r6, #2
    6bd6:	e08e      	b.n	6cf6 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    6bd8:	4e6b      	ldr	r6, [pc, #428]	; (6d88 <nrfx_gpiote_trigger_enable+0x1ec>)
    6bda:	f240 33df 	movw	r3, #991	; 0x3df
    6bde:	4632      	mov	r2, r6
    6be0:	496a      	ldr	r1, [pc, #424]	; (6d8c <nrfx_gpiote_trigger_enable+0x1f0>)
    6be2:	486b      	ldr	r0, [pc, #428]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6be4:	f003 ff7c 	bl	aae0 <assert_print>
    6be8:	f240 31df 	movw	r1, #991	; 0x3df
    6bec:	4630      	mov	r0, r6
    6bee:	f003 ff70 	bl	aad2 <assert_post_action>
    6bf2:	e7d9      	b.n	6ba8 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    6bf4:	4620      	mov	r0, r4
    6bf6:	f7ff fa19 	bl	602c <pin_te_get>
    6bfa:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6bfc:	2807      	cmp	r0, #7
    6bfe:	d81c      	bhi.n	6c3a <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6c00:	00a3      	lsls	r3, r4, #2
    6c02:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6c06:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6c0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c10:	2200      	movs	r2, #0
    6c12:	601a      	str	r2, [r3, #0]
    6c14:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6c16:	4a5f      	ldr	r2, [pc, #380]	; (6d94 <nrfx_gpiote_trigger_enable+0x1f8>)
    6c18:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    6c1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6c20:	f043 0301 	orr.w	r3, r3, #1
    6c24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6c28:	2d00      	cmp	r5, #0
    6c2a:	f000 80a9 	beq.w	6d80 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6c2e:	2001      	movs	r0, #1
    6c30:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    6c34:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6c38:	e0a2      	b.n	6d80 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6c3a:	4e57      	ldr	r6, [pc, #348]	; (6d98 <nrfx_gpiote_trigger_enable+0x1fc>)
    6c3c:	f44f 7323 	mov.w	r3, #652	; 0x28c
    6c40:	4632      	mov	r2, r6
    6c42:	4956      	ldr	r1, [pc, #344]	; (6d9c <nrfx_gpiote_trigger_enable+0x200>)
    6c44:	4852      	ldr	r0, [pc, #328]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c46:	f003 ff4b 	bl	aae0 <assert_print>
    6c4a:	f44f 7123 	mov.w	r1, #652	; 0x28c
    6c4e:	4630      	mov	r0, r6
    6c50:	f003 ff3f 	bl	aad2 <assert_post_action>
    6c54:	e7d4      	b.n	6c00 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    6c56:	4d4c      	ldr	r5, [pc, #304]	; (6d88 <nrfx_gpiote_trigger_enable+0x1ec>)
    6c58:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6c5c:	462a      	mov	r2, r5
    6c5e:	4950      	ldr	r1, [pc, #320]	; (6da0 <nrfx_gpiote_trigger_enable+0x204>)
    6c60:	484b      	ldr	r0, [pc, #300]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c62:	f003 ff3d 	bl	aae0 <assert_print>
    6c66:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6c6a:	4628      	mov	r0, r5
    6c6c:	f003 ff31 	bl	aad2 <assert_post_action>
    6c70:	e7a4      	b.n	6bbc <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    6c72:	0963      	lsrs	r3, r4, #5
    6c74:	d01f      	beq.n	6cb6 <nrfx_gpiote_trigger_enable+0x11a>
    6c76:	2b01      	cmp	r3, #1
    6c78:	d120      	bne.n	6cbc <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    6c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c7e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c82:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c84:	f013 0f01 	tst.w	r3, #1
    6c88:	d01a      	beq.n	6cc0 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    6c8a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c8e:	0963      	lsrs	r3, r4, #5
    6c90:	d024      	beq.n	6cdc <nrfx_gpiote_trigger_enable+0x140>
    6c92:	2b01      	cmp	r3, #1
    6c94:	d025      	beq.n	6ce2 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    6c96:	4e43      	ldr	r6, [pc, #268]	; (6da4 <nrfx_gpiote_trigger_enable+0x208>)
    6c98:	f240 232e 	movw	r3, #558	; 0x22e
    6c9c:	4632      	mov	r2, r6
    6c9e:	4942      	ldr	r1, [pc, #264]	; (6da8 <nrfx_gpiote_trigger_enable+0x20c>)
    6ca0:	483b      	ldr	r0, [pc, #236]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6ca2:	f003 ff1d 	bl	aae0 <assert_print>
    6ca6:	f240 212e 	movw	r1, #558	; 0x22e
    6caa:	4630      	mov	r0, r6
    6cac:	f003 ff11 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6cb4:	e016      	b.n	6ce4 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    6cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6cba:	e7e0      	b.n	6c7e <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    6cbc:	2300      	movs	r3, #0
    6cbe:	e7de      	b.n	6c7e <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6cc0:	4d38      	ldr	r5, [pc, #224]	; (6da4 <nrfx_gpiote_trigger_enable+0x208>)
    6cc2:	f240 2329 	movw	r3, #553	; 0x229
    6cc6:	462a      	mov	r2, r5
    6cc8:	4938      	ldr	r1, [pc, #224]	; (6dac <nrfx_gpiote_trigger_enable+0x210>)
    6cca:	4831      	ldr	r0, [pc, #196]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6ccc:	f003 ff08 	bl	aae0 <assert_print>
    6cd0:	f240 2129 	movw	r1, #553	; 0x229
    6cd4:	4628      	mov	r0, r5
    6cd6:	f003 fefc 	bl	aad2 <assert_post_action>
    6cda:	e7d6      	b.n	6c8a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    6cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6ce0:	e000      	b.n	6ce4 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ce2:	4b33      	ldr	r3, [pc, #204]	; (6db0 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    6ce4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6ce8:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6cea:	f013 0f01 	tst.w	r3, #1
    6cee:	d024      	beq.n	6d3a <nrfx_gpiote_trigger_enable+0x19e>
    6cf0:	2603      	movs	r6, #3
    6cf2:	e000      	b.n	6cf6 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6cf4:	2603      	movs	r6, #3
    switch (port)
    6cf6:	0963      	lsrs	r3, r4, #5
    6cf8:	d021      	beq.n	6d3e <nrfx_gpiote_trigger_enable+0x1a2>
    6cfa:	2b01      	cmp	r3, #1
    6cfc:	d122      	bne.n	6d44 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    6cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d02:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d06:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d08:	f013 0f01 	tst.w	r3, #1
    6d0c:	d01c      	beq.n	6d48 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    6d0e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d12:	0964      	lsrs	r4, r4, #5
    6d14:	d026      	beq.n	6d64 <nrfx_gpiote_trigger_enable+0x1c8>
    6d16:	2c01      	cmp	r4, #1
    6d18:	d027      	beq.n	6d6a <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6d1a:	4c22      	ldr	r4, [pc, #136]	; (6da4 <nrfx_gpiote_trigger_enable+0x208>)
    6d1c:	f240 232e 	movw	r3, #558	; 0x22e
    6d20:	4622      	mov	r2, r4
    6d22:	4921      	ldr	r1, [pc, #132]	; (6da8 <nrfx_gpiote_trigger_enable+0x20c>)
    6d24:	481a      	ldr	r0, [pc, #104]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6d26:	f003 fedb 	bl	aae0 <assert_print>
    6d2a:	f240 212e 	movw	r1, #558	; 0x22e
    6d2e:	4620      	mov	r0, r4
    6d30:	f003 fecf 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6d34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6d38:	e018      	b.n	6d6c <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6d3a:	2602      	movs	r6, #2
    6d3c:	e7db      	b.n	6cf6 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    6d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6d42:	e7de      	b.n	6d02 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    6d44:	2300      	movs	r3, #0
    6d46:	e7dc      	b.n	6d02 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d48:	4d16      	ldr	r5, [pc, #88]	; (6da4 <nrfx_gpiote_trigger_enable+0x208>)
    6d4a:	f240 2329 	movw	r3, #553	; 0x229
    6d4e:	462a      	mov	r2, r5
    6d50:	4916      	ldr	r1, [pc, #88]	; (6dac <nrfx_gpiote_trigger_enable+0x210>)
    6d52:	480f      	ldr	r0, [pc, #60]	; (6d90 <nrfx_gpiote_trigger_enable+0x1f4>)
    6d54:	f003 fec4 	bl	aae0 <assert_print>
    6d58:	f240 2129 	movw	r1, #553	; 0x229
    6d5c:	4628      	mov	r0, r5
    6d5e:	f003 feb8 	bl	aad2 <assert_post_action>
    6d62:	e7d4      	b.n	6d0e <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    6d64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6d68:	e000      	b.n	6d6c <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d6a:	4911      	ldr	r1, [pc, #68]	; (6db0 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6d6c:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    6d70:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6d74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6d78:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6d7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    6d80:	bd70      	pop	{r4, r5, r6, pc}
    6d82:	bf00      	nop
    6d84:	20004064 	.word	0x20004064
    6d88:	0000d9a4 	.word	0x0000d9a4
    6d8c:	0000da48 	.word	0x0000da48
    6d90:	0000c478 	.word	0x0000c478
    6d94:	40006000 	.word	0x40006000
    6d98:	0000da04 	.word	0x0000da04
    6d9c:	0000da3c 	.word	0x0000da3c
    6da0:	0000da60 	.word	0x0000da60
    6da4:	0000d708 	.word	0x0000d708
    6da8:	0000cb38 	.word	0x0000cb38
    6dac:	0000d73c 	.word	0x0000d73c
    6db0:	50000300 	.word	0x50000300

00006db4 <nrfx_gpiote_trigger_disable>:
{
    6db4:	b538      	push	{r3, r4, r5, lr}
    6db6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6db8:	f7ff f918 	bl	5fec <pin_in_use_by_te>
    6dbc:	b1a0      	cbz	r0, 6de8 <nrfx_gpiote_trigger_disable+0x34>
    6dbe:	4620      	mov	r0, r4
    6dc0:	f004 ff95 	bl	bcee <pin_is_input>
    6dc4:	b180      	cbz	r0, 6de8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    6dc6:	4620      	mov	r0, r4
    6dc8:	f7ff f930 	bl	602c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6dcc:	2201      	movs	r2, #1
    6dce:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6dd0:	4b26      	ldr	r3, [pc, #152]	; (6e6c <nrfx_gpiote_trigger_disable+0xb8>)
    6dd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6dd6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6dda:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    6dde:	f022 0203 	bic.w	r2, r2, #3
    6de2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    6de6:	e040      	b.n	6e6a <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6de8:	0963      	lsrs	r3, r4, #5
    6dea:	d01f      	beq.n	6e2c <nrfx_gpiote_trigger_disable+0x78>
    6dec:	2b01      	cmp	r3, #1
    6dee:	d120      	bne.n	6e32 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    6df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6df4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6df8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dfa:	f013 0f01 	tst.w	r3, #1
    6dfe:	d01a      	beq.n	6e36 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    6e00:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e04:	0964      	lsrs	r4, r4, #5
    6e06:	d024      	beq.n	6e52 <nrfx_gpiote_trigger_disable+0x9e>
    6e08:	2c01      	cmp	r4, #1
    6e0a:	d025      	beq.n	6e58 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6e0c:	4c18      	ldr	r4, [pc, #96]	; (6e70 <nrfx_gpiote_trigger_disable+0xbc>)
    6e0e:	f240 232e 	movw	r3, #558	; 0x22e
    6e12:	4622      	mov	r2, r4
    6e14:	4917      	ldr	r1, [pc, #92]	; (6e74 <nrfx_gpiote_trigger_disable+0xc0>)
    6e16:	4818      	ldr	r0, [pc, #96]	; (6e78 <nrfx_gpiote_trigger_disable+0xc4>)
    6e18:	f003 fe62 	bl	aae0 <assert_print>
    6e1c:	f240 212e 	movw	r1, #558	; 0x22e
    6e20:	4620      	mov	r0, r4
    6e22:	f003 fe56 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6e26:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e2a:	e016      	b.n	6e5a <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e30:	e7e0      	b.n	6df4 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    6e32:	2300      	movs	r3, #0
    6e34:	e7de      	b.n	6df4 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e36:	4d0e      	ldr	r5, [pc, #56]	; (6e70 <nrfx_gpiote_trigger_disable+0xbc>)
    6e38:	f240 2329 	movw	r3, #553	; 0x229
    6e3c:	462a      	mov	r2, r5
    6e3e:	490f      	ldr	r1, [pc, #60]	; (6e7c <nrfx_gpiote_trigger_disable+0xc8>)
    6e40:	480d      	ldr	r0, [pc, #52]	; (6e78 <nrfx_gpiote_trigger_disable+0xc4>)
    6e42:	f003 fe4d 	bl	aae0 <assert_print>
    6e46:	f240 2129 	movw	r1, #553	; 0x229
    6e4a:	4628      	mov	r0, r5
    6e4c:	f003 fe41 	bl	aad2 <assert_post_action>
    6e50:	e7d6      	b.n	6e00 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    6e52:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e56:	e000      	b.n	6e5a <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e58:	4909      	ldr	r1, [pc, #36]	; (6e80 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6e5a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6e5e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6e62:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e6a:	bd38      	pop	{r3, r4, r5, pc}
    6e6c:	40006000 	.word	0x40006000
    6e70:	0000d708 	.word	0x0000d708
    6e74:	0000cb38 	.word	0x0000cb38
    6e78:	0000c478 	.word	0x0000c478
    6e7c:	0000d73c 	.word	0x0000d73c
    6e80:	50000300 	.word	0x50000300

00006e84 <nrfx_gpiote_pin_uninit>:
{
    6e84:	b538      	push	{r3, r4, r5, lr}
    6e86:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6e88:	f7ff f8a6 	bl	5fd8 <pin_in_use>
    6e8c:	b908      	cbnz	r0, 6e92 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    6e8e:	4824      	ldr	r0, [pc, #144]	; (6f20 <nrfx_gpiote_pin_uninit+0x9c>)
}
    6e90:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    6e92:	4620      	mov	r0, r4
    6e94:	f7ff ff8e 	bl	6db4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6e98:	4620      	mov	r0, r4
    6e9a:	f7ff f95f 	bl	615c <pin_handler_trigger_uninit>
    switch (port)
    6e9e:	0963      	lsrs	r3, r4, #5
    6ea0:	d01f      	beq.n	6ee2 <nrfx_gpiote_pin_uninit+0x5e>
    6ea2:	2b01      	cmp	r3, #1
    6ea4:	d120      	bne.n	6ee8 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    6ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6eaa:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6eae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eb0:	f013 0f01 	tst.w	r3, #1
    6eb4:	d01a      	beq.n	6eec <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    6eb6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6eba:	0964      	lsrs	r4, r4, #5
    6ebc:	d024      	beq.n	6f08 <nrfx_gpiote_pin_uninit+0x84>
    6ebe:	2c01      	cmp	r4, #1
    6ec0:	d025      	beq.n	6f0e <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    6ec2:	4c18      	ldr	r4, [pc, #96]	; (6f24 <nrfx_gpiote_pin_uninit+0xa0>)
    6ec4:	f240 232e 	movw	r3, #558	; 0x22e
    6ec8:	4622      	mov	r2, r4
    6eca:	4917      	ldr	r1, [pc, #92]	; (6f28 <nrfx_gpiote_pin_uninit+0xa4>)
    6ecc:	4817      	ldr	r0, [pc, #92]	; (6f2c <nrfx_gpiote_pin_uninit+0xa8>)
    6ece:	f003 fe07 	bl	aae0 <assert_print>
    6ed2:	f240 212e 	movw	r1, #558	; 0x22e
    6ed6:	4620      	mov	r0, r4
    6ed8:	f003 fdfb 	bl	aad2 <assert_post_action>
        case 0: return NRF_P0;
    6edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6ee0:	e016      	b.n	6f10 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    6ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ee6:	e7e0      	b.n	6eaa <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6ee8:	2300      	movs	r3, #0
    6eea:	e7de      	b.n	6eaa <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eec:	4d0d      	ldr	r5, [pc, #52]	; (6f24 <nrfx_gpiote_pin_uninit+0xa0>)
    6eee:	f240 2329 	movw	r3, #553	; 0x229
    6ef2:	462a      	mov	r2, r5
    6ef4:	490e      	ldr	r1, [pc, #56]	; (6f30 <nrfx_gpiote_pin_uninit+0xac>)
    6ef6:	480d      	ldr	r0, [pc, #52]	; (6f2c <nrfx_gpiote_pin_uninit+0xa8>)
    6ef8:	f003 fdf2 	bl	aae0 <assert_print>
    6efc:	f240 2129 	movw	r1, #553	; 0x229
    6f00:	4628      	mov	r0, r5
    6f02:	f003 fde6 	bl	aad2 <assert_post_action>
    6f06:	e7d6      	b.n	6eb6 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6f08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6f0c:	e000      	b.n	6f10 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f0e:	4b09      	ldr	r3, [pc, #36]	; (6f34 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    6f10:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6f14:	2202      	movs	r2, #2
    6f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6f1a:	4807      	ldr	r0, [pc, #28]	; (6f38 <nrfx_gpiote_pin_uninit+0xb4>)
}
    6f1c:	e7b8      	b.n	6e90 <nrfx_gpiote_pin_uninit+0xc>
    6f1e:	bf00      	nop
    6f20:	0bad0004 	.word	0x0bad0004
    6f24:	0000d708 	.word	0x0000d708
    6f28:	0000cb38 	.word	0x0000cb38
    6f2c:	0000c478 	.word	0x0000c478
    6f30:	0000d73c 	.word	0x0000d73c
    6f34:	50000300 	.word	0x50000300
    6f38:	0bad0000 	.word	0x0bad0000

00006f3c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6f3c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6f3e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    6f40:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6f44:	2100      	movs	r1, #0
    uint32_t status = 0;
    6f46:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6f48:	e003      	b.n	6f52 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6f4a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6f4c:	3304      	adds	r3, #4
    6f4e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6f50:	3101      	adds	r1, #1
    6f52:	2907      	cmp	r1, #7
    6f54:	d814      	bhi.n	6f80 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f56:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6f5a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    6f5e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6f60:	2a00      	cmp	r2, #0
    6f62:	d0f2      	beq.n	6f4a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    6f64:	4a0c      	ldr	r2, [pc, #48]	; (6f98 <nrfx_gpiote_irq_handler+0x5c>)
    6f66:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6f6a:	4210      	tst	r0, r2
    6f6c:	d0ed      	beq.n	6f4a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    6f6e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6f72:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f76:	2500      	movs	r5, #0
    6f78:	6015      	str	r5, [r2, #0]
    6f7a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    6f7c:	4304      	orrs	r4, r0
    6f7e:	e7e4      	b.n	6f4a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f80:	4b05      	ldr	r3, [pc, #20]	; (6f98 <nrfx_gpiote_irq_handler+0x5c>)
    6f82:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6f86:	b91b      	cbnz	r3, 6f90 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    6f88:	4620      	mov	r0, r4
    6f8a:	f7ff f939 	bl	6200 <gpiote_evt_handle>
}
    6f8e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    6f90:	f7ff fac2 	bl	6518 <port_event_handle>
    6f94:	e7f8      	b.n	6f88 <nrfx_gpiote_irq_handler+0x4c>
    6f96:	bf00      	nop
    6f98:	40006000 	.word	0x40006000

00006f9c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6f9c:	b508      	push	{r3, lr}
    6f9e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6fa0:	4801      	ldr	r0, [pc, #4]	; (6fa8 <nrfx_ppi_channel_alloc+0xc>)
    6fa2:	f7fe fe1d 	bl	5be0 <nrfx_flag32_alloc>
}
    6fa6:	bd08      	pop	{r3, pc}
    6fa8:	200040e0 	.word	0x200040e0

00006fac <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6fac:	4b12      	ldr	r3, [pc, #72]	; (6ff8 <_DoInit+0x4c>)
    6fae:	2203      	movs	r2, #3
    6fb0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6fb2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6fb4:	4911      	ldr	r1, [pc, #68]	; (6ffc <_DoInit+0x50>)
    6fb6:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6fb8:	4a11      	ldr	r2, [pc, #68]	; (7000 <_DoInit+0x54>)
    6fba:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6fc0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    6fc2:	2200      	movs	r2, #0
    6fc4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6fc6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6fca:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6fcc:	490d      	ldr	r1, [pc, #52]	; (7004 <_DoInit+0x58>)
    6fce:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6fd0:	2110      	movs	r1, #16
    6fd2:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6fd4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6fd6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6fd8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6fda:	4a0b      	ldr	r2, [pc, #44]	; (7008 <_DoInit+0x5c>)
    6fdc:	6810      	ldr	r0, [r2, #0]
    6fde:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6fe2:	4a0a      	ldr	r2, [pc, #40]	; (700c <_DoInit+0x60>)
    6fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
    6fe8:	6018      	str	r0, [r3, #0]
    6fea:	8099      	strh	r1, [r3, #4]
    6fec:	0c09      	lsrs	r1, r1, #16
    6fee:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6ff0:	2220      	movs	r2, #32
    6ff2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6ff4:	4770      	bx	lr
    6ff6:	bf00      	nop
    6ff8:	20004bf4 	.word	0x20004bf4
    6ffc:	0000da6c 	.word	0x0000da6c
    7000:	20004cac 	.word	0x20004cac
    7004:	20004c9c 	.word	0x20004c9c
    7008:	0000da78 	.word	0x0000da78
    700c:	0000da7c 	.word	0x0000da7c

00007010 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7014:	4604      	mov	r4, r0
    7016:	460e      	mov	r6, r1
    7018:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    701a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    701e:	4a2d      	ldr	r2, [pc, #180]	; (70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7020:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7024:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7026:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7028:	42bb      	cmp	r3, r7
    702a:	d84b      	bhi.n	70c4 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    702c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7030:	4928      	ldr	r1, [pc, #160]	; (70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7032:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    7036:	f8d2 8020 	ldr.w	r8, [r2, #32]
    703a:	eba8 0907 	sub.w	r9, r8, r7
    703e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7042:	4295      	cmp	r5, r2
    7044:	d904      	bls.n	7050 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    7046:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7048:	429d      	cmp	r5, r3
    704a:	d917      	bls.n	707c <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    704c:	2000      	movs	r0, #0
    704e:	e03e      	b.n	70ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7050:	f8df 8080 	ldr.w	r8, [pc, #128]	; 70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    7054:	1c63      	adds	r3, r4, #1
    7056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    705a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    705e:	6858      	ldr	r0, [r3, #4]
    7060:	462a      	mov	r2, r5
    7062:	4631      	mov	r1, r6
    7064:	4438      	add	r0, r7
    7066:	f004 ff6b 	bl	bf40 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    706a:	443d      	add	r5, r7
    706c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7070:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    7074:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    7078:	2001      	movs	r0, #1
    707a:	e028      	b.n	70ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    707c:	1c43      	adds	r3, r0, #1
    707e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7082:	4a14      	ldr	r2, [pc, #80]	; (70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7088:	6858      	ldr	r0, [r3, #4]
    708a:	464a      	mov	r2, r9
    708c:	4631      	mov	r1, r6
    708e:	4438      	add	r0, r7
    7090:	f004 ff56 	bl	bf40 <memcpy>
      NumBytes -= Rem;
    7094:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    7098:	197f      	adds	r7, r7, r5
    709a:	d00b      	beq.n	70b4 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    709c:	1c63      	adds	r3, r4, #1
    709e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    70a2:	4a0c      	ldr	r2, [pc, #48]	; (70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    70a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    70a8:	463a      	mov	r2, r7
    70aa:	eb06 0109 	add.w	r1, r6, r9
    70ae:	6858      	ldr	r0, [r3, #4]
    70b0:	f004 ff46 	bl	bf40 <memcpy>
      pRing->WrOff = NumBytes;
    70b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    70b8:	4b06      	ldr	r3, [pc, #24]	; (70d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    70ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    70be:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    70c0:	2001      	movs	r0, #1
    70c2:	e004      	b.n	70ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    70c4:	1bdb      	subs	r3, r3, r7
    70c6:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    70c8:	42ab      	cmp	r3, r5
    70ca:	d2c1      	bcs.n	7050 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    70cc:	2000      	movs	r0, #0
}
    70ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    70d2:	bf00      	nop
    70d4:	20004bf4 	.word	0x20004bf4

000070d8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    70d8:	4b06      	ldr	r3, [pc, #24]	; (70f4 <SEGGER_RTT_HasDataUp+0x1c>)
    70da:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    70de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    70e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    70e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    70e8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    70ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    70ee:	1a80      	subs	r0, r0, r2
    70f0:	4770      	bx	lr
    70f2:	bf00      	nop
    70f4:	20004bf4 	.word	0x20004bf4

000070f8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    70f8:	4b03      	ldr	r3, [pc, #12]	; (7108 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    70fa:	e000      	b.n	70fe <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    70fc:	3318      	adds	r3, #24
	while (dev < __device_end) {
    70fe:	4a03      	ldr	r2, [pc, #12]	; (710c <z_device_state_init+0x14>)
    7100:	4293      	cmp	r3, r2
    7102:	d3fb      	bcc.n	70fc <z_device_state_init+0x4>
	}
}
    7104:	4770      	bx	lr
    7106:	bf00      	nop
    7108:	0000c04c 	.word	0x0000c04c
    710c:	0000c0c4 	.word	0x0000c0c4

00007110 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7110:	b570      	push	{r4, r5, r6, lr}
    7112:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7114:	4b11      	ldr	r3, [pc, #68]	; (715c <z_sys_init_run_level+0x4c>)
    7116:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    711a:	e009      	b.n	7130 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    711c:	4240      	negs	r0, r0
    711e:	e017      	b.n	7150 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7120:	68eb      	ldr	r3, [r5, #12]
    7122:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7124:	68ea      	ldr	r2, [r5, #12]
    7126:	7853      	ldrb	r3, [r2, #1]
    7128:	f043 0301 	orr.w	r3, r3, #1
    712c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    712e:	3408      	adds	r4, #8
    7130:	1c73      	adds	r3, r6, #1
    7132:	4a0a      	ldr	r2, [pc, #40]	; (715c <z_sys_init_run_level+0x4c>)
    7134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7138:	42a3      	cmp	r3, r4
    713a:	d90d      	bls.n	7158 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    713c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    713e:	6823      	ldr	r3, [r4, #0]
    7140:	4628      	mov	r0, r5
    7142:	4798      	blx	r3
		if (dev != NULL) {
    7144:	2d00      	cmp	r5, #0
    7146:	d0f2      	beq.n	712e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    7148:	2800      	cmp	r0, #0
    714a:	d0eb      	beq.n	7124 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    714c:	2800      	cmp	r0, #0
    714e:	dbe5      	blt.n	711c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    7150:	28ff      	cmp	r0, #255	; 0xff
    7152:	dde5      	ble.n	7120 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    7154:	20ff      	movs	r0, #255	; 0xff
    7156:	e7e3      	b.n	7120 <z_sys_init_run_level+0x10>
		}
	}
}
    7158:	bd70      	pop	{r4, r5, r6, pc}
    715a:	bf00      	nop
    715c:	0000da84 	.word	0x0000da84

00007160 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    7160:	2804      	cmp	r0, #4
    7162:	d80c      	bhi.n	717e <reason_to_str+0x1e>
    7164:	e8df f000 	tbb	[pc, r0]
    7168:	07050d03 	.word	0x07050d03
    716c:	09          	.byte	0x09
    716d:	00          	.byte	0x00
    716e:	4806      	ldr	r0, [pc, #24]	; (7188 <reason_to_str+0x28>)
    7170:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    7172:	4806      	ldr	r0, [pc, #24]	; (718c <reason_to_str+0x2c>)
    7174:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    7176:	4806      	ldr	r0, [pc, #24]	; (7190 <reason_to_str+0x30>)
    7178:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    717a:	4806      	ldr	r0, [pc, #24]	; (7194 <reason_to_str+0x34>)
    717c:	4770      	bx	lr
	default:
		return "Unknown error";
    717e:	4806      	ldr	r0, [pc, #24]	; (7198 <reason_to_str+0x38>)
    7180:	4770      	bx	lr
		return "Unhandled interrupt";
    7182:	4806      	ldr	r0, [pc, #24]	; (719c <reason_to_str+0x3c>)
	}
}
    7184:	4770      	bx	lr
    7186:	bf00      	nop
    7188:	0000daec 	.word	0x0000daec
    718c:	0000dac0 	.word	0x0000dac0
    7190:	0000dad0 	.word	0x0000dad0
    7194:	0000dadc 	.word	0x0000dadc
    7198:	0000da9c 	.word	0x0000da9c
    719c:	0000daac 	.word	0x0000daac

000071a0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    71a0:	b130      	cbz	r0, 71b0 <thread_name_get+0x10>
{
    71a2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    71a4:	f004 fe1c 	bl	bde0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    71a8:	b120      	cbz	r0, 71b4 <thread_name_get+0x14>
    71aa:	7803      	ldrb	r3, [r0, #0]
    71ac:	b123      	cbz	r3, 71b8 <thread_name_get+0x18>
}
    71ae:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    71b0:	4802      	ldr	r0, [pc, #8]	; (71bc <thread_name_get+0x1c>)
}
    71b2:	4770      	bx	lr
		thread_name = "unknown";
    71b4:	4801      	ldr	r0, [pc, #4]	; (71bc <thread_name_get+0x1c>)
    71b6:	e7fa      	b.n	71ae <thread_name_get+0xe>
    71b8:	4800      	ldr	r0, [pc, #0]	; (71bc <thread_name_get+0x1c>)
	return thread_name;
    71ba:	e7f8      	b.n	71ae <thread_name_get+0xe>
    71bc:	0000dafc 	.word	0x0000dafc

000071c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    71c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71c2:	b087      	sub	sp, #28
    71c4:	4604      	mov	r4, r0
    71c6:	460e      	mov	r6, r1
	__asm__ volatile(
    71c8:	f04f 0320 	mov.w	r3, #32
    71cc:	f3ef 8711 	mrs	r7, BASEPRI
    71d0:	f383 8812 	msr	BASEPRI_MAX, r3
    71d4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    71d8:	f002 f9d2 	bl	9580 <z_impl_z_current_get>
    71dc:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    71de:	4620      	mov	r0, r4
    71e0:	f7ff ffbe 	bl	7160 <reason_to_str>
    71e4:	2300      	movs	r3, #0
    71e6:	9305      	str	r3, [sp, #20]
    71e8:	9004      	str	r0, [sp, #16]
    71ea:	9403      	str	r4, [sp, #12]
    71ec:	4a22      	ldr	r2, [pc, #136]	; (7278 <z_fatal_error+0xb8>)
    71ee:	9202      	str	r2, [sp, #8]
    71f0:	9301      	str	r3, [sp, #4]
    71f2:	9300      	str	r3, [sp, #0]
    71f4:	2201      	movs	r2, #1
    71f6:	4921      	ldr	r1, [pc, #132]	; (727c <z_fatal_error+0xbc>)
    71f8:	4618      	mov	r0, r3
    71fa:	f004 fd9c 	bl	bd36 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    71fe:	b11e      	cbz	r6, 7208 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7200:	69f3      	ldr	r3, [r6, #28]
    7202:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7206:	b9eb      	cbnz	r3, 7244 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7208:	4628      	mov	r0, r5
    720a:	f7ff ffc9 	bl	71a0 <thread_name_get>
    720e:	9004      	str	r0, [sp, #16]
    7210:	9503      	str	r5, [sp, #12]
    7212:	4b1b      	ldr	r3, [pc, #108]	; (7280 <z_fatal_error+0xc0>)
    7214:	9302      	str	r3, [sp, #8]
    7216:	2000      	movs	r0, #0
    7218:	9001      	str	r0, [sp, #4]
    721a:	9000      	str	r0, [sp, #0]
    721c:	4603      	mov	r3, r0
    721e:	2201      	movs	r2, #1
    7220:	4916      	ldr	r1, [pc, #88]	; (727c <z_fatal_error+0xbc>)
    7222:	f004 fd88 	bl	bd36 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7226:	4631      	mov	r1, r6
    7228:	4620      	mov	r0, r4
    722a:	f7fe fbd3 	bl	59d4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    722e:	2c04      	cmp	r4, #4
    7230:	d013      	beq.n	725a <z_fatal_error+0x9a>
	__asm__ volatile(
    7232:	f387 8811 	msr	BASEPRI, r7
    7236:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    723a:	4628      	mov	r0, r5
    723c:	f7fc fb42 	bl	38c4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7240:	b007      	add	sp, #28
    7242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    7244:	4b0f      	ldr	r3, [pc, #60]	; (7284 <z_fatal_error+0xc4>)
    7246:	9302      	str	r3, [sp, #8]
    7248:	2000      	movs	r0, #0
    724a:	9001      	str	r0, [sp, #4]
    724c:	9000      	str	r0, [sp, #0]
    724e:	4603      	mov	r3, r0
    7250:	2201      	movs	r2, #1
    7252:	490a      	ldr	r1, [pc, #40]	; (727c <z_fatal_error+0xbc>)
    7254:	f004 fd6f 	bl	bd36 <z_log_msg2_runtime_create>
    7258:	e7d6      	b.n	7208 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    725a:	4c0b      	ldr	r4, [pc, #44]	; (7288 <z_fatal_error+0xc8>)
    725c:	238f      	movs	r3, #143	; 0x8f
    725e:	4622      	mov	r2, r4
    7260:	490a      	ldr	r1, [pc, #40]	; (728c <z_fatal_error+0xcc>)
    7262:	480b      	ldr	r0, [pc, #44]	; (7290 <z_fatal_error+0xd0>)
    7264:	f003 fc3c 	bl	aae0 <assert_print>
    7268:	480a      	ldr	r0, [pc, #40]	; (7294 <z_fatal_error+0xd4>)
    726a:	f003 fc39 	bl	aae0 <assert_print>
    726e:	218f      	movs	r1, #143	; 0x8f
    7270:	4620      	mov	r0, r4
    7272:	f003 fc2e 	bl	aad2 <assert_post_action>
    7276:	e7dc      	b.n	7232 <z_fatal_error+0x72>
    7278:	0000db04 	.word	0x0000db04
    727c:	0000c26c 	.word	0x0000c26c
    7280:	0000db50 	.word	0x0000db50
    7284:	0000db2c 	.word	0x0000db2c
    7288:	0000db68 	.word	0x0000db68
    728c:	0000db8c 	.word	0x0000db8c
    7290:	0000c478 	.word	0x0000c478
    7294:	0000dbac 	.word	0x0000dbac

00007298 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7298:	b510      	push	{r4, lr}
    729a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    729c:	4c11      	ldr	r4, [pc, #68]	; (72e4 <init_idle_thread+0x4c>)
    729e:	23b0      	movs	r3, #176	; 0xb0
    72a0:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    72a4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    72a8:	4b0f      	ldr	r3, [pc, #60]	; (72e8 <init_idle_thread+0x50>)
    72aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    72ae:	4a0f      	ldr	r2, [pc, #60]	; (72ec <init_idle_thread+0x54>)
    72b0:	9205      	str	r2, [sp, #20]
    72b2:	2201      	movs	r2, #1
    72b4:	9204      	str	r2, [sp, #16]
    72b6:	220f      	movs	r2, #15
    72b8:	9203      	str	r2, [sp, #12]
    72ba:	2200      	movs	r2, #0
    72bc:	9202      	str	r2, [sp, #8]
    72be:	9201      	str	r2, [sp, #4]
    72c0:	9300      	str	r3, [sp, #0]
    72c2:	4b0b      	ldr	r3, [pc, #44]	; (72f0 <init_idle_thread+0x58>)
    72c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    72c8:	490a      	ldr	r1, [pc, #40]	; (72f4 <init_idle_thread+0x5c>)
    72ca:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    72ce:	fb0c 1100 	mla	r1, ip, r0, r1
    72d2:	4620      	mov	r0, r4
    72d4:	f000 fa76 	bl	77c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    72d8:	7b63      	ldrb	r3, [r4, #13]
    72da:	f023 0304 	bic.w	r3, r3, #4
    72de:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    72e0:	b006      	add	sp, #24
    72e2:	bd10      	pop	{r4, pc}
    72e4:	20004410 	.word	0x20004410
    72e8:	200050ac 	.word	0x200050ac
    72ec:	0000dbe4 	.word	0x0000dbe4
    72f0:	00007ad9 	.word	0x00007ad9
    72f4:	20005720 	.word	0x20005720

000072f8 <bg_thread_main>:
{
    72f8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    72fa:	4b0a      	ldr	r3, [pc, #40]	; (7324 <bg_thread_main+0x2c>)
    72fc:	2201      	movs	r2, #1
    72fe:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7300:	2002      	movs	r0, #2
    7302:	f7ff ff05 	bl	7110 <z_sys_init_run_level>
	boot_banner();
    7306:	f002 ff2f 	bl	a168 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    730a:	2003      	movs	r0, #3
    730c:	f7ff ff00 	bl	7110 <z_sys_init_run_level>
	z_init_static_threads();
    7310:	f000 fb68 	bl	79e4 <z_init_static_threads>
	main();
    7314:	f7f9 f8c6 	bl	4a4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7318:	4a03      	ldr	r2, [pc, #12]	; (7328 <bg_thread_main+0x30>)
    731a:	7b13      	ldrb	r3, [r2, #12]
    731c:	f023 0301 	bic.w	r3, r3, #1
    7320:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7322:	bd08      	pop	{r3, pc}
    7324:	200052ea 	.word	0x200052ea
    7328:	200044c0 	.word	0x200044c0

0000732c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    732c:	b508      	push	{r3, lr}
    732e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7330:	4a01      	ldr	r2, [pc, #4]	; (7338 <switch_to_main_thread+0xc>)
    7332:	4802      	ldr	r0, [pc, #8]	; (733c <switch_to_main_thread+0x10>)
    7334:	f7fb fe7a 	bl	302c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7338:	000072f9 	.word	0x000072f9
    733c:	200044c0 	.word	0x200044c0

00007340 <z_bss_zero>:
{
    7340:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7342:	4803      	ldr	r0, [pc, #12]	; (7350 <z_bss_zero+0x10>)
    7344:	4a03      	ldr	r2, [pc, #12]	; (7354 <z_bss_zero+0x14>)
    7346:	1a12      	subs	r2, r2, r0
    7348:	2100      	movs	r1, #0
    734a:	f004 fd03 	bl	bd54 <z_early_memset>
}
    734e:	bd08      	pop	{r3, pc}
    7350:	20004240 	.word	0x20004240
    7354:	200052ec 	.word	0x200052ec

00007358 <z_init_cpu>:
{
    7358:	b510      	push	{r4, lr}
    735a:	4604      	mov	r4, r0
	init_idle_thread(id);
    735c:	f7ff ff9c 	bl	7298 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7360:	490b      	ldr	r1, [pc, #44]	; (7390 <z_init_cpu+0x38>)
    7362:	23b0      	movs	r3, #176	; 0xb0
    7364:	fb03 1104 	mla	r1, r3, r4, r1
    7368:	4a0a      	ldr	r2, [pc, #40]	; (7394 <z_init_cpu+0x3c>)
    736a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    736e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7372:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    7374:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7376:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    737a:	4b07      	ldr	r3, [pc, #28]	; (7398 <z_init_cpu+0x40>)
    737c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7380:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    7384:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7388:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    738c:	6063      	str	r3, [r4, #4]
}
    738e:	bd10      	pop	{r4, pc}
    7390:	20004410 	.word	0x20004410
    7394:	200050ac 	.word	0x200050ac
    7398:	20005880 	.word	0x20005880

0000739c <prepare_multithreading>:
{
    739c:	b570      	push	{r4, r5, r6, lr}
    739e:	b086      	sub	sp, #24
	z_sched_init();
    73a0:	f001 ff2a 	bl	91f8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    73a4:	4d10      	ldr	r5, [pc, #64]	; (73e8 <prepare_multithreading+0x4c>)
    73a6:	4b11      	ldr	r3, [pc, #68]	; (73ec <prepare_multithreading+0x50>)
    73a8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    73aa:	4b11      	ldr	r3, [pc, #68]	; (73f0 <prepare_multithreading+0x54>)
    73ac:	9305      	str	r3, [sp, #20]
    73ae:	2301      	movs	r3, #1
    73b0:	9304      	str	r3, [sp, #16]
    73b2:	2400      	movs	r4, #0
    73b4:	9403      	str	r4, [sp, #12]
    73b6:	9402      	str	r4, [sp, #8]
    73b8:	9401      	str	r4, [sp, #4]
    73ba:	9400      	str	r4, [sp, #0]
    73bc:	4b0d      	ldr	r3, [pc, #52]	; (73f4 <prepare_multithreading+0x58>)
    73be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    73c2:	490d      	ldr	r1, [pc, #52]	; (73f8 <prepare_multithreading+0x5c>)
    73c4:	4628      	mov	r0, r5
    73c6:	f000 f9fd 	bl	77c4 <z_setup_new_thread>
    73ca:	4606      	mov	r6, r0
    73cc:	7b6b      	ldrb	r3, [r5, #13]
    73ce:	f023 0304 	bic.w	r3, r3, #4
    73d2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    73d4:	4628      	mov	r0, r5
    73d6:	f001 fa33 	bl	8840 <z_ready_thread>
	z_init_cpu(0);
    73da:	4620      	mov	r0, r4
    73dc:	f7ff ffbc 	bl	7358 <z_init_cpu>
}
    73e0:	4630      	mov	r0, r6
    73e2:	b006      	add	sp, #24
    73e4:	bd70      	pop	{r4, r5, r6, pc}
    73e6:	bf00      	nop
    73e8:	200044c0 	.word	0x200044c0
    73ec:	200050ac 	.word	0x200050ac
    73f0:	0000dbec 	.word	0x0000dbec
    73f4:	000072f9 	.word	0x000072f9
    73f8:	20005300 	.word	0x20005300

000073fc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    73fc:	b500      	push	{lr}
    73fe:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7400:	4b1f      	ldr	r3, [pc, #124]	; (7480 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7402:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7406:	4c1f      	ldr	r4, [pc, #124]	; (7484 <z_cstart+0x88>)
    7408:	6963      	ldr	r3, [r4, #20]
    740a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    740e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7410:	23e0      	movs	r3, #224	; 0xe0
    7412:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    7416:	2500      	movs	r5, #0
    7418:	77e5      	strb	r5, [r4, #31]
    741a:	7625      	strb	r5, [r4, #24]
    741c:	7665      	strb	r5, [r4, #25]
    741e:	76a5      	strb	r5, [r4, #26]
    7420:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7424:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7426:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    742a:	6263      	str	r3, [r4, #36]	; 0x24
    742c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7430:	f7fc f9b4 	bl	379c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7434:	f7fb fc7e 	bl	2d34 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    743c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    743e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7440:	f7fc fb60 	bl	3b04 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7444:	f7fc fa58 	bl	38f8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7448:	f7fa fd98 	bl	1f7c <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    744c:	2401      	movs	r4, #1
    744e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7452:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    7456:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    7458:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    745a:	4668      	mov	r0, sp
    745c:	f002 fe7e 	bl	a15c <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7460:	4b09      	ldr	r3, [pc, #36]	; (7488 <z_cstart+0x8c>)
    7462:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7466:	f7ff fe47 	bl	70f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    746a:	4628      	mov	r0, r5
    746c:	f7ff fe50 	bl	7110 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7470:	4620      	mov	r0, r4
    7472:	f7ff fe4d 	bl	7110 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7476:	f7ff ff91 	bl	739c <prepare_multithreading>
    747a:	f7ff ff57 	bl	732c <switch_to_main_thread>
    747e:	bf00      	nop
    7480:	200060a0 	.word	0x200060a0
    7484:	e000ed00 	.word	0xe000ed00
    7488:	200050ac 	.word	0x200050ac

0000748c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    748c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    748e:	4c10      	ldr	r4, [pc, #64]	; (74d0 <init_mem_slab_module+0x44>)
	int rc = 0;
    7490:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7492:	e008      	b.n	74a6 <init_mem_slab_module+0x1a>
    7494:	4b0f      	ldr	r3, [pc, #60]	; (74d4 <init_mem_slab_module+0x48>)
    7496:	429c      	cmp	r4, r3
    7498:	d217      	bcs.n	74ca <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    749a:	4620      	mov	r0, r4
    749c:	f004 fc62 	bl	bd64 <create_free_list>
		if (rc < 0) {
    74a0:	1e05      	subs	r5, r0, #0
    74a2:	db12      	blt.n	74ca <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    74a4:	3420      	adds	r4, #32
    74a6:	4b0b      	ldr	r3, [pc, #44]	; (74d4 <init_mem_slab_module+0x48>)
    74a8:	429c      	cmp	r4, r3
    74aa:	d9f3      	bls.n	7494 <init_mem_slab_module+0x8>
    74ac:	4e0a      	ldr	r6, [pc, #40]	; (74d8 <init_mem_slab_module+0x4c>)
    74ae:	233d      	movs	r3, #61	; 0x3d
    74b0:	4632      	mov	r2, r6
    74b2:	490a      	ldr	r1, [pc, #40]	; (74dc <init_mem_slab_module+0x50>)
    74b4:	480a      	ldr	r0, [pc, #40]	; (74e0 <init_mem_slab_module+0x54>)
    74b6:	f003 fb13 	bl	aae0 <assert_print>
    74ba:	480a      	ldr	r0, [pc, #40]	; (74e4 <init_mem_slab_module+0x58>)
    74bc:	f003 fb10 	bl	aae0 <assert_print>
    74c0:	213d      	movs	r1, #61	; 0x3d
    74c2:	4630      	mov	r0, r6
    74c4:	f003 fb05 	bl	aad2 <assert_post_action>
    74c8:	e7e4      	b.n	7494 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    74ca:	4628      	mov	r0, r5
    74cc:	bd70      	pop	{r4, r5, r6, pc}
    74ce:	bf00      	nop
    74d0:	200041c4 	.word	0x200041c4
    74d4:	200041c4 	.word	0x200041c4
    74d8:	0000dbf8 	.word	0x0000dbf8
    74dc:	0000dc20 	.word	0x0000dc20
    74e0:	0000c478 	.word	0x0000c478
    74e4:	0000dc40 	.word	0x0000dc40

000074e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    74e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74ec:	b082      	sub	sp, #8
    74ee:	4604      	mov	r4, r0
    74f0:	460e      	mov	r6, r1
    74f2:	4690      	mov	r8, r2
    74f4:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    74f6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    74fa:	f04f 0320 	mov.w	r3, #32
    74fe:	f3ef 8711 	mrs	r7, BASEPRI
    7502:	f383 8812 	msr	BASEPRI_MAX, r3
    7506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    750a:	4628      	mov	r0, r5
    750c:	f000 f8d8 	bl	76c0 <z_spin_lock_valid>
    7510:	b1c0      	cbz	r0, 7544 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    7512:	4628      	mov	r0, r5
    7514:	f000 f8f4 	bl	7700 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7518:	69a1      	ldr	r1, [r4, #24]
    751a:	b321      	cbz	r1, 7566 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    751c:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    751e:	69a3      	ldr	r3, [r4, #24]
    7520:	681b      	ldr	r3, [r3, #0]
    7522:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7524:	69e3      	ldr	r3, [r4, #28]
    7526:	3301      	adds	r3, #1
    7528:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    752a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    752c:	4628      	mov	r0, r5
    752e:	f000 f8d7 	bl	76e0 <z_spin_unlock_valid>
    7532:	b388      	cbz	r0, 7598 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    7534:	f387 8811 	msr	BASEPRI, r7
    7538:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    753c:	4620      	mov	r0, r4
    753e:	b002      	add	sp, #8
    7540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7544:	f8df a070 	ldr.w	sl, [pc, #112]	; 75b8 <k_mem_slab_alloc+0xd0>
    7548:	238e      	movs	r3, #142	; 0x8e
    754a:	4652      	mov	r2, sl
    754c:	491b      	ldr	r1, [pc, #108]	; (75bc <k_mem_slab_alloc+0xd4>)
    754e:	481c      	ldr	r0, [pc, #112]	; (75c0 <k_mem_slab_alloc+0xd8>)
    7550:	f003 fac6 	bl	aae0 <assert_print>
    7554:	4629      	mov	r1, r5
    7556:	481b      	ldr	r0, [pc, #108]	; (75c4 <k_mem_slab_alloc+0xdc>)
    7558:	f003 fac2 	bl	aae0 <assert_print>
    755c:	218e      	movs	r1, #142	; 0x8e
    755e:	4650      	mov	r0, sl
    7560:	f003 fab7 	bl	aad2 <assert_post_action>
    7564:	e7d5      	b.n	7512 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7566:	ea59 0308 	orrs.w	r3, r9, r8
    756a:	d104      	bne.n	7576 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    756c:	2300      	movs	r3, #0
    756e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    7570:	f06f 040b 	mvn.w	r4, #11
    7574:	e7da      	b.n	752c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7576:	f8cd 8000 	str.w	r8, [sp]
    757a:	f8cd 9004 	str.w	r9, [sp, #4]
    757e:	4622      	mov	r2, r4
    7580:	4639      	mov	r1, r7
    7582:	4628      	mov	r0, r5
    7584:	f001 fb38 	bl	8bf8 <z_pend_curr>
		if (result == 0) {
    7588:	4604      	mov	r4, r0
    758a:	2800      	cmp	r0, #0
    758c:	d1d6      	bne.n	753c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    758e:	4b0e      	ldr	r3, [pc, #56]	; (75c8 <k_mem_slab_alloc+0xe0>)
    7590:	689b      	ldr	r3, [r3, #8]
    7592:	695b      	ldr	r3, [r3, #20]
    7594:	6033      	str	r3, [r6, #0]
		return result;
    7596:	e7d1      	b.n	753c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7598:	4e07      	ldr	r6, [pc, #28]	; (75b8 <k_mem_slab_alloc+0xd0>)
    759a:	23b9      	movs	r3, #185	; 0xb9
    759c:	4632      	mov	r2, r6
    759e:	490b      	ldr	r1, [pc, #44]	; (75cc <k_mem_slab_alloc+0xe4>)
    75a0:	4807      	ldr	r0, [pc, #28]	; (75c0 <k_mem_slab_alloc+0xd8>)
    75a2:	f003 fa9d 	bl	aae0 <assert_print>
    75a6:	4629      	mov	r1, r5
    75a8:	4809      	ldr	r0, [pc, #36]	; (75d0 <k_mem_slab_alloc+0xe8>)
    75aa:	f003 fa99 	bl	aae0 <assert_print>
    75ae:	21b9      	movs	r1, #185	; 0xb9
    75b0:	4630      	mov	r0, r6
    75b2:	f003 fa8e 	bl	aad2 <assert_post_action>
    75b6:	e7bd      	b.n	7534 <k_mem_slab_alloc+0x4c>
    75b8:	0000c624 	.word	0x0000c624
    75bc:	0000c684 	.word	0x0000c684
    75c0:	0000c478 	.word	0x0000c478
    75c4:	0000c69c 	.word	0x0000c69c
    75c8:	200050ac 	.word	0x200050ac
    75cc:	0000c654 	.word	0x0000c654
    75d0:	0000c66c 	.word	0x0000c66c

000075d4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    75d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75d8:	4604      	mov	r4, r0
    75da:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    75dc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    75e0:	f04f 0320 	mov.w	r3, #32
    75e4:	f3ef 8711 	mrs	r7, BASEPRI
    75e8:	f383 8812 	msr	BASEPRI_MAX, r3
    75ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75f0:	4630      	mov	r0, r6
    75f2:	f000 f865 	bl	76c0 <z_spin_lock_valid>
    75f6:	b1b0      	cbz	r0, 7626 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    75f8:	4630      	mov	r0, r6
    75fa:	f000 f881 	bl	7700 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    75fe:	69a3      	ldr	r3, [r4, #24]
    7600:	b313      	cbz	r3, 7648 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    7602:	682b      	ldr	r3, [r5, #0]
    7604:	69a2      	ldr	r2, [r4, #24]
    7606:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7608:	682b      	ldr	r3, [r5, #0]
    760a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    760c:	69e3      	ldr	r3, [r4, #28]
    760e:	3b01      	subs	r3, #1
    7610:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7612:	4630      	mov	r0, r6
    7614:	f000 f864 	bl	76e0 <z_spin_unlock_valid>
    7618:	b338      	cbz	r0, 766a <k_mem_slab_free+0x96>
	__asm__ volatile(
    761a:	f387 8811 	msr	BASEPRI, r7
    761e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7626:	f8df 8064 	ldr.w	r8, [pc, #100]	; 768c <k_mem_slab_free+0xb8>
    762a:	238e      	movs	r3, #142	; 0x8e
    762c:	4642      	mov	r2, r8
    762e:	4918      	ldr	r1, [pc, #96]	; (7690 <k_mem_slab_free+0xbc>)
    7630:	4818      	ldr	r0, [pc, #96]	; (7694 <k_mem_slab_free+0xc0>)
    7632:	f003 fa55 	bl	aae0 <assert_print>
    7636:	4631      	mov	r1, r6
    7638:	4817      	ldr	r0, [pc, #92]	; (7698 <k_mem_slab_free+0xc4>)
    763a:	f003 fa51 	bl	aae0 <assert_print>
    763e:	218e      	movs	r1, #142	; 0x8e
    7640:	4640      	mov	r0, r8
    7642:	f003 fa46 	bl	aad2 <assert_post_action>
    7646:	e7d7      	b.n	75f8 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7648:	4620      	mov	r0, r4
    764a:	f001 fd71 	bl	9130 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    764e:	2800      	cmp	r0, #0
    7650:	d0d7      	beq.n	7602 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7652:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7654:	2100      	movs	r1, #0
    7656:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    765a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    765c:	f001 f8f0 	bl	8840 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7660:	4639      	mov	r1, r7
    7662:	4630      	mov	r0, r6
    7664:	f000 fe48 	bl	82f8 <z_reschedule>
			return;
    7668:	e7db      	b.n	7622 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    766a:	4c08      	ldr	r4, [pc, #32]	; (768c <k_mem_slab_free+0xb8>)
    766c:	23b9      	movs	r3, #185	; 0xb9
    766e:	4622      	mov	r2, r4
    7670:	490a      	ldr	r1, [pc, #40]	; (769c <k_mem_slab_free+0xc8>)
    7672:	4808      	ldr	r0, [pc, #32]	; (7694 <k_mem_slab_free+0xc0>)
    7674:	f003 fa34 	bl	aae0 <assert_print>
    7678:	4631      	mov	r1, r6
    767a:	4809      	ldr	r0, [pc, #36]	; (76a0 <k_mem_slab_free+0xcc>)
    767c:	f003 fa30 	bl	aae0 <assert_print>
    7680:	21b9      	movs	r1, #185	; 0xb9
    7682:	4620      	mov	r0, r4
    7684:	f003 fa25 	bl	aad2 <assert_post_action>
    7688:	e7c7      	b.n	761a <k_mem_slab_free+0x46>
    768a:	bf00      	nop
    768c:	0000c624 	.word	0x0000c624
    7690:	0000c684 	.word	0x0000c684
    7694:	0000c478 	.word	0x0000c478
    7698:	0000c69c 	.word	0x0000c69c
    769c:	0000c654 	.word	0x0000c654
    76a0:	0000c66c 	.word	0x0000c66c

000076a4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    76a4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    76a6:	ea53 0102 	orrs.w	r1, r3, r2
    76aa:	d102      	bne.n	76b2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    76ac:	f004 fb9a 	bl	bde4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    76b0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    76b2:	4902      	ldr	r1, [pc, #8]	; (76bc <schedule_new_thread+0x18>)
    76b4:	3018      	adds	r0, #24
    76b6:	f002 f919 	bl	98ec <z_add_timeout>
    76ba:	e7f9      	b.n	76b0 <schedule_new_thread+0xc>
    76bc:	0000899d 	.word	0x0000899d

000076c0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    76c0:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    76c2:	b13b      	cbz	r3, 76d4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    76c4:	f003 0303 	and.w	r3, r3, #3
    76c8:	4a04      	ldr	r2, [pc, #16]	; (76dc <z_spin_lock_valid+0x1c>)
    76ca:	7d12      	ldrb	r2, [r2, #20]
    76cc:	4293      	cmp	r3, r2
    76ce:	d003      	beq.n	76d8 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    76d0:	2001      	movs	r0, #1
    76d2:	4770      	bx	lr
    76d4:	2001      	movs	r0, #1
    76d6:	4770      	bx	lr
			return false;
    76d8:	2000      	movs	r0, #0
}
    76da:	4770      	bx	lr
    76dc:	200050ac 	.word	0x200050ac

000076e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    76e0:	6801      	ldr	r1, [r0, #0]
    76e2:	4a06      	ldr	r2, [pc, #24]	; (76fc <z_spin_unlock_valid+0x1c>)
    76e4:	7d13      	ldrb	r3, [r2, #20]
    76e6:	6892      	ldr	r2, [r2, #8]
    76e8:	4313      	orrs	r3, r2
    76ea:	4299      	cmp	r1, r3
    76ec:	d103      	bne.n	76f6 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    76ee:	2300      	movs	r3, #0
    76f0:	6003      	str	r3, [r0, #0]
	return true;
    76f2:	2001      	movs	r0, #1
    76f4:	4770      	bx	lr
		return false;
    76f6:	2000      	movs	r0, #0
}
    76f8:	4770      	bx	lr
    76fa:	bf00      	nop
    76fc:	200050ac 	.word	0x200050ac

00007700 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7700:	4a02      	ldr	r2, [pc, #8]	; (770c <z_spin_lock_set_owner+0xc>)
    7702:	7d13      	ldrb	r3, [r2, #20]
    7704:	6892      	ldr	r2, [r2, #8]
    7706:	4313      	orrs	r3, r2
    7708:	6003      	str	r3, [r0, #0]
}
    770a:	4770      	bx	lr
    770c:	200050ac 	.word	0x200050ac

00007710 <z_thread_monitor_exit>:
{
    7710:	b570      	push	{r4, r5, r6, lr}
    7712:	4604      	mov	r4, r0
	__asm__ volatile(
    7714:	f04f 0320 	mov.w	r3, #32
    7718:	f3ef 8511 	mrs	r5, BASEPRI
    771c:	f383 8812 	msr	BASEPRI_MAX, r3
    7720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7724:	481f      	ldr	r0, [pc, #124]	; (77a4 <z_thread_monitor_exit+0x94>)
    7726:	f7ff ffcb 	bl	76c0 <z_spin_lock_valid>
    772a:	b150      	cbz	r0, 7742 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    772c:	481d      	ldr	r0, [pc, #116]	; (77a4 <z_thread_monitor_exit+0x94>)
    772e:	f7ff ffe7 	bl	7700 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    7732:	4b1d      	ldr	r3, [pc, #116]	; (77a8 <z_thread_monitor_exit+0x98>)
    7734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7736:	42a3      	cmp	r3, r4
    7738:	d114      	bne.n	7764 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    773a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    773c:	4b1a      	ldr	r3, [pc, #104]	; (77a8 <z_thread_monitor_exit+0x98>)
    773e:	629a      	str	r2, [r3, #40]	; 0x28
    7740:	e017      	b.n	7772 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7742:	4e1a      	ldr	r6, [pc, #104]	; (77ac <z_thread_monitor_exit+0x9c>)
    7744:	238e      	movs	r3, #142	; 0x8e
    7746:	4632      	mov	r2, r6
    7748:	4919      	ldr	r1, [pc, #100]	; (77b0 <z_thread_monitor_exit+0xa0>)
    774a:	481a      	ldr	r0, [pc, #104]	; (77b4 <z_thread_monitor_exit+0xa4>)
    774c:	f003 f9c8 	bl	aae0 <assert_print>
    7750:	4914      	ldr	r1, [pc, #80]	; (77a4 <z_thread_monitor_exit+0x94>)
    7752:	4819      	ldr	r0, [pc, #100]	; (77b8 <z_thread_monitor_exit+0xa8>)
    7754:	f003 f9c4 	bl	aae0 <assert_print>
    7758:	218e      	movs	r1, #142	; 0x8e
    775a:	4630      	mov	r0, r6
    775c:	f003 f9b9 	bl	aad2 <assert_post_action>
    7760:	e7e4      	b.n	772c <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    7762:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7764:	b113      	cbz	r3, 776c <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    7766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    7768:	42a2      	cmp	r2, r4
    776a:	d1fa      	bne.n	7762 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    776c:	b10b      	cbz	r3, 7772 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    776e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    7770:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7772:	480c      	ldr	r0, [pc, #48]	; (77a4 <z_thread_monitor_exit+0x94>)
    7774:	f7ff ffb4 	bl	76e0 <z_spin_unlock_valid>
    7778:	b120      	cbz	r0, 7784 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    777a:	f385 8811 	msr	BASEPRI, r5
    777e:	f3bf 8f6f 	isb	sy
}
    7782:	bd70      	pop	{r4, r5, r6, pc}
    7784:	4c09      	ldr	r4, [pc, #36]	; (77ac <z_thread_monitor_exit+0x9c>)
    7786:	23b9      	movs	r3, #185	; 0xb9
    7788:	4622      	mov	r2, r4
    778a:	490c      	ldr	r1, [pc, #48]	; (77bc <z_thread_monitor_exit+0xac>)
    778c:	4809      	ldr	r0, [pc, #36]	; (77b4 <z_thread_monitor_exit+0xa4>)
    778e:	f003 f9a7 	bl	aae0 <assert_print>
    7792:	4904      	ldr	r1, [pc, #16]	; (77a4 <z_thread_monitor_exit+0x94>)
    7794:	480a      	ldr	r0, [pc, #40]	; (77c0 <z_thread_monitor_exit+0xb0>)
    7796:	f003 f9a3 	bl	aae0 <assert_print>
    779a:	21b9      	movs	r1, #185	; 0xb9
    779c:	4620      	mov	r0, r4
    779e:	f003 f998 	bl	aad2 <assert_post_action>
    77a2:	e7ea      	b.n	777a <z_thread_monitor_exit+0x6a>
    77a4:	200050d8 	.word	0x200050d8
    77a8:	200050ac 	.word	0x200050ac
    77ac:	0000c624 	.word	0x0000c624
    77b0:	0000c684 	.word	0x0000c684
    77b4:	0000c478 	.word	0x0000c478
    77b8:	0000c69c 	.word	0x0000c69c
    77bc:	0000c654 	.word	0x0000c654
    77c0:	0000c66c 	.word	0x0000c66c

000077c4 <z_setup_new_thread>:
{
    77c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77c8:	b085      	sub	sp, #20
    77ca:	4604      	mov	r4, r0
    77cc:	460e      	mov	r6, r1
    77ce:	4690      	mov	r8, r2
    77d0:	461d      	mov	r5, r3
    77d2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    77d6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    77da:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    77dc:	2f0f      	cmp	r7, #15
    77de:	d05e      	beq.n	789e <z_setup_new_thread+0xda>
    77e0:	f107 0310 	add.w	r3, r7, #16
    77e4:	2b1e      	cmp	r3, #30
    77e6:	d85e      	bhi.n	78a6 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    77e8:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    77ec:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    77ee:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    77f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77f2:	2204      	movs	r2, #4
    77f4:	4639      	mov	r1, r7
    77f6:	4620      	mov	r0, r4
    77f8:	f004 faf8 	bl	bdec <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    77fc:	4642      	mov	r2, r8
    77fe:	4631      	mov	r1, r6
    7800:	4620      	mov	r0, r4
    7802:	f004 fad5 	bl	bdb0 <setup_thread_stack>
    7806:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7808:	9b10      	ldr	r3, [sp, #64]	; 0x40
    780a:	9302      	str	r3, [sp, #8]
    780c:	f8cd a004 	str.w	sl, [sp, #4]
    7810:	f8cd b000 	str.w	fp, [sp]
    7814:	462b      	mov	r3, r5
    7816:	4602      	mov	r2, r0
    7818:	4631      	mov	r1, r6
    781a:	4620      	mov	r0, r4
    781c:	f7fb fbbc 	bl	2f98 <arch_new_thread>
	new_thread->init_data = NULL;
    7820:	2300      	movs	r3, #0
    7822:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    7824:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    7826:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    782a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    782e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7830:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    7832:	f04f 0320 	mov.w	r3, #32
    7836:	f3ef 8611 	mrs	r6, BASEPRI
    783a:	f383 8812 	msr	BASEPRI_MAX, r3
    783e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7842:	4837      	ldr	r0, [pc, #220]	; (7920 <z_setup_new_thread+0x15c>)
    7844:	f7ff ff3c 	bl	76c0 <z_spin_lock_valid>
    7848:	2800      	cmp	r0, #0
    784a:	d042      	beq.n	78d2 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    784c:	4d34      	ldr	r5, [pc, #208]	; (7920 <z_setup_new_thread+0x15c>)
    784e:	4628      	mov	r0, r5
    7850:	f7ff ff56 	bl	7700 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    7854:	4b33      	ldr	r3, [pc, #204]	; (7924 <z_setup_new_thread+0x160>)
    7856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7858:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    785a:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    785c:	4628      	mov	r0, r5
    785e:	f7ff ff3f 	bl	76e0 <z_spin_unlock_valid>
    7862:	2800      	cmp	r0, #0
    7864:	d045      	beq.n	78f2 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    7866:	f386 8811 	msr	BASEPRI, r6
    786a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    786e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7870:	2b00      	cmp	r3, #0
    7872:	d04e      	beq.n	7912 <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7874:	221f      	movs	r2, #31
    7876:	4619      	mov	r1, r3
    7878:	f104 0074 	add.w	r0, r4, #116	; 0x74
    787c:	f004 fb84 	bl	bf88 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7880:	2300      	movs	r3, #0
    7882:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    7886:	4b27      	ldr	r3, [pc, #156]	; (7924 <z_setup_new_thread+0x160>)
    7888:	689b      	ldr	r3, [r3, #8]
    788a:	2b00      	cmp	r3, #0
    788c:	d045      	beq.n	791a <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    788e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7892:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    7896:	4638      	mov	r0, r7
    7898:	b005      	add	sp, #20
    789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    789e:	4b22      	ldr	r3, [pc, #136]	; (7928 <z_setup_new_thread+0x164>)
    78a0:	429d      	cmp	r5, r3
    78a2:	d19d      	bne.n	77e0 <z_setup_new_thread+0x1c>
    78a4:	e7a0      	b.n	77e8 <z_setup_new_thread+0x24>
    78a6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 792c <z_setup_new_thread+0x168>
    78aa:	f240 13ff 	movw	r3, #511	; 0x1ff
    78ae:	464a      	mov	r2, r9
    78b0:	491f      	ldr	r1, [pc, #124]	; (7930 <z_setup_new_thread+0x16c>)
    78b2:	4820      	ldr	r0, [pc, #128]	; (7934 <z_setup_new_thread+0x170>)
    78b4:	f003 f914 	bl	aae0 <assert_print>
    78b8:	f06f 030f 	mvn.w	r3, #15
    78bc:	220e      	movs	r2, #14
    78be:	4639      	mov	r1, r7
    78c0:	481d      	ldr	r0, [pc, #116]	; (7938 <z_setup_new_thread+0x174>)
    78c2:	f003 f90d 	bl	aae0 <assert_print>
    78c6:	f240 11ff 	movw	r1, #511	; 0x1ff
    78ca:	4648      	mov	r0, r9
    78cc:	f003 f901 	bl	aad2 <assert_post_action>
    78d0:	e78a      	b.n	77e8 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78d2:	4d1a      	ldr	r5, [pc, #104]	; (793c <z_setup_new_thread+0x178>)
    78d4:	238e      	movs	r3, #142	; 0x8e
    78d6:	462a      	mov	r2, r5
    78d8:	4919      	ldr	r1, [pc, #100]	; (7940 <z_setup_new_thread+0x17c>)
    78da:	4816      	ldr	r0, [pc, #88]	; (7934 <z_setup_new_thread+0x170>)
    78dc:	f003 f900 	bl	aae0 <assert_print>
    78e0:	490f      	ldr	r1, [pc, #60]	; (7920 <z_setup_new_thread+0x15c>)
    78e2:	4818      	ldr	r0, [pc, #96]	; (7944 <z_setup_new_thread+0x180>)
    78e4:	f003 f8fc 	bl	aae0 <assert_print>
    78e8:	218e      	movs	r1, #142	; 0x8e
    78ea:	4628      	mov	r0, r5
    78ec:	f003 f8f1 	bl	aad2 <assert_post_action>
    78f0:	e7ac      	b.n	784c <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78f2:	4d12      	ldr	r5, [pc, #72]	; (793c <z_setup_new_thread+0x178>)
    78f4:	23b9      	movs	r3, #185	; 0xb9
    78f6:	462a      	mov	r2, r5
    78f8:	4913      	ldr	r1, [pc, #76]	; (7948 <z_setup_new_thread+0x184>)
    78fa:	480e      	ldr	r0, [pc, #56]	; (7934 <z_setup_new_thread+0x170>)
    78fc:	f003 f8f0 	bl	aae0 <assert_print>
    7900:	4907      	ldr	r1, [pc, #28]	; (7920 <z_setup_new_thread+0x15c>)
    7902:	4812      	ldr	r0, [pc, #72]	; (794c <z_setup_new_thread+0x188>)
    7904:	f003 f8ec 	bl	aae0 <assert_print>
    7908:	21b9      	movs	r1, #185	; 0xb9
    790a:	4628      	mov	r0, r5
    790c:	f003 f8e1 	bl	aad2 <assert_post_action>
    7910:	e7a9      	b.n	7866 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    7912:	2300      	movs	r3, #0
    7914:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    7918:	e7b5      	b.n	7886 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    791a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    791e:	e7ba      	b.n	7896 <z_setup_new_thread+0xd2>
    7920:	200050d8 	.word	0x200050d8
    7924:	200050ac 	.word	0x200050ac
    7928:	00007ad9 	.word	0x00007ad9
    792c:	0000dc60 	.word	0x0000dc60
    7930:	0000dcb8 	.word	0x0000dcb8
    7934:	0000c478 	.word	0x0000c478
    7938:	0000dd38 	.word	0x0000dd38
    793c:	0000c624 	.word	0x0000c624
    7940:	0000c684 	.word	0x0000c684
    7944:	0000c69c 	.word	0x0000c69c
    7948:	0000c654 	.word	0x0000c654
    794c:	0000c66c 	.word	0x0000c66c

00007950 <z_impl_k_thread_create>:
{
    7950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7954:	b086      	sub	sp, #24
    7956:	4604      	mov	r4, r0
    7958:	460d      	mov	r5, r1
    795a:	4616      	mov	r6, r2
    795c:	461f      	mov	r7, r3
    795e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    7962:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7966:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    796a:	b9db      	cbnz	r3, 79a4 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    796c:	2300      	movs	r3, #0
    796e:	9305      	str	r3, [sp, #20]
    7970:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7972:	9304      	str	r3, [sp, #16]
    7974:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7976:	9303      	str	r3, [sp, #12]
    7978:	9b10      	ldr	r3, [sp, #64]	; 0x40
    797a:	9302      	str	r3, [sp, #8]
    797c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    797e:	9301      	str	r3, [sp, #4]
    7980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7982:	9300      	str	r3, [sp, #0]
    7984:	463b      	mov	r3, r7
    7986:	4632      	mov	r2, r6
    7988:	4629      	mov	r1, r5
    798a:	4620      	mov	r0, r4
    798c:	f7ff ff1a 	bl	77c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7990:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7994:	bf08      	it	eq
    7996:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    799a:	d115      	bne.n	79c8 <z_impl_k_thread_create+0x78>
}
    799c:	4620      	mov	r0, r4
    799e:	b006      	add	sp, #24
    79a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    79a4:	f8df a02c 	ldr.w	sl, [pc, #44]	; 79d4 <z_impl_k_thread_create+0x84>
    79a8:	f240 236e 	movw	r3, #622	; 0x26e
    79ac:	4652      	mov	r2, sl
    79ae:	490a      	ldr	r1, [pc, #40]	; (79d8 <z_impl_k_thread_create+0x88>)
    79b0:	480a      	ldr	r0, [pc, #40]	; (79dc <z_impl_k_thread_create+0x8c>)
    79b2:	f003 f895 	bl	aae0 <assert_print>
    79b6:	480a      	ldr	r0, [pc, #40]	; (79e0 <z_impl_k_thread_create+0x90>)
    79b8:	f003 f892 	bl	aae0 <assert_print>
    79bc:	f240 216e 	movw	r1, #622	; 0x26e
    79c0:	4650      	mov	r0, sl
    79c2:	f003 f886 	bl	aad2 <assert_post_action>
    79c6:	e7d1      	b.n	796c <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    79c8:	464a      	mov	r2, r9
    79ca:	4643      	mov	r3, r8
    79cc:	4620      	mov	r0, r4
    79ce:	f7ff fe69 	bl	76a4 <schedule_new_thread>
    79d2:	e7e3      	b.n	799c <z_impl_k_thread_create+0x4c>
    79d4:	0000dc60 	.word	0x0000dc60
    79d8:	0000dd6c 	.word	0x0000dd6c
    79dc:	0000c478 	.word	0x0000c478
    79e0:	0000dd80 	.word	0x0000dd80

000079e4 <z_init_static_threads>:
{
    79e4:	b530      	push	{r4, r5, lr}
    79e6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    79e8:	4c35      	ldr	r4, [pc, #212]	; (7ac0 <z_init_static_threads+0xdc>)
    79ea:	e017      	b.n	7a1c <z_init_static_threads+0x38>
    79ec:	4b35      	ldr	r3, [pc, #212]	; (7ac4 <z_init_static_threads+0xe0>)
    79ee:	429c      	cmp	r4, r3
    79f0:	d228      	bcs.n	7a44 <z_init_static_threads+0x60>
		z_setup_new_thread(
    79f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    79f4:	9305      	str	r3, [sp, #20]
    79f6:	6a23      	ldr	r3, [r4, #32]
    79f8:	9304      	str	r3, [sp, #16]
    79fa:	69e3      	ldr	r3, [r4, #28]
    79fc:	9303      	str	r3, [sp, #12]
    79fe:	69a3      	ldr	r3, [r4, #24]
    7a00:	9302      	str	r3, [sp, #8]
    7a02:	6963      	ldr	r3, [r4, #20]
    7a04:	9301      	str	r3, [sp, #4]
    7a06:	6923      	ldr	r3, [r4, #16]
    7a08:	9300      	str	r3, [sp, #0]
    7a0a:	68e3      	ldr	r3, [r4, #12]
    7a0c:	68a2      	ldr	r2, [r4, #8]
    7a0e:	6861      	ldr	r1, [r4, #4]
    7a10:	6820      	ldr	r0, [r4, #0]
    7a12:	f7ff fed7 	bl	77c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7a16:	6823      	ldr	r3, [r4, #0]
    7a18:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7a1a:	3430      	adds	r4, #48	; 0x30
    7a1c:	4b29      	ldr	r3, [pc, #164]	; (7ac4 <z_init_static_threads+0xe0>)
    7a1e:	429c      	cmp	r4, r3
    7a20:	d9e4      	bls.n	79ec <z_init_static_threads+0x8>
    7a22:	4d29      	ldr	r5, [pc, #164]	; (7ac8 <z_init_static_threads+0xe4>)
    7a24:	f240 23d5 	movw	r3, #725	; 0x2d5
    7a28:	462a      	mov	r2, r5
    7a2a:	4928      	ldr	r1, [pc, #160]	; (7acc <z_init_static_threads+0xe8>)
    7a2c:	4828      	ldr	r0, [pc, #160]	; (7ad0 <z_init_static_threads+0xec>)
    7a2e:	f003 f857 	bl	aae0 <assert_print>
    7a32:	4828      	ldr	r0, [pc, #160]	; (7ad4 <z_init_static_threads+0xf0>)
    7a34:	f003 f854 	bl	aae0 <assert_print>
    7a38:	f240 21d5 	movw	r1, #725	; 0x2d5
    7a3c:	4628      	mov	r0, r5
    7a3e:	f003 f848 	bl	aad2 <assert_post_action>
    7a42:	e7d3      	b.n	79ec <z_init_static_threads+0x8>
	k_sched_lock();
    7a44:	f000 fca6 	bl	8394 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a48:	4c1d      	ldr	r4, [pc, #116]	; (7ac0 <z_init_static_threads+0xdc>)
    7a4a:	e000      	b.n	7a4e <z_init_static_threads+0x6a>
    7a4c:	3430      	adds	r4, #48	; 0x30
    7a4e:	4b1d      	ldr	r3, [pc, #116]	; (7ac4 <z_init_static_threads+0xe0>)
    7a50:	429c      	cmp	r4, r3
    7a52:	d81f      	bhi.n	7a94 <z_init_static_threads+0xb0>
    7a54:	4b1b      	ldr	r3, [pc, #108]	; (7ac4 <z_init_static_threads+0xe0>)
    7a56:	429c      	cmp	r4, r3
    7a58:	d22d      	bcs.n	7ab6 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7a5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7a60:	d0f4      	beq.n	7a4c <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    7a62:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    7a64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7a68:	17c1      	asrs	r1, r0, #31
    7a6a:	03c9      	lsls	r1, r1, #15
    7a6c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7a70:	03c0      	lsls	r0, r0, #15
    7a72:	f240 33e7 	movw	r3, #999	; 0x3e7
    7a76:	18c0      	adds	r0, r0, r3
    7a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a7c:	f04f 0300 	mov.w	r3, #0
    7a80:	f141 0100 	adc.w	r1, r1, #0
    7a84:	f7f8 fb3c 	bl	100 <__aeabi_uldivmod>
    7a88:	4602      	mov	r2, r0
    7a8a:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7a8c:	4628      	mov	r0, r5
    7a8e:	f7ff fe09 	bl	76a4 <schedule_new_thread>
    7a92:	e7db      	b.n	7a4c <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a94:	4d0c      	ldr	r5, [pc, #48]	; (7ac8 <z_init_static_threads+0xe4>)
    7a96:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    7a9a:	462a      	mov	r2, r5
    7a9c:	490b      	ldr	r1, [pc, #44]	; (7acc <z_init_static_threads+0xe8>)
    7a9e:	480c      	ldr	r0, [pc, #48]	; (7ad0 <z_init_static_threads+0xec>)
    7aa0:	f003 f81e 	bl	aae0 <assert_print>
    7aa4:	480b      	ldr	r0, [pc, #44]	; (7ad4 <z_init_static_threads+0xf0>)
    7aa6:	f003 f81b 	bl	aae0 <assert_print>
    7aaa:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7aae:	4628      	mov	r0, r5
    7ab0:	f003 f80f 	bl	aad2 <assert_post_action>
    7ab4:	e7ce      	b.n	7a54 <z_init_static_threads+0x70>
	k_sched_unlock();
    7ab6:	f001 f9f9 	bl	8eac <k_sched_unlock>
}
    7aba:	b007      	add	sp, #28
    7abc:	bd30      	pop	{r4, r5, pc}
    7abe:	bf00      	nop
    7ac0:	200041c4 	.word	0x200041c4
    7ac4:	200041c4 	.word	0x200041c4
    7ac8:	0000dc60 	.word	0x0000dc60
    7acc:	0000dda8 	.word	0x0000dda8
    7ad0:	0000c478 	.word	0x0000c478
    7ad4:	0000dc40 	.word	0x0000dc40

00007ad8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7ad8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7ada:	4b14      	ldr	r3, [pc, #80]	; (7b2c <idle+0x54>)
    7adc:	689b      	ldr	r3, [r3, #8]
    7ade:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	da0d      	bge.n	7b02 <idle+0x2a>
    7ae6:	4c12      	ldr	r4, [pc, #72]	; (7b30 <idle+0x58>)
    7ae8:	2327      	movs	r3, #39	; 0x27
    7aea:	4622      	mov	r2, r4
    7aec:	4911      	ldr	r1, [pc, #68]	; (7b34 <idle+0x5c>)
    7aee:	4812      	ldr	r0, [pc, #72]	; (7b38 <idle+0x60>)
    7af0:	f002 fff6 	bl	aae0 <assert_print>
    7af4:	2127      	movs	r1, #39	; 0x27
    7af6:	4620      	mov	r0, r4
    7af8:	f002 ffeb 	bl	aad2 <assert_post_action>
    7afc:	e001      	b.n	7b02 <idle+0x2a>
	arch_cpu_idle();
    7afe:	f7fb f91f 	bl	2d40 <arch_cpu_idle>
	__asm__ volatile(
    7b02:	f04f 0220 	mov.w	r2, #32
    7b06:	f3ef 8311 	mrs	r3, BASEPRI
    7b0a:	f382 8812 	msr	BASEPRI_MAX, r2
    7b0e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7b12:	f002 f829 	bl	9b68 <z_get_next_timeout_expiry>
    7b16:	4b05      	ldr	r3, [pc, #20]	; (7b2c <idle+0x54>)
    7b18:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    7b1a:	4b08      	ldr	r3, [pc, #32]	; (7b3c <idle+0x64>)
    7b1c:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d0ed      	beq.n	7afe <idle+0x26>
    7b22:	f7fa fed5 	bl	28d0 <pm_system_suspend>
    7b26:	2800      	cmp	r0, #0
    7b28:	d1eb      	bne.n	7b02 <idle+0x2a>
    7b2a:	e7e8      	b.n	7afe <idle+0x26>
    7b2c:	200050ac 	.word	0x200050ac
    7b30:	0000ddd8 	.word	0x0000ddd8
    7b34:	0000ddfc 	.word	0x0000ddfc
    7b38:	0000c478 	.word	0x0000c478
    7b3c:	200052ea 	.word	0x200052ea

00007b40 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7b44:	b083      	sub	sp, #12
    7b46:	4604      	mov	r4, r0
    7b48:	4616      	mov	r6, r2
    7b4a:	461d      	mov	r5, r3
    7b4c:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7b50:	2900      	cmp	r1, #0
    7b52:	d12b      	bne.n	7bac <z_impl_k_mutex_lock+0x6c>
    7b54:	f04f 0320 	mov.w	r3, #32
    7b58:	f3ef 8711 	mrs	r7, BASEPRI
    7b5c:	f383 8812 	msr	BASEPRI_MAX, r3
    7b60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b64:	487b      	ldr	r0, [pc, #492]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7b66:	f7ff fdab 	bl	76c0 <z_spin_lock_valid>
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d02d      	beq.n	7bca <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    7b6e:	4879      	ldr	r0, [pc, #484]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7b70:	f7ff fdc6 	bl	7700 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b74:	68e1      	ldr	r1, [r4, #12]
    7b76:	2900      	cmp	r1, #0
    7b78:	d138      	bne.n	7bec <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7b7a:	2900      	cmp	r1, #0
    7b7c:	d17d      	bne.n	7c7a <z_impl_k_mutex_lock+0x13a>
    7b7e:	4b76      	ldr	r3, [pc, #472]	; (7d58 <z_impl_k_mutex_lock+0x218>)
    7b80:	689b      	ldr	r3, [r3, #8]
    7b82:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7b86:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7b88:	3101      	adds	r1, #1
    7b8a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7b8c:	4b72      	ldr	r3, [pc, #456]	; (7d58 <z_impl_k_mutex_lock+0x218>)
    7b8e:	689b      	ldr	r3, [r3, #8]
    7b90:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b92:	4870      	ldr	r0, [pc, #448]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7b94:	f7ff fda4 	bl	76e0 <z_spin_unlock_valid>
    7b98:	2800      	cmp	r0, #0
    7b9a:	d070      	beq.n	7c7e <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    7b9c:	f387 8811 	msr	BASEPRI, r7
    7ba0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7ba4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7ba6:	b003      	add	sp, #12
    7ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7bac:	4f6b      	ldr	r7, [pc, #428]	; (7d5c <z_impl_k_mutex_lock+0x21c>)
    7bae:	2365      	movs	r3, #101	; 0x65
    7bb0:	463a      	mov	r2, r7
    7bb2:	496b      	ldr	r1, [pc, #428]	; (7d60 <z_impl_k_mutex_lock+0x220>)
    7bb4:	486b      	ldr	r0, [pc, #428]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7bb6:	f002 ff93 	bl	aae0 <assert_print>
    7bba:	486b      	ldr	r0, [pc, #428]	; (7d68 <z_impl_k_mutex_lock+0x228>)
    7bbc:	f002 ff90 	bl	aae0 <assert_print>
    7bc0:	2165      	movs	r1, #101	; 0x65
    7bc2:	4638      	mov	r0, r7
    7bc4:	f002 ff85 	bl	aad2 <assert_post_action>
    7bc8:	e7c4      	b.n	7b54 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 7d6c <z_impl_k_mutex_lock+0x22c>
    7bce:	238e      	movs	r3, #142	; 0x8e
    7bd0:	4642      	mov	r2, r8
    7bd2:	4967      	ldr	r1, [pc, #412]	; (7d70 <z_impl_k_mutex_lock+0x230>)
    7bd4:	4863      	ldr	r0, [pc, #396]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7bd6:	f002 ff83 	bl	aae0 <assert_print>
    7bda:	495e      	ldr	r1, [pc, #376]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7bdc:	4865      	ldr	r0, [pc, #404]	; (7d74 <z_impl_k_mutex_lock+0x234>)
    7bde:	f002 ff7f 	bl	aae0 <assert_print>
    7be2:	218e      	movs	r1, #142	; 0x8e
    7be4:	4640      	mov	r0, r8
    7be6:	f002 ff74 	bl	aad2 <assert_post_action>
    7bea:	e7c0      	b.n	7b6e <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7bec:	68a2      	ldr	r2, [r4, #8]
    7bee:	4b5a      	ldr	r3, [pc, #360]	; (7d58 <z_impl_k_mutex_lock+0x218>)
    7bf0:	689b      	ldr	r3, [r3, #8]
    7bf2:	429a      	cmp	r2, r3
    7bf4:	d0c1      	beq.n	7b7a <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7bf6:	ea55 0106 	orrs.w	r1, r5, r6
    7bfa:	bf0c      	ite	eq
    7bfc:	f04f 0801 	moveq.w	r8, #1
    7c00:	f04f 0800 	movne.w	r8, #0
    7c04:	d04b      	beq.n	7c9e <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    7c06:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7c0a:	4649      	mov	r1, r9
    7c0c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7c10:	f004 f8fd 	bl	be0e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7c14:	4581      	cmp	r9, r0
    7c16:	dc5d      	bgt.n	7cd4 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    7c18:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7c1c:	9600      	str	r6, [sp, #0]
    7c1e:	9501      	str	r5, [sp, #4]
    7c20:	4622      	mov	r2, r4
    7c22:	4639      	mov	r1, r7
    7c24:	484b      	ldr	r0, [pc, #300]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7c26:	f000 ffe7 	bl	8bf8 <z_pend_curr>
	if (got_mutex == 0) {
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d0bb      	beq.n	7ba6 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7c2e:	f04f 0320 	mov.w	r3, #32
    7c32:	f3ef 8511 	mrs	r5, BASEPRI
    7c36:	f383 8812 	msr	BASEPRI_MAX, r3
    7c3a:	f3bf 8f6f 	isb	sy
    7c3e:	4845      	ldr	r0, [pc, #276]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7c40:	f7ff fd3e 	bl	76c0 <z_spin_lock_valid>
    7c44:	2800      	cmp	r0, #0
    7c46:	d04b      	beq.n	7ce0 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    7c48:	4842      	ldr	r0, [pc, #264]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7c4a:	f7ff fd59 	bl	7700 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7c4e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c50:	42a3      	cmp	r3, r4
    7c52:	d055      	beq.n	7d00 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7c54:	2b00      	cmp	r3, #0
    7c56:	d053      	beq.n	7d00 <z_impl_k_mutex_lock+0x1c0>
    7c58:	6921      	ldr	r1, [r4, #16]
    7c5a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7c5e:	f004 f8d6 	bl	be0e <new_prio_for_inheritance>
    7c62:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7c64:	4620      	mov	r0, r4
    7c66:	f004 f8dd 	bl	be24 <adjust_owner_prio>
    7c6a:	2800      	cmp	r0, #0
    7c6c:	d14a      	bne.n	7d04 <z_impl_k_mutex_lock+0x1c4>
    7c6e:	f1b9 0f00 	cmp.w	r9, #0
    7c72:	d049      	beq.n	7d08 <z_impl_k_mutex_lock+0x1c8>
    7c74:	f04f 0801 	mov.w	r8, #1
    7c78:	e046      	b.n	7d08 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    7c7a:	6923      	ldr	r3, [r4, #16]
    7c7c:	e783      	b.n	7b86 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c7e:	4c3b      	ldr	r4, [pc, #236]	; (7d6c <z_impl_k_mutex_lock+0x22c>)
    7c80:	23b9      	movs	r3, #185	; 0xb9
    7c82:	4622      	mov	r2, r4
    7c84:	493c      	ldr	r1, [pc, #240]	; (7d78 <z_impl_k_mutex_lock+0x238>)
    7c86:	4837      	ldr	r0, [pc, #220]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7c88:	f002 ff2a 	bl	aae0 <assert_print>
    7c8c:	4931      	ldr	r1, [pc, #196]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7c8e:	483b      	ldr	r0, [pc, #236]	; (7d7c <z_impl_k_mutex_lock+0x23c>)
    7c90:	f002 ff26 	bl	aae0 <assert_print>
    7c94:	21b9      	movs	r1, #185	; 0xb9
    7c96:	4620      	mov	r0, r4
    7c98:	f002 ff1b 	bl	aad2 <assert_post_action>
    7c9c:	e77e      	b.n	7b9c <z_impl_k_mutex_lock+0x5c>
    7c9e:	482d      	ldr	r0, [pc, #180]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7ca0:	f7ff fd1e 	bl	76e0 <z_spin_unlock_valid>
    7ca4:	b130      	cbz	r0, 7cb4 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    7ca6:	f387 8811 	msr	BASEPRI, r7
    7caa:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7cae:	f06f 000f 	mvn.w	r0, #15
    7cb2:	e778      	b.n	7ba6 <z_impl_k_mutex_lock+0x66>
    7cb4:	4c2d      	ldr	r4, [pc, #180]	; (7d6c <z_impl_k_mutex_lock+0x22c>)
    7cb6:	23b9      	movs	r3, #185	; 0xb9
    7cb8:	4622      	mov	r2, r4
    7cba:	492f      	ldr	r1, [pc, #188]	; (7d78 <z_impl_k_mutex_lock+0x238>)
    7cbc:	4829      	ldr	r0, [pc, #164]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7cbe:	f002 ff0f 	bl	aae0 <assert_print>
    7cc2:	4924      	ldr	r1, [pc, #144]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7cc4:	482d      	ldr	r0, [pc, #180]	; (7d7c <z_impl_k_mutex_lock+0x23c>)
    7cc6:	f002 ff0b 	bl	aae0 <assert_print>
    7cca:	21b9      	movs	r1, #185	; 0xb9
    7ccc:	4620      	mov	r0, r4
    7cce:	f002 ff00 	bl	aad2 <assert_post_action>
    7cd2:	e7e8      	b.n	7ca6 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    7cd4:	4601      	mov	r1, r0
    7cd6:	4620      	mov	r0, r4
    7cd8:	f004 f8a4 	bl	be24 <adjust_owner_prio>
    7cdc:	4681      	mov	r9, r0
    7cde:	e79d      	b.n	7c1c <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ce0:	4e22      	ldr	r6, [pc, #136]	; (7d6c <z_impl_k_mutex_lock+0x22c>)
    7ce2:	238e      	movs	r3, #142	; 0x8e
    7ce4:	4632      	mov	r2, r6
    7ce6:	4922      	ldr	r1, [pc, #136]	; (7d70 <z_impl_k_mutex_lock+0x230>)
    7ce8:	481e      	ldr	r0, [pc, #120]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7cea:	f002 fef9 	bl	aae0 <assert_print>
    7cee:	4919      	ldr	r1, [pc, #100]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7cf0:	4820      	ldr	r0, [pc, #128]	; (7d74 <z_impl_k_mutex_lock+0x234>)
    7cf2:	f002 fef5 	bl	aae0 <assert_print>
    7cf6:	218e      	movs	r1, #142	; 0x8e
    7cf8:	4630      	mov	r0, r6
    7cfa:	f002 feea 	bl	aad2 <assert_post_action>
    7cfe:	e7a3      	b.n	7c48 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7d00:	6921      	ldr	r1, [r4, #16]
    7d02:	e7af      	b.n	7c64 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7d04:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    7d08:	f1b8 0f00 	cmp.w	r8, #0
    7d0c:	d006      	beq.n	7d1c <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    7d0e:	4629      	mov	r1, r5
    7d10:	4810      	ldr	r0, [pc, #64]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7d12:	f000 faf1 	bl	82f8 <z_reschedule>
	return -EAGAIN;
    7d16:	f06f 000a 	mvn.w	r0, #10
    7d1a:	e744      	b.n	7ba6 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d1c:	480d      	ldr	r0, [pc, #52]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7d1e:	f7ff fcdf 	bl	76e0 <z_spin_unlock_valid>
    7d22:	b130      	cbz	r0, 7d32 <z_impl_k_mutex_lock+0x1f2>
    7d24:	f385 8811 	msr	BASEPRI, r5
    7d28:	f3bf 8f6f 	isb	sy
    7d2c:	f06f 000a 	mvn.w	r0, #10
    7d30:	e739      	b.n	7ba6 <z_impl_k_mutex_lock+0x66>
    7d32:	4c0e      	ldr	r4, [pc, #56]	; (7d6c <z_impl_k_mutex_lock+0x22c>)
    7d34:	23b9      	movs	r3, #185	; 0xb9
    7d36:	4622      	mov	r2, r4
    7d38:	490f      	ldr	r1, [pc, #60]	; (7d78 <z_impl_k_mutex_lock+0x238>)
    7d3a:	480a      	ldr	r0, [pc, #40]	; (7d64 <z_impl_k_mutex_lock+0x224>)
    7d3c:	f002 fed0 	bl	aae0 <assert_print>
    7d40:	4904      	ldr	r1, [pc, #16]	; (7d54 <z_impl_k_mutex_lock+0x214>)
    7d42:	480e      	ldr	r0, [pc, #56]	; (7d7c <z_impl_k_mutex_lock+0x23c>)
    7d44:	f002 fecc 	bl	aae0 <assert_print>
    7d48:	21b9      	movs	r1, #185	; 0xb9
    7d4a:	4620      	mov	r0, r4
    7d4c:	f002 fec1 	bl	aad2 <assert_post_action>
    7d50:	e7e8      	b.n	7d24 <z_impl_k_mutex_lock+0x1e4>
    7d52:	bf00      	nop
    7d54:	200050dc 	.word	0x200050dc
    7d58:	200050ac 	.word	0x200050ac
    7d5c:	0000de24 	.word	0x0000de24
    7d60:	0000dd6c 	.word	0x0000dd6c
    7d64:	0000c478 	.word	0x0000c478
    7d68:	0000de48 	.word	0x0000de48
    7d6c:	0000c624 	.word	0x0000c624
    7d70:	0000c684 	.word	0x0000c684
    7d74:	0000c69c 	.word	0x0000c69c
    7d78:	0000c654 	.word	0x0000c654
    7d7c:	0000c66c 	.word	0x0000c66c

00007d80 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7d80:	b570      	push	{r4, r5, r6, lr}
    7d82:	4604      	mov	r4, r0
    7d84:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7d88:	bb03      	cbnz	r3, 7dcc <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7d8a:	68a3      	ldr	r3, [r4, #8]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	f000 80a6 	beq.w	7ede <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7d92:	4a56      	ldr	r2, [pc, #344]	; (7eec <z_impl_k_mutex_unlock+0x16c>)
    7d94:	6892      	ldr	r2, [r2, #8]
    7d96:	4293      	cmp	r3, r2
    7d98:	f040 80a4 	bne.w	7ee4 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7d9c:	68e3      	ldr	r3, [r4, #12]
    7d9e:	b323      	cbz	r3, 7dea <z_impl_k_mutex_unlock+0x6a>
    7da0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7da4:	bb6b      	cbnz	r3, 7e02 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7da6:	4b51      	ldr	r3, [pc, #324]	; (7eec <z_impl_k_mutex_unlock+0x16c>)
    7da8:	689b      	ldr	r3, [r3, #8]
    7daa:	7bdb      	ldrb	r3, [r3, #15]
    7dac:	2b01      	cmp	r3, #1
    7dae:	d037      	beq.n	7e20 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    7db0:	4b4e      	ldr	r3, [pc, #312]	; (7eec <z_impl_k_mutex_unlock+0x16c>)
    7db2:	689a      	ldr	r2, [r3, #8]
    7db4:	7bd3      	ldrb	r3, [r2, #15]
    7db6:	3b01      	subs	r3, #1
    7db8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7dba:	68e3      	ldr	r3, [r4, #12]
    7dbc:	2b01      	cmp	r3, #1
    7dbe:	d93e      	bls.n	7e3e <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    7dc0:	3b01      	subs	r3, #1
    7dc2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7dc4:	f001 f872 	bl	8eac <k_sched_unlock>

	return 0;
    7dc8:	2000      	movs	r0, #0
}
    7dca:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7dcc:	4d48      	ldr	r5, [pc, #288]	; (7ef0 <z_impl_k_mutex_unlock+0x170>)
    7dce:	23c7      	movs	r3, #199	; 0xc7
    7dd0:	462a      	mov	r2, r5
    7dd2:	4948      	ldr	r1, [pc, #288]	; (7ef4 <z_impl_k_mutex_unlock+0x174>)
    7dd4:	4848      	ldr	r0, [pc, #288]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7dd6:	f002 fe83 	bl	aae0 <assert_print>
    7dda:	4848      	ldr	r0, [pc, #288]	; (7efc <z_impl_k_mutex_unlock+0x17c>)
    7ddc:	f002 fe80 	bl	aae0 <assert_print>
    7de0:	21c7      	movs	r1, #199	; 0xc7
    7de2:	4628      	mov	r0, r5
    7de4:	f002 fe75 	bl	aad2 <assert_post_action>
    7de8:	e7cf      	b.n	7d8a <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7dea:	4d41      	ldr	r5, [pc, #260]	; (7ef0 <z_impl_k_mutex_unlock+0x170>)
    7dec:	23df      	movs	r3, #223	; 0xdf
    7dee:	462a      	mov	r2, r5
    7df0:	4943      	ldr	r1, [pc, #268]	; (7f00 <z_impl_k_mutex_unlock+0x180>)
    7df2:	4841      	ldr	r0, [pc, #260]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7df4:	f002 fe74 	bl	aae0 <assert_print>
    7df8:	21df      	movs	r1, #223	; 0xdf
    7dfa:	4628      	mov	r0, r5
    7dfc:	f002 fe69 	bl	aad2 <assert_post_action>
    7e00:	e7ce      	b.n	7da0 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    7e02:	4d40      	ldr	r5, [pc, #256]	; (7f04 <z_impl_k_mutex_unlock+0x184>)
    7e04:	23fd      	movs	r3, #253	; 0xfd
    7e06:	462a      	mov	r2, r5
    7e08:	493a      	ldr	r1, [pc, #232]	; (7ef4 <z_impl_k_mutex_unlock+0x174>)
    7e0a:	483b      	ldr	r0, [pc, #236]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7e0c:	f002 fe68 	bl	aae0 <assert_print>
    7e10:	483d      	ldr	r0, [pc, #244]	; (7f08 <z_impl_k_mutex_unlock+0x188>)
    7e12:	f002 fe65 	bl	aae0 <assert_print>
    7e16:	21fd      	movs	r1, #253	; 0xfd
    7e18:	4628      	mov	r0, r5
    7e1a:	f002 fe5a 	bl	aad2 <assert_post_action>
    7e1e:	e7c2      	b.n	7da6 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7e20:	4d38      	ldr	r5, [pc, #224]	; (7f04 <z_impl_k_mutex_unlock+0x184>)
    7e22:	23fe      	movs	r3, #254	; 0xfe
    7e24:	462a      	mov	r2, r5
    7e26:	4939      	ldr	r1, [pc, #228]	; (7f0c <z_impl_k_mutex_unlock+0x18c>)
    7e28:	4833      	ldr	r0, [pc, #204]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7e2a:	f002 fe59 	bl	aae0 <assert_print>
    7e2e:	4836      	ldr	r0, [pc, #216]	; (7f08 <z_impl_k_mutex_unlock+0x188>)
    7e30:	f002 fe56 	bl	aae0 <assert_print>
    7e34:	21fe      	movs	r1, #254	; 0xfe
    7e36:	4628      	mov	r0, r5
    7e38:	f002 fe4b 	bl	aad2 <assert_post_action>
    7e3c:	e7b8      	b.n	7db0 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    7e3e:	f04f 0320 	mov.w	r3, #32
    7e42:	f3ef 8511 	mrs	r5, BASEPRI
    7e46:	f383 8812 	msr	BASEPRI_MAX, r3
    7e4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e4e:	4830      	ldr	r0, [pc, #192]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7e50:	f7ff fc36 	bl	76c0 <z_spin_lock_valid>
    7e54:	b1c0      	cbz	r0, 7e88 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    7e56:	482e      	ldr	r0, [pc, #184]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7e58:	f7ff fc52 	bl	7700 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7e5c:	6921      	ldr	r1, [r4, #16]
    7e5e:	4620      	mov	r0, r4
    7e60:	f003 ffe0 	bl	be24 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7e64:	4620      	mov	r0, r4
    7e66:	f001 f963 	bl	9130 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7e6a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7e6c:	b1e0      	cbz	r0, 7ea8 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    7e6e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7e72:	6123      	str	r3, [r4, #16]
    7e74:	2300      	movs	r3, #0
    7e76:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    7e7a:	f000 fce1 	bl	8840 <z_ready_thread>
		z_reschedule(&lock, key);
    7e7e:	4629      	mov	r1, r5
    7e80:	4823      	ldr	r0, [pc, #140]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7e82:	f000 fa39 	bl	82f8 <z_reschedule>
    7e86:	e79d      	b.n	7dc4 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e88:	4e22      	ldr	r6, [pc, #136]	; (7f14 <z_impl_k_mutex_unlock+0x194>)
    7e8a:	238e      	movs	r3, #142	; 0x8e
    7e8c:	4632      	mov	r2, r6
    7e8e:	4922      	ldr	r1, [pc, #136]	; (7f18 <z_impl_k_mutex_unlock+0x198>)
    7e90:	4819      	ldr	r0, [pc, #100]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7e92:	f002 fe25 	bl	aae0 <assert_print>
    7e96:	491e      	ldr	r1, [pc, #120]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7e98:	4820      	ldr	r0, [pc, #128]	; (7f1c <z_impl_k_mutex_unlock+0x19c>)
    7e9a:	f002 fe21 	bl	aae0 <assert_print>
    7e9e:	218e      	movs	r1, #142	; 0x8e
    7ea0:	4630      	mov	r0, r6
    7ea2:	f002 fe16 	bl	aad2 <assert_post_action>
    7ea6:	e7d6      	b.n	7e56 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    7ea8:	2300      	movs	r3, #0
    7eaa:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7eac:	4818      	ldr	r0, [pc, #96]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7eae:	f7ff fc17 	bl	76e0 <z_spin_unlock_valid>
    7eb2:	b120      	cbz	r0, 7ebe <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    7eb4:	f385 8811 	msr	BASEPRI, r5
    7eb8:	f3bf 8f6f 	isb	sy
    7ebc:	e782      	b.n	7dc4 <z_impl_k_mutex_unlock+0x44>
    7ebe:	4c15      	ldr	r4, [pc, #84]	; (7f14 <z_impl_k_mutex_unlock+0x194>)
    7ec0:	23b9      	movs	r3, #185	; 0xb9
    7ec2:	4622      	mov	r2, r4
    7ec4:	4916      	ldr	r1, [pc, #88]	; (7f20 <z_impl_k_mutex_unlock+0x1a0>)
    7ec6:	480c      	ldr	r0, [pc, #48]	; (7ef8 <z_impl_k_mutex_unlock+0x178>)
    7ec8:	f002 fe0a 	bl	aae0 <assert_print>
    7ecc:	4910      	ldr	r1, [pc, #64]	; (7f10 <z_impl_k_mutex_unlock+0x190>)
    7ece:	4815      	ldr	r0, [pc, #84]	; (7f24 <z_impl_k_mutex_unlock+0x1a4>)
    7ed0:	f002 fe06 	bl	aae0 <assert_print>
    7ed4:	21b9      	movs	r1, #185	; 0xb9
    7ed6:	4620      	mov	r0, r4
    7ed8:	f002 fdfb 	bl	aad2 <assert_post_action>
    7edc:	e7ea      	b.n	7eb4 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    7ede:	f06f 0015 	mvn.w	r0, #21
    7ee2:	e772      	b.n	7dca <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    7ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ee8:	e76f      	b.n	7dca <z_impl_k_mutex_unlock+0x4a>
    7eea:	bf00      	nop
    7eec:	200050ac 	.word	0x200050ac
    7ef0:	0000de24 	.word	0x0000de24
    7ef4:	0000dd6c 	.word	0x0000dd6c
    7ef8:	0000c478 	.word	0x0000c478
    7efc:	0000de48 	.word	0x0000de48
    7f00:	0000de70 	.word	0x0000de70
    7f04:	0000de88 	.word	0x0000de88
    7f08:	0000deb4 	.word	0x0000deb4
    7f0c:	0000deb8 	.word	0x0000deb8
    7f10:	200050dc 	.word	0x200050dc
    7f14:	0000c624 	.word	0x0000c624
    7f18:	0000c684 	.word	0x0000c684
    7f1c:	0000c69c 	.word	0x0000c69c
    7f20:	0000c654 	.word	0x0000c654
    7f24:	0000c66c 	.word	0x0000c66c

00007f28 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7f28:	b570      	push	{r4, r5, r6, lr}
    7f2a:	4604      	mov	r4, r0
	__asm__ volatile(
    7f2c:	f04f 0320 	mov.w	r3, #32
    7f30:	f3ef 8511 	mrs	r5, BASEPRI
    7f34:	f383 8812 	msr	BASEPRI_MAX, r3
    7f38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f3c:	4817      	ldr	r0, [pc, #92]	; (7f9c <z_impl_k_sem_give+0x74>)
    7f3e:	f7ff fbbf 	bl	76c0 <z_spin_lock_valid>
    7f42:	b180      	cbz	r0, 7f66 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    7f44:	4815      	ldr	r0, [pc, #84]	; (7f9c <z_impl_k_sem_give+0x74>)
    7f46:	f7ff fbdb 	bl	7700 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7f4a:	4620      	mov	r0, r4
    7f4c:	f001 f8f0 	bl	9130 <z_unpend_first_thread>

	if (thread != NULL) {
    7f50:	b1c8      	cbz	r0, 7f86 <z_impl_k_sem_give+0x5e>
    7f52:	2200      	movs	r2, #0
    7f54:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7f58:	f000 fc72 	bl	8840 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7f5c:	4629      	mov	r1, r5
    7f5e:	480f      	ldr	r0, [pc, #60]	; (7f9c <z_impl_k_sem_give+0x74>)
    7f60:	f000 f9ca 	bl	82f8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7f64:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f66:	4e0e      	ldr	r6, [pc, #56]	; (7fa0 <z_impl_k_sem_give+0x78>)
    7f68:	238e      	movs	r3, #142	; 0x8e
    7f6a:	4632      	mov	r2, r6
    7f6c:	490d      	ldr	r1, [pc, #52]	; (7fa4 <z_impl_k_sem_give+0x7c>)
    7f6e:	480e      	ldr	r0, [pc, #56]	; (7fa8 <z_impl_k_sem_give+0x80>)
    7f70:	f002 fdb6 	bl	aae0 <assert_print>
    7f74:	4909      	ldr	r1, [pc, #36]	; (7f9c <z_impl_k_sem_give+0x74>)
    7f76:	480d      	ldr	r0, [pc, #52]	; (7fac <z_impl_k_sem_give+0x84>)
    7f78:	f002 fdb2 	bl	aae0 <assert_print>
    7f7c:	218e      	movs	r1, #142	; 0x8e
    7f7e:	4630      	mov	r0, r6
    7f80:	f002 fda7 	bl	aad2 <assert_post_action>
    7f84:	e7de      	b.n	7f44 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7f86:	68a3      	ldr	r3, [r4, #8]
    7f88:	68e2      	ldr	r2, [r4, #12]
    7f8a:	4293      	cmp	r3, r2
    7f8c:	d003      	beq.n	7f96 <z_impl_k_sem_give+0x6e>
    7f8e:	2201      	movs	r2, #1
    7f90:	4413      	add	r3, r2
    7f92:	60a3      	str	r3, [r4, #8]
}
    7f94:	e7e2      	b.n	7f5c <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7f96:	2200      	movs	r2, #0
    7f98:	e7fa      	b.n	7f90 <z_impl_k_sem_give+0x68>
    7f9a:	bf00      	nop
    7f9c:	200050e0 	.word	0x200050e0
    7fa0:	0000c624 	.word	0x0000c624
    7fa4:	0000c684 	.word	0x0000c684
    7fa8:	0000c478 	.word	0x0000c478
    7fac:	0000c69c 	.word	0x0000c69c

00007fb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fb4:	b082      	sub	sp, #8
    7fb6:	4604      	mov	r4, r0
    7fb8:	4617      	mov	r7, r2
    7fba:	461d      	mov	r5, r3
    7fbc:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7fc0:	b111      	cbz	r1, 7fc8 <z_impl_k_sem_take+0x18>
    7fc2:	ea55 0302 	orrs.w	r3, r5, r2
    7fc6:	d11f      	bne.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    7fc8:	f04f 0320 	mov.w	r3, #32
    7fcc:	f3ef 8611 	mrs	r6, BASEPRI
    7fd0:	f383 8812 	msr	BASEPRI_MAX, r3
    7fd4:	f3bf 8f6f 	isb	sy
    7fd8:	4836      	ldr	r0, [pc, #216]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    7fda:	f7ff fb71 	bl	76c0 <z_spin_lock_valid>
    7fde:	b310      	cbz	r0, 8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
	z_spin_lock_set_owner(l);
    7fe0:	4834      	ldr	r0, [pc, #208]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    7fe2:	f7ff fb8d 	bl	7700 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7fe6:	68a1      	ldr	r1, [r4, #8]
    7fe8:	2900      	cmp	r1, #0
    7fea:	d03d      	beq.n	8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
		sem->count--;
    7fec:	3901      	subs	r1, #1
    7fee:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ff0:	4830      	ldr	r0, [pc, #192]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    7ff2:	f7ff fb75 	bl	76e0 <z_spin_unlock_valid>
    7ff6:	b338      	cbz	r0, 8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
	__asm__ volatile(
    7ff8:	f386 8811 	msr	BASEPRI, r6
    7ffc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8000:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8002:	b002      	add	sp, #8
    8004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    8008:	4e2b      	ldr	r6, [pc, #172]	; (80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    800a:	2379      	movs	r3, #121	; 0x79
    800c:	4632      	mov	r2, r6
    800e:	492b      	ldr	r1, [pc, #172]	; (80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>)
    8010:	482b      	ldr	r0, [pc, #172]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8012:	f002 fd65 	bl	aae0 <assert_print>
    8016:	482b      	ldr	r0, [pc, #172]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    8018:	f002 fd62 	bl	aae0 <assert_print>
    801c:	2179      	movs	r1, #121	; 0x79
    801e:	4630      	mov	r0, r6
    8020:	f002 fd57 	bl	aad2 <assert_post_action>
    8024:	e7d0      	b.n	7fc8 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8026:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    802a:	238e      	movs	r3, #142	; 0x8e
    802c:	4642      	mov	r2, r8
    802e:	4927      	ldr	r1, [pc, #156]	; (80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>)
    8030:	4823      	ldr	r0, [pc, #140]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8032:	f002 fd55 	bl	aae0 <assert_print>
    8036:	491f      	ldr	r1, [pc, #124]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    8038:	4825      	ldr	r0, [pc, #148]	; (80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>)
    803a:	f002 fd51 	bl	aae0 <assert_print>
    803e:	218e      	movs	r1, #142	; 0x8e
    8040:	4640      	mov	r0, r8
    8042:	f002 fd46 	bl	aad2 <assert_post_action>
    8046:	e7cb      	b.n	7fe0 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8048:	4c1f      	ldr	r4, [pc, #124]	; (80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>)
    804a:	23b9      	movs	r3, #185	; 0xb9
    804c:	4622      	mov	r2, r4
    804e:	4921      	ldr	r1, [pc, #132]	; (80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>)
    8050:	481b      	ldr	r0, [pc, #108]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8052:	f002 fd45 	bl	aae0 <assert_print>
    8056:	4917      	ldr	r1, [pc, #92]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    8058:	481f      	ldr	r0, [pc, #124]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    805a:	f002 fd41 	bl	aae0 <assert_print>
    805e:	21b9      	movs	r1, #185	; 0xb9
    8060:	4620      	mov	r0, r4
    8062:	f002 fd36 	bl	aad2 <assert_post_action>
    8066:	e7c7      	b.n	7ff8 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8068:	ea55 0307 	orrs.w	r3, r5, r7
    806c:	d007      	beq.n	807e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    806e:	9700      	str	r7, [sp, #0]
    8070:	9501      	str	r5, [sp, #4]
    8072:	4622      	mov	r2, r4
    8074:	4631      	mov	r1, r6
    8076:	480f      	ldr	r0, [pc, #60]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    8078:	f000 fdbe 	bl	8bf8 <z_pend_curr>
	return ret;
    807c:	e7c1      	b.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    807e:	480d      	ldr	r0, [pc, #52]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    8080:	f7ff fb2e 	bl	76e0 <z_spin_unlock_valid>
    8084:	b130      	cbz	r0, 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    8086:	f386 8811 	msr	BASEPRI, r6
    808a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    808e:	f06f 000f 	mvn.w	r0, #15
    8092:	e7b6      	b.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    8094:	4c0c      	ldr	r4, [pc, #48]	; (80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>)
    8096:	23b9      	movs	r3, #185	; 0xb9
    8098:	4622      	mov	r2, r4
    809a:	490e      	ldr	r1, [pc, #56]	; (80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>)
    809c:	4808      	ldr	r0, [pc, #32]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    809e:	f002 fd1f 	bl	aae0 <assert_print>
    80a2:	4904      	ldr	r1, [pc, #16]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    80a4:	480c      	ldr	r0, [pc, #48]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80a6:	f002 fd1b 	bl	aae0 <assert_print>
    80aa:	21b9      	movs	r1, #185	; 0xb9
    80ac:	4620      	mov	r0, r4
    80ae:	f002 fd10 	bl	aad2 <assert_post_action>
    80b2:	e7e8      	b.n	8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
    80b4:	200050e0 	.word	0x200050e0
    80b8:	0000deec 	.word	0x0000deec
    80bc:	0000df0c 	.word	0x0000df0c
    80c0:	0000c478 	.word	0x0000c478
    80c4:	0000deb4 	.word	0x0000deb4
    80c8:	0000c624 	.word	0x0000c624
    80cc:	0000c684 	.word	0x0000c684
    80d0:	0000c69c 	.word	0x0000c69c
    80d4:	0000c654 	.word	0x0000c654
    80d8:	0000c66c 	.word	0x0000c66c

000080dc <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    80dc:	b538      	push	{r3, r4, r5, lr}
    80de:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    80e0:	6883      	ldr	r3, [r0, #8]
    80e2:	b10b      	cbz	r3, 80e8 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    80e4:	68a0      	ldr	r0, [r4, #8]
    80e6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    80e8:	4d06      	ldr	r5, [pc, #24]	; (8104 <pended_on_thread+0x28>)
    80ea:	f240 23b9 	movw	r3, #697	; 0x2b9
    80ee:	462a      	mov	r2, r5
    80f0:	4905      	ldr	r1, [pc, #20]	; (8108 <pended_on_thread+0x2c>)
    80f2:	4806      	ldr	r0, [pc, #24]	; (810c <pended_on_thread+0x30>)
    80f4:	f002 fcf4 	bl	aae0 <assert_print>
    80f8:	f240 21b9 	movw	r1, #697	; 0x2b9
    80fc:	4628      	mov	r0, r5
    80fe:	f002 fce8 	bl	aad2 <assert_post_action>
    8102:	e7ef      	b.n	80e4 <pended_on_thread+0x8>
    8104:	0000df5c 	.word	0x0000df5c
    8108:	0000df80 	.word	0x0000df80
    810c:	0000c478 	.word	0x0000c478

00008110 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8114:	bf08      	it	eq
    8116:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    811a:	d100      	bne.n	811e <add_thread_timeout+0xe>
    811c:	4770      	bx	lr
{
    811e:	b508      	push	{r3, lr}
    8120:	4902      	ldr	r1, [pc, #8]	; (812c <add_thread_timeout+0x1c>)
    8122:	3018      	adds	r0, #24
    8124:	f001 fbe2 	bl	98ec <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    8128:	bd08      	pop	{r3, pc}
    812a:	bf00      	nop
    812c:	0000899d 	.word	0x0000899d

00008130 <z_reset_time_slice>:
{
    8130:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    8132:	4b07      	ldr	r3, [pc, #28]	; (8150 <z_reset_time_slice+0x20>)
    8134:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    8136:	b904      	cbnz	r4, 813a <z_reset_time_slice+0xa>
}
    8138:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    813a:	f7fc ff59 	bl	4ff0 <sys_clock_elapsed>
    813e:	4404      	add	r4, r0
    8140:	4b04      	ldr	r3, [pc, #16]	; (8154 <z_reset_time_slice+0x24>)
    8142:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    8144:	2100      	movs	r1, #0
    8146:	4b02      	ldr	r3, [pc, #8]	; (8150 <z_reset_time_slice+0x20>)
    8148:	6818      	ldr	r0, [r3, #0]
    814a:	f001 fd5f 	bl	9c0c <z_set_timeout_expiry>
}
    814e:	e7f3      	b.n	8138 <z_reset_time_slice+0x8>
    8150:	200050f0 	.word	0x200050f0
    8154:	200050ac 	.word	0x200050ac

00008158 <k_sched_time_slice_set>:
{
    8158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    815c:	4604      	mov	r4, r0
    815e:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    8160:	2700      	movs	r7, #0
	__asm__ volatile(
    8162:	f04f 0320 	mov.w	r3, #32
    8166:	f3ef 8611 	mrs	r6, BASEPRI
    816a:	f383 8812 	msr	BASEPRI_MAX, r3
    816e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8172:	482a      	ldr	r0, [pc, #168]	; (821c <k_sched_time_slice_set+0xc4>)
    8174:	f7ff faa4 	bl	76c0 <z_spin_lock_valid>
    8178:	b118      	cbz	r0, 8182 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    817a:	4828      	ldr	r0, [pc, #160]	; (821c <k_sched_time_slice_set+0xc4>)
    817c:	f7ff fac0 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8180:	e023      	b.n	81ca <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8182:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8220 <k_sched_time_slice_set+0xc8>
    8186:	238e      	movs	r3, #142	; 0x8e
    8188:	4642      	mov	r2, r8
    818a:	4926      	ldr	r1, [pc, #152]	; (8224 <k_sched_time_slice_set+0xcc>)
    818c:	4826      	ldr	r0, [pc, #152]	; (8228 <k_sched_time_slice_set+0xd0>)
    818e:	f002 fca7 	bl	aae0 <assert_print>
    8192:	4922      	ldr	r1, [pc, #136]	; (821c <k_sched_time_slice_set+0xc4>)
    8194:	4825      	ldr	r0, [pc, #148]	; (822c <k_sched_time_slice_set+0xd4>)
    8196:	f002 fca3 	bl	aae0 <assert_print>
    819a:	218e      	movs	r1, #142	; 0x8e
    819c:	4640      	mov	r0, r8
    819e:	f002 fc98 	bl	aad2 <assert_post_action>
    81a2:	e7ea      	b.n	817a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    81a4:	2802      	cmp	r0, #2
    81a6:	bfb8      	it	lt
    81a8:	2002      	movlt	r0, #2
    81aa:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    81ac:	4b20      	ldr	r3, [pc, #128]	; (8230 <k_sched_time_slice_set+0xd8>)
    81ae:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    81b0:	4b20      	ldr	r3, [pc, #128]	; (8234 <k_sched_time_slice_set+0xdc>)
    81b2:	6898      	ldr	r0, [r3, #8]
    81b4:	f7ff ffbc 	bl	8130 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81b8:	4818      	ldr	r0, [pc, #96]	; (821c <k_sched_time_slice_set+0xc4>)
    81ba:	f7ff fa91 	bl	76e0 <z_spin_unlock_valid>
    81be:	b1d0      	cbz	r0, 81f6 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    81c0:	f386 8811 	msr	BASEPRI, r6
    81c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    81c8:	2701      	movs	r7, #1
    81ca:	bb27      	cbnz	r7, 8216 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    81cc:	4b19      	ldr	r3, [pc, #100]	; (8234 <k_sched_time_slice_set+0xdc>)
    81ce:	2200      	movs	r2, #0
    81d0:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    81d2:	0c61      	lsrs	r1, r4, #17
    81d4:	03e3      	lsls	r3, r4, #15
    81d6:	f240 30e7 	movw	r0, #999	; 0x3e7
    81da:	1818      	adds	r0, r3, r0
    81dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    81e0:	f04f 0300 	mov.w	r3, #0
    81e4:	f141 0100 	adc.w	r1, r1, #0
    81e8:	f7f7 ff8a 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    81ec:	4b12      	ldr	r3, [pc, #72]	; (8238 <k_sched_time_slice_set+0xe0>)
    81ee:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    81f0:	2c00      	cmp	r4, #0
    81f2:	dcd7      	bgt.n	81a4 <k_sched_time_slice_set+0x4c>
    81f4:	e7da      	b.n	81ac <k_sched_time_slice_set+0x54>
    81f6:	4f0a      	ldr	r7, [pc, #40]	; (8220 <k_sched_time_slice_set+0xc8>)
    81f8:	23b9      	movs	r3, #185	; 0xb9
    81fa:	463a      	mov	r2, r7
    81fc:	490f      	ldr	r1, [pc, #60]	; (823c <k_sched_time_slice_set+0xe4>)
    81fe:	480a      	ldr	r0, [pc, #40]	; (8228 <k_sched_time_slice_set+0xd0>)
    8200:	f002 fc6e 	bl	aae0 <assert_print>
    8204:	4905      	ldr	r1, [pc, #20]	; (821c <k_sched_time_slice_set+0xc4>)
    8206:	480e      	ldr	r0, [pc, #56]	; (8240 <k_sched_time_slice_set+0xe8>)
    8208:	f002 fc6a 	bl	aae0 <assert_print>
    820c:	21b9      	movs	r1, #185	; 0xb9
    820e:	4638      	mov	r0, r7
    8210:	f002 fc5f 	bl	aad2 <assert_post_action>
    8214:	e7d4      	b.n	81c0 <k_sched_time_slice_set+0x68>
}
    8216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    821a:	bf00      	nop
    821c:	200050e8 	.word	0x200050e8
    8220:	0000c624 	.word	0x0000c624
    8224:	0000c684 	.word	0x0000c684
    8228:	0000c478 	.word	0x0000c478
    822c:	0000c69c 	.word	0x0000c69c
    8230:	200050ec 	.word	0x200050ec
    8234:	200050ac 	.word	0x200050ac
    8238:	200050f0 	.word	0x200050f0
    823c:	0000c654 	.word	0x0000c654
    8240:	0000c66c 	.word	0x0000c66c

00008244 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    8244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8246:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8248:	2500      	movs	r5, #0
	__asm__ volatile(
    824a:	f04f 0320 	mov.w	r3, #32
    824e:	f3ef 8611 	mrs	r6, BASEPRI
    8252:	f383 8812 	msr	BASEPRI_MAX, r3
    8256:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    825a:	4820      	ldr	r0, [pc, #128]	; (82dc <z_unpend_thread_no_timeout+0x98>)
    825c:	f7ff fa30 	bl	76c0 <z_spin_lock_valid>
    8260:	b118      	cbz	r0, 826a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    8262:	481e      	ldr	r0, [pc, #120]	; (82dc <z_unpend_thread_no_timeout+0x98>)
    8264:	f7ff fa4c 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8268:	e014      	b.n	8294 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    826a:	4f1d      	ldr	r7, [pc, #116]	; (82e0 <z_unpend_thread_no_timeout+0x9c>)
    826c:	238e      	movs	r3, #142	; 0x8e
    826e:	463a      	mov	r2, r7
    8270:	491c      	ldr	r1, [pc, #112]	; (82e4 <z_unpend_thread_no_timeout+0xa0>)
    8272:	481d      	ldr	r0, [pc, #116]	; (82e8 <z_unpend_thread_no_timeout+0xa4>)
    8274:	f002 fc34 	bl	aae0 <assert_print>
    8278:	4918      	ldr	r1, [pc, #96]	; (82dc <z_unpend_thread_no_timeout+0x98>)
    827a:	481c      	ldr	r0, [pc, #112]	; (82ec <z_unpend_thread_no_timeout+0xa8>)
    827c:	f002 fc30 	bl	aae0 <assert_print>
    8280:	218e      	movs	r1, #142	; 0x8e
    8282:	4638      	mov	r0, r7
    8284:	f002 fc25 	bl	aad2 <assert_post_action>
    8288:	e7eb      	b.n	8262 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    828a:	f386 8811 	msr	BASEPRI, r6
    828e:	f3bf 8f6f 	isb	sy
    8292:	2501      	movs	r5, #1
    8294:	bb05      	cbnz	r5, 82d8 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8296:	4620      	mov	r0, r4
    8298:	f7ff ff20 	bl	80dc <pended_on_thread>
    829c:	4621      	mov	r1, r4
    829e:	f000 f8fb 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    82a2:	7b63      	ldrb	r3, [r4, #13]
    82a4:	f023 0302 	bic.w	r3, r3, #2
    82a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    82aa:	2300      	movs	r3, #0
    82ac:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82ae:	480b      	ldr	r0, [pc, #44]	; (82dc <z_unpend_thread_no_timeout+0x98>)
    82b0:	f7ff fa16 	bl	76e0 <z_spin_unlock_valid>
    82b4:	2800      	cmp	r0, #0
    82b6:	d1e8      	bne.n	828a <z_unpend_thread_no_timeout+0x46>
    82b8:	4d09      	ldr	r5, [pc, #36]	; (82e0 <z_unpend_thread_no_timeout+0x9c>)
    82ba:	23b9      	movs	r3, #185	; 0xb9
    82bc:	462a      	mov	r2, r5
    82be:	490c      	ldr	r1, [pc, #48]	; (82f0 <z_unpend_thread_no_timeout+0xac>)
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <z_unpend_thread_no_timeout+0xa4>)
    82c2:	f002 fc0d 	bl	aae0 <assert_print>
    82c6:	4905      	ldr	r1, [pc, #20]	; (82dc <z_unpend_thread_no_timeout+0x98>)
    82c8:	480a      	ldr	r0, [pc, #40]	; (82f4 <z_unpend_thread_no_timeout+0xb0>)
    82ca:	f002 fc09 	bl	aae0 <assert_print>
    82ce:	21b9      	movs	r1, #185	; 0xb9
    82d0:	4628      	mov	r0, r5
    82d2:	f002 fbfe 	bl	aad2 <assert_post_action>
    82d6:	e7d8      	b.n	828a <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    82d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82da:	bf00      	nop
    82dc:	200050e8 	.word	0x200050e8
    82e0:	0000c624 	.word	0x0000c624
    82e4:	0000c684 	.word	0x0000c684
    82e8:	0000c478 	.word	0x0000c478
    82ec:	0000c69c 	.word	0x0000c69c
    82f0:	0000c654 	.word	0x0000c654
    82f4:	0000c66c 	.word	0x0000c66c

000082f8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    82f8:	b570      	push	{r4, r5, r6, lr}
    82fa:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    82fc:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    82fe:	b921      	cbnz	r1, 830a <z_reschedule+0x12>
    8300:	f3ef 8305 	mrs	r3, IPSR
    8304:	b913      	cbnz	r3, 830c <z_reschedule+0x14>
    8306:	2101      	movs	r1, #1
    8308:	e000      	b.n	830c <z_reschedule+0x14>
    830a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    830c:	f011 0f01 	tst.w	r1, #1
    8310:	d01c      	beq.n	834c <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    8312:	4b1b      	ldr	r3, [pc, #108]	; (8380 <z_reschedule+0x88>)
    8314:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    8316:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    8318:	429a      	cmp	r2, r3
    831a:	d017      	beq.n	834c <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    831c:	4620      	mov	r0, r4
    831e:	f7ff f9df 	bl	76e0 <z_spin_unlock_valid>
    8322:	b118      	cbz	r0, 832c <z_reschedule+0x34>
	ret = arch_swap(key);
    8324:	4628      	mov	r0, r5
    8326:	f7fa fddf 	bl	2ee8 <arch_swap>
		z_swap(lock, key);
    832a:	e017      	b.n	835c <z_reschedule+0x64>
    832c:	4e15      	ldr	r6, [pc, #84]	; (8384 <z_reschedule+0x8c>)
    832e:	23d0      	movs	r3, #208	; 0xd0
    8330:	4632      	mov	r2, r6
    8332:	4915      	ldr	r1, [pc, #84]	; (8388 <z_reschedule+0x90>)
    8334:	4815      	ldr	r0, [pc, #84]	; (838c <z_reschedule+0x94>)
    8336:	f002 fbd3 	bl	aae0 <assert_print>
    833a:	4621      	mov	r1, r4
    833c:	4814      	ldr	r0, [pc, #80]	; (8390 <z_reschedule+0x98>)
    833e:	f002 fbcf 	bl	aae0 <assert_print>
    8342:	21d0      	movs	r1, #208	; 0xd0
    8344:	4630      	mov	r0, r6
    8346:	f002 fbc4 	bl	aad2 <assert_post_action>
    834a:	e7eb      	b.n	8324 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    834c:	4620      	mov	r0, r4
    834e:	f7ff f9c7 	bl	76e0 <z_spin_unlock_valid>
    8352:	b120      	cbz	r0, 835e <z_reschedule+0x66>
    8354:	f385 8811 	msr	BASEPRI, r5
    8358:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    835c:	bd70      	pop	{r4, r5, r6, pc}
    835e:	4e09      	ldr	r6, [pc, #36]	; (8384 <z_reschedule+0x8c>)
    8360:	23b9      	movs	r3, #185	; 0xb9
    8362:	4632      	mov	r2, r6
    8364:	4908      	ldr	r1, [pc, #32]	; (8388 <z_reschedule+0x90>)
    8366:	4809      	ldr	r0, [pc, #36]	; (838c <z_reschedule+0x94>)
    8368:	f002 fbba 	bl	aae0 <assert_print>
    836c:	4621      	mov	r1, r4
    836e:	4808      	ldr	r0, [pc, #32]	; (8390 <z_reschedule+0x98>)
    8370:	f002 fbb6 	bl	aae0 <assert_print>
    8374:	21b9      	movs	r1, #185	; 0xb9
    8376:	4630      	mov	r0, r6
    8378:	f002 fbab 	bl	aad2 <assert_post_action>
    837c:	e7ea      	b.n	8354 <z_reschedule+0x5c>
    837e:	bf00      	nop
    8380:	200050ac 	.word	0x200050ac
    8384:	0000c624 	.word	0x0000c624
    8388:	0000c654 	.word	0x0000c654
    838c:	0000c478 	.word	0x0000c478
    8390:	0000c66c 	.word	0x0000c66c

00008394 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8394:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8396:	2400      	movs	r4, #0
	__asm__ volatile(
    8398:	f04f 0320 	mov.w	r3, #32
    839c:	f3ef 8511 	mrs	r5, BASEPRI
    83a0:	f383 8812 	msr	BASEPRI_MAX, r3
    83a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83a8:	482f      	ldr	r0, [pc, #188]	; (8468 <k_sched_lock+0xd4>)
    83aa:	f7ff f989 	bl	76c0 <z_spin_lock_valid>
    83ae:	b118      	cbz	r0, 83b8 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    83b0:	482d      	ldr	r0, [pc, #180]	; (8468 <k_sched_lock+0xd4>)
    83b2:	f7ff f9a5 	bl	7700 <z_spin_lock_set_owner>
	return k;
    83b6:	e022      	b.n	83fe <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83b8:	4e2c      	ldr	r6, [pc, #176]	; (846c <k_sched_lock+0xd8>)
    83ba:	238e      	movs	r3, #142	; 0x8e
    83bc:	4632      	mov	r2, r6
    83be:	492c      	ldr	r1, [pc, #176]	; (8470 <k_sched_lock+0xdc>)
    83c0:	482c      	ldr	r0, [pc, #176]	; (8474 <k_sched_lock+0xe0>)
    83c2:	f002 fb8d 	bl	aae0 <assert_print>
    83c6:	4928      	ldr	r1, [pc, #160]	; (8468 <k_sched_lock+0xd4>)
    83c8:	482b      	ldr	r0, [pc, #172]	; (8478 <k_sched_lock+0xe4>)
    83ca:	f002 fb89 	bl	aae0 <assert_print>
    83ce:	218e      	movs	r1, #142	; 0x8e
    83d0:	4630      	mov	r0, r6
    83d2:	f002 fb7e 	bl	aad2 <assert_post_action>
    83d6:	e7eb      	b.n	83b0 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    83d8:	4b28      	ldr	r3, [pc, #160]	; (847c <k_sched_lock+0xe8>)
    83da:	689b      	ldr	r3, [r3, #8]
    83dc:	7bdb      	ldrb	r3, [r3, #15]
    83de:	2b01      	cmp	r3, #1
    83e0:	d022      	beq.n	8428 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    83e2:	4b26      	ldr	r3, [pc, #152]	; (847c <k_sched_lock+0xe8>)
    83e4:	689a      	ldr	r2, [r3, #8]
    83e6:	7bd3      	ldrb	r3, [r2, #15]
    83e8:	3b01      	subs	r3, #1
    83ea:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83ec:	481e      	ldr	r0, [pc, #120]	; (8468 <k_sched_lock+0xd4>)
    83ee:	f7ff f977 	bl	76e0 <z_spin_unlock_valid>
    83f2:	b340      	cbz	r0, 8446 <k_sched_lock+0xb2>
	__asm__ volatile(
    83f4:	f385 8811 	msr	BASEPRI, r5
    83f8:	f3bf 8f6f 	isb	sy
    83fc:	2401      	movs	r4, #1
    83fe:	2c00      	cmp	r4, #0
    8400:	d131      	bne.n	8466 <k_sched_lock+0xd2>
    8402:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8406:	2b00      	cmp	r3, #0
    8408:	d0e6      	beq.n	83d8 <k_sched_lock+0x44>
    840a:	4c1d      	ldr	r4, [pc, #116]	; (8480 <k_sched_lock+0xec>)
    840c:	23fd      	movs	r3, #253	; 0xfd
    840e:	4622      	mov	r2, r4
    8410:	491c      	ldr	r1, [pc, #112]	; (8484 <k_sched_lock+0xf0>)
    8412:	4818      	ldr	r0, [pc, #96]	; (8474 <k_sched_lock+0xe0>)
    8414:	f002 fb64 	bl	aae0 <assert_print>
    8418:	481b      	ldr	r0, [pc, #108]	; (8488 <k_sched_lock+0xf4>)
    841a:	f002 fb61 	bl	aae0 <assert_print>
    841e:	21fd      	movs	r1, #253	; 0xfd
    8420:	4620      	mov	r0, r4
    8422:	f002 fb56 	bl	aad2 <assert_post_action>
    8426:	e7d7      	b.n	83d8 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8428:	4c15      	ldr	r4, [pc, #84]	; (8480 <k_sched_lock+0xec>)
    842a:	23fe      	movs	r3, #254	; 0xfe
    842c:	4622      	mov	r2, r4
    842e:	4917      	ldr	r1, [pc, #92]	; (848c <k_sched_lock+0xf8>)
    8430:	4810      	ldr	r0, [pc, #64]	; (8474 <k_sched_lock+0xe0>)
    8432:	f002 fb55 	bl	aae0 <assert_print>
    8436:	4814      	ldr	r0, [pc, #80]	; (8488 <k_sched_lock+0xf4>)
    8438:	f002 fb52 	bl	aae0 <assert_print>
    843c:	21fe      	movs	r1, #254	; 0xfe
    843e:	4620      	mov	r0, r4
    8440:	f002 fb47 	bl	aad2 <assert_post_action>
    8444:	e7cd      	b.n	83e2 <k_sched_lock+0x4e>
    8446:	4c09      	ldr	r4, [pc, #36]	; (846c <k_sched_lock+0xd8>)
    8448:	23b9      	movs	r3, #185	; 0xb9
    844a:	4622      	mov	r2, r4
    844c:	4910      	ldr	r1, [pc, #64]	; (8490 <k_sched_lock+0xfc>)
    844e:	4809      	ldr	r0, [pc, #36]	; (8474 <k_sched_lock+0xe0>)
    8450:	f002 fb46 	bl	aae0 <assert_print>
    8454:	4904      	ldr	r1, [pc, #16]	; (8468 <k_sched_lock+0xd4>)
    8456:	480f      	ldr	r0, [pc, #60]	; (8494 <k_sched_lock+0x100>)
    8458:	f002 fb42 	bl	aae0 <assert_print>
    845c:	21b9      	movs	r1, #185	; 0xb9
    845e:	4620      	mov	r0, r4
    8460:	f002 fb37 	bl	aad2 <assert_post_action>
    8464:	e7c6      	b.n	83f4 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8466:	bd70      	pop	{r4, r5, r6, pc}
    8468:	200050e8 	.word	0x200050e8
    846c:	0000c624 	.word	0x0000c624
    8470:	0000c684 	.word	0x0000c684
    8474:	0000c478 	.word	0x0000c478
    8478:	0000c69c 	.word	0x0000c69c
    847c:	200050ac 	.word	0x200050ac
    8480:	0000de88 	.word	0x0000de88
    8484:	0000dd6c 	.word	0x0000dd6c
    8488:	0000deb4 	.word	0x0000deb4
    848c:	0000deb8 	.word	0x0000deb8
    8490:	0000c654 	.word	0x0000c654
    8494:	0000c66c 	.word	0x0000c66c

00008498 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    8498:	b538      	push	{r3, r4, r5, lr}
    849a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    849c:	4b0c      	ldr	r3, [pc, #48]	; (84d0 <z_priq_dumb_remove+0x38>)
    849e:	4299      	cmp	r1, r3
    84a0:	d007      	beq.n	84b2 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    84a2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    84a4:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    84a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    84a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    84aa:	2300      	movs	r3, #0
    84ac:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    84ae:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    84b0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    84b2:	4d08      	ldr	r5, [pc, #32]	; (84d4 <z_priq_dumb_remove+0x3c>)
    84b4:	f240 433d 	movw	r3, #1085	; 0x43d
    84b8:	462a      	mov	r2, r5
    84ba:	4907      	ldr	r1, [pc, #28]	; (84d8 <z_priq_dumb_remove+0x40>)
    84bc:	4807      	ldr	r0, [pc, #28]	; (84dc <z_priq_dumb_remove+0x44>)
    84be:	f002 fb0f 	bl	aae0 <assert_print>
    84c2:	f240 413d 	movw	r1, #1085	; 0x43d
    84c6:	4628      	mov	r0, r5
    84c8:	f002 fb03 	bl	aad2 <assert_post_action>
    84cc:	e7e9      	b.n	84a2 <z_priq_dumb_remove+0xa>
    84ce:	bf00      	nop
    84d0:	20004410 	.word	0x20004410
    84d4:	0000df5c 	.word	0x0000df5c
    84d8:	0000df98 	.word	0x0000df98
    84dc:	0000c478 	.word	0x0000c478

000084e0 <update_cache>:
{
    84e0:	b538      	push	{r3, r4, r5, lr}
    84e2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    84e4:	4819      	ldr	r0, [pc, #100]	; (854c <update_cache+0x6c>)
    84e6:	f003 fcd0 	bl	be8a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    84ea:	4605      	mov	r5, r0
    84ec:	b188      	cbz	r0, 8512 <update_cache+0x32>
	if (preempt_ok != 0) {
    84ee:	bb14      	cbnz	r4, 8536 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    84f0:	4b17      	ldr	r3, [pc, #92]	; (8550 <update_cache+0x70>)
    84f2:	689b      	ldr	r3, [r3, #8]
    84f4:	b183      	cbz	r3, 8518 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    84f6:	4b16      	ldr	r3, [pc, #88]	; (8550 <update_cache+0x70>)
    84f8:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    84fa:	7b5a      	ldrb	r2, [r3, #13]
    84fc:	f012 0f1f 	tst.w	r2, #31
    8500:	d119      	bne.n	8536 <update_cache+0x56>
	return node->next != NULL;
    8502:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8504:	b9ba      	cbnz	r2, 8536 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8506:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    8508:	2a7f      	cmp	r2, #127	; 0x7f
    850a:	d914      	bls.n	8536 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    850c:	4a10      	ldr	r2, [pc, #64]	; (8550 <update_cache+0x70>)
    850e:	61d3      	str	r3, [r2, #28]
    8510:	e01a      	b.n	8548 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8512:	4b0f      	ldr	r3, [pc, #60]	; (8550 <update_cache+0x70>)
    8514:	68dd      	ldr	r5, [r3, #12]
    8516:	e7ea      	b.n	84ee <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    8518:	4c0e      	ldr	r4, [pc, #56]	; (8554 <update_cache+0x74>)
    851a:	2389      	movs	r3, #137	; 0x89
    851c:	4622      	mov	r2, r4
    851e:	490e      	ldr	r1, [pc, #56]	; (8558 <update_cache+0x78>)
    8520:	480e      	ldr	r0, [pc, #56]	; (855c <update_cache+0x7c>)
    8522:	f002 fadd 	bl	aae0 <assert_print>
    8526:	480e      	ldr	r0, [pc, #56]	; (8560 <update_cache+0x80>)
    8528:	f002 fada 	bl	aae0 <assert_print>
    852c:	2189      	movs	r1, #137	; 0x89
    852e:	4620      	mov	r0, r4
    8530:	f002 facf 	bl	aad2 <assert_post_action>
    8534:	e7df      	b.n	84f6 <update_cache+0x16>
		if (thread != _current) {
    8536:	4b06      	ldr	r3, [pc, #24]	; (8550 <update_cache+0x70>)
    8538:	689b      	ldr	r3, [r3, #8]
    853a:	42ab      	cmp	r3, r5
    853c:	d002      	beq.n	8544 <update_cache+0x64>
			z_reset_time_slice(thread);
    853e:	4628      	mov	r0, r5
    8540:	f7ff fdf6 	bl	8130 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8544:	4b02      	ldr	r3, [pc, #8]	; (8550 <update_cache+0x70>)
    8546:	61dd      	str	r5, [r3, #28]
}
    8548:	bd38      	pop	{r3, r4, r5, pc}
    854a:	bf00      	nop
    854c:	200050cc 	.word	0x200050cc
    8550:	200050ac 	.word	0x200050ac
    8554:	0000df5c 	.word	0x0000df5c
    8558:	0000dfbc 	.word	0x0000dfbc
    855c:	0000c478 	.word	0x0000c478
    8560:	0000deb4 	.word	0x0000deb4

00008564 <move_thread_to_end_of_prio_q>:
{
    8564:	b538      	push	{r3, r4, r5, lr}
    8566:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    8568:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    856a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    856e:	2b00      	cmp	r3, #0
    8570:	db2b      	blt.n	85ca <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    8572:	7b6b      	ldrb	r3, [r5, #13]
    8574:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8578:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    857a:	4b22      	ldr	r3, [pc, #136]	; (8604 <move_thread_to_end_of_prio_q+0xa0>)
    857c:	429d      	cmp	r5, r3
    857e:	d02c      	beq.n	85da <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    8580:	4b21      	ldr	r3, [pc, #132]	; (8608 <move_thread_to_end_of_prio_q+0xa4>)
    8582:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8586:	429c      	cmp	r4, r3
    8588:	d039      	beq.n	85fe <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    858a:	b16c      	cbz	r4, 85a8 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    858c:	4621      	mov	r1, r4
    858e:	4628      	mov	r0, r5
    8590:	f003 fc5c 	bl	be4c <z_sched_prio_cmp>
    8594:	2800      	cmp	r0, #0
    8596:	dc2c      	bgt.n	85f2 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8598:	b134      	cbz	r4, 85a8 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    859a:	4b1b      	ldr	r3, [pc, #108]	; (8608 <move_thread_to_end_of_prio_q+0xa4>)
    859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    859e:	429c      	cmp	r4, r3
    85a0:	d002      	beq.n	85a8 <move_thread_to_end_of_prio_q+0x44>
    85a2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85a4:	2c00      	cmp	r4, #0
    85a6:	d1f0      	bne.n	858a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    85a8:	4b17      	ldr	r3, [pc, #92]	; (8608 <move_thread_to_end_of_prio_q+0xa4>)
    85aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    85ac:	f103 0120 	add.w	r1, r3, #32
    85b0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    85b2:	606a      	str	r2, [r5, #4]
	tail->next = node;
    85b4:	6015      	str	r5, [r2, #0]
	list->tail = node;
    85b6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    85b8:	4b13      	ldr	r3, [pc, #76]	; (8608 <move_thread_to_end_of_prio_q+0xa4>)
    85ba:	6898      	ldr	r0, [r3, #8]
    85bc:	42a8      	cmp	r0, r5
    85be:	bf14      	ite	ne
    85c0:	2000      	movne	r0, #0
    85c2:	2001      	moveq	r0, #1
    85c4:	f7ff ff8c 	bl	84e0 <update_cache>
}
    85c8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    85ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    85ce:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    85d0:	4601      	mov	r1, r0
    85d2:	480e      	ldr	r0, [pc, #56]	; (860c <move_thread_to_end_of_prio_q+0xa8>)
    85d4:	f7ff ff60 	bl	8498 <z_priq_dumb_remove>
}
    85d8:	e7cb      	b.n	8572 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    85da:	4c0d      	ldr	r4, [pc, #52]	; (8610 <move_thread_to_end_of_prio_q+0xac>)
    85dc:	23ba      	movs	r3, #186	; 0xba
    85de:	4622      	mov	r2, r4
    85e0:	490c      	ldr	r1, [pc, #48]	; (8614 <move_thread_to_end_of_prio_q+0xb0>)
    85e2:	480d      	ldr	r0, [pc, #52]	; (8618 <move_thread_to_end_of_prio_q+0xb4>)
    85e4:	f002 fa7c 	bl	aae0 <assert_print>
    85e8:	21ba      	movs	r1, #186	; 0xba
    85ea:	4620      	mov	r0, r4
    85ec:	f002 fa71 	bl	aad2 <assert_post_action>
    85f0:	e7c6      	b.n	8580 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    85f2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    85f4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    85f6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    85f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    85fa:	6065      	str	r5, [r4, #4]
}
    85fc:	e7dc      	b.n	85b8 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85fe:	2400      	movs	r4, #0
    8600:	e7c3      	b.n	858a <move_thread_to_end_of_prio_q+0x26>
    8602:	bf00      	nop
    8604:	20004410 	.word	0x20004410
    8608:	200050ac 	.word	0x200050ac
    860c:	200050cc 	.word	0x200050cc
    8610:	0000df5c 	.word	0x0000df5c
    8614:	0000df98 	.word	0x0000df98
    8618:	0000c478 	.word	0x0000c478

0000861c <slice_expired_locked>:
{
    861c:	b538      	push	{r3, r4, r5, lr}
    861e:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    8620:	4b07      	ldr	r3, [pc, #28]	; (8640 <slice_expired_locked+0x24>)
    8622:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    8624:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    8626:	f013 0f1f 	tst.w	r3, #31
    862a:	d004      	beq.n	8636 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    862c:	4628      	mov	r0, r5
    862e:	f7ff fd7f 	bl	8130 <z_reset_time_slice>
}
    8632:	4620      	mov	r0, r4
    8634:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    8636:	4628      	mov	r0, r5
    8638:	f7ff ff94 	bl	8564 <move_thread_to_end_of_prio_q>
    863c:	e7f6      	b.n	862c <slice_expired_locked+0x10>
    863e:	bf00      	nop
    8640:	200050ac 	.word	0x200050ac

00008644 <z_time_slice>:
{
    8644:	b570      	push	{r4, r5, r6, lr}
    8646:	4604      	mov	r4, r0
	__asm__ volatile(
    8648:	f04f 0320 	mov.w	r3, #32
    864c:	f3ef 8511 	mrs	r5, BASEPRI
    8650:	f383 8812 	msr	BASEPRI_MAX, r3
    8654:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8658:	4842      	ldr	r0, [pc, #264]	; (8764 <z_time_slice+0x120>)
    865a:	f7ff f831 	bl	76c0 <z_spin_lock_valid>
    865e:	b310      	cbz	r0, 86a6 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    8660:	4840      	ldr	r0, [pc, #256]	; (8764 <z_time_slice+0x120>)
    8662:	f7ff f84d 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8666:	462b      	mov	r3, r5
	if (pending_current == _current) {
    8668:	4a3f      	ldr	r2, [pc, #252]	; (8768 <z_time_slice+0x124>)
    866a:	6892      	ldr	r2, [r2, #8]
    866c:	493f      	ldr	r1, [pc, #252]	; (876c <z_time_slice+0x128>)
    866e:	6809      	ldr	r1, [r1, #0]
    8670:	428a      	cmp	r2, r1
    8672:	d028      	beq.n	86c6 <z_time_slice+0x82>
	pending_current = NULL;
    8674:	493d      	ldr	r1, [pc, #244]	; (876c <z_time_slice+0x128>)
    8676:	2000      	movs	r0, #0
    8678:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    867a:	493d      	ldr	r1, [pc, #244]	; (8770 <z_time_slice+0x12c>)
    867c:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    867e:	2900      	cmp	r1, #0
    8680:	d052      	beq.n	8728 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8682:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    8684:	297f      	cmp	r1, #127	; 0x7f
    8686:	d83a      	bhi.n	86fe <z_time_slice+0xba>
    8688:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    868a:	f011 0f1f 	tst.w	r1, #31
    868e:	d140      	bne.n	8712 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8690:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8694:	4937      	ldr	r1, [pc, #220]	; (8774 <z_time_slice+0x130>)
    8696:	6809      	ldr	r1, [r1, #0]
    8698:	4288      	cmp	r0, r1
    869a:	db3c      	blt.n	8716 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    869c:	4936      	ldr	r1, [pc, #216]	; (8778 <z_time_slice+0x134>)
    869e:	428a      	cmp	r2, r1
    86a0:	d03b      	beq.n	871a <z_time_slice+0xd6>
    86a2:	2201      	movs	r2, #1
    86a4:	e02c      	b.n	8700 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86a6:	4e35      	ldr	r6, [pc, #212]	; (877c <z_time_slice+0x138>)
    86a8:	238e      	movs	r3, #142	; 0x8e
    86aa:	4632      	mov	r2, r6
    86ac:	4934      	ldr	r1, [pc, #208]	; (8780 <z_time_slice+0x13c>)
    86ae:	4835      	ldr	r0, [pc, #212]	; (8784 <z_time_slice+0x140>)
    86b0:	f002 fa16 	bl	aae0 <assert_print>
    86b4:	492b      	ldr	r1, [pc, #172]	; (8764 <z_time_slice+0x120>)
    86b6:	4834      	ldr	r0, [pc, #208]	; (8788 <z_time_slice+0x144>)
    86b8:	f002 fa12 	bl	aae0 <assert_print>
    86bc:	218e      	movs	r1, #142	; 0x8e
    86be:	4630      	mov	r0, r6
    86c0:	f002 fa07 	bl	aad2 <assert_post_action>
    86c4:	e7cc      	b.n	8660 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    86c6:	4610      	mov	r0, r2
    86c8:	f7ff fd32 	bl	8130 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86cc:	4825      	ldr	r0, [pc, #148]	; (8764 <z_time_slice+0x120>)
    86ce:	f7ff f807 	bl	76e0 <z_spin_unlock_valid>
    86d2:	b120      	cbz	r0, 86de <z_time_slice+0x9a>
	__asm__ volatile(
    86d4:	f385 8811 	msr	BASEPRI, r5
    86d8:	f3bf 8f6f 	isb	sy
		return;
    86dc:	e030      	b.n	8740 <z_time_slice+0xfc>
    86de:	4c27      	ldr	r4, [pc, #156]	; (877c <z_time_slice+0x138>)
    86e0:	23b9      	movs	r3, #185	; 0xb9
    86e2:	4622      	mov	r2, r4
    86e4:	4929      	ldr	r1, [pc, #164]	; (878c <z_time_slice+0x148>)
    86e6:	4827      	ldr	r0, [pc, #156]	; (8784 <z_time_slice+0x140>)
    86e8:	f002 f9fa 	bl	aae0 <assert_print>
    86ec:	491d      	ldr	r1, [pc, #116]	; (8764 <z_time_slice+0x120>)
    86ee:	4828      	ldr	r0, [pc, #160]	; (8790 <z_time_slice+0x14c>)
    86f0:	f002 f9f6 	bl	aae0 <assert_print>
    86f4:	21b9      	movs	r1, #185	; 0xb9
    86f6:	4620      	mov	r0, r4
    86f8:	f002 f9eb 	bl	aad2 <assert_post_action>
    86fc:	e7ea      	b.n	86d4 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    86fe:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    8700:	b192      	cbz	r2, 8728 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    8702:	4a19      	ldr	r2, [pc, #100]	; (8768 <z_time_slice+0x124>)
    8704:	6910      	ldr	r0, [r2, #16]
    8706:	42a0      	cmp	r0, r4
    8708:	dd09      	ble.n	871e <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    870a:	1b00      	subs	r0, r0, r4
    870c:	4a16      	ldr	r2, [pc, #88]	; (8768 <z_time_slice+0x124>)
    870e:	6110      	str	r0, [r2, #16]
    8710:	e00d      	b.n	872e <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    8712:	2200      	movs	r2, #0
    8714:	e7f4      	b.n	8700 <z_time_slice+0xbc>
    8716:	2200      	movs	r2, #0
    8718:	e7f2      	b.n	8700 <z_time_slice+0xbc>
    871a:	2200      	movs	r2, #0
    871c:	e7f0      	b.n	8700 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    871e:	4628      	mov	r0, r5
    8720:	f7ff ff7c 	bl	861c <slice_expired_locked>
    8724:	4603      	mov	r3, r0
    8726:	e002      	b.n	872e <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    8728:	4a0f      	ldr	r2, [pc, #60]	; (8768 <z_time_slice+0x124>)
    872a:	2100      	movs	r1, #0
    872c:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    872e:	461c      	mov	r4, r3
    8730:	480c      	ldr	r0, [pc, #48]	; (8764 <z_time_slice+0x120>)
    8732:	f7fe ffd5 	bl	76e0 <z_spin_unlock_valid>
    8736:	b120      	cbz	r0, 8742 <z_time_slice+0xfe>
    8738:	f384 8811 	msr	BASEPRI, r4
    873c:	f3bf 8f6f 	isb	sy
}
    8740:	bd70      	pop	{r4, r5, r6, pc}
    8742:	4d0e      	ldr	r5, [pc, #56]	; (877c <z_time_slice+0x138>)
    8744:	23b9      	movs	r3, #185	; 0xb9
    8746:	462a      	mov	r2, r5
    8748:	4910      	ldr	r1, [pc, #64]	; (878c <z_time_slice+0x148>)
    874a:	480e      	ldr	r0, [pc, #56]	; (8784 <z_time_slice+0x140>)
    874c:	f002 f9c8 	bl	aae0 <assert_print>
    8750:	4904      	ldr	r1, [pc, #16]	; (8764 <z_time_slice+0x120>)
    8752:	480f      	ldr	r0, [pc, #60]	; (8790 <z_time_slice+0x14c>)
    8754:	f002 f9c4 	bl	aae0 <assert_print>
    8758:	21b9      	movs	r1, #185	; 0xb9
    875a:	4628      	mov	r0, r5
    875c:	f002 f9b9 	bl	aad2 <assert_post_action>
    8760:	e7ea      	b.n	8738 <z_time_slice+0xf4>
    8762:	bf00      	nop
    8764:	200050e8 	.word	0x200050e8
    8768:	200050ac 	.word	0x200050ac
    876c:	200050e4 	.word	0x200050e4
    8770:	200050f0 	.word	0x200050f0
    8774:	200050ec 	.word	0x200050ec
    8778:	20004410 	.word	0x20004410
    877c:	0000c624 	.word	0x0000c624
    8780:	0000c684 	.word	0x0000c684
    8784:	0000c478 	.word	0x0000c478
    8788:	0000c69c 	.word	0x0000c69c
    878c:	0000c654 	.word	0x0000c654
    8790:	0000c66c 	.word	0x0000c66c

00008794 <ready_thread>:
{
    8794:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    8796:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8798:	f990 200d 	ldrsb.w	r2, [r0, #13]
    879c:	2a00      	cmp	r2, #0
    879e:	db30      	blt.n	8802 <ready_thread+0x6e>
    87a0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    87a2:	f013 0f1f 	tst.w	r3, #31
    87a6:	d105      	bne.n	87b4 <ready_thread+0x20>
	return node->next != NULL;
    87a8:	6982      	ldr	r2, [r0, #24]
    87aa:	b10a      	cbz	r2, 87b0 <ready_thread+0x1c>
    87ac:	2200      	movs	r2, #0
    87ae:	e002      	b.n	87b6 <ready_thread+0x22>
    87b0:	2201      	movs	r2, #1
    87b2:	e000      	b.n	87b6 <ready_thread+0x22>
    87b4:	2200      	movs	r2, #0
    87b6:	b322      	cbz	r2, 8802 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    87b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87bc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    87be:	4b1b      	ldr	r3, [pc, #108]	; (882c <ready_thread+0x98>)
    87c0:	429c      	cmp	r4, r3
    87c2:	d01f      	beq.n	8804 <ready_thread+0x70>
	return list->head == list;
    87c4:	4b1a      	ldr	r3, [pc, #104]	; (8830 <ready_thread+0x9c>)
    87c6:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87ca:	429d      	cmp	r5, r3
    87cc:	d02c      	beq.n	8828 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    87ce:	b16d      	cbz	r5, 87ec <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    87d0:	4629      	mov	r1, r5
    87d2:	4620      	mov	r0, r4
    87d4:	f003 fb3a 	bl	be4c <z_sched_prio_cmp>
    87d8:	2800      	cmp	r0, #0
    87da:	dc1f      	bgt.n	881c <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    87dc:	b135      	cbz	r5, 87ec <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    87de:	4b14      	ldr	r3, [pc, #80]	; (8830 <ready_thread+0x9c>)
    87e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    87e2:	429d      	cmp	r5, r3
    87e4:	d002      	beq.n	87ec <ready_thread+0x58>
    87e6:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    87e8:	2d00      	cmp	r5, #0
    87ea:	d1f0      	bne.n	87ce <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    87ec:	4b10      	ldr	r3, [pc, #64]	; (8830 <ready_thread+0x9c>)
    87ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    87f0:	f103 0120 	add.w	r1, r3, #32
    87f4:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    87f6:	6062      	str	r2, [r4, #4]
	tail->next = node;
    87f8:	6014      	str	r4, [r2, #0]
	list->tail = node;
    87fa:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    87fc:	2000      	movs	r0, #0
    87fe:	f7ff fe6f 	bl	84e0 <update_cache>
}
    8802:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8804:	4d0b      	ldr	r5, [pc, #44]	; (8834 <ready_thread+0xa0>)
    8806:	23ba      	movs	r3, #186	; 0xba
    8808:	462a      	mov	r2, r5
    880a:	490b      	ldr	r1, [pc, #44]	; (8838 <ready_thread+0xa4>)
    880c:	480b      	ldr	r0, [pc, #44]	; (883c <ready_thread+0xa8>)
    880e:	f002 f967 	bl	aae0 <assert_print>
    8812:	21ba      	movs	r1, #186	; 0xba
    8814:	4628      	mov	r0, r5
    8816:	f002 f95c 	bl	aad2 <assert_post_action>
    881a:	e7d3      	b.n	87c4 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    881c:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    881e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8820:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8822:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8824:	606c      	str	r4, [r5, #4]
}
    8826:	e7e9      	b.n	87fc <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8828:	2500      	movs	r5, #0
    882a:	e7d0      	b.n	87ce <ready_thread+0x3a>
    882c:	20004410 	.word	0x20004410
    8830:	200050ac 	.word	0x200050ac
    8834:	0000df5c 	.word	0x0000df5c
    8838:	0000df98 	.word	0x0000df98
    883c:	0000c478 	.word	0x0000c478

00008840 <z_ready_thread>:
{
    8840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8842:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    8844:	2400      	movs	r4, #0
	__asm__ volatile(
    8846:	f04f 0320 	mov.w	r3, #32
    884a:	f3ef 8611 	mrs	r6, BASEPRI
    884e:	f383 8812 	msr	BASEPRI_MAX, r3
    8852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8856:	481e      	ldr	r0, [pc, #120]	; (88d0 <z_ready_thread+0x90>)
    8858:	f7fe ff32 	bl	76c0 <z_spin_lock_valid>
    885c:	b118      	cbz	r0, 8866 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    885e:	481c      	ldr	r0, [pc, #112]	; (88d0 <z_ready_thread+0x90>)
    8860:	f7fe ff4e 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8864:	e018      	b.n	8898 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8866:	4f1b      	ldr	r7, [pc, #108]	; (88d4 <z_ready_thread+0x94>)
    8868:	238e      	movs	r3, #142	; 0x8e
    886a:	463a      	mov	r2, r7
    886c:	491a      	ldr	r1, [pc, #104]	; (88d8 <z_ready_thread+0x98>)
    886e:	481b      	ldr	r0, [pc, #108]	; (88dc <z_ready_thread+0x9c>)
    8870:	f002 f936 	bl	aae0 <assert_print>
    8874:	4916      	ldr	r1, [pc, #88]	; (88d0 <z_ready_thread+0x90>)
    8876:	481a      	ldr	r0, [pc, #104]	; (88e0 <z_ready_thread+0xa0>)
    8878:	f002 f932 	bl	aae0 <assert_print>
    887c:	218e      	movs	r1, #142	; 0x8e
    887e:	4638      	mov	r0, r7
    8880:	f002 f927 	bl	aad2 <assert_post_action>
    8884:	e7eb      	b.n	885e <z_ready_thread+0x1e>
			ready_thread(thread);
    8886:	4628      	mov	r0, r5
    8888:	f7ff ff84 	bl	8794 <ready_thread>
    888c:	e00a      	b.n	88a4 <z_ready_thread+0x64>
	__asm__ volatile(
    888e:	f386 8811 	msr	BASEPRI, r6
    8892:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8896:	2401      	movs	r4, #1
    8898:	b9cc      	cbnz	r4, 88ce <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    889a:	4628      	mov	r0, r5
    889c:	f003 fad4 	bl	be48 <thread_active_elsewhere>
    88a0:	2800      	cmp	r0, #0
    88a2:	d0f0      	beq.n	8886 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88a4:	480a      	ldr	r0, [pc, #40]	; (88d0 <z_ready_thread+0x90>)
    88a6:	f7fe ff1b 	bl	76e0 <z_spin_unlock_valid>
    88aa:	2800      	cmp	r0, #0
    88ac:	d1ef      	bne.n	888e <z_ready_thread+0x4e>
    88ae:	4c09      	ldr	r4, [pc, #36]	; (88d4 <z_ready_thread+0x94>)
    88b0:	23b9      	movs	r3, #185	; 0xb9
    88b2:	4622      	mov	r2, r4
    88b4:	490b      	ldr	r1, [pc, #44]	; (88e4 <z_ready_thread+0xa4>)
    88b6:	4809      	ldr	r0, [pc, #36]	; (88dc <z_ready_thread+0x9c>)
    88b8:	f002 f912 	bl	aae0 <assert_print>
    88bc:	4904      	ldr	r1, [pc, #16]	; (88d0 <z_ready_thread+0x90>)
    88be:	480a      	ldr	r0, [pc, #40]	; (88e8 <z_ready_thread+0xa8>)
    88c0:	f002 f90e 	bl	aae0 <assert_print>
    88c4:	21b9      	movs	r1, #185	; 0xb9
    88c6:	4620      	mov	r0, r4
    88c8:	f002 f903 	bl	aad2 <assert_post_action>
    88cc:	e7df      	b.n	888e <z_ready_thread+0x4e>
}
    88ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88d0:	200050e8 	.word	0x200050e8
    88d4:	0000c624 	.word	0x0000c624
    88d8:	0000c684 	.word	0x0000c684
    88dc:	0000c478 	.word	0x0000c478
    88e0:	0000c69c 	.word	0x0000c69c
    88e4:	0000c654 	.word	0x0000c654
    88e8:	0000c66c 	.word	0x0000c66c

000088ec <z_sched_start>:
{
    88ec:	b570      	push	{r4, r5, r6, lr}
    88ee:	4604      	mov	r4, r0
	__asm__ volatile(
    88f0:	f04f 0320 	mov.w	r3, #32
    88f4:	f3ef 8511 	mrs	r5, BASEPRI
    88f8:	f383 8812 	msr	BASEPRI_MAX, r3
    88fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8900:	481f      	ldr	r0, [pc, #124]	; (8980 <z_sched_start+0x94>)
    8902:	f7fe fedd 	bl	76c0 <z_spin_lock_valid>
    8906:	b188      	cbz	r0, 892c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    8908:	481d      	ldr	r0, [pc, #116]	; (8980 <z_sched_start+0x94>)
    890a:	f7fe fef9 	bl	7700 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    890e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    8910:	f013 0f04 	tst.w	r3, #4
    8914:	d01a      	beq.n	894c <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8916:	f023 0304 	bic.w	r3, r3, #4
    891a:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    891c:	4620      	mov	r0, r4
    891e:	f7ff ff39 	bl	8794 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8922:	4629      	mov	r1, r5
    8924:	4816      	ldr	r0, [pc, #88]	; (8980 <z_sched_start+0x94>)
    8926:	f7ff fce7 	bl	82f8 <z_reschedule>
}
    892a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    892c:	4e15      	ldr	r6, [pc, #84]	; (8984 <z_sched_start+0x98>)
    892e:	238e      	movs	r3, #142	; 0x8e
    8930:	4632      	mov	r2, r6
    8932:	4915      	ldr	r1, [pc, #84]	; (8988 <z_sched_start+0x9c>)
    8934:	4815      	ldr	r0, [pc, #84]	; (898c <z_sched_start+0xa0>)
    8936:	f002 f8d3 	bl	aae0 <assert_print>
    893a:	4911      	ldr	r1, [pc, #68]	; (8980 <z_sched_start+0x94>)
    893c:	4814      	ldr	r0, [pc, #80]	; (8990 <z_sched_start+0xa4>)
    893e:	f002 f8cf 	bl	aae0 <assert_print>
    8942:	218e      	movs	r1, #142	; 0x8e
    8944:	4630      	mov	r0, r6
    8946:	f002 f8c4 	bl	aad2 <assert_post_action>
    894a:	e7dd      	b.n	8908 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    894c:	480c      	ldr	r0, [pc, #48]	; (8980 <z_sched_start+0x94>)
    894e:	f7fe fec7 	bl	76e0 <z_spin_unlock_valid>
    8952:	b120      	cbz	r0, 895e <z_sched_start+0x72>
	__asm__ volatile(
    8954:	f385 8811 	msr	BASEPRI, r5
    8958:	f3bf 8f6f 	isb	sy
		return;
    895c:	e7e5      	b.n	892a <z_sched_start+0x3e>
    895e:	4c09      	ldr	r4, [pc, #36]	; (8984 <z_sched_start+0x98>)
    8960:	23b9      	movs	r3, #185	; 0xb9
    8962:	4622      	mov	r2, r4
    8964:	490b      	ldr	r1, [pc, #44]	; (8994 <z_sched_start+0xa8>)
    8966:	4809      	ldr	r0, [pc, #36]	; (898c <z_sched_start+0xa0>)
    8968:	f002 f8ba 	bl	aae0 <assert_print>
    896c:	4904      	ldr	r1, [pc, #16]	; (8980 <z_sched_start+0x94>)
    896e:	480a      	ldr	r0, [pc, #40]	; (8998 <z_sched_start+0xac>)
    8970:	f002 f8b6 	bl	aae0 <assert_print>
    8974:	21b9      	movs	r1, #185	; 0xb9
    8976:	4620      	mov	r0, r4
    8978:	f002 f8ab 	bl	aad2 <assert_post_action>
    897c:	e7ea      	b.n	8954 <z_sched_start+0x68>
    897e:	bf00      	nop
    8980:	200050e8 	.word	0x200050e8
    8984:	0000c624 	.word	0x0000c624
    8988:	0000c684 	.word	0x0000c684
    898c:	0000c478 	.word	0x0000c478
    8990:	0000c69c 	.word	0x0000c69c
    8994:	0000c654 	.word	0x0000c654
    8998:	0000c66c 	.word	0x0000c66c

0000899c <z_thread_timeout>:
{
    899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89a0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    89a2:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    89a6:	2500      	movs	r5, #0
	__asm__ volatile(
    89a8:	f04f 0320 	mov.w	r3, #32
    89ac:	f3ef 8711 	mrs	r7, BASEPRI
    89b0:	f383 8812 	msr	BASEPRI_MAX, r3
    89b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89b8:	482b      	ldr	r0, [pc, #172]	; (8a68 <z_thread_timeout+0xcc>)
    89ba:	f7fe fe81 	bl	76c0 <z_spin_lock_valid>
    89be:	b118      	cbz	r0, 89c8 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    89c0:	4829      	ldr	r0, [pc, #164]	; (8a68 <z_thread_timeout+0xcc>)
    89c2:	f7fe fe9d 	bl	7700 <z_spin_lock_set_owner>
	return k;
    89c6:	e026      	b.n	8a16 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89c8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8a6c <z_thread_timeout+0xd0>
    89cc:	238e      	movs	r3, #142	; 0x8e
    89ce:	4642      	mov	r2, r8
    89d0:	4927      	ldr	r1, [pc, #156]	; (8a70 <z_thread_timeout+0xd4>)
    89d2:	4828      	ldr	r0, [pc, #160]	; (8a74 <z_thread_timeout+0xd8>)
    89d4:	f002 f884 	bl	aae0 <assert_print>
    89d8:	4923      	ldr	r1, [pc, #140]	; (8a68 <z_thread_timeout+0xcc>)
    89da:	4827      	ldr	r0, [pc, #156]	; (8a78 <z_thread_timeout+0xdc>)
    89dc:	f002 f880 	bl	aae0 <assert_print>
    89e0:	218e      	movs	r1, #142	; 0x8e
    89e2:	4640      	mov	r0, r8
    89e4:	f002 f875 	bl	aad2 <assert_post_action>
    89e8:	e7ea      	b.n	89c0 <z_thread_timeout+0x24>
    89ea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    89ee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    89f2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    89f6:	f023 0310 	bic.w	r3, r3, #16
    89fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    89fe:	4630      	mov	r0, r6
    8a00:	f7ff fec8 	bl	8794 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a04:	4818      	ldr	r0, [pc, #96]	; (8a68 <z_thread_timeout+0xcc>)
    8a06:	f7fe fe6b 	bl	76e0 <z_spin_unlock_valid>
    8a0a:	b1d8      	cbz	r0, 8a44 <z_thread_timeout+0xa8>
	__asm__ volatile(
    8a0c:	f387 8811 	msr	BASEPRI, r7
    8a10:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8a14:	2501      	movs	r5, #1
    8a16:	bb2d      	cbnz	r5, 8a64 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    8a18:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    8a1c:	f013 0f28 	tst.w	r3, #40	; 0x28
    8a20:	d1f0      	bne.n	8a04 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    8a22:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8a26:	2b00      	cmp	r3, #0
    8a28:	d0df      	beq.n	89ea <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8a2a:	4630      	mov	r0, r6
    8a2c:	f7ff fb56 	bl	80dc <pended_on_thread>
    8a30:	4631      	mov	r1, r6
    8a32:	f7ff fd31 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8a36:	7b73      	ldrb	r3, [r6, #13]
    8a38:	f023 0302 	bic.w	r3, r3, #2
    8a3c:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    8a3e:	2300      	movs	r3, #0
    8a40:	60b3      	str	r3, [r6, #8]
}
    8a42:	e7d2      	b.n	89ea <z_thread_timeout+0x4e>
    8a44:	4d09      	ldr	r5, [pc, #36]	; (8a6c <z_thread_timeout+0xd0>)
    8a46:	23b9      	movs	r3, #185	; 0xb9
    8a48:	462a      	mov	r2, r5
    8a4a:	490c      	ldr	r1, [pc, #48]	; (8a7c <z_thread_timeout+0xe0>)
    8a4c:	4809      	ldr	r0, [pc, #36]	; (8a74 <z_thread_timeout+0xd8>)
    8a4e:	f002 f847 	bl	aae0 <assert_print>
    8a52:	4905      	ldr	r1, [pc, #20]	; (8a68 <z_thread_timeout+0xcc>)
    8a54:	480a      	ldr	r0, [pc, #40]	; (8a80 <z_thread_timeout+0xe4>)
    8a56:	f002 f843 	bl	aae0 <assert_print>
    8a5a:	21b9      	movs	r1, #185	; 0xb9
    8a5c:	4628      	mov	r0, r5
    8a5e:	f002 f838 	bl	aad2 <assert_post_action>
    8a62:	e7d3      	b.n	8a0c <z_thread_timeout+0x70>
}
    8a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a68:	200050e8 	.word	0x200050e8
    8a6c:	0000c624 	.word	0x0000c624
    8a70:	0000c684 	.word	0x0000c684
    8a74:	0000c478 	.word	0x0000c478
    8a78:	0000c69c 	.word	0x0000c69c
    8a7c:	0000c654 	.word	0x0000c654
    8a80:	0000c66c 	.word	0x0000c66c

00008a84 <unready_thread>:
{
    8a84:	b510      	push	{r4, lr}
    8a86:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8a88:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8a8a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8a8e:	2b00      	cmp	r3, #0
    8a90:	db08      	blt.n	8aa4 <unready_thread+0x20>
	update_cache(thread == _current);
    8a92:	4b08      	ldr	r3, [pc, #32]	; (8ab4 <unready_thread+0x30>)
    8a94:	6898      	ldr	r0, [r3, #8]
    8a96:	42a0      	cmp	r0, r4
    8a98:	bf14      	ite	ne
    8a9a:	2000      	movne	r0, #0
    8a9c:	2001      	moveq	r0, #1
    8a9e:	f7ff fd1f 	bl	84e0 <update_cache>
}
    8aa2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8aa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8aa8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8aaa:	4601      	mov	r1, r0
    8aac:	4802      	ldr	r0, [pc, #8]	; (8ab8 <unready_thread+0x34>)
    8aae:	f7ff fcf3 	bl	8498 <z_priq_dumb_remove>
}
    8ab2:	e7ee      	b.n	8a92 <unready_thread+0xe>
    8ab4:	200050ac 	.word	0x200050ac
    8ab8:	200050cc 	.word	0x200050cc

00008abc <add_to_waitq_locked>:
{
    8abc:	b570      	push	{r4, r5, r6, lr}
    8abe:	4605      	mov	r5, r0
    8ac0:	460e      	mov	r6, r1
	unready_thread(thread);
    8ac2:	f7ff ffdf 	bl	8a84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8ac6:	7b6b      	ldrb	r3, [r5, #13]
    8ac8:	f043 0302 	orr.w	r3, r3, #2
    8acc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8ace:	b1ce      	cbz	r6, 8b04 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8ad0:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8ad2:	4b17      	ldr	r3, [pc, #92]	; (8b30 <add_to_waitq_locked+0x74>)
    8ad4:	429d      	cmp	r5, r3
    8ad6:	d016      	beq.n	8b06 <add_to_waitq_locked+0x4a>
	return list->head == list;
    8ad8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ada:	42a6      	cmp	r6, r4
    8adc:	d025      	beq.n	8b2a <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ade:	b164      	cbz	r4, 8afa <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8ae0:	4621      	mov	r1, r4
    8ae2:	4628      	mov	r0, r5
    8ae4:	f003 f9b2 	bl	be4c <z_sched_prio_cmp>
    8ae8:	2800      	cmp	r0, #0
    8aea:	dc18      	bgt.n	8b1e <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8aec:	b12c      	cbz	r4, 8afa <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    8aee:	6873      	ldr	r3, [r6, #4]
    8af0:	429c      	cmp	r4, r3
    8af2:	d002      	beq.n	8afa <add_to_waitq_locked+0x3e>
    8af4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8af6:	2c00      	cmp	r4, #0
    8af8:	d1f1      	bne.n	8ade <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8afa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8afc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8afe:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8b00:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8b02:	6075      	str	r5, [r6, #4]
}
    8b04:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8b06:	4c0b      	ldr	r4, [pc, #44]	; (8b34 <add_to_waitq_locked+0x78>)
    8b08:	23ba      	movs	r3, #186	; 0xba
    8b0a:	4622      	mov	r2, r4
    8b0c:	490a      	ldr	r1, [pc, #40]	; (8b38 <add_to_waitq_locked+0x7c>)
    8b0e:	480b      	ldr	r0, [pc, #44]	; (8b3c <add_to_waitq_locked+0x80>)
    8b10:	f001 ffe6 	bl	aae0 <assert_print>
    8b14:	21ba      	movs	r1, #186	; 0xba
    8b16:	4620      	mov	r0, r4
    8b18:	f001 ffdb 	bl	aad2 <assert_post_action>
    8b1c:	e7dc      	b.n	8ad8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8b1e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8b20:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8b22:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8b24:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8b26:	6065      	str	r5, [r4, #4]
}
    8b28:	e7ec      	b.n	8b04 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b2a:	2400      	movs	r4, #0
    8b2c:	e7d7      	b.n	8ade <add_to_waitq_locked+0x22>
    8b2e:	bf00      	nop
    8b30:	20004410 	.word	0x20004410
    8b34:	0000df5c 	.word	0x0000df5c
    8b38:	0000df98 	.word	0x0000df98
    8b3c:	0000c478 	.word	0x0000c478

00008b40 <pend>:
{
    8b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b44:	4605      	mov	r5, r0
    8b46:	460e      	mov	r6, r1
    8b48:	4691      	mov	r9, r2
    8b4a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    8b4c:	2400      	movs	r4, #0
	__asm__ volatile(
    8b4e:	f04f 0320 	mov.w	r3, #32
    8b52:	f3ef 8711 	mrs	r7, BASEPRI
    8b56:	f383 8812 	msr	BASEPRI_MAX, r3
    8b5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b5e:	481f      	ldr	r0, [pc, #124]	; (8bdc <pend+0x9c>)
    8b60:	f7fe fdae 	bl	76c0 <z_spin_lock_valid>
    8b64:	b118      	cbz	r0, 8b6e <pend+0x2e>
	z_spin_lock_set_owner(l);
    8b66:	481d      	ldr	r0, [pc, #116]	; (8bdc <pend+0x9c>)
    8b68:	f7fe fdca 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8b6c:	e015      	b.n	8b9a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b6e:	f8df a070 	ldr.w	sl, [pc, #112]	; 8be0 <pend+0xa0>
    8b72:	238e      	movs	r3, #142	; 0x8e
    8b74:	4652      	mov	r2, sl
    8b76:	491b      	ldr	r1, [pc, #108]	; (8be4 <pend+0xa4>)
    8b78:	481b      	ldr	r0, [pc, #108]	; (8be8 <pend+0xa8>)
    8b7a:	f001 ffb1 	bl	aae0 <assert_print>
    8b7e:	4917      	ldr	r1, [pc, #92]	; (8bdc <pend+0x9c>)
    8b80:	481a      	ldr	r0, [pc, #104]	; (8bec <pend+0xac>)
    8b82:	f001 ffad 	bl	aae0 <assert_print>
    8b86:	218e      	movs	r1, #142	; 0x8e
    8b88:	4650      	mov	r0, sl
    8b8a:	f001 ffa2 	bl	aad2 <assert_post_action>
    8b8e:	e7ea      	b.n	8b66 <pend+0x26>
	__asm__ volatile(
    8b90:	f387 8811 	msr	BASEPRI, r7
    8b94:	f3bf 8f6f 	isb	sy
    8b98:	2401      	movs	r4, #1
    8b9a:	b9c4      	cbnz	r4, 8bce <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    8b9c:	4631      	mov	r1, r6
    8b9e:	4628      	mov	r0, r5
    8ba0:	f7ff ff8c 	bl	8abc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ba4:	480d      	ldr	r0, [pc, #52]	; (8bdc <pend+0x9c>)
    8ba6:	f7fe fd9b 	bl	76e0 <z_spin_unlock_valid>
    8baa:	2800      	cmp	r0, #0
    8bac:	d1f0      	bne.n	8b90 <pend+0x50>
    8bae:	4c0c      	ldr	r4, [pc, #48]	; (8be0 <pend+0xa0>)
    8bb0:	23b9      	movs	r3, #185	; 0xb9
    8bb2:	4622      	mov	r2, r4
    8bb4:	490e      	ldr	r1, [pc, #56]	; (8bf0 <pend+0xb0>)
    8bb6:	480c      	ldr	r0, [pc, #48]	; (8be8 <pend+0xa8>)
    8bb8:	f001 ff92 	bl	aae0 <assert_print>
    8bbc:	4907      	ldr	r1, [pc, #28]	; (8bdc <pend+0x9c>)
    8bbe:	480d      	ldr	r0, [pc, #52]	; (8bf4 <pend+0xb4>)
    8bc0:	f001 ff8e 	bl	aae0 <assert_print>
    8bc4:	21b9      	movs	r1, #185	; 0xb9
    8bc6:	4620      	mov	r0, r4
    8bc8:	f001 ff83 	bl	aad2 <assert_post_action>
    8bcc:	e7e0      	b.n	8b90 <pend+0x50>
	add_thread_timeout(thread, timeout);
    8bce:	464a      	mov	r2, r9
    8bd0:	4643      	mov	r3, r8
    8bd2:	4628      	mov	r0, r5
    8bd4:	f7ff fa9c 	bl	8110 <add_thread_timeout>
}
    8bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8bdc:	200050e8 	.word	0x200050e8
    8be0:	0000c624 	.word	0x0000c624
    8be4:	0000c684 	.word	0x0000c684
    8be8:	0000c478 	.word	0x0000c478
    8bec:	0000c69c 	.word	0x0000c69c
    8bf0:	0000c654 	.word	0x0000c654
    8bf4:	0000c66c 	.word	0x0000c66c

00008bf8 <z_pend_curr>:
{
    8bf8:	b570      	push	{r4, r5, r6, lr}
    8bfa:	4604      	mov	r4, r0
    8bfc:	460d      	mov	r5, r1
    8bfe:	4611      	mov	r1, r2
	pending_current = _current;
    8c00:	4b0f      	ldr	r3, [pc, #60]	; (8c40 <z_pend_curr+0x48>)
    8c02:	6898      	ldr	r0, [r3, #8]
    8c04:	4b0f      	ldr	r3, [pc, #60]	; (8c44 <z_pend_curr+0x4c>)
    8c06:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8c0c:	f7ff ff98 	bl	8b40 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c10:	4620      	mov	r0, r4
    8c12:	f7fe fd65 	bl	76e0 <z_spin_unlock_valid>
    8c16:	b118      	cbz	r0, 8c20 <z_pend_curr+0x28>
    8c18:	4628      	mov	r0, r5
    8c1a:	f7fa f965 	bl	2ee8 <arch_swap>
}
    8c1e:	bd70      	pop	{r4, r5, r6, pc}
    8c20:	4e09      	ldr	r6, [pc, #36]	; (8c48 <z_pend_curr+0x50>)
    8c22:	23d0      	movs	r3, #208	; 0xd0
    8c24:	4632      	mov	r2, r6
    8c26:	4909      	ldr	r1, [pc, #36]	; (8c4c <z_pend_curr+0x54>)
    8c28:	4809      	ldr	r0, [pc, #36]	; (8c50 <z_pend_curr+0x58>)
    8c2a:	f001 ff59 	bl	aae0 <assert_print>
    8c2e:	4621      	mov	r1, r4
    8c30:	4808      	ldr	r0, [pc, #32]	; (8c54 <z_pend_curr+0x5c>)
    8c32:	f001 ff55 	bl	aae0 <assert_print>
    8c36:	21d0      	movs	r1, #208	; 0xd0
    8c38:	4630      	mov	r0, r6
    8c3a:	f001 ff4a 	bl	aad2 <assert_post_action>
    8c3e:	e7eb      	b.n	8c18 <z_pend_curr+0x20>
    8c40:	200050ac 	.word	0x200050ac
    8c44:	200050e4 	.word	0x200050e4
    8c48:	0000c624 	.word	0x0000c624
    8c4c:	0000c654 	.word	0x0000c654
    8c50:	0000c478 	.word	0x0000c478
    8c54:	0000c66c 	.word	0x0000c66c

00008c58 <z_set_prio>:
{
    8c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c5c:	4604      	mov	r4, r0
    8c5e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    8c60:	2500      	movs	r5, #0
	__asm__ volatile(
    8c62:	f04f 0320 	mov.w	r3, #32
    8c66:	f3ef 8811 	mrs	r8, BASEPRI
    8c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c72:	4844      	ldr	r0, [pc, #272]	; (8d84 <z_set_prio+0x12c>)
    8c74:	f7fe fd24 	bl	76c0 <z_spin_lock_valid>
    8c78:	b120      	cbz	r0, 8c84 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    8c7a:	4842      	ldr	r0, [pc, #264]	; (8d84 <z_set_prio+0x12c>)
    8c7c:	f7fe fd40 	bl	7700 <z_spin_lock_set_owner>
	bool need_sched = 0;
    8c80:	2700      	movs	r7, #0
	return k;
    8c82:	e01d      	b.n	8cc0 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c84:	4f40      	ldr	r7, [pc, #256]	; (8d88 <z_set_prio+0x130>)
    8c86:	238e      	movs	r3, #142	; 0x8e
    8c88:	463a      	mov	r2, r7
    8c8a:	4940      	ldr	r1, [pc, #256]	; (8d8c <z_set_prio+0x134>)
    8c8c:	4840      	ldr	r0, [pc, #256]	; (8d90 <z_set_prio+0x138>)
    8c8e:	f001 ff27 	bl	aae0 <assert_print>
    8c92:	493c      	ldr	r1, [pc, #240]	; (8d84 <z_set_prio+0x12c>)
    8c94:	483f      	ldr	r0, [pc, #252]	; (8d94 <z_set_prio+0x13c>)
    8c96:	f001 ff23 	bl	aae0 <assert_print>
    8c9a:	218e      	movs	r1, #142	; 0x8e
    8c9c:	4638      	mov	r0, r7
    8c9e:	f001 ff18 	bl	aad2 <assert_post_action>
    8ca2:	e7ea      	b.n	8c7a <z_set_prio+0x22>
		if (need_sched) {
    8ca4:	f013 0701 	ands.w	r7, r3, #1
    8ca8:	d116      	bne.n	8cd8 <z_set_prio+0x80>
			thread->base.prio = prio;
    8caa:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cac:	4835      	ldr	r0, [pc, #212]	; (8d84 <z_set_prio+0x12c>)
    8cae:	f7fe fd17 	bl	76e0 <z_spin_unlock_valid>
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d053      	beq.n	8d5e <z_set_prio+0x106>
	__asm__ volatile(
    8cb6:	f388 8811 	msr	BASEPRI, r8
    8cba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8cbe:	2501      	movs	r5, #1
    8cc0:	462b      	mov	r3, r5
    8cc2:	2d00      	cmp	r5, #0
    8cc4:	d15b      	bne.n	8d7e <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    8cc6:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8cc8:	f012 0f1f 	tst.w	r2, #31
    8ccc:	d1ea      	bne.n	8ca4 <z_set_prio+0x4c>
	return node->next != NULL;
    8cce:	69a1      	ldr	r1, [r4, #24]
    8cd0:	2900      	cmp	r1, #0
    8cd2:	d1e7      	bne.n	8ca4 <z_set_prio+0x4c>
    8cd4:	2301      	movs	r3, #1
    8cd6:	e7e5      	b.n	8ca4 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8cdc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8cde:	4621      	mov	r1, r4
    8ce0:	482d      	ldr	r0, [pc, #180]	; (8d98 <z_set_prio+0x140>)
    8ce2:	f7ff fbd9 	bl	8498 <z_priq_dumb_remove>
				thread->base.prio = prio;
    8ce6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8ce8:	7b63      	ldrb	r3, [r4, #13]
    8cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8cee:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8cf0:	4b2a      	ldr	r3, [pc, #168]	; (8d9c <z_set_prio+0x144>)
    8cf2:	429c      	cmp	r4, r3
    8cf4:	d01f      	beq.n	8d36 <z_set_prio+0xde>
	return list->head == list;
    8cf6:	4b2a      	ldr	r3, [pc, #168]	; (8da0 <z_set_prio+0x148>)
    8cf8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8cfc:	429d      	cmp	r5, r3
    8cfe:	d02c      	beq.n	8d5a <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d00:	b16d      	cbz	r5, 8d1e <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8d02:	4629      	mov	r1, r5
    8d04:	4620      	mov	r0, r4
    8d06:	f003 f8a1 	bl	be4c <z_sched_prio_cmp>
    8d0a:	2800      	cmp	r0, #0
    8d0c:	dc1f      	bgt.n	8d4e <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d0e:	b135      	cbz	r5, 8d1e <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    8d10:	4b23      	ldr	r3, [pc, #140]	; (8da0 <z_set_prio+0x148>)
    8d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d14:	429d      	cmp	r5, r3
    8d16:	d002      	beq.n	8d1e <z_set_prio+0xc6>
    8d18:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d1a:	2d00      	cmp	r5, #0
    8d1c:	d1f0      	bne.n	8d00 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    8d1e:	4b20      	ldr	r3, [pc, #128]	; (8da0 <z_set_prio+0x148>)
    8d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8d22:	f103 0120 	add.w	r1, r3, #32
    8d26:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8d28:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8d2a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8d2c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    8d2e:	2001      	movs	r0, #1
    8d30:	f7ff fbd6 	bl	84e0 <update_cache>
    8d34:	e7ba      	b.n	8cac <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8d36:	4d1b      	ldr	r5, [pc, #108]	; (8da4 <z_set_prio+0x14c>)
    8d38:	23ba      	movs	r3, #186	; 0xba
    8d3a:	462a      	mov	r2, r5
    8d3c:	491a      	ldr	r1, [pc, #104]	; (8da8 <z_set_prio+0x150>)
    8d3e:	4814      	ldr	r0, [pc, #80]	; (8d90 <z_set_prio+0x138>)
    8d40:	f001 fece 	bl	aae0 <assert_print>
    8d44:	21ba      	movs	r1, #186	; 0xba
    8d46:	4628      	mov	r0, r5
    8d48:	f001 fec3 	bl	aad2 <assert_post_action>
    8d4c:	e7d3      	b.n	8cf6 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    8d4e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8d50:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8d52:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8d54:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8d56:	606c      	str	r4, [r5, #4]
}
    8d58:	e7e9      	b.n	8d2e <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d5a:	2500      	movs	r5, #0
    8d5c:	e7d0      	b.n	8d00 <z_set_prio+0xa8>
    8d5e:	4d0a      	ldr	r5, [pc, #40]	; (8d88 <z_set_prio+0x130>)
    8d60:	23b9      	movs	r3, #185	; 0xb9
    8d62:	462a      	mov	r2, r5
    8d64:	4911      	ldr	r1, [pc, #68]	; (8dac <z_set_prio+0x154>)
    8d66:	480a      	ldr	r0, [pc, #40]	; (8d90 <z_set_prio+0x138>)
    8d68:	f001 feba 	bl	aae0 <assert_print>
    8d6c:	4905      	ldr	r1, [pc, #20]	; (8d84 <z_set_prio+0x12c>)
    8d6e:	4810      	ldr	r0, [pc, #64]	; (8db0 <z_set_prio+0x158>)
    8d70:	f001 feb6 	bl	aae0 <assert_print>
    8d74:	21b9      	movs	r1, #185	; 0xb9
    8d76:	4628      	mov	r0, r5
    8d78:	f001 feab 	bl	aad2 <assert_post_action>
    8d7c:	e79b      	b.n	8cb6 <z_set_prio+0x5e>
}
    8d7e:	4638      	mov	r0, r7
    8d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d84:	200050e8 	.word	0x200050e8
    8d88:	0000c624 	.word	0x0000c624
    8d8c:	0000c684 	.word	0x0000c684
    8d90:	0000c478 	.word	0x0000c478
    8d94:	0000c69c 	.word	0x0000c69c
    8d98:	200050cc 	.word	0x200050cc
    8d9c:	20004410 	.word	0x20004410
    8da0:	200050ac 	.word	0x200050ac
    8da4:	0000df5c 	.word	0x0000df5c
    8da8:	0000df98 	.word	0x0000df98
    8dac:	0000c654 	.word	0x0000c654
    8db0:	0000c66c 	.word	0x0000c66c

00008db4 <z_impl_k_thread_suspend>:
{
    8db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8db6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8db8:	3018      	adds	r0, #24
    8dba:	f000 fe7b 	bl	9ab4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    8dbe:	2500      	movs	r5, #0
	__asm__ volatile(
    8dc0:	f04f 0320 	mov.w	r3, #32
    8dc4:	f3ef 8611 	mrs	r6, BASEPRI
    8dc8:	f383 8812 	msr	BASEPRI_MAX, r3
    8dcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8dd0:	482d      	ldr	r0, [pc, #180]	; (8e88 <z_impl_k_thread_suspend+0xd4>)
    8dd2:	f7fe fc75 	bl	76c0 <z_spin_lock_valid>
    8dd6:	b118      	cbz	r0, 8de0 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    8dd8:	482b      	ldr	r0, [pc, #172]	; (8e88 <z_impl_k_thread_suspend+0xd4>)
    8dda:	f7fe fc91 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8dde:	e01c      	b.n	8e1a <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8de0:	4f2a      	ldr	r7, [pc, #168]	; (8e8c <z_impl_k_thread_suspend+0xd8>)
    8de2:	238e      	movs	r3, #142	; 0x8e
    8de4:	463a      	mov	r2, r7
    8de6:	492a      	ldr	r1, [pc, #168]	; (8e90 <z_impl_k_thread_suspend+0xdc>)
    8de8:	482a      	ldr	r0, [pc, #168]	; (8e94 <z_impl_k_thread_suspend+0xe0>)
    8dea:	f001 fe79 	bl	aae0 <assert_print>
    8dee:	4926      	ldr	r1, [pc, #152]	; (8e88 <z_impl_k_thread_suspend+0xd4>)
    8df0:	4829      	ldr	r0, [pc, #164]	; (8e98 <z_impl_k_thread_suspend+0xe4>)
    8df2:	f001 fe75 	bl	aae0 <assert_print>
    8df6:	218e      	movs	r1, #142	; 0x8e
    8df8:	4638      	mov	r0, r7
    8dfa:	f001 fe6a 	bl	aad2 <assert_post_action>
    8dfe:	e7eb      	b.n	8dd8 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8e00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8e04:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8e06:	4621      	mov	r1, r4
    8e08:	4824      	ldr	r0, [pc, #144]	; (8e9c <z_impl_k_thread_suspend+0xe8>)
    8e0a:	f7ff fb45 	bl	8498 <z_priq_dumb_remove>
}
    8e0e:	e00a      	b.n	8e26 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    8e10:	f386 8811 	msr	BASEPRI, r6
    8e14:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8e18:	2501      	movs	r5, #1
    8e1a:	bb2d      	cbnz	r5, 8e68 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    8e1c:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    8e1e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    8e22:	2b00      	cmp	r3, #0
    8e24:	dbec      	blt.n	8e00 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8e26:	7b63      	ldrb	r3, [r4, #13]
    8e28:	f043 0310 	orr.w	r3, r3, #16
    8e2c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    8e2e:	4b1c      	ldr	r3, [pc, #112]	; (8ea0 <z_impl_k_thread_suspend+0xec>)
    8e30:	6898      	ldr	r0, [r3, #8]
    8e32:	42a0      	cmp	r0, r4
    8e34:	bf14      	ite	ne
    8e36:	2000      	movne	r0, #0
    8e38:	2001      	moveq	r0, #1
    8e3a:	f7ff fb51 	bl	84e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e3e:	4812      	ldr	r0, [pc, #72]	; (8e88 <z_impl_k_thread_suspend+0xd4>)
    8e40:	f7fe fc4e 	bl	76e0 <z_spin_unlock_valid>
    8e44:	2800      	cmp	r0, #0
    8e46:	d1e3      	bne.n	8e10 <z_impl_k_thread_suspend+0x5c>
    8e48:	4d10      	ldr	r5, [pc, #64]	; (8e8c <z_impl_k_thread_suspend+0xd8>)
    8e4a:	23b9      	movs	r3, #185	; 0xb9
    8e4c:	462a      	mov	r2, r5
    8e4e:	4915      	ldr	r1, [pc, #84]	; (8ea4 <z_impl_k_thread_suspend+0xf0>)
    8e50:	4810      	ldr	r0, [pc, #64]	; (8e94 <z_impl_k_thread_suspend+0xe0>)
    8e52:	f001 fe45 	bl	aae0 <assert_print>
    8e56:	490c      	ldr	r1, [pc, #48]	; (8e88 <z_impl_k_thread_suspend+0xd4>)
    8e58:	4813      	ldr	r0, [pc, #76]	; (8ea8 <z_impl_k_thread_suspend+0xf4>)
    8e5a:	f001 fe41 	bl	aae0 <assert_print>
    8e5e:	21b9      	movs	r1, #185	; 0xb9
    8e60:	4628      	mov	r0, r5
    8e62:	f001 fe36 	bl	aad2 <assert_post_action>
    8e66:	e7d3      	b.n	8e10 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    8e68:	4b0d      	ldr	r3, [pc, #52]	; (8ea0 <z_impl_k_thread_suspend+0xec>)
    8e6a:	689b      	ldr	r3, [r3, #8]
    8e6c:	42a3      	cmp	r3, r4
    8e6e:	d000      	beq.n	8e72 <z_impl_k_thread_suspend+0xbe>
}
    8e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    8e72:	f04f 0320 	mov.w	r3, #32
    8e76:	f3ef 8011 	mrs	r0, BASEPRI
    8e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e7e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8e82:	f002 ffed 	bl	be60 <z_reschedule_irqlock>
    8e86:	e7f3      	b.n	8e70 <z_impl_k_thread_suspend+0xbc>
    8e88:	200050e8 	.word	0x200050e8
    8e8c:	0000c624 	.word	0x0000c624
    8e90:	0000c684 	.word	0x0000c684
    8e94:	0000c478 	.word	0x0000c478
    8e98:	0000c69c 	.word	0x0000c69c
    8e9c:	200050cc 	.word	0x200050cc
    8ea0:	200050ac 	.word	0x200050ac
    8ea4:	0000c654 	.word	0x0000c654
    8ea8:	0000c66c 	.word	0x0000c66c

00008eac <k_sched_unlock>:
{
    8eac:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8eae:	2400      	movs	r4, #0
    8eb0:	f04f 0320 	mov.w	r3, #32
    8eb4:	f3ef 8511 	mrs	r5, BASEPRI
    8eb8:	f383 8812 	msr	BASEPRI_MAX, r3
    8ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ec0:	4838      	ldr	r0, [pc, #224]	; (8fa4 <k_sched_unlock+0xf8>)
    8ec2:	f7fe fbfd 	bl	76c0 <z_spin_lock_valid>
    8ec6:	b118      	cbz	r0, 8ed0 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    8ec8:	4836      	ldr	r0, [pc, #216]	; (8fa4 <k_sched_unlock+0xf8>)
    8eca:	f7fe fc19 	bl	7700 <z_spin_lock_set_owner>
	return k;
    8ece:	e036      	b.n	8f3e <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ed0:	4e35      	ldr	r6, [pc, #212]	; (8fa8 <k_sched_unlock+0xfc>)
    8ed2:	238e      	movs	r3, #142	; 0x8e
    8ed4:	4632      	mov	r2, r6
    8ed6:	4935      	ldr	r1, [pc, #212]	; (8fac <k_sched_unlock+0x100>)
    8ed8:	4835      	ldr	r0, [pc, #212]	; (8fb0 <k_sched_unlock+0x104>)
    8eda:	f001 fe01 	bl	aae0 <assert_print>
    8ede:	4931      	ldr	r1, [pc, #196]	; (8fa4 <k_sched_unlock+0xf8>)
    8ee0:	4834      	ldr	r0, [pc, #208]	; (8fb4 <k_sched_unlock+0x108>)
    8ee2:	f001 fdfd 	bl	aae0 <assert_print>
    8ee6:	218e      	movs	r1, #142	; 0x8e
    8ee8:	4630      	mov	r0, r6
    8eea:	f001 fdf2 	bl	aad2 <assert_post_action>
    8eee:	e7eb      	b.n	8ec8 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8ef0:	4c31      	ldr	r4, [pc, #196]	; (8fb8 <k_sched_unlock+0x10c>)
    8ef2:	f240 33bb 	movw	r3, #955	; 0x3bb
    8ef6:	4622      	mov	r2, r4
    8ef8:	4930      	ldr	r1, [pc, #192]	; (8fbc <k_sched_unlock+0x110>)
    8efa:	482d      	ldr	r0, [pc, #180]	; (8fb0 <k_sched_unlock+0x104>)
    8efc:	f001 fdf0 	bl	aae0 <assert_print>
    8f00:	482f      	ldr	r0, [pc, #188]	; (8fc0 <k_sched_unlock+0x114>)
    8f02:	f001 fded 	bl	aae0 <assert_print>
    8f06:	f240 31bb 	movw	r1, #955	; 0x3bb
    8f0a:	4620      	mov	r0, r4
    8f0c:	f001 fde1 	bl	aad2 <assert_post_action>
    8f10:	e01b      	b.n	8f4a <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    8f12:	4c29      	ldr	r4, [pc, #164]	; (8fb8 <k_sched_unlock+0x10c>)
    8f14:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    8f18:	4622      	mov	r2, r4
    8f1a:	492a      	ldr	r1, [pc, #168]	; (8fc4 <k_sched_unlock+0x118>)
    8f1c:	4824      	ldr	r0, [pc, #144]	; (8fb0 <k_sched_unlock+0x104>)
    8f1e:	f001 fddf 	bl	aae0 <assert_print>
    8f22:	4827      	ldr	r0, [pc, #156]	; (8fc0 <k_sched_unlock+0x114>)
    8f24:	f001 fddc 	bl	aae0 <assert_print>
    8f28:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    8f2c:	4620      	mov	r0, r4
    8f2e:	f001 fdd0 	bl	aad2 <assert_post_action>
    8f32:	e00e      	b.n	8f52 <k_sched_unlock+0xa6>
	__asm__ volatile(
    8f34:	f385 8811 	msr	BASEPRI, r5
    8f38:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8f3c:	2401      	movs	r4, #1
    8f3e:	bb2c      	cbnz	r4, 8f8c <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8f40:	4b21      	ldr	r3, [pc, #132]	; (8fc8 <k_sched_unlock+0x11c>)
    8f42:	689b      	ldr	r3, [r3, #8]
    8f44:	7bdb      	ldrb	r3, [r3, #15]
    8f46:	2b00      	cmp	r3, #0
    8f48:	d0d2      	beq.n	8ef0 <k_sched_unlock+0x44>
    8f4a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d1df      	bne.n	8f12 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    8f52:	4b1d      	ldr	r3, [pc, #116]	; (8fc8 <k_sched_unlock+0x11c>)
    8f54:	689a      	ldr	r2, [r3, #8]
    8f56:	7bd3      	ldrb	r3, [r2, #15]
    8f58:	3301      	adds	r3, #1
    8f5a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8f5c:	2000      	movs	r0, #0
    8f5e:	f7ff fabf 	bl	84e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f62:	4810      	ldr	r0, [pc, #64]	; (8fa4 <k_sched_unlock+0xf8>)
    8f64:	f7fe fbbc 	bl	76e0 <z_spin_unlock_valid>
    8f68:	2800      	cmp	r0, #0
    8f6a:	d1e3      	bne.n	8f34 <k_sched_unlock+0x88>
    8f6c:	4c0e      	ldr	r4, [pc, #56]	; (8fa8 <k_sched_unlock+0xfc>)
    8f6e:	23b9      	movs	r3, #185	; 0xb9
    8f70:	4622      	mov	r2, r4
    8f72:	4916      	ldr	r1, [pc, #88]	; (8fcc <k_sched_unlock+0x120>)
    8f74:	480e      	ldr	r0, [pc, #56]	; (8fb0 <k_sched_unlock+0x104>)
    8f76:	f001 fdb3 	bl	aae0 <assert_print>
    8f7a:	490a      	ldr	r1, [pc, #40]	; (8fa4 <k_sched_unlock+0xf8>)
    8f7c:	4814      	ldr	r0, [pc, #80]	; (8fd0 <k_sched_unlock+0x124>)
    8f7e:	f001 fdaf 	bl	aae0 <assert_print>
    8f82:	21b9      	movs	r1, #185	; 0xb9
    8f84:	4620      	mov	r0, r4
    8f86:	f001 fda4 	bl	aad2 <assert_post_action>
    8f8a:	e7d3      	b.n	8f34 <k_sched_unlock+0x88>
	__asm__ volatile(
    8f8c:	f04f 0320 	mov.w	r3, #32
    8f90:	f3ef 8011 	mrs	r0, BASEPRI
    8f94:	f383 8812 	msr	BASEPRI_MAX, r3
    8f98:	f3bf 8f6f 	isb	sy
    8f9c:	f002 ff60 	bl	be60 <z_reschedule_irqlock>
}
    8fa0:	bd70      	pop	{r4, r5, r6, pc}
    8fa2:	bf00      	nop
    8fa4:	200050e8 	.word	0x200050e8
    8fa8:	0000c624 	.word	0x0000c624
    8fac:	0000c684 	.word	0x0000c684
    8fb0:	0000c478 	.word	0x0000c478
    8fb4:	0000c69c 	.word	0x0000c69c
    8fb8:	0000df5c 	.word	0x0000df5c
    8fbc:	0000dfe4 	.word	0x0000dfe4
    8fc0:	0000deb4 	.word	0x0000deb4
    8fc4:	0000dd6c 	.word	0x0000dd6c
    8fc8:	200050ac 	.word	0x200050ac
    8fcc:	0000c654 	.word	0x0000c654
    8fd0:	0000c66c 	.word	0x0000c66c

00008fd4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8fd6:	7b43      	ldrb	r3, [r0, #13]
    8fd8:	f013 0f08 	tst.w	r3, #8
    8fdc:	d145      	bne.n	906a <end_thread+0x96>
    8fde:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8fe0:	f043 0308 	orr.w	r3, r3, #8
    8fe4:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8fe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8fea:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8fec:	f013 0f80 	tst.w	r3, #128	; 0x80
    8ff0:	d12d      	bne.n	904e <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8ff2:	68ab      	ldr	r3, [r5, #8]
    8ff4:	b15b      	cbz	r3, 900e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8ff6:	4628      	mov	r0, r5
    8ff8:	f7ff f870 	bl	80dc <pended_on_thread>
    8ffc:	4629      	mov	r1, r5
    8ffe:	f7ff fa4b 	bl	8498 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9002:	7b6b      	ldrb	r3, [r5, #13]
    9004:	f023 0302 	bic.w	r3, r3, #2
    9008:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    900a:	2300      	movs	r3, #0
    900c:	60ab      	str	r3, [r5, #8]
    900e:	f105 0018 	add.w	r0, r5, #24
    9012:	f000 fd4f 	bl	9ab4 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    9016:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    901a:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    901c:	42bc      	cmp	r4, r7
    901e:	d01e      	beq.n	905e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9020:	b1ec      	cbz	r4, 905e <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9022:	4620      	mov	r0, r4
    9024:	f7ff f85a 	bl	80dc <pended_on_thread>
    9028:	4621      	mov	r1, r4
    902a:	f7ff fa35 	bl	8498 <z_priq_dumb_remove>
    902e:	7b63      	ldrb	r3, [r4, #13]
    9030:	f023 0302 	bic.w	r3, r3, #2
    9034:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9036:	2600      	movs	r6, #0
    9038:	60a6      	str	r6, [r4, #8]
    903a:	f104 0018 	add.w	r0, r4, #24
    903e:	f000 fd39 	bl	9ab4 <z_abort_timeout>
    9042:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    9046:	4620      	mov	r0, r4
    9048:	f7ff fba4 	bl	8794 <ready_thread>
    904c:	e7e5      	b.n	901a <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    904e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9052:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9054:	4601      	mov	r1, r0
    9056:	4805      	ldr	r0, [pc, #20]	; (906c <end_thread+0x98>)
    9058:	f7ff fa1e 	bl	8498 <z_priq_dumb_remove>
}
    905c:	e7c9      	b.n	8ff2 <end_thread+0x1e>
		update_cache(1);
    905e:	2001      	movs	r0, #1
    9060:	f7ff fa3e 	bl	84e0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    9064:	4628      	mov	r0, r5
    9066:	f7fe fb53 	bl	7710 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    906c:	200050cc 	.word	0x200050cc

00009070 <z_unpend1_no_timeout>:
{
    9070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9072:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9074:	2500      	movs	r5, #0
    9076:	f04f 0320 	mov.w	r3, #32
    907a:	f3ef 8711 	mrs	r7, BASEPRI
    907e:	f383 8812 	msr	BASEPRI_MAX, r3
    9082:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9086:	4823      	ldr	r0, [pc, #140]	; (9114 <z_unpend1_no_timeout+0xa4>)
    9088:	f7fe fb1a 	bl	76c0 <z_spin_lock_valid>
    908c:	b120      	cbz	r0, 9098 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    908e:	4821      	ldr	r0, [pc, #132]	; (9114 <z_unpend1_no_timeout+0xa4>)
    9090:	f7fe fb36 	bl	7700 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9094:	2400      	movs	r4, #0
	return k;
    9096:	e018      	b.n	90ca <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9098:	4c1f      	ldr	r4, [pc, #124]	; (9118 <z_unpend1_no_timeout+0xa8>)
    909a:	238e      	movs	r3, #142	; 0x8e
    909c:	4622      	mov	r2, r4
    909e:	491f      	ldr	r1, [pc, #124]	; (911c <z_unpend1_no_timeout+0xac>)
    90a0:	481f      	ldr	r0, [pc, #124]	; (9120 <z_unpend1_no_timeout+0xb0>)
    90a2:	f001 fd1d 	bl	aae0 <assert_print>
    90a6:	491b      	ldr	r1, [pc, #108]	; (9114 <z_unpend1_no_timeout+0xa4>)
    90a8:	481e      	ldr	r0, [pc, #120]	; (9124 <z_unpend1_no_timeout+0xb4>)
    90aa:	f001 fd19 	bl	aae0 <assert_print>
    90ae:	218e      	movs	r1, #142	; 0x8e
    90b0:	4620      	mov	r0, r4
    90b2:	f001 fd0e 	bl	aad2 <assert_post_action>
    90b6:	e7ea      	b.n	908e <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90b8:	4816      	ldr	r0, [pc, #88]	; (9114 <z_unpend1_no_timeout+0xa4>)
    90ba:	f7fe fb11 	bl	76e0 <z_spin_unlock_valid>
    90be:	b1b8      	cbz	r0, 90f0 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    90c0:	f387 8811 	msr	BASEPRI, r7
    90c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    90c8:	2501      	movs	r5, #1
    90ca:	bb0d      	cbnz	r5, 9110 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    90cc:	4630      	mov	r0, r6
    90ce:	f002 fedc 	bl	be8a <z_priq_dumb_best>
		if (thread != NULL) {
    90d2:	4604      	mov	r4, r0
    90d4:	2800      	cmp	r0, #0
    90d6:	d0ef      	beq.n	90b8 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    90d8:	f7ff f800 	bl	80dc <pended_on_thread>
    90dc:	4621      	mov	r1, r4
    90de:	f7ff f9db 	bl	8498 <z_priq_dumb_remove>
    90e2:	7b63      	ldrb	r3, [r4, #13]
    90e4:	f023 0302 	bic.w	r3, r3, #2
    90e8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    90ea:	2300      	movs	r3, #0
    90ec:	60a3      	str	r3, [r4, #8]
}
    90ee:	e7e3      	b.n	90b8 <z_unpend1_no_timeout+0x48>
    90f0:	4d09      	ldr	r5, [pc, #36]	; (9118 <z_unpend1_no_timeout+0xa8>)
    90f2:	23b9      	movs	r3, #185	; 0xb9
    90f4:	462a      	mov	r2, r5
    90f6:	490c      	ldr	r1, [pc, #48]	; (9128 <z_unpend1_no_timeout+0xb8>)
    90f8:	4809      	ldr	r0, [pc, #36]	; (9120 <z_unpend1_no_timeout+0xb0>)
    90fa:	f001 fcf1 	bl	aae0 <assert_print>
    90fe:	4905      	ldr	r1, [pc, #20]	; (9114 <z_unpend1_no_timeout+0xa4>)
    9100:	480a      	ldr	r0, [pc, #40]	; (912c <z_unpend1_no_timeout+0xbc>)
    9102:	f001 fced 	bl	aae0 <assert_print>
    9106:	21b9      	movs	r1, #185	; 0xb9
    9108:	4628      	mov	r0, r5
    910a:	f001 fce2 	bl	aad2 <assert_post_action>
    910e:	e7d7      	b.n	90c0 <z_unpend1_no_timeout+0x50>
}
    9110:	4620      	mov	r0, r4
    9112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9114:	200050e8 	.word	0x200050e8
    9118:	0000c624 	.word	0x0000c624
    911c:	0000c684 	.word	0x0000c684
    9120:	0000c478 	.word	0x0000c478
    9124:	0000c69c 	.word	0x0000c69c
    9128:	0000c654 	.word	0x0000c654
    912c:	0000c66c 	.word	0x0000c66c

00009130 <z_unpend_first_thread>:
{
    9130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9132:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9134:	2500      	movs	r5, #0
	__asm__ volatile(
    9136:	f04f 0320 	mov.w	r3, #32
    913a:	f3ef 8711 	mrs	r7, BASEPRI
    913e:	f383 8812 	msr	BASEPRI_MAX, r3
    9142:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9146:	4825      	ldr	r0, [pc, #148]	; (91dc <z_unpend_first_thread+0xac>)
    9148:	f7fe faba 	bl	76c0 <z_spin_lock_valid>
    914c:	b120      	cbz	r0, 9158 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    914e:	4823      	ldr	r0, [pc, #140]	; (91dc <z_unpend_first_thread+0xac>)
    9150:	f7fe fad6 	bl	7700 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9154:	2400      	movs	r4, #0
	return k;
    9156:	e018      	b.n	918a <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9158:	4c21      	ldr	r4, [pc, #132]	; (91e0 <z_unpend_first_thread+0xb0>)
    915a:	238e      	movs	r3, #142	; 0x8e
    915c:	4622      	mov	r2, r4
    915e:	4921      	ldr	r1, [pc, #132]	; (91e4 <z_unpend_first_thread+0xb4>)
    9160:	4821      	ldr	r0, [pc, #132]	; (91e8 <z_unpend_first_thread+0xb8>)
    9162:	f001 fcbd 	bl	aae0 <assert_print>
    9166:	491d      	ldr	r1, [pc, #116]	; (91dc <z_unpend_first_thread+0xac>)
    9168:	4820      	ldr	r0, [pc, #128]	; (91ec <z_unpend_first_thread+0xbc>)
    916a:	f001 fcb9 	bl	aae0 <assert_print>
    916e:	218e      	movs	r1, #142	; 0x8e
    9170:	4620      	mov	r0, r4
    9172:	f001 fcae 	bl	aad2 <assert_post_action>
    9176:	e7ea      	b.n	914e <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9178:	4818      	ldr	r0, [pc, #96]	; (91dc <z_unpend_first_thread+0xac>)
    917a:	f7fe fab1 	bl	76e0 <z_spin_unlock_valid>
    917e:	b1d8      	cbz	r0, 91b8 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    9180:	f387 8811 	msr	BASEPRI, r7
    9184:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9188:	2501      	movs	r5, #1
    918a:	bb2d      	cbnz	r5, 91d8 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    918c:	4630      	mov	r0, r6
    918e:	f002 fe7c 	bl	be8a <z_priq_dumb_best>
		if (thread != NULL) {
    9192:	4604      	mov	r4, r0
    9194:	2800      	cmp	r0, #0
    9196:	d0ef      	beq.n	9178 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9198:	f7fe ffa0 	bl	80dc <pended_on_thread>
    919c:	4621      	mov	r1, r4
    919e:	f7ff f97b 	bl	8498 <z_priq_dumb_remove>
    91a2:	7b63      	ldrb	r3, [r4, #13]
    91a4:	f023 0302 	bic.w	r3, r3, #2
    91a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    91aa:	2300      	movs	r3, #0
    91ac:	60a3      	str	r3, [r4, #8]
    91ae:	f104 0018 	add.w	r0, r4, #24
    91b2:	f000 fc7f 	bl	9ab4 <z_abort_timeout>
    91b6:	e7df      	b.n	9178 <z_unpend_first_thread+0x48>
    91b8:	4d09      	ldr	r5, [pc, #36]	; (91e0 <z_unpend_first_thread+0xb0>)
    91ba:	23b9      	movs	r3, #185	; 0xb9
    91bc:	462a      	mov	r2, r5
    91be:	490c      	ldr	r1, [pc, #48]	; (91f0 <z_unpend_first_thread+0xc0>)
    91c0:	4809      	ldr	r0, [pc, #36]	; (91e8 <z_unpend_first_thread+0xb8>)
    91c2:	f001 fc8d 	bl	aae0 <assert_print>
    91c6:	4905      	ldr	r1, [pc, #20]	; (91dc <z_unpend_first_thread+0xac>)
    91c8:	480a      	ldr	r0, [pc, #40]	; (91f4 <z_unpend_first_thread+0xc4>)
    91ca:	f001 fc89 	bl	aae0 <assert_print>
    91ce:	21b9      	movs	r1, #185	; 0xb9
    91d0:	4628      	mov	r0, r5
    91d2:	f001 fc7e 	bl	aad2 <assert_post_action>
    91d6:	e7d3      	b.n	9180 <z_unpend_first_thread+0x50>
}
    91d8:	4620      	mov	r0, r4
    91da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91dc:	200050e8 	.word	0x200050e8
    91e0:	0000c624 	.word	0x0000c624
    91e4:	0000c684 	.word	0x0000c684
    91e8:	0000c478 	.word	0x0000c478
    91ec:	0000c69c 	.word	0x0000c69c
    91f0:	0000c654 	.word	0x0000c654
    91f4:	0000c66c 	.word	0x0000c66c

000091f8 <z_sched_init>:
{
    91f8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    91fa:	4804      	ldr	r0, [pc, #16]	; (920c <z_sched_init+0x14>)
    91fc:	f002 fe4c 	bl	be98 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9200:	2100      	movs	r1, #0
    9202:	4608      	mov	r0, r1
    9204:	f7fe ffa8 	bl	8158 <k_sched_time_slice_set>
}
    9208:	bd08      	pop	{r3, pc}
    920a:	bf00      	nop
    920c:	200050c8 	.word	0x200050c8

00009210 <z_impl_k_yield>:
{
    9210:	b570      	push	{r4, r5, r6, lr}
    9212:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9216:	2b00      	cmp	r3, #0
    9218:	d149      	bne.n	92ae <z_impl_k_yield+0x9e>
	__asm__ volatile(
    921a:	f04f 0320 	mov.w	r3, #32
    921e:	f3ef 8611 	mrs	r6, BASEPRI
    9222:	f383 8812 	msr	BASEPRI_MAX, r3
    9226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    922a:	4843      	ldr	r0, [pc, #268]	; (9338 <z_impl_k_yield+0x128>)
    922c:	f7fe fa48 	bl	76c0 <z_spin_lock_valid>
    9230:	2800      	cmp	r0, #0
    9232:	d04d      	beq.n	92d0 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    9234:	4840      	ldr	r0, [pc, #256]	; (9338 <z_impl_k_yield+0x128>)
    9236:	f7fe fa63 	bl	7700 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    923a:	4c40      	ldr	r4, [pc, #256]	; (933c <z_impl_k_yield+0x12c>)
    923c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    923e:	7b4b      	ldrb	r3, [r1, #13]
    9240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9244:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9246:	f104 0020 	add.w	r0, r4, #32
    924a:	f7ff f925 	bl	8498 <z_priq_dumb_remove>
	queue_thread(_current);
    924e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9250:	7b6b      	ldrb	r3, [r5, #13]
    9252:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9256:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9258:	4b39      	ldr	r3, [pc, #228]	; (9340 <z_impl_k_yield+0x130>)
    925a:	429d      	cmp	r5, r3
    925c:	d048      	beq.n	92f0 <z_impl_k_yield+0xe0>
	return list->head == list;
    925e:	4b37      	ldr	r3, [pc, #220]	; (933c <z_impl_k_yield+0x12c>)
    9260:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9264:	429c      	cmp	r4, r3
    9266:	d055      	beq.n	9314 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9268:	b16c      	cbz	r4, 9286 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    926a:	4621      	mov	r1, r4
    926c:	4628      	mov	r0, r5
    926e:	f002 fded 	bl	be4c <z_sched_prio_cmp>
    9272:	2800      	cmp	r0, #0
    9274:	dc48      	bgt.n	9308 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9276:	b134      	cbz	r4, 9286 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    9278:	4b30      	ldr	r3, [pc, #192]	; (933c <z_impl_k_yield+0x12c>)
    927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    927c:	429c      	cmp	r4, r3
    927e:	d002      	beq.n	9286 <z_impl_k_yield+0x76>
    9280:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9282:	2c00      	cmp	r4, #0
    9284:	d1f0      	bne.n	9268 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    9286:	4b2d      	ldr	r3, [pc, #180]	; (933c <z_impl_k_yield+0x12c>)
    9288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    928a:	f103 0120 	add.w	r1, r3, #32
    928e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9290:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9292:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9294:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    9296:	2001      	movs	r0, #1
    9298:	f7ff f922 	bl	84e0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    929c:	4826      	ldr	r0, [pc, #152]	; (9338 <z_impl_k_yield+0x128>)
    929e:	f7fe fa1f 	bl	76e0 <z_spin_unlock_valid>
    92a2:	2800      	cmp	r0, #0
    92a4:	d038      	beq.n	9318 <z_impl_k_yield+0x108>
    92a6:	4630      	mov	r0, r6
    92a8:	f7f9 fe1e 	bl	2ee8 <arch_swap>
}
    92ac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    92ae:	4c25      	ldr	r4, [pc, #148]	; (9344 <z_impl_k_yield+0x134>)
    92b0:	f240 5332 	movw	r3, #1330	; 0x532
    92b4:	4622      	mov	r2, r4
    92b6:	4924      	ldr	r1, [pc, #144]	; (9348 <z_impl_k_yield+0x138>)
    92b8:	4824      	ldr	r0, [pc, #144]	; (934c <z_impl_k_yield+0x13c>)
    92ba:	f001 fc11 	bl	aae0 <assert_print>
    92be:	4824      	ldr	r0, [pc, #144]	; (9350 <z_impl_k_yield+0x140>)
    92c0:	f001 fc0e 	bl	aae0 <assert_print>
    92c4:	f240 5132 	movw	r1, #1330	; 0x532
    92c8:	4620      	mov	r0, r4
    92ca:	f001 fc02 	bl	aad2 <assert_post_action>
    92ce:	e7a4      	b.n	921a <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92d0:	4c20      	ldr	r4, [pc, #128]	; (9354 <z_impl_k_yield+0x144>)
    92d2:	238e      	movs	r3, #142	; 0x8e
    92d4:	4622      	mov	r2, r4
    92d6:	4920      	ldr	r1, [pc, #128]	; (9358 <z_impl_k_yield+0x148>)
    92d8:	481c      	ldr	r0, [pc, #112]	; (934c <z_impl_k_yield+0x13c>)
    92da:	f001 fc01 	bl	aae0 <assert_print>
    92de:	4916      	ldr	r1, [pc, #88]	; (9338 <z_impl_k_yield+0x128>)
    92e0:	481e      	ldr	r0, [pc, #120]	; (935c <z_impl_k_yield+0x14c>)
    92e2:	f001 fbfd 	bl	aae0 <assert_print>
    92e6:	218e      	movs	r1, #142	; 0x8e
    92e8:	4620      	mov	r0, r4
    92ea:	f001 fbf2 	bl	aad2 <assert_post_action>
    92ee:	e7a1      	b.n	9234 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    92f0:	4c14      	ldr	r4, [pc, #80]	; (9344 <z_impl_k_yield+0x134>)
    92f2:	23ba      	movs	r3, #186	; 0xba
    92f4:	4622      	mov	r2, r4
    92f6:	491a      	ldr	r1, [pc, #104]	; (9360 <z_impl_k_yield+0x150>)
    92f8:	4814      	ldr	r0, [pc, #80]	; (934c <z_impl_k_yield+0x13c>)
    92fa:	f001 fbf1 	bl	aae0 <assert_print>
    92fe:	21ba      	movs	r1, #186	; 0xba
    9300:	4620      	mov	r0, r4
    9302:	f001 fbe6 	bl	aad2 <assert_post_action>
    9306:	e7aa      	b.n	925e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9308:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    930a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    930c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    930e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9310:	6065      	str	r5, [r4, #4]
}
    9312:	e7c0      	b.n	9296 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9314:	2400      	movs	r4, #0
    9316:	e7a7      	b.n	9268 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9318:	4c0e      	ldr	r4, [pc, #56]	; (9354 <z_impl_k_yield+0x144>)
    931a:	23d0      	movs	r3, #208	; 0xd0
    931c:	4622      	mov	r2, r4
    931e:	4911      	ldr	r1, [pc, #68]	; (9364 <z_impl_k_yield+0x154>)
    9320:	480a      	ldr	r0, [pc, #40]	; (934c <z_impl_k_yield+0x13c>)
    9322:	f001 fbdd 	bl	aae0 <assert_print>
    9326:	4904      	ldr	r1, [pc, #16]	; (9338 <z_impl_k_yield+0x128>)
    9328:	480f      	ldr	r0, [pc, #60]	; (9368 <z_impl_k_yield+0x158>)
    932a:	f001 fbd9 	bl	aae0 <assert_print>
    932e:	21d0      	movs	r1, #208	; 0xd0
    9330:	4620      	mov	r0, r4
    9332:	f001 fbce 	bl	aad2 <assert_post_action>
    9336:	e7b6      	b.n	92a6 <z_impl_k_yield+0x96>
    9338:	200050e8 	.word	0x200050e8
    933c:	200050ac 	.word	0x200050ac
    9340:	20004410 	.word	0x20004410
    9344:	0000df5c 	.word	0x0000df5c
    9348:	0000dd6c 	.word	0x0000dd6c
    934c:	0000c478 	.word	0x0000c478
    9350:	0000deb4 	.word	0x0000deb4
    9354:	0000c624 	.word	0x0000c624
    9358:	0000c684 	.word	0x0000c684
    935c:	0000c69c 	.word	0x0000c69c
    9360:	0000df98 	.word	0x0000df98
    9364:	0000c654 	.word	0x0000c654
    9368:	0000c66c 	.word	0x0000c66c

0000936c <z_tick_sleep>:
{
    936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9370:	4604      	mov	r4, r0
    9372:	460e      	mov	r6, r1
    9374:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9378:	2b00      	cmp	r3, #0
    937a:	d14e      	bne.n	941a <z_tick_sleep+0xae>
	if (ticks == 0) {
    937c:	ea54 0306 	orrs.w	r3, r4, r6
    9380:	d05c      	beq.n	943c <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    9382:	f06f 0301 	mvn.w	r3, #1
    9386:	1b1b      	subs	r3, r3, r4
    9388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    938c:	eb62 0206 	sbc.w	r2, r2, r6
    9390:	2b01      	cmp	r3, #1
    9392:	f172 0300 	sbcs.w	r3, r2, #0
    9396:	db55      	blt.n	9444 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9398:	f06f 0501 	mvn.w	r5, #1
    939c:	1b2d      	subs	r5, r5, r4
    939e:	f04f 0320 	mov.w	r3, #32
    93a2:	f3ef 8911 	mrs	r9, BASEPRI
    93a6:	f383 8812 	msr	BASEPRI_MAX, r3
    93aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ae:	4840      	ldr	r0, [pc, #256]	; (94b0 <z_tick_sleep+0x144>)
    93b0:	f7fe f986 	bl	76c0 <z_spin_lock_valid>
    93b4:	2800      	cmp	r0, #0
    93b6:	d049      	beq.n	944c <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    93b8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 94b0 <z_tick_sleep+0x144>
    93bc:	4640      	mov	r0, r8
    93be:	f7fe f99f 	bl	7700 <z_spin_lock_set_owner>
	pending_current = _current;
    93c2:	4f3c      	ldr	r7, [pc, #240]	; (94b4 <z_tick_sleep+0x148>)
    93c4:	68b8      	ldr	r0, [r7, #8]
    93c6:	4b3c      	ldr	r3, [pc, #240]	; (94b8 <z_tick_sleep+0x14c>)
    93c8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    93ca:	f7ff fb5b 	bl	8a84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    93ce:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    93d0:	4622      	mov	r2, r4
    93d2:	4633      	mov	r3, r6
    93d4:	4939      	ldr	r1, [pc, #228]	; (94bc <z_tick_sleep+0x150>)
    93d6:	3018      	adds	r0, #24
    93d8:	f000 fa88 	bl	98ec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    93dc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    93de:	7b53      	ldrb	r3, [r2, #13]
    93e0:	f043 0310 	orr.w	r3, r3, #16
    93e4:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93e6:	4640      	mov	r0, r8
    93e8:	f7fe f97a 	bl	76e0 <z_spin_unlock_valid>
    93ec:	2800      	cmp	r0, #0
    93ee:	d03d      	beq.n	946c <z_tick_sleep+0x100>
    93f0:	4648      	mov	r0, r9
    93f2:	f7f9 fd79 	bl	2ee8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    93f6:	4b2f      	ldr	r3, [pc, #188]	; (94b4 <z_tick_sleep+0x148>)
    93f8:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    93fa:	7b5b      	ldrb	r3, [r3, #13]
    93fc:	f013 0f10 	tst.w	r3, #16
    9400:	d144      	bne.n	948c <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9402:	f002 fd64 	bl	bece <sys_clock_tick_get_32>
    9406:	1a28      	subs	r0, r5, r0
    9408:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    940c:	2801      	cmp	r0, #1
    940e:	f173 0300 	sbcs.w	r3, r3, #0
    9412:	da00      	bge.n	9416 <z_tick_sleep+0xaa>
	return 0;
    9414:	2000      	movs	r0, #0
}
    9416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    941a:	4d29      	ldr	r5, [pc, #164]	; (94c0 <z_tick_sleep+0x154>)
    941c:	f240 534e 	movw	r3, #1358	; 0x54e
    9420:	462a      	mov	r2, r5
    9422:	4928      	ldr	r1, [pc, #160]	; (94c4 <z_tick_sleep+0x158>)
    9424:	4828      	ldr	r0, [pc, #160]	; (94c8 <z_tick_sleep+0x15c>)
    9426:	f001 fb5b 	bl	aae0 <assert_print>
    942a:	4828      	ldr	r0, [pc, #160]	; (94cc <z_tick_sleep+0x160>)
    942c:	f001 fb58 	bl	aae0 <assert_print>
    9430:	f240 514e 	movw	r1, #1358	; 0x54e
    9434:	4628      	mov	r0, r5
    9436:	f001 fb4c 	bl	aad2 <assert_post_action>
    943a:	e79f      	b.n	937c <z_tick_sleep+0x10>
	z_impl_k_yield();
    943c:	f7ff fee8 	bl	9210 <z_impl_k_yield>
		return 0;
    9440:	2000      	movs	r0, #0
    9442:	e7e8      	b.n	9416 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9444:	f002 fd43 	bl	bece <sys_clock_tick_get_32>
    9448:	1905      	adds	r5, r0, r4
    944a:	e7a8      	b.n	939e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    944c:	4f20      	ldr	r7, [pc, #128]	; (94d0 <z_tick_sleep+0x164>)
    944e:	238e      	movs	r3, #142	; 0x8e
    9450:	463a      	mov	r2, r7
    9452:	4920      	ldr	r1, [pc, #128]	; (94d4 <z_tick_sleep+0x168>)
    9454:	481c      	ldr	r0, [pc, #112]	; (94c8 <z_tick_sleep+0x15c>)
    9456:	f001 fb43 	bl	aae0 <assert_print>
    945a:	4915      	ldr	r1, [pc, #84]	; (94b0 <z_tick_sleep+0x144>)
    945c:	481e      	ldr	r0, [pc, #120]	; (94d8 <z_tick_sleep+0x16c>)
    945e:	f001 fb3f 	bl	aae0 <assert_print>
    9462:	218e      	movs	r1, #142	; 0x8e
    9464:	4638      	mov	r0, r7
    9466:	f001 fb34 	bl	aad2 <assert_post_action>
    946a:	e7a5      	b.n	93b8 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    946c:	4c18      	ldr	r4, [pc, #96]	; (94d0 <z_tick_sleep+0x164>)
    946e:	23d0      	movs	r3, #208	; 0xd0
    9470:	4622      	mov	r2, r4
    9472:	491a      	ldr	r1, [pc, #104]	; (94dc <z_tick_sleep+0x170>)
    9474:	4814      	ldr	r0, [pc, #80]	; (94c8 <z_tick_sleep+0x15c>)
    9476:	f001 fb33 	bl	aae0 <assert_print>
    947a:	4641      	mov	r1, r8
    947c:	4818      	ldr	r0, [pc, #96]	; (94e0 <z_tick_sleep+0x174>)
    947e:	f001 fb2f 	bl	aae0 <assert_print>
    9482:	21d0      	movs	r1, #208	; 0xd0
    9484:	4620      	mov	r0, r4
    9486:	f001 fb24 	bl	aad2 <assert_post_action>
    948a:	e7b1      	b.n	93f0 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    948c:	4c0c      	ldr	r4, [pc, #48]	; (94c0 <z_tick_sleep+0x154>)
    948e:	f240 536f 	movw	r3, #1391	; 0x56f
    9492:	4622      	mov	r2, r4
    9494:	4913      	ldr	r1, [pc, #76]	; (94e4 <z_tick_sleep+0x178>)
    9496:	480c      	ldr	r0, [pc, #48]	; (94c8 <z_tick_sleep+0x15c>)
    9498:	f001 fb22 	bl	aae0 <assert_print>
    949c:	480b      	ldr	r0, [pc, #44]	; (94cc <z_tick_sleep+0x160>)
    949e:	f001 fb1f 	bl	aae0 <assert_print>
    94a2:	f240 516f 	movw	r1, #1391	; 0x56f
    94a6:	4620      	mov	r0, r4
    94a8:	f001 fb13 	bl	aad2 <assert_post_action>
    94ac:	e7a9      	b.n	9402 <z_tick_sleep+0x96>
    94ae:	bf00      	nop
    94b0:	200050e8 	.word	0x200050e8
    94b4:	200050ac 	.word	0x200050ac
    94b8:	200050e4 	.word	0x200050e4
    94bc:	0000899d 	.word	0x0000899d
    94c0:	0000df5c 	.word	0x0000df5c
    94c4:	0000dd6c 	.word	0x0000dd6c
    94c8:	0000c478 	.word	0x0000c478
    94cc:	0000deb4 	.word	0x0000deb4
    94d0:	0000c624 	.word	0x0000c624
    94d4:	0000c684 	.word	0x0000c684
    94d8:	0000c69c 	.word	0x0000c69c
    94dc:	0000c654 	.word	0x0000c654
    94e0:	0000c66c 	.word	0x0000c66c
    94e4:	0000e018 	.word	0x0000e018

000094e8 <z_impl_k_sleep>:
{
    94e8:	b570      	push	{r4, r5, r6, lr}
    94ea:	4605      	mov	r5, r0
    94ec:	460c      	mov	r4, r1
    94ee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    94f2:	bb13      	cbnz	r3, 953a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    94f4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    94f8:	bf08      	it	eq
    94fa:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    94fe:	d02d      	beq.n	955c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    9500:	4628      	mov	r0, r5
    9502:	4621      	mov	r1, r4
    9504:	f7ff ff32 	bl	936c <z_tick_sleep>
    9508:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    950a:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    950c:	0151      	lsls	r1, r2, #5
    950e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    9512:	0143      	lsls	r3, r0, #5
    9514:	1a1b      	subs	r3, r3, r0
    9516:	eb61 0102 	sbc.w	r1, r1, r2
    951a:	0088      	lsls	r0, r1, #2
    951c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    9520:	009b      	lsls	r3, r3, #2
    9522:	eb13 030c 	adds.w	r3, r3, ip
    9526:	eb42 0000 	adc.w	r0, r2, r0
    952a:	00c0      	lsls	r0, r0, #3
    952c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    9530:	f3c3 3310 	ubfx	r3, r3, #12, #17
    9534:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    9538:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    953a:	4e0c      	ldr	r6, [pc, #48]	; (956c <z_impl_k_sleep+0x84>)
    953c:	f240 537e 	movw	r3, #1406	; 0x57e
    9540:	4632      	mov	r2, r6
    9542:	490b      	ldr	r1, [pc, #44]	; (9570 <z_impl_k_sleep+0x88>)
    9544:	480b      	ldr	r0, [pc, #44]	; (9574 <z_impl_k_sleep+0x8c>)
    9546:	f001 facb 	bl	aae0 <assert_print>
    954a:	480b      	ldr	r0, [pc, #44]	; (9578 <z_impl_k_sleep+0x90>)
    954c:	f001 fac8 	bl	aae0 <assert_print>
    9550:	f240 517e 	movw	r1, #1406	; 0x57e
    9554:	4630      	mov	r0, r6
    9556:	f001 fabc 	bl	aad2 <assert_post_action>
    955a:	e7cb      	b.n	94f4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    955c:	4b07      	ldr	r3, [pc, #28]	; (957c <z_impl_k_sleep+0x94>)
    955e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9560:	f7ff fc28 	bl	8db4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    9564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9568:	e7e6      	b.n	9538 <z_impl_k_sleep+0x50>
    956a:	bf00      	nop
    956c:	0000df5c 	.word	0x0000df5c
    9570:	0000dd6c 	.word	0x0000dd6c
    9574:	0000c478 	.word	0x0000c478
    9578:	0000deb4 	.word	0x0000deb4
    957c:	200050ac 	.word	0x200050ac

00009580 <z_impl_z_current_get>:
}
    9580:	4b01      	ldr	r3, [pc, #4]	; (9588 <z_impl_z_current_get+0x8>)
    9582:	6898      	ldr	r0, [r3, #8]
    9584:	4770      	bx	lr
    9586:	bf00      	nop
    9588:	200050ac 	.word	0x200050ac

0000958c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    958c:	b570      	push	{r4, r5, r6, lr}
    958e:	4604      	mov	r4, r0
    9590:	f04f 0320 	mov.w	r3, #32
    9594:	f3ef 8511 	mrs	r5, BASEPRI
    9598:	f383 8812 	msr	BASEPRI_MAX, r3
    959c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95a0:	4840      	ldr	r0, [pc, #256]	; (96a4 <z_thread_abort+0x118>)
    95a2:	f7fe f88d 	bl	76c0 <z_spin_lock_valid>
    95a6:	b1b8      	cbz	r0, 95d8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    95a8:	483e      	ldr	r0, [pc, #248]	; (96a4 <z_thread_abort+0x118>)
    95aa:	f7fe f8a9 	bl	7700 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    95ae:	7b63      	ldrb	r3, [r4, #13]
    95b0:	f013 0f08 	tst.w	r3, #8
    95b4:	d120      	bne.n	95f8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    95b6:	4620      	mov	r0, r4
    95b8:	f7ff fd0c 	bl	8fd4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    95bc:	4b3a      	ldr	r3, [pc, #232]	; (96a8 <z_thread_abort+0x11c>)
    95be:	689b      	ldr	r3, [r3, #8]
    95c0:	42a3      	cmp	r3, r4
    95c2:	d032      	beq.n	962a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95c4:	4837      	ldr	r0, [pc, #220]	; (96a4 <z_thread_abort+0x118>)
    95c6:	f7fe f88b 	bl	76e0 <z_spin_unlock_valid>
    95ca:	2800      	cmp	r0, #0
    95cc:	d059      	beq.n	9682 <z_thread_abort+0xf6>
	__asm__ volatile(
    95ce:	f385 8811 	msr	BASEPRI, r5
    95d2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    95d6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95d8:	4e34      	ldr	r6, [pc, #208]	; (96ac <z_thread_abort+0x120>)
    95da:	238e      	movs	r3, #142	; 0x8e
    95dc:	4632      	mov	r2, r6
    95de:	4934      	ldr	r1, [pc, #208]	; (96b0 <z_thread_abort+0x124>)
    95e0:	4834      	ldr	r0, [pc, #208]	; (96b4 <z_thread_abort+0x128>)
    95e2:	f001 fa7d 	bl	aae0 <assert_print>
    95e6:	492f      	ldr	r1, [pc, #188]	; (96a4 <z_thread_abort+0x118>)
    95e8:	4833      	ldr	r0, [pc, #204]	; (96b8 <z_thread_abort+0x12c>)
    95ea:	f001 fa79 	bl	aae0 <assert_print>
    95ee:	218e      	movs	r1, #142	; 0x8e
    95f0:	4630      	mov	r0, r6
    95f2:	f001 fa6e 	bl	aad2 <assert_post_action>
    95f6:	e7d7      	b.n	95a8 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95f8:	482a      	ldr	r0, [pc, #168]	; (96a4 <z_thread_abort+0x118>)
    95fa:	f7fe f871 	bl	76e0 <z_spin_unlock_valid>
    95fe:	b120      	cbz	r0, 960a <z_thread_abort+0x7e>
    9600:	f385 8811 	msr	BASEPRI, r5
    9604:	f3bf 8f6f 	isb	sy
		return;
    9608:	e7e5      	b.n	95d6 <z_thread_abort+0x4a>
    960a:	4c28      	ldr	r4, [pc, #160]	; (96ac <z_thread_abort+0x120>)
    960c:	23b9      	movs	r3, #185	; 0xb9
    960e:	4622      	mov	r2, r4
    9610:	492a      	ldr	r1, [pc, #168]	; (96bc <z_thread_abort+0x130>)
    9612:	4828      	ldr	r0, [pc, #160]	; (96b4 <z_thread_abort+0x128>)
    9614:	f001 fa64 	bl	aae0 <assert_print>
    9618:	4922      	ldr	r1, [pc, #136]	; (96a4 <z_thread_abort+0x118>)
    961a:	4829      	ldr	r0, [pc, #164]	; (96c0 <z_thread_abort+0x134>)
    961c:	f001 fa60 	bl	aae0 <assert_print>
    9620:	21b9      	movs	r1, #185	; 0xb9
    9622:	4620      	mov	r0, r4
    9624:	f001 fa55 	bl	aad2 <assert_post_action>
    9628:	e7ea      	b.n	9600 <z_thread_abort+0x74>
    962a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    962e:	2b00      	cmp	r3, #0
    9630:	d1c8      	bne.n	95c4 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9632:	481c      	ldr	r0, [pc, #112]	; (96a4 <z_thread_abort+0x118>)
    9634:	f7fe f854 	bl	76e0 <z_spin_unlock_valid>
    9638:	b198      	cbz	r0, 9662 <z_thread_abort+0xd6>
    963a:	4628      	mov	r0, r5
    963c:	f7f9 fc54 	bl	2ee8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    9640:	4c20      	ldr	r4, [pc, #128]	; (96c4 <z_thread_abort+0x138>)
    9642:	f240 63ac 	movw	r3, #1708	; 0x6ac
    9646:	4622      	mov	r2, r4
    9648:	491f      	ldr	r1, [pc, #124]	; (96c8 <z_thread_abort+0x13c>)
    964a:	481a      	ldr	r0, [pc, #104]	; (96b4 <z_thread_abort+0x128>)
    964c:	f001 fa48 	bl	aae0 <assert_print>
    9650:	481e      	ldr	r0, [pc, #120]	; (96cc <z_thread_abort+0x140>)
    9652:	f001 fa45 	bl	aae0 <assert_print>
    9656:	f240 61ac 	movw	r1, #1708	; 0x6ac
    965a:	4620      	mov	r0, r4
    965c:	f001 fa39 	bl	aad2 <assert_post_action>
    9660:	e7b0      	b.n	95c4 <z_thread_abort+0x38>
    9662:	4c12      	ldr	r4, [pc, #72]	; (96ac <z_thread_abort+0x120>)
    9664:	23d0      	movs	r3, #208	; 0xd0
    9666:	4622      	mov	r2, r4
    9668:	4914      	ldr	r1, [pc, #80]	; (96bc <z_thread_abort+0x130>)
    966a:	4812      	ldr	r0, [pc, #72]	; (96b4 <z_thread_abort+0x128>)
    966c:	f001 fa38 	bl	aae0 <assert_print>
    9670:	490c      	ldr	r1, [pc, #48]	; (96a4 <z_thread_abort+0x118>)
    9672:	4813      	ldr	r0, [pc, #76]	; (96c0 <z_thread_abort+0x134>)
    9674:	f001 fa34 	bl	aae0 <assert_print>
    9678:	21d0      	movs	r1, #208	; 0xd0
    967a:	4620      	mov	r0, r4
    967c:	f001 fa29 	bl	aad2 <assert_post_action>
    9680:	e7db      	b.n	963a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9682:	4c0a      	ldr	r4, [pc, #40]	; (96ac <z_thread_abort+0x120>)
    9684:	23b9      	movs	r3, #185	; 0xb9
    9686:	4622      	mov	r2, r4
    9688:	490c      	ldr	r1, [pc, #48]	; (96bc <z_thread_abort+0x130>)
    968a:	480a      	ldr	r0, [pc, #40]	; (96b4 <z_thread_abort+0x128>)
    968c:	f001 fa28 	bl	aae0 <assert_print>
    9690:	4904      	ldr	r1, [pc, #16]	; (96a4 <z_thread_abort+0x118>)
    9692:	480b      	ldr	r0, [pc, #44]	; (96c0 <z_thread_abort+0x134>)
    9694:	f001 fa24 	bl	aae0 <assert_print>
    9698:	21b9      	movs	r1, #185	; 0xb9
    969a:	4620      	mov	r0, r4
    969c:	f001 fa19 	bl	aad2 <assert_post_action>
    96a0:	e795      	b.n	95ce <z_thread_abort+0x42>
    96a2:	bf00      	nop
    96a4:	200050e8 	.word	0x200050e8
    96a8:	200050ac 	.word	0x200050ac
    96ac:	0000c624 	.word	0x0000c624
    96b0:	0000c684 	.word	0x0000c684
    96b4:	0000c478 	.word	0x0000c478
    96b8:	0000c69c 	.word	0x0000c69c
    96bc:	0000c654 	.word	0x0000c654
    96c0:	0000c66c 	.word	0x0000c66c
    96c4:	0000df5c 	.word	0x0000df5c
    96c8:	0000cb38 	.word	0x0000cb38
    96cc:	0000e058 	.word	0x0000e058

000096d0 <z_impl_k_thread_join>:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, abort, thread);
}
#endif

int z_impl_k_thread_join(struct k_thread *thread, k_timeout_t timeout)
{
    96d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96d4:	4604      	mov	r4, r0
    96d6:	4616      	mov	r6, r2
    96d8:	461d      	mov	r5, r3
	__asm__ volatile(
    96da:	f04f 0320 	mov.w	r3, #32
    96de:	f3ef 8711 	mrs	r7, BASEPRI
    96e2:	f383 8812 	msr	BASEPRI_MAX, r3
    96e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96ea:	4844      	ldr	r0, [pc, #272]	; (97fc <z_impl_k_thread_join+0x12c>)
    96ec:	f7fd ffe8 	bl	76c0 <z_spin_lock_valid>
    96f0:	b358      	cbz	r0, 974a <z_impl_k_thread_join+0x7a>
	z_spin_lock_set_owner(l);
    96f2:	4842      	ldr	r0, [pc, #264]	; (97fc <z_impl_k_thread_join+0x12c>)
    96f4:	f7fe f804 	bl	7700 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);
	int ret = 0;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, join, thread, timeout);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    96f8:	7b61      	ldrb	r1, [r4, #13]
    96fa:	f011 0f08 	tst.w	r1, #8
    96fe:	d16a      	bne.n	97d6 <z_impl_k_thread_join+0x106>
		ret = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9700:	ea55 0306 	orrs.w	r3, r5, r6
    9704:	d054      	beq.n	97b0 <z_impl_k_thread_join+0xe0>
		ret = -EBUSY;
	} else if ((thread == _current) ||
    9706:	4b3e      	ldr	r3, [pc, #248]	; (9800 <z_impl_k_thread_join+0x130>)
    9708:	689b      	ldr	r3, [r3, #8]
    970a:	42a3      	cmp	r3, r4
    970c:	d05d      	beq.n	97ca <z_impl_k_thread_join+0xfa>
		   (thread->base.pended_on == &_current->join_queue)) {
    970e:	68a2      	ldr	r2, [r4, #8]
    9710:	3358      	adds	r3, #88	; 0x58
	} else if ((thread == _current) ||
    9712:	429a      	cmp	r2, r3
    9714:	d05c      	beq.n	97d0 <z_impl_k_thread_join+0x100>
    9716:	f3ef 8305 	mrs	r3, IPSR
		ret = -EDEADLK;
	} else {
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
    971a:	bb3b      	cbnz	r3, 976c <z_impl_k_thread_join+0x9c>
		add_to_waitq_locked(_current, &thread->join_queue);
    971c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 9800 <z_impl_k_thread_join+0x130>
    9720:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9724:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9728:	f7ff f9c8 	bl	8abc <add_to_waitq_locked>
		add_thread_timeout(_current, timeout);
    972c:	4632      	mov	r2, r6
    972e:	462b      	mov	r3, r5
    9730:	f8d8 0008 	ldr.w	r0, [r8, #8]
    9734:	f7fe fcec 	bl	8110 <add_thread_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9738:	4830      	ldr	r0, [pc, #192]	; (97fc <z_impl_k_thread_join+0x12c>)
    973a:	f7fd ffd1 	bl	76e0 <z_spin_unlock_valid>
    973e:	b338      	cbz	r0, 9790 <z_impl_k_thread_join+0xc0>
    9740:	4638      	mov	r0, r7
    9742:	f7f9 fbd1 	bl	2ee8 <arch_swap>
    9746:	4604      	mov	r4, r0

		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_thread, join, thread, timeout);
		ret = z_swap(&sched_spinlock, key);
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, join, thread, timeout, ret);

		return ret;
    9748:	e03c      	b.n	97c4 <z_impl_k_thread_join+0xf4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    974a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9804 <z_impl_k_thread_join+0x134>
    974e:	238e      	movs	r3, #142	; 0x8e
    9750:	4642      	mov	r2, r8
    9752:	492d      	ldr	r1, [pc, #180]	; (9808 <z_impl_k_thread_join+0x138>)
    9754:	482d      	ldr	r0, [pc, #180]	; (980c <z_impl_k_thread_join+0x13c>)
    9756:	f001 f9c3 	bl	aae0 <assert_print>
    975a:	4928      	ldr	r1, [pc, #160]	; (97fc <z_impl_k_thread_join+0x12c>)
    975c:	482c      	ldr	r0, [pc, #176]	; (9810 <z_impl_k_thread_join+0x140>)
    975e:	f001 f9bf 	bl	aae0 <assert_print>
    9762:	218e      	movs	r1, #142	; 0x8e
    9764:	4640      	mov	r0, r8
    9766:	f001 f9b4 	bl	aad2 <assert_post_action>
    976a:	e7c2      	b.n	96f2 <z_impl_k_thread_join+0x22>
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
    976c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 9814 <z_impl_k_thread_join+0x144>
    9770:	f240 63cb 	movw	r3, #1739	; 0x6cb
    9774:	4642      	mov	r2, r8
    9776:	4928      	ldr	r1, [pc, #160]	; (9818 <z_impl_k_thread_join+0x148>)
    9778:	4824      	ldr	r0, [pc, #144]	; (980c <z_impl_k_thread_join+0x13c>)
    977a:	f001 f9b1 	bl	aae0 <assert_print>
    977e:	4827      	ldr	r0, [pc, #156]	; (981c <z_impl_k_thread_join+0x14c>)
    9780:	f001 f9ae 	bl	aae0 <assert_print>
    9784:	f240 61cb 	movw	r1, #1739	; 0x6cb
    9788:	4640      	mov	r0, r8
    978a:	f001 f9a2 	bl	aad2 <assert_post_action>
    978e:	e7c5      	b.n	971c <z_impl_k_thread_join+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9790:	4c1c      	ldr	r4, [pc, #112]	; (9804 <z_impl_k_thread_join+0x134>)
    9792:	23d0      	movs	r3, #208	; 0xd0
    9794:	4622      	mov	r2, r4
    9796:	4922      	ldr	r1, [pc, #136]	; (9820 <z_impl_k_thread_join+0x150>)
    9798:	481c      	ldr	r0, [pc, #112]	; (980c <z_impl_k_thread_join+0x13c>)
    979a:	f001 f9a1 	bl	aae0 <assert_print>
    979e:	4917      	ldr	r1, [pc, #92]	; (97fc <z_impl_k_thread_join+0x12c>)
    97a0:	4820      	ldr	r0, [pc, #128]	; (9824 <z_impl_k_thread_join+0x154>)
    97a2:	f001 f99d 	bl	aae0 <assert_print>
    97a6:	21d0      	movs	r1, #208	; 0xd0
    97a8:	4620      	mov	r0, r4
    97aa:	f001 f992 	bl	aad2 <assert_post_action>
    97ae:	e7c7      	b.n	9740 <z_impl_k_thread_join+0x70>
		ret = -EBUSY;
    97b0:	f06f 040f 	mvn.w	r4, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97b4:	4811      	ldr	r0, [pc, #68]	; (97fc <z_impl_k_thread_join+0x12c>)
    97b6:	f7fd ff93 	bl	76e0 <z_spin_unlock_valid>
    97ba:	b170      	cbz	r0, 97da <z_impl_k_thread_join+0x10a>
	__asm__ volatile(
    97bc:	f387 8811 	msr	BASEPRI, r7
    97c0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, join, thread, timeout, ret);

	k_spin_unlock(&sched_spinlock, key);
	return ret;
}
    97c4:	4620      	mov	r0, r4
    97c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDEADLK;
    97ca:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    97ce:	e7f1      	b.n	97b4 <z_impl_k_thread_join+0xe4>
    97d0:	f06f 042c 	mvn.w	r4, #44	; 0x2c
    97d4:	e7ee      	b.n	97b4 <z_impl_k_thread_join+0xe4>
		ret = 0;
    97d6:	2400      	movs	r4, #0
    97d8:	e7ec      	b.n	97b4 <z_impl_k_thread_join+0xe4>
    97da:	4d0a      	ldr	r5, [pc, #40]	; (9804 <z_impl_k_thread_join+0x134>)
    97dc:	23b9      	movs	r3, #185	; 0xb9
    97de:	462a      	mov	r2, r5
    97e0:	490f      	ldr	r1, [pc, #60]	; (9820 <z_impl_k_thread_join+0x150>)
    97e2:	480a      	ldr	r0, [pc, #40]	; (980c <z_impl_k_thread_join+0x13c>)
    97e4:	f001 f97c 	bl	aae0 <assert_print>
    97e8:	4904      	ldr	r1, [pc, #16]	; (97fc <z_impl_k_thread_join+0x12c>)
    97ea:	480e      	ldr	r0, [pc, #56]	; (9824 <z_impl_k_thread_join+0x154>)
    97ec:	f001 f978 	bl	aae0 <assert_print>
    97f0:	21b9      	movs	r1, #185	; 0xb9
    97f2:	4628      	mov	r0, r5
    97f4:	f001 f96d 	bl	aad2 <assert_post_action>
    97f8:	e7e0      	b.n	97bc <z_impl_k_thread_join+0xec>
    97fa:	bf00      	nop
    97fc:	200050e8 	.word	0x200050e8
    9800:	200050ac 	.word	0x200050ac
    9804:	0000c624 	.word	0x0000c624
    9808:	0000c684 	.word	0x0000c684
    980c:	0000c478 	.word	0x0000c478
    9810:	0000c69c 	.word	0x0000c69c
    9814:	0000df5c 	.word	0x0000df5c
    9818:	0000dd6c 	.word	0x0000dd6c
    981c:	0000e07c 	.word	0x0000e07c
    9820:	0000c654 	.word	0x0000c654
    9824:	0000c66c 	.word	0x0000c66c

00009828 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9828:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    982a:	4806      	ldr	r0, [pc, #24]	; (9844 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    982c:	4a06      	ldr	r2, [pc, #24]	; (9848 <z_data_copy+0x20>)
    982e:	1a12      	subs	r2, r2, r0
    9830:	4906      	ldr	r1, [pc, #24]	; (984c <z_data_copy+0x24>)
    9832:	f002 fa93 	bl	bd5c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9836:	4a06      	ldr	r2, [pc, #24]	; (9850 <z_data_copy+0x28>)
    9838:	4906      	ldr	r1, [pc, #24]	; (9854 <z_data_copy+0x2c>)
    983a:	4807      	ldr	r0, [pc, #28]	; (9858 <z_data_copy+0x30>)
    983c:	f002 fa8e 	bl	bd5c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9840:	bd08      	pop	{r3, pc}
    9842:	bf00      	nop
    9844:	20000000 	.word	0x20000000
    9848:	20004240 	.word	0x20004240
    984c:	0000e338 	.word	0x0000e338
    9850:	00000000 	.word	0x00000000
    9854:	0000e338 	.word	0x0000e338
    9858:	20000000 	.word	0x20000000

0000985c <first>:
	return list->head == list;
    985c:	4b03      	ldr	r3, [pc, #12]	; (986c <first+0x10>)
    985e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9860:	4298      	cmp	r0, r3
    9862:	d000      	beq.n	9866 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    9864:	4770      	bx	lr
    9866:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    9868:	e7fc      	b.n	9864 <first+0x8>
    986a:	bf00      	nop
    986c:	200040e4 	.word	0x200040e4

00009870 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9870:	b130      	cbz	r0, 9880 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    9872:	4a04      	ldr	r2, [pc, #16]	; (9884 <next+0x14>)
    9874:	6852      	ldr	r2, [r2, #4]
    9876:	4290      	cmp	r0, r2
    9878:	d001      	beq.n	987e <next+0xe>
    987a:	6800      	ldr	r0, [r0, #0]
    987c:	4770      	bx	lr
    987e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    9880:	4770      	bx	lr
    9882:	bf00      	nop
    9884:	200040e4 	.word	0x200040e4

00009888 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    9888:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    988a:	4b04      	ldr	r3, [pc, #16]	; (989c <elapsed+0x14>)
    988c:	681b      	ldr	r3, [r3, #0]
    988e:	b10b      	cbz	r3, 9894 <elapsed+0xc>
    9890:	2000      	movs	r0, #0
}
    9892:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9894:	f7fb fbac 	bl	4ff0 <sys_clock_elapsed>
    9898:	e7fb      	b.n	9892 <elapsed+0xa>
    989a:	bf00      	nop
    989c:	200050f4 	.word	0x200050f4

000098a0 <next_timeout>:

static int32_t next_timeout(void)
{
    98a0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    98a2:	f7ff ffdb 	bl	985c <first>
    98a6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    98a8:	f7ff ffee 	bl	9888 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    98ac:	b17c      	cbz	r4, 98ce <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    98ae:	6923      	ldr	r3, [r4, #16]
    98b0:	6962      	ldr	r2, [r4, #20]
    98b2:	1a1b      	subs	r3, r3, r0
    98b4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    98b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    98bc:	f170 0200 	sbcs.w	r2, r0, #0
    98c0:	da08      	bge.n	98d4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    98c2:	2800      	cmp	r0, #0
    98c4:	db01      	blt.n	98ca <next_timeout+0x2a>
    98c6:	4618      	mov	r0, r3
    98c8:	e006      	b.n	98d8 <next_timeout+0x38>
    98ca:	2300      	movs	r3, #0
    98cc:	e7fb      	b.n	98c6 <next_timeout+0x26>
		ret = MAX_WAIT;
    98ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    98d2:	e001      	b.n	98d8 <next_timeout+0x38>
    98d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    98d8:	4b03      	ldr	r3, [pc, #12]	; (98e8 <next_timeout+0x48>)
    98da:	691b      	ldr	r3, [r3, #16]
    98dc:	b113      	cbz	r3, 98e4 <next_timeout+0x44>
    98de:	4283      	cmp	r3, r0
    98e0:	da00      	bge.n	98e4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    98e2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    98e4:	bd10      	pop	{r4, pc}
    98e6:	bf00      	nop
    98e8:	200050ac 	.word	0x200050ac

000098ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    98ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    98f0:	bf08      	it	eq
    98f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    98f6:	f000 80c1 	beq.w	9a7c <z_add_timeout+0x190>
{
    98fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98fe:	4604      	mov	r4, r0
    9900:	460f      	mov	r7, r1
    9902:	4692      	mov	sl, r2
    9904:	461d      	mov	r5, r3
	return node->next != NULL;
    9906:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9908:	b173      	cbz	r3, 9928 <z_add_timeout+0x3c>
    990a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 9a80 <z_add_timeout+0x194>
    990e:	2363      	movs	r3, #99	; 0x63
    9910:	4642      	mov	r2, r8
    9912:	495c      	ldr	r1, [pc, #368]	; (9a84 <z_add_timeout+0x198>)
    9914:	485c      	ldr	r0, [pc, #368]	; (9a88 <z_add_timeout+0x19c>)
    9916:	f001 f8e3 	bl	aae0 <assert_print>
    991a:	485c      	ldr	r0, [pc, #368]	; (9a8c <z_add_timeout+0x1a0>)
    991c:	f001 f8e0 	bl	aae0 <assert_print>
    9920:	2163      	movs	r1, #99	; 0x63
    9922:	4640      	mov	r0, r8
    9924:	f001 f8d5 	bl	aad2 <assert_post_action>
	to->fn = fn;
    9928:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    992a:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    992e:	f04f 0320 	mov.w	r3, #32
    9932:	f3ef 8711 	mrs	r7, BASEPRI
    9936:	f383 8812 	msr	BASEPRI_MAX, r3
    993a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    993e:	4854      	ldr	r0, [pc, #336]	; (9a90 <z_add_timeout+0x1a4>)
    9940:	f7fd febe 	bl	76c0 <z_spin_lock_valid>
    9944:	b118      	cbz	r0, 994e <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    9946:	4852      	ldr	r0, [pc, #328]	; (9a90 <z_add_timeout+0x1a4>)
    9948:	f7fd feda 	bl	7700 <z_spin_lock_set_owner>
	return k;
    994c:	e038      	b.n	99c0 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    994e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9a94 <z_add_timeout+0x1a8>
    9952:	238e      	movs	r3, #142	; 0x8e
    9954:	464a      	mov	r2, r9
    9956:	4950      	ldr	r1, [pc, #320]	; (9a98 <z_add_timeout+0x1ac>)
    9958:	484b      	ldr	r0, [pc, #300]	; (9a88 <z_add_timeout+0x19c>)
    995a:	f001 f8c1 	bl	aae0 <assert_print>
    995e:	494c      	ldr	r1, [pc, #304]	; (9a90 <z_add_timeout+0x1a4>)
    9960:	484e      	ldr	r0, [pc, #312]	; (9a9c <z_add_timeout+0x1b0>)
    9962:	f001 f8bd 	bl	aae0 <assert_print>
    9966:	218e      	movs	r1, #142	; 0x8e
    9968:	4648      	mov	r0, r9
    996a:	f001 f8b2 	bl	aad2 <assert_post_action>
    996e:	e7ea      	b.n	9946 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    9970:	f11a 0801 	adds.w	r8, sl, #1
    9974:	f145 0900 	adc.w	r9, r5, #0
    9978:	f7ff ff86 	bl	9888 <elapsed>
    997c:	eb18 0300 	adds.w	r3, r8, r0
    9980:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    9984:	6123      	str	r3, [r4, #16]
    9986:	6160      	str	r0, [r4, #20]
    9988:	e03d      	b.n	9a06 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    998a:	1a51      	subs	r1, r2, r1
    998c:	eb66 0303 	sbc.w	r3, r6, r3
    9990:	6101      	str	r1, [r0, #16]
    9992:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    9994:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    9996:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9998:	6020      	str	r0, [r4, #0]
	prev->next = node;
    999a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    999c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    999e:	2800      	cmp	r0, #0
    99a0:	d045      	beq.n	9a2e <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    99a2:	f7ff ff5b 	bl	985c <first>
    99a6:	4284      	cmp	r4, r0
    99a8:	d048      	beq.n	9a3c <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99aa:	4839      	ldr	r0, [pc, #228]	; (9a90 <z_add_timeout+0x1a4>)
    99ac:	f7fd fe98 	bl	76e0 <z_spin_unlock_valid>
    99b0:	2800      	cmp	r0, #0
    99b2:	d050      	beq.n	9a56 <z_add_timeout+0x16a>
	__asm__ volatile(
    99b4:	f387 8811 	msr	BASEPRI, r7
    99b8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    99bc:	f04f 0801 	mov.w	r8, #1
    99c0:	f1b8 0f00 	cmp.w	r8, #0
    99c4:	d158      	bne.n	9a78 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    99c6:	4653      	mov	r3, sl
    99c8:	f06f 0101 	mvn.w	r1, #1
    99cc:	ebb1 010a 	subs.w	r1, r1, sl
    99d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99d4:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    99d8:	2a00      	cmp	r2, #0
    99da:	dbc9      	blt.n	9970 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    99dc:	4a30      	ldr	r2, [pc, #192]	; (9aa0 <z_add_timeout+0x1b4>)
    99de:	6811      	ldr	r1, [r2, #0]
    99e0:	6852      	ldr	r2, [r2, #4]
    99e2:	185b      	adds	r3, r3, r1
    99e4:	eb42 0205 	adc.w	r2, r2, r5
    99e8:	f06f 0101 	mvn.w	r1, #1
    99ec:	1acb      	subs	r3, r1, r3
    99ee:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    99f2:	4618      	mov	r0, r3
    99f4:	4611      	mov	r1, r2
    99f6:	2b01      	cmp	r3, #1
    99f8:	f172 0300 	sbcs.w	r3, r2, #0
    99fc:	da01      	bge.n	9a02 <z_add_timeout+0x116>
    99fe:	2001      	movs	r0, #1
    9a00:	2100      	movs	r1, #0
    9a02:	6120      	str	r0, [r4, #16]
    9a04:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9a06:	f7ff ff29 	bl	985c <first>
    9a0a:	2800      	cmp	r0, #0
    9a0c:	d0c7      	beq.n	999e <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    9a0e:	6902      	ldr	r2, [r0, #16]
    9a10:	6946      	ldr	r6, [r0, #20]
    9a12:	6921      	ldr	r1, [r4, #16]
    9a14:	6963      	ldr	r3, [r4, #20]
    9a16:	4291      	cmp	r1, r2
    9a18:	eb73 0c06 	sbcs.w	ip, r3, r6
    9a1c:	dbb5      	blt.n	998a <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    9a1e:	1a89      	subs	r1, r1, r2
    9a20:	eb63 0306 	sbc.w	r3, r3, r6
    9a24:	6121      	str	r1, [r4, #16]
    9a26:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9a28:	f7ff ff22 	bl	9870 <next>
    9a2c:	e7ed      	b.n	9a0a <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    9a2e:	4b1d      	ldr	r3, [pc, #116]	; (9aa4 <z_add_timeout+0x1b8>)
    9a30:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    9a32:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    9a34:	6062      	str	r2, [r4, #4]
	tail->next = node;
    9a36:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9a38:	605c      	str	r4, [r3, #4]
}
    9a3a:	e7b2      	b.n	99a2 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9a3c:	f7ff ff30 	bl	98a0 <next_timeout>

			if (next_time == 0 ||
    9a40:	4603      	mov	r3, r0
    9a42:	b118      	cbz	r0, 9a4c <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    9a44:	4a18      	ldr	r2, [pc, #96]	; (9aa8 <z_add_timeout+0x1bc>)
    9a46:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    9a48:	4282      	cmp	r2, r0
    9a4a:	d0ae      	beq.n	99aa <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    9a4c:	2100      	movs	r1, #0
    9a4e:	4618      	mov	r0, r3
    9a50:	f7fb fa9c 	bl	4f8c <sys_clock_set_timeout>
    9a54:	e7a9      	b.n	99aa <z_add_timeout+0xbe>
    9a56:	f8df 803c 	ldr.w	r8, [pc, #60]	; 9a94 <z_add_timeout+0x1a8>
    9a5a:	23b9      	movs	r3, #185	; 0xb9
    9a5c:	4642      	mov	r2, r8
    9a5e:	4913      	ldr	r1, [pc, #76]	; (9aac <z_add_timeout+0x1c0>)
    9a60:	4809      	ldr	r0, [pc, #36]	; (9a88 <z_add_timeout+0x19c>)
    9a62:	f001 f83d 	bl	aae0 <assert_print>
    9a66:	490a      	ldr	r1, [pc, #40]	; (9a90 <z_add_timeout+0x1a4>)
    9a68:	4811      	ldr	r0, [pc, #68]	; (9ab0 <z_add_timeout+0x1c4>)
    9a6a:	f001 f839 	bl	aae0 <assert_print>
    9a6e:	21b9      	movs	r1, #185	; 0xb9
    9a70:	4640      	mov	r0, r8
    9a72:	f001 f82e 	bl	aad2 <assert_post_action>
    9a76:	e79d      	b.n	99b4 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a7c:	4770      	bx	lr
    9a7e:	bf00      	nop
    9a80:	0000e094 	.word	0x0000e094
    9a84:	0000e0b8 	.word	0x0000e0b8
    9a88:	0000c478 	.word	0x0000c478
    9a8c:	0000deb4 	.word	0x0000deb4
    9a90:	200050f8 	.word	0x200050f8
    9a94:	0000c624 	.word	0x0000c624
    9a98:	0000c684 	.word	0x0000c684
    9a9c:	0000c69c 	.word	0x0000c69c
    9aa0:	20004570 	.word	0x20004570
    9aa4:	200040e4 	.word	0x200040e4
    9aa8:	200050ac 	.word	0x200050ac
    9aac:	0000c654 	.word	0x0000c654
    9ab0:	0000c66c 	.word	0x0000c66c

00009ab4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    9ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ab8:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    9aba:	2400      	movs	r4, #0
	__asm__ volatile(
    9abc:	f04f 0320 	mov.w	r3, #32
    9ac0:	f3ef 8711 	mrs	r7, BASEPRI
    9ac4:	f383 8812 	msr	BASEPRI_MAX, r3
    9ac8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9acc:	481f      	ldr	r0, [pc, #124]	; (9b4c <z_abort_timeout+0x98>)
    9ace:	f7fd fdf7 	bl	76c0 <z_spin_lock_valid>
    9ad2:	b128      	cbz	r0, 9ae0 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    9ad4:	481d      	ldr	r0, [pc, #116]	; (9b4c <z_abort_timeout+0x98>)
    9ad6:	f7fd fe13 	bl	7700 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    9ada:	f06f 0815 	mvn.w	r8, #21
	return k;
    9ade:	e018      	b.n	9b12 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ae0:	4e1b      	ldr	r6, [pc, #108]	; (9b50 <z_abort_timeout+0x9c>)
    9ae2:	238e      	movs	r3, #142	; 0x8e
    9ae4:	4632      	mov	r2, r6
    9ae6:	491b      	ldr	r1, [pc, #108]	; (9b54 <z_abort_timeout+0xa0>)
    9ae8:	481b      	ldr	r0, [pc, #108]	; (9b58 <z_abort_timeout+0xa4>)
    9aea:	f000 fff9 	bl	aae0 <assert_print>
    9aee:	4917      	ldr	r1, [pc, #92]	; (9b4c <z_abort_timeout+0x98>)
    9af0:	481a      	ldr	r0, [pc, #104]	; (9b5c <z_abort_timeout+0xa8>)
    9af2:	f000 fff5 	bl	aae0 <assert_print>
    9af6:	218e      	movs	r1, #142	; 0x8e
    9af8:	4630      	mov	r0, r6
    9afa:	f000 ffea 	bl	aad2 <assert_post_action>
    9afe:	e7e9      	b.n	9ad4 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b00:	4812      	ldr	r0, [pc, #72]	; (9b4c <z_abort_timeout+0x98>)
    9b02:	f7fd fded 	bl	76e0 <z_spin_unlock_valid>
    9b06:	b170      	cbz	r0, 9b26 <z_abort_timeout+0x72>
	__asm__ volatile(
    9b08:	f387 8811 	msr	BASEPRI, r7
    9b0c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9b10:	2401      	movs	r4, #1
    9b12:	4626      	mov	r6, r4
    9b14:	b9bc      	cbnz	r4, 9b46 <z_abort_timeout+0x92>
	return node->next != NULL;
    9b16:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d0f1      	beq.n	9b00 <z_abort_timeout+0x4c>
			remove_timeout(to);
    9b1c:	4628      	mov	r0, r5
    9b1e:	f002 f9bf 	bl	bea0 <remove_timeout>
			ret = 0;
    9b22:	46b0      	mov	r8, r6
    9b24:	e7ec      	b.n	9b00 <z_abort_timeout+0x4c>
    9b26:	4c0a      	ldr	r4, [pc, #40]	; (9b50 <z_abort_timeout+0x9c>)
    9b28:	23b9      	movs	r3, #185	; 0xb9
    9b2a:	4622      	mov	r2, r4
    9b2c:	490c      	ldr	r1, [pc, #48]	; (9b60 <z_abort_timeout+0xac>)
    9b2e:	480a      	ldr	r0, [pc, #40]	; (9b58 <z_abort_timeout+0xa4>)
    9b30:	f000 ffd6 	bl	aae0 <assert_print>
    9b34:	4905      	ldr	r1, [pc, #20]	; (9b4c <z_abort_timeout+0x98>)
    9b36:	480b      	ldr	r0, [pc, #44]	; (9b64 <z_abort_timeout+0xb0>)
    9b38:	f000 ffd2 	bl	aae0 <assert_print>
    9b3c:	21b9      	movs	r1, #185	; 0xb9
    9b3e:	4620      	mov	r0, r4
    9b40:	f000 ffc7 	bl	aad2 <assert_post_action>
    9b44:	e7e0      	b.n	9b08 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    9b46:	4640      	mov	r0, r8
    9b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b4c:	200050f8 	.word	0x200050f8
    9b50:	0000c624 	.word	0x0000c624
    9b54:	0000c684 	.word	0x0000c684
    9b58:	0000c478 	.word	0x0000c478
    9b5c:	0000c69c 	.word	0x0000c69c
    9b60:	0000c654 	.word	0x0000c654
    9b64:	0000c66c 	.word	0x0000c66c

00009b68 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    9b68:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    9b6a:	2500      	movs	r5, #0
	__asm__ volatile(
    9b6c:	f04f 0320 	mov.w	r3, #32
    9b70:	f3ef 8611 	mrs	r6, BASEPRI
    9b74:	f383 8812 	msr	BASEPRI_MAX, r3
    9b78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b7c:	481c      	ldr	r0, [pc, #112]	; (9bf0 <z_get_next_timeout_expiry+0x88>)
    9b7e:	f7fd fd9f 	bl	76c0 <z_spin_lock_valid>
    9b82:	b128      	cbz	r0, 9b90 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    9b84:	481a      	ldr	r0, [pc, #104]	; (9bf0 <z_get_next_timeout_expiry+0x88>)
    9b86:	f7fd fdbb 	bl	7700 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    9b8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    9b8e:	e014      	b.n	9bba <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b90:	4c18      	ldr	r4, [pc, #96]	; (9bf4 <z_get_next_timeout_expiry+0x8c>)
    9b92:	238e      	movs	r3, #142	; 0x8e
    9b94:	4622      	mov	r2, r4
    9b96:	4918      	ldr	r1, [pc, #96]	; (9bf8 <z_get_next_timeout_expiry+0x90>)
    9b98:	4818      	ldr	r0, [pc, #96]	; (9bfc <z_get_next_timeout_expiry+0x94>)
    9b9a:	f000 ffa1 	bl	aae0 <assert_print>
    9b9e:	4914      	ldr	r1, [pc, #80]	; (9bf0 <z_get_next_timeout_expiry+0x88>)
    9ba0:	4817      	ldr	r0, [pc, #92]	; (9c00 <z_get_next_timeout_expiry+0x98>)
    9ba2:	f000 ff9d 	bl	aae0 <assert_print>
    9ba6:	218e      	movs	r1, #142	; 0x8e
    9ba8:	4620      	mov	r0, r4
    9baa:	f000 ff92 	bl	aad2 <assert_post_action>
    9bae:	e7e9      	b.n	9b84 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    9bb0:	f386 8811 	msr	BASEPRI, r6
    9bb4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9bb8:	2501      	movs	r5, #1
    9bba:	b9bd      	cbnz	r5, 9bec <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    9bbc:	f7ff fe70 	bl	98a0 <next_timeout>
    9bc0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bc2:	480b      	ldr	r0, [pc, #44]	; (9bf0 <z_get_next_timeout_expiry+0x88>)
    9bc4:	f7fd fd8c 	bl	76e0 <z_spin_unlock_valid>
    9bc8:	2800      	cmp	r0, #0
    9bca:	d1f1      	bne.n	9bb0 <z_get_next_timeout_expiry+0x48>
    9bcc:	4d09      	ldr	r5, [pc, #36]	; (9bf4 <z_get_next_timeout_expiry+0x8c>)
    9bce:	23b9      	movs	r3, #185	; 0xb9
    9bd0:	462a      	mov	r2, r5
    9bd2:	490c      	ldr	r1, [pc, #48]	; (9c04 <z_get_next_timeout_expiry+0x9c>)
    9bd4:	4809      	ldr	r0, [pc, #36]	; (9bfc <z_get_next_timeout_expiry+0x94>)
    9bd6:	f000 ff83 	bl	aae0 <assert_print>
    9bda:	4905      	ldr	r1, [pc, #20]	; (9bf0 <z_get_next_timeout_expiry+0x88>)
    9bdc:	480a      	ldr	r0, [pc, #40]	; (9c08 <z_get_next_timeout_expiry+0xa0>)
    9bde:	f000 ff7f 	bl	aae0 <assert_print>
    9be2:	21b9      	movs	r1, #185	; 0xb9
    9be4:	4628      	mov	r0, r5
    9be6:	f000 ff74 	bl	aad2 <assert_post_action>
    9bea:	e7e1      	b.n	9bb0 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9bec:	4620      	mov	r0, r4
    9bee:	bd70      	pop	{r4, r5, r6, pc}
    9bf0:	200050f8 	.word	0x200050f8
    9bf4:	0000c624 	.word	0x0000c624
    9bf8:	0000c684 	.word	0x0000c684
    9bfc:	0000c478 	.word	0x0000c478
    9c00:	0000c69c 	.word	0x0000c69c
    9c04:	0000c654 	.word	0x0000c654
    9c08:	0000c66c 	.word	0x0000c66c

00009c0c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c10:	4606      	mov	r6, r0
    9c12:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    9c14:	2500      	movs	r5, #0
	__asm__ volatile(
    9c16:	f04f 0320 	mov.w	r3, #32
    9c1a:	f3ef 8711 	mrs	r7, BASEPRI
    9c1e:	f383 8812 	msr	BASEPRI_MAX, r3
    9c22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c26:	4825      	ldr	r0, [pc, #148]	; (9cbc <z_set_timeout_expiry+0xb0>)
    9c28:	f7fd fd4a 	bl	76c0 <z_spin_lock_valid>
    9c2c:	b118      	cbz	r0, 9c36 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    9c2e:	4823      	ldr	r0, [pc, #140]	; (9cbc <z_set_timeout_expiry+0xb0>)
    9c30:	f7fd fd66 	bl	7700 <z_spin_lock_set_owner>
	return k;
    9c34:	e01e      	b.n	9c74 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c36:	4c22      	ldr	r4, [pc, #136]	; (9cc0 <z_set_timeout_expiry+0xb4>)
    9c38:	238e      	movs	r3, #142	; 0x8e
    9c3a:	4622      	mov	r2, r4
    9c3c:	4921      	ldr	r1, [pc, #132]	; (9cc4 <z_set_timeout_expiry+0xb8>)
    9c3e:	4822      	ldr	r0, [pc, #136]	; (9cc8 <z_set_timeout_expiry+0xbc>)
    9c40:	f000 ff4e 	bl	aae0 <assert_print>
    9c44:	491d      	ldr	r1, [pc, #116]	; (9cbc <z_set_timeout_expiry+0xb0>)
    9c46:	4821      	ldr	r0, [pc, #132]	; (9ccc <z_set_timeout_expiry+0xc0>)
    9c48:	f000 ff4a 	bl	aae0 <assert_print>
    9c4c:	218e      	movs	r1, #142	; 0x8e
    9c4e:	4620      	mov	r0, r4
    9c50:	f000 ff3f 	bl	aad2 <assert_post_action>
    9c54:	e7eb      	b.n	9c2e <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    9c56:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    9c58:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9c5c:	2801      	cmp	r0, #1
    9c5e:	dd00      	ble.n	9c62 <z_set_timeout_expiry+0x56>
    9c60:	b99c      	cbnz	r4, 9c8a <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c62:	4816      	ldr	r0, [pc, #88]	; (9cbc <z_set_timeout_expiry+0xb0>)
    9c64:	f7fd fd3c 	bl	76e0 <z_spin_unlock_valid>
    9c68:	b1b0      	cbz	r0, 9c98 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    9c6a:	f387 8811 	msr	BASEPRI, r7
    9c6e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9c72:	2501      	movs	r5, #1
    9c74:	462c      	mov	r4, r5
    9c76:	b9fd      	cbnz	r5, 9cb8 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    9c78:	f7ff fe12 	bl	98a0 <next_timeout>
			      || (ticks <= next_to);
    9c7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9c80:	d0e9      	beq.n	9c56 <z_set_timeout_expiry+0x4a>
    9c82:	42b0      	cmp	r0, r6
    9c84:	dbe8      	blt.n	9c58 <z_set_timeout_expiry+0x4c>
    9c86:	2401      	movs	r4, #1
    9c88:	e7e6      	b.n	9c58 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9c8a:	4641      	mov	r1, r8
    9c8c:	42b0      	cmp	r0, r6
    9c8e:	bfa8      	it	ge
    9c90:	4630      	movge	r0, r6
    9c92:	f7fb f97b 	bl	4f8c <sys_clock_set_timeout>
    9c96:	e7e4      	b.n	9c62 <z_set_timeout_expiry+0x56>
    9c98:	4c09      	ldr	r4, [pc, #36]	; (9cc0 <z_set_timeout_expiry+0xb4>)
    9c9a:	23b9      	movs	r3, #185	; 0xb9
    9c9c:	4622      	mov	r2, r4
    9c9e:	490c      	ldr	r1, [pc, #48]	; (9cd0 <z_set_timeout_expiry+0xc4>)
    9ca0:	4809      	ldr	r0, [pc, #36]	; (9cc8 <z_set_timeout_expiry+0xbc>)
    9ca2:	f000 ff1d 	bl	aae0 <assert_print>
    9ca6:	4905      	ldr	r1, [pc, #20]	; (9cbc <z_set_timeout_expiry+0xb0>)
    9ca8:	480a      	ldr	r0, [pc, #40]	; (9cd4 <z_set_timeout_expiry+0xc8>)
    9caa:	f000 ff19 	bl	aae0 <assert_print>
    9cae:	21b9      	movs	r1, #185	; 0xb9
    9cb0:	4620      	mov	r0, r4
    9cb2:	f000 ff0e 	bl	aad2 <assert_post_action>
    9cb6:	e7d8      	b.n	9c6a <z_set_timeout_expiry+0x5e>
		}
	}
}
    9cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cbc:	200050f8 	.word	0x200050f8
    9cc0:	0000c624 	.word	0x0000c624
    9cc4:	0000c684 	.word	0x0000c684
    9cc8:	0000c478 	.word	0x0000c478
    9ccc:	0000c69c 	.word	0x0000c69c
    9cd0:	0000c654 	.word	0x0000c654
    9cd4:	0000c66c 	.word	0x0000c66c

00009cd8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9cd8:	b570      	push	{r4, r5, r6, lr}
    9cda:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9cdc:	f7fe fcb2 	bl	8644 <z_time_slice>
	__asm__ volatile(
    9ce0:	f04f 0320 	mov.w	r3, #32
    9ce4:	f3ef 8511 	mrs	r5, BASEPRI
    9ce8:	f383 8812 	msr	BASEPRI_MAX, r3
    9cec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cf0:	4854      	ldr	r0, [pc, #336]	; (9e44 <sys_clock_announce+0x16c>)
    9cf2:	f7fd fce5 	bl	76c0 <z_spin_lock_valid>
    9cf6:	b128      	cbz	r0, 9d04 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    9cf8:	4852      	ldr	r0, [pc, #328]	; (9e44 <sys_clock_announce+0x16c>)
    9cfa:	f7fd fd01 	bl	7700 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9cfe:	4b52      	ldr	r3, [pc, #328]	; (9e48 <sys_clock_announce+0x170>)
    9d00:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    9d02:	e022      	b.n	9d4a <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d04:	4e51      	ldr	r6, [pc, #324]	; (9e4c <sys_clock_announce+0x174>)
    9d06:	238e      	movs	r3, #142	; 0x8e
    9d08:	4632      	mov	r2, r6
    9d0a:	4951      	ldr	r1, [pc, #324]	; (9e50 <sys_clock_announce+0x178>)
    9d0c:	4851      	ldr	r0, [pc, #324]	; (9e54 <sys_clock_announce+0x17c>)
    9d0e:	f000 fee7 	bl	aae0 <assert_print>
    9d12:	494c      	ldr	r1, [pc, #304]	; (9e44 <sys_clock_announce+0x16c>)
    9d14:	4850      	ldr	r0, [pc, #320]	; (9e58 <sys_clock_announce+0x180>)
    9d16:	f000 fee3 	bl	aae0 <assert_print>
    9d1a:	218e      	movs	r1, #142	; 0x8e
    9d1c:	4630      	mov	r0, r6
    9d1e:	f000 fed8 	bl	aad2 <assert_post_action>
    9d22:	e7e9      	b.n	9cf8 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d24:	4e49      	ldr	r6, [pc, #292]	; (9e4c <sys_clock_announce+0x174>)
    9d26:	23b9      	movs	r3, #185	; 0xb9
    9d28:	4632      	mov	r2, r6
    9d2a:	494c      	ldr	r1, [pc, #304]	; (9e5c <sys_clock_announce+0x184>)
    9d2c:	4849      	ldr	r0, [pc, #292]	; (9e54 <sys_clock_announce+0x17c>)
    9d2e:	f000 fed7 	bl	aae0 <assert_print>
    9d32:	4944      	ldr	r1, [pc, #272]	; (9e44 <sys_clock_announce+0x16c>)
    9d34:	484a      	ldr	r0, [pc, #296]	; (9e60 <sys_clock_announce+0x188>)
    9d36:	f000 fed3 	bl	aae0 <assert_print>
    9d3a:	21b9      	movs	r1, #185	; 0xb9
    9d3c:	4630      	mov	r0, r6
    9d3e:	f000 fec8 	bl	aad2 <assert_post_action>
    9d42:	e027      	b.n	9d94 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    9d44:	483f      	ldr	r0, [pc, #252]	; (9e44 <sys_clock_announce+0x16c>)
    9d46:	f7fd fcdb 	bl	7700 <z_spin_lock_set_owner>
    9d4a:	f7ff fd87 	bl	985c <first>
    9d4e:	4604      	mov	r4, r0
    9d50:	2800      	cmp	r0, #0
    9d52:	d043      	beq.n	9ddc <sys_clock_announce+0x104>
    9d54:	6902      	ldr	r2, [r0, #16]
    9d56:	6941      	ldr	r1, [r0, #20]
    9d58:	4b3b      	ldr	r3, [pc, #236]	; (9e48 <sys_clock_announce+0x170>)
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	17d8      	asrs	r0, r3, #31
    9d5e:	4293      	cmp	r3, r2
    9d60:	eb70 0101 	sbcs.w	r1, r0, r1
    9d64:	db3a      	blt.n	9ddc <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9d66:	483f      	ldr	r0, [pc, #252]	; (9e64 <sys_clock_announce+0x18c>)
    9d68:	6801      	ldr	r1, [r0, #0]
    9d6a:	6846      	ldr	r6, [r0, #4]
    9d6c:	1889      	adds	r1, r1, r2
    9d6e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    9d72:	6001      	str	r1, [r0, #0]
    9d74:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    9d76:	1a9b      	subs	r3, r3, r2
    9d78:	4a33      	ldr	r2, [pc, #204]	; (9e48 <sys_clock_announce+0x170>)
    9d7a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    9d7c:	2200      	movs	r2, #0
    9d7e:	2300      	movs	r3, #0
    9d80:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    9d84:	4620      	mov	r0, r4
    9d86:	f002 f88b 	bl	bea0 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d8a:	482e      	ldr	r0, [pc, #184]	; (9e44 <sys_clock_announce+0x16c>)
    9d8c:	f7fd fca8 	bl	76e0 <z_spin_unlock_valid>
    9d90:	2800      	cmp	r0, #0
    9d92:	d0c7      	beq.n	9d24 <sys_clock_announce+0x4c>
	__asm__ volatile(
    9d94:	f385 8811 	msr	BASEPRI, r5
    9d98:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    9d9c:	68a3      	ldr	r3, [r4, #8]
    9d9e:	4620      	mov	r0, r4
    9da0:	4798      	blx	r3
	__asm__ volatile(
    9da2:	f04f 0320 	mov.w	r3, #32
    9da6:	f3ef 8511 	mrs	r5, BASEPRI
    9daa:	f383 8812 	msr	BASEPRI_MAX, r3
    9dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9db2:	4824      	ldr	r0, [pc, #144]	; (9e44 <sys_clock_announce+0x16c>)
    9db4:	f7fd fc84 	bl	76c0 <z_spin_lock_valid>
    9db8:	2800      	cmp	r0, #0
    9dba:	d1c3      	bne.n	9d44 <sys_clock_announce+0x6c>
    9dbc:	4c23      	ldr	r4, [pc, #140]	; (9e4c <sys_clock_announce+0x174>)
    9dbe:	238e      	movs	r3, #142	; 0x8e
    9dc0:	4622      	mov	r2, r4
    9dc2:	4923      	ldr	r1, [pc, #140]	; (9e50 <sys_clock_announce+0x178>)
    9dc4:	4823      	ldr	r0, [pc, #140]	; (9e54 <sys_clock_announce+0x17c>)
    9dc6:	f000 fe8b 	bl	aae0 <assert_print>
    9dca:	491e      	ldr	r1, [pc, #120]	; (9e44 <sys_clock_announce+0x16c>)
    9dcc:	4822      	ldr	r0, [pc, #136]	; (9e58 <sys_clock_announce+0x180>)
    9dce:	f000 fe87 	bl	aae0 <assert_print>
    9dd2:	218e      	movs	r1, #142	; 0x8e
    9dd4:	4620      	mov	r0, r4
    9dd6:	f000 fe7c 	bl	aad2 <assert_post_action>
    9dda:	e7b3      	b.n	9d44 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    9ddc:	b144      	cbz	r4, 9df0 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    9dde:	4b1a      	ldr	r3, [pc, #104]	; (9e48 <sys_clock_announce+0x170>)
    9de0:	6819      	ldr	r1, [r3, #0]
    9de2:	6923      	ldr	r3, [r4, #16]
    9de4:	6962      	ldr	r2, [r4, #20]
    9de6:	1a5b      	subs	r3, r3, r1
    9de8:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    9dec:	6123      	str	r3, [r4, #16]
    9dee:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    9df0:	4a1c      	ldr	r2, [pc, #112]	; (9e64 <sys_clock_announce+0x18c>)
    9df2:	4e15      	ldr	r6, [pc, #84]	; (9e48 <sys_clock_announce+0x170>)
    9df4:	6830      	ldr	r0, [r6, #0]
    9df6:	6813      	ldr	r3, [r2, #0]
    9df8:	6851      	ldr	r1, [r2, #4]
    9dfa:	181b      	adds	r3, r3, r0
    9dfc:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    9e00:	6013      	str	r3, [r2, #0]
    9e02:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    9e04:	2400      	movs	r4, #0
    9e06:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9e08:	f7ff fd4a 	bl	98a0 <next_timeout>
    9e0c:	4621      	mov	r1, r4
    9e0e:	f7fb f8bd 	bl	4f8c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e12:	480c      	ldr	r0, [pc, #48]	; (9e44 <sys_clock_announce+0x16c>)
    9e14:	f7fd fc64 	bl	76e0 <z_spin_unlock_valid>
    9e18:	b120      	cbz	r0, 9e24 <sys_clock_announce+0x14c>
	__asm__ volatile(
    9e1a:	f385 8811 	msr	BASEPRI, r5
    9e1e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9e22:	bd70      	pop	{r4, r5, r6, pc}
    9e24:	4c09      	ldr	r4, [pc, #36]	; (9e4c <sys_clock_announce+0x174>)
    9e26:	23b9      	movs	r3, #185	; 0xb9
    9e28:	4622      	mov	r2, r4
    9e2a:	490c      	ldr	r1, [pc, #48]	; (9e5c <sys_clock_announce+0x184>)
    9e2c:	4809      	ldr	r0, [pc, #36]	; (9e54 <sys_clock_announce+0x17c>)
    9e2e:	f000 fe57 	bl	aae0 <assert_print>
    9e32:	4904      	ldr	r1, [pc, #16]	; (9e44 <sys_clock_announce+0x16c>)
    9e34:	480a      	ldr	r0, [pc, #40]	; (9e60 <sys_clock_announce+0x188>)
    9e36:	f000 fe53 	bl	aae0 <assert_print>
    9e3a:	21b9      	movs	r1, #185	; 0xb9
    9e3c:	4620      	mov	r0, r4
    9e3e:	f000 fe48 	bl	aad2 <assert_post_action>
    9e42:	e7ea      	b.n	9e1a <sys_clock_announce+0x142>
    9e44:	200050f8 	.word	0x200050f8
    9e48:	200050f4 	.word	0x200050f4
    9e4c:	0000c624 	.word	0x0000c624
    9e50:	0000c684 	.word	0x0000c684
    9e54:	0000c478 	.word	0x0000c478
    9e58:	0000c69c 	.word	0x0000c69c
    9e5c:	0000c654 	.word	0x0000c654
    9e60:	0000c66c 	.word	0x0000c66c
    9e64:	20004570 	.word	0x20004570

00009e68 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    9e6a:	2600      	movs	r6, #0
	__asm__ volatile(
    9e6c:	f04f 0320 	mov.w	r3, #32
    9e70:	f3ef 8711 	mrs	r7, BASEPRI
    9e74:	f383 8812 	msr	BASEPRI_MAX, r3
    9e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e7c:	481f      	ldr	r0, [pc, #124]	; (9efc <sys_clock_tick_get+0x94>)
    9e7e:	f7fd fc1f 	bl	76c0 <z_spin_lock_valid>
    9e82:	b128      	cbz	r0, 9e90 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    9e84:	481d      	ldr	r0, [pc, #116]	; (9efc <sys_clock_tick_get+0x94>)
    9e86:	f7fd fc3b 	bl	7700 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    9e8a:	2400      	movs	r4, #0
    9e8c:	4625      	mov	r5, r4
	return k;
    9e8e:	e014      	b.n	9eba <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e90:	4c1b      	ldr	r4, [pc, #108]	; (9f00 <sys_clock_tick_get+0x98>)
    9e92:	238e      	movs	r3, #142	; 0x8e
    9e94:	4622      	mov	r2, r4
    9e96:	491b      	ldr	r1, [pc, #108]	; (9f04 <sys_clock_tick_get+0x9c>)
    9e98:	481b      	ldr	r0, [pc, #108]	; (9f08 <sys_clock_tick_get+0xa0>)
    9e9a:	f000 fe21 	bl	aae0 <assert_print>
    9e9e:	4917      	ldr	r1, [pc, #92]	; (9efc <sys_clock_tick_get+0x94>)
    9ea0:	481a      	ldr	r0, [pc, #104]	; (9f0c <sys_clock_tick_get+0xa4>)
    9ea2:	f000 fe1d 	bl	aae0 <assert_print>
    9ea6:	218e      	movs	r1, #142	; 0x8e
    9ea8:	4620      	mov	r0, r4
    9eaa:	f000 fe12 	bl	aad2 <assert_post_action>
    9eae:	e7e9      	b.n	9e84 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    9eb0:	f387 8811 	msr	BASEPRI, r7
    9eb4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9eb8:	2601      	movs	r6, #1
    9eba:	b9e6      	cbnz	r6, 9ef6 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    9ebc:	f7fb f898 	bl	4ff0 <sys_clock_elapsed>
    9ec0:	4b13      	ldr	r3, [pc, #76]	; (9f10 <sys_clock_tick_get+0xa8>)
    9ec2:	681c      	ldr	r4, [r3, #0]
    9ec4:	685d      	ldr	r5, [r3, #4]
    9ec6:	1904      	adds	r4, r0, r4
    9ec8:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ecc:	480b      	ldr	r0, [pc, #44]	; (9efc <sys_clock_tick_get+0x94>)
    9ece:	f7fd fc07 	bl	76e0 <z_spin_unlock_valid>
    9ed2:	2800      	cmp	r0, #0
    9ed4:	d1ec      	bne.n	9eb0 <sys_clock_tick_get+0x48>
    9ed6:	4e0a      	ldr	r6, [pc, #40]	; (9f00 <sys_clock_tick_get+0x98>)
    9ed8:	23b9      	movs	r3, #185	; 0xb9
    9eda:	4632      	mov	r2, r6
    9edc:	490d      	ldr	r1, [pc, #52]	; (9f14 <sys_clock_tick_get+0xac>)
    9ede:	480a      	ldr	r0, [pc, #40]	; (9f08 <sys_clock_tick_get+0xa0>)
    9ee0:	f000 fdfe 	bl	aae0 <assert_print>
    9ee4:	4905      	ldr	r1, [pc, #20]	; (9efc <sys_clock_tick_get+0x94>)
    9ee6:	480c      	ldr	r0, [pc, #48]	; (9f18 <sys_clock_tick_get+0xb0>)
    9ee8:	f000 fdfa 	bl	aae0 <assert_print>
    9eec:	21b9      	movs	r1, #185	; 0xb9
    9eee:	4630      	mov	r0, r6
    9ef0:	f000 fdef 	bl	aad2 <assert_post_action>
    9ef4:	e7dc      	b.n	9eb0 <sys_clock_tick_get+0x48>
	}
	return t;
}
    9ef6:	4620      	mov	r0, r4
    9ef8:	4629      	mov	r1, r5
    9efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9efc:	200050f8 	.word	0x200050f8
    9f00:	0000c624 	.word	0x0000c624
    9f04:	0000c684 	.word	0x0000c684
    9f08:	0000c478 	.word	0x0000c478
    9f0c:	0000c69c 	.word	0x0000c69c
    9f10:	20004570 	.word	0x20004570
    9f14:	0000c654 	.word	0x0000c654
    9f18:	0000c66c 	.word	0x0000c66c

00009f1c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9f1c:	b570      	push	{r4, r5, r6, lr}
    9f1e:	4604      	mov	r4, r0
	__asm__ volatile(
    9f20:	f04f 0320 	mov.w	r3, #32
    9f24:	f3ef 8611 	mrs	r6, BASEPRI
    9f28:	f383 8812 	msr	BASEPRI_MAX, r3
    9f2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f30:	4857      	ldr	r0, [pc, #348]	; (a090 <z_timer_expiration_handler+0x174>)
    9f32:	f7fd fbc5 	bl	76c0 <z_spin_lock_valid>
    9f36:	2800      	cmp	r0, #0
    9f38:	d049      	beq.n	9fce <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    9f3a:	4855      	ldr	r0, [pc, #340]	; (a090 <z_timer_expiration_handler+0x174>)
    9f3c:	f7fd fbe0 	bl	7700 <z_spin_lock_set_owner>
	return k;
    9f40:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9f42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9f46:	ea52 0103 	orrs.w	r1, r2, r3
    9f4a:	d005      	beq.n	9f58 <z_timer_expiration_handler+0x3c>
    9f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9f50:	bf08      	it	eq
    9f52:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9f56:	d14a      	bne.n	9fee <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9f5a:	3301      	adds	r3, #1
    9f5c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9f5e:	6a23      	ldr	r3, [r4, #32]
    9f60:	b1db      	cbz	r3, 9f9a <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f62:	484b      	ldr	r0, [pc, #300]	; (a090 <z_timer_expiration_handler+0x174>)
    9f64:	f7fd fbbc 	bl	76e0 <z_spin_unlock_valid>
    9f68:	2800      	cmp	r0, #0
    9f6a:	d047      	beq.n	9ffc <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    9f6c:	f386 8811 	msr	BASEPRI, r6
    9f70:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9f74:	6a23      	ldr	r3, [r4, #32]
    9f76:	4620      	mov	r0, r4
    9f78:	4798      	blx	r3
	__asm__ volatile(
    9f7a:	f04f 0320 	mov.w	r3, #32
    9f7e:	f3ef 8511 	mrs	r5, BASEPRI
    9f82:	f383 8812 	msr	BASEPRI_MAX, r3
    9f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f8a:	4841      	ldr	r0, [pc, #260]	; (a090 <z_timer_expiration_handler+0x174>)
    9f8c:	f7fd fb98 	bl	76c0 <z_spin_lock_valid>
    9f90:	2800      	cmp	r0, #0
    9f92:	d043      	beq.n	a01c <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    9f94:	483e      	ldr	r0, [pc, #248]	; (a090 <z_timer_expiration_handler+0x174>)
    9f96:	f7fd fbb3 	bl	7700 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9f9a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    9f9e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9fa0:	42a3      	cmp	r3, r4
    9fa2:	d04b      	beq.n	a03c <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9fa4:	2c00      	cmp	r4, #0
    9fa6:	d049      	beq.n	a03c <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    9fa8:	4620      	mov	r0, r4
    9faa:	f7fe f94b 	bl	8244 <z_unpend_thread_no_timeout>
    9fae:	2300      	movs	r3, #0
    9fb0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fb4:	4836      	ldr	r0, [pc, #216]	; (a090 <z_timer_expiration_handler+0x174>)
    9fb6:	f7fd fb93 	bl	76e0 <z_spin_unlock_valid>
    9fba:	2800      	cmp	r0, #0
    9fbc:	d057      	beq.n	a06e <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    9fbe:	f385 8811 	msr	BASEPRI, r5
    9fc2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    9fc6:	4620      	mov	r0, r4
    9fc8:	f7fe fc3a 	bl	8840 <z_ready_thread>
}
    9fcc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fce:	4d31      	ldr	r5, [pc, #196]	; (a094 <z_timer_expiration_handler+0x178>)
    9fd0:	238e      	movs	r3, #142	; 0x8e
    9fd2:	462a      	mov	r2, r5
    9fd4:	4930      	ldr	r1, [pc, #192]	; (a098 <z_timer_expiration_handler+0x17c>)
    9fd6:	4831      	ldr	r0, [pc, #196]	; (a09c <z_timer_expiration_handler+0x180>)
    9fd8:	f000 fd82 	bl	aae0 <assert_print>
    9fdc:	492c      	ldr	r1, [pc, #176]	; (a090 <z_timer_expiration_handler+0x174>)
    9fde:	4830      	ldr	r0, [pc, #192]	; (a0a0 <z_timer_expiration_handler+0x184>)
    9fe0:	f000 fd7e 	bl	aae0 <assert_print>
    9fe4:	218e      	movs	r1, #142	; 0x8e
    9fe6:	4628      	mov	r0, r5
    9fe8:	f000 fd73 	bl	aad2 <assert_post_action>
    9fec:	e7a5      	b.n	9f3a <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9fee:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    9ff2:	492c      	ldr	r1, [pc, #176]	; (a0a4 <z_timer_expiration_handler+0x188>)
    9ff4:	4620      	mov	r0, r4
    9ff6:	f7ff fc79 	bl	98ec <z_add_timeout>
    9ffa:	e7ad      	b.n	9f58 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ffc:	4d25      	ldr	r5, [pc, #148]	; (a094 <z_timer_expiration_handler+0x178>)
    9ffe:	23b9      	movs	r3, #185	; 0xb9
    a000:	462a      	mov	r2, r5
    a002:	4929      	ldr	r1, [pc, #164]	; (a0a8 <z_timer_expiration_handler+0x18c>)
    a004:	4825      	ldr	r0, [pc, #148]	; (a09c <z_timer_expiration_handler+0x180>)
    a006:	f000 fd6b 	bl	aae0 <assert_print>
    a00a:	4921      	ldr	r1, [pc, #132]	; (a090 <z_timer_expiration_handler+0x174>)
    a00c:	4827      	ldr	r0, [pc, #156]	; (a0ac <z_timer_expiration_handler+0x190>)
    a00e:	f000 fd67 	bl	aae0 <assert_print>
    a012:	21b9      	movs	r1, #185	; 0xb9
    a014:	4628      	mov	r0, r5
    a016:	f000 fd5c 	bl	aad2 <assert_post_action>
    a01a:	e7a7      	b.n	9f6c <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a01c:	4e1d      	ldr	r6, [pc, #116]	; (a094 <z_timer_expiration_handler+0x178>)
    a01e:	238e      	movs	r3, #142	; 0x8e
    a020:	4632      	mov	r2, r6
    a022:	491d      	ldr	r1, [pc, #116]	; (a098 <z_timer_expiration_handler+0x17c>)
    a024:	481d      	ldr	r0, [pc, #116]	; (a09c <z_timer_expiration_handler+0x180>)
    a026:	f000 fd5b 	bl	aae0 <assert_print>
    a02a:	4919      	ldr	r1, [pc, #100]	; (a090 <z_timer_expiration_handler+0x174>)
    a02c:	481c      	ldr	r0, [pc, #112]	; (a0a0 <z_timer_expiration_handler+0x184>)
    a02e:	f000 fd57 	bl	aae0 <assert_print>
    a032:	218e      	movs	r1, #142	; 0x8e
    a034:	4630      	mov	r0, r6
    a036:	f000 fd4c 	bl	aad2 <assert_post_action>
    a03a:	e7ab      	b.n	9f94 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a03c:	4814      	ldr	r0, [pc, #80]	; (a090 <z_timer_expiration_handler+0x174>)
    a03e:	f7fd fb4f 	bl	76e0 <z_spin_unlock_valid>
    a042:	b120      	cbz	r0, a04e <z_timer_expiration_handler+0x132>
    a044:	f385 8811 	msr	BASEPRI, r5
    a048:	f3bf 8f6f 	isb	sy
		return;
    a04c:	e7be      	b.n	9fcc <z_timer_expiration_handler+0xb0>
    a04e:	4c11      	ldr	r4, [pc, #68]	; (a094 <z_timer_expiration_handler+0x178>)
    a050:	23b9      	movs	r3, #185	; 0xb9
    a052:	4622      	mov	r2, r4
    a054:	4914      	ldr	r1, [pc, #80]	; (a0a8 <z_timer_expiration_handler+0x18c>)
    a056:	4811      	ldr	r0, [pc, #68]	; (a09c <z_timer_expiration_handler+0x180>)
    a058:	f000 fd42 	bl	aae0 <assert_print>
    a05c:	490c      	ldr	r1, [pc, #48]	; (a090 <z_timer_expiration_handler+0x174>)
    a05e:	4813      	ldr	r0, [pc, #76]	; (a0ac <z_timer_expiration_handler+0x190>)
    a060:	f000 fd3e 	bl	aae0 <assert_print>
    a064:	21b9      	movs	r1, #185	; 0xb9
    a066:	4620      	mov	r0, r4
    a068:	f000 fd33 	bl	aad2 <assert_post_action>
    a06c:	e7ea      	b.n	a044 <z_timer_expiration_handler+0x128>
    a06e:	4e09      	ldr	r6, [pc, #36]	; (a094 <z_timer_expiration_handler+0x178>)
    a070:	23b9      	movs	r3, #185	; 0xb9
    a072:	4632      	mov	r2, r6
    a074:	490c      	ldr	r1, [pc, #48]	; (a0a8 <z_timer_expiration_handler+0x18c>)
    a076:	4809      	ldr	r0, [pc, #36]	; (a09c <z_timer_expiration_handler+0x180>)
    a078:	f000 fd32 	bl	aae0 <assert_print>
    a07c:	4904      	ldr	r1, [pc, #16]	; (a090 <z_timer_expiration_handler+0x174>)
    a07e:	480b      	ldr	r0, [pc, #44]	; (a0ac <z_timer_expiration_handler+0x190>)
    a080:	f000 fd2e 	bl	aae0 <assert_print>
    a084:	21b9      	movs	r1, #185	; 0xb9
    a086:	4630      	mov	r0, r6
    a088:	f000 fd23 	bl	aad2 <assert_post_action>
    a08c:	e797      	b.n	9fbe <z_timer_expiration_handler+0xa2>
    a08e:	bf00      	nop
    a090:	200050fc 	.word	0x200050fc
    a094:	0000c624 	.word	0x0000c624
    a098:	0000c684 	.word	0x0000c684
    a09c:	0000c478 	.word	0x0000c478
    a0a0:	0000c69c 	.word	0x0000c69c
    a0a4:	00009f1d 	.word	0x00009f1d
    a0a8:	0000c654 	.word	0x0000c654
    a0ac:	0000c66c 	.word	0x0000c66c

0000a0b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0b4:	9f06      	ldr	r7, [sp, #24]
    a0b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a0be:	bf08      	it	eq
    a0c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a0c4:	d02f      	beq.n	a126 <z_impl_k_timer_start+0x76>
    a0c6:	4605      	mov	r5, r0
    a0c8:	4614      	mov	r4, r2
    a0ca:	461e      	mov	r6, r3
    a0cc:	4611      	mov	r1, r2
    a0ce:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a0d0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a0d4:	bf08      	it	eq
    a0d6:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    a0da:	d00d      	beq.n	a0f8 <z_impl_k_timer_start+0x48>
    a0dc:	ea57 0c08 	orrs.w	ip, r7, r8
    a0e0:	d00a      	beq.n	a0f8 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    a0e2:	f06f 0c01 	mvn.w	ip, #1
    a0e6:	ebbc 0c07 	subs.w	ip, ip, r7
    a0ea:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    a0ee:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a0f2:	f1bc 0f00 	cmp.w	ip, #0
    a0f6:	db18      	blt.n	a12a <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a0f8:	f06f 0301 	mvn.w	r3, #1
    a0fc:	1a5b      	subs	r3, r3, r1
    a0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a102:	eb63 0300 	sbc.w	r3, r3, r0
    a106:	2b00      	cmp	r3, #0
    a108:	db1a      	blt.n	a140 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    a10a:	4628      	mov	r0, r5
    a10c:	f7ff fcd2 	bl	9ab4 <z_abort_timeout>
	timer->period = period;
    a110:	62af      	str	r7, [r5, #40]	; 0x28
    a112:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    a116:	2300      	movs	r3, #0
    a118:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a11a:	4622      	mov	r2, r4
    a11c:	4633      	mov	r3, r6
    a11e:	490e      	ldr	r1, [pc, #56]	; (a158 <z_impl_k_timer_start+0xa8>)
    a120:	4628      	mov	r0, r5
    a122:	f7ff fbe3 	bl	98ec <z_add_timeout>
		     duration);
}
    a126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    a12a:	2f02      	cmp	r7, #2
    a12c:	f178 0300 	sbcs.w	r3, r8, #0
    a130:	da02      	bge.n	a138 <z_impl_k_timer_start+0x88>
    a132:	2702      	movs	r7, #2
    a134:	f04f 0800 	mov.w	r8, #0
    a138:	3f01      	subs	r7, #1
    a13a:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    a13e:	e7db      	b.n	a0f8 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a140:	460c      	mov	r4, r1
    a142:	4606      	mov	r6, r0
    a144:	2901      	cmp	r1, #1
    a146:	f170 0300 	sbcs.w	r3, r0, #0
    a14a:	da01      	bge.n	a150 <z_impl_k_timer_start+0xa0>
    a14c:	2401      	movs	r4, #1
    a14e:	2600      	movs	r6, #0
    a150:	3c01      	subs	r4, #1
    a152:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    a156:	e7d8      	b.n	a10a <z_impl_k_timer_start+0x5a>
    a158:	00009f1d 	.word	0x00009f1d

0000a15c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    a15c:	4b01      	ldr	r3, [pc, #4]	; (a164 <k_thread_system_pool_assign+0x8>)
    a15e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    a162:	4770      	bx	lr
    a164:	200041c4 	.word	0x200041c4

0000a168 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    a168:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    a16a:	4a03      	ldr	r2, [pc, #12]	; (a178 <boot_banner+0x10>)
    a16c:	4903      	ldr	r1, [pc, #12]	; (a17c <boot_banner+0x14>)
    a16e:	4804      	ldr	r0, [pc, #16]	; (a180 <boot_banner+0x18>)
    a170:	f000 fbad 	bl	a8ce <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    a174:	bd08      	pop	{r3, pc}
    a176:	bf00      	nop
    a178:	0000d388 	.word	0x0000d388
    a17c:	0000e0d8 	.word	0x0000e0d8
    a180:	0000e0e8 	.word	0x0000e0e8

0000a184 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    a184:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a186:	4c0f      	ldr	r4, [pc, #60]	; (a1c4 <statics_init+0x40>)
    a188:	e008      	b.n	a19c <statics_init+0x18>
    a18a:	4b0f      	ldr	r3, [pc, #60]	; (a1c8 <statics_init+0x44>)
    a18c:	429c      	cmp	r4, r3
    a18e:	d217      	bcs.n	a1c0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a190:	68a2      	ldr	r2, [r4, #8]
    a192:	6861      	ldr	r1, [r4, #4]
    a194:	4620      	mov	r0, r4
    a196:	f001 fecb 	bl	bf30 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a19a:	3418      	adds	r4, #24
    a19c:	4b0a      	ldr	r3, [pc, #40]	; (a1c8 <statics_init+0x44>)
    a19e:	429c      	cmp	r4, r3
    a1a0:	d9f3      	bls.n	a18a <statics_init+0x6>
    a1a2:	4d0a      	ldr	r5, [pc, #40]	; (a1cc <statics_init+0x48>)
    a1a4:	2318      	movs	r3, #24
    a1a6:	462a      	mov	r2, r5
    a1a8:	4909      	ldr	r1, [pc, #36]	; (a1d0 <statics_init+0x4c>)
    a1aa:	480a      	ldr	r0, [pc, #40]	; (a1d4 <statics_init+0x50>)
    a1ac:	f000 fc98 	bl	aae0 <assert_print>
    a1b0:	4809      	ldr	r0, [pc, #36]	; (a1d8 <statics_init+0x54>)
    a1b2:	f000 fc95 	bl	aae0 <assert_print>
    a1b6:	2118      	movs	r1, #24
    a1b8:	4628      	mov	r0, r5
    a1ba:	f000 fc8a 	bl	aad2 <assert_post_action>
    a1be:	e7e4      	b.n	a18a <statics_init+0x6>
		}
	}
	return 0;
}
    a1c0:	2000      	movs	r0, #0
    a1c2:	bd38      	pop	{r3, r4, r5, pc}
    a1c4:	200041c4 	.word	0x200041c4
    a1c8:	200041dc 	.word	0x200041dc
    a1cc:	0000e110 	.word	0x0000e110
    a1d0:	0000e134 	.word	0x0000e134
    a1d4:	0000c478 	.word	0x0000c478
    a1d8:	0000dc40 	.word	0x0000dc40

0000a1dc <calloc>:
    a1dc:	4b02      	ldr	r3, [pc, #8]	; (a1e8 <calloc+0xc>)
    a1de:	460a      	mov	r2, r1
    a1e0:	4601      	mov	r1, r0
    a1e2:	6818      	ldr	r0, [r3, #0]
    a1e4:	f001 bec2 	b.w	bf6c <_calloc_r>
    a1e8:	200040ec 	.word	0x200040ec

0000a1ec <malloc>:
    a1ec:	4b02      	ldr	r3, [pc, #8]	; (a1f8 <malloc+0xc>)
    a1ee:	4601      	mov	r1, r0
    a1f0:	6818      	ldr	r0, [r3, #0]
    a1f2:	f000 b803 	b.w	a1fc <_malloc_r>
    a1f6:	bf00      	nop
    a1f8:	200040ec 	.word	0x200040ec

0000a1fc <_malloc_r>:
    a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1fe:	1ccd      	adds	r5, r1, #3
    a200:	f025 0503 	bic.w	r5, r5, #3
    a204:	3508      	adds	r5, #8
    a206:	2d0c      	cmp	r5, #12
    a208:	bf38      	it	cc
    a20a:	250c      	movcc	r5, #12
    a20c:	2d00      	cmp	r5, #0
    a20e:	4606      	mov	r6, r0
    a210:	db01      	blt.n	a216 <_malloc_r+0x1a>
    a212:	42a9      	cmp	r1, r5
    a214:	d903      	bls.n	a21e <_malloc_r+0x22>
    a216:	230c      	movs	r3, #12
    a218:	6033      	str	r3, [r6, #0]
    a21a:	2000      	movs	r0, #0
    a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a21e:	f000 f857 	bl	a2d0 <__malloc_lock>
    a222:	4921      	ldr	r1, [pc, #132]	; (a2a8 <_malloc_r+0xac>)
    a224:	680a      	ldr	r2, [r1, #0]
    a226:	4614      	mov	r4, r2
    a228:	b99c      	cbnz	r4, a252 <_malloc_r+0x56>
    a22a:	4f20      	ldr	r7, [pc, #128]	; (a2ac <_malloc_r+0xb0>)
    a22c:	683b      	ldr	r3, [r7, #0]
    a22e:	b923      	cbnz	r3, a23a <_malloc_r+0x3e>
    a230:	4621      	mov	r1, r4
    a232:	4630      	mov	r0, r6
    a234:	f000 f83c 	bl	a2b0 <_sbrk_r>
    a238:	6038      	str	r0, [r7, #0]
    a23a:	4629      	mov	r1, r5
    a23c:	4630      	mov	r0, r6
    a23e:	f000 f837 	bl	a2b0 <_sbrk_r>
    a242:	1c43      	adds	r3, r0, #1
    a244:	d123      	bne.n	a28e <_malloc_r+0x92>
    a246:	230c      	movs	r3, #12
    a248:	6033      	str	r3, [r6, #0]
    a24a:	4630      	mov	r0, r6
    a24c:	f000 f846 	bl	a2dc <__malloc_unlock>
    a250:	e7e3      	b.n	a21a <_malloc_r+0x1e>
    a252:	6823      	ldr	r3, [r4, #0]
    a254:	1b5b      	subs	r3, r3, r5
    a256:	d417      	bmi.n	a288 <_malloc_r+0x8c>
    a258:	2b0b      	cmp	r3, #11
    a25a:	d903      	bls.n	a264 <_malloc_r+0x68>
    a25c:	6023      	str	r3, [r4, #0]
    a25e:	441c      	add	r4, r3
    a260:	6025      	str	r5, [r4, #0]
    a262:	e004      	b.n	a26e <_malloc_r+0x72>
    a264:	6863      	ldr	r3, [r4, #4]
    a266:	42a2      	cmp	r2, r4
    a268:	bf0c      	ite	eq
    a26a:	600b      	streq	r3, [r1, #0]
    a26c:	6053      	strne	r3, [r2, #4]
    a26e:	4630      	mov	r0, r6
    a270:	f000 f834 	bl	a2dc <__malloc_unlock>
    a274:	f104 000b 	add.w	r0, r4, #11
    a278:	1d23      	adds	r3, r4, #4
    a27a:	f020 0007 	bic.w	r0, r0, #7
    a27e:	1ac2      	subs	r2, r0, r3
    a280:	d0cc      	beq.n	a21c <_malloc_r+0x20>
    a282:	1a1b      	subs	r3, r3, r0
    a284:	50a3      	str	r3, [r4, r2]
    a286:	e7c9      	b.n	a21c <_malloc_r+0x20>
    a288:	4622      	mov	r2, r4
    a28a:	6864      	ldr	r4, [r4, #4]
    a28c:	e7cc      	b.n	a228 <_malloc_r+0x2c>
    a28e:	1cc4      	adds	r4, r0, #3
    a290:	f024 0403 	bic.w	r4, r4, #3
    a294:	42a0      	cmp	r0, r4
    a296:	d0e3      	beq.n	a260 <_malloc_r+0x64>
    a298:	1a21      	subs	r1, r4, r0
    a29a:	4630      	mov	r0, r6
    a29c:	f000 f808 	bl	a2b0 <_sbrk_r>
    a2a0:	3001      	adds	r0, #1
    a2a2:	d1dd      	bne.n	a260 <_malloc_r+0x64>
    a2a4:	e7cf      	b.n	a246 <_malloc_r+0x4a>
    a2a6:	bf00      	nop
    a2a8:	20005100 	.word	0x20005100
    a2ac:	20005104 	.word	0x20005104

0000a2b0 <_sbrk_r>:
    a2b0:	b538      	push	{r3, r4, r5, lr}
    a2b2:	4d06      	ldr	r5, [pc, #24]	; (a2cc <_sbrk_r+0x1c>)
    a2b4:	2300      	movs	r3, #0
    a2b6:	4604      	mov	r4, r0
    a2b8:	4608      	mov	r0, r1
    a2ba:	602b      	str	r3, [r5, #0]
    a2bc:	f7f9 fcaa 	bl	3c14 <_sbrk>
    a2c0:	1c43      	adds	r3, r0, #1
    a2c2:	d102      	bne.n	a2ca <_sbrk_r+0x1a>
    a2c4:	682b      	ldr	r3, [r5, #0]
    a2c6:	b103      	cbz	r3, a2ca <_sbrk_r+0x1a>
    a2c8:	6023      	str	r3, [r4, #0]
    a2ca:	bd38      	pop	{r3, r4, r5, pc}
    a2cc:	20005108 	.word	0x20005108

0000a2d0 <__malloc_lock>:
    a2d0:	4801      	ldr	r0, [pc, #4]	; (a2d8 <__malloc_lock+0x8>)
    a2d2:	f7f9 bcb5 	b.w	3c40 <__retarget_lock_acquire_recursive>
    a2d6:	bf00      	nop
    a2d8:	200041dc 	.word	0x200041dc

0000a2dc <__malloc_unlock>:
    a2dc:	4801      	ldr	r0, [pc, #4]	; (a2e4 <__malloc_unlock+0x8>)
    a2de:	f7f9 bccf 	b.w	3c80 <__retarget_lock_release_recursive>
    a2e2:	bf00      	nop
    a2e4:	200041dc 	.word	0x200041dc

0000a2e8 <nrf_cc3xx_platform_init_no_rng>:
    a2e8:	b510      	push	{r4, lr}
    a2ea:	4c0a      	ldr	r4, [pc, #40]	; (a314 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a2ec:	6823      	ldr	r3, [r4, #0]
    a2ee:	b11b      	cbz	r3, a2f8 <nrf_cc3xx_platform_init_no_rng+0x10>
    a2f0:	2301      	movs	r3, #1
    a2f2:	6023      	str	r3, [r4, #0]
    a2f4:	2000      	movs	r0, #0
    a2f6:	bd10      	pop	{r4, pc}
    a2f8:	f000 f8ce 	bl	a498 <CC_LibInitNoRng>
    a2fc:	2800      	cmp	r0, #0
    a2fe:	d0f7      	beq.n	a2f0 <nrf_cc3xx_platform_init_no_rng+0x8>
    a300:	3801      	subs	r0, #1
    a302:	2806      	cmp	r0, #6
    a304:	d803      	bhi.n	a30e <nrf_cc3xx_platform_init_no_rng+0x26>
    a306:	4b04      	ldr	r3, [pc, #16]	; (a318 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a308:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a30c:	bd10      	pop	{r4, pc}
    a30e:	4803      	ldr	r0, [pc, #12]	; (a31c <nrf_cc3xx_platform_init_no_rng+0x34>)
    a310:	bd10      	pop	{r4, pc}
    a312:	bf00      	nop
    a314:	2000510c 	.word	0x2000510c
    a318:	0000e1ac 	.word	0x0000e1ac
    a31c:	ffff8ffe 	.word	0xffff8ffe

0000a320 <nrf_cc3xx_platform_abort>:
    a320:	f3bf 8f4f 	dsb	sy
    a324:	4905      	ldr	r1, [pc, #20]	; (a33c <nrf_cc3xx_platform_abort+0x1c>)
    a326:	4b06      	ldr	r3, [pc, #24]	; (a340 <nrf_cc3xx_platform_abort+0x20>)
    a328:	68ca      	ldr	r2, [r1, #12]
    a32a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a32e:	4313      	orrs	r3, r2
    a330:	60cb      	str	r3, [r1, #12]
    a332:	f3bf 8f4f 	dsb	sy
    a336:	bf00      	nop
    a338:	e7fd      	b.n	a336 <nrf_cc3xx_platform_abort+0x16>
    a33a:	bf00      	nop
    a33c:	e000ed00 	.word	0xe000ed00
    a340:	05fa0004 	.word	0x05fa0004

0000a344 <CC_PalAbort>:
    a344:	b410      	push	{r4}
    a346:	4b09      	ldr	r3, [pc, #36]	; (a36c <CC_PalAbort+0x28>)
    a348:	4909      	ldr	r1, [pc, #36]	; (a370 <CC_PalAbort+0x2c>)
    a34a:	4c0a      	ldr	r4, [pc, #40]	; (a374 <CC_PalAbort+0x30>)
    a34c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a350:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a354:	6849      	ldr	r1, [r1, #4]
    a356:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a35a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a35e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a362:	2300      	movs	r3, #0
    a364:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a368:	bc10      	pop	{r4}
    a36a:	4708      	bx	r1
    a36c:	5002b000 	.word	0x5002b000
    a370:	20004150 	.word	0x20004150
    a374:	5002a000 	.word	0x5002a000

0000a378 <nrf_cc3xx_platform_set_abort>:
    a378:	e9d0 1200 	ldrd	r1, r2, [r0]
    a37c:	4b01      	ldr	r3, [pc, #4]	; (a384 <nrf_cc3xx_platform_set_abort+0xc>)
    a37e:	e9c3 1200 	strd	r1, r2, [r3]
    a382:	4770      	bx	lr
    a384:	20004150 	.word	0x20004150

0000a388 <mutex_free>:
    a388:	b510      	push	{r4, lr}
    a38a:	4604      	mov	r4, r0
    a38c:	b130      	cbz	r0, a39c <mutex_free+0x14>
    a38e:	6863      	ldr	r3, [r4, #4]
    a390:	06db      	lsls	r3, r3, #27
    a392:	d502      	bpl.n	a39a <mutex_free+0x12>
    a394:	2300      	movs	r3, #0
    a396:	6023      	str	r3, [r4, #0]
    a398:	6063      	str	r3, [r4, #4]
    a39a:	bd10      	pop	{r4, pc}
    a39c:	4b02      	ldr	r3, [pc, #8]	; (a3a8 <mutex_free+0x20>)
    a39e:	4803      	ldr	r0, [pc, #12]	; (a3ac <mutex_free+0x24>)
    a3a0:	685b      	ldr	r3, [r3, #4]
    a3a2:	4798      	blx	r3
    a3a4:	e7f3      	b.n	a38e <mutex_free+0x6>
    a3a6:	bf00      	nop
    a3a8:	20004150 	.word	0x20004150
    a3ac:	0000e1c8 	.word	0x0000e1c8

0000a3b0 <mutex_lock>:
    a3b0:	b1b0      	cbz	r0, a3e0 <mutex_lock+0x30>
    a3b2:	6843      	ldr	r3, [r0, #4]
    a3b4:	b193      	cbz	r3, a3dc <mutex_lock+0x2c>
    a3b6:	06db      	lsls	r3, r3, #27
    a3b8:	d50e      	bpl.n	a3d8 <mutex_lock+0x28>
    a3ba:	2301      	movs	r3, #1
    a3bc:	e850 2f00 	ldrex	r2, [r0]
    a3c0:	4619      	mov	r1, r3
    a3c2:	e840 1c00 	strex	ip, r1, [r0]
    a3c6:	f09c 0f00 	teq	ip, #0
    a3ca:	d1f7      	bne.n	a3bc <mutex_lock+0xc>
    a3cc:	2a01      	cmp	r2, #1
    a3ce:	d0f5      	beq.n	a3bc <mutex_lock+0xc>
    a3d0:	f3bf 8f5f 	dmb	sy
    a3d4:	2000      	movs	r0, #0
    a3d6:	4770      	bx	lr
    a3d8:	4803      	ldr	r0, [pc, #12]	; (a3e8 <mutex_lock+0x38>)
    a3da:	4770      	bx	lr
    a3dc:	4803      	ldr	r0, [pc, #12]	; (a3ec <mutex_lock+0x3c>)
    a3de:	4770      	bx	lr
    a3e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a3e4:	4770      	bx	lr
    a3e6:	bf00      	nop
    a3e8:	ffff8fe9 	.word	0xffff8fe9
    a3ec:	ffff8fea 	.word	0xffff8fea

0000a3f0 <mutex_unlock>:
    a3f0:	b168      	cbz	r0, a40e <mutex_unlock+0x1e>
    a3f2:	6843      	ldr	r3, [r0, #4]
    a3f4:	b13b      	cbz	r3, a406 <mutex_unlock+0x16>
    a3f6:	06db      	lsls	r3, r3, #27
    a3f8:	d507      	bpl.n	a40a <mutex_unlock+0x1a>
    a3fa:	f3bf 8f5f 	dmb	sy
    a3fe:	2300      	movs	r3, #0
    a400:	6003      	str	r3, [r0, #0]
    a402:	4618      	mov	r0, r3
    a404:	4770      	bx	lr
    a406:	4803      	ldr	r0, [pc, #12]	; (a414 <mutex_unlock+0x24>)
    a408:	4770      	bx	lr
    a40a:	4803      	ldr	r0, [pc, #12]	; (a418 <mutex_unlock+0x28>)
    a40c:	4770      	bx	lr
    a40e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a412:	4770      	bx	lr
    a414:	ffff8fea 	.word	0xffff8fea
    a418:	ffff8fe9 	.word	0xffff8fe9

0000a41c <mutex_init>:
    a41c:	b510      	push	{r4, lr}
    a41e:	4604      	mov	r4, r0
    a420:	b120      	cbz	r0, a42c <mutex_init+0x10>
    a422:	2200      	movs	r2, #0
    a424:	2311      	movs	r3, #17
    a426:	6022      	str	r2, [r4, #0]
    a428:	6063      	str	r3, [r4, #4]
    a42a:	bd10      	pop	{r4, pc}
    a42c:	4801      	ldr	r0, [pc, #4]	; (a434 <mutex_init+0x18>)
    a42e:	f7ff ff89 	bl	a344 <CC_PalAbort>
    a432:	e7f6      	b.n	a422 <mutex_init+0x6>
    a434:	0000e1f0 	.word	0x0000e1f0

0000a438 <nrf_cc3xx_platform_set_mutexes>:
    a438:	b570      	push	{r4, r5, r6, lr}
    a43a:	e9d0 2300 	ldrd	r2, r3, [r0]
    a43e:	4c13      	ldr	r4, [pc, #76]	; (a48c <nrf_cc3xx_platform_set_mutexes+0x54>)
    a440:	4d13      	ldr	r5, [pc, #76]	; (a490 <nrf_cc3xx_platform_set_mutexes+0x58>)
    a442:	6063      	str	r3, [r4, #4]
    a444:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a448:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a44c:	6022      	str	r2, [r4, #0]
    a44e:	4b11      	ldr	r3, [pc, #68]	; (a494 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a450:	6808      	ldr	r0, [r1, #0]
    a452:	6018      	str	r0, [r3, #0]
    a454:	6848      	ldr	r0, [r1, #4]
    a456:	6058      	str	r0, [r3, #4]
    a458:	6888      	ldr	r0, [r1, #8]
    a45a:	6098      	str	r0, [r3, #8]
    a45c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a460:	60d8      	str	r0, [r3, #12]
    a462:	6119      	str	r1, [r3, #16]
    a464:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a468:	06db      	lsls	r3, r3, #27
    a46a:	d50d      	bpl.n	a488 <nrf_cc3xx_platform_set_mutexes+0x50>
    a46c:	2300      	movs	r3, #0
    a46e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a472:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a476:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a47a:	4790      	blx	r2
    a47c:	6823      	ldr	r3, [r4, #0]
    a47e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a486:	4718      	bx	r3
    a488:	bd70      	pop	{r4, r5, r6, pc}
    a48a:	bf00      	nop
    a48c:	20004160 	.word	0x20004160
    a490:	20005124 	.word	0x20005124
    a494:	20004170 	.word	0x20004170

0000a498 <CC_LibInitNoRng>:
    a498:	b538      	push	{r3, r4, r5, lr}
    a49a:	f000 f82f 	bl	a4fc <CC_HalInit>
    a49e:	b120      	cbz	r0, a4aa <CC_LibInitNoRng+0x12>
    a4a0:	2403      	movs	r4, #3
    a4a2:	f000 f863 	bl	a56c <CC_PalTerminate>
    a4a6:	4620      	mov	r0, r4
    a4a8:	bd38      	pop	{r3, r4, r5, pc}
    a4aa:	f000 f831 	bl	a510 <CC_PalInit>
    a4ae:	b998      	cbnz	r0, a4d8 <CC_LibInitNoRng+0x40>
    a4b0:	f000 f8ac 	bl	a60c <CC_PalPowerSaveModeSelect>
    a4b4:	b998      	cbnz	r0, a4de <CC_LibInitNoRng+0x46>
    a4b6:	4d0f      	ldr	r5, [pc, #60]	; (a4f4 <CC_LibInitNoRng+0x5c>)
    a4b8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a4bc:	0e1b      	lsrs	r3, r3, #24
    a4be:	2bf0      	cmp	r3, #240	; 0xf0
    a4c0:	d108      	bne.n	a4d4 <CC_LibInitNoRng+0x3c>
    a4c2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a4c6:	4b0c      	ldr	r3, [pc, #48]	; (a4f8 <CC_LibInitNoRng+0x60>)
    a4c8:	429a      	cmp	r2, r3
    a4ca:	d00a      	beq.n	a4e2 <CC_LibInitNoRng+0x4a>
    a4cc:	2407      	movs	r4, #7
    a4ce:	f000 f817 	bl	a500 <CC_HalTerminate>
    a4d2:	e7e6      	b.n	a4a2 <CC_LibInitNoRng+0xa>
    a4d4:	2406      	movs	r4, #6
    a4d6:	e7fa      	b.n	a4ce <CC_LibInitNoRng+0x36>
    a4d8:	2404      	movs	r4, #4
    a4da:	4620      	mov	r0, r4
    a4dc:	bd38      	pop	{r3, r4, r5, pc}
    a4de:	2400      	movs	r4, #0
    a4e0:	e7f5      	b.n	a4ce <CC_LibInitNoRng+0x36>
    a4e2:	2001      	movs	r0, #1
    a4e4:	f000 f892 	bl	a60c <CC_PalPowerSaveModeSelect>
    a4e8:	4604      	mov	r4, r0
    a4ea:	2800      	cmp	r0, #0
    a4ec:	d1f7      	bne.n	a4de <CC_LibInitNoRng+0x46>
    a4ee:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a4f2:	e7d8      	b.n	a4a6 <CC_LibInitNoRng+0xe>
    a4f4:	5002b000 	.word	0x5002b000
    a4f8:	20e00000 	.word	0x20e00000

0000a4fc <CC_HalInit>:
    a4fc:	2000      	movs	r0, #0
    a4fe:	4770      	bx	lr

0000a500 <CC_HalTerminate>:
    a500:	2000      	movs	r0, #0
    a502:	4770      	bx	lr

0000a504 <CC_HalMaskInterrupt>:
    a504:	4b01      	ldr	r3, [pc, #4]	; (a50c <CC_HalMaskInterrupt+0x8>)
    a506:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a50a:	4770      	bx	lr
    a50c:	5002b000 	.word	0x5002b000

0000a510 <CC_PalInit>:
    a510:	b510      	push	{r4, lr}
    a512:	4811      	ldr	r0, [pc, #68]	; (a558 <CC_PalInit+0x48>)
    a514:	f000 f848 	bl	a5a8 <CC_PalMutexCreate>
    a518:	b100      	cbz	r0, a51c <CC_PalInit+0xc>
    a51a:	bd10      	pop	{r4, pc}
    a51c:	480f      	ldr	r0, [pc, #60]	; (a55c <CC_PalInit+0x4c>)
    a51e:	f000 f843 	bl	a5a8 <CC_PalMutexCreate>
    a522:	2800      	cmp	r0, #0
    a524:	d1f9      	bne.n	a51a <CC_PalInit+0xa>
    a526:	4c0e      	ldr	r4, [pc, #56]	; (a560 <CC_PalInit+0x50>)
    a528:	4620      	mov	r0, r4
    a52a:	f000 f83d 	bl	a5a8 <CC_PalMutexCreate>
    a52e:	2800      	cmp	r0, #0
    a530:	d1f3      	bne.n	a51a <CC_PalInit+0xa>
    a532:	4b0c      	ldr	r3, [pc, #48]	; (a564 <CC_PalInit+0x54>)
    a534:	480c      	ldr	r0, [pc, #48]	; (a568 <CC_PalInit+0x58>)
    a536:	601c      	str	r4, [r3, #0]
    a538:	f000 f836 	bl	a5a8 <CC_PalMutexCreate>
    a53c:	4601      	mov	r1, r0
    a53e:	2800      	cmp	r0, #0
    a540:	d1eb      	bne.n	a51a <CC_PalInit+0xa>
    a542:	f000 f82d 	bl	a5a0 <CC_PalDmaInit>
    a546:	4604      	mov	r4, r0
    a548:	b108      	cbz	r0, a54e <CC_PalInit+0x3e>
    a54a:	4620      	mov	r0, r4
    a54c:	bd10      	pop	{r4, pc}
    a54e:	f000 f83f 	bl	a5d0 <CC_PalPowerSaveModeInit>
    a552:	4620      	mov	r0, r4
    a554:	e7fa      	b.n	a54c <CC_PalInit+0x3c>
    a556:	bf00      	nop
    a558:	200041a8 	.word	0x200041a8
    a55c:	2000419c 	.word	0x2000419c
    a560:	200041a4 	.word	0x200041a4
    a564:	200041ac 	.word	0x200041ac
    a568:	200041a0 	.word	0x200041a0

0000a56c <CC_PalTerminate>:
    a56c:	b508      	push	{r3, lr}
    a56e:	4808      	ldr	r0, [pc, #32]	; (a590 <CC_PalTerminate+0x24>)
    a570:	f000 f824 	bl	a5bc <CC_PalMutexDestroy>
    a574:	4807      	ldr	r0, [pc, #28]	; (a594 <CC_PalTerminate+0x28>)
    a576:	f000 f821 	bl	a5bc <CC_PalMutexDestroy>
    a57a:	4807      	ldr	r0, [pc, #28]	; (a598 <CC_PalTerminate+0x2c>)
    a57c:	f000 f81e 	bl	a5bc <CC_PalMutexDestroy>
    a580:	4806      	ldr	r0, [pc, #24]	; (a59c <CC_PalTerminate+0x30>)
    a582:	f000 f81b 	bl	a5bc <CC_PalMutexDestroy>
    a586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a58a:	f000 b80b 	b.w	a5a4 <CC_PalDmaTerminate>
    a58e:	bf00      	nop
    a590:	200041a8 	.word	0x200041a8
    a594:	2000419c 	.word	0x2000419c
    a598:	200041a4 	.word	0x200041a4
    a59c:	200041a0 	.word	0x200041a0

0000a5a0 <CC_PalDmaInit>:
    a5a0:	2000      	movs	r0, #0
    a5a2:	4770      	bx	lr

0000a5a4 <CC_PalDmaTerminate>:
    a5a4:	4770      	bx	lr
    a5a6:	bf00      	nop

0000a5a8 <CC_PalMutexCreate>:
    a5a8:	b508      	push	{r3, lr}
    a5aa:	4b03      	ldr	r3, [pc, #12]	; (a5b8 <CC_PalMutexCreate+0x10>)
    a5ac:	6802      	ldr	r2, [r0, #0]
    a5ae:	681b      	ldr	r3, [r3, #0]
    a5b0:	6810      	ldr	r0, [r2, #0]
    a5b2:	4798      	blx	r3
    a5b4:	2000      	movs	r0, #0
    a5b6:	bd08      	pop	{r3, pc}
    a5b8:	20004160 	.word	0x20004160

0000a5bc <CC_PalMutexDestroy>:
    a5bc:	b508      	push	{r3, lr}
    a5be:	4b03      	ldr	r3, [pc, #12]	; (a5cc <CC_PalMutexDestroy+0x10>)
    a5c0:	6802      	ldr	r2, [r0, #0]
    a5c2:	685b      	ldr	r3, [r3, #4]
    a5c4:	6810      	ldr	r0, [r2, #0]
    a5c6:	4798      	blx	r3
    a5c8:	2000      	movs	r0, #0
    a5ca:	bd08      	pop	{r3, pc}
    a5cc:	20004160 	.word	0x20004160

0000a5d0 <CC_PalPowerSaveModeInit>:
    a5d0:	b570      	push	{r4, r5, r6, lr}
    a5d2:	4c09      	ldr	r4, [pc, #36]	; (a5f8 <CC_PalPowerSaveModeInit+0x28>)
    a5d4:	4d09      	ldr	r5, [pc, #36]	; (a5fc <CC_PalPowerSaveModeInit+0x2c>)
    a5d6:	6920      	ldr	r0, [r4, #16]
    a5d8:	68ab      	ldr	r3, [r5, #8]
    a5da:	4798      	blx	r3
    a5dc:	b118      	cbz	r0, a5e6 <CC_PalPowerSaveModeInit+0x16>
    a5de:	4b08      	ldr	r3, [pc, #32]	; (a600 <CC_PalPowerSaveModeInit+0x30>)
    a5e0:	4808      	ldr	r0, [pc, #32]	; (a604 <CC_PalPowerSaveModeInit+0x34>)
    a5e2:	685b      	ldr	r3, [r3, #4]
    a5e4:	4798      	blx	r3
    a5e6:	4a08      	ldr	r2, [pc, #32]	; (a608 <CC_PalPowerSaveModeInit+0x38>)
    a5e8:	68eb      	ldr	r3, [r5, #12]
    a5ea:	6920      	ldr	r0, [r4, #16]
    a5ec:	2100      	movs	r1, #0
    a5ee:	6011      	str	r1, [r2, #0]
    a5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a5f4:	4718      	bx	r3
    a5f6:	bf00      	nop
    a5f8:	20004170 	.word	0x20004170
    a5fc:	20004160 	.word	0x20004160
    a600:	20004150 	.word	0x20004150
    a604:	0000e214 	.word	0x0000e214
    a608:	20005120 	.word	0x20005120

0000a60c <CC_PalPowerSaveModeSelect>:
    a60c:	b570      	push	{r4, r5, r6, lr}
    a60e:	4d1b      	ldr	r5, [pc, #108]	; (a67c <CC_PalPowerSaveModeSelect+0x70>)
    a610:	4e1b      	ldr	r6, [pc, #108]	; (a680 <CC_PalPowerSaveModeSelect+0x74>)
    a612:	4604      	mov	r4, r0
    a614:	68b2      	ldr	r2, [r6, #8]
    a616:	6928      	ldr	r0, [r5, #16]
    a618:	4790      	blx	r2
    a61a:	b9f8      	cbnz	r0, a65c <CC_PalPowerSaveModeSelect+0x50>
    a61c:	b15c      	cbz	r4, a636 <CC_PalPowerSaveModeSelect+0x2a>
    a61e:	4c19      	ldr	r4, [pc, #100]	; (a684 <CC_PalPowerSaveModeSelect+0x78>)
    a620:	6823      	ldr	r3, [r4, #0]
    a622:	b1b3      	cbz	r3, a652 <CC_PalPowerSaveModeSelect+0x46>
    a624:	2b01      	cmp	r3, #1
    a626:	d01b      	beq.n	a660 <CC_PalPowerSaveModeSelect+0x54>
    a628:	3b01      	subs	r3, #1
    a62a:	6023      	str	r3, [r4, #0]
    a62c:	6928      	ldr	r0, [r5, #16]
    a62e:	68f3      	ldr	r3, [r6, #12]
    a630:	4798      	blx	r3
    a632:	2000      	movs	r0, #0
    a634:	bd70      	pop	{r4, r5, r6, pc}
    a636:	4c13      	ldr	r4, [pc, #76]	; (a684 <CC_PalPowerSaveModeSelect+0x78>)
    a638:	6821      	ldr	r1, [r4, #0]
    a63a:	b941      	cbnz	r1, a64e <CC_PalPowerSaveModeSelect+0x42>
    a63c:	4b12      	ldr	r3, [pc, #72]	; (a688 <CC_PalPowerSaveModeSelect+0x7c>)
    a63e:	2201      	movs	r2, #1
    a640:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    a644:	4a11      	ldr	r2, [pc, #68]	; (a68c <CC_PalPowerSaveModeSelect+0x80>)
    a646:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a64a:	2b00      	cmp	r3, #0
    a64c:	d1fb      	bne.n	a646 <CC_PalPowerSaveModeSelect+0x3a>
    a64e:	3101      	adds	r1, #1
    a650:	6021      	str	r1, [r4, #0]
    a652:	68f3      	ldr	r3, [r6, #12]
    a654:	6928      	ldr	r0, [r5, #16]
    a656:	4798      	blx	r3
    a658:	2000      	movs	r0, #0
    a65a:	bd70      	pop	{r4, r5, r6, pc}
    a65c:	480c      	ldr	r0, [pc, #48]	; (a690 <CC_PalPowerSaveModeSelect+0x84>)
    a65e:	bd70      	pop	{r4, r5, r6, pc}
    a660:	4a0a      	ldr	r2, [pc, #40]	; (a68c <CC_PalPowerSaveModeSelect+0x80>)
    a662:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a666:	2b00      	cmp	r3, #0
    a668:	d1fb      	bne.n	a662 <CC_PalPowerSaveModeSelect+0x56>
    a66a:	4a07      	ldr	r2, [pc, #28]	; (a688 <CC_PalPowerSaveModeSelect+0x7c>)
    a66c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a670:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a674:	f7ff ff46 	bl	a504 <CC_HalMaskInterrupt>
    a678:	6823      	ldr	r3, [r4, #0]
    a67a:	e7d5      	b.n	a628 <CC_PalPowerSaveModeSelect+0x1c>
    a67c:	20004170 	.word	0x20004170
    a680:	20004160 	.word	0x20004160
    a684:	20005120 	.word	0x20005120
    a688:	5002a000 	.word	0x5002a000
    a68c:	5002b000 	.word	0x5002b000
    a690:	ffff8fe9 	.word	0xffff8fe9

0000a694 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a694:	4770      	bx	lr

0000a696 <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    a696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a69a:	4604      	mov	r4, r0
    a69c:	460e      	mov	r6, r1
    a69e:	4690      	mov	r8, r2
    a6a0:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    a6a2:	2118      	movs	r1, #24
    a6a4:	2001      	movs	r0, #1
    a6a6:	f7ff fd99 	bl	a1dc <calloc>
    a6aa:	4605      	mov	r5, r0
    new_cab->name = name;
    a6ac:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    a6ae:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    a6b0:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Mutex = (struct k_mutex*)calloc(1, sizeof(struct k_mutex));
    a6b4:	2114      	movs	r1, #20
    a6b6:	2001      	movs	r0, #1
    a6b8:	f7ff fd90 	bl	a1dc <calloc>
    a6bc:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_init(mutex);
    a6be:	f001 fbbc 	bl	be3a <z_impl_k_mutex_init>
    k_mutex_init(new_cab->op_Mutex);
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    a6c2:	2101      	movs	r1, #1
    a6c4:	4630      	mov	r0, r6
    a6c6:	f7ff fd89 	bl	a1dc <calloc>
    a6ca:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    a6cc:	2400      	movs	r4, #0
    a6ce:	e003      	b.n	a6d8 <open_cab+0x42>
        new_cab->buffersTaken[i] = 0;
    a6d0:	696b      	ldr	r3, [r5, #20]
    a6d2:	2200      	movs	r2, #0
    a6d4:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    a6d6:	3401      	adds	r4, #1
    a6d8:	42a6      	cmp	r6, r4
    a6da:	d8f9      	bhi.n	a6d0 <open_cab+0x3a>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    a6dc:	2104      	movs	r1, #4
    a6de:	4630      	mov	r0, r6
    a6e0:	f7ff fd7c 	bl	a1dc <calloc>
    a6e4:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    a6e6:	2400      	movs	r4, #0
    a6e8:	e007      	b.n	a6fa <open_cab+0x64>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    a6ea:	692f      	ldr	r7, [r5, #16]
    a6ec:	4641      	mov	r1, r8
    a6ee:	2001      	movs	r0, #1
    a6f0:	f7ff fd74 	bl	a1dc <calloc>
    a6f4:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    a6f8:	3401      	adds	r4, #1
    a6fa:	42a6      	cmp	r6, r4
    a6fc:	d8f5      	bhi.n	a6ea <open_cab+0x54>
    }

    memcpy(new_cab->buffers[0], first, dim);
    a6fe:	692b      	ldr	r3, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a700:	4642      	mov	r2, r8
    a702:	4649      	mov	r1, r9
    a704:	6818      	ldr	r0, [r3, #0]
    a706:	f001 fc1b 	bl	bf40 <memcpy>
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    a70a:	696b      	ldr	r3, [r5, #20]
    a70c:	2201      	movs	r2, #1
    a70e:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    a710:	4628      	mov	r0, r5
    a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a716 <reserve>:

// returns a new buffer
void *reserve(cab *cab_id)
{
    a716:	b538      	push	{r3, r4, r5, lr}
    a718:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a71a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a71c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a724:	f7fd fa0c 	bl	7b40 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a728:	2400      	movs	r4, #0
    a72a:	e000      	b.n	a72e <reserve+0x18>
    a72c:	3401      	adds	r4, #1
    a72e:	68ab      	ldr	r3, [r5, #8]
    a730:	42a3      	cmp	r3, r4
    a732:	d90d      	bls.n	a750 <reserve+0x3a>
    {
        if (cab_id->buffersTaken[i] == 0)
    a734:	696b      	ldr	r3, [r5, #20]
    a736:	191a      	adds	r2, r3, r4
    a738:	5d1b      	ldrb	r3, [r3, r4]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d1f6      	bne.n	a72c <reserve+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a73e:	2301      	movs	r3, #1
    a740:	7013      	strb	r3, [r2, #0]
            k_mutex_unlock(cab_id->op_Mutex);
    a742:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a744:	f7fd fb1c 	bl	7d80 <z_impl_k_mutex_unlock>
            return cab_id->buffers[i];
    a748:	692b      	ldr	r3, [r5, #16]
    a74a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a74e:	e003      	b.n	a758 <reserve+0x42>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a750:	6828      	ldr	r0, [r5, #0]
    a752:	f7fd fb15 	bl	7d80 <z_impl_k_mutex_unlock>
    
    return NULL;
    a756:	2000      	movs	r0, #0
}
    a758:	bd38      	pop	{r3, r4, r5, pc}

0000a75a <put_mes>:

// puts a filled buffer inside the CAB
void put_mes(void *buf_pointer, cab *cab_id)
{
    a75a:	b570      	push	{r4, r5, r6, lr}
    a75c:	4606      	mov	r6, r0
    a75e:	460d      	mov	r5, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a760:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a76a:	f7fd f9e9 	bl	7b40 <z_impl_k_mutex_lock>
    

    for (size_t i = 0; i < cab_id->num; i++)
    a76e:	2400      	movs	r4, #0
    a770:	e000      	b.n	a774 <put_mes+0x1a>
    a772:	3401      	adds	r4, #1
    a774:	68ab      	ldr	r3, [r5, #8]
    a776:	42a3      	cmp	r3, r4
    a778:	d90c      	bls.n	a794 <put_mes+0x3a>
    {
        if (cab_id->buffers[i] == buf_pointer)
    a77a:	692b      	ldr	r3, [r5, #16]
    a77c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    a780:	42b1      	cmp	r1, r6
    a782:	d1f6      	bne.n	a772 <put_mes+0x18>
    a784:	68ea      	ldr	r2, [r5, #12]
    a786:	6818      	ldr	r0, [r3, #0]
    a788:	f001 fbda 	bl	bf40 <memcpy>
        {
            memcpy(cab_id->buffers[0], cab_id->buffers[i], cab_id->dim);
            cab_id->buffersTaken[i] = 0;
    a78c:	696b      	ldr	r3, [r5, #20]
    a78e:	2200      	movs	r2, #0
    a790:	551a      	strb	r2, [r3, r4]
    a792:	e7ee      	b.n	a772 <put_mes+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a794:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a796:	f7fd faf3 	bl	7d80 <z_impl_k_mutex_unlock>
    
}
    a79a:	bd70      	pop	{r4, r5, r6, pc}

0000a79c <get_mes>:

// get latest message
void *get_mes(cab *cab_id)
{
    a79c:	b538      	push	{r3, r4, r5, lr}
    a79e:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a7a0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a7aa:	f7fd f9c9 	bl	7b40 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a7ae:	2400      	movs	r4, #0
    a7b0:	e000      	b.n	a7b4 <get_mes+0x18>
    a7b2:	3401      	adds	r4, #1
    a7b4:	68ab      	ldr	r3, [r5, #8]
    a7b6:	42a3      	cmp	r3, r4
    a7b8:	d914      	bls.n	a7e4 <get_mes+0x48>
    {
        if (cab_id->buffersTaken[i] == 0)
    a7ba:	696b      	ldr	r3, [r5, #20]
    a7bc:	191a      	adds	r2, r3, r4
    a7be:	5d1b      	ldrb	r3, [r3, r4]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d1f6      	bne.n	a7b2 <get_mes+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a7c4:	2301      	movs	r3, #1
    a7c6:	7013      	strb	r3, [r2, #0]
            memcpy(cab_id->buffers[i], cab_id->buffers[0], cab_id->dim);
    a7c8:	692b      	ldr	r3, [r5, #16]
    a7ca:	68ea      	ldr	r2, [r5, #12]
    a7cc:	6819      	ldr	r1, [r3, #0]
    a7ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a7d2:	f001 fbb5 	bl	bf40 <memcpy>
            k_mutex_unlock(cab_id->op_Mutex);
    a7d6:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a7d8:	f7fd fad2 	bl	7d80 <z_impl_k_mutex_unlock>
            
            return cab_id->buffers[i];
    a7dc:	692b      	ldr	r3, [r5, #16]
    a7de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a7e2:	e003      	b.n	a7ec <get_mes+0x50>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a7e4:	6828      	ldr	r0, [r5, #0]
    a7e6:	f7fd facb 	bl	7d80 <z_impl_k_mutex_unlock>
    
    return NULL;
    a7ea:	2000      	movs	r0, #0
}
    a7ec:	bd38      	pop	{r3, r4, r5, pc}

0000a7ee <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    a7ee:	b538      	push	{r3, r4, r5, lr}
    a7f0:	4605      	mov	r5, r0
    a7f2:	460c      	mov	r4, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a7f4:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a7fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a7fe:	f7fd f99f 	bl	7b40 <z_impl_k_mutex_lock>
    
    for (size_t i = 0; i < cab_id->num; i++)
    a802:	2300      	movs	r3, #0
    a804:	e000      	b.n	a808 <unget+0x1a>
    a806:	3301      	adds	r3, #1
    a808:	68a2      	ldr	r2, [r4, #8]
    a80a:	429a      	cmp	r2, r3
    a80c:	d908      	bls.n	a820 <unget+0x32>
    {
        if (cab_id->buffers[i] == mes_pointer)
    a80e:	6922      	ldr	r2, [r4, #16]
    a810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a814:	42aa      	cmp	r2, r5
    a816:	d1f6      	bne.n	a806 <unget+0x18>
        {
            cab_id->buffersTaken[i] = 0;
    a818:	6962      	ldr	r2, [r4, #20]
    a81a:	2100      	movs	r1, #0
    a81c:	54d1      	strb	r1, [r2, r3]
    a81e:	e7f2      	b.n	a806 <unget+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a820:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
    a822:	f7fd faad 	bl	7d80 <z_impl_k_mutex_unlock>
    
}
    a826:	bd38      	pop	{r3, r4, r5, pc}

0000a828 <cbprintf_via_va_list>:
{
    a828:	b510      	push	{r4, lr}
    a82a:	460c      	mov	r4, r1
    a82c:	4611      	mov	r1, r2
    a82e:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    a830:	9b02      	ldr	r3, [sp, #8]
    a832:	47a0      	blx	r4
}
    a834:	bd10      	pop	{r4, pc}

0000a836 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a836:	b353      	cbz	r3, a88e <cbpprintf_external+0x58>
{
    a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a83c:	b082      	sub	sp, #8
    a83e:	4607      	mov	r7, r0
    a840:	4688      	mov	r8, r1
    a842:	4691      	mov	r9, r2
    a844:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    a846:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    a848:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    a84a:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    a84c:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a84e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    a852:	441c      	add	r4, r3
    a854:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a856:	f04f 0a00 	mov.w	sl, #0
    a85a:	e00a      	b.n	a872 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    a85c:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    a860:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    a864:	4620      	mov	r0, r4
    a866:	f7f5 fdb8 	bl	3da <strlen>
    a86a:	3001      	adds	r0, #1
    a86c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a86e:	f10a 0a01 	add.w	sl, sl, #1
    a872:	45b2      	cmp	sl, r6
    a874:	d3f2      	bcc.n	a85c <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    a876:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    a87a:	9300      	str	r3, [sp, #0]
    a87c:	686b      	ldr	r3, [r5, #4]
    a87e:	464a      	mov	r2, r9
    a880:	4641      	mov	r1, r8
    a882:	4638      	mov	r0, r7
    a884:	f7ff ffd0 	bl	a828 <cbprintf_via_va_list>
}
    a888:	b002      	add	sp, #8
    a88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    a88e:	f06f 0015 	mvn.w	r0, #21
}
    a892:	4770      	bx	lr

0000a894 <sys_notify_validate>:
	if (notify == NULL) {
    a894:	4602      	mov	r2, r0
    a896:	b158      	cbz	r0, a8b0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a898:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a89a:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    a89e:	2b01      	cmp	r3, #1
    a8a0:	d003      	beq.n	a8aa <sys_notify_validate+0x16>
    a8a2:	2b03      	cmp	r3, #3
    a8a4:	d107      	bne.n	a8b6 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    a8a6:	6803      	ldr	r3, [r0, #0]
    a8a8:	b143      	cbz	r3, a8bc <sys_notify_validate+0x28>
		notify->result = 0;
    a8aa:	2000      	movs	r0, #0
    a8ac:	6090      	str	r0, [r2, #8]
    a8ae:	4770      	bx	lr
		return -EINVAL;
    a8b0:	f06f 0015 	mvn.w	r0, #21
    a8b4:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    a8b6:	f06f 0015 	mvn.w	r0, #21
    a8ba:	4770      	bx	lr
			rv = -EINVAL;
    a8bc:	f06f 0015 	mvn.w	r0, #21
}
    a8c0:	4770      	bx	lr

0000a8c2 <arch_printk_char_out>:
}
    a8c2:	2000      	movs	r0, #0
    a8c4:	4770      	bx	lr

0000a8c6 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    a8c6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a8c8:	f000 f921 	bl	ab0e <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a8cc:	bd08      	pop	{r3, pc}

0000a8ce <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a8ce:	b40f      	push	{r0, r1, r2, r3}
    a8d0:	b500      	push	{lr}
    a8d2:	b083      	sub	sp, #12
    a8d4:	a904      	add	r1, sp, #16
    a8d6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a8da:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a8dc:	f7ff fff3 	bl	a8c6 <vprintk>

	va_end(ap);
}
    a8e0:	b003      	add	sp, #12
    a8e2:	f85d eb04 	ldr.w	lr, [sp], #4
    a8e6:	b004      	add	sp, #16
    a8e8:	4770      	bx	lr

0000a8ea <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    a8ea:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a8ee:	8b81      	ldrh	r1, [r0, #28]
    a8f0:	f021 0107 	bic.w	r1, r1, #7
    a8f4:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    a8f6:	8381      	strh	r1, [r0, #28]
}
    a8f8:	4770      	bx	lr

0000a8fa <notify_monitors>:
{
    a8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8fe:	4606      	mov	r6, r0
    a900:	460f      	mov	r7, r1
    a902:	4690      	mov	r8, r2
	return list->head;
    a904:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a906:	b119      	cbz	r1, a910 <notify_monitors+0x16>
    a908:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    a90a:	b131      	cbz	r1, a91a <notify_monitors+0x20>
	return node->next;
    a90c:	680c      	ldr	r4, [r1, #0]
    a90e:	e004      	b.n	a91a <notify_monitors+0x20>
    a910:	460c      	mov	r4, r1
    a912:	e002      	b.n	a91a <notify_monitors+0x20>
    a914:	4623      	mov	r3, r4
    a916:	4621      	mov	r1, r4
    a918:	461c      	mov	r4, r3
    a91a:	b159      	cbz	r1, a934 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    a91c:	684d      	ldr	r5, [r1, #4]
    a91e:	4643      	mov	r3, r8
    a920:	463a      	mov	r2, r7
    a922:	4630      	mov	r0, r6
    a924:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a926:	2c00      	cmp	r4, #0
    a928:	d0f4      	beq.n	a914 <notify_monitors+0x1a>
    a92a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a92c:	2c00      	cmp	r4, #0
    a92e:	d0f2      	beq.n	a916 <notify_monitors+0x1c>
	return node->next;
    a930:	6823      	ldr	r3, [r4, #0]
    a932:	e7f0      	b.n	a916 <notify_monitors+0x1c>
}
    a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a938 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a938:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a93a:	f013 0307 	ands.w	r3, r3, #7
    a93e:	d103      	bne.n	a948 <process_recheck+0x10>
	return list->head;
    a940:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    a942:	b10a      	cbz	r2, a948 <process_recheck+0x10>
		evt = EVT_START;
    a944:	2003      	movs	r0, #3
    a946:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a948:	2b02      	cmp	r3, #2
    a94a:	d003      	beq.n	a954 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    a94c:	2b01      	cmp	r3, #1
    a94e:	d006      	beq.n	a95e <process_recheck+0x26>
	int evt = EVT_NOP;
    a950:	2000      	movs	r0, #0
    a952:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    a954:	8bc2      	ldrh	r2, [r0, #30]
    a956:	2a00      	cmp	r2, #0
    a958:	d1f8      	bne.n	a94c <process_recheck+0x14>
		evt = EVT_STOP;
    a95a:	2004      	movs	r0, #4
    a95c:	4770      	bx	lr
    a95e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    a960:	b10b      	cbz	r3, a966 <process_recheck+0x2e>
		evt = EVT_RESET;
    a962:	2005      	movs	r0, #5
}
    a964:	4770      	bx	lr
	int evt = EVT_NOP;
    a966:	2000      	movs	r0, #0
    a968:	4770      	bx	lr

0000a96a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    a96a:	b158      	cbz	r0, a984 <validate_args+0x1a>
{
    a96c:	b510      	push	{r4, lr}
    a96e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a970:	b159      	cbz	r1, a98a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    a972:	1d08      	adds	r0, r1, #4
    a974:	f7ff ff8e 	bl	a894 <sys_notify_validate>
	if ((rv == 0)
    a978:	b918      	cbnz	r0, a982 <validate_args+0x18>
	    && ((cli->notify.flags
    a97a:	68a3      	ldr	r3, [r4, #8]
    a97c:	f033 0303 	bics.w	r3, r3, #3
    a980:	d106      	bne.n	a990 <validate_args+0x26>
}
    a982:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a984:	f06f 0015 	mvn.w	r0, #21
}
    a988:	4770      	bx	lr
		return -EINVAL;
    a98a:	f06f 0015 	mvn.w	r0, #21
    a98e:	e7f8      	b.n	a982 <validate_args+0x18>
		rv = -EINVAL;
    a990:	f06f 0015 	mvn.w	r0, #21
    a994:	e7f5      	b.n	a982 <validate_args+0x18>

0000a996 <notify_one>:
{
    a996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a99a:	4607      	mov	r7, r0
    a99c:	460c      	mov	r4, r1
    a99e:	4616      	mov	r6, r2
    a9a0:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a9a2:	4619      	mov	r1, r3
    a9a4:	1d20      	adds	r0, r4, #4
    a9a6:	f7f6 f8f3 	bl	b90 <sys_notify_finalize>
	if (cb) {
    a9aa:	b128      	cbz	r0, a9b8 <notify_one+0x22>
    a9ac:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    a9ae:	462b      	mov	r3, r5
    a9b0:	4632      	mov	r2, r6
    a9b2:	4621      	mov	r1, r4
    a9b4:	4638      	mov	r0, r7
    a9b6:	47c0      	blx	r8
}
    a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a9bc <notify_all>:
{
    a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9c0:	4680      	mov	r8, r0
    a9c2:	460c      	mov	r4, r1
    a9c4:	4617      	mov	r7, r2
    a9c6:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    a9c8:	e004      	b.n	a9d4 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    a9ca:	4633      	mov	r3, r6
    a9cc:	463a      	mov	r2, r7
    a9ce:	4640      	mov	r0, r8
    a9d0:	f7ff ffe1 	bl	a996 <notify_one>
    a9d4:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    a9d6:	b131      	cbz	r1, a9e6 <notify_all+0x2a>
	return node->next;
    a9d8:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    a9da:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a9dc:	6863      	ldr	r3, [r4, #4]
    a9de:	428b      	cmp	r3, r1
    a9e0:	d1f3      	bne.n	a9ca <notify_all+0xe>
	list->tail = node;
    a9e2:	6065      	str	r5, [r4, #4]
}
    a9e4:	e7f1      	b.n	a9ca <notify_all+0xe>
}
    a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a9ea <onoff_manager_init>:
	if ((mgr == NULL)
    a9ea:	b170      	cbz	r0, aa0a <onoff_manager_init+0x20>
{
    a9ec:	b538      	push	{r3, r4, r5, lr}
    a9ee:	460c      	mov	r4, r1
    a9f0:	4605      	mov	r5, r0
	    || (transitions == NULL)
    a9f2:	b169      	cbz	r1, aa10 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    a9f4:	680b      	ldr	r3, [r1, #0]
    a9f6:	b173      	cbz	r3, aa16 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    a9f8:	684b      	ldr	r3, [r1, #4]
    a9fa:	b17b      	cbz	r3, aa1c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a9fc:	2220      	movs	r2, #32
    a9fe:	2100      	movs	r1, #0
    aa00:	f001 faac 	bl	bf5c <memset>
    aa04:	612c      	str	r4, [r5, #16]
	return 0;
    aa06:	2000      	movs	r0, #0
}
    aa08:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    aa0a:	f06f 0015 	mvn.w	r0, #21
}
    aa0e:	4770      	bx	lr
		return -EINVAL;
    aa10:	f06f 0015 	mvn.w	r0, #21
    aa14:	e7f8      	b.n	aa08 <onoff_manager_init+0x1e>
    aa16:	f06f 0015 	mvn.w	r0, #21
    aa1a:	e7f5      	b.n	aa08 <onoff_manager_init+0x1e>
    aa1c:	f06f 0015 	mvn.w	r0, #21
    aa20:	e7f2      	b.n	aa08 <onoff_manager_init+0x1e>

0000aa22 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    aa22:	b508      	push	{r3, lr}
    aa24:	4604      	mov	r4, r0
    aa26:	4608      	mov	r0, r1
    aa28:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    aa2a:	461a      	mov	r2, r3
    aa2c:	47a0      	blx	r4
	return z_impl_z_current_get();
    aa2e:	f7fe fda7 	bl	9580 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    aa32:	f7f8 ff47 	bl	38c4 <z_impl_k_thread_abort>

0000aa36 <free_list_add_bidx>:
{
    aa36:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    aa38:	1d13      	adds	r3, r2, #4
    aa3a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    aa3e:	b97c      	cbnz	r4, aa60 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    aa40:	2301      	movs	r3, #1
    aa42:	fa03 f402 	lsl.w	r4, r3, r2
    aa46:	68c3      	ldr	r3, [r0, #12]
    aa48:	4323      	orrs	r3, r4
    aa4a:	60c3      	str	r3, [r0, #12]
		b->next = c;
    aa4c:	3204      	adds	r2, #4
    aa4e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    aa52:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    aa54:	1d1a      	adds	r2, r3, #4
    aa56:	b289      	uxth	r1, r1
    aa58:	5281      	strh	r1, [r0, r2]
    aa5a:	3306      	adds	r3, #6
    aa5c:	52c1      	strh	r1, [r0, r3]
}
    aa5e:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    aa60:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    aa62:	3204      	adds	r2, #4
    aa64:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    aa66:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    aa6a:	f10c 0e04 	add.w	lr, ip, #4
    aa6e:	f820 300e 	strh.w	r3, [r0, lr]
    aa72:	f10c 0c06 	add.w	ip, ip, #6
    aa76:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    aa7a:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    aa7c:	3306      	adds	r3, #6
    aa7e:	b289      	uxth	r1, r1
    aa80:	52c1      	strh	r1, [r0, r3]
    aa82:	5281      	strh	r1, [r0, r2]
    aa84:	e7eb      	b.n	aa5e <free_list_add_bidx+0x28>

0000aa86 <free_list_add>:
{
    aa86:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    aa88:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    aa8c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    aa8e:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    aa90:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    aa94:	f1c2 021f 	rsb	r2, r2, #31
    aa98:	f7ff ffcd 	bl	aa36 <free_list_add_bidx>
}
    aa9c:	bd08      	pop	{r3, pc}

0000aa9e <outs>:
{
    aa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aaa2:	4607      	mov	r7, r0
    aaa4:	460e      	mov	r6, r1
    aaa6:	4614      	mov	r4, r2
    aaa8:	4698      	mov	r8, r3
	size_t count = 0;
    aaaa:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    aaac:	e006      	b.n	aabc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    aaae:	4631      	mov	r1, r6
    aab0:	f814 0b01 	ldrb.w	r0, [r4], #1
    aab4:	47b8      	blx	r7
		if (rc < 0) {
    aab6:	2800      	cmp	r0, #0
    aab8:	db09      	blt.n	aace <outs+0x30>
		++count;
    aaba:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    aabc:	4544      	cmp	r4, r8
    aabe:	d3f6      	bcc.n	aaae <outs+0x10>
    aac0:	f1b8 0f00 	cmp.w	r8, #0
    aac4:	d102      	bne.n	aacc <outs+0x2e>
    aac6:	7823      	ldrb	r3, [r4, #0]
    aac8:	2b00      	cmp	r3, #0
    aaca:	d1f0      	bne.n	aaae <outs+0x10>
	return (int)count;
    aacc:	4628      	mov	r0, r5
}
    aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aad2 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    aad2:	4040      	eors	r0, r0
    aad4:	f380 8811 	msr	BASEPRI, r0
    aad8:	f04f 0004 	mov.w	r0, #4
    aadc:	df02      	svc	2
}
    aade:	4770      	bx	lr

0000aae0 <assert_print>:

void assert_print(const char *fmt, ...)
{
    aae0:	b40f      	push	{r0, r1, r2, r3}
    aae2:	b500      	push	{lr}
    aae4:	b083      	sub	sp, #12
    aae6:	a904      	add	r1, sp, #16
    aae8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    aaec:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    aaee:	f7ff feea 	bl	a8c6 <vprintk>

	va_end(ap);
}
    aaf2:	b003      	add	sp, #12
    aaf4:	f85d eb04 	ldr.w	lr, [sp], #4
    aaf8:	b004      	add	sp, #16
    aafa:	4770      	bx	lr

0000aafc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    aafc:	4770      	bx	lr

0000aafe <dummy_timestamp>:
}
    aafe:	2000      	movs	r0, #0
    ab00:	4770      	bx	lr

0000ab02 <msg_filter_check>:
}
    ab02:	2001      	movs	r0, #1
    ab04:	4770      	bx	lr

0000ab06 <default_get_timestamp>:
{
    ab06:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    ab08:	f001 f80e 	bl	bb28 <sys_clock_cycle_get_32>
}
    ab0c:	bd08      	pop	{r3, pc}

0000ab0e <z_log_vprintk>:
{
    ab0e:	b500      	push	{lr}
    ab10:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    ab12:	9103      	str	r1, [sp, #12]
    ab14:	9002      	str	r0, [sp, #8]
    ab16:	2000      	movs	r0, #0
    ab18:	9001      	str	r0, [sp, #4]
    ab1a:	9000      	str	r0, [sp, #0]
    ab1c:	4603      	mov	r3, r0
    ab1e:	4602      	mov	r2, r0
    ab20:	4601      	mov	r1, r0
    ab22:	f7f7 fcfd 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab26:	b005      	add	sp, #20
    ab28:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab2c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    ab2c:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    ab2e:	f7f7 f9c9 	bl	1ec4 <log_init>
	}

	return 0;
}
    ab32:	2000      	movs	r0, #0
    ab34:	bd08      	pop	{r3, pc}

0000ab36 <z_log_get_tag>:
}
    ab36:	2000      	movs	r0, #0
    ab38:	4770      	bx	lr

0000ab3a <out_func>:
{
    ab3a:	b500      	push	{lr}
    ab3c:	b083      	sub	sp, #12
		char x = (char)c;
    ab3e:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    ab42:	680b      	ldr	r3, [r1, #0]
    ab44:	684a      	ldr	r2, [r1, #4]
    ab46:	6852      	ldr	r2, [r2, #4]
    ab48:	2101      	movs	r1, #1
    ab4a:	f10d 0007 	add.w	r0, sp, #7
    ab4e:	4798      	blx	r3
}
    ab50:	2000      	movs	r0, #0
    ab52:	b003      	add	sp, #12
    ab54:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab58 <cr_out_func>:
{
    ab58:	b538      	push	{r3, r4, r5, lr}
    ab5a:	4604      	mov	r4, r0
    ab5c:	460d      	mov	r5, r1
	out_func(c, ctx);
    ab5e:	f7ff ffec 	bl	ab3a <out_func>
	if (c == '\n') {
    ab62:	2c0a      	cmp	r4, #10
    ab64:	d001      	beq.n	ab6a <cr_out_func+0x12>
}
    ab66:	2000      	movs	r0, #0
    ab68:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    ab6a:	4629      	mov	r1, r5
    ab6c:	200d      	movs	r0, #13
    ab6e:	f7ff ffe4 	bl	ab3a <out_func>
    ab72:	e7f8      	b.n	ab66 <cr_out_func+0xe>

0000ab74 <buffer_write>:
{
    ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab76:	4607      	mov	r7, r0
    ab78:	460d      	mov	r5, r1
    ab7a:	4614      	mov	r4, r2
    ab7c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    ab7e:	4632      	mov	r2, r6
    ab80:	4621      	mov	r1, r4
    ab82:	4628      	mov	r0, r5
    ab84:	47b8      	blx	r7
		buf += processed;
    ab86:	4405      	add	r5, r0
	} while (len != 0);
    ab88:	1a24      	subs	r4, r4, r0
    ab8a:	d1f8      	bne.n	ab7e <buffer_write+0xa>
}
    ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ab8e <color_prefix>:
{
    ab8e:	b508      	push	{r3, lr}
    ab90:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    ab92:	2201      	movs	r2, #1
    ab94:	f7f7 fb3c 	bl	2210 <color_print>
}
    ab98:	bd08      	pop	{r3, pc}

0000ab9a <color_postfix>:
{
    ab9a:	b508      	push	{r3, lr}
    ab9c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    ab9e:	2200      	movs	r2, #0
    aba0:	f7f7 fb36 	bl	2210 <color_print>
}
    aba4:	bd08      	pop	{r3, pc}

0000aba6 <postfix_print>:
{
    aba6:	b538      	push	{r3, r4, r5, lr}
    aba8:	4605      	mov	r5, r0
    abaa:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    abac:	f001 0101 	and.w	r1, r1, #1
    abb0:	f7ff fff3 	bl	ab9a <color_postfix>
	newline_print(output, flags);
    abb4:	4621      	mov	r1, r4
    abb6:	4628      	mov	r0, r5
    abb8:	f7f7 fb40 	bl	223c <newline_print>
}
    abbc:	bd38      	pop	{r3, r4, r5, pc}

0000abbe <log_msg2_hexdump>:
{
    abbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    abc2:	b083      	sub	sp, #12
    abc4:	4680      	mov	r8, r0
    abc6:	460e      	mov	r6, r1
    abc8:	4615      	mov	r5, r2
    abca:	461f      	mov	r7, r3
    abcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    abd0:	462c      	mov	r4, r5
    abd2:	2d10      	cmp	r5, #16
    abd4:	bf28      	it	cs
    abd6:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    abd8:	f8cd 9000 	str.w	r9, [sp]
    abdc:	463b      	mov	r3, r7
    abde:	4622      	mov	r2, r4
    abe0:	4631      	mov	r1, r6
    abe2:	4640      	mov	r0, r8
    abe4:	f7f7 fb3e 	bl	2264 <hexdump_line_print>
		data += length;
    abe8:	4426      	add	r6, r4
	} while (len);
    abea:	1b2d      	subs	r5, r5, r4
    abec:	d1f0      	bne.n	abd0 <log_msg2_hexdump+0x12>
}
    abee:	b003      	add	sp, #12
    abf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000abf4 <log_output_flush>:
{
    abf4:	b510      	push	{r4, lr}
    abf6:	4604      	mov	r4, r0
		     output->control_block->offset,
    abf8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    abfa:	6853      	ldr	r3, [r2, #4]
    abfc:	6812      	ldr	r2, [r2, #0]
    abfe:	6881      	ldr	r1, [r0, #8]
    ac00:	6800      	ldr	r0, [r0, #0]
    ac02:	f7ff ffb7 	bl	ab74 <buffer_write>
	output->control_block->offset = 0;
    ac06:	6863      	ldr	r3, [r4, #4]
    ac08:	2200      	movs	r2, #0
    ac0a:	601a      	str	r2, [r3, #0]
}
    ac0c:	bd10      	pop	{r4, pc}

0000ac0e <z_log_msg2_finalize>:
{
    ac0e:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    ac10:	b198      	cbz	r0, ac3a <z_log_msg2_finalize+0x2c>
    ac12:	460e      	mov	r6, r1
    ac14:	4614      	mov	r4, r2
    ac16:	4619      	mov	r1, r3
    ac18:	4605      	mov	r5, r0
	if (data) {
    ac1a:	b143      	cbz	r3, ac2e <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    ac1c:	f100 0310 	add.w	r3, r0, #16
    ac20:	f3c2 2049 	ubfx	r0, r2, #9, #10
    ac24:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    ac28:	4418      	add	r0, r3
    ac2a:	f001 f989 	bl	bf40 <memcpy>
	msg->hdr.desc = desc;
    ac2e:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    ac30:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    ac32:	4628      	mov	r0, r5
    ac34:	f7f7 fa28 	bl	2088 <z_log_msg2_commit>
}
    ac38:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    ac3a:	f7f7 fa05 	bl	2048 <z_log_dropped>
		return;
    ac3e:	e7fb      	b.n	ac38 <z_log_msg2_finalize+0x2a>

0000ac40 <abort_function>:
{
    ac40:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    ac42:	2000      	movs	r0, #0
    ac44:	f7f7 f8c4 	bl	1dd0 <sys_reboot>

0000ac48 <z_log_msg2_runtime_create>:
{
    ac48:	b510      	push	{r4, lr}
    ac4a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ac4c:	ac0b      	add	r4, sp, #44	; 0x2c
    ac4e:	9405      	str	r4, [sp, #20]
    ac50:	9403      	str	r4, [sp, #12]
    ac52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ac54:	9402      	str	r4, [sp, #8]
    ac56:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ac58:	9401      	str	r4, [sp, #4]
    ac5a:	9c08      	ldr	r4, [sp, #32]
    ac5c:	9400      	str	r4, [sp, #0]
    ac5e:	f7f7 fc5f 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    ac62:	b006      	add	sp, #24
    ac64:	bd10      	pop	{r4, pc}

0000ac66 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ac66:	b538      	push	{r3, r4, r5, lr}
    ac68:	4604      	mov	r4, r0

	if (esf != NULL) {
    ac6a:	460d      	mov	r5, r1
    ac6c:	b111      	cbz	r1, ac74 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    ac6e:	4608      	mov	r0, r1
    ac70:	f7f8 f87e 	bl	2d70 <esf_dump>
	}
	z_fatal_error(reason, esf);
    ac74:	4629      	mov	r1, r5
    ac76:	4620      	mov	r0, r4
    ac78:	f7fc faa2 	bl	71c0 <z_fatal_error>
}
    ac7c:	bd38      	pop	{r3, r4, r5, pc}

0000ac7e <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    ac7e:	b508      	push	{r3, lr}
    ac80:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ac82:	6800      	ldr	r0, [r0, #0]
    ac84:	f7ff ffef 	bl	ac66 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    ac88:	bd08      	pop	{r3, pc}

0000ac8a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    ac8a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ac8c:	2100      	movs	r1, #0
    ac8e:	2001      	movs	r0, #1
    ac90:	f7ff ffe9 	bl	ac66 <z_arm_fatal_error>
}
    ac94:	bd08      	pop	{r3, pc}

0000ac96 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    ac96:	b508      	push	{r3, lr}
	handler();
    ac98:	f7f8 f906 	bl	2ea8 <z_SysNmiOnReset>
	z_arm_int_exit();
    ac9c:	f7f8 f9fc 	bl	3098 <z_arm_exc_exit>
}
    aca0:	bd08      	pop	{r3, pc}

0000aca2 <memory_fault_recoverable>:
}
    aca2:	2000      	movs	r0, #0
    aca4:	4770      	bx	lr

0000aca6 <z_log_msg2_runtime_create>:
{
    aca6:	b510      	push	{r4, lr}
    aca8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    acaa:	ac0b      	add	r4, sp, #44	; 0x2c
    acac:	9405      	str	r4, [sp, #20]
    acae:	9403      	str	r4, [sp, #12]
    acb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    acb2:	9402      	str	r4, [sp, #8]
    acb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    acb6:	9401      	str	r4, [sp, #4]
    acb8:	9c08      	ldr	r4, [sp, #32]
    acba:	9400      	str	r4, [sp, #0]
    acbc:	f7f7 fc30 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    acc0:	b006      	add	sp, #24
    acc2:	bd10      	pop	{r4, pc}

0000acc4 <fault_handle>:
{
    acc4:	b508      	push	{r3, lr}
	*recoverable = false;
    acc6:	2300      	movs	r3, #0
    acc8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    acca:	1ecb      	subs	r3, r1, #3
    accc:	2b09      	cmp	r3, #9
    acce:	d81a      	bhi.n	ad06 <fault_handle+0x42>
    acd0:	e8df f003 	tbb	[pc, r3]
    acd4:	110d0905 	.word	0x110d0905
    acd8:	19191919 	.word	0x19191919
    acdc:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    acde:	4611      	mov	r1, r2
    ace0:	f7f8 fc2c 	bl	353c <hard_fault>
}
    ace4:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    ace6:	2100      	movs	r1, #0
    ace8:	f7f8 fb4a 	bl	3380 <mem_manage_fault>
		break;
    acec:	e7fa      	b.n	ace4 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    acee:	2100      	movs	r1, #0
    acf0:	f7f8 f9e0 	bl	30b4 <bus_fault>
		break;
    acf4:	e7f6      	b.n	ace4 <fault_handle+0x20>
		reason = usage_fault(esf);
    acf6:	f7f8 fa85 	bl	3204 <usage_fault>
		break;
    acfa:	e7f3      	b.n	ace4 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    acfc:	4611      	mov	r1, r2
    acfe:	f7f8 fb0b 	bl	3318 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ad02:	2000      	movs	r0, #0
		break;
    ad04:	e7ee      	b.n	ace4 <fault_handle+0x20>
		reserved_exception(esf, fault);
    ad06:	f7f8 fb1b 	bl	3340 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ad0a:	2000      	movs	r0, #0
	return reason;
    ad0c:	e7ea      	b.n	ace4 <fault_handle+0x20>

0000ad0e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    ad0e:	6843      	ldr	r3, [r0, #4]
    ad10:	1e5a      	subs	r2, r3, #1
		&&
    ad12:	4213      	tst	r3, r2
    ad14:	d106      	bne.n	ad24 <mpu_partition_is_valid+0x16>
		&&
    ad16:	2b1f      	cmp	r3, #31
    ad18:	d906      	bls.n	ad28 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    ad1a:	6803      	ldr	r3, [r0, #0]
		&&
    ad1c:	421a      	tst	r2, r3
    ad1e:	d005      	beq.n	ad2c <mpu_partition_is_valid+0x1e>
    ad20:	2000      	movs	r0, #0
    ad22:	4770      	bx	lr
    ad24:	2000      	movs	r0, #0
    ad26:	4770      	bx	lr
    ad28:	2000      	movs	r0, #0
    ad2a:	4770      	bx	lr
    ad2c:	2001      	movs	r0, #1
}
    ad2e:	4770      	bx	lr

0000ad30 <z_log_msg2_runtime_create>:
{
    ad30:	b510      	push	{r4, lr}
    ad32:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ad34:	ac0b      	add	r4, sp, #44	; 0x2c
    ad36:	9405      	str	r4, [sp, #20]
    ad38:	9403      	str	r4, [sp, #12]
    ad3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ad3c:	9402      	str	r4, [sp, #8]
    ad3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ad40:	9401      	str	r4, [sp, #4]
    ad42:	9c08      	ldr	r4, [sp, #32]
    ad44:	9400      	str	r4, [sp, #0]
    ad46:	f7f7 fbeb 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    ad4a:	b006      	add	sp, #24
    ad4c:	bd10      	pop	{r4, pc}

0000ad4e <mpu_configure_region>:
{
    ad4e:	b500      	push	{lr}
    ad50:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    ad52:	680b      	ldr	r3, [r1, #0]
    ad54:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ad56:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    ad58:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    ad5a:	2b20      	cmp	r3, #32
    ad5c:	d912      	bls.n	ad84 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    ad5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ad62:	d811      	bhi.n	ad88 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    ad64:	3b01      	subs	r3, #1
    ad66:	fab3 f383 	clz	r3, r3
    ad6a:	f1c3 031f 	rsb	r3, r3, #31
    ad6e:	005b      	lsls	r3, r3, #1
    ad70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    ad74:	4313      	orrs	r3, r2
    ad76:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    ad78:	a901      	add	r1, sp, #4
    ad7a:	f7f8 fdf1 	bl	3960 <region_allocate_and_init>
}
    ad7e:	b005      	add	sp, #20
    ad80:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    ad84:	2308      	movs	r3, #8
    ad86:	e7f5      	b.n	ad74 <mpu_configure_region+0x26>
		return REGION_4G;
    ad88:	233e      	movs	r3, #62	; 0x3e
    ad8a:	e7f3      	b.n	ad74 <mpu_configure_region+0x26>

0000ad8c <_stdout_hook_default>:
}
    ad8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ad90:	4770      	bx	lr

0000ad92 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ad92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ad96:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ad9a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    ad9e:	2a08      	cmp	r2, #8
    ada0:	d001      	beq.n	ada6 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    ada2:	2000      	movs	r0, #0
    ada4:	4770      	bx	lr
                switch(var2)
    ada6:	2b02      	cmp	r3, #2
    ada8:	d001      	beq.n	adae <nrf52_errata_197+0x1c>
                        return false;
    adaa:	2000      	movs	r0, #0
    adac:	4770      	bx	lr
                        return true;
    adae:	2001      	movs	r0, #1
    #endif
}
    adb0:	4770      	bx	lr

0000adb2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    adb2:	2806      	cmp	r0, #6
    adb4:	d000      	beq.n	adb8 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    adb6:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    adb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    adbc:	2201      	movs	r2, #1
    adbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    adc2:	f3bf 8f4f 	dsb	sy
        __WFE();
    adc6:	bf20      	wfe
    while (true)
    adc8:	e7fd      	b.n	adc6 <pm_state_set+0x14>

0000adca <pm_state_exit_post_ops>:
    adca:	2300      	movs	r3, #0
    adcc:	f383 8811 	msr	BASEPRI, r3
    add0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    add4:	4770      	bx	lr

0000add6 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    add6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    add8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    addc:	0089      	lsls	r1, r1, #2
    adde:	3140      	adds	r1, #64	; 0x40
}
    ade0:	4408      	add	r0, r1
    ade2:	4770      	bx	lr

0000ade4 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    ade4:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    ade6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    adea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    adee:	4770      	bx	lr

0000adf0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    adf0:	6900      	ldr	r0, [r0, #16]
}
    adf2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    adf6:	4770      	bx	lr

0000adf8 <set_off_state>:
	__asm__ volatile(
    adf8:	f04f 0320 	mov.w	r3, #32
    adfc:	f3ef 8211 	mrs	r2, BASEPRI
    ae00:	f383 8812 	msr	BASEPRI_MAX, r3
    ae04:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ae08:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    ae0a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ae0e:	d001      	beq.n	ae14 <set_off_state+0x1c>
    ae10:	428b      	cmp	r3, r1
    ae12:	d107      	bne.n	ae24 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ae14:	2301      	movs	r3, #1
    ae16:	6003      	str	r3, [r0, #0]
	int err = 0;
    ae18:	2000      	movs	r0, #0
	__asm__ volatile(
    ae1a:	f382 8811 	msr	BASEPRI, r2
    ae1e:	f3bf 8f6f 	isb	sy
}
    ae22:	4770      	bx	lr
		err = -EPERM;
    ae24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ae28:	e7f7      	b.n	ae1a <set_off_state+0x22>

0000ae2a <set_starting_state>:
	__asm__ volatile(
    ae2a:	f04f 0320 	mov.w	r3, #32
    ae2e:	f3ef 8211 	mrs	r2, BASEPRI
    ae32:	f383 8812 	msr	BASEPRI_MAX, r3
    ae36:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ae3a:	6803      	ldr	r3, [r0, #0]
    ae3c:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ae40:	f003 0307 	and.w	r3, r3, #7
    ae44:	2b01      	cmp	r3, #1
    ae46:	d008      	beq.n	ae5a <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    ae48:	458c      	cmp	ip, r1
    ae4a:	d009      	beq.n	ae60 <set_starting_state+0x36>
		err = -EPERM;
    ae4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    ae50:	f382 8811 	msr	BASEPRI, r2
    ae54:	f3bf 8f6f 	isb	sy
}
    ae58:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ae5a:	6001      	str	r1, [r0, #0]
	int err = 0;
    ae5c:	2000      	movs	r0, #0
    ae5e:	e7f7      	b.n	ae50 <set_starting_state+0x26>
		err = -EALREADY;
    ae60:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ae64:	e7f4      	b.n	ae50 <set_starting_state+0x26>

0000ae66 <set_on_state>:
	__asm__ volatile(
    ae66:	f04f 0320 	mov.w	r3, #32
    ae6a:	f3ef 8211 	mrs	r2, BASEPRI
    ae6e:	f383 8812 	msr	BASEPRI_MAX, r3
    ae72:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ae76:	6803      	ldr	r3, [r0, #0]
    ae78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ae7c:	f043 0302 	orr.w	r3, r3, #2
    ae80:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ae82:	f382 8811 	msr	BASEPRI, r2
    ae86:	f3bf 8f6f 	isb	sy
}
    ae8a:	4770      	bx	lr

0000ae8c <clkstarted_handle>:
{
    ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae8e:	4606      	mov	r6, r0
    ae90:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    ae92:	f7ff ffa0 	bl	add6 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    ae96:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    ae98:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    ae9a:	2300      	movs	r3, #0
    ae9c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    aea0:	f7ff ffe1 	bl	ae66 <set_on_state>
	if (callback) {
    aea4:	b11d      	cbz	r5, aeae <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    aea6:	463a      	mov	r2, r7
    aea8:	4621      	mov	r1, r4
    aeaa:	4630      	mov	r0, r6
    aeac:	47a8      	blx	r5
}
    aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000aeb0 <async_start>:
{
    aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aeb4:	4606      	mov	r6, r0
    aeb6:	4690      	mov	r8, r2
    aeb8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    aeba:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    aebc:	4629      	mov	r1, r5
    aebe:	f7ff ff8a 	bl	add6 <get_sub_data>
    aec2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    aec4:	9906      	ldr	r1, [sp, #24]
    aec6:	3008      	adds	r0, #8
    aec8:	f7ff ffaf 	bl	ae2a <set_starting_state>
	if (err < 0) {
    aecc:	2800      	cmp	r0, #0
    aece:	db09      	blt.n	aee4 <async_start+0x34>
	subdata->cb = cb;
    aed0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    aed4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    aed6:	4629      	mov	r1, r5
    aed8:	4630      	mov	r0, r6
    aeda:	f7ff ff83 	bl	ade4 <get_sub_config>
    aede:	6803      	ldr	r3, [r0, #0]
    aee0:	4798      	blx	r3
	return 0;
    aee2:	2000      	movs	r0, #0
}
    aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000aee8 <api_start>:
{
    aee8:	b510      	push	{r4, lr}
    aeea:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    aeec:	2480      	movs	r4, #128	; 0x80
    aeee:	9400      	str	r4, [sp, #0]
    aef0:	f7ff ffde 	bl	aeb0 <async_start>
}
    aef4:	b002      	add	sp, #8
    aef6:	bd10      	pop	{r4, pc}

0000aef8 <onoff_started_callback>:
{
    aef8:	b510      	push	{r4, lr}
    aefa:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    aefc:	b2c9      	uxtb	r1, r1
    aefe:	f7ff ff77 	bl	adf0 <get_onoff_manager>
	notify(mgr, 0);
    af02:	2100      	movs	r1, #0
    af04:	47a0      	blx	r4
}
    af06:	bd10      	pop	{r4, pc}

0000af08 <hfclk_start>:
{
    af08:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    af0a:	2001      	movs	r0, #1
    af0c:	f7fa ff90 	bl	5e30 <nrfx_clock_start>
}
    af10:	bd08      	pop	{r3, pc}

0000af12 <lfclk_start>:
{
    af12:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    af14:	2000      	movs	r0, #0
    af16:	f7fa ff8b 	bl	5e30 <nrfx_clock_start>
}
    af1a:	bd08      	pop	{r3, pc}

0000af1c <hfclk_stop>:
{
    af1c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    af1e:	2001      	movs	r0, #1
    af20:	f7fa fffc 	bl	5f1c <nrfx_clock_stop>
}
    af24:	bd08      	pop	{r3, pc}

0000af26 <lfclk_stop>:
{
    af26:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    af28:	2000      	movs	r0, #0
    af2a:	f7fa fff7 	bl	5f1c <nrfx_clock_stop>
}
    af2e:	bd08      	pop	{r3, pc}

0000af30 <api_stop>:
{
    af30:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    af32:	2280      	movs	r2, #128	; 0x80
    af34:	f7f8 ff64 	bl	3e00 <stop>
}
    af38:	bd08      	pop	{r3, pc}

0000af3a <blocking_start_callback>:
{
    af3a:	b508      	push	{r3, lr}
    af3c:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    af3e:	f7fc fff3 	bl	7f28 <z_impl_k_sem_give>
}
    af42:	bd08      	pop	{r3, pc}

0000af44 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    af44:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    af48:	f020 0001 	bic.w	r0, r0, #1
    af4c:	0540      	lsls	r0, r0, #21
    af4e:	0d40      	lsrs	r0, r0, #21
    af50:	f240 2306 	movw	r3, #518	; 0x206
    af54:	4298      	cmp	r0, r3
    af56:	d033      	beq.n	afc0 <get_drive+0x7c>
    af58:	d816      	bhi.n	af88 <get_drive+0x44>
    af5a:	2806      	cmp	r0, #6
    af5c:	d02c      	beq.n	afb8 <get_drive+0x74>
    af5e:	d906      	bls.n	af6e <get_drive+0x2a>
    af60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    af64:	d10d      	bne.n	af82 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    af66:	2301      	movs	r3, #1
    af68:	700b      	strb	r3, [r1, #0]
	int err = 0;
    af6a:	2000      	movs	r0, #0
		break;
    af6c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    af6e:	b300      	cbz	r0, afb2 <get_drive+0x6e>
    af70:	2802      	cmp	r0, #2
    af72:	d103      	bne.n	af7c <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    af74:	2304      	movs	r3, #4
    af76:	700b      	strb	r3, [r1, #0]
	int err = 0;
    af78:	2000      	movs	r0, #0
		break;
    af7a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    af7c:	f06f 0015 	mvn.w	r0, #21
    af80:	4770      	bx	lr
    af82:	f06f 0015 	mvn.w	r0, #21
    af86:	4770      	bx	lr
    af88:	f240 4302 	movw	r3, #1026	; 0x402
    af8c:	4298      	cmp	r0, r3
    af8e:	d01b      	beq.n	afc8 <get_drive+0x84>
    af90:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    af94:	d103      	bne.n	af9e <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    af96:	2303      	movs	r3, #3
    af98:	700b      	strb	r3, [r1, #0]
	int err = 0;
    af9a:	2000      	movs	r0, #0
		break;
    af9c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    af9e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    afa2:	d103      	bne.n	afac <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    afa4:	2302      	movs	r3, #2
    afa6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    afa8:	2000      	movs	r0, #0
		break;
    afaa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    afac:	f06f 0015 	mvn.w	r0, #21
    afb0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    afb2:	2000      	movs	r0, #0
    afb4:	7008      	strb	r0, [r1, #0]
		break;
    afb6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    afb8:	2306      	movs	r3, #6
    afba:	700b      	strb	r3, [r1, #0]
	int err = 0;
    afbc:	2000      	movs	r0, #0
		break;
    afbe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    afc0:	2307      	movs	r3, #7
    afc2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    afc4:	2000      	movs	r0, #0
		break;
    afc6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    afc8:	2305      	movs	r3, #5
    afca:	700b      	strb	r3, [r1, #0]
	int err = 0;
    afcc:	2000      	movs	r0, #0
}
    afce:	4770      	bx	lr

0000afd0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    afd0:	f010 0f10 	tst.w	r0, #16
    afd4:	d104      	bne.n	afe0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    afd6:	f010 0f20 	tst.w	r0, #32
    afda:	d103      	bne.n	afe4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    afdc:	2000      	movs	r0, #0
    afde:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    afe0:	2003      	movs	r0, #3
    afe2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    afe4:	2001      	movs	r0, #1
}
    afe6:	4770      	bx	lr

0000afe8 <gpio_nrfx_port_get_raw>:
	return port->config;
    afe8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    afea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    afec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    aff0:	600b      	str	r3, [r1, #0]
}
    aff2:	2000      	movs	r0, #0
    aff4:	4770      	bx	lr

0000aff6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    aff6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    aff8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    affa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    affe:	4042      	eors	r2, r0
    b000:	400a      	ands	r2, r1
    b002:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b004:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b008:	2000      	movs	r0, #0
    b00a:	4770      	bx	lr

0000b00c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    b00c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b00e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    b010:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    b014:	2000      	movs	r0, #0
    b016:	4770      	bx	lr

0000b018 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    b018:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b01a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    b01c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    b020:	2000      	movs	r0, #0
    b022:	4770      	bx	lr

0000b024 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    b024:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b026:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b028:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b02c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b02e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b032:	2000      	movs	r0, #0
    b034:	4770      	bx	lr

0000b036 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    b036:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    b03a:	d007      	beq.n	b04c <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b03c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    b040:	d00d      	beq.n	b05e <get_trigger+0x28>
    b042:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    b046:	d008      	beq.n	b05a <get_trigger+0x24>
    b048:	2001      	movs	r0, #1
}
    b04a:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    b04c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    b050:	d001      	beq.n	b056 <get_trigger+0x20>
    b052:	2005      	movs	r0, #5
    b054:	4770      	bx	lr
    b056:	2004      	movs	r0, #4
    b058:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b05a:	2002      	movs	r0, #2
    b05c:	4770      	bx	lr
    b05e:	2003      	movs	r0, #3
    b060:	4770      	bx	lr

0000b062 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    b062:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b064:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b066:	f04f 0120 	mov.w	r1, #32
    b06a:	f3ef 8211 	mrs	r2, BASEPRI
    b06e:	f381 8812 	msr	BASEPRI_MAX, r1
    b072:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b076:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b07a:	b131      	cbz	r1, b08a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b07c:	2100      	movs	r1, #0
    b07e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b082:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b086:	2101      	movs	r1, #1
    b088:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b08a:	f382 8811 	msr	BASEPRI, r2
    b08e:	f3bf 8f6f 	isb	sy
}
    b092:	4770      	bx	lr

0000b094 <uarte_nrfx_configure>:
{
    b094:	b570      	push	{r4, r5, r6, lr}
    b096:	b082      	sub	sp, #8
    b098:	4606      	mov	r6, r0
    b09a:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    b09c:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    b09e:	794b      	ldrb	r3, [r1, #5]
    b0a0:	2b01      	cmp	r3, #1
    b0a2:	d006      	beq.n	b0b2 <uarte_nrfx_configure+0x1e>
    b0a4:	2b03      	cmp	r3, #3
    b0a6:	d011      	beq.n	b0cc <uarte_nrfx_configure+0x38>
    b0a8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    b0ac:	4618      	mov	r0, r3
    b0ae:	b002      	add	sp, #8
    b0b0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b0b2:	2300      	movs	r3, #0
    b0b4:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b0b8:	79a3      	ldrb	r3, [r4, #6]
    b0ba:	2b03      	cmp	r3, #3
    b0bc:	d137      	bne.n	b12e <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    b0be:	79e3      	ldrb	r3, [r4, #7]
    b0c0:	b143      	cbz	r3, b0d4 <uarte_nrfx_configure+0x40>
    b0c2:	2b01      	cmp	r3, #1
    b0c4:	d010      	beq.n	b0e8 <uarte_nrfx_configure+0x54>
    b0c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b0ca:	e7ef      	b.n	b0ac <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b0cc:	2310      	movs	r3, #16
    b0ce:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    b0d2:	e7f1      	b.n	b0b8 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b0d4:	2300      	movs	r3, #0
    b0d6:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    b0da:	7923      	ldrb	r3, [r4, #4]
    b0dc:	b143      	cbz	r3, b0f0 <uarte_nrfx_configure+0x5c>
    b0de:	2b02      	cmp	r3, #2
    b0e0:	d021      	beq.n	b126 <uarte_nrfx_configure+0x92>
    b0e2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b0e6:	e7e1      	b.n	b0ac <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b0e8:	2301      	movs	r3, #1
    b0ea:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    b0ee:	e7f4      	b.n	b0da <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b0f0:	2300      	movs	r3, #0
    b0f2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b0f6:	6821      	ldr	r1, [r4, #0]
    b0f8:	4630      	mov	r0, r6
    b0fa:	f7f9 fa89 	bl	4610 <baudrate_set>
    b0fe:	4603      	mov	r3, r0
    b100:	b9c0      	cbnz	r0, b134 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    b102:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    b104:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b106:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    b10a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    b10e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b112:	4331      	orrs	r1, r6
    b114:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b116:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    b11a:	3504      	adds	r5, #4
    b11c:	e894 0003 	ldmia.w	r4, {r0, r1}
    b120:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    b124:	e7c2      	b.n	b0ac <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b126:	230e      	movs	r3, #14
    b128:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    b12c:	e7e3      	b.n	b0f6 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    b12e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b132:	e7bb      	b.n	b0ac <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    b134:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b138:	e7b8      	b.n	b0ac <uarte_nrfx_configure+0x18>

0000b13a <uarte_nrfx_config_get>:
{
    b13a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    b13c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    b13e:	3304      	adds	r3, #4
    b140:	e893 0003 	ldmia.w	r3, {r0, r1}
    b144:	e882 0003 	stmia.w	r2, {r0, r1}
}
    b148:	2000      	movs	r0, #0
    b14a:	4770      	bx	lr

0000b14c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    b14c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b14e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b150:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b154:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b158:	4770      	bx	lr

0000b15a <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    b15a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b15c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b15e:	685b      	ldr	r3, [r3, #4]
    b160:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b164:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b168:	b929      	cbnz	r1, b176 <is_tx_ready+0x1c>
    b16a:	b933      	cbnz	r3, b17a <is_tx_ready+0x20>
    b16c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b170:	b92b      	cbnz	r3, b17e <is_tx_ready+0x24>
    b172:	2000      	movs	r0, #0
    b174:	4770      	bx	lr
    b176:	2001      	movs	r0, #1
    b178:	4770      	bx	lr
    b17a:	2000      	movs	r0, #0
    b17c:	4770      	bx	lr
    b17e:	2001      	movs	r0, #1
}
    b180:	4770      	bx	lr

0000b182 <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    b182:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    b184:	68db      	ldr	r3, [r3, #12]
    b186:	b123      	cbz	r3, b192 <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    b188:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    b18c:	4311      	orrs	r1, r2
    b18e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    b192:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b194:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b196:	2208      	movs	r2, #8
    b198:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b19c:	4770      	bx	lr

0000b19e <tx_start>:
{
    b19e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b1a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1a2:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b1a4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b1a8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1ac:	2200      	movs	r2, #0
    b1ae:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    b1b2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    b1b6:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    b1ba:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b1be:	685b      	ldr	r3, [r3, #4]
    b1c0:	f013 0f10 	tst.w	r3, #16
    b1c4:	d102      	bne.n	b1cc <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1c6:	2301      	movs	r3, #1
    b1c8:	60a3      	str	r3, [r4, #8]
}
    b1ca:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b1cc:	2101      	movs	r1, #1
    b1ce:	f7ff ffd8 	bl	b182 <uarte_enable>
    p_reg->INTENSET = mask;
    b1d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b1d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b1da:	e7f4      	b.n	b1c6 <tx_start+0x28>

0000b1dc <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    b1dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1de:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b1e0:	2200      	movs	r2, #0
    b1e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b1e6:	4770      	bx	lr

0000b1e8 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    b1e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b1ec:	2204      	movs	r2, #4
    b1ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b1f2:	2000      	movs	r0, #0
    b1f4:	4770      	bx	lr

0000b1f6 <start_tx_locked>:
{
    b1f6:	b538      	push	{r3, r4, r5, lr}
    b1f8:	4605      	mov	r5, r0
    b1fa:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    b1fc:	f7ff ffad 	bl	b15a <is_tx_ready>
    b200:	b920      	cbnz	r0, b20c <start_tx_locked+0x16>
		data->async->pending_tx = true;
    b202:	68e3      	ldr	r3, [r4, #12]
    b204:	2201      	movs	r2, #1
    b206:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    b20a:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    b20c:	68e3      	ldr	r3, [r4, #12]
    b20e:	2200      	movs	r2, #0
    b210:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    b214:	68e3      	ldr	r3, [r4, #12]
    b216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b21a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    b21e:	68e3      	ldr	r3, [r4, #12]
    b220:	695a      	ldr	r2, [r3, #20]
    b222:	6919      	ldr	r1, [r3, #16]
    b224:	4628      	mov	r0, r5
    b226:	f7ff ffba 	bl	b19e <tx_start>
}
    b22a:	e7ee      	b.n	b20a <start_tx_locked+0x14>

0000b22c <user_callback>:
{
    b22c:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    b22e:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    b230:	68da      	ldr	r2, [r3, #12]
    b232:	6813      	ldr	r3, [r2, #0]
    b234:	b10b      	cbz	r3, b23a <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    b236:	6852      	ldr	r2, [r2, #4]
    b238:	4798      	blx	r3
}
    b23a:	bd08      	pop	{r3, pc}

0000b23c <notify_uart_rx_rdy>:
{
    b23c:	b500      	push	{lr}
    b23e:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    b240:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    b242:	2300      	movs	r3, #0
    b244:	9301      	str	r3, [sp, #4]
    b246:	9302      	str	r3, [sp, #8]
    b248:	9303      	str	r3, [sp, #12]
    b24a:	9304      	str	r3, [sp, #16]
    b24c:	9305      	str	r3, [sp, #20]
    b24e:	2302      	movs	r3, #2
    b250:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    b254:	68d3      	ldr	r3, [r2, #12]
    b256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    b258:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    b25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    b25c:	9303      	str	r3, [sp, #12]
    b25e:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    b260:	a901      	add	r1, sp, #4
    b262:	f7ff ffe3 	bl	b22c <user_callback>
}
    b266:	b007      	add	sp, #28
    b268:	f85d fb04 	ldr.w	pc, [sp], #4

0000b26c <rx_buf_release>:
	if (*buf) {
    b26c:	680b      	ldr	r3, [r1, #0]
    b26e:	b19b      	cbz	r3, b298 <rx_buf_release+0x2c>
{
    b270:	b530      	push	{r4, r5, lr}
    b272:	b087      	sub	sp, #28
    b274:	460c      	mov	r4, r1
		struct uart_event evt = {
    b276:	2500      	movs	r5, #0
    b278:	9501      	str	r5, [sp, #4]
    b27a:	9502      	str	r5, [sp, #8]
    b27c:	9503      	str	r5, [sp, #12]
    b27e:	9504      	str	r5, [sp, #16]
    b280:	9505      	str	r5, [sp, #20]
    b282:	2304      	movs	r3, #4
    b284:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    b288:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    b28a:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    b28c:	a901      	add	r1, sp, #4
    b28e:	f7ff ffcd 	bl	b22c <user_callback>
		*buf = NULL;
    b292:	6025      	str	r5, [r4, #0]
}
    b294:	b007      	add	sp, #28
    b296:	bd30      	pop	{r4, r5, pc}
    b298:	4770      	bx	lr

0000b29a <notify_rx_disable>:
{
    b29a:	b500      	push	{lr}
    b29c:	b087      	sub	sp, #28
	struct uart_event evt = {
    b29e:	2300      	movs	r3, #0
    b2a0:	9301      	str	r3, [sp, #4]
    b2a2:	9302      	str	r3, [sp, #8]
    b2a4:	9303      	str	r3, [sp, #12]
    b2a6:	9304      	str	r3, [sp, #16]
    b2a8:	9305      	str	r3, [sp, #20]
    b2aa:	2305      	movs	r3, #5
    b2ac:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    b2b0:	a901      	add	r1, sp, #4
    b2b2:	f7ff ffbb 	bl	b22c <user_callback>
}
    b2b6:	b007      	add	sp, #28
    b2b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2bc <uarte_nrfx_rx_buf_rsp>:
{
    b2bc:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    b2be:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b2c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b2c2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b2c4:	f04f 0020 	mov.w	r0, #32
    b2c8:	f3ef 8c11 	mrs	ip, BASEPRI
    b2cc:	f380 8812 	msr	BASEPRI_MAX, r0
    b2d0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    b2d4:	68e0      	ldr	r0, [r4, #12]
    b2d6:	6e05      	ldr	r5, [r0, #96]	; 0x60
    b2d8:	b1ad      	cbz	r5, b306 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    b2da:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    b2dc:	b9b5      	cbnz	r5, b30c <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    b2de:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    b2e0:	68e0      	ldr	r0, [r4, #12]
    b2e2:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b2e4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b2e8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    b2ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b2f0:	f042 0220 	orr.w	r2, r2, #32
    b2f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    b2f8:	2000      	movs	r0, #0
	__asm__ volatile(
    b2fa:	f38c 8811 	msr	BASEPRI, ip
    b2fe:	f3bf 8f6f 	isb	sy
}
    b302:	bc30      	pop	{r4, r5}
    b304:	4770      	bx	lr
		err = -EACCES;
    b306:	f06f 000c 	mvn.w	r0, #12
    b30a:	e7f6      	b.n	b2fa <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    b30c:	f06f 000f 	mvn.w	r0, #15
    b310:	e7f3      	b.n	b2fa <uarte_nrfx_rx_buf_rsp+0x3e>

0000b312 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    b312:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    b314:	68d8      	ldr	r0, [r3, #12]
    b316:	b120      	cbz	r0, b322 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    b318:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    b31a:	68db      	ldr	r3, [r3, #12]
    b31c:	605a      	str	r2, [r3, #4]
	return 0;
    b31e:	2000      	movs	r0, #0
    b320:	4770      	bx	lr
		return -ENOTSUP;
    b322:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b326:	4770      	bx	lr

0000b328 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    b328:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b32a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b32c:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    b32e:	68d0      	ldr	r0, [r2, #12]
    b330:	b960      	cbnz	r0, b34c <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b332:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b336:	b160      	cbz	r0, b352 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    b338:	7d52      	ldrb	r2, [r2, #21]
    b33a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b33c:	2000      	movs	r0, #0
    b33e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b342:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b346:	2201      	movs	r2, #1
    b348:	601a      	str	r2, [r3, #0]
	return 0;
    b34a:	4770      	bx	lr
		return -ENOTSUP;
    b34c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b350:	4770      	bx	lr
		return -1;
    b352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b356:	4770      	bx	lr

0000b358 <wait_tx_ready>:
{
    b358:	b570      	push	{r4, r5, r6, lr}
    b35a:	4606      	mov	r6, r0
    b35c:	e014      	b.n	b388 <wait_tx_ready+0x30>
		if (res) {
    b35e:	b17d      	cbz	r5, b380 <wait_tx_ready+0x28>
	__asm__ volatile(
    b360:	f04f 0320 	mov.w	r3, #32
    b364:	f3ef 8411 	mrs	r4, BASEPRI
    b368:	f383 8812 	msr	BASEPRI_MAX, r3
    b36c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b370:	4630      	mov	r0, r6
    b372:	f7ff fef2 	bl	b15a <is_tx_ready>
    b376:	b9a0      	cbnz	r0, b3a2 <wait_tx_ready+0x4a>
	__asm__ volatile(
    b378:	f384 8811 	msr	BASEPRI, r4
    b37c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b380:	2021      	movs	r0, #33	; 0x21
    b382:	2100      	movs	r1, #0
    b384:	f7fe f8b0 	bl	94e8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b388:	2464      	movs	r4, #100	; 0x64
    b38a:	4630      	mov	r0, r6
    b38c:	f7ff fee5 	bl	b15a <is_tx_ready>
    b390:	4605      	mov	r5, r0
    b392:	2800      	cmp	r0, #0
    b394:	d1e3      	bne.n	b35e <wait_tx_ready+0x6>
    b396:	2001      	movs	r0, #1
    b398:	f000 fc7e 	bl	bc98 <nrfx_busy_wait>
    b39c:	3c01      	subs	r4, #1
    b39e:	d1f4      	bne.n	b38a <wait_tx_ready+0x32>
    b3a0:	e7dd      	b.n	b35e <wait_tx_ready+0x6>
}
    b3a2:	4620      	mov	r0, r4
    b3a4:	bd70      	pop	{r4, r5, r6, pc}

0000b3a6 <uarte_nrfx_rx_disable>:
{
    b3a6:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b3a8:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b3aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3ac:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    b3ae:	68eb      	ldr	r3, [r5, #12]
    b3b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b3b2:	b1ba      	cbz	r2, b3e4 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    b3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b3b6:	b153      	cbz	r3, b3ce <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    b3b8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    b3bc:	f023 0320 	bic.w	r3, r3, #32
    b3c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3c4:	2300      	movs	r3, #0
    b3c6:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b3ca:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    b3ce:	68e8      	ldr	r0, [r5, #12]
    b3d0:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b3d2:	f000 fd92 	bl	befa <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    b3d6:	68eb      	ldr	r3, [r5, #12]
    b3d8:	2000      	movs	r0, #0
    b3da:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3de:	2301      	movs	r3, #1
    b3e0:	6063      	str	r3, [r4, #4]
}
    b3e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b3e4:	f06f 000d 	mvn.w	r0, #13
    b3e8:	e7fb      	b.n	b3e2 <uarte_nrfx_rx_disable+0x3c>

0000b3ea <error_isr>:
{
    b3ea:	b510      	push	{r4, lr}
    b3ec:	b086      	sub	sp, #24
    b3ee:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b3f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b3f2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b3f4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b3f8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    b3fc:	2300      	movs	r3, #0
    b3fe:	9301      	str	r3, [sp, #4]
    b400:	9302      	str	r3, [sp, #8]
    b402:	9303      	str	r3, [sp, #12]
    b404:	9304      	str	r3, [sp, #16]
    b406:	9305      	str	r3, [sp, #20]
    b408:	2306      	movs	r3, #6
    b40a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b40e:	f012 0f01 	tst.w	r2, #1
    b412:	d108      	bne.n	b426 <error_isr+0x3c>
    b414:	f012 0f02 	tst.w	r2, #2
    b418:	d111      	bne.n	b43e <error_isr+0x54>
    b41a:	f012 0f04 	tst.w	r2, #4
    b41e:	d110      	bne.n	b442 <error_isr+0x58>
    b420:	f002 0208 	and.w	r2, r2, #8
    b424:	e000      	b.n	b428 <error_isr+0x3e>
    b426:	2201      	movs	r2, #1
	struct uart_event evt = {
    b428:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    b42c:	a901      	add	r1, sp, #4
    b42e:	4620      	mov	r0, r4
    b430:	f7ff fefc 	bl	b22c <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    b434:	4620      	mov	r0, r4
    b436:	f7ff ffb6 	bl	b3a6 <uarte_nrfx_rx_disable>
}
    b43a:	b006      	add	sp, #24
    b43c:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b43e:	2202      	movs	r2, #2
    b440:	e7f2      	b.n	b428 <error_isr+0x3e>
    b442:	2204      	movs	r2, #4
    b444:	e7f0      	b.n	b428 <error_isr+0x3e>

0000b446 <uarte_nrfx_tx_abort>:
{
    b446:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b448:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b44a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    b44c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    b44e:	68da      	ldr	r2, [r3, #12]
    b450:	6891      	ldr	r1, [r2, #8]
    b452:	b151      	cbz	r1, b46a <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    b454:	2400      	movs	r4, #0
    b456:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    b45a:	68d8      	ldr	r0, [r3, #12]
    b45c:	3028      	adds	r0, #40	; 0x28
    b45e:	f000 fd4c 	bl	befa <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b462:	2301      	movs	r3, #1
    b464:	60eb      	str	r3, [r5, #12]
	return 0;
    b466:	4620      	mov	r0, r4
}
    b468:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b46a:	f06f 000d 	mvn.w	r0, #13
    b46e:	e7fb      	b.n	b468 <uarte_nrfx_tx_abort+0x22>

0000b470 <tx_timeout>:
{
    b470:	b508      	push	{r3, lr}
	return timer->user_data;
    b472:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    b474:	6818      	ldr	r0, [r3, #0]
    b476:	f7ff ffe6 	bl	b446 <uarte_nrfx_tx_abort>
}
    b47a:	bd08      	pop	{r3, pc}

0000b47c <rx_timeout>:
{
    b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b47e:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    b480:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    b482:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    b484:	68e3      	ldr	r3, [r4, #12]
    b486:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    b48a:	2b00      	cmp	r3, #0
    b48c:	d138      	bne.n	b500 <rx_timeout+0x84>
    b48e:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    b492:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    b494:	2210      	movs	r2, #16
    b496:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    b49a:	68e3      	ldr	r3, [r4, #12]
    b49c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    b4a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
    b4a2:	4291      	cmp	r1, r2
    b4a4:	d004      	beq.n	b4b0 <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    b4a6:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    b4a8:	68e3      	ldr	r3, [r4, #12]
    b4aa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    b4ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    b4b0:	68e3      	ldr	r3, [r4, #12]
    b4b2:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    b4b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    b4b6:	1aad      	subs	r5, r5, r2
    b4b8:	d423      	bmi.n	b502 <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b4ba:	68e3      	ldr	r3, [r4, #12]
    b4bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    b4be:	18a8      	adds	r0, r5, r2
    b4c0:	6e59      	ldr	r1, [r3, #100]	; 0x64
    b4c2:	4288      	cmp	r0, r1
    b4c4:	d901      	bls.n	b4ca <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    b4c6:	1a8d      	subs	r5, r1, r2
		clipped = true;
    b4c8:	2701      	movs	r7, #1
	if (len > 0) {
    b4ca:	2d00      	cmp	r5, #0
    b4cc:	dd13      	ble.n	b4f6 <rx_timeout+0x7a>
		if (clipped ||
    b4ce:	b92f      	cbnz	r7, b4dc <rx_timeout+0x60>
			(data->async->rx_timeout_left
    b4d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    b4d4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    b4d8:	428a      	cmp	r2, r1
    b4da:	da16      	bge.n	b50a <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    b4dc:	4629      	mov	r1, r5
    b4de:	4630      	mov	r0, r6
    b4e0:	f7ff feac 	bl	b23c <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    b4e4:	68e2      	ldr	r2, [r4, #12]
    b4e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
    b4e8:	442b      	add	r3, r5
    b4ea:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    b4ec:	68e2      	ldr	r2, [r4, #12]
    b4ee:	6f93      	ldr	r3, [r2, #120]	; 0x78
    b4f0:	442b      	add	r3, r5
    b4f2:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    b4f4:	b96f      	cbnz	r7, b512 <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    b4f6:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    b4f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b4fa:	2210      	movs	r2, #16
    b4fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    b502:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    b506:	2500      	movs	r5, #0
    b508:	e7d7      	b.n	b4ba <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    b50a:	1a52      	subs	r2, r2, r1
    b50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    b510:	e7f0      	b.n	b4f4 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    b512:	68e0      	ldr	r0, [r4, #12]
    b514:	3088      	adds	r0, #136	; 0x88
    b516:	f000 fcf0 	bl	befa <z_impl_k_timer_stop>
}
    b51a:	e7ec      	b.n	b4f6 <rx_timeout+0x7a>

0000b51c <endrx_isr>:
{
    b51c:	b570      	push	{r4, r5, r6, lr}
    b51e:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    b520:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b522:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b524:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    b526:	68e3      	ldr	r3, [r4, #12]
    b528:	2201      	movs	r2, #1
    b52a:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    b52e:	68e0      	ldr	r0, [r4, #12]
    b530:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b532:	f000 fce2 	bl	befa <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    b536:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    b53a:	68e3      	ldr	r3, [r4, #12]
    b53c:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    b540:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    b542:	2200      	movs	r2, #0
    b544:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    b548:	68e3      	ldr	r3, [r4, #12]
    b54a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    b54c:	1a89      	subs	r1, r1, r2
    b54e:	d40b      	bmi.n	b568 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    b550:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    b552:	440a      	add	r2, r1
    b554:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    b556:	2900      	cmp	r1, #0
    b558:	dc08      	bgt.n	b56c <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    b55a:	68e1      	ldr	r1, [r4, #12]
    b55c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    b560:	b943      	cbnz	r3, b574 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    b562:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    b566:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    b568:	2100      	movs	r1, #0
    b56a:	e7f1      	b.n	b550 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    b56c:	4628      	mov	r0, r5
    b56e:	f7ff fe65 	bl	b23c <notify_uart_rx_rdy>
    b572:	e7f2      	b.n	b55a <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    b574:	3160      	adds	r1, #96	; 0x60
    b576:	4628      	mov	r0, r5
    b578:	f7ff fe78 	bl	b26c <rx_buf_release>
	__asm__ volatile(
    b57c:	f04f 0320 	mov.w	r3, #32
    b580:	f3ef 8111 	mrs	r1, BASEPRI
    b584:	f383 8812 	msr	BASEPRI_MAX, r3
    b588:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    b58c:	68e3      	ldr	r3, [r4, #12]
    b58e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b590:	b1f2      	cbz	r2, b5d0 <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    b592:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    b594:	68e3      	ldr	r3, [r4, #12]
    b596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b598:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    b59a:	68e2      	ldr	r2, [r4, #12]
    b59c:	2300      	movs	r3, #0
    b59e:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    b5a0:	68e2      	ldr	r2, [r4, #12]
    b5a2:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    b5a4:	68e2      	ldr	r2, [r4, #12]
    b5a6:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b5a8:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    b5ac:	b90b      	cbnz	r3, b5b2 <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5ae:	2301      	movs	r3, #1
    b5b0:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    b5b2:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    b5b6:	f023 0320 	bic.w	r3, r3, #32
    b5ba:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    b5be:	f381 8811 	msr	BASEPRI, r1
    b5c2:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    b5c6:	68e3      	ldr	r3, [r4, #12]
    b5c8:	2200      	movs	r2, #0
    b5ca:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    b5ce:	e7ca      	b.n	b566 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5d0:	2301      	movs	r3, #1
    b5d2:	6073      	str	r3, [r6, #4]
}
    b5d4:	e7f3      	b.n	b5be <endrx_isr+0xa2>

0000b5d6 <setup_tx_cache>:
{
    b5d6:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    b5d8:	68c3      	ldr	r3, [r0, #12]
    b5da:	68da      	ldr	r2, [r3, #12]
    b5dc:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    b5de:	1a52      	subs	r2, r2, r1
    b5e0:	d010      	beq.n	b604 <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    b5e2:	2a08      	cmp	r2, #8
    b5e4:	bf28      	it	cs
    b5e6:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    b5e8:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    b5ea:	68c3      	ldr	r3, [r0, #12]
    b5ec:	f103 0118 	add.w	r1, r3, #24
    b5f0:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    b5f2:	68c0      	ldr	r0, [r0, #12]
    b5f4:	6881      	ldr	r1, [r0, #8]
    b5f6:	6a03      	ldr	r3, [r0, #32]
    b5f8:	4419      	add	r1, r3
    b5fa:	3018      	adds	r0, #24
    b5fc:	f000 fca0 	bl	bf40 <memcpy>
	return true;
    b600:	2001      	movs	r0, #1
}
    b602:	bd08      	pop	{r3, pc}
		return false;
    b604:	2000      	movs	r0, #0
    b606:	e7fc      	b.n	b602 <setup_tx_cache+0x2c>

0000b608 <z_log_msg2_runtime_create>:
{
    b608:	b510      	push	{r4, lr}
    b60a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b60c:	ac0b      	add	r4, sp, #44	; 0x2c
    b60e:	9405      	str	r4, [sp, #20]
    b610:	9403      	str	r4, [sp, #12]
    b612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b614:	9402      	str	r4, [sp, #8]
    b616:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b618:	9401      	str	r4, [sp, #4]
    b61a:	9c08      	ldr	r4, [sp, #32]
    b61c:	9400      	str	r4, [sp, #0]
    b61e:	f7f6 ff7f 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    b622:	b006      	add	sp, #24
    b624:	bd10      	pop	{r4, pc}

0000b626 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b62a:	b083      	sub	sp, #12
    b62c:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b62e:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    b630:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    b632:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b636:	2100      	movs	r1, #0
    b638:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b63c:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b640:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b644:	aa01      	add	r2, sp, #4
    b646:	4648      	mov	r0, r9
    b648:	f000 fa72 	bl	bb30 <pinctrl_lookup_state>
	if (ret < 0) {
    b64c:	1e04      	subs	r4, r0, #0
    b64e:	db07      	blt.n	b660 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b650:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b652:	f8d9 2000 	ldr.w	r2, [r9]
    b656:	7919      	ldrb	r1, [r3, #4]
    b658:	6818      	ldr	r0, [r3, #0]
    b65a:	f7f9 fd33 	bl	50c4 <pinctrl_configure_pins>
    b65e:	4604      	mov	r4, r0
	if (err < 0) {
    b660:	2c00      	cmp	r4, #0
    b662:	db2c      	blt.n	b6be <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    b664:	f108 0104 	add.w	r1, r8, #4
    b668:	4628      	mov	r0, r5
    b66a:	f7ff fd13 	bl	b094 <uarte_nrfx_configure>
	if (err) {
    b66e:	4604      	mov	r4, r0
    b670:	bb28      	cbnz	r0, b6be <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b672:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b674:	f013 0f02 	tst.w	r3, #2
    b678:	d125      	bne.n	b6c6 <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    b67a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b67e:	b353      	cbz	r3, b6d6 <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    b680:	4628      	mov	r0, r5
    b682:	f7f9 fa2d 	bl	4ae0 <uarte_nrfx_init>
		if (err < 0) {
    b686:	2800      	cmp	r0, #0
    b688:	db38      	blt.n	b6fc <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	f013 0f02 	tst.w	r3, #2
    b690:	d103      	bne.n	b69a <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    b692:	f44f 7380 	mov.w	r3, #256	; 0x100
    b696:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b69a:	687b      	ldr	r3, [r7, #4]
    b69c:	f013 0f10 	tst.w	r3, #16
    b6a0:	d003      	beq.n	b6aa <uarte_instance_init+0x84>
    b6a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b6a6:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b6aa:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b6ae:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b6b2:	2300      	movs	r3, #0
    b6b4:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6b8:	2301      	movs	r3, #1
    b6ba:	60b3      	str	r3, [r6, #8]
    b6bc:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b6be:	4620      	mov	r0, r4
    b6c0:	b003      	add	sp, #12
    b6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b6c6:	4641      	mov	r1, r8
    b6c8:	4630      	mov	r0, r6
    b6ca:	f7f9 f9d5 	bl	4a78 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b6ce:	2800      	cmp	r0, #0
    b6d0:	dad3      	bge.n	b67a <uarte_instance_init+0x54>
			return err;
    b6d2:	4604      	mov	r4, r0
    b6d4:	e7f3      	b.n	b6be <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b6d6:	2308      	movs	r3, #8
    b6d8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    b6dc:	7a3b      	ldrb	r3, [r7, #8]
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d1d3      	bne.n	b68a <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6e2:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    b6e6:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b6ea:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b6ee:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b6f2:	2301      	movs	r3, #1
    b6f4:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6f8:	6033      	str	r3, [r6, #0]
}
    b6fa:	e7c6      	b.n	b68a <uarte_instance_init+0x64>
			return err;
    b6fc:	4604      	mov	r4, r0
    b6fe:	e7de      	b.n	b6be <uarte_instance_init+0x98>

0000b700 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b700:	b510      	push	{r4, lr}
    b702:	4604      	mov	r4, r0
    b704:	2200      	movs	r2, #0
    b706:	2101      	movs	r1, #1
    b708:	2002      	movs	r0, #2
    b70a:	f7f7 fb97 	bl	2e3c <z_arm_irq_priority_set>
    b70e:	2002      	movs	r0, #2
    b710:	f7f7 fb78 	bl	2e04 <arch_irq_enable>
    b714:	2100      	movs	r1, #0
    b716:	4620      	mov	r0, r4
    b718:	f7ff ff85 	bl	b626 <uarte_instance_init>
    b71c:	bd10      	pop	{r4, pc}

0000b71e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b71e:	b510      	push	{r4, lr}
    b720:	4604      	mov	r4, r0
    b722:	2200      	movs	r2, #0
    b724:	2101      	movs	r1, #1
    b726:	2028      	movs	r0, #40	; 0x28
    b728:	f7f7 fb88 	bl	2e3c <z_arm_irq_priority_set>
    b72c:	2028      	movs	r0, #40	; 0x28
    b72e:	f7f7 fb69 	bl	2e04 <arch_irq_enable>
    b732:	2100      	movs	r1, #0
    b734:	4620      	mov	r0, r4
    b736:	f7ff ff76 	bl	b626 <uarte_instance_init>
    b73a:	bd10      	pop	{r4, pc}

0000b73c <rx_flush>:
{
    b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b73e:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    b740:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b742:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    b744:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b748:	460d      	mov	r5, r1
    b74a:	b311      	cbz	r1, b792 <rx_flush+0x56>
    b74c:	4616      	mov	r6, r2
	if (buf) {
    b74e:	b315      	cbz	r5, b796 <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    b750:	2100      	movs	r1, #0
    b752:	4628      	mov	r0, r5
    b754:	f000 fc02 	bl	bf5c <memset>
		flush_buf = buf;
    b758:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b75a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b75e:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b762:	2300      	movs	r3, #0
    b764:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b768:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b76c:	2301      	movs	r3, #1
    b76e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b770:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b774:	2b00      	cmp	r3, #0
    b776:	d0fb      	beq.n	b770 <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b778:	2300      	movs	r3, #0
    b77a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b77e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    b782:	b155      	cbz	r5, b79a <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    b784:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    b788:	4287      	cmp	r7, r0
    b78a:	d00c      	beq.n	b7a6 <rx_flush+0x6a>
		return rx_amount;
    b78c:	b2c0      	uxtb	r0, r0
}
    b78e:	b003      	add	sp, #12
    b790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b792:	2605      	movs	r6, #5
    b794:	e7db      	b.n	b74e <rx_flush+0x12>
		flush_buf = tmp_buf;
    b796:	466b      	mov	r3, sp
    b798:	e7df      	b.n	b75a <rx_flush+0x1e>
    b79a:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    b79e:	b2c0      	uxtb	r0, r0
    b7a0:	e7f5      	b.n	b78e <rx_flush+0x52>
			return rx_amount;
    b7a2:	b2c0      	uxtb	r0, r0
    b7a4:	e7f3      	b.n	b78e <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    b7a6:	2300      	movs	r3, #0
    b7a8:	42b3      	cmp	r3, r6
    b7aa:	d204      	bcs.n	b7b6 <rx_flush+0x7a>
		if (buf[i] != dirty) {
    b7ac:	5cea      	ldrb	r2, [r5, r3]
    b7ae:	2a00      	cmp	r2, #0
    b7b0:	d1f7      	bne.n	b7a2 <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    b7b2:	3301      	adds	r3, #1
    b7b4:	e7f8      	b.n	b7a8 <rx_flush+0x6c>
	return 0;
    b7b6:	2000      	movs	r0, #0
    b7b8:	e7e9      	b.n	b78e <rx_flush+0x52>

0000b7ba <async_uart_release>:
{
    b7ba:	b570      	push	{r4, r5, r6, lr}
    b7bc:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    b7be:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    b7c0:	f04f 0320 	mov.w	r3, #32
    b7c4:	f3ef 8611 	mrs	r6, BASEPRI
    b7c8:	f383 8812 	msr	BASEPRI_MAX, r3
    b7cc:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    b7d0:	68d0      	ldr	r0, [r2, #12]
    b7d2:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    b7d6:	ea23 0301 	bic.w	r3, r3, r1
    b7da:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    b7de:	68d5      	ldr	r5, [r2, #12]
    b7e0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    b7e4:	b923      	cbnz	r3, b7f0 <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    b7e6:	2902      	cmp	r1, #2
    b7e8:	d007      	beq.n	b7fa <async_uart_release+0x40>
		uart_disable(dev);
    b7ea:	4620      	mov	r0, r4
    b7ec:	f7ff fcf6 	bl	b1dc <uart_disable>
	__asm__ volatile(
    b7f0:	f386 8811 	msr	BASEPRI, r6
    b7f4:	f3bf 8f6f 	isb	sy
}
    b7f8:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    b7fa:	2205      	movs	r2, #5
    b7fc:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    b800:	4620      	mov	r0, r4
    b802:	f7ff ff9b 	bl	b73c <rx_flush>
			data->async->rx_flush_cnt =
    b806:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    b80a:	e7ee      	b.n	b7ea <async_uart_release+0x30>

0000b80c <txstopped_isr>:
{
    b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b80e:	b087      	sub	sp, #28
    b810:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b812:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b814:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    b816:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b818:	685b      	ldr	r3, [r3, #4]
    b81a:	f013 0f10 	tst.w	r3, #16
    b81e:	d147      	bne.n	b8b0 <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    b820:	68e3      	ldr	r3, [r4, #12]
    b822:	689b      	ldr	r3, [r3, #8]
    b824:	2b00      	cmp	r3, #0
    b826:	d041      	beq.n	b8ac <txstopped_isr+0xa0>
	__asm__ volatile(
    b828:	f04f 0320 	mov.w	r3, #32
    b82c:	f3ef 8211 	mrs	r2, BASEPRI
    b830:	f383 8812 	msr	BASEPRI_MAX, r3
    b834:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    b838:	68e3      	ldr	r3, [r4, #12]
    b83a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    b83e:	2900      	cmp	r1, #0
    b840:	db42      	blt.n	b8c8 <txstopped_isr+0xbc>
    b842:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    b846:	f382 8811 	msr	BASEPRI, r2
    b84a:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    b84e:	68e3      	ldr	r3, [r4, #12]
    b850:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    b854:	2a00      	cmp	r2, #0
    b856:	d13a      	bne.n	b8ce <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    b858:	6899      	ldr	r1, [r3, #8]
    b85a:	691a      	ldr	r2, [r3, #16]
    b85c:	4291      	cmp	r1, r2
    b85e:	d004      	beq.n	b86a <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    b860:	695a      	ldr	r2, [r3, #20]
    b862:	42b2      	cmp	r2, r6
    b864:	d044      	beq.n	b8f0 <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    b866:	6a1b      	ldr	r3, [r3, #32]
    b868:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    b86a:	68e0      	ldr	r0, [r4, #12]
    b86c:	3028      	adds	r0, #40	; 0x28
    b86e:	f000 fb44 	bl	befa <z_impl_k_timer_stop>
	struct uart_event evt = {
    b872:	2300      	movs	r3, #0
    b874:	9301      	str	r3, [sp, #4]
    b876:	9302      	str	r3, [sp, #8]
    b878:	9303      	str	r3, [sp, #12]
    b87a:	9304      	str	r3, [sp, #16]
    b87c:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    b87e:	68e3      	ldr	r3, [r4, #12]
    b880:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    b882:	9202      	str	r2, [sp, #8]
    b884:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    b886:	68db      	ldr	r3, [r3, #12]
    b888:	42b3      	cmp	r3, r6
    b88a:	d002      	beq.n	b892 <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
    b88c:	2301      	movs	r3, #1
    b88e:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    b892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b896:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    b89a:	68e2      	ldr	r2, [r4, #12]
    b89c:	2300      	movs	r3, #0
    b89e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    b8a0:	68e2      	ldr	r2, [r4, #12]
    b8a2:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    b8a4:	a901      	add	r1, sp, #4
    b8a6:	4628      	mov	r0, r5
    b8a8:	f7ff fcc0 	bl	b22c <user_callback>
}
    b8ac:	b007      	add	sp, #28
    b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b8b4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    b8b8:	2101      	movs	r1, #1
    b8ba:	f7ff ff7e 	bl	b7ba <async_uart_release>
		if (!data->async->tx_size) {
    b8be:	68e3      	ldr	r3, [r4, #12]
    b8c0:	68db      	ldr	r3, [r3, #12]
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d1ac      	bne.n	b820 <txstopped_isr+0x14>
    b8c6:	e7f1      	b.n	b8ac <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    b8c8:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    b8cc:	e7bb      	b.n	b846 <txstopped_isr+0x3a>
	__asm__ volatile(
    b8ce:	f04f 0320 	mov.w	r3, #32
    b8d2:	f3ef 8611 	mrs	r6, BASEPRI
    b8d6:	f383 8812 	msr	BASEPRI_MAX, r3
    b8da:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    b8de:	4621      	mov	r1, r4
    b8e0:	4628      	mov	r0, r5
    b8e2:	f7ff fc88 	bl	b1f6 <start_tx_locked>
	__asm__ volatile(
    b8e6:	f386 8811 	msr	BASEPRI, r6
    b8ea:	f3bf 8f6f 	isb	sy
		return;
    b8ee:	e7dd      	b.n	b8ac <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    b8f0:	6a1a      	ldr	r2, [r3, #32]
    b8f2:	4432      	add	r2, r6
    b8f4:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
    b8f6:	4620      	mov	r0, r4
    b8f8:	f7ff fe6d 	bl	b5d6 <setup_tx_cache>
    b8fc:	b910      	cbnz	r0, b904 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    b8fe:	68e3      	ldr	r3, [r4, #12]
    b900:	6a1e      	ldr	r6, [r3, #32]
    b902:	e7b2      	b.n	b86a <txstopped_isr+0x5e>
	__asm__ volatile(
    b904:	f04f 0320 	mov.w	r3, #32
    b908:	f3ef 8611 	mrs	r6, BASEPRI
    b90c:	f383 8812 	msr	BASEPRI_MAX, r3
    b910:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    b914:	4621      	mov	r1, r4
    b916:	4628      	mov	r0, r5
    b918:	f7ff fc6d 	bl	b1f6 <start_tx_locked>
	__asm__ volatile(
    b91c:	f386 8811 	msr	BASEPRI, r6
    b920:	f3bf 8f6f 	isb	sy
				return;
    b924:	e7c2      	b.n	b8ac <txstopped_isr+0xa0>

0000b926 <rxto_isr>:
{
    b926:	b570      	push	{r4, r5, r6, lr}
    b928:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b92a:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b92c:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    b92e:	68e9      	ldr	r1, [r5, #12]
    b930:	3160      	adds	r1, #96	; 0x60
    b932:	f7ff fc9b 	bl	b26c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    b936:	68e9      	ldr	r1, [r5, #12]
    b938:	316c      	adds	r1, #108	; 0x6c
    b93a:	4620      	mov	r0, r4
    b93c:	f7ff fc96 	bl	b26c <rx_buf_release>
	if (data->async->rx_enabled) {
    b940:	68eb      	ldr	r3, [r5, #12]
    b942:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    b946:	b152      	cbz	r2, b95e <rxto_isr+0x38>
		data->async->rx_enabled = false;
    b948:	2200      	movs	r2, #0
    b94a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b94e:	6873      	ldr	r3, [r6, #4]
    b950:	f013 0f10 	tst.w	r3, #16
    b954:	d109      	bne.n	b96a <rxto_isr+0x44>
	notify_rx_disable(dev);
    b956:	4620      	mov	r0, r4
    b958:	f7ff fc9f 	bl	b29a <notify_rx_disable>
}
    b95c:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
    b95e:	2200      	movs	r2, #0
    b960:	4611      	mov	r1, r2
    b962:	4620      	mov	r0, r4
    b964:	f7ff feea 	bl	b73c <rx_flush>
    b968:	e7f1      	b.n	b94e <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    b96a:	2102      	movs	r1, #2
    b96c:	4620      	mov	r0, r4
    b96e:	f7ff ff24 	bl	b7ba <async_uart_release>
    b972:	e7f0      	b.n	b956 <rxto_isr+0x30>

0000b974 <uarte_nrfx_isr_async>:
{
    b974:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b976:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b978:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    b97a:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b97c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
    b980:	bb5b      	cbnz	r3, b9da <uarte_nrfx_isr_async+0x66>
    b982:	4605      	mov	r5, r0
    b984:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b988:	bb9b      	cbnz	r3, b9f2 <uarte_nrfx_isr_async+0x7e>
    b98a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    b98e:	b123      	cbz	r3, b99a <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
    b990:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    b994:	f013 0f10 	tst.w	r3, #16
    b998:	d133      	bne.n	ba02 <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b99a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    b99e:	b113      	cbz	r3, b9a6 <uarte_nrfx_isr_async+0x32>
    b9a0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b9a4:	b3b3      	cbz	r3, ba14 <uarte_nrfx_isr_async+0xa0>
    b9a6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    b9aa:	b113      	cbz	r3, b9b2 <uarte_nrfx_isr_async+0x3e>
    b9ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b9b0:	b3c3      	cbz	r3, ba24 <uarte_nrfx_isr_async+0xb0>
    b9b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    b9b6:	b123      	cbz	r3, b9c2 <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
    b9b8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    b9bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    b9c0:	d138      	bne.n	ba34 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b9c2:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    b9c6:	b19b      	cbz	r3, b9f0 <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
    b9c8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    b9cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    b9d0:	d00e      	beq.n	b9f0 <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
    b9d2:	4628      	mov	r0, r5
    b9d4:	f7ff ff1a 	bl	b80c <txstopped_isr>
    b9d8:	e00a      	b.n	b9f0 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b9da:	2300      	movs	r3, #0
    b9dc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    b9e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    b9e4:	68d2      	ldr	r2, [r2, #12]
    b9e6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    b9ea:	3301      	adds	r3, #1
    b9ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    b9f0:	bd38      	pop	{r3, r4, r5, pc}
    b9f2:	2300      	movs	r3, #0
    b9f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b9f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
    b9fc:	f7ff fcf5 	bl	b3ea <error_isr>
    ba00:	e7c3      	b.n	b98a <uarte_nrfx_isr_async+0x16>
    ba02:	2300      	movs	r3, #0
    ba04:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ba08:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
    ba0c:	4628      	mov	r0, r5
    ba0e:	f7ff fd85 	bl	b51c <endrx_isr>
    ba12:	e7c2      	b.n	b99a <uarte_nrfx_isr_async+0x26>
    ba14:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    ba18:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
    ba1c:	4628      	mov	r0, r5
    ba1e:	f7f8 fff1 	bl	4a04 <rxstarted_isr>
    ba22:	e7c0      	b.n	b9a6 <uarte_nrfx_isr_async+0x32>
    ba24:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    ba28:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
    ba2c:	4628      	mov	r0, r5
    ba2e:	f7ff ff7a 	bl	b926 <rxto_isr>
    ba32:	e7be      	b.n	b9b2 <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
    ba34:	4628      	mov	r0, r5
    ba36:	f7ff fb14 	bl	b062 <endtx_isr>
    ba3a:	e7c2      	b.n	b9c2 <uarte_nrfx_isr_async+0x4e>

0000ba3c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ba3c:	4770      	bx	lr

0000ba3e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ba3e:	1a40      	subs	r0, r0, r1
}
    ba40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba44:	4770      	bx	lr

0000ba46 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ba46:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ba4a:	009b      	lsls	r3, r3, #2
    ba4c:	b29b      	uxth	r3, r3
    ba4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ba52:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    ba56:	2200      	movs	r2, #0
    ba58:	601a      	str	r2, [r3, #0]
    ba5a:	681b      	ldr	r3, [r3, #0]
}
    ba5c:	4770      	bx	lr

0000ba5e <absolute_time_to_cc>:
}
    ba5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba62:	4770      	bx	lr

0000ba64 <full_int_lock>:
	__asm__ volatile(
    ba64:	f04f 0320 	mov.w	r3, #32
    ba68:	f3ef 8011 	mrs	r0, BASEPRI
    ba6c:	f383 8812 	msr	BASEPRI_MAX, r3
    ba70:	f3bf 8f6f 	isb	sy
}
    ba74:	4770      	bx	lr

0000ba76 <full_int_unlock>:
	__asm__ volatile(
    ba76:	f380 8811 	msr	BASEPRI, r0
    ba7a:	f3bf 8f6f 	isb	sy
}
    ba7e:	4770      	bx	lr

0000ba80 <set_absolute_alarm>:
{
    ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba82:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ba84:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    ba88:	f7f9 f878 	bl	4b7c <get_comparator>
    ba8c:	4607      	mov	r7, r0
    ba8e:	e019      	b.n	bac4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    ba90:	2013      	movs	r0, #19
    ba92:	f000 fa20 	bl	bed6 <z_impl_k_busy_wait>
}
    ba96:	e022      	b.n	bade <set_absolute_alarm+0x5e>
		event_clear(chan);
    ba98:	4630      	mov	r0, r6
    ba9a:	f7ff ffd4 	bl	ba46 <event_clear>
		event_enable(chan);
    ba9e:	4630      	mov	r0, r6
    baa0:	f7f9 f874 	bl	4b8c <event_enable>
		set_comparator(chan, cc_val);
    baa4:	4629      	mov	r1, r5
    baa6:	4630      	mov	r0, r6
    baa8:	f7f9 f85e 	bl	4b68 <set_comparator>
		now2 = counter();
    baac:	f7f9 f882 	bl	4bb4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bab0:	4284      	cmp	r4, r0
    bab2:	d01e      	beq.n	baf2 <set_absolute_alarm+0x72>
    bab4:	1c81      	adds	r1, r0, #2
    bab6:	4628      	mov	r0, r5
    bab8:	f7ff ffc1 	bl	ba3e <counter_sub>
	} while ((now2 != now) &&
    babc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bac0:	d917      	bls.n	baf2 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    bac2:	462f      	mov	r7, r5
		now = counter();
    bac4:	f7f9 f876 	bl	4bb4 <counter>
    bac8:	4604      	mov	r4, r0
		set_comparator(chan, now);
    baca:	4601      	mov	r1, r0
    bacc:	4630      	mov	r0, r6
    bace:	f7f9 f84b 	bl	4b68 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    bad2:	4621      	mov	r1, r4
    bad4:	4638      	mov	r0, r7
    bad6:	f7ff ffb2 	bl	ba3e <counter_sub>
    bada:	2801      	cmp	r0, #1
    badc:	d0d8      	beq.n	ba90 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    bade:	1ca7      	adds	r7, r4, #2
    bae0:	4639      	mov	r1, r7
    bae2:	4628      	mov	r0, r5
    bae4:	f7ff ffab 	bl	ba3e <counter_sub>
    bae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    baec:	d9d4      	bls.n	ba98 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    baee:	463d      	mov	r5, r7
    baf0:	e7d2      	b.n	ba98 <set_absolute_alarm+0x18>
}
    baf2:	4628      	mov	r0, r5
    baf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000baf6 <compare_set>:
{
    baf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    baf8:	b083      	sub	sp, #12
    bafa:	4604      	mov	r4, r0
    bafc:	4617      	mov	r7, r2
    bafe:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    bb00:	f7f9 f85e 	bl	4bc0 <compare_int_lock>
    bb04:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb08:	9301      	str	r3, [sp, #4]
    bb0a:	9b08      	ldr	r3, [sp, #32]
    bb0c:	9300      	str	r3, [sp, #0]
    bb0e:	463a      	mov	r2, r7
    bb10:	462b      	mov	r3, r5
    bb12:	4620      	mov	r0, r4
    bb14:	f7f9 f944 	bl	4da0 <compare_set_nolocks>
    bb18:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    bb1a:	4631      	mov	r1, r6
    bb1c:	4620      	mov	r0, r4
    bb1e:	f7f9 f8b3 	bl	4c88 <compare_int_unlock>
}
    bb22:	4628      	mov	r0, r5
    bb24:	b003      	add	sp, #12
    bb26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bb28 <sys_clock_cycle_get_32>:
{
    bb28:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    bb2a:	f7f9 f919 	bl	4d60 <z_nrf_rtc_timer_read>
}
    bb2e:	bd08      	pop	{r3, pc}

0000bb30 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bb30:	b410      	push	{r4}
	*state = &config->states[0];
    bb32:	6843      	ldr	r3, [r0, #4]
    bb34:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    bb36:	e001      	b.n	bb3c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    bb38:	3408      	adds	r4, #8
    bb3a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    bb3c:	6814      	ldr	r4, [r2, #0]
    bb3e:	7a03      	ldrb	r3, [r0, #8]
    bb40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    bb44:	3b01      	subs	r3, #1
    bb46:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bb4a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    bb4e:	429c      	cmp	r4, r3
    bb50:	d804      	bhi.n	bb5c <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    bb52:	7963      	ldrb	r3, [r4, #5]
    bb54:	428b      	cmp	r3, r1
    bb56:	d1ef      	bne.n	bb38 <pinctrl_lookup_state+0x8>
			return 0;
    bb58:	2000      	movs	r0, #0
    bb5a:	e001      	b.n	bb60 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    bb5c:	f06f 0001 	mvn.w	r0, #1
}
    bb60:	bc10      	pop	{r4}
    bb62:	4770      	bx	lr

0000bb64 <z_log_msg2_runtime_create>:
{
    bb64:	b510      	push	{r4, lr}
    bb66:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bb68:	ac0b      	add	r4, sp, #44	; 0x2c
    bb6a:	9405      	str	r4, [sp, #20]
    bb6c:	9403      	str	r4, [sp, #12]
    bb6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bb70:	9402      	str	r4, [sp, #8]
    bb72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bb74:	9401      	str	r4, [sp, #4]
    bb76:	9c08      	ldr	r4, [sp, #32]
    bb78:	9400      	str	r4, [sp, #0]
    bb7a:	f7f6 fcd1 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    bb7e:	b006      	add	sp, #24
    bb80:	bd10      	pop	{r4, pc}

0000bb82 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    bb82:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    bb84:	f7fe fbb0 	bl	a2e8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    bb88:	bd08      	pop	{r3, pc}

0000bb8a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    bb8a:	b510      	push	{r4, lr}
    bb8c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    bb8e:	f7f6 fffb 	bl	2b88 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    bb92:	f7f7 f8bb 	bl	2d0c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    bb96:	4620      	mov	r0, r4
    bb98:	f7ff fff3 	bl	bb82 <hw_cc3xx_init_internal>
	return res;
}
    bb9c:	bd10      	pop	{r4, pc}

0000bb9e <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bba2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bba6:	2b08      	cmp	r3, #8
    bba8:	d001      	beq.n	bbae <nrf52_errata_36+0x10>
        return false;
    bbaa:	2000      	movs	r0, #0
    bbac:	4770      	bx	lr
                        return true;
    bbae:	2001      	movs	r0, #1
}
    bbb0:	4770      	bx	lr

0000bbb2 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bbb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bbb6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bbba:	2b08      	cmp	r3, #8
    bbbc:	d001      	beq.n	bbc2 <nrf52_errata_66+0x10>
        return false;
    bbbe:	2000      	movs	r0, #0
    bbc0:	4770      	bx	lr
                        return true;
    bbc2:	2001      	movs	r0, #1
}
    bbc4:	4770      	bx	lr

0000bbc6 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bbc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bbca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bbce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bbd2:	2a08      	cmp	r2, #8
    bbd4:	d001      	beq.n	bbda <nrf52_errata_98+0x14>
        return false;
    bbd6:	2000      	movs	r0, #0
    bbd8:	4770      	bx	lr
                switch(var2)
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d804      	bhi.n	bbe8 <nrf52_errata_98+0x22>
    bbde:	e8df f003 	tbb	[pc, r3]
    bbe2:	01          	.byte	0x01
    bbe3:	00          	.byte	0x00
    bbe4:	2001      	movs	r0, #1
    bbe6:	4770      	bx	lr
                        return false;
    bbe8:	2000      	movs	r0, #0
}
    bbea:	4770      	bx	lr

0000bbec <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bbec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bbf0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bbf4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bbf8:	2a08      	cmp	r2, #8
    bbfa:	d001      	beq.n	bc00 <nrf52_errata_103+0x14>
        return false;
    bbfc:	2000      	movs	r0, #0
    bbfe:	4770      	bx	lr
                switch(var2)
    bc00:	2b00      	cmp	r3, #0
    bc02:	d804      	bhi.n	bc0e <nrf52_errata_103+0x22>
    bc04:	e8df f003 	tbb	[pc, r3]
    bc08:	01          	.byte	0x01
    bc09:	00          	.byte	0x00
    bc0a:	2001      	movs	r0, #1
    bc0c:	4770      	bx	lr
                        return false;
    bc0e:	2000      	movs	r0, #0
}
    bc10:	4770      	bx	lr

0000bc12 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bc12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bc16:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bc1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bc1e:	2a08      	cmp	r2, #8
    bc20:	d001      	beq.n	bc26 <nrf52_errata_115+0x14>
        return false;
    bc22:	2000      	movs	r0, #0
    bc24:	4770      	bx	lr
                switch(var2)
    bc26:	2b00      	cmp	r3, #0
    bc28:	d804      	bhi.n	bc34 <nrf52_errata_115+0x22>
    bc2a:	e8df f003 	tbb	[pc, r3]
    bc2e:	01          	.byte	0x01
    bc2f:	00          	.byte	0x00
    bc30:	2001      	movs	r0, #1
    bc32:	4770      	bx	lr
                        return false;
    bc34:	2000      	movs	r0, #0
}
    bc36:	4770      	bx	lr

0000bc38 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bc38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bc3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bc40:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bc44:	2a08      	cmp	r2, #8
    bc46:	d001      	beq.n	bc4c <nrf52_errata_120+0x14>
        return false;
    bc48:	2000      	movs	r0, #0
    bc4a:	4770      	bx	lr
                switch(var2)
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d804      	bhi.n	bc5a <nrf52_errata_120+0x22>
    bc50:	e8df f003 	tbb	[pc, r3]
    bc54:	01          	.byte	0x01
    bc55:	00          	.byte	0x00
    bc56:	2001      	movs	r0, #1
    bc58:	4770      	bx	lr
                        return false;
    bc5a:	2000      	movs	r0, #0
}
    bc5c:	4770      	bx	lr

0000bc5e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bc5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bc62:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bc66:	2b08      	cmp	r3, #8
    bc68:	d001      	beq.n	bc6e <nrf52_errata_136+0x10>
        return false;
    bc6a:	2000      	movs	r0, #0
    bc6c:	4770      	bx	lr
                        return true;
    bc6e:	2001      	movs	r0, #1
}
    bc70:	4770      	bx	lr

0000bc72 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bc72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bc76:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bc7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    bc7e:	2a08      	cmp	r2, #8
    bc80:	d001      	beq.n	bc86 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    bc82:	2000      	movs	r0, #0
    bc84:	4770      	bx	lr
                switch(var2)
    bc86:	2b04      	cmp	r3, #4
    bc88:	d801      	bhi.n	bc8e <nrf52_configuration_249+0x1c>
    bc8a:	2000      	movs	r0, #0
    bc8c:	4770      	bx	lr
                        return true;
    bc8e:	2001      	movs	r0, #1
    #endif
}
    bc90:	4770      	bx	lr

0000bc92 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    bc92:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    bc94:	4780      	blx	r0
}
    bc96:	bd08      	pop	{r3, pc}

0000bc98 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    bc98:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    bc9a:	f000 f91c 	bl	bed6 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    bc9e:	bd08      	pop	{r3, pc}

0000bca0 <clock_initial_lfclksrc_get>:
}
    bca0:	2000      	movs	r0, #0
    bca2:	4770      	bx	lr

0000bca4 <clock_lfclksrc_tweak>:
{
    bca4:	b538      	push	{r3, r4, r5, lr}
    bca6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    bca8:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bcaa:	2b01      	cmp	r3, #1
    bcac:	d002      	beq.n	bcb4 <clock_lfclksrc_tweak+0x10>
    bcae:	b933      	cbnz	r3, bcbe <clock_lfclksrc_tweak+0x1a>
    bcb0:	2301      	movs	r3, #1
    bcb2:	e000      	b.n	bcb6 <clock_lfclksrc_tweak+0x12>
    bcb4:	2301      	movs	r3, #1
    if (!is_correct_clk)
    bcb6:	461d      	mov	r5, r3
    bcb8:	b11b      	cbz	r3, bcc2 <clock_lfclksrc_tweak+0x1e>
}
    bcba:	4628      	mov	r0, r5
    bcbc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bcbe:	2300      	movs	r3, #0
    bcc0:	e7f9      	b.n	bcb6 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bcc2:	2000      	movs	r0, #0
    bcc4:	f7f9 ffd6 	bl	5c74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    bcc8:	f7ff ffea 	bl	bca0 <clock_initial_lfclksrc_get>
    bccc:	6020      	str	r0, [r4, #0]
    bcce:	e7f4      	b.n	bcba <clock_lfclksrc_tweak+0x16>

0000bcd0 <pin_is_task_output>:
{
    bcd0:	b510      	push	{r4, lr}
    bcd2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bcd4:	f7fa f9a0 	bl	6018 <pin_is_output>
    bcd8:	b128      	cbz	r0, bce6 <pin_is_task_output+0x16>
    bcda:	4620      	mov	r0, r4
    bcdc:	f7fa f986 	bl	5fec <pin_in_use_by_te>
    bce0:	b118      	cbz	r0, bcea <pin_is_task_output+0x1a>
    bce2:	2001      	movs	r0, #1
    bce4:	e000      	b.n	bce8 <pin_is_task_output+0x18>
    bce6:	2000      	movs	r0, #0
}
    bce8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bcea:	2000      	movs	r0, #0
    bcec:	e7fc      	b.n	bce8 <pin_is_task_output+0x18>

0000bcee <pin_is_input>:
{
    bcee:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    bcf0:	f7fa f992 	bl	6018 <pin_is_output>
    bcf4:	f080 0001 	eor.w	r0, r0, #1
}
    bcf8:	b2c0      	uxtb	r0, r0
    bcfa:	bd08      	pop	{r3, pc}

0000bcfc <gpiote_polarity_to_trigger>:
}
    bcfc:	4770      	bx	lr

0000bcfe <gpiote_trigger_to_polarity>:
}
    bcfe:	4770      	bx	lr

0000bd00 <is_level>:
}
    bd00:	2803      	cmp	r0, #3
    bd02:	bf94      	ite	ls
    bd04:	2000      	movls	r0, #0
    bd06:	2001      	movhi	r0, #1
    bd08:	4770      	bx	lr

0000bd0a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bd0a:	b508      	push	{r3, lr}
  _DoInit();
    bd0c:	f7fb f94e 	bl	6fac <_DoInit>
}
    bd10:	bd08      	pop	{r3, pc}

0000bd12 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    bd12:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    bd14:	f7ff fff9 	bl	bd0a <SEGGER_RTT_Init>

	return 0;
}
    bd18:	2000      	movs	r0, #0
    bd1a:	bd08      	pop	{r3, pc}

0000bd1c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bd1c:	b148      	cbz	r0, bd32 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bd1e:	68c3      	ldr	r3, [r0, #12]
    bd20:	8818      	ldrh	r0, [r3, #0]
    bd22:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bd26:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    bd2a:	bf14      	ite	ne
    bd2c:	2000      	movne	r0, #0
    bd2e:	2001      	moveq	r0, #1
    bd30:	4770      	bx	lr
		return false;
    bd32:	2000      	movs	r0, #0
}
    bd34:	4770      	bx	lr

0000bd36 <z_log_msg2_runtime_create>:
{
    bd36:	b510      	push	{r4, lr}
    bd38:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bd3a:	ac0b      	add	r4, sp, #44	; 0x2c
    bd3c:	9405      	str	r4, [sp, #20]
    bd3e:	9403      	str	r4, [sp, #12]
    bd40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bd42:	9402      	str	r4, [sp, #8]
    bd44:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bd46:	9401      	str	r4, [sp, #4]
    bd48:	9c08      	ldr	r4, [sp, #32]
    bd4a:	9400      	str	r4, [sp, #0]
    bd4c:	f7f6 fbe8 	bl	2520 <z_impl_z_log_msg2_runtime_vcreate>
}
    bd50:	b006      	add	sp, #24
    bd52:	bd10      	pop	{r4, pc}

0000bd54 <z_early_memset>:
{
    bd54:	b508      	push	{r3, lr}
    bd56:	f000 f901 	bl	bf5c <memset>
}
    bd5a:	bd08      	pop	{r3, pc}

0000bd5c <z_early_memcpy>:
{
    bd5c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bd5e:	f000 f8ef 	bl	bf40 <memcpy>
}
    bd62:	bd08      	pop	{r3, pc}

0000bd64 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bd64:	6902      	ldr	r2, [r0, #16]
    bd66:	6943      	ldr	r3, [r0, #20]
    bd68:	431a      	orrs	r2, r3
    bd6a:	f012 0203 	ands.w	r2, r2, #3
    bd6e:	d10d      	bne.n	bd8c <create_free_list+0x28>
	slab->free_list = NULL;
    bd70:	2100      	movs	r1, #0
    bd72:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bd74:	e005      	b.n	bd82 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    bd76:	6981      	ldr	r1, [r0, #24]
    bd78:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    bd7a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    bd7c:	6901      	ldr	r1, [r0, #16]
    bd7e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bd80:	3201      	adds	r2, #1
    bd82:	68c1      	ldr	r1, [r0, #12]
    bd84:	4291      	cmp	r1, r2
    bd86:	d8f6      	bhi.n	bd76 <create_free_list+0x12>
	return 0;
    bd88:	2000      	movs	r0, #0
    bd8a:	4770      	bx	lr
		return -EINVAL;
    bd8c:	f06f 0015 	mvn.w	r0, #21
}
    bd90:	4770      	bx	lr

0000bd92 <k_mem_slab_init>:
{
    bd92:	b510      	push	{r4, lr}
    bd94:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    bd96:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    bd98:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    bd9a:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    bd9c:	2300      	movs	r3, #0
    bd9e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    bda0:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    bda2:	f7ff ffdf 	bl	bd64 <create_free_list>
	if (rc < 0) {
    bda6:	2800      	cmp	r0, #0
    bda8:	db01      	blt.n	bdae <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    bdaa:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    bdac:	6064      	str	r4, [r4, #4]
}
    bdae:	bd10      	pop	{r4, pc}

0000bdb0 <setup_thread_stack>:
{
    bdb0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bdb2:	3207      	adds	r2, #7
    bdb4:	f022 0207 	bic.w	r2, r2, #7
    bdb8:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bdbc:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bdc0:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    bdc4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    bdc8:	2200      	movs	r2, #0
    bdca:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    bdce:	18c8      	adds	r0, r1, r3
    bdd0:	bc10      	pop	{r4}
    bdd2:	4770      	bx	lr

0000bdd4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bdd4:	f3ef 8005 	mrs	r0, IPSR
}
    bdd8:	3800      	subs	r0, #0
    bdda:	bf18      	it	ne
    bddc:	2001      	movne	r0, #1
    bdde:	4770      	bx	lr

0000bde0 <k_thread_name_get>:
}
    bde0:	3074      	adds	r0, #116	; 0x74
    bde2:	4770      	bx	lr

0000bde4 <z_impl_k_thread_start>:
{
    bde4:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bde6:	f7fc fd81 	bl	88ec <z_sched_start>
}
    bdea:	bd08      	pop	{r3, pc}

0000bdec <z_init_thread_base>:
{
    bdec:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    bdee:	2400      	movs	r4, #0
    bdf0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bdf2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bdf4:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    bdf6:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    bdf8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bdfa:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bdfc:	61c4      	str	r4, [r0, #28]
}
    bdfe:	bc10      	pop	{r4}
    be00:	4770      	bx	lr

0000be02 <z_pm_save_idle_exit>:
{
    be02:	b508      	push	{r3, lr}
	pm_system_resume();
    be04:	f7f6 fcca 	bl	279c <pm_system_resume>
	sys_clock_idle_exit();
    be08:	f7ff fe18 	bl	ba3c <sys_clock_idle_exit>
}
    be0c:	bd08      	pop	{r3, pc}

0000be0e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    be0e:	4288      	cmp	r0, r1
    be10:	da00      	bge.n	be14 <new_prio_for_inheritance+0x6>
    be12:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    be14:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    be18:	db01      	blt.n	be1e <new_prio_for_inheritance+0x10>
    be1a:	4608      	mov	r0, r1
    be1c:	4770      	bx	lr
    be1e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    be22:	4770      	bx	lr

0000be24 <adjust_owner_prio>:
{
    be24:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    be26:	6880      	ldr	r0, [r0, #8]
    be28:	f990 300e 	ldrsb.w	r3, [r0, #14]
    be2c:	428b      	cmp	r3, r1
    be2e:	d101      	bne.n	be34 <adjust_owner_prio+0x10>
	return false;
    be30:	2000      	movs	r0, #0
}
    be32:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    be34:	f7fc ff10 	bl	8c58 <z_set_prio>
    be38:	e7fb      	b.n	be32 <adjust_owner_prio+0xe>

0000be3a <z_impl_k_mutex_init>:
{
    be3a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    be3c:	2000      	movs	r0, #0
    be3e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    be40:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    be42:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    be44:	605b      	str	r3, [r3, #4]
}
    be46:	4770      	bx	lr

0000be48 <thread_active_elsewhere>:
}
    be48:	2000      	movs	r0, #0
    be4a:	4770      	bx	lr

0000be4c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    be4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    be50:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    be54:	4283      	cmp	r3, r0
    be56:	d001      	beq.n	be5c <z_sched_prio_cmp+0x10>
		return b2 - b1;
    be58:	1ac0      	subs	r0, r0, r3
    be5a:	4770      	bx	lr
	return 0;
    be5c:	2000      	movs	r0, #0
}
    be5e:	4770      	bx	lr

0000be60 <z_reschedule_irqlock>:
{
    be60:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be62:	4603      	mov	r3, r0
    be64:	b920      	cbnz	r0, be70 <z_reschedule_irqlock+0x10>
    be66:	f3ef 8205 	mrs	r2, IPSR
    be6a:	b942      	cbnz	r2, be7e <z_reschedule_irqlock+0x1e>
    be6c:	2201      	movs	r2, #1
    be6e:	e000      	b.n	be72 <z_reschedule_irqlock+0x12>
    be70:	2200      	movs	r2, #0
	if (resched(key)) {
    be72:	b932      	cbnz	r2, be82 <z_reschedule_irqlock+0x22>
    be74:	f383 8811 	msr	BASEPRI, r3
    be78:	f3bf 8f6f 	isb	sy
}
    be7c:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be7e:	2200      	movs	r2, #0
    be80:	e7f7      	b.n	be72 <z_reschedule_irqlock+0x12>
    be82:	4618      	mov	r0, r3
    be84:	f7f7 f830 	bl	2ee8 <arch_swap>
	return ret;
    be88:	e7f8      	b.n	be7c <z_reschedule_irqlock+0x1c>

0000be8a <z_priq_dumb_best>:
{
    be8a:	4603      	mov	r3, r0
	return list->head == list;
    be8c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be8e:	4283      	cmp	r3, r0
    be90:	d000      	beq.n	be94 <z_priq_dumb_best+0xa>
}
    be92:	4770      	bx	lr
	struct k_thread *thread = NULL;
    be94:	2000      	movs	r0, #0
	return thread;
    be96:	e7fc      	b.n	be92 <z_priq_dumb_best+0x8>

0000be98 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    be98:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    be9a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    be9c:	6083      	str	r3, [r0, #8]
}
    be9e:	4770      	bx	lr

0000bea0 <remove_timeout>:
{
    bea0:	b510      	push	{r4, lr}
    bea2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    bea4:	f7fd fce4 	bl	9870 <next>
    bea8:	b148      	cbz	r0, bebe <remove_timeout+0x1e>
    beaa:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    beac:	6920      	ldr	r0, [r4, #16]
    beae:	6961      	ldr	r1, [r4, #20]
    beb0:	6913      	ldr	r3, [r2, #16]
    beb2:	181b      	adds	r3, r3, r0
    beb4:	6950      	ldr	r0, [r2, #20]
    beb6:	eb41 0100 	adc.w	r1, r1, r0
    beba:	6113      	str	r3, [r2, #16]
    bebc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    bebe:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    bec0:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    bec2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bec4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bec6:	2300      	movs	r3, #0
    bec8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    beca:	6063      	str	r3, [r4, #4]
}
    becc:	bd10      	pop	{r4, pc}

0000bece <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bece:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bed0:	f7fd ffca 	bl	9e68 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bed4:	bd08      	pop	{r3, pc}

0000bed6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bed6:	b900      	cbnz	r0, beda <z_impl_k_busy_wait+0x4>
    bed8:	4770      	bx	lr
{
    beda:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bedc:	f7f7 ff28 	bl	3d30 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bee0:	bd08      	pop	{r3, pc}

0000bee2 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    bee2:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    bee4:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    bee6:	2300      	movs	r3, #0
    bee8:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    beea:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    beee:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    bef0:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    bef2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    bef4:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    bef6:	6343      	str	r3, [r0, #52]	; 0x34
}
    bef8:	4770      	bx	lr

0000befa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    befa:	b510      	push	{r4, lr}
    befc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    befe:	f7fd fdd9 	bl	9ab4 <z_abort_timeout>

	if (inactive) {
    bf02:	b9a0      	cbnz	r0, bf2e <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    bf04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bf06:	b10b      	cbz	r3, bf0c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bf08:	4620      	mov	r0, r4
    bf0a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bf0c:	f104 0018 	add.w	r0, r4, #24
    bf10:	f7fd f8ae 	bl	9070 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bf14:	b158      	cbz	r0, bf2e <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    bf16:	f7fc fc93 	bl	8840 <z_ready_thread>
	__asm__ volatile(
    bf1a:	f04f 0320 	mov.w	r3, #32
    bf1e:	f3ef 8011 	mrs	r0, BASEPRI
    bf22:	f383 8812 	msr	BASEPRI_MAX, r3
    bf26:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bf2a:	f7ff ff99 	bl	be60 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    bf2e:	bd10      	pop	{r4, pc}

0000bf30 <k_heap_init>:
{
    bf30:	b510      	push	{r4, lr}
    bf32:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    bf36:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    bf38:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    bf3a:	f7f5 f9a5 	bl	1288 <sys_heap_init>
}
    bf3e:	bd10      	pop	{r4, pc}

0000bf40 <memcpy>:
    bf40:	440a      	add	r2, r1
    bf42:	4291      	cmp	r1, r2
    bf44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    bf48:	d100      	bne.n	bf4c <memcpy+0xc>
    bf4a:	4770      	bx	lr
    bf4c:	b510      	push	{r4, lr}
    bf4e:	f811 4b01 	ldrb.w	r4, [r1], #1
    bf52:	f803 4f01 	strb.w	r4, [r3, #1]!
    bf56:	4291      	cmp	r1, r2
    bf58:	d1f9      	bne.n	bf4e <memcpy+0xe>
    bf5a:	bd10      	pop	{r4, pc}

0000bf5c <memset>:
    bf5c:	4402      	add	r2, r0
    bf5e:	4603      	mov	r3, r0
    bf60:	4293      	cmp	r3, r2
    bf62:	d100      	bne.n	bf66 <memset+0xa>
    bf64:	4770      	bx	lr
    bf66:	f803 1b01 	strb.w	r1, [r3], #1
    bf6a:	e7f9      	b.n	bf60 <memset+0x4>

0000bf6c <_calloc_r>:
    bf6c:	b538      	push	{r3, r4, r5, lr}
    bf6e:	fb02 f501 	mul.w	r5, r2, r1
    bf72:	4629      	mov	r1, r5
    bf74:	f7fe f942 	bl	a1fc <_malloc_r>
    bf78:	4604      	mov	r4, r0
    bf7a:	b118      	cbz	r0, bf84 <_calloc_r+0x18>
    bf7c:	462a      	mov	r2, r5
    bf7e:	2100      	movs	r1, #0
    bf80:	f7ff ffec 	bl	bf5c <memset>
    bf84:	4620      	mov	r0, r4
    bf86:	bd38      	pop	{r3, r4, r5, pc}

0000bf88 <strncpy>:
    bf88:	b510      	push	{r4, lr}
    bf8a:	3901      	subs	r1, #1
    bf8c:	4603      	mov	r3, r0
    bf8e:	b132      	cbz	r2, bf9e <strncpy+0x16>
    bf90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bf94:	f803 4b01 	strb.w	r4, [r3], #1
    bf98:	3a01      	subs	r2, #1
    bf9a:	2c00      	cmp	r4, #0
    bf9c:	d1f7      	bne.n	bf8e <strncpy+0x6>
    bf9e:	441a      	add	r2, r3
    bfa0:	2100      	movs	r1, #0
    bfa2:	4293      	cmp	r3, r2
    bfa4:	d100      	bne.n	bfa8 <strncpy+0x20>
    bfa6:	bd10      	pop	{r4, pc}
    bfa8:	f803 1b01 	strb.w	r1, [r3], #1
    bfac:	e7f9      	b.n	bfa2 <strncpy+0x1a>

0000bfae <strnlen>:
    bfae:	b510      	push	{r4, lr}
    bfb0:	4602      	mov	r2, r0
    bfb2:	4401      	add	r1, r0
    bfb4:	428a      	cmp	r2, r1
    bfb6:	4613      	mov	r3, r2
    bfb8:	d003      	beq.n	bfc2 <strnlen+0x14>
    bfba:	781c      	ldrb	r4, [r3, #0]
    bfbc:	3201      	adds	r2, #1
    bfbe:	2c00      	cmp	r4, #0
    bfc0:	d1f8      	bne.n	bfb4 <strnlen+0x6>
    bfc2:	1a18      	subs	r0, r3, r0
    bfc4:	bd10      	pop	{r4, pc}
	...

0000bfc8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bfc8:	f7f9 bd34 	b.w	5a34 <SystemInit>
