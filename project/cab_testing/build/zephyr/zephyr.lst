
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e0 62 00 20 8d 24 00 00 a1 8a 00 00 45 24 00 00     .b. .$......E$..
  10:	45 24 00 00 45 24 00 00 45 24 00 00 00 00 00 00     E$..E$..E$......
	...
  2c:	0d 20 00 00 45 24 00 00 00 00 00 00 b5 1f 00 00     . ..E$..........
  3c:	45 24 00 00                                         E$..

00000040 <_irq_vector_table>:
  40:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  50:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  60:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  70:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  80:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  90:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  a0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  b0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  c0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  d0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  e0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..
  f0:	ed 20 00 00 ed 20 00 00 ed 20 00 00 ed 20 00 00     . ... ... ... ..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <thread_A_code>:

} 

/* Thread code implementation */
void thread_A_code(void *argA , void *argB, void *argC)
{
     3dc:	b570      	push	{r4, r5, r6, lr}
    int64_t fin_time=0, release_time=0;

    /* Other variables */
    long int nact = 0;
    
    printk("Thread A init (periodic)\n");
     3de:	4840      	ldr	r0, [pc, #256]	; (4e0 <CONFIG_FLASH_SIZE+0xe0>)
     3e0:	f008 f9b6 	bl	8750 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     3e4:	f009 f9d3 	bl	978e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     3e8:	014a      	lsls	r2, r1, #5
     3ea:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     3ee:	0143      	lsls	r3, r0, #5
     3f0:	1a1b      	subs	r3, r3, r0
     3f2:	eb62 0201 	sbc.w	r2, r2, r1
     3f6:	0092      	lsls	r2, r2, #2
     3f8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     3fc:	009b      	lsls	r3, r3, #2
     3fe:	181c      	adds	r4, r3, r0
     400:	eb42 0301 	adc.w	r3, r2, r1
     404:	00db      	lsls	r3, r3, #3
     406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     40a:	f3c4 3410 	ubfx	r4, r4, #12, #17
     40e:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     412:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + thread_A_period;
     414:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     418:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     41c:	2500      	movs	r5, #0

    /* Thread loop */
    while(1) {
        
        /* Do the workload */          
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     41e:	3501      	adds	r5, #1
     420:	f009 f9b5 	bl	978e <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     424:	4602      	mov	r2, r0
     426:	014b      	lsls	r3, r1, #5
     428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     42c:	0140      	lsls	r0, r0, #5
     42e:	1a80      	subs	r0, r0, r2
     430:	eb63 0301 	sbc.w	r3, r3, r1
     434:	009b      	lsls	r3, r3, #2
     436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     43a:	0080      	lsls	r0, r0, #2
     43c:	1880      	adds	r0, r0, r2
     43e:	eb43 0301 	adc.w	r3, r3, r1
     442:	00db      	lsls	r3, r3, #3
     444:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     448:	f3c0 3010 	ubfx	r0, r0, #12, #17
     44c:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     450:	0bdb      	lsrs	r3, r3, #15
     452:	4629      	mov	r1, r5
     454:	4823      	ldr	r0, [pc, #140]	; (4e4 <CONFIG_FLASH_SIZE+0xe4>)
     456:	f008 f97b 	bl	8750 <printk>
        
        ab++;
     45a:	4b23      	ldr	r3, [pc, #140]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     45c:	6819      	ldr	r1, [r3, #0]
     45e:	3101      	adds	r1, #1
     460:	6019      	str	r1, [r3, #0]
        printk("Thread A set ab value to: %d \n",ab);  
     462:	4822      	ldr	r0, [pc, #136]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     464:	f008 f974 	bl	8750 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     468:	4821      	ldr	r0, [pc, #132]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     46a:	f006 f86b 	bl	6544 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     46e:	f009 f98e 	bl	978e <z_impl_k_uptime_ticks>
     472:	4684      	mov	ip, r0
     474:	014a      	lsls	r2, r1, #5
     476:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     47a:	0140      	lsls	r0, r0, #5
     47c:	ebb0 030c 	subs.w	r3, r0, ip
     480:	eb62 0201 	sbc.w	r2, r2, r1
     484:	0092      	lsls	r2, r2, #2
     486:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     48a:	009b      	lsls	r3, r3, #2
     48c:	eb13 030c 	adds.w	r3, r3, ip
     490:	eb42 0101 	adc.w	r1, r2, r1
     494:	00c9      	lsls	r1, r1, #3
     496:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     49a:	f3c3 3310 	ubfx	r3, r3, #12, #17
     49e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     4a2:	0bc9      	lsrs	r1, r1, #15
        k_sem_give(&sem_ab);

       
        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
        if( fin_time < release_time) {
     4a4:	42a3      	cmp	r3, r4
     4a6:	eb71 0206 	sbcs.w	r2, r1, r6
     4aa:	dab8      	bge.n	41e <CONFIG_FLASH_SIZE+0x1e>
            k_msleep(release_time - fin_time);
     4ac:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     4ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     4b2:	17c1      	asrs	r1, r0, #31
     4b4:	03c9      	lsls	r1, r1, #15
     4b6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     4ba:	03c0      	lsls	r0, r0, #15
     4bc:	f240 33e7 	movw	r3, #999	; 0x3e7
     4c0:	18c0      	adds	r0, r0, r3
     4c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     4c6:	f04f 0300 	mov.w	r3, #0
     4ca:	f141 0100 	adc.w	r1, r1, #0
     4ce:	f7ff fe17 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     4d2:	f007 fa5d 	bl	7990 <z_impl_k_sleep>
            release_time += thread_A_period;
     4d6:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     4da:	f146 0600 	adc.w	r6, r6, #0
     4de:	e79e      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>
     4e0:	00009a98 	.word	0x00009a98
     4e4:	00009ab4 	.word	0x00009ab4
     4e8:	20000000 	.word	0x20000000
     4ec:	00009aec 	.word	0x00009aec
     4f0:	20004564 	.word	0x20004564

000004f4 <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     4f4:	b510      	push	{r4, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     4f6:	481c      	ldr	r0, [pc, #112]	; (568 <thread_B_code+0x74>)
     4f8:	f008 f92a 	bl	8750 <printk>
    long int nact = 0;
     4fc:	2400      	movs	r4, #0
	return z_impl_k_sem_take(sem, timeout);
     4fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     506:	4819      	ldr	r0, [pc, #100]	; (56c <thread_B_code+0x78>)
     508:	f006 f860 	bl	65cc <z_impl_k_sem_take>
    while(1) {
        k_sem_take(&sem_ab,  K_FOREVER);
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     50c:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     50e:	f009 f93e 	bl	978e <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     512:	4602      	mov	r2, r0
     514:	014b      	lsls	r3, r1, #5
     516:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     51a:	0140      	lsls	r0, r0, #5
     51c:	1a80      	subs	r0, r0, r2
     51e:	eb63 0301 	sbc.w	r3, r3, r1
     522:	009b      	lsls	r3, r3, #2
     524:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     528:	0080      	lsls	r0, r0, #2
     52a:	1880      	adds	r0, r0, r2
     52c:	eb43 0301 	adc.w	r3, r3, r1
     530:	00db      	lsls	r3, r3, #3
     532:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     536:	f3c0 3010 	ubfx	r0, r0, #12, #17
     53a:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     53e:	0bdb      	lsrs	r3, r3, #15
     540:	4621      	mov	r1, r4
     542:	480b      	ldr	r0, [pc, #44]	; (570 <thread_B_code+0x7c>)
     544:	f008 f904 	bl	8750 <printk>
        printk("Task B read ab value: %d\n",ab);
     548:	4b0a      	ldr	r3, [pc, #40]	; (574 <thread_B_code+0x80>)
     54a:	6819      	ldr	r1, [r3, #0]
     54c:	480a      	ldr	r0, [pc, #40]	; (578 <thread_B_code+0x84>)
     54e:	f008 f8ff 	bl	8750 <printk>
        bc++;
     552:	4b0a      	ldr	r3, [pc, #40]	; (57c <thread_B_code+0x88>)
     554:	6819      	ldr	r1, [r3, #0]
     556:	3101      	adds	r1, #1
     558:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d \n",bc);  
     55a:	4809      	ldr	r0, [pc, #36]	; (580 <thread_B_code+0x8c>)
     55c:	f008 f8f8 	bl	8750 <printk>
	z_impl_k_sem_give(sem);
     560:	4808      	ldr	r0, [pc, #32]	; (584 <thread_B_code+0x90>)
     562:	f005 ffef 	bl	6544 <z_impl_k_sem_give>
    while(1) {
     566:	e7ca      	b.n	4fe <thread_B_code+0xa>
     568:	00009b0c 	.word	0x00009b0c
     56c:	20004564 	.word	0x20004564
     570:	00009b48 	.word	0x00009b48
     574:	20000000 	.word	0x20000000
     578:	00009b80 	.word	0x00009b80
     57c:	20000004 	.word	0x20000004
     580:	00009b9c 	.word	0x00009b9c
     584:	20004574 	.word	0x20004574

00000588 <thread_C_code>:
        
  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     588:	b510      	push	{r4, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     58a:	4817      	ldr	r0, [pc, #92]	; (5e8 <thread_C_code+0x60>)
     58c:	f008 f8e0 	bl	8750 <printk>
    long int nact = 0;
     590:	2400      	movs	r4, #0
	return z_impl_k_sem_take(sem, timeout);
     592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     59a:	4814      	ldr	r0, [pc, #80]	; (5ec <thread_C_code+0x64>)
     59c:	f006 f816 	bl	65cc <z_impl_k_sem_take>
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     5a0:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     5a2:	f009 f8f4 	bl	978e <z_impl_k_uptime_ticks>
     5a6:	4602      	mov	r2, r0
     5a8:	014b      	lsls	r3, r1, #5
     5aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     5ae:	0140      	lsls	r0, r0, #5
     5b0:	1a80      	subs	r0, r0, r2
     5b2:	eb63 0301 	sbc.w	r3, r3, r1
     5b6:	009b      	lsls	r3, r3, #2
     5b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     5bc:	0080      	lsls	r0, r0, #2
     5be:	1880      	adds	r0, r0, r2
     5c0:	eb43 0301 	adc.w	r3, r3, r1
     5c4:	00db      	lsls	r3, r3, #3
     5c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     5ca:	f3c0 3010 	ubfx	r0, r0, #12, #17
     5ce:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     5d2:	0bdb      	lsrs	r3, r3, #15
     5d4:	4621      	mov	r1, r4
     5d6:	4806      	ldr	r0, [pc, #24]	; (5f0 <thread_C_code+0x68>)
     5d8:	f008 f8ba 	bl	8750 <printk>
        printk("Task C read bc value: %d\n",bc);
     5dc:	4b05      	ldr	r3, [pc, #20]	; (5f4 <thread_C_code+0x6c>)
     5de:	6819      	ldr	r1, [r3, #0]
     5e0:	4805      	ldr	r0, [pc, #20]	; (5f8 <thread_C_code+0x70>)
     5e2:	f008 f8b5 	bl	8750 <printk>
    while(1) {
     5e6:	e7d4      	b.n	592 <thread_C_code+0xa>
     5e8:	00009bbc 	.word	0x00009bbc
     5ec:	20004574 	.word	0x20004574
     5f0:	00009bf8 	.word	0x00009bf8
     5f4:	20000004 	.word	0x20000004
     5f8:	00009c30 	.word	0x00009c30

000005fc <main>:
void main(void) {
     5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     600:	b088      	sub	sp, #32
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     602:	483b      	ldr	r0, [pc, #236]	; (6f0 <main+0xf4>)
     604:	f002 f8e6 	bl	27d4 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     608:	2201      	movs	r2, #1
     60a:	2100      	movs	r1, #0
     60c:	4839      	ldr	r0, [pc, #228]	; (6f4 <main+0xf8>)
     60e:	f009 f868 	bl	96e2 <z_impl_k_sem_init>
     612:	2201      	movs	r2, #1
     614:	2100      	movs	r1, #0
     616:	4838      	ldr	r0, [pc, #224]	; (6f8 <main+0xfc>)
     618:	f009 f863 	bl	96e2 <z_impl_k_sem_init>
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
     61c:	f44f 7000 	mov.w	r0, #512	; 0x200
     620:	f008 facf 	bl	8bc2 <malloc>
     624:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     626:	2500      	movs	r5, #0
     628:	e006      	b.n	638 <main+0x3c>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
     62a:	2080      	movs	r0, #128	; 0x80
     62c:	f008 fac9 	bl	8bc2 <malloc>
     630:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     634:	3501      	adds	r5, #1
     636:	b2ed      	uxtb	r5, r5
     638:	f015 0f80 	tst.w	r5, #128	; 0x80
     63c:	d0f5      	beq.n	62a <main+0x2e>
    printk("image allocated");
     63e:	482f      	ldr	r0, [pc, #188]	; (6fc <main+0x100>)
     640:	f008 f886 	bl	8750 <printk>
    for (size_t i = 0; i < IMGWIDTH; i++)
     644:	2100      	movs	r1, #0
     646:	e00a      	b.n	65e <main+0x62>
            img1[i][j] = vertical_guide_image_data[i][j];
     648:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
     64c:	4a2c      	ldr	r2, [pc, #176]	; (700 <main+0x104>)
     64e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
     652:	5cd2      	ldrb	r2, [r2, r3]
     654:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
     656:	3301      	adds	r3, #1
     658:	2b7f      	cmp	r3, #127	; 0x7f
     65a:	d9f5      	bls.n	648 <main+0x4c>
    for (size_t i = 0; i < IMGWIDTH; i++)
     65c:	3101      	adds	r1, #1
     65e:	297f      	cmp	r1, #127	; 0x7f
     660:	d801      	bhi.n	666 <main+0x6a>
        for (size_t j = 0; j < IMGWIDTH; j++)
     662:	2300      	movs	r3, #0
     664:	e7f8      	b.n	658 <main+0x5c>
    printk("opening cab");
     666:	4827      	ldr	r0, [pc, #156]	; (704 <main+0x108>)
     668:	f008 f872 	bl	8750 <printk>
    image_cab = open_cab("image cab", 5, IMGWIDTH*IMGWIDTH, (void*)img1);
     66c:	4623      	mov	r3, r4
     66e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     672:	2105      	movs	r1, #5
     674:	4824      	ldr	r0, [pc, #144]	; (708 <main+0x10c>)
     676:	f008 f810 	bl	869a <open_cab>
     67a:	4b24      	ldr	r3, [pc, #144]	; (70c <main+0x110>)
     67c:	6018      	str	r0, [r3, #0]
        NULL, NULL, NULL, thread_A_prio, 0, K_NO_WAIT);
     67e:	2600      	movs	r6, #0
     680:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     682:	e9cd 6706 	strd	r6, r7, [sp, #24]
     686:	2400      	movs	r4, #0
     688:	9404      	str	r4, [sp, #16]
     68a:	2501      	movs	r5, #1
     68c:	9503      	str	r5, [sp, #12]
     68e:	9402      	str	r4, [sp, #8]
     690:	9401      	str	r4, [sp, #4]
     692:	9400      	str	r4, [sp, #0]
     694:	4b1e      	ldr	r3, [pc, #120]	; (710 <main+0x114>)
     696:	f44f 6280 	mov.w	r2, #1024	; 0x400
     69a:	491e      	ldr	r1, [pc, #120]	; (714 <main+0x118>)
     69c:	481e      	ldr	r0, [pc, #120]	; (718 <main+0x11c>)
     69e:	f005 fc65 	bl	5f6c <z_impl_k_thread_create>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     6a2:	4b1e      	ldr	r3, [pc, #120]	; (71c <main+0x120>)
     6a4:	6018      	str	r0, [r3, #0]
     6a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
     6aa:	9404      	str	r4, [sp, #16]
     6ac:	9503      	str	r5, [sp, #12]
     6ae:	9402      	str	r4, [sp, #8]
     6b0:	9401      	str	r4, [sp, #4]
     6b2:	9400      	str	r4, [sp, #0]
     6b4:	4b1a      	ldr	r3, [pc, #104]	; (720 <main+0x124>)
     6b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     6ba:	491a      	ldr	r1, [pc, #104]	; (724 <main+0x128>)
     6bc:	481a      	ldr	r0, [pc, #104]	; (728 <main+0x12c>)
     6be:	f005 fc55 	bl	5f6c <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     6c2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 72c <main+0x130>
     6c6:	f8c8 0000 	str.w	r0, [r8]
     6ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
     6ce:	9404      	str	r4, [sp, #16]
     6d0:	9503      	str	r5, [sp, #12]
     6d2:	9402      	str	r4, [sp, #8]
     6d4:	9401      	str	r4, [sp, #4]
     6d6:	9400      	str	r4, [sp, #0]
     6d8:	4b15      	ldr	r3, [pc, #84]	; (730 <main+0x134>)
     6da:	f44f 6280 	mov.w	r2, #1024	; 0x400
     6de:	4915      	ldr	r1, [pc, #84]	; (734 <main+0x138>)
     6e0:	4815      	ldr	r0, [pc, #84]	; (738 <main+0x13c>)
     6e2:	f005 fc43 	bl	5f6c <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     6e6:	f8c8 0000 	str.w	r0, [r8]
} 
     6ea:	b008      	add	sp, #32
     6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6f0:	00009c4c 	.word	0x00009c4c
     6f4:	20004564 	.word	0x20004564
     6f8:	20004574 	.word	0x20004574
     6fc:	00009c80 	.word	0x00009c80
     700:	20000008 	.word	0x20000008
     704:	00009c90 	.word	0x00009c90
     708:	00009c9c 	.word	0x00009c9c
     70c:	20004560 	.word	0x20004560
     710:	000003dd 	.word	0x000003dd
     714:	20005280 	.word	0x20005280
     718:	200041c8 	.word	0x200041c8
     71c:	20004584 	.word	0x20004584
     720:	000004f5 	.word	0x000004f5
     724:	200056a0 	.word	0x200056a0
     728:	20004278 	.word	0x20004278
     72c:	20004588 	.word	0x20004588
     730:	00000589 	.word	0x00000589
     734:	20005ac0 	.word	0x20005ac0
     738:	20004328 	.word	0x20004328

0000073c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     73c:	b538      	push	{r3, r4, r5, lr}
     73e:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     740:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     742:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     746:	6081      	str	r1, [r0, #8]
	switch (method) {
     748:	2b02      	cmp	r3, #2
     74a:	d903      	bls.n	754 <sys_notify_finalize+0x18>
     74c:	2b03      	cmp	r3, #3
     74e:	d102      	bne.n	756 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     750:	6800      	ldr	r0, [r0, #0]
		break;
     752:	e00e      	b.n	772 <sys_notify_finalize+0x36>
	switch (method) {
     754:	b963      	cbnz	r3, 770 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     756:	4d08      	ldr	r5, [pc, #32]	; (778 <sys_notify_finalize+0x3c>)
     758:	2345      	movs	r3, #69	; 0x45
     75a:	462a      	mov	r2, r5
     75c:	4907      	ldr	r1, [pc, #28]	; (77c <sys_notify_finalize+0x40>)
     75e:	4808      	ldr	r0, [pc, #32]	; (780 <sys_notify_finalize+0x44>)
     760:	f008 f97b 	bl	8a5a <assert_print>
     764:	2145      	movs	r1, #69	; 0x45
     766:	4628      	mov	r0, r5
     768:	f008 f970 	bl	8a4c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     76c:	2000      	movs	r0, #0
     76e:	e000      	b.n	772 <sys_notify_finalize+0x36>
	switch (method) {
     770:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     772:	2300      	movs	r3, #0
     774:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     776:	bd38      	pop	{r3, r4, r5, pc}
     778:	00009ca8 	.word	0x00009ca8
     77c:	00009ccc 	.word	0x00009ccc
     780:	00009cd0 	.word	0x00009cd0

00000784 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     784:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     786:	680b      	ldr	r3, [r1, #0]
     788:	3301      	adds	r3, #1
     78a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     78c:	4b01      	ldr	r3, [pc, #4]	; (794 <char_out+0x10>)
     78e:	681b      	ldr	r3, [r3, #0]
     790:	4798      	blx	r3
}
     792:	bd08      	pop	{r3, pc}
     794:	20004008 	.word	0x20004008

00000798 <__printk_hook_install>:
	_char_out = fn;
     798:	4b01      	ldr	r3, [pc, #4]	; (7a0 <__printk_hook_install+0x8>)
     79a:	6018      	str	r0, [r3, #0]
}
     79c:	4770      	bx	lr
     79e:	bf00      	nop
     7a0:	20004008 	.word	0x20004008

000007a4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     7a4:	b500      	push	{lr}
     7a6:	b083      	sub	sp, #12
     7a8:	4602      	mov	r2, r0
     7aa:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     7ac:	2100      	movs	r1, #0
     7ae:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     7b0:	a901      	add	r1, sp, #4
     7b2:	4803      	ldr	r0, [pc, #12]	; (7c0 <vprintk+0x1c>)
     7b4:	f000 fd8e 	bl	12d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     7b8:	b003      	add	sp, #12
     7ba:	f85d fb04 	ldr.w	pc, [sp], #4
     7be:	bf00      	nop
     7c0:	00000785 	.word	0x00000785

000007c4 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     7c4:	b538      	push	{r3, r4, r5, lr}
     7c6:	4604      	mov	r4, r0
     7c8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7ca:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     7cc:	2a00      	cmp	r2, #0
     7ce:	db14      	blt.n	7fa <process_complete+0x36>
     7d0:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     7d4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     7d6:	2a01      	cmp	r2, #1
     7d8:	d91b      	bls.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     7da:	2b04      	cmp	r3, #4
     7dc:	d050      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     7de:	4c2f      	ldr	r4, [pc, #188]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     7e0:	f240 131b 	movw	r3, #283	; 0x11b
     7e4:	4622      	mov	r2, r4
     7e6:	492e      	ldr	r1, [pc, #184]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     7e8:	482e      	ldr	r0, [pc, #184]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     7ea:	f008 f936 	bl	8a5a <assert_print>
     7ee:	f240 111b 	movw	r1, #283	; 0x11b
     7f2:	4620      	mov	r0, r4
     7f4:	f008 f92a 	bl	8a4c <assert_post_action>
	}
}
     7f8:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     7fa:	e9d0 0100 	ldrd	r0, r1, [r0]
     7fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     802:	2300      	movs	r3, #0
     804:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     806:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     808:	2101      	movs	r1, #1
     80a:	4620      	mov	r0, r4
     80c:	f007 ffae 	bl	876c <set_state>
     810:	e7f2      	b.n	7f8 <process_complete+0x34>
		*clients = mgr->clients;
     812:	e9d0 0100 	ldrd	r0, r1, [r0]
     816:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     81a:	2200      	movs	r2, #0
     81c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     81e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     820:	2b06      	cmp	r3, #6
     822:	d00f      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     824:	2b05      	cmp	r3, #5
     826:	d11d      	bne.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			set_state(mgr, ONOFF_STATE_OFF);
     828:	2100      	movs	r1, #0
     82a:	4620      	mov	r0, r4
     82c:	f007 ff9e 	bl	876c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     830:	4620      	mov	r0, r4
     832:	f007 ffc2 	bl	87ba <process_recheck>
     836:	2800      	cmp	r0, #0
     838:	d0de      	beq.n	7f8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     83a:	8ba3      	ldrh	r3, [r4, #28]
     83c:	f043 0320 	orr.w	r3, r3, #32
     840:	83a3      	strh	r3, [r4, #28]
     842:	e7d9      	b.n	7f8 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     844:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     848:	b13b      	cbz	r3, 85a <CONFIG_ISR_STACK_SIZE+0x5a>
				mgr->refs += 1U;
     84a:	8be2      	ldrh	r2, [r4, #30]
     84c:	3201      	adds	r2, #1
     84e:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     850:	2b00      	cmp	r3, #0
     852:	d0f9      	beq.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
	return node->next;
     854:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     856:	2b00      	cmp	r3, #0
     858:	d1f6      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
			set_state(mgr, ONOFF_STATE_ON);
     85a:	2102      	movs	r1, #2
     85c:	4620      	mov	r0, r4
     85e:	f007 ff85 	bl	876c <set_state>
     862:	e7e5      	b.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     864:	4d0d      	ldr	r5, [pc, #52]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
     866:	f240 1309 	movw	r3, #265	; 0x109
     86a:	462a      	mov	r2, r5
     86c:	490e      	ldr	r1, [pc, #56]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     86e:	480d      	ldr	r0, [pc, #52]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     870:	f008 f8f3 	bl	8a5a <assert_print>
     874:	f240 1109 	movw	r1, #265	; 0x109
     878:	4628      	mov	r0, r5
     87a:	f008 f8e7 	bl	8a4c <assert_post_action>
     87e:	e7d3      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
		set_state(mgr, ONOFF_STATE_OFF);
     880:	2100      	movs	r1, #0
     882:	f007 ff73 	bl	876c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     886:	4620      	mov	r0, r4
     888:	f007 ff97 	bl	87ba <process_recheck>
     88c:	2800      	cmp	r0, #0
     88e:	d0b3      	beq.n	7f8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     890:	8ba3      	ldrh	r3, [r4, #28]
     892:	f043 0320 	orr.w	r3, r3, #32
     896:	83a3      	strh	r3, [r4, #28]
     898:	e7ae      	b.n	7f8 <process_complete+0x34>
     89a:	bf00      	nop
     89c:	00009cf0 	.word	0x00009cf0
     8a0:	00009ccc 	.word	0x00009ccc
     8a4:	00009cd0 	.word	0x00009cd0
     8a8:	00009d14 	.word	0x00009d14

000008ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b0:	b083      	sub	sp, #12
     8b2:	4604      	mov	r4, r0
     8b4:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8b6:	8b83      	ldrh	r3, [r0, #28]
     8b8:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     8bc:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     8c0:	460d      	mov	r5, r1
     8c2:	b131      	cbz	r1, 8d2 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8c4:	f1b8 0f00 	cmp.w	r8, #0
     8c8:	d112      	bne.n	8f0 <process_event+0x44>
	list->head = NULL;
     8ca:	2300      	movs	r3, #0
     8cc:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     8ce:	9301      	str	r3, [sp, #4]
}
     8d0:	e0aa      	b.n	a28 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     8d2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; bb4 <process_event+0x308>
     8d6:	f240 1333 	movw	r3, #307	; 0x133
     8da:	464a      	mov	r2, r9
     8dc:	49b6      	ldr	r1, [pc, #728]	; (bb8 <process_event+0x30c>)
     8de:	48b7      	ldr	r0, [pc, #732]	; (bbc <process_event+0x310>)
     8e0:	f008 f8bb 	bl	8a5a <assert_print>
     8e4:	f240 1133 	movw	r1, #307	; 0x133
     8e8:	4648      	mov	r0, r9
     8ea:	f008 f8af 	bl	8a4c <assert_post_action>
     8ee:	e7e9      	b.n	8c4 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     8f0:	2d01      	cmp	r5, #1
     8f2:	d013      	beq.n	91c <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     8f4:	2d02      	cmp	r5, #2
     8f6:	d116      	bne.n	926 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8f8:	8ba3      	ldrh	r3, [r4, #28]
     8fa:	f043 0320 	orr.w	r3, r3, #32
     8fe:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     900:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     902:	4620      	mov	r0, r4
     904:	f005 f9fa 	bl	5cfc <z_spin_unlock_valid>
     908:	2800      	cmp	r0, #0
     90a:	f000 819c 	beq.w	c46 <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     90e:	f386 8811 	msr	BASEPRI, r6
     912:	f3bf 8f6f 	isb	sy
}
     916:	b003      	add	sp, #12
     918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     91c:	8ba3      	ldrh	r3, [r4, #28]
     91e:	f043 0310 	orr.w	r3, r3, #16
     922:	83a3      	strh	r3, [r4, #28]
     924:	e7ec      	b.n	900 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     926:	4da3      	ldr	r5, [pc, #652]	; (bb4 <process_event+0x308>)
     928:	f44f 739e 	mov.w	r3, #316	; 0x13c
     92c:	462a      	mov	r2, r5
     92e:	49a4      	ldr	r1, [pc, #656]	; (bc0 <process_event+0x314>)
     930:	48a2      	ldr	r0, [pc, #648]	; (bbc <process_event+0x310>)
     932:	f008 f892 	bl	8a5a <assert_print>
     936:	f44f 719e 	mov.w	r1, #316	; 0x13c
     93a:	4628      	mov	r0, r5
     93c:	f008 f886 	bl	8a4c <assert_post_action>
     940:	e7da      	b.n	8f8 <process_event+0x4c>
			evt = process_recheck(mgr);
     942:	4620      	mov	r0, r4
     944:	f007 ff39 	bl	87ba <process_recheck>
     948:	4605      	mov	r5, r0
     94a:	e06f      	b.n	a2c <process_event+0x180>
			res = mgr->last_res;
     94c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     950:	464a      	mov	r2, r9
     952:	4669      	mov	r1, sp
     954:	4620      	mov	r0, r4
     956:	f7ff ff35 	bl	7c4 <process_complete>
		onoff_transition_fn transit = NULL;
     95a:	2500      	movs	r5, #0
     95c:	e011      	b.n	982 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     95e:	2f00      	cmp	r7, #0
     960:	f040 8081 	bne.w	a66 <process_event+0x1ba>
	return list->head;
     964:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     966:	2b00      	cmp	r3, #0
     968:	f000 808b 	beq.w	a82 <process_event+0x1d6>
			transit = mgr->transitions->start;
     96c:	6923      	ldr	r3, [r4, #16]
     96e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     970:	2d00      	cmp	r5, #0
     972:	f000 8094 	beq.w	a9e <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     976:	2106      	movs	r1, #6
     978:	4620      	mov	r0, r4
     97a:	f007 fef7 	bl	876c <set_state>
		res = 0;
     97e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     982:	8ba3      	ldrh	r3, [r4, #28]
     984:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     988:	45b8      	cmp	r8, r7
     98a:	f000 810b 	beq.w	ba4 <process_event+0x2f8>
     98e:	68a2      	ldr	r2, [r4, #8]
     990:	2a00      	cmp	r2, #0
     992:	f000 8109 	beq.w	ba8 <process_event+0x2fc>
     996:	2201      	movs	r2, #1
		if (do_monitors
     998:	4617      	mov	r7, r2
     99a:	b91a      	cbnz	r2, 9a4 <process_event+0xf8>
     99c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     99e:	2a00      	cmp	r2, #0
     9a0:	f000 8104 	beq.w	bac <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     9a4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     9a8:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     9aa:	f104 0a14 	add.w	sl, r4, #20
     9ae:	4650      	mov	r0, sl
     9b0:	f005 f9a4 	bl	5cfc <z_spin_unlock_valid>
     9b4:	2800      	cmp	r0, #0
     9b6:	f000 8115 	beq.w	be4 <process_event+0x338>
     9ba:	f386 8811 	msr	BASEPRI, r6
     9be:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     9c2:	2f00      	cmp	r7, #0
     9c4:	f040 811f 	bne.w	c06 <process_event+0x35a>
     9c8:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     9ca:	b12b      	cbz	r3, 9d8 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     9cc:	464b      	mov	r3, r9
     9ce:	4642      	mov	r2, r8
     9d0:	4669      	mov	r1, sp
     9d2:	4620      	mov	r0, r4
     9d4:	f007 ff33 	bl	883e <notify_all>
			if (transit != NULL) {
     9d8:	b115      	cbz	r5, 9e0 <process_event+0x134>
				transit(mgr, transition_complete);
     9da:	497a      	ldr	r1, [pc, #488]	; (bc4 <process_event+0x318>)
     9dc:	4620      	mov	r0, r4
     9de:	47a8      	blx	r5
	__asm__ volatile(
     9e0:	f04f 0320 	mov.w	r3, #32
     9e4:	f3ef 8611 	mrs	r6, BASEPRI
     9e8:	f383 8812 	msr	BASEPRI_MAX, r3
     9ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9f0:	4650      	mov	r0, sl
     9f2:	f005 f973 	bl	5cdc <z_spin_lock_valid>
     9f6:	2800      	cmp	r0, #0
     9f8:	f000 810b 	beq.w	c12 <process_event+0x366>
	z_spin_lock_set_owner(l);
     9fc:	4650      	mov	r0, sl
     9fe:	f005 f98d 	bl	5d1c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a02:	8ba3      	ldrh	r3, [r4, #28]
     a04:	f023 0308 	bic.w	r3, r3, #8
     a08:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a0a:	8ba3      	ldrh	r3, [r4, #28]
     a0c:	f013 0f10 	tst.w	r3, #16
     a10:	f000 810f 	beq.w	c32 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a14:	f023 0310 	bic.w	r3, r3, #16
     a18:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     a1a:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a1c:	8ba7      	ldrh	r7, [r4, #28]
     a1e:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     a22:	2d00      	cmp	r5, #0
     a24:	f43f af6c 	beq.w	900 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     a28:	2d02      	cmp	r5, #2
     a2a:	d08a      	beq.n	942 <process_event+0x96>
		if (evt == EVT_NOP) {
     a2c:	2d00      	cmp	r5, #0
     a2e:	f43f af67 	beq.w	900 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     a32:	2d01      	cmp	r5, #1
     a34:	d08a      	beq.n	94c <process_event+0xa0>
		} else if (evt == EVT_START) {
     a36:	2d03      	cmp	r5, #3
     a38:	d091      	beq.n	95e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     a3a:	2d04      	cmp	r5, #4
     a3c:	d03e      	beq.n	abc <process_event+0x210>
		} else if (evt == EVT_RESET) {
     a3e:	2d05      	cmp	r5, #5
     a40:	f040 80a0 	bne.w	b84 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     a44:	2f01      	cmp	r7, #1
     a46:	d172      	bne.n	b2e <process_event+0x282>
     a48:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     a4a:	2b00      	cmp	r3, #0
     a4c:	d07d      	beq.n	b4a <process_event+0x29e>
			transit = mgr->transitions->reset;
     a4e:	6923      	ldr	r3, [r4, #16]
     a50:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     a52:	2d00      	cmp	r5, #0
     a54:	f000 8087 	beq.w	b66 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     a58:	2105      	movs	r1, #5
     a5a:	4620      	mov	r0, r4
     a5c:	f007 fe86 	bl	876c <set_state>
		res = 0;
     a60:	f04f 0900 	mov.w	r9, #0
     a64:	e78d      	b.n	982 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     a66:	4d53      	ldr	r5, [pc, #332]	; (bb4 <process_event+0x308>)
     a68:	f44f 73ab 	mov.w	r3, #342	; 0x156
     a6c:	462a      	mov	r2, r5
     a6e:	4956      	ldr	r1, [pc, #344]	; (bc8 <process_event+0x31c>)
     a70:	4852      	ldr	r0, [pc, #328]	; (bbc <process_event+0x310>)
     a72:	f007 fff2 	bl	8a5a <assert_print>
     a76:	f44f 71ab 	mov.w	r1, #342	; 0x156
     a7a:	4628      	mov	r0, r5
     a7c:	f007 ffe6 	bl	8a4c <assert_post_action>
     a80:	e770      	b.n	964 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     a82:	4d4c      	ldr	r5, [pc, #304]	; (bb4 <process_event+0x308>)
     a84:	f240 1357 	movw	r3, #343	; 0x157
     a88:	462a      	mov	r2, r5
     a8a:	4950      	ldr	r1, [pc, #320]	; (bcc <process_event+0x320>)
     a8c:	484b      	ldr	r0, [pc, #300]	; (bbc <process_event+0x310>)
     a8e:	f007 ffe4 	bl	8a5a <assert_print>
     a92:	f240 1157 	movw	r1, #343	; 0x157
     a96:	4628      	mov	r0, r5
     a98:	f007 ffd8 	bl	8a4c <assert_post_action>
     a9c:	e766      	b.n	96c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     a9e:	f8df 8114 	ldr.w	r8, [pc, #276]	; bb4 <process_event+0x308>
     aa2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     aa6:	4642      	mov	r2, r8
     aa8:	4949      	ldr	r1, [pc, #292]	; (bd0 <process_event+0x324>)
     aaa:	4844      	ldr	r0, [pc, #272]	; (bbc <process_event+0x310>)
     aac:	f007 ffd5 	bl	8a5a <assert_print>
     ab0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     ab4:	4640      	mov	r0, r8
     ab6:	f007 ffc9 	bl	8a4c <assert_post_action>
     aba:	e75c      	b.n	976 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     abc:	2f02      	cmp	r7, #2
     abe:	d10b      	bne.n	ad8 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     ac0:	8be3      	ldrh	r3, [r4, #30]
     ac2:	b9bb      	cbnz	r3, af4 <process_event+0x248>
			transit = mgr->transitions->stop;
     ac4:	6923      	ldr	r3, [r4, #16]
     ac6:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     ac8:	b315      	cbz	r5, b10 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     aca:	2104      	movs	r1, #4
     acc:	4620      	mov	r0, r4
     ace:	f007 fe4d 	bl	876c <set_state>
		res = 0;
     ad2:	f04f 0900 	mov.w	r9, #0
     ad6:	e754      	b.n	982 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     ad8:	4d36      	ldr	r5, [pc, #216]	; (bb4 <process_event+0x308>)
     ada:	f240 135d 	movw	r3, #349	; 0x15d
     ade:	462a      	mov	r2, r5
     ae0:	493c      	ldr	r1, [pc, #240]	; (bd4 <process_event+0x328>)
     ae2:	4836      	ldr	r0, [pc, #216]	; (bbc <process_event+0x310>)
     ae4:	f007 ffb9 	bl	8a5a <assert_print>
     ae8:	f240 115d 	movw	r1, #349	; 0x15d
     aec:	4628      	mov	r0, r5
     aee:	f007 ffad 	bl	8a4c <assert_post_action>
     af2:	e7e5      	b.n	ac0 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     af4:	4d2f      	ldr	r5, [pc, #188]	; (bb4 <process_event+0x308>)
     af6:	f44f 73af 	mov.w	r3, #350	; 0x15e
     afa:	462a      	mov	r2, r5
     afc:	4936      	ldr	r1, [pc, #216]	; (bd8 <process_event+0x32c>)
     afe:	482f      	ldr	r0, [pc, #188]	; (bbc <process_event+0x310>)
     b00:	f007 ffab 	bl	8a5a <assert_print>
     b04:	f44f 71af 	mov.w	r1, #350	; 0x15e
     b08:	4628      	mov	r0, r5
     b0a:	f007 ff9f 	bl	8a4c <assert_post_action>
     b0e:	e7d9      	b.n	ac4 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     b10:	f8df 80a0 	ldr.w	r8, [pc, #160]	; bb4 <process_event+0x308>
     b14:	f240 1361 	movw	r3, #353	; 0x161
     b18:	4642      	mov	r2, r8
     b1a:	492d      	ldr	r1, [pc, #180]	; (bd0 <process_event+0x324>)
     b1c:	4827      	ldr	r0, [pc, #156]	; (bbc <process_event+0x310>)
     b1e:	f007 ff9c 	bl	8a5a <assert_print>
     b22:	f240 1161 	movw	r1, #353	; 0x161
     b26:	4640      	mov	r0, r8
     b28:	f007 ff90 	bl	8a4c <assert_post_action>
     b2c:	e7cd      	b.n	aca <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b2e:	4d21      	ldr	r5, [pc, #132]	; (bb4 <process_event+0x308>)
     b30:	f44f 73b2 	mov.w	r3, #356	; 0x164
     b34:	462a      	mov	r2, r5
     b36:	4929      	ldr	r1, [pc, #164]	; (bdc <process_event+0x330>)
     b38:	4820      	ldr	r0, [pc, #128]	; (bbc <process_event+0x310>)
     b3a:	f007 ff8e 	bl	8a5a <assert_print>
     b3e:	f44f 71b2 	mov.w	r1, #356	; 0x164
     b42:	4628      	mov	r0, r5
     b44:	f007 ff82 	bl	8a4c <assert_post_action>
     b48:	e77e      	b.n	a48 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     b4a:	4d1a      	ldr	r5, [pc, #104]	; (bb4 <process_event+0x308>)
     b4c:	f240 1365 	movw	r3, #357	; 0x165
     b50:	462a      	mov	r2, r5
     b52:	491e      	ldr	r1, [pc, #120]	; (bcc <process_event+0x320>)
     b54:	4819      	ldr	r0, [pc, #100]	; (bbc <process_event+0x310>)
     b56:	f007 ff80 	bl	8a5a <assert_print>
     b5a:	f240 1165 	movw	r1, #357	; 0x165
     b5e:	4628      	mov	r0, r5
     b60:	f007 ff74 	bl	8a4c <assert_post_action>
     b64:	e773      	b.n	a4e <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     b66:	f8df 804c 	ldr.w	r8, [pc, #76]	; bb4 <process_event+0x308>
     b6a:	f44f 73b4 	mov.w	r3, #360	; 0x168
     b6e:	4642      	mov	r2, r8
     b70:	4917      	ldr	r1, [pc, #92]	; (bd0 <process_event+0x324>)
     b72:	4812      	ldr	r0, [pc, #72]	; (bbc <process_event+0x310>)
     b74:	f007 ff71 	bl	8a5a <assert_print>
     b78:	f44f 71b4 	mov.w	r1, #360	; 0x168
     b7c:	4640      	mov	r0, r8
     b7e:	f007 ff65 	bl	8a4c <assert_post_action>
     b82:	e769      	b.n	a58 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     b84:	4d0b      	ldr	r5, [pc, #44]	; (bb4 <process_event+0x308>)
     b86:	f240 136b 	movw	r3, #363	; 0x16b
     b8a:	462a      	mov	r2, r5
     b8c:	4914      	ldr	r1, [pc, #80]	; (be0 <process_event+0x334>)
     b8e:	480b      	ldr	r0, [pc, #44]	; (bbc <process_event+0x310>)
     b90:	f007 ff63 	bl	8a5a <assert_print>
     b94:	f240 116b 	movw	r1, #363	; 0x16b
     b98:	4628      	mov	r0, r5
     b9a:	f007 ff57 	bl	8a4c <assert_post_action>
		onoff_transition_fn transit = NULL;
     b9e:	2500      	movs	r5, #0
		res = 0;
     ba0:	46a9      	mov	r9, r5
     ba2:	e6ee      	b.n	982 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     ba4:	2200      	movs	r2, #0
     ba6:	e6f7      	b.n	998 <process_event+0xec>
     ba8:	2200      	movs	r2, #0
     baa:	e6f5      	b.n	998 <process_event+0xec>
		    || (transit != NULL)) {
     bac:	2d00      	cmp	r5, #0
     bae:	f47f aef9 	bne.w	9a4 <process_event+0xf8>
     bb2:	e72a      	b.n	a0a <process_event+0x15e>
     bb4:	00009cf0 	.word	0x00009cf0
     bb8:	00009d3c 	.word	0x00009d3c
     bbc:	00009cd0 	.word	0x00009cd0
     bc0:	00009d4c 	.word	0x00009d4c
     bc4:	00000c81 	.word	0x00000c81
     bc8:	00009d60 	.word	0x00009d60
     bcc:	00009d6c 	.word	0x00009d6c
     bd0:	00009d90 	.word	0x00009d90
     bd4:	00009da8 	.word	0x00009da8
     bd8:	00009dc0 	.word	0x00009dc0
     bdc:	00009dd0 	.word	0x00009dd0
     be0:	00009ccc 	.word	0x00009ccc
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     be4:	f8df b080 	ldr.w	fp, [pc, #128]	; c68 <process_event+0x3bc>
     be8:	23b9      	movs	r3, #185	; 0xb9
     bea:	465a      	mov	r2, fp
     bec:	491f      	ldr	r1, [pc, #124]	; (c6c <process_event+0x3c0>)
     bee:	4820      	ldr	r0, [pc, #128]	; (c70 <process_event+0x3c4>)
     bf0:	f007 ff33 	bl	8a5a <assert_print>
     bf4:	4651      	mov	r1, sl
     bf6:	481f      	ldr	r0, [pc, #124]	; (c74 <process_event+0x3c8>)
     bf8:	f007 ff2f 	bl	8a5a <assert_print>
     bfc:	21b9      	movs	r1, #185	; 0xb9
     bfe:	4658      	mov	r0, fp
     c00:	f007 ff24 	bl	8a4c <assert_post_action>
     c04:	e6d9      	b.n	9ba <process_event+0x10e>
				notify_monitors(mgr, state, res);
     c06:	464a      	mov	r2, r9
     c08:	4641      	mov	r1, r8
     c0a:	4620      	mov	r0, r4
     c0c:	f007 fdb6 	bl	877c <notify_monitors>
     c10:	e6da      	b.n	9c8 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     c12:	4d15      	ldr	r5, [pc, #84]	; (c68 <process_event+0x3bc>)
     c14:	238e      	movs	r3, #142	; 0x8e
     c16:	462a      	mov	r2, r5
     c18:	4917      	ldr	r1, [pc, #92]	; (c78 <process_event+0x3cc>)
     c1a:	4815      	ldr	r0, [pc, #84]	; (c70 <process_event+0x3c4>)
     c1c:	f007 ff1d 	bl	8a5a <assert_print>
     c20:	4651      	mov	r1, sl
     c22:	4816      	ldr	r0, [pc, #88]	; (c7c <process_event+0x3d0>)
     c24:	f007 ff19 	bl	8a5a <assert_print>
     c28:	218e      	movs	r1, #142	; 0x8e
     c2a:	4628      	mov	r0, r5
     c2c:	f007 ff0e 	bl	8a4c <assert_post_action>
     c30:	e6e4      	b.n	9fc <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     c32:	f013 0f20 	tst.w	r3, #32
     c36:	d004      	beq.n	c42 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     c38:	f023 0320 	bic.w	r3, r3, #32
     c3c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     c3e:	2502      	movs	r5, #2
     c40:	e6ec      	b.n	a1c <process_event+0x170>
		evt = EVT_NOP;
     c42:	2500      	movs	r5, #0
     c44:	e6ea      	b.n	a1c <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     c46:	4d08      	ldr	r5, [pc, #32]	; (c68 <process_event+0x3bc>)
     c48:	23b9      	movs	r3, #185	; 0xb9
     c4a:	462a      	mov	r2, r5
     c4c:	4907      	ldr	r1, [pc, #28]	; (c6c <process_event+0x3c0>)
     c4e:	4808      	ldr	r0, [pc, #32]	; (c70 <process_event+0x3c4>)
     c50:	f007 ff03 	bl	8a5a <assert_print>
     c54:	4621      	mov	r1, r4
     c56:	4807      	ldr	r0, [pc, #28]	; (c74 <process_event+0x3c8>)
     c58:	f007 feff 	bl	8a5a <assert_print>
     c5c:	21b9      	movs	r1, #185	; 0xb9
     c5e:	4628      	mov	r0, r5
     c60:	f007 fef4 	bl	8a4c <assert_post_action>
     c64:	e653      	b.n	90e <process_event+0x62>
     c66:	bf00      	nop
     c68:	00009de8 	.word	0x00009de8
     c6c:	00009e18 	.word	0x00009e18
     c70:	00009cd0 	.word	0x00009cd0
     c74:	00009e30 	.word	0x00009e30
     c78:	00009e48 	.word	0x00009e48
     c7c:	00009e60 	.word	0x00009e60

00000c80 <transition_complete>:
{
     c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c84:	4604      	mov	r4, r0
     c86:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     c88:	f100 0614 	add.w	r6, r0, #20
     c8c:	f04f 0320 	mov.w	r3, #32
     c90:	f3ef 8711 	mrs	r7, BASEPRI
     c94:	f383 8812 	msr	BASEPRI_MAX, r3
     c98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     c9c:	4630      	mov	r0, r6
     c9e:	f005 f81d 	bl	5cdc <z_spin_lock_valid>
     ca2:	b150      	cbz	r0, cba <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
     ca4:	4630      	mov	r0, r6
     ca6:	f005 f839 	bl	5d1c <z_spin_lock_set_owner>
	mgr->last_res = res;
     caa:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     cac:	463a      	mov	r2, r7
     cae:	2101      	movs	r1, #1
     cb0:	4620      	mov	r0, r4
     cb2:	f7ff fdfb 	bl	8ac <process_event>
}
     cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     cba:	f8df 8020 	ldr.w	r8, [pc, #32]	; cdc <transition_complete+0x5c>
     cbe:	238e      	movs	r3, #142	; 0x8e
     cc0:	4642      	mov	r2, r8
     cc2:	4907      	ldr	r1, [pc, #28]	; (ce0 <transition_complete+0x60>)
     cc4:	4807      	ldr	r0, [pc, #28]	; (ce4 <transition_complete+0x64>)
     cc6:	f007 fec8 	bl	8a5a <assert_print>
     cca:	4631      	mov	r1, r6
     ccc:	4806      	ldr	r0, [pc, #24]	; (ce8 <transition_complete+0x68>)
     cce:	f007 fec4 	bl	8a5a <assert_print>
     cd2:	218e      	movs	r1, #142	; 0x8e
     cd4:	4640      	mov	r0, r8
     cd6:	f007 feb9 	bl	8a4c <assert_post_action>
     cda:	e7e3      	b.n	ca4 <transition_complete+0x24>
     cdc:	00009de8 	.word	0x00009de8
     ce0:	00009e48 	.word	0x00009e48
     ce4:	00009cd0 	.word	0x00009cd0
     ce8:	00009e60 	.word	0x00009e60

00000cec <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cf0:	4604      	mov	r4, r0
     cf2:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     cf4:	f007 fd7a 	bl	87ec <validate_args>

	if (rv < 0) {
     cf8:	1e06      	subs	r6, r0, #0
     cfa:	db58      	blt.n	dae <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     cfc:	f104 0714 	add.w	r7, r4, #20
     d00:	f04f 0320 	mov.w	r3, #32
     d04:	f3ef 8911 	mrs	r9, BASEPRI
     d08:	f383 8812 	msr	BASEPRI_MAX, r3
     d0c:	f3bf 8f6f 	isb	sy
     d10:	4638      	mov	r0, r7
     d12:	f004 ffe3 	bl	5cdc <z_spin_lock_valid>
     d16:	b1e8      	cbz	r0, d54 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
     d18:	4638      	mov	r0, r7
     d1a:	f004 ffff 	bl	5d1c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d1e:	8ba5      	ldrh	r5, [r4, #28]
     d20:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     d24:	8be3      	ldrh	r3, [r4, #30]
     d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d2a:	4293      	cmp	r3, r2
     d2c:	d056      	beq.n	ddc <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
     d2e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
     d30:	2d02      	cmp	r5, #2
     d32:	d01f      	beq.n	d74 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
     d34:	b32d      	cbz	r5, d82 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
     d36:	2d04      	cmp	r5, #4
     d38:	d023      	beq.n	d82 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
     d3a:	2d06      	cmp	r5, #6
     d3c:	d021      	beq.n	d82 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
     d3e:	2d05      	cmp	r5, #5
     d40:	d053      	beq.n	dea <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     d42:	2d01      	cmp	r5, #1
     d44:	d136      	bne.n	db4 <onoff_request+0xc8>
		rv = -EIO;
     d46:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     d4a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     d4e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     d50:	4652      	mov	r2, sl
     d52:	e01c      	b.n	d8e <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d54:	4d3c      	ldr	r5, [pc, #240]	; (e48 <onoff_request+0x15c>)
     d56:	238e      	movs	r3, #142	; 0x8e
     d58:	462a      	mov	r2, r5
     d5a:	493c      	ldr	r1, [pc, #240]	; (e4c <onoff_request+0x160>)
     d5c:	483c      	ldr	r0, [pc, #240]	; (e50 <onoff_request+0x164>)
     d5e:	f007 fe7c 	bl	8a5a <assert_print>
     d62:	4639      	mov	r1, r7
     d64:	483b      	ldr	r0, [pc, #236]	; (e54 <onoff_request+0x168>)
     d66:	f007 fe78 	bl	8a5a <assert_print>
     d6a:	218e      	movs	r1, #142	; 0x8e
     d6c:	4628      	mov	r0, r5
     d6e:	f007 fe6d 	bl	8a4c <assert_post_action>
     d72:	e7d1      	b.n	d18 <onoff_request+0x2c>
		mgr->refs += 1U;
     d74:	3301      	adds	r3, #1
     d76:	83e3      	strh	r3, [r4, #30]
		notify = true;
     d78:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
     d7c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
     d7e:	461a      	mov	r2, r3
     d80:	e005      	b.n	d8e <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
     d82:	fab5 f385 	clz	r3, r5
     d86:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
     d88:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
     d8c:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
     d8e:	b142      	cbz	r2, da2 <onoff_request+0xb6>
	parent->next = child;
     d90:	2200      	movs	r2, #0
     d92:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
     d96:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     d98:	b372      	cbz	r2, df8 <onoff_request+0x10c>
	parent->next = child;
     d9a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
     d9e:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
     da2:	b373      	cbz	r3, e02 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
     da4:	464a      	mov	r2, r9
     da6:	2102      	movs	r1, #2
     da8:	4620      	mov	r0, r4
     daa:	f7ff fd7f 	bl	8ac <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
     dae:	4630      	mov	r0, r6
     db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     db4:	4e28      	ldr	r6, [pc, #160]	; (e58 <onoff_request+0x16c>)
     db6:	f240 13c9 	movw	r3, #457	; 0x1c9
     dba:	4632      	mov	r2, r6
     dbc:	4927      	ldr	r1, [pc, #156]	; (e5c <onoff_request+0x170>)
     dbe:	4824      	ldr	r0, [pc, #144]	; (e50 <onoff_request+0x164>)
     dc0:	f007 fe4b 	bl	8a5a <assert_print>
     dc4:	f240 11c9 	movw	r1, #457	; 0x1c9
     dc8:	4630      	mov	r0, r6
     dca:	f007 fe3f 	bl	8a4c <assert_post_action>
		rv = -EIO;
     dce:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
     dd2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     dd6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     dd8:	4652      	mov	r2, sl
     dda:	e7d8      	b.n	d8e <onoff_request+0xa2>
		rv = -EAGAIN;
     ddc:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
     de0:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     de4:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     de6:	4652      	mov	r2, sl
     de8:	e7d1      	b.n	d8e <onoff_request+0xa2>
		rv = -ENOTSUP;
     dea:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
     dee:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
     df2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
     df4:	4652      	mov	r2, sl
     df6:	e7ca      	b.n	d8e <onoff_request+0xa2>
     df8:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
     dfc:	f8c4 8000 	str.w	r8, [r4]
}
     e00:	e7cf      	b.n	da2 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e02:	4638      	mov	r0, r7
     e04:	f004 ff7a 	bl	5cfc <z_spin_unlock_valid>
     e08:	b168      	cbz	r0, e26 <onoff_request+0x13a>
	__asm__ volatile(
     e0a:	f389 8811 	msr	BASEPRI, r9
     e0e:	f3bf 8f6f 	isb	sy
		if (notify) {
     e12:	f1ba 0f00 	cmp.w	sl, #0
     e16:	d0ca      	beq.n	dae <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
     e18:	2300      	movs	r3, #0
     e1a:	462a      	mov	r2, r5
     e1c:	4641      	mov	r1, r8
     e1e:	4620      	mov	r0, r4
     e20:	f007 fcfa 	bl	8818 <notify_one>
     e24:	e7c3      	b.n	dae <onoff_request+0xc2>
     e26:	f8df b020 	ldr.w	fp, [pc, #32]	; e48 <onoff_request+0x15c>
     e2a:	23b9      	movs	r3, #185	; 0xb9
     e2c:	465a      	mov	r2, fp
     e2e:	490c      	ldr	r1, [pc, #48]	; (e60 <onoff_request+0x174>)
     e30:	4807      	ldr	r0, [pc, #28]	; (e50 <onoff_request+0x164>)
     e32:	f007 fe12 	bl	8a5a <assert_print>
     e36:	4639      	mov	r1, r7
     e38:	480a      	ldr	r0, [pc, #40]	; (e64 <onoff_request+0x178>)
     e3a:	f007 fe0e 	bl	8a5a <assert_print>
     e3e:	21b9      	movs	r1, #185	; 0xb9
     e40:	4658      	mov	r0, fp
     e42:	f007 fe03 	bl	8a4c <assert_post_action>
     e46:	e7e0      	b.n	e0a <onoff_request+0x11e>
     e48:	00009de8 	.word	0x00009de8
     e4c:	00009e48 	.word	0x00009e48
     e50:	00009cd0 	.word	0x00009cd0
     e54:	00009e60 	.word	0x00009e60
     e58:	00009cf0 	.word	0x00009cf0
     e5c:	00009dd0 	.word	0x00009dd0
     e60:	00009e18 	.word	0x00009e18
     e64:	00009e30 	.word	0x00009e30

00000e68 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
     e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e6c:	4606      	mov	r6, r0
     e6e:	460d      	mov	r5, r1
     e70:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     e72:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
     e76:	d222      	bcs.n	ebe <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     e78:	2c04      	cmp	r4, #4
     e7a:	d931      	bls.n	ee0 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
     e7c:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     e7e:	1dec      	adds	r4, r5, #7
     e80:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     e84:	4415      	add	r5, r2
     e86:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     e8a:	1b2d      	subs	r5, r5, r4
     e8c:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     e90:	2d17      	cmp	r5, #23
     e92:	d936      	bls.n	f02 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
     e94:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
     e96:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
     e9e:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     ea2:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     ea6:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
     eaa:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     eac:	3607      	adds	r6, #7
     eae:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     eb2:	f109 0301 	add.w	r3, r9, #1
     eb6:	4543      	cmp	r3, r8
     eb8:	d834      	bhi.n	f24 <sys_heap_init+0xbc>
{
     eba:	2300      	movs	r3, #0
     ebc:	e049      	b.n	f52 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     ebe:	4f38      	ldr	r7, [pc, #224]	; (fa0 <sys_heap_init+0x138>)
     ec0:	f240 13e3 	movw	r3, #483	; 0x1e3
     ec4:	463a      	mov	r2, r7
     ec6:	4937      	ldr	r1, [pc, #220]	; (fa4 <sys_heap_init+0x13c>)
     ec8:	4837      	ldr	r0, [pc, #220]	; (fa8 <sys_heap_init+0x140>)
     eca:	f007 fdc6 	bl	8a5a <assert_print>
     ece:	4837      	ldr	r0, [pc, #220]	; (fac <sys_heap_init+0x144>)
     ed0:	f007 fdc3 	bl	8a5a <assert_print>
     ed4:	f240 11e3 	movw	r1, #483	; 0x1e3
     ed8:	4638      	mov	r0, r7
     eda:	f007 fdb7 	bl	8a4c <assert_post_action>
     ede:	e7cb      	b.n	e78 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     ee0:	4f2f      	ldr	r7, [pc, #188]	; (fa0 <sys_heap_init+0x138>)
     ee2:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
     ee6:	463a      	mov	r2, r7
     ee8:	4931      	ldr	r1, [pc, #196]	; (fb0 <sys_heap_init+0x148>)
     eea:	482f      	ldr	r0, [pc, #188]	; (fa8 <sys_heap_init+0x140>)
     eec:	f007 fdb5 	bl	8a5a <assert_print>
     ef0:	4830      	ldr	r0, [pc, #192]	; (fb4 <sys_heap_init+0x14c>)
     ef2:	f007 fdb2 	bl	8a5a <assert_print>
     ef6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
     efa:	4638      	mov	r0, r7
     efc:	f007 fda6 	bl	8a4c <assert_post_action>
     f00:	e7bc      	b.n	e7c <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     f02:	4f27      	ldr	r7, [pc, #156]	; (fa0 <sys_heap_init+0x138>)
     f04:	f240 13f3 	movw	r3, #499	; 0x1f3
     f08:	463a      	mov	r2, r7
     f0a:	492b      	ldr	r1, [pc, #172]	; (fb8 <sys_heap_init+0x150>)
     f0c:	4826      	ldr	r0, [pc, #152]	; (fa8 <sys_heap_init+0x140>)
     f0e:	f007 fda4 	bl	8a5a <assert_print>
     f12:	4828      	ldr	r0, [pc, #160]	; (fb4 <sys_heap_init+0x14c>)
     f14:	f007 fda1 	bl	8a5a <assert_print>
     f18:	f240 11f3 	movw	r1, #499	; 0x1f3
     f1c:	4638      	mov	r0, r7
     f1e:	f007 fd95 	bl	8a4c <assert_post_action>
     f22:	e7b7      	b.n	e94 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     f24:	f8df a078 	ldr.w	sl, [pc, #120]	; fa0 <sys_heap_init+0x138>
     f28:	f44f 7301 	mov.w	r3, #516	; 0x204
     f2c:	4652      	mov	r2, sl
     f2e:	4923      	ldr	r1, [pc, #140]	; (fbc <sys_heap_init+0x154>)
     f30:	481d      	ldr	r0, [pc, #116]	; (fa8 <sys_heap_init+0x140>)
     f32:	f007 fd92 	bl	8a5a <assert_print>
     f36:	481f      	ldr	r0, [pc, #124]	; (fb4 <sys_heap_init+0x14c>)
     f38:	f007 fd8f 	bl	8a5a <assert_print>
     f3c:	f44f 7101 	mov.w	r1, #516	; 0x204
     f40:	4650      	mov	r0, sl
     f42:	f007 fd83 	bl	8a4c <assert_post_action>
     f46:	e7b8      	b.n	eba <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
     f48:	1d1a      	adds	r2, r3, #4
     f4a:	2100      	movs	r1, #0
     f4c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
     f50:	3301      	adds	r3, #1
     f52:	42bb      	cmp	r3, r7
     f54:	dbf8      	blt.n	f48 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     f56:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
     f5a:	b29b      	uxth	r3, r3
     f5c:	8063      	strh	r3, [r4, #2]
     f5e:	2200      	movs	r2, #0
     f60:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     f62:	f043 0301 	orr.w	r3, r3, #1
     f66:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     f68:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     f6c:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
     f70:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
     f74:	1cb3      	adds	r3, r6, #2
     f76:	52e1      	strh	r1, [r4, r3]
     f78:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
     f7c:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
     f80:	1ca9      	adds	r1, r5, #2
     f82:	5262      	strh	r2, [r4, r1]
     f84:	4425      	add	r5, r4
     f86:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     f8a:	886b      	ldrh	r3, [r5, #2]
     f8c:	f043 0301 	orr.w	r3, r3, #1
     f90:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
     f92:	4649      	mov	r1, r9
     f94:	4620      	mov	r0, r4
     f96:	f007 fcb7 	bl	8908 <free_list_add>
}
     f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f9e:	bf00      	nop
     fa0:	00009e78 	.word	0x00009e78
     fa4:	00009f4c 	.word	0x00009f4c
     fa8:	00009cd0 	.word	0x00009cd0
     fac:	00009f64 	.word	0x00009f64
     fb0:	00009f7c 	.word	0x00009f7c
     fb4:	00009fa0 	.word	0x00009fa0
     fb8:	00009fbc 	.word	0x00009fbc
     fbc:	00009fe8 	.word	0x00009fe8

00000fc0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     fc6:	2300      	movs	r3, #0
     fc8:	6003      	str	r3, [r0, #0]
     fca:	6043      	str	r3, [r0, #4]
     fcc:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     fce:	784b      	ldrb	r3, [r1, #1]
     fd0:	2b25      	cmp	r3, #37	; 0x25
     fd2:	d002      	beq.n	fda <extract_conversion+0x1a>
     fd4:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     fd6:	2501      	movs	r5, #1
     fd8:	e01f      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		conv->specifier = *sp++;
     fda:	1c88      	adds	r0, r1, #2
     fdc:	70e3      	strb	r3, [r4, #3]
		return sp;
     fde:	e145      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
			conv->flag_dash = true;
     fe0:	7823      	ldrb	r3, [r4, #0]
     fe2:	f043 0304 	orr.w	r3, r3, #4
     fe6:	7023      	strb	r3, [r4, #0]
		if (loop) {
     fe8:	b1b5      	cbz	r5, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			++sp;
     fea:	3601      	adds	r6, #1
     fec:	e014      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			conv->flag_plus = true;
     fee:	7823      	ldrb	r3, [r4, #0]
     ff0:	f043 0308 	orr.w	r3, r3, #8
     ff4:	7023      	strb	r3, [r4, #0]
			break;
     ff6:	e7f7      	b.n	fe8 <extract_conversion+0x28>
			conv->flag_space = true;
     ff8:	7823      	ldrb	r3, [r4, #0]
     ffa:	f043 0310 	orr.w	r3, r3, #16
     ffe:	7023      	strb	r3, [r4, #0]
			break;
    1000:	e7f2      	b.n	fe8 <extract_conversion+0x28>
			conv->flag_hash = true;
    1002:	7823      	ldrb	r3, [r4, #0]
    1004:	f043 0320 	orr.w	r3, r3, #32
    1008:	7023      	strb	r3, [r4, #0]
			break;
    100a:	e7ed      	b.n	fe8 <extract_conversion+0x28>
			conv->flag_zero = true;
    100c:	7823      	ldrb	r3, [r4, #0]
    100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1012:	7023      	strb	r3, [r4, #0]
			break;
    1014:	e7e8      	b.n	fe8 <extract_conversion+0x28>
		switch (*sp) {
    1016:	2500      	movs	r5, #0
	} while (loop);
    1018:	b345      	cbz	r5, 106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		switch (*sp) {
    101a:	7833      	ldrb	r3, [r6, #0]
    101c:	3b20      	subs	r3, #32
    101e:	2b10      	cmp	r3, #16
    1020:	d8f9      	bhi.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1022:	a201      	add	r2, pc, #4	; (adr r2, 1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    1024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1028:	00000ff9 	.word	0x00000ff9
    102c:	00001017 	.word	0x00001017
    1030:	00001017 	.word	0x00001017
    1034:	00001003 	.word	0x00001003
    1038:	00001017 	.word	0x00001017
    103c:	00001017 	.word	0x00001017
    1040:	00001017 	.word	0x00001017
    1044:	00001017 	.word	0x00001017
    1048:	00001017 	.word	0x00001017
    104c:	00001017 	.word	0x00001017
    1050:	00001017 	.word	0x00001017
    1054:	00000fef 	.word	0x00000fef
    1058:	00001017 	.word	0x00001017
    105c:	00000fe1 	.word	0x00000fe1
    1060:	00001017 	.word	0x00001017
    1064:	00001017 	.word	0x00001017
    1068:	0000100d 	.word	0x0000100d
	if (conv->flag_zero && conv->flag_dash) {
    106c:	7823      	ldrb	r3, [r4, #0]
    106e:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1072:	2b44      	cmp	r3, #68	; 0x44
    1074:	d05f      	beq.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1076:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1078:	7823      	ldrb	r3, [r4, #0]
    107a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    107e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1080:	7833      	ldrb	r3, [r6, #0]
    1082:	2b2a      	cmp	r3, #42	; 0x2a
    1084:	d05c      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
	size_t width = extract_decimal(&sp);
    1086:	a801      	add	r0, sp, #4
    1088:	f007 fc4a 	bl	8920 <extract_decimal>
	if (sp != wp) {
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	429e      	cmp	r6, r3
    1090:	d00f      	beq.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
		conv->width_present = true;
    1092:	7823      	ldrb	r3, [r4, #0]
    1094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1098:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    109a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    109c:	b2db      	uxtb	r3, r3
    109e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    10a2:	2800      	cmp	r0, #0
    10a4:	db54      	blt.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
    10a6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    10a8:	4313      	orrs	r3, r2
    10aa:	7822      	ldrb	r2, [r4, #0]
    10ac:	f363 0241 	bfi	r2, r3, #1, #1
    10b0:	7022      	strb	r2, [r4, #0]
	return sp;
    10b2:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    10b4:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	2b2e      	cmp	r3, #46	; 0x2e
    10ba:	bf14      	ite	ne
    10bc:	2300      	movne	r3, #0
    10be:	2301      	moveq	r3, #1
    10c0:	7862      	ldrb	r2, [r4, #1]
    10c2:	f363 0241 	bfi	r2, r3, #1, #1
    10c6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    10c8:	2b00      	cmp	r3, #0
    10ca:	d043      	beq.n	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
	++sp;
    10cc:	9b01      	ldr	r3, [sp, #4]
    10ce:	1c5a      	adds	r2, r3, #1
    10d0:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    10d2:	785b      	ldrb	r3, [r3, #1]
    10d4:	2b2a      	cmp	r3, #42	; 0x2a
    10d6:	d03f      	beq.n	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
	size_t prec = extract_decimal(&sp);
    10d8:	a801      	add	r0, sp, #4
    10da:	f007 fc21 	bl	8920 <extract_decimal>
	conv->prec_value = prec;
    10de:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    10e0:	7823      	ldrb	r3, [r4, #0]
    10e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    10e6:	2800      	cmp	r0, #0
    10e8:	db3e      	blt.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    10ea:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    10ec:	4313      	orrs	r3, r2
    10ee:	7822      	ldrb	r2, [r4, #0]
    10f0:	f363 0241 	bfi	r2, r3, #1, #1
    10f4:	7022      	strb	r2, [r4, #0]
	return sp;
    10f6:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    10f8:	7803      	ldrb	r3, [r0, #0]
    10fa:	3b4c      	subs	r3, #76	; 0x4c
    10fc:	2b2e      	cmp	r3, #46	; 0x2e
    10fe:	f200 809d 	bhi.w	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1102:	e8df f003 	tbb	[pc, r3]
    1106:	9b90      	.short	0x9b90
    1108:	9b9b9b9b 	.word	0x9b9b9b9b
    110c:	9b9b9b9b 	.word	0x9b9b9b9b
    1110:	9b9b9b9b 	.word	0x9b9b9b9b
    1114:	9b9b9b9b 	.word	0x9b9b9b9b
    1118:	9b9b9b9b 	.word	0x9b9b9b9b
    111c:	9b9b9b9b 	.word	0x9b9b9b9b
    1120:	9b339b9b 	.word	0x9b339b9b
    1124:	9b459b57 	.word	0x9b459b57
    1128:	9b9b9b9b 	.word	0x9b9b9b9b
    112c:	9b899b9b 	.word	0x9b899b9b
    1130:	9b9b9b9b 	.word	0x9b9b9b9b
    1134:	82          	.byte	0x82
    1135:	00          	.byte	0x00
		conv->flag_zero = false;
    1136:	7823      	ldrb	r3, [r4, #0]
    1138:	f36f 1386 	bfc	r3, #6, #1
    113c:	7023      	strb	r3, [r4, #0]
    113e:	e79a      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
		conv->width_star = true;
    1140:	7863      	ldrb	r3, [r4, #1]
    1142:	f043 0301 	orr.w	r3, r3, #1
    1146:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1148:	4633      	mov	r3, r6
    114a:	3301      	adds	r3, #1
    114c:	9301      	str	r3, [sp, #4]
    114e:	e7b1      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
				      || (width != (size_t)conv->width_value));
    1150:	2201      	movs	r2, #1
    1152:	e7a9      	b.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
		return sp;
    1154:	9801      	ldr	r0, [sp, #4]
    1156:	e7cf      	b.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
		conv->prec_star = true;
    1158:	7863      	ldrb	r3, [r4, #1]
    115a:	f043 0304 	orr.w	r3, r3, #4
    115e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1160:	4610      	mov	r0, r2
    1162:	3001      	adds	r0, #1
    1164:	9001      	str	r0, [sp, #4]
    1166:	e7c7      	b.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
			      || (prec != (size_t)conv->prec_value));
    1168:	2201      	movs	r2, #1
    116a:	e7bf      	b.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
		if (*++sp == 'h') {
    116c:	1c42      	adds	r2, r0, #1
    116e:	7843      	ldrb	r3, [r0, #1]
    1170:	2b68      	cmp	r3, #104	; 0x68
    1172:	d006      	beq.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
			conv->length_mod = LENGTH_H;
    1174:	7863      	ldrb	r3, [r4, #1]
    1176:	2102      	movs	r1, #2
    1178:	f361 03c6 	bfi	r3, r1, #3, #4
    117c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    117e:	4610      	mov	r0, r2
    1180:	e01e      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
			conv->length_mod = LENGTH_HH;
    1182:	7863      	ldrb	r3, [r4, #1]
    1184:	2201      	movs	r2, #1
    1186:	f362 03c6 	bfi	r3, r2, #3, #4
    118a:	7063      	strb	r3, [r4, #1]
			++sp;
    118c:	3002      	adds	r0, #2
    118e:	e017      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		if (*++sp == 'l') {
    1190:	1c42      	adds	r2, r0, #1
    1192:	7843      	ldrb	r3, [r0, #1]
    1194:	2b6c      	cmp	r3, #108	; 0x6c
    1196:	d006      	beq.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
			conv->length_mod = LENGTH_L;
    1198:	7863      	ldrb	r3, [r4, #1]
    119a:	2103      	movs	r1, #3
    119c:	f361 03c6 	bfi	r3, r1, #3, #4
    11a0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    11a2:	4610      	mov	r0, r2
    11a4:	e00c      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
			conv->length_mod = LENGTH_LL;
    11a6:	7863      	ldrb	r3, [r4, #1]
    11a8:	2204      	movs	r2, #4
    11aa:	f362 03c6 	bfi	r3, r2, #3, #4
    11ae:	7063      	strb	r3, [r4, #1]
			++sp;
    11b0:	3002      	adds	r0, #2
    11b2:	e005      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		conv->length_mod = LENGTH_J;
    11b4:	7863      	ldrb	r3, [r4, #1]
    11b6:	2205      	movs	r2, #5
    11b8:	f362 03c6 	bfi	r3, r2, #3, #4
    11bc:	7063      	strb	r3, [r4, #1]
		++sp;
    11be:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    11c0:	f810 3b01 	ldrb.w	r3, [r0], #1
    11c4:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    11c6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    11ca:	2a37      	cmp	r2, #55	; 0x37
    11cc:	d87d      	bhi.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    11ce:	e8df f002 	tbb	[pc, r2]
    11d2:	7c5e      	.short	0x7c5e
    11d4:	5e5e7c7c 	.word	0x5e5e7c7c
    11d8:	7c7c7c5e 	.word	0x7c7c7c5e
    11dc:	7c7c7c7c 	.word	0x7c7c7c7c
    11e0:	7c7c7c7c 	.word	0x7c7c7c7c
    11e4:	7c7c7c7c 	.word	0x7c7c7c7c
    11e8:	7c7c4f7c 	.word	0x7c7c4f7c
    11ec:	7c7c7c7c 	.word	0x7c7c7c7c
    11f0:	7c5e7c7c 	.word	0x7c5e7c7c
    11f4:	5e5e3a4f 	.word	0x5e5e3a4f
    11f8:	7c3a7c5e 	.word	0x7c3a7c5e
    11fc:	657c7c7c 	.word	0x657c7c7c
    1200:	7c7c714f 	.word	0x7c7c714f
    1204:	7c4f7c71 	.word	0x7c4f7c71
    1208:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    120a:	7863      	ldrb	r3, [r4, #1]
    120c:	2206      	movs	r2, #6
    120e:	f362 03c6 	bfi	r3, r2, #3, #4
    1212:	7063      	strb	r3, [r4, #1]
		++sp;
    1214:	3001      	adds	r0, #1
		break;
    1216:	e7d3      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		conv->length_mod = LENGTH_T;
    1218:	7863      	ldrb	r3, [r4, #1]
    121a:	2207      	movs	r2, #7
    121c:	f362 03c6 	bfi	r3, r2, #3, #4
    1220:	7063      	strb	r3, [r4, #1]
		++sp;
    1222:	3001      	adds	r0, #1
		break;
    1224:	e7cc      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		conv->length_mod = LENGTH_UPPER_L;
    1226:	7863      	ldrb	r3, [r4, #1]
    1228:	2208      	movs	r2, #8
    122a:	f362 03c6 	bfi	r3, r2, #3, #4
    122e:	7063      	strb	r3, [r4, #1]
		++sp;
    1230:	3001      	adds	r0, #1
		conv->unsupported = true;
    1232:	7823      	ldrb	r3, [r4, #0]
    1234:	f043 0302 	orr.w	r3, r3, #2
    1238:	7023      	strb	r3, [r4, #0]
		break;
    123a:	e7c1      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		conv->length_mod = LENGTH_NONE;
    123c:	7863      	ldrb	r3, [r4, #1]
    123e:	f36f 03c6 	bfc	r3, #3, #4
    1242:	7063      	strb	r3, [r4, #1]
		break;
    1244:	e7bc      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		conv->specifier_cat = SPECIFIER_SINT;
    1246:	78a2      	ldrb	r2, [r4, #2]
    1248:	2101      	movs	r1, #1
    124a:	f361 0202 	bfi	r2, r1, #0, #3
    124e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1250:	7862      	ldrb	r2, [r4, #1]
    1252:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1256:	2a40      	cmp	r2, #64	; 0x40
    1258:	d010      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
		if (conv->specifier == 'c') {
    125a:	2b63      	cmp	r3, #99	; 0x63
    125c:	d013      	beq.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
	conv->unsupported |= unsupported;
    125e:	7823      	ldrb	r3, [r4, #0]
    1260:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1264:	4315      	orrs	r5, r2
    1266:	f365 0341 	bfi	r3, r5, #1, #1
    126a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    126c:	b002      	add	sp, #8
    126e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1270:	78a2      	ldrb	r2, [r4, #2]
    1272:	2102      	movs	r1, #2
    1274:	f361 0202 	bfi	r2, r1, #0, #3
    1278:	70a2      	strb	r2, [r4, #2]
    127a:	e7e9      	b.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
			conv->invalid = true;
    127c:	7821      	ldrb	r1, [r4, #0]
    127e:	f041 0101 	orr.w	r1, r1, #1
    1282:	7021      	strb	r1, [r4, #0]
    1284:	e7e9      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1286:	1e15      	subs	r5, r2, #0
    1288:	bf18      	it	ne
    128a:	2501      	movne	r5, #1
    128c:	e7e7      	b.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
		conv->specifier_cat = SPECIFIER_FP;
    128e:	78a3      	ldrb	r3, [r4, #2]
    1290:	2204      	movs	r2, #4
    1292:	f362 0302 	bfi	r3, r2, #0, #3
    1296:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1298:	2501      	movs	r5, #1
			break;
    129a:	e7e0      	b.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
		conv->specifier_cat = SPECIFIER_PTR;
    129c:	78a3      	ldrb	r3, [r4, #2]
    129e:	2203      	movs	r2, #3
    12a0:	f362 0302 	bfi	r3, r2, #0, #3
    12a4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    12a6:	7863      	ldrb	r3, [r4, #1]
    12a8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    12ac:	2b40      	cmp	r3, #64	; 0x40
    12ae:	d1d6      	bne.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
			unsupported = true;
    12b0:	2501      	movs	r5, #1
    12b2:	e7d4      	b.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
		conv->specifier_cat = SPECIFIER_PTR;
    12b4:	78a3      	ldrb	r3, [r4, #2]
    12b6:	2203      	movs	r2, #3
    12b8:	f362 0302 	bfi	r3, r2, #0, #3
    12bc:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    12be:	7863      	ldrb	r3, [r4, #1]
    12c0:	f013 0f78 	tst.w	r3, #120	; 0x78
    12c4:	d0cb      	beq.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
			unsupported = true;
    12c6:	2501      	movs	r5, #1
    12c8:	e7c9      	b.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
		conv->invalid = true;
    12ca:	7823      	ldrb	r3, [r4, #0]
    12cc:	f043 0301 	orr.w	r3, r3, #1
    12d0:	7023      	strb	r3, [r4, #0]
		break;
    12d2:	e7c4      	b.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>

000012d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    12d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12d8:	b091      	sub	sp, #68	; 0x44
    12da:	4606      	mov	r6, r0
    12dc:	460d      	mov	r5, r1
    12de:	4691      	mov	r9, r2
    12e0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    12e2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    12e4:	f899 0000 	ldrb.w	r0, [r9]
    12e8:	2800      	cmp	r0, #0
    12ea:	f000 82d5 	beq.w	1898 <cbvprintf+0x5c4>
		if (*fp != '%') {
    12ee:	2825      	cmp	r0, #37	; 0x25
    12f0:	d008      	beq.n	1304 <cbvprintf+0x30>
			OUTC(*fp++);
    12f2:	f109 0901 	add.w	r9, r9, #1
    12f6:	4629      	mov	r1, r5
    12f8:	47b0      	blx	r6
    12fa:	2800      	cmp	r0, #0
    12fc:	f2c0 82cd 	blt.w	189a <cbvprintf+0x5c6>
    1300:	3401      	adds	r4, #1
			continue;
    1302:	e7ef      	b.n	12e4 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1304:	2300      	movs	r3, #0
    1306:	9304      	str	r3, [sp, #16]
    1308:	9305      	str	r3, [sp, #20]
    130a:	9306      	str	r3, [sp, #24]
    130c:	9307      	str	r3, [sp, #28]
    130e:	9308      	str	r3, [sp, #32]
    1310:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1312:	4649      	mov	r1, r9
    1314:	a806      	add	r0, sp, #24
    1316:	f7ff fe53 	bl	fc0 <extract_conversion>
    131a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    131c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1320:	f013 0f01 	tst.w	r3, #1
    1324:	f000 8097 	beq.w	1456 <cbvprintf+0x182>
			width = va_arg(ap, int);
    1328:	9b03      	ldr	r3, [sp, #12]
    132a:	1d1a      	adds	r2, r3, #4
    132c:	9203      	str	r2, [sp, #12]
    132e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1330:	2f00      	cmp	r7, #0
    1332:	f2c0 8088 	blt.w	1446 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1336:	f89d 3019 	ldrb.w	r3, [sp, #25]
    133a:	f013 0f04 	tst.w	r3, #4
    133e:	f000 809c 	beq.w	147a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    1342:	9b03      	ldr	r3, [sp, #12]
    1344:	1d1a      	adds	r2, r3, #4
    1346:	9203      	str	r2, [sp, #12]
    1348:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    134c:	f1ba 0f00 	cmp.w	sl, #0
    1350:	f2c0 808a 	blt.w	1468 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1354:	2300      	movs	r3, #0
    1356:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1358:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    135a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    135e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1362:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1366:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    136a:	2b01      	cmp	r3, #1
    136c:	f000 808e 	beq.w	148c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1370:	2b02      	cmp	r3, #2
    1372:	f000 80d3 	beq.w	151c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1376:	2b04      	cmp	r3, #4
    1378:	f000 8124 	beq.w	15c4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    137c:	2b03      	cmp	r3, #3
    137e:	f000 813b 	beq.w	15f8 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1382:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1386:	f018 0b03 	ands.w	fp, r8, #3
    138a:	f040 813b 	bne.w	1604 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    138e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1392:	3b25      	subs	r3, #37	; 0x25
    1394:	2b53      	cmp	r3, #83	; 0x53
    1396:	f200 81e6 	bhi.w	1766 <cbvprintf+0x492>
    139a:	e8df f013 	tbh	[pc, r3, lsl #1]
    139e:	0140      	.short	0x0140
    13a0:	01e401e4 	.word	0x01e401e4
    13a4:	01e401e4 	.word	0x01e401e4
    13a8:	01e401e4 	.word	0x01e401e4
    13ac:	01e401e4 	.word	0x01e401e4
    13b0:	01e401e4 	.word	0x01e401e4
    13b4:	01e401e4 	.word	0x01e401e4
    13b8:	01e401e4 	.word	0x01e401e4
    13bc:	01e401e4 	.word	0x01e401e4
    13c0:	01e401e4 	.word	0x01e401e4
    13c4:	01e401e4 	.word	0x01e401e4
    13c8:	01e401e4 	.word	0x01e401e4
    13cc:	01e401e4 	.word	0x01e401e4
    13d0:	01e401e4 	.word	0x01e401e4
    13d4:	01e401e4 	.word	0x01e401e4
    13d8:	01e401e4 	.word	0x01e401e4
    13dc:	01e401e4 	.word	0x01e401e4
    13e0:	01e401e4 	.word	0x01e401e4
    13e4:	01e401e4 	.word	0x01e401e4
    13e8:	01e401e4 	.word	0x01e401e4
    13ec:	01e401e4 	.word	0x01e401e4
    13f0:	01e401e4 	.word	0x01e401e4
    13f4:	01e401e4 	.word	0x01e401e4
    13f8:	01e401e4 	.word	0x01e401e4
    13fc:	01e401e4 	.word	0x01e401e4
    1400:	01e401e4 	.word	0x01e401e4
    1404:	01e40181 	.word	0x01e40181
    1408:	01e401e4 	.word	0x01e401e4
    140c:	01e401e4 	.word	0x01e401e4
    1410:	01e401e4 	.word	0x01e401e4
    1414:	01e401e4 	.word	0x01e401e4
    1418:	015e01e4 	.word	0x015e01e4
    141c:	01e40167 	.word	0x01e40167
    1420:	01e401e4 	.word	0x01e401e4
    1424:	016701e4 	.word	0x016701e4
    1428:	01e401e4 	.word	0x01e401e4
    142c:	01e401e4 	.word	0x01e401e4
    1430:	018101be 	.word	0x018101be
    1434:	01e401a2 	.word	0x01e401a2
    1438:	014d01e4 	.word	0x014d01e4
    143c:	018101e4 	.word	0x018101e4
    1440:	01e401e4 	.word	0x01e401e4
    1444:	0181      	.short	0x0181
				conv->flag_dash = true;
    1446:	f89d 3018 	ldrb.w	r3, [sp, #24]
    144a:	f043 0304 	orr.w	r3, r3, #4
    144e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1452:	427f      	negs	r7, r7
    1454:	e76f      	b.n	1336 <cbvprintf+0x62>
		} else if (conv->width_present) {
    1456:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    145a:	2b00      	cmp	r3, #0
    145c:	db02      	blt.n	1464 <cbvprintf+0x190>
		int width = -1;
    145e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1462:	e768      	b.n	1336 <cbvprintf+0x62>
			width = conv->width_value;
    1464:	9f07      	ldr	r7, [sp, #28]
    1466:	e766      	b.n	1336 <cbvprintf+0x62>
				conv->prec_present = false;
    1468:	f89d 3019 	ldrb.w	r3, [sp, #25]
    146c:	f36f 0341 	bfc	r3, #1, #1
    1470:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1474:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1478:	e76c      	b.n	1354 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    147a:	f013 0f02 	tst.w	r3, #2
    147e:	d002      	beq.n	1486 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    1480:	f8dd a020 	ldr.w	sl, [sp, #32]
    1484:	e766      	b.n	1354 <cbvprintf+0x80>
		int precision = -1;
    1486:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    148a:	e763      	b.n	1354 <cbvprintf+0x80>
			switch (length_mod) {
    148c:	1ecb      	subs	r3, r1, #3
    148e:	2b04      	cmp	r3, #4
    1490:	d804      	bhi.n	149c <cbvprintf+0x1c8>
    1492:	e8df f003 	tbb	[pc, r3]
    1496:	1d0b      	.short	0x1d0b
    1498:	3529      	.short	0x3529
    149a:	35          	.byte	0x35
    149b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    149c:	9b03      	ldr	r3, [sp, #12]
    149e:	1d1a      	adds	r2, r3, #4
    14a0:	9203      	str	r2, [sp, #12]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	17da      	asrs	r2, r3, #31
    14a6:	9304      	str	r3, [sp, #16]
    14a8:	9205      	str	r2, [sp, #20]
				break;
    14aa:	e006      	b.n	14ba <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    14ac:	9b03      	ldr	r3, [sp, #12]
    14ae:	1d1a      	adds	r2, r3, #4
    14b0:	9203      	str	r2, [sp, #12]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	17da      	asrs	r2, r3, #31
    14b6:	9304      	str	r3, [sp, #16]
    14b8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    14ba:	2901      	cmp	r1, #1
    14bc:	d028      	beq.n	1510 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    14be:	2902      	cmp	r1, #2
    14c0:	f47f af5f 	bne.w	1382 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    14c4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    14c8:	17da      	asrs	r2, r3, #31
    14ca:	9304      	str	r3, [sp, #16]
    14cc:	9205      	str	r2, [sp, #20]
    14ce:	e758      	b.n	1382 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    14d0:	9b03      	ldr	r3, [sp, #12]
    14d2:	3307      	adds	r3, #7
    14d4:	f023 0307 	bic.w	r3, r3, #7
    14d8:	f103 0208 	add.w	r2, r3, #8
    14dc:	9203      	str	r2, [sp, #12]
    14de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    14e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    14e6:	e7e8      	b.n	14ba <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    14e8:	9b03      	ldr	r3, [sp, #12]
    14ea:	3307      	adds	r3, #7
    14ec:	f023 0307 	bic.w	r3, r3, #7
    14f0:	f103 0208 	add.w	r2, r3, #8
    14f4:	9203      	str	r2, [sp, #12]
    14f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    14fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    14fe:	e7dc      	b.n	14ba <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1500:	9b03      	ldr	r3, [sp, #12]
    1502:	1d1a      	adds	r2, r3, #4
    1504:	9203      	str	r2, [sp, #12]
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	17da      	asrs	r2, r3, #31
				value->sint =
    150a:	9304      	str	r3, [sp, #16]
    150c:	9205      	str	r2, [sp, #20]
				break;
    150e:	e7d4      	b.n	14ba <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    1510:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1514:	9304      	str	r3, [sp, #16]
    1516:	2300      	movs	r3, #0
    1518:	9305      	str	r3, [sp, #20]
    151a:	e732      	b.n	1382 <cbvprintf+0xae>
			switch (length_mod) {
    151c:	1ecb      	subs	r3, r1, #3
    151e:	2b04      	cmp	r3, #4
    1520:	d804      	bhi.n	152c <cbvprintf+0x258>
    1522:	e8df f003 	tbb	[pc, r3]
    1526:	1f0b      	.short	0x1f0b
    1528:	4135      	.short	0x4135
    152a:	41          	.byte	0x41
    152b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    152c:	9b03      	ldr	r3, [sp, #12]
    152e:	1d1a      	adds	r2, r3, #4
    1530:	9203      	str	r2, [sp, #12]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	9304      	str	r3, [sp, #16]
    1536:	2300      	movs	r3, #0
    1538:	9305      	str	r3, [sp, #20]
				break;
    153a:	e01e      	b.n	157a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    153c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1540:	2b63      	cmp	r3, #99	; 0x63
    1542:	d007      	beq.n	1554 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1544:	9b03      	ldr	r3, [sp, #12]
    1546:	1d1a      	adds	r2, r3, #4
    1548:	9203      	str	r2, [sp, #12]
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	9304      	str	r3, [sp, #16]
    154e:	2300      	movs	r3, #0
    1550:	9305      	str	r3, [sp, #20]
    1552:	e012      	b.n	157a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	1d1a      	adds	r2, r3, #4
    1558:	9203      	str	r2, [sp, #12]
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	9304      	str	r3, [sp, #16]
    155e:	2300      	movs	r3, #0
    1560:	9305      	str	r3, [sp, #20]
    1562:	e00a      	b.n	157a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1564:	9b03      	ldr	r3, [sp, #12]
    1566:	3307      	adds	r3, #7
    1568:	f023 0307 	bic.w	r3, r3, #7
    156c:	f103 0208 	add.w	r2, r3, #8
    1570:	9203      	str	r2, [sp, #12]
    1572:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1576:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    157a:	2901      	cmp	r1, #1
    157c:	d01c      	beq.n	15b8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    157e:	2902      	cmp	r1, #2
    1580:	f47f aeff 	bne.w	1382 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1584:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1588:	9304      	str	r3, [sp, #16]
    158a:	2300      	movs	r3, #0
    158c:	9305      	str	r3, [sp, #20]
    158e:	e6f8      	b.n	1382 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1590:	9b03      	ldr	r3, [sp, #12]
    1592:	3307      	adds	r3, #7
    1594:	f023 0307 	bic.w	r3, r3, #7
    1598:	f103 0208 	add.w	r2, r3, #8
    159c:	9203      	str	r2, [sp, #12]
    159e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    15a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    15a6:	e7e8      	b.n	157a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    15a8:	9b03      	ldr	r3, [sp, #12]
    15aa:	1d1a      	adds	r2, r3, #4
    15ac:	9203      	str	r2, [sp, #12]
    15ae:	681b      	ldr	r3, [r3, #0]
				value->uint =
    15b0:	9304      	str	r3, [sp, #16]
    15b2:	2300      	movs	r3, #0
    15b4:	9305      	str	r3, [sp, #20]
				break;
    15b6:	e7e0      	b.n	157a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    15b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    15bc:	9304      	str	r3, [sp, #16]
    15be:	2300      	movs	r3, #0
    15c0:	9305      	str	r3, [sp, #20]
    15c2:	e6de      	b.n	1382 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    15c4:	2908      	cmp	r1, #8
    15c6:	d00b      	beq.n	15e0 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    15c8:	9b03      	ldr	r3, [sp, #12]
    15ca:	3307      	adds	r3, #7
    15cc:	f023 0307 	bic.w	r3, r3, #7
    15d0:	f103 0208 	add.w	r2, r3, #8
    15d4:	9203      	str	r2, [sp, #12]
    15d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    15da:	e9cd 2304 	strd	r2, r3, [sp, #16]
    15de:	e6d0      	b.n	1382 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    15e0:	9b03      	ldr	r3, [sp, #12]
    15e2:	3307      	adds	r3, #7
    15e4:	f023 0307 	bic.w	r3, r3, #7
    15e8:	f103 0208 	add.w	r2, r3, #8
    15ec:	9203      	str	r2, [sp, #12]
    15ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    15f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    15f6:	e6c4      	b.n	1382 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    15f8:	9b03      	ldr	r3, [sp, #12]
    15fa:	1d1a      	adds	r2, r3, #4
    15fc:	9203      	str	r2, [sp, #12]
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	9304      	str	r3, [sp, #16]
    1602:	e6be      	b.n	1382 <cbvprintf+0xae>
			OUTS(sp, fp);
    1604:	9f02      	ldr	r7, [sp, #8]
    1606:	463b      	mov	r3, r7
    1608:	464a      	mov	r2, r9
    160a:	4629      	mov	r1, r5
    160c:	4630      	mov	r0, r6
    160e:	f007 fa03 	bl	8a18 <outs>
    1612:	2800      	cmp	r0, #0
    1614:	f2c0 8141 	blt.w	189a <cbvprintf+0x5c6>
    1618:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    161a:	46b9      	mov	r9, r7
			continue;
    161c:	e662      	b.n	12e4 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    161e:	4629      	mov	r1, r5
    1620:	2025      	movs	r0, #37	; 0x25
    1622:	47b0      	blx	r6
    1624:	2800      	cmp	r0, #0
    1626:	f2c0 8138 	blt.w	189a <cbvprintf+0x5c6>
    162a:	3401      	adds	r4, #1
		char sign = 0;
    162c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    162e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1632:	f04f 0900 	mov.w	r9, #0
			break;
    1636:	e09b      	b.n	1770 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    1638:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    163c:	f1ba 0f00 	cmp.w	sl, #0
    1640:	db07      	blt.n	1652 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    1642:	4651      	mov	r1, sl
    1644:	4648      	mov	r0, r9
    1646:	f007 fb09 	bl	8c5c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    164a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    164e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1650:	e08e      	b.n	1770 <cbvprintf+0x49c>
				len = strlen(bps);
    1652:	4648      	mov	r0, r9
    1654:	f007 faf9 	bl	8c4a <strlen>
    1658:	e7f7      	b.n	164a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    165a:	9b04      	ldr	r3, [sp, #16]
    165c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1660:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1662:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1666:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    166a:	e081      	b.n	1770 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    166c:	f018 0f08 	tst.w	r8, #8
    1670:	d105      	bne.n	167e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1672:	f018 0810 	ands.w	r8, r8, #16
    1676:	d004      	beq.n	1682 <cbvprintf+0x3ae>
				sign = ' ';
    1678:	f04f 0820 	mov.w	r8, #32
    167c:	e001      	b.n	1682 <cbvprintf+0x3ae>
				sign = '+';
    167e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1682:	9a04      	ldr	r2, [sp, #16]
    1684:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1686:	2b00      	cmp	r3, #0
    1688:	db02      	blt.n	1690 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    168a:	9204      	str	r2, [sp, #16]
    168c:	9305      	str	r3, [sp, #20]
    168e:	e008      	b.n	16a2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1690:	4252      	negs	r2, r2
    1692:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1696:	9204      	str	r2, [sp, #16]
    1698:	9305      	str	r3, [sp, #20]
				sign = '-';
    169a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    169e:	e000      	b.n	16a2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    16a0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    16a2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    16a6:	9300      	str	r3, [sp, #0]
    16a8:	ab0a      	add	r3, sp, #40	; 0x28
    16aa:	aa06      	add	r2, sp, #24
    16ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    16b0:	f007 f948 	bl	8944 <encode_uint>
    16b4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    16b6:	f1ba 0f00 	cmp.w	sl, #0
    16ba:	f2c0 8088 	blt.w	17ce <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    16be:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    16c2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    16c6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    16ca:	f36f 1286 	bfc	r2, #6, #1
    16ce:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    16d2:	459a      	cmp	sl, r3
    16d4:	d97e      	bls.n	17d4 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    16d6:	ebaa 0303 	sub.w	r3, sl, r3
    16da:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    16dc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    16e0:	e046      	b.n	1770 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    16e2:	9804      	ldr	r0, [sp, #16]
    16e4:	b928      	cbnz	r0, 16f2 <cbvprintf+0x41e>
		char sign = 0;
    16e6:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    16e8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 18a0 <cbvprintf+0x5cc>
			bps = "(nil)";
    16ec:	f1aa 0905 	sub.w	r9, sl, #5
    16f0:	e03e      	b.n	1770 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    16f2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    16f6:	9300      	str	r3, [sp, #0]
    16f8:	ab0a      	add	r3, sp, #40	; 0x28
    16fa:	aa06      	add	r2, sp, #24
    16fc:	2100      	movs	r1, #0
    16fe:	f007 f921 	bl	8944 <encode_uint>
    1702:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1704:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1708:	f043 0310 	orr.w	r3, r3, #16
    170c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1710:	2378      	movs	r3, #120	; 0x78
    1712:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1716:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1718:	e7cd      	b.n	16b6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    171a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    171c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1720:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1724:	2b07      	cmp	r3, #7
    1726:	d806      	bhi.n	1736 <cbvprintf+0x462>
    1728:	e8df f003 	tbb	[pc, r3]
    172c:	0f0d0b04 	.word	0x0f0d0b04
    1730:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1734:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1736:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1738:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    173c:	f04f 0900 	mov.w	r9, #0
}
    1740:	e016      	b.n	1770 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1742:	7014      	strb	r4, [r2, #0]
		break;
    1744:	e7f7      	b.n	1736 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1746:	8014      	strh	r4, [r2, #0]
		break;
    1748:	e7f5      	b.n	1736 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    174a:	6014      	str	r4, [r2, #0]
		break;
    174c:	e7f3      	b.n	1736 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    174e:	17e3      	asrs	r3, r4, #31
    1750:	6014      	str	r4, [r2, #0]
    1752:	6053      	str	r3, [r2, #4]
		break;
    1754:	e7ef      	b.n	1736 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1756:	17e3      	asrs	r3, r4, #31
    1758:	6014      	str	r4, [r2, #0]
    175a:	6053      	str	r3, [r2, #4]
		break;
    175c:	e7eb      	b.n	1736 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    175e:	6014      	str	r4, [r2, #0]
		break;
    1760:	e7e9      	b.n	1736 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1762:	6014      	str	r4, [r2, #0]
		break;
    1764:	e7e7      	b.n	1736 <cbvprintf+0x462>
		switch (conv->specifier) {
    1766:	46d8      	mov	r8, fp
    1768:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    176c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1770:	f1b9 0f00 	cmp.w	r9, #0
    1774:	f000 808d 	beq.w	1892 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1778:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    177c:	f1b8 0f00 	cmp.w	r8, #0
    1780:	d000      	beq.n	1784 <cbvprintf+0x4b0>
			nj_len += 1U;
    1782:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    1784:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1788:	f012 0f10 	tst.w	r2, #16
    178c:	d025      	beq.n	17da <cbvprintf+0x506>
			nj_len += 2U;
    178e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1790:	9907      	ldr	r1, [sp, #28]
    1792:	440b      	add	r3, r1
		if (conv->pad_fp) {
    1794:	f012 0f40 	tst.w	r2, #64	; 0x40
    1798:	d001      	beq.n	179e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    179a:	9a08      	ldr	r2, [sp, #32]
    179c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    179e:	2f00      	cmp	r7, #0
    17a0:	dd31      	ble.n	1806 <cbvprintf+0x532>
			width -= (int)nj_len;
    17a2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    17a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    17a8:	f013 0f04 	tst.w	r3, #4
    17ac:	d12b      	bne.n	1806 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    17ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    17b2:	d017      	beq.n	17e4 <cbvprintf+0x510>
					if (sign != 0) {
    17b4:	f1b8 0f00 	cmp.w	r8, #0
    17b8:	d017      	beq.n	17ea <cbvprintf+0x516>
						OUTC(sign);
    17ba:	4629      	mov	r1, r5
    17bc:	4640      	mov	r0, r8
    17be:	47b0      	blx	r6
    17c0:	2800      	cmp	r0, #0
    17c2:	db6a      	blt.n	189a <cbvprintf+0x5c6>
    17c4:	3401      	adds	r4, #1
						sign = 0;
    17c6:	46d8      	mov	r8, fp
					}
					pad = '0';
    17c8:	f04f 0b30 	mov.w	fp, #48	; 0x30
    17cc:	e00f      	b.n	17ee <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    17ce:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    17d2:	e7cd      	b.n	1770 <cbvprintf+0x49c>
    17d4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    17d8:	e7ca      	b.n	1770 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    17da:	f012 0f08 	tst.w	r2, #8
    17de:	d0d7      	beq.n	1790 <cbvprintf+0x4bc>
			nj_len += 1U;
    17e0:	3301      	adds	r3, #1
    17e2:	e7d5      	b.n	1790 <cbvprintf+0x4bc>
				char pad = ' ';
    17e4:	f04f 0b20 	mov.w	fp, #32
    17e8:	e001      	b.n	17ee <cbvprintf+0x51a>
					pad = '0';
    17ea:	f04f 0b30 	mov.w	fp, #48	; 0x30
    17ee:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    17f0:	1e5f      	subs	r7, r3, #1
    17f2:	2b00      	cmp	r3, #0
    17f4:	dd07      	ble.n	1806 <cbvprintf+0x532>
					OUTC(pad);
    17f6:	4629      	mov	r1, r5
    17f8:	4658      	mov	r0, fp
    17fa:	47b0      	blx	r6
    17fc:	2800      	cmp	r0, #0
    17fe:	db4c      	blt.n	189a <cbvprintf+0x5c6>
    1800:	3401      	adds	r4, #1
				while (width-- > 0) {
    1802:	463b      	mov	r3, r7
    1804:	e7f4      	b.n	17f0 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1806:	f1b8 0f00 	cmp.w	r8, #0
    180a:	d005      	beq.n	1818 <cbvprintf+0x544>
			OUTC(sign);
    180c:	4629      	mov	r1, r5
    180e:	4640      	mov	r0, r8
    1810:	47b0      	blx	r6
    1812:	2800      	cmp	r0, #0
    1814:	db41      	blt.n	189a <cbvprintf+0x5c6>
    1816:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1818:	f89d 301a 	ldrb.w	r3, [sp, #26]
    181c:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1820:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1824:	4313      	orrs	r3, r2
    1826:	d005      	beq.n	1834 <cbvprintf+0x560>
				OUTC('0');
    1828:	4629      	mov	r1, r5
    182a:	2030      	movs	r0, #48	; 0x30
    182c:	47b0      	blx	r6
    182e:	2800      	cmp	r0, #0
    1830:	db33      	blt.n	189a <cbvprintf+0x5c6>
    1832:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1834:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1838:	f013 0f10 	tst.w	r3, #16
    183c:	d006      	beq.n	184c <cbvprintf+0x578>
				OUTC(conv->specifier);
    183e:	4629      	mov	r1, r5
    1840:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1844:	47b0      	blx	r6
    1846:	2800      	cmp	r0, #0
    1848:	db27      	blt.n	189a <cbvprintf+0x5c6>
    184a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    184c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    184e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1852:	2b00      	cmp	r3, #0
    1854:	dd07      	ble.n	1866 <cbvprintf+0x592>
				OUTC('0');
    1856:	4629      	mov	r1, r5
    1858:	2030      	movs	r0, #48	; 0x30
    185a:	47b0      	blx	r6
    185c:	2800      	cmp	r0, #0
    185e:	db1c      	blt.n	189a <cbvprintf+0x5c6>
    1860:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1862:	4643      	mov	r3, r8
    1864:	e7f3      	b.n	184e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1866:	4653      	mov	r3, sl
    1868:	464a      	mov	r2, r9
    186a:	4629      	mov	r1, r5
    186c:	4630      	mov	r0, r6
    186e:	f007 f8d3 	bl	8a18 <outs>
    1872:	2800      	cmp	r0, #0
    1874:	db11      	blt.n	189a <cbvprintf+0x5c6>
    1876:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1878:	2f00      	cmp	r7, #0
    187a:	dd07      	ble.n	188c <cbvprintf+0x5b8>
			OUTC(' ');
    187c:	4629      	mov	r1, r5
    187e:	2020      	movs	r0, #32
    1880:	47b0      	blx	r6
    1882:	2800      	cmp	r0, #0
    1884:	db09      	blt.n	189a <cbvprintf+0x5c6>
    1886:	3401      	adds	r4, #1
			--width;
    1888:	3f01      	subs	r7, #1
    188a:	e7f5      	b.n	1878 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    188c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1890:	e528      	b.n	12e4 <cbvprintf+0x10>
    1892:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1896:	e525      	b.n	12e4 <cbvprintf+0x10>
		}
	}

	return count;
    1898:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    189a:	b011      	add	sp, #68	; 0x44
    189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18a0:	0000a019 	.word	0x0000a019

000018a4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    18a4:	b508      	push	{r3, lr}
	__asm__ volatile(
    18a6:	f04f 0220 	mov.w	r2, #32
    18aa:	f3ef 8311 	mrs	r3, BASEPRI
    18ae:	f382 8812 	msr	BASEPRI_MAX, r2
    18b2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    18b6:	f000 ffc5 	bl	2844 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    18ba:	4803      	ldr	r0, [pc, #12]	; (18c8 <sys_reboot+0x24>)
    18bc:	f006 ff48 	bl	8750 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    18c0:	f000 fad2 	bl	1e68 <arch_cpu_idle>
    18c4:	e7fc      	b.n	18c0 <sys_reboot+0x1c>
    18c6:	bf00      	nop
    18c8:	0000a01c 	.word	0x0000a01c

000018cc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    18cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    18ce:	4b40      	ldr	r3, [pc, #256]	; (19d0 <pm_system_resume+0x104>)
    18d0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    18d2:	f005 031f 	and.w	r3, r5, #31
    18d6:	2201      	movs	r2, #1
    18d8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    18da:	0969      	lsrs	r1, r5, #5
    18dc:	4b3d      	ldr	r3, [pc, #244]	; (19d4 <pm_system_resume+0x108>)
    18de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    18e2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    18e4:	f3bf 8f5b 	dmb	ish
    18e8:	e853 1f00 	ldrex	r1, [r3]
    18ec:	ea01 0400 	and.w	r4, r1, r0
    18f0:	e843 4600 	strex	r6, r4, [r3]
    18f4:	2e00      	cmp	r6, #0
    18f6:	d1f7      	bne.n	18e8 <pm_system_resume+0x1c>
    18f8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    18fc:	420a      	tst	r2, r1
    18fe:	d100      	bne.n	1902 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1900:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    1902:	4a35      	ldr	r2, [pc, #212]	; (19d8 <pm_system_resume+0x10c>)
    1904:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1908:	0098      	lsls	r0, r3, #2
    190a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    190e:	4933      	ldr	r1, [pc, #204]	; (19dc <pm_system_resume+0x110>)
    1910:	b1a9      	cbz	r1, 193e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1912:	7859      	ldrb	r1, [r3, #1]
    1914:	5c10      	ldrb	r0, [r2, r0]
    1916:	f007 fa1b 	bl	8d50 <pm_state_exit_post_ops>
    191a:	f04f 0320 	mov.w	r3, #32
    191e:	f3ef 8611 	mrs	r6, BASEPRI
    1922:	f383 8812 	msr	BASEPRI_MAX, r3
    1926:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    192a:	482d      	ldr	r0, [pc, #180]	; (19e0 <pm_system_resume+0x114>)
    192c:	f004 f9d6 	bl	5cdc <z_spin_lock_valid>
    1930:	b158      	cbz	r0, 194a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    1932:	482b      	ldr	r0, [pc, #172]	; (19e0 <pm_system_resume+0x114>)
    1934:	f004 f9f2 	bl	5d1c <z_spin_lock_set_owner>
	return list->head;
    1938:	4b2a      	ldr	r3, [pc, #168]	; (19e4 <pm_system_resume+0x118>)
    193a:	681c      	ldr	r4, [r3, #0]
    193c:	e020      	b.n	1980 <pm_system_resume+0xb4>
	__asm__ volatile(
    193e:	2300      	movs	r3, #0
    1940:	f383 8811 	msr	BASEPRI, r3
    1944:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1948:	e7e7      	b.n	191a <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    194a:	4c27      	ldr	r4, [pc, #156]	; (19e8 <pm_system_resume+0x11c>)
    194c:	238e      	movs	r3, #142	; 0x8e
    194e:	4622      	mov	r2, r4
    1950:	4926      	ldr	r1, [pc, #152]	; (19ec <pm_system_resume+0x120>)
    1952:	4827      	ldr	r0, [pc, #156]	; (19f0 <pm_system_resume+0x124>)
    1954:	f007 f881 	bl	8a5a <assert_print>
    1958:	4921      	ldr	r1, [pc, #132]	; (19e0 <pm_system_resume+0x114>)
    195a:	4826      	ldr	r0, [pc, #152]	; (19f4 <pm_system_resume+0x128>)
    195c:	f007 f87d 	bl	8a5a <assert_print>
    1960:	218e      	movs	r1, #142	; 0x8e
    1962:	4620      	mov	r0, r4
    1964:	f007 f872 	bl	8a4c <assert_post_action>
    1968:	e7e3      	b.n	1932 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    196a:	4b19      	ldr	r3, [pc, #100]	; (19d0 <pm_system_resume+0x104>)
    196c:	7d1b      	ldrb	r3, [r3, #20]
    196e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1972:	4919      	ldr	r1, [pc, #100]	; (19d8 <pm_system_resume+0x10c>)
    1974:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1978:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    197a:	b10c      	cbz	r4, 1980 <pm_system_resume+0xb4>
	return node->next;
    197c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    197e:	b124      	cbz	r4, 198a <pm_system_resume+0xbe>
    1980:	b11c      	cbz	r4, 198a <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    1982:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    1984:	2a00      	cmp	r2, #0
    1986:	d1f0      	bne.n	196a <pm_system_resume+0x9e>
    1988:	e7f7      	b.n	197a <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    198a:	4815      	ldr	r0, [pc, #84]	; (19e0 <pm_system_resume+0x114>)
    198c:	f004 f9b6 	bl	5cfc <z_spin_unlock_valid>
    1990:	b170      	cbz	r0, 19b0 <pm_system_resume+0xe4>
	__asm__ volatile(
    1992:	f386 8811 	msr	BASEPRI, r6
    1996:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    199a:	4a0f      	ldr	r2, [pc, #60]	; (19d8 <pm_system_resume+0x10c>)
    199c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    19a0:	00a9      	lsls	r1, r5, #2
    19a2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    19a6:	2300      	movs	r3, #0
    19a8:	5053      	str	r3, [r2, r1]
    19aa:	606b      	str	r3, [r5, #4]
    19ac:	60ab      	str	r3, [r5, #8]
}
    19ae:	e7a7      	b.n	1900 <pm_system_resume+0x34>
    19b0:	4c0d      	ldr	r4, [pc, #52]	; (19e8 <pm_system_resume+0x11c>)
    19b2:	23b9      	movs	r3, #185	; 0xb9
    19b4:	4622      	mov	r2, r4
    19b6:	4910      	ldr	r1, [pc, #64]	; (19f8 <pm_system_resume+0x12c>)
    19b8:	480d      	ldr	r0, [pc, #52]	; (19f0 <pm_system_resume+0x124>)
    19ba:	f007 f84e 	bl	8a5a <assert_print>
    19be:	4908      	ldr	r1, [pc, #32]	; (19e0 <pm_system_resume+0x114>)
    19c0:	480e      	ldr	r0, [pc, #56]	; (19fc <pm_system_resume+0x130>)
    19c2:	f007 f84a 	bl	8a5a <assert_print>
    19c6:	21b9      	movs	r1, #185	; 0xb9
    19c8:	4620      	mov	r0, r4
    19ca:	f007 f83f 	bl	8a4c <assert_post_action>
    19ce:	e7e0      	b.n	1992 <pm_system_resume+0xc6>
    19d0:	2000504c 	.word	0x2000504c
    19d4:	200045a8 	.word	0x200045a8
    19d8:	20004598 	.word	0x20004598
    19dc:	00008d51 	.word	0x00008d51
    19e0:	2000458c 	.word	0x2000458c
    19e4:	20004590 	.word	0x20004590
    19e8:	00009de8 	.word	0x00009de8
    19ec:	00009e48 	.word	0x00009e48
    19f0:	00009cd0 	.word	0x00009cd0
    19f4:	00009e60 	.word	0x00009e60
    19f8:	00009e18 	.word	0x00009e18
    19fc:	00009e30 	.word	0x00009e30

00001a00 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1a00:	b570      	push	{r4, r5, r6, lr}
    1a02:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1a04:	4b6d      	ldr	r3, [pc, #436]	; (1bbc <pm_system_suspend+0x1bc>)
    1a06:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a08:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1a0a:	f3bf 8f5b 	dmb	ish
    1a0e:	4b6c      	ldr	r3, [pc, #432]	; (1bc0 <pm_system_suspend+0x1c0>)
    1a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1a14:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1a18:	f005 021f 	and.w	r2, r5, #31
    1a1c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1a1e:	f013 0f01 	tst.w	r3, #1
    1a22:	d01d      	beq.n	1a60 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1a24:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1a28:	4a66      	ldr	r2, [pc, #408]	; (1bc4 <pm_system_suspend+0x1c4>)
    1a2a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1a2e:	b333      	cbz	r3, 1a7e <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1a30:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    1a34:	d139      	bne.n	1aaa <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1a36:	f004 ff61 	bl	68fc <k_sched_lock>
	__asm__ volatile(
    1a3a:	f04f 0320 	mov.w	r3, #32
    1a3e:	f3ef 8611 	mrs	r6, BASEPRI
    1a42:	f383 8812 	msr	BASEPRI_MAX, r3
    1a46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1a4a:	485f      	ldr	r0, [pc, #380]	; (1bc8 <pm_system_suspend+0x1c8>)
    1a4c:	f004 f946 	bl	5cdc <z_spin_lock_valid>
    1a50:	2800      	cmp	r0, #0
    1a52:	d040      	beq.n	1ad6 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    1a54:	485c      	ldr	r0, [pc, #368]	; (1bc8 <pm_system_suspend+0x1c8>)
    1a56:	f004 f961 	bl	5d1c <z_spin_lock_set_owner>
	return list->head;
    1a5a:	4b5c      	ldr	r3, [pc, #368]	; (1bcc <pm_system_suspend+0x1cc>)
    1a5c:	681c      	ldr	r4, [r3, #0]
    1a5e:	e055      	b.n	1b0c <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    1a60:	4601      	mov	r1, r0
    1a62:	4628      	mov	r0, r5
    1a64:	f000 f8d6 	bl	1c14 <pm_policy_next_state>
		if (info != NULL) {
    1a68:	2800      	cmp	r0, #0
    1a6a:	d0db      	beq.n	1a24 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    1a6c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1a70:	4a54      	ldr	r2, [pc, #336]	; (1bc4 <pm_system_suspend+0x1c4>)
    1a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a76:	c807      	ldmia	r0, {r0, r1, r2}
    1a78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1a7c:	e7d2      	b.n	1a24 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a7e:	f005 021f 	and.w	r2, r5, #31
    1a82:	2301      	movs	r3, #1
    1a84:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a86:	096d      	lsrs	r5, r5, #5
    1a88:	4a4d      	ldr	r2, [pc, #308]	; (1bc0 <pm_system_suspend+0x1c0>)
    1a8a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1a8e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a90:	f3bf 8f5b 	dmb	ish
    1a94:	e855 2f00 	ldrex	r2, [r5]
    1a98:	401a      	ands	r2, r3
    1a9a:	e845 2100 	strex	r1, r2, [r5]
    1a9e:	2900      	cmp	r1, #0
    1aa0:	d1f8      	bne.n	1a94 <pm_system_suspend+0x94>
    1aa2:	f3bf 8f5b 	dmb	ish
		ret = false;
    1aa6:	2000      	movs	r0, #0
		goto end;
    1aa8:	e077      	b.n	1b9a <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    1aaa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1aae:	4a45      	ldr	r2, [pc, #276]	; (1bc4 <pm_system_suspend+0x1c4>)
    1ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ab4:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    1ab6:	0c41      	lsrs	r1, r0, #17
    1ab8:	03c0      	lsls	r0, r0, #15
    1aba:	4b45      	ldr	r3, [pc, #276]	; (1bd0 <pm_system_suspend+0x1d0>)
    1abc:	18c0      	adds	r0, r0, r3
    1abe:	4a45      	ldr	r2, [pc, #276]	; (1bd4 <pm_system_suspend+0x1d4>)
    1ac0:	f04f 0300 	mov.w	r3, #0
    1ac4:	f141 0100 	adc.w	r1, r1, #0
    1ac8:	f7fe fb1a 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1acc:	2101      	movs	r1, #1
    1ace:	1a20      	subs	r0, r4, r0
    1ad0:	f006 fa44 	bl	7f5c <z_set_timeout_expiry>
    1ad4:	e7af      	b.n	1a36 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ad6:	4c40      	ldr	r4, [pc, #256]	; (1bd8 <pm_system_suspend+0x1d8>)
    1ad8:	238e      	movs	r3, #142	; 0x8e
    1ada:	4622      	mov	r2, r4
    1adc:	493f      	ldr	r1, [pc, #252]	; (1bdc <pm_system_suspend+0x1dc>)
    1ade:	4840      	ldr	r0, [pc, #256]	; (1be0 <pm_system_suspend+0x1e0>)
    1ae0:	f006 ffbb 	bl	8a5a <assert_print>
    1ae4:	4938      	ldr	r1, [pc, #224]	; (1bc8 <pm_system_suspend+0x1c8>)
    1ae6:	483f      	ldr	r0, [pc, #252]	; (1be4 <pm_system_suspend+0x1e4>)
    1ae8:	f006 ffb7 	bl	8a5a <assert_print>
    1aec:	218e      	movs	r1, #142	; 0x8e
    1aee:	4620      	mov	r0, r4
    1af0:	f006 ffac 	bl	8a4c <assert_post_action>
    1af4:	e7ae      	b.n	1a54 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1af6:	4b31      	ldr	r3, [pc, #196]	; (1bbc <pm_system_suspend+0x1bc>)
    1af8:	7d1b      	ldrb	r3, [r3, #20]
    1afa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1afe:	4931      	ldr	r1, [pc, #196]	; (1bc4 <pm_system_suspend+0x1c4>)
    1b00:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1b04:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1b06:	b10c      	cbz	r4, 1b0c <pm_system_suspend+0x10c>
	return node->next;
    1b08:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1b0a:	b124      	cbz	r4, 1b16 <pm_system_suspend+0x116>
    1b0c:	b11c      	cbz	r4, 1b16 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    1b0e:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    1b10:	2a00      	cmp	r2, #0
    1b12:	d1f0      	bne.n	1af6 <pm_system_suspend+0xf6>
    1b14:	e7f7      	b.n	1b06 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1b16:	482c      	ldr	r0, [pc, #176]	; (1bc8 <pm_system_suspend+0x1c8>)
    1b18:	f004 f8f0 	bl	5cfc <z_spin_unlock_valid>
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d03d      	beq.n	1b9c <pm_system_suspend+0x19c>
	__asm__ volatile(
    1b20:	f386 8811 	msr	BASEPRI, r6
    1b24:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b28:	f005 031f 	and.w	r3, r5, #31
    1b2c:	2101      	movs	r1, #1
    1b2e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1b30:	096b      	lsrs	r3, r5, #5
    1b32:	4a2d      	ldr	r2, [pc, #180]	; (1be8 <pm_system_suspend+0x1e8>)
    1b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1b38:	f3bf 8f5b 	dmb	ish
    1b3c:	e853 2f00 	ldrex	r2, [r3]
    1b40:	430a      	orrs	r2, r1
    1b42:	e843 2000 	strex	r0, r2, [r3]
    1b46:	2800      	cmp	r0, #0
    1b48:	d1f8      	bne.n	1b3c <pm_system_suspend+0x13c>
    1b4a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1b4e:	4b27      	ldr	r3, [pc, #156]	; (1bec <pm_system_suspend+0x1ec>)
    1b50:	b14b      	cbz	r3, 1b66 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    1b52:	4b1c      	ldr	r3, [pc, #112]	; (1bc4 <pm_system_suspend+0x1c4>)
    1b54:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1b58:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1b5c:	7849      	ldrb	r1, [r1, #1]
    1b5e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1b62:	f007 f8e9 	bl	8d38 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1b66:	f7ff feb1 	bl	18cc <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b6a:	f005 031f 	and.w	r3, r5, #31
    1b6e:	2401      	movs	r4, #1
    1b70:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1b74:	096d      	lsrs	r5, r5, #5
    1b76:	4a12      	ldr	r2, [pc, #72]	; (1bc0 <pm_system_suspend+0x1c0>)
    1b78:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1b7c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b7e:	f3bf 8f5b 	dmb	ish
    1b82:	e855 2f00 	ldrex	r2, [r5]
    1b86:	401a      	ands	r2, r3
    1b88:	e845 2100 	strex	r1, r2, [r5]
    1b8c:	2900      	cmp	r1, #0
    1b8e:	d1f8      	bne.n	1b82 <pm_system_suspend+0x182>
    1b90:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    1b94:	f005 fc3e 	bl	7414 <k_sched_unlock>
	bool ret = true;
    1b98:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
    1b9c:	4c0e      	ldr	r4, [pc, #56]	; (1bd8 <pm_system_suspend+0x1d8>)
    1b9e:	23b9      	movs	r3, #185	; 0xb9
    1ba0:	4622      	mov	r2, r4
    1ba2:	4913      	ldr	r1, [pc, #76]	; (1bf0 <pm_system_suspend+0x1f0>)
    1ba4:	480e      	ldr	r0, [pc, #56]	; (1be0 <pm_system_suspend+0x1e0>)
    1ba6:	f006 ff58 	bl	8a5a <assert_print>
    1baa:	4907      	ldr	r1, [pc, #28]	; (1bc8 <pm_system_suspend+0x1c8>)
    1bac:	4811      	ldr	r0, [pc, #68]	; (1bf4 <pm_system_suspend+0x1f4>)
    1bae:	f006 ff54 	bl	8a5a <assert_print>
    1bb2:	21b9      	movs	r1, #185	; 0xb9
    1bb4:	4620      	mov	r0, r4
    1bb6:	f006 ff49 	bl	8a4c <assert_post_action>
    1bba:	e7b1      	b.n	1b20 <pm_system_suspend+0x120>
    1bbc:	2000504c 	.word	0x2000504c
    1bc0:	200045a4 	.word	0x200045a4
    1bc4:	20004598 	.word	0x20004598
    1bc8:	2000458c 	.word	0x2000458c
    1bcc:	20004590 	.word	0x20004590
    1bd0:	000f423f 	.word	0x000f423f
    1bd4:	000f4240 	.word	0x000f4240
    1bd8:	00009de8 	.word	0x00009de8
    1bdc:	00009e48 	.word	0x00009e48
    1be0:	00009cd0 	.word	0x00009cd0
    1be4:	00009e60 	.word	0x00009e60
    1be8:	200045a8 	.word	0x200045a8
    1bec:	00008d39 	.word	0x00008d39
    1bf0:	00009e18 	.word	0x00009e18
    1bf4:	00009e30 	.word	0x00009e30

00001bf8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1bf8:	f3bf 8f5b 	dmb	ish
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <pm_policy_state_lock_is_active+0x18>)
    1bfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1c02:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1c06:	3800      	subs	r0, #0
    1c08:	bf18      	it	ne
    1c0a:	2001      	movne	r0, #1
    1c0c:	4770      	bx	lr
    1c0e:	bf00      	nop
    1c10:	200045ac 	.word	0x200045ac

00001c14 <pm_policy_next_state>:
{
    1c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c18:	b082      	sub	sp, #8
    1c1a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1c1c:	a901      	add	r1, sp, #4
    1c1e:	f000 f843 	bl	1ca8 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1c22:	1e44      	subs	r4, r0, #1
    1c24:	b224      	sxth	r4, r4
    1c26:	e007      	b.n	1c38 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    1c28:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    1c2c:	d032      	beq.n	1c94 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    1c2e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1c30:	42b0      	cmp	r0, r6
    1c32:	d92f      	bls.n	1c94 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1c34:	3c01      	subs	r4, #1
    1c36:	b224      	sxth	r4, r4
    1c38:	2c00      	cmp	r4, #0
    1c3a:	db2a      	blt.n	1c92 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    1c3c:	9b01      	ldr	r3, [sp, #4]
    1c3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1c42:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1c46:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1c4a:	f7ff ffd5 	bl	1bf8 <pm_policy_state_lock_is_active>
    1c4e:	2800      	cmp	r0, #0
    1c50:	d1f0      	bne.n	1c34 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1c52:	6868      	ldr	r0, [r5, #4]
    1c54:	0c41      	lsrs	r1, r0, #17
    1c56:	03c0      	lsls	r0, r0, #15
    1c58:	4f10      	ldr	r7, [pc, #64]	; (1c9c <pm_policy_next_state+0x88>)
    1c5a:	19c0      	adds	r0, r0, r7
    1c5c:	4a10      	ldr	r2, [pc, #64]	; (1ca0 <pm_policy_next_state+0x8c>)
    1c5e:	f04f 0300 	mov.w	r3, #0
    1c62:	f141 0100 	adc.w	r1, r1, #0
    1c66:	f7fe fa4b 	bl	100 <__aeabi_uldivmod>
    1c6a:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1c6c:	68ab      	ldr	r3, [r5, #8]
    1c6e:	0c59      	lsrs	r1, r3, #17
    1c70:	03db      	lsls	r3, r3, #15
    1c72:	19d8      	adds	r0, r3, r7
    1c74:	4a0a      	ldr	r2, [pc, #40]	; (1ca0 <pm_policy_next_state+0x8c>)
    1c76:	f04f 0300 	mov.w	r3, #0
    1c7a:	f141 0100 	adc.w	r1, r1, #0
    1c7e:	f7fe fa3f 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1c82:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <pm_policy_next_state+0x90>)
    1c84:	681b      	ldr	r3, [r3, #0]
    1c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1c8a:	d0cd      	beq.n	1c28 <pm_policy_next_state+0x14>
    1c8c:	4283      	cmp	r3, r0
    1c8e:	d8cb      	bhi.n	1c28 <pm_policy_next_state+0x14>
    1c90:	e7d0      	b.n	1c34 <pm_policy_next_state+0x20>
	return NULL;
    1c92:	2500      	movs	r5, #0
}
    1c94:	4628      	mov	r0, r5
    1c96:	b002      	add	sp, #8
    1c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c9c:	000f423f 	.word	0x000f423f
    1ca0:	000f4240 	.word	0x000f4240
    1ca4:	2000400c 	.word	0x2000400c

00001ca8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1ca8:	b908      	cbnz	r0, 1cae <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <pm_state_cpu_get_all+0xc>)
    1cac:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1cae:	2000      	movs	r0, #0
    1cb0:	4770      	bx	lr
    1cb2:	bf00      	nop
    1cb4:	0000a048 	.word	0x0000a048

00001cb8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1cb8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1cba:	4802      	ldr	r0, [pc, #8]	; (1cc4 <nrf_cc3xx_platform_abort_init+0xc>)
    1cbc:	f006 fb5e 	bl	837c <nrf_cc3xx_platform_set_abort>
}
    1cc0:	bd08      	pop	{r3, pc}
    1cc2:	bf00      	nop
    1cc4:	0000a048 	.word	0x0000a048

00001cc8 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1cc8:	b1d0      	cbz	r0, 1d00 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1cca:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1ccc:	6842      	ldr	r2, [r0, #4]
    1cce:	2a04      	cmp	r2, #4
    1cd0:	d005      	beq.n	1cde <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1cd2:	b1d2      	cbz	r2, 1d0a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1cd4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1cd6:	f004 fb61 	bl	639c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1cda:	2000      	movs	r0, #0
    }
}
    1cdc:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1cde:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1ce0:	2200      	movs	r2, #0
    1ce2:	f3bf 8f5b 	dmb	ish
    1ce6:	e853 1f00 	ldrex	r1, [r3]
    1cea:	2901      	cmp	r1, #1
    1cec:	d103      	bne.n	1cf6 <mutex_unlock_platform+0x2e>
    1cee:	e843 2000 	strex	r0, r2, [r3]
    1cf2:	2800      	cmp	r0, #0
    1cf4:	d1f7      	bne.n	1ce6 <mutex_unlock_platform+0x1e>
    1cf6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1cfa:	d104      	bne.n	1d06 <mutex_unlock_platform+0x3e>
    1cfc:	4610      	mov	r0, r2
    1cfe:	e7ed      	b.n	1cdc <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1d00:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1d04:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d06:	4802      	ldr	r0, [pc, #8]	; (1d10 <mutex_unlock_platform+0x48>)
    1d08:	e7e8      	b.n	1cdc <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1d0a:	4802      	ldr	r0, [pc, #8]	; (1d14 <mutex_unlock_platform+0x4c>)
    1d0c:	e7e6      	b.n	1cdc <mutex_unlock_platform+0x14>
    1d0e:	bf00      	nop
    1d10:	ffff8fe9 	.word	0xffff8fe9
    1d14:	ffff8fea 	.word	0xffff8fea

00001d18 <mutex_lock_platform>:
    if(mutex == NULL) {
    1d18:	b320      	cbz	r0, 1d64 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1d1a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1d1c:	6842      	ldr	r2, [r0, #4]
    1d1e:	2a04      	cmp	r2, #4
    1d20:	d002      	beq.n	1d28 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1d22:	b992      	cbnz	r2, 1d4a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1d24:	4811      	ldr	r0, [pc, #68]	; (1d6c <mutex_lock_platform+0x54>)
    1d26:	e00f      	b.n	1d48 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1d28:	6803      	ldr	r3, [r0, #0]
    1d2a:	2201      	movs	r2, #1
    1d2c:	f3bf 8f5b 	dmb	ish
    1d30:	e853 1f00 	ldrex	r1, [r3]
    1d34:	2900      	cmp	r1, #0
    1d36:	d103      	bne.n	1d40 <mutex_lock_platform+0x28>
    1d38:	e843 2000 	strex	r0, r2, [r3]
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d1f7      	bne.n	1d30 <mutex_lock_platform+0x18>
    1d40:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d44:	d10c      	bne.n	1d60 <mutex_lock_platform+0x48>
    1d46:	2000      	movs	r0, #0
}
    1d48:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    1d4a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d54:	f004 fa02 	bl	615c <z_impl_k_mutex_lock>
        if (ret == 0) {
    1d58:	2800      	cmp	r0, #0
    1d5a:	d0f5      	beq.n	1d48 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1d5c:	4804      	ldr	r0, [pc, #16]	; (1d70 <mutex_lock_platform+0x58>)
    1d5e:	e7f3      	b.n	1d48 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d60:	4803      	ldr	r0, [pc, #12]	; (1d70 <mutex_lock_platform+0x58>)
    1d62:	e7f1      	b.n	1d48 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1d64:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1d68:	4770      	bx	lr
    1d6a:	bf00      	nop
    1d6c:	ffff8fea 	.word	0xffff8fea
    1d70:	ffff8fe9 	.word	0xffff8fe9

00001d74 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1d74:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1d76:	4604      	mov	r4, r0
    1d78:	b188      	cbz	r0, 1d9e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1d7a:	6863      	ldr	r3, [r4, #4]
    1d7c:	2b04      	cmp	r3, #4
    1d7e:	d00d      	beq.n	1d9c <mutex_free_platform+0x28>
    1d80:	2b08      	cmp	r3, #8
    1d82:	d00b      	beq.n	1d9c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1d84:	b153      	cbz	r3, 1d9c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1d86:	f013 0f02 	tst.w	r3, #2
    1d8a:	d00d      	beq.n	1da8 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1d8c:	4621      	mov	r1, r4
    1d8e:	4809      	ldr	r0, [pc, #36]	; (1db4 <mutex_free_platform+0x40>)
    1d90:	f003 ff2e 	bl	5bf0 <k_mem_slab_free>
        mutex->mutex = NULL;
    1d94:	2300      	movs	r3, #0
    1d96:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1d98:	2300      	movs	r3, #0
    1d9a:	6063      	str	r3, [r4, #4]
}
    1d9c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1d9e:	4b06      	ldr	r3, [pc, #24]	; (1db8 <mutex_free_platform+0x44>)
    1da0:	685b      	ldr	r3, [r3, #4]
    1da2:	4806      	ldr	r0, [pc, #24]	; (1dbc <mutex_free_platform+0x48>)
    1da4:	4798      	blx	r3
    1da6:	e7e8      	b.n	1d7a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1da8:	2214      	movs	r2, #20
    1daa:	2100      	movs	r1, #0
    1dac:	6820      	ldr	r0, [r4, #0]
    1dae:	f006 ff8e 	bl	8cce <memset>
    1db2:	e7f1      	b.n	1d98 <mutex_free_platform+0x24>
    1db4:	200045c8 	.word	0x200045c8
    1db8:	200040e8 	.word	0x200040e8
    1dbc:	0000a050 	.word	0x0000a050

00001dc0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1dc0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1dc2:	4604      	mov	r4, r0
    1dc4:	b178      	cbz	r0, 1de6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1dc6:	6863      	ldr	r3, [r4, #4]
    1dc8:	2b04      	cmp	r3, #4
    1dca:	d00b      	beq.n	1de4 <mutex_init_platform+0x24>
    1dcc:	2b08      	cmp	r3, #8
    1dce:	d009      	beq.n	1de4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1dd0:	b90b      	cbnz	r3, 1dd6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    1dd2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1dd4:	b163      	cbz	r3, 1df0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1dd6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1dd8:	f007 fc7c 	bl	96d4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1ddc:	6863      	ldr	r3, [r4, #4]
    1dde:	f043 0301 	orr.w	r3, r3, #1
    1de2:	6063      	str	r3, [r4, #4]
}
    1de4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1de6:	4b0f      	ldr	r3, [pc, #60]	; (1e24 <mutex_init_platform+0x64>)
    1de8:	685b      	ldr	r3, [r3, #4]
    1dea:	480f      	ldr	r0, [pc, #60]	; (1e28 <mutex_init_platform+0x68>)
    1dec:	4798      	blx	r3
    1dee:	e7ea      	b.n	1dc6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1df8:	4621      	mov	r1, r4
    1dfa:	480c      	ldr	r0, [pc, #48]	; (1e2c <mutex_init_platform+0x6c>)
    1dfc:	f003 fe82 	bl	5b04 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1e00:	b908      	cbnz	r0, 1e06 <mutex_init_platform+0x46>
    1e02:	6823      	ldr	r3, [r4, #0]
    1e04:	b91b      	cbnz	r3, 1e0e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <mutex_init_platform+0x64>)
    1e08:	685b      	ldr	r3, [r3, #4]
    1e0a:	4809      	ldr	r0, [pc, #36]	; (1e30 <mutex_init_platform+0x70>)
    1e0c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1e0e:	2214      	movs	r2, #20
    1e10:	2100      	movs	r1, #0
    1e12:	6820      	ldr	r0, [r4, #0]
    1e14:	f006 ff5b 	bl	8cce <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1e18:	6863      	ldr	r3, [r4, #4]
    1e1a:	f043 0302 	orr.w	r3, r3, #2
    1e1e:	6063      	str	r3, [r4, #4]
    1e20:	e7d9      	b.n	1dd6 <mutex_init_platform+0x16>
    1e22:	bf00      	nop
    1e24:	200040e8 	.word	0x200040e8
    1e28:	0000a050 	.word	0x0000a050
    1e2c:	200045c8 	.word	0x200045c8
    1e30:	0000a078 	.word	0x0000a078

00001e34 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1e34:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1e36:	2340      	movs	r3, #64	; 0x40
    1e38:	2214      	movs	r2, #20
    1e3a:	4904      	ldr	r1, [pc, #16]	; (1e4c <nrf_cc3xx_platform_mutex_init+0x18>)
    1e3c:	4804      	ldr	r0, [pc, #16]	; (1e50 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1e3e:	f007 fbf7 	bl	9630 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1e42:	4904      	ldr	r1, [pc, #16]	; (1e54 <nrf_cc3xx_platform_mutex_init+0x20>)
    1e44:	4804      	ldr	r0, [pc, #16]	; (1e58 <nrf_cc3xx_platform_mutex_init+0x24>)
    1e46:	f006 faf9 	bl	843c <nrf_cc3xx_platform_set_mutexes>
}
    1e4a:	bd08      	pop	{r3, pc}
    1e4c:	200045e8 	.word	0x200045e8
    1e50:	200045c8 	.word	0x200045c8
    1e54:	0000a0b8 	.word	0x0000a0b8
    1e58:	0000a0a8 	.word	0x0000a0a8

00001e5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1e5c:	4901      	ldr	r1, [pc, #4]	; (1e64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1e5e:	2210      	movs	r2, #16
	str	r2, [r1]
    1e60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1e62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1e64:	e000ed10 	.word	0xe000ed10

00001e68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1e68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1e6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1e6c:	f380 8811 	msr	BASEPRI, r0
	isb
    1e70:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1e74:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1e78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1e7a:	b662      	cpsie	i
	isb
    1e7c:	f3bf 8f6f 	isb	sy

	bx	lr
    1e80:	4770      	bx	lr
    1e82:	bf00      	nop

00001e84 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1e84:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1e86:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1e88:	f381 8811 	msr	BASEPRI, r1

	wfe
    1e8c:	bf20      	wfe

	msr	BASEPRI, r0
    1e8e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1e92:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1e94:	4770      	bx	lr
    1e96:	bf00      	nop

00001e98 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1e98:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1e9a:	2800      	cmp	r0, #0
    1e9c:	db07      	blt.n	1eae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e9e:	f000 021f 	and.w	r2, r0, #31
    1ea2:	0940      	lsrs	r0, r0, #5
    1ea4:	2301      	movs	r3, #1
    1ea6:	4093      	lsls	r3, r2
    1ea8:	4a01      	ldr	r2, [pc, #4]	; (1eb0 <arch_irq_enable+0x18>)
    1eaa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    1eae:	4770      	bx	lr
    1eb0:	e000e100 	.word	0xe000e100

00001eb4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1eb4:	0942      	lsrs	r2, r0, #5
    1eb6:	4b05      	ldr	r3, [pc, #20]	; (1ecc <arch_irq_is_enabled+0x18>)
    1eb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1ebc:	f000 001f 	and.w	r0, r0, #31
    1ec0:	2301      	movs	r3, #1
    1ec2:	fa03 f000 	lsl.w	r0, r3, r0
}
    1ec6:	4010      	ands	r0, r2
    1ec8:	4770      	bx	lr
    1eca:	bf00      	nop
    1ecc:	e000e100 	.word	0xe000e100

00001ed0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ed2:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1ed4:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1ed6:	2d07      	cmp	r5, #7
    1ed8:	d80b      	bhi.n	1ef2 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1eda:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1edc:	2800      	cmp	r0, #0
    1ede:	db1b      	blt.n	1f18 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ee0:	016d      	lsls	r5, r5, #5
    1ee2:	b2ed      	uxtb	r5, r5
    1ee4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1ee8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1eec:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    1ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ef2:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1ef4:	4f0c      	ldr	r7, [pc, #48]	; (1f28 <z_arm_irq_priority_set+0x58>)
    1ef6:	2357      	movs	r3, #87	; 0x57
    1ef8:	463a      	mov	r2, r7
    1efa:	490c      	ldr	r1, [pc, #48]	; (1f2c <z_arm_irq_priority_set+0x5c>)
    1efc:	480c      	ldr	r0, [pc, #48]	; (1f30 <z_arm_irq_priority_set+0x60>)
    1efe:	f006 fdac 	bl	8a5a <assert_print>
    1f02:	2307      	movs	r3, #7
    1f04:	4622      	mov	r2, r4
    1f06:	4631      	mov	r1, r6
    1f08:	480a      	ldr	r0, [pc, #40]	; (1f34 <z_arm_irq_priority_set+0x64>)
    1f0a:	f006 fda6 	bl	8a5a <assert_print>
    1f0e:	2157      	movs	r1, #87	; 0x57
    1f10:	4638      	mov	r0, r7
    1f12:	f006 fd9b 	bl	8a4c <assert_post_action>
    1f16:	e7e0      	b.n	1eda <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f18:	f000 000f 	and.w	r0, r0, #15
    1f1c:	016d      	lsls	r5, r5, #5
    1f1e:	b2ed      	uxtb	r5, r5
    1f20:	4b05      	ldr	r3, [pc, #20]	; (1f38 <z_arm_irq_priority_set+0x68>)
    1f22:	541d      	strb	r5, [r3, r0]
}
    1f24:	e7e4      	b.n	1ef0 <z_arm_irq_priority_set+0x20>
    1f26:	bf00      	nop
    1f28:	0000a0cc 	.word	0x0000a0cc
    1f2c:	0000a104 	.word	0x0000a104
    1f30:	00009cd0 	.word	0x00009cd0
    1f34:	0000a120 	.word	0x0000a120
    1f38:	e000ed14 	.word	0xe000ed14

00001f3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1f3c:	bf30      	wfi
    b z_SysNmiOnReset
    1f3e:	f7ff bffd 	b.w	1f3c <z_SysNmiOnReset>
    1f42:	bf00      	nop

00001f44 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1f44:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1f46:	4b0b      	ldr	r3, [pc, #44]	; (1f74 <z_arm_prep_c+0x30>)
    1f48:	4a0b      	ldr	r2, [pc, #44]	; (1f78 <z_arm_prep_c+0x34>)
    1f4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1f4e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1f50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1f58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1f5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1f64:	f003 fcfc 	bl	5960 <z_bss_zero>
	z_data_copy();
    1f68:	f005 fe06 	bl	7b78 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1f6c:	f000 fa74 	bl	2458 <z_arm_interrupt_init>
	z_cstart();
    1f70:	f003 fd54 	bl	5a1c <z_cstart>
    1f74:	e000ed00 	.word	0xe000ed00
    1f78:	00000000 	.word	0x00000000

00001f7c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1f7c:	4a0a      	ldr	r2, [pc, #40]	; (1fa8 <arch_swap+0x2c>)
    1f7e:	6893      	ldr	r3, [r2, #8]
    1f80:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1f84:	4909      	ldr	r1, [pc, #36]	; (1fac <arch_swap+0x30>)
    1f86:	6809      	ldr	r1, [r1, #0]
    1f88:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f8c:	4908      	ldr	r1, [pc, #32]	; (1fb0 <arch_swap+0x34>)
    1f8e:	684b      	ldr	r3, [r1, #4]
    1f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1f94:	604b      	str	r3, [r1, #4]
    1f96:	2300      	movs	r3, #0
    1f98:	f383 8811 	msr	BASEPRI, r3
    1f9c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1fa0:	6893      	ldr	r3, [r2, #8]
}
    1fa2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1fa6:	4770      	bx	lr
    1fa8:	2000504c 	.word	0x2000504c
    1fac:	0000a824 	.word	0x0000a824
    1fb0:	e000ed00 	.word	0xe000ed00

00001fb4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1fb4:	4913      	ldr	r1, [pc, #76]	; (2004 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1fb6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1fb8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1fbc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1fbe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1fc2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fc6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1fc8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1fcc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1fd0:	4f0d      	ldr	r7, [pc, #52]	; (2008 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1fd2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1fd6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1fd8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1fda:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1fdc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1fe0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1fe2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1fe6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1fea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1fec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1fee:	f000 fadd 	bl	25ac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ff2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ff6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1ffa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1ffe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2002:	4770      	bx	lr
    ldr r1, =_kernel
    2004:	2000504c 	.word	0x2000504c
    ldr v4, =_SCS_ICSR
    2008:	e000ed04 	.word	0xe000ed04

0000200c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    200c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2010:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2012:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2016:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    201a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    201c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2020:	2902      	cmp	r1, #2
    beq _oops
    2022:	d0ff      	beq.n	2024 <_oops>

00002024 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2024:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2026:	f006 fd2f 	bl	8a88 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    202a:	bd01      	pop	{r0, pc}

0000202c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    202c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    202e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2032:	490e      	ldr	r1, [pc, #56]	; (206c <arch_new_thread+0x40>)
    2034:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2038:	f021 0101 	bic.w	r1, r1, #1
    203c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2040:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2044:	9b01      	ldr	r3, [sp, #4]
    2046:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    204a:	9b02      	ldr	r3, [sp, #8]
    204c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2050:	9b03      	ldr	r3, [sp, #12]
    2052:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    205a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    205e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2060:	2300      	movs	r3, #0
    2062:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2066:	bc10      	pop	{r4}
    2068:	4770      	bx	lr
    206a:	bf00      	nop
    206c:	000088a5 	.word	0x000088a5

00002070 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2070:	4b12      	ldr	r3, [pc, #72]	; (20bc <z_check_thread_stack_fail+0x4c>)
    2072:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2074:	b302      	cbz	r2, 20b8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2076:	f110 0f16 	cmn.w	r0, #22
    207a:	d011      	beq.n	20a0 <z_check_thread_stack_fail+0x30>
    207c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2080:	f1a3 0c20 	sub.w	ip, r3, #32
    2084:	4584      	cmp	ip, r0
    2086:	d805      	bhi.n	2094 <z_check_thread_stack_fail+0x24>
    2088:	4283      	cmp	r3, r0
    208a:	d905      	bls.n	2098 <z_check_thread_stack_fail+0x28>
    208c:	428b      	cmp	r3, r1
    208e:	d805      	bhi.n	209c <z_check_thread_stack_fail+0x2c>
    2090:	2100      	movs	r1, #0
    2092:	e00b      	b.n	20ac <z_check_thread_stack_fail+0x3c>
    2094:	2100      	movs	r1, #0
    2096:	e009      	b.n	20ac <z_check_thread_stack_fail+0x3c>
    2098:	2100      	movs	r1, #0
    209a:	e007      	b.n	20ac <z_check_thread_stack_fail+0x3c>
    209c:	2101      	movs	r1, #1
    209e:	e005      	b.n	20ac <z_check_thread_stack_fail+0x3c>
    20a0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    20a4:	428b      	cmp	r3, r1
    20a6:	bf94      	ite	ls
    20a8:	2100      	movls	r1, #0
    20aa:	2101      	movhi	r1, #1
    20ac:	b909      	cbnz	r1, 20b2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    20ae:	2000      	movs	r0, #0
}
    20b0:	4770      	bx	lr
		return thread->stack_info.start;
    20b2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    20b6:	4770      	bx	lr
		return 0;
    20b8:	2000      	movs	r0, #0
    20ba:	4770      	bx	lr
    20bc:	2000504c 	.word	0x2000504c

000020c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    20c0:	b508      	push	{r3, lr}
    20c2:	460d      	mov	r5, r1
    20c4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    20c6:	4b08      	ldr	r3, [pc, #32]	; (20e8 <arch_switch_to_main_thread+0x28>)
    20c8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    20ca:	f000 fa6f 	bl	25ac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    20ce:	4620      	mov	r0, r4
    20d0:	f385 8809 	msr	PSP, r5
    20d4:	2100      	movs	r1, #0
    20d6:	b663      	cpsie	if
    20d8:	f381 8811 	msr	BASEPRI, r1
    20dc:	f3bf 8f6f 	isb	sy
    20e0:	2200      	movs	r2, #0
    20e2:	2300      	movs	r3, #0
    20e4:	f006 fbde 	bl	88a4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    20e8:	2000504c 	.word	0x2000504c

000020ec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    20ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    20ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    20f0:	4a0b      	ldr	r2, [pc, #44]	; (2120 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    20f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    20f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    20f6:	bf1e      	ittt	ne
	movne	r1, #0
    20f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    20fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    20fc:	f007 face 	blne	969c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2100:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2102:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2106:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    210a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    210e:	4905      	ldr	r1, [pc, #20]	; (2124 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2110:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2112:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2114:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2116:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    211a:	4903      	ldr	r1, [pc, #12]	; (2128 <_isr_wrapper+0x3c>)
	bx r1
    211c:	4708      	bx	r1
    211e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2120:	2000504c 	.word	0x2000504c
	ldr r1, =_sw_isr_table
    2124:	000098a0 	.word	0x000098a0
	ldr r1, =z_arm_int_exit
    2128:	0000212d 	.word	0x0000212d

0000212c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    212c:	4b04      	ldr	r3, [pc, #16]	; (2140 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    212e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2130:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2132:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2134:	d003      	beq.n	213e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2136:	4903      	ldr	r1, [pc, #12]	; (2144 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    213c:	600a      	str	r2, [r1, #0]

0000213e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    213e:	4770      	bx	lr
	ldr r3, =_kernel
    2140:	2000504c 	.word	0x2000504c
	ldr r1, =_SCS_ICSR
    2144:	e000ed04 	.word	0xe000ed04

00002148 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2148:	b510      	push	{r4, lr}
    214a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    214c:	4b12      	ldr	r3, [pc, #72]	; (2198 <bus_fault+0x50>)
    214e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2154:	f413 7f00 	tst.w	r3, #512	; 0x200
    2158:	d00b      	beq.n	2172 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    215a:	4b0f      	ldr	r3, [pc, #60]	; (2198 <bus_fault+0x50>)
    215c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2160:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2164:	d005      	beq.n	2172 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2166:	b121      	cbz	r1, 2172 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2168:	4a0b      	ldr	r2, [pc, #44]	; (2198 <bus_fault+0x50>)
    216a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    216c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2170:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2172:	4b09      	ldr	r3, [pc, #36]	; (2198 <bus_fault+0x50>)
    2174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2178:	f413 7f80 	tst.w	r3, #256	; 0x100
    217c:	d101      	bne.n	2182 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    217e:	4b06      	ldr	r3, [pc, #24]	; (2198 <bus_fault+0x50>)
    2180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2182:	4a05      	ldr	r2, [pc, #20]	; (2198 <bus_fault+0x50>)
    2184:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2186:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    218a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    218c:	2101      	movs	r1, #1
    218e:	f006 fc8d 	bl	8aac <memory_fault_recoverable>
    2192:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2194:	2000      	movs	r0, #0
    2196:	bd10      	pop	{r4, pc}
    2198:	e000ed00 	.word	0xe000ed00

0000219c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    219c:	4b07      	ldr	r3, [pc, #28]	; (21bc <usage_fault+0x20>)
    219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    21a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    21a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    21a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    21aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    21ac:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    21b0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    21b4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    21b6:	2000      	movs	r0, #0
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	e000ed00 	.word	0xe000ed00

000021c0 <mem_manage_fault>:
{
    21c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c2:	4605      	mov	r5, r0
    21c4:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    21c6:	4b30      	ldr	r3, [pc, #192]	; (2288 <mem_manage_fault+0xc8>)
    21c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    21ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    21cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21ce:	f013 0f02 	tst.w	r3, #2
    21d2:	d00c      	beq.n	21ee <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    21d4:	4b2c      	ldr	r3, [pc, #176]	; (2288 <mem_manage_fault+0xc8>)
    21d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    21d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21da:	f013 0f80 	tst.w	r3, #128	; 0x80
    21de:	d02f      	beq.n	2240 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    21e0:	b139      	cbz	r1, 21f2 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    21e2:	4a29      	ldr	r2, [pc, #164]	; (2288 <mem_manage_fault+0xc8>)
    21e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    21ea:	6293      	str	r3, [r2, #40]	; 0x28
    21ec:	e001      	b.n	21f2 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    21ee:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    21f2:	4b25      	ldr	r3, [pc, #148]	; (2288 <mem_manage_fault+0xc8>)
    21f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    21f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    21f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21fa:	f013 0f10 	tst.w	r3, #16
    21fe:	d104      	bne.n	220a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2200:	4b21      	ldr	r3, [pc, #132]	; (2288 <mem_manage_fault+0xc8>)
    2202:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2204:	f014 0402 	ands.w	r4, r4, #2
    2208:	d004      	beq.n	2214 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    220a:	4b1f      	ldr	r3, [pc, #124]	; (2288 <mem_manage_fault+0xc8>)
    220c:	685c      	ldr	r4, [r3, #4]
    220e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    2212:	d118      	bne.n	2246 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2214:	4b1c      	ldr	r3, [pc, #112]	; (2288 <mem_manage_fault+0xc8>)
    2216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2218:	f013 0f20 	tst.w	r3, #32
    221c:	d004      	beq.n	2228 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    221e:	4a1a      	ldr	r2, [pc, #104]	; (2288 <mem_manage_fault+0xc8>)
    2220:	6a53      	ldr	r3, [r2, #36]	; 0x24
    2222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2226:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2228:	4a17      	ldr	r2, [pc, #92]	; (2288 <mem_manage_fault+0xc8>)
    222a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    222c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2230:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2232:	2101      	movs	r1, #1
    2234:	4628      	mov	r0, r5
    2236:	f006 fc39 	bl	8aac <memory_fault_recoverable>
    223a:	7030      	strb	r0, [r6, #0]
}
    223c:	4620      	mov	r0, r4
    223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t mmfar = -EINVAL;
    2240:	f06f 0015 	mvn.w	r0, #21
    2244:	e7d5      	b.n	21f2 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2246:	4629      	mov	r1, r5
    2248:	f7ff ff12 	bl	2070 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    224c:	4607      	mov	r7, r0
    224e:	b9b0      	cbnz	r0, 227e <mem_manage_fault+0xbe>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2250:	4b0d      	ldr	r3, [pc, #52]	; (2288 <mem_manage_fault+0xc8>)
    2252:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2254:	f014 0410 	ands.w	r4, r4, #16
    2258:	d0dc      	beq.n	2214 <mem_manage_fault+0x54>
    225a:	4c0c      	ldr	r4, [pc, #48]	; (228c <mem_manage_fault+0xcc>)
    225c:	f240 1349 	movw	r3, #329	; 0x149
    2260:	4622      	mov	r2, r4
    2262:	490b      	ldr	r1, [pc, #44]	; (2290 <mem_manage_fault+0xd0>)
    2264:	480b      	ldr	r0, [pc, #44]	; (2294 <mem_manage_fault+0xd4>)
    2266:	f006 fbf8 	bl	8a5a <assert_print>
    226a:	480b      	ldr	r0, [pc, #44]	; (2298 <mem_manage_fault+0xd8>)
    226c:	f006 fbf5 	bl	8a5a <assert_print>
    2270:	f240 1149 	movw	r1, #329	; 0x149
    2274:	4620      	mov	r0, r4
    2276:	f006 fbe9 	bl	8a4c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    227a:	463c      	mov	r4, r7
    227c:	e7ca      	b.n	2214 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    227e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2282:	2402      	movs	r4, #2
    2284:	e7c6      	b.n	2214 <mem_manage_fault+0x54>
    2286:	bf00      	nop
    2288:	e000ed00 	.word	0xe000ed00
    228c:	0000a160 	.word	0x0000a160
    2290:	0000a19c 	.word	0x0000a19c
    2294:	00009cd0 	.word	0x00009cd0
    2298:	0000a1e8 	.word	0x0000a1e8

0000229c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    229c:	b538      	push	{r3, r4, r5, lr}
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    229e:	2300      	movs	r3, #0
    22a0:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22a2:	4b2c      	ldr	r3, [pc, #176]	; (2354 <hard_fault+0xb8>)
    22a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    22a6:	f014 0402 	ands.w	r4, r4, #2
    22aa:	d14f      	bne.n	234c <hard_fault+0xb0>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    22ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22ae:	2b00      	cmp	r3, #0
    22b0:	db4d      	blt.n	234e <hard_fault+0xb2>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    22b2:	4b28      	ldr	r3, [pc, #160]	; (2354 <hard_fault+0xb8>)
    22b4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    22b6:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    22ba:	d035      	beq.n	2328 <hard_fault+0x8c>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    22bc:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    22be:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    22c2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    22c6:	429a      	cmp	r2, r3
    22c8:	d00f      	beq.n	22ea <hard_fault+0x4e>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    22ca:	4b22      	ldr	r3, [pc, #136]	; (2354 <hard_fault+0xb8>)
    22cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    22d0:	b96b      	cbnz	r3, 22ee <hard_fault+0x52>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    22d2:	4b20      	ldr	r3, [pc, #128]	; (2354 <hard_fault+0xb8>)
    22d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    22d8:	b97b      	cbnz	r3, 22fa <hard_fault+0x5e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    22da:	4b1e      	ldr	r3, [pc, #120]	; (2354 <hard_fault+0xb8>)
    22dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    22de:	b29b      	uxth	r3, r3
    22e0:	b18b      	cbz	r3, 2306 <hard_fault+0x6a>
			reason = usage_fault(esf);
    22e2:	f7ff ff5b 	bl	219c <usage_fault>
    22e6:	4604      	mov	r4, r0
    22e8:	e031      	b.n	234e <hard_fault+0xb2>
			reason = esf->basic.r0;
    22ea:	6804      	ldr	r4, [r0, #0]
    22ec:	e02f      	b.n	234e <hard_fault+0xb2>
			reason = mem_manage_fault(esf, 1, recoverable);
    22ee:	460a      	mov	r2, r1
    22f0:	2101      	movs	r1, #1
    22f2:	f7ff ff65 	bl	21c0 <mem_manage_fault>
    22f6:	4604      	mov	r4, r0
    22f8:	e029      	b.n	234e <hard_fault+0xb2>
			reason = bus_fault(esf, 1, recoverable);
    22fa:	460a      	mov	r2, r1
    22fc:	2101      	movs	r1, #1
    22fe:	f7ff ff23 	bl	2148 <bus_fault>
    2302:	4604      	mov	r4, r0
    2304:	e023      	b.n	234e <hard_fault+0xb2>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
		} else if (SAU->SFSR != 0) {
			secure_fault(esf);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
		} else {
			__ASSERT(0,
    2306:	4d14      	ldr	r5, [pc, #80]	; (2358 <hard_fault+0xbc>)
    2308:	f240 23cd 	movw	r3, #717	; 0x2cd
    230c:	462a      	mov	r2, r5
    230e:	4913      	ldr	r1, [pc, #76]	; (235c <hard_fault+0xc0>)
    2310:	4813      	ldr	r0, [pc, #76]	; (2360 <hard_fault+0xc4>)
    2312:	f006 fba2 	bl	8a5a <assert_print>
    2316:	4813      	ldr	r0, [pc, #76]	; (2364 <hard_fault+0xc8>)
    2318:	f006 fb9f 	bl	8a5a <assert_print>
    231c:	f240 21cd 	movw	r1, #717	; 0x2cd
    2320:	4628      	mov	r0, r5
    2322:	f006 fb93 	bl	8a4c <assert_post_action>
    2326:	e012      	b.n	234e <hard_fault+0xb2>
			"Fault escalation without FSR info");
		}
	} else {
		__ASSERT(0,
    2328:	4c0b      	ldr	r4, [pc, #44]	; (2358 <hard_fault+0xbc>)
    232a:	f240 23d1 	movw	r3, #721	; 0x2d1
    232e:	4622      	mov	r2, r4
    2330:	490a      	ldr	r1, [pc, #40]	; (235c <hard_fault+0xc0>)
    2332:	480b      	ldr	r0, [pc, #44]	; (2360 <hard_fault+0xc4>)
    2334:	f006 fb91 	bl	8a5a <assert_print>
    2338:	480b      	ldr	r0, [pc, #44]	; (2368 <hard_fault+0xcc>)
    233a:	f006 fb8e 	bl	8a5a <assert_print>
    233e:	f240 21d1 	movw	r1, #721	; 0x2d1
    2342:	4620      	mov	r0, r4
    2344:	f006 fb82 	bl	8a4c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2348:	462c      	mov	r4, r5
    234a:	e000      	b.n	234e <hard_fault+0xb2>
    234c:	2400      	movs	r4, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    234e:	4620      	mov	r0, r4
    2350:	bd38      	pop	{r3, r4, r5, pc}
    2352:	bf00      	nop
    2354:	e000ed00 	.word	0xe000ed00
    2358:	0000a160 	.word	0x0000a160
    235c:	00009ccc 	.word	0x00009ccc
    2360:	00009cd0 	.word	0x00009cd0
    2364:	0000a20c 	.word	0x0000a20c
    2368:	0000a230 	.word	0x0000a230

0000236c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    236c:	b5f0      	push	{r4, r5, r6, r7, lr}
    236e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2370:	4b2b      	ldr	r3, [pc, #172]	; (2420 <z_arm_fault+0xb4>)
    2372:	685d      	ldr	r5, [r3, #4]
    2374:	f3c5 0508 	ubfx	r5, r5, #0, #9
    2378:	2300      	movs	r3, #0
    237a:	f383 8811 	msr	BASEPRI, r3
    237e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2382:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2386:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    238a:	d10d      	bne.n	23a8 <z_arm_fault+0x3c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    238c:	f002 030c 	and.w	r3, r2, #12
    2390:	2b08      	cmp	r3, #8
    2392:	d027      	beq.n	23e4 <z_arm_fault+0x78>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2394:	f012 0f08 	tst.w	r2, #8
    2398:	d003      	beq.n	23a2 <z_arm_fault+0x36>
			ptr_esf =  (z_arch_esf_t *)psp;
    239a:	460c      	mov	r4, r1
	*nested_exc = false;
    239c:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    239e:	b9ac      	cbnz	r4, 23cc <z_arm_fault+0x60>
    23a0:	e004      	b.n	23ac <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    23a2:	4604      	mov	r4, r0
			*nested_exc = true;
    23a4:	2601      	movs	r6, #1
    23a6:	e7fa      	b.n	239e <z_arm_fault+0x32>
	*nested_exc = false;
    23a8:	2600      	movs	r6, #0
		return NULL;
    23aa:	4634      	mov	r4, r6
	__ASSERT(esf != NULL,
    23ac:	4f1d      	ldr	r7, [pc, #116]	; (2424 <z_arm_fault+0xb8>)
    23ae:	f240 33fb 	movw	r3, #1019	; 0x3fb
    23b2:	463a      	mov	r2, r7
    23b4:	491c      	ldr	r1, [pc, #112]	; (2428 <z_arm_fault+0xbc>)
    23b6:	481d      	ldr	r0, [pc, #116]	; (242c <z_arm_fault+0xc0>)
    23b8:	f006 fb4f 	bl	8a5a <assert_print>
    23bc:	481c      	ldr	r0, [pc, #112]	; (2430 <z_arm_fault+0xc4>)
    23be:	f006 fb4c 	bl	8a5a <assert_print>
    23c2:	f240 31fb 	movw	r1, #1019	; 0x3fb
    23c6:	4638      	mov	r0, r7
    23c8:	f006 fb40 	bl	8a4c <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    23cc:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    23d0:	4629      	mov	r1, r5
    23d2:	4620      	mov	r0, r4
    23d4:	f006 fb6f 	bl	8ab6 <fault_handle>
    23d8:	4605      	mov	r5, r0
	if (recoverable) {
    23da:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    23de:	b123      	cbz	r3, 23ea <z_arm_fault+0x7e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    23e0:	b00b      	add	sp, #44	; 0x2c
    23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*nested_exc = false;
    23e4:	2600      	movs	r6, #0
		return NULL;
    23e6:	4634      	mov	r4, r6
    23e8:	e7e0      	b.n	23ac <z_arm_fault+0x40>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    23ea:	2220      	movs	r2, #32
    23ec:	4621      	mov	r1, r4
    23ee:	a801      	add	r0, sp, #4
    23f0:	f006 fc3e 	bl	8c70 <memcpy>
	if (nested_exc) {
    23f4:	b14e      	cbz	r6, 240a <z_arm_fault+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    23f6:	9b08      	ldr	r3, [sp, #32]
    23f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    23fc:	b95a      	cbnz	r2, 2416 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    23fe:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2402:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2406:	9308      	str	r3, [sp, #32]
    2408:	e005      	b.n	2416 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    240a:	9b08      	ldr	r3, [sp, #32]
    240c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2410:	f023 0301 	bic.w	r3, r3, #1
    2414:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    2416:	a901      	add	r1, sp, #4
    2418:	4628      	mov	r0, r5
    241a:	f006 fb31 	bl	8a80 <z_arm_fatal_error>
    241e:	e7df      	b.n	23e0 <z_arm_fault+0x74>
    2420:	e000ed00 	.word	0xe000ed00
    2424:	0000a160 	.word	0x0000a160
    2428:	0000a260 	.word	0x0000a260
    242c:	00009cd0 	.word	0x00009cd0
    2430:	0000a274 	.word	0x0000a274

00002434 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2434:	4a02      	ldr	r2, [pc, #8]	; (2440 <z_arm_fault_init+0xc>)
    2436:	6953      	ldr	r3, [r2, #20]
    2438:	f043 0310 	orr.w	r3, r3, #16
    243c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    243e:	4770      	bx	lr
    2440:	e000ed00 	.word	0xe000ed00

00002444 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2444:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2448:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    244c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    244e:	4672      	mov	r2, lr
	bl z_arm_fault
    2450:	f7ff ff8c 	bl	236c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2454:	bd01      	pop	{r0, pc}
    2456:	bf00      	nop

00002458 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2458:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    245a:	e006      	b.n	246a <z_arm_interrupt_init+0x12>
    245c:	f002 010f 	and.w	r1, r2, #15
    2460:	4b09      	ldr	r3, [pc, #36]	; (2488 <z_arm_interrupt_init+0x30>)
    2462:	440b      	add	r3, r1
    2464:	2120      	movs	r1, #32
    2466:	7619      	strb	r1, [r3, #24]
    2468:	3201      	adds	r2, #1
    246a:	2a2f      	cmp	r2, #47	; 0x2f
    246c:	dc0a      	bgt.n	2484 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    246e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2470:	2b00      	cmp	r3, #0
    2472:	dbf3      	blt.n	245c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2474:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2478:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    247c:	2120      	movs	r1, #32
    247e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2482:	e7f1      	b.n	2468 <z_arm_interrupt_init+0x10>
	}
}
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	e000ecfc 	.word	0xe000ecfc

0000248c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    248c:	2000      	movs	r0, #0
    msr CONTROL, r0
    248e:	f380 8814 	msr	CONTROL, r0
    isb
    2492:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2496:	f007 f98d 	bl	97b4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    249a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    249c:	490d      	ldr	r1, [pc, #52]	; (24d4 <__start+0x48>)
    str r0, [r1]
    249e:	6008      	str	r0, [r1, #0]
    dsb
    24a0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24a4:	480c      	ldr	r0, [pc, #48]	; (24d8 <__start+0x4c>)
    msr msp, r0
    24a6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    24aa:	f000 f82d 	bl	2508 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    24ae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24b0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    24b4:	4809      	ldr	r0, [pc, #36]	; (24dc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    24b6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    24ba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    24bc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    24c0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    24c4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    24c6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    24c8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    24cc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    24d0:	f7ff fd38 	bl	1f44 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    24d4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24d8:	200062e0 	.word	0x200062e0
    ldr r0, =z_interrupt_stacks
    24dc:	20006460 	.word	0x20006460

000024e0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    24e0:	4b08      	ldr	r3, [pc, #32]	; (2504 <z_arm_clear_arm_mpu_config+0x24>)
    24e2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    24e6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    24ea:	2300      	movs	r3, #0
    24ec:	e006      	b.n	24fc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    24ee:	4a05      	ldr	r2, [pc, #20]	; (2504 <z_arm_clear_arm_mpu_config+0x24>)
    24f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    24f4:	2100      	movs	r1, #0
    24f6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    24fa:	3301      	adds	r3, #1
    24fc:	4283      	cmp	r3, r0
    24fe:	dbf6      	blt.n	24ee <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	e000ed00 	.word	0xe000ed00

00002508 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2508:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    250a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    250c:	2400      	movs	r4, #0
    250e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2512:	f7ff ffe5 	bl	24e0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2516:	4623      	mov	r3, r4
    2518:	e008      	b.n	252c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    251a:	f103 0120 	add.w	r1, r3, #32
    251e:	4a0e      	ldr	r2, [pc, #56]	; (2558 <z_arm_init_arch_hw_at_boot+0x50>)
    2520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2524:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2528:	3301      	adds	r3, #1
    252a:	b2db      	uxtb	r3, r3
    252c:	2b07      	cmp	r3, #7
    252e:	d9f4      	bls.n	251a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2530:	2300      	movs	r3, #0
    2532:	e008      	b.n	2546 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2534:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2538:	4a07      	ldr	r2, [pc, #28]	; (2558 <z_arm_init_arch_hw_at_boot+0x50>)
    253a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    253e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2542:	3301      	adds	r3, #1
    2544:	b2db      	uxtb	r3, r3
    2546:	2b07      	cmp	r3, #7
    2548:	d9f4      	bls.n	2534 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    254a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    254c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2550:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2554:	bd10      	pop	{r4, pc}
    2556:	bf00      	nop
    2558:	e000e100 	.word	0xe000e100

0000255c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    255c:	b508      	push	{r3, lr}
	if (_current == thread) {
    255e:	4b0a      	ldr	r3, [pc, #40]	; (2588 <z_impl_k_thread_abort+0x2c>)
    2560:	689b      	ldr	r3, [r3, #8]
    2562:	4283      	cmp	r3, r0
    2564:	d002      	beq.n	256c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    2566:	f005 fa65 	bl	7a34 <z_thread_abort>
}
    256a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    256c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2570:	2b00      	cmp	r3, #0
    2572:	d0f8      	beq.n	2566 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <z_impl_k_thread_abort+0x30>)
    2576:	685a      	ldr	r2, [r3, #4]
    2578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    257c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    257e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2584:	625a      	str	r2, [r3, #36]	; 0x24
    2586:	e7ee      	b.n	2566 <z_impl_k_thread_abort+0xa>
    2588:	2000504c 	.word	0x2000504c
    258c:	e000ed00 	.word	0xe000ed00

00002590 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2590:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2592:	4b03      	ldr	r3, [pc, #12]	; (25a0 <z_arm_configure_static_mpu_regions+0x10>)
    2594:	4a03      	ldr	r2, [pc, #12]	; (25a4 <z_arm_configure_static_mpu_regions+0x14>)
    2596:	2101      	movs	r1, #1
    2598:	4803      	ldr	r0, [pc, #12]	; (25a8 <z_arm_configure_static_mpu_regions+0x18>)
    259a:	f000 f867 	bl	266c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    259e:	bd08      	pop	{r3, pc}
    25a0:	20040000 	.word	0x20040000
    25a4:	20000000 	.word	0x20000000
    25a8:	0000a2b4 	.word	0x0000a2b4

000025ac <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    25ac:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    25ae:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    25b2:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    25b4:	4804      	ldr	r0, [pc, #16]	; (25c8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    25b6:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    25b8:	2320      	movs	r3, #32
    25ba:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    25bc:	4b03      	ldr	r3, [pc, #12]	; (25cc <z_arm_configure_dynamic_mpu_regions+0x20>)
    25be:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    25c0:	2101      	movs	r1, #1
    25c2:	f000 f875 	bl	26b0 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    25c6:	bd08      	pop	{r3, pc}
    25c8:	20004ae8 	.word	0x20004ae8
    25cc:	150b0000 	.word	0x150b0000

000025d0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    25d0:	4a08      	ldr	r2, [pc, #32]	; (25f4 <region_init+0x24>)
    25d2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25d6:	680b      	ldr	r3, [r1, #0]
    25d8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    25dc:	4303      	orrs	r3, r0
    25de:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    25e6:	688b      	ldr	r3, [r1, #8]
    25e8:	f043 0301 	orr.w	r3, r3, #1
    25ec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    25f0:	4770      	bx	lr
    25f2:	bf00      	nop
    25f4:	e000ed00 	.word	0xe000ed00

000025f8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    25f8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    25fa:	4c03      	ldr	r4, [pc, #12]	; (2608 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    25fc:	2301      	movs	r3, #1
    25fe:	7822      	ldrb	r2, [r4, #0]
    2600:	f006 fab7 	bl	8b72 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2604:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2606:	bd10      	pop	{r4, pc}
    2608:	20005274 	.word	0x20005274

0000260c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    260c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    260e:	2300      	movs	r3, #0
    2610:	4a09      	ldr	r2, [pc, #36]	; (2638 <mpu_configure_dynamic_mpu_regions+0x2c>)
    2612:	7812      	ldrb	r2, [r2, #0]
    2614:	f006 faad 	bl	8b72 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2618:	f110 0f16 	cmn.w	r0, #22
    261c:	d00a      	beq.n	2634 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    261e:	4603      	mov	r3, r0
    2620:	e006      	b.n	2630 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    2622:	4a06      	ldr	r2, [pc, #24]	; (263c <mpu_configure_dynamic_mpu_regions+0x30>)
    2624:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2628:	2100      	movs	r1, #0
    262a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    262e:	3301      	adds	r3, #1
    2630:	2b07      	cmp	r3, #7
    2632:	ddf6      	ble.n	2622 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    2634:	bd08      	pop	{r3, pc}
    2636:	bf00      	nop
    2638:	20005274 	.word	0x20005274
    263c:	e000ed00 	.word	0xe000ed00

00002640 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2640:	4b04      	ldr	r3, [pc, #16]	; (2654 <arm_core_mpu_enable+0x14>)
    2642:	2205      	movs	r2, #5
    2644:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    264c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2650:	4770      	bx	lr
    2652:	bf00      	nop
    2654:	e000ed00 	.word	0xe000ed00

00002658 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2658:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <arm_core_mpu_disable+0x10>)
    265e:	2200      	movs	r2, #0
    2660:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2664:	4770      	bx	lr
    2666:	bf00      	nop
    2668:	e000ed00 	.word	0xe000ed00

0000266c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    266c:	b538      	push	{r3, r4, r5, lr}
    266e:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2670:	f7ff ffc2 	bl	25f8 <mpu_configure_static_mpu_regions>
    2674:	f110 0f16 	cmn.w	r0, #22
    2678:	d000      	beq.n	267c <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    267a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    267c:	4d08      	ldr	r5, [pc, #32]	; (26a0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    267e:	f240 1311 	movw	r3, #273	; 0x111
    2682:	462a      	mov	r2, r5
    2684:	4907      	ldr	r1, [pc, #28]	; (26a4 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    2686:	4808      	ldr	r0, [pc, #32]	; (26a8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    2688:	f006 f9e7 	bl	8a5a <assert_print>
    268c:	4621      	mov	r1, r4
    268e:	4807      	ldr	r0, [pc, #28]	; (26ac <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2690:	f006 f9e3 	bl	8a5a <assert_print>
    2694:	f240 1111 	movw	r1, #273	; 0x111
    2698:	4628      	mov	r0, r5
    269a:	f006 f9d7 	bl	8a4c <assert_post_action>
}
    269e:	e7ec      	b.n	267a <arm_core_mpu_configure_static_mpu_regions+0xe>
    26a0:	0000a2c0 	.word	0x0000a2c0
    26a4:	00009ccc 	.word	0x00009ccc
    26a8:	00009cd0 	.word	0x00009cd0
    26ac:	0000a2f8 	.word	0x0000a2f8

000026b0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    26b0:	b538      	push	{r3, r4, r5, lr}
    26b2:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    26b4:	f7ff ffaa 	bl	260c <mpu_configure_dynamic_mpu_regions>
    26b8:	f110 0f16 	cmn.w	r0, #22
    26bc:	d000      	beq.n	26c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    26be:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    26c0:	4d08      	ldr	r5, [pc, #32]	; (26e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    26c2:	f44f 7398 	mov.w	r3, #304	; 0x130
    26c6:	462a      	mov	r2, r5
    26c8:	4907      	ldr	r1, [pc, #28]	; (26e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    26ca:	4808      	ldr	r0, [pc, #32]	; (26ec <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    26cc:	f006 f9c5 	bl	8a5a <assert_print>
    26d0:	4621      	mov	r1, r4
    26d2:	4807      	ldr	r0, [pc, #28]	; (26f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    26d4:	f006 f9c1 	bl	8a5a <assert_print>
    26d8:	f44f 7198 	mov.w	r1, #304	; 0x130
    26dc:	4628      	mov	r0, r5
    26de:	f006 f9b5 	bl	8a4c <assert_post_action>
}
    26e2:	e7ec      	b.n	26be <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    26e4:	0000a2c0 	.word	0x0000a2c0
    26e8:	00009ccc 	.word	0x00009ccc
    26ec:	00009cd0 	.word	0x00009cd0
    26f0:	0000a324 	.word	0x0000a324

000026f4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    26f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    26f6:	4b24      	ldr	r3, [pc, #144]	; (2788 <z_arm_mpu_init+0x94>)
    26f8:	681d      	ldr	r5, [r3, #0]
    26fa:	2d08      	cmp	r5, #8
    26fc:	d803      	bhi.n	2706 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    26fe:	f7ff ffab 	bl	2658 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2702:	2400      	movs	r4, #0
    2704:	e01e      	b.n	2744 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    2706:	4c21      	ldr	r4, [pc, #132]	; (278c <z_arm_mpu_init+0x98>)
    2708:	f44f 73a4 	mov.w	r3, #328	; 0x148
    270c:	4622      	mov	r2, r4
    270e:	4920      	ldr	r1, [pc, #128]	; (2790 <z_arm_mpu_init+0x9c>)
    2710:	4820      	ldr	r0, [pc, #128]	; (2794 <z_arm_mpu_init+0xa0>)
    2712:	f006 f9a2 	bl	8a5a <assert_print>
    2716:	2208      	movs	r2, #8
    2718:	4629      	mov	r1, r5
    271a:	481f      	ldr	r0, [pc, #124]	; (2798 <z_arm_mpu_init+0xa4>)
    271c:	f006 f99d 	bl	8a5a <assert_print>
    2720:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2724:	4620      	mov	r0, r4
    2726:	f006 f991 	bl	8a4c <assert_post_action>
		return -1;
    272a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    272e:	e017      	b.n	2760 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2730:	4b15      	ldr	r3, [pc, #84]	; (2788 <z_arm_mpu_init+0x94>)
    2732:	6859      	ldr	r1, [r3, #4]
    2734:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2738:	0093      	lsls	r3, r2, #2
    273a:	4419      	add	r1, r3
    273c:	4620      	mov	r0, r4
    273e:	f7ff ff47 	bl	25d0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2742:	3401      	adds	r4, #1
    2744:	42a5      	cmp	r5, r4
    2746:	d8f3      	bhi.n	2730 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2748:	4b14      	ldr	r3, [pc, #80]	; (279c <z_arm_mpu_init+0xa8>)
    274a:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    274c:	f7ff ff78 	bl	2640 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    2750:	4b13      	ldr	r3, [pc, #76]	; (27a0 <z_arm_mpu_init+0xac>)
    2752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    2756:	f3c3 2307 	ubfx	r3, r3, #8, #8
    275a:	2b08      	cmp	r3, #8
    275c:	d101      	bne.n	2762 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    275e:	2000      	movs	r0, #0
}
    2760:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    2762:	4c0a      	ldr	r4, [pc, #40]	; (278c <z_arm_mpu_init+0x98>)
    2764:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2768:	4622      	mov	r2, r4
    276a:	490e      	ldr	r1, [pc, #56]	; (27a4 <z_arm_mpu_init+0xb0>)
    276c:	4809      	ldr	r0, [pc, #36]	; (2794 <z_arm_mpu_init+0xa0>)
    276e:	f006 f974 	bl	8a5a <assert_print>
    2772:	480d      	ldr	r0, [pc, #52]	; (27a8 <z_arm_mpu_init+0xb4>)
    2774:	f006 f971 	bl	8a5a <assert_print>
    2778:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    277c:	4620      	mov	r0, r4
    277e:	f006 f965 	bl	8a4c <assert_post_action>
	return 0;
    2782:	2000      	movs	r0, #0
    2784:	e7ec      	b.n	2760 <z_arm_mpu_init+0x6c>
    2786:	bf00      	nop
    2788:	0000a40c 	.word	0x0000a40c
    278c:	0000a2c0 	.word	0x0000a2c0
    2790:	00009ccc 	.word	0x00009ccc
    2794:	00009cd0 	.word	0x00009cd0
    2798:	0000a354 	.word	0x0000a354
    279c:	20005274 	.word	0x20005274
    27a0:	e000ed00 	.word	0xe000ed00
    27a4:	0000a388 	.word	0x0000a388
    27a8:	0000a3d8 	.word	0x0000a3d8

000027ac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    27ac:	4b01      	ldr	r3, [pc, #4]	; (27b4 <__stdout_hook_install+0x8>)
    27ae:	6018      	str	r0, [r3, #0]
}
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop
    27b4:	20004030 	.word	0x20004030

000027b8 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    27b8:	3902      	subs	r1, #2
    27ba:	2901      	cmp	r1, #1
    27bc:	d804      	bhi.n	27c8 <z_impl_zephyr_fputc+0x10>
{
    27be:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    27c0:	4b03      	ldr	r3, [pc, #12]	; (27d0 <z_impl_zephyr_fputc+0x18>)
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	4798      	blx	r3
}
    27c6:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    27c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    27cc:	4770      	bx	lr
    27ce:	bf00      	nop
    27d0:	20004030 	.word	0x20004030

000027d4 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    27d4:	b40f      	push	{r0, r1, r2, r3}
    27d6:	b500      	push	{lr}
    27d8:	b083      	sub	sp, #12
    27da:	ab04      	add	r3, sp, #16
    27dc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    27e0:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    27e2:	2102      	movs	r1, #2
    27e4:	4803      	ldr	r0, [pc, #12]	; (27f4 <printf+0x20>)
    27e6:	f7fe fd75 	bl	12d4 <cbvprintf>
	va_end(vargs);

	return r;
}
    27ea:	b003      	add	sp, #12
    27ec:	f85d eb04 	ldr.w	lr, [sp], #4
    27f0:	b004      	add	sp, #16
    27f2:	4770      	bx	lr
    27f4:	00008d11 	.word	0x00008d11

000027f8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    27f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    27fa:	f04f 0320 	mov.w	r3, #32
    27fe:	f3ef 8411 	mrs	r4, BASEPRI
    2802:	f383 8812 	msr	BASEPRI_MAX, r3
    2806:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    280a:	2301      	movs	r3, #1
    280c:	4a0c      	ldr	r2, [pc, #48]	; (2840 <nordicsemi_nrf52_init+0x48>)
    280e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2816:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    281a:	f006 fa7d 	bl	8d18 <nrf52_errata_197>
    281e:	b120      	cbz	r0, 282a <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2824:	2201      	movs	r2, #1
    2826:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    282a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    282e:	2201      	movs	r2, #1
    2830:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2834:	f384 8811 	msr	BASEPRI, r4
    2838:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    283c:	2000      	movs	r0, #0
    283e:	bd10      	pop	{r4, pc}
    2840:	4001e000 	.word	0x4001e000

00002844 <sys_arch_reboot>:
    *p_gpregret = val;
    2844:	b2c0      	uxtb	r0, r0
    2846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    284a:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    284e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2852:	4905      	ldr	r1, [pc, #20]	; (2868 <sys_arch_reboot+0x24>)
    2854:	68ca      	ldr	r2, [r1, #12]
    2856:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    285a:	4b04      	ldr	r3, [pc, #16]	; (286c <sys_arch_reboot+0x28>)
    285c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    285e:	60cb      	str	r3, [r1, #12]
    2860:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2864:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2866:	e7fd      	b.n	2864 <sys_arch_reboot+0x20>
    2868:	e000ed00 	.word	0xe000ed00
    286c:	05fa0004 	.word	0x05fa0004

00002870 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2870:	b130      	cbz	r0, 2880 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2872:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2874:	0180      	lsls	r0, r0, #6
    2876:	4b03      	ldr	r3, [pc, #12]	; (2884 <arch_busy_wait+0x14>)
    2878:	f043 0301 	orr.w	r3, r3, #1
    287c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    287e:	bd08      	pop	{r3, pc}
    2880:	4770      	bx	lr
    2882:	bf00      	nop
    2884:	00009a90 	.word	0x00009a90

00002888 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    2888:	4800      	ldr	r0, [pc, #0]	; (288c <get_hf_flags+0x4>)
    288a:	4770      	bx	lr
    288c:	20004b4c 	.word	0x20004b4c

00002890 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2890:	4b01      	ldr	r3, [pc, #4]	; (2898 <get_subsys+0x8>)
    2892:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    2894:	1140      	asrs	r0, r0, #5
    2896:	4770      	bx	lr
    2898:	20004b04 	.word	0x20004b04

0000289c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    289c:	b530      	push	{r4, r5, lr}
    289e:	b083      	sub	sp, #12
    28a0:	4605      	mov	r5, r0
    28a2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    28a4:	f7ff fff4 	bl	2890 <get_subsys>
    28a8:	4601      	mov	r1, r0
    28aa:	2340      	movs	r3, #64	; 0x40
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	4623      	mov	r3, r4
    28b0:	4a05      	ldr	r2, [pc, #20]	; (28c8 <onoff_start+0x2c>)
    28b2:	4806      	ldr	r0, [pc, #24]	; (28cc <onoff_start+0x30>)
    28b4:	f006 fabd 	bl	8e32 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    28b8:	1e01      	subs	r1, r0, #0
    28ba:	db01      	blt.n	28c0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    28bc:	b003      	add	sp, #12
    28be:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    28c0:	4628      	mov	r0, r5
    28c2:	47a0      	blx	r4
}
    28c4:	e7fa      	b.n	28bc <onoff_start+0x20>
    28c6:	bf00      	nop
    28c8:	00008e7b 	.word	0x00008e7b
    28cc:	00009828 	.word	0x00009828

000028d0 <generic_hfclk_stop>:
{
    28d0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28d2:	4b0a      	ldr	r3, [pc, #40]	; (28fc <generic_hfclk_stop+0x2c>)
    28d4:	f3bf 8f5b 	dmb	ish
    28d8:	e853 2f00 	ldrex	r2, [r3]
    28dc:	f022 0102 	bic.w	r1, r2, #2
    28e0:	e843 1000 	strex	r0, r1, [r3]
    28e4:	2800      	cmp	r0, #0
    28e6:	d1f7      	bne.n	28d8 <generic_hfclk_stop+0x8>
    28e8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    28ec:	f012 0f01 	tst.w	r2, #1
    28f0:	d000      	beq.n	28f4 <generic_hfclk_stop+0x24>
}
    28f2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    28f4:	f006 fad3 	bl	8e9e <hfclk_stop>
    28f8:	e7fb      	b.n	28f2 <generic_hfclk_stop+0x22>
    28fa:	bf00      	nop
    28fc:	20004b5c 	.word	0x20004b5c

00002900 <get_status>:
{
    2900:	b570      	push	{r4, r5, r6, lr}
    2902:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2904:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2906:	2c01      	cmp	r4, #1
    2908:	d807      	bhi.n	291a <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    290a:	4621      	mov	r1, r4
    290c:	4628      	mov	r0, r5
    290e:	f006 fa25 	bl	8d5c <get_sub_data>
    2912:	6880      	ldr	r0, [r0, #8]
}
    2914:	f000 0007 	and.w	r0, r0, #7
    2918:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    291a:	4e06      	ldr	r6, [pc, #24]	; (2934 <get_status+0x34>)
    291c:	2379      	movs	r3, #121	; 0x79
    291e:	4632      	mov	r2, r6
    2920:	4905      	ldr	r1, [pc, #20]	; (2938 <get_status+0x38>)
    2922:	4806      	ldr	r0, [pc, #24]	; (293c <get_status+0x3c>)
    2924:	f006 f899 	bl	8a5a <assert_print>
    2928:	2179      	movs	r1, #121	; 0x79
    292a:	4630      	mov	r0, r6
    292c:	f006 f88e 	bl	8a4c <assert_post_action>
    2930:	e7eb      	b.n	290a <get_status+0xa>
    2932:	bf00      	nop
    2934:	0000a42c 	.word	0x0000a42c
    2938:	0000a46c 	.word	0x0000a46c
    293c:	00009cd0 	.word	0x00009cd0

00002940 <stop>:
{
    2940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2944:	4607      	mov	r7, r0
    2946:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    2948:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    294a:	4621      	mov	r1, r4
    294c:	f006 fa06 	bl	8d5c <get_sub_data>
    2950:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2952:	2c01      	cmp	r4, #1
    2954:	d80f      	bhi.n	2976 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    2956:	4631      	mov	r1, r6
    2958:	f105 0008 	add.w	r0, r5, #8
    295c:	f006 fa0d 	bl	8d7a <set_off_state>
	if (err < 0) {
    2960:	2800      	cmp	r0, #0
    2962:	db06      	blt.n	2972 <stop+0x32>
	get_sub_config(dev, type)->stop();
    2964:	4621      	mov	r1, r4
    2966:	4638      	mov	r0, r7
    2968:	f006 f9ff 	bl	8d6a <get_sub_config>
    296c:	6843      	ldr	r3, [r0, #4]
    296e:	4798      	blx	r3
	return 0;
    2970:	2000      	movs	r0, #0
}
    2972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2976:	f8df 801c 	ldr.w	r8, [pc, #28]	; 2994 <stop+0x54>
    297a:	f240 134d 	movw	r3, #333	; 0x14d
    297e:	4642      	mov	r2, r8
    2980:	4905      	ldr	r1, [pc, #20]	; (2998 <stop+0x58>)
    2982:	4806      	ldr	r0, [pc, #24]	; (299c <stop+0x5c>)
    2984:	f006 f869 	bl	8a5a <assert_print>
    2988:	f240 114d 	movw	r1, #333	; 0x14d
    298c:	4640      	mov	r0, r8
    298e:	f006 f85d 	bl	8a4c <assert_post_action>
    2992:	e7e0      	b.n	2956 <stop+0x16>
    2994:	0000a42c 	.word	0x0000a42c
    2998:	0000a46c 	.word	0x0000a46c
    299c:	00009cd0 	.word	0x00009cd0

000029a0 <onoff_stop>:
{
    29a0:	b538      	push	{r3, r4, r5, lr}
    29a2:	4605      	mov	r5, r0
    29a4:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    29a6:	f7ff ff73 	bl	2890 <get_subsys>
    29aa:	4601      	mov	r1, r0
    29ac:	2240      	movs	r2, #64	; 0x40
    29ae:	4803      	ldr	r0, [pc, #12]	; (29bc <onoff_stop+0x1c>)
    29b0:	f7ff ffc6 	bl	2940 <stop>
    29b4:	4601      	mov	r1, r0
	notify(mgr, res);
    29b6:	4628      	mov	r0, r5
    29b8:	47a0      	blx	r4
}
    29ba:	bd38      	pop	{r3, r4, r5, pc}
    29bc:	00009828 	.word	0x00009828

000029c0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    29c0:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    29c2:	2801      	cmp	r0, #1
    29c4:	d01d      	beq.n	2a02 <clock_event_handler+0x42>
    29c6:	2803      	cmp	r0, #3
    29c8:	d020      	beq.n	2a0c <clock_event_handler+0x4c>
    29ca:	b168      	cbz	r0, 29e8 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    29cc:	4c16      	ldr	r4, [pc, #88]	; (2a28 <clock_event_handler+0x68>)
    29ce:	f240 2362 	movw	r3, #610	; 0x262
    29d2:	4622      	mov	r2, r4
    29d4:	4915      	ldr	r1, [pc, #84]	; (2a2c <clock_event_handler+0x6c>)
    29d6:	4816      	ldr	r0, [pc, #88]	; (2a30 <clock_event_handler+0x70>)
    29d8:	f006 f83f 	bl	8a5a <assert_print>
    29dc:	f240 2162 	movw	r1, #610	; 0x262
    29e0:	4620      	mov	r0, r4
    29e2:	f006 f833 	bl	8a4c <assert_post_action>
		break;
	}
}
    29e6:	e010      	b.n	2a0a <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    29e8:	2100      	movs	r1, #0
    29ea:	4812      	ldr	r0, [pc, #72]	; (2a34 <clock_event_handler+0x74>)
    29ec:	f006 f9b6 	bl	8d5c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    29f0:	6883      	ldr	r3, [r0, #8]
    29f2:	f013 0f07 	tst.w	r3, #7
    29f6:	d108      	bne.n	2a0a <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    29f8:	2100      	movs	r1, #0
    29fa:	480e      	ldr	r0, [pc, #56]	; (2a34 <clock_event_handler+0x74>)
    29fc:	f006 fa07 	bl	8e0e <clkstarted_handle>
    2a00:	e003      	b.n	2a0a <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2a02:	2101      	movs	r1, #1
    2a04:	480b      	ldr	r0, [pc, #44]	; (2a34 <clock_event_handler+0x74>)
    2a06:	f006 fa02 	bl	8e0e <clkstarted_handle>
}
    2a0a:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    2a0c:	4c06      	ldr	r4, [pc, #24]	; (2a28 <clock_event_handler+0x68>)
    2a0e:	f240 235e 	movw	r3, #606	; 0x25e
    2a12:	4622      	mov	r2, r4
    2a14:	4905      	ldr	r1, [pc, #20]	; (2a2c <clock_event_handler+0x6c>)
    2a16:	4806      	ldr	r0, [pc, #24]	; (2a30 <clock_event_handler+0x70>)
    2a18:	f006 f81f 	bl	8a5a <assert_print>
    2a1c:	f240 215e 	movw	r1, #606	; 0x25e
    2a20:	4620      	mov	r0, r4
    2a22:	f006 f813 	bl	8a4c <assert_post_action>
		break;
    2a26:	e7f0      	b.n	2a0a <clock_event_handler+0x4a>
    2a28:	0000a42c 	.word	0x0000a42c
    2a2c:	00009ccc 	.word	0x00009ccc
    2a30:	00009cd0 	.word	0x00009cd0
    2a34:	00009828 	.word	0x00009828

00002a38 <api_blocking_start>:
{
    2a38:	b500      	push	{lr}
    2a3a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2a3c:	f8cd d000 	str.w	sp, [sp]
    2a40:	f8cd d004 	str.w	sp, [sp, #4]
    2a44:	2300      	movs	r3, #0
    2a46:	9302      	str	r3, [sp, #8]
    2a48:	2301      	movs	r3, #1
    2a4a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2a4c:	466b      	mov	r3, sp
    2a4e:	4a07      	ldr	r2, [pc, #28]	; (2a6c <api_blocking_start+0x34>)
    2a50:	f006 fa0b 	bl	8e6a <api_start>
	if (err < 0) {
    2a54:	2800      	cmp	r0, #0
    2a56:	db05      	blt.n	2a64 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    2a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2a5c:	2300      	movs	r3, #0
    2a5e:	4668      	mov	r0, sp
    2a60:	f003 fdb4 	bl	65cc <z_impl_k_sem_take>
}
    2a64:	b005      	add	sp, #20
    2a66:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6a:	bf00      	nop
    2a6c:	00008ebd 	.word	0x00008ebd

00002a70 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2a70:	b570      	push	{r4, r5, r6, lr}
    2a72:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a74:	2200      	movs	r2, #0
    2a76:	2101      	movs	r1, #1
    2a78:	4610      	mov	r0, r2
    2a7a:	f7ff fa29 	bl	1ed0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2a7e:	4811      	ldr	r0, [pc, #68]	; (2ac4 <clk_init+0x54>)
    2a80:	f001 fd66 	bl	4550 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2a84:	4b10      	ldr	r3, [pc, #64]	; (2ac8 <clk_init+0x58>)
    2a86:	4298      	cmp	r0, r3
    2a88:	d119      	bne.n	2abe <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2a8a:	f001 fd8b 	bl	45a4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2a8e:	2400      	movs	r4, #0
    2a90:	2c01      	cmp	r4, #1
    2a92:	d812      	bhi.n	2aba <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2a94:	4621      	mov	r1, r4
    2a96:	4630      	mov	r0, r6
    2a98:	f006 f960 	bl	8d5c <get_sub_data>
    2a9c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2a9e:	4621      	mov	r1, r4
    2aa0:	4630      	mov	r0, r6
    2aa2:	f006 f966 	bl	8d72 <get_onoff_manager>
    2aa6:	4909      	ldr	r1, [pc, #36]	; (2acc <clk_init+0x5c>)
    2aa8:	f005 fee0 	bl	886c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2aac:	2800      	cmp	r0, #0
    2aae:	db05      	blt.n	2abc <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2ab0:	2301      	movs	r3, #1
    2ab2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2ab4:	441c      	add	r4, r3
    2ab6:	b2e4      	uxtb	r4, r4
    2ab8:	e7ea      	b.n	2a90 <clk_init+0x20>
	}

	return 0;
    2aba:	2000      	movs	r0, #0
}
    2abc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2abe:	f06f 0004 	mvn.w	r0, #4
    2ac2:	e7fb      	b.n	2abc <clk_init+0x4c>
    2ac4:	000029c1 	.word	0x000029c1
    2ac8:	0bad0000 	.word	0x0bad0000
    2acc:	0000a4cc 	.word	0x0000a4cc

00002ad0 <lfclk_spinwait>:
{
    2ad0:	b570      	push	{r4, r5, r6, lr}
    2ad2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2ad4:	2801      	cmp	r0, #1
    2ad6:	d107      	bne.n	2ae8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2adc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2ae0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2ae4:	2b01      	cmp	r3, #1
    2ae6:	d05a      	beq.n	2b9e <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ae8:	f006 fdc3 	bl	9672 <k_is_in_isr>
    2aec:	b928      	cbnz	r0, 2afa <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    2aee:	4b2f      	ldr	r3, [pc, #188]	; (2bac <lfclk_spinwait+0xdc>)
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d043      	beq.n	2b7e <lfclk_spinwait+0xae>
    2af6:	2300      	movs	r3, #0
    2af8:	e000      	b.n	2afc <lfclk_spinwait+0x2c>
    2afa:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    2afc:	461c      	mov	r4, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d03f      	beq.n	2b82 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    2b02:	f04f 0320 	mov.w	r3, #32
    2b06:	f3ef 8611 	mrs	r6, BASEPRI
    2b0a:	f383 8812 	msr	BASEPRI_MAX, r3
    2b0e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    2b12:	b924      	cbnz	r4, 2b1e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    2b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b18:	2202      	movs	r2, #2
    2b1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b22:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2b26:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2b2a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2b2e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2b32:	d12d      	bne.n	2b90 <lfclk_spinwait+0xc0>
    return false;
    2b34:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2b36:	b11a      	cbz	r2, 2b40 <lfclk_spinwait+0x70>
    2b38:	2b01      	cmp	r3, #1
    2b3a:	d02b      	beq.n	2b94 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2b3c:	2d01      	cmp	r5, #1
    2b3e:	d029      	beq.n	2b94 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2b40:	b30c      	cbz	r4, 2b86 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2b42:	4630      	mov	r0, r6
    2b44:	f7ff f99e 	bl	1e84 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b4c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2b50:	2b00      	cmp	r3, #0
    2b52:	d1e4      	bne.n	2b1e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b58:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d0de      	beq.n	2b1e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b64:	2200      	movs	r2, #0
    2b66:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2b6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2b6e:	2201      	movs	r2, #1
    2b70:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b74:	490e      	ldr	r1, [pc, #56]	; (2bb0 <lfclk_spinwait+0xe0>)
    2b76:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b7a:	609a      	str	r2, [r3, #8]
}
    2b7c:	e7cf      	b.n	2b1e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b7e:	2301      	movs	r3, #1
    2b80:	e7bc      	b.n	2afc <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    2b82:	2600      	movs	r6, #0
    2b84:	e7c5      	b.n	2b12 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    2b86:	2021      	movs	r0, #33	; 0x21
    2b88:	2100      	movs	r1, #0
    2b8a:	f004 ff01 	bl	7990 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2b8e:	e7db      	b.n	2b48 <lfclk_spinwait+0x78>
                return true;
    2b90:	2201      	movs	r2, #1
    2b92:	e7d0      	b.n	2b36 <lfclk_spinwait+0x66>
	if (isr_mode) {
    2b94:	b124      	cbz	r4, 2ba0 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    2b96:	f386 8811 	msr	BASEPRI, r6
    2b9a:	f3bf 8f6f 	isb	sy
}
    2b9e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    2ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ba4:	2202      	movs	r2, #2
    2ba6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2baa:	e7f8      	b.n	2b9e <lfclk_spinwait+0xce>
    2bac:	20005275 	.word	0x20005275
    2bb0:	e000e100 	.word	0xe000e100

00002bb4 <generic_hfclk_start>:
{
    2bb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    2bb6:	f04f 0320 	mov.w	r3, #32
    2bba:	f3ef 8411 	mrs	r4, BASEPRI
    2bbe:	f383 8812 	msr	BASEPRI_MAX, r3
    2bc2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2bc6:	4a13      	ldr	r2, [pc, #76]	; (2c14 <generic_hfclk_start+0x60>)
    2bc8:	6813      	ldr	r3, [r2, #0]
    2bca:	f043 0302 	orr.w	r3, r3, #2
    2bce:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2bd0:	f013 0f01 	tst.w	r3, #1
    2bd4:	d108      	bne.n	2be8 <generic_hfclk_start+0x34>
	bool already_started = false;
    2bd6:	2300      	movs	r3, #0
	__asm__ volatile(
    2bd8:	f384 8811 	msr	BASEPRI, r4
    2bdc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2be0:	b99b      	cbnz	r3, 2c0a <generic_hfclk_start+0x56>
	hfclk_start();
    2be2:	f006 f952 	bl	8e8a <hfclk_start>
}
    2be6:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2bf0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2bf4:	f012 0f01 	tst.w	r2, #1
    2bf8:	d101      	bne.n	2bfe <generic_hfclk_start+0x4a>
	bool already_started = false;
    2bfa:	2300      	movs	r3, #0
    2bfc:	e7ec      	b.n	2bd8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    2bfe:	f7ff fe43 	bl	2888 <get_hf_flags>
    2c02:	f006 f8f1 	bl	8de8 <set_on_state>
			already_started = true;
    2c06:	2301      	movs	r3, #1
    2c08:	e7e6      	b.n	2bd8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    2c0a:	2100      	movs	r1, #0
    2c0c:	4802      	ldr	r0, [pc, #8]	; (2c18 <generic_hfclk_start+0x64>)
    2c0e:	f006 f8fe 	bl	8e0e <clkstarted_handle>
		return;
    2c12:	e7e8      	b.n	2be6 <generic_hfclk_start+0x32>
    2c14:	20004b5c 	.word	0x20004b5c
    2c18:	00009828 	.word	0x00009828

00002c1c <z_nrf_clock_control_lf_on>:
{
    2c1c:	b538      	push	{r3, r4, r5, lr}
    2c1e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2c20:	4b1f      	ldr	r3, [pc, #124]	; (2ca0 <z_nrf_clock_control_lf_on+0x84>)
    2c22:	2101      	movs	r1, #1
    2c24:	f3bf 8f5b 	dmb	ish
    2c28:	e853 2f00 	ldrex	r2, [r3]
    2c2c:	e843 1000 	strex	r0, r1, [r3]
    2c30:	2800      	cmp	r0, #0
    2c32:	d1f9      	bne.n	2c28 <z_nrf_clock_control_lf_on+0xc>
    2c34:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2c38:	b142      	cbz	r2, 2c4c <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    2c3a:	b134      	cbz	r4, 2c4a <z_nrf_clock_control_lf_on+0x2e>
    2c3c:	1e63      	subs	r3, r4, #1
    2c3e:	b2db      	uxtb	r3, r3
    2c40:	2b01      	cmp	r3, #1
    2c42:	d81f      	bhi.n	2c84 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    2c44:	4620      	mov	r0, r4
    2c46:	f7ff ff43 	bl	2ad0 <lfclk_spinwait>
}
    2c4a:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2c4c:	4815      	ldr	r0, [pc, #84]	; (2ca4 <z_nrf_clock_control_lf_on+0x88>)
    2c4e:	f006 f890 	bl	8d72 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2c52:	4915      	ldr	r1, [pc, #84]	; (2ca8 <z_nrf_clock_control_lf_on+0x8c>)
    2c54:	2300      	movs	r3, #0
    2c56:	604b      	str	r3, [r1, #4]
    2c58:	608b      	str	r3, [r1, #8]
    2c5a:	60cb      	str	r3, [r1, #12]
    2c5c:	2301      	movs	r3, #1
    2c5e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    2c60:	f7fe f844 	bl	cec <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2c64:	2800      	cmp	r0, #0
    2c66:	dae8      	bge.n	2c3a <z_nrf_clock_control_lf_on+0x1e>
    2c68:	4d10      	ldr	r5, [pc, #64]	; (2cac <z_nrf_clock_control_lf_on+0x90>)
    2c6a:	f44f 7308 	mov.w	r3, #544	; 0x220
    2c6e:	462a      	mov	r2, r5
    2c70:	490f      	ldr	r1, [pc, #60]	; (2cb0 <z_nrf_clock_control_lf_on+0x94>)
    2c72:	4810      	ldr	r0, [pc, #64]	; (2cb4 <z_nrf_clock_control_lf_on+0x98>)
    2c74:	f005 fef1 	bl	8a5a <assert_print>
    2c78:	f44f 7108 	mov.w	r1, #544	; 0x220
    2c7c:	4628      	mov	r0, r5
    2c7e:	f005 fee5 	bl	8a4c <assert_post_action>
    2c82:	e7da      	b.n	2c3a <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    2c84:	4c09      	ldr	r4, [pc, #36]	; (2cac <z_nrf_clock_control_lf_on+0x90>)
    2c86:	f240 2332 	movw	r3, #562	; 0x232
    2c8a:	4622      	mov	r2, r4
    2c8c:	490a      	ldr	r1, [pc, #40]	; (2cb8 <z_nrf_clock_control_lf_on+0x9c>)
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <z_nrf_clock_control_lf_on+0x98>)
    2c90:	f005 fee3 	bl	8a5a <assert_print>
    2c94:	f240 2132 	movw	r1, #562	; 0x232
    2c98:	4620      	mov	r0, r4
    2c9a:	f005 fed7 	bl	8a4c <assert_post_action>
    2c9e:	e7d4      	b.n	2c4a <z_nrf_clock_control_lf_on+0x2e>
    2ca0:	20004b60 	.word	0x20004b60
    2ca4:	00009828 	.word	0x00009828
    2ca8:	20004af4 	.word	0x20004af4
    2cac:	0000a42c 	.word	0x0000a42c
    2cb0:	0000a490 	.word	0x0000a490
    2cb4:	00009cd0 	.word	0x00009cd0
    2cb8:	00009ccc 	.word	0x00009ccc

00002cbc <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2cbc:	b510      	push	{r4, lr}
    2cbe:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2cc0:	280a      	cmp	r0, #10
    2cc2:	d007      	beq.n	2cd4 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    2cc4:	4b07      	ldr	r3, [pc, #28]	; (2ce4 <console_out+0x28>)
    2cc6:	6818      	ldr	r0, [r3, #0]
    2cc8:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2cca:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2ccc:	685b      	ldr	r3, [r3, #4]
    2cce:	4798      	blx	r3

	return c;
}
    2cd0:	4620      	mov	r0, r4
    2cd2:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    2cd4:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <console_out+0x28>)
    2cd6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2cd8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2cda:	685b      	ldr	r3, [r3, #4]
    2cdc:	210d      	movs	r1, #13
    2cde:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    2ce0:	e7f0      	b.n	2cc4 <console_out+0x8>
    2ce2:	bf00      	nop
    2ce4:	20004b64 	.word	0x20004b64

00002ce8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    2ce8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    2cea:	4c04      	ldr	r4, [pc, #16]	; (2cfc <uart_console_hook_install+0x14>)
    2cec:	4620      	mov	r0, r4
    2cee:	f7ff fd5d 	bl	27ac <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    2cf2:	4620      	mov	r0, r4
    2cf4:	f7fd fd50 	bl	798 <__printk_hook_install>
#endif
}
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	bf00      	nop
    2cfc:	00002cbd 	.word	0x00002cbd

00002d00 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2d00:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2d02:	4806      	ldr	r0, [pc, #24]	; (2d1c <uart_console_init+0x1c>)
    2d04:	4b06      	ldr	r3, [pc, #24]	; (2d20 <uart_console_init+0x20>)
    2d06:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2d08:	f006 fc66 	bl	95d8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2d0c:	b118      	cbz	r0, 2d16 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    2d0e:	f7ff ffeb 	bl	2ce8 <uart_console_hook_install>

	return 0;
    2d12:	2000      	movs	r0, #0
}
    2d14:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2d16:	f06f 0012 	mvn.w	r0, #18
    2d1a:	e7fb      	b.n	2d14 <uart_console_init+0x14>
    2d1c:	00009888 	.word	0x00009888
    2d20:	20004b64 	.word	0x20004b64

00002d24 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d24:	b128      	cbz	r0, 2d32 <get_dev+0xe>
    2d26:	2801      	cmp	r0, #1
    2d28:	d101      	bne.n	2d2e <get_dev+0xa>
    2d2a:	4803      	ldr	r0, [pc, #12]	; (2d38 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2d2c:	4770      	bx	lr
	const struct device *dev = NULL;
    2d2e:	2000      	movs	r0, #0
    2d30:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d32:	4802      	ldr	r0, [pc, #8]	; (2d3c <get_dev+0x18>)
    2d34:	4770      	bx	lr
    2d36:	bf00      	nop
    2d38:	00009840 	.word	0x00009840
    2d3c:	00009858 	.word	0x00009858

00002d40 <gpio_nrfx_manage_callback>:
{
    2d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d44:	4616      	mov	r6, r2
	return port->data;
    2d46:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2d48:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2d4a:	460c      	mov	r4, r1
    2d4c:	b131      	cbz	r1, 2d5c <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    2d4e:	6863      	ldr	r3, [r4, #4]
    2d50:	b1a3      	cbz	r3, 2d7c <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    2d52:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2d54:	2b00      	cmp	r3, #0
    2d56:	d03b      	beq.n	2dd0 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2d58:	2100      	movs	r1, #0
    2d5a:	e02a      	b.n	2db2 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    2d5c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2df4 <gpio_nrfx_manage_callback+0xb4>
    2d60:	2324      	movs	r3, #36	; 0x24
    2d62:	4642      	mov	r2, r8
    2d64:	4924      	ldr	r1, [pc, #144]	; (2df8 <gpio_nrfx_manage_callback+0xb8>)
    2d66:	4825      	ldr	r0, [pc, #148]	; (2dfc <gpio_nrfx_manage_callback+0xbc>)
    2d68:	f005 fe77 	bl	8a5a <assert_print>
    2d6c:	4824      	ldr	r0, [pc, #144]	; (2e00 <gpio_nrfx_manage_callback+0xc0>)
    2d6e:	f005 fe74 	bl	8a5a <assert_print>
    2d72:	2124      	movs	r1, #36	; 0x24
    2d74:	4640      	mov	r0, r8
    2d76:	f005 fe69 	bl	8a4c <assert_post_action>
    2d7a:	e7e8      	b.n	2d4e <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    2d7c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2df4 <gpio_nrfx_manage_callback+0xb4>
    2d80:	2325      	movs	r3, #37	; 0x25
    2d82:	4642      	mov	r2, r8
    2d84:	491f      	ldr	r1, [pc, #124]	; (2e04 <gpio_nrfx_manage_callback+0xc4>)
    2d86:	481d      	ldr	r0, [pc, #116]	; (2dfc <gpio_nrfx_manage_callback+0xbc>)
    2d88:	f005 fe67 	bl	8a5a <assert_print>
    2d8c:	481e      	ldr	r0, [pc, #120]	; (2e08 <gpio_nrfx_manage_callback+0xc8>)
    2d8e:	f005 fe64 	bl	8a5a <assert_print>
    2d92:	2125      	movs	r1, #37	; 0x25
    2d94:	4640      	mov	r0, r8
    2d96:	f005 fe59 	bl	8a4c <assert_post_action>
    2d9a:	e7da      	b.n	2d52 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    2d9c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    2d9e:	606b      	str	r3, [r5, #4]
	return list->tail;
    2da0:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2da2:	4294      	cmp	r4, r2
    2da4:	d10f      	bne.n	2dc6 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    2da6:	607b      	str	r3, [r7, #4]
}
    2da8:	e00d      	b.n	2dc6 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    2daa:	6079      	str	r1, [r7, #4]
}
    2dac:	e00b      	b.n	2dc6 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2dae:	4619      	mov	r1, r3
    2db0:	681b      	ldr	r3, [r3, #0]
    2db2:	b15b      	cbz	r3, 2dcc <gpio_nrfx_manage_callback+0x8c>
    2db4:	429c      	cmp	r4, r3
    2db6:	d1fa      	bne.n	2dae <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    2db8:	2900      	cmp	r1, #0
    2dba:	d0ef      	beq.n	2d9c <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    2dbc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    2dbe:	600b      	str	r3, [r1, #0]
	return list->tail;
    2dc0:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    2dc2:	429c      	cmp	r4, r3
    2dc4:	d0f1      	beq.n	2daa <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    2dc6:	2300      	movs	r3, #0
    2dc8:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2dca:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    2dcc:	b903      	cbnz	r3, 2dd0 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    2dce:	b156      	cbz	r6, 2de6 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    2dd0:	b166      	cbz	r6, 2dec <gpio_nrfx_manage_callback+0xac>
	return list->head;
    2dd2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2dd4:	6023      	str	r3, [r4, #0]
	list->head = node;
    2dd6:	606c      	str	r4, [r5, #4]
	return list->tail;
    2dd8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    2dda:	b10b      	cbz	r3, 2de0 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2ddc:	2000      	movs	r0, #0
    2dde:	e006      	b.n	2dee <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    2de0:	607c      	str	r4, [r7, #4]
    2de2:	2000      	movs	r0, #0
}
    2de4:	e003      	b.n	2dee <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    2de6:	f06f 0015 	mvn.w	r0, #21
    2dea:	e000      	b.n	2dee <gpio_nrfx_manage_callback+0xae>
	return 0;
    2dec:	2000      	movs	r0, #0
}
    2dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2df2:	bf00      	nop
    2df4:	0000a4d8 	.word	0x0000a4d8
    2df8:	0000a508 	.word	0x0000a508
    2dfc:	00009cd0 	.word	0x00009cd0
    2e00:	0000a514 	.word	0x0000a514
    2e04:	0000a524 	.word	0x0000a524
    2e08:	0000a538 	.word	0x0000a538

00002e0c <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2e10:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    2e14:	0940      	lsrs	r0, r0, #5
    2e16:	f7ff ff85 	bl	2d24 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    2e1a:	b380      	cbz	r0, 2e7e <nrfx_gpio_handler+0x72>
    2e1c:	4607      	mov	r7, r0
	return port->data;
    2e1e:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    2e20:	2601      	movs	r6, #1
    2e22:	40a6      	lsls	r6, r4
	return list->head;
    2e24:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e26:	b11c      	cbz	r4, 2e30 <nrfx_gpio_handler+0x24>
    2e28:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    2e2a:	b17c      	cbz	r4, 2e4c <nrfx_gpio_handler+0x40>
	return node->next;
    2e2c:	6825      	ldr	r5, [r4, #0]
    2e2e:	e00d      	b.n	2e4c <nrfx_gpio_handler+0x40>
    2e30:	4625      	mov	r5, r4
    2e32:	e00b      	b.n	2e4c <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2e34:	6863      	ldr	r3, [r4, #4]
    2e36:	68a2      	ldr	r2, [r4, #8]
    2e38:	4032      	ands	r2, r6
    2e3a:	4621      	mov	r1, r4
    2e3c:	4638      	mov	r0, r7
    2e3e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e40:	b1dd      	cbz	r5, 2e7a <nrfx_gpio_handler+0x6e>
    2e42:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2e44:	b105      	cbz	r5, 2e48 <nrfx_gpio_handler+0x3c>
	return node->next;
    2e46:	682b      	ldr	r3, [r5, #0]
    2e48:	462c      	mov	r4, r5
    2e4a:	461d      	mov	r5, r3
    2e4c:	b1bc      	cbz	r4, 2e7e <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    2e4e:	68a3      	ldr	r3, [r4, #8]
    2e50:	421e      	tst	r6, r3
    2e52:	d0f5      	beq.n	2e40 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    2e54:	6863      	ldr	r3, [r4, #4]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d1ec      	bne.n	2e34 <nrfx_gpio_handler+0x28>
    2e5a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2e84 <nrfx_gpio_handler+0x78>
    2e5e:	2345      	movs	r3, #69	; 0x45
    2e60:	4642      	mov	r2, r8
    2e62:	4909      	ldr	r1, [pc, #36]	; (2e88 <nrfx_gpio_handler+0x7c>)
    2e64:	4809      	ldr	r0, [pc, #36]	; (2e8c <nrfx_gpio_handler+0x80>)
    2e66:	f005 fdf8 	bl	8a5a <assert_print>
    2e6a:	4809      	ldr	r0, [pc, #36]	; (2e90 <nrfx_gpio_handler+0x84>)
    2e6c:	f005 fdf5 	bl	8a5a <assert_print>
    2e70:	2145      	movs	r1, #69	; 0x45
    2e72:	4640      	mov	r0, r8
    2e74:	f005 fdea 	bl	8a4c <assert_post_action>
    2e78:	e7dc      	b.n	2e34 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e7a:	462b      	mov	r3, r5
    2e7c:	e7e4      	b.n	2e48 <nrfx_gpio_handler+0x3c>
}
    2e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e82:	bf00      	nop
    2e84:	0000a4d8 	.word	0x0000a4d8
    2e88:	0000a550 	.word	0x0000a550
    2e8c:	00009cd0 	.word	0x00009cd0
    2e90:	0000a538 	.word	0x0000a538

00002e94 <gpio_nrfx_pin_interrupt_configure>:
{
    2e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e96:	b085      	sub	sp, #20
    2e98:	460e      	mov	r6, r1
    2e9a:	4619      	mov	r1, r3
	return port->config;
    2e9c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2e9e:	7b1b      	ldrb	r3, [r3, #12]
    2ea0:	f006 041f 	and.w	r4, r6, #31
    2ea4:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ea8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2eac:	d022      	beq.n	2ef4 <gpio_nrfx_pin_interrupt_configure+0x60>
    2eae:	4607      	mov	r7, r0
    2eb0:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2eb2:	2300      	movs	r3, #0
    2eb4:	9302      	str	r3, [sp, #8]
    2eb6:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    2eb8:	4610      	mov	r0, r2
    2eba:	f006 f87d 	bl	8fb8 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ebe:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    2ec2:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2ec4:	6899      	ldr	r1, [r3, #8]
    2ec6:	40f1      	lsrs	r1, r6
    2ec8:	f011 0101 	ands.w	r1, r1, #1
    2ecc:	d102      	bne.n	2ed4 <gpio_nrfx_pin_interrupt_configure+0x40>
    2ece:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    2ed2:	d014      	beq.n	2efe <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2ed4:	2300      	movs	r3, #0
    2ed6:	aa02      	add	r2, sp, #8
    2ed8:	4619      	mov	r1, r3
    2eda:	4620      	mov	r0, r4
    2edc:	f001 ffdc 	bl	4e98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ee0:	4b32      	ldr	r3, [pc, #200]	; (2fac <gpio_nrfx_pin_interrupt_configure+0x118>)
    2ee2:	4298      	cmp	r0, r3
    2ee4:	d15f      	bne.n	2fa6 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2ee6:	2101      	movs	r1, #1
    2ee8:	4620      	mov	r0, r4
    2eea:	f002 fa39 	bl	5360 <nrfx_gpiote_trigger_enable>
	return 0;
    2eee:	2000      	movs	r0, #0
}
    2ef0:	b005      	add	sp, #20
    2ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2ef4:	4620      	mov	r0, r4
    2ef6:	f002 fb3f 	bl	5578 <nrfx_gpiote_trigger_disable>
		return 0;
    2efa:	2000      	movs	r0, #0
    2efc:	e7f8      	b.n	2ef0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    2efe:	0963      	lsrs	r3, r4, #5
    2f00:	d01f      	beq.n	2f42 <gpio_nrfx_pin_interrupt_configure+0xae>
    2f02:	2b01      	cmp	r3, #1
    2f04:	d101      	bne.n	2f0a <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    2f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    2f0a:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2f0e:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2f10:	f011 0f01 	tst.w	r1, #1
    2f14:	d018      	beq.n	2f48 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    2f16:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2f1a:	0963      	lsrs	r3, r4, #5
    2f1c:	d022      	beq.n	2f64 <gpio_nrfx_pin_interrupt_configure+0xd0>
    2f1e:	2b01      	cmp	r3, #1
    2f20:	d023      	beq.n	2f6a <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    2f22:	4e23      	ldr	r6, [pc, #140]	; (2fb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2f24:	f240 232e 	movw	r3, #558	; 0x22e
    2f28:	4632      	mov	r2, r6
    2f2a:	4922      	ldr	r1, [pc, #136]	; (2fb4 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2f2c:	4822      	ldr	r0, [pc, #136]	; (2fb8 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2f2e:	f005 fd94 	bl	8a5a <assert_print>
    2f32:	f240 212e 	movw	r1, #558	; 0x22e
    2f36:	4630      	mov	r0, r6
    2f38:	f005 fd88 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    2f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f40:	e014      	b.n	2f6c <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    2f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f46:	e7e0      	b.n	2f0a <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2f48:	4d19      	ldr	r5, [pc, #100]	; (2fb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2f4a:	f240 2329 	movw	r3, #553	; 0x229
    2f4e:	462a      	mov	r2, r5
    2f50:	491a      	ldr	r1, [pc, #104]	; (2fbc <gpio_nrfx_pin_interrupt_configure+0x128>)
    2f52:	4819      	ldr	r0, [pc, #100]	; (2fb8 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2f54:	f005 fd81 	bl	8a5a <assert_print>
    2f58:	f240 2129 	movw	r1, #553	; 0x229
    2f5c:	4628      	mov	r0, r5
    2f5e:	f005 fd75 	bl	8a4c <assert_post_action>
    2f62:	e7d8      	b.n	2f16 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    2f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f68:	e000      	b.n	2f6c <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2f6a:	4b15      	ldr	r3, [pc, #84]	; (2fc0 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2f6c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2f70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2f74:	f013 0f01 	tst.w	r3, #1
    2f78:	d1ac      	bne.n	2ed4 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2f7a:	f10d 0107 	add.w	r1, sp, #7
    2f7e:	4620      	mov	r0, r4
    2f80:	f002 f97e 	bl	5280 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2f84:	4b0f      	ldr	r3, [pc, #60]	; (2fc4 <gpio_nrfx_pin_interrupt_configure+0x130>)
    2f86:	4298      	cmp	r0, r3
    2f88:	d003      	beq.n	2f92 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    2f8a:	f10d 0307 	add.w	r3, sp, #7
    2f8e:	9303      	str	r3, [sp, #12]
    2f90:	e7a0      	b.n	2ed4 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    2f92:	f10d 0007 	add.w	r0, sp, #7
    2f96:	f002 f9db 	bl	5350 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2f9a:	4b04      	ldr	r3, [pc, #16]	; (2fac <gpio_nrfx_pin_interrupt_configure+0x118>)
    2f9c:	4298      	cmp	r0, r3
    2f9e:	d0f4      	beq.n	2f8a <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    2fa0:	f06f 000b 	mvn.w	r0, #11
    2fa4:	e7a4      	b.n	2ef0 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    2fa6:	f06f 0004 	mvn.w	r0, #4
    2faa:	e7a1      	b.n	2ef0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2fac:	0bad0000 	.word	0x0bad0000
    2fb0:	0000a55c 	.word	0x0000a55c
    2fb4:	00009ccc 	.word	0x00009ccc
    2fb8:	00009cd0 	.word	0x00009cd0
    2fbc:	0000a590 	.word	0x0000a590
    2fc0:	50000300 	.word	0x50000300
    2fc4:	0bad0004 	.word	0x0bad0004

00002fc8 <pin_uninit>:
{
    2fc8:	b530      	push	{r4, r5, lr}
    2fca:	b083      	sub	sp, #12
    2fcc:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2fce:	f10d 0107 	add.w	r1, sp, #7
    2fd2:	f002 f955 	bl	5280 <nrfx_gpiote_channel_get>
    2fd6:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2fd8:	4620      	mov	r0, r4
    2fda:	f002 fb35 	bl	5648 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2fde:	4b0b      	ldr	r3, [pc, #44]	; (300c <pin_uninit+0x44>)
    2fe0:	4298      	cmp	r0, r3
    2fe2:	d10f      	bne.n	3004 <pin_uninit+0x3c>
	if (free_ch) {
    2fe4:	429d      	cmp	r5, r3
    2fe6:	d005      	beq.n	2ff4 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <pin_uninit+0x44>)
    2fea:	4298      	cmp	r0, r3
    2fec:	d107      	bne.n	2ffe <pin_uninit+0x36>
    2fee:	2000      	movs	r0, #0
}
    2ff0:	b003      	add	sp, #12
    2ff2:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    2ff4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2ff8:	f002 f9a2 	bl	5340 <nrfx_gpiote_channel_free>
    2ffc:	e7f4      	b.n	2fe8 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ffe:	f06f 0004 	mvn.w	r0, #4
    3002:	e7f5      	b.n	2ff0 <pin_uninit+0x28>
		return -EIO;
    3004:	f06f 0004 	mvn.w	r0, #4
    3008:	e7f2      	b.n	2ff0 <pin_uninit+0x28>
    300a:	bf00      	nop
    300c:	0bad0000 	.word	0x0bad0000

00003010 <gpio_nrfx_pin_configure>:
{
    3010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3014:	b087      	sub	sp, #28
	return port->config;
    3016:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    301a:	f898 300c 	ldrb.w	r3, [r8, #12]
    301e:	f001 051f 	and.w	r5, r1, #31
    3022:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3026:	2a00      	cmp	r2, #0
    3028:	d044      	beq.n	30b4 <gpio_nrfx_pin_configure+0xa4>
    302a:	460c      	mov	r4, r1
    302c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    302e:	2600      	movs	r6, #0
    3030:	9603      	str	r6, [sp, #12]
    3032:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3034:	f10d 0117 	add.w	r1, sp, #23
    3038:	4620      	mov	r0, r4
    303a:	f002 f921 	bl	5280 <nrfx_gpiote_channel_get>
    303e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3040:	4633      	mov	r3, r6
    3042:	aa03      	add	r2, sp, #12
    3044:	4631      	mov	r1, r6
    3046:	4628      	mov	r0, r5
    3048:	f001 ff26 	bl	4e98 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    304c:	4b30      	ldr	r3, [pc, #192]	; (3110 <gpio_nrfx_pin_configure+0x100>)
    304e:	4298      	cmp	r0, r3
    3050:	d15b      	bne.n	310a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    3052:	4599      	cmp	r9, r3
    3054:	d036      	beq.n	30c4 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    3056:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    305a:	d043      	beq.n	30e4 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    305c:	f10d 0103 	add.w	r1, sp, #3
    3060:	4638      	mov	r0, r7
    3062:	f005 ff30 	bl	8ec6 <get_drive>
		if (rv != 0) {
    3066:	4606      	mov	r6, r0
    3068:	bb40      	cbnz	r0, 30bc <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    306a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    306e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3072:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    3076:	bf0c      	ite	eq
    3078:	2301      	moveq	r3, #1
    307a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    307c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    3080:	4638      	mov	r0, r7
    3082:	f005 ff66 	bl	8f52 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    3086:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    308a:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    308e:	d01e      	beq.n	30ce <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3090:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3094:	2101      	movs	r1, #1
    3096:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    309a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    309e:	2200      	movs	r2, #0
    30a0:	a901      	add	r1, sp, #4
    30a2:	4628      	mov	r0, r5
    30a4:	f001 ffec 	bl	5080 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    30a8:	4b19      	ldr	r3, [pc, #100]	; (3110 <gpio_nrfx_pin_configure+0x100>)
    30aa:	4298      	cmp	r0, r3
    30ac:	d006      	beq.n	30bc <gpio_nrfx_pin_configure+0xac>
    30ae:	f06f 0615 	mvn.w	r6, #21
    30b2:	e003      	b.n	30bc <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    30b4:	4628      	mov	r0, r5
    30b6:	f7ff ff87 	bl	2fc8 <pin_uninit>
    30ba:	4606      	mov	r6, r0
}
    30bc:	4630      	mov	r0, r6
    30be:	b007      	add	sp, #28
    30c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    30c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    30c8:	f002 f93a 	bl	5340 <nrfx_gpiote_channel_free>
    30cc:	e7c3      	b.n	3056 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    30ce:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    30d2:	d0e4      	beq.n	309e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    30d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    30d8:	2301      	movs	r3, #1
    30da:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    30de:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    30e2:	e7dc      	b.n	309e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    30e4:	4638      	mov	r0, r7
    30e6:	f005 ff34 	bl	8f52 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    30ea:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    30ee:	2300      	movs	r3, #0
    30f0:	461a      	mov	r2, r3
    30f2:	a902      	add	r1, sp, #8
    30f4:	4628      	mov	r0, r5
    30f6:	f001 fecf 	bl	4e98 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    30fa:	4b05      	ldr	r3, [pc, #20]	; (3110 <gpio_nrfx_pin_configure+0x100>)
    30fc:	4298      	cmp	r0, r3
    30fe:	d101      	bne.n	3104 <gpio_nrfx_pin_configure+0xf4>
    3100:	2600      	movs	r6, #0
    3102:	e7db      	b.n	30bc <gpio_nrfx_pin_configure+0xac>
    3104:	f06f 0615 	mvn.w	r6, #21
    3108:	e7d8      	b.n	30bc <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    310a:	f06f 0615 	mvn.w	r6, #21
    310e:	e7d5      	b.n	30bc <gpio_nrfx_pin_configure+0xac>
    3110:	0bad0000 	.word	0x0bad0000

00003114 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3114:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3116:	f002 f909 	bl	532c <nrfx_gpiote_is_init>
    311a:	b108      	cbz	r0, 3120 <gpio_nrfx_init+0xc>
		return 0;
    311c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    311e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    3120:	f002 f8da 	bl	52d8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3124:	4b08      	ldr	r3, [pc, #32]	; (3148 <gpio_nrfx_init+0x34>)
    3126:	4298      	cmp	r0, r3
    3128:	d10a      	bne.n	3140 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    312a:	2100      	movs	r1, #0
    312c:	4807      	ldr	r0, [pc, #28]	; (314c <gpio_nrfx_init+0x38>)
    312e:	f002 f8a1 	bl	5274 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3132:	2200      	movs	r2, #0
    3134:	2105      	movs	r1, #5
    3136:	2006      	movs	r0, #6
    3138:	f7fe feca 	bl	1ed0 <z_arm_irq_priority_set>
	return 0;
    313c:	2000      	movs	r0, #0
    313e:	e7ee      	b.n	311e <gpio_nrfx_init+0xa>
		return -EIO;
    3140:	f06f 0004 	mvn.w	r0, #4
    3144:	e7eb      	b.n	311e <gpio_nrfx_init+0xa>
    3146:	bf00      	nop
    3148:	0bad0000 	.word	0x0bad0000
    314c:	00002e0d 	.word	0x00002e0d

00003150 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    3150:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    3152:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    3154:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    3158:	d06f      	beq.n	323a <baudrate_set+0xea>
    315a:	d83a      	bhi.n	31d2 <baudrate_set+0x82>
    315c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    3160:	d06e      	beq.n	3240 <baudrate_set+0xf0>
    3162:	d90a      	bls.n	317a <baudrate_set+0x2a>
    3164:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    3168:	d075      	beq.n	3256 <baudrate_set+0x106>
    316a:	d924      	bls.n	31b6 <baudrate_set+0x66>
    316c:	f647 2312 	movw	r3, #31250	; 0x7a12
    3170:	4299      	cmp	r1, r3
    3172:	d12b      	bne.n	31cc <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3174:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3178:	e013      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    317a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    317e:	d061      	beq.n	3244 <baudrate_set+0xf4>
    3180:	d907      	bls.n	3192 <baudrate_set+0x42>
    3182:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    3186:	d063      	beq.n	3250 <baudrate_set+0x100>
    3188:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    318c:	d110      	bne.n	31b0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    318e:	4b3c      	ldr	r3, [pc, #240]	; (3280 <baudrate_set+0x130>)
    3190:	e007      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    3192:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    3196:	d058      	beq.n	324a <baudrate_set+0xfa>
    3198:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    319c:	d105      	bne.n	31aa <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    319e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    31a2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    31a6:	2000      	movs	r0, #0
    31a8:	4770      	bx	lr
	switch (baudrate) {
    31aa:	f06f 0015 	mvn.w	r0, #21
    31ae:	4770      	bx	lr
    31b0:	f06f 0015 	mvn.w	r0, #21
    31b4:	4770      	bx	lr
    31b6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    31ba:	d04e      	beq.n	325a <baudrate_set+0x10a>
    31bc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    31c0:	d101      	bne.n	31c6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    31c2:	4b30      	ldr	r3, [pc, #192]	; (3284 <baudrate_set+0x134>)
    31c4:	e7ed      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    31c6:	f06f 0015 	mvn.w	r0, #21
    31ca:	4770      	bx	lr
    31cc:	f06f 0015 	mvn.w	r0, #21
    31d0:	4770      	bx	lr
    31d2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    31d6:	d042      	beq.n	325e <baudrate_set+0x10e>
    31d8:	d909      	bls.n	31ee <baudrate_set+0x9e>
    31da:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    31de:	d046      	beq.n	326e <baudrate_set+0x11e>
    31e0:	d91f      	bls.n	3222 <baudrate_set+0xd2>
    31e2:	4b29      	ldr	r3, [pc, #164]	; (3288 <baudrate_set+0x138>)
    31e4:	4299      	cmp	r1, r3
    31e6:	d148      	bne.n	327a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    31e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    31ec:	e7d9      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    31ee:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    31f2:	d037      	beq.n	3264 <baudrate_set+0x114>
    31f4:	d905      	bls.n	3202 <baudrate_set+0xb2>
    31f6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    31fa:	d10f      	bne.n	321c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    31fc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3200:	e7cf      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    3202:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    3206:	4299      	cmp	r1, r3
    3208:	d02e      	beq.n	3268 <baudrate_set+0x118>
    320a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    320e:	d102      	bne.n	3216 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3210:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3214:	e7c5      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    3216:	f06f 0015 	mvn.w	r0, #21
    321a:	4770      	bx	lr
    321c:	f06f 0015 	mvn.w	r0, #21
    3220:	4770      	bx	lr
    3222:	4b1a      	ldr	r3, [pc, #104]	; (328c <baudrate_set+0x13c>)
    3224:	4299      	cmp	r1, r3
    3226:	d025      	beq.n	3274 <baudrate_set+0x124>
    3228:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    322c:	d102      	bne.n	3234 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    322e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3232:	e7b6      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    3234:	f06f 0015 	mvn.w	r0, #21
    3238:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    323a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    323e:	e7b0      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3240:	4b13      	ldr	r3, [pc, #76]	; (3290 <baudrate_set+0x140>)
    3242:	e7ae      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3244:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3248:	e7ab      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    324a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    324e:	e7a8      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3250:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3254:	e7a5      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3256:	4b0f      	ldr	r3, [pc, #60]	; (3294 <baudrate_set+0x144>)
    3258:	e7a3      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    325a:	4b0f      	ldr	r3, [pc, #60]	; (3298 <baudrate_set+0x148>)
    325c:	e7a1      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    325e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3262:	e79e      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3264:	4b0d      	ldr	r3, [pc, #52]	; (329c <baudrate_set+0x14c>)
    3266:	e79c      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3268:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    326c:	e799      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    326e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3272:	e796      	b.n	31a2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3274:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3278:	e793      	b.n	31a2 <baudrate_set+0x52>
	switch (baudrate) {
    327a:	f06f 0015 	mvn.w	r0, #21
}
    327e:	4770      	bx	lr
    3280:	0013b000 	.word	0x0013b000
    3284:	004ea000 	.word	0x004ea000
    3288:	000f4240 	.word	0x000f4240
    328c:	0003d090 	.word	0x0003d090
    3290:	00275000 	.word	0x00275000
    3294:	0075c000 	.word	0x0075c000
    3298:	003af000 	.word	0x003af000
    329c:	013a9000 	.word	0x013a9000

000032a0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    32a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32a4:	4605      	mov	r5, r0
    32a6:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    32a8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32ac:	f006 f9e1 	bl	9672 <k_is_in_isr>
    32b0:	b920      	cbnz	r0, 32bc <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    32b2:	4b16      	ldr	r3, [pc, #88]	; (330c <uarte_nrfx_poll_out+0x6c>)
    32b4:	781b      	ldrb	r3, [r3, #0]
    32b6:	b143      	cbz	r3, 32ca <uarte_nrfx_poll_out+0x2a>
    32b8:	2300      	movs	r3, #0
    32ba:	e000      	b.n	32be <uarte_nrfx_poll_out+0x1e>
    32bc:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    32be:	b953      	cbnz	r3, 32d6 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    32c0:	4628      	mov	r0, r5
    32c2:	f005 ff82 	bl	91ca <wait_tx_ready>
    32c6:	4606      	mov	r6, r0
    32c8:	e013      	b.n	32f2 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32ca:	2301      	movs	r3, #1
    32cc:	e7f7      	b.n	32be <uarte_nrfx_poll_out+0x1e>
    32ce:	f384 8811 	msr	BASEPRI, r4
    32d2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    32d6:	f04f 0320 	mov.w	r3, #32
    32da:	f3ef 8411 	mrs	r4, BASEPRI
    32de:	f383 8812 	msr	BASEPRI_MAX, r3
    32e2:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    32e6:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    32e8:	4628      	mov	r0, r5
    32ea:	f005 ff20 	bl	912e <is_tx_ready>
    32ee:	2800      	cmp	r0, #0
    32f0:	d0ed      	beq.n	32ce <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    32f2:	4641      	mov	r1, r8
    32f4:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    32f8:	2201      	movs	r2, #1
    32fa:	4628      	mov	r0, r5
    32fc:	f005 ff31 	bl	9162 <tx_start>
	__asm__ volatile(
    3300:	f386 8811 	msr	BASEPRI, r6
    3304:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    330c:	20005275 	.word	0x20005275

00003310 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    3310:	b538      	push	{r3, r4, r5, lr}
    3312:	4604      	mov	r4, r0
    3314:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3316:	f101 0012 	add.w	r0, r1, #18
    331a:	f002 fa21 	bl	5760 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    331e:	4b0c      	ldr	r3, [pc, #48]	; (3350 <endtx_stoptx_ppi_init+0x40>)
    3320:	4298      	cmp	r0, r3
    3322:	d111      	bne.n	3348 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3324:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3326:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    332a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    332c:	4a09      	ldr	r2, [pc, #36]	; (3354 <endtx_stoptx_ppi_init+0x44>)
    332e:	33a2      	adds	r3, #162	; 0xa2
    3330:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3338:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    333a:	7ca9      	ldrb	r1, [r5, #18]
    333c:	2301      	movs	r3, #1
    333e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    3340:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    3344:	2000      	movs	r0, #0
}
    3346:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    3348:	f06f 0004 	mvn.w	r0, #4
    334c:	e7fb      	b.n	3346 <endtx_stoptx_ppi_init+0x36>
    334e:	bf00      	nop
    3350:	0bad0000 	.word	0x0bad0000
    3354:	4001f000 	.word	0x4001f000

00003358 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3358:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    335c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3360:	4b01      	ldr	r3, [pc, #4]	; (3368 <set_comparator+0x10>)
    3362:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3366:	4770      	bx	lr
    3368:	40011000 	.word	0x40011000

0000336c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    336c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3370:	4b01      	ldr	r3, [pc, #4]	; (3378 <get_comparator+0xc>)
    3372:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    3376:	4770      	bx	lr
    3378:	40011000 	.word	0x40011000

0000337c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    337c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3380:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3382:	4a02      	ldr	r2, [pc, #8]	; (338c <event_enable+0x10>)
    3384:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3388:	4770      	bx	lr
    338a:	bf00      	nop
    338c:	40011000 	.word	0x40011000

00003390 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3394:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3396:	4a02      	ldr	r2, [pc, #8]	; (33a0 <event_disable+0x10>)
    3398:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    339c:	4770      	bx	lr
    339e:	bf00      	nop
    33a0:	40011000 	.word	0x40011000

000033a4 <counter>:
     return p_reg->COUNTER;
    33a4:	4b01      	ldr	r3, [pc, #4]	; (33ac <counter+0x8>)
    33a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    33aa:	4770      	bx	lr
    33ac:	40011000 	.word	0x40011000

000033b0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    33b0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    33b2:	2301      	movs	r3, #1
    33b4:	4083      	lsls	r3, r0
    33b6:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33ba:	4a10      	ldr	r2, [pc, #64]	; (33fc <compare_int_lock+0x4c>)
    33bc:	f3bf 8f5b 	dmb	ish
    33c0:	e852 1f00 	ldrex	r1, [r2]
    33c4:	ea01 0e0c 	and.w	lr, r1, ip
    33c8:	e842 e400 	strex	r4, lr, [r2]
    33cc:	2c00      	cmp	r4, #0
    33ce:	d1f7      	bne.n	33c0 <compare_int_lock+0x10>
    33d0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    33d8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    33dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    33e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    33e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    33e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33ec:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    33f0:	420b      	tst	r3, r1
}
    33f2:	bf14      	ite	ne
    33f4:	2001      	movne	r0, #1
    33f6:	2000      	moveq	r0, #0
    33f8:	bd10      	pop	{r4, pc}
    33fa:	bf00      	nop
    33fc:	20004b84 	.word	0x20004b84

00003400 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    3404:	f005 ff9b 	bl	933e <full_int_lock>
    3408:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    340e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    3410:	4a17      	ldr	r2, [pc, #92]	; (3470 <channel_processing_check_and_clear+0x70>)
    3412:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3416:	4213      	tst	r3, r2
    3418:	d105      	bne.n	3426 <channel_processing_check_and_clear+0x26>
	bool result = false;
    341a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    341c:	4628      	mov	r0, r5
    341e:	f005 ff97 	bl	9350 <full_int_unlock>

	return result;
}
    3422:	4630      	mov	r0, r6
    3424:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3426:	2301      	movs	r3, #1
    3428:	40a3      	lsls	r3, r4
    342a:	43db      	mvns	r3, r3
    342c:	4a11      	ldr	r2, [pc, #68]	; (3474 <channel_processing_check_and_clear+0x74>)
    342e:	f3bf 8f5b 	dmb	ish
    3432:	e852 1f00 	ldrex	r1, [r2]
    3436:	ea01 0003 	and.w	r0, r1, r3
    343a:	e842 0600 	strex	r6, r0, [r2]
    343e:	2e00      	cmp	r6, #0
    3440:	d1f7      	bne.n	3432 <channel_processing_check_and_clear+0x32>
    3442:	f3bf 8f5b 	dmb	ish
    3446:	b959      	cbnz	r1, 3460 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3448:	f104 0350 	add.w	r3, r4, #80	; 0x50
    344c:	009b      	lsls	r3, r3, #2
    344e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3454:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3458:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    345a:	b113      	cbz	r3, 3462 <channel_processing_check_and_clear+0x62>
    345c:	2301      	movs	r3, #1
    345e:	e000      	b.n	3462 <channel_processing_check_and_clear+0x62>
    3460:	2301      	movs	r3, #1
		if (result) {
    3462:	461e      	mov	r6, r3
    3464:	2b00      	cmp	r3, #0
    3466:	d0d9      	beq.n	341c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    3468:	4620      	mov	r0, r4
    346a:	f005 ff59 	bl	9320 <event_clear>
    346e:	e7d5      	b.n	341c <channel_processing_check_and_clear+0x1c>
    3470:	40011000 	.word	0x40011000
    3474:	20004b80 	.word	0x20004b80

00003478 <compare_int_unlock>:
	if (key) {
    3478:	b901      	cbnz	r1, 347c <compare_int_unlock+0x4>
}
    347a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    347c:	2301      	movs	r3, #1
    347e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3480:	4a11      	ldr	r2, [pc, #68]	; (34c8 <compare_int_unlock+0x50>)
    3482:	f3bf 8f5b 	dmb	ish
    3486:	e852 1f00 	ldrex	r1, [r2]
    348a:	4319      	orrs	r1, r3
    348c:	e842 1c00 	strex	ip, r1, [r2]
    3490:	f1bc 0f00 	cmp.w	ip, #0
    3494:	d1f7      	bne.n	3486 <compare_int_unlock+0xe>
    3496:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    349a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    349e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    34a0:	4a0a      	ldr	r2, [pc, #40]	; (34cc <compare_int_unlock+0x54>)
    34a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    34a6:	f3bf 8f5b 	dmb	ish
    34aa:	4b09      	ldr	r3, [pc, #36]	; (34d0 <compare_int_unlock+0x58>)
    34ac:	681b      	ldr	r3, [r3, #0]
    34ae:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    34b2:	fa23 f000 	lsr.w	r0, r3, r0
    34b6:	f010 0f01 	tst.w	r0, #1
    34ba:	d0de      	beq.n	347a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34bc:	4b05      	ldr	r3, [pc, #20]	; (34d4 <compare_int_unlock+0x5c>)
    34be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    34c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    34c6:	e7d8      	b.n	347a <compare_int_unlock+0x2>
    34c8:	20004b84 	.word	0x20004b84
    34cc:	40011000 	.word	0x40011000
    34d0:	20004b80 	.word	0x20004b80
    34d4:	e000e100 	.word	0xe000e100

000034d8 <sys_clock_timeout_handler>:
{
    34d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    34dc:	4607      	mov	r7, r0
    34de:	4614      	mov	r4, r2
    34e0:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    34e2:	4610      	mov	r0, r2
    34e4:	4619      	mov	r1, r3
    34e6:	f005 ff27 	bl	9338 <absolute_time_to_cc>
    34ea:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    34ec:	4b15      	ldr	r3, [pc, #84]	; (3544 <sys_clock_timeout_handler+0x6c>)
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    34f2:	601c      	str	r4, [r3, #0]
    34f4:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    34f6:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    34fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    34fe:	d309      	bcc.n	3514 <sys_clock_timeout_handler+0x3c>
	return false;
    3500:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3502:	f004 fd91 	bl	8028 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    3506:	4638      	mov	r0, r7
    3508:	f7ff ff30 	bl	336c <get_comparator>
    350c:	42a8      	cmp	r0, r5
    350e:	d00e      	beq.n	352e <sys_clock_timeout_handler+0x56>
}
    3510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3514:	4b0c      	ldr	r3, [pc, #48]	; (3548 <sys_clock_timeout_handler+0x70>)
    3516:	681b      	ldr	r3, [r3, #0]
    3518:	0a1a      	lsrs	r2, r3, #8
    351a:	061b      	lsls	r3, r3, #24
    351c:	eb15 0803 	adds.w	r8, r5, r3
    3520:	f142 0900 	adc.w	r9, r2, #0
    3524:	4b09      	ldr	r3, [pc, #36]	; (354c <sys_clock_timeout_handler+0x74>)
    3526:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    352a:	2401      	movs	r4, #1
    352c:	e7e9      	b.n	3502 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    352e:	b11c      	cbz	r4, 3538 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    3530:	4638      	mov	r0, r7
    3532:	f7ff ff23 	bl	337c <event_enable>
}
    3536:	e7eb      	b.n	3510 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3538:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    353c:	4638      	mov	r0, r7
    353e:	f7ff ff0b 	bl	3358 <set_comparator>
    3542:	e7f5      	b.n	3530 <sys_clock_timeout_handler+0x58>
    3544:	200043f0 	.word	0x200043f0
    3548:	20004b88 	.word	0x20004b88
    354c:	200043d8 	.word	0x200043d8

00003550 <z_nrf_rtc_timer_read>:
{
    3550:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3552:	4b0d      	ldr	r3, [pc, #52]	; (3588 <z_nrf_rtc_timer_read+0x38>)
    3554:	681c      	ldr	r4, [r3, #0]
    3556:	0a25      	lsrs	r5, r4, #8
    3558:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    355a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    355e:	f7ff ff21 	bl	33a4 <counter>
    3562:	4603      	mov	r3, r0
	val += cntr;
    3564:	1900      	adds	r0, r0, r4
    3566:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    356a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    356e:	d20a      	bcs.n	3586 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    3570:	4b06      	ldr	r3, [pc, #24]	; (358c <z_nrf_rtc_timer_read+0x3c>)
    3572:	e9d3 2300 	ldrd	r2, r3, [r3]
    3576:	4290      	cmp	r0, r2
    3578:	eb71 0303 	sbcs.w	r3, r1, r3
    357c:	d203      	bcs.n	3586 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    357e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3582:	f141 0100 	adc.w	r1, r1, #0
}
    3586:	bd38      	pop	{r3, r4, r5, pc}
    3588:	20004b88 	.word	0x20004b88
    358c:	200043d8 	.word	0x200043d8

00003590 <compare_set_nolocks>:
{
    3590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3592:	4606      	mov	r6, r0
    3594:	4614      	mov	r4, r2
    3596:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3598:	4610      	mov	r0, r2
    359a:	4619      	mov	r1, r3
    359c:	f005 fecc 	bl	9338 <absolute_time_to_cc>
    35a0:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    35a2:	f7ff ffd5 	bl	3550 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    35a6:	42a0      	cmp	r0, r4
    35a8:	eb71 0305 	sbcs.w	r3, r1, r5
    35ac:	d21d      	bcs.n	35ea <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    35ae:	1a23      	subs	r3, r4, r0
    35b0:	eb65 0101 	sbc.w	r1, r5, r1
    35b4:	4a1b      	ldr	r2, [pc, #108]	; (3624 <compare_set_nolocks+0x94>)
    35b6:	4293      	cmp	r3, r2
    35b8:	f171 0300 	sbcs.w	r3, r1, #0
    35bc:	d22f      	bcs.n	361e <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    35be:	4b1a      	ldr	r3, [pc, #104]	; (3628 <compare_set_nolocks+0x98>)
    35c0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    35c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    35c8:	42ab      	cmp	r3, r5
    35ca:	bf08      	it	eq
    35cc:	42a2      	cmpeq	r2, r4
    35ce:	d01a      	beq.n	3606 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    35d0:	4639      	mov	r1, r7
    35d2:	4630      	mov	r0, r6
    35d4:	f005 fec1 	bl	935a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    35d8:	4639      	mov	r1, r7
    35da:	f005 fe9d 	bl	9318 <counter_sub>
    35de:	1900      	adds	r0, r0, r4
    35e0:	f145 0300 	adc.w	r3, r5, #0
    35e4:	4604      	mov	r4, r0
    35e6:	461d      	mov	r5, r3
    35e8:	e00d      	b.n	3606 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    35ea:	2301      	movs	r3, #1
    35ec:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    35ee:	4a0f      	ldr	r2, [pc, #60]	; (362c <compare_set_nolocks+0x9c>)
    35f0:	f3bf 8f5b 	dmb	ish
    35f4:	e852 1f00 	ldrex	r1, [r2]
    35f8:	4319      	orrs	r1, r3
    35fa:	e842 1000 	strex	r0, r1, [r2]
    35fe:	2800      	cmp	r0, #0
    3600:	d1f8      	bne.n	35f4 <compare_set_nolocks+0x64>
    3602:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3606:	4b08      	ldr	r3, [pc, #32]	; (3628 <compare_set_nolocks+0x98>)
    3608:	0132      	lsls	r2, r6, #4
    360a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    360e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    3612:	9906      	ldr	r1, [sp, #24]
    3614:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    3616:	9b07      	ldr	r3, [sp, #28]
    3618:	6073      	str	r3, [r6, #4]
	return ret;
    361a:	2000      	movs	r0, #0
}
    361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    361e:	f06f 0015 	mvn.w	r0, #21
    3622:	e7fb      	b.n	361c <compare_set_nolocks+0x8c>
    3624:	01000001 	.word	0x01000001
    3628:	200043e0 	.word	0x200043e0
    362c:	20004b80 	.word	0x20004b80

00003630 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3630:	b530      	push	{r4, r5, lr}
    3632:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    3634:	2300      	movs	r3, #0
    3636:	4a1d      	ldr	r2, [pc, #116]	; (36ac <sys_clock_driver_init+0x7c>)
    3638:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    363c:	2b00      	cmp	r3, #0
    363e:	dd24      	ble.n	368a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    3640:	4c1a      	ldr	r4, [pc, #104]	; (36ac <sys_clock_driver_init+0x7c>)
    3642:	2502      	movs	r5, #2
    3644:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3648:	4b19      	ldr	r3, [pc, #100]	; (36b0 <sys_clock_driver_init+0x80>)
    364a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    364e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3652:	2200      	movs	r2, #0
    3654:	2101      	movs	r1, #1
    3656:	2011      	movs	r0, #17
    3658:	f7fe fc3a 	bl	1ed0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    365c:	2011      	movs	r0, #17
    365e:	f7fe fc1b 	bl	1e98 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3662:	2301      	movs	r3, #1
    3664:	60a3      	str	r3, [r4, #8]
    3666:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3668:	4a12      	ldr	r2, [pc, #72]	; (36b4 <sys_clock_driver_init+0x84>)
    366a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    366c:	2400      	movs	r4, #0
    366e:	9401      	str	r4, [sp, #4]
    3670:	4b11      	ldr	r3, [pc, #68]	; (36b8 <sys_clock_driver_init+0x88>)
    3672:	9300      	str	r3, [sp, #0]
    3674:	4a11      	ldr	r2, [pc, #68]	; (36bc <sys_clock_driver_init+0x8c>)
    3676:	2300      	movs	r3, #0
    3678:	4620      	mov	r0, r4
    367a:	f005 fea9 	bl	93d0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    367e:	4628      	mov	r0, r5
    3680:	f7ff facc 	bl	2c1c <z_nrf_clock_control_lf_on>

	return 0;
}
    3684:	4620      	mov	r0, r4
    3686:	b003      	add	sp, #12
    3688:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    368a:	4a0d      	ldr	r2, [pc, #52]	; (36c0 <sys_clock_driver_init+0x90>)
    368c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3698:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    369c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    36a0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    36a2:	4902      	ldr	r1, [pc, #8]	; (36ac <sys_clock_driver_init+0x7c>)
    36a4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    36a8:	3301      	adds	r3, #1
    36aa:	e7c7      	b.n	363c <sys_clock_driver_init+0xc>
    36ac:	40011000 	.word	0x40011000
    36b0:	e000e100 	.word	0xe000e100
    36b4:	20004b84 	.word	0x20004b84
    36b8:	000034d9 	.word	0x000034d9
    36bc:	007fffff 	.word	0x007fffff
    36c0:	200043e0 	.word	0x200043e0

000036c4 <process_channel>:
{
    36c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36c8:	b082      	sub	sp, #8
    36ca:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    36cc:	f7ff fe98 	bl	3400 <channel_processing_check_and_clear>
    36d0:	b910      	cbnz	r0, 36d8 <process_channel+0x14>
}
    36d2:	b002      	add	sp, #8
    36d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    36d8:	f7ff ff3a 	bl	3550 <z_nrf_rtc_timer_read>
    36dc:	4682      	mov	sl, r0
    36de:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    36e0:	f005 fe2d 	bl	933e <full_int_lock>
    36e4:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    36e6:	4b13      	ldr	r3, [pc, #76]	; (3734 <process_channel+0x70>)
    36e8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    36ec:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    36f0:	45c2      	cmp	sl, r8
    36f2:	eb76 0309 	sbcs.w	r3, r6, r9
    36f6:	d20b      	bcs.n	3710 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    36f8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    36fa:	4628      	mov	r0, r5
    36fc:	f005 fe28 	bl	9350 <full_int_unlock>
		if (handler) {
    3700:	2e00      	cmp	r6, #0
    3702:	d0e6      	beq.n	36d2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    3704:	9700      	str	r7, [sp, #0]
    3706:	4642      	mov	r2, r8
    3708:	464b      	mov	r3, r9
    370a:	4620      	mov	r0, r4
    370c:	47b0      	blx	r6
}
    370e:	e7e0      	b.n	36d2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    3710:	4a08      	ldr	r2, [pc, #32]	; (3734 <process_channel+0x70>)
    3712:	0123      	lsls	r3, r4, #4
    3714:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    3718:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    371a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    371c:	2000      	movs	r0, #0
    371e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3728:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    372c:	4620      	mov	r0, r4
    372e:	f7ff fe2f 	bl	3390 <event_disable>
    3732:	e7e2      	b.n	36fa <process_channel+0x36>
    3734:	200043e0 	.word	0x200043e0

00003738 <rtc_nrf_isr>:
{
    3738:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    373a:	4b0e      	ldr	r3, [pc, #56]	; (3774 <rtc_nrf_isr+0x3c>)
    373c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3740:	f013 0f02 	tst.w	r3, #2
    3744:	d00d      	beq.n	3762 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3746:	4b0b      	ldr	r3, [pc, #44]	; (3774 <rtc_nrf_isr+0x3c>)
    3748:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    374c:	b14b      	cbz	r3, 3762 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    374e:	4b09      	ldr	r3, [pc, #36]	; (3774 <rtc_nrf_isr+0x3c>)
    3750:	2200      	movs	r2, #0
    3752:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3756:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    375a:	4a07      	ldr	r2, [pc, #28]	; (3778 <rtc_nrf_isr+0x40>)
    375c:	6813      	ldr	r3, [r2, #0]
    375e:	3301      	adds	r3, #1
    3760:	6013      	str	r3, [r2, #0]
{
    3762:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3764:	2c00      	cmp	r4, #0
    3766:	dd00      	ble.n	376a <rtc_nrf_isr+0x32>
}
    3768:	bd10      	pop	{r4, pc}
		process_channel(chan);
    376a:	4620      	mov	r0, r4
    376c:	f7ff ffaa 	bl	36c4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3770:	3401      	adds	r4, #1
    3772:	e7f7      	b.n	3764 <rtc_nrf_isr+0x2c>
    3774:	40011000 	.word	0x40011000
    3778:	20004b88 	.word	0x20004b88

0000377c <sys_clock_set_timeout>:
{
    377c:	b510      	push	{r4, lr}
    377e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3780:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3784:	d006      	beq.n	3794 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3786:	2801      	cmp	r0, #1
    3788:	dd06      	ble.n	3798 <sys_clock_set_timeout+0x1c>
    378a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    378e:	da05      	bge.n	379c <sys_clock_set_timeout+0x20>
    3790:	1e44      	subs	r4, r0, #1
    3792:	e004      	b.n	379e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3794:	480f      	ldr	r0, [pc, #60]	; (37d4 <sys_clock_set_timeout+0x58>)
    3796:	e7f8      	b.n	378a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3798:	2400      	movs	r4, #0
    379a:	e000      	b.n	379e <sys_clock_set_timeout+0x22>
    379c:	4c0d      	ldr	r4, [pc, #52]	; (37d4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    379e:	f7ff fed7 	bl	3550 <z_nrf_rtc_timer_read>
    37a2:	4b0d      	ldr	r3, [pc, #52]	; (37d8 <sys_clock_set_timeout+0x5c>)
    37a4:	6819      	ldr	r1, [r3, #0]
    37a6:	685b      	ldr	r3, [r3, #4]
    37a8:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    37aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    37ae:	d300      	bcc.n	37b2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    37b0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    37b2:	4420      	add	r0, r4
    37b4:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    37b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    37ba:	d300      	bcc.n	37be <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    37bc:	4a05      	ldr	r2, [pc, #20]	; (37d4 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    37be:	2000      	movs	r0, #0
    37c0:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    37c2:	9001      	str	r0, [sp, #4]
    37c4:	4905      	ldr	r1, [pc, #20]	; (37dc <sys_clock_set_timeout+0x60>)
    37c6:	9100      	str	r1, [sp, #0]
    37c8:	f143 0300 	adc.w	r3, r3, #0
    37cc:	f005 fe00 	bl	93d0 <compare_set>
}
    37d0:	b002      	add	sp, #8
    37d2:	bd10      	pop	{r4, pc}
    37d4:	007fffff 	.word	0x007fffff
    37d8:	200043f0 	.word	0x200043f0
    37dc:	000034d9 	.word	0x000034d9

000037e0 <sys_clock_elapsed>:
{
    37e0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    37e2:	f7ff feb5 	bl	3550 <z_nrf_rtc_timer_read>
    37e6:	4b02      	ldr	r3, [pc, #8]	; (37f0 <sys_clock_elapsed+0x10>)
    37e8:	681b      	ldr	r3, [r3, #0]
}
    37ea:	1ac0      	subs	r0, r0, r3
    37ec:	bd08      	pop	{r3, pc}
    37ee:	bf00      	nop
    37f0:	200043f0 	.word	0x200043f0

000037f4 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    37f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37f8:	460c      	mov	r4, r1
    37fa:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    37fc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    3800:	d002      	beq.n	3808 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3802:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    3806:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3808:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    380c:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    3810:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    3814:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    3818:	f010 0f20 	tst.w	r0, #32
    381c:	d01d      	beq.n	385a <nrf_pin_configure+0x66>
    381e:	b1fb      	cbz	r3, 3860 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    3820:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3824:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3828:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    382a:	f013 0f01 	tst.w	r3, #1
    382e:	d019      	beq.n	3864 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    3830:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3834:	096d      	lsrs	r5, r5, #5
    3836:	d023      	beq.n	3880 <nrf_pin_configure+0x8c>
    3838:	bb2d      	cbnz	r5, 3886 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    383a:	4d19      	ldr	r5, [pc, #100]	; (38a0 <nrf_pin_configure+0xac>)
    383c:	f240 232e 	movw	r3, #558	; 0x22e
    3840:	462a      	mov	r2, r5
    3842:	4918      	ldr	r1, [pc, #96]	; (38a4 <nrf_pin_configure+0xb0>)
    3844:	4818      	ldr	r0, [pc, #96]	; (38a8 <nrf_pin_configure+0xb4>)
    3846:	f005 f908 	bl	8a5a <assert_print>
    384a:	f240 212e 	movw	r1, #558	; 0x22e
    384e:	4628      	mov	r0, r5
    3850:	f005 f8fc 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3858:	e016      	b.n	3888 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    385a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    385e:	e7e1      	b.n	3824 <nrf_pin_configure+0x30>
    switch (port)
    3860:	2300      	movs	r3, #0
    3862:	e7df      	b.n	3824 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3864:	4e0e      	ldr	r6, [pc, #56]	; (38a0 <nrf_pin_configure+0xac>)
    3866:	f240 2329 	movw	r3, #553	; 0x229
    386a:	4632      	mov	r2, r6
    386c:	490f      	ldr	r1, [pc, #60]	; (38ac <nrf_pin_configure+0xb8>)
    386e:	480e      	ldr	r0, [pc, #56]	; (38a8 <nrf_pin_configure+0xb4>)
    3870:	f005 f8f3 	bl	8a5a <assert_print>
    3874:	f240 2129 	movw	r1, #553	; 0x229
    3878:	4630      	mov	r0, r6
    387a:	f005 f8e7 	bl	8a4c <assert_post_action>
    387e:	e7d7      	b.n	3830 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    3880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3884:	e000      	b.n	3888 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3886:	4b0a      	ldr	r3, [pc, #40]	; (38b0 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3888:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    388c:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3890:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    3894:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3898:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    389c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    38a0:	0000a55c 	.word	0x0000a55c
    38a4:	00009ccc 	.word	0x00009ccc
    38a8:	00009cd0 	.word	0x00009cd0
    38ac:	0000a590 	.word	0x0000a590
    38b0:	50000300 	.word	0x50000300

000038b4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    38b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    38b8:	4605      	mov	r5, r0
    38ba:	460e      	mov	r6, r1
    38bc:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    38be:	2400      	movs	r4, #0
    38c0:	e04e      	b.n	3960 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    38c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    38c6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    38ca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    38ce:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    38d2:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    38d6:	f013 0f20 	tst.w	r3, #32
    38da:	d01f      	beq.n	391c <pinctrl_configure_pins+0x68>
    38dc:	b109      	cbz	r1, 38e2 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    38de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    38e2:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    38e6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38e8:	f012 0f01 	tst.w	r2, #1
    38ec:	d019      	beq.n	3922 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    38ee:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38f2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    38f6:	d023      	beq.n	3940 <pinctrl_configure_pins+0x8c>
    38f8:	bb2b      	cbnz	r3, 3946 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    38fa:	f8df 9344 	ldr.w	r9, [pc, #836]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    38fe:	f240 232e 	movw	r3, #558	; 0x22e
    3902:	464a      	mov	r2, r9
    3904:	49cf      	ldr	r1, [pc, #828]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3906:	48d0      	ldr	r0, [pc, #832]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3908:	f005 f8a7 	bl	8a5a <assert_print>
    390c:	f240 212e 	movw	r1, #558	; 0x22e
    3910:	4648      	mov	r0, r9
    3912:	f005 f89b 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    391a:	e015      	b.n	3948 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    391c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3920:	e7df      	b.n	38e2 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3922:	f8df a31c 	ldr.w	sl, [pc, #796]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3926:	f240 2329 	movw	r3, #553	; 0x229
    392a:	4652      	mov	r2, sl
    392c:	49c7      	ldr	r1, [pc, #796]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    392e:	48c6      	ldr	r0, [pc, #792]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3930:	f005 f893 	bl	8a5a <assert_print>
    3934:	f240 2129 	movw	r1, #553	; 0x229
    3938:	4650      	mov	r0, sl
    393a:	f005 f887 	bl	8a4c <assert_post_action>
    393e:	e7d6      	b.n	38ee <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    3940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3944:	e000      	b.n	3948 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3946:	4ac2      	ldr	r2, [pc, #776]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3948:	2101      	movs	r1, #1
    394a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    394e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3952:	460a      	mov	r2, r1
    3954:	f855 0008 	ldr.w	r0, [r5, r8]
    3958:	f7ff ff4c 	bl	37f4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    395c:	3401      	adds	r4, #1
    395e:	b2e4      	uxtb	r4, r4
    3960:	42b4      	cmp	r4, r6
    3962:	f080 841e 	bcs.w	41a2 <__data_size+0x5a>
		switch (NRF_GET_FUN(pins[i])) {
    3966:	ea4f 0884 	mov.w	r8, r4, lsl #2
    396a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    396e:	0c1a      	lsrs	r2, r3, #16
    3970:	2a22      	cmp	r2, #34	; 0x22
    3972:	f200 8418 	bhi.w	41a6 <__data_size+0x5e>
    3976:	a101      	add	r1, pc, #4	; (adr r1, 397c <pinctrl_configure_pins+0xc8>)
    3978:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    397c:	000038c3 	.word	0x000038c3
    3980:	00003a09 	.word	0x00003a09
    3984:	00003a1f 	.word	0x00003a1f
    3988:	00003abf 	.word	0x00003abf
    398c:	00003ad5 	.word	0x00003ad5
    3990:	00003b75 	.word	0x00003b75
    3994:	00003c15 	.word	0x00003c15
    3998:	000041a7 	.word	0x000041a7
    399c:	000041a7 	.word	0x000041a7
    39a0:	000041a7 	.word	0x000041a7
    39a4:	000041a7 	.word	0x000041a7
    39a8:	00003c2b 	.word	0x00003c2b
    39ac:	00003c55 	.word	0x00003c55
    39b0:	000041a7 	.word	0x000041a7
    39b4:	000041a7 	.word	0x000041a7
    39b8:	000041a7 	.word	0x000041a7
    39bc:	000041a7 	.word	0x000041a7
    39c0:	000041a7 	.word	0x000041a7
    39c4:	000041a7 	.word	0x000041a7
    39c8:	000041a7 	.word	0x000041a7
    39cc:	000041a7 	.word	0x000041a7
    39d0:	000041a7 	.word	0x000041a7
    39d4:	00003c6b 	.word	0x00003c6b
    39d8:	00003d91 	.word	0x00003d91
    39dc:	00003eb7 	.word	0x00003eb7
    39e0:	00003ff3 	.word	0x00003ff3
    39e4:	000041a7 	.word	0x000041a7
    39e8:	000041a7 	.word	0x000041a7
    39ec:	000041a7 	.word	0x000041a7
    39f0:	00004119 	.word	0x00004119
    39f4:	0000412f 	.word	0x0000412f
    39f8:	00004145 	.word	0x00004145
    39fc:	0000415b 	.word	0x0000415b
    3a00:	00004173 	.word	0x00004173
    3a04:	0000418b 	.word	0x0000418b
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    3a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3a0c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3a10:	2200      	movs	r2, #0
    3a12:	4611      	mov	r1, r2
    3a14:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3a18:	f7ff feec 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3a1c:	e79e      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    3a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3a22:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    3a26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3a2a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3a2e:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3a32:	f013 0f20 	tst.w	r3, #32
    3a36:	d01f      	beq.n	3a78 <pinctrl_configure_pins+0x1c4>
    3a38:	b30a      	cbz	r2, 3a7e <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    3a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3a3e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3a42:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3a44:	f013 0f01 	tst.w	r3, #1
    3a48:	d01b      	beq.n	3a82 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    3a4a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a4e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3a52:	d025      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a54:	bb3b      	cbnz	r3, 3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
            NRFX_ASSERT(0);
    3a56:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3a5a:	f240 232e 	movw	r3, #558	; 0x22e
    3a5e:	464a      	mov	r2, r9
    3a60:	4978      	ldr	r1, [pc, #480]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3a62:	4879      	ldr	r0, [pc, #484]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3a64:	f004 fff9 	bl	8a5a <assert_print>
    3a68:	f240 212e 	movw	r1, #558	; 0x22e
    3a6c:	4648      	mov	r0, r9
    3a6e:	f004 ffed 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3a76:	e017      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
            mask = P0_FEATURE_PINS_PRESENT;
    3a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a7c:	e7df      	b.n	3a3e <pinctrl_configure_pins+0x18a>
    switch (port)
    3a7e:	2300      	movs	r3, #0
    3a80:	e7dd      	b.n	3a3e <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3a82:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3a86:	f240 2329 	movw	r3, #553	; 0x229
    3a8a:	4652      	mov	r2, sl
    3a8c:	496f      	ldr	r1, [pc, #444]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3a8e:	486e      	ldr	r0, [pc, #440]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3a90:	f004 ffe3 	bl	8a5a <assert_print>
    3a94:	f240 2129 	movw	r1, #553	; 0x229
    3a98:	4650      	mov	r0, sl
    3a9a:	f004 ffd7 	bl	8a4c <assert_post_action>
    3a9e:	e7d4      	b.n	3a4a <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    3aa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3aa4:	e000      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3aa6:	4a6a      	ldr	r2, [pc, #424]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3aa8:	2101      	movs	r1, #1
    3aaa:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    3aae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3ab2:	460a      	mov	r2, r1
    3ab4:	f855 0008 	ldr.w	r0, [r5, r8]
    3ab8:	f7ff fe9c 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3abc:	e74e      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    3abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3ac2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3ac6:	2200      	movs	r2, #0
    3ac8:	4611      	mov	r1, r2
    3aca:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3ace:	f7ff fe91 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3ad2:	e743      	b.n	395c <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    3ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3ad8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    3adc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3ae0:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3ae4:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3ae8:	f013 0f20 	tst.w	r3, #32
    3aec:	d01f      	beq.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
    3aee:	b30a      	cbz	r2, 3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>
            mask = P1_FEATURE_PINS_PRESENT;
    3af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3af4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3af8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3afa:	f013 0f01 	tst.w	r3, #1
    3afe:	d01b      	beq.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    *p_pin = pin_number & 0x1F;
    3b00:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b04:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3b08:	d025      	beq.n	3b56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbe>
    3b0a:	bb3b      	cbnz	r3, 3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>
            NRFX_ASSERT(0);
    3b0c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3b10:	f240 232e 	movw	r3, #558	; 0x22e
    3b14:	464a      	mov	r2, r9
    3b16:	494b      	ldr	r1, [pc, #300]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b18:	484b      	ldr	r0, [pc, #300]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3b1a:	f004 ff9e 	bl	8a5a <assert_print>
    3b1e:	f240 212e 	movw	r1, #558	; 0x22e
    3b22:	4648      	mov	r0, r9
    3b24:	f004 ff92 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3b28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3b2c:	e017      	b.n	3b5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc6>
            mask = P0_FEATURE_PINS_PRESENT;
    3b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b32:	e7df      	b.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
    switch (port)
    3b34:	2300      	movs	r3, #0
    3b36:	e7dd      	b.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b38:	f8df a104 	ldr.w	sl, [pc, #260]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3b3c:	f240 2329 	movw	r3, #553	; 0x229
    3b40:	4652      	mov	r2, sl
    3b42:	4942      	ldr	r1, [pc, #264]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3b44:	4840      	ldr	r0, [pc, #256]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3b46:	f004 ff88 	bl	8a5a <assert_print>
    3b4a:	f240 2129 	movw	r1, #553	; 0x229
    3b4e:	4650      	mov	r0, sl
    3b50:	f004 ff7c 	bl	8a4c <assert_post_action>
    3b54:	e7d4      	b.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
        case 0: return NRF_P0;
    3b56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3b5a:	e000      	b.n	3b5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b5c:	4a3c      	ldr	r2, [pc, #240]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3b5e:	2101      	movs	r1, #1
    3b60:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    3b64:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3b68:	2200      	movs	r2, #0
    3b6a:	f855 0008 	ldr.w	r0, [r5, r8]
    3b6e:	f7ff fe41 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3b72:	e6f3      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    3b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3b78:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    3b7c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3b80:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    3b84:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    3b88:	f013 0f20 	tst.w	r3, #32
    3b8c:	d01f      	beq.n	3bce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x136>
    3b8e:	b30a      	cbz	r2, 3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
            mask = P1_FEATURE_PINS_PRESENT;
    3b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3b94:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3b98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b9a:	f013 0f01 	tst.w	r3, #1
    3b9e:	d01b      	beq.n	3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>
    *p_pin = pin_number & 0x1F;
    3ba0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ba4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3ba8:	d025      	beq.n	3bf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15e>
    3baa:	bb3b      	cbnz	r3, 3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>
            NRFX_ASSERT(0);
    3bac:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3bb0:	f240 232e 	movw	r3, #558	; 0x22e
    3bb4:	464a      	mov	r2, r9
    3bb6:	4923      	ldr	r1, [pc, #140]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3bb8:	4823      	ldr	r0, [pc, #140]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3bba:	f004 ff4e 	bl	8a5a <assert_print>
    3bbe:	f240 212e 	movw	r1, #558	; 0x22e
    3bc2:	4648      	mov	r0, r9
    3bc4:	f004 ff42 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3bcc:	e017      	b.n	3bfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x166>
            mask = P0_FEATURE_PINS_PRESENT;
    3bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bd2:	e7df      	b.n	3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    switch (port)
    3bd4:	2300      	movs	r3, #0
    3bd6:	e7dd      	b.n	3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3bd8:	f8df a064 	ldr.w	sl, [pc, #100]	; 3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3bdc:	f240 2329 	movw	r3, #553	; 0x229
    3be0:	4652      	mov	r2, sl
    3be2:	491a      	ldr	r1, [pc, #104]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3be4:	4818      	ldr	r0, [pc, #96]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    3be6:	f004 ff38 	bl	8a5a <assert_print>
    3bea:	f240 2129 	movw	r1, #553	; 0x229
    3bee:	4650      	mov	r0, sl
    3bf0:	f004 ff2c 	bl	8a4c <assert_post_action>
    3bf4:	e7d4      	b.n	3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>
        case 0: return NRF_P0;
    3bf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3bfa:	e000      	b.n	3bfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x166>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bfc:	4a14      	ldr	r2, [pc, #80]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3bfe:	2101      	movs	r1, #1
    3c00:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    3c04:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3c08:	460a      	mov	r2, r1
    3c0a:	f855 0008 	ldr.w	r0, [r5, r8]
    3c0e:	f7ff fdf1 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3c12:	e6a3      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    3c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c18:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3c1c:	2200      	movs	r2, #0
    3c1e:	4611      	mov	r1, r2
    3c20:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3c24:	f7ff fde6 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3c28:	e698      	b.n	395c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    3c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c2e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3c32:	2200      	movs	r2, #0
    3c34:	4611      	mov	r1, r2
    3c36:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3c3a:	f7ff fddb 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3c3e:	e68d      	b.n	395c <pinctrl_configure_pins+0xa8>
    3c40:	0000a55c 	.word	0x0000a55c
    3c44:	00009ccc 	.word	0x00009ccc
    3c48:	00009cd0 	.word	0x00009cd0
    3c4c:	0000a590 	.word	0x0000a590
    3c50:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    3c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c58:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3c5c:	2200      	movs	r2, #0
    3c5e:	4611      	mov	r1, r2
    3c60:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3c64:	f7ff fdc6 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    3c68:	e678      	b.n	395c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    3c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c6e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3c72:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3c76:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    3c7a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    3c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3c82:	d144      	bne.n	3d0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x276>
    switch (port)
    3c84:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3c88:	d01f      	beq.n	3cca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x232>
    3c8a:	b10b      	cbz	r3, 3c90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f8>
            mask = P1_FEATURE_PINS_PRESENT;
    3c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3c90:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3c94:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3c96:	f012 0f01 	tst.w	r2, #1
    3c9a:	d019      	beq.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    *p_pin = pin_number & 0x1F;
    3c9c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ca0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3ca4:	d023      	beq.n	3cee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x256>
    3ca6:	bb2b      	cbnz	r3, 3cf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25c>
            NRFX_ASSERT(0);
    3ca8:	f8df 9300 	ldr.w	r9, [pc, #768]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3cac:	f240 232e 	movw	r3, #558	; 0x22e
    3cb0:	464a      	mov	r2, r9
    3cb2:	49bf      	ldr	r1, [pc, #764]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3cb4:	48bf      	ldr	r0, [pc, #764]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3cb6:	f004 fed0 	bl	8a5a <assert_print>
    3cba:	f240 212e 	movw	r1, #558	; 0x22e
    3cbe:	4648      	mov	r0, r9
    3cc0:	f004 fec4 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3cc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3cc8:	e015      	b.n	3cf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25e>
            mask = P0_FEATURE_PINS_PRESENT;
    3cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3cce:	e7df      	b.n	3c90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3cd0:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3cd4:	f240 2329 	movw	r3, #553	; 0x229
    3cd8:	4652      	mov	r2, sl
    3cda:	49b7      	ldr	r1, [pc, #732]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3cdc:	48b5      	ldr	r0, [pc, #724]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3cde:	f004 febc 	bl	8a5a <assert_print>
    3ce2:	f240 2129 	movw	r1, #553	; 0x229
    3ce6:	4650      	mov	r0, sl
    3ce8:	f004 feb0 	bl	8a4c <assert_post_action>
    3cec:	e7d6      	b.n	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
        case 0: return NRF_P0;
    3cee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3cf2:	e000      	b.n	3cf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3cf4:	4ab1      	ldr	r2, [pc, #708]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3cf6:	2301      	movs	r3, #1
    3cf8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    3cfc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3d00:	2201      	movs	r2, #1
    3d02:	4611      	mov	r1, r2
    3d04:	f855 0008 	ldr.w	r0, [r5, r8]
    3d08:	f7ff fd74 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3d0c:	e626      	b.n	395c <pinctrl_configure_pins+0xa8>
    switch (port)
    3d0e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3d12:	d01f      	beq.n	3d54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2bc>
    3d14:	b30b      	cbz	r3, 3d5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c2>
            mask = P1_FEATURE_PINS_PRESENT;
    3d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3d1a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3d1e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d20:	f013 0f01 	tst.w	r3, #1
    3d24:	d01b      	beq.n	3d5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c6>
    *p_pin = pin_number & 0x1F;
    3d26:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d2a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3d2e:	d025      	beq.n	3d7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e4>
    3d30:	bb3b      	cbnz	r3, 3d82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ea>
            NRFX_ASSERT(0);
    3d32:	f8df 9278 	ldr.w	r9, [pc, #632]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3d36:	f240 232e 	movw	r3, #558	; 0x22e
    3d3a:	464a      	mov	r2, r9
    3d3c:	499c      	ldr	r1, [pc, #624]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3d3e:	489d      	ldr	r0, [pc, #628]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3d40:	f004 fe8b 	bl	8a5a <assert_print>
    3d44:	f240 212e 	movw	r1, #558	; 0x22e
    3d48:	4648      	mov	r0, r9
    3d4a:	f004 fe7f 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3d4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3d52:	e017      	b.n	3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>
            mask = P0_FEATURE_PINS_PRESENT;
    3d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d58:	e7df      	b.n	3d1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x282>
    switch (port)
    3d5a:	2300      	movs	r3, #0
    3d5c:	e7dd      	b.n	3d1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x282>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d5e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3d62:	f240 2329 	movw	r3, #553	; 0x229
    3d66:	4652      	mov	r2, sl
    3d68:	4993      	ldr	r1, [pc, #588]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3d6a:	4892      	ldr	r0, [pc, #584]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3d6c:	f004 fe75 	bl	8a5a <assert_print>
    3d70:	f240 2129 	movw	r1, #553	; 0x229
    3d74:	4650      	mov	r0, sl
    3d76:	f004 fe69 	bl	8a4c <assert_post_action>
    3d7a:	e7d4      	b.n	3d26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28e>
        case 0: return NRF_P0;
    3d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3d80:	e000      	b.n	3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d82:	4a8e      	ldr	r2, [pc, #568]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d84:	2301      	movs	r3, #1
    3d86:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    3d8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    3d8e:	e7b7      	b.n	3d00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x268>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    3d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3d94:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3d98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3d9c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    3da0:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    3da4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3da8:	d144      	bne.n	3e34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39c>
    switch (port)
    3daa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3dae:	d01f      	beq.n	3df0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x358>
    3db0:	b10b      	cbz	r3, 3db6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31e>
            mask = P1_FEATURE_PINS_PRESENT;
    3db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3db6:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3dba:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3dbc:	f012 0f01 	tst.w	r2, #1
    3dc0:	d019      	beq.n	3df6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35e>
    *p_pin = pin_number & 0x1F;
    3dc2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3dc6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3dca:	d023      	beq.n	3e14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x37c>
    3dcc:	bb2b      	cbnz	r3, 3e1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x382>
            NRFX_ASSERT(0);
    3dce:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3dd2:	f240 232e 	movw	r3, #558	; 0x22e
    3dd6:	464a      	mov	r2, r9
    3dd8:	4975      	ldr	r1, [pc, #468]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3dda:	4876      	ldr	r0, [pc, #472]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3ddc:	f004 fe3d 	bl	8a5a <assert_print>
    3de0:	f240 212e 	movw	r1, #558	; 0x22e
    3de4:	4648      	mov	r0, r9
    3de6:	f004 fe31 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3dea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3dee:	e015      	b.n	3e1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x384>
            mask = P0_FEATURE_PINS_PRESENT;
    3df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3df4:	e7df      	b.n	3db6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x31e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3df6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3dfa:	f240 2329 	movw	r3, #553	; 0x229
    3dfe:	4652      	mov	r2, sl
    3e00:	496d      	ldr	r1, [pc, #436]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3e02:	486c      	ldr	r0, [pc, #432]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3e04:	f004 fe29 	bl	8a5a <assert_print>
    3e08:	f240 2129 	movw	r1, #553	; 0x229
    3e0c:	4650      	mov	r0, sl
    3e0e:	f004 fe1d 	bl	8a4c <assert_post_action>
    3e12:	e7d6      	b.n	3dc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32a>
        case 0: return NRF_P0;
    3e14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3e18:	e000      	b.n	3e1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x384>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e1a:	4a68      	ldr	r2, [pc, #416]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3e1c:	2301      	movs	r3, #1
    3e1e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    3e22:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3e26:	2201      	movs	r2, #1
    3e28:	4611      	mov	r1, r2
    3e2a:	f855 0008 	ldr.w	r0, [r5, r8]
    3e2e:	f7ff fce1 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3e32:	e593      	b.n	395c <pinctrl_configure_pins+0xa8>
    switch (port)
    3e34:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3e38:	d01f      	beq.n	3e7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e2>
    3e3a:	b30b      	cbz	r3, 3e80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e8>
            mask = P1_FEATURE_PINS_PRESENT;
    3e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3e40:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3e44:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e46:	f013 0f01 	tst.w	r3, #1
    3e4a:	d01b      	beq.n	3e84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ec>
    *p_pin = pin_number & 0x1F;
    3e4c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e50:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3e54:	d025      	beq.n	3ea2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40a>
    3e56:	bb3b      	cbnz	r3, 3ea8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x410>
            NRFX_ASSERT(0);
    3e58:	f8df 9150 	ldr.w	r9, [pc, #336]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3e5c:	f240 232e 	movw	r3, #558	; 0x22e
    3e60:	464a      	mov	r2, r9
    3e62:	4953      	ldr	r1, [pc, #332]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3e64:	4853      	ldr	r0, [pc, #332]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3e66:	f004 fdf8 	bl	8a5a <assert_print>
    3e6a:	f240 212e 	movw	r1, #558	; 0x22e
    3e6e:	4648      	mov	r0, r9
    3e70:	f004 fdec 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3e74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3e78:	e017      	b.n	3eaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x412>
            mask = P0_FEATURE_PINS_PRESENT;
    3e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e7e:	e7df      	b.n	3e40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a8>
    switch (port)
    3e80:	2300      	movs	r3, #0
    3e82:	e7dd      	b.n	3e40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e84:	f8df a124 	ldr.w	sl, [pc, #292]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3e88:	f240 2329 	movw	r3, #553	; 0x229
    3e8c:	4652      	mov	r2, sl
    3e8e:	494a      	ldr	r1, [pc, #296]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3e90:	4848      	ldr	r0, [pc, #288]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3e92:	f004 fde2 	bl	8a5a <assert_print>
    3e96:	f240 2129 	movw	r1, #553	; 0x229
    3e9a:	4650      	mov	r0, sl
    3e9c:	f004 fdd6 	bl	8a4c <assert_post_action>
    3ea0:	e7d4      	b.n	3e4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3b4>
        case 0: return NRF_P0;
    3ea2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3ea6:	e000      	b.n	3eaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x412>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ea8:	4a44      	ldr	r2, [pc, #272]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3eaa:	2301      	movs	r3, #1
    3eac:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    3eb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    3eb4:	e7b7      	b.n	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    3eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3eba:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3ebe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3ec2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    3ec6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    3eca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3ece:	d144      	bne.n	3f5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c2>
    switch (port)
    3ed0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3ed4:	d01f      	beq.n	3f16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47e>
    3ed6:	b10b      	cbz	r3, 3edc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x444>
            mask = P1_FEATURE_PINS_PRESENT;
    3ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    3edc:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3ee0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3ee2:	f012 0f01 	tst.w	r2, #1
    3ee6:	d019      	beq.n	3f1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x484>
    *p_pin = pin_number & 0x1F;
    3ee8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3eec:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3ef0:	d023      	beq.n	3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
    3ef2:	bb2b      	cbnz	r3, 3f40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a8>
            NRFX_ASSERT(0);
    3ef4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3ef8:	f240 232e 	movw	r3, #558	; 0x22e
    3efc:	464a      	mov	r2, r9
    3efe:	492c      	ldr	r1, [pc, #176]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3f00:	482c      	ldr	r0, [pc, #176]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3f02:	f004 fdaa 	bl	8a5a <assert_print>
    3f06:	f240 212e 	movw	r1, #558	; 0x22e
    3f0a:	4648      	mov	r0, r9
    3f0c:	f004 fd9e 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3f14:	e015      	b.n	3f42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4aa>
            mask = P0_FEATURE_PINS_PRESENT;
    3f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f1a:	e7df      	b.n	3edc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x444>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3f1c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3f20:	f240 2329 	movw	r3, #553	; 0x229
    3f24:	4652      	mov	r2, sl
    3f26:	4924      	ldr	r1, [pc, #144]	; (3fb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x520>)
    3f28:	4822      	ldr	r0, [pc, #136]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3f2a:	f004 fd96 	bl	8a5a <assert_print>
    3f2e:	f240 2129 	movw	r1, #553	; 0x229
    3f32:	4650      	mov	r0, sl
    3f34:	f004 fd8a 	bl	8a4c <assert_post_action>
    3f38:	e7d6      	b.n	3ee8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x450>
        case 0: return NRF_P0;
    3f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3f3e:	e000      	b.n	3f42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f40:	4a1e      	ldr	r2, [pc, #120]	; (3fbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x524>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3f42:	2301      	movs	r3, #1
    3f44:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    3f48:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3f4c:	2201      	movs	r2, #1
    3f4e:	4611      	mov	r1, r2
    3f50:	f855 0008 	ldr.w	r0, [r5, r8]
    3f54:	f7ff fc4e 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    3f58:	e500      	b.n	395c <pinctrl_configure_pins+0xa8>
    switch (port)
    3f5a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3f5e:	d01f      	beq.n	3fa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x508>
    3f60:	b30b      	cbz	r3, 3fa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50e>
            mask = P1_FEATURE_PINS_PRESENT;
    3f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    3f66:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3f6a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3f6c:	f013 0f01 	tst.w	r3, #1
    3f70:	d026      	beq.n	3fc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x528>
    *p_pin = pin_number & 0x1F;
    3f72:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3f76:	ea5f 1359 	movs.w	r3, r9, lsr #5
    3f7a:	d030      	beq.n	3fde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x546>
    3f7c:	bb93      	cbnz	r3, 3fe4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54c>
            NRFX_ASSERT(0);
    3f7e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 3fac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x514>
    3f82:	f240 232e 	movw	r3, #558	; 0x22e
    3f86:	464a      	mov	r2, r9
    3f88:	4909      	ldr	r1, [pc, #36]	; (3fb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x518>)
    3f8a:	480a      	ldr	r0, [pc, #40]	; (3fb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x51c>)
    3f8c:	f004 fd65 	bl	8a5a <assert_print>
    3f90:	f240 212e 	movw	r1, #558	; 0x22e
    3f94:	4648      	mov	r0, r9
    3f96:	f004 fd59 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    3f9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3f9e:	e022      	b.n	3fe6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54e>
            mask = P0_FEATURE_PINS_PRESENT;
    3fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3fa4:	e7df      	b.n	3f66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ce>
    switch (port)
    3fa6:	2300      	movs	r3, #0
    3fa8:	e7dd      	b.n	3f66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ce>
    3faa:	bf00      	nop
    3fac:	0000a55c 	.word	0x0000a55c
    3fb0:	00009ccc 	.word	0x00009ccc
    3fb4:	00009cd0 	.word	0x00009cd0
    3fb8:	0000a590 	.word	0x0000a590
    3fbc:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3fc0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 41b0 <__data_size+0x68>
    3fc4:	f240 2329 	movw	r3, #553	; 0x229
    3fc8:	4652      	mov	r2, sl
    3fca:	497a      	ldr	r1, [pc, #488]	; (41b4 <__data_size+0x6c>)
    3fcc:	487a      	ldr	r0, [pc, #488]	; (41b8 <__data_size+0x70>)
    3fce:	f004 fd44 	bl	8a5a <assert_print>
    3fd2:	f240 2129 	movw	r1, #553	; 0x229
    3fd6:	4650      	mov	r0, sl
    3fd8:	f004 fd38 	bl	8a4c <assert_post_action>
    3fdc:	e7c9      	b.n	3f72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4da>
        case 0: return NRF_P0;
    3fde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3fe2:	e000      	b.n	3fe6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3fe4:	4a75      	ldr	r2, [pc, #468]	; (41bc <__data_size+0x74>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3fe6:	2301      	movs	r3, #1
    3fe8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    3fec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    3ff0:	e7ac      	b.n	3f4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b4>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    3ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3ff6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3ffa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3ffe:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    4002:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    4006:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    400a:	d144      	bne.n	4096 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5fe>
    switch (port)
    400c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4010:	d01f      	beq.n	4052 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5ba>
    4012:	b10b      	cbz	r3, 4018 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x580>
            mask = P1_FEATURE_PINS_PRESENT;
    4014:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4018:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    401c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    401e:	f012 0f01 	tst.w	r2, #1
    4022:	d019      	beq.n	4058 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c0>
    *p_pin = pin_number & 0x1F;
    4024:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4028:	ea5f 1359 	movs.w	r3, r9, lsr #5
    402c:	d023      	beq.n	4076 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5de>
    402e:	bb2b      	cbnz	r3, 407c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e4>
            NRFX_ASSERT(0);
    4030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 41b0 <__data_size+0x68>
    4034:	f240 232e 	movw	r3, #558	; 0x22e
    4038:	464a      	mov	r2, r9
    403a:	4961      	ldr	r1, [pc, #388]	; (41c0 <__data_size+0x78>)
    403c:	485e      	ldr	r0, [pc, #376]	; (41b8 <__data_size+0x70>)
    403e:	f004 fd0c 	bl	8a5a <assert_print>
    4042:	f240 212e 	movw	r1, #558	; 0x22e
    4046:	4648      	mov	r0, r9
    4048:	f004 fd00 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    404c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4050:	e015      	b.n	407e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e6>
            mask = P0_FEATURE_PINS_PRESENT;
    4052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4056:	e7df      	b.n	4018 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x580>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4058:	f8df a154 	ldr.w	sl, [pc, #340]	; 41b0 <__data_size+0x68>
    405c:	f240 2329 	movw	r3, #553	; 0x229
    4060:	4652      	mov	r2, sl
    4062:	4954      	ldr	r1, [pc, #336]	; (41b4 <__data_size+0x6c>)
    4064:	4854      	ldr	r0, [pc, #336]	; (41b8 <__data_size+0x70>)
    4066:	f004 fcf8 	bl	8a5a <assert_print>
    406a:	f240 2129 	movw	r1, #553	; 0x229
    406e:	4650      	mov	r0, sl
    4070:	f004 fcec 	bl	8a4c <assert_post_action>
    4074:	e7d6      	b.n	4024 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58c>
        case 0: return NRF_P0;
    4076:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    407a:	e000      	b.n	407e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    407c:	4a4f      	ldr	r2, [pc, #316]	; (41bc <__data_size+0x74>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    407e:	2301      	movs	r3, #1
    4080:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    4084:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4088:	2201      	movs	r2, #1
    408a:	4611      	mov	r1, r2
    408c:	f855 0008 	ldr.w	r0, [r5, r8]
    4090:	f7ff fbb0 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4094:	e462      	b.n	395c <pinctrl_configure_pins+0xa8>
    switch (port)
    4096:	ea5f 1359 	movs.w	r3, r9, lsr #5
    409a:	d01f      	beq.n	40dc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x644>
    409c:	b30b      	cbz	r3, 40e2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64a>
            mask = P1_FEATURE_PINS_PRESENT;
    409e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    40a2:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    40a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40a8:	f013 0f01 	tst.w	r3, #1
    40ac:	d01b      	beq.n	40e6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64e>
    *p_pin = pin_number & 0x1F;
    40ae:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40b2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    40b6:	d025      	beq.n	4104 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66c>
    40b8:	bb3b      	cbnz	r3, 410a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x672>
            NRFX_ASSERT(0);
    40ba:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 41b0 <__data_size+0x68>
    40be:	f240 232e 	movw	r3, #558	; 0x22e
    40c2:	464a      	mov	r2, r9
    40c4:	493e      	ldr	r1, [pc, #248]	; (41c0 <__data_size+0x78>)
    40c6:	483c      	ldr	r0, [pc, #240]	; (41b8 <__data_size+0x70>)
    40c8:	f004 fcc7 	bl	8a5a <assert_print>
    40cc:	f240 212e 	movw	r1, #558	; 0x22e
    40d0:	4648      	mov	r0, r9
    40d2:	f004 fcbb 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    40d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    40da:	e017      	b.n	410c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x674>
            mask = P0_FEATURE_PINS_PRESENT;
    40dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40e0:	e7df      	b.n	40a2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60a>
    switch (port)
    40e2:	2300      	movs	r3, #0
    40e4:	e7dd      	b.n	40a2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 41b0 <__data_size+0x68>
    40ea:	f240 2329 	movw	r3, #553	; 0x229
    40ee:	4652      	mov	r2, sl
    40f0:	4930      	ldr	r1, [pc, #192]	; (41b4 <__data_size+0x6c>)
    40f2:	4831      	ldr	r0, [pc, #196]	; (41b8 <__data_size+0x70>)
    40f4:	f004 fcb1 	bl	8a5a <assert_print>
    40f8:	f240 2129 	movw	r1, #553	; 0x229
    40fc:	4650      	mov	r0, sl
    40fe:	f004 fca5 	bl	8a4c <assert_post_action>
    4102:	e7d4      	b.n	40ae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x616>
        case 0: return NRF_P0;
    4104:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4108:	e000      	b.n	410c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x674>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    410a:	4a2c      	ldr	r2, [pc, #176]	; (41bc <__data_size+0x74>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    410c:	2301      	movs	r3, #1
    410e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    4112:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    4116:	e7b7      	b.n	4088 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5f0>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    4118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    411c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4120:	2201      	movs	r2, #1
    4122:	2100      	movs	r1, #0
    4124:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4128:	f7ff fb64 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    412c:	e416      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    412e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4132:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4136:	2201      	movs	r2, #1
    4138:	2100      	movs	r1, #0
    413a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    413e:	f7ff fb59 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4142:	e40b      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    4144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4148:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    414c:	2201      	movs	r2, #1
    414e:	2100      	movs	r1, #0
    4150:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4154:	f7ff fb4e 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4158:	e400      	b.n	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    415a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    415e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4162:	2201      	movs	r2, #1
    4164:	2100      	movs	r1, #0
    4166:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    416a:	f7ff fb43 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    416e:	f7ff bbf5 	b.w	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    4172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4176:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    417a:	2201      	movs	r2, #1
    417c:	2100      	movs	r1, #0
    417e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4182:	f7ff fb37 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4186:	f7ff bbe9 	b.w	395c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    418a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    418e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4192:	2201      	movs	r2, #1
    4194:	2100      	movs	r1, #0
    4196:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    419a:	f7ff fb2b 	bl	37f4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    419e:	f7ff bbdd 	b.w	395c <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    41a2:	2000      	movs	r0, #0
    41a4:	e001      	b.n	41aa <__data_size+0x62>
		switch (NRF_GET_FUN(pins[i])) {
    41a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    41aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41ae:	bf00      	nop
    41b0:	0000a55c 	.word	0x0000a55c
    41b4:	0000a590 	.word	0x0000a590
    41b8:	00009cd0 	.word	0x00009cd0
    41bc:	50000300 	.word	0x50000300
    41c0:	00009ccc 	.word	0x00009ccc

000041c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    41c4:	4b02      	ldr	r3, [pc, #8]	; (41d0 <nvmc_wait+0xc>)
    41c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    41ca:	2b00      	cmp	r3, #0
    41cc:	d0fa      	beq.n	41c4 <nvmc_wait>
}
    41ce:	4770      	bx	lr
    41d0:	4001e000 	.word	0x4001e000

000041d4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    41d4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41d6:	4b03      	ldr	r3, [pc, #12]	; (41e4 <nvmc_config+0x10>)
    41d8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    41dc:	f7ff fff2 	bl	41c4 <nvmc_wait>
}
    41e0:	bd08      	pop	{r3, pc}
    41e2:	bf00      	nop
    41e4:	4001e000 	.word	0x4001e000

000041e8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    41e8:	4b01      	ldr	r3, [pc, #4]	; (41f0 <SystemCoreClockUpdate+0x8>)
    41ea:	4a02      	ldr	r2, [pc, #8]	; (41f4 <SystemCoreClockUpdate+0xc>)
    41ec:	601a      	str	r2, [r3, #0]
}
    41ee:	4770      	bx	lr
    41f0:	2000405c 	.word	0x2000405c
    41f4:	03d09000 	.word	0x03d09000

000041f8 <SystemInit>:

void SystemInit(void)
{
    41f8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    41fa:	f005 f92e 	bl	945a <nrf52_errata_36>
    41fe:	b140      	cbz	r0, 4212 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4204:	2200      	movs	r2, #0
    4206:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    420a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    420e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4212:	f005 f92c 	bl	946e <nrf52_errata_66>
    4216:	2800      	cmp	r0, #0
    4218:	d046      	beq.n	42a8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    421e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4222:	4b59      	ldr	r3, [pc, #356]	; (4388 <SystemInit+0x190>)
    4224:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4228:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    422c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4230:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4234:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4238:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    423c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4240:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4244:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4248:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    424c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4250:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4254:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4258:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    425c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4260:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4264:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4268:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    426c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4270:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4274:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4278:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    427c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4280:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4284:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4288:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    428c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4290:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4294:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4298:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    429c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    42a0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    42a4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    42a8:	f005 f8eb 	bl	9482 <nrf52_errata_98>
    42ac:	b118      	cbz	r0, 42b6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    42ae:	4b37      	ldr	r3, [pc, #220]	; (438c <SystemInit+0x194>)
    42b0:	4a37      	ldr	r2, [pc, #220]	; (4390 <SystemInit+0x198>)
    42b2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    42b6:	f005 f8f7 	bl	94a8 <nrf52_errata_103>
    42ba:	b118      	cbz	r0, 42c4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    42bc:	4b35      	ldr	r3, [pc, #212]	; (4394 <SystemInit+0x19c>)
    42be:	22fb      	movs	r2, #251	; 0xfb
    42c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    42c4:	f005 f903 	bl	94ce <nrf52_errata_115>
    42c8:	b170      	cbz	r0, 42e8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    42ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    42ce:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    42d2:	f023 030f 	bic.w	r3, r3, #15
    42d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    42da:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    42de:	f002 020f 	and.w	r2, r2, #15
    42e2:	4313      	orrs	r3, r2
    42e4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    42e8:	f005 f904 	bl	94f4 <nrf52_errata_120>
    42ec:	b120      	cbz	r0, 42f8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    42ee:	4b2a      	ldr	r3, [pc, #168]	; (4398 <SystemInit+0x1a0>)
    42f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    42f4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    42f8:	f005 f90f 	bl	951a <nrf52_errata_136>
    42fc:	b160      	cbz	r0, 4318 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    42fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4302:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    4306:	f013 0f01 	tst.w	r3, #1
    430a:	d005      	beq.n	4318 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    430c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4310:	f06f 0201 	mvn.w	r2, #1
    4314:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4318:	f005 f909 	bl	952e <nrf52_configuration_249>
    431c:	b138      	cbz	r0, 432e <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    431e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4322:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    432a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    432e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4336:	2b00      	cmp	r3, #0
    4338:	db08      	blt.n	434c <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    433a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    433e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4342:	2b00      	cmp	r3, #0
    4344:	db02      	blt.n	434c <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    4346:	f7ff ff4f 	bl	41e8 <SystemCoreClockUpdate>
}
    434a:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    434c:	2001      	movs	r0, #1
    434e:	f7ff ff41 	bl	41d4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4352:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    4356:	2512      	movs	r5, #18
    4358:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    435c:	f7ff ff32 	bl	41c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4360:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    4364:	f7ff ff2e 	bl	41c4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    4368:	2000      	movs	r0, #0
    436a:	f7ff ff33 	bl	41d4 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    436e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4372:	490a      	ldr	r1, [pc, #40]	; (439c <SystemInit+0x1a4>)
    4374:	68ca      	ldr	r2, [r1, #12]
    4376:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    437a:	4b09      	ldr	r3, [pc, #36]	; (43a0 <SystemInit+0x1a8>)
    437c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    437e:	60cb      	str	r3, [r1, #12]
    4380:	f3bf 8f4f 	dsb	sy
    __NOP();
    4384:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4386:	e7fd      	b.n	4384 <SystemInit+0x18c>
    4388:	4000c000 	.word	0x4000c000
    438c:	40005000 	.word	0x40005000
    4390:	00038148 	.word	0x00038148
    4394:	4000f000 	.word	0x4000f000
    4398:	40029000 	.word	0x40029000
    439c:	e000ed00 	.word	0xe000ed00
    43a0:	05fa0004 	.word	0x05fa0004

000043a4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    43a4:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    43a6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    43a8:	fab4 f384 	clz	r3, r4
    43ac:	f1c3 031f 	rsb	r3, r3, #31
    43b0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    43b4:	2b00      	cmp	r3, #0
    43b6:	db16      	blt.n	43e6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    43b8:	2201      	movs	r2, #1
    43ba:	fa02 f303 	lsl.w	r3, r2, r3
    43be:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    43c2:	f3bf 8f5b 	dmb	ish
    43c6:	e850 2f00 	ldrex	r2, [r0]
    43ca:	42a2      	cmp	r2, r4
    43cc:	d104      	bne.n	43d8 <nrfx_flag32_alloc+0x34>
    43ce:	e840 3e00 	strex	lr, r3, [r0]
    43d2:	f1be 0f00 	cmp.w	lr, #0
    43d6:	d1f6      	bne.n	43c6 <nrfx_flag32_alloc+0x22>
    43d8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43dc:	d1e3      	bne.n	43a6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    43de:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    43e2:	4802      	ldr	r0, [pc, #8]	; (43ec <nrfx_flag32_alloc+0x48>)
}
    43e4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    43e6:	4802      	ldr	r0, [pc, #8]	; (43f0 <nrfx_flag32_alloc+0x4c>)
    43e8:	e7fc      	b.n	43e4 <nrfx_flag32_alloc+0x40>
    43ea:	bf00      	nop
    43ec:	0bad0000 	.word	0x0bad0000
    43f0:	0bad0002 	.word	0x0bad0002

000043f4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    43f4:	6803      	ldr	r3, [r0, #0]
    43f6:	40cb      	lsrs	r3, r1
    43f8:	f013 0f01 	tst.w	r3, #1
    43fc:	d115      	bne.n	442a <nrfx_flag32_free+0x36>
{
    43fe:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    4400:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4402:	2301      	movs	r3, #1
    4404:	408b      	lsls	r3, r1
    4406:	4313      	orrs	r3, r2
    4408:	f3bf 8f5b 	dmb	ish
    440c:	e850 cf00 	ldrex	ip, [r0]
    4410:	4594      	cmp	ip, r2
    4412:	d104      	bne.n	441e <nrfx_flag32_free+0x2a>
    4414:	e840 3e00 	strex	lr, r3, [r0]
    4418:	f1be 0f00 	cmp.w	lr, #0
    441c:	d1f6      	bne.n	440c <nrfx_flag32_free+0x18>
    441e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4422:	d1ed      	bne.n	4400 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    4424:	4802      	ldr	r0, [pc, #8]	; (4430 <nrfx_flag32_free+0x3c>)
}
    4426:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    442a:	4802      	ldr	r0, [pc, #8]	; (4434 <nrfx_flag32_free+0x40>)
}
    442c:	4770      	bx	lr
    442e:	bf00      	nop
    4430:	0bad0000 	.word	0x0bad0000
    4434:	0bad0004 	.word	0x0bad0004

00004438 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
    443a:	b083      	sub	sp, #12
    switch (domain)
    443c:	4605      	mov	r5, r0
    443e:	b168      	cbz	r0, 445c <clock_stop+0x24>
    4440:	2801      	cmp	r0, #1
    4442:	d020      	beq.n	4486 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4444:	4c3d      	ldr	r4, [pc, #244]	; (453c <clock_stop+0x104>)
    4446:	23d8      	movs	r3, #216	; 0xd8
    4448:	4622      	mov	r2, r4
    444a:	493d      	ldr	r1, [pc, #244]	; (4540 <clock_stop+0x108>)
    444c:	483d      	ldr	r0, [pc, #244]	; (4544 <clock_stop+0x10c>)
    444e:	f004 fb04 	bl	8a5a <assert_print>
    4452:	21d8      	movs	r1, #216	; 0xd8
    4454:	4620      	mov	r0, r4
    4456:	f004 faf9 	bl	8a4c <assert_post_action>
            return;
    445a:	e068      	b.n	452e <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    445c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4460:	2202      	movs	r2, #2
    4462:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4466:	2200      	movs	r2, #0
    4468:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    446c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4470:	2201      	movs	r2, #1
    4472:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4474:	2301      	movs	r3, #1
    4476:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    447a:	429d      	cmp	r5, r3
    447c:	d00f      	beq.n	449e <clock_stop+0x66>
    447e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4480:	f242 7410 	movw	r4, #10000	; 0x2710
    4484:	e029      	b.n	44da <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    4486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    448a:	2201      	movs	r2, #1
    448c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4490:	2100      	movs	r1, #0
    4492:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4496:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    449a:	605a      	str	r2, [r3, #4]
}
    449c:	e7ea      	b.n	4474 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    449e:	f10d 0607 	add.w	r6, sp, #7
    44a2:	e7ed      	b.n	4480 <clock_stop+0x48>
            if (p_clk_src != NULL)
    44a4:	b136      	cbz	r6, 44b4 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    44a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44aa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    44ae:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    44b2:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    44b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44b8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    44bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    44c0:	d12f      	bne.n	4522 <clock_stop+0xea>
    return false;
    44c2:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    44c4:	b38b      	cbz	r3, 452a <clock_stop+0xf2>
    44c6:	b11e      	cbz	r6, 44d0 <clock_stop+0x98>
    44c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    44cc:	2b01      	cmp	r3, #1
    44ce:	d12c      	bne.n	452a <clock_stop+0xf2>
    44d0:	2001      	movs	r0, #1
    44d2:	f005 f83f 	bl	9554 <nrfx_busy_wait>
    44d6:	3c01      	subs	r4, #1
    44d8:	d027      	beq.n	452a <clock_stop+0xf2>
    switch (domain)
    44da:	2d00      	cmp	r5, #0
    44dc:	d0e2      	beq.n	44a4 <clock_stop+0x6c>
    44de:	2d01      	cmp	r5, #1
    44e0:	d00e      	beq.n	4500 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    44e2:	4f19      	ldr	r7, [pc, #100]	; (4548 <clock_stop+0x110>)
    44e4:	f44f 734f 	mov.w	r3, #828	; 0x33c
    44e8:	463a      	mov	r2, r7
    44ea:	4915      	ldr	r1, [pc, #84]	; (4540 <clock_stop+0x108>)
    44ec:	4815      	ldr	r0, [pc, #84]	; (4544 <clock_stop+0x10c>)
    44ee:	f004 fab4 	bl	8a5a <assert_print>
    44f2:	f44f 714f 	mov.w	r1, #828	; 0x33c
    44f6:	4638      	mov	r0, r7
    44f8:	f004 faa8 	bl	8a4c <assert_post_action>
            return false;
    44fc:	2300      	movs	r3, #0
    44fe:	e7e1      	b.n	44c4 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    4500:	b136      	cbz	r6, 4510 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4506:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    450a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    450e:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4514:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4518:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    451c:	d103      	bne.n	4526 <clock_stop+0xee>
    return false;
    451e:	2300      	movs	r3, #0
    4520:	e7d0      	b.n	44c4 <clock_stop+0x8c>
                return true;
    4522:	2301      	movs	r3, #1
    4524:	e7ce      	b.n	44c4 <clock_stop+0x8c>
                return true;
    4526:	2301      	movs	r3, #1
    4528:	e7cc      	b.n	44c4 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    452a:	2d01      	cmp	r5, #1
    452c:	d001      	beq.n	4532 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    452e:	b003      	add	sp, #12
    4530:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    4532:	4b06      	ldr	r3, [pc, #24]	; (454c <clock_stop+0x114>)
    4534:	2200      	movs	r2, #0
    4536:	715a      	strb	r2, [r3, #5]
    4538:	e7f9      	b.n	452e <clock_stop+0xf6>
    453a:	bf00      	nop
    453c:	0000a68c 	.word	0x0000a68c
    4540:	00009ccc 	.word	0x00009ccc
    4544:	00009cd0 	.word	0x00009cd0
    4548:	0000a6cc 	.word	0x0000a6cc
    454c:	20004b8c 	.word	0x20004b8c

00004550 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4550:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    4552:	4604      	mov	r4, r0
    4554:	b150      	cbz	r0, 456c <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4556:	4b0d      	ldr	r3, [pc, #52]	; (458c <nrfx_clock_init+0x3c>)
    4558:	791b      	ldrb	r3, [r3, #4]
    455a:	b9ab      	cbnz	r3, 4588 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    455c:	4b0b      	ldr	r3, [pc, #44]	; (458c <nrfx_clock_init+0x3c>)
    455e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4560:	2201      	movs	r2, #1
    4562:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    4564:	2200      	movs	r2, #0
    4566:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4568:	4809      	ldr	r0, [pc, #36]	; (4590 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    456a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    456c:	4d09      	ldr	r5, [pc, #36]	; (4594 <nrfx_clock_init+0x44>)
    456e:	f240 1315 	movw	r3, #277	; 0x115
    4572:	462a      	mov	r2, r5
    4574:	4908      	ldr	r1, [pc, #32]	; (4598 <nrfx_clock_init+0x48>)
    4576:	4809      	ldr	r0, [pc, #36]	; (459c <nrfx_clock_init+0x4c>)
    4578:	f004 fa6f 	bl	8a5a <assert_print>
    457c:	f240 1115 	movw	r1, #277	; 0x115
    4580:	4628      	mov	r0, r5
    4582:	f004 fa63 	bl	8a4c <assert_post_action>
    4586:	e7e6      	b.n	4556 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4588:	4805      	ldr	r0, [pc, #20]	; (45a0 <nrfx_clock_init+0x50>)
    return err_code;
    458a:	e7ee      	b.n	456a <nrfx_clock_init+0x1a>
    458c:	20004b8c 	.word	0x20004b8c
    4590:	0bad0000 	.word	0x0bad0000
    4594:	0000a68c 	.word	0x0000a68c
    4598:	0000a700 	.word	0x0000a700
    459c:	00009cd0 	.word	0x00009cd0
    45a0:	0bad000c 	.word	0x0bad000c

000045a4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    45a4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    45a6:	4b0f      	ldr	r3, [pc, #60]	; (45e4 <nrfx_clock_enable+0x40>)
    45a8:	791b      	ldrb	r3, [r3, #4]
    45aa:	b153      	cbz	r3, 45c2 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    45ac:	2000      	movs	r0, #0
    45ae:	f7fd fc81 	bl	1eb4 <arch_irq_is_enabled>
    45b2:	b1a0      	cbz	r0, 45de <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    45b4:	f004 ffd2 	bl	955c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    45b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45bc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    45c0:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    45c2:	4c09      	ldr	r4, [pc, #36]	; (45e8 <nrfx_clock_enable+0x44>)
    45c4:	f44f 7397 	mov.w	r3, #302	; 0x12e
    45c8:	4622      	mov	r2, r4
    45ca:	4908      	ldr	r1, [pc, #32]	; (45ec <nrfx_clock_enable+0x48>)
    45cc:	4808      	ldr	r0, [pc, #32]	; (45f0 <nrfx_clock_enable+0x4c>)
    45ce:	f004 fa44 	bl	8a5a <assert_print>
    45d2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    45d6:	4620      	mov	r0, r4
    45d8:	f004 fa38 	bl	8a4c <assert_post_action>
    45dc:	e7e6      	b.n	45ac <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    45de:	f7fd fc5b 	bl	1e98 <arch_irq_enable>
    45e2:	e7e7      	b.n	45b4 <nrfx_clock_enable+0x10>
    45e4:	20004b8c 	.word	0x20004b8c
    45e8:	0000a68c 	.word	0x0000a68c
    45ec:	0000a710 	.word	0x0000a710
    45f0:	00009cd0 	.word	0x00009cd0

000045f4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    45f4:	b530      	push	{r4, r5, lr}
    45f6:	b083      	sub	sp, #12
    45f8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    45fa:	4b34      	ldr	r3, [pc, #208]	; (46cc <nrfx_clock_start+0xd8>)
    45fc:	791b      	ldrb	r3, [r3, #4]
    45fe:	b183      	cbz	r3, 4622 <nrfx_clock_start+0x2e>
    switch (domain)
    4600:	b1ec      	cbz	r4, 463e <nrfx_clock_start+0x4a>
    4602:	2c01      	cmp	r4, #1
    4604:	d055      	beq.n	46b2 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4606:	4c32      	ldr	r4, [pc, #200]	; (46d0 <nrfx_clock_start+0xdc>)
    4608:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    460c:	4622      	mov	r2, r4
    460e:	4931      	ldr	r1, [pc, #196]	; (46d4 <nrfx_clock_start+0xe0>)
    4610:	4831      	ldr	r0, [pc, #196]	; (46d8 <nrfx_clock_start+0xe4>)
    4612:	f004 fa22 	bl	8a5a <assert_print>
    4616:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    461a:	4620      	mov	r0, r4
    461c:	f004 fa16 	bl	8a4c <assert_post_action>
            break;
    }
}
    4620:	e052      	b.n	46c8 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4622:	4d2b      	ldr	r5, [pc, #172]	; (46d0 <nrfx_clock_start+0xdc>)
    4624:	f44f 73b4 	mov.w	r3, #360	; 0x168
    4628:	462a      	mov	r2, r5
    462a:	492c      	ldr	r1, [pc, #176]	; (46dc <nrfx_clock_start+0xe8>)
    462c:	482a      	ldr	r0, [pc, #168]	; (46d8 <nrfx_clock_start+0xe4>)
    462e:	f004 fa14 	bl	8a5a <assert_print>
    4632:	f44f 71b4 	mov.w	r1, #360	; 0x168
    4636:	4628      	mov	r0, r5
    4638:	f004 fa08 	bl	8a4c <assert_post_action>
    463c:	e7e0      	b.n	4600 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    463e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4642:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4646:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    464a:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    464c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4650:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4654:	d117      	bne.n	4686 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4656:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    465a:	f013 0f01 	tst.w	r3, #1
    465e:	d116      	bne.n	468e <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    4660:	f004 ff7c 	bl	955c <clock_initial_lfclksrc_get>
    4664:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    466a:	9a01      	ldr	r2, [sp, #4]
    466c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4670:	2200      	movs	r2, #0
    4672:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4676:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    467a:	2202      	movs	r2, #2
    467c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4680:	2201      	movs	r2, #1
    4682:	609a      	str	r2, [r3, #8]
}
    4684:	e020      	b.n	46c8 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    4686:	a801      	add	r0, sp, #4
    4688:	f004 ff6a 	bl	9560 <clock_lfclksrc_tweak>
    468c:	e7eb      	b.n	4666 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    468e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4692:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4696:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    469a:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    469c:	a801      	add	r0, sp, #4
    469e:	f004 ff5f 	bl	9560 <clock_lfclksrc_tweak>
    46a2:	2800      	cmp	r0, #0
    46a4:	d0df      	beq.n	4666 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    46a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46aa:	2202      	movs	r2, #2
    46ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    46b0:	e00a      	b.n	46c8 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46b6:	2200      	movs	r2, #0
    46b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    46bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    46c0:	2201      	movs	r2, #1
    46c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46c6:	601a      	str	r2, [r3, #0]
}
    46c8:	b003      	add	sp, #12
    46ca:	bd30      	pop	{r4, r5, pc}
    46cc:	20004b8c 	.word	0x20004b8c
    46d0:	0000a68c 	.word	0x0000a68c
    46d4:	00009ccc 	.word	0x00009ccc
    46d8:	00009cd0 	.word	0x00009cd0
    46dc:	0000a710 	.word	0x0000a710

000046e0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    46e0:	b538      	push	{r3, r4, r5, lr}
    46e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    46e4:	4b0a      	ldr	r3, [pc, #40]	; (4710 <nrfx_clock_stop+0x30>)
    46e6:	791b      	ldrb	r3, [r3, #4]
    46e8:	b11b      	cbz	r3, 46f2 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    46ea:	4620      	mov	r0, r4
    46ec:	f7ff fea4 	bl	4438 <clock_stop>
}
    46f0:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    46f2:	4d08      	ldr	r5, [pc, #32]	; (4714 <nrfx_clock_stop+0x34>)
    46f4:	f240 13ad 	movw	r3, #429	; 0x1ad
    46f8:	462a      	mov	r2, r5
    46fa:	4907      	ldr	r1, [pc, #28]	; (4718 <nrfx_clock_stop+0x38>)
    46fc:	4807      	ldr	r0, [pc, #28]	; (471c <nrfx_clock_stop+0x3c>)
    46fe:	f004 f9ac 	bl	8a5a <assert_print>
    4702:	f240 11ad 	movw	r1, #429	; 0x1ad
    4706:	4628      	mov	r0, r5
    4708:	f004 f9a0 	bl	8a4c <assert_post_action>
    470c:	e7ed      	b.n	46ea <nrfx_clock_stop+0xa>
    470e:	bf00      	nop
    4710:	20004b8c 	.word	0x20004b8c
    4714:	0000a68c 	.word	0x0000a68c
    4718:	0000a710 	.word	0x0000a710
    471c:	00009cd0 	.word	0x00009cd0

00004720 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4720:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    472a:	b18b      	cbz	r3, 4750 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    472c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4730:	2200      	movs	r2, #0
    4732:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4736:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    473a:	2201      	movs	r2, #1
    473c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4740:	4b15      	ldr	r3, [pc, #84]	; (4798 <nrfx_power_clock_irq_handler+0x78>)
    4742:	795b      	ldrb	r3, [r3, #5]
    4744:	b923      	cbnz	r3, 4750 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    4746:	4b14      	ldr	r3, [pc, #80]	; (4798 <nrfx_power_clock_irq_handler+0x78>)
    4748:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    474a:	681b      	ldr	r3, [r3, #0]
    474c:	2000      	movs	r0, #0
    474e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4754:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4758:	b19b      	cbz	r3, 4782 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    475a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    475e:	2200      	movs	r2, #0
    4760:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4764:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4768:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    476c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4770:	f012 0f03 	tst.w	r2, #3
    4774:	d106      	bne.n	4784 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    477a:	2201      	movs	r2, #1
    477c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4780:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4782:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    4784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4788:	2202      	movs	r2, #2
    478a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    478e:	4b02      	ldr	r3, [pc, #8]	; (4798 <nrfx_power_clock_irq_handler+0x78>)
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	2001      	movs	r0, #1
    4794:	4798      	blx	r3
}
    4796:	e7f4      	b.n	4782 <nrfx_power_clock_irq_handler+0x62>
    4798:	20004b8c 	.word	0x20004b8c

0000479c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    479c:	3008      	adds	r0, #8
    479e:	4b03      	ldr	r3, [pc, #12]	; (47ac <pin_in_use+0x10>)
    47a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47a4:	f000 0001 	and.w	r0, r0, #1
    47a8:	4770      	bx	lr
    47aa:	bf00      	nop
    47ac:	20004060 	.word	0x20004060

000047b0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    47b0:	3008      	adds	r0, #8
    47b2:	4b03      	ldr	r3, [pc, #12]	; (47c0 <pin_in_use_by_te+0x10>)
    47b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    47bc:	4770      	bx	lr
    47be:	bf00      	nop
    47c0:	20004060 	.word	0x20004060

000047c4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    47c4:	3008      	adds	r0, #8
    47c6:	4b04      	ldr	r3, [pc, #16]	; (47d8 <pin_has_trigger+0x14>)
    47c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47cc:	f010 001c 	ands.w	r0, r0, #28
    47d0:	bf18      	it	ne
    47d2:	2001      	movne	r0, #1
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	20004060 	.word	0x20004060

000047dc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47dc:	3008      	adds	r0, #8
    47de:	4b03      	ldr	r3, [pc, #12]	; (47ec <pin_is_output+0x10>)
    47e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    47e8:	4770      	bx	lr
    47ea:	bf00      	nop
    47ec:	20004060 	.word	0x20004060

000047f0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47f0:	3008      	adds	r0, #8
    47f2:	4b02      	ldr	r3, [pc, #8]	; (47fc <pin_te_get+0xc>)
    47f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    47f8:	0b40      	lsrs	r0, r0, #13
    47fa:	4770      	bx	lr
    47fc:	20004060 	.word	0x20004060

00004800 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4800:	2200      	movs	r2, #0
    4802:	e004      	b.n	480e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4808:	4283      	cmp	r3, r0
    480a:	d00f      	beq.n	482c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    480c:	3201      	adds	r2, #1
    480e:	2a2f      	cmp	r2, #47	; 0x2f
    4810:	d80a      	bhi.n	4828 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4812:	f102 0308 	add.w	r3, r2, #8
    4816:	4906      	ldr	r1, [pc, #24]	; (4830 <handler_in_use+0x30>)
    4818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    481c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4820:	d0f0      	beq.n	4804 <handler_in_use+0x4>
    4822:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4826:	e7ef      	b.n	4808 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    4828:	2000      	movs	r0, #0
    482a:	4770      	bx	lr
            return true;
    482c:	2001      	movs	r0, #1
}
    482e:	4770      	bx	lr
    4830:	20004060 	.word	0x20004060

00004834 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4834:	2300      	movs	r3, #0
    4836:	b113      	cbz	r3, 483e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    4838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    483c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    483e:	4a07      	ldr	r2, [pc, #28]	; (485c <find_handler+0x28>)
    4840:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4844:	4282      	cmp	r2, r0
    4846:	d001      	beq.n	484c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    4848:	3301      	adds	r3, #1
    484a:	e7f4      	b.n	4836 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    484c:	4a03      	ldr	r2, [pc, #12]	; (485c <find_handler+0x28>)
    484e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4852:	6852      	ldr	r2, [r2, #4]
    4854:	428a      	cmp	r2, r1
    4856:	d1f7      	bne.n	4848 <find_handler+0x14>
            return i;
    4858:	4618      	mov	r0, r3
    485a:	4770      	bx	lr
    485c:	20004060 	.word	0x20004060

00004860 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4860:	3008      	adds	r0, #8
    4862:	4b06      	ldr	r3, [pc, #24]	; (487c <channel_handler_get+0x1c>)
    4864:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4868:	f410 7f80 	tst.w	r0, #256	; 0x100
    486c:	d004      	beq.n	4878 <channel_handler_get+0x18>
    486e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    4872:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4876:	4770      	bx	lr
        return NULL;
    4878:	2000      	movs	r0, #0
}
    487a:	4770      	bx	lr
    487c:	20004060 	.word	0x20004060

00004880 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4880:	b570      	push	{r4, r5, r6, lr}
    4882:	4604      	mov	r4, r0
    4884:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    4886:	f7ff ffeb 	bl	4860 <channel_handler_get>

    if (handler)
    488a:	b120      	cbz	r0, 4896 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    488c:	6806      	ldr	r6, [r0, #0]
    488e:	6842      	ldr	r2, [r0, #4]
    4890:	4629      	mov	r1, r5
    4892:	4620      	mov	r0, r4
    4894:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    4896:	4b04      	ldr	r3, [pc, #16]	; (48a8 <call_handler+0x28>)
    4898:	689b      	ldr	r3, [r3, #8]
    489a:	b123      	cbz	r3, 48a6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    489c:	4a02      	ldr	r2, [pc, #8]	; (48a8 <call_handler+0x28>)
    489e:	68d2      	ldr	r2, [r2, #12]
    48a0:	4629      	mov	r1, r5
    48a2:	4620      	mov	r0, r4
    48a4:	4798      	blx	r3
    }
}
    48a6:	bd70      	pop	{r4, r5, r6, pc}
    48a8:	20004060 	.word	0x20004060

000048ac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    48ac:	f100 0208 	add.w	r2, r0, #8
    48b0:	4b16      	ldr	r3, [pc, #88]	; (490c <release_handler+0x60>)
    48b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    48b6:	f413 7f80 	tst.w	r3, #256	; 0x100
    48ba:	d026      	beq.n	490a <release_handler+0x5e>
{
    48bc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    48be:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    48c2:	4610      	mov	r0, r2
    48c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    48c8:	4a10      	ldr	r2, [pc, #64]	; (490c <release_handler+0x60>)
    48ca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    48ce:	4620      	mov	r0, r4
    48d0:	f7ff ff96 	bl	4800 <handler_in_use>
    48d4:	b100      	cbz	r0, 48d8 <release_handler+0x2c>
}
    48d6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    48d8:	480c      	ldr	r0, [pc, #48]	; (490c <release_handler+0x60>)
    48da:	2300      	movs	r3, #0
    48dc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    48e0:	4621      	mov	r1, r4
    48e2:	3074      	adds	r0, #116	; 0x74
    48e4:	f7ff fd86 	bl	43f4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    48e8:	4b09      	ldr	r3, [pc, #36]	; (4910 <release_handler+0x64>)
    48ea:	4298      	cmp	r0, r3
    48ec:	d0f3      	beq.n	48d6 <release_handler+0x2a>
    48ee:	4c09      	ldr	r4, [pc, #36]	; (4914 <release_handler+0x68>)
    48f0:	f44f 7399 	mov.w	r3, #306	; 0x132
    48f4:	4622      	mov	r2, r4
    48f6:	4908      	ldr	r1, [pc, #32]	; (4918 <release_handler+0x6c>)
    48f8:	4808      	ldr	r0, [pc, #32]	; (491c <release_handler+0x70>)
    48fa:	f004 f8ae 	bl	8a5a <assert_print>
    48fe:	f44f 7199 	mov.w	r1, #306	; 0x132
    4902:	4620      	mov	r0, r4
    4904:	f004 f8a2 	bl	8a4c <assert_post_action>
    4908:	e7e5      	b.n	48d6 <release_handler+0x2a>
    490a:	4770      	bx	lr
    490c:	20004060 	.word	0x20004060
    4910:	0bad0000 	.word	0x0bad0000
    4914:	0000a730 	.word	0x0000a730
    4918:	0000a770 	.word	0x0000a770
    491c:	00009cd0 	.word	0x00009cd0

00004920 <pin_handler_trigger_uninit>:
{
    4920:	b510      	push	{r4, lr}
    4922:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4924:	f7ff ff44 	bl	47b0 <pin_in_use_by_te>
    4928:	b140      	cbz	r0, 493c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    492a:	4620      	mov	r0, r4
    492c:	f7ff ff60 	bl	47f0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4930:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4934:	4b06      	ldr	r3, [pc, #24]	; (4950 <pin_handler_trigger_uninit+0x30>)
    4936:	2200      	movs	r2, #0
    4938:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    493c:	4620      	mov	r0, r4
    493e:	f7ff ffb5 	bl	48ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4942:	3408      	adds	r4, #8
    4944:	4b03      	ldr	r3, [pc, #12]	; (4954 <pin_handler_trigger_uninit+0x34>)
    4946:	2200      	movs	r2, #0
    4948:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    494c:	bd10      	pop	{r4, pc}
    494e:	bf00      	nop
    4950:	40006000 	.word	0x40006000
    4954:	20004060 	.word	0x20004060

00004958 <pin_handler_set>:
{
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	b082      	sub	sp, #8
    495c:	4606      	mov	r6, r0
    495e:	460c      	mov	r4, r1
    4960:	4615      	mov	r5, r2
    release_handler(pin);
    4962:	f7ff ffa3 	bl	48ac <release_handler>
    if (!handler)
    4966:	b324      	cbz	r4, 49b2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    4968:	4629      	mov	r1, r5
    496a:	4620      	mov	r0, r4
    496c:	f7ff ff62 	bl	4834 <find_handler>
    if (handler_id < 0)
    4970:	1e03      	subs	r3, r0, #0
    4972:	db13      	blt.n	499c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4974:	4a10      	ldr	r2, [pc, #64]	; (49b8 <pin_handler_set+0x60>)
    4976:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    497a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    497e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4980:	025b      	lsls	r3, r3, #9
    4982:	b29b      	uxth	r3, r3
    4984:	f106 0008 	add.w	r0, r6, #8
    4988:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    498c:	430b      	orrs	r3, r1
    498e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4992:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    4996:	4809      	ldr	r0, [pc, #36]	; (49bc <pin_handler_set+0x64>)
}
    4998:	b002      	add	sp, #8
    499a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    499c:	f10d 0107 	add.w	r1, sp, #7
    49a0:	4807      	ldr	r0, [pc, #28]	; (49c0 <pin_handler_set+0x68>)
    49a2:	f7ff fcff 	bl	43a4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    49a6:	4b05      	ldr	r3, [pc, #20]	; (49bc <pin_handler_set+0x64>)
    49a8:	4298      	cmp	r0, r3
    49aa:	d1f5      	bne.n	4998 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    49ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    49b0:	e7e0      	b.n	4974 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    49b2:	4802      	ldr	r0, [pc, #8]	; (49bc <pin_handler_set+0x64>)
    49b4:	e7f0      	b.n	4998 <pin_handler_set+0x40>
    49b6:	bf00      	nop
    49b8:	20004060 	.word	0x20004060
    49bc:	0bad0000 	.word	0x0bad0000
    49c0:	200040d4 	.word	0x200040d4

000049c4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    49c4:	b538      	push	{r3, r4, r5, lr}
    49c6:	4604      	mov	r4, r0
    while (mask)
    49c8:	e018      	b.n	49fc <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    49ca:	fa94 f3a4 	rbit	r3, r4
    49ce:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    49d2:	2201      	movs	r2, #1
    49d4:	409a      	lsls	r2, r3
    49d6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    49da:	4a0a      	ldr	r2, [pc, #40]	; (4a04 <gpiote_evt_handle+0x40>)
    49dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    49e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    49e4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    49e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    49ec:	f3c0 4001 	ubfx	r0, r0, #16, #2
    49f0:	f004 fde2 	bl	95b8 <gpiote_polarity_to_trigger>
    49f4:	4601      	mov	r1, r0
    49f6:	4628      	mov	r0, r5
    49f8:	f7ff ff42 	bl	4880 <call_handler>
    while (mask)
    49fc:	2c00      	cmp	r4, #0
    49fe:	d1e4      	bne.n	49ca <gpiote_evt_handle+0x6>
    }
}
    4a00:	bd38      	pop	{r3, r4, r5, pc}
    4a02:	bf00      	nop
    4a04:	40006000 	.word	0x40006000

00004a08 <latch_pending_read_and_check>:
{
    4a08:	b082      	sub	sp, #8
    4a0a:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4a0c:	4b11      	ldr	r3, [pc, #68]	; (4a54 <latch_pending_read_and_check+0x4c>)
    4a0e:	e893 0003 	ldmia.w	r3, {r0, r1}
    4a12:	ab02      	add	r3, sp, #8
    4a14:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4a18:	4660      	mov	r0, ip
    4a1a:	2300      	movs	r3, #0
    4a1c:	e00b      	b.n	4a36 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    4a1e:	aa02      	add	r2, sp, #8
    4a20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4a24:	f852 2c08 	ldr.w	r2, [r2, #-8]
    4a28:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4a2c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4a30:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4a34:	3301      	adds	r3, #1
    4a36:	2b01      	cmp	r3, #1
    4a38:	d9f1      	bls.n	4a1e <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    4a3a:	2300      	movs	r3, #0
    4a3c:	2b01      	cmp	r3, #1
    4a3e:	d804      	bhi.n	4a4a <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    4a40:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    4a44:	b922      	cbnz	r2, 4a50 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    4a46:	3301      	adds	r3, #1
    4a48:	e7f8      	b.n	4a3c <latch_pending_read_and_check+0x34>
    return false;
    4a4a:	2000      	movs	r0, #0
}
    4a4c:	b002      	add	sp, #8
    4a4e:	4770      	bx	lr
            return true;
    4a50:	2001      	movs	r0, #1
    4a52:	e7fb      	b.n	4a4c <latch_pending_read_and_check+0x44>
    4a54:	00009a80 	.word	0x00009a80

00004a58 <next_sense_cond_call_handler>:
{
    4a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a5c:	4604      	mov	r4, r0
    4a5e:	460d      	mov	r5, r1
    4a60:	4616      	mov	r6, r2
    if (is_level(trigger))
    4a62:	4608      	mov	r0, r1
    4a64:	f004 fdaa 	bl	95bc <is_level>
    4a68:	bb60      	cbnz	r0, 4ac4 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a6a:	2e02      	cmp	r6, #2
    4a6c:	f000 80f5 	beq.w	4c5a <next_sense_cond_call_handler+0x202>
    4a70:	f04f 0802 	mov.w	r8, #2
    switch (port)
    4a74:	0963      	lsrs	r3, r4, #5
    4a76:	f000 80f3 	beq.w	4c60 <next_sense_cond_call_handler+0x208>
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	f040 80f3 	bne.w	4c66 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    4a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4a84:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4a88:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a8a:	f013 0f01 	tst.w	r3, #1
    4a8e:	f000 80ec 	beq.w	4c6a <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    4a92:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a96:	0963      	lsrs	r3, r4, #5
    4a98:	f000 80f5 	beq.w	4c86 <next_sense_cond_call_handler+0x22e>
    4a9c:	2b01      	cmp	r3, #1
    4a9e:	f000 80f5 	beq.w	4c8c <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    4aa2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4cc8 <next_sense_cond_call_handler+0x270>
    4aa6:	f240 232e 	movw	r3, #558	; 0x22e
    4aaa:	464a      	mov	r2, r9
    4aac:	4987      	ldr	r1, [pc, #540]	; (4ccc <next_sense_cond_call_handler+0x274>)
    4aae:	4888      	ldr	r0, [pc, #544]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4ab0:	f003 ffd3 	bl	8a5a <assert_print>
    4ab4:	f240 212e 	movw	r1, #558	; 0x22e
    4ab8:	4648      	mov	r0, r9
    4aba:	f003 ffc7 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4abe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4ac2:	e0e4      	b.n	4c8e <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    4ac4:	4629      	mov	r1, r5
    4ac6:	4620      	mov	r0, r4
    4ac8:	f7ff feda 	bl	4880 <call_handler>
    switch (port)
    4acc:	0963      	lsrs	r3, r4, #5
    4ace:	d01f      	beq.n	4b10 <next_sense_cond_call_handler+0xb8>
    4ad0:	2b01      	cmp	r3, #1
    4ad2:	d120      	bne.n	4b16 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    4ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4ad8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4adc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ade:	f013 0f01 	tst.w	r3, #1
    4ae2:	d01a      	beq.n	4b1a <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    4ae4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ae8:	0963      	lsrs	r3, r4, #5
    4aea:	d024      	beq.n	4b36 <next_sense_cond_call_handler+0xde>
    4aec:	2b01      	cmp	r3, #1
    4aee:	d025      	beq.n	4b3c <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    4af0:	4f75      	ldr	r7, [pc, #468]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4af2:	f240 232e 	movw	r3, #558	; 0x22e
    4af6:	463a      	mov	r2, r7
    4af8:	4974      	ldr	r1, [pc, #464]	; (4ccc <next_sense_cond_call_handler+0x274>)
    4afa:	4875      	ldr	r0, [pc, #468]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4afc:	f003 ffad 	bl	8a5a <assert_print>
    4b00:	f240 212e 	movw	r1, #558	; 0x22e
    4b04:	4638      	mov	r0, r7
    4b06:	f003 ffa1 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4b0e:	e016      	b.n	4b3e <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    4b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b14:	e7e0      	b.n	4ad8 <next_sense_cond_call_handler+0x80>
    switch (port)
    4b16:	2300      	movs	r3, #0
    4b18:	e7de      	b.n	4ad8 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b1a:	4d6b      	ldr	r5, [pc, #428]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4b1c:	f240 2329 	movw	r3, #553	; 0x229
    4b20:	462a      	mov	r2, r5
    4b22:	496c      	ldr	r1, [pc, #432]	; (4cd4 <next_sense_cond_call_handler+0x27c>)
    4b24:	486a      	ldr	r0, [pc, #424]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4b26:	f003 ff98 	bl	8a5a <assert_print>
    4b2a:	f240 2129 	movw	r1, #553	; 0x229
    4b2e:	4628      	mov	r0, r5
    4b30:	f003 ff8c 	bl	8a4c <assert_post_action>
    4b34:	e7d6      	b.n	4ae4 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    4b36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4b3a:	e000      	b.n	4b3e <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b3c:	4b66      	ldr	r3, [pc, #408]	; (4cd8 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4b3e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4b42:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    4b46:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4b4a:	429e      	cmp	r6, r3
    4b4c:	f040 80af 	bne.w	4cae <next_sense_cond_call_handler+0x256>
    switch (port)
    4b50:	0963      	lsrs	r3, r4, #5
    4b52:	d01f      	beq.n	4b94 <next_sense_cond_call_handler+0x13c>
    4b54:	2b01      	cmp	r3, #1
    4b56:	d120      	bne.n	4b9a <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    4b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4b5c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4b60:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b62:	f013 0f01 	tst.w	r3, #1
    4b66:	d01a      	beq.n	4b9e <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    4b68:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b6c:	0963      	lsrs	r3, r4, #5
    4b6e:	d024      	beq.n	4bba <next_sense_cond_call_handler+0x162>
    4b70:	2b01      	cmp	r3, #1
    4b72:	d025      	beq.n	4bc0 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    4b74:	4f54      	ldr	r7, [pc, #336]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4b76:	f240 232e 	movw	r3, #558	; 0x22e
    4b7a:	463a      	mov	r2, r7
    4b7c:	4953      	ldr	r1, [pc, #332]	; (4ccc <next_sense_cond_call_handler+0x274>)
    4b7e:	4854      	ldr	r0, [pc, #336]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4b80:	f003 ff6b 	bl	8a5a <assert_print>
    4b84:	f240 212e 	movw	r1, #558	; 0x22e
    4b88:	4638      	mov	r0, r7
    4b8a:	f003 ff5f 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4b8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4b92:	e016      	b.n	4bc2 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    4b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4b98:	e7e0      	b.n	4b5c <next_sense_cond_call_handler+0x104>
    switch (port)
    4b9a:	2300      	movs	r3, #0
    4b9c:	e7de      	b.n	4b5c <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b9e:	4d4a      	ldr	r5, [pc, #296]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4ba0:	f240 2329 	movw	r3, #553	; 0x229
    4ba4:	462a      	mov	r2, r5
    4ba6:	494b      	ldr	r1, [pc, #300]	; (4cd4 <next_sense_cond_call_handler+0x27c>)
    4ba8:	4849      	ldr	r0, [pc, #292]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4baa:	f003 ff56 	bl	8a5a <assert_print>
    4bae:	f240 2129 	movw	r1, #553	; 0x229
    4bb2:	4628      	mov	r0, r5
    4bb4:	f003 ff4a 	bl	8a4c <assert_post_action>
    4bb8:	e7d6      	b.n	4b68 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    4bba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4bbe:	e000      	b.n	4bc2 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bc0:	4945      	ldr	r1, [pc, #276]	; (4cd8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bc2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4bc6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4bca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    4bd2:	0963      	lsrs	r3, r4, #5
    4bd4:	d01f      	beq.n	4c16 <next_sense_cond_call_handler+0x1be>
    4bd6:	2b01      	cmp	r3, #1
    4bd8:	d120      	bne.n	4c1c <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    4bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4bde:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4be2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4be4:	f013 0f01 	tst.w	r3, #1
    4be8:	d01a      	beq.n	4c20 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    4bea:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bee:	0964      	lsrs	r4, r4, #5
    4bf0:	d024      	beq.n	4c3c <next_sense_cond_call_handler+0x1e4>
    4bf2:	2c01      	cmp	r4, #1
    4bf4:	d025      	beq.n	4c42 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    4bf6:	4c34      	ldr	r4, [pc, #208]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4bf8:	f240 232e 	movw	r3, #558	; 0x22e
    4bfc:	4622      	mov	r2, r4
    4bfe:	4933      	ldr	r1, [pc, #204]	; (4ccc <next_sense_cond_call_handler+0x274>)
    4c00:	4833      	ldr	r0, [pc, #204]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4c02:	f003 ff2a 	bl	8a5a <assert_print>
    4c06:	f240 212e 	movw	r1, #558	; 0x22e
    4c0a:	4620      	mov	r0, r4
    4c0c:	f003 ff1e 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4c10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4c14:	e016      	b.n	4c44 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    4c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c1a:	e7e0      	b.n	4bde <next_sense_cond_call_handler+0x186>
    switch (port)
    4c1c:	2300      	movs	r3, #0
    4c1e:	e7de      	b.n	4bde <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c20:	4d29      	ldr	r5, [pc, #164]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4c22:	f240 2329 	movw	r3, #553	; 0x229
    4c26:	462a      	mov	r2, r5
    4c28:	492a      	ldr	r1, [pc, #168]	; (4cd4 <next_sense_cond_call_handler+0x27c>)
    4c2a:	4829      	ldr	r0, [pc, #164]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4c2c:	f003 ff15 	bl	8a5a <assert_print>
    4c30:	f240 2129 	movw	r1, #553	; 0x229
    4c34:	4628      	mov	r0, r5
    4c36:	f003 ff09 	bl	8a4c <assert_post_action>
    4c3a:	e7d6      	b.n	4bea <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    4c3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4c40:	e000      	b.n	4c44 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c42:	4925      	ldr	r1, [pc, #148]	; (4cd8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4c44:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    4c48:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    4c4c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4c50:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4c54:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    4c58:	e029      	b.n	4cae <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4c5a:	f04f 0803 	mov.w	r8, #3
    4c5e:	e709      	b.n	4a74 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    4c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c64:	e70e      	b.n	4a84 <next_sense_cond_call_handler+0x2c>
    switch (port)
    4c66:	2300      	movs	r3, #0
    4c68:	e70c      	b.n	4a84 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c6a:	4f17      	ldr	r7, [pc, #92]	; (4cc8 <next_sense_cond_call_handler+0x270>)
    4c6c:	f240 2329 	movw	r3, #553	; 0x229
    4c70:	463a      	mov	r2, r7
    4c72:	4918      	ldr	r1, [pc, #96]	; (4cd4 <next_sense_cond_call_handler+0x27c>)
    4c74:	4816      	ldr	r0, [pc, #88]	; (4cd0 <next_sense_cond_call_handler+0x278>)
    4c76:	f003 fef0 	bl	8a5a <assert_print>
    4c7a:	f240 2129 	movw	r1, #553	; 0x229
    4c7e:	4638      	mov	r0, r7
    4c80:	f003 fee4 	bl	8a4c <assert_post_action>
    4c84:	e705      	b.n	4a92 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    4c86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4c8a:	e000      	b.n	4c8e <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c8c:	4912      	ldr	r1, [pc, #72]	; (4cd8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4c8e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    4c92:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    4c96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4c9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4c9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4ca2:	2d03      	cmp	r5, #3
    4ca4:	d007      	beq.n	4cb6 <next_sense_cond_call_handler+0x25e>
    4ca6:	2e02      	cmp	r6, #2
    4ca8:	d003      	beq.n	4cb2 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4caa:	2e03      	cmp	r6, #3
    4cac:	d008      	beq.n	4cc0 <next_sense_cond_call_handler+0x268>
}
    4cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4cb2:	2d01      	cmp	r5, #1
    4cb4:	d1f9      	bne.n	4caa <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    4cb6:	4629      	mov	r1, r5
    4cb8:	4620      	mov	r0, r4
    4cba:	f7ff fde1 	bl	4880 <call_handler>
}
    4cbe:	e7f6      	b.n	4cae <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4cc0:	2d02      	cmp	r5, #2
    4cc2:	d1f4      	bne.n	4cae <next_sense_cond_call_handler+0x256>
    4cc4:	e7f7      	b.n	4cb6 <next_sense_cond_call_handler+0x25e>
    4cc6:	bf00      	nop
    4cc8:	0000a55c 	.word	0x0000a55c
    4ccc:	00009ccc 	.word	0x00009ccc
    4cd0:	00009cd0 	.word	0x00009cd0
    4cd4:	0000a590 	.word	0x0000a590
    4cd8:	50000300 	.word	0x50000300

00004cdc <port_event_handle>:
{
    4cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ce0:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    4ce2:	4a65      	ldr	r2, [pc, #404]	; (4e78 <port_event_handle+0x19c>)
    4ce4:	466b      	mov	r3, sp
    4ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
    4cea:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    4cee:	2300      	movs	r3, #0
    4cf0:	a802      	add	r0, sp, #8
    4cf2:	e00b      	b.n	4d0c <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    4cf4:	aa04      	add	r2, sp, #16
    4cf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4cfa:	f852 2c10 	ldr.w	r2, [r2, #-16]
    4cfe:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    4d02:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    4d06:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4d0a:	3301      	adds	r3, #1
    4d0c:	2b01      	cmp	r3, #1
    4d0e:	d9f1      	bls.n	4cf4 <port_event_handle+0x18>
    4d10:	e0ad      	b.n	4e6e <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    4d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d16:	e07f      	b.n	4e18 <port_event_handle+0x13c>
    switch (port)
    4d18:	2300      	movs	r3, #0
    4d1a:	e07d      	b.n	4e18 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d1c:	4f57      	ldr	r7, [pc, #348]	; (4e7c <port_event_handle+0x1a0>)
    4d1e:	f240 2329 	movw	r3, #553	; 0x229
    4d22:	463a      	mov	r2, r7
    4d24:	4956      	ldr	r1, [pc, #344]	; (4e80 <port_event_handle+0x1a4>)
    4d26:	4857      	ldr	r0, [pc, #348]	; (4e84 <port_event_handle+0x1a8>)
    4d28:	f003 fe97 	bl	8a5a <assert_print>
    4d2c:	f240 2129 	movw	r1, #553	; 0x229
    4d30:	4638      	mov	r0, r7
    4d32:	f003 fe8b 	bl	8a4c <assert_post_action>
    4d36:	e076      	b.n	4e26 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    4d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d3c:	e000      	b.n	4d40 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d3e:	4b52      	ldr	r3, [pc, #328]	; (4e88 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4d40:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4d44:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    4d48:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4d4c:	4631      	mov	r1, r6
    4d4e:	4620      	mov	r0, r4
    4d50:	f7ff fe82 	bl	4a58 <next_sense_cond_call_handler>
    switch (port)
    4d54:	0963      	lsrs	r3, r4, #5
    4d56:	d01f      	beq.n	4d98 <port_event_handle+0xbc>
    4d58:	2b01      	cmp	r3, #1
    4d5a:	d120      	bne.n	4d9e <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    4d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d60:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d64:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d66:	f013 0f01 	tst.w	r3, #1
    4d6a:	d01a      	beq.n	4da2 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    4d6c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d70:	0964      	lsrs	r4, r4, #5
    4d72:	d024      	beq.n	4dbe <port_event_handle+0xe2>
    4d74:	2c01      	cmp	r4, #1
    4d76:	d025      	beq.n	4dc4 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    4d78:	4c40      	ldr	r4, [pc, #256]	; (4e7c <port_event_handle+0x1a0>)
    4d7a:	f240 232e 	movw	r3, #558	; 0x22e
    4d7e:	4622      	mov	r2, r4
    4d80:	4942      	ldr	r1, [pc, #264]	; (4e8c <port_event_handle+0x1b0>)
    4d82:	4840      	ldr	r0, [pc, #256]	; (4e84 <port_event_handle+0x1a8>)
    4d84:	f003 fe69 	bl	8a5a <assert_print>
    4d88:	f240 212e 	movw	r1, #558	; 0x22e
    4d8c:	4620      	mov	r0, r4
    4d8e:	f003 fe5d 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4d92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4d96:	e016      	b.n	4dc6 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    4d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d9c:	e7e0      	b.n	4d60 <port_event_handle+0x84>
    switch (port)
    4d9e:	2300      	movs	r3, #0
    4da0:	e7de      	b.n	4d60 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4da2:	4e36      	ldr	r6, [pc, #216]	; (4e7c <port_event_handle+0x1a0>)
    4da4:	f240 2329 	movw	r3, #553	; 0x229
    4da8:	4632      	mov	r2, r6
    4daa:	4935      	ldr	r1, [pc, #212]	; (4e80 <port_event_handle+0x1a4>)
    4dac:	4835      	ldr	r0, [pc, #212]	; (4e84 <port_event_handle+0x1a8>)
    4dae:	f003 fe54 	bl	8a5a <assert_print>
    4db2:	f240 2129 	movw	r1, #553	; 0x229
    4db6:	4630      	mov	r0, r6
    4db8:	f003 fe48 	bl	8a4c <assert_post_action>
    4dbc:	e7d6      	b.n	4d6c <port_event_handle+0x90>
        case 0: return NRF_P0;
    4dbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4dc2:	e000      	b.n	4dc6 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dc4:	4a30      	ldr	r2, [pc, #192]	; (4e88 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    4dc6:	2301      	movs	r3, #1
    4dc8:	40b3      	lsls	r3, r6
    4dca:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    4dce:	ab04      	add	r3, sp, #16
    4dd0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4dd4:	f853 4c08 	ldr.w	r4, [r3, #-8]
    4dd8:	2c00      	cmp	r4, #0
    4dda:	d03b      	beq.n	4e54 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    4ddc:	fa94 f4a4 	rbit	r4, r4
    4de0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4de4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4de8:	f104 0208 	add.w	r2, r4, #8
    4dec:	4b28      	ldr	r3, [pc, #160]	; (4e90 <port_event_handle+0x1b4>)
    4dee:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    4df2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4df6:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    4df8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4dfc:	a802      	add	r0, sp, #8
    4dfe:	2301      	movs	r3, #1
    4e00:	fa03 f202 	lsl.w	r2, r3, r2
    4e04:	5c43      	ldrb	r3, [r0, r1]
    4e06:	ea23 0302 	bic.w	r3, r3, r2
    4e0a:	5443      	strb	r3, [r0, r1]
    switch (port)
    4e0c:	0963      	lsrs	r3, r4, #5
    4e0e:	d080      	beq.n	4d12 <port_event_handle+0x36>
    4e10:	2b01      	cmp	r3, #1
    4e12:	d181      	bne.n	4d18 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    4e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4e18:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4e1c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e1e:	f013 0f01 	tst.w	r3, #1
    4e22:	f43f af7b 	beq.w	4d1c <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    4e26:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e2a:	0963      	lsrs	r3, r4, #5
    4e2c:	d084      	beq.n	4d38 <port_event_handle+0x5c>
    4e2e:	2b01      	cmp	r3, #1
    4e30:	d085      	beq.n	4d3e <port_event_handle+0x62>
            NRFX_ASSERT(0);
    4e32:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4e7c <port_event_handle+0x1a0>
    4e36:	f240 232e 	movw	r3, #558	; 0x22e
    4e3a:	4642      	mov	r2, r8
    4e3c:	4913      	ldr	r1, [pc, #76]	; (4e8c <port_event_handle+0x1b0>)
    4e3e:	4811      	ldr	r0, [pc, #68]	; (4e84 <port_event_handle+0x1a8>)
    4e40:	f003 fe0b 	bl	8a5a <assert_print>
    4e44:	f240 212e 	movw	r1, #558	; 0x22e
    4e48:	4640      	mov	r0, r8
    4e4a:	f003 fdff 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e52:	e775      	b.n	4d40 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4e54:	3501      	adds	r5, #1
    4e56:	2d01      	cmp	r5, #1
    4e58:	d9b9      	bls.n	4dce <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e5a:	4b0e      	ldr	r3, [pc, #56]	; (4e94 <port_event_handle+0x1b8>)
    4e5c:	2200      	movs	r2, #0
    4e5e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    4e62:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    4e66:	a802      	add	r0, sp, #8
    4e68:	f7ff fdce 	bl	4a08 <latch_pending_read_and_check>
    4e6c:	b108      	cbz	r0, 4e72 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4e6e:	2500      	movs	r5, #0
    4e70:	e7f1      	b.n	4e56 <port_event_handle+0x17a>
}
    4e72:	b004      	add	sp, #16
    4e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e78:	00009a80 	.word	0x00009a80
    4e7c:	0000a55c 	.word	0x0000a55c
    4e80:	0000a590 	.word	0x0000a590
    4e84:	00009cd0 	.word	0x00009cd0
    4e88:	50000300 	.word	0x50000300
    4e8c:	00009ccc 	.word	0x00009ccc
    4e90:	20004060 	.word	0x20004060
    4e94:	40006000 	.word	0x40006000

00004e98 <nrfx_gpiote_input_configure>:
{
    4e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e9c:	4604      	mov	r4, r0
    4e9e:	4615      	mov	r5, r2
    4ea0:	461e      	mov	r6, r3
    if (p_input_config)
    4ea2:	2900      	cmp	r1, #0
    4ea4:	d064      	beq.n	4f70 <nrfx_gpiote_input_configure+0xd8>
    4ea6:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    4ea8:	f004 fb70 	bl	958c <pin_is_task_output>
    4eac:	2800      	cmp	r0, #0
    4eae:	f040 80cd 	bne.w	504c <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    4eb2:	0963      	lsrs	r3, r4, #5
    4eb4:	d020      	beq.n	4ef8 <nrfx_gpiote_input_configure+0x60>
    4eb6:	2b01      	cmp	r3, #1
    4eb8:	d121      	bne.n	4efe <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    4eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4ebe:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4ec2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ec4:	f013 0f01 	tst.w	r3, #1
    4ec8:	d01b      	beq.n	4f02 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    4eca:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ece:	0963      	lsrs	r3, r4, #5
    4ed0:	d025      	beq.n	4f1e <nrfx_gpiote_input_configure+0x86>
    4ed2:	2b01      	cmp	r3, #1
    4ed4:	d026      	beq.n	4f24 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    4ed6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 505c <nrfx_gpiote_input_configure+0x1c4>
    4eda:	f240 232e 	movw	r3, #558	; 0x22e
    4ede:	464a      	mov	r2, r9
    4ee0:	495f      	ldr	r1, [pc, #380]	; (5060 <nrfx_gpiote_input_configure+0x1c8>)
    4ee2:	4860      	ldr	r0, [pc, #384]	; (5064 <nrfx_gpiote_input_configure+0x1cc>)
    4ee4:	f003 fdb9 	bl	8a5a <assert_print>
    4ee8:	f240 212e 	movw	r1, #558	; 0x22e
    4eec:	4648      	mov	r0, r9
    4eee:	f003 fdad 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    4ef2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4ef6:	e016      	b.n	4f26 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    4ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4efc:	e7df      	b.n	4ebe <nrfx_gpiote_input_configure+0x26>
    switch (port)
    4efe:	2300      	movs	r3, #0
    4f00:	e7dd      	b.n	4ebe <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f02:	4f56      	ldr	r7, [pc, #344]	; (505c <nrfx_gpiote_input_configure+0x1c4>)
    4f04:	f240 2329 	movw	r3, #553	; 0x229
    4f08:	463a      	mov	r2, r7
    4f0a:	4957      	ldr	r1, [pc, #348]	; (5068 <nrfx_gpiote_input_configure+0x1d0>)
    4f0c:	4855      	ldr	r0, [pc, #340]	; (5064 <nrfx_gpiote_input_configure+0x1cc>)
    4f0e:	f003 fda4 	bl	8a5a <assert_print>
    4f12:	f240 2129 	movw	r1, #553	; 0x229
    4f16:	4638      	mov	r0, r7
    4f18:	f003 fd98 	bl	8a4c <assert_post_action>
    4f1c:	e7d5      	b.n	4eca <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    4f1e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    4f22:	e000      	b.n	4f26 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f24:	4951      	ldr	r1, [pc, #324]	; (506c <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f26:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    4f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4f2e:	f1b8 0f00 	cmp.w	r8, #0
    4f32:	d03f      	beq.n	4fb4 <nrfx_gpiote_input_configure+0x11c>
    4f34:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4f36:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    4f3a:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4f3e:	f1b8 0f00 	cmp.w	r8, #0
    4f42:	d039      	beq.n	4fb8 <nrfx_gpiote_input_configure+0x120>
    4f44:	f898 2000 	ldrb.w	r2, [r8]
    4f48:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4f4a:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    4f4c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    4f50:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4f54:	4a46      	ldr	r2, [pc, #280]	; (5070 <nrfx_gpiote_input_configure+0x1d8>)
    4f56:	f104 0108 	add.w	r1, r4, #8
    4f5a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4f5e:	f023 0302 	bic.w	r3, r3, #2
    4f62:	b29b      	uxth	r3, r3
    4f64:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4f68:	f043 0301 	orr.w	r3, r3, #1
    4f6c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4f70:	b1bd      	cbz	r5, 4fa2 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4f72:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4f74:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    4f78:	4620      	mov	r0, r4
    4f7a:	f7ff fc2f 	bl	47dc <pin_is_output>
    4f7e:	b1e8      	cbz	r0, 4fbc <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    4f80:	f1b8 0f00 	cmp.w	r8, #0
    4f84:	d164      	bne.n	5050 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4f86:	4a3a      	ldr	r2, [pc, #232]	; (5070 <nrfx_gpiote_input_configure+0x1d8>)
    4f88:	f104 0108 	add.w	r1, r4, #8
    4f8c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4f90:	f023 031c 	bic.w	r3, r3, #28
    4f94:	b29b      	uxth	r3, r3
    4f96:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4f9a:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    4f9e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    4fa2:	2e00      	cmp	r6, #0
    4fa4:	d058      	beq.n	5058 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4fa6:	6872      	ldr	r2, [r6, #4]
    4fa8:	6831      	ldr	r1, [r6, #0]
    4faa:	4620      	mov	r0, r4
    4fac:	f7ff fcd4 	bl	4958 <pin_handler_set>
}
    4fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4fb4:	2200      	movs	r2, #0
    4fb6:	e7be      	b.n	4f36 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4fb8:	2200      	movs	r2, #0
    4fba:	e7c6      	b.n	4f4a <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4fbc:	4a2c      	ldr	r2, [pc, #176]	; (5070 <nrfx_gpiote_input_configure+0x1d8>)
    4fbe:	f104 0108 	add.w	r1, r4, #8
    4fc2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4fc6:	f023 0320 	bic.w	r3, r3, #32
    4fca:	04db      	lsls	r3, r3, #19
    4fcc:	0cdb      	lsrs	r3, r3, #19
    4fce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    4fd2:	f1b8 0f00 	cmp.w	r8, #0
    4fd6:	d0d6      	beq.n	4f86 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    4fd8:	2f03      	cmp	r7, #3
    4fda:	d83b      	bhi.n	5054 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4fdc:	686b      	ldr	r3, [r5, #4]
    4fde:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4fe0:	b937      	cbnz	r7, 4ff0 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    4fe2:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    4fe6:	4b23      	ldr	r3, [pc, #140]	; (5074 <nrfx_gpiote_input_configure+0x1dc>)
    4fe8:	2200      	movs	r2, #0
    4fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4fee:	e7ca      	b.n	4f86 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    4ff0:	4638      	mov	r0, r7
    4ff2:	f004 fae2 	bl	95ba <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ff6:	4b1f      	ldr	r3, [pc, #124]	; (5074 <nrfx_gpiote_input_configure+0x1dc>)
    4ff8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    4ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5000:	f021 0103 	bic.w	r1, r1, #3
    5004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    500c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    5010:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    5014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5018:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    501c:	0221      	lsls	r1, r4, #8
    501e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5022:	0400      	lsls	r0, r0, #16
    5024:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5028:	4301      	orrs	r1, r0
    502a:	ea4c 0101 	orr.w	r1, ip, r1
    502e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5032:	036b      	lsls	r3, r5, #13
    5034:	b29b      	uxth	r3, r3
    5036:	4a0e      	ldr	r2, [pc, #56]	; (5070 <nrfx_gpiote_input_configure+0x1d8>)
    5038:	f104 0108 	add.w	r1, r4, #8
    503c:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    5040:	4303      	orrs	r3, r0
    5042:	f043 0320 	orr.w	r3, r3, #32
    5046:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    504a:	e79c      	b.n	4f86 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    504c:	480a      	ldr	r0, [pc, #40]	; (5078 <nrfx_gpiote_input_configure+0x1e0>)
    504e:	e7af      	b.n	4fb0 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    5050:	4809      	ldr	r0, [pc, #36]	; (5078 <nrfx_gpiote_input_configure+0x1e0>)
    5052:	e7ad      	b.n	4fb0 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    5054:	4808      	ldr	r0, [pc, #32]	; (5078 <nrfx_gpiote_input_configure+0x1e0>)
    5056:	e7ab      	b.n	4fb0 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    5058:	4808      	ldr	r0, [pc, #32]	; (507c <nrfx_gpiote_input_configure+0x1e4>)
    505a:	e7a9      	b.n	4fb0 <nrfx_gpiote_input_configure+0x118>
    505c:	0000a55c 	.word	0x0000a55c
    5060:	00009ccc 	.word	0x00009ccc
    5064:	00009cd0 	.word	0x00009cd0
    5068:	0000a590 	.word	0x0000a590
    506c:	50000300 	.word	0x50000300
    5070:	20004060 	.word	0x20004060
    5074:	40006000 	.word	0x40006000
    5078:	0bad0004 	.word	0x0bad0004
    507c:	0bad0000 	.word	0x0bad0000

00005080 <nrfx_gpiote_output_configure>:
{
    5080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5084:	4604      	mov	r4, r0
    5086:	4615      	mov	r5, r2
    if (p_config)
    5088:	2900      	cmp	r1, #0
    508a:	f000 8086 	beq.w	519a <nrfx_gpiote_output_configure+0x11a>
    508e:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5090:	f004 fa8b 	bl	95aa <pin_is_input>
    5094:	b128      	cbz	r0, 50a2 <nrfx_gpiote_output_configure+0x22>
    5096:	4620      	mov	r0, r4
    5098:	f7ff fb8a 	bl	47b0 <pin_in_use_by_te>
    509c:	2800      	cmp	r0, #0
    509e:	f040 80ce 	bne.w	523e <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    50a2:	4620      	mov	r0, r4
    50a4:	f7ff fb8e 	bl	47c4 <pin_has_trigger>
    50a8:	b118      	cbz	r0, 50b2 <nrfx_gpiote_output_configure+0x32>
    50aa:	787b      	ldrb	r3, [r7, #1]
    50ac:	2b01      	cmp	r3, #1
    50ae:	f000 80c8 	beq.w	5242 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    50b2:	f107 0901 	add.w	r9, r7, #1
    50b6:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    50ba:	0963      	lsrs	r3, r4, #5
    50bc:	d020      	beq.n	5100 <nrfx_gpiote_output_configure+0x80>
    50be:	2b01      	cmp	r3, #1
    50c0:	d121      	bne.n	5106 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    50c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    50c6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50cc:	f013 0f01 	tst.w	r3, #1
    50d0:	d01b      	beq.n	510a <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    50d2:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50d6:	0963      	lsrs	r3, r4, #5
    50d8:	d025      	beq.n	5126 <nrfx_gpiote_output_configure+0xa6>
    50da:	2b01      	cmp	r3, #1
    50dc:	d026      	beq.n	512c <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    50de:	f8df a170 	ldr.w	sl, [pc, #368]	; 5250 <nrfx_gpiote_output_configure+0x1d0>
    50e2:	f240 232e 	movw	r3, #558	; 0x22e
    50e6:	4652      	mov	r2, sl
    50e8:	495a      	ldr	r1, [pc, #360]	; (5254 <nrfx_gpiote_output_configure+0x1d4>)
    50ea:	485b      	ldr	r0, [pc, #364]	; (5258 <nrfx_gpiote_output_configure+0x1d8>)
    50ec:	f003 fcb5 	bl	8a5a <assert_print>
    50f0:	f240 212e 	movw	r1, #558	; 0x22e
    50f4:	4650      	mov	r0, sl
    50f6:	f003 fca9 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    50fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50fe:	e016      	b.n	512e <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    5100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5104:	e7df      	b.n	50c6 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    5106:	2300      	movs	r3, #0
    5108:	e7dd      	b.n	50c6 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    510a:	4e51      	ldr	r6, [pc, #324]	; (5250 <nrfx_gpiote_output_configure+0x1d0>)
    510c:	f240 2329 	movw	r3, #553	; 0x229
    5110:	4632      	mov	r2, r6
    5112:	4952      	ldr	r1, [pc, #328]	; (525c <nrfx_gpiote_output_configure+0x1dc>)
    5114:	4850      	ldr	r0, [pc, #320]	; (5258 <nrfx_gpiote_output_configure+0x1d8>)
    5116:	f003 fca0 	bl	8a5a <assert_print>
    511a:	f240 2129 	movw	r1, #553	; 0x229
    511e:	4630      	mov	r0, r6
    5120:	f003 fc94 	bl	8a4c <assert_post_action>
    5124:	e7d5      	b.n	50d2 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    5126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    512a:	e000      	b.n	512e <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    512c:	4a4c      	ldr	r2, [pc, #304]	; (5260 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    512e:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    5132:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5136:	f1b9 0f00 	cmp.w	r9, #0
    513a:	d04b      	beq.n	51d4 <nrfx_gpiote_output_configure+0x154>
    513c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    513e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5142:	f1b8 0f00 	cmp.w	r8, #0
    5146:	d047      	beq.n	51d8 <nrfx_gpiote_output_configure+0x158>
    5148:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    514a:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    514c:	2f00      	cmp	r7, #0
    514e:	d045      	beq.n	51dc <nrfx_gpiote_output_configure+0x15c>
    5150:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5154:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    5156:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    515a:	f1b9 0f00 	cmp.w	r9, #0
    515e:	d03f      	beq.n	51e0 <nrfx_gpiote_output_configure+0x160>
    5160:	787b      	ldrb	r3, [r7, #1]
    5162:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5164:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5168:	f1b8 0f00 	cmp.w	r8, #0
    516c:	d03a      	beq.n	51e4 <nrfx_gpiote_output_configure+0x164>
    516e:	78b8      	ldrb	r0, [r7, #2]
    5170:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5172:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5174:	2f00      	cmp	r7, #0
    5176:	d037      	beq.n	51e8 <nrfx_gpiote_output_configure+0x168>
    5178:	7838      	ldrb	r0, [r7, #0]
    517a:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    517c:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    517e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    5180:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5184:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5188:	4a36      	ldr	r2, [pc, #216]	; (5264 <nrfx_gpiote_output_configure+0x1e4>)
    518a:	f104 0108 	add.w	r1, r4, #8
    518e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5192:	f043 0303 	orr.w	r3, r3, #3
    5196:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    519a:	2d00      	cmp	r5, #0
    519c:	d053      	beq.n	5246 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    519e:	4620      	mov	r0, r4
    51a0:	f004 fa03 	bl	95aa <pin_is_input>
    51a4:	2800      	cmp	r0, #0
    51a6:	d150      	bne.n	524a <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    51a8:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    51aa:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    51ae:	4a2e      	ldr	r2, [pc, #184]	; (5268 <nrfx_gpiote_output_configure+0x1e8>)
    51b0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    51b4:	492b      	ldr	r1, [pc, #172]	; (5264 <nrfx_gpiote_output_configure+0x1e4>)
    51b6:	f104 0008 	add.w	r0, r4, #8
    51ba:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    51be:	f022 0220 	bic.w	r2, r2, #32
    51c2:	04d2      	lsls	r2, r2, #19
    51c4:	0cd2      	lsrs	r2, r2, #19
    51c6:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    51ca:	786a      	ldrb	r2, [r5, #1]
    51cc:	b972      	cbnz	r2, 51ec <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    51ce:	4827      	ldr	r0, [pc, #156]	; (526c <nrfx_gpiote_output_configure+0x1ec>)
}
    51d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    51d4:	2300      	movs	r3, #0
    51d6:	e7b2      	b.n	513e <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    51d8:	2000      	movs	r0, #0
    51da:	e7b6      	b.n	514a <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    51dc:	2000      	movs	r0, #0
    51de:	e7b9      	b.n	5154 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    51e0:	2300      	movs	r3, #0
    51e2:	e7bf      	b.n	5164 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    51e4:	2000      	movs	r0, #0
    51e6:	e7c4      	b.n	5172 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    51e8:	2000      	movs	r0, #0
    51ea:	e7c7      	b.n	517c <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    51ec:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    51ee:	481e      	ldr	r0, [pc, #120]	; (5268 <nrfx_gpiote_output_configure+0x1e8>)
    51f0:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    51f4:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    51f8:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    51fc:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    5200:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5204:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    5208:	0221      	lsls	r1, r4, #8
    520a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    520e:	0412      	lsls	r2, r2, #16
    5210:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5214:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5216:	0539      	lsls	r1, r7, #20
    5218:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    521c:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    521e:	4332      	orrs	r2, r6
    5220:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5224:	035b      	lsls	r3, r3, #13
    5226:	b29b      	uxth	r3, r3
    5228:	4a0e      	ldr	r2, [pc, #56]	; (5264 <nrfx_gpiote_output_configure+0x1e4>)
    522a:	3408      	adds	r4, #8
    522c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    5230:	430b      	orrs	r3, r1
    5232:	f043 0320 	orr.w	r3, r3, #32
    5236:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    523a:	480c      	ldr	r0, [pc, #48]	; (526c <nrfx_gpiote_output_configure+0x1ec>)
    523c:	e7c8      	b.n	51d0 <nrfx_gpiote_output_configure+0x150>
    523e:	480c      	ldr	r0, [pc, #48]	; (5270 <nrfx_gpiote_output_configure+0x1f0>)
    5240:	e7c6      	b.n	51d0 <nrfx_gpiote_output_configure+0x150>
    5242:	480b      	ldr	r0, [pc, #44]	; (5270 <nrfx_gpiote_output_configure+0x1f0>)
    5244:	e7c4      	b.n	51d0 <nrfx_gpiote_output_configure+0x150>
    5246:	4809      	ldr	r0, [pc, #36]	; (526c <nrfx_gpiote_output_configure+0x1ec>)
    5248:	e7c2      	b.n	51d0 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    524a:	4809      	ldr	r0, [pc, #36]	; (5270 <nrfx_gpiote_output_configure+0x1f0>)
    524c:	e7c0      	b.n	51d0 <nrfx_gpiote_output_configure+0x150>
    524e:	bf00      	nop
    5250:	0000a55c 	.word	0x0000a55c
    5254:	00009ccc 	.word	0x00009ccc
    5258:	00009cd0 	.word	0x00009cd0
    525c:	0000a590 	.word	0x0000a590
    5260:	50000300 	.word	0x50000300
    5264:	20004060 	.word	0x20004060
    5268:	40006000 	.word	0x40006000
    526c:	0bad0000 	.word	0x0bad0000
    5270:	0bad0004 	.word	0x0bad0004

00005274 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5274:	4b01      	ldr	r3, [pc, #4]	; (527c <nrfx_gpiote_global_callback_set+0x8>)
    5276:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5278:	60d9      	str	r1, [r3, #12]
}
    527a:	4770      	bx	lr
    527c:	20004060 	.word	0x20004060

00005280 <nrfx_gpiote_channel_get>:
{
    5280:	b570      	push	{r4, r5, r6, lr}
    5282:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5284:	460d      	mov	r5, r1
    5286:	b159      	cbz	r1, 52a0 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    5288:	4620      	mov	r0, r4
    528a:	f7ff fa91 	bl	47b0 <pin_in_use_by_te>
    528e:	b1a8      	cbz	r0, 52bc <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5290:	3408      	adds	r4, #8
    5292:	4b0b      	ldr	r3, [pc, #44]	; (52c0 <nrfx_gpiote_channel_get+0x40>)
    5294:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5298:	0b5b      	lsrs	r3, r3, #13
    529a:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    529c:	4809      	ldr	r0, [pc, #36]	; (52c4 <nrfx_gpiote_channel_get+0x44>)
}
    529e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    52a0:	4e09      	ldr	r6, [pc, #36]	; (52c8 <nrfx_gpiote_channel_get+0x48>)
    52a2:	f240 2335 	movw	r3, #565	; 0x235
    52a6:	4632      	mov	r2, r6
    52a8:	4908      	ldr	r1, [pc, #32]	; (52cc <nrfx_gpiote_channel_get+0x4c>)
    52aa:	4809      	ldr	r0, [pc, #36]	; (52d0 <nrfx_gpiote_channel_get+0x50>)
    52ac:	f003 fbd5 	bl	8a5a <assert_print>
    52b0:	f240 2135 	movw	r1, #565	; 0x235
    52b4:	4630      	mov	r0, r6
    52b6:	f003 fbc9 	bl	8a4c <assert_post_action>
    52ba:	e7e5      	b.n	5288 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    52bc:	4805      	ldr	r0, [pc, #20]	; (52d4 <nrfx_gpiote_channel_get+0x54>)
    52be:	e7ee      	b.n	529e <nrfx_gpiote_channel_get+0x1e>
    52c0:	20004060 	.word	0x20004060
    52c4:	0bad0000 	.word	0x0bad0000
    52c8:	0000a730 	.word	0x0000a730
    52cc:	0000a784 	.word	0x0000a784
    52d0:	00009cd0 	.word	0x00009cd0
    52d4:	0bad0004 	.word	0x0bad0004

000052d8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    52d8:	4b10      	ldr	r3, [pc, #64]	; (531c <nrfx_gpiote_init+0x44>)
    52da:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    52de:	b10b      	cbz	r3, 52e4 <nrfx_gpiote_init+0xc>
        return err_code;
    52e0:	480f      	ldr	r0, [pc, #60]	; (5320 <nrfx_gpiote_init+0x48>)
}
    52e2:	4770      	bx	lr
{
    52e4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    52e6:	4c0d      	ldr	r4, [pc, #52]	; (531c <nrfx_gpiote_init+0x44>)
    52e8:	2260      	movs	r2, #96	; 0x60
    52ea:	2100      	movs	r1, #0
    52ec:	f104 0010 	add.w	r0, r4, #16
    52f0:	f003 fced 	bl	8cce <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    52f4:	2006      	movs	r0, #6
    52f6:	f7fc fdcf 	bl	1e98 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    52fa:	4b0a      	ldr	r3, [pc, #40]	; (5324 <nrfx_gpiote_init+0x4c>)
    52fc:	2200      	movs	r2, #0
    52fe:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    5302:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    530a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    530e:	2301      	movs	r3, #1
    5310:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5314:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    5316:	4804      	ldr	r0, [pc, #16]	; (5328 <nrfx_gpiote_init+0x50>)
}
    5318:	bd10      	pop	{r4, pc}
    531a:	bf00      	nop
    531c:	20004060 	.word	0x20004060
    5320:	0bad0005 	.word	0x0bad0005
    5324:	40006000 	.word	0x40006000
    5328:	0bad0000 	.word	0x0bad0000

0000532c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    532c:	4b03      	ldr	r3, [pc, #12]	; (533c <nrfx_gpiote_is_init+0x10>)
    532e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5332:	3800      	subs	r0, #0
    5334:	bf18      	it	ne
    5336:	2001      	movne	r0, #1
    5338:	4770      	bx	lr
    533a:	bf00      	nop
    533c:	20004060 	.word	0x20004060

00005340 <nrfx_gpiote_channel_free>:
{
    5340:	b508      	push	{r3, lr}
    5342:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5344:	4801      	ldr	r0, [pc, #4]	; (534c <nrfx_gpiote_channel_free+0xc>)
    5346:	f7ff f855 	bl	43f4 <nrfx_flag32_free>
}
    534a:	bd08      	pop	{r3, pc}
    534c:	200040d0 	.word	0x200040d0

00005350 <nrfx_gpiote_channel_alloc>:
{
    5350:	b508      	push	{r3, lr}
    5352:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5354:	4801      	ldr	r0, [pc, #4]	; (535c <nrfx_gpiote_channel_alloc+0xc>)
    5356:	f7ff f825 	bl	43a4 <nrfx_flag32_alloc>
}
    535a:	bd08      	pop	{r3, pc}
    535c:	200040d0 	.word	0x200040d0

00005360 <nrfx_gpiote_trigger_enable>:
{
    5360:	b570      	push	{r4, r5, r6, lr}
    5362:	4604      	mov	r4, r0
    5364:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5366:	f7ff fa2d 	bl	47c4 <pin_has_trigger>
    536a:	b1b8      	cbz	r0, 539c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    536c:	4620      	mov	r0, r4
    536e:	f7ff fa1f 	bl	47b0 <pin_in_use_by_te>
    5372:	b118      	cbz	r0, 537c <nrfx_gpiote_trigger_enable+0x1c>
    5374:	4620      	mov	r0, r4
    5376:	f004 f918 	bl	95aa <pin_is_input>
    537a:	b9e8      	cbnz	r0, 53b8 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    537c:	2d00      	cmp	r5, #0
    537e:	d04c      	beq.n	541a <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5380:	f104 0308 	add.w	r3, r4, #8
    5384:	4a70      	ldr	r2, [pc, #448]	; (5548 <nrfx_gpiote_trigger_enable+0x1e8>)
    5386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    538a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    538e:	2b04      	cmp	r3, #4
    5390:	f000 8092 	beq.w	54b8 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5394:	2b05      	cmp	r3, #5
    5396:	d14e      	bne.n	5436 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5398:	2602      	movs	r6, #2
    539a:	e08e      	b.n	54ba <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    539c:	4e6b      	ldr	r6, [pc, #428]	; (554c <nrfx_gpiote_trigger_enable+0x1ec>)
    539e:	f240 33df 	movw	r3, #991	; 0x3df
    53a2:	4632      	mov	r2, r6
    53a4:	496a      	ldr	r1, [pc, #424]	; (5550 <nrfx_gpiote_trigger_enable+0x1f0>)
    53a6:	486b      	ldr	r0, [pc, #428]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    53a8:	f003 fb57 	bl	8a5a <assert_print>
    53ac:	f240 31df 	movw	r1, #991	; 0x3df
    53b0:	4630      	mov	r0, r6
    53b2:	f003 fb4b 	bl	8a4c <assert_post_action>
    53b6:	e7d9      	b.n	536c <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    53b8:	4620      	mov	r0, r4
    53ba:	f7ff fa19 	bl	47f0 <pin_te_get>
    53be:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    53c0:	2807      	cmp	r0, #7
    53c2:	d81c      	bhi.n	53fe <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    53c4:	00a3      	lsls	r3, r4, #2
    53c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    53ca:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    53cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    53d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53d4:	2200      	movs	r2, #0
    53d6:	601a      	str	r2, [r3, #0]
    53d8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    53da:	4a5f      	ldr	r2, [pc, #380]	; (5558 <nrfx_gpiote_trigger_enable+0x1f8>)
    53dc:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    53e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    53e4:	f043 0301 	orr.w	r3, r3, #1
    53e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    53ec:	2d00      	cmp	r5, #0
    53ee:	f000 80a9 	beq.w	5544 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    53f2:	2001      	movs	r0, #1
    53f4:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    53f8:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    53fc:	e0a2      	b.n	5544 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    53fe:	4e57      	ldr	r6, [pc, #348]	; (555c <nrfx_gpiote_trigger_enable+0x1fc>)
    5400:	f44f 7323 	mov.w	r3, #652	; 0x28c
    5404:	4632      	mov	r2, r6
    5406:	4956      	ldr	r1, [pc, #344]	; (5560 <nrfx_gpiote_trigger_enable+0x200>)
    5408:	4852      	ldr	r0, [pc, #328]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    540a:	f003 fb26 	bl	8a5a <assert_print>
    540e:	f44f 7123 	mov.w	r1, #652	; 0x28c
    5412:	4630      	mov	r0, r6
    5414:	f003 fb1a 	bl	8a4c <assert_post_action>
    5418:	e7d4      	b.n	53c4 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    541a:	4d4c      	ldr	r5, [pc, #304]	; (554c <nrfx_gpiote_trigger_enable+0x1ec>)
    541c:	f240 33ee 	movw	r3, #1006	; 0x3ee
    5420:	462a      	mov	r2, r5
    5422:	4950      	ldr	r1, [pc, #320]	; (5564 <nrfx_gpiote_trigger_enable+0x204>)
    5424:	484b      	ldr	r0, [pc, #300]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    5426:	f003 fb18 	bl	8a5a <assert_print>
    542a:	f240 31ee 	movw	r1, #1006	; 0x3ee
    542e:	4628      	mov	r0, r5
    5430:	f003 fb0c 	bl	8a4c <assert_post_action>
    5434:	e7a4      	b.n	5380 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    5436:	0963      	lsrs	r3, r4, #5
    5438:	d01f      	beq.n	547a <nrfx_gpiote_trigger_enable+0x11a>
    543a:	2b01      	cmp	r3, #1
    543c:	d120      	bne.n	5480 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    543e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5442:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5446:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5448:	f013 0f01 	tst.w	r3, #1
    544c:	d01a      	beq.n	5484 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    544e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5452:	0963      	lsrs	r3, r4, #5
    5454:	d024      	beq.n	54a0 <nrfx_gpiote_trigger_enable+0x140>
    5456:	2b01      	cmp	r3, #1
    5458:	d025      	beq.n	54a6 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    545a:	4e43      	ldr	r6, [pc, #268]	; (5568 <nrfx_gpiote_trigger_enable+0x208>)
    545c:	f240 232e 	movw	r3, #558	; 0x22e
    5460:	4632      	mov	r2, r6
    5462:	4942      	ldr	r1, [pc, #264]	; (556c <nrfx_gpiote_trigger_enable+0x20c>)
    5464:	483b      	ldr	r0, [pc, #236]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    5466:	f003 faf8 	bl	8a5a <assert_print>
    546a:	f240 212e 	movw	r1, #558	; 0x22e
    546e:	4630      	mov	r0, r6
    5470:	f003 faec 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    5474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5478:	e016      	b.n	54a8 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    547a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    547e:	e7e0      	b.n	5442 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    5480:	2300      	movs	r3, #0
    5482:	e7de      	b.n	5442 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5484:	4d38      	ldr	r5, [pc, #224]	; (5568 <nrfx_gpiote_trigger_enable+0x208>)
    5486:	f240 2329 	movw	r3, #553	; 0x229
    548a:	462a      	mov	r2, r5
    548c:	4938      	ldr	r1, [pc, #224]	; (5570 <nrfx_gpiote_trigger_enable+0x210>)
    548e:	4831      	ldr	r0, [pc, #196]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    5490:	f003 fae3 	bl	8a5a <assert_print>
    5494:	f240 2129 	movw	r1, #553	; 0x229
    5498:	4628      	mov	r0, r5
    549a:	f003 fad7 	bl	8a4c <assert_post_action>
    549e:	e7d6      	b.n	544e <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    54a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    54a4:	e000      	b.n	54a8 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54a6:	4b33      	ldr	r3, [pc, #204]	; (5574 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    54a8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    54ac:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    54ae:	f013 0f01 	tst.w	r3, #1
    54b2:	d024      	beq.n	54fe <nrfx_gpiote_trigger_enable+0x19e>
    54b4:	2603      	movs	r6, #3
    54b6:	e000      	b.n	54ba <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    54b8:	2603      	movs	r6, #3
    switch (port)
    54ba:	0963      	lsrs	r3, r4, #5
    54bc:	d021      	beq.n	5502 <nrfx_gpiote_trigger_enable+0x1a2>
    54be:	2b01      	cmp	r3, #1
    54c0:	d122      	bne.n	5508 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    54c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    54c6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    54ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54cc:	f013 0f01 	tst.w	r3, #1
    54d0:	d01c      	beq.n	550c <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    54d2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54d6:	0964      	lsrs	r4, r4, #5
    54d8:	d026      	beq.n	5528 <nrfx_gpiote_trigger_enable+0x1c8>
    54da:	2c01      	cmp	r4, #1
    54dc:	d027      	beq.n	552e <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    54de:	4c22      	ldr	r4, [pc, #136]	; (5568 <nrfx_gpiote_trigger_enable+0x208>)
    54e0:	f240 232e 	movw	r3, #558	; 0x22e
    54e4:	4622      	mov	r2, r4
    54e6:	4921      	ldr	r1, [pc, #132]	; (556c <nrfx_gpiote_trigger_enable+0x20c>)
    54e8:	481a      	ldr	r0, [pc, #104]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    54ea:	f003 fab6 	bl	8a5a <assert_print>
    54ee:	f240 212e 	movw	r1, #558	; 0x22e
    54f2:	4620      	mov	r0, r4
    54f4:	f003 faaa 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    54f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    54fc:	e018      	b.n	5530 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    54fe:	2602      	movs	r6, #2
    5500:	e7db      	b.n	54ba <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    5502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5506:	e7de      	b.n	54c6 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    5508:	2300      	movs	r3, #0
    550a:	e7dc      	b.n	54c6 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    550c:	4d16      	ldr	r5, [pc, #88]	; (5568 <nrfx_gpiote_trigger_enable+0x208>)
    550e:	f240 2329 	movw	r3, #553	; 0x229
    5512:	462a      	mov	r2, r5
    5514:	4916      	ldr	r1, [pc, #88]	; (5570 <nrfx_gpiote_trigger_enable+0x210>)
    5516:	480f      	ldr	r0, [pc, #60]	; (5554 <nrfx_gpiote_trigger_enable+0x1f4>)
    5518:	f003 fa9f 	bl	8a5a <assert_print>
    551c:	f240 2129 	movw	r1, #553	; 0x229
    5520:	4628      	mov	r0, r5
    5522:	f003 fa93 	bl	8a4c <assert_post_action>
    5526:	e7d4      	b.n	54d2 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    5528:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    552c:	e000      	b.n	5530 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    552e:	4911      	ldr	r1, [pc, #68]	; (5574 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5530:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    5534:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5538:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    553c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5540:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    5544:	bd70      	pop	{r4, r5, r6, pc}
    5546:	bf00      	nop
    5548:	20004060 	.word	0x20004060
    554c:	0000a730 	.word	0x0000a730
    5550:	0000a7d4 	.word	0x0000a7d4
    5554:	00009cd0 	.word	0x00009cd0
    5558:	40006000 	.word	0x40006000
    555c:	0000a790 	.word	0x0000a790
    5560:	0000a7c8 	.word	0x0000a7c8
    5564:	0000a7ec 	.word	0x0000a7ec
    5568:	0000a55c 	.word	0x0000a55c
    556c:	00009ccc 	.word	0x00009ccc
    5570:	0000a590 	.word	0x0000a590
    5574:	50000300 	.word	0x50000300

00005578 <nrfx_gpiote_trigger_disable>:
{
    5578:	b538      	push	{r3, r4, r5, lr}
    557a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    557c:	f7ff f918 	bl	47b0 <pin_in_use_by_te>
    5580:	b1a0      	cbz	r0, 55ac <nrfx_gpiote_trigger_disable+0x34>
    5582:	4620      	mov	r0, r4
    5584:	f004 f811 	bl	95aa <pin_is_input>
    5588:	b180      	cbz	r0, 55ac <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    558a:	4620      	mov	r0, r4
    558c:	f7ff f930 	bl	47f0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5590:	2201      	movs	r2, #1
    5592:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5594:	4b26      	ldr	r3, [pc, #152]	; (5630 <nrfx_gpiote_trigger_disable+0xb8>)
    5596:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    559a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    559e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    55a2:	f022 0203 	bic.w	r2, r2, #3
    55a6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    55aa:	e040      	b.n	562e <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    55ac:	0963      	lsrs	r3, r4, #5
    55ae:	d01f      	beq.n	55f0 <nrfx_gpiote_trigger_disable+0x78>
    55b0:	2b01      	cmp	r3, #1
    55b2:	d120      	bne.n	55f6 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    55b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    55b8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    55bc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55be:	f013 0f01 	tst.w	r3, #1
    55c2:	d01a      	beq.n	55fa <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    55c4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55c8:	0964      	lsrs	r4, r4, #5
    55ca:	d024      	beq.n	5616 <nrfx_gpiote_trigger_disable+0x9e>
    55cc:	2c01      	cmp	r4, #1
    55ce:	d025      	beq.n	561c <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    55d0:	4c18      	ldr	r4, [pc, #96]	; (5634 <nrfx_gpiote_trigger_disable+0xbc>)
    55d2:	f240 232e 	movw	r3, #558	; 0x22e
    55d6:	4622      	mov	r2, r4
    55d8:	4917      	ldr	r1, [pc, #92]	; (5638 <nrfx_gpiote_trigger_disable+0xc0>)
    55da:	4818      	ldr	r0, [pc, #96]	; (563c <nrfx_gpiote_trigger_disable+0xc4>)
    55dc:	f003 fa3d 	bl	8a5a <assert_print>
    55e0:	f240 212e 	movw	r1, #558	; 0x22e
    55e4:	4620      	mov	r0, r4
    55e6:	f003 fa31 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    55ea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    55ee:	e016      	b.n	561e <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    55f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55f4:	e7e0      	b.n	55b8 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    55f6:	2300      	movs	r3, #0
    55f8:	e7de      	b.n	55b8 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55fa:	4d0e      	ldr	r5, [pc, #56]	; (5634 <nrfx_gpiote_trigger_disable+0xbc>)
    55fc:	f240 2329 	movw	r3, #553	; 0x229
    5600:	462a      	mov	r2, r5
    5602:	490f      	ldr	r1, [pc, #60]	; (5640 <nrfx_gpiote_trigger_disable+0xc8>)
    5604:	480d      	ldr	r0, [pc, #52]	; (563c <nrfx_gpiote_trigger_disable+0xc4>)
    5606:	f003 fa28 	bl	8a5a <assert_print>
    560a:	f240 2129 	movw	r1, #553	; 0x229
    560e:	4628      	mov	r0, r5
    5610:	f003 fa1c 	bl	8a4c <assert_post_action>
    5614:	e7d6      	b.n	55c4 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    5616:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    561a:	e000      	b.n	561e <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    561c:	4909      	ldr	r1, [pc, #36]	; (5644 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    561e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    5622:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5626:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    562e:	bd38      	pop	{r3, r4, r5, pc}
    5630:	40006000 	.word	0x40006000
    5634:	0000a55c 	.word	0x0000a55c
    5638:	00009ccc 	.word	0x00009ccc
    563c:	00009cd0 	.word	0x00009cd0
    5640:	0000a590 	.word	0x0000a590
    5644:	50000300 	.word	0x50000300

00005648 <nrfx_gpiote_pin_uninit>:
{
    5648:	b538      	push	{r3, r4, r5, lr}
    564a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    564c:	f7ff f8a6 	bl	479c <pin_in_use>
    5650:	b908      	cbnz	r0, 5656 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5652:	4824      	ldr	r0, [pc, #144]	; (56e4 <nrfx_gpiote_pin_uninit+0x9c>)
}
    5654:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    5656:	4620      	mov	r0, r4
    5658:	f7ff ff8e 	bl	5578 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    565c:	4620      	mov	r0, r4
    565e:	f7ff f95f 	bl	4920 <pin_handler_trigger_uninit>
    switch (port)
    5662:	0963      	lsrs	r3, r4, #5
    5664:	d01f      	beq.n	56a6 <nrfx_gpiote_pin_uninit+0x5e>
    5666:	2b01      	cmp	r3, #1
    5668:	d120      	bne.n	56ac <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    566a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    566e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5672:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5674:	f013 0f01 	tst.w	r3, #1
    5678:	d01a      	beq.n	56b0 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    567a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    567e:	0964      	lsrs	r4, r4, #5
    5680:	d024      	beq.n	56cc <nrfx_gpiote_pin_uninit+0x84>
    5682:	2c01      	cmp	r4, #1
    5684:	d025      	beq.n	56d2 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    5686:	4c18      	ldr	r4, [pc, #96]	; (56e8 <nrfx_gpiote_pin_uninit+0xa0>)
    5688:	f240 232e 	movw	r3, #558	; 0x22e
    568c:	4622      	mov	r2, r4
    568e:	4917      	ldr	r1, [pc, #92]	; (56ec <nrfx_gpiote_pin_uninit+0xa4>)
    5690:	4817      	ldr	r0, [pc, #92]	; (56f0 <nrfx_gpiote_pin_uninit+0xa8>)
    5692:	f003 f9e2 	bl	8a5a <assert_print>
    5696:	f240 212e 	movw	r1, #558	; 0x22e
    569a:	4620      	mov	r0, r4
    569c:	f003 f9d6 	bl	8a4c <assert_post_action>
        case 0: return NRF_P0;
    56a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    56a4:	e016      	b.n	56d4 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    56a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    56aa:	e7e0      	b.n	566e <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    56ac:	2300      	movs	r3, #0
    56ae:	e7de      	b.n	566e <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56b0:	4d0d      	ldr	r5, [pc, #52]	; (56e8 <nrfx_gpiote_pin_uninit+0xa0>)
    56b2:	f240 2329 	movw	r3, #553	; 0x229
    56b6:	462a      	mov	r2, r5
    56b8:	490e      	ldr	r1, [pc, #56]	; (56f4 <nrfx_gpiote_pin_uninit+0xac>)
    56ba:	480d      	ldr	r0, [pc, #52]	; (56f0 <nrfx_gpiote_pin_uninit+0xa8>)
    56bc:	f003 f9cd 	bl	8a5a <assert_print>
    56c0:	f240 2129 	movw	r1, #553	; 0x229
    56c4:	4628      	mov	r0, r5
    56c6:	f003 f9c1 	bl	8a4c <assert_post_action>
    56ca:	e7d6      	b.n	567a <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    56cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    56d0:	e000      	b.n	56d4 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56d2:	4b09      	ldr	r3, [pc, #36]	; (56f8 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    56d4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    56d8:	2202      	movs	r2, #2
    56da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    56de:	4807      	ldr	r0, [pc, #28]	; (56fc <nrfx_gpiote_pin_uninit+0xb4>)
}
    56e0:	e7b8      	b.n	5654 <nrfx_gpiote_pin_uninit+0xc>
    56e2:	bf00      	nop
    56e4:	0bad0004 	.word	0x0bad0004
    56e8:	0000a55c 	.word	0x0000a55c
    56ec:	00009ccc 	.word	0x00009ccc
    56f0:	00009cd0 	.word	0x00009cd0
    56f4:	0000a590 	.word	0x0000a590
    56f8:	50000300 	.word	0x50000300
    56fc:	0bad0000 	.word	0x0bad0000

00005700 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5700:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5702:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    5704:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5708:	2100      	movs	r1, #0
    uint32_t status = 0;
    570a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    570c:	e003      	b.n	5716 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    570e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5710:	3304      	adds	r3, #4
    5712:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5714:	3101      	adds	r1, #1
    5716:	2907      	cmp	r1, #7
    5718:	d814      	bhi.n	5744 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    571a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    571e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    5722:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5724:	2a00      	cmp	r2, #0
    5726:	d0f2      	beq.n	570e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    5728:	4a0c      	ldr	r2, [pc, #48]	; (575c <nrfx_gpiote_irq_handler+0x5c>)
    572a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    572e:	4210      	tst	r0, r2
    5730:	d0ed      	beq.n	570e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    5732:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5736:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    573a:	2500      	movs	r5, #0
    573c:	6015      	str	r5, [r2, #0]
    573e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    5740:	4304      	orrs	r4, r0
    5742:	e7e4      	b.n	570e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5744:	4b05      	ldr	r3, [pc, #20]	; (575c <nrfx_gpiote_irq_handler+0x5c>)
    5746:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    574a:	b91b      	cbnz	r3, 5754 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    574c:	4620      	mov	r0, r4
    574e:	f7ff f939 	bl	49c4 <gpiote_evt_handle>
}
    5752:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    5754:	f7ff fac2 	bl	4cdc <port_event_handle>
    5758:	e7f8      	b.n	574c <nrfx_gpiote_irq_handler+0x4c>
    575a:	bf00      	nop
    575c:	40006000 	.word	0x40006000

00005760 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5760:	b508      	push	{r3, lr}
    5762:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5764:	4801      	ldr	r0, [pc, #4]	; (576c <nrfx_ppi_channel_alloc+0xc>)
    5766:	f7fe fe1d 	bl	43a4 <nrfx_flag32_alloc>
}
    576a:	bd08      	pop	{r3, pc}
    576c:	200040dc 	.word	0x200040dc

00005770 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5770:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5772:	4c14      	ldr	r4, [pc, #80]	; (57c4 <_DoInit+0x54>)
    5774:	2303      	movs	r3, #3
    5776:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5778:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    577a:	4a13      	ldr	r2, [pc, #76]	; (57c8 <_DoInit+0x58>)
    577c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    577e:	4b13      	ldr	r3, [pc, #76]	; (57cc <_DoInit+0x5c>)
    5780:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5782:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5786:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5788:	2300      	movs	r3, #0
    578a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    578c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    578e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    5790:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5792:	4a0f      	ldr	r2, [pc, #60]	; (57d0 <_DoInit+0x60>)
    5794:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5796:	2210      	movs	r2, #16
    5798:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    579a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    579c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    579e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    57a0:	490c      	ldr	r1, [pc, #48]	; (57d4 <_DoInit+0x64>)
    57a2:	1de0      	adds	r0, r4, #7
    57a4:	f003 fa2d 	bl	8c02 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    57a8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    57ac:	490a      	ldr	r1, [pc, #40]	; (57d8 <_DoInit+0x68>)
    57ae:	4620      	mov	r0, r4
    57b0:	f003 fa27 	bl	8c02 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    57b4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    57b8:	2320      	movs	r3, #32
    57ba:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    57bc:	f3bf 8f5f 	dmb	sy
}
    57c0:	bd10      	pop	{r4, pc}
    57c2:	bf00      	nop
    57c4:	20004b94 	.word	0x20004b94
    57c8:	0000a7f8 	.word	0x0000a7f8
    57cc:	20004c4c 	.word	0x20004c4c
    57d0:	20004c3c 	.word	0x20004c3c
    57d4:	0000a804 	.word	0x0000a804
    57d8:	0000a808 	.word	0x0000a808

000057dc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    57dc:	4b03      	ldr	r3, [pc, #12]	; (57ec <z_device_state_init+0x10>)

	while (dev < __device_end) {
    57de:	e000      	b.n	57e2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    57e0:	3318      	adds	r3, #24
	while (dev < __device_end) {
    57e2:	4a03      	ldr	r2, [pc, #12]	; (57f0 <z_device_state_init+0x14>)
    57e4:	4293      	cmp	r3, r2
    57e6:	d3fb      	bcc.n	57e0 <z_device_state_init+0x4>
	}
}
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop
    57ec:	00009828 	.word	0x00009828
    57f0:	000098a0 	.word	0x000098a0

000057f4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    57f4:	b570      	push	{r4, r5, r6, lr}
    57f6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    57f8:	4b11      	ldr	r3, [pc, #68]	; (5840 <z_sys_init_run_level+0x4c>)
    57fa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    57fe:	e009      	b.n	5814 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    5800:	4240      	negs	r0, r0
    5802:	e017      	b.n	5834 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    5804:	68eb      	ldr	r3, [r5, #12]
    5806:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    5808:	68ea      	ldr	r2, [r5, #12]
    580a:	7853      	ldrb	r3, [r2, #1]
    580c:	f043 0301 	orr.w	r3, r3, #1
    5810:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5812:	3408      	adds	r4, #8
    5814:	1c73      	adds	r3, r6, #1
    5816:	4a0a      	ldr	r2, [pc, #40]	; (5840 <z_sys_init_run_level+0x4c>)
    5818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    581c:	42a3      	cmp	r3, r4
    581e:	d90d      	bls.n	583c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    5820:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    5822:	6823      	ldr	r3, [r4, #0]
    5824:	4628      	mov	r0, r5
    5826:	4798      	blx	r3
		if (dev != NULL) {
    5828:	2d00      	cmp	r5, #0
    582a:	d0f2      	beq.n	5812 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    582c:	2800      	cmp	r0, #0
    582e:	d0eb      	beq.n	5808 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    5830:	2800      	cmp	r0, #0
    5832:	dbe5      	blt.n	5800 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    5834:	28ff      	cmp	r0, #255	; 0xff
    5836:	dde5      	ble.n	5804 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    5838:	20ff      	movs	r0, #255	; 0xff
    583a:	e7e3      	b.n	5804 <z_sys_init_run_level+0x10>
		}
	}
}
    583c:	bd70      	pop	{r4, r5, r6, pc}
    583e:	bf00      	nop
    5840:	0000a810 	.word	0x0000a810

00005844 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    5844:	4b01      	ldr	r3, [pc, #4]	; (584c <z_impl_z_errno+0x8>)
    5846:	6898      	ldr	r0, [r3, #8]
}
    5848:	3094      	adds	r0, #148	; 0x94
    584a:	4770      	bx	lr
    584c:	2000504c 	.word	0x2000504c

00005850 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5852:	4604      	mov	r4, r0
    5854:	460e      	mov	r6, r1
	__asm__ volatile(
    5856:	f04f 0320 	mov.w	r3, #32
    585a:	f3ef 8711 	mrs	r7, BASEPRI
    585e:	f383 8812 	msr	BASEPRI_MAX, r3
    5862:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5866:	f002 f8df 	bl	7a28 <z_impl_z_current_get>
    586a:	4605      	mov	r5, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    586c:	4631      	mov	r1, r6
    586e:	4620      	mov	r0, r4
    5870:	f003 fde1 	bl	9436 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5874:	2c04      	cmp	r4, #4
    5876:	d007      	beq.n	5888 <z_fatal_error+0x38>
	__asm__ volatile(
    5878:	f387 8811 	msr	BASEPRI, r7
    587c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5880:	4628      	mov	r0, r5
    5882:	f7fc fe6b 	bl	255c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5888:	4c07      	ldr	r4, [pc, #28]	; (58a8 <z_fatal_error+0x58>)
    588a:	238f      	movs	r3, #143	; 0x8f
    588c:	4622      	mov	r2, r4
    588e:	4907      	ldr	r1, [pc, #28]	; (58ac <z_fatal_error+0x5c>)
    5890:	4807      	ldr	r0, [pc, #28]	; (58b0 <z_fatal_error+0x60>)
    5892:	f003 f8e2 	bl	8a5a <assert_print>
    5896:	4807      	ldr	r0, [pc, #28]	; (58b4 <z_fatal_error+0x64>)
    5898:	f003 f8df 	bl	8a5a <assert_print>
    589c:	218f      	movs	r1, #143	; 0x8f
    589e:	4620      	mov	r0, r4
    58a0:	f003 f8d4 	bl	8a4c <assert_post_action>
    58a4:	e7e8      	b.n	5878 <z_fatal_error+0x28>
    58a6:	bf00      	nop
    58a8:	0000a828 	.word	0x0000a828
    58ac:	0000a84c 	.word	0x0000a84c
    58b0:	00009cd0 	.word	0x00009cd0
    58b4:	0000a86c 	.word	0x0000a86c

000058b8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    58b8:	b510      	push	{r4, lr}
    58ba:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    58bc:	4c11      	ldr	r4, [pc, #68]	; (5904 <init_idle_thread+0x4c>)
    58be:	23b0      	movs	r3, #176	; 0xb0
    58c0:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    58c4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    58c8:	4b0f      	ldr	r3, [pc, #60]	; (5908 <init_idle_thread+0x50>)
    58ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    58ce:	4a0f      	ldr	r2, [pc, #60]	; (590c <init_idle_thread+0x54>)
    58d0:	9205      	str	r2, [sp, #20]
    58d2:	2201      	movs	r2, #1
    58d4:	9204      	str	r2, [sp, #16]
    58d6:	220f      	movs	r2, #15
    58d8:	9203      	str	r2, [sp, #12]
    58da:	2200      	movs	r2, #0
    58dc:	9202      	str	r2, [sp, #8]
    58de:	9201      	str	r2, [sp, #4]
    58e0:	9300      	str	r3, [sp, #0]
    58e2:	4b0b      	ldr	r3, [pc, #44]	; (5910 <init_idle_thread+0x58>)
    58e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    58e8:	490a      	ldr	r1, [pc, #40]	; (5914 <init_idle_thread+0x5c>)
    58ea:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    58ee:	fb0c 1100 	mla	r1, ip, r0, r1
    58f2:	4620      	mov	r0, r4
    58f4:	f000 fa74 	bl	5de0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    58f8:	7b63      	ldrb	r3, [r4, #13]
    58fa:	f023 0304 	bic.w	r3, r3, #4
    58fe:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5900:	b006      	add	sp, #24
    5902:	bd10      	pop	{r4, pc}
    5904:	200043f8 	.word	0x200043f8
    5908:	2000504c 	.word	0x2000504c
    590c:	0000a8a4 	.word	0x0000a8a4
    5910:	000060f5 	.word	0x000060f5
    5914:	20006300 	.word	0x20006300

00005918 <bg_thread_main>:
{
    5918:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    591a:	4b0a      	ldr	r3, [pc, #40]	; (5944 <bg_thread_main+0x2c>)
    591c:	2201      	movs	r2, #1
    591e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5920:	2002      	movs	r0, #2
    5922:	f7ff ff67 	bl	57f4 <z_sys_init_run_level>
	boot_banner();
    5926:	f002 fca7 	bl	8278 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    592a:	2003      	movs	r0, #3
    592c:	f7ff ff62 	bl	57f4 <z_sys_init_run_level>
	z_init_static_threads();
    5930:	f000 fb66 	bl	6000 <z_init_static_threads>
	main();
    5934:	f7fa fe62 	bl	5fc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5938:	4a03      	ldr	r2, [pc, #12]	; (5948 <bg_thread_main+0x30>)
    593a:	7b13      	ldrb	r3, [r2, #12]
    593c:	f023 0301 	bic.w	r3, r3, #1
    5940:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5942:	bd08      	pop	{r3, pc}
    5944:	20005275 	.word	0x20005275
    5948:	200044a8 	.word	0x200044a8

0000594c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    594c:	b508      	push	{r3, lr}
    594e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5950:	4a01      	ldr	r2, [pc, #4]	; (5958 <switch_to_main_thread+0xc>)
    5952:	4802      	ldr	r0, [pc, #8]	; (595c <switch_to_main_thread+0x10>)
    5954:	f7fc fbb4 	bl	20c0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5958:	00005919 	.word	0x00005919
    595c:	200044a8 	.word	0x200044a8

00005960 <z_bss_zero>:
{
    5960:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5962:	4803      	ldr	r0, [pc, #12]	; (5970 <z_bss_zero+0x10>)
    5964:	4a03      	ldr	r2, [pc, #12]	; (5974 <z_bss_zero+0x14>)
    5966:	1a12      	subs	r2, r2, r0
    5968:	2100      	movs	r1, #0
    596a:	f003 fe42 	bl	95f2 <z_early_memset>
}
    596e:	bd08      	pop	{r3, pc}
    5970:	200041c8 	.word	0x200041c8
    5974:	20005278 	.word	0x20005278

00005978 <z_init_cpu>:
{
    5978:	b510      	push	{r4, lr}
    597a:	4604      	mov	r4, r0
	init_idle_thread(id);
    597c:	f7ff ff9c 	bl	58b8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5980:	490b      	ldr	r1, [pc, #44]	; (59b0 <z_init_cpu+0x38>)
    5982:	23b0      	movs	r3, #176	; 0xb0
    5984:	fb03 1104 	mla	r1, r3, r4, r1
    5988:	4a0a      	ldr	r2, [pc, #40]	; (59b4 <z_init_cpu+0x3c>)
    598a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    598e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5992:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    5994:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5996:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    599a:	4b07      	ldr	r3, [pc, #28]	; (59b8 <z_init_cpu+0x40>)
    599c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    59a0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    59a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    59a8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    59ac:	6063      	str	r3, [r4, #4]
}
    59ae:	bd10      	pop	{r4, pc}
    59b0:	200043f8 	.word	0x200043f8
    59b4:	2000504c 	.word	0x2000504c
    59b8:	20006460 	.word	0x20006460

000059bc <prepare_multithreading>:
{
    59bc:	b570      	push	{r4, r5, r6, lr}
    59be:	b086      	sub	sp, #24
	z_sched_init();
    59c0:	f001 fe6e 	bl	76a0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    59c4:	4d10      	ldr	r5, [pc, #64]	; (5a08 <prepare_multithreading+0x4c>)
    59c6:	4b11      	ldr	r3, [pc, #68]	; (5a0c <prepare_multithreading+0x50>)
    59c8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    59ca:	4b11      	ldr	r3, [pc, #68]	; (5a10 <prepare_multithreading+0x54>)
    59cc:	9305      	str	r3, [sp, #20]
    59ce:	2301      	movs	r3, #1
    59d0:	9304      	str	r3, [sp, #16]
    59d2:	2400      	movs	r4, #0
    59d4:	9403      	str	r4, [sp, #12]
    59d6:	9402      	str	r4, [sp, #8]
    59d8:	9401      	str	r4, [sp, #4]
    59da:	9400      	str	r4, [sp, #0]
    59dc:	4b0d      	ldr	r3, [pc, #52]	; (5a14 <prepare_multithreading+0x58>)
    59de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    59e2:	490d      	ldr	r1, [pc, #52]	; (5a18 <prepare_multithreading+0x5c>)
    59e4:	4628      	mov	r0, r5
    59e6:	f000 f9fb 	bl	5de0 <z_setup_new_thread>
    59ea:	4606      	mov	r6, r0
    59ec:	7b6b      	ldrb	r3, [r5, #13]
    59ee:	f023 0304 	bic.w	r3, r3, #4
    59f2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    59f4:	4628      	mov	r0, r5
    59f6:	f001 f9d7 	bl	6da8 <z_ready_thread>
	z_init_cpu(0);
    59fa:	4620      	mov	r0, r4
    59fc:	f7ff ffbc 	bl	5978 <z_init_cpu>
}
    5a00:	4630      	mov	r0, r6
    5a02:	b006      	add	sp, #24
    5a04:	bd70      	pop	{r4, r5, r6, pc}
    5a06:	bf00      	nop
    5a08:	200044a8 	.word	0x200044a8
    5a0c:	2000504c 	.word	0x2000504c
    5a10:	0000a8ac 	.word	0x0000a8ac
    5a14:	00005919 	.word	0x00005919
    5a18:	20005ee0 	.word	0x20005ee0

00005a1c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5a1c:	b500      	push	{lr}
    5a1e:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5a20:	4b1e      	ldr	r3, [pc, #120]	; (5a9c <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5a22:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5a26:	4c1e      	ldr	r4, [pc, #120]	; (5aa0 <z_cstart+0x84>)
    5a28:	6963      	ldr	r3, [r4, #20]
    5a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5a2e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5a30:	23e0      	movs	r3, #224	; 0xe0
    5a32:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5a36:	2500      	movs	r5, #0
    5a38:	77e5      	strb	r5, [r4, #31]
    5a3a:	7625      	strb	r5, [r4, #24]
    5a3c:	7665      	strb	r5, [r4, #25]
    5a3e:	76a5      	strb	r5, [r4, #26]
    5a40:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5a46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5a4a:	6263      	str	r3, [r4, #36]	; 0x24
    5a4c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5a50:	f7fc fcf0 	bl	2434 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5a54:	f7fc fa02 	bl	1e5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a5c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5a60:	f7fc fe48 	bl	26f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5a64:	f7fc fd94 	bl	2590 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5a68:	2401      	movs	r4, #1
    5a6a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    5a6e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    5a72:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    5a74:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    5a76:	4668      	mov	r0, sp
    5a78:	f002 fbf8 	bl	826c <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5a7c:	4b09      	ldr	r3, [pc, #36]	; (5aa4 <z_cstart+0x88>)
    5a7e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5a82:	f7ff feab 	bl	57dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5a86:	4628      	mov	r0, r5
    5a88:	f7ff feb4 	bl	57f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5a8c:	4620      	mov	r0, r4
    5a8e:	f7ff feb1 	bl	57f4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5a92:	f7ff ff93 	bl	59bc <prepare_multithreading>
    5a96:	f7ff ff59 	bl	594c <switch_to_main_thread>
    5a9a:	bf00      	nop
    5a9c:	20006c80 	.word	0x20006c80
    5aa0:	e000ed00 	.word	0xe000ed00
    5aa4:	2000504c 	.word	0x2000504c

00005aa8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5aa8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5aaa:	4c10      	ldr	r4, [pc, #64]	; (5aec <init_mem_slab_module+0x44>)
	int rc = 0;
    5aac:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5aae:	e008      	b.n	5ac2 <init_mem_slab_module+0x1a>
    5ab0:	4b0f      	ldr	r3, [pc, #60]	; (5af0 <init_mem_slab_module+0x48>)
    5ab2:	429c      	cmp	r4, r3
    5ab4:	d217      	bcs.n	5ae6 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    5ab6:	4620      	mov	r0, r4
    5ab8:	f003 fda3 	bl	9602 <create_free_list>
		if (rc < 0) {
    5abc:	1e05      	subs	r5, r0, #0
    5abe:	db12      	blt.n	5ae6 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5ac0:	3420      	adds	r4, #32
    5ac2:	4b0b      	ldr	r3, [pc, #44]	; (5af0 <init_mem_slab_module+0x48>)
    5ac4:	429c      	cmp	r4, r3
    5ac6:	d9f3      	bls.n	5ab0 <init_mem_slab_module+0x8>
    5ac8:	4e0a      	ldr	r6, [pc, #40]	; (5af4 <init_mem_slab_module+0x4c>)
    5aca:	233d      	movs	r3, #61	; 0x3d
    5acc:	4632      	mov	r2, r6
    5ace:	490a      	ldr	r1, [pc, #40]	; (5af8 <init_mem_slab_module+0x50>)
    5ad0:	480a      	ldr	r0, [pc, #40]	; (5afc <init_mem_slab_module+0x54>)
    5ad2:	f002 ffc2 	bl	8a5a <assert_print>
    5ad6:	480a      	ldr	r0, [pc, #40]	; (5b00 <init_mem_slab_module+0x58>)
    5ad8:	f002 ffbf 	bl	8a5a <assert_print>
    5adc:	213d      	movs	r1, #61	; 0x3d
    5ade:	4630      	mov	r0, r6
    5ae0:	f002 ffb4 	bl	8a4c <assert_post_action>
    5ae4:	e7e4      	b.n	5ab0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    5ae6:	4628      	mov	r0, r5
    5ae8:	bd70      	pop	{r4, r5, r6, pc}
    5aea:	bf00      	nop
    5aec:	2000415c 	.word	0x2000415c
    5af0:	2000415c 	.word	0x2000415c
    5af4:	0000a8b4 	.word	0x0000a8b4
    5af8:	0000a8dc 	.word	0x0000a8dc
    5afc:	00009cd0 	.word	0x00009cd0
    5b00:	0000a8fc 	.word	0x0000a8fc

00005b04 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b08:	b082      	sub	sp, #8
    5b0a:	4604      	mov	r4, r0
    5b0c:	460e      	mov	r6, r1
    5b0e:	4690      	mov	r8, r2
    5b10:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5b12:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5b16:	f04f 0320 	mov.w	r3, #32
    5b1a:	f3ef 8711 	mrs	r7, BASEPRI
    5b1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b26:	4628      	mov	r0, r5
    5b28:	f000 f8d8 	bl	5cdc <z_spin_lock_valid>
    5b2c:	b1c0      	cbz	r0, 5b60 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    5b2e:	4628      	mov	r0, r5
    5b30:	f000 f8f4 	bl	5d1c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5b34:	69a1      	ldr	r1, [r4, #24]
    5b36:	b321      	cbz	r1, 5b82 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    5b38:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5b3a:	69a3      	ldr	r3, [r4, #24]
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5b40:	69e3      	ldr	r3, [r4, #28]
    5b42:	3301      	adds	r3, #1
    5b44:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5b46:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b48:	4628      	mov	r0, r5
    5b4a:	f000 f8d7 	bl	5cfc <z_spin_unlock_valid>
    5b4e:	b388      	cbz	r0, 5bb4 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    5b50:	f387 8811 	msr	BASEPRI, r7
    5b54:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    5b58:	4620      	mov	r0, r4
    5b5a:	b002      	add	sp, #8
    5b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b60:	f8df a070 	ldr.w	sl, [pc, #112]	; 5bd4 <k_mem_slab_alloc+0xd0>
    5b64:	238e      	movs	r3, #142	; 0x8e
    5b66:	4652      	mov	r2, sl
    5b68:	491b      	ldr	r1, [pc, #108]	; (5bd8 <k_mem_slab_alloc+0xd4>)
    5b6a:	481c      	ldr	r0, [pc, #112]	; (5bdc <k_mem_slab_alloc+0xd8>)
    5b6c:	f002 ff75 	bl	8a5a <assert_print>
    5b70:	4629      	mov	r1, r5
    5b72:	481b      	ldr	r0, [pc, #108]	; (5be0 <k_mem_slab_alloc+0xdc>)
    5b74:	f002 ff71 	bl	8a5a <assert_print>
    5b78:	218e      	movs	r1, #142	; 0x8e
    5b7a:	4650      	mov	r0, sl
    5b7c:	f002 ff66 	bl	8a4c <assert_post_action>
    5b80:	e7d5      	b.n	5b2e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5b82:	ea59 0308 	orrs.w	r3, r9, r8
    5b86:	d104      	bne.n	5b92 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    5b88:	2300      	movs	r3, #0
    5b8a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5b8c:	f06f 040b 	mvn.w	r4, #11
    5b90:	e7da      	b.n	5b48 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5b92:	f8cd 8000 	str.w	r8, [sp]
    5b96:	f8cd 9004 	str.w	r9, [sp, #4]
    5b9a:	4622      	mov	r2, r4
    5b9c:	4639      	mov	r1, r7
    5b9e:	4628      	mov	r0, r5
    5ba0:	f001 fade 	bl	7160 <z_pend_curr>
		if (result == 0) {
    5ba4:	4604      	mov	r4, r0
    5ba6:	2800      	cmp	r0, #0
    5ba8:	d1d6      	bne.n	5b58 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5baa:	4b0e      	ldr	r3, [pc, #56]	; (5be4 <k_mem_slab_alloc+0xe0>)
    5bac:	689b      	ldr	r3, [r3, #8]
    5bae:	695b      	ldr	r3, [r3, #20]
    5bb0:	6033      	str	r3, [r6, #0]
		return result;
    5bb2:	e7d1      	b.n	5b58 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bb4:	4e07      	ldr	r6, [pc, #28]	; (5bd4 <k_mem_slab_alloc+0xd0>)
    5bb6:	23b9      	movs	r3, #185	; 0xb9
    5bb8:	4632      	mov	r2, r6
    5bba:	490b      	ldr	r1, [pc, #44]	; (5be8 <k_mem_slab_alloc+0xe4>)
    5bbc:	4807      	ldr	r0, [pc, #28]	; (5bdc <k_mem_slab_alloc+0xd8>)
    5bbe:	f002 ff4c 	bl	8a5a <assert_print>
    5bc2:	4629      	mov	r1, r5
    5bc4:	4809      	ldr	r0, [pc, #36]	; (5bec <k_mem_slab_alloc+0xe8>)
    5bc6:	f002 ff48 	bl	8a5a <assert_print>
    5bca:	21b9      	movs	r1, #185	; 0xb9
    5bcc:	4630      	mov	r0, r6
    5bce:	f002 ff3d 	bl	8a4c <assert_post_action>
    5bd2:	e7bd      	b.n	5b50 <k_mem_slab_alloc+0x4c>
    5bd4:	00009de8 	.word	0x00009de8
    5bd8:	00009e48 	.word	0x00009e48
    5bdc:	00009cd0 	.word	0x00009cd0
    5be0:	00009e60 	.word	0x00009e60
    5be4:	2000504c 	.word	0x2000504c
    5be8:	00009e18 	.word	0x00009e18
    5bec:	00009e30 	.word	0x00009e30

00005bf0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bf4:	4604      	mov	r4, r0
    5bf6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5bf8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    5bfc:	f04f 0320 	mov.w	r3, #32
    5c00:	f3ef 8711 	mrs	r7, BASEPRI
    5c04:	f383 8812 	msr	BASEPRI_MAX, r3
    5c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c0c:	4630      	mov	r0, r6
    5c0e:	f000 f865 	bl	5cdc <z_spin_lock_valid>
    5c12:	b1b0      	cbz	r0, 5c42 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    5c14:	4630      	mov	r0, r6
    5c16:	f000 f881 	bl	5d1c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5c1a:	69a3      	ldr	r3, [r4, #24]
    5c1c:	b313      	cbz	r3, 5c64 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    5c1e:	682b      	ldr	r3, [r5, #0]
    5c20:	69a2      	ldr	r2, [r4, #24]
    5c22:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5c24:	682b      	ldr	r3, [r5, #0]
    5c26:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5c28:	69e3      	ldr	r3, [r4, #28]
    5c2a:	3b01      	subs	r3, #1
    5c2c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c2e:	4630      	mov	r0, r6
    5c30:	f000 f864 	bl	5cfc <z_spin_unlock_valid>
    5c34:	b338      	cbz	r0, 5c86 <k_mem_slab_free+0x96>
	__asm__ volatile(
    5c36:	f387 8811 	msr	BASEPRI, r7
    5c3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c42:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5ca8 <k_mem_slab_free+0xb8>
    5c46:	238e      	movs	r3, #142	; 0x8e
    5c48:	4642      	mov	r2, r8
    5c4a:	4918      	ldr	r1, [pc, #96]	; (5cac <k_mem_slab_free+0xbc>)
    5c4c:	4818      	ldr	r0, [pc, #96]	; (5cb0 <k_mem_slab_free+0xc0>)
    5c4e:	f002 ff04 	bl	8a5a <assert_print>
    5c52:	4631      	mov	r1, r6
    5c54:	4817      	ldr	r0, [pc, #92]	; (5cb4 <k_mem_slab_free+0xc4>)
    5c56:	f002 ff00 	bl	8a5a <assert_print>
    5c5a:	218e      	movs	r1, #142	; 0x8e
    5c5c:	4640      	mov	r0, r8
    5c5e:	f002 fef5 	bl	8a4c <assert_post_action>
    5c62:	e7d7      	b.n	5c14 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5c64:	4620      	mov	r0, r4
    5c66:	f001 fcb7 	bl	75d8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5c6a:	2800      	cmp	r0, #0
    5c6c:	d0d7      	beq.n	5c1e <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5c6e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5c70:	2100      	movs	r1, #0
    5c72:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5c76:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    5c78:	f001 f896 	bl	6da8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5c7c:	4639      	mov	r1, r7
    5c7e:	4630      	mov	r0, r6
    5c80:	f000 fdee 	bl	6860 <z_reschedule>
			return;
    5c84:	e7db      	b.n	5c3e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c86:	4c08      	ldr	r4, [pc, #32]	; (5ca8 <k_mem_slab_free+0xb8>)
    5c88:	23b9      	movs	r3, #185	; 0xb9
    5c8a:	4622      	mov	r2, r4
    5c8c:	490a      	ldr	r1, [pc, #40]	; (5cb8 <k_mem_slab_free+0xc8>)
    5c8e:	4808      	ldr	r0, [pc, #32]	; (5cb0 <k_mem_slab_free+0xc0>)
    5c90:	f002 fee3 	bl	8a5a <assert_print>
    5c94:	4631      	mov	r1, r6
    5c96:	4809      	ldr	r0, [pc, #36]	; (5cbc <k_mem_slab_free+0xcc>)
    5c98:	f002 fedf 	bl	8a5a <assert_print>
    5c9c:	21b9      	movs	r1, #185	; 0xb9
    5c9e:	4620      	mov	r0, r4
    5ca0:	f002 fed4 	bl	8a4c <assert_post_action>
    5ca4:	e7c7      	b.n	5c36 <k_mem_slab_free+0x46>
    5ca6:	bf00      	nop
    5ca8:	00009de8 	.word	0x00009de8
    5cac:	00009e48 	.word	0x00009e48
    5cb0:	00009cd0 	.word	0x00009cd0
    5cb4:	00009e60 	.word	0x00009e60
    5cb8:	00009e18 	.word	0x00009e18
    5cbc:	00009e30 	.word	0x00009e30

00005cc0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    5cc0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5cc2:	ea53 0102 	orrs.w	r1, r3, r2
    5cc6:	d102      	bne.n	5cce <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    5cc8:	f003 fcd9 	bl	967e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    5ccc:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5cce:	4902      	ldr	r1, [pc, #8]	; (5cd8 <schedule_new_thread+0x18>)
    5cd0:	3018      	adds	r0, #24
    5cd2:	f001 ffb3 	bl	7c3c <z_add_timeout>
    5cd6:	e7f9      	b.n	5ccc <schedule_new_thread+0xc>
    5cd8:	00006f05 	.word	0x00006f05

00005cdc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5cdc:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    5cde:	b13b      	cbz	r3, 5cf0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5ce0:	f003 0303 	and.w	r3, r3, #3
    5ce4:	4a04      	ldr	r2, [pc, #16]	; (5cf8 <z_spin_lock_valid+0x1c>)
    5ce6:	7d12      	ldrb	r2, [r2, #20]
    5ce8:	4293      	cmp	r3, r2
    5cea:	d003      	beq.n	5cf4 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    5cec:	2001      	movs	r0, #1
    5cee:	4770      	bx	lr
    5cf0:	2001      	movs	r0, #1
    5cf2:	4770      	bx	lr
			return false;
    5cf4:	2000      	movs	r0, #0
}
    5cf6:	4770      	bx	lr
    5cf8:	2000504c 	.word	0x2000504c

00005cfc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5cfc:	6801      	ldr	r1, [r0, #0]
    5cfe:	4a06      	ldr	r2, [pc, #24]	; (5d18 <z_spin_unlock_valid+0x1c>)
    5d00:	7d13      	ldrb	r3, [r2, #20]
    5d02:	6892      	ldr	r2, [r2, #8]
    5d04:	4313      	orrs	r3, r2
    5d06:	4299      	cmp	r1, r3
    5d08:	d103      	bne.n	5d12 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    5d0a:	2300      	movs	r3, #0
    5d0c:	6003      	str	r3, [r0, #0]
	return true;
    5d0e:	2001      	movs	r0, #1
    5d10:	4770      	bx	lr
		return false;
    5d12:	2000      	movs	r0, #0
}
    5d14:	4770      	bx	lr
    5d16:	bf00      	nop
    5d18:	2000504c 	.word	0x2000504c

00005d1c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5d1c:	4a02      	ldr	r2, [pc, #8]	; (5d28 <z_spin_lock_set_owner+0xc>)
    5d1e:	7d13      	ldrb	r3, [r2, #20]
    5d20:	6892      	ldr	r2, [r2, #8]
    5d22:	4313      	orrs	r3, r2
    5d24:	6003      	str	r3, [r0, #0]
}
    5d26:	4770      	bx	lr
    5d28:	2000504c 	.word	0x2000504c

00005d2c <z_thread_monitor_exit>:
{
    5d2c:	b570      	push	{r4, r5, r6, lr}
    5d2e:	4604      	mov	r4, r0
	__asm__ volatile(
    5d30:	f04f 0320 	mov.w	r3, #32
    5d34:	f3ef 8511 	mrs	r5, BASEPRI
    5d38:	f383 8812 	msr	BASEPRI_MAX, r3
    5d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d40:	481f      	ldr	r0, [pc, #124]	; (5dc0 <z_thread_monitor_exit+0x94>)
    5d42:	f7ff ffcb 	bl	5cdc <z_spin_lock_valid>
    5d46:	b150      	cbz	r0, 5d5e <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    5d48:	481d      	ldr	r0, [pc, #116]	; (5dc0 <z_thread_monitor_exit+0x94>)
    5d4a:	f7ff ffe7 	bl	5d1c <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    5d4e:	4b1d      	ldr	r3, [pc, #116]	; (5dc4 <z_thread_monitor_exit+0x98>)
    5d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d52:	42a3      	cmp	r3, r4
    5d54:	d114      	bne.n	5d80 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    5d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5d58:	4b1a      	ldr	r3, [pc, #104]	; (5dc4 <z_thread_monitor_exit+0x98>)
    5d5a:	629a      	str	r2, [r3, #40]	; 0x28
    5d5c:	e017      	b.n	5d8e <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d5e:	4e1a      	ldr	r6, [pc, #104]	; (5dc8 <z_thread_monitor_exit+0x9c>)
    5d60:	238e      	movs	r3, #142	; 0x8e
    5d62:	4632      	mov	r2, r6
    5d64:	4919      	ldr	r1, [pc, #100]	; (5dcc <z_thread_monitor_exit+0xa0>)
    5d66:	481a      	ldr	r0, [pc, #104]	; (5dd0 <z_thread_monitor_exit+0xa4>)
    5d68:	f002 fe77 	bl	8a5a <assert_print>
    5d6c:	4914      	ldr	r1, [pc, #80]	; (5dc0 <z_thread_monitor_exit+0x94>)
    5d6e:	4819      	ldr	r0, [pc, #100]	; (5dd4 <z_thread_monitor_exit+0xa8>)
    5d70:	f002 fe73 	bl	8a5a <assert_print>
    5d74:	218e      	movs	r1, #142	; 0x8e
    5d76:	4630      	mov	r0, r6
    5d78:	f002 fe68 	bl	8a4c <assert_post_action>
    5d7c:	e7e4      	b.n	5d48 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    5d7e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    5d80:	b113      	cbz	r3, 5d88 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    5d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5d84:	42a2      	cmp	r2, r4
    5d86:	d1fa      	bne.n	5d7e <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    5d88:	b10b      	cbz	r3, 5d8e <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    5d8a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5d8c:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d8e:	480c      	ldr	r0, [pc, #48]	; (5dc0 <z_thread_monitor_exit+0x94>)
    5d90:	f7ff ffb4 	bl	5cfc <z_spin_unlock_valid>
    5d94:	b120      	cbz	r0, 5da0 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    5d96:	f385 8811 	msr	BASEPRI, r5
    5d9a:	f3bf 8f6f 	isb	sy
}
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
    5da0:	4c09      	ldr	r4, [pc, #36]	; (5dc8 <z_thread_monitor_exit+0x9c>)
    5da2:	23b9      	movs	r3, #185	; 0xb9
    5da4:	4622      	mov	r2, r4
    5da6:	490c      	ldr	r1, [pc, #48]	; (5dd8 <z_thread_monitor_exit+0xac>)
    5da8:	4809      	ldr	r0, [pc, #36]	; (5dd0 <z_thread_monitor_exit+0xa4>)
    5daa:	f002 fe56 	bl	8a5a <assert_print>
    5dae:	4904      	ldr	r1, [pc, #16]	; (5dc0 <z_thread_monitor_exit+0x94>)
    5db0:	480a      	ldr	r0, [pc, #40]	; (5ddc <z_thread_monitor_exit+0xb0>)
    5db2:	f002 fe52 	bl	8a5a <assert_print>
    5db6:	21b9      	movs	r1, #185	; 0xb9
    5db8:	4620      	mov	r0, r4
    5dba:	f002 fe47 	bl	8a4c <assert_post_action>
    5dbe:	e7ea      	b.n	5d96 <z_thread_monitor_exit+0x6a>
    5dc0:	20005078 	.word	0x20005078
    5dc4:	2000504c 	.word	0x2000504c
    5dc8:	00009de8 	.word	0x00009de8
    5dcc:	00009e48 	.word	0x00009e48
    5dd0:	00009cd0 	.word	0x00009cd0
    5dd4:	00009e60 	.word	0x00009e60
    5dd8:	00009e18 	.word	0x00009e18
    5ddc:	00009e30 	.word	0x00009e30

00005de0 <z_setup_new_thread>:
{
    5de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5de4:	b085      	sub	sp, #20
    5de6:	4604      	mov	r4, r0
    5de8:	460e      	mov	r6, r1
    5dea:	4690      	mov	r8, r2
    5dec:	461d      	mov	r5, r3
    5dee:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    5df2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    5df6:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    5df8:	2f0f      	cmp	r7, #15
    5dfa:	d05e      	beq.n	5eba <z_setup_new_thread+0xda>
    5dfc:	f107 0310 	add.w	r3, r7, #16
    5e00:	2b1e      	cmp	r3, #30
    5e02:	d85e      	bhi.n	5ec2 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5e04:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    5e08:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    5e0a:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    5e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5e0e:	2204      	movs	r2, #4
    5e10:	4639      	mov	r1, r7
    5e12:	4620      	mov	r0, r4
    5e14:	f003 fc37 	bl	9686 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    5e18:	4642      	mov	r2, r8
    5e1a:	4631      	mov	r1, r6
    5e1c:	4620      	mov	r0, r4
    5e1e:	f003 fc16 	bl	964e <setup_thread_stack>
    5e22:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e26:	9302      	str	r3, [sp, #8]
    5e28:	f8cd a004 	str.w	sl, [sp, #4]
    5e2c:	f8cd b000 	str.w	fp, [sp]
    5e30:	462b      	mov	r3, r5
    5e32:	4602      	mov	r2, r0
    5e34:	4631      	mov	r1, r6
    5e36:	4620      	mov	r0, r4
    5e38:	f7fc f8f8 	bl	202c <arch_new_thread>
	new_thread->init_data = NULL;
    5e3c:	2300      	movs	r3, #0
    5e3e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    5e40:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    5e42:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    5e46:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    5e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e4c:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    5e4e:	f04f 0320 	mov.w	r3, #32
    5e52:	f3ef 8611 	mrs	r6, BASEPRI
    5e56:	f383 8812 	msr	BASEPRI_MAX, r3
    5e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e5e:	4837      	ldr	r0, [pc, #220]	; (5f3c <z_setup_new_thread+0x15c>)
    5e60:	f7ff ff3c 	bl	5cdc <z_spin_lock_valid>
    5e64:	2800      	cmp	r0, #0
    5e66:	d042      	beq.n	5eee <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    5e68:	4d34      	ldr	r5, [pc, #208]	; (5f3c <z_setup_new_thread+0x15c>)
    5e6a:	4628      	mov	r0, r5
    5e6c:	f7ff ff56 	bl	5d1c <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    5e70:	4b33      	ldr	r3, [pc, #204]	; (5f40 <z_setup_new_thread+0x160>)
    5e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5e74:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    5e76:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e78:	4628      	mov	r0, r5
    5e7a:	f7ff ff3f 	bl	5cfc <z_spin_unlock_valid>
    5e7e:	2800      	cmp	r0, #0
    5e80:	d045      	beq.n	5f0e <z_setup_new_thread+0x12e>
	__asm__ volatile(
    5e82:	f386 8811 	msr	BASEPRI, r6
    5e86:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    5e8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d04e      	beq.n	5f2e <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    5e90:	221f      	movs	r2, #31
    5e92:	4619      	mov	r1, r3
    5e94:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5e98:	f002 febd 	bl	8c16 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    5e9c:	2300      	movs	r3, #0
    5e9e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    5ea2:	4b27      	ldr	r3, [pc, #156]	; (5f40 <z_setup_new_thread+0x160>)
    5ea4:	689b      	ldr	r3, [r3, #8]
    5ea6:	2b00      	cmp	r3, #0
    5ea8:	d045      	beq.n	5f36 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    5eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5eae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    5eb2:	4638      	mov	r0, r7
    5eb4:	b005      	add	sp, #20
    5eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5eba:	4b22      	ldr	r3, [pc, #136]	; (5f44 <z_setup_new_thread+0x164>)
    5ebc:	429d      	cmp	r5, r3
    5ebe:	d19d      	bne.n	5dfc <z_setup_new_thread+0x1c>
    5ec0:	e7a0      	b.n	5e04 <z_setup_new_thread+0x24>
    5ec2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5f48 <z_setup_new_thread+0x168>
    5ec6:	f240 13ff 	movw	r3, #511	; 0x1ff
    5eca:	464a      	mov	r2, r9
    5ecc:	491f      	ldr	r1, [pc, #124]	; (5f4c <z_setup_new_thread+0x16c>)
    5ece:	4820      	ldr	r0, [pc, #128]	; (5f50 <z_setup_new_thread+0x170>)
    5ed0:	f002 fdc3 	bl	8a5a <assert_print>
    5ed4:	f06f 030f 	mvn.w	r3, #15
    5ed8:	220e      	movs	r2, #14
    5eda:	4639      	mov	r1, r7
    5edc:	481d      	ldr	r0, [pc, #116]	; (5f54 <z_setup_new_thread+0x174>)
    5ede:	f002 fdbc 	bl	8a5a <assert_print>
    5ee2:	f240 11ff 	movw	r1, #511	; 0x1ff
    5ee6:	4648      	mov	r0, r9
    5ee8:	f002 fdb0 	bl	8a4c <assert_post_action>
    5eec:	e78a      	b.n	5e04 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5eee:	4d1a      	ldr	r5, [pc, #104]	; (5f58 <z_setup_new_thread+0x178>)
    5ef0:	238e      	movs	r3, #142	; 0x8e
    5ef2:	462a      	mov	r2, r5
    5ef4:	4919      	ldr	r1, [pc, #100]	; (5f5c <z_setup_new_thread+0x17c>)
    5ef6:	4816      	ldr	r0, [pc, #88]	; (5f50 <z_setup_new_thread+0x170>)
    5ef8:	f002 fdaf 	bl	8a5a <assert_print>
    5efc:	490f      	ldr	r1, [pc, #60]	; (5f3c <z_setup_new_thread+0x15c>)
    5efe:	4818      	ldr	r0, [pc, #96]	; (5f60 <z_setup_new_thread+0x180>)
    5f00:	f002 fdab 	bl	8a5a <assert_print>
    5f04:	218e      	movs	r1, #142	; 0x8e
    5f06:	4628      	mov	r0, r5
    5f08:	f002 fda0 	bl	8a4c <assert_post_action>
    5f0c:	e7ac      	b.n	5e68 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f0e:	4d12      	ldr	r5, [pc, #72]	; (5f58 <z_setup_new_thread+0x178>)
    5f10:	23b9      	movs	r3, #185	; 0xb9
    5f12:	462a      	mov	r2, r5
    5f14:	4913      	ldr	r1, [pc, #76]	; (5f64 <z_setup_new_thread+0x184>)
    5f16:	480e      	ldr	r0, [pc, #56]	; (5f50 <z_setup_new_thread+0x170>)
    5f18:	f002 fd9f 	bl	8a5a <assert_print>
    5f1c:	4907      	ldr	r1, [pc, #28]	; (5f3c <z_setup_new_thread+0x15c>)
    5f1e:	4812      	ldr	r0, [pc, #72]	; (5f68 <z_setup_new_thread+0x188>)
    5f20:	f002 fd9b 	bl	8a5a <assert_print>
    5f24:	21b9      	movs	r1, #185	; 0xb9
    5f26:	4628      	mov	r0, r5
    5f28:	f002 fd90 	bl	8a4c <assert_post_action>
    5f2c:	e7a9      	b.n	5e82 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    5f2e:	2300      	movs	r3, #0
    5f30:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    5f34:	e7b5      	b.n	5ea2 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    5f36:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    5f3a:	e7ba      	b.n	5eb2 <z_setup_new_thread+0xd2>
    5f3c:	20005078 	.word	0x20005078
    5f40:	2000504c 	.word	0x2000504c
    5f44:	000060f5 	.word	0x000060f5
    5f48:	0000a91c 	.word	0x0000a91c
    5f4c:	0000a974 	.word	0x0000a974
    5f50:	00009cd0 	.word	0x00009cd0
    5f54:	0000a9f4 	.word	0x0000a9f4
    5f58:	00009de8 	.word	0x00009de8
    5f5c:	00009e48 	.word	0x00009e48
    5f60:	00009e60 	.word	0x00009e60
    5f64:	00009e18 	.word	0x00009e18
    5f68:	00009e30 	.word	0x00009e30

00005f6c <z_impl_k_thread_create>:
{
    5f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f70:	b086      	sub	sp, #24
    5f72:	4604      	mov	r4, r0
    5f74:	460d      	mov	r5, r1
    5f76:	4616      	mov	r6, r2
    5f78:	461f      	mov	r7, r3
    5f7a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    5f7e:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f82:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5f86:	b9db      	cbnz	r3, 5fc0 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5f88:	2300      	movs	r3, #0
    5f8a:	9305      	str	r3, [sp, #20]
    5f8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5f8e:	9304      	str	r3, [sp, #16]
    5f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f92:	9303      	str	r3, [sp, #12]
    5f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5f96:	9302      	str	r3, [sp, #8]
    5f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5f9a:	9301      	str	r3, [sp, #4]
    5f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5f9e:	9300      	str	r3, [sp, #0]
    5fa0:	463b      	mov	r3, r7
    5fa2:	4632      	mov	r2, r6
    5fa4:	4629      	mov	r1, r5
    5fa6:	4620      	mov	r0, r4
    5fa8:	f7ff ff1a 	bl	5de0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5fac:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    5fb0:	bf08      	it	eq
    5fb2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    5fb6:	d115      	bne.n	5fe4 <z_impl_k_thread_create+0x78>
}
    5fb8:	4620      	mov	r0, r4
    5fba:	b006      	add	sp, #24
    5fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5fc0:	f8df a02c 	ldr.w	sl, [pc, #44]	; 5ff0 <z_impl_k_thread_create+0x84>
    5fc4:	f240 236e 	movw	r3, #622	; 0x26e
    5fc8:	4652      	mov	r2, sl
    5fca:	490a      	ldr	r1, [pc, #40]	; (5ff4 <z_impl_k_thread_create+0x88>)
    5fcc:	480a      	ldr	r0, [pc, #40]	; (5ff8 <z_impl_k_thread_create+0x8c>)
    5fce:	f002 fd44 	bl	8a5a <assert_print>
    5fd2:	480a      	ldr	r0, [pc, #40]	; (5ffc <z_impl_k_thread_create+0x90>)
    5fd4:	f002 fd41 	bl	8a5a <assert_print>
    5fd8:	f240 216e 	movw	r1, #622	; 0x26e
    5fdc:	4650      	mov	r0, sl
    5fde:	f002 fd35 	bl	8a4c <assert_post_action>
    5fe2:	e7d1      	b.n	5f88 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    5fe4:	464a      	mov	r2, r9
    5fe6:	4643      	mov	r3, r8
    5fe8:	4620      	mov	r0, r4
    5fea:	f7ff fe69 	bl	5cc0 <schedule_new_thread>
    5fee:	e7e3      	b.n	5fb8 <z_impl_k_thread_create+0x4c>
    5ff0:	0000a91c 	.word	0x0000a91c
    5ff4:	0000aa28 	.word	0x0000aa28
    5ff8:	00009cd0 	.word	0x00009cd0
    5ffc:	0000aa3c 	.word	0x0000aa3c

00006000 <z_init_static_threads>:
{
    6000:	b530      	push	{r4, r5, lr}
    6002:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6004:	4c35      	ldr	r4, [pc, #212]	; (60dc <z_init_static_threads+0xdc>)
    6006:	e017      	b.n	6038 <z_init_static_threads+0x38>
    6008:	4b35      	ldr	r3, [pc, #212]	; (60e0 <z_init_static_threads+0xe0>)
    600a:	429c      	cmp	r4, r3
    600c:	d228      	bcs.n	6060 <z_init_static_threads+0x60>
		z_setup_new_thread(
    600e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6010:	9305      	str	r3, [sp, #20]
    6012:	6a23      	ldr	r3, [r4, #32]
    6014:	9304      	str	r3, [sp, #16]
    6016:	69e3      	ldr	r3, [r4, #28]
    6018:	9303      	str	r3, [sp, #12]
    601a:	69a3      	ldr	r3, [r4, #24]
    601c:	9302      	str	r3, [sp, #8]
    601e:	6963      	ldr	r3, [r4, #20]
    6020:	9301      	str	r3, [sp, #4]
    6022:	6923      	ldr	r3, [r4, #16]
    6024:	9300      	str	r3, [sp, #0]
    6026:	68e3      	ldr	r3, [r4, #12]
    6028:	68a2      	ldr	r2, [r4, #8]
    602a:	6861      	ldr	r1, [r4, #4]
    602c:	6820      	ldr	r0, [r4, #0]
    602e:	f7ff fed7 	bl	5de0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6032:	6823      	ldr	r3, [r4, #0]
    6034:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6036:	3430      	adds	r4, #48	; 0x30
    6038:	4b29      	ldr	r3, [pc, #164]	; (60e0 <z_init_static_threads+0xe0>)
    603a:	429c      	cmp	r4, r3
    603c:	d9e4      	bls.n	6008 <z_init_static_threads+0x8>
    603e:	4d29      	ldr	r5, [pc, #164]	; (60e4 <z_init_static_threads+0xe4>)
    6040:	f240 23d5 	movw	r3, #725	; 0x2d5
    6044:	462a      	mov	r2, r5
    6046:	4928      	ldr	r1, [pc, #160]	; (60e8 <z_init_static_threads+0xe8>)
    6048:	4828      	ldr	r0, [pc, #160]	; (60ec <z_init_static_threads+0xec>)
    604a:	f002 fd06 	bl	8a5a <assert_print>
    604e:	4828      	ldr	r0, [pc, #160]	; (60f0 <z_init_static_threads+0xf0>)
    6050:	f002 fd03 	bl	8a5a <assert_print>
    6054:	f240 21d5 	movw	r1, #725	; 0x2d5
    6058:	4628      	mov	r0, r5
    605a:	f002 fcf7 	bl	8a4c <assert_post_action>
    605e:	e7d3      	b.n	6008 <z_init_static_threads+0x8>
	k_sched_lock();
    6060:	f000 fc4c 	bl	68fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6064:	4c1d      	ldr	r4, [pc, #116]	; (60dc <z_init_static_threads+0xdc>)
    6066:	e000      	b.n	606a <z_init_static_threads+0x6a>
    6068:	3430      	adds	r4, #48	; 0x30
    606a:	4b1d      	ldr	r3, [pc, #116]	; (60e0 <z_init_static_threads+0xe0>)
    606c:	429c      	cmp	r4, r3
    606e:	d81f      	bhi.n	60b0 <z_init_static_threads+0xb0>
    6070:	4b1b      	ldr	r3, [pc, #108]	; (60e0 <z_init_static_threads+0xe0>)
    6072:	429c      	cmp	r4, r3
    6074:	d22d      	bcs.n	60d2 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6076:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6078:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    607c:	d0f4      	beq.n	6068 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    607e:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    6080:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6084:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    6086:	03c9      	lsls	r1, r1, #15
    6088:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    608c:	03c0      	lsls	r0, r0, #15
    608e:	f240 33e7 	movw	r3, #999	; 0x3e7
    6092:	18c0      	adds	r0, r0, r3
    6094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6098:	f04f 0300 	mov.w	r3, #0
    609c:	f141 0100 	adc.w	r1, r1, #0
    60a0:	f7fa f82e 	bl	100 <__aeabi_uldivmod>
    60a4:	4602      	mov	r2, r0
    60a6:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    60a8:	4628      	mov	r0, r5
    60aa:	f7ff fe09 	bl	5cc0 <schedule_new_thread>
    60ae:	e7db      	b.n	6068 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    60b0:	4d0c      	ldr	r5, [pc, #48]	; (60e4 <z_init_static_threads+0xe4>)
    60b2:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    60b6:	462a      	mov	r2, r5
    60b8:	490b      	ldr	r1, [pc, #44]	; (60e8 <z_init_static_threads+0xe8>)
    60ba:	480c      	ldr	r0, [pc, #48]	; (60ec <z_init_static_threads+0xec>)
    60bc:	f002 fccd 	bl	8a5a <assert_print>
    60c0:	480b      	ldr	r0, [pc, #44]	; (60f0 <z_init_static_threads+0xf0>)
    60c2:	f002 fcca 	bl	8a5a <assert_print>
    60c6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    60ca:	4628      	mov	r0, r5
    60cc:	f002 fcbe 	bl	8a4c <assert_post_action>
    60d0:	e7ce      	b.n	6070 <z_init_static_threads+0x70>
	k_sched_unlock();
    60d2:	f001 f99f 	bl	7414 <k_sched_unlock>
}
    60d6:	b007      	add	sp, #28
    60d8:	bd30      	pop	{r4, r5, pc}
    60da:	bf00      	nop
    60dc:	2000415c 	.word	0x2000415c
    60e0:	2000415c 	.word	0x2000415c
    60e4:	0000a91c 	.word	0x0000a91c
    60e8:	0000aa64 	.word	0x0000aa64
    60ec:	00009cd0 	.word	0x00009cd0
    60f0:	0000a8fc 	.word	0x0000a8fc

000060f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    60f4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    60f6:	4b14      	ldr	r3, [pc, #80]	; (6148 <idle+0x54>)
    60f8:	689b      	ldr	r3, [r3, #8]
    60fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    60fe:	2b00      	cmp	r3, #0
    6100:	da0d      	bge.n	611e <idle+0x2a>
    6102:	4c12      	ldr	r4, [pc, #72]	; (614c <idle+0x58>)
    6104:	2327      	movs	r3, #39	; 0x27
    6106:	4622      	mov	r2, r4
    6108:	4911      	ldr	r1, [pc, #68]	; (6150 <idle+0x5c>)
    610a:	4812      	ldr	r0, [pc, #72]	; (6154 <idle+0x60>)
    610c:	f002 fca5 	bl	8a5a <assert_print>
    6110:	2127      	movs	r1, #39	; 0x27
    6112:	4620      	mov	r0, r4
    6114:	f002 fc9a 	bl	8a4c <assert_post_action>
    6118:	e001      	b.n	611e <idle+0x2a>
	arch_cpu_idle();
    611a:	f7fb fea5 	bl	1e68 <arch_cpu_idle>
	__asm__ volatile(
    611e:	f04f 0220 	mov.w	r2, #32
    6122:	f3ef 8311 	mrs	r3, BASEPRI
    6126:	f382 8812 	msr	BASEPRI_MAX, r2
    612a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    612e:	f001 fec3 	bl	7eb8 <z_get_next_timeout_expiry>
    6132:	4b05      	ldr	r3, [pc, #20]	; (6148 <idle+0x54>)
    6134:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    6136:	4b08      	ldr	r3, [pc, #32]	; (6158 <idle+0x64>)
    6138:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    613a:	2b00      	cmp	r3, #0
    613c:	d0ed      	beq.n	611a <idle+0x26>
    613e:	f7fb fc5f 	bl	1a00 <pm_system_suspend>
    6142:	2800      	cmp	r0, #0
    6144:	d1eb      	bne.n	611e <idle+0x2a>
    6146:	e7e8      	b.n	611a <idle+0x26>
    6148:	2000504c 	.word	0x2000504c
    614c:	0000aa94 	.word	0x0000aa94
    6150:	0000aab8 	.word	0x0000aab8
    6154:	00009cd0 	.word	0x00009cd0
    6158:	20005275 	.word	0x20005275

0000615c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    615c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6160:	b083      	sub	sp, #12
    6162:	4604      	mov	r4, r0
    6164:	4616      	mov	r6, r2
    6166:	461d      	mov	r5, r3
    6168:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    616c:	2900      	cmp	r1, #0
    616e:	d12b      	bne.n	61c8 <z_impl_k_mutex_lock+0x6c>
    6170:	f04f 0320 	mov.w	r3, #32
    6174:	f3ef 8711 	mrs	r7, BASEPRI
    6178:	f383 8812 	msr	BASEPRI_MAX, r3
    617c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6180:	487b      	ldr	r0, [pc, #492]	; (6370 <z_impl_k_mutex_lock+0x214>)
    6182:	f7ff fdab 	bl	5cdc <z_spin_lock_valid>
    6186:	2800      	cmp	r0, #0
    6188:	d02d      	beq.n	61e6 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    618a:	4879      	ldr	r0, [pc, #484]	; (6370 <z_impl_k_mutex_lock+0x214>)
    618c:	f7ff fdc6 	bl	5d1c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6190:	68e1      	ldr	r1, [r4, #12]
    6192:	2900      	cmp	r1, #0
    6194:	d138      	bne.n	6208 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    6196:	2900      	cmp	r1, #0
    6198:	d17d      	bne.n	6296 <z_impl_k_mutex_lock+0x13a>
    619a:	4b76      	ldr	r3, [pc, #472]	; (6374 <z_impl_k_mutex_lock+0x218>)
    619c:	689b      	ldr	r3, [r3, #8]
    619e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    61a2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    61a4:	3101      	adds	r1, #1
    61a6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    61a8:	4b72      	ldr	r3, [pc, #456]	; (6374 <z_impl_k_mutex_lock+0x218>)
    61aa:	689b      	ldr	r3, [r3, #8]
    61ac:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61ae:	4870      	ldr	r0, [pc, #448]	; (6370 <z_impl_k_mutex_lock+0x214>)
    61b0:	f7ff fda4 	bl	5cfc <z_spin_unlock_valid>
    61b4:	2800      	cmp	r0, #0
    61b6:	d070      	beq.n	629a <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    61b8:	f387 8811 	msr	BASEPRI, r7
    61bc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    61c0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    61c2:	b003      	add	sp, #12
    61c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    61c8:	4f6b      	ldr	r7, [pc, #428]	; (6378 <z_impl_k_mutex_lock+0x21c>)
    61ca:	2365      	movs	r3, #101	; 0x65
    61cc:	463a      	mov	r2, r7
    61ce:	496b      	ldr	r1, [pc, #428]	; (637c <z_impl_k_mutex_lock+0x220>)
    61d0:	486b      	ldr	r0, [pc, #428]	; (6380 <z_impl_k_mutex_lock+0x224>)
    61d2:	f002 fc42 	bl	8a5a <assert_print>
    61d6:	486b      	ldr	r0, [pc, #428]	; (6384 <z_impl_k_mutex_lock+0x228>)
    61d8:	f002 fc3f 	bl	8a5a <assert_print>
    61dc:	2165      	movs	r1, #101	; 0x65
    61de:	4638      	mov	r0, r7
    61e0:	f002 fc34 	bl	8a4c <assert_post_action>
    61e4:	e7c4      	b.n	6170 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 6388 <z_impl_k_mutex_lock+0x22c>
    61ea:	238e      	movs	r3, #142	; 0x8e
    61ec:	4642      	mov	r2, r8
    61ee:	4967      	ldr	r1, [pc, #412]	; (638c <z_impl_k_mutex_lock+0x230>)
    61f0:	4863      	ldr	r0, [pc, #396]	; (6380 <z_impl_k_mutex_lock+0x224>)
    61f2:	f002 fc32 	bl	8a5a <assert_print>
    61f6:	495e      	ldr	r1, [pc, #376]	; (6370 <z_impl_k_mutex_lock+0x214>)
    61f8:	4865      	ldr	r0, [pc, #404]	; (6390 <z_impl_k_mutex_lock+0x234>)
    61fa:	f002 fc2e 	bl	8a5a <assert_print>
    61fe:	218e      	movs	r1, #142	; 0x8e
    6200:	4640      	mov	r0, r8
    6202:	f002 fc23 	bl	8a4c <assert_post_action>
    6206:	e7c0      	b.n	618a <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6208:	68a2      	ldr	r2, [r4, #8]
    620a:	4b5a      	ldr	r3, [pc, #360]	; (6374 <z_impl_k_mutex_lock+0x218>)
    620c:	689b      	ldr	r3, [r3, #8]
    620e:	429a      	cmp	r2, r3
    6210:	d0c1      	beq.n	6196 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6212:	ea55 0106 	orrs.w	r1, r5, r6
    6216:	bf0c      	ite	eq
    6218:	f04f 0801 	moveq.w	r8, #1
    621c:	f04f 0800 	movne.w	r8, #0
    6220:	d04b      	beq.n	62ba <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    6222:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6226:	4649      	mov	r1, r9
    6228:	f993 000e 	ldrsb.w	r0, [r3, #14]
    622c:	f003 fa3c 	bl	96a8 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6230:	4581      	cmp	r9, r0
    6232:	dc5d      	bgt.n	62f0 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    6234:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6238:	9600      	str	r6, [sp, #0]
    623a:	9501      	str	r5, [sp, #4]
    623c:	4622      	mov	r2, r4
    623e:	4639      	mov	r1, r7
    6240:	484b      	ldr	r0, [pc, #300]	; (6370 <z_impl_k_mutex_lock+0x214>)
    6242:	f000 ff8d 	bl	7160 <z_pend_curr>
	if (got_mutex == 0) {
    6246:	2800      	cmp	r0, #0
    6248:	d0bb      	beq.n	61c2 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    624a:	f04f 0320 	mov.w	r3, #32
    624e:	f3ef 8511 	mrs	r5, BASEPRI
    6252:	f383 8812 	msr	BASEPRI_MAX, r3
    6256:	f3bf 8f6f 	isb	sy
    625a:	4845      	ldr	r0, [pc, #276]	; (6370 <z_impl_k_mutex_lock+0x214>)
    625c:	f7ff fd3e 	bl	5cdc <z_spin_lock_valid>
    6260:	2800      	cmp	r0, #0
    6262:	d04b      	beq.n	62fc <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    6264:	4842      	ldr	r0, [pc, #264]	; (6370 <z_impl_k_mutex_lock+0x214>)
    6266:	f7ff fd59 	bl	5d1c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    626a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    626c:	429c      	cmp	r4, r3
    626e:	d055      	beq.n	631c <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6270:	2b00      	cmp	r3, #0
    6272:	d053      	beq.n	631c <z_impl_k_mutex_lock+0x1c0>
    6274:	6921      	ldr	r1, [r4, #16]
    6276:	f993 000e 	ldrsb.w	r0, [r3, #14]
    627a:	f003 fa15 	bl	96a8 <new_prio_for_inheritance>
    627e:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6280:	4620      	mov	r0, r4
    6282:	f003 fa1c 	bl	96be <adjust_owner_prio>
    6286:	2800      	cmp	r0, #0
    6288:	d14a      	bne.n	6320 <z_impl_k_mutex_lock+0x1c4>
    628a:	f1b9 0f00 	cmp.w	r9, #0
    628e:	d049      	beq.n	6324 <z_impl_k_mutex_lock+0x1c8>
    6290:	f04f 0801 	mov.w	r8, #1
    6294:	e046      	b.n	6324 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    6296:	6923      	ldr	r3, [r4, #16]
    6298:	e783      	b.n	61a2 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    629a:	4c3b      	ldr	r4, [pc, #236]	; (6388 <z_impl_k_mutex_lock+0x22c>)
    629c:	23b9      	movs	r3, #185	; 0xb9
    629e:	4622      	mov	r2, r4
    62a0:	493c      	ldr	r1, [pc, #240]	; (6394 <z_impl_k_mutex_lock+0x238>)
    62a2:	4837      	ldr	r0, [pc, #220]	; (6380 <z_impl_k_mutex_lock+0x224>)
    62a4:	f002 fbd9 	bl	8a5a <assert_print>
    62a8:	4931      	ldr	r1, [pc, #196]	; (6370 <z_impl_k_mutex_lock+0x214>)
    62aa:	483b      	ldr	r0, [pc, #236]	; (6398 <z_impl_k_mutex_lock+0x23c>)
    62ac:	f002 fbd5 	bl	8a5a <assert_print>
    62b0:	21b9      	movs	r1, #185	; 0xb9
    62b2:	4620      	mov	r0, r4
    62b4:	f002 fbca 	bl	8a4c <assert_post_action>
    62b8:	e77e      	b.n	61b8 <z_impl_k_mutex_lock+0x5c>
    62ba:	482d      	ldr	r0, [pc, #180]	; (6370 <z_impl_k_mutex_lock+0x214>)
    62bc:	f7ff fd1e 	bl	5cfc <z_spin_unlock_valid>
    62c0:	b130      	cbz	r0, 62d0 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    62c2:	f387 8811 	msr	BASEPRI, r7
    62c6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    62ca:	f06f 000f 	mvn.w	r0, #15
    62ce:	e778      	b.n	61c2 <z_impl_k_mutex_lock+0x66>
    62d0:	4c2d      	ldr	r4, [pc, #180]	; (6388 <z_impl_k_mutex_lock+0x22c>)
    62d2:	23b9      	movs	r3, #185	; 0xb9
    62d4:	4622      	mov	r2, r4
    62d6:	492f      	ldr	r1, [pc, #188]	; (6394 <z_impl_k_mutex_lock+0x238>)
    62d8:	4829      	ldr	r0, [pc, #164]	; (6380 <z_impl_k_mutex_lock+0x224>)
    62da:	f002 fbbe 	bl	8a5a <assert_print>
    62de:	4924      	ldr	r1, [pc, #144]	; (6370 <z_impl_k_mutex_lock+0x214>)
    62e0:	482d      	ldr	r0, [pc, #180]	; (6398 <z_impl_k_mutex_lock+0x23c>)
    62e2:	f002 fbba 	bl	8a5a <assert_print>
    62e6:	21b9      	movs	r1, #185	; 0xb9
    62e8:	4620      	mov	r0, r4
    62ea:	f002 fbaf 	bl	8a4c <assert_post_action>
    62ee:	e7e8      	b.n	62c2 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    62f0:	4601      	mov	r1, r0
    62f2:	4620      	mov	r0, r4
    62f4:	f003 f9e3 	bl	96be <adjust_owner_prio>
    62f8:	4681      	mov	r9, r0
    62fa:	e79d      	b.n	6238 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62fc:	4e22      	ldr	r6, [pc, #136]	; (6388 <z_impl_k_mutex_lock+0x22c>)
    62fe:	238e      	movs	r3, #142	; 0x8e
    6300:	4632      	mov	r2, r6
    6302:	4922      	ldr	r1, [pc, #136]	; (638c <z_impl_k_mutex_lock+0x230>)
    6304:	481e      	ldr	r0, [pc, #120]	; (6380 <z_impl_k_mutex_lock+0x224>)
    6306:	f002 fba8 	bl	8a5a <assert_print>
    630a:	4919      	ldr	r1, [pc, #100]	; (6370 <z_impl_k_mutex_lock+0x214>)
    630c:	4820      	ldr	r0, [pc, #128]	; (6390 <z_impl_k_mutex_lock+0x234>)
    630e:	f002 fba4 	bl	8a5a <assert_print>
    6312:	218e      	movs	r1, #142	; 0x8e
    6314:	4630      	mov	r0, r6
    6316:	f002 fb99 	bl	8a4c <assert_post_action>
    631a:	e7a3      	b.n	6264 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    631c:	6921      	ldr	r1, [r4, #16]
    631e:	e7af      	b.n	6280 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6320:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    6324:	f1b8 0f00 	cmp.w	r8, #0
    6328:	d006      	beq.n	6338 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    632a:	4629      	mov	r1, r5
    632c:	4810      	ldr	r0, [pc, #64]	; (6370 <z_impl_k_mutex_lock+0x214>)
    632e:	f000 fa97 	bl	6860 <z_reschedule>
	return -EAGAIN;
    6332:	f06f 000a 	mvn.w	r0, #10
    6336:	e744      	b.n	61c2 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6338:	480d      	ldr	r0, [pc, #52]	; (6370 <z_impl_k_mutex_lock+0x214>)
    633a:	f7ff fcdf 	bl	5cfc <z_spin_unlock_valid>
    633e:	b130      	cbz	r0, 634e <z_impl_k_mutex_lock+0x1f2>
    6340:	f385 8811 	msr	BASEPRI, r5
    6344:	f3bf 8f6f 	isb	sy
    6348:	f06f 000a 	mvn.w	r0, #10
    634c:	e739      	b.n	61c2 <z_impl_k_mutex_lock+0x66>
    634e:	4c0e      	ldr	r4, [pc, #56]	; (6388 <z_impl_k_mutex_lock+0x22c>)
    6350:	23b9      	movs	r3, #185	; 0xb9
    6352:	4622      	mov	r2, r4
    6354:	490f      	ldr	r1, [pc, #60]	; (6394 <z_impl_k_mutex_lock+0x238>)
    6356:	480a      	ldr	r0, [pc, #40]	; (6380 <z_impl_k_mutex_lock+0x224>)
    6358:	f002 fb7f 	bl	8a5a <assert_print>
    635c:	4904      	ldr	r1, [pc, #16]	; (6370 <z_impl_k_mutex_lock+0x214>)
    635e:	480e      	ldr	r0, [pc, #56]	; (6398 <z_impl_k_mutex_lock+0x23c>)
    6360:	f002 fb7b 	bl	8a5a <assert_print>
    6364:	21b9      	movs	r1, #185	; 0xb9
    6366:	4620      	mov	r0, r4
    6368:	f002 fb70 	bl	8a4c <assert_post_action>
    636c:	e7e8      	b.n	6340 <z_impl_k_mutex_lock+0x1e4>
    636e:	bf00      	nop
    6370:	2000507c 	.word	0x2000507c
    6374:	2000504c 	.word	0x2000504c
    6378:	0000aae0 	.word	0x0000aae0
    637c:	0000aa28 	.word	0x0000aa28
    6380:	00009cd0 	.word	0x00009cd0
    6384:	0000ab04 	.word	0x0000ab04
    6388:	00009de8 	.word	0x00009de8
    638c:	00009e48 	.word	0x00009e48
    6390:	00009e60 	.word	0x00009e60
    6394:	00009e18 	.word	0x00009e18
    6398:	00009e30 	.word	0x00009e30

0000639c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    639c:	b570      	push	{r4, r5, r6, lr}
    639e:	4604      	mov	r4, r0
    63a0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    63a4:	bb03      	cbnz	r3, 63e8 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    63a6:	68a3      	ldr	r3, [r4, #8]
    63a8:	2b00      	cmp	r3, #0
    63aa:	f000 80a6 	beq.w	64fa <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    63ae:	4a56      	ldr	r2, [pc, #344]	; (6508 <z_impl_k_mutex_unlock+0x16c>)
    63b0:	6892      	ldr	r2, [r2, #8]
    63b2:	4293      	cmp	r3, r2
    63b4:	f040 80a4 	bne.w	6500 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    63b8:	68e3      	ldr	r3, [r4, #12]
    63ba:	b323      	cbz	r3, 6406 <z_impl_k_mutex_unlock+0x6a>
    63bc:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    63c0:	bb6b      	cbnz	r3, 641e <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    63c2:	4b51      	ldr	r3, [pc, #324]	; (6508 <z_impl_k_mutex_unlock+0x16c>)
    63c4:	689b      	ldr	r3, [r3, #8]
    63c6:	7bdb      	ldrb	r3, [r3, #15]
    63c8:	2b01      	cmp	r3, #1
    63ca:	d037      	beq.n	643c <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    63cc:	4b4e      	ldr	r3, [pc, #312]	; (6508 <z_impl_k_mutex_unlock+0x16c>)
    63ce:	689a      	ldr	r2, [r3, #8]
    63d0:	7bd3      	ldrb	r3, [r2, #15]
    63d2:	3b01      	subs	r3, #1
    63d4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    63d6:	68e3      	ldr	r3, [r4, #12]
    63d8:	2b01      	cmp	r3, #1
    63da:	d93e      	bls.n	645a <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    63dc:	3b01      	subs	r3, #1
    63de:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    63e0:	f001 f818 	bl	7414 <k_sched_unlock>

	return 0;
    63e4:	2000      	movs	r0, #0
}
    63e6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    63e8:	4d48      	ldr	r5, [pc, #288]	; (650c <z_impl_k_mutex_unlock+0x170>)
    63ea:	23c7      	movs	r3, #199	; 0xc7
    63ec:	462a      	mov	r2, r5
    63ee:	4948      	ldr	r1, [pc, #288]	; (6510 <z_impl_k_mutex_unlock+0x174>)
    63f0:	4848      	ldr	r0, [pc, #288]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    63f2:	f002 fb32 	bl	8a5a <assert_print>
    63f6:	4848      	ldr	r0, [pc, #288]	; (6518 <z_impl_k_mutex_unlock+0x17c>)
    63f8:	f002 fb2f 	bl	8a5a <assert_print>
    63fc:	21c7      	movs	r1, #199	; 0xc7
    63fe:	4628      	mov	r0, r5
    6400:	f002 fb24 	bl	8a4c <assert_post_action>
    6404:	e7cf      	b.n	63a6 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6406:	4d41      	ldr	r5, [pc, #260]	; (650c <z_impl_k_mutex_unlock+0x170>)
    6408:	23df      	movs	r3, #223	; 0xdf
    640a:	462a      	mov	r2, r5
    640c:	4943      	ldr	r1, [pc, #268]	; (651c <z_impl_k_mutex_unlock+0x180>)
    640e:	4841      	ldr	r0, [pc, #260]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    6410:	f002 fb23 	bl	8a5a <assert_print>
    6414:	21df      	movs	r1, #223	; 0xdf
    6416:	4628      	mov	r0, r5
    6418:	f002 fb18 	bl	8a4c <assert_post_action>
    641c:	e7ce      	b.n	63bc <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    641e:	4d40      	ldr	r5, [pc, #256]	; (6520 <z_impl_k_mutex_unlock+0x184>)
    6420:	23fd      	movs	r3, #253	; 0xfd
    6422:	462a      	mov	r2, r5
    6424:	493a      	ldr	r1, [pc, #232]	; (6510 <z_impl_k_mutex_unlock+0x174>)
    6426:	483b      	ldr	r0, [pc, #236]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    6428:	f002 fb17 	bl	8a5a <assert_print>
    642c:	483d      	ldr	r0, [pc, #244]	; (6524 <z_impl_k_mutex_unlock+0x188>)
    642e:	f002 fb14 	bl	8a5a <assert_print>
    6432:	21fd      	movs	r1, #253	; 0xfd
    6434:	4628      	mov	r0, r5
    6436:	f002 fb09 	bl	8a4c <assert_post_action>
    643a:	e7c2      	b.n	63c2 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    643c:	4d38      	ldr	r5, [pc, #224]	; (6520 <z_impl_k_mutex_unlock+0x184>)
    643e:	23fe      	movs	r3, #254	; 0xfe
    6440:	462a      	mov	r2, r5
    6442:	4939      	ldr	r1, [pc, #228]	; (6528 <z_impl_k_mutex_unlock+0x18c>)
    6444:	4833      	ldr	r0, [pc, #204]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    6446:	f002 fb08 	bl	8a5a <assert_print>
    644a:	4836      	ldr	r0, [pc, #216]	; (6524 <z_impl_k_mutex_unlock+0x188>)
    644c:	f002 fb05 	bl	8a5a <assert_print>
    6450:	21fe      	movs	r1, #254	; 0xfe
    6452:	4628      	mov	r0, r5
    6454:	f002 fafa 	bl	8a4c <assert_post_action>
    6458:	e7b8      	b.n	63cc <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    645a:	f04f 0320 	mov.w	r3, #32
    645e:	f3ef 8511 	mrs	r5, BASEPRI
    6462:	f383 8812 	msr	BASEPRI_MAX, r3
    6466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    646a:	4830      	ldr	r0, [pc, #192]	; (652c <z_impl_k_mutex_unlock+0x190>)
    646c:	f7ff fc36 	bl	5cdc <z_spin_lock_valid>
    6470:	b1c0      	cbz	r0, 64a4 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    6472:	482e      	ldr	r0, [pc, #184]	; (652c <z_impl_k_mutex_unlock+0x190>)
    6474:	f7ff fc52 	bl	5d1c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6478:	6921      	ldr	r1, [r4, #16]
    647a:	4620      	mov	r0, r4
    647c:	f003 f91f 	bl	96be <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6480:	4620      	mov	r0, r4
    6482:	f001 f8a9 	bl	75d8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6486:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6488:	b1e0      	cbz	r0, 64c4 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    648a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    648e:	6123      	str	r3, [r4, #16]
    6490:	2300      	movs	r3, #0
    6492:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    6496:	f000 fc87 	bl	6da8 <z_ready_thread>
		z_reschedule(&lock, key);
    649a:	4629      	mov	r1, r5
    649c:	4823      	ldr	r0, [pc, #140]	; (652c <z_impl_k_mutex_unlock+0x190>)
    649e:	f000 f9df 	bl	6860 <z_reschedule>
    64a2:	e79d      	b.n	63e0 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64a4:	4e22      	ldr	r6, [pc, #136]	; (6530 <z_impl_k_mutex_unlock+0x194>)
    64a6:	238e      	movs	r3, #142	; 0x8e
    64a8:	4632      	mov	r2, r6
    64aa:	4922      	ldr	r1, [pc, #136]	; (6534 <z_impl_k_mutex_unlock+0x198>)
    64ac:	4819      	ldr	r0, [pc, #100]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    64ae:	f002 fad4 	bl	8a5a <assert_print>
    64b2:	491e      	ldr	r1, [pc, #120]	; (652c <z_impl_k_mutex_unlock+0x190>)
    64b4:	4820      	ldr	r0, [pc, #128]	; (6538 <z_impl_k_mutex_unlock+0x19c>)
    64b6:	f002 fad0 	bl	8a5a <assert_print>
    64ba:	218e      	movs	r1, #142	; 0x8e
    64bc:	4630      	mov	r0, r6
    64be:	f002 fac5 	bl	8a4c <assert_post_action>
    64c2:	e7d6      	b.n	6472 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    64c4:	2300      	movs	r3, #0
    64c6:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64c8:	4818      	ldr	r0, [pc, #96]	; (652c <z_impl_k_mutex_unlock+0x190>)
    64ca:	f7ff fc17 	bl	5cfc <z_spin_unlock_valid>
    64ce:	b120      	cbz	r0, 64da <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    64d0:	f385 8811 	msr	BASEPRI, r5
    64d4:	f3bf 8f6f 	isb	sy
    64d8:	e782      	b.n	63e0 <z_impl_k_mutex_unlock+0x44>
    64da:	4c15      	ldr	r4, [pc, #84]	; (6530 <z_impl_k_mutex_unlock+0x194>)
    64dc:	23b9      	movs	r3, #185	; 0xb9
    64de:	4622      	mov	r2, r4
    64e0:	4916      	ldr	r1, [pc, #88]	; (653c <z_impl_k_mutex_unlock+0x1a0>)
    64e2:	480c      	ldr	r0, [pc, #48]	; (6514 <z_impl_k_mutex_unlock+0x178>)
    64e4:	f002 fab9 	bl	8a5a <assert_print>
    64e8:	4910      	ldr	r1, [pc, #64]	; (652c <z_impl_k_mutex_unlock+0x190>)
    64ea:	4815      	ldr	r0, [pc, #84]	; (6540 <z_impl_k_mutex_unlock+0x1a4>)
    64ec:	f002 fab5 	bl	8a5a <assert_print>
    64f0:	21b9      	movs	r1, #185	; 0xb9
    64f2:	4620      	mov	r0, r4
    64f4:	f002 faaa 	bl	8a4c <assert_post_action>
    64f8:	e7ea      	b.n	64d0 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    64fa:	f06f 0015 	mvn.w	r0, #21
    64fe:	e772      	b.n	63e6 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    6500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6504:	e76f      	b.n	63e6 <z_impl_k_mutex_unlock+0x4a>
    6506:	bf00      	nop
    6508:	2000504c 	.word	0x2000504c
    650c:	0000aae0 	.word	0x0000aae0
    6510:	0000aa28 	.word	0x0000aa28
    6514:	00009cd0 	.word	0x00009cd0
    6518:	0000ab04 	.word	0x0000ab04
    651c:	0000ab2c 	.word	0x0000ab2c
    6520:	0000ab44 	.word	0x0000ab44
    6524:	0000ab70 	.word	0x0000ab70
    6528:	0000ab74 	.word	0x0000ab74
    652c:	2000507c 	.word	0x2000507c
    6530:	00009de8 	.word	0x00009de8
    6534:	00009e48 	.word	0x00009e48
    6538:	00009e60 	.word	0x00009e60
    653c:	00009e18 	.word	0x00009e18
    6540:	00009e30 	.word	0x00009e30

00006544 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6544:	b570      	push	{r4, r5, r6, lr}
    6546:	4604      	mov	r4, r0
	__asm__ volatile(
    6548:	f04f 0320 	mov.w	r3, #32
    654c:	f3ef 8511 	mrs	r5, BASEPRI
    6550:	f383 8812 	msr	BASEPRI_MAX, r3
    6554:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6558:	4817      	ldr	r0, [pc, #92]	; (65b8 <z_impl_k_sem_give+0x74>)
    655a:	f7ff fbbf 	bl	5cdc <z_spin_lock_valid>
    655e:	b180      	cbz	r0, 6582 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    6560:	4815      	ldr	r0, [pc, #84]	; (65b8 <z_impl_k_sem_give+0x74>)
    6562:	f7ff fbdb 	bl	5d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6566:	4620      	mov	r0, r4
    6568:	f001 f836 	bl	75d8 <z_unpend_first_thread>

	if (thread != NULL) {
    656c:	b1c8      	cbz	r0, 65a2 <z_impl_k_sem_give+0x5e>
    656e:	2200      	movs	r2, #0
    6570:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6574:	f000 fc18 	bl	6da8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6578:	4629      	mov	r1, r5
    657a:	480f      	ldr	r0, [pc, #60]	; (65b8 <z_impl_k_sem_give+0x74>)
    657c:	f000 f970 	bl	6860 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6580:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6582:	4e0e      	ldr	r6, [pc, #56]	; (65bc <z_impl_k_sem_give+0x78>)
    6584:	238e      	movs	r3, #142	; 0x8e
    6586:	4632      	mov	r2, r6
    6588:	490d      	ldr	r1, [pc, #52]	; (65c0 <z_impl_k_sem_give+0x7c>)
    658a:	480e      	ldr	r0, [pc, #56]	; (65c4 <z_impl_k_sem_give+0x80>)
    658c:	f002 fa65 	bl	8a5a <assert_print>
    6590:	4909      	ldr	r1, [pc, #36]	; (65b8 <z_impl_k_sem_give+0x74>)
    6592:	480d      	ldr	r0, [pc, #52]	; (65c8 <z_impl_k_sem_give+0x84>)
    6594:	f002 fa61 	bl	8a5a <assert_print>
    6598:	218e      	movs	r1, #142	; 0x8e
    659a:	4630      	mov	r0, r6
    659c:	f002 fa56 	bl	8a4c <assert_post_action>
    65a0:	e7de      	b.n	6560 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    65a2:	68a3      	ldr	r3, [r4, #8]
    65a4:	68e2      	ldr	r2, [r4, #12]
    65a6:	4293      	cmp	r3, r2
    65a8:	d003      	beq.n	65b2 <z_impl_k_sem_give+0x6e>
    65aa:	2201      	movs	r2, #1
    65ac:	4413      	add	r3, r2
    65ae:	60a3      	str	r3, [r4, #8]
}
    65b0:	e7e2      	b.n	6578 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    65b2:	2200      	movs	r2, #0
    65b4:	e7fa      	b.n	65ac <z_impl_k_sem_give+0x68>
    65b6:	bf00      	nop
    65b8:	20005080 	.word	0x20005080
    65bc:	00009de8 	.word	0x00009de8
    65c0:	00009e48 	.word	0x00009e48
    65c4:	00009cd0 	.word	0x00009cd0
    65c8:	00009e60 	.word	0x00009e60

000065cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    65cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65d0:	b082      	sub	sp, #8
    65d2:	4604      	mov	r4, r0
    65d4:	4617      	mov	r7, r2
    65d6:	461d      	mov	r5, r3
    65d8:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    65dc:	b111      	cbz	r1, 65e4 <z_impl_k_sem_take+0x18>
    65de:	ea55 0302 	orrs.w	r3, r5, r2
    65e2:	d11f      	bne.n	6624 <z_impl_k_sem_take+0x58>
    65e4:	f04f 0320 	mov.w	r3, #32
    65e8:	f3ef 8611 	mrs	r6, BASEPRI
    65ec:	f383 8812 	msr	BASEPRI_MAX, r3
    65f0:	f3bf 8f6f 	isb	sy
    65f4:	4836      	ldr	r0, [pc, #216]	; (66d0 <z_impl_k_sem_take+0x104>)
    65f6:	f7ff fb71 	bl	5cdc <z_spin_lock_valid>
    65fa:	b310      	cbz	r0, 6642 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    65fc:	4834      	ldr	r0, [pc, #208]	; (66d0 <z_impl_k_sem_take+0x104>)
    65fe:	f7ff fb8d 	bl	5d1c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6602:	68a1      	ldr	r1, [r4, #8]
    6604:	2900      	cmp	r1, #0
    6606:	d03d      	beq.n	6684 <z_impl_k_sem_take+0xb8>
		sem->count--;
    6608:	3901      	subs	r1, #1
    660a:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    660c:	4830      	ldr	r0, [pc, #192]	; (66d0 <z_impl_k_sem_take+0x104>)
    660e:	f7ff fb75 	bl	5cfc <z_spin_unlock_valid>
    6612:	b338      	cbz	r0, 6664 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    6614:	f386 8811 	msr	BASEPRI, r6
    6618:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    661c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    661e:	b002      	add	sp, #8
    6620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    6624:	4e2b      	ldr	r6, [pc, #172]	; (66d4 <z_impl_k_sem_take+0x108>)
    6626:	2379      	movs	r3, #121	; 0x79
    6628:	4632      	mov	r2, r6
    662a:	492b      	ldr	r1, [pc, #172]	; (66d8 <z_impl_k_sem_take+0x10c>)
    662c:	482b      	ldr	r0, [pc, #172]	; (66dc <z_impl_k_sem_take+0x110>)
    662e:	f002 fa14 	bl	8a5a <assert_print>
    6632:	482b      	ldr	r0, [pc, #172]	; (66e0 <z_impl_k_sem_take+0x114>)
    6634:	f002 fa11 	bl	8a5a <assert_print>
    6638:	2179      	movs	r1, #121	; 0x79
    663a:	4630      	mov	r0, r6
    663c:	f002 fa06 	bl	8a4c <assert_post_action>
    6640:	e7d0      	b.n	65e4 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6642:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 66e4 <z_impl_k_sem_take+0x118>
    6646:	238e      	movs	r3, #142	; 0x8e
    6648:	4642      	mov	r2, r8
    664a:	4927      	ldr	r1, [pc, #156]	; (66e8 <z_impl_k_sem_take+0x11c>)
    664c:	4823      	ldr	r0, [pc, #140]	; (66dc <z_impl_k_sem_take+0x110>)
    664e:	f002 fa04 	bl	8a5a <assert_print>
    6652:	491f      	ldr	r1, [pc, #124]	; (66d0 <z_impl_k_sem_take+0x104>)
    6654:	4825      	ldr	r0, [pc, #148]	; (66ec <z_impl_k_sem_take+0x120>)
    6656:	f002 fa00 	bl	8a5a <assert_print>
    665a:	218e      	movs	r1, #142	; 0x8e
    665c:	4640      	mov	r0, r8
    665e:	f002 f9f5 	bl	8a4c <assert_post_action>
    6662:	e7cb      	b.n	65fc <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6664:	4c1f      	ldr	r4, [pc, #124]	; (66e4 <z_impl_k_sem_take+0x118>)
    6666:	23b9      	movs	r3, #185	; 0xb9
    6668:	4622      	mov	r2, r4
    666a:	4921      	ldr	r1, [pc, #132]	; (66f0 <z_impl_k_sem_take+0x124>)
    666c:	481b      	ldr	r0, [pc, #108]	; (66dc <z_impl_k_sem_take+0x110>)
    666e:	f002 f9f4 	bl	8a5a <assert_print>
    6672:	4917      	ldr	r1, [pc, #92]	; (66d0 <z_impl_k_sem_take+0x104>)
    6674:	481f      	ldr	r0, [pc, #124]	; (66f4 <z_impl_k_sem_take+0x128>)
    6676:	f002 f9f0 	bl	8a5a <assert_print>
    667a:	21b9      	movs	r1, #185	; 0xb9
    667c:	4620      	mov	r0, r4
    667e:	f002 f9e5 	bl	8a4c <assert_post_action>
    6682:	e7c7      	b.n	6614 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6684:	ea55 0307 	orrs.w	r3, r5, r7
    6688:	d007      	beq.n	669a <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    668a:	9700      	str	r7, [sp, #0]
    668c:	9501      	str	r5, [sp, #4]
    668e:	4622      	mov	r2, r4
    6690:	4631      	mov	r1, r6
    6692:	480f      	ldr	r0, [pc, #60]	; (66d0 <z_impl_k_sem_take+0x104>)
    6694:	f000 fd64 	bl	7160 <z_pend_curr>
	return ret;
    6698:	e7c1      	b.n	661e <z_impl_k_sem_take+0x52>
    669a:	480d      	ldr	r0, [pc, #52]	; (66d0 <z_impl_k_sem_take+0x104>)
    669c:	f7ff fb2e 	bl	5cfc <z_spin_unlock_valid>
    66a0:	b130      	cbz	r0, 66b0 <z_impl_k_sem_take+0xe4>
    66a2:	f386 8811 	msr	BASEPRI, r6
    66a6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    66aa:	f06f 000f 	mvn.w	r0, #15
    66ae:	e7b6      	b.n	661e <z_impl_k_sem_take+0x52>
    66b0:	4c0c      	ldr	r4, [pc, #48]	; (66e4 <z_impl_k_sem_take+0x118>)
    66b2:	23b9      	movs	r3, #185	; 0xb9
    66b4:	4622      	mov	r2, r4
    66b6:	490e      	ldr	r1, [pc, #56]	; (66f0 <z_impl_k_sem_take+0x124>)
    66b8:	4808      	ldr	r0, [pc, #32]	; (66dc <z_impl_k_sem_take+0x110>)
    66ba:	f002 f9ce 	bl	8a5a <assert_print>
    66be:	4904      	ldr	r1, [pc, #16]	; (66d0 <z_impl_k_sem_take+0x104>)
    66c0:	480c      	ldr	r0, [pc, #48]	; (66f4 <z_impl_k_sem_take+0x128>)
    66c2:	f002 f9ca 	bl	8a5a <assert_print>
    66c6:	21b9      	movs	r1, #185	; 0xb9
    66c8:	4620      	mov	r0, r4
    66ca:	f002 f9bf 	bl	8a4c <assert_post_action>
    66ce:	e7e8      	b.n	66a2 <z_impl_k_sem_take+0xd6>
    66d0:	20005080 	.word	0x20005080
    66d4:	0000aba8 	.word	0x0000aba8
    66d8:	0000abc8 	.word	0x0000abc8
    66dc:	00009cd0 	.word	0x00009cd0
    66e0:	0000ab70 	.word	0x0000ab70
    66e4:	00009de8 	.word	0x00009de8
    66e8:	00009e48 	.word	0x00009e48
    66ec:	00009e60 	.word	0x00009e60
    66f0:	00009e18 	.word	0x00009e18
    66f4:	00009e30 	.word	0x00009e30

000066f8 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    66f8:	b538      	push	{r3, r4, r5, lr}
    66fa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    66fc:	6883      	ldr	r3, [r0, #8]
    66fe:	b10b      	cbz	r3, 6704 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    6700:	68a0      	ldr	r0, [r4, #8]
    6702:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    6704:	4d06      	ldr	r5, [pc, #24]	; (6720 <pended_on_thread+0x28>)
    6706:	f240 23b9 	movw	r3, #697	; 0x2b9
    670a:	462a      	mov	r2, r5
    670c:	4905      	ldr	r1, [pc, #20]	; (6724 <pended_on_thread+0x2c>)
    670e:	4806      	ldr	r0, [pc, #24]	; (6728 <pended_on_thread+0x30>)
    6710:	f002 f9a3 	bl	8a5a <assert_print>
    6714:	f240 21b9 	movw	r1, #697	; 0x2b9
    6718:	4628      	mov	r0, r5
    671a:	f002 f997 	bl	8a4c <assert_post_action>
    671e:	e7ef      	b.n	6700 <pended_on_thread+0x8>
    6720:	0000ac18 	.word	0x0000ac18
    6724:	0000ac3c 	.word	0x0000ac3c
    6728:	00009cd0 	.word	0x00009cd0

0000672c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    672c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6730:	bf08      	it	eq
    6732:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6736:	d100      	bne.n	673a <add_thread_timeout+0xe>
    6738:	4770      	bx	lr
{
    673a:	b508      	push	{r3, lr}
    673c:	4902      	ldr	r1, [pc, #8]	; (6748 <add_thread_timeout+0x1c>)
    673e:	3018      	adds	r0, #24
    6740:	f001 fa7c 	bl	7c3c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    6744:	bd08      	pop	{r3, pc}
    6746:	bf00      	nop
    6748:	00006f05 	.word	0x00006f05

0000674c <z_reset_time_slice>:
{
    674c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    674e:	4b07      	ldr	r3, [pc, #28]	; (676c <z_reset_time_slice+0x20>)
    6750:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    6752:	b904      	cbnz	r4, 6756 <z_reset_time_slice+0xa>
}
    6754:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6756:	f7fd f843 	bl	37e0 <sys_clock_elapsed>
    675a:	4404      	add	r4, r0
    675c:	4b04      	ldr	r3, [pc, #16]	; (6770 <z_reset_time_slice+0x24>)
    675e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6760:	2100      	movs	r1, #0
    6762:	4b02      	ldr	r3, [pc, #8]	; (676c <z_reset_time_slice+0x20>)
    6764:	6818      	ldr	r0, [r3, #0]
    6766:	f001 fbf9 	bl	7f5c <z_set_timeout_expiry>
}
    676a:	e7f3      	b.n	6754 <z_reset_time_slice+0x8>
    676c:	20005090 	.word	0x20005090
    6770:	2000504c 	.word	0x2000504c

00006774 <k_sched_time_slice_set>:
{
    6774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6778:	4604      	mov	r4, r0
    677a:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    677c:	2700      	movs	r7, #0
	__asm__ volatile(
    677e:	f04f 0320 	mov.w	r3, #32
    6782:	f3ef 8611 	mrs	r6, BASEPRI
    6786:	f383 8812 	msr	BASEPRI_MAX, r3
    678a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    678e:	482a      	ldr	r0, [pc, #168]	; (6838 <k_sched_time_slice_set+0xc4>)
    6790:	f7ff faa4 	bl	5cdc <z_spin_lock_valid>
    6794:	b118      	cbz	r0, 679e <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    6796:	4828      	ldr	r0, [pc, #160]	; (6838 <k_sched_time_slice_set+0xc4>)
    6798:	f7ff fac0 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    679c:	e023      	b.n	67e6 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    679e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 683c <k_sched_time_slice_set+0xc8>
    67a2:	238e      	movs	r3, #142	; 0x8e
    67a4:	4642      	mov	r2, r8
    67a6:	4926      	ldr	r1, [pc, #152]	; (6840 <k_sched_time_slice_set+0xcc>)
    67a8:	4826      	ldr	r0, [pc, #152]	; (6844 <k_sched_time_slice_set+0xd0>)
    67aa:	f002 f956 	bl	8a5a <assert_print>
    67ae:	4922      	ldr	r1, [pc, #136]	; (6838 <k_sched_time_slice_set+0xc4>)
    67b0:	4825      	ldr	r0, [pc, #148]	; (6848 <k_sched_time_slice_set+0xd4>)
    67b2:	f002 f952 	bl	8a5a <assert_print>
    67b6:	218e      	movs	r1, #142	; 0x8e
    67b8:	4640      	mov	r0, r8
    67ba:	f002 f947 	bl	8a4c <assert_post_action>
    67be:	e7ea      	b.n	6796 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    67c0:	2802      	cmp	r0, #2
    67c2:	bfb8      	it	lt
    67c4:	2002      	movlt	r0, #2
    67c6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    67c8:	4b20      	ldr	r3, [pc, #128]	; (684c <k_sched_time_slice_set+0xd8>)
    67ca:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    67cc:	4b20      	ldr	r3, [pc, #128]	; (6850 <k_sched_time_slice_set+0xdc>)
    67ce:	6898      	ldr	r0, [r3, #8]
    67d0:	f7ff ffbc 	bl	674c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67d4:	4818      	ldr	r0, [pc, #96]	; (6838 <k_sched_time_slice_set+0xc4>)
    67d6:	f7ff fa91 	bl	5cfc <z_spin_unlock_valid>
    67da:	b1d0      	cbz	r0, 6812 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    67dc:	f386 8811 	msr	BASEPRI, r6
    67e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    67e4:	2701      	movs	r7, #1
    67e6:	bb27      	cbnz	r7, 6832 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    67e8:	4b19      	ldr	r3, [pc, #100]	; (6850 <k_sched_time_slice_set+0xdc>)
    67ea:	2200      	movs	r2, #0
    67ec:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    67ee:	0c61      	lsrs	r1, r4, #17
    67f0:	03e3      	lsls	r3, r4, #15
    67f2:	f240 30e7 	movw	r0, #999	; 0x3e7
    67f6:	1818      	adds	r0, r3, r0
    67f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67fc:	f04f 0300 	mov.w	r3, #0
    6800:	f141 0100 	adc.w	r1, r1, #0
    6804:	f7f9 fc7c 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6808:	4b12      	ldr	r3, [pc, #72]	; (6854 <k_sched_time_slice_set+0xe0>)
    680a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    680c:	2c00      	cmp	r4, #0
    680e:	dcd7      	bgt.n	67c0 <k_sched_time_slice_set+0x4c>
    6810:	e7da      	b.n	67c8 <k_sched_time_slice_set+0x54>
    6812:	4f0a      	ldr	r7, [pc, #40]	; (683c <k_sched_time_slice_set+0xc8>)
    6814:	23b9      	movs	r3, #185	; 0xb9
    6816:	463a      	mov	r2, r7
    6818:	490f      	ldr	r1, [pc, #60]	; (6858 <k_sched_time_slice_set+0xe4>)
    681a:	480a      	ldr	r0, [pc, #40]	; (6844 <k_sched_time_slice_set+0xd0>)
    681c:	f002 f91d 	bl	8a5a <assert_print>
    6820:	4905      	ldr	r1, [pc, #20]	; (6838 <k_sched_time_slice_set+0xc4>)
    6822:	480e      	ldr	r0, [pc, #56]	; (685c <k_sched_time_slice_set+0xe8>)
    6824:	f002 f919 	bl	8a5a <assert_print>
    6828:	21b9      	movs	r1, #185	; 0xb9
    682a:	4638      	mov	r0, r7
    682c:	f002 f90e 	bl	8a4c <assert_post_action>
    6830:	e7d4      	b.n	67dc <k_sched_time_slice_set+0x68>
}
    6832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6836:	bf00      	nop
    6838:	20005088 	.word	0x20005088
    683c:	00009de8 	.word	0x00009de8
    6840:	00009e48 	.word	0x00009e48
    6844:	00009cd0 	.word	0x00009cd0
    6848:	00009e60 	.word	0x00009e60
    684c:	2000508c 	.word	0x2000508c
    6850:	2000504c 	.word	0x2000504c
    6854:	20005090 	.word	0x20005090
    6858:	00009e18 	.word	0x00009e18
    685c:	00009e30 	.word	0x00009e30

00006860 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6860:	b570      	push	{r4, r5, r6, lr}
    6862:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    6864:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6866:	b921      	cbnz	r1, 6872 <z_reschedule+0x12>
    6868:	f3ef 8305 	mrs	r3, IPSR
    686c:	b913      	cbnz	r3, 6874 <z_reschedule+0x14>
    686e:	2101      	movs	r1, #1
    6870:	e000      	b.n	6874 <z_reschedule+0x14>
    6872:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    6874:	f011 0f01 	tst.w	r1, #1
    6878:	d01c      	beq.n	68b4 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    687a:	4b1b      	ldr	r3, [pc, #108]	; (68e8 <z_reschedule+0x88>)
    687c:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    687e:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    6880:	429a      	cmp	r2, r3
    6882:	d017      	beq.n	68b4 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6884:	4620      	mov	r0, r4
    6886:	f7ff fa39 	bl	5cfc <z_spin_unlock_valid>
    688a:	b118      	cbz	r0, 6894 <z_reschedule+0x34>
	ret = arch_swap(key);
    688c:	4628      	mov	r0, r5
    688e:	f7fb fb75 	bl	1f7c <arch_swap>
		z_swap(lock, key);
    6892:	e017      	b.n	68c4 <z_reschedule+0x64>
    6894:	4e15      	ldr	r6, [pc, #84]	; (68ec <z_reschedule+0x8c>)
    6896:	23d0      	movs	r3, #208	; 0xd0
    6898:	4632      	mov	r2, r6
    689a:	4915      	ldr	r1, [pc, #84]	; (68f0 <z_reschedule+0x90>)
    689c:	4815      	ldr	r0, [pc, #84]	; (68f4 <z_reschedule+0x94>)
    689e:	f002 f8dc 	bl	8a5a <assert_print>
    68a2:	4621      	mov	r1, r4
    68a4:	4814      	ldr	r0, [pc, #80]	; (68f8 <z_reschedule+0x98>)
    68a6:	f002 f8d8 	bl	8a5a <assert_print>
    68aa:	21d0      	movs	r1, #208	; 0xd0
    68ac:	4630      	mov	r0, r6
    68ae:	f002 f8cd 	bl	8a4c <assert_post_action>
    68b2:	e7eb      	b.n	688c <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68b4:	4620      	mov	r0, r4
    68b6:	f7ff fa21 	bl	5cfc <z_spin_unlock_valid>
    68ba:	b120      	cbz	r0, 68c6 <z_reschedule+0x66>
    68bc:	f385 8811 	msr	BASEPRI, r5
    68c0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    68c4:	bd70      	pop	{r4, r5, r6, pc}
    68c6:	4e09      	ldr	r6, [pc, #36]	; (68ec <z_reschedule+0x8c>)
    68c8:	23b9      	movs	r3, #185	; 0xb9
    68ca:	4632      	mov	r2, r6
    68cc:	4908      	ldr	r1, [pc, #32]	; (68f0 <z_reschedule+0x90>)
    68ce:	4809      	ldr	r0, [pc, #36]	; (68f4 <z_reschedule+0x94>)
    68d0:	f002 f8c3 	bl	8a5a <assert_print>
    68d4:	4621      	mov	r1, r4
    68d6:	4808      	ldr	r0, [pc, #32]	; (68f8 <z_reschedule+0x98>)
    68d8:	f002 f8bf 	bl	8a5a <assert_print>
    68dc:	21b9      	movs	r1, #185	; 0xb9
    68de:	4630      	mov	r0, r6
    68e0:	f002 f8b4 	bl	8a4c <assert_post_action>
    68e4:	e7ea      	b.n	68bc <z_reschedule+0x5c>
    68e6:	bf00      	nop
    68e8:	2000504c 	.word	0x2000504c
    68ec:	00009de8 	.word	0x00009de8
    68f0:	00009e18 	.word	0x00009e18
    68f4:	00009cd0 	.word	0x00009cd0
    68f8:	00009e30 	.word	0x00009e30

000068fc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    68fc:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    68fe:	2400      	movs	r4, #0
	__asm__ volatile(
    6900:	f04f 0320 	mov.w	r3, #32
    6904:	f3ef 8511 	mrs	r5, BASEPRI
    6908:	f383 8812 	msr	BASEPRI_MAX, r3
    690c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6910:	482f      	ldr	r0, [pc, #188]	; (69d0 <k_sched_lock+0xd4>)
    6912:	f7ff f9e3 	bl	5cdc <z_spin_lock_valid>
    6916:	b118      	cbz	r0, 6920 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    6918:	482d      	ldr	r0, [pc, #180]	; (69d0 <k_sched_lock+0xd4>)
    691a:	f7ff f9ff 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    691e:	e022      	b.n	6966 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6920:	4e2c      	ldr	r6, [pc, #176]	; (69d4 <k_sched_lock+0xd8>)
    6922:	238e      	movs	r3, #142	; 0x8e
    6924:	4632      	mov	r2, r6
    6926:	492c      	ldr	r1, [pc, #176]	; (69d8 <k_sched_lock+0xdc>)
    6928:	482c      	ldr	r0, [pc, #176]	; (69dc <k_sched_lock+0xe0>)
    692a:	f002 f896 	bl	8a5a <assert_print>
    692e:	4928      	ldr	r1, [pc, #160]	; (69d0 <k_sched_lock+0xd4>)
    6930:	482b      	ldr	r0, [pc, #172]	; (69e0 <k_sched_lock+0xe4>)
    6932:	f002 f892 	bl	8a5a <assert_print>
    6936:	218e      	movs	r1, #142	; 0x8e
    6938:	4630      	mov	r0, r6
    693a:	f002 f887 	bl	8a4c <assert_post_action>
    693e:	e7eb      	b.n	6918 <k_sched_lock+0x1c>
    6940:	4b28      	ldr	r3, [pc, #160]	; (69e4 <k_sched_lock+0xe8>)
    6942:	689b      	ldr	r3, [r3, #8]
    6944:	7bdb      	ldrb	r3, [r3, #15]
    6946:	2b01      	cmp	r3, #1
    6948:	d022      	beq.n	6990 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    694a:	4b26      	ldr	r3, [pc, #152]	; (69e4 <k_sched_lock+0xe8>)
    694c:	689a      	ldr	r2, [r3, #8]
    694e:	7bd3      	ldrb	r3, [r2, #15]
    6950:	3b01      	subs	r3, #1
    6952:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6954:	481e      	ldr	r0, [pc, #120]	; (69d0 <k_sched_lock+0xd4>)
    6956:	f7ff f9d1 	bl	5cfc <z_spin_unlock_valid>
    695a:	b340      	cbz	r0, 69ae <k_sched_lock+0xb2>
	__asm__ volatile(
    695c:	f385 8811 	msr	BASEPRI, r5
    6960:	f3bf 8f6f 	isb	sy
    6964:	2401      	movs	r4, #1
    6966:	2c00      	cmp	r4, #0
    6968:	d131      	bne.n	69ce <k_sched_lock+0xd2>
    696a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    696e:	2b00      	cmp	r3, #0
    6970:	d0e6      	beq.n	6940 <k_sched_lock+0x44>
    6972:	4c1d      	ldr	r4, [pc, #116]	; (69e8 <k_sched_lock+0xec>)
    6974:	23fd      	movs	r3, #253	; 0xfd
    6976:	4622      	mov	r2, r4
    6978:	491c      	ldr	r1, [pc, #112]	; (69ec <k_sched_lock+0xf0>)
    697a:	4818      	ldr	r0, [pc, #96]	; (69dc <k_sched_lock+0xe0>)
    697c:	f002 f86d 	bl	8a5a <assert_print>
    6980:	481b      	ldr	r0, [pc, #108]	; (69f0 <k_sched_lock+0xf4>)
    6982:	f002 f86a 	bl	8a5a <assert_print>
    6986:	21fd      	movs	r1, #253	; 0xfd
    6988:	4620      	mov	r0, r4
    698a:	f002 f85f 	bl	8a4c <assert_post_action>
    698e:	e7d7      	b.n	6940 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6990:	4c15      	ldr	r4, [pc, #84]	; (69e8 <k_sched_lock+0xec>)
    6992:	23fe      	movs	r3, #254	; 0xfe
    6994:	4622      	mov	r2, r4
    6996:	4917      	ldr	r1, [pc, #92]	; (69f4 <k_sched_lock+0xf8>)
    6998:	4810      	ldr	r0, [pc, #64]	; (69dc <k_sched_lock+0xe0>)
    699a:	f002 f85e 	bl	8a5a <assert_print>
    699e:	4814      	ldr	r0, [pc, #80]	; (69f0 <k_sched_lock+0xf4>)
    69a0:	f002 f85b 	bl	8a5a <assert_print>
    69a4:	21fe      	movs	r1, #254	; 0xfe
    69a6:	4620      	mov	r0, r4
    69a8:	f002 f850 	bl	8a4c <assert_post_action>
    69ac:	e7cd      	b.n	694a <k_sched_lock+0x4e>
    69ae:	4c09      	ldr	r4, [pc, #36]	; (69d4 <k_sched_lock+0xd8>)
    69b0:	23b9      	movs	r3, #185	; 0xb9
    69b2:	4622      	mov	r2, r4
    69b4:	4910      	ldr	r1, [pc, #64]	; (69f8 <k_sched_lock+0xfc>)
    69b6:	4809      	ldr	r0, [pc, #36]	; (69dc <k_sched_lock+0xe0>)
    69b8:	f002 f84f 	bl	8a5a <assert_print>
    69bc:	4904      	ldr	r1, [pc, #16]	; (69d0 <k_sched_lock+0xd4>)
    69be:	480f      	ldr	r0, [pc, #60]	; (69fc <k_sched_lock+0x100>)
    69c0:	f002 f84b 	bl	8a5a <assert_print>
    69c4:	21b9      	movs	r1, #185	; 0xb9
    69c6:	4620      	mov	r0, r4
    69c8:	f002 f840 	bl	8a4c <assert_post_action>
    69cc:	e7c6      	b.n	695c <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    69ce:	bd70      	pop	{r4, r5, r6, pc}
    69d0:	20005088 	.word	0x20005088
    69d4:	00009de8 	.word	0x00009de8
    69d8:	00009e48 	.word	0x00009e48
    69dc:	00009cd0 	.word	0x00009cd0
    69e0:	00009e60 	.word	0x00009e60
    69e4:	2000504c 	.word	0x2000504c
    69e8:	0000ab44 	.word	0x0000ab44
    69ec:	0000aa28 	.word	0x0000aa28
    69f0:	0000ab70 	.word	0x0000ab70
    69f4:	0000ab74 	.word	0x0000ab74
    69f8:	00009e18 	.word	0x00009e18
    69fc:	00009e30 	.word	0x00009e30

00006a00 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    6a00:	b538      	push	{r3, r4, r5, lr}
    6a02:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6a04:	4b0c      	ldr	r3, [pc, #48]	; (6a38 <z_priq_dumb_remove+0x38>)
    6a06:	4299      	cmp	r1, r3
    6a08:	d007      	beq.n	6a1a <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6a0a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6a0c:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    6a0e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6a10:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6a12:	2300      	movs	r3, #0
    6a14:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6a16:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6a18:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6a1a:	4d08      	ldr	r5, [pc, #32]	; (6a3c <z_priq_dumb_remove+0x3c>)
    6a1c:	f240 433d 	movw	r3, #1085	; 0x43d
    6a20:	462a      	mov	r2, r5
    6a22:	4907      	ldr	r1, [pc, #28]	; (6a40 <z_priq_dumb_remove+0x40>)
    6a24:	4807      	ldr	r0, [pc, #28]	; (6a44 <z_priq_dumb_remove+0x44>)
    6a26:	f002 f818 	bl	8a5a <assert_print>
    6a2a:	f240 413d 	movw	r1, #1085	; 0x43d
    6a2e:	4628      	mov	r0, r5
    6a30:	f002 f80c 	bl	8a4c <assert_post_action>
    6a34:	e7e9      	b.n	6a0a <z_priq_dumb_remove+0xa>
    6a36:	bf00      	nop
    6a38:	200043f8 	.word	0x200043f8
    6a3c:	0000ac18 	.word	0x0000ac18
    6a40:	0000ac54 	.word	0x0000ac54
    6a44:	00009cd0 	.word	0x00009cd0

00006a48 <update_cache>:
{
    6a48:	b538      	push	{r3, r4, r5, lr}
    6a4a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6a4c:	4819      	ldr	r0, [pc, #100]	; (6ab4 <update_cache+0x6c>)
    6a4e:	f002 fe78 	bl	9742 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6a52:	4605      	mov	r5, r0
    6a54:	b188      	cbz	r0, 6a7a <update_cache+0x32>
	if (preempt_ok != 0) {
    6a56:	bb14      	cbnz	r4, 6a9e <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    6a58:	4b17      	ldr	r3, [pc, #92]	; (6ab8 <update_cache+0x70>)
    6a5a:	689b      	ldr	r3, [r3, #8]
    6a5c:	b183      	cbz	r3, 6a80 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    6a5e:	4b16      	ldr	r3, [pc, #88]	; (6ab8 <update_cache+0x70>)
    6a60:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6a62:	7b5a      	ldrb	r2, [r3, #13]
    6a64:	f012 0f1f 	tst.w	r2, #31
    6a68:	d119      	bne.n	6a9e <update_cache+0x56>
	return node->next != NULL;
    6a6a:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6a6c:	b9ba      	cbnz	r2, 6a9e <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6a6e:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    6a70:	2a7f      	cmp	r2, #127	; 0x7f
    6a72:	d914      	bls.n	6a9e <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    6a74:	4a10      	ldr	r2, [pc, #64]	; (6ab8 <update_cache+0x70>)
    6a76:	61d3      	str	r3, [r2, #28]
    6a78:	e01a      	b.n	6ab0 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6a7a:	4b0f      	ldr	r3, [pc, #60]	; (6ab8 <update_cache+0x70>)
    6a7c:	68dd      	ldr	r5, [r3, #12]
    6a7e:	e7ea      	b.n	6a56 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    6a80:	4c0e      	ldr	r4, [pc, #56]	; (6abc <update_cache+0x74>)
    6a82:	2389      	movs	r3, #137	; 0x89
    6a84:	4622      	mov	r2, r4
    6a86:	490e      	ldr	r1, [pc, #56]	; (6ac0 <update_cache+0x78>)
    6a88:	480e      	ldr	r0, [pc, #56]	; (6ac4 <update_cache+0x7c>)
    6a8a:	f001 ffe6 	bl	8a5a <assert_print>
    6a8e:	480e      	ldr	r0, [pc, #56]	; (6ac8 <update_cache+0x80>)
    6a90:	f001 ffe3 	bl	8a5a <assert_print>
    6a94:	2189      	movs	r1, #137	; 0x89
    6a96:	4620      	mov	r0, r4
    6a98:	f001 ffd8 	bl	8a4c <assert_post_action>
    6a9c:	e7df      	b.n	6a5e <update_cache+0x16>
		if (thread != _current) {
    6a9e:	4b06      	ldr	r3, [pc, #24]	; (6ab8 <update_cache+0x70>)
    6aa0:	689b      	ldr	r3, [r3, #8]
    6aa2:	42ab      	cmp	r3, r5
    6aa4:	d002      	beq.n	6aac <update_cache+0x64>
			z_reset_time_slice(thread);
    6aa6:	4628      	mov	r0, r5
    6aa8:	f7ff fe50 	bl	674c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6aac:	4b02      	ldr	r3, [pc, #8]	; (6ab8 <update_cache+0x70>)
    6aae:	61dd      	str	r5, [r3, #28]
}
    6ab0:	bd38      	pop	{r3, r4, r5, pc}
    6ab2:	bf00      	nop
    6ab4:	2000506c 	.word	0x2000506c
    6ab8:	2000504c 	.word	0x2000504c
    6abc:	0000ac18 	.word	0x0000ac18
    6ac0:	0000ac78 	.word	0x0000ac78
    6ac4:	00009cd0 	.word	0x00009cd0
    6ac8:	0000ab70 	.word	0x0000ab70

00006acc <move_thread_to_end_of_prio_q>:
{
    6acc:	b538      	push	{r3, r4, r5, lr}
    6ace:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    6ad0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6ad2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	db2b      	blt.n	6b32 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    6ada:	7b6b      	ldrb	r3, [r5, #13]
    6adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ae0:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ae2:	4b22      	ldr	r3, [pc, #136]	; (6b6c <move_thread_to_end_of_prio_q+0xa0>)
    6ae4:	429d      	cmp	r5, r3
    6ae6:	d02c      	beq.n	6b42 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    6ae8:	4b21      	ldr	r3, [pc, #132]	; (6b70 <move_thread_to_end_of_prio_q+0xa4>)
    6aea:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6aee:	429c      	cmp	r4, r3
    6af0:	d039      	beq.n	6b66 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6af2:	b16c      	cbz	r4, 6b10 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6af4:	4621      	mov	r1, r4
    6af6:	4628      	mov	r0, r5
    6af8:	f002 fe04 	bl	9704 <z_sched_prio_cmp>
    6afc:	2800      	cmp	r0, #0
    6afe:	dc2c      	bgt.n	6b5a <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6b00:	b134      	cbz	r4, 6b10 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    6b02:	4b1b      	ldr	r3, [pc, #108]	; (6b70 <move_thread_to_end_of_prio_q+0xa4>)
    6b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b06:	429c      	cmp	r4, r3
    6b08:	d002      	beq.n	6b10 <move_thread_to_end_of_prio_q+0x44>
    6b0a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b0c:	2c00      	cmp	r4, #0
    6b0e:	d1f0      	bne.n	6af2 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    6b10:	4b17      	ldr	r3, [pc, #92]	; (6b70 <move_thread_to_end_of_prio_q+0xa4>)
    6b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6b14:	f103 0120 	add.w	r1, r3, #32
    6b18:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6b1a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6b1c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6b1e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    6b20:	4b13      	ldr	r3, [pc, #76]	; (6b70 <move_thread_to_end_of_prio_q+0xa4>)
    6b22:	6898      	ldr	r0, [r3, #8]
    6b24:	42a8      	cmp	r0, r5
    6b26:	bf14      	ite	ne
    6b28:	2000      	movne	r0, #0
    6b2a:	2001      	moveq	r0, #1
    6b2c:	f7ff ff8c 	bl	6a48 <update_cache>
}
    6b30:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6b36:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6b38:	4601      	mov	r1, r0
    6b3a:	480e      	ldr	r0, [pc, #56]	; (6b74 <move_thread_to_end_of_prio_q+0xa8>)
    6b3c:	f7ff ff60 	bl	6a00 <z_priq_dumb_remove>
}
    6b40:	e7cb      	b.n	6ada <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b42:	4c0d      	ldr	r4, [pc, #52]	; (6b78 <move_thread_to_end_of_prio_q+0xac>)
    6b44:	23ba      	movs	r3, #186	; 0xba
    6b46:	4622      	mov	r2, r4
    6b48:	490c      	ldr	r1, [pc, #48]	; (6b7c <move_thread_to_end_of_prio_q+0xb0>)
    6b4a:	480d      	ldr	r0, [pc, #52]	; (6b80 <move_thread_to_end_of_prio_q+0xb4>)
    6b4c:	f001 ff85 	bl	8a5a <assert_print>
    6b50:	21ba      	movs	r1, #186	; 0xba
    6b52:	4620      	mov	r0, r4
    6b54:	f001 ff7a 	bl	8a4c <assert_post_action>
    6b58:	e7c6      	b.n	6ae8 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    6b5a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6b5c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6b5e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6b60:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6b62:	6065      	str	r5, [r4, #4]
}
    6b64:	e7dc      	b.n	6b20 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b66:	2400      	movs	r4, #0
    6b68:	e7c3      	b.n	6af2 <move_thread_to_end_of_prio_q+0x26>
    6b6a:	bf00      	nop
    6b6c:	200043f8 	.word	0x200043f8
    6b70:	2000504c 	.word	0x2000504c
    6b74:	2000506c 	.word	0x2000506c
    6b78:	0000ac18 	.word	0x0000ac18
    6b7c:	0000ac54 	.word	0x0000ac54
    6b80:	00009cd0 	.word	0x00009cd0

00006b84 <slice_expired_locked>:
{
    6b84:	b538      	push	{r3, r4, r5, lr}
    6b86:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    6b88:	4b07      	ldr	r3, [pc, #28]	; (6ba8 <slice_expired_locked+0x24>)
    6b8a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6b8c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    6b8e:	f013 0f1f 	tst.w	r3, #31
    6b92:	d004      	beq.n	6b9e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    6b94:	4628      	mov	r0, r5
    6b96:	f7ff fdd9 	bl	674c <z_reset_time_slice>
}
    6b9a:	4620      	mov	r0, r4
    6b9c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    6b9e:	4628      	mov	r0, r5
    6ba0:	f7ff ff94 	bl	6acc <move_thread_to_end_of_prio_q>
    6ba4:	e7f6      	b.n	6b94 <slice_expired_locked+0x10>
    6ba6:	bf00      	nop
    6ba8:	2000504c 	.word	0x2000504c

00006bac <z_time_slice>:
{
    6bac:	b570      	push	{r4, r5, r6, lr}
    6bae:	4604      	mov	r4, r0
	__asm__ volatile(
    6bb0:	f04f 0320 	mov.w	r3, #32
    6bb4:	f3ef 8511 	mrs	r5, BASEPRI
    6bb8:	f383 8812 	msr	BASEPRI_MAX, r3
    6bbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bc0:	4842      	ldr	r0, [pc, #264]	; (6ccc <z_time_slice+0x120>)
    6bc2:	f7ff f88b 	bl	5cdc <z_spin_lock_valid>
    6bc6:	b310      	cbz	r0, 6c0e <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    6bc8:	4840      	ldr	r0, [pc, #256]	; (6ccc <z_time_slice+0x120>)
    6bca:	f7ff f8a7 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    6bce:	462b      	mov	r3, r5
	if (pending_current == _current) {
    6bd0:	4a3f      	ldr	r2, [pc, #252]	; (6cd0 <z_time_slice+0x124>)
    6bd2:	6892      	ldr	r2, [r2, #8]
    6bd4:	493f      	ldr	r1, [pc, #252]	; (6cd4 <z_time_slice+0x128>)
    6bd6:	6809      	ldr	r1, [r1, #0]
    6bd8:	428a      	cmp	r2, r1
    6bda:	d028      	beq.n	6c2e <z_time_slice+0x82>
	pending_current = NULL;
    6bdc:	493d      	ldr	r1, [pc, #244]	; (6cd4 <z_time_slice+0x128>)
    6bde:	2000      	movs	r0, #0
    6be0:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    6be2:	493d      	ldr	r1, [pc, #244]	; (6cd8 <z_time_slice+0x12c>)
    6be4:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    6be6:	2900      	cmp	r1, #0
    6be8:	d052      	beq.n	6c90 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6bea:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    6bec:	297f      	cmp	r1, #127	; 0x7f
    6bee:	d83a      	bhi.n	6c66 <z_time_slice+0xba>
    6bf0:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    6bf2:	f011 0f1f 	tst.w	r1, #31
    6bf6:	d140      	bne.n	6c7a <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6bf8:	f992 000e 	ldrsb.w	r0, [r2, #14]
    6bfc:	4937      	ldr	r1, [pc, #220]	; (6cdc <z_time_slice+0x130>)
    6bfe:	6809      	ldr	r1, [r1, #0]
    6c00:	4288      	cmp	r0, r1
    6c02:	db3c      	blt.n	6c7e <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    6c04:	4936      	ldr	r1, [pc, #216]	; (6ce0 <z_time_slice+0x134>)
    6c06:	428a      	cmp	r2, r1
    6c08:	d03b      	beq.n	6c82 <z_time_slice+0xd6>
    6c0a:	2201      	movs	r2, #1
    6c0c:	e02c      	b.n	6c68 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c0e:	4e35      	ldr	r6, [pc, #212]	; (6ce4 <z_time_slice+0x138>)
    6c10:	238e      	movs	r3, #142	; 0x8e
    6c12:	4632      	mov	r2, r6
    6c14:	4934      	ldr	r1, [pc, #208]	; (6ce8 <z_time_slice+0x13c>)
    6c16:	4835      	ldr	r0, [pc, #212]	; (6cec <z_time_slice+0x140>)
    6c18:	f001 ff1f 	bl	8a5a <assert_print>
    6c1c:	492b      	ldr	r1, [pc, #172]	; (6ccc <z_time_slice+0x120>)
    6c1e:	4834      	ldr	r0, [pc, #208]	; (6cf0 <z_time_slice+0x144>)
    6c20:	f001 ff1b 	bl	8a5a <assert_print>
    6c24:	218e      	movs	r1, #142	; 0x8e
    6c26:	4630      	mov	r0, r6
    6c28:	f001 ff10 	bl	8a4c <assert_post_action>
    6c2c:	e7cc      	b.n	6bc8 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    6c2e:	4610      	mov	r0, r2
    6c30:	f7ff fd8c 	bl	674c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c34:	4825      	ldr	r0, [pc, #148]	; (6ccc <z_time_slice+0x120>)
    6c36:	f7ff f861 	bl	5cfc <z_spin_unlock_valid>
    6c3a:	b120      	cbz	r0, 6c46 <z_time_slice+0x9a>
	__asm__ volatile(
    6c3c:	f385 8811 	msr	BASEPRI, r5
    6c40:	f3bf 8f6f 	isb	sy
		return;
    6c44:	e030      	b.n	6ca8 <z_time_slice+0xfc>
    6c46:	4c27      	ldr	r4, [pc, #156]	; (6ce4 <z_time_slice+0x138>)
    6c48:	23b9      	movs	r3, #185	; 0xb9
    6c4a:	4622      	mov	r2, r4
    6c4c:	4929      	ldr	r1, [pc, #164]	; (6cf4 <z_time_slice+0x148>)
    6c4e:	4827      	ldr	r0, [pc, #156]	; (6cec <z_time_slice+0x140>)
    6c50:	f001 ff03 	bl	8a5a <assert_print>
    6c54:	491d      	ldr	r1, [pc, #116]	; (6ccc <z_time_slice+0x120>)
    6c56:	4828      	ldr	r0, [pc, #160]	; (6cf8 <z_time_slice+0x14c>)
    6c58:	f001 feff 	bl	8a5a <assert_print>
    6c5c:	21b9      	movs	r1, #185	; 0xb9
    6c5e:	4620      	mov	r0, r4
    6c60:	f001 fef4 	bl	8a4c <assert_post_action>
    6c64:	e7ea      	b.n	6c3c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    6c66:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    6c68:	b192      	cbz	r2, 6c90 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    6c6a:	4a19      	ldr	r2, [pc, #100]	; (6cd0 <z_time_slice+0x124>)
    6c6c:	6910      	ldr	r0, [r2, #16]
    6c6e:	42a0      	cmp	r0, r4
    6c70:	dd09      	ble.n	6c86 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    6c72:	1b00      	subs	r0, r0, r4
    6c74:	4a16      	ldr	r2, [pc, #88]	; (6cd0 <z_time_slice+0x124>)
    6c76:	6110      	str	r0, [r2, #16]
    6c78:	e00d      	b.n	6c96 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    6c7a:	2200      	movs	r2, #0
    6c7c:	e7f4      	b.n	6c68 <z_time_slice+0xbc>
    6c7e:	2200      	movs	r2, #0
    6c80:	e7f2      	b.n	6c68 <z_time_slice+0xbc>
    6c82:	2200      	movs	r2, #0
    6c84:	e7f0      	b.n	6c68 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    6c86:	4628      	mov	r0, r5
    6c88:	f7ff ff7c 	bl	6b84 <slice_expired_locked>
    6c8c:	4603      	mov	r3, r0
    6c8e:	e002      	b.n	6c96 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    6c90:	4a0f      	ldr	r2, [pc, #60]	; (6cd0 <z_time_slice+0x124>)
    6c92:	2100      	movs	r1, #0
    6c94:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    6c96:	461c      	mov	r4, r3
    6c98:	480c      	ldr	r0, [pc, #48]	; (6ccc <z_time_slice+0x120>)
    6c9a:	f7ff f82f 	bl	5cfc <z_spin_unlock_valid>
    6c9e:	b120      	cbz	r0, 6caa <z_time_slice+0xfe>
    6ca0:	f384 8811 	msr	BASEPRI, r4
    6ca4:	f3bf 8f6f 	isb	sy
}
    6ca8:	bd70      	pop	{r4, r5, r6, pc}
    6caa:	4d0e      	ldr	r5, [pc, #56]	; (6ce4 <z_time_slice+0x138>)
    6cac:	23b9      	movs	r3, #185	; 0xb9
    6cae:	462a      	mov	r2, r5
    6cb0:	4910      	ldr	r1, [pc, #64]	; (6cf4 <z_time_slice+0x148>)
    6cb2:	480e      	ldr	r0, [pc, #56]	; (6cec <z_time_slice+0x140>)
    6cb4:	f001 fed1 	bl	8a5a <assert_print>
    6cb8:	4904      	ldr	r1, [pc, #16]	; (6ccc <z_time_slice+0x120>)
    6cba:	480f      	ldr	r0, [pc, #60]	; (6cf8 <z_time_slice+0x14c>)
    6cbc:	f001 fecd 	bl	8a5a <assert_print>
    6cc0:	21b9      	movs	r1, #185	; 0xb9
    6cc2:	4628      	mov	r0, r5
    6cc4:	f001 fec2 	bl	8a4c <assert_post_action>
    6cc8:	e7ea      	b.n	6ca0 <z_time_slice+0xf4>
    6cca:	bf00      	nop
    6ccc:	20005088 	.word	0x20005088
    6cd0:	2000504c 	.word	0x2000504c
    6cd4:	20005084 	.word	0x20005084
    6cd8:	20005090 	.word	0x20005090
    6cdc:	2000508c 	.word	0x2000508c
    6ce0:	200043f8 	.word	0x200043f8
    6ce4:	00009de8 	.word	0x00009de8
    6ce8:	00009e48 	.word	0x00009e48
    6cec:	00009cd0 	.word	0x00009cd0
    6cf0:	00009e60 	.word	0x00009e60
    6cf4:	00009e18 	.word	0x00009e18
    6cf8:	00009e30 	.word	0x00009e30

00006cfc <ready_thread>:
{
    6cfc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    6cfe:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6d00:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6d04:	2a00      	cmp	r2, #0
    6d06:	db30      	blt.n	6d6a <ready_thread+0x6e>
    6d08:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6d0a:	f013 0f1f 	tst.w	r3, #31
    6d0e:	d105      	bne.n	6d1c <ready_thread+0x20>
	return node->next != NULL;
    6d10:	6982      	ldr	r2, [r0, #24]
    6d12:	b10a      	cbz	r2, 6d18 <ready_thread+0x1c>
    6d14:	2200      	movs	r2, #0
    6d16:	e002      	b.n	6d1e <ready_thread+0x22>
    6d18:	2201      	movs	r2, #1
    6d1a:	e000      	b.n	6d1e <ready_thread+0x22>
    6d1c:	2200      	movs	r2, #0
    6d1e:	b322      	cbz	r2, 6d6a <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    6d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6d24:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6d26:	4b1b      	ldr	r3, [pc, #108]	; (6d94 <ready_thread+0x98>)
    6d28:	429c      	cmp	r4, r3
    6d2a:	d01f      	beq.n	6d6c <ready_thread+0x70>
	return list->head == list;
    6d2c:	4b1a      	ldr	r3, [pc, #104]	; (6d98 <ready_thread+0x9c>)
    6d2e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d32:	429d      	cmp	r5, r3
    6d34:	d02c      	beq.n	6d90 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6d36:	b16d      	cbz	r5, 6d54 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6d38:	4629      	mov	r1, r5
    6d3a:	4620      	mov	r0, r4
    6d3c:	f002 fce2 	bl	9704 <z_sched_prio_cmp>
    6d40:	2800      	cmp	r0, #0
    6d42:	dc1f      	bgt.n	6d84 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6d44:	b135      	cbz	r5, 6d54 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    6d46:	4b14      	ldr	r3, [pc, #80]	; (6d98 <ready_thread+0x9c>)
    6d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d4a:	429d      	cmp	r5, r3
    6d4c:	d002      	beq.n	6d54 <ready_thread+0x58>
    6d4e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6d50:	2d00      	cmp	r5, #0
    6d52:	d1f0      	bne.n	6d36 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    6d54:	4b10      	ldr	r3, [pc, #64]	; (6d98 <ready_thread+0x9c>)
    6d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6d58:	f103 0120 	add.w	r1, r3, #32
    6d5c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6d5e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6d60:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6d62:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6d64:	2000      	movs	r0, #0
    6d66:	f7ff fe6f 	bl	6a48 <update_cache>
}
    6d6a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6d6c:	4d0b      	ldr	r5, [pc, #44]	; (6d9c <ready_thread+0xa0>)
    6d6e:	23ba      	movs	r3, #186	; 0xba
    6d70:	462a      	mov	r2, r5
    6d72:	490b      	ldr	r1, [pc, #44]	; (6da0 <ready_thread+0xa4>)
    6d74:	480b      	ldr	r0, [pc, #44]	; (6da4 <ready_thread+0xa8>)
    6d76:	f001 fe70 	bl	8a5a <assert_print>
    6d7a:	21ba      	movs	r1, #186	; 0xba
    6d7c:	4628      	mov	r0, r5
    6d7e:	f001 fe65 	bl	8a4c <assert_post_action>
    6d82:	e7d3      	b.n	6d2c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    6d84:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6d86:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6d88:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6d8a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6d8c:	606c      	str	r4, [r5, #4]
}
    6d8e:	e7e9      	b.n	6d64 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6d90:	2500      	movs	r5, #0
    6d92:	e7d0      	b.n	6d36 <ready_thread+0x3a>
    6d94:	200043f8 	.word	0x200043f8
    6d98:	2000504c 	.word	0x2000504c
    6d9c:	0000ac18 	.word	0x0000ac18
    6da0:	0000ac54 	.word	0x0000ac54
    6da4:	00009cd0 	.word	0x00009cd0

00006da8 <z_ready_thread>:
{
    6da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6daa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    6dac:	2400      	movs	r4, #0
	__asm__ volatile(
    6dae:	f04f 0320 	mov.w	r3, #32
    6db2:	f3ef 8611 	mrs	r6, BASEPRI
    6db6:	f383 8812 	msr	BASEPRI_MAX, r3
    6dba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dbe:	481e      	ldr	r0, [pc, #120]	; (6e38 <z_ready_thread+0x90>)
    6dc0:	f7fe ff8c 	bl	5cdc <z_spin_lock_valid>
    6dc4:	b118      	cbz	r0, 6dce <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    6dc6:	481c      	ldr	r0, [pc, #112]	; (6e38 <z_ready_thread+0x90>)
    6dc8:	f7fe ffa8 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    6dcc:	e018      	b.n	6e00 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dce:	4f1b      	ldr	r7, [pc, #108]	; (6e3c <z_ready_thread+0x94>)
    6dd0:	238e      	movs	r3, #142	; 0x8e
    6dd2:	463a      	mov	r2, r7
    6dd4:	491a      	ldr	r1, [pc, #104]	; (6e40 <z_ready_thread+0x98>)
    6dd6:	481b      	ldr	r0, [pc, #108]	; (6e44 <z_ready_thread+0x9c>)
    6dd8:	f001 fe3f 	bl	8a5a <assert_print>
    6ddc:	4916      	ldr	r1, [pc, #88]	; (6e38 <z_ready_thread+0x90>)
    6dde:	481a      	ldr	r0, [pc, #104]	; (6e48 <z_ready_thread+0xa0>)
    6de0:	f001 fe3b 	bl	8a5a <assert_print>
    6de4:	218e      	movs	r1, #142	; 0x8e
    6de6:	4638      	mov	r0, r7
    6de8:	f001 fe30 	bl	8a4c <assert_post_action>
    6dec:	e7eb      	b.n	6dc6 <z_ready_thread+0x1e>
			ready_thread(thread);
    6dee:	4628      	mov	r0, r5
    6df0:	f7ff ff84 	bl	6cfc <ready_thread>
    6df4:	e00a      	b.n	6e0c <z_ready_thread+0x64>
	__asm__ volatile(
    6df6:	f386 8811 	msr	BASEPRI, r6
    6dfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6dfe:	2401      	movs	r4, #1
    6e00:	b9cc      	cbnz	r4, 6e36 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    6e02:	4628      	mov	r0, r5
    6e04:	f002 fc7c 	bl	9700 <thread_active_elsewhere>
    6e08:	2800      	cmp	r0, #0
    6e0a:	d0f0      	beq.n	6dee <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e0c:	480a      	ldr	r0, [pc, #40]	; (6e38 <z_ready_thread+0x90>)
    6e0e:	f7fe ff75 	bl	5cfc <z_spin_unlock_valid>
    6e12:	2800      	cmp	r0, #0
    6e14:	d1ef      	bne.n	6df6 <z_ready_thread+0x4e>
    6e16:	4c09      	ldr	r4, [pc, #36]	; (6e3c <z_ready_thread+0x94>)
    6e18:	23b9      	movs	r3, #185	; 0xb9
    6e1a:	4622      	mov	r2, r4
    6e1c:	490b      	ldr	r1, [pc, #44]	; (6e4c <z_ready_thread+0xa4>)
    6e1e:	4809      	ldr	r0, [pc, #36]	; (6e44 <z_ready_thread+0x9c>)
    6e20:	f001 fe1b 	bl	8a5a <assert_print>
    6e24:	4904      	ldr	r1, [pc, #16]	; (6e38 <z_ready_thread+0x90>)
    6e26:	480a      	ldr	r0, [pc, #40]	; (6e50 <z_ready_thread+0xa8>)
    6e28:	f001 fe17 	bl	8a5a <assert_print>
    6e2c:	21b9      	movs	r1, #185	; 0xb9
    6e2e:	4620      	mov	r0, r4
    6e30:	f001 fe0c 	bl	8a4c <assert_post_action>
    6e34:	e7df      	b.n	6df6 <z_ready_thread+0x4e>
}
    6e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e38:	20005088 	.word	0x20005088
    6e3c:	00009de8 	.word	0x00009de8
    6e40:	00009e48 	.word	0x00009e48
    6e44:	00009cd0 	.word	0x00009cd0
    6e48:	00009e60 	.word	0x00009e60
    6e4c:	00009e18 	.word	0x00009e18
    6e50:	00009e30 	.word	0x00009e30

00006e54 <z_sched_start>:
{
    6e54:	b570      	push	{r4, r5, r6, lr}
    6e56:	4604      	mov	r4, r0
	__asm__ volatile(
    6e58:	f04f 0320 	mov.w	r3, #32
    6e5c:	f3ef 8511 	mrs	r5, BASEPRI
    6e60:	f383 8812 	msr	BASEPRI_MAX, r3
    6e64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e68:	481f      	ldr	r0, [pc, #124]	; (6ee8 <z_sched_start+0x94>)
    6e6a:	f7fe ff37 	bl	5cdc <z_spin_lock_valid>
    6e6e:	b188      	cbz	r0, 6e94 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    6e70:	481d      	ldr	r0, [pc, #116]	; (6ee8 <z_sched_start+0x94>)
    6e72:	f7fe ff53 	bl	5d1c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6e76:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    6e78:	f013 0f04 	tst.w	r3, #4
    6e7c:	d01a      	beq.n	6eb4 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6e7e:	f023 0304 	bic.w	r3, r3, #4
    6e82:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    6e84:	4620      	mov	r0, r4
    6e86:	f7ff ff39 	bl	6cfc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6e8a:	4629      	mov	r1, r5
    6e8c:	4816      	ldr	r0, [pc, #88]	; (6ee8 <z_sched_start+0x94>)
    6e8e:	f7ff fce7 	bl	6860 <z_reschedule>
}
    6e92:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e94:	4e15      	ldr	r6, [pc, #84]	; (6eec <z_sched_start+0x98>)
    6e96:	238e      	movs	r3, #142	; 0x8e
    6e98:	4632      	mov	r2, r6
    6e9a:	4915      	ldr	r1, [pc, #84]	; (6ef0 <z_sched_start+0x9c>)
    6e9c:	4815      	ldr	r0, [pc, #84]	; (6ef4 <z_sched_start+0xa0>)
    6e9e:	f001 fddc 	bl	8a5a <assert_print>
    6ea2:	4911      	ldr	r1, [pc, #68]	; (6ee8 <z_sched_start+0x94>)
    6ea4:	4814      	ldr	r0, [pc, #80]	; (6ef8 <z_sched_start+0xa4>)
    6ea6:	f001 fdd8 	bl	8a5a <assert_print>
    6eaa:	218e      	movs	r1, #142	; 0x8e
    6eac:	4630      	mov	r0, r6
    6eae:	f001 fdcd 	bl	8a4c <assert_post_action>
    6eb2:	e7dd      	b.n	6e70 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6eb4:	480c      	ldr	r0, [pc, #48]	; (6ee8 <z_sched_start+0x94>)
    6eb6:	f7fe ff21 	bl	5cfc <z_spin_unlock_valid>
    6eba:	b120      	cbz	r0, 6ec6 <z_sched_start+0x72>
	__asm__ volatile(
    6ebc:	f385 8811 	msr	BASEPRI, r5
    6ec0:	f3bf 8f6f 	isb	sy
		return;
    6ec4:	e7e5      	b.n	6e92 <z_sched_start+0x3e>
    6ec6:	4c09      	ldr	r4, [pc, #36]	; (6eec <z_sched_start+0x98>)
    6ec8:	23b9      	movs	r3, #185	; 0xb9
    6eca:	4622      	mov	r2, r4
    6ecc:	490b      	ldr	r1, [pc, #44]	; (6efc <z_sched_start+0xa8>)
    6ece:	4809      	ldr	r0, [pc, #36]	; (6ef4 <z_sched_start+0xa0>)
    6ed0:	f001 fdc3 	bl	8a5a <assert_print>
    6ed4:	4904      	ldr	r1, [pc, #16]	; (6ee8 <z_sched_start+0x94>)
    6ed6:	480a      	ldr	r0, [pc, #40]	; (6f00 <z_sched_start+0xac>)
    6ed8:	f001 fdbf 	bl	8a5a <assert_print>
    6edc:	21b9      	movs	r1, #185	; 0xb9
    6ede:	4620      	mov	r0, r4
    6ee0:	f001 fdb4 	bl	8a4c <assert_post_action>
    6ee4:	e7ea      	b.n	6ebc <z_sched_start+0x68>
    6ee6:	bf00      	nop
    6ee8:	20005088 	.word	0x20005088
    6eec:	00009de8 	.word	0x00009de8
    6ef0:	00009e48 	.word	0x00009e48
    6ef4:	00009cd0 	.word	0x00009cd0
    6ef8:	00009e60 	.word	0x00009e60
    6efc:	00009e18 	.word	0x00009e18
    6f00:	00009e30 	.word	0x00009e30

00006f04 <z_thread_timeout>:
{
    6f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f08:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6f0a:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    6f0e:	2500      	movs	r5, #0
	__asm__ volatile(
    6f10:	f04f 0320 	mov.w	r3, #32
    6f14:	f3ef 8711 	mrs	r7, BASEPRI
    6f18:	f383 8812 	msr	BASEPRI_MAX, r3
    6f1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f20:	482b      	ldr	r0, [pc, #172]	; (6fd0 <z_thread_timeout+0xcc>)
    6f22:	f7fe fedb 	bl	5cdc <z_spin_lock_valid>
    6f26:	b118      	cbz	r0, 6f30 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    6f28:	4829      	ldr	r0, [pc, #164]	; (6fd0 <z_thread_timeout+0xcc>)
    6f2a:	f7fe fef7 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    6f2e:	e026      	b.n	6f7e <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f30:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6fd4 <z_thread_timeout+0xd0>
    6f34:	238e      	movs	r3, #142	; 0x8e
    6f36:	4642      	mov	r2, r8
    6f38:	4927      	ldr	r1, [pc, #156]	; (6fd8 <z_thread_timeout+0xd4>)
    6f3a:	4828      	ldr	r0, [pc, #160]	; (6fdc <z_thread_timeout+0xd8>)
    6f3c:	f001 fd8d 	bl	8a5a <assert_print>
    6f40:	4923      	ldr	r1, [pc, #140]	; (6fd0 <z_thread_timeout+0xcc>)
    6f42:	4827      	ldr	r0, [pc, #156]	; (6fe0 <z_thread_timeout+0xdc>)
    6f44:	f001 fd89 	bl	8a5a <assert_print>
    6f48:	218e      	movs	r1, #142	; 0x8e
    6f4a:	4640      	mov	r0, r8
    6f4c:	f001 fd7e 	bl	8a4c <assert_post_action>
    6f50:	e7ea      	b.n	6f28 <z_thread_timeout+0x24>
    6f52:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6f56:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6f5a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6f5e:	f023 0310 	bic.w	r3, r3, #16
    6f62:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6f66:	4630      	mov	r0, r6
    6f68:	f7ff fec8 	bl	6cfc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f6c:	4818      	ldr	r0, [pc, #96]	; (6fd0 <z_thread_timeout+0xcc>)
    6f6e:	f7fe fec5 	bl	5cfc <z_spin_unlock_valid>
    6f72:	b1d8      	cbz	r0, 6fac <z_thread_timeout+0xa8>
	__asm__ volatile(
    6f74:	f387 8811 	msr	BASEPRI, r7
    6f78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6f7c:	2501      	movs	r5, #1
    6f7e:	bb2d      	cbnz	r5, 6fcc <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6f80:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6f84:	f013 0f28 	tst.w	r3, #40	; 0x28
    6f88:	d1f0      	bne.n	6f6c <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    6f8a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d0df      	beq.n	6f52 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6f92:	4630      	mov	r0, r6
    6f94:	f7ff fbb0 	bl	66f8 <pended_on_thread>
    6f98:	4631      	mov	r1, r6
    6f9a:	f7ff fd31 	bl	6a00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6f9e:	7b73      	ldrb	r3, [r6, #13]
    6fa0:	f023 0302 	bic.w	r3, r3, #2
    6fa4:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    6fa6:	2300      	movs	r3, #0
    6fa8:	60b3      	str	r3, [r6, #8]
}
    6faa:	e7d2      	b.n	6f52 <z_thread_timeout+0x4e>
    6fac:	4d09      	ldr	r5, [pc, #36]	; (6fd4 <z_thread_timeout+0xd0>)
    6fae:	23b9      	movs	r3, #185	; 0xb9
    6fb0:	462a      	mov	r2, r5
    6fb2:	490c      	ldr	r1, [pc, #48]	; (6fe4 <z_thread_timeout+0xe0>)
    6fb4:	4809      	ldr	r0, [pc, #36]	; (6fdc <z_thread_timeout+0xd8>)
    6fb6:	f001 fd50 	bl	8a5a <assert_print>
    6fba:	4905      	ldr	r1, [pc, #20]	; (6fd0 <z_thread_timeout+0xcc>)
    6fbc:	480a      	ldr	r0, [pc, #40]	; (6fe8 <z_thread_timeout+0xe4>)
    6fbe:	f001 fd4c 	bl	8a5a <assert_print>
    6fc2:	21b9      	movs	r1, #185	; 0xb9
    6fc4:	4628      	mov	r0, r5
    6fc6:	f001 fd41 	bl	8a4c <assert_post_action>
    6fca:	e7d3      	b.n	6f74 <z_thread_timeout+0x70>
}
    6fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fd0:	20005088 	.word	0x20005088
    6fd4:	00009de8 	.word	0x00009de8
    6fd8:	00009e48 	.word	0x00009e48
    6fdc:	00009cd0 	.word	0x00009cd0
    6fe0:	00009e60 	.word	0x00009e60
    6fe4:	00009e18 	.word	0x00009e18
    6fe8:	00009e30 	.word	0x00009e30

00006fec <unready_thread>:
{
    6fec:	b510      	push	{r4, lr}
    6fee:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6ff0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6ff2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	db08      	blt.n	700c <unready_thread+0x20>
	update_cache(thread == _current);
    6ffa:	4b08      	ldr	r3, [pc, #32]	; (701c <unready_thread+0x30>)
    6ffc:	6898      	ldr	r0, [r3, #8]
    6ffe:	42a0      	cmp	r0, r4
    7000:	bf14      	ite	ne
    7002:	2000      	movne	r0, #0
    7004:	2001      	moveq	r0, #1
    7006:	f7ff fd1f 	bl	6a48 <update_cache>
}
    700a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    700c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7010:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7012:	4601      	mov	r1, r0
    7014:	4802      	ldr	r0, [pc, #8]	; (7020 <unready_thread+0x34>)
    7016:	f7ff fcf3 	bl	6a00 <z_priq_dumb_remove>
}
    701a:	e7ee      	b.n	6ffa <unready_thread+0xe>
    701c:	2000504c 	.word	0x2000504c
    7020:	2000506c 	.word	0x2000506c

00007024 <add_to_waitq_locked>:
{
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	4605      	mov	r5, r0
    7028:	460e      	mov	r6, r1
	unready_thread(thread);
    702a:	f7ff ffdf 	bl	6fec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    702e:	7b6b      	ldrb	r3, [r5, #13]
    7030:	f043 0302 	orr.w	r3, r3, #2
    7034:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    7036:	b1ce      	cbz	r6, 706c <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    7038:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    703a:	4b17      	ldr	r3, [pc, #92]	; (7098 <add_to_waitq_locked+0x74>)
    703c:	429d      	cmp	r5, r3
    703e:	d016      	beq.n	706e <add_to_waitq_locked+0x4a>
	return list->head == list;
    7040:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7042:	42a6      	cmp	r6, r4
    7044:	d025      	beq.n	7092 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7046:	b164      	cbz	r4, 7062 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7048:	4621      	mov	r1, r4
    704a:	4628      	mov	r0, r5
    704c:	f002 fb5a 	bl	9704 <z_sched_prio_cmp>
    7050:	2800      	cmp	r0, #0
    7052:	dc18      	bgt.n	7086 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7054:	b12c      	cbz	r4, 7062 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    7056:	6873      	ldr	r3, [r6, #4]
    7058:	429c      	cmp	r4, r3
    705a:	d002      	beq.n	7062 <add_to_waitq_locked+0x3e>
    705c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    705e:	2c00      	cmp	r4, #0
    7060:	d1f1      	bne.n	7046 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    7062:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    7064:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    7066:	606b      	str	r3, [r5, #4]
	tail->next = node;
    7068:	601d      	str	r5, [r3, #0]
	list->tail = node;
    706a:	6075      	str	r5, [r6, #4]
}
    706c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    706e:	4c0b      	ldr	r4, [pc, #44]	; (709c <add_to_waitq_locked+0x78>)
    7070:	23ba      	movs	r3, #186	; 0xba
    7072:	4622      	mov	r2, r4
    7074:	490a      	ldr	r1, [pc, #40]	; (70a0 <add_to_waitq_locked+0x7c>)
    7076:	480b      	ldr	r0, [pc, #44]	; (70a4 <add_to_waitq_locked+0x80>)
    7078:	f001 fcef 	bl	8a5a <assert_print>
    707c:	21ba      	movs	r1, #186	; 0xba
    707e:	4620      	mov	r0, r4
    7080:	f001 fce4 	bl	8a4c <assert_post_action>
    7084:	e7dc      	b.n	7040 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    7086:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7088:	606b      	str	r3, [r5, #4]
	node->next = successor;
    708a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    708c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    708e:	6065      	str	r5, [r4, #4]
}
    7090:	e7ec      	b.n	706c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7092:	2400      	movs	r4, #0
    7094:	e7d7      	b.n	7046 <add_to_waitq_locked+0x22>
    7096:	bf00      	nop
    7098:	200043f8 	.word	0x200043f8
    709c:	0000ac18 	.word	0x0000ac18
    70a0:	0000ac54 	.word	0x0000ac54
    70a4:	00009cd0 	.word	0x00009cd0

000070a8 <pend>:
{
    70a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70ac:	4605      	mov	r5, r0
    70ae:	460e      	mov	r6, r1
    70b0:	4691      	mov	r9, r2
    70b2:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    70b4:	2400      	movs	r4, #0
	__asm__ volatile(
    70b6:	f04f 0320 	mov.w	r3, #32
    70ba:	f3ef 8711 	mrs	r7, BASEPRI
    70be:	f383 8812 	msr	BASEPRI_MAX, r3
    70c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70c6:	481f      	ldr	r0, [pc, #124]	; (7144 <pend+0x9c>)
    70c8:	f7fe fe08 	bl	5cdc <z_spin_lock_valid>
    70cc:	b118      	cbz	r0, 70d6 <pend+0x2e>
	z_spin_lock_set_owner(l);
    70ce:	481d      	ldr	r0, [pc, #116]	; (7144 <pend+0x9c>)
    70d0:	f7fe fe24 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    70d4:	e015      	b.n	7102 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70d6:	f8df a070 	ldr.w	sl, [pc, #112]	; 7148 <pend+0xa0>
    70da:	238e      	movs	r3, #142	; 0x8e
    70dc:	4652      	mov	r2, sl
    70de:	491b      	ldr	r1, [pc, #108]	; (714c <pend+0xa4>)
    70e0:	481b      	ldr	r0, [pc, #108]	; (7150 <pend+0xa8>)
    70e2:	f001 fcba 	bl	8a5a <assert_print>
    70e6:	4917      	ldr	r1, [pc, #92]	; (7144 <pend+0x9c>)
    70e8:	481a      	ldr	r0, [pc, #104]	; (7154 <pend+0xac>)
    70ea:	f001 fcb6 	bl	8a5a <assert_print>
    70ee:	218e      	movs	r1, #142	; 0x8e
    70f0:	4650      	mov	r0, sl
    70f2:	f001 fcab 	bl	8a4c <assert_post_action>
    70f6:	e7ea      	b.n	70ce <pend+0x26>
	__asm__ volatile(
    70f8:	f387 8811 	msr	BASEPRI, r7
    70fc:	f3bf 8f6f 	isb	sy
    7100:	2401      	movs	r4, #1
    7102:	b9c4      	cbnz	r4, 7136 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    7104:	4631      	mov	r1, r6
    7106:	4628      	mov	r0, r5
    7108:	f7ff ff8c 	bl	7024 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    710c:	480d      	ldr	r0, [pc, #52]	; (7144 <pend+0x9c>)
    710e:	f7fe fdf5 	bl	5cfc <z_spin_unlock_valid>
    7112:	2800      	cmp	r0, #0
    7114:	d1f0      	bne.n	70f8 <pend+0x50>
    7116:	4c0c      	ldr	r4, [pc, #48]	; (7148 <pend+0xa0>)
    7118:	23b9      	movs	r3, #185	; 0xb9
    711a:	4622      	mov	r2, r4
    711c:	490e      	ldr	r1, [pc, #56]	; (7158 <pend+0xb0>)
    711e:	480c      	ldr	r0, [pc, #48]	; (7150 <pend+0xa8>)
    7120:	f001 fc9b 	bl	8a5a <assert_print>
    7124:	4907      	ldr	r1, [pc, #28]	; (7144 <pend+0x9c>)
    7126:	480d      	ldr	r0, [pc, #52]	; (715c <pend+0xb4>)
    7128:	f001 fc97 	bl	8a5a <assert_print>
    712c:	21b9      	movs	r1, #185	; 0xb9
    712e:	4620      	mov	r0, r4
    7130:	f001 fc8c 	bl	8a4c <assert_post_action>
    7134:	e7e0      	b.n	70f8 <pend+0x50>
	add_thread_timeout(thread, timeout);
    7136:	464a      	mov	r2, r9
    7138:	4643      	mov	r3, r8
    713a:	4628      	mov	r0, r5
    713c:	f7ff faf6 	bl	672c <add_thread_timeout>
}
    7140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7144:	20005088 	.word	0x20005088
    7148:	00009de8 	.word	0x00009de8
    714c:	00009e48 	.word	0x00009e48
    7150:	00009cd0 	.word	0x00009cd0
    7154:	00009e60 	.word	0x00009e60
    7158:	00009e18 	.word	0x00009e18
    715c:	00009e30 	.word	0x00009e30

00007160 <z_pend_curr>:
{
    7160:	b570      	push	{r4, r5, r6, lr}
    7162:	4604      	mov	r4, r0
    7164:	460d      	mov	r5, r1
    7166:	4611      	mov	r1, r2
	pending_current = _current;
    7168:	4b0f      	ldr	r3, [pc, #60]	; (71a8 <z_pend_curr+0x48>)
    716a:	6898      	ldr	r0, [r3, #8]
    716c:	4b0f      	ldr	r3, [pc, #60]	; (71ac <z_pend_curr+0x4c>)
    716e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    7170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7174:	f7ff ff98 	bl	70a8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7178:	4620      	mov	r0, r4
    717a:	f7fe fdbf 	bl	5cfc <z_spin_unlock_valid>
    717e:	b118      	cbz	r0, 7188 <z_pend_curr+0x28>
    7180:	4628      	mov	r0, r5
    7182:	f7fa fefb 	bl	1f7c <arch_swap>
}
    7186:	bd70      	pop	{r4, r5, r6, pc}
    7188:	4e09      	ldr	r6, [pc, #36]	; (71b0 <z_pend_curr+0x50>)
    718a:	23d0      	movs	r3, #208	; 0xd0
    718c:	4632      	mov	r2, r6
    718e:	4909      	ldr	r1, [pc, #36]	; (71b4 <z_pend_curr+0x54>)
    7190:	4809      	ldr	r0, [pc, #36]	; (71b8 <z_pend_curr+0x58>)
    7192:	f001 fc62 	bl	8a5a <assert_print>
    7196:	4621      	mov	r1, r4
    7198:	4808      	ldr	r0, [pc, #32]	; (71bc <z_pend_curr+0x5c>)
    719a:	f001 fc5e 	bl	8a5a <assert_print>
    719e:	21d0      	movs	r1, #208	; 0xd0
    71a0:	4630      	mov	r0, r6
    71a2:	f001 fc53 	bl	8a4c <assert_post_action>
    71a6:	e7eb      	b.n	7180 <z_pend_curr+0x20>
    71a8:	2000504c 	.word	0x2000504c
    71ac:	20005084 	.word	0x20005084
    71b0:	00009de8 	.word	0x00009de8
    71b4:	00009e18 	.word	0x00009e18
    71b8:	00009cd0 	.word	0x00009cd0
    71bc:	00009e30 	.word	0x00009e30

000071c0 <z_set_prio>:
{
    71c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71c4:	4604      	mov	r4, r0
    71c6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    71c8:	2500      	movs	r5, #0
	__asm__ volatile(
    71ca:	f04f 0320 	mov.w	r3, #32
    71ce:	f3ef 8811 	mrs	r8, BASEPRI
    71d2:	f383 8812 	msr	BASEPRI_MAX, r3
    71d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71da:	4844      	ldr	r0, [pc, #272]	; (72ec <z_set_prio+0x12c>)
    71dc:	f7fe fd7e 	bl	5cdc <z_spin_lock_valid>
    71e0:	b120      	cbz	r0, 71ec <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    71e2:	4842      	ldr	r0, [pc, #264]	; (72ec <z_set_prio+0x12c>)
    71e4:	f7fe fd9a 	bl	5d1c <z_spin_lock_set_owner>
	bool need_sched = 0;
    71e8:	2700      	movs	r7, #0
	return k;
    71ea:	e01d      	b.n	7228 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71ec:	4f40      	ldr	r7, [pc, #256]	; (72f0 <z_set_prio+0x130>)
    71ee:	238e      	movs	r3, #142	; 0x8e
    71f0:	463a      	mov	r2, r7
    71f2:	4940      	ldr	r1, [pc, #256]	; (72f4 <z_set_prio+0x134>)
    71f4:	4840      	ldr	r0, [pc, #256]	; (72f8 <z_set_prio+0x138>)
    71f6:	f001 fc30 	bl	8a5a <assert_print>
    71fa:	493c      	ldr	r1, [pc, #240]	; (72ec <z_set_prio+0x12c>)
    71fc:	483f      	ldr	r0, [pc, #252]	; (72fc <z_set_prio+0x13c>)
    71fe:	f001 fc2c 	bl	8a5a <assert_print>
    7202:	218e      	movs	r1, #142	; 0x8e
    7204:	4638      	mov	r0, r7
    7206:	f001 fc21 	bl	8a4c <assert_post_action>
    720a:	e7ea      	b.n	71e2 <z_set_prio+0x22>
		if (need_sched) {
    720c:	f013 0701 	ands.w	r7, r3, #1
    7210:	d116      	bne.n	7240 <z_set_prio+0x80>
			thread->base.prio = prio;
    7212:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7214:	4835      	ldr	r0, [pc, #212]	; (72ec <z_set_prio+0x12c>)
    7216:	f7fe fd71 	bl	5cfc <z_spin_unlock_valid>
    721a:	2800      	cmp	r0, #0
    721c:	d053      	beq.n	72c6 <z_set_prio+0x106>
	__asm__ volatile(
    721e:	f388 8811 	msr	BASEPRI, r8
    7222:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7226:	2501      	movs	r5, #1
    7228:	462b      	mov	r3, r5
    722a:	2d00      	cmp	r5, #0
    722c:	d15b      	bne.n	72e6 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    722e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7230:	f012 0f1f 	tst.w	r2, #31
    7234:	d1ea      	bne.n	720c <z_set_prio+0x4c>
	return node->next != NULL;
    7236:	69a1      	ldr	r1, [r4, #24]
    7238:	2900      	cmp	r1, #0
    723a:	d1e7      	bne.n	720c <z_set_prio+0x4c>
    723c:	2301      	movs	r3, #1
    723e:	e7e5      	b.n	720c <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7240:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7244:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7246:	4621      	mov	r1, r4
    7248:	482d      	ldr	r0, [pc, #180]	; (7300 <z_set_prio+0x140>)
    724a:	f7ff fbd9 	bl	6a00 <z_priq_dumb_remove>
				thread->base.prio = prio;
    724e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7250:	7b63      	ldrb	r3, [r4, #13]
    7252:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7256:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7258:	4b2a      	ldr	r3, [pc, #168]	; (7304 <z_set_prio+0x144>)
    725a:	429c      	cmp	r4, r3
    725c:	d01f      	beq.n	729e <z_set_prio+0xde>
	return list->head == list;
    725e:	4b2a      	ldr	r3, [pc, #168]	; (7308 <z_set_prio+0x148>)
    7260:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7264:	429d      	cmp	r5, r3
    7266:	d02c      	beq.n	72c2 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7268:	b16d      	cbz	r5, 7286 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    726a:	4629      	mov	r1, r5
    726c:	4620      	mov	r0, r4
    726e:	f002 fa49 	bl	9704 <z_sched_prio_cmp>
    7272:	2800      	cmp	r0, #0
    7274:	dc1f      	bgt.n	72b6 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7276:	b135      	cbz	r5, 7286 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    7278:	4b23      	ldr	r3, [pc, #140]	; (7308 <z_set_prio+0x148>)
    727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    727c:	429d      	cmp	r5, r3
    727e:	d002      	beq.n	7286 <z_set_prio+0xc6>
    7280:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7282:	2d00      	cmp	r5, #0
    7284:	d1f0      	bne.n	7268 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    7286:	4b20      	ldr	r3, [pc, #128]	; (7308 <z_set_prio+0x148>)
    7288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    728a:	f103 0120 	add.w	r1, r3, #32
    728e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    7290:	6062      	str	r2, [r4, #4]
	tail->next = node;
    7292:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7294:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    7296:	2001      	movs	r0, #1
    7298:	f7ff fbd6 	bl	6a48 <update_cache>
    729c:	e7ba      	b.n	7214 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    729e:	4d1b      	ldr	r5, [pc, #108]	; (730c <z_set_prio+0x14c>)
    72a0:	23ba      	movs	r3, #186	; 0xba
    72a2:	462a      	mov	r2, r5
    72a4:	491a      	ldr	r1, [pc, #104]	; (7310 <z_set_prio+0x150>)
    72a6:	4814      	ldr	r0, [pc, #80]	; (72f8 <z_set_prio+0x138>)
    72a8:	f001 fbd7 	bl	8a5a <assert_print>
    72ac:	21ba      	movs	r1, #186	; 0xba
    72ae:	4628      	mov	r0, r5
    72b0:	f001 fbcc 	bl	8a4c <assert_post_action>
    72b4:	e7d3      	b.n	725e <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    72b6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    72b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    72ba:	6025      	str	r5, [r4, #0]
	prev->next = node;
    72bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    72be:	606c      	str	r4, [r5, #4]
}
    72c0:	e7e9      	b.n	7296 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    72c2:	2500      	movs	r5, #0
    72c4:	e7d0      	b.n	7268 <z_set_prio+0xa8>
    72c6:	4d0a      	ldr	r5, [pc, #40]	; (72f0 <z_set_prio+0x130>)
    72c8:	23b9      	movs	r3, #185	; 0xb9
    72ca:	462a      	mov	r2, r5
    72cc:	4911      	ldr	r1, [pc, #68]	; (7314 <z_set_prio+0x154>)
    72ce:	480a      	ldr	r0, [pc, #40]	; (72f8 <z_set_prio+0x138>)
    72d0:	f001 fbc3 	bl	8a5a <assert_print>
    72d4:	4905      	ldr	r1, [pc, #20]	; (72ec <z_set_prio+0x12c>)
    72d6:	4810      	ldr	r0, [pc, #64]	; (7318 <z_set_prio+0x158>)
    72d8:	f001 fbbf 	bl	8a5a <assert_print>
    72dc:	21b9      	movs	r1, #185	; 0xb9
    72de:	4628      	mov	r0, r5
    72e0:	f001 fbb4 	bl	8a4c <assert_post_action>
    72e4:	e79b      	b.n	721e <z_set_prio+0x5e>
}
    72e6:	4638      	mov	r0, r7
    72e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72ec:	20005088 	.word	0x20005088
    72f0:	00009de8 	.word	0x00009de8
    72f4:	00009e48 	.word	0x00009e48
    72f8:	00009cd0 	.word	0x00009cd0
    72fc:	00009e60 	.word	0x00009e60
    7300:	2000506c 	.word	0x2000506c
    7304:	200043f8 	.word	0x200043f8
    7308:	2000504c 	.word	0x2000504c
    730c:	0000ac18 	.word	0x0000ac18
    7310:	0000ac54 	.word	0x0000ac54
    7314:	00009e18 	.word	0x00009e18
    7318:	00009e30 	.word	0x00009e30

0000731c <z_impl_k_thread_suspend>:
{
    731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    731e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7320:	3018      	adds	r0, #24
    7322:	f000 fd6f 	bl	7e04 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    7326:	2500      	movs	r5, #0
	__asm__ volatile(
    7328:	f04f 0320 	mov.w	r3, #32
    732c:	f3ef 8611 	mrs	r6, BASEPRI
    7330:	f383 8812 	msr	BASEPRI_MAX, r3
    7334:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7338:	482d      	ldr	r0, [pc, #180]	; (73f0 <z_impl_k_thread_suspend+0xd4>)
    733a:	f7fe fccf 	bl	5cdc <z_spin_lock_valid>
    733e:	b118      	cbz	r0, 7348 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    7340:	482b      	ldr	r0, [pc, #172]	; (73f0 <z_impl_k_thread_suspend+0xd4>)
    7342:	f7fe fceb 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    7346:	e01c      	b.n	7382 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7348:	4f2a      	ldr	r7, [pc, #168]	; (73f4 <z_impl_k_thread_suspend+0xd8>)
    734a:	238e      	movs	r3, #142	; 0x8e
    734c:	463a      	mov	r2, r7
    734e:	492a      	ldr	r1, [pc, #168]	; (73f8 <z_impl_k_thread_suspend+0xdc>)
    7350:	482a      	ldr	r0, [pc, #168]	; (73fc <z_impl_k_thread_suspend+0xe0>)
    7352:	f001 fb82 	bl	8a5a <assert_print>
    7356:	4926      	ldr	r1, [pc, #152]	; (73f0 <z_impl_k_thread_suspend+0xd4>)
    7358:	4829      	ldr	r0, [pc, #164]	; (7400 <z_impl_k_thread_suspend+0xe4>)
    735a:	f001 fb7e 	bl	8a5a <assert_print>
    735e:	218e      	movs	r1, #142	; 0x8e
    7360:	4638      	mov	r0, r7
    7362:	f001 fb73 	bl	8a4c <assert_post_action>
    7366:	e7eb      	b.n	7340 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    736c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    736e:	4621      	mov	r1, r4
    7370:	4824      	ldr	r0, [pc, #144]	; (7404 <z_impl_k_thread_suspend+0xe8>)
    7372:	f7ff fb45 	bl	6a00 <z_priq_dumb_remove>
}
    7376:	e00a      	b.n	738e <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    7378:	f386 8811 	msr	BASEPRI, r6
    737c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7380:	2501      	movs	r5, #1
    7382:	bb2d      	cbnz	r5, 73d0 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    7384:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    7386:	f994 300d 	ldrsb.w	r3, [r4, #13]
    738a:	2b00      	cmp	r3, #0
    738c:	dbec      	blt.n	7368 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    738e:	7b63      	ldrb	r3, [r4, #13]
    7390:	f043 0310 	orr.w	r3, r3, #16
    7394:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    7396:	4b1c      	ldr	r3, [pc, #112]	; (7408 <z_impl_k_thread_suspend+0xec>)
    7398:	6898      	ldr	r0, [r3, #8]
    739a:	42a0      	cmp	r0, r4
    739c:	bf14      	ite	ne
    739e:	2000      	movne	r0, #0
    73a0:	2001      	moveq	r0, #1
    73a2:	f7ff fb51 	bl	6a48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73a6:	4812      	ldr	r0, [pc, #72]	; (73f0 <z_impl_k_thread_suspend+0xd4>)
    73a8:	f7fe fca8 	bl	5cfc <z_spin_unlock_valid>
    73ac:	2800      	cmp	r0, #0
    73ae:	d1e3      	bne.n	7378 <z_impl_k_thread_suspend+0x5c>
    73b0:	4d10      	ldr	r5, [pc, #64]	; (73f4 <z_impl_k_thread_suspend+0xd8>)
    73b2:	23b9      	movs	r3, #185	; 0xb9
    73b4:	462a      	mov	r2, r5
    73b6:	4915      	ldr	r1, [pc, #84]	; (740c <z_impl_k_thread_suspend+0xf0>)
    73b8:	4810      	ldr	r0, [pc, #64]	; (73fc <z_impl_k_thread_suspend+0xe0>)
    73ba:	f001 fb4e 	bl	8a5a <assert_print>
    73be:	490c      	ldr	r1, [pc, #48]	; (73f0 <z_impl_k_thread_suspend+0xd4>)
    73c0:	4813      	ldr	r0, [pc, #76]	; (7410 <z_impl_k_thread_suspend+0xf4>)
    73c2:	f001 fb4a 	bl	8a5a <assert_print>
    73c6:	21b9      	movs	r1, #185	; 0xb9
    73c8:	4628      	mov	r0, r5
    73ca:	f001 fb3f 	bl	8a4c <assert_post_action>
    73ce:	e7d3      	b.n	7378 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    73d0:	4b0d      	ldr	r3, [pc, #52]	; (7408 <z_impl_k_thread_suspend+0xec>)
    73d2:	689b      	ldr	r3, [r3, #8]
    73d4:	42a3      	cmp	r3, r4
    73d6:	d000      	beq.n	73da <z_impl_k_thread_suspend+0xbe>
}
    73d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    73da:	f04f 0320 	mov.w	r3, #32
    73de:	f3ef 8011 	mrs	r0, BASEPRI
    73e2:	f383 8812 	msr	BASEPRI_MAX, r3
    73e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    73ea:	f002 f995 	bl	9718 <z_reschedule_irqlock>
    73ee:	e7f3      	b.n	73d8 <z_impl_k_thread_suspend+0xbc>
    73f0:	20005088 	.word	0x20005088
    73f4:	00009de8 	.word	0x00009de8
    73f8:	00009e48 	.word	0x00009e48
    73fc:	00009cd0 	.word	0x00009cd0
    7400:	00009e60 	.word	0x00009e60
    7404:	2000506c 	.word	0x2000506c
    7408:	2000504c 	.word	0x2000504c
    740c:	00009e18 	.word	0x00009e18
    7410:	00009e30 	.word	0x00009e30

00007414 <k_sched_unlock>:
{
    7414:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    7416:	2400      	movs	r4, #0
    7418:	f04f 0320 	mov.w	r3, #32
    741c:	f3ef 8511 	mrs	r5, BASEPRI
    7420:	f383 8812 	msr	BASEPRI_MAX, r3
    7424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7428:	4838      	ldr	r0, [pc, #224]	; (750c <k_sched_unlock+0xf8>)
    742a:	f7fe fc57 	bl	5cdc <z_spin_lock_valid>
    742e:	b118      	cbz	r0, 7438 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    7430:	4836      	ldr	r0, [pc, #216]	; (750c <k_sched_unlock+0xf8>)
    7432:	f7fe fc73 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    7436:	e036      	b.n	74a6 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7438:	4e35      	ldr	r6, [pc, #212]	; (7510 <k_sched_unlock+0xfc>)
    743a:	238e      	movs	r3, #142	; 0x8e
    743c:	4632      	mov	r2, r6
    743e:	4935      	ldr	r1, [pc, #212]	; (7514 <k_sched_unlock+0x100>)
    7440:	4835      	ldr	r0, [pc, #212]	; (7518 <k_sched_unlock+0x104>)
    7442:	f001 fb0a 	bl	8a5a <assert_print>
    7446:	4931      	ldr	r1, [pc, #196]	; (750c <k_sched_unlock+0xf8>)
    7448:	4834      	ldr	r0, [pc, #208]	; (751c <k_sched_unlock+0x108>)
    744a:	f001 fb06 	bl	8a5a <assert_print>
    744e:	218e      	movs	r1, #142	; 0x8e
    7450:	4630      	mov	r0, r6
    7452:	f001 fafb 	bl	8a4c <assert_post_action>
    7456:	e7eb      	b.n	7430 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    7458:	4c31      	ldr	r4, [pc, #196]	; (7520 <k_sched_unlock+0x10c>)
    745a:	f240 33bb 	movw	r3, #955	; 0x3bb
    745e:	4622      	mov	r2, r4
    7460:	4930      	ldr	r1, [pc, #192]	; (7524 <k_sched_unlock+0x110>)
    7462:	482d      	ldr	r0, [pc, #180]	; (7518 <k_sched_unlock+0x104>)
    7464:	f001 faf9 	bl	8a5a <assert_print>
    7468:	482f      	ldr	r0, [pc, #188]	; (7528 <k_sched_unlock+0x114>)
    746a:	f001 faf6 	bl	8a5a <assert_print>
    746e:	f240 31bb 	movw	r1, #955	; 0x3bb
    7472:	4620      	mov	r0, r4
    7474:	f001 faea 	bl	8a4c <assert_post_action>
    7478:	e01b      	b.n	74b2 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    747a:	4c29      	ldr	r4, [pc, #164]	; (7520 <k_sched_unlock+0x10c>)
    747c:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    7480:	4622      	mov	r2, r4
    7482:	492a      	ldr	r1, [pc, #168]	; (752c <k_sched_unlock+0x118>)
    7484:	4824      	ldr	r0, [pc, #144]	; (7518 <k_sched_unlock+0x104>)
    7486:	f001 fae8 	bl	8a5a <assert_print>
    748a:	4827      	ldr	r0, [pc, #156]	; (7528 <k_sched_unlock+0x114>)
    748c:	f001 fae5 	bl	8a5a <assert_print>
    7490:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7494:	4620      	mov	r0, r4
    7496:	f001 fad9 	bl	8a4c <assert_post_action>
    749a:	e00e      	b.n	74ba <k_sched_unlock+0xa6>
	__asm__ volatile(
    749c:	f385 8811 	msr	BASEPRI, r5
    74a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    74a4:	2401      	movs	r4, #1
    74a6:	bb2c      	cbnz	r4, 74f4 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    74a8:	4b21      	ldr	r3, [pc, #132]	; (7530 <k_sched_unlock+0x11c>)
    74aa:	689b      	ldr	r3, [r3, #8]
    74ac:	7bdb      	ldrb	r3, [r3, #15]
    74ae:	2b00      	cmp	r3, #0
    74b0:	d0d2      	beq.n	7458 <k_sched_unlock+0x44>
    74b2:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    74b6:	2b00      	cmp	r3, #0
    74b8:	d1df      	bne.n	747a <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    74ba:	4b1d      	ldr	r3, [pc, #116]	; (7530 <k_sched_unlock+0x11c>)
    74bc:	689a      	ldr	r2, [r3, #8]
    74be:	7bd3      	ldrb	r3, [r2, #15]
    74c0:	3301      	adds	r3, #1
    74c2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    74c4:	2000      	movs	r0, #0
    74c6:	f7ff fabf 	bl	6a48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74ca:	4810      	ldr	r0, [pc, #64]	; (750c <k_sched_unlock+0xf8>)
    74cc:	f7fe fc16 	bl	5cfc <z_spin_unlock_valid>
    74d0:	2800      	cmp	r0, #0
    74d2:	d1e3      	bne.n	749c <k_sched_unlock+0x88>
    74d4:	4c0e      	ldr	r4, [pc, #56]	; (7510 <k_sched_unlock+0xfc>)
    74d6:	23b9      	movs	r3, #185	; 0xb9
    74d8:	4622      	mov	r2, r4
    74da:	4916      	ldr	r1, [pc, #88]	; (7534 <k_sched_unlock+0x120>)
    74dc:	480e      	ldr	r0, [pc, #56]	; (7518 <k_sched_unlock+0x104>)
    74de:	f001 fabc 	bl	8a5a <assert_print>
    74e2:	490a      	ldr	r1, [pc, #40]	; (750c <k_sched_unlock+0xf8>)
    74e4:	4814      	ldr	r0, [pc, #80]	; (7538 <k_sched_unlock+0x124>)
    74e6:	f001 fab8 	bl	8a5a <assert_print>
    74ea:	21b9      	movs	r1, #185	; 0xb9
    74ec:	4620      	mov	r0, r4
    74ee:	f001 faad 	bl	8a4c <assert_post_action>
    74f2:	e7d3      	b.n	749c <k_sched_unlock+0x88>
	__asm__ volatile(
    74f4:	f04f 0320 	mov.w	r3, #32
    74f8:	f3ef 8011 	mrs	r0, BASEPRI
    74fc:	f383 8812 	msr	BASEPRI_MAX, r3
    7500:	f3bf 8f6f 	isb	sy
    7504:	f002 f908 	bl	9718 <z_reschedule_irqlock>
}
    7508:	bd70      	pop	{r4, r5, r6, pc}
    750a:	bf00      	nop
    750c:	20005088 	.word	0x20005088
    7510:	00009de8 	.word	0x00009de8
    7514:	00009e48 	.word	0x00009e48
    7518:	00009cd0 	.word	0x00009cd0
    751c:	00009e60 	.word	0x00009e60
    7520:	0000ac18 	.word	0x0000ac18
    7524:	0000aca0 	.word	0x0000aca0
    7528:	0000ab70 	.word	0x0000ab70
    752c:	0000aa28 	.word	0x0000aa28
    7530:	2000504c 	.word	0x2000504c
    7534:	00009e18 	.word	0x00009e18
    7538:	00009e30 	.word	0x00009e30

0000753c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    753e:	7b43      	ldrb	r3, [r0, #13]
    7540:	f013 0f08 	tst.w	r3, #8
    7544:	d145      	bne.n	75d2 <end_thread+0x96>
    7546:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    7548:	f043 0308 	orr.w	r3, r3, #8
    754c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    754e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7552:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    7554:	f013 0f80 	tst.w	r3, #128	; 0x80
    7558:	d12d      	bne.n	75b6 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    755a:	68ab      	ldr	r3, [r5, #8]
    755c:	b15b      	cbz	r3, 7576 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    755e:	4628      	mov	r0, r5
    7560:	f7ff f8ca 	bl	66f8 <pended_on_thread>
    7564:	4629      	mov	r1, r5
    7566:	f7ff fa4b 	bl	6a00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    756a:	7b6b      	ldrb	r3, [r5, #13]
    756c:	f023 0302 	bic.w	r3, r3, #2
    7570:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    7572:	2300      	movs	r3, #0
    7574:	60ab      	str	r3, [r5, #8]
    7576:	f105 0018 	add.w	r0, r5, #24
    757a:	f000 fc43 	bl	7e04 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    757e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    7582:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7584:	42bc      	cmp	r4, r7
    7586:	d01e      	beq.n	75c6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7588:	b1ec      	cbz	r4, 75c6 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    758a:	4620      	mov	r0, r4
    758c:	f7ff f8b4 	bl	66f8 <pended_on_thread>
    7590:	4621      	mov	r1, r4
    7592:	f7ff fa35 	bl	6a00 <z_priq_dumb_remove>
    7596:	7b63      	ldrb	r3, [r4, #13]
    7598:	f023 0302 	bic.w	r3, r3, #2
    759c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    759e:	2600      	movs	r6, #0
    75a0:	60a6      	str	r6, [r4, #8]
    75a2:	f104 0018 	add.w	r0, r4, #24
    75a6:	f000 fc2d 	bl	7e04 <z_abort_timeout>
    75aa:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    75ae:	4620      	mov	r0, r4
    75b0:	f7ff fba4 	bl	6cfc <ready_thread>
    75b4:	e7e5      	b.n	7582 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    75ba:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    75bc:	4601      	mov	r1, r0
    75be:	4805      	ldr	r0, [pc, #20]	; (75d4 <end_thread+0x98>)
    75c0:	f7ff fa1e 	bl	6a00 <z_priq_dumb_remove>
}
    75c4:	e7c9      	b.n	755a <end_thread+0x1e>
		update_cache(1);
    75c6:	2001      	movs	r0, #1
    75c8:	f7ff fa3e 	bl	6a48 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    75cc:	4628      	mov	r0, r5
    75ce:	f7fe fbad 	bl	5d2c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    75d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75d4:	2000506c 	.word	0x2000506c

000075d8 <z_unpend_first_thread>:
{
    75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75da:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    75dc:	2500      	movs	r5, #0
    75de:	f04f 0320 	mov.w	r3, #32
    75e2:	f3ef 8711 	mrs	r7, BASEPRI
    75e6:	f383 8812 	msr	BASEPRI_MAX, r3
    75ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75ee:	4825      	ldr	r0, [pc, #148]	; (7684 <z_unpend_first_thread+0xac>)
    75f0:	f7fe fb74 	bl	5cdc <z_spin_lock_valid>
    75f4:	b120      	cbz	r0, 7600 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    75f6:	4823      	ldr	r0, [pc, #140]	; (7684 <z_unpend_first_thread+0xac>)
    75f8:	f7fe fb90 	bl	5d1c <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    75fc:	2400      	movs	r4, #0
	return k;
    75fe:	e018      	b.n	7632 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7600:	4c21      	ldr	r4, [pc, #132]	; (7688 <z_unpend_first_thread+0xb0>)
    7602:	238e      	movs	r3, #142	; 0x8e
    7604:	4622      	mov	r2, r4
    7606:	4921      	ldr	r1, [pc, #132]	; (768c <z_unpend_first_thread+0xb4>)
    7608:	4821      	ldr	r0, [pc, #132]	; (7690 <z_unpend_first_thread+0xb8>)
    760a:	f001 fa26 	bl	8a5a <assert_print>
    760e:	491d      	ldr	r1, [pc, #116]	; (7684 <z_unpend_first_thread+0xac>)
    7610:	4820      	ldr	r0, [pc, #128]	; (7694 <z_unpend_first_thread+0xbc>)
    7612:	f001 fa22 	bl	8a5a <assert_print>
    7616:	218e      	movs	r1, #142	; 0x8e
    7618:	4620      	mov	r0, r4
    761a:	f001 fa17 	bl	8a4c <assert_post_action>
    761e:	e7ea      	b.n	75f6 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7620:	4818      	ldr	r0, [pc, #96]	; (7684 <z_unpend_first_thread+0xac>)
    7622:	f7fe fb6b 	bl	5cfc <z_spin_unlock_valid>
    7626:	b1d8      	cbz	r0, 7660 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    7628:	f387 8811 	msr	BASEPRI, r7
    762c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7630:	2501      	movs	r5, #1
    7632:	bb2d      	cbnz	r5, 7680 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    7634:	4630      	mov	r0, r6
    7636:	f002 f884 	bl	9742 <z_priq_dumb_best>
		if (thread != NULL) {
    763a:	4604      	mov	r4, r0
    763c:	2800      	cmp	r0, #0
    763e:	d0ef      	beq.n	7620 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7640:	f7ff f85a 	bl	66f8 <pended_on_thread>
    7644:	4621      	mov	r1, r4
    7646:	f7ff f9db 	bl	6a00 <z_priq_dumb_remove>
    764a:	7b63      	ldrb	r3, [r4, #13]
    764c:	f023 0302 	bic.w	r3, r3, #2
    7650:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7652:	2300      	movs	r3, #0
    7654:	60a3      	str	r3, [r4, #8]
    7656:	f104 0018 	add.w	r0, r4, #24
    765a:	f000 fbd3 	bl	7e04 <z_abort_timeout>
    765e:	e7df      	b.n	7620 <z_unpend_first_thread+0x48>
    7660:	4d09      	ldr	r5, [pc, #36]	; (7688 <z_unpend_first_thread+0xb0>)
    7662:	23b9      	movs	r3, #185	; 0xb9
    7664:	462a      	mov	r2, r5
    7666:	490c      	ldr	r1, [pc, #48]	; (7698 <z_unpend_first_thread+0xc0>)
    7668:	4809      	ldr	r0, [pc, #36]	; (7690 <z_unpend_first_thread+0xb8>)
    766a:	f001 f9f6 	bl	8a5a <assert_print>
    766e:	4905      	ldr	r1, [pc, #20]	; (7684 <z_unpend_first_thread+0xac>)
    7670:	480a      	ldr	r0, [pc, #40]	; (769c <z_unpend_first_thread+0xc4>)
    7672:	f001 f9f2 	bl	8a5a <assert_print>
    7676:	21b9      	movs	r1, #185	; 0xb9
    7678:	4628      	mov	r0, r5
    767a:	f001 f9e7 	bl	8a4c <assert_post_action>
    767e:	e7d3      	b.n	7628 <z_unpend_first_thread+0x50>
}
    7680:	4620      	mov	r0, r4
    7682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7684:	20005088 	.word	0x20005088
    7688:	00009de8 	.word	0x00009de8
    768c:	00009e48 	.word	0x00009e48
    7690:	00009cd0 	.word	0x00009cd0
    7694:	00009e60 	.word	0x00009e60
    7698:	00009e18 	.word	0x00009e18
    769c:	00009e30 	.word	0x00009e30

000076a0 <z_sched_init>:
{
    76a0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    76a2:	4804      	ldr	r0, [pc, #16]	; (76b4 <z_sched_init+0x14>)
    76a4:	f002 f854 	bl	9750 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    76a8:	2100      	movs	r1, #0
    76aa:	4608      	mov	r0, r1
    76ac:	f7ff f862 	bl	6774 <k_sched_time_slice_set>
}
    76b0:	bd08      	pop	{r3, pc}
    76b2:	bf00      	nop
    76b4:	20005068 	.word	0x20005068

000076b8 <z_impl_k_yield>:
{
    76b8:	b570      	push	{r4, r5, r6, lr}
    76ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    76be:	2b00      	cmp	r3, #0
    76c0:	d149      	bne.n	7756 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    76c2:	f04f 0320 	mov.w	r3, #32
    76c6:	f3ef 8611 	mrs	r6, BASEPRI
    76ca:	f383 8812 	msr	BASEPRI_MAX, r3
    76ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76d2:	4843      	ldr	r0, [pc, #268]	; (77e0 <z_impl_k_yield+0x128>)
    76d4:	f7fe fb02 	bl	5cdc <z_spin_lock_valid>
    76d8:	2800      	cmp	r0, #0
    76da:	d04d      	beq.n	7778 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    76dc:	4840      	ldr	r0, [pc, #256]	; (77e0 <z_impl_k_yield+0x128>)
    76de:	f7fe fb1d 	bl	5d1c <z_spin_lock_set_owner>
		dequeue_thread(_current);
    76e2:	4c40      	ldr	r4, [pc, #256]	; (77e4 <z_impl_k_yield+0x12c>)
    76e4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76e6:	7b4b      	ldrb	r3, [r1, #13]
    76e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    76ec:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    76ee:	f104 0020 	add.w	r0, r4, #32
    76f2:	f7ff f985 	bl	6a00 <z_priq_dumb_remove>
	queue_thread(_current);
    76f6:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    76f8:	7b6b      	ldrb	r3, [r5, #13]
    76fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76fe:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7700:	4b39      	ldr	r3, [pc, #228]	; (77e8 <z_impl_k_yield+0x130>)
    7702:	429d      	cmp	r5, r3
    7704:	d048      	beq.n	7798 <z_impl_k_yield+0xe0>
	return list->head == list;
    7706:	4b37      	ldr	r3, [pc, #220]	; (77e4 <z_impl_k_yield+0x12c>)
    7708:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    770c:	429c      	cmp	r4, r3
    770e:	d055      	beq.n	77bc <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7710:	b16c      	cbz	r4, 772e <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7712:	4621      	mov	r1, r4
    7714:	4628      	mov	r0, r5
    7716:	f001 fff5 	bl	9704 <z_sched_prio_cmp>
    771a:	2800      	cmp	r0, #0
    771c:	dc48      	bgt.n	77b0 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    771e:	b134      	cbz	r4, 772e <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    7720:	4b30      	ldr	r3, [pc, #192]	; (77e4 <z_impl_k_yield+0x12c>)
    7722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7724:	429c      	cmp	r4, r3
    7726:	d002      	beq.n	772e <z_impl_k_yield+0x76>
    7728:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    772a:	2c00      	cmp	r4, #0
    772c:	d1f0      	bne.n	7710 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    772e:	4b2d      	ldr	r3, [pc, #180]	; (77e4 <z_impl_k_yield+0x12c>)
    7730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    7732:	f103 0120 	add.w	r1, r3, #32
    7736:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7738:	606a      	str	r2, [r5, #4]
	tail->next = node;
    773a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    773c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    773e:	2001      	movs	r0, #1
    7740:	f7ff f982 	bl	6a48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7744:	4826      	ldr	r0, [pc, #152]	; (77e0 <z_impl_k_yield+0x128>)
    7746:	f7fe fad9 	bl	5cfc <z_spin_unlock_valid>
    774a:	2800      	cmp	r0, #0
    774c:	d038      	beq.n	77c0 <z_impl_k_yield+0x108>
    774e:	4630      	mov	r0, r6
    7750:	f7fa fc14 	bl	1f7c <arch_swap>
}
    7754:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    7756:	4c25      	ldr	r4, [pc, #148]	; (77ec <z_impl_k_yield+0x134>)
    7758:	f240 5332 	movw	r3, #1330	; 0x532
    775c:	4622      	mov	r2, r4
    775e:	4924      	ldr	r1, [pc, #144]	; (77f0 <z_impl_k_yield+0x138>)
    7760:	4824      	ldr	r0, [pc, #144]	; (77f4 <z_impl_k_yield+0x13c>)
    7762:	f001 f97a 	bl	8a5a <assert_print>
    7766:	4824      	ldr	r0, [pc, #144]	; (77f8 <z_impl_k_yield+0x140>)
    7768:	f001 f977 	bl	8a5a <assert_print>
    776c:	f240 5132 	movw	r1, #1330	; 0x532
    7770:	4620      	mov	r0, r4
    7772:	f001 f96b 	bl	8a4c <assert_post_action>
    7776:	e7a4      	b.n	76c2 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7778:	4c20      	ldr	r4, [pc, #128]	; (77fc <z_impl_k_yield+0x144>)
    777a:	238e      	movs	r3, #142	; 0x8e
    777c:	4622      	mov	r2, r4
    777e:	4920      	ldr	r1, [pc, #128]	; (7800 <z_impl_k_yield+0x148>)
    7780:	481c      	ldr	r0, [pc, #112]	; (77f4 <z_impl_k_yield+0x13c>)
    7782:	f001 f96a 	bl	8a5a <assert_print>
    7786:	4916      	ldr	r1, [pc, #88]	; (77e0 <z_impl_k_yield+0x128>)
    7788:	481e      	ldr	r0, [pc, #120]	; (7804 <z_impl_k_yield+0x14c>)
    778a:	f001 f966 	bl	8a5a <assert_print>
    778e:	218e      	movs	r1, #142	; 0x8e
    7790:	4620      	mov	r0, r4
    7792:	f001 f95b 	bl	8a4c <assert_post_action>
    7796:	e7a1      	b.n	76dc <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7798:	4c14      	ldr	r4, [pc, #80]	; (77ec <z_impl_k_yield+0x134>)
    779a:	23ba      	movs	r3, #186	; 0xba
    779c:	4622      	mov	r2, r4
    779e:	491a      	ldr	r1, [pc, #104]	; (7808 <z_impl_k_yield+0x150>)
    77a0:	4814      	ldr	r0, [pc, #80]	; (77f4 <z_impl_k_yield+0x13c>)
    77a2:	f001 f95a 	bl	8a5a <assert_print>
    77a6:	21ba      	movs	r1, #186	; 0xba
    77a8:	4620      	mov	r0, r4
    77aa:	f001 f94f 	bl	8a4c <assert_post_action>
    77ae:	e7aa      	b.n	7706 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    77b0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    77b2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    77b4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    77b6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    77b8:	6065      	str	r5, [r4, #4]
}
    77ba:	e7c0      	b.n	773e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    77bc:	2400      	movs	r4, #0
    77be:	e7a7      	b.n	7710 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77c0:	4c0e      	ldr	r4, [pc, #56]	; (77fc <z_impl_k_yield+0x144>)
    77c2:	23d0      	movs	r3, #208	; 0xd0
    77c4:	4622      	mov	r2, r4
    77c6:	4911      	ldr	r1, [pc, #68]	; (780c <z_impl_k_yield+0x154>)
    77c8:	480a      	ldr	r0, [pc, #40]	; (77f4 <z_impl_k_yield+0x13c>)
    77ca:	f001 f946 	bl	8a5a <assert_print>
    77ce:	4904      	ldr	r1, [pc, #16]	; (77e0 <z_impl_k_yield+0x128>)
    77d0:	480f      	ldr	r0, [pc, #60]	; (7810 <z_impl_k_yield+0x158>)
    77d2:	f001 f942 	bl	8a5a <assert_print>
    77d6:	21d0      	movs	r1, #208	; 0xd0
    77d8:	4620      	mov	r0, r4
    77da:	f001 f937 	bl	8a4c <assert_post_action>
    77de:	e7b6      	b.n	774e <z_impl_k_yield+0x96>
    77e0:	20005088 	.word	0x20005088
    77e4:	2000504c 	.word	0x2000504c
    77e8:	200043f8 	.word	0x200043f8
    77ec:	0000ac18 	.word	0x0000ac18
    77f0:	0000aa28 	.word	0x0000aa28
    77f4:	00009cd0 	.word	0x00009cd0
    77f8:	0000ab70 	.word	0x0000ab70
    77fc:	00009de8 	.word	0x00009de8
    7800:	00009e48 	.word	0x00009e48
    7804:	00009e60 	.word	0x00009e60
    7808:	0000ac54 	.word	0x0000ac54
    780c:	00009e18 	.word	0x00009e18
    7810:	00009e30 	.word	0x00009e30

00007814 <z_tick_sleep>:
{
    7814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7818:	4604      	mov	r4, r0
    781a:	460e      	mov	r6, r1
    781c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7820:	2b00      	cmp	r3, #0
    7822:	d14e      	bne.n	78c2 <z_tick_sleep+0xae>
	if (ticks == 0) {
    7824:	ea54 0306 	orrs.w	r3, r4, r6
    7828:	d05c      	beq.n	78e4 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    782a:	f06f 0301 	mvn.w	r3, #1
    782e:	1b1b      	subs	r3, r3, r4
    7830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7834:	eb62 0206 	sbc.w	r2, r2, r6
    7838:	2b01      	cmp	r3, #1
    783a:	f172 0300 	sbcs.w	r3, r2, #0
    783e:	db55      	blt.n	78ec <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7840:	f06f 0501 	mvn.w	r5, #1
    7844:	1b2d      	subs	r5, r5, r4
    7846:	f04f 0320 	mov.w	r3, #32
    784a:	f3ef 8911 	mrs	r9, BASEPRI
    784e:	f383 8812 	msr	BASEPRI_MAX, r3
    7852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7856:	4840      	ldr	r0, [pc, #256]	; (7958 <z_tick_sleep+0x144>)
    7858:	f7fe fa40 	bl	5cdc <z_spin_lock_valid>
    785c:	2800      	cmp	r0, #0
    785e:	d049      	beq.n	78f4 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    7860:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 7958 <z_tick_sleep+0x144>
    7864:	4640      	mov	r0, r8
    7866:	f7fe fa59 	bl	5d1c <z_spin_lock_set_owner>
	pending_current = _current;
    786a:	4f3c      	ldr	r7, [pc, #240]	; (795c <z_tick_sleep+0x148>)
    786c:	68b8      	ldr	r0, [r7, #8]
    786e:	4b3c      	ldr	r3, [pc, #240]	; (7960 <z_tick_sleep+0x14c>)
    7870:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7872:	f7ff fbbb 	bl	6fec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7876:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7878:	4622      	mov	r2, r4
    787a:	4633      	mov	r3, r6
    787c:	4939      	ldr	r1, [pc, #228]	; (7964 <z_tick_sleep+0x150>)
    787e:	3018      	adds	r0, #24
    7880:	f000 f9dc 	bl	7c3c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7884:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7886:	7b53      	ldrb	r3, [r2, #13]
    7888:	f043 0310 	orr.w	r3, r3, #16
    788c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    788e:	4640      	mov	r0, r8
    7890:	f7fe fa34 	bl	5cfc <z_spin_unlock_valid>
    7894:	2800      	cmp	r0, #0
    7896:	d03d      	beq.n	7914 <z_tick_sleep+0x100>
    7898:	4648      	mov	r0, r9
    789a:	f7fa fb6f 	bl	1f7c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    789e:	4b2f      	ldr	r3, [pc, #188]	; (795c <z_tick_sleep+0x148>)
    78a0:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    78a2:	7b5b      	ldrb	r3, [r3, #13]
    78a4:	f013 0f10 	tst.w	r3, #16
    78a8:	d144      	bne.n	7934 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    78aa:	f001 ff6c 	bl	9786 <sys_clock_tick_get_32>
    78ae:	1a28      	subs	r0, r5, r0
    78b0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    78b4:	2801      	cmp	r0, #1
    78b6:	f173 0300 	sbcs.w	r3, r3, #0
    78ba:	da00      	bge.n	78be <z_tick_sleep+0xaa>
	return 0;
    78bc:	2000      	movs	r0, #0
}
    78be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    78c2:	4d29      	ldr	r5, [pc, #164]	; (7968 <z_tick_sleep+0x154>)
    78c4:	f240 534e 	movw	r3, #1358	; 0x54e
    78c8:	462a      	mov	r2, r5
    78ca:	4928      	ldr	r1, [pc, #160]	; (796c <z_tick_sleep+0x158>)
    78cc:	4828      	ldr	r0, [pc, #160]	; (7970 <z_tick_sleep+0x15c>)
    78ce:	f001 f8c4 	bl	8a5a <assert_print>
    78d2:	4828      	ldr	r0, [pc, #160]	; (7974 <z_tick_sleep+0x160>)
    78d4:	f001 f8c1 	bl	8a5a <assert_print>
    78d8:	f240 514e 	movw	r1, #1358	; 0x54e
    78dc:	4628      	mov	r0, r5
    78de:	f001 f8b5 	bl	8a4c <assert_post_action>
    78e2:	e79f      	b.n	7824 <z_tick_sleep+0x10>
	z_impl_k_yield();
    78e4:	f7ff fee8 	bl	76b8 <z_impl_k_yield>
		return 0;
    78e8:	2000      	movs	r0, #0
    78ea:	e7e8      	b.n	78be <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    78ec:	f001 ff4b 	bl	9786 <sys_clock_tick_get_32>
    78f0:	1905      	adds	r5, r0, r4
    78f2:	e7a8      	b.n	7846 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78f4:	4f20      	ldr	r7, [pc, #128]	; (7978 <z_tick_sleep+0x164>)
    78f6:	238e      	movs	r3, #142	; 0x8e
    78f8:	463a      	mov	r2, r7
    78fa:	4920      	ldr	r1, [pc, #128]	; (797c <z_tick_sleep+0x168>)
    78fc:	481c      	ldr	r0, [pc, #112]	; (7970 <z_tick_sleep+0x15c>)
    78fe:	f001 f8ac 	bl	8a5a <assert_print>
    7902:	4915      	ldr	r1, [pc, #84]	; (7958 <z_tick_sleep+0x144>)
    7904:	481e      	ldr	r0, [pc, #120]	; (7980 <z_tick_sleep+0x16c>)
    7906:	f001 f8a8 	bl	8a5a <assert_print>
    790a:	218e      	movs	r1, #142	; 0x8e
    790c:	4638      	mov	r0, r7
    790e:	f001 f89d 	bl	8a4c <assert_post_action>
    7912:	e7a5      	b.n	7860 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7914:	4c18      	ldr	r4, [pc, #96]	; (7978 <z_tick_sleep+0x164>)
    7916:	23d0      	movs	r3, #208	; 0xd0
    7918:	4622      	mov	r2, r4
    791a:	491a      	ldr	r1, [pc, #104]	; (7984 <z_tick_sleep+0x170>)
    791c:	4814      	ldr	r0, [pc, #80]	; (7970 <z_tick_sleep+0x15c>)
    791e:	f001 f89c 	bl	8a5a <assert_print>
    7922:	4641      	mov	r1, r8
    7924:	4818      	ldr	r0, [pc, #96]	; (7988 <z_tick_sleep+0x174>)
    7926:	f001 f898 	bl	8a5a <assert_print>
    792a:	21d0      	movs	r1, #208	; 0xd0
    792c:	4620      	mov	r0, r4
    792e:	f001 f88d 	bl	8a4c <assert_post_action>
    7932:	e7b1      	b.n	7898 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7934:	4c0c      	ldr	r4, [pc, #48]	; (7968 <z_tick_sleep+0x154>)
    7936:	f240 536f 	movw	r3, #1391	; 0x56f
    793a:	4622      	mov	r2, r4
    793c:	4913      	ldr	r1, [pc, #76]	; (798c <z_tick_sleep+0x178>)
    793e:	480c      	ldr	r0, [pc, #48]	; (7970 <z_tick_sleep+0x15c>)
    7940:	f001 f88b 	bl	8a5a <assert_print>
    7944:	480b      	ldr	r0, [pc, #44]	; (7974 <z_tick_sleep+0x160>)
    7946:	f001 f888 	bl	8a5a <assert_print>
    794a:	f240 516f 	movw	r1, #1391	; 0x56f
    794e:	4620      	mov	r0, r4
    7950:	f001 f87c 	bl	8a4c <assert_post_action>
    7954:	e7a9      	b.n	78aa <z_tick_sleep+0x96>
    7956:	bf00      	nop
    7958:	20005088 	.word	0x20005088
    795c:	2000504c 	.word	0x2000504c
    7960:	20005084 	.word	0x20005084
    7964:	00006f05 	.word	0x00006f05
    7968:	0000ac18 	.word	0x0000ac18
    796c:	0000aa28 	.word	0x0000aa28
    7970:	00009cd0 	.word	0x00009cd0
    7974:	0000ab70 	.word	0x0000ab70
    7978:	00009de8 	.word	0x00009de8
    797c:	00009e48 	.word	0x00009e48
    7980:	00009e60 	.word	0x00009e60
    7984:	00009e18 	.word	0x00009e18
    7988:	00009e30 	.word	0x00009e30
    798c:	0000acd4 	.word	0x0000acd4

00007990 <z_impl_k_sleep>:
{
    7990:	b570      	push	{r4, r5, r6, lr}
    7992:	4605      	mov	r5, r0
    7994:	460c      	mov	r4, r1
    7996:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    799a:	bb13      	cbnz	r3, 79e2 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    799c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    79a0:	bf08      	it	eq
    79a2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    79a6:	d02d      	beq.n	7a04 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    79a8:	4628      	mov	r0, r5
    79aa:	4621      	mov	r1, r4
    79ac:	f7ff ff32 	bl	7814 <z_tick_sleep>
    79b0:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    79b2:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    79b4:	0151      	lsls	r1, r2, #5
    79b6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    79ba:	0143      	lsls	r3, r0, #5
    79bc:	1a1b      	subs	r3, r3, r0
    79be:	eb61 0102 	sbc.w	r1, r1, r2
    79c2:	0088      	lsls	r0, r1, #2
    79c4:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    79c8:	009b      	lsls	r3, r3, #2
    79ca:	eb13 030c 	adds.w	r3, r3, ip
    79ce:	eb42 0000 	adc.w	r0, r2, r0
    79d2:	00c0      	lsls	r0, r0, #3
    79d4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    79d8:	f3c3 3310 	ubfx	r3, r3, #12, #17
    79dc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    79e0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    79e2:	4e0c      	ldr	r6, [pc, #48]	; (7a14 <z_impl_k_sleep+0x84>)
    79e4:	f240 537e 	movw	r3, #1406	; 0x57e
    79e8:	4632      	mov	r2, r6
    79ea:	490b      	ldr	r1, [pc, #44]	; (7a18 <z_impl_k_sleep+0x88>)
    79ec:	480b      	ldr	r0, [pc, #44]	; (7a1c <z_impl_k_sleep+0x8c>)
    79ee:	f001 f834 	bl	8a5a <assert_print>
    79f2:	480b      	ldr	r0, [pc, #44]	; (7a20 <z_impl_k_sleep+0x90>)
    79f4:	f001 f831 	bl	8a5a <assert_print>
    79f8:	f240 517e 	movw	r1, #1406	; 0x57e
    79fc:	4630      	mov	r0, r6
    79fe:	f001 f825 	bl	8a4c <assert_post_action>
    7a02:	e7cb      	b.n	799c <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    7a04:	4b07      	ldr	r3, [pc, #28]	; (7a24 <z_impl_k_sleep+0x94>)
    7a06:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7a08:	f7ff fc88 	bl	731c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    7a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7a10:	e7e6      	b.n	79e0 <z_impl_k_sleep+0x50>
    7a12:	bf00      	nop
    7a14:	0000ac18 	.word	0x0000ac18
    7a18:	0000aa28 	.word	0x0000aa28
    7a1c:	00009cd0 	.word	0x00009cd0
    7a20:	0000ab70 	.word	0x0000ab70
    7a24:	2000504c 	.word	0x2000504c

00007a28 <z_impl_z_current_get>:
}
    7a28:	4b01      	ldr	r3, [pc, #4]	; (7a30 <z_impl_z_current_get+0x8>)
    7a2a:	6898      	ldr	r0, [r3, #8]
    7a2c:	4770      	bx	lr
    7a2e:	bf00      	nop
    7a30:	2000504c 	.word	0x2000504c

00007a34 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    7a34:	b570      	push	{r4, r5, r6, lr}
    7a36:	4604      	mov	r4, r0
    7a38:	f04f 0320 	mov.w	r3, #32
    7a3c:	f3ef 8511 	mrs	r5, BASEPRI
    7a40:	f383 8812 	msr	BASEPRI_MAX, r3
    7a44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a48:	4840      	ldr	r0, [pc, #256]	; (7b4c <z_thread_abort+0x118>)
    7a4a:	f7fe f947 	bl	5cdc <z_spin_lock_valid>
    7a4e:	b1b8      	cbz	r0, 7a80 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    7a50:	483e      	ldr	r0, [pc, #248]	; (7b4c <z_thread_abort+0x118>)
    7a52:	f7fe f963 	bl	5d1c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7a56:	7b63      	ldrb	r3, [r4, #13]
    7a58:	f013 0f08 	tst.w	r3, #8
    7a5c:	d120      	bne.n	7aa0 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    7a5e:	4620      	mov	r0, r4
    7a60:	f7ff fd6c 	bl	753c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    7a64:	4b3a      	ldr	r3, [pc, #232]	; (7b50 <z_thread_abort+0x11c>)
    7a66:	689b      	ldr	r3, [r3, #8]
    7a68:	42a3      	cmp	r3, r4
    7a6a:	d032      	beq.n	7ad2 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a6c:	4837      	ldr	r0, [pc, #220]	; (7b4c <z_thread_abort+0x118>)
    7a6e:	f7fe f945 	bl	5cfc <z_spin_unlock_valid>
    7a72:	2800      	cmp	r0, #0
    7a74:	d059      	beq.n	7b2a <z_thread_abort+0xf6>
	__asm__ volatile(
    7a76:	f385 8811 	msr	BASEPRI, r5
    7a7a:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7a7e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a80:	4e34      	ldr	r6, [pc, #208]	; (7b54 <z_thread_abort+0x120>)
    7a82:	238e      	movs	r3, #142	; 0x8e
    7a84:	4632      	mov	r2, r6
    7a86:	4934      	ldr	r1, [pc, #208]	; (7b58 <z_thread_abort+0x124>)
    7a88:	4834      	ldr	r0, [pc, #208]	; (7b5c <z_thread_abort+0x128>)
    7a8a:	f000 ffe6 	bl	8a5a <assert_print>
    7a8e:	492f      	ldr	r1, [pc, #188]	; (7b4c <z_thread_abort+0x118>)
    7a90:	4833      	ldr	r0, [pc, #204]	; (7b60 <z_thread_abort+0x12c>)
    7a92:	f000 ffe2 	bl	8a5a <assert_print>
    7a96:	218e      	movs	r1, #142	; 0x8e
    7a98:	4630      	mov	r0, r6
    7a9a:	f000 ffd7 	bl	8a4c <assert_post_action>
    7a9e:	e7d7      	b.n	7a50 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7aa0:	482a      	ldr	r0, [pc, #168]	; (7b4c <z_thread_abort+0x118>)
    7aa2:	f7fe f92b 	bl	5cfc <z_spin_unlock_valid>
    7aa6:	b120      	cbz	r0, 7ab2 <z_thread_abort+0x7e>
    7aa8:	f385 8811 	msr	BASEPRI, r5
    7aac:	f3bf 8f6f 	isb	sy
		return;
    7ab0:	e7e5      	b.n	7a7e <z_thread_abort+0x4a>
    7ab2:	4c28      	ldr	r4, [pc, #160]	; (7b54 <z_thread_abort+0x120>)
    7ab4:	23b9      	movs	r3, #185	; 0xb9
    7ab6:	4622      	mov	r2, r4
    7ab8:	492a      	ldr	r1, [pc, #168]	; (7b64 <z_thread_abort+0x130>)
    7aba:	4828      	ldr	r0, [pc, #160]	; (7b5c <z_thread_abort+0x128>)
    7abc:	f000 ffcd 	bl	8a5a <assert_print>
    7ac0:	4922      	ldr	r1, [pc, #136]	; (7b4c <z_thread_abort+0x118>)
    7ac2:	4829      	ldr	r0, [pc, #164]	; (7b68 <z_thread_abort+0x134>)
    7ac4:	f000 ffc9 	bl	8a5a <assert_print>
    7ac8:	21b9      	movs	r1, #185	; 0xb9
    7aca:	4620      	mov	r0, r4
    7acc:	f000 ffbe 	bl	8a4c <assert_post_action>
    7ad0:	e7ea      	b.n	7aa8 <z_thread_abort+0x74>
    7ad2:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d1c8      	bne.n	7a6c <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ada:	481c      	ldr	r0, [pc, #112]	; (7b4c <z_thread_abort+0x118>)
    7adc:	f7fe f90e 	bl	5cfc <z_spin_unlock_valid>
    7ae0:	b198      	cbz	r0, 7b0a <z_thread_abort+0xd6>
    7ae2:	4628      	mov	r0, r5
    7ae4:	f7fa fa4a 	bl	1f7c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7ae8:	4c20      	ldr	r4, [pc, #128]	; (7b6c <z_thread_abort+0x138>)
    7aea:	f240 63ac 	movw	r3, #1708	; 0x6ac
    7aee:	4622      	mov	r2, r4
    7af0:	491f      	ldr	r1, [pc, #124]	; (7b70 <z_thread_abort+0x13c>)
    7af2:	481a      	ldr	r0, [pc, #104]	; (7b5c <z_thread_abort+0x128>)
    7af4:	f000 ffb1 	bl	8a5a <assert_print>
    7af8:	481e      	ldr	r0, [pc, #120]	; (7b74 <z_thread_abort+0x140>)
    7afa:	f000 ffae 	bl	8a5a <assert_print>
    7afe:	f240 61ac 	movw	r1, #1708	; 0x6ac
    7b02:	4620      	mov	r0, r4
    7b04:	f000 ffa2 	bl	8a4c <assert_post_action>
    7b08:	e7b0      	b.n	7a6c <z_thread_abort+0x38>
    7b0a:	4c12      	ldr	r4, [pc, #72]	; (7b54 <z_thread_abort+0x120>)
    7b0c:	23d0      	movs	r3, #208	; 0xd0
    7b0e:	4622      	mov	r2, r4
    7b10:	4914      	ldr	r1, [pc, #80]	; (7b64 <z_thread_abort+0x130>)
    7b12:	4812      	ldr	r0, [pc, #72]	; (7b5c <z_thread_abort+0x128>)
    7b14:	f000 ffa1 	bl	8a5a <assert_print>
    7b18:	490c      	ldr	r1, [pc, #48]	; (7b4c <z_thread_abort+0x118>)
    7b1a:	4813      	ldr	r0, [pc, #76]	; (7b68 <z_thread_abort+0x134>)
    7b1c:	f000 ff9d 	bl	8a5a <assert_print>
    7b20:	21d0      	movs	r1, #208	; 0xd0
    7b22:	4620      	mov	r0, r4
    7b24:	f000 ff92 	bl	8a4c <assert_post_action>
    7b28:	e7db      	b.n	7ae2 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b2a:	4c0a      	ldr	r4, [pc, #40]	; (7b54 <z_thread_abort+0x120>)
    7b2c:	23b9      	movs	r3, #185	; 0xb9
    7b2e:	4622      	mov	r2, r4
    7b30:	490c      	ldr	r1, [pc, #48]	; (7b64 <z_thread_abort+0x130>)
    7b32:	480a      	ldr	r0, [pc, #40]	; (7b5c <z_thread_abort+0x128>)
    7b34:	f000 ff91 	bl	8a5a <assert_print>
    7b38:	4904      	ldr	r1, [pc, #16]	; (7b4c <z_thread_abort+0x118>)
    7b3a:	480b      	ldr	r0, [pc, #44]	; (7b68 <z_thread_abort+0x134>)
    7b3c:	f000 ff8d 	bl	8a5a <assert_print>
    7b40:	21b9      	movs	r1, #185	; 0xb9
    7b42:	4620      	mov	r0, r4
    7b44:	f000 ff82 	bl	8a4c <assert_post_action>
    7b48:	e795      	b.n	7a76 <z_thread_abort+0x42>
    7b4a:	bf00      	nop
    7b4c:	20005088 	.word	0x20005088
    7b50:	2000504c 	.word	0x2000504c
    7b54:	00009de8 	.word	0x00009de8
    7b58:	00009e48 	.word	0x00009e48
    7b5c:	00009cd0 	.word	0x00009cd0
    7b60:	00009e60 	.word	0x00009e60
    7b64:	00009e18 	.word	0x00009e18
    7b68:	00009e30 	.word	0x00009e30
    7b6c:	0000ac18 	.word	0x0000ac18
    7b70:	00009ccc 	.word	0x00009ccc
    7b74:	0000ad14 	.word	0x0000ad14

00007b78 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7b78:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7b7a:	4806      	ldr	r0, [pc, #24]	; (7b94 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7b7c:	4a06      	ldr	r2, [pc, #24]	; (7b98 <z_data_copy+0x20>)
    7b7e:	1a12      	subs	r2, r2, r0
    7b80:	4906      	ldr	r1, [pc, #24]	; (7b9c <z_data_copy+0x24>)
    7b82:	f001 fd3a 	bl	95fa <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7b86:	4a06      	ldr	r2, [pc, #24]	; (7ba0 <z_data_copy+0x28>)
    7b88:	4906      	ldr	r1, [pc, #24]	; (7ba4 <z_data_copy+0x2c>)
    7b8a:	4807      	ldr	r0, [pc, #28]	; (7ba8 <z_data_copy+0x30>)
    7b8c:	f001 fd35 	bl	95fa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7b90:	bd08      	pop	{r3, pc}
    7b92:	bf00      	nop
    7b94:	20000000 	.word	0x20000000
    7b98:	200041c4 	.word	0x200041c4
    7b9c:	0000ae78 	.word	0x0000ae78
    7ba0:	00000000 	.word	0x00000000
    7ba4:	0000ae78 	.word	0x0000ae78
    7ba8:	20000000 	.word	0x20000000

00007bac <first>:
	return list->head == list;
    7bac:	4b03      	ldr	r3, [pc, #12]	; (7bbc <first+0x10>)
    7bae:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bb0:	4298      	cmp	r0, r3
    7bb2:	d000      	beq.n	7bb6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    7bb4:	4770      	bx	lr
    7bb6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    7bb8:	e7fc      	b.n	7bb4 <first+0x8>
    7bba:	bf00      	nop
    7bbc:	200040e0 	.word	0x200040e0

00007bc0 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7bc0:	b130      	cbz	r0, 7bd0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    7bc2:	4a04      	ldr	r2, [pc, #16]	; (7bd4 <next+0x14>)
    7bc4:	6852      	ldr	r2, [r2, #4]
    7bc6:	4290      	cmp	r0, r2
    7bc8:	d001      	beq.n	7bce <next+0xe>
    7bca:	6800      	ldr	r0, [r0, #0]
    7bcc:	4770      	bx	lr
    7bce:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    7bd0:	4770      	bx	lr
    7bd2:	bf00      	nop
    7bd4:	200040e0 	.word	0x200040e0

00007bd8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    7bd8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7bda:	4b04      	ldr	r3, [pc, #16]	; (7bec <elapsed+0x14>)
    7bdc:	681b      	ldr	r3, [r3, #0]
    7bde:	b10b      	cbz	r3, 7be4 <elapsed+0xc>
    7be0:	2000      	movs	r0, #0
}
    7be2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7be4:	f7fb fdfc 	bl	37e0 <sys_clock_elapsed>
    7be8:	e7fb      	b.n	7be2 <elapsed+0xa>
    7bea:	bf00      	nop
    7bec:	20005094 	.word	0x20005094

00007bf0 <next_timeout>:

static int32_t next_timeout(void)
{
    7bf0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    7bf2:	f7ff ffdb 	bl	7bac <first>
    7bf6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    7bf8:	f7ff ffee 	bl	7bd8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7bfc:	b17c      	cbz	r4, 7c1e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7bfe:	6923      	ldr	r3, [r4, #16]
    7c00:	6962      	ldr	r2, [r4, #20]
    7c02:	1a1b      	subs	r3, r3, r0
    7c04:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    7c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7c0c:	f170 0200 	sbcs.w	r2, r0, #0
    7c10:	da08      	bge.n	7c24 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7c12:	2800      	cmp	r0, #0
    7c14:	db01      	blt.n	7c1a <next_timeout+0x2a>
    7c16:	4618      	mov	r0, r3
    7c18:	e006      	b.n	7c28 <next_timeout+0x38>
    7c1a:	2300      	movs	r3, #0
    7c1c:	e7fb      	b.n	7c16 <next_timeout+0x26>
		ret = MAX_WAIT;
    7c1e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7c22:	e001      	b.n	7c28 <next_timeout+0x38>
    7c24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7c28:	4b03      	ldr	r3, [pc, #12]	; (7c38 <next_timeout+0x48>)
    7c2a:	691b      	ldr	r3, [r3, #16]
    7c2c:	b113      	cbz	r3, 7c34 <next_timeout+0x44>
    7c2e:	4283      	cmp	r3, r0
    7c30:	da00      	bge.n	7c34 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    7c32:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    7c34:	bd10      	pop	{r4, pc}
    7c36:	bf00      	nop
    7c38:	2000504c 	.word	0x2000504c

00007c3c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7c40:	bf08      	it	eq
    7c42:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7c46:	f000 80c1 	beq.w	7dcc <z_add_timeout+0x190>
{
    7c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c4e:	4604      	mov	r4, r0
    7c50:	460f      	mov	r7, r1
    7c52:	4692      	mov	sl, r2
    7c54:	461d      	mov	r5, r3
	return node->next != NULL;
    7c56:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7c58:	b173      	cbz	r3, 7c78 <z_add_timeout+0x3c>
    7c5a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 7dd0 <z_add_timeout+0x194>
    7c5e:	2363      	movs	r3, #99	; 0x63
    7c60:	4642      	mov	r2, r8
    7c62:	495c      	ldr	r1, [pc, #368]	; (7dd4 <z_add_timeout+0x198>)
    7c64:	485c      	ldr	r0, [pc, #368]	; (7dd8 <z_add_timeout+0x19c>)
    7c66:	f000 fef8 	bl	8a5a <assert_print>
    7c6a:	485c      	ldr	r0, [pc, #368]	; (7ddc <z_add_timeout+0x1a0>)
    7c6c:	f000 fef5 	bl	8a5a <assert_print>
    7c70:	2163      	movs	r1, #99	; 0x63
    7c72:	4640      	mov	r0, r8
    7c74:	f000 feea 	bl	8a4c <assert_post_action>
	to->fn = fn;
    7c78:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    7c7a:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    7c7e:	f04f 0320 	mov.w	r3, #32
    7c82:	f3ef 8711 	mrs	r7, BASEPRI
    7c86:	f383 8812 	msr	BASEPRI_MAX, r3
    7c8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c8e:	4854      	ldr	r0, [pc, #336]	; (7de0 <z_add_timeout+0x1a4>)
    7c90:	f7fe f824 	bl	5cdc <z_spin_lock_valid>
    7c94:	b118      	cbz	r0, 7c9e <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    7c96:	4852      	ldr	r0, [pc, #328]	; (7de0 <z_add_timeout+0x1a4>)
    7c98:	f7fe f840 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    7c9c:	e038      	b.n	7d10 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c9e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 7de4 <z_add_timeout+0x1a8>
    7ca2:	238e      	movs	r3, #142	; 0x8e
    7ca4:	464a      	mov	r2, r9
    7ca6:	4950      	ldr	r1, [pc, #320]	; (7de8 <z_add_timeout+0x1ac>)
    7ca8:	484b      	ldr	r0, [pc, #300]	; (7dd8 <z_add_timeout+0x19c>)
    7caa:	f000 fed6 	bl	8a5a <assert_print>
    7cae:	494c      	ldr	r1, [pc, #304]	; (7de0 <z_add_timeout+0x1a4>)
    7cb0:	484e      	ldr	r0, [pc, #312]	; (7dec <z_add_timeout+0x1b0>)
    7cb2:	f000 fed2 	bl	8a5a <assert_print>
    7cb6:	218e      	movs	r1, #142	; 0x8e
    7cb8:	4648      	mov	r0, r9
    7cba:	f000 fec7 	bl	8a4c <assert_post_action>
    7cbe:	e7ea      	b.n	7c96 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7cc0:	f11a 0801 	adds.w	r8, sl, #1
    7cc4:	f145 0900 	adc.w	r9, r5, #0
    7cc8:	f7ff ff86 	bl	7bd8 <elapsed>
    7ccc:	eb18 0300 	adds.w	r3, r8, r0
    7cd0:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    7cd4:	6123      	str	r3, [r4, #16]
    7cd6:	6160      	str	r0, [r4, #20]
    7cd8:	e03d      	b.n	7d56 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    7cda:	1a51      	subs	r1, r2, r1
    7cdc:	eb66 0303 	sbc.w	r3, r6, r3
    7ce0:	6101      	str	r1, [r0, #16]
    7ce2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    7ce4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    7ce6:	6063      	str	r3, [r4, #4]
	node->next = successor;
    7ce8:	6020      	str	r0, [r4, #0]
	prev->next = node;
    7cea:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7cec:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    7cee:	2800      	cmp	r0, #0
    7cf0:	d045      	beq.n	7d7e <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7cf2:	f7ff ff5b 	bl	7bac <first>
    7cf6:	4284      	cmp	r4, r0
    7cf8:	d048      	beq.n	7d8c <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cfa:	4839      	ldr	r0, [pc, #228]	; (7de0 <z_add_timeout+0x1a4>)
    7cfc:	f7fd fffe 	bl	5cfc <z_spin_unlock_valid>
    7d00:	2800      	cmp	r0, #0
    7d02:	d050      	beq.n	7da6 <z_add_timeout+0x16a>
	__asm__ volatile(
    7d04:	f387 8811 	msr	BASEPRI, r7
    7d08:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7d0c:	f04f 0801 	mov.w	r8, #1
    7d10:	f1b8 0f00 	cmp.w	r8, #0
    7d14:	d158      	bne.n	7dc8 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7d16:	4653      	mov	r3, sl
    7d18:	f06f 0101 	mvn.w	r1, #1
    7d1c:	ebb1 010a 	subs.w	r1, r1, sl
    7d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7d24:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7d28:	2a00      	cmp	r2, #0
    7d2a:	dbc9      	blt.n	7cc0 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7d2c:	4a30      	ldr	r2, [pc, #192]	; (7df0 <z_add_timeout+0x1b4>)
    7d2e:	6811      	ldr	r1, [r2, #0]
    7d30:	6852      	ldr	r2, [r2, #4]
    7d32:	185b      	adds	r3, r3, r1
    7d34:	eb42 0205 	adc.w	r2, r2, r5
    7d38:	f06f 0101 	mvn.w	r1, #1
    7d3c:	1acb      	subs	r3, r1, r3
    7d3e:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    7d42:	4618      	mov	r0, r3
    7d44:	4611      	mov	r1, r2
    7d46:	2b01      	cmp	r3, #1
    7d48:	f172 0300 	sbcs.w	r3, r2, #0
    7d4c:	da01      	bge.n	7d52 <z_add_timeout+0x116>
    7d4e:	2001      	movs	r0, #1
    7d50:	2100      	movs	r1, #0
    7d52:	6120      	str	r0, [r4, #16]
    7d54:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7d56:	f7ff ff29 	bl	7bac <first>
    7d5a:	2800      	cmp	r0, #0
    7d5c:	d0c7      	beq.n	7cee <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    7d5e:	6902      	ldr	r2, [r0, #16]
    7d60:	6946      	ldr	r6, [r0, #20]
    7d62:	6921      	ldr	r1, [r4, #16]
    7d64:	6963      	ldr	r3, [r4, #20]
    7d66:	4291      	cmp	r1, r2
    7d68:	eb73 0c06 	sbcs.w	ip, r3, r6
    7d6c:	dbb5      	blt.n	7cda <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    7d6e:	1a89      	subs	r1, r1, r2
    7d70:	eb63 0306 	sbc.w	r3, r3, r6
    7d74:	6121      	str	r1, [r4, #16]
    7d76:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7d78:	f7ff ff22 	bl	7bc0 <next>
    7d7c:	e7ed      	b.n	7d5a <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    7d7e:	4b1d      	ldr	r3, [pc, #116]	; (7df4 <z_add_timeout+0x1b8>)
    7d80:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    7d82:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    7d84:	6062      	str	r2, [r4, #4]
	tail->next = node;
    7d86:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7d88:	605c      	str	r4, [r3, #4]
}
    7d8a:	e7b2      	b.n	7cf2 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7d8c:	f7ff ff30 	bl	7bf0 <next_timeout>

			if (next_time == 0 ||
    7d90:	4603      	mov	r3, r0
    7d92:	b118      	cbz	r0, 7d9c <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    7d94:	4a18      	ldr	r2, [pc, #96]	; (7df8 <z_add_timeout+0x1bc>)
    7d96:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    7d98:	4282      	cmp	r2, r0
    7d9a:	d0ae      	beq.n	7cfa <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    7d9c:	2100      	movs	r1, #0
    7d9e:	4618      	mov	r0, r3
    7da0:	f7fb fcec 	bl	377c <sys_clock_set_timeout>
    7da4:	e7a9      	b.n	7cfa <z_add_timeout+0xbe>
    7da6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 7de4 <z_add_timeout+0x1a8>
    7daa:	23b9      	movs	r3, #185	; 0xb9
    7dac:	4642      	mov	r2, r8
    7dae:	4913      	ldr	r1, [pc, #76]	; (7dfc <z_add_timeout+0x1c0>)
    7db0:	4809      	ldr	r0, [pc, #36]	; (7dd8 <z_add_timeout+0x19c>)
    7db2:	f000 fe52 	bl	8a5a <assert_print>
    7db6:	490a      	ldr	r1, [pc, #40]	; (7de0 <z_add_timeout+0x1a4>)
    7db8:	4811      	ldr	r0, [pc, #68]	; (7e00 <z_add_timeout+0x1c4>)
    7dba:	f000 fe4e 	bl	8a5a <assert_print>
    7dbe:	21b9      	movs	r1, #185	; 0xb9
    7dc0:	4640      	mov	r0, r8
    7dc2:	f000 fe43 	bl	8a4c <assert_post_action>
    7dc6:	e79d      	b.n	7d04 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dcc:	4770      	bx	lr
    7dce:	bf00      	nop
    7dd0:	0000ad38 	.word	0x0000ad38
    7dd4:	0000ad5c 	.word	0x0000ad5c
    7dd8:	00009cd0 	.word	0x00009cd0
    7ddc:	0000ab70 	.word	0x0000ab70
    7de0:	20005098 	.word	0x20005098
    7de4:	00009de8 	.word	0x00009de8
    7de8:	00009e48 	.word	0x00009e48
    7dec:	00009e60 	.word	0x00009e60
    7df0:	20004558 	.word	0x20004558
    7df4:	200040e0 	.word	0x200040e0
    7df8:	2000504c 	.word	0x2000504c
    7dfc:	00009e18 	.word	0x00009e18
    7e00:	00009e30 	.word	0x00009e30

00007e04 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e08:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    7e0a:	2400      	movs	r4, #0
	__asm__ volatile(
    7e0c:	f04f 0320 	mov.w	r3, #32
    7e10:	f3ef 8711 	mrs	r7, BASEPRI
    7e14:	f383 8812 	msr	BASEPRI_MAX, r3
    7e18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e1c:	481f      	ldr	r0, [pc, #124]	; (7e9c <z_abort_timeout+0x98>)
    7e1e:	f7fd ff5d 	bl	5cdc <z_spin_lock_valid>
    7e22:	b128      	cbz	r0, 7e30 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    7e24:	481d      	ldr	r0, [pc, #116]	; (7e9c <z_abort_timeout+0x98>)
    7e26:	f7fd ff79 	bl	5d1c <z_spin_lock_set_owner>
	int ret = -EINVAL;
    7e2a:	f06f 0815 	mvn.w	r8, #21
	return k;
    7e2e:	e018      	b.n	7e62 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e30:	4e1b      	ldr	r6, [pc, #108]	; (7ea0 <z_abort_timeout+0x9c>)
    7e32:	238e      	movs	r3, #142	; 0x8e
    7e34:	4632      	mov	r2, r6
    7e36:	491b      	ldr	r1, [pc, #108]	; (7ea4 <z_abort_timeout+0xa0>)
    7e38:	481b      	ldr	r0, [pc, #108]	; (7ea8 <z_abort_timeout+0xa4>)
    7e3a:	f000 fe0e 	bl	8a5a <assert_print>
    7e3e:	4917      	ldr	r1, [pc, #92]	; (7e9c <z_abort_timeout+0x98>)
    7e40:	481a      	ldr	r0, [pc, #104]	; (7eac <z_abort_timeout+0xa8>)
    7e42:	f000 fe0a 	bl	8a5a <assert_print>
    7e46:	218e      	movs	r1, #142	; 0x8e
    7e48:	4630      	mov	r0, r6
    7e4a:	f000 fdff 	bl	8a4c <assert_post_action>
    7e4e:	e7e9      	b.n	7e24 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e50:	4812      	ldr	r0, [pc, #72]	; (7e9c <z_abort_timeout+0x98>)
    7e52:	f7fd ff53 	bl	5cfc <z_spin_unlock_valid>
    7e56:	b170      	cbz	r0, 7e76 <z_abort_timeout+0x72>
	__asm__ volatile(
    7e58:	f387 8811 	msr	BASEPRI, r7
    7e5c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7e60:	2401      	movs	r4, #1
    7e62:	4626      	mov	r6, r4
    7e64:	b9bc      	cbnz	r4, 7e96 <z_abort_timeout+0x92>
	return node->next != NULL;
    7e66:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d0f1      	beq.n	7e50 <z_abort_timeout+0x4c>
			remove_timeout(to);
    7e6c:	4628      	mov	r0, r5
    7e6e:	f001 fc73 	bl	9758 <remove_timeout>
			ret = 0;
    7e72:	46b0      	mov	r8, r6
    7e74:	e7ec      	b.n	7e50 <z_abort_timeout+0x4c>
    7e76:	4c0a      	ldr	r4, [pc, #40]	; (7ea0 <z_abort_timeout+0x9c>)
    7e78:	23b9      	movs	r3, #185	; 0xb9
    7e7a:	4622      	mov	r2, r4
    7e7c:	490c      	ldr	r1, [pc, #48]	; (7eb0 <z_abort_timeout+0xac>)
    7e7e:	480a      	ldr	r0, [pc, #40]	; (7ea8 <z_abort_timeout+0xa4>)
    7e80:	f000 fdeb 	bl	8a5a <assert_print>
    7e84:	4905      	ldr	r1, [pc, #20]	; (7e9c <z_abort_timeout+0x98>)
    7e86:	480b      	ldr	r0, [pc, #44]	; (7eb4 <z_abort_timeout+0xb0>)
    7e88:	f000 fde7 	bl	8a5a <assert_print>
    7e8c:	21b9      	movs	r1, #185	; 0xb9
    7e8e:	4620      	mov	r0, r4
    7e90:	f000 fddc 	bl	8a4c <assert_post_action>
    7e94:	e7e0      	b.n	7e58 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    7e96:	4640      	mov	r0, r8
    7e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e9c:	20005098 	.word	0x20005098
    7ea0:	00009de8 	.word	0x00009de8
    7ea4:	00009e48 	.word	0x00009e48
    7ea8:	00009cd0 	.word	0x00009cd0
    7eac:	00009e60 	.word	0x00009e60
    7eb0:	00009e18 	.word	0x00009e18
    7eb4:	00009e30 	.word	0x00009e30

00007eb8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7eb8:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    7eba:	2500      	movs	r5, #0
	__asm__ volatile(
    7ebc:	f04f 0320 	mov.w	r3, #32
    7ec0:	f3ef 8611 	mrs	r6, BASEPRI
    7ec4:	f383 8812 	msr	BASEPRI_MAX, r3
    7ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ecc:	481c      	ldr	r0, [pc, #112]	; (7f40 <z_get_next_timeout_expiry+0x88>)
    7ece:	f7fd ff05 	bl	5cdc <z_spin_lock_valid>
    7ed2:	b128      	cbz	r0, 7ee0 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    7ed4:	481a      	ldr	r0, [pc, #104]	; (7f40 <z_get_next_timeout_expiry+0x88>)
    7ed6:	f7fd ff21 	bl	5d1c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7eda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    7ede:	e014      	b.n	7f0a <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ee0:	4c18      	ldr	r4, [pc, #96]	; (7f44 <z_get_next_timeout_expiry+0x8c>)
    7ee2:	238e      	movs	r3, #142	; 0x8e
    7ee4:	4622      	mov	r2, r4
    7ee6:	4918      	ldr	r1, [pc, #96]	; (7f48 <z_get_next_timeout_expiry+0x90>)
    7ee8:	4818      	ldr	r0, [pc, #96]	; (7f4c <z_get_next_timeout_expiry+0x94>)
    7eea:	f000 fdb6 	bl	8a5a <assert_print>
    7eee:	4914      	ldr	r1, [pc, #80]	; (7f40 <z_get_next_timeout_expiry+0x88>)
    7ef0:	4817      	ldr	r0, [pc, #92]	; (7f50 <z_get_next_timeout_expiry+0x98>)
    7ef2:	f000 fdb2 	bl	8a5a <assert_print>
    7ef6:	218e      	movs	r1, #142	; 0x8e
    7ef8:	4620      	mov	r0, r4
    7efa:	f000 fda7 	bl	8a4c <assert_post_action>
    7efe:	e7e9      	b.n	7ed4 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    7f00:	f386 8811 	msr	BASEPRI, r6
    7f04:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7f08:	2501      	movs	r5, #1
    7f0a:	b9bd      	cbnz	r5, 7f3c <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    7f0c:	f7ff fe70 	bl	7bf0 <next_timeout>
    7f10:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f12:	480b      	ldr	r0, [pc, #44]	; (7f40 <z_get_next_timeout_expiry+0x88>)
    7f14:	f7fd fef2 	bl	5cfc <z_spin_unlock_valid>
    7f18:	2800      	cmp	r0, #0
    7f1a:	d1f1      	bne.n	7f00 <z_get_next_timeout_expiry+0x48>
    7f1c:	4d09      	ldr	r5, [pc, #36]	; (7f44 <z_get_next_timeout_expiry+0x8c>)
    7f1e:	23b9      	movs	r3, #185	; 0xb9
    7f20:	462a      	mov	r2, r5
    7f22:	490c      	ldr	r1, [pc, #48]	; (7f54 <z_get_next_timeout_expiry+0x9c>)
    7f24:	4809      	ldr	r0, [pc, #36]	; (7f4c <z_get_next_timeout_expiry+0x94>)
    7f26:	f000 fd98 	bl	8a5a <assert_print>
    7f2a:	4905      	ldr	r1, [pc, #20]	; (7f40 <z_get_next_timeout_expiry+0x88>)
    7f2c:	480a      	ldr	r0, [pc, #40]	; (7f58 <z_get_next_timeout_expiry+0xa0>)
    7f2e:	f000 fd94 	bl	8a5a <assert_print>
    7f32:	21b9      	movs	r1, #185	; 0xb9
    7f34:	4628      	mov	r0, r5
    7f36:	f000 fd89 	bl	8a4c <assert_post_action>
    7f3a:	e7e1      	b.n	7f00 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    7f3c:	4620      	mov	r0, r4
    7f3e:	bd70      	pop	{r4, r5, r6, pc}
    7f40:	20005098 	.word	0x20005098
    7f44:	00009de8 	.word	0x00009de8
    7f48:	00009e48 	.word	0x00009e48
    7f4c:	00009cd0 	.word	0x00009cd0
    7f50:	00009e60 	.word	0x00009e60
    7f54:	00009e18 	.word	0x00009e18
    7f58:	00009e30 	.word	0x00009e30

00007f5c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f60:	4606      	mov	r6, r0
    7f62:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    7f64:	2500      	movs	r5, #0
	__asm__ volatile(
    7f66:	f04f 0320 	mov.w	r3, #32
    7f6a:	f3ef 8711 	mrs	r7, BASEPRI
    7f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    7f72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f76:	4825      	ldr	r0, [pc, #148]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f78:	f7fd feb0 	bl	5cdc <z_spin_lock_valid>
    7f7c:	b118      	cbz	r0, 7f86 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    7f7e:	4823      	ldr	r0, [pc, #140]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f80:	f7fd fecc 	bl	5d1c <z_spin_lock_set_owner>
	return k;
    7f84:	e01e      	b.n	7fc4 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f86:	4c22      	ldr	r4, [pc, #136]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f88:	238e      	movs	r3, #142	; 0x8e
    7f8a:	4622      	mov	r2, r4
    7f8c:	4921      	ldr	r1, [pc, #132]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f8e:	4822      	ldr	r0, [pc, #136]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7f90:	f000 fd63 	bl	8a5a <assert_print>
    7f94:	491d      	ldr	r1, [pc, #116]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f96:	4821      	ldr	r0, [pc, #132]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7f98:	f000 fd5f 	bl	8a5a <assert_print>
    7f9c:	218e      	movs	r1, #142	; 0x8e
    7f9e:	4620      	mov	r0, r4
    7fa0:	f000 fd54 	bl	8a4c <assert_post_action>
    7fa4:	e7eb      	b.n	7f7e <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    7fa6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    7fa8:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7fac:	2801      	cmp	r0, #1
    7fae:	dd00      	ble.n	7fb2 <z_set_timeout_expiry+0x56>
    7fb0:	b99c      	cbnz	r4, 7fda <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fb2:	4816      	ldr	r0, [pc, #88]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fb4:	f7fd fea2 	bl	5cfc <z_spin_unlock_valid>
    7fb8:	b1b0      	cbz	r0, 7fe8 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    7fba:	f387 8811 	msr	BASEPRI, r7
    7fbe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7fc2:	2501      	movs	r5, #1
    7fc4:	462c      	mov	r4, r5
    7fc6:	b9fd      	cbnz	r5, 8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
		int next_to = next_timeout();
    7fc8:	f7ff fe12 	bl	7bf0 <next_timeout>
			      || (ticks <= next_to);
    7fcc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7fd0:	d0e9      	beq.n	7fa6 <z_set_timeout_expiry+0x4a>
    7fd2:	42b0      	cmp	r0, r6
    7fd4:	dbe8      	blt.n	7fa8 <z_set_timeout_expiry+0x4c>
    7fd6:	2401      	movs	r4, #1
    7fd8:	e7e6      	b.n	7fa8 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7fda:	4641      	mov	r1, r8
    7fdc:	42b0      	cmp	r0, r6
    7fde:	bfa8      	it	ge
    7fe0:	4630      	movge	r0, r6
    7fe2:	f7fb fbcb 	bl	377c <sys_clock_set_timeout>
    7fe6:	e7e4      	b.n	7fb2 <z_set_timeout_expiry+0x56>
    7fe8:	4c09      	ldr	r4, [pc, #36]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fea:	23b9      	movs	r3, #185	; 0xb9
    7fec:	4622      	mov	r2, r4
    7fee:	490c      	ldr	r1, [pc, #48]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7ff0:	4809      	ldr	r0, [pc, #36]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7ff2:	f000 fd32 	bl	8a5a <assert_print>
    7ff6:	4905      	ldr	r1, [pc, #20]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7ff8:	480a      	ldr	r0, [pc, #40]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7ffa:	f000 fd2e 	bl	8a5a <assert_print>
    7ffe:	21b9      	movs	r1, #185	; 0xb9
    8000:	4620      	mov	r0, r4
    8002:	f000 fd23 	bl	8a4c <assert_post_action>
    8006:	e7d8      	b.n	7fba <z_set_timeout_expiry+0x5e>
		}
	}
}
    8008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    800c:	20005098 	.word	0x20005098
    8010:	00009de8 	.word	0x00009de8
    8014:	00009e48 	.word	0x00009e48
    8018:	00009cd0 	.word	0x00009cd0
    801c:	00009e60 	.word	0x00009e60
    8020:	00009e18 	.word	0x00009e18
    8024:	00009e30 	.word	0x00009e30

00008028 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8028:	b570      	push	{r4, r5, r6, lr}
    802a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    802c:	f7fe fdbe 	bl	6bac <z_time_slice>
	__asm__ volatile(
    8030:	f04f 0320 	mov.w	r3, #32
    8034:	f3ef 8511 	mrs	r5, BASEPRI
    8038:	f383 8812 	msr	BASEPRI_MAX, r3
    803c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8040:	4854      	ldr	r0, [pc, #336]	; (8194 <sys_clock_announce+0x16c>)
    8042:	f7fd fe4b 	bl	5cdc <z_spin_lock_valid>
    8046:	b128      	cbz	r0, 8054 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    8048:	4852      	ldr	r0, [pc, #328]	; (8194 <sys_clock_announce+0x16c>)
    804a:	f7fd fe67 	bl	5d1c <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    804e:	4b52      	ldr	r3, [pc, #328]	; (8198 <sys_clock_announce+0x170>)
    8050:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8052:	e022      	b.n	809a <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8054:	4e51      	ldr	r6, [pc, #324]	; (819c <sys_clock_announce+0x174>)
    8056:	238e      	movs	r3, #142	; 0x8e
    8058:	4632      	mov	r2, r6
    805a:	4951      	ldr	r1, [pc, #324]	; (81a0 <sys_clock_announce+0x178>)
    805c:	4851      	ldr	r0, [pc, #324]	; (81a4 <sys_clock_announce+0x17c>)
    805e:	f000 fcfc 	bl	8a5a <assert_print>
    8062:	494c      	ldr	r1, [pc, #304]	; (8194 <sys_clock_announce+0x16c>)
    8064:	4850      	ldr	r0, [pc, #320]	; (81a8 <sys_clock_announce+0x180>)
    8066:	f000 fcf8 	bl	8a5a <assert_print>
    806a:	218e      	movs	r1, #142	; 0x8e
    806c:	4630      	mov	r0, r6
    806e:	f000 fced 	bl	8a4c <assert_post_action>
    8072:	e7e9      	b.n	8048 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8074:	4e49      	ldr	r6, [pc, #292]	; (819c <sys_clock_announce+0x174>)
    8076:	23b9      	movs	r3, #185	; 0xb9
    8078:	4632      	mov	r2, r6
    807a:	494c      	ldr	r1, [pc, #304]	; (81ac <sys_clock_announce+0x184>)
    807c:	4849      	ldr	r0, [pc, #292]	; (81a4 <sys_clock_announce+0x17c>)
    807e:	f000 fcec 	bl	8a5a <assert_print>
    8082:	4944      	ldr	r1, [pc, #272]	; (8194 <sys_clock_announce+0x16c>)
    8084:	484a      	ldr	r0, [pc, #296]	; (81b0 <sys_clock_announce+0x188>)
    8086:	f000 fce8 	bl	8a5a <assert_print>
    808a:	21b9      	movs	r1, #185	; 0xb9
    808c:	4630      	mov	r0, r6
    808e:	f000 fcdd 	bl	8a4c <assert_post_action>
    8092:	e027      	b.n	80e4 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    8094:	483f      	ldr	r0, [pc, #252]	; (8194 <sys_clock_announce+0x16c>)
    8096:	f7fd fe41 	bl	5d1c <z_spin_lock_set_owner>
    809a:	f7ff fd87 	bl	7bac <first>
    809e:	4604      	mov	r4, r0
    80a0:	2800      	cmp	r0, #0
    80a2:	d043      	beq.n	812c <sys_clock_announce+0x104>
    80a4:	6902      	ldr	r2, [r0, #16]
    80a6:	6941      	ldr	r1, [r0, #20]
    80a8:	4b3b      	ldr	r3, [pc, #236]	; (8198 <sys_clock_announce+0x170>)
    80aa:	681b      	ldr	r3, [r3, #0]
    80ac:	17d8      	asrs	r0, r3, #31
    80ae:	4293      	cmp	r3, r2
    80b0:	eb70 0101 	sbcs.w	r1, r0, r1
    80b4:	db3a      	blt.n	812c <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    80b6:	483f      	ldr	r0, [pc, #252]	; (81b4 <sys_clock_announce+0x18c>)
    80b8:	6801      	ldr	r1, [r0, #0]
    80ba:	6846      	ldr	r6, [r0, #4]
    80bc:	1889      	adds	r1, r1, r2
    80be:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    80c2:	6001      	str	r1, [r0, #0]
    80c4:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    80c6:	1a9b      	subs	r3, r3, r2
    80c8:	4a33      	ldr	r2, [pc, #204]	; (8198 <sys_clock_announce+0x170>)
    80ca:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    80cc:	2200      	movs	r2, #0
    80ce:	2300      	movs	r3, #0
    80d0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    80d4:	4620      	mov	r0, r4
    80d6:	f001 fb3f 	bl	9758 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80da:	482e      	ldr	r0, [pc, #184]	; (8194 <sys_clock_announce+0x16c>)
    80dc:	f7fd fe0e 	bl	5cfc <z_spin_unlock_valid>
    80e0:	2800      	cmp	r0, #0
    80e2:	d0c7      	beq.n	8074 <sys_clock_announce+0x4c>
	__asm__ volatile(
    80e4:	f385 8811 	msr	BASEPRI, r5
    80e8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    80ec:	68a3      	ldr	r3, [r4, #8]
    80ee:	4620      	mov	r0, r4
    80f0:	4798      	blx	r3
	__asm__ volatile(
    80f2:	f04f 0320 	mov.w	r3, #32
    80f6:	f3ef 8511 	mrs	r5, BASEPRI
    80fa:	f383 8812 	msr	BASEPRI_MAX, r3
    80fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8102:	4824      	ldr	r0, [pc, #144]	; (8194 <sys_clock_announce+0x16c>)
    8104:	f7fd fdea 	bl	5cdc <z_spin_lock_valid>
    8108:	2800      	cmp	r0, #0
    810a:	d1c3      	bne.n	8094 <sys_clock_announce+0x6c>
    810c:	4c23      	ldr	r4, [pc, #140]	; (819c <sys_clock_announce+0x174>)
    810e:	238e      	movs	r3, #142	; 0x8e
    8110:	4622      	mov	r2, r4
    8112:	4923      	ldr	r1, [pc, #140]	; (81a0 <sys_clock_announce+0x178>)
    8114:	4823      	ldr	r0, [pc, #140]	; (81a4 <sys_clock_announce+0x17c>)
    8116:	f000 fca0 	bl	8a5a <assert_print>
    811a:	491e      	ldr	r1, [pc, #120]	; (8194 <sys_clock_announce+0x16c>)
    811c:	4822      	ldr	r0, [pc, #136]	; (81a8 <sys_clock_announce+0x180>)
    811e:	f000 fc9c 	bl	8a5a <assert_print>
    8122:	218e      	movs	r1, #142	; 0x8e
    8124:	4620      	mov	r0, r4
    8126:	f000 fc91 	bl	8a4c <assert_post_action>
    812a:	e7b3      	b.n	8094 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    812c:	b144      	cbz	r4, 8140 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    812e:	4b1a      	ldr	r3, [pc, #104]	; (8198 <sys_clock_announce+0x170>)
    8130:	6819      	ldr	r1, [r3, #0]
    8132:	6923      	ldr	r3, [r4, #16]
    8134:	6962      	ldr	r2, [r4, #20]
    8136:	1a5b      	subs	r3, r3, r1
    8138:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    813c:	6123      	str	r3, [r4, #16]
    813e:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    8140:	4a1c      	ldr	r2, [pc, #112]	; (81b4 <sys_clock_announce+0x18c>)
    8142:	4e15      	ldr	r6, [pc, #84]	; (8198 <sys_clock_announce+0x170>)
    8144:	6830      	ldr	r0, [r6, #0]
    8146:	6813      	ldr	r3, [r2, #0]
    8148:	6851      	ldr	r1, [r2, #4]
    814a:	181b      	adds	r3, r3, r0
    814c:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    8150:	6013      	str	r3, [r2, #0]
    8152:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    8154:	2400      	movs	r4, #0
    8156:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8158:	f7ff fd4a 	bl	7bf0 <next_timeout>
    815c:	4621      	mov	r1, r4
    815e:	f7fb fb0d 	bl	377c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8162:	480c      	ldr	r0, [pc, #48]	; (8194 <sys_clock_announce+0x16c>)
    8164:	f7fd fdca 	bl	5cfc <z_spin_unlock_valid>
    8168:	b120      	cbz	r0, 8174 <sys_clock_announce+0x14c>
	__asm__ volatile(
    816a:	f385 8811 	msr	BASEPRI, r5
    816e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8172:	bd70      	pop	{r4, r5, r6, pc}
    8174:	4c09      	ldr	r4, [pc, #36]	; (819c <sys_clock_announce+0x174>)
    8176:	23b9      	movs	r3, #185	; 0xb9
    8178:	4622      	mov	r2, r4
    817a:	490c      	ldr	r1, [pc, #48]	; (81ac <sys_clock_announce+0x184>)
    817c:	4809      	ldr	r0, [pc, #36]	; (81a4 <sys_clock_announce+0x17c>)
    817e:	f000 fc6c 	bl	8a5a <assert_print>
    8182:	4904      	ldr	r1, [pc, #16]	; (8194 <sys_clock_announce+0x16c>)
    8184:	480a      	ldr	r0, [pc, #40]	; (81b0 <sys_clock_announce+0x188>)
    8186:	f000 fc68 	bl	8a5a <assert_print>
    818a:	21b9      	movs	r1, #185	; 0xb9
    818c:	4620      	mov	r0, r4
    818e:	f000 fc5d 	bl	8a4c <assert_post_action>
    8192:	e7ea      	b.n	816a <sys_clock_announce+0x142>
    8194:	20005098 	.word	0x20005098
    8198:	20005094 	.word	0x20005094
    819c:	00009de8 	.word	0x00009de8
    81a0:	00009e48 	.word	0x00009e48
    81a4:	00009cd0 	.word	0x00009cd0
    81a8:	00009e60 	.word	0x00009e60
    81ac:	00009e18 	.word	0x00009e18
    81b0:	00009e30 	.word	0x00009e30
    81b4:	20004558 	.word	0x20004558

000081b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    81b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    81ba:	2600      	movs	r6, #0
	__asm__ volatile(
    81bc:	f04f 0320 	mov.w	r3, #32
    81c0:	f3ef 8711 	mrs	r7, BASEPRI
    81c4:	f383 8812 	msr	BASEPRI_MAX, r3
    81c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81cc:	481f      	ldr	r0, [pc, #124]	; (824c <sys_clock_tick_get+0x94>)
    81ce:	f7fd fd85 	bl	5cdc <z_spin_lock_valid>
    81d2:	b128      	cbz	r0, 81e0 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    81d4:	481d      	ldr	r0, [pc, #116]	; (824c <sys_clock_tick_get+0x94>)
    81d6:	f7fd fda1 	bl	5d1c <z_spin_lock_set_owner>
	uint64_t t = 0U;
    81da:	2400      	movs	r4, #0
    81dc:	4625      	mov	r5, r4
	return k;
    81de:	e014      	b.n	820a <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81e0:	4c1b      	ldr	r4, [pc, #108]	; (8250 <sys_clock_tick_get+0x98>)
    81e2:	238e      	movs	r3, #142	; 0x8e
    81e4:	4622      	mov	r2, r4
    81e6:	491b      	ldr	r1, [pc, #108]	; (8254 <sys_clock_tick_get+0x9c>)
    81e8:	481b      	ldr	r0, [pc, #108]	; (8258 <sys_clock_tick_get+0xa0>)
    81ea:	f000 fc36 	bl	8a5a <assert_print>
    81ee:	4917      	ldr	r1, [pc, #92]	; (824c <sys_clock_tick_get+0x94>)
    81f0:	481a      	ldr	r0, [pc, #104]	; (825c <sys_clock_tick_get+0xa4>)
    81f2:	f000 fc32 	bl	8a5a <assert_print>
    81f6:	218e      	movs	r1, #142	; 0x8e
    81f8:	4620      	mov	r0, r4
    81fa:	f000 fc27 	bl	8a4c <assert_post_action>
    81fe:	e7e9      	b.n	81d4 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    8200:	f387 8811 	msr	BASEPRI, r7
    8204:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8208:	2601      	movs	r6, #1
    820a:	b9e6      	cbnz	r6, 8246 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    820c:	f7fb fae8 	bl	37e0 <sys_clock_elapsed>
    8210:	4b13      	ldr	r3, [pc, #76]	; (8260 <sys_clock_tick_get+0xa8>)
    8212:	681c      	ldr	r4, [r3, #0]
    8214:	685d      	ldr	r5, [r3, #4]
    8216:	1904      	adds	r4, r0, r4
    8218:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    821c:	480b      	ldr	r0, [pc, #44]	; (824c <sys_clock_tick_get+0x94>)
    821e:	f7fd fd6d 	bl	5cfc <z_spin_unlock_valid>
    8222:	2800      	cmp	r0, #0
    8224:	d1ec      	bne.n	8200 <sys_clock_tick_get+0x48>
    8226:	4e0a      	ldr	r6, [pc, #40]	; (8250 <sys_clock_tick_get+0x98>)
    8228:	23b9      	movs	r3, #185	; 0xb9
    822a:	4632      	mov	r2, r6
    822c:	490d      	ldr	r1, [pc, #52]	; (8264 <sys_clock_tick_get+0xac>)
    822e:	480a      	ldr	r0, [pc, #40]	; (8258 <sys_clock_tick_get+0xa0>)
    8230:	f000 fc13 	bl	8a5a <assert_print>
    8234:	4905      	ldr	r1, [pc, #20]	; (824c <sys_clock_tick_get+0x94>)
    8236:	480c      	ldr	r0, [pc, #48]	; (8268 <sys_clock_tick_get+0xb0>)
    8238:	f000 fc0f 	bl	8a5a <assert_print>
    823c:	21b9      	movs	r1, #185	; 0xb9
    823e:	4630      	mov	r0, r6
    8240:	f000 fc04 	bl	8a4c <assert_post_action>
    8244:	e7dc      	b.n	8200 <sys_clock_tick_get+0x48>
	}
	return t;
}
    8246:	4620      	mov	r0, r4
    8248:	4629      	mov	r1, r5
    824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    824c:	20005098 	.word	0x20005098
    8250:	00009de8 	.word	0x00009de8
    8254:	00009e48 	.word	0x00009e48
    8258:	00009cd0 	.word	0x00009cd0
    825c:	00009e60 	.word	0x00009e60
    8260:	20004558 	.word	0x20004558
    8264:	00009e18 	.word	0x00009e18
    8268:	00009e30 	.word	0x00009e30

0000826c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    826c:	4b01      	ldr	r3, [pc, #4]	; (8274 <k_thread_system_pool_assign+0x8>)
    826e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    8272:	4770      	bx	lr
    8274:	2000415c 	.word	0x2000415c

00008278 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    8278:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    827a:	4a03      	ldr	r2, [pc, #12]	; (8288 <boot_banner+0x10>)
    827c:	4903      	ldr	r1, [pc, #12]	; (828c <boot_banner+0x14>)
    827e:	4804      	ldr	r0, [pc, #16]	; (8290 <boot_banner+0x18>)
    8280:	f000 fa66 	bl	8750 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8284:	bd08      	pop	{r3, pc}
    8286:	bf00      	nop
    8288:	0000a350 	.word	0x0000a350
    828c:	0000ad7c 	.word	0x0000ad7c
    8290:	0000ad8c 	.word	0x0000ad8c

00008294 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8294:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8296:	4c0f      	ldr	r4, [pc, #60]	; (82d4 <statics_init+0x40>)
    8298:	e008      	b.n	82ac <statics_init+0x18>
    829a:	4b0f      	ldr	r3, [pc, #60]	; (82d8 <statics_init+0x44>)
    829c:	429c      	cmp	r4, r3
    829e:	d217      	bcs.n	82d0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    82a0:	68a2      	ldr	r2, [r4, #8]
    82a2:	6861      	ldr	r1, [r4, #4]
    82a4:	4620      	mov	r0, r4
    82a6:	f001 fa7c 	bl	97a2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    82aa:	3418      	adds	r4, #24
    82ac:	4b0a      	ldr	r3, [pc, #40]	; (82d8 <statics_init+0x44>)
    82ae:	429c      	cmp	r4, r3
    82b0:	d9f3      	bls.n	829a <statics_init+0x6>
    82b2:	4d0a      	ldr	r5, [pc, #40]	; (82dc <statics_init+0x48>)
    82b4:	2318      	movs	r3, #24
    82b6:	462a      	mov	r2, r5
    82b8:	4909      	ldr	r1, [pc, #36]	; (82e0 <statics_init+0x4c>)
    82ba:	480a      	ldr	r0, [pc, #40]	; (82e4 <statics_init+0x50>)
    82bc:	f000 fbcd 	bl	8a5a <assert_print>
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <statics_init+0x54>)
    82c2:	f000 fbca 	bl	8a5a <assert_print>
    82c6:	2118      	movs	r1, #24
    82c8:	4628      	mov	r0, r5
    82ca:	f000 fbbf 	bl	8a4c <assert_post_action>
    82ce:	e7e4      	b.n	829a <statics_init+0x6>
		}
	}
	return 0;
}
    82d0:	2000      	movs	r0, #0
    82d2:	bd38      	pop	{r3, r4, r5, pc}
    82d4:	2000415c 	.word	0x2000415c
    82d8:	20004174 	.word	0x20004174
    82dc:	0000adb4 	.word	0x0000adb4
    82e0:	0000add8 	.word	0x0000add8
    82e4:	00009cd0 	.word	0x00009cd0
    82e8:	0000a8fc 	.word	0x0000a8fc

000082ec <nrf_cc3xx_platform_init_no_rng>:
    82ec:	b510      	push	{r4, lr}
    82ee:	4c0a      	ldr	r4, [pc, #40]	; (8318 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    82f0:	6823      	ldr	r3, [r4, #0]
    82f2:	b11b      	cbz	r3, 82fc <nrf_cc3xx_platform_init_no_rng+0x10>
    82f4:	2301      	movs	r3, #1
    82f6:	6023      	str	r3, [r4, #0]
    82f8:	2000      	movs	r0, #0
    82fa:	bd10      	pop	{r4, pc}
    82fc:	f000 f8ce 	bl	849c <CC_LibInitNoRng>
    8300:	2800      	cmp	r0, #0
    8302:	d0f7      	beq.n	82f4 <nrf_cc3xx_platform_init_no_rng+0x8>
    8304:	3801      	subs	r0, #1
    8306:	2806      	cmp	r0, #6
    8308:	d803      	bhi.n	8312 <nrf_cc3xx_platform_init_no_rng+0x26>
    830a:	4b04      	ldr	r3, [pc, #16]	; (831c <nrf_cc3xx_platform_init_no_rng+0x30>)
    830c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8310:	bd10      	pop	{r4, pc}
    8312:	4803      	ldr	r0, [pc, #12]	; (8320 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8314:	bd10      	pop	{r4, pc}
    8316:	bf00      	nop
    8318:	2000509c 	.word	0x2000509c
    831c:	0000adf0 	.word	0x0000adf0
    8320:	ffff8ffe 	.word	0xffff8ffe

00008324 <nrf_cc3xx_platform_abort>:
    8324:	f3bf 8f4f 	dsb	sy
    8328:	4905      	ldr	r1, [pc, #20]	; (8340 <nrf_cc3xx_platform_abort+0x1c>)
    832a:	4b06      	ldr	r3, [pc, #24]	; (8344 <nrf_cc3xx_platform_abort+0x20>)
    832c:	68ca      	ldr	r2, [r1, #12]
    832e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8332:	4313      	orrs	r3, r2
    8334:	60cb      	str	r3, [r1, #12]
    8336:	f3bf 8f4f 	dsb	sy
    833a:	bf00      	nop
    833c:	e7fd      	b.n	833a <nrf_cc3xx_platform_abort+0x16>
    833e:	bf00      	nop
    8340:	e000ed00 	.word	0xe000ed00
    8344:	05fa0004 	.word	0x05fa0004

00008348 <CC_PalAbort>:
    8348:	b410      	push	{r4}
    834a:	4b09      	ldr	r3, [pc, #36]	; (8370 <CC_PalAbort+0x28>)
    834c:	4909      	ldr	r1, [pc, #36]	; (8374 <CC_PalAbort+0x2c>)
    834e:	4c0a      	ldr	r4, [pc, #40]	; (8378 <CC_PalAbort+0x30>)
    8350:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8354:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8358:	6849      	ldr	r1, [r1, #4]
    835a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    835e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8362:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8366:	2300      	movs	r3, #0
    8368:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    836c:	bc10      	pop	{r4}
    836e:	4708      	bx	r1
    8370:	5002b000 	.word	0x5002b000
    8374:	200040e8 	.word	0x200040e8
    8378:	5002a000 	.word	0x5002a000

0000837c <nrf_cc3xx_platform_set_abort>:
    837c:	e9d0 1200 	ldrd	r1, r2, [r0]
    8380:	4b01      	ldr	r3, [pc, #4]	; (8388 <nrf_cc3xx_platform_set_abort+0xc>)
    8382:	e9c3 1200 	strd	r1, r2, [r3]
    8386:	4770      	bx	lr
    8388:	200040e8 	.word	0x200040e8

0000838c <mutex_free>:
    838c:	b510      	push	{r4, lr}
    838e:	4604      	mov	r4, r0
    8390:	b130      	cbz	r0, 83a0 <mutex_free+0x14>
    8392:	6863      	ldr	r3, [r4, #4]
    8394:	06db      	lsls	r3, r3, #27
    8396:	d502      	bpl.n	839e <mutex_free+0x12>
    8398:	2300      	movs	r3, #0
    839a:	6023      	str	r3, [r4, #0]
    839c:	6063      	str	r3, [r4, #4]
    839e:	bd10      	pop	{r4, pc}
    83a0:	4b02      	ldr	r3, [pc, #8]	; (83ac <mutex_free+0x20>)
    83a2:	4803      	ldr	r0, [pc, #12]	; (83b0 <mutex_free+0x24>)
    83a4:	685b      	ldr	r3, [r3, #4]
    83a6:	4798      	blx	r3
    83a8:	e7f3      	b.n	8392 <mutex_free+0x6>
    83aa:	bf00      	nop
    83ac:	200040e8 	.word	0x200040e8
    83b0:	0000ae0c 	.word	0x0000ae0c

000083b4 <mutex_lock>:
    83b4:	b1b0      	cbz	r0, 83e4 <mutex_lock+0x30>
    83b6:	6843      	ldr	r3, [r0, #4]
    83b8:	b193      	cbz	r3, 83e0 <mutex_lock+0x2c>
    83ba:	06db      	lsls	r3, r3, #27
    83bc:	d50e      	bpl.n	83dc <mutex_lock+0x28>
    83be:	2301      	movs	r3, #1
    83c0:	e850 2f00 	ldrex	r2, [r0]
    83c4:	4619      	mov	r1, r3
    83c6:	e840 1c00 	strex	ip, r1, [r0]
    83ca:	f09c 0f00 	teq	ip, #0
    83ce:	d1f7      	bne.n	83c0 <mutex_lock+0xc>
    83d0:	2a01      	cmp	r2, #1
    83d2:	d0f5      	beq.n	83c0 <mutex_lock+0xc>
    83d4:	f3bf 8f5f 	dmb	sy
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    83dc:	4803      	ldr	r0, [pc, #12]	; (83ec <mutex_lock+0x38>)
    83de:	4770      	bx	lr
    83e0:	4803      	ldr	r0, [pc, #12]	; (83f0 <mutex_lock+0x3c>)
    83e2:	4770      	bx	lr
    83e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    83e8:	4770      	bx	lr
    83ea:	bf00      	nop
    83ec:	ffff8fe9 	.word	0xffff8fe9
    83f0:	ffff8fea 	.word	0xffff8fea

000083f4 <mutex_unlock>:
    83f4:	b168      	cbz	r0, 8412 <mutex_unlock+0x1e>
    83f6:	6843      	ldr	r3, [r0, #4]
    83f8:	b13b      	cbz	r3, 840a <mutex_unlock+0x16>
    83fa:	06db      	lsls	r3, r3, #27
    83fc:	d507      	bpl.n	840e <mutex_unlock+0x1a>
    83fe:	f3bf 8f5f 	dmb	sy
    8402:	2300      	movs	r3, #0
    8404:	6003      	str	r3, [r0, #0]
    8406:	4618      	mov	r0, r3
    8408:	4770      	bx	lr
    840a:	4803      	ldr	r0, [pc, #12]	; (8418 <mutex_unlock+0x24>)
    840c:	4770      	bx	lr
    840e:	4803      	ldr	r0, [pc, #12]	; (841c <mutex_unlock+0x28>)
    8410:	4770      	bx	lr
    8412:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8416:	4770      	bx	lr
    8418:	ffff8fea 	.word	0xffff8fea
    841c:	ffff8fe9 	.word	0xffff8fe9

00008420 <mutex_init>:
    8420:	b510      	push	{r4, lr}
    8422:	4604      	mov	r4, r0
    8424:	b120      	cbz	r0, 8430 <mutex_init+0x10>
    8426:	2200      	movs	r2, #0
    8428:	2311      	movs	r3, #17
    842a:	6022      	str	r2, [r4, #0]
    842c:	6063      	str	r3, [r4, #4]
    842e:	bd10      	pop	{r4, pc}
    8430:	4801      	ldr	r0, [pc, #4]	; (8438 <mutex_init+0x18>)
    8432:	f7ff ff89 	bl	8348 <CC_PalAbort>
    8436:	e7f6      	b.n	8426 <mutex_init+0x6>
    8438:	0000ae34 	.word	0x0000ae34

0000843c <nrf_cc3xx_platform_set_mutexes>:
    843c:	b570      	push	{r4, r5, r6, lr}
    843e:	e9d0 2300 	ldrd	r2, r3, [r0]
    8442:	4c13      	ldr	r4, [pc, #76]	; (8490 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8444:	4d13      	ldr	r5, [pc, #76]	; (8494 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8446:	6063      	str	r3, [r4, #4]
    8448:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    844c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8450:	6022      	str	r2, [r4, #0]
    8452:	4b11      	ldr	r3, [pc, #68]	; (8498 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8454:	6808      	ldr	r0, [r1, #0]
    8456:	6018      	str	r0, [r3, #0]
    8458:	6848      	ldr	r0, [r1, #4]
    845a:	6058      	str	r0, [r3, #4]
    845c:	6888      	ldr	r0, [r1, #8]
    845e:	6098      	str	r0, [r3, #8]
    8460:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8464:	60d8      	str	r0, [r3, #12]
    8466:	6119      	str	r1, [r3, #16]
    8468:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    846c:	06db      	lsls	r3, r3, #27
    846e:	d50d      	bpl.n	848c <nrf_cc3xx_platform_set_mutexes+0x50>
    8470:	2300      	movs	r3, #0
    8472:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    8476:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    847a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    847e:	4790      	blx	r2
    8480:	6823      	ldr	r3, [r4, #0]
    8482:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    848a:	4718      	bx	r3
    848c:	bd70      	pop	{r4, r5, r6, pc}
    848e:	bf00      	nop
    8490:	200040f8 	.word	0x200040f8
    8494:	200050b4 	.word	0x200050b4
    8498:	20004108 	.word	0x20004108

0000849c <CC_LibInitNoRng>:
    849c:	b538      	push	{r3, r4, r5, lr}
    849e:	f000 f82f 	bl	8500 <CC_HalInit>
    84a2:	b120      	cbz	r0, 84ae <CC_LibInitNoRng+0x12>
    84a4:	2403      	movs	r4, #3
    84a6:	f000 f863 	bl	8570 <CC_PalTerminate>
    84aa:	4620      	mov	r0, r4
    84ac:	bd38      	pop	{r3, r4, r5, pc}
    84ae:	f000 f831 	bl	8514 <CC_PalInit>
    84b2:	b998      	cbnz	r0, 84dc <CC_LibInitNoRng+0x40>
    84b4:	f000 f8ac 	bl	8610 <CC_PalPowerSaveModeSelect>
    84b8:	b998      	cbnz	r0, 84e2 <CC_LibInitNoRng+0x46>
    84ba:	4d0f      	ldr	r5, [pc, #60]	; (84f8 <CC_LibInitNoRng+0x5c>)
    84bc:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    84c0:	0e1b      	lsrs	r3, r3, #24
    84c2:	2bf0      	cmp	r3, #240	; 0xf0
    84c4:	d108      	bne.n	84d8 <CC_LibInitNoRng+0x3c>
    84c6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    84ca:	4b0c      	ldr	r3, [pc, #48]	; (84fc <CC_LibInitNoRng+0x60>)
    84cc:	429a      	cmp	r2, r3
    84ce:	d00a      	beq.n	84e6 <CC_LibInitNoRng+0x4a>
    84d0:	2407      	movs	r4, #7
    84d2:	f000 f817 	bl	8504 <CC_HalTerminate>
    84d6:	e7e6      	b.n	84a6 <CC_LibInitNoRng+0xa>
    84d8:	2406      	movs	r4, #6
    84da:	e7fa      	b.n	84d2 <CC_LibInitNoRng+0x36>
    84dc:	2404      	movs	r4, #4
    84de:	4620      	mov	r0, r4
    84e0:	bd38      	pop	{r3, r4, r5, pc}
    84e2:	2400      	movs	r4, #0
    84e4:	e7f5      	b.n	84d2 <CC_LibInitNoRng+0x36>
    84e6:	2001      	movs	r0, #1
    84e8:	f000 f892 	bl	8610 <CC_PalPowerSaveModeSelect>
    84ec:	4604      	mov	r4, r0
    84ee:	2800      	cmp	r0, #0
    84f0:	d1f7      	bne.n	84e2 <CC_LibInitNoRng+0x46>
    84f2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    84f6:	e7d8      	b.n	84aa <CC_LibInitNoRng+0xe>
    84f8:	5002b000 	.word	0x5002b000
    84fc:	20e00000 	.word	0x20e00000

00008500 <CC_HalInit>:
    8500:	2000      	movs	r0, #0
    8502:	4770      	bx	lr

00008504 <CC_HalTerminate>:
    8504:	2000      	movs	r0, #0
    8506:	4770      	bx	lr

00008508 <CC_HalMaskInterrupt>:
    8508:	4b01      	ldr	r3, [pc, #4]	; (8510 <CC_HalMaskInterrupt+0x8>)
    850a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    850e:	4770      	bx	lr
    8510:	5002b000 	.word	0x5002b000

00008514 <CC_PalInit>:
    8514:	b510      	push	{r4, lr}
    8516:	4811      	ldr	r0, [pc, #68]	; (855c <CC_PalInit+0x48>)
    8518:	f000 f848 	bl	85ac <CC_PalMutexCreate>
    851c:	b100      	cbz	r0, 8520 <CC_PalInit+0xc>
    851e:	bd10      	pop	{r4, pc}
    8520:	480f      	ldr	r0, [pc, #60]	; (8560 <CC_PalInit+0x4c>)
    8522:	f000 f843 	bl	85ac <CC_PalMutexCreate>
    8526:	2800      	cmp	r0, #0
    8528:	d1f9      	bne.n	851e <CC_PalInit+0xa>
    852a:	4c0e      	ldr	r4, [pc, #56]	; (8564 <CC_PalInit+0x50>)
    852c:	4620      	mov	r0, r4
    852e:	f000 f83d 	bl	85ac <CC_PalMutexCreate>
    8532:	2800      	cmp	r0, #0
    8534:	d1f3      	bne.n	851e <CC_PalInit+0xa>
    8536:	4b0c      	ldr	r3, [pc, #48]	; (8568 <CC_PalInit+0x54>)
    8538:	480c      	ldr	r0, [pc, #48]	; (856c <CC_PalInit+0x58>)
    853a:	601c      	str	r4, [r3, #0]
    853c:	f000 f836 	bl	85ac <CC_PalMutexCreate>
    8540:	4601      	mov	r1, r0
    8542:	2800      	cmp	r0, #0
    8544:	d1eb      	bne.n	851e <CC_PalInit+0xa>
    8546:	f000 f82d 	bl	85a4 <CC_PalDmaInit>
    854a:	4604      	mov	r4, r0
    854c:	b108      	cbz	r0, 8552 <CC_PalInit+0x3e>
    854e:	4620      	mov	r0, r4
    8550:	bd10      	pop	{r4, pc}
    8552:	f000 f83f 	bl	85d4 <CC_PalPowerSaveModeInit>
    8556:	4620      	mov	r0, r4
    8558:	e7fa      	b.n	8550 <CC_PalInit+0x3c>
    855a:	bf00      	nop
    855c:	20004140 	.word	0x20004140
    8560:	20004134 	.word	0x20004134
    8564:	2000413c 	.word	0x2000413c
    8568:	20004144 	.word	0x20004144
    856c:	20004138 	.word	0x20004138

00008570 <CC_PalTerminate>:
    8570:	b508      	push	{r3, lr}
    8572:	4808      	ldr	r0, [pc, #32]	; (8594 <CC_PalTerminate+0x24>)
    8574:	f000 f824 	bl	85c0 <CC_PalMutexDestroy>
    8578:	4807      	ldr	r0, [pc, #28]	; (8598 <CC_PalTerminate+0x28>)
    857a:	f000 f821 	bl	85c0 <CC_PalMutexDestroy>
    857e:	4807      	ldr	r0, [pc, #28]	; (859c <CC_PalTerminate+0x2c>)
    8580:	f000 f81e 	bl	85c0 <CC_PalMutexDestroy>
    8584:	4806      	ldr	r0, [pc, #24]	; (85a0 <CC_PalTerminate+0x30>)
    8586:	f000 f81b 	bl	85c0 <CC_PalMutexDestroy>
    858a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    858e:	f000 b80b 	b.w	85a8 <CC_PalDmaTerminate>
    8592:	bf00      	nop
    8594:	20004140 	.word	0x20004140
    8598:	20004134 	.word	0x20004134
    859c:	2000413c 	.word	0x2000413c
    85a0:	20004138 	.word	0x20004138

000085a4 <CC_PalDmaInit>:
    85a4:	2000      	movs	r0, #0
    85a6:	4770      	bx	lr

000085a8 <CC_PalDmaTerminate>:
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop

000085ac <CC_PalMutexCreate>:
    85ac:	b508      	push	{r3, lr}
    85ae:	4b03      	ldr	r3, [pc, #12]	; (85bc <CC_PalMutexCreate+0x10>)
    85b0:	6802      	ldr	r2, [r0, #0]
    85b2:	681b      	ldr	r3, [r3, #0]
    85b4:	6810      	ldr	r0, [r2, #0]
    85b6:	4798      	blx	r3
    85b8:	2000      	movs	r0, #0
    85ba:	bd08      	pop	{r3, pc}
    85bc:	200040f8 	.word	0x200040f8

000085c0 <CC_PalMutexDestroy>:
    85c0:	b508      	push	{r3, lr}
    85c2:	4b03      	ldr	r3, [pc, #12]	; (85d0 <CC_PalMutexDestroy+0x10>)
    85c4:	6802      	ldr	r2, [r0, #0]
    85c6:	685b      	ldr	r3, [r3, #4]
    85c8:	6810      	ldr	r0, [r2, #0]
    85ca:	4798      	blx	r3
    85cc:	2000      	movs	r0, #0
    85ce:	bd08      	pop	{r3, pc}
    85d0:	200040f8 	.word	0x200040f8

000085d4 <CC_PalPowerSaveModeInit>:
    85d4:	b570      	push	{r4, r5, r6, lr}
    85d6:	4c09      	ldr	r4, [pc, #36]	; (85fc <CC_PalPowerSaveModeInit+0x28>)
    85d8:	4d09      	ldr	r5, [pc, #36]	; (8600 <CC_PalPowerSaveModeInit+0x2c>)
    85da:	6920      	ldr	r0, [r4, #16]
    85dc:	68ab      	ldr	r3, [r5, #8]
    85de:	4798      	blx	r3
    85e0:	b118      	cbz	r0, 85ea <CC_PalPowerSaveModeInit+0x16>
    85e2:	4b08      	ldr	r3, [pc, #32]	; (8604 <CC_PalPowerSaveModeInit+0x30>)
    85e4:	4808      	ldr	r0, [pc, #32]	; (8608 <CC_PalPowerSaveModeInit+0x34>)
    85e6:	685b      	ldr	r3, [r3, #4]
    85e8:	4798      	blx	r3
    85ea:	4a08      	ldr	r2, [pc, #32]	; (860c <CC_PalPowerSaveModeInit+0x38>)
    85ec:	68eb      	ldr	r3, [r5, #12]
    85ee:	6920      	ldr	r0, [r4, #16]
    85f0:	2100      	movs	r1, #0
    85f2:	6011      	str	r1, [r2, #0]
    85f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    85f8:	4718      	bx	r3
    85fa:	bf00      	nop
    85fc:	20004108 	.word	0x20004108
    8600:	200040f8 	.word	0x200040f8
    8604:	200040e8 	.word	0x200040e8
    8608:	0000ae58 	.word	0x0000ae58
    860c:	200050b0 	.word	0x200050b0

00008610 <CC_PalPowerSaveModeSelect>:
    8610:	b570      	push	{r4, r5, r6, lr}
    8612:	4d1b      	ldr	r5, [pc, #108]	; (8680 <CC_PalPowerSaveModeSelect+0x70>)
    8614:	4e1b      	ldr	r6, [pc, #108]	; (8684 <CC_PalPowerSaveModeSelect+0x74>)
    8616:	4604      	mov	r4, r0
    8618:	68b2      	ldr	r2, [r6, #8]
    861a:	6928      	ldr	r0, [r5, #16]
    861c:	4790      	blx	r2
    861e:	b9f8      	cbnz	r0, 8660 <CC_PalPowerSaveModeSelect+0x50>
    8620:	b15c      	cbz	r4, 863a <CC_PalPowerSaveModeSelect+0x2a>
    8622:	4c19      	ldr	r4, [pc, #100]	; (8688 <CC_PalPowerSaveModeSelect+0x78>)
    8624:	6823      	ldr	r3, [r4, #0]
    8626:	b1b3      	cbz	r3, 8656 <CC_PalPowerSaveModeSelect+0x46>
    8628:	2b01      	cmp	r3, #1
    862a:	d01b      	beq.n	8664 <CC_PalPowerSaveModeSelect+0x54>
    862c:	3b01      	subs	r3, #1
    862e:	6023      	str	r3, [r4, #0]
    8630:	6928      	ldr	r0, [r5, #16]
    8632:	68f3      	ldr	r3, [r6, #12]
    8634:	4798      	blx	r3
    8636:	2000      	movs	r0, #0
    8638:	bd70      	pop	{r4, r5, r6, pc}
    863a:	4c13      	ldr	r4, [pc, #76]	; (8688 <CC_PalPowerSaveModeSelect+0x78>)
    863c:	6821      	ldr	r1, [r4, #0]
    863e:	b941      	cbnz	r1, 8652 <CC_PalPowerSaveModeSelect+0x42>
    8640:	4b12      	ldr	r3, [pc, #72]	; (868c <CC_PalPowerSaveModeSelect+0x7c>)
    8642:	2201      	movs	r2, #1
    8644:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8648:	4a11      	ldr	r2, [pc, #68]	; (8690 <CC_PalPowerSaveModeSelect+0x80>)
    864a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    864e:	2b00      	cmp	r3, #0
    8650:	d1fb      	bne.n	864a <CC_PalPowerSaveModeSelect+0x3a>
    8652:	3101      	adds	r1, #1
    8654:	6021      	str	r1, [r4, #0]
    8656:	68f3      	ldr	r3, [r6, #12]
    8658:	6928      	ldr	r0, [r5, #16]
    865a:	4798      	blx	r3
    865c:	2000      	movs	r0, #0
    865e:	bd70      	pop	{r4, r5, r6, pc}
    8660:	480c      	ldr	r0, [pc, #48]	; (8694 <CC_PalPowerSaveModeSelect+0x84>)
    8662:	bd70      	pop	{r4, r5, r6, pc}
    8664:	4a0a      	ldr	r2, [pc, #40]	; (8690 <CC_PalPowerSaveModeSelect+0x80>)
    8666:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    866a:	2b00      	cmp	r3, #0
    866c:	d1fb      	bne.n	8666 <CC_PalPowerSaveModeSelect+0x56>
    866e:	4a07      	ldr	r2, [pc, #28]	; (868c <CC_PalPowerSaveModeSelect+0x7c>)
    8670:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8674:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8678:	f7ff ff46 	bl	8508 <CC_HalMaskInterrupt>
    867c:	6823      	ldr	r3, [r4, #0]
    867e:	e7d5      	b.n	862c <CC_PalPowerSaveModeSelect+0x1c>
    8680:	20004108 	.word	0x20004108
    8684:	200040f8 	.word	0x200040f8
    8688:	200050b0 	.word	0x200050b0
    868c:	5002a000 	.word	0x5002a000
    8690:	5002b000 	.word	0x5002b000
    8694:	ffff8fe9 	.word	0xffff8fe9

00008698 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8698:	4770      	bx	lr

0000869a <open_cab>:
    void **buffers;
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
    869a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    869e:	4604      	mov	r4, r0
    86a0:	460e      	mov	r6, r1
    86a2:	4690      	mov	r8, r2
    86a4:	4699      	mov	r9, r3
{
    86a6:	2118      	movs	r1, #24
    86a8:	2001      	movs	r0, #1
    86aa:	f000 fa91 	bl	8bd0 <calloc>
    86ae:	4605      	mov	r5, r0
    cab *new_cab = calloc(1, sizeof(cab));
    86b0:	6044      	str	r4, [r0, #4]
    new_cab->name = name;
    86b2:	6086      	str	r6, [r0, #8]
    new_cab->num = num;
    86b4:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->dim = dim;
    86b8:	2110      	movs	r1, #16
    86ba:	2001      	movs	r0, #1
    86bc:	f000 fa88 	bl	8bd0 <calloc>
    86c0:	6028      	str	r0, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    86c2:	2201      	movs	r2, #1
    86c4:	4611      	mov	r1, r2
    86c6:	f001 f80c 	bl	96e2 <z_impl_k_sem_init>
    new_cab->op_Mutex = (struct k_mutex*)calloc(1, sizeof(struct k_mutex));
    k_mutex_init(new_cab->op_Mutex);
    // allocate the buffersTaken array
    86ca:	2101      	movs	r1, #1
    86cc:	4630      	mov	r0, r6
    86ce:	f000 fa7f 	bl	8bd0 <calloc>
    86d2:	6168      	str	r0, [r5, #20]
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    86d4:	2400      	movs	r4, #0
    86d6:	e003      	b.n	86e0 <open_cab+0x46>
    for (size_t i = 0; i < num; i++)
    86d8:	696b      	ldr	r3, [r5, #20]
    86da:	2200      	movs	r2, #0
    86dc:	551a      	strb	r2, [r3, r4]
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    86de:	3401      	adds	r4, #1
    86e0:	42a6      	cmp	r6, r4
    86e2:	d8f9      	bhi.n	86d8 <open_cab+0x3e>
        new_cab->buffersTaken[i] = 0;

    // allocate all buffers
    86e4:	2104      	movs	r1, #4
    86e6:	4630      	mov	r0, r6
    86e8:	f000 fa72 	bl	8bd0 <calloc>
    86ec:	6128      	str	r0, [r5, #16]
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    86ee:	2400      	movs	r4, #0
    86f0:	e007      	b.n	8702 <open_cab+0x68>
    for (size_t i = 0; i < num; i++)
    {
    86f2:	692f      	ldr	r7, [r5, #16]
    86f4:	4641      	mov	r1, r8
    86f6:	2001      	movs	r0, #1
    86f8:	f000 fa6a 	bl	8bd0 <calloc>
    86fc:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    8700:	3401      	adds	r4, #1
    8702:	42a6      	cmp	r6, r4
    8704:	d8f5      	bhi.n	86f2 <open_cab+0x58>
        new_cab->buffers[i] = (void *)calloc(1, dim);
    }

    8706:	692b      	ldr	r3, [r5, #16]
    8708:	4642      	mov	r2, r8
    870a:	4649      	mov	r1, r9
    870c:	6818      	ldr	r0, [r3, #0]
    870e:	f000 faaf 	bl	8c70 <memcpy>
    memcpy(new_cab->buffers[0], first, dim);
    8712:	696b      	ldr	r3, [r5, #20]
    8714:	2201      	movs	r2, #1
    8716:	701a      	strb	r2, [r3, #0]
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    return new_cab;
    8718:	4628      	mov	r0, r5
    871a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000871e <sys_notify_validate>:
	if (notify == NULL) {
    871e:	4602      	mov	r2, r0
    8720:	b158      	cbz	r0, 873a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8722:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8724:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    8728:	2b01      	cmp	r3, #1
    872a:	d003      	beq.n	8734 <sys_notify_validate+0x16>
    872c:	2b03      	cmp	r3, #3
    872e:	d107      	bne.n	8740 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    8730:	6803      	ldr	r3, [r0, #0]
    8732:	b143      	cbz	r3, 8746 <sys_notify_validate+0x28>
		notify->result = 0;
    8734:	2000      	movs	r0, #0
    8736:	6090      	str	r0, [r2, #8]
    8738:	4770      	bx	lr
		return -EINVAL;
    873a:	f06f 0015 	mvn.w	r0, #21
    873e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    8740:	f06f 0015 	mvn.w	r0, #21
    8744:	4770      	bx	lr
			rv = -EINVAL;
    8746:	f06f 0015 	mvn.w	r0, #21
}
    874a:	4770      	bx	lr

0000874c <arch_printk_char_out>:
}
    874c:	2000      	movs	r0, #0
    874e:	4770      	bx	lr

00008750 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8750:	b40f      	push	{r0, r1, r2, r3}
    8752:	b500      	push	{lr}
    8754:	b083      	sub	sp, #12
    8756:	a904      	add	r1, sp, #16
    8758:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    875c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    875e:	f7f8 f821 	bl	7a4 <vprintk>

	va_end(ap);
}
    8762:	b003      	add	sp, #12
    8764:	f85d eb04 	ldr.w	lr, [sp], #4
    8768:	b004      	add	sp, #16
    876a:	4770      	bx	lr

0000876c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    876c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8770:	8b81      	ldrh	r1, [r0, #28]
    8772:	f021 0107 	bic.w	r1, r1, #7
    8776:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    8778:	8381      	strh	r1, [r0, #28]
}
    877a:	4770      	bx	lr

0000877c <notify_monitors>:
{
    877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8780:	4606      	mov	r6, r0
    8782:	460f      	mov	r7, r1
    8784:	4690      	mov	r8, r2
	return list->head;
    8786:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8788:	b119      	cbz	r1, 8792 <notify_monitors+0x16>
    878a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    878c:	b131      	cbz	r1, 879c <notify_monitors+0x20>
	return node->next;
    878e:	680c      	ldr	r4, [r1, #0]
    8790:	e004      	b.n	879c <notify_monitors+0x20>
    8792:	460c      	mov	r4, r1
    8794:	e002      	b.n	879c <notify_monitors+0x20>
    8796:	4623      	mov	r3, r4
    8798:	4621      	mov	r1, r4
    879a:	461c      	mov	r4, r3
    879c:	b159      	cbz	r1, 87b6 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    879e:	684d      	ldr	r5, [r1, #4]
    87a0:	4643      	mov	r3, r8
    87a2:	463a      	mov	r2, r7
    87a4:	4630      	mov	r0, r6
    87a6:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    87a8:	2c00      	cmp	r4, #0
    87aa:	d0f4      	beq.n	8796 <notify_monitors+0x1a>
    87ac:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    87ae:	2c00      	cmp	r4, #0
    87b0:	d0f2      	beq.n	8798 <notify_monitors+0x1c>
	return node->next;
    87b2:	6823      	ldr	r3, [r4, #0]
    87b4:	e7f0      	b.n	8798 <notify_monitors+0x1c>
}
    87b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000087ba <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    87ba:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    87bc:	f013 0307 	ands.w	r3, r3, #7
    87c0:	d103      	bne.n	87ca <process_recheck+0x10>
	return list->head;
    87c2:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    87c4:	b10a      	cbz	r2, 87ca <process_recheck+0x10>
		evt = EVT_START;
    87c6:	2003      	movs	r0, #3
    87c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    87ca:	2b02      	cmp	r3, #2
    87cc:	d003      	beq.n	87d6 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    87ce:	2b01      	cmp	r3, #1
    87d0:	d006      	beq.n	87e0 <process_recheck+0x26>
	int evt = EVT_NOP;
    87d2:	2000      	movs	r0, #0
    87d4:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    87d6:	8bc2      	ldrh	r2, [r0, #30]
    87d8:	2a00      	cmp	r2, #0
    87da:	d1f8      	bne.n	87ce <process_recheck+0x14>
		evt = EVT_STOP;
    87dc:	2004      	movs	r0, #4
    87de:	4770      	bx	lr
    87e0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    87e2:	b10b      	cbz	r3, 87e8 <process_recheck+0x2e>
		evt = EVT_RESET;
    87e4:	2005      	movs	r0, #5
}
    87e6:	4770      	bx	lr
	int evt = EVT_NOP;
    87e8:	2000      	movs	r0, #0
    87ea:	4770      	bx	lr

000087ec <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    87ec:	b158      	cbz	r0, 8806 <validate_args+0x1a>
{
    87ee:	b510      	push	{r4, lr}
    87f0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    87f2:	b159      	cbz	r1, 880c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    87f4:	1d08      	adds	r0, r1, #4
    87f6:	f7ff ff92 	bl	871e <sys_notify_validate>
	if ((rv == 0)
    87fa:	b918      	cbnz	r0, 8804 <validate_args+0x18>
	    && ((cli->notify.flags
    87fc:	68a3      	ldr	r3, [r4, #8]
    87fe:	f033 0303 	bics.w	r3, r3, #3
    8802:	d106      	bne.n	8812 <validate_args+0x26>
}
    8804:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8806:	f06f 0015 	mvn.w	r0, #21
}
    880a:	4770      	bx	lr
		return -EINVAL;
    880c:	f06f 0015 	mvn.w	r0, #21
    8810:	e7f8      	b.n	8804 <validate_args+0x18>
		rv = -EINVAL;
    8812:	f06f 0015 	mvn.w	r0, #21
    8816:	e7f5      	b.n	8804 <validate_args+0x18>

00008818 <notify_one>:
{
    8818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    881c:	4607      	mov	r7, r0
    881e:	460c      	mov	r4, r1
    8820:	4616      	mov	r6, r2
    8822:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8824:	4619      	mov	r1, r3
    8826:	1d20      	adds	r0, r4, #4
    8828:	f7f7 ff88 	bl	73c <sys_notify_finalize>
	if (cb) {
    882c:	b128      	cbz	r0, 883a <notify_one+0x22>
    882e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    8830:	462b      	mov	r3, r5
    8832:	4632      	mov	r2, r6
    8834:	4621      	mov	r1, r4
    8836:	4638      	mov	r0, r7
    8838:	47c0      	blx	r8
}
    883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000883e <notify_all>:
{
    883e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8842:	4680      	mov	r8, r0
    8844:	460c      	mov	r4, r1
    8846:	4617      	mov	r7, r2
    8848:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    884a:	e004      	b.n	8856 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    884c:	4633      	mov	r3, r6
    884e:	463a      	mov	r2, r7
    8850:	4640      	mov	r0, r8
    8852:	f7ff ffe1 	bl	8818 <notify_one>
    8856:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    8858:	b131      	cbz	r1, 8868 <notify_all+0x2a>
	return node->next;
    885a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    885c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    885e:	6863      	ldr	r3, [r4, #4]
    8860:	428b      	cmp	r3, r1
    8862:	d1f3      	bne.n	884c <notify_all+0xe>
	list->tail = node;
    8864:	6065      	str	r5, [r4, #4]
}
    8866:	e7f1      	b.n	884c <notify_all+0xe>
}
    8868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000886c <onoff_manager_init>:
	if ((mgr == NULL)
    886c:	b170      	cbz	r0, 888c <onoff_manager_init+0x20>
{
    886e:	b538      	push	{r3, r4, r5, lr}
    8870:	460c      	mov	r4, r1
    8872:	4605      	mov	r5, r0
	    || (transitions == NULL)
    8874:	b169      	cbz	r1, 8892 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    8876:	680b      	ldr	r3, [r1, #0]
    8878:	b173      	cbz	r3, 8898 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    887a:	684b      	ldr	r3, [r1, #4]
    887c:	b17b      	cbz	r3, 889e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    887e:	2220      	movs	r2, #32
    8880:	2100      	movs	r1, #0
    8882:	f000 fa24 	bl	8cce <memset>
    8886:	612c      	str	r4, [r5, #16]
	return 0;
    8888:	2000      	movs	r0, #0
}
    888a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    888c:	f06f 0015 	mvn.w	r0, #21
}
    8890:	4770      	bx	lr
		return -EINVAL;
    8892:	f06f 0015 	mvn.w	r0, #21
    8896:	e7f8      	b.n	888a <onoff_manager_init+0x1e>
    8898:	f06f 0015 	mvn.w	r0, #21
    889c:	e7f5      	b.n	888a <onoff_manager_init+0x1e>
    889e:	f06f 0015 	mvn.w	r0, #21
    88a2:	e7f2      	b.n	888a <onoff_manager_init+0x1e>

000088a4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    88a4:	b508      	push	{r3, lr}
    88a6:	4604      	mov	r4, r0
    88a8:	4608      	mov	r0, r1
    88aa:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    88ac:	461a      	mov	r2, r3
    88ae:	47a0      	blx	r4
	return z_impl_z_current_get();
    88b0:	f7ff f8ba 	bl	7a28 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    88b4:	f7f9 fe52 	bl	255c <z_impl_k_thread_abort>

000088b8 <free_list_add_bidx>:
{
    88b8:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    88ba:	1d13      	adds	r3, r2, #4
    88bc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    88c0:	b97c      	cbnz	r4, 88e2 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    88c2:	2301      	movs	r3, #1
    88c4:	fa03 f402 	lsl.w	r4, r3, r2
    88c8:	68c3      	ldr	r3, [r0, #12]
    88ca:	4323      	orrs	r3, r4
    88cc:	60c3      	str	r3, [r0, #12]
		b->next = c;
    88ce:	3204      	adds	r2, #4
    88d0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    88d4:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    88d6:	1d1a      	adds	r2, r3, #4
    88d8:	b289      	uxth	r1, r1
    88da:	5281      	strh	r1, [r0, r2]
    88dc:	3306      	adds	r3, #6
    88de:	52c1      	strh	r1, [r0, r3]
}
    88e0:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    88e2:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    88e4:	3204      	adds	r2, #4
    88e6:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    88e8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    88ec:	f10c 0e04 	add.w	lr, ip, #4
    88f0:	f820 300e 	strh.w	r3, [r0, lr]
    88f4:	f10c 0c06 	add.w	ip, ip, #6
    88f8:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    88fc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    88fe:	3306      	adds	r3, #6
    8900:	b289      	uxth	r1, r1
    8902:	52c1      	strh	r1, [r0, r3]
    8904:	5281      	strh	r1, [r0, r2]
    8906:	e7eb      	b.n	88e0 <free_list_add_bidx+0x28>

00008908 <free_list_add>:
{
    8908:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    890a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    890e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    8910:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    8912:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    8916:	f1c2 021f 	rsb	r2, r2, #31
    891a:	f7ff ffcd 	bl	88b8 <free_list_add_bidx>
}
    891e:	bd08      	pop	{r3, pc}

00008920 <extract_decimal>:
{
    8920:	4684      	mov	ip, r0
	const char *sp = *str;
    8922:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    8924:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    8926:	e005      	b.n	8934 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    8928:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    892c:	3201      	adds	r2, #1
    892e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    8932:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    8934:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8936:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    893a:	2909      	cmp	r1, #9
    893c:	d9f4      	bls.n	8928 <extract_decimal+0x8>
	*str = sp;
    893e:	f8cc 2000 	str.w	r2, [ip]
}
    8942:	4770      	bx	lr

00008944 <encode_uint>:
{
    8944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8948:	b083      	sub	sp, #12
    894a:	4604      	mov	r4, r0
    894c:	460d      	mov	r5, r1
    894e:	9201      	str	r2, [sp, #4]
    8950:	469a      	mov	sl, r3
    8952:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    8954:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8956:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    895a:	2b6f      	cmp	r3, #111	; 0x6f
    895c:	d00f      	beq.n	897e <encode_uint+0x3a>
    895e:	d906      	bls.n	896e <encode_uint+0x2a>
    8960:	2b70      	cmp	r3, #112	; 0x70
    8962:	d00f      	beq.n	8984 <encode_uint+0x40>
    8964:	2b78      	cmp	r3, #120	; 0x78
    8966:	d110      	bne.n	898a <encode_uint+0x46>
		return 16;
    8968:	f04f 0910 	mov.w	r9, #16
    896c:	e026      	b.n	89bc <encode_uint+0x78>
	switch (specifier) {
    896e:	2b58      	cmp	r3, #88	; 0x58
    8970:	d002      	beq.n	8978 <encode_uint+0x34>
    8972:	f04f 090a 	mov.w	r9, #10
    8976:	e021      	b.n	89bc <encode_uint+0x78>
		return 16;
    8978:	f04f 0910 	mov.w	r9, #16
    897c:	e01e      	b.n	89bc <encode_uint+0x78>
		return 8;
    897e:	f04f 0908 	mov.w	r9, #8
    8982:	e01b      	b.n	89bc <encode_uint+0x78>
		return 16;
    8984:	f04f 0910 	mov.w	r9, #16
    8988:	e018      	b.n	89bc <encode_uint+0x78>
	switch (specifier) {
    898a:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    898e:	e015      	b.n	89bc <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8990:	f1bb 0f19 	cmp.w	fp, #25
    8994:	d821      	bhi.n	89da <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    8996:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8998:	3237      	adds	r2, #55	; 0x37
    899a:	b2d2      	uxtb	r2, r2
    899c:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    89a0:	463a      	mov	r2, r7
    89a2:	4643      	mov	r3, r8
    89a4:	4620      	mov	r0, r4
    89a6:	4629      	mov	r1, r5
    89a8:	f7f7 fbaa 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    89ac:	42bc      	cmp	r4, r7
    89ae:	f175 0300 	sbcs.w	r3, r5, #0
    89b2:	d316      	bcc.n	89e2 <encode_uint+0x9e>
    89b4:	4556      	cmp	r6, sl
    89b6:	d914      	bls.n	89e2 <encode_uint+0x9e>
		value /= radix;
    89b8:	4604      	mov	r4, r0
    89ba:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    89bc:	f04f 0800 	mov.w	r8, #0
    89c0:	464f      	mov	r7, r9
    89c2:	464a      	mov	r2, r9
    89c4:	4643      	mov	r3, r8
    89c6:	4620      	mov	r0, r4
    89c8:	4629      	mov	r1, r5
    89ca:	f7f7 fb99 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    89ce:	2a09      	cmp	r2, #9
    89d0:	d8de      	bhi.n	8990 <encode_uint+0x4c>
    89d2:	b2d2      	uxtb	r2, r2
    89d4:	3230      	adds	r2, #48	; 0x30
    89d6:	b2d2      	uxtb	r2, r2
    89d8:	e7e0      	b.n	899c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    89da:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    89dc:	3257      	adds	r2, #87	; 0x57
    89de:	b2d2      	uxtb	r2, r2
    89e0:	e7dc      	b.n	899c <encode_uint+0x58>
	if (conv->flag_hash) {
    89e2:	9b01      	ldr	r3, [sp, #4]
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	f013 0f20 	tst.w	r3, #32
    89ea:	d005      	beq.n	89f8 <encode_uint+0xb4>
		if (radix == 8) {
    89ec:	f1b9 0f08 	cmp.w	r9, #8
    89f0:	d006      	beq.n	8a00 <encode_uint+0xbc>
		} else if (radix == 16) {
    89f2:	f1b9 0f10 	cmp.w	r9, #16
    89f6:	d009      	beq.n	8a0c <encode_uint+0xc8>
}
    89f8:	4630      	mov	r0, r6
    89fa:	b003      	add	sp, #12
    89fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    8a00:	9a01      	ldr	r2, [sp, #4]
    8a02:	7893      	ldrb	r3, [r2, #2]
    8a04:	f043 0308 	orr.w	r3, r3, #8
    8a08:	7093      	strb	r3, [r2, #2]
    8a0a:	e7f5      	b.n	89f8 <encode_uint+0xb4>
			conv->altform_0c = true;
    8a0c:	9a01      	ldr	r2, [sp, #4]
    8a0e:	7893      	ldrb	r3, [r2, #2]
    8a10:	f043 0310 	orr.w	r3, r3, #16
    8a14:	7093      	strb	r3, [r2, #2]
    8a16:	e7ef      	b.n	89f8 <encode_uint+0xb4>

00008a18 <outs>:
{
    8a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a1c:	4607      	mov	r7, r0
    8a1e:	460e      	mov	r6, r1
    8a20:	4614      	mov	r4, r2
    8a22:	4698      	mov	r8, r3
	size_t count = 0;
    8a24:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8a26:	e006      	b.n	8a36 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    8a28:	4631      	mov	r1, r6
    8a2a:	f814 0b01 	ldrb.w	r0, [r4], #1
    8a2e:	47b8      	blx	r7
		if (rc < 0) {
    8a30:	2800      	cmp	r0, #0
    8a32:	db09      	blt.n	8a48 <outs+0x30>
		++count;
    8a34:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8a36:	4544      	cmp	r4, r8
    8a38:	d3f6      	bcc.n	8a28 <outs+0x10>
    8a3a:	f1b8 0f00 	cmp.w	r8, #0
    8a3e:	d102      	bne.n	8a46 <outs+0x2e>
    8a40:	7823      	ldrb	r3, [r4, #0]
    8a42:	2b00      	cmp	r3, #0
    8a44:	d1f0      	bne.n	8a28 <outs+0x10>
	return (int)count;
    8a46:	4628      	mov	r0, r5
}
    8a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a4c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8a4c:	4040      	eors	r0, r0
    8a4e:	f380 8811 	msr	BASEPRI, r0
    8a52:	f04f 0004 	mov.w	r0, #4
    8a56:	df02      	svc	2
}
    8a58:	4770      	bx	lr

00008a5a <assert_print>:

void assert_print(const char *fmt, ...)
{
    8a5a:	b40f      	push	{r0, r1, r2, r3}
    8a5c:	b500      	push	{lr}
    8a5e:	b083      	sub	sp, #12
    8a60:	a904      	add	r1, sp, #16
    8a62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8a66:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8a68:	f7f7 fe9c 	bl	7a4 <vprintk>

	va_end(ap);
}
    8a6c:	b003      	add	sp, #12
    8a6e:	f85d eb04 	ldr.w	lr, [sp], #4
    8a72:	b004      	add	sp, #16
    8a74:	4770      	bx	lr

00008a76 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8a76:	4770      	bx	lr

00008a78 <abort_function>:
{
    8a78:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8a7a:	2000      	movs	r0, #0
    8a7c:	f7f8 ff12 	bl	18a4 <sys_reboot>

00008a80 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8a80:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8a82:	f7fc fee5 	bl	5850 <z_fatal_error>
}
    8a86:	bd08      	pop	{r3, pc}

00008a88 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8a88:	b508      	push	{r3, lr}
    8a8a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8a8c:	6800      	ldr	r0, [r0, #0]
    8a8e:	f7ff fff7 	bl	8a80 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    8a92:	bd08      	pop	{r3, pc}

00008a94 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    8a94:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8a96:	2100      	movs	r1, #0
    8a98:	2001      	movs	r0, #1
    8a9a:	f7ff fff1 	bl	8a80 <z_arm_fatal_error>
}
    8a9e:	bd08      	pop	{r3, pc}

00008aa0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8aa0:	b508      	push	{r3, lr}
	handler();
    8aa2:	f7f9 fa4b 	bl	1f3c <z_SysNmiOnReset>
	z_arm_int_exit();
    8aa6:	f7f9 fb41 	bl	212c <z_arm_exc_exit>
}
    8aaa:	bd08      	pop	{r3, pc}

00008aac <memory_fault_recoverable>:
}
    8aac:	2000      	movs	r0, #0
    8aae:	4770      	bx	lr

00008ab0 <debug_monitor>:
	*recoverable = false;
    8ab0:	2300      	movs	r3, #0
    8ab2:	700b      	strb	r3, [r1, #0]
}
    8ab4:	4770      	bx	lr

00008ab6 <fault_handle>:
{
    8ab6:	b508      	push	{r3, lr}
	*recoverable = false;
    8ab8:	2300      	movs	r3, #0
    8aba:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    8abc:	1ecb      	subs	r3, r1, #3
    8abe:	2b09      	cmp	r3, #9
    8ac0:	d81a      	bhi.n	8af8 <fault_handle+0x42>
    8ac2:	e8df f003 	tbb	[pc, r3]
    8ac6:	0905      	.short	0x0905
    8ac8:	1919110d 	.word	0x1919110d
    8acc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    8ad0:	4611      	mov	r1, r2
    8ad2:	f7f9 fbe3 	bl	229c <hard_fault>
		break;
    8ad6:	e010      	b.n	8afa <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    8ad8:	2100      	movs	r1, #0
    8ada:	f7f9 fb71 	bl	21c0 <mem_manage_fault>
		break;
    8ade:	e00c      	b.n	8afa <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    8ae0:	2100      	movs	r1, #0
    8ae2:	f7f9 fb31 	bl	2148 <bus_fault>
		break;
    8ae6:	e008      	b.n	8afa <fault_handle+0x44>
		reason = usage_fault(esf);
    8ae8:	f7f9 fb58 	bl	219c <usage_fault>
		break;
    8aec:	e005      	b.n	8afa <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    8aee:	4611      	mov	r1, r2
    8af0:	f7ff ffde 	bl	8ab0 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8af4:	2000      	movs	r0, #0
		break;
    8af6:	e000      	b.n	8afa <fault_handle+0x44>
	switch (fault) {
    8af8:	2000      	movs	r0, #0
}
    8afa:	bd08      	pop	{r3, pc}

00008afc <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    8afc:	6843      	ldr	r3, [r0, #4]
    8afe:	1e5a      	subs	r2, r3, #1
		&&
    8b00:	4213      	tst	r3, r2
    8b02:	d106      	bne.n	8b12 <mpu_partition_is_valid+0x16>
		&&
    8b04:	2b1f      	cmp	r3, #31
    8b06:	d906      	bls.n	8b16 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    8b08:	6803      	ldr	r3, [r0, #0]
		&&
    8b0a:	421a      	tst	r2, r3
    8b0c:	d005      	beq.n	8b1a <mpu_partition_is_valid+0x1e>
    8b0e:	2000      	movs	r0, #0
    8b10:	4770      	bx	lr
    8b12:	2000      	movs	r0, #0
    8b14:	4770      	bx	lr
    8b16:	2000      	movs	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	2001      	movs	r0, #1
}
    8b1c:	4770      	bx	lr

00008b1e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    8b1e:	2807      	cmp	r0, #7
    8b20:	d805      	bhi.n	8b2e <region_allocate_and_init+0x10>
{
    8b22:	b510      	push	{r4, lr}
    8b24:	4604      	mov	r4, r0
	region_init(index, region_conf);
    8b26:	f7f9 fd53 	bl	25d0 <region_init>
	return index;
    8b2a:	4620      	mov	r0, r4
}
    8b2c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    8b2e:	f06f 0015 	mvn.w	r0, #21
}
    8b32:	4770      	bx	lr

00008b34 <mpu_configure_region>:
{
    8b34:	b500      	push	{lr}
    8b36:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    8b38:	680b      	ldr	r3, [r1, #0]
    8b3a:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    8b3c:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8b3e:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    8b40:	2b20      	cmp	r3, #32
    8b42:	d912      	bls.n	8b6a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    8b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8b48:	d811      	bhi.n	8b6e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8b4a:	3b01      	subs	r3, #1
    8b4c:	fab3 f383 	clz	r3, r3
    8b50:	f1c3 031f 	rsb	r3, r3, #31
    8b54:	005b      	lsls	r3, r3, #1
    8b56:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    8b5a:	4313      	orrs	r3, r2
    8b5c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    8b5e:	a901      	add	r1, sp, #4
    8b60:	f7ff ffdd 	bl	8b1e <region_allocate_and_init>
}
    8b64:	b005      	add	sp, #20
    8b66:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    8b6a:	2308      	movs	r3, #8
    8b6c:	e7f5      	b.n	8b5a <mpu_configure_region+0x26>
		return REGION_4G;
    8b6e:	233e      	movs	r3, #62	; 0x3e
    8b70:	e7f3      	b.n	8b5a <mpu_configure_region+0x26>

00008b72 <mpu_configure_regions>:
{
    8b72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8b76:	4680      	mov	r8, r0
    8b78:	460f      	mov	r7, r1
    8b7a:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    8b7c:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    8b7e:	2500      	movs	r5, #0
    8b80:	e009      	b.n	8b96 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    8b82:	4621      	mov	r1, r4
    8b84:	b2f0      	uxtb	r0, r6
    8b86:	f7ff ffd5 	bl	8b34 <mpu_configure_region>
    8b8a:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    8b8c:	f110 0f16 	cmn.w	r0, #22
    8b90:	d014      	beq.n	8bbc <mpu_configure_regions+0x4a>
		reg_index++;
    8b92:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    8b94:	3501      	adds	r5, #1
    8b96:	42bd      	cmp	r5, r7
    8b98:	da10      	bge.n	8bbc <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    8b9a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    8b9e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    8ba2:	6862      	ldr	r2, [r4, #4]
    8ba4:	2a00      	cmp	r2, #0
    8ba6:	d0f5      	beq.n	8b94 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    8ba8:	f1b9 0f00 	cmp.w	r9, #0
    8bac:	d0e9      	beq.n	8b82 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    8bae:	4620      	mov	r0, r4
    8bb0:	f7ff ffa4 	bl	8afc <mpu_partition_is_valid>
		if (do_sanity_check &&
    8bb4:	2800      	cmp	r0, #0
    8bb6:	d1e4      	bne.n	8b82 <mpu_configure_regions+0x10>
			return -EINVAL;
    8bb8:	f06f 0615 	mvn.w	r6, #21
}
    8bbc:	4630      	mov	r0, r6
    8bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008bc2 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    8bc2:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    8bc4:	f7fc fe3e 	bl	5844 <z_impl_z_errno>
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
	errno = ENOMEM;
    8bc8:	230c      	movs	r3, #12
    8bca:	6003      	str	r3, [r0, #0]

	return NULL;
}
    8bcc:	2000      	movs	r0, #0
    8bce:	bd08      	pop	{r3, pc}

00008bd0 <calloc>:

#endif /* CONFIG_MINIMAL_LIBC_MALLOC */

#ifdef CONFIG_MINIMAL_LIBC_CALLOC
void *calloc(size_t nmemb, size_t size)
{
    8bd0:	b538      	push	{r3, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
    8bd2:	2300      	movs	r3, #0
    8bd4:	fba0 4001 	umull	r4, r0, r0, r1
    8bd8:	b958      	cbnz	r0, 8bf2 <calloc+0x22>
	void *ret;

	if (size_mul_overflow(nmemb, size, &size)) {
    8bda:	b963      	cbnz	r3, 8bf6 <calloc+0x26>
		errno = ENOMEM;
		return NULL;
	}

	ret = malloc(size);
    8bdc:	4620      	mov	r0, r4
    8bde:	f7ff fff0 	bl	8bc2 <malloc>

	if (ret != NULL) {
    8be2:	4605      	mov	r5, r0
    8be4:	b118      	cbz	r0, 8bee <calloc+0x1e>
		(void)memset(ret, 0, size);
    8be6:	4622      	mov	r2, r4
    8be8:	2100      	movs	r1, #0
    8bea:	f000 f870 	bl	8cce <memset>
	}

	return ret;
}
    8bee:	4628      	mov	r0, r5
    8bf0:	bd38      	pop	{r3, r4, r5, pc}
    8bf2:	2301      	movs	r3, #1
    8bf4:	e7f1      	b.n	8bda <calloc+0xa>
    8bf6:	f7fc fe25 	bl	5844 <z_impl_z_errno>
		errno = ENOMEM;
    8bfa:	230c      	movs	r3, #12
    8bfc:	6003      	str	r3, [r0, #0]
		return NULL;
    8bfe:	2500      	movs	r5, #0
    8c00:	e7f5      	b.n	8bee <calloc+0x1e>

00008c02 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    8c02:	4602      	mov	r2, r0
    8c04:	e002      	b.n	8c0c <strcpy+0xa>
		*d = *s;
    8c06:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    8c0a:	3101      	adds	r1, #1
	while (*s != '\0') {
    8c0c:	780b      	ldrb	r3, [r1, #0]
    8c0e:	2b00      	cmp	r3, #0
    8c10:	d1f9      	bne.n	8c06 <strcpy+0x4>
	}

	*d = '\0';
    8c12:	7013      	strb	r3, [r2, #0]

	return dest;
}
    8c14:	4770      	bx	lr

00008c16 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    8c16:	4603      	mov	r3, r0
    8c18:	b1a2      	cbz	r2, 8c44 <strncpy+0x2e>
{
    8c1a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    8c1c:	780c      	ldrb	r4, [r1, #0]
    8c1e:	b12c      	cbz	r4, 8c2c <strncpy+0x16>
		*d = *s;
    8c20:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    8c24:	3101      	adds	r1, #1
		d++;
		n--;
    8c26:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    8c28:	2a00      	cmp	r2, #0
    8c2a:	d1f7      	bne.n	8c1c <strncpy+0x6>
	}

	while (n > 0) {
    8c2c:	b122      	cbz	r2, 8c38 <strncpy+0x22>
		*d = '\0';
    8c2e:	2100      	movs	r1, #0
    8c30:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    8c34:	3a01      	subs	r2, #1
    8c36:	e7f9      	b.n	8c2c <strncpy+0x16>
	}

	return dest;
}
    8c38:	bc10      	pop	{r4}
    8c3a:	4770      	bx	lr
		*d = '\0';
    8c3c:	2100      	movs	r1, #0
    8c3e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8c42:	3a01      	subs	r2, #1
	while (n > 0) {
    8c44:	2a00      	cmp	r2, #0
    8c46:	d1f9      	bne.n	8c3c <strncpy+0x26>
    8c48:	4770      	bx	lr

00008c4a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8c4a:	4603      	mov	r3, r0
	size_t n = 0;
    8c4c:	2000      	movs	r0, #0

	while (*s != '\0') {
    8c4e:	e001      	b.n	8c54 <strlen+0xa>
		s++;
    8c50:	3301      	adds	r3, #1
		n++;
    8c52:	3001      	adds	r0, #1
	while (*s != '\0') {
    8c54:	781a      	ldrb	r2, [r3, #0]
    8c56:	2a00      	cmp	r2, #0
    8c58:	d1fa      	bne.n	8c50 <strlen+0x6>
	}

	return n;
}
    8c5a:	4770      	bx	lr

00008c5c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8c5c:	4603      	mov	r3, r0
	size_t n = 0;
    8c5e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8c60:	e001      	b.n	8c66 <strnlen+0xa>
		s++;
    8c62:	3301      	adds	r3, #1
		n++;
    8c64:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    8c66:	781a      	ldrb	r2, [r3, #0]
    8c68:	b10a      	cbz	r2, 8c6e <strnlen+0x12>
    8c6a:	4288      	cmp	r0, r1
    8c6c:	d3f9      	bcc.n	8c62 <strnlen+0x6>
	}

	return n;
}
    8c6e:	4770      	bx	lr

00008c70 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    8c70:	ea80 0301 	eor.w	r3, r0, r1
    8c74:	f013 0f03 	tst.w	r3, #3
    8c78:	d001      	beq.n	8c7e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    8c7a:	4603      	mov	r3, r0
    8c7c:	e023      	b.n	8cc6 <memcpy+0x56>
    8c7e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    8c80:	f013 0f03 	tst.w	r3, #3
    8c84:	d00f      	beq.n	8ca6 <memcpy+0x36>
			if (n == 0) {
    8c86:	b30a      	cbz	r2, 8ccc <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    8c88:	f811 cb01 	ldrb.w	ip, [r1], #1
    8c8c:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    8c90:	3a01      	subs	r2, #1
    8c92:	e7f5      	b.n	8c80 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    8c94:	f811 cb01 	ldrb.w	ip, [r1], #1
    8c98:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8c9c:	3a01      	subs	r2, #1
	while (n > 0) {
    8c9e:	2a00      	cmp	r2, #0
    8ca0:	d1f8      	bne.n	8c94 <memcpy+0x24>
	}

	return d;
}
    8ca2:	bc10      	pop	{r4}
    8ca4:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    8ca6:	2a03      	cmp	r2, #3
    8ca8:	d90d      	bls.n	8cc6 <memcpy+0x56>
{
    8caa:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    8cac:	f851 4b04 	ldr.w	r4, [r1], #4
    8cb0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    8cb4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    8cb6:	2a03      	cmp	r2, #3
    8cb8:	d8f8      	bhi.n	8cac <memcpy+0x3c>
    8cba:	e7f0      	b.n	8c9e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    8cbc:	f811 cb01 	ldrb.w	ip, [r1], #1
    8cc0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8cc4:	3a01      	subs	r2, #1
	while (n > 0) {
    8cc6:	2a00      	cmp	r2, #0
    8cc8:	d1f8      	bne.n	8cbc <memcpy+0x4c>
    8cca:	4770      	bx	lr
}
    8ccc:	4770      	bx	lr

00008cce <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8cce:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    8cd2:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8cd4:	e002      	b.n	8cdc <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    8cd6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8cda:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8cdc:	f013 0f03 	tst.w	r3, #3
    8ce0:	d002      	beq.n	8ce8 <memset+0x1a>
		if (n == 0) {
    8ce2:	2a00      	cmp	r2, #0
    8ce4:	d1f7      	bne.n	8cd6 <memset+0x8>
    8ce6:	e00f      	b.n	8d08 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    8ce8:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    8cea:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    8cee:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    8cf2:	2a03      	cmp	r2, #3
    8cf4:	d906      	bls.n	8d04 <memset+0x36>
		*(d_word++) = c_word;
    8cf6:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    8cfa:	3a04      	subs	r2, #4
    8cfc:	e7f9      	b.n	8cf2 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    8cfe:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8d02:	3a01      	subs	r2, #1
	while (n > 0) {
    8d04:	2a00      	cmp	r2, #0
    8d06:	d1fa      	bne.n	8cfe <memset+0x30>
	}

	return buf;
}
    8d08:	4770      	bx	lr

00008d0a <_stdout_hook_default>:
}
    8d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8d0e:	4770      	bx	lr

00008d10 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    8d10:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    8d12:	f7f9 fd51 	bl	27b8 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    8d16:	bd08      	pop	{r3, pc}

00008d18 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d1c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8d20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8d24:	2a08      	cmp	r2, #8
    8d26:	d001      	beq.n	8d2c <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    8d28:	2000      	movs	r0, #0
    8d2a:	4770      	bx	lr
                switch(var2)
    8d2c:	2b02      	cmp	r3, #2
    8d2e:	d001      	beq.n	8d34 <nrf52_errata_197+0x1c>
                        return false;
    8d30:	2000      	movs	r0, #0
    8d32:	4770      	bx	lr
                        return true;
    8d34:	2001      	movs	r0, #1
    #endif
}
    8d36:	4770      	bx	lr

00008d38 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8d38:	2806      	cmp	r0, #6
    8d3a:	d000      	beq.n	8d3e <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    8d3c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d42:	2201      	movs	r2, #1
    8d44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8d48:	f3bf 8f4f 	dsb	sy
        __WFE();
    8d4c:	bf20      	wfe
    while (true)
    8d4e:	e7fd      	b.n	8d4c <pm_state_set+0x14>

00008d50 <pm_state_exit_post_ops>:
    8d50:	2300      	movs	r3, #0
    8d52:	f383 8811 	msr	BASEPRI, r3
    8d56:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8d5a:	4770      	bx	lr

00008d5c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    8d5c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    8d5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8d62:	0089      	lsls	r1, r1, #2
    8d64:	3140      	adds	r1, #64	; 0x40
}
    8d66:	4408      	add	r0, r1
    8d68:	4770      	bx	lr

00008d6a <get_sub_config>:
	const struct nrf_clock_control_config *config =
    8d6a:	6840      	ldr	r0, [r0, #4]
}
    8d6c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8d70:	4770      	bx	lr

00008d72 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    8d72:	6900      	ldr	r0, [r0, #16]
}
    8d74:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    8d78:	4770      	bx	lr

00008d7a <set_off_state>:
	__asm__ volatile(
    8d7a:	f04f 0320 	mov.w	r3, #32
    8d7e:	f3ef 8211 	mrs	r2, BASEPRI
    8d82:	f383 8812 	msr	BASEPRI_MAX, r3
    8d86:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8d8a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8d8c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    8d90:	d001      	beq.n	8d96 <set_off_state+0x1c>
    8d92:	428b      	cmp	r3, r1
    8d94:	d107      	bne.n	8da6 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8d96:	2301      	movs	r3, #1
    8d98:	6003      	str	r3, [r0, #0]
	int err = 0;
    8d9a:	2000      	movs	r0, #0
	__asm__ volatile(
    8d9c:	f382 8811 	msr	BASEPRI, r2
    8da0:	f3bf 8f6f 	isb	sy
}
    8da4:	4770      	bx	lr
		err = -EPERM;
    8da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8daa:	e7f7      	b.n	8d9c <set_off_state+0x22>

00008dac <set_starting_state>:
	__asm__ volatile(
    8dac:	f04f 0320 	mov.w	r3, #32
    8db0:	f3ef 8211 	mrs	r2, BASEPRI
    8db4:	f383 8812 	msr	BASEPRI_MAX, r3
    8db8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8dbc:	6803      	ldr	r3, [r0, #0]
    8dbe:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8dc2:	f003 0307 	and.w	r3, r3, #7
    8dc6:	2b01      	cmp	r3, #1
    8dc8:	d008      	beq.n	8ddc <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    8dca:	458c      	cmp	ip, r1
    8dcc:	d009      	beq.n	8de2 <set_starting_state+0x36>
		err = -EPERM;
    8dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    8dd2:	f382 8811 	msr	BASEPRI, r2
    8dd6:	f3bf 8f6f 	isb	sy
}
    8dda:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8ddc:	6001      	str	r1, [r0, #0]
	int err = 0;
    8dde:	2000      	movs	r0, #0
    8de0:	e7f7      	b.n	8dd2 <set_starting_state+0x26>
		err = -EALREADY;
    8de2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8de6:	e7f4      	b.n	8dd2 <set_starting_state+0x26>

00008de8 <set_on_state>:
	__asm__ volatile(
    8de8:	f04f 0320 	mov.w	r3, #32
    8dec:	f3ef 8211 	mrs	r2, BASEPRI
    8df0:	f383 8812 	msr	BASEPRI_MAX, r3
    8df4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8df8:	6803      	ldr	r3, [r0, #0]
    8dfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8dfe:	f043 0302 	orr.w	r3, r3, #2
    8e02:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8e04:	f382 8811 	msr	BASEPRI, r2
    8e08:	f3bf 8f6f 	isb	sy
}
    8e0c:	4770      	bx	lr

00008e0e <clkstarted_handle>:
{
    8e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e10:	4606      	mov	r6, r0
    8e12:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    8e14:	f7ff ffa2 	bl	8d5c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    8e18:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    8e1a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    8e1c:	2300      	movs	r3, #0
    8e1e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    8e22:	f7ff ffe1 	bl	8de8 <set_on_state>
	if (callback) {
    8e26:	b11d      	cbz	r5, 8e30 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    8e28:	463a      	mov	r2, r7
    8e2a:	4621      	mov	r1, r4
    8e2c:	4630      	mov	r0, r6
    8e2e:	47a8      	blx	r5
}
    8e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008e32 <async_start>:
{
    8e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e36:	4606      	mov	r6, r0
    8e38:	4690      	mov	r8, r2
    8e3a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    8e3c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8e3e:	4629      	mov	r1, r5
    8e40:	f7ff ff8c 	bl	8d5c <get_sub_data>
    8e44:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    8e46:	9906      	ldr	r1, [sp, #24]
    8e48:	3008      	adds	r0, #8
    8e4a:	f7ff ffaf 	bl	8dac <set_starting_state>
	if (err < 0) {
    8e4e:	2800      	cmp	r0, #0
    8e50:	db09      	blt.n	8e66 <async_start+0x34>
	subdata->cb = cb;
    8e52:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    8e56:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    8e58:	4629      	mov	r1, r5
    8e5a:	4630      	mov	r0, r6
    8e5c:	f7ff ff85 	bl	8d6a <get_sub_config>
    8e60:	6803      	ldr	r3, [r0, #0]
    8e62:	4798      	blx	r3
	return 0;
    8e64:	2000      	movs	r0, #0
}
    8e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008e6a <api_start>:
{
    8e6a:	b510      	push	{r4, lr}
    8e6c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8e6e:	2480      	movs	r4, #128	; 0x80
    8e70:	9400      	str	r4, [sp, #0]
    8e72:	f7ff ffde 	bl	8e32 <async_start>
}
    8e76:	b002      	add	sp, #8
    8e78:	bd10      	pop	{r4, pc}

00008e7a <onoff_started_callback>:
{
    8e7a:	b510      	push	{r4, lr}
    8e7c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    8e7e:	b2c9      	uxtb	r1, r1
    8e80:	f7ff ff77 	bl	8d72 <get_onoff_manager>
	notify(mgr, 0);
    8e84:	2100      	movs	r1, #0
    8e86:	47a0      	blx	r4
}
    8e88:	bd10      	pop	{r4, pc}

00008e8a <hfclk_start>:
{
    8e8a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    8e8c:	2001      	movs	r0, #1
    8e8e:	f7fb fbb1 	bl	45f4 <nrfx_clock_start>
}
    8e92:	bd08      	pop	{r3, pc}

00008e94 <lfclk_start>:
{
    8e94:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8e96:	2000      	movs	r0, #0
    8e98:	f7fb fbac 	bl	45f4 <nrfx_clock_start>
}
    8e9c:	bd08      	pop	{r3, pc}

00008e9e <hfclk_stop>:
{
    8e9e:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    8ea0:	2001      	movs	r0, #1
    8ea2:	f7fb fc1d 	bl	46e0 <nrfx_clock_stop>
}
    8ea6:	bd08      	pop	{r3, pc}

00008ea8 <lfclk_stop>:
{
    8ea8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8eaa:	2000      	movs	r0, #0
    8eac:	f7fb fc18 	bl	46e0 <nrfx_clock_stop>
}
    8eb0:	bd08      	pop	{r3, pc}

00008eb2 <api_stop>:
{
    8eb2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    8eb4:	2280      	movs	r2, #128	; 0x80
    8eb6:	f7f9 fd43 	bl	2940 <stop>
}
    8eba:	bd08      	pop	{r3, pc}

00008ebc <blocking_start_callback>:
{
    8ebc:	b508      	push	{r3, lr}
    8ebe:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8ec0:	f7fd fb40 	bl	6544 <z_impl_k_sem_give>
}
    8ec4:	bd08      	pop	{r3, pc}

00008ec6 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8ec6:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    8eca:	f020 0001 	bic.w	r0, r0, #1
    8ece:	0540      	lsls	r0, r0, #21
    8ed0:	0d40      	lsrs	r0, r0, #21
    8ed2:	f240 2306 	movw	r3, #518	; 0x206
    8ed6:	4298      	cmp	r0, r3
    8ed8:	d033      	beq.n	8f42 <get_drive+0x7c>
    8eda:	d816      	bhi.n	8f0a <get_drive+0x44>
    8edc:	2806      	cmp	r0, #6
    8ede:	d02c      	beq.n	8f3a <get_drive+0x74>
    8ee0:	d906      	bls.n	8ef0 <get_drive+0x2a>
    8ee2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    8ee6:	d10d      	bne.n	8f04 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    8ee8:	2301      	movs	r3, #1
    8eea:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8eec:	2000      	movs	r0, #0
		break;
    8eee:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8ef0:	b300      	cbz	r0, 8f34 <get_drive+0x6e>
    8ef2:	2802      	cmp	r0, #2
    8ef4:	d103      	bne.n	8efe <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    8ef6:	2304      	movs	r3, #4
    8ef8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8efa:	2000      	movs	r0, #0
		break;
    8efc:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8efe:	f06f 0015 	mvn.w	r0, #21
    8f02:	4770      	bx	lr
    8f04:	f06f 0015 	mvn.w	r0, #21
    8f08:	4770      	bx	lr
    8f0a:	f240 4302 	movw	r3, #1026	; 0x402
    8f0e:	4298      	cmp	r0, r3
    8f10:	d01b      	beq.n	8f4a <get_drive+0x84>
    8f12:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    8f16:	d103      	bne.n	8f20 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    8f18:	2303      	movs	r3, #3
    8f1a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8f1c:	2000      	movs	r0, #0
		break;
    8f1e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8f20:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    8f24:	d103      	bne.n	8f2e <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    8f26:	2302      	movs	r3, #2
    8f28:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8f2a:	2000      	movs	r0, #0
		break;
    8f2c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    8f2e:	f06f 0015 	mvn.w	r0, #21
    8f32:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    8f34:	2000      	movs	r0, #0
    8f36:	7008      	strb	r0, [r1, #0]
		break;
    8f38:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    8f3a:	2306      	movs	r3, #6
    8f3c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8f3e:	2000      	movs	r0, #0
		break;
    8f40:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    8f42:	2307      	movs	r3, #7
    8f44:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8f46:	2000      	movs	r0, #0
		break;
    8f48:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    8f4a:	2305      	movs	r3, #5
    8f4c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    8f4e:	2000      	movs	r0, #0
}
    8f50:	4770      	bx	lr

00008f52 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    8f52:	f010 0f10 	tst.w	r0, #16
    8f56:	d104      	bne.n	8f62 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    8f58:	f010 0f20 	tst.w	r0, #32
    8f5c:	d103      	bne.n	8f66 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    8f5e:	2000      	movs	r0, #0
    8f60:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    8f62:	2003      	movs	r0, #3
    8f64:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    8f66:	2001      	movs	r0, #1
}
    8f68:	4770      	bx	lr

00008f6a <gpio_nrfx_port_get_raw>:
	return port->config;
    8f6a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f6c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8f6e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8f72:	600b      	str	r3, [r1, #0]
}
    8f74:	2000      	movs	r0, #0
    8f76:	4770      	bx	lr

00008f78 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    8f78:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f7a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8f7c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8f80:	4042      	eors	r2, r0
    8f82:	400a      	ands	r2, r1
    8f84:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8f86:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8f8a:	2000      	movs	r0, #0
    8f8c:	4770      	bx	lr

00008f8e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    8f8e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f90:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8f92:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    8f96:	2000      	movs	r0, #0
    8f98:	4770      	bx	lr

00008f9a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    8f9a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f9c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    8f9e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    8fa2:	2000      	movs	r0, #0
    8fa4:	4770      	bx	lr

00008fa6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    8fa6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fa8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8faa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8fae:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8fb0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8fb4:	2000      	movs	r0, #0
    8fb6:	4770      	bx	lr

00008fb8 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    8fb8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    8fbc:	d007      	beq.n	8fce <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8fbe:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    8fc2:	d00d      	beq.n	8fe0 <get_trigger+0x28>
    8fc4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    8fc8:	d008      	beq.n	8fdc <get_trigger+0x24>
    8fca:	2001      	movs	r0, #1
}
    8fcc:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    8fce:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    8fd2:	d001      	beq.n	8fd8 <get_trigger+0x20>
    8fd4:	2005      	movs	r0, #5
    8fd6:	4770      	bx	lr
    8fd8:	2004      	movs	r0, #4
    8fda:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    8fdc:	2002      	movs	r0, #2
    8fde:	4770      	bx	lr
    8fe0:	2003      	movs	r0, #3
    8fe2:	4770      	bx	lr

00008fe4 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    8fe4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    8fe6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    8fe8:	f04f 0120 	mov.w	r1, #32
    8fec:	f3ef 8211 	mrs	r2, BASEPRI
    8ff0:	f381 8812 	msr	BASEPRI_MAX, r1
    8ff4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ff8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8ffc:	b131      	cbz	r1, 900c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ffe:	2100      	movs	r1, #0
    9000:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    9004:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9008:	2101      	movs	r1, #1
    900a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    900c:	f382 8811 	msr	BASEPRI, r2
    9010:	f3bf 8f6f 	isb	sy
}
    9014:	4770      	bx	lr

00009016 <uarte_nrfx_isr_int>:
{
    9016:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9018:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    901a:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    901c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9020:	f413 7f80 	tst.w	r3, #256	; 0x100
    9024:	d002      	beq.n	902c <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9026:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    902a:	b9d3      	cbnz	r3, 9062 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    902c:	686b      	ldr	r3, [r5, #4]
    902e:	f013 0f10 	tst.w	r3, #16
    9032:	d015      	beq.n	9060 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    9034:	f04f 0220 	mov.w	r2, #32
    9038:	f3ef 8311 	mrs	r3, BASEPRI
    903c:	f382 8812 	msr	BASEPRI_MAX, r2
    9040:	f3bf 8f6f 	isb	sy
    9044:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9048:	b112      	cbz	r2, 9050 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    904a:	2200      	movs	r2, #0
    904c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    9050:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    9054:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    9058:	f383 8811 	msr	BASEPRI, r3
    905c:	f3bf 8f6f 	isb	sy
}
    9060:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    9062:	f7ff ffbf 	bl	8fe4 <endtx_isr>
    9066:	e7e1      	b.n	902c <uarte_nrfx_isr_int+0x16>

00009068 <uarte_nrfx_configure>:
{
    9068:	b570      	push	{r4, r5, r6, lr}
    906a:	b082      	sub	sp, #8
    906c:	4606      	mov	r6, r0
    906e:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    9070:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    9072:	794b      	ldrb	r3, [r1, #5]
    9074:	2b01      	cmp	r3, #1
    9076:	d006      	beq.n	9086 <uarte_nrfx_configure+0x1e>
    9078:	2b03      	cmp	r3, #3
    907a:	d011      	beq.n	90a0 <uarte_nrfx_configure+0x38>
    907c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    9080:	4618      	mov	r0, r3
    9082:	b002      	add	sp, #8
    9084:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    9086:	2300      	movs	r3, #0
    9088:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    908c:	79a3      	ldrb	r3, [r4, #6]
    908e:	2b03      	cmp	r3, #3
    9090:	d137      	bne.n	9102 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    9092:	79e3      	ldrb	r3, [r4, #7]
    9094:	b143      	cbz	r3, 90a8 <uarte_nrfx_configure+0x40>
    9096:	2b01      	cmp	r3, #1
    9098:	d010      	beq.n	90bc <uarte_nrfx_configure+0x54>
    909a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    909e:	e7ef      	b.n	9080 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    90a0:	2310      	movs	r3, #16
    90a2:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    90a6:	e7f1      	b.n	908c <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    90a8:	2300      	movs	r3, #0
    90aa:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    90ae:	7923      	ldrb	r3, [r4, #4]
    90b0:	b143      	cbz	r3, 90c4 <uarte_nrfx_configure+0x5c>
    90b2:	2b02      	cmp	r3, #2
    90b4:	d021      	beq.n	90fa <uarte_nrfx_configure+0x92>
    90b6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    90ba:	e7e1      	b.n	9080 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    90bc:	2301      	movs	r3, #1
    90be:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    90c2:	e7f4      	b.n	90ae <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    90c4:	2300      	movs	r3, #0
    90c6:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    90ca:	6821      	ldr	r1, [r4, #0]
    90cc:	4630      	mov	r0, r6
    90ce:	f7fa f83f 	bl	3150 <baudrate_set>
    90d2:	4603      	mov	r3, r0
    90d4:	b9c0      	cbnz	r0, 9108 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    90d6:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    90d8:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    90da:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    90de:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    90e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    90e6:	4331      	orrs	r1, r6
    90e8:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    90ea:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    90ee:	3504      	adds	r5, #4
    90f0:	e894 0003 	ldmia.w	r4, {r0, r1}
    90f4:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    90f8:	e7c2      	b.n	9080 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    90fa:	230e      	movs	r3, #14
    90fc:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    9100:	e7e3      	b.n	90ca <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    9102:	f06f 0385 	mvn.w	r3, #133	; 0x85
    9106:	e7bb      	b.n	9080 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    9108:	f06f 0385 	mvn.w	r3, #133	; 0x85
    910c:	e7b8      	b.n	9080 <uarte_nrfx_configure+0x18>

0000910e <uarte_nrfx_config_get>:
{
    910e:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    9110:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    9112:	3304      	adds	r3, #4
    9114:	e893 0003 	ldmia.w	r3, {r0, r1}
    9118:	e882 0003 	stmia.w	r2, {r0, r1}
}
    911c:	2000      	movs	r0, #0
    911e:	4770      	bx	lr

00009120 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    9120:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9122:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9124:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9128:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    912c:	4770      	bx	lr

0000912e <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    912e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9130:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9132:	685b      	ldr	r3, [r3, #4]
    9134:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9138:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    913c:	b929      	cbnz	r1, 914a <is_tx_ready+0x1c>
    913e:	b933      	cbnz	r3, 914e <is_tx_ready+0x20>
    9140:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    9144:	b92b      	cbnz	r3, 9152 <is_tx_ready+0x24>
    9146:	2000      	movs	r0, #0
    9148:	4770      	bx	lr
    914a:	2001      	movs	r0, #1
    914c:	4770      	bx	lr
    914e:	2000      	movs	r0, #0
    9150:	4770      	bx	lr
    9152:	2001      	movs	r0, #1
}
    9154:	4770      	bx	lr

00009156 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    9156:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9158:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    915a:	2208      	movs	r2, #8
    915c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9160:	4770      	bx	lr

00009162 <tx_start>:
{
    9162:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9164:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    9166:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9168:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    916c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9170:	2200      	movs	r2, #0
    9172:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    9176:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    917a:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    917e:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9182:	685b      	ldr	r3, [r3, #4]
    9184:	f013 0f10 	tst.w	r3, #16
    9188:	d102      	bne.n	9190 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    918a:	2301      	movs	r3, #1
    918c:	60a3      	str	r3, [r4, #8]
}
    918e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    9190:	2101      	movs	r1, #1
    9192:	f7ff ffe0 	bl	9156 <uarte_enable>
    p_reg->INTENSET = mask;
    9196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    919a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    919e:	e7f4      	b.n	918a <tx_start+0x28>

000091a0 <uarte_nrfx_poll_in>:
{
    91a0:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    91a2:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    91a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    91a6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    91ac:	b152      	cbz	r2, 91c4 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    91ae:	7c62      	ldrb	r2, [r4, #17]
    91b0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    91b2:	2000      	movs	r0, #0
    91b4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    91b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    91bc:	2201      	movs	r2, #1
    91be:	601a      	str	r2, [r3, #0]
}
    91c0:	bc10      	pop	{r4}
    91c2:	4770      	bx	lr
		return -1;
    91c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    91c8:	e7fa      	b.n	91c0 <uarte_nrfx_poll_in+0x20>

000091ca <wait_tx_ready>:
{
    91ca:	b570      	push	{r4, r5, r6, lr}
    91cc:	4606      	mov	r6, r0
    91ce:	e014      	b.n	91fa <wait_tx_ready+0x30>
		if (res) {
    91d0:	b17d      	cbz	r5, 91f2 <wait_tx_ready+0x28>
	__asm__ volatile(
    91d2:	f04f 0320 	mov.w	r3, #32
    91d6:	f3ef 8411 	mrs	r4, BASEPRI
    91da:	f383 8812 	msr	BASEPRI_MAX, r3
    91de:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    91e2:	4630      	mov	r0, r6
    91e4:	f7ff ffa3 	bl	912e <is_tx_ready>
    91e8:	b9a0      	cbnz	r0, 9214 <wait_tx_ready+0x4a>
	__asm__ volatile(
    91ea:	f384 8811 	msr	BASEPRI, r4
    91ee:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    91f2:	2021      	movs	r0, #33	; 0x21
    91f4:	2100      	movs	r1, #0
    91f6:	f7fe fbcb 	bl	7990 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    91fa:	2464      	movs	r4, #100	; 0x64
    91fc:	4630      	mov	r0, r6
    91fe:	f7ff ff96 	bl	912e <is_tx_ready>
    9202:	4605      	mov	r5, r0
    9204:	2800      	cmp	r0, #0
    9206:	d1e3      	bne.n	91d0 <wait_tx_ready+0x6>
    9208:	2001      	movs	r0, #1
    920a:	f000 f9a3 	bl	9554 <nrfx_busy_wait>
    920e:	3c01      	subs	r4, #1
    9210:	d1f4      	bne.n	91fc <wait_tx_ready+0x32>
    9212:	e7dd      	b.n	91d0 <wait_tx_ready+0x6>
}
    9214:	4620      	mov	r0, r4
    9216:	bd70      	pop	{r4, r5, r6, pc}

00009218 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    9218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    921c:	b083      	sub	sp, #12
    921e:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    9220:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    9222:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    9224:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9228:	2100      	movs	r1, #0
    922a:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    922e:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    9232:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    9236:	aa01      	add	r2, sp, #4
    9238:	4648      	mov	r0, r9
    923a:	f000 f8e2 	bl	9402 <pinctrl_lookup_state>
	if (ret < 0) {
    923e:	1e04      	subs	r4, r0, #0
    9240:	db07      	blt.n	9252 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    9242:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    9244:	f8d9 2000 	ldr.w	r2, [r9]
    9248:	7919      	ldrb	r1, [r3, #4]
    924a:	6818      	ldr	r0, [r3, #0]
    924c:	f7fa fb32 	bl	38b4 <pinctrl_configure_pins>
    9250:	4604      	mov	r4, r0
	if (err < 0) {
    9252:	2c00      	cmp	r4, #0
    9254:	db35      	blt.n	92c2 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    9256:	f108 0104 	add.w	r1, r8, #4
    925a:	4628      	mov	r0, r5
    925c:	f7ff ff04 	bl	9068 <uarte_nrfx_configure>
	if (err) {
    9260:	4604      	mov	r4, r0
    9262:	bb70      	cbnz	r0, 92c2 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9264:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9266:	f013 0f02 	tst.w	r3, #2
    926a:	d12e      	bne.n	92ca <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    926c:	2308      	movs	r3, #8
    926e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    9272:	7a3b      	ldrb	r3, [r7, #8]
    9274:	b95b      	cbnz	r3, 928e <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9276:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    927a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    927e:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9282:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9286:	2301      	movs	r3, #1
    9288:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    928c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	f013 0f02 	tst.w	r3, #2
    9294:	d103      	bne.n	929e <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    9296:	f44f 7380 	mov.w	r3, #256	; 0x100
    929a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    929e:	687b      	ldr	r3, [r7, #4]
    92a0:	f013 0f10 	tst.w	r3, #16
    92a4:	d003      	beq.n	92ae <uarte_instance_init+0x96>
    92a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    92aa:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    92ae:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    92b2:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    92b6:	2300      	movs	r3, #0
    92b8:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92bc:	2301      	movs	r3, #1
    92be:	60b3      	str	r3, [r6, #8]
    92c0:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    92c2:	4620      	mov	r0, r4
    92c4:	b003      	add	sp, #12
    92c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    92ca:	4641      	mov	r1, r8
    92cc:	4630      	mov	r0, r6
    92ce:	f7fa f81f 	bl	3310 <endtx_stoptx_ppi_init>
		if (err < 0) {
    92d2:	2800      	cmp	r0, #0
    92d4:	daca      	bge.n	926c <uarte_instance_init+0x54>
			return err;
    92d6:	4604      	mov	r4, r0
    92d8:	e7f3      	b.n	92c2 <uarte_instance_init+0xaa>

000092da <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    92da:	b510      	push	{r4, lr}
    92dc:	4604      	mov	r4, r0
    92de:	2200      	movs	r2, #0
    92e0:	2101      	movs	r1, #1
    92e2:	2002      	movs	r0, #2
    92e4:	f7f8 fdf4 	bl	1ed0 <z_arm_irq_priority_set>
    92e8:	2002      	movs	r0, #2
    92ea:	f7f8 fdd5 	bl	1e98 <arch_irq_enable>
    92ee:	2100      	movs	r1, #0
    92f0:	4620      	mov	r0, r4
    92f2:	f7ff ff91 	bl	9218 <uarte_instance_init>
    92f6:	bd10      	pop	{r4, pc}

000092f8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    92f8:	b510      	push	{r4, lr}
    92fa:	4604      	mov	r4, r0
    92fc:	2200      	movs	r2, #0
    92fe:	2101      	movs	r1, #1
    9300:	2028      	movs	r0, #40	; 0x28
    9302:	f7f8 fde5 	bl	1ed0 <z_arm_irq_priority_set>
    9306:	2028      	movs	r0, #40	; 0x28
    9308:	f7f8 fdc6 	bl	1e98 <arch_irq_enable>
    930c:	2100      	movs	r1, #0
    930e:	4620      	mov	r0, r4
    9310:	f7ff ff82 	bl	9218 <uarte_instance_init>
    9314:	bd10      	pop	{r4, pc}

00009316 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9316:	4770      	bx	lr

00009318 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    9318:	1a40      	subs	r0, r0, r1
}
    931a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    931e:	4770      	bx	lr

00009320 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9320:	f100 0350 	add.w	r3, r0, #80	; 0x50
    9324:	009b      	lsls	r3, r3, #2
    9326:	b29b      	uxth	r3, r3
    9328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    932c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9330:	2200      	movs	r2, #0
    9332:	601a      	str	r2, [r3, #0]
    9334:	681b      	ldr	r3, [r3, #0]
}
    9336:	4770      	bx	lr

00009338 <absolute_time_to_cc>:
}
    9338:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    933c:	4770      	bx	lr

0000933e <full_int_lock>:
	__asm__ volatile(
    933e:	f04f 0320 	mov.w	r3, #32
    9342:	f3ef 8011 	mrs	r0, BASEPRI
    9346:	f383 8812 	msr	BASEPRI_MAX, r3
    934a:	f3bf 8f6f 	isb	sy
}
    934e:	4770      	bx	lr

00009350 <full_int_unlock>:
	__asm__ volatile(
    9350:	f380 8811 	msr	BASEPRI, r0
    9354:	f3bf 8f6f 	isb	sy
}
    9358:	4770      	bx	lr

0000935a <set_absolute_alarm>:
{
    935a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    935c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    935e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    9362:	f7fa f803 	bl	336c <get_comparator>
    9366:	4607      	mov	r7, r0
    9368:	e019      	b.n	939e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    936a:	2013      	movs	r0, #19
    936c:	f000 fa13 	bl	9796 <z_impl_k_busy_wait>
}
    9370:	e022      	b.n	93b8 <set_absolute_alarm+0x5e>
		event_clear(chan);
    9372:	4630      	mov	r0, r6
    9374:	f7ff ffd4 	bl	9320 <event_clear>
		event_enable(chan);
    9378:	4630      	mov	r0, r6
    937a:	f7f9 ffff 	bl	337c <event_enable>
		set_comparator(chan, cc_val);
    937e:	4629      	mov	r1, r5
    9380:	4630      	mov	r0, r6
    9382:	f7f9 ffe9 	bl	3358 <set_comparator>
		now2 = counter();
    9386:	f7fa f80d 	bl	33a4 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    938a:	4284      	cmp	r4, r0
    938c:	d01e      	beq.n	93cc <set_absolute_alarm+0x72>
    938e:	1c81      	adds	r1, r0, #2
    9390:	4628      	mov	r0, r5
    9392:	f7ff ffc1 	bl	9318 <counter_sub>
	} while ((now2 != now) &&
    9396:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    939a:	d917      	bls.n	93cc <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    939c:	462f      	mov	r7, r5
		now = counter();
    939e:	f7fa f801 	bl	33a4 <counter>
    93a2:	4604      	mov	r4, r0
		set_comparator(chan, now);
    93a4:	4601      	mov	r1, r0
    93a6:	4630      	mov	r0, r6
    93a8:	f7f9 ffd6 	bl	3358 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    93ac:	4621      	mov	r1, r4
    93ae:	4638      	mov	r0, r7
    93b0:	f7ff ffb2 	bl	9318 <counter_sub>
    93b4:	2801      	cmp	r0, #1
    93b6:	d0d8      	beq.n	936a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    93b8:	1ca7      	adds	r7, r4, #2
    93ba:	4639      	mov	r1, r7
    93bc:	4628      	mov	r0, r5
    93be:	f7ff ffab 	bl	9318 <counter_sub>
    93c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    93c6:	d9d4      	bls.n	9372 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    93c8:	463d      	mov	r5, r7
    93ca:	e7d2      	b.n	9372 <set_absolute_alarm+0x18>
}
    93cc:	4628      	mov	r0, r5
    93ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000093d0 <compare_set>:
{
    93d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93d2:	b083      	sub	sp, #12
    93d4:	4604      	mov	r4, r0
    93d6:	4617      	mov	r7, r2
    93d8:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    93da:	f7f9 ffe9 	bl	33b0 <compare_int_lock>
    93de:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    93e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93e2:	9301      	str	r3, [sp, #4]
    93e4:	9b08      	ldr	r3, [sp, #32]
    93e6:	9300      	str	r3, [sp, #0]
    93e8:	463a      	mov	r2, r7
    93ea:	462b      	mov	r3, r5
    93ec:	4620      	mov	r0, r4
    93ee:	f7fa f8cf 	bl	3590 <compare_set_nolocks>
    93f2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    93f4:	4631      	mov	r1, r6
    93f6:	4620      	mov	r0, r4
    93f8:	f7fa f83e 	bl	3478 <compare_int_unlock>
}
    93fc:	4628      	mov	r0, r5
    93fe:	b003      	add	sp, #12
    9400:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009402 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9402:	b410      	push	{r4}
	*state = &config->states[0];
    9404:	6843      	ldr	r3, [r0, #4]
    9406:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9408:	e001      	b.n	940e <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    940a:	3408      	adds	r4, #8
    940c:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    940e:	6814      	ldr	r4, [r2, #0]
    9410:	7a03      	ldrb	r3, [r0, #8]
    9412:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    9416:	3b01      	subs	r3, #1
    9418:	f8d0 c004 	ldr.w	ip, [r0, #4]
    941c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    9420:	429c      	cmp	r4, r3
    9422:	d804      	bhi.n	942e <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    9424:	7963      	ldrb	r3, [r4, #5]
    9426:	428b      	cmp	r3, r1
    9428:	d1ef      	bne.n	940a <pinctrl_lookup_state+0x8>
			return 0;
    942a:	2000      	movs	r0, #0
    942c:	e001      	b.n	9432 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    942e:	f06f 0001 	mvn.w	r0, #1
}
    9432:	bc10      	pop	{r4}
    9434:	4770      	bx	lr

00009436 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9436:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    9438:	2000      	movs	r0, #0
    943a:	f7f9 fa03 	bl	2844 <sys_arch_reboot>

0000943e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    943e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9440:	f7fe ff54 	bl	82ec <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    9444:	bd08      	pop	{r3, pc}

00009446 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    9446:	b510      	push	{r4, lr}
    9448:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    944a:	f7f8 fc35 	bl	1cb8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    944e:	f7f8 fcf1 	bl	1e34 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    9452:	4620      	mov	r0, r4
    9454:	f7ff fff3 	bl	943e <hw_cc3xx_init_internal>
	return res;
}
    9458:	bd10      	pop	{r4, pc}

0000945a <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    945a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    945e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9462:	2b08      	cmp	r3, #8
    9464:	d001      	beq.n	946a <nrf52_errata_36+0x10>
        return false;
    9466:	2000      	movs	r0, #0
    9468:	4770      	bx	lr
                        return true;
    946a:	2001      	movs	r0, #1
}
    946c:	4770      	bx	lr

0000946e <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    946e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9472:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9476:	2b08      	cmp	r3, #8
    9478:	d001      	beq.n	947e <nrf52_errata_66+0x10>
        return false;
    947a:	2000      	movs	r0, #0
    947c:	4770      	bx	lr
                        return true;
    947e:	2001      	movs	r0, #1
}
    9480:	4770      	bx	lr

00009482 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9486:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    948a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    948e:	2a08      	cmp	r2, #8
    9490:	d001      	beq.n	9496 <nrf52_errata_98+0x14>
        return false;
    9492:	2000      	movs	r0, #0
    9494:	4770      	bx	lr
                switch(var2)
    9496:	2b00      	cmp	r3, #0
    9498:	d804      	bhi.n	94a4 <nrf52_errata_98+0x22>
    949a:	e8df f003 	tbb	[pc, r3]
    949e:	01          	.byte	0x01
    949f:	00          	.byte	0x00
    94a0:	2001      	movs	r0, #1
    94a2:	4770      	bx	lr
                        return false;
    94a4:	2000      	movs	r0, #0
}
    94a6:	4770      	bx	lr

000094a8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    94a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    94ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    94b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    94b4:	2a08      	cmp	r2, #8
    94b6:	d001      	beq.n	94bc <nrf52_errata_103+0x14>
        return false;
    94b8:	2000      	movs	r0, #0
    94ba:	4770      	bx	lr
                switch(var2)
    94bc:	2b00      	cmp	r3, #0
    94be:	d804      	bhi.n	94ca <nrf52_errata_103+0x22>
    94c0:	e8df f003 	tbb	[pc, r3]
    94c4:	01          	.byte	0x01
    94c5:	00          	.byte	0x00
    94c6:	2001      	movs	r0, #1
    94c8:	4770      	bx	lr
                        return false;
    94ca:	2000      	movs	r0, #0
}
    94cc:	4770      	bx	lr

000094ce <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    94ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    94d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    94d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    94da:	2a08      	cmp	r2, #8
    94dc:	d001      	beq.n	94e2 <nrf52_errata_115+0x14>
        return false;
    94de:	2000      	movs	r0, #0
    94e0:	4770      	bx	lr
                switch(var2)
    94e2:	2b00      	cmp	r3, #0
    94e4:	d804      	bhi.n	94f0 <nrf52_errata_115+0x22>
    94e6:	e8df f003 	tbb	[pc, r3]
    94ea:	01          	.byte	0x01
    94eb:	00          	.byte	0x00
    94ec:	2001      	movs	r0, #1
    94ee:	4770      	bx	lr
                        return false;
    94f0:	2000      	movs	r0, #0
}
    94f2:	4770      	bx	lr

000094f4 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    94f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    94f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    94fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    9500:	2a08      	cmp	r2, #8
    9502:	d001      	beq.n	9508 <nrf52_errata_120+0x14>
        return false;
    9504:	2000      	movs	r0, #0
    9506:	4770      	bx	lr
                switch(var2)
    9508:	2b00      	cmp	r3, #0
    950a:	d804      	bhi.n	9516 <nrf52_errata_120+0x22>
    950c:	e8df f003 	tbb	[pc, r3]
    9510:	01          	.byte	0x01
    9511:	00          	.byte	0x00
    9512:	2001      	movs	r0, #1
    9514:	4770      	bx	lr
                        return false;
    9516:	2000      	movs	r0, #0
}
    9518:	4770      	bx	lr

0000951a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    951a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    951e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    9522:	2b08      	cmp	r3, #8
    9524:	d001      	beq.n	952a <nrf52_errata_136+0x10>
        return false;
    9526:	2000      	movs	r0, #0
    9528:	4770      	bx	lr
                        return true;
    952a:	2001      	movs	r0, #1
}
    952c:	4770      	bx	lr

0000952e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    952e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9532:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9536:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    953a:	2a08      	cmp	r2, #8
    953c:	d001      	beq.n	9542 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    953e:	2000      	movs	r0, #0
    9540:	4770      	bx	lr
                switch(var2)
    9542:	2b04      	cmp	r3, #4
    9544:	d801      	bhi.n	954a <nrf52_configuration_249+0x1c>
    9546:	2000      	movs	r0, #0
    9548:	4770      	bx	lr
                        return true;
    954a:	2001      	movs	r0, #1
    #endif
}
    954c:	4770      	bx	lr

0000954e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    954e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    9550:	4780      	blx	r0
}
    9552:	bd08      	pop	{r3, pc}

00009554 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    9554:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    9556:	f000 f91e 	bl	9796 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    955a:	bd08      	pop	{r3, pc}

0000955c <clock_initial_lfclksrc_get>:
}
    955c:	2000      	movs	r0, #0
    955e:	4770      	bx	lr

00009560 <clock_lfclksrc_tweak>:
{
    9560:	b538      	push	{r3, r4, r5, lr}
    9562:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    9564:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9566:	2b01      	cmp	r3, #1
    9568:	d002      	beq.n	9570 <clock_lfclksrc_tweak+0x10>
    956a:	b933      	cbnz	r3, 957a <clock_lfclksrc_tweak+0x1a>
    956c:	2301      	movs	r3, #1
    956e:	e000      	b.n	9572 <clock_lfclksrc_tweak+0x12>
    9570:	2301      	movs	r3, #1
    if (!is_correct_clk)
    9572:	461d      	mov	r5, r3
    9574:	b11b      	cbz	r3, 957e <clock_lfclksrc_tweak+0x1e>
}
    9576:	4628      	mov	r0, r5
    9578:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    957a:	2300      	movs	r3, #0
    957c:	e7f9      	b.n	9572 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    957e:	2000      	movs	r0, #0
    9580:	f7fa ff5a 	bl	4438 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9584:	f7ff ffea 	bl	955c <clock_initial_lfclksrc_get>
    9588:	6020      	str	r0, [r4, #0]
    958a:	e7f4      	b.n	9576 <clock_lfclksrc_tweak+0x16>

0000958c <pin_is_task_output>:
{
    958c:	b510      	push	{r4, lr}
    958e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9590:	f7fb f924 	bl	47dc <pin_is_output>
    9594:	b128      	cbz	r0, 95a2 <pin_is_task_output+0x16>
    9596:	4620      	mov	r0, r4
    9598:	f7fb f90a 	bl	47b0 <pin_in_use_by_te>
    959c:	b118      	cbz	r0, 95a6 <pin_is_task_output+0x1a>
    959e:	2001      	movs	r0, #1
    95a0:	e000      	b.n	95a4 <pin_is_task_output+0x18>
    95a2:	2000      	movs	r0, #0
}
    95a4:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    95a6:	2000      	movs	r0, #0
    95a8:	e7fc      	b.n	95a4 <pin_is_task_output+0x18>

000095aa <pin_is_input>:
{
    95aa:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    95ac:	f7fb f916 	bl	47dc <pin_is_output>
    95b0:	f080 0001 	eor.w	r0, r0, #1
}
    95b4:	b2c0      	uxtb	r0, r0
    95b6:	bd08      	pop	{r3, pc}

000095b8 <gpiote_polarity_to_trigger>:
}
    95b8:	4770      	bx	lr

000095ba <gpiote_trigger_to_polarity>:
}
    95ba:	4770      	bx	lr

000095bc <is_level>:
}
    95bc:	2803      	cmp	r0, #3
    95be:	bf94      	ite	ls
    95c0:	2000      	movls	r0, #0
    95c2:	2001      	movhi	r0, #1
    95c4:	4770      	bx	lr

000095c6 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    95c6:	b508      	push	{r3, lr}
  _DoInit();
    95c8:	f7fc f8d2 	bl	5770 <_DoInit>
}
    95cc:	bd08      	pop	{r3, pc}

000095ce <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    95ce:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    95d0:	f7ff fff9 	bl	95c6 <SEGGER_RTT_Init>

	return 0;
}
    95d4:	2000      	movs	r0, #0
    95d6:	bd08      	pop	{r3, pc}

000095d8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    95d8:	b148      	cbz	r0, 95ee <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    95da:	68c3      	ldr	r3, [r0, #12]
    95dc:	8818      	ldrh	r0, [r3, #0]
    95de:	f3c0 0008 	ubfx	r0, r0, #0, #9
    95e2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    95e6:	bf14      	ite	ne
    95e8:	2000      	movne	r0, #0
    95ea:	2001      	moveq	r0, #1
    95ec:	4770      	bx	lr
		return false;
    95ee:	2000      	movs	r0, #0
}
    95f0:	4770      	bx	lr

000095f2 <z_early_memset>:
{
    95f2:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    95f4:	f7ff fb6b 	bl	8cce <memset>
}
    95f8:	bd08      	pop	{r3, pc}

000095fa <z_early_memcpy>:
{
    95fa:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    95fc:	f7ff fb38 	bl	8c70 <memcpy>
}
    9600:	bd08      	pop	{r3, pc}

00009602 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9602:	6902      	ldr	r2, [r0, #16]
    9604:	6943      	ldr	r3, [r0, #20]
    9606:	431a      	orrs	r2, r3
    9608:	f012 0203 	ands.w	r2, r2, #3
    960c:	d10d      	bne.n	962a <create_free_list+0x28>
	slab->free_list = NULL;
    960e:	2100      	movs	r1, #0
    9610:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9612:	e005      	b.n	9620 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    9614:	6981      	ldr	r1, [r0, #24]
    9616:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    9618:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    961a:	6901      	ldr	r1, [r0, #16]
    961c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    961e:	3201      	adds	r2, #1
    9620:	68c1      	ldr	r1, [r0, #12]
    9622:	4291      	cmp	r1, r2
    9624:	d8f6      	bhi.n	9614 <create_free_list+0x12>
	return 0;
    9626:	2000      	movs	r0, #0
    9628:	4770      	bx	lr
		return -EINVAL;
    962a:	f06f 0015 	mvn.w	r0, #21
}
    962e:	4770      	bx	lr

00009630 <k_mem_slab_init>:
{
    9630:	b510      	push	{r4, lr}
    9632:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    9634:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    9636:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    9638:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    963a:	2300      	movs	r3, #0
    963c:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    963e:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    9640:	f7ff ffdf 	bl	9602 <create_free_list>
	if (rc < 0) {
    9644:	2800      	cmp	r0, #0
    9646:	db01      	blt.n	964c <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    9648:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    964a:	6064      	str	r4, [r4, #4]
}
    964c:	bd10      	pop	{r4, pc}

0000964e <setup_thread_stack>:
{
    964e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9650:	3207      	adds	r2, #7
    9652:	f022 0207 	bic.w	r2, r2, #7
    9656:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    965a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    965e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    9662:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    9666:	2200      	movs	r2, #0
    9668:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    966c:	18c8      	adds	r0, r1, r3
    966e:	bc10      	pop	{r4}
    9670:	4770      	bx	lr

00009672 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9672:	f3ef 8005 	mrs	r0, IPSR
}
    9676:	3800      	subs	r0, #0
    9678:	bf18      	it	ne
    967a:	2001      	movne	r0, #1
    967c:	4770      	bx	lr

0000967e <z_impl_k_thread_start>:
{
    967e:	b508      	push	{r3, lr}
	z_sched_start(thread);
    9680:	f7fd fbe8 	bl	6e54 <z_sched_start>
}
    9684:	bd08      	pop	{r3, pc}

00009686 <z_init_thread_base>:
{
    9686:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    9688:	2400      	movs	r4, #0
    968a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    968c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    968e:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    9690:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    9692:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    9694:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    9696:	61c4      	str	r4, [r0, #28]
}
    9698:	bc10      	pop	{r4}
    969a:	4770      	bx	lr

0000969c <z_pm_save_idle_exit>:
{
    969c:	b508      	push	{r3, lr}
	pm_system_resume();
    969e:	f7f8 f915 	bl	18cc <pm_system_resume>
	sys_clock_idle_exit();
    96a2:	f7ff fe38 	bl	9316 <sys_clock_idle_exit>
}
    96a6:	bd08      	pop	{r3, pc}

000096a8 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    96a8:	4288      	cmp	r0, r1
    96aa:	da00      	bge.n	96ae <new_prio_for_inheritance+0x6>
    96ac:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    96ae:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    96b2:	db01      	blt.n	96b8 <new_prio_for_inheritance+0x10>
    96b4:	4608      	mov	r0, r1
    96b6:	4770      	bx	lr
    96b8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    96bc:	4770      	bx	lr

000096be <adjust_owner_prio>:
{
    96be:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    96c0:	6880      	ldr	r0, [r0, #8]
    96c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    96c6:	428b      	cmp	r3, r1
    96c8:	d101      	bne.n	96ce <adjust_owner_prio+0x10>
	return false;
    96ca:	2000      	movs	r0, #0
}
    96cc:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    96ce:	f7fd fd77 	bl	71c0 <z_set_prio>
    96d2:	e7fb      	b.n	96cc <adjust_owner_prio+0xe>

000096d4 <z_impl_k_mutex_init>:
{
    96d4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    96d6:	2000      	movs	r0, #0
    96d8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    96da:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    96dc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    96de:	605b      	str	r3, [r3, #4]
}
    96e0:	4770      	bx	lr

000096e2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    96e2:	b13a      	cbz	r2, 96f4 <z_impl_k_sem_init+0x12>
    96e4:	428a      	cmp	r2, r1
    96e6:	d308      	bcc.n	96fa <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    96e8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    96ea:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    96ec:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    96ee:	6040      	str	r0, [r0, #4]
	return 0;
    96f0:	2000      	movs	r0, #0
    96f2:	4770      	bx	lr
		return -EINVAL;
    96f4:	f06f 0015 	mvn.w	r0, #21
    96f8:	4770      	bx	lr
    96fa:	f06f 0015 	mvn.w	r0, #21
}
    96fe:	4770      	bx	lr

00009700 <thread_active_elsewhere>:
}
    9700:	2000      	movs	r0, #0
    9702:	4770      	bx	lr

00009704 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    9704:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    9708:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    970c:	4283      	cmp	r3, r0
    970e:	d001      	beq.n	9714 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    9710:	1ac0      	subs	r0, r0, r3
    9712:	4770      	bx	lr
	return 0;
    9714:	2000      	movs	r0, #0
}
    9716:	4770      	bx	lr

00009718 <z_reschedule_irqlock>:
{
    9718:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    971a:	4603      	mov	r3, r0
    971c:	b920      	cbnz	r0, 9728 <z_reschedule_irqlock+0x10>
    971e:	f3ef 8205 	mrs	r2, IPSR
    9722:	b942      	cbnz	r2, 9736 <z_reschedule_irqlock+0x1e>
    9724:	2201      	movs	r2, #1
    9726:	e000      	b.n	972a <z_reschedule_irqlock+0x12>
    9728:	2200      	movs	r2, #0
	if (resched(key)) {
    972a:	b932      	cbnz	r2, 973a <z_reschedule_irqlock+0x22>
    972c:	f383 8811 	msr	BASEPRI, r3
    9730:	f3bf 8f6f 	isb	sy
}
    9734:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9736:	2200      	movs	r2, #0
    9738:	e7f7      	b.n	972a <z_reschedule_irqlock+0x12>
    973a:	4618      	mov	r0, r3
    973c:	f7f8 fc1e 	bl	1f7c <arch_swap>
	return ret;
    9740:	e7f8      	b.n	9734 <z_reschedule_irqlock+0x1c>

00009742 <z_priq_dumb_best>:
{
    9742:	4603      	mov	r3, r0
	return list->head == list;
    9744:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9746:	4283      	cmp	r3, r0
    9748:	d000      	beq.n	974c <z_priq_dumb_best+0xa>
}
    974a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    974c:	2000      	movs	r0, #0
	return thread;
    974e:	e7fc      	b.n	974a <z_priq_dumb_best+0x8>

00009750 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    9750:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    9752:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    9754:	6083      	str	r3, [r0, #8]
}
    9756:	4770      	bx	lr

00009758 <remove_timeout>:
{
    9758:	b510      	push	{r4, lr}
    975a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    975c:	f7fe fa30 	bl	7bc0 <next>
    9760:	b148      	cbz	r0, 9776 <remove_timeout+0x1e>
    9762:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    9764:	6920      	ldr	r0, [r4, #16]
    9766:	6961      	ldr	r1, [r4, #20]
    9768:	6913      	ldr	r3, [r2, #16]
    976a:	181b      	adds	r3, r3, r0
    976c:	6950      	ldr	r0, [r2, #20]
    976e:	eb41 0100 	adc.w	r1, r1, r0
    9772:	6113      	str	r3, [r2, #16]
    9774:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    9776:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    9778:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    977a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    977c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    977e:	2300      	movs	r3, #0
    9780:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9782:	6063      	str	r3, [r4, #4]
}
    9784:	bd10      	pop	{r4, pc}

00009786 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9786:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9788:	f7fe fd16 	bl	81b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    978c:	bd08      	pop	{r3, pc}

0000978e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    978e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    9790:	f7fe fd12 	bl	81b8 <sys_clock_tick_get>
}
    9794:	bd08      	pop	{r3, pc}

00009796 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9796:	b900      	cbnz	r0, 979a <z_impl_k_busy_wait+0x4>
    9798:	4770      	bx	lr
{
    979a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    979c:	f7f9 f868 	bl	2870 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    97a0:	bd08      	pop	{r3, pc}

000097a2 <k_heap_init>:
{
    97a2:	b510      	push	{r4, lr}
    97a4:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    97a8:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    97aa:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    97ac:	f7f7 fb5c 	bl	e68 <sys_heap_init>
}
    97b0:	bd10      	pop	{r4, pc}
	...

000097b4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    97b4:	f7fa bd20 	b.w	41f8 <SystemInit>
