
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 24 00 20 39 4e 00 00 bf c2 00 00 f1 4d 00 00     .$. 9N.......M..
  10:	f1 4d 00 00 f1 4d 00 00 f1 4d 00 00 00 00 00 00     .M...M...M......
	...
  2c:	cd 45 00 00 f1 4d 00 00 00 00 00 00 75 45 00 00     .E...M......uE..
  3c:	f1 4d 00 00                                         .M..

00000040 <_irq_vector_table>:
  40:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  50:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  60:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  70:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  80:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  90:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  a0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  b0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  c0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  d0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  e0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..
  f0:	ad 46 00 00 ad 46 00 00 ad 46 00 00 ad 46 00 00     .F...F...F...F..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <adc_sample>:
 */
static struct gpio_callback button_cb_data;

/* Takes one sample */
static int adc_sample(void)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	b086      	sub	sp, #24
    int ret;
    const struct adc_sequence sequence = {
     7a4:	2300      	movs	r3, #0
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	9302      	str	r3, [sp, #8]
     7aa:	9303      	str	r3, [sp, #12]
     7ac:	9304      	str	r3, [sp, #16]
     7ae:	9305      	str	r3, [sp, #20]
     7b0:	2302      	movs	r3, #2
     7b2:	9302      	str	r3, [sp, #8]
     7b4:	4a0e      	ldr	r2, [pc, #56]	; (7f0 <adc_sample+0x50>)
     7b6:	9203      	str	r2, [sp, #12]
     7b8:	9304      	str	r3, [sp, #16]
     7ba:	230a      	movs	r3, #10
     7bc:	f88d 3014 	strb.w	r3, [sp, #20]
        .buffer = adc_sample_buffer,
        .buffer_size = sizeof(adc_sample_buffer),
        .resolution = ADC_RESOLUTION,
    };

    if (adc_dev == NULL)
     7c0:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <adc_sample+0x54>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	b140      	cbz	r0, 7d8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7c6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7c8:	685b      	ldr	r3, [r3, #4]
     7ca:	a901      	add	r1, sp, #4
     7cc:	4798      	blx	r3
        printk("adc_sample(): error, must bind to adc first \n\r");
        return -1;
    }

    ret = adc_read(adc_dev, &sequence);
    if (ret)
     7ce:	4604      	mov	r4, r0
     7d0:	b940      	cbnz	r0, 7e4 <adc_sample+0x44>
    {
        printk("adc_read() failed with code %d\n", ret);
    }

    return ret;
}
     7d2:	4620      	mov	r0, r4
     7d4:	b006      	add	sp, #24
     7d6:	bd10      	pop	{r4, pc}
        printk("adc_sample(): error, must bind to adc first \n\r");
     7d8:	4807      	ldr	r0, [pc, #28]	; (7f8 <adc_sample+0x58>)
     7da:	f00b fb10 	bl	bdfe <printk>
        return -1;
     7de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7e2:	e7f6      	b.n	7d2 <adc_sample+0x32>
        printk("adc_read() failed with code %d\n", ret);
     7e4:	4601      	mov	r1, r0
     7e6:	4805      	ldr	r0, [pc, #20]	; (7fc <adc_sample+0x5c>)
     7e8:	f00b fb09 	bl	bdfe <printk>
     7ec:	e7f1      	b.n	7d2 <adc_sample+0x32>
     7ee:	bf00      	nop
     7f0:	200005fc 	.word	0x200005fc
     7f4:	200005f8 	.word	0x200005f8
     7f8:	0000d3d8 	.word	0x0000d3d8
     7fc:	0000d408 	.word	0x0000d408

00000800 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     804:	4605      	mov	r5, r0
     806:	460e      	mov	r6, r1
     808:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     80a:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     80e:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     812:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     816:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     81a:	d136      	bne.n	88a <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     81c:	f004 0330 	and.w	r3, r4, #48	; 0x30
     820:	2b30      	cmp	r3, #48	; 0x30
     822:	d043      	beq.n	8ac <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     824:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     828:	2b02      	cmp	r3, #2
     82a:	d050      	beq.n	8ce <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     82c:	f004 0306 	and.w	r3, r4, #6
     830:	2b04      	cmp	r3, #4
     832:	d05d      	beq.n	8f0 <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     834:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     838:	d002      	beq.n	840 <z_impl_gpio_pin_configure+0x40>
     83a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     83e:	d065      	beq.n	90c <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     840:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     844:	d074      	beq.n	930 <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     846:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     84a:	d005      	beq.n	858 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     84c:	b127      	cbz	r7, 858 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     84e:	f014 0f01 	tst.w	r4, #1
     852:	d001      	beq.n	858 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     854:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     858:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     85c:	f8db 3000 	ldr.w	r3, [fp]
     860:	2701      	movs	r7, #1
     862:	40b7      	lsls	r7, r6
     864:	423b      	tst	r3, r7
     866:	d075      	beq.n	954 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     868:	f014 0f01 	tst.w	r4, #1
     86c:	f000 8084 	beq.w	978 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     870:	f8d8 3000 	ldr.w	r3, [r8]
     874:	433b      	orrs	r3, r7
     876:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     87a:	f8da 3000 	ldr.w	r3, [sl]
     87e:	464a      	mov	r2, r9
     880:	4631      	mov	r1, r6
     882:	4628      	mov	r0, r5
     884:	4798      	blx	r3
}
     886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     88a:	4f3f      	ldr	r7, [pc, #252]	; (988 <z_impl_gpio_pin_configure+0x188>)
     88c:	f240 23b5 	movw	r3, #693	; 0x2b5
     890:	463a      	mov	r2, r7
     892:	493e      	ldr	r1, [pc, #248]	; (98c <z_impl_gpio_pin_configure+0x18c>)
     894:	483e      	ldr	r0, [pc, #248]	; (990 <z_impl_gpio_pin_configure+0x190>)
     896:	f00b fc37 	bl	c108 <assert_print>
     89a:	483e      	ldr	r0, [pc, #248]	; (994 <z_impl_gpio_pin_configure+0x194>)
     89c:	f00b fc34 	bl	c108 <assert_print>
     8a0:	f240 21b5 	movw	r1, #693	; 0x2b5
     8a4:	4638      	mov	r0, r7
     8a6:	f00b fc28 	bl	c0fa <assert_post_action>
     8aa:	e7b7      	b.n	81c <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     8ac:	4f36      	ldr	r7, [pc, #216]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8ae:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     8b2:	463a      	mov	r2, r7
     8b4:	4938      	ldr	r1, [pc, #224]	; (998 <z_impl_gpio_pin_configure+0x198>)
     8b6:	4836      	ldr	r0, [pc, #216]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8b8:	f00b fc26 	bl	c108 <assert_print>
     8bc:	4837      	ldr	r0, [pc, #220]	; (99c <z_impl_gpio_pin_configure+0x19c>)
     8be:	f00b fc23 	bl	c108 <assert_print>
     8c2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     8c6:	4638      	mov	r0, r7
     8c8:	f00b fc17 	bl	c0fa <assert_post_action>
     8cc:	e7aa      	b.n	824 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     8ce:	4f2e      	ldr	r7, [pc, #184]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8d0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     8d4:	463a      	mov	r2, r7
     8d6:	4932      	ldr	r1, [pc, #200]	; (9a0 <z_impl_gpio_pin_configure+0x1a0>)
     8d8:	482d      	ldr	r0, [pc, #180]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8da:	f00b fc15 	bl	c108 <assert_print>
     8de:	4831      	ldr	r0, [pc, #196]	; (9a4 <z_impl_gpio_pin_configure+0x1a4>)
     8e0:	f00b fc12 	bl	c108 <assert_print>
     8e4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     8e8:	4638      	mov	r0, r7
     8ea:	f00b fc06 	bl	c0fa <assert_post_action>
     8ee:	e79d      	b.n	82c <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     8f0:	4f25      	ldr	r7, [pc, #148]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8f2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     8f6:	463a      	mov	r2, r7
     8f8:	492b      	ldr	r1, [pc, #172]	; (9a8 <z_impl_gpio_pin_configure+0x1a8>)
     8fa:	4825      	ldr	r0, [pc, #148]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8fc:	f00b fc04 	bl	c108 <assert_print>
     900:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     904:	4638      	mov	r0, r7
     906:	f00b fbf8 	bl	c0fa <assert_post_action>
     90a:	e793      	b.n	834 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     90c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 988 <z_impl_gpio_pin_configure+0x188>
     910:	f240 23c3 	movw	r3, #707	; 0x2c3
     914:	464a      	mov	r2, r9
     916:	4925      	ldr	r1, [pc, #148]	; (9ac <z_impl_gpio_pin_configure+0x1ac>)
     918:	481d      	ldr	r0, [pc, #116]	; (990 <z_impl_gpio_pin_configure+0x190>)
     91a:	f00b fbf5 	bl	c108 <assert_print>
     91e:	4824      	ldr	r0, [pc, #144]	; (9b0 <z_impl_gpio_pin_configure+0x1b0>)
     920:	f00b fbf2 	bl	c108 <assert_print>
     924:	f240 21c3 	movw	r1, #707	; 0x2c3
     928:	4648      	mov	r0, r9
     92a:	f00b fbe6 	bl	c0fa <assert_post_action>
     92e:	e787      	b.n	840 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     930:	f8df 9054 	ldr.w	r9, [pc, #84]	; 988 <z_impl_gpio_pin_configure+0x188>
     934:	f240 23c7 	movw	r3, #711	; 0x2c7
     938:	464a      	mov	r2, r9
     93a:	491e      	ldr	r1, [pc, #120]	; (9b4 <z_impl_gpio_pin_configure+0x1b4>)
     93c:	4814      	ldr	r0, [pc, #80]	; (990 <z_impl_gpio_pin_configure+0x190>)
     93e:	f00b fbe3 	bl	c108 <assert_print>
     942:	481d      	ldr	r0, [pc, #116]	; (9b8 <z_impl_gpio_pin_configure+0x1b8>)
     944:	f00b fbe0 	bl	c108 <assert_print>
     948:	f240 21c7 	movw	r1, #711	; 0x2c7
     94c:	4648      	mov	r0, r9
     94e:	f00b fbd4 	bl	c0fa <assert_post_action>
     952:	e778      	b.n	846 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     954:	f8df b030 	ldr.w	fp, [pc, #48]	; 988 <z_impl_gpio_pin_configure+0x188>
     958:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     95c:	465a      	mov	r2, fp
     95e:	4917      	ldr	r1, [pc, #92]	; (9bc <z_impl_gpio_pin_configure+0x1bc>)
     960:	480b      	ldr	r0, [pc, #44]	; (990 <z_impl_gpio_pin_configure+0x190>)
     962:	f00b fbd1 	bl	c108 <assert_print>
     966:	4816      	ldr	r0, [pc, #88]	; (9c0 <z_impl_gpio_pin_configure+0x1c0>)
     968:	f00b fbce 	bl	c108 <assert_print>
     96c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     970:	4658      	mov	r0, fp
     972:	f00b fbc2 	bl	c0fa <assert_post_action>
     976:	e777      	b.n	868 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     978:	f8d8 3000 	ldr.w	r3, [r8]
     97c:	ea23 0307 	bic.w	r3, r3, r7
     980:	f8c8 3000 	str.w	r3, [r8]
     984:	e779      	b.n	87a <z_impl_gpio_pin_configure+0x7a>
     986:	bf00      	nop
     988:	0000d428 	.word	0x0000d428
     98c:	0000d45c 	.word	0x0000d45c
     990:	0000d4bc 	.word	0x0000d4bc
     994:	0000d4dc 	.word	0x0000d4dc
     998:	0000d500 	.word	0x0000d500
     99c:	0000d53c 	.word	0x0000d53c
     9a0:	0000d57c 	.word	0x0000d57c
     9a4:	0000d5b4 	.word	0x0000d5b4
     9a8:	0000d608 	.word	0x0000d608
     9ac:	0000d63c 	.word	0x0000d63c
     9b0:	0000d684 	.word	0x0000d684
     9b4:	0000d6c0 	.word	0x0000d6c0
     9b8:	0000d704 	.word	0x0000d704
     9bc:	0000d730 	.word	0x0000d730
     9c0:	0000d770 	.word	0x0000d770

000009c4 <thread_sensor_code>:
    return;
}

/* Thread code implementation */
void thread_sensor_code(void *argA, void *argB, void *argC)
{
     9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int64_t fin_time = 0, release_time = 0;

    /* Other variables */
    long int nact = 0;

    printk("Thread A init (periodic)\n");
     9c8:	4856      	ldr	r0, [pc, #344]	; (b24 <thread_sensor_code+0x160>)
     9ca:	f00b fa18 	bl	bdfe <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     9ce:	f00c fb17 	bl	d000 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     9d2:	014a      	lsls	r2, r1, #5
     9d4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     9d8:	0143      	lsls	r3, r0, #5
     9da:	1a1b      	subs	r3, r3, r0
     9dc:	eb62 0201 	sbc.w	r2, r2, r1
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     9e6:	009b      	lsls	r3, r3, #2
     9e8:	181c      	adds	r4, r3, r0
     9ea:	eb42 0301 	adc.w	r3, r2, r1
     9ee:	00db      	lsls	r3, r3, #3
     9f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     9f4:	f3c4 3410 	ubfx	r4, r4, #12, #17
     9f8:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     9fc:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     9fe:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     a02:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     a06:	2500      	movs	r5, #0
     a08:	e046      	b.n	a98 <thread_sensor_code+0xd4>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());

        err = adc_sample();
        if (err)
        {
            printk("adc_sample() failed with error code %d\n\r", err);
     a0a:	4847      	ldr	r0, [pc, #284]	; (b28 <thread_sensor_code+0x164>)
     a0c:	f00b f9f7 	bl	bdfe <printk>
     a10:	e020      	b.n	a54 <thread_sensor_code+0x90>
                printk("adc reading out of range\n\r");
            }
            else
            {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r", adc_sample_buffer[0], (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023)));
     a12:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
     a16:	fb08 f007 	mul.w	r0, r8, r7
     a1a:	f7ff fcdf 	bl	3dc <__aeabi_i2f>
     a1e:	4943      	ldr	r1, [pc, #268]	; (b2c <thread_sensor_code+0x168>)
     a20:	f7ff fb6e 	bl	100 <__aeabi_fmul>
     a24:	f7ff fd2e 	bl	484 <__aeabi_f2uiz>
     a28:	b282      	uxth	r2, r0
     a2a:	4639      	mov	r1, r7
     a2c:	4840      	ldr	r0, [pc, #256]	; (b30 <thread_sensor_code+0x16c>)
     a2e:	f00b f9e6 	bl	bdfe <printk>
                ab = (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023));
     a32:	4b40      	ldr	r3, [pc, #256]	; (b34 <thread_sensor_code+0x170>)
     a34:	8818      	ldrh	r0, [r3, #0]
     a36:	fb08 f000 	mul.w	r0, r8, r0
     a3a:	f7ff fccf 	bl	3dc <__aeabi_i2f>
     a3e:	493b      	ldr	r1, [pc, #236]	; (b2c <thread_sensor_code+0x168>)
     a40:	f7ff fb5e 	bl	100 <__aeabi_fmul>
     a44:	f7ff fd1e 	bl	484 <__aeabi_f2uiz>
     a48:	b281      	uxth	r1, r0
     a4a:	4b3b      	ldr	r3, [pc, #236]	; (b38 <thread_sensor_code+0x174>)
     a4c:	8019      	strh	r1, [r3, #0]
                printk("Thread A set ab value to: %d \n", ab);
     a4e:	483b      	ldr	r0, [pc, #236]	; (b3c <thread_sensor_code+0x178>)
     a50:	f00b f9d5 	bl	bdfe <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     a54:	483a      	ldr	r0, [pc, #232]	; (b40 <thread_sensor_code+0x17c>)
     a56:	f008 fed7 	bl	9808 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     a5a:	f00c fad1 	bl	d000 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     a5e:	4684      	mov	ip, r0
     a60:	014a      	lsls	r2, r1, #5
     a62:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     a66:	0140      	lsls	r0, r0, #5
     a68:	ebb0 030c 	subs.w	r3, r0, ip
     a6c:	eb62 0201 	sbc.w	r2, r2, r1
     a70:	0092      	lsls	r2, r2, #2
     a72:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     a76:	009b      	lsls	r3, r3, #2
     a78:	eb13 030c 	adds.w	r3, r3, ip
     a7c:	eb42 0101 	adc.w	r1, r2, r1
     a80:	00c9      	lsls	r1, r1, #3
     a82:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     a86:	f3c3 3310 	ubfx	r3, r3, #12, #17
     a8a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     a8e:	0bc9      	lsrs	r1, r1, #15

        k_sem_give(&sem_ab);

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        if (fin_time < release_time)
     a90:	42a3      	cmp	r3, r4
     a92:	eb71 0206 	sbcs.w	r2, r1, r6
     a96:	db2b      	blt.n	af0 <thread_sensor_code+0x12c>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     a98:	3501      	adds	r5, #1
     a9a:	f00c fab1 	bl	d000 <z_impl_k_uptime_ticks>
     a9e:	4602      	mov	r2, r0
     aa0:	014b      	lsls	r3, r1, #5
     aa2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     aa6:	0140      	lsls	r0, r0, #5
     aa8:	1a80      	subs	r0, r0, r2
     aaa:	eb63 0301 	sbc.w	r3, r3, r1
     aae:	009b      	lsls	r3, r3, #2
     ab0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     ab4:	0080      	lsls	r0, r0, #2
     ab6:	1880      	adds	r0, r0, r2
     ab8:	eb43 0301 	adc.w	r3, r3, r1
     abc:	00db      	lsls	r3, r3, #3
     abe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     ac2:	f3c0 3010 	ubfx	r0, r0, #12, #17
     ac6:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     aca:	0bdb      	lsrs	r3, r3, #15
     acc:	4629      	mov	r1, r5
     ace:	481d      	ldr	r0, [pc, #116]	; (b44 <thread_sensor_code+0x180>)
     ad0:	f00b f995 	bl	bdfe <printk>
        err = adc_sample();
     ad4:	f7ff fe64 	bl	7a0 <adc_sample>
        if (err)
     ad8:	4601      	mov	r1, r0
     ada:	2800      	cmp	r0, #0
     adc:	d195      	bne.n	a0a <thread_sensor_code+0x46>
            if (adc_sample_buffer[0] > 1023)
     ade:	4b15      	ldr	r3, [pc, #84]	; (b34 <thread_sensor_code+0x170>)
     ae0:	881f      	ldrh	r7, [r3, #0]
     ae2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     ae6:	d394      	bcc.n	a12 <thread_sensor_code+0x4e>
                printk("adc reading out of range\n\r");
     ae8:	4817      	ldr	r0, [pc, #92]	; (b48 <thread_sensor_code+0x184>)
     aea:	f00b f988 	bl	bdfe <printk>
     aee:	e7b1      	b.n	a54 <thread_sensor_code+0x90>
        {
            k_msleep(release_time - fin_time);
     af0:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     af2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     af6:	17c1      	asrs	r1, r0, #31
     af8:	03c9      	lsls	r1, r1, #15
     afa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     afe:	03c0      	lsls	r0, r0, #15
     b00:	f240 33e7 	movw	r3, #999	; 0x3e7
     b04:	18c0      	adds	r0, r0, r3
     b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b0a:	f04f 0300 	mov.w	r3, #0
     b0e:	f141 0100 	adc.w	r1, r1, #0
     b12:	f7ff fcd7 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     b16:	f00a f957 	bl	adc8 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     b1a:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     b1e:	f146 0600 	adc.w	r6, r6, #0
     b22:	e7b9      	b.n	a98 <thread_sensor_code+0xd4>
     b24:	0000d784 	.word	0x0000d784
     b28:	0000d7d8 	.word	0x0000d7d8
     b2c:	3b40300c 	.word	0x3b40300c
     b30:	0000d820 	.word	0x0000d820
     b34:	200005fc 	.word	0x200005fc
     b38:	200001dc 	.word	0x200001dc
     b3c:	0000d844 	.word	0x0000d844
     b40:	2000060c 	.word	0x2000060c
     b44:	0000d7a0 	.word	0x0000d7a0
     b48:	0000d804 	.word	0x0000d804

00000b4c <thread_output_code>:
        printk("Thread B set bc value to: %d \n", bc);
    }
}

void thread_output_code(void *argA, void *argB, void *argC)
{
     b4c:	b570      	push	{r4, r5, r6, lr}
    /* Other variables */
    long int nact = 0;
    int ret;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     b4e:	485b      	ldr	r0, [pc, #364]	; (cbc <thread_output_code+0x170>)
     b50:	f00b f955 	bl	bdfe <printk>
    long int nact = 0;
     b54:	2400      	movs	r4, #0
     b56:	e0c8      	b.n	cea <thread_output_code+0x19e>
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b58:	4e59      	ldr	r6, [pc, #356]	; (cc0 <thread_output_code+0x174>)
     b5a:	f240 4392 	movw	r3, #1170	; 0x492
     b5e:	4632      	mov	r2, r6
     b60:	4958      	ldr	r1, [pc, #352]	; (cc4 <thread_output_code+0x178>)
     b62:	4859      	ldr	r0, [pc, #356]	; (cc8 <thread_output_code+0x17c>)
     b64:	f00b fad0 	bl	c108 <assert_print>
     b68:	4858      	ldr	r0, [pc, #352]	; (ccc <thread_output_code+0x180>)
     b6a:	f00b facd 	bl	c108 <assert_print>
     b6e:	f240 4192 	movw	r1, #1170	; 0x492
     b72:	4630      	mov	r0, r6
     b74:	f00b fac1 	bl	c0fa <assert_post_action>
     b78:	e0f2      	b.n	d60 <thread_output_code+0x214>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
     b7a:	2500      	movs	r5, #0
     b7c:	e0f6      	b.n	d6c <thread_output_code+0x220>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b7e:	4e50      	ldr	r6, [pc, #320]	; (cc0 <thread_output_code+0x174>)
     b80:	f44f 638d 	mov.w	r3, #1128	; 0x468
     b84:	4632      	mov	r2, r6
     b86:	494f      	ldr	r1, [pc, #316]	; (cc4 <thread_output_code+0x178>)
     b88:	484f      	ldr	r0, [pc, #316]	; (cc8 <thread_output_code+0x17c>)
     b8a:	f00b fabd 	bl	c108 <assert_print>
     b8e:	484f      	ldr	r0, [pc, #316]	; (ccc <thread_output_code+0x180>)
     b90:	f00b faba 	bl	c108 <assert_print>
     b94:	f44f 618d 	mov.w	r1, #1128	; 0x468
     b98:	4630      	mov	r0, r6
     b9a:	f00b faae 	bl	c0fa <assert_post_action>
     b9e:	e0ec      	b.n	d7a <thread_output_code+0x22e>
	const struct gpio_driver_api *api =
     ba0:	484b      	ldr	r0, [pc, #300]	; (cd0 <thread_output_code+0x184>)
     ba2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     ba4:	691b      	ldr	r3, [r3, #16]
     ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     baa:	4798      	blx	r3
     bac:	e0ee      	b.n	d8c <thread_output_code+0x240>
        printk("\t%d\n", bc);
        if (bc < 1000)
        {
            ret = gpio_pin_set_dt(&led0, 1);
            if (ret < 0)
                printk("SETTING LED VALUE FAILED");
     bae:	4849      	ldr	r0, [pc, #292]	; (cd4 <thread_output_code+0x188>)
     bb0:	f00b f925 	bl	bdfe <printk>
     bb4:	e0ed      	b.n	d92 <thread_output_code+0x246>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bb6:	4e42      	ldr	r6, [pc, #264]	; (cc0 <thread_output_code+0x174>)
     bb8:	f240 4392 	movw	r3, #1170	; 0x492
     bbc:	4632      	mov	r2, r6
     bbe:	4941      	ldr	r1, [pc, #260]	; (cc4 <thread_output_code+0x178>)
     bc0:	4841      	ldr	r0, [pc, #260]	; (cc8 <thread_output_code+0x17c>)
     bc2:	f00b faa1 	bl	c108 <assert_print>
     bc6:	4841      	ldr	r0, [pc, #260]	; (ccc <thread_output_code+0x180>)
     bc8:	f00b fa9e 	bl	c108 <assert_print>
     bcc:	f240 4192 	movw	r1, #1170	; 0x492
     bd0:	4630      	mov	r0, r6
     bd2:	f00b fa92 	bl	c0fa <assert_post_action>
     bd6:	e0e4      	b.n	da2 <thread_output_code+0x256>
		value = (value != 0) ? 0 : 1;
     bd8:	2500      	movs	r5, #0
     bda:	e0e8      	b.n	dae <thread_output_code+0x262>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bdc:	4e38      	ldr	r6, [pc, #224]	; (cc0 <thread_output_code+0x174>)
     bde:	f44f 638d 	mov.w	r3, #1128	; 0x468
     be2:	4632      	mov	r2, r6
     be4:	4937      	ldr	r1, [pc, #220]	; (cc4 <thread_output_code+0x178>)
     be6:	4838      	ldr	r0, [pc, #224]	; (cc8 <thread_output_code+0x17c>)
     be8:	f00b fa8e 	bl	c108 <assert_print>
     bec:	4837      	ldr	r0, [pc, #220]	; (ccc <thread_output_code+0x180>)
     bee:	f00b fa8b 	bl	c108 <assert_print>
     bf2:	f44f 618d 	mov.w	r1, #1128	; 0x468
     bf6:	4630      	mov	r0, r6
     bf8:	f00b fa7f 	bl	c0fa <assert_post_action>
     bfc:	e0de      	b.n	dbc <thread_output_code+0x270>
	const struct gpio_driver_api *api =
     bfe:	4834      	ldr	r0, [pc, #208]	; (cd0 <thread_output_code+0x184>)
     c00:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     c02:	691b      	ldr	r3, [r3, #16]
     c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c08:	4798      	blx	r3
     c0a:	e0e0      	b.n	dce <thread_output_code+0x282>
            ret = gpio_pin_set_dt(&led1, 1);
            if (ret < 0)
                printk("SETTING LED VALUE FAILED");
     c0c:	4831      	ldr	r0, [pc, #196]	; (cd4 <thread_output_code+0x188>)
     c0e:	f00b f8f6 	bl	bdfe <printk>
     c12:	e0df      	b.n	dd4 <thread_output_code+0x288>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c14:	4e2a      	ldr	r6, [pc, #168]	; (cc0 <thread_output_code+0x174>)
     c16:	f240 4392 	movw	r3, #1170	; 0x492
     c1a:	4632      	mov	r2, r6
     c1c:	4929      	ldr	r1, [pc, #164]	; (cc4 <thread_output_code+0x178>)
     c1e:	482a      	ldr	r0, [pc, #168]	; (cc8 <thread_output_code+0x17c>)
     c20:	f00b fa72 	bl	c108 <assert_print>
     c24:	4829      	ldr	r0, [pc, #164]	; (ccc <thread_output_code+0x180>)
     c26:	f00b fa6f 	bl	c108 <assert_print>
     c2a:	f240 4192 	movw	r1, #1170	; 0x492
     c2e:	4630      	mov	r0, r6
     c30:	f00b fa63 	bl	c0fa <assert_post_action>
     c34:	e0d6      	b.n	de4 <thread_output_code+0x298>
		value = (value != 0) ? 0 : 1;
     c36:	2500      	movs	r5, #0
     c38:	e0da      	b.n	df0 <thread_output_code+0x2a4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c3a:	4e21      	ldr	r6, [pc, #132]	; (cc0 <thread_output_code+0x174>)
     c3c:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c40:	4632      	mov	r2, r6
     c42:	4920      	ldr	r1, [pc, #128]	; (cc4 <thread_output_code+0x178>)
     c44:	4820      	ldr	r0, [pc, #128]	; (cc8 <thread_output_code+0x17c>)
     c46:	f00b fa5f 	bl	c108 <assert_print>
     c4a:	4820      	ldr	r0, [pc, #128]	; (ccc <thread_output_code+0x180>)
     c4c:	f00b fa5c 	bl	c108 <assert_print>
     c50:	f44f 618d 	mov.w	r1, #1128	; 0x468
     c54:	4630      	mov	r0, r6
     c56:	f00b fa50 	bl	c0fa <assert_post_action>
     c5a:	e0d0      	b.n	dfe <thread_output_code+0x2b2>
	const struct gpio_driver_api *api =
     c5c:	481c      	ldr	r0, [pc, #112]	; (cd0 <thread_output_code+0x184>)
     c5e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     c60:	691b      	ldr	r3, [r3, #16]
     c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     c66:	4798      	blx	r3
     c68:	e0d2      	b.n	e10 <thread_output_code+0x2c4>
            ret = gpio_pin_set_dt(&led2, 1);
            if (ret < 0)
                printk("SETTING LED VALUE FAILED");
     c6a:	481a      	ldr	r0, [pc, #104]	; (cd4 <thread_output_code+0x188>)
     c6c:	f00b f8c7 	bl	bdfe <printk>
     c70:	e0d1      	b.n	e16 <thread_output_code+0x2ca>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c72:	4e13      	ldr	r6, [pc, #76]	; (cc0 <thread_output_code+0x174>)
     c74:	f240 4392 	movw	r3, #1170	; 0x492
     c78:	4632      	mov	r2, r6
     c7a:	4912      	ldr	r1, [pc, #72]	; (cc4 <thread_output_code+0x178>)
     c7c:	4812      	ldr	r0, [pc, #72]	; (cc8 <thread_output_code+0x17c>)
     c7e:	f00b fa43 	bl	c108 <assert_print>
     c82:	4812      	ldr	r0, [pc, #72]	; (ccc <thread_output_code+0x180>)
     c84:	f00b fa40 	bl	c108 <assert_print>
     c88:	f240 4192 	movw	r1, #1170	; 0x492
     c8c:	4630      	mov	r0, r6
     c8e:	f00b fa34 	bl	c0fa <assert_post_action>
     c92:	e0c8      	b.n	e26 <thread_output_code+0x2da>
		value = (value != 0) ? 0 : 1;
     c94:	2500      	movs	r5, #0
     c96:	e0cc      	b.n	e32 <thread_output_code+0x2e6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c98:	4e09      	ldr	r6, [pc, #36]	; (cc0 <thread_output_code+0x174>)
     c9a:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c9e:	4632      	mov	r2, r6
     ca0:	4908      	ldr	r1, [pc, #32]	; (cc4 <thread_output_code+0x178>)
     ca2:	4809      	ldr	r0, [pc, #36]	; (cc8 <thread_output_code+0x17c>)
     ca4:	f00b fa30 	bl	c108 <assert_print>
     ca8:	4808      	ldr	r0, [pc, #32]	; (ccc <thread_output_code+0x180>)
     caa:	f00b fa2d 	bl	c108 <assert_print>
     cae:	f44f 618d 	mov.w	r1, #1128	; 0x468
     cb2:	4630      	mov	r0, r6
     cb4:	f00b fa21 	bl	c0fa <assert_post_action>
     cb8:	e0c2      	b.n	e40 <thread_output_code+0x2f4>
     cba:	bf00      	nop
     cbc:	0000d864 	.word	0x0000d864
     cc0:	0000d428 	.word	0x0000d428
     cc4:	0000d730 	.word	0x0000d730
     cc8:	0000d4bc 	.word	0x0000d4bc
     ccc:	0000d770 	.word	0x0000d770
     cd0:	0000d110 	.word	0x0000d110
     cd4:	0000d8fc 	.word	0x0000d8fc
	const struct gpio_driver_api *api =
     cd8:	48a9      	ldr	r0, [pc, #676]	; (f80 <thread_output_code+0x434>)
     cda:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     cdc:	691b      	ldr	r3, [r3, #16]
     cde:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     ce2:	4798      	blx	r3
            ret = gpio_pin_set_dt(&led3, 1);
            if (ret < 0)
     ce4:	2800      	cmp	r0, #0
     ce6:	f2c0 80b5 	blt.w	e54 <thread_output_code+0x308>
	return z_impl_k_sem_take(sem, timeout);
     cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cf2:	48a4      	ldr	r0, [pc, #656]	; (f84 <thread_output_code+0x438>)
     cf4:	f008 fdcc 	bl	9890 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     cf8:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     cfa:	f00c f981 	bl	d000 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     cfe:	4602      	mov	r2, r0
     d00:	014b      	lsls	r3, r1, #5
     d02:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     d06:	0140      	lsls	r0, r0, #5
     d08:	1a80      	subs	r0, r0, r2
     d0a:	eb63 0301 	sbc.w	r3, r3, r1
     d0e:	009b      	lsls	r3, r3, #2
     d10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     d14:	0080      	lsls	r0, r0, #2
     d16:	1880      	adds	r0, r0, r2
     d18:	eb43 0301 	adc.w	r3, r3, r1
     d1c:	00db      	lsls	r3, r3, #3
     d1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     d22:	f3c0 3010 	ubfx	r0, r0, #12, #17
     d26:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     d2a:	0bdb      	lsrs	r3, r3, #15
     d2c:	4621      	mov	r1, r4
     d2e:	4896      	ldr	r0, [pc, #600]	; (f88 <thread_output_code+0x43c>)
     d30:	f00b f865 	bl	bdfe <printk>
        printk("Task C read bc value: %d\n", bc);
     d34:	4d95      	ldr	r5, [pc, #596]	; (f8c <thread_output_code+0x440>)
     d36:	8829      	ldrh	r1, [r5, #0]
     d38:	4895      	ldr	r0, [pc, #596]	; (f90 <thread_output_code+0x444>)
     d3a:	f00b f860 	bl	bdfe <printk>
        printk("\t%d\n", bc);
     d3e:	8829      	ldrh	r1, [r5, #0]
     d40:	4894      	ldr	r0, [pc, #592]	; (f94 <thread_output_code+0x448>)
     d42:	f00b f85c 	bl	bdfe <printk>
        if (bc < 1000)
     d46:	882b      	ldrh	r3, [r5, #0]
     d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     d4c:	f080 8086 	bcs.w	e5c <thread_output_code+0x310>
	const struct gpio_driver_config *const cfg =
     d50:	4b8b      	ldr	r3, [pc, #556]	; (f80 <thread_output_code+0x434>)
     d52:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     d54:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d56:	6813      	ldr	r3, [r2, #0]
     d58:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     d5c:	f43f aefc 	beq.w	b58 <thread_output_code+0xc>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     d60:	682b      	ldr	r3, [r5, #0]
     d62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     d66:	f47f af08 	bne.w	b7a <thread_output_code+0x2e>
     d6a:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     d6c:	4b84      	ldr	r3, [pc, #528]	; (f80 <thread_output_code+0x434>)
     d6e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     d76:	f43f af02 	beq.w	b7e <thread_output_code+0x32>
	if (value != 0)	{
     d7a:	2d00      	cmp	r5, #0
     d7c:	f43f af10 	beq.w	ba0 <thread_output_code+0x54>
	const struct gpio_driver_api *api =
     d80:	487f      	ldr	r0, [pc, #508]	; (f80 <thread_output_code+0x434>)
     d82:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     d84:	68db      	ldr	r3, [r3, #12]
     d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     d8a:	4798      	blx	r3
            if (ret < 0)
     d8c:	2800      	cmp	r0, #0
     d8e:	f6ff af0e 	blt.w	bae <thread_output_code+0x62>
	const struct gpio_driver_config *const cfg =
     d92:	4b7b      	ldr	r3, [pc, #492]	; (f80 <thread_output_code+0x434>)
     d94:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     d96:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d98:	6813      	ldr	r3, [r2, #0]
     d9a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     d9e:	f43f af0a 	beq.w	bb6 <thread_output_code+0x6a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     da2:	682b      	ldr	r3, [r5, #0]
     da4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     da8:	f47f af16 	bne.w	bd8 <thread_output_code+0x8c>
     dac:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     dae:	4b74      	ldr	r3, [pc, #464]	; (f80 <thread_output_code+0x434>)
     db0:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     db8:	f43f af10 	beq.w	bdc <thread_output_code+0x90>
	if (value != 0)	{
     dbc:	2d00      	cmp	r5, #0
     dbe:	f43f af1e 	beq.w	bfe <thread_output_code+0xb2>
	const struct gpio_driver_api *api =
     dc2:	486f      	ldr	r0, [pc, #444]	; (f80 <thread_output_code+0x434>)
     dc4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     dc6:	68db      	ldr	r3, [r3, #12]
     dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     dcc:	4798      	blx	r3
            if (ret < 0)
     dce:	2800      	cmp	r0, #0
     dd0:	f6ff af1c 	blt.w	c0c <thread_output_code+0xc0>
	const struct gpio_driver_config *const cfg =
     dd4:	4b6a      	ldr	r3, [pc, #424]	; (f80 <thread_output_code+0x434>)
     dd6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     dd8:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dda:	6813      	ldr	r3, [r2, #0]
     ddc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     de0:	f43f af18 	beq.w	c14 <thread_output_code+0xc8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     de4:	682b      	ldr	r3, [r5, #0]
     de6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     dea:	f47f af24 	bne.w	c36 <thread_output_code+0xea>
     dee:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     df0:	4b63      	ldr	r3, [pc, #396]	; (f80 <thread_output_code+0x434>)
     df2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     dfa:	f43f af1e 	beq.w	c3a <thread_output_code+0xee>
	if (value != 0)	{
     dfe:	2d00      	cmp	r5, #0
     e00:	f43f af2c 	beq.w	c5c <thread_output_code+0x110>
	const struct gpio_driver_api *api =
     e04:	485e      	ldr	r0, [pc, #376]	; (f80 <thread_output_code+0x434>)
     e06:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     e08:	68db      	ldr	r3, [r3, #12]
     e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e0e:	4798      	blx	r3
            if (ret < 0)
     e10:	2800      	cmp	r0, #0
     e12:	f6ff af2a 	blt.w	c6a <thread_output_code+0x11e>
	const struct gpio_driver_config *const cfg =
     e16:	4b5a      	ldr	r3, [pc, #360]	; (f80 <thread_output_code+0x434>)
     e18:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e1a:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e1c:	6813      	ldr	r3, [r2, #0]
     e1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e22:	f43f af26 	beq.w	c72 <thread_output_code+0x126>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e26:	682b      	ldr	r3, [r5, #0]
     e28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e2c:	f47f af32 	bne.w	c94 <thread_output_code+0x148>
     e30:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     e32:	4b53      	ldr	r3, [pc, #332]	; (f80 <thread_output_code+0x434>)
     e34:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e3c:	f43f af2c 	beq.w	c98 <thread_output_code+0x14c>
	if (value != 0)	{
     e40:	2d00      	cmp	r5, #0
     e42:	f43f af49 	beq.w	cd8 <thread_output_code+0x18c>
	const struct gpio_driver_api *api =
     e46:	484e      	ldr	r0, [pc, #312]	; (f80 <thread_output_code+0x434>)
     e48:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     e4a:	68db      	ldr	r3, [r3, #12]
     e4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e50:	4798      	blx	r3
     e52:	e747      	b.n	ce4 <thread_output_code+0x198>
                printk("SETTING LED VALUE FAILED");
     e54:	4850      	ldr	r0, [pc, #320]	; (f98 <thread_output_code+0x44c>)
     e56:	f00a ffd2 	bl	bdfe <printk>
     e5a:	e746      	b.n	cea <thread_output_code+0x19e>
        }
        else if (bc < 2000)
     e5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     e60:	f0c0 809c 	bcc.w	f9c <thread_output_code+0x450>
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led3, 0);
            if (ret < 0)
                printk("SETTING LED VALUE FAILED");
        }
        else if (bc < 3000)
     e64:	f640 32b7 	movw	r2, #2999	; 0xbb7
     e68:	4293      	cmp	r3, r2
     e6a:	f200 829b 	bhi.w	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
	const struct gpio_driver_config *const cfg =
     e6e:	4b44      	ldr	r3, [pc, #272]	; (f80 <thread_output_code+0x434>)
     e70:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e72:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e74:	6813      	ldr	r3, [r2, #0]
     e76:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e7a:	f000 81ce 	beq.w	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e7e:	682b      	ldr	r3, [r5, #0]
     e80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e84:	f040 81da 	bne.w	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
     e88:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     e8a:	4b3d      	ldr	r3, [pc, #244]	; (f80 <thread_output_code+0x434>)
     e8c:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e94:	f000 81d4 	beq.w	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
	if (value != 0)	{
     e98:	2d00      	cmp	r5, #0
     e9a:	f000 81ef 	beq.w	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
	const struct gpio_driver_api *api =
     e9e:	4838      	ldr	r0, [pc, #224]	; (f80 <thread_output_code+0x434>)
     ea0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ea2:	68db      	ldr	r3, [r3, #12]
     ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea8:	4798      	blx	r3
        {
            ret = gpio_pin_set_dt(&led0, 1);
            if (ret < 0)
     eaa:	2800      	cmp	r0, #0
     eac:	f2c0 81ed 	blt.w	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
	const struct gpio_driver_config *const cfg =
     eb0:	4b33      	ldr	r3, [pc, #204]	; (f80 <thread_output_code+0x434>)
     eb2:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     eb4:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eb6:	6813      	ldr	r3, [r2, #0]
     eb8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ebc:	f000 81e9 	beq.w	1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     ec0:	682b      	ldr	r3, [r5, #0]
     ec2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ec6:	f040 81f5 	bne.w	12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>
     eca:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     ecc:	4b2c      	ldr	r3, [pc, #176]	; (f80 <thread_output_code+0x434>)
     ece:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ed0:	681b      	ldr	r3, [r3, #0]
     ed2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ed6:	f000 81ef 	beq.w	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
	if (value != 0)	{
     eda:	2d00      	cmp	r5, #0
     edc:	f000 81fd 	beq.w	12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
	const struct gpio_driver_api *api =
     ee0:	4827      	ldr	r0, [pc, #156]	; (f80 <thread_output_code+0x434>)
     ee2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ee4:	68db      	ldr	r3, [r3, #12]
     ee6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eea:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led1, 1);
            if (ret < 0)
     eec:	2800      	cmp	r0, #0
     eee:	f2c0 81fb 	blt.w	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
	const struct gpio_driver_config *const cfg =
     ef2:	4b23      	ldr	r3, [pc, #140]	; (f80 <thread_output_code+0x434>)
     ef4:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     ef6:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ef8:	6813      	ldr	r3, [r2, #0]
     efa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     efe:	f000 81f7 	beq.w	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f02:	682b      	ldr	r3, [r5, #0]
     f04:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f08:	f040 8203 	bne.w	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
     f0c:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
     f0e:	4b1c      	ldr	r3, [pc, #112]	; (f80 <thread_output_code+0x434>)
     f10:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f18:	f000 81fd 	beq.w	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
	if (value != 0)	{
     f1c:	2d00      	cmp	r5, #0
     f1e:	f000 820b 	beq.w	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
	const struct gpio_driver_api *api =
     f22:	4817      	ldr	r0, [pc, #92]	; (f80 <thread_output_code+0x434>)
     f24:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f26:	68db      	ldr	r3, [r3, #12]
     f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     f2c:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led2, 0);
            if (ret < 0)
     f2e:	2800      	cmp	r0, #0
     f30:	f2c0 8209 	blt.w	1346 <CONFIG_FPROTECT_BLOCK_SIZE+0x346>
	const struct gpio_driver_config *const cfg =
     f34:	4b12      	ldr	r3, [pc, #72]	; (f80 <thread_output_code+0x434>)
     f36:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     f38:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f3a:	6813      	ldr	r3, [r2, #0]
     f3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f40:	f000 8205 	beq.w	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f4a:	f040 8211 	bne.w	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
     f4e:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
     f50:	4b0b      	ldr	r3, [pc, #44]	; (f80 <thread_output_code+0x434>)
     f52:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f5a:	f000 820b 	beq.w	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
	if (value != 0)	{
     f5e:	2d00      	cmp	r5, #0
     f60:	f000 8219 	beq.w	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
	const struct gpio_driver_api *api =
     f64:	4806      	ldr	r0, [pc, #24]	; (f80 <thread_output_code+0x434>)
     f66:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f68:	68db      	ldr	r3, [r3, #12]
     f6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     f6e:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led3, 0);
            if (ret < 0)
     f70:	2800      	cmp	r0, #0
     f72:	f6bf aeba 	bge.w	cea <thread_output_code+0x19e>
                printk("SETTING LED VALUE FAILED");
     f76:	4808      	ldr	r0, [pc, #32]	; (f98 <thread_output_code+0x44c>)
     f78:	f00a ff41 	bl	bdfe <printk>
     f7c:	e6b5      	b.n	cea <thread_output_code+0x19e>
     f7e:	bf00      	nop
     f80:	0000d110 	.word	0x0000d110
     f84:	2000061c 	.word	0x2000061c
     f88:	0000d8a0 	.word	0x0000d8a0
     f8c:	200001de 	.word	0x200001de
     f90:	0000d8d8 	.word	0x0000d8d8
     f94:	0000d8f4 	.word	0x0000d8f4
     f98:	0000d8fc 	.word	0x0000d8fc
	const struct gpio_driver_config *const cfg =
     f9c:	4bb1      	ldr	r3, [pc, #708]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     f9e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     fa0:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fa2:	6813      	ldr	r3, [r2, #0]
     fa4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fa8:	d07f      	beq.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     faa:	682b      	ldr	r3, [r5, #0]
     fac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fb0:	f040 808c 	bne.w	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
     fb4:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     fb6:	4bab      	ldr	r3, [pc, #684]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     fb8:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fc0:	f000 8086 	beq.w	10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
	if (value != 0)	{
     fc4:	2d00      	cmp	r5, #0
     fc6:	f000 8094 	beq.w	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
	const struct gpio_driver_api *api =
     fca:	48a6      	ldr	r0, [pc, #664]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     fcc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     fce:	68db      	ldr	r3, [r3, #12]
     fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     fd4:	4798      	blx	r3
            if (ret < 0)
     fd6:	2800      	cmp	r0, #0
     fd8:	f2c0 8092 	blt.w	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
	const struct gpio_driver_config *const cfg =
     fdc:	4ba1      	ldr	r3, [pc, #644]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     fde:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     fe0:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fe2:	6813      	ldr	r3, [r2, #0]
     fe4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     fe8:	f000 808e 	beq.w	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     fec:	682b      	ldr	r3, [r5, #0]
     fee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ff2:	f040 809a 	bne.w	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
     ff6:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     ff8:	4b9a      	ldr	r3, [pc, #616]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     ffa:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1002:	f000 8094 	beq.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
	if (value != 0)	{
    1006:	2d00      	cmp	r5, #0
    1008:	f000 80a2 	beq.w	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
	const struct gpio_driver_api *api =
    100c:	4895      	ldr	r0, [pc, #596]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    100e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1010:	68db      	ldr	r3, [r3, #12]
    1012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1016:	4798      	blx	r3
            if (ret < 0)
    1018:	2800      	cmp	r0, #0
    101a:	f2c0 80a0 	blt.w	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
	const struct gpio_driver_config *const cfg =
    101e:	4b91      	ldr	r3, [pc, #580]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1020:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1022:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1024:	6813      	ldr	r3, [r2, #0]
    1026:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    102a:	f000 809c 	beq.w	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    102e:	682b      	ldr	r3, [r5, #0]
    1030:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1034:	f040 80a8 	bne.w	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
    1038:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    103a:	4b8a      	ldr	r3, [pc, #552]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    103c:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1044:	f000 80a2 	beq.w	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
	if (value != 0)	{
    1048:	2d00      	cmp	r5, #0
    104a:	f000 80b0 	beq.w	11ae <CONFIG_FPROTECT_BLOCK_SIZE+0x1ae>
	const struct gpio_driver_api *api =
    104e:	4885      	ldr	r0, [pc, #532]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1050:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1052:	68db      	ldr	r3, [r3, #12]
    1054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1058:	4798      	blx	r3
            if (ret < 0)
    105a:	2800      	cmp	r0, #0
    105c:	f2c0 80ae 	blt.w	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
	const struct gpio_driver_config *const cfg =
    1060:	4b80      	ldr	r3, [pc, #512]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1062:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1064:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1066:	6813      	ldr	r3, [r2, #0]
    1068:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    106c:	f000 80aa 	beq.w	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1070:	682b      	ldr	r3, [r5, #0]
    1072:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1076:	f040 80b6 	bne.w	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
    107a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    107c:	4b79      	ldr	r3, [pc, #484]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    107e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1086:	f000 80b0 	beq.w	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
	if (value != 0)	{
    108a:	2d00      	cmp	r5, #0
    108c:	f000 80be 	beq.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
	const struct gpio_driver_api *api =
    1090:	4874      	ldr	r0, [pc, #464]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1092:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1094:	68db      	ldr	r3, [r3, #12]
    1096:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    109a:	4798      	blx	r3
            if (ret < 0)
    109c:	2800      	cmp	r0, #0
    109e:	f6bf ae24 	bge.w	cea <thread_output_code+0x19e>
                printk("SETTING LED VALUE FAILED");
    10a2:	4871      	ldr	r0, [pc, #452]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    10a4:	f00a feab 	bl	bdfe <printk>
    10a8:	e61f      	b.n	cea <thread_output_code+0x19e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10aa:	4e70      	ldr	r6, [pc, #448]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    10ac:	f240 4392 	movw	r3, #1170	; 0x492
    10b0:	4632      	mov	r2, r6
    10b2:	496f      	ldr	r1, [pc, #444]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    10b4:	486f      	ldr	r0, [pc, #444]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    10b6:	f00b f827 	bl	c108 <assert_print>
    10ba:	486f      	ldr	r0, [pc, #444]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    10bc:	f00b f824 	bl	c108 <assert_print>
    10c0:	f240 4192 	movw	r1, #1170	; 0x492
    10c4:	4630      	mov	r0, r6
    10c6:	f00b f818 	bl	c0fa <assert_post_action>
    10ca:	e76e      	b.n	faa <thread_output_code+0x45e>
		value = (value != 0) ? 0 : 1;
    10cc:	2500      	movs	r5, #0
    10ce:	e772      	b.n	fb6 <thread_output_code+0x46a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10d0:	4e66      	ldr	r6, [pc, #408]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    10d2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    10d6:	4632      	mov	r2, r6
    10d8:	4965      	ldr	r1, [pc, #404]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    10da:	4866      	ldr	r0, [pc, #408]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    10dc:	f00b f814 	bl	c108 <assert_print>
    10e0:	4865      	ldr	r0, [pc, #404]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    10e2:	f00b f811 	bl	c108 <assert_print>
    10e6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    10ea:	4630      	mov	r0, r6
    10ec:	f00b f805 	bl	c0fa <assert_post_action>
    10f0:	e768      	b.n	fc4 <thread_output_code+0x478>
	const struct gpio_driver_api *api =
    10f2:	485c      	ldr	r0, [pc, #368]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    10f4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    10f6:	691b      	ldr	r3, [r3, #16]
    10f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    10fc:	4798      	blx	r3
    10fe:	e76a      	b.n	fd6 <thread_output_code+0x48a>
                printk("SETTING LED VALUE FAILED");
    1100:	4859      	ldr	r0, [pc, #356]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    1102:	f00a fe7c 	bl	bdfe <printk>
    1106:	e769      	b.n	fdc <thread_output_code+0x490>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1108:	4e58      	ldr	r6, [pc, #352]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    110a:	f240 4392 	movw	r3, #1170	; 0x492
    110e:	4632      	mov	r2, r6
    1110:	4957      	ldr	r1, [pc, #348]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    1112:	4858      	ldr	r0, [pc, #352]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1114:	f00a fff8 	bl	c108 <assert_print>
    1118:	4857      	ldr	r0, [pc, #348]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    111a:	f00a fff5 	bl	c108 <assert_print>
    111e:	f240 4192 	movw	r1, #1170	; 0x492
    1122:	4630      	mov	r0, r6
    1124:	f00a ffe9 	bl	c0fa <assert_post_action>
    1128:	e760      	b.n	fec <thread_output_code+0x4a0>
		value = (value != 0) ? 0 : 1;
    112a:	2500      	movs	r5, #0
    112c:	e764      	b.n	ff8 <thread_output_code+0x4ac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    112e:	4e4f      	ldr	r6, [pc, #316]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    1130:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1134:	4632      	mov	r2, r6
    1136:	494e      	ldr	r1, [pc, #312]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    1138:	484e      	ldr	r0, [pc, #312]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    113a:	f00a ffe5 	bl	c108 <assert_print>
    113e:	484e      	ldr	r0, [pc, #312]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    1140:	f00a ffe2 	bl	c108 <assert_print>
    1144:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1148:	4630      	mov	r0, r6
    114a:	f00a ffd6 	bl	c0fa <assert_post_action>
    114e:	e75a      	b.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
	const struct gpio_driver_api *api =
    1150:	4844      	ldr	r0, [pc, #272]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1152:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1154:	691b      	ldr	r3, [r3, #16]
    1156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    115a:	4798      	blx	r3
    115c:	e75c      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
                printk("SETTING LED VALUE FAILED");
    115e:	4842      	ldr	r0, [pc, #264]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    1160:	f00a fe4d 	bl	bdfe <printk>
    1164:	e75b      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1166:	4e41      	ldr	r6, [pc, #260]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    1168:	f240 4392 	movw	r3, #1170	; 0x492
    116c:	4632      	mov	r2, r6
    116e:	4940      	ldr	r1, [pc, #256]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    1170:	4840      	ldr	r0, [pc, #256]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1172:	f00a ffc9 	bl	c108 <assert_print>
    1176:	4840      	ldr	r0, [pc, #256]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    1178:	f00a ffc6 	bl	c108 <assert_print>
    117c:	f240 4192 	movw	r1, #1170	; 0x492
    1180:	4630      	mov	r0, r6
    1182:	f00a ffba 	bl	c0fa <assert_post_action>
    1186:	e752      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		value = (value != 0) ? 0 : 1;
    1188:	2500      	movs	r5, #0
    118a:	e756      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    118c:	4e37      	ldr	r6, [pc, #220]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    118e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1192:	4632      	mov	r2, r6
    1194:	4936      	ldr	r1, [pc, #216]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    1196:	4837      	ldr	r0, [pc, #220]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1198:	f00a ffb6 	bl	c108 <assert_print>
    119c:	4836      	ldr	r0, [pc, #216]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    119e:	f00a ffb3 	bl	c108 <assert_print>
    11a2:	f44f 618d 	mov.w	r1, #1128	; 0x468
    11a6:	4630      	mov	r0, r6
    11a8:	f00a ffa7 	bl	c0fa <assert_post_action>
    11ac:	e74c      	b.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
	const struct gpio_driver_api *api =
    11ae:	482d      	ldr	r0, [pc, #180]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    11b0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    11b2:	691b      	ldr	r3, [r3, #16]
    11b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    11b8:	4798      	blx	r3
    11ba:	e74e      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
                printk("SETTING LED VALUE FAILED");
    11bc:	482a      	ldr	r0, [pc, #168]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    11be:	f00a fe1e 	bl	bdfe <printk>
    11c2:	e74d      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11c4:	4e29      	ldr	r6, [pc, #164]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    11c6:	f240 4392 	movw	r3, #1170	; 0x492
    11ca:	4632      	mov	r2, r6
    11cc:	4928      	ldr	r1, [pc, #160]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    11ce:	4829      	ldr	r0, [pc, #164]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    11d0:	f00a ff9a 	bl	c108 <assert_print>
    11d4:	4828      	ldr	r0, [pc, #160]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    11d6:	f00a ff97 	bl	c108 <assert_print>
    11da:	f240 4192 	movw	r1, #1170	; 0x492
    11de:	4630      	mov	r0, r6
    11e0:	f00a ff8b 	bl	c0fa <assert_post_action>
    11e4:	e744      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
		value = (value != 0) ? 0 : 1;
    11e6:	2501      	movs	r5, #1
    11e8:	e748      	b.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11ea:	4e20      	ldr	r6, [pc, #128]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    11ec:	f44f 638d 	mov.w	r3, #1128	; 0x468
    11f0:	4632      	mov	r2, r6
    11f2:	491f      	ldr	r1, [pc, #124]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    11f4:	481f      	ldr	r0, [pc, #124]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    11f6:	f00a ff87 	bl	c108 <assert_print>
    11fa:	481f      	ldr	r0, [pc, #124]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    11fc:	f00a ff84 	bl	c108 <assert_print>
    1200:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1204:	4630      	mov	r0, r6
    1206:	f00a ff78 	bl	c0fa <assert_post_action>
    120a:	e73e      	b.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
	const struct gpio_driver_api *api =
    120c:	4815      	ldr	r0, [pc, #84]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    120e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1210:	691b      	ldr	r3, [r3, #16]
    1212:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1216:	4798      	blx	r3
    1218:	e740      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    121a:	4e14      	ldr	r6, [pc, #80]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    121c:	f240 4392 	movw	r3, #1170	; 0x492
    1220:	4632      	mov	r2, r6
    1222:	4913      	ldr	r1, [pc, #76]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    1224:	4813      	ldr	r0, [pc, #76]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1226:	f00a ff6f 	bl	c108 <assert_print>
    122a:	4813      	ldr	r0, [pc, #76]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    122c:	f00a ff6c 	bl	c108 <assert_print>
    1230:	f240 4192 	movw	r1, #1170	; 0x492
    1234:	4630      	mov	r0, r6
    1236:	f00a ff60 	bl	c0fa <assert_post_action>
    123a:	e620      	b.n	e7e <thread_output_code+0x332>
		value = (value != 0) ? 0 : 1;
    123c:	2500      	movs	r5, #0
    123e:	e624      	b.n	e8a <thread_output_code+0x33e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1240:	4e0a      	ldr	r6, [pc, #40]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    1242:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1246:	4632      	mov	r2, r6
    1248:	4909      	ldr	r1, [pc, #36]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
    124a:	480a      	ldr	r0, [pc, #40]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    124c:	f00a ff5c 	bl	c108 <assert_print>
    1250:	4809      	ldr	r0, [pc, #36]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    1252:	f00a ff59 	bl	c108 <assert_print>
    1256:	f44f 618d 	mov.w	r1, #1128	; 0x468
    125a:	4630      	mov	r0, r6
    125c:	f00a ff4d 	bl	c0fa <assert_post_action>
    1260:	e61a      	b.n	e98 <thread_output_code+0x34c>
    1262:	bf00      	nop
    1264:	0000d110 	.word	0x0000d110
    1268:	0000d8fc 	.word	0x0000d8fc
    126c:	0000d428 	.word	0x0000d428
    1270:	0000d730 	.word	0x0000d730
    1274:	0000d4bc 	.word	0x0000d4bc
    1278:	0000d770 	.word	0x0000d770
	const struct gpio_driver_api *api =
    127c:	48ae      	ldr	r0, [pc, #696]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    127e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1280:	691b      	ldr	r3, [r3, #16]
    1282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1286:	4798      	blx	r3
    1288:	e60f      	b.n	eaa <thread_output_code+0x35e>
                printk("SETTING LED VALUE FAILED");
    128a:	48ac      	ldr	r0, [pc, #688]	; (153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>)
    128c:	f00a fdb7 	bl	bdfe <printk>
    1290:	e60e      	b.n	eb0 <thread_output_code+0x364>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1292:	4eab      	ldr	r6, [pc, #684]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    1294:	f240 4392 	movw	r3, #1170	; 0x492
    1298:	4632      	mov	r2, r6
    129a:	49aa      	ldr	r1, [pc, #680]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    129c:	48aa      	ldr	r0, [pc, #680]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    129e:	f00a ff33 	bl	c108 <assert_print>
    12a2:	48aa      	ldr	r0, [pc, #680]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    12a4:	f00a ff30 	bl	c108 <assert_print>
    12a8:	f240 4192 	movw	r1, #1170	; 0x492
    12ac:	4630      	mov	r0, r6
    12ae:	f00a ff24 	bl	c0fa <assert_post_action>
    12b2:	e605      	b.n	ec0 <thread_output_code+0x374>
		value = (value != 0) ? 0 : 1;
    12b4:	2500      	movs	r5, #0
    12b6:	e609      	b.n	ecc <thread_output_code+0x380>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12b8:	4ea1      	ldr	r6, [pc, #644]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    12ba:	f44f 638d 	mov.w	r3, #1128	; 0x468
    12be:	4632      	mov	r2, r6
    12c0:	49a0      	ldr	r1, [pc, #640]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    12c2:	48a1      	ldr	r0, [pc, #644]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    12c4:	f00a ff20 	bl	c108 <assert_print>
    12c8:	48a0      	ldr	r0, [pc, #640]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    12ca:	f00a ff1d 	bl	c108 <assert_print>
    12ce:	f44f 618d 	mov.w	r1, #1128	; 0x468
    12d2:	4630      	mov	r0, r6
    12d4:	f00a ff11 	bl	c0fa <assert_post_action>
    12d8:	e5ff      	b.n	eda <thread_output_code+0x38e>
	const struct gpio_driver_api *api =
    12da:	4897      	ldr	r0, [pc, #604]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    12dc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    12de:	691b      	ldr	r3, [r3, #16]
    12e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    12e4:	4798      	blx	r3
    12e6:	e601      	b.n	eec <thread_output_code+0x3a0>
                printk("SETTING LED VALUE FAILED");
    12e8:	4894      	ldr	r0, [pc, #592]	; (153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>)
    12ea:	f00a fd88 	bl	bdfe <printk>
    12ee:	e600      	b.n	ef2 <thread_output_code+0x3a6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12f0:	4e93      	ldr	r6, [pc, #588]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    12f2:	f240 4392 	movw	r3, #1170	; 0x492
    12f6:	4632      	mov	r2, r6
    12f8:	4992      	ldr	r1, [pc, #584]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    12fa:	4893      	ldr	r0, [pc, #588]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    12fc:	f00a ff04 	bl	c108 <assert_print>
    1300:	4892      	ldr	r0, [pc, #584]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    1302:	f00a ff01 	bl	c108 <assert_print>
    1306:	f240 4192 	movw	r1, #1170	; 0x492
    130a:	4630      	mov	r0, r6
    130c:	f00a fef5 	bl	c0fa <assert_post_action>
    1310:	e5f7      	b.n	f02 <thread_output_code+0x3b6>
		value = (value != 0) ? 0 : 1;
    1312:	2501      	movs	r5, #1
    1314:	e5fb      	b.n	f0e <thread_output_code+0x3c2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1316:	4e8a      	ldr	r6, [pc, #552]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    1318:	f44f 638d 	mov.w	r3, #1128	; 0x468
    131c:	4632      	mov	r2, r6
    131e:	4989      	ldr	r1, [pc, #548]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    1320:	4889      	ldr	r0, [pc, #548]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    1322:	f00a fef1 	bl	c108 <assert_print>
    1326:	4889      	ldr	r0, [pc, #548]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    1328:	f00a feee 	bl	c108 <assert_print>
    132c:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1330:	4630      	mov	r0, r6
    1332:	f00a fee2 	bl	c0fa <assert_post_action>
    1336:	e5f1      	b.n	f1c <thread_output_code+0x3d0>
	const struct gpio_driver_api *api =
    1338:	487f      	ldr	r0, [pc, #508]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    133a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    133c:	691b      	ldr	r3, [r3, #16]
    133e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1342:	4798      	blx	r3
    1344:	e5f3      	b.n	f2e <thread_output_code+0x3e2>
                printk("SETTING LED VALUE FAILED");
    1346:	487d      	ldr	r0, [pc, #500]	; (153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>)
    1348:	f00a fd59 	bl	bdfe <printk>
    134c:	e5f2      	b.n	f34 <thread_output_code+0x3e8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    134e:	4e7c      	ldr	r6, [pc, #496]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    1350:	f240 4392 	movw	r3, #1170	; 0x492
    1354:	4632      	mov	r2, r6
    1356:	497b      	ldr	r1, [pc, #492]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    1358:	487b      	ldr	r0, [pc, #492]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    135a:	f00a fed5 	bl	c108 <assert_print>
    135e:	487b      	ldr	r0, [pc, #492]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    1360:	f00a fed2 	bl	c108 <assert_print>
    1364:	f240 4192 	movw	r1, #1170	; 0x492
    1368:	4630      	mov	r0, r6
    136a:	f00a fec6 	bl	c0fa <assert_post_action>
    136e:	e5e9      	b.n	f44 <thread_output_code+0x3f8>
		value = (value != 0) ? 0 : 1;
    1370:	2501      	movs	r5, #1
    1372:	e5ed      	b.n	f50 <thread_output_code+0x404>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1374:	4e72      	ldr	r6, [pc, #456]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    1376:	f44f 638d 	mov.w	r3, #1128	; 0x468
    137a:	4632      	mov	r2, r6
    137c:	4971      	ldr	r1, [pc, #452]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    137e:	4872      	ldr	r0, [pc, #456]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    1380:	f00a fec2 	bl	c108 <assert_print>
    1384:	4871      	ldr	r0, [pc, #452]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    1386:	f00a febf 	bl	c108 <assert_print>
    138a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    138e:	4630      	mov	r0, r6
    1390:	f00a feb3 	bl	c0fa <assert_post_action>
    1394:	e5e3      	b.n	f5e <thread_output_code+0x412>
	const struct gpio_driver_api *api =
    1396:	4868      	ldr	r0, [pc, #416]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1398:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    139a:	691b      	ldr	r3, [r3, #16]
    139c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    13a0:	4798      	blx	r3
    13a2:	e5e5      	b.n	f70 <thread_output_code+0x424>
	const struct gpio_driver_config *const cfg =
    13a4:	4b64      	ldr	r3, [pc, #400]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    13a6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13a8:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13aa:	6813      	ldr	r3, [r2, #0]
    13ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13b0:	d07f      	beq.n	14b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b2>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    13b2:	682b      	ldr	r3, [r5, #0]
    13b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13b8:	f040 808c 	bne.w	14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
    13bc:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    13be:	4b5e      	ldr	r3, [pc, #376]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    13c0:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13c2:	681b      	ldr	r3, [r3, #0]
    13c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13c8:	f000 8086 	beq.w	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
	if (value != 0)	{
    13cc:	2d00      	cmp	r5, #0
    13ce:	f000 8094 	beq.w	14fa <CONFIG_FPROTECT_BLOCK_SIZE+0x4fa>
	const struct gpio_driver_api *api =
    13d2:	4859      	ldr	r0, [pc, #356]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    13d4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    13d6:	68db      	ldr	r3, [r3, #12]
    13d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    13dc:	4798      	blx	r3
        }
        else
        {
            ret = gpio_pin_set_dt(&led0, 1);
            if (ret < 0)
    13de:	2800      	cmp	r0, #0
    13e0:	f2c0 8092 	blt.w	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
	const struct gpio_driver_config *const cfg =
    13e4:	4b54      	ldr	r3, [pc, #336]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    13e6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13e8:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13ea:	6813      	ldr	r3, [r2, #0]
    13ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    13f0:	f000 808e 	beq.w	1510 <CONFIG_FPROTECT_BLOCK_SIZE+0x510>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    13f4:	682b      	ldr	r3, [r5, #0]
    13f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    13fa:	f040 809a 	bne.w	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    13fe:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    1400:	4b4d      	ldr	r3, [pc, #308]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1402:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1404:	681b      	ldr	r3, [r3, #0]
    1406:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    140a:	f000 80a1 	beq.w	1550 <CONFIG_FPROTECT_BLOCK_SIZE+0x550>
	if (value != 0)	{
    140e:	2d00      	cmp	r5, #0
    1410:	f000 80af 	beq.w	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
	const struct gpio_driver_api *api =
    1414:	4848      	ldr	r0, [pc, #288]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1416:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1418:	68db      	ldr	r3, [r3, #12]
    141a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    141e:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led1, 0);
            if (ret < 0)
    1420:	2800      	cmp	r0, #0
    1422:	f2c0 80ad 	blt.w	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
	const struct gpio_driver_config *const cfg =
    1426:	4b44      	ldr	r3, [pc, #272]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1428:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    142a:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    142c:	6813      	ldr	r3, [r2, #0]
    142e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1432:	f000 80a9 	beq.w	1588 <CONFIG_FPROTECT_BLOCK_SIZE+0x588>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1436:	682b      	ldr	r3, [r5, #0]
    1438:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    143c:	f040 80b5 	bne.w	15aa <CONFIG_FPROTECT_BLOCK_SIZE+0x5aa>
    1440:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    1442:	4b3d      	ldr	r3, [pc, #244]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1444:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    144c:	f000 80af 	beq.w	15ae <CONFIG_FPROTECT_BLOCK_SIZE+0x5ae>
	if (value != 0)	{
    1450:	2d00      	cmp	r5, #0
    1452:	f000 80bd 	beq.w	15d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d0>
	const struct gpio_driver_api *api =
    1456:	4838      	ldr	r0, [pc, #224]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1458:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    145a:	68db      	ldr	r3, [r3, #12]
    145c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1460:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led2, 0);
            if (ret < 0)
    1462:	2800      	cmp	r0, #0
    1464:	f2c0 80bb 	blt.w	15de <CONFIG_FPROTECT_BLOCK_SIZE+0x5de>
	const struct gpio_driver_config *const cfg =
    1468:	4b33      	ldr	r3, [pc, #204]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    146a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    146c:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    146e:	6813      	ldr	r3, [r2, #0]
    1470:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1474:	f000 80b7 	beq.w	15e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1478:	682b      	ldr	r3, [r5, #0]
    147a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    147e:	f040 80c3 	bne.w	1608 <CONFIG_FPROTECT_BLOCK_SIZE+0x608>
    1482:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    1484:	4b2c      	ldr	r3, [pc, #176]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    1486:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    148e:	f000 80bd 	beq.w	160c <CONFIG_FPROTECT_BLOCK_SIZE+0x60c>
	if (value != 0)	{
    1492:	2d00      	cmp	r5, #0
    1494:	f000 80cb 	beq.w	162e <CONFIG_FPROTECT_BLOCK_SIZE+0x62e>
	const struct gpio_driver_api *api =
    1498:	4827      	ldr	r0, [pc, #156]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    149a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    149c:	68db      	ldr	r3, [r3, #12]
    149e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    14a2:	4798      	blx	r3
                printk("SETTING LED VALUE FAILED");
            ret = gpio_pin_set_dt(&led3, 0);
            if (ret < 0)
    14a4:	2800      	cmp	r0, #0
    14a6:	f6bf ac20 	bge.w	cea <thread_output_code+0x19e>
                printk("SETTING LED VALUE FAILED");
    14aa:	4824      	ldr	r0, [pc, #144]	; (153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>)
    14ac:	f00a fca7 	bl	bdfe <printk>
    {
    14b0:	e41b      	b.n	cea <thread_output_code+0x19e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14b2:	4e23      	ldr	r6, [pc, #140]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    14b4:	f240 4392 	movw	r3, #1170	; 0x492
    14b8:	4632      	mov	r2, r6
    14ba:	4922      	ldr	r1, [pc, #136]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    14bc:	4822      	ldr	r0, [pc, #136]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    14be:	f00a fe23 	bl	c108 <assert_print>
    14c2:	4822      	ldr	r0, [pc, #136]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    14c4:	f00a fe20 	bl	c108 <assert_print>
    14c8:	f240 4192 	movw	r1, #1170	; 0x492
    14cc:	4630      	mov	r0, r6
    14ce:	f00a fe14 	bl	c0fa <assert_post_action>
    14d2:	e76e      	b.n	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
		value = (value != 0) ? 0 : 1;
    14d4:	2500      	movs	r5, #0
    14d6:	e772      	b.n	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14d8:	4e19      	ldr	r6, [pc, #100]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    14da:	f44f 638d 	mov.w	r3, #1128	; 0x468
    14de:	4632      	mov	r2, r6
    14e0:	4918      	ldr	r1, [pc, #96]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    14e2:	4819      	ldr	r0, [pc, #100]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    14e4:	f00a fe10 	bl	c108 <assert_print>
    14e8:	4818      	ldr	r0, [pc, #96]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    14ea:	f00a fe0d 	bl	c108 <assert_print>
    14ee:	f44f 618d 	mov.w	r1, #1128	; 0x468
    14f2:	4630      	mov	r0, r6
    14f4:	f00a fe01 	bl	c0fa <assert_post_action>
    14f8:	e768      	b.n	13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>
	const struct gpio_driver_api *api =
    14fa:	480f      	ldr	r0, [pc, #60]	; (1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>)
    14fc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    14fe:	691b      	ldr	r3, [r3, #16]
    1500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1504:	4798      	blx	r3
    1506:	e76a      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
                printk("SETTING LED VALUE FAILED");
    1508:	480c      	ldr	r0, [pc, #48]	; (153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>)
    150a:	f00a fc78 	bl	bdfe <printk>
    150e:	e769      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1510:	4e0b      	ldr	r6, [pc, #44]	; (1540 <CONFIG_FPROTECT_BLOCK_SIZE+0x540>)
    1512:	f240 4392 	movw	r3, #1170	; 0x492
    1516:	4632      	mov	r2, r6
    1518:	490a      	ldr	r1, [pc, #40]	; (1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>)
    151a:	480b      	ldr	r0, [pc, #44]	; (1548 <CONFIG_FPROTECT_BLOCK_SIZE+0x548>)
    151c:	f00a fdf4 	bl	c108 <assert_print>
    1520:	480a      	ldr	r0, [pc, #40]	; (154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>)
    1522:	f00a fdf1 	bl	c108 <assert_print>
    1526:	f240 4192 	movw	r1, #1170	; 0x492
    152a:	4630      	mov	r0, r6
    152c:	f00a fde5 	bl	c0fa <assert_post_action>
    1530:	e760      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
		value = (value != 0) ? 0 : 1;
    1532:	2501      	movs	r5, #1
    1534:	e764      	b.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
    1536:	bf00      	nop
    1538:	0000d110 	.word	0x0000d110
    153c:	0000d8fc 	.word	0x0000d8fc
    1540:	0000d428 	.word	0x0000d428
    1544:	0000d730 	.word	0x0000d730
    1548:	0000d4bc 	.word	0x0000d4bc
    154c:	0000d770 	.word	0x0000d770
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1550:	4e3a      	ldr	r6, [pc, #232]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1552:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1556:	4632      	mov	r2, r6
    1558:	4939      	ldr	r1, [pc, #228]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    155a:	483a      	ldr	r0, [pc, #232]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    155c:	f00a fdd4 	bl	c108 <assert_print>
    1560:	4839      	ldr	r0, [pc, #228]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    1562:	f00a fdd1 	bl	c108 <assert_print>
    1566:	f44f 618d 	mov.w	r1, #1128	; 0x468
    156a:	4630      	mov	r0, r6
    156c:	f00a fdc5 	bl	c0fa <assert_post_action>
    1570:	e74d      	b.n	140e <CONFIG_FPROTECT_BLOCK_SIZE+0x40e>
	const struct gpio_driver_api *api =
    1572:	4836      	ldr	r0, [pc, #216]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    1574:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1576:	691b      	ldr	r3, [r3, #16]
    1578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    157c:	4798      	blx	r3
    157e:	e74f      	b.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
                printk("SETTING LED VALUE FAILED");
    1580:	4833      	ldr	r0, [pc, #204]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1582:	f00a fc3c 	bl	bdfe <printk>
    1586:	e74e      	b.n	1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1588:	4e2c      	ldr	r6, [pc, #176]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    158a:	f240 4392 	movw	r3, #1170	; 0x492
    158e:	4632      	mov	r2, r6
    1590:	492b      	ldr	r1, [pc, #172]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    1592:	482c      	ldr	r0, [pc, #176]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1594:	f00a fdb8 	bl	c108 <assert_print>
    1598:	482b      	ldr	r0, [pc, #172]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    159a:	f00a fdb5 	bl	c108 <assert_print>
    159e:	f240 4192 	movw	r1, #1170	; 0x492
    15a2:	4630      	mov	r0, r6
    15a4:	f00a fda9 	bl	c0fa <assert_post_action>
    15a8:	e745      	b.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
		value = (value != 0) ? 0 : 1;
    15aa:	2501      	movs	r5, #1
    15ac:	e749      	b.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15ae:	4e23      	ldr	r6, [pc, #140]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    15b0:	f44f 638d 	mov.w	r3, #1128	; 0x468
    15b4:	4632      	mov	r2, r6
    15b6:	4922      	ldr	r1, [pc, #136]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    15b8:	4822      	ldr	r0, [pc, #136]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    15ba:	f00a fda5 	bl	c108 <assert_print>
    15be:	4822      	ldr	r0, [pc, #136]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    15c0:	f00a fda2 	bl	c108 <assert_print>
    15c4:	f44f 618d 	mov.w	r1, #1128	; 0x468
    15c8:	4630      	mov	r0, r6
    15ca:	f00a fd96 	bl	c0fa <assert_post_action>
    15ce:	e73f      	b.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
	const struct gpio_driver_api *api =
    15d0:	481e      	ldr	r0, [pc, #120]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    15d2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    15d4:	691b      	ldr	r3, [r3, #16]
    15d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    15da:	4798      	blx	r3
    15dc:	e741      	b.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
                printk("SETTING LED VALUE FAILED");
    15de:	481c      	ldr	r0, [pc, #112]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    15e0:	f00a fc0d 	bl	bdfe <printk>
    15e4:	e740      	b.n	1468 <CONFIG_FPROTECT_BLOCK_SIZE+0x468>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15e6:	4e15      	ldr	r6, [pc, #84]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    15e8:	f240 4392 	movw	r3, #1170	; 0x492
    15ec:	4632      	mov	r2, r6
    15ee:	4914      	ldr	r1, [pc, #80]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    15f0:	4814      	ldr	r0, [pc, #80]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    15f2:	f00a fd89 	bl	c108 <assert_print>
    15f6:	4814      	ldr	r0, [pc, #80]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    15f8:	f00a fd86 	bl	c108 <assert_print>
    15fc:	f240 4192 	movw	r1, #1170	; 0x492
    1600:	4630      	mov	r0, r6
    1602:	f00a fd7a 	bl	c0fa <assert_post_action>
    1606:	e737      	b.n	1478 <CONFIG_FPROTECT_BLOCK_SIZE+0x478>
		value = (value != 0) ? 0 : 1;
    1608:	2501      	movs	r5, #1
    160a:	e73b      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    160c:	4e0b      	ldr	r6, [pc, #44]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    160e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1612:	4632      	mov	r2, r6
    1614:	490a      	ldr	r1, [pc, #40]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1618:	f00a fd76 	bl	c108 <assert_print>
    161c:	480a      	ldr	r0, [pc, #40]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    161e:	f00a fd73 	bl	c108 <assert_print>
    1622:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1626:	4630      	mov	r0, r6
    1628:	f00a fd67 	bl	c0fa <assert_post_action>
    162c:	e731      	b.n	1492 <CONFIG_FPROTECT_BLOCK_SIZE+0x492>
	const struct gpio_driver_api *api =
    162e:	4807      	ldr	r0, [pc, #28]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    1630:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1632:	691b      	ldr	r3, [r3, #16]
    1634:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1638:	4798      	blx	r3
    163a:	e733      	b.n	14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>
    163c:	0000d428 	.word	0x0000d428
    1640:	0000d730 	.word	0x0000d730
    1644:	0000d4bc 	.word	0x0000d4bc
    1648:	0000d770 	.word	0x0000d770
    164c:	0000d110 	.word	0x0000d110
    1650:	0000d8fc 	.word	0x0000d8fc

00001654 <button_pressed>:
{
    1654:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_config *const cfg =
    1656:	4bac      	ldr	r3, [pc, #688]	; (1908 <button_pressed+0x2b4>)
    1658:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    165a:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    165c:	6813      	ldr	r3, [r2, #0]
    165e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1662:	f000 8083 	beq.w	176c <button_pressed+0x118>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1666:	6823      	ldr	r3, [r4, #0]
    1668:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    166c:	f040 808f 	bne.w	178e <button_pressed+0x13a>
    1670:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
    1672:	4ba5      	ldr	r3, [pc, #660]	; (1908 <button_pressed+0x2b4>)
    1674:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1676:	681b      	ldr	r3, [r3, #0]
    1678:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    167c:	f000 8089 	beq.w	1792 <button_pressed+0x13e>
	if (value != 0)	{
    1680:	2c00      	cmp	r4, #0
    1682:	f000 8097 	beq.w	17b4 <button_pressed+0x160>
	const struct gpio_driver_api *api =
    1686:	48a0      	ldr	r0, [pc, #640]	; (1908 <button_pressed+0x2b4>)
    1688:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    168a:	68db      	ldr	r3, [r3, #12]
    168c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1690:	4798      	blx	r3
    if (ret < 0)
    1692:	2800      	cmp	r0, #0
    1694:	f2c0 8095 	blt.w	17c2 <button_pressed+0x16e>
	const struct gpio_driver_config *const cfg =
    1698:	4b9b      	ldr	r3, [pc, #620]	; (1908 <button_pressed+0x2b4>)
    169a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    169c:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    169e:	6813      	ldr	r3, [r2, #0]
    16a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    16a4:	f000 8091 	beq.w	17ca <button_pressed+0x176>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    16a8:	6823      	ldr	r3, [r4, #0]
    16aa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    16ae:	f040 809d 	bne.w	17ec <button_pressed+0x198>
    16b2:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
    16b4:	4b94      	ldr	r3, [pc, #592]	; (1908 <button_pressed+0x2b4>)
    16b6:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16b8:	681b      	ldr	r3, [r3, #0]
    16ba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    16be:	f000 8097 	beq.w	17f0 <button_pressed+0x19c>
	if (value != 0)	{
    16c2:	2c00      	cmp	r4, #0
    16c4:	f000 80a5 	beq.w	1812 <button_pressed+0x1be>
	const struct gpio_driver_api *api =
    16c8:	488f      	ldr	r0, [pc, #572]	; (1908 <button_pressed+0x2b4>)
    16ca:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    16cc:	68db      	ldr	r3, [r3, #12]
    16ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    16d2:	4798      	blx	r3
    if (ret < 0)
    16d4:	2800      	cmp	r0, #0
    16d6:	f2c0 80a3 	blt.w	1820 <button_pressed+0x1cc>
	const struct gpio_driver_config *const cfg =
    16da:	4b8b      	ldr	r3, [pc, #556]	; (1908 <button_pressed+0x2b4>)
    16dc:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    16de:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16e0:	6813      	ldr	r3, [r2, #0]
    16e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    16e6:	f000 809f 	beq.w	1828 <button_pressed+0x1d4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    16ea:	6823      	ldr	r3, [r4, #0]
    16ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    16f0:	f040 80ab 	bne.w	184a <button_pressed+0x1f6>
    16f4:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
    16f6:	4b84      	ldr	r3, [pc, #528]	; (1908 <button_pressed+0x2b4>)
    16f8:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1700:	f000 80a5 	beq.w	184e <button_pressed+0x1fa>
	if (value != 0)	{
    1704:	2c00      	cmp	r4, #0
    1706:	f000 80b3 	beq.w	1870 <button_pressed+0x21c>
	const struct gpio_driver_api *api =
    170a:	487f      	ldr	r0, [pc, #508]	; (1908 <button_pressed+0x2b4>)
    170c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    170e:	68db      	ldr	r3, [r3, #12]
    1710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1714:	4798      	blx	r3
    if (ret < 0)
    1716:	2800      	cmp	r0, #0
    1718:	f2c0 80b1 	blt.w	187e <button_pressed+0x22a>
	const struct gpio_driver_config *const cfg =
    171c:	4b7a      	ldr	r3, [pc, #488]	; (1908 <button_pressed+0x2b4>)
    171e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1720:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1722:	6813      	ldr	r3, [r2, #0]
    1724:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1728:	f000 80ad 	beq.w	1886 <button_pressed+0x232>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    172c:	6823      	ldr	r3, [r4, #0]
    172e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1732:	f040 80b9 	bne.w	18a8 <button_pressed+0x254>
    1736:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
    1738:	4b73      	ldr	r3, [pc, #460]	; (1908 <button_pressed+0x2b4>)
    173a:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1742:	f000 80b3 	beq.w	18ac <button_pressed+0x258>
	if (value != 0)	{
    1746:	2c00      	cmp	r4, #0
    1748:	f000 80c1 	beq.w	18ce <button_pressed+0x27a>
	const struct gpio_driver_api *api =
    174c:	486e      	ldr	r0, [pc, #440]	; (1908 <button_pressed+0x2b4>)
    174e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1750:	68db      	ldr	r3, [r3, #12]
    1752:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1756:	4798      	blx	r3
    if (ret < 0)
    1758:	2800      	cmp	r0, #0
    175a:	f2c0 80bf 	blt.w	18dc <button_pressed+0x288>
	return z_impl_k_sleep(timeout);
    175e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1762:	2100      	movs	r1, #0
    1764:	f009 fb30 	bl	adc8 <z_impl_k_sleep>
    for (size_t i = 0; i < 10; i++)
    1768:	2500      	movs	r5, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    176a:	e107      	b.n	197c <button_pressed+0x328>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    176c:	4d67      	ldr	r5, [pc, #412]	; (190c <button_pressed+0x2b8>)
    176e:	f240 4392 	movw	r3, #1170	; 0x492
    1772:	462a      	mov	r2, r5
    1774:	4966      	ldr	r1, [pc, #408]	; (1910 <button_pressed+0x2bc>)
    1776:	4867      	ldr	r0, [pc, #412]	; (1914 <button_pressed+0x2c0>)
    1778:	f00a fcc6 	bl	c108 <assert_print>
    177c:	4866      	ldr	r0, [pc, #408]	; (1918 <button_pressed+0x2c4>)
    177e:	f00a fcc3 	bl	c108 <assert_print>
    1782:	f240 4192 	movw	r1, #1170	; 0x492
    1786:	4628      	mov	r0, r5
    1788:	f00a fcb7 	bl	c0fa <assert_post_action>
    178c:	e76b      	b.n	1666 <button_pressed+0x12>
		value = (value != 0) ? 0 : 1;
    178e:	2401      	movs	r4, #1
    1790:	e76f      	b.n	1672 <button_pressed+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1792:	4d5e      	ldr	r5, [pc, #376]	; (190c <button_pressed+0x2b8>)
    1794:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1798:	462a      	mov	r2, r5
    179a:	495d      	ldr	r1, [pc, #372]	; (1910 <button_pressed+0x2bc>)
    179c:	485d      	ldr	r0, [pc, #372]	; (1914 <button_pressed+0x2c0>)
    179e:	f00a fcb3 	bl	c108 <assert_print>
    17a2:	485d      	ldr	r0, [pc, #372]	; (1918 <button_pressed+0x2c4>)
    17a4:	f00a fcb0 	bl	c108 <assert_print>
    17a8:	f44f 618d 	mov.w	r1, #1128	; 0x468
    17ac:	4628      	mov	r0, r5
    17ae:	f00a fca4 	bl	c0fa <assert_post_action>
    17b2:	e765      	b.n	1680 <button_pressed+0x2c>
	const struct gpio_driver_api *api =
    17b4:	4854      	ldr	r0, [pc, #336]	; (1908 <button_pressed+0x2b4>)
    17b6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    17b8:	691b      	ldr	r3, [r3, #16]
    17ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    17be:	4798      	blx	r3
    17c0:	e767      	b.n	1692 <button_pressed+0x3e>
        printk("SETTING LED VALUE FAILED");
    17c2:	4856      	ldr	r0, [pc, #344]	; (191c <button_pressed+0x2c8>)
    17c4:	f00a fb1b 	bl	bdfe <printk>
    17c8:	e766      	b.n	1698 <button_pressed+0x44>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17ca:	4d50      	ldr	r5, [pc, #320]	; (190c <button_pressed+0x2b8>)
    17cc:	f240 4392 	movw	r3, #1170	; 0x492
    17d0:	462a      	mov	r2, r5
    17d2:	494f      	ldr	r1, [pc, #316]	; (1910 <button_pressed+0x2bc>)
    17d4:	484f      	ldr	r0, [pc, #316]	; (1914 <button_pressed+0x2c0>)
    17d6:	f00a fc97 	bl	c108 <assert_print>
    17da:	484f      	ldr	r0, [pc, #316]	; (1918 <button_pressed+0x2c4>)
    17dc:	f00a fc94 	bl	c108 <assert_print>
    17e0:	f240 4192 	movw	r1, #1170	; 0x492
    17e4:	4628      	mov	r0, r5
    17e6:	f00a fc88 	bl	c0fa <assert_post_action>
    17ea:	e75d      	b.n	16a8 <button_pressed+0x54>
		value = (value != 0) ? 0 : 1;
    17ec:	2401      	movs	r4, #1
    17ee:	e761      	b.n	16b4 <button_pressed+0x60>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17f0:	4d46      	ldr	r5, [pc, #280]	; (190c <button_pressed+0x2b8>)
    17f2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    17f6:	462a      	mov	r2, r5
    17f8:	4945      	ldr	r1, [pc, #276]	; (1910 <button_pressed+0x2bc>)
    17fa:	4846      	ldr	r0, [pc, #280]	; (1914 <button_pressed+0x2c0>)
    17fc:	f00a fc84 	bl	c108 <assert_print>
    1800:	4845      	ldr	r0, [pc, #276]	; (1918 <button_pressed+0x2c4>)
    1802:	f00a fc81 	bl	c108 <assert_print>
    1806:	f44f 618d 	mov.w	r1, #1128	; 0x468
    180a:	4628      	mov	r0, r5
    180c:	f00a fc75 	bl	c0fa <assert_post_action>
    1810:	e757      	b.n	16c2 <button_pressed+0x6e>
	const struct gpio_driver_api *api =
    1812:	483d      	ldr	r0, [pc, #244]	; (1908 <button_pressed+0x2b4>)
    1814:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1816:	691b      	ldr	r3, [r3, #16]
    1818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    181c:	4798      	blx	r3
    181e:	e759      	b.n	16d4 <button_pressed+0x80>
        printk("SETTING LED VALUE FAILED");
    1820:	483e      	ldr	r0, [pc, #248]	; (191c <button_pressed+0x2c8>)
    1822:	f00a faec 	bl	bdfe <printk>
    1826:	e758      	b.n	16da <button_pressed+0x86>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1828:	4d38      	ldr	r5, [pc, #224]	; (190c <button_pressed+0x2b8>)
    182a:	f240 4392 	movw	r3, #1170	; 0x492
    182e:	462a      	mov	r2, r5
    1830:	4937      	ldr	r1, [pc, #220]	; (1910 <button_pressed+0x2bc>)
    1832:	4838      	ldr	r0, [pc, #224]	; (1914 <button_pressed+0x2c0>)
    1834:	f00a fc68 	bl	c108 <assert_print>
    1838:	4837      	ldr	r0, [pc, #220]	; (1918 <button_pressed+0x2c4>)
    183a:	f00a fc65 	bl	c108 <assert_print>
    183e:	f240 4192 	movw	r1, #1170	; 0x492
    1842:	4628      	mov	r0, r5
    1844:	f00a fc59 	bl	c0fa <assert_post_action>
    1848:	e74f      	b.n	16ea <button_pressed+0x96>
		value = (value != 0) ? 0 : 1;
    184a:	2401      	movs	r4, #1
    184c:	e753      	b.n	16f6 <button_pressed+0xa2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    184e:	4d2f      	ldr	r5, [pc, #188]	; (190c <button_pressed+0x2b8>)
    1850:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1854:	462a      	mov	r2, r5
    1856:	492e      	ldr	r1, [pc, #184]	; (1910 <button_pressed+0x2bc>)
    1858:	482e      	ldr	r0, [pc, #184]	; (1914 <button_pressed+0x2c0>)
    185a:	f00a fc55 	bl	c108 <assert_print>
    185e:	482e      	ldr	r0, [pc, #184]	; (1918 <button_pressed+0x2c4>)
    1860:	f00a fc52 	bl	c108 <assert_print>
    1864:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1868:	4628      	mov	r0, r5
    186a:	f00a fc46 	bl	c0fa <assert_post_action>
    186e:	e749      	b.n	1704 <button_pressed+0xb0>
	const struct gpio_driver_api *api =
    1870:	4825      	ldr	r0, [pc, #148]	; (1908 <button_pressed+0x2b4>)
    1872:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1874:	691b      	ldr	r3, [r3, #16]
    1876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    187a:	4798      	blx	r3
    187c:	e74b      	b.n	1716 <button_pressed+0xc2>
        printk("SETTING LED VALUE FAILED");
    187e:	4827      	ldr	r0, [pc, #156]	; (191c <button_pressed+0x2c8>)
    1880:	f00a fabd 	bl	bdfe <printk>
    1884:	e74a      	b.n	171c <button_pressed+0xc8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1886:	4d21      	ldr	r5, [pc, #132]	; (190c <button_pressed+0x2b8>)
    1888:	f240 4392 	movw	r3, #1170	; 0x492
    188c:	462a      	mov	r2, r5
    188e:	4920      	ldr	r1, [pc, #128]	; (1910 <button_pressed+0x2bc>)
    1890:	4820      	ldr	r0, [pc, #128]	; (1914 <button_pressed+0x2c0>)
    1892:	f00a fc39 	bl	c108 <assert_print>
    1896:	4820      	ldr	r0, [pc, #128]	; (1918 <button_pressed+0x2c4>)
    1898:	f00a fc36 	bl	c108 <assert_print>
    189c:	f240 4192 	movw	r1, #1170	; 0x492
    18a0:	4628      	mov	r0, r5
    18a2:	f00a fc2a 	bl	c0fa <assert_post_action>
    18a6:	e741      	b.n	172c <button_pressed+0xd8>
		value = (value != 0) ? 0 : 1;
    18a8:	2401      	movs	r4, #1
    18aa:	e745      	b.n	1738 <button_pressed+0xe4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18ac:	4d17      	ldr	r5, [pc, #92]	; (190c <button_pressed+0x2b8>)
    18ae:	f44f 638d 	mov.w	r3, #1128	; 0x468
    18b2:	462a      	mov	r2, r5
    18b4:	4916      	ldr	r1, [pc, #88]	; (1910 <button_pressed+0x2bc>)
    18b6:	4817      	ldr	r0, [pc, #92]	; (1914 <button_pressed+0x2c0>)
    18b8:	f00a fc26 	bl	c108 <assert_print>
    18bc:	4816      	ldr	r0, [pc, #88]	; (1918 <button_pressed+0x2c4>)
    18be:	f00a fc23 	bl	c108 <assert_print>
    18c2:	f44f 618d 	mov.w	r1, #1128	; 0x468
    18c6:	4628      	mov	r0, r5
    18c8:	f00a fc17 	bl	c0fa <assert_post_action>
    18cc:	e73b      	b.n	1746 <button_pressed+0xf2>
	const struct gpio_driver_api *api =
    18ce:	480e      	ldr	r0, [pc, #56]	; (1908 <button_pressed+0x2b4>)
    18d0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    18d2:	691b      	ldr	r3, [r3, #16]
    18d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    18d8:	4798      	blx	r3
    18da:	e73d      	b.n	1758 <button_pressed+0x104>
        printk("SETTING LED VALUE FAILED");
    18dc:	480f      	ldr	r0, [pc, #60]	; (191c <button_pressed+0x2c8>)
    18de:	f00a fa8e 	bl	bdfe <printk>
    18e2:	e73c      	b.n	175e <button_pressed+0x10a>
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18e4:	4c09      	ldr	r4, [pc, #36]	; (190c <button_pressed+0x2b8>)
    18e6:	f240 43bc 	movw	r3, #1212	; 0x4bc
    18ea:	4622      	mov	r2, r4
    18ec:	4908      	ldr	r1, [pc, #32]	; (1910 <button_pressed+0x2bc>)
    18ee:	4809      	ldr	r0, [pc, #36]	; (1914 <button_pressed+0x2c0>)
    18f0:	f00a fc0a 	bl	c108 <assert_print>
    18f4:	4808      	ldr	r0, [pc, #32]	; (1918 <button_pressed+0x2c4>)
    18f6:	f00a fc07 	bl	c108 <assert_print>
    18fa:	f240 41bc 	movw	r1, #1212	; 0x4bc
    18fe:	4620      	mov	r0, r4
    1900:	f00a fbfb 	bl	c0fa <assert_post_action>
    1904:	e042      	b.n	198c <button_pressed+0x338>
    1906:	bf00      	nop
    1908:	0000d110 	.word	0x0000d110
    190c:	0000d428 	.word	0x0000d428
    1910:	0000d730 	.word	0x0000d730
    1914:	0000d4bc 	.word	0x0000d4bc
    1918:	0000d770 	.word	0x0000d770
    191c:	0000d8fc 	.word	0x0000d8fc
    1920:	4c35      	ldr	r4, [pc, #212]	; (19f8 <button_pressed+0x3a4>)
    1922:	f240 43bc 	movw	r3, #1212	; 0x4bc
    1926:	4622      	mov	r2, r4
    1928:	4934      	ldr	r1, [pc, #208]	; (19fc <button_pressed+0x3a8>)
    192a:	4835      	ldr	r0, [pc, #212]	; (1a00 <button_pressed+0x3ac>)
    192c:	f00a fbec 	bl	c108 <assert_print>
    1930:	4834      	ldr	r0, [pc, #208]	; (1a04 <button_pressed+0x3b0>)
    1932:	f00a fbe9 	bl	c108 <assert_print>
    1936:	f240 41bc 	movw	r1, #1212	; 0x4bc
    193a:	4620      	mov	r0, r4
    193c:	f00a fbdd 	bl	c0fa <assert_post_action>
    1940:	e030      	b.n	19a4 <button_pressed+0x350>
    1942:	4c2d      	ldr	r4, [pc, #180]	; (19f8 <button_pressed+0x3a4>)
    1944:	f240 43bc 	movw	r3, #1212	; 0x4bc
    1948:	4622      	mov	r2, r4
    194a:	492c      	ldr	r1, [pc, #176]	; (19fc <button_pressed+0x3a8>)
    194c:	482c      	ldr	r0, [pc, #176]	; (1a00 <button_pressed+0x3ac>)
    194e:	f00a fbdb 	bl	c108 <assert_print>
    1952:	482c      	ldr	r0, [pc, #176]	; (1a04 <button_pressed+0x3b0>)
    1954:	f00a fbd8 	bl	c108 <assert_print>
    1958:	f240 41bc 	movw	r1, #1212	; 0x4bc
    195c:	4620      	mov	r0, r4
    195e:	f00a fbcc 	bl	c0fa <assert_post_action>
    1962:	e02b      	b.n	19bc <button_pressed+0x368>
	const struct gpio_driver_api *api =
    1964:	4828      	ldr	r0, [pc, #160]	; (1a08 <button_pressed+0x3b4>)
    1966:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    1968:	695b      	ldr	r3, [r3, #20]
    196a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    196e:	4798      	blx	r3
    1970:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1974:	2100      	movs	r1, #0
    1976:	f009 fa27 	bl	adc8 <z_impl_k_sleep>
    for (size_t i = 0; i < 10; i++)
    197a:	3501      	adds	r5, #1
    197c:	2d09      	cmp	r5, #9
    197e:	d83a      	bhi.n	19f6 <button_pressed+0x3a2>
	const struct gpio_driver_config *const cfg =
    1980:	4b21      	ldr	r3, [pc, #132]	; (1a08 <button_pressed+0x3b4>)
    1982:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    198a:	d0ab      	beq.n	18e4 <button_pressed+0x290>
	const struct gpio_driver_api *api =
    198c:	4c1e      	ldr	r4, [pc, #120]	; (1a08 <button_pressed+0x3b4>)
    198e:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
    1990:	695b      	ldr	r3, [r3, #20]
    1992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1996:	4620      	mov	r0, r4
    1998:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
    199a:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    199c:	681b      	ldr	r3, [r3, #0]
    199e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    19a2:	d0bd      	beq.n	1920 <button_pressed+0x2cc>
	const struct gpio_driver_api *api =
    19a4:	4c18      	ldr	r4, [pc, #96]	; (1a08 <button_pressed+0x3b4>)
    19a6:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
    19a8:	695b      	ldr	r3, [r3, #20]
    19aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    19ae:	4620      	mov	r0, r4
    19b0:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
    19b2:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19b4:	681b      	ldr	r3, [r3, #0]
    19b6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    19ba:	d0c2      	beq.n	1942 <button_pressed+0x2ee>
	const struct gpio_driver_api *api =
    19bc:	4c12      	ldr	r4, [pc, #72]	; (1a08 <button_pressed+0x3b4>)
    19be:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
    19c0:	695b      	ldr	r3, [r3, #20]
    19c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    19c6:	4620      	mov	r0, r4
    19c8:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
    19ca:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    19d2:	d1c7      	bne.n	1964 <button_pressed+0x310>
    19d4:	4c08      	ldr	r4, [pc, #32]	; (19f8 <button_pressed+0x3a4>)
    19d6:	f240 43bc 	movw	r3, #1212	; 0x4bc
    19da:	4622      	mov	r2, r4
    19dc:	4907      	ldr	r1, [pc, #28]	; (19fc <button_pressed+0x3a8>)
    19de:	4808      	ldr	r0, [pc, #32]	; (1a00 <button_pressed+0x3ac>)
    19e0:	f00a fb92 	bl	c108 <assert_print>
    19e4:	4807      	ldr	r0, [pc, #28]	; (1a04 <button_pressed+0x3b0>)
    19e6:	f00a fb8f 	bl	c108 <assert_print>
    19ea:	f240 41bc 	movw	r1, #1212	; 0x4bc
    19ee:	4620      	mov	r0, r4
    19f0:	f00a fb83 	bl	c0fa <assert_post_action>
    19f4:	e7b6      	b.n	1964 <button_pressed+0x310>
}
    19f6:	bd38      	pop	{r3, r4, r5, pc}
    19f8:	0000d428 	.word	0x0000d428
    19fc:	0000d730 	.word	0x0000d730
    1a00:	0000d4bc 	.word	0x0000d4bc
    1a04:	0000d770 	.word	0x0000d770
    1a08:	0000d110 	.word	0x0000d110

00001a0c <main>:
{
    1a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a10:	b088      	sub	sp, #32
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1a12:	4874      	ldr	r0, [pc, #464]	; (1be4 <main+0x1d8>)
    1a14:	f00b fa08 	bl	ce28 <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1a18:	b118      	cbz	r0, 1a22 <main+0x16>
    1a1a:	4872      	ldr	r0, [pc, #456]	; (1be4 <main+0x1d8>)
    1a1c:	f00b fa04 	bl	ce28 <z_device_is_ready>
    1a20:	b928      	cbnz	r0, 1a2e <main+0x22>
        printk("Error: leds are not ready\n");
    1a22:	4871      	ldr	r0, [pc, #452]	; (1be8 <main+0x1dc>)
    1a24:	f00a f9eb 	bl	bdfe <printk>
}
    1a28:	b008      	add	sp, #32
    1a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a2e:	486d      	ldr	r0, [pc, #436]	; (1be4 <main+0x1d8>)
    1a30:	f00b f9fa 	bl	ce28 <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1a34:	2800      	cmp	r0, #0
    1a36:	d0f4      	beq.n	1a22 <main+0x16>
    1a38:	486a      	ldr	r0, [pc, #424]	; (1be4 <main+0x1d8>)
    1a3a:	f00b f9f5 	bl	ce28 <z_device_is_ready>
    1a3e:	2800      	cmp	r0, #0
    1a40:	d0ef      	beq.n	1a22 <main+0x16>
    1a42:	4868      	ldr	r0, [pc, #416]	; (1be4 <main+0x1d8>)
    1a44:	f00b f9f0 	bl	ce28 <z_device_is_ready>
    if (!device_is_ready(button.port))
    1a48:	2800      	cmp	r0, #0
    1a4a:	f000 80a1 	beq.w	1b90 <main+0x184>
    ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_INACTIVE);
    1a4e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a52:	4866      	ldr	r0, [pc, #408]	; (1bec <main+0x1e0>)
    1a54:	f00a f95d 	bl	bd12 <gpio_pin_configure_dt>
    if (ret < 0)
    1a58:	2800      	cmp	r0, #0
    1a5a:	dbe5      	blt.n	1a28 <main+0x1c>
    ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_INACTIVE);
    1a5c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a60:	4863      	ldr	r0, [pc, #396]	; (1bf0 <main+0x1e4>)
    1a62:	f00a f956 	bl	bd12 <gpio_pin_configure_dt>
    if (ret < 0)
    1a66:	2800      	cmp	r0, #0
    1a68:	dbde      	blt.n	1a28 <main+0x1c>
    ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_INACTIVE);
    1a6a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a6e:	4861      	ldr	r0, [pc, #388]	; (1bf4 <main+0x1e8>)
    1a70:	f00a f94f 	bl	bd12 <gpio_pin_configure_dt>
    if (ret < 0)
    1a74:	2800      	cmp	r0, #0
    1a76:	dbd7      	blt.n	1a28 <main+0x1c>
    ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_INACTIVE);
    1a78:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a7c:	485e      	ldr	r0, [pc, #376]	; (1bf8 <main+0x1ec>)
    1a7e:	f00a f948 	bl	bd12 <gpio_pin_configure_dt>
    if (ret < 0)
    1a82:	2800      	cmp	r0, #0
    1a84:	dbd0      	blt.n	1a28 <main+0x1c>
    ret = gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_PULL_UP);
    1a86:	495d      	ldr	r1, [pc, #372]	; (1bfc <main+0x1f0>)
    1a88:	485d      	ldr	r0, [pc, #372]	; (1c00 <main+0x1f4>)
    1a8a:	f00a f942 	bl	bd12 <gpio_pin_configure_dt>
    if (ret < 0)
    1a8e:	1e01      	subs	r1, r0, #0
    1a90:	f2c0 8084 	blt.w	1b9c <main+0x190>
	const struct gpio_driver_api *api =
    1a94:	4b53      	ldr	r3, [pc, #332]	; (1be4 <main+0x1d8>)
    1a96:	689c      	ldr	r4, [r3, #8]
	const struct gpio_driver_config *const cfg =
    1a98:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1a9a:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1a9c:	6813      	ldr	r3, [r2, #0]
    1a9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1aa2:	d07f      	beq.n	1ba4 <main+0x198>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1aa4:	682b      	ldr	r3, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1aa6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1aaa:	f040 808c 	bne.w	1bc6 <main+0x1ba>
    1aae:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1ab2:	69a4      	ldr	r4, [r4, #24]
    1ab4:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    1ab8:	f002 72a0 	and.w	r2, r2, #20971520	; 0x1400000
    1abc:	210b      	movs	r1, #11
    1abe:	4849      	ldr	r0, [pc, #292]	; (1be4 <main+0x1d8>)
    1ac0:	47a0      	blx	r4
    if (ret < 0)
    1ac2:	1e01      	subs	r1, r0, #0
    1ac4:	f2c0 8082 	blt.w	1bcc <main+0x1c0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1ac8:	4b4e      	ldr	r3, [pc, #312]	; (1c04 <main+0x1f8>)
    1aca:	4a4f      	ldr	r2, [pc, #316]	; (1c08 <main+0x1fc>)
    1acc:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    1ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1ad2:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
    1ad4:	4b43      	ldr	r3, [pc, #268]	; (1be4 <main+0x1d8>)
    1ad6:	689b      	ldr	r3, [r3, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1ad8:	69db      	ldr	r3, [r3, #28]
    1ada:	b11b      	cbz	r3, 1ae4 <main+0xd8>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1adc:	2201      	movs	r2, #1
    1ade:	4949      	ldr	r1, [pc, #292]	; (1c04 <main+0x1f8>)
    1ae0:	4840      	ldr	r0, [pc, #256]	; (1be4 <main+0x1d8>)
    1ae2:	4798      	blx	r3
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1ae4:	4849      	ldr	r0, [pc, #292]	; (1c0c <main+0x200>)
    1ae6:	f006 ff79 	bl	89dc <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
    1aea:	4b49      	ldr	r3, [pc, #292]	; (1c10 <main+0x204>)
    1aec:	6018      	str	r0, [r3, #0]
    if (!adc_dev)
    1aee:	2800      	cmp	r0, #0
    1af0:	d070      	beq.n	1bd4 <main+0x1c8>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    1af2:	4b47      	ldr	r3, [pc, #284]	; (1c10 <main+0x204>)
    1af4:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
    1af6:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	4946      	ldr	r1, [pc, #280]	; (1c14 <main+0x208>)
    1afc:	4798      	blx	r3
    if (err)
    1afe:	4601      	mov	r1, r0
    1b00:	2800      	cmp	r0, #0
    1b02:	d16b      	bne.n	1bdc <main+0x1d0>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    1b04:	2501      	movs	r5, #1
    1b06:	4b44      	ldr	r3, [pc, #272]	; (1c18 <main+0x20c>)
    1b08:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    1b0a:	4844      	ldr	r0, [pc, #272]	; (1c1c <main+0x210>)
    1b0c:	f003 fb8c 	bl	5228 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1b10:	462a      	mov	r2, r5
    1b12:	2100      	movs	r1, #0
    1b14:	4842      	ldr	r0, [pc, #264]	; (1c20 <main+0x214>)
    1b16:	f00b fa1d 	bl	cf54 <z_impl_k_sem_init>
    1b1a:	462a      	mov	r2, r5
    1b1c:	2100      	movs	r1, #0
    1b1e:	4841      	ldr	r0, [pc, #260]	; (1c24 <main+0x218>)
    1b20:	f00b fa18 	bl	cf54 <z_impl_k_sem_init>
                                        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
    1b24:	2600      	movs	r6, #0
    1b26:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1b28:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b2c:	2400      	movs	r4, #0
    1b2e:	9404      	str	r4, [sp, #16]
    1b30:	9503      	str	r5, [sp, #12]
    1b32:	9402      	str	r4, [sp, #8]
    1b34:	9401      	str	r4, [sp, #4]
    1b36:	9400      	str	r4, [sp, #0]
    1b38:	4b3b      	ldr	r3, [pc, #236]	; (1c28 <main+0x21c>)
    1b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b3e:	493b      	ldr	r1, [pc, #236]	; (1c2c <main+0x220>)
    1b40:	483b      	ldr	r0, [pc, #236]	; (1c30 <main+0x224>)
    1b42:	f007 fb75 	bl	9230 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
    1b46:	4b3b      	ldr	r3, [pc, #236]	; (1c34 <main+0x228>)
    1b48:	6018      	str	r0, [r3, #0]
    1b4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b4e:	9404      	str	r4, [sp, #16]
    1b50:	9503      	str	r5, [sp, #12]
    1b52:	9402      	str	r4, [sp, #8]
    1b54:	9401      	str	r4, [sp, #4]
    1b56:	9400      	str	r4, [sp, #0]
    1b58:	4b37      	ldr	r3, [pc, #220]	; (1c38 <main+0x22c>)
    1b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b5e:	4937      	ldr	r1, [pc, #220]	; (1c3c <main+0x230>)
    1b60:	4837      	ldr	r0, [pc, #220]	; (1c40 <main+0x234>)
    1b62:	f007 fb65 	bl	9230 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
    1b66:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1c44 <main+0x238>
    1b6a:	f8c8 0000 	str.w	r0, [r8]
    1b6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b72:	9404      	str	r4, [sp, #16]
    1b74:	9503      	str	r5, [sp, #12]
    1b76:	9402      	str	r4, [sp, #8]
    1b78:	9401      	str	r4, [sp, #4]
    1b7a:	9400      	str	r4, [sp, #0]
    1b7c:	4b32      	ldr	r3, [pc, #200]	; (1c48 <main+0x23c>)
    1b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b82:	4932      	ldr	r1, [pc, #200]	; (1c4c <main+0x240>)
    1b84:	4832      	ldr	r0, [pc, #200]	; (1c50 <main+0x244>)
    1b86:	f007 fb53 	bl	9230 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_output_data, thread_output_stack,
    1b8a:	f8c8 0000 	str.w	r0, [r8]
    return;
    1b8e:	e74b      	b.n	1a28 <main+0x1c>
        printk("Error: button device %s is not ready\n", button.port->name);
    1b90:	4b14      	ldr	r3, [pc, #80]	; (1be4 <main+0x1d8>)
    1b92:	6819      	ldr	r1, [r3, #0]
    1b94:	482f      	ldr	r0, [pc, #188]	; (1c54 <main+0x248>)
    1b96:	f00a f932 	bl	bdfe <printk>
        return;
    1b9a:	e745      	b.n	1a28 <main+0x1c>
        printk("Error: gpio_pin_configure_dt failed for button, error:%d", ret);
    1b9c:	482e      	ldr	r0, [pc, #184]	; (1c58 <main+0x24c>)
    1b9e:	f00a f92e 	bl	bdfe <printk>
        return;
    1ba2:	e741      	b.n	1a28 <main+0x1c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1ba4:	4e2d      	ldr	r6, [pc, #180]	; (1c5c <main+0x250>)
    1ba6:	f240 2375 	movw	r3, #629	; 0x275
    1baa:	4632      	mov	r2, r6
    1bac:	492c      	ldr	r1, [pc, #176]	; (1c60 <main+0x254>)
    1bae:	482d      	ldr	r0, [pc, #180]	; (1c64 <main+0x258>)
    1bb0:	f00a faaa 	bl	c108 <assert_print>
    1bb4:	482c      	ldr	r0, [pc, #176]	; (1c68 <main+0x25c>)
    1bb6:	f00a faa7 	bl	c108 <assert_print>
    1bba:	f240 2175 	movw	r1, #629	; 0x275
    1bbe:	4630      	mov	r0, r6
    1bc0:	f00a fa9b 	bl	c0fa <assert_post_action>
    1bc4:	e76e      	b.n	1aa4 <main+0x98>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    1bc6:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
    1bca:	e772      	b.n	1ab2 <main+0xa6>
        printk("Error: gpio_pin_interrupt_configure_dt failed for button, error:%d", ret);
    1bcc:	4827      	ldr	r0, [pc, #156]	; (1c6c <main+0x260>)
    1bce:	f00a f916 	bl	bdfe <printk>
        return;
    1bd2:	e729      	b.n	1a28 <main+0x1c>
        printk("ADC device_get_binding() failed\n");
    1bd4:	4826      	ldr	r0, [pc, #152]	; (1c70 <main+0x264>)
    1bd6:	f00a f912 	bl	bdfe <printk>
    1bda:	e78a      	b.n	1af2 <main+0xe6>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1bdc:	4825      	ldr	r0, [pc, #148]	; (1c74 <main+0x268>)
    1bde:	f00a f90e 	bl	bdfe <printk>
    1be2:	e78f      	b.n	1b04 <main+0xf8>
    1be4:	0000d110 	.word	0x0000d110
    1be8:	0000d918 	.word	0x0000d918
    1bec:	0000db50 	.word	0x0000db50
    1bf0:	0000db58 	.word	0x0000db58
    1bf4:	0000db60 	.word	0x0000db60
    1bf8:	0000db68 	.word	0x0000db68
    1bfc:	00010010 	.word	0x00010010
    1c00:	0000db48 	.word	0x0000db48
    1c04:	20000600 	.word	0x20000600
    1c08:	00001655 	.word	0x00001655
    1c0c:	0000d9dc 	.word	0x0000d9dc
    1c10:	200005f8 	.word	0x200005f8
    1c14:	0000db70 	.word	0x0000db70
    1c18:	40007000 	.word	0x40007000
    1c1c:	0000da38 	.word	0x0000da38
    1c20:	2000060c 	.word	0x2000060c
    1c24:	2000061c 	.word	0x2000061c
    1c28:	000009c5 	.word	0x000009c5
    1c2c:	200013a0 	.word	0x200013a0
    1c30:	200003c0 	.word	0x200003c0
    1c34:	20000630 	.word	0x20000630
    1c38:	00001c79 	.word	0x00001c79
    1c3c:	200017c0 	.word	0x200017c0
    1c40:	20000310 	.word	0x20000310
    1c44:	2000062c 	.word	0x2000062c
    1c48:	00000b4d 	.word	0x00000b4d
    1c4c:	20001be0 	.word	0x20001be0
    1c50:	20000260 	.word	0x20000260
    1c54:	0000d934 	.word	0x0000d934
    1c58:	0000d95c 	.word	0x0000d95c
    1c5c:	0000d428 	.word	0x0000d428
    1c60:	0000d730 	.word	0x0000d730
    1c64:	0000d4bc 	.word	0x0000d4bc
    1c68:	0000d770 	.word	0x0000d770
    1c6c:	0000d998 	.word	0x0000d998
    1c70:	0000d9e4 	.word	0x0000d9e4
    1c74:	0000da08 	.word	0x0000da08

00001c78 <thread_processing_code>:
{
    1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7a:	b08f      	sub	sp, #60	; 0x3c
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    1c7c:	2500      	movs	r5, #0
    1c7e:	9509      	str	r5, [sp, #36]	; 0x24
    1c80:	950a      	str	r5, [sp, #40]	; 0x28
    1c82:	950b      	str	r5, [sp, #44]	; 0x2c
    1c84:	950c      	str	r5, [sp, #48]	; 0x30
    1c86:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
    1c8a:	483b      	ldr	r0, [pc, #236]	; (1d78 <thread_processing_code+0x100>)
    1c8c:	f00a f8b7 	bl	bdfe <printk>
    int iterations = 0;
    1c90:	462c      	mov	r4, r5
    1c92:	e03d      	b.n	1d10 <thread_processing_code+0x98>
            uint16_t avg = precedentsAverage(precedents, current_read, 9);
    1c94:	2209      	movs	r2, #9
    1c96:	4631      	mov	r1, r6
    1c98:	a809      	add	r0, sp, #36	; 0x24
    1c9a:	f00a f845 	bl	bd28 <precedentsAverage>
    1c9e:	b287      	uxth	r7, r0
            bc = avg;
    1ca0:	4b36      	ldr	r3, [pc, #216]	; (1d7c <thread_processing_code+0x104>)
    1ca2:	801f      	strh	r7, [r3, #0]
	z_impl_k_sem_give(sem);
    1ca4:	4836      	ldr	r0, [pc, #216]	; (1d80 <thread_processing_code+0x108>)
    1ca6:	f007 fdaf 	bl	9808 <z_impl_k_sem_give>
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], current_read, avg);
    1caa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    1cae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    1cb2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    1cb6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1cba:	f8bd c032 	ldrh.w	ip, [sp, #50]	; 0x32
    1cbe:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
    1cc2:	9707      	str	r7, [sp, #28]
    1cc4:	9606      	str	r6, [sp, #24]
    1cc6:	f8cd e014 	str.w	lr, [sp, #20]
    1cca:	f8cd c010 	str.w	ip, [sp, #16]
    1cce:	9003      	str	r0, [sp, #12]
    1cd0:	9102      	str	r1, [sp, #8]
    1cd2:	9201      	str	r2, [sp, #4]
    1cd4:	9300      	str	r3, [sp, #0]
    1cd6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1cda:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    1cde:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    1ce2:	4828      	ldr	r0, [pc, #160]	; (1d84 <thread_processing_code+0x10c>)
    1ce4:	f00a f88b 	bl	bdfe <printk>
            precedents[iterations % 9] = current_read;
    1ce8:	4a27      	ldr	r2, [pc, #156]	; (1d88 <thread_processing_code+0x110>)
    1cea:	fb82 3204 	smull	r3, r2, r2, r4
    1cee:	17e3      	asrs	r3, r4, #31
    1cf0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    1cf4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1cf8:	1ae3      	subs	r3, r4, r3
    1cfa:	aa0e      	add	r2, sp, #56	; 0x38
    1cfc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1d00:	f823 6c14 	strh.w	r6, [r3, #-20]
        iterations++;
    1d04:	3401      	adds	r4, #1
        printk("Thread B set bc value to: %d \n", bc);
    1d06:	4b1d      	ldr	r3, [pc, #116]	; (1d7c <thread_processing_code+0x104>)
    1d08:	8819      	ldrh	r1, [r3, #0]
    1d0a:	4820      	ldr	r0, [pc, #128]	; (1d8c <thread_processing_code+0x114>)
    1d0c:	f00a f877 	bl	bdfe <printk>
	return z_impl_k_sem_take(sem, timeout);
    1d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d18:	481d      	ldr	r0, [pc, #116]	; (1d90 <thread_processing_code+0x118>)
    1d1a:	f007 fdb9 	bl	9890 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    1d1e:	3501      	adds	r5, #1
	return z_impl_k_uptime_ticks();
    1d20:	f00b f96e 	bl	d000 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    1d24:	4602      	mov	r2, r0
    1d26:	014b      	lsls	r3, r1, #5
    1d28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    1d2c:	0140      	lsls	r0, r0, #5
    1d2e:	1a80      	subs	r0, r0, r2
    1d30:	eb63 0301 	sbc.w	r3, r3, r1
    1d34:	009b      	lsls	r3, r3, #2
    1d36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    1d3a:	0080      	lsls	r0, r0, #2
    1d3c:	1880      	adds	r0, r0, r2
    1d3e:	eb43 0301 	adc.w	r3, r3, r1
    1d42:	00db      	lsls	r3, r3, #3
    1d44:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    1d48:	f3c0 3010 	ubfx	r0, r0, #12, #17
    1d4c:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    1d50:	0bdb      	lsrs	r3, r3, #15
    1d52:	4629      	mov	r1, r5
    1d54:	480f      	ldr	r0, [pc, #60]	; (1d94 <thread_processing_code+0x11c>)
    1d56:	f00a f852 	bl	bdfe <printk>
        printk("Task B read ab value: %d\n", ab);
    1d5a:	4e0f      	ldr	r6, [pc, #60]	; (1d98 <thread_processing_code+0x120>)
    1d5c:	8831      	ldrh	r1, [r6, #0]
    1d5e:	480f      	ldr	r0, [pc, #60]	; (1d9c <thread_processing_code+0x124>)
    1d60:	f00a f84d 	bl	bdfe <printk>
        current_read = ab;
    1d64:	8836      	ldrh	r6, [r6, #0]
        if (iterations > 8)
    1d66:	2c08      	cmp	r4, #8
    1d68:	dc94      	bgt.n	1c94 <thread_processing_code+0x1c>
            precedents[iterations] = current_read;
    1d6a:	ab0e      	add	r3, sp, #56	; 0x38
    1d6c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1d70:	f823 6c14 	strh.w	r6, [r3, #-20]
    1d74:	e7c6      	b.n	1d04 <thread_processing_code+0x8c>
    1d76:	bf00      	nop
    1d78:	0000da6c 	.word	0x0000da6c
    1d7c:	200001de 	.word	0x200001de
    1d80:	2000061c 	.word	0x2000061c
    1d84:	0000dafc 	.word	0x0000dafc
    1d88:	38e38e39 	.word	0x38e38e39
    1d8c:	0000db28 	.word	0x0000db28
    1d90:	2000060c 	.word	0x2000060c
    1d94:	0000daa8 	.word	0x0000daa8
    1d98:	200001dc 	.word	0x200001dc
    1d9c:	0000dae0 	.word	0x0000dae0

00001da0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da4:	b08d      	sub	sp, #52	; 0x34
    1da6:	9205      	str	r2, [sp, #20]
    1da8:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1daa:	4613      	mov	r3, r2
    1dac:	f002 0204 	and.w	r2, r2, #4
    1db0:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1db2:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1db6:	f010 0303 	ands.w	r3, r0, #3
    1dba:	9302      	str	r3, [sp, #8]
    1dbc:	f040 8293 	bne.w	22e6 <cbvprintf_package+0x546>
    1dc0:	4607      	mov	r7, r0
    1dc2:	468a      	mov	sl, r1
    1dc4:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1dc6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1dc8:	2800      	cmp	r0, #0
    1dca:	d041      	beq.n	1e50 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1dcc:	b127      	cbz	r7, 1dd8 <cbvprintf_package+0x38>
    1dce:	1be3      	subs	r3, r4, r7
    1dd0:	3304      	adds	r3, #4
    1dd2:	4553      	cmp	r3, sl
    1dd4:	f200 828a 	bhi.w	22ec <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    1dd8:	9b03      	ldr	r3, [sp, #12]
    1dda:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1ddc:	f8dd b008 	ldr.w	fp, [sp, #8]
    1de0:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1de4:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    1de8:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    1dea:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1dee:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1df0:	b10f      	cbz	r7, 1df6 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    1df2:	9b03      	ldr	r3, [sp, #12]
    1df4:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1df6:	1e53      	subs	r3, r2, #1
    1df8:	9307      	str	r3, [sp, #28]
    1dfa:	2a00      	cmp	r2, #0
    1dfc:	f340 80b7 	ble.w	1f6e <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1e00:	9b05      	ldr	r3, [sp, #20]
    1e02:	f013 0202 	ands.w	r2, r3, #2
    1e06:	d021      	beq.n	1e4c <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1e08:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1e0a:	1be1      	subs	r1, r4, r7
    1e0c:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1e0e:	b11a      	cbz	r2, 1e18 <cbvprintf_package+0x78>
    1e10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1e14:	f080 80bf 	bcs.w	1f96 <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1e18:	f1bb 0f0f 	cmp.w	fp, #15
    1e1c:	f200 80ce 	bhi.w	1fbc <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1e20:	2f00      	cmp	r7, #0
    1e22:	f000 80e2 	beq.w	1fea <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    1e26:	b2db      	uxtb	r3, r3
    1e28:	aa0c      	add	r2, sp, #48	; 0x30
    1e2a:	445a      	add	r2, fp
    1e2c:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1e30:	2800      	cmp	r0, #0
    1e32:	f000 80d6 	beq.w	1fe2 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1e3a:	aa0c      	add	r2, sp, #48	; 0x30
    1e3c:	445a      	add	r2, fp
    1e3e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    1e42:	9b04      	ldr	r3, [sp, #16]
    1e44:	3301      	adds	r3, #1
    1e46:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    1e48:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    1e4c:	3404      	adds	r4, #4
    1e4e:	e0f6      	b.n	203e <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1e50:	f001 0a07 	and.w	sl, r1, #7
    1e54:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1e56:	f1ca 0a08 	rsb	sl, sl, #8
    1e5a:	e7b7      	b.n	1dcc <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    1e5c:	2b25      	cmp	r3, #37	; 0x25
    1e5e:	f040 80ed 	bne.w	203c <cbvprintf_package+0x29c>
				parsing = true;
    1e62:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    1e64:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    1e68:	46c1      	mov	r9, r8
			continue;
    1e6a:	e0e7      	b.n	203c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    1e6c:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    1e70:	46c1      	mov	r9, r8
			continue;
    1e72:	e0e3      	b.n	203c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    1e74:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    1e78:	46c1      	mov	r9, r8
			continue;
    1e7a:	e0df      	b.n	203c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    1e7c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    1e80:	46c1      	mov	r9, r8
			continue;
    1e82:	e0db      	b.n	203c <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    1e84:	782a      	ldrb	r2, [r5, #0]
    1e86:	2a6c      	cmp	r2, #108	; 0x6c
    1e88:	d026      	beq.n	1ed8 <cbvprintf_package+0x138>
			parsing = false;
    1e8a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    1e8c:	eb04 0208 	add.w	r2, r4, r8
    1e90:	3a01      	subs	r2, #1
    1e92:	f1c8 0100 	rsb	r1, r8, #0
    1e96:	400a      	ands	r2, r1
    1e98:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1e9a:	b127      	cbz	r7, 1ea6 <cbvprintf_package+0x106>
    1e9c:	1bd1      	subs	r1, r2, r7
    1e9e:	4449      	add	r1, r9
    1ea0:	4551      	cmp	r1, sl
    1ea2:	f200 8226 	bhi.w	22f2 <cbvprintf_package+0x552>
		if (*fmt == 's') {
    1ea6:	2b73      	cmp	r3, #115	; 0x73
    1ea8:	d059      	beq.n	1f5e <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    1eaa:	f1b9 0f04 	cmp.w	r9, #4
    1eae:	f000 80a8 	beq.w	2002 <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1eb2:	f1b9 0f08 	cmp.w	r9, #8
    1eb6:	f040 80ac 	bne.w	2012 <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    1eba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1ebc:	3307      	adds	r3, #7
    1ebe:	f023 0307 	bic.w	r3, r3, #7
    1ec2:	f103 0108 	add.w	r1, r3, #8
    1ec6:	9116      	str	r1, [sp, #88]	; 0x58
    1ec8:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    1ecc:	b10f      	cbz	r7, 1ed2 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    1ece:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    1ed2:	f102 0408 	add.w	r4, r2, #8
    1ed6:	e0b1      	b.n	203c <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    1ed8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    1edc:	2a6c      	cmp	r2, #108	; 0x6c
    1ede:	d004      	beq.n	1eea <cbvprintf_package+0x14a>
			parsing = false;
    1ee0:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    1ee2:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    1ee6:	46c1      	mov	r9, r8
    1ee8:	e7d0      	b.n	1e8c <cbvprintf_package+0xec>
			parsing = false;
    1eea:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    1eec:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    1ef0:	46c1      	mov	r9, r8
    1ef2:	e7cb      	b.n	1e8c <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    1ef4:	782b      	ldrb	r3, [r5, #0]
    1ef6:	2b4c      	cmp	r3, #76	; 0x4c
    1ef8:	d01c      	beq.n	1f34 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    1efa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1efc:	3307      	adds	r3, #7
    1efe:	f023 0307 	bic.w	r3, r3, #7
    1f02:	f103 0208 	add.w	r2, r3, #8
    1f06:	9216      	str	r2, [sp, #88]	; 0x58
    1f08:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    1f0c:	1de2      	adds	r2, r4, #7
    1f0e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    1f12:	b147      	cbz	r7, 1f26 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    1f14:	1bd3      	subs	r3, r2, r7
    1f16:	3308      	adds	r3, #8
    1f18:	4553      	cmp	r3, sl
    1f1a:	d815      	bhi.n	1f48 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    1f1c:	782b      	ldrb	r3, [r5, #0]
    1f1e:	2b4c      	cmp	r3, #76	; 0x4c
    1f20:	d015      	beq.n	1f4e <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    1f22:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    1f26:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    1f2a:	2600      	movs	r6, #0
			continue;
    1f2c:	f04f 0808 	mov.w	r8, #8
    1f30:	46c1      	mov	r9, r8
    1f32:	e083      	b.n	203c <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    1f34:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f36:	3307      	adds	r3, #7
    1f38:	f023 0307 	bic.w	r3, r3, #7
    1f3c:	f103 0208 	add.w	r2, r3, #8
    1f40:	9216      	str	r2, [sp, #88]	; 0x58
    1f42:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    1f46:	e7e1      	b.n	1f0c <cbvprintf_package+0x16c>
					return -ENOSPC;
    1f48:	f06f 001b 	mvn.w	r0, #27
    1f4c:	e1c8      	b.n	22e0 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    1f4e:	e9c2 0100 	strd	r0, r1, [r2]
    1f52:	e7e8      	b.n	1f26 <cbvprintf_package+0x186>
			parsing = false;
    1f54:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    1f56:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    1f5a:	46c1      	mov	r9, r8
    1f5c:	e796      	b.n	1e8c <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    1f5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f60:	1d1a      	adds	r2, r3, #4
    1f62:	9216      	str	r2, [sp, #88]	; 0x58
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f68:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    1f6a:	4665      	mov	r5, ip
    1f6c:	e740      	b.n	1df0 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1f6e:	4bbb      	ldr	r3, [pc, #748]	; (225c <cbvprintf_package+0x4bc>)
    1f70:	9a03      	ldr	r2, [sp, #12]
    1f72:	429a      	cmp	r2, r3
    1f74:	d304      	bcc.n	1f80 <cbvprintf_package+0x1e0>
    1f76:	4bba      	ldr	r3, [pc, #744]	; (2260 <cbvprintf_package+0x4c0>)
    1f78:	429a      	cmp	r2, r3
    1f7a:	d30a      	bcc.n	1f92 <cbvprintf_package+0x1f2>
    1f7c:	2300      	movs	r3, #0
    1f7e:	e000      	b.n	1f82 <cbvprintf_package+0x1e2>
    1f80:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f82:	2b00      	cmp	r3, #0
    1f84:	f47f af3c 	bne.w	1e00 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    1f88:	9b05      	ldr	r3, [sp, #20]
    1f8a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f8e:	2000      	movs	r0, #0
    1f90:	e73b      	b.n	1e0a <cbvprintf_package+0x6a>
    1f92:	2301      	movs	r3, #1
    1f94:	e7f5      	b.n	1f82 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    1f96:	4cb3      	ldr	r4, [pc, #716]	; (2264 <cbvprintf_package+0x4c4>)
    1f98:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1f9c:	4622      	mov	r2, r4
    1f9e:	49b2      	ldr	r1, [pc, #712]	; (2268 <cbvprintf_package+0x4c8>)
    1fa0:	48b2      	ldr	r0, [pc, #712]	; (226c <cbvprintf_package+0x4cc>)
    1fa2:	f00a f8b1 	bl	c108 <assert_print>
    1fa6:	48b2      	ldr	r0, [pc, #712]	; (2270 <cbvprintf_package+0x4d0>)
    1fa8:	f00a f8ae 	bl	c108 <assert_print>
    1fac:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    1fb0:	4620      	mov	r0, r4
    1fb2:	f00a f8a2 	bl	c0fa <assert_post_action>
					return -EINVAL;
    1fb6:	f06f 0015 	mvn.w	r0, #21
    1fba:	e191      	b.n	22e0 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    1fbc:	4ca9      	ldr	r4, [pc, #676]	; (2264 <cbvprintf_package+0x4c4>)
    1fbe:	f240 13f5 	movw	r3, #501	; 0x1f5
    1fc2:	4622      	mov	r2, r4
    1fc4:	49a8      	ldr	r1, [pc, #672]	; (2268 <cbvprintf_package+0x4c8>)
    1fc6:	48a9      	ldr	r0, [pc, #676]	; (226c <cbvprintf_package+0x4cc>)
    1fc8:	f00a f89e 	bl	c108 <assert_print>
    1fcc:	48a9      	ldr	r0, [pc, #676]	; (2274 <cbvprintf_package+0x4d4>)
    1fce:	f00a f89b 	bl	c108 <assert_print>
    1fd2:	f240 11f5 	movw	r1, #501	; 0x1f5
    1fd6:	4620      	mov	r0, r4
    1fd8:	f00a f88f 	bl	c0fa <assert_post_action>
					return -EINVAL;
    1fdc:	f06f 0015 	mvn.w	r0, #21
    1fe0:	e17e      	b.n	22e0 <cbvprintf_package+0x540>
						s_rw_cnt++;
    1fe2:	9b06      	ldr	r3, [sp, #24]
    1fe4:	3301      	adds	r3, #1
    1fe6:	9306      	str	r3, [sp, #24]
    1fe8:	e72e      	b.n	1e48 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    1fea:	b908      	cbnz	r0, 1ff0 <cbvprintf_package+0x250>
    1fec:	9b01      	ldr	r3, [sp, #4]
    1fee:	b113      	cbz	r3, 1ff6 <cbvprintf_package+0x256>
					len += 1;
    1ff0:	f10a 0a01 	add.w	sl, sl, #1
    1ff4:	e728      	b.n	1e48 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    1ff6:	9803      	ldr	r0, [sp, #12]
    1ff8:	f00a fa00 	bl	c3fc <strlen>
    1ffc:	1c83      	adds	r3, r0, #2
    1ffe:	449a      	add	sl, r3
    2000:	e722      	b.n	1e48 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    2002:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2004:	1d19      	adds	r1, r3, #4
    2006:	9116      	str	r1, [sp, #88]	; 0x58
    2008:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    200a:	b107      	cbz	r7, 200e <cbvprintf_package+0x26e>
				*(int *)buf = v;
    200c:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    200e:	1d14      	adds	r4, r2, #4
    2010:	e014      	b.n	203c <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    2012:	4c94      	ldr	r4, [pc, #592]	; (2264 <cbvprintf_package+0x4c4>)
    2014:	f240 2331 	movw	r3, #561	; 0x231
    2018:	4622      	mov	r2, r4
    201a:	4993      	ldr	r1, [pc, #588]	; (2268 <cbvprintf_package+0x4c8>)
    201c:	4893      	ldr	r0, [pc, #588]	; (226c <cbvprintf_package+0x4cc>)
    201e:	f00a f873 	bl	c108 <assert_print>
    2022:	4649      	mov	r1, r9
    2024:	4894      	ldr	r0, [pc, #592]	; (2278 <cbvprintf_package+0x4d8>)
    2026:	f00a f86f 	bl	c108 <assert_print>
    202a:	f240 2131 	movw	r1, #561	; 0x231
    202e:	4620      	mov	r0, r4
    2030:	f00a f863 	bl	c0fa <assert_post_action>
			return -EINVAL;
    2034:	f06f 0015 	mvn.w	r0, #21
    2038:	e152      	b.n	22e0 <cbvprintf_package+0x540>
		switch (*fmt) {
    203a:	2600      	movs	r6, #0
    203c:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    203e:	f105 0c01 	add.w	ip, r5, #1
    2042:	786b      	ldrb	r3, [r5, #1]
    2044:	2b00      	cmp	r3, #0
    2046:	f000 80c1 	beq.w	21cc <cbvprintf_package+0x42c>
		if (!parsing) {
    204a:	2e00      	cmp	r6, #0
    204c:	f43f af06 	beq.w	1e5c <cbvprintf_package+0xbc>
		switch (*fmt) {
    2050:	f1a3 0120 	sub.w	r1, r3, #32
    2054:	295a      	cmp	r1, #90	; 0x5a
    2056:	d8f0      	bhi.n	203a <cbvprintf_package+0x29a>
    2058:	a201      	add	r2, pc, #4	; (adr r2, 2060 <cbvprintf_package+0x2c0>)
    205a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    205e:	bf00      	nop
    2060:	0000203d 	.word	0x0000203d
    2064:	0000203b 	.word	0x0000203b
    2068:	0000203b 	.word	0x0000203b
    206c:	0000203d 	.word	0x0000203d
    2070:	0000203b 	.word	0x0000203b
    2074:	0000203b 	.word	0x0000203b
    2078:	0000203b 	.word	0x0000203b
    207c:	0000203b 	.word	0x0000203b
    2080:	0000203b 	.word	0x0000203b
    2084:	0000203b 	.word	0x0000203b
    2088:	00001e8d 	.word	0x00001e8d
    208c:	0000203d 	.word	0x0000203d
    2090:	0000203b 	.word	0x0000203b
    2094:	0000203d 	.word	0x0000203d
    2098:	0000203d 	.word	0x0000203d
    209c:	0000203b 	.word	0x0000203b
    20a0:	0000203d 	.word	0x0000203d
    20a4:	0000203d 	.word	0x0000203d
    20a8:	0000203d 	.word	0x0000203d
    20ac:	0000203d 	.word	0x0000203d
    20b0:	0000203d 	.word	0x0000203d
    20b4:	0000203d 	.word	0x0000203d
    20b8:	0000203d 	.word	0x0000203d
    20bc:	0000203d 	.word	0x0000203d
    20c0:	0000203d 	.word	0x0000203d
    20c4:	0000203d 	.word	0x0000203d
    20c8:	0000203b 	.word	0x0000203b
    20cc:	0000203b 	.word	0x0000203b
    20d0:	0000203b 	.word	0x0000203b
    20d4:	0000203b 	.word	0x0000203b
    20d8:	0000203b 	.word	0x0000203b
    20dc:	0000203b 	.word	0x0000203b
    20e0:	0000203b 	.word	0x0000203b
    20e4:	00001ef5 	.word	0x00001ef5
    20e8:	0000203b 	.word	0x0000203b
    20ec:	0000203b 	.word	0x0000203b
    20f0:	0000203b 	.word	0x0000203b
    20f4:	00001ef5 	.word	0x00001ef5
    20f8:	00001ef5 	.word	0x00001ef5
    20fc:	00001ef5 	.word	0x00001ef5
    2100:	0000203b 	.word	0x0000203b
    2104:	0000203b 	.word	0x0000203b
    2108:	0000203b 	.word	0x0000203b
    210c:	0000203b 	.word	0x0000203b
    2110:	0000203d 	.word	0x0000203d
    2114:	0000203b 	.word	0x0000203b
    2118:	0000203b 	.word	0x0000203b
    211c:	0000203b 	.word	0x0000203b
    2120:	0000203b 	.word	0x0000203b
    2124:	0000203b 	.word	0x0000203b
    2128:	0000203b 	.word	0x0000203b
    212c:	0000203b 	.word	0x0000203b
    2130:	0000203b 	.word	0x0000203b
    2134:	0000203b 	.word	0x0000203b
    2138:	0000203b 	.word	0x0000203b
    213c:	0000203b 	.word	0x0000203b
    2140:	00001e85 	.word	0x00001e85
    2144:	0000203b 	.word	0x0000203b
    2148:	0000203b 	.word	0x0000203b
    214c:	0000203b 	.word	0x0000203b
    2150:	0000203b 	.word	0x0000203b
    2154:	0000203b 	.word	0x0000203b
    2158:	0000203b 	.word	0x0000203b
    215c:	0000203b 	.word	0x0000203b
    2160:	0000203b 	.word	0x0000203b
    2164:	00001ef5 	.word	0x00001ef5
    2168:	0000203b 	.word	0x0000203b
    216c:	00001e85 	.word	0x00001e85
    2170:	00001e85 	.word	0x00001e85
    2174:	00001ef5 	.word	0x00001ef5
    2178:	00001ef5 	.word	0x00001ef5
    217c:	00001ef5 	.word	0x00001ef5
    2180:	0000203d 	.word	0x0000203d
    2184:	00001e85 	.word	0x00001e85
    2188:	00001e6d 	.word	0x00001e6d
    218c:	0000203b 	.word	0x0000203b
    2190:	0000203d 	.word	0x0000203d
    2194:	0000203b 	.word	0x0000203b
    2198:	00001f55 	.word	0x00001f55
    219c:	00001e85 	.word	0x00001e85
    21a0:	00001f55 	.word	0x00001f55
    21a4:	0000203b 	.word	0x0000203b
    21a8:	0000203b 	.word	0x0000203b
    21ac:	00001f55 	.word	0x00001f55
    21b0:	00001e7d 	.word	0x00001e7d
    21b4:	00001e85 	.word	0x00001e85
    21b8:	0000203b 	.word	0x0000203b
    21bc:	0000203b 	.word	0x0000203b
    21c0:	00001e85 	.word	0x00001e85
    21c4:	0000203b 	.word	0x0000203b
    21c8:	00001e75 	.word	0x00001e75
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    21cc:	1be3      	subs	r3, r4, r7
    21ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    21d2:	d211      	bcs.n	21f8 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    21d4:	b31f      	cbz	r7, 221e <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    21d6:	2200      	movs	r2, #0
    21d8:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    21da:	089b      	lsrs	r3, r3, #2
    21dc:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    21de:	9b01      	ldr	r3, [sp, #4]
    21e0:	b30b      	cbz	r3, 2226 <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    21e2:	9b06      	ldr	r3, [sp, #24]
    21e4:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    21e6:	9b04      	ldr	r3, [sp, #16]
    21e8:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    21ea:	bbab      	cbnz	r3, 2258 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    21ec:	9d02      	ldr	r5, [sp, #8]
    21ee:	f8dd 9010 	ldr.w	r9, [sp, #16]
    21f2:	f8dd 800c 	ldr.w	r8, [sp, #12]
    21f6:	e058      	b.n	22aa <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    21f8:	4c1a      	ldr	r4, [pc, #104]	; (2264 <cbvprintf_package+0x4c4>)
    21fa:	f240 233d 	movw	r3, #573	; 0x23d
    21fe:	4622      	mov	r2, r4
    2200:	4919      	ldr	r1, [pc, #100]	; (2268 <cbvprintf_package+0x4c8>)
    2202:	481a      	ldr	r0, [pc, #104]	; (226c <cbvprintf_package+0x4cc>)
    2204:	f009 ff80 	bl	c108 <assert_print>
    2208:	481c      	ldr	r0, [pc, #112]	; (227c <cbvprintf_package+0x4dc>)
    220a:	f009 ff7d 	bl	c108 <assert_print>
    220e:	f240 213d 	movw	r1, #573	; 0x23d
    2212:	4620      	mov	r0, r4
    2214:	f009 ff71 	bl	c0fa <assert_post_action>
		return -EINVAL;
    2218:	f06f 0015 	mvn.w	r0, #21
    221c:	e060      	b.n	22e0 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    221e:	4453      	add	r3, sl
    2220:	f1a3 0008 	sub.w	r0, r3, #8
    2224:	e05c      	b.n	22e0 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    2226:	9b06      	ldr	r3, [sp, #24]
    2228:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    222a:	e7dc      	b.n	21e6 <cbvprintf_package+0x446>
			*buf++ = pos;
    222c:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    2230:	3301      	adds	r3, #1
    2232:	459b      	cmp	fp, r3
    2234:	d9da      	bls.n	21ec <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    2236:	aa0c      	add	r2, sp, #48	; 0x30
    2238:	441a      	add	r2, r3
    223a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    223e:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    2242:	2a00      	cmp	r2, #0
    2244:	daf4      	bge.n	2230 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    2246:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    224a:	1be2      	subs	r2, r4, r7
    224c:	3201      	adds	r2, #1
    224e:	4552      	cmp	r2, sl
    2250:	d9ec      	bls.n	222c <cbvprintf_package+0x48c>
				return -ENOSPC;
    2252:	f06f 001b 	mvn.w	r0, #27
    2256:	e043      	b.n	22e0 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    2258:	9b02      	ldr	r3, [sp, #8]
    225a:	e7ea      	b.n	2232 <cbvprintf_package+0x492>
    225c:	0000d068 	.word	0x0000d068
    2260:	0000f884 	.word	0x0000f884
    2264:	0000db78 	.word	0x0000db78
    2268:	0000d680 	.word	0x0000d680
    226c:	0000d4bc 	.word	0x0000d4bc
    2270:	0000dbc0 	.word	0x0000dbc0
    2274:	0000dbe4 	.word	0x0000dbe4
    2278:	0000dc00 	.word	0x0000dc00
    227c:	0000dc18 	.word	0x0000dc18
		if (rws_pos_en) {
    2280:	9b01      	ldr	r3, [sp, #4]
    2282:	b1f3      	cbz	r3, 22c2 <cbvprintf_package+0x522>
			size = 0;
    2284:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    2286:	1be3      	subs	r3, r4, r7
    2288:	4433      	add	r3, r6
    228a:	3301      	adds	r3, #1
    228c:	4553      	cmp	r3, sl
    228e:	d833      	bhi.n	22f8 <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    2290:	ab0c      	add	r3, sp, #48	; 0x30
    2292:	442b      	add	r3, r5
    2294:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2298:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    229c:	4632      	mov	r2, r6
    229e:	4641      	mov	r1, r8
    22a0:	4620      	mov	r0, r4
    22a2:	f00a f8c9 	bl	c438 <memcpy>
		buf += size;
    22a6:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    22a8:	3501      	adds	r5, #1
    22aa:	45ab      	cmp	fp, r5
    22ac:	d917      	bls.n	22de <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    22ae:	f1b9 0f00 	cmp.w	r9, #0
    22b2:	d0e5      	beq.n	2280 <cbvprintf_package+0x4e0>
    22b4:	ab0c      	add	r3, sp, #48	; 0x30
    22b6:	442b      	add	r3, r5
    22b8:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    22bc:	2b00      	cmp	r3, #0
    22be:	dadf      	bge.n	2280 <cbvprintf_package+0x4e0>
    22c0:	e7f2      	b.n	22a8 <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    22c2:	ab0c      	add	r3, sp, #48	; 0x30
    22c4:	442b      	add	r3, r5
    22c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    22ca:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    22ce:	2200      	movs	r2, #0
    22d0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    22d4:	4640      	mov	r0, r8
    22d6:	f00a f891 	bl	c3fc <strlen>
    22da:	1c46      	adds	r6, r0, #1
    22dc:	e7d3      	b.n	2286 <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    22de:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    22e0:	b00d      	add	sp, #52	; 0x34
    22e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    22e6:	f06f 000d 	mvn.w	r0, #13
    22ea:	e7f9      	b.n	22e0 <cbvprintf_package+0x540>
		return -ENOSPC;
    22ec:	f06f 001b 	mvn.w	r0, #27
    22f0:	e7f6      	b.n	22e0 <cbvprintf_package+0x540>
			return -ENOSPC;
    22f2:	f06f 001b 	mvn.w	r0, #27
    22f6:	e7f3      	b.n	22e0 <cbvprintf_package+0x540>
			return -ENOSPC;
    22f8:	f06f 001b 	mvn.w	r0, #27
    22fc:	e7f0      	b.n	22e0 <cbvprintf_package+0x540>
    22fe:	bf00      	nop

00002300 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    2300:	b538      	push	{r3, r4, r5, lr}
    2302:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2304:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    2306:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    230a:	6081      	str	r1, [r0, #8]
	switch (method) {
    230c:	2b02      	cmp	r3, #2
    230e:	d903      	bls.n	2318 <sys_notify_finalize+0x18>
    2310:	2b03      	cmp	r3, #3
    2312:	d102      	bne.n	231a <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2314:	6800      	ldr	r0, [r0, #0]
		break;
    2316:	e00e      	b.n	2336 <sys_notify_finalize+0x36>
	switch (method) {
    2318:	b963      	cbnz	r3, 2334 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    231a:	4d08      	ldr	r5, [pc, #32]	; (233c <sys_notify_finalize+0x3c>)
    231c:	2345      	movs	r3, #69	; 0x45
    231e:	462a      	mov	r2, r5
    2320:	4907      	ldr	r1, [pc, #28]	; (2340 <sys_notify_finalize+0x40>)
    2322:	4808      	ldr	r0, [pc, #32]	; (2344 <sys_notify_finalize+0x44>)
    2324:	f009 fef0 	bl	c108 <assert_print>
    2328:	2145      	movs	r1, #69	; 0x45
    232a:	4628      	mov	r0, r5
    232c:	f009 fee5 	bl	c0fa <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    2330:	2000      	movs	r0, #0
    2332:	e000      	b.n	2336 <sys_notify_finalize+0x36>
	switch (method) {
    2334:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    2336:	2300      	movs	r3, #0
    2338:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    233a:	bd38      	pop	{r3, r4, r5, pc}
    233c:	0000dc30 	.word	0x0000dc30
    2340:	0000d680 	.word	0x0000d680
    2344:	0000d4bc 	.word	0x0000d4bc

00002348 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    2348:	4b01      	ldr	r3, [pc, #4]	; (2350 <__printk_hook_install+0x8>)
    234a:	6018      	str	r0, [r3, #0]
}
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	20000098 	.word	0x20000098

00002354 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    2354:	b538      	push	{r3, r4, r5, lr}
    2356:	4604      	mov	r4, r0
    2358:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    235a:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    235c:	2a00      	cmp	r2, #0
    235e:	db14      	blt.n	238a <process_complete+0x36>
    2360:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    2364:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2366:	2a01      	cmp	r2, #1
    2368:	d91b      	bls.n	23a2 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    236a:	2b04      	cmp	r3, #4
    236c:	d050      	beq.n	2410 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    236e:	4c2f      	ldr	r4, [pc, #188]	; (242c <process_complete+0xd8>)
    2370:	f240 131b 	movw	r3, #283	; 0x11b
    2374:	4622      	mov	r2, r4
    2376:	492e      	ldr	r1, [pc, #184]	; (2430 <process_complete+0xdc>)
    2378:	482e      	ldr	r0, [pc, #184]	; (2434 <process_complete+0xe0>)
    237a:	f009 fec5 	bl	c108 <assert_print>
    237e:	f240 111b 	movw	r1, #283	; 0x11b
    2382:	4620      	mov	r0, r4
    2384:	f009 feb9 	bl	c0fa <assert_post_action>
	}
}
    2388:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    238a:	e9d0 0100 	ldrd	r0, r1, [r0]
    238e:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2392:	2300      	movs	r3, #0
    2394:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    2396:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    2398:	2101      	movs	r1, #1
    239a:	4620      	mov	r0, r4
    239c:	f009 fd3d 	bl	be1a <set_state>
    23a0:	e7f2      	b.n	2388 <process_complete+0x34>
		*clients = mgr->clients;
    23a2:	e9d0 0100 	ldrd	r0, r1, [r0]
    23a6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    23aa:	2200      	movs	r2, #0
    23ac:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    23ae:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    23b0:	2b06      	cmp	r3, #6
    23b2:	d00f      	beq.n	23d4 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    23b4:	2b05      	cmp	r3, #5
    23b6:	d11d      	bne.n	23f4 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    23b8:	2100      	movs	r1, #0
    23ba:	4620      	mov	r0, r4
    23bc:	f009 fd2d 	bl	be1a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    23c0:	4620      	mov	r0, r4
    23c2:	f009 fd51 	bl	be68 <process_recheck>
    23c6:	2800      	cmp	r0, #0
    23c8:	d0de      	beq.n	2388 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    23ca:	8ba3      	ldrh	r3, [r4, #28]
    23cc:	f043 0320 	orr.w	r3, r3, #32
    23d0:	83a3      	strh	r3, [r4, #28]
    23d2:	e7d9      	b.n	2388 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    23d4:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    23d8:	b13b      	cbz	r3, 23ea <process_complete+0x96>
				mgr->refs += 1U;
    23da:	8be2      	ldrh	r2, [r4, #30]
    23dc:	3201      	adds	r2, #1
    23de:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    23e0:	2b00      	cmp	r3, #0
    23e2:	d0f9      	beq.n	23d8 <process_complete+0x84>
	return node->next;
    23e4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    23e6:	2b00      	cmp	r3, #0
    23e8:	d1f6      	bne.n	23d8 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    23ea:	2102      	movs	r1, #2
    23ec:	4620      	mov	r0, r4
    23ee:	f009 fd14 	bl	be1a <set_state>
    23f2:	e7e5      	b.n	23c0 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    23f4:	4d0d      	ldr	r5, [pc, #52]	; (242c <process_complete+0xd8>)
    23f6:	f240 1309 	movw	r3, #265	; 0x109
    23fa:	462a      	mov	r2, r5
    23fc:	490e      	ldr	r1, [pc, #56]	; (2438 <process_complete+0xe4>)
    23fe:	480d      	ldr	r0, [pc, #52]	; (2434 <process_complete+0xe0>)
    2400:	f009 fe82 	bl	c108 <assert_print>
    2404:	f240 1109 	movw	r1, #265	; 0x109
    2408:	4628      	mov	r0, r5
    240a:	f009 fe76 	bl	c0fa <assert_post_action>
    240e:	e7d3      	b.n	23b8 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    2410:	2100      	movs	r1, #0
    2412:	f009 fd02 	bl	be1a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2416:	4620      	mov	r0, r4
    2418:	f009 fd26 	bl	be68 <process_recheck>
    241c:	2800      	cmp	r0, #0
    241e:	d0b3      	beq.n	2388 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2420:	8ba3      	ldrh	r3, [r4, #28]
    2422:	f043 0320 	orr.w	r3, r3, #32
    2426:	83a3      	strh	r3, [r4, #28]
    2428:	e7ae      	b.n	2388 <process_complete+0x34>
    242a:	bf00      	nop
    242c:	0000dc54 	.word	0x0000dc54
    2430:	0000d680 	.word	0x0000d680
    2434:	0000d4bc 	.word	0x0000d4bc
    2438:	0000dc78 	.word	0x0000dc78

0000243c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2440:	b083      	sub	sp, #12
    2442:	4604      	mov	r4, r0
    2444:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2446:	8b83      	ldrh	r3, [r0, #28]
    2448:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    244c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    2450:	460d      	mov	r5, r1
    2452:	b131      	cbz	r1, 2462 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2454:	f1b8 0f00 	cmp.w	r8, #0
    2458:	d112      	bne.n	2480 <process_event+0x44>
	list->head = NULL;
    245a:	2300      	movs	r3, #0
    245c:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    245e:	9301      	str	r3, [sp, #4]
}
    2460:	e0aa      	b.n	25b8 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    2462:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 2744 <process_event+0x308>
    2466:	f240 1333 	movw	r3, #307	; 0x133
    246a:	464a      	mov	r2, r9
    246c:	49b6      	ldr	r1, [pc, #728]	; (2748 <process_event+0x30c>)
    246e:	48b7      	ldr	r0, [pc, #732]	; (274c <process_event+0x310>)
    2470:	f009 fe4a 	bl	c108 <assert_print>
    2474:	f240 1133 	movw	r1, #307	; 0x133
    2478:	4648      	mov	r0, r9
    247a:	f009 fe3e 	bl	c0fa <assert_post_action>
    247e:	e7e9      	b.n	2454 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    2480:	2d01      	cmp	r5, #1
    2482:	d013      	beq.n	24ac <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    2484:	2d02      	cmp	r5, #2
    2486:	d116      	bne.n	24b6 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2488:	8ba3      	ldrh	r3, [r4, #28]
    248a:	f043 0320 	orr.w	r3, r3, #32
    248e:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    2490:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2492:	4620      	mov	r0, r4
    2494:	f006 fd94 	bl	8fc0 <z_spin_unlock_valid>
    2498:	2800      	cmp	r0, #0
    249a:	f000 819c 	beq.w	27d6 <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    249e:	f386 8811 	msr	BASEPRI, r6
    24a2:	f3bf 8f6f 	isb	sy
}
    24a6:	b003      	add	sp, #12
    24a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    24ac:	8ba3      	ldrh	r3, [r4, #28]
    24ae:	f043 0310 	orr.w	r3, r3, #16
    24b2:	83a3      	strh	r3, [r4, #28]
    24b4:	e7ec      	b.n	2490 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    24b6:	4da3      	ldr	r5, [pc, #652]	; (2744 <process_event+0x308>)
    24b8:	f44f 739e 	mov.w	r3, #316	; 0x13c
    24bc:	462a      	mov	r2, r5
    24be:	49a4      	ldr	r1, [pc, #656]	; (2750 <process_event+0x314>)
    24c0:	48a2      	ldr	r0, [pc, #648]	; (274c <process_event+0x310>)
    24c2:	f009 fe21 	bl	c108 <assert_print>
    24c6:	f44f 719e 	mov.w	r1, #316	; 0x13c
    24ca:	4628      	mov	r0, r5
    24cc:	f009 fe15 	bl	c0fa <assert_post_action>
    24d0:	e7da      	b.n	2488 <process_event+0x4c>
			evt = process_recheck(mgr);
    24d2:	4620      	mov	r0, r4
    24d4:	f009 fcc8 	bl	be68 <process_recheck>
    24d8:	4605      	mov	r5, r0
    24da:	e06f      	b.n	25bc <process_event+0x180>
			res = mgr->last_res;
    24dc:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    24e0:	464a      	mov	r2, r9
    24e2:	4669      	mov	r1, sp
    24e4:	4620      	mov	r0, r4
    24e6:	f7ff ff35 	bl	2354 <process_complete>
		onoff_transition_fn transit = NULL;
    24ea:	2500      	movs	r5, #0
    24ec:	e011      	b.n	2512 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    24ee:	2f00      	cmp	r7, #0
    24f0:	f040 8081 	bne.w	25f6 <process_event+0x1ba>
	return list->head;
    24f4:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    24f6:	2b00      	cmp	r3, #0
    24f8:	f000 808b 	beq.w	2612 <process_event+0x1d6>
			transit = mgr->transitions->start;
    24fc:	6923      	ldr	r3, [r4, #16]
    24fe:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    2500:	2d00      	cmp	r5, #0
    2502:	f000 8094 	beq.w	262e <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    2506:	2106      	movs	r1, #6
    2508:	4620      	mov	r0, r4
    250a:	f009 fc86 	bl	be1a <set_state>
		res = 0;
    250e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2512:	8ba3      	ldrh	r3, [r4, #28]
    2514:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2518:	45b8      	cmp	r8, r7
    251a:	f000 810b 	beq.w	2734 <process_event+0x2f8>
    251e:	68a2      	ldr	r2, [r4, #8]
    2520:	2a00      	cmp	r2, #0
    2522:	f000 8109 	beq.w	2738 <process_event+0x2fc>
    2526:	2201      	movs	r2, #1
		if (do_monitors
    2528:	4617      	mov	r7, r2
    252a:	b91a      	cbnz	r2, 2534 <process_event+0xf8>
    252c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    252e:	2a00      	cmp	r2, #0
    2530:	f000 8104 	beq.w	273c <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2534:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2538:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    253a:	f104 0a14 	add.w	sl, r4, #20
    253e:	4650      	mov	r0, sl
    2540:	f006 fd3e 	bl	8fc0 <z_spin_unlock_valid>
    2544:	2800      	cmp	r0, #0
    2546:	f000 8115 	beq.w	2774 <process_event+0x338>
    254a:	f386 8811 	msr	BASEPRI, r6
    254e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2552:	2f00      	cmp	r7, #0
    2554:	f040 811f 	bne.w	2796 <process_event+0x35a>
    2558:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    255a:	b12b      	cbz	r3, 2568 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    255c:	464b      	mov	r3, r9
    255e:	4642      	mov	r2, r8
    2560:	4669      	mov	r1, sp
    2562:	4620      	mov	r0, r4
    2564:	f009 fcc2 	bl	beec <notify_all>
			if (transit != NULL) {
    2568:	b115      	cbz	r5, 2570 <process_event+0x134>
				transit(mgr, transition_complete);
    256a:	497a      	ldr	r1, [pc, #488]	; (2754 <process_event+0x318>)
    256c:	4620      	mov	r0, r4
    256e:	47a8      	blx	r5
	__asm__ volatile(
    2570:	f04f 0320 	mov.w	r3, #32
    2574:	f3ef 8611 	mrs	r6, BASEPRI
    2578:	f383 8812 	msr	BASEPRI_MAX, r3
    257c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2580:	4650      	mov	r0, sl
    2582:	f006 fd0d 	bl	8fa0 <z_spin_lock_valid>
    2586:	2800      	cmp	r0, #0
    2588:	f000 810b 	beq.w	27a2 <process_event+0x366>
	z_spin_lock_set_owner(l);
    258c:	4650      	mov	r0, sl
    258e:	f006 fd27 	bl	8fe0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2592:	8ba3      	ldrh	r3, [r4, #28]
    2594:	f023 0308 	bic.w	r3, r3, #8
    2598:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    259a:	8ba3      	ldrh	r3, [r4, #28]
    259c:	f013 0f10 	tst.w	r3, #16
    25a0:	f000 810f 	beq.w	27c2 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    25a4:	f023 0310 	bic.w	r3, r3, #16
    25a8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    25aa:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    25ac:	8ba7      	ldrh	r7, [r4, #28]
    25ae:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    25b2:	2d00      	cmp	r5, #0
    25b4:	f43f af6c 	beq.w	2490 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    25b8:	2d02      	cmp	r5, #2
    25ba:	d08a      	beq.n	24d2 <process_event+0x96>
		if (evt == EVT_NOP) {
    25bc:	2d00      	cmp	r5, #0
    25be:	f43f af67 	beq.w	2490 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    25c2:	2d01      	cmp	r5, #1
    25c4:	d08a      	beq.n	24dc <process_event+0xa0>
		} else if (evt == EVT_START) {
    25c6:	2d03      	cmp	r5, #3
    25c8:	d091      	beq.n	24ee <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    25ca:	2d04      	cmp	r5, #4
    25cc:	d03e      	beq.n	264c <process_event+0x210>
		} else if (evt == EVT_RESET) {
    25ce:	2d05      	cmp	r5, #5
    25d0:	f040 80a0 	bne.w	2714 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    25d4:	2f01      	cmp	r7, #1
    25d6:	d172      	bne.n	26be <process_event+0x282>
    25d8:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    25da:	2b00      	cmp	r3, #0
    25dc:	d07d      	beq.n	26da <process_event+0x29e>
			transit = mgr->transitions->reset;
    25de:	6923      	ldr	r3, [r4, #16]
    25e0:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    25e2:	2d00      	cmp	r5, #0
    25e4:	f000 8087 	beq.w	26f6 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    25e8:	2105      	movs	r1, #5
    25ea:	4620      	mov	r0, r4
    25ec:	f009 fc15 	bl	be1a <set_state>
		res = 0;
    25f0:	f04f 0900 	mov.w	r9, #0
    25f4:	e78d      	b.n	2512 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    25f6:	4d53      	ldr	r5, [pc, #332]	; (2744 <process_event+0x308>)
    25f8:	f44f 73ab 	mov.w	r3, #342	; 0x156
    25fc:	462a      	mov	r2, r5
    25fe:	4956      	ldr	r1, [pc, #344]	; (2758 <process_event+0x31c>)
    2600:	4852      	ldr	r0, [pc, #328]	; (274c <process_event+0x310>)
    2602:	f009 fd81 	bl	c108 <assert_print>
    2606:	f44f 71ab 	mov.w	r1, #342	; 0x156
    260a:	4628      	mov	r0, r5
    260c:	f009 fd75 	bl	c0fa <assert_post_action>
    2610:	e770      	b.n	24f4 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2612:	4d4c      	ldr	r5, [pc, #304]	; (2744 <process_event+0x308>)
    2614:	f240 1357 	movw	r3, #343	; 0x157
    2618:	462a      	mov	r2, r5
    261a:	4950      	ldr	r1, [pc, #320]	; (275c <process_event+0x320>)
    261c:	484b      	ldr	r0, [pc, #300]	; (274c <process_event+0x310>)
    261e:	f009 fd73 	bl	c108 <assert_print>
    2622:	f240 1157 	movw	r1, #343	; 0x157
    2626:	4628      	mov	r0, r5
    2628:	f009 fd67 	bl	c0fa <assert_post_action>
    262c:	e766      	b.n	24fc <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    262e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2744 <process_event+0x308>
    2632:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    2636:	4642      	mov	r2, r8
    2638:	4949      	ldr	r1, [pc, #292]	; (2760 <process_event+0x324>)
    263a:	4844      	ldr	r0, [pc, #272]	; (274c <process_event+0x310>)
    263c:	f009 fd64 	bl	c108 <assert_print>
    2640:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2644:	4640      	mov	r0, r8
    2646:	f009 fd58 	bl	c0fa <assert_post_action>
    264a:	e75c      	b.n	2506 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    264c:	2f02      	cmp	r7, #2
    264e:	d10b      	bne.n	2668 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2650:	8be3      	ldrh	r3, [r4, #30]
    2652:	b9bb      	cbnz	r3, 2684 <process_event+0x248>
			transit = mgr->transitions->stop;
    2654:	6923      	ldr	r3, [r4, #16]
    2656:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2658:	b315      	cbz	r5, 26a0 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    265a:	2104      	movs	r1, #4
    265c:	4620      	mov	r0, r4
    265e:	f009 fbdc 	bl	be1a <set_state>
		res = 0;
    2662:	f04f 0900 	mov.w	r9, #0
    2666:	e754      	b.n	2512 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2668:	4d36      	ldr	r5, [pc, #216]	; (2744 <process_event+0x308>)
    266a:	f240 135d 	movw	r3, #349	; 0x15d
    266e:	462a      	mov	r2, r5
    2670:	493c      	ldr	r1, [pc, #240]	; (2764 <process_event+0x328>)
    2672:	4836      	ldr	r0, [pc, #216]	; (274c <process_event+0x310>)
    2674:	f009 fd48 	bl	c108 <assert_print>
    2678:	f240 115d 	movw	r1, #349	; 0x15d
    267c:	4628      	mov	r0, r5
    267e:	f009 fd3c 	bl	c0fa <assert_post_action>
    2682:	e7e5      	b.n	2650 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2684:	4d2f      	ldr	r5, [pc, #188]	; (2744 <process_event+0x308>)
    2686:	f44f 73af 	mov.w	r3, #350	; 0x15e
    268a:	462a      	mov	r2, r5
    268c:	4936      	ldr	r1, [pc, #216]	; (2768 <process_event+0x32c>)
    268e:	482f      	ldr	r0, [pc, #188]	; (274c <process_event+0x310>)
    2690:	f009 fd3a 	bl	c108 <assert_print>
    2694:	f44f 71af 	mov.w	r1, #350	; 0x15e
    2698:	4628      	mov	r0, r5
    269a:	f009 fd2e 	bl	c0fa <assert_post_action>
    269e:	e7d9      	b.n	2654 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    26a0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2744 <process_event+0x308>
    26a4:	f240 1361 	movw	r3, #353	; 0x161
    26a8:	4642      	mov	r2, r8
    26aa:	492d      	ldr	r1, [pc, #180]	; (2760 <process_event+0x324>)
    26ac:	4827      	ldr	r0, [pc, #156]	; (274c <process_event+0x310>)
    26ae:	f009 fd2b 	bl	c108 <assert_print>
    26b2:	f240 1161 	movw	r1, #353	; 0x161
    26b6:	4640      	mov	r0, r8
    26b8:	f009 fd1f 	bl	c0fa <assert_post_action>
    26bc:	e7cd      	b.n	265a <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    26be:	4d21      	ldr	r5, [pc, #132]	; (2744 <process_event+0x308>)
    26c0:	f44f 73b2 	mov.w	r3, #356	; 0x164
    26c4:	462a      	mov	r2, r5
    26c6:	4929      	ldr	r1, [pc, #164]	; (276c <process_event+0x330>)
    26c8:	4820      	ldr	r0, [pc, #128]	; (274c <process_event+0x310>)
    26ca:	f009 fd1d 	bl	c108 <assert_print>
    26ce:	f44f 71b2 	mov.w	r1, #356	; 0x164
    26d2:	4628      	mov	r0, r5
    26d4:	f009 fd11 	bl	c0fa <assert_post_action>
    26d8:	e77e      	b.n	25d8 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    26da:	4d1a      	ldr	r5, [pc, #104]	; (2744 <process_event+0x308>)
    26dc:	f240 1365 	movw	r3, #357	; 0x165
    26e0:	462a      	mov	r2, r5
    26e2:	491e      	ldr	r1, [pc, #120]	; (275c <process_event+0x320>)
    26e4:	4819      	ldr	r0, [pc, #100]	; (274c <process_event+0x310>)
    26e6:	f009 fd0f 	bl	c108 <assert_print>
    26ea:	f240 1165 	movw	r1, #357	; 0x165
    26ee:	4628      	mov	r0, r5
    26f0:	f009 fd03 	bl	c0fa <assert_post_action>
    26f4:	e773      	b.n	25de <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    26f6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2744 <process_event+0x308>
    26fa:	f44f 73b4 	mov.w	r3, #360	; 0x168
    26fe:	4642      	mov	r2, r8
    2700:	4917      	ldr	r1, [pc, #92]	; (2760 <process_event+0x324>)
    2702:	4812      	ldr	r0, [pc, #72]	; (274c <process_event+0x310>)
    2704:	f009 fd00 	bl	c108 <assert_print>
    2708:	f44f 71b4 	mov.w	r1, #360	; 0x168
    270c:	4640      	mov	r0, r8
    270e:	f009 fcf4 	bl	c0fa <assert_post_action>
    2712:	e769      	b.n	25e8 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    2714:	4d0b      	ldr	r5, [pc, #44]	; (2744 <process_event+0x308>)
    2716:	f240 136b 	movw	r3, #363	; 0x16b
    271a:	462a      	mov	r2, r5
    271c:	4914      	ldr	r1, [pc, #80]	; (2770 <process_event+0x334>)
    271e:	480b      	ldr	r0, [pc, #44]	; (274c <process_event+0x310>)
    2720:	f009 fcf2 	bl	c108 <assert_print>
    2724:	f240 116b 	movw	r1, #363	; 0x16b
    2728:	4628      	mov	r0, r5
    272a:	f009 fce6 	bl	c0fa <assert_post_action>
		onoff_transition_fn transit = NULL;
    272e:	2500      	movs	r5, #0
		res = 0;
    2730:	46a9      	mov	r9, r5
    2732:	e6ee      	b.n	2512 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    2734:	2200      	movs	r2, #0
    2736:	e6f7      	b.n	2528 <process_event+0xec>
    2738:	2200      	movs	r2, #0
    273a:	e6f5      	b.n	2528 <process_event+0xec>
		    || (transit != NULL)) {
    273c:	2d00      	cmp	r5, #0
    273e:	f47f aef9 	bne.w	2534 <process_event+0xf8>
    2742:	e72a      	b.n	259a <process_event+0x15e>
    2744:	0000dc54 	.word	0x0000dc54
    2748:	0000dca0 	.word	0x0000dca0
    274c:	0000d4bc 	.word	0x0000d4bc
    2750:	0000dcb0 	.word	0x0000dcb0
    2754:	00002811 	.word	0x00002811
    2758:	0000dcc4 	.word	0x0000dcc4
    275c:	0000dcd0 	.word	0x0000dcd0
    2760:	0000dcf4 	.word	0x0000dcf4
    2764:	0000dd0c 	.word	0x0000dd0c
    2768:	0000dd24 	.word	0x0000dd24
    276c:	0000dd34 	.word	0x0000dd34
    2770:	0000d680 	.word	0x0000d680
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2774:	f8df b080 	ldr.w	fp, [pc, #128]	; 27f8 <process_event+0x3bc>
    2778:	23b9      	movs	r3, #185	; 0xb9
    277a:	465a      	mov	r2, fp
    277c:	491f      	ldr	r1, [pc, #124]	; (27fc <process_event+0x3c0>)
    277e:	4820      	ldr	r0, [pc, #128]	; (2800 <process_event+0x3c4>)
    2780:	f009 fcc2 	bl	c108 <assert_print>
    2784:	4651      	mov	r1, sl
    2786:	481f      	ldr	r0, [pc, #124]	; (2804 <process_event+0x3c8>)
    2788:	f009 fcbe 	bl	c108 <assert_print>
    278c:	21b9      	movs	r1, #185	; 0xb9
    278e:	4658      	mov	r0, fp
    2790:	f009 fcb3 	bl	c0fa <assert_post_action>
    2794:	e6d9      	b.n	254a <process_event+0x10e>
				notify_monitors(mgr, state, res);
    2796:	464a      	mov	r2, r9
    2798:	4641      	mov	r1, r8
    279a:	4620      	mov	r0, r4
    279c:	f009 fb45 	bl	be2a <notify_monitors>
    27a0:	e6da      	b.n	2558 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27a2:	4d15      	ldr	r5, [pc, #84]	; (27f8 <process_event+0x3bc>)
    27a4:	238e      	movs	r3, #142	; 0x8e
    27a6:	462a      	mov	r2, r5
    27a8:	4917      	ldr	r1, [pc, #92]	; (2808 <process_event+0x3cc>)
    27aa:	4815      	ldr	r0, [pc, #84]	; (2800 <process_event+0x3c4>)
    27ac:	f009 fcac 	bl	c108 <assert_print>
    27b0:	4651      	mov	r1, sl
    27b2:	4816      	ldr	r0, [pc, #88]	; (280c <process_event+0x3d0>)
    27b4:	f009 fca8 	bl	c108 <assert_print>
    27b8:	218e      	movs	r1, #142	; 0x8e
    27ba:	4628      	mov	r0, r5
    27bc:	f009 fc9d 	bl	c0fa <assert_post_action>
    27c0:	e6e4      	b.n	258c <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    27c2:	f013 0f20 	tst.w	r3, #32
    27c6:	d004      	beq.n	27d2 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    27c8:	f023 0320 	bic.w	r3, r3, #32
    27cc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    27ce:	2502      	movs	r5, #2
    27d0:	e6ec      	b.n	25ac <process_event+0x170>
		evt = EVT_NOP;
    27d2:	2500      	movs	r5, #0
    27d4:	e6ea      	b.n	25ac <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27d6:	4d08      	ldr	r5, [pc, #32]	; (27f8 <process_event+0x3bc>)
    27d8:	23b9      	movs	r3, #185	; 0xb9
    27da:	462a      	mov	r2, r5
    27dc:	4907      	ldr	r1, [pc, #28]	; (27fc <process_event+0x3c0>)
    27de:	4808      	ldr	r0, [pc, #32]	; (2800 <process_event+0x3c4>)
    27e0:	f009 fc92 	bl	c108 <assert_print>
    27e4:	4621      	mov	r1, r4
    27e6:	4807      	ldr	r0, [pc, #28]	; (2804 <process_event+0x3c8>)
    27e8:	f009 fc8e 	bl	c108 <assert_print>
    27ec:	21b9      	movs	r1, #185	; 0xb9
    27ee:	4628      	mov	r0, r5
    27f0:	f009 fc83 	bl	c0fa <assert_post_action>
    27f4:	e653      	b.n	249e <process_event+0x62>
    27f6:	bf00      	nop
    27f8:	0000dd4c 	.word	0x0000dd4c
    27fc:	0000dd7c 	.word	0x0000dd7c
    2800:	0000d4bc 	.word	0x0000d4bc
    2804:	0000dd94 	.word	0x0000dd94
    2808:	0000ddac 	.word	0x0000ddac
    280c:	0000ddc4 	.word	0x0000ddc4

00002810 <transition_complete>:
{
    2810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2814:	4604      	mov	r4, r0
    2816:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2818:	f100 0614 	add.w	r6, r0, #20
    281c:	f04f 0320 	mov.w	r3, #32
    2820:	f3ef 8711 	mrs	r7, BASEPRI
    2824:	f383 8812 	msr	BASEPRI_MAX, r3
    2828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    282c:	4630      	mov	r0, r6
    282e:	f006 fbb7 	bl	8fa0 <z_spin_lock_valid>
    2832:	b150      	cbz	r0, 284a <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    2834:	4630      	mov	r0, r6
    2836:	f006 fbd3 	bl	8fe0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    283a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    283c:	463a      	mov	r2, r7
    283e:	2101      	movs	r1, #1
    2840:	4620      	mov	r0, r4
    2842:	f7ff fdfb 	bl	243c <process_event>
}
    2846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    284a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 286c <transition_complete+0x5c>
    284e:	238e      	movs	r3, #142	; 0x8e
    2850:	4642      	mov	r2, r8
    2852:	4907      	ldr	r1, [pc, #28]	; (2870 <transition_complete+0x60>)
    2854:	4807      	ldr	r0, [pc, #28]	; (2874 <transition_complete+0x64>)
    2856:	f009 fc57 	bl	c108 <assert_print>
    285a:	4631      	mov	r1, r6
    285c:	4806      	ldr	r0, [pc, #24]	; (2878 <transition_complete+0x68>)
    285e:	f009 fc53 	bl	c108 <assert_print>
    2862:	218e      	movs	r1, #142	; 0x8e
    2864:	4640      	mov	r0, r8
    2866:	f009 fc48 	bl	c0fa <assert_post_action>
    286a:	e7e3      	b.n	2834 <transition_complete+0x24>
    286c:	0000dd4c 	.word	0x0000dd4c
    2870:	0000ddac 	.word	0x0000ddac
    2874:	0000d4bc 	.word	0x0000d4bc
    2878:	0000ddc4 	.word	0x0000ddc4

0000287c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    287c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2880:	4604      	mov	r4, r0
    2882:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2884:	f009 fb09 	bl	be9a <validate_args>

	if (rv < 0) {
    2888:	1e06      	subs	r6, r0, #0
    288a:	db58      	blt.n	293e <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    288c:	f104 0714 	add.w	r7, r4, #20
    2890:	f04f 0320 	mov.w	r3, #32
    2894:	f3ef 8911 	mrs	r9, BASEPRI
    2898:	f383 8812 	msr	BASEPRI_MAX, r3
    289c:	f3bf 8f6f 	isb	sy
    28a0:	4638      	mov	r0, r7
    28a2:	f006 fb7d 	bl	8fa0 <z_spin_lock_valid>
    28a6:	b1e8      	cbz	r0, 28e4 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    28a8:	4638      	mov	r0, r7
    28aa:	f006 fb99 	bl	8fe0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    28ae:	8ba5      	ldrh	r5, [r4, #28]
    28b0:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    28b4:	8be3      	ldrh	r3, [r4, #30]
    28b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28ba:	4293      	cmp	r3, r2
    28bc:	d056      	beq.n	296c <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    28be:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    28c0:	2d02      	cmp	r5, #2
    28c2:	d01f      	beq.n	2904 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    28c4:	b32d      	cbz	r5, 2912 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    28c6:	2d04      	cmp	r5, #4
    28c8:	d023      	beq.n	2912 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    28ca:	2d06      	cmp	r5, #6
    28cc:	d021      	beq.n	2912 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    28ce:	2d05      	cmp	r5, #5
    28d0:	d053      	beq.n	297a <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    28d2:	2d01      	cmp	r5, #1
    28d4:	d136      	bne.n	2944 <onoff_request+0xc8>
		rv = -EIO;
    28d6:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    28da:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    28de:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    28e0:	4652      	mov	r2, sl
    28e2:	e01c      	b.n	291e <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28e4:	4d3c      	ldr	r5, [pc, #240]	; (29d8 <onoff_request+0x15c>)
    28e6:	238e      	movs	r3, #142	; 0x8e
    28e8:	462a      	mov	r2, r5
    28ea:	493c      	ldr	r1, [pc, #240]	; (29dc <onoff_request+0x160>)
    28ec:	483c      	ldr	r0, [pc, #240]	; (29e0 <onoff_request+0x164>)
    28ee:	f009 fc0b 	bl	c108 <assert_print>
    28f2:	4639      	mov	r1, r7
    28f4:	483b      	ldr	r0, [pc, #236]	; (29e4 <onoff_request+0x168>)
    28f6:	f009 fc07 	bl	c108 <assert_print>
    28fa:	218e      	movs	r1, #142	; 0x8e
    28fc:	4628      	mov	r0, r5
    28fe:	f009 fbfc 	bl	c0fa <assert_post_action>
    2902:	e7d1      	b.n	28a8 <onoff_request+0x2c>
		mgr->refs += 1U;
    2904:	3301      	adds	r3, #1
    2906:	83e3      	strh	r3, [r4, #30]
		notify = true;
    2908:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    290c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    290e:	461a      	mov	r2, r3
    2910:	e005      	b.n	291e <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    2912:	fab5 f385 	clz	r3, r5
    2916:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    2918:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    291c:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    291e:	b142      	cbz	r2, 2932 <onoff_request+0xb6>
	parent->next = child;
    2920:	2200      	movs	r2, #0
    2922:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    2926:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2928:	b372      	cbz	r2, 2988 <onoff_request+0x10c>
	parent->next = child;
    292a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    292e:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    2932:	b373      	cbz	r3, 2992 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    2934:	464a      	mov	r2, r9
    2936:	2102      	movs	r1, #2
    2938:	4620      	mov	r0, r4
    293a:	f7ff fd7f 	bl	243c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    293e:	4630      	mov	r0, r6
    2940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2944:	4e28      	ldr	r6, [pc, #160]	; (29e8 <onoff_request+0x16c>)
    2946:	f240 13c9 	movw	r3, #457	; 0x1c9
    294a:	4632      	mov	r2, r6
    294c:	4927      	ldr	r1, [pc, #156]	; (29ec <onoff_request+0x170>)
    294e:	4824      	ldr	r0, [pc, #144]	; (29e0 <onoff_request+0x164>)
    2950:	f009 fbda 	bl	c108 <assert_print>
    2954:	f240 11c9 	movw	r1, #457	; 0x1c9
    2958:	4630      	mov	r0, r6
    295a:	f009 fbce 	bl	c0fa <assert_post_action>
		rv = -EIO;
    295e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    2962:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2966:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2968:	4652      	mov	r2, sl
    296a:	e7d8      	b.n	291e <onoff_request+0xa2>
		rv = -EAGAIN;
    296c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    2970:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2974:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2976:	4652      	mov	r2, sl
    2978:	e7d1      	b.n	291e <onoff_request+0xa2>
		rv = -ENOTSUP;
    297a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    297e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2982:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2984:	4652      	mov	r2, sl
    2986:	e7ca      	b.n	291e <onoff_request+0xa2>
    2988:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    298c:	f8c4 8000 	str.w	r8, [r4]
}
    2990:	e7cf      	b.n	2932 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2992:	4638      	mov	r0, r7
    2994:	f006 fb14 	bl	8fc0 <z_spin_unlock_valid>
    2998:	b168      	cbz	r0, 29b6 <onoff_request+0x13a>
	__asm__ volatile(
    299a:	f389 8811 	msr	BASEPRI, r9
    299e:	f3bf 8f6f 	isb	sy
		if (notify) {
    29a2:	f1ba 0f00 	cmp.w	sl, #0
    29a6:	d0ca      	beq.n	293e <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    29a8:	2300      	movs	r3, #0
    29aa:	462a      	mov	r2, r5
    29ac:	4641      	mov	r1, r8
    29ae:	4620      	mov	r0, r4
    29b0:	f009 fa89 	bl	bec6 <notify_one>
    29b4:	e7c3      	b.n	293e <onoff_request+0xc2>
    29b6:	f8df b020 	ldr.w	fp, [pc, #32]	; 29d8 <onoff_request+0x15c>
    29ba:	23b9      	movs	r3, #185	; 0xb9
    29bc:	465a      	mov	r2, fp
    29be:	490c      	ldr	r1, [pc, #48]	; (29f0 <onoff_request+0x174>)
    29c0:	4807      	ldr	r0, [pc, #28]	; (29e0 <onoff_request+0x164>)
    29c2:	f009 fba1 	bl	c108 <assert_print>
    29c6:	4639      	mov	r1, r7
    29c8:	480a      	ldr	r0, [pc, #40]	; (29f4 <onoff_request+0x178>)
    29ca:	f009 fb9d 	bl	c108 <assert_print>
    29ce:	21b9      	movs	r1, #185	; 0xb9
    29d0:	4658      	mov	r0, fp
    29d2:	f009 fb92 	bl	c0fa <assert_post_action>
    29d6:	e7e0      	b.n	299a <onoff_request+0x11e>
    29d8:	0000dd4c 	.word	0x0000dd4c
    29dc:	0000ddac 	.word	0x0000ddac
    29e0:	0000d4bc 	.word	0x0000d4bc
    29e4:	0000ddc4 	.word	0x0000ddc4
    29e8:	0000dc54 	.word	0x0000dc54
    29ec:	0000dd34 	.word	0x0000dd34
    29f0:	0000dd7c 	.word	0x0000dd7c
    29f4:	0000dd94 	.word	0x0000dd94

000029f8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    29f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29fc:	4606      	mov	r6, r0
    29fe:	460d      	mov	r5, r1
    2a00:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2a02:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    2a06:	d222      	bcs.n	2a4e <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2a08:	2c04      	cmp	r4, #4
    2a0a:	d931      	bls.n	2a70 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    2a0c:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2a0e:	1dec      	adds	r4, r5, #7
    2a10:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2a14:	4415      	add	r5, r2
    2a16:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2a1a:	1b2d      	subs	r5, r5, r4
    2a1c:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2a20:	2d17      	cmp	r5, #23
    2a22:	d936      	bls.n	2a92 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    2a24:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    2a26:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    2a2a:	2300      	movs	r3, #0
    2a2c:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    2a2e:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2a32:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2a36:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    2a3a:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2a3c:	3607      	adds	r6, #7
    2a3e:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2a42:	f109 0301 	add.w	r3, r9, #1
    2a46:	4543      	cmp	r3, r8
    2a48:	d834      	bhi.n	2ab4 <sys_heap_init+0xbc>
{
    2a4a:	2300      	movs	r3, #0
    2a4c:	e049      	b.n	2ae2 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2a4e:	4f38      	ldr	r7, [pc, #224]	; (2b30 <sys_heap_init+0x138>)
    2a50:	f240 13e3 	movw	r3, #483	; 0x1e3
    2a54:	463a      	mov	r2, r7
    2a56:	4937      	ldr	r1, [pc, #220]	; (2b34 <sys_heap_init+0x13c>)
    2a58:	4837      	ldr	r0, [pc, #220]	; (2b38 <sys_heap_init+0x140>)
    2a5a:	f009 fb55 	bl	c108 <assert_print>
    2a5e:	4837      	ldr	r0, [pc, #220]	; (2b3c <sys_heap_init+0x144>)
    2a60:	f009 fb52 	bl	c108 <assert_print>
    2a64:	f240 11e3 	movw	r1, #483	; 0x1e3
    2a68:	4638      	mov	r0, r7
    2a6a:	f009 fb46 	bl	c0fa <assert_post_action>
    2a6e:	e7cb      	b.n	2a08 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2a70:	4f2f      	ldr	r7, [pc, #188]	; (2b30 <sys_heap_init+0x138>)
    2a72:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2a76:	463a      	mov	r2, r7
    2a78:	4931      	ldr	r1, [pc, #196]	; (2b40 <sys_heap_init+0x148>)
    2a7a:	482f      	ldr	r0, [pc, #188]	; (2b38 <sys_heap_init+0x140>)
    2a7c:	f009 fb44 	bl	c108 <assert_print>
    2a80:	4830      	ldr	r0, [pc, #192]	; (2b44 <sys_heap_init+0x14c>)
    2a82:	f009 fb41 	bl	c108 <assert_print>
    2a86:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2a8a:	4638      	mov	r0, r7
    2a8c:	f009 fb35 	bl	c0fa <assert_post_action>
    2a90:	e7bc      	b.n	2a0c <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2a92:	4f27      	ldr	r7, [pc, #156]	; (2b30 <sys_heap_init+0x138>)
    2a94:	f240 13f3 	movw	r3, #499	; 0x1f3
    2a98:	463a      	mov	r2, r7
    2a9a:	492b      	ldr	r1, [pc, #172]	; (2b48 <sys_heap_init+0x150>)
    2a9c:	4826      	ldr	r0, [pc, #152]	; (2b38 <sys_heap_init+0x140>)
    2a9e:	f009 fb33 	bl	c108 <assert_print>
    2aa2:	4828      	ldr	r0, [pc, #160]	; (2b44 <sys_heap_init+0x14c>)
    2aa4:	f009 fb30 	bl	c108 <assert_print>
    2aa8:	f240 11f3 	movw	r1, #499	; 0x1f3
    2aac:	4638      	mov	r0, r7
    2aae:	f009 fb24 	bl	c0fa <assert_post_action>
    2ab2:	e7b7      	b.n	2a24 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2ab4:	f8df a078 	ldr.w	sl, [pc, #120]	; 2b30 <sys_heap_init+0x138>
    2ab8:	f44f 7301 	mov.w	r3, #516	; 0x204
    2abc:	4652      	mov	r2, sl
    2abe:	4923      	ldr	r1, [pc, #140]	; (2b4c <sys_heap_init+0x154>)
    2ac0:	481d      	ldr	r0, [pc, #116]	; (2b38 <sys_heap_init+0x140>)
    2ac2:	f009 fb21 	bl	c108 <assert_print>
    2ac6:	481f      	ldr	r0, [pc, #124]	; (2b44 <sys_heap_init+0x14c>)
    2ac8:	f009 fb1e 	bl	c108 <assert_print>
    2acc:	f44f 7101 	mov.w	r1, #516	; 0x204
    2ad0:	4650      	mov	r0, sl
    2ad2:	f009 fb12 	bl	c0fa <assert_post_action>
    2ad6:	e7b8      	b.n	2a4a <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    2ad8:	1d1a      	adds	r2, r3, #4
    2ada:	2100      	movs	r1, #0
    2adc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    2ae0:	3301      	adds	r3, #1
    2ae2:	42bb      	cmp	r3, r7
    2ae4:	dbf8      	blt.n	2ad8 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2ae6:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    2aea:	b29b      	uxth	r3, r3
    2aec:	8063      	strh	r3, [r4, #2]
    2aee:	2200      	movs	r2, #0
    2af0:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2af2:	f043 0301 	orr.w	r3, r3, #1
    2af6:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2af8:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2afc:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    2b00:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    2b04:	1cb3      	adds	r3, r6, #2
    2b06:	52e1      	strh	r1, [r4, r3]
    2b08:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    2b0c:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    2b10:	1ca9      	adds	r1, r5, #2
    2b12:	5262      	strh	r2, [r4, r1]
    2b14:	4425      	add	r5, r4
    2b16:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2b1a:	886b      	ldrh	r3, [r5, #2]
    2b1c:	f043 0301 	orr.w	r3, r3, #1
    2b20:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2b22:	4649      	mov	r1, r9
    2b24:	4620      	mov	r0, r4
    2b26:	f009 fa46 	bl	bfb6 <free_list_add>
}
    2b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b2e:	bf00      	nop
    2b30:	0000dddc 	.word	0x0000dddc
    2b34:	0000deb0 	.word	0x0000deb0
    2b38:	0000d4bc 	.word	0x0000d4bc
    2b3c:	0000dec8 	.word	0x0000dec8
    2b40:	0000dee0 	.word	0x0000dee0
    2b44:	0000df04 	.word	0x0000df04
    2b48:	0000df20 	.word	0x0000df20
    2b4c:	0000df4c 	.word	0x0000df4c

00002b50 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    2b50:	b570      	push	{r4, r5, r6, lr}
    2b52:	b082      	sub	sp, #8
    2b54:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    2b56:	2300      	movs	r3, #0
    2b58:	6003      	str	r3, [r0, #0]
    2b5a:	6043      	str	r3, [r0, #4]
    2b5c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    2b5e:	784b      	ldrb	r3, [r1, #1]
    2b60:	2b25      	cmp	r3, #37	; 0x25
    2b62:	d002      	beq.n	2b6a <extract_conversion+0x1a>
    2b64:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    2b66:	2501      	movs	r5, #1
    2b68:	e01f      	b.n	2baa <extract_conversion+0x5a>
		conv->specifier = *sp++;
    2b6a:	1c88      	adds	r0, r1, #2
    2b6c:	70e3      	strb	r3, [r4, #3]
		return sp;
    2b6e:	e145      	b.n	2dfc <extract_conversion+0x2ac>
			conv->flag_dash = true;
    2b70:	7823      	ldrb	r3, [r4, #0]
    2b72:	f043 0304 	orr.w	r3, r3, #4
    2b76:	7023      	strb	r3, [r4, #0]
		if (loop) {
    2b78:	b1b5      	cbz	r5, 2ba8 <extract_conversion+0x58>
			++sp;
    2b7a:	3601      	adds	r6, #1
    2b7c:	e014      	b.n	2ba8 <extract_conversion+0x58>
			conv->flag_plus = true;
    2b7e:	7823      	ldrb	r3, [r4, #0]
    2b80:	f043 0308 	orr.w	r3, r3, #8
    2b84:	7023      	strb	r3, [r4, #0]
			break;
    2b86:	e7f7      	b.n	2b78 <extract_conversion+0x28>
			conv->flag_space = true;
    2b88:	7823      	ldrb	r3, [r4, #0]
    2b8a:	f043 0310 	orr.w	r3, r3, #16
    2b8e:	7023      	strb	r3, [r4, #0]
			break;
    2b90:	e7f2      	b.n	2b78 <extract_conversion+0x28>
			conv->flag_hash = true;
    2b92:	7823      	ldrb	r3, [r4, #0]
    2b94:	f043 0320 	orr.w	r3, r3, #32
    2b98:	7023      	strb	r3, [r4, #0]
			break;
    2b9a:	e7ed      	b.n	2b78 <extract_conversion+0x28>
			conv->flag_zero = true;
    2b9c:	7823      	ldrb	r3, [r4, #0]
    2b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ba2:	7023      	strb	r3, [r4, #0]
			break;
    2ba4:	e7e8      	b.n	2b78 <extract_conversion+0x28>
		switch (*sp) {
    2ba6:	2500      	movs	r5, #0
	} while (loop);
    2ba8:	b345      	cbz	r5, 2bfc <extract_conversion+0xac>
		switch (*sp) {
    2baa:	7833      	ldrb	r3, [r6, #0]
    2bac:	3b20      	subs	r3, #32
    2bae:	2b10      	cmp	r3, #16
    2bb0:	d8f9      	bhi.n	2ba6 <extract_conversion+0x56>
    2bb2:	a201      	add	r2, pc, #4	; (adr r2, 2bb8 <extract_conversion+0x68>)
    2bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2bb8:	00002b89 	.word	0x00002b89
    2bbc:	00002ba7 	.word	0x00002ba7
    2bc0:	00002ba7 	.word	0x00002ba7
    2bc4:	00002b93 	.word	0x00002b93
    2bc8:	00002ba7 	.word	0x00002ba7
    2bcc:	00002ba7 	.word	0x00002ba7
    2bd0:	00002ba7 	.word	0x00002ba7
    2bd4:	00002ba7 	.word	0x00002ba7
    2bd8:	00002ba7 	.word	0x00002ba7
    2bdc:	00002ba7 	.word	0x00002ba7
    2be0:	00002ba7 	.word	0x00002ba7
    2be4:	00002b7f 	.word	0x00002b7f
    2be8:	00002ba7 	.word	0x00002ba7
    2bec:	00002b71 	.word	0x00002b71
    2bf0:	00002ba7 	.word	0x00002ba7
    2bf4:	00002ba7 	.word	0x00002ba7
    2bf8:	00002b9d 	.word	0x00002b9d
	if (conv->flag_zero && conv->flag_dash) {
    2bfc:	7823      	ldrb	r3, [r4, #0]
    2bfe:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2c02:	2b44      	cmp	r3, #68	; 0x44
    2c04:	d05f      	beq.n	2cc6 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    2c06:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    2c08:	7823      	ldrb	r3, [r4, #0]
    2c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c0e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    2c10:	7833      	ldrb	r3, [r6, #0]
    2c12:	2b2a      	cmp	r3, #42	; 0x2a
    2c14:	d05c      	beq.n	2cd0 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    2c16:	a801      	add	r0, sp, #4
    2c18:	f009 f9d9 	bl	bfce <extract_decimal>
	if (sp != wp) {
    2c1c:	9b01      	ldr	r3, [sp, #4]
    2c1e:	429e      	cmp	r6, r3
    2c20:	d00f      	beq.n	2c42 <extract_conversion+0xf2>
		conv->width_present = true;
    2c22:	7823      	ldrb	r3, [r4, #0]
    2c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c28:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    2c2a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    2c2c:	b2db      	uxtb	r3, r3
    2c2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2c32:	2800      	cmp	r0, #0
    2c34:	db54      	blt.n	2ce0 <extract_conversion+0x190>
    2c36:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2c38:	4313      	orrs	r3, r2
    2c3a:	7822      	ldrb	r2, [r4, #0]
    2c3c:	f363 0241 	bfi	r2, r3, #1, #1
    2c40:	7022      	strb	r2, [r4, #0]
	return sp;
    2c42:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    2c44:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	2b2e      	cmp	r3, #46	; 0x2e
    2c4a:	bf14      	ite	ne
    2c4c:	2300      	movne	r3, #0
    2c4e:	2301      	moveq	r3, #1
    2c50:	7862      	ldrb	r2, [r4, #1]
    2c52:	f363 0241 	bfi	r2, r3, #1, #1
    2c56:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d043      	beq.n	2ce4 <extract_conversion+0x194>
	++sp;
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	1c5a      	adds	r2, r3, #1
    2c60:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    2c62:	785b      	ldrb	r3, [r3, #1]
    2c64:	2b2a      	cmp	r3, #42	; 0x2a
    2c66:	d03f      	beq.n	2ce8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    2c68:	a801      	add	r0, sp, #4
    2c6a:	f009 f9b0 	bl	bfce <extract_decimal>
	conv->prec_value = prec;
    2c6e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    2c70:	7823      	ldrb	r3, [r4, #0]
    2c72:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2c76:	2800      	cmp	r0, #0
    2c78:	db3e      	blt.n	2cf8 <extract_conversion+0x1a8>
    2c7a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2c7c:	4313      	orrs	r3, r2
    2c7e:	7822      	ldrb	r2, [r4, #0]
    2c80:	f363 0241 	bfi	r2, r3, #1, #1
    2c84:	7022      	strb	r2, [r4, #0]
	return sp;
    2c86:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    2c88:	7803      	ldrb	r3, [r0, #0]
    2c8a:	3b4c      	subs	r3, #76	; 0x4c
    2c8c:	2b2e      	cmp	r3, #46	; 0x2e
    2c8e:	f200 809d 	bhi.w	2dcc <extract_conversion+0x27c>
    2c92:	e8df f003 	tbb	[pc, r3]
    2c96:	9b90      	.short	0x9b90
    2c98:	9b9b9b9b 	.word	0x9b9b9b9b
    2c9c:	9b9b9b9b 	.word	0x9b9b9b9b
    2ca0:	9b9b9b9b 	.word	0x9b9b9b9b
    2ca4:	9b9b9b9b 	.word	0x9b9b9b9b
    2ca8:	9b9b9b9b 	.word	0x9b9b9b9b
    2cac:	9b9b9b9b 	.word	0x9b9b9b9b
    2cb0:	9b339b9b 	.word	0x9b339b9b
    2cb4:	9b459b57 	.word	0x9b459b57
    2cb8:	9b9b9b9b 	.word	0x9b9b9b9b
    2cbc:	9b899b9b 	.word	0x9b899b9b
    2cc0:	9b9b9b9b 	.word	0x9b9b9b9b
    2cc4:	82          	.byte	0x82
    2cc5:	00          	.byte	0x00
		conv->flag_zero = false;
    2cc6:	7823      	ldrb	r3, [r4, #0]
    2cc8:	f36f 1386 	bfc	r3, #6, #1
    2ccc:	7023      	strb	r3, [r4, #0]
    2cce:	e79a      	b.n	2c06 <extract_conversion+0xb6>
		conv->width_star = true;
    2cd0:	7863      	ldrb	r3, [r4, #1]
    2cd2:	f043 0301 	orr.w	r3, r3, #1
    2cd6:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2cd8:	4633      	mov	r3, r6
    2cda:	3301      	adds	r3, #1
    2cdc:	9301      	str	r3, [sp, #4]
    2cde:	e7b1      	b.n	2c44 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    2ce0:	2201      	movs	r2, #1
    2ce2:	e7a9      	b.n	2c38 <extract_conversion+0xe8>
		return sp;
    2ce4:	9801      	ldr	r0, [sp, #4]
    2ce6:	e7cf      	b.n	2c88 <extract_conversion+0x138>
		conv->prec_star = true;
    2ce8:	7863      	ldrb	r3, [r4, #1]
    2cea:	f043 0304 	orr.w	r3, r3, #4
    2cee:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2cf0:	4610      	mov	r0, r2
    2cf2:	3001      	adds	r0, #1
    2cf4:	9001      	str	r0, [sp, #4]
    2cf6:	e7c7      	b.n	2c88 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    2cf8:	2201      	movs	r2, #1
    2cfa:	e7bf      	b.n	2c7c <extract_conversion+0x12c>
		if (*++sp == 'h') {
    2cfc:	1c42      	adds	r2, r0, #1
    2cfe:	7843      	ldrb	r3, [r0, #1]
    2d00:	2b68      	cmp	r3, #104	; 0x68
    2d02:	d006      	beq.n	2d12 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    2d04:	7863      	ldrb	r3, [r4, #1]
    2d06:	2102      	movs	r1, #2
    2d08:	f361 03c6 	bfi	r3, r1, #3, #4
    2d0c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    2d0e:	4610      	mov	r0, r2
    2d10:	e01e      	b.n	2d50 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    2d12:	7863      	ldrb	r3, [r4, #1]
    2d14:	2201      	movs	r2, #1
    2d16:	f362 03c6 	bfi	r3, r2, #3, #4
    2d1a:	7063      	strb	r3, [r4, #1]
			++sp;
    2d1c:	3002      	adds	r0, #2
    2d1e:	e017      	b.n	2d50 <extract_conversion+0x200>
		if (*++sp == 'l') {
    2d20:	1c42      	adds	r2, r0, #1
    2d22:	7843      	ldrb	r3, [r0, #1]
    2d24:	2b6c      	cmp	r3, #108	; 0x6c
    2d26:	d006      	beq.n	2d36 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    2d28:	7863      	ldrb	r3, [r4, #1]
    2d2a:	2103      	movs	r1, #3
    2d2c:	f361 03c6 	bfi	r3, r1, #3, #4
    2d30:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    2d32:	4610      	mov	r0, r2
    2d34:	e00c      	b.n	2d50 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    2d36:	7863      	ldrb	r3, [r4, #1]
    2d38:	2204      	movs	r2, #4
    2d3a:	f362 03c6 	bfi	r3, r2, #3, #4
    2d3e:	7063      	strb	r3, [r4, #1]
			++sp;
    2d40:	3002      	adds	r0, #2
    2d42:	e005      	b.n	2d50 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    2d44:	7863      	ldrb	r3, [r4, #1]
    2d46:	2205      	movs	r2, #5
    2d48:	f362 03c6 	bfi	r3, r2, #3, #4
    2d4c:	7063      	strb	r3, [r4, #1]
		++sp;
    2d4e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    2d50:	f810 3b01 	ldrb.w	r3, [r0], #1
    2d54:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    2d56:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2d5a:	2a37      	cmp	r2, #55	; 0x37
    2d5c:	d87d      	bhi.n	2e5a <extract_conversion+0x30a>
    2d5e:	e8df f002 	tbb	[pc, r2]
    2d62:	7c5e      	.short	0x7c5e
    2d64:	5e5e7c7c 	.word	0x5e5e7c7c
    2d68:	7c7c7c5e 	.word	0x7c7c7c5e
    2d6c:	7c7c7c7c 	.word	0x7c7c7c7c
    2d70:	7c7c7c7c 	.word	0x7c7c7c7c
    2d74:	7c7c7c7c 	.word	0x7c7c7c7c
    2d78:	7c7c4f7c 	.word	0x7c7c4f7c
    2d7c:	7c7c7c7c 	.word	0x7c7c7c7c
    2d80:	7c5e7c7c 	.word	0x7c5e7c7c
    2d84:	5e5e3a4f 	.word	0x5e5e3a4f
    2d88:	7c3a7c5e 	.word	0x7c3a7c5e
    2d8c:	657c7c7c 	.word	0x657c7c7c
    2d90:	7c7c714f 	.word	0x7c7c714f
    2d94:	7c4f7c71 	.word	0x7c4f7c71
    2d98:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    2d9a:	7863      	ldrb	r3, [r4, #1]
    2d9c:	2206      	movs	r2, #6
    2d9e:	f362 03c6 	bfi	r3, r2, #3, #4
    2da2:	7063      	strb	r3, [r4, #1]
		++sp;
    2da4:	3001      	adds	r0, #1
		break;
    2da6:	e7d3      	b.n	2d50 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    2da8:	7863      	ldrb	r3, [r4, #1]
    2daa:	2207      	movs	r2, #7
    2dac:	f362 03c6 	bfi	r3, r2, #3, #4
    2db0:	7063      	strb	r3, [r4, #1]
		++sp;
    2db2:	3001      	adds	r0, #1
		break;
    2db4:	e7cc      	b.n	2d50 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    2db6:	7863      	ldrb	r3, [r4, #1]
    2db8:	2208      	movs	r2, #8
    2dba:	f362 03c6 	bfi	r3, r2, #3, #4
    2dbe:	7063      	strb	r3, [r4, #1]
		++sp;
    2dc0:	3001      	adds	r0, #1
		conv->unsupported = true;
    2dc2:	7823      	ldrb	r3, [r4, #0]
    2dc4:	f043 0302 	orr.w	r3, r3, #2
    2dc8:	7023      	strb	r3, [r4, #0]
		break;
    2dca:	e7c1      	b.n	2d50 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    2dcc:	7863      	ldrb	r3, [r4, #1]
    2dce:	f36f 03c6 	bfc	r3, #3, #4
    2dd2:	7063      	strb	r3, [r4, #1]
		break;
    2dd4:	e7bc      	b.n	2d50 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    2dd6:	78a2      	ldrb	r2, [r4, #2]
    2dd8:	2101      	movs	r1, #1
    2dda:	f361 0202 	bfi	r2, r1, #0, #3
    2dde:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2de0:	7862      	ldrb	r2, [r4, #1]
    2de2:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2de6:	2a40      	cmp	r2, #64	; 0x40
    2de8:	d010      	beq.n	2e0c <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    2dea:	2b63      	cmp	r3, #99	; 0x63
    2dec:	d013      	beq.n	2e16 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    2dee:	7823      	ldrb	r3, [r4, #0]
    2df0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2df4:	4315      	orrs	r5, r2
    2df6:	f365 0341 	bfi	r3, r5, #1, #1
    2dfa:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    2dfc:	b002      	add	sp, #8
    2dfe:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    2e00:	78a2      	ldrb	r2, [r4, #2]
    2e02:	2102      	movs	r1, #2
    2e04:	f361 0202 	bfi	r2, r1, #0, #3
    2e08:	70a2      	strb	r2, [r4, #2]
    2e0a:	e7e9      	b.n	2de0 <extract_conversion+0x290>
			conv->invalid = true;
    2e0c:	7821      	ldrb	r1, [r4, #0]
    2e0e:	f041 0101 	orr.w	r1, r1, #1
    2e12:	7021      	strb	r1, [r4, #0]
    2e14:	e7e9      	b.n	2dea <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2e16:	1e15      	subs	r5, r2, #0
    2e18:	bf18      	it	ne
    2e1a:	2501      	movne	r5, #1
    2e1c:	e7e7      	b.n	2dee <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    2e1e:	78a3      	ldrb	r3, [r4, #2]
    2e20:	2204      	movs	r2, #4
    2e22:	f362 0302 	bfi	r3, r2, #0, #3
    2e26:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    2e28:	2501      	movs	r5, #1
			break;
    2e2a:	e7e0      	b.n	2dee <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2e2c:	78a3      	ldrb	r3, [r4, #2]
    2e2e:	2203      	movs	r2, #3
    2e30:	f362 0302 	bfi	r3, r2, #0, #3
    2e34:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2e36:	7863      	ldrb	r3, [r4, #1]
    2e38:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2e3c:	2b40      	cmp	r3, #64	; 0x40
    2e3e:	d1d6      	bne.n	2dee <extract_conversion+0x29e>
			unsupported = true;
    2e40:	2501      	movs	r5, #1
    2e42:	e7d4      	b.n	2dee <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2e44:	78a3      	ldrb	r3, [r4, #2]
    2e46:	2203      	movs	r2, #3
    2e48:	f362 0302 	bfi	r3, r2, #0, #3
    2e4c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    2e4e:	7863      	ldrb	r3, [r4, #1]
    2e50:	f013 0f78 	tst.w	r3, #120	; 0x78
    2e54:	d0cb      	beq.n	2dee <extract_conversion+0x29e>
			unsupported = true;
    2e56:	2501      	movs	r5, #1
    2e58:	e7c9      	b.n	2dee <extract_conversion+0x29e>
		conv->invalid = true;
    2e5a:	7823      	ldrb	r3, [r4, #0]
    2e5c:	f043 0301 	orr.w	r3, r3, #1
    2e60:	7023      	strb	r3, [r4, #0]
		break;
    2e62:	e7c4      	b.n	2dee <extract_conversion+0x29e>

00002e64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e68:	b091      	sub	sp, #68	; 0x44
    2e6a:	4606      	mov	r6, r0
    2e6c:	460d      	mov	r5, r1
    2e6e:	4691      	mov	r9, r2
    2e70:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2e72:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2e74:	f899 0000 	ldrb.w	r0, [r9]
    2e78:	2800      	cmp	r0, #0
    2e7a:	f000 82d5 	beq.w	3428 <cbvprintf+0x5c4>
		if (*fp != '%') {
    2e7e:	2825      	cmp	r0, #37	; 0x25
    2e80:	d008      	beq.n	2e94 <cbvprintf+0x30>
			OUTC(*fp++);
    2e82:	f109 0901 	add.w	r9, r9, #1
    2e86:	4629      	mov	r1, r5
    2e88:	47b0      	blx	r6
    2e8a:	2800      	cmp	r0, #0
    2e8c:	f2c0 82cd 	blt.w	342a <cbvprintf+0x5c6>
    2e90:	3401      	adds	r4, #1
			continue;
    2e92:	e7ef      	b.n	2e74 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2e94:	2300      	movs	r3, #0
    2e96:	9304      	str	r3, [sp, #16]
    2e98:	9305      	str	r3, [sp, #20]
    2e9a:	9306      	str	r3, [sp, #24]
    2e9c:	9307      	str	r3, [sp, #28]
    2e9e:	9308      	str	r3, [sp, #32]
    2ea0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    2ea2:	4649      	mov	r1, r9
    2ea4:	a806      	add	r0, sp, #24
    2ea6:	f7ff fe53 	bl	2b50 <extract_conversion>
    2eaa:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2eac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2eb0:	f013 0f01 	tst.w	r3, #1
    2eb4:	f000 8097 	beq.w	2fe6 <cbvprintf+0x182>
			width = va_arg(ap, int);
    2eb8:	9b03      	ldr	r3, [sp, #12]
    2eba:	1d1a      	adds	r2, r3, #4
    2ebc:	9203      	str	r2, [sp, #12]
    2ebe:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2ec0:	2f00      	cmp	r7, #0
    2ec2:	f2c0 8088 	blt.w	2fd6 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2ec6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2eca:	f013 0f04 	tst.w	r3, #4
    2ece:	f000 809c 	beq.w	300a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    2ed2:	9b03      	ldr	r3, [sp, #12]
    2ed4:	1d1a      	adds	r2, r3, #4
    2ed6:	9203      	str	r2, [sp, #12]
    2ed8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    2edc:	f1ba 0f00 	cmp.w	sl, #0
    2ee0:	f2c0 808a 	blt.w	2ff8 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2ee4:	2300      	movs	r3, #0
    2ee6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    2ee8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2eea:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2eee:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2ef2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    2ef6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2efa:	2b01      	cmp	r3, #1
    2efc:	f000 808e 	beq.w	301c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2f00:	2b02      	cmp	r3, #2
    2f02:	f000 80d3 	beq.w	30ac <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2f06:	2b04      	cmp	r3, #4
    2f08:	f000 8124 	beq.w	3154 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2f0c:	2b03      	cmp	r3, #3
    2f0e:	f000 813b 	beq.w	3188 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2f12:	f89d 8018 	ldrb.w	r8, [sp, #24]
    2f16:	f018 0b03 	ands.w	fp, r8, #3
    2f1a:	f040 813b 	bne.w	3194 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2f1e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f22:	3b25      	subs	r3, #37	; 0x25
    2f24:	2b53      	cmp	r3, #83	; 0x53
    2f26:	f200 81e6 	bhi.w	32f6 <cbvprintf+0x492>
    2f2a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f2e:	0140      	.short	0x0140
    2f30:	01e401e4 	.word	0x01e401e4
    2f34:	01e401e4 	.word	0x01e401e4
    2f38:	01e401e4 	.word	0x01e401e4
    2f3c:	01e401e4 	.word	0x01e401e4
    2f40:	01e401e4 	.word	0x01e401e4
    2f44:	01e401e4 	.word	0x01e401e4
    2f48:	01e401e4 	.word	0x01e401e4
    2f4c:	01e401e4 	.word	0x01e401e4
    2f50:	01e401e4 	.word	0x01e401e4
    2f54:	01e401e4 	.word	0x01e401e4
    2f58:	01e401e4 	.word	0x01e401e4
    2f5c:	01e401e4 	.word	0x01e401e4
    2f60:	01e401e4 	.word	0x01e401e4
    2f64:	01e401e4 	.word	0x01e401e4
    2f68:	01e401e4 	.word	0x01e401e4
    2f6c:	01e401e4 	.word	0x01e401e4
    2f70:	01e401e4 	.word	0x01e401e4
    2f74:	01e401e4 	.word	0x01e401e4
    2f78:	01e401e4 	.word	0x01e401e4
    2f7c:	01e401e4 	.word	0x01e401e4
    2f80:	01e401e4 	.word	0x01e401e4
    2f84:	01e401e4 	.word	0x01e401e4
    2f88:	01e401e4 	.word	0x01e401e4
    2f8c:	01e401e4 	.word	0x01e401e4
    2f90:	01e401e4 	.word	0x01e401e4
    2f94:	01e40181 	.word	0x01e40181
    2f98:	01e401e4 	.word	0x01e401e4
    2f9c:	01e401e4 	.word	0x01e401e4
    2fa0:	01e401e4 	.word	0x01e401e4
    2fa4:	01e401e4 	.word	0x01e401e4
    2fa8:	015e01e4 	.word	0x015e01e4
    2fac:	01e40167 	.word	0x01e40167
    2fb0:	01e401e4 	.word	0x01e401e4
    2fb4:	016701e4 	.word	0x016701e4
    2fb8:	01e401e4 	.word	0x01e401e4
    2fbc:	01e401e4 	.word	0x01e401e4
    2fc0:	018101be 	.word	0x018101be
    2fc4:	01e401a2 	.word	0x01e401a2
    2fc8:	014d01e4 	.word	0x014d01e4
    2fcc:	018101e4 	.word	0x018101e4
    2fd0:	01e401e4 	.word	0x01e401e4
    2fd4:	0181      	.short	0x0181
				conv->flag_dash = true;
    2fd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2fda:	f043 0304 	orr.w	r3, r3, #4
    2fde:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    2fe2:	427f      	negs	r7, r7
    2fe4:	e76f      	b.n	2ec6 <cbvprintf+0x62>
		} else if (conv->width_present) {
    2fe6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    2fea:	2b00      	cmp	r3, #0
    2fec:	db02      	blt.n	2ff4 <cbvprintf+0x190>
		int width = -1;
    2fee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    2ff2:	e768      	b.n	2ec6 <cbvprintf+0x62>
			width = conv->width_value;
    2ff4:	9f07      	ldr	r7, [sp, #28]
    2ff6:	e766      	b.n	2ec6 <cbvprintf+0x62>
				conv->prec_present = false;
    2ff8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2ffc:	f36f 0341 	bfc	r3, #1, #1
    3000:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    3004:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    3008:	e76c      	b.n	2ee4 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    300a:	f013 0f02 	tst.w	r3, #2
    300e:	d002      	beq.n	3016 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    3010:	f8dd a020 	ldr.w	sl, [sp, #32]
    3014:	e766      	b.n	2ee4 <cbvprintf+0x80>
		int precision = -1;
    3016:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    301a:	e763      	b.n	2ee4 <cbvprintf+0x80>
			switch (length_mod) {
    301c:	1ecb      	subs	r3, r1, #3
    301e:	2b04      	cmp	r3, #4
    3020:	d804      	bhi.n	302c <cbvprintf+0x1c8>
    3022:	e8df f003 	tbb	[pc, r3]
    3026:	1d0b      	.short	0x1d0b
    3028:	3529      	.short	0x3529
    302a:	35          	.byte	0x35
    302b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    302c:	9b03      	ldr	r3, [sp, #12]
    302e:	1d1a      	adds	r2, r3, #4
    3030:	9203      	str	r2, [sp, #12]
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	17da      	asrs	r2, r3, #31
    3036:	9304      	str	r3, [sp, #16]
    3038:	9205      	str	r2, [sp, #20]
				break;
    303a:	e006      	b.n	304a <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    303c:	9b03      	ldr	r3, [sp, #12]
    303e:	1d1a      	adds	r2, r3, #4
    3040:	9203      	str	r2, [sp, #12]
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	17da      	asrs	r2, r3, #31
    3046:	9304      	str	r3, [sp, #16]
    3048:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    304a:	2901      	cmp	r1, #1
    304c:	d028      	beq.n	30a0 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    304e:	2902      	cmp	r1, #2
    3050:	f47f af5f 	bne.w	2f12 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    3054:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    3058:	17da      	asrs	r2, r3, #31
    305a:	9304      	str	r3, [sp, #16]
    305c:	9205      	str	r2, [sp, #20]
    305e:	e758      	b.n	2f12 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    3060:	9b03      	ldr	r3, [sp, #12]
    3062:	3307      	adds	r3, #7
    3064:	f023 0307 	bic.w	r3, r3, #7
    3068:	f103 0208 	add.w	r2, r3, #8
    306c:	9203      	str	r2, [sp, #12]
    306e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3072:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    3076:	e7e8      	b.n	304a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    3078:	9b03      	ldr	r3, [sp, #12]
    307a:	3307      	adds	r3, #7
    307c:	f023 0307 	bic.w	r3, r3, #7
    3080:	f103 0208 	add.w	r2, r3, #8
    3084:	9203      	str	r2, [sp, #12]
    3086:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    308a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    308e:	e7dc      	b.n	304a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3090:	9b03      	ldr	r3, [sp, #12]
    3092:	1d1a      	adds	r2, r3, #4
    3094:	9203      	str	r2, [sp, #12]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	17da      	asrs	r2, r3, #31
				value->sint =
    309a:	9304      	str	r3, [sp, #16]
    309c:	9205      	str	r2, [sp, #20]
				break;
    309e:	e7d4      	b.n	304a <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    30a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    30a4:	9304      	str	r3, [sp, #16]
    30a6:	2300      	movs	r3, #0
    30a8:	9305      	str	r3, [sp, #20]
    30aa:	e732      	b.n	2f12 <cbvprintf+0xae>
			switch (length_mod) {
    30ac:	1ecb      	subs	r3, r1, #3
    30ae:	2b04      	cmp	r3, #4
    30b0:	d804      	bhi.n	30bc <cbvprintf+0x258>
    30b2:	e8df f003 	tbb	[pc, r3]
    30b6:	1f0b      	.short	0x1f0b
    30b8:	4135      	.short	0x4135
    30ba:	41          	.byte	0x41
    30bb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    30bc:	9b03      	ldr	r3, [sp, #12]
    30be:	1d1a      	adds	r2, r3, #4
    30c0:	9203      	str	r2, [sp, #12]
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	9304      	str	r3, [sp, #16]
    30c6:	2300      	movs	r3, #0
    30c8:	9305      	str	r3, [sp, #20]
				break;
    30ca:	e01e      	b.n	310a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    30cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    30d0:	2b63      	cmp	r3, #99	; 0x63
    30d2:	d007      	beq.n	30e4 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    30d4:	9b03      	ldr	r3, [sp, #12]
    30d6:	1d1a      	adds	r2, r3, #4
    30d8:	9203      	str	r2, [sp, #12]
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	9304      	str	r3, [sp, #16]
    30de:	2300      	movs	r3, #0
    30e0:	9305      	str	r3, [sp, #20]
    30e2:	e012      	b.n	310a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    30e4:	9b03      	ldr	r3, [sp, #12]
    30e6:	1d1a      	adds	r2, r3, #4
    30e8:	9203      	str	r2, [sp, #12]
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	9304      	str	r3, [sp, #16]
    30ee:	2300      	movs	r3, #0
    30f0:	9305      	str	r3, [sp, #20]
    30f2:	e00a      	b.n	310a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    30f4:	9b03      	ldr	r3, [sp, #12]
    30f6:	3307      	adds	r3, #7
    30f8:	f023 0307 	bic.w	r3, r3, #7
    30fc:	f103 0208 	add.w	r2, r3, #8
    3100:	9203      	str	r2, [sp, #12]
    3102:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3106:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    310a:	2901      	cmp	r1, #1
    310c:	d01c      	beq.n	3148 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    310e:	2902      	cmp	r1, #2
    3110:	f47f aeff 	bne.w	2f12 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    3114:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3118:	9304      	str	r3, [sp, #16]
    311a:	2300      	movs	r3, #0
    311c:	9305      	str	r3, [sp, #20]
    311e:	e6f8      	b.n	2f12 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    3120:	9b03      	ldr	r3, [sp, #12]
    3122:	3307      	adds	r3, #7
    3124:	f023 0307 	bic.w	r3, r3, #7
    3128:	f103 0208 	add.w	r2, r3, #8
    312c:	9203      	str	r2, [sp, #12]
    312e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3132:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    3136:	e7e8      	b.n	310a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    3138:	9b03      	ldr	r3, [sp, #12]
    313a:	1d1a      	adds	r2, r3, #4
    313c:	9203      	str	r2, [sp, #12]
    313e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3140:	9304      	str	r3, [sp, #16]
    3142:	2300      	movs	r3, #0
    3144:	9305      	str	r3, [sp, #20]
				break;
    3146:	e7e0      	b.n	310a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    3148:	f89d 3010 	ldrb.w	r3, [sp, #16]
    314c:	9304      	str	r3, [sp, #16]
    314e:	2300      	movs	r3, #0
    3150:	9305      	str	r3, [sp, #20]
    3152:	e6de      	b.n	2f12 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    3154:	2908      	cmp	r1, #8
    3156:	d00b      	beq.n	3170 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    3158:	9b03      	ldr	r3, [sp, #12]
    315a:	3307      	adds	r3, #7
    315c:	f023 0307 	bic.w	r3, r3, #7
    3160:	f103 0208 	add.w	r2, r3, #8
    3164:	9203      	str	r2, [sp, #12]
    3166:	e9d3 2300 	ldrd	r2, r3, [r3]
    316a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    316e:	e6d0      	b.n	2f12 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    3170:	9b03      	ldr	r3, [sp, #12]
    3172:	3307      	adds	r3, #7
    3174:	f023 0307 	bic.w	r3, r3, #7
    3178:	f103 0208 	add.w	r2, r3, #8
    317c:	9203      	str	r2, [sp, #12]
    317e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3182:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3186:	e6c4      	b.n	2f12 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    3188:	9b03      	ldr	r3, [sp, #12]
    318a:	1d1a      	adds	r2, r3, #4
    318c:	9203      	str	r2, [sp, #12]
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	9304      	str	r3, [sp, #16]
    3192:	e6be      	b.n	2f12 <cbvprintf+0xae>
			OUTS(sp, fp);
    3194:	9f02      	ldr	r7, [sp, #8]
    3196:	463b      	mov	r3, r7
    3198:	464a      	mov	r2, r9
    319a:	4629      	mov	r1, r5
    319c:	4630      	mov	r0, r6
    319e:	f008 ff92 	bl	c0c6 <outs>
    31a2:	2800      	cmp	r0, #0
    31a4:	f2c0 8141 	blt.w	342a <cbvprintf+0x5c6>
    31a8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    31aa:	46b9      	mov	r9, r7
			continue;
    31ac:	e662      	b.n	2e74 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    31ae:	4629      	mov	r1, r5
    31b0:	2025      	movs	r0, #37	; 0x25
    31b2:	47b0      	blx	r6
    31b4:	2800      	cmp	r0, #0
    31b6:	f2c0 8138 	blt.w	342a <cbvprintf+0x5c6>
    31ba:	3401      	adds	r4, #1
		char sign = 0;
    31bc:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    31be:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    31c2:	f04f 0900 	mov.w	r9, #0
			break;
    31c6:	e09b      	b.n	3300 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    31c8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    31cc:	f1ba 0f00 	cmp.w	sl, #0
    31d0:	db07      	blt.n	31e2 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    31d2:	4651      	mov	r1, sl
    31d4:	4648      	mov	r0, r9
    31d6:	f009 f91a 	bl	c40e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    31da:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    31de:	46d8      	mov	r8, fp
			precision = -1;

			break;
    31e0:	e08e      	b.n	3300 <cbvprintf+0x49c>
				len = strlen(bps);
    31e2:	4648      	mov	r0, r9
    31e4:	f009 f90a 	bl	c3fc <strlen>
    31e8:	e7f7      	b.n	31da <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    31ea:	9b04      	ldr	r3, [sp, #16]
    31ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    31f0:	46d8      	mov	r8, fp
			bpe = buf + 1;
    31f2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    31f6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    31fa:	e081      	b.n	3300 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    31fc:	f018 0f08 	tst.w	r8, #8
    3200:	d105      	bne.n	320e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    3202:	f018 0810 	ands.w	r8, r8, #16
    3206:	d004      	beq.n	3212 <cbvprintf+0x3ae>
				sign = ' ';
    3208:	f04f 0820 	mov.w	r8, #32
    320c:	e001      	b.n	3212 <cbvprintf+0x3ae>
				sign = '+';
    320e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3212:	9a04      	ldr	r2, [sp, #16]
    3214:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    3216:	2b00      	cmp	r3, #0
    3218:	db02      	blt.n	3220 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    321a:	9204      	str	r2, [sp, #16]
    321c:	9305      	str	r3, [sp, #20]
    321e:	e008      	b.n	3232 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    3220:	4252      	negs	r2, r2
    3222:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3226:	9204      	str	r2, [sp, #16]
    3228:	9305      	str	r3, [sp, #20]
				sign = '-';
    322a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    322e:	e000      	b.n	3232 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    3230:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3232:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3236:	9300      	str	r3, [sp, #0]
    3238:	ab0a      	add	r3, sp, #40	; 0x28
    323a:	aa06      	add	r2, sp, #24
    323c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3240:	f008 fed7 	bl	bff2 <encode_uint>
    3244:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3246:	f1ba 0f00 	cmp.w	sl, #0
    324a:	f2c0 8088 	blt.w	335e <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    324e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3252:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3256:	f89d 2018 	ldrb.w	r2, [sp, #24]
    325a:	f36f 1286 	bfc	r2, #6, #1
    325e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3262:	459a      	cmp	sl, r3
    3264:	d97e      	bls.n	3364 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    3266:	ebaa 0303 	sub.w	r3, sl, r3
    326a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    326c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3270:	e046      	b.n	3300 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3272:	9804      	ldr	r0, [sp, #16]
    3274:	b928      	cbnz	r0, 3282 <cbvprintf+0x41e>
		char sign = 0;
    3276:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3278:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 3430 <cbvprintf+0x5cc>
			bps = "(nil)";
    327c:	f1aa 0905 	sub.w	r9, sl, #5
    3280:	e03e      	b.n	3300 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3282:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3286:	9300      	str	r3, [sp, #0]
    3288:	ab0a      	add	r3, sp, #40	; 0x28
    328a:	aa06      	add	r2, sp, #24
    328c:	2100      	movs	r1, #0
    328e:	f008 feb0 	bl	bff2 <encode_uint>
    3292:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3294:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3298:	f043 0310 	orr.w	r3, r3, #16
    329c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    32a0:	2378      	movs	r3, #120	; 0x78
    32a2:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    32a6:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    32a8:	e7cd      	b.n	3246 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    32aa:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    32ac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    32b0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    32b4:	2b07      	cmp	r3, #7
    32b6:	d806      	bhi.n	32c6 <cbvprintf+0x462>
    32b8:	e8df f003 	tbb	[pc, r3]
    32bc:	0f0d0b04 	.word	0x0f0d0b04
    32c0:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    32c4:	6014      	str	r4, [r2, #0]
		char sign = 0;
    32c6:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    32c8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    32cc:	f04f 0900 	mov.w	r9, #0
}
    32d0:	e016      	b.n	3300 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    32d2:	7014      	strb	r4, [r2, #0]
		break;
    32d4:	e7f7      	b.n	32c6 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    32d6:	8014      	strh	r4, [r2, #0]
		break;
    32d8:	e7f5      	b.n	32c6 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    32da:	6014      	str	r4, [r2, #0]
		break;
    32dc:	e7f3      	b.n	32c6 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    32de:	17e3      	asrs	r3, r4, #31
    32e0:	6014      	str	r4, [r2, #0]
    32e2:	6053      	str	r3, [r2, #4]
		break;
    32e4:	e7ef      	b.n	32c6 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    32e6:	17e3      	asrs	r3, r4, #31
    32e8:	6014      	str	r4, [r2, #0]
    32ea:	6053      	str	r3, [r2, #4]
		break;
    32ec:	e7eb      	b.n	32c6 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    32ee:	6014      	str	r4, [r2, #0]
		break;
    32f0:	e7e9      	b.n	32c6 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    32f2:	6014      	str	r4, [r2, #0]
		break;
    32f4:	e7e7      	b.n	32c6 <cbvprintf+0x462>
		switch (conv->specifier) {
    32f6:	46d8      	mov	r8, fp
    32f8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    32fc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3300:	f1b9 0f00 	cmp.w	r9, #0
    3304:	f000 808d 	beq.w	3422 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3308:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    330c:	f1b8 0f00 	cmp.w	r8, #0
    3310:	d000      	beq.n	3314 <cbvprintf+0x4b0>
			nj_len += 1U;
    3312:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    3314:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3318:	f012 0f10 	tst.w	r2, #16
    331c:	d025      	beq.n	336a <cbvprintf+0x506>
			nj_len += 2U;
    331e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3320:	9907      	ldr	r1, [sp, #28]
    3322:	440b      	add	r3, r1
		if (conv->pad_fp) {
    3324:	f012 0f40 	tst.w	r2, #64	; 0x40
    3328:	d001      	beq.n	332e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    332a:	9a08      	ldr	r2, [sp, #32]
    332c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    332e:	2f00      	cmp	r7, #0
    3330:	dd31      	ble.n	3396 <cbvprintf+0x532>
			width -= (int)nj_len;
    3332:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3334:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3338:	f013 0f04 	tst.w	r3, #4
    333c:	d12b      	bne.n	3396 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    333e:	f013 0f40 	tst.w	r3, #64	; 0x40
    3342:	d017      	beq.n	3374 <cbvprintf+0x510>
					if (sign != 0) {
    3344:	f1b8 0f00 	cmp.w	r8, #0
    3348:	d017      	beq.n	337a <cbvprintf+0x516>
						OUTC(sign);
    334a:	4629      	mov	r1, r5
    334c:	4640      	mov	r0, r8
    334e:	47b0      	blx	r6
    3350:	2800      	cmp	r0, #0
    3352:	db6a      	blt.n	342a <cbvprintf+0x5c6>
    3354:	3401      	adds	r4, #1
						sign = 0;
    3356:	46d8      	mov	r8, fp
					}
					pad = '0';
    3358:	f04f 0b30 	mov.w	fp, #48	; 0x30
    335c:	e00f      	b.n	337e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    335e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3362:	e7cd      	b.n	3300 <cbvprintf+0x49c>
    3364:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3368:	e7ca      	b.n	3300 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    336a:	f012 0f08 	tst.w	r2, #8
    336e:	d0d7      	beq.n	3320 <cbvprintf+0x4bc>
			nj_len += 1U;
    3370:	3301      	adds	r3, #1
    3372:	e7d5      	b.n	3320 <cbvprintf+0x4bc>
				char pad = ' ';
    3374:	f04f 0b20 	mov.w	fp, #32
    3378:	e001      	b.n	337e <cbvprintf+0x51a>
					pad = '0';
    337a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    337e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3380:	1e5f      	subs	r7, r3, #1
    3382:	2b00      	cmp	r3, #0
    3384:	dd07      	ble.n	3396 <cbvprintf+0x532>
					OUTC(pad);
    3386:	4629      	mov	r1, r5
    3388:	4658      	mov	r0, fp
    338a:	47b0      	blx	r6
    338c:	2800      	cmp	r0, #0
    338e:	db4c      	blt.n	342a <cbvprintf+0x5c6>
    3390:	3401      	adds	r4, #1
				while (width-- > 0) {
    3392:	463b      	mov	r3, r7
    3394:	e7f4      	b.n	3380 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3396:	f1b8 0f00 	cmp.w	r8, #0
    339a:	d005      	beq.n	33a8 <cbvprintf+0x544>
			OUTC(sign);
    339c:	4629      	mov	r1, r5
    339e:	4640      	mov	r0, r8
    33a0:	47b0      	blx	r6
    33a2:	2800      	cmp	r0, #0
    33a4:	db41      	blt.n	342a <cbvprintf+0x5c6>
    33a6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    33a8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    33ac:	f3c3 1200 	ubfx	r2, r3, #4, #1
    33b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    33b4:	4313      	orrs	r3, r2
    33b6:	d005      	beq.n	33c4 <cbvprintf+0x560>
				OUTC('0');
    33b8:	4629      	mov	r1, r5
    33ba:	2030      	movs	r0, #48	; 0x30
    33bc:	47b0      	blx	r6
    33be:	2800      	cmp	r0, #0
    33c0:	db33      	blt.n	342a <cbvprintf+0x5c6>
    33c2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    33c4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    33c8:	f013 0f10 	tst.w	r3, #16
    33cc:	d006      	beq.n	33dc <cbvprintf+0x578>
				OUTC(conv->specifier);
    33ce:	4629      	mov	r1, r5
    33d0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33d4:	47b0      	blx	r6
    33d6:	2800      	cmp	r0, #0
    33d8:	db27      	blt.n	342a <cbvprintf+0x5c6>
    33da:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    33dc:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    33de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    33e2:	2b00      	cmp	r3, #0
    33e4:	dd07      	ble.n	33f6 <cbvprintf+0x592>
				OUTC('0');
    33e6:	4629      	mov	r1, r5
    33e8:	2030      	movs	r0, #48	; 0x30
    33ea:	47b0      	blx	r6
    33ec:	2800      	cmp	r0, #0
    33ee:	db1c      	blt.n	342a <cbvprintf+0x5c6>
    33f0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    33f2:	4643      	mov	r3, r8
    33f4:	e7f3      	b.n	33de <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    33f6:	4653      	mov	r3, sl
    33f8:	464a      	mov	r2, r9
    33fa:	4629      	mov	r1, r5
    33fc:	4630      	mov	r0, r6
    33fe:	f008 fe62 	bl	c0c6 <outs>
    3402:	2800      	cmp	r0, #0
    3404:	db11      	blt.n	342a <cbvprintf+0x5c6>
    3406:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3408:	2f00      	cmp	r7, #0
    340a:	dd07      	ble.n	341c <cbvprintf+0x5b8>
			OUTC(' ');
    340c:	4629      	mov	r1, r5
    340e:	2020      	movs	r0, #32
    3410:	47b0      	blx	r6
    3412:	2800      	cmp	r0, #0
    3414:	db09      	blt.n	342a <cbvprintf+0x5c6>
    3416:	3401      	adds	r4, #1
			--width;
    3418:	3f01      	subs	r7, #1
    341a:	e7f5      	b.n	3408 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    341c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3420:	e528      	b.n	2e74 <cbvprintf+0x10>
    3422:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3426:	e525      	b.n	2e74 <cbvprintf+0x10>
		}
	}

	return count;
    3428:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    342a:	b011      	add	sp, #68	; 0x44
    342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3430:	0000df7d 	.word	0x0000df7d

00003434 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    3434:	b508      	push	{r3, lr}
	__asm__ volatile(
    3436:	f04f 0220 	mov.w	r2, #32
    343a:	f3ef 8311 	mrs	r3, BASEPRI
    343e:	f382 8812 	msr	BASEPRI_MAX, r2
    3442:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    3446:	f001 ff27 	bl	5298 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    344a:	4803      	ldr	r0, [pc, #12]	; (3458 <sys_reboot+0x24>)
    344c:	f008 fcd7 	bl	bdfe <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3450:	f000 ffa0 	bl	4394 <arch_cpu_idle>
    3454:	e7fc      	b.n	3450 <sys_reboot+0x1c>
    3456:	bf00      	nop
    3458:	0000df80 	.word	0x0000df80

0000345c <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    345c:	2900      	cmp	r1, #0
    345e:	d150      	bne.n	3502 <msg_process+0xa6>
{
    3460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3464:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    3466:	2400      	movs	r4, #0
    3468:	e022      	b.n	34b0 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    346a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3504 <msg_process+0xa8>
    346e:	f44f 7399 	mov.w	r3, #306	; 0x132
    3472:	464a      	mov	r2, r9
    3474:	4924      	ldr	r1, [pc, #144]	; (3508 <msg_process+0xac>)
    3476:	4825      	ldr	r0, [pc, #148]	; (350c <msg_process+0xb0>)
    3478:	f008 fe46 	bl	c108 <assert_print>
    347c:	f44f 7199 	mov.w	r1, #306	; 0x132
    3480:	4648      	mov	r0, r9
    3482:	f008 fe3a 	bl	c0fa <assert_post_action>
    3486:	e01f      	b.n	34c8 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    3488:	f8df 9078 	ldr.w	r9, [pc, #120]	; 3504 <msg_process+0xa8>
    348c:	2385      	movs	r3, #133	; 0x85
    348e:	464a      	mov	r2, r9
    3490:	491d      	ldr	r1, [pc, #116]	; (3508 <msg_process+0xac>)
    3492:	481e      	ldr	r0, [pc, #120]	; (350c <msg_process+0xb0>)
    3494:	f008 fe38 	bl	c108 <assert_print>
    3498:	2185      	movs	r1, #133	; 0x85
    349a:	4648      	mov	r0, r9
    349c:	f008 fe2d 	bl	c0fa <assert_post_action>
    34a0:	e01e      	b.n	34e0 <msg_process+0x84>
	backend->api->process(backend, msg);
    34a2:	f858 3005 	ldr.w	r3, [r8, r5]
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	4639      	mov	r1, r7
    34aa:	4630      	mov	r0, r6
    34ac:	4798      	blx	r3
    34ae:	3401      	adds	r4, #1
    34b0:	4b17      	ldr	r3, [pc, #92]	; (3510 <msg_process+0xb4>)
    34b2:	4a18      	ldr	r2, [pc, #96]	; (3514 <msg_process+0xb8>)
    34b4:	1a9b      	subs	r3, r3, r2
    34b6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    34ba:	da20      	bge.n	34fe <msg_process+0xa2>
	return &__log_backends_start[idx];
    34bc:	ea4f 1804 	mov.w	r8, r4, lsl #4
    34c0:	4d14      	ldr	r5, [pc, #80]	; (3514 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    34c2:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    34c6:	d0d0      	beq.n	346a <msg_process+0xe>
	return backend->cb->active;
    34c8:	6873      	ldr	r3, [r6, #4]
    34ca:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    34cc:	2b00      	cmp	r3, #0
    34ce:	d0ee      	beq.n	34ae <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    34d0:	4639      	mov	r1, r7
    34d2:	4630      	mov	r0, r6
    34d4:	f008 fe29 	bl	c12a <msg_filter_check>
			if (log_backend_is_active(backend) &&
    34d8:	2800      	cmp	r0, #0
    34da:	d0e8      	beq.n	34ae <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    34dc:	2e00      	cmp	r6, #0
    34de:	d0d3      	beq.n	3488 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    34e0:	2f00      	cmp	r7, #0
    34e2:	d1de      	bne.n	34a2 <msg_process+0x46>
    34e4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3504 <msg_process+0xa8>
    34e8:	2386      	movs	r3, #134	; 0x86
    34ea:	464a      	mov	r2, r9
    34ec:	490a      	ldr	r1, [pc, #40]	; (3518 <msg_process+0xbc>)
    34ee:	4807      	ldr	r0, [pc, #28]	; (350c <msg_process+0xb0>)
    34f0:	f008 fe0a 	bl	c108 <assert_print>
    34f4:	2186      	movs	r1, #134	; 0x86
    34f6:	4648      	mov	r0, r9
    34f8:	f008 fdff 	bl	c0fa <assert_post_action>
    34fc:	e7d1      	b.n	34a2 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    34fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3502:	4770      	bx	lr
    3504:	0000dfac 	.word	0x0000dfac
    3508:	0000dfe4 	.word	0x0000dfe4
    350c:	0000d4bc 	.word	0x0000d4bc
    3510:	0000d360 	.word	0x0000d360
    3514:	0000d340 	.word	0x0000d340
    3518:	0000dffc 	.word	0x0000dffc

0000351c <log_format_func_t_get>:
}
    351c:	4b01      	ldr	r3, [pc, #4]	; (3524 <log_format_func_t_get+0x8>)
    351e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3522:	4770      	bx	lr
    3524:	0000e080 	.word	0x0000e080

00003528 <log_init>:
{
    3528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    352a:	4b20      	ldr	r3, [pc, #128]	; (35ac <log_init+0x84>)
    352c:	4a20      	ldr	r2, [pc, #128]	; (35b0 <log_init+0x88>)
    352e:	1a9b      	subs	r3, r3, r2
    3530:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3532:	2b90      	cmp	r3, #144	; 0x90
    3534:	d80e      	bhi.n	3554 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3536:	4b1f      	ldr	r3, [pc, #124]	; (35b4 <log_init+0x8c>)
    3538:	f3bf 8f5b 	dmb	ish
    353c:	e853 2f00 	ldrex	r2, [r3]
    3540:	1c51      	adds	r1, r2, #1
    3542:	e843 1000 	strex	r0, r1, [r3]
    3546:	2800      	cmp	r0, #0
    3548:	d1f8      	bne.n	353c <log_init+0x14>
    354a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    354e:	bb5a      	cbnz	r2, 35a8 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    3550:	2400      	movs	r4, #0
    3552:	e017      	b.n	3584 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3554:	4c18      	ldr	r4, [pc, #96]	; (35b8 <log_init+0x90>)
    3556:	f240 2373 	movw	r3, #627	; 0x273
    355a:	4622      	mov	r2, r4
    355c:	4917      	ldr	r1, [pc, #92]	; (35bc <log_init+0x94>)
    355e:	4818      	ldr	r0, [pc, #96]	; (35c0 <log_init+0x98>)
    3560:	f008 fdd2 	bl	c108 <assert_print>
    3564:	f240 2173 	movw	r1, #627	; 0x273
    3568:	4620      	mov	r0, r4
    356a:	f008 fdc6 	bl	c0fa <assert_post_action>
    356e:	e7e2      	b.n	3536 <log_init+0xe>
					   backend->cb->ctx,
    3570:	4b0f      	ldr	r3, [pc, #60]	; (35b0 <log_init+0x88>)
    3572:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    3576:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    3578:	2204      	movs	r2, #4
    357a:	6819      	ldr	r1, [r3, #0]
    357c:	4628      	mov	r0, r5
    357e:	f000 f8d3 	bl	3728 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3582:	3401      	adds	r4, #1
    3584:	42b4      	cmp	r4, r6
    3586:	da0f      	bge.n	35a8 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    3588:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    358a:	4d09      	ldr	r5, [pc, #36]	; (35b0 <log_init+0x88>)
    358c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    3590:	7b2b      	ldrb	r3, [r5, #12]
    3592:	2b00      	cmp	r3, #0
    3594:	d0f5      	beq.n	3582 <log_init+0x5a>
			if (backend->api->init != NULL) {
    3596:	0123      	lsls	r3, r4, #4
    3598:	4a05      	ldr	r2, [pc, #20]	; (35b0 <log_init+0x88>)
    359a:	58d3      	ldr	r3, [r2, r3]
    359c:	699b      	ldr	r3, [r3, #24]
    359e:	2b00      	cmp	r3, #0
    35a0:	d0e6      	beq.n	3570 <log_init+0x48>
				backend->api->init(backend);
    35a2:	4628      	mov	r0, r5
    35a4:	4798      	blx	r3
    35a6:	e7e3      	b.n	3570 <log_init+0x48>
}
    35a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35aa:	bf00      	nop
    35ac:	0000d360 	.word	0x0000d360
    35b0:	0000d340 	.word	0x0000d340
    35b4:	2000063c 	.word	0x2000063c
    35b8:	0000e010 	.word	0x0000e010
    35bc:	0000e058 	.word	0x0000e058
    35c0:	0000d4bc 	.word	0x0000d4bc

000035c4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    35c4:	b138      	cbz	r0, 35d6 <log_set_timestamp_func+0x12>
{
    35c6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    35c8:	4a04      	ldr	r2, [pc, #16]	; (35dc <log_set_timestamp_func+0x18>)
    35ca:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    35cc:	4608      	mov	r0, r1
    35ce:	f000 fabf 	bl	3b50 <log_output_timestamp_freq_set>
	return 0;
    35d2:	2000      	movs	r0, #0
}
    35d4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    35d6:	f06f 0015 	mvn.w	r0, #21
}
    35da:	4770      	bx	lr
    35dc:	2000009c 	.word	0x2000009c

000035e0 <log_core_init>:
{
    35e0:	b508      	push	{r3, lr}
	panic_mode = false;
    35e2:	2300      	movs	r3, #0
    35e4:	4a04      	ldr	r2, [pc, #16]	; (35f8 <log_core_init+0x18>)
    35e6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    35e8:	4a04      	ldr	r2, [pc, #16]	; (35fc <log_core_init+0x1c>)
    35ea:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    35ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    35f0:	4803      	ldr	r0, [pc, #12]	; (3600 <log_core_init+0x20>)
    35f2:	f7ff ffe7 	bl	35c4 <log_set_timestamp_func>
}
    35f6:	bd08      	pop	{r3, pc}
    35f8:	2000138d 	.word	0x2000138d
    35fc:	20000638 	.word	0x20000638
    3600:	0000c12f 	.word	0x0000c12f

00003604 <z_impl_log_panic>:
	if (panic_mode) {
    3604:	4b20      	ldr	r3, [pc, #128]	; (3688 <z_impl_log_panic+0x84>)
    3606:	781b      	ldrb	r3, [r3, #0]
    3608:	b103      	cbz	r3, 360c <z_impl_log_panic+0x8>
    360a:	4770      	bx	lr
{
    360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    3610:	f7ff ff8a 	bl	3528 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3614:	2400      	movs	r4, #0
    3616:	e013      	b.n	3640 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    3618:	f8df 8070 	ldr.w	r8, [pc, #112]	; 368c <z_impl_log_panic+0x88>
    361c:	f44f 7399 	mov.w	r3, #306	; 0x132
    3620:	4642      	mov	r2, r8
    3622:	491b      	ldr	r1, [pc, #108]	; (3690 <z_impl_log_panic+0x8c>)
    3624:	481b      	ldr	r0, [pc, #108]	; (3694 <z_impl_log_panic+0x90>)
    3626:	f008 fd6f 	bl	c108 <assert_print>
    362a:	f44f 7199 	mov.w	r1, #306	; 0x132
    362e:	4640      	mov	r0, r8
    3630:	f008 fd63 	bl	c0fa <assert_post_action>
    3634:	e00f      	b.n	3656 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    3636:	597b      	ldr	r3, [r7, r5]
    3638:	695b      	ldr	r3, [r3, #20]
    363a:	4630      	mov	r0, r6
    363c:	4798      	blx	r3
    363e:	3401      	adds	r4, #1
    3640:	4b15      	ldr	r3, [pc, #84]	; (3698 <z_impl_log_panic+0x94>)
    3642:	4a16      	ldr	r2, [pc, #88]	; (369c <z_impl_log_panic+0x98>)
    3644:	1a9b      	subs	r3, r3, r2
    3646:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    364a:	da17      	bge.n	367c <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    364c:	0127      	lsls	r7, r4, #4
    364e:	4d13      	ldr	r5, [pc, #76]	; (369c <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    3650:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    3654:	d0e0      	beq.n	3618 <z_impl_log_panic+0x14>
	return backend->cb->active;
    3656:	6873      	ldr	r3, [r6, #4]
    3658:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    365a:	2b00      	cmp	r3, #0
    365c:	d0ef      	beq.n	363e <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    365e:	2e00      	cmp	r6, #0
    3660:	d1e9      	bne.n	3636 <z_impl_log_panic+0x32>
    3662:	f8df 8028 	ldr.w	r8, [pc, #40]	; 368c <z_impl_log_panic+0x88>
    3666:	23d7      	movs	r3, #215	; 0xd7
    3668:	4642      	mov	r2, r8
    366a:	4909      	ldr	r1, [pc, #36]	; (3690 <z_impl_log_panic+0x8c>)
    366c:	4809      	ldr	r0, [pc, #36]	; (3694 <z_impl_log_panic+0x90>)
    366e:	f008 fd4b 	bl	c108 <assert_print>
    3672:	21d7      	movs	r1, #215	; 0xd7
    3674:	4640      	mov	r0, r8
    3676:	f008 fd40 	bl	c0fa <assert_post_action>
    367a:	e7dc      	b.n	3636 <z_impl_log_panic+0x32>
	panic_mode = true;
    367c:	4b02      	ldr	r3, [pc, #8]	; (3688 <z_impl_log_panic+0x84>)
    367e:	2201      	movs	r2, #1
    3680:	701a      	strb	r2, [r3, #0]
}
    3682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3686:	bf00      	nop
    3688:	2000138d 	.word	0x2000138d
    368c:	0000dfac 	.word	0x0000dfac
    3690:	0000dfe4 	.word	0x0000dfe4
    3694:	0000d4bc 	.word	0x0000d4bc
    3698:	0000d360 	.word	0x0000d360
    369c:	0000d340 	.word	0x0000d340

000036a0 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    36a0:	4b01      	ldr	r3, [pc, #4]	; (36a8 <z_log_notify_backend_enabled+0x8>)
    36a2:	2201      	movs	r2, #1
    36a4:	701a      	strb	r2, [r3, #0]
}
    36a6:	4770      	bx	lr
    36a8:	2000138c 	.word	0x2000138c

000036ac <z_log_dropped>:
    36ac:	4b0d      	ldr	r3, [pc, #52]	; (36e4 <z_log_dropped+0x38>)
    36ae:	f3bf 8f5b 	dmb	ish
    36b2:	e853 2f00 	ldrex	r2, [r3]
    36b6:	3201      	adds	r2, #1
    36b8:	e843 2100 	strex	r1, r2, [r3]
    36bc:	2900      	cmp	r1, #0
    36be:	d1f8      	bne.n	36b2 <z_log_dropped+0x6>
    36c0:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    36c4:	b900      	cbnz	r0, 36c8 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    36c6:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    36c8:	4b07      	ldr	r3, [pc, #28]	; (36e8 <z_log_dropped+0x3c>)
    36ca:	f3bf 8f5b 	dmb	ish
    36ce:	e853 2f00 	ldrex	r2, [r3]
    36d2:	3a01      	subs	r2, #1
    36d4:	e843 2100 	strex	r1, r2, [r3]
    36d8:	2900      	cmp	r1, #0
    36da:	d1f8      	bne.n	36ce <z_log_dropped+0x22>
    36dc:	f3bf 8f5b 	dmb	ish
    36e0:	e7f1      	b.n	36c6 <z_log_dropped+0x1a>
    36e2:	bf00      	nop
    36e4:	20000638 	.word	0x20000638
    36e8:	20000634 	.word	0x20000634

000036ec <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    36ec:	b510      	push	{r4, lr}
    36ee:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    36f0:	4b04      	ldr	r3, [pc, #16]	; (3704 <z_log_msg2_commit+0x18>)
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	4798      	blx	r3
    36f6:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    36f8:	2100      	movs	r1, #0
    36fa:	4620      	mov	r0, r4
    36fc:	f7ff feae 	bl	345c <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3700:	bd10      	pop	{r4, pc}
    3702:	bf00      	nop
    3704:	2000009c 	.word	0x2000009c

00003708 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3708:	4b05      	ldr	r3, [pc, #20]	; (3720 <log_source_name_get+0x18>)
    370a:	4a06      	ldr	r2, [pc, #24]	; (3724 <log_source_name_get+0x1c>)
    370c:	1a9b      	subs	r3, r3, r2
    370e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    3712:	d202      	bcs.n	371a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    3714:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3718:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    371a:	2000      	movs	r0, #0
}
    371c:	4770      	bx	lr
    371e:	bf00      	nop
    3720:	0000d340 	.word	0x0000d340
    3724:	0000d2f0 	.word	0x0000d2f0

00003728 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    372a:	4604      	mov	r4, r0
    372c:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    372e:	4d1e      	ldr	r5, [pc, #120]	; (37a8 <log_backend_enable+0x80>)
    3730:	1b45      	subs	r5, r0, r5
    3732:	112d      	asrs	r5, r5, #4
    3734:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3736:	6803      	ldr	r3, [r0, #0]
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	b163      	cbz	r3, 3756 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    373c:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    373e:	b1cc      	cbz	r4, 3774 <log_backend_enable+0x4c>
	backend->cb->id = id;
    3740:	6863      	ldr	r3, [r4, #4]
    3742:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    3744:	b314      	cbz	r4, 378c <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    3746:	6863      	ldr	r3, [r4, #4]
    3748:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    374a:	6863      	ldr	r3, [r4, #4]
    374c:	2201      	movs	r2, #1
    374e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    3750:	f7ff ffa6 	bl	36a0 <z_log_notify_backend_enabled>
}
    3754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3756:	4f15      	ldr	r7, [pc, #84]	; (37ac <log_backend_enable+0x84>)
    3758:	23bb      	movs	r3, #187	; 0xbb
    375a:	463a      	mov	r2, r7
    375c:	4914      	ldr	r1, [pc, #80]	; (37b0 <log_backend_enable+0x88>)
    375e:	4815      	ldr	r0, [pc, #84]	; (37b4 <log_backend_enable+0x8c>)
    3760:	f008 fcd2 	bl	c108 <assert_print>
    3764:	4814      	ldr	r0, [pc, #80]	; (37b8 <log_backend_enable+0x90>)
    3766:	f008 fccf 	bl	c108 <assert_print>
    376a:	21bb      	movs	r1, #187	; 0xbb
    376c:	4638      	mov	r0, r7
    376e:	f008 fcc4 	bl	c0fa <assert_post_action>
    3772:	e7e3      	b.n	373c <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    3774:	4f11      	ldr	r7, [pc, #68]	; (37bc <log_backend_enable+0x94>)
    3776:	23e6      	movs	r3, #230	; 0xe6
    3778:	463a      	mov	r2, r7
    377a:	4911      	ldr	r1, [pc, #68]	; (37c0 <log_backend_enable+0x98>)
    377c:	480d      	ldr	r0, [pc, #52]	; (37b4 <log_backend_enable+0x8c>)
    377e:	f008 fcc3 	bl	c108 <assert_print>
    3782:	21e6      	movs	r1, #230	; 0xe6
    3784:	4638      	mov	r0, r7
    3786:	f008 fcb8 	bl	c0fa <assert_post_action>
    378a:	e7d9      	b.n	3740 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    378c:	4d0b      	ldr	r5, [pc, #44]	; (37bc <log_backend_enable+0x94>)
    378e:	f240 1317 	movw	r3, #279	; 0x117
    3792:	462a      	mov	r2, r5
    3794:	490a      	ldr	r1, [pc, #40]	; (37c0 <log_backend_enable+0x98>)
    3796:	4807      	ldr	r0, [pc, #28]	; (37b4 <log_backend_enable+0x8c>)
    3798:	f008 fcb6 	bl	c108 <assert_print>
    379c:	f240 1117 	movw	r1, #279	; 0x117
    37a0:	4628      	mov	r0, r5
    37a2:	f008 fcaa 	bl	c0fa <assert_post_action>
    37a6:	e7ce      	b.n	3746 <log_backend_enable+0x1e>
    37a8:	0000d340 	.word	0x0000d340
    37ac:	0000e08c 	.word	0x0000e08c
    37b0:	0000e0e8 	.word	0x0000e0e8
    37b4:	0000d4bc 	.word	0x0000d4bc
    37b8:	0000e100 	.word	0x0000e100
    37bc:	0000dfac 	.word	0x0000dfac
    37c0:	0000dfe4 	.word	0x0000dfe4

000037c4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    37c4:	b40e      	push	{r1, r2, r3}
    37c6:	b500      	push	{lr}
    37c8:	b082      	sub	sp, #8
    37ca:	4601      	mov	r1, r0
    37cc:	ab03      	add	r3, sp, #12
    37ce:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    37d2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    37d4:	4803      	ldr	r0, [pc, #12]	; (37e4 <print_formatted+0x20>)
    37d6:	f7ff fb45 	bl	2e64 <cbvprintf>
	va_end(args);

	return length;
}
    37da:	b002      	add	sp, #8
    37dc:	f85d eb04 	ldr.w	lr, [sp], #4
    37e0:	b003      	add	sp, #12
    37e2:	4770      	bx	lr
    37e4:	0000c163 	.word	0x0000c163

000037e8 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    37e8:	b530      	push	{r4, r5, lr}
    37ea:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    37ec:	f011 0f44 	tst.w	r1, #68	; 0x44
    37f0:	d005      	beq.n	37fe <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    37f2:	4b1a      	ldr	r3, [pc, #104]	; (385c <timestamp_print+0x74>)
    37f4:	681c      	ldr	r4, [r3, #0]
    37f6:	b934      	cbnz	r4, 3806 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    37f8:	2000      	movs	r0, #0
	}

	return length;
}
    37fa:	b005      	add	sp, #20
    37fc:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    37fe:	4918      	ldr	r1, [pc, #96]	; (3860 <timestamp_print+0x78>)
    3800:	f7ff ffe0 	bl	37c4 <print_formatted>
    3804:	e7f9      	b.n	37fa <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3806:	4b17      	ldr	r3, [pc, #92]	; (3864 <timestamp_print+0x7c>)
    3808:	6819      	ldr	r1, [r3, #0]
    380a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    380e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    3812:	4a15      	ldr	r2, [pc, #84]	; (3868 <timestamp_print+0x80>)
    3814:	fba2 320c 	umull	r3, r2, r2, ip
    3818:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    381a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    381e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    3822:	4b12      	ldr	r3, [pc, #72]	; (386c <timestamp_print+0x84>)
    3824:	fba3 530e 	umull	r5, r3, r3, lr
    3828:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    382a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    382e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    3832:	fb0c f101 	mul.w	r1, ip, r1
    3836:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    383a:	fb05 1114 	mls	r1, r5, r4, r1
    383e:	fb0c f101 	mul.w	r1, ip, r1
    3842:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    3846:	9102      	str	r1, [sp, #8]
    3848:	9501      	str	r5, [sp, #4]
    384a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    384e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    3852:	9100      	str	r1, [sp, #0]
    3854:	4906      	ldr	r1, [pc, #24]	; (3870 <timestamp_print+0x88>)
    3856:	f7ff ffb5 	bl	37c4 <print_formatted>
    385a:	e7ce      	b.n	37fa <timestamp_print+0x12>
    385c:	20000640 	.word	0x20000640
    3860:	0000e124 	.word	0x0000e124
    3864:	20000644 	.word	0x20000644
    3868:	91a2b3c5 	.word	0x91a2b3c5
    386c:	88888889 	.word	0x88888889
    3870:	0000e130 	.word	0x0000e130

00003874 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3874:	b161      	cbz	r1, 3890 <color_print+0x1c>
{
    3876:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3878:	b12a      	cbz	r2, 3886 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    387a:	4a06      	ldr	r2, [pc, #24]	; (3894 <color_print+0x20>)
    387c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3880:	b912      	cbnz	r2, 3888 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3882:	4a05      	ldr	r2, [pc, #20]	; (3898 <color_print+0x24>)
    3884:	e000      	b.n	3888 <color_print+0x14>
    3886:	4a04      	ldr	r2, [pc, #16]	; (3898 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3888:	4904      	ldr	r1, [pc, #16]	; (389c <color_print+0x28>)
    388a:	f7ff ff9b 	bl	37c4 <print_formatted>
	}
}
    388e:	bd08      	pop	{r3, pc}
    3890:	4770      	bx	lr
    3892:	bf00      	nop
    3894:	0000e1f0 	.word	0x0000e1f0
    3898:	0000e14c 	.word	0x0000e14c
    389c:	0000e154 	.word	0x0000e154

000038a0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    38a0:	f011 0f10 	tst.w	r1, #16
    38a4:	d10b      	bne.n	38be <newline_print+0x1e>
{
    38a6:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    38a8:	f011 0f20 	tst.w	r1, #32
    38ac:	d003      	beq.n	38b6 <newline_print+0x16>
		print_formatted(ctx, "\n");
    38ae:	4904      	ldr	r1, [pc, #16]	; (38c0 <newline_print+0x20>)
    38b0:	f7ff ff88 	bl	37c4 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    38b4:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    38b6:	4903      	ldr	r1, [pc, #12]	; (38c4 <newline_print+0x24>)
    38b8:	f7ff ff84 	bl	37c4 <print_formatted>
    38bc:	e7fa      	b.n	38b4 <newline_print+0x14>
    38be:	4770      	bx	lr
    38c0:	0000d8d4 	.word	0x0000d8d4
    38c4:	0000f860 	.word	0x0000f860

000038c8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    38c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38cc:	4605      	mov	r5, r0
    38ce:	460f      	mov	r7, r1
    38d0:	4616      	mov	r6, r2
    38d2:	4698      	mov	r8, r3
	newline_print(output, flags);
    38d4:	9906      	ldr	r1, [sp, #24]
    38d6:	f7ff ffe3 	bl	38a0 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    38da:	2400      	movs	r4, #0
    38dc:	4544      	cmp	r4, r8
    38de:	da05      	bge.n	38ec <hexdump_line_print+0x24>
		print_formatted(output, " ");
    38e0:	4923      	ldr	r1, [pc, #140]	; (3970 <hexdump_line_print+0xa8>)
    38e2:	4628      	mov	r0, r5
    38e4:	f7ff ff6e 	bl	37c4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    38e8:	3401      	adds	r4, #1
    38ea:	e7f7      	b.n	38dc <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38ec:	2400      	movs	r4, #0
    38ee:	e009      	b.n	3904 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    38f0:	491f      	ldr	r1, [pc, #124]	; (3970 <hexdump_line_print+0xa8>)
    38f2:	4628      	mov	r0, r5
    38f4:	f7ff ff66 	bl	37c4 <print_formatted>
    38f8:	e00b      	b.n	3912 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    38fa:	491e      	ldr	r1, [pc, #120]	; (3974 <hexdump_line_print+0xac>)
    38fc:	4628      	mov	r0, r5
    38fe:	f7ff ff61 	bl	37c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3902:	3401      	adds	r4, #1
    3904:	2c0f      	cmp	r4, #15
    3906:	dc0c      	bgt.n	3922 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3908:	2c00      	cmp	r4, #0
    390a:	dd02      	ble.n	3912 <hexdump_line_print+0x4a>
    390c:	f014 0f07 	tst.w	r4, #7
    3910:	d0ee      	beq.n	38f0 <hexdump_line_print+0x28>
		if (i < length) {
    3912:	42b4      	cmp	r4, r6
    3914:	d2f1      	bcs.n	38fa <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    3916:	5d3a      	ldrb	r2, [r7, r4]
    3918:	4917      	ldr	r1, [pc, #92]	; (3978 <hexdump_line_print+0xb0>)
    391a:	4628      	mov	r0, r5
    391c:	f7ff ff52 	bl	37c4 <print_formatted>
    3920:	e7ef      	b.n	3902 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    3922:	4916      	ldr	r1, [pc, #88]	; (397c <hexdump_line_print+0xb4>)
    3924:	4628      	mov	r0, r5
    3926:	f7ff ff4d 	bl	37c4 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    392a:	2400      	movs	r4, #0
    392c:	e009      	b.n	3942 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    392e:	4910      	ldr	r1, [pc, #64]	; (3970 <hexdump_line_print+0xa8>)
    3930:	4628      	mov	r0, r5
    3932:	f7ff ff47 	bl	37c4 <print_formatted>
    3936:	e00b      	b.n	3950 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    3938:	4911      	ldr	r1, [pc, #68]	; (3980 <hexdump_line_print+0xb8>)
    393a:	4628      	mov	r0, r5
    393c:	f7ff ff42 	bl	37c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3940:	3401      	adds	r4, #1
    3942:	2c0f      	cmp	r4, #15
    3944:	dc12      	bgt.n	396c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    3946:	2c00      	cmp	r4, #0
    3948:	dd02      	ble.n	3950 <hexdump_line_print+0x88>
    394a:	f014 0f07 	tst.w	r4, #7
    394e:	d0ee      	beq.n	392e <hexdump_line_print+0x66>
		if (i < length) {
    3950:	42b4      	cmp	r4, r6
    3952:	d206      	bcs.n	3962 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    3954:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    3956:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    395a:	2b5e      	cmp	r3, #94	; 0x5e
    395c:	d9ec      	bls.n	3938 <hexdump_line_print+0x70>
    395e:	222e      	movs	r2, #46	; 0x2e
    3960:	e7ea      	b.n	3938 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    3962:	4903      	ldr	r1, [pc, #12]	; (3970 <hexdump_line_print+0xa8>)
    3964:	4628      	mov	r0, r5
    3966:	f7ff ff2d 	bl	37c4 <print_formatted>
    396a:	e7e9      	b.n	3940 <hexdump_line_print+0x78>
		}
	}
}
    396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3970:	0000e17c 	.word	0x0000e17c
    3974:	0000e160 	.word	0x0000e160
    3978:	0000e158 	.word	0x0000e158
    397c:	0000e164 	.word	0x0000e164
    3980:	0000e168 	.word	0x0000e168

00003984 <ids_print>:
{
    3984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3988:	4680      	mov	r8, r0
    398a:	4616      	mov	r6, r2
    398c:	461d      	mov	r5, r3
    398e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    3992:	b959      	cbnz	r1, 39ac <ids_print+0x28>
	int total = 0;
    3994:	2400      	movs	r4, #0
	if (source_id >= 0) {
    3996:	2f00      	cmp	r7, #0
    3998:	db1c      	blt.n	39d4 <ids_print+0x50>
		total += print_formatted(output,
    399a:	b186      	cbz	r6, 39be <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    399c:	2301      	movs	r3, #1
    399e:	9a07      	ldr	r2, [sp, #28]
    39a0:	4093      	lsls	r3, r2
				(func_on &&
    39a2:	f013 0f10 	tst.w	r3, #16
    39a6:	d118      	bne.n	39da <ids_print+0x56>
		total += print_formatted(output,
    39a8:	4e0d      	ldr	r6, [pc, #52]	; (39e0 <ids_print+0x5c>)
    39aa:	e009      	b.n	39c0 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    39ac:	4b0d      	ldr	r3, [pc, #52]	; (39e4 <ids_print+0x60>)
    39ae:	9a07      	ldr	r2, [sp, #28]
    39b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    39b4:	490c      	ldr	r1, [pc, #48]	; (39e8 <ids_print+0x64>)
    39b6:	f7ff ff05 	bl	37c4 <print_formatted>
    39ba:	4604      	mov	r4, r0
    39bc:	e7eb      	b.n	3996 <ids_print+0x12>
		total += print_formatted(output,
    39be:	4e08      	ldr	r6, [pc, #32]	; (39e0 <ids_print+0x5c>)
    39c0:	4639      	mov	r1, r7
    39c2:	4628      	mov	r0, r5
    39c4:	f7ff fea0 	bl	3708 <log_source_name_get>
    39c8:	4602      	mov	r2, r0
    39ca:	4631      	mov	r1, r6
    39cc:	4640      	mov	r0, r8
    39ce:	f7ff fef9 	bl	37c4 <print_formatted>
    39d2:	4404      	add	r4, r0
}
    39d4:	4620      	mov	r0, r4
    39d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    39da:	4e04      	ldr	r6, [pc, #16]	; (39ec <ids_print+0x68>)
    39dc:	e7f0      	b.n	39c0 <ids_print+0x3c>
    39de:	bf00      	nop
    39e0:	0000e16c 	.word	0x0000e16c
    39e4:	0000e204 	.word	0x0000e204
    39e8:	0000e178 	.word	0x0000e178
    39ec:	0000e174 	.word	0x0000e174

000039f0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    39f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39f4:	b085      	sub	sp, #20
    39f6:	4605      	mov	r5, r0
    39f8:	460c      	mov	r4, r1
    39fa:	4616      	mov	r6, r2
    39fc:	9303      	str	r3, [sp, #12]
    39fe:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3a02:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3a06:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3a0a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3a0e:	f008 fba6 	bl	c15e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3a12:	b1e8      	cbz	r0, 3a50 <prefix_print+0x60>
    3a14:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3a16:	4913      	ldr	r1, [pc, #76]	; (3a64 <prefix_print+0x74>)
    3a18:	4628      	mov	r0, r5
    3a1a:	f7ff fed3 	bl	37c4 <print_formatted>
    3a1e:	4607      	mov	r7, r0
	}

	if (stamp) {
    3a20:	f1bb 0f00 	cmp.w	fp, #0
    3a24:	d116      	bne.n	3a54 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3a26:	4642      	mov	r2, r8
    3a28:	4651      	mov	r1, sl
    3a2a:	4628      	mov	r0, r5
    3a2c:	f008 fbc3 	bl	c1b6 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3a30:	f8cd 8004 	str.w	r8, [sp, #4]
    3a34:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    3a38:	9300      	str	r3, [sp, #0]
    3a3a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3a3e:	4632      	mov	r2, r6
    3a40:	4649      	mov	r1, r9
    3a42:	4628      	mov	r0, r5
    3a44:	f7ff ff9e 	bl	3984 <ids_print>
			domain_id, source_id, level);


	return length;
}
    3a48:	4438      	add	r0, r7
    3a4a:	b005      	add	sp, #20
    3a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3a50:	2700      	movs	r7, #0
    3a52:	e7e5      	b.n	3a20 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3a54:	9a03      	ldr	r2, [sp, #12]
    3a56:	4621      	mov	r1, r4
    3a58:	4628      	mov	r0, r5
    3a5a:	f7ff fec5 	bl	37e8 <timestamp_print>
    3a5e:	4407      	add	r7, r0
    3a60:	e7e1      	b.n	3a26 <prefix_print+0x36>
    3a62:	bf00      	nop
    3a64:	0000e180 	.word	0x0000e180

00003a68 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    3a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a6c:	b084      	sub	sp, #16
    3a6e:	4606      	mov	r6, r0
    3a70:	460c      	mov	r4, r1
    3a72:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    3a74:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    3a76:	880a      	ldrh	r2, [r1, #0]
    3a78:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3a7c:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    3a80:	d037      	beq.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
	return msg->hdr.source;
    3a82:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    3a84:	7809      	ldrb	r1, [r1, #0]
    3a86:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    3a8a:	b37a      	cbz	r2, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3a8c:	4829      	ldr	r0, [pc, #164]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3a8e:	1a12      	subs	r2, r2, r0
    3a90:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3a94:	9202      	str	r2, [sp, #8]
    3a96:	9101      	str	r1, [sp, #4]
    3a98:	f8cd 8000 	str.w	r8, [sp]
    3a9c:	2200      	movs	r2, #0
    3a9e:	4639      	mov	r1, r7
    3aa0:	4630      	mov	r0, r6
    3aa2:	f7ff ffa5 	bl	39f0 <prefix_print>
    3aa6:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3aa8:	4625      	mov	r5, r4
    3aaa:	f855 3b10 	ldr.w	r3, [r5], #16
    3aae:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    3ab2:	b153      	cbz	r3, 3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3ab4:	f1b8 0f00 	cmp.w	r8, #0
    3ab8:	d11e      	bne.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3aba:	481f      	ldr	r0, [pc, #124]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3abc:	462b      	mov	r3, r5
    3abe:	4632      	mov	r2, r6
    3ac0:	491e      	ldr	r1, [pc, #120]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3ac2:	f008 f950 	bl	bd66 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    3ac6:	2800      	cmp	r0, #0
    3ac8:	db18      	blt.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
	*len = msg->hdr.desc.data_len;
    3aca:	8862      	ldrh	r2, [r4, #2]
    3acc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3ad0:	6821      	ldr	r1, [r4, #0]
    3ad2:	f3c1 2149 	ubfx	r1, r1, #9, #10
    3ad6:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    3ad8:	b9fa      	cbnz	r2, 3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    3ada:	f1b8 0f00 	cmp.w	r8, #0
    3ade:	d122      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3ae0:	4630      	mov	r0, r6
    3ae2:	f008 fb9b 	bl	c21c <log_output_flush>
}
    3ae6:	b004      	add	sp, #16
    3ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    3aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3af0:	e7d0      	b.n	3a94 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    3af2:	f04f 0900 	mov.w	r9, #0
    3af6:	e7d7      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3af8:	4811      	ldr	r0, [pc, #68]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3afa:	e7df      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
		__ASSERT_NO_MSG(err >= 0);
    3afc:	f8df a044 	ldr.w	sl, [pc, #68]	; 3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b00:	f240 23b7 	movw	r3, #695	; 0x2b7
    3b04:	4652      	mov	r2, sl
    3b06:	4910      	ldr	r1, [pc, #64]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b08:	4810      	ldr	r0, [pc, #64]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3b0a:	f008 fafd 	bl	c108 <assert_print>
    3b0e:	f240 21b7 	movw	r1, #695	; 0x2b7
    3b12:	4650      	mov	r0, sl
    3b14:	f008 faf1 	bl	c0fa <assert_post_action>
    3b18:	e7d7      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    3b1a:	9700      	str	r7, [sp, #0]
    3b1c:	464b      	mov	r3, r9
    3b1e:	4630      	mov	r0, r6
    3b20:	f008 fb61 	bl	c1e6 <log_msg2_hexdump>
    3b24:	e7d9      	b.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
		postfix_print(output, flags, level);
    3b26:	4642      	mov	r2, r8
    3b28:	4639      	mov	r1, r7
    3b2a:	4630      	mov	r0, r6
    3b2c:	f008 fb4f 	bl	c1ce <postfix_print>
    3b30:	e7d6      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3b32:	bf00      	nop
    3b34:	0000d2f0 	.word	0x0000d2f0
    3b38:	0000c181 	.word	0x0000c181
    3b3c:	00002e65 	.word	0x00002e65
    3b40:	0000c163 	.word	0x0000c163
    3b44:	0000e184 	.word	0x0000e184
    3b48:	0000e1c4 	.word	0x0000e1c4
    3b4c:	0000d4bc 	.word	0x0000d4bc

00003b50 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3b50:	4b07      	ldr	r3, [pc, #28]	; (3b70 <log_output_timestamp_freq_set+0x20>)
    3b52:	2201      	movs	r2, #1
    3b54:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3b56:	e004      	b.n	3b62 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3b58:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3b5a:	4a05      	ldr	r2, [pc, #20]	; (3b70 <log_output_timestamp_freq_set+0x20>)
    3b5c:	6813      	ldr	r3, [r2, #0]
    3b5e:	005b      	lsls	r3, r3, #1
    3b60:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3b62:	4b04      	ldr	r3, [pc, #16]	; (3b74 <log_output_timestamp_freq_set+0x24>)
    3b64:	4298      	cmp	r0, r3
    3b66:	d8f7      	bhi.n	3b58 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3b68:	4b03      	ldr	r3, [pc, #12]	; (3b78 <log_output_timestamp_freq_set+0x28>)
    3b6a:	6018      	str	r0, [r3, #0]
}
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	20000644 	.word	0x20000644
    3b74:	000f4240 	.word	0x000f4240
    3b78:	20000640 	.word	0x20000640

00003b7c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b80:	b087      	sub	sp, #28
    3b82:	af02      	add	r7, sp, #8
    3b84:	4682      	mov	sl, r0
    3b86:	6079      	str	r1, [r7, #4]
    3b88:	4691      	mov	r9, r2
    3b8a:	4698      	mov	r8, r3
    3b8c:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3b8e:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    3b92:	f1bb 0f00 	cmp.w	fp, #0
    3b96:	d016      	beq.n	3bc6 <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    3b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b9a:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3b9c:	9300      	str	r3, [sp, #0]
    3b9e:	465b      	mov	r3, fp
    3ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3ba2:	2110      	movs	r1, #16
    3ba4:	2000      	movs	r0, #0
    3ba6:	f7fe f8fb 	bl	1da0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3baa:	1e05      	subs	r5, r0, #0
    3bac:	da0c      	bge.n	3bc8 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    3bae:	4c26      	ldr	r4, [pc, #152]	; (3c48 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    3bb0:	2367      	movs	r3, #103	; 0x67
    3bb2:	4622      	mov	r2, r4
    3bb4:	4925      	ldr	r1, [pc, #148]	; (3c4c <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3bb6:	4826      	ldr	r0, [pc, #152]	; (3c50 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3bb8:	f008 faa6 	bl	c108 <assert_print>
    3bbc:	2167      	movs	r1, #103	; 0x67
    3bbe:	4620      	mov	r0, r4
    3bc0:	f008 fa9b 	bl	c0fa <assert_post_action>
		va_end(ap2);
    3bc4:	e000      	b.n	3bc8 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    3bc6:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3bc8:	4629      	mov	r1, r5
    3bca:	19ab      	adds	r3, r5, r6
    3bcc:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3bce:	2400      	movs	r4, #0
    3bd0:	f36f 0400 	bfc	r4, #0, #1
    3bd4:	f36f 0441 	bfc	r4, #1, #1
    3bd8:	f36f 0482 	bfc	r4, #2, #1
    3bdc:	f36a 04c5 	bfi	r4, sl, #3, #3
    3be0:	f369 1488 	bfi	r4, r9, #6, #3
    3be4:	f365 2452 	bfi	r4, r5, #9, #10
    3be8:	f366 44de 	bfi	r4, r6, #19, #12
    3bec:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3bf0:	f023 0307 	bic.w	r3, r3, #7
    3bf4:	ebad 0d03 	sub.w	sp, sp, r3
    3bf8:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3bfa:	466b      	mov	r3, sp
    3bfc:	f113 0018 	adds.w	r0, r3, #24
    3c00:	d00a      	beq.n	3c18 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3c02:	f1bb 0f00 	cmp.w	fp, #0
    3c06:	d007      	beq.n	3c18 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c0a:	9300      	str	r3, [sp, #0]
    3c0c:	465b      	mov	r3, fp
    3c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c10:	f7fe f8c6 	bl	1da0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    3c14:	2800      	cmp	r0, #0
    3c16:	db09      	blt.n	3c2c <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3c18:	4643      	mov	r3, r8
    3c1a:	4622      	mov	r2, r4
    3c1c:	6879      	ldr	r1, [r7, #4]
    3c1e:	4628      	mov	r0, r5
    3c20:	f008 fb09 	bl	c236 <z_log_msg2_finalize>
	}
}
    3c24:	3714      	adds	r7, #20
    3c26:	46bd      	mov	sp, r7
    3c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    3c2c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 3c48 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    3c30:	2381      	movs	r3, #129	; 0x81
    3c32:	464a      	mov	r2, r9
    3c34:	4905      	ldr	r1, [pc, #20]	; (3c4c <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3c36:	4806      	ldr	r0, [pc, #24]	; (3c50 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3c38:	f008 fa66 	bl	c108 <assert_print>
    3c3c:	2181      	movs	r1, #129	; 0x81
    3c3e:	4648      	mov	r0, r9
    3c40:	f008 fa5b 	bl	c0fa <assert_post_action>
    3c44:	e7e8      	b.n	3c18 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3c46:	bf00      	nop
    3c48:	0000e218 	.word	0x0000e218
    3c4c:	0000e254 	.word	0x0000e254
    3c50:	0000d4bc 	.word	0x0000d4bc

00003c54 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3c54:	b570      	push	{r4, r5, r6, lr}
    3c56:	4606      	mov	r6, r0
    3c58:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    3c5a:	2400      	movs	r4, #0
    3c5c:	e006      	b.n	3c6c <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    3c5e:	4b05      	ldr	r3, [pc, #20]	; (3c74 <char_out+0x20>)
    3c60:	6818      	ldr	r0, [r3, #0]
    3c62:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3c64:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3c66:	685b      	ldr	r3, [r3, #4]
    3c68:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3c6a:	3401      	adds	r4, #1
    3c6c:	42ac      	cmp	r4, r5
    3c6e:	d3f6      	bcc.n	3c5e <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3c70:	4628      	mov	r0, r5
    3c72:	bd70      	pop	{r4, r5, r6, pc}
    3c74:	20000660 	.word	0x20000660

00003c78 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3c78:	4b01      	ldr	r3, [pc, #4]	; (3c80 <format_set+0x8>)
    3c7a:	6019      	str	r1, [r3, #0]
	return 0;
}
    3c7c:	2000      	movs	r0, #0
    3c7e:	4770      	bx	lr
    3c80:	20000650 	.word	0x20000650

00003c84 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    3c84:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3c86:	4809      	ldr	r0, [pc, #36]	; (3cac <log_backend_uart_init+0x28>)
    3c88:	4b09      	ldr	r3, [pc, #36]	; (3cb0 <log_backend_uart_init+0x2c>)
    3c8a:	6018      	str	r0, [r3, #0]
    3c8c:	f009 f8cc 	bl	ce28 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3c90:	b100      	cbz	r0, 3c94 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    3c92:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3c94:	4c07      	ldr	r4, [pc, #28]	; (3cb4 <log_backend_uart_init+0x30>)
    3c96:	2379      	movs	r3, #121	; 0x79
    3c98:	4622      	mov	r2, r4
    3c9a:	4907      	ldr	r1, [pc, #28]	; (3cb8 <log_backend_uart_init+0x34>)
    3c9c:	4807      	ldr	r0, [pc, #28]	; (3cbc <log_backend_uart_init+0x38>)
    3c9e:	f008 fa33 	bl	c108 <assert_print>
    3ca2:	2179      	movs	r1, #121	; 0x79
    3ca4:	4620      	mov	r0, r4
    3ca6:	f008 fa28 	bl	c0fa <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    3caa:	e7f2      	b.n	3c92 <log_backend_uart_init+0xe>
    3cac:	0000d140 	.word	0x0000d140
    3cb0:	20000660 	.word	0x20000660
    3cb4:	0000e260 	.word	0x0000e260
    3cb8:	0000e298 	.word	0x0000e298
    3cbc:	0000d4bc 	.word	0x0000d4bc

00003cc0 <panic>:

static void panic(struct log_backend const *const backend)
{
    3cc0:	b508      	push	{r3, lr}
	in_panic = true;
    3cc2:	4b03      	ldr	r3, [pc, #12]	; (3cd0 <panic+0x10>)
    3cc4:	2201      	movs	r2, #1
    3cc6:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3cc8:	4802      	ldr	r0, [pc, #8]	; (3cd4 <panic+0x14>)
    3cca:	f008 faa7 	bl	c21c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3cce:	bd08      	pop	{r3, pc}
    3cd0:	2000138e 	.word	0x2000138e
    3cd4:	0000e2f4 	.word	0x0000e2f4

00003cd8 <process>:
{
    3cd8:	b510      	push	{r4, lr}
    3cda:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <process+0x18>)
    3cde:	6818      	ldr	r0, [r3, #0]
    3ce0:	f7ff fc1c 	bl	351c <log_format_func_t_get>
    3ce4:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    3ce6:	220f      	movs	r2, #15
    3ce8:	4621      	mov	r1, r4
    3cea:	4802      	ldr	r0, [pc, #8]	; (3cf4 <process+0x1c>)
    3cec:	4798      	blx	r3
}
    3cee:	bd10      	pop	{r4, pc}
    3cf0:	20000650 	.word	0x20000650
    3cf4:	0000e2f4 	.word	0x0000e2f4

00003cf8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3cf8:	4b03      	ldr	r3, [pc, #12]	; (3d08 <log_backend_rtt_init+0x10>)
    3cfa:	2201      	movs	r2, #1
    3cfc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3cfe:	4b03      	ldr	r3, [pc, #12]	; (3d0c <log_backend_rtt_init+0x14>)
    3d00:	4a03      	ldr	r2, [pc, #12]	; (3d10 <log_backend_rtt_init+0x18>)
    3d02:	601a      	str	r2, [r3, #0]
}
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop
    3d08:	2000138f 	.word	0x2000138f
    3d0c:	2000068c 	.word	0x2000068c
    3d10:	20000674 	.word	0x20000674

00003d14 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3d14:	4b01      	ldr	r3, [pc, #4]	; (3d1c <format_set+0x8>)
    3d16:	6019      	str	r1, [r3, #0]
	return 0;
}
    3d18:	2000      	movs	r0, #0
    3d1a:	4770      	bx	lr
    3d1c:	20000690 	.word	0x20000690

00003d20 <on_failed_write>:
{
    3d20:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3d22:	b918      	cbnz	r0, 3d2c <on_failed_write+0xc>
		host_present = false;
    3d24:	4b04      	ldr	r3, [pc, #16]	; (3d38 <on_failed_write+0x18>)
    3d26:	2200      	movs	r2, #0
    3d28:	701a      	strb	r2, [r3, #0]
}
    3d2a:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3d2c:	f241 3088 	movw	r0, #5000	; 0x1388
    3d30:	f009 f96a 	bl	d008 <z_impl_k_busy_wait>
    3d34:	e7f9      	b.n	3d2a <on_failed_write+0xa>
    3d36:	bf00      	nop
    3d38:	2000138f 	.word	0x2000138f

00003d3c <on_write>:
{
    3d3c:	b538      	push	{r3, r4, r5, lr}
    3d3e:	4604      	mov	r4, r0
	host_present = true;
    3d40:	4b0a      	ldr	r3, [pc, #40]	; (3d6c <on_write+0x30>)
    3d42:	2201      	movs	r2, #1
    3d44:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3d46:	4b0a      	ldr	r3, [pc, #40]	; (3d70 <on_write+0x34>)
    3d48:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3d4a:	b92b      	cbnz	r3, 3d58 <on_write+0x1c>
}
    3d4c:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3d4e:	1e65      	subs	r5, r4, #1
    3d50:	4620      	mov	r0, r4
    3d52:	f7ff ffe5 	bl	3d20 <on_failed_write>
    3d56:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3d58:	2000      	movs	r0, #0
    3d5a:	f004 fdfb 	bl	8954 <SEGGER_RTT_HasDataUp>
    3d5e:	2800      	cmp	r0, #0
    3d60:	d0f4      	beq.n	3d4c <on_write+0x10>
    3d62:	4b02      	ldr	r3, [pc, #8]	; (3d6c <on_write+0x30>)
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d1f1      	bne.n	3d4e <on_write+0x12>
    3d6a:	e7ef      	b.n	3d4c <on_write+0x10>
    3d6c:	2000138f 	.word	0x2000138f
    3d70:	20001390 	.word	0x20001390

00003d74 <data_out_block_mode>:
{
    3d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d76:	4606      	mov	r6, r0
    3d78:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3d7a:	2704      	movs	r7, #4
    3d7c:	e006      	b.n	3d8c <data_out_block_mode+0x18>
			on_write(retry_cnt);
    3d7e:	4638      	mov	r0, r7
    3d80:	f7ff ffdc 	bl	3d3c <on_write>
	} while ((ret == 0) && host_present);
    3d84:	b99c      	cbnz	r4, 3dae <data_out_block_mode+0x3a>
    3d86:	4b0d      	ldr	r3, [pc, #52]	; (3dbc <data_out_block_mode+0x48>)
    3d88:	781b      	ldrb	r3, [r3, #0]
    3d8a:	b183      	cbz	r3, 3dae <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3d8c:	462a      	mov	r2, r5
    3d8e:	4631      	mov	r1, r6
    3d90:	2000      	movs	r0, #0
    3d92:	f004 fd7b 	bl	888c <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3d96:	4604      	mov	r4, r0
    3d98:	2800      	cmp	r0, #0
    3d9a:	d1f0      	bne.n	3d7e <data_out_block_mode+0xa>
		} else if (host_present) {
    3d9c:	4b07      	ldr	r3, [pc, #28]	; (3dbc <data_out_block_mode+0x48>)
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d0ef      	beq.n	3d84 <data_out_block_mode+0x10>
			retry_cnt--;
    3da4:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3da6:	4638      	mov	r0, r7
    3da8:	f7ff ffba 	bl	3d20 <on_failed_write>
    3dac:	e7ea      	b.n	3d84 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    3dae:	b914      	cbnz	r4, 3db6 <data_out_block_mode+0x42>
    3db0:	4b02      	ldr	r3, [pc, #8]	; (3dbc <data_out_block_mode+0x48>)
    3db2:	781b      	ldrb	r3, [r3, #0]
    3db4:	b903      	cbnz	r3, 3db8 <data_out_block_mode+0x44>
    3db6:	462c      	mov	r4, r5
}
    3db8:	4620      	mov	r0, r4
    3dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dbc:	2000138f 	.word	0x2000138f

00003dc0 <panic>:
{
    3dc0:	b508      	push	{r3, lr}
	panic_mode = true;
    3dc2:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <panic+0x10>)
    3dc4:	2201      	movs	r2, #1
    3dc6:	701a      	strb	r2, [r3, #0]
    3dc8:	4802      	ldr	r0, [pc, #8]	; (3dd4 <panic+0x14>)
    3dca:	f008 fa27 	bl	c21c <log_output_flush>
}
    3dce:	bd08      	pop	{r3, pc}
    3dd0:	20001390 	.word	0x20001390
    3dd4:	0000e334 	.word	0x0000e334

00003dd8 <process>:
{
    3dd8:	b510      	push	{r4, lr}
    3dda:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3ddc:	4b04      	ldr	r3, [pc, #16]	; (3df0 <process+0x18>)
    3dde:	6818      	ldr	r0, [r3, #0]
    3de0:	f7ff fb9c 	bl	351c <log_format_func_t_get>
    3de4:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3de6:	220f      	movs	r2, #15
    3de8:	4621      	mov	r1, r4
    3dea:	4802      	ldr	r0, [pc, #8]	; (3df4 <process+0x1c>)
    3dec:	4798      	blx	r3
}
    3dee:	bd10      	pop	{r4, pc}
    3df0:	20000690 	.word	0x20000690
    3df4:	0000e334 	.word	0x0000e334

00003df8 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3df8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    3dfa:	4b40      	ldr	r3, [pc, #256]	; (3efc <pm_system_resume+0x104>)
    3dfc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3dfe:	f005 031f 	and.w	r3, r5, #31
    3e02:	2201      	movs	r2, #1
    3e04:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3e06:	0969      	lsrs	r1, r5, #5
    3e08:	4b3d      	ldr	r3, [pc, #244]	; (3f00 <pm_system_resume+0x108>)
    3e0a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3e0e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e10:	f3bf 8f5b 	dmb	ish
    3e14:	e853 1f00 	ldrex	r1, [r3]
    3e18:	ea01 0400 	and.w	r4, r1, r0
    3e1c:	e843 4600 	strex	r6, r4, [r3]
    3e20:	2e00      	cmp	r6, #0
    3e22:	d1f7      	bne.n	3e14 <pm_system_resume+0x1c>
    3e24:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3e28:	420a      	tst	r2, r1
    3e2a:	d100      	bne.n	3e2e <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3e2c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3e2e:	4a35      	ldr	r2, [pc, #212]	; (3f04 <pm_system_resume+0x10c>)
    3e30:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3e34:	0098      	lsls	r0, r3, #2
    3e36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    3e3a:	4933      	ldr	r1, [pc, #204]	; (3f08 <pm_system_resume+0x110>)
    3e3c:	b1a9      	cbz	r1, 3e6a <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3e3e:	7859      	ldrb	r1, [r3, #1]
    3e40:	5c10      	ldrb	r0, [r2, r0]
    3e42:	f008 fb69 	bl	c518 <pm_state_exit_post_ops>
    3e46:	f04f 0320 	mov.w	r3, #32
    3e4a:	f3ef 8611 	mrs	r6, BASEPRI
    3e4e:	f383 8812 	msr	BASEPRI_MAX, r3
    3e52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e56:	482d      	ldr	r0, [pc, #180]	; (3f0c <pm_system_resume+0x114>)
    3e58:	f005 f8a2 	bl	8fa0 <z_spin_lock_valid>
    3e5c:	b158      	cbz	r0, 3e76 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    3e5e:	482b      	ldr	r0, [pc, #172]	; (3f0c <pm_system_resume+0x114>)
    3e60:	f005 f8be 	bl	8fe0 <z_spin_lock_set_owner>
	return list->head;
    3e64:	4b2a      	ldr	r3, [pc, #168]	; (3f10 <pm_system_resume+0x118>)
    3e66:	681c      	ldr	r4, [r3, #0]
    3e68:	e020      	b.n	3eac <pm_system_resume+0xb4>
	__asm__ volatile(
    3e6a:	2300      	movs	r3, #0
    3e6c:	f383 8811 	msr	BASEPRI, r3
    3e70:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3e74:	e7e7      	b.n	3e46 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e76:	4c27      	ldr	r4, [pc, #156]	; (3f14 <pm_system_resume+0x11c>)
    3e78:	238e      	movs	r3, #142	; 0x8e
    3e7a:	4622      	mov	r2, r4
    3e7c:	4926      	ldr	r1, [pc, #152]	; (3f18 <pm_system_resume+0x120>)
    3e7e:	4827      	ldr	r0, [pc, #156]	; (3f1c <pm_system_resume+0x124>)
    3e80:	f008 f942 	bl	c108 <assert_print>
    3e84:	4921      	ldr	r1, [pc, #132]	; (3f0c <pm_system_resume+0x114>)
    3e86:	4826      	ldr	r0, [pc, #152]	; (3f20 <pm_system_resume+0x128>)
    3e88:	f008 f93e 	bl	c108 <assert_print>
    3e8c:	218e      	movs	r1, #142	; 0x8e
    3e8e:	4620      	mov	r0, r4
    3e90:	f008 f933 	bl	c0fa <assert_post_action>
    3e94:	e7e3      	b.n	3e5e <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3e96:	4b19      	ldr	r3, [pc, #100]	; (3efc <pm_system_resume+0x104>)
    3e98:	7d1b      	ldrb	r3, [r3, #20]
    3e9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e9e:	4919      	ldr	r1, [pc, #100]	; (3f04 <pm_system_resume+0x10c>)
    3ea0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3ea4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ea6:	b10c      	cbz	r4, 3eac <pm_system_resume+0xb4>
	return node->next;
    3ea8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3eaa:	b124      	cbz	r4, 3eb6 <pm_system_resume+0xbe>
    3eac:	b11c      	cbz	r4, 3eb6 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    3eae:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    3eb0:	2a00      	cmp	r2, #0
    3eb2:	d1f0      	bne.n	3e96 <pm_system_resume+0x9e>
    3eb4:	e7f7      	b.n	3ea6 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3eb6:	4815      	ldr	r0, [pc, #84]	; (3f0c <pm_system_resume+0x114>)
    3eb8:	f005 f882 	bl	8fc0 <z_spin_unlock_valid>
    3ebc:	b170      	cbz	r0, 3edc <pm_system_resume+0xe4>
	__asm__ volatile(
    3ebe:	f386 8811 	msr	BASEPRI, r6
    3ec2:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3ec6:	4a0f      	ldr	r2, [pc, #60]	; (3f04 <pm_system_resume+0x10c>)
    3ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3ecc:	00a9      	lsls	r1, r5, #2
    3ece:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3ed2:	2300      	movs	r3, #0
    3ed4:	5053      	str	r3, [r2, r1]
    3ed6:	606b      	str	r3, [r5, #4]
    3ed8:	60ab      	str	r3, [r5, #8]
}
    3eda:	e7a7      	b.n	3e2c <pm_system_resume+0x34>
    3edc:	4c0d      	ldr	r4, [pc, #52]	; (3f14 <pm_system_resume+0x11c>)
    3ede:	23b9      	movs	r3, #185	; 0xb9
    3ee0:	4622      	mov	r2, r4
    3ee2:	4910      	ldr	r1, [pc, #64]	; (3f24 <pm_system_resume+0x12c>)
    3ee4:	480d      	ldr	r0, [pc, #52]	; (3f1c <pm_system_resume+0x124>)
    3ee6:	f008 f90f 	bl	c108 <assert_print>
    3eea:	4908      	ldr	r1, [pc, #32]	; (3f0c <pm_system_resume+0x114>)
    3eec:	480e      	ldr	r0, [pc, #56]	; (3f28 <pm_system_resume+0x130>)
    3eee:	f008 f90b 	bl	c108 <assert_print>
    3ef2:	21b9      	movs	r1, #185	; 0xb9
    3ef4:	4620      	mov	r0, r4
    3ef6:	f008 f900 	bl	c0fa <assert_post_action>
    3efa:	e7e0      	b.n	3ebe <pm_system_resume+0xc6>
    3efc:	20001160 	.word	0x20001160
    3f00:	200006bc 	.word	0x200006bc
    3f04:	200006ac 	.word	0x200006ac
    3f08:	0000c519 	.word	0x0000c519
    3f0c:	200006a0 	.word	0x200006a0
    3f10:	200006a4 	.word	0x200006a4
    3f14:	0000dd4c 	.word	0x0000dd4c
    3f18:	0000ddac 	.word	0x0000ddac
    3f1c:	0000d4bc 	.word	0x0000d4bc
    3f20:	0000ddc4 	.word	0x0000ddc4
    3f24:	0000dd7c 	.word	0x0000dd7c
    3f28:	0000dd94 	.word	0x0000dd94

00003f2c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3f2c:	b570      	push	{r4, r5, r6, lr}
    3f2e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3f30:	4b6d      	ldr	r3, [pc, #436]	; (40e8 <pm_system_suspend+0x1bc>)
    3f32:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3f34:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3f36:	f3bf 8f5b 	dmb	ish
    3f3a:	4b6c      	ldr	r3, [pc, #432]	; (40ec <pm_system_suspend+0x1c0>)
    3f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3f40:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3f44:	f005 021f 	and.w	r2, r5, #31
    3f48:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3f4a:	f013 0f01 	tst.w	r3, #1
    3f4e:	d01d      	beq.n	3f8c <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3f50:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3f54:	4a66      	ldr	r2, [pc, #408]	; (40f0 <pm_system_suspend+0x1c4>)
    3f56:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3f5a:	b333      	cbz	r3, 3faa <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3f5c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3f60:	d139      	bne.n	3fd6 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3f62:	f005 fe87 	bl	9c74 <k_sched_lock>
	__asm__ volatile(
    3f66:	f04f 0320 	mov.w	r3, #32
    3f6a:	f3ef 8611 	mrs	r6, BASEPRI
    3f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f76:	485f      	ldr	r0, [pc, #380]	; (40f4 <pm_system_suspend+0x1c8>)
    3f78:	f005 f812 	bl	8fa0 <z_spin_lock_valid>
    3f7c:	2800      	cmp	r0, #0
    3f7e:	d040      	beq.n	4002 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    3f80:	485c      	ldr	r0, [pc, #368]	; (40f4 <pm_system_suspend+0x1c8>)
    3f82:	f005 f82d 	bl	8fe0 <z_spin_lock_set_owner>
	return list->head;
    3f86:	4b5c      	ldr	r3, [pc, #368]	; (40f8 <pm_system_suspend+0x1cc>)
    3f88:	681c      	ldr	r4, [r3, #0]
    3f8a:	e055      	b.n	4038 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    3f8c:	4601      	mov	r1, r0
    3f8e:	4628      	mov	r0, r5
    3f90:	f000 f8d6 	bl	4140 <pm_policy_next_state>
		if (info != NULL) {
    3f94:	2800      	cmp	r0, #0
    3f96:	d0db      	beq.n	3f50 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    3f98:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3f9c:	4a54      	ldr	r2, [pc, #336]	; (40f0 <pm_system_suspend+0x1c4>)
    3f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3fa2:	c807      	ldmia	r0, {r0, r1, r2}
    3fa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    3fa8:	e7d2      	b.n	3f50 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3faa:	f005 021f 	and.w	r2, r5, #31
    3fae:	2301      	movs	r3, #1
    3fb0:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3fb2:	096d      	lsrs	r5, r5, #5
    3fb4:	4a4d      	ldr	r2, [pc, #308]	; (40ec <pm_system_suspend+0x1c0>)
    3fb6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3fba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3fbc:	f3bf 8f5b 	dmb	ish
    3fc0:	e855 2f00 	ldrex	r2, [r5]
    3fc4:	401a      	ands	r2, r3
    3fc6:	e845 2100 	strex	r1, r2, [r5]
    3fca:	2900      	cmp	r1, #0
    3fcc:	d1f8      	bne.n	3fc0 <pm_system_suspend+0x94>
    3fce:	f3bf 8f5b 	dmb	ish
		ret = false;
    3fd2:	2000      	movs	r0, #0
		goto end;
    3fd4:	e077      	b.n	40c6 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    3fd6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3fda:	4a45      	ldr	r2, [pc, #276]	; (40f0 <pm_system_suspend+0x1c4>)
    3fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3fe0:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3fe2:	0c41      	lsrs	r1, r0, #17
    3fe4:	03c0      	lsls	r0, r0, #15
    3fe6:	4b45      	ldr	r3, [pc, #276]	; (40fc <pm_system_suspend+0x1d0>)
    3fe8:	18c0      	adds	r0, r0, r3
    3fea:	4a45      	ldr	r2, [pc, #276]	; (4100 <pm_system_suspend+0x1d4>)
    3fec:	f04f 0300 	mov.w	r3, #0
    3ff0:	f141 0100 	adc.w	r1, r1, #0
    3ff4:	f7fc fa66 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3ff8:	2101      	movs	r1, #1
    3ffa:	1a20      	subs	r0, r4, r0
    3ffc:	f007 f9ca 	bl	b394 <z_set_timeout_expiry>
    4000:	e7af      	b.n	3f62 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4002:	4c40      	ldr	r4, [pc, #256]	; (4104 <pm_system_suspend+0x1d8>)
    4004:	238e      	movs	r3, #142	; 0x8e
    4006:	4622      	mov	r2, r4
    4008:	493f      	ldr	r1, [pc, #252]	; (4108 <pm_system_suspend+0x1dc>)
    400a:	4840      	ldr	r0, [pc, #256]	; (410c <pm_system_suspend+0x1e0>)
    400c:	f008 f87c 	bl	c108 <assert_print>
    4010:	4938      	ldr	r1, [pc, #224]	; (40f4 <pm_system_suspend+0x1c8>)
    4012:	483f      	ldr	r0, [pc, #252]	; (4110 <pm_system_suspend+0x1e4>)
    4014:	f008 f878 	bl	c108 <assert_print>
    4018:	218e      	movs	r1, #142	; 0x8e
    401a:	4620      	mov	r0, r4
    401c:	f008 f86d 	bl	c0fa <assert_post_action>
    4020:	e7ae      	b.n	3f80 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4022:	4b31      	ldr	r3, [pc, #196]	; (40e8 <pm_system_suspend+0x1bc>)
    4024:	7d1b      	ldrb	r3, [r3, #20]
    4026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    402a:	4931      	ldr	r1, [pc, #196]	; (40f0 <pm_system_suspend+0x1c4>)
    402c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    4030:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    4032:	b10c      	cbz	r4, 4038 <pm_system_suspend+0x10c>
	return node->next;
    4034:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4036:	b124      	cbz	r4, 4042 <pm_system_suspend+0x116>
    4038:	b11c      	cbz	r4, 4042 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    403a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    403c:	2a00      	cmp	r2, #0
    403e:	d1f0      	bne.n	4022 <pm_system_suspend+0xf6>
    4040:	e7f7      	b.n	4032 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4042:	482c      	ldr	r0, [pc, #176]	; (40f4 <pm_system_suspend+0x1c8>)
    4044:	f004 ffbc 	bl	8fc0 <z_spin_unlock_valid>
    4048:	2800      	cmp	r0, #0
    404a:	d03d      	beq.n	40c8 <pm_system_suspend+0x19c>
	__asm__ volatile(
    404c:	f386 8811 	msr	BASEPRI, r6
    4050:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4054:	f005 031f 	and.w	r3, r5, #31
    4058:	2101      	movs	r1, #1
    405a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    405c:	096b      	lsrs	r3, r5, #5
    405e:	4a2d      	ldr	r2, [pc, #180]	; (4114 <pm_system_suspend+0x1e8>)
    4060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4064:	f3bf 8f5b 	dmb	ish
    4068:	e853 2f00 	ldrex	r2, [r3]
    406c:	430a      	orrs	r2, r1
    406e:	e843 2000 	strex	r0, r2, [r3]
    4072:	2800      	cmp	r0, #0
    4074:	d1f8      	bne.n	4068 <pm_system_suspend+0x13c>
    4076:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    407a:	4b27      	ldr	r3, [pc, #156]	; (4118 <pm_system_suspend+0x1ec>)
    407c:	b14b      	cbz	r3, 4092 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    407e:	4b1c      	ldr	r3, [pc, #112]	; (40f0 <pm_system_suspend+0x1c4>)
    4080:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4084:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4088:	7849      	ldrb	r1, [r1, #1]
    408a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    408e:	f008 fa37 	bl	c500 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    4092:	f7ff feb1 	bl	3df8 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    4096:	f005 031f 	and.w	r3, r5, #31
    409a:	2401      	movs	r4, #1
    409c:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    40a0:	096d      	lsrs	r5, r5, #5
    40a2:	4a12      	ldr	r2, [pc, #72]	; (40ec <pm_system_suspend+0x1c0>)
    40a4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    40a8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    40aa:	f3bf 8f5b 	dmb	ish
    40ae:	e855 2f00 	ldrex	r2, [r5]
    40b2:	401a      	ands	r2, r3
    40b4:	e845 2100 	strex	r1, r2, [r5]
    40b8:	2900      	cmp	r1, #0
    40ba:	d1f8      	bne.n	40ae <pm_system_suspend+0x182>
    40bc:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    40c0:	f006 fb64 	bl	a78c <k_sched_unlock>
	bool ret = true;
    40c4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    40c6:	bd70      	pop	{r4, r5, r6, pc}
    40c8:	4c0e      	ldr	r4, [pc, #56]	; (4104 <pm_system_suspend+0x1d8>)
    40ca:	23b9      	movs	r3, #185	; 0xb9
    40cc:	4622      	mov	r2, r4
    40ce:	4913      	ldr	r1, [pc, #76]	; (411c <pm_system_suspend+0x1f0>)
    40d0:	480e      	ldr	r0, [pc, #56]	; (410c <pm_system_suspend+0x1e0>)
    40d2:	f008 f819 	bl	c108 <assert_print>
    40d6:	4907      	ldr	r1, [pc, #28]	; (40f4 <pm_system_suspend+0x1c8>)
    40d8:	4811      	ldr	r0, [pc, #68]	; (4120 <pm_system_suspend+0x1f4>)
    40da:	f008 f815 	bl	c108 <assert_print>
    40de:	21b9      	movs	r1, #185	; 0xb9
    40e0:	4620      	mov	r0, r4
    40e2:	f008 f80a 	bl	c0fa <assert_post_action>
    40e6:	e7b1      	b.n	404c <pm_system_suspend+0x120>
    40e8:	20001160 	.word	0x20001160
    40ec:	200006b8 	.word	0x200006b8
    40f0:	200006ac 	.word	0x200006ac
    40f4:	200006a0 	.word	0x200006a0
    40f8:	200006a4 	.word	0x200006a4
    40fc:	000f423f 	.word	0x000f423f
    4100:	000f4240 	.word	0x000f4240
    4104:	0000dd4c 	.word	0x0000dd4c
    4108:	0000ddac 	.word	0x0000ddac
    410c:	0000d4bc 	.word	0x0000d4bc
    4110:	0000ddc4 	.word	0x0000ddc4
    4114:	200006bc 	.word	0x200006bc
    4118:	0000c501 	.word	0x0000c501
    411c:	0000dd7c 	.word	0x0000dd7c
    4120:	0000dd94 	.word	0x0000dd94

00004124 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4124:	f3bf 8f5b 	dmb	ish
    4128:	4b04      	ldr	r3, [pc, #16]	; (413c <pm_policy_state_lock_is_active+0x18>)
    412a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    412e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    4132:	3800      	subs	r0, #0
    4134:	bf18      	it	ne
    4136:	2001      	movne	r0, #1
    4138:	4770      	bx	lr
    413a:	bf00      	nop
    413c:	200006c0 	.word	0x200006c0

00004140 <pm_policy_next_state>:
{
    4140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4144:	b082      	sub	sp, #8
    4146:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4148:	a901      	add	r1, sp, #4
    414a:	f000 f843 	bl	41d4 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    414e:	1e44      	subs	r4, r0, #1
    4150:	b224      	sxth	r4, r4
    4152:	e007      	b.n	4164 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    4154:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4158:	d032      	beq.n	41c0 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    415a:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    415c:	42b0      	cmp	r0, r6
    415e:	d92f      	bls.n	41c0 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4160:	3c01      	subs	r4, #1
    4162:	b224      	sxth	r4, r4
    4164:	2c00      	cmp	r4, #0
    4166:	db2a      	blt.n	41be <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    416e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    4172:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    4176:	f7ff ffd5 	bl	4124 <pm_policy_state_lock_is_active>
    417a:	2800      	cmp	r0, #0
    417c:	d1f0      	bne.n	4160 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    417e:	6868      	ldr	r0, [r5, #4]
    4180:	0c41      	lsrs	r1, r0, #17
    4182:	03c0      	lsls	r0, r0, #15
    4184:	4f10      	ldr	r7, [pc, #64]	; (41c8 <pm_policy_next_state+0x88>)
    4186:	19c0      	adds	r0, r0, r7
    4188:	4a10      	ldr	r2, [pc, #64]	; (41cc <pm_policy_next_state+0x8c>)
    418a:	f04f 0300 	mov.w	r3, #0
    418e:	f141 0100 	adc.w	r1, r1, #0
    4192:	f7fc f997 	bl	4c4 <__aeabi_uldivmod>
    4196:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    4198:	68ab      	ldr	r3, [r5, #8]
    419a:	0c59      	lsrs	r1, r3, #17
    419c:	03db      	lsls	r3, r3, #15
    419e:	19d8      	adds	r0, r3, r7
    41a0:	4a0a      	ldr	r2, [pc, #40]	; (41cc <pm_policy_next_state+0x8c>)
    41a2:	f04f 0300 	mov.w	r3, #0
    41a6:	f141 0100 	adc.w	r1, r1, #0
    41aa:	f7fc f98b 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    41ae:	4b08      	ldr	r3, [pc, #32]	; (41d0 <pm_policy_next_state+0x90>)
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    41b6:	d0cd      	beq.n	4154 <pm_policy_next_state+0x14>
    41b8:	4283      	cmp	r3, r0
    41ba:	d8cb      	bhi.n	4154 <pm_policy_next_state+0x14>
    41bc:	e7d0      	b.n	4160 <pm_policy_next_state+0x20>
	return NULL;
    41be:	2500      	movs	r5, #0
}
    41c0:	4628      	mov	r0, r5
    41c2:	b002      	add	sp, #8
    41c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41c8:	000f423f 	.word	0x000f423f
    41cc:	000f4240 	.word	0x000f4240
    41d0:	200000a0 	.word	0x200000a0

000041d4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    41d4:	b908      	cbnz	r0, 41da <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    41d6:	4b02      	ldr	r3, [pc, #8]	; (41e0 <pm_state_cpu_get_all+0xc>)
    41d8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    41da:	2000      	movs	r0, #0
    41dc:	4770      	bx	lr
    41de:	bf00      	nop
    41e0:	0000e348 	.word	0x0000e348

000041e4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    41e4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    41e6:	4802      	ldr	r0, [pc, #8]	; (41f0 <nrf_cc3xx_platform_abort_init+0xc>)
    41e8:	f007 fc04 	bl	b9f4 <nrf_cc3xx_platform_set_abort>
}
    41ec:	bd08      	pop	{r3, pc}
    41ee:	bf00      	nop
    41f0:	0000e348 	.word	0x0000e348

000041f4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    41f4:	b1d0      	cbz	r0, 422c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    41f6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    41f8:	6842      	ldr	r2, [r0, #4]
    41fa:	2a04      	cmp	r2, #4
    41fc:	d005      	beq.n	420a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    41fe:	b1d2      	cbz	r2, 4236 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4200:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4202:	f005 fa2d 	bl	9660 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4206:	2000      	movs	r0, #0
    }
}
    4208:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    420a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    420c:	2200      	movs	r2, #0
    420e:	f3bf 8f5b 	dmb	ish
    4212:	e853 1f00 	ldrex	r1, [r3]
    4216:	2901      	cmp	r1, #1
    4218:	d103      	bne.n	4222 <mutex_unlock_platform+0x2e>
    421a:	e843 2000 	strex	r0, r2, [r3]
    421e:	2800      	cmp	r0, #0
    4220:	d1f7      	bne.n	4212 <mutex_unlock_platform+0x1e>
    4222:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4226:	d104      	bne.n	4232 <mutex_unlock_platform+0x3e>
    4228:	4610      	mov	r0, r2
    422a:	e7ed      	b.n	4208 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    422c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4230:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4232:	4802      	ldr	r0, [pc, #8]	; (423c <mutex_unlock_platform+0x48>)
    4234:	e7e8      	b.n	4208 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4236:	4802      	ldr	r0, [pc, #8]	; (4240 <mutex_unlock_platform+0x4c>)
    4238:	e7e6      	b.n	4208 <mutex_unlock_platform+0x14>
    423a:	bf00      	nop
    423c:	ffff8fe9 	.word	0xffff8fe9
    4240:	ffff8fea 	.word	0xffff8fea

00004244 <mutex_lock_platform>:
    if(mutex == NULL) {
    4244:	b320      	cbz	r0, 4290 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4246:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4248:	6842      	ldr	r2, [r0, #4]
    424a:	2a04      	cmp	r2, #4
    424c:	d002      	beq.n	4254 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    424e:	b992      	cbnz	r2, 4276 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4250:	4811      	ldr	r0, [pc, #68]	; (4298 <mutex_lock_platform+0x54>)
    4252:	e00f      	b.n	4274 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4254:	6803      	ldr	r3, [r0, #0]
    4256:	2201      	movs	r2, #1
    4258:	f3bf 8f5b 	dmb	ish
    425c:	e853 1f00 	ldrex	r1, [r3]
    4260:	2900      	cmp	r1, #0
    4262:	d103      	bne.n	426c <mutex_lock_platform+0x28>
    4264:	e843 2000 	strex	r0, r2, [r3]
    4268:	2800      	cmp	r0, #0
    426a:	d1f7      	bne.n	425c <mutex_lock_platform+0x18>
    426c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4270:	d10c      	bne.n	428c <mutex_lock_platform+0x48>
    4272:	2000      	movs	r0, #0
}
    4274:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    4276:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    427c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4280:	f005 f8ce 	bl	9420 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4284:	2800      	cmp	r0, #0
    4286:	d0f5      	beq.n	4274 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4288:	4804      	ldr	r0, [pc, #16]	; (429c <mutex_lock_platform+0x58>)
    428a:	e7f3      	b.n	4274 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    428c:	4803      	ldr	r0, [pc, #12]	; (429c <mutex_lock_platform+0x58>)
    428e:	e7f1      	b.n	4274 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4290:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4294:	4770      	bx	lr
    4296:	bf00      	nop
    4298:	ffff8fea 	.word	0xffff8fea
    429c:	ffff8fe9 	.word	0xffff8fe9

000042a0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    42a0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    42a2:	4604      	mov	r4, r0
    42a4:	b188      	cbz	r0, 42ca <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    42a6:	6863      	ldr	r3, [r4, #4]
    42a8:	2b04      	cmp	r3, #4
    42aa:	d00d      	beq.n	42c8 <mutex_free_platform+0x28>
    42ac:	2b08      	cmp	r3, #8
    42ae:	d00b      	beq.n	42c8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    42b0:	b153      	cbz	r3, 42c8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    42b2:	f013 0f02 	tst.w	r3, #2
    42b6:	d00d      	beq.n	42d4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    42b8:	4621      	mov	r1, r4
    42ba:	4809      	ldr	r0, [pc, #36]	; (42e0 <mutex_free_platform+0x40>)
    42bc:	f004 fdfa 	bl	8eb4 <k_mem_slab_free>
        mutex->mutex = NULL;
    42c0:	2300      	movs	r3, #0
    42c2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    42c4:	2300      	movs	r3, #0
    42c6:	6063      	str	r3, [r4, #4]
}
    42c8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    42ca:	4b06      	ldr	r3, [pc, #24]	; (42e4 <mutex_free_platform+0x44>)
    42cc:	685b      	ldr	r3, [r3, #4]
    42ce:	4806      	ldr	r0, [pc, #24]	; (42e8 <mutex_free_platform+0x48>)
    42d0:	4798      	blx	r3
    42d2:	e7e8      	b.n	42a6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    42d4:	2214      	movs	r2, #20
    42d6:	2100      	movs	r1, #0
    42d8:	6820      	ldr	r0, [r4, #0]
    42da:	f008 f8dc 	bl	c496 <memset>
    42de:	e7f1      	b.n	42c4 <mutex_free_platform+0x24>
    42e0:	200006dc 	.word	0x200006dc
    42e4:	2000017c 	.word	0x2000017c
    42e8:	0000e350 	.word	0x0000e350

000042ec <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    42ec:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    42ee:	4604      	mov	r4, r0
    42f0:	b178      	cbz	r0, 4312 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    42f2:	6863      	ldr	r3, [r4, #4]
    42f4:	2b04      	cmp	r3, #4
    42f6:	d00b      	beq.n	4310 <mutex_init_platform+0x24>
    42f8:	2b08      	cmp	r3, #8
    42fa:	d009      	beq.n	4310 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    42fc:	b90b      	cbnz	r3, 4302 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    42fe:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4300:	b163      	cbz	r3, 431c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4302:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4304:	f008 fe1f 	bl	cf46 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4308:	6863      	ldr	r3, [r4, #4]
    430a:	f043 0301 	orr.w	r3, r3, #1
    430e:	6063      	str	r3, [r4, #4]
}
    4310:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4312:	4b0f      	ldr	r3, [pc, #60]	; (4350 <mutex_init_platform+0x64>)
    4314:	685b      	ldr	r3, [r3, #4]
    4316:	480f      	ldr	r0, [pc, #60]	; (4354 <mutex_init_platform+0x68>)
    4318:	4798      	blx	r3
    431a:	e7ea      	b.n	42f2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    431c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4324:	4621      	mov	r1, r4
    4326:	480c      	ldr	r0, [pc, #48]	; (4358 <mutex_init_platform+0x6c>)
    4328:	f004 fd4e 	bl	8dc8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    432c:	b908      	cbnz	r0, 4332 <mutex_init_platform+0x46>
    432e:	6823      	ldr	r3, [r4, #0]
    4330:	b91b      	cbnz	r3, 433a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    4332:	4b07      	ldr	r3, [pc, #28]	; (4350 <mutex_init_platform+0x64>)
    4334:	685b      	ldr	r3, [r3, #4]
    4336:	4809      	ldr	r0, [pc, #36]	; (435c <mutex_init_platform+0x70>)
    4338:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    433a:	2214      	movs	r2, #20
    433c:	2100      	movs	r1, #0
    433e:	6820      	ldr	r0, [r4, #0]
    4340:	f008 f8a9 	bl	c496 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4344:	6863      	ldr	r3, [r4, #4]
    4346:	f043 0302 	orr.w	r3, r3, #2
    434a:	6063      	str	r3, [r4, #4]
    434c:	e7d9      	b.n	4302 <mutex_init_platform+0x16>
    434e:	bf00      	nop
    4350:	2000017c 	.word	0x2000017c
    4354:	0000e350 	.word	0x0000e350
    4358:	200006dc 	.word	0x200006dc
    435c:	0000e378 	.word	0x0000e378

00004360 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4360:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4362:	2340      	movs	r3, #64	; 0x40
    4364:	2214      	movs	r2, #20
    4366:	4904      	ldr	r1, [pc, #16]	; (4378 <nrf_cc3xx_platform_mutex_init+0x18>)
    4368:	4804      	ldr	r0, [pc, #16]	; (437c <nrf_cc3xx_platform_mutex_init+0x1c>)
    436a:	f008 fd98 	bl	ce9e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    436e:	4904      	ldr	r1, [pc, #16]	; (4380 <nrf_cc3xx_platform_mutex_init+0x20>)
    4370:	4804      	ldr	r0, [pc, #16]	; (4384 <nrf_cc3xx_platform_mutex_init+0x24>)
    4372:	f007 fb9f 	bl	bab4 <nrf_cc3xx_platform_set_mutexes>
}
    4376:	bd08      	pop	{r3, pc}
    4378:	200006fc 	.word	0x200006fc
    437c:	200006dc 	.word	0x200006dc
    4380:	0000e3b8 	.word	0x0000e3b8
    4384:	0000e3a8 	.word	0x0000e3a8

00004388 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4388:	4901      	ldr	r1, [pc, #4]	; (4390 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    438a:	2210      	movs	r2, #16
	str	r2, [r1]
    438c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    438e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4390:	e000ed10 	.word	0xe000ed10

00004394 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4394:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4396:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4398:	f380 8811 	msr	BASEPRI, r0
	isb
    439c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    43a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    43a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    43a6:	b662      	cpsie	i
	isb
    43a8:	f3bf 8f6f 	isb	sy

	bx	lr
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop

000043b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    43b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    43b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    43b4:	f381 8811 	msr	BASEPRI, r1

	wfe
    43b8:	bf20      	wfe

	msr	BASEPRI, r0
    43ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    43be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    43c0:	4770      	bx	lr
    43c2:	bf00      	nop

000043c4 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    43c4:	b570      	push	{r4, r5, r6, lr}
    43c6:	b086      	sub	sp, #24
    43c8:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    43ca:	4e1e      	ldr	r6, [pc, #120]	; (4444 <esf_dump+0x80>)
    43cc:	6883      	ldr	r3, [r0, #8]
    43ce:	9305      	str	r3, [sp, #20]
    43d0:	6843      	ldr	r3, [r0, #4]
    43d2:	9304      	str	r3, [sp, #16]
    43d4:	6803      	ldr	r3, [r0, #0]
    43d6:	9303      	str	r3, [sp, #12]
    43d8:	4b1b      	ldr	r3, [pc, #108]	; (4448 <esf_dump+0x84>)
    43da:	9302      	str	r3, [sp, #8]
    43dc:	2400      	movs	r4, #0
    43de:	9401      	str	r4, [sp, #4]
    43e0:	9400      	str	r4, [sp, #0]
    43e2:	4623      	mov	r3, r4
    43e4:	2201      	movs	r2, #1
    43e6:	4631      	mov	r1, r6
    43e8:	4620      	mov	r0, r4
    43ea:	f007 ff41 	bl	c270 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    43ee:	696b      	ldr	r3, [r5, #20]
    43f0:	9305      	str	r3, [sp, #20]
    43f2:	692b      	ldr	r3, [r5, #16]
    43f4:	9304      	str	r3, [sp, #16]
    43f6:	68eb      	ldr	r3, [r5, #12]
    43f8:	9303      	str	r3, [sp, #12]
    43fa:	4b14      	ldr	r3, [pc, #80]	; (444c <esf_dump+0x88>)
    43fc:	9302      	str	r3, [sp, #8]
    43fe:	9401      	str	r4, [sp, #4]
    4400:	9400      	str	r4, [sp, #0]
    4402:	4623      	mov	r3, r4
    4404:	2201      	movs	r2, #1
    4406:	4631      	mov	r1, r6
    4408:	4620      	mov	r0, r4
    440a:	f007 ff31 	bl	c270 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    440e:	69eb      	ldr	r3, [r5, #28]
    4410:	9303      	str	r3, [sp, #12]
    4412:	4b0f      	ldr	r3, [pc, #60]	; (4450 <esf_dump+0x8c>)
    4414:	9302      	str	r3, [sp, #8]
    4416:	9401      	str	r4, [sp, #4]
    4418:	9400      	str	r4, [sp, #0]
    441a:	4623      	mov	r3, r4
    441c:	2201      	movs	r2, #1
    441e:	4631      	mov	r1, r6
    4420:	4620      	mov	r0, r4
    4422:	f007 ff25 	bl	c270 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4426:	69ab      	ldr	r3, [r5, #24]
    4428:	9303      	str	r3, [sp, #12]
    442a:	4b0a      	ldr	r3, [pc, #40]	; (4454 <esf_dump+0x90>)
    442c:	9302      	str	r3, [sp, #8]
    442e:	9401      	str	r4, [sp, #4]
    4430:	9400      	str	r4, [sp, #0]
    4432:	4623      	mov	r3, r4
    4434:	2201      	movs	r2, #1
    4436:	4631      	mov	r1, r6
    4438:	4620      	mov	r0, r4
    443a:	f007 ff19 	bl	c270 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    443e:	b006      	add	sp, #24
    4440:	bd70      	pop	{r4, r5, r6, pc}
    4442:	bf00      	nop
    4444:	0000d320 	.word	0x0000d320
    4448:	0000e3cc 	.word	0x0000e3cc
    444c:	0000e3fc 	.word	0x0000e3fc
    4450:	0000e42c 	.word	0x0000e42c
    4454:	0000e43c 	.word	0x0000e43c

00004458 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4458:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    445a:	2800      	cmp	r0, #0
    445c:	db07      	blt.n	446e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    445e:	f000 021f 	and.w	r2, r0, #31
    4462:	0940      	lsrs	r0, r0, #5
    4464:	2301      	movs	r3, #1
    4466:	4093      	lsls	r3, r2
    4468:	4a01      	ldr	r2, [pc, #4]	; (4470 <arch_irq_enable+0x18>)
    446a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    446e:	4770      	bx	lr
    4470:	e000e100 	.word	0xe000e100

00004474 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4474:	0942      	lsrs	r2, r0, #5
    4476:	4b05      	ldr	r3, [pc, #20]	; (448c <arch_irq_is_enabled+0x18>)
    4478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    447c:	f000 001f 	and.w	r0, r0, #31
    4480:	2301      	movs	r3, #1
    4482:	fa03 f000 	lsl.w	r0, r3, r0
}
    4486:	4010      	ands	r0, r2
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	e000e100 	.word	0xe000e100

00004490 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4492:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4494:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4496:	2d07      	cmp	r5, #7
    4498:	d80b      	bhi.n	44b2 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    449a:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    449c:	2800      	cmp	r0, #0
    449e:	db1b      	blt.n	44d8 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44a0:	016d      	lsls	r5, r5, #5
    44a2:	b2ed      	uxtb	r5, r5
    44a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    44a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    44ac:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    44b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44b2:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    44b4:	4f0c      	ldr	r7, [pc, #48]	; (44e8 <z_arm_irq_priority_set+0x58>)
    44b6:	2357      	movs	r3, #87	; 0x57
    44b8:	463a      	mov	r2, r7
    44ba:	490c      	ldr	r1, [pc, #48]	; (44ec <z_arm_irq_priority_set+0x5c>)
    44bc:	480c      	ldr	r0, [pc, #48]	; (44f0 <z_arm_irq_priority_set+0x60>)
    44be:	f007 fe23 	bl	c108 <assert_print>
    44c2:	2307      	movs	r3, #7
    44c4:	4622      	mov	r2, r4
    44c6:	4631      	mov	r1, r6
    44c8:	480a      	ldr	r0, [pc, #40]	; (44f4 <z_arm_irq_priority_set+0x64>)
    44ca:	f007 fe1d 	bl	c108 <assert_print>
    44ce:	2157      	movs	r1, #87	; 0x57
    44d0:	4638      	mov	r0, r7
    44d2:	f007 fe12 	bl	c0fa <assert_post_action>
    44d6:	e7e0      	b.n	449a <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44d8:	f000 000f 	and.w	r0, r0, #15
    44dc:	016d      	lsls	r5, r5, #5
    44de:	b2ed      	uxtb	r5, r5
    44e0:	4b05      	ldr	r3, [pc, #20]	; (44f8 <z_arm_irq_priority_set+0x68>)
    44e2:	541d      	strb	r5, [r3, r0]
}
    44e4:	e7e4      	b.n	44b0 <z_arm_irq_priority_set+0x20>
    44e6:	bf00      	nop
    44e8:	0000e46c 	.word	0x0000e46c
    44ec:	0000e4a4 	.word	0x0000e4a4
    44f0:	0000d4bc 	.word	0x0000d4bc
    44f4:	0000e4c0 	.word	0x0000e4c0
    44f8:	e000ed14 	.word	0xe000ed14

000044fc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    44fc:	bf30      	wfi
    b z_SysNmiOnReset
    44fe:	f7ff bffd 	b.w	44fc <z_SysNmiOnReset>
    4502:	bf00      	nop

00004504 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4504:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4506:	4b0b      	ldr	r3, [pc, #44]	; (4534 <z_arm_prep_c+0x30>)
    4508:	4a0b      	ldr	r2, [pc, #44]	; (4538 <z_arm_prep_c+0x34>)
    450a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    450e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4514:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4518:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    451c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4524:	f004 fb7c 	bl	8c20 <z_bss_zero>
	z_data_copy();
    4528:	f006 fd42 	bl	afb0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    452c:	f000 fc6a 	bl	4e04 <z_arm_interrupt_init>
	z_cstart();
    4530:	f004 fbd4 	bl	8cdc <z_cstart>
    4534:	e000ed00 	.word	0xe000ed00
    4538:	00000000 	.word	0x00000000

0000453c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    453c:	4a0a      	ldr	r2, [pc, #40]	; (4568 <arch_swap+0x2c>)
    453e:	6893      	ldr	r3, [r2, #8]
    4540:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4544:	4909      	ldr	r1, [pc, #36]	; (456c <arch_swap+0x30>)
    4546:	6809      	ldr	r1, [r1, #0]
    4548:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    454c:	4908      	ldr	r1, [pc, #32]	; (4570 <arch_swap+0x34>)
    454e:	684b      	ldr	r3, [r1, #4]
    4550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4554:	604b      	str	r3, [r1, #4]
    4556:	2300      	movs	r3, #0
    4558:	f383 8811 	msr	BASEPRI, r3
    455c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4560:	6893      	ldr	r3, [r2, #8]
}
    4562:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    4566:	4770      	bx	lr
    4568:	20001160 	.word	0x20001160
    456c:	0000f160 	.word	0x0000f160
    4570:	e000ed00 	.word	0xe000ed00

00004574 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4574:	4913      	ldr	r1, [pc, #76]	; (45c4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4576:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4578:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    457c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    457e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4582:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4586:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4588:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    458c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4590:	4f0d      	ldr	r7, [pc, #52]	; (45c8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4592:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4596:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4598:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    459a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    459c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    45a0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    45a2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    45a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    45aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    45ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    45ae:	f000 fcd3 	bl	4f58 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    45b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    45b6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    45ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    45be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    45c2:	4770      	bx	lr
    ldr r1, =_kernel
    45c4:	20001160 	.word	0x20001160
    ldr v4, =_SCS_ICSR
    45c8:	e000ed04 	.word	0xe000ed04

000045cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    45cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    45d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    45d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    45d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    45da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    45dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    45e0:	2902      	cmp	r1, #2
    beq _oops
    45e2:	d0ff      	beq.n	45e4 <_oops>

000045e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    45e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    45e6:	f007 fe5e 	bl	c2a6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    45ea:	bd01      	pop	{r0, pc}

000045ec <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    45ec:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    45ee:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    45f2:	490e      	ldr	r1, [pc, #56]	; (462c <arch_new_thread+0x40>)
    45f4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    45f8:	f021 0101 	bic.w	r1, r1, #1
    45fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4600:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4604:	9b01      	ldr	r3, [sp, #4]
    4606:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    460a:	9b02      	ldr	r3, [sp, #8]
    460c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4610:	9b03      	ldr	r3, [sp, #12]
    4612:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    461a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    461e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4620:	2300      	movs	r3, #0
    4622:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4626:	bc10      	pop	{r4}
    4628:	4770      	bx	lr
    462a:	bf00      	nop
    462c:	0000bf53 	.word	0x0000bf53

00004630 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4630:	4b12      	ldr	r3, [pc, #72]	; (467c <z_check_thread_stack_fail+0x4c>)
    4632:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4634:	b302      	cbz	r2, 4678 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4636:	f110 0f16 	cmn.w	r0, #22
    463a:	d011      	beq.n	4660 <z_check_thread_stack_fail+0x30>
    463c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4640:	f1a3 0c20 	sub.w	ip, r3, #32
    4644:	4584      	cmp	ip, r0
    4646:	d805      	bhi.n	4654 <z_check_thread_stack_fail+0x24>
    4648:	4283      	cmp	r3, r0
    464a:	d905      	bls.n	4658 <z_check_thread_stack_fail+0x28>
    464c:	428b      	cmp	r3, r1
    464e:	d805      	bhi.n	465c <z_check_thread_stack_fail+0x2c>
    4650:	2100      	movs	r1, #0
    4652:	e00b      	b.n	466c <z_check_thread_stack_fail+0x3c>
    4654:	2100      	movs	r1, #0
    4656:	e009      	b.n	466c <z_check_thread_stack_fail+0x3c>
    4658:	2100      	movs	r1, #0
    465a:	e007      	b.n	466c <z_check_thread_stack_fail+0x3c>
    465c:	2101      	movs	r1, #1
    465e:	e005      	b.n	466c <z_check_thread_stack_fail+0x3c>
    4660:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4664:	428b      	cmp	r3, r1
    4666:	bf94      	ite	ls
    4668:	2100      	movls	r1, #0
    466a:	2101      	movhi	r1, #1
    466c:	b909      	cbnz	r1, 4672 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    466e:	2000      	movs	r0, #0
}
    4670:	4770      	bx	lr
		return thread->stack_info.start;
    4672:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4676:	4770      	bx	lr
		return 0;
    4678:	2000      	movs	r0, #0
    467a:	4770      	bx	lr
    467c:	20001160 	.word	0x20001160

00004680 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4680:	b508      	push	{r3, lr}
    4682:	460d      	mov	r5, r1
    4684:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4686:	4b08      	ldr	r3, [pc, #32]	; (46a8 <arch_switch_to_main_thread+0x28>)
    4688:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    468a:	f000 fc65 	bl	4f58 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    468e:	4620      	mov	r0, r4
    4690:	f385 8809 	msr	PSP, r5
    4694:	2100      	movs	r1, #0
    4696:	b663      	cpsie	if
    4698:	f381 8811 	msr	BASEPRI, r1
    469c:	f3bf 8f6f 	isb	sy
    46a0:	2200      	movs	r2, #0
    46a2:	2300      	movs	r3, #0
    46a4:	f007 fc55 	bl	bf52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    46a8:	20001160 	.word	0x20001160

000046ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    46ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    46ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    46b0:	4a0b      	ldr	r2, [pc, #44]	; (46e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    46b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    46b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    46b6:	bf1e      	ittt	ne
	movne	r1, #0
    46b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    46ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    46bc:	f008 fc27 	blne	cf0e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    46c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    46c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    46c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    46ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    46ce:	4905      	ldr	r1, [pc, #20]	; (46e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    46d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    46d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    46d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    46d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    46da:	4903      	ldr	r1, [pc, #12]	; (46e8 <_isr_wrapper+0x3c>)
	bx r1
    46dc:	4708      	bx	r1
    46de:	0000      	.short	0x0000
	ldr r2, =_kernel
    46e0:	20001160 	.word	0x20001160
	ldr r1, =_sw_isr_table
    46e4:	0000d170 	.word	0x0000d170
	ldr r1, =z_arm_int_exit
    46e8:	000046ed 	.word	0x000046ed

000046ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    46ec:	4b04      	ldr	r3, [pc, #16]	; (4700 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    46ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    46f0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    46f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    46f4:	d003      	beq.n	46fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    46f6:	4903      	ldr	r1, [pc, #12]	; (4704 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    46f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    46fc:	600a      	str	r2, [r1, #0]

000046fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    46fe:	4770      	bx	lr
	ldr r3, =_kernel
    4700:	20001160 	.word	0x20001160
	ldr r1, =_SCS_ICSR
    4704:	e000ed04 	.word	0xe000ed04

00004708 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4708:	b570      	push	{r4, r5, r6, lr}
    470a:	b084      	sub	sp, #16
    470c:	4605      	mov	r5, r0
    470e:	460e      	mov	r6, r1
    4710:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4712:	4b47      	ldr	r3, [pc, #284]	; (4830 <bus_fault+0x128>)
    4714:	9302      	str	r3, [sp, #8]
    4716:	2000      	movs	r0, #0
    4718:	9001      	str	r0, [sp, #4]
    471a:	9000      	str	r0, [sp, #0]
    471c:	4603      	mov	r3, r0
    471e:	2201      	movs	r2, #1
    4720:	4944      	ldr	r1, [pc, #272]	; (4834 <bus_fault+0x12c>)
    4722:	f007 fdd4 	bl	c2ce <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4726:	4b44      	ldr	r3, [pc, #272]	; (4838 <bus_fault+0x130>)
    4728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    472a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    472e:	d125      	bne.n	477c <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4730:	4b41      	ldr	r3, [pc, #260]	; (4838 <bus_fault+0x130>)
    4732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4734:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4738:	d12b      	bne.n	4792 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    473a:	4b3f      	ldr	r3, [pc, #252]	; (4838 <bus_fault+0x130>)
    473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    473e:	f413 7f00 	tst.w	r3, #512	; 0x200
    4742:	d131      	bne.n	47a8 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4744:	4b3c      	ldr	r3, [pc, #240]	; (4838 <bus_fault+0x130>)
    4746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4748:	f413 6f80 	tst.w	r3, #1024	; 0x400
    474c:	d14f      	bne.n	47ee <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    474e:	4b3a      	ldr	r3, [pc, #232]	; (4838 <bus_fault+0x130>)
    4750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4752:	f413 7f80 	tst.w	r3, #256	; 0x100
    4756:	d155      	bne.n	4804 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4758:	4b37      	ldr	r3, [pc, #220]	; (4838 <bus_fault+0x130>)
    475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    475c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4760:	d15b      	bne.n	481a <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4762:	4a35      	ldr	r2, [pc, #212]	; (4838 <bus_fault+0x130>)
    4764:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4766:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    476a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    476c:	2101      	movs	r1, #1
    476e:	4628      	mov	r0, r5
    4770:	f007 fdab 	bl	c2ca <memory_fault_recoverable>
    4774:	7020      	strb	r0, [r4, #0]

	return reason;
}
    4776:	2000      	movs	r0, #0
    4778:	b004      	add	sp, #16
    477a:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    477c:	4b2f      	ldr	r3, [pc, #188]	; (483c <bus_fault+0x134>)
    477e:	9302      	str	r3, [sp, #8]
    4780:	2000      	movs	r0, #0
    4782:	9001      	str	r0, [sp, #4]
    4784:	9000      	str	r0, [sp, #0]
    4786:	4603      	mov	r3, r0
    4788:	2201      	movs	r2, #1
    478a:	492a      	ldr	r1, [pc, #168]	; (4834 <bus_fault+0x12c>)
    478c:	f007 fd9f 	bl	c2ce <z_log_msg2_runtime_create>
    4790:	e7ce      	b.n	4730 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    4792:	4b2b      	ldr	r3, [pc, #172]	; (4840 <bus_fault+0x138>)
    4794:	9302      	str	r3, [sp, #8]
    4796:	2000      	movs	r0, #0
    4798:	9001      	str	r0, [sp, #4]
    479a:	9000      	str	r0, [sp, #0]
    479c:	4603      	mov	r3, r0
    479e:	2201      	movs	r2, #1
    47a0:	4924      	ldr	r1, [pc, #144]	; (4834 <bus_fault+0x12c>)
    47a2:	f007 fd94 	bl	c2ce <z_log_msg2_runtime_create>
    47a6:	e7c8      	b.n	473a <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    47a8:	4b26      	ldr	r3, [pc, #152]	; (4844 <bus_fault+0x13c>)
    47aa:	9302      	str	r3, [sp, #8]
    47ac:	2000      	movs	r0, #0
    47ae:	9001      	str	r0, [sp, #4]
    47b0:	9000      	str	r0, [sp, #0]
    47b2:	4603      	mov	r3, r0
    47b4:	2201      	movs	r2, #1
    47b6:	491f      	ldr	r1, [pc, #124]	; (4834 <bus_fault+0x12c>)
    47b8:	f007 fd89 	bl	c2ce <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    47bc:	4b1e      	ldr	r3, [pc, #120]	; (4838 <bus_fault+0x130>)
    47be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    47c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    47c6:	d0bd      	beq.n	4744 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    47c8:	9203      	str	r2, [sp, #12]
    47ca:	4b1f      	ldr	r3, [pc, #124]	; (4848 <bus_fault+0x140>)
    47cc:	9302      	str	r3, [sp, #8]
    47ce:	2000      	movs	r0, #0
    47d0:	9001      	str	r0, [sp, #4]
    47d2:	9000      	str	r0, [sp, #0]
    47d4:	4603      	mov	r3, r0
    47d6:	2201      	movs	r2, #1
    47d8:	4916      	ldr	r1, [pc, #88]	; (4834 <bus_fault+0x12c>)
    47da:	f007 fd78 	bl	c2ce <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    47de:	2e00      	cmp	r6, #0
    47e0:	d0b0      	beq.n	4744 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    47e2:	4a15      	ldr	r2, [pc, #84]	; (4838 <bus_fault+0x130>)
    47e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    47ea:	6293      	str	r3, [r2, #40]	; 0x28
    47ec:	e7aa      	b.n	4744 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    47ee:	4b17      	ldr	r3, [pc, #92]	; (484c <bus_fault+0x144>)
    47f0:	9302      	str	r3, [sp, #8]
    47f2:	2000      	movs	r0, #0
    47f4:	9001      	str	r0, [sp, #4]
    47f6:	9000      	str	r0, [sp, #0]
    47f8:	4603      	mov	r3, r0
    47fa:	2201      	movs	r2, #1
    47fc:	490d      	ldr	r1, [pc, #52]	; (4834 <bus_fault+0x12c>)
    47fe:	f007 fd66 	bl	c2ce <z_log_msg2_runtime_create>
    4802:	e7a4      	b.n	474e <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    4804:	4b12      	ldr	r3, [pc, #72]	; (4850 <bus_fault+0x148>)
    4806:	9302      	str	r3, [sp, #8]
    4808:	2000      	movs	r0, #0
    480a:	9001      	str	r0, [sp, #4]
    480c:	9000      	str	r0, [sp, #0]
    480e:	4603      	mov	r3, r0
    4810:	2201      	movs	r2, #1
    4812:	4908      	ldr	r1, [pc, #32]	; (4834 <bus_fault+0x12c>)
    4814:	f007 fd5b 	bl	c2ce <z_log_msg2_runtime_create>
    4818:	e7a3      	b.n	4762 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    481a:	4b0e      	ldr	r3, [pc, #56]	; (4854 <bus_fault+0x14c>)
    481c:	9302      	str	r3, [sp, #8]
    481e:	2000      	movs	r0, #0
    4820:	9001      	str	r0, [sp, #4]
    4822:	9000      	str	r0, [sp, #0]
    4824:	4603      	mov	r3, r0
    4826:	2201      	movs	r2, #1
    4828:	4902      	ldr	r1, [pc, #8]	; (4834 <bus_fault+0x12c>)
    482a:	f007 fd50 	bl	c2ce <z_log_msg2_runtime_create>
    482e:	e798      	b.n	4762 <bus_fault+0x5a>
    4830:	0000e500 	.word	0x0000e500
    4834:	0000d320 	.word	0x0000d320
    4838:	e000ed00 	.word	0xe000ed00
    483c:	0000e518 	.word	0x0000e518
    4840:	0000e52c 	.word	0x0000e52c
    4844:	0000e540 	.word	0x0000e540
    4848:	0000e55c 	.word	0x0000e55c
    484c:	0000e574 	.word	0x0000e574
    4850:	0000e590 	.word	0x0000e590
    4854:	0000e5a8 	.word	0x0000e5a8

00004858 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    4858:	b500      	push	{lr}
    485a:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    485c:	4b3a      	ldr	r3, [pc, #232]	; (4948 <usage_fault+0xf0>)
    485e:	9302      	str	r3, [sp, #8]
    4860:	2000      	movs	r0, #0
    4862:	9001      	str	r0, [sp, #4]
    4864:	9000      	str	r0, [sp, #0]
    4866:	4603      	mov	r3, r0
    4868:	2201      	movs	r2, #1
    486a:	4938      	ldr	r1, [pc, #224]	; (494c <usage_fault+0xf4>)
    486c:	f007 fd2f 	bl	c2ce <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4870:	4b37      	ldr	r3, [pc, #220]	; (4950 <usage_fault+0xf8>)
    4872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4874:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4878:	d123      	bne.n	48c2 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    487a:	4b35      	ldr	r3, [pc, #212]	; (4950 <usage_fault+0xf8>)
    487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    487e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    4882:	d129      	bne.n	48d8 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4884:	4b32      	ldr	r3, [pc, #200]	; (4950 <usage_fault+0xf8>)
    4886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4888:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    488c:	d12f      	bne.n	48ee <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    488e:	4b30      	ldr	r3, [pc, #192]	; (4950 <usage_fault+0xf8>)
    4890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4892:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    4896:	d135      	bne.n	4904 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4898:	4b2d      	ldr	r3, [pc, #180]	; (4950 <usage_fault+0xf8>)
    489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    489c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    48a0:	d13b      	bne.n	491a <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    48a2:	4b2b      	ldr	r3, [pc, #172]	; (4950 <usage_fault+0xf8>)
    48a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    48aa:	d141      	bne.n	4930 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    48ac:	4a28      	ldr	r2, [pc, #160]	; (4950 <usage_fault+0xf8>)
    48ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48b0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    48b4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    48b8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    48ba:	2000      	movs	r0, #0
    48bc:	b005      	add	sp, #20
    48be:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    48c2:	4b24      	ldr	r3, [pc, #144]	; (4954 <usage_fault+0xfc>)
    48c4:	9302      	str	r3, [sp, #8]
    48c6:	2000      	movs	r0, #0
    48c8:	9001      	str	r0, [sp, #4]
    48ca:	9000      	str	r0, [sp, #0]
    48cc:	4603      	mov	r3, r0
    48ce:	2201      	movs	r2, #1
    48d0:	491e      	ldr	r1, [pc, #120]	; (494c <usage_fault+0xf4>)
    48d2:	f007 fcfc 	bl	c2ce <z_log_msg2_runtime_create>
    48d6:	e7d0      	b.n	487a <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    48d8:	4b1f      	ldr	r3, [pc, #124]	; (4958 <usage_fault+0x100>)
    48da:	9302      	str	r3, [sp, #8]
    48dc:	2000      	movs	r0, #0
    48de:	9001      	str	r0, [sp, #4]
    48e0:	9000      	str	r0, [sp, #0]
    48e2:	4603      	mov	r3, r0
    48e4:	2201      	movs	r2, #1
    48e6:	4919      	ldr	r1, [pc, #100]	; (494c <usage_fault+0xf4>)
    48e8:	f007 fcf1 	bl	c2ce <z_log_msg2_runtime_create>
    48ec:	e7ca      	b.n	4884 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    48ee:	4b1b      	ldr	r3, [pc, #108]	; (495c <usage_fault+0x104>)
    48f0:	9302      	str	r3, [sp, #8]
    48f2:	2000      	movs	r0, #0
    48f4:	9001      	str	r0, [sp, #4]
    48f6:	9000      	str	r0, [sp, #0]
    48f8:	4603      	mov	r3, r0
    48fa:	2201      	movs	r2, #1
    48fc:	4913      	ldr	r1, [pc, #76]	; (494c <usage_fault+0xf4>)
    48fe:	f007 fce6 	bl	c2ce <z_log_msg2_runtime_create>
    4902:	e7c4      	b.n	488e <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4904:	4b16      	ldr	r3, [pc, #88]	; (4960 <usage_fault+0x108>)
    4906:	9302      	str	r3, [sp, #8]
    4908:	2000      	movs	r0, #0
    490a:	9001      	str	r0, [sp, #4]
    490c:	9000      	str	r0, [sp, #0]
    490e:	4603      	mov	r3, r0
    4910:	2201      	movs	r2, #1
    4912:	490e      	ldr	r1, [pc, #56]	; (494c <usage_fault+0xf4>)
    4914:	f007 fcdb 	bl	c2ce <z_log_msg2_runtime_create>
    4918:	e7be      	b.n	4898 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    491a:	4b12      	ldr	r3, [pc, #72]	; (4964 <usage_fault+0x10c>)
    491c:	9302      	str	r3, [sp, #8]
    491e:	2000      	movs	r0, #0
    4920:	9001      	str	r0, [sp, #4]
    4922:	9000      	str	r0, [sp, #0]
    4924:	4603      	mov	r3, r0
    4926:	2201      	movs	r2, #1
    4928:	4908      	ldr	r1, [pc, #32]	; (494c <usage_fault+0xf4>)
    492a:	f007 fcd0 	bl	c2ce <z_log_msg2_runtime_create>
    492e:	e7b8      	b.n	48a2 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4930:	4b0d      	ldr	r3, [pc, #52]	; (4968 <usage_fault+0x110>)
    4932:	9302      	str	r3, [sp, #8]
    4934:	2000      	movs	r0, #0
    4936:	9001      	str	r0, [sp, #4]
    4938:	9000      	str	r0, [sp, #0]
    493a:	4603      	mov	r3, r0
    493c:	2201      	movs	r2, #1
    493e:	4903      	ldr	r1, [pc, #12]	; (494c <usage_fault+0xf4>)
    4940:	f007 fcc5 	bl	c2ce <z_log_msg2_runtime_create>
    4944:	e7b2      	b.n	48ac <usage_fault+0x54>
    4946:	bf00      	nop
    4948:	0000e5d8 	.word	0x0000e5d8
    494c:	0000d320 	.word	0x0000d320
    4950:	e000ed00 	.word	0xe000ed00
    4954:	0000e5f0 	.word	0x0000e5f0
    4958:	0000e604 	.word	0x0000e604
    495c:	0000e620 	.word	0x0000e620
    4960:	0000e640 	.word	0x0000e640
    4964:	0000e668 	.word	0x0000e668
    4968:	0000e684 	.word	0x0000e684

0000496c <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    496c:	b500      	push	{lr}
    496e:	b085      	sub	sp, #20
	*recoverable = false;
    4970:	2000      	movs	r0, #0
    4972:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <debug_monitor+0x20>)
    4976:	9302      	str	r3, [sp, #8]
    4978:	9001      	str	r0, [sp, #4]
    497a:	9000      	str	r0, [sp, #0]
    497c:	4603      	mov	r3, r0
    497e:	2201      	movs	r2, #1
    4980:	4903      	ldr	r1, [pc, #12]	; (4990 <debug_monitor+0x24>)
    4982:	f007 fca4 	bl	c2ce <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4986:	b005      	add	sp, #20
    4988:	f85d fb04 	ldr.w	pc, [sp], #4
    498c:	0000e6b0 	.word	0x0000e6b0
    4990:	0000d320 	.word	0x0000d320

00004994 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4994:	b500      	push	{lr}
    4996:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4998:	290f      	cmp	r1, #15
    499a:	dc10      	bgt.n	49be <reserved_exception+0x2a>
    499c:	4b09      	ldr	r3, [pc, #36]	; (49c4 <reserved_exception+0x30>)
    499e:	3910      	subs	r1, #16
    49a0:	9104      	str	r1, [sp, #16]
    49a2:	9303      	str	r3, [sp, #12]
    49a4:	4b08      	ldr	r3, [pc, #32]	; (49c8 <reserved_exception+0x34>)
    49a6:	9302      	str	r3, [sp, #8]
    49a8:	2000      	movs	r0, #0
    49aa:	9001      	str	r0, [sp, #4]
    49ac:	9000      	str	r0, [sp, #0]
    49ae:	4603      	mov	r3, r0
    49b0:	2201      	movs	r2, #1
    49b2:	4906      	ldr	r1, [pc, #24]	; (49cc <reserved_exception+0x38>)
    49b4:	f007 fc8b 	bl	c2ce <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    49b8:	b007      	add	sp, #28
    49ba:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    49be:	4b04      	ldr	r3, [pc, #16]	; (49d0 <reserved_exception+0x3c>)
    49c0:	e7ed      	b.n	499e <reserved_exception+0xa>
    49c2:	bf00      	nop
    49c4:	0000e6f0 	.word	0x0000e6f0
    49c8:	0000e708 	.word	0x0000e708
    49cc:	0000d320 	.word	0x0000d320
    49d0:	0000e6d4 	.word	0x0000e6d4

000049d4 <mem_manage_fault>:
{
    49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49d6:	b085      	sub	sp, #20
    49d8:	4605      	mov	r5, r0
    49da:	460c      	mov	r4, r1
    49dc:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    49de:	4b5f      	ldr	r3, [pc, #380]	; (4b5c <mem_manage_fault+0x188>)
    49e0:	9302      	str	r3, [sp, #8]
    49e2:	2000      	movs	r0, #0
    49e4:	9001      	str	r0, [sp, #4]
    49e6:	9000      	str	r0, [sp, #0]
    49e8:	4603      	mov	r3, r0
    49ea:	2201      	movs	r2, #1
    49ec:	495c      	ldr	r1, [pc, #368]	; (4b60 <mem_manage_fault+0x18c>)
    49ee:	f007 fc6e 	bl	c2ce <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    49f2:	4b5c      	ldr	r3, [pc, #368]	; (4b64 <mem_manage_fault+0x190>)
    49f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49f6:	f013 0f10 	tst.w	r3, #16
    49fa:	d13b      	bne.n	4a74 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    49fc:	4b59      	ldr	r3, [pc, #356]	; (4b64 <mem_manage_fault+0x190>)
    49fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a00:	f013 0f08 	tst.w	r3, #8
    4a04:	d141      	bne.n	4a8a <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4a06:	4b57      	ldr	r3, [pc, #348]	; (4b64 <mem_manage_fault+0x190>)
    4a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a0a:	f013 0f02 	tst.w	r3, #2
    4a0e:	d147      	bne.n	4aa0 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    4a10:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4a14:	4b53      	ldr	r3, [pc, #332]	; (4b64 <mem_manage_fault+0x190>)
    4a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a18:	f013 0f01 	tst.w	r3, #1
    4a1c:	d166      	bne.n	4aec <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4a1e:	4b51      	ldr	r3, [pc, #324]	; (4b64 <mem_manage_fault+0x190>)
    4a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a22:	f013 0f20 	tst.w	r3, #32
    4a26:	d16c      	bne.n	4b02 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4a28:	4b4e      	ldr	r3, [pc, #312]	; (4b64 <mem_manage_fault+0x190>)
    4a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a2c:	f013 0f10 	tst.w	r3, #16
    4a30:	d104      	bne.n	4a3c <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4a32:	4b4c      	ldr	r3, [pc, #304]	; (4b64 <mem_manage_fault+0x190>)
    4a34:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4a36:	f014 0402 	ands.w	r4, r4, #2
    4a3a:	d004      	beq.n	4a46 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4a3c:	4b49      	ldr	r3, [pc, #292]	; (4b64 <mem_manage_fault+0x190>)
    4a3e:	685c      	ldr	r4, [r3, #4]
    4a40:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4a44:	d168      	bne.n	4b18 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4a46:	4b47      	ldr	r3, [pc, #284]	; (4b64 <mem_manage_fault+0x190>)
    4a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a4a:	f013 0f20 	tst.w	r3, #32
    4a4e:	d004      	beq.n	4a5a <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4a50:	4a44      	ldr	r2, [pc, #272]	; (4b64 <mem_manage_fault+0x190>)
    4a52:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4a58:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4a5a:	4a42      	ldr	r2, [pc, #264]	; (4b64 <mem_manage_fault+0x190>)
    4a5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4a5e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4a62:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4a64:	2101      	movs	r1, #1
    4a66:	4628      	mov	r0, r5
    4a68:	f007 fc2f 	bl	c2ca <memory_fault_recoverable>
    4a6c:	7030      	strb	r0, [r6, #0]
}
    4a6e:	4620      	mov	r0, r4
    4a70:	b005      	add	sp, #20
    4a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    4a74:	4b3c      	ldr	r3, [pc, #240]	; (4b68 <mem_manage_fault+0x194>)
    4a76:	9302      	str	r3, [sp, #8]
    4a78:	2000      	movs	r0, #0
    4a7a:	9001      	str	r0, [sp, #4]
    4a7c:	9000      	str	r0, [sp, #0]
    4a7e:	4603      	mov	r3, r0
    4a80:	2201      	movs	r2, #1
    4a82:	4937      	ldr	r1, [pc, #220]	; (4b60 <mem_manage_fault+0x18c>)
    4a84:	f007 fc23 	bl	c2ce <z_log_msg2_runtime_create>
    4a88:	e7b8      	b.n	49fc <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    4a8a:	4b38      	ldr	r3, [pc, #224]	; (4b6c <mem_manage_fault+0x198>)
    4a8c:	9302      	str	r3, [sp, #8]
    4a8e:	2000      	movs	r0, #0
    4a90:	9001      	str	r0, [sp, #4]
    4a92:	9000      	str	r0, [sp, #0]
    4a94:	4603      	mov	r3, r0
    4a96:	2201      	movs	r2, #1
    4a98:	4931      	ldr	r1, [pc, #196]	; (4b60 <mem_manage_fault+0x18c>)
    4a9a:	f007 fc18 	bl	c2ce <z_log_msg2_runtime_create>
    4a9e:	e7b2      	b.n	4a06 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    4aa0:	4b33      	ldr	r3, [pc, #204]	; (4b70 <mem_manage_fault+0x19c>)
    4aa2:	9302      	str	r3, [sp, #8]
    4aa4:	2000      	movs	r0, #0
    4aa6:	9001      	str	r0, [sp, #4]
    4aa8:	9000      	str	r0, [sp, #0]
    4aaa:	4603      	mov	r3, r0
    4aac:	2201      	movs	r2, #1
    4aae:	492c      	ldr	r1, [pc, #176]	; (4b60 <mem_manage_fault+0x18c>)
    4ab0:	f007 fc0d 	bl	c2ce <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    4ab4:	4b2b      	ldr	r3, [pc, #172]	; (4b64 <mem_manage_fault+0x190>)
    4ab6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4aba:	f013 0f80 	tst.w	r3, #128	; 0x80
    4abe:	d102      	bne.n	4ac6 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    4ac0:	f06f 0715 	mvn.w	r7, #21
    4ac4:	e7a6      	b.n	4a14 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4ac6:	9703      	str	r7, [sp, #12]
    4ac8:	4b2a      	ldr	r3, [pc, #168]	; (4b74 <mem_manage_fault+0x1a0>)
    4aca:	9302      	str	r3, [sp, #8]
    4acc:	2000      	movs	r0, #0
    4ace:	9001      	str	r0, [sp, #4]
    4ad0:	9000      	str	r0, [sp, #0]
    4ad2:	4603      	mov	r3, r0
    4ad4:	2201      	movs	r2, #1
    4ad6:	4922      	ldr	r1, [pc, #136]	; (4b60 <mem_manage_fault+0x18c>)
    4ad8:	f007 fbf9 	bl	c2ce <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    4adc:	2c00      	cmp	r4, #0
    4ade:	d099      	beq.n	4a14 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4ae0:	4a20      	ldr	r2, [pc, #128]	; (4b64 <mem_manage_fault+0x190>)
    4ae2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4ae8:	6293      	str	r3, [r2, #40]	; 0x28
    4aea:	e793      	b.n	4a14 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    4aec:	4b22      	ldr	r3, [pc, #136]	; (4b78 <mem_manage_fault+0x1a4>)
    4aee:	9302      	str	r3, [sp, #8]
    4af0:	2000      	movs	r0, #0
    4af2:	9001      	str	r0, [sp, #4]
    4af4:	9000      	str	r0, [sp, #0]
    4af6:	4603      	mov	r3, r0
    4af8:	2201      	movs	r2, #1
    4afa:	4919      	ldr	r1, [pc, #100]	; (4b60 <mem_manage_fault+0x18c>)
    4afc:	f007 fbe7 	bl	c2ce <z_log_msg2_runtime_create>
    4b00:	e78d      	b.n	4a1e <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    4b02:	4b1e      	ldr	r3, [pc, #120]	; (4b7c <mem_manage_fault+0x1a8>)
    4b04:	9302      	str	r3, [sp, #8]
    4b06:	2000      	movs	r0, #0
    4b08:	9001      	str	r0, [sp, #4]
    4b0a:	9000      	str	r0, [sp, #0]
    4b0c:	4603      	mov	r3, r0
    4b0e:	2201      	movs	r2, #1
    4b10:	4913      	ldr	r1, [pc, #76]	; (4b60 <mem_manage_fault+0x18c>)
    4b12:	f007 fbdc 	bl	c2ce <z_log_msg2_runtime_create>
    4b16:	e787      	b.n	4a28 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4b18:	4629      	mov	r1, r5
    4b1a:	4638      	mov	r0, r7
    4b1c:	f7ff fd88 	bl	4630 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4b20:	4607      	mov	r7, r0
    4b22:	b9b0      	cbnz	r0, 4b52 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4b24:	4b0f      	ldr	r3, [pc, #60]	; (4b64 <mem_manage_fault+0x190>)
    4b26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4b28:	f014 0410 	ands.w	r4, r4, #16
    4b2c:	d08b      	beq.n	4a46 <mem_manage_fault+0x72>
    4b2e:	4c14      	ldr	r4, [pc, #80]	; (4b80 <mem_manage_fault+0x1ac>)
    4b30:	f240 1349 	movw	r3, #329	; 0x149
    4b34:	4622      	mov	r2, r4
    4b36:	4913      	ldr	r1, [pc, #76]	; (4b84 <mem_manage_fault+0x1b0>)
    4b38:	4813      	ldr	r0, [pc, #76]	; (4b88 <mem_manage_fault+0x1b4>)
    4b3a:	f007 fae5 	bl	c108 <assert_print>
    4b3e:	4813      	ldr	r0, [pc, #76]	; (4b8c <mem_manage_fault+0x1b8>)
    4b40:	f007 fae2 	bl	c108 <assert_print>
    4b44:	f240 1149 	movw	r1, #329	; 0x149
    4b48:	4620      	mov	r0, r4
    4b4a:	f007 fad6 	bl	c0fa <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b4e:	463c      	mov	r4, r7
    4b50:	e779      	b.n	4a46 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4b52:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4b56:	2402      	movs	r4, #2
    4b58:	e775      	b.n	4a46 <mem_manage_fault+0x72>
    4b5a:	bf00      	nop
    4b5c:	0000e71c 	.word	0x0000e71c
    4b60:	0000d320 	.word	0x0000d320
    4b64:	e000ed00 	.word	0xe000ed00
    4b68:	0000e734 	.word	0x0000e734
    4b6c:	0000e52c 	.word	0x0000e52c
    4b70:	0000e768 	.word	0x0000e768
    4b74:	0000e780 	.word	0x0000e780
    4b78:	0000e798 	.word	0x0000e798
    4b7c:	0000e5a8 	.word	0x0000e5a8
    4b80:	0000e7b8 	.word	0x0000e7b8
    4b84:	0000e7f4 	.word	0x0000e7f4
    4b88:	0000d4bc 	.word	0x0000d4bc
    4b8c:	0000e840 	.word	0x0000e840

00004b90 <hard_fault>:
{
    4b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b92:	b085      	sub	sp, #20
    4b94:	4607      	mov	r7, r0
    4b96:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4b98:	4b4b      	ldr	r3, [pc, #300]	; (4cc8 <hard_fault+0x138>)
    4b9a:	9302      	str	r3, [sp, #8]
    4b9c:	2400      	movs	r4, #0
    4b9e:	9401      	str	r4, [sp, #4]
    4ba0:	9400      	str	r4, [sp, #0]
    4ba2:	4623      	mov	r3, r4
    4ba4:	2201      	movs	r2, #1
    4ba6:	4949      	ldr	r1, [pc, #292]	; (4ccc <hard_fault+0x13c>)
    4ba8:	4620      	mov	r0, r4
    4baa:	f007 fb90 	bl	c2ce <z_log_msg2_runtime_create>
	*recoverable = false;
    4bae:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4bb0:	4b47      	ldr	r3, [pc, #284]	; (4cd0 <hard_fault+0x140>)
    4bb2:	6add      	ldr	r5, [r3, #44]	; 0x2c
    4bb4:	f015 0502 	ands.w	r5, r5, #2
    4bb8:	d12d      	bne.n	4c16 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4bba:	4b45      	ldr	r3, [pc, #276]	; (4cd0 <hard_fault+0x140>)
    4bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	db36      	blt.n	4c30 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4bc2:	4b43      	ldr	r3, [pc, #268]	; (4cd0 <hard_fault+0x140>)
    4bc4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4bc6:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4bca:	d06b      	beq.n	4ca4 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    4bcc:	4b41      	ldr	r3, [pc, #260]	; (4cd4 <hard_fault+0x144>)
    4bce:	9302      	str	r3, [sp, #8]
    4bd0:	2000      	movs	r0, #0
    4bd2:	9001      	str	r0, [sp, #4]
    4bd4:	9000      	str	r0, [sp, #0]
    4bd6:	4603      	mov	r3, r0
    4bd8:	2201      	movs	r2, #1
    4bda:	493c      	ldr	r1, [pc, #240]	; (4ccc <hard_fault+0x13c>)
    4bdc:	f007 fb77 	bl	c2ce <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4be0:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4be2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4be6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4bea:	429a      	cmp	r2, r3
    4bec:	d02c      	beq.n	4c48 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    4bee:	4b38      	ldr	r3, [pc, #224]	; (4cd0 <hard_fault+0x140>)
    4bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d135      	bne.n	4c64 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    4bf8:	4b35      	ldr	r3, [pc, #212]	; (4cd0 <hard_fault+0x140>)
    4bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d137      	bne.n	4c72 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    4c02:	4b33      	ldr	r3, [pc, #204]	; (4cd0 <hard_fault+0x140>)
    4c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4c06:	b29b      	uxth	r3, r3
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d039      	beq.n	4c80 <hard_fault+0xf0>
			reason = usage_fault(esf);
    4c0c:	4638      	mov	r0, r7
    4c0e:	f7ff fe23 	bl	4858 <usage_fault>
    4c12:	4604      	mov	r4, r0
    4c14:	e009      	b.n	4c2a <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    4c16:	4b30      	ldr	r3, [pc, #192]	; (4cd8 <hard_fault+0x148>)
    4c18:	9302      	str	r3, [sp, #8]
    4c1a:	9401      	str	r4, [sp, #4]
    4c1c:	9400      	str	r4, [sp, #0]
    4c1e:	4623      	mov	r3, r4
    4c20:	2201      	movs	r2, #1
    4c22:	492a      	ldr	r1, [pc, #168]	; (4ccc <hard_fault+0x13c>)
    4c24:	4620      	mov	r0, r4
    4c26:	f007 fb52 	bl	c2ce <z_log_msg2_runtime_create>
}
    4c2a:	4620      	mov	r0, r4
    4c2c:	b005      	add	sp, #20
    4c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    4c30:	4b2a      	ldr	r3, [pc, #168]	; (4cdc <hard_fault+0x14c>)
    4c32:	9302      	str	r3, [sp, #8]
    4c34:	2000      	movs	r0, #0
    4c36:	9001      	str	r0, [sp, #4]
    4c38:	9000      	str	r0, [sp, #0]
    4c3a:	4603      	mov	r3, r0
    4c3c:	2201      	movs	r2, #1
    4c3e:	4923      	ldr	r1, [pc, #140]	; (4ccc <hard_fault+0x13c>)
    4c40:	f007 fb45 	bl	c2ce <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4c44:	462c      	mov	r4, r5
    4c46:	e7f0      	b.n	4c2a <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4c48:	683b      	ldr	r3, [r7, #0]
    4c4a:	9303      	str	r3, [sp, #12]
    4c4c:	4b24      	ldr	r3, [pc, #144]	; (4ce0 <hard_fault+0x150>)
    4c4e:	9302      	str	r3, [sp, #8]
    4c50:	2000      	movs	r0, #0
    4c52:	9001      	str	r0, [sp, #4]
    4c54:	9000      	str	r0, [sp, #0]
    4c56:	4603      	mov	r3, r0
    4c58:	2201      	movs	r2, #1
    4c5a:	491c      	ldr	r1, [pc, #112]	; (4ccc <hard_fault+0x13c>)
    4c5c:	f007 fb37 	bl	c2ce <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    4c60:	683c      	ldr	r4, [r7, #0]
    4c62:	e7e2      	b.n	4c2a <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    4c64:	4632      	mov	r2, r6
    4c66:	2101      	movs	r1, #1
    4c68:	4638      	mov	r0, r7
    4c6a:	f7ff feb3 	bl	49d4 <mem_manage_fault>
    4c6e:	4604      	mov	r4, r0
    4c70:	e7db      	b.n	4c2a <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    4c72:	4632      	mov	r2, r6
    4c74:	2101      	movs	r1, #1
    4c76:	4638      	mov	r0, r7
    4c78:	f7ff fd46 	bl	4708 <bus_fault>
    4c7c:	4604      	mov	r4, r0
    4c7e:	e7d4      	b.n	4c2a <hard_fault+0x9a>
			__ASSERT(0,
    4c80:	4c18      	ldr	r4, [pc, #96]	; (4ce4 <hard_fault+0x154>)
    4c82:	f240 23cd 	movw	r3, #717	; 0x2cd
    4c86:	4622      	mov	r2, r4
    4c88:	4917      	ldr	r1, [pc, #92]	; (4ce8 <hard_fault+0x158>)
    4c8a:	4818      	ldr	r0, [pc, #96]	; (4cec <hard_fault+0x15c>)
    4c8c:	f007 fa3c 	bl	c108 <assert_print>
    4c90:	4817      	ldr	r0, [pc, #92]	; (4cf0 <hard_fault+0x160>)
    4c92:	f007 fa39 	bl	c108 <assert_print>
    4c96:	f240 21cd 	movw	r1, #717	; 0x2cd
    4c9a:	4620      	mov	r0, r4
    4c9c:	f007 fa2d 	bl	c0fa <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4ca0:	462c      	mov	r4, r5
    4ca2:	e7c2      	b.n	4c2a <hard_fault+0x9a>
		__ASSERT(0,
    4ca4:	4d0f      	ldr	r5, [pc, #60]	; (4ce4 <hard_fault+0x154>)
    4ca6:	f240 23d1 	movw	r3, #721	; 0x2d1
    4caa:	462a      	mov	r2, r5
    4cac:	490e      	ldr	r1, [pc, #56]	; (4ce8 <hard_fault+0x158>)
    4cae:	480f      	ldr	r0, [pc, #60]	; (4cec <hard_fault+0x15c>)
    4cb0:	f007 fa2a 	bl	c108 <assert_print>
    4cb4:	480f      	ldr	r0, [pc, #60]	; (4cf4 <hard_fault+0x164>)
    4cb6:	f007 fa27 	bl	c108 <assert_print>
    4cba:	f240 21d1 	movw	r1, #721	; 0x2d1
    4cbe:	4628      	mov	r0, r5
    4cc0:	f007 fa1b 	bl	c0fa <assert_post_action>
	return reason;
    4cc4:	e7b1      	b.n	4c2a <hard_fault+0x9a>
    4cc6:	bf00      	nop
    4cc8:	0000e864 	.word	0x0000e864
    4ccc:	0000d320 	.word	0x0000d320
    4cd0:	e000ed00 	.word	0xe000ed00
    4cd4:	0000e8b0 	.word	0x0000e8b0
    4cd8:	0000e87c 	.word	0x0000e87c
    4cdc:	0000e8a0 	.word	0x0000e8a0
    4ce0:	0000e8d0 	.word	0x0000e8d0
    4ce4:	0000e7b8 	.word	0x0000e7b8
    4ce8:	0000d680 	.word	0x0000d680
    4cec:	0000d4bc 	.word	0x0000d4bc
    4cf0:	0000e8ec 	.word	0x0000e8ec
    4cf4:	0000e910 	.word	0x0000e910

00004cf8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfa:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4cfc:	4b31      	ldr	r3, [pc, #196]	; (4dc4 <z_arm_fault+0xcc>)
    4cfe:	685d      	ldr	r5, [r3, #4]
    4d00:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4d04:	2300      	movs	r3, #0
    4d06:	f383 8811 	msr	BASEPRI, r3
    4d0a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4d0e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4d12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4d16:	d125      	bne.n	4d64 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4d18:	f002 030c 	and.w	r3, r2, #12
    4d1c:	2b08      	cmp	r3, #8
    4d1e:	d011      	beq.n	4d44 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4d20:	f012 0f08 	tst.w	r2, #8
    4d24:	d01b      	beq.n	4d5e <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    4d26:	460c      	mov	r4, r1
	*nested_exc = false;
    4d28:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4d2a:	b1f4      	cbz	r4, 4d6a <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4d2c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    4d30:	4629      	mov	r1, r5
    4d32:	4620      	mov	r0, r4
    4d34:	f007 fada 	bl	c2ec <fault_handle>
    4d38:	4605      	mov	r5, r0
	if (recoverable) {
    4d3a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    4d3e:	b32b      	cbz	r3, 4d8c <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4d40:	b00f      	add	sp, #60	; 0x3c
    4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4d44:	4b20      	ldr	r3, [pc, #128]	; (4dc8 <z_arm_fault+0xd0>)
    4d46:	9302      	str	r3, [sp, #8]
    4d48:	2400      	movs	r4, #0
    4d4a:	9401      	str	r4, [sp, #4]
    4d4c:	9400      	str	r4, [sp, #0]
    4d4e:	4623      	mov	r3, r4
    4d50:	2201      	movs	r2, #1
    4d52:	491e      	ldr	r1, [pc, #120]	; (4dcc <z_arm_fault+0xd4>)
    4d54:	4620      	mov	r0, r4
    4d56:	f007 faba 	bl	c2ce <z_log_msg2_runtime_create>
	*nested_exc = false;
    4d5a:	4626      	mov	r6, r4
		return NULL;
    4d5c:	e7e5      	b.n	4d2a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4d5e:	4604      	mov	r4, r0
			*nested_exc = true;
    4d60:	2601      	movs	r6, #1
    4d62:	e7e2      	b.n	4d2a <z_arm_fault+0x32>
	*nested_exc = false;
    4d64:	2600      	movs	r6, #0
		return NULL;
    4d66:	4634      	mov	r4, r6
    4d68:	e7df      	b.n	4d2a <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    4d6a:	4f19      	ldr	r7, [pc, #100]	; (4dd0 <z_arm_fault+0xd8>)
    4d6c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4d70:	463a      	mov	r2, r7
    4d72:	4918      	ldr	r1, [pc, #96]	; (4dd4 <z_arm_fault+0xdc>)
    4d74:	4818      	ldr	r0, [pc, #96]	; (4dd8 <z_arm_fault+0xe0>)
    4d76:	f007 f9c7 	bl	c108 <assert_print>
    4d7a:	4818      	ldr	r0, [pc, #96]	; (4ddc <z_arm_fault+0xe4>)
    4d7c:	f007 f9c4 	bl	c108 <assert_print>
    4d80:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4d84:	4638      	mov	r0, r7
    4d86:	f007 f9b8 	bl	c0fa <assert_post_action>
    4d8a:	e7cf      	b.n	4d2c <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4d8c:	2220      	movs	r2, #32
    4d8e:	4621      	mov	r1, r4
    4d90:	a805      	add	r0, sp, #20
    4d92:	f007 fb51 	bl	c438 <memcpy>
	if (nested_exc) {
    4d96:	b14e      	cbz	r6, 4dac <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4d9e:	b95a      	cbnz	r2, 4db8 <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4da0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4da4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4da8:	930c      	str	r3, [sp, #48]	; 0x30
    4daa:	e005      	b.n	4db8 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4db2:	f023 0301 	bic.w	r3, r3, #1
    4db6:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    4db8:	a905      	add	r1, sp, #20
    4dba:	4628      	mov	r0, r5
    4dbc:	f007 fa67 	bl	c28e <z_arm_fatal_error>
    4dc0:	e7be      	b.n	4d40 <z_arm_fault+0x48>
    4dc2:	bf00      	nop
    4dc4:	e000ed00 	.word	0xe000ed00
    4dc8:	0000e940 	.word	0x0000e940
    4dcc:	0000d320 	.word	0x0000d320
    4dd0:	0000e7b8 	.word	0x0000e7b8
    4dd4:	0000e96c 	.word	0x0000e96c
    4dd8:	0000d4bc 	.word	0x0000d4bc
    4ddc:	0000e980 	.word	0x0000e980

00004de0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4de0:	4a02      	ldr	r2, [pc, #8]	; (4dec <z_arm_fault_init+0xc>)
    4de2:	6953      	ldr	r3, [r2, #20]
    4de4:	f043 0310 	orr.w	r3, r3, #16
    4de8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4dea:	4770      	bx	lr
    4dec:	e000ed00 	.word	0xe000ed00

00004df0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4df0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4df4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4df8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4dfa:	4672      	mov	r2, lr
	bl z_arm_fault
    4dfc:	f7ff ff7c 	bl	4cf8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4e00:	bd01      	pop	{r0, pc}
    4e02:	bf00      	nop

00004e04 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4e04:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4e06:	e006      	b.n	4e16 <z_arm_interrupt_init+0x12>
    4e08:	f002 010f 	and.w	r1, r2, #15
    4e0c:	4b09      	ldr	r3, [pc, #36]	; (4e34 <z_arm_interrupt_init+0x30>)
    4e0e:	440b      	add	r3, r1
    4e10:	2120      	movs	r1, #32
    4e12:	7619      	strb	r1, [r3, #24]
    4e14:	3201      	adds	r2, #1
    4e16:	2a2f      	cmp	r2, #47	; 0x2f
    4e18:	dc0a      	bgt.n	4e30 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4e1a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	dbf3      	blt.n	4e08 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4e24:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4e28:	2120      	movs	r1, #32
    4e2a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4e2e:	e7f1      	b.n	4e14 <z_arm_interrupt_init+0x10>
	}
}
    4e30:	4770      	bx	lr
    4e32:	bf00      	nop
    4e34:	e000ecfc 	.word	0xe000ecfc

00004e38 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4e38:	2000      	movs	r0, #0
    msr CONTROL, r0
    4e3a:	f380 8814 	msr	CONTROL, r0
    isb
    4e3e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4e42:	f008 f90b 	bl	d05c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4e46:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4e48:	490d      	ldr	r1, [pc, #52]	; (4e80 <__start+0x48>)
    str r0, [r1]
    4e4a:	6008      	str	r0, [r1, #0]
    dsb
    4e4c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4e50:	480c      	ldr	r0, [pc, #48]	; (4e84 <__start+0x4c>)
    msr msp, r0
    4e52:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4e56:	f000 f82d 	bl	4eb4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4e5a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4e5c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4e60:	4809      	ldr	r0, [pc, #36]	; (4e88 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4e62:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4e66:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4e68:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4e6c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4e70:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4e72:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4e74:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4e78:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4e7c:	f7ff fb42 	bl	4504 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4e80:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4e84:	20002400 	.word	0x20002400
    ldr r0, =z_interrupt_stacks
    4e88:	20002580 	.word	0x20002580

00004e8c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4e8c:	4b08      	ldr	r3, [pc, #32]	; (4eb0 <z_arm_clear_arm_mpu_config+0x24>)
    4e8e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    4e92:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4e96:	2300      	movs	r3, #0
    4e98:	e006      	b.n	4ea8 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4e9a:	4a05      	ldr	r2, [pc, #20]	; (4eb0 <z_arm_clear_arm_mpu_config+0x24>)
    4e9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4ea0:	2100      	movs	r1, #0
    4ea2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4ea6:	3301      	adds	r3, #1
    4ea8:	4283      	cmp	r3, r0
    4eaa:	dbf6      	blt.n	4e9a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4eac:	4770      	bx	lr
    4eae:	bf00      	nop
    4eb0:	e000ed00 	.word	0xe000ed00

00004eb4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4eb4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4eb6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4eb8:	2400      	movs	r4, #0
    4eba:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4ebe:	f7ff ffe5 	bl	4e8c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4ec2:	4623      	mov	r3, r4
    4ec4:	e008      	b.n	4ed8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4ec6:	f103 0120 	add.w	r1, r3, #32
    4eca:	4a0e      	ldr	r2, [pc, #56]	; (4f04 <z_arm_init_arch_hw_at_boot+0x50>)
    4ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ed0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4ed4:	3301      	adds	r3, #1
    4ed6:	b2db      	uxtb	r3, r3
    4ed8:	2b07      	cmp	r3, #7
    4eda:	d9f4      	bls.n	4ec6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4edc:	2300      	movs	r3, #0
    4ede:	e008      	b.n	4ef2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4ee0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4ee4:	4a07      	ldr	r2, [pc, #28]	; (4f04 <z_arm_init_arch_hw_at_boot+0x50>)
    4ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4eea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4eee:	3301      	adds	r3, #1
    4ef0:	b2db      	uxtb	r3, r3
    4ef2:	2b07      	cmp	r3, #7
    4ef4:	d9f4      	bls.n	4ee0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4ef6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4efc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4f00:	bd10      	pop	{r4, pc}
    4f02:	bf00      	nop
    4f04:	e000e100 	.word	0xe000e100

00004f08 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4f08:	b508      	push	{r3, lr}
	if (_current == thread) {
    4f0a:	4b0a      	ldr	r3, [pc, #40]	; (4f34 <z_impl_k_thread_abort+0x2c>)
    4f0c:	689b      	ldr	r3, [r3, #8]
    4f0e:	4283      	cmp	r3, r0
    4f10:	d002      	beq.n	4f18 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4f12:	f005 ffab 	bl	ae6c <z_thread_abort>
}
    4f16:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f18:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d0f8      	beq.n	4f12 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f20:	4b05      	ldr	r3, [pc, #20]	; (4f38 <z_impl_k_thread_abort+0x30>)
    4f22:	685a      	ldr	r2, [r3, #4]
    4f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4f28:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4f30:	625a      	str	r2, [r3, #36]	; 0x24
    4f32:	e7ee      	b.n	4f12 <z_impl_k_thread_abort+0xa>
    4f34:	20001160 	.word	0x20001160
    4f38:	e000ed00 	.word	0xe000ed00

00004f3c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4f3c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4f3e:	4b03      	ldr	r3, [pc, #12]	; (4f4c <z_arm_configure_static_mpu_regions+0x10>)
    4f40:	4a03      	ldr	r2, [pc, #12]	; (4f50 <z_arm_configure_static_mpu_regions+0x14>)
    4f42:	2101      	movs	r1, #1
    4f44:	4803      	ldr	r0, [pc, #12]	; (4f54 <z_arm_configure_static_mpu_regions+0x18>)
    4f46:	f000 f8bb 	bl	50c0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4f4a:	bd08      	pop	{r3, pc}
    4f4c:	20040000 	.word	0x20040000
    4f50:	20000000 	.word	0x20000000
    4f54:	0000e9c4 	.word	0x0000e9c4

00004f58 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4f58:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4f5a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4f5e:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4f60:	4804      	ldr	r0, [pc, #16]	; (4f74 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4f62:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4f64:	2320      	movs	r3, #32
    4f66:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4f68:	4b03      	ldr	r3, [pc, #12]	; (4f78 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4f6a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4f6c:	2101      	movs	r1, #1
    4f6e:	f000 f8c9 	bl	5104 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4f72:	bd08      	pop	{r3, pc}
    4f74:	20000bfc 	.word	0x20000bfc
    4f78:	150b0000 	.word	0x150b0000

00004f7c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4f7c:	4a08      	ldr	r2, [pc, #32]	; (4fa0 <region_init+0x24>)
    4f7e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4f82:	680b      	ldr	r3, [r1, #0]
    4f84:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4f88:	4303      	orrs	r3, r0
    4f8a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4f8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4f92:	688b      	ldr	r3, [r1, #8]
    4f94:	f043 0301 	orr.w	r3, r3, #1
    4f98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4f9c:	4770      	bx	lr
    4f9e:	bf00      	nop
    4fa0:	e000ed00 	.word	0xe000ed00

00004fa4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4fa4:	b510      	push	{r4, lr}
    4fa6:	b084      	sub	sp, #16
    4fa8:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4faa:	2807      	cmp	r0, #7
    4fac:	d804      	bhi.n	4fb8 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4fae:	f7ff ffe5 	bl	4f7c <region_init>

	return index;
    4fb2:	4620      	mov	r0, r4
}
    4fb4:	b004      	add	sp, #16
    4fb6:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4fb8:	9003      	str	r0, [sp, #12]
    4fba:	4b06      	ldr	r3, [pc, #24]	; (4fd4 <region_allocate_and_init+0x30>)
    4fbc:	9302      	str	r3, [sp, #8]
    4fbe:	2000      	movs	r0, #0
    4fc0:	9001      	str	r0, [sp, #4]
    4fc2:	9000      	str	r0, [sp, #0]
    4fc4:	4603      	mov	r3, r0
    4fc6:	2201      	movs	r2, #1
    4fc8:	4903      	ldr	r1, [pc, #12]	; (4fd8 <region_allocate_and_init+0x34>)
    4fca:	f007 f9c5 	bl	c358 <z_log_msg2_runtime_create>
		return -EINVAL;
    4fce:	f06f 0015 	mvn.w	r0, #21
    4fd2:	e7ef      	b.n	4fb4 <region_allocate_and_init+0x10>
    4fd4:	0000e9d0 	.word	0x0000e9d0
    4fd8:	0000d318 	.word	0x0000d318

00004fdc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4fe0:	b085      	sub	sp, #20
    4fe2:	4680      	mov	r8, r0
    4fe4:	460f      	mov	r7, r1
    4fe6:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    4fe8:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4fea:	2500      	movs	r5, #0
    4fec:	e009      	b.n	5002 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4fee:	4621      	mov	r1, r4
    4ff0:	b2f0      	uxtb	r0, r6
    4ff2:	f007 f9c0 	bl	c376 <mpu_configure_region>
    4ff6:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4ff8:	f110 0f16 	cmn.w	r0, #22
    4ffc:	d01e      	beq.n	503c <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4ffe:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5000:	3501      	adds	r5, #1
    5002:	42bd      	cmp	r5, r7
    5004:	da1a      	bge.n	503c <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    5006:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    500a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    500e:	6862      	ldr	r2, [r4, #4]
    5010:	2a00      	cmp	r2, #0
    5012:	d0f5      	beq.n	5000 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    5014:	f1b9 0f00 	cmp.w	r9, #0
    5018:	d0e9      	beq.n	4fee <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    501a:	4620      	mov	r0, r4
    501c:	f007 f98b 	bl	c336 <mpu_partition_is_valid>
		if (do_sanity_check &&
    5020:	2800      	cmp	r0, #0
    5022:	d1e4      	bne.n	4fee <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    5024:	9503      	str	r5, [sp, #12]
    5026:	4b07      	ldr	r3, [pc, #28]	; (5044 <mpu_configure_regions+0x68>)
    5028:	9302      	str	r3, [sp, #8]
    502a:	9001      	str	r0, [sp, #4]
    502c:	9000      	str	r0, [sp, #0]
    502e:	4603      	mov	r3, r0
    5030:	2201      	movs	r2, #1
    5032:	4905      	ldr	r1, [pc, #20]	; (5048 <mpu_configure_regions+0x6c>)
    5034:	f007 f990 	bl	c358 <z_log_msg2_runtime_create>
			return -EINVAL;
    5038:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    503c:	4630      	mov	r0, r6
    503e:	b005      	add	sp, #20
    5040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5044:	0000e9f8 	.word	0x0000e9f8
    5048:	0000d318 	.word	0x0000d318

0000504c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    504c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    504e:	4c03      	ldr	r4, [pc, #12]	; (505c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5050:	2301      	movs	r3, #1
    5052:	7822      	ldrb	r2, [r4, #0]
    5054:	f7ff ffc2 	bl	4fdc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5058:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    505a:	bd10      	pop	{r4, pc}
    505c:	20001391 	.word	0x20001391

00005060 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5060:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5062:	2300      	movs	r3, #0
    5064:	4a09      	ldr	r2, [pc, #36]	; (508c <mpu_configure_dynamic_mpu_regions+0x2c>)
    5066:	7812      	ldrb	r2, [r2, #0]
    5068:	f7ff ffb8 	bl	4fdc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    506c:	f110 0f16 	cmn.w	r0, #22
    5070:	d00a      	beq.n	5088 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5072:	4603      	mov	r3, r0
    5074:	e006      	b.n	5084 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    5076:	4a06      	ldr	r2, [pc, #24]	; (5090 <mpu_configure_dynamic_mpu_regions+0x30>)
    5078:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    507c:	2100      	movs	r1, #0
    507e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5082:	3301      	adds	r3, #1
    5084:	2b07      	cmp	r3, #7
    5086:	ddf6      	ble.n	5076 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    5088:	bd08      	pop	{r3, pc}
    508a:	bf00      	nop
    508c:	20001391 	.word	0x20001391
    5090:	e000ed00 	.word	0xe000ed00

00005094 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5094:	4b04      	ldr	r3, [pc, #16]	; (50a8 <arm_core_mpu_enable+0x14>)
    5096:	2205      	movs	r2, #5
    5098:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    509c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    50a0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    50a4:	4770      	bx	lr
    50a6:	bf00      	nop
    50a8:	e000ed00 	.word	0xe000ed00

000050ac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    50ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    50b0:	4b02      	ldr	r3, [pc, #8]	; (50bc <arm_core_mpu_disable+0x10>)
    50b2:	2200      	movs	r2, #0
    50b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    50b8:	4770      	bx	lr
    50ba:	bf00      	nop
    50bc:	e000ed00 	.word	0xe000ed00

000050c0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    50c0:	b538      	push	{r3, r4, r5, lr}
    50c2:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    50c4:	f7ff ffc2 	bl	504c <mpu_configure_static_mpu_regions>
    50c8:	f110 0f16 	cmn.w	r0, #22
    50cc:	d000      	beq.n	50d0 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    50ce:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    50d0:	4d08      	ldr	r5, [pc, #32]	; (50f4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    50d2:	f240 1311 	movw	r3, #273	; 0x111
    50d6:	462a      	mov	r2, r5
    50d8:	4907      	ldr	r1, [pc, #28]	; (50f8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    50da:	4808      	ldr	r0, [pc, #32]	; (50fc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    50dc:	f007 f814 	bl	c108 <assert_print>
    50e0:	4621      	mov	r1, r4
    50e2:	4807      	ldr	r0, [pc, #28]	; (5100 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    50e4:	f007 f810 	bl	c108 <assert_print>
    50e8:	f240 1111 	movw	r1, #273	; 0x111
    50ec:	4628      	mov	r0, r5
    50ee:	f007 f804 	bl	c0fa <assert_post_action>
}
    50f2:	e7ec      	b.n	50ce <arm_core_mpu_configure_static_mpu_regions+0xe>
    50f4:	0000ea1c 	.word	0x0000ea1c
    50f8:	0000d680 	.word	0x0000d680
    50fc:	0000d4bc 	.word	0x0000d4bc
    5100:	0000ea54 	.word	0x0000ea54

00005104 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5104:	b538      	push	{r3, r4, r5, lr}
    5106:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    5108:	f7ff ffaa 	bl	5060 <mpu_configure_dynamic_mpu_regions>
    510c:	f110 0f16 	cmn.w	r0, #22
    5110:	d000      	beq.n	5114 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5112:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5114:	4d08      	ldr	r5, [pc, #32]	; (5138 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    5116:	f44f 7398 	mov.w	r3, #304	; 0x130
    511a:	462a      	mov	r2, r5
    511c:	4907      	ldr	r1, [pc, #28]	; (513c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    511e:	4808      	ldr	r0, [pc, #32]	; (5140 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    5120:	f006 fff2 	bl	c108 <assert_print>
    5124:	4621      	mov	r1, r4
    5126:	4807      	ldr	r0, [pc, #28]	; (5144 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    5128:	f006 ffee 	bl	c108 <assert_print>
    512c:	f44f 7198 	mov.w	r1, #304	; 0x130
    5130:	4628      	mov	r0, r5
    5132:	f006 ffe2 	bl	c0fa <assert_post_action>
}
    5136:	e7ec      	b.n	5112 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    5138:	0000ea1c 	.word	0x0000ea1c
    513c:	0000d680 	.word	0x0000d680
    5140:	0000d4bc 	.word	0x0000d4bc
    5144:	0000ea80 	.word	0x0000ea80

00005148 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    5148:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    514a:	4b24      	ldr	r3, [pc, #144]	; (51dc <z_arm_mpu_init+0x94>)
    514c:	681d      	ldr	r5, [r3, #0]
    514e:	2d08      	cmp	r5, #8
    5150:	d803      	bhi.n	515a <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5152:	f7ff ffab 	bl	50ac <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5156:	2400      	movs	r4, #0
    5158:	e01e      	b.n	5198 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    515a:	4c21      	ldr	r4, [pc, #132]	; (51e0 <z_arm_mpu_init+0x98>)
    515c:	f44f 73a4 	mov.w	r3, #328	; 0x148
    5160:	4622      	mov	r2, r4
    5162:	4920      	ldr	r1, [pc, #128]	; (51e4 <z_arm_mpu_init+0x9c>)
    5164:	4820      	ldr	r0, [pc, #128]	; (51e8 <z_arm_mpu_init+0xa0>)
    5166:	f006 ffcf 	bl	c108 <assert_print>
    516a:	2208      	movs	r2, #8
    516c:	4629      	mov	r1, r5
    516e:	481f      	ldr	r0, [pc, #124]	; (51ec <z_arm_mpu_init+0xa4>)
    5170:	f006 ffca 	bl	c108 <assert_print>
    5174:	f44f 71a4 	mov.w	r1, #328	; 0x148
    5178:	4620      	mov	r0, r4
    517a:	f006 ffbe 	bl	c0fa <assert_post_action>
		return -1;
    517e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5182:	e017      	b.n	51b4 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5184:	4b15      	ldr	r3, [pc, #84]	; (51dc <z_arm_mpu_init+0x94>)
    5186:	6859      	ldr	r1, [r3, #4]
    5188:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    518c:	0093      	lsls	r3, r2, #2
    518e:	4419      	add	r1, r3
    5190:	4620      	mov	r0, r4
    5192:	f7ff fef3 	bl	4f7c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5196:	3401      	adds	r4, #1
    5198:	42a5      	cmp	r5, r4
    519a:	d8f3      	bhi.n	5184 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    519c:	4b14      	ldr	r3, [pc, #80]	; (51f0 <z_arm_mpu_init+0xa8>)
    519e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    51a0:	f7ff ff78 	bl	5094 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    51a4:	4b13      	ldr	r3, [pc, #76]	; (51f4 <z_arm_mpu_init+0xac>)
    51a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    51aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    51ae:	2b08      	cmp	r3, #8
    51b0:	d101      	bne.n	51b6 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    51b2:	2000      	movs	r0, #0
}
    51b4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    51b6:	4c0a      	ldr	r4, [pc, #40]	; (51e0 <z_arm_mpu_init+0x98>)
    51b8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    51bc:	4622      	mov	r2, r4
    51be:	490e      	ldr	r1, [pc, #56]	; (51f8 <z_arm_mpu_init+0xb0>)
    51c0:	4809      	ldr	r0, [pc, #36]	; (51e8 <z_arm_mpu_init+0xa0>)
    51c2:	f006 ffa1 	bl	c108 <assert_print>
    51c6:	480d      	ldr	r0, [pc, #52]	; (51fc <z_arm_mpu_init+0xb4>)
    51c8:	f006 ff9e 	bl	c108 <assert_print>
    51cc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    51d0:	4620      	mov	r0, r4
    51d2:	f006 ff92 	bl	c0fa <assert_post_action>
	return 0;
    51d6:	2000      	movs	r0, #0
    51d8:	e7ec      	b.n	51b4 <z_arm_mpu_init+0x6c>
    51da:	bf00      	nop
    51dc:	0000eb68 	.word	0x0000eb68
    51e0:	0000ea1c 	.word	0x0000ea1c
    51e4:	0000d680 	.word	0x0000d680
    51e8:	0000d4bc 	.word	0x0000d4bc
    51ec:	0000eab0 	.word	0x0000eab0
    51f0:	20001391 	.word	0x20001391
    51f4:	e000ed00 	.word	0xe000ed00
    51f8:	0000eae4 	.word	0x0000eae4
    51fc:	0000eb34 	.word	0x0000eb34

00005200 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5200:	4b01      	ldr	r3, [pc, #4]	; (5208 <__stdout_hook_install+0x8>)
    5202:	6018      	str	r0, [r3, #0]
}
    5204:	4770      	bx	lr
    5206:	bf00      	nop
    5208:	200000c4 	.word	0x200000c4

0000520c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    520c:	3902      	subs	r1, #2
    520e:	2901      	cmp	r1, #1
    5210:	d804      	bhi.n	521c <z_impl_zephyr_fputc+0x10>
{
    5212:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    5214:	4b03      	ldr	r3, [pc, #12]	; (5224 <z_impl_zephyr_fputc+0x18>)
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	4798      	blx	r3
}
    521a:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    521c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	200000c4 	.word	0x200000c4

00005228 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    5228:	b40f      	push	{r0, r1, r2, r3}
    522a:	b500      	push	{lr}
    522c:	b083      	sub	sp, #12
    522e:	ab04      	add	r3, sp, #16
    5230:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    5234:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    5236:	2102      	movs	r1, #2
    5238:	4803      	ldr	r0, [pc, #12]	; (5248 <printf+0x20>)
    523a:	f7fd fe13 	bl	2e64 <cbvprintf>
	va_end(vargs);

	return r;
}
    523e:	b003      	add	sp, #12
    5240:	f85d eb04 	ldr.w	lr, [sp], #4
    5244:	b004      	add	sp, #16
    5246:	4770      	bx	lr
    5248:	0000c4d9 	.word	0x0000c4d9

0000524c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    524c:	b510      	push	{r4, lr}
	__asm__ volatile(
    524e:	f04f 0320 	mov.w	r3, #32
    5252:	f3ef 8411 	mrs	r4, BASEPRI
    5256:	f383 8812 	msr	BASEPRI_MAX, r3
    525a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    525e:	2301      	movs	r3, #1
    5260:	4a0c      	ldr	r2, [pc, #48]	; (5294 <nordicsemi_nrf52_init+0x48>)
    5262:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    526a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    526e:	f007 f937 	bl	c4e0 <nrf52_errata_197>
    5272:	b120      	cbz	r0, 527e <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5278:	2201      	movs	r2, #1
    527a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    527e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5282:	2201      	movs	r2, #1
    5284:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    5288:	f384 8811 	msr	BASEPRI, r4
    528c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5290:	2000      	movs	r0, #0
    5292:	bd10      	pop	{r4, pc}
    5294:	4001e000 	.word	0x4001e000

00005298 <sys_arch_reboot>:
    *p_gpregret = val;
    5298:	b2c0      	uxtb	r0, r0
    529a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    529e:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    52a2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    52a6:	4905      	ldr	r1, [pc, #20]	; (52bc <sys_arch_reboot+0x24>)
    52a8:	68ca      	ldr	r2, [r1, #12]
    52aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    52ae:	4b04      	ldr	r3, [pc, #16]	; (52c0 <sys_arch_reboot+0x28>)
    52b0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    52b2:	60cb      	str	r3, [r1, #12]
    52b4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    52b8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    52ba:	e7fd      	b.n	52b8 <sys_arch_reboot+0x20>
    52bc:	e000ed00 	.word	0xe000ed00
    52c0:	05fa0004 	.word	0x05fa0004

000052c4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    52c4:	b130      	cbz	r0, 52d4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    52c6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    52c8:	0180      	lsls	r0, r0, #6
    52ca:	4b03      	ldr	r3, [pc, #12]	; (52d8 <arch_busy_wait+0x14>)
    52cc:	f043 0301 	orr.w	r3, r3, #1
    52d0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    52d2:	bd08      	pop	{r3, pc}
    52d4:	4770      	bx	lr
    52d6:	bf00      	nop
    52d8:	0000d3d0 	.word	0x0000d3d0

000052dc <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    52dc:	4b07      	ldr	r3, [pc, #28]	; (52fc <adc_context_start_sampling+0x20>)
    52de:	2201      	movs	r2, #1
    52e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    52e4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    52e8:	b113      	cbz	r3, 52f0 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52ea:	4b04      	ldr	r3, [pc, #16]	; (52fc <adc_context_start_sampling+0x20>)
    52ec:	60da      	str	r2, [r3, #12]
}
    52ee:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52f0:	4b02      	ldr	r3, [pc, #8]	; (52fc <adc_context_start_sampling+0x20>)
    52f2:	2201      	movs	r2, #1
    52f4:	601a      	str	r2, [r3, #0]
    52f6:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    52f8:	4770      	bx	lr
    52fa:	bf00      	nop
    52fc:	40007000 	.word	0x40007000

00005300 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    5300:	b949      	cbnz	r1, 5316 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    5302:	4b05      	ldr	r3, [pc, #20]	; (5318 <adc_context_update_buffer_pointer+0x18>)
    5304:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    5308:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    530c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    530e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5312:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    5316:	4770      	bx	lr
    5318:	40007000 	.word	0x40007000

0000531c <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    531c:	7c02      	ldrb	r2, [r0, #16]
    531e:	f1a2 0308 	sub.w	r3, r2, #8
    5322:	2b06      	cmp	r3, #6
    5324:	d80d      	bhi.n	5342 <set_resolution+0x26>
    5326:	e8df f003 	tbb	[pc, r3]
    532a:	0c1e      	.short	0x0c1e
    532c:	0c040c20 	.word	0x0c040c20
    5330:	0a          	.byte	0x0a
    5331:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    5332:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    5334:	4b0e      	ldr	r3, [pc, #56]	; (5370 <set_resolution+0x54>)
    5336:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    533a:	2000      	movs	r0, #0
}
    533c:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    533e:	2203      	movs	r2, #3
		break;
    5340:	e7f8      	b.n	5334 <set_resolution+0x18>
{
    5342:	b500      	push	{lr}
    5344:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    5346:	9203      	str	r2, [sp, #12]
    5348:	4b0a      	ldr	r3, [pc, #40]	; (5374 <set_resolution+0x58>)
    534a:	9302      	str	r3, [sp, #8]
    534c:	2000      	movs	r0, #0
    534e:	9001      	str	r0, [sp, #4]
    5350:	9000      	str	r0, [sp, #0]
    5352:	4603      	mov	r3, r0
    5354:	2201      	movs	r2, #1
    5356:	4908      	ldr	r1, [pc, #32]	; (5378 <set_resolution+0x5c>)
    5358:	f007 f8f9 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    535c:	f06f 0015 	mvn.w	r0, #21
}
    5360:	b005      	add	sp, #20
    5362:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    5366:	2200      	movs	r2, #0
    5368:	e7e4      	b.n	5334 <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    536a:	2201      	movs	r2, #1
    536c:	e7e2      	b.n	5334 <set_resolution+0x18>
    536e:	bf00      	nop
    5370:	40007000 	.word	0x40007000
    5374:	0000eb8c 	.word	0x0000eb8c
    5378:	0000d2f0 	.word	0x0000d2f0

0000537c <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    537c:	b500      	push	{lr}
    537e:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    5380:	2901      	cmp	r1, #1
    5382:	d901      	bls.n	5388 <set_oversampling+0xc>
    5384:	7c43      	ldrb	r3, [r0, #17]
    5386:	b94b      	cbnz	r3, 539c <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    5388:	7c43      	ldrb	r3, [r0, #17]
    538a:	2b08      	cmp	r3, #8
    538c:	d813      	bhi.n	53b6 <set_oversampling+0x3a>
    538e:	e8df f003 	tbb	[pc, r3]
    5392:	2020      	.short	0x2020
    5394:	20202020 	.word	0x20202020
    5398:	2020      	.short	0x2020
    539a:	20          	.byte	0x20
    539b:	00          	.byte	0x00
		LOG_ERR(
    539c:	4b10      	ldr	r3, [pc, #64]	; (53e0 <set_oversampling+0x64>)
    539e:	9302      	str	r3, [sp, #8]
    53a0:	2000      	movs	r0, #0
    53a2:	9001      	str	r0, [sp, #4]
    53a4:	9000      	str	r0, [sp, #0]
    53a6:	4603      	mov	r3, r0
    53a8:	2201      	movs	r2, #1
    53aa:	490e      	ldr	r1, [pc, #56]	; (53e4 <set_oversampling+0x68>)
    53ac:	f007 f8cf 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    53b0:	f06f 0015 	mvn.w	r0, #21
    53b4:	e011      	b.n	53da <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    53b6:	9303      	str	r3, [sp, #12]
    53b8:	4b0b      	ldr	r3, [pc, #44]	; (53e8 <set_oversampling+0x6c>)
    53ba:	9302      	str	r3, [sp, #8]
    53bc:	2000      	movs	r0, #0
    53be:	9001      	str	r0, [sp, #4]
    53c0:	9000      	str	r0, [sp, #0]
    53c2:	4603      	mov	r3, r0
    53c4:	2201      	movs	r2, #1
    53c6:	4907      	ldr	r1, [pc, #28]	; (53e4 <set_oversampling+0x68>)
    53c8:	f007 f8c1 	bl	c54e <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    53cc:	f06f 0015 	mvn.w	r0, #21
    53d0:	e003      	b.n	53da <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    53d2:	4a06      	ldr	r2, [pc, #24]	; (53ec <set_oversampling+0x70>)
    53d4:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    53d8:	2000      	movs	r0, #0
}
    53da:	b005      	add	sp, #20
    53dc:	f85d fb04 	ldr.w	pc, [sp], #4
    53e0:	0000ebb4 	.word	0x0000ebb4
    53e4:	0000d2f0 	.word	0x0000d2f0
    53e8:	0000ebe8 	.word	0x0000ebe8
    53ec:	40007000 	.word	0x40007000

000053f0 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    53f0:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    53f2:	6803      	ldr	r3, [r0, #0]
    53f4:	b113      	cbz	r3, 53fc <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    53f6:	899b      	ldrh	r3, [r3, #12]
    53f8:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    53fc:	68c3      	ldr	r3, [r0, #12]
    53fe:	428b      	cmp	r3, r1
    5400:	d301      	bcc.n	5406 <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    5402:	2000      	movs	r0, #0
}
    5404:	4770      	bx	lr
{
    5406:	b500      	push	{lr}
    5408:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    540a:	9104      	str	r1, [sp, #16]
    540c:	9303      	str	r3, [sp, #12]
    540e:	4b07      	ldr	r3, [pc, #28]	; (542c <check_buffer_size+0x3c>)
    5410:	9302      	str	r3, [sp, #8]
    5412:	2000      	movs	r0, #0
    5414:	9001      	str	r0, [sp, #4]
    5416:	9000      	str	r0, [sp, #0]
    5418:	4603      	mov	r3, r0
    541a:	2201      	movs	r2, #1
    541c:	4904      	ldr	r1, [pc, #16]	; (5430 <check_buffer_size+0x40>)
    541e:	f007 f896 	bl	c54e <z_log_msg2_runtime_create>
		return -ENOMEM;
    5422:	f06f 000b 	mvn.w	r0, #11
}
    5426:	b007      	add	sp, #28
    5428:	f85d fb04 	ldr.w	pc, [sp], #4
    542c:	0000ec0c 	.word	0x0000ec0c
    5430:	0000d2f0 	.word	0x0000d2f0

00005434 <adc_nrfx_channel_setup>:
{
    5434:	b510      	push	{r4, lr}
    5436:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    5438:	2300      	movs	r3, #0
    543a:	9304      	str	r3, [sp, #16]
    543c:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    5440:	790a      	ldrb	r2, [r1, #4]
    5442:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    5446:	2a07      	cmp	r2, #7
    5448:	f200 80d0 	bhi.w	55ec <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    544c:	780b      	ldrb	r3, [r1, #0]
    544e:	2b09      	cmp	r3, #9
    5450:	d833      	bhi.n	54ba <adc_nrfx_channel_setup+0x86>
    5452:	e8df f003 	tbb	[pc, r3]
    5456:	0508      	.short	0x0508
    5458:	32221e1a 	.word	0x32221e1a
    545c:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    5460:	2301      	movs	r3, #1
    5462:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    5466:	784b      	ldrb	r3, [r1, #1]
    5468:	2b03      	cmp	r3, #3
    546a:	d033      	beq.n	54d4 <adc_nrfx_channel_setup+0xa0>
    546c:	2b04      	cmp	r3, #4
    546e:	d034      	beq.n	54da <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    5470:	4b60      	ldr	r3, [pc, #384]	; (55f4 <adc_nrfx_channel_setup+0x1c0>)
    5472:	9302      	str	r3, [sp, #8]
    5474:	2000      	movs	r0, #0
    5476:	9001      	str	r0, [sp, #4]
    5478:	9000      	str	r0, [sp, #0]
    547a:	4603      	mov	r3, r0
    547c:	2201      	movs	r2, #1
    547e:	495e      	ldr	r1, [pc, #376]	; (55f8 <adc_nrfx_channel_setup+0x1c4>)
    5480:	f007 f865 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    5484:	f06f 0015 	mvn.w	r0, #21
    5488:	e091      	b.n	55ae <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    548a:	2302      	movs	r3, #2
    548c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5490:	e7e9      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    5492:	2303      	movs	r3, #3
    5494:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5498:	e7e5      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    549a:	2304      	movs	r3, #4
    549c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54a0:	e7e1      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    54a2:	2305      	movs	r3, #5
    54a4:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54a8:	e7dd      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    54aa:	2306      	movs	r3, #6
    54ac:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54b0:	e7d9      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    54b2:	2307      	movs	r3, #7
    54b4:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54b8:	e7d5      	b.n	5466 <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    54ba:	4b50      	ldr	r3, [pc, #320]	; (55fc <adc_nrfx_channel_setup+0x1c8>)
    54bc:	9302      	str	r3, [sp, #8]
    54be:	2000      	movs	r0, #0
    54c0:	9001      	str	r0, [sp, #4]
    54c2:	9000      	str	r0, [sp, #0]
    54c4:	4603      	mov	r3, r0
    54c6:	2201      	movs	r2, #1
    54c8:	494b      	ldr	r1, [pc, #300]	; (55f8 <adc_nrfx_channel_setup+0x1c4>)
    54ca:	f007 f840 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    54ce:	f06f 0015 	mvn.w	r0, #21
    54d2:	e06c      	b.n	55ae <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    54d4:	2301      	movs	r3, #1
    54d6:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    54da:	884b      	ldrh	r3, [r1, #2]
    54dc:	2b00      	cmp	r3, #0
    54de:	d068      	beq.n	55b2 <adc_nrfx_channel_setup+0x17e>
    54e0:	f244 0028 	movw	r0, #16424	; 0x4028
    54e4:	4283      	cmp	r3, r0
    54e6:	d874      	bhi.n	55d2 <adc_nrfx_channel_setup+0x19e>
    54e8:	f244 0003 	movw	r0, #16387	; 0x4003
    54ec:	4283      	cmp	r3, r0
    54ee:	d370      	bcc.n	55d2 <adc_nrfx_channel_setup+0x19e>
    54f0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    54f4:	3b03      	subs	r3, #3
    54f6:	2b25      	cmp	r3, #37	; 0x25
    54f8:	d86b      	bhi.n	55d2 <adc_nrfx_channel_setup+0x19e>
    54fa:	e8df f003 	tbb	[pc, r3]
    54fe:	6a16      	.short	0x6a16
    5500:	6a6a6a13 	.word	0x6a6a6a13
    5504:	6a6a5a6a 	.word	0x6a6a5a6a
    5508:	6a5e6a6a 	.word	0x6a5e6a6a
    550c:	626a6a6a 	.word	0x626a6a6a
    5510:	6a6a6a6a 	.word	0x6a6a6a6a
    5514:	6a6a6a6a 	.word	0x6a6a6a6a
    5518:	6a6a6a6a 	.word	0x6a6a6a6a
    551c:	6a6a6a6a 	.word	0x6a6a6a6a
    5520:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    5524:	2301      	movs	r3, #1
    5526:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    552a:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    552c:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    5530:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    5534:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5538:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    553c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    5540:	0100      	lsls	r0, r0, #4
    5542:	f000 0030 	and.w	r0, r0, #48	; 0x30
    5546:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    5548:	f89d 0012 	ldrb.w	r0, [sp, #18]
    554c:	0200      	lsls	r0, r0, #8
    554e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    5552:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    5554:	f89d 0013 	ldrb.w	r0, [sp, #19]
    5558:	0300      	lsls	r0, r0, #12
    555a:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    555e:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    5560:	f89d 0014 	ldrb.w	r0, [sp, #20]
    5564:	0400      	lsls	r0, r0, #16
    5566:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    556a:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    556c:	f89d 0015 	ldrb.w	r0, [sp, #21]
    5570:	0500      	lsls	r0, r0, #20
    5572:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    5576:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    5578:	f89d 0016 	ldrb.w	r0, [sp, #22]
    557c:	0600      	lsls	r0, r0, #24
    557e:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    5582:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    5584:	4c1e      	ldr	r4, [pc, #120]	; (5600 <adc_nrfx_channel_setup+0x1cc>)
    5586:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    558a:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    558e:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    5590:	f102 0351 	add.w	r3, r2, #81	; 0x51
    5594:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    5598:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    559c:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    559e:	2000      	movs	r0, #0
    55a0:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    55a4:	7949      	ldrb	r1, [r1, #5]
    55a6:	4b17      	ldr	r3, [pc, #92]	; (5604 <adc_nrfx_channel_setup+0x1d0>)
    55a8:	441a      	add	r2, r3
    55aa:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    55ae:	b006      	add	sp, #24
    55b0:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    55b2:	2302      	movs	r3, #2
    55b4:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    55b8:	e7b7      	b.n	552a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    55ba:	2303      	movs	r3, #3
    55bc:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    55c0:	e7b3      	b.n	552a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    55c2:	2304      	movs	r3, #4
    55c4:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    55c8:	e7af      	b.n	552a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    55ca:	2305      	movs	r3, #5
    55cc:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    55d0:	e7ab      	b.n	552a <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    55d2:	4b0d      	ldr	r3, [pc, #52]	; (5608 <adc_nrfx_channel_setup+0x1d4>)
    55d4:	9302      	str	r3, [sp, #8]
    55d6:	2000      	movs	r0, #0
    55d8:	9001      	str	r0, [sp, #4]
    55da:	9000      	str	r0, [sp, #0]
    55dc:	4603      	mov	r3, r0
    55de:	2201      	movs	r2, #1
    55e0:	4905      	ldr	r1, [pc, #20]	; (55f8 <adc_nrfx_channel_setup+0x1c4>)
    55e2:	f006 ffb4 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    55e6:	f06f 0015 	mvn.w	r0, #21
    55ea:	e7e0      	b.n	55ae <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    55ec:	f06f 0015 	mvn.w	r0, #21
    55f0:	e7dd      	b.n	55ae <adc_nrfx_channel_setup+0x17a>
    55f2:	bf00      	nop
    55f4:	0000ec54 	.word	0x0000ec54
    55f8:	0000d2f0 	.word	0x0000d2f0
    55fc:	0000ec34 	.word	0x0000ec34
    5600:	40007000 	.word	0x40007000
    5604:	20000000 	.word	0x20000000
    5608:	0000ec78 	.word	0x0000ec78

0000560c <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    560c:	b5f0      	push	{r4, r5, r6, r7, lr}
    560e:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    5610:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    5612:	b136      	cbz	r6, 5622 <start_read+0x16>
    5614:	460d      	mov	r5, r1
    5616:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    561a:	d102      	bne.n	5622 <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    561c:	2300      	movs	r3, #0
	active_channels = 0U;
    561e:	461c      	mov	r4, r3
    5620:	e024      	b.n	566c <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    5622:	4b54      	ldr	r3, [pc, #336]	; (5774 <start_read+0x168>)
    5624:	9302      	str	r3, [sp, #8]
    5626:	2000      	movs	r0, #0
    5628:	9001      	str	r0, [sp, #4]
    562a:	9000      	str	r0, [sp, #0]
    562c:	4603      	mov	r3, r0
    562e:	2201      	movs	r2, #1
    5630:	4951      	ldr	r1, [pc, #324]	; (5778 <start_read+0x16c>)
    5632:	f006 ff8c 	bl	c54e <z_log_msg2_runtime_create>
		return -EINVAL;
    5636:	f06f 0315 	mvn.w	r3, #21
    563a:	e03f      	b.n	56bc <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    563c:	9303      	str	r3, [sp, #12]
    563e:	4b4f      	ldr	r3, [pc, #316]	; (577c <start_read+0x170>)
    5640:	9302      	str	r3, [sp, #8]
    5642:	2000      	movs	r0, #0
    5644:	9001      	str	r0, [sp, #4]
    5646:	9000      	str	r0, [sp, #0]
    5648:	4603      	mov	r3, r0
    564a:	2201      	movs	r2, #1
    564c:	494a      	ldr	r1, [pc, #296]	; (5778 <start_read+0x16c>)
    564e:	f006 ff7e 	bl	c54e <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    5652:	f06f 0315 	mvn.w	r3, #21
    5656:	e031      	b.n	56bc <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    5658:	f103 0251 	add.w	r2, r3, #81	; 0x51
    565c:	0112      	lsls	r2, r2, #4
    565e:	4948      	ldr	r1, [pc, #288]	; (5780 <start_read+0x174>)
    5660:	2000      	movs	r0, #0
    5662:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    5664:	3301      	adds	r3, #1
    5666:	b2db      	uxtb	r3, r3
    5668:	2b07      	cmp	r3, #7
    566a:	d822      	bhi.n	56b2 <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    566c:	461a      	mov	r2, r3
    566e:	fa26 f103 	lsr.w	r1, r6, r3
    5672:	f011 0f01 	tst.w	r1, #1
    5676:	d0ef      	beq.n	5658 <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    5678:	4942      	ldr	r1, [pc, #264]	; (5784 <start_read+0x178>)
    567a:	4419      	add	r1, r3
    567c:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    5680:	2f00      	cmp	r7, #0
    5682:	d0db      	beq.n	563c <start_read+0x30>
				(sequence->oversampling != 0U ?
    5684:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    5686:	1e01      	subs	r1, r0, #0
    5688:	bf18      	it	ne
    568a:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    568c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 5780 <start_read+0x174>
    5690:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    5694:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    5698:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    569c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    56a0:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    56a4:	3251      	adds	r2, #81	; 0x51
    56a6:	0112      	lsls	r2, r2, #4
    56a8:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    56ac:	3401      	adds	r4, #1
    56ae:	b2e4      	uxtb	r4, r4
    56b0:	e7d8      	b.n	5664 <start_read+0x58>

	error = set_resolution(sequence);
    56b2:	4628      	mov	r0, r5
    56b4:	f7ff fe32 	bl	531c <set_resolution>
	if (error) {
    56b8:	4603      	mov	r3, r0
    56ba:	b110      	cbz	r0, 56c2 <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    56bc:	4618      	mov	r0, r3
    56be:	b005      	add	sp, #20
    56c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    56c2:	4621      	mov	r1, r4
    56c4:	4628      	mov	r0, r5
    56c6:	f7ff fe59 	bl	537c <set_oversampling>
	if (error) {
    56ca:	4603      	mov	r3, r0
    56cc:	2800      	cmp	r0, #0
    56ce:	d1f5      	bne.n	56bc <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    56d0:	4621      	mov	r1, r4
    56d2:	4628      	mov	r0, r5
    56d4:	f7ff fe8c 	bl	53f0 <check_buffer_size>
	if (error) {
    56d8:	4603      	mov	r3, r0
    56da:	2800      	cmp	r0, #0
    56dc:	d1ee      	bne.n	56bc <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    56de:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    56e0:	4b27      	ldr	r3, [pc, #156]	; (5780 <start_read+0x174>)
    56e2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    56e6:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    56ea:	4f26      	ldr	r7, [pc, #152]	; (5784 <start_read+0x178>)
    56ec:	f107 0464 	add.w	r4, r7, #100	; 0x64
    56f0:	462e      	mov	r6, r5
    56f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    56f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    56f6:	6833      	ldr	r3, [r6, #0]
    56f8:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    56fa:	2300      	movs	r3, #0
    56fc:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    56fe:	682b      	ldr	r3, [r5, #0]
    5700:	b14b      	cbz	r3, 5716 <start_read+0x10a>
		ctx->options = *sequence->options;
    5702:	f107 0478 	add.w	r4, r7, #120	; 0x78
    5706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    570c:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    570e:	2300      	movs	r3, #0
    5710:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    5714:	b968      	cbnz	r0, 5732 <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    5716:	481b      	ldr	r0, [pc, #108]	; (5784 <start_read+0x178>)
    5718:	f7ff fde0 	bl	52dc <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    571c:	4c19      	ldr	r4, [pc, #100]	; (5784 <start_read+0x178>)
    571e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5726:	f104 0050 	add.w	r0, r4, #80	; 0x50
    572a:	f004 f8b1 	bl	9890 <z_impl_k_sem_take>
	return ctx->status;
    572e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    5730:	e7c4      	b.n	56bc <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5732:	463c      	mov	r4, r7
    5734:	2300      	movs	r3, #0
    5736:	f3bf 8f5b 	dmb	ish
    573a:	e854 2f00 	ldrex	r2, [r4]
    573e:	e844 3100 	strex	r1, r3, [r4]
    5742:	2900      	cmp	r1, #0
    5744:	d1f9      	bne.n	573a <start_read+0x12e>
    5746:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    574a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    574c:	0c59      	lsrs	r1, r3, #17
    574e:	03db      	lsls	r3, r3, #15
    5750:	480d      	ldr	r0, [pc, #52]	; (5788 <start_read+0x17c>)
    5752:	1818      	adds	r0, r3, r0
    5754:	4a0d      	ldr	r2, [pc, #52]	; (578c <start_read+0x180>)
    5756:	f04f 0300 	mov.w	r3, #0
    575a:	f141 0100 	adc.w	r1, r1, #0
    575e:	f7fa feb1 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    5762:	9000      	str	r0, [sp, #0]
    5764:	9101      	str	r1, [sp, #4]
    5766:	2200      	movs	r2, #0
    5768:	2300      	movs	r3, #0
    576a:	f104 0008 	add.w	r0, r4, #8
    576e:	f006 f863 	bl	b838 <z_impl_k_timer_start>
}
    5772:	e7d3      	b.n	571c <start_read+0x110>
    5774:	0000eca4 	.word	0x0000eca4
    5778:	0000d2f0 	.word	0x0000d2f0
    577c:	0000ecc4 	.word	0x0000ecc4
    5780:	40007000 	.word	0x40007000
    5784:	20000000 	.word	0x20000000
    5788:	000f423f 	.word	0x000f423f
    578c:	000f4240 	.word	0x000f4240

00005790 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    5790:	b570      	push	{r4, r5, r6, lr}
    5792:	4604      	mov	r4, r0
    5794:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    5796:	4e09      	ldr	r6, [pc, #36]	; (57bc <adc_nrfx_read+0x2c>)
    5798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57a0:	4630      	mov	r0, r6
    57a2:	f004 f875 	bl	9890 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    57a6:	4629      	mov	r1, r5
    57a8:	4620      	mov	r0, r4
    57aa:	f7ff ff2f 	bl	560c <start_read>
    57ae:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    57b0:	4630      	mov	r0, r6
    57b2:	f004 f829 	bl	9808 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    57b6:	4620      	mov	r0, r4
    57b8:	bd70      	pop	{r4, r5, r6, pc}
    57ba:	bf00      	nop
    57bc:	20000040 	.word	0x20000040

000057c0 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    57c0:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57c2:	4b0f      	ldr	r3, [pc, #60]	; (5800 <init_saadc+0x40>)
    57c4:	2400      	movs	r4, #0
    57c6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    57ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    57ce:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    57d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    57d6:	2212      	movs	r2, #18
    57d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    57dc:	2007      	movs	r0, #7
    57de:	f7fe fe3b 	bl	4458 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    57e2:	4622      	mov	r2, r4
    57e4:	2101      	movs	r1, #1
    57e6:	2007      	movs	r0, #7
    57e8:	f7fe fe52 	bl	4490 <z_arm_irq_priority_set>
	return sem->count;
    57ec:	4b05      	ldr	r3, [pc, #20]	; (5804 <init_saadc+0x44>)
    57ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    57f0:	b10b      	cbz	r3, 57f6 <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    57f2:	2000      	movs	r0, #0
    57f4:	bd10      	pop	{r4, pc}
    57f6:	4804      	ldr	r0, [pc, #16]	; (5808 <init_saadc+0x48>)
    57f8:	f004 f806 	bl	9808 <z_impl_k_sem_give>
}
    57fc:	e7f9      	b.n	57f2 <init_saadc+0x32>
    57fe:	bf00      	nop
    5800:	40007000 	.word	0x40007000
    5804:	20000000 	.word	0x20000000
    5808:	20000040 	.word	0x20000040

0000580c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    580c:	4b36      	ldr	r3, [pc, #216]	; (58e8 <saadc_irq_handler+0xdc>)
    580e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    5812:	b97b      	cbnz	r3, 5834 <saadc_irq_handler+0x28>
    5814:	4b34      	ldr	r3, [pc, #208]	; (58e8 <saadc_irq_handler+0xdc>)
    5816:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    581a:	2b00      	cmp	r3, #0
    581c:	d062      	beq.n	58e4 <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    581e:	4b32      	ldr	r3, [pc, #200]	; (58e8 <saadc_irq_handler+0xdc>)
    5820:	2200      	movs	r2, #0
    5822:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5826:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    582a:	2201      	movs	r2, #1
    582c:	609a      	str	r2, [r3, #8]
    582e:	601a      	str	r2, [r3, #0]
    5830:	605a      	str	r2, [r3, #4]
}
    5832:	4770      	bx	lr
{
    5834:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5836:	4b2c      	ldr	r3, [pc, #176]	; (58e8 <saadc_irq_handler+0xdc>)
    5838:	2200      	movs	r2, #0
    583a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    583e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5842:	2101      	movs	r1, #1
    5844:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    5846:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    584a:	4b28      	ldr	r3, [pc, #160]	; (58ec <saadc_irq_handler+0xe0>)
    584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    584e:	b313      	cbz	r3, 5896 <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    5850:	4b26      	ldr	r3, [pc, #152]	; (58ec <saadc_irq_handler+0xe0>)
    5852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    5854:	b143      	cbz	r3, 5868 <saadc_irq_handler+0x5c>
			action = callback(dev,
    5856:	4925      	ldr	r1, [pc, #148]	; (58ec <saadc_irq_handler+0xe0>)
    5858:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    585c:	3164      	adds	r1, #100	; 0x64
    585e:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    5860:	2801      	cmp	r0, #1
    5862:	d00f      	beq.n	5884 <saadc_irq_handler+0x78>
    5864:	2802      	cmp	r0, #2
    5866:	d010      	beq.n	588a <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    5868:	4a20      	ldr	r2, [pc, #128]	; (58ec <saadc_irq_handler+0xe0>)
    586a:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    586e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    5872:	4293      	cmp	r3, r2
    5874:	d213      	bcs.n	589e <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    5876:	3301      	adds	r3, #1
    5878:	4a1c      	ldr	r2, [pc, #112]	; (58ec <saadc_irq_handler+0xe0>)
    587a:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    587e:	2100      	movs	r1, #0
		bool finish = false;
    5880:	460b      	mov	r3, r1
    5882:	e004      	b.n	588e <saadc_irq_handler+0x82>
		switch (action) {
    5884:	2101      	movs	r1, #1
    5886:	2300      	movs	r3, #0
    5888:	e001      	b.n	588e <saadc_irq_handler+0x82>
		bool repeat = false;
    588a:	2100      	movs	r1, #0
			finish = true;
    588c:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    588e:	b14b      	cbz	r3, 58a4 <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    5890:	4b16      	ldr	r3, [pc, #88]	; (58ec <saadc_irq_handler+0xe0>)
    5892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5894:	bb13      	cbnz	r3, 58dc <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    5896:	4816      	ldr	r0, [pc, #88]	; (58f0 <saadc_irq_handler+0xe4>)
    5898:	f003 ffb6 	bl	9808 <z_impl_k_sem_give>
}
    589c:	bd10      	pop	{r4, pc}
		bool repeat = false;
    589e:	2100      	movs	r1, #0
				finish = true;
    58a0:	2301      	movs	r3, #1
    58a2:	e7f4      	b.n	588e <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    58a4:	4c11      	ldr	r4, [pc, #68]	; (58ec <saadc_irq_handler+0xe0>)
    58a6:	4620      	mov	r0, r4
    58a8:	f7ff fd2a 	bl	5300 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    58ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    58ae:	b91b      	cbnz	r3, 58b8 <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    58b0:	4620      	mov	r0, r4
    58b2:	f7ff fd13 	bl	52dc <adc_context_start_sampling>
    58b6:	e7f1      	b.n	589c <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    58b8:	4b0c      	ldr	r3, [pc, #48]	; (58ec <saadc_irq_handler+0xe0>)
    58ba:	f3bf 8f5b 	dmb	ish
    58be:	e853 2f00 	ldrex	r2, [r3]
    58c2:	1e51      	subs	r1, r2, #1
    58c4:	e843 1000 	strex	r0, r1, [r3]
    58c8:	2800      	cmp	r0, #0
    58ca:	d1f8      	bne.n	58be <saadc_irq_handler+0xb2>
    58cc:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    58d0:	2a01      	cmp	r2, #1
    58d2:	dde3      	ble.n	589c <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    58d4:	4618      	mov	r0, r3
    58d6:	f7ff fd01 	bl	52dc <adc_context_start_sampling>
			return;
    58da:	e7df      	b.n	589c <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    58dc:	4805      	ldr	r0, [pc, #20]	; (58f4 <saadc_irq_handler+0xe8>)
    58de:	f007 fb99 	bl	d014 <z_impl_k_timer_stop>
}
    58e2:	e7d8      	b.n	5896 <saadc_irq_handler+0x8a>
    58e4:	4770      	bx	lr
    58e6:	bf00      	nop
    58e8:	40007000 	.word	0x40007000
    58ec:	20000000 	.word	0x20000000
    58f0:	20000050 	.word	0x20000050
    58f4:	20000008 	.word	0x20000008

000058f8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    58f8:	4800      	ldr	r0, [pc, #0]	; (58fc <get_hf_flags+0x4>)
    58fa:	4770      	bx	lr
    58fc:	20000c60 	.word	0x20000c60

00005900 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5900:	4b01      	ldr	r3, [pc, #4]	; (5908 <get_subsys+0x8>)
    5902:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    5904:	1140      	asrs	r0, r0, #5
    5906:	4770      	bx	lr
    5908:	20000c18 	.word	0x20000c18

0000590c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    590c:	b530      	push	{r4, r5, lr}
    590e:	b083      	sub	sp, #12
    5910:	4605      	mov	r5, r0
    5912:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5914:	f7ff fff4 	bl	5900 <get_subsys>
    5918:	4601      	mov	r1, r0
    591a:	2340      	movs	r3, #64	; 0x40
    591c:	9300      	str	r3, [sp, #0]
    591e:	4623      	mov	r3, r4
    5920:	4a05      	ldr	r2, [pc, #20]	; (5938 <onoff_start+0x2c>)
    5922:	4806      	ldr	r0, [pc, #24]	; (593c <onoff_start+0x30>)
    5924:	f006 fe8f 	bl	c646 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5928:	1e01      	subs	r1, r0, #0
    592a:	db01      	blt.n	5930 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    592c:	b003      	add	sp, #12
    592e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    5930:	4628      	mov	r0, r5
    5932:	47a0      	blx	r4
}
    5934:	e7fa      	b.n	592c <onoff_start+0x20>
    5936:	bf00      	nop
    5938:	0000c68f 	.word	0x0000c68f
    593c:	0000d0e0 	.word	0x0000d0e0

00005940 <generic_hfclk_stop>:
{
    5940:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5942:	4b0a      	ldr	r3, [pc, #40]	; (596c <generic_hfclk_stop+0x2c>)
    5944:	f3bf 8f5b 	dmb	ish
    5948:	e853 2f00 	ldrex	r2, [r3]
    594c:	f022 0102 	bic.w	r1, r2, #2
    5950:	e843 1000 	strex	r0, r1, [r3]
    5954:	2800      	cmp	r0, #0
    5956:	d1f7      	bne.n	5948 <generic_hfclk_stop+0x8>
    5958:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    595c:	f012 0f01 	tst.w	r2, #1
    5960:	d000      	beq.n	5964 <generic_hfclk_stop+0x24>
}
    5962:	bd08      	pop	{r3, pc}
	hfclk_stop();
    5964:	f006 fea5 	bl	c6b2 <hfclk_stop>
    5968:	e7fb      	b.n	5962 <generic_hfclk_stop+0x22>
    596a:	bf00      	nop
    596c:	20000c70 	.word	0x20000c70

00005970 <get_status>:
{
    5970:	b570      	push	{r4, r5, r6, lr}
    5972:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5974:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5976:	2c01      	cmp	r4, #1
    5978:	d807      	bhi.n	598a <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    597a:	4621      	mov	r1, r4
    597c:	4628      	mov	r0, r5
    597e:	f006 fdf5 	bl	c56c <get_sub_data>
    5982:	6880      	ldr	r0, [r0, #8]
}
    5984:	f000 0007 	and.w	r0, r0, #7
    5988:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    598a:	4e06      	ldr	r6, [pc, #24]	; (59a4 <get_status+0x34>)
    598c:	2379      	movs	r3, #121	; 0x79
    598e:	4632      	mov	r2, r6
    5990:	4905      	ldr	r1, [pc, #20]	; (59a8 <get_status+0x38>)
    5992:	4806      	ldr	r0, [pc, #24]	; (59ac <get_status+0x3c>)
    5994:	f006 fbb8 	bl	c108 <assert_print>
    5998:	2179      	movs	r1, #121	; 0x79
    599a:	4630      	mov	r0, r6
    599c:	f006 fbad 	bl	c0fa <assert_post_action>
    59a0:	e7eb      	b.n	597a <get_status+0xa>
    59a2:	bf00      	nop
    59a4:	0000ecfc 	.word	0x0000ecfc
    59a8:	0000ed3c 	.word	0x0000ed3c
    59ac:	0000d4bc 	.word	0x0000d4bc

000059b0 <stop>:
{
    59b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59b4:	4607      	mov	r7, r0
    59b6:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    59b8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    59ba:	4621      	mov	r1, r4
    59bc:	f006 fdd6 	bl	c56c <get_sub_data>
    59c0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    59c2:	2c01      	cmp	r4, #1
    59c4:	d80f      	bhi.n	59e6 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    59c6:	4631      	mov	r1, r6
    59c8:	f105 0008 	add.w	r0, r5, #8
    59cc:	f006 fddf 	bl	c58e <set_off_state>
	if (err < 0) {
    59d0:	2800      	cmp	r0, #0
    59d2:	db06      	blt.n	59e2 <stop+0x32>
	get_sub_config(dev, type)->stop();
    59d4:	4621      	mov	r1, r4
    59d6:	4638      	mov	r0, r7
    59d8:	f006 fdcf 	bl	c57a <get_sub_config>
    59dc:	6843      	ldr	r3, [r0, #4]
    59de:	4798      	blx	r3
	return 0;
    59e0:	2000      	movs	r0, #0
}
    59e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    59e6:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5a04 <stop+0x54>
    59ea:	f240 134d 	movw	r3, #333	; 0x14d
    59ee:	4642      	mov	r2, r8
    59f0:	4905      	ldr	r1, [pc, #20]	; (5a08 <stop+0x58>)
    59f2:	4806      	ldr	r0, [pc, #24]	; (5a0c <stop+0x5c>)
    59f4:	f006 fb88 	bl	c108 <assert_print>
    59f8:	f240 114d 	movw	r1, #333	; 0x14d
    59fc:	4640      	mov	r0, r8
    59fe:	f006 fb7c 	bl	c0fa <assert_post_action>
    5a02:	e7e0      	b.n	59c6 <stop+0x16>
    5a04:	0000ecfc 	.word	0x0000ecfc
    5a08:	0000ed3c 	.word	0x0000ed3c
    5a0c:	0000d4bc 	.word	0x0000d4bc

00005a10 <onoff_stop>:
{
    5a10:	b538      	push	{r3, r4, r5, lr}
    5a12:	4605      	mov	r5, r0
    5a14:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5a16:	f7ff ff73 	bl	5900 <get_subsys>
    5a1a:	4601      	mov	r1, r0
    5a1c:	2240      	movs	r2, #64	; 0x40
    5a1e:	4803      	ldr	r0, [pc, #12]	; (5a2c <onoff_stop+0x1c>)
    5a20:	f7ff ffc6 	bl	59b0 <stop>
    5a24:	4601      	mov	r1, r0
	notify(mgr, res);
    5a26:	4628      	mov	r0, r5
    5a28:	47a0      	blx	r4
}
    5a2a:	bd38      	pop	{r3, r4, r5, pc}
    5a2c:	0000d0e0 	.word	0x0000d0e0

00005a30 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    5a30:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    5a32:	2801      	cmp	r0, #1
    5a34:	d01d      	beq.n	5a72 <clock_event_handler+0x42>
    5a36:	2803      	cmp	r0, #3
    5a38:	d020      	beq.n	5a7c <clock_event_handler+0x4c>
    5a3a:	b168      	cbz	r0, 5a58 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    5a3c:	4c16      	ldr	r4, [pc, #88]	; (5a98 <clock_event_handler+0x68>)
    5a3e:	f240 2362 	movw	r3, #610	; 0x262
    5a42:	4622      	mov	r2, r4
    5a44:	4915      	ldr	r1, [pc, #84]	; (5a9c <clock_event_handler+0x6c>)
    5a46:	4816      	ldr	r0, [pc, #88]	; (5aa0 <clock_event_handler+0x70>)
    5a48:	f006 fb5e 	bl	c108 <assert_print>
    5a4c:	f240 2162 	movw	r1, #610	; 0x262
    5a50:	4620      	mov	r0, r4
    5a52:	f006 fb52 	bl	c0fa <assert_post_action>
		break;
	}
}
    5a56:	e010      	b.n	5a7a <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5a58:	2100      	movs	r1, #0
    5a5a:	4812      	ldr	r0, [pc, #72]	; (5aa4 <clock_event_handler+0x74>)
    5a5c:	f006 fd86 	bl	c56c <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5a60:	6883      	ldr	r3, [r0, #8]
    5a62:	f013 0f07 	tst.w	r3, #7
    5a66:	d108      	bne.n	5a7a <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5a68:	2100      	movs	r1, #0
    5a6a:	480e      	ldr	r0, [pc, #56]	; (5aa4 <clock_event_handler+0x74>)
    5a6c:	f006 fdd9 	bl	c622 <clkstarted_handle>
    5a70:	e003      	b.n	5a7a <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5a72:	2101      	movs	r1, #1
    5a74:	480b      	ldr	r0, [pc, #44]	; (5aa4 <clock_event_handler+0x74>)
    5a76:	f006 fdd4 	bl	c622 <clkstarted_handle>
}
    5a7a:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    5a7c:	4c06      	ldr	r4, [pc, #24]	; (5a98 <clock_event_handler+0x68>)
    5a7e:	f240 235e 	movw	r3, #606	; 0x25e
    5a82:	4622      	mov	r2, r4
    5a84:	4905      	ldr	r1, [pc, #20]	; (5a9c <clock_event_handler+0x6c>)
    5a86:	4806      	ldr	r0, [pc, #24]	; (5aa0 <clock_event_handler+0x70>)
    5a88:	f006 fb3e 	bl	c108 <assert_print>
    5a8c:	f240 215e 	movw	r1, #606	; 0x25e
    5a90:	4620      	mov	r0, r4
    5a92:	f006 fb32 	bl	c0fa <assert_post_action>
		break;
    5a96:	e7f0      	b.n	5a7a <clock_event_handler+0x4a>
    5a98:	0000ecfc 	.word	0x0000ecfc
    5a9c:	0000d680 	.word	0x0000d680
    5aa0:	0000d4bc 	.word	0x0000d4bc
    5aa4:	0000d0e0 	.word	0x0000d0e0

00005aa8 <api_blocking_start>:
{
    5aa8:	b500      	push	{lr}
    5aaa:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5aac:	f8cd d000 	str.w	sp, [sp]
    5ab0:	f8cd d004 	str.w	sp, [sp, #4]
    5ab4:	2300      	movs	r3, #0
    5ab6:	9302      	str	r3, [sp, #8]
    5ab8:	2301      	movs	r3, #1
    5aba:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5abc:	466b      	mov	r3, sp
    5abe:	4a07      	ldr	r2, [pc, #28]	; (5adc <api_blocking_start+0x34>)
    5ac0:	f006 fddd 	bl	c67e <api_start>
	if (err < 0) {
    5ac4:	2800      	cmp	r0, #0
    5ac6:	db05      	blt.n	5ad4 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    5ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5acc:	2300      	movs	r3, #0
    5ace:	4668      	mov	r0, sp
    5ad0:	f003 fede 	bl	9890 <z_impl_k_sem_take>
}
    5ad4:	b005      	add	sp, #20
    5ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    5ada:	bf00      	nop
    5adc:	0000c6d1 	.word	0x0000c6d1

00005ae0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ae4:	2200      	movs	r2, #0
    5ae6:	2101      	movs	r1, #1
    5ae8:	4610      	mov	r0, r2
    5aea:	f7fe fcd1 	bl	4490 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5aee:	4811      	ldr	r0, [pc, #68]	; (5b34 <clk_init+0x54>)
    5af0:	f001 fd8c 	bl	760c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5af4:	4b10      	ldr	r3, [pc, #64]	; (5b38 <clk_init+0x58>)
    5af6:	4298      	cmp	r0, r3
    5af8:	d119      	bne.n	5b2e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5afa:	f001 fdb1 	bl	7660 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    5afe:	2400      	movs	r4, #0
    5b00:	2c01      	cmp	r4, #1
    5b02:	d812      	bhi.n	5b2a <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5b04:	4621      	mov	r1, r4
    5b06:	4630      	mov	r0, r6
    5b08:	f006 fd30 	bl	c56c <get_sub_data>
    5b0c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5b0e:	4621      	mov	r1, r4
    5b10:	4630      	mov	r0, r6
    5b12:	f006 fd38 	bl	c586 <get_onoff_manager>
    5b16:	4909      	ldr	r1, [pc, #36]	; (5b3c <clk_init+0x5c>)
    5b18:	f006 f9ff 	bl	bf1a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5b1c:	2800      	cmp	r0, #0
    5b1e:	db05      	blt.n	5b2c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5b20:	2301      	movs	r3, #1
    5b22:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5b24:	441c      	add	r4, r3
    5b26:	b2e4      	uxtb	r4, r4
    5b28:	e7ea      	b.n	5b00 <clk_init+0x20>
	}

	return 0;
    5b2a:	2000      	movs	r0, #0
}
    5b2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5b2e:	f06f 0004 	mvn.w	r0, #4
    5b32:	e7fb      	b.n	5b2c <clk_init+0x4c>
    5b34:	00005a31 	.word	0x00005a31
    5b38:	0bad0000 	.word	0x0bad0000
    5b3c:	0000edb8 	.word	0x0000edb8

00005b40 <lfclk_spinwait>:
{
    5b40:	b570      	push	{r4, r5, r6, lr}
    5b42:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5b44:	2801      	cmp	r0, #1
    5b46:	d107      	bne.n	5b58 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b4c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5b50:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5b54:	2b01      	cmp	r3, #1
    5b56:	d05a      	beq.n	5c0e <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5b58:	f007 f9c2 	bl	cee0 <k_is_in_isr>
    5b5c:	b928      	cbnz	r0, 5b6a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    5b5e:	4b2f      	ldr	r3, [pc, #188]	; (5c1c <lfclk_spinwait+0xdc>)
    5b60:	781b      	ldrb	r3, [r3, #0]
    5b62:	2b00      	cmp	r3, #0
    5b64:	d043      	beq.n	5bee <lfclk_spinwait+0xae>
    5b66:	2300      	movs	r3, #0
    5b68:	e000      	b.n	5b6c <lfclk_spinwait+0x2c>
    5b6a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    5b6c:	461c      	mov	r4, r3
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d03f      	beq.n	5bf2 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    5b72:	f04f 0320 	mov.w	r3, #32
    5b76:	f3ef 8611 	mrs	r6, BASEPRI
    5b7a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b7e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    5b82:	b924      	cbnz	r4, 5b8e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    5b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b88:	2202      	movs	r2, #2
    5b8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b92:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5b96:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b9a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5b9e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5ba2:	d12d      	bne.n	5c00 <lfclk_spinwait+0xc0>
    return false;
    5ba4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5ba6:	b11a      	cbz	r2, 5bb0 <lfclk_spinwait+0x70>
    5ba8:	2b01      	cmp	r3, #1
    5baa:	d02b      	beq.n	5c04 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5bac:	2d01      	cmp	r5, #1
    5bae:	d029      	beq.n	5c04 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5bb0:	b30c      	cbz	r4, 5bf6 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5bb2:	4630      	mov	r0, r6
    5bb4:	f7fe fbfc 	bl	43b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bbc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d1e4      	bne.n	5b8e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d0de      	beq.n	5b8e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bd4:	2200      	movs	r2, #0
    5bd6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5bda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5bde:	2201      	movs	r2, #1
    5be0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5be4:	490e      	ldr	r1, [pc, #56]	; (5c20 <lfclk_spinwait+0xe0>)
    5be6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5bea:	609a      	str	r2, [r3, #8]
}
    5bec:	e7cf      	b.n	5b8e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5bee:	2301      	movs	r3, #1
    5bf0:	e7bc      	b.n	5b6c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    5bf2:	2600      	movs	r6, #0
    5bf4:	e7c5      	b.n	5b82 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    5bf6:	2021      	movs	r0, #33	; 0x21
    5bf8:	2100      	movs	r1, #0
    5bfa:	f005 f8e5 	bl	adc8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5bfe:	e7db      	b.n	5bb8 <lfclk_spinwait+0x78>
                return true;
    5c00:	2201      	movs	r2, #1
    5c02:	e7d0      	b.n	5ba6 <lfclk_spinwait+0x66>
	if (isr_mode) {
    5c04:	b124      	cbz	r4, 5c10 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    5c06:	f386 8811 	msr	BASEPRI, r6
    5c0a:	f3bf 8f6f 	isb	sy
}
    5c0e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    5c10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c14:	2202      	movs	r2, #2
    5c16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5c1a:	e7f8      	b.n	5c0e <lfclk_spinwait+0xce>
    5c1c:	20001392 	.word	0x20001392
    5c20:	e000e100 	.word	0xe000e100

00005c24 <generic_hfclk_start>:
{
    5c24:	b510      	push	{r4, lr}
	__asm__ volatile(
    5c26:	f04f 0320 	mov.w	r3, #32
    5c2a:	f3ef 8411 	mrs	r4, BASEPRI
    5c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5c36:	4a13      	ldr	r2, [pc, #76]	; (5c84 <generic_hfclk_start+0x60>)
    5c38:	6813      	ldr	r3, [r2, #0]
    5c3a:	f043 0302 	orr.w	r3, r3, #2
    5c3e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5c40:	f013 0f01 	tst.w	r3, #1
    5c44:	d108      	bne.n	5c58 <generic_hfclk_start+0x34>
	bool already_started = false;
    5c46:	2300      	movs	r3, #0
	__asm__ volatile(
    5c48:	f384 8811 	msr	BASEPRI, r4
    5c4c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5c50:	b99b      	cbnz	r3, 5c7a <generic_hfclk_start+0x56>
	hfclk_start();
    5c52:	f006 fd24 	bl	c69e <hfclk_start>
}
    5c56:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c5c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5c60:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5c64:	f012 0f01 	tst.w	r2, #1
    5c68:	d101      	bne.n	5c6e <generic_hfclk_start+0x4a>
	bool already_started = false;
    5c6a:	2300      	movs	r3, #0
    5c6c:	e7ec      	b.n	5c48 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    5c6e:	f7ff fe43 	bl	58f8 <get_hf_flags>
    5c72:	f006 fcc3 	bl	c5fc <set_on_state>
			already_started = true;
    5c76:	2301      	movs	r3, #1
    5c78:	e7e6      	b.n	5c48 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    5c7a:	2100      	movs	r1, #0
    5c7c:	4802      	ldr	r0, [pc, #8]	; (5c88 <generic_hfclk_start+0x64>)
    5c7e:	f006 fcd0 	bl	c622 <clkstarted_handle>
		return;
    5c82:	e7e8      	b.n	5c56 <generic_hfclk_start+0x32>
    5c84:	20000c70 	.word	0x20000c70
    5c88:	0000d0e0 	.word	0x0000d0e0

00005c8c <z_nrf_clock_control_lf_on>:
{
    5c8c:	b538      	push	{r3, r4, r5, lr}
    5c8e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c90:	4b1f      	ldr	r3, [pc, #124]	; (5d10 <z_nrf_clock_control_lf_on+0x84>)
    5c92:	2101      	movs	r1, #1
    5c94:	f3bf 8f5b 	dmb	ish
    5c98:	e853 2f00 	ldrex	r2, [r3]
    5c9c:	e843 1000 	strex	r0, r1, [r3]
    5ca0:	2800      	cmp	r0, #0
    5ca2:	d1f9      	bne.n	5c98 <z_nrf_clock_control_lf_on+0xc>
    5ca4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5ca8:	b142      	cbz	r2, 5cbc <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    5caa:	b134      	cbz	r4, 5cba <z_nrf_clock_control_lf_on+0x2e>
    5cac:	1e63      	subs	r3, r4, #1
    5cae:	b2db      	uxtb	r3, r3
    5cb0:	2b01      	cmp	r3, #1
    5cb2:	d81f      	bhi.n	5cf4 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    5cb4:	4620      	mov	r0, r4
    5cb6:	f7ff ff43 	bl	5b40 <lfclk_spinwait>
}
    5cba:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    5cbc:	4815      	ldr	r0, [pc, #84]	; (5d14 <z_nrf_clock_control_lf_on+0x88>)
    5cbe:	f006 fc62 	bl	c586 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5cc2:	4915      	ldr	r1, [pc, #84]	; (5d18 <z_nrf_clock_control_lf_on+0x8c>)
    5cc4:	2300      	movs	r3, #0
    5cc6:	604b      	str	r3, [r1, #4]
    5cc8:	608b      	str	r3, [r1, #8]
    5cca:	60cb      	str	r3, [r1, #12]
    5ccc:	2301      	movs	r3, #1
    5cce:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5cd0:	f7fc fdd4 	bl	287c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    5cd4:	2800      	cmp	r0, #0
    5cd6:	dae8      	bge.n	5caa <z_nrf_clock_control_lf_on+0x1e>
    5cd8:	4d10      	ldr	r5, [pc, #64]	; (5d1c <z_nrf_clock_control_lf_on+0x90>)
    5cda:	f44f 7308 	mov.w	r3, #544	; 0x220
    5cde:	462a      	mov	r2, r5
    5ce0:	490f      	ldr	r1, [pc, #60]	; (5d20 <z_nrf_clock_control_lf_on+0x94>)
    5ce2:	4810      	ldr	r0, [pc, #64]	; (5d24 <z_nrf_clock_control_lf_on+0x98>)
    5ce4:	f006 fa10 	bl	c108 <assert_print>
    5ce8:	f44f 7108 	mov.w	r1, #544	; 0x220
    5cec:	4628      	mov	r0, r5
    5cee:	f006 fa04 	bl	c0fa <assert_post_action>
    5cf2:	e7da      	b.n	5caa <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    5cf4:	4c09      	ldr	r4, [pc, #36]	; (5d1c <z_nrf_clock_control_lf_on+0x90>)
    5cf6:	f240 2332 	movw	r3, #562	; 0x232
    5cfa:	4622      	mov	r2, r4
    5cfc:	490a      	ldr	r1, [pc, #40]	; (5d28 <z_nrf_clock_control_lf_on+0x9c>)
    5cfe:	4809      	ldr	r0, [pc, #36]	; (5d24 <z_nrf_clock_control_lf_on+0x98>)
    5d00:	f006 fa02 	bl	c108 <assert_print>
    5d04:	f240 2132 	movw	r1, #562	; 0x232
    5d08:	4620      	mov	r0, r4
    5d0a:	f006 f9f6 	bl	c0fa <assert_post_action>
    5d0e:	e7d4      	b.n	5cba <z_nrf_clock_control_lf_on+0x2e>
    5d10:	20000c74 	.word	0x20000c74
    5d14:	0000d0e0 	.word	0x0000d0e0
    5d18:	20000c08 	.word	0x20000c08
    5d1c:	0000ecfc 	.word	0x0000ecfc
    5d20:	0000e1c4 	.word	0x0000e1c4
    5d24:	0000d4bc 	.word	0x0000d4bc
    5d28:	0000d680 	.word	0x0000d680

00005d2c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5d2c:	b510      	push	{r4, lr}
    5d2e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5d30:	280a      	cmp	r0, #10
    5d32:	d007      	beq.n	5d44 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5d34:	4b07      	ldr	r3, [pc, #28]	; (5d54 <console_out+0x28>)
    5d36:	6818      	ldr	r0, [r3, #0]
    5d38:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    5d3a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5d3c:	685b      	ldr	r3, [r3, #4]
    5d3e:	4798      	blx	r3

	return c;
}
    5d40:	4620      	mov	r0, r4
    5d42:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    5d44:	4b03      	ldr	r3, [pc, #12]	; (5d54 <console_out+0x28>)
    5d46:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    5d48:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5d4a:	685b      	ldr	r3, [r3, #4]
    5d4c:	210d      	movs	r1, #13
    5d4e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    5d50:	e7f0      	b.n	5d34 <console_out+0x8>
    5d52:	bf00      	nop
    5d54:	20000c78 	.word	0x20000c78

00005d58 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    5d58:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    5d5a:	4c04      	ldr	r4, [pc, #16]	; (5d6c <uart_console_hook_install+0x14>)
    5d5c:	4620      	mov	r0, r4
    5d5e:	f7ff fa4f 	bl	5200 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    5d62:	4620      	mov	r0, r4
    5d64:	f7fc faf0 	bl	2348 <__printk_hook_install>
#endif
}
    5d68:	bd10      	pop	{r4, pc}
    5d6a:	bf00      	nop
    5d6c:	00005d2d 	.word	0x00005d2d

00005d70 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5d70:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5d72:	4806      	ldr	r0, [pc, #24]	; (5d8c <uart_console_init+0x1c>)
    5d74:	4b06      	ldr	r3, [pc, #24]	; (5d90 <uart_console_init+0x20>)
    5d76:	6018      	str	r0, [r3, #0]
    5d78:	f007 f856 	bl	ce28 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5d7c:	b118      	cbz	r0, 5d86 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    5d7e:	f7ff ffeb 	bl	5d58 <uart_console_hook_install>

	return 0;
    5d82:	2000      	movs	r0, #0
}
    5d84:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5d86:	f06f 0012 	mvn.w	r0, #18
    5d8a:	e7fb      	b.n	5d84 <uart_console_init+0x14>
    5d8c:	0000d140 	.word	0x0000d140
    5d90:	20000c78 	.word	0x20000c78

00005d94 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5d94:	b128      	cbz	r0, 5da2 <get_dev+0xe>
    5d96:	2801      	cmp	r0, #1
    5d98:	d101      	bne.n	5d9e <get_dev+0xa>
    5d9a:	4803      	ldr	r0, [pc, #12]	; (5da8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5d9c:	4770      	bx	lr
	const struct device *dev = NULL;
    5d9e:	2000      	movs	r0, #0
    5da0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5da2:	4802      	ldr	r0, [pc, #8]	; (5dac <get_dev+0x18>)
    5da4:	4770      	bx	lr
    5da6:	bf00      	nop
    5da8:	0000d0f8 	.word	0x0000d0f8
    5dac:	0000d110 	.word	0x0000d110

00005db0 <gpio_nrfx_manage_callback>:
{
    5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5db4:	4616      	mov	r6, r2
	return port->data;
    5db6:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5db8:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    5dba:	460c      	mov	r4, r1
    5dbc:	b131      	cbz	r1, 5dcc <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    5dbe:	6863      	ldr	r3, [r4, #4]
    5dc0:	b1a3      	cbz	r3, 5dec <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    5dc2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d03b      	beq.n	5e40 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5dc8:	2100      	movs	r1, #0
    5dca:	e02a      	b.n	5e22 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    5dcc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5e64 <gpio_nrfx_manage_callback+0xb4>
    5dd0:	2324      	movs	r3, #36	; 0x24
    5dd2:	4642      	mov	r2, r8
    5dd4:	4924      	ldr	r1, [pc, #144]	; (5e68 <gpio_nrfx_manage_callback+0xb8>)
    5dd6:	4825      	ldr	r0, [pc, #148]	; (5e6c <gpio_nrfx_manage_callback+0xbc>)
    5dd8:	f006 f996 	bl	c108 <assert_print>
    5ddc:	4824      	ldr	r0, [pc, #144]	; (5e70 <gpio_nrfx_manage_callback+0xc0>)
    5dde:	f006 f993 	bl	c108 <assert_print>
    5de2:	2124      	movs	r1, #36	; 0x24
    5de4:	4640      	mov	r0, r8
    5de6:	f006 f988 	bl	c0fa <assert_post_action>
    5dea:	e7e8      	b.n	5dbe <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5dec:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5e64 <gpio_nrfx_manage_callback+0xb4>
    5df0:	2325      	movs	r3, #37	; 0x25
    5df2:	4642      	mov	r2, r8
    5df4:	491f      	ldr	r1, [pc, #124]	; (5e74 <gpio_nrfx_manage_callback+0xc4>)
    5df6:	481d      	ldr	r0, [pc, #116]	; (5e6c <gpio_nrfx_manage_callback+0xbc>)
    5df8:	f006 f986 	bl	c108 <assert_print>
    5dfc:	481e      	ldr	r0, [pc, #120]	; (5e78 <gpio_nrfx_manage_callback+0xc8>)
    5dfe:	f006 f983 	bl	c108 <assert_print>
    5e02:	2125      	movs	r1, #37	; 0x25
    5e04:	4640      	mov	r0, r8
    5e06:	f006 f978 	bl	c0fa <assert_post_action>
    5e0a:	e7da      	b.n	5dc2 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5e0c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5e0e:	606b      	str	r3, [r5, #4]
	return list->tail;
    5e10:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e12:	4294      	cmp	r4, r2
    5e14:	d10f      	bne.n	5e36 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5e16:	607b      	str	r3, [r7, #4]
}
    5e18:	e00d      	b.n	5e36 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5e1a:	6079      	str	r1, [r7, #4]
}
    5e1c:	e00b      	b.n	5e36 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e1e:	4619      	mov	r1, r3
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	b15b      	cbz	r3, 5e3c <gpio_nrfx_manage_callback+0x8c>
    5e24:	429c      	cmp	r4, r3
    5e26:	d1fa      	bne.n	5e1e <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    5e28:	2900      	cmp	r1, #0
    5e2a:	d0ef      	beq.n	5e0c <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5e2c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5e2e:	600b      	str	r3, [r1, #0]
	return list->tail;
    5e30:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e32:	429c      	cmp	r4, r3
    5e34:	d0f1      	beq.n	5e1a <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    5e36:	2300      	movs	r3, #0
    5e38:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e3a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5e3c:	b903      	cbnz	r3, 5e40 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    5e3e:	b156      	cbz	r6, 5e56 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5e40:	b166      	cbz	r6, 5e5c <gpio_nrfx_manage_callback+0xac>
	return list->head;
    5e42:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    5e44:	6023      	str	r3, [r4, #0]
	list->head = node;
    5e46:	606c      	str	r4, [r5, #4]
	return list->tail;
    5e48:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    5e4a:	b10b      	cbz	r3, 5e50 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5e4c:	2000      	movs	r0, #0
    5e4e:	e006      	b.n	5e5e <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    5e50:	607c      	str	r4, [r7, #4]
    5e52:	2000      	movs	r0, #0
}
    5e54:	e003      	b.n	5e5e <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    5e56:	f06f 0015 	mvn.w	r0, #21
    5e5a:	e000      	b.n	5e5e <gpio_nrfx_manage_callback+0xae>
	return 0;
    5e5c:	2000      	movs	r0, #0
}
    5e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e62:	bf00      	nop
    5e64:	0000edc4 	.word	0x0000edc4
    5e68:	0000edf4 	.word	0x0000edf4
    5e6c:	0000d4bc 	.word	0x0000d4bc
    5e70:	0000ee00 	.word	0x0000ee00
    5e74:	0000ee10 	.word	0x0000ee10
    5e78:	0000ee24 	.word	0x0000ee24

00005e7c <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5e80:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    5e84:	0940      	lsrs	r0, r0, #5
    5e86:	f7ff ff85 	bl	5d94 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    5e8a:	b380      	cbz	r0, 5eee <nrfx_gpio_handler+0x72>
    5e8c:	4607      	mov	r7, r0
	return port->data;
    5e8e:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    5e90:	2601      	movs	r6, #1
    5e92:	40a6      	lsls	r6, r4
	return list->head;
    5e94:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e96:	b11c      	cbz	r4, 5ea0 <nrfx_gpio_handler+0x24>
    5e98:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5e9a:	b17c      	cbz	r4, 5ebc <nrfx_gpio_handler+0x40>
	return node->next;
    5e9c:	6825      	ldr	r5, [r4, #0]
    5e9e:	e00d      	b.n	5ebc <nrfx_gpio_handler+0x40>
    5ea0:	4625      	mov	r5, r4
    5ea2:	e00b      	b.n	5ebc <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5ea4:	6863      	ldr	r3, [r4, #4]
    5ea6:	68a2      	ldr	r2, [r4, #8]
    5ea8:	4032      	ands	r2, r6
    5eaa:	4621      	mov	r1, r4
    5eac:	4638      	mov	r0, r7
    5eae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5eb0:	b1dd      	cbz	r5, 5eea <nrfx_gpio_handler+0x6e>
    5eb2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5eb4:	b105      	cbz	r5, 5eb8 <nrfx_gpio_handler+0x3c>
	return node->next;
    5eb6:	682b      	ldr	r3, [r5, #0]
    5eb8:	462c      	mov	r4, r5
    5eba:	461d      	mov	r5, r3
    5ebc:	b1bc      	cbz	r4, 5eee <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    5ebe:	68a3      	ldr	r3, [r4, #8]
    5ec0:	421e      	tst	r6, r3
    5ec2:	d0f5      	beq.n	5eb0 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    5ec4:	6863      	ldr	r3, [r4, #4]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d1ec      	bne.n	5ea4 <nrfx_gpio_handler+0x28>
    5eca:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5ef4 <nrfx_gpio_handler+0x78>
    5ece:	2345      	movs	r3, #69	; 0x45
    5ed0:	4642      	mov	r2, r8
    5ed2:	4909      	ldr	r1, [pc, #36]	; (5ef8 <nrfx_gpio_handler+0x7c>)
    5ed4:	4809      	ldr	r0, [pc, #36]	; (5efc <nrfx_gpio_handler+0x80>)
    5ed6:	f006 f917 	bl	c108 <assert_print>
    5eda:	4809      	ldr	r0, [pc, #36]	; (5f00 <nrfx_gpio_handler+0x84>)
    5edc:	f006 f914 	bl	c108 <assert_print>
    5ee0:	2145      	movs	r1, #69	; 0x45
    5ee2:	4640      	mov	r0, r8
    5ee4:	f006 f909 	bl	c0fa <assert_post_action>
    5ee8:	e7dc      	b.n	5ea4 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5eea:	462b      	mov	r3, r5
    5eec:	e7e4      	b.n	5eb8 <nrfx_gpio_handler+0x3c>
}
    5eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ef2:	bf00      	nop
    5ef4:	0000edc4 	.word	0x0000edc4
    5ef8:	0000ee3c 	.word	0x0000ee3c
    5efc:	0000d4bc 	.word	0x0000d4bc
    5f00:	0000ee24 	.word	0x0000ee24

00005f04 <gpio_nrfx_pin_interrupt_configure>:
{
    5f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f06:	b085      	sub	sp, #20
    5f08:	460e      	mov	r6, r1
    5f0a:	4619      	mov	r1, r3
	return port->config;
    5f0c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5f0e:	7b1b      	ldrb	r3, [r3, #12]
    5f10:	f006 041f 	and.w	r4, r6, #31
    5f14:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5f18:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5f1c:	d022      	beq.n	5f64 <gpio_nrfx_pin_interrupt_configure+0x60>
    5f1e:	4607      	mov	r7, r0
    5f20:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f22:	2300      	movs	r3, #0
    5f24:	9302      	str	r3, [sp, #8]
    5f26:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    5f28:	4610      	mov	r0, r2
    5f2a:	f006 fc4f 	bl	c7cc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f2e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    5f32:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5f34:	6899      	ldr	r1, [r3, #8]
    5f36:	40f1      	lsrs	r1, r6
    5f38:	f011 0101 	ands.w	r1, r1, #1
    5f3c:	d102      	bne.n	5f44 <gpio_nrfx_pin_interrupt_configure+0x40>
    5f3e:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    5f42:	d014      	beq.n	5f6e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5f44:	2300      	movs	r3, #0
    5f46:	aa02      	add	r2, sp, #8
    5f48:	4619      	mov	r1, r3
    5f4a:	4620      	mov	r0, r4
    5f4c:	f002 f802 	bl	7f54 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5f50:	4b32      	ldr	r3, [pc, #200]	; (601c <gpio_nrfx_pin_interrupt_configure+0x118>)
    5f52:	4298      	cmp	r0, r3
    5f54:	d15f      	bne.n	6016 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5f56:	2101      	movs	r1, #1
    5f58:	4620      	mov	r0, r4
    5f5a:	f002 fa5f 	bl	841c <nrfx_gpiote_trigger_enable>
	return 0;
    5f5e:	2000      	movs	r0, #0
}
    5f60:	b005      	add	sp, #20
    5f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    5f64:	4620      	mov	r0, r4
    5f66:	f002 fb65 	bl	8634 <nrfx_gpiote_trigger_disable>
		return 0;
    5f6a:	2000      	movs	r0, #0
    5f6c:	e7f8      	b.n	5f60 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    5f6e:	0963      	lsrs	r3, r4, #5
    5f70:	d01f      	beq.n	5fb2 <gpio_nrfx_pin_interrupt_configure+0xae>
    5f72:	2b01      	cmp	r3, #1
    5f74:	d101      	bne.n	5f7a <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    5f76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    5f7a:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5f7e:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f80:	f011 0f01 	tst.w	r1, #1
    5f84:	d018      	beq.n	5fb8 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    5f86:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f8a:	0963      	lsrs	r3, r4, #5
    5f8c:	d022      	beq.n	5fd4 <gpio_nrfx_pin_interrupt_configure+0xd0>
    5f8e:	2b01      	cmp	r3, #1
    5f90:	d023      	beq.n	5fda <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    5f92:	4e23      	ldr	r6, [pc, #140]	; (6020 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5f94:	f240 232e 	movw	r3, #558	; 0x22e
    5f98:	4632      	mov	r2, r6
    5f9a:	4922      	ldr	r1, [pc, #136]	; (6024 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5f9c:	4822      	ldr	r0, [pc, #136]	; (6028 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5f9e:	f006 f8b3 	bl	c108 <assert_print>
    5fa2:	f240 212e 	movw	r1, #558	; 0x22e
    5fa6:	4630      	mov	r0, r6
    5fa8:	f006 f8a7 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    5fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5fb0:	e014      	b.n	5fdc <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    5fb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5fb6:	e7e0      	b.n	5f7a <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fb8:	4d19      	ldr	r5, [pc, #100]	; (6020 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5fba:	f240 2329 	movw	r3, #553	; 0x229
    5fbe:	462a      	mov	r2, r5
    5fc0:	491a      	ldr	r1, [pc, #104]	; (602c <gpio_nrfx_pin_interrupt_configure+0x128>)
    5fc2:	4819      	ldr	r0, [pc, #100]	; (6028 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5fc4:	f006 f8a0 	bl	c108 <assert_print>
    5fc8:	f240 2129 	movw	r1, #553	; 0x229
    5fcc:	4628      	mov	r0, r5
    5fce:	f006 f894 	bl	c0fa <assert_post_action>
    5fd2:	e7d8      	b.n	5f86 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5fd8:	e000      	b.n	5fdc <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fda:	4b15      	ldr	r3, [pc, #84]	; (6030 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5fdc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5fe0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5fe4:	f013 0f01 	tst.w	r3, #1
    5fe8:	d1ac      	bne.n	5f44 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5fea:	f10d 0107 	add.w	r1, sp, #7
    5fee:	4620      	mov	r0, r4
    5ff0:	f002 f9a4 	bl	833c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5ff4:	4b0f      	ldr	r3, [pc, #60]	; (6034 <gpio_nrfx_pin_interrupt_configure+0x130>)
    5ff6:	4298      	cmp	r0, r3
    5ff8:	d003      	beq.n	6002 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    5ffa:	f10d 0307 	add.w	r3, sp, #7
    5ffe:	9303      	str	r3, [sp, #12]
    6000:	e7a0      	b.n	5f44 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    6002:	f10d 0007 	add.w	r0, sp, #7
    6006:	f002 fa01 	bl	840c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    600a:	4b04      	ldr	r3, [pc, #16]	; (601c <gpio_nrfx_pin_interrupt_configure+0x118>)
    600c:	4298      	cmp	r0, r3
    600e:	d0f4      	beq.n	5ffa <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    6010:	f06f 000b 	mvn.w	r0, #11
    6014:	e7a4      	b.n	5f60 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    6016:	f06f 0004 	mvn.w	r0, #4
    601a:	e7a1      	b.n	5f60 <gpio_nrfx_pin_interrupt_configure+0x5c>
    601c:	0bad0000 	.word	0x0bad0000
    6020:	0000ee48 	.word	0x0000ee48
    6024:	0000d680 	.word	0x0000d680
    6028:	0000d4bc 	.word	0x0000d4bc
    602c:	0000ee7c 	.word	0x0000ee7c
    6030:	50000300 	.word	0x50000300
    6034:	0bad0004 	.word	0x0bad0004

00006038 <pin_uninit>:
{
    6038:	b530      	push	{r4, r5, lr}
    603a:	b083      	sub	sp, #12
    603c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    603e:	f10d 0107 	add.w	r1, sp, #7
    6042:	f002 f97b 	bl	833c <nrfx_gpiote_channel_get>
    6046:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    6048:	4620      	mov	r0, r4
    604a:	f002 fb5b 	bl	8704 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    604e:	4b0b      	ldr	r3, [pc, #44]	; (607c <pin_uninit+0x44>)
    6050:	4298      	cmp	r0, r3
    6052:	d10f      	bne.n	6074 <pin_uninit+0x3c>
	if (free_ch) {
    6054:	429d      	cmp	r5, r3
    6056:	d005      	beq.n	6064 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    6058:	4b08      	ldr	r3, [pc, #32]	; (607c <pin_uninit+0x44>)
    605a:	4298      	cmp	r0, r3
    605c:	d107      	bne.n	606e <pin_uninit+0x36>
    605e:	2000      	movs	r0, #0
}
    6060:	b003      	add	sp, #12
    6062:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    6064:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6068:	f002 f9c8 	bl	83fc <nrfx_gpiote_channel_free>
    606c:	e7f4      	b.n	6058 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    606e:	f06f 0004 	mvn.w	r0, #4
    6072:	e7f5      	b.n	6060 <pin_uninit+0x28>
		return -EIO;
    6074:	f06f 0004 	mvn.w	r0, #4
    6078:	e7f2      	b.n	6060 <pin_uninit+0x28>
    607a:	bf00      	nop
    607c:	0bad0000 	.word	0x0bad0000

00006080 <gpio_nrfx_pin_configure>:
{
    6080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6084:	b087      	sub	sp, #28
	return port->config;
    6086:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    608a:	f898 300c 	ldrb.w	r3, [r8, #12]
    608e:	f001 051f 	and.w	r5, r1, #31
    6092:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    6096:	2a00      	cmp	r2, #0
    6098:	d044      	beq.n	6124 <gpio_nrfx_pin_configure+0xa4>
    609a:	460c      	mov	r4, r1
    609c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    609e:	2600      	movs	r6, #0
    60a0:	9603      	str	r6, [sp, #12]
    60a2:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    60a4:	f10d 0117 	add.w	r1, sp, #23
    60a8:	4620      	mov	r0, r4
    60aa:	f002 f947 	bl	833c <nrfx_gpiote_channel_get>
    60ae:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    60b0:	4633      	mov	r3, r6
    60b2:	aa03      	add	r2, sp, #12
    60b4:	4631      	mov	r1, r6
    60b6:	4628      	mov	r0, r5
    60b8:	f001 ff4c 	bl	7f54 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    60bc:	4b30      	ldr	r3, [pc, #192]	; (6180 <gpio_nrfx_pin_configure+0x100>)
    60be:	4298      	cmp	r0, r3
    60c0:	d15b      	bne.n	617a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    60c2:	4599      	cmp	r9, r3
    60c4:	d036      	beq.n	6134 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    60c6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    60ca:	d043      	beq.n	6154 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    60cc:	f10d 0103 	add.w	r1, sp, #3
    60d0:	4638      	mov	r0, r7
    60d2:	f006 fb02 	bl	c6da <get_drive>
		if (rv != 0) {
    60d6:	4606      	mov	r6, r0
    60d8:	bb40      	cbnz	r0, 612c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    60da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    60de:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    60e2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    60e6:	bf0c      	ite	eq
    60e8:	2301      	moveq	r3, #1
    60ea:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    60ec:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    60f0:	4638      	mov	r0, r7
    60f2:	f006 fb38 	bl	c766 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    60f6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    60fa:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    60fe:	d01e      	beq.n	613e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6100:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6104:	2101      	movs	r1, #1
    6106:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    610a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    610e:	2200      	movs	r2, #0
    6110:	a901      	add	r1, sp, #4
    6112:	4628      	mov	r0, r5
    6114:	f002 f812 	bl	813c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6118:	4b19      	ldr	r3, [pc, #100]	; (6180 <gpio_nrfx_pin_configure+0x100>)
    611a:	4298      	cmp	r0, r3
    611c:	d006      	beq.n	612c <gpio_nrfx_pin_configure+0xac>
    611e:	f06f 0615 	mvn.w	r6, #21
    6122:	e003      	b.n	612c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    6124:	4628      	mov	r0, r5
    6126:	f7ff ff87 	bl	6038 <pin_uninit>
    612a:	4606      	mov	r6, r0
}
    612c:	4630      	mov	r0, r6
    612e:	b007      	add	sp, #28
    6130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    6134:	f89d 0017 	ldrb.w	r0, [sp, #23]
    6138:	f002 f960 	bl	83fc <nrfx_gpiote_channel_free>
    613c:	e7c3      	b.n	60c6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    613e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    6142:	d0e4      	beq.n	610e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6144:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6148:	2301      	movs	r3, #1
    614a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    614e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    6152:	e7dc      	b.n	610e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    6154:	4638      	mov	r0, r7
    6156:	f006 fb06 	bl	c766 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    615a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    615e:	2300      	movs	r3, #0
    6160:	461a      	mov	r2, r3
    6162:	a902      	add	r1, sp, #8
    6164:	4628      	mov	r0, r5
    6166:	f001 fef5 	bl	7f54 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    616a:	4b05      	ldr	r3, [pc, #20]	; (6180 <gpio_nrfx_pin_configure+0x100>)
    616c:	4298      	cmp	r0, r3
    616e:	d101      	bne.n	6174 <gpio_nrfx_pin_configure+0xf4>
    6170:	2600      	movs	r6, #0
    6172:	e7db      	b.n	612c <gpio_nrfx_pin_configure+0xac>
    6174:	f06f 0615 	mvn.w	r6, #21
    6178:	e7d8      	b.n	612c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    617a:	f06f 0615 	mvn.w	r6, #21
    617e:	e7d5      	b.n	612c <gpio_nrfx_pin_configure+0xac>
    6180:	0bad0000 	.word	0x0bad0000

00006184 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6184:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6186:	f002 f92f 	bl	83e8 <nrfx_gpiote_is_init>
    618a:	b108      	cbz	r0, 6190 <gpio_nrfx_init+0xc>
		return 0;
    618c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    618e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    6190:	f002 f900 	bl	8394 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6194:	4b08      	ldr	r3, [pc, #32]	; (61b8 <gpio_nrfx_init+0x34>)
    6196:	4298      	cmp	r0, r3
    6198:	d10a      	bne.n	61b0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    619a:	2100      	movs	r1, #0
    619c:	4807      	ldr	r0, [pc, #28]	; (61bc <gpio_nrfx_init+0x38>)
    619e:	f002 f8c7 	bl	8330 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    61a2:	2200      	movs	r2, #0
    61a4:	2105      	movs	r1, #5
    61a6:	2006      	movs	r0, #6
    61a8:	f7fe f972 	bl	4490 <z_arm_irq_priority_set>
	return 0;
    61ac:	2000      	movs	r0, #0
    61ae:	e7ee      	b.n	618e <gpio_nrfx_init+0xa>
		return -EIO;
    61b0:	f06f 0004 	mvn.w	r0, #4
    61b4:	e7eb      	b.n	618e <gpio_nrfx_init+0xa>
    61b6:	bf00      	nop
    61b8:	0bad0000 	.word	0x0bad0000
    61bc:	00005e7d 	.word	0x00005e7d

000061c0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    61c0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    61c2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    61c4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    61c8:	d06f      	beq.n	62aa <baudrate_set+0xea>
    61ca:	d83a      	bhi.n	6242 <baudrate_set+0x82>
    61cc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    61d0:	d06e      	beq.n	62b0 <baudrate_set+0xf0>
    61d2:	d90a      	bls.n	61ea <baudrate_set+0x2a>
    61d4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    61d8:	d075      	beq.n	62c6 <baudrate_set+0x106>
    61da:	d924      	bls.n	6226 <baudrate_set+0x66>
    61dc:	f647 2312 	movw	r3, #31250	; 0x7a12
    61e0:	4299      	cmp	r1, r3
    61e2:	d12b      	bne.n	623c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    61e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    61e8:	e013      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    61ea:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    61ee:	d061      	beq.n	62b4 <baudrate_set+0xf4>
    61f0:	d907      	bls.n	6202 <baudrate_set+0x42>
    61f2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    61f6:	d063      	beq.n	62c0 <baudrate_set+0x100>
    61f8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    61fc:	d110      	bne.n	6220 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    61fe:	4b3c      	ldr	r3, [pc, #240]	; (62f0 <baudrate_set+0x130>)
    6200:	e007      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    6202:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    6206:	d058      	beq.n	62ba <baudrate_set+0xfa>
    6208:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    620c:	d105      	bne.n	621a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    620e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6212:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    6216:	2000      	movs	r0, #0
    6218:	4770      	bx	lr
	switch (baudrate) {
    621a:	f06f 0015 	mvn.w	r0, #21
    621e:	4770      	bx	lr
    6220:	f06f 0015 	mvn.w	r0, #21
    6224:	4770      	bx	lr
    6226:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    622a:	d04e      	beq.n	62ca <baudrate_set+0x10a>
    622c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    6230:	d101      	bne.n	6236 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    6232:	4b30      	ldr	r3, [pc, #192]	; (62f4 <baudrate_set+0x134>)
    6234:	e7ed      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    6236:	f06f 0015 	mvn.w	r0, #21
    623a:	4770      	bx	lr
    623c:	f06f 0015 	mvn.w	r0, #21
    6240:	4770      	bx	lr
    6242:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    6246:	d042      	beq.n	62ce <baudrate_set+0x10e>
    6248:	d909      	bls.n	625e <baudrate_set+0x9e>
    624a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    624e:	d046      	beq.n	62de <baudrate_set+0x11e>
    6250:	d91f      	bls.n	6292 <baudrate_set+0xd2>
    6252:	4b29      	ldr	r3, [pc, #164]	; (62f8 <baudrate_set+0x138>)
    6254:	4299      	cmp	r1, r3
    6256:	d148      	bne.n	62ea <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    625c:	e7d9      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    625e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    6262:	d037      	beq.n	62d4 <baudrate_set+0x114>
    6264:	d905      	bls.n	6272 <baudrate_set+0xb2>
    6266:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    626a:	d10f      	bne.n	628c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    626c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6270:	e7cf      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    6272:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    6276:	4299      	cmp	r1, r3
    6278:	d02e      	beq.n	62d8 <baudrate_set+0x118>
    627a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    627e:	d102      	bne.n	6286 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6280:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6284:	e7c5      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    6286:	f06f 0015 	mvn.w	r0, #21
    628a:	4770      	bx	lr
    628c:	f06f 0015 	mvn.w	r0, #21
    6290:	4770      	bx	lr
    6292:	4b1a      	ldr	r3, [pc, #104]	; (62fc <baudrate_set+0x13c>)
    6294:	4299      	cmp	r1, r3
    6296:	d025      	beq.n	62e4 <baudrate_set+0x124>
    6298:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    629c:	d102      	bne.n	62a4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    629e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    62a2:	e7b6      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    62a4:	f06f 0015 	mvn.w	r0, #21
    62a8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    62aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    62ae:	e7b0      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    62b0:	4b13      	ldr	r3, [pc, #76]	; (6300 <baudrate_set+0x140>)
    62b2:	e7ae      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    62b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    62b8:	e7ab      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    62ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    62be:	e7a8      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    62c0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    62c4:	e7a5      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    62c6:	4b0f      	ldr	r3, [pc, #60]	; (6304 <baudrate_set+0x144>)
    62c8:	e7a3      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    62ca:	4b0f      	ldr	r3, [pc, #60]	; (6308 <baudrate_set+0x148>)
    62cc:	e7a1      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    62ce:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    62d2:	e79e      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    62d4:	4b0d      	ldr	r3, [pc, #52]	; (630c <baudrate_set+0x14c>)
    62d6:	e79c      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    62d8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    62dc:	e799      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    62de:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    62e2:	e796      	b.n	6212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    62e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    62e8:	e793      	b.n	6212 <baudrate_set+0x52>
	switch (baudrate) {
    62ea:	f06f 0015 	mvn.w	r0, #21
}
    62ee:	4770      	bx	lr
    62f0:	0013b000 	.word	0x0013b000
    62f4:	004ea000 	.word	0x004ea000
    62f8:	000f4240 	.word	0x000f4240
    62fc:	0003d090 	.word	0x0003d090
    6300:	00275000 	.word	0x00275000
    6304:	0075c000 	.word	0x0075c000
    6308:	003af000 	.word	0x003af000
    630c:	013a9000 	.word	0x013a9000

00006310 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6314:	4605      	mov	r5, r0
    6316:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    6318:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    631c:	f006 fde0 	bl	cee0 <k_is_in_isr>
    6320:	b920      	cbnz	r0, 632c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    6322:	4b16      	ldr	r3, [pc, #88]	; (637c <uarte_nrfx_poll_out+0x6c>)
    6324:	781b      	ldrb	r3, [r3, #0]
    6326:	b143      	cbz	r3, 633a <uarte_nrfx_poll_out+0x2a>
    6328:	2300      	movs	r3, #0
    632a:	e000      	b.n	632e <uarte_nrfx_poll_out+0x1e>
    632c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    632e:	b953      	cbnz	r3, 6346 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6330:	4628      	mov	r0, r5
    6332:	f006 fb54 	bl	c9de <wait_tx_ready>
    6336:	4606      	mov	r6, r0
    6338:	e013      	b.n	6362 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    633a:	2301      	movs	r3, #1
    633c:	e7f7      	b.n	632e <uarte_nrfx_poll_out+0x1e>
    633e:	f384 8811 	msr	BASEPRI, r4
    6342:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    6346:	f04f 0320 	mov.w	r3, #32
    634a:	f3ef 8411 	mrs	r4, BASEPRI
    634e:	f383 8812 	msr	BASEPRI_MAX, r3
    6352:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    6356:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    6358:	4628      	mov	r0, r5
    635a:	f006 faf2 	bl	c942 <is_tx_ready>
    635e:	2800      	cmp	r0, #0
    6360:	d0ed      	beq.n	633e <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    6362:	4641      	mov	r1, r8
    6364:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    6368:	2201      	movs	r2, #1
    636a:	4628      	mov	r0, r5
    636c:	f006 fb03 	bl	c976 <tx_start>
	__asm__ volatile(
    6370:	f386 8811 	msr	BASEPRI, r6
    6374:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    637c:	20001392 	.word	0x20001392

00006380 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6380:	b530      	push	{r4, r5, lr}
    6382:	b085      	sub	sp, #20
    6384:	4604      	mov	r4, r0
    6386:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6388:	f101 0012 	add.w	r0, r1, #18
    638c:	f002 fa46 	bl	881c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6390:	4b11      	ldr	r3, [pc, #68]	; (63d8 <endtx_stoptx_ppi_init+0x58>)
    6392:	4298      	cmp	r0, r3
    6394:	d112      	bne.n	63bc <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6396:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6398:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    639c:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    639e:	4a0f      	ldr	r2, [pc, #60]	; (63dc <endtx_stoptx_ppi_init+0x5c>)
    63a0:	33a2      	adds	r3, #162	; 0xa2
    63a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    63a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    63aa:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    63ac:	7ca9      	ldrb	r1, [r5, #18]
    63ae:	2301      	movs	r3, #1
    63b0:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    63b2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    63b6:	2000      	movs	r0, #0
}
    63b8:	b005      	add	sp, #20
    63ba:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    63bc:	4b08      	ldr	r3, [pc, #32]	; (63e0 <endtx_stoptx_ppi_init+0x60>)
    63be:	9302      	str	r3, [sp, #8]
    63c0:	2000      	movs	r0, #0
    63c2:	9001      	str	r0, [sp, #4]
    63c4:	9000      	str	r0, [sp, #0]
    63c6:	4603      	mov	r3, r0
    63c8:	2201      	movs	r2, #1
    63ca:	4906      	ldr	r1, [pc, #24]	; (63e4 <endtx_stoptx_ppi_init+0x64>)
    63cc:	f006 fb2e 	bl	ca2c <z_log_msg2_runtime_create>
		return -EIO;
    63d0:	f06f 0004 	mvn.w	r0, #4
    63d4:	e7f0      	b.n	63b8 <endtx_stoptx_ppi_init+0x38>
    63d6:	bf00      	nop
    63d8:	0bad0000 	.word	0x0bad0000
    63dc:	4001f000 	.word	0x4001f000
    63e0:	0000eef4 	.word	0x0000eef4
    63e4:	0000d338 	.word	0x0000d338

000063e8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    63e8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    63ec:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    63f0:	4b01      	ldr	r3, [pc, #4]	; (63f8 <set_comparator+0x10>)
    63f2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    63f6:	4770      	bx	lr
    63f8:	40011000 	.word	0x40011000

000063fc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    63fc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6400:	4b01      	ldr	r3, [pc, #4]	; (6408 <get_comparator+0xc>)
    6402:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6406:	4770      	bx	lr
    6408:	40011000 	.word	0x40011000

0000640c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    640c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6410:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6412:	4a02      	ldr	r2, [pc, #8]	; (641c <event_enable+0x10>)
    6414:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6418:	4770      	bx	lr
    641a:	bf00      	nop
    641c:	40011000 	.word	0x40011000

00006420 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6424:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6426:	4a02      	ldr	r2, [pc, #8]	; (6430 <event_disable+0x10>)
    6428:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    642c:	4770      	bx	lr
    642e:	bf00      	nop
    6430:	40011000 	.word	0x40011000

00006434 <counter>:
     return p_reg->COUNTER;
    6434:	4b01      	ldr	r3, [pc, #4]	; (643c <counter+0x8>)
    6436:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    643a:	4770      	bx	lr
    643c:	40011000 	.word	0x40011000

00006440 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6440:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6442:	2301      	movs	r3, #1
    6444:	4083      	lsls	r3, r0
    6446:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    644a:	4a10      	ldr	r2, [pc, #64]	; (648c <compare_int_lock+0x4c>)
    644c:	f3bf 8f5b 	dmb	ish
    6450:	e852 1f00 	ldrex	r1, [r2]
    6454:	ea01 0e0c 	and.w	lr, r1, ip
    6458:	e842 e400 	strex	r4, lr, [r2]
    645c:	2c00      	cmp	r4, #0
    645e:	d1f7      	bne.n	6450 <compare_int_lock+0x10>
    6460:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6468:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    646c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6474:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6478:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    647c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6480:	420b      	tst	r3, r1
}
    6482:	bf14      	ite	ne
    6484:	2001      	movne	r0, #1
    6486:	2000      	moveq	r0, #0
    6488:	bd10      	pop	{r4, pc}
    648a:	bf00      	nop
    648c:	20000c98 	.word	0x20000c98

00006490 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6490:	b570      	push	{r4, r5, r6, lr}
    6492:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6494:	f006 fb6c 	bl	cb70 <full_int_lock>
    6498:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    649a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    649e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    64a0:	4a17      	ldr	r2, [pc, #92]	; (6500 <channel_processing_check_and_clear+0x70>)
    64a2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    64a6:	4213      	tst	r3, r2
    64a8:	d105      	bne.n	64b6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    64aa:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    64ac:	4628      	mov	r0, r5
    64ae:	f006 fb68 	bl	cb82 <full_int_unlock>

	return result;
}
    64b2:	4630      	mov	r0, r6
    64b4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    64b6:	2301      	movs	r3, #1
    64b8:	40a3      	lsls	r3, r4
    64ba:	43db      	mvns	r3, r3
    64bc:	4a11      	ldr	r2, [pc, #68]	; (6504 <channel_processing_check_and_clear+0x74>)
    64be:	f3bf 8f5b 	dmb	ish
    64c2:	e852 1f00 	ldrex	r1, [r2]
    64c6:	ea01 0003 	and.w	r0, r1, r3
    64ca:	e842 0600 	strex	r6, r0, [r2]
    64ce:	2e00      	cmp	r6, #0
    64d0:	d1f7      	bne.n	64c2 <channel_processing_check_and_clear+0x32>
    64d2:	f3bf 8f5b 	dmb	ish
    64d6:	b959      	cbnz	r1, 64f0 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    64d8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    64dc:	009b      	lsls	r3, r3, #2
    64de:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    64e4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    64e8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    64ea:	b113      	cbz	r3, 64f2 <channel_processing_check_and_clear+0x62>
    64ec:	2301      	movs	r3, #1
    64ee:	e000      	b.n	64f2 <channel_processing_check_and_clear+0x62>
    64f0:	2301      	movs	r3, #1
		if (result) {
    64f2:	461e      	mov	r6, r3
    64f4:	2b00      	cmp	r3, #0
    64f6:	d0d9      	beq.n	64ac <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    64f8:	4620      	mov	r0, r4
    64fa:	f006 fb2a 	bl	cb52 <event_clear>
    64fe:	e7d5      	b.n	64ac <channel_processing_check_and_clear+0x1c>
    6500:	40011000 	.word	0x40011000
    6504:	20000c94 	.word	0x20000c94

00006508 <compare_int_unlock>:
	if (key) {
    6508:	b901      	cbnz	r1, 650c <compare_int_unlock+0x4>
}
    650a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    650c:	2301      	movs	r3, #1
    650e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6510:	4a11      	ldr	r2, [pc, #68]	; (6558 <compare_int_unlock+0x50>)
    6512:	f3bf 8f5b 	dmb	ish
    6516:	e852 1f00 	ldrex	r1, [r2]
    651a:	4319      	orrs	r1, r3
    651c:	e842 1c00 	strex	ip, r1, [r2]
    6520:	f1bc 0f00 	cmp.w	ip, #0
    6524:	d1f7      	bne.n	6516 <compare_int_unlock+0xe>
    6526:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    652a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    652e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6530:	4a0a      	ldr	r2, [pc, #40]	; (655c <compare_int_unlock+0x54>)
    6532:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6536:	f3bf 8f5b 	dmb	ish
    653a:	4b09      	ldr	r3, [pc, #36]	; (6560 <compare_int_unlock+0x58>)
    653c:	681b      	ldr	r3, [r3, #0]
    653e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6542:	fa23 f000 	lsr.w	r0, r3, r0
    6546:	f010 0f01 	tst.w	r0, #1
    654a:	d0de      	beq.n	650a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    654c:	4b05      	ldr	r3, [pc, #20]	; (6564 <compare_int_unlock+0x5c>)
    654e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6552:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6556:	e7d8      	b.n	650a <compare_int_unlock+0x2>
    6558:	20000c98 	.word	0x20000c98
    655c:	40011000 	.word	0x40011000
    6560:	20000c94 	.word	0x20000c94
    6564:	e000e100 	.word	0xe000e100

00006568 <sys_clock_timeout_handler>:
{
    6568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    656c:	4607      	mov	r7, r0
    656e:	4614      	mov	r4, r2
    6570:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6572:	4610      	mov	r0, r2
    6574:	4619      	mov	r1, r3
    6576:	f006 faf8 	bl	cb6a <absolute_time_to_cc>
    657a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    657c:	4b15      	ldr	r3, [pc, #84]	; (65d4 <sys_clock_timeout_handler+0x6c>)
    657e:	681a      	ldr	r2, [r3, #0]
    6580:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6582:	601c      	str	r4, [r3, #0]
    6584:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6586:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    658a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    658e:	d309      	bcc.n	65a4 <sys_clock_timeout_handler+0x3c>
	return false;
    6590:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6592:	f004 ff65 	bl	b460 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6596:	4638      	mov	r0, r7
    6598:	f7ff ff30 	bl	63fc <get_comparator>
    659c:	42a8      	cmp	r0, r5
    659e:	d00e      	beq.n	65be <sys_clock_timeout_handler+0x56>
}
    65a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    65a4:	4b0c      	ldr	r3, [pc, #48]	; (65d8 <sys_clock_timeout_handler+0x70>)
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	0a1a      	lsrs	r2, r3, #8
    65aa:	061b      	lsls	r3, r3, #24
    65ac:	eb15 0803 	adds.w	r8, r5, r3
    65b0:	f142 0900 	adc.w	r9, r2, #0
    65b4:	4b09      	ldr	r3, [pc, #36]	; (65dc <sys_clock_timeout_handler+0x74>)
    65b6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    65ba:	2401      	movs	r4, #1
    65bc:	e7e9      	b.n	6592 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    65be:	b11c      	cbz	r4, 65c8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    65c0:	4638      	mov	r0, r7
    65c2:	f7ff ff23 	bl	640c <event_enable>
}
    65c6:	e7eb      	b.n	65a0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    65c8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    65cc:	4638      	mov	r0, r7
    65ce:	f7ff ff0b 	bl	63e8 <set_comparator>
    65d2:	e7f5      	b.n	65c0 <sys_clock_timeout_handler+0x58>
    65d4:	20000488 	.word	0x20000488
    65d8:	20000c9c 	.word	0x20000c9c
    65dc:	20000470 	.word	0x20000470

000065e0 <z_nrf_rtc_timer_read>:
{
    65e0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    65e2:	4b0d      	ldr	r3, [pc, #52]	; (6618 <z_nrf_rtc_timer_read+0x38>)
    65e4:	681c      	ldr	r4, [r3, #0]
    65e6:	0a25      	lsrs	r5, r4, #8
    65e8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    65ea:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    65ee:	f7ff ff21 	bl	6434 <counter>
    65f2:	4603      	mov	r3, r0
	val += cntr;
    65f4:	1900      	adds	r0, r0, r4
    65f6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    65fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    65fe:	d20a      	bcs.n	6616 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6600:	4b06      	ldr	r3, [pc, #24]	; (661c <z_nrf_rtc_timer_read+0x3c>)
    6602:	e9d3 2300 	ldrd	r2, r3, [r3]
    6606:	4290      	cmp	r0, r2
    6608:	eb71 0303 	sbcs.w	r3, r1, r3
    660c:	d203      	bcs.n	6616 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    660e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6612:	f141 0100 	adc.w	r1, r1, #0
}
    6616:	bd38      	pop	{r3, r4, r5, pc}
    6618:	20000c9c 	.word	0x20000c9c
    661c:	20000470 	.word	0x20000470

00006620 <compare_set_nolocks>:
{
    6620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6622:	4606      	mov	r6, r0
    6624:	4614      	mov	r4, r2
    6626:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6628:	4610      	mov	r0, r2
    662a:	4619      	mov	r1, r3
    662c:	f006 fa9d 	bl	cb6a <absolute_time_to_cc>
    6630:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6632:	f7ff ffd5 	bl	65e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6636:	42a0      	cmp	r0, r4
    6638:	eb71 0305 	sbcs.w	r3, r1, r5
    663c:	d21d      	bcs.n	667a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    663e:	1a23      	subs	r3, r4, r0
    6640:	eb65 0101 	sbc.w	r1, r5, r1
    6644:	4a1b      	ldr	r2, [pc, #108]	; (66b4 <compare_set_nolocks+0x94>)
    6646:	4293      	cmp	r3, r2
    6648:	f171 0300 	sbcs.w	r3, r1, #0
    664c:	d22f      	bcs.n	66ae <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    664e:	4b1a      	ldr	r3, [pc, #104]	; (66b8 <compare_set_nolocks+0x98>)
    6650:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6654:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6658:	42ab      	cmp	r3, r5
    665a:	bf08      	it	eq
    665c:	42a2      	cmpeq	r2, r4
    665e:	d01a      	beq.n	6696 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6660:	4639      	mov	r1, r7
    6662:	4630      	mov	r0, r6
    6664:	f006 fa92 	bl	cb8c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6668:	4639      	mov	r1, r7
    666a:	f006 fa6e 	bl	cb4a <counter_sub>
    666e:	1900      	adds	r0, r0, r4
    6670:	f145 0300 	adc.w	r3, r5, #0
    6674:	4604      	mov	r4, r0
    6676:	461d      	mov	r5, r3
    6678:	e00d      	b.n	6696 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    667a:	2301      	movs	r3, #1
    667c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    667e:	4a0f      	ldr	r2, [pc, #60]	; (66bc <compare_set_nolocks+0x9c>)
    6680:	f3bf 8f5b 	dmb	ish
    6684:	e852 1f00 	ldrex	r1, [r2]
    6688:	4319      	orrs	r1, r3
    668a:	e842 1000 	strex	r0, r1, [r2]
    668e:	2800      	cmp	r0, #0
    6690:	d1f8      	bne.n	6684 <compare_set_nolocks+0x64>
    6692:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6696:	4b08      	ldr	r3, [pc, #32]	; (66b8 <compare_set_nolocks+0x98>)
    6698:	0132      	lsls	r2, r6, #4
    669a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    669e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    66a2:	9906      	ldr	r1, [sp, #24]
    66a4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    66a6:	9b07      	ldr	r3, [sp, #28]
    66a8:	6073      	str	r3, [r6, #4]
	return ret;
    66aa:	2000      	movs	r0, #0
}
    66ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    66ae:	f06f 0015 	mvn.w	r0, #21
    66b2:	e7fb      	b.n	66ac <compare_set_nolocks+0x8c>
    66b4:	01000001 	.word	0x01000001
    66b8:	20000478 	.word	0x20000478
    66bc:	20000c94 	.word	0x20000c94

000066c0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    66c0:	b530      	push	{r4, r5, lr}
    66c2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    66c4:	2300      	movs	r3, #0
    66c6:	4a1d      	ldr	r2, [pc, #116]	; (673c <sys_clock_driver_init+0x7c>)
    66c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    66cc:	2b00      	cmp	r3, #0
    66ce:	dd24      	ble.n	671a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    66d0:	4c1a      	ldr	r4, [pc, #104]	; (673c <sys_clock_driver_init+0x7c>)
    66d2:	2502      	movs	r5, #2
    66d4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66d8:	4b19      	ldr	r3, [pc, #100]	; (6740 <sys_clock_driver_init+0x80>)
    66da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    66de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    66e2:	2200      	movs	r2, #0
    66e4:	2101      	movs	r1, #1
    66e6:	2011      	movs	r0, #17
    66e8:	f7fd fed2 	bl	4490 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    66ec:	2011      	movs	r0, #17
    66ee:	f7fd feb3 	bl	4458 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    66f2:	2301      	movs	r3, #1
    66f4:	60a3      	str	r3, [r4, #8]
    66f6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    66f8:	4a12      	ldr	r2, [pc, #72]	; (6744 <sys_clock_driver_init+0x84>)
    66fa:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    66fc:	2400      	movs	r4, #0
    66fe:	9401      	str	r4, [sp, #4]
    6700:	4b11      	ldr	r3, [pc, #68]	; (6748 <sys_clock_driver_init+0x88>)
    6702:	9300      	str	r3, [sp, #0]
    6704:	4a11      	ldr	r2, [pc, #68]	; (674c <sys_clock_driver_init+0x8c>)
    6706:	2300      	movs	r3, #0
    6708:	4620      	mov	r0, r4
    670a:	f006 fa7a 	bl	cc02 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    670e:	4628      	mov	r0, r5
    6710:	f7ff fabc 	bl	5c8c <z_nrf_clock_control_lf_on>

	return 0;
}
    6714:	4620      	mov	r0, r4
    6716:	b003      	add	sp, #12
    6718:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    671a:	4a0d      	ldr	r2, [pc, #52]	; (6750 <sys_clock_driver_init+0x90>)
    671c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6728:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    672c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6730:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6732:	4902      	ldr	r1, [pc, #8]	; (673c <sys_clock_driver_init+0x7c>)
    6734:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6738:	3301      	adds	r3, #1
    673a:	e7c7      	b.n	66cc <sys_clock_driver_init+0xc>
    673c:	40011000 	.word	0x40011000
    6740:	e000e100 	.word	0xe000e100
    6744:	20000c98 	.word	0x20000c98
    6748:	00006569 	.word	0x00006569
    674c:	007fffff 	.word	0x007fffff
    6750:	20000478 	.word	0x20000478

00006754 <process_channel>:
{
    6754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6758:	b082      	sub	sp, #8
    675a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    675c:	f7ff fe98 	bl	6490 <channel_processing_check_and_clear>
    6760:	b910      	cbnz	r0, 6768 <process_channel+0x14>
}
    6762:	b002      	add	sp, #8
    6764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    6768:	f7ff ff3a 	bl	65e0 <z_nrf_rtc_timer_read>
    676c:	4682      	mov	sl, r0
    676e:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    6770:	f006 f9fe 	bl	cb70 <full_int_lock>
    6774:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    6776:	4b13      	ldr	r3, [pc, #76]	; (67c4 <process_channel+0x70>)
    6778:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    677c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    6780:	45c2      	cmp	sl, r8
    6782:	eb76 0309 	sbcs.w	r3, r6, r9
    6786:	d20b      	bcs.n	67a0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6788:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    678a:	4628      	mov	r0, r5
    678c:	f006 f9f9 	bl	cb82 <full_int_unlock>
		if (handler) {
    6790:	2e00      	cmp	r6, #0
    6792:	d0e6      	beq.n	6762 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6794:	9700      	str	r7, [sp, #0]
    6796:	4642      	mov	r2, r8
    6798:	464b      	mov	r3, r9
    679a:	4620      	mov	r0, r4
    679c:	47b0      	blx	r6
}
    679e:	e7e0      	b.n	6762 <process_channel+0xe>
			handler = cc_data[chan].callback;
    67a0:	4a08      	ldr	r2, [pc, #32]	; (67c4 <process_channel+0x70>)
    67a2:	0123      	lsls	r3, r4, #4
    67a4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    67a8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    67aa:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    67ac:	2000      	movs	r0, #0
    67ae:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    67b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    67b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    67b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    67bc:	4620      	mov	r0, r4
    67be:	f7ff fe2f 	bl	6420 <event_disable>
    67c2:	e7e2      	b.n	678a <process_channel+0x36>
    67c4:	20000478 	.word	0x20000478

000067c8 <rtc_nrf_isr>:
{
    67c8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    67ca:	4b0e      	ldr	r3, [pc, #56]	; (6804 <rtc_nrf_isr+0x3c>)
    67cc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    67d0:	f013 0f02 	tst.w	r3, #2
    67d4:	d00d      	beq.n	67f2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67d6:	4b0b      	ldr	r3, [pc, #44]	; (6804 <rtc_nrf_isr+0x3c>)
    67d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    67dc:	b14b      	cbz	r3, 67f2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    67de:	4b09      	ldr	r3, [pc, #36]	; (6804 <rtc_nrf_isr+0x3c>)
    67e0:	2200      	movs	r2, #0
    67e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    67e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    67ea:	4a07      	ldr	r2, [pc, #28]	; (6808 <rtc_nrf_isr+0x40>)
    67ec:	6813      	ldr	r3, [r2, #0]
    67ee:	3301      	adds	r3, #1
    67f0:	6013      	str	r3, [r2, #0]
{
    67f2:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    67f4:	2c00      	cmp	r4, #0
    67f6:	dd00      	ble.n	67fa <rtc_nrf_isr+0x32>
}
    67f8:	bd10      	pop	{r4, pc}
		process_channel(chan);
    67fa:	4620      	mov	r0, r4
    67fc:	f7ff ffaa 	bl	6754 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6800:	3401      	adds	r4, #1
    6802:	e7f7      	b.n	67f4 <rtc_nrf_isr+0x2c>
    6804:	40011000 	.word	0x40011000
    6808:	20000c9c 	.word	0x20000c9c

0000680c <sys_clock_set_timeout>:
{
    680c:	b510      	push	{r4, lr}
    680e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6810:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6814:	d006      	beq.n	6824 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6816:	2801      	cmp	r0, #1
    6818:	dd06      	ble.n	6828 <sys_clock_set_timeout+0x1c>
    681a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    681e:	da05      	bge.n	682c <sys_clock_set_timeout+0x20>
    6820:	1e44      	subs	r4, r0, #1
    6822:	e004      	b.n	682e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6824:	480f      	ldr	r0, [pc, #60]	; (6864 <sys_clock_set_timeout+0x58>)
    6826:	e7f8      	b.n	681a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6828:	2400      	movs	r4, #0
    682a:	e000      	b.n	682e <sys_clock_set_timeout+0x22>
    682c:	4c0d      	ldr	r4, [pc, #52]	; (6864 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    682e:	f7ff fed7 	bl	65e0 <z_nrf_rtc_timer_read>
    6832:	4b0d      	ldr	r3, [pc, #52]	; (6868 <sys_clock_set_timeout+0x5c>)
    6834:	6819      	ldr	r1, [r3, #0]
    6836:	685b      	ldr	r3, [r3, #4]
    6838:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    683a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    683e:	d300      	bcc.n	6842 <sys_clock_set_timeout+0x36>
		ticks = 0;
    6840:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6842:	4420      	add	r0, r4
    6844:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    6846:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    684a:	d300      	bcc.n	684e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    684c:	4a05      	ldr	r2, [pc, #20]	; (6864 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    684e:	2000      	movs	r0, #0
    6850:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6852:	9001      	str	r0, [sp, #4]
    6854:	4905      	ldr	r1, [pc, #20]	; (686c <sys_clock_set_timeout+0x60>)
    6856:	9100      	str	r1, [sp, #0]
    6858:	f143 0300 	adc.w	r3, r3, #0
    685c:	f006 f9d1 	bl	cc02 <compare_set>
}
    6860:	b002      	add	sp, #8
    6862:	bd10      	pop	{r4, pc}
    6864:	007fffff 	.word	0x007fffff
    6868:	20000488 	.word	0x20000488
    686c:	00006569 	.word	0x00006569

00006870 <sys_clock_elapsed>:
{
    6870:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6872:	f7ff feb5 	bl	65e0 <z_nrf_rtc_timer_read>
    6876:	4b02      	ldr	r3, [pc, #8]	; (6880 <sys_clock_elapsed+0x10>)
    6878:	681b      	ldr	r3, [r3, #0]
}
    687a:	1ac0      	subs	r0, r0, r3
    687c:	bd08      	pop	{r3, pc}
    687e:	bf00      	nop
    6880:	20000488 	.word	0x20000488

00006884 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    6884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6888:	460c      	mov	r4, r1
    688a:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    688c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    6890:	d002      	beq.n	6898 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6892:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    6896:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6898:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    689c:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    68a0:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    68a4:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    68a8:	f010 0f20 	tst.w	r0, #32
    68ac:	d01d      	beq.n	68ea <nrf_pin_configure+0x66>
    68ae:	b1fb      	cbz	r3, 68f0 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    68b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    68b4:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    68b8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68ba:	f013 0f01 	tst.w	r3, #1
    68be:	d019      	beq.n	68f4 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    68c0:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68c4:	096d      	lsrs	r5, r5, #5
    68c6:	d023      	beq.n	6910 <nrf_pin_configure+0x8c>
    68c8:	bb2d      	cbnz	r5, 6916 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    68ca:	4d19      	ldr	r5, [pc, #100]	; (6930 <nrf_pin_configure+0xac>)
    68cc:	f240 232e 	movw	r3, #558	; 0x22e
    68d0:	462a      	mov	r2, r5
    68d2:	4918      	ldr	r1, [pc, #96]	; (6934 <nrf_pin_configure+0xb0>)
    68d4:	4818      	ldr	r0, [pc, #96]	; (6938 <nrf_pin_configure+0xb4>)
    68d6:	f005 fc17 	bl	c108 <assert_print>
    68da:	f240 212e 	movw	r1, #558	; 0x22e
    68de:	4628      	mov	r0, r5
    68e0:	f005 fc0b 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    68e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    68e8:	e016      	b.n	6918 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    68ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68ee:	e7e1      	b.n	68b4 <nrf_pin_configure+0x30>
    switch (port)
    68f0:	2300      	movs	r3, #0
    68f2:	e7df      	b.n	68b4 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68f4:	4e0e      	ldr	r6, [pc, #56]	; (6930 <nrf_pin_configure+0xac>)
    68f6:	f240 2329 	movw	r3, #553	; 0x229
    68fa:	4632      	mov	r2, r6
    68fc:	490f      	ldr	r1, [pc, #60]	; (693c <nrf_pin_configure+0xb8>)
    68fe:	480e      	ldr	r0, [pc, #56]	; (6938 <nrf_pin_configure+0xb4>)
    6900:	f005 fc02 	bl	c108 <assert_print>
    6904:	f240 2129 	movw	r1, #553	; 0x229
    6908:	4630      	mov	r0, r6
    690a:	f005 fbf6 	bl	c0fa <assert_post_action>
    690e:	e7d7      	b.n	68c0 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    6910:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6914:	e000      	b.n	6918 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6916:	4b0a      	ldr	r3, [pc, #40]	; (6940 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6918:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    691c:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6920:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    6924:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6928:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    692c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6930:	0000ee48 	.word	0x0000ee48
    6934:	0000d680 	.word	0x0000d680
    6938:	0000d4bc 	.word	0x0000d4bc
    693c:	0000ee7c 	.word	0x0000ee7c
    6940:	50000300 	.word	0x50000300

00006944 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6948:	4605      	mov	r5, r0
    694a:	460e      	mov	r6, r1
    694c:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    694e:	2400      	movs	r4, #0
    6950:	e04e      	b.n	69f0 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6956:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    695a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    695e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6962:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    6966:	f013 0f20 	tst.w	r3, #32
    696a:	d01f      	beq.n	69ac <pinctrl_configure_pins+0x68>
    696c:	b109      	cbz	r1, 6972 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    696e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6972:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6976:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6978:	f012 0f01 	tst.w	r2, #1
    697c:	d019      	beq.n	69b2 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    697e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6982:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6986:	d023      	beq.n	69d0 <pinctrl_configure_pins+0x8c>
    6988:	bb2b      	cbnz	r3, 69d6 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    698a:	f8df 9344 	ldr.w	r9, [pc, #836]	; 6cd0 <pinctrl_configure_pins+0x38c>
    698e:	f240 232e 	movw	r3, #558	; 0x22e
    6992:	464a      	mov	r2, r9
    6994:	49cf      	ldr	r1, [pc, #828]	; (6cd4 <pinctrl_configure_pins+0x390>)
    6996:	48d0      	ldr	r0, [pc, #832]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6998:	f005 fbb6 	bl	c108 <assert_print>
    699c:	f240 212e 	movw	r1, #558	; 0x22e
    69a0:	4648      	mov	r0, r9
    69a2:	f005 fbaa 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    69a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    69aa:	e015      	b.n	69d8 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    69ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    69b0:	e7df      	b.n	6972 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69b2:	f8df a31c 	ldr.w	sl, [pc, #796]	; 6cd0 <pinctrl_configure_pins+0x38c>
    69b6:	f240 2329 	movw	r3, #553	; 0x229
    69ba:	4652      	mov	r2, sl
    69bc:	49c7      	ldr	r1, [pc, #796]	; (6cdc <pinctrl_configure_pins+0x398>)
    69be:	48c6      	ldr	r0, [pc, #792]	; (6cd8 <pinctrl_configure_pins+0x394>)
    69c0:	f005 fba2 	bl	c108 <assert_print>
    69c4:	f240 2129 	movw	r1, #553	; 0x229
    69c8:	4650      	mov	r0, sl
    69ca:	f005 fb96 	bl	c0fa <assert_post_action>
    69ce:	e7d6      	b.n	697e <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    69d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    69d4:	e000      	b.n	69d8 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69d6:	4ac2      	ldr	r2, [pc, #776]	; (6ce0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    69d8:	2101      	movs	r1, #1
    69da:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    69de:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    69e2:	460a      	mov	r2, r1
    69e4:	f855 0008 	ldr.w	r0, [r5, r8]
    69e8:	f7ff ff4c 	bl	6884 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    69ec:	3401      	adds	r4, #1
    69ee:	b2e4      	uxtb	r4, r4
    69f0:	42b4      	cmp	r4, r6
    69f2:	f080 841e 	bcs.w	7232 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    69f6:	ea4f 0884 	mov.w	r8, r4, lsl #2
    69fa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    69fe:	0c1a      	lsrs	r2, r3, #16
    6a00:	2a22      	cmp	r2, #34	; 0x22
    6a02:	f200 8418 	bhi.w	7236 <pinctrl_configure_pins+0x8f2>
    6a06:	a101      	add	r1, pc, #4	; (adr r1, 6a0c <pinctrl_configure_pins+0xc8>)
    6a08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6a0c:	00006953 	.word	0x00006953
    6a10:	00006a99 	.word	0x00006a99
    6a14:	00006aaf 	.word	0x00006aaf
    6a18:	00006b4f 	.word	0x00006b4f
    6a1c:	00006b65 	.word	0x00006b65
    6a20:	00006c05 	.word	0x00006c05
    6a24:	00006ca5 	.word	0x00006ca5
    6a28:	00007237 	.word	0x00007237
    6a2c:	00007237 	.word	0x00007237
    6a30:	00007237 	.word	0x00007237
    6a34:	00007237 	.word	0x00007237
    6a38:	00006cbb 	.word	0x00006cbb
    6a3c:	00006ce5 	.word	0x00006ce5
    6a40:	00007237 	.word	0x00007237
    6a44:	00007237 	.word	0x00007237
    6a48:	00007237 	.word	0x00007237
    6a4c:	00007237 	.word	0x00007237
    6a50:	00007237 	.word	0x00007237
    6a54:	00007237 	.word	0x00007237
    6a58:	00007237 	.word	0x00007237
    6a5c:	00007237 	.word	0x00007237
    6a60:	00007237 	.word	0x00007237
    6a64:	00006cfb 	.word	0x00006cfb
    6a68:	00006e21 	.word	0x00006e21
    6a6c:	00006f47 	.word	0x00006f47
    6a70:	00007083 	.word	0x00007083
    6a74:	00007237 	.word	0x00007237
    6a78:	00007237 	.word	0x00007237
    6a7c:	00007237 	.word	0x00007237
    6a80:	000071a9 	.word	0x000071a9
    6a84:	000071bf 	.word	0x000071bf
    6a88:	000071d5 	.word	0x000071d5
    6a8c:	000071eb 	.word	0x000071eb
    6a90:	00007203 	.word	0x00007203
    6a94:	0000721b 	.word	0x0000721b
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a9c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6aa0:	2200      	movs	r2, #0
    6aa2:	4611      	mov	r1, r2
    6aa4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6aa8:	f7ff feec 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6aac:	e79e      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ab2:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6ab6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6aba:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6abe:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6ac2:	f013 0f20 	tst.w	r3, #32
    6ac6:	d01f      	beq.n	6b08 <pinctrl_configure_pins+0x1c4>
    6ac8:	b30a      	cbz	r2, 6b0e <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    6aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ace:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ad2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ad4:	f013 0f01 	tst.w	r3, #1
    6ad8:	d01b      	beq.n	6b12 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    6ada:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ade:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ae2:	d025      	beq.n	6b30 <pinctrl_configure_pins+0x1ec>
    6ae4:	bb3b      	cbnz	r3, 6b36 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    6ae6:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6aea:	f240 232e 	movw	r3, #558	; 0x22e
    6aee:	464a      	mov	r2, r9
    6af0:	4978      	ldr	r1, [pc, #480]	; (6cd4 <pinctrl_configure_pins+0x390>)
    6af2:	4879      	ldr	r0, [pc, #484]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6af4:	f005 fb08 	bl	c108 <assert_print>
    6af8:	f240 212e 	movw	r1, #558	; 0x22e
    6afc:	4648      	mov	r0, r9
    6afe:	f005 fafc 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6b02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b06:	e017      	b.n	6b38 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    6b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b0c:	e7df      	b.n	6ace <pinctrl_configure_pins+0x18a>
    switch (port)
    6b0e:	2300      	movs	r3, #0
    6b10:	e7dd      	b.n	6ace <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b12:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6b16:	f240 2329 	movw	r3, #553	; 0x229
    6b1a:	4652      	mov	r2, sl
    6b1c:	496f      	ldr	r1, [pc, #444]	; (6cdc <pinctrl_configure_pins+0x398>)
    6b1e:	486e      	ldr	r0, [pc, #440]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6b20:	f005 faf2 	bl	c108 <assert_print>
    6b24:	f240 2129 	movw	r1, #553	; 0x229
    6b28:	4650      	mov	r0, sl
    6b2a:	f005 fae6 	bl	c0fa <assert_post_action>
    6b2e:	e7d4      	b.n	6ada <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    6b30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b34:	e000      	b.n	6b38 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b36:	4a6a      	ldr	r2, [pc, #424]	; (6ce0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6b38:	2101      	movs	r1, #1
    6b3a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6b3e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6b42:	460a      	mov	r2, r1
    6b44:	f855 0008 	ldr.w	r0, [r5, r8]
    6b48:	f7ff fe9c 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6b4c:	e74e      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    6b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b52:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6b56:	2200      	movs	r2, #0
    6b58:	4611      	mov	r1, r2
    6b5a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6b5e:	f7ff fe91 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6b62:	e743      	b.n	69ec <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b68:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6b6c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6b70:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6b74:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6b78:	f013 0f20 	tst.w	r3, #32
    6b7c:	d01f      	beq.n	6bbe <pinctrl_configure_pins+0x27a>
    6b7e:	b30a      	cbz	r2, 6bc4 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    6b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b84:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b88:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b8a:	f013 0f01 	tst.w	r3, #1
    6b8e:	d01b      	beq.n	6bc8 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    6b90:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b94:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6b98:	d025      	beq.n	6be6 <pinctrl_configure_pins+0x2a2>
    6b9a:	bb3b      	cbnz	r3, 6bec <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    6b9c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6ba0:	f240 232e 	movw	r3, #558	; 0x22e
    6ba4:	464a      	mov	r2, r9
    6ba6:	494b      	ldr	r1, [pc, #300]	; (6cd4 <pinctrl_configure_pins+0x390>)
    6ba8:	484b      	ldr	r0, [pc, #300]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6baa:	f005 faad 	bl	c108 <assert_print>
    6bae:	f240 212e 	movw	r1, #558	; 0x22e
    6bb2:	4648      	mov	r0, r9
    6bb4:	f005 faa1 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bbc:	e017      	b.n	6bee <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    6bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bc2:	e7df      	b.n	6b84 <pinctrl_configure_pins+0x240>
    switch (port)
    6bc4:	2300      	movs	r3, #0
    6bc6:	e7dd      	b.n	6b84 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bc8:	f8df a104 	ldr.w	sl, [pc, #260]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6bcc:	f240 2329 	movw	r3, #553	; 0x229
    6bd0:	4652      	mov	r2, sl
    6bd2:	4942      	ldr	r1, [pc, #264]	; (6cdc <pinctrl_configure_pins+0x398>)
    6bd4:	4840      	ldr	r0, [pc, #256]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6bd6:	f005 fa97 	bl	c108 <assert_print>
    6bda:	f240 2129 	movw	r1, #553	; 0x229
    6bde:	4650      	mov	r0, sl
    6be0:	f005 fa8b 	bl	c0fa <assert_post_action>
    6be4:	e7d4      	b.n	6b90 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    6be6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bea:	e000      	b.n	6bee <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bec:	4a3c      	ldr	r2, [pc, #240]	; (6ce0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6bee:	2101      	movs	r1, #1
    6bf0:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6bf4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6bf8:	2200      	movs	r2, #0
    6bfa:	f855 0008 	ldr.w	r0, [r5, r8]
    6bfe:	f7ff fe41 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6c02:	e6f3      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c08:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6c0c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6c10:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6c14:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6c18:	f013 0f20 	tst.w	r3, #32
    6c1c:	d01f      	beq.n	6c5e <pinctrl_configure_pins+0x31a>
    6c1e:	b30a      	cbz	r2, 6c64 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    6c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c24:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c28:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c2a:	f013 0f01 	tst.w	r3, #1
    6c2e:	d01b      	beq.n	6c68 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    6c30:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c34:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c38:	d025      	beq.n	6c86 <pinctrl_configure_pins+0x342>
    6c3a:	bb3b      	cbnz	r3, 6c8c <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    6c3c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6c40:	f240 232e 	movw	r3, #558	; 0x22e
    6c44:	464a      	mov	r2, r9
    6c46:	4923      	ldr	r1, [pc, #140]	; (6cd4 <pinctrl_configure_pins+0x390>)
    6c48:	4823      	ldr	r0, [pc, #140]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6c4a:	f005 fa5d 	bl	c108 <assert_print>
    6c4e:	f240 212e 	movw	r1, #558	; 0x22e
    6c52:	4648      	mov	r0, r9
    6c54:	f005 fa51 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6c58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c5c:	e017      	b.n	6c8e <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    6c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c62:	e7df      	b.n	6c24 <pinctrl_configure_pins+0x2e0>
    switch (port)
    6c64:	2300      	movs	r3, #0
    6c66:	e7dd      	b.n	6c24 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c68:	f8df a064 	ldr.w	sl, [pc, #100]	; 6cd0 <pinctrl_configure_pins+0x38c>
    6c6c:	f240 2329 	movw	r3, #553	; 0x229
    6c70:	4652      	mov	r2, sl
    6c72:	491a      	ldr	r1, [pc, #104]	; (6cdc <pinctrl_configure_pins+0x398>)
    6c74:	4818      	ldr	r0, [pc, #96]	; (6cd8 <pinctrl_configure_pins+0x394>)
    6c76:	f005 fa47 	bl	c108 <assert_print>
    6c7a:	f240 2129 	movw	r1, #553	; 0x229
    6c7e:	4650      	mov	r0, sl
    6c80:	f005 fa3b 	bl	c0fa <assert_post_action>
    6c84:	e7d4      	b.n	6c30 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    6c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c8a:	e000      	b.n	6c8e <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c8c:	4a14      	ldr	r2, [pc, #80]	; (6ce0 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c8e:	2101      	movs	r1, #1
    6c90:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6c94:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c98:	460a      	mov	r2, r1
    6c9a:	f855 0008 	ldr.w	r0, [r5, r8]
    6c9e:	f7ff fdf1 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6ca2:	e6a3      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ca8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6cac:	2200      	movs	r2, #0
    6cae:	4611      	mov	r1, r2
    6cb0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6cb4:	f7ff fde6 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6cb8:	e698      	b.n	69ec <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cbe:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6cc2:	2200      	movs	r2, #0
    6cc4:	4611      	mov	r1, r2
    6cc6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6cca:	f7ff fddb 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6cce:	e68d      	b.n	69ec <pinctrl_configure_pins+0xa8>
    6cd0:	0000ee48 	.word	0x0000ee48
    6cd4:	0000d680 	.word	0x0000d680
    6cd8:	0000d4bc 	.word	0x0000d4bc
    6cdc:	0000ee7c 	.word	0x0000ee7c
    6ce0:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ce8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6cec:	2200      	movs	r2, #0
    6cee:	4611      	mov	r1, r2
    6cf0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6cf4:	f7ff fdc6 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6cf8:	e678      	b.n	69ec <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cfe:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6d02:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6d06:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6d0a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6d0e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6d12:	d144      	bne.n	6d9e <pinctrl_configure_pins+0x45a>
    switch (port)
    6d14:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6d18:	d01f      	beq.n	6d5a <pinctrl_configure_pins+0x416>
    6d1a:	b10b      	cbz	r3, 6d20 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    6d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6d20:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d24:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d26:	f012 0f01 	tst.w	r2, #1
    6d2a:	d019      	beq.n	6d60 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    6d2c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d30:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6d34:	d023      	beq.n	6d7e <pinctrl_configure_pins+0x43a>
    6d36:	bb2b      	cbnz	r3, 6d84 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    6d38:	f8df 9300 	ldr.w	r9, [pc, #768]	; 703c <pinctrl_configure_pins+0x6f8>
    6d3c:	f240 232e 	movw	r3, #558	; 0x22e
    6d40:	464a      	mov	r2, r9
    6d42:	49bf      	ldr	r1, [pc, #764]	; (7040 <pinctrl_configure_pins+0x6fc>)
    6d44:	48bf      	ldr	r0, [pc, #764]	; (7044 <pinctrl_configure_pins+0x700>)
    6d46:	f005 f9df 	bl	c108 <assert_print>
    6d4a:	f240 212e 	movw	r1, #558	; 0x22e
    6d4e:	4648      	mov	r0, r9
    6d50:	f005 f9d3 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6d54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d58:	e015      	b.n	6d86 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    6d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6d5e:	e7df      	b.n	6d20 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d60:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 703c <pinctrl_configure_pins+0x6f8>
    6d64:	f240 2329 	movw	r3, #553	; 0x229
    6d68:	4652      	mov	r2, sl
    6d6a:	49b7      	ldr	r1, [pc, #732]	; (7048 <pinctrl_configure_pins+0x704>)
    6d6c:	48b5      	ldr	r0, [pc, #724]	; (7044 <pinctrl_configure_pins+0x700>)
    6d6e:	f005 f9cb 	bl	c108 <assert_print>
    6d72:	f240 2129 	movw	r1, #553	; 0x229
    6d76:	4650      	mov	r0, sl
    6d78:	f005 f9bf 	bl	c0fa <assert_post_action>
    6d7c:	e7d6      	b.n	6d2c <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    6d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d82:	e000      	b.n	6d86 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d84:	4ab1      	ldr	r2, [pc, #708]	; (704c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6d86:	2301      	movs	r3, #1
    6d88:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6d8c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6d90:	2201      	movs	r2, #1
    6d92:	4611      	mov	r1, r2
    6d94:	f855 0008 	ldr.w	r0, [r5, r8]
    6d98:	f7ff fd74 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d9c:	e626      	b.n	69ec <pinctrl_configure_pins+0xa8>
    switch (port)
    6d9e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6da2:	d01f      	beq.n	6de4 <pinctrl_configure_pins+0x4a0>
    6da4:	b30b      	cbz	r3, 6dea <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    6da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6daa:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6dae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6db0:	f013 0f01 	tst.w	r3, #1
    6db4:	d01b      	beq.n	6dee <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    6db6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6dba:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6dbe:	d025      	beq.n	6e0c <pinctrl_configure_pins+0x4c8>
    6dc0:	bb3b      	cbnz	r3, 6e12 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    6dc2:	f8df 9278 	ldr.w	r9, [pc, #632]	; 703c <pinctrl_configure_pins+0x6f8>
    6dc6:	f240 232e 	movw	r3, #558	; 0x22e
    6dca:	464a      	mov	r2, r9
    6dcc:	499c      	ldr	r1, [pc, #624]	; (7040 <pinctrl_configure_pins+0x6fc>)
    6dce:	489d      	ldr	r0, [pc, #628]	; (7044 <pinctrl_configure_pins+0x700>)
    6dd0:	f005 f99a 	bl	c108 <assert_print>
    6dd4:	f240 212e 	movw	r1, #558	; 0x22e
    6dd8:	4648      	mov	r0, r9
    6dda:	f005 f98e 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6de2:	e017      	b.n	6e14 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    6de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6de8:	e7df      	b.n	6daa <pinctrl_configure_pins+0x466>
    switch (port)
    6dea:	2300      	movs	r3, #0
    6dec:	e7dd      	b.n	6daa <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dee:	f8df a24c 	ldr.w	sl, [pc, #588]	; 703c <pinctrl_configure_pins+0x6f8>
    6df2:	f240 2329 	movw	r3, #553	; 0x229
    6df6:	4652      	mov	r2, sl
    6df8:	4993      	ldr	r1, [pc, #588]	; (7048 <pinctrl_configure_pins+0x704>)
    6dfa:	4892      	ldr	r0, [pc, #584]	; (7044 <pinctrl_configure_pins+0x700>)
    6dfc:	f005 f984 	bl	c108 <assert_print>
    6e00:	f240 2129 	movw	r1, #553	; 0x229
    6e04:	4650      	mov	r0, sl
    6e06:	f005 f978 	bl	c0fa <assert_post_action>
    6e0a:	e7d4      	b.n	6db6 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    6e0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e10:	e000      	b.n	6e14 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e12:	4a8e      	ldr	r2, [pc, #568]	; (704c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6e14:	2301      	movs	r3, #1
    6e16:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6e1a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6e1e:	e7b7      	b.n	6d90 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e24:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6e28:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6e2c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6e30:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6e34:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6e38:	d144      	bne.n	6ec4 <pinctrl_configure_pins+0x580>
    switch (port)
    6e3a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e3e:	d01f      	beq.n	6e80 <pinctrl_configure_pins+0x53c>
    6e40:	b10b      	cbz	r3, 6e46 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    6e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6e46:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e4a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e4c:	f012 0f01 	tst.w	r2, #1
    6e50:	d019      	beq.n	6e86 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    6e52:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e56:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e5a:	d023      	beq.n	6ea4 <pinctrl_configure_pins+0x560>
    6e5c:	bb2b      	cbnz	r3, 6eaa <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    6e5e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 703c <pinctrl_configure_pins+0x6f8>
    6e62:	f240 232e 	movw	r3, #558	; 0x22e
    6e66:	464a      	mov	r2, r9
    6e68:	4975      	ldr	r1, [pc, #468]	; (7040 <pinctrl_configure_pins+0x6fc>)
    6e6a:	4876      	ldr	r0, [pc, #472]	; (7044 <pinctrl_configure_pins+0x700>)
    6e6c:	f005 f94c 	bl	c108 <assert_print>
    6e70:	f240 212e 	movw	r1, #558	; 0x22e
    6e74:	4648      	mov	r0, r9
    6e76:	f005 f940 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e7e:	e015      	b.n	6eac <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    6e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e84:	e7df      	b.n	6e46 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e86:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 703c <pinctrl_configure_pins+0x6f8>
    6e8a:	f240 2329 	movw	r3, #553	; 0x229
    6e8e:	4652      	mov	r2, sl
    6e90:	496d      	ldr	r1, [pc, #436]	; (7048 <pinctrl_configure_pins+0x704>)
    6e92:	486c      	ldr	r0, [pc, #432]	; (7044 <pinctrl_configure_pins+0x700>)
    6e94:	f005 f938 	bl	c108 <assert_print>
    6e98:	f240 2129 	movw	r1, #553	; 0x229
    6e9c:	4650      	mov	r0, sl
    6e9e:	f005 f92c 	bl	c0fa <assert_post_action>
    6ea2:	e7d6      	b.n	6e52 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    6ea4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ea8:	e000      	b.n	6eac <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6eaa:	4a68      	ldr	r2, [pc, #416]	; (704c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6eac:	2301      	movs	r3, #1
    6eae:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6eb2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6eb6:	2201      	movs	r2, #1
    6eb8:	4611      	mov	r1, r2
    6eba:	f855 0008 	ldr.w	r0, [r5, r8]
    6ebe:	f7ff fce1 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6ec2:	e593      	b.n	69ec <pinctrl_configure_pins+0xa8>
    switch (port)
    6ec4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ec8:	d01f      	beq.n	6f0a <pinctrl_configure_pins+0x5c6>
    6eca:	b30b      	cbz	r3, 6f10 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    6ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ed0:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ed4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ed6:	f013 0f01 	tst.w	r3, #1
    6eda:	d01b      	beq.n	6f14 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    6edc:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ee0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ee4:	d025      	beq.n	6f32 <pinctrl_configure_pins+0x5ee>
    6ee6:	bb3b      	cbnz	r3, 6f38 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    6ee8:	f8df 9150 	ldr.w	r9, [pc, #336]	; 703c <pinctrl_configure_pins+0x6f8>
    6eec:	f240 232e 	movw	r3, #558	; 0x22e
    6ef0:	464a      	mov	r2, r9
    6ef2:	4953      	ldr	r1, [pc, #332]	; (7040 <pinctrl_configure_pins+0x6fc>)
    6ef4:	4853      	ldr	r0, [pc, #332]	; (7044 <pinctrl_configure_pins+0x700>)
    6ef6:	f005 f907 	bl	c108 <assert_print>
    6efa:	f240 212e 	movw	r1, #558	; 0x22e
    6efe:	4648      	mov	r0, r9
    6f00:	f005 f8fb 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f08:	e017      	b.n	6f3a <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    6f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f0e:	e7df      	b.n	6ed0 <pinctrl_configure_pins+0x58c>
    switch (port)
    6f10:	2300      	movs	r3, #0
    6f12:	e7dd      	b.n	6ed0 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f14:	f8df a124 	ldr.w	sl, [pc, #292]	; 703c <pinctrl_configure_pins+0x6f8>
    6f18:	f240 2329 	movw	r3, #553	; 0x229
    6f1c:	4652      	mov	r2, sl
    6f1e:	494a      	ldr	r1, [pc, #296]	; (7048 <pinctrl_configure_pins+0x704>)
    6f20:	4848      	ldr	r0, [pc, #288]	; (7044 <pinctrl_configure_pins+0x700>)
    6f22:	f005 f8f1 	bl	c108 <assert_print>
    6f26:	f240 2129 	movw	r1, #553	; 0x229
    6f2a:	4650      	mov	r0, sl
    6f2c:	f005 f8e5 	bl	c0fa <assert_post_action>
    6f30:	e7d4      	b.n	6edc <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    6f32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f36:	e000      	b.n	6f3a <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f38:	4a44      	ldr	r2, [pc, #272]	; (704c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6f3a:	2301      	movs	r3, #1
    6f3c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6f40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6f44:	e7b7      	b.n	6eb6 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6f4a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6f4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6f52:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6f56:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6f5a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6f5e:	d144      	bne.n	6fea <pinctrl_configure_pins+0x6a6>
    switch (port)
    6f60:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f64:	d01f      	beq.n	6fa6 <pinctrl_configure_pins+0x662>
    6f66:	b10b      	cbz	r3, 6f6c <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    6f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6f6c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f70:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f72:	f012 0f01 	tst.w	r2, #1
    6f76:	d019      	beq.n	6fac <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    6f78:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f7c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f80:	d023      	beq.n	6fca <pinctrl_configure_pins+0x686>
    6f82:	bb2b      	cbnz	r3, 6fd0 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    6f84:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 703c <pinctrl_configure_pins+0x6f8>
    6f88:	f240 232e 	movw	r3, #558	; 0x22e
    6f8c:	464a      	mov	r2, r9
    6f8e:	492c      	ldr	r1, [pc, #176]	; (7040 <pinctrl_configure_pins+0x6fc>)
    6f90:	482c      	ldr	r0, [pc, #176]	; (7044 <pinctrl_configure_pins+0x700>)
    6f92:	f005 f8b9 	bl	c108 <assert_print>
    6f96:	f240 212e 	movw	r1, #558	; 0x22e
    6f9a:	4648      	mov	r0, r9
    6f9c:	f005 f8ad 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    6fa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6fa4:	e015      	b.n	6fd2 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    6fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6faa:	e7df      	b.n	6f6c <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6fac:	f8df a08c 	ldr.w	sl, [pc, #140]	; 703c <pinctrl_configure_pins+0x6f8>
    6fb0:	f240 2329 	movw	r3, #553	; 0x229
    6fb4:	4652      	mov	r2, sl
    6fb6:	4924      	ldr	r1, [pc, #144]	; (7048 <pinctrl_configure_pins+0x704>)
    6fb8:	4822      	ldr	r0, [pc, #136]	; (7044 <pinctrl_configure_pins+0x700>)
    6fba:	f005 f8a5 	bl	c108 <assert_print>
    6fbe:	f240 2129 	movw	r1, #553	; 0x229
    6fc2:	4650      	mov	r0, sl
    6fc4:	f005 f899 	bl	c0fa <assert_post_action>
    6fc8:	e7d6      	b.n	6f78 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    6fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6fce:	e000      	b.n	6fd2 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6fd0:	4a1e      	ldr	r2, [pc, #120]	; (704c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6fd2:	2301      	movs	r3, #1
    6fd4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6fd8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6fdc:	2201      	movs	r2, #1
    6fde:	4611      	mov	r1, r2
    6fe0:	f855 0008 	ldr.w	r0, [r5, r8]
    6fe4:	f7ff fc4e 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6fe8:	e500      	b.n	69ec <pinctrl_configure_pins+0xa8>
    switch (port)
    6fea:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6fee:	d01f      	beq.n	7030 <pinctrl_configure_pins+0x6ec>
    6ff0:	b30b      	cbz	r3, 7036 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    6ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ff6:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ffa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ffc:	f013 0f01 	tst.w	r3, #1
    7000:	d026      	beq.n	7050 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    7002:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7006:	ea5f 1359 	movs.w	r3, r9, lsr #5
    700a:	d030      	beq.n	706e <pinctrl_configure_pins+0x72a>
    700c:	bb93      	cbnz	r3, 7074 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    700e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 703c <pinctrl_configure_pins+0x6f8>
    7012:	f240 232e 	movw	r3, #558	; 0x22e
    7016:	464a      	mov	r2, r9
    7018:	4909      	ldr	r1, [pc, #36]	; (7040 <pinctrl_configure_pins+0x6fc>)
    701a:	480a      	ldr	r0, [pc, #40]	; (7044 <pinctrl_configure_pins+0x700>)
    701c:	f005 f874 	bl	c108 <assert_print>
    7020:	f240 212e 	movw	r1, #558	; 0x22e
    7024:	4648      	mov	r0, r9
    7026:	f005 f868 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    702a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    702e:	e022      	b.n	7076 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    7030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7034:	e7df      	b.n	6ff6 <pinctrl_configure_pins+0x6b2>
    switch (port)
    7036:	2300      	movs	r3, #0
    7038:	e7dd      	b.n	6ff6 <pinctrl_configure_pins+0x6b2>
    703a:	bf00      	nop
    703c:	0000ee48 	.word	0x0000ee48
    7040:	0000d680 	.word	0x0000d680
    7044:	0000d4bc 	.word	0x0000d4bc
    7048:	0000ee7c 	.word	0x0000ee7c
    704c:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7050:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 7240 <pinctrl_configure_pins+0x8fc>
    7054:	f240 2329 	movw	r3, #553	; 0x229
    7058:	4652      	mov	r2, sl
    705a:	497a      	ldr	r1, [pc, #488]	; (7244 <pinctrl_configure_pins+0x900>)
    705c:	487a      	ldr	r0, [pc, #488]	; (7248 <pinctrl_configure_pins+0x904>)
    705e:	f005 f853 	bl	c108 <assert_print>
    7062:	f240 2129 	movw	r1, #553	; 0x229
    7066:	4650      	mov	r0, sl
    7068:	f005 f847 	bl	c0fa <assert_post_action>
    706c:	e7c9      	b.n	7002 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    706e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7072:	e000      	b.n	7076 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7074:	4a75      	ldr	r2, [pc, #468]	; (724c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7076:	2301      	movs	r3, #1
    7078:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    707c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7080:	e7ac      	b.n	6fdc <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7086:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    708a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    708e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    7092:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7096:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    709a:	d144      	bne.n	7126 <pinctrl_configure_pins+0x7e2>
    switch (port)
    709c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    70a0:	d01f      	beq.n	70e2 <pinctrl_configure_pins+0x79e>
    70a2:	b10b      	cbz	r3, 70a8 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    70a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    70a8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    70ac:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70ae:	f012 0f01 	tst.w	r2, #1
    70b2:	d019      	beq.n	70e8 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    70b4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    70b8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    70bc:	d023      	beq.n	7106 <pinctrl_configure_pins+0x7c2>
    70be:	bb2b      	cbnz	r3, 710c <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    70c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7240 <pinctrl_configure_pins+0x8fc>
    70c4:	f240 232e 	movw	r3, #558	; 0x22e
    70c8:	464a      	mov	r2, r9
    70ca:	4961      	ldr	r1, [pc, #388]	; (7250 <pinctrl_configure_pins+0x90c>)
    70cc:	485e      	ldr	r0, [pc, #376]	; (7248 <pinctrl_configure_pins+0x904>)
    70ce:	f005 f81b 	bl	c108 <assert_print>
    70d2:	f240 212e 	movw	r1, #558	; 0x22e
    70d6:	4648      	mov	r0, r9
    70d8:	f005 f80f 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    70dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    70e0:	e015      	b.n	710e <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    70e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70e6:	e7df      	b.n	70a8 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70e8:	f8df a154 	ldr.w	sl, [pc, #340]	; 7240 <pinctrl_configure_pins+0x8fc>
    70ec:	f240 2329 	movw	r3, #553	; 0x229
    70f0:	4652      	mov	r2, sl
    70f2:	4954      	ldr	r1, [pc, #336]	; (7244 <pinctrl_configure_pins+0x900>)
    70f4:	4854      	ldr	r0, [pc, #336]	; (7248 <pinctrl_configure_pins+0x904>)
    70f6:	f005 f807 	bl	c108 <assert_print>
    70fa:	f240 2129 	movw	r1, #553	; 0x229
    70fe:	4650      	mov	r0, sl
    7100:	f004 fffb 	bl	c0fa <assert_post_action>
    7104:	e7d6      	b.n	70b4 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    7106:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    710a:	e000      	b.n	710e <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    710c:	4a4f      	ldr	r2, [pc, #316]	; (724c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    710e:	2301      	movs	r3, #1
    7110:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    7114:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7118:	2201      	movs	r2, #1
    711a:	4611      	mov	r1, r2
    711c:	f855 0008 	ldr.w	r0, [r5, r8]
    7120:	f7ff fbb0 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7124:	e462      	b.n	69ec <pinctrl_configure_pins+0xa8>
    switch (port)
    7126:	ea5f 1359 	movs.w	r3, r9, lsr #5
    712a:	d01f      	beq.n	716c <pinctrl_configure_pins+0x828>
    712c:	b30b      	cbz	r3, 7172 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    712e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7132:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7136:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7138:	f013 0f01 	tst.w	r3, #1
    713c:	d01b      	beq.n	7176 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    713e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7142:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7146:	d025      	beq.n	7194 <pinctrl_configure_pins+0x850>
    7148:	bb3b      	cbnz	r3, 719a <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    714a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 7240 <pinctrl_configure_pins+0x8fc>
    714e:	f240 232e 	movw	r3, #558	; 0x22e
    7152:	464a      	mov	r2, r9
    7154:	493e      	ldr	r1, [pc, #248]	; (7250 <pinctrl_configure_pins+0x90c>)
    7156:	483c      	ldr	r0, [pc, #240]	; (7248 <pinctrl_configure_pins+0x904>)
    7158:	f004 ffd6 	bl	c108 <assert_print>
    715c:	f240 212e 	movw	r1, #558	; 0x22e
    7160:	4648      	mov	r0, r9
    7162:	f004 ffca 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    716a:	e017      	b.n	719c <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    716c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7170:	e7df      	b.n	7132 <pinctrl_configure_pins+0x7ee>
    switch (port)
    7172:	2300      	movs	r3, #0
    7174:	e7dd      	b.n	7132 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7176:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 7240 <pinctrl_configure_pins+0x8fc>
    717a:	f240 2329 	movw	r3, #553	; 0x229
    717e:	4652      	mov	r2, sl
    7180:	4930      	ldr	r1, [pc, #192]	; (7244 <pinctrl_configure_pins+0x900>)
    7182:	4831      	ldr	r0, [pc, #196]	; (7248 <pinctrl_configure_pins+0x904>)
    7184:	f004 ffc0 	bl	c108 <assert_print>
    7188:	f240 2129 	movw	r1, #553	; 0x229
    718c:	4650      	mov	r0, sl
    718e:	f004 ffb4 	bl	c0fa <assert_post_action>
    7192:	e7d4      	b.n	713e <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    7194:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7198:	e000      	b.n	719c <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    719a:	4a2c      	ldr	r2, [pc, #176]	; (724c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    719c:	2301      	movs	r3, #1
    719e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    71a2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    71a6:	e7b7      	b.n	7118 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    71a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71ac:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71b0:	2201      	movs	r2, #1
    71b2:	2100      	movs	r1, #0
    71b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    71b8:	f7ff fb64 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    71bc:	e416      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    71be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71c2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71c6:	2201      	movs	r2, #1
    71c8:	2100      	movs	r1, #0
    71ca:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    71ce:	f7ff fb59 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    71d2:	e40b      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    71d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71d8:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71dc:	2201      	movs	r2, #1
    71de:	2100      	movs	r1, #0
    71e0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    71e4:	f7ff fb4e 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    71e8:	e400      	b.n	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    71ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71ee:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71f2:	2201      	movs	r2, #1
    71f4:	2100      	movs	r1, #0
    71f6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    71fa:	f7ff fb43 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    71fe:	f7ff bbf5 	b.w	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7206:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    720a:	2201      	movs	r2, #1
    720c:	2100      	movs	r1, #0
    720e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7212:	f7ff fb37 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7216:	f7ff bbe9 	b.w	69ec <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    721a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    721e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7222:	2201      	movs	r2, #1
    7224:	2100      	movs	r1, #0
    7226:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    722a:	f7ff fb2b 	bl	6884 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    722e:	f7ff bbdd 	b.w	69ec <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7232:	2000      	movs	r0, #0
    7234:	e001      	b.n	723a <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    7236:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    723e:	bf00      	nop
    7240:	0000ee48 	.word	0x0000ee48
    7244:	0000ee7c 	.word	0x0000ee7c
    7248:	0000d4bc 	.word	0x0000d4bc
    724c:	50000300 	.word	0x50000300
    7250:	0000d680 	.word	0x0000d680

00007254 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7254:	b510      	push	{r4, lr}
    7256:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    7258:	f7fc f9d4 	bl	3604 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    725c:	4b06      	ldr	r3, [pc, #24]	; (7278 <k_sys_fatal_error_handler+0x24>)
    725e:	9302      	str	r3, [sp, #8]
    7260:	2400      	movs	r4, #0
    7262:	9401      	str	r4, [sp, #4]
    7264:	9400      	str	r4, [sp, #0]
    7266:	4623      	mov	r3, r4
    7268:	2201      	movs	r2, #1
    726a:	4904      	ldr	r1, [pc, #16]	; (727c <k_sys_fatal_error_handler+0x28>)
    726c:	4620      	mov	r0, r4
    726e:	f005 fcff 	bl	cc70 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    7272:	4620      	mov	r0, r4
    7274:	f7fe f810 	bl	5298 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    7278:	0000efa8 	.word	0x0000efa8
    727c:	0000d300 	.word	0x0000d300

00007280 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7280:	4b02      	ldr	r3, [pc, #8]	; (728c <nvmc_wait+0xc>)
    7282:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7286:	2b00      	cmp	r3, #0
    7288:	d0fa      	beq.n	7280 <nvmc_wait>
}
    728a:	4770      	bx	lr
    728c:	4001e000 	.word	0x4001e000

00007290 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    7290:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7292:	4b03      	ldr	r3, [pc, #12]	; (72a0 <nvmc_config+0x10>)
    7294:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    7298:	f7ff fff2 	bl	7280 <nvmc_wait>
}
    729c:	bd08      	pop	{r3, pc}
    729e:	bf00      	nop
    72a0:	4001e000 	.word	0x4001e000

000072a4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    72a4:	4b01      	ldr	r3, [pc, #4]	; (72ac <SystemCoreClockUpdate+0x8>)
    72a6:	4a02      	ldr	r2, [pc, #8]	; (72b0 <SystemCoreClockUpdate+0xc>)
    72a8:	601a      	str	r2, [r3, #0]
}
    72aa:	4770      	bx	lr
    72ac:	200000f0 	.word	0x200000f0
    72b0:	03d09000 	.word	0x03d09000

000072b4 <SystemInit>:

void SystemInit(void)
{
    72b4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    72b6:	f005 fcf8 	bl	ccaa <nrf52_errata_36>
    72ba:	b140      	cbz	r0, 72ce <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    72bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72c0:	2200      	movs	r2, #0
    72c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    72c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    72ca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    72ce:	f005 fcf6 	bl	ccbe <nrf52_errata_66>
    72d2:	2800      	cmp	r0, #0
    72d4:	d046      	beq.n	7364 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    72d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    72da:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    72de:	4b59      	ldr	r3, [pc, #356]	; (7444 <SystemInit+0x190>)
    72e0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    72e4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    72e8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    72ec:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    72f0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    72f4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    72f8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    72fc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7300:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7304:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7308:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    730c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7310:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7314:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    7318:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    731c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    7320:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7324:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    7328:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    732c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    7330:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    7334:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    7338:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    733c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    7340:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    7344:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    7348:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    734c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    7350:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    7354:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    7358:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    735c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    7360:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    7364:	f005 fcb5 	bl	ccd2 <nrf52_errata_98>
    7368:	b118      	cbz	r0, 7372 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    736a:	4b37      	ldr	r3, [pc, #220]	; (7448 <SystemInit+0x194>)
    736c:	4a37      	ldr	r2, [pc, #220]	; (744c <SystemInit+0x198>)
    736e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    7372:	f005 fcc1 	bl	ccf8 <nrf52_errata_103>
    7376:	b118      	cbz	r0, 7380 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    7378:	4b35      	ldr	r3, [pc, #212]	; (7450 <SystemInit+0x19c>)
    737a:	22fb      	movs	r2, #251	; 0xfb
    737c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    7380:	f005 fccd 	bl	cd1e <nrf52_errata_115>
    7384:	b170      	cbz	r0, 73a4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    7386:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    738a:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    738e:	f023 030f 	bic.w	r3, r3, #15
    7392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7396:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    739a:	f002 020f 	and.w	r2, r2, #15
    739e:	4313      	orrs	r3, r2
    73a0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    73a4:	f005 fcce 	bl	cd44 <nrf52_errata_120>
    73a8:	b120      	cbz	r0, 73b4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    73aa:	4b2a      	ldr	r3, [pc, #168]	; (7454 <SystemInit+0x1a0>)
    73ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    73b0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    73b4:	f005 fcd9 	bl	cd6a <nrf52_errata_136>
    73b8:	b160      	cbz	r0, 73d4 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    73ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    73c2:	f013 0f01 	tst.w	r3, #1
    73c6:	d005      	beq.n	73d4 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    73c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73cc:	f06f 0201 	mvn.w	r2, #1
    73d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    73d4:	f005 fcd3 	bl	cd7e <nrf52_configuration_249>
    73d8:	b138      	cbz	r0, 73ea <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    73da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    73de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    73e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73e6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    73ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    73ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    73f2:	2b00      	cmp	r3, #0
    73f4:	db08      	blt.n	7408 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    73f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    73fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    73fe:	2b00      	cmp	r3, #0
    7400:	db02      	blt.n	7408 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    7402:	f7ff ff4f 	bl	72a4 <SystemCoreClockUpdate>
}
    7406:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    7408:	2001      	movs	r0, #1
    740a:	f7ff ff41 	bl	7290 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    740e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    7412:	2512      	movs	r5, #18
    7414:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    7418:	f7ff ff32 	bl	7280 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    741c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    7420:	f7ff ff2e 	bl	7280 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    7424:	2000      	movs	r0, #0
    7426:	f7ff ff33 	bl	7290 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    742a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    742e:	490a      	ldr	r1, [pc, #40]	; (7458 <SystemInit+0x1a4>)
    7430:	68ca      	ldr	r2, [r1, #12]
    7432:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7436:	4b09      	ldr	r3, [pc, #36]	; (745c <SystemInit+0x1a8>)
    7438:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    743a:	60cb      	str	r3, [r1, #12]
    743c:	f3bf 8f4f 	dsb	sy
    __NOP();
    7440:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7442:	e7fd      	b.n	7440 <SystemInit+0x18c>
    7444:	4000c000 	.word	0x4000c000
    7448:	40005000 	.word	0x40005000
    744c:	00038148 	.word	0x00038148
    7450:	4000f000 	.word	0x4000f000
    7454:	40029000 	.word	0x40029000
    7458:	e000ed00 	.word	0xe000ed00
    745c:	05fa0004 	.word	0x05fa0004

00007460 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7460:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    7462:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    7464:	fab4 f384 	clz	r3, r4
    7468:	f1c3 031f 	rsb	r3, r3, #31
    746c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    7470:	2b00      	cmp	r3, #0
    7472:	db16      	blt.n	74a2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    7474:	2201      	movs	r2, #1
    7476:	fa02 f303 	lsl.w	r3, r2, r3
    747a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    747e:	f3bf 8f5b 	dmb	ish
    7482:	e850 2f00 	ldrex	r2, [r0]
    7486:	42a2      	cmp	r2, r4
    7488:	d104      	bne.n	7494 <nrfx_flag32_alloc+0x34>
    748a:	e840 3e00 	strex	lr, r3, [r0]
    748e:	f1be 0f00 	cmp.w	lr, #0
    7492:	d1f6      	bne.n	7482 <nrfx_flag32_alloc+0x22>
    7494:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7498:	d1e3      	bne.n	7462 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    749a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    749e:	4802      	ldr	r0, [pc, #8]	; (74a8 <nrfx_flag32_alloc+0x48>)
}
    74a0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    74a2:	4802      	ldr	r0, [pc, #8]	; (74ac <nrfx_flag32_alloc+0x4c>)
    74a4:	e7fc      	b.n	74a0 <nrfx_flag32_alloc+0x40>
    74a6:	bf00      	nop
    74a8:	0bad0000 	.word	0x0bad0000
    74ac:	0bad0002 	.word	0x0bad0002

000074b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    74b0:	6803      	ldr	r3, [r0, #0]
    74b2:	40cb      	lsrs	r3, r1
    74b4:	f013 0f01 	tst.w	r3, #1
    74b8:	d115      	bne.n	74e6 <nrfx_flag32_free+0x36>
{
    74ba:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    74bc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    74be:	2301      	movs	r3, #1
    74c0:	408b      	lsls	r3, r1
    74c2:	4313      	orrs	r3, r2
    74c4:	f3bf 8f5b 	dmb	ish
    74c8:	e850 cf00 	ldrex	ip, [r0]
    74cc:	4594      	cmp	ip, r2
    74ce:	d104      	bne.n	74da <nrfx_flag32_free+0x2a>
    74d0:	e840 3e00 	strex	lr, r3, [r0]
    74d4:	f1be 0f00 	cmp.w	lr, #0
    74d8:	d1f6      	bne.n	74c8 <nrfx_flag32_free+0x18>
    74da:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    74de:	d1ed      	bne.n	74bc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    74e0:	4802      	ldr	r0, [pc, #8]	; (74ec <nrfx_flag32_free+0x3c>)
}
    74e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    74e6:	4802      	ldr	r0, [pc, #8]	; (74f0 <nrfx_flag32_free+0x40>)
}
    74e8:	4770      	bx	lr
    74ea:	bf00      	nop
    74ec:	0bad0000 	.word	0x0bad0000
    74f0:	0bad0004 	.word	0x0bad0004

000074f4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    74f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74f6:	b083      	sub	sp, #12
    switch (domain)
    74f8:	4605      	mov	r5, r0
    74fa:	b168      	cbz	r0, 7518 <clock_stop+0x24>
    74fc:	2801      	cmp	r0, #1
    74fe:	d020      	beq.n	7542 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7500:	4c3d      	ldr	r4, [pc, #244]	; (75f8 <clock_stop+0x104>)
    7502:	23d8      	movs	r3, #216	; 0xd8
    7504:	4622      	mov	r2, r4
    7506:	493d      	ldr	r1, [pc, #244]	; (75fc <clock_stop+0x108>)
    7508:	483d      	ldr	r0, [pc, #244]	; (7600 <clock_stop+0x10c>)
    750a:	f004 fdfd 	bl	c108 <assert_print>
    750e:	21d8      	movs	r1, #216	; 0xd8
    7510:	4620      	mov	r0, r4
    7512:	f004 fdf2 	bl	c0fa <assert_post_action>
            return;
    7516:	e068      	b.n	75ea <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    7518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    751c:	2202      	movs	r2, #2
    751e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7522:	2200      	movs	r2, #0
    7524:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7528:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    752c:	2201      	movs	r2, #1
    752e:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7530:	2301      	movs	r3, #1
    7532:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7536:	429d      	cmp	r5, r3
    7538:	d00f      	beq.n	755a <clock_stop+0x66>
    753a:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    753c:	f242 7410 	movw	r4, #10000	; 0x2710
    7540:	e029      	b.n	7596 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    7542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7546:	2201      	movs	r2, #1
    7548:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    754c:	2100      	movs	r1, #0
    754e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7552:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7556:	605a      	str	r2, [r3, #4]
}
    7558:	e7ea      	b.n	7530 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    755a:	f10d 0607 	add.w	r6, sp, #7
    755e:	e7ed      	b.n	753c <clock_stop+0x48>
            if (p_clk_src != NULL)
    7560:	b136      	cbz	r6, 7570 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7566:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    756a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    756e:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7574:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    7578:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    757c:	d12f      	bne.n	75de <clock_stop+0xea>
    return false;
    757e:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7580:	b38b      	cbz	r3, 75e6 <clock_stop+0xf2>
    7582:	b11e      	cbz	r6, 758c <clock_stop+0x98>
    7584:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7588:	2b01      	cmp	r3, #1
    758a:	d12c      	bne.n	75e6 <clock_stop+0xf2>
    758c:	2001      	movs	r0, #1
    758e:	f005 fc09 	bl	cda4 <nrfx_busy_wait>
    7592:	3c01      	subs	r4, #1
    7594:	d027      	beq.n	75e6 <clock_stop+0xf2>
    switch (domain)
    7596:	2d00      	cmp	r5, #0
    7598:	d0e2      	beq.n	7560 <clock_stop+0x6c>
    759a:	2d01      	cmp	r5, #1
    759c:	d00e      	beq.n	75bc <clock_stop+0xc8>
            NRFX_ASSERT(0);
    759e:	4f19      	ldr	r7, [pc, #100]	; (7604 <clock_stop+0x110>)
    75a0:	f44f 734f 	mov.w	r3, #828	; 0x33c
    75a4:	463a      	mov	r2, r7
    75a6:	4915      	ldr	r1, [pc, #84]	; (75fc <clock_stop+0x108>)
    75a8:	4815      	ldr	r0, [pc, #84]	; (7600 <clock_stop+0x10c>)
    75aa:	f004 fdad 	bl	c108 <assert_print>
    75ae:	f44f 714f 	mov.w	r1, #828	; 0x33c
    75b2:	4638      	mov	r0, r7
    75b4:	f004 fda1 	bl	c0fa <assert_post_action>
            return false;
    75b8:	2300      	movs	r3, #0
    75ba:	e7e1      	b.n	7580 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    75bc:	b136      	cbz	r6, 75cc <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    75be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    75c6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    75ca:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    75cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    75d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    75d8:	d103      	bne.n	75e2 <clock_stop+0xee>
    return false;
    75da:	2300      	movs	r3, #0
    75dc:	e7d0      	b.n	7580 <clock_stop+0x8c>
                return true;
    75de:	2301      	movs	r3, #1
    75e0:	e7ce      	b.n	7580 <clock_stop+0x8c>
                return true;
    75e2:	2301      	movs	r3, #1
    75e4:	e7cc      	b.n	7580 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    75e6:	2d01      	cmp	r5, #1
    75e8:	d001      	beq.n	75ee <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    75ea:	b003      	add	sp, #12
    75ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    75ee:	4b06      	ldr	r3, [pc, #24]	; (7608 <clock_stop+0x114>)
    75f0:	2200      	movs	r2, #0
    75f2:	715a      	strb	r2, [r3, #5]
    75f4:	e7f9      	b.n	75ea <clock_stop+0xf6>
    75f6:	bf00      	nop
    75f8:	0000efc8 	.word	0x0000efc8
    75fc:	0000d680 	.word	0x0000d680
    7600:	0000d4bc 	.word	0x0000d4bc
    7604:	0000f008 	.word	0x0000f008
    7608:	20000ca0 	.word	0x20000ca0

0000760c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    760c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    760e:	4604      	mov	r4, r0
    7610:	b150      	cbz	r0, 7628 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7612:	4b0d      	ldr	r3, [pc, #52]	; (7648 <nrfx_clock_init+0x3c>)
    7614:	791b      	ldrb	r3, [r3, #4]
    7616:	b9ab      	cbnz	r3, 7644 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    7618:	4b0b      	ldr	r3, [pc, #44]	; (7648 <nrfx_clock_init+0x3c>)
    761a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    761c:	2201      	movs	r2, #1
    761e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    7620:	2200      	movs	r2, #0
    7622:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7624:	4809      	ldr	r0, [pc, #36]	; (764c <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7626:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    7628:	4d09      	ldr	r5, [pc, #36]	; (7650 <nrfx_clock_init+0x44>)
    762a:	f240 1315 	movw	r3, #277	; 0x115
    762e:	462a      	mov	r2, r5
    7630:	4908      	ldr	r1, [pc, #32]	; (7654 <nrfx_clock_init+0x48>)
    7632:	4809      	ldr	r0, [pc, #36]	; (7658 <nrfx_clock_init+0x4c>)
    7634:	f004 fd68 	bl	c108 <assert_print>
    7638:	f240 1115 	movw	r1, #277	; 0x115
    763c:	4628      	mov	r0, r5
    763e:	f004 fd5c 	bl	c0fa <assert_post_action>
    7642:	e7e6      	b.n	7612 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7644:	4805      	ldr	r0, [pc, #20]	; (765c <nrfx_clock_init+0x50>)
    return err_code;
    7646:	e7ee      	b.n	7626 <nrfx_clock_init+0x1a>
    7648:	20000ca0 	.word	0x20000ca0
    764c:	0bad0000 	.word	0x0bad0000
    7650:	0000efc8 	.word	0x0000efc8
    7654:	0000f03c 	.word	0x0000f03c
    7658:	0000d4bc 	.word	0x0000d4bc
    765c:	0bad000c 	.word	0x0bad000c

00007660 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7660:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7662:	4b0f      	ldr	r3, [pc, #60]	; (76a0 <nrfx_clock_enable+0x40>)
    7664:	791b      	ldrb	r3, [r3, #4]
    7666:	b153      	cbz	r3, 767e <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7668:	2000      	movs	r0, #0
    766a:	f7fc ff03 	bl	4474 <arch_irq_is_enabled>
    766e:	b1a0      	cbz	r0, 769a <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    7670:	f005 fb9c 	bl	cdac <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7678:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    767c:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    767e:	4c09      	ldr	r4, [pc, #36]	; (76a4 <nrfx_clock_enable+0x44>)
    7680:	f44f 7397 	mov.w	r3, #302	; 0x12e
    7684:	4622      	mov	r2, r4
    7686:	4908      	ldr	r1, [pc, #32]	; (76a8 <nrfx_clock_enable+0x48>)
    7688:	4808      	ldr	r0, [pc, #32]	; (76ac <nrfx_clock_enable+0x4c>)
    768a:	f004 fd3d 	bl	c108 <assert_print>
    768e:	f44f 7197 	mov.w	r1, #302	; 0x12e
    7692:	4620      	mov	r0, r4
    7694:	f004 fd31 	bl	c0fa <assert_post_action>
    7698:	e7e6      	b.n	7668 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    769a:	f7fc fedd 	bl	4458 <arch_irq_enable>
    769e:	e7e7      	b.n	7670 <nrfx_clock_enable+0x10>
    76a0:	20000ca0 	.word	0x20000ca0
    76a4:	0000efc8 	.word	0x0000efc8
    76a8:	0000f04c 	.word	0x0000f04c
    76ac:	0000d4bc 	.word	0x0000d4bc

000076b0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    76b0:	b530      	push	{r4, r5, lr}
    76b2:	b083      	sub	sp, #12
    76b4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    76b6:	4b34      	ldr	r3, [pc, #208]	; (7788 <nrfx_clock_start+0xd8>)
    76b8:	791b      	ldrb	r3, [r3, #4]
    76ba:	b183      	cbz	r3, 76de <nrfx_clock_start+0x2e>
    switch (domain)
    76bc:	b1ec      	cbz	r4, 76fa <nrfx_clock_start+0x4a>
    76be:	2c01      	cmp	r4, #1
    76c0:	d055      	beq.n	776e <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    76c2:	4c32      	ldr	r4, [pc, #200]	; (778c <nrfx_clock_start+0xdc>)
    76c4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    76c8:	4622      	mov	r2, r4
    76ca:	4931      	ldr	r1, [pc, #196]	; (7790 <nrfx_clock_start+0xe0>)
    76cc:	4831      	ldr	r0, [pc, #196]	; (7794 <nrfx_clock_start+0xe4>)
    76ce:	f004 fd1b 	bl	c108 <assert_print>
    76d2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    76d6:	4620      	mov	r0, r4
    76d8:	f004 fd0f 	bl	c0fa <assert_post_action>
            break;
    }
}
    76dc:	e052      	b.n	7784 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    76de:	4d2b      	ldr	r5, [pc, #172]	; (778c <nrfx_clock_start+0xdc>)
    76e0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    76e4:	462a      	mov	r2, r5
    76e6:	492c      	ldr	r1, [pc, #176]	; (7798 <nrfx_clock_start+0xe8>)
    76e8:	482a      	ldr	r0, [pc, #168]	; (7794 <nrfx_clock_start+0xe4>)
    76ea:	f004 fd0d 	bl	c108 <assert_print>
    76ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
    76f2:	4628      	mov	r0, r5
    76f4:	f004 fd01 	bl	c0fa <assert_post_action>
    76f8:	e7e0      	b.n	76bc <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76fe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7702:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7706:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7708:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    770c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7710:	d117      	bne.n	7742 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7712:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7716:	f013 0f01 	tst.w	r3, #1
    771a:	d116      	bne.n	774a <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    771c:	f005 fb46 	bl	cdac <clock_initial_lfclksrc_get>
    7720:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7726:	9a01      	ldr	r2, [sp, #4]
    7728:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    772c:	2200      	movs	r2, #0
    772e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7732:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    7736:	2202      	movs	r2, #2
    7738:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    773c:	2201      	movs	r2, #1
    773e:	609a      	str	r2, [r3, #8]
}
    7740:	e020      	b.n	7784 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7742:	a801      	add	r0, sp, #4
    7744:	f005 fb34 	bl	cdb0 <clock_lfclksrc_tweak>
    7748:	e7eb      	b.n	7722 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    774a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    774e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7752:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    7756:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    7758:	a801      	add	r0, sp, #4
    775a:	f005 fb29 	bl	cdb0 <clock_lfclksrc_tweak>
    775e:	2800      	cmp	r0, #0
    7760:	d0df      	beq.n	7722 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    7762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7766:	2202      	movs	r2, #2
    7768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    776c:	e00a      	b.n	7784 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    776e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7772:	2200      	movs	r2, #0
    7774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7778:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    777c:	2201      	movs	r2, #1
    777e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7782:	601a      	str	r2, [r3, #0]
}
    7784:	b003      	add	sp, #12
    7786:	bd30      	pop	{r4, r5, pc}
    7788:	20000ca0 	.word	0x20000ca0
    778c:	0000efc8 	.word	0x0000efc8
    7790:	0000d680 	.word	0x0000d680
    7794:	0000d4bc 	.word	0x0000d4bc
    7798:	0000f04c 	.word	0x0000f04c

0000779c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    779c:	b538      	push	{r3, r4, r5, lr}
    779e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    77a0:	4b0a      	ldr	r3, [pc, #40]	; (77cc <nrfx_clock_stop+0x30>)
    77a2:	791b      	ldrb	r3, [r3, #4]
    77a4:	b11b      	cbz	r3, 77ae <nrfx_clock_stop+0x12>
    clock_stop(domain);
    77a6:	4620      	mov	r0, r4
    77a8:	f7ff fea4 	bl	74f4 <clock_stop>
}
    77ac:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    77ae:	4d08      	ldr	r5, [pc, #32]	; (77d0 <nrfx_clock_stop+0x34>)
    77b0:	f240 13ad 	movw	r3, #429	; 0x1ad
    77b4:	462a      	mov	r2, r5
    77b6:	4907      	ldr	r1, [pc, #28]	; (77d4 <nrfx_clock_stop+0x38>)
    77b8:	4807      	ldr	r0, [pc, #28]	; (77d8 <nrfx_clock_stop+0x3c>)
    77ba:	f004 fca5 	bl	c108 <assert_print>
    77be:	f240 11ad 	movw	r1, #429	; 0x1ad
    77c2:	4628      	mov	r0, r5
    77c4:	f004 fc99 	bl	c0fa <assert_post_action>
    77c8:	e7ed      	b.n	77a6 <nrfx_clock_stop+0xa>
    77ca:	bf00      	nop
    77cc:	20000ca0 	.word	0x20000ca0
    77d0:	0000efc8 	.word	0x0000efc8
    77d4:	0000f04c 	.word	0x0000f04c
    77d8:	0000d4bc 	.word	0x0000d4bc

000077dc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    77dc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    77de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    77e6:	b18b      	cbz	r3, 780c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77ec:	2200      	movs	r2, #0
    77ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    77f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    77f6:	2201      	movs	r2, #1
    77f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    77fc:	4b15      	ldr	r3, [pc, #84]	; (7854 <nrfx_power_clock_irq_handler+0x78>)
    77fe:	795b      	ldrb	r3, [r3, #5]
    7800:	b923      	cbnz	r3, 780c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    7802:	4b14      	ldr	r3, [pc, #80]	; (7854 <nrfx_power_clock_irq_handler+0x78>)
    7804:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	2000      	movs	r0, #0
    780a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    780c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7810:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7814:	b19b      	cbz	r3, 783e <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    781a:	2200      	movs	r2, #0
    781c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7820:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7824:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7828:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    782c:	f012 0f03 	tst.w	r2, #3
    7830:	d106      	bne.n	7840 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7836:	2201      	movs	r2, #1
    7838:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    783c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    783e:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    7840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7844:	2202      	movs	r2, #2
    7846:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    784a:	4b02      	ldr	r3, [pc, #8]	; (7854 <nrfx_power_clock_irq_handler+0x78>)
    784c:	681b      	ldr	r3, [r3, #0]
    784e:	2001      	movs	r0, #1
    7850:	4798      	blx	r3
}
    7852:	e7f4      	b.n	783e <nrfx_power_clock_irq_handler+0x62>
    7854:	20000ca0 	.word	0x20000ca0

00007858 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7858:	3008      	adds	r0, #8
    785a:	4b03      	ldr	r3, [pc, #12]	; (7868 <pin_in_use+0x10>)
    785c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7860:	f000 0001 	and.w	r0, r0, #1
    7864:	4770      	bx	lr
    7866:	bf00      	nop
    7868:	200000f4 	.word	0x200000f4

0000786c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    786c:	3008      	adds	r0, #8
    786e:	4b03      	ldr	r3, [pc, #12]	; (787c <pin_in_use_by_te+0x10>)
    7870:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7874:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7878:	4770      	bx	lr
    787a:	bf00      	nop
    787c:	200000f4 	.word	0x200000f4

00007880 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    7880:	3008      	adds	r0, #8
    7882:	4b04      	ldr	r3, [pc, #16]	; (7894 <pin_has_trigger+0x14>)
    7884:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7888:	f010 001c 	ands.w	r0, r0, #28
    788c:	bf18      	it	ne
    788e:	2001      	movne	r0, #1
    7890:	4770      	bx	lr
    7892:	bf00      	nop
    7894:	200000f4 	.word	0x200000f4

00007898 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7898:	3008      	adds	r0, #8
    789a:	4b03      	ldr	r3, [pc, #12]	; (78a8 <pin_is_output+0x10>)
    789c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    78a4:	4770      	bx	lr
    78a6:	bf00      	nop
    78a8:	200000f4 	.word	0x200000f4

000078ac <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    78ac:	3008      	adds	r0, #8
    78ae:	4b02      	ldr	r3, [pc, #8]	; (78b8 <pin_te_get+0xc>)
    78b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78b4:	0b40      	lsrs	r0, r0, #13
    78b6:	4770      	bx	lr
    78b8:	200000f4 	.word	0x200000f4

000078bc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    78bc:	2200      	movs	r2, #0
    78be:	e004      	b.n	78ca <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    78c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78c4:	4283      	cmp	r3, r0
    78c6:	d00f      	beq.n	78e8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    78c8:	3201      	adds	r2, #1
    78ca:	2a2f      	cmp	r2, #47	; 0x2f
    78cc:	d80a      	bhi.n	78e4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    78ce:	f102 0308 	add.w	r3, r2, #8
    78d2:	4906      	ldr	r1, [pc, #24]	; (78ec <handler_in_use+0x30>)
    78d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    78d8:	f413 7f80 	tst.w	r3, #256	; 0x100
    78dc:	d0f0      	beq.n	78c0 <handler_in_use+0x4>
    78de:	f3c3 2343 	ubfx	r3, r3, #9, #4
    78e2:	e7ef      	b.n	78c4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    78e4:	2000      	movs	r0, #0
    78e6:	4770      	bx	lr
            return true;
    78e8:	2001      	movs	r0, #1
}
    78ea:	4770      	bx	lr
    78ec:	200000f4 	.word	0x200000f4

000078f0 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    78f0:	2300      	movs	r3, #0
    78f2:	b113      	cbz	r3, 78fa <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    78f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    78f8:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    78fa:	4a07      	ldr	r2, [pc, #28]	; (7918 <find_handler+0x28>)
    78fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7900:	4282      	cmp	r2, r0
    7902:	d001      	beq.n	7908 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7904:	3301      	adds	r3, #1
    7906:	e7f4      	b.n	78f2 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7908:	4a03      	ldr	r2, [pc, #12]	; (7918 <find_handler+0x28>)
    790a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    790e:	6852      	ldr	r2, [r2, #4]
    7910:	428a      	cmp	r2, r1
    7912:	d1f7      	bne.n	7904 <find_handler+0x14>
            return i;
    7914:	4618      	mov	r0, r3
    7916:	4770      	bx	lr
    7918:	200000f4 	.word	0x200000f4

0000791c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    791c:	3008      	adds	r0, #8
    791e:	4b06      	ldr	r3, [pc, #24]	; (7938 <channel_handler_get+0x1c>)
    7920:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    7924:	f410 7f80 	tst.w	r0, #256	; 0x100
    7928:	d004      	beq.n	7934 <channel_handler_get+0x18>
    792a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    792e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7932:	4770      	bx	lr
        return NULL;
    7934:	2000      	movs	r0, #0
}
    7936:	4770      	bx	lr
    7938:	200000f4 	.word	0x200000f4

0000793c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    793c:	b570      	push	{r4, r5, r6, lr}
    793e:	4604      	mov	r4, r0
    7940:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    7942:	f7ff ffeb 	bl	791c <channel_handler_get>

    if (handler)
    7946:	b120      	cbz	r0, 7952 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    7948:	6806      	ldr	r6, [r0, #0]
    794a:	6842      	ldr	r2, [r0, #4]
    794c:	4629      	mov	r1, r5
    794e:	4620      	mov	r0, r4
    7950:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    7952:	4b04      	ldr	r3, [pc, #16]	; (7964 <call_handler+0x28>)
    7954:	689b      	ldr	r3, [r3, #8]
    7956:	b123      	cbz	r3, 7962 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7958:	4a02      	ldr	r2, [pc, #8]	; (7964 <call_handler+0x28>)
    795a:	68d2      	ldr	r2, [r2, #12]
    795c:	4629      	mov	r1, r5
    795e:	4620      	mov	r0, r4
    7960:	4798      	blx	r3
    }
}
    7962:	bd70      	pop	{r4, r5, r6, pc}
    7964:	200000f4 	.word	0x200000f4

00007968 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7968:	f100 0208 	add.w	r2, r0, #8
    796c:	4b16      	ldr	r3, [pc, #88]	; (79c8 <release_handler+0x60>)
    796e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7972:	f413 7f80 	tst.w	r3, #256	; 0x100
    7976:	d026      	beq.n	79c6 <release_handler+0x5e>
{
    7978:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    797a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    797e:	4610      	mov	r0, r2
    7980:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7984:	4a10      	ldr	r2, [pc, #64]	; (79c8 <release_handler+0x60>)
    7986:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    798a:	4620      	mov	r0, r4
    798c:	f7ff ff96 	bl	78bc <handler_in_use>
    7990:	b100      	cbz	r0, 7994 <release_handler+0x2c>
}
    7992:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    7994:	480c      	ldr	r0, [pc, #48]	; (79c8 <release_handler+0x60>)
    7996:	2300      	movs	r3, #0
    7998:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    799c:	4621      	mov	r1, r4
    799e:	3074      	adds	r0, #116	; 0x74
    79a0:	f7ff fd86 	bl	74b0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    79a4:	4b09      	ldr	r3, [pc, #36]	; (79cc <release_handler+0x64>)
    79a6:	4298      	cmp	r0, r3
    79a8:	d0f3      	beq.n	7992 <release_handler+0x2a>
    79aa:	4c09      	ldr	r4, [pc, #36]	; (79d0 <release_handler+0x68>)
    79ac:	f44f 7399 	mov.w	r3, #306	; 0x132
    79b0:	4622      	mov	r2, r4
    79b2:	4908      	ldr	r1, [pc, #32]	; (79d4 <release_handler+0x6c>)
    79b4:	4808      	ldr	r0, [pc, #32]	; (79d8 <release_handler+0x70>)
    79b6:	f004 fba7 	bl	c108 <assert_print>
    79ba:	f44f 7199 	mov.w	r1, #306	; 0x132
    79be:	4620      	mov	r0, r4
    79c0:	f004 fb9b 	bl	c0fa <assert_post_action>
    79c4:	e7e5      	b.n	7992 <release_handler+0x2a>
    79c6:	4770      	bx	lr
    79c8:	200000f4 	.word	0x200000f4
    79cc:	0bad0000 	.word	0x0bad0000
    79d0:	0000f06c 	.word	0x0000f06c
    79d4:	0000f0ac 	.word	0x0000f0ac
    79d8:	0000d4bc 	.word	0x0000d4bc

000079dc <pin_handler_trigger_uninit>:
{
    79dc:	b510      	push	{r4, lr}
    79de:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    79e0:	f7ff ff44 	bl	786c <pin_in_use_by_te>
    79e4:	b140      	cbz	r0, 79f8 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    79e6:	4620      	mov	r0, r4
    79e8:	f7ff ff60 	bl	78ac <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    79ec:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    79f0:	4b06      	ldr	r3, [pc, #24]	; (7a0c <pin_handler_trigger_uninit+0x30>)
    79f2:	2200      	movs	r2, #0
    79f4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    79f8:	4620      	mov	r0, r4
    79fa:	f7ff ffb5 	bl	7968 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    79fe:	3408      	adds	r4, #8
    7a00:	4b03      	ldr	r3, [pc, #12]	; (7a10 <pin_handler_trigger_uninit+0x34>)
    7a02:	2200      	movs	r2, #0
    7a04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7a08:	bd10      	pop	{r4, pc}
    7a0a:	bf00      	nop
    7a0c:	40006000 	.word	0x40006000
    7a10:	200000f4 	.word	0x200000f4

00007a14 <pin_handler_set>:
{
    7a14:	b570      	push	{r4, r5, r6, lr}
    7a16:	b082      	sub	sp, #8
    7a18:	4606      	mov	r6, r0
    7a1a:	460c      	mov	r4, r1
    7a1c:	4615      	mov	r5, r2
    release_handler(pin);
    7a1e:	f7ff ffa3 	bl	7968 <release_handler>
    if (!handler)
    7a22:	b324      	cbz	r4, 7a6e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    7a24:	4629      	mov	r1, r5
    7a26:	4620      	mov	r0, r4
    7a28:	f7ff ff62 	bl	78f0 <find_handler>
    if (handler_id < 0)
    7a2c:	1e03      	subs	r3, r0, #0
    7a2e:	db13      	blt.n	7a58 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7a30:	4a10      	ldr	r2, [pc, #64]	; (7a74 <pin_handler_set+0x60>)
    7a32:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7a36:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7a3a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7a3c:	025b      	lsls	r3, r3, #9
    7a3e:	b29b      	uxth	r3, r3
    7a40:	f106 0008 	add.w	r0, r6, #8
    7a44:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    7a48:	430b      	orrs	r3, r1
    7a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7a4e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    7a52:	4809      	ldr	r0, [pc, #36]	; (7a78 <pin_handler_set+0x64>)
}
    7a54:	b002      	add	sp, #8
    7a56:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7a58:	f10d 0107 	add.w	r1, sp, #7
    7a5c:	4807      	ldr	r0, [pc, #28]	; (7a7c <pin_handler_set+0x68>)
    7a5e:	f7ff fcff 	bl	7460 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7a62:	4b05      	ldr	r3, [pc, #20]	; (7a78 <pin_handler_set+0x64>)
    7a64:	4298      	cmp	r0, r3
    7a66:	d1f5      	bne.n	7a54 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    7a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a6c:	e7e0      	b.n	7a30 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    7a6e:	4802      	ldr	r0, [pc, #8]	; (7a78 <pin_handler_set+0x64>)
    7a70:	e7f0      	b.n	7a54 <pin_handler_set+0x40>
    7a72:	bf00      	nop
    7a74:	200000f4 	.word	0x200000f4
    7a78:	0bad0000 	.word	0x0bad0000
    7a7c:	20000168 	.word	0x20000168

00007a80 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7a80:	b538      	push	{r3, r4, r5, lr}
    7a82:	4604      	mov	r4, r0
    while (mask)
    7a84:	e018      	b.n	7ab8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    7a86:	fa94 f3a4 	rbit	r3, r4
    7a8a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7a8e:	2201      	movs	r2, #1
    7a90:	409a      	lsls	r2, r3
    7a92:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7a96:	4a0a      	ldr	r2, [pc, #40]	; (7ac0 <gpiote_evt_handle+0x40>)
    7a98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7a9c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7aa0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7aa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7aa8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    7aac:	f005 f9ac 	bl	ce08 <gpiote_polarity_to_trigger>
    7ab0:	4601      	mov	r1, r0
    7ab2:	4628      	mov	r0, r5
    7ab4:	f7ff ff42 	bl	793c <call_handler>
    while (mask)
    7ab8:	2c00      	cmp	r4, #0
    7aba:	d1e4      	bne.n	7a86 <gpiote_evt_handle+0x6>
    }
}
    7abc:	bd38      	pop	{r3, r4, r5, pc}
    7abe:	bf00      	nop
    7ac0:	40006000 	.word	0x40006000

00007ac4 <latch_pending_read_and_check>:
{
    7ac4:	b082      	sub	sp, #8
    7ac6:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7ac8:	4b11      	ldr	r3, [pc, #68]	; (7b10 <latch_pending_read_and_check+0x4c>)
    7aca:	e893 0003 	ldmia.w	r3, {r0, r1}
    7ace:	ab02      	add	r3, sp, #8
    7ad0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7ad4:	4660      	mov	r0, ip
    7ad6:	2300      	movs	r3, #0
    7ad8:	e00b      	b.n	7af2 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    7ada:	aa02      	add	r2, sp, #8
    7adc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7ae0:	f852 2c08 	ldr.w	r2, [r2, #-8]
    7ae4:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7ae8:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7aec:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7af0:	3301      	adds	r3, #1
    7af2:	2b01      	cmp	r3, #1
    7af4:	d9f1      	bls.n	7ada <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7af6:	2300      	movs	r3, #0
    7af8:	2b01      	cmp	r3, #1
    7afa:	d804      	bhi.n	7b06 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    7afc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    7b00:	b922      	cbnz	r2, 7b0c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7b02:	3301      	adds	r3, #1
    7b04:	e7f8      	b.n	7af8 <latch_pending_read_and_check+0x34>
    return false;
    7b06:	2000      	movs	r0, #0
}
    7b08:	b002      	add	sp, #8
    7b0a:	4770      	bx	lr
            return true;
    7b0c:	2001      	movs	r0, #1
    7b0e:	e7fb      	b.n	7b08 <latch_pending_read_and_check+0x44>
    7b10:	0000d3c0 	.word	0x0000d3c0

00007b14 <next_sense_cond_call_handler>:
{
    7b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b18:	4604      	mov	r4, r0
    7b1a:	460d      	mov	r5, r1
    7b1c:	4616      	mov	r6, r2
    if (is_level(trigger))
    7b1e:	4608      	mov	r0, r1
    7b20:	f005 f974 	bl	ce0c <is_level>
    7b24:	bb60      	cbnz	r0, 7b80 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7b26:	2e02      	cmp	r6, #2
    7b28:	f000 80f5 	beq.w	7d16 <next_sense_cond_call_handler+0x202>
    7b2c:	f04f 0802 	mov.w	r8, #2
    switch (port)
    7b30:	0963      	lsrs	r3, r4, #5
    7b32:	f000 80f3 	beq.w	7d1c <next_sense_cond_call_handler+0x208>
    7b36:	2b01      	cmp	r3, #1
    7b38:	f040 80f3 	bne.w	7d22 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    7b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7b40:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7b44:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b46:	f013 0f01 	tst.w	r3, #1
    7b4a:	f000 80ec 	beq.w	7d26 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    7b4e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b52:	0963      	lsrs	r3, r4, #5
    7b54:	f000 80f5 	beq.w	7d42 <next_sense_cond_call_handler+0x22e>
    7b58:	2b01      	cmp	r3, #1
    7b5a:	f000 80f5 	beq.w	7d48 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    7b5e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 7d84 <next_sense_cond_call_handler+0x270>
    7b62:	f240 232e 	movw	r3, #558	; 0x22e
    7b66:	464a      	mov	r2, r9
    7b68:	4987      	ldr	r1, [pc, #540]	; (7d88 <next_sense_cond_call_handler+0x274>)
    7b6a:	4888      	ldr	r0, [pc, #544]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7b6c:	f004 facc 	bl	c108 <assert_print>
    7b70:	f240 212e 	movw	r1, #558	; 0x22e
    7b74:	4648      	mov	r0, r9
    7b76:	f004 fac0 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7b7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7b7e:	e0e4      	b.n	7d4a <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    7b80:	4629      	mov	r1, r5
    7b82:	4620      	mov	r0, r4
    7b84:	f7ff feda 	bl	793c <call_handler>
    switch (port)
    7b88:	0963      	lsrs	r3, r4, #5
    7b8a:	d01f      	beq.n	7bcc <next_sense_cond_call_handler+0xb8>
    7b8c:	2b01      	cmp	r3, #1
    7b8e:	d120      	bne.n	7bd2 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    7b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7b94:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7b98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b9a:	f013 0f01 	tst.w	r3, #1
    7b9e:	d01a      	beq.n	7bd6 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    7ba0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ba4:	0963      	lsrs	r3, r4, #5
    7ba6:	d024      	beq.n	7bf2 <next_sense_cond_call_handler+0xde>
    7ba8:	2b01      	cmp	r3, #1
    7baa:	d025      	beq.n	7bf8 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    7bac:	4f75      	ldr	r7, [pc, #468]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7bae:	f240 232e 	movw	r3, #558	; 0x22e
    7bb2:	463a      	mov	r2, r7
    7bb4:	4974      	ldr	r1, [pc, #464]	; (7d88 <next_sense_cond_call_handler+0x274>)
    7bb6:	4875      	ldr	r0, [pc, #468]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7bb8:	f004 faa6 	bl	c108 <assert_print>
    7bbc:	f240 212e 	movw	r1, #558	; 0x22e
    7bc0:	4638      	mov	r0, r7
    7bc2:	f004 fa9a 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7bca:	e016      	b.n	7bfa <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    7bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bd0:	e7e0      	b.n	7b94 <next_sense_cond_call_handler+0x80>
    switch (port)
    7bd2:	2300      	movs	r3, #0
    7bd4:	e7de      	b.n	7b94 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7bd6:	4d6b      	ldr	r5, [pc, #428]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7bd8:	f240 2329 	movw	r3, #553	; 0x229
    7bdc:	462a      	mov	r2, r5
    7bde:	496c      	ldr	r1, [pc, #432]	; (7d90 <next_sense_cond_call_handler+0x27c>)
    7be0:	486a      	ldr	r0, [pc, #424]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7be2:	f004 fa91 	bl	c108 <assert_print>
    7be6:	f240 2129 	movw	r1, #553	; 0x229
    7bea:	4628      	mov	r0, r5
    7bec:	f004 fa85 	bl	c0fa <assert_post_action>
    7bf0:	e7d6      	b.n	7ba0 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    7bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7bf6:	e000      	b.n	7bfa <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7bf8:	4b66      	ldr	r3, [pc, #408]	; (7d94 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7bfa:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7bfe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7c02:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7c06:	429e      	cmp	r6, r3
    7c08:	f040 80af 	bne.w	7d6a <next_sense_cond_call_handler+0x256>
    switch (port)
    7c0c:	0963      	lsrs	r3, r4, #5
    7c0e:	d01f      	beq.n	7c50 <next_sense_cond_call_handler+0x13c>
    7c10:	2b01      	cmp	r3, #1
    7c12:	d120      	bne.n	7c56 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    7c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c18:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c1c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c1e:	f013 0f01 	tst.w	r3, #1
    7c22:	d01a      	beq.n	7c5a <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    7c24:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c28:	0963      	lsrs	r3, r4, #5
    7c2a:	d024      	beq.n	7c76 <next_sense_cond_call_handler+0x162>
    7c2c:	2b01      	cmp	r3, #1
    7c2e:	d025      	beq.n	7c7c <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    7c30:	4f54      	ldr	r7, [pc, #336]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7c32:	f240 232e 	movw	r3, #558	; 0x22e
    7c36:	463a      	mov	r2, r7
    7c38:	4953      	ldr	r1, [pc, #332]	; (7d88 <next_sense_cond_call_handler+0x274>)
    7c3a:	4854      	ldr	r0, [pc, #336]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7c3c:	f004 fa64 	bl	c108 <assert_print>
    7c40:	f240 212e 	movw	r1, #558	; 0x22e
    7c44:	4638      	mov	r0, r7
    7c46:	f004 fa58 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7c4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7c4e:	e016      	b.n	7c7e <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    7c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c54:	e7e0      	b.n	7c18 <next_sense_cond_call_handler+0x104>
    switch (port)
    7c56:	2300      	movs	r3, #0
    7c58:	e7de      	b.n	7c18 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c5a:	4d4a      	ldr	r5, [pc, #296]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7c5c:	f240 2329 	movw	r3, #553	; 0x229
    7c60:	462a      	mov	r2, r5
    7c62:	494b      	ldr	r1, [pc, #300]	; (7d90 <next_sense_cond_call_handler+0x27c>)
    7c64:	4849      	ldr	r0, [pc, #292]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7c66:	f004 fa4f 	bl	c108 <assert_print>
    7c6a:	f240 2129 	movw	r1, #553	; 0x229
    7c6e:	4628      	mov	r0, r5
    7c70:	f004 fa43 	bl	c0fa <assert_post_action>
    7c74:	e7d6      	b.n	7c24 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    7c76:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7c7a:	e000      	b.n	7c7e <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c7c:	4945      	ldr	r1, [pc, #276]	; (7d94 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7c7e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7c82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7c86:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    7c8e:	0963      	lsrs	r3, r4, #5
    7c90:	d01f      	beq.n	7cd2 <next_sense_cond_call_handler+0x1be>
    7c92:	2b01      	cmp	r3, #1
    7c94:	d120      	bne.n	7cd8 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    7c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c9a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c9e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ca0:	f013 0f01 	tst.w	r3, #1
    7ca4:	d01a      	beq.n	7cdc <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    7ca6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7caa:	0964      	lsrs	r4, r4, #5
    7cac:	d024      	beq.n	7cf8 <next_sense_cond_call_handler+0x1e4>
    7cae:	2c01      	cmp	r4, #1
    7cb0:	d025      	beq.n	7cfe <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    7cb2:	4c34      	ldr	r4, [pc, #208]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7cb4:	f240 232e 	movw	r3, #558	; 0x22e
    7cb8:	4622      	mov	r2, r4
    7cba:	4933      	ldr	r1, [pc, #204]	; (7d88 <next_sense_cond_call_handler+0x274>)
    7cbc:	4833      	ldr	r0, [pc, #204]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7cbe:	f004 fa23 	bl	c108 <assert_print>
    7cc2:	f240 212e 	movw	r1, #558	; 0x22e
    7cc6:	4620      	mov	r0, r4
    7cc8:	f004 fa17 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7ccc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7cd0:	e016      	b.n	7d00 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    7cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cd6:	e7e0      	b.n	7c9a <next_sense_cond_call_handler+0x186>
    switch (port)
    7cd8:	2300      	movs	r3, #0
    7cda:	e7de      	b.n	7c9a <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7cdc:	4d29      	ldr	r5, [pc, #164]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7cde:	f240 2329 	movw	r3, #553	; 0x229
    7ce2:	462a      	mov	r2, r5
    7ce4:	492a      	ldr	r1, [pc, #168]	; (7d90 <next_sense_cond_call_handler+0x27c>)
    7ce6:	4829      	ldr	r0, [pc, #164]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7ce8:	f004 fa0e 	bl	c108 <assert_print>
    7cec:	f240 2129 	movw	r1, #553	; 0x229
    7cf0:	4628      	mov	r0, r5
    7cf2:	f004 fa02 	bl	c0fa <assert_post_action>
    7cf6:	e7d6      	b.n	7ca6 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    7cf8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7cfc:	e000      	b.n	7d00 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cfe:	4925      	ldr	r1, [pc, #148]	; (7d94 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d00:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7d04:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7d08:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d0c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7d10:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    7d14:	e029      	b.n	7d6a <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7d16:	f04f 0803 	mov.w	r8, #3
    7d1a:	e709      	b.n	7b30 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    7d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d20:	e70e      	b.n	7b40 <next_sense_cond_call_handler+0x2c>
    switch (port)
    7d22:	2300      	movs	r3, #0
    7d24:	e70c      	b.n	7b40 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d26:	4f17      	ldr	r7, [pc, #92]	; (7d84 <next_sense_cond_call_handler+0x270>)
    7d28:	f240 2329 	movw	r3, #553	; 0x229
    7d2c:	463a      	mov	r2, r7
    7d2e:	4918      	ldr	r1, [pc, #96]	; (7d90 <next_sense_cond_call_handler+0x27c>)
    7d30:	4816      	ldr	r0, [pc, #88]	; (7d8c <next_sense_cond_call_handler+0x278>)
    7d32:	f004 f9e9 	bl	c108 <assert_print>
    7d36:	f240 2129 	movw	r1, #553	; 0x229
    7d3a:	4638      	mov	r0, r7
    7d3c:	f004 f9dd 	bl	c0fa <assert_post_action>
    7d40:	e705      	b.n	7b4e <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    7d42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d46:	e000      	b.n	7d4a <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d48:	4912      	ldr	r1, [pc, #72]	; (7d94 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d4a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    7d4e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7d52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7d5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7d5e:	2d03      	cmp	r5, #3
    7d60:	d007      	beq.n	7d72 <next_sense_cond_call_handler+0x25e>
    7d62:	2e02      	cmp	r6, #2
    7d64:	d003      	beq.n	7d6e <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7d66:	2e03      	cmp	r6, #3
    7d68:	d008      	beq.n	7d7c <next_sense_cond_call_handler+0x268>
}
    7d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7d6e:	2d01      	cmp	r5, #1
    7d70:	d1f9      	bne.n	7d66 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    7d72:	4629      	mov	r1, r5
    7d74:	4620      	mov	r0, r4
    7d76:	f7ff fde1 	bl	793c <call_handler>
}
    7d7a:	e7f6      	b.n	7d6a <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7d7c:	2d02      	cmp	r5, #2
    7d7e:	d1f4      	bne.n	7d6a <next_sense_cond_call_handler+0x256>
    7d80:	e7f7      	b.n	7d72 <next_sense_cond_call_handler+0x25e>
    7d82:	bf00      	nop
    7d84:	0000ee48 	.word	0x0000ee48
    7d88:	0000d680 	.word	0x0000d680
    7d8c:	0000d4bc 	.word	0x0000d4bc
    7d90:	0000ee7c 	.word	0x0000ee7c
    7d94:	50000300 	.word	0x50000300

00007d98 <port_event_handle>:
{
    7d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d9c:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7d9e:	4a65      	ldr	r2, [pc, #404]	; (7f34 <port_event_handle+0x19c>)
    7da0:	466b      	mov	r3, sp
    7da2:	e892 0003 	ldmia.w	r2, {r0, r1}
    7da6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7daa:	2300      	movs	r3, #0
    7dac:	a802      	add	r0, sp, #8
    7dae:	e00b      	b.n	7dc8 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    7db0:	aa04      	add	r2, sp, #16
    7db2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7db6:	f852 2c10 	ldr.w	r2, [r2, #-16]
    7dba:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7dbe:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7dc2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7dc6:	3301      	adds	r3, #1
    7dc8:	2b01      	cmp	r3, #1
    7dca:	d9f1      	bls.n	7db0 <port_event_handle+0x18>
    7dcc:	e0ad      	b.n	7f2a <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    7dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7dd2:	e07f      	b.n	7ed4 <port_event_handle+0x13c>
    switch (port)
    7dd4:	2300      	movs	r3, #0
    7dd6:	e07d      	b.n	7ed4 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7dd8:	4f57      	ldr	r7, [pc, #348]	; (7f38 <port_event_handle+0x1a0>)
    7dda:	f240 2329 	movw	r3, #553	; 0x229
    7dde:	463a      	mov	r2, r7
    7de0:	4956      	ldr	r1, [pc, #344]	; (7f3c <port_event_handle+0x1a4>)
    7de2:	4857      	ldr	r0, [pc, #348]	; (7f40 <port_event_handle+0x1a8>)
    7de4:	f004 f990 	bl	c108 <assert_print>
    7de8:	f240 2129 	movw	r1, #553	; 0x229
    7dec:	4638      	mov	r0, r7
    7dee:	f004 f984 	bl	c0fa <assert_post_action>
    7df2:	e076      	b.n	7ee2 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    7df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7df8:	e000      	b.n	7dfc <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7dfa:	4b52      	ldr	r3, [pc, #328]	; (7f44 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7dfc:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7e00:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    7e04:	f3c2 4201 	ubfx	r2, r2, #16, #2
    7e08:	4631      	mov	r1, r6
    7e0a:	4620      	mov	r0, r4
    7e0c:	f7ff fe82 	bl	7b14 <next_sense_cond_call_handler>
    switch (port)
    7e10:	0963      	lsrs	r3, r4, #5
    7e12:	d01f      	beq.n	7e54 <port_event_handle+0xbc>
    7e14:	2b01      	cmp	r3, #1
    7e16:	d120      	bne.n	7e5a <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    7e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7e1c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7e20:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e22:	f013 0f01 	tst.w	r3, #1
    7e26:	d01a      	beq.n	7e5e <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    7e28:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e2c:	0964      	lsrs	r4, r4, #5
    7e2e:	d024      	beq.n	7e7a <port_event_handle+0xe2>
    7e30:	2c01      	cmp	r4, #1
    7e32:	d025      	beq.n	7e80 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    7e34:	4c40      	ldr	r4, [pc, #256]	; (7f38 <port_event_handle+0x1a0>)
    7e36:	f240 232e 	movw	r3, #558	; 0x22e
    7e3a:	4622      	mov	r2, r4
    7e3c:	4942      	ldr	r1, [pc, #264]	; (7f48 <port_event_handle+0x1b0>)
    7e3e:	4840      	ldr	r0, [pc, #256]	; (7f40 <port_event_handle+0x1a8>)
    7e40:	f004 f962 	bl	c108 <assert_print>
    7e44:	f240 212e 	movw	r1, #558	; 0x22e
    7e48:	4620      	mov	r0, r4
    7e4a:	f004 f956 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7e4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7e52:	e016      	b.n	7e82 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    7e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e58:	e7e0      	b.n	7e1c <port_event_handle+0x84>
    switch (port)
    7e5a:	2300      	movs	r3, #0
    7e5c:	e7de      	b.n	7e1c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e5e:	4e36      	ldr	r6, [pc, #216]	; (7f38 <port_event_handle+0x1a0>)
    7e60:	f240 2329 	movw	r3, #553	; 0x229
    7e64:	4632      	mov	r2, r6
    7e66:	4935      	ldr	r1, [pc, #212]	; (7f3c <port_event_handle+0x1a4>)
    7e68:	4835      	ldr	r0, [pc, #212]	; (7f40 <port_event_handle+0x1a8>)
    7e6a:	f004 f94d 	bl	c108 <assert_print>
    7e6e:	f240 2129 	movw	r1, #553	; 0x229
    7e72:	4630      	mov	r0, r6
    7e74:	f004 f941 	bl	c0fa <assert_post_action>
    7e78:	e7d6      	b.n	7e28 <port_event_handle+0x90>
        case 0: return NRF_P0;
    7e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7e7e:	e000      	b.n	7e82 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e80:	4a30      	ldr	r2, [pc, #192]	; (7f44 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    7e82:	2301      	movs	r3, #1
    7e84:	40b3      	lsls	r3, r6
    7e86:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    7e8a:	ab04      	add	r3, sp, #16
    7e8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7e90:	f853 4c08 	ldr.w	r4, [r3, #-8]
    7e94:	2c00      	cmp	r4, #0
    7e96:	d03b      	beq.n	7f10 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    7e98:	fa94 f4a4 	rbit	r4, r4
    7e9c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7ea0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7ea4:	f104 0208 	add.w	r2, r4, #8
    7ea8:	4b28      	ldr	r3, [pc, #160]	; (7f4c <port_event_handle+0x1b4>)
    7eaa:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    7eae:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7eb2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    7eb4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7eb8:	a802      	add	r0, sp, #8
    7eba:	2301      	movs	r3, #1
    7ebc:	fa03 f202 	lsl.w	r2, r3, r2
    7ec0:	5c43      	ldrb	r3, [r0, r1]
    7ec2:	ea23 0302 	bic.w	r3, r3, r2
    7ec6:	5443      	strb	r3, [r0, r1]
    switch (port)
    7ec8:	0963      	lsrs	r3, r4, #5
    7eca:	d080      	beq.n	7dce <port_event_handle+0x36>
    7ecc:	2b01      	cmp	r3, #1
    7ece:	d181      	bne.n	7dd4 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    7ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7ed4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ed8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7eda:	f013 0f01 	tst.w	r3, #1
    7ede:	f43f af7b 	beq.w	7dd8 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    7ee2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ee6:	0963      	lsrs	r3, r4, #5
    7ee8:	d084      	beq.n	7df4 <port_event_handle+0x5c>
    7eea:	2b01      	cmp	r3, #1
    7eec:	d085      	beq.n	7dfa <port_event_handle+0x62>
            NRFX_ASSERT(0);
    7eee:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7f38 <port_event_handle+0x1a0>
    7ef2:	f240 232e 	movw	r3, #558	; 0x22e
    7ef6:	4642      	mov	r2, r8
    7ef8:	4913      	ldr	r1, [pc, #76]	; (7f48 <port_event_handle+0x1b0>)
    7efa:	4811      	ldr	r0, [pc, #68]	; (7f40 <port_event_handle+0x1a8>)
    7efc:	f004 f904 	bl	c108 <assert_print>
    7f00:	f240 212e 	movw	r1, #558	; 0x22e
    7f04:	4640      	mov	r0, r8
    7f06:	f004 f8f8 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7f0e:	e775      	b.n	7dfc <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7f10:	3501      	adds	r5, #1
    7f12:	2d01      	cmp	r5, #1
    7f14:	d9b9      	bls.n	7e8a <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7f16:	4b0e      	ldr	r3, [pc, #56]	; (7f50 <port_event_handle+0x1b8>)
    7f18:	2200      	movs	r2, #0
    7f1a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7f1e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    7f22:	a802      	add	r0, sp, #8
    7f24:	f7ff fdce 	bl	7ac4 <latch_pending_read_and_check>
    7f28:	b108      	cbz	r0, 7f2e <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7f2a:	2500      	movs	r5, #0
    7f2c:	e7f1      	b.n	7f12 <port_event_handle+0x17a>
}
    7f2e:	b004      	add	sp, #16
    7f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f34:	0000d3c0 	.word	0x0000d3c0
    7f38:	0000ee48 	.word	0x0000ee48
    7f3c:	0000ee7c 	.word	0x0000ee7c
    7f40:	0000d4bc 	.word	0x0000d4bc
    7f44:	50000300 	.word	0x50000300
    7f48:	0000d680 	.word	0x0000d680
    7f4c:	200000f4 	.word	0x200000f4
    7f50:	40006000 	.word	0x40006000

00007f54 <nrfx_gpiote_input_configure>:
{
    7f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f58:	4604      	mov	r4, r0
    7f5a:	4615      	mov	r5, r2
    7f5c:	461e      	mov	r6, r3
    if (p_input_config)
    7f5e:	2900      	cmp	r1, #0
    7f60:	d064      	beq.n	802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    7f62:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    7f64:	f004 ff3a 	bl	cddc <pin_is_task_output>
    7f68:	2800      	cmp	r0, #0
    7f6a:	f040 80cd 	bne.w	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    switch (port)
    7f6e:	0963      	lsrs	r3, r4, #5
    7f70:	d020      	beq.n	7fb4 <nrfx_gpiote_input_configure+0x60>
    7f72:	2b01      	cmp	r3, #1
    7f74:	d121      	bne.n	7fba <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    7f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7f7a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7f7e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f80:	f013 0f01 	tst.w	r3, #1
    7f84:	d01b      	beq.n	7fbe <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    7f86:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7f8a:	0963      	lsrs	r3, r4, #5
    7f8c:	d025      	beq.n	7fda <nrfx_gpiote_input_configure+0x86>
    7f8e:	2b01      	cmp	r3, #1
    7f90:	d026      	beq.n	7fe0 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    7f92:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>
    7f96:	f240 232e 	movw	r3, #558	; 0x22e
    7f9a:	464a      	mov	r2, r9
    7f9c:	495f      	ldr	r1, [pc, #380]	; (811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    7f9e:	4860      	ldr	r0, [pc, #384]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7fa0:	f004 f8b2 	bl	c108 <assert_print>
    7fa4:	f240 212e 	movw	r1, #558	; 0x22e
    7fa8:	4648      	mov	r0, r9
    7faa:	f004 f8a6 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    7fae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7fb2:	e016      	b.n	7fe2 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    7fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fb8:	e7df      	b.n	7f7a <nrfx_gpiote_input_configure+0x26>
    switch (port)
    7fba:	2300      	movs	r3, #0
    7fbc:	e7dd      	b.n	7f7a <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7fbe:	4f56      	ldr	r7, [pc, #344]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    7fc0:	f240 2329 	movw	r3, #553	; 0x229
    7fc4:	463a      	mov	r2, r7
    7fc6:	4957      	ldr	r1, [pc, #348]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7fc8:	4855      	ldr	r0, [pc, #340]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7fca:	f004 f89d 	bl	c108 <assert_print>
    7fce:	f240 2129 	movw	r1, #553	; 0x229
    7fd2:	4638      	mov	r0, r7
    7fd4:	f004 f891 	bl	c0fa <assert_post_action>
    7fd8:	e7d5      	b.n	7f86 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    7fda:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7fde:	e000      	b.n	7fe2 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fe0:	4951      	ldr	r1, [pc, #324]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7fe2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    7fe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7fea:	f1b8 0f00 	cmp.w	r8, #0
    7fee:	d03f      	beq.n	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    7ff0:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7ff2:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    7ff6:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7ffa:	f1b8 0f00 	cmp.w	r8, #0
    7ffe:	d039      	beq.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    8000:	f898 2000 	ldrb.w	r2, [r8]
    8004:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8006:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    8008:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    800c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8010:	4a46      	ldr	r2, [pc, #280]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    8012:	f104 0108 	add.w	r1, r4, #8
    8016:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    801a:	f023 0302 	bic.w	r3, r3, #2
    801e:	b29b      	uxth	r3, r3
    8020:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8024:	f043 0301 	orr.w	r3, r3, #1
    8028:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    802c:	b1bd      	cbz	r5, 805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    802e:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8030:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    8034:	4620      	mov	r0, r4
    8036:	f7ff fc2f 	bl	7898 <pin_is_output>
    803a:	b1e8      	cbz	r0, 8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
            if (use_evt)
    803c:	f1b8 0f00 	cmp.w	r8, #0
    8040:	d164      	bne.n	810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8042:	4a3a      	ldr	r2, [pc, #232]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    8044:	f104 0108 	add.w	r1, r4, #8
    8048:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    804c:	f023 031c 	bic.w	r3, r3, #28
    8050:	b29b      	uxth	r3, r3
    8052:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8056:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    805a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    805e:	2e00      	cmp	r6, #0
    8060:	d058      	beq.n	8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8062:	6872      	ldr	r2, [r6, #4]
    8064:	6831      	ldr	r1, [r6, #0]
    8066:	4620      	mov	r0, r4
    8068:	f7ff fcd4 	bl	7a14 <pin_handler_set>
}
    806c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8070:	2200      	movs	r2, #0
    8072:	e7be      	b.n	7ff2 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8074:	2200      	movs	r2, #0
    8076:	e7c6      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8078:	4a2c      	ldr	r2, [pc, #176]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    807a:	f104 0108 	add.w	r1, r4, #8
    807e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8082:	f023 0320 	bic.w	r3, r3, #32
    8086:	04db      	lsls	r3, r3, #19
    8088:	0cdb      	lsrs	r3, r3, #19
    808a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    808e:	f1b8 0f00 	cmp.w	r8, #0
    8092:	d0d6      	beq.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
                if (!edge)
    8094:	2f03      	cmp	r7, #3
    8096:	d83b      	bhi.n	8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8098:	686b      	ldr	r3, [r5, #4]
    809a:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    809c:	b937      	cbnz	r7, 80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    p_reg->CONFIG[idx] = 0;
    809e:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    80a2:	4b23      	ldr	r3, [pc, #140]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    80a4:	2200      	movs	r2, #0
    80a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    80aa:	e7ca      	b.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    80ac:	4638      	mov	r0, r7
    80ae:	f004 feac 	bl	ce0a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    80b2:	4b1f      	ldr	r3, [pc, #124]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    80b4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    80b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    80bc:	f021 0103 	bic.w	r1, r1, #3
    80c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    80c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    80c8:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    80cc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    80d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    80d4:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    80d8:	0221      	lsls	r1, r4, #8
    80da:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    80de:	0400      	lsls	r0, r0, #16
    80e0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    80e4:	4301      	orrs	r1, r0
    80e6:	ea4c 0101 	orr.w	r1, ip, r1
    80ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    80ee:	036b      	lsls	r3, r5, #13
    80f0:	b29b      	uxth	r3, r3
    80f2:	4a0e      	ldr	r2, [pc, #56]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    80f4:	f104 0108 	add.w	r1, r4, #8
    80f8:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    80fc:	4303      	orrs	r3, r0
    80fe:	f043 0320 	orr.w	r3, r3, #32
    8102:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    8106:	e79c      	b.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
            return NRFX_ERROR_INVALID_PARAM;
    8108:	480a      	ldr	r0, [pc, #40]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    810a:	e7af      	b.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
                return NRFX_ERROR_INVALID_PARAM;
    810c:	4809      	ldr	r0, [pc, #36]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    810e:	e7ad      	b.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
                    return NRFX_ERROR_INVALID_PARAM;
    8110:	4808      	ldr	r0, [pc, #32]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    8112:	e7ab      	b.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
        err = NRFX_SUCCESS;
    8114:	4808      	ldr	r0, [pc, #32]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    8116:	e7a9      	b.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    8118:	0000ee48 	.word	0x0000ee48
    811c:	0000d680 	.word	0x0000d680
    8120:	0000d4bc 	.word	0x0000d4bc
    8124:	0000ee7c 	.word	0x0000ee7c
    8128:	50000300 	.word	0x50000300
    812c:	200000f4 	.word	0x200000f4
    8130:	40006000 	.word	0x40006000
    8134:	0bad0004 	.word	0x0bad0004
    8138:	0bad0000 	.word	0x0bad0000

0000813c <nrfx_gpiote_output_configure>:
{
    813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8140:	4604      	mov	r4, r0
    8142:	4615      	mov	r5, r2
    if (p_config)
    8144:	2900      	cmp	r1, #0
    8146:	f000 8086 	beq.w	8256 <nrfx_gpiote_output_configure+0x11a>
    814a:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    814c:	f004 fe55 	bl	cdfa <pin_is_input>
    8150:	b128      	cbz	r0, 815e <nrfx_gpiote_output_configure+0x22>
    8152:	4620      	mov	r0, r4
    8154:	f7ff fb8a 	bl	786c <pin_in_use_by_te>
    8158:	2800      	cmp	r0, #0
    815a:	f040 80ce 	bne.w	82fa <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    815e:	4620      	mov	r0, r4
    8160:	f7ff fb8e 	bl	7880 <pin_has_trigger>
    8164:	b118      	cbz	r0, 816e <nrfx_gpiote_output_configure+0x32>
    8166:	787b      	ldrb	r3, [r7, #1]
    8168:	2b01      	cmp	r3, #1
    816a:	f000 80c8 	beq.w	82fe <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    816e:	f107 0901 	add.w	r9, r7, #1
    8172:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    8176:	0963      	lsrs	r3, r4, #5
    8178:	d020      	beq.n	81bc <nrfx_gpiote_output_configure+0x80>
    817a:	2b01      	cmp	r3, #1
    817c:	d121      	bne.n	81c2 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    817e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8182:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8186:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8188:	f013 0f01 	tst.w	r3, #1
    818c:	d01b      	beq.n	81c6 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    818e:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8192:	0963      	lsrs	r3, r4, #5
    8194:	d025      	beq.n	81e2 <nrfx_gpiote_output_configure+0xa6>
    8196:	2b01      	cmp	r3, #1
    8198:	d026      	beq.n	81e8 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    819a:	f8df a170 	ldr.w	sl, [pc, #368]	; 830c <nrfx_gpiote_output_configure+0x1d0>
    819e:	f240 232e 	movw	r3, #558	; 0x22e
    81a2:	4652      	mov	r2, sl
    81a4:	495a      	ldr	r1, [pc, #360]	; (8310 <nrfx_gpiote_output_configure+0x1d4>)
    81a6:	485b      	ldr	r0, [pc, #364]	; (8314 <nrfx_gpiote_output_configure+0x1d8>)
    81a8:	f003 ffae 	bl	c108 <assert_print>
    81ac:	f240 212e 	movw	r1, #558	; 0x22e
    81b0:	4650      	mov	r0, sl
    81b2:	f003 ffa2 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    81b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81ba:	e016      	b.n	81ea <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    81bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    81c0:	e7df      	b.n	8182 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    81c2:	2300      	movs	r3, #0
    81c4:	e7dd      	b.n	8182 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81c6:	4e51      	ldr	r6, [pc, #324]	; (830c <nrfx_gpiote_output_configure+0x1d0>)
    81c8:	f240 2329 	movw	r3, #553	; 0x229
    81cc:	4632      	mov	r2, r6
    81ce:	4952      	ldr	r1, [pc, #328]	; (8318 <nrfx_gpiote_output_configure+0x1dc>)
    81d0:	4850      	ldr	r0, [pc, #320]	; (8314 <nrfx_gpiote_output_configure+0x1d8>)
    81d2:	f003 ff99 	bl	c108 <assert_print>
    81d6:	f240 2129 	movw	r1, #553	; 0x229
    81da:	4630      	mov	r0, r6
    81dc:	f003 ff8d 	bl	c0fa <assert_post_action>
    81e0:	e7d5      	b.n	818e <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    81e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81e6:	e000      	b.n	81ea <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81e8:	4a4c      	ldr	r2, [pc, #304]	; (831c <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    81ea:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    81ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    81f2:	f1b9 0f00 	cmp.w	r9, #0
    81f6:	d04b      	beq.n	8290 <nrfx_gpiote_output_configure+0x154>
    81f8:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    81fa:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    81fe:	f1b8 0f00 	cmp.w	r8, #0
    8202:	d047      	beq.n	8294 <nrfx_gpiote_output_configure+0x158>
    8204:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8206:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8208:	2f00      	cmp	r7, #0
    820a:	d045      	beq.n	8298 <nrfx_gpiote_output_configure+0x15c>
    820c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8210:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    8212:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8216:	f1b9 0f00 	cmp.w	r9, #0
    821a:	d03f      	beq.n	829c <nrfx_gpiote_output_configure+0x160>
    821c:	787b      	ldrb	r3, [r7, #1]
    821e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8220:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8224:	f1b8 0f00 	cmp.w	r8, #0
    8228:	d03a      	beq.n	82a0 <nrfx_gpiote_output_configure+0x164>
    822a:	78b8      	ldrb	r0, [r7, #2]
    822c:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    822e:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8230:	2f00      	cmp	r7, #0
    8232:	d037      	beq.n	82a4 <nrfx_gpiote_output_configure+0x168>
    8234:	7838      	ldrb	r0, [r7, #0]
    8236:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8238:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    823a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    823c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8240:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8244:	4a36      	ldr	r2, [pc, #216]	; (8320 <nrfx_gpiote_output_configure+0x1e4>)
    8246:	f104 0108 	add.w	r1, r4, #8
    824a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    824e:	f043 0303 	orr.w	r3, r3, #3
    8252:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    8256:	2d00      	cmp	r5, #0
    8258:	d053      	beq.n	8302 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    825a:	4620      	mov	r0, r4
    825c:	f004 fdcd 	bl	cdfa <pin_is_input>
    8260:	2800      	cmp	r0, #0
    8262:	d150      	bne.n	8306 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    8264:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    8266:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    826a:	4a2e      	ldr	r2, [pc, #184]	; (8324 <nrfx_gpiote_output_configure+0x1e8>)
    826c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8270:	492b      	ldr	r1, [pc, #172]	; (8320 <nrfx_gpiote_output_configure+0x1e4>)
    8272:	f104 0008 	add.w	r0, r4, #8
    8276:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    827a:	f022 0220 	bic.w	r2, r2, #32
    827e:	04d2      	lsls	r2, r2, #19
    8280:	0cd2      	lsrs	r2, r2, #19
    8282:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8286:	786a      	ldrb	r2, [r5, #1]
    8288:	b972      	cbnz	r2, 82a8 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    828a:	4827      	ldr	r0, [pc, #156]	; (8328 <nrfx_gpiote_output_configure+0x1ec>)
}
    828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8290:	2300      	movs	r3, #0
    8292:	e7b2      	b.n	81fa <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8294:	2000      	movs	r0, #0
    8296:	e7b6      	b.n	8206 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8298:	2000      	movs	r0, #0
    829a:	e7b9      	b.n	8210 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    829c:	2300      	movs	r3, #0
    829e:	e7bf      	b.n	8220 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    82a0:	2000      	movs	r0, #0
    82a2:	e7c4      	b.n	822e <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    82a4:	2000      	movs	r0, #0
    82a6:	e7c7      	b.n	8238 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    82a8:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    82aa:	481e      	ldr	r0, [pc, #120]	; (8324 <nrfx_gpiote_output_configure+0x1e8>)
    82ac:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    82b0:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    82b4:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    82b8:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    82bc:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    82c0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    82c4:	0221      	lsls	r1, r4, #8
    82c6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    82ca:	0412      	lsls	r2, r2, #16
    82cc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    82d0:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    82d2:	0539      	lsls	r1, r7, #20
    82d4:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    82d8:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    82da:	4332      	orrs	r2, r6
    82dc:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    82e0:	035b      	lsls	r3, r3, #13
    82e2:	b29b      	uxth	r3, r3
    82e4:	4a0e      	ldr	r2, [pc, #56]	; (8320 <nrfx_gpiote_output_configure+0x1e4>)
    82e6:	3408      	adds	r4, #8
    82e8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    82ec:	430b      	orrs	r3, r1
    82ee:	f043 0320 	orr.w	r3, r3, #32
    82f2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    82f6:	480c      	ldr	r0, [pc, #48]	; (8328 <nrfx_gpiote_output_configure+0x1ec>)
    82f8:	e7c8      	b.n	828c <nrfx_gpiote_output_configure+0x150>
    82fa:	480c      	ldr	r0, [pc, #48]	; (832c <nrfx_gpiote_output_configure+0x1f0>)
    82fc:	e7c6      	b.n	828c <nrfx_gpiote_output_configure+0x150>
    82fe:	480b      	ldr	r0, [pc, #44]	; (832c <nrfx_gpiote_output_configure+0x1f0>)
    8300:	e7c4      	b.n	828c <nrfx_gpiote_output_configure+0x150>
    8302:	4809      	ldr	r0, [pc, #36]	; (8328 <nrfx_gpiote_output_configure+0x1ec>)
    8304:	e7c2      	b.n	828c <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    8306:	4809      	ldr	r0, [pc, #36]	; (832c <nrfx_gpiote_output_configure+0x1f0>)
    8308:	e7c0      	b.n	828c <nrfx_gpiote_output_configure+0x150>
    830a:	bf00      	nop
    830c:	0000ee48 	.word	0x0000ee48
    8310:	0000d680 	.word	0x0000d680
    8314:	0000d4bc 	.word	0x0000d4bc
    8318:	0000ee7c 	.word	0x0000ee7c
    831c:	50000300 	.word	0x50000300
    8320:	200000f4 	.word	0x200000f4
    8324:	40006000 	.word	0x40006000
    8328:	0bad0000 	.word	0x0bad0000
    832c:	0bad0004 	.word	0x0bad0004

00008330 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8330:	4b01      	ldr	r3, [pc, #4]	; (8338 <nrfx_gpiote_global_callback_set+0x8>)
    8332:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    8334:	60d9      	str	r1, [r3, #12]
}
    8336:	4770      	bx	lr
    8338:	200000f4 	.word	0x200000f4

0000833c <nrfx_gpiote_channel_get>:
{
    833c:	b570      	push	{r4, r5, r6, lr}
    833e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    8340:	460d      	mov	r5, r1
    8342:	b159      	cbz	r1, 835c <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    8344:	4620      	mov	r0, r4
    8346:	f7ff fa91 	bl	786c <pin_in_use_by_te>
    834a:	b1a8      	cbz	r0, 8378 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    834c:	3408      	adds	r4, #8
    834e:	4b0b      	ldr	r3, [pc, #44]	; (837c <nrfx_gpiote_channel_get+0x40>)
    8350:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8354:	0b5b      	lsrs	r3, r3, #13
    8356:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    8358:	4809      	ldr	r0, [pc, #36]	; (8380 <nrfx_gpiote_channel_get+0x44>)
}
    835a:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    835c:	4e09      	ldr	r6, [pc, #36]	; (8384 <nrfx_gpiote_channel_get+0x48>)
    835e:	f240 2335 	movw	r3, #565	; 0x235
    8362:	4632      	mov	r2, r6
    8364:	4908      	ldr	r1, [pc, #32]	; (8388 <nrfx_gpiote_channel_get+0x4c>)
    8366:	4809      	ldr	r0, [pc, #36]	; (838c <nrfx_gpiote_channel_get+0x50>)
    8368:	f003 fece 	bl	c108 <assert_print>
    836c:	f240 2135 	movw	r1, #565	; 0x235
    8370:	4630      	mov	r0, r6
    8372:	f003 fec2 	bl	c0fa <assert_post_action>
    8376:	e7e5      	b.n	8344 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    8378:	4805      	ldr	r0, [pc, #20]	; (8390 <nrfx_gpiote_channel_get+0x54>)
    837a:	e7ee      	b.n	835a <nrfx_gpiote_channel_get+0x1e>
    837c:	200000f4 	.word	0x200000f4
    8380:	0bad0000 	.word	0x0bad0000
    8384:	0000f06c 	.word	0x0000f06c
    8388:	0000f0c0 	.word	0x0000f0c0
    838c:	0000d4bc 	.word	0x0000d4bc
    8390:	0bad0004 	.word	0x0bad0004

00008394 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8394:	4b10      	ldr	r3, [pc, #64]	; (83d8 <nrfx_gpiote_init+0x44>)
    8396:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    839a:	b10b      	cbz	r3, 83a0 <nrfx_gpiote_init+0xc>
        return err_code;
    839c:	480f      	ldr	r0, [pc, #60]	; (83dc <nrfx_gpiote_init+0x48>)
}
    839e:	4770      	bx	lr
{
    83a0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    83a2:	4c0d      	ldr	r4, [pc, #52]	; (83d8 <nrfx_gpiote_init+0x44>)
    83a4:	2260      	movs	r2, #96	; 0x60
    83a6:	2100      	movs	r1, #0
    83a8:	f104 0010 	add.w	r0, r4, #16
    83ac:	f004 f873 	bl	c496 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    83b0:	2006      	movs	r0, #6
    83b2:	f7fc f851 	bl	4458 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    83b6:	4b0a      	ldr	r3, [pc, #40]	; (83e0 <nrfx_gpiote_init+0x4c>)
    83b8:	2200      	movs	r2, #0
    83ba:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    83be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    83c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    83c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    83ca:	2301      	movs	r3, #1
    83cc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    83d0:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    83d2:	4804      	ldr	r0, [pc, #16]	; (83e4 <nrfx_gpiote_init+0x50>)
}
    83d4:	bd10      	pop	{r4, pc}
    83d6:	bf00      	nop
    83d8:	200000f4 	.word	0x200000f4
    83dc:	0bad0005 	.word	0x0bad0005
    83e0:	40006000 	.word	0x40006000
    83e4:	0bad0000 	.word	0x0bad0000

000083e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    83e8:	4b03      	ldr	r3, [pc, #12]	; (83f8 <nrfx_gpiote_is_init+0x10>)
    83ea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    83ee:	3800      	subs	r0, #0
    83f0:	bf18      	it	ne
    83f2:	2001      	movne	r0, #1
    83f4:	4770      	bx	lr
    83f6:	bf00      	nop
    83f8:	200000f4 	.word	0x200000f4

000083fc <nrfx_gpiote_channel_free>:
{
    83fc:	b508      	push	{r3, lr}
    83fe:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8400:	4801      	ldr	r0, [pc, #4]	; (8408 <nrfx_gpiote_channel_free+0xc>)
    8402:	f7ff f855 	bl	74b0 <nrfx_flag32_free>
}
    8406:	bd08      	pop	{r3, pc}
    8408:	20000164 	.word	0x20000164

0000840c <nrfx_gpiote_channel_alloc>:
{
    840c:	b508      	push	{r3, lr}
    840e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8410:	4801      	ldr	r0, [pc, #4]	; (8418 <nrfx_gpiote_channel_alloc+0xc>)
    8412:	f7ff f825 	bl	7460 <nrfx_flag32_alloc>
}
    8416:	bd08      	pop	{r3, pc}
    8418:	20000164 	.word	0x20000164

0000841c <nrfx_gpiote_trigger_enable>:
{
    841c:	b570      	push	{r4, r5, r6, lr}
    841e:	4604      	mov	r4, r0
    8420:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    8422:	f7ff fa2d 	bl	7880 <pin_has_trigger>
    8426:	b1b8      	cbz	r0, 8458 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8428:	4620      	mov	r0, r4
    842a:	f7ff fa1f 	bl	786c <pin_in_use_by_te>
    842e:	b118      	cbz	r0, 8438 <nrfx_gpiote_trigger_enable+0x1c>
    8430:	4620      	mov	r0, r4
    8432:	f004 fce2 	bl	cdfa <pin_is_input>
    8436:	b9e8      	cbnz	r0, 8474 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    8438:	2d00      	cmp	r5, #0
    843a:	d04c      	beq.n	84d6 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    843c:	f104 0308 	add.w	r3, r4, #8
    8440:	4a70      	ldr	r2, [pc, #448]	; (8604 <nrfx_gpiote_trigger_enable+0x1e8>)
    8442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8446:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    844a:	2b04      	cmp	r3, #4
    844c:	f000 8092 	beq.w	8574 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8450:	2b05      	cmp	r3, #5
    8452:	d14e      	bne.n	84f2 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8454:	2602      	movs	r6, #2
    8456:	e08e      	b.n	8576 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    8458:	4e6b      	ldr	r6, [pc, #428]	; (8608 <nrfx_gpiote_trigger_enable+0x1ec>)
    845a:	f240 33df 	movw	r3, #991	; 0x3df
    845e:	4632      	mov	r2, r6
    8460:	496a      	ldr	r1, [pc, #424]	; (860c <nrfx_gpiote_trigger_enable+0x1f0>)
    8462:	486b      	ldr	r0, [pc, #428]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    8464:	f003 fe50 	bl	c108 <assert_print>
    8468:	f240 31df 	movw	r1, #991	; 0x3df
    846c:	4630      	mov	r0, r6
    846e:	f003 fe44 	bl	c0fa <assert_post_action>
    8472:	e7d9      	b.n	8428 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    8474:	4620      	mov	r0, r4
    8476:	f7ff fa19 	bl	78ac <pin_te_get>
    847a:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    847c:	2807      	cmp	r0, #7
    847e:	d81c      	bhi.n	84ba <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8480:	00a3      	lsls	r3, r4, #2
    8482:	f503 7380 	add.w	r3, r3, #256	; 0x100
    8486:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    8488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    848c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8490:	2200      	movs	r2, #0
    8492:	601a      	str	r2, [r3, #0]
    8494:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8496:	4a5f      	ldr	r2, [pc, #380]	; (8614 <nrfx_gpiote_trigger_enable+0x1f8>)
    8498:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    849c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    84a0:	f043 0301 	orr.w	r3, r3, #1
    84a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    84a8:	2d00      	cmp	r5, #0
    84aa:	f000 80a9 	beq.w	8600 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    84ae:	2001      	movs	r0, #1
    84b0:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    84b4:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    84b8:	e0a2      	b.n	8600 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    84ba:	4e57      	ldr	r6, [pc, #348]	; (8618 <nrfx_gpiote_trigger_enable+0x1fc>)
    84bc:	f44f 7323 	mov.w	r3, #652	; 0x28c
    84c0:	4632      	mov	r2, r6
    84c2:	4956      	ldr	r1, [pc, #344]	; (861c <nrfx_gpiote_trigger_enable+0x200>)
    84c4:	4852      	ldr	r0, [pc, #328]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    84c6:	f003 fe1f 	bl	c108 <assert_print>
    84ca:	f44f 7123 	mov.w	r1, #652	; 0x28c
    84ce:	4630      	mov	r0, r6
    84d0:	f003 fe13 	bl	c0fa <assert_post_action>
    84d4:	e7d4      	b.n	8480 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    84d6:	4d4c      	ldr	r5, [pc, #304]	; (8608 <nrfx_gpiote_trigger_enable+0x1ec>)
    84d8:	f240 33ee 	movw	r3, #1006	; 0x3ee
    84dc:	462a      	mov	r2, r5
    84de:	4950      	ldr	r1, [pc, #320]	; (8620 <nrfx_gpiote_trigger_enable+0x204>)
    84e0:	484b      	ldr	r0, [pc, #300]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    84e2:	f003 fe11 	bl	c108 <assert_print>
    84e6:	f240 31ee 	movw	r1, #1006	; 0x3ee
    84ea:	4628      	mov	r0, r5
    84ec:	f003 fe05 	bl	c0fa <assert_post_action>
    84f0:	e7a4      	b.n	843c <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    84f2:	0963      	lsrs	r3, r4, #5
    84f4:	d01f      	beq.n	8536 <nrfx_gpiote_trigger_enable+0x11a>
    84f6:	2b01      	cmp	r3, #1
    84f8:	d120      	bne.n	853c <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    84fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    84fe:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8502:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8504:	f013 0f01 	tst.w	r3, #1
    8508:	d01a      	beq.n	8540 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    850a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    850e:	0963      	lsrs	r3, r4, #5
    8510:	d024      	beq.n	855c <nrfx_gpiote_trigger_enable+0x140>
    8512:	2b01      	cmp	r3, #1
    8514:	d025      	beq.n	8562 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    8516:	4e43      	ldr	r6, [pc, #268]	; (8624 <nrfx_gpiote_trigger_enable+0x208>)
    8518:	f240 232e 	movw	r3, #558	; 0x22e
    851c:	4632      	mov	r2, r6
    851e:	4942      	ldr	r1, [pc, #264]	; (8628 <nrfx_gpiote_trigger_enable+0x20c>)
    8520:	483b      	ldr	r0, [pc, #236]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    8522:	f003 fdf1 	bl	c108 <assert_print>
    8526:	f240 212e 	movw	r1, #558	; 0x22e
    852a:	4630      	mov	r0, r6
    852c:	f003 fde5 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    8530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8534:	e016      	b.n	8564 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    8536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    853a:	e7e0      	b.n	84fe <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    853c:	2300      	movs	r3, #0
    853e:	e7de      	b.n	84fe <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8540:	4d38      	ldr	r5, [pc, #224]	; (8624 <nrfx_gpiote_trigger_enable+0x208>)
    8542:	f240 2329 	movw	r3, #553	; 0x229
    8546:	462a      	mov	r2, r5
    8548:	4938      	ldr	r1, [pc, #224]	; (862c <nrfx_gpiote_trigger_enable+0x210>)
    854a:	4831      	ldr	r0, [pc, #196]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    854c:	f003 fddc 	bl	c108 <assert_print>
    8550:	f240 2129 	movw	r1, #553	; 0x229
    8554:	4628      	mov	r0, r5
    8556:	f003 fdd0 	bl	c0fa <assert_post_action>
    855a:	e7d6      	b.n	850a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    855c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8560:	e000      	b.n	8564 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8562:	4b33      	ldr	r3, [pc, #204]	; (8630 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    8564:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8568:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    856a:	f013 0f01 	tst.w	r3, #1
    856e:	d024      	beq.n	85ba <nrfx_gpiote_trigger_enable+0x19e>
    8570:	2603      	movs	r6, #3
    8572:	e000      	b.n	8576 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8574:	2603      	movs	r6, #3
    switch (port)
    8576:	0963      	lsrs	r3, r4, #5
    8578:	d021      	beq.n	85be <nrfx_gpiote_trigger_enable+0x1a2>
    857a:	2b01      	cmp	r3, #1
    857c:	d122      	bne.n	85c4 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    857e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8582:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8586:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8588:	f013 0f01 	tst.w	r3, #1
    858c:	d01c      	beq.n	85c8 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    858e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8592:	0964      	lsrs	r4, r4, #5
    8594:	d026      	beq.n	85e4 <nrfx_gpiote_trigger_enable+0x1c8>
    8596:	2c01      	cmp	r4, #1
    8598:	d027      	beq.n	85ea <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    859a:	4c22      	ldr	r4, [pc, #136]	; (8624 <nrfx_gpiote_trigger_enable+0x208>)
    859c:	f240 232e 	movw	r3, #558	; 0x22e
    85a0:	4622      	mov	r2, r4
    85a2:	4921      	ldr	r1, [pc, #132]	; (8628 <nrfx_gpiote_trigger_enable+0x20c>)
    85a4:	481a      	ldr	r0, [pc, #104]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    85a6:	f003 fdaf 	bl	c108 <assert_print>
    85aa:	f240 212e 	movw	r1, #558	; 0x22e
    85ae:	4620      	mov	r0, r4
    85b0:	f003 fda3 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    85b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    85b8:	e018      	b.n	85ec <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    85ba:	2602      	movs	r6, #2
    85bc:	e7db      	b.n	8576 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    85be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    85c2:	e7de      	b.n	8582 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    85c4:	2300      	movs	r3, #0
    85c6:	e7dc      	b.n	8582 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85c8:	4d16      	ldr	r5, [pc, #88]	; (8624 <nrfx_gpiote_trigger_enable+0x208>)
    85ca:	f240 2329 	movw	r3, #553	; 0x229
    85ce:	462a      	mov	r2, r5
    85d0:	4916      	ldr	r1, [pc, #88]	; (862c <nrfx_gpiote_trigger_enable+0x210>)
    85d2:	480f      	ldr	r0, [pc, #60]	; (8610 <nrfx_gpiote_trigger_enable+0x1f4>)
    85d4:	f003 fd98 	bl	c108 <assert_print>
    85d8:	f240 2129 	movw	r1, #553	; 0x229
    85dc:	4628      	mov	r0, r5
    85de:	f003 fd8c 	bl	c0fa <assert_post_action>
    85e2:	e7d4      	b.n	858e <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    85e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    85e8:	e000      	b.n	85ec <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85ea:	4911      	ldr	r1, [pc, #68]	; (8630 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    85ec:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    85f0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    85f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    85f8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    85fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    8600:	bd70      	pop	{r4, r5, r6, pc}
    8602:	bf00      	nop
    8604:	200000f4 	.word	0x200000f4
    8608:	0000f06c 	.word	0x0000f06c
    860c:	0000f110 	.word	0x0000f110
    8610:	0000d4bc 	.word	0x0000d4bc
    8614:	40006000 	.word	0x40006000
    8618:	0000f0cc 	.word	0x0000f0cc
    861c:	0000f104 	.word	0x0000f104
    8620:	0000f128 	.word	0x0000f128
    8624:	0000ee48 	.word	0x0000ee48
    8628:	0000d680 	.word	0x0000d680
    862c:	0000ee7c 	.word	0x0000ee7c
    8630:	50000300 	.word	0x50000300

00008634 <nrfx_gpiote_trigger_disable>:
{
    8634:	b538      	push	{r3, r4, r5, lr}
    8636:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8638:	f7ff f918 	bl	786c <pin_in_use_by_te>
    863c:	b1a0      	cbz	r0, 8668 <nrfx_gpiote_trigger_disable+0x34>
    863e:	4620      	mov	r0, r4
    8640:	f004 fbdb 	bl	cdfa <pin_is_input>
    8644:	b180      	cbz	r0, 8668 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    8646:	4620      	mov	r0, r4
    8648:	f7ff f930 	bl	78ac <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    864c:	2201      	movs	r2, #1
    864e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    8650:	4b26      	ldr	r3, [pc, #152]	; (86ec <nrfx_gpiote_trigger_disable+0xb8>)
    8652:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8656:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    865a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    865e:	f022 0203 	bic.w	r2, r2, #3
    8662:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    8666:	e040      	b.n	86ea <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    8668:	0963      	lsrs	r3, r4, #5
    866a:	d01f      	beq.n	86ac <nrfx_gpiote_trigger_disable+0x78>
    866c:	2b01      	cmp	r3, #1
    866e:	d120      	bne.n	86b2 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    8670:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8674:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8678:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    867a:	f013 0f01 	tst.w	r3, #1
    867e:	d01a      	beq.n	86b6 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    8680:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8684:	0964      	lsrs	r4, r4, #5
    8686:	d024      	beq.n	86d2 <nrfx_gpiote_trigger_disable+0x9e>
    8688:	2c01      	cmp	r4, #1
    868a:	d025      	beq.n	86d8 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    868c:	4c18      	ldr	r4, [pc, #96]	; (86f0 <nrfx_gpiote_trigger_disable+0xbc>)
    868e:	f240 232e 	movw	r3, #558	; 0x22e
    8692:	4622      	mov	r2, r4
    8694:	4917      	ldr	r1, [pc, #92]	; (86f4 <nrfx_gpiote_trigger_disable+0xc0>)
    8696:	4818      	ldr	r0, [pc, #96]	; (86f8 <nrfx_gpiote_trigger_disable+0xc4>)
    8698:	f003 fd36 	bl	c108 <assert_print>
    869c:	f240 212e 	movw	r1, #558	; 0x22e
    86a0:	4620      	mov	r0, r4
    86a2:	f003 fd2a 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    86a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    86aa:	e016      	b.n	86da <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    86ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86b0:	e7e0      	b.n	8674 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    86b2:	2300      	movs	r3, #0
    86b4:	e7de      	b.n	8674 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86b6:	4d0e      	ldr	r5, [pc, #56]	; (86f0 <nrfx_gpiote_trigger_disable+0xbc>)
    86b8:	f240 2329 	movw	r3, #553	; 0x229
    86bc:	462a      	mov	r2, r5
    86be:	490f      	ldr	r1, [pc, #60]	; (86fc <nrfx_gpiote_trigger_disable+0xc8>)
    86c0:	480d      	ldr	r0, [pc, #52]	; (86f8 <nrfx_gpiote_trigger_disable+0xc4>)
    86c2:	f003 fd21 	bl	c108 <assert_print>
    86c6:	f240 2129 	movw	r1, #553	; 0x229
    86ca:	4628      	mov	r0, r5
    86cc:	f003 fd15 	bl	c0fa <assert_post_action>
    86d0:	e7d6      	b.n	8680 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    86d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    86d6:	e000      	b.n	86da <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86d8:	4909      	ldr	r1, [pc, #36]	; (8700 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    86da:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    86de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    86e2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    86e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86ea:	bd38      	pop	{r3, r4, r5, pc}
    86ec:	40006000 	.word	0x40006000
    86f0:	0000ee48 	.word	0x0000ee48
    86f4:	0000d680 	.word	0x0000d680
    86f8:	0000d4bc 	.word	0x0000d4bc
    86fc:	0000ee7c 	.word	0x0000ee7c
    8700:	50000300 	.word	0x50000300

00008704 <nrfx_gpiote_pin_uninit>:
{
    8704:	b538      	push	{r3, r4, r5, lr}
    8706:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8708:	f7ff f8a6 	bl	7858 <pin_in_use>
    870c:	b908      	cbnz	r0, 8712 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    870e:	4824      	ldr	r0, [pc, #144]	; (87a0 <nrfx_gpiote_pin_uninit+0x9c>)
}
    8710:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    8712:	4620      	mov	r0, r4
    8714:	f7ff ff8e 	bl	8634 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8718:	4620      	mov	r0, r4
    871a:	f7ff f95f 	bl	79dc <pin_handler_trigger_uninit>
    switch (port)
    871e:	0963      	lsrs	r3, r4, #5
    8720:	d01f      	beq.n	8762 <nrfx_gpiote_pin_uninit+0x5e>
    8722:	2b01      	cmp	r3, #1
    8724:	d120      	bne.n	8768 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    8726:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    872a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    872e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8730:	f013 0f01 	tst.w	r3, #1
    8734:	d01a      	beq.n	876c <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    8736:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    873a:	0964      	lsrs	r4, r4, #5
    873c:	d024      	beq.n	8788 <nrfx_gpiote_pin_uninit+0x84>
    873e:	2c01      	cmp	r4, #1
    8740:	d025      	beq.n	878e <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    8742:	4c18      	ldr	r4, [pc, #96]	; (87a4 <nrfx_gpiote_pin_uninit+0xa0>)
    8744:	f240 232e 	movw	r3, #558	; 0x22e
    8748:	4622      	mov	r2, r4
    874a:	4917      	ldr	r1, [pc, #92]	; (87a8 <nrfx_gpiote_pin_uninit+0xa4>)
    874c:	4817      	ldr	r0, [pc, #92]	; (87ac <nrfx_gpiote_pin_uninit+0xa8>)
    874e:	f003 fcdb 	bl	c108 <assert_print>
    8752:	f240 212e 	movw	r1, #558	; 0x22e
    8756:	4620      	mov	r0, r4
    8758:	f003 fccf 	bl	c0fa <assert_post_action>
        case 0: return NRF_P0;
    875c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8760:	e016      	b.n	8790 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    8762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8766:	e7e0      	b.n	872a <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    8768:	2300      	movs	r3, #0
    876a:	e7de      	b.n	872a <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    876c:	4d0d      	ldr	r5, [pc, #52]	; (87a4 <nrfx_gpiote_pin_uninit+0xa0>)
    876e:	f240 2329 	movw	r3, #553	; 0x229
    8772:	462a      	mov	r2, r5
    8774:	490e      	ldr	r1, [pc, #56]	; (87b0 <nrfx_gpiote_pin_uninit+0xac>)
    8776:	480d      	ldr	r0, [pc, #52]	; (87ac <nrfx_gpiote_pin_uninit+0xa8>)
    8778:	f003 fcc6 	bl	c108 <assert_print>
    877c:	f240 2129 	movw	r1, #553	; 0x229
    8780:	4628      	mov	r0, r5
    8782:	f003 fcba 	bl	c0fa <assert_post_action>
    8786:	e7d6      	b.n	8736 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    8788:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    878c:	e000      	b.n	8790 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    878e:	4b09      	ldr	r3, [pc, #36]	; (87b4 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    8790:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    8794:	2202      	movs	r2, #2
    8796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    879a:	4807      	ldr	r0, [pc, #28]	; (87b8 <nrfx_gpiote_pin_uninit+0xb4>)
}
    879c:	e7b8      	b.n	8710 <nrfx_gpiote_pin_uninit+0xc>
    879e:	bf00      	nop
    87a0:	0bad0004 	.word	0x0bad0004
    87a4:	0000ee48 	.word	0x0000ee48
    87a8:	0000d680 	.word	0x0000d680
    87ac:	0000d4bc 	.word	0x0000d4bc
    87b0:	0000ee7c 	.word	0x0000ee7c
    87b4:	50000300 	.word	0x50000300
    87b8:	0bad0000 	.word	0x0bad0000

000087bc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    87bc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    87be:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    87c0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    87c4:	2100      	movs	r1, #0
    uint32_t status = 0;
    87c6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    87c8:	e003      	b.n	87d2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    87ca:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    87cc:	3304      	adds	r3, #4
    87ce:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    87d0:	3101      	adds	r1, #1
    87d2:	2907      	cmp	r1, #7
    87d4:	d814      	bhi.n	8800 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    87d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    87da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    87de:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    87e0:	2a00      	cmp	r2, #0
    87e2:	d0f2      	beq.n	87ca <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    87e4:	4a0c      	ldr	r2, [pc, #48]	; (8818 <nrfx_gpiote_irq_handler+0x5c>)
    87e6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    87ea:	4210      	tst	r0, r2
    87ec:	d0ed      	beq.n	87ca <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    87ee:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    87f2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    87f6:	2500      	movs	r5, #0
    87f8:	6015      	str	r5, [r2, #0]
    87fa:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    87fc:	4304      	orrs	r4, r0
    87fe:	e7e4      	b.n	87ca <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8800:	4b05      	ldr	r3, [pc, #20]	; (8818 <nrfx_gpiote_irq_handler+0x5c>)
    8802:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8806:	b91b      	cbnz	r3, 8810 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    8808:	4620      	mov	r0, r4
    880a:	f7ff f939 	bl	7a80 <gpiote_evt_handle>
}
    880e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    8810:	f7ff fac2 	bl	7d98 <port_event_handle>
    8814:	e7f8      	b.n	8808 <nrfx_gpiote_irq_handler+0x4c>
    8816:	bf00      	nop
    8818:	40006000 	.word	0x40006000

0000881c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    881c:	b508      	push	{r3, lr}
    881e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    8820:	4801      	ldr	r0, [pc, #4]	; (8828 <nrfx_ppi_channel_alloc+0xc>)
    8822:	f7fe fe1d 	bl	7460 <nrfx_flag32_alloc>
}
    8826:	bd08      	pop	{r3, pc}
    8828:	20000170 	.word	0x20000170

0000882c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    882c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    882e:	4c11      	ldr	r4, [pc, #68]	; (8874 <_DoInit+0x48>)
    8830:	2303      	movs	r3, #3
    8832:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    8834:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    8836:	4a10      	ldr	r2, [pc, #64]	; (8878 <_DoInit+0x4c>)
    8838:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    883a:	4b10      	ldr	r3, [pc, #64]	; (887c <_DoInit+0x50>)
    883c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    883e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8842:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    8844:	2300      	movs	r3, #0
    8846:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    8848:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    884a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    884c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    884e:	4a0c      	ldr	r2, [pc, #48]	; (8880 <_DoInit+0x54>)
    8850:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    8852:	2210      	movs	r2, #16
    8854:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    8856:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    8858:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    885a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    885c:	4909      	ldr	r1, [pc, #36]	; (8884 <_DoInit+0x58>)
    885e:	1de0      	adds	r0, r4, #7
    8860:	f003 fda8 	bl	c3b4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    8864:	4908      	ldr	r1, [pc, #32]	; (8888 <_DoInit+0x5c>)
    8866:	4620      	mov	r0, r4
    8868:	f003 fda4 	bl	c3b4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    886c:	2320      	movs	r3, #32
    886e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    8870:	bd10      	pop	{r4, pc}
    8872:	bf00      	nop
    8874:	20000ca8 	.word	0x20000ca8
    8878:	0000f134 	.word	0x0000f134
    887c:	20000d60 	.word	0x20000d60
    8880:	20000d50 	.word	0x20000d50
    8884:	0000f140 	.word	0x0000f140
    8888:	0000f144 	.word	0x0000f144

0000888c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8890:	4604      	mov	r4, r0
    8892:	460e      	mov	r6, r1
    8894:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    8896:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    889a:	4a2d      	ldr	r2, [pc, #180]	; (8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    889c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    88a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    88a2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    88a4:	42bb      	cmp	r3, r7
    88a6:	d84b      	bhi.n	8940 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    88a8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    88ac:	4928      	ldr	r1, [pc, #160]	; (8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    88ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    88b2:	f8d2 8020 	ldr.w	r8, [r2, #32]
    88b6:	eba8 0907 	sub.w	r9, r8, r7
    88ba:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    88be:	4295      	cmp	r5, r2
    88c0:	d904      	bls.n	88cc <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    88c2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    88c4:	429d      	cmp	r5, r3
    88c6:	d916      	bls.n	88f6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    88c8:	2000      	movs	r0, #0
    88ca:	e03e      	b.n	894a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    88cc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    88d0:	1c63      	adds	r3, r4, #1
    88d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    88d6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    88da:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    88dc:	462a      	mov	r2, r5
    88de:	4631      	mov	r1, r6
    88e0:	4438      	add	r0, r7
    88e2:	f003 fda9 	bl	c438 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    88e6:	443d      	add	r5, r7
    88e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    88ec:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    88f0:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    88f2:	2001      	movs	r0, #1
    88f4:	e029      	b.n	894a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    88f6:	1c43      	adds	r3, r0, #1
    88f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    88fc:	4a14      	ldr	r2, [pc, #80]	; (8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    88fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8902:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    8904:	464a      	mov	r2, r9
    8906:	4631      	mov	r1, r6
    8908:	4438      	add	r0, r7
    890a:	f003 fd95 	bl	c438 <memcpy>
      NumBytes -= Rem;
    890e:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    8912:	197f      	adds	r7, r7, r5
    8914:	d107      	bne.n	8926 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    8916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    891a:	4b0d      	ldr	r3, [pc, #52]	; (8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    891c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    8920:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    8922:	2001      	movs	r0, #1
    8924:	e011      	b.n	894a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    8926:	1c63      	adds	r3, r4, #1
    8928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    892c:	4a08      	ldr	r2, [pc, #32]	; (8950 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    892e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    8932:	463a      	mov	r2, r7
    8934:	eb06 0109 	add.w	r1, r6, r9
    8938:	6858      	ldr	r0, [r3, #4]
    893a:	f003 fd7d 	bl	c438 <memcpy>
    893e:	e7ea      	b.n	8916 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    8940:	1bdb      	subs	r3, r3, r7
    8942:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    8944:	42ab      	cmp	r3, r5
    8946:	d2c1      	bcs.n	88cc <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    8948:	2000      	movs	r0, #0
}
    894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    894e:	bf00      	nop
    8950:	20000ca8 	.word	0x20000ca8

00008954 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    8954:	4b06      	ldr	r3, [pc, #24]	; (8970 <SEGGER_RTT_HasDataUp+0x1c>)
    8956:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    895a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    895e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    8960:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8964:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8968:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    896a:	1a80      	subs	r0, r0, r2
    896c:	4770      	bx	lr
    896e:	bf00      	nop
    8970:	20000ca8 	.word	0x20000ca8

00008974 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    8974:	4b03      	ldr	r3, [pc, #12]	; (8984 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    8976:	e000      	b.n	897a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    8978:	3318      	adds	r3, #24
	while (dev < __device_end) {
    897a:	4a03      	ldr	r2, [pc, #12]	; (8988 <z_device_state_init+0x14>)
    897c:	4293      	cmp	r3, r2
    897e:	d3fb      	bcc.n	8978 <z_device_state_init+0x4>
	}
}
    8980:	4770      	bx	lr
    8982:	bf00      	nop
    8984:	0000d0e0 	.word	0x0000d0e0
    8988:	0000d170 	.word	0x0000d170

0000898c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    898c:	b570      	push	{r4, r5, r6, lr}
    898e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8990:	4b11      	ldr	r3, [pc, #68]	; (89d8 <z_sys_init_run_level+0x4c>)
    8992:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8996:	e009      	b.n	89ac <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    8998:	4240      	negs	r0, r0
    899a:	e017      	b.n	89cc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    899c:	68eb      	ldr	r3, [r5, #12]
    899e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    89a0:	68ea      	ldr	r2, [r5, #12]
    89a2:	7853      	ldrb	r3, [r2, #1]
    89a4:	f043 0301 	orr.w	r3, r3, #1
    89a8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    89aa:	3408      	adds	r4, #8
    89ac:	1c73      	adds	r3, r6, #1
    89ae:	4a0a      	ldr	r2, [pc, #40]	; (89d8 <z_sys_init_run_level+0x4c>)
    89b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b4:	42a3      	cmp	r3, r4
    89b6:	d90d      	bls.n	89d4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    89b8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    89ba:	6823      	ldr	r3, [r4, #0]
    89bc:	4628      	mov	r0, r5
    89be:	4798      	blx	r3
		if (dev != NULL) {
    89c0:	2d00      	cmp	r5, #0
    89c2:	d0f2      	beq.n	89aa <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    89c4:	2800      	cmp	r0, #0
    89c6:	d0eb      	beq.n	89a0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    89c8:	2800      	cmp	r0, #0
    89ca:	dbe5      	blt.n	8998 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    89cc:	28ff      	cmp	r0, #255	; 0xff
    89ce:	dde5      	ble.n	899c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    89d0:	20ff      	movs	r0, #255	; 0xff
    89d2:	e7e3      	b.n	899c <z_sys_init_run_level+0x10>
		}
	}
}
    89d4:	bd70      	pop	{r4, r5, r6, pc}
    89d6:	bf00      	nop
    89d8:	0000f14c 	.word	0x0000f14c

000089dc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    89dc:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    89de:	4605      	mov	r5, r0
    89e0:	b328      	cbz	r0, 8a2e <z_impl_device_get_binding+0x52>
    89e2:	7803      	ldrb	r3, [r0, #0]
    89e4:	b32b      	cbz	r3, 8a32 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    89e6:	4c14      	ldr	r4, [pc, #80]	; (8a38 <z_impl_device_get_binding+0x5c>)
    89e8:	e000      	b.n	89ec <z_impl_device_get_binding+0x10>
    89ea:	3418      	adds	r4, #24
    89ec:	4b13      	ldr	r3, [pc, #76]	; (8a3c <z_impl_device_get_binding+0x60>)
    89ee:	429c      	cmp	r4, r3
    89f0:	d008      	beq.n	8a04 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    89f2:	4620      	mov	r0, r4
    89f4:	f004 fa18 	bl	ce28 <z_device_is_ready>
    89f8:	2800      	cmp	r0, #0
    89fa:	d0f6      	beq.n	89ea <z_impl_device_get_binding+0xe>
    89fc:	6823      	ldr	r3, [r4, #0]
    89fe:	42ab      	cmp	r3, r5
    8a00:	d1f3      	bne.n	89ea <z_impl_device_get_binding+0xe>
    8a02:	e012      	b.n	8a2a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    8a04:	4c0c      	ldr	r4, [pc, #48]	; (8a38 <z_impl_device_get_binding+0x5c>)
    8a06:	e000      	b.n	8a0a <z_impl_device_get_binding+0x2e>
    8a08:	3418      	adds	r4, #24
    8a0a:	4b0c      	ldr	r3, [pc, #48]	; (8a3c <z_impl_device_get_binding+0x60>)
    8a0c:	429c      	cmp	r4, r3
    8a0e:	d00b      	beq.n	8a28 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8a10:	4620      	mov	r0, r4
    8a12:	f004 fa09 	bl	ce28 <z_device_is_ready>
    8a16:	2800      	cmp	r0, #0
    8a18:	d0f6      	beq.n	8a08 <z_impl_device_get_binding+0x2c>
    8a1a:	6821      	ldr	r1, [r4, #0]
    8a1c:	4628      	mov	r0, r5
    8a1e:	f003 fd00 	bl	c422 <strcmp>
    8a22:	2800      	cmp	r0, #0
    8a24:	d1f0      	bne.n	8a08 <z_impl_device_get_binding+0x2c>
    8a26:	e000      	b.n	8a2a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    8a28:	2400      	movs	r4, #0
}
    8a2a:	4620      	mov	r0, r4
    8a2c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8a2e:	4604      	mov	r4, r0
    8a30:	e7fb      	b.n	8a2a <z_impl_device_get_binding+0x4e>
    8a32:	2400      	movs	r4, #0
    8a34:	e7f9      	b.n	8a2a <z_impl_device_get_binding+0x4e>
    8a36:	bf00      	nop
    8a38:	0000d0e0 	.word	0x0000d0e0
    8a3c:	0000d170 	.word	0x0000d170

00008a40 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    8a40:	2804      	cmp	r0, #4
    8a42:	d80c      	bhi.n	8a5e <reason_to_str+0x1e>
    8a44:	e8df f000 	tbb	[pc, r0]
    8a48:	07050d03 	.word	0x07050d03
    8a4c:	09          	.byte	0x09
    8a4d:	00          	.byte	0x00
    8a4e:	4806      	ldr	r0, [pc, #24]	; (8a68 <reason_to_str+0x28>)
    8a50:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    8a52:	4806      	ldr	r0, [pc, #24]	; (8a6c <reason_to_str+0x2c>)
    8a54:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    8a56:	4806      	ldr	r0, [pc, #24]	; (8a70 <reason_to_str+0x30>)
    8a58:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    8a5a:	4806      	ldr	r0, [pc, #24]	; (8a74 <reason_to_str+0x34>)
    8a5c:	4770      	bx	lr
	default:
		return "Unknown error";
    8a5e:	4806      	ldr	r0, [pc, #24]	; (8a78 <reason_to_str+0x38>)
    8a60:	4770      	bx	lr
		return "Unhandled interrupt";
    8a62:	4806      	ldr	r0, [pc, #24]	; (8a7c <reason_to_str+0x3c>)
	}
}
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop
    8a68:	0000f1b4 	.word	0x0000f1b4
    8a6c:	0000f188 	.word	0x0000f188
    8a70:	0000f198 	.word	0x0000f198
    8a74:	0000f1a4 	.word	0x0000f1a4
    8a78:	0000f164 	.word	0x0000f164
    8a7c:	0000f174 	.word	0x0000f174

00008a80 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8a80:	b130      	cbz	r0, 8a90 <thread_name_get+0x10>
{
    8a82:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8a84:	f004 fa32 	bl	ceec <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    8a88:	b120      	cbz	r0, 8a94 <thread_name_get+0x14>
    8a8a:	7803      	ldrb	r3, [r0, #0]
    8a8c:	b123      	cbz	r3, 8a98 <thread_name_get+0x18>
}
    8a8e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    8a90:	4802      	ldr	r0, [pc, #8]	; (8a9c <thread_name_get+0x1c>)
}
    8a92:	4770      	bx	lr
		thread_name = "unknown";
    8a94:	4801      	ldr	r0, [pc, #4]	; (8a9c <thread_name_get+0x1c>)
    8a96:	e7fa      	b.n	8a8e <thread_name_get+0xe>
    8a98:	4800      	ldr	r0, [pc, #0]	; (8a9c <thread_name_get+0x1c>)
	return thread_name;
    8a9a:	e7f8      	b.n	8a8e <thread_name_get+0xe>
    8a9c:	0000f1c4 	.word	0x0000f1c4

00008aa0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aa2:	b087      	sub	sp, #28
    8aa4:	4604      	mov	r4, r0
    8aa6:	460e      	mov	r6, r1
	__asm__ volatile(
    8aa8:	f04f 0320 	mov.w	r3, #32
    8aac:	f3ef 8711 	mrs	r7, BASEPRI
    8ab0:	f383 8812 	msr	BASEPRI_MAX, r3
    8ab4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8ab8:	f002 f9d2 	bl	ae60 <z_impl_z_current_get>
    8abc:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8abe:	4620      	mov	r0, r4
    8ac0:	f7ff ffbe 	bl	8a40 <reason_to_str>
    8ac4:	2300      	movs	r3, #0
    8ac6:	9305      	str	r3, [sp, #20]
    8ac8:	9004      	str	r0, [sp, #16]
    8aca:	9403      	str	r4, [sp, #12]
    8acc:	4a22      	ldr	r2, [pc, #136]	; (8b58 <z_fatal_error+0xb8>)
    8ace:	9202      	str	r2, [sp, #8]
    8ad0:	9301      	str	r3, [sp, #4]
    8ad2:	9300      	str	r3, [sp, #0]
    8ad4:	2201      	movs	r2, #1
    8ad6:	4921      	ldr	r1, [pc, #132]	; (8b5c <z_fatal_error+0xbc>)
    8ad8:	4618      	mov	r0, r3
    8ada:	f004 f9b2 	bl	ce42 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    8ade:	b11e      	cbz	r6, 8ae8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    8ae0:	69f3      	ldr	r3, [r6, #28]
    8ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8ae6:	b9eb      	cbnz	r3, 8b24 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8ae8:	4628      	mov	r0, r5
    8aea:	f7ff ffc9 	bl	8a80 <thread_name_get>
    8aee:	9004      	str	r0, [sp, #16]
    8af0:	9503      	str	r5, [sp, #12]
    8af2:	4b1b      	ldr	r3, [pc, #108]	; (8b60 <z_fatal_error+0xc0>)
    8af4:	9302      	str	r3, [sp, #8]
    8af6:	2000      	movs	r0, #0
    8af8:	9001      	str	r0, [sp, #4]
    8afa:	9000      	str	r0, [sp, #0]
    8afc:	4603      	mov	r3, r0
    8afe:	2201      	movs	r2, #1
    8b00:	4916      	ldr	r1, [pc, #88]	; (8b5c <z_fatal_error+0xbc>)
    8b02:	f004 f99e 	bl	ce42 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8b06:	4631      	mov	r1, r6
    8b08:	4620      	mov	r0, r4
    8b0a:	f7fe fba3 	bl	7254 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8b0e:	2c04      	cmp	r4, #4
    8b10:	d013      	beq.n	8b3a <z_fatal_error+0x9a>
	__asm__ volatile(
    8b12:	f387 8811 	msr	BASEPRI, r7
    8b16:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8b1a:	4628      	mov	r0, r5
    8b1c:	f7fc f9f4 	bl	4f08 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8b20:	b007      	add	sp, #28
    8b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    8b24:	4b0f      	ldr	r3, [pc, #60]	; (8b64 <z_fatal_error+0xc4>)
    8b26:	9302      	str	r3, [sp, #8]
    8b28:	2000      	movs	r0, #0
    8b2a:	9001      	str	r0, [sp, #4]
    8b2c:	9000      	str	r0, [sp, #0]
    8b2e:	4603      	mov	r3, r0
    8b30:	2201      	movs	r2, #1
    8b32:	490a      	ldr	r1, [pc, #40]	; (8b5c <z_fatal_error+0xbc>)
    8b34:	f004 f985 	bl	ce42 <z_log_msg2_runtime_create>
    8b38:	e7d6      	b.n	8ae8 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8b3a:	4c0b      	ldr	r4, [pc, #44]	; (8b68 <z_fatal_error+0xc8>)
    8b3c:	238f      	movs	r3, #143	; 0x8f
    8b3e:	4622      	mov	r2, r4
    8b40:	490a      	ldr	r1, [pc, #40]	; (8b6c <z_fatal_error+0xcc>)
    8b42:	480b      	ldr	r0, [pc, #44]	; (8b70 <z_fatal_error+0xd0>)
    8b44:	f003 fae0 	bl	c108 <assert_print>
    8b48:	480a      	ldr	r0, [pc, #40]	; (8b74 <z_fatal_error+0xd4>)
    8b4a:	f003 fadd 	bl	c108 <assert_print>
    8b4e:	218f      	movs	r1, #143	; 0x8f
    8b50:	4620      	mov	r0, r4
    8b52:	f003 fad2 	bl	c0fa <assert_post_action>
    8b56:	e7dc      	b.n	8b12 <z_fatal_error+0x72>
    8b58:	0000f1cc 	.word	0x0000f1cc
    8b5c:	0000d320 	.word	0x0000d320
    8b60:	0000f218 	.word	0x0000f218
    8b64:	0000f1f4 	.word	0x0000f1f4
    8b68:	0000f230 	.word	0x0000f230
    8b6c:	0000f254 	.word	0x0000f254
    8b70:	0000d4bc 	.word	0x0000d4bc
    8b74:	0000f274 	.word	0x0000f274

00008b78 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    8b78:	b510      	push	{r4, lr}
    8b7a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    8b7c:	4c11      	ldr	r4, [pc, #68]	; (8bc4 <init_idle_thread+0x4c>)
    8b7e:	23b0      	movs	r3, #176	; 0xb0
    8b80:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8b84:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8b88:	4b0f      	ldr	r3, [pc, #60]	; (8bc8 <init_idle_thread+0x50>)
    8b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    8b8e:	4a0f      	ldr	r2, [pc, #60]	; (8bcc <init_idle_thread+0x54>)
    8b90:	9205      	str	r2, [sp, #20]
    8b92:	2201      	movs	r2, #1
    8b94:	9204      	str	r2, [sp, #16]
    8b96:	220f      	movs	r2, #15
    8b98:	9203      	str	r2, [sp, #12]
    8b9a:	2200      	movs	r2, #0
    8b9c:	9202      	str	r2, [sp, #8]
    8b9e:	9201      	str	r2, [sp, #4]
    8ba0:	9300      	str	r3, [sp, #0]
    8ba2:	4b0b      	ldr	r3, [pc, #44]	; (8bd0 <init_idle_thread+0x58>)
    8ba4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8ba8:	490a      	ldr	r1, [pc, #40]	; (8bd4 <init_idle_thread+0x5c>)
    8baa:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    8bae:	fb0c 1100 	mla	r1, ip, r0, r1
    8bb2:	4620      	mov	r0, r4
    8bb4:	f000 fa76 	bl	90a4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8bb8:	7b63      	ldrb	r3, [r4, #13]
    8bba:	f023 0304 	bic.w	r3, r3, #4
    8bbe:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    8bc0:	b006      	add	sp, #24
    8bc2:	bd10      	pop	{r4, pc}
    8bc4:	20000490 	.word	0x20000490
    8bc8:	20001160 	.word	0x20001160
    8bcc:	0000f2ac 	.word	0x0000f2ac
    8bd0:	000093b9 	.word	0x000093b9
    8bd4:	20002420 	.word	0x20002420

00008bd8 <bg_thread_main>:
{
    8bd8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8bda:	4b0a      	ldr	r3, [pc, #40]	; (8c04 <bg_thread_main+0x2c>)
    8bdc:	2201      	movs	r2, #1
    8bde:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8be0:	2002      	movs	r0, #2
    8be2:	f7ff fed3 	bl	898c <z_sys_init_run_level>
	boot_banner();
    8be6:	f002 fe83 	bl	b8f0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8bea:	2003      	movs	r0, #3
    8bec:	f7ff fece 	bl	898c <z_sys_init_run_level>
	z_init_static_threads();
    8bf0:	f000 fb68 	bl	92c4 <z_init_static_threads>
	main();
    8bf4:	f7f8 ff0a 	bl	1a0c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8bf8:	4a03      	ldr	r2, [pc, #12]	; (8c08 <bg_thread_main+0x30>)
    8bfa:	7b13      	ldrb	r3, [r2, #12]
    8bfc:	f023 0301 	bic.w	r3, r3, #1
    8c00:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8c02:	bd08      	pop	{r3, pc}
    8c04:	20001392 	.word	0x20001392
    8c08:	20000540 	.word	0x20000540

00008c0c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    8c0c:	b508      	push	{r3, lr}
    8c0e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8c10:	4a01      	ldr	r2, [pc, #4]	; (8c18 <switch_to_main_thread+0xc>)
    8c12:	4802      	ldr	r0, [pc, #8]	; (8c1c <switch_to_main_thread+0x10>)
    8c14:	f7fb fd34 	bl	4680 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8c18:	00008bd9 	.word	0x00008bd9
    8c1c:	20000540 	.word	0x20000540

00008c20 <z_bss_zero>:
{
    8c20:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8c22:	4803      	ldr	r0, [pc, #12]	; (8c30 <z_bss_zero+0x10>)
    8c24:	4a03      	ldr	r2, [pc, #12]	; (8c34 <z_bss_zero+0x14>)
    8c26:	1a12      	subs	r2, r2, r0
    8c28:	2100      	movs	r1, #0
    8c2a:	f004 f919 	bl	ce60 <z_early_memset>
}
    8c2e:	bd08      	pop	{r3, pc}
    8c30:	20000260 	.word	0x20000260
    8c34:	20001394 	.word	0x20001394

00008c38 <z_init_cpu>:
{
    8c38:	b510      	push	{r4, lr}
    8c3a:	4604      	mov	r4, r0
	init_idle_thread(id);
    8c3c:	f7ff ff9c 	bl	8b78 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8c40:	490b      	ldr	r1, [pc, #44]	; (8c70 <z_init_cpu+0x38>)
    8c42:	23b0      	movs	r3, #176	; 0xb0
    8c44:	fb03 1104 	mla	r1, r3, r4, r1
    8c48:	4a0a      	ldr	r2, [pc, #40]	; (8c74 <z_init_cpu+0x3c>)
    8c4a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    8c4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8c52:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    8c54:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8c56:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    8c5a:	4b07      	ldr	r3, [pc, #28]	; (8c78 <z_init_cpu+0x40>)
    8c5c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8c60:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    8c64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8c68:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    8c6c:	6063      	str	r3, [r4, #4]
}
    8c6e:	bd10      	pop	{r4, pc}
    8c70:	20000490 	.word	0x20000490
    8c74:	20001160 	.word	0x20001160
    8c78:	20002580 	.word	0x20002580

00008c7c <prepare_multithreading>:
{
    8c7c:	b570      	push	{r4, r5, r6, lr}
    8c7e:	b086      	sub	sp, #24
	z_sched_init();
    8c80:	f001 ff2a 	bl	aad8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    8c84:	4d10      	ldr	r5, [pc, #64]	; (8cc8 <prepare_multithreading+0x4c>)
    8c86:	4b11      	ldr	r3, [pc, #68]	; (8ccc <prepare_multithreading+0x50>)
    8c88:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8c8a:	4b11      	ldr	r3, [pc, #68]	; (8cd0 <prepare_multithreading+0x54>)
    8c8c:	9305      	str	r3, [sp, #20]
    8c8e:	2301      	movs	r3, #1
    8c90:	9304      	str	r3, [sp, #16]
    8c92:	2400      	movs	r4, #0
    8c94:	9403      	str	r4, [sp, #12]
    8c96:	9402      	str	r4, [sp, #8]
    8c98:	9401      	str	r4, [sp, #4]
    8c9a:	9400      	str	r4, [sp, #0]
    8c9c:	4b0d      	ldr	r3, [pc, #52]	; (8cd4 <prepare_multithreading+0x58>)
    8c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8ca2:	490d      	ldr	r1, [pc, #52]	; (8cd8 <prepare_multithreading+0x5c>)
    8ca4:	4628      	mov	r0, r5
    8ca6:	f000 f9fd 	bl	90a4 <z_setup_new_thread>
    8caa:	4606      	mov	r6, r0
    8cac:	7b6b      	ldrb	r3, [r5, #13]
    8cae:	f023 0304 	bic.w	r3, r3, #4
    8cb2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    8cb4:	4628      	mov	r0, r5
    8cb6:	f001 fa33 	bl	a120 <z_ready_thread>
	z_init_cpu(0);
    8cba:	4620      	mov	r0, r4
    8cbc:	f7ff ffbc 	bl	8c38 <z_init_cpu>
}
    8cc0:	4630      	mov	r0, r6
    8cc2:	b006      	add	sp, #24
    8cc4:	bd70      	pop	{r4, r5, r6, pc}
    8cc6:	bf00      	nop
    8cc8:	20000540 	.word	0x20000540
    8ccc:	20001160 	.word	0x20001160
    8cd0:	0000f2b4 	.word	0x0000f2b4
    8cd4:	00008bd9 	.word	0x00008bd9
    8cd8:	20002000 	.word	0x20002000

00008cdc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8cdc:	b500      	push	{lr}
    8cde:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8ce0:	4b1f      	ldr	r3, [pc, #124]	; (8d60 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8ce2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    8ce6:	4c1f      	ldr	r4, [pc, #124]	; (8d64 <z_cstart+0x88>)
    8ce8:	6963      	ldr	r3, [r4, #20]
    8cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8cee:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8cf0:	23e0      	movs	r3, #224	; 0xe0
    8cf2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    8cf6:	2500      	movs	r5, #0
    8cf8:	77e5      	strb	r5, [r4, #31]
    8cfa:	7625      	strb	r5, [r4, #24]
    8cfc:	7665      	strb	r5, [r4, #25]
    8cfe:	76a5      	strb	r5, [r4, #26]
    8d00:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8d06:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8d0a:	6263      	str	r3, [r4, #36]	; 0x24
    8d0c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8d10:	f7fc f866 	bl	4de0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8d14:	f7fb fb38 	bl	4388 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d1c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8d20:	f7fc fa12 	bl	5148 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8d24:	f7fc f90a 	bl	4f3c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8d28:	f7fa fc5a 	bl	35e0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    8d2c:	2401      	movs	r4, #1
    8d2e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    8d32:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    8d36:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    8d38:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    8d3a:	4668      	mov	r0, sp
    8d3c:	f002 fdd2 	bl	b8e4 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    8d40:	4b09      	ldr	r3, [pc, #36]	; (8d68 <z_cstart+0x8c>)
    8d42:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8d46:	f7ff fe15 	bl	8974 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8d4a:	4628      	mov	r0, r5
    8d4c:	f7ff fe1e 	bl	898c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8d50:	4620      	mov	r0, r4
    8d52:	f7ff fe1b 	bl	898c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    8d56:	f7ff ff91 	bl	8c7c <prepare_multithreading>
    8d5a:	f7ff ff57 	bl	8c0c <switch_to_main_thread>
    8d5e:	bf00      	nop
    8d60:	20002da0 	.word	0x20002da0
    8d64:	e000ed00 	.word	0xe000ed00
    8d68:	20001160 	.word	0x20001160

00008d6c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8d6c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8d6e:	4c10      	ldr	r4, [pc, #64]	; (8db0 <init_mem_slab_module+0x44>)
	int rc = 0;
    8d70:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8d72:	e008      	b.n	8d86 <init_mem_slab_module+0x1a>
    8d74:	4b0f      	ldr	r3, [pc, #60]	; (8db4 <init_mem_slab_module+0x48>)
    8d76:	429c      	cmp	r4, r3
    8d78:	d217      	bcs.n	8daa <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    8d7a:	4620      	mov	r0, r4
    8d7c:	f004 f878 	bl	ce70 <create_free_list>
		if (rc < 0) {
    8d80:	1e05      	subs	r5, r0, #0
    8d82:	db12      	blt.n	8daa <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8d84:	3420      	adds	r4, #32
    8d86:	4b0b      	ldr	r3, [pc, #44]	; (8db4 <init_mem_slab_module+0x48>)
    8d88:	429c      	cmp	r4, r3
    8d8a:	d9f3      	bls.n	8d74 <init_mem_slab_module+0x8>
    8d8c:	4e0a      	ldr	r6, [pc, #40]	; (8db8 <init_mem_slab_module+0x4c>)
    8d8e:	233d      	movs	r3, #61	; 0x3d
    8d90:	4632      	mov	r2, r6
    8d92:	490a      	ldr	r1, [pc, #40]	; (8dbc <init_mem_slab_module+0x50>)
    8d94:	480a      	ldr	r0, [pc, #40]	; (8dc0 <init_mem_slab_module+0x54>)
    8d96:	f003 f9b7 	bl	c108 <assert_print>
    8d9a:	480a      	ldr	r0, [pc, #40]	; (8dc4 <init_mem_slab_module+0x58>)
    8d9c:	f003 f9b4 	bl	c108 <assert_print>
    8da0:	213d      	movs	r1, #61	; 0x3d
    8da2:	4630      	mov	r0, r6
    8da4:	f003 f9a9 	bl	c0fa <assert_post_action>
    8da8:	e7e4      	b.n	8d74 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    8daa:	4628      	mov	r0, r5
    8dac:	bd70      	pop	{r4, r5, r6, pc}
    8dae:	bf00      	nop
    8db0:	200001f8 	.word	0x200001f8
    8db4:	200001f8 	.word	0x200001f8
    8db8:	0000f2c0 	.word	0x0000f2c0
    8dbc:	0000f2e8 	.word	0x0000f2e8
    8dc0:	0000d4bc 	.word	0x0000d4bc
    8dc4:	0000f308 	.word	0x0000f308

00008dc8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dcc:	b082      	sub	sp, #8
    8dce:	4604      	mov	r4, r0
    8dd0:	460e      	mov	r6, r1
    8dd2:	4690      	mov	r8, r2
    8dd4:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8dd6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    8dda:	f04f 0320 	mov.w	r3, #32
    8dde:	f3ef 8711 	mrs	r7, BASEPRI
    8de2:	f383 8812 	msr	BASEPRI_MAX, r3
    8de6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8dea:	4628      	mov	r0, r5
    8dec:	f000 f8d8 	bl	8fa0 <z_spin_lock_valid>
    8df0:	b1c0      	cbz	r0, 8e24 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    8df2:	4628      	mov	r0, r5
    8df4:	f000 f8f4 	bl	8fe0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8df8:	69a1      	ldr	r1, [r4, #24]
    8dfa:	b321      	cbz	r1, 8e46 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    8dfc:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    8dfe:	69a3      	ldr	r3, [r4, #24]
    8e00:	681b      	ldr	r3, [r3, #0]
    8e02:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    8e04:	69e3      	ldr	r3, [r4, #28]
    8e06:	3301      	adds	r3, #1
    8e08:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8e0a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e0c:	4628      	mov	r0, r5
    8e0e:	f000 f8d7 	bl	8fc0 <z_spin_unlock_valid>
    8e12:	b388      	cbz	r0, 8e78 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    8e14:	f387 8811 	msr	BASEPRI, r7
    8e18:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    8e1c:	4620      	mov	r0, r4
    8e1e:	b002      	add	sp, #8
    8e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e24:	f8df a070 	ldr.w	sl, [pc, #112]	; 8e98 <k_mem_slab_alloc+0xd0>
    8e28:	238e      	movs	r3, #142	; 0x8e
    8e2a:	4652      	mov	r2, sl
    8e2c:	491b      	ldr	r1, [pc, #108]	; (8e9c <k_mem_slab_alloc+0xd4>)
    8e2e:	481c      	ldr	r0, [pc, #112]	; (8ea0 <k_mem_slab_alloc+0xd8>)
    8e30:	f003 f96a 	bl	c108 <assert_print>
    8e34:	4629      	mov	r1, r5
    8e36:	481b      	ldr	r0, [pc, #108]	; (8ea4 <k_mem_slab_alloc+0xdc>)
    8e38:	f003 f966 	bl	c108 <assert_print>
    8e3c:	218e      	movs	r1, #142	; 0x8e
    8e3e:	4650      	mov	r0, sl
    8e40:	f003 f95b 	bl	c0fa <assert_post_action>
    8e44:	e7d5      	b.n	8df2 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8e46:	ea59 0308 	orrs.w	r3, r9, r8
    8e4a:	d104      	bne.n	8e56 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    8e4c:	2300      	movs	r3, #0
    8e4e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    8e50:	f06f 040b 	mvn.w	r4, #11
    8e54:	e7da      	b.n	8e0c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8e56:	f8cd 8000 	str.w	r8, [sp]
    8e5a:	f8cd 9004 	str.w	r9, [sp, #4]
    8e5e:	4622      	mov	r2, r4
    8e60:	4639      	mov	r1, r7
    8e62:	4628      	mov	r0, r5
    8e64:	f001 fb38 	bl	a4d8 <z_pend_curr>
		if (result == 0) {
    8e68:	4604      	mov	r4, r0
    8e6a:	2800      	cmp	r0, #0
    8e6c:	d1d6      	bne.n	8e1c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8e6e:	4b0e      	ldr	r3, [pc, #56]	; (8ea8 <k_mem_slab_alloc+0xe0>)
    8e70:	689b      	ldr	r3, [r3, #8]
    8e72:	695b      	ldr	r3, [r3, #20]
    8e74:	6033      	str	r3, [r6, #0]
		return result;
    8e76:	e7d1      	b.n	8e1c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e78:	4e07      	ldr	r6, [pc, #28]	; (8e98 <k_mem_slab_alloc+0xd0>)
    8e7a:	23b9      	movs	r3, #185	; 0xb9
    8e7c:	4632      	mov	r2, r6
    8e7e:	490b      	ldr	r1, [pc, #44]	; (8eac <k_mem_slab_alloc+0xe4>)
    8e80:	4807      	ldr	r0, [pc, #28]	; (8ea0 <k_mem_slab_alloc+0xd8>)
    8e82:	f003 f941 	bl	c108 <assert_print>
    8e86:	4629      	mov	r1, r5
    8e88:	4809      	ldr	r0, [pc, #36]	; (8eb0 <k_mem_slab_alloc+0xe8>)
    8e8a:	f003 f93d 	bl	c108 <assert_print>
    8e8e:	21b9      	movs	r1, #185	; 0xb9
    8e90:	4630      	mov	r0, r6
    8e92:	f003 f932 	bl	c0fa <assert_post_action>
    8e96:	e7bd      	b.n	8e14 <k_mem_slab_alloc+0x4c>
    8e98:	0000dd4c 	.word	0x0000dd4c
    8e9c:	0000ddac 	.word	0x0000ddac
    8ea0:	0000d4bc 	.word	0x0000d4bc
    8ea4:	0000ddc4 	.word	0x0000ddc4
    8ea8:	20001160 	.word	0x20001160
    8eac:	0000dd7c 	.word	0x0000dd7c
    8eb0:	0000dd94 	.word	0x0000dd94

00008eb4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8eb8:	4604      	mov	r4, r0
    8eba:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8ebc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    8ec0:	f04f 0320 	mov.w	r3, #32
    8ec4:	f3ef 8711 	mrs	r7, BASEPRI
    8ec8:	f383 8812 	msr	BASEPRI_MAX, r3
    8ecc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ed0:	4630      	mov	r0, r6
    8ed2:	f000 f865 	bl	8fa0 <z_spin_lock_valid>
    8ed6:	b1b0      	cbz	r0, 8f06 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    8ed8:	4630      	mov	r0, r6
    8eda:	f000 f881 	bl	8fe0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8ede:	69a3      	ldr	r3, [r4, #24]
    8ee0:	b313      	cbz	r3, 8f28 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    8ee2:	682b      	ldr	r3, [r5, #0]
    8ee4:	69a2      	ldr	r2, [r4, #24]
    8ee6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8ee8:	682b      	ldr	r3, [r5, #0]
    8eea:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8eec:	69e3      	ldr	r3, [r4, #28]
    8eee:	3b01      	subs	r3, #1
    8ef0:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ef2:	4630      	mov	r0, r6
    8ef4:	f000 f864 	bl	8fc0 <z_spin_unlock_valid>
    8ef8:	b338      	cbz	r0, 8f4a <k_mem_slab_free+0x96>
	__asm__ volatile(
    8efa:	f387 8811 	msr	BASEPRI, r7
    8efe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f06:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8f6c <k_mem_slab_free+0xb8>
    8f0a:	238e      	movs	r3, #142	; 0x8e
    8f0c:	4642      	mov	r2, r8
    8f0e:	4918      	ldr	r1, [pc, #96]	; (8f70 <k_mem_slab_free+0xbc>)
    8f10:	4818      	ldr	r0, [pc, #96]	; (8f74 <k_mem_slab_free+0xc0>)
    8f12:	f003 f8f9 	bl	c108 <assert_print>
    8f16:	4631      	mov	r1, r6
    8f18:	4817      	ldr	r0, [pc, #92]	; (8f78 <k_mem_slab_free+0xc4>)
    8f1a:	f003 f8f5 	bl	c108 <assert_print>
    8f1e:	218e      	movs	r1, #142	; 0x8e
    8f20:	4640      	mov	r0, r8
    8f22:	f003 f8ea 	bl	c0fa <assert_post_action>
    8f26:	e7d7      	b.n	8ed8 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8f28:	4620      	mov	r0, r4
    8f2a:	f001 fd71 	bl	aa10 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8f2e:	2800      	cmp	r0, #0
    8f30:	d0d7      	beq.n	8ee2 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8f32:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8f34:	2100      	movs	r1, #0
    8f36:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8f3a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8f3c:	f001 f8f0 	bl	a120 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8f40:	4639      	mov	r1, r7
    8f42:	4630      	mov	r0, r6
    8f44:	f000 fe48 	bl	9bd8 <z_reschedule>
			return;
    8f48:	e7db      	b.n	8f02 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f4a:	4c08      	ldr	r4, [pc, #32]	; (8f6c <k_mem_slab_free+0xb8>)
    8f4c:	23b9      	movs	r3, #185	; 0xb9
    8f4e:	4622      	mov	r2, r4
    8f50:	490a      	ldr	r1, [pc, #40]	; (8f7c <k_mem_slab_free+0xc8>)
    8f52:	4808      	ldr	r0, [pc, #32]	; (8f74 <k_mem_slab_free+0xc0>)
    8f54:	f003 f8d8 	bl	c108 <assert_print>
    8f58:	4631      	mov	r1, r6
    8f5a:	4809      	ldr	r0, [pc, #36]	; (8f80 <k_mem_slab_free+0xcc>)
    8f5c:	f003 f8d4 	bl	c108 <assert_print>
    8f60:	21b9      	movs	r1, #185	; 0xb9
    8f62:	4620      	mov	r0, r4
    8f64:	f003 f8c9 	bl	c0fa <assert_post_action>
    8f68:	e7c7      	b.n	8efa <k_mem_slab_free+0x46>
    8f6a:	bf00      	nop
    8f6c:	0000dd4c 	.word	0x0000dd4c
    8f70:	0000ddac 	.word	0x0000ddac
    8f74:	0000d4bc 	.word	0x0000d4bc
    8f78:	0000ddc4 	.word	0x0000ddc4
    8f7c:	0000dd7c 	.word	0x0000dd7c
    8f80:	0000dd94 	.word	0x0000dd94

00008f84 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    8f84:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8f86:	ea53 0102 	orrs.w	r1, r3, r2
    8f8a:	d102      	bne.n	8f92 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    8f8c:	f003 ffb0 	bl	cef0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    8f90:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8f92:	4902      	ldr	r1, [pc, #8]	; (8f9c <schedule_new_thread+0x18>)
    8f94:	3018      	adds	r0, #24
    8f96:	f002 f86d 	bl	b074 <z_add_timeout>
    8f9a:	e7f9      	b.n	8f90 <schedule_new_thread+0xc>
    8f9c:	0000a27d 	.word	0x0000a27d

00008fa0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    8fa0:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    8fa2:	b13b      	cbz	r3, 8fb4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    8fa4:	f003 0303 	and.w	r3, r3, #3
    8fa8:	4a04      	ldr	r2, [pc, #16]	; (8fbc <z_spin_lock_valid+0x1c>)
    8faa:	7d12      	ldrb	r2, [r2, #20]
    8fac:	4293      	cmp	r3, r2
    8fae:	d003      	beq.n	8fb8 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    8fb0:	2001      	movs	r0, #1
    8fb2:	4770      	bx	lr
    8fb4:	2001      	movs	r0, #1
    8fb6:	4770      	bx	lr
			return false;
    8fb8:	2000      	movs	r0, #0
}
    8fba:	4770      	bx	lr
    8fbc:	20001160 	.word	0x20001160

00008fc0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8fc0:	6801      	ldr	r1, [r0, #0]
    8fc2:	4a06      	ldr	r2, [pc, #24]	; (8fdc <z_spin_unlock_valid+0x1c>)
    8fc4:	7d13      	ldrb	r3, [r2, #20]
    8fc6:	6892      	ldr	r2, [r2, #8]
    8fc8:	4313      	orrs	r3, r2
    8fca:	4299      	cmp	r1, r3
    8fcc:	d103      	bne.n	8fd6 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    8fce:	2300      	movs	r3, #0
    8fd0:	6003      	str	r3, [r0, #0]
	return true;
    8fd2:	2001      	movs	r0, #1
    8fd4:	4770      	bx	lr
		return false;
    8fd6:	2000      	movs	r0, #0
}
    8fd8:	4770      	bx	lr
    8fda:	bf00      	nop
    8fdc:	20001160 	.word	0x20001160

00008fe0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    8fe0:	4a02      	ldr	r2, [pc, #8]	; (8fec <z_spin_lock_set_owner+0xc>)
    8fe2:	7d13      	ldrb	r3, [r2, #20]
    8fe4:	6892      	ldr	r2, [r2, #8]
    8fe6:	4313      	orrs	r3, r2
    8fe8:	6003      	str	r3, [r0, #0]
}
    8fea:	4770      	bx	lr
    8fec:	20001160 	.word	0x20001160

00008ff0 <z_thread_monitor_exit>:
{
    8ff0:	b570      	push	{r4, r5, r6, lr}
    8ff2:	4604      	mov	r4, r0
	__asm__ volatile(
    8ff4:	f04f 0320 	mov.w	r3, #32
    8ff8:	f3ef 8511 	mrs	r5, BASEPRI
    8ffc:	f383 8812 	msr	BASEPRI_MAX, r3
    9000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9004:	481f      	ldr	r0, [pc, #124]	; (9084 <z_thread_monitor_exit+0x94>)
    9006:	f7ff ffcb 	bl	8fa0 <z_spin_lock_valid>
    900a:	b150      	cbz	r0, 9022 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    900c:	481d      	ldr	r0, [pc, #116]	; (9084 <z_thread_monitor_exit+0x94>)
    900e:	f7ff ffe7 	bl	8fe0 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    9012:	4b1d      	ldr	r3, [pc, #116]	; (9088 <z_thread_monitor_exit+0x98>)
    9014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9016:	42a3      	cmp	r3, r4
    9018:	d114      	bne.n	9044 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    901a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    901c:	4b1a      	ldr	r3, [pc, #104]	; (9088 <z_thread_monitor_exit+0x98>)
    901e:	629a      	str	r2, [r3, #40]	; 0x28
    9020:	e017      	b.n	9052 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9022:	4e1a      	ldr	r6, [pc, #104]	; (908c <z_thread_monitor_exit+0x9c>)
    9024:	238e      	movs	r3, #142	; 0x8e
    9026:	4632      	mov	r2, r6
    9028:	4919      	ldr	r1, [pc, #100]	; (9090 <z_thread_monitor_exit+0xa0>)
    902a:	481a      	ldr	r0, [pc, #104]	; (9094 <z_thread_monitor_exit+0xa4>)
    902c:	f003 f86c 	bl	c108 <assert_print>
    9030:	4914      	ldr	r1, [pc, #80]	; (9084 <z_thread_monitor_exit+0x94>)
    9032:	4819      	ldr	r0, [pc, #100]	; (9098 <z_thread_monitor_exit+0xa8>)
    9034:	f003 f868 	bl	c108 <assert_print>
    9038:	218e      	movs	r1, #142	; 0x8e
    903a:	4630      	mov	r0, r6
    903c:	f003 f85d 	bl	c0fa <assert_post_action>
    9040:	e7e4      	b.n	900c <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    9042:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    9044:	b113      	cbz	r3, 904c <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    9046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    9048:	42a2      	cmp	r2, r4
    904a:	d1fa      	bne.n	9042 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    904c:	b10b      	cbz	r3, 9052 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    904e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    9050:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9052:	480c      	ldr	r0, [pc, #48]	; (9084 <z_thread_monitor_exit+0x94>)
    9054:	f7ff ffb4 	bl	8fc0 <z_spin_unlock_valid>
    9058:	b120      	cbz	r0, 9064 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    905a:	f385 8811 	msr	BASEPRI, r5
    905e:	f3bf 8f6f 	isb	sy
}
    9062:	bd70      	pop	{r4, r5, r6, pc}
    9064:	4c09      	ldr	r4, [pc, #36]	; (908c <z_thread_monitor_exit+0x9c>)
    9066:	23b9      	movs	r3, #185	; 0xb9
    9068:	4622      	mov	r2, r4
    906a:	490c      	ldr	r1, [pc, #48]	; (909c <z_thread_monitor_exit+0xac>)
    906c:	4809      	ldr	r0, [pc, #36]	; (9094 <z_thread_monitor_exit+0xa4>)
    906e:	f003 f84b 	bl	c108 <assert_print>
    9072:	4904      	ldr	r1, [pc, #16]	; (9084 <z_thread_monitor_exit+0x94>)
    9074:	480a      	ldr	r0, [pc, #40]	; (90a0 <z_thread_monitor_exit+0xb0>)
    9076:	f003 f847 	bl	c108 <assert_print>
    907a:	21b9      	movs	r1, #185	; 0xb9
    907c:	4620      	mov	r0, r4
    907e:	f003 f83c 	bl	c0fa <assert_post_action>
    9082:	e7ea      	b.n	905a <z_thread_monitor_exit+0x6a>
    9084:	2000118c 	.word	0x2000118c
    9088:	20001160 	.word	0x20001160
    908c:	0000dd4c 	.word	0x0000dd4c
    9090:	0000ddac 	.word	0x0000ddac
    9094:	0000d4bc 	.word	0x0000d4bc
    9098:	0000ddc4 	.word	0x0000ddc4
    909c:	0000dd7c 	.word	0x0000dd7c
    90a0:	0000dd94 	.word	0x0000dd94

000090a4 <z_setup_new_thread>:
{
    90a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90a8:	b085      	sub	sp, #20
    90aa:	4604      	mov	r4, r0
    90ac:	460e      	mov	r6, r1
    90ae:	4690      	mov	r8, r2
    90b0:	461d      	mov	r5, r3
    90b2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    90b6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    90ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    90bc:	2f0f      	cmp	r7, #15
    90be:	d05e      	beq.n	917e <z_setup_new_thread+0xda>
    90c0:	f107 0310 	add.w	r3, r7, #16
    90c4:	2b1e      	cmp	r3, #30
    90c6:	d85e      	bhi.n	9186 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    90c8:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    90cc:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    90ce:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    90d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    90d2:	2204      	movs	r2, #4
    90d4:	4639      	mov	r1, r7
    90d6:	4620      	mov	r0, r4
    90d8:	f003 ff0e 	bl	cef8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    90dc:	4642      	mov	r2, r8
    90de:	4631      	mov	r1, r6
    90e0:	4620      	mov	r0, r4
    90e2:	f003 feeb 	bl	cebc <setup_thread_stack>
    90e6:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    90e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90ea:	9302      	str	r3, [sp, #8]
    90ec:	f8cd a004 	str.w	sl, [sp, #4]
    90f0:	f8cd b000 	str.w	fp, [sp]
    90f4:	462b      	mov	r3, r5
    90f6:	4602      	mov	r2, r0
    90f8:	4631      	mov	r1, r6
    90fa:	4620      	mov	r0, r4
    90fc:	f7fb fa76 	bl	45ec <arch_new_thread>
	new_thread->init_data = NULL;
    9100:	2300      	movs	r3, #0
    9102:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    9104:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    9106:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    910a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    910e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9110:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    9112:	f04f 0320 	mov.w	r3, #32
    9116:	f3ef 8611 	mrs	r6, BASEPRI
    911a:	f383 8812 	msr	BASEPRI_MAX, r3
    911e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9122:	4837      	ldr	r0, [pc, #220]	; (9200 <z_setup_new_thread+0x15c>)
    9124:	f7ff ff3c 	bl	8fa0 <z_spin_lock_valid>
    9128:	2800      	cmp	r0, #0
    912a:	d042      	beq.n	91b2 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    912c:	4d34      	ldr	r5, [pc, #208]	; (9200 <z_setup_new_thread+0x15c>)
    912e:	4628      	mov	r0, r5
    9130:	f7ff ff56 	bl	8fe0 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    9134:	4b33      	ldr	r3, [pc, #204]	; (9204 <z_setup_new_thread+0x160>)
    9136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9138:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    913a:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    913c:	4628      	mov	r0, r5
    913e:	f7ff ff3f 	bl	8fc0 <z_spin_unlock_valid>
    9142:	2800      	cmp	r0, #0
    9144:	d045      	beq.n	91d2 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    9146:	f386 8811 	msr	BASEPRI, r6
    914a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    914e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9150:	2b00      	cmp	r3, #0
    9152:	d04e      	beq.n	91f2 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    9154:	221f      	movs	r2, #31
    9156:	4619      	mov	r1, r3
    9158:	f104 0074 	add.w	r0, r4, #116	; 0x74
    915c:	f003 f934 	bl	c3c8 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    9160:	2300      	movs	r3, #0
    9162:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    9166:	4b27      	ldr	r3, [pc, #156]	; (9204 <z_setup_new_thread+0x160>)
    9168:	689b      	ldr	r3, [r3, #8]
    916a:	2b00      	cmp	r3, #0
    916c:	d045      	beq.n	91fa <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    916e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9172:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    9176:	4638      	mov	r0, r7
    9178:	b005      	add	sp, #20
    917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    917e:	4b22      	ldr	r3, [pc, #136]	; (9208 <z_setup_new_thread+0x164>)
    9180:	429d      	cmp	r5, r3
    9182:	d19d      	bne.n	90c0 <z_setup_new_thread+0x1c>
    9184:	e7a0      	b.n	90c8 <z_setup_new_thread+0x24>
    9186:	f8df 9084 	ldr.w	r9, [pc, #132]	; 920c <z_setup_new_thread+0x168>
    918a:	f240 13ff 	movw	r3, #511	; 0x1ff
    918e:	464a      	mov	r2, r9
    9190:	491f      	ldr	r1, [pc, #124]	; (9210 <z_setup_new_thread+0x16c>)
    9192:	4820      	ldr	r0, [pc, #128]	; (9214 <z_setup_new_thread+0x170>)
    9194:	f002 ffb8 	bl	c108 <assert_print>
    9198:	f06f 030f 	mvn.w	r3, #15
    919c:	220e      	movs	r2, #14
    919e:	4639      	mov	r1, r7
    91a0:	481d      	ldr	r0, [pc, #116]	; (9218 <z_setup_new_thread+0x174>)
    91a2:	f002 ffb1 	bl	c108 <assert_print>
    91a6:	f240 11ff 	movw	r1, #511	; 0x1ff
    91aa:	4648      	mov	r0, r9
    91ac:	f002 ffa5 	bl	c0fa <assert_post_action>
    91b0:	e78a      	b.n	90c8 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91b2:	4d1a      	ldr	r5, [pc, #104]	; (921c <z_setup_new_thread+0x178>)
    91b4:	238e      	movs	r3, #142	; 0x8e
    91b6:	462a      	mov	r2, r5
    91b8:	4919      	ldr	r1, [pc, #100]	; (9220 <z_setup_new_thread+0x17c>)
    91ba:	4816      	ldr	r0, [pc, #88]	; (9214 <z_setup_new_thread+0x170>)
    91bc:	f002 ffa4 	bl	c108 <assert_print>
    91c0:	490f      	ldr	r1, [pc, #60]	; (9200 <z_setup_new_thread+0x15c>)
    91c2:	4818      	ldr	r0, [pc, #96]	; (9224 <z_setup_new_thread+0x180>)
    91c4:	f002 ffa0 	bl	c108 <assert_print>
    91c8:	218e      	movs	r1, #142	; 0x8e
    91ca:	4628      	mov	r0, r5
    91cc:	f002 ff95 	bl	c0fa <assert_post_action>
    91d0:	e7ac      	b.n	912c <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    91d2:	4d12      	ldr	r5, [pc, #72]	; (921c <z_setup_new_thread+0x178>)
    91d4:	23b9      	movs	r3, #185	; 0xb9
    91d6:	462a      	mov	r2, r5
    91d8:	4913      	ldr	r1, [pc, #76]	; (9228 <z_setup_new_thread+0x184>)
    91da:	480e      	ldr	r0, [pc, #56]	; (9214 <z_setup_new_thread+0x170>)
    91dc:	f002 ff94 	bl	c108 <assert_print>
    91e0:	4907      	ldr	r1, [pc, #28]	; (9200 <z_setup_new_thread+0x15c>)
    91e2:	4812      	ldr	r0, [pc, #72]	; (922c <z_setup_new_thread+0x188>)
    91e4:	f002 ff90 	bl	c108 <assert_print>
    91e8:	21b9      	movs	r1, #185	; 0xb9
    91ea:	4628      	mov	r0, r5
    91ec:	f002 ff85 	bl	c0fa <assert_post_action>
    91f0:	e7a9      	b.n	9146 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    91f2:	2300      	movs	r3, #0
    91f4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    91f8:	e7b5      	b.n	9166 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    91fa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    91fe:	e7ba      	b.n	9176 <z_setup_new_thread+0xd2>
    9200:	2000118c 	.word	0x2000118c
    9204:	20001160 	.word	0x20001160
    9208:	000093b9 	.word	0x000093b9
    920c:	0000f328 	.word	0x0000f328
    9210:	0000f380 	.word	0x0000f380
    9214:	0000d4bc 	.word	0x0000d4bc
    9218:	0000f400 	.word	0x0000f400
    921c:	0000dd4c 	.word	0x0000dd4c
    9220:	0000ddac 	.word	0x0000ddac
    9224:	0000ddc4 	.word	0x0000ddc4
    9228:	0000dd7c 	.word	0x0000dd7c
    922c:	0000dd94 	.word	0x0000dd94

00009230 <z_impl_k_thread_create>:
{
    9230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9234:	b086      	sub	sp, #24
    9236:	4604      	mov	r4, r0
    9238:	460d      	mov	r5, r1
    923a:	4616      	mov	r6, r2
    923c:	461f      	mov	r7, r3
    923e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    9242:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9246:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    924a:	b9db      	cbnz	r3, 9284 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    924c:	2300      	movs	r3, #0
    924e:	9305      	str	r3, [sp, #20]
    9250:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9252:	9304      	str	r3, [sp, #16]
    9254:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9256:	9303      	str	r3, [sp, #12]
    9258:	9b10      	ldr	r3, [sp, #64]	; 0x40
    925a:	9302      	str	r3, [sp, #8]
    925c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    925e:	9301      	str	r3, [sp, #4]
    9260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9262:	9300      	str	r3, [sp, #0]
    9264:	463b      	mov	r3, r7
    9266:	4632      	mov	r2, r6
    9268:	4629      	mov	r1, r5
    926a:	4620      	mov	r0, r4
    926c:	f7ff ff1a 	bl	90a4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    9270:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9274:	bf08      	it	eq
    9276:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    927a:	d115      	bne.n	92a8 <z_impl_k_thread_create+0x78>
}
    927c:	4620      	mov	r0, r4
    927e:	b006      	add	sp, #24
    9280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    9284:	f8df a02c 	ldr.w	sl, [pc, #44]	; 92b4 <z_impl_k_thread_create+0x84>
    9288:	f240 236e 	movw	r3, #622	; 0x26e
    928c:	4652      	mov	r2, sl
    928e:	490a      	ldr	r1, [pc, #40]	; (92b8 <z_impl_k_thread_create+0x88>)
    9290:	480a      	ldr	r0, [pc, #40]	; (92bc <z_impl_k_thread_create+0x8c>)
    9292:	f002 ff39 	bl	c108 <assert_print>
    9296:	480a      	ldr	r0, [pc, #40]	; (92c0 <z_impl_k_thread_create+0x90>)
    9298:	f002 ff36 	bl	c108 <assert_print>
    929c:	f240 216e 	movw	r1, #622	; 0x26e
    92a0:	4650      	mov	r0, sl
    92a2:	f002 ff2a 	bl	c0fa <assert_post_action>
    92a6:	e7d1      	b.n	924c <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    92a8:	464a      	mov	r2, r9
    92aa:	4643      	mov	r3, r8
    92ac:	4620      	mov	r0, r4
    92ae:	f7ff fe69 	bl	8f84 <schedule_new_thread>
    92b2:	e7e3      	b.n	927c <z_impl_k_thread_create+0x4c>
    92b4:	0000f328 	.word	0x0000f328
    92b8:	0000f434 	.word	0x0000f434
    92bc:	0000d4bc 	.word	0x0000d4bc
    92c0:	0000f448 	.word	0x0000f448

000092c4 <z_init_static_threads>:
{
    92c4:	b530      	push	{r4, r5, lr}
    92c6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    92c8:	4c35      	ldr	r4, [pc, #212]	; (93a0 <z_init_static_threads+0xdc>)
    92ca:	e017      	b.n	92fc <z_init_static_threads+0x38>
    92cc:	4b35      	ldr	r3, [pc, #212]	; (93a4 <z_init_static_threads+0xe0>)
    92ce:	429c      	cmp	r4, r3
    92d0:	d228      	bcs.n	9324 <z_init_static_threads+0x60>
		z_setup_new_thread(
    92d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    92d4:	9305      	str	r3, [sp, #20]
    92d6:	6a23      	ldr	r3, [r4, #32]
    92d8:	9304      	str	r3, [sp, #16]
    92da:	69e3      	ldr	r3, [r4, #28]
    92dc:	9303      	str	r3, [sp, #12]
    92de:	69a3      	ldr	r3, [r4, #24]
    92e0:	9302      	str	r3, [sp, #8]
    92e2:	6963      	ldr	r3, [r4, #20]
    92e4:	9301      	str	r3, [sp, #4]
    92e6:	6923      	ldr	r3, [r4, #16]
    92e8:	9300      	str	r3, [sp, #0]
    92ea:	68e3      	ldr	r3, [r4, #12]
    92ec:	68a2      	ldr	r2, [r4, #8]
    92ee:	6861      	ldr	r1, [r4, #4]
    92f0:	6820      	ldr	r0, [r4, #0]
    92f2:	f7ff fed7 	bl	90a4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    92f6:	6823      	ldr	r3, [r4, #0]
    92f8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    92fa:	3430      	adds	r4, #48	; 0x30
    92fc:	4b29      	ldr	r3, [pc, #164]	; (93a4 <z_init_static_threads+0xe0>)
    92fe:	429c      	cmp	r4, r3
    9300:	d9e4      	bls.n	92cc <z_init_static_threads+0x8>
    9302:	4d29      	ldr	r5, [pc, #164]	; (93a8 <z_init_static_threads+0xe4>)
    9304:	f240 23d5 	movw	r3, #725	; 0x2d5
    9308:	462a      	mov	r2, r5
    930a:	4928      	ldr	r1, [pc, #160]	; (93ac <z_init_static_threads+0xe8>)
    930c:	4828      	ldr	r0, [pc, #160]	; (93b0 <z_init_static_threads+0xec>)
    930e:	f002 fefb 	bl	c108 <assert_print>
    9312:	4828      	ldr	r0, [pc, #160]	; (93b4 <z_init_static_threads+0xf0>)
    9314:	f002 fef8 	bl	c108 <assert_print>
    9318:	f240 21d5 	movw	r1, #725	; 0x2d5
    931c:	4628      	mov	r0, r5
    931e:	f002 feec 	bl	c0fa <assert_post_action>
    9322:	e7d3      	b.n	92cc <z_init_static_threads+0x8>
	k_sched_lock();
    9324:	f000 fca6 	bl	9c74 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9328:	4c1d      	ldr	r4, [pc, #116]	; (93a0 <z_init_static_threads+0xdc>)
    932a:	e000      	b.n	932e <z_init_static_threads+0x6a>
    932c:	3430      	adds	r4, #48	; 0x30
    932e:	4b1d      	ldr	r3, [pc, #116]	; (93a4 <z_init_static_threads+0xe0>)
    9330:	429c      	cmp	r4, r3
    9332:	d81f      	bhi.n	9374 <z_init_static_threads+0xb0>
    9334:	4b1b      	ldr	r3, [pc, #108]	; (93a4 <z_init_static_threads+0xe0>)
    9336:	429c      	cmp	r4, r3
    9338:	d22d      	bcs.n	9396 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    933a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    933c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9340:	d0f4      	beq.n	932c <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    9342:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    9344:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    9348:	17c1      	asrs	r1, r0, #31
    934a:	03c9      	lsls	r1, r1, #15
    934c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    9350:	03c0      	lsls	r0, r0, #15
    9352:	f240 33e7 	movw	r3, #999	; 0x3e7
    9356:	18c0      	adds	r0, r0, r3
    9358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    935c:	f04f 0300 	mov.w	r3, #0
    9360:	f141 0100 	adc.w	r1, r1, #0
    9364:	f7f7 f8ae 	bl	4c4 <__aeabi_uldivmod>
    9368:	4602      	mov	r2, r0
    936a:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    936c:	4628      	mov	r0, r5
    936e:	f7ff fe09 	bl	8f84 <schedule_new_thread>
    9372:	e7db      	b.n	932c <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    9374:	4d0c      	ldr	r5, [pc, #48]	; (93a8 <z_init_static_threads+0xe4>)
    9376:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    937a:	462a      	mov	r2, r5
    937c:	490b      	ldr	r1, [pc, #44]	; (93ac <z_init_static_threads+0xe8>)
    937e:	480c      	ldr	r0, [pc, #48]	; (93b0 <z_init_static_threads+0xec>)
    9380:	f002 fec2 	bl	c108 <assert_print>
    9384:	480b      	ldr	r0, [pc, #44]	; (93b4 <z_init_static_threads+0xf0>)
    9386:	f002 febf 	bl	c108 <assert_print>
    938a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    938e:	4628      	mov	r0, r5
    9390:	f002 feb3 	bl	c0fa <assert_post_action>
    9394:	e7ce      	b.n	9334 <z_init_static_threads+0x70>
	k_sched_unlock();
    9396:	f001 f9f9 	bl	a78c <k_sched_unlock>
}
    939a:	b007      	add	sp, #28
    939c:	bd30      	pop	{r4, r5, pc}
    939e:	bf00      	nop
    93a0:	200001f8 	.word	0x200001f8
    93a4:	200001f8 	.word	0x200001f8
    93a8:	0000f328 	.word	0x0000f328
    93ac:	0000f470 	.word	0x0000f470
    93b0:	0000d4bc 	.word	0x0000d4bc
    93b4:	0000f308 	.word	0x0000f308

000093b8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    93b8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    93ba:	4b14      	ldr	r3, [pc, #80]	; (940c <idle+0x54>)
    93bc:	689b      	ldr	r3, [r3, #8]
    93be:	f993 300e 	ldrsb.w	r3, [r3, #14]
    93c2:	2b00      	cmp	r3, #0
    93c4:	da0d      	bge.n	93e2 <idle+0x2a>
    93c6:	4c12      	ldr	r4, [pc, #72]	; (9410 <idle+0x58>)
    93c8:	2327      	movs	r3, #39	; 0x27
    93ca:	4622      	mov	r2, r4
    93cc:	4911      	ldr	r1, [pc, #68]	; (9414 <idle+0x5c>)
    93ce:	4812      	ldr	r0, [pc, #72]	; (9418 <idle+0x60>)
    93d0:	f002 fe9a 	bl	c108 <assert_print>
    93d4:	2127      	movs	r1, #39	; 0x27
    93d6:	4620      	mov	r0, r4
    93d8:	f002 fe8f 	bl	c0fa <assert_post_action>
    93dc:	e001      	b.n	93e2 <idle+0x2a>
	arch_cpu_idle();
    93de:	f7fa ffd9 	bl	4394 <arch_cpu_idle>
	__asm__ volatile(
    93e2:	f04f 0220 	mov.w	r2, #32
    93e6:	f3ef 8311 	mrs	r3, BASEPRI
    93ea:	f382 8812 	msr	BASEPRI_MAX, r2
    93ee:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    93f2:	f001 ff7d 	bl	b2f0 <z_get_next_timeout_expiry>
    93f6:	4b05      	ldr	r3, [pc, #20]	; (940c <idle+0x54>)
    93f8:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    93fa:	4b08      	ldr	r3, [pc, #32]	; (941c <idle+0x64>)
    93fc:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    93fe:	2b00      	cmp	r3, #0
    9400:	d0ed      	beq.n	93de <idle+0x26>
    9402:	f7fa fd93 	bl	3f2c <pm_system_suspend>
    9406:	2800      	cmp	r0, #0
    9408:	d1eb      	bne.n	93e2 <idle+0x2a>
    940a:	e7e8      	b.n	93de <idle+0x26>
    940c:	20001160 	.word	0x20001160
    9410:	0000f4a0 	.word	0x0000f4a0
    9414:	0000f4c4 	.word	0x0000f4c4
    9418:	0000d4bc 	.word	0x0000d4bc
    941c:	20001392 	.word	0x20001392

00009420 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9424:	b083      	sub	sp, #12
    9426:	4604      	mov	r4, r0
    9428:	4616      	mov	r6, r2
    942a:	461d      	mov	r5, r3
    942c:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9430:	2900      	cmp	r1, #0
    9432:	d12b      	bne.n	948c <z_impl_k_mutex_lock+0x6c>
    9434:	f04f 0320 	mov.w	r3, #32
    9438:	f3ef 8711 	mrs	r7, BASEPRI
    943c:	f383 8812 	msr	BASEPRI_MAX, r3
    9440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9444:	487b      	ldr	r0, [pc, #492]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9446:	f7ff fdab 	bl	8fa0 <z_spin_lock_valid>
    944a:	2800      	cmp	r0, #0
    944c:	d02d      	beq.n	94aa <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    944e:	4879      	ldr	r0, [pc, #484]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9450:	f7ff fdc6 	bl	8fe0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9454:	68e1      	ldr	r1, [r4, #12]
    9456:	2900      	cmp	r1, #0
    9458:	d138      	bne.n	94cc <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    945a:	2900      	cmp	r1, #0
    945c:	d17d      	bne.n	955a <z_impl_k_mutex_lock+0x13a>
    945e:	4b76      	ldr	r3, [pc, #472]	; (9638 <z_impl_k_mutex_lock+0x218>)
    9460:	689b      	ldr	r3, [r3, #8]
    9462:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9466:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    9468:	3101      	adds	r1, #1
    946a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    946c:	4b72      	ldr	r3, [pc, #456]	; (9638 <z_impl_k_mutex_lock+0x218>)
    946e:	689b      	ldr	r3, [r3, #8]
    9470:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9472:	4870      	ldr	r0, [pc, #448]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9474:	f7ff fda4 	bl	8fc0 <z_spin_unlock_valid>
    9478:	2800      	cmp	r0, #0
    947a:	d070      	beq.n	955e <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    947c:	f387 8811 	msr	BASEPRI, r7
    9480:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    9484:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9486:	b003      	add	sp, #12
    9488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    948c:	4f6b      	ldr	r7, [pc, #428]	; (963c <z_impl_k_mutex_lock+0x21c>)
    948e:	2365      	movs	r3, #101	; 0x65
    9490:	463a      	mov	r2, r7
    9492:	496b      	ldr	r1, [pc, #428]	; (9640 <z_impl_k_mutex_lock+0x220>)
    9494:	486b      	ldr	r0, [pc, #428]	; (9644 <z_impl_k_mutex_lock+0x224>)
    9496:	f002 fe37 	bl	c108 <assert_print>
    949a:	486b      	ldr	r0, [pc, #428]	; (9648 <z_impl_k_mutex_lock+0x228>)
    949c:	f002 fe34 	bl	c108 <assert_print>
    94a0:	2165      	movs	r1, #101	; 0x65
    94a2:	4638      	mov	r0, r7
    94a4:	f002 fe29 	bl	c0fa <assert_post_action>
    94a8:	e7c4      	b.n	9434 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 964c <z_impl_k_mutex_lock+0x22c>
    94ae:	238e      	movs	r3, #142	; 0x8e
    94b0:	4642      	mov	r2, r8
    94b2:	4967      	ldr	r1, [pc, #412]	; (9650 <z_impl_k_mutex_lock+0x230>)
    94b4:	4863      	ldr	r0, [pc, #396]	; (9644 <z_impl_k_mutex_lock+0x224>)
    94b6:	f002 fe27 	bl	c108 <assert_print>
    94ba:	495e      	ldr	r1, [pc, #376]	; (9634 <z_impl_k_mutex_lock+0x214>)
    94bc:	4865      	ldr	r0, [pc, #404]	; (9654 <z_impl_k_mutex_lock+0x234>)
    94be:	f002 fe23 	bl	c108 <assert_print>
    94c2:	218e      	movs	r1, #142	; 0x8e
    94c4:	4640      	mov	r0, r8
    94c6:	f002 fe18 	bl	c0fa <assert_post_action>
    94ca:	e7c0      	b.n	944e <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    94cc:	68a2      	ldr	r2, [r4, #8]
    94ce:	4b5a      	ldr	r3, [pc, #360]	; (9638 <z_impl_k_mutex_lock+0x218>)
    94d0:	689b      	ldr	r3, [r3, #8]
    94d2:	429a      	cmp	r2, r3
    94d4:	d0c1      	beq.n	945a <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    94d6:	ea55 0106 	orrs.w	r1, r5, r6
    94da:	bf0c      	ite	eq
    94dc:	f04f 0801 	moveq.w	r8, #1
    94e0:	f04f 0800 	movne.w	r8, #0
    94e4:	d04b      	beq.n	957e <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    94e6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    94ea:	4649      	mov	r1, r9
    94ec:	f993 000e 	ldrsb.w	r0, [r3, #14]
    94f0:	f003 fd13 	bl	cf1a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    94f4:	4581      	cmp	r9, r0
    94f6:	dc5d      	bgt.n	95b4 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    94f8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    94fc:	9600      	str	r6, [sp, #0]
    94fe:	9501      	str	r5, [sp, #4]
    9500:	4622      	mov	r2, r4
    9502:	4639      	mov	r1, r7
    9504:	484b      	ldr	r0, [pc, #300]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9506:	f000 ffe7 	bl	a4d8 <z_pend_curr>
	if (got_mutex == 0) {
    950a:	2800      	cmp	r0, #0
    950c:	d0bb      	beq.n	9486 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    950e:	f04f 0320 	mov.w	r3, #32
    9512:	f3ef 8511 	mrs	r5, BASEPRI
    9516:	f383 8812 	msr	BASEPRI_MAX, r3
    951a:	f3bf 8f6f 	isb	sy
    951e:	4845      	ldr	r0, [pc, #276]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9520:	f7ff fd3e 	bl	8fa0 <z_spin_lock_valid>
    9524:	2800      	cmp	r0, #0
    9526:	d04b      	beq.n	95c0 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    9528:	4842      	ldr	r0, [pc, #264]	; (9634 <z_impl_k_mutex_lock+0x214>)
    952a:	f7ff fd59 	bl	8fe0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    952e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9530:	42a3      	cmp	r3, r4
    9532:	d055      	beq.n	95e0 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9534:	2b00      	cmp	r3, #0
    9536:	d053      	beq.n	95e0 <z_impl_k_mutex_lock+0x1c0>
    9538:	6921      	ldr	r1, [r4, #16]
    953a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    953e:	f003 fcec 	bl	cf1a <new_prio_for_inheritance>
    9542:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    9544:	4620      	mov	r0, r4
    9546:	f003 fcf3 	bl	cf30 <adjust_owner_prio>
    954a:	2800      	cmp	r0, #0
    954c:	d14a      	bne.n	95e4 <z_impl_k_mutex_lock+0x1c4>
    954e:	f1b9 0f00 	cmp.w	r9, #0
    9552:	d049      	beq.n	95e8 <z_impl_k_mutex_lock+0x1c8>
    9554:	f04f 0801 	mov.w	r8, #1
    9558:	e046      	b.n	95e8 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    955a:	6923      	ldr	r3, [r4, #16]
    955c:	e783      	b.n	9466 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    955e:	4c3b      	ldr	r4, [pc, #236]	; (964c <z_impl_k_mutex_lock+0x22c>)
    9560:	23b9      	movs	r3, #185	; 0xb9
    9562:	4622      	mov	r2, r4
    9564:	493c      	ldr	r1, [pc, #240]	; (9658 <z_impl_k_mutex_lock+0x238>)
    9566:	4837      	ldr	r0, [pc, #220]	; (9644 <z_impl_k_mutex_lock+0x224>)
    9568:	f002 fdce 	bl	c108 <assert_print>
    956c:	4931      	ldr	r1, [pc, #196]	; (9634 <z_impl_k_mutex_lock+0x214>)
    956e:	483b      	ldr	r0, [pc, #236]	; (965c <z_impl_k_mutex_lock+0x23c>)
    9570:	f002 fdca 	bl	c108 <assert_print>
    9574:	21b9      	movs	r1, #185	; 0xb9
    9576:	4620      	mov	r0, r4
    9578:	f002 fdbf 	bl	c0fa <assert_post_action>
    957c:	e77e      	b.n	947c <z_impl_k_mutex_lock+0x5c>
    957e:	482d      	ldr	r0, [pc, #180]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9580:	f7ff fd1e 	bl	8fc0 <z_spin_unlock_valid>
    9584:	b130      	cbz	r0, 9594 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    9586:	f387 8811 	msr	BASEPRI, r7
    958a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    958e:	f06f 000f 	mvn.w	r0, #15
    9592:	e778      	b.n	9486 <z_impl_k_mutex_lock+0x66>
    9594:	4c2d      	ldr	r4, [pc, #180]	; (964c <z_impl_k_mutex_lock+0x22c>)
    9596:	23b9      	movs	r3, #185	; 0xb9
    9598:	4622      	mov	r2, r4
    959a:	492f      	ldr	r1, [pc, #188]	; (9658 <z_impl_k_mutex_lock+0x238>)
    959c:	4829      	ldr	r0, [pc, #164]	; (9644 <z_impl_k_mutex_lock+0x224>)
    959e:	f002 fdb3 	bl	c108 <assert_print>
    95a2:	4924      	ldr	r1, [pc, #144]	; (9634 <z_impl_k_mutex_lock+0x214>)
    95a4:	482d      	ldr	r0, [pc, #180]	; (965c <z_impl_k_mutex_lock+0x23c>)
    95a6:	f002 fdaf 	bl	c108 <assert_print>
    95aa:	21b9      	movs	r1, #185	; 0xb9
    95ac:	4620      	mov	r0, r4
    95ae:	f002 fda4 	bl	c0fa <assert_post_action>
    95b2:	e7e8      	b.n	9586 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    95b4:	4601      	mov	r1, r0
    95b6:	4620      	mov	r0, r4
    95b8:	f003 fcba 	bl	cf30 <adjust_owner_prio>
    95bc:	4681      	mov	r9, r0
    95be:	e79d      	b.n	94fc <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95c0:	4e22      	ldr	r6, [pc, #136]	; (964c <z_impl_k_mutex_lock+0x22c>)
    95c2:	238e      	movs	r3, #142	; 0x8e
    95c4:	4632      	mov	r2, r6
    95c6:	4922      	ldr	r1, [pc, #136]	; (9650 <z_impl_k_mutex_lock+0x230>)
    95c8:	481e      	ldr	r0, [pc, #120]	; (9644 <z_impl_k_mutex_lock+0x224>)
    95ca:	f002 fd9d 	bl	c108 <assert_print>
    95ce:	4919      	ldr	r1, [pc, #100]	; (9634 <z_impl_k_mutex_lock+0x214>)
    95d0:	4820      	ldr	r0, [pc, #128]	; (9654 <z_impl_k_mutex_lock+0x234>)
    95d2:	f002 fd99 	bl	c108 <assert_print>
    95d6:	218e      	movs	r1, #142	; 0x8e
    95d8:	4630      	mov	r0, r6
    95da:	f002 fd8e 	bl	c0fa <assert_post_action>
    95de:	e7a3      	b.n	9528 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    95e0:	6921      	ldr	r1, [r4, #16]
    95e2:	e7af      	b.n	9544 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    95e4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    95e8:	f1b8 0f00 	cmp.w	r8, #0
    95ec:	d006      	beq.n	95fc <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    95ee:	4629      	mov	r1, r5
    95f0:	4810      	ldr	r0, [pc, #64]	; (9634 <z_impl_k_mutex_lock+0x214>)
    95f2:	f000 faf1 	bl	9bd8 <z_reschedule>
	return -EAGAIN;
    95f6:	f06f 000a 	mvn.w	r0, #10
    95fa:	e744      	b.n	9486 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95fc:	480d      	ldr	r0, [pc, #52]	; (9634 <z_impl_k_mutex_lock+0x214>)
    95fe:	f7ff fcdf 	bl	8fc0 <z_spin_unlock_valid>
    9602:	b130      	cbz	r0, 9612 <z_impl_k_mutex_lock+0x1f2>
    9604:	f385 8811 	msr	BASEPRI, r5
    9608:	f3bf 8f6f 	isb	sy
    960c:	f06f 000a 	mvn.w	r0, #10
    9610:	e739      	b.n	9486 <z_impl_k_mutex_lock+0x66>
    9612:	4c0e      	ldr	r4, [pc, #56]	; (964c <z_impl_k_mutex_lock+0x22c>)
    9614:	23b9      	movs	r3, #185	; 0xb9
    9616:	4622      	mov	r2, r4
    9618:	490f      	ldr	r1, [pc, #60]	; (9658 <z_impl_k_mutex_lock+0x238>)
    961a:	480a      	ldr	r0, [pc, #40]	; (9644 <z_impl_k_mutex_lock+0x224>)
    961c:	f002 fd74 	bl	c108 <assert_print>
    9620:	4904      	ldr	r1, [pc, #16]	; (9634 <z_impl_k_mutex_lock+0x214>)
    9622:	480e      	ldr	r0, [pc, #56]	; (965c <z_impl_k_mutex_lock+0x23c>)
    9624:	f002 fd70 	bl	c108 <assert_print>
    9628:	21b9      	movs	r1, #185	; 0xb9
    962a:	4620      	mov	r0, r4
    962c:	f002 fd65 	bl	c0fa <assert_post_action>
    9630:	e7e8      	b.n	9604 <z_impl_k_mutex_lock+0x1e4>
    9632:	bf00      	nop
    9634:	20001190 	.word	0x20001190
    9638:	20001160 	.word	0x20001160
    963c:	0000f4ec 	.word	0x0000f4ec
    9640:	0000f434 	.word	0x0000f434
    9644:	0000d4bc 	.word	0x0000d4bc
    9648:	0000f510 	.word	0x0000f510
    964c:	0000dd4c 	.word	0x0000dd4c
    9650:	0000ddac 	.word	0x0000ddac
    9654:	0000ddc4 	.word	0x0000ddc4
    9658:	0000dd7c 	.word	0x0000dd7c
    965c:	0000dd94 	.word	0x0000dd94

00009660 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9660:	b570      	push	{r4, r5, r6, lr}
    9662:	4604      	mov	r4, r0
    9664:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9668:	bb03      	cbnz	r3, 96ac <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    966a:	68a3      	ldr	r3, [r4, #8]
    966c:	2b00      	cmp	r3, #0
    966e:	f000 80a6 	beq.w	97be <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9672:	4a56      	ldr	r2, [pc, #344]	; (97cc <z_impl_k_mutex_unlock+0x16c>)
    9674:	6892      	ldr	r2, [r2, #8]
    9676:	4293      	cmp	r3, r2
    9678:	f040 80a4 	bne.w	97c4 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    967c:	68e3      	ldr	r3, [r4, #12]
    967e:	b323      	cbz	r3, 96ca <z_impl_k_mutex_unlock+0x6a>
    9680:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    9684:	bb6b      	cbnz	r3, 96e2 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9686:	4b51      	ldr	r3, [pc, #324]	; (97cc <z_impl_k_mutex_unlock+0x16c>)
    9688:	689b      	ldr	r3, [r3, #8]
    968a:	7bdb      	ldrb	r3, [r3, #15]
    968c:	2b01      	cmp	r3, #1
    968e:	d037      	beq.n	9700 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    9690:	4b4e      	ldr	r3, [pc, #312]	; (97cc <z_impl_k_mutex_unlock+0x16c>)
    9692:	689a      	ldr	r2, [r3, #8]
    9694:	7bd3      	ldrb	r3, [r2, #15]
    9696:	3b01      	subs	r3, #1
    9698:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    969a:	68e3      	ldr	r3, [r4, #12]
    969c:	2b01      	cmp	r3, #1
    969e:	d93e      	bls.n	971e <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    96a0:	3b01      	subs	r3, #1
    96a2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    96a4:	f001 f872 	bl	a78c <k_sched_unlock>

	return 0;
    96a8:	2000      	movs	r0, #0
}
    96aa:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    96ac:	4d48      	ldr	r5, [pc, #288]	; (97d0 <z_impl_k_mutex_unlock+0x170>)
    96ae:	23c7      	movs	r3, #199	; 0xc7
    96b0:	462a      	mov	r2, r5
    96b2:	4948      	ldr	r1, [pc, #288]	; (97d4 <z_impl_k_mutex_unlock+0x174>)
    96b4:	4848      	ldr	r0, [pc, #288]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    96b6:	f002 fd27 	bl	c108 <assert_print>
    96ba:	4848      	ldr	r0, [pc, #288]	; (97dc <z_impl_k_mutex_unlock+0x17c>)
    96bc:	f002 fd24 	bl	c108 <assert_print>
    96c0:	21c7      	movs	r1, #199	; 0xc7
    96c2:	4628      	mov	r0, r5
    96c4:	f002 fd19 	bl	c0fa <assert_post_action>
    96c8:	e7cf      	b.n	966a <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    96ca:	4d41      	ldr	r5, [pc, #260]	; (97d0 <z_impl_k_mutex_unlock+0x170>)
    96cc:	23df      	movs	r3, #223	; 0xdf
    96ce:	462a      	mov	r2, r5
    96d0:	4943      	ldr	r1, [pc, #268]	; (97e0 <z_impl_k_mutex_unlock+0x180>)
    96d2:	4841      	ldr	r0, [pc, #260]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    96d4:	f002 fd18 	bl	c108 <assert_print>
    96d8:	21df      	movs	r1, #223	; 0xdf
    96da:	4628      	mov	r0, r5
    96dc:	f002 fd0d 	bl	c0fa <assert_post_action>
    96e0:	e7ce      	b.n	9680 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    96e2:	4d40      	ldr	r5, [pc, #256]	; (97e4 <z_impl_k_mutex_unlock+0x184>)
    96e4:	23fd      	movs	r3, #253	; 0xfd
    96e6:	462a      	mov	r2, r5
    96e8:	493a      	ldr	r1, [pc, #232]	; (97d4 <z_impl_k_mutex_unlock+0x174>)
    96ea:	483b      	ldr	r0, [pc, #236]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    96ec:	f002 fd0c 	bl	c108 <assert_print>
    96f0:	483d      	ldr	r0, [pc, #244]	; (97e8 <z_impl_k_mutex_unlock+0x188>)
    96f2:	f002 fd09 	bl	c108 <assert_print>
    96f6:	21fd      	movs	r1, #253	; 0xfd
    96f8:	4628      	mov	r0, r5
    96fa:	f002 fcfe 	bl	c0fa <assert_post_action>
    96fe:	e7c2      	b.n	9686 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9700:	4d38      	ldr	r5, [pc, #224]	; (97e4 <z_impl_k_mutex_unlock+0x184>)
    9702:	23fe      	movs	r3, #254	; 0xfe
    9704:	462a      	mov	r2, r5
    9706:	4939      	ldr	r1, [pc, #228]	; (97ec <z_impl_k_mutex_unlock+0x18c>)
    9708:	4833      	ldr	r0, [pc, #204]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    970a:	f002 fcfd 	bl	c108 <assert_print>
    970e:	4836      	ldr	r0, [pc, #216]	; (97e8 <z_impl_k_mutex_unlock+0x188>)
    9710:	f002 fcfa 	bl	c108 <assert_print>
    9714:	21fe      	movs	r1, #254	; 0xfe
    9716:	4628      	mov	r0, r5
    9718:	f002 fcef 	bl	c0fa <assert_post_action>
    971c:	e7b8      	b.n	9690 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    971e:	f04f 0320 	mov.w	r3, #32
    9722:	f3ef 8511 	mrs	r5, BASEPRI
    9726:	f383 8812 	msr	BASEPRI_MAX, r3
    972a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    972e:	4830      	ldr	r0, [pc, #192]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    9730:	f7ff fc36 	bl	8fa0 <z_spin_lock_valid>
    9734:	b1c0      	cbz	r0, 9768 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    9736:	482e      	ldr	r0, [pc, #184]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    9738:	f7ff fc52 	bl	8fe0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    973c:	6921      	ldr	r1, [r4, #16]
    973e:	4620      	mov	r0, r4
    9740:	f003 fbf6 	bl	cf30 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9744:	4620      	mov	r0, r4
    9746:	f001 f963 	bl	aa10 <z_unpend_first_thread>
	mutex->owner = new_owner;
    974a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    974c:	b1e0      	cbz	r0, 9788 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    974e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9752:	6123      	str	r3, [r4, #16]
    9754:	2300      	movs	r3, #0
    9756:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    975a:	f000 fce1 	bl	a120 <z_ready_thread>
		z_reschedule(&lock, key);
    975e:	4629      	mov	r1, r5
    9760:	4823      	ldr	r0, [pc, #140]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    9762:	f000 fa39 	bl	9bd8 <z_reschedule>
    9766:	e79d      	b.n	96a4 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9768:	4e22      	ldr	r6, [pc, #136]	; (97f4 <z_impl_k_mutex_unlock+0x194>)
    976a:	238e      	movs	r3, #142	; 0x8e
    976c:	4632      	mov	r2, r6
    976e:	4922      	ldr	r1, [pc, #136]	; (97f8 <z_impl_k_mutex_unlock+0x198>)
    9770:	4819      	ldr	r0, [pc, #100]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    9772:	f002 fcc9 	bl	c108 <assert_print>
    9776:	491e      	ldr	r1, [pc, #120]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    9778:	4820      	ldr	r0, [pc, #128]	; (97fc <z_impl_k_mutex_unlock+0x19c>)
    977a:	f002 fcc5 	bl	c108 <assert_print>
    977e:	218e      	movs	r1, #142	; 0x8e
    9780:	4630      	mov	r0, r6
    9782:	f002 fcba 	bl	c0fa <assert_post_action>
    9786:	e7d6      	b.n	9736 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    9788:	2300      	movs	r3, #0
    978a:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    978c:	4818      	ldr	r0, [pc, #96]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    978e:	f7ff fc17 	bl	8fc0 <z_spin_unlock_valid>
    9792:	b120      	cbz	r0, 979e <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    9794:	f385 8811 	msr	BASEPRI, r5
    9798:	f3bf 8f6f 	isb	sy
    979c:	e782      	b.n	96a4 <z_impl_k_mutex_unlock+0x44>
    979e:	4c15      	ldr	r4, [pc, #84]	; (97f4 <z_impl_k_mutex_unlock+0x194>)
    97a0:	23b9      	movs	r3, #185	; 0xb9
    97a2:	4622      	mov	r2, r4
    97a4:	4916      	ldr	r1, [pc, #88]	; (9800 <z_impl_k_mutex_unlock+0x1a0>)
    97a6:	480c      	ldr	r0, [pc, #48]	; (97d8 <z_impl_k_mutex_unlock+0x178>)
    97a8:	f002 fcae 	bl	c108 <assert_print>
    97ac:	4910      	ldr	r1, [pc, #64]	; (97f0 <z_impl_k_mutex_unlock+0x190>)
    97ae:	4815      	ldr	r0, [pc, #84]	; (9804 <z_impl_k_mutex_unlock+0x1a4>)
    97b0:	f002 fcaa 	bl	c108 <assert_print>
    97b4:	21b9      	movs	r1, #185	; 0xb9
    97b6:	4620      	mov	r0, r4
    97b8:	f002 fc9f 	bl	c0fa <assert_post_action>
    97bc:	e7ea      	b.n	9794 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    97be:	f06f 0015 	mvn.w	r0, #21
    97c2:	e772      	b.n	96aa <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    97c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97c8:	e76f      	b.n	96aa <z_impl_k_mutex_unlock+0x4a>
    97ca:	bf00      	nop
    97cc:	20001160 	.word	0x20001160
    97d0:	0000f4ec 	.word	0x0000f4ec
    97d4:	0000f434 	.word	0x0000f434
    97d8:	0000d4bc 	.word	0x0000d4bc
    97dc:	0000f510 	.word	0x0000f510
    97e0:	0000f538 	.word	0x0000f538
    97e4:	0000f550 	.word	0x0000f550
    97e8:	0000f57c 	.word	0x0000f57c
    97ec:	0000f580 	.word	0x0000f580
    97f0:	20001190 	.word	0x20001190
    97f4:	0000dd4c 	.word	0x0000dd4c
    97f8:	0000ddac 	.word	0x0000ddac
    97fc:	0000ddc4 	.word	0x0000ddc4
    9800:	0000dd7c 	.word	0x0000dd7c
    9804:	0000dd94 	.word	0x0000dd94

00009808 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9808:	b570      	push	{r4, r5, r6, lr}
    980a:	4604      	mov	r4, r0
	__asm__ volatile(
    980c:	f04f 0320 	mov.w	r3, #32
    9810:	f3ef 8511 	mrs	r5, BASEPRI
    9814:	f383 8812 	msr	BASEPRI_MAX, r3
    9818:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    981c:	4817      	ldr	r0, [pc, #92]	; (987c <z_impl_k_sem_give+0x74>)
    981e:	f7ff fbbf 	bl	8fa0 <z_spin_lock_valid>
    9822:	b180      	cbz	r0, 9846 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    9824:	4815      	ldr	r0, [pc, #84]	; (987c <z_impl_k_sem_give+0x74>)
    9826:	f7ff fbdb 	bl	8fe0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    982a:	4620      	mov	r0, r4
    982c:	f001 f8f0 	bl	aa10 <z_unpend_first_thread>

	if (thread != NULL) {
    9830:	b1c8      	cbz	r0, 9866 <z_impl_k_sem_give+0x5e>
    9832:	2200      	movs	r2, #0
    9834:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    9838:	f000 fc72 	bl	a120 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    983c:	4629      	mov	r1, r5
    983e:	480f      	ldr	r0, [pc, #60]	; (987c <z_impl_k_sem_give+0x74>)
    9840:	f000 f9ca 	bl	9bd8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9844:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9846:	4e0e      	ldr	r6, [pc, #56]	; (9880 <z_impl_k_sem_give+0x78>)
    9848:	238e      	movs	r3, #142	; 0x8e
    984a:	4632      	mov	r2, r6
    984c:	490d      	ldr	r1, [pc, #52]	; (9884 <z_impl_k_sem_give+0x7c>)
    984e:	480e      	ldr	r0, [pc, #56]	; (9888 <z_impl_k_sem_give+0x80>)
    9850:	f002 fc5a 	bl	c108 <assert_print>
    9854:	4909      	ldr	r1, [pc, #36]	; (987c <z_impl_k_sem_give+0x74>)
    9856:	480d      	ldr	r0, [pc, #52]	; (988c <z_impl_k_sem_give+0x84>)
    9858:	f002 fc56 	bl	c108 <assert_print>
    985c:	218e      	movs	r1, #142	; 0x8e
    985e:	4630      	mov	r0, r6
    9860:	f002 fc4b 	bl	c0fa <assert_post_action>
    9864:	e7de      	b.n	9824 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9866:	68a3      	ldr	r3, [r4, #8]
    9868:	68e2      	ldr	r2, [r4, #12]
    986a:	4293      	cmp	r3, r2
    986c:	d003      	beq.n	9876 <z_impl_k_sem_give+0x6e>
    986e:	2201      	movs	r2, #1
    9870:	4413      	add	r3, r2
    9872:	60a3      	str	r3, [r4, #8]
}
    9874:	e7e2      	b.n	983c <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9876:	2200      	movs	r2, #0
    9878:	e7fa      	b.n	9870 <z_impl_k_sem_give+0x68>
    987a:	bf00      	nop
    987c:	20001194 	.word	0x20001194
    9880:	0000dd4c 	.word	0x0000dd4c
    9884:	0000ddac 	.word	0x0000ddac
    9888:	0000d4bc 	.word	0x0000d4bc
    988c:	0000ddc4 	.word	0x0000ddc4

00009890 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    9890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9894:	b082      	sub	sp, #8
    9896:	4604      	mov	r4, r0
    9898:	4617      	mov	r7, r2
    989a:	461d      	mov	r5, r3
    989c:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    98a0:	b111      	cbz	r1, 98a8 <z_impl_k_sem_take+0x18>
    98a2:	ea55 0302 	orrs.w	r3, r5, r2
    98a6:	d11f      	bne.n	98e8 <z_impl_k_sem_take+0x58>
    98a8:	f04f 0320 	mov.w	r3, #32
    98ac:	f3ef 8611 	mrs	r6, BASEPRI
    98b0:	f383 8812 	msr	BASEPRI_MAX, r3
    98b4:	f3bf 8f6f 	isb	sy
    98b8:	4836      	ldr	r0, [pc, #216]	; (9994 <z_impl_k_sem_take+0x104>)
    98ba:	f7ff fb71 	bl	8fa0 <z_spin_lock_valid>
    98be:	b310      	cbz	r0, 9906 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    98c0:	4834      	ldr	r0, [pc, #208]	; (9994 <z_impl_k_sem_take+0x104>)
    98c2:	f7ff fb8d 	bl	8fe0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    98c6:	68a1      	ldr	r1, [r4, #8]
    98c8:	2900      	cmp	r1, #0
    98ca:	d03d      	beq.n	9948 <z_impl_k_sem_take+0xb8>
		sem->count--;
    98cc:	3901      	subs	r1, #1
    98ce:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98d0:	4830      	ldr	r0, [pc, #192]	; (9994 <z_impl_k_sem_take+0x104>)
    98d2:	f7ff fb75 	bl	8fc0 <z_spin_unlock_valid>
    98d6:	b338      	cbz	r0, 9928 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    98d8:	f386 8811 	msr	BASEPRI, r6
    98dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    98e0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    98e2:	b002      	add	sp, #8
    98e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    98e8:	4e2b      	ldr	r6, [pc, #172]	; (9998 <z_impl_k_sem_take+0x108>)
    98ea:	2379      	movs	r3, #121	; 0x79
    98ec:	4632      	mov	r2, r6
    98ee:	492b      	ldr	r1, [pc, #172]	; (999c <z_impl_k_sem_take+0x10c>)
    98f0:	482b      	ldr	r0, [pc, #172]	; (99a0 <z_impl_k_sem_take+0x110>)
    98f2:	f002 fc09 	bl	c108 <assert_print>
    98f6:	482b      	ldr	r0, [pc, #172]	; (99a4 <z_impl_k_sem_take+0x114>)
    98f8:	f002 fc06 	bl	c108 <assert_print>
    98fc:	2179      	movs	r1, #121	; 0x79
    98fe:	4630      	mov	r0, r6
    9900:	f002 fbfb 	bl	c0fa <assert_post_action>
    9904:	e7d0      	b.n	98a8 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9906:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 99a8 <z_impl_k_sem_take+0x118>
    990a:	238e      	movs	r3, #142	; 0x8e
    990c:	4642      	mov	r2, r8
    990e:	4927      	ldr	r1, [pc, #156]	; (99ac <z_impl_k_sem_take+0x11c>)
    9910:	4823      	ldr	r0, [pc, #140]	; (99a0 <z_impl_k_sem_take+0x110>)
    9912:	f002 fbf9 	bl	c108 <assert_print>
    9916:	491f      	ldr	r1, [pc, #124]	; (9994 <z_impl_k_sem_take+0x104>)
    9918:	4825      	ldr	r0, [pc, #148]	; (99b0 <z_impl_k_sem_take+0x120>)
    991a:	f002 fbf5 	bl	c108 <assert_print>
    991e:	218e      	movs	r1, #142	; 0x8e
    9920:	4640      	mov	r0, r8
    9922:	f002 fbea 	bl	c0fa <assert_post_action>
    9926:	e7cb      	b.n	98c0 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9928:	4c1f      	ldr	r4, [pc, #124]	; (99a8 <z_impl_k_sem_take+0x118>)
    992a:	23b9      	movs	r3, #185	; 0xb9
    992c:	4622      	mov	r2, r4
    992e:	4921      	ldr	r1, [pc, #132]	; (99b4 <z_impl_k_sem_take+0x124>)
    9930:	481b      	ldr	r0, [pc, #108]	; (99a0 <z_impl_k_sem_take+0x110>)
    9932:	f002 fbe9 	bl	c108 <assert_print>
    9936:	4917      	ldr	r1, [pc, #92]	; (9994 <z_impl_k_sem_take+0x104>)
    9938:	481f      	ldr	r0, [pc, #124]	; (99b8 <z_impl_k_sem_take+0x128>)
    993a:	f002 fbe5 	bl	c108 <assert_print>
    993e:	21b9      	movs	r1, #185	; 0xb9
    9940:	4620      	mov	r0, r4
    9942:	f002 fbda 	bl	c0fa <assert_post_action>
    9946:	e7c7      	b.n	98d8 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9948:	ea55 0307 	orrs.w	r3, r5, r7
    994c:	d007      	beq.n	995e <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    994e:	9700      	str	r7, [sp, #0]
    9950:	9501      	str	r5, [sp, #4]
    9952:	4622      	mov	r2, r4
    9954:	4631      	mov	r1, r6
    9956:	480f      	ldr	r0, [pc, #60]	; (9994 <z_impl_k_sem_take+0x104>)
    9958:	f000 fdbe 	bl	a4d8 <z_pend_curr>
	return ret;
    995c:	e7c1      	b.n	98e2 <z_impl_k_sem_take+0x52>
    995e:	480d      	ldr	r0, [pc, #52]	; (9994 <z_impl_k_sem_take+0x104>)
    9960:	f7ff fb2e 	bl	8fc0 <z_spin_unlock_valid>
    9964:	b130      	cbz	r0, 9974 <z_impl_k_sem_take+0xe4>
    9966:	f386 8811 	msr	BASEPRI, r6
    996a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    996e:	f06f 000f 	mvn.w	r0, #15
    9972:	e7b6      	b.n	98e2 <z_impl_k_sem_take+0x52>
    9974:	4c0c      	ldr	r4, [pc, #48]	; (99a8 <z_impl_k_sem_take+0x118>)
    9976:	23b9      	movs	r3, #185	; 0xb9
    9978:	4622      	mov	r2, r4
    997a:	490e      	ldr	r1, [pc, #56]	; (99b4 <z_impl_k_sem_take+0x124>)
    997c:	4808      	ldr	r0, [pc, #32]	; (99a0 <z_impl_k_sem_take+0x110>)
    997e:	f002 fbc3 	bl	c108 <assert_print>
    9982:	4904      	ldr	r1, [pc, #16]	; (9994 <z_impl_k_sem_take+0x104>)
    9984:	480c      	ldr	r0, [pc, #48]	; (99b8 <z_impl_k_sem_take+0x128>)
    9986:	f002 fbbf 	bl	c108 <assert_print>
    998a:	21b9      	movs	r1, #185	; 0xb9
    998c:	4620      	mov	r0, r4
    998e:	f002 fbb4 	bl	c0fa <assert_post_action>
    9992:	e7e8      	b.n	9966 <z_impl_k_sem_take+0xd6>
    9994:	20001194 	.word	0x20001194
    9998:	0000f5b4 	.word	0x0000f5b4
    999c:	0000f5d4 	.word	0x0000f5d4
    99a0:	0000d4bc 	.word	0x0000d4bc
    99a4:	0000f57c 	.word	0x0000f57c
    99a8:	0000dd4c 	.word	0x0000dd4c
    99ac:	0000ddac 	.word	0x0000ddac
    99b0:	0000ddc4 	.word	0x0000ddc4
    99b4:	0000dd7c 	.word	0x0000dd7c
    99b8:	0000dd94 	.word	0x0000dd94

000099bc <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    99bc:	b538      	push	{r3, r4, r5, lr}
    99be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    99c0:	6883      	ldr	r3, [r0, #8]
    99c2:	b10b      	cbz	r3, 99c8 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    99c4:	68a0      	ldr	r0, [r4, #8]
    99c6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    99c8:	4d06      	ldr	r5, [pc, #24]	; (99e4 <pended_on_thread+0x28>)
    99ca:	f240 23b9 	movw	r3, #697	; 0x2b9
    99ce:	462a      	mov	r2, r5
    99d0:	4905      	ldr	r1, [pc, #20]	; (99e8 <pended_on_thread+0x2c>)
    99d2:	4806      	ldr	r0, [pc, #24]	; (99ec <pended_on_thread+0x30>)
    99d4:	f002 fb98 	bl	c108 <assert_print>
    99d8:	f240 21b9 	movw	r1, #697	; 0x2b9
    99dc:	4628      	mov	r0, r5
    99de:	f002 fb8c 	bl	c0fa <assert_post_action>
    99e2:	e7ef      	b.n	99c4 <pended_on_thread+0x8>
    99e4:	0000f624 	.word	0x0000f624
    99e8:	0000f648 	.word	0x0000f648
    99ec:	0000d4bc 	.word	0x0000d4bc

000099f0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    99f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    99f4:	bf08      	it	eq
    99f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    99fa:	d100      	bne.n	99fe <add_thread_timeout+0xe>
    99fc:	4770      	bx	lr
{
    99fe:	b508      	push	{r3, lr}
    9a00:	4902      	ldr	r1, [pc, #8]	; (9a0c <add_thread_timeout+0x1c>)
    9a02:	3018      	adds	r0, #24
    9a04:	f001 fb36 	bl	b074 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    9a08:	bd08      	pop	{r3, pc}
    9a0a:	bf00      	nop
    9a0c:	0000a27d 	.word	0x0000a27d

00009a10 <z_reset_time_slice>:
{
    9a10:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    9a12:	4b07      	ldr	r3, [pc, #28]	; (9a30 <z_reset_time_slice+0x20>)
    9a14:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    9a16:	b904      	cbnz	r4, 9a1a <z_reset_time_slice+0xa>
}
    9a18:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9a1a:	f7fc ff29 	bl	6870 <sys_clock_elapsed>
    9a1e:	4404      	add	r4, r0
    9a20:	4b04      	ldr	r3, [pc, #16]	; (9a34 <z_reset_time_slice+0x24>)
    9a22:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9a24:	2100      	movs	r1, #0
    9a26:	4b02      	ldr	r3, [pc, #8]	; (9a30 <z_reset_time_slice+0x20>)
    9a28:	6818      	ldr	r0, [r3, #0]
    9a2a:	f001 fcb3 	bl	b394 <z_set_timeout_expiry>
}
    9a2e:	e7f3      	b.n	9a18 <z_reset_time_slice+0x8>
    9a30:	200011a4 	.word	0x200011a4
    9a34:	20001160 	.word	0x20001160

00009a38 <k_sched_time_slice_set>:
{
    9a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a3c:	4604      	mov	r4, r0
    9a3e:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    9a40:	2700      	movs	r7, #0
	__asm__ volatile(
    9a42:	f04f 0320 	mov.w	r3, #32
    9a46:	f3ef 8611 	mrs	r6, BASEPRI
    9a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a52:	482a      	ldr	r0, [pc, #168]	; (9afc <k_sched_time_slice_set+0xc4>)
    9a54:	f7ff faa4 	bl	8fa0 <z_spin_lock_valid>
    9a58:	b118      	cbz	r0, 9a62 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    9a5a:	4828      	ldr	r0, [pc, #160]	; (9afc <k_sched_time_slice_set+0xc4>)
    9a5c:	f7ff fac0 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    9a60:	e023      	b.n	9aaa <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a62:	f8df 809c 	ldr.w	r8, [pc, #156]	; 9b00 <k_sched_time_slice_set+0xc8>
    9a66:	238e      	movs	r3, #142	; 0x8e
    9a68:	4642      	mov	r2, r8
    9a6a:	4926      	ldr	r1, [pc, #152]	; (9b04 <k_sched_time_slice_set+0xcc>)
    9a6c:	4826      	ldr	r0, [pc, #152]	; (9b08 <k_sched_time_slice_set+0xd0>)
    9a6e:	f002 fb4b 	bl	c108 <assert_print>
    9a72:	4922      	ldr	r1, [pc, #136]	; (9afc <k_sched_time_slice_set+0xc4>)
    9a74:	4825      	ldr	r0, [pc, #148]	; (9b0c <k_sched_time_slice_set+0xd4>)
    9a76:	f002 fb47 	bl	c108 <assert_print>
    9a7a:	218e      	movs	r1, #142	; 0x8e
    9a7c:	4640      	mov	r0, r8
    9a7e:	f002 fb3c 	bl	c0fa <assert_post_action>
    9a82:	e7ea      	b.n	9a5a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    9a84:	2802      	cmp	r0, #2
    9a86:	bfb8      	it	lt
    9a88:	2002      	movlt	r0, #2
    9a8a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    9a8c:	4b20      	ldr	r3, [pc, #128]	; (9b10 <k_sched_time_slice_set+0xd8>)
    9a8e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9a90:	4b20      	ldr	r3, [pc, #128]	; (9b14 <k_sched_time_slice_set+0xdc>)
    9a92:	6898      	ldr	r0, [r3, #8]
    9a94:	f7ff ffbc 	bl	9a10 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a98:	4818      	ldr	r0, [pc, #96]	; (9afc <k_sched_time_slice_set+0xc4>)
    9a9a:	f7ff fa91 	bl	8fc0 <z_spin_unlock_valid>
    9a9e:	b1d0      	cbz	r0, 9ad6 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    9aa0:	f386 8811 	msr	BASEPRI, r6
    9aa4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9aa8:	2701      	movs	r7, #1
    9aaa:	bb27      	cbnz	r7, 9af6 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    9aac:	4b19      	ldr	r3, [pc, #100]	; (9b14 <k_sched_time_slice_set+0xdc>)
    9aae:	2200      	movs	r2, #0
    9ab0:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    9ab2:	0c61      	lsrs	r1, r4, #17
    9ab4:	03e3      	lsls	r3, r4, #15
    9ab6:	f240 30e7 	movw	r0, #999	; 0x3e7
    9aba:	1818      	adds	r0, r3, r0
    9abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9ac0:	f04f 0300 	mov.w	r3, #0
    9ac4:	f141 0100 	adc.w	r1, r1, #0
    9ac8:	f7f6 fcfc 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    9acc:	4b12      	ldr	r3, [pc, #72]	; (9b18 <k_sched_time_slice_set+0xe0>)
    9ace:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9ad0:	2c00      	cmp	r4, #0
    9ad2:	dcd7      	bgt.n	9a84 <k_sched_time_slice_set+0x4c>
    9ad4:	e7da      	b.n	9a8c <k_sched_time_slice_set+0x54>
    9ad6:	4f0a      	ldr	r7, [pc, #40]	; (9b00 <k_sched_time_slice_set+0xc8>)
    9ad8:	23b9      	movs	r3, #185	; 0xb9
    9ada:	463a      	mov	r2, r7
    9adc:	490f      	ldr	r1, [pc, #60]	; (9b1c <k_sched_time_slice_set+0xe4>)
    9ade:	480a      	ldr	r0, [pc, #40]	; (9b08 <k_sched_time_slice_set+0xd0>)
    9ae0:	f002 fb12 	bl	c108 <assert_print>
    9ae4:	4905      	ldr	r1, [pc, #20]	; (9afc <k_sched_time_slice_set+0xc4>)
    9ae6:	480e      	ldr	r0, [pc, #56]	; (9b20 <k_sched_time_slice_set+0xe8>)
    9ae8:	f002 fb0e 	bl	c108 <assert_print>
    9aec:	21b9      	movs	r1, #185	; 0xb9
    9aee:	4638      	mov	r0, r7
    9af0:	f002 fb03 	bl	c0fa <assert_post_action>
    9af4:	e7d4      	b.n	9aa0 <k_sched_time_slice_set+0x68>
}
    9af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9afa:	bf00      	nop
    9afc:	2000119c 	.word	0x2000119c
    9b00:	0000dd4c 	.word	0x0000dd4c
    9b04:	0000ddac 	.word	0x0000ddac
    9b08:	0000d4bc 	.word	0x0000d4bc
    9b0c:	0000ddc4 	.word	0x0000ddc4
    9b10:	200011a0 	.word	0x200011a0
    9b14:	20001160 	.word	0x20001160
    9b18:	200011a4 	.word	0x200011a4
    9b1c:	0000dd7c 	.word	0x0000dd7c
    9b20:	0000dd94 	.word	0x0000dd94

00009b24 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    9b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b26:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9b28:	2500      	movs	r5, #0
	__asm__ volatile(
    9b2a:	f04f 0320 	mov.w	r3, #32
    9b2e:	f3ef 8611 	mrs	r6, BASEPRI
    9b32:	f383 8812 	msr	BASEPRI_MAX, r3
    9b36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b3a:	4820      	ldr	r0, [pc, #128]	; (9bbc <z_unpend_thread_no_timeout+0x98>)
    9b3c:	f7ff fa30 	bl	8fa0 <z_spin_lock_valid>
    9b40:	b118      	cbz	r0, 9b4a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    9b42:	481e      	ldr	r0, [pc, #120]	; (9bbc <z_unpend_thread_no_timeout+0x98>)
    9b44:	f7ff fa4c 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    9b48:	e014      	b.n	9b74 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b4a:	4f1d      	ldr	r7, [pc, #116]	; (9bc0 <z_unpend_thread_no_timeout+0x9c>)
    9b4c:	238e      	movs	r3, #142	; 0x8e
    9b4e:	463a      	mov	r2, r7
    9b50:	491c      	ldr	r1, [pc, #112]	; (9bc4 <z_unpend_thread_no_timeout+0xa0>)
    9b52:	481d      	ldr	r0, [pc, #116]	; (9bc8 <z_unpend_thread_no_timeout+0xa4>)
    9b54:	f002 fad8 	bl	c108 <assert_print>
    9b58:	4918      	ldr	r1, [pc, #96]	; (9bbc <z_unpend_thread_no_timeout+0x98>)
    9b5a:	481c      	ldr	r0, [pc, #112]	; (9bcc <z_unpend_thread_no_timeout+0xa8>)
    9b5c:	f002 fad4 	bl	c108 <assert_print>
    9b60:	218e      	movs	r1, #142	; 0x8e
    9b62:	4638      	mov	r0, r7
    9b64:	f002 fac9 	bl	c0fa <assert_post_action>
    9b68:	e7eb      	b.n	9b42 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    9b6a:	f386 8811 	msr	BASEPRI, r6
    9b6e:	f3bf 8f6f 	isb	sy
    9b72:	2501      	movs	r5, #1
    9b74:	bb05      	cbnz	r5, 9bb8 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9b76:	4620      	mov	r0, r4
    9b78:	f7ff ff20 	bl	99bc <pended_on_thread>
    9b7c:	4621      	mov	r1, r4
    9b7e:	f000 f8fb 	bl	9d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9b82:	7b63      	ldrb	r3, [r4, #13]
    9b84:	f023 0302 	bic.w	r3, r3, #2
    9b88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9b8a:	2300      	movs	r3, #0
    9b8c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b8e:	480b      	ldr	r0, [pc, #44]	; (9bbc <z_unpend_thread_no_timeout+0x98>)
    9b90:	f7ff fa16 	bl	8fc0 <z_spin_unlock_valid>
    9b94:	2800      	cmp	r0, #0
    9b96:	d1e8      	bne.n	9b6a <z_unpend_thread_no_timeout+0x46>
    9b98:	4d09      	ldr	r5, [pc, #36]	; (9bc0 <z_unpend_thread_no_timeout+0x9c>)
    9b9a:	23b9      	movs	r3, #185	; 0xb9
    9b9c:	462a      	mov	r2, r5
    9b9e:	490c      	ldr	r1, [pc, #48]	; (9bd0 <z_unpend_thread_no_timeout+0xac>)
    9ba0:	4809      	ldr	r0, [pc, #36]	; (9bc8 <z_unpend_thread_no_timeout+0xa4>)
    9ba2:	f002 fab1 	bl	c108 <assert_print>
    9ba6:	4905      	ldr	r1, [pc, #20]	; (9bbc <z_unpend_thread_no_timeout+0x98>)
    9ba8:	480a      	ldr	r0, [pc, #40]	; (9bd4 <z_unpend_thread_no_timeout+0xb0>)
    9baa:	f002 faad 	bl	c108 <assert_print>
    9bae:	21b9      	movs	r1, #185	; 0xb9
    9bb0:	4628      	mov	r0, r5
    9bb2:	f002 faa2 	bl	c0fa <assert_post_action>
    9bb6:	e7d8      	b.n	9b6a <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    9bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bba:	bf00      	nop
    9bbc:	2000119c 	.word	0x2000119c
    9bc0:	0000dd4c 	.word	0x0000dd4c
    9bc4:	0000ddac 	.word	0x0000ddac
    9bc8:	0000d4bc 	.word	0x0000d4bc
    9bcc:	0000ddc4 	.word	0x0000ddc4
    9bd0:	0000dd7c 	.word	0x0000dd7c
    9bd4:	0000dd94 	.word	0x0000dd94

00009bd8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9bd8:	b570      	push	{r4, r5, r6, lr}
    9bda:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    9bdc:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9bde:	b921      	cbnz	r1, 9bea <z_reschedule+0x12>
    9be0:	f3ef 8305 	mrs	r3, IPSR
    9be4:	b913      	cbnz	r3, 9bec <z_reschedule+0x14>
    9be6:	2101      	movs	r1, #1
    9be8:	e000      	b.n	9bec <z_reschedule+0x14>
    9bea:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    9bec:	f011 0f01 	tst.w	r1, #1
    9bf0:	d01c      	beq.n	9c2c <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    9bf2:	4b1b      	ldr	r3, [pc, #108]	; (9c60 <z_reschedule+0x88>)
    9bf4:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    9bf6:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    9bf8:	429a      	cmp	r2, r3
    9bfa:	d017      	beq.n	9c2c <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bfc:	4620      	mov	r0, r4
    9bfe:	f7ff f9df 	bl	8fc0 <z_spin_unlock_valid>
    9c02:	b118      	cbz	r0, 9c0c <z_reschedule+0x34>
	ret = arch_swap(key);
    9c04:	4628      	mov	r0, r5
    9c06:	f7fa fc99 	bl	453c <arch_swap>
		z_swap(lock, key);
    9c0a:	e017      	b.n	9c3c <z_reschedule+0x64>
    9c0c:	4e15      	ldr	r6, [pc, #84]	; (9c64 <z_reschedule+0x8c>)
    9c0e:	23d0      	movs	r3, #208	; 0xd0
    9c10:	4632      	mov	r2, r6
    9c12:	4915      	ldr	r1, [pc, #84]	; (9c68 <z_reschedule+0x90>)
    9c14:	4815      	ldr	r0, [pc, #84]	; (9c6c <z_reschedule+0x94>)
    9c16:	f002 fa77 	bl	c108 <assert_print>
    9c1a:	4621      	mov	r1, r4
    9c1c:	4814      	ldr	r0, [pc, #80]	; (9c70 <z_reschedule+0x98>)
    9c1e:	f002 fa73 	bl	c108 <assert_print>
    9c22:	21d0      	movs	r1, #208	; 0xd0
    9c24:	4630      	mov	r0, r6
    9c26:	f002 fa68 	bl	c0fa <assert_post_action>
    9c2a:	e7eb      	b.n	9c04 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c2c:	4620      	mov	r0, r4
    9c2e:	f7ff f9c7 	bl	8fc0 <z_spin_unlock_valid>
    9c32:	b120      	cbz	r0, 9c3e <z_reschedule+0x66>
    9c34:	f385 8811 	msr	BASEPRI, r5
    9c38:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    9c3c:	bd70      	pop	{r4, r5, r6, pc}
    9c3e:	4e09      	ldr	r6, [pc, #36]	; (9c64 <z_reschedule+0x8c>)
    9c40:	23b9      	movs	r3, #185	; 0xb9
    9c42:	4632      	mov	r2, r6
    9c44:	4908      	ldr	r1, [pc, #32]	; (9c68 <z_reschedule+0x90>)
    9c46:	4809      	ldr	r0, [pc, #36]	; (9c6c <z_reschedule+0x94>)
    9c48:	f002 fa5e 	bl	c108 <assert_print>
    9c4c:	4621      	mov	r1, r4
    9c4e:	4808      	ldr	r0, [pc, #32]	; (9c70 <z_reschedule+0x98>)
    9c50:	f002 fa5a 	bl	c108 <assert_print>
    9c54:	21b9      	movs	r1, #185	; 0xb9
    9c56:	4630      	mov	r0, r6
    9c58:	f002 fa4f 	bl	c0fa <assert_post_action>
    9c5c:	e7ea      	b.n	9c34 <z_reschedule+0x5c>
    9c5e:	bf00      	nop
    9c60:	20001160 	.word	0x20001160
    9c64:	0000dd4c 	.word	0x0000dd4c
    9c68:	0000dd7c 	.word	0x0000dd7c
    9c6c:	0000d4bc 	.word	0x0000d4bc
    9c70:	0000dd94 	.word	0x0000dd94

00009c74 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    9c74:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9c76:	2400      	movs	r4, #0
	__asm__ volatile(
    9c78:	f04f 0320 	mov.w	r3, #32
    9c7c:	f3ef 8511 	mrs	r5, BASEPRI
    9c80:	f383 8812 	msr	BASEPRI_MAX, r3
    9c84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c88:	482f      	ldr	r0, [pc, #188]	; (9d48 <k_sched_lock+0xd4>)
    9c8a:	f7ff f989 	bl	8fa0 <z_spin_lock_valid>
    9c8e:	b118      	cbz	r0, 9c98 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    9c90:	482d      	ldr	r0, [pc, #180]	; (9d48 <k_sched_lock+0xd4>)
    9c92:	f7ff f9a5 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    9c96:	e022      	b.n	9cde <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c98:	4e2c      	ldr	r6, [pc, #176]	; (9d4c <k_sched_lock+0xd8>)
    9c9a:	238e      	movs	r3, #142	; 0x8e
    9c9c:	4632      	mov	r2, r6
    9c9e:	492c      	ldr	r1, [pc, #176]	; (9d50 <k_sched_lock+0xdc>)
    9ca0:	482c      	ldr	r0, [pc, #176]	; (9d54 <k_sched_lock+0xe0>)
    9ca2:	f002 fa31 	bl	c108 <assert_print>
    9ca6:	4928      	ldr	r1, [pc, #160]	; (9d48 <k_sched_lock+0xd4>)
    9ca8:	482b      	ldr	r0, [pc, #172]	; (9d58 <k_sched_lock+0xe4>)
    9caa:	f002 fa2d 	bl	c108 <assert_print>
    9cae:	218e      	movs	r1, #142	; 0x8e
    9cb0:	4630      	mov	r0, r6
    9cb2:	f002 fa22 	bl	c0fa <assert_post_action>
    9cb6:	e7eb      	b.n	9c90 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9cb8:	4b28      	ldr	r3, [pc, #160]	; (9d5c <k_sched_lock+0xe8>)
    9cba:	689b      	ldr	r3, [r3, #8]
    9cbc:	7bdb      	ldrb	r3, [r3, #15]
    9cbe:	2b01      	cmp	r3, #1
    9cc0:	d022      	beq.n	9d08 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    9cc2:	4b26      	ldr	r3, [pc, #152]	; (9d5c <k_sched_lock+0xe8>)
    9cc4:	689a      	ldr	r2, [r3, #8]
    9cc6:	7bd3      	ldrb	r3, [r2, #15]
    9cc8:	3b01      	subs	r3, #1
    9cca:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ccc:	481e      	ldr	r0, [pc, #120]	; (9d48 <k_sched_lock+0xd4>)
    9cce:	f7ff f977 	bl	8fc0 <z_spin_unlock_valid>
    9cd2:	b340      	cbz	r0, 9d26 <k_sched_lock+0xb2>
	__asm__ volatile(
    9cd4:	f385 8811 	msr	BASEPRI, r5
    9cd8:	f3bf 8f6f 	isb	sy
    9cdc:	2401      	movs	r4, #1
    9cde:	2c00      	cmp	r4, #0
    9ce0:	d131      	bne.n	9d46 <k_sched_lock+0xd2>
    9ce2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d0e6      	beq.n	9cb8 <k_sched_lock+0x44>
    9cea:	4c1d      	ldr	r4, [pc, #116]	; (9d60 <k_sched_lock+0xec>)
    9cec:	23fd      	movs	r3, #253	; 0xfd
    9cee:	4622      	mov	r2, r4
    9cf0:	491c      	ldr	r1, [pc, #112]	; (9d64 <k_sched_lock+0xf0>)
    9cf2:	4818      	ldr	r0, [pc, #96]	; (9d54 <k_sched_lock+0xe0>)
    9cf4:	f002 fa08 	bl	c108 <assert_print>
    9cf8:	481b      	ldr	r0, [pc, #108]	; (9d68 <k_sched_lock+0xf4>)
    9cfa:	f002 fa05 	bl	c108 <assert_print>
    9cfe:	21fd      	movs	r1, #253	; 0xfd
    9d00:	4620      	mov	r0, r4
    9d02:	f002 f9fa 	bl	c0fa <assert_post_action>
    9d06:	e7d7      	b.n	9cb8 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9d08:	4c15      	ldr	r4, [pc, #84]	; (9d60 <k_sched_lock+0xec>)
    9d0a:	23fe      	movs	r3, #254	; 0xfe
    9d0c:	4622      	mov	r2, r4
    9d0e:	4917      	ldr	r1, [pc, #92]	; (9d6c <k_sched_lock+0xf8>)
    9d10:	4810      	ldr	r0, [pc, #64]	; (9d54 <k_sched_lock+0xe0>)
    9d12:	f002 f9f9 	bl	c108 <assert_print>
    9d16:	4814      	ldr	r0, [pc, #80]	; (9d68 <k_sched_lock+0xf4>)
    9d18:	f002 f9f6 	bl	c108 <assert_print>
    9d1c:	21fe      	movs	r1, #254	; 0xfe
    9d1e:	4620      	mov	r0, r4
    9d20:	f002 f9eb 	bl	c0fa <assert_post_action>
    9d24:	e7cd      	b.n	9cc2 <k_sched_lock+0x4e>
    9d26:	4c09      	ldr	r4, [pc, #36]	; (9d4c <k_sched_lock+0xd8>)
    9d28:	23b9      	movs	r3, #185	; 0xb9
    9d2a:	4622      	mov	r2, r4
    9d2c:	4910      	ldr	r1, [pc, #64]	; (9d70 <k_sched_lock+0xfc>)
    9d2e:	4809      	ldr	r0, [pc, #36]	; (9d54 <k_sched_lock+0xe0>)
    9d30:	f002 f9ea 	bl	c108 <assert_print>
    9d34:	4904      	ldr	r1, [pc, #16]	; (9d48 <k_sched_lock+0xd4>)
    9d36:	480f      	ldr	r0, [pc, #60]	; (9d74 <k_sched_lock+0x100>)
    9d38:	f002 f9e6 	bl	c108 <assert_print>
    9d3c:	21b9      	movs	r1, #185	; 0xb9
    9d3e:	4620      	mov	r0, r4
    9d40:	f002 f9db 	bl	c0fa <assert_post_action>
    9d44:	e7c6      	b.n	9cd4 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    9d46:	bd70      	pop	{r4, r5, r6, pc}
    9d48:	2000119c 	.word	0x2000119c
    9d4c:	0000dd4c 	.word	0x0000dd4c
    9d50:	0000ddac 	.word	0x0000ddac
    9d54:	0000d4bc 	.word	0x0000d4bc
    9d58:	0000ddc4 	.word	0x0000ddc4
    9d5c:	20001160 	.word	0x20001160
    9d60:	0000f550 	.word	0x0000f550
    9d64:	0000f434 	.word	0x0000f434
    9d68:	0000f57c 	.word	0x0000f57c
    9d6c:	0000f580 	.word	0x0000f580
    9d70:	0000dd7c 	.word	0x0000dd7c
    9d74:	0000dd94 	.word	0x0000dd94

00009d78 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    9d78:	b538      	push	{r3, r4, r5, lr}
    9d7a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9d7c:	4b0c      	ldr	r3, [pc, #48]	; (9db0 <z_priq_dumb_remove+0x38>)
    9d7e:	4299      	cmp	r1, r3
    9d80:	d007      	beq.n	9d92 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9d82:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    9d84:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    9d86:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9d88:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9d8a:	2300      	movs	r3, #0
    9d8c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9d8e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    9d90:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9d92:	4d08      	ldr	r5, [pc, #32]	; (9db4 <z_priq_dumb_remove+0x3c>)
    9d94:	f240 433d 	movw	r3, #1085	; 0x43d
    9d98:	462a      	mov	r2, r5
    9d9a:	4907      	ldr	r1, [pc, #28]	; (9db8 <z_priq_dumb_remove+0x40>)
    9d9c:	4807      	ldr	r0, [pc, #28]	; (9dbc <z_priq_dumb_remove+0x44>)
    9d9e:	f002 f9b3 	bl	c108 <assert_print>
    9da2:	f240 413d 	movw	r1, #1085	; 0x43d
    9da6:	4628      	mov	r0, r5
    9da8:	f002 f9a7 	bl	c0fa <assert_post_action>
    9dac:	e7e9      	b.n	9d82 <z_priq_dumb_remove+0xa>
    9dae:	bf00      	nop
    9db0:	20000490 	.word	0x20000490
    9db4:	0000f624 	.word	0x0000f624
    9db8:	0000f660 	.word	0x0000f660
    9dbc:	0000d4bc 	.word	0x0000d4bc

00009dc0 <update_cache>:
{
    9dc0:	b538      	push	{r3, r4, r5, lr}
    9dc2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    9dc4:	4819      	ldr	r0, [pc, #100]	; (9e2c <update_cache+0x6c>)
    9dc6:	f003 f8f5 	bl	cfb4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9dca:	4605      	mov	r5, r0
    9dcc:	b188      	cbz	r0, 9df2 <update_cache+0x32>
	if (preempt_ok != 0) {
    9dce:	bb14      	cbnz	r4, 9e16 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    9dd0:	4b17      	ldr	r3, [pc, #92]	; (9e30 <update_cache+0x70>)
    9dd2:	689b      	ldr	r3, [r3, #8]
    9dd4:	b183      	cbz	r3, 9df8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    9dd6:	4b16      	ldr	r3, [pc, #88]	; (9e30 <update_cache+0x70>)
    9dd8:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9dda:	7b5a      	ldrb	r2, [r3, #13]
    9ddc:	f012 0f1f 	tst.w	r2, #31
    9de0:	d119      	bne.n	9e16 <update_cache+0x56>
	return node->next != NULL;
    9de2:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9de4:	b9ba      	cbnz	r2, 9e16 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9de6:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    9de8:	2a7f      	cmp	r2, #127	; 0x7f
    9dea:	d914      	bls.n	9e16 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    9dec:	4a10      	ldr	r2, [pc, #64]	; (9e30 <update_cache+0x70>)
    9dee:	61d3      	str	r3, [r2, #28]
    9df0:	e01a      	b.n	9e28 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9df2:	4b0f      	ldr	r3, [pc, #60]	; (9e30 <update_cache+0x70>)
    9df4:	68dd      	ldr	r5, [r3, #12]
    9df6:	e7ea      	b.n	9dce <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    9df8:	4c0e      	ldr	r4, [pc, #56]	; (9e34 <update_cache+0x74>)
    9dfa:	2389      	movs	r3, #137	; 0x89
    9dfc:	4622      	mov	r2, r4
    9dfe:	490e      	ldr	r1, [pc, #56]	; (9e38 <update_cache+0x78>)
    9e00:	480e      	ldr	r0, [pc, #56]	; (9e3c <update_cache+0x7c>)
    9e02:	f002 f981 	bl	c108 <assert_print>
    9e06:	480e      	ldr	r0, [pc, #56]	; (9e40 <update_cache+0x80>)
    9e08:	f002 f97e 	bl	c108 <assert_print>
    9e0c:	2189      	movs	r1, #137	; 0x89
    9e0e:	4620      	mov	r0, r4
    9e10:	f002 f973 	bl	c0fa <assert_post_action>
    9e14:	e7df      	b.n	9dd6 <update_cache+0x16>
		if (thread != _current) {
    9e16:	4b06      	ldr	r3, [pc, #24]	; (9e30 <update_cache+0x70>)
    9e18:	689b      	ldr	r3, [r3, #8]
    9e1a:	42ab      	cmp	r3, r5
    9e1c:	d002      	beq.n	9e24 <update_cache+0x64>
			z_reset_time_slice(thread);
    9e1e:	4628      	mov	r0, r5
    9e20:	f7ff fdf6 	bl	9a10 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9e24:	4b02      	ldr	r3, [pc, #8]	; (9e30 <update_cache+0x70>)
    9e26:	61dd      	str	r5, [r3, #28]
}
    9e28:	bd38      	pop	{r3, r4, r5, pc}
    9e2a:	bf00      	nop
    9e2c:	20001180 	.word	0x20001180
    9e30:	20001160 	.word	0x20001160
    9e34:	0000f624 	.word	0x0000f624
    9e38:	0000f684 	.word	0x0000f684
    9e3c:	0000d4bc 	.word	0x0000d4bc
    9e40:	0000f57c 	.word	0x0000f57c

00009e44 <move_thread_to_end_of_prio_q>:
{
    9e44:	b538      	push	{r3, r4, r5, lr}
    9e46:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    9e48:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9e4a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	db2b      	blt.n	9eaa <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    9e52:	7b6b      	ldrb	r3, [r5, #13]
    9e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9e58:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9e5a:	4b22      	ldr	r3, [pc, #136]	; (9ee4 <move_thread_to_end_of_prio_q+0xa0>)
    9e5c:	429d      	cmp	r5, r3
    9e5e:	d02c      	beq.n	9eba <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    9e60:	4b21      	ldr	r3, [pc, #132]	; (9ee8 <move_thread_to_end_of_prio_q+0xa4>)
    9e62:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e66:	429c      	cmp	r4, r3
    9e68:	d039      	beq.n	9ede <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e6a:	b16c      	cbz	r4, 9e88 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9e6c:	4621      	mov	r1, r4
    9e6e:	4628      	mov	r0, r5
    9e70:	f003 f881 	bl	cf76 <z_sched_prio_cmp>
    9e74:	2800      	cmp	r0, #0
    9e76:	dc2c      	bgt.n	9ed2 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9e78:	b134      	cbz	r4, 9e88 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    9e7a:	4b1b      	ldr	r3, [pc, #108]	; (9ee8 <move_thread_to_end_of_prio_q+0xa4>)
    9e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e7e:	429c      	cmp	r4, r3
    9e80:	d002      	beq.n	9e88 <move_thread_to_end_of_prio_q+0x44>
    9e82:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e84:	2c00      	cmp	r4, #0
    9e86:	d1f0      	bne.n	9e6a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    9e88:	4b17      	ldr	r3, [pc, #92]	; (9ee8 <move_thread_to_end_of_prio_q+0xa4>)
    9e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9e8c:	f103 0120 	add.w	r1, r3, #32
    9e90:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9e92:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9e94:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9e96:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    9e98:	4b13      	ldr	r3, [pc, #76]	; (9ee8 <move_thread_to_end_of_prio_q+0xa4>)
    9e9a:	6898      	ldr	r0, [r3, #8]
    9e9c:	42a8      	cmp	r0, r5
    9e9e:	bf14      	ite	ne
    9ea0:	2000      	movne	r0, #0
    9ea2:	2001      	moveq	r0, #1
    9ea4:	f7ff ff8c 	bl	9dc0 <update_cache>
}
    9ea8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9eaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9eae:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9eb0:	4601      	mov	r1, r0
    9eb2:	480e      	ldr	r0, [pc, #56]	; (9eec <move_thread_to_end_of_prio_q+0xa8>)
    9eb4:	f7ff ff60 	bl	9d78 <z_priq_dumb_remove>
}
    9eb8:	e7cb      	b.n	9e52 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9eba:	4c0d      	ldr	r4, [pc, #52]	; (9ef0 <move_thread_to_end_of_prio_q+0xac>)
    9ebc:	23ba      	movs	r3, #186	; 0xba
    9ebe:	4622      	mov	r2, r4
    9ec0:	490c      	ldr	r1, [pc, #48]	; (9ef4 <move_thread_to_end_of_prio_q+0xb0>)
    9ec2:	480d      	ldr	r0, [pc, #52]	; (9ef8 <move_thread_to_end_of_prio_q+0xb4>)
    9ec4:	f002 f920 	bl	c108 <assert_print>
    9ec8:	21ba      	movs	r1, #186	; 0xba
    9eca:	4620      	mov	r0, r4
    9ecc:	f002 f915 	bl	c0fa <assert_post_action>
    9ed0:	e7c6      	b.n	9e60 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9ed2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9ed4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9ed6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9ed8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9eda:	6065      	str	r5, [r4, #4]
}
    9edc:	e7dc      	b.n	9e98 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9ede:	2400      	movs	r4, #0
    9ee0:	e7c3      	b.n	9e6a <move_thread_to_end_of_prio_q+0x26>
    9ee2:	bf00      	nop
    9ee4:	20000490 	.word	0x20000490
    9ee8:	20001160 	.word	0x20001160
    9eec:	20001180 	.word	0x20001180
    9ef0:	0000f624 	.word	0x0000f624
    9ef4:	0000f660 	.word	0x0000f660
    9ef8:	0000d4bc 	.word	0x0000d4bc

00009efc <slice_expired_locked>:
{
    9efc:	b538      	push	{r3, r4, r5, lr}
    9efe:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9f00:	4b07      	ldr	r3, [pc, #28]	; (9f20 <slice_expired_locked+0x24>)
    9f02:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9f04:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    9f06:	f013 0f1f 	tst.w	r3, #31
    9f0a:	d004      	beq.n	9f16 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9f0c:	4628      	mov	r0, r5
    9f0e:	f7ff fd7f 	bl	9a10 <z_reset_time_slice>
}
    9f12:	4620      	mov	r0, r4
    9f14:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    9f16:	4628      	mov	r0, r5
    9f18:	f7ff ff94 	bl	9e44 <move_thread_to_end_of_prio_q>
    9f1c:	e7f6      	b.n	9f0c <slice_expired_locked+0x10>
    9f1e:	bf00      	nop
    9f20:	20001160 	.word	0x20001160

00009f24 <z_time_slice>:
{
    9f24:	b570      	push	{r4, r5, r6, lr}
    9f26:	4604      	mov	r4, r0
	__asm__ volatile(
    9f28:	f04f 0320 	mov.w	r3, #32
    9f2c:	f3ef 8511 	mrs	r5, BASEPRI
    9f30:	f383 8812 	msr	BASEPRI_MAX, r3
    9f34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f38:	4842      	ldr	r0, [pc, #264]	; (a044 <z_time_slice+0x120>)
    9f3a:	f7ff f831 	bl	8fa0 <z_spin_lock_valid>
    9f3e:	b310      	cbz	r0, 9f86 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    9f40:	4840      	ldr	r0, [pc, #256]	; (a044 <z_time_slice+0x120>)
    9f42:	f7ff f84d 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    9f46:	462b      	mov	r3, r5
	if (pending_current == _current) {
    9f48:	4a3f      	ldr	r2, [pc, #252]	; (a048 <z_time_slice+0x124>)
    9f4a:	6892      	ldr	r2, [r2, #8]
    9f4c:	493f      	ldr	r1, [pc, #252]	; (a04c <z_time_slice+0x128>)
    9f4e:	6809      	ldr	r1, [r1, #0]
    9f50:	428a      	cmp	r2, r1
    9f52:	d028      	beq.n	9fa6 <z_time_slice+0x82>
	pending_current = NULL;
    9f54:	493d      	ldr	r1, [pc, #244]	; (a04c <z_time_slice+0x128>)
    9f56:	2000      	movs	r0, #0
    9f58:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    9f5a:	493d      	ldr	r1, [pc, #244]	; (a050 <z_time_slice+0x12c>)
    9f5c:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    9f5e:	2900      	cmp	r1, #0
    9f60:	d052      	beq.n	a008 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9f62:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    9f64:	297f      	cmp	r1, #127	; 0x7f
    9f66:	d83a      	bhi.n	9fde <z_time_slice+0xba>
    9f68:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    9f6a:	f011 0f1f 	tst.w	r1, #31
    9f6e:	d140      	bne.n	9ff2 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9f70:	f992 000e 	ldrsb.w	r0, [r2, #14]
    9f74:	4937      	ldr	r1, [pc, #220]	; (a054 <z_time_slice+0x130>)
    9f76:	6809      	ldr	r1, [r1, #0]
    9f78:	4288      	cmp	r0, r1
    9f7a:	db3c      	blt.n	9ff6 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    9f7c:	4936      	ldr	r1, [pc, #216]	; (a058 <z_time_slice+0x134>)
    9f7e:	428a      	cmp	r2, r1
    9f80:	d03b      	beq.n	9ffa <z_time_slice+0xd6>
    9f82:	2201      	movs	r2, #1
    9f84:	e02c      	b.n	9fe0 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f86:	4e35      	ldr	r6, [pc, #212]	; (a05c <z_time_slice+0x138>)
    9f88:	238e      	movs	r3, #142	; 0x8e
    9f8a:	4632      	mov	r2, r6
    9f8c:	4934      	ldr	r1, [pc, #208]	; (a060 <z_time_slice+0x13c>)
    9f8e:	4835      	ldr	r0, [pc, #212]	; (a064 <z_time_slice+0x140>)
    9f90:	f002 f8ba 	bl	c108 <assert_print>
    9f94:	492b      	ldr	r1, [pc, #172]	; (a044 <z_time_slice+0x120>)
    9f96:	4834      	ldr	r0, [pc, #208]	; (a068 <z_time_slice+0x144>)
    9f98:	f002 f8b6 	bl	c108 <assert_print>
    9f9c:	218e      	movs	r1, #142	; 0x8e
    9f9e:	4630      	mov	r0, r6
    9fa0:	f002 f8ab 	bl	c0fa <assert_post_action>
    9fa4:	e7cc      	b.n	9f40 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    9fa6:	4610      	mov	r0, r2
    9fa8:	f7ff fd32 	bl	9a10 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fac:	4825      	ldr	r0, [pc, #148]	; (a044 <z_time_slice+0x120>)
    9fae:	f7ff f807 	bl	8fc0 <z_spin_unlock_valid>
    9fb2:	b120      	cbz	r0, 9fbe <z_time_slice+0x9a>
	__asm__ volatile(
    9fb4:	f385 8811 	msr	BASEPRI, r5
    9fb8:	f3bf 8f6f 	isb	sy
		return;
    9fbc:	e030      	b.n	a020 <z_time_slice+0xfc>
    9fbe:	4c27      	ldr	r4, [pc, #156]	; (a05c <z_time_slice+0x138>)
    9fc0:	23b9      	movs	r3, #185	; 0xb9
    9fc2:	4622      	mov	r2, r4
    9fc4:	4929      	ldr	r1, [pc, #164]	; (a06c <z_time_slice+0x148>)
    9fc6:	4827      	ldr	r0, [pc, #156]	; (a064 <z_time_slice+0x140>)
    9fc8:	f002 f89e 	bl	c108 <assert_print>
    9fcc:	491d      	ldr	r1, [pc, #116]	; (a044 <z_time_slice+0x120>)
    9fce:	4828      	ldr	r0, [pc, #160]	; (a070 <z_time_slice+0x14c>)
    9fd0:	f002 f89a 	bl	c108 <assert_print>
    9fd4:	21b9      	movs	r1, #185	; 0xb9
    9fd6:	4620      	mov	r0, r4
    9fd8:	f002 f88f 	bl	c0fa <assert_post_action>
    9fdc:	e7ea      	b.n	9fb4 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    9fde:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    9fe0:	b192      	cbz	r2, a008 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    9fe2:	4a19      	ldr	r2, [pc, #100]	; (a048 <z_time_slice+0x124>)
    9fe4:	6910      	ldr	r0, [r2, #16]
    9fe6:	42a0      	cmp	r0, r4
    9fe8:	dd09      	ble.n	9ffe <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    9fea:	1b00      	subs	r0, r0, r4
    9fec:	4a16      	ldr	r2, [pc, #88]	; (a048 <z_time_slice+0x124>)
    9fee:	6110      	str	r0, [r2, #16]
    9ff0:	e00d      	b.n	a00e <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    9ff2:	2200      	movs	r2, #0
    9ff4:	e7f4      	b.n	9fe0 <z_time_slice+0xbc>
    9ff6:	2200      	movs	r2, #0
    9ff8:	e7f2      	b.n	9fe0 <z_time_slice+0xbc>
    9ffa:	2200      	movs	r2, #0
    9ffc:	e7f0      	b.n	9fe0 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    9ffe:	4628      	mov	r0, r5
    a000:	f7ff ff7c 	bl	9efc <slice_expired_locked>
    a004:	4603      	mov	r3, r0
    a006:	e002      	b.n	a00e <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    a008:	4a0f      	ldr	r2, [pc, #60]	; (a048 <z_time_slice+0x124>)
    a00a:	2100      	movs	r1, #0
    a00c:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    a00e:	461c      	mov	r4, r3
    a010:	480c      	ldr	r0, [pc, #48]	; (a044 <z_time_slice+0x120>)
    a012:	f7fe ffd5 	bl	8fc0 <z_spin_unlock_valid>
    a016:	b120      	cbz	r0, a022 <z_time_slice+0xfe>
    a018:	f384 8811 	msr	BASEPRI, r4
    a01c:	f3bf 8f6f 	isb	sy
}
    a020:	bd70      	pop	{r4, r5, r6, pc}
    a022:	4d0e      	ldr	r5, [pc, #56]	; (a05c <z_time_slice+0x138>)
    a024:	23b9      	movs	r3, #185	; 0xb9
    a026:	462a      	mov	r2, r5
    a028:	4910      	ldr	r1, [pc, #64]	; (a06c <z_time_slice+0x148>)
    a02a:	480e      	ldr	r0, [pc, #56]	; (a064 <z_time_slice+0x140>)
    a02c:	f002 f86c 	bl	c108 <assert_print>
    a030:	4904      	ldr	r1, [pc, #16]	; (a044 <z_time_slice+0x120>)
    a032:	480f      	ldr	r0, [pc, #60]	; (a070 <z_time_slice+0x14c>)
    a034:	f002 f868 	bl	c108 <assert_print>
    a038:	21b9      	movs	r1, #185	; 0xb9
    a03a:	4628      	mov	r0, r5
    a03c:	f002 f85d 	bl	c0fa <assert_post_action>
    a040:	e7ea      	b.n	a018 <z_time_slice+0xf4>
    a042:	bf00      	nop
    a044:	2000119c 	.word	0x2000119c
    a048:	20001160 	.word	0x20001160
    a04c:	20001198 	.word	0x20001198
    a050:	200011a4 	.word	0x200011a4
    a054:	200011a0 	.word	0x200011a0
    a058:	20000490 	.word	0x20000490
    a05c:	0000dd4c 	.word	0x0000dd4c
    a060:	0000ddac 	.word	0x0000ddac
    a064:	0000d4bc 	.word	0x0000d4bc
    a068:	0000ddc4 	.word	0x0000ddc4
    a06c:	0000dd7c 	.word	0x0000dd7c
    a070:	0000dd94 	.word	0x0000dd94

0000a074 <ready_thread>:
{
    a074:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    a076:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a078:	f990 200d 	ldrsb.w	r2, [r0, #13]
    a07c:	2a00      	cmp	r2, #0
    a07e:	db30      	blt.n	a0e2 <ready_thread+0x6e>
    a080:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a082:	f013 0f1f 	tst.w	r3, #31
    a086:	d105      	bne.n	a094 <ready_thread+0x20>
	return node->next != NULL;
    a088:	6982      	ldr	r2, [r0, #24]
    a08a:	b10a      	cbz	r2, a090 <ready_thread+0x1c>
    a08c:	2200      	movs	r2, #0
    a08e:	e002      	b.n	a096 <ready_thread+0x22>
    a090:	2201      	movs	r2, #1
    a092:	e000      	b.n	a096 <ready_thread+0x22>
    a094:	2200      	movs	r2, #0
    a096:	b322      	cbz	r2, a0e2 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    a098:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a09c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a09e:	4b1b      	ldr	r3, [pc, #108]	; (a10c <ready_thread+0x98>)
    a0a0:	429c      	cmp	r4, r3
    a0a2:	d01f      	beq.n	a0e4 <ready_thread+0x70>
	return list->head == list;
    a0a4:	4b1a      	ldr	r3, [pc, #104]	; (a110 <ready_thread+0x9c>)
    a0a6:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a0aa:	429d      	cmp	r5, r3
    a0ac:	d02c      	beq.n	a108 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a0ae:	b16d      	cbz	r5, a0cc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a0b0:	4629      	mov	r1, r5
    a0b2:	4620      	mov	r0, r4
    a0b4:	f002 ff5f 	bl	cf76 <z_sched_prio_cmp>
    a0b8:	2800      	cmp	r0, #0
    a0ba:	dc1f      	bgt.n	a0fc <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a0bc:	b135      	cbz	r5, a0cc <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    a0be:	4b14      	ldr	r3, [pc, #80]	; (a110 <ready_thread+0x9c>)
    a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a0c2:	429d      	cmp	r5, r3
    a0c4:	d002      	beq.n	a0cc <ready_thread+0x58>
    a0c6:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a0c8:	2d00      	cmp	r5, #0
    a0ca:	d1f0      	bne.n	a0ae <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    a0cc:	4b10      	ldr	r3, [pc, #64]	; (a110 <ready_thread+0x9c>)
    a0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a0d0:	f103 0120 	add.w	r1, r3, #32
    a0d4:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a0d6:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a0d8:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a0da:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    a0dc:	2000      	movs	r0, #0
    a0de:	f7ff fe6f 	bl	9dc0 <update_cache>
}
    a0e2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a0e4:	4d0b      	ldr	r5, [pc, #44]	; (a114 <ready_thread+0xa0>)
    a0e6:	23ba      	movs	r3, #186	; 0xba
    a0e8:	462a      	mov	r2, r5
    a0ea:	490b      	ldr	r1, [pc, #44]	; (a118 <ready_thread+0xa4>)
    a0ec:	480b      	ldr	r0, [pc, #44]	; (a11c <ready_thread+0xa8>)
    a0ee:	f002 f80b 	bl	c108 <assert_print>
    a0f2:	21ba      	movs	r1, #186	; 0xba
    a0f4:	4628      	mov	r0, r5
    a0f6:	f002 f800 	bl	c0fa <assert_post_action>
    a0fa:	e7d3      	b.n	a0a4 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    a0fc:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a0fe:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a100:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a102:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a104:	606c      	str	r4, [r5, #4]
}
    a106:	e7e9      	b.n	a0dc <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a108:	2500      	movs	r5, #0
    a10a:	e7d0      	b.n	a0ae <ready_thread+0x3a>
    a10c:	20000490 	.word	0x20000490
    a110:	20001160 	.word	0x20001160
    a114:	0000f624 	.word	0x0000f624
    a118:	0000f660 	.word	0x0000f660
    a11c:	0000d4bc 	.word	0x0000d4bc

0000a120 <z_ready_thread>:
{
    a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a122:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    a124:	2400      	movs	r4, #0
	__asm__ volatile(
    a126:	f04f 0320 	mov.w	r3, #32
    a12a:	f3ef 8611 	mrs	r6, BASEPRI
    a12e:	f383 8812 	msr	BASEPRI_MAX, r3
    a132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a136:	481e      	ldr	r0, [pc, #120]	; (a1b0 <z_ready_thread+0x90>)
    a138:	f7fe ff32 	bl	8fa0 <z_spin_lock_valid>
    a13c:	b118      	cbz	r0, a146 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    a13e:	481c      	ldr	r0, [pc, #112]	; (a1b0 <z_ready_thread+0x90>)
    a140:	f7fe ff4e 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    a144:	e018      	b.n	a178 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a146:	4f1b      	ldr	r7, [pc, #108]	; (a1b4 <z_ready_thread+0x94>)
    a148:	238e      	movs	r3, #142	; 0x8e
    a14a:	463a      	mov	r2, r7
    a14c:	491a      	ldr	r1, [pc, #104]	; (a1b8 <z_ready_thread+0x98>)
    a14e:	481b      	ldr	r0, [pc, #108]	; (a1bc <z_ready_thread+0x9c>)
    a150:	f001 ffda 	bl	c108 <assert_print>
    a154:	4916      	ldr	r1, [pc, #88]	; (a1b0 <z_ready_thread+0x90>)
    a156:	481a      	ldr	r0, [pc, #104]	; (a1c0 <z_ready_thread+0xa0>)
    a158:	f001 ffd6 	bl	c108 <assert_print>
    a15c:	218e      	movs	r1, #142	; 0x8e
    a15e:	4638      	mov	r0, r7
    a160:	f001 ffcb 	bl	c0fa <assert_post_action>
    a164:	e7eb      	b.n	a13e <z_ready_thread+0x1e>
			ready_thread(thread);
    a166:	4628      	mov	r0, r5
    a168:	f7ff ff84 	bl	a074 <ready_thread>
    a16c:	e00a      	b.n	a184 <z_ready_thread+0x64>
	__asm__ volatile(
    a16e:	f386 8811 	msr	BASEPRI, r6
    a172:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a176:	2401      	movs	r4, #1
    a178:	b9cc      	cbnz	r4, a1ae <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    a17a:	4628      	mov	r0, r5
    a17c:	f002 fef9 	bl	cf72 <thread_active_elsewhere>
    a180:	2800      	cmp	r0, #0
    a182:	d0f0      	beq.n	a166 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a184:	480a      	ldr	r0, [pc, #40]	; (a1b0 <z_ready_thread+0x90>)
    a186:	f7fe ff1b 	bl	8fc0 <z_spin_unlock_valid>
    a18a:	2800      	cmp	r0, #0
    a18c:	d1ef      	bne.n	a16e <z_ready_thread+0x4e>
    a18e:	4c09      	ldr	r4, [pc, #36]	; (a1b4 <z_ready_thread+0x94>)
    a190:	23b9      	movs	r3, #185	; 0xb9
    a192:	4622      	mov	r2, r4
    a194:	490b      	ldr	r1, [pc, #44]	; (a1c4 <z_ready_thread+0xa4>)
    a196:	4809      	ldr	r0, [pc, #36]	; (a1bc <z_ready_thread+0x9c>)
    a198:	f001 ffb6 	bl	c108 <assert_print>
    a19c:	4904      	ldr	r1, [pc, #16]	; (a1b0 <z_ready_thread+0x90>)
    a19e:	480a      	ldr	r0, [pc, #40]	; (a1c8 <z_ready_thread+0xa8>)
    a1a0:	f001 ffb2 	bl	c108 <assert_print>
    a1a4:	21b9      	movs	r1, #185	; 0xb9
    a1a6:	4620      	mov	r0, r4
    a1a8:	f001 ffa7 	bl	c0fa <assert_post_action>
    a1ac:	e7df      	b.n	a16e <z_ready_thread+0x4e>
}
    a1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1b0:	2000119c 	.word	0x2000119c
    a1b4:	0000dd4c 	.word	0x0000dd4c
    a1b8:	0000ddac 	.word	0x0000ddac
    a1bc:	0000d4bc 	.word	0x0000d4bc
    a1c0:	0000ddc4 	.word	0x0000ddc4
    a1c4:	0000dd7c 	.word	0x0000dd7c
    a1c8:	0000dd94 	.word	0x0000dd94

0000a1cc <z_sched_start>:
{
    a1cc:	b570      	push	{r4, r5, r6, lr}
    a1ce:	4604      	mov	r4, r0
	__asm__ volatile(
    a1d0:	f04f 0320 	mov.w	r3, #32
    a1d4:	f3ef 8511 	mrs	r5, BASEPRI
    a1d8:	f383 8812 	msr	BASEPRI_MAX, r3
    a1dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1e0:	481f      	ldr	r0, [pc, #124]	; (a260 <z_sched_start+0x94>)
    a1e2:	f7fe fedd 	bl	8fa0 <z_spin_lock_valid>
    a1e6:	b188      	cbz	r0, a20c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    a1e8:	481d      	ldr	r0, [pc, #116]	; (a260 <z_sched_start+0x94>)
    a1ea:	f7fe fef9 	bl	8fe0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a1ee:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    a1f0:	f013 0f04 	tst.w	r3, #4
    a1f4:	d01a      	beq.n	a22c <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a1f6:	f023 0304 	bic.w	r3, r3, #4
    a1fa:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    a1fc:	4620      	mov	r0, r4
    a1fe:	f7ff ff39 	bl	a074 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a202:	4629      	mov	r1, r5
    a204:	4816      	ldr	r0, [pc, #88]	; (a260 <z_sched_start+0x94>)
    a206:	f7ff fce7 	bl	9bd8 <z_reschedule>
}
    a20a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a20c:	4e15      	ldr	r6, [pc, #84]	; (a264 <z_sched_start+0x98>)
    a20e:	238e      	movs	r3, #142	; 0x8e
    a210:	4632      	mov	r2, r6
    a212:	4915      	ldr	r1, [pc, #84]	; (a268 <z_sched_start+0x9c>)
    a214:	4815      	ldr	r0, [pc, #84]	; (a26c <z_sched_start+0xa0>)
    a216:	f001 ff77 	bl	c108 <assert_print>
    a21a:	4911      	ldr	r1, [pc, #68]	; (a260 <z_sched_start+0x94>)
    a21c:	4814      	ldr	r0, [pc, #80]	; (a270 <z_sched_start+0xa4>)
    a21e:	f001 ff73 	bl	c108 <assert_print>
    a222:	218e      	movs	r1, #142	; 0x8e
    a224:	4630      	mov	r0, r6
    a226:	f001 ff68 	bl	c0fa <assert_post_action>
    a22a:	e7dd      	b.n	a1e8 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a22c:	480c      	ldr	r0, [pc, #48]	; (a260 <z_sched_start+0x94>)
    a22e:	f7fe fec7 	bl	8fc0 <z_spin_unlock_valid>
    a232:	b120      	cbz	r0, a23e <z_sched_start+0x72>
	__asm__ volatile(
    a234:	f385 8811 	msr	BASEPRI, r5
    a238:	f3bf 8f6f 	isb	sy
		return;
    a23c:	e7e5      	b.n	a20a <z_sched_start+0x3e>
    a23e:	4c09      	ldr	r4, [pc, #36]	; (a264 <z_sched_start+0x98>)
    a240:	23b9      	movs	r3, #185	; 0xb9
    a242:	4622      	mov	r2, r4
    a244:	490b      	ldr	r1, [pc, #44]	; (a274 <z_sched_start+0xa8>)
    a246:	4809      	ldr	r0, [pc, #36]	; (a26c <z_sched_start+0xa0>)
    a248:	f001 ff5e 	bl	c108 <assert_print>
    a24c:	4904      	ldr	r1, [pc, #16]	; (a260 <z_sched_start+0x94>)
    a24e:	480a      	ldr	r0, [pc, #40]	; (a278 <z_sched_start+0xac>)
    a250:	f001 ff5a 	bl	c108 <assert_print>
    a254:	21b9      	movs	r1, #185	; 0xb9
    a256:	4620      	mov	r0, r4
    a258:	f001 ff4f 	bl	c0fa <assert_post_action>
    a25c:	e7ea      	b.n	a234 <z_sched_start+0x68>
    a25e:	bf00      	nop
    a260:	2000119c 	.word	0x2000119c
    a264:	0000dd4c 	.word	0x0000dd4c
    a268:	0000ddac 	.word	0x0000ddac
    a26c:	0000d4bc 	.word	0x0000d4bc
    a270:	0000ddc4 	.word	0x0000ddc4
    a274:	0000dd7c 	.word	0x0000dd7c
    a278:	0000dd94 	.word	0x0000dd94

0000a27c <z_thread_timeout>:
{
    a27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a280:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    a282:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    a286:	2500      	movs	r5, #0
	__asm__ volatile(
    a288:	f04f 0320 	mov.w	r3, #32
    a28c:	f3ef 8711 	mrs	r7, BASEPRI
    a290:	f383 8812 	msr	BASEPRI_MAX, r3
    a294:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a298:	482b      	ldr	r0, [pc, #172]	; (a348 <z_thread_timeout+0xcc>)
    a29a:	f7fe fe81 	bl	8fa0 <z_spin_lock_valid>
    a29e:	b118      	cbz	r0, a2a8 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    a2a0:	4829      	ldr	r0, [pc, #164]	; (a348 <z_thread_timeout+0xcc>)
    a2a2:	f7fe fe9d 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    a2a6:	e026      	b.n	a2f6 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2a8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; a34c <z_thread_timeout+0xd0>
    a2ac:	238e      	movs	r3, #142	; 0x8e
    a2ae:	4642      	mov	r2, r8
    a2b0:	4927      	ldr	r1, [pc, #156]	; (a350 <z_thread_timeout+0xd4>)
    a2b2:	4828      	ldr	r0, [pc, #160]	; (a354 <z_thread_timeout+0xd8>)
    a2b4:	f001 ff28 	bl	c108 <assert_print>
    a2b8:	4923      	ldr	r1, [pc, #140]	; (a348 <z_thread_timeout+0xcc>)
    a2ba:	4827      	ldr	r0, [pc, #156]	; (a358 <z_thread_timeout+0xdc>)
    a2bc:	f001 ff24 	bl	c108 <assert_print>
    a2c0:	218e      	movs	r1, #142	; 0x8e
    a2c2:	4640      	mov	r0, r8
    a2c4:	f001 ff19 	bl	c0fa <assert_post_action>
    a2c8:	e7ea      	b.n	a2a0 <z_thread_timeout+0x24>
    a2ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a2ce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a2d2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a2d6:	f023 0310 	bic.w	r3, r3, #16
    a2da:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    a2de:	4630      	mov	r0, r6
    a2e0:	f7ff fec8 	bl	a074 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a2e4:	4818      	ldr	r0, [pc, #96]	; (a348 <z_thread_timeout+0xcc>)
    a2e6:	f7fe fe6b 	bl	8fc0 <z_spin_unlock_valid>
    a2ea:	b1d8      	cbz	r0, a324 <z_thread_timeout+0xa8>
	__asm__ volatile(
    a2ec:	f387 8811 	msr	BASEPRI, r7
    a2f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a2f4:	2501      	movs	r5, #1
    a2f6:	bb2d      	cbnz	r5, a344 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    a2f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    a2fc:	f013 0f28 	tst.w	r3, #40	; 0x28
    a300:	d1f0      	bne.n	a2e4 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    a302:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a306:	2b00      	cmp	r3, #0
    a308:	d0df      	beq.n	a2ca <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a30a:	4630      	mov	r0, r6
    a30c:	f7ff fb56 	bl	99bc <pended_on_thread>
    a310:	4631      	mov	r1, r6
    a312:	f7ff fd31 	bl	9d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a316:	7b73      	ldrb	r3, [r6, #13]
    a318:	f023 0302 	bic.w	r3, r3, #2
    a31c:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    a31e:	2300      	movs	r3, #0
    a320:	60b3      	str	r3, [r6, #8]
}
    a322:	e7d2      	b.n	a2ca <z_thread_timeout+0x4e>
    a324:	4d09      	ldr	r5, [pc, #36]	; (a34c <z_thread_timeout+0xd0>)
    a326:	23b9      	movs	r3, #185	; 0xb9
    a328:	462a      	mov	r2, r5
    a32a:	490c      	ldr	r1, [pc, #48]	; (a35c <z_thread_timeout+0xe0>)
    a32c:	4809      	ldr	r0, [pc, #36]	; (a354 <z_thread_timeout+0xd8>)
    a32e:	f001 feeb 	bl	c108 <assert_print>
    a332:	4905      	ldr	r1, [pc, #20]	; (a348 <z_thread_timeout+0xcc>)
    a334:	480a      	ldr	r0, [pc, #40]	; (a360 <z_thread_timeout+0xe4>)
    a336:	f001 fee7 	bl	c108 <assert_print>
    a33a:	21b9      	movs	r1, #185	; 0xb9
    a33c:	4628      	mov	r0, r5
    a33e:	f001 fedc 	bl	c0fa <assert_post_action>
    a342:	e7d3      	b.n	a2ec <z_thread_timeout+0x70>
}
    a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a348:	2000119c 	.word	0x2000119c
    a34c:	0000dd4c 	.word	0x0000dd4c
    a350:	0000ddac 	.word	0x0000ddac
    a354:	0000d4bc 	.word	0x0000d4bc
    a358:	0000ddc4 	.word	0x0000ddc4
    a35c:	0000dd7c 	.word	0x0000dd7c
    a360:	0000dd94 	.word	0x0000dd94

0000a364 <unready_thread>:
{
    a364:	b510      	push	{r4, lr}
    a366:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    a368:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    a36a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a36e:	2b00      	cmp	r3, #0
    a370:	db08      	blt.n	a384 <unready_thread+0x20>
	update_cache(thread == _current);
    a372:	4b08      	ldr	r3, [pc, #32]	; (a394 <unready_thread+0x30>)
    a374:	6898      	ldr	r0, [r3, #8]
    a376:	42a0      	cmp	r0, r4
    a378:	bf14      	ite	ne
    a37a:	2000      	movne	r0, #0
    a37c:	2001      	moveq	r0, #1
    a37e:	f7ff fd1f 	bl	9dc0 <update_cache>
}
    a382:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a388:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a38a:	4601      	mov	r1, r0
    a38c:	4802      	ldr	r0, [pc, #8]	; (a398 <unready_thread+0x34>)
    a38e:	f7ff fcf3 	bl	9d78 <z_priq_dumb_remove>
}
    a392:	e7ee      	b.n	a372 <unready_thread+0xe>
    a394:	20001160 	.word	0x20001160
    a398:	20001180 	.word	0x20001180

0000a39c <add_to_waitq_locked>:
{
    a39c:	b570      	push	{r4, r5, r6, lr}
    a39e:	4605      	mov	r5, r0
    a3a0:	460e      	mov	r6, r1
	unready_thread(thread);
    a3a2:	f7ff ffdf 	bl	a364 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a3a6:	7b6b      	ldrb	r3, [r5, #13]
    a3a8:	f043 0302 	orr.w	r3, r3, #2
    a3ac:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    a3ae:	b1ce      	cbz	r6, a3e4 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    a3b0:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a3b2:	4b17      	ldr	r3, [pc, #92]	; (a410 <add_to_waitq_locked+0x74>)
    a3b4:	429d      	cmp	r5, r3
    a3b6:	d016      	beq.n	a3e6 <add_to_waitq_locked+0x4a>
	return list->head == list;
    a3b8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3ba:	42a6      	cmp	r6, r4
    a3bc:	d025      	beq.n	a40a <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a3be:	b164      	cbz	r4, a3da <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a3c0:	4621      	mov	r1, r4
    a3c2:	4628      	mov	r0, r5
    a3c4:	f002 fdd7 	bl	cf76 <z_sched_prio_cmp>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	dc18      	bgt.n	a3fe <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a3cc:	b12c      	cbz	r4, a3da <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    a3ce:	6873      	ldr	r3, [r6, #4]
    a3d0:	429c      	cmp	r4, r3
    a3d2:	d002      	beq.n	a3da <add_to_waitq_locked+0x3e>
    a3d4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a3d6:	2c00      	cmp	r4, #0
    a3d8:	d1f1      	bne.n	a3be <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    a3da:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    a3dc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    a3de:	606b      	str	r3, [r5, #4]
	tail->next = node;
    a3e0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a3e2:	6075      	str	r5, [r6, #4]
}
    a3e4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a3e6:	4c0b      	ldr	r4, [pc, #44]	; (a414 <add_to_waitq_locked+0x78>)
    a3e8:	23ba      	movs	r3, #186	; 0xba
    a3ea:	4622      	mov	r2, r4
    a3ec:	490a      	ldr	r1, [pc, #40]	; (a418 <add_to_waitq_locked+0x7c>)
    a3ee:	480b      	ldr	r0, [pc, #44]	; (a41c <add_to_waitq_locked+0x80>)
    a3f0:	f001 fe8a 	bl	c108 <assert_print>
    a3f4:	21ba      	movs	r1, #186	; 0xba
    a3f6:	4620      	mov	r0, r4
    a3f8:	f001 fe7f 	bl	c0fa <assert_post_action>
    a3fc:	e7dc      	b.n	a3b8 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    a3fe:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a400:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a402:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a404:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a406:	6065      	str	r5, [r4, #4]
}
    a408:	e7ec      	b.n	a3e4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a40a:	2400      	movs	r4, #0
    a40c:	e7d7      	b.n	a3be <add_to_waitq_locked+0x22>
    a40e:	bf00      	nop
    a410:	20000490 	.word	0x20000490
    a414:	0000f624 	.word	0x0000f624
    a418:	0000f660 	.word	0x0000f660
    a41c:	0000d4bc 	.word	0x0000d4bc

0000a420 <pend>:
{
    a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a424:	4605      	mov	r5, r0
    a426:	460e      	mov	r6, r1
    a428:	4691      	mov	r9, r2
    a42a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    a42c:	2400      	movs	r4, #0
	__asm__ volatile(
    a42e:	f04f 0320 	mov.w	r3, #32
    a432:	f3ef 8711 	mrs	r7, BASEPRI
    a436:	f383 8812 	msr	BASEPRI_MAX, r3
    a43a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a43e:	481f      	ldr	r0, [pc, #124]	; (a4bc <pend+0x9c>)
    a440:	f7fe fdae 	bl	8fa0 <z_spin_lock_valid>
    a444:	b118      	cbz	r0, a44e <pend+0x2e>
	z_spin_lock_set_owner(l);
    a446:	481d      	ldr	r0, [pc, #116]	; (a4bc <pend+0x9c>)
    a448:	f7fe fdca 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    a44c:	e015      	b.n	a47a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a44e:	f8df a070 	ldr.w	sl, [pc, #112]	; a4c0 <pend+0xa0>
    a452:	238e      	movs	r3, #142	; 0x8e
    a454:	4652      	mov	r2, sl
    a456:	491b      	ldr	r1, [pc, #108]	; (a4c4 <pend+0xa4>)
    a458:	481b      	ldr	r0, [pc, #108]	; (a4c8 <pend+0xa8>)
    a45a:	f001 fe55 	bl	c108 <assert_print>
    a45e:	4917      	ldr	r1, [pc, #92]	; (a4bc <pend+0x9c>)
    a460:	481a      	ldr	r0, [pc, #104]	; (a4cc <pend+0xac>)
    a462:	f001 fe51 	bl	c108 <assert_print>
    a466:	218e      	movs	r1, #142	; 0x8e
    a468:	4650      	mov	r0, sl
    a46a:	f001 fe46 	bl	c0fa <assert_post_action>
    a46e:	e7ea      	b.n	a446 <pend+0x26>
	__asm__ volatile(
    a470:	f387 8811 	msr	BASEPRI, r7
    a474:	f3bf 8f6f 	isb	sy
    a478:	2401      	movs	r4, #1
    a47a:	b9c4      	cbnz	r4, a4ae <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    a47c:	4631      	mov	r1, r6
    a47e:	4628      	mov	r0, r5
    a480:	f7ff ff8c 	bl	a39c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a484:	480d      	ldr	r0, [pc, #52]	; (a4bc <pend+0x9c>)
    a486:	f7fe fd9b 	bl	8fc0 <z_spin_unlock_valid>
    a48a:	2800      	cmp	r0, #0
    a48c:	d1f0      	bne.n	a470 <pend+0x50>
    a48e:	4c0c      	ldr	r4, [pc, #48]	; (a4c0 <pend+0xa0>)
    a490:	23b9      	movs	r3, #185	; 0xb9
    a492:	4622      	mov	r2, r4
    a494:	490e      	ldr	r1, [pc, #56]	; (a4d0 <pend+0xb0>)
    a496:	480c      	ldr	r0, [pc, #48]	; (a4c8 <pend+0xa8>)
    a498:	f001 fe36 	bl	c108 <assert_print>
    a49c:	4907      	ldr	r1, [pc, #28]	; (a4bc <pend+0x9c>)
    a49e:	480d      	ldr	r0, [pc, #52]	; (a4d4 <pend+0xb4>)
    a4a0:	f001 fe32 	bl	c108 <assert_print>
    a4a4:	21b9      	movs	r1, #185	; 0xb9
    a4a6:	4620      	mov	r0, r4
    a4a8:	f001 fe27 	bl	c0fa <assert_post_action>
    a4ac:	e7e0      	b.n	a470 <pend+0x50>
	add_thread_timeout(thread, timeout);
    a4ae:	464a      	mov	r2, r9
    a4b0:	4643      	mov	r3, r8
    a4b2:	4628      	mov	r0, r5
    a4b4:	f7ff fa9c 	bl	99f0 <add_thread_timeout>
}
    a4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a4bc:	2000119c 	.word	0x2000119c
    a4c0:	0000dd4c 	.word	0x0000dd4c
    a4c4:	0000ddac 	.word	0x0000ddac
    a4c8:	0000d4bc 	.word	0x0000d4bc
    a4cc:	0000ddc4 	.word	0x0000ddc4
    a4d0:	0000dd7c 	.word	0x0000dd7c
    a4d4:	0000dd94 	.word	0x0000dd94

0000a4d8 <z_pend_curr>:
{
    a4d8:	b570      	push	{r4, r5, r6, lr}
    a4da:	4604      	mov	r4, r0
    a4dc:	460d      	mov	r5, r1
    a4de:	4611      	mov	r1, r2
	pending_current = _current;
    a4e0:	4b0f      	ldr	r3, [pc, #60]	; (a520 <z_pend_curr+0x48>)
    a4e2:	6898      	ldr	r0, [r3, #8]
    a4e4:	4b0f      	ldr	r3, [pc, #60]	; (a524 <z_pend_curr+0x4c>)
    a4e6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a4ec:	f7ff ff98 	bl	a420 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a4f0:	4620      	mov	r0, r4
    a4f2:	f7fe fd65 	bl	8fc0 <z_spin_unlock_valid>
    a4f6:	b118      	cbz	r0, a500 <z_pend_curr+0x28>
    a4f8:	4628      	mov	r0, r5
    a4fa:	f7fa f81f 	bl	453c <arch_swap>
}
    a4fe:	bd70      	pop	{r4, r5, r6, pc}
    a500:	4e09      	ldr	r6, [pc, #36]	; (a528 <z_pend_curr+0x50>)
    a502:	23d0      	movs	r3, #208	; 0xd0
    a504:	4632      	mov	r2, r6
    a506:	4909      	ldr	r1, [pc, #36]	; (a52c <z_pend_curr+0x54>)
    a508:	4809      	ldr	r0, [pc, #36]	; (a530 <z_pend_curr+0x58>)
    a50a:	f001 fdfd 	bl	c108 <assert_print>
    a50e:	4621      	mov	r1, r4
    a510:	4808      	ldr	r0, [pc, #32]	; (a534 <z_pend_curr+0x5c>)
    a512:	f001 fdf9 	bl	c108 <assert_print>
    a516:	21d0      	movs	r1, #208	; 0xd0
    a518:	4630      	mov	r0, r6
    a51a:	f001 fdee 	bl	c0fa <assert_post_action>
    a51e:	e7eb      	b.n	a4f8 <z_pend_curr+0x20>
    a520:	20001160 	.word	0x20001160
    a524:	20001198 	.word	0x20001198
    a528:	0000dd4c 	.word	0x0000dd4c
    a52c:	0000dd7c 	.word	0x0000dd7c
    a530:	0000d4bc 	.word	0x0000d4bc
    a534:	0000dd94 	.word	0x0000dd94

0000a538 <z_set_prio>:
{
    a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a53c:	4604      	mov	r4, r0
    a53e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    a540:	2500      	movs	r5, #0
	__asm__ volatile(
    a542:	f04f 0320 	mov.w	r3, #32
    a546:	f3ef 8811 	mrs	r8, BASEPRI
    a54a:	f383 8812 	msr	BASEPRI_MAX, r3
    a54e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a552:	4844      	ldr	r0, [pc, #272]	; (a664 <z_set_prio+0x12c>)
    a554:	f7fe fd24 	bl	8fa0 <z_spin_lock_valid>
    a558:	b120      	cbz	r0, a564 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    a55a:	4842      	ldr	r0, [pc, #264]	; (a664 <z_set_prio+0x12c>)
    a55c:	f7fe fd40 	bl	8fe0 <z_spin_lock_set_owner>
	bool need_sched = 0;
    a560:	2700      	movs	r7, #0
	return k;
    a562:	e01d      	b.n	a5a0 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a564:	4f40      	ldr	r7, [pc, #256]	; (a668 <z_set_prio+0x130>)
    a566:	238e      	movs	r3, #142	; 0x8e
    a568:	463a      	mov	r2, r7
    a56a:	4940      	ldr	r1, [pc, #256]	; (a66c <z_set_prio+0x134>)
    a56c:	4840      	ldr	r0, [pc, #256]	; (a670 <z_set_prio+0x138>)
    a56e:	f001 fdcb 	bl	c108 <assert_print>
    a572:	493c      	ldr	r1, [pc, #240]	; (a664 <z_set_prio+0x12c>)
    a574:	483f      	ldr	r0, [pc, #252]	; (a674 <z_set_prio+0x13c>)
    a576:	f001 fdc7 	bl	c108 <assert_print>
    a57a:	218e      	movs	r1, #142	; 0x8e
    a57c:	4638      	mov	r0, r7
    a57e:	f001 fdbc 	bl	c0fa <assert_post_action>
    a582:	e7ea      	b.n	a55a <z_set_prio+0x22>
		if (need_sched) {
    a584:	f013 0701 	ands.w	r7, r3, #1
    a588:	d116      	bne.n	a5b8 <z_set_prio+0x80>
			thread->base.prio = prio;
    a58a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a58c:	4835      	ldr	r0, [pc, #212]	; (a664 <z_set_prio+0x12c>)
    a58e:	f7fe fd17 	bl	8fc0 <z_spin_unlock_valid>
    a592:	2800      	cmp	r0, #0
    a594:	d053      	beq.n	a63e <z_set_prio+0x106>
	__asm__ volatile(
    a596:	f388 8811 	msr	BASEPRI, r8
    a59a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a59e:	2501      	movs	r5, #1
    a5a0:	462b      	mov	r3, r5
    a5a2:	2d00      	cmp	r5, #0
    a5a4:	d15b      	bne.n	a65e <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    a5a6:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a5a8:	f012 0f1f 	tst.w	r2, #31
    a5ac:	d1ea      	bne.n	a584 <z_set_prio+0x4c>
	return node->next != NULL;
    a5ae:	69a1      	ldr	r1, [r4, #24]
    a5b0:	2900      	cmp	r1, #0
    a5b2:	d1e7      	bne.n	a584 <z_set_prio+0x4c>
    a5b4:	2301      	movs	r3, #1
    a5b6:	e7e5      	b.n	a584 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a5b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a5bc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a5be:	4621      	mov	r1, r4
    a5c0:	482d      	ldr	r0, [pc, #180]	; (a678 <z_set_prio+0x140>)
    a5c2:	f7ff fbd9 	bl	9d78 <z_priq_dumb_remove>
				thread->base.prio = prio;
    a5c6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a5c8:	7b63      	ldrb	r3, [r4, #13]
    a5ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a5ce:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a5d0:	4b2a      	ldr	r3, [pc, #168]	; (a67c <z_set_prio+0x144>)
    a5d2:	429c      	cmp	r4, r3
    a5d4:	d01f      	beq.n	a616 <z_set_prio+0xde>
	return list->head == list;
    a5d6:	4b2a      	ldr	r3, [pc, #168]	; (a680 <z_set_prio+0x148>)
    a5d8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5dc:	429d      	cmp	r5, r3
    a5de:	d02c      	beq.n	a63a <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a5e0:	b16d      	cbz	r5, a5fe <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a5e2:	4629      	mov	r1, r5
    a5e4:	4620      	mov	r0, r4
    a5e6:	f002 fcc6 	bl	cf76 <z_sched_prio_cmp>
    a5ea:	2800      	cmp	r0, #0
    a5ec:	dc1f      	bgt.n	a62e <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a5ee:	b135      	cbz	r5, a5fe <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    a5f0:	4b23      	ldr	r3, [pc, #140]	; (a680 <z_set_prio+0x148>)
    a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5f4:	429d      	cmp	r5, r3
    a5f6:	d002      	beq.n	a5fe <z_set_prio+0xc6>
    a5f8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a5fa:	2d00      	cmp	r5, #0
    a5fc:	d1f0      	bne.n	a5e0 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    a5fe:	4b20      	ldr	r3, [pc, #128]	; (a680 <z_set_prio+0x148>)
    a600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a602:	f103 0120 	add.w	r1, r3, #32
    a606:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a608:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a60a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a60c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    a60e:	2001      	movs	r0, #1
    a610:	f7ff fbd6 	bl	9dc0 <update_cache>
    a614:	e7ba      	b.n	a58c <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a616:	4d1b      	ldr	r5, [pc, #108]	; (a684 <z_set_prio+0x14c>)
    a618:	23ba      	movs	r3, #186	; 0xba
    a61a:	462a      	mov	r2, r5
    a61c:	491a      	ldr	r1, [pc, #104]	; (a688 <z_set_prio+0x150>)
    a61e:	4814      	ldr	r0, [pc, #80]	; (a670 <z_set_prio+0x138>)
    a620:	f001 fd72 	bl	c108 <assert_print>
    a624:	21ba      	movs	r1, #186	; 0xba
    a626:	4628      	mov	r0, r5
    a628:	f001 fd67 	bl	c0fa <assert_post_action>
    a62c:	e7d3      	b.n	a5d6 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    a62e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a630:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a632:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a634:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a636:	606c      	str	r4, [r5, #4]
}
    a638:	e7e9      	b.n	a60e <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a63a:	2500      	movs	r5, #0
    a63c:	e7d0      	b.n	a5e0 <z_set_prio+0xa8>
    a63e:	4d0a      	ldr	r5, [pc, #40]	; (a668 <z_set_prio+0x130>)
    a640:	23b9      	movs	r3, #185	; 0xb9
    a642:	462a      	mov	r2, r5
    a644:	4911      	ldr	r1, [pc, #68]	; (a68c <z_set_prio+0x154>)
    a646:	480a      	ldr	r0, [pc, #40]	; (a670 <z_set_prio+0x138>)
    a648:	f001 fd5e 	bl	c108 <assert_print>
    a64c:	4905      	ldr	r1, [pc, #20]	; (a664 <z_set_prio+0x12c>)
    a64e:	4810      	ldr	r0, [pc, #64]	; (a690 <z_set_prio+0x158>)
    a650:	f001 fd5a 	bl	c108 <assert_print>
    a654:	21b9      	movs	r1, #185	; 0xb9
    a656:	4628      	mov	r0, r5
    a658:	f001 fd4f 	bl	c0fa <assert_post_action>
    a65c:	e79b      	b.n	a596 <z_set_prio+0x5e>
}
    a65e:	4638      	mov	r0, r7
    a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a664:	2000119c 	.word	0x2000119c
    a668:	0000dd4c 	.word	0x0000dd4c
    a66c:	0000ddac 	.word	0x0000ddac
    a670:	0000d4bc 	.word	0x0000d4bc
    a674:	0000ddc4 	.word	0x0000ddc4
    a678:	20001180 	.word	0x20001180
    a67c:	20000490 	.word	0x20000490
    a680:	20001160 	.word	0x20001160
    a684:	0000f624 	.word	0x0000f624
    a688:	0000f660 	.word	0x0000f660
    a68c:	0000dd7c 	.word	0x0000dd7c
    a690:	0000dd94 	.word	0x0000dd94

0000a694 <z_impl_k_thread_suspend>:
{
    a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a696:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a698:	3018      	adds	r0, #24
    a69a:	f000 fdcf 	bl	b23c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a69e:	2500      	movs	r5, #0
	__asm__ volatile(
    a6a0:	f04f 0320 	mov.w	r3, #32
    a6a4:	f3ef 8611 	mrs	r6, BASEPRI
    a6a8:	f383 8812 	msr	BASEPRI_MAX, r3
    a6ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6b0:	482d      	ldr	r0, [pc, #180]	; (a768 <z_impl_k_thread_suspend+0xd4>)
    a6b2:	f7fe fc75 	bl	8fa0 <z_spin_lock_valid>
    a6b6:	b118      	cbz	r0, a6c0 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    a6b8:	482b      	ldr	r0, [pc, #172]	; (a768 <z_impl_k_thread_suspend+0xd4>)
    a6ba:	f7fe fc91 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    a6be:	e01c      	b.n	a6fa <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6c0:	4f2a      	ldr	r7, [pc, #168]	; (a76c <z_impl_k_thread_suspend+0xd8>)
    a6c2:	238e      	movs	r3, #142	; 0x8e
    a6c4:	463a      	mov	r2, r7
    a6c6:	492a      	ldr	r1, [pc, #168]	; (a770 <z_impl_k_thread_suspend+0xdc>)
    a6c8:	482a      	ldr	r0, [pc, #168]	; (a774 <z_impl_k_thread_suspend+0xe0>)
    a6ca:	f001 fd1d 	bl	c108 <assert_print>
    a6ce:	4926      	ldr	r1, [pc, #152]	; (a768 <z_impl_k_thread_suspend+0xd4>)
    a6d0:	4829      	ldr	r0, [pc, #164]	; (a778 <z_impl_k_thread_suspend+0xe4>)
    a6d2:	f001 fd19 	bl	c108 <assert_print>
    a6d6:	218e      	movs	r1, #142	; 0x8e
    a6d8:	4638      	mov	r0, r7
    a6da:	f001 fd0e 	bl	c0fa <assert_post_action>
    a6de:	e7eb      	b.n	a6b8 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a6e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a6e4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a6e6:	4621      	mov	r1, r4
    a6e8:	4824      	ldr	r0, [pc, #144]	; (a77c <z_impl_k_thread_suspend+0xe8>)
    a6ea:	f7ff fb45 	bl	9d78 <z_priq_dumb_remove>
}
    a6ee:	e00a      	b.n	a706 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    a6f0:	f386 8811 	msr	BASEPRI, r6
    a6f4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a6f8:	2501      	movs	r5, #1
    a6fa:	bb2d      	cbnz	r5, a748 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    a6fc:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a6fe:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a702:	2b00      	cmp	r3, #0
    a704:	dbec      	blt.n	a6e0 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a706:	7b63      	ldrb	r3, [r4, #13]
    a708:	f043 0310 	orr.w	r3, r3, #16
    a70c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a70e:	4b1c      	ldr	r3, [pc, #112]	; (a780 <z_impl_k_thread_suspend+0xec>)
    a710:	6898      	ldr	r0, [r3, #8]
    a712:	42a0      	cmp	r0, r4
    a714:	bf14      	ite	ne
    a716:	2000      	movne	r0, #0
    a718:	2001      	moveq	r0, #1
    a71a:	f7ff fb51 	bl	9dc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a71e:	4812      	ldr	r0, [pc, #72]	; (a768 <z_impl_k_thread_suspend+0xd4>)
    a720:	f7fe fc4e 	bl	8fc0 <z_spin_unlock_valid>
    a724:	2800      	cmp	r0, #0
    a726:	d1e3      	bne.n	a6f0 <z_impl_k_thread_suspend+0x5c>
    a728:	4d10      	ldr	r5, [pc, #64]	; (a76c <z_impl_k_thread_suspend+0xd8>)
    a72a:	23b9      	movs	r3, #185	; 0xb9
    a72c:	462a      	mov	r2, r5
    a72e:	4915      	ldr	r1, [pc, #84]	; (a784 <z_impl_k_thread_suspend+0xf0>)
    a730:	4810      	ldr	r0, [pc, #64]	; (a774 <z_impl_k_thread_suspend+0xe0>)
    a732:	f001 fce9 	bl	c108 <assert_print>
    a736:	490c      	ldr	r1, [pc, #48]	; (a768 <z_impl_k_thread_suspend+0xd4>)
    a738:	4813      	ldr	r0, [pc, #76]	; (a788 <z_impl_k_thread_suspend+0xf4>)
    a73a:	f001 fce5 	bl	c108 <assert_print>
    a73e:	21b9      	movs	r1, #185	; 0xb9
    a740:	4628      	mov	r0, r5
    a742:	f001 fcda 	bl	c0fa <assert_post_action>
    a746:	e7d3      	b.n	a6f0 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    a748:	4b0d      	ldr	r3, [pc, #52]	; (a780 <z_impl_k_thread_suspend+0xec>)
    a74a:	689b      	ldr	r3, [r3, #8]
    a74c:	42a3      	cmp	r3, r4
    a74e:	d000      	beq.n	a752 <z_impl_k_thread_suspend+0xbe>
}
    a750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    a752:	f04f 0320 	mov.w	r3, #32
    a756:	f3ef 8011 	mrs	r0, BASEPRI
    a75a:	f383 8812 	msr	BASEPRI_MAX, r3
    a75e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a762:	f002 fc12 	bl	cf8a <z_reschedule_irqlock>
    a766:	e7f3      	b.n	a750 <z_impl_k_thread_suspend+0xbc>
    a768:	2000119c 	.word	0x2000119c
    a76c:	0000dd4c 	.word	0x0000dd4c
    a770:	0000ddac 	.word	0x0000ddac
    a774:	0000d4bc 	.word	0x0000d4bc
    a778:	0000ddc4 	.word	0x0000ddc4
    a77c:	20001180 	.word	0x20001180
    a780:	20001160 	.word	0x20001160
    a784:	0000dd7c 	.word	0x0000dd7c
    a788:	0000dd94 	.word	0x0000dd94

0000a78c <k_sched_unlock>:
{
    a78c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    a78e:	2400      	movs	r4, #0
    a790:	f04f 0320 	mov.w	r3, #32
    a794:	f3ef 8511 	mrs	r5, BASEPRI
    a798:	f383 8812 	msr	BASEPRI_MAX, r3
    a79c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7a0:	4838      	ldr	r0, [pc, #224]	; (a884 <k_sched_unlock+0xf8>)
    a7a2:	f7fe fbfd 	bl	8fa0 <z_spin_lock_valid>
    a7a6:	b118      	cbz	r0, a7b0 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    a7a8:	4836      	ldr	r0, [pc, #216]	; (a884 <k_sched_unlock+0xf8>)
    a7aa:	f7fe fc19 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    a7ae:	e036      	b.n	a81e <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7b0:	4e35      	ldr	r6, [pc, #212]	; (a888 <k_sched_unlock+0xfc>)
    a7b2:	238e      	movs	r3, #142	; 0x8e
    a7b4:	4632      	mov	r2, r6
    a7b6:	4935      	ldr	r1, [pc, #212]	; (a88c <k_sched_unlock+0x100>)
    a7b8:	4835      	ldr	r0, [pc, #212]	; (a890 <k_sched_unlock+0x104>)
    a7ba:	f001 fca5 	bl	c108 <assert_print>
    a7be:	4931      	ldr	r1, [pc, #196]	; (a884 <k_sched_unlock+0xf8>)
    a7c0:	4834      	ldr	r0, [pc, #208]	; (a894 <k_sched_unlock+0x108>)
    a7c2:	f001 fca1 	bl	c108 <assert_print>
    a7c6:	218e      	movs	r1, #142	; 0x8e
    a7c8:	4630      	mov	r0, r6
    a7ca:	f001 fc96 	bl	c0fa <assert_post_action>
    a7ce:	e7eb      	b.n	a7a8 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a7d0:	4c31      	ldr	r4, [pc, #196]	; (a898 <k_sched_unlock+0x10c>)
    a7d2:	f240 33bb 	movw	r3, #955	; 0x3bb
    a7d6:	4622      	mov	r2, r4
    a7d8:	4930      	ldr	r1, [pc, #192]	; (a89c <k_sched_unlock+0x110>)
    a7da:	482d      	ldr	r0, [pc, #180]	; (a890 <k_sched_unlock+0x104>)
    a7dc:	f001 fc94 	bl	c108 <assert_print>
    a7e0:	482f      	ldr	r0, [pc, #188]	; (a8a0 <k_sched_unlock+0x114>)
    a7e2:	f001 fc91 	bl	c108 <assert_print>
    a7e6:	f240 31bb 	movw	r1, #955	; 0x3bb
    a7ea:	4620      	mov	r0, r4
    a7ec:	f001 fc85 	bl	c0fa <assert_post_action>
    a7f0:	e01b      	b.n	a82a <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    a7f2:	4c29      	ldr	r4, [pc, #164]	; (a898 <k_sched_unlock+0x10c>)
    a7f4:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    a7f8:	4622      	mov	r2, r4
    a7fa:	492a      	ldr	r1, [pc, #168]	; (a8a4 <k_sched_unlock+0x118>)
    a7fc:	4824      	ldr	r0, [pc, #144]	; (a890 <k_sched_unlock+0x104>)
    a7fe:	f001 fc83 	bl	c108 <assert_print>
    a802:	4827      	ldr	r0, [pc, #156]	; (a8a0 <k_sched_unlock+0x114>)
    a804:	f001 fc80 	bl	c108 <assert_print>
    a808:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    a80c:	4620      	mov	r0, r4
    a80e:	f001 fc74 	bl	c0fa <assert_post_action>
    a812:	e00e      	b.n	a832 <k_sched_unlock+0xa6>
	__asm__ volatile(
    a814:	f385 8811 	msr	BASEPRI, r5
    a818:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a81c:	2401      	movs	r4, #1
    a81e:	bb2c      	cbnz	r4, a86c <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a820:	4b21      	ldr	r3, [pc, #132]	; (a8a8 <k_sched_unlock+0x11c>)
    a822:	689b      	ldr	r3, [r3, #8]
    a824:	7bdb      	ldrb	r3, [r3, #15]
    a826:	2b00      	cmp	r3, #0
    a828:	d0d2      	beq.n	a7d0 <k_sched_unlock+0x44>
    a82a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    a82e:	2b00      	cmp	r3, #0
    a830:	d1df      	bne.n	a7f2 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    a832:	4b1d      	ldr	r3, [pc, #116]	; (a8a8 <k_sched_unlock+0x11c>)
    a834:	689a      	ldr	r2, [r3, #8]
    a836:	7bd3      	ldrb	r3, [r2, #15]
    a838:	3301      	adds	r3, #1
    a83a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a83c:	2000      	movs	r0, #0
    a83e:	f7ff fabf 	bl	9dc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a842:	4810      	ldr	r0, [pc, #64]	; (a884 <k_sched_unlock+0xf8>)
    a844:	f7fe fbbc 	bl	8fc0 <z_spin_unlock_valid>
    a848:	2800      	cmp	r0, #0
    a84a:	d1e3      	bne.n	a814 <k_sched_unlock+0x88>
    a84c:	4c0e      	ldr	r4, [pc, #56]	; (a888 <k_sched_unlock+0xfc>)
    a84e:	23b9      	movs	r3, #185	; 0xb9
    a850:	4622      	mov	r2, r4
    a852:	4916      	ldr	r1, [pc, #88]	; (a8ac <k_sched_unlock+0x120>)
    a854:	480e      	ldr	r0, [pc, #56]	; (a890 <k_sched_unlock+0x104>)
    a856:	f001 fc57 	bl	c108 <assert_print>
    a85a:	490a      	ldr	r1, [pc, #40]	; (a884 <k_sched_unlock+0xf8>)
    a85c:	4814      	ldr	r0, [pc, #80]	; (a8b0 <k_sched_unlock+0x124>)
    a85e:	f001 fc53 	bl	c108 <assert_print>
    a862:	21b9      	movs	r1, #185	; 0xb9
    a864:	4620      	mov	r0, r4
    a866:	f001 fc48 	bl	c0fa <assert_post_action>
    a86a:	e7d3      	b.n	a814 <k_sched_unlock+0x88>
	__asm__ volatile(
    a86c:	f04f 0320 	mov.w	r3, #32
    a870:	f3ef 8011 	mrs	r0, BASEPRI
    a874:	f383 8812 	msr	BASEPRI_MAX, r3
    a878:	f3bf 8f6f 	isb	sy
    a87c:	f002 fb85 	bl	cf8a <z_reschedule_irqlock>
}
    a880:	bd70      	pop	{r4, r5, r6, pc}
    a882:	bf00      	nop
    a884:	2000119c 	.word	0x2000119c
    a888:	0000dd4c 	.word	0x0000dd4c
    a88c:	0000ddac 	.word	0x0000ddac
    a890:	0000d4bc 	.word	0x0000d4bc
    a894:	0000ddc4 	.word	0x0000ddc4
    a898:	0000f624 	.word	0x0000f624
    a89c:	0000f6ac 	.word	0x0000f6ac
    a8a0:	0000f57c 	.word	0x0000f57c
    a8a4:	0000f434 	.word	0x0000f434
    a8a8:	20001160 	.word	0x20001160
    a8ac:	0000dd7c 	.word	0x0000dd7c
    a8b0:	0000dd94 	.word	0x0000dd94

0000a8b4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    a8b6:	7b43      	ldrb	r3, [r0, #13]
    a8b8:	f013 0f08 	tst.w	r3, #8
    a8bc:	d145      	bne.n	a94a <end_thread+0x96>
    a8be:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    a8c0:	f043 0308 	orr.w	r3, r3, #8
    a8c4:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a8c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a8ca:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    a8cc:	f013 0f80 	tst.w	r3, #128	; 0x80
    a8d0:	d12d      	bne.n	a92e <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    a8d2:	68ab      	ldr	r3, [r5, #8]
    a8d4:	b15b      	cbz	r3, a8ee <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a8d6:	4628      	mov	r0, r5
    a8d8:	f7ff f870 	bl	99bc <pended_on_thread>
    a8dc:	4629      	mov	r1, r5
    a8de:	f7ff fa4b 	bl	9d78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a8e2:	7b6b      	ldrb	r3, [r5, #13]
    a8e4:	f023 0302 	bic.w	r3, r3, #2
    a8e8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    a8ea:	2300      	movs	r3, #0
    a8ec:	60ab      	str	r3, [r5, #8]
    a8ee:	f105 0018 	add.w	r0, r5, #24
    a8f2:	f000 fca3 	bl	b23c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    a8f6:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    a8fa:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8fc:	42bc      	cmp	r4, r7
    a8fe:	d01e      	beq.n	a93e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a900:	b1ec      	cbz	r4, a93e <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a902:	4620      	mov	r0, r4
    a904:	f7ff f85a 	bl	99bc <pended_on_thread>
    a908:	4621      	mov	r1, r4
    a90a:	f7ff fa35 	bl	9d78 <z_priq_dumb_remove>
    a90e:	7b63      	ldrb	r3, [r4, #13]
    a910:	f023 0302 	bic.w	r3, r3, #2
    a914:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a916:	2600      	movs	r6, #0
    a918:	60a6      	str	r6, [r4, #8]
    a91a:	f104 0018 	add.w	r0, r4, #24
    a91e:	f000 fc8d 	bl	b23c <z_abort_timeout>
    a922:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    a926:	4620      	mov	r0, r4
    a928:	f7ff fba4 	bl	a074 <ready_thread>
    a92c:	e7e5      	b.n	a8fa <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a932:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a934:	4601      	mov	r1, r0
    a936:	4805      	ldr	r0, [pc, #20]	; (a94c <end_thread+0x98>)
    a938:	f7ff fa1e 	bl	9d78 <z_priq_dumb_remove>
}
    a93c:	e7c9      	b.n	a8d2 <end_thread+0x1e>
		update_cache(1);
    a93e:	2001      	movs	r0, #1
    a940:	f7ff fa3e 	bl	9dc0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    a944:	4628      	mov	r0, r5
    a946:	f7fe fb53 	bl	8ff0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a94c:	20001180 	.word	0x20001180

0000a950 <z_unpend1_no_timeout>:
{
    a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a952:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a954:	2500      	movs	r5, #0
    a956:	f04f 0320 	mov.w	r3, #32
    a95a:	f3ef 8711 	mrs	r7, BASEPRI
    a95e:	f383 8812 	msr	BASEPRI_MAX, r3
    a962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a966:	4823      	ldr	r0, [pc, #140]	; (a9f4 <z_unpend1_no_timeout+0xa4>)
    a968:	f7fe fb1a 	bl	8fa0 <z_spin_lock_valid>
    a96c:	b120      	cbz	r0, a978 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    a96e:	4821      	ldr	r0, [pc, #132]	; (a9f4 <z_unpend1_no_timeout+0xa4>)
    a970:	f7fe fb36 	bl	8fe0 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    a974:	2400      	movs	r4, #0
	return k;
    a976:	e018      	b.n	a9aa <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a978:	4c1f      	ldr	r4, [pc, #124]	; (a9f8 <z_unpend1_no_timeout+0xa8>)
    a97a:	238e      	movs	r3, #142	; 0x8e
    a97c:	4622      	mov	r2, r4
    a97e:	491f      	ldr	r1, [pc, #124]	; (a9fc <z_unpend1_no_timeout+0xac>)
    a980:	481f      	ldr	r0, [pc, #124]	; (aa00 <z_unpend1_no_timeout+0xb0>)
    a982:	f001 fbc1 	bl	c108 <assert_print>
    a986:	491b      	ldr	r1, [pc, #108]	; (a9f4 <z_unpend1_no_timeout+0xa4>)
    a988:	481e      	ldr	r0, [pc, #120]	; (aa04 <z_unpend1_no_timeout+0xb4>)
    a98a:	f001 fbbd 	bl	c108 <assert_print>
    a98e:	218e      	movs	r1, #142	; 0x8e
    a990:	4620      	mov	r0, r4
    a992:	f001 fbb2 	bl	c0fa <assert_post_action>
    a996:	e7ea      	b.n	a96e <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a998:	4816      	ldr	r0, [pc, #88]	; (a9f4 <z_unpend1_no_timeout+0xa4>)
    a99a:	f7fe fb11 	bl	8fc0 <z_spin_unlock_valid>
    a99e:	b1b8      	cbz	r0, a9d0 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    a9a0:	f387 8811 	msr	BASEPRI, r7
    a9a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a9a8:	2501      	movs	r5, #1
    a9aa:	bb0d      	cbnz	r5, a9f0 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    a9ac:	4630      	mov	r0, r6
    a9ae:	f002 fb01 	bl	cfb4 <z_priq_dumb_best>
		if (thread != NULL) {
    a9b2:	4604      	mov	r4, r0
    a9b4:	2800      	cmp	r0, #0
    a9b6:	d0ef      	beq.n	a998 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a9b8:	f7ff f800 	bl	99bc <pended_on_thread>
    a9bc:	4621      	mov	r1, r4
    a9be:	f7ff f9db 	bl	9d78 <z_priq_dumb_remove>
    a9c2:	7b63      	ldrb	r3, [r4, #13]
    a9c4:	f023 0302 	bic.w	r3, r3, #2
    a9c8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a9ca:	2300      	movs	r3, #0
    a9cc:	60a3      	str	r3, [r4, #8]
}
    a9ce:	e7e3      	b.n	a998 <z_unpend1_no_timeout+0x48>
    a9d0:	4d09      	ldr	r5, [pc, #36]	; (a9f8 <z_unpend1_no_timeout+0xa8>)
    a9d2:	23b9      	movs	r3, #185	; 0xb9
    a9d4:	462a      	mov	r2, r5
    a9d6:	490c      	ldr	r1, [pc, #48]	; (aa08 <z_unpend1_no_timeout+0xb8>)
    a9d8:	4809      	ldr	r0, [pc, #36]	; (aa00 <z_unpend1_no_timeout+0xb0>)
    a9da:	f001 fb95 	bl	c108 <assert_print>
    a9de:	4905      	ldr	r1, [pc, #20]	; (a9f4 <z_unpend1_no_timeout+0xa4>)
    a9e0:	480a      	ldr	r0, [pc, #40]	; (aa0c <z_unpend1_no_timeout+0xbc>)
    a9e2:	f001 fb91 	bl	c108 <assert_print>
    a9e6:	21b9      	movs	r1, #185	; 0xb9
    a9e8:	4628      	mov	r0, r5
    a9ea:	f001 fb86 	bl	c0fa <assert_post_action>
    a9ee:	e7d7      	b.n	a9a0 <z_unpend1_no_timeout+0x50>
}
    a9f0:	4620      	mov	r0, r4
    a9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9f4:	2000119c 	.word	0x2000119c
    a9f8:	0000dd4c 	.word	0x0000dd4c
    a9fc:	0000ddac 	.word	0x0000ddac
    aa00:	0000d4bc 	.word	0x0000d4bc
    aa04:	0000ddc4 	.word	0x0000ddc4
    aa08:	0000dd7c 	.word	0x0000dd7c
    aa0c:	0000dd94 	.word	0x0000dd94

0000aa10 <z_unpend_first_thread>:
{
    aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa12:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    aa14:	2500      	movs	r5, #0
	__asm__ volatile(
    aa16:	f04f 0320 	mov.w	r3, #32
    aa1a:	f3ef 8711 	mrs	r7, BASEPRI
    aa1e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa26:	4825      	ldr	r0, [pc, #148]	; (aabc <z_unpend_first_thread+0xac>)
    aa28:	f7fe faba 	bl	8fa0 <z_spin_lock_valid>
    aa2c:	b120      	cbz	r0, aa38 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    aa2e:	4823      	ldr	r0, [pc, #140]	; (aabc <z_unpend_first_thread+0xac>)
    aa30:	f7fe fad6 	bl	8fe0 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    aa34:	2400      	movs	r4, #0
	return k;
    aa36:	e018      	b.n	aa6a <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa38:	4c21      	ldr	r4, [pc, #132]	; (aac0 <z_unpend_first_thread+0xb0>)
    aa3a:	238e      	movs	r3, #142	; 0x8e
    aa3c:	4622      	mov	r2, r4
    aa3e:	4921      	ldr	r1, [pc, #132]	; (aac4 <z_unpend_first_thread+0xb4>)
    aa40:	4821      	ldr	r0, [pc, #132]	; (aac8 <z_unpend_first_thread+0xb8>)
    aa42:	f001 fb61 	bl	c108 <assert_print>
    aa46:	491d      	ldr	r1, [pc, #116]	; (aabc <z_unpend_first_thread+0xac>)
    aa48:	4820      	ldr	r0, [pc, #128]	; (aacc <z_unpend_first_thread+0xbc>)
    aa4a:	f001 fb5d 	bl	c108 <assert_print>
    aa4e:	218e      	movs	r1, #142	; 0x8e
    aa50:	4620      	mov	r0, r4
    aa52:	f001 fb52 	bl	c0fa <assert_post_action>
    aa56:	e7ea      	b.n	aa2e <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa58:	4818      	ldr	r0, [pc, #96]	; (aabc <z_unpend_first_thread+0xac>)
    aa5a:	f7fe fab1 	bl	8fc0 <z_spin_unlock_valid>
    aa5e:	b1d8      	cbz	r0, aa98 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    aa60:	f387 8811 	msr	BASEPRI, r7
    aa64:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aa68:	2501      	movs	r5, #1
    aa6a:	bb2d      	cbnz	r5, aab8 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    aa6c:	4630      	mov	r0, r6
    aa6e:	f002 faa1 	bl	cfb4 <z_priq_dumb_best>
		if (thread != NULL) {
    aa72:	4604      	mov	r4, r0
    aa74:	2800      	cmp	r0, #0
    aa76:	d0ef      	beq.n	aa58 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa78:	f7fe ffa0 	bl	99bc <pended_on_thread>
    aa7c:	4621      	mov	r1, r4
    aa7e:	f7ff f97b 	bl	9d78 <z_priq_dumb_remove>
    aa82:	7b63      	ldrb	r3, [r4, #13]
    aa84:	f023 0302 	bic.w	r3, r3, #2
    aa88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aa8a:	2300      	movs	r3, #0
    aa8c:	60a3      	str	r3, [r4, #8]
    aa8e:	f104 0018 	add.w	r0, r4, #24
    aa92:	f000 fbd3 	bl	b23c <z_abort_timeout>
    aa96:	e7df      	b.n	aa58 <z_unpend_first_thread+0x48>
    aa98:	4d09      	ldr	r5, [pc, #36]	; (aac0 <z_unpend_first_thread+0xb0>)
    aa9a:	23b9      	movs	r3, #185	; 0xb9
    aa9c:	462a      	mov	r2, r5
    aa9e:	490c      	ldr	r1, [pc, #48]	; (aad0 <z_unpend_first_thread+0xc0>)
    aaa0:	4809      	ldr	r0, [pc, #36]	; (aac8 <z_unpend_first_thread+0xb8>)
    aaa2:	f001 fb31 	bl	c108 <assert_print>
    aaa6:	4905      	ldr	r1, [pc, #20]	; (aabc <z_unpend_first_thread+0xac>)
    aaa8:	480a      	ldr	r0, [pc, #40]	; (aad4 <z_unpend_first_thread+0xc4>)
    aaaa:	f001 fb2d 	bl	c108 <assert_print>
    aaae:	21b9      	movs	r1, #185	; 0xb9
    aab0:	4628      	mov	r0, r5
    aab2:	f001 fb22 	bl	c0fa <assert_post_action>
    aab6:	e7d3      	b.n	aa60 <z_unpend_first_thread+0x50>
}
    aab8:	4620      	mov	r0, r4
    aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aabc:	2000119c 	.word	0x2000119c
    aac0:	0000dd4c 	.word	0x0000dd4c
    aac4:	0000ddac 	.word	0x0000ddac
    aac8:	0000d4bc 	.word	0x0000d4bc
    aacc:	0000ddc4 	.word	0x0000ddc4
    aad0:	0000dd7c 	.word	0x0000dd7c
    aad4:	0000dd94 	.word	0x0000dd94

0000aad8 <z_sched_init>:
{
    aad8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    aada:	4804      	ldr	r0, [pc, #16]	; (aaec <z_sched_init+0x14>)
    aadc:	f002 fa71 	bl	cfc2 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    aae0:	2100      	movs	r1, #0
    aae2:	4608      	mov	r0, r1
    aae4:	f7fe ffa8 	bl	9a38 <k_sched_time_slice_set>
}
    aae8:	bd08      	pop	{r3, pc}
    aaea:	bf00      	nop
    aaec:	2000117c 	.word	0x2000117c

0000aaf0 <z_impl_k_yield>:
{
    aaf0:	b570      	push	{r4, r5, r6, lr}
    aaf2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d149      	bne.n	ab8e <z_impl_k_yield+0x9e>
	__asm__ volatile(
    aafa:	f04f 0320 	mov.w	r3, #32
    aafe:	f3ef 8611 	mrs	r6, BASEPRI
    ab02:	f383 8812 	msr	BASEPRI_MAX, r3
    ab06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab0a:	4843      	ldr	r0, [pc, #268]	; (ac18 <z_impl_k_yield+0x128>)
    ab0c:	f7fe fa48 	bl	8fa0 <z_spin_lock_valid>
    ab10:	2800      	cmp	r0, #0
    ab12:	d04d      	beq.n	abb0 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    ab14:	4840      	ldr	r0, [pc, #256]	; (ac18 <z_impl_k_yield+0x128>)
    ab16:	f7fe fa63 	bl	8fe0 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    ab1a:	4c40      	ldr	r4, [pc, #256]	; (ac1c <z_impl_k_yield+0x12c>)
    ab1c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ab1e:	7b4b      	ldrb	r3, [r1, #13]
    ab20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ab24:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ab26:	f104 0020 	add.w	r0, r4, #32
    ab2a:	f7ff f925 	bl	9d78 <z_priq_dumb_remove>
	queue_thread(_current);
    ab2e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    ab30:	7b6b      	ldrb	r3, [r5, #13]
    ab32:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab36:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ab38:	4b39      	ldr	r3, [pc, #228]	; (ac20 <z_impl_k_yield+0x130>)
    ab3a:	429d      	cmp	r5, r3
    ab3c:	d048      	beq.n	abd0 <z_impl_k_yield+0xe0>
	return list->head == list;
    ab3e:	4b37      	ldr	r3, [pc, #220]	; (ac1c <z_impl_k_yield+0x12c>)
    ab40:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab44:	429c      	cmp	r4, r3
    ab46:	d055      	beq.n	abf4 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ab48:	b16c      	cbz	r4, ab66 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ab4a:	4621      	mov	r1, r4
    ab4c:	4628      	mov	r0, r5
    ab4e:	f002 fa12 	bl	cf76 <z_sched_prio_cmp>
    ab52:	2800      	cmp	r0, #0
    ab54:	dc48      	bgt.n	abe8 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ab56:	b134      	cbz	r4, ab66 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    ab58:	4b30      	ldr	r3, [pc, #192]	; (ac1c <z_impl_k_yield+0x12c>)
    ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab5c:	429c      	cmp	r4, r3
    ab5e:	d002      	beq.n	ab66 <z_impl_k_yield+0x76>
    ab60:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ab62:	2c00      	cmp	r4, #0
    ab64:	d1f0      	bne.n	ab48 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    ab66:	4b2d      	ldr	r3, [pc, #180]	; (ac1c <z_impl_k_yield+0x12c>)
    ab68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    ab6a:	f103 0120 	add.w	r1, r3, #32
    ab6e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    ab70:	606a      	str	r2, [r5, #4]
	tail->next = node;
    ab72:	6015      	str	r5, [r2, #0]
	list->tail = node;
    ab74:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    ab76:	2001      	movs	r0, #1
    ab78:	f7ff f922 	bl	9dc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ab7c:	4826      	ldr	r0, [pc, #152]	; (ac18 <z_impl_k_yield+0x128>)
    ab7e:	f7fe fa1f 	bl	8fc0 <z_spin_unlock_valid>
    ab82:	2800      	cmp	r0, #0
    ab84:	d038      	beq.n	abf8 <z_impl_k_yield+0x108>
    ab86:	4630      	mov	r0, r6
    ab88:	f7f9 fcd8 	bl	453c <arch_swap>
}
    ab8c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ab8e:	4c25      	ldr	r4, [pc, #148]	; (ac24 <z_impl_k_yield+0x134>)
    ab90:	f240 5332 	movw	r3, #1330	; 0x532
    ab94:	4622      	mov	r2, r4
    ab96:	4924      	ldr	r1, [pc, #144]	; (ac28 <z_impl_k_yield+0x138>)
    ab98:	4824      	ldr	r0, [pc, #144]	; (ac2c <z_impl_k_yield+0x13c>)
    ab9a:	f001 fab5 	bl	c108 <assert_print>
    ab9e:	4824      	ldr	r0, [pc, #144]	; (ac30 <z_impl_k_yield+0x140>)
    aba0:	f001 fab2 	bl	c108 <assert_print>
    aba4:	f240 5132 	movw	r1, #1330	; 0x532
    aba8:	4620      	mov	r0, r4
    abaa:	f001 faa6 	bl	c0fa <assert_post_action>
    abae:	e7a4      	b.n	aafa <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    abb0:	4c20      	ldr	r4, [pc, #128]	; (ac34 <z_impl_k_yield+0x144>)
    abb2:	238e      	movs	r3, #142	; 0x8e
    abb4:	4622      	mov	r2, r4
    abb6:	4920      	ldr	r1, [pc, #128]	; (ac38 <z_impl_k_yield+0x148>)
    abb8:	481c      	ldr	r0, [pc, #112]	; (ac2c <z_impl_k_yield+0x13c>)
    abba:	f001 faa5 	bl	c108 <assert_print>
    abbe:	4916      	ldr	r1, [pc, #88]	; (ac18 <z_impl_k_yield+0x128>)
    abc0:	481e      	ldr	r0, [pc, #120]	; (ac3c <z_impl_k_yield+0x14c>)
    abc2:	f001 faa1 	bl	c108 <assert_print>
    abc6:	218e      	movs	r1, #142	; 0x8e
    abc8:	4620      	mov	r0, r4
    abca:	f001 fa96 	bl	c0fa <assert_post_action>
    abce:	e7a1      	b.n	ab14 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    abd0:	4c14      	ldr	r4, [pc, #80]	; (ac24 <z_impl_k_yield+0x134>)
    abd2:	23ba      	movs	r3, #186	; 0xba
    abd4:	4622      	mov	r2, r4
    abd6:	491a      	ldr	r1, [pc, #104]	; (ac40 <z_impl_k_yield+0x150>)
    abd8:	4814      	ldr	r0, [pc, #80]	; (ac2c <z_impl_k_yield+0x13c>)
    abda:	f001 fa95 	bl	c108 <assert_print>
    abde:	21ba      	movs	r1, #186	; 0xba
    abe0:	4620      	mov	r0, r4
    abe2:	f001 fa8a 	bl	c0fa <assert_post_action>
    abe6:	e7aa      	b.n	ab3e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    abe8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    abea:	606b      	str	r3, [r5, #4]
	node->next = successor;
    abec:	602c      	str	r4, [r5, #0]
	prev->next = node;
    abee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    abf0:	6065      	str	r5, [r4, #4]
}
    abf2:	e7c0      	b.n	ab76 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    abf4:	2400      	movs	r4, #0
    abf6:	e7a7      	b.n	ab48 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abf8:	4c0e      	ldr	r4, [pc, #56]	; (ac34 <z_impl_k_yield+0x144>)
    abfa:	23d0      	movs	r3, #208	; 0xd0
    abfc:	4622      	mov	r2, r4
    abfe:	4911      	ldr	r1, [pc, #68]	; (ac44 <z_impl_k_yield+0x154>)
    ac00:	480a      	ldr	r0, [pc, #40]	; (ac2c <z_impl_k_yield+0x13c>)
    ac02:	f001 fa81 	bl	c108 <assert_print>
    ac06:	4904      	ldr	r1, [pc, #16]	; (ac18 <z_impl_k_yield+0x128>)
    ac08:	480f      	ldr	r0, [pc, #60]	; (ac48 <z_impl_k_yield+0x158>)
    ac0a:	f001 fa7d 	bl	c108 <assert_print>
    ac0e:	21d0      	movs	r1, #208	; 0xd0
    ac10:	4620      	mov	r0, r4
    ac12:	f001 fa72 	bl	c0fa <assert_post_action>
    ac16:	e7b6      	b.n	ab86 <z_impl_k_yield+0x96>
    ac18:	2000119c 	.word	0x2000119c
    ac1c:	20001160 	.word	0x20001160
    ac20:	20000490 	.word	0x20000490
    ac24:	0000f624 	.word	0x0000f624
    ac28:	0000f434 	.word	0x0000f434
    ac2c:	0000d4bc 	.word	0x0000d4bc
    ac30:	0000f57c 	.word	0x0000f57c
    ac34:	0000dd4c 	.word	0x0000dd4c
    ac38:	0000ddac 	.word	0x0000ddac
    ac3c:	0000ddc4 	.word	0x0000ddc4
    ac40:	0000f660 	.word	0x0000f660
    ac44:	0000dd7c 	.word	0x0000dd7c
    ac48:	0000dd94 	.word	0x0000dd94

0000ac4c <z_tick_sleep>:
{
    ac4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac50:	4604      	mov	r4, r0
    ac52:	460e      	mov	r6, r1
    ac54:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d14e      	bne.n	acfa <z_tick_sleep+0xae>
	if (ticks == 0) {
    ac5c:	ea54 0306 	orrs.w	r3, r4, r6
    ac60:	d05c      	beq.n	ad1c <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    ac62:	f06f 0301 	mvn.w	r3, #1
    ac66:	1b1b      	subs	r3, r3, r4
    ac68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ac6c:	eb62 0206 	sbc.w	r2, r2, r6
    ac70:	2b01      	cmp	r3, #1
    ac72:	f172 0300 	sbcs.w	r3, r2, #0
    ac76:	db55      	blt.n	ad24 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    ac78:	f06f 0501 	mvn.w	r5, #1
    ac7c:	1b2d      	subs	r5, r5, r4
    ac7e:	f04f 0320 	mov.w	r3, #32
    ac82:	f3ef 8911 	mrs	r9, BASEPRI
    ac86:	f383 8812 	msr	BASEPRI_MAX, r3
    ac8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac8e:	4840      	ldr	r0, [pc, #256]	; (ad90 <z_tick_sleep+0x144>)
    ac90:	f7fe f986 	bl	8fa0 <z_spin_lock_valid>
    ac94:	2800      	cmp	r0, #0
    ac96:	d049      	beq.n	ad2c <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    ac98:	f8df 80f4 	ldr.w	r8, [pc, #244]	; ad90 <z_tick_sleep+0x144>
    ac9c:	4640      	mov	r0, r8
    ac9e:	f7fe f99f 	bl	8fe0 <z_spin_lock_set_owner>
	pending_current = _current;
    aca2:	4f3c      	ldr	r7, [pc, #240]	; (ad94 <z_tick_sleep+0x148>)
    aca4:	68b8      	ldr	r0, [r7, #8]
    aca6:	4b3c      	ldr	r3, [pc, #240]	; (ad98 <z_tick_sleep+0x14c>)
    aca8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    acaa:	f7ff fb5b 	bl	a364 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    acae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    acb0:	4622      	mov	r2, r4
    acb2:	4633      	mov	r3, r6
    acb4:	4939      	ldr	r1, [pc, #228]	; (ad9c <z_tick_sleep+0x150>)
    acb6:	3018      	adds	r0, #24
    acb8:	f000 f9dc 	bl	b074 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    acbc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    acbe:	7b53      	ldrb	r3, [r2, #13]
    acc0:	f043 0310 	orr.w	r3, r3, #16
    acc4:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    acc6:	4640      	mov	r0, r8
    acc8:	f7fe f97a 	bl	8fc0 <z_spin_unlock_valid>
    accc:	2800      	cmp	r0, #0
    acce:	d03d      	beq.n	ad4c <z_tick_sleep+0x100>
    acd0:	4648      	mov	r0, r9
    acd2:	f7f9 fc33 	bl	453c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    acd6:	4b2f      	ldr	r3, [pc, #188]	; (ad94 <z_tick_sleep+0x148>)
    acd8:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    acda:	7b5b      	ldrb	r3, [r3, #13]
    acdc:	f013 0f10 	tst.w	r3, #16
    ace0:	d144      	bne.n	ad6c <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ace2:	f002 f989 	bl	cff8 <sys_clock_tick_get_32>
    ace6:	1a28      	subs	r0, r5, r0
    ace8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    acec:	2801      	cmp	r0, #1
    acee:	f173 0300 	sbcs.w	r3, r3, #0
    acf2:	da00      	bge.n	acf6 <z_tick_sleep+0xaa>
	return 0;
    acf4:	2000      	movs	r0, #0
}
    acf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    acfa:	4d29      	ldr	r5, [pc, #164]	; (ada0 <z_tick_sleep+0x154>)
    acfc:	f240 534e 	movw	r3, #1358	; 0x54e
    ad00:	462a      	mov	r2, r5
    ad02:	4928      	ldr	r1, [pc, #160]	; (ada4 <z_tick_sleep+0x158>)
    ad04:	4828      	ldr	r0, [pc, #160]	; (ada8 <z_tick_sleep+0x15c>)
    ad06:	f001 f9ff 	bl	c108 <assert_print>
    ad0a:	4828      	ldr	r0, [pc, #160]	; (adac <z_tick_sleep+0x160>)
    ad0c:	f001 f9fc 	bl	c108 <assert_print>
    ad10:	f240 514e 	movw	r1, #1358	; 0x54e
    ad14:	4628      	mov	r0, r5
    ad16:	f001 f9f0 	bl	c0fa <assert_post_action>
    ad1a:	e79f      	b.n	ac5c <z_tick_sleep+0x10>
	z_impl_k_yield();
    ad1c:	f7ff fee8 	bl	aaf0 <z_impl_k_yield>
		return 0;
    ad20:	2000      	movs	r0, #0
    ad22:	e7e8      	b.n	acf6 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ad24:	f002 f968 	bl	cff8 <sys_clock_tick_get_32>
    ad28:	1905      	adds	r5, r0, r4
    ad2a:	e7a8      	b.n	ac7e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad2c:	4f20      	ldr	r7, [pc, #128]	; (adb0 <z_tick_sleep+0x164>)
    ad2e:	238e      	movs	r3, #142	; 0x8e
    ad30:	463a      	mov	r2, r7
    ad32:	4920      	ldr	r1, [pc, #128]	; (adb4 <z_tick_sleep+0x168>)
    ad34:	481c      	ldr	r0, [pc, #112]	; (ada8 <z_tick_sleep+0x15c>)
    ad36:	f001 f9e7 	bl	c108 <assert_print>
    ad3a:	4915      	ldr	r1, [pc, #84]	; (ad90 <z_tick_sleep+0x144>)
    ad3c:	481e      	ldr	r0, [pc, #120]	; (adb8 <z_tick_sleep+0x16c>)
    ad3e:	f001 f9e3 	bl	c108 <assert_print>
    ad42:	218e      	movs	r1, #142	; 0x8e
    ad44:	4638      	mov	r0, r7
    ad46:	f001 f9d8 	bl	c0fa <assert_post_action>
    ad4a:	e7a5      	b.n	ac98 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad4c:	4c18      	ldr	r4, [pc, #96]	; (adb0 <z_tick_sleep+0x164>)
    ad4e:	23d0      	movs	r3, #208	; 0xd0
    ad50:	4622      	mov	r2, r4
    ad52:	491a      	ldr	r1, [pc, #104]	; (adbc <z_tick_sleep+0x170>)
    ad54:	4814      	ldr	r0, [pc, #80]	; (ada8 <z_tick_sleep+0x15c>)
    ad56:	f001 f9d7 	bl	c108 <assert_print>
    ad5a:	4641      	mov	r1, r8
    ad5c:	4818      	ldr	r0, [pc, #96]	; (adc0 <z_tick_sleep+0x174>)
    ad5e:	f001 f9d3 	bl	c108 <assert_print>
    ad62:	21d0      	movs	r1, #208	; 0xd0
    ad64:	4620      	mov	r0, r4
    ad66:	f001 f9c8 	bl	c0fa <assert_post_action>
    ad6a:	e7b1      	b.n	acd0 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    ad6c:	4c0c      	ldr	r4, [pc, #48]	; (ada0 <z_tick_sleep+0x154>)
    ad6e:	f240 536f 	movw	r3, #1391	; 0x56f
    ad72:	4622      	mov	r2, r4
    ad74:	4913      	ldr	r1, [pc, #76]	; (adc4 <z_tick_sleep+0x178>)
    ad76:	480c      	ldr	r0, [pc, #48]	; (ada8 <z_tick_sleep+0x15c>)
    ad78:	f001 f9c6 	bl	c108 <assert_print>
    ad7c:	480b      	ldr	r0, [pc, #44]	; (adac <z_tick_sleep+0x160>)
    ad7e:	f001 f9c3 	bl	c108 <assert_print>
    ad82:	f240 516f 	movw	r1, #1391	; 0x56f
    ad86:	4620      	mov	r0, r4
    ad88:	f001 f9b7 	bl	c0fa <assert_post_action>
    ad8c:	e7a9      	b.n	ace2 <z_tick_sleep+0x96>
    ad8e:	bf00      	nop
    ad90:	2000119c 	.word	0x2000119c
    ad94:	20001160 	.word	0x20001160
    ad98:	20001198 	.word	0x20001198
    ad9c:	0000a27d 	.word	0x0000a27d
    ada0:	0000f624 	.word	0x0000f624
    ada4:	0000f434 	.word	0x0000f434
    ada8:	0000d4bc 	.word	0x0000d4bc
    adac:	0000f57c 	.word	0x0000f57c
    adb0:	0000dd4c 	.word	0x0000dd4c
    adb4:	0000ddac 	.word	0x0000ddac
    adb8:	0000ddc4 	.word	0x0000ddc4
    adbc:	0000dd7c 	.word	0x0000dd7c
    adc0:	0000dd94 	.word	0x0000dd94
    adc4:	0000f6e0 	.word	0x0000f6e0

0000adc8 <z_impl_k_sleep>:
{
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	4605      	mov	r5, r0
    adcc:	460c      	mov	r4, r1
    adce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    add2:	bb13      	cbnz	r3, ae1a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    add4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    add8:	bf08      	it	eq
    adda:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    adde:	d02d      	beq.n	ae3c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    ade0:	4628      	mov	r0, r5
    ade2:	4621      	mov	r1, r4
    ade4:	f7ff ff32 	bl	ac4c <z_tick_sleep>
    ade8:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    adea:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    adec:	0151      	lsls	r1, r2, #5
    adee:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    adf2:	0143      	lsls	r3, r0, #5
    adf4:	1a1b      	subs	r3, r3, r0
    adf6:	eb61 0102 	sbc.w	r1, r1, r2
    adfa:	0088      	lsls	r0, r1, #2
    adfc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    ae00:	009b      	lsls	r3, r3, #2
    ae02:	eb13 030c 	adds.w	r3, r3, ip
    ae06:	eb42 0000 	adc.w	r0, r2, r0
    ae0a:	00c0      	lsls	r0, r0, #3
    ae0c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    ae10:	f3c3 3310 	ubfx	r3, r3, #12, #17
    ae14:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    ae18:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ae1a:	4e0c      	ldr	r6, [pc, #48]	; (ae4c <z_impl_k_sleep+0x84>)
    ae1c:	f240 537e 	movw	r3, #1406	; 0x57e
    ae20:	4632      	mov	r2, r6
    ae22:	490b      	ldr	r1, [pc, #44]	; (ae50 <z_impl_k_sleep+0x88>)
    ae24:	480b      	ldr	r0, [pc, #44]	; (ae54 <z_impl_k_sleep+0x8c>)
    ae26:	f001 f96f 	bl	c108 <assert_print>
    ae2a:	480b      	ldr	r0, [pc, #44]	; (ae58 <z_impl_k_sleep+0x90>)
    ae2c:	f001 f96c 	bl	c108 <assert_print>
    ae30:	f240 517e 	movw	r1, #1406	; 0x57e
    ae34:	4630      	mov	r0, r6
    ae36:	f001 f960 	bl	c0fa <assert_post_action>
    ae3a:	e7cb      	b.n	add4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    ae3c:	4b07      	ldr	r3, [pc, #28]	; (ae5c <z_impl_k_sleep+0x94>)
    ae3e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    ae40:	f7ff fc28 	bl	a694 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    ae44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ae48:	e7e6      	b.n	ae18 <z_impl_k_sleep+0x50>
    ae4a:	bf00      	nop
    ae4c:	0000f624 	.word	0x0000f624
    ae50:	0000f434 	.word	0x0000f434
    ae54:	0000d4bc 	.word	0x0000d4bc
    ae58:	0000f57c 	.word	0x0000f57c
    ae5c:	20001160 	.word	0x20001160

0000ae60 <z_impl_z_current_get>:
}
    ae60:	4b01      	ldr	r3, [pc, #4]	; (ae68 <z_impl_z_current_get+0x8>)
    ae62:	6898      	ldr	r0, [r3, #8]
    ae64:	4770      	bx	lr
    ae66:	bf00      	nop
    ae68:	20001160 	.word	0x20001160

0000ae6c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    ae6c:	b570      	push	{r4, r5, r6, lr}
    ae6e:	4604      	mov	r4, r0
    ae70:	f04f 0320 	mov.w	r3, #32
    ae74:	f3ef 8511 	mrs	r5, BASEPRI
    ae78:	f383 8812 	msr	BASEPRI_MAX, r3
    ae7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae80:	4840      	ldr	r0, [pc, #256]	; (af84 <z_thread_abort+0x118>)
    ae82:	f7fe f88d 	bl	8fa0 <z_spin_lock_valid>
    ae86:	b1b8      	cbz	r0, aeb8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    ae88:	483e      	ldr	r0, [pc, #248]	; (af84 <z_thread_abort+0x118>)
    ae8a:	f7fe f8a9 	bl	8fe0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ae8e:	7b63      	ldrb	r3, [r4, #13]
    ae90:	f013 0f08 	tst.w	r3, #8
    ae94:	d120      	bne.n	aed8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    ae96:	4620      	mov	r0, r4
    ae98:	f7ff fd0c 	bl	a8b4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    ae9c:	4b3a      	ldr	r3, [pc, #232]	; (af88 <z_thread_abort+0x11c>)
    ae9e:	689b      	ldr	r3, [r3, #8]
    aea0:	42a3      	cmp	r3, r4
    aea2:	d032      	beq.n	af0a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aea4:	4837      	ldr	r0, [pc, #220]	; (af84 <z_thread_abort+0x118>)
    aea6:	f7fe f88b 	bl	8fc0 <z_spin_unlock_valid>
    aeaa:	2800      	cmp	r0, #0
    aeac:	d059      	beq.n	af62 <z_thread_abort+0xf6>
	__asm__ volatile(
    aeae:	f385 8811 	msr	BASEPRI, r5
    aeb2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    aeb6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aeb8:	4e34      	ldr	r6, [pc, #208]	; (af8c <z_thread_abort+0x120>)
    aeba:	238e      	movs	r3, #142	; 0x8e
    aebc:	4632      	mov	r2, r6
    aebe:	4934      	ldr	r1, [pc, #208]	; (af90 <z_thread_abort+0x124>)
    aec0:	4834      	ldr	r0, [pc, #208]	; (af94 <z_thread_abort+0x128>)
    aec2:	f001 f921 	bl	c108 <assert_print>
    aec6:	492f      	ldr	r1, [pc, #188]	; (af84 <z_thread_abort+0x118>)
    aec8:	4833      	ldr	r0, [pc, #204]	; (af98 <z_thread_abort+0x12c>)
    aeca:	f001 f91d 	bl	c108 <assert_print>
    aece:	218e      	movs	r1, #142	; 0x8e
    aed0:	4630      	mov	r0, r6
    aed2:	f001 f912 	bl	c0fa <assert_post_action>
    aed6:	e7d7      	b.n	ae88 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aed8:	482a      	ldr	r0, [pc, #168]	; (af84 <z_thread_abort+0x118>)
    aeda:	f7fe f871 	bl	8fc0 <z_spin_unlock_valid>
    aede:	b120      	cbz	r0, aeea <z_thread_abort+0x7e>
    aee0:	f385 8811 	msr	BASEPRI, r5
    aee4:	f3bf 8f6f 	isb	sy
		return;
    aee8:	e7e5      	b.n	aeb6 <z_thread_abort+0x4a>
    aeea:	4c28      	ldr	r4, [pc, #160]	; (af8c <z_thread_abort+0x120>)
    aeec:	23b9      	movs	r3, #185	; 0xb9
    aeee:	4622      	mov	r2, r4
    aef0:	492a      	ldr	r1, [pc, #168]	; (af9c <z_thread_abort+0x130>)
    aef2:	4828      	ldr	r0, [pc, #160]	; (af94 <z_thread_abort+0x128>)
    aef4:	f001 f908 	bl	c108 <assert_print>
    aef8:	4922      	ldr	r1, [pc, #136]	; (af84 <z_thread_abort+0x118>)
    aefa:	4829      	ldr	r0, [pc, #164]	; (afa0 <z_thread_abort+0x134>)
    aefc:	f001 f904 	bl	c108 <assert_print>
    af00:	21b9      	movs	r1, #185	; 0xb9
    af02:	4620      	mov	r0, r4
    af04:	f001 f8f9 	bl	c0fa <assert_post_action>
    af08:	e7ea      	b.n	aee0 <z_thread_abort+0x74>
    af0a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    af0e:	2b00      	cmp	r3, #0
    af10:	d1c8      	bne.n	aea4 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af12:	481c      	ldr	r0, [pc, #112]	; (af84 <z_thread_abort+0x118>)
    af14:	f7fe f854 	bl	8fc0 <z_spin_unlock_valid>
    af18:	b198      	cbz	r0, af42 <z_thread_abort+0xd6>
    af1a:	4628      	mov	r0, r5
    af1c:	f7f9 fb0e 	bl	453c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    af20:	4c20      	ldr	r4, [pc, #128]	; (afa4 <z_thread_abort+0x138>)
    af22:	f240 63ac 	movw	r3, #1708	; 0x6ac
    af26:	4622      	mov	r2, r4
    af28:	491f      	ldr	r1, [pc, #124]	; (afa8 <z_thread_abort+0x13c>)
    af2a:	481a      	ldr	r0, [pc, #104]	; (af94 <z_thread_abort+0x128>)
    af2c:	f001 f8ec 	bl	c108 <assert_print>
    af30:	481e      	ldr	r0, [pc, #120]	; (afac <z_thread_abort+0x140>)
    af32:	f001 f8e9 	bl	c108 <assert_print>
    af36:	f240 61ac 	movw	r1, #1708	; 0x6ac
    af3a:	4620      	mov	r0, r4
    af3c:	f001 f8dd 	bl	c0fa <assert_post_action>
    af40:	e7b0      	b.n	aea4 <z_thread_abort+0x38>
    af42:	4c12      	ldr	r4, [pc, #72]	; (af8c <z_thread_abort+0x120>)
    af44:	23d0      	movs	r3, #208	; 0xd0
    af46:	4622      	mov	r2, r4
    af48:	4914      	ldr	r1, [pc, #80]	; (af9c <z_thread_abort+0x130>)
    af4a:	4812      	ldr	r0, [pc, #72]	; (af94 <z_thread_abort+0x128>)
    af4c:	f001 f8dc 	bl	c108 <assert_print>
    af50:	490c      	ldr	r1, [pc, #48]	; (af84 <z_thread_abort+0x118>)
    af52:	4813      	ldr	r0, [pc, #76]	; (afa0 <z_thread_abort+0x134>)
    af54:	f001 f8d8 	bl	c108 <assert_print>
    af58:	21d0      	movs	r1, #208	; 0xd0
    af5a:	4620      	mov	r0, r4
    af5c:	f001 f8cd 	bl	c0fa <assert_post_action>
    af60:	e7db      	b.n	af1a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af62:	4c0a      	ldr	r4, [pc, #40]	; (af8c <z_thread_abort+0x120>)
    af64:	23b9      	movs	r3, #185	; 0xb9
    af66:	4622      	mov	r2, r4
    af68:	490c      	ldr	r1, [pc, #48]	; (af9c <z_thread_abort+0x130>)
    af6a:	480a      	ldr	r0, [pc, #40]	; (af94 <z_thread_abort+0x128>)
    af6c:	f001 f8cc 	bl	c108 <assert_print>
    af70:	4904      	ldr	r1, [pc, #16]	; (af84 <z_thread_abort+0x118>)
    af72:	480b      	ldr	r0, [pc, #44]	; (afa0 <z_thread_abort+0x134>)
    af74:	f001 f8c8 	bl	c108 <assert_print>
    af78:	21b9      	movs	r1, #185	; 0xb9
    af7a:	4620      	mov	r0, r4
    af7c:	f001 f8bd 	bl	c0fa <assert_post_action>
    af80:	e795      	b.n	aeae <z_thread_abort+0x42>
    af82:	bf00      	nop
    af84:	2000119c 	.word	0x2000119c
    af88:	20001160 	.word	0x20001160
    af8c:	0000dd4c 	.word	0x0000dd4c
    af90:	0000ddac 	.word	0x0000ddac
    af94:	0000d4bc 	.word	0x0000d4bc
    af98:	0000ddc4 	.word	0x0000ddc4
    af9c:	0000dd7c 	.word	0x0000dd7c
    afa0:	0000dd94 	.word	0x0000dd94
    afa4:	0000f624 	.word	0x0000f624
    afa8:	0000d680 	.word	0x0000d680
    afac:	0000f720 	.word	0x0000f720

0000afb0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    afb0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    afb2:	4806      	ldr	r0, [pc, #24]	; (afcc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    afb4:	4a06      	ldr	r2, [pc, #24]	; (afd0 <z_data_copy+0x20>)
    afb6:	1a12      	subs	r2, r2, r0
    afb8:	4906      	ldr	r1, [pc, #24]	; (afd4 <z_data_copy+0x24>)
    afba:	f001 ff55 	bl	ce68 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    afbe:	4a06      	ldr	r2, [pc, #24]	; (afd8 <z_data_copy+0x28>)
    afc0:	4906      	ldr	r1, [pc, #24]	; (afdc <z_data_copy+0x2c>)
    afc2:	4807      	ldr	r0, [pc, #28]	; (afe0 <z_data_copy+0x30>)
    afc4:	f001 ff50 	bl	ce68 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    afc8:	bd08      	pop	{r3, pc}
    afca:	bf00      	nop
    afcc:	20000000 	.word	0x20000000
    afd0:	20000260 	.word	0x20000260
    afd4:	0000f884 	.word	0x0000f884
    afd8:	00000000 	.word	0x00000000
    afdc:	0000f884 	.word	0x0000f884
    afe0:	20000000 	.word	0x20000000

0000afe4 <first>:
	return list->head == list;
    afe4:	4b03      	ldr	r3, [pc, #12]	; (aff4 <first+0x10>)
    afe6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    afe8:	4298      	cmp	r0, r3
    afea:	d000      	beq.n	afee <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    afec:	4770      	bx	lr
    afee:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    aff0:	e7fc      	b.n	afec <first+0x8>
    aff2:	bf00      	nop
    aff4:	20000174 	.word	0x20000174

0000aff8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aff8:	b130      	cbz	r0, b008 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    affa:	4a04      	ldr	r2, [pc, #16]	; (b00c <next+0x14>)
    affc:	6852      	ldr	r2, [r2, #4]
    affe:	4290      	cmp	r0, r2
    b000:	d001      	beq.n	b006 <next+0xe>
    b002:	6800      	ldr	r0, [r0, #0]
    b004:	4770      	bx	lr
    b006:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b008:	4770      	bx	lr
    b00a:	bf00      	nop
    b00c:	20000174 	.word	0x20000174

0000b010 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b010:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b012:	4b04      	ldr	r3, [pc, #16]	; (b024 <elapsed+0x14>)
    b014:	681b      	ldr	r3, [r3, #0]
    b016:	b10b      	cbz	r3, b01c <elapsed+0xc>
    b018:	2000      	movs	r0, #0
}
    b01a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b01c:	f7fb fc28 	bl	6870 <sys_clock_elapsed>
    b020:	e7fb      	b.n	b01a <elapsed+0xa>
    b022:	bf00      	nop
    b024:	200011a8 	.word	0x200011a8

0000b028 <next_timeout>:

static int32_t next_timeout(void)
{
    b028:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    b02a:	f7ff ffdb 	bl	afe4 <first>
    b02e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    b030:	f7ff ffee 	bl	b010 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    b034:	b17c      	cbz	r4, b056 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b036:	6923      	ldr	r3, [r4, #16]
    b038:	6962      	ldr	r2, [r4, #20]
    b03a:	1a1b      	subs	r3, r3, r0
    b03c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    b040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b044:	f170 0200 	sbcs.w	r2, r0, #0
    b048:	da08      	bge.n	b05c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    b04a:	2800      	cmp	r0, #0
    b04c:	db01      	blt.n	b052 <next_timeout+0x2a>
    b04e:	4618      	mov	r0, r3
    b050:	e006      	b.n	b060 <next_timeout+0x38>
    b052:	2300      	movs	r3, #0
    b054:	e7fb      	b.n	b04e <next_timeout+0x26>
		ret = MAX_WAIT;
    b056:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b05a:	e001      	b.n	b060 <next_timeout+0x38>
    b05c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b060:	4b03      	ldr	r3, [pc, #12]	; (b070 <next_timeout+0x48>)
    b062:	691b      	ldr	r3, [r3, #16]
    b064:	b113      	cbz	r3, b06c <next_timeout+0x44>
    b066:	4283      	cmp	r3, r0
    b068:	da00      	bge.n	b06c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    b06a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    b06c:	bd10      	pop	{r4, pc}
    b06e:	bf00      	nop
    b070:	20001160 	.word	0x20001160

0000b074 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b078:	bf08      	it	eq
    b07a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b07e:	f000 80c1 	beq.w	b204 <z_add_timeout+0x190>
{
    b082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b086:	4604      	mov	r4, r0
    b088:	460f      	mov	r7, r1
    b08a:	4692      	mov	sl, r2
    b08c:	461d      	mov	r5, r3
	return node->next != NULL;
    b08e:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    b090:	b173      	cbz	r3, b0b0 <z_add_timeout+0x3c>
    b092:	f8df 8174 	ldr.w	r8, [pc, #372]	; b208 <z_add_timeout+0x194>
    b096:	2363      	movs	r3, #99	; 0x63
    b098:	4642      	mov	r2, r8
    b09a:	495c      	ldr	r1, [pc, #368]	; (b20c <z_add_timeout+0x198>)
    b09c:	485c      	ldr	r0, [pc, #368]	; (b210 <z_add_timeout+0x19c>)
    b09e:	f001 f833 	bl	c108 <assert_print>
    b0a2:	485c      	ldr	r0, [pc, #368]	; (b214 <z_add_timeout+0x1a0>)
    b0a4:	f001 f830 	bl	c108 <assert_print>
    b0a8:	2163      	movs	r1, #99	; 0x63
    b0aa:	4640      	mov	r0, r8
    b0ac:	f001 f825 	bl	c0fa <assert_post_action>
	to->fn = fn;
    b0b0:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    b0b2:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    b0b6:	f04f 0320 	mov.w	r3, #32
    b0ba:	f3ef 8711 	mrs	r7, BASEPRI
    b0be:	f383 8812 	msr	BASEPRI_MAX, r3
    b0c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b0c6:	4854      	ldr	r0, [pc, #336]	; (b218 <z_add_timeout+0x1a4>)
    b0c8:	f7fd ff6a 	bl	8fa0 <z_spin_lock_valid>
    b0cc:	b118      	cbz	r0, b0d6 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    b0ce:	4852      	ldr	r0, [pc, #328]	; (b218 <z_add_timeout+0x1a4>)
    b0d0:	f7fd ff86 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    b0d4:	e038      	b.n	b148 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b0d6:	f8df 9144 	ldr.w	r9, [pc, #324]	; b21c <z_add_timeout+0x1a8>
    b0da:	238e      	movs	r3, #142	; 0x8e
    b0dc:	464a      	mov	r2, r9
    b0de:	4950      	ldr	r1, [pc, #320]	; (b220 <z_add_timeout+0x1ac>)
    b0e0:	484b      	ldr	r0, [pc, #300]	; (b210 <z_add_timeout+0x19c>)
    b0e2:	f001 f811 	bl	c108 <assert_print>
    b0e6:	494c      	ldr	r1, [pc, #304]	; (b218 <z_add_timeout+0x1a4>)
    b0e8:	484e      	ldr	r0, [pc, #312]	; (b224 <z_add_timeout+0x1b0>)
    b0ea:	f001 f80d 	bl	c108 <assert_print>
    b0ee:	218e      	movs	r1, #142	; 0x8e
    b0f0:	4648      	mov	r0, r9
    b0f2:	f001 f802 	bl	c0fa <assert_post_action>
    b0f6:	e7ea      	b.n	b0ce <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b0f8:	f11a 0801 	adds.w	r8, sl, #1
    b0fc:	f145 0900 	adc.w	r9, r5, #0
    b100:	f7ff ff86 	bl	b010 <elapsed>
    b104:	eb18 0300 	adds.w	r3, r8, r0
    b108:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    b10c:	6123      	str	r3, [r4, #16]
    b10e:	6160      	str	r0, [r4, #20]
    b110:	e03d      	b.n	b18e <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b112:	1a51      	subs	r1, r2, r1
    b114:	eb66 0303 	sbc.w	r3, r6, r3
    b118:	6101      	str	r1, [r0, #16]
    b11a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    b11c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    b11e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b120:	6020      	str	r0, [r4, #0]
	prev->next = node;
    b122:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b124:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b126:	2800      	cmp	r0, #0
    b128:	d045      	beq.n	b1b6 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b12a:	f7ff ff5b 	bl	afe4 <first>
    b12e:	4284      	cmp	r4, r0
    b130:	d048      	beq.n	b1c4 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b132:	4839      	ldr	r0, [pc, #228]	; (b218 <z_add_timeout+0x1a4>)
    b134:	f7fd ff44 	bl	8fc0 <z_spin_unlock_valid>
    b138:	2800      	cmp	r0, #0
    b13a:	d050      	beq.n	b1de <z_add_timeout+0x16a>
	__asm__ volatile(
    b13c:	f387 8811 	msr	BASEPRI, r7
    b140:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b144:	f04f 0801 	mov.w	r8, #1
    b148:	f1b8 0f00 	cmp.w	r8, #0
    b14c:	d158      	bne.n	b200 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b14e:	4653      	mov	r3, sl
    b150:	f06f 0101 	mvn.w	r1, #1
    b154:	ebb1 010a 	subs.w	r1, r1, sl
    b158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b15c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b160:	2a00      	cmp	r2, #0
    b162:	dbc9      	blt.n	b0f8 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b164:	4a30      	ldr	r2, [pc, #192]	; (b228 <z_add_timeout+0x1b4>)
    b166:	6811      	ldr	r1, [r2, #0]
    b168:	6852      	ldr	r2, [r2, #4]
    b16a:	185b      	adds	r3, r3, r1
    b16c:	eb42 0205 	adc.w	r2, r2, r5
    b170:	f06f 0101 	mvn.w	r1, #1
    b174:	1acb      	subs	r3, r1, r3
    b176:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    b17a:	4618      	mov	r0, r3
    b17c:	4611      	mov	r1, r2
    b17e:	2b01      	cmp	r3, #1
    b180:	f172 0300 	sbcs.w	r3, r2, #0
    b184:	da01      	bge.n	b18a <z_add_timeout+0x116>
    b186:	2001      	movs	r0, #1
    b188:	2100      	movs	r1, #0
    b18a:	6120      	str	r0, [r4, #16]
    b18c:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b18e:	f7ff ff29 	bl	afe4 <first>
    b192:	2800      	cmp	r0, #0
    b194:	d0c7      	beq.n	b126 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    b196:	6902      	ldr	r2, [r0, #16]
    b198:	6946      	ldr	r6, [r0, #20]
    b19a:	6921      	ldr	r1, [r4, #16]
    b19c:	6963      	ldr	r3, [r4, #20]
    b19e:	4291      	cmp	r1, r2
    b1a0:	eb73 0c06 	sbcs.w	ip, r3, r6
    b1a4:	dbb5      	blt.n	b112 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    b1a6:	1a89      	subs	r1, r1, r2
    b1a8:	eb63 0306 	sbc.w	r3, r3, r6
    b1ac:	6121      	str	r1, [r4, #16]
    b1ae:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b1b0:	f7ff ff22 	bl	aff8 <next>
    b1b4:	e7ed      	b.n	b192 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    b1b6:	4b1d      	ldr	r3, [pc, #116]	; (b22c <z_add_timeout+0x1b8>)
    b1b8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b1ba:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    b1bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b1be:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b1c0:	605c      	str	r4, [r3, #4]
}
    b1c2:	e7b2      	b.n	b12a <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b1c4:	f7ff ff30 	bl	b028 <next_timeout>

			if (next_time == 0 ||
    b1c8:	4603      	mov	r3, r0
    b1ca:	b118      	cbz	r0, b1d4 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    b1cc:	4a18      	ldr	r2, [pc, #96]	; (b230 <z_add_timeout+0x1bc>)
    b1ce:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    b1d0:	4282      	cmp	r2, r0
    b1d2:	d0ae      	beq.n	b132 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    b1d4:	2100      	movs	r1, #0
    b1d6:	4618      	mov	r0, r3
    b1d8:	f7fb fb18 	bl	680c <sys_clock_set_timeout>
    b1dc:	e7a9      	b.n	b132 <z_add_timeout+0xbe>
    b1de:	f8df 803c 	ldr.w	r8, [pc, #60]	; b21c <z_add_timeout+0x1a8>
    b1e2:	23b9      	movs	r3, #185	; 0xb9
    b1e4:	4642      	mov	r2, r8
    b1e6:	4913      	ldr	r1, [pc, #76]	; (b234 <z_add_timeout+0x1c0>)
    b1e8:	4809      	ldr	r0, [pc, #36]	; (b210 <z_add_timeout+0x19c>)
    b1ea:	f000 ff8d 	bl	c108 <assert_print>
    b1ee:	490a      	ldr	r1, [pc, #40]	; (b218 <z_add_timeout+0x1a4>)
    b1f0:	4811      	ldr	r0, [pc, #68]	; (b238 <z_add_timeout+0x1c4>)
    b1f2:	f000 ff89 	bl	c108 <assert_print>
    b1f6:	21b9      	movs	r1, #185	; 0xb9
    b1f8:	4640      	mov	r0, r8
    b1fa:	f000 ff7e 	bl	c0fa <assert_post_action>
    b1fe:	e79d      	b.n	b13c <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b204:	4770      	bx	lr
    b206:	bf00      	nop
    b208:	0000f744 	.word	0x0000f744
    b20c:	0000f768 	.word	0x0000f768
    b210:	0000d4bc 	.word	0x0000d4bc
    b214:	0000f57c 	.word	0x0000f57c
    b218:	200011ac 	.word	0x200011ac
    b21c:	0000dd4c 	.word	0x0000dd4c
    b220:	0000ddac 	.word	0x0000ddac
    b224:	0000ddc4 	.word	0x0000ddc4
    b228:	200005f0 	.word	0x200005f0
    b22c:	20000174 	.word	0x20000174
    b230:	20001160 	.word	0x20001160
    b234:	0000dd7c 	.word	0x0000dd7c
    b238:	0000dd94 	.word	0x0000dd94

0000b23c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    b23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b240:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    b242:	2400      	movs	r4, #0
	__asm__ volatile(
    b244:	f04f 0320 	mov.w	r3, #32
    b248:	f3ef 8711 	mrs	r7, BASEPRI
    b24c:	f383 8812 	msr	BASEPRI_MAX, r3
    b250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b254:	481f      	ldr	r0, [pc, #124]	; (b2d4 <z_abort_timeout+0x98>)
    b256:	f7fd fea3 	bl	8fa0 <z_spin_lock_valid>
    b25a:	b128      	cbz	r0, b268 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    b25c:	481d      	ldr	r0, [pc, #116]	; (b2d4 <z_abort_timeout+0x98>)
    b25e:	f7fd febf 	bl	8fe0 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    b262:	f06f 0815 	mvn.w	r8, #21
	return k;
    b266:	e018      	b.n	b29a <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b268:	4e1b      	ldr	r6, [pc, #108]	; (b2d8 <z_abort_timeout+0x9c>)
    b26a:	238e      	movs	r3, #142	; 0x8e
    b26c:	4632      	mov	r2, r6
    b26e:	491b      	ldr	r1, [pc, #108]	; (b2dc <z_abort_timeout+0xa0>)
    b270:	481b      	ldr	r0, [pc, #108]	; (b2e0 <z_abort_timeout+0xa4>)
    b272:	f000 ff49 	bl	c108 <assert_print>
    b276:	4917      	ldr	r1, [pc, #92]	; (b2d4 <z_abort_timeout+0x98>)
    b278:	481a      	ldr	r0, [pc, #104]	; (b2e4 <z_abort_timeout+0xa8>)
    b27a:	f000 ff45 	bl	c108 <assert_print>
    b27e:	218e      	movs	r1, #142	; 0x8e
    b280:	4630      	mov	r0, r6
    b282:	f000 ff3a 	bl	c0fa <assert_post_action>
    b286:	e7e9      	b.n	b25c <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b288:	4812      	ldr	r0, [pc, #72]	; (b2d4 <z_abort_timeout+0x98>)
    b28a:	f7fd fe99 	bl	8fc0 <z_spin_unlock_valid>
    b28e:	b170      	cbz	r0, b2ae <z_abort_timeout+0x72>
	__asm__ volatile(
    b290:	f387 8811 	msr	BASEPRI, r7
    b294:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b298:	2401      	movs	r4, #1
    b29a:	4626      	mov	r6, r4
    b29c:	b9bc      	cbnz	r4, b2ce <z_abort_timeout+0x92>
	return node->next != NULL;
    b29e:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d0f1      	beq.n	b288 <z_abort_timeout+0x4c>
			remove_timeout(to);
    b2a4:	4628      	mov	r0, r5
    b2a6:	f001 fe90 	bl	cfca <remove_timeout>
			ret = 0;
    b2aa:	46b0      	mov	r8, r6
    b2ac:	e7ec      	b.n	b288 <z_abort_timeout+0x4c>
    b2ae:	4c0a      	ldr	r4, [pc, #40]	; (b2d8 <z_abort_timeout+0x9c>)
    b2b0:	23b9      	movs	r3, #185	; 0xb9
    b2b2:	4622      	mov	r2, r4
    b2b4:	490c      	ldr	r1, [pc, #48]	; (b2e8 <z_abort_timeout+0xac>)
    b2b6:	480a      	ldr	r0, [pc, #40]	; (b2e0 <z_abort_timeout+0xa4>)
    b2b8:	f000 ff26 	bl	c108 <assert_print>
    b2bc:	4905      	ldr	r1, [pc, #20]	; (b2d4 <z_abort_timeout+0x98>)
    b2be:	480b      	ldr	r0, [pc, #44]	; (b2ec <z_abort_timeout+0xb0>)
    b2c0:	f000 ff22 	bl	c108 <assert_print>
    b2c4:	21b9      	movs	r1, #185	; 0xb9
    b2c6:	4620      	mov	r0, r4
    b2c8:	f000 ff17 	bl	c0fa <assert_post_action>
    b2cc:	e7e0      	b.n	b290 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    b2ce:	4640      	mov	r0, r8
    b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2d4:	200011ac 	.word	0x200011ac
    b2d8:	0000dd4c 	.word	0x0000dd4c
    b2dc:	0000ddac 	.word	0x0000ddac
    b2e0:	0000d4bc 	.word	0x0000d4bc
    b2e4:	0000ddc4 	.word	0x0000ddc4
    b2e8:	0000dd7c 	.word	0x0000dd7c
    b2ec:	0000dd94 	.word	0x0000dd94

0000b2f0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    b2f0:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    b2f2:	2500      	movs	r5, #0
	__asm__ volatile(
    b2f4:	f04f 0320 	mov.w	r3, #32
    b2f8:	f3ef 8611 	mrs	r6, BASEPRI
    b2fc:	f383 8812 	msr	BASEPRI_MAX, r3
    b300:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b304:	481c      	ldr	r0, [pc, #112]	; (b378 <z_get_next_timeout_expiry+0x88>)
    b306:	f7fd fe4b 	bl	8fa0 <z_spin_lock_valid>
    b30a:	b128      	cbz	r0, b318 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    b30c:	481a      	ldr	r0, [pc, #104]	; (b378 <z_get_next_timeout_expiry+0x88>)
    b30e:	f7fd fe67 	bl	8fe0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    b312:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    b316:	e014      	b.n	b342 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b318:	4c18      	ldr	r4, [pc, #96]	; (b37c <z_get_next_timeout_expiry+0x8c>)
    b31a:	238e      	movs	r3, #142	; 0x8e
    b31c:	4622      	mov	r2, r4
    b31e:	4918      	ldr	r1, [pc, #96]	; (b380 <z_get_next_timeout_expiry+0x90>)
    b320:	4818      	ldr	r0, [pc, #96]	; (b384 <z_get_next_timeout_expiry+0x94>)
    b322:	f000 fef1 	bl	c108 <assert_print>
    b326:	4914      	ldr	r1, [pc, #80]	; (b378 <z_get_next_timeout_expiry+0x88>)
    b328:	4817      	ldr	r0, [pc, #92]	; (b388 <z_get_next_timeout_expiry+0x98>)
    b32a:	f000 feed 	bl	c108 <assert_print>
    b32e:	218e      	movs	r1, #142	; 0x8e
    b330:	4620      	mov	r0, r4
    b332:	f000 fee2 	bl	c0fa <assert_post_action>
    b336:	e7e9      	b.n	b30c <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    b338:	f386 8811 	msr	BASEPRI, r6
    b33c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b340:	2501      	movs	r5, #1
    b342:	b9bd      	cbnz	r5, b374 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    b344:	f7ff fe70 	bl	b028 <next_timeout>
    b348:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b34a:	480b      	ldr	r0, [pc, #44]	; (b378 <z_get_next_timeout_expiry+0x88>)
    b34c:	f7fd fe38 	bl	8fc0 <z_spin_unlock_valid>
    b350:	2800      	cmp	r0, #0
    b352:	d1f1      	bne.n	b338 <z_get_next_timeout_expiry+0x48>
    b354:	4d09      	ldr	r5, [pc, #36]	; (b37c <z_get_next_timeout_expiry+0x8c>)
    b356:	23b9      	movs	r3, #185	; 0xb9
    b358:	462a      	mov	r2, r5
    b35a:	490c      	ldr	r1, [pc, #48]	; (b38c <z_get_next_timeout_expiry+0x9c>)
    b35c:	4809      	ldr	r0, [pc, #36]	; (b384 <z_get_next_timeout_expiry+0x94>)
    b35e:	f000 fed3 	bl	c108 <assert_print>
    b362:	4905      	ldr	r1, [pc, #20]	; (b378 <z_get_next_timeout_expiry+0x88>)
    b364:	480a      	ldr	r0, [pc, #40]	; (b390 <z_get_next_timeout_expiry+0xa0>)
    b366:	f000 fecf 	bl	c108 <assert_print>
    b36a:	21b9      	movs	r1, #185	; 0xb9
    b36c:	4628      	mov	r0, r5
    b36e:	f000 fec4 	bl	c0fa <assert_post_action>
    b372:	e7e1      	b.n	b338 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    b374:	4620      	mov	r0, r4
    b376:	bd70      	pop	{r4, r5, r6, pc}
    b378:	200011ac 	.word	0x200011ac
    b37c:	0000dd4c 	.word	0x0000dd4c
    b380:	0000ddac 	.word	0x0000ddac
    b384:	0000d4bc 	.word	0x0000d4bc
    b388:	0000ddc4 	.word	0x0000ddc4
    b38c:	0000dd7c 	.word	0x0000dd7c
    b390:	0000dd94 	.word	0x0000dd94

0000b394 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    b394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b398:	4606      	mov	r6, r0
    b39a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    b39c:	2500      	movs	r5, #0
	__asm__ volatile(
    b39e:	f04f 0320 	mov.w	r3, #32
    b3a2:	f3ef 8711 	mrs	r7, BASEPRI
    b3a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b3aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3ae:	4825      	ldr	r0, [pc, #148]	; (b444 <z_set_timeout_expiry+0xb0>)
    b3b0:	f7fd fdf6 	bl	8fa0 <z_spin_lock_valid>
    b3b4:	b118      	cbz	r0, b3be <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    b3b6:	4823      	ldr	r0, [pc, #140]	; (b444 <z_set_timeout_expiry+0xb0>)
    b3b8:	f7fd fe12 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    b3bc:	e01e      	b.n	b3fc <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3be:	4c22      	ldr	r4, [pc, #136]	; (b448 <z_set_timeout_expiry+0xb4>)
    b3c0:	238e      	movs	r3, #142	; 0x8e
    b3c2:	4622      	mov	r2, r4
    b3c4:	4921      	ldr	r1, [pc, #132]	; (b44c <z_set_timeout_expiry+0xb8>)
    b3c6:	4822      	ldr	r0, [pc, #136]	; (b450 <z_set_timeout_expiry+0xbc>)
    b3c8:	f000 fe9e 	bl	c108 <assert_print>
    b3cc:	491d      	ldr	r1, [pc, #116]	; (b444 <z_set_timeout_expiry+0xb0>)
    b3ce:	4821      	ldr	r0, [pc, #132]	; (b454 <z_set_timeout_expiry+0xc0>)
    b3d0:	f000 fe9a 	bl	c108 <assert_print>
    b3d4:	218e      	movs	r1, #142	; 0x8e
    b3d6:	4620      	mov	r0, r4
    b3d8:	f000 fe8f 	bl	c0fa <assert_post_action>
    b3dc:	e7eb      	b.n	b3b6 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    b3de:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    b3e0:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b3e4:	2801      	cmp	r0, #1
    b3e6:	dd00      	ble.n	b3ea <z_set_timeout_expiry+0x56>
    b3e8:	b99c      	cbnz	r4, b412 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b3ea:	4816      	ldr	r0, [pc, #88]	; (b444 <z_set_timeout_expiry+0xb0>)
    b3ec:	f7fd fde8 	bl	8fc0 <z_spin_unlock_valid>
    b3f0:	b1b0      	cbz	r0, b420 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    b3f2:	f387 8811 	msr	BASEPRI, r7
    b3f6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b3fa:	2501      	movs	r5, #1
    b3fc:	462c      	mov	r4, r5
    b3fe:	b9fd      	cbnz	r5, b440 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    b400:	f7ff fe12 	bl	b028 <next_timeout>
			      || (ticks <= next_to);
    b404:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b408:	d0e9      	beq.n	b3de <z_set_timeout_expiry+0x4a>
    b40a:	42b0      	cmp	r0, r6
    b40c:	dbe8      	blt.n	b3e0 <z_set_timeout_expiry+0x4c>
    b40e:	2401      	movs	r4, #1
    b410:	e7e6      	b.n	b3e0 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    b412:	4641      	mov	r1, r8
    b414:	42b0      	cmp	r0, r6
    b416:	bfa8      	it	ge
    b418:	4630      	movge	r0, r6
    b41a:	f7fb f9f7 	bl	680c <sys_clock_set_timeout>
    b41e:	e7e4      	b.n	b3ea <z_set_timeout_expiry+0x56>
    b420:	4c09      	ldr	r4, [pc, #36]	; (b448 <z_set_timeout_expiry+0xb4>)
    b422:	23b9      	movs	r3, #185	; 0xb9
    b424:	4622      	mov	r2, r4
    b426:	490c      	ldr	r1, [pc, #48]	; (b458 <z_set_timeout_expiry+0xc4>)
    b428:	4809      	ldr	r0, [pc, #36]	; (b450 <z_set_timeout_expiry+0xbc>)
    b42a:	f000 fe6d 	bl	c108 <assert_print>
    b42e:	4905      	ldr	r1, [pc, #20]	; (b444 <z_set_timeout_expiry+0xb0>)
    b430:	480a      	ldr	r0, [pc, #40]	; (b45c <z_set_timeout_expiry+0xc8>)
    b432:	f000 fe69 	bl	c108 <assert_print>
    b436:	21b9      	movs	r1, #185	; 0xb9
    b438:	4620      	mov	r0, r4
    b43a:	f000 fe5e 	bl	c0fa <assert_post_action>
    b43e:	e7d8      	b.n	b3f2 <z_set_timeout_expiry+0x5e>
		}
	}
}
    b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b444:	200011ac 	.word	0x200011ac
    b448:	0000dd4c 	.word	0x0000dd4c
    b44c:	0000ddac 	.word	0x0000ddac
    b450:	0000d4bc 	.word	0x0000d4bc
    b454:	0000ddc4 	.word	0x0000ddc4
    b458:	0000dd7c 	.word	0x0000dd7c
    b45c:	0000dd94 	.word	0x0000dd94

0000b460 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    b460:	b570      	push	{r4, r5, r6, lr}
    b462:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b464:	f7fe fd5e 	bl	9f24 <z_time_slice>
	__asm__ volatile(
    b468:	f04f 0320 	mov.w	r3, #32
    b46c:	f3ef 8511 	mrs	r5, BASEPRI
    b470:	f383 8812 	msr	BASEPRI_MAX, r3
    b474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b478:	4854      	ldr	r0, [pc, #336]	; (b5cc <sys_clock_announce+0x16c>)
    b47a:	f7fd fd91 	bl	8fa0 <z_spin_lock_valid>
    b47e:	b128      	cbz	r0, b48c <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    b480:	4852      	ldr	r0, [pc, #328]	; (b5cc <sys_clock_announce+0x16c>)
    b482:	f7fd fdad 	bl	8fe0 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b486:	4b52      	ldr	r3, [pc, #328]	; (b5d0 <sys_clock_announce+0x170>)
    b488:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b48a:	e022      	b.n	b4d2 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b48c:	4e51      	ldr	r6, [pc, #324]	; (b5d4 <sys_clock_announce+0x174>)
    b48e:	238e      	movs	r3, #142	; 0x8e
    b490:	4632      	mov	r2, r6
    b492:	4951      	ldr	r1, [pc, #324]	; (b5d8 <sys_clock_announce+0x178>)
    b494:	4851      	ldr	r0, [pc, #324]	; (b5dc <sys_clock_announce+0x17c>)
    b496:	f000 fe37 	bl	c108 <assert_print>
    b49a:	494c      	ldr	r1, [pc, #304]	; (b5cc <sys_clock_announce+0x16c>)
    b49c:	4850      	ldr	r0, [pc, #320]	; (b5e0 <sys_clock_announce+0x180>)
    b49e:	f000 fe33 	bl	c108 <assert_print>
    b4a2:	218e      	movs	r1, #142	; 0x8e
    b4a4:	4630      	mov	r0, r6
    b4a6:	f000 fe28 	bl	c0fa <assert_post_action>
    b4aa:	e7e9      	b.n	b480 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4ac:	4e49      	ldr	r6, [pc, #292]	; (b5d4 <sys_clock_announce+0x174>)
    b4ae:	23b9      	movs	r3, #185	; 0xb9
    b4b0:	4632      	mov	r2, r6
    b4b2:	494c      	ldr	r1, [pc, #304]	; (b5e4 <sys_clock_announce+0x184>)
    b4b4:	4849      	ldr	r0, [pc, #292]	; (b5dc <sys_clock_announce+0x17c>)
    b4b6:	f000 fe27 	bl	c108 <assert_print>
    b4ba:	4944      	ldr	r1, [pc, #272]	; (b5cc <sys_clock_announce+0x16c>)
    b4bc:	484a      	ldr	r0, [pc, #296]	; (b5e8 <sys_clock_announce+0x188>)
    b4be:	f000 fe23 	bl	c108 <assert_print>
    b4c2:	21b9      	movs	r1, #185	; 0xb9
    b4c4:	4630      	mov	r0, r6
    b4c6:	f000 fe18 	bl	c0fa <assert_post_action>
    b4ca:	e027      	b.n	b51c <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    b4cc:	483f      	ldr	r0, [pc, #252]	; (b5cc <sys_clock_announce+0x16c>)
    b4ce:	f7fd fd87 	bl	8fe0 <z_spin_lock_set_owner>
    b4d2:	f7ff fd87 	bl	afe4 <first>
    b4d6:	4604      	mov	r4, r0
    b4d8:	2800      	cmp	r0, #0
    b4da:	d043      	beq.n	b564 <sys_clock_announce+0x104>
    b4dc:	6902      	ldr	r2, [r0, #16]
    b4de:	6941      	ldr	r1, [r0, #20]
    b4e0:	4b3b      	ldr	r3, [pc, #236]	; (b5d0 <sys_clock_announce+0x170>)
    b4e2:	681b      	ldr	r3, [r3, #0]
    b4e4:	17d8      	asrs	r0, r3, #31
    b4e6:	4293      	cmp	r3, r2
    b4e8:	eb70 0101 	sbcs.w	r1, r0, r1
    b4ec:	db3a      	blt.n	b564 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b4ee:	483f      	ldr	r0, [pc, #252]	; (b5ec <sys_clock_announce+0x18c>)
    b4f0:	6801      	ldr	r1, [r0, #0]
    b4f2:	6846      	ldr	r6, [r0, #4]
    b4f4:	1889      	adds	r1, r1, r2
    b4f6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    b4fa:	6001      	str	r1, [r0, #0]
    b4fc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    b4fe:	1a9b      	subs	r3, r3, r2
    b500:	4a33      	ldr	r2, [pc, #204]	; (b5d0 <sys_clock_announce+0x170>)
    b502:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b504:	2200      	movs	r2, #0
    b506:	2300      	movs	r3, #0
    b508:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b50c:	4620      	mov	r0, r4
    b50e:	f001 fd5c 	bl	cfca <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b512:	482e      	ldr	r0, [pc, #184]	; (b5cc <sys_clock_announce+0x16c>)
    b514:	f7fd fd54 	bl	8fc0 <z_spin_unlock_valid>
    b518:	2800      	cmp	r0, #0
    b51a:	d0c7      	beq.n	b4ac <sys_clock_announce+0x4c>
	__asm__ volatile(
    b51c:	f385 8811 	msr	BASEPRI, r5
    b520:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b524:	68a3      	ldr	r3, [r4, #8]
    b526:	4620      	mov	r0, r4
    b528:	4798      	blx	r3
	__asm__ volatile(
    b52a:	f04f 0320 	mov.w	r3, #32
    b52e:	f3ef 8511 	mrs	r5, BASEPRI
    b532:	f383 8812 	msr	BASEPRI_MAX, r3
    b536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b53a:	4824      	ldr	r0, [pc, #144]	; (b5cc <sys_clock_announce+0x16c>)
    b53c:	f7fd fd30 	bl	8fa0 <z_spin_lock_valid>
    b540:	2800      	cmp	r0, #0
    b542:	d1c3      	bne.n	b4cc <sys_clock_announce+0x6c>
    b544:	4c23      	ldr	r4, [pc, #140]	; (b5d4 <sys_clock_announce+0x174>)
    b546:	238e      	movs	r3, #142	; 0x8e
    b548:	4622      	mov	r2, r4
    b54a:	4923      	ldr	r1, [pc, #140]	; (b5d8 <sys_clock_announce+0x178>)
    b54c:	4823      	ldr	r0, [pc, #140]	; (b5dc <sys_clock_announce+0x17c>)
    b54e:	f000 fddb 	bl	c108 <assert_print>
    b552:	491e      	ldr	r1, [pc, #120]	; (b5cc <sys_clock_announce+0x16c>)
    b554:	4822      	ldr	r0, [pc, #136]	; (b5e0 <sys_clock_announce+0x180>)
    b556:	f000 fdd7 	bl	c108 <assert_print>
    b55a:	218e      	movs	r1, #142	; 0x8e
    b55c:	4620      	mov	r0, r4
    b55e:	f000 fdcc 	bl	c0fa <assert_post_action>
    b562:	e7b3      	b.n	b4cc <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b564:	b144      	cbz	r4, b578 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    b566:	4b1a      	ldr	r3, [pc, #104]	; (b5d0 <sys_clock_announce+0x170>)
    b568:	6819      	ldr	r1, [r3, #0]
    b56a:	6923      	ldr	r3, [r4, #16]
    b56c:	6962      	ldr	r2, [r4, #20]
    b56e:	1a5b      	subs	r3, r3, r1
    b570:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    b574:	6123      	str	r3, [r4, #16]
    b576:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    b578:	4a1c      	ldr	r2, [pc, #112]	; (b5ec <sys_clock_announce+0x18c>)
    b57a:	4e15      	ldr	r6, [pc, #84]	; (b5d0 <sys_clock_announce+0x170>)
    b57c:	6830      	ldr	r0, [r6, #0]
    b57e:	6813      	ldr	r3, [r2, #0]
    b580:	6851      	ldr	r1, [r2, #4]
    b582:	181b      	adds	r3, r3, r0
    b584:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    b588:	6013      	str	r3, [r2, #0]
    b58a:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    b58c:	2400      	movs	r4, #0
    b58e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b590:	f7ff fd4a 	bl	b028 <next_timeout>
    b594:	4621      	mov	r1, r4
    b596:	f7fb f939 	bl	680c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b59a:	480c      	ldr	r0, [pc, #48]	; (b5cc <sys_clock_announce+0x16c>)
    b59c:	f7fd fd10 	bl	8fc0 <z_spin_unlock_valid>
    b5a0:	b120      	cbz	r0, b5ac <sys_clock_announce+0x14c>
	__asm__ volatile(
    b5a2:	f385 8811 	msr	BASEPRI, r5
    b5a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b5aa:	bd70      	pop	{r4, r5, r6, pc}
    b5ac:	4c09      	ldr	r4, [pc, #36]	; (b5d4 <sys_clock_announce+0x174>)
    b5ae:	23b9      	movs	r3, #185	; 0xb9
    b5b0:	4622      	mov	r2, r4
    b5b2:	490c      	ldr	r1, [pc, #48]	; (b5e4 <sys_clock_announce+0x184>)
    b5b4:	4809      	ldr	r0, [pc, #36]	; (b5dc <sys_clock_announce+0x17c>)
    b5b6:	f000 fda7 	bl	c108 <assert_print>
    b5ba:	4904      	ldr	r1, [pc, #16]	; (b5cc <sys_clock_announce+0x16c>)
    b5bc:	480a      	ldr	r0, [pc, #40]	; (b5e8 <sys_clock_announce+0x188>)
    b5be:	f000 fda3 	bl	c108 <assert_print>
    b5c2:	21b9      	movs	r1, #185	; 0xb9
    b5c4:	4620      	mov	r0, r4
    b5c6:	f000 fd98 	bl	c0fa <assert_post_action>
    b5ca:	e7ea      	b.n	b5a2 <sys_clock_announce+0x142>
    b5cc:	200011ac 	.word	0x200011ac
    b5d0:	200011a8 	.word	0x200011a8
    b5d4:	0000dd4c 	.word	0x0000dd4c
    b5d8:	0000ddac 	.word	0x0000ddac
    b5dc:	0000d4bc 	.word	0x0000d4bc
    b5e0:	0000ddc4 	.word	0x0000ddc4
    b5e4:	0000dd7c 	.word	0x0000dd7c
    b5e8:	0000dd94 	.word	0x0000dd94
    b5ec:	200005f0 	.word	0x200005f0

0000b5f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b5f2:	2600      	movs	r6, #0
	__asm__ volatile(
    b5f4:	f04f 0320 	mov.w	r3, #32
    b5f8:	f3ef 8711 	mrs	r7, BASEPRI
    b5fc:	f383 8812 	msr	BASEPRI_MAX, r3
    b600:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b604:	481f      	ldr	r0, [pc, #124]	; (b684 <sys_clock_tick_get+0x94>)
    b606:	f7fd fccb 	bl	8fa0 <z_spin_lock_valid>
    b60a:	b128      	cbz	r0, b618 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    b60c:	481d      	ldr	r0, [pc, #116]	; (b684 <sys_clock_tick_get+0x94>)
    b60e:	f7fd fce7 	bl	8fe0 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    b612:	2400      	movs	r4, #0
    b614:	4625      	mov	r5, r4
	return k;
    b616:	e014      	b.n	b642 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b618:	4c1b      	ldr	r4, [pc, #108]	; (b688 <sys_clock_tick_get+0x98>)
    b61a:	238e      	movs	r3, #142	; 0x8e
    b61c:	4622      	mov	r2, r4
    b61e:	491b      	ldr	r1, [pc, #108]	; (b68c <sys_clock_tick_get+0x9c>)
    b620:	481b      	ldr	r0, [pc, #108]	; (b690 <sys_clock_tick_get+0xa0>)
    b622:	f000 fd71 	bl	c108 <assert_print>
    b626:	4917      	ldr	r1, [pc, #92]	; (b684 <sys_clock_tick_get+0x94>)
    b628:	481a      	ldr	r0, [pc, #104]	; (b694 <sys_clock_tick_get+0xa4>)
    b62a:	f000 fd6d 	bl	c108 <assert_print>
    b62e:	218e      	movs	r1, #142	; 0x8e
    b630:	4620      	mov	r0, r4
    b632:	f000 fd62 	bl	c0fa <assert_post_action>
    b636:	e7e9      	b.n	b60c <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    b638:	f387 8811 	msr	BASEPRI, r7
    b63c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b640:	2601      	movs	r6, #1
    b642:	b9e6      	cbnz	r6, b67e <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    b644:	f7fb f914 	bl	6870 <sys_clock_elapsed>
    b648:	4b13      	ldr	r3, [pc, #76]	; (b698 <sys_clock_tick_get+0xa8>)
    b64a:	681c      	ldr	r4, [r3, #0]
    b64c:	685d      	ldr	r5, [r3, #4]
    b64e:	1904      	adds	r4, r0, r4
    b650:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b654:	480b      	ldr	r0, [pc, #44]	; (b684 <sys_clock_tick_get+0x94>)
    b656:	f7fd fcb3 	bl	8fc0 <z_spin_unlock_valid>
    b65a:	2800      	cmp	r0, #0
    b65c:	d1ec      	bne.n	b638 <sys_clock_tick_get+0x48>
    b65e:	4e0a      	ldr	r6, [pc, #40]	; (b688 <sys_clock_tick_get+0x98>)
    b660:	23b9      	movs	r3, #185	; 0xb9
    b662:	4632      	mov	r2, r6
    b664:	490d      	ldr	r1, [pc, #52]	; (b69c <sys_clock_tick_get+0xac>)
    b666:	480a      	ldr	r0, [pc, #40]	; (b690 <sys_clock_tick_get+0xa0>)
    b668:	f000 fd4e 	bl	c108 <assert_print>
    b66c:	4905      	ldr	r1, [pc, #20]	; (b684 <sys_clock_tick_get+0x94>)
    b66e:	480c      	ldr	r0, [pc, #48]	; (b6a0 <sys_clock_tick_get+0xb0>)
    b670:	f000 fd4a 	bl	c108 <assert_print>
    b674:	21b9      	movs	r1, #185	; 0xb9
    b676:	4630      	mov	r0, r6
    b678:	f000 fd3f 	bl	c0fa <assert_post_action>
    b67c:	e7dc      	b.n	b638 <sys_clock_tick_get+0x48>
	}
	return t;
}
    b67e:	4620      	mov	r0, r4
    b680:	4629      	mov	r1, r5
    b682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b684:	200011ac 	.word	0x200011ac
    b688:	0000dd4c 	.word	0x0000dd4c
    b68c:	0000ddac 	.word	0x0000ddac
    b690:	0000d4bc 	.word	0x0000d4bc
    b694:	0000ddc4 	.word	0x0000ddc4
    b698:	200005f0 	.word	0x200005f0
    b69c:	0000dd7c 	.word	0x0000dd7c
    b6a0:	0000dd94 	.word	0x0000dd94

0000b6a4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b6a4:	b570      	push	{r4, r5, r6, lr}
    b6a6:	4604      	mov	r4, r0
	__asm__ volatile(
    b6a8:	f04f 0320 	mov.w	r3, #32
    b6ac:	f3ef 8611 	mrs	r6, BASEPRI
    b6b0:	f383 8812 	msr	BASEPRI_MAX, r3
    b6b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b6b8:	4857      	ldr	r0, [pc, #348]	; (b818 <z_timer_expiration_handler+0x174>)
    b6ba:	f7fd fc71 	bl	8fa0 <z_spin_lock_valid>
    b6be:	2800      	cmp	r0, #0
    b6c0:	d049      	beq.n	b756 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    b6c2:	4855      	ldr	r0, [pc, #340]	; (b818 <z_timer_expiration_handler+0x174>)
    b6c4:	f7fd fc8c 	bl	8fe0 <z_spin_lock_set_owner>
	return k;
    b6c8:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b6ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b6cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b6ce:	ea52 0103 	orrs.w	r1, r2, r3
    b6d2:	d005      	beq.n	b6e0 <z_timer_expiration_handler+0x3c>
    b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b6d8:	bf08      	it	eq
    b6da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b6de:	d14a      	bne.n	b776 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b6e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b6e2:	3301      	adds	r3, #1
    b6e4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b6e6:	6a23      	ldr	r3, [r4, #32]
    b6e8:	b1db      	cbz	r3, b722 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b6ea:	484b      	ldr	r0, [pc, #300]	; (b818 <z_timer_expiration_handler+0x174>)
    b6ec:	f7fd fc68 	bl	8fc0 <z_spin_unlock_valid>
    b6f0:	2800      	cmp	r0, #0
    b6f2:	d047      	beq.n	b784 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    b6f4:	f386 8811 	msr	BASEPRI, r6
    b6f8:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b6fc:	6a23      	ldr	r3, [r4, #32]
    b6fe:	4620      	mov	r0, r4
    b700:	4798      	blx	r3
	__asm__ volatile(
    b702:	f04f 0320 	mov.w	r3, #32
    b706:	f3ef 8511 	mrs	r5, BASEPRI
    b70a:	f383 8812 	msr	BASEPRI_MAX, r3
    b70e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b712:	4841      	ldr	r0, [pc, #260]	; (b818 <z_timer_expiration_handler+0x174>)
    b714:	f7fd fc44 	bl	8fa0 <z_spin_lock_valid>
    b718:	2800      	cmp	r0, #0
    b71a:	d043      	beq.n	b7a4 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    b71c:	483e      	ldr	r0, [pc, #248]	; (b818 <z_timer_expiration_handler+0x174>)
    b71e:	f7fd fc5f 	bl	8fe0 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b722:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b726:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b728:	42a3      	cmp	r3, r4
    b72a:	d04b      	beq.n	b7c4 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b72c:	2c00      	cmp	r4, #0
    b72e:	d049      	beq.n	b7c4 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b730:	4620      	mov	r0, r4
    b732:	f7fe f9f7 	bl	9b24 <z_unpend_thread_no_timeout>
    b736:	2300      	movs	r3, #0
    b738:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b73c:	4836      	ldr	r0, [pc, #216]	; (b818 <z_timer_expiration_handler+0x174>)
    b73e:	f7fd fc3f 	bl	8fc0 <z_spin_unlock_valid>
    b742:	2800      	cmp	r0, #0
    b744:	d057      	beq.n	b7f6 <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    b746:	f385 8811 	msr	BASEPRI, r5
    b74a:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b74e:	4620      	mov	r0, r4
    b750:	f7fe fce6 	bl	a120 <z_ready_thread>
}
    b754:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b756:	4d31      	ldr	r5, [pc, #196]	; (b81c <z_timer_expiration_handler+0x178>)
    b758:	238e      	movs	r3, #142	; 0x8e
    b75a:	462a      	mov	r2, r5
    b75c:	4930      	ldr	r1, [pc, #192]	; (b820 <z_timer_expiration_handler+0x17c>)
    b75e:	4831      	ldr	r0, [pc, #196]	; (b824 <z_timer_expiration_handler+0x180>)
    b760:	f000 fcd2 	bl	c108 <assert_print>
    b764:	492c      	ldr	r1, [pc, #176]	; (b818 <z_timer_expiration_handler+0x174>)
    b766:	4830      	ldr	r0, [pc, #192]	; (b828 <z_timer_expiration_handler+0x184>)
    b768:	f000 fcce 	bl	c108 <assert_print>
    b76c:	218e      	movs	r1, #142	; 0x8e
    b76e:	4628      	mov	r0, r5
    b770:	f000 fcc3 	bl	c0fa <assert_post_action>
    b774:	e7a5      	b.n	b6c2 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b776:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    b77a:	492c      	ldr	r1, [pc, #176]	; (b82c <z_timer_expiration_handler+0x188>)
    b77c:	4620      	mov	r0, r4
    b77e:	f7ff fc79 	bl	b074 <z_add_timeout>
    b782:	e7ad      	b.n	b6e0 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b784:	4d25      	ldr	r5, [pc, #148]	; (b81c <z_timer_expiration_handler+0x178>)
    b786:	23b9      	movs	r3, #185	; 0xb9
    b788:	462a      	mov	r2, r5
    b78a:	4929      	ldr	r1, [pc, #164]	; (b830 <z_timer_expiration_handler+0x18c>)
    b78c:	4825      	ldr	r0, [pc, #148]	; (b824 <z_timer_expiration_handler+0x180>)
    b78e:	f000 fcbb 	bl	c108 <assert_print>
    b792:	4921      	ldr	r1, [pc, #132]	; (b818 <z_timer_expiration_handler+0x174>)
    b794:	4827      	ldr	r0, [pc, #156]	; (b834 <z_timer_expiration_handler+0x190>)
    b796:	f000 fcb7 	bl	c108 <assert_print>
    b79a:	21b9      	movs	r1, #185	; 0xb9
    b79c:	4628      	mov	r0, r5
    b79e:	f000 fcac 	bl	c0fa <assert_post_action>
    b7a2:	e7a7      	b.n	b6f4 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7a4:	4e1d      	ldr	r6, [pc, #116]	; (b81c <z_timer_expiration_handler+0x178>)
    b7a6:	238e      	movs	r3, #142	; 0x8e
    b7a8:	4632      	mov	r2, r6
    b7aa:	491d      	ldr	r1, [pc, #116]	; (b820 <z_timer_expiration_handler+0x17c>)
    b7ac:	481d      	ldr	r0, [pc, #116]	; (b824 <z_timer_expiration_handler+0x180>)
    b7ae:	f000 fcab 	bl	c108 <assert_print>
    b7b2:	4919      	ldr	r1, [pc, #100]	; (b818 <z_timer_expiration_handler+0x174>)
    b7b4:	481c      	ldr	r0, [pc, #112]	; (b828 <z_timer_expiration_handler+0x184>)
    b7b6:	f000 fca7 	bl	c108 <assert_print>
    b7ba:	218e      	movs	r1, #142	; 0x8e
    b7bc:	4630      	mov	r0, r6
    b7be:	f000 fc9c 	bl	c0fa <assert_post_action>
    b7c2:	e7ab      	b.n	b71c <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7c4:	4814      	ldr	r0, [pc, #80]	; (b818 <z_timer_expiration_handler+0x174>)
    b7c6:	f7fd fbfb 	bl	8fc0 <z_spin_unlock_valid>
    b7ca:	b120      	cbz	r0, b7d6 <z_timer_expiration_handler+0x132>
    b7cc:	f385 8811 	msr	BASEPRI, r5
    b7d0:	f3bf 8f6f 	isb	sy
		return;
    b7d4:	e7be      	b.n	b754 <z_timer_expiration_handler+0xb0>
    b7d6:	4c11      	ldr	r4, [pc, #68]	; (b81c <z_timer_expiration_handler+0x178>)
    b7d8:	23b9      	movs	r3, #185	; 0xb9
    b7da:	4622      	mov	r2, r4
    b7dc:	4914      	ldr	r1, [pc, #80]	; (b830 <z_timer_expiration_handler+0x18c>)
    b7de:	4811      	ldr	r0, [pc, #68]	; (b824 <z_timer_expiration_handler+0x180>)
    b7e0:	f000 fc92 	bl	c108 <assert_print>
    b7e4:	490c      	ldr	r1, [pc, #48]	; (b818 <z_timer_expiration_handler+0x174>)
    b7e6:	4813      	ldr	r0, [pc, #76]	; (b834 <z_timer_expiration_handler+0x190>)
    b7e8:	f000 fc8e 	bl	c108 <assert_print>
    b7ec:	21b9      	movs	r1, #185	; 0xb9
    b7ee:	4620      	mov	r0, r4
    b7f0:	f000 fc83 	bl	c0fa <assert_post_action>
    b7f4:	e7ea      	b.n	b7cc <z_timer_expiration_handler+0x128>
    b7f6:	4e09      	ldr	r6, [pc, #36]	; (b81c <z_timer_expiration_handler+0x178>)
    b7f8:	23b9      	movs	r3, #185	; 0xb9
    b7fa:	4632      	mov	r2, r6
    b7fc:	490c      	ldr	r1, [pc, #48]	; (b830 <z_timer_expiration_handler+0x18c>)
    b7fe:	4809      	ldr	r0, [pc, #36]	; (b824 <z_timer_expiration_handler+0x180>)
    b800:	f000 fc82 	bl	c108 <assert_print>
    b804:	4904      	ldr	r1, [pc, #16]	; (b818 <z_timer_expiration_handler+0x174>)
    b806:	480b      	ldr	r0, [pc, #44]	; (b834 <z_timer_expiration_handler+0x190>)
    b808:	f000 fc7e 	bl	c108 <assert_print>
    b80c:	21b9      	movs	r1, #185	; 0xb9
    b80e:	4630      	mov	r0, r6
    b810:	f000 fc73 	bl	c0fa <assert_post_action>
    b814:	e797      	b.n	b746 <z_timer_expiration_handler+0xa2>
    b816:	bf00      	nop
    b818:	200011b0 	.word	0x200011b0
    b81c:	0000dd4c 	.word	0x0000dd4c
    b820:	0000ddac 	.word	0x0000ddac
    b824:	0000d4bc 	.word	0x0000d4bc
    b828:	0000ddc4 	.word	0x0000ddc4
    b82c:	0000b6a5 	.word	0x0000b6a5
    b830:	0000dd7c 	.word	0x0000dd7c
    b834:	0000dd94 	.word	0x0000dd94

0000b838 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b83c:	9f06      	ldr	r7, [sp, #24]
    b83e:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b846:	bf08      	it	eq
    b848:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b84c:	d02f      	beq.n	b8ae <z_impl_k_timer_start+0x76>
    b84e:	4605      	mov	r5, r0
    b850:	4614      	mov	r4, r2
    b852:	461e      	mov	r6, r3
    b854:	4611      	mov	r1, r2
    b856:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b858:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    b85c:	bf08      	it	eq
    b85e:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    b862:	d00d      	beq.n	b880 <z_impl_k_timer_start+0x48>
    b864:	ea57 0c08 	orrs.w	ip, r7, r8
    b868:	d00a      	beq.n	b880 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    b86a:	f06f 0c01 	mvn.w	ip, #1
    b86e:	ebbc 0c07 	subs.w	ip, ip, r7
    b872:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b876:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b87a:	f1bc 0f00 	cmp.w	ip, #0
    b87e:	db18      	blt.n	b8b2 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b880:	f06f 0301 	mvn.w	r3, #1
    b884:	1a5b      	subs	r3, r3, r1
    b886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b88a:	eb63 0300 	sbc.w	r3, r3, r0
    b88e:	2b00      	cmp	r3, #0
    b890:	db1a      	blt.n	b8c8 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b892:	4628      	mov	r0, r5
    b894:	f7ff fcd2 	bl	b23c <z_abort_timeout>
	timer->period = period;
    b898:	62af      	str	r7, [r5, #40]	; 0x28
    b89a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    b89e:	2300      	movs	r3, #0
    b8a0:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b8a2:	4622      	mov	r2, r4
    b8a4:	4633      	mov	r3, r6
    b8a6:	490e      	ldr	r1, [pc, #56]	; (b8e0 <z_impl_k_timer_start+0xa8>)
    b8a8:	4628      	mov	r0, r5
    b8aa:	f7ff fbe3 	bl	b074 <z_add_timeout>
		     duration);
}
    b8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b8b2:	2f02      	cmp	r7, #2
    b8b4:	f178 0300 	sbcs.w	r3, r8, #0
    b8b8:	da02      	bge.n	b8c0 <z_impl_k_timer_start+0x88>
    b8ba:	2702      	movs	r7, #2
    b8bc:	f04f 0800 	mov.w	r8, #0
    b8c0:	3f01      	subs	r7, #1
    b8c2:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    b8c6:	e7db      	b.n	b880 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b8c8:	460c      	mov	r4, r1
    b8ca:	4606      	mov	r6, r0
    b8cc:	2901      	cmp	r1, #1
    b8ce:	f170 0300 	sbcs.w	r3, r0, #0
    b8d2:	da01      	bge.n	b8d8 <z_impl_k_timer_start+0xa0>
    b8d4:	2401      	movs	r4, #1
    b8d6:	2600      	movs	r6, #0
    b8d8:	3c01      	subs	r4, #1
    b8da:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    b8de:	e7d8      	b.n	b892 <z_impl_k_timer_start+0x5a>
    b8e0:	0000b6a5 	.word	0x0000b6a5

0000b8e4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    b8e4:	4b01      	ldr	r3, [pc, #4]	; (b8ec <k_thread_system_pool_assign+0x8>)
    b8e6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    b8ea:	4770      	bx	lr
    b8ec:	200001f8 	.word	0x200001f8

0000b8f0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b8f0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b8f2:	4a03      	ldr	r2, [pc, #12]	; (b900 <boot_banner+0x10>)
    b8f4:	4903      	ldr	r1, [pc, #12]	; (b904 <boot_banner+0x14>)
    b8f6:	4804      	ldr	r0, [pc, #16]	; (b908 <boot_banner+0x18>)
    b8f8:	f000 fa81 	bl	bdfe <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b8fc:	bd08      	pop	{r3, pc}
    b8fe:	bf00      	nop
    b900:	0000eaac 	.word	0x0000eaac
    b904:	0000f788 	.word	0x0000f788
    b908:	0000f798 	.word	0x0000f798

0000b90c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b90c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b90e:	4c0f      	ldr	r4, [pc, #60]	; (b94c <statics_init+0x40>)
    b910:	e008      	b.n	b924 <statics_init+0x18>
    b912:	4b0f      	ldr	r3, [pc, #60]	; (b950 <statics_init+0x44>)
    b914:	429c      	cmp	r4, r3
    b916:	d217      	bcs.n	b948 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b918:	68a2      	ldr	r2, [r4, #8]
    b91a:	6861      	ldr	r1, [r4, #4]
    b91c:	4620      	mov	r0, r4
    b91e:	f001 fb94 	bl	d04a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b922:	3418      	adds	r4, #24
    b924:	4b0a      	ldr	r3, [pc, #40]	; (b950 <statics_init+0x44>)
    b926:	429c      	cmp	r4, r3
    b928:	d9f3      	bls.n	b912 <statics_init+0x6>
    b92a:	4d0a      	ldr	r5, [pc, #40]	; (b954 <statics_init+0x48>)
    b92c:	2318      	movs	r3, #24
    b92e:	462a      	mov	r2, r5
    b930:	4909      	ldr	r1, [pc, #36]	; (b958 <statics_init+0x4c>)
    b932:	480a      	ldr	r0, [pc, #40]	; (b95c <statics_init+0x50>)
    b934:	f000 fbe8 	bl	c108 <assert_print>
    b938:	4809      	ldr	r0, [pc, #36]	; (b960 <statics_init+0x54>)
    b93a:	f000 fbe5 	bl	c108 <assert_print>
    b93e:	2118      	movs	r1, #24
    b940:	4628      	mov	r0, r5
    b942:	f000 fbda 	bl	c0fa <assert_post_action>
    b946:	e7e4      	b.n	b912 <statics_init+0x6>
		}
	}
	return 0;
}
    b948:	2000      	movs	r0, #0
    b94a:	bd38      	pop	{r3, r4, r5, pc}
    b94c:	200001f8 	.word	0x200001f8
    b950:	20000210 	.word	0x20000210
    b954:	0000f7c0 	.word	0x0000f7c0
    b958:	0000f7e4 	.word	0x0000f7e4
    b95c:	0000d4bc 	.word	0x0000d4bc
    b960:	0000f308 	.word	0x0000f308

0000b964 <nrf_cc3xx_platform_init_no_rng>:
    b964:	b510      	push	{r4, lr}
    b966:	4c0a      	ldr	r4, [pc, #40]	; (b990 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b968:	6823      	ldr	r3, [r4, #0]
    b96a:	b11b      	cbz	r3, b974 <nrf_cc3xx_platform_init_no_rng+0x10>
    b96c:	2301      	movs	r3, #1
    b96e:	6023      	str	r3, [r4, #0]
    b970:	2000      	movs	r0, #0
    b972:	bd10      	pop	{r4, pc}
    b974:	f000 f8ce 	bl	bb14 <CC_LibInitNoRng>
    b978:	2800      	cmp	r0, #0
    b97a:	d0f7      	beq.n	b96c <nrf_cc3xx_platform_init_no_rng+0x8>
    b97c:	3801      	subs	r0, #1
    b97e:	2806      	cmp	r0, #6
    b980:	d803      	bhi.n	b98a <nrf_cc3xx_platform_init_no_rng+0x26>
    b982:	4b04      	ldr	r3, [pc, #16]	; (b994 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b984:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b988:	bd10      	pop	{r4, pc}
    b98a:	4803      	ldr	r0, [pc, #12]	; (b998 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b98c:	bd10      	pop	{r4, pc}
    b98e:	bf00      	nop
    b990:	200011b4 	.word	0x200011b4
    b994:	0000f7fc 	.word	0x0000f7fc
    b998:	ffff8ffe 	.word	0xffff8ffe

0000b99c <nrf_cc3xx_platform_abort>:
    b99c:	f3bf 8f4f 	dsb	sy
    b9a0:	4905      	ldr	r1, [pc, #20]	; (b9b8 <nrf_cc3xx_platform_abort+0x1c>)
    b9a2:	4b06      	ldr	r3, [pc, #24]	; (b9bc <nrf_cc3xx_platform_abort+0x20>)
    b9a4:	68ca      	ldr	r2, [r1, #12]
    b9a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b9aa:	4313      	orrs	r3, r2
    b9ac:	60cb      	str	r3, [r1, #12]
    b9ae:	f3bf 8f4f 	dsb	sy
    b9b2:	bf00      	nop
    b9b4:	e7fd      	b.n	b9b2 <nrf_cc3xx_platform_abort+0x16>
    b9b6:	bf00      	nop
    b9b8:	e000ed00 	.word	0xe000ed00
    b9bc:	05fa0004 	.word	0x05fa0004

0000b9c0 <CC_PalAbort>:
    b9c0:	b410      	push	{r4}
    b9c2:	4b09      	ldr	r3, [pc, #36]	; (b9e8 <CC_PalAbort+0x28>)
    b9c4:	4909      	ldr	r1, [pc, #36]	; (b9ec <CC_PalAbort+0x2c>)
    b9c6:	4c0a      	ldr	r4, [pc, #40]	; (b9f0 <CC_PalAbort+0x30>)
    b9c8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    b9cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    b9d0:	6849      	ldr	r1, [r1, #4]
    b9d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    b9d6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    b9da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    b9de:	2300      	movs	r3, #0
    b9e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    b9e4:	bc10      	pop	{r4}
    b9e6:	4708      	bx	r1
    b9e8:	5002b000 	.word	0x5002b000
    b9ec:	2000017c 	.word	0x2000017c
    b9f0:	5002a000 	.word	0x5002a000

0000b9f4 <nrf_cc3xx_platform_set_abort>:
    b9f4:	e9d0 1200 	ldrd	r1, r2, [r0]
    b9f8:	4b01      	ldr	r3, [pc, #4]	; (ba00 <nrf_cc3xx_platform_set_abort+0xc>)
    b9fa:	e9c3 1200 	strd	r1, r2, [r3]
    b9fe:	4770      	bx	lr
    ba00:	2000017c 	.word	0x2000017c

0000ba04 <mutex_free>:
    ba04:	b510      	push	{r4, lr}
    ba06:	4604      	mov	r4, r0
    ba08:	b130      	cbz	r0, ba18 <mutex_free+0x14>
    ba0a:	6863      	ldr	r3, [r4, #4]
    ba0c:	06db      	lsls	r3, r3, #27
    ba0e:	d502      	bpl.n	ba16 <mutex_free+0x12>
    ba10:	2300      	movs	r3, #0
    ba12:	6023      	str	r3, [r4, #0]
    ba14:	6063      	str	r3, [r4, #4]
    ba16:	bd10      	pop	{r4, pc}
    ba18:	4b02      	ldr	r3, [pc, #8]	; (ba24 <mutex_free+0x20>)
    ba1a:	4803      	ldr	r0, [pc, #12]	; (ba28 <mutex_free+0x24>)
    ba1c:	685b      	ldr	r3, [r3, #4]
    ba1e:	4798      	blx	r3
    ba20:	e7f3      	b.n	ba0a <mutex_free+0x6>
    ba22:	bf00      	nop
    ba24:	2000017c 	.word	0x2000017c
    ba28:	0000f818 	.word	0x0000f818

0000ba2c <mutex_lock>:
    ba2c:	b1b0      	cbz	r0, ba5c <mutex_lock+0x30>
    ba2e:	6843      	ldr	r3, [r0, #4]
    ba30:	b193      	cbz	r3, ba58 <mutex_lock+0x2c>
    ba32:	06db      	lsls	r3, r3, #27
    ba34:	d50e      	bpl.n	ba54 <mutex_lock+0x28>
    ba36:	2301      	movs	r3, #1
    ba38:	e850 2f00 	ldrex	r2, [r0]
    ba3c:	4619      	mov	r1, r3
    ba3e:	e840 1c00 	strex	ip, r1, [r0]
    ba42:	f09c 0f00 	teq	ip, #0
    ba46:	d1f7      	bne.n	ba38 <mutex_lock+0xc>
    ba48:	2a01      	cmp	r2, #1
    ba4a:	d0f5      	beq.n	ba38 <mutex_lock+0xc>
    ba4c:	f3bf 8f5f 	dmb	sy
    ba50:	2000      	movs	r0, #0
    ba52:	4770      	bx	lr
    ba54:	4803      	ldr	r0, [pc, #12]	; (ba64 <mutex_lock+0x38>)
    ba56:	4770      	bx	lr
    ba58:	4803      	ldr	r0, [pc, #12]	; (ba68 <mutex_lock+0x3c>)
    ba5a:	4770      	bx	lr
    ba5c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ba60:	4770      	bx	lr
    ba62:	bf00      	nop
    ba64:	ffff8fe9 	.word	0xffff8fe9
    ba68:	ffff8fea 	.word	0xffff8fea

0000ba6c <mutex_unlock>:
    ba6c:	b168      	cbz	r0, ba8a <mutex_unlock+0x1e>
    ba6e:	6843      	ldr	r3, [r0, #4]
    ba70:	b13b      	cbz	r3, ba82 <mutex_unlock+0x16>
    ba72:	06db      	lsls	r3, r3, #27
    ba74:	d507      	bpl.n	ba86 <mutex_unlock+0x1a>
    ba76:	f3bf 8f5f 	dmb	sy
    ba7a:	2300      	movs	r3, #0
    ba7c:	6003      	str	r3, [r0, #0]
    ba7e:	4618      	mov	r0, r3
    ba80:	4770      	bx	lr
    ba82:	4803      	ldr	r0, [pc, #12]	; (ba90 <mutex_unlock+0x24>)
    ba84:	4770      	bx	lr
    ba86:	4803      	ldr	r0, [pc, #12]	; (ba94 <mutex_unlock+0x28>)
    ba88:	4770      	bx	lr
    ba8a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ba8e:	4770      	bx	lr
    ba90:	ffff8fea 	.word	0xffff8fea
    ba94:	ffff8fe9 	.word	0xffff8fe9

0000ba98 <mutex_init>:
    ba98:	b510      	push	{r4, lr}
    ba9a:	4604      	mov	r4, r0
    ba9c:	b120      	cbz	r0, baa8 <mutex_init+0x10>
    ba9e:	2200      	movs	r2, #0
    baa0:	2311      	movs	r3, #17
    baa2:	6022      	str	r2, [r4, #0]
    baa4:	6063      	str	r3, [r4, #4]
    baa6:	bd10      	pop	{r4, pc}
    baa8:	4801      	ldr	r0, [pc, #4]	; (bab0 <mutex_init+0x18>)
    baaa:	f7ff ff89 	bl	b9c0 <CC_PalAbort>
    baae:	e7f6      	b.n	ba9e <mutex_init+0x6>
    bab0:	0000f840 	.word	0x0000f840

0000bab4 <nrf_cc3xx_platform_set_mutexes>:
    bab4:	b570      	push	{r4, r5, r6, lr}
    bab6:	e9d0 2300 	ldrd	r2, r3, [r0]
    baba:	4c13      	ldr	r4, [pc, #76]	; (bb08 <nrf_cc3xx_platform_set_mutexes+0x54>)
    babc:	4d13      	ldr	r5, [pc, #76]	; (bb0c <nrf_cc3xx_platform_set_mutexes+0x58>)
    babe:	6063      	str	r3, [r4, #4]
    bac0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    bac4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    bac8:	6022      	str	r2, [r4, #0]
    baca:	4b11      	ldr	r3, [pc, #68]	; (bb10 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    bacc:	6808      	ldr	r0, [r1, #0]
    bace:	6018      	str	r0, [r3, #0]
    bad0:	6848      	ldr	r0, [r1, #4]
    bad2:	6058      	str	r0, [r3, #4]
    bad4:	6888      	ldr	r0, [r1, #8]
    bad6:	6098      	str	r0, [r3, #8]
    bad8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    badc:	60d8      	str	r0, [r3, #12]
    bade:	6119      	str	r1, [r3, #16]
    bae0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    bae4:	06db      	lsls	r3, r3, #27
    bae6:	d50d      	bpl.n	bb04 <nrf_cc3xx_platform_set_mutexes+0x50>
    bae8:	2300      	movs	r3, #0
    baea:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    baee:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    baf2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    baf6:	4790      	blx	r2
    baf8:	6823      	ldr	r3, [r4, #0]
    bafa:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    bafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb02:	4718      	bx	r3
    bb04:	bd70      	pop	{r4, r5, r6, pc}
    bb06:	bf00      	nop
    bb08:	2000018c 	.word	0x2000018c
    bb0c:	200011cc 	.word	0x200011cc
    bb10:	2000019c 	.word	0x2000019c

0000bb14 <CC_LibInitNoRng>:
    bb14:	b538      	push	{r3, r4, r5, lr}
    bb16:	f000 f82f 	bl	bb78 <CC_HalInit>
    bb1a:	b120      	cbz	r0, bb26 <CC_LibInitNoRng+0x12>
    bb1c:	2403      	movs	r4, #3
    bb1e:	f000 f863 	bl	bbe8 <CC_PalTerminate>
    bb22:	4620      	mov	r0, r4
    bb24:	bd38      	pop	{r3, r4, r5, pc}
    bb26:	f000 f831 	bl	bb8c <CC_PalInit>
    bb2a:	b998      	cbnz	r0, bb54 <CC_LibInitNoRng+0x40>
    bb2c:	f000 f8ac 	bl	bc88 <CC_PalPowerSaveModeSelect>
    bb30:	b998      	cbnz	r0, bb5a <CC_LibInitNoRng+0x46>
    bb32:	4d0f      	ldr	r5, [pc, #60]	; (bb70 <CC_LibInitNoRng+0x5c>)
    bb34:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    bb38:	0e1b      	lsrs	r3, r3, #24
    bb3a:	2bf0      	cmp	r3, #240	; 0xf0
    bb3c:	d108      	bne.n	bb50 <CC_LibInitNoRng+0x3c>
    bb3e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    bb42:	4b0c      	ldr	r3, [pc, #48]	; (bb74 <CC_LibInitNoRng+0x60>)
    bb44:	429a      	cmp	r2, r3
    bb46:	d00a      	beq.n	bb5e <CC_LibInitNoRng+0x4a>
    bb48:	2407      	movs	r4, #7
    bb4a:	f000 f817 	bl	bb7c <CC_HalTerminate>
    bb4e:	e7e6      	b.n	bb1e <CC_LibInitNoRng+0xa>
    bb50:	2406      	movs	r4, #6
    bb52:	e7fa      	b.n	bb4a <CC_LibInitNoRng+0x36>
    bb54:	2404      	movs	r4, #4
    bb56:	4620      	mov	r0, r4
    bb58:	bd38      	pop	{r3, r4, r5, pc}
    bb5a:	2400      	movs	r4, #0
    bb5c:	e7f5      	b.n	bb4a <CC_LibInitNoRng+0x36>
    bb5e:	2001      	movs	r0, #1
    bb60:	f000 f892 	bl	bc88 <CC_PalPowerSaveModeSelect>
    bb64:	4604      	mov	r4, r0
    bb66:	2800      	cmp	r0, #0
    bb68:	d1f7      	bne.n	bb5a <CC_LibInitNoRng+0x46>
    bb6a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    bb6e:	e7d8      	b.n	bb22 <CC_LibInitNoRng+0xe>
    bb70:	5002b000 	.word	0x5002b000
    bb74:	20e00000 	.word	0x20e00000

0000bb78 <CC_HalInit>:
    bb78:	2000      	movs	r0, #0
    bb7a:	4770      	bx	lr

0000bb7c <CC_HalTerminate>:
    bb7c:	2000      	movs	r0, #0
    bb7e:	4770      	bx	lr

0000bb80 <CC_HalMaskInterrupt>:
    bb80:	4b01      	ldr	r3, [pc, #4]	; (bb88 <CC_HalMaskInterrupt+0x8>)
    bb82:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    bb86:	4770      	bx	lr
    bb88:	5002b000 	.word	0x5002b000

0000bb8c <CC_PalInit>:
    bb8c:	b510      	push	{r4, lr}
    bb8e:	4811      	ldr	r0, [pc, #68]	; (bbd4 <CC_PalInit+0x48>)
    bb90:	f000 f848 	bl	bc24 <CC_PalMutexCreate>
    bb94:	b100      	cbz	r0, bb98 <CC_PalInit+0xc>
    bb96:	bd10      	pop	{r4, pc}
    bb98:	480f      	ldr	r0, [pc, #60]	; (bbd8 <CC_PalInit+0x4c>)
    bb9a:	f000 f843 	bl	bc24 <CC_PalMutexCreate>
    bb9e:	2800      	cmp	r0, #0
    bba0:	d1f9      	bne.n	bb96 <CC_PalInit+0xa>
    bba2:	4c0e      	ldr	r4, [pc, #56]	; (bbdc <CC_PalInit+0x50>)
    bba4:	4620      	mov	r0, r4
    bba6:	f000 f83d 	bl	bc24 <CC_PalMutexCreate>
    bbaa:	2800      	cmp	r0, #0
    bbac:	d1f3      	bne.n	bb96 <CC_PalInit+0xa>
    bbae:	4b0c      	ldr	r3, [pc, #48]	; (bbe0 <CC_PalInit+0x54>)
    bbb0:	480c      	ldr	r0, [pc, #48]	; (bbe4 <CC_PalInit+0x58>)
    bbb2:	601c      	str	r4, [r3, #0]
    bbb4:	f000 f836 	bl	bc24 <CC_PalMutexCreate>
    bbb8:	4601      	mov	r1, r0
    bbba:	2800      	cmp	r0, #0
    bbbc:	d1eb      	bne.n	bb96 <CC_PalInit+0xa>
    bbbe:	f000 f82d 	bl	bc1c <CC_PalDmaInit>
    bbc2:	4604      	mov	r4, r0
    bbc4:	b108      	cbz	r0, bbca <CC_PalInit+0x3e>
    bbc6:	4620      	mov	r0, r4
    bbc8:	bd10      	pop	{r4, pc}
    bbca:	f000 f83f 	bl	bc4c <CC_PalPowerSaveModeInit>
    bbce:	4620      	mov	r0, r4
    bbd0:	e7fa      	b.n	bbc8 <CC_PalInit+0x3c>
    bbd2:	bf00      	nop
    bbd4:	200001d4 	.word	0x200001d4
    bbd8:	200001c8 	.word	0x200001c8
    bbdc:	200001d0 	.word	0x200001d0
    bbe0:	200001d8 	.word	0x200001d8
    bbe4:	200001cc 	.word	0x200001cc

0000bbe8 <CC_PalTerminate>:
    bbe8:	b508      	push	{r3, lr}
    bbea:	4808      	ldr	r0, [pc, #32]	; (bc0c <CC_PalTerminate+0x24>)
    bbec:	f000 f824 	bl	bc38 <CC_PalMutexDestroy>
    bbf0:	4807      	ldr	r0, [pc, #28]	; (bc10 <CC_PalTerminate+0x28>)
    bbf2:	f000 f821 	bl	bc38 <CC_PalMutexDestroy>
    bbf6:	4807      	ldr	r0, [pc, #28]	; (bc14 <CC_PalTerminate+0x2c>)
    bbf8:	f000 f81e 	bl	bc38 <CC_PalMutexDestroy>
    bbfc:	4806      	ldr	r0, [pc, #24]	; (bc18 <CC_PalTerminate+0x30>)
    bbfe:	f000 f81b 	bl	bc38 <CC_PalMutexDestroy>
    bc02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bc06:	f000 b80b 	b.w	bc20 <CC_PalDmaTerminate>
    bc0a:	bf00      	nop
    bc0c:	200001d4 	.word	0x200001d4
    bc10:	200001c8 	.word	0x200001c8
    bc14:	200001d0 	.word	0x200001d0
    bc18:	200001cc 	.word	0x200001cc

0000bc1c <CC_PalDmaInit>:
    bc1c:	2000      	movs	r0, #0
    bc1e:	4770      	bx	lr

0000bc20 <CC_PalDmaTerminate>:
    bc20:	4770      	bx	lr
    bc22:	bf00      	nop

0000bc24 <CC_PalMutexCreate>:
    bc24:	b508      	push	{r3, lr}
    bc26:	4b03      	ldr	r3, [pc, #12]	; (bc34 <CC_PalMutexCreate+0x10>)
    bc28:	6802      	ldr	r2, [r0, #0]
    bc2a:	681b      	ldr	r3, [r3, #0]
    bc2c:	6810      	ldr	r0, [r2, #0]
    bc2e:	4798      	blx	r3
    bc30:	2000      	movs	r0, #0
    bc32:	bd08      	pop	{r3, pc}
    bc34:	2000018c 	.word	0x2000018c

0000bc38 <CC_PalMutexDestroy>:
    bc38:	b508      	push	{r3, lr}
    bc3a:	4b03      	ldr	r3, [pc, #12]	; (bc48 <CC_PalMutexDestroy+0x10>)
    bc3c:	6802      	ldr	r2, [r0, #0]
    bc3e:	685b      	ldr	r3, [r3, #4]
    bc40:	6810      	ldr	r0, [r2, #0]
    bc42:	4798      	blx	r3
    bc44:	2000      	movs	r0, #0
    bc46:	bd08      	pop	{r3, pc}
    bc48:	2000018c 	.word	0x2000018c

0000bc4c <CC_PalPowerSaveModeInit>:
    bc4c:	b570      	push	{r4, r5, r6, lr}
    bc4e:	4c09      	ldr	r4, [pc, #36]	; (bc74 <CC_PalPowerSaveModeInit+0x28>)
    bc50:	4d09      	ldr	r5, [pc, #36]	; (bc78 <CC_PalPowerSaveModeInit+0x2c>)
    bc52:	6920      	ldr	r0, [r4, #16]
    bc54:	68ab      	ldr	r3, [r5, #8]
    bc56:	4798      	blx	r3
    bc58:	b118      	cbz	r0, bc62 <CC_PalPowerSaveModeInit+0x16>
    bc5a:	4b08      	ldr	r3, [pc, #32]	; (bc7c <CC_PalPowerSaveModeInit+0x30>)
    bc5c:	4808      	ldr	r0, [pc, #32]	; (bc80 <CC_PalPowerSaveModeInit+0x34>)
    bc5e:	685b      	ldr	r3, [r3, #4]
    bc60:	4798      	blx	r3
    bc62:	4a08      	ldr	r2, [pc, #32]	; (bc84 <CC_PalPowerSaveModeInit+0x38>)
    bc64:	68eb      	ldr	r3, [r5, #12]
    bc66:	6920      	ldr	r0, [r4, #16]
    bc68:	2100      	movs	r1, #0
    bc6a:	6011      	str	r1, [r2, #0]
    bc6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc70:	4718      	bx	r3
    bc72:	bf00      	nop
    bc74:	2000019c 	.word	0x2000019c
    bc78:	2000018c 	.word	0x2000018c
    bc7c:	2000017c 	.word	0x2000017c
    bc80:	0000f864 	.word	0x0000f864
    bc84:	200011c8 	.word	0x200011c8

0000bc88 <CC_PalPowerSaveModeSelect>:
    bc88:	b570      	push	{r4, r5, r6, lr}
    bc8a:	4d1b      	ldr	r5, [pc, #108]	; (bcf8 <CC_PalPowerSaveModeSelect+0x70>)
    bc8c:	4e1b      	ldr	r6, [pc, #108]	; (bcfc <CC_PalPowerSaveModeSelect+0x74>)
    bc8e:	4604      	mov	r4, r0
    bc90:	68b2      	ldr	r2, [r6, #8]
    bc92:	6928      	ldr	r0, [r5, #16]
    bc94:	4790      	blx	r2
    bc96:	b9f8      	cbnz	r0, bcd8 <CC_PalPowerSaveModeSelect+0x50>
    bc98:	b15c      	cbz	r4, bcb2 <CC_PalPowerSaveModeSelect+0x2a>
    bc9a:	4c19      	ldr	r4, [pc, #100]	; (bd00 <CC_PalPowerSaveModeSelect+0x78>)
    bc9c:	6823      	ldr	r3, [r4, #0]
    bc9e:	b1b3      	cbz	r3, bcce <CC_PalPowerSaveModeSelect+0x46>
    bca0:	2b01      	cmp	r3, #1
    bca2:	d01b      	beq.n	bcdc <CC_PalPowerSaveModeSelect+0x54>
    bca4:	3b01      	subs	r3, #1
    bca6:	6023      	str	r3, [r4, #0]
    bca8:	6928      	ldr	r0, [r5, #16]
    bcaa:	68f3      	ldr	r3, [r6, #12]
    bcac:	4798      	blx	r3
    bcae:	2000      	movs	r0, #0
    bcb0:	bd70      	pop	{r4, r5, r6, pc}
    bcb2:	4c13      	ldr	r4, [pc, #76]	; (bd00 <CC_PalPowerSaveModeSelect+0x78>)
    bcb4:	6821      	ldr	r1, [r4, #0]
    bcb6:	b941      	cbnz	r1, bcca <CC_PalPowerSaveModeSelect+0x42>
    bcb8:	4b12      	ldr	r3, [pc, #72]	; (bd04 <CC_PalPowerSaveModeSelect+0x7c>)
    bcba:	2201      	movs	r2, #1
    bcbc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    bcc0:	4a11      	ldr	r2, [pc, #68]	; (bd08 <CC_PalPowerSaveModeSelect+0x80>)
    bcc2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	d1fb      	bne.n	bcc2 <CC_PalPowerSaveModeSelect+0x3a>
    bcca:	3101      	adds	r1, #1
    bccc:	6021      	str	r1, [r4, #0]
    bcce:	68f3      	ldr	r3, [r6, #12]
    bcd0:	6928      	ldr	r0, [r5, #16]
    bcd2:	4798      	blx	r3
    bcd4:	2000      	movs	r0, #0
    bcd6:	bd70      	pop	{r4, r5, r6, pc}
    bcd8:	480c      	ldr	r0, [pc, #48]	; (bd0c <CC_PalPowerSaveModeSelect+0x84>)
    bcda:	bd70      	pop	{r4, r5, r6, pc}
    bcdc:	4a0a      	ldr	r2, [pc, #40]	; (bd08 <CC_PalPowerSaveModeSelect+0x80>)
    bcde:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    bce2:	2b00      	cmp	r3, #0
    bce4:	d1fb      	bne.n	bcde <CC_PalPowerSaveModeSelect+0x56>
    bce6:	4a07      	ldr	r2, [pc, #28]	; (bd04 <CC_PalPowerSaveModeSelect+0x7c>)
    bce8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    bcec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    bcf0:	f7ff ff46 	bl	bb80 <CC_HalMaskInterrupt>
    bcf4:	6823      	ldr	r3, [r4, #0]
    bcf6:	e7d5      	b.n	bca4 <CC_PalPowerSaveModeSelect+0x1c>
    bcf8:	2000019c 	.word	0x2000019c
    bcfc:	2000018c 	.word	0x2000018c
    bd00:	200011c8 	.word	0x200011c8
    bd04:	5002a000 	.word	0x5002a000
    bd08:	5002b000 	.word	0x5002b000
    bd0c:	ffff8fe9 	.word	0xffff8fe9

0000bd10 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    bd10:	4770      	bx	lr

0000bd12 <gpio_pin_configure_dt>:
{
    bd12:	b508      	push	{r3, lr}
    bd14:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    bd16:	6800      	ldr	r0, [r0, #0]
    bd18:	f893 c004 	ldrb.w	ip, [r3, #4]
				  spec->dt_flags | extra_flags);
    bd1c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    bd1e:	430a      	orrs	r2, r1
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    bd20:	4661      	mov	r1, ip
    bd22:	f7f4 fd6d 	bl	800 <z_impl_gpio_pin_configure>
}
    bd26:	bd08      	pop	{r3, pc}

0000bd28 <precedentsAverage>:
}

int precedentsAverage(uint16_t *precedents, uint16_t current_read, uint16_t precedents_size)
{
    int sum = 0;
    for (uint16_t i = 0; i < precedents_size; i++)
    bd28:	2300      	movs	r3, #0
    int sum = 0;
    bd2a:	469c      	mov	ip, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    bd2c:	4293      	cmp	r3, r2
    bd2e:	d20e      	bcs.n	bd4e <precedentsAverage+0x26>
{
    bd30:	b500      	push	{lr}
        sum += precedents[i];
    bd32:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
    bd36:	44f4      	add	ip, lr
    for (uint16_t i = 0; i < precedents_size; i++)
    bd38:	3301      	adds	r3, #1
    bd3a:	b29b      	uxth	r3, r3
    bd3c:	4293      	cmp	r3, r2
    bd3e:	d3f8      	bcc.n	bd32 <precedentsAverage+0xa>
    return (sum + current_read) / (precedents_size + 1);
    bd40:	eb01 000c 	add.w	r0, r1, ip
    bd44:	3201      	adds	r2, #1
}
    bd46:	fb90 f0f2 	sdiv	r0, r0, r2
    bd4a:	f85d fb04 	ldr.w	pc, [sp], #4
    return (sum + current_read) / (precedents_size + 1);
    bd4e:	18c8      	adds	r0, r1, r3
    bd50:	3201      	adds	r2, #1
}
    bd52:	fb90 f0f2 	sdiv	r0, r0, r2
    bd56:	4770      	bx	lr

0000bd58 <cbprintf_via_va_list>:
{
    bd58:	b510      	push	{r4, lr}
    bd5a:	460c      	mov	r4, r1
    bd5c:	4611      	mov	r1, r2
    bd5e:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    bd60:	9b02      	ldr	r3, [sp, #8]
    bd62:	47a0      	blx	r4
}
    bd64:	bd10      	pop	{r4, pc}

0000bd66 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    bd66:	b353      	cbz	r3, bdbe <cbpprintf_external+0x58>
{
    bd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd6c:	b082      	sub	sp, #8
    bd6e:	4607      	mov	r7, r0
    bd70:	4688      	mov	r8, r1
    bd72:	4691      	mov	r9, r2
    bd74:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    bd76:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    bd78:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    bd7a:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    bd7c:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    bd7e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bd82:	441c      	add	r4, r3
    bd84:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    bd86:	f04f 0a00 	mov.w	sl, #0
    bd8a:	e00a      	b.n	bda2 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    bd8c:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    bd90:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    bd94:	4620      	mov	r0, r4
    bd96:	f000 fb31 	bl	c3fc <strlen>
    bd9a:	3001      	adds	r0, #1
    bd9c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    bd9e:	f10a 0a01 	add.w	sl, sl, #1
    bda2:	45b2      	cmp	sl, r6
    bda4:	d3f2      	bcc.n	bd8c <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    bda6:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    bdaa:	9300      	str	r3, [sp, #0]
    bdac:	686b      	ldr	r3, [r5, #4]
    bdae:	464a      	mov	r2, r9
    bdb0:	4641      	mov	r1, r8
    bdb2:	4638      	mov	r0, r7
    bdb4:	f7ff ffd0 	bl	bd58 <cbprintf_via_va_list>
}
    bdb8:	b002      	add	sp, #8
    bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    bdbe:	f06f 0015 	mvn.w	r0, #21
}
    bdc2:	4770      	bx	lr

0000bdc4 <sys_notify_validate>:
	if (notify == NULL) {
    bdc4:	4602      	mov	r2, r0
    bdc6:	b158      	cbz	r0, bde0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bdc8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bdca:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    bdce:	2b01      	cmp	r3, #1
    bdd0:	d003      	beq.n	bdda <sys_notify_validate+0x16>
    bdd2:	2b03      	cmp	r3, #3
    bdd4:	d107      	bne.n	bde6 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    bdd6:	6803      	ldr	r3, [r0, #0]
    bdd8:	b143      	cbz	r3, bdec <sys_notify_validate+0x28>
		notify->result = 0;
    bdda:	2000      	movs	r0, #0
    bddc:	6090      	str	r0, [r2, #8]
    bdde:	4770      	bx	lr
		return -EINVAL;
    bde0:	f06f 0015 	mvn.w	r0, #21
    bde4:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    bde6:	f06f 0015 	mvn.w	r0, #21
    bdea:	4770      	bx	lr
			rv = -EINVAL;
    bdec:	f06f 0015 	mvn.w	r0, #21
}
    bdf0:	4770      	bx	lr

0000bdf2 <arch_printk_char_out>:
}
    bdf2:	2000      	movs	r0, #0
    bdf4:	4770      	bx	lr

0000bdf6 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    bdf6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    bdf8:	f000 f99d 	bl	c136 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    bdfc:	bd08      	pop	{r3, pc}

0000bdfe <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    bdfe:	b40f      	push	{r0, r1, r2, r3}
    be00:	b500      	push	{lr}
    be02:	b083      	sub	sp, #12
    be04:	a904      	add	r1, sp, #16
    be06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    be0a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    be0c:	f7ff fff3 	bl	bdf6 <vprintk>

	va_end(ap);
}
    be10:	b003      	add	sp, #12
    be12:	f85d eb04 	ldr.w	lr, [sp], #4
    be16:	b004      	add	sp, #16
    be18:	4770      	bx	lr

0000be1a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    be1a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    be1e:	8b81      	ldrh	r1, [r0, #28]
    be20:	f021 0107 	bic.w	r1, r1, #7
    be24:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    be26:	8381      	strh	r1, [r0, #28]
}
    be28:	4770      	bx	lr

0000be2a <notify_monitors>:
{
    be2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be2e:	4606      	mov	r6, r0
    be30:	460f      	mov	r7, r1
    be32:	4690      	mov	r8, r2
	return list->head;
    be34:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    be36:	b119      	cbz	r1, be40 <notify_monitors+0x16>
    be38:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    be3a:	b131      	cbz	r1, be4a <notify_monitors+0x20>
	return node->next;
    be3c:	680c      	ldr	r4, [r1, #0]
    be3e:	e004      	b.n	be4a <notify_monitors+0x20>
    be40:	460c      	mov	r4, r1
    be42:	e002      	b.n	be4a <notify_monitors+0x20>
    be44:	4623      	mov	r3, r4
    be46:	4621      	mov	r1, r4
    be48:	461c      	mov	r4, r3
    be4a:	b159      	cbz	r1, be64 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    be4c:	684d      	ldr	r5, [r1, #4]
    be4e:	4643      	mov	r3, r8
    be50:	463a      	mov	r2, r7
    be52:	4630      	mov	r0, r6
    be54:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    be56:	2c00      	cmp	r4, #0
    be58:	d0f4      	beq.n	be44 <notify_monitors+0x1a>
    be5a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    be5c:	2c00      	cmp	r4, #0
    be5e:	d0f2      	beq.n	be46 <notify_monitors+0x1c>
	return node->next;
    be60:	6823      	ldr	r3, [r4, #0]
    be62:	e7f0      	b.n	be46 <notify_monitors+0x1c>
}
    be64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be68 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    be68:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    be6a:	f013 0307 	ands.w	r3, r3, #7
    be6e:	d103      	bne.n	be78 <process_recheck+0x10>
	return list->head;
    be70:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    be72:	b10a      	cbz	r2, be78 <process_recheck+0x10>
		evt = EVT_START;
    be74:	2003      	movs	r0, #3
    be76:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    be78:	2b02      	cmp	r3, #2
    be7a:	d003      	beq.n	be84 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    be7c:	2b01      	cmp	r3, #1
    be7e:	d006      	beq.n	be8e <process_recheck+0x26>
	int evt = EVT_NOP;
    be80:	2000      	movs	r0, #0
    be82:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    be84:	8bc2      	ldrh	r2, [r0, #30]
    be86:	2a00      	cmp	r2, #0
    be88:	d1f8      	bne.n	be7c <process_recheck+0x14>
		evt = EVT_STOP;
    be8a:	2004      	movs	r0, #4
    be8c:	4770      	bx	lr
    be8e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    be90:	b10b      	cbz	r3, be96 <process_recheck+0x2e>
		evt = EVT_RESET;
    be92:	2005      	movs	r0, #5
}
    be94:	4770      	bx	lr
	int evt = EVT_NOP;
    be96:	2000      	movs	r0, #0
    be98:	4770      	bx	lr

0000be9a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    be9a:	b158      	cbz	r0, beb4 <validate_args+0x1a>
{
    be9c:	b510      	push	{r4, lr}
    be9e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bea0:	b159      	cbz	r1, beba <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    bea2:	1d08      	adds	r0, r1, #4
    bea4:	f7ff ff8e 	bl	bdc4 <sys_notify_validate>
	if ((rv == 0)
    bea8:	b918      	cbnz	r0, beb2 <validate_args+0x18>
	    && ((cli->notify.flags
    beaa:	68a3      	ldr	r3, [r4, #8]
    beac:	f033 0303 	bics.w	r3, r3, #3
    beb0:	d106      	bne.n	bec0 <validate_args+0x26>
}
    beb2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    beb4:	f06f 0015 	mvn.w	r0, #21
}
    beb8:	4770      	bx	lr
		return -EINVAL;
    beba:	f06f 0015 	mvn.w	r0, #21
    bebe:	e7f8      	b.n	beb2 <validate_args+0x18>
		rv = -EINVAL;
    bec0:	f06f 0015 	mvn.w	r0, #21
    bec4:	e7f5      	b.n	beb2 <validate_args+0x18>

0000bec6 <notify_one>:
{
    bec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beca:	4607      	mov	r7, r0
    becc:	460c      	mov	r4, r1
    bece:	4616      	mov	r6, r2
    bed0:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bed2:	4619      	mov	r1, r3
    bed4:	1d20      	adds	r0, r4, #4
    bed6:	f7f6 fa13 	bl	2300 <sys_notify_finalize>
	if (cb) {
    beda:	b128      	cbz	r0, bee8 <notify_one+0x22>
    bedc:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    bede:	462b      	mov	r3, r5
    bee0:	4632      	mov	r2, r6
    bee2:	4621      	mov	r1, r4
    bee4:	4638      	mov	r0, r7
    bee6:	47c0      	blx	r8
}
    bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000beec <notify_all>:
{
    beec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bef0:	4680      	mov	r8, r0
    bef2:	460c      	mov	r4, r1
    bef4:	4617      	mov	r7, r2
    bef6:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    bef8:	e004      	b.n	bf04 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    befa:	4633      	mov	r3, r6
    befc:	463a      	mov	r2, r7
    befe:	4640      	mov	r0, r8
    bf00:	f7ff ffe1 	bl	bec6 <notify_one>
    bf04:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    bf06:	b131      	cbz	r1, bf16 <notify_all+0x2a>
	return node->next;
    bf08:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    bf0a:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bf0c:	6863      	ldr	r3, [r4, #4]
    bf0e:	428b      	cmp	r3, r1
    bf10:	d1f3      	bne.n	befa <notify_all+0xe>
	list->tail = node;
    bf12:	6065      	str	r5, [r4, #4]
}
    bf14:	e7f1      	b.n	befa <notify_all+0xe>
}
    bf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bf1a <onoff_manager_init>:
	if ((mgr == NULL)
    bf1a:	b170      	cbz	r0, bf3a <onoff_manager_init+0x20>
{
    bf1c:	b538      	push	{r3, r4, r5, lr}
    bf1e:	460c      	mov	r4, r1
    bf20:	4605      	mov	r5, r0
	    || (transitions == NULL)
    bf22:	b169      	cbz	r1, bf40 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    bf24:	680b      	ldr	r3, [r1, #0]
    bf26:	b173      	cbz	r3, bf46 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    bf28:	684b      	ldr	r3, [r1, #4]
    bf2a:	b17b      	cbz	r3, bf4c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bf2c:	2220      	movs	r2, #32
    bf2e:	2100      	movs	r1, #0
    bf30:	f000 fab1 	bl	c496 <memset>
    bf34:	612c      	str	r4, [r5, #16]
	return 0;
    bf36:	2000      	movs	r0, #0
}
    bf38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bf3a:	f06f 0015 	mvn.w	r0, #21
}
    bf3e:	4770      	bx	lr
		return -EINVAL;
    bf40:	f06f 0015 	mvn.w	r0, #21
    bf44:	e7f8      	b.n	bf38 <onoff_manager_init+0x1e>
    bf46:	f06f 0015 	mvn.w	r0, #21
    bf4a:	e7f5      	b.n	bf38 <onoff_manager_init+0x1e>
    bf4c:	f06f 0015 	mvn.w	r0, #21
    bf50:	e7f2      	b.n	bf38 <onoff_manager_init+0x1e>

0000bf52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bf52:	b508      	push	{r3, lr}
    bf54:	4604      	mov	r4, r0
    bf56:	4608      	mov	r0, r1
    bf58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bf5a:	461a      	mov	r2, r3
    bf5c:	47a0      	blx	r4
	return z_impl_z_current_get();
    bf5e:	f7fe ff7f 	bl	ae60 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bf62:	f7f8 ffd1 	bl	4f08 <z_impl_k_thread_abort>

0000bf66 <free_list_add_bidx>:
{
    bf66:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    bf68:	1d13      	adds	r3, r2, #4
    bf6a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bf6e:	b97c      	cbnz	r4, bf90 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    bf70:	2301      	movs	r3, #1
    bf72:	fa03 f402 	lsl.w	r4, r3, r2
    bf76:	68c3      	ldr	r3, [r0, #12]
    bf78:	4323      	orrs	r3, r4
    bf7a:	60c3      	str	r3, [r0, #12]
		b->next = c;
    bf7c:	3204      	adds	r2, #4
    bf7e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    bf82:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    bf84:	1d1a      	adds	r2, r3, #4
    bf86:	b289      	uxth	r1, r1
    bf88:	5281      	strh	r1, [r0, r2]
    bf8a:	3306      	adds	r3, #6
    bf8c:	52c1      	strh	r1, [r0, r3]
}
    bf8e:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    bf90:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    bf92:	3204      	adds	r2, #4
    bf94:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    bf96:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    bf9a:	f10c 0e04 	add.w	lr, ip, #4
    bf9e:	f820 300e 	strh.w	r3, [r0, lr]
    bfa2:	f10c 0c06 	add.w	ip, ip, #6
    bfa6:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    bfaa:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    bfac:	3306      	adds	r3, #6
    bfae:	b289      	uxth	r1, r1
    bfb0:	52c1      	strh	r1, [r0, r3]
    bfb2:	5281      	strh	r1, [r0, r2]
    bfb4:	e7eb      	b.n	bf8e <free_list_add_bidx+0x28>

0000bfb6 <free_list_add>:
{
    bfb6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    bfb8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    bfbc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bfbe:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    bfc0:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    bfc4:	f1c2 021f 	rsb	r2, r2, #31
    bfc8:	f7ff ffcd 	bl	bf66 <free_list_add_bidx>
}
    bfcc:	bd08      	pop	{r3, pc}

0000bfce <extract_decimal>:
{
    bfce:	4684      	mov	ip, r0
	const char *sp = *str;
    bfd0:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    bfd2:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    bfd4:	e005      	b.n	bfe2 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    bfd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    bfda:	3201      	adds	r2, #1
    bfdc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    bfe0:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    bfe2:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    bfe4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    bfe8:	2909      	cmp	r1, #9
    bfea:	d9f4      	bls.n	bfd6 <extract_decimal+0x8>
	*str = sp;
    bfec:	f8cc 2000 	str.w	r2, [ip]
}
    bff0:	4770      	bx	lr

0000bff2 <encode_uint>:
{
    bff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bff6:	b083      	sub	sp, #12
    bff8:	4604      	mov	r4, r0
    bffa:	460d      	mov	r5, r1
    bffc:	9201      	str	r2, [sp, #4]
    bffe:	469a      	mov	sl, r3
    c000:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c002:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c004:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c008:	2b6f      	cmp	r3, #111	; 0x6f
    c00a:	d00f      	beq.n	c02c <encode_uint+0x3a>
    c00c:	d906      	bls.n	c01c <encode_uint+0x2a>
    c00e:	2b70      	cmp	r3, #112	; 0x70
    c010:	d00f      	beq.n	c032 <encode_uint+0x40>
    c012:	2b78      	cmp	r3, #120	; 0x78
    c014:	d110      	bne.n	c038 <encode_uint+0x46>
		return 16;
    c016:	f04f 0910 	mov.w	r9, #16
    c01a:	e026      	b.n	c06a <encode_uint+0x78>
	switch (specifier) {
    c01c:	2b58      	cmp	r3, #88	; 0x58
    c01e:	d002      	beq.n	c026 <encode_uint+0x34>
    c020:	f04f 090a 	mov.w	r9, #10
    c024:	e021      	b.n	c06a <encode_uint+0x78>
		return 16;
    c026:	f04f 0910 	mov.w	r9, #16
    c02a:	e01e      	b.n	c06a <encode_uint+0x78>
		return 8;
    c02c:	f04f 0908 	mov.w	r9, #8
    c030:	e01b      	b.n	c06a <encode_uint+0x78>
		return 16;
    c032:	f04f 0910 	mov.w	r9, #16
    c036:	e018      	b.n	c06a <encode_uint+0x78>
	switch (specifier) {
    c038:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c03c:	e015      	b.n	c06a <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c03e:	f1bb 0f19 	cmp.w	fp, #25
    c042:	d821      	bhi.n	c088 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c044:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c046:	3237      	adds	r2, #55	; 0x37
    c048:	b2d2      	uxtb	r2, r2
    c04a:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    c04e:	463a      	mov	r2, r7
    c050:	4643      	mov	r3, r8
    c052:	4620      	mov	r0, r4
    c054:	4629      	mov	r1, r5
    c056:	f7f4 fa35 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c05a:	42bc      	cmp	r4, r7
    c05c:	f175 0300 	sbcs.w	r3, r5, #0
    c060:	d316      	bcc.n	c090 <encode_uint+0x9e>
    c062:	4556      	cmp	r6, sl
    c064:	d914      	bls.n	c090 <encode_uint+0x9e>
		value /= radix;
    c066:	4604      	mov	r4, r0
    c068:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c06a:	f04f 0800 	mov.w	r8, #0
    c06e:	464f      	mov	r7, r9
    c070:	464a      	mov	r2, r9
    c072:	4643      	mov	r3, r8
    c074:	4620      	mov	r0, r4
    c076:	4629      	mov	r1, r5
    c078:	f7f4 fa24 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c07c:	2a09      	cmp	r2, #9
    c07e:	d8de      	bhi.n	c03e <encode_uint+0x4c>
    c080:	b2d2      	uxtb	r2, r2
    c082:	3230      	adds	r2, #48	; 0x30
    c084:	b2d2      	uxtb	r2, r2
    c086:	e7e0      	b.n	c04a <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c088:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c08a:	3257      	adds	r2, #87	; 0x57
    c08c:	b2d2      	uxtb	r2, r2
    c08e:	e7dc      	b.n	c04a <encode_uint+0x58>
	if (conv->flag_hash) {
    c090:	9b01      	ldr	r3, [sp, #4]
    c092:	781b      	ldrb	r3, [r3, #0]
    c094:	f013 0f20 	tst.w	r3, #32
    c098:	d005      	beq.n	c0a6 <encode_uint+0xb4>
		if (radix == 8) {
    c09a:	f1b9 0f08 	cmp.w	r9, #8
    c09e:	d006      	beq.n	c0ae <encode_uint+0xbc>
		} else if (radix == 16) {
    c0a0:	f1b9 0f10 	cmp.w	r9, #16
    c0a4:	d009      	beq.n	c0ba <encode_uint+0xc8>
}
    c0a6:	4630      	mov	r0, r6
    c0a8:	b003      	add	sp, #12
    c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c0ae:	9a01      	ldr	r2, [sp, #4]
    c0b0:	7893      	ldrb	r3, [r2, #2]
    c0b2:	f043 0308 	orr.w	r3, r3, #8
    c0b6:	7093      	strb	r3, [r2, #2]
    c0b8:	e7f5      	b.n	c0a6 <encode_uint+0xb4>
			conv->altform_0c = true;
    c0ba:	9a01      	ldr	r2, [sp, #4]
    c0bc:	7893      	ldrb	r3, [r2, #2]
    c0be:	f043 0310 	orr.w	r3, r3, #16
    c0c2:	7093      	strb	r3, [r2, #2]
    c0c4:	e7ef      	b.n	c0a6 <encode_uint+0xb4>

0000c0c6 <outs>:
{
    c0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0ca:	4607      	mov	r7, r0
    c0cc:	460e      	mov	r6, r1
    c0ce:	4614      	mov	r4, r2
    c0d0:	4698      	mov	r8, r3
	size_t count = 0;
    c0d2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c0d4:	e006      	b.n	c0e4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c0d6:	4631      	mov	r1, r6
    c0d8:	f814 0b01 	ldrb.w	r0, [r4], #1
    c0dc:	47b8      	blx	r7
		if (rc < 0) {
    c0de:	2800      	cmp	r0, #0
    c0e0:	db09      	blt.n	c0f6 <outs+0x30>
		++count;
    c0e2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c0e4:	4544      	cmp	r4, r8
    c0e6:	d3f6      	bcc.n	c0d6 <outs+0x10>
    c0e8:	f1b8 0f00 	cmp.w	r8, #0
    c0ec:	d102      	bne.n	c0f4 <outs+0x2e>
    c0ee:	7823      	ldrb	r3, [r4, #0]
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d1f0      	bne.n	c0d6 <outs+0x10>
	return (int)count;
    c0f4:	4628      	mov	r0, r5
}
    c0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c0fa <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    c0fa:	4040      	eors	r0, r0
    c0fc:	f380 8811 	msr	BASEPRI, r0
    c100:	f04f 0004 	mov.w	r0, #4
    c104:	df02      	svc	2
}
    c106:	4770      	bx	lr

0000c108 <assert_print>:

void assert_print(const char *fmt, ...)
{
    c108:	b40f      	push	{r0, r1, r2, r3}
    c10a:	b500      	push	{lr}
    c10c:	b083      	sub	sp, #12
    c10e:	a904      	add	r1, sp, #16
    c110:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    c114:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    c116:	f7ff fe6e 	bl	bdf6 <vprintk>

	va_end(ap);
}
    c11a:	b003      	add	sp, #12
    c11c:	f85d eb04 	ldr.w	lr, [sp], #4
    c120:	b004      	add	sp, #16
    c122:	4770      	bx	lr

0000c124 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    c124:	4770      	bx	lr

0000c126 <dummy_timestamp>:
}
    c126:	2000      	movs	r0, #0
    c128:	4770      	bx	lr

0000c12a <msg_filter_check>:
}
    c12a:	2001      	movs	r0, #1
    c12c:	4770      	bx	lr

0000c12e <default_get_timestamp>:
{
    c12e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c130:	f000 fd80 	bl	cc34 <sys_clock_cycle_get_32>
}
    c134:	bd08      	pop	{r3, pc}

0000c136 <z_log_vprintk>:
{
    c136:	b500      	push	{lr}
    c138:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c13a:	9103      	str	r1, [sp, #12]
    c13c:	9002      	str	r0, [sp, #8]
    c13e:	2000      	movs	r0, #0
    c140:	9001      	str	r0, [sp, #4]
    c142:	9000      	str	r0, [sp, #0]
    c144:	4603      	mov	r3, r0
    c146:	4602      	mov	r2, r0
    c148:	4601      	mov	r1, r0
    c14a:	f7f7 fd17 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c14e:	b005      	add	sp, #20
    c150:	f85d fb04 	ldr.w	pc, [sp], #4

0000c154 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    c154:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    c156:	f7f7 f9e7 	bl	3528 <log_init>
	}

	return 0;
}
    c15a:	2000      	movs	r0, #0
    c15c:	bd08      	pop	{r3, pc}

0000c15e <z_log_get_tag>:
}
    c15e:	2000      	movs	r0, #0
    c160:	4770      	bx	lr

0000c162 <out_func>:
{
    c162:	b500      	push	{lr}
    c164:	b083      	sub	sp, #12
		char x = (char)c;
    c166:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    c16a:	680b      	ldr	r3, [r1, #0]
    c16c:	684a      	ldr	r2, [r1, #4]
    c16e:	6852      	ldr	r2, [r2, #4]
    c170:	2101      	movs	r1, #1
    c172:	f10d 0007 	add.w	r0, sp, #7
    c176:	4798      	blx	r3
}
    c178:	2000      	movs	r0, #0
    c17a:	b003      	add	sp, #12
    c17c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c180 <cr_out_func>:
{
    c180:	b538      	push	{r3, r4, r5, lr}
    c182:	4604      	mov	r4, r0
    c184:	460d      	mov	r5, r1
	out_func(c, ctx);
    c186:	f7ff ffec 	bl	c162 <out_func>
	if (c == '\n') {
    c18a:	2c0a      	cmp	r4, #10
    c18c:	d001      	beq.n	c192 <cr_out_func+0x12>
}
    c18e:	2000      	movs	r0, #0
    c190:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    c192:	4629      	mov	r1, r5
    c194:	200d      	movs	r0, #13
    c196:	f7ff ffe4 	bl	c162 <out_func>
    c19a:	e7f8      	b.n	c18e <cr_out_func+0xe>

0000c19c <buffer_write>:
{
    c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19e:	4607      	mov	r7, r0
    c1a0:	460d      	mov	r5, r1
    c1a2:	4614      	mov	r4, r2
    c1a4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c1a6:	4632      	mov	r2, r6
    c1a8:	4621      	mov	r1, r4
    c1aa:	4628      	mov	r0, r5
    c1ac:	47b8      	blx	r7
		buf += processed;
    c1ae:	4405      	add	r5, r0
	} while (len != 0);
    c1b0:	1a24      	subs	r4, r4, r0
    c1b2:	d1f8      	bne.n	c1a6 <buffer_write+0xa>
}
    c1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c1b6 <color_prefix>:
{
    c1b6:	b508      	push	{r3, lr}
    c1b8:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c1ba:	2201      	movs	r2, #1
    c1bc:	f7f7 fb5a 	bl	3874 <color_print>
}
    c1c0:	bd08      	pop	{r3, pc}

0000c1c2 <color_postfix>:
{
    c1c2:	b508      	push	{r3, lr}
    c1c4:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c1c6:	2200      	movs	r2, #0
    c1c8:	f7f7 fb54 	bl	3874 <color_print>
}
    c1cc:	bd08      	pop	{r3, pc}

0000c1ce <postfix_print>:
{
    c1ce:	b538      	push	{r3, r4, r5, lr}
    c1d0:	4605      	mov	r5, r0
    c1d2:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c1d4:	f001 0101 	and.w	r1, r1, #1
    c1d8:	f7ff fff3 	bl	c1c2 <color_postfix>
	newline_print(output, flags);
    c1dc:	4621      	mov	r1, r4
    c1de:	4628      	mov	r0, r5
    c1e0:	f7f7 fb5e 	bl	38a0 <newline_print>
}
    c1e4:	bd38      	pop	{r3, r4, r5, pc}

0000c1e6 <log_msg2_hexdump>:
{
    c1e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c1ea:	b083      	sub	sp, #12
    c1ec:	4680      	mov	r8, r0
    c1ee:	460e      	mov	r6, r1
    c1f0:	4615      	mov	r5, r2
    c1f2:	461f      	mov	r7, r3
    c1f4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c1f8:	462c      	mov	r4, r5
    c1fa:	2d10      	cmp	r5, #16
    c1fc:	bf28      	it	cs
    c1fe:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    c200:	f8cd 9000 	str.w	r9, [sp]
    c204:	463b      	mov	r3, r7
    c206:	4622      	mov	r2, r4
    c208:	4631      	mov	r1, r6
    c20a:	4640      	mov	r0, r8
    c20c:	f7f7 fb5c 	bl	38c8 <hexdump_line_print>
		data += length;
    c210:	4426      	add	r6, r4
	} while (len);
    c212:	1b2d      	subs	r5, r5, r4
    c214:	d1f0      	bne.n	c1f8 <log_msg2_hexdump+0x12>
}
    c216:	b003      	add	sp, #12
    c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c21c <log_output_flush>:
{
    c21c:	b510      	push	{r4, lr}
    c21e:	4604      	mov	r4, r0
		     output->control_block->offset,
    c220:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c222:	6853      	ldr	r3, [r2, #4]
    c224:	6812      	ldr	r2, [r2, #0]
    c226:	6881      	ldr	r1, [r0, #8]
    c228:	6800      	ldr	r0, [r0, #0]
    c22a:	f7ff ffb7 	bl	c19c <buffer_write>
	output->control_block->offset = 0;
    c22e:	6863      	ldr	r3, [r4, #4]
    c230:	2200      	movs	r2, #0
    c232:	601a      	str	r2, [r3, #0]
}
    c234:	bd10      	pop	{r4, pc}

0000c236 <z_log_msg2_finalize>:
{
    c236:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    c238:	b198      	cbz	r0, c262 <z_log_msg2_finalize+0x2c>
    c23a:	460e      	mov	r6, r1
    c23c:	4614      	mov	r4, r2
    c23e:	4619      	mov	r1, r3
    c240:	4605      	mov	r5, r0
	if (data) {
    c242:	b143      	cbz	r3, c256 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    c244:	f100 0310 	add.w	r3, r0, #16
    c248:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    c24c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    c250:	4418      	add	r0, r3
    c252:	f000 f8f1 	bl	c438 <memcpy>
	msg->hdr.desc = desc;
    c256:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    c258:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    c25a:	4628      	mov	r0, r5
    c25c:	f7f7 fa46 	bl	36ec <z_log_msg2_commit>
}
    c260:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    c262:	f7f7 fa23 	bl	36ac <z_log_dropped>
		return;
    c266:	e7fb      	b.n	c260 <z_log_msg2_finalize+0x2a>

0000c268 <abort_function>:
{
    c268:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c26a:	2000      	movs	r0, #0
    c26c:	f7f7 f8e2 	bl	3434 <sys_reboot>

0000c270 <z_log_msg2_runtime_create>:
{
    c270:	b510      	push	{r4, lr}
    c272:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c274:	ac0b      	add	r4, sp, #44	; 0x2c
    c276:	9405      	str	r4, [sp, #20]
    c278:	9403      	str	r4, [sp, #12]
    c27a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c27c:	9402      	str	r4, [sp, #8]
    c27e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c280:	9401      	str	r4, [sp, #4]
    c282:	9c08      	ldr	r4, [sp, #32]
    c284:	9400      	str	r4, [sp, #0]
    c286:	f7f7 fc79 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c28a:	b006      	add	sp, #24
    c28c:	bd10      	pop	{r4, pc}

0000c28e <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c28e:	b538      	push	{r3, r4, r5, lr}
    c290:	4604      	mov	r4, r0

	if (esf != NULL) {
    c292:	460d      	mov	r5, r1
    c294:	b111      	cbz	r1, c29c <z_arm_fatal_error+0xe>
		esf_dump(esf);
    c296:	4608      	mov	r0, r1
    c298:	f7f8 f894 	bl	43c4 <esf_dump>
	}
	z_fatal_error(reason, esf);
    c29c:	4629      	mov	r1, r5
    c29e:	4620      	mov	r0, r4
    c2a0:	f7fc fbfe 	bl	8aa0 <z_fatal_error>
}
    c2a4:	bd38      	pop	{r3, r4, r5, pc}

0000c2a6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    c2a6:	b508      	push	{r3, lr}
    c2a8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c2aa:	6800      	ldr	r0, [r0, #0]
    c2ac:	f7ff ffef 	bl	c28e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    c2b0:	bd08      	pop	{r3, pc}

0000c2b2 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    c2b2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c2b4:	2100      	movs	r1, #0
    c2b6:	2001      	movs	r0, #1
    c2b8:	f7ff ffe9 	bl	c28e <z_arm_fatal_error>
}
    c2bc:	bd08      	pop	{r3, pc}

0000c2be <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c2be:	b508      	push	{r3, lr}
	handler();
    c2c0:	f7f8 f91c 	bl	44fc <z_SysNmiOnReset>
	z_arm_int_exit();
    c2c4:	f7f8 fa12 	bl	46ec <z_arm_exc_exit>
}
    c2c8:	bd08      	pop	{r3, pc}

0000c2ca <memory_fault_recoverable>:
}
    c2ca:	2000      	movs	r0, #0
    c2cc:	4770      	bx	lr

0000c2ce <z_log_msg2_runtime_create>:
{
    c2ce:	b510      	push	{r4, lr}
    c2d0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c2d2:	ac0b      	add	r4, sp, #44	; 0x2c
    c2d4:	9405      	str	r4, [sp, #20]
    c2d6:	9403      	str	r4, [sp, #12]
    c2d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c2da:	9402      	str	r4, [sp, #8]
    c2dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c2de:	9401      	str	r4, [sp, #4]
    c2e0:	9c08      	ldr	r4, [sp, #32]
    c2e2:	9400      	str	r4, [sp, #0]
    c2e4:	f7f7 fc4a 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c2e8:	b006      	add	sp, #24
    c2ea:	bd10      	pop	{r4, pc}

0000c2ec <fault_handle>:
{
    c2ec:	b508      	push	{r3, lr}
	*recoverable = false;
    c2ee:	2300      	movs	r3, #0
    c2f0:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    c2f2:	1ecb      	subs	r3, r1, #3
    c2f4:	2b09      	cmp	r3, #9
    c2f6:	d81a      	bhi.n	c32e <fault_handle+0x42>
    c2f8:	e8df f003 	tbb	[pc, r3]
    c2fc:	110d0905 	.word	0x110d0905
    c300:	19191919 	.word	0x19191919
    c304:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    c306:	4611      	mov	r1, r2
    c308:	f7f8 fc42 	bl	4b90 <hard_fault>
}
    c30c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    c30e:	2100      	movs	r1, #0
    c310:	f7f8 fb60 	bl	49d4 <mem_manage_fault>
		break;
    c314:	e7fa      	b.n	c30c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    c316:	2100      	movs	r1, #0
    c318:	f7f8 f9f6 	bl	4708 <bus_fault>
		break;
    c31c:	e7f6      	b.n	c30c <fault_handle+0x20>
		reason = usage_fault(esf);
    c31e:	f7f8 fa9b 	bl	4858 <usage_fault>
		break;
    c322:	e7f3      	b.n	c30c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    c324:	4611      	mov	r1, r2
    c326:	f7f8 fb21 	bl	496c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c32a:	2000      	movs	r0, #0
		break;
    c32c:	e7ee      	b.n	c30c <fault_handle+0x20>
		reserved_exception(esf, fault);
    c32e:	f7f8 fb31 	bl	4994 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c332:	2000      	movs	r0, #0
	return reason;
    c334:	e7ea      	b.n	c30c <fault_handle+0x20>

0000c336 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    c336:	6843      	ldr	r3, [r0, #4]
    c338:	1e5a      	subs	r2, r3, #1
		&&
    c33a:	4213      	tst	r3, r2
    c33c:	d106      	bne.n	c34c <mpu_partition_is_valid+0x16>
		&&
    c33e:	2b1f      	cmp	r3, #31
    c340:	d906      	bls.n	c350 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    c342:	6803      	ldr	r3, [r0, #0]
		&&
    c344:	421a      	tst	r2, r3
    c346:	d005      	beq.n	c354 <mpu_partition_is_valid+0x1e>
    c348:	2000      	movs	r0, #0
    c34a:	4770      	bx	lr
    c34c:	2000      	movs	r0, #0
    c34e:	4770      	bx	lr
    c350:	2000      	movs	r0, #0
    c352:	4770      	bx	lr
    c354:	2001      	movs	r0, #1
}
    c356:	4770      	bx	lr

0000c358 <z_log_msg2_runtime_create>:
{
    c358:	b510      	push	{r4, lr}
    c35a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c35c:	ac0b      	add	r4, sp, #44	; 0x2c
    c35e:	9405      	str	r4, [sp, #20]
    c360:	9403      	str	r4, [sp, #12]
    c362:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c364:	9402      	str	r4, [sp, #8]
    c366:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c368:	9401      	str	r4, [sp, #4]
    c36a:	9c08      	ldr	r4, [sp, #32]
    c36c:	9400      	str	r4, [sp, #0]
    c36e:	f7f7 fc05 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c372:	b006      	add	sp, #24
    c374:	bd10      	pop	{r4, pc}

0000c376 <mpu_configure_region>:
{
    c376:	b500      	push	{lr}
    c378:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    c37a:	680b      	ldr	r3, [r1, #0]
    c37c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    c37e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c380:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    c382:	2b20      	cmp	r3, #32
    c384:	d912      	bls.n	c3ac <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    c386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c38a:	d811      	bhi.n	c3b0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c38c:	3b01      	subs	r3, #1
    c38e:	fab3 f383 	clz	r3, r3
    c392:	f1c3 031f 	rsb	r3, r3, #31
    c396:	005b      	lsls	r3, r3, #1
    c398:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c39c:	4313      	orrs	r3, r2
    c39e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    c3a0:	a901      	add	r1, sp, #4
    c3a2:	f7f8 fdff 	bl	4fa4 <region_allocate_and_init>
}
    c3a6:	b005      	add	sp, #20
    c3a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    c3ac:	2308      	movs	r3, #8
    c3ae:	e7f5      	b.n	c39c <mpu_configure_region+0x26>
		return REGION_4G;
    c3b0:	233e      	movs	r3, #62	; 0x3e
    c3b2:	e7f3      	b.n	c39c <mpu_configure_region+0x26>

0000c3b4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    c3b4:	4602      	mov	r2, r0
    c3b6:	e002      	b.n	c3be <strcpy+0xa>
		*d = *s;
    c3b8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    c3bc:	3101      	adds	r1, #1
	while (*s != '\0') {
    c3be:	780b      	ldrb	r3, [r1, #0]
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d1f9      	bne.n	c3b8 <strcpy+0x4>
	}

	*d = '\0';
    c3c4:	7013      	strb	r3, [r2, #0]

	return dest;
}
    c3c6:	4770      	bx	lr

0000c3c8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    c3c8:	4603      	mov	r3, r0
    c3ca:	b1a2      	cbz	r2, c3f6 <strncpy+0x2e>
{
    c3cc:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    c3ce:	780c      	ldrb	r4, [r1, #0]
    c3d0:	b12c      	cbz	r4, c3de <strncpy+0x16>
		*d = *s;
    c3d2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    c3d6:	3101      	adds	r1, #1
		d++;
		n--;
    c3d8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    c3da:	2a00      	cmp	r2, #0
    c3dc:	d1f7      	bne.n	c3ce <strncpy+0x6>
	}

	while (n > 0) {
    c3de:	b122      	cbz	r2, c3ea <strncpy+0x22>
		*d = '\0';
    c3e0:	2100      	movs	r1, #0
    c3e2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    c3e6:	3a01      	subs	r2, #1
    c3e8:	e7f9      	b.n	c3de <strncpy+0x16>
	}

	return dest;
}
    c3ea:	bc10      	pop	{r4}
    c3ec:	4770      	bx	lr
		*d = '\0';
    c3ee:	2100      	movs	r1, #0
    c3f0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c3f4:	3a01      	subs	r2, #1
	while (n > 0) {
    c3f6:	2a00      	cmp	r2, #0
    c3f8:	d1f9      	bne.n	c3ee <strncpy+0x26>
    c3fa:	4770      	bx	lr

0000c3fc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c3fc:	4603      	mov	r3, r0
	size_t n = 0;
    c3fe:	2000      	movs	r0, #0

	while (*s != '\0') {
    c400:	e001      	b.n	c406 <strlen+0xa>
		s++;
    c402:	3301      	adds	r3, #1
		n++;
    c404:	3001      	adds	r0, #1
	while (*s != '\0') {
    c406:	781a      	ldrb	r2, [r3, #0]
    c408:	2a00      	cmp	r2, #0
    c40a:	d1fa      	bne.n	c402 <strlen+0x6>
	}

	return n;
}
    c40c:	4770      	bx	lr

0000c40e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c40e:	4603      	mov	r3, r0
	size_t n = 0;
    c410:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c412:	e001      	b.n	c418 <strnlen+0xa>
		s++;
    c414:	3301      	adds	r3, #1
		n++;
    c416:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    c418:	781a      	ldrb	r2, [r3, #0]
    c41a:	b10a      	cbz	r2, c420 <strnlen+0x12>
    c41c:	4288      	cmp	r0, r1
    c41e:	d3f9      	bcc.n	c414 <strnlen+0x6>
	}

	return n;
}
    c420:	4770      	bx	lr

0000c422 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c422:	e001      	b.n	c428 <strcmp+0x6>
		s1++;
    c424:	3001      	adds	r0, #1
		s2++;
    c426:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c428:	7803      	ldrb	r3, [r0, #0]
    c42a:	780a      	ldrb	r2, [r1, #0]
    c42c:	4293      	cmp	r3, r2
    c42e:	d101      	bne.n	c434 <strcmp+0x12>
    c430:	2b00      	cmp	r3, #0
    c432:	d1f7      	bne.n	c424 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    c434:	1a98      	subs	r0, r3, r2
    c436:	4770      	bx	lr

0000c438 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    c438:	ea80 0301 	eor.w	r3, r0, r1
    c43c:	f013 0f03 	tst.w	r3, #3
    c440:	d001      	beq.n	c446 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    c442:	4603      	mov	r3, r0
    c444:	e023      	b.n	c48e <memcpy+0x56>
    c446:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    c448:	f013 0f03 	tst.w	r3, #3
    c44c:	d00f      	beq.n	c46e <memcpy+0x36>
			if (n == 0) {
    c44e:	b30a      	cbz	r2, c494 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    c450:	f811 cb01 	ldrb.w	ip, [r1], #1
    c454:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    c458:	3a01      	subs	r2, #1
    c45a:	e7f5      	b.n	c448 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    c45c:	f811 cb01 	ldrb.w	ip, [r1], #1
    c460:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c464:	3a01      	subs	r2, #1
	while (n > 0) {
    c466:	2a00      	cmp	r2, #0
    c468:	d1f8      	bne.n	c45c <memcpy+0x24>
	}

	return d;
}
    c46a:	bc10      	pop	{r4}
    c46c:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    c46e:	2a03      	cmp	r2, #3
    c470:	d90d      	bls.n	c48e <memcpy+0x56>
{
    c472:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    c474:	f851 4b04 	ldr.w	r4, [r1], #4
    c478:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    c47c:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    c47e:	2a03      	cmp	r2, #3
    c480:	d8f8      	bhi.n	c474 <memcpy+0x3c>
    c482:	e7f0      	b.n	c466 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    c484:	f811 cb01 	ldrb.w	ip, [r1], #1
    c488:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c48c:	3a01      	subs	r2, #1
	while (n > 0) {
    c48e:	2a00      	cmp	r2, #0
    c490:	d1f8      	bne.n	c484 <memcpy+0x4c>
    c492:	4770      	bx	lr
}
    c494:	4770      	bx	lr

0000c496 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c496:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    c49a:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c49c:	e002      	b.n	c4a4 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    c49e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c4a2:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c4a4:	f013 0f03 	tst.w	r3, #3
    c4a8:	d002      	beq.n	c4b0 <memset+0x1a>
		if (n == 0) {
    c4aa:	2a00      	cmp	r2, #0
    c4ac:	d1f7      	bne.n	c49e <memset+0x8>
    c4ae:	e00f      	b.n	c4d0 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    c4b0:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    c4b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    c4b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    c4ba:	2a03      	cmp	r2, #3
    c4bc:	d906      	bls.n	c4cc <memset+0x36>
		*(d_word++) = c_word;
    c4be:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    c4c2:	3a04      	subs	r2, #4
    c4c4:	e7f9      	b.n	c4ba <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    c4c6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c4ca:	3a01      	subs	r2, #1
	while (n > 0) {
    c4cc:	2a00      	cmp	r2, #0
    c4ce:	d1fa      	bne.n	c4c6 <memset+0x30>
	}

	return buf;
}
    c4d0:	4770      	bx	lr

0000c4d2 <_stdout_hook_default>:
}
    c4d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4d6:	4770      	bx	lr

0000c4d8 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    c4d8:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    c4da:	f7f8 fe97 	bl	520c <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    c4de:	bd08      	pop	{r3, pc}

0000c4e0 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c4e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c4e4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c4e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c4ec:	2a08      	cmp	r2, #8
    c4ee:	d001      	beq.n	c4f4 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    c4f0:	2000      	movs	r0, #0
    c4f2:	4770      	bx	lr
                switch(var2)
    c4f4:	2b02      	cmp	r3, #2
    c4f6:	d001      	beq.n	c4fc <nrf52_errata_197+0x1c>
                        return false;
    c4f8:	2000      	movs	r0, #0
    c4fa:	4770      	bx	lr
                        return true;
    c4fc:	2001      	movs	r0, #1
    #endif
}
    c4fe:	4770      	bx	lr

0000c500 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c500:	2806      	cmp	r0, #6
    c502:	d000      	beq.n	c506 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c504:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c50a:	2201      	movs	r2, #1
    c50c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c510:	f3bf 8f4f 	dsb	sy
        __WFE();
    c514:	bf20      	wfe
    while (true)
    c516:	e7fd      	b.n	c514 <pm_state_set+0x14>

0000c518 <pm_state_exit_post_ops>:
    c518:	2300      	movs	r3, #0
    c51a:	f383 8811 	msr	BASEPRI, r3
    c51e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c522:	4770      	bx	lr

0000c524 <adc_context_on_timer_expired>:
{
    c524:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    c526:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c528:	f3bf 8f5b 	dmb	ish
    c52c:	e850 3f00 	ldrex	r3, [r0]
    c530:	1c5a      	adds	r2, r3, #1
    c532:	e840 2100 	strex	r1, r2, [r0]
    c536:	2900      	cmp	r1, #0
    c538:	d1f8      	bne.n	c52c <adc_context_on_timer_expired+0x8>
    c53a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    c53e:	b11b      	cbz	r3, c548 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    c540:	f06f 030f 	mvn.w	r3, #15
    c544:	6603      	str	r3, [r0, #96]	; 0x60
}
    c546:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    c548:	f7f8 fec8 	bl	52dc <adc_context_start_sampling>
    c54c:	e7fb      	b.n	c546 <adc_context_on_timer_expired+0x22>

0000c54e <z_log_msg2_runtime_create>:
{
    c54e:	b510      	push	{r4, lr}
    c550:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c552:	ac0b      	add	r4, sp, #44	; 0x2c
    c554:	9405      	str	r4, [sp, #20]
    c556:	9403      	str	r4, [sp, #12]
    c558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c55a:	9402      	str	r4, [sp, #8]
    c55c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c55e:	9401      	str	r4, [sp, #4]
    c560:	9c08      	ldr	r4, [sp, #32]
    c562:	9400      	str	r4, [sp, #0]
    c564:	f7f7 fb0a 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c568:	b006      	add	sp, #24
    c56a:	bd10      	pop	{r4, pc}

0000c56c <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    c56c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    c56e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c572:	0089      	lsls	r1, r1, #2
    c574:	3140      	adds	r1, #64	; 0x40
}
    c576:	4408      	add	r0, r1
    c578:	4770      	bx	lr

0000c57a <get_sub_config>:
	const struct nrf_clock_control_config *config =
    c57a:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    c57c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    c580:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c584:	4770      	bx	lr

0000c586 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    c586:	6900      	ldr	r0, [r0, #16]
}
    c588:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    c58c:	4770      	bx	lr

0000c58e <set_off_state>:
	__asm__ volatile(
    c58e:	f04f 0320 	mov.w	r3, #32
    c592:	f3ef 8211 	mrs	r2, BASEPRI
    c596:	f383 8812 	msr	BASEPRI_MAX, r3
    c59a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c59e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c5a0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c5a4:	d001      	beq.n	c5aa <set_off_state+0x1c>
    c5a6:	428b      	cmp	r3, r1
    c5a8:	d107      	bne.n	c5ba <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c5aa:	2301      	movs	r3, #1
    c5ac:	6003      	str	r3, [r0, #0]
	int err = 0;
    c5ae:	2000      	movs	r0, #0
	__asm__ volatile(
    c5b0:	f382 8811 	msr	BASEPRI, r2
    c5b4:	f3bf 8f6f 	isb	sy
}
    c5b8:	4770      	bx	lr
		err = -EPERM;
    c5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c5be:	e7f7      	b.n	c5b0 <set_off_state+0x22>

0000c5c0 <set_starting_state>:
	__asm__ volatile(
    c5c0:	f04f 0320 	mov.w	r3, #32
    c5c4:	f3ef 8211 	mrs	r2, BASEPRI
    c5c8:	f383 8812 	msr	BASEPRI_MAX, r3
    c5cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c5d0:	6803      	ldr	r3, [r0, #0]
    c5d2:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c5d6:	f003 0307 	and.w	r3, r3, #7
    c5da:	2b01      	cmp	r3, #1
    c5dc:	d008      	beq.n	c5f0 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    c5de:	458c      	cmp	ip, r1
    c5e0:	d009      	beq.n	c5f6 <set_starting_state+0x36>
		err = -EPERM;
    c5e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    c5e6:	f382 8811 	msr	BASEPRI, r2
    c5ea:	f3bf 8f6f 	isb	sy
}
    c5ee:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c5f0:	6001      	str	r1, [r0, #0]
	int err = 0;
    c5f2:	2000      	movs	r0, #0
    c5f4:	e7f7      	b.n	c5e6 <set_starting_state+0x26>
		err = -EALREADY;
    c5f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c5fa:	e7f4      	b.n	c5e6 <set_starting_state+0x26>

0000c5fc <set_on_state>:
	__asm__ volatile(
    c5fc:	f04f 0320 	mov.w	r3, #32
    c600:	f3ef 8211 	mrs	r2, BASEPRI
    c604:	f383 8812 	msr	BASEPRI_MAX, r3
    c608:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c60c:	6803      	ldr	r3, [r0, #0]
    c60e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c612:	f043 0302 	orr.w	r3, r3, #2
    c616:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c618:	f382 8811 	msr	BASEPRI, r2
    c61c:	f3bf 8f6f 	isb	sy
}
    c620:	4770      	bx	lr

0000c622 <clkstarted_handle>:
{
    c622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c624:	4606      	mov	r6, r0
    c626:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    c628:	f7ff ffa0 	bl	c56c <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    c62c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    c62e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    c630:	2300      	movs	r3, #0
    c632:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    c636:	f7ff ffe1 	bl	c5fc <set_on_state>
	if (callback) {
    c63a:	b11d      	cbz	r5, c644 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c63c:	463a      	mov	r2, r7
    c63e:	4621      	mov	r1, r4
    c640:	4630      	mov	r0, r6
    c642:	47a8      	blx	r5
}
    c644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c646 <async_start>:
{
    c646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c64a:	4606      	mov	r6, r0
    c64c:	4690      	mov	r8, r2
    c64e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    c650:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c652:	4629      	mov	r1, r5
    c654:	f7ff ff8a 	bl	c56c <get_sub_data>
    c658:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    c65a:	9906      	ldr	r1, [sp, #24]
    c65c:	3008      	adds	r0, #8
    c65e:	f7ff ffaf 	bl	c5c0 <set_starting_state>
	if (err < 0) {
    c662:	2800      	cmp	r0, #0
    c664:	db09      	blt.n	c67a <async_start+0x34>
	subdata->cb = cb;
    c666:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    c66a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    c66c:	4629      	mov	r1, r5
    c66e:	4630      	mov	r0, r6
    c670:	f7ff ff83 	bl	c57a <get_sub_config>
    c674:	6803      	ldr	r3, [r0, #0]
    c676:	4798      	blx	r3
	return 0;
    c678:	2000      	movs	r0, #0
}
    c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c67e <api_start>:
{
    c67e:	b510      	push	{r4, lr}
    c680:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c682:	2480      	movs	r4, #128	; 0x80
    c684:	9400      	str	r4, [sp, #0]
    c686:	f7ff ffde 	bl	c646 <async_start>
}
    c68a:	b002      	add	sp, #8
    c68c:	bd10      	pop	{r4, pc}

0000c68e <onoff_started_callback>:
{
    c68e:	b510      	push	{r4, lr}
    c690:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    c692:	b2c9      	uxtb	r1, r1
    c694:	f7ff ff77 	bl	c586 <get_onoff_manager>
	notify(mgr, 0);
    c698:	2100      	movs	r1, #0
    c69a:	47a0      	blx	r4
}
    c69c:	bd10      	pop	{r4, pc}

0000c69e <hfclk_start>:
{
    c69e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c6a0:	2001      	movs	r0, #1
    c6a2:	f7fb f805 	bl	76b0 <nrfx_clock_start>
}
    c6a6:	bd08      	pop	{r3, pc}

0000c6a8 <lfclk_start>:
{
    c6a8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c6aa:	2000      	movs	r0, #0
    c6ac:	f7fb f800 	bl	76b0 <nrfx_clock_start>
}
    c6b0:	bd08      	pop	{r3, pc}

0000c6b2 <hfclk_stop>:
{
    c6b2:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c6b4:	2001      	movs	r0, #1
    c6b6:	f7fb f871 	bl	779c <nrfx_clock_stop>
}
    c6ba:	bd08      	pop	{r3, pc}

0000c6bc <lfclk_stop>:
{
    c6bc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c6be:	2000      	movs	r0, #0
    c6c0:	f7fb f86c 	bl	779c <nrfx_clock_stop>
}
    c6c4:	bd08      	pop	{r3, pc}

0000c6c6 <api_stop>:
{
    c6c6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    c6c8:	2280      	movs	r2, #128	; 0x80
    c6ca:	f7f9 f971 	bl	59b0 <stop>
}
    c6ce:	bd08      	pop	{r3, pc}

0000c6d0 <blocking_start_callback>:
{
    c6d0:	b508      	push	{r3, lr}
    c6d2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c6d4:	f7fd f898 	bl	9808 <z_impl_k_sem_give>
}
    c6d8:	bd08      	pop	{r3, pc}

0000c6da <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c6da:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    c6de:	f020 0001 	bic.w	r0, r0, #1
    c6e2:	0540      	lsls	r0, r0, #21
    c6e4:	0d40      	lsrs	r0, r0, #21
    c6e6:	f240 2306 	movw	r3, #518	; 0x206
    c6ea:	4298      	cmp	r0, r3
    c6ec:	d033      	beq.n	c756 <get_drive+0x7c>
    c6ee:	d816      	bhi.n	c71e <get_drive+0x44>
    c6f0:	2806      	cmp	r0, #6
    c6f2:	d02c      	beq.n	c74e <get_drive+0x74>
    c6f4:	d906      	bls.n	c704 <get_drive+0x2a>
    c6f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c6fa:	d10d      	bne.n	c718 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    c6fc:	2301      	movs	r3, #1
    c6fe:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c700:	2000      	movs	r0, #0
		break;
    c702:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c704:	b300      	cbz	r0, c748 <get_drive+0x6e>
    c706:	2802      	cmp	r0, #2
    c708:	d103      	bne.n	c712 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    c70a:	2304      	movs	r3, #4
    c70c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c70e:	2000      	movs	r0, #0
		break;
    c710:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c712:	f06f 0015 	mvn.w	r0, #21
    c716:	4770      	bx	lr
    c718:	f06f 0015 	mvn.w	r0, #21
    c71c:	4770      	bx	lr
    c71e:	f240 4302 	movw	r3, #1026	; 0x402
    c722:	4298      	cmp	r0, r3
    c724:	d01b      	beq.n	c75e <get_drive+0x84>
    c726:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    c72a:	d103      	bne.n	c734 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    c72c:	2303      	movs	r3, #3
    c72e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c730:	2000      	movs	r0, #0
		break;
    c732:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c734:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    c738:	d103      	bne.n	c742 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    c73a:	2302      	movs	r3, #2
    c73c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c73e:	2000      	movs	r0, #0
		break;
    c740:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c742:	f06f 0015 	mvn.w	r0, #21
    c746:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    c748:	2000      	movs	r0, #0
    c74a:	7008      	strb	r0, [r1, #0]
		break;
    c74c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    c74e:	2306      	movs	r3, #6
    c750:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c752:	2000      	movs	r0, #0
		break;
    c754:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    c756:	2307      	movs	r3, #7
    c758:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c75a:	2000      	movs	r0, #0
		break;
    c75c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    c75e:	2305      	movs	r3, #5
    c760:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c762:	2000      	movs	r0, #0
}
    c764:	4770      	bx	lr

0000c766 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    c766:	f010 0f10 	tst.w	r0, #16
    c76a:	d104      	bne.n	c776 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    c76c:	f010 0f20 	tst.w	r0, #32
    c770:	d103      	bne.n	c77a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    c772:	2000      	movs	r0, #0
    c774:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    c776:	2003      	movs	r0, #3
    c778:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    c77a:	2001      	movs	r0, #1
}
    c77c:	4770      	bx	lr

0000c77e <gpio_nrfx_port_get_raw>:
	return port->config;
    c77e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c780:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c782:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c786:	600b      	str	r3, [r1, #0]
}
    c788:	2000      	movs	r0, #0
    c78a:	4770      	bx	lr

0000c78c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    c78c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c78e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    c790:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    c794:	4042      	eors	r2, r0
    c796:	400a      	ands	r2, r1
    c798:	4042      	eors	r2, r0
    p_reg->OUT = value;
    c79a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    c79e:	2000      	movs	r0, #0
    c7a0:	4770      	bx	lr

0000c7a2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    c7a2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c7a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    c7a6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    c7aa:	2000      	movs	r0, #0
    c7ac:	4770      	bx	lr

0000c7ae <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    c7ae:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c7b0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    c7b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    c7b6:	2000      	movs	r0, #0
    c7b8:	4770      	bx	lr

0000c7ba <gpio_nrfx_port_toggle_bits>:
	return port->config;
    c7ba:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c7bc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c7be:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    c7c2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    c7c4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    c7c8:	2000      	movs	r0, #0
    c7ca:	4770      	bx	lr

0000c7cc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    c7cc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    c7d0:	d007      	beq.n	c7e2 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c7d2:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    c7d6:	d00d      	beq.n	c7f4 <get_trigger+0x28>
    c7d8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c7dc:	d008      	beq.n	c7f0 <get_trigger+0x24>
    c7de:	2001      	movs	r0, #1
}
    c7e0:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c7e2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c7e6:	d001      	beq.n	c7ec <get_trigger+0x20>
    c7e8:	2005      	movs	r0, #5
    c7ea:	4770      	bx	lr
    c7ec:	2004      	movs	r0, #4
    c7ee:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c7f0:	2002      	movs	r0, #2
    c7f2:	4770      	bx	lr
    c7f4:	2003      	movs	r0, #3
    c7f6:	4770      	bx	lr

0000c7f8 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    c7f8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c7fa:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    c7fc:	f04f 0120 	mov.w	r1, #32
    c800:	f3ef 8211 	mrs	r2, BASEPRI
    c804:	f381 8812 	msr	BASEPRI_MAX, r1
    c808:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c80c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c810:	b131      	cbz	r1, c820 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c812:	2100      	movs	r1, #0
    c814:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c818:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c81c:	2101      	movs	r1, #1
    c81e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c820:	f382 8811 	msr	BASEPRI, r2
    c824:	f3bf 8f6f 	isb	sy
}
    c828:	4770      	bx	lr

0000c82a <uarte_nrfx_isr_int>:
{
    c82a:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c82c:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    c82e:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    c830:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c834:	f413 7f80 	tst.w	r3, #256	; 0x100
    c838:	d002      	beq.n	c840 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c83a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    c83e:	b9d3      	cbnz	r3, c876 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c840:	686b      	ldr	r3, [r5, #4]
    c842:	f013 0f10 	tst.w	r3, #16
    c846:	d015      	beq.n	c874 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    c848:	f04f 0220 	mov.w	r2, #32
    c84c:	f3ef 8311 	mrs	r3, BASEPRI
    c850:	f382 8812 	msr	BASEPRI_MAX, r2
    c854:	f3bf 8f6f 	isb	sy
    c858:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c85c:	b112      	cbz	r2, c864 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c85e:	2200      	movs	r2, #0
    c860:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    c864:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c868:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    c86c:	f383 8811 	msr	BASEPRI, r3
    c870:	f3bf 8f6f 	isb	sy
}
    c874:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    c876:	f7ff ffbf 	bl	c7f8 <endtx_isr>
    c87a:	e7e1      	b.n	c840 <uarte_nrfx_isr_int+0x16>

0000c87c <uarte_nrfx_configure>:
{
    c87c:	b570      	push	{r4, r5, r6, lr}
    c87e:	b082      	sub	sp, #8
    c880:	4606      	mov	r6, r0
    c882:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    c884:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    c886:	794b      	ldrb	r3, [r1, #5]
    c888:	2b01      	cmp	r3, #1
    c88a:	d006      	beq.n	c89a <uarte_nrfx_configure+0x1e>
    c88c:	2b03      	cmp	r3, #3
    c88e:	d011      	beq.n	c8b4 <uarte_nrfx_configure+0x38>
    c890:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    c894:	4618      	mov	r0, r3
    c896:	b002      	add	sp, #8
    c898:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    c89a:	2300      	movs	r3, #0
    c89c:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c8a0:	79a3      	ldrb	r3, [r4, #6]
    c8a2:	2b03      	cmp	r3, #3
    c8a4:	d137      	bne.n	c916 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    c8a6:	79e3      	ldrb	r3, [r4, #7]
    c8a8:	b143      	cbz	r3, c8bc <uarte_nrfx_configure+0x40>
    c8aa:	2b01      	cmp	r3, #1
    c8ac:	d010      	beq.n	c8d0 <uarte_nrfx_configure+0x54>
    c8ae:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c8b2:	e7ef      	b.n	c894 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c8b4:	2310      	movs	r3, #16
    c8b6:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    c8ba:	e7f1      	b.n	c8a0 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    c8bc:	2300      	movs	r3, #0
    c8be:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    c8c2:	7923      	ldrb	r3, [r4, #4]
    c8c4:	b143      	cbz	r3, c8d8 <uarte_nrfx_configure+0x5c>
    c8c6:	2b02      	cmp	r3, #2
    c8c8:	d021      	beq.n	c90e <uarte_nrfx_configure+0x92>
    c8ca:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c8ce:	e7e1      	b.n	c894 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    c8d0:	2301      	movs	r3, #1
    c8d2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    c8d6:	e7f4      	b.n	c8c2 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    c8d8:	2300      	movs	r3, #0
    c8da:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    c8de:	6821      	ldr	r1, [r4, #0]
    c8e0:	4630      	mov	r0, r6
    c8e2:	f7f9 fc6d 	bl	61c0 <baudrate_set>
    c8e6:	4603      	mov	r3, r0
    c8e8:	b9c0      	cbnz	r0, c91c <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    c8ea:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    c8ec:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c8ee:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    c8f2:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    c8f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c8fa:	4331      	orrs	r1, r6
    c8fc:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c8fe:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    c902:	3504      	adds	r5, #4
    c904:	e894 0003 	ldmia.w	r4, {r0, r1}
    c908:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    c90c:	e7c2      	b.n	c894 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    c90e:	230e      	movs	r3, #14
    c910:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    c914:	e7e3      	b.n	c8de <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    c916:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c91a:	e7bb      	b.n	c894 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    c91c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c920:	e7b8      	b.n	c894 <uarte_nrfx_configure+0x18>

0000c922 <uarte_nrfx_config_get>:
{
    c922:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    c924:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    c926:	3304      	adds	r3, #4
    c928:	e893 0003 	ldmia.w	r3, {r0, r1}
    c92c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    c930:	2000      	movs	r0, #0
    c932:	4770      	bx	lr

0000c934 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    c934:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c936:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    c938:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    c93c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    c940:	4770      	bx	lr

0000c942 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    c942:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c944:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c946:	685b      	ldr	r3, [r3, #4]
    c948:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c94c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c950:	b929      	cbnz	r1, c95e <is_tx_ready+0x1c>
    c952:	b933      	cbnz	r3, c962 <is_tx_ready+0x20>
    c954:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    c958:	b92b      	cbnz	r3, c966 <is_tx_ready+0x24>
    c95a:	2000      	movs	r0, #0
    c95c:	4770      	bx	lr
    c95e:	2001      	movs	r0, #1
    c960:	4770      	bx	lr
    c962:	2000      	movs	r0, #0
    c964:	4770      	bx	lr
    c966:	2001      	movs	r0, #1
}
    c968:	4770      	bx	lr

0000c96a <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    c96a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c96c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c96e:	2208      	movs	r2, #8
    c970:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    c974:	4770      	bx	lr

0000c976 <tx_start>:
{
    c976:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c978:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c97a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c97c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c980:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c984:	2200      	movs	r2, #0
    c986:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    c98a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    c98e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    c992:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c996:	685b      	ldr	r3, [r3, #4]
    c998:	f013 0f10 	tst.w	r3, #16
    c99c:	d102      	bne.n	c9a4 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c99e:	2301      	movs	r3, #1
    c9a0:	60a3      	str	r3, [r4, #8]
}
    c9a2:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    c9a4:	2101      	movs	r1, #1
    c9a6:	f7ff ffe0 	bl	c96a <uarte_enable>
    p_reg->INTENSET = mask;
    c9aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    c9ae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    c9b2:	e7f4      	b.n	c99e <tx_start+0x28>

0000c9b4 <uarte_nrfx_poll_in>:
{
    c9b4:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    c9b6:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    c9b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c9ba:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c9bc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c9c0:	b152      	cbz	r2, c9d8 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    c9c2:	7c62      	ldrb	r2, [r4, #17]
    c9c4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c9c6:	2000      	movs	r0, #0
    c9c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    c9cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c9d0:	2201      	movs	r2, #1
    c9d2:	601a      	str	r2, [r3, #0]
}
    c9d4:	bc10      	pop	{r4}
    c9d6:	4770      	bx	lr
		return -1;
    c9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c9dc:	e7fa      	b.n	c9d4 <uarte_nrfx_poll_in+0x20>

0000c9de <wait_tx_ready>:
{
    c9de:	b570      	push	{r4, r5, r6, lr}
    c9e0:	4606      	mov	r6, r0
    c9e2:	e014      	b.n	ca0e <wait_tx_ready+0x30>
		if (res) {
    c9e4:	b17d      	cbz	r5, ca06 <wait_tx_ready+0x28>
	__asm__ volatile(
    c9e6:	f04f 0320 	mov.w	r3, #32
    c9ea:	f3ef 8411 	mrs	r4, BASEPRI
    c9ee:	f383 8812 	msr	BASEPRI_MAX, r3
    c9f2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    c9f6:	4630      	mov	r0, r6
    c9f8:	f7ff ffa3 	bl	c942 <is_tx_ready>
    c9fc:	b9a0      	cbnz	r0, ca28 <wait_tx_ready+0x4a>
	__asm__ volatile(
    c9fe:	f384 8811 	msr	BASEPRI, r4
    ca02:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ca06:	2021      	movs	r0, #33	; 0x21
    ca08:	2100      	movs	r1, #0
    ca0a:	f7fe f9dd 	bl	adc8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ca0e:	2464      	movs	r4, #100	; 0x64
    ca10:	4630      	mov	r0, r6
    ca12:	f7ff ff96 	bl	c942 <is_tx_ready>
    ca16:	4605      	mov	r5, r0
    ca18:	2800      	cmp	r0, #0
    ca1a:	d1e3      	bne.n	c9e4 <wait_tx_ready+0x6>
    ca1c:	2001      	movs	r0, #1
    ca1e:	f000 f9c1 	bl	cda4 <nrfx_busy_wait>
    ca22:	3c01      	subs	r4, #1
    ca24:	d1f4      	bne.n	ca10 <wait_tx_ready+0x32>
    ca26:	e7dd      	b.n	c9e4 <wait_tx_ready+0x6>
}
    ca28:	4620      	mov	r0, r4
    ca2a:	bd70      	pop	{r4, r5, r6, pc}

0000ca2c <z_log_msg2_runtime_create>:
{
    ca2c:	b510      	push	{r4, lr}
    ca2e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ca30:	ac0b      	add	r4, sp, #44	; 0x2c
    ca32:	9405      	str	r4, [sp, #20]
    ca34:	9403      	str	r4, [sp, #12]
    ca36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ca38:	9402      	str	r4, [sp, #8]
    ca3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ca3c:	9401      	str	r4, [sp, #4]
    ca3e:	9c08      	ldr	r4, [sp, #32]
    ca40:	9400      	str	r4, [sp, #0]
    ca42:	f7f7 f89b 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    ca46:	b006      	add	sp, #24
    ca48:	bd10      	pop	{r4, pc}

0000ca4a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    ca4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca4e:	b083      	sub	sp, #12
    ca50:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    ca52:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    ca54:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    ca56:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    ca5a:	2100      	movs	r1, #0
    ca5c:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    ca60:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    ca64:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    ca68:	aa01      	add	r2, sp, #4
    ca6a:	4648      	mov	r0, r9
    ca6c:	f000 f8e6 	bl	cc3c <pinctrl_lookup_state>
	if (ret < 0) {
    ca70:	1e04      	subs	r4, r0, #0
    ca72:	db07      	blt.n	ca84 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    ca74:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    ca76:	f8d9 2000 	ldr.w	r2, [r9]
    ca7a:	7919      	ldrb	r1, [r3, #4]
    ca7c:	6818      	ldr	r0, [r3, #0]
    ca7e:	f7f9 ff61 	bl	6944 <pinctrl_configure_pins>
    ca82:	4604      	mov	r4, r0
	if (err < 0) {
    ca84:	2c00      	cmp	r4, #0
    ca86:	db35      	blt.n	caf4 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    ca88:	f108 0104 	add.w	r1, r8, #4
    ca8c:	4628      	mov	r0, r5
    ca8e:	f7ff fef5 	bl	c87c <uarte_nrfx_configure>
	if (err) {
    ca92:	4604      	mov	r4, r0
    ca94:	bb70      	cbnz	r0, caf4 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    ca96:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    ca98:	f013 0f02 	tst.w	r3, #2
    ca9c:	d12e      	bne.n	cafc <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ca9e:	2308      	movs	r3, #8
    caa0:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    caa4:	7a3b      	ldrb	r3, [r7, #8]
    caa6:	b95b      	cbnz	r3, cac0 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    caa8:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    caac:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    cab0:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    cab4:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    cab8:	2301      	movs	r3, #1
    caba:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cabe:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    cac0:	687b      	ldr	r3, [r7, #4]
    cac2:	f013 0f02 	tst.w	r3, #2
    cac6:	d103      	bne.n	cad0 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    cac8:	f44f 7380 	mov.w	r3, #256	; 0x100
    cacc:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	f013 0f10 	tst.w	r3, #16
    cad6:	d003      	beq.n	cae0 <uarte_instance_init+0x96>
    cad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    cadc:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    cae0:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    cae4:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    cae8:	2300      	movs	r3, #0
    caea:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    caee:	2301      	movs	r3, #1
    caf0:	60b3      	str	r3, [r6, #8]
    caf2:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    caf4:	4620      	mov	r0, r4
    caf6:	b003      	add	sp, #12
    caf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    cafc:	4641      	mov	r1, r8
    cafe:	4630      	mov	r0, r6
    cb00:	f7f9 fc3e 	bl	6380 <endtx_stoptx_ppi_init>
		if (err < 0) {
    cb04:	2800      	cmp	r0, #0
    cb06:	daca      	bge.n	ca9e <uarte_instance_init+0x54>
			return err;
    cb08:	4604      	mov	r4, r0
    cb0a:	e7f3      	b.n	caf4 <uarte_instance_init+0xaa>

0000cb0c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    cb0c:	b510      	push	{r4, lr}
    cb0e:	4604      	mov	r4, r0
    cb10:	2200      	movs	r2, #0
    cb12:	2101      	movs	r1, #1
    cb14:	2002      	movs	r0, #2
    cb16:	f7f7 fcbb 	bl	4490 <z_arm_irq_priority_set>
    cb1a:	2002      	movs	r0, #2
    cb1c:	f7f7 fc9c 	bl	4458 <arch_irq_enable>
    cb20:	2100      	movs	r1, #0
    cb22:	4620      	mov	r0, r4
    cb24:	f7ff ff91 	bl	ca4a <uarte_instance_init>
    cb28:	bd10      	pop	{r4, pc}

0000cb2a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    cb2a:	b510      	push	{r4, lr}
    cb2c:	4604      	mov	r4, r0
    cb2e:	2200      	movs	r2, #0
    cb30:	2101      	movs	r1, #1
    cb32:	2028      	movs	r0, #40	; 0x28
    cb34:	f7f7 fcac 	bl	4490 <z_arm_irq_priority_set>
    cb38:	2028      	movs	r0, #40	; 0x28
    cb3a:	f7f7 fc8d 	bl	4458 <arch_irq_enable>
    cb3e:	2100      	movs	r1, #0
    cb40:	4620      	mov	r0, r4
    cb42:	f7ff ff82 	bl	ca4a <uarte_instance_init>
    cb46:	bd10      	pop	{r4, pc}

0000cb48 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    cb48:	4770      	bx	lr

0000cb4a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    cb4a:	1a40      	subs	r0, r0, r1
}
    cb4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb50:	4770      	bx	lr

0000cb52 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    cb52:	f100 0350 	add.w	r3, r0, #80	; 0x50
    cb56:	009b      	lsls	r3, r3, #2
    cb58:	b29b      	uxth	r3, r3
    cb5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cb5e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    cb62:	2200      	movs	r2, #0
    cb64:	601a      	str	r2, [r3, #0]
    cb66:	681b      	ldr	r3, [r3, #0]
}
    cb68:	4770      	bx	lr

0000cb6a <absolute_time_to_cc>:
}
    cb6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb6e:	4770      	bx	lr

0000cb70 <full_int_lock>:
	__asm__ volatile(
    cb70:	f04f 0320 	mov.w	r3, #32
    cb74:	f3ef 8011 	mrs	r0, BASEPRI
    cb78:	f383 8812 	msr	BASEPRI_MAX, r3
    cb7c:	f3bf 8f6f 	isb	sy
}
    cb80:	4770      	bx	lr

0000cb82 <full_int_unlock>:
	__asm__ volatile(
    cb82:	f380 8811 	msr	BASEPRI, r0
    cb86:	f3bf 8f6f 	isb	sy
}
    cb8a:	4770      	bx	lr

0000cb8c <set_absolute_alarm>:
{
    cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb8e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    cb90:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    cb94:	f7f9 fc32 	bl	63fc <get_comparator>
    cb98:	4607      	mov	r7, r0
    cb9a:	e019      	b.n	cbd0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    cb9c:	2013      	movs	r0, #19
    cb9e:	f000 fa33 	bl	d008 <z_impl_k_busy_wait>
}
    cba2:	e022      	b.n	cbea <set_absolute_alarm+0x5e>
		event_clear(chan);
    cba4:	4630      	mov	r0, r6
    cba6:	f7ff ffd4 	bl	cb52 <event_clear>
		event_enable(chan);
    cbaa:	4630      	mov	r0, r6
    cbac:	f7f9 fc2e 	bl	640c <event_enable>
		set_comparator(chan, cc_val);
    cbb0:	4629      	mov	r1, r5
    cbb2:	4630      	mov	r0, r6
    cbb4:	f7f9 fc18 	bl	63e8 <set_comparator>
		now2 = counter();
    cbb8:	f7f9 fc3c 	bl	6434 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    cbbc:	4284      	cmp	r4, r0
    cbbe:	d01e      	beq.n	cbfe <set_absolute_alarm+0x72>
    cbc0:	1c81      	adds	r1, r0, #2
    cbc2:	4628      	mov	r0, r5
    cbc4:	f7ff ffc1 	bl	cb4a <counter_sub>
	} while ((now2 != now) &&
    cbc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cbcc:	d917      	bls.n	cbfe <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    cbce:	462f      	mov	r7, r5
		now = counter();
    cbd0:	f7f9 fc30 	bl	6434 <counter>
    cbd4:	4604      	mov	r4, r0
		set_comparator(chan, now);
    cbd6:	4601      	mov	r1, r0
    cbd8:	4630      	mov	r0, r6
    cbda:	f7f9 fc05 	bl	63e8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    cbde:	4621      	mov	r1, r4
    cbe0:	4638      	mov	r0, r7
    cbe2:	f7ff ffb2 	bl	cb4a <counter_sub>
    cbe6:	2801      	cmp	r0, #1
    cbe8:	d0d8      	beq.n	cb9c <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    cbea:	1ca7      	adds	r7, r4, #2
    cbec:	4639      	mov	r1, r7
    cbee:	4628      	mov	r0, r5
    cbf0:	f7ff ffab 	bl	cb4a <counter_sub>
    cbf4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cbf8:	d9d4      	bls.n	cba4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    cbfa:	463d      	mov	r5, r7
    cbfc:	e7d2      	b.n	cba4 <set_absolute_alarm+0x18>
}
    cbfe:	4628      	mov	r0, r5
    cc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cc02 <compare_set>:
{
    cc02:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc04:	b083      	sub	sp, #12
    cc06:	4604      	mov	r4, r0
    cc08:	4617      	mov	r7, r2
    cc0a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    cc0c:	f7f9 fc18 	bl	6440 <compare_int_lock>
    cc10:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc14:	9301      	str	r3, [sp, #4]
    cc16:	9b08      	ldr	r3, [sp, #32]
    cc18:	9300      	str	r3, [sp, #0]
    cc1a:	463a      	mov	r2, r7
    cc1c:	462b      	mov	r3, r5
    cc1e:	4620      	mov	r0, r4
    cc20:	f7f9 fcfe 	bl	6620 <compare_set_nolocks>
    cc24:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    cc26:	4631      	mov	r1, r6
    cc28:	4620      	mov	r0, r4
    cc2a:	f7f9 fc6d 	bl	6508 <compare_int_unlock>
}
    cc2e:	4628      	mov	r0, r5
    cc30:	b003      	add	sp, #12
    cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cc34 <sys_clock_cycle_get_32>:
{
    cc34:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    cc36:	f7f9 fcd3 	bl	65e0 <z_nrf_rtc_timer_read>
}
    cc3a:	bd08      	pop	{r3, pc}

0000cc3c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    cc3c:	b410      	push	{r4}
	*state = &config->states[0];
    cc3e:	6843      	ldr	r3, [r0, #4]
    cc40:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cc42:	e001      	b.n	cc48 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    cc44:	3408      	adds	r4, #8
    cc46:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cc48:	6814      	ldr	r4, [r2, #0]
    cc4a:	7a03      	ldrb	r3, [r0, #8]
    cc4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    cc50:	3b01      	subs	r3, #1
    cc52:	f8d0 c004 	ldr.w	ip, [r0, #4]
    cc56:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    cc5a:	429c      	cmp	r4, r3
    cc5c:	d804      	bhi.n	cc68 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    cc5e:	7963      	ldrb	r3, [r4, #5]
    cc60:	428b      	cmp	r3, r1
    cc62:	d1ef      	bne.n	cc44 <pinctrl_lookup_state+0x8>
			return 0;
    cc64:	2000      	movs	r0, #0
    cc66:	e001      	b.n	cc6c <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    cc68:	f06f 0001 	mvn.w	r0, #1
}
    cc6c:	bc10      	pop	{r4}
    cc6e:	4770      	bx	lr

0000cc70 <z_log_msg2_runtime_create>:
{
    cc70:	b510      	push	{r4, lr}
    cc72:	b086      	sub	sp, #24
	va_start(ap, fmt);
    cc74:	ac0b      	add	r4, sp, #44	; 0x2c
    cc76:	9405      	str	r4, [sp, #20]
    cc78:	9403      	str	r4, [sp, #12]
    cc7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cc7c:	9402      	str	r4, [sp, #8]
    cc7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cc80:	9401      	str	r4, [sp, #4]
    cc82:	9c08      	ldr	r4, [sp, #32]
    cc84:	9400      	str	r4, [sp, #0]
    cc86:	f7f6 ff79 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    cc8a:	b006      	add	sp, #24
    cc8c:	bd10      	pop	{r4, pc}

0000cc8e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    cc8e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    cc90:	f7fe fe68 	bl	b964 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    cc94:	bd08      	pop	{r3, pc}

0000cc96 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    cc96:	b510      	push	{r4, lr}
    cc98:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    cc9a:	f7f7 faa3 	bl	41e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    cc9e:	f7f7 fb5f 	bl	4360 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    cca2:	4620      	mov	r0, r4
    cca4:	f7ff fff3 	bl	cc8e <hw_cc3xx_init_internal>
	return res;
}
    cca8:	bd10      	pop	{r4, pc}

0000ccaa <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ccaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ccae:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ccb2:	2b08      	cmp	r3, #8
    ccb4:	d001      	beq.n	ccba <nrf52_errata_36+0x10>
        return false;
    ccb6:	2000      	movs	r0, #0
    ccb8:	4770      	bx	lr
                        return true;
    ccba:	2001      	movs	r0, #1
}
    ccbc:	4770      	bx	lr

0000ccbe <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ccbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ccc2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ccc6:	2b08      	cmp	r3, #8
    ccc8:	d001      	beq.n	ccce <nrf52_errata_66+0x10>
        return false;
    ccca:	2000      	movs	r0, #0
    cccc:	4770      	bx	lr
                        return true;
    ccce:	2001      	movs	r0, #1
}
    ccd0:	4770      	bx	lr

0000ccd2 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ccd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ccd6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ccda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ccde:	2a08      	cmp	r2, #8
    cce0:	d001      	beq.n	cce6 <nrf52_errata_98+0x14>
        return false;
    cce2:	2000      	movs	r0, #0
    cce4:	4770      	bx	lr
                switch(var2)
    cce6:	2b00      	cmp	r3, #0
    cce8:	d804      	bhi.n	ccf4 <nrf52_errata_98+0x22>
    ccea:	e8df f003 	tbb	[pc, r3]
    ccee:	01          	.byte	0x01
    ccef:	00          	.byte	0x00
    ccf0:	2001      	movs	r0, #1
    ccf2:	4770      	bx	lr
                        return false;
    ccf4:	2000      	movs	r0, #0
}
    ccf6:	4770      	bx	lr

0000ccf8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ccf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ccfc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd04:	2a08      	cmp	r2, #8
    cd06:	d001      	beq.n	cd0c <nrf52_errata_103+0x14>
        return false;
    cd08:	2000      	movs	r0, #0
    cd0a:	4770      	bx	lr
                switch(var2)
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d804      	bhi.n	cd1a <nrf52_errata_103+0x22>
    cd10:	e8df f003 	tbb	[pc, r3]
    cd14:	01          	.byte	0x01
    cd15:	00          	.byte	0x00
    cd16:	2001      	movs	r0, #1
    cd18:	4770      	bx	lr
                        return false;
    cd1a:	2000      	movs	r0, #0
}
    cd1c:	4770      	bx	lr

0000cd1e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd22:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd26:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd2a:	2a08      	cmp	r2, #8
    cd2c:	d001      	beq.n	cd32 <nrf52_errata_115+0x14>
        return false;
    cd2e:	2000      	movs	r0, #0
    cd30:	4770      	bx	lr
                switch(var2)
    cd32:	2b00      	cmp	r3, #0
    cd34:	d804      	bhi.n	cd40 <nrf52_errata_115+0x22>
    cd36:	e8df f003 	tbb	[pc, r3]
    cd3a:	01          	.byte	0x01
    cd3b:	00          	.byte	0x00
    cd3c:	2001      	movs	r0, #1
    cd3e:	4770      	bx	lr
                        return false;
    cd40:	2000      	movs	r0, #0
}
    cd42:	4770      	bx	lr

0000cd44 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd50:	2a08      	cmp	r2, #8
    cd52:	d001      	beq.n	cd58 <nrf52_errata_120+0x14>
        return false;
    cd54:	2000      	movs	r0, #0
    cd56:	4770      	bx	lr
                switch(var2)
    cd58:	2b00      	cmp	r3, #0
    cd5a:	d804      	bhi.n	cd66 <nrf52_errata_120+0x22>
    cd5c:	e8df f003 	tbb	[pc, r3]
    cd60:	01          	.byte	0x01
    cd61:	00          	.byte	0x00
    cd62:	2001      	movs	r0, #1
    cd64:	4770      	bx	lr
                        return false;
    cd66:	2000      	movs	r0, #0
}
    cd68:	4770      	bx	lr

0000cd6a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd6e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    cd72:	2b08      	cmp	r3, #8
    cd74:	d001      	beq.n	cd7a <nrf52_errata_136+0x10>
        return false;
    cd76:	2000      	movs	r0, #0
    cd78:	4770      	bx	lr
                        return true;
    cd7a:	2001      	movs	r0, #1
}
    cd7c:	4770      	bx	lr

0000cd7e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd82:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    cd8a:	2a08      	cmp	r2, #8
    cd8c:	d001      	beq.n	cd92 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    cd8e:	2000      	movs	r0, #0
    cd90:	4770      	bx	lr
                switch(var2)
    cd92:	2b04      	cmp	r3, #4
    cd94:	d801      	bhi.n	cd9a <nrf52_configuration_249+0x1c>
    cd96:	2000      	movs	r0, #0
    cd98:	4770      	bx	lr
                        return true;
    cd9a:	2001      	movs	r0, #1
    #endif
}
    cd9c:	4770      	bx	lr

0000cd9e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    cd9e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    cda0:	4780      	blx	r0
}
    cda2:	bd08      	pop	{r3, pc}

0000cda4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    cda4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    cda6:	f000 f92f 	bl	d008 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    cdaa:	bd08      	pop	{r3, pc}

0000cdac <clock_initial_lfclksrc_get>:
}
    cdac:	2000      	movs	r0, #0
    cdae:	4770      	bx	lr

0000cdb0 <clock_lfclksrc_tweak>:
{
    cdb0:	b538      	push	{r3, r4, r5, lr}
    cdb2:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    cdb4:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cdb6:	2b01      	cmp	r3, #1
    cdb8:	d002      	beq.n	cdc0 <clock_lfclksrc_tweak+0x10>
    cdba:	b933      	cbnz	r3, cdca <clock_lfclksrc_tweak+0x1a>
    cdbc:	2301      	movs	r3, #1
    cdbe:	e000      	b.n	cdc2 <clock_lfclksrc_tweak+0x12>
    cdc0:	2301      	movs	r3, #1
    if (!is_correct_clk)
    cdc2:	461d      	mov	r5, r3
    cdc4:	b11b      	cbz	r3, cdce <clock_lfclksrc_tweak+0x1e>
}
    cdc6:	4628      	mov	r0, r5
    cdc8:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cdca:	2300      	movs	r3, #0
    cdcc:	e7f9      	b.n	cdc2 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cdce:	2000      	movs	r0, #0
    cdd0:	f7fa fb90 	bl	74f4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    cdd4:	f7ff ffea 	bl	cdac <clock_initial_lfclksrc_get>
    cdd8:	6020      	str	r0, [r4, #0]
    cdda:	e7f4      	b.n	cdc6 <clock_lfclksrc_tweak+0x16>

0000cddc <pin_is_task_output>:
{
    cddc:	b510      	push	{r4, lr}
    cdde:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    cde0:	f7fa fd5a 	bl	7898 <pin_is_output>
    cde4:	b128      	cbz	r0, cdf2 <pin_is_task_output+0x16>
    cde6:	4620      	mov	r0, r4
    cde8:	f7fa fd40 	bl	786c <pin_in_use_by_te>
    cdec:	b118      	cbz	r0, cdf6 <pin_is_task_output+0x1a>
    cdee:	2001      	movs	r0, #1
    cdf0:	e000      	b.n	cdf4 <pin_is_task_output+0x18>
    cdf2:	2000      	movs	r0, #0
}
    cdf4:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    cdf6:	2000      	movs	r0, #0
    cdf8:	e7fc      	b.n	cdf4 <pin_is_task_output+0x18>

0000cdfa <pin_is_input>:
{
    cdfa:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    cdfc:	f7fa fd4c 	bl	7898 <pin_is_output>
    ce00:	f080 0001 	eor.w	r0, r0, #1
}
    ce04:	b2c0      	uxtb	r0, r0
    ce06:	bd08      	pop	{r3, pc}

0000ce08 <gpiote_polarity_to_trigger>:
}
    ce08:	4770      	bx	lr

0000ce0a <gpiote_trigger_to_polarity>:
}
    ce0a:	4770      	bx	lr

0000ce0c <is_level>:
}
    ce0c:	2803      	cmp	r0, #3
    ce0e:	bf94      	ite	ls
    ce10:	2000      	movls	r0, #0
    ce12:	2001      	movhi	r0, #1
    ce14:	4770      	bx	lr

0000ce16 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    ce16:	b508      	push	{r3, lr}
  _DoInit();
    ce18:	f7fb fd08 	bl	882c <_DoInit>
}
    ce1c:	bd08      	pop	{r3, pc}

0000ce1e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ce1e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ce20:	f7ff fff9 	bl	ce16 <SEGGER_RTT_Init>

	return 0;
}
    ce24:	2000      	movs	r0, #0
    ce26:	bd08      	pop	{r3, pc}

0000ce28 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ce28:	b148      	cbz	r0, ce3e <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ce2a:	68c3      	ldr	r3, [r0, #12]
    ce2c:	8818      	ldrh	r0, [r3, #0]
    ce2e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ce32:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ce36:	bf14      	ite	ne
    ce38:	2000      	movne	r0, #0
    ce3a:	2001      	moveq	r0, #1
    ce3c:	4770      	bx	lr
		return false;
    ce3e:	2000      	movs	r0, #0
}
    ce40:	4770      	bx	lr

0000ce42 <z_log_msg2_runtime_create>:
{
    ce42:	b510      	push	{r4, lr}
    ce44:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ce46:	ac0b      	add	r4, sp, #44	; 0x2c
    ce48:	9405      	str	r4, [sp, #20]
    ce4a:	9403      	str	r4, [sp, #12]
    ce4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ce4e:	9402      	str	r4, [sp, #8]
    ce50:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ce52:	9401      	str	r4, [sp, #4]
    ce54:	9c08      	ldr	r4, [sp, #32]
    ce56:	9400      	str	r4, [sp, #0]
    ce58:	f7f6 fe90 	bl	3b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    ce5c:	b006      	add	sp, #24
    ce5e:	bd10      	pop	{r4, pc}

0000ce60 <z_early_memset>:
{
    ce60:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    ce62:	f7ff fb18 	bl	c496 <memset>
}
    ce66:	bd08      	pop	{r3, pc}

0000ce68 <z_early_memcpy>:
{
    ce68:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    ce6a:	f7ff fae5 	bl	c438 <memcpy>
}
    ce6e:	bd08      	pop	{r3, pc}

0000ce70 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ce70:	6902      	ldr	r2, [r0, #16]
    ce72:	6943      	ldr	r3, [r0, #20]
    ce74:	431a      	orrs	r2, r3
    ce76:	f012 0203 	ands.w	r2, r2, #3
    ce7a:	d10d      	bne.n	ce98 <create_free_list+0x28>
	slab->free_list = NULL;
    ce7c:	2100      	movs	r1, #0
    ce7e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    ce80:	e005      	b.n	ce8e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    ce82:	6981      	ldr	r1, [r0, #24]
    ce84:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    ce86:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    ce88:	6901      	ldr	r1, [r0, #16]
    ce8a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    ce8c:	3201      	adds	r2, #1
    ce8e:	68c1      	ldr	r1, [r0, #12]
    ce90:	4291      	cmp	r1, r2
    ce92:	d8f6      	bhi.n	ce82 <create_free_list+0x12>
	return 0;
    ce94:	2000      	movs	r0, #0
    ce96:	4770      	bx	lr
		return -EINVAL;
    ce98:	f06f 0015 	mvn.w	r0, #21
}
    ce9c:	4770      	bx	lr

0000ce9e <k_mem_slab_init>:
{
    ce9e:	b510      	push	{r4, lr}
    cea0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    cea2:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    cea4:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    cea6:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    cea8:	2300      	movs	r3, #0
    ceaa:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    ceac:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    ceae:	f7ff ffdf 	bl	ce70 <create_free_list>
	if (rc < 0) {
    ceb2:	2800      	cmp	r0, #0
    ceb4:	db01      	blt.n	ceba <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    ceb6:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    ceb8:	6064      	str	r4, [r4, #4]
}
    ceba:	bd10      	pop	{r4, pc}

0000cebc <setup_thread_stack>:
{
    cebc:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    cebe:	3207      	adds	r2, #7
    cec0:	f022 0207 	bic.w	r2, r2, #7
    cec4:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    cec8:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    cecc:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    ced0:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    ced4:	2200      	movs	r2, #0
    ced6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    ceda:	18c8      	adds	r0, r1, r3
    cedc:	bc10      	pop	{r4}
    cede:	4770      	bx	lr

0000cee0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cee0:	f3ef 8005 	mrs	r0, IPSR
}
    cee4:	3800      	subs	r0, #0
    cee6:	bf18      	it	ne
    cee8:	2001      	movne	r0, #1
    ceea:	4770      	bx	lr

0000ceec <k_thread_name_get>:
}
    ceec:	3074      	adds	r0, #116	; 0x74
    ceee:	4770      	bx	lr

0000cef0 <z_impl_k_thread_start>:
{
    cef0:	b508      	push	{r3, lr}
	z_sched_start(thread);
    cef2:	f7fd f96b 	bl	a1cc <z_sched_start>
}
    cef6:	bd08      	pop	{r3, pc}

0000cef8 <z_init_thread_base>:
{
    cef8:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    cefa:	2400      	movs	r4, #0
    cefc:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    cefe:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    cf00:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    cf02:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    cf04:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    cf06:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    cf08:	61c4      	str	r4, [r0, #28]
}
    cf0a:	bc10      	pop	{r4}
    cf0c:	4770      	bx	lr

0000cf0e <z_pm_save_idle_exit>:
{
    cf0e:	b508      	push	{r3, lr}
	pm_system_resume();
    cf10:	f7f6 ff72 	bl	3df8 <pm_system_resume>
	sys_clock_idle_exit();
    cf14:	f7ff fe18 	bl	cb48 <sys_clock_idle_exit>
}
    cf18:	bd08      	pop	{r3, pc}

0000cf1a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    cf1a:	4288      	cmp	r0, r1
    cf1c:	da00      	bge.n	cf20 <new_prio_for_inheritance+0x6>
    cf1e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    cf20:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    cf24:	db01      	blt.n	cf2a <new_prio_for_inheritance+0x10>
    cf26:	4608      	mov	r0, r1
    cf28:	4770      	bx	lr
    cf2a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    cf2e:	4770      	bx	lr

0000cf30 <adjust_owner_prio>:
{
    cf30:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    cf32:	6880      	ldr	r0, [r0, #8]
    cf34:	f990 300e 	ldrsb.w	r3, [r0, #14]
    cf38:	428b      	cmp	r3, r1
    cf3a:	d101      	bne.n	cf40 <adjust_owner_prio+0x10>
	return false;
    cf3c:	2000      	movs	r0, #0
}
    cf3e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    cf40:	f7fd fafa 	bl	a538 <z_set_prio>
    cf44:	e7fb      	b.n	cf3e <adjust_owner_prio+0xe>

0000cf46 <z_impl_k_mutex_init>:
{
    cf46:	4603      	mov	r3, r0
	mutex->owner = NULL;
    cf48:	2000      	movs	r0, #0
    cf4a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    cf4c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    cf4e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    cf50:	605b      	str	r3, [r3, #4]
}
    cf52:	4770      	bx	lr

0000cf54 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    cf54:	b13a      	cbz	r2, cf66 <z_impl_k_sem_init+0x12>
    cf56:	428a      	cmp	r2, r1
    cf58:	d308      	bcc.n	cf6c <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    cf5a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    cf5c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    cf5e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    cf60:	6040      	str	r0, [r0, #4]
	return 0;
    cf62:	2000      	movs	r0, #0
    cf64:	4770      	bx	lr
		return -EINVAL;
    cf66:	f06f 0015 	mvn.w	r0, #21
    cf6a:	4770      	bx	lr
    cf6c:	f06f 0015 	mvn.w	r0, #21
}
    cf70:	4770      	bx	lr

0000cf72 <thread_active_elsewhere>:
}
    cf72:	2000      	movs	r0, #0
    cf74:	4770      	bx	lr

0000cf76 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    cf76:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    cf7a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    cf7e:	4283      	cmp	r3, r0
    cf80:	d001      	beq.n	cf86 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    cf82:	1ac0      	subs	r0, r0, r3
    cf84:	4770      	bx	lr
	return 0;
    cf86:	2000      	movs	r0, #0
}
    cf88:	4770      	bx	lr

0000cf8a <z_reschedule_irqlock>:
{
    cf8a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cf8c:	4603      	mov	r3, r0
    cf8e:	b920      	cbnz	r0, cf9a <z_reschedule_irqlock+0x10>
    cf90:	f3ef 8205 	mrs	r2, IPSR
    cf94:	b942      	cbnz	r2, cfa8 <z_reschedule_irqlock+0x1e>
    cf96:	2201      	movs	r2, #1
    cf98:	e000      	b.n	cf9c <z_reschedule_irqlock+0x12>
    cf9a:	2200      	movs	r2, #0
	if (resched(key)) {
    cf9c:	b932      	cbnz	r2, cfac <z_reschedule_irqlock+0x22>
    cf9e:	f383 8811 	msr	BASEPRI, r3
    cfa2:	f3bf 8f6f 	isb	sy
}
    cfa6:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cfa8:	2200      	movs	r2, #0
    cfaa:	e7f7      	b.n	cf9c <z_reschedule_irqlock+0x12>
    cfac:	4618      	mov	r0, r3
    cfae:	f7f7 fac5 	bl	453c <arch_swap>
	return ret;
    cfb2:	e7f8      	b.n	cfa6 <z_reschedule_irqlock+0x1c>

0000cfb4 <z_priq_dumb_best>:
{
    cfb4:	4603      	mov	r3, r0
	return list->head == list;
    cfb6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cfb8:	4283      	cmp	r3, r0
    cfba:	d000      	beq.n	cfbe <z_priq_dumb_best+0xa>
}
    cfbc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    cfbe:	2000      	movs	r0, #0
	return thread;
    cfc0:	e7fc      	b.n	cfbc <z_priq_dumb_best+0x8>

0000cfc2 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    cfc2:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    cfc4:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    cfc6:	6083      	str	r3, [r0, #8]
}
    cfc8:	4770      	bx	lr

0000cfca <remove_timeout>:
{
    cfca:	b510      	push	{r4, lr}
    cfcc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    cfce:	f7fe f813 	bl	aff8 <next>
    cfd2:	b148      	cbz	r0, cfe8 <remove_timeout+0x1e>
    cfd4:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    cfd6:	6920      	ldr	r0, [r4, #16]
    cfd8:	6961      	ldr	r1, [r4, #20]
    cfda:	6913      	ldr	r3, [r2, #16]
    cfdc:	181b      	adds	r3, r3, r0
    cfde:	6950      	ldr	r0, [r2, #20]
    cfe0:	eb41 0100 	adc.w	r1, r1, r0
    cfe4:	6113      	str	r3, [r2, #16]
    cfe6:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    cfe8:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    cfea:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    cfec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cfee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cff0:	2300      	movs	r3, #0
    cff2:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    cff4:	6063      	str	r3, [r4, #4]
}
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    cff8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    cffa:	f7fe faf9 	bl	b5f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    cffe:	bd08      	pop	{r3, pc}

0000d000 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    d000:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    d002:	f7fe faf5 	bl	b5f0 <sys_clock_tick_get>
}
    d006:	bd08      	pop	{r3, pc}

0000d008 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d008:	b900      	cbnz	r0, d00c <z_impl_k_busy_wait+0x4>
    d00a:	4770      	bx	lr
{
    d00c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d00e:	f7f8 f959 	bl	52c4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d012:	bd08      	pop	{r3, pc}

0000d014 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d014:	b510      	push	{r4, lr}
    d016:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    d018:	f7fe f910 	bl	b23c <z_abort_timeout>

	if (inactive) {
    d01c:	b9a0      	cbnz	r0, d048 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    d01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d020:	b10b      	cbz	r3, d026 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d022:	4620      	mov	r0, r4
    d024:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d026:	f104 0018 	add.w	r0, r4, #24
    d02a:	f7fd fc91 	bl	a950 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d02e:	b158      	cbz	r0, d048 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    d030:	f7fd f876 	bl	a120 <z_ready_thread>
	__asm__ volatile(
    d034:	f04f 0320 	mov.w	r3, #32
    d038:	f3ef 8011 	mrs	r0, BASEPRI
    d03c:	f383 8812 	msr	BASEPRI_MAX, r3
    d040:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d044:	f7ff ffa1 	bl	cf8a <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    d048:	bd10      	pop	{r4, pc}

0000d04a <k_heap_init>:
{
    d04a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    d04c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    d050:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    d052:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    d054:	f7f5 fcd0 	bl	29f8 <sys_heap_init>
}
    d058:	bd10      	pop	{r4, pc}
	...

0000d05c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d05c:	f7fa b92a 	b.w	72b4 <SystemInit>
