
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 24 00 20 c1 3c 00 00 1d b1 00 00 79 3c 00 00     .$. .<......y<..
  10:	79 3c 00 00 79 3c 00 00 79 3c 00 00 00 00 00 00     y<..y<..y<......
	...
  2c:	55 34 00 00 79 3c 00 00 00 00 00 00 fd 33 00 00     U4..y<.......3..
  3c:	79 3c 00 00                                         y<..

00000040 <_irq_vector_table>:
  40:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  50:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  60:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  70:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  80:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  90:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  a0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  b0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  c0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  d0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  e0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..
  f0:	35 35 00 00 35 35 00 00 35 35 00 00 35 35 00 00     55..55..55..55..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <adc_sample>:
uint16_t precedentsAverage(uint16_t* precedents, uint16_t current_read, uint16_t precedents_size);


/* Takes one sample */
static int adc_sample(void)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	b086      	sub	sp, #24
	int ret;
	const struct adc_sequence sequence = {
     7a4:	2300      	movs	r3, #0
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	9302      	str	r3, [sp, #8]
     7aa:	9303      	str	r3, [sp, #12]
     7ac:	9304      	str	r3, [sp, #16]
     7ae:	9305      	str	r3, [sp, #20]
     7b0:	2302      	movs	r3, #2
     7b2:	9302      	str	r3, [sp, #8]
     7b4:	4a0e      	ldr	r2, [pc, #56]	; (7f0 <adc_sample+0x50>)
     7b6:	9203      	str	r2, [sp, #12]
     7b8:	9304      	str	r3, [sp, #16]
     7ba:	230a      	movs	r3, #10
     7bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer = adc_sample_buffer,
		.buffer_size = sizeof(adc_sample_buffer),
		.resolution = ADC_RESOLUTION,
	};

	if (adc_dev == NULL) {
     7c0:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <adc_sample+0x54>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	b140      	cbz	r0, 7d8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7c6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7c8:	685b      	ldr	r3, [r3, #4]
     7ca:	a901      	add	r1, sp, #4
     7cc:	4798      	blx	r3
            printk("adc_sample(): error, must bind to adc first \n\r");
            return -1;
	}

	ret = adc_read(adc_dev, &sequence);
	if (ret) {
     7ce:	4604      	mov	r4, r0
     7d0:	b940      	cbnz	r0, 7e4 <adc_sample+0x44>
            printk("adc_read() failed with code %d\n", ret);
	}	

	return ret;
}
     7d2:	4620      	mov	r0, r4
     7d4:	b006      	add	sp, #24
     7d6:	bd10      	pop	{r4, pc}
            printk("adc_sample(): error, must bind to adc first \n\r");
     7d8:	4807      	ldr	r0, [pc, #28]	; (7f8 <adc_sample+0x58>)
     7da:	f00a fa3f 	bl	ac5c <printk>
            return -1;
     7de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7e2:	e7f6      	b.n	7d2 <adc_sample+0x32>
            printk("adc_read() failed with code %d\n", ret);
     7e4:	4601      	mov	r1, r0
     7e6:	4805      	ldr	r0, [pc, #20]	; (7fc <adc_sample+0x5c>)
     7e8:	f00a fa38 	bl	ac5c <printk>
     7ec:	e7f1      	b.n	7d2 <adc_sample+0x32>
     7ee:	bf00      	nop
     7f0:	200005fc 	.word	0x200005fc
     7f4:	200005f8 	.word	0x200005f8
     7f8:	0000c238 	.word	0x0000c238
     7fc:	0000c268 	.word	0x0000c268

00000800 <thread_sensor_code>:

} 

/* Thread code implementation */
void thread_sensor_code(void *argA , void *argB, void *argC)
{
     800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int64_t fin_time=0, release_time=0;

    /* Other variables */
    long int nact = 0;
    
    printk("Thread A init (periodic)\n");
     804:	4856      	ldr	r0, [pc, #344]	; (960 <thread_sensor_code+0x160>)
     806:	f00a fa29 	bl	ac5c <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     80a:	f00b fb28 	bl	be5e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     80e:	014a      	lsls	r2, r1, #5
     810:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     814:	0143      	lsls	r3, r0, #5
     816:	1a1b      	subs	r3, r3, r0
     818:	eb62 0201 	sbc.w	r2, r2, r1
     81c:	0092      	lsls	r2, r2, #2
     81e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     822:	009b      	lsls	r3, r3, #2
     824:	181c      	adds	r4, r3, r0
     826:	eb42 0301 	adc.w	r3, r2, r1
     82a:	00db      	lsls	r3, r3, #3
     82c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     830:	f3c4 3410 	ubfx	r4, r4, #12, #17
     834:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     838:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     83a:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     83e:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     842:	2500      	movs	r5, #0
     844:	e046      	b.n	8d4 <thread_sensor_code+0xd4>
        


        err=adc_sample();
        if(err) {
            printk("adc_sample() failed with error code %d\n\r",err);
     846:	4847      	ldr	r0, [pc, #284]	; (964 <thread_sensor_code+0x164>)
     848:	f00a fa08 	bl	ac5c <printk>
     84c:	e020      	b.n	890 <thread_sensor_code+0x90>
            if(adc_sample_buffer[0] > 1023) {
                printk("adc reading out of range\n\r");
            }
            else {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r",adc_sample_buffer[0],(uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023)));
     84e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
     852:	fb08 f007 	mul.w	r0, r8, r7
     856:	f7ff fdc1 	bl	3dc <__aeabi_i2f>
     85a:	4943      	ldr	r1, [pc, #268]	; (968 <thread_sensor_code+0x168>)
     85c:	f7ff fc50 	bl	100 <__aeabi_fmul>
     860:	f7ff fe10 	bl	484 <__aeabi_f2uiz>
     864:	b282      	uxth	r2, r0
     866:	4639      	mov	r1, r7
     868:	4840      	ldr	r0, [pc, #256]	; (96c <thread_sensor_code+0x16c>)
     86a:	f00a f9f7 	bl	ac5c <printk>
                ab = (uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023));
     86e:	4b40      	ldr	r3, [pc, #256]	; (970 <thread_sensor_code+0x170>)
     870:	8818      	ldrh	r0, [r3, #0]
     872:	fb08 f000 	mul.w	r0, r8, r0
     876:	f7ff fdb1 	bl	3dc <__aeabi_i2f>
     87a:	493b      	ldr	r1, [pc, #236]	; (968 <thread_sensor_code+0x168>)
     87c:	f7ff fc40 	bl	100 <__aeabi_fmul>
     880:	f7ff fe00 	bl	484 <__aeabi_f2uiz>
     884:	b281      	uxth	r1, r0
     886:	4b3b      	ldr	r3, [pc, #236]	; (974 <thread_sensor_code+0x174>)
     888:	8019      	strh	r1, [r3, #0]
                printk("Thread A set ab value to: %d \n",ab); 
     88a:	483b      	ldr	r0, [pc, #236]	; (978 <thread_sensor_code+0x178>)
     88c:	f00a f9e6 	bl	ac5c <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     890:	483a      	ldr	r0, [pc, #232]	; (97c <thread_sensor_code+0x17c>)
     892:	f007 fefd 	bl	8690 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     896:	f00b fae2 	bl	be5e <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     89a:	4684      	mov	ip, r0
     89c:	014a      	lsls	r2, r1, #5
     89e:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     8a2:	0140      	lsls	r0, r0, #5
     8a4:	ebb0 030c 	subs.w	r3, r0, ip
     8a8:	eb62 0201 	sbc.w	r2, r2, r1
     8ac:	0092      	lsls	r2, r2, #2
     8ae:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     8b2:	009b      	lsls	r3, r3, #2
     8b4:	eb13 030c 	adds.w	r3, r3, ip
     8b8:	eb42 0101 	adc.w	r1, r2, r1
     8bc:	00c9      	lsls	r1, r1, #3
     8be:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     8c2:	f3c3 3310 	ubfx	r3, r3, #12, #17
     8c6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     8ca:	0bc9      	lsrs	r1, r1, #15


       
        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
        if( fin_time < release_time) {
     8cc:	42a3      	cmp	r3, r4
     8ce:	eb71 0206 	sbcs.w	r2, r1, r6
     8d2:	db2b      	blt.n	92c <thread_sensor_code+0x12c>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     8d4:	3501      	adds	r5, #1
     8d6:	f00b fac2 	bl	be5e <z_impl_k_uptime_ticks>
     8da:	4602      	mov	r2, r0
     8dc:	014b      	lsls	r3, r1, #5
     8de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     8e2:	0140      	lsls	r0, r0, #5
     8e4:	1a80      	subs	r0, r0, r2
     8e6:	eb63 0301 	sbc.w	r3, r3, r1
     8ea:	009b      	lsls	r3, r3, #2
     8ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     8f0:	0080      	lsls	r0, r0, #2
     8f2:	1880      	adds	r0, r0, r2
     8f4:	eb43 0301 	adc.w	r3, r3, r1
     8f8:	00db      	lsls	r3, r3, #3
     8fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     8fe:	f3c0 3010 	ubfx	r0, r0, #12, #17
     902:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     906:	0bdb      	lsrs	r3, r3, #15
     908:	4629      	mov	r1, r5
     90a:	481d      	ldr	r0, [pc, #116]	; (980 <thread_sensor_code+0x180>)
     90c:	f00a f9a6 	bl	ac5c <printk>
        err=adc_sample();
     910:	f7ff ff46 	bl	7a0 <adc_sample>
        if(err) {
     914:	4601      	mov	r1, r0
     916:	2800      	cmp	r0, #0
     918:	d195      	bne.n	846 <thread_sensor_code+0x46>
            if(adc_sample_buffer[0] > 1023) {
     91a:	4b15      	ldr	r3, [pc, #84]	; (970 <thread_sensor_code+0x170>)
     91c:	881f      	ldrh	r7, [r3, #0]
     91e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     922:	d394      	bcc.n	84e <thread_sensor_code+0x4e>
                printk("adc reading out of range\n\r");
     924:	4817      	ldr	r0, [pc, #92]	; (984 <thread_sensor_code+0x184>)
     926:	f00a f999 	bl	ac5c <printk>
     92a:	e7b1      	b.n	890 <thread_sensor_code+0x90>
            k_msleep(release_time - fin_time);
     92c:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     92e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     932:	17c1      	asrs	r1, r0, #31
     934:	03c9      	lsls	r1, r1, #15
     936:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     93a:	03c0      	lsls	r0, r0, #15
     93c:	f240 33e7 	movw	r3, #999	; 0x3e7
     940:	18c0      	adds	r0, r0, r3
     942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     946:	f04f 0300 	mov.w	r3, #0
     94a:	f141 0100 	adc.w	r1, r1, #0
     94e:	f7ff fdb9 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     952:	f009 f97d 	bl	9c50 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     956:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     95a:	f146 0600 	adc.w	r6, r6, #0
     95e:	e7b9      	b.n	8d4 <thread_sensor_code+0xd4>
     960:	0000c288 	.word	0x0000c288
     964:	0000c2dc 	.word	0x0000c2dc
     968:	3b40300c 	.word	0x3b40300c
     96c:	0000c324 	.word	0x0000c324
     970:	200005fc 	.word	0x200005fc
     974:	200001dc 	.word	0x200001dc
     978:	0000c348 	.word	0x0000c348
     97c:	20000600 	.word	0x20000600
     980:	0000c2a4 	.word	0x0000c2a4
     984:	0000c308 	.word	0x0000c308

00000988 <thread_output_code>:
        
  }
}

void thread_output_code(void *argA , void *argB, void *argC)
{
     988:	b510      	push	{r4, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     98a:	4817      	ldr	r0, [pc, #92]	; (9e8 <thread_output_code+0x60>)
     98c:	f00a f966 	bl	ac5c <printk>
    long int nact = 0;
     990:	2400      	movs	r4, #0
	return z_impl_k_sem_take(sem, timeout);
     992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     99a:	4814      	ldr	r0, [pc, #80]	; (9ec <thread_output_code+0x64>)
     99c:	f007 febc 	bl	8718 <z_impl_k_sem_take>
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     9a0:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     9a2:	f00b fa5c 	bl	be5e <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     9a6:	4602      	mov	r2, r0
     9a8:	014b      	lsls	r3, r1, #5
     9aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     9ae:	0140      	lsls	r0, r0, #5
     9b0:	1a80      	subs	r0, r0, r2
     9b2:	eb63 0301 	sbc.w	r3, r3, r1
     9b6:	009b      	lsls	r3, r3, #2
     9b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     9bc:	0080      	lsls	r0, r0, #2
     9be:	1880      	adds	r0, r0, r2
     9c0:	eb43 0301 	adc.w	r3, r3, r1
     9c4:	00db      	lsls	r3, r3, #3
     9c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     9ca:	f3c0 3010 	ubfx	r0, r0, #12, #17
     9ce:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     9d2:	0bdb      	lsrs	r3, r3, #15
     9d4:	4621      	mov	r1, r4
     9d6:	4806      	ldr	r0, [pc, #24]	; (9f0 <thread_output_code+0x68>)
     9d8:	f00a f940 	bl	ac5c <printk>
        printk("Task C read bc value: %d\n",bc);
     9dc:	4b05      	ldr	r3, [pc, #20]	; (9f4 <thread_output_code+0x6c>)
     9de:	8819      	ldrh	r1, [r3, #0]
     9e0:	4805      	ldr	r0, [pc, #20]	; (9f8 <thread_output_code+0x70>)
     9e2:	f00a f93b 	bl	ac5c <printk>
    while(1) {
     9e6:	e7d4      	b.n	992 <thread_output_code+0xa>
     9e8:	0000c368 	.word	0x0000c368
     9ec:	20000610 	.word	0x20000610
     9f0:	0000c3a4 	.word	0x0000c3a4
     9f4:	200001de 	.word	0x200001de
     9f8:	0000c3dc 	.word	0x0000c3dc

000009fc <main>:
void main(void) {
     9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a00:	b088      	sub	sp, #32
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     a02:	4830      	ldr	r0, [pc, #192]	; (ac4 <main+0xc8>)
     a04:	f006 ff2e 	bl	7864 <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     a08:	4b2f      	ldr	r3, [pc, #188]	; (ac8 <main+0xcc>)
     a0a:	6018      	str	r0, [r3, #0]
	if (!adc_dev) {
     a0c:	2800      	cmp	r0, #0
     a0e:	d050      	beq.n	ab2 <main+0xb6>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     a10:	4b2d      	ldr	r3, [pc, #180]	; (ac8 <main+0xcc>)
     a12:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
     a14:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	492c      	ldr	r1, [pc, #176]	; (acc <main+0xd0>)
     a1a:	4798      	blx	r3
    if (err) {
     a1c:	4601      	mov	r1, r0
     a1e:	2800      	cmp	r0, #0
     a20:	d14b      	bne.n	aba <main+0xbe>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     a22:	2501      	movs	r5, #1
     a24:	4b2a      	ldr	r3, [pc, #168]	; (ad0 <main+0xd4>)
     a26:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     a28:	482a      	ldr	r0, [pc, #168]	; (ad4 <main+0xd8>)
     a2a:	f003 fb41 	bl	40b0 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     a2e:	462a      	mov	r2, r5
     a30:	2100      	movs	r1, #0
     a32:	4829      	ldr	r0, [pc, #164]	; (ad8 <main+0xdc>)
     a34:	f00b f9bd 	bl	bdb2 <z_impl_k_sem_init>
     a38:	462a      	mov	r2, r5
     a3a:	2100      	movs	r1, #0
     a3c:	4827      	ldr	r0, [pc, #156]	; (adc <main+0xe0>)
     a3e:	f00b f9b8 	bl	bdb2 <z_impl_k_sem_init>
        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
     a42:	2600      	movs	r6, #0
     a44:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     a46:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a4a:	2400      	movs	r4, #0
     a4c:	9404      	str	r4, [sp, #16]
     a4e:	9503      	str	r5, [sp, #12]
     a50:	9402      	str	r4, [sp, #8]
     a52:	9401      	str	r4, [sp, #4]
     a54:	9400      	str	r4, [sp, #0]
     a56:	4b22      	ldr	r3, [pc, #136]	; (ae0 <main+0xe4>)
     a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a5c:	4921      	ldr	r1, [pc, #132]	; (ae4 <main+0xe8>)
     a5e:	4822      	ldr	r0, [pc, #136]	; (ae8 <main+0xec>)
     a60:	f007 fb2a 	bl	80b8 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
     a64:	4b21      	ldr	r3, [pc, #132]	; (aec <main+0xf0>)
     a66:	6018      	str	r0, [r3, #0]
     a68:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a6c:	9404      	str	r4, [sp, #16]
     a6e:	9503      	str	r5, [sp, #12]
     a70:	9402      	str	r4, [sp, #8]
     a72:	9401      	str	r4, [sp, #4]
     a74:	9400      	str	r4, [sp, #0]
     a76:	4b1e      	ldr	r3, [pc, #120]	; (af0 <main+0xf4>)
     a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a7c:	491d      	ldr	r1, [pc, #116]	; (af4 <main+0xf8>)
     a7e:	481e      	ldr	r0, [pc, #120]	; (af8 <main+0xfc>)
     a80:	f007 fb1a 	bl	80b8 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
     a84:	f8df 8074 	ldr.w	r8, [pc, #116]	; afc <main+0x100>
     a88:	f8c8 0000 	str.w	r0, [r8]
     a8c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a90:	9404      	str	r4, [sp, #16]
     a92:	9503      	str	r5, [sp, #12]
     a94:	9402      	str	r4, [sp, #8]
     a96:	9401      	str	r4, [sp, #4]
     a98:	9400      	str	r4, [sp, #0]
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <main+0x104>)
     a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     aa0:	4918      	ldr	r1, [pc, #96]	; (b04 <main+0x108>)
     aa2:	4819      	ldr	r0, [pc, #100]	; (b08 <main+0x10c>)
     aa4:	f007 fb08 	bl	80b8 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_output_data, thread_output_stack,
     aa8:	f8c8 0000 	str.w	r0, [r8]
} 
     aac:	b008      	add	sp, #32
     aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("ADC device_get_binding() failed\n");
     ab2:	4816      	ldr	r0, [pc, #88]	; (b0c <main+0x110>)
     ab4:	f00a f8d2 	bl	ac5c <printk>
     ab8:	e7aa      	b.n	a10 <main+0x14>
        printk("adc_channel_setup() failed with error code %d\n", err);
     aba:	4815      	ldr	r0, [pc, #84]	; (b10 <main+0x114>)
     abc:	f00a f8ce 	bl	ac5c <printk>
     ac0:	e7af      	b.n	a22 <main+0x26>
     ac2:	bf00      	nop
     ac4:	0000c3f8 	.word	0x0000c3f8
     ac8:	200005f8 	.word	0x200005f8
     acc:	0000c570 	.word	0x0000c570
     ad0:	40007000 	.word	0x40007000
     ad4:	0000c454 	.word	0x0000c454
     ad8:	20000600 	.word	0x20000600
     adc:	20000610 	.word	0x20000610
     ae0:	00000801 	.word	0x00000801
     ae4:	200013a0 	.word	0x200013a0
     ae8:	200003c0 	.word	0x200003c0
     aec:	20000624 	.word	0x20000624
     af0:	00000b15 	.word	0x00000b15
     af4:	200017c0 	.word	0x200017c0
     af8:	20000310 	.word	0x20000310
     afc:	20000620 	.word	0x20000620
     b00:	00000989 	.word	0x00000989
     b04:	20001be0 	.word	0x20001be0
     b08:	20000260 	.word	0x20000260
     b0c:	0000c400 	.word	0x0000c400
     b10:	0000c424 	.word	0x0000c424

00000b14 <thread_processing_code>:
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	b091      	sub	sp, #68	; 0x44
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
     b18:	2400      	movs	r4, #0
     b1a:	940b      	str	r4, [sp, #44]	; 0x2c
     b1c:	940c      	str	r4, [sp, #48]	; 0x30
     b1e:	940d      	str	r4, [sp, #52]	; 0x34
     b20:	940e      	str	r4, [sp, #56]	; 0x38
     b22:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     b26:	4837      	ldr	r0, [pc, #220]	; (c04 <thread_processing_code+0xf0>)
     b28:	f00a f898 	bl	ac5c <printk>
    int iterations = 0;
     b2c:	4625      	mov	r5, r4
     b2e:	e034      	b.n	b9a <thread_processing_code+0x86>
            uint16_t avg = precedentsAverage(precedents, current_read, 10);
     b30:	220a      	movs	r2, #10
     b32:	4631      	mov	r1, r6
     b34:	a80b      	add	r0, sp, #44	; 0x2c
     b36:	f00a f830 	bl	ab9a <precedentsAverage>
     b3a:	4605      	mov	r5, r0
            bc = avg;
     b3c:	4b32      	ldr	r3, [pc, #200]	; (c08 <thread_processing_code+0xf4>)
     b3e:	8018      	strh	r0, [r3, #0]
	z_impl_k_sem_give(sem);
     b40:	4832      	ldr	r0, [pc, #200]	; (c0c <thread_processing_code+0xf8>)
     b42:	f007 fda5 	bl	8690 <z_impl_k_sem_give>
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d, current=%d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], precedents[9], avg, current_read);
     b46:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     b4a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
     b4e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
     b52:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
     b56:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
     b5a:	f8bd c03c 	ldrh.w	ip, [sp, #60]	; 0x3c
     b5e:	f8bd e03e 	ldrh.w	lr, [sp, #62]	; 0x3e
     b62:	9608      	str	r6, [sp, #32]
     b64:	9507      	str	r5, [sp, #28]
     b66:	f8cd e018 	str.w	lr, [sp, #24]
     b6a:	f8cd c014 	str.w	ip, [sp, #20]
     b6e:	9704      	str	r7, [sp, #16]
     b70:	9003      	str	r0, [sp, #12]
     b72:	9102      	str	r1, [sp, #8]
     b74:	9201      	str	r2, [sp, #4]
     b76:	9300      	str	r3, [sp, #0]
     b78:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     b7c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
     b80:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
     b84:	4822      	ldr	r0, [pc, #136]	; (c10 <thread_processing_code+0xfc>)
     b86:	f00a f869 	bl	ac5c <printk>
            precedents[0] = current_read;
     b8a:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
            iterations = 1;
     b8e:	2501      	movs	r5, #1
        printk("Thread B set bc value to: %d \n",bc); 
     b90:	4b1d      	ldr	r3, [pc, #116]	; (c08 <thread_processing_code+0xf4>)
     b92:	8819      	ldrh	r1, [r3, #0]
     b94:	481f      	ldr	r0, [pc, #124]	; (c14 <thread_processing_code+0x100>)
     b96:	f00a f861 	bl	ac5c <printk>
	return z_impl_k_sem_take(sem, timeout);
     b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ba2:	481d      	ldr	r0, [pc, #116]	; (c18 <thread_processing_code+0x104>)
     ba4:	f007 fdb8 	bl	8718 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     ba8:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     baa:	f00b f958 	bl	be5e <z_impl_k_uptime_ticks>
     bae:	4602      	mov	r2, r0
     bb0:	014b      	lsls	r3, r1, #5
     bb2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     bb6:	0140      	lsls	r0, r0, #5
     bb8:	1a80      	subs	r0, r0, r2
     bba:	eb63 0301 	sbc.w	r3, r3, r1
     bbe:	009b      	lsls	r3, r3, #2
     bc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     bc4:	0080      	lsls	r0, r0, #2
     bc6:	1880      	adds	r0, r0, r2
     bc8:	eb43 0301 	adc.w	r3, r3, r1
     bcc:	00db      	lsls	r3, r3, #3
     bce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     bd2:	f3c0 3010 	ubfx	r0, r0, #12, #17
     bd6:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     bda:	0bdb      	lsrs	r3, r3, #15
     bdc:	4621      	mov	r1, r4
     bde:	480f      	ldr	r0, [pc, #60]	; (c1c <thread_processing_code+0x108>)
     be0:	f00a f83c 	bl	ac5c <printk>
        printk("Task B read ab value: %d\n",ab);
     be4:	4e0e      	ldr	r6, [pc, #56]	; (c20 <thread_processing_code+0x10c>)
     be6:	8831      	ldrh	r1, [r6, #0]
     be8:	480e      	ldr	r0, [pc, #56]	; (c24 <thread_processing_code+0x110>)
     bea:	f00a f837 	bl	ac5c <printk>
        current_read = ab;
     bee:	8836      	ldrh	r6, [r6, #0]
        if(iterations > 9){
     bf0:	2d09      	cmp	r5, #9
     bf2:	dc9d      	bgt.n	b30 <thread_processing_code+0x1c>
            precedents[iterations++] = current_read;
     bf4:	ab10      	add	r3, sp, #64	; 0x40
     bf6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     bfa:	f823 6c14 	strh.w	r6, [r3, #-20]
     bfe:	3501      	adds	r5, #1
     c00:	e7c6      	b.n	b90 <thread_processing_code+0x7c>
     c02:	bf00      	nop
     c04:	0000c488 	.word	0x0000c488
     c08:	200001de 	.word	0x200001de
     c0c:	20000610 	.word	0x20000610
     c10:	0000c518 	.word	0x0000c518
     c14:	0000c550 	.word	0x0000c550
     c18:	20000600 	.word	0x20000600
     c1c:	0000c4c4 	.word	0x0000c4c4
     c20:	200001dc 	.word	0x200001dc
     c24:	0000c4fc 	.word	0x0000c4fc

00000c28 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c2c:	b08d      	sub	sp, #52	; 0x34
     c2e:	9205      	str	r2, [sp, #20]
     c30:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     c32:	4613      	mov	r3, r2
     c34:	f002 0204 	and.w	r2, r2, #4
     c38:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     c3a:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     c3e:	f010 0303 	ands.w	r3, r0, #3
     c42:	9302      	str	r3, [sp, #8]
     c44:	f040 8293 	bne.w	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
     c48:	4607      	mov	r7, r0
     c4a:	468a      	mov	sl, r1
     c4c:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     c4e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     c50:	2800      	cmp	r0, #0
     c52:	d041      	beq.n	cd8 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     c54:	b127      	cbz	r7, c60 <cbvprintf_package+0x38>
     c56:	1be3      	subs	r3, r4, r7
     c58:	3304      	adds	r3, #4
     c5a:	4553      	cmp	r3, sl
     c5c:	f200 828a 	bhi.w	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     c60:	9b03      	ldr	r3, [sp, #12]
     c62:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     c64:	f8dd b008 	ldr.w	fp, [sp, #8]
     c68:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     c6c:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     c70:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     c72:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     c76:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     c78:	b10f      	cbz	r7, c7e <cbvprintf_package+0x56>
				*(const char **)buf = s;
     c7a:	9b03      	ldr	r3, [sp, #12]
     c7c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c7e:	1e53      	subs	r3, r2, #1
     c80:	9307      	str	r3, [sp, #28]
     c82:	2a00      	cmp	r2, #0
     c84:	f340 80b7 	ble.w	df6 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     c88:	9b05      	ldr	r3, [sp, #20]
     c8a:	f013 0202 	ands.w	r2, r3, #2
     c8e:	d021      	beq.n	cd4 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c90:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     c92:	1be1      	subs	r1, r4, r7
     c94:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     c96:	b11a      	cbz	r2, ca0 <cbvprintf_package+0x78>
     c98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     c9c:	f080 80bf 	bcs.w	e1e <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     ca0:	f1bb 0f0f 	cmp.w	fp, #15
     ca4:	f200 80ce 	bhi.w	e44 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     ca8:	2f00      	cmp	r7, #0
     caa:	f000 80e2 	beq.w	e72 <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     cae:	b2db      	uxtb	r3, r3
     cb0:	aa0c      	add	r2, sp, #48	; 0x30
     cb2:	445a      	add	r2, fp
     cb4:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     cb8:	2800      	cmp	r0, #0
     cba:	f000 80d6 	beq.w	e6a <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
     cc2:	aa0c      	add	r2, sp, #48	; 0x30
     cc4:	445a      	add	r2, fp
     cc6:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     cca:	9b04      	ldr	r3, [sp, #16]
     ccc:	3301      	adds	r3, #1
     cce:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     cd0:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     cd4:	3404      	adds	r4, #4
     cd6:	e0f6      	b.n	ec6 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     cd8:	f001 0a07 	and.w	sl, r1, #7
     cdc:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     cde:	f1ca 0a08 	rsb	sl, sl, #8
     ce2:	e7b7      	b.n	c54 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     ce4:	2b25      	cmp	r3, #37	; 0x25
     ce6:	f040 80ed 	bne.w	ec4 <cbvprintf_package+0x29c>
				parsing = true;
     cea:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     cec:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     cf0:	46c1      	mov	r9, r8
			continue;
     cf2:	e0e7      	b.n	ec4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
     cf4:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     cf8:	46c1      	mov	r9, r8
			continue;
     cfa:	e0e3      	b.n	ec4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
     cfc:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     d00:	46c1      	mov	r9, r8
			continue;
     d02:	e0df      	b.n	ec4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
     d04:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     d08:	46c1      	mov	r9, r8
			continue;
     d0a:	e0db      	b.n	ec4 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
     d0c:	782a      	ldrb	r2, [r5, #0]
     d0e:	2a6c      	cmp	r2, #108	; 0x6c
     d10:	d026      	beq.n	d60 <cbvprintf_package+0x138>
			parsing = false;
     d12:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     d14:	eb04 0208 	add.w	r2, r4, r8
     d18:	3a01      	subs	r2, #1
     d1a:	f1c8 0100 	rsb	r1, r8, #0
     d1e:	400a      	ands	r2, r1
     d20:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     d22:	b127      	cbz	r7, d2e <cbvprintf_package+0x106>
     d24:	1bd1      	subs	r1, r2, r7
     d26:	4449      	add	r1, r9
     d28:	4551      	cmp	r1, sl
     d2a:	f200 8226 	bhi.w	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
		if (*fmt == 's') {
     d2e:	2b73      	cmp	r3, #115	; 0x73
     d30:	d059      	beq.n	de6 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     d32:	f1b9 0f04 	cmp.w	r9, #4
     d36:	f000 80a8 	beq.w	e8a <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     d3a:	f1b9 0f08 	cmp.w	r9, #8
     d3e:	f040 80ac 	bne.w	e9a <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
     d42:	9b16      	ldr	r3, [sp, #88]	; 0x58
     d44:	3307      	adds	r3, #7
     d46:	f023 0307 	bic.w	r3, r3, #7
     d4a:	f103 0108 	add.w	r1, r3, #8
     d4e:	9116      	str	r1, [sp, #88]	; 0x58
     d50:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     d54:	b10f      	cbz	r7, d5a <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     d56:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     d5a:	f102 0408 	add.w	r4, r2, #8
     d5e:	e0b1      	b.n	ec4 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
     d60:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     d64:	2a6c      	cmp	r2, #108	; 0x6c
     d66:	d004      	beq.n	d72 <cbvprintf_package+0x14a>
			parsing = false;
     d68:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     d6a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     d6e:	46c1      	mov	r9, r8
     d70:	e7d0      	b.n	d14 <cbvprintf_package+0xec>
			parsing = false;
     d72:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     d74:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     d78:	46c1      	mov	r9, r8
     d7a:	e7cb      	b.n	d14 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     d7c:	782b      	ldrb	r3, [r5, #0]
     d7e:	2b4c      	cmp	r3, #76	; 0x4c
     d80:	d01c      	beq.n	dbc <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     d82:	9b16      	ldr	r3, [sp, #88]	; 0x58
     d84:	3307      	adds	r3, #7
     d86:	f023 0307 	bic.w	r3, r3, #7
     d8a:	f103 0208 	add.w	r2, r3, #8
     d8e:	9216      	str	r2, [sp, #88]	; 0x58
     d90:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     d94:	1de2      	adds	r2, r4, #7
     d96:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     d9a:	b147      	cbz	r7, dae <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     d9c:	1bd3      	subs	r3, r2, r7
     d9e:	3308      	adds	r3, #8
     da0:	4553      	cmp	r3, sl
     da2:	d815      	bhi.n	dd0 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     da4:	782b      	ldrb	r3, [r5, #0]
     da6:	2b4c      	cmp	r3, #76	; 0x4c
     da8:	d015      	beq.n	dd6 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     daa:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     dae:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     db2:	2600      	movs	r6, #0
			continue;
     db4:	f04f 0808 	mov.w	r8, #8
     db8:	46c1      	mov	r9, r8
     dba:	e083      	b.n	ec4 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
     dbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
     dbe:	3307      	adds	r3, #7
     dc0:	f023 0307 	bic.w	r3, r3, #7
     dc4:	f103 0208 	add.w	r2, r3, #8
     dc8:	9216      	str	r2, [sp, #88]	; 0x58
     dca:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     dce:	e7e1      	b.n	d94 <cbvprintf_package+0x16c>
					return -ENOSPC;
     dd0:	f06f 001b 	mvn.w	r0, #27
     dd4:	e1c8      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
					*(long double *)buf = v.ld;
     dd6:	e9c2 0100 	strd	r0, r1, [r2]
     dda:	e7e8      	b.n	dae <cbvprintf_package+0x186>
			parsing = false;
     ddc:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     dde:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     de2:	46c1      	mov	r9, r8
     de4:	e796      	b.n	d14 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     de6:	9b16      	ldr	r3, [sp, #88]	; 0x58
     de8:	1d1a      	adds	r2, r3, #4
     dea:	9216      	str	r2, [sp, #88]	; 0x58
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     df0:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     df2:	4665      	mov	r5, ip
     df4:	e740      	b.n	c78 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     df6:	4bbb      	ldr	r3, [pc, #748]	; (10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
     df8:	9a03      	ldr	r2, [sp, #12]
     dfa:	429a      	cmp	r2, r3
     dfc:	d304      	bcc.n	e08 <cbvprintf_package+0x1e0>
     dfe:	4bba      	ldr	r3, [pc, #744]	; (10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     e00:	429a      	cmp	r2, r3
     e02:	d30a      	bcc.n	e1a <cbvprintf_package+0x1f2>
     e04:	2300      	movs	r3, #0
     e06:	e000      	b.n	e0a <cbvprintf_package+0x1e2>
     e08:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     e0a:	2b00      	cmp	r3, #0
     e0c:	f47f af3c 	bne.w	c88 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     e10:	9b05      	ldr	r3, [sp, #20]
     e12:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     e16:	2000      	movs	r0, #0
     e18:	e73b      	b.n	c92 <cbvprintf_package+0x6a>
     e1a:	2301      	movs	r3, #1
     e1c:	e7f5      	b.n	e0a <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
     e1e:	4cb3      	ldr	r4, [pc, #716]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
     e20:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     e24:	4622      	mov	r2, r4
     e26:	49b2      	ldr	r1, [pc, #712]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     e28:	48b2      	ldr	r0, [pc, #712]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
     e2a:	f00a f89c 	bl	af66 <assert_print>
     e2e:	48b2      	ldr	r0, [pc, #712]	; (10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     e30:	f00a f899 	bl	af66 <assert_print>
     e34:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     e38:	4620      	mov	r0, r4
     e3a:	f00a f88d 	bl	af58 <assert_post_action>
					return -EINVAL;
     e3e:	f06f 0015 	mvn.w	r0, #21
     e42:	e191      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
					__ASSERT(false, "str_ptr_pos[] too small");
     e44:	4ca9      	ldr	r4, [pc, #676]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
     e46:	f240 13f5 	movw	r3, #501	; 0x1f5
     e4a:	4622      	mov	r2, r4
     e4c:	49a8      	ldr	r1, [pc, #672]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     e4e:	48a9      	ldr	r0, [pc, #676]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
     e50:	f00a f889 	bl	af66 <assert_print>
     e54:	48a9      	ldr	r0, [pc, #676]	; (10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>)
     e56:	f00a f886 	bl	af66 <assert_print>
     e5a:	f240 11f5 	movw	r1, #501	; 0x1f5
     e5e:	4620      	mov	r0, r4
     e60:	f00a f87a 	bl	af58 <assert_post_action>
					return -EINVAL;
     e64:	f06f 0015 	mvn.w	r0, #21
     e68:	e17e      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
						s_rw_cnt++;
     e6a:	9b06      	ldr	r3, [sp, #24]
     e6c:	3301      	adds	r3, #1
     e6e:	9306      	str	r3, [sp, #24]
     e70:	e72e      	b.n	cd0 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     e72:	b908      	cbnz	r0, e78 <cbvprintf_package+0x250>
     e74:	9b01      	ldr	r3, [sp, #4]
     e76:	b113      	cbz	r3, e7e <cbvprintf_package+0x256>
					len += 1;
     e78:	f10a 0a01 	add.w	sl, sl, #1
     e7c:	e728      	b.n	cd0 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     e7e:	9803      	ldr	r0, [sp, #12]
     e80:	f00a f9eb 	bl	b25a <strlen>
     e84:	1c83      	adds	r3, r0, #2
     e86:	449a      	add	sl, r3
     e88:	e722      	b.n	cd0 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     e8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     e8c:	1d19      	adds	r1, r3, #4
     e8e:	9116      	str	r1, [sp, #88]	; 0x58
     e90:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     e92:	b107      	cbz	r7, e96 <cbvprintf_package+0x26e>
				*(int *)buf = v;
     e94:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     e96:	1d14      	adds	r4, r2, #4
     e98:	e014      	b.n	ec4 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     e9a:	4c94      	ldr	r4, [pc, #592]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
     e9c:	f240 2331 	movw	r3, #561	; 0x231
     ea0:	4622      	mov	r2, r4
     ea2:	4993      	ldr	r1, [pc, #588]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     ea4:	4893      	ldr	r0, [pc, #588]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
     ea6:	f00a f85e 	bl	af66 <assert_print>
     eaa:	4649      	mov	r1, r9
     eac:	4894      	ldr	r0, [pc, #592]	; (1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
     eae:	f00a f85a 	bl	af66 <assert_print>
     eb2:	f240 2131 	movw	r1, #561	; 0x231
     eb6:	4620      	mov	r0, r4
     eb8:	f00a f84e 	bl	af58 <assert_post_action>
			return -EINVAL;
     ebc:	f06f 0015 	mvn.w	r0, #21
     ec0:	e152      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		switch (*fmt) {
     ec2:	2600      	movs	r6, #0
     ec4:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     ec6:	f105 0c01 	add.w	ip, r5, #1
     eca:	786b      	ldrb	r3, [r5, #1]
     ecc:	2b00      	cmp	r3, #0
     ece:	f000 80c1 	beq.w	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
		if (!parsing) {
     ed2:	2e00      	cmp	r6, #0
     ed4:	f43f af06 	beq.w	ce4 <cbvprintf_package+0xbc>
		switch (*fmt) {
     ed8:	f1a3 0120 	sub.w	r1, r3, #32
     edc:	295a      	cmp	r1, #90	; 0x5a
     ede:	d8f0      	bhi.n	ec2 <cbvprintf_package+0x29a>
     ee0:	a201      	add	r2, pc, #4	; (adr r2, ee8 <cbvprintf_package+0x2c0>)
     ee2:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     ee6:	bf00      	nop
     ee8:	00000ec5 	.word	0x00000ec5
     eec:	00000ec3 	.word	0x00000ec3
     ef0:	00000ec3 	.word	0x00000ec3
     ef4:	00000ec5 	.word	0x00000ec5
     ef8:	00000ec3 	.word	0x00000ec3
     efc:	00000ec3 	.word	0x00000ec3
     f00:	00000ec3 	.word	0x00000ec3
     f04:	00000ec3 	.word	0x00000ec3
     f08:	00000ec3 	.word	0x00000ec3
     f0c:	00000ec3 	.word	0x00000ec3
     f10:	00000d15 	.word	0x00000d15
     f14:	00000ec5 	.word	0x00000ec5
     f18:	00000ec3 	.word	0x00000ec3
     f1c:	00000ec5 	.word	0x00000ec5
     f20:	00000ec5 	.word	0x00000ec5
     f24:	00000ec3 	.word	0x00000ec3
     f28:	00000ec5 	.word	0x00000ec5
     f2c:	00000ec5 	.word	0x00000ec5
     f30:	00000ec5 	.word	0x00000ec5
     f34:	00000ec5 	.word	0x00000ec5
     f38:	00000ec5 	.word	0x00000ec5
     f3c:	00000ec5 	.word	0x00000ec5
     f40:	00000ec5 	.word	0x00000ec5
     f44:	00000ec5 	.word	0x00000ec5
     f48:	00000ec5 	.word	0x00000ec5
     f4c:	00000ec5 	.word	0x00000ec5
     f50:	00000ec3 	.word	0x00000ec3
     f54:	00000ec3 	.word	0x00000ec3
     f58:	00000ec3 	.word	0x00000ec3
     f5c:	00000ec3 	.word	0x00000ec3
     f60:	00000ec3 	.word	0x00000ec3
     f64:	00000ec3 	.word	0x00000ec3
     f68:	00000ec3 	.word	0x00000ec3
     f6c:	00000d7d 	.word	0x00000d7d
     f70:	00000ec3 	.word	0x00000ec3
     f74:	00000ec3 	.word	0x00000ec3
     f78:	00000ec3 	.word	0x00000ec3
     f7c:	00000d7d 	.word	0x00000d7d
     f80:	00000d7d 	.word	0x00000d7d
     f84:	00000d7d 	.word	0x00000d7d
     f88:	00000ec3 	.word	0x00000ec3
     f8c:	00000ec3 	.word	0x00000ec3
     f90:	00000ec3 	.word	0x00000ec3
     f94:	00000ec3 	.word	0x00000ec3
     f98:	00000ec5 	.word	0x00000ec5
     f9c:	00000ec3 	.word	0x00000ec3
     fa0:	00000ec3 	.word	0x00000ec3
     fa4:	00000ec3 	.word	0x00000ec3
     fa8:	00000ec3 	.word	0x00000ec3
     fac:	00000ec3 	.word	0x00000ec3
     fb0:	00000ec3 	.word	0x00000ec3
     fb4:	00000ec3 	.word	0x00000ec3
     fb8:	00000ec3 	.word	0x00000ec3
     fbc:	00000ec3 	.word	0x00000ec3
     fc0:	00000ec3 	.word	0x00000ec3
     fc4:	00000ec3 	.word	0x00000ec3
     fc8:	00000d0d 	.word	0x00000d0d
     fcc:	00000ec3 	.word	0x00000ec3
     fd0:	00000ec3 	.word	0x00000ec3
     fd4:	00000ec3 	.word	0x00000ec3
     fd8:	00000ec3 	.word	0x00000ec3
     fdc:	00000ec3 	.word	0x00000ec3
     fe0:	00000ec3 	.word	0x00000ec3
     fe4:	00000ec3 	.word	0x00000ec3
     fe8:	00000ec3 	.word	0x00000ec3
     fec:	00000d7d 	.word	0x00000d7d
     ff0:	00000ec3 	.word	0x00000ec3
     ff4:	00000d0d 	.word	0x00000d0d
     ff8:	00000d0d 	.word	0x00000d0d
     ffc:	00000d7d 	.word	0x00000d7d
    1000:	00000d7d 	.word	0x00000d7d
    1004:	00000d7d 	.word	0x00000d7d
    1008:	00000ec5 	.word	0x00000ec5
    100c:	00000d0d 	.word	0x00000d0d
    1010:	00000cf5 	.word	0x00000cf5
    1014:	00000ec3 	.word	0x00000ec3
    1018:	00000ec5 	.word	0x00000ec5
    101c:	00000ec3 	.word	0x00000ec3
    1020:	00000ddd 	.word	0x00000ddd
    1024:	00000d0d 	.word	0x00000d0d
    1028:	00000ddd 	.word	0x00000ddd
    102c:	00000ec3 	.word	0x00000ec3
    1030:	00000ec3 	.word	0x00000ec3
    1034:	00000ddd 	.word	0x00000ddd
    1038:	00000d05 	.word	0x00000d05
    103c:	00000d0d 	.word	0x00000d0d
    1040:	00000ec3 	.word	0x00000ec3
    1044:	00000ec3 	.word	0x00000ec3
    1048:	00000d0d 	.word	0x00000d0d
    104c:	00000ec3 	.word	0x00000ec3
    1050:	00000cfd 	.word	0x00000cfd
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    1054:	1be3      	subs	r3, r4, r7
    1056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    105a:	d211      	bcs.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    105c:	b31f      	cbz	r7, 10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    105e:	2200      	movs	r2, #0
    1060:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    1062:	089b      	lsrs	r3, r3, #2
    1064:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    1066:	9b01      	ldr	r3, [sp, #4]
    1068:	b30b      	cbz	r3, 10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    106a:	9b06      	ldr	r3, [sp, #24]
    106c:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    106e:	9b04      	ldr	r3, [sp, #16]
    1070:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    1072:	bbab      	cbnz	r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    1074:	9d02      	ldr	r5, [sp, #8]
    1076:	f8dd 9010 	ldr.w	r9, [sp, #16]
    107a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    107e:	e058      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
		__ASSERT(false, "too many format args");
    1080:	4c1a      	ldr	r4, [pc, #104]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
    1082:	f240 233d 	movw	r3, #573	; 0x23d
    1086:	4622      	mov	r2, r4
    1088:	4919      	ldr	r1, [pc, #100]	; (10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    108a:	481a      	ldr	r0, [pc, #104]	; (10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>)
    108c:	f009 ff6b 	bl	af66 <assert_print>
    1090:	481c      	ldr	r0, [pc, #112]	; (1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    1092:	f009 ff68 	bl	af66 <assert_print>
    1096:	f240 213d 	movw	r1, #573	; 0x23d
    109a:	4620      	mov	r0, r4
    109c:	f009 ff5c 	bl	af58 <assert_post_action>
		return -EINVAL;
    10a0:	f06f 0015 	mvn.w	r0, #21
    10a4:	e060      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    10a6:	4453      	add	r3, sl
    10a8:	f1a3 0008 	sub.w	r0, r3, #8
    10ac:	e05c      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		buf0[1] = s_rw_cnt;
    10ae:	9b06      	ldr	r3, [sp, #24]
    10b0:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    10b2:	e7dc      	b.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
			*buf++ = pos;
    10b4:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    10b8:	3301      	adds	r3, #1
    10ba:	459b      	cmp	fp, r3
    10bc:	d9da      	bls.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    10be:	aa0c      	add	r2, sp, #48	; 0x30
    10c0:	441a      	add	r2, r3
    10c2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    10c6:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    10ca:	2a00      	cmp	r2, #0
    10cc:	daf4      	bge.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    10ce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    10d2:	1be2      	subs	r2, r4, r7
    10d4:	3201      	adds	r2, #1
    10d6:	4552      	cmp	r2, sl
    10d8:	d9ec      	bls.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
				return -ENOSPC;
    10da:	f06f 001b 	mvn.w	r0, #27
    10de:	e043      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		for (i = 0; i < s_idx; i++) {
    10e0:	9b02      	ldr	r3, [sp, #8]
    10e2:	e7ea      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10e4:	0000bec4 	.word	0x0000bec4
    10e8:	0000e2a4 	.word	0x0000e2a4
    10ec:	0000c578 	.word	0x0000c578
    10f0:	0000cc7c 	.word	0x0000cc7c
    10f4:	0000c5c0 	.word	0x0000c5c0
    10f8:	0000c5e0 	.word	0x0000c5e0
    10fc:	0000c604 	.word	0x0000c604
    1100:	0000c620 	.word	0x0000c620
    1104:	0000c638 	.word	0x0000c638
		if (rws_pos_en) {
    1108:	9b01      	ldr	r3, [sp, #4]
    110a:	b1f3      	cbz	r3, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
			size = 0;
    110c:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    110e:	1be3      	subs	r3, r4, r7
    1110:	4433      	add	r3, r6
    1112:	3301      	adds	r3, #1
    1114:	4553      	cmp	r3, sl
    1116:	d833      	bhi.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    1118:	ab0c      	add	r3, sp, #48	; 0x30
    111a:	442b      	add	r3, r5
    111c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1120:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    1124:	4632      	mov	r2, r6
    1126:	4641      	mov	r1, r8
    1128:	4620      	mov	r0, r4
    112a:	f00a f8b4 	bl	b296 <memcpy>
		buf += size;
    112e:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    1130:	3501      	adds	r5, #1
    1132:	45ab      	cmp	fp, r5
    1134:	d917      	bls.n	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1136:	f1b9 0f00 	cmp.w	r9, #0
    113a:	d0e5      	beq.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    113c:	ab0c      	add	r3, sp, #48	; 0x30
    113e:	442b      	add	r3, r5
    1140:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    1144:	2b00      	cmp	r3, #0
    1146:	dadf      	bge.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
    1148:	e7f2      	b.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    114a:	ab0c      	add	r3, sp, #48	; 0x30
    114c:	442b      	add	r3, r5
    114e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1152:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1156:	2200      	movs	r2, #0
    1158:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    115c:	4640      	mov	r0, r8
    115e:	f00a f87c 	bl	b25a <strlen>
    1162:	1c46      	adds	r6, r0, #1
    1164:	e7d3      	b.n	110e <CONFIG_FPROTECT_BLOCK_SIZE+0x10e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    1166:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1168:	b00d      	add	sp, #52	; 0x34
    116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    116e:	f06f 000d 	mvn.w	r0, #13
    1172:	e7f9      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		return -ENOSPC;
    1174:	f06f 001b 	mvn.w	r0, #27
    1178:	e7f6      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
			return -ENOSPC;
    117a:	f06f 001b 	mvn.w	r0, #27
    117e:	e7f3      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
			return -ENOSPC;
    1180:	f06f 001b 	mvn.w	r0, #27
    1184:	e7f0      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    1186:	bf00      	nop

00001188 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    118c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    118e:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1192:	6081      	str	r1, [r0, #8]
	switch (method) {
    1194:	2b02      	cmp	r3, #2
    1196:	d903      	bls.n	11a0 <sys_notify_finalize+0x18>
    1198:	2b03      	cmp	r3, #3
    119a:	d102      	bne.n	11a2 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    119c:	6800      	ldr	r0, [r0, #0]
		break;
    119e:	e00e      	b.n	11be <sys_notify_finalize+0x36>
	switch (method) {
    11a0:	b963      	cbnz	r3, 11bc <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    11a2:	4d08      	ldr	r5, [pc, #32]	; (11c4 <sys_notify_finalize+0x3c>)
    11a4:	2345      	movs	r3, #69	; 0x45
    11a6:	462a      	mov	r2, r5
    11a8:	4907      	ldr	r1, [pc, #28]	; (11c8 <sys_notify_finalize+0x40>)
    11aa:	4808      	ldr	r0, [pc, #32]	; (11cc <sys_notify_finalize+0x44>)
    11ac:	f009 fedb 	bl	af66 <assert_print>
    11b0:	2145      	movs	r1, #69	; 0x45
    11b2:	4628      	mov	r0, r5
    11b4:	f009 fed0 	bl	af58 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    11b8:	2000      	movs	r0, #0
    11ba:	e000      	b.n	11be <sys_notify_finalize+0x36>
	switch (method) {
    11bc:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    11be:	2300      	movs	r3, #0
    11c0:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    11c2:	bd38      	pop	{r3, r4, r5, pc}
    11c4:	0000c650 	.word	0x0000c650
    11c8:	0000cc7c 	.word	0x0000cc7c
    11cc:	0000c5c0 	.word	0x0000c5c0

000011d0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    11d0:	4b01      	ldr	r3, [pc, #4]	; (11d8 <__printk_hook_install+0x8>)
    11d2:	6018      	str	r0, [r3, #0]
}
    11d4:	4770      	bx	lr
    11d6:	bf00      	nop
    11d8:	20000098 	.word	0x20000098

000011dc <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    11dc:	b538      	push	{r3, r4, r5, lr}
    11de:	4604      	mov	r4, r0
    11e0:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11e2:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    11e4:	2a00      	cmp	r2, #0
    11e6:	db14      	blt.n	1212 <process_complete+0x36>
    11e8:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    11ec:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    11ee:	2a01      	cmp	r2, #1
    11f0:	d91b      	bls.n	122a <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    11f2:	2b04      	cmp	r3, #4
    11f4:	d050      	beq.n	1298 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    11f6:	4c2f      	ldr	r4, [pc, #188]	; (12b4 <process_complete+0xd8>)
    11f8:	f240 131b 	movw	r3, #283	; 0x11b
    11fc:	4622      	mov	r2, r4
    11fe:	492e      	ldr	r1, [pc, #184]	; (12b8 <process_complete+0xdc>)
    1200:	482e      	ldr	r0, [pc, #184]	; (12bc <process_complete+0xe0>)
    1202:	f009 feb0 	bl	af66 <assert_print>
    1206:	f240 111b 	movw	r1, #283	; 0x11b
    120a:	4620      	mov	r0, r4
    120c:	f009 fea4 	bl	af58 <assert_post_action>
	}
}
    1210:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    1212:	e9d0 0100 	ldrd	r0, r1, [r0]
    1216:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    121a:	2300      	movs	r3, #0
    121c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    121e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    1220:	2101      	movs	r1, #1
    1222:	4620      	mov	r0, r4
    1224:	f009 fd28 	bl	ac78 <set_state>
    1228:	e7f2      	b.n	1210 <process_complete+0x34>
		*clients = mgr->clients;
    122a:	e9d0 0100 	ldrd	r0, r1, [r0]
    122e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    1232:	2200      	movs	r2, #0
    1234:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    1236:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    1238:	2b06      	cmp	r3, #6
    123a:	d00f      	beq.n	125c <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    123c:	2b05      	cmp	r3, #5
    123e:	d11d      	bne.n	127c <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    1240:	2100      	movs	r1, #0
    1242:	4620      	mov	r0, r4
    1244:	f009 fd18 	bl	ac78 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    1248:	4620      	mov	r0, r4
    124a:	f009 fd3c 	bl	acc6 <process_recheck>
    124e:	2800      	cmp	r0, #0
    1250:	d0de      	beq.n	1210 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1252:	8ba3      	ldrh	r3, [r4, #28]
    1254:	f043 0320 	orr.w	r3, r3, #32
    1258:	83a3      	strh	r3, [r4, #28]
    125a:	e7d9      	b.n	1210 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    125c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1260:	b13b      	cbz	r3, 1272 <process_complete+0x96>
				mgr->refs += 1U;
    1262:	8be2      	ldrh	r2, [r4, #30]
    1264:	3201      	adds	r2, #1
    1266:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1268:	2b00      	cmp	r3, #0
    126a:	d0f9      	beq.n	1260 <process_complete+0x84>
	return node->next;
    126c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    126e:	2b00      	cmp	r3, #0
    1270:	d1f6      	bne.n	1260 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    1272:	2102      	movs	r1, #2
    1274:	4620      	mov	r0, r4
    1276:	f009 fcff 	bl	ac78 <set_state>
    127a:	e7e5      	b.n	1248 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    127c:	4d0d      	ldr	r5, [pc, #52]	; (12b4 <process_complete+0xd8>)
    127e:	f240 1309 	movw	r3, #265	; 0x109
    1282:	462a      	mov	r2, r5
    1284:	490e      	ldr	r1, [pc, #56]	; (12c0 <process_complete+0xe4>)
    1286:	480d      	ldr	r0, [pc, #52]	; (12bc <process_complete+0xe0>)
    1288:	f009 fe6d 	bl	af66 <assert_print>
    128c:	f240 1109 	movw	r1, #265	; 0x109
    1290:	4628      	mov	r0, r5
    1292:	f009 fe61 	bl	af58 <assert_post_action>
    1296:	e7d3      	b.n	1240 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    1298:	2100      	movs	r1, #0
    129a:	f009 fced 	bl	ac78 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    129e:	4620      	mov	r0, r4
    12a0:	f009 fd11 	bl	acc6 <process_recheck>
    12a4:	2800      	cmp	r0, #0
    12a6:	d0b3      	beq.n	1210 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12a8:	8ba3      	ldrh	r3, [r4, #28]
    12aa:	f043 0320 	orr.w	r3, r3, #32
    12ae:	83a3      	strh	r3, [r4, #28]
    12b0:	e7ae      	b.n	1210 <process_complete+0x34>
    12b2:	bf00      	nop
    12b4:	0000c674 	.word	0x0000c674
    12b8:	0000cc7c 	.word	0x0000cc7c
    12bc:	0000c5c0 	.word	0x0000c5c0
    12c0:	0000c698 	.word	0x0000c698

000012c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    12c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12c8:	b083      	sub	sp, #12
    12ca:	4604      	mov	r4, r0
    12cc:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    12ce:	8b83      	ldrh	r3, [r0, #28]
    12d0:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    12d4:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    12d8:	460d      	mov	r5, r1
    12da:	b131      	cbz	r1, 12ea <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    12dc:	f1b8 0f00 	cmp.w	r8, #0
    12e0:	d112      	bne.n	1308 <process_event+0x44>
	list->head = NULL;
    12e2:	2300      	movs	r3, #0
    12e4:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    12e6:	9301      	str	r3, [sp, #4]
}
    12e8:	e0aa      	b.n	1440 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    12ea:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 15cc <process_event+0x308>
    12ee:	f240 1333 	movw	r3, #307	; 0x133
    12f2:	464a      	mov	r2, r9
    12f4:	49b6      	ldr	r1, [pc, #728]	; (15d0 <process_event+0x30c>)
    12f6:	48b7      	ldr	r0, [pc, #732]	; (15d4 <process_event+0x310>)
    12f8:	f009 fe35 	bl	af66 <assert_print>
    12fc:	f240 1133 	movw	r1, #307	; 0x133
    1300:	4648      	mov	r0, r9
    1302:	f009 fe29 	bl	af58 <assert_post_action>
    1306:	e7e9      	b.n	12dc <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    1308:	2d01      	cmp	r5, #1
    130a:	d013      	beq.n	1334 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    130c:	2d02      	cmp	r5, #2
    130e:	d116      	bne.n	133e <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1310:	8ba3      	ldrh	r3, [r4, #28]
    1312:	f043 0320 	orr.w	r3, r3, #32
    1316:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1318:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    131a:	4620      	mov	r0, r4
    131c:	f006 fd94 	bl	7e48 <z_spin_unlock_valid>
    1320:	2800      	cmp	r0, #0
    1322:	f000 819c 	beq.w	165e <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1326:	f386 8811 	msr	BASEPRI, r6
    132a:	f3bf 8f6f 	isb	sy
}
    132e:	b003      	add	sp, #12
    1330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1334:	8ba3      	ldrh	r3, [r4, #28]
    1336:	f043 0310 	orr.w	r3, r3, #16
    133a:	83a3      	strh	r3, [r4, #28]
    133c:	e7ec      	b.n	1318 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    133e:	4da3      	ldr	r5, [pc, #652]	; (15cc <process_event+0x308>)
    1340:	f44f 739e 	mov.w	r3, #316	; 0x13c
    1344:	462a      	mov	r2, r5
    1346:	49a4      	ldr	r1, [pc, #656]	; (15d8 <process_event+0x314>)
    1348:	48a2      	ldr	r0, [pc, #648]	; (15d4 <process_event+0x310>)
    134a:	f009 fe0c 	bl	af66 <assert_print>
    134e:	f44f 719e 	mov.w	r1, #316	; 0x13c
    1352:	4628      	mov	r0, r5
    1354:	f009 fe00 	bl	af58 <assert_post_action>
    1358:	e7da      	b.n	1310 <process_event+0x4c>
			evt = process_recheck(mgr);
    135a:	4620      	mov	r0, r4
    135c:	f009 fcb3 	bl	acc6 <process_recheck>
    1360:	4605      	mov	r5, r0
    1362:	e06f      	b.n	1444 <process_event+0x180>
			res = mgr->last_res;
    1364:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    1368:	464a      	mov	r2, r9
    136a:	4669      	mov	r1, sp
    136c:	4620      	mov	r0, r4
    136e:	f7ff ff35 	bl	11dc <process_complete>
		onoff_transition_fn transit = NULL;
    1372:	2500      	movs	r5, #0
    1374:	e011      	b.n	139a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1376:	2f00      	cmp	r7, #0
    1378:	f040 8081 	bne.w	147e <process_event+0x1ba>
	return list->head;
    137c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    137e:	2b00      	cmp	r3, #0
    1380:	f000 808b 	beq.w	149a <process_event+0x1d6>
			transit = mgr->transitions->start;
    1384:	6923      	ldr	r3, [r4, #16]
    1386:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1388:	2d00      	cmp	r5, #0
    138a:	f000 8094 	beq.w	14b6 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    138e:	2106      	movs	r1, #6
    1390:	4620      	mov	r0, r4
    1392:	f009 fc71 	bl	ac78 <set_state>
		res = 0;
    1396:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    139a:	8ba3      	ldrh	r3, [r4, #28]
    139c:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13a0:	45b8      	cmp	r8, r7
    13a2:	f000 810b 	beq.w	15bc <process_event+0x2f8>
    13a6:	68a2      	ldr	r2, [r4, #8]
    13a8:	2a00      	cmp	r2, #0
    13aa:	f000 8109 	beq.w	15c0 <process_event+0x2fc>
    13ae:	2201      	movs	r2, #1
		if (do_monitors
    13b0:	4617      	mov	r7, r2
    13b2:	b91a      	cbnz	r2, 13bc <process_event+0xf8>
    13b4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    13b6:	2a00      	cmp	r2, #0
    13b8:	f000 8104 	beq.w	15c4 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    13bc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    13c0:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    13c2:	f104 0a14 	add.w	sl, r4, #20
    13c6:	4650      	mov	r0, sl
    13c8:	f006 fd3e 	bl	7e48 <z_spin_unlock_valid>
    13cc:	2800      	cmp	r0, #0
    13ce:	f000 8115 	beq.w	15fc <process_event+0x338>
    13d2:	f386 8811 	msr	BASEPRI, r6
    13d6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    13da:	2f00      	cmp	r7, #0
    13dc:	f040 811f 	bne.w	161e <process_event+0x35a>
    13e0:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    13e2:	b12b      	cbz	r3, 13f0 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    13e4:	464b      	mov	r3, r9
    13e6:	4642      	mov	r2, r8
    13e8:	4669      	mov	r1, sp
    13ea:	4620      	mov	r0, r4
    13ec:	f009 fcad 	bl	ad4a <notify_all>
			if (transit != NULL) {
    13f0:	b115      	cbz	r5, 13f8 <process_event+0x134>
				transit(mgr, transition_complete);
    13f2:	497a      	ldr	r1, [pc, #488]	; (15dc <process_event+0x318>)
    13f4:	4620      	mov	r0, r4
    13f6:	47a8      	blx	r5
	__asm__ volatile(
    13f8:	f04f 0320 	mov.w	r3, #32
    13fc:	f3ef 8611 	mrs	r6, BASEPRI
    1400:	f383 8812 	msr	BASEPRI_MAX, r3
    1404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1408:	4650      	mov	r0, sl
    140a:	f006 fd0d 	bl	7e28 <z_spin_lock_valid>
    140e:	2800      	cmp	r0, #0
    1410:	f000 810b 	beq.w	162a <process_event+0x366>
	z_spin_lock_set_owner(l);
    1414:	4650      	mov	r0, sl
    1416:	f006 fd27 	bl	7e68 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    141a:	8ba3      	ldrh	r3, [r4, #28]
    141c:	f023 0308 	bic.w	r3, r3, #8
    1420:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1422:	8ba3      	ldrh	r3, [r4, #28]
    1424:	f013 0f10 	tst.w	r3, #16
    1428:	f000 810f 	beq.w	164a <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    142c:	f023 0310 	bic.w	r3, r3, #16
    1430:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1432:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1434:	8ba7      	ldrh	r7, [r4, #28]
    1436:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    143a:	2d00      	cmp	r5, #0
    143c:	f43f af6c 	beq.w	1318 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    1440:	2d02      	cmp	r5, #2
    1442:	d08a      	beq.n	135a <process_event+0x96>
		if (evt == EVT_NOP) {
    1444:	2d00      	cmp	r5, #0
    1446:	f43f af67 	beq.w	1318 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    144a:	2d01      	cmp	r5, #1
    144c:	d08a      	beq.n	1364 <process_event+0xa0>
		} else if (evt == EVT_START) {
    144e:	2d03      	cmp	r5, #3
    1450:	d091      	beq.n	1376 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    1452:	2d04      	cmp	r5, #4
    1454:	d03e      	beq.n	14d4 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    1456:	2d05      	cmp	r5, #5
    1458:	f040 80a0 	bne.w	159c <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    145c:	2f01      	cmp	r7, #1
    145e:	d172      	bne.n	1546 <process_event+0x282>
    1460:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1462:	2b00      	cmp	r3, #0
    1464:	d07d      	beq.n	1562 <process_event+0x29e>
			transit = mgr->transitions->reset;
    1466:	6923      	ldr	r3, [r4, #16]
    1468:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    146a:	2d00      	cmp	r5, #0
    146c:	f000 8087 	beq.w	157e <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    1470:	2105      	movs	r1, #5
    1472:	4620      	mov	r0, r4
    1474:	f009 fc00 	bl	ac78 <set_state>
		res = 0;
    1478:	f04f 0900 	mov.w	r9, #0
    147c:	e78d      	b.n	139a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    147e:	4d53      	ldr	r5, [pc, #332]	; (15cc <process_event+0x308>)
    1480:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1484:	462a      	mov	r2, r5
    1486:	4956      	ldr	r1, [pc, #344]	; (15e0 <process_event+0x31c>)
    1488:	4852      	ldr	r0, [pc, #328]	; (15d4 <process_event+0x310>)
    148a:	f009 fd6c 	bl	af66 <assert_print>
    148e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1492:	4628      	mov	r0, r5
    1494:	f009 fd60 	bl	af58 <assert_post_action>
    1498:	e770      	b.n	137c <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    149a:	4d4c      	ldr	r5, [pc, #304]	; (15cc <process_event+0x308>)
    149c:	f240 1357 	movw	r3, #343	; 0x157
    14a0:	462a      	mov	r2, r5
    14a2:	4950      	ldr	r1, [pc, #320]	; (15e4 <process_event+0x320>)
    14a4:	484b      	ldr	r0, [pc, #300]	; (15d4 <process_event+0x310>)
    14a6:	f009 fd5e 	bl	af66 <assert_print>
    14aa:	f240 1157 	movw	r1, #343	; 0x157
    14ae:	4628      	mov	r0, r5
    14b0:	f009 fd52 	bl	af58 <assert_post_action>
    14b4:	e766      	b.n	1384 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    14b6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 15cc <process_event+0x308>
    14ba:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    14be:	4642      	mov	r2, r8
    14c0:	4949      	ldr	r1, [pc, #292]	; (15e8 <process_event+0x324>)
    14c2:	4844      	ldr	r0, [pc, #272]	; (15d4 <process_event+0x310>)
    14c4:	f009 fd4f 	bl	af66 <assert_print>
    14c8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    14cc:	4640      	mov	r0, r8
    14ce:	f009 fd43 	bl	af58 <assert_post_action>
    14d2:	e75c      	b.n	138e <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    14d4:	2f02      	cmp	r7, #2
    14d6:	d10b      	bne.n	14f0 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    14d8:	8be3      	ldrh	r3, [r4, #30]
    14da:	b9bb      	cbnz	r3, 150c <process_event+0x248>
			transit = mgr->transitions->stop;
    14dc:	6923      	ldr	r3, [r4, #16]
    14de:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    14e0:	b315      	cbz	r5, 1528 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    14e2:	2104      	movs	r1, #4
    14e4:	4620      	mov	r0, r4
    14e6:	f009 fbc7 	bl	ac78 <set_state>
		res = 0;
    14ea:	f04f 0900 	mov.w	r9, #0
    14ee:	e754      	b.n	139a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    14f0:	4d36      	ldr	r5, [pc, #216]	; (15cc <process_event+0x308>)
    14f2:	f240 135d 	movw	r3, #349	; 0x15d
    14f6:	462a      	mov	r2, r5
    14f8:	493c      	ldr	r1, [pc, #240]	; (15ec <process_event+0x328>)
    14fa:	4836      	ldr	r0, [pc, #216]	; (15d4 <process_event+0x310>)
    14fc:	f009 fd33 	bl	af66 <assert_print>
    1500:	f240 115d 	movw	r1, #349	; 0x15d
    1504:	4628      	mov	r0, r5
    1506:	f009 fd27 	bl	af58 <assert_post_action>
    150a:	e7e5      	b.n	14d8 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    150c:	4d2f      	ldr	r5, [pc, #188]	; (15cc <process_event+0x308>)
    150e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1512:	462a      	mov	r2, r5
    1514:	4936      	ldr	r1, [pc, #216]	; (15f0 <process_event+0x32c>)
    1516:	482f      	ldr	r0, [pc, #188]	; (15d4 <process_event+0x310>)
    1518:	f009 fd25 	bl	af66 <assert_print>
    151c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1520:	4628      	mov	r0, r5
    1522:	f009 fd19 	bl	af58 <assert_post_action>
    1526:	e7d9      	b.n	14dc <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    1528:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 15cc <process_event+0x308>
    152c:	f240 1361 	movw	r3, #353	; 0x161
    1530:	4642      	mov	r2, r8
    1532:	492d      	ldr	r1, [pc, #180]	; (15e8 <process_event+0x324>)
    1534:	4827      	ldr	r0, [pc, #156]	; (15d4 <process_event+0x310>)
    1536:	f009 fd16 	bl	af66 <assert_print>
    153a:	f240 1161 	movw	r1, #353	; 0x161
    153e:	4640      	mov	r0, r8
    1540:	f009 fd0a 	bl	af58 <assert_post_action>
    1544:	e7cd      	b.n	14e2 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1546:	4d21      	ldr	r5, [pc, #132]	; (15cc <process_event+0x308>)
    1548:	f44f 73b2 	mov.w	r3, #356	; 0x164
    154c:	462a      	mov	r2, r5
    154e:	4929      	ldr	r1, [pc, #164]	; (15f4 <process_event+0x330>)
    1550:	4820      	ldr	r0, [pc, #128]	; (15d4 <process_event+0x310>)
    1552:	f009 fd08 	bl	af66 <assert_print>
    1556:	f44f 71b2 	mov.w	r1, #356	; 0x164
    155a:	4628      	mov	r0, r5
    155c:	f009 fcfc 	bl	af58 <assert_post_action>
    1560:	e77e      	b.n	1460 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1562:	4d1a      	ldr	r5, [pc, #104]	; (15cc <process_event+0x308>)
    1564:	f240 1365 	movw	r3, #357	; 0x165
    1568:	462a      	mov	r2, r5
    156a:	491e      	ldr	r1, [pc, #120]	; (15e4 <process_event+0x320>)
    156c:	4819      	ldr	r0, [pc, #100]	; (15d4 <process_event+0x310>)
    156e:	f009 fcfa 	bl	af66 <assert_print>
    1572:	f240 1165 	movw	r1, #357	; 0x165
    1576:	4628      	mov	r0, r5
    1578:	f009 fcee 	bl	af58 <assert_post_action>
    157c:	e773      	b.n	1466 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    157e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15cc <process_event+0x308>
    1582:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1586:	4642      	mov	r2, r8
    1588:	4917      	ldr	r1, [pc, #92]	; (15e8 <process_event+0x324>)
    158a:	4812      	ldr	r0, [pc, #72]	; (15d4 <process_event+0x310>)
    158c:	f009 fceb 	bl	af66 <assert_print>
    1590:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1594:	4640      	mov	r0, r8
    1596:	f009 fcdf 	bl	af58 <assert_post_action>
    159a:	e769      	b.n	1470 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    159c:	4d0b      	ldr	r5, [pc, #44]	; (15cc <process_event+0x308>)
    159e:	f240 136b 	movw	r3, #363	; 0x16b
    15a2:	462a      	mov	r2, r5
    15a4:	4914      	ldr	r1, [pc, #80]	; (15f8 <process_event+0x334>)
    15a6:	480b      	ldr	r0, [pc, #44]	; (15d4 <process_event+0x310>)
    15a8:	f009 fcdd 	bl	af66 <assert_print>
    15ac:	f240 116b 	movw	r1, #363	; 0x16b
    15b0:	4628      	mov	r0, r5
    15b2:	f009 fcd1 	bl	af58 <assert_post_action>
		onoff_transition_fn transit = NULL;
    15b6:	2500      	movs	r5, #0
		res = 0;
    15b8:	46a9      	mov	r9, r5
    15ba:	e6ee      	b.n	139a <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    15bc:	2200      	movs	r2, #0
    15be:	e6f7      	b.n	13b0 <process_event+0xec>
    15c0:	2200      	movs	r2, #0
    15c2:	e6f5      	b.n	13b0 <process_event+0xec>
		    || (transit != NULL)) {
    15c4:	2d00      	cmp	r5, #0
    15c6:	f47f aef9 	bne.w	13bc <process_event+0xf8>
    15ca:	e72a      	b.n	1422 <process_event+0x15e>
    15cc:	0000c674 	.word	0x0000c674
    15d0:	0000c6c0 	.word	0x0000c6c0
    15d4:	0000c5c0 	.word	0x0000c5c0
    15d8:	0000c6d0 	.word	0x0000c6d0
    15dc:	00001699 	.word	0x00001699
    15e0:	0000c6e4 	.word	0x0000c6e4
    15e4:	0000c6f0 	.word	0x0000c6f0
    15e8:	0000c714 	.word	0x0000c714
    15ec:	0000c72c 	.word	0x0000c72c
    15f0:	0000c744 	.word	0x0000c744
    15f4:	0000c754 	.word	0x0000c754
    15f8:	0000cc7c 	.word	0x0000cc7c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    15fc:	f8df b080 	ldr.w	fp, [pc, #128]	; 1680 <process_event+0x3bc>
    1600:	23b9      	movs	r3, #185	; 0xb9
    1602:	465a      	mov	r2, fp
    1604:	491f      	ldr	r1, [pc, #124]	; (1684 <process_event+0x3c0>)
    1606:	4820      	ldr	r0, [pc, #128]	; (1688 <process_event+0x3c4>)
    1608:	f009 fcad 	bl	af66 <assert_print>
    160c:	4651      	mov	r1, sl
    160e:	481f      	ldr	r0, [pc, #124]	; (168c <process_event+0x3c8>)
    1610:	f009 fca9 	bl	af66 <assert_print>
    1614:	21b9      	movs	r1, #185	; 0xb9
    1616:	4658      	mov	r0, fp
    1618:	f009 fc9e 	bl	af58 <assert_post_action>
    161c:	e6d9      	b.n	13d2 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    161e:	464a      	mov	r2, r9
    1620:	4641      	mov	r1, r8
    1622:	4620      	mov	r0, r4
    1624:	f009 fb30 	bl	ac88 <notify_monitors>
    1628:	e6da      	b.n	13e0 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    162a:	4d15      	ldr	r5, [pc, #84]	; (1680 <process_event+0x3bc>)
    162c:	238e      	movs	r3, #142	; 0x8e
    162e:	462a      	mov	r2, r5
    1630:	4917      	ldr	r1, [pc, #92]	; (1690 <process_event+0x3cc>)
    1632:	4815      	ldr	r0, [pc, #84]	; (1688 <process_event+0x3c4>)
    1634:	f009 fc97 	bl	af66 <assert_print>
    1638:	4651      	mov	r1, sl
    163a:	4816      	ldr	r0, [pc, #88]	; (1694 <process_event+0x3d0>)
    163c:	f009 fc93 	bl	af66 <assert_print>
    1640:	218e      	movs	r1, #142	; 0x8e
    1642:	4628      	mov	r0, r5
    1644:	f009 fc88 	bl	af58 <assert_post_action>
    1648:	e6e4      	b.n	1414 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    164a:	f013 0f20 	tst.w	r3, #32
    164e:	d004      	beq.n	165a <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1650:	f023 0320 	bic.w	r3, r3, #32
    1654:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    1656:	2502      	movs	r5, #2
    1658:	e6ec      	b.n	1434 <process_event+0x170>
		evt = EVT_NOP;
    165a:	2500      	movs	r5, #0
    165c:	e6ea      	b.n	1434 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    165e:	4d08      	ldr	r5, [pc, #32]	; (1680 <process_event+0x3bc>)
    1660:	23b9      	movs	r3, #185	; 0xb9
    1662:	462a      	mov	r2, r5
    1664:	4907      	ldr	r1, [pc, #28]	; (1684 <process_event+0x3c0>)
    1666:	4808      	ldr	r0, [pc, #32]	; (1688 <process_event+0x3c4>)
    1668:	f009 fc7d 	bl	af66 <assert_print>
    166c:	4621      	mov	r1, r4
    166e:	4807      	ldr	r0, [pc, #28]	; (168c <process_event+0x3c8>)
    1670:	f009 fc79 	bl	af66 <assert_print>
    1674:	21b9      	movs	r1, #185	; 0xb9
    1676:	4628      	mov	r0, r5
    1678:	f009 fc6e 	bl	af58 <assert_post_action>
    167c:	e653      	b.n	1326 <process_event+0x62>
    167e:	bf00      	nop
    1680:	0000c76c 	.word	0x0000c76c
    1684:	0000c79c 	.word	0x0000c79c
    1688:	0000c5c0 	.word	0x0000c5c0
    168c:	0000c7b4 	.word	0x0000c7b4
    1690:	0000c7cc 	.word	0x0000c7cc
    1694:	0000c7e4 	.word	0x0000c7e4

00001698 <transition_complete>:
{
    1698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    169c:	4604      	mov	r4, r0
    169e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    16a0:	f100 0614 	add.w	r6, r0, #20
    16a4:	f04f 0320 	mov.w	r3, #32
    16a8:	f3ef 8711 	mrs	r7, BASEPRI
    16ac:	f383 8812 	msr	BASEPRI_MAX, r3
    16b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16b4:	4630      	mov	r0, r6
    16b6:	f006 fbb7 	bl	7e28 <z_spin_lock_valid>
    16ba:	b150      	cbz	r0, 16d2 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    16bc:	4630      	mov	r0, r6
    16be:	f006 fbd3 	bl	7e68 <z_spin_lock_set_owner>
	mgr->last_res = res;
    16c2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    16c4:	463a      	mov	r2, r7
    16c6:	2101      	movs	r1, #1
    16c8:	4620      	mov	r0, r4
    16ca:	f7ff fdfb 	bl	12c4 <process_event>
}
    16ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16d2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 16f4 <transition_complete+0x5c>
    16d6:	238e      	movs	r3, #142	; 0x8e
    16d8:	4642      	mov	r2, r8
    16da:	4907      	ldr	r1, [pc, #28]	; (16f8 <transition_complete+0x60>)
    16dc:	4807      	ldr	r0, [pc, #28]	; (16fc <transition_complete+0x64>)
    16de:	f009 fc42 	bl	af66 <assert_print>
    16e2:	4631      	mov	r1, r6
    16e4:	4806      	ldr	r0, [pc, #24]	; (1700 <transition_complete+0x68>)
    16e6:	f009 fc3e 	bl	af66 <assert_print>
    16ea:	218e      	movs	r1, #142	; 0x8e
    16ec:	4640      	mov	r0, r8
    16ee:	f009 fc33 	bl	af58 <assert_post_action>
    16f2:	e7e3      	b.n	16bc <transition_complete+0x24>
    16f4:	0000c76c 	.word	0x0000c76c
    16f8:	0000c7cc 	.word	0x0000c7cc
    16fc:	0000c5c0 	.word	0x0000c5c0
    1700:	0000c7e4 	.word	0x0000c7e4

00001704 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1708:	4604      	mov	r4, r0
    170a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    170c:	f009 faf4 	bl	acf8 <validate_args>

	if (rv < 0) {
    1710:	1e06      	subs	r6, r0, #0
    1712:	db58      	blt.n	17c6 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1714:	f104 0714 	add.w	r7, r4, #20
    1718:	f04f 0320 	mov.w	r3, #32
    171c:	f3ef 8911 	mrs	r9, BASEPRI
    1720:	f383 8812 	msr	BASEPRI_MAX, r3
    1724:	f3bf 8f6f 	isb	sy
    1728:	4638      	mov	r0, r7
    172a:	f006 fb7d 	bl	7e28 <z_spin_lock_valid>
    172e:	b1e8      	cbz	r0, 176c <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    1730:	4638      	mov	r0, r7
    1732:	f006 fb99 	bl	7e68 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1736:	8ba5      	ldrh	r5, [r4, #28]
    1738:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    173c:	8be3      	ldrh	r3, [r4, #30]
    173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1742:	4293      	cmp	r3, r2
    1744:	d056      	beq.n	17f4 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    1746:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    1748:	2d02      	cmp	r5, #2
    174a:	d01f      	beq.n	178c <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    174c:	b32d      	cbz	r5, 179a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    174e:	2d04      	cmp	r5, #4
    1750:	d023      	beq.n	179a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    1752:	2d06      	cmp	r5, #6
    1754:	d021      	beq.n	179a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    1756:	2d05      	cmp	r5, #5
    1758:	d053      	beq.n	1802 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    175a:	2d01      	cmp	r5, #1
    175c:	d136      	bne.n	17cc <onoff_request+0xc8>
		rv = -EIO;
    175e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1762:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1766:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1768:	4652      	mov	r2, sl
    176a:	e01c      	b.n	17a6 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    176c:	4d3c      	ldr	r5, [pc, #240]	; (1860 <onoff_request+0x15c>)
    176e:	238e      	movs	r3, #142	; 0x8e
    1770:	462a      	mov	r2, r5
    1772:	493c      	ldr	r1, [pc, #240]	; (1864 <onoff_request+0x160>)
    1774:	483c      	ldr	r0, [pc, #240]	; (1868 <onoff_request+0x164>)
    1776:	f009 fbf6 	bl	af66 <assert_print>
    177a:	4639      	mov	r1, r7
    177c:	483b      	ldr	r0, [pc, #236]	; (186c <onoff_request+0x168>)
    177e:	f009 fbf2 	bl	af66 <assert_print>
    1782:	218e      	movs	r1, #142	; 0x8e
    1784:	4628      	mov	r0, r5
    1786:	f009 fbe7 	bl	af58 <assert_post_action>
    178a:	e7d1      	b.n	1730 <onoff_request+0x2c>
		mgr->refs += 1U;
    178c:	3301      	adds	r3, #1
    178e:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1790:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1794:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1796:	461a      	mov	r2, r3
    1798:	e005      	b.n	17a6 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    179a:	fab5 f385 	clz	r3, r5
    179e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    17a0:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    17a4:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    17a6:	b142      	cbz	r2, 17ba <onoff_request+0xb6>
	parent->next = child;
    17a8:	2200      	movs	r2, #0
    17aa:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    17ae:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    17b0:	b372      	cbz	r2, 1810 <onoff_request+0x10c>
	parent->next = child;
    17b2:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    17b6:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    17ba:	b373      	cbz	r3, 181a <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    17bc:	464a      	mov	r2, r9
    17be:	2102      	movs	r1, #2
    17c0:	4620      	mov	r0, r4
    17c2:	f7ff fd7f 	bl	12c4 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    17c6:	4630      	mov	r0, r6
    17c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    17cc:	4e28      	ldr	r6, [pc, #160]	; (1870 <onoff_request+0x16c>)
    17ce:	f240 13c9 	movw	r3, #457	; 0x1c9
    17d2:	4632      	mov	r2, r6
    17d4:	4927      	ldr	r1, [pc, #156]	; (1874 <onoff_request+0x170>)
    17d6:	4824      	ldr	r0, [pc, #144]	; (1868 <onoff_request+0x164>)
    17d8:	f009 fbc5 	bl	af66 <assert_print>
    17dc:	f240 11c9 	movw	r1, #457	; 0x1c9
    17e0:	4630      	mov	r0, r6
    17e2:	f009 fbb9 	bl	af58 <assert_post_action>
		rv = -EIO;
    17e6:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    17ea:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    17ee:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    17f0:	4652      	mov	r2, sl
    17f2:	e7d8      	b.n	17a6 <onoff_request+0xa2>
		rv = -EAGAIN;
    17f4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    17f8:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    17fc:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    17fe:	4652      	mov	r2, sl
    1800:	e7d1      	b.n	17a6 <onoff_request+0xa2>
		rv = -ENOTSUP;
    1802:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    1806:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    180a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    180c:	4652      	mov	r2, sl
    180e:	e7ca      	b.n	17a6 <onoff_request+0xa2>
    1810:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1814:	f8c4 8000 	str.w	r8, [r4]
}
    1818:	e7cf      	b.n	17ba <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    181a:	4638      	mov	r0, r7
    181c:	f006 fb14 	bl	7e48 <z_spin_unlock_valid>
    1820:	b168      	cbz	r0, 183e <onoff_request+0x13a>
	__asm__ volatile(
    1822:	f389 8811 	msr	BASEPRI, r9
    1826:	f3bf 8f6f 	isb	sy
		if (notify) {
    182a:	f1ba 0f00 	cmp.w	sl, #0
    182e:	d0ca      	beq.n	17c6 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    1830:	2300      	movs	r3, #0
    1832:	462a      	mov	r2, r5
    1834:	4641      	mov	r1, r8
    1836:	4620      	mov	r0, r4
    1838:	f009 fa74 	bl	ad24 <notify_one>
    183c:	e7c3      	b.n	17c6 <onoff_request+0xc2>
    183e:	f8df b020 	ldr.w	fp, [pc, #32]	; 1860 <onoff_request+0x15c>
    1842:	23b9      	movs	r3, #185	; 0xb9
    1844:	465a      	mov	r2, fp
    1846:	490c      	ldr	r1, [pc, #48]	; (1878 <onoff_request+0x174>)
    1848:	4807      	ldr	r0, [pc, #28]	; (1868 <onoff_request+0x164>)
    184a:	f009 fb8c 	bl	af66 <assert_print>
    184e:	4639      	mov	r1, r7
    1850:	480a      	ldr	r0, [pc, #40]	; (187c <onoff_request+0x178>)
    1852:	f009 fb88 	bl	af66 <assert_print>
    1856:	21b9      	movs	r1, #185	; 0xb9
    1858:	4658      	mov	r0, fp
    185a:	f009 fb7d 	bl	af58 <assert_post_action>
    185e:	e7e0      	b.n	1822 <onoff_request+0x11e>
    1860:	0000c76c 	.word	0x0000c76c
    1864:	0000c7cc 	.word	0x0000c7cc
    1868:	0000c5c0 	.word	0x0000c5c0
    186c:	0000c7e4 	.word	0x0000c7e4
    1870:	0000c674 	.word	0x0000c674
    1874:	0000c754 	.word	0x0000c754
    1878:	0000c79c 	.word	0x0000c79c
    187c:	0000c7b4 	.word	0x0000c7b4

00001880 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1884:	4606      	mov	r6, r0
    1886:	460d      	mov	r5, r1
    1888:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    188a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    188e:	d222      	bcs.n	18d6 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1890:	2c04      	cmp	r4, #4
    1892:	d931      	bls.n	18f8 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    1894:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1896:	1dec      	adds	r4, r5, #7
    1898:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    189c:	4415      	add	r5, r2
    189e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    18a2:	1b2d      	subs	r5, r5, r4
    18a4:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    18a8:	2d17      	cmp	r5, #23
    18aa:	d936      	bls.n	191a <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    18ac:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    18ae:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    18b2:	2300      	movs	r3, #0
    18b4:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    18b6:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    18ba:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    18be:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    18c2:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    18c4:	3607      	adds	r6, #7
    18c6:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    18ca:	f109 0301 	add.w	r3, r9, #1
    18ce:	4543      	cmp	r3, r8
    18d0:	d834      	bhi.n	193c <sys_heap_init+0xbc>
{
    18d2:	2300      	movs	r3, #0
    18d4:	e049      	b.n	196a <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    18d6:	4f38      	ldr	r7, [pc, #224]	; (19b8 <sys_heap_init+0x138>)
    18d8:	f240 13e3 	movw	r3, #483	; 0x1e3
    18dc:	463a      	mov	r2, r7
    18de:	4937      	ldr	r1, [pc, #220]	; (19bc <sys_heap_init+0x13c>)
    18e0:	4837      	ldr	r0, [pc, #220]	; (19c0 <sys_heap_init+0x140>)
    18e2:	f009 fb40 	bl	af66 <assert_print>
    18e6:	4837      	ldr	r0, [pc, #220]	; (19c4 <sys_heap_init+0x144>)
    18e8:	f009 fb3d 	bl	af66 <assert_print>
    18ec:	f240 11e3 	movw	r1, #483	; 0x1e3
    18f0:	4638      	mov	r0, r7
    18f2:	f009 fb31 	bl	af58 <assert_post_action>
    18f6:	e7cb      	b.n	1890 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    18f8:	4f2f      	ldr	r7, [pc, #188]	; (19b8 <sys_heap_init+0x138>)
    18fa:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    18fe:	463a      	mov	r2, r7
    1900:	4931      	ldr	r1, [pc, #196]	; (19c8 <sys_heap_init+0x148>)
    1902:	482f      	ldr	r0, [pc, #188]	; (19c0 <sys_heap_init+0x140>)
    1904:	f009 fb2f 	bl	af66 <assert_print>
    1908:	4830      	ldr	r0, [pc, #192]	; (19cc <sys_heap_init+0x14c>)
    190a:	f009 fb2c 	bl	af66 <assert_print>
    190e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1912:	4638      	mov	r0, r7
    1914:	f009 fb20 	bl	af58 <assert_post_action>
    1918:	e7bc      	b.n	1894 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    191a:	4f27      	ldr	r7, [pc, #156]	; (19b8 <sys_heap_init+0x138>)
    191c:	f240 13f3 	movw	r3, #499	; 0x1f3
    1920:	463a      	mov	r2, r7
    1922:	492b      	ldr	r1, [pc, #172]	; (19d0 <sys_heap_init+0x150>)
    1924:	4826      	ldr	r0, [pc, #152]	; (19c0 <sys_heap_init+0x140>)
    1926:	f009 fb1e 	bl	af66 <assert_print>
    192a:	4828      	ldr	r0, [pc, #160]	; (19cc <sys_heap_init+0x14c>)
    192c:	f009 fb1b 	bl	af66 <assert_print>
    1930:	f240 11f3 	movw	r1, #499	; 0x1f3
    1934:	4638      	mov	r0, r7
    1936:	f009 fb0f 	bl	af58 <assert_post_action>
    193a:	e7b7      	b.n	18ac <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    193c:	f8df a078 	ldr.w	sl, [pc, #120]	; 19b8 <sys_heap_init+0x138>
    1940:	f44f 7301 	mov.w	r3, #516	; 0x204
    1944:	4652      	mov	r2, sl
    1946:	4923      	ldr	r1, [pc, #140]	; (19d4 <sys_heap_init+0x154>)
    1948:	481d      	ldr	r0, [pc, #116]	; (19c0 <sys_heap_init+0x140>)
    194a:	f009 fb0c 	bl	af66 <assert_print>
    194e:	481f      	ldr	r0, [pc, #124]	; (19cc <sys_heap_init+0x14c>)
    1950:	f009 fb09 	bl	af66 <assert_print>
    1954:	f44f 7101 	mov.w	r1, #516	; 0x204
    1958:	4650      	mov	r0, sl
    195a:	f009 fafd 	bl	af58 <assert_post_action>
    195e:	e7b8      	b.n	18d2 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1960:	1d1a      	adds	r2, r3, #4
    1962:	2100      	movs	r1, #0
    1964:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1968:	3301      	adds	r3, #1
    196a:	42bb      	cmp	r3, r7
    196c:	dbf8      	blt.n	1960 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    196e:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    1972:	b29b      	uxth	r3, r3
    1974:	8063      	strh	r3, [r4, #2]
    1976:	2200      	movs	r2, #0
    1978:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    197a:	f043 0301 	orr.w	r3, r3, #1
    197e:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1980:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1984:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1988:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    198c:	1cb3      	adds	r3, r6, #2
    198e:	52e1      	strh	r1, [r4, r3]
    1990:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    1994:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1998:	1ca9      	adds	r1, r5, #2
    199a:	5262      	strh	r2, [r4, r1]
    199c:	4425      	add	r5, r4
    199e:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    19a2:	886b      	ldrh	r3, [r5, #2]
    19a4:	f043 0301 	orr.w	r3, r3, #1
    19a8:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    19aa:	4649      	mov	r1, r9
    19ac:	4620      	mov	r0, r4
    19ae:	f009 fa31 	bl	ae14 <free_list_add>
}
    19b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19b6:	bf00      	nop
    19b8:	0000c7fc 	.word	0x0000c7fc
    19bc:	0000c8d0 	.word	0x0000c8d0
    19c0:	0000c5c0 	.word	0x0000c5c0
    19c4:	0000c8e8 	.word	0x0000c8e8
    19c8:	0000c900 	.word	0x0000c900
    19cc:	0000c924 	.word	0x0000c924
    19d0:	0000c940 	.word	0x0000c940
    19d4:	0000c96c 	.word	0x0000c96c

000019d8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	b082      	sub	sp, #8
    19dc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    19de:	2300      	movs	r3, #0
    19e0:	6003      	str	r3, [r0, #0]
    19e2:	6043      	str	r3, [r0, #4]
    19e4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    19e6:	784b      	ldrb	r3, [r1, #1]
    19e8:	2b25      	cmp	r3, #37	; 0x25
    19ea:	d002      	beq.n	19f2 <extract_conversion+0x1a>
    19ec:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    19ee:	2501      	movs	r5, #1
    19f0:	e01f      	b.n	1a32 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    19f2:	1c88      	adds	r0, r1, #2
    19f4:	70e3      	strb	r3, [r4, #3]
		return sp;
    19f6:	e145      	b.n	1c84 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    19f8:	7823      	ldrb	r3, [r4, #0]
    19fa:	f043 0304 	orr.w	r3, r3, #4
    19fe:	7023      	strb	r3, [r4, #0]
		if (loop) {
    1a00:	b1b5      	cbz	r5, 1a30 <extract_conversion+0x58>
			++sp;
    1a02:	3601      	adds	r6, #1
    1a04:	e014      	b.n	1a30 <extract_conversion+0x58>
			conv->flag_plus = true;
    1a06:	7823      	ldrb	r3, [r4, #0]
    1a08:	f043 0308 	orr.w	r3, r3, #8
    1a0c:	7023      	strb	r3, [r4, #0]
			break;
    1a0e:	e7f7      	b.n	1a00 <extract_conversion+0x28>
			conv->flag_space = true;
    1a10:	7823      	ldrb	r3, [r4, #0]
    1a12:	f043 0310 	orr.w	r3, r3, #16
    1a16:	7023      	strb	r3, [r4, #0]
			break;
    1a18:	e7f2      	b.n	1a00 <extract_conversion+0x28>
			conv->flag_hash = true;
    1a1a:	7823      	ldrb	r3, [r4, #0]
    1a1c:	f043 0320 	orr.w	r3, r3, #32
    1a20:	7023      	strb	r3, [r4, #0]
			break;
    1a22:	e7ed      	b.n	1a00 <extract_conversion+0x28>
			conv->flag_zero = true;
    1a24:	7823      	ldrb	r3, [r4, #0]
    1a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a2a:	7023      	strb	r3, [r4, #0]
			break;
    1a2c:	e7e8      	b.n	1a00 <extract_conversion+0x28>
		switch (*sp) {
    1a2e:	2500      	movs	r5, #0
	} while (loop);
    1a30:	b345      	cbz	r5, 1a84 <extract_conversion+0xac>
		switch (*sp) {
    1a32:	7833      	ldrb	r3, [r6, #0]
    1a34:	3b20      	subs	r3, #32
    1a36:	2b10      	cmp	r3, #16
    1a38:	d8f9      	bhi.n	1a2e <extract_conversion+0x56>
    1a3a:	a201      	add	r2, pc, #4	; (adr r2, 1a40 <extract_conversion+0x68>)
    1a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a40:	00001a11 	.word	0x00001a11
    1a44:	00001a2f 	.word	0x00001a2f
    1a48:	00001a2f 	.word	0x00001a2f
    1a4c:	00001a1b 	.word	0x00001a1b
    1a50:	00001a2f 	.word	0x00001a2f
    1a54:	00001a2f 	.word	0x00001a2f
    1a58:	00001a2f 	.word	0x00001a2f
    1a5c:	00001a2f 	.word	0x00001a2f
    1a60:	00001a2f 	.word	0x00001a2f
    1a64:	00001a2f 	.word	0x00001a2f
    1a68:	00001a2f 	.word	0x00001a2f
    1a6c:	00001a07 	.word	0x00001a07
    1a70:	00001a2f 	.word	0x00001a2f
    1a74:	000019f9 	.word	0x000019f9
    1a78:	00001a2f 	.word	0x00001a2f
    1a7c:	00001a2f 	.word	0x00001a2f
    1a80:	00001a25 	.word	0x00001a25
	if (conv->flag_zero && conv->flag_dash) {
    1a84:	7823      	ldrb	r3, [r4, #0]
    1a86:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1a8a:	2b44      	cmp	r3, #68	; 0x44
    1a8c:	d05f      	beq.n	1b4e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1a8e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1a90:	7823      	ldrb	r3, [r4, #0]
    1a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a96:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1a98:	7833      	ldrb	r3, [r6, #0]
    1a9a:	2b2a      	cmp	r3, #42	; 0x2a
    1a9c:	d05c      	beq.n	1b58 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    1a9e:	a801      	add	r0, sp, #4
    1aa0:	f009 f9c4 	bl	ae2c <extract_decimal>
	if (sp != wp) {
    1aa4:	9b01      	ldr	r3, [sp, #4]
    1aa6:	429e      	cmp	r6, r3
    1aa8:	d00f      	beq.n	1aca <extract_conversion+0xf2>
		conv->width_present = true;
    1aaa:	7823      	ldrb	r3, [r4, #0]
    1aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ab0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    1ab2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1ab4:	b2db      	uxtb	r3, r3
    1ab6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1aba:	2800      	cmp	r0, #0
    1abc:	db54      	blt.n	1b68 <extract_conversion+0x190>
    1abe:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1ac0:	4313      	orrs	r3, r2
    1ac2:	7822      	ldrb	r2, [r4, #0]
    1ac4:	f363 0241 	bfi	r2, r3, #1, #1
    1ac8:	7022      	strb	r2, [r4, #0]
	return sp;
    1aca:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1acc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    1ace:	781b      	ldrb	r3, [r3, #0]
    1ad0:	2b2e      	cmp	r3, #46	; 0x2e
    1ad2:	bf14      	ite	ne
    1ad4:	2300      	movne	r3, #0
    1ad6:	2301      	moveq	r3, #1
    1ad8:	7862      	ldrb	r2, [r4, #1]
    1ada:	f363 0241 	bfi	r2, r3, #1, #1
    1ade:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d043      	beq.n	1b6c <extract_conversion+0x194>
	++sp;
    1ae4:	9b01      	ldr	r3, [sp, #4]
    1ae6:	1c5a      	adds	r2, r3, #1
    1ae8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    1aea:	785b      	ldrb	r3, [r3, #1]
    1aec:	2b2a      	cmp	r3, #42	; 0x2a
    1aee:	d03f      	beq.n	1b70 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1af0:	a801      	add	r0, sp, #4
    1af2:	f009 f99b 	bl	ae2c <extract_decimal>
	conv->prec_value = prec;
    1af6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    1af8:	7823      	ldrb	r3, [r4, #0]
    1afa:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1afe:	2800      	cmp	r0, #0
    1b00:	db3e      	blt.n	1b80 <extract_conversion+0x1a8>
    1b02:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1b04:	4313      	orrs	r3, r2
    1b06:	7822      	ldrb	r2, [r4, #0]
    1b08:	f363 0241 	bfi	r2, r3, #1, #1
    1b0c:	7022      	strb	r2, [r4, #0]
	return sp;
    1b0e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    1b10:	7803      	ldrb	r3, [r0, #0]
    1b12:	3b4c      	subs	r3, #76	; 0x4c
    1b14:	2b2e      	cmp	r3, #46	; 0x2e
    1b16:	f200 809d 	bhi.w	1c54 <extract_conversion+0x27c>
    1b1a:	e8df f003 	tbb	[pc, r3]
    1b1e:	9b90      	.short	0x9b90
    1b20:	9b9b9b9b 	.word	0x9b9b9b9b
    1b24:	9b9b9b9b 	.word	0x9b9b9b9b
    1b28:	9b9b9b9b 	.word	0x9b9b9b9b
    1b2c:	9b9b9b9b 	.word	0x9b9b9b9b
    1b30:	9b9b9b9b 	.word	0x9b9b9b9b
    1b34:	9b9b9b9b 	.word	0x9b9b9b9b
    1b38:	9b339b9b 	.word	0x9b339b9b
    1b3c:	9b459b57 	.word	0x9b459b57
    1b40:	9b9b9b9b 	.word	0x9b9b9b9b
    1b44:	9b899b9b 	.word	0x9b899b9b
    1b48:	9b9b9b9b 	.word	0x9b9b9b9b
    1b4c:	82          	.byte	0x82
    1b4d:	00          	.byte	0x00
		conv->flag_zero = false;
    1b4e:	7823      	ldrb	r3, [r4, #0]
    1b50:	f36f 1386 	bfc	r3, #6, #1
    1b54:	7023      	strb	r3, [r4, #0]
    1b56:	e79a      	b.n	1a8e <extract_conversion+0xb6>
		conv->width_star = true;
    1b58:	7863      	ldrb	r3, [r4, #1]
    1b5a:	f043 0301 	orr.w	r3, r3, #1
    1b5e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1b60:	4633      	mov	r3, r6
    1b62:	3301      	adds	r3, #1
    1b64:	9301      	str	r3, [sp, #4]
    1b66:	e7b1      	b.n	1acc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1b68:	2201      	movs	r2, #1
    1b6a:	e7a9      	b.n	1ac0 <extract_conversion+0xe8>
		return sp;
    1b6c:	9801      	ldr	r0, [sp, #4]
    1b6e:	e7cf      	b.n	1b10 <extract_conversion+0x138>
		conv->prec_star = true;
    1b70:	7863      	ldrb	r3, [r4, #1]
    1b72:	f043 0304 	orr.w	r3, r3, #4
    1b76:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1b78:	4610      	mov	r0, r2
    1b7a:	3001      	adds	r0, #1
    1b7c:	9001      	str	r0, [sp, #4]
    1b7e:	e7c7      	b.n	1b10 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1b80:	2201      	movs	r2, #1
    1b82:	e7bf      	b.n	1b04 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1b84:	1c42      	adds	r2, r0, #1
    1b86:	7843      	ldrb	r3, [r0, #1]
    1b88:	2b68      	cmp	r3, #104	; 0x68
    1b8a:	d006      	beq.n	1b9a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    1b8c:	7863      	ldrb	r3, [r4, #1]
    1b8e:	2102      	movs	r1, #2
    1b90:	f361 03c6 	bfi	r3, r1, #3, #4
    1b94:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    1b96:	4610      	mov	r0, r2
    1b98:	e01e      	b.n	1bd8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    1b9a:	7863      	ldrb	r3, [r4, #1]
    1b9c:	2201      	movs	r2, #1
    1b9e:	f362 03c6 	bfi	r3, r2, #3, #4
    1ba2:	7063      	strb	r3, [r4, #1]
			++sp;
    1ba4:	3002      	adds	r0, #2
    1ba6:	e017      	b.n	1bd8 <extract_conversion+0x200>
		if (*++sp == 'l') {
    1ba8:	1c42      	adds	r2, r0, #1
    1baa:	7843      	ldrb	r3, [r0, #1]
    1bac:	2b6c      	cmp	r3, #108	; 0x6c
    1bae:	d006      	beq.n	1bbe <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    1bb0:	7863      	ldrb	r3, [r4, #1]
    1bb2:	2103      	movs	r1, #3
    1bb4:	f361 03c6 	bfi	r3, r1, #3, #4
    1bb8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    1bba:	4610      	mov	r0, r2
    1bbc:	e00c      	b.n	1bd8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    1bbe:	7863      	ldrb	r3, [r4, #1]
    1bc0:	2204      	movs	r2, #4
    1bc2:	f362 03c6 	bfi	r3, r2, #3, #4
    1bc6:	7063      	strb	r3, [r4, #1]
			++sp;
    1bc8:	3002      	adds	r0, #2
    1bca:	e005      	b.n	1bd8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    1bcc:	7863      	ldrb	r3, [r4, #1]
    1bce:	2205      	movs	r2, #5
    1bd0:	f362 03c6 	bfi	r3, r2, #3, #4
    1bd4:	7063      	strb	r3, [r4, #1]
		++sp;
    1bd6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1bd8:	f810 3b01 	ldrb.w	r3, [r0], #1
    1bdc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    1bde:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1be2:	2a37      	cmp	r2, #55	; 0x37
    1be4:	d87d      	bhi.n	1ce2 <extract_conversion+0x30a>
    1be6:	e8df f002 	tbb	[pc, r2]
    1bea:	7c5e      	.short	0x7c5e
    1bec:	5e5e7c7c 	.word	0x5e5e7c7c
    1bf0:	7c7c7c5e 	.word	0x7c7c7c5e
    1bf4:	7c7c7c7c 	.word	0x7c7c7c7c
    1bf8:	7c7c7c7c 	.word	0x7c7c7c7c
    1bfc:	7c7c7c7c 	.word	0x7c7c7c7c
    1c00:	7c7c4f7c 	.word	0x7c7c4f7c
    1c04:	7c7c7c7c 	.word	0x7c7c7c7c
    1c08:	7c5e7c7c 	.word	0x7c5e7c7c
    1c0c:	5e5e3a4f 	.word	0x5e5e3a4f
    1c10:	7c3a7c5e 	.word	0x7c3a7c5e
    1c14:	657c7c7c 	.word	0x657c7c7c
    1c18:	7c7c714f 	.word	0x7c7c714f
    1c1c:	7c4f7c71 	.word	0x7c4f7c71
    1c20:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    1c22:	7863      	ldrb	r3, [r4, #1]
    1c24:	2206      	movs	r2, #6
    1c26:	f362 03c6 	bfi	r3, r2, #3, #4
    1c2a:	7063      	strb	r3, [r4, #1]
		++sp;
    1c2c:	3001      	adds	r0, #1
		break;
    1c2e:	e7d3      	b.n	1bd8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    1c30:	7863      	ldrb	r3, [r4, #1]
    1c32:	2207      	movs	r2, #7
    1c34:	f362 03c6 	bfi	r3, r2, #3, #4
    1c38:	7063      	strb	r3, [r4, #1]
		++sp;
    1c3a:	3001      	adds	r0, #1
		break;
    1c3c:	e7cc      	b.n	1bd8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1c3e:	7863      	ldrb	r3, [r4, #1]
    1c40:	2208      	movs	r2, #8
    1c42:	f362 03c6 	bfi	r3, r2, #3, #4
    1c46:	7063      	strb	r3, [r4, #1]
		++sp;
    1c48:	3001      	adds	r0, #1
		conv->unsupported = true;
    1c4a:	7823      	ldrb	r3, [r4, #0]
    1c4c:	f043 0302 	orr.w	r3, r3, #2
    1c50:	7023      	strb	r3, [r4, #0]
		break;
    1c52:	e7c1      	b.n	1bd8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1c54:	7863      	ldrb	r3, [r4, #1]
    1c56:	f36f 03c6 	bfc	r3, #3, #4
    1c5a:	7063      	strb	r3, [r4, #1]
		break;
    1c5c:	e7bc      	b.n	1bd8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1c5e:	78a2      	ldrb	r2, [r4, #2]
    1c60:	2101      	movs	r1, #1
    1c62:	f361 0202 	bfi	r2, r1, #0, #3
    1c66:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c68:	7862      	ldrb	r2, [r4, #1]
    1c6a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1c6e:	2a40      	cmp	r2, #64	; 0x40
    1c70:	d010      	beq.n	1c94 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    1c72:	2b63      	cmp	r3, #99	; 0x63
    1c74:	d013      	beq.n	1c9e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    1c76:	7823      	ldrb	r3, [r4, #0]
    1c78:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1c7c:	4315      	orrs	r5, r2
    1c7e:	f365 0341 	bfi	r3, r5, #1, #1
    1c82:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1c84:	b002      	add	sp, #8
    1c86:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1c88:	78a2      	ldrb	r2, [r4, #2]
    1c8a:	2102      	movs	r1, #2
    1c8c:	f361 0202 	bfi	r2, r1, #0, #3
    1c90:	70a2      	strb	r2, [r4, #2]
    1c92:	e7e9      	b.n	1c68 <extract_conversion+0x290>
			conv->invalid = true;
    1c94:	7821      	ldrb	r1, [r4, #0]
    1c96:	f041 0101 	orr.w	r1, r1, #1
    1c9a:	7021      	strb	r1, [r4, #0]
    1c9c:	e7e9      	b.n	1c72 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1c9e:	1e15      	subs	r5, r2, #0
    1ca0:	bf18      	it	ne
    1ca2:	2501      	movne	r5, #1
    1ca4:	e7e7      	b.n	1c76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    1ca6:	78a3      	ldrb	r3, [r4, #2]
    1ca8:	2204      	movs	r2, #4
    1caa:	f362 0302 	bfi	r3, r2, #0, #3
    1cae:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1cb0:	2501      	movs	r5, #1
			break;
    1cb2:	e7e0      	b.n	1c76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1cb4:	78a3      	ldrb	r3, [r4, #2]
    1cb6:	2203      	movs	r2, #3
    1cb8:	f362 0302 	bfi	r3, r2, #0, #3
    1cbc:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cbe:	7863      	ldrb	r3, [r4, #1]
    1cc0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1cc4:	2b40      	cmp	r3, #64	; 0x40
    1cc6:	d1d6      	bne.n	1c76 <extract_conversion+0x29e>
			unsupported = true;
    1cc8:	2501      	movs	r5, #1
    1cca:	e7d4      	b.n	1c76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1ccc:	78a3      	ldrb	r3, [r4, #2]
    1cce:	2203      	movs	r2, #3
    1cd0:	f362 0302 	bfi	r3, r2, #0, #3
    1cd4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1cd6:	7863      	ldrb	r3, [r4, #1]
    1cd8:	f013 0f78 	tst.w	r3, #120	; 0x78
    1cdc:	d0cb      	beq.n	1c76 <extract_conversion+0x29e>
			unsupported = true;
    1cde:	2501      	movs	r5, #1
    1ce0:	e7c9      	b.n	1c76 <extract_conversion+0x29e>
		conv->invalid = true;
    1ce2:	7823      	ldrb	r3, [r4, #0]
    1ce4:	f043 0301 	orr.w	r3, r3, #1
    1ce8:	7023      	strb	r3, [r4, #0]
		break;
    1cea:	e7c4      	b.n	1c76 <extract_conversion+0x29e>

00001cec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cf0:	b091      	sub	sp, #68	; 0x44
    1cf2:	4606      	mov	r6, r0
    1cf4:	460d      	mov	r5, r1
    1cf6:	4691      	mov	r9, r2
    1cf8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1cfa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1cfc:	f899 0000 	ldrb.w	r0, [r9]
    1d00:	2800      	cmp	r0, #0
    1d02:	f000 82d5 	beq.w	22b0 <cbvprintf+0x5c4>
		if (*fp != '%') {
    1d06:	2825      	cmp	r0, #37	; 0x25
    1d08:	d008      	beq.n	1d1c <cbvprintf+0x30>
			OUTC(*fp++);
    1d0a:	f109 0901 	add.w	r9, r9, #1
    1d0e:	4629      	mov	r1, r5
    1d10:	47b0      	blx	r6
    1d12:	2800      	cmp	r0, #0
    1d14:	f2c0 82cd 	blt.w	22b2 <cbvprintf+0x5c6>
    1d18:	3401      	adds	r4, #1
			continue;
    1d1a:	e7ef      	b.n	1cfc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1d1c:	2300      	movs	r3, #0
    1d1e:	9304      	str	r3, [sp, #16]
    1d20:	9305      	str	r3, [sp, #20]
    1d22:	9306      	str	r3, [sp, #24]
    1d24:	9307      	str	r3, [sp, #28]
    1d26:	9308      	str	r3, [sp, #32]
    1d28:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1d2a:	4649      	mov	r1, r9
    1d2c:	a806      	add	r0, sp, #24
    1d2e:	f7ff fe53 	bl	19d8 <extract_conversion>
    1d32:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1d34:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1d38:	f013 0f01 	tst.w	r3, #1
    1d3c:	f000 8097 	beq.w	1e6e <cbvprintf+0x182>
			width = va_arg(ap, int);
    1d40:	9b03      	ldr	r3, [sp, #12]
    1d42:	1d1a      	adds	r2, r3, #4
    1d44:	9203      	str	r2, [sp, #12]
    1d46:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1d48:	2f00      	cmp	r7, #0
    1d4a:	f2c0 8088 	blt.w	1e5e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1d4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1d52:	f013 0f04 	tst.w	r3, #4
    1d56:	f000 809c 	beq.w	1e92 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	1d1a      	adds	r2, r3, #4
    1d5e:	9203      	str	r2, [sp, #12]
    1d60:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1d64:	f1ba 0f00 	cmp.w	sl, #0
    1d68:	f2c0 808a 	blt.w	1e80 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1d6c:	2300      	movs	r3, #0
    1d6e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1d70:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1d72:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1d76:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1d7a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1d7e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1d82:	2b01      	cmp	r3, #1
    1d84:	f000 808e 	beq.w	1ea4 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1d88:	2b02      	cmp	r3, #2
    1d8a:	f000 80d3 	beq.w	1f34 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1d8e:	2b04      	cmp	r3, #4
    1d90:	f000 8124 	beq.w	1fdc <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1d94:	2b03      	cmp	r3, #3
    1d96:	f000 813b 	beq.w	2010 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1d9a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1d9e:	f018 0b03 	ands.w	fp, r8, #3
    1da2:	f040 813b 	bne.w	201c <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1da6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1daa:	3b25      	subs	r3, #37	; 0x25
    1dac:	2b53      	cmp	r3, #83	; 0x53
    1dae:	f200 81e6 	bhi.w	217e <cbvprintf+0x492>
    1db2:	e8df f013 	tbh	[pc, r3, lsl #1]
    1db6:	0140      	.short	0x0140
    1db8:	01e401e4 	.word	0x01e401e4
    1dbc:	01e401e4 	.word	0x01e401e4
    1dc0:	01e401e4 	.word	0x01e401e4
    1dc4:	01e401e4 	.word	0x01e401e4
    1dc8:	01e401e4 	.word	0x01e401e4
    1dcc:	01e401e4 	.word	0x01e401e4
    1dd0:	01e401e4 	.word	0x01e401e4
    1dd4:	01e401e4 	.word	0x01e401e4
    1dd8:	01e401e4 	.word	0x01e401e4
    1ddc:	01e401e4 	.word	0x01e401e4
    1de0:	01e401e4 	.word	0x01e401e4
    1de4:	01e401e4 	.word	0x01e401e4
    1de8:	01e401e4 	.word	0x01e401e4
    1dec:	01e401e4 	.word	0x01e401e4
    1df0:	01e401e4 	.word	0x01e401e4
    1df4:	01e401e4 	.word	0x01e401e4
    1df8:	01e401e4 	.word	0x01e401e4
    1dfc:	01e401e4 	.word	0x01e401e4
    1e00:	01e401e4 	.word	0x01e401e4
    1e04:	01e401e4 	.word	0x01e401e4
    1e08:	01e401e4 	.word	0x01e401e4
    1e0c:	01e401e4 	.word	0x01e401e4
    1e10:	01e401e4 	.word	0x01e401e4
    1e14:	01e401e4 	.word	0x01e401e4
    1e18:	01e401e4 	.word	0x01e401e4
    1e1c:	01e40181 	.word	0x01e40181
    1e20:	01e401e4 	.word	0x01e401e4
    1e24:	01e401e4 	.word	0x01e401e4
    1e28:	01e401e4 	.word	0x01e401e4
    1e2c:	01e401e4 	.word	0x01e401e4
    1e30:	015e01e4 	.word	0x015e01e4
    1e34:	01e40167 	.word	0x01e40167
    1e38:	01e401e4 	.word	0x01e401e4
    1e3c:	016701e4 	.word	0x016701e4
    1e40:	01e401e4 	.word	0x01e401e4
    1e44:	01e401e4 	.word	0x01e401e4
    1e48:	018101be 	.word	0x018101be
    1e4c:	01e401a2 	.word	0x01e401a2
    1e50:	014d01e4 	.word	0x014d01e4
    1e54:	018101e4 	.word	0x018101e4
    1e58:	01e401e4 	.word	0x01e401e4
    1e5c:	0181      	.short	0x0181
				conv->flag_dash = true;
    1e5e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1e62:	f043 0304 	orr.w	r3, r3, #4
    1e66:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1e6a:	427f      	negs	r7, r7
    1e6c:	e76f      	b.n	1d4e <cbvprintf+0x62>
		} else if (conv->width_present) {
    1e6e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1e72:	2b00      	cmp	r3, #0
    1e74:	db02      	blt.n	1e7c <cbvprintf+0x190>
		int width = -1;
    1e76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1e7a:	e768      	b.n	1d4e <cbvprintf+0x62>
			width = conv->width_value;
    1e7c:	9f07      	ldr	r7, [sp, #28]
    1e7e:	e766      	b.n	1d4e <cbvprintf+0x62>
				conv->prec_present = false;
    1e80:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1e84:	f36f 0341 	bfc	r3, #1, #1
    1e88:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1e8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1e90:	e76c      	b.n	1d6c <cbvprintf+0x80>
		} else if (conv->prec_present) {
    1e92:	f013 0f02 	tst.w	r3, #2
    1e96:	d002      	beq.n	1e9e <cbvprintf+0x1b2>
			precision = conv->prec_value;
    1e98:	f8dd a020 	ldr.w	sl, [sp, #32]
    1e9c:	e766      	b.n	1d6c <cbvprintf+0x80>
		int precision = -1;
    1e9e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1ea2:	e763      	b.n	1d6c <cbvprintf+0x80>
			switch (length_mod) {
    1ea4:	1ecb      	subs	r3, r1, #3
    1ea6:	2b04      	cmp	r3, #4
    1ea8:	d804      	bhi.n	1eb4 <cbvprintf+0x1c8>
    1eaa:	e8df f003 	tbb	[pc, r3]
    1eae:	1d0b      	.short	0x1d0b
    1eb0:	3529      	.short	0x3529
    1eb2:	35          	.byte	0x35
    1eb3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1eb4:	9b03      	ldr	r3, [sp, #12]
    1eb6:	1d1a      	adds	r2, r3, #4
    1eb8:	9203      	str	r2, [sp, #12]
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	17da      	asrs	r2, r3, #31
    1ebe:	9304      	str	r3, [sp, #16]
    1ec0:	9205      	str	r2, [sp, #20]
				break;
    1ec2:	e006      	b.n	1ed2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    1ec4:	9b03      	ldr	r3, [sp, #12]
    1ec6:	1d1a      	adds	r2, r3, #4
    1ec8:	9203      	str	r2, [sp, #12]
    1eca:	681b      	ldr	r3, [r3, #0]
    1ecc:	17da      	asrs	r2, r3, #31
    1ece:	9304      	str	r3, [sp, #16]
    1ed0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    1ed2:	2901      	cmp	r1, #1
    1ed4:	d028      	beq.n	1f28 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    1ed6:	2902      	cmp	r1, #2
    1ed8:	f47f af5f 	bne.w	1d9a <cbvprintf+0xae>
				value->sint = (short)value->sint;
    1edc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1ee0:	17da      	asrs	r2, r3, #31
    1ee2:	9304      	str	r3, [sp, #16]
    1ee4:	9205      	str	r2, [sp, #20]
    1ee6:	e758      	b.n	1d9a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1ee8:	9b03      	ldr	r3, [sp, #12]
    1eea:	3307      	adds	r3, #7
    1eec:	f023 0307 	bic.w	r3, r3, #7
    1ef0:	f103 0208 	add.w	r2, r3, #8
    1ef4:	9203      	str	r2, [sp, #12]
    1ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1efe:	e7e8      	b.n	1ed2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1f00:	9b03      	ldr	r3, [sp, #12]
    1f02:	3307      	adds	r3, #7
    1f04:	f023 0307 	bic.w	r3, r3, #7
    1f08:	f103 0208 	add.w	r2, r3, #8
    1f0c:	9203      	str	r2, [sp, #12]
    1f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1f16:	e7dc      	b.n	1ed2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1f18:	9b03      	ldr	r3, [sp, #12]
    1f1a:	1d1a      	adds	r2, r3, #4
    1f1c:	9203      	str	r2, [sp, #12]
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	17da      	asrs	r2, r3, #31
				value->sint =
    1f22:	9304      	str	r3, [sp, #16]
    1f24:	9205      	str	r2, [sp, #20]
				break;
    1f26:	e7d4      	b.n	1ed2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    1f28:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1f2c:	9304      	str	r3, [sp, #16]
    1f2e:	2300      	movs	r3, #0
    1f30:	9305      	str	r3, [sp, #20]
    1f32:	e732      	b.n	1d9a <cbvprintf+0xae>
			switch (length_mod) {
    1f34:	1ecb      	subs	r3, r1, #3
    1f36:	2b04      	cmp	r3, #4
    1f38:	d804      	bhi.n	1f44 <cbvprintf+0x258>
    1f3a:	e8df f003 	tbb	[pc, r3]
    1f3e:	1f0b      	.short	0x1f0b
    1f40:	4135      	.short	0x4135
    1f42:	41          	.byte	0x41
    1f43:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1f44:	9b03      	ldr	r3, [sp, #12]
    1f46:	1d1a      	adds	r2, r3, #4
    1f48:	9203      	str	r2, [sp, #12]
    1f4a:	681b      	ldr	r3, [r3, #0]
    1f4c:	9304      	str	r3, [sp, #16]
    1f4e:	2300      	movs	r3, #0
    1f50:	9305      	str	r3, [sp, #20]
				break;
    1f52:	e01e      	b.n	1f92 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    1f54:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1f58:	2b63      	cmp	r3, #99	; 0x63
    1f5a:	d007      	beq.n	1f6c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1f5c:	9b03      	ldr	r3, [sp, #12]
    1f5e:	1d1a      	adds	r2, r3, #4
    1f60:	9203      	str	r2, [sp, #12]
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	9304      	str	r3, [sp, #16]
    1f66:	2300      	movs	r3, #0
    1f68:	9305      	str	r3, [sp, #20]
    1f6a:	e012      	b.n	1f92 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1f6c:	9b03      	ldr	r3, [sp, #12]
    1f6e:	1d1a      	adds	r2, r3, #4
    1f70:	9203      	str	r2, [sp, #12]
    1f72:	681b      	ldr	r3, [r3, #0]
    1f74:	9304      	str	r3, [sp, #16]
    1f76:	2300      	movs	r3, #0
    1f78:	9305      	str	r3, [sp, #20]
    1f7a:	e00a      	b.n	1f92 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1f7c:	9b03      	ldr	r3, [sp, #12]
    1f7e:	3307      	adds	r3, #7
    1f80:	f023 0307 	bic.w	r3, r3, #7
    1f84:	f103 0208 	add.w	r2, r3, #8
    1f88:	9203      	str	r2, [sp, #12]
    1f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    1f92:	2901      	cmp	r1, #1
    1f94:	d01c      	beq.n	1fd0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1f96:	2902      	cmp	r1, #2
    1f98:	f47f aeff 	bne.w	1d9a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1f9c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1fa0:	9304      	str	r3, [sp, #16]
    1fa2:	2300      	movs	r3, #0
    1fa4:	9305      	str	r3, [sp, #20]
    1fa6:	e6f8      	b.n	1d9a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	3307      	adds	r3, #7
    1fac:	f023 0307 	bic.w	r3, r3, #7
    1fb0:	f103 0208 	add.w	r2, r3, #8
    1fb4:	9203      	str	r2, [sp, #12]
    1fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1fbe:	e7e8      	b.n	1f92 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1fc0:	9b03      	ldr	r3, [sp, #12]
    1fc2:	1d1a      	adds	r2, r3, #4
    1fc4:	9203      	str	r2, [sp, #12]
    1fc6:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1fc8:	9304      	str	r3, [sp, #16]
    1fca:	2300      	movs	r3, #0
    1fcc:	9305      	str	r3, [sp, #20]
				break;
    1fce:	e7e0      	b.n	1f92 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    1fd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1fd4:	9304      	str	r3, [sp, #16]
    1fd6:	2300      	movs	r3, #0
    1fd8:	9305      	str	r3, [sp, #20]
    1fda:	e6de      	b.n	1d9a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1fdc:	2908      	cmp	r1, #8
    1fde:	d00b      	beq.n	1ff8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    1fe0:	9b03      	ldr	r3, [sp, #12]
    1fe2:	3307      	adds	r3, #7
    1fe4:	f023 0307 	bic.w	r3, r3, #7
    1fe8:	f103 0208 	add.w	r2, r3, #8
    1fec:	9203      	str	r2, [sp, #12]
    1fee:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ff6:	e6d0      	b.n	1d9a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1ff8:	9b03      	ldr	r3, [sp, #12]
    1ffa:	3307      	adds	r3, #7
    1ffc:	f023 0307 	bic.w	r3, r3, #7
    2000:	f103 0208 	add.w	r2, r3, #8
    2004:	9203      	str	r2, [sp, #12]
    2006:	e9d3 2300 	ldrd	r2, r3, [r3]
    200a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    200e:	e6c4      	b.n	1d9a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    2010:	9b03      	ldr	r3, [sp, #12]
    2012:	1d1a      	adds	r2, r3, #4
    2014:	9203      	str	r2, [sp, #12]
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	9304      	str	r3, [sp, #16]
    201a:	e6be      	b.n	1d9a <cbvprintf+0xae>
			OUTS(sp, fp);
    201c:	9f02      	ldr	r7, [sp, #8]
    201e:	463b      	mov	r3, r7
    2020:	464a      	mov	r2, r9
    2022:	4629      	mov	r1, r5
    2024:	4630      	mov	r0, r6
    2026:	f008 ff7d 	bl	af24 <outs>
    202a:	2800      	cmp	r0, #0
    202c:	f2c0 8141 	blt.w	22b2 <cbvprintf+0x5c6>
    2030:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2032:	46b9      	mov	r9, r7
			continue;
    2034:	e662      	b.n	1cfc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    2036:	4629      	mov	r1, r5
    2038:	2025      	movs	r0, #37	; 0x25
    203a:	47b0      	blx	r6
    203c:	2800      	cmp	r0, #0
    203e:	f2c0 8138 	blt.w	22b2 <cbvprintf+0x5c6>
    2042:	3401      	adds	r4, #1
		char sign = 0;
    2044:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2046:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    204a:	f04f 0900 	mov.w	r9, #0
			break;
    204e:	e09b      	b.n	2188 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    2050:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    2054:	f1ba 0f00 	cmp.w	sl, #0
    2058:	db07      	blt.n	206a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    205a:	4651      	mov	r1, sl
    205c:	4648      	mov	r0, r9
    205e:	f009 f905 	bl	b26c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2062:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    2066:	46d8      	mov	r8, fp
			precision = -1;

			break;
    2068:	e08e      	b.n	2188 <cbvprintf+0x49c>
				len = strlen(bps);
    206a:	4648      	mov	r0, r9
    206c:	f009 f8f5 	bl	b25a <strlen>
    2070:	e7f7      	b.n	2062 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2072:	9b04      	ldr	r3, [sp, #16]
    2074:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2078:	46d8      	mov	r8, fp
			bpe = buf + 1;
    207a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    207e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    2082:	e081      	b.n	2188 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2084:	f018 0f08 	tst.w	r8, #8
    2088:	d105      	bne.n	2096 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    208a:	f018 0810 	ands.w	r8, r8, #16
    208e:	d004      	beq.n	209a <cbvprintf+0x3ae>
				sign = ' ';
    2090:	f04f 0820 	mov.w	r8, #32
    2094:	e001      	b.n	209a <cbvprintf+0x3ae>
				sign = '+';
    2096:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    209a:	9a04      	ldr	r2, [sp, #16]
    209c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    209e:	2b00      	cmp	r3, #0
    20a0:	db02      	blt.n	20a8 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    20a2:	9204      	str	r2, [sp, #16]
    20a4:	9305      	str	r3, [sp, #20]
    20a6:	e008      	b.n	20ba <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    20a8:	4252      	negs	r2, r2
    20aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    20ae:	9204      	str	r2, [sp, #16]
    20b0:	9305      	str	r3, [sp, #20]
				sign = '-';
    20b2:	f04f 082d 	mov.w	r8, #45	; 0x2d
    20b6:	e000      	b.n	20ba <cbvprintf+0x3ce>
		switch (conv->specifier) {
    20b8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    20ba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    20be:	9300      	str	r3, [sp, #0]
    20c0:	ab0a      	add	r3, sp, #40	; 0x28
    20c2:	aa06      	add	r2, sp, #24
    20c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    20c8:	f008 fec2 	bl	ae50 <encode_uint>
    20cc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    20ce:	f1ba 0f00 	cmp.w	sl, #0
    20d2:	f2c0 8088 	blt.w	21e6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    20d6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    20da:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    20de:	f89d 2018 	ldrb.w	r2, [sp, #24]
    20e2:	f36f 1286 	bfc	r2, #6, #1
    20e6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    20ea:	459a      	cmp	sl, r3
    20ec:	d97e      	bls.n	21ec <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    20ee:	ebaa 0303 	sub.w	r3, sl, r3
    20f2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    20f4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    20f8:	e046      	b.n	2188 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    20fa:	9804      	ldr	r0, [sp, #16]
    20fc:	b928      	cbnz	r0, 210a <cbvprintf+0x41e>
		char sign = 0;
    20fe:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2100:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 22b8 <cbvprintf+0x5cc>
			bps = "(nil)";
    2104:	f1aa 0905 	sub.w	r9, sl, #5
    2108:	e03e      	b.n	2188 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    210a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    210e:	9300      	str	r3, [sp, #0]
    2110:	ab0a      	add	r3, sp, #40	; 0x28
    2112:	aa06      	add	r2, sp, #24
    2114:	2100      	movs	r1, #0
    2116:	f008 fe9b 	bl	ae50 <encode_uint>
    211a:	4681      	mov	r9, r0
				conv->altform_0c = true;
    211c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2120:	f043 0310 	orr.w	r3, r3, #16
    2124:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    2128:	2378      	movs	r3, #120	; 0x78
    212a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    212e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    2130:	e7cd      	b.n	20ce <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2132:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    2134:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2138:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    213c:	2b07      	cmp	r3, #7
    213e:	d806      	bhi.n	214e <cbvprintf+0x462>
    2140:	e8df f003 	tbb	[pc, r3]
    2144:	0f0d0b04 	.word	0x0f0d0b04
    2148:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    214c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    214e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2150:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2154:	f04f 0900 	mov.w	r9, #0
}
    2158:	e016      	b.n	2188 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    215a:	7014      	strb	r4, [r2, #0]
		break;
    215c:	e7f7      	b.n	214e <cbvprintf+0x462>
		*(short *)dp = (short)count;
    215e:	8014      	strh	r4, [r2, #0]
		break;
    2160:	e7f5      	b.n	214e <cbvprintf+0x462>
		*(long *)dp = (long)count;
    2162:	6014      	str	r4, [r2, #0]
		break;
    2164:	e7f3      	b.n	214e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    2166:	17e3      	asrs	r3, r4, #31
    2168:	6014      	str	r4, [r2, #0]
    216a:	6053      	str	r3, [r2, #4]
		break;
    216c:	e7ef      	b.n	214e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    216e:	17e3      	asrs	r3, r4, #31
    2170:	6014      	str	r4, [r2, #0]
    2172:	6053      	str	r3, [r2, #4]
		break;
    2174:	e7eb      	b.n	214e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    2176:	6014      	str	r4, [r2, #0]
		break;
    2178:	e7e9      	b.n	214e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    217a:	6014      	str	r4, [r2, #0]
		break;
    217c:	e7e7      	b.n	214e <cbvprintf+0x462>
		switch (conv->specifier) {
    217e:	46d8      	mov	r8, fp
    2180:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2184:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2188:	f1b9 0f00 	cmp.w	r9, #0
    218c:	f000 808d 	beq.w	22aa <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2190:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    2194:	f1b8 0f00 	cmp.w	r8, #0
    2198:	d000      	beq.n	219c <cbvprintf+0x4b0>
			nj_len += 1U;
    219a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    219c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    21a0:	f012 0f10 	tst.w	r2, #16
    21a4:	d025      	beq.n	21f2 <cbvprintf+0x506>
			nj_len += 2U;
    21a6:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    21a8:	9907      	ldr	r1, [sp, #28]
    21aa:	440b      	add	r3, r1
		if (conv->pad_fp) {
    21ac:	f012 0f40 	tst.w	r2, #64	; 0x40
    21b0:	d001      	beq.n	21b6 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    21b2:	9a08      	ldr	r2, [sp, #32]
    21b4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    21b6:	2f00      	cmp	r7, #0
    21b8:	dd31      	ble.n	221e <cbvprintf+0x532>
			width -= (int)nj_len;
    21ba:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    21bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    21c0:	f013 0f04 	tst.w	r3, #4
    21c4:	d12b      	bne.n	221e <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    21c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    21ca:	d017      	beq.n	21fc <cbvprintf+0x510>
					if (sign != 0) {
    21cc:	f1b8 0f00 	cmp.w	r8, #0
    21d0:	d017      	beq.n	2202 <cbvprintf+0x516>
						OUTC(sign);
    21d2:	4629      	mov	r1, r5
    21d4:	4640      	mov	r0, r8
    21d6:	47b0      	blx	r6
    21d8:	2800      	cmp	r0, #0
    21da:	db6a      	blt.n	22b2 <cbvprintf+0x5c6>
    21dc:	3401      	adds	r4, #1
						sign = 0;
    21de:	46d8      	mov	r8, fp
					}
					pad = '0';
    21e0:	f04f 0b30 	mov.w	fp, #48	; 0x30
    21e4:	e00f      	b.n	2206 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    21e6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    21ea:	e7cd      	b.n	2188 <cbvprintf+0x49c>
    21ec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    21f0:	e7ca      	b.n	2188 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    21f2:	f012 0f08 	tst.w	r2, #8
    21f6:	d0d7      	beq.n	21a8 <cbvprintf+0x4bc>
			nj_len += 1U;
    21f8:	3301      	adds	r3, #1
    21fa:	e7d5      	b.n	21a8 <cbvprintf+0x4bc>
				char pad = ' ';
    21fc:	f04f 0b20 	mov.w	fp, #32
    2200:	e001      	b.n	2206 <cbvprintf+0x51a>
					pad = '0';
    2202:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2206:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2208:	1e5f      	subs	r7, r3, #1
    220a:	2b00      	cmp	r3, #0
    220c:	dd07      	ble.n	221e <cbvprintf+0x532>
					OUTC(pad);
    220e:	4629      	mov	r1, r5
    2210:	4658      	mov	r0, fp
    2212:	47b0      	blx	r6
    2214:	2800      	cmp	r0, #0
    2216:	db4c      	blt.n	22b2 <cbvprintf+0x5c6>
    2218:	3401      	adds	r4, #1
				while (width-- > 0) {
    221a:	463b      	mov	r3, r7
    221c:	e7f4      	b.n	2208 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    221e:	f1b8 0f00 	cmp.w	r8, #0
    2222:	d005      	beq.n	2230 <cbvprintf+0x544>
			OUTC(sign);
    2224:	4629      	mov	r1, r5
    2226:	4640      	mov	r0, r8
    2228:	47b0      	blx	r6
    222a:	2800      	cmp	r0, #0
    222c:	db41      	blt.n	22b2 <cbvprintf+0x5c6>
    222e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    2230:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2234:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    223c:	4313      	orrs	r3, r2
    223e:	d005      	beq.n	224c <cbvprintf+0x560>
				OUTC('0');
    2240:	4629      	mov	r1, r5
    2242:	2030      	movs	r0, #48	; 0x30
    2244:	47b0      	blx	r6
    2246:	2800      	cmp	r0, #0
    2248:	db33      	blt.n	22b2 <cbvprintf+0x5c6>
    224a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    224c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2250:	f013 0f10 	tst.w	r3, #16
    2254:	d006      	beq.n	2264 <cbvprintf+0x578>
				OUTC(conv->specifier);
    2256:	4629      	mov	r1, r5
    2258:	f89d 001b 	ldrb.w	r0, [sp, #27]
    225c:	47b0      	blx	r6
    225e:	2800      	cmp	r0, #0
    2260:	db27      	blt.n	22b2 <cbvprintf+0x5c6>
    2262:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2264:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    2266:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    226a:	2b00      	cmp	r3, #0
    226c:	dd07      	ble.n	227e <cbvprintf+0x592>
				OUTC('0');
    226e:	4629      	mov	r1, r5
    2270:	2030      	movs	r0, #48	; 0x30
    2272:	47b0      	blx	r6
    2274:	2800      	cmp	r0, #0
    2276:	db1c      	blt.n	22b2 <cbvprintf+0x5c6>
    2278:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    227a:	4643      	mov	r3, r8
    227c:	e7f3      	b.n	2266 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    227e:	4653      	mov	r3, sl
    2280:	464a      	mov	r2, r9
    2282:	4629      	mov	r1, r5
    2284:	4630      	mov	r0, r6
    2286:	f008 fe4d 	bl	af24 <outs>
    228a:	2800      	cmp	r0, #0
    228c:	db11      	blt.n	22b2 <cbvprintf+0x5c6>
    228e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2290:	2f00      	cmp	r7, #0
    2292:	dd07      	ble.n	22a4 <cbvprintf+0x5b8>
			OUTC(' ');
    2294:	4629      	mov	r1, r5
    2296:	2020      	movs	r0, #32
    2298:	47b0      	blx	r6
    229a:	2800      	cmp	r0, #0
    229c:	db09      	blt.n	22b2 <cbvprintf+0x5c6>
    229e:	3401      	adds	r4, #1
			--width;
    22a0:	3f01      	subs	r7, #1
    22a2:	e7f5      	b.n	2290 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    22a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    22a8:	e528      	b.n	1cfc <cbvprintf+0x10>
    22aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    22ae:	e525      	b.n	1cfc <cbvprintf+0x10>
		}
	}

	return count;
    22b0:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    22b2:	b011      	add	sp, #68	; 0x44
    22b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22b8:	0000c99d 	.word	0x0000c99d

000022bc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    22bc:	b508      	push	{r3, lr}
	__asm__ volatile(
    22be:	f04f 0220 	mov.w	r2, #32
    22c2:	f3ef 8311 	mrs	r3, BASEPRI
    22c6:	f382 8812 	msr	BASEPRI_MAX, r2
    22ca:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    22ce:	f001 ff27 	bl	4120 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    22d2:	4803      	ldr	r0, [pc, #12]	; (22e0 <sys_reboot+0x24>)
    22d4:	f008 fcc2 	bl	ac5c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    22d8:	f000 ffa0 	bl	321c <arch_cpu_idle>
    22dc:	e7fc      	b.n	22d8 <sys_reboot+0x1c>
    22de:	bf00      	nop
    22e0:	0000c9a0 	.word	0x0000c9a0

000022e4 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    22e4:	2900      	cmp	r1, #0
    22e6:	d150      	bne.n	238a <msg_process+0xa6>
{
    22e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22ec:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    22ee:	2400      	movs	r4, #0
    22f0:	e022      	b.n	2338 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    22f2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 238c <msg_process+0xa8>
    22f6:	f44f 7399 	mov.w	r3, #306	; 0x132
    22fa:	464a      	mov	r2, r9
    22fc:	4924      	ldr	r1, [pc, #144]	; (2390 <msg_process+0xac>)
    22fe:	4825      	ldr	r0, [pc, #148]	; (2394 <msg_process+0xb0>)
    2300:	f008 fe31 	bl	af66 <assert_print>
    2304:	f44f 7199 	mov.w	r1, #306	; 0x132
    2308:	4648      	mov	r0, r9
    230a:	f008 fe25 	bl	af58 <assert_post_action>
    230e:	e01f      	b.n	2350 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    2310:	f8df 9078 	ldr.w	r9, [pc, #120]	; 238c <msg_process+0xa8>
    2314:	2385      	movs	r3, #133	; 0x85
    2316:	464a      	mov	r2, r9
    2318:	491d      	ldr	r1, [pc, #116]	; (2390 <msg_process+0xac>)
    231a:	481e      	ldr	r0, [pc, #120]	; (2394 <msg_process+0xb0>)
    231c:	f008 fe23 	bl	af66 <assert_print>
    2320:	2185      	movs	r1, #133	; 0x85
    2322:	4648      	mov	r0, r9
    2324:	f008 fe18 	bl	af58 <assert_post_action>
    2328:	e01e      	b.n	2368 <msg_process+0x84>
	backend->api->process(backend, msg);
    232a:	f858 3005 	ldr.w	r3, [r8, r5]
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	4639      	mov	r1, r7
    2332:	4630      	mov	r0, r6
    2334:	4798      	blx	r3
    2336:	3401      	adds	r4, #1
    2338:	4b17      	ldr	r3, [pc, #92]	; (2398 <msg_process+0xb4>)
    233a:	4a18      	ldr	r2, [pc, #96]	; (239c <msg_process+0xb8>)
    233c:	1a9b      	subs	r3, r3, r2
    233e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2342:	da20      	bge.n	2386 <msg_process+0xa2>
	return &__log_backends_start[idx];
    2344:	ea4f 1804 	mov.w	r8, r4, lsl #4
    2348:	4d14      	ldr	r5, [pc, #80]	; (239c <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    234a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    234e:	d0d0      	beq.n	22f2 <msg_process+0xe>
	return backend->cb->active;
    2350:	6873      	ldr	r3, [r6, #4]
    2352:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    2354:	2b00      	cmp	r3, #0
    2356:	d0ee      	beq.n	2336 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    2358:	4639      	mov	r1, r7
    235a:	4630      	mov	r0, r6
    235c:	f008 fe14 	bl	af88 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    2360:	2800      	cmp	r0, #0
    2362:	d0e8      	beq.n	2336 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    2364:	2e00      	cmp	r6, #0
    2366:	d0d3      	beq.n	2310 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    2368:	2f00      	cmp	r7, #0
    236a:	d1de      	bne.n	232a <msg_process+0x46>
    236c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 238c <msg_process+0xa8>
    2370:	2386      	movs	r3, #134	; 0x86
    2372:	464a      	mov	r2, r9
    2374:	490a      	ldr	r1, [pc, #40]	; (23a0 <msg_process+0xbc>)
    2376:	4807      	ldr	r0, [pc, #28]	; (2394 <msg_process+0xb0>)
    2378:	f008 fdf5 	bl	af66 <assert_print>
    237c:	2186      	movs	r1, #134	; 0x86
    237e:	4648      	mov	r0, r9
    2380:	f008 fdea 	bl	af58 <assert_post_action>
    2384:	e7d1      	b.n	232a <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    238a:	4770      	bx	lr
    238c:	0000c9cc 	.word	0x0000c9cc
    2390:	0000ca04 	.word	0x0000ca04
    2394:	0000c5c0 	.word	0x0000c5c0
    2398:	0000c1bc 	.word	0x0000c1bc
    239c:	0000c19c 	.word	0x0000c19c
    23a0:	0000ca1c 	.word	0x0000ca1c

000023a4 <log_format_func_t_get>:
}
    23a4:	4b01      	ldr	r3, [pc, #4]	; (23ac <log_format_func_t_get+0x8>)
    23a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    23aa:	4770      	bx	lr
    23ac:	0000caa0 	.word	0x0000caa0

000023b0 <log_init>:
{
    23b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    23b2:	4b20      	ldr	r3, [pc, #128]	; (2434 <log_init+0x84>)
    23b4:	4a20      	ldr	r2, [pc, #128]	; (2438 <log_init+0x88>)
    23b6:	1a9b      	subs	r3, r3, r2
    23b8:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    23ba:	2b90      	cmp	r3, #144	; 0x90
    23bc:	d80e      	bhi.n	23dc <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    23be:	4b1f      	ldr	r3, [pc, #124]	; (243c <log_init+0x8c>)
    23c0:	f3bf 8f5b 	dmb	ish
    23c4:	e853 2f00 	ldrex	r2, [r3]
    23c8:	1c51      	adds	r1, r2, #1
    23ca:	e843 1000 	strex	r0, r1, [r3]
    23ce:	2800      	cmp	r0, #0
    23d0:	d1f8      	bne.n	23c4 <log_init+0x14>
    23d2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    23d6:	bb5a      	cbnz	r2, 2430 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    23d8:	2400      	movs	r4, #0
    23da:	e017      	b.n	240c <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    23dc:	4c18      	ldr	r4, [pc, #96]	; (2440 <log_init+0x90>)
    23de:	f240 2373 	movw	r3, #627	; 0x273
    23e2:	4622      	mov	r2, r4
    23e4:	4917      	ldr	r1, [pc, #92]	; (2444 <log_init+0x94>)
    23e6:	4818      	ldr	r0, [pc, #96]	; (2448 <log_init+0x98>)
    23e8:	f008 fdbd 	bl	af66 <assert_print>
    23ec:	f240 2173 	movw	r1, #627	; 0x273
    23f0:	4620      	mov	r0, r4
    23f2:	f008 fdb1 	bl	af58 <assert_post_action>
    23f6:	e7e2      	b.n	23be <log_init+0xe>
					   backend->cb->ctx,
    23f8:	4b0f      	ldr	r3, [pc, #60]	; (2438 <log_init+0x88>)
    23fa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    23fe:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    2400:	2204      	movs	r2, #4
    2402:	6819      	ldr	r1, [r3, #0]
    2404:	4628      	mov	r0, r5
    2406:	f000 f8d3 	bl	25b0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    240a:	3401      	adds	r4, #1
    240c:	42b4      	cmp	r4, r6
    240e:	da0f      	bge.n	2430 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    2410:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    2412:	4d09      	ldr	r5, [pc, #36]	; (2438 <log_init+0x88>)
    2414:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    2418:	7b2b      	ldrb	r3, [r5, #12]
    241a:	2b00      	cmp	r3, #0
    241c:	d0f5      	beq.n	240a <log_init+0x5a>
			if (backend->api->init != NULL) {
    241e:	0123      	lsls	r3, r4, #4
    2420:	4a05      	ldr	r2, [pc, #20]	; (2438 <log_init+0x88>)
    2422:	58d3      	ldr	r3, [r2, r3]
    2424:	699b      	ldr	r3, [r3, #24]
    2426:	2b00      	cmp	r3, #0
    2428:	d0e6      	beq.n	23f8 <log_init+0x48>
				backend->api->init(backend);
    242a:	4628      	mov	r0, r5
    242c:	4798      	blx	r3
    242e:	e7e3      	b.n	23f8 <log_init+0x48>
}
    2430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2432:	bf00      	nop
    2434:	0000c1bc 	.word	0x0000c1bc
    2438:	0000c19c 	.word	0x0000c19c
    243c:	20000630 	.word	0x20000630
    2440:	0000ca30 	.word	0x0000ca30
    2444:	0000ca78 	.word	0x0000ca78
    2448:	0000c5c0 	.word	0x0000c5c0

0000244c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    244c:	b138      	cbz	r0, 245e <log_set_timestamp_func+0x12>
{
    244e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    2450:	4a04      	ldr	r2, [pc, #16]	; (2464 <log_set_timestamp_func+0x18>)
    2452:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    2454:	4608      	mov	r0, r1
    2456:	f000 fabf 	bl	29d8 <log_output_timestamp_freq_set>
	return 0;
    245a:	2000      	movs	r0, #0
}
    245c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    245e:	f06f 0015 	mvn.w	r0, #21
}
    2462:	4770      	bx	lr
    2464:	2000009c 	.word	0x2000009c

00002468 <log_core_init>:
{
    2468:	b508      	push	{r3, lr}
	panic_mode = false;
    246a:	2300      	movs	r3, #0
    246c:	4a04      	ldr	r2, [pc, #16]	; (2480 <log_core_init+0x18>)
    246e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2470:	4a04      	ldr	r2, [pc, #16]	; (2484 <log_core_init+0x1c>)
    2472:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    2474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2478:	4803      	ldr	r0, [pc, #12]	; (2488 <log_core_init+0x20>)
    247a:	f7ff ffe7 	bl	244c <log_set_timestamp_func>
}
    247e:	bd08      	pop	{r3, pc}
    2480:	20001381 	.word	0x20001381
    2484:	2000062c 	.word	0x2000062c
    2488:	0000af8d 	.word	0x0000af8d

0000248c <z_impl_log_panic>:
	if (panic_mode) {
    248c:	4b20      	ldr	r3, [pc, #128]	; (2510 <z_impl_log_panic+0x84>)
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	b103      	cbz	r3, 2494 <z_impl_log_panic+0x8>
    2492:	4770      	bx	lr
{
    2494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    2498:	f7ff ff8a 	bl	23b0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    249c:	2400      	movs	r4, #0
    249e:	e013      	b.n	24c8 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    24a0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2514 <z_impl_log_panic+0x88>
    24a4:	f44f 7399 	mov.w	r3, #306	; 0x132
    24a8:	4642      	mov	r2, r8
    24aa:	491b      	ldr	r1, [pc, #108]	; (2518 <z_impl_log_panic+0x8c>)
    24ac:	481b      	ldr	r0, [pc, #108]	; (251c <z_impl_log_panic+0x90>)
    24ae:	f008 fd5a 	bl	af66 <assert_print>
    24b2:	f44f 7199 	mov.w	r1, #306	; 0x132
    24b6:	4640      	mov	r0, r8
    24b8:	f008 fd4e 	bl	af58 <assert_post_action>
    24bc:	e00f      	b.n	24de <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    24be:	597b      	ldr	r3, [r7, r5]
    24c0:	695b      	ldr	r3, [r3, #20]
    24c2:	4630      	mov	r0, r6
    24c4:	4798      	blx	r3
    24c6:	3401      	adds	r4, #1
    24c8:	4b15      	ldr	r3, [pc, #84]	; (2520 <z_impl_log_panic+0x94>)
    24ca:	4a16      	ldr	r2, [pc, #88]	; (2524 <z_impl_log_panic+0x98>)
    24cc:	1a9b      	subs	r3, r3, r2
    24ce:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    24d2:	da17      	bge.n	2504 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    24d4:	0127      	lsls	r7, r4, #4
    24d6:	4d13      	ldr	r5, [pc, #76]	; (2524 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    24d8:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    24dc:	d0e0      	beq.n	24a0 <z_impl_log_panic+0x14>
	return backend->cb->active;
    24de:	6873      	ldr	r3, [r6, #4]
    24e0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    24e2:	2b00      	cmp	r3, #0
    24e4:	d0ef      	beq.n	24c6 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    24e6:	2e00      	cmp	r6, #0
    24e8:	d1e9      	bne.n	24be <z_impl_log_panic+0x32>
    24ea:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2514 <z_impl_log_panic+0x88>
    24ee:	23d7      	movs	r3, #215	; 0xd7
    24f0:	4642      	mov	r2, r8
    24f2:	4909      	ldr	r1, [pc, #36]	; (2518 <z_impl_log_panic+0x8c>)
    24f4:	4809      	ldr	r0, [pc, #36]	; (251c <z_impl_log_panic+0x90>)
    24f6:	f008 fd36 	bl	af66 <assert_print>
    24fa:	21d7      	movs	r1, #215	; 0xd7
    24fc:	4640      	mov	r0, r8
    24fe:	f008 fd2b 	bl	af58 <assert_post_action>
    2502:	e7dc      	b.n	24be <z_impl_log_panic+0x32>
	panic_mode = true;
    2504:	4b02      	ldr	r3, [pc, #8]	; (2510 <z_impl_log_panic+0x84>)
    2506:	2201      	movs	r2, #1
    2508:	701a      	strb	r2, [r3, #0]
}
    250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    250e:	bf00      	nop
    2510:	20001381 	.word	0x20001381
    2514:	0000c9cc 	.word	0x0000c9cc
    2518:	0000ca04 	.word	0x0000ca04
    251c:	0000c5c0 	.word	0x0000c5c0
    2520:	0000c1bc 	.word	0x0000c1bc
    2524:	0000c19c 	.word	0x0000c19c

00002528 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    2528:	4b01      	ldr	r3, [pc, #4]	; (2530 <z_log_notify_backend_enabled+0x8>)
    252a:	2201      	movs	r2, #1
    252c:	701a      	strb	r2, [r3, #0]
}
    252e:	4770      	bx	lr
    2530:	20001380 	.word	0x20001380

00002534 <z_log_dropped>:
    2534:	4b0d      	ldr	r3, [pc, #52]	; (256c <z_log_dropped+0x38>)
    2536:	f3bf 8f5b 	dmb	ish
    253a:	e853 2f00 	ldrex	r2, [r3]
    253e:	3201      	adds	r2, #1
    2540:	e843 2100 	strex	r1, r2, [r3]
    2544:	2900      	cmp	r1, #0
    2546:	d1f8      	bne.n	253a <z_log_dropped+0x6>
    2548:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    254c:	b900      	cbnz	r0, 2550 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    254e:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2550:	4b07      	ldr	r3, [pc, #28]	; (2570 <z_log_dropped+0x3c>)
    2552:	f3bf 8f5b 	dmb	ish
    2556:	e853 2f00 	ldrex	r2, [r3]
    255a:	3a01      	subs	r2, #1
    255c:	e843 2100 	strex	r1, r2, [r3]
    2560:	2900      	cmp	r1, #0
    2562:	d1f8      	bne.n	2556 <z_log_dropped+0x22>
    2564:	f3bf 8f5b 	dmb	ish
    2568:	e7f1      	b.n	254e <z_log_dropped+0x1a>
    256a:	bf00      	nop
    256c:	2000062c 	.word	0x2000062c
    2570:	20000628 	.word	0x20000628

00002574 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    2574:	b510      	push	{r4, lr}
    2576:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2578:	4b04      	ldr	r3, [pc, #16]	; (258c <z_log_msg2_commit+0x18>)
    257a:	681b      	ldr	r3, [r3, #0]
    257c:	4798      	blx	r3
    257e:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2580:	2100      	movs	r1, #0
    2582:	4620      	mov	r0, r4
    2584:	f7ff feae 	bl	22e4 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2588:	bd10      	pop	{r4, pc}
    258a:	bf00      	nop
    258c:	2000009c 	.word	0x2000009c

00002590 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <log_source_name_get+0x18>)
    2592:	4a06      	ldr	r2, [pc, #24]	; (25ac <log_source_name_get+0x1c>)
    2594:	1a9b      	subs	r3, r3, r2
    2596:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    259a:	d202      	bcs.n	25a2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    259c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    25a0:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    25a2:	2000      	movs	r0, #0
}
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	0000c19c 	.word	0x0000c19c
    25ac:	0000c14c 	.word	0x0000c14c

000025b0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    25b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b2:	4604      	mov	r4, r0
    25b4:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    25b6:	4d1e      	ldr	r5, [pc, #120]	; (2630 <log_backend_enable+0x80>)
    25b8:	1b45      	subs	r5, r0, r5
    25ba:	112d      	asrs	r5, r5, #4
    25bc:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    25be:	6803      	ldr	r3, [r0, #0]
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	b163      	cbz	r3, 25de <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    25c4:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    25c6:	b1cc      	cbz	r4, 25fc <log_backend_enable+0x4c>
	backend->cb->id = id;
    25c8:	6863      	ldr	r3, [r4, #4]
    25ca:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    25cc:	b314      	cbz	r4, 2614 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    25ce:	6863      	ldr	r3, [r4, #4]
    25d0:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    25d2:	6863      	ldr	r3, [r4, #4]
    25d4:	2201      	movs	r2, #1
    25d6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    25d8:	f7ff ffa6 	bl	2528 <z_log_notify_backend_enabled>
}
    25dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    25de:	4f15      	ldr	r7, [pc, #84]	; (2634 <log_backend_enable+0x84>)
    25e0:	23bb      	movs	r3, #187	; 0xbb
    25e2:	463a      	mov	r2, r7
    25e4:	4914      	ldr	r1, [pc, #80]	; (2638 <log_backend_enable+0x88>)
    25e6:	4815      	ldr	r0, [pc, #84]	; (263c <log_backend_enable+0x8c>)
    25e8:	f008 fcbd 	bl	af66 <assert_print>
    25ec:	4814      	ldr	r0, [pc, #80]	; (2640 <log_backend_enable+0x90>)
    25ee:	f008 fcba 	bl	af66 <assert_print>
    25f2:	21bb      	movs	r1, #187	; 0xbb
    25f4:	4638      	mov	r0, r7
    25f6:	f008 fcaf 	bl	af58 <assert_post_action>
    25fa:	e7e3      	b.n	25c4 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    25fc:	4f11      	ldr	r7, [pc, #68]	; (2644 <log_backend_enable+0x94>)
    25fe:	23e6      	movs	r3, #230	; 0xe6
    2600:	463a      	mov	r2, r7
    2602:	4911      	ldr	r1, [pc, #68]	; (2648 <log_backend_enable+0x98>)
    2604:	480d      	ldr	r0, [pc, #52]	; (263c <log_backend_enable+0x8c>)
    2606:	f008 fcae 	bl	af66 <assert_print>
    260a:	21e6      	movs	r1, #230	; 0xe6
    260c:	4638      	mov	r0, r7
    260e:	f008 fca3 	bl	af58 <assert_post_action>
    2612:	e7d9      	b.n	25c8 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    2614:	4d0b      	ldr	r5, [pc, #44]	; (2644 <log_backend_enable+0x94>)
    2616:	f240 1317 	movw	r3, #279	; 0x117
    261a:	462a      	mov	r2, r5
    261c:	490a      	ldr	r1, [pc, #40]	; (2648 <log_backend_enable+0x98>)
    261e:	4807      	ldr	r0, [pc, #28]	; (263c <log_backend_enable+0x8c>)
    2620:	f008 fca1 	bl	af66 <assert_print>
    2624:	f240 1117 	movw	r1, #279	; 0x117
    2628:	4628      	mov	r0, r5
    262a:	f008 fc95 	bl	af58 <assert_post_action>
    262e:	e7ce      	b.n	25ce <log_backend_enable+0x1e>
    2630:	0000c19c 	.word	0x0000c19c
    2634:	0000caac 	.word	0x0000caac
    2638:	0000cb08 	.word	0x0000cb08
    263c:	0000c5c0 	.word	0x0000c5c0
    2640:	0000cb20 	.word	0x0000cb20
    2644:	0000c9cc 	.word	0x0000c9cc
    2648:	0000ca04 	.word	0x0000ca04

0000264c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    264c:	b40e      	push	{r1, r2, r3}
    264e:	b500      	push	{lr}
    2650:	b082      	sub	sp, #8
    2652:	4601      	mov	r1, r0
    2654:	ab03      	add	r3, sp, #12
    2656:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    265a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    265c:	4803      	ldr	r0, [pc, #12]	; (266c <print_formatted+0x20>)
    265e:	f7ff fb45 	bl	1cec <cbvprintf>
	va_end(args);

	return length;
}
    2662:	b002      	add	sp, #8
    2664:	f85d eb04 	ldr.w	lr, [sp], #4
    2668:	b003      	add	sp, #12
    266a:	4770      	bx	lr
    266c:	0000afc1 	.word	0x0000afc1

00002670 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2670:	b530      	push	{r4, r5, lr}
    2672:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2674:	f011 0f44 	tst.w	r1, #68	; 0x44
    2678:	d005      	beq.n	2686 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    267a:	4b1a      	ldr	r3, [pc, #104]	; (26e4 <timestamp_print+0x74>)
    267c:	681c      	ldr	r4, [r3, #0]
    267e:	b934      	cbnz	r4, 268e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2680:	2000      	movs	r0, #0
	}

	return length;
}
    2682:	b005      	add	sp, #20
    2684:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2686:	4918      	ldr	r1, [pc, #96]	; (26e8 <timestamp_print+0x78>)
    2688:	f7ff ffe0 	bl	264c <print_formatted>
    268c:	e7f9      	b.n	2682 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    268e:	4b17      	ldr	r3, [pc, #92]	; (26ec <timestamp_print+0x7c>)
    2690:	6819      	ldr	r1, [r3, #0]
    2692:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2696:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    269a:	4a15      	ldr	r2, [pc, #84]	; (26f0 <timestamp_print+0x80>)
    269c:	fba2 320c 	umull	r3, r2, r2, ip
    26a0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    26a2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    26a6:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    26aa:	4b12      	ldr	r3, [pc, #72]	; (26f4 <timestamp_print+0x84>)
    26ac:	fba3 530e 	umull	r5, r3, r3, lr
    26b0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    26b2:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    26b6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    26ba:	fb0c f101 	mul.w	r1, ip, r1
    26be:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26c2:	fb05 1114 	mls	r1, r5, r4, r1
    26c6:	fb0c f101 	mul.w	r1, ip, r1
    26ca:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    26ce:	9102      	str	r1, [sp, #8]
    26d0:	9501      	str	r5, [sp, #4]
    26d2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    26d6:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    26da:	9100      	str	r1, [sp, #0]
    26dc:	4906      	ldr	r1, [pc, #24]	; (26f8 <timestamp_print+0x88>)
    26de:	f7ff ffb5 	bl	264c <print_formatted>
    26e2:	e7ce      	b.n	2682 <timestamp_print+0x12>
    26e4:	20000634 	.word	0x20000634
    26e8:	0000cb44 	.word	0x0000cb44
    26ec:	20000638 	.word	0x20000638
    26f0:	91a2b3c5 	.word	0x91a2b3c5
    26f4:	88888889 	.word	0x88888889
    26f8:	0000cb50 	.word	0x0000cb50

000026fc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    26fc:	b161      	cbz	r1, 2718 <color_print+0x1c>
{
    26fe:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2700:	b12a      	cbz	r2, 270e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2702:	4a06      	ldr	r2, [pc, #24]	; (271c <color_print+0x20>)
    2704:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2708:	b912      	cbnz	r2, 2710 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    270a:	4a05      	ldr	r2, [pc, #20]	; (2720 <color_print+0x24>)
    270c:	e000      	b.n	2710 <color_print+0x14>
    270e:	4a04      	ldr	r2, [pc, #16]	; (2720 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2710:	4904      	ldr	r1, [pc, #16]	; (2724 <color_print+0x28>)
    2712:	f7ff ff9b 	bl	264c <print_formatted>
	}
}
    2716:	bd08      	pop	{r3, pc}
    2718:	4770      	bx	lr
    271a:	bf00      	nop
    271c:	0000cc10 	.word	0x0000cc10
    2720:	0000cb6c 	.word	0x0000cb6c
    2724:	0000cb74 	.word	0x0000cb74

00002728 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2728:	f011 0f10 	tst.w	r1, #16
    272c:	d10b      	bne.n	2746 <newline_print+0x1e>
{
    272e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2730:	f011 0f20 	tst.w	r1, #32
    2734:	d003      	beq.n	273e <newline_print+0x16>
		print_formatted(ctx, "\n");
    2736:	4904      	ldr	r1, [pc, #16]	; (2748 <newline_print+0x20>)
    2738:	f7ff ff88 	bl	264c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    273c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    273e:	4903      	ldr	r1, [pc, #12]	; (274c <newline_print+0x24>)
    2740:	f7ff ff84 	bl	264c <print_formatted>
    2744:	e7fa      	b.n	273c <newline_print+0x14>
    2746:	4770      	bx	lr
    2748:	0000c3d8 	.word	0x0000c3d8
    274c:	0000e280 	.word	0x0000e280

00002750 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2754:	4605      	mov	r5, r0
    2756:	460f      	mov	r7, r1
    2758:	4616      	mov	r6, r2
    275a:	4698      	mov	r8, r3
	newline_print(output, flags);
    275c:	9906      	ldr	r1, [sp, #24]
    275e:	f7ff ffe3 	bl	2728 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2762:	2400      	movs	r4, #0
    2764:	4544      	cmp	r4, r8
    2766:	da05      	bge.n	2774 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2768:	4923      	ldr	r1, [pc, #140]	; (27f8 <hexdump_line_print+0xa8>)
    276a:	4628      	mov	r0, r5
    276c:	f7ff ff6e 	bl	264c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2770:	3401      	adds	r4, #1
    2772:	e7f7      	b.n	2764 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2774:	2400      	movs	r4, #0
    2776:	e009      	b.n	278c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2778:	491f      	ldr	r1, [pc, #124]	; (27f8 <hexdump_line_print+0xa8>)
    277a:	4628      	mov	r0, r5
    277c:	f7ff ff66 	bl	264c <print_formatted>
    2780:	e00b      	b.n	279a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2782:	491e      	ldr	r1, [pc, #120]	; (27fc <hexdump_line_print+0xac>)
    2784:	4628      	mov	r0, r5
    2786:	f7ff ff61 	bl	264c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    278a:	3401      	adds	r4, #1
    278c:	2c0f      	cmp	r4, #15
    278e:	dc0c      	bgt.n	27aa <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2790:	2c00      	cmp	r4, #0
    2792:	dd02      	ble.n	279a <hexdump_line_print+0x4a>
    2794:	f014 0f07 	tst.w	r4, #7
    2798:	d0ee      	beq.n	2778 <hexdump_line_print+0x28>
		if (i < length) {
    279a:	42b4      	cmp	r4, r6
    279c:	d2f1      	bcs.n	2782 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    279e:	5d3a      	ldrb	r2, [r7, r4]
    27a0:	4917      	ldr	r1, [pc, #92]	; (2800 <hexdump_line_print+0xb0>)
    27a2:	4628      	mov	r0, r5
    27a4:	f7ff ff52 	bl	264c <print_formatted>
    27a8:	e7ef      	b.n	278a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    27aa:	4916      	ldr	r1, [pc, #88]	; (2804 <hexdump_line_print+0xb4>)
    27ac:	4628      	mov	r0, r5
    27ae:	f7ff ff4d 	bl	264c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27b2:	2400      	movs	r4, #0
    27b4:	e009      	b.n	27ca <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    27b6:	4910      	ldr	r1, [pc, #64]	; (27f8 <hexdump_line_print+0xa8>)
    27b8:	4628      	mov	r0, r5
    27ba:	f7ff ff47 	bl	264c <print_formatted>
    27be:	e00b      	b.n	27d8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    27c0:	4911      	ldr	r1, [pc, #68]	; (2808 <hexdump_line_print+0xb8>)
    27c2:	4628      	mov	r0, r5
    27c4:	f7ff ff42 	bl	264c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27c8:	3401      	adds	r4, #1
    27ca:	2c0f      	cmp	r4, #15
    27cc:	dc12      	bgt.n	27f4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    27ce:	2c00      	cmp	r4, #0
    27d0:	dd02      	ble.n	27d8 <hexdump_line_print+0x88>
    27d2:	f014 0f07 	tst.w	r4, #7
    27d6:	d0ee      	beq.n	27b6 <hexdump_line_print+0x66>
		if (i < length) {
    27d8:	42b4      	cmp	r4, r6
    27da:	d206      	bcs.n	27ea <hexdump_line_print+0x9a>
			char c = (char)data[i];
    27dc:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    27de:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    27e2:	2b5e      	cmp	r3, #94	; 0x5e
    27e4:	d9ec      	bls.n	27c0 <hexdump_line_print+0x70>
    27e6:	222e      	movs	r2, #46	; 0x2e
    27e8:	e7ea      	b.n	27c0 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    27ea:	4903      	ldr	r1, [pc, #12]	; (27f8 <hexdump_line_print+0xa8>)
    27ec:	4628      	mov	r0, r5
    27ee:	f7ff ff2d 	bl	264c <print_formatted>
    27f2:	e7e9      	b.n	27c8 <hexdump_line_print+0x78>
		}
	}
}
    27f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27f8:	0000cb9c 	.word	0x0000cb9c
    27fc:	0000cb80 	.word	0x0000cb80
    2800:	0000cb78 	.word	0x0000cb78
    2804:	0000cb84 	.word	0x0000cb84
    2808:	0000cb88 	.word	0x0000cb88

0000280c <ids_print>:
{
    280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2810:	4680      	mov	r8, r0
    2812:	4616      	mov	r6, r2
    2814:	461d      	mov	r5, r3
    2816:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    281a:	b959      	cbnz	r1, 2834 <ids_print+0x28>
	int total = 0;
    281c:	2400      	movs	r4, #0
	if (source_id >= 0) {
    281e:	2f00      	cmp	r7, #0
    2820:	db1c      	blt.n	285c <ids_print+0x50>
		total += print_formatted(output,
    2822:	b186      	cbz	r6, 2846 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2824:	2301      	movs	r3, #1
    2826:	9a07      	ldr	r2, [sp, #28]
    2828:	4093      	lsls	r3, r2
				(func_on &&
    282a:	f013 0f10 	tst.w	r3, #16
    282e:	d118      	bne.n	2862 <ids_print+0x56>
		total += print_formatted(output,
    2830:	4e0d      	ldr	r6, [pc, #52]	; (2868 <ids_print+0x5c>)
    2832:	e009      	b.n	2848 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2834:	4b0d      	ldr	r3, [pc, #52]	; (286c <ids_print+0x60>)
    2836:	9a07      	ldr	r2, [sp, #28]
    2838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    283c:	490c      	ldr	r1, [pc, #48]	; (2870 <ids_print+0x64>)
    283e:	f7ff ff05 	bl	264c <print_formatted>
    2842:	4604      	mov	r4, r0
    2844:	e7eb      	b.n	281e <ids_print+0x12>
		total += print_formatted(output,
    2846:	4e08      	ldr	r6, [pc, #32]	; (2868 <ids_print+0x5c>)
    2848:	4639      	mov	r1, r7
    284a:	4628      	mov	r0, r5
    284c:	f7ff fea0 	bl	2590 <log_source_name_get>
    2850:	4602      	mov	r2, r0
    2852:	4631      	mov	r1, r6
    2854:	4640      	mov	r0, r8
    2856:	f7ff fef9 	bl	264c <print_formatted>
    285a:	4404      	add	r4, r0
}
    285c:	4620      	mov	r0, r4
    285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2862:	4e04      	ldr	r6, [pc, #16]	; (2874 <ids_print+0x68>)
    2864:	e7f0      	b.n	2848 <ids_print+0x3c>
    2866:	bf00      	nop
    2868:	0000cb8c 	.word	0x0000cb8c
    286c:	0000cc24 	.word	0x0000cc24
    2870:	0000cb98 	.word	0x0000cb98
    2874:	0000cb94 	.word	0x0000cb94

00002878 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    287c:	b085      	sub	sp, #20
    287e:	4605      	mov	r5, r0
    2880:	460c      	mov	r4, r1
    2882:	4616      	mov	r6, r2
    2884:	9303      	str	r3, [sp, #12]
    2886:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    288a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    288e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2892:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2896:	f008 fb91 	bl	afbc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    289a:	b1e8      	cbz	r0, 28d8 <prefix_print+0x60>
    289c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    289e:	4913      	ldr	r1, [pc, #76]	; (28ec <prefix_print+0x74>)
    28a0:	4628      	mov	r0, r5
    28a2:	f7ff fed3 	bl	264c <print_formatted>
    28a6:	4607      	mov	r7, r0
	}

	if (stamp) {
    28a8:	f1bb 0f00 	cmp.w	fp, #0
    28ac:	d116      	bne.n	28dc <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    28ae:	4642      	mov	r2, r8
    28b0:	4651      	mov	r1, sl
    28b2:	4628      	mov	r0, r5
    28b4:	f008 fbae 	bl	b014 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    28b8:	f8cd 8004 	str.w	r8, [sp, #4]
    28bc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    28c0:	9300      	str	r3, [sp, #0]
    28c2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    28c6:	4632      	mov	r2, r6
    28c8:	4649      	mov	r1, r9
    28ca:	4628      	mov	r0, r5
    28cc:	f7ff ff9e 	bl	280c <ids_print>
			domain_id, source_id, level);


	return length;
}
    28d0:	4438      	add	r0, r7
    28d2:	b005      	add	sp, #20
    28d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    28d8:	2700      	movs	r7, #0
    28da:	e7e5      	b.n	28a8 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    28dc:	9a03      	ldr	r2, [sp, #12]
    28de:	4621      	mov	r1, r4
    28e0:	4628      	mov	r0, r5
    28e2:	f7ff fec5 	bl	2670 <timestamp_print>
    28e6:	4407      	add	r7, r0
    28e8:	e7e1      	b.n	28ae <prefix_print+0x36>
    28ea:	bf00      	nop
    28ec:	0000cba0 	.word	0x0000cba0

000028f0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    28f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28f4:	b084      	sub	sp, #16
    28f6:	4606      	mov	r6, r0
    28f8:	460c      	mov	r4, r1
    28fa:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    28fc:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    28fe:	880a      	ldrh	r2, [r1, #0]
    2900:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2904:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    2908:	d037      	beq.n	297a <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    290a:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    290c:	7809      	ldrb	r1, [r1, #0]
    290e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2912:	b37a      	cbz	r2, 2974 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2914:	4829      	ldr	r0, [pc, #164]	; (29bc <log_output_msg2_process+0xcc>)
    2916:	1a12      	subs	r2, r2, r0
    2918:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    291c:	9202      	str	r2, [sp, #8]
    291e:	9101      	str	r1, [sp, #4]
    2920:	f8cd 8000 	str.w	r8, [sp]
    2924:	2200      	movs	r2, #0
    2926:	4639      	mov	r1, r7
    2928:	4630      	mov	r0, r6
    292a:	f7ff ffa5 	bl	2878 <prefix_print>
    292e:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2930:	4625      	mov	r5, r4
    2932:	f855 3b10 	ldr.w	r3, [r5], #16
    2936:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    293a:	b153      	cbz	r3, 2952 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    293c:	f1b8 0f00 	cmp.w	r8, #0
    2940:	d11e      	bne.n	2980 <log_output_msg2_process+0x90>
    2942:	481f      	ldr	r0, [pc, #124]	; (29c0 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2944:	462b      	mov	r3, r5
    2946:	4632      	mov	r2, r6
    2948:	491e      	ldr	r1, [pc, #120]	; (29c4 <log_output_msg2_process+0xd4>)
    294a:	f008 f93b 	bl	abc4 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    294e:	2800      	cmp	r0, #0
    2950:	db18      	blt.n	2984 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    2952:	8862      	ldrh	r2, [r4, #2]
    2954:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    2958:	6821      	ldr	r1, [r4, #0]
    295a:	f3c1 2149 	ubfx	r1, r1, #9, #10
    295e:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2960:	b9fa      	cbnz	r2, 29a2 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2962:	f1b8 0f00 	cmp.w	r8, #0
    2966:	d122      	bne.n	29ae <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2968:	4630      	mov	r0, r6
    296a:	f008 fb86 	bl	b07a <log_output_flush>
}
    296e:	b004      	add	sp, #16
    2970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2978:	e7d0      	b.n	291c <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    297a:	f04f 0900 	mov.w	r9, #0
    297e:	e7d7      	b.n	2930 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2980:	4811      	ldr	r0, [pc, #68]	; (29c8 <log_output_msg2_process+0xd8>)
    2982:	e7df      	b.n	2944 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2984:	f8df a044 	ldr.w	sl, [pc, #68]	; 29cc <log_output_msg2_process+0xdc>
    2988:	f240 23b7 	movw	r3, #695	; 0x2b7
    298c:	4652      	mov	r2, sl
    298e:	4910      	ldr	r1, [pc, #64]	; (29d0 <log_output_msg2_process+0xe0>)
    2990:	4810      	ldr	r0, [pc, #64]	; (29d4 <log_output_msg2_process+0xe4>)
    2992:	f008 fae8 	bl	af66 <assert_print>
    2996:	f240 21b7 	movw	r1, #695	; 0x2b7
    299a:	4650      	mov	r0, sl
    299c:	f008 fadc 	bl	af58 <assert_post_action>
    29a0:	e7d7      	b.n	2952 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    29a2:	9700      	str	r7, [sp, #0]
    29a4:	464b      	mov	r3, r9
    29a6:	4630      	mov	r0, r6
    29a8:	f008 fb4c 	bl	b044 <log_msg2_hexdump>
    29ac:	e7d9      	b.n	2962 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    29ae:	4642      	mov	r2, r8
    29b0:	4639      	mov	r1, r7
    29b2:	4630      	mov	r0, r6
    29b4:	f008 fb3a 	bl	b02c <postfix_print>
    29b8:	e7d6      	b.n	2968 <log_output_msg2_process+0x78>
    29ba:	bf00      	nop
    29bc:	0000c14c 	.word	0x0000c14c
    29c0:	0000afdf 	.word	0x0000afdf
    29c4:	00001ced 	.word	0x00001ced
    29c8:	0000afc1 	.word	0x0000afc1
    29cc:	0000cba4 	.word	0x0000cba4
    29d0:	0000cbe4 	.word	0x0000cbe4
    29d4:	0000c5c0 	.word	0x0000c5c0

000029d8 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <log_output_timestamp_freq_set+0x20>)
    29da:	2201      	movs	r2, #1
    29dc:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    29de:	e004      	b.n	29ea <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    29e0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    29e2:	4a05      	ldr	r2, [pc, #20]	; (29f8 <log_output_timestamp_freq_set+0x20>)
    29e4:	6813      	ldr	r3, [r2, #0]
    29e6:	005b      	lsls	r3, r3, #1
    29e8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    29ea:	4b04      	ldr	r3, [pc, #16]	; (29fc <log_output_timestamp_freq_set+0x24>)
    29ec:	4298      	cmp	r0, r3
    29ee:	d8f7      	bhi.n	29e0 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    29f0:	4b03      	ldr	r3, [pc, #12]	; (2a00 <log_output_timestamp_freq_set+0x28>)
    29f2:	6018      	str	r0, [r3, #0]
}
    29f4:	4770      	bx	lr
    29f6:	bf00      	nop
    29f8:	20000638 	.word	0x20000638
    29fc:	000f4240 	.word	0x000f4240
    2a00:	20000634 	.word	0x20000634

00002a04 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a08:	b087      	sub	sp, #28
    2a0a:	af02      	add	r7, sp, #8
    2a0c:	4682      	mov	sl, r0
    2a0e:	6079      	str	r1, [r7, #4]
    2a10:	4691      	mov	r9, r2
    2a12:	4698      	mov	r8, r3
    2a14:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    2a16:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    2a1a:	f1bb 0f00 	cmp.w	fp, #0
    2a1e:	d016      	beq.n	2a4e <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    2a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2a22:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2a24:	9300      	str	r3, [sp, #0]
    2a26:	465b      	mov	r3, fp
    2a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a2a:	2110      	movs	r1, #16
    2a2c:	2000      	movs	r0, #0
    2a2e:	f7fe f8fb 	bl	c28 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    2a32:	1e05      	subs	r5, r0, #0
    2a34:	da0c      	bge.n	2a50 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    2a36:	4c26      	ldr	r4, [pc, #152]	; (2ad0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    2a38:	2367      	movs	r3, #103	; 0x67
    2a3a:	4622      	mov	r2, r4
    2a3c:	4925      	ldr	r1, [pc, #148]	; (2ad4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    2a3e:	4826      	ldr	r0, [pc, #152]	; (2ad8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2a40:	f008 fa91 	bl	af66 <assert_print>
    2a44:	2167      	movs	r1, #103	; 0x67
    2a46:	4620      	mov	r0, r4
    2a48:	f008 fa86 	bl	af58 <assert_post_action>
		va_end(ap2);
    2a4c:	e000      	b.n	2a50 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    2a4e:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2a50:	4629      	mov	r1, r5
    2a52:	19ab      	adds	r3, r5, r6
    2a54:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2a56:	2400      	movs	r4, #0
    2a58:	f36f 0400 	bfc	r4, #0, #1
    2a5c:	f36f 0441 	bfc	r4, #1, #1
    2a60:	f36f 0482 	bfc	r4, #2, #1
    2a64:	f36a 04c5 	bfi	r4, sl, #3, #3
    2a68:	f369 1488 	bfi	r4, r9, #6, #3
    2a6c:	f365 2452 	bfi	r4, r5, #9, #10
    2a70:	f366 44de 	bfi	r4, r6, #19, #12
    2a74:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2a78:	f023 0307 	bic.w	r3, r3, #7
    2a7c:	ebad 0d03 	sub.w	sp, sp, r3
    2a80:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2a82:	466b      	mov	r3, sp
    2a84:	f113 0018 	adds.w	r0, r3, #24
    2a88:	d00a      	beq.n	2aa0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2a8a:	f1bb 0f00 	cmp.w	fp, #0
    2a8e:	d007      	beq.n	2aa0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2a92:	9300      	str	r3, [sp, #0]
    2a94:	465b      	mov	r3, fp
    2a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2a98:	f7fe f8c6 	bl	c28 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2a9c:	2800      	cmp	r0, #0
    2a9e:	db09      	blt.n	2ab4 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2aa0:	4643      	mov	r3, r8
    2aa2:	4622      	mov	r2, r4
    2aa4:	6879      	ldr	r1, [r7, #4]
    2aa6:	4628      	mov	r0, r5
    2aa8:	f008 faf4 	bl	b094 <z_log_msg2_finalize>
	}
}
    2aac:	3714      	adds	r7, #20
    2aae:	46bd      	mov	sp, r7
    2ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2ab4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 2ad0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2ab8:	2381      	movs	r3, #129	; 0x81
    2aba:	464a      	mov	r2, r9
    2abc:	4905      	ldr	r1, [pc, #20]	; (2ad4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    2abe:	4806      	ldr	r0, [pc, #24]	; (2ad8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2ac0:	f008 fa51 	bl	af66 <assert_print>
    2ac4:	2181      	movs	r1, #129	; 0x81
    2ac6:	4648      	mov	r0, r9
    2ac8:	f008 fa46 	bl	af58 <assert_post_action>
    2acc:	e7e8      	b.n	2aa0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2ace:	bf00      	nop
    2ad0:	0000cc38 	.word	0x0000cc38
    2ad4:	0000cc74 	.word	0x0000cc74
    2ad8:	0000c5c0 	.word	0x0000c5c0

00002adc <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2adc:	b570      	push	{r4, r5, r6, lr}
    2ade:	4606      	mov	r6, r0
    2ae0:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2ae2:	2400      	movs	r4, #0
    2ae4:	e006      	b.n	2af4 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2ae6:	4b05      	ldr	r3, [pc, #20]	; (2afc <char_out+0x20>)
    2ae8:	6818      	ldr	r0, [r3, #0]
    2aea:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2aec:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2aee:	685b      	ldr	r3, [r3, #4]
    2af0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2af2:	3401      	adds	r4, #1
    2af4:	42ac      	cmp	r4, r5
    2af6:	d3f6      	bcc.n	2ae6 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2af8:	4628      	mov	r0, r5
    2afa:	bd70      	pop	{r4, r5, r6, pc}
    2afc:	20000654 	.word	0x20000654

00002b00 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2b00:	4b01      	ldr	r3, [pc, #4]	; (2b08 <format_set+0x8>)
    2b02:	6019      	str	r1, [r3, #0]
	return 0;
}
    2b04:	2000      	movs	r0, #0
    2b06:	4770      	bx	lr
    2b08:	20000644 	.word	0x20000644

00002b0c <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    2b0c:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2b0e:	4809      	ldr	r0, [pc, #36]	; (2b34 <log_backend_uart_init+0x28>)
    2b10:	4b09      	ldr	r3, [pc, #36]	; (2b38 <log_backend_uart_init+0x2c>)
    2b12:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2b14:	f009 f8b7 	bl	bc86 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2b18:	b100      	cbz	r0, 2b1c <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    2b1a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2b1c:	4c07      	ldr	r4, [pc, #28]	; (2b3c <log_backend_uart_init+0x30>)
    2b1e:	2379      	movs	r3, #121	; 0x79
    2b20:	4622      	mov	r2, r4
    2b22:	4907      	ldr	r1, [pc, #28]	; (2b40 <log_backend_uart_init+0x34>)
    2b24:	4807      	ldr	r0, [pc, #28]	; (2b44 <log_backend_uart_init+0x38>)
    2b26:	f008 fa1e 	bl	af66 <assert_print>
    2b2a:	2179      	movs	r1, #121	; 0x79
    2b2c:	4620      	mov	r0, r4
    2b2e:	f008 fa13 	bl	af58 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    2b32:	e7f2      	b.n	2b1a <log_backend_uart_init+0xe>
    2b34:	0000bf9c 	.word	0x0000bf9c
    2b38:	20000654 	.word	0x20000654
    2b3c:	0000cc80 	.word	0x0000cc80
    2b40:	0000ccb8 	.word	0x0000ccb8
    2b44:	0000c5c0 	.word	0x0000c5c0

00002b48 <panic>:

static void panic(struct log_backend const *const backend)
{
    2b48:	b508      	push	{r3, lr}
	in_panic = true;
    2b4a:	4b03      	ldr	r3, [pc, #12]	; (2b58 <panic+0x10>)
    2b4c:	2201      	movs	r2, #1
    2b4e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2b50:	4802      	ldr	r0, [pc, #8]	; (2b5c <panic+0x14>)
    2b52:	f008 fa92 	bl	b07a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2b56:	bd08      	pop	{r3, pc}
    2b58:	20001382 	.word	0x20001382
    2b5c:	0000cd14 	.word	0x0000cd14

00002b60 <process>:
{
    2b60:	b510      	push	{r4, lr}
    2b62:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2b64:	4b04      	ldr	r3, [pc, #16]	; (2b78 <process+0x18>)
    2b66:	6818      	ldr	r0, [r3, #0]
    2b68:	f7ff fc1c 	bl	23a4 <log_format_func_t_get>
    2b6c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    2b6e:	220f      	movs	r2, #15
    2b70:	4621      	mov	r1, r4
    2b72:	4802      	ldr	r0, [pc, #8]	; (2b7c <process+0x1c>)
    2b74:	4798      	blx	r3
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	20000644 	.word	0x20000644
    2b7c:	0000cd14 	.word	0x0000cd14

00002b80 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2b80:	4b03      	ldr	r3, [pc, #12]	; (2b90 <log_backend_rtt_init+0x10>)
    2b82:	2201      	movs	r2, #1
    2b84:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2b86:	4b03      	ldr	r3, [pc, #12]	; (2b94 <log_backend_rtt_init+0x14>)
    2b88:	4a03      	ldr	r2, [pc, #12]	; (2b98 <log_backend_rtt_init+0x18>)
    2b8a:	601a      	str	r2, [r3, #0]
}
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	20001383 	.word	0x20001383
    2b94:	20000680 	.word	0x20000680
    2b98:	20000668 	.word	0x20000668

00002b9c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2b9c:	4b01      	ldr	r3, [pc, #4]	; (2ba4 <format_set+0x8>)
    2b9e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2ba0:	2000      	movs	r0, #0
    2ba2:	4770      	bx	lr
    2ba4:	20000684 	.word	0x20000684

00002ba8 <on_failed_write>:
{
    2ba8:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2baa:	b918      	cbnz	r0, 2bb4 <on_failed_write+0xc>
		host_present = false;
    2bac:	4b04      	ldr	r3, [pc, #16]	; (2bc0 <on_failed_write+0x18>)
    2bae:	2200      	movs	r2, #0
    2bb0:	701a      	strb	r2, [r3, #0]
}
    2bb2:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2bb4:	f241 3088 	movw	r0, #5000	; 0x1388
    2bb8:	f009 f955 	bl	be66 <z_impl_k_busy_wait>
    2bbc:	e7f9      	b.n	2bb2 <on_failed_write+0xa>
    2bbe:	bf00      	nop
    2bc0:	20001383 	.word	0x20001383

00002bc4 <on_write>:
{
    2bc4:	b538      	push	{r3, r4, r5, lr}
    2bc6:	4604      	mov	r4, r0
	host_present = true;
    2bc8:	4b0a      	ldr	r3, [pc, #40]	; (2bf4 <on_write+0x30>)
    2bca:	2201      	movs	r2, #1
    2bcc:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2bce:	4b0a      	ldr	r3, [pc, #40]	; (2bf8 <on_write+0x34>)
    2bd0:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    2bd2:	b92b      	cbnz	r3, 2be0 <on_write+0x1c>
}
    2bd4:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    2bd6:	1e65      	subs	r5, r4, #1
    2bd8:	4620      	mov	r0, r4
    2bda:	f7ff ffe5 	bl	2ba8 <on_failed_write>
    2bde:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2be0:	2000      	movs	r0, #0
    2be2:	f004 fdfb 	bl	77dc <SEGGER_RTT_HasDataUp>
    2be6:	2800      	cmp	r0, #0
    2be8:	d0f4      	beq.n	2bd4 <on_write+0x10>
    2bea:	4b02      	ldr	r3, [pc, #8]	; (2bf4 <on_write+0x30>)
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d1f1      	bne.n	2bd6 <on_write+0x12>
    2bf2:	e7ef      	b.n	2bd4 <on_write+0x10>
    2bf4:	20001383 	.word	0x20001383
    2bf8:	20001384 	.word	0x20001384

00002bfc <data_out_block_mode>:
{
    2bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bfe:	4606      	mov	r6, r0
    2c00:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2c02:	2704      	movs	r7, #4
    2c04:	e006      	b.n	2c14 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    2c06:	4638      	mov	r0, r7
    2c08:	f7ff ffdc 	bl	2bc4 <on_write>
	} while ((ret == 0) && host_present);
    2c0c:	b99c      	cbnz	r4, 2c36 <data_out_block_mode+0x3a>
    2c0e:	4b0d      	ldr	r3, [pc, #52]	; (2c44 <data_out_block_mode+0x48>)
    2c10:	781b      	ldrb	r3, [r3, #0]
    2c12:	b183      	cbz	r3, 2c36 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2c14:	462a      	mov	r2, r5
    2c16:	4631      	mov	r1, r6
    2c18:	2000      	movs	r0, #0
    2c1a:	f004 fd7b 	bl	7714 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2c1e:	4604      	mov	r4, r0
    2c20:	2800      	cmp	r0, #0
    2c22:	d1f0      	bne.n	2c06 <data_out_block_mode+0xa>
		} else if (host_present) {
    2c24:	4b07      	ldr	r3, [pc, #28]	; (2c44 <data_out_block_mode+0x48>)
    2c26:	781b      	ldrb	r3, [r3, #0]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d0ef      	beq.n	2c0c <data_out_block_mode+0x10>
			retry_cnt--;
    2c2c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    2c2e:	4638      	mov	r0, r7
    2c30:	f7ff ffba 	bl	2ba8 <on_failed_write>
    2c34:	e7ea      	b.n	2c0c <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    2c36:	b914      	cbnz	r4, 2c3e <data_out_block_mode+0x42>
    2c38:	4b02      	ldr	r3, [pc, #8]	; (2c44 <data_out_block_mode+0x48>)
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	b903      	cbnz	r3, 2c40 <data_out_block_mode+0x44>
    2c3e:	462c      	mov	r4, r5
}
    2c40:	4620      	mov	r0, r4
    2c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c44:	20001383 	.word	0x20001383

00002c48 <panic>:
{
    2c48:	b508      	push	{r3, lr}
	panic_mode = true;
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <panic+0x10>)
    2c4c:	2201      	movs	r2, #1
    2c4e:	701a      	strb	r2, [r3, #0]
    2c50:	4802      	ldr	r0, [pc, #8]	; (2c5c <panic+0x14>)
    2c52:	f008 fa12 	bl	b07a <log_output_flush>
}
    2c56:	bd08      	pop	{r3, pc}
    2c58:	20001384 	.word	0x20001384
    2c5c:	0000cd54 	.word	0x0000cd54

00002c60 <process>:
{
    2c60:	b510      	push	{r4, lr}
    2c62:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2c64:	4b04      	ldr	r3, [pc, #16]	; (2c78 <process+0x18>)
    2c66:	6818      	ldr	r0, [r3, #0]
    2c68:	f7ff fb9c 	bl	23a4 <log_format_func_t_get>
    2c6c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    2c6e:	220f      	movs	r2, #15
    2c70:	4621      	mov	r1, r4
    2c72:	4802      	ldr	r0, [pc, #8]	; (2c7c <process+0x1c>)
    2c74:	4798      	blx	r3
}
    2c76:	bd10      	pop	{r4, pc}
    2c78:	20000684 	.word	0x20000684
    2c7c:	0000cd54 	.word	0x0000cd54

00002c80 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    2c80:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    2c82:	4b40      	ldr	r3, [pc, #256]	; (2d84 <pm_system_resume+0x104>)
    2c84:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c86:	f005 031f 	and.w	r3, r5, #31
    2c8a:	2201      	movs	r2, #1
    2c8c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c8e:	0969      	lsrs	r1, r5, #5
    2c90:	4b3d      	ldr	r3, [pc, #244]	; (2d88 <pm_system_resume+0x108>)
    2c92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2c96:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c98:	f3bf 8f5b 	dmb	ish
    2c9c:	e853 1f00 	ldrex	r1, [r3]
    2ca0:	ea01 0400 	and.w	r4, r1, r0
    2ca4:	e843 4600 	strex	r6, r4, [r3]
    2ca8:	2e00      	cmp	r6, #0
    2caa:	d1f7      	bne.n	2c9c <pm_system_resume+0x1c>
    2cac:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2cb0:	420a      	tst	r2, r1
    2cb2:	d100      	bne.n	2cb6 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2cb4:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2cb6:	4a35      	ldr	r2, [pc, #212]	; (2d8c <pm_system_resume+0x10c>)
    2cb8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2cbc:	0098      	lsls	r0, r3, #2
    2cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    2cc2:	4933      	ldr	r1, [pc, #204]	; (2d90 <pm_system_resume+0x110>)
    2cc4:	b1a9      	cbz	r1, 2cf2 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2cc6:	7859      	ldrb	r1, [r3, #1]
    2cc8:	5c10      	ldrb	r0, [r2, r0]
    2cca:	f008 fb54 	bl	b376 <pm_state_exit_post_ops>
    2cce:	f04f 0320 	mov.w	r3, #32
    2cd2:	f3ef 8611 	mrs	r6, BASEPRI
    2cd6:	f383 8812 	msr	BASEPRI_MAX, r3
    2cda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2cde:	482d      	ldr	r0, [pc, #180]	; (2d94 <pm_system_resume+0x114>)
    2ce0:	f005 f8a2 	bl	7e28 <z_spin_lock_valid>
    2ce4:	b158      	cbz	r0, 2cfe <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    2ce6:	482b      	ldr	r0, [pc, #172]	; (2d94 <pm_system_resume+0x114>)
    2ce8:	f005 f8be 	bl	7e68 <z_spin_lock_set_owner>
	return list->head;
    2cec:	4b2a      	ldr	r3, [pc, #168]	; (2d98 <pm_system_resume+0x118>)
    2cee:	681c      	ldr	r4, [r3, #0]
    2cf0:	e020      	b.n	2d34 <pm_system_resume+0xb4>
	__asm__ volatile(
    2cf2:	2300      	movs	r3, #0
    2cf4:	f383 8811 	msr	BASEPRI, r3
    2cf8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2cfc:	e7e7      	b.n	2cce <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2cfe:	4c27      	ldr	r4, [pc, #156]	; (2d9c <pm_system_resume+0x11c>)
    2d00:	238e      	movs	r3, #142	; 0x8e
    2d02:	4622      	mov	r2, r4
    2d04:	4926      	ldr	r1, [pc, #152]	; (2da0 <pm_system_resume+0x120>)
    2d06:	4827      	ldr	r0, [pc, #156]	; (2da4 <pm_system_resume+0x124>)
    2d08:	f008 f92d 	bl	af66 <assert_print>
    2d0c:	4921      	ldr	r1, [pc, #132]	; (2d94 <pm_system_resume+0x114>)
    2d0e:	4826      	ldr	r0, [pc, #152]	; (2da8 <pm_system_resume+0x128>)
    2d10:	f008 f929 	bl	af66 <assert_print>
    2d14:	218e      	movs	r1, #142	; 0x8e
    2d16:	4620      	mov	r0, r4
    2d18:	f008 f91e 	bl	af58 <assert_post_action>
    2d1c:	e7e3      	b.n	2ce6 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2d1e:	4b19      	ldr	r3, [pc, #100]	; (2d84 <pm_system_resume+0x104>)
    2d20:	7d1b      	ldrb	r3, [r3, #20]
    2d22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d26:	4919      	ldr	r1, [pc, #100]	; (2d8c <pm_system_resume+0x10c>)
    2d28:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2d2c:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    2d2e:	b10c      	cbz	r4, 2d34 <pm_system_resume+0xb4>
	return node->next;
    2d30:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2d32:	b124      	cbz	r4, 2d3e <pm_system_resume+0xbe>
    2d34:	b11c      	cbz	r4, 2d3e <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    2d36:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    2d38:	2a00      	cmp	r2, #0
    2d3a:	d1f0      	bne.n	2d1e <pm_system_resume+0x9e>
    2d3c:	e7f7      	b.n	2d2e <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2d3e:	4815      	ldr	r0, [pc, #84]	; (2d94 <pm_system_resume+0x114>)
    2d40:	f005 f882 	bl	7e48 <z_spin_unlock_valid>
    2d44:	b170      	cbz	r0, 2d64 <pm_system_resume+0xe4>
	__asm__ volatile(
    2d46:	f386 8811 	msr	BASEPRI, r6
    2d4a:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2d4e:	4a0f      	ldr	r2, [pc, #60]	; (2d8c <pm_system_resume+0x10c>)
    2d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2d54:	00a9      	lsls	r1, r5, #2
    2d56:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2d5a:	2300      	movs	r3, #0
    2d5c:	5053      	str	r3, [r2, r1]
    2d5e:	606b      	str	r3, [r5, #4]
    2d60:	60ab      	str	r3, [r5, #8]
}
    2d62:	e7a7      	b.n	2cb4 <pm_system_resume+0x34>
    2d64:	4c0d      	ldr	r4, [pc, #52]	; (2d9c <pm_system_resume+0x11c>)
    2d66:	23b9      	movs	r3, #185	; 0xb9
    2d68:	4622      	mov	r2, r4
    2d6a:	4910      	ldr	r1, [pc, #64]	; (2dac <pm_system_resume+0x12c>)
    2d6c:	480d      	ldr	r0, [pc, #52]	; (2da4 <pm_system_resume+0x124>)
    2d6e:	f008 f8fa 	bl	af66 <assert_print>
    2d72:	4908      	ldr	r1, [pc, #32]	; (2d94 <pm_system_resume+0x114>)
    2d74:	480e      	ldr	r0, [pc, #56]	; (2db0 <pm_system_resume+0x130>)
    2d76:	f008 f8f6 	bl	af66 <assert_print>
    2d7a:	21b9      	movs	r1, #185	; 0xb9
    2d7c:	4620      	mov	r0, r4
    2d7e:	f008 f8eb 	bl	af58 <assert_post_action>
    2d82:	e7e0      	b.n	2d46 <pm_system_resume+0xc6>
    2d84:	20001154 	.word	0x20001154
    2d88:	200006b0 	.word	0x200006b0
    2d8c:	200006a0 	.word	0x200006a0
    2d90:	0000b377 	.word	0x0000b377
    2d94:	20000694 	.word	0x20000694
    2d98:	20000698 	.word	0x20000698
    2d9c:	0000c76c 	.word	0x0000c76c
    2da0:	0000c7cc 	.word	0x0000c7cc
    2da4:	0000c5c0 	.word	0x0000c5c0
    2da8:	0000c7e4 	.word	0x0000c7e4
    2dac:	0000c79c 	.word	0x0000c79c
    2db0:	0000c7b4 	.word	0x0000c7b4

00002db4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2db4:	b570      	push	{r4, r5, r6, lr}
    2db6:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2db8:	4b6d      	ldr	r3, [pc, #436]	; (2f70 <pm_system_suspend+0x1bc>)
    2dba:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2dbc:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2dbe:	f3bf 8f5b 	dmb	ish
    2dc2:	4b6c      	ldr	r3, [pc, #432]	; (2f74 <pm_system_suspend+0x1c0>)
    2dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2dc8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2dcc:	f005 021f 	and.w	r2, r5, #31
    2dd0:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2dd2:	f013 0f01 	tst.w	r3, #1
    2dd6:	d01d      	beq.n	2e14 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2dd8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2ddc:	4a66      	ldr	r2, [pc, #408]	; (2f78 <pm_system_suspend+0x1c4>)
    2dde:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2de2:	b333      	cbz	r3, 2e32 <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2de4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2de8:	d139      	bne.n	2e5e <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2dea:	f005 fe87 	bl	8afc <k_sched_lock>
	__asm__ volatile(
    2dee:	f04f 0320 	mov.w	r3, #32
    2df2:	f3ef 8611 	mrs	r6, BASEPRI
    2df6:	f383 8812 	msr	BASEPRI_MAX, r3
    2dfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2dfe:	485f      	ldr	r0, [pc, #380]	; (2f7c <pm_system_suspend+0x1c8>)
    2e00:	f005 f812 	bl	7e28 <z_spin_lock_valid>
    2e04:	2800      	cmp	r0, #0
    2e06:	d040      	beq.n	2e8a <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    2e08:	485c      	ldr	r0, [pc, #368]	; (2f7c <pm_system_suspend+0x1c8>)
    2e0a:	f005 f82d 	bl	7e68 <z_spin_lock_set_owner>
	return list->head;
    2e0e:	4b5c      	ldr	r3, [pc, #368]	; (2f80 <pm_system_suspend+0x1cc>)
    2e10:	681c      	ldr	r4, [r3, #0]
    2e12:	e055      	b.n	2ec0 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    2e14:	4601      	mov	r1, r0
    2e16:	4628      	mov	r0, r5
    2e18:	f000 f8d6 	bl	2fc8 <pm_policy_next_state>
		if (info != NULL) {
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d0db      	beq.n	2dd8 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    2e20:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2e24:	4a54      	ldr	r2, [pc, #336]	; (2f78 <pm_system_suspend+0x1c4>)
    2e26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e2a:	c807      	ldmia	r0, {r0, r1, r2}
    2e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2e30:	e7d2      	b.n	2dd8 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2e32:	f005 021f 	and.w	r2, r5, #31
    2e36:	2301      	movs	r3, #1
    2e38:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e3a:	096d      	lsrs	r5, r5, #5
    2e3c:	4a4d      	ldr	r2, [pc, #308]	; (2f74 <pm_system_suspend+0x1c0>)
    2e3e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2e42:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2e44:	f3bf 8f5b 	dmb	ish
    2e48:	e855 2f00 	ldrex	r2, [r5]
    2e4c:	401a      	ands	r2, r3
    2e4e:	e845 2100 	strex	r1, r2, [r5]
    2e52:	2900      	cmp	r1, #0
    2e54:	d1f8      	bne.n	2e48 <pm_system_suspend+0x94>
    2e56:	f3bf 8f5b 	dmb	ish
		ret = false;
    2e5a:	2000      	movs	r0, #0
		goto end;
    2e5c:	e077      	b.n	2f4e <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    2e5e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2e62:	4a45      	ldr	r2, [pc, #276]	; (2f78 <pm_system_suspend+0x1c4>)
    2e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e68:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2e6a:	0c41      	lsrs	r1, r0, #17
    2e6c:	03c0      	lsls	r0, r0, #15
    2e6e:	4b45      	ldr	r3, [pc, #276]	; (2f84 <pm_system_suspend+0x1d0>)
    2e70:	18c0      	adds	r0, r0, r3
    2e72:	4a45      	ldr	r2, [pc, #276]	; (2f88 <pm_system_suspend+0x1d4>)
    2e74:	f04f 0300 	mov.w	r3, #0
    2e78:	f141 0100 	adc.w	r1, r1, #0
    2e7c:	f7fd fb22 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2e80:	2101      	movs	r1, #1
    2e82:	1a20      	subs	r0, r4, r0
    2e84:	f007 f9ca 	bl	a21c <z_set_timeout_expiry>
    2e88:	e7af      	b.n	2dea <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2e8a:	4c40      	ldr	r4, [pc, #256]	; (2f8c <pm_system_suspend+0x1d8>)
    2e8c:	238e      	movs	r3, #142	; 0x8e
    2e8e:	4622      	mov	r2, r4
    2e90:	493f      	ldr	r1, [pc, #252]	; (2f90 <pm_system_suspend+0x1dc>)
    2e92:	4840      	ldr	r0, [pc, #256]	; (2f94 <pm_system_suspend+0x1e0>)
    2e94:	f008 f867 	bl	af66 <assert_print>
    2e98:	4938      	ldr	r1, [pc, #224]	; (2f7c <pm_system_suspend+0x1c8>)
    2e9a:	483f      	ldr	r0, [pc, #252]	; (2f98 <pm_system_suspend+0x1e4>)
    2e9c:	f008 f863 	bl	af66 <assert_print>
    2ea0:	218e      	movs	r1, #142	; 0x8e
    2ea2:	4620      	mov	r0, r4
    2ea4:	f008 f858 	bl	af58 <assert_post_action>
    2ea8:	e7ae      	b.n	2e08 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2eaa:	4b31      	ldr	r3, [pc, #196]	; (2f70 <pm_system_suspend+0x1bc>)
    2eac:	7d1b      	ldrb	r3, [r3, #20]
    2eae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2eb2:	4931      	ldr	r1, [pc, #196]	; (2f78 <pm_system_suspend+0x1c4>)
    2eb4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2eb8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    2eba:	b10c      	cbz	r4, 2ec0 <pm_system_suspend+0x10c>
	return node->next;
    2ebc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2ebe:	b124      	cbz	r4, 2eca <pm_system_suspend+0x116>
    2ec0:	b11c      	cbz	r4, 2eca <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    2ec2:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    2ec4:	2a00      	cmp	r2, #0
    2ec6:	d1f0      	bne.n	2eaa <pm_system_suspend+0xf6>
    2ec8:	e7f7      	b.n	2eba <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2eca:	482c      	ldr	r0, [pc, #176]	; (2f7c <pm_system_suspend+0x1c8>)
    2ecc:	f004 ffbc 	bl	7e48 <z_spin_unlock_valid>
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d03d      	beq.n	2f50 <pm_system_suspend+0x19c>
	__asm__ volatile(
    2ed4:	f386 8811 	msr	BASEPRI, r6
    2ed8:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2edc:	f005 031f 	and.w	r3, r5, #31
    2ee0:	2101      	movs	r1, #1
    2ee2:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2ee4:	096b      	lsrs	r3, r5, #5
    2ee6:	4a2d      	ldr	r2, [pc, #180]	; (2f9c <pm_system_suspend+0x1e8>)
    2ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2eec:	f3bf 8f5b 	dmb	ish
    2ef0:	e853 2f00 	ldrex	r2, [r3]
    2ef4:	430a      	orrs	r2, r1
    2ef6:	e843 2000 	strex	r0, r2, [r3]
    2efa:	2800      	cmp	r0, #0
    2efc:	d1f8      	bne.n	2ef0 <pm_system_suspend+0x13c>
    2efe:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2f02:	4b27      	ldr	r3, [pc, #156]	; (2fa0 <pm_system_suspend+0x1ec>)
    2f04:	b14b      	cbz	r3, 2f1a <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    2f06:	4b1c      	ldr	r3, [pc, #112]	; (2f78 <pm_system_suspend+0x1c4>)
    2f08:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    2f0c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2f10:	7849      	ldrb	r1, [r1, #1]
    2f12:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2f16:	f008 fa22 	bl	b35e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2f1a:	f7ff feb1 	bl	2c80 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    2f1e:	f005 031f 	and.w	r3, r5, #31
    2f22:	2401      	movs	r4, #1
    2f24:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2f28:	096d      	lsrs	r5, r5, #5
    2f2a:	4a12      	ldr	r2, [pc, #72]	; (2f74 <pm_system_suspend+0x1c0>)
    2f2c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2f30:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f32:	f3bf 8f5b 	dmb	ish
    2f36:	e855 2f00 	ldrex	r2, [r5]
    2f3a:	401a      	ands	r2, r3
    2f3c:	e845 2100 	strex	r1, r2, [r5]
    2f40:	2900      	cmp	r1, #0
    2f42:	d1f8      	bne.n	2f36 <pm_system_suspend+0x182>
    2f44:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    2f48:	f006 fb64 	bl	9614 <k_sched_unlock>
	bool ret = true;
    2f4c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2f4e:	bd70      	pop	{r4, r5, r6, pc}
    2f50:	4c0e      	ldr	r4, [pc, #56]	; (2f8c <pm_system_suspend+0x1d8>)
    2f52:	23b9      	movs	r3, #185	; 0xb9
    2f54:	4622      	mov	r2, r4
    2f56:	4913      	ldr	r1, [pc, #76]	; (2fa4 <pm_system_suspend+0x1f0>)
    2f58:	480e      	ldr	r0, [pc, #56]	; (2f94 <pm_system_suspend+0x1e0>)
    2f5a:	f008 f804 	bl	af66 <assert_print>
    2f5e:	4907      	ldr	r1, [pc, #28]	; (2f7c <pm_system_suspend+0x1c8>)
    2f60:	4811      	ldr	r0, [pc, #68]	; (2fa8 <pm_system_suspend+0x1f4>)
    2f62:	f008 f800 	bl	af66 <assert_print>
    2f66:	21b9      	movs	r1, #185	; 0xb9
    2f68:	4620      	mov	r0, r4
    2f6a:	f007 fff5 	bl	af58 <assert_post_action>
    2f6e:	e7b1      	b.n	2ed4 <pm_system_suspend+0x120>
    2f70:	20001154 	.word	0x20001154
    2f74:	200006ac 	.word	0x200006ac
    2f78:	200006a0 	.word	0x200006a0
    2f7c:	20000694 	.word	0x20000694
    2f80:	20000698 	.word	0x20000698
    2f84:	000f423f 	.word	0x000f423f
    2f88:	000f4240 	.word	0x000f4240
    2f8c:	0000c76c 	.word	0x0000c76c
    2f90:	0000c7cc 	.word	0x0000c7cc
    2f94:	0000c5c0 	.word	0x0000c5c0
    2f98:	0000c7e4 	.word	0x0000c7e4
    2f9c:	200006b0 	.word	0x200006b0
    2fa0:	0000b35f 	.word	0x0000b35f
    2fa4:	0000c79c 	.word	0x0000c79c
    2fa8:	0000c7b4 	.word	0x0000c7b4

00002fac <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2fac:	f3bf 8f5b 	dmb	ish
    2fb0:	4b04      	ldr	r3, [pc, #16]	; (2fc4 <pm_policy_state_lock_is_active+0x18>)
    2fb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2fb6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2fba:	3800      	subs	r0, #0
    2fbc:	bf18      	it	ne
    2fbe:	2001      	movne	r0, #1
    2fc0:	4770      	bx	lr
    2fc2:	bf00      	nop
    2fc4:	200006b4 	.word	0x200006b4

00002fc8 <pm_policy_next_state>:
{
    2fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fcc:	b082      	sub	sp, #8
    2fce:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2fd0:	a901      	add	r1, sp, #4
    2fd2:	f000 f843 	bl	305c <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2fd6:	1e44      	subs	r4, r0, #1
    2fd8:	b224      	sxth	r4, r4
    2fda:	e007      	b.n	2fec <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2fdc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2fe0:	d032      	beq.n	3048 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2fe2:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2fe4:	42b0      	cmp	r0, r6
    2fe6:	d92f      	bls.n	3048 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2fe8:	3c01      	subs	r4, #1
    2fea:	b224      	sxth	r4, r4
    2fec:	2c00      	cmp	r4, #0
    2fee:	db2a      	blt.n	3046 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2ff0:	9b01      	ldr	r3, [sp, #4]
    2ff2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2ff6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2ffa:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2ffe:	f7ff ffd5 	bl	2fac <pm_policy_state_lock_is_active>
    3002:	2800      	cmp	r0, #0
    3004:	d1f0      	bne.n	2fe8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    3006:	6868      	ldr	r0, [r5, #4]
    3008:	0c41      	lsrs	r1, r0, #17
    300a:	03c0      	lsls	r0, r0, #15
    300c:	4f10      	ldr	r7, [pc, #64]	; (3050 <pm_policy_next_state+0x88>)
    300e:	19c0      	adds	r0, r0, r7
    3010:	4a10      	ldr	r2, [pc, #64]	; (3054 <pm_policy_next_state+0x8c>)
    3012:	f04f 0300 	mov.w	r3, #0
    3016:	f141 0100 	adc.w	r1, r1, #0
    301a:	f7fd fa53 	bl	4c4 <__aeabi_uldivmod>
    301e:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    3020:	68ab      	ldr	r3, [r5, #8]
    3022:	0c59      	lsrs	r1, r3, #17
    3024:	03db      	lsls	r3, r3, #15
    3026:	19d8      	adds	r0, r3, r7
    3028:	4a0a      	ldr	r2, [pc, #40]	; (3054 <pm_policy_next_state+0x8c>)
    302a:	f04f 0300 	mov.w	r3, #0
    302e:	f141 0100 	adc.w	r1, r1, #0
    3032:	f7fd fa47 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3036:	4b08      	ldr	r3, [pc, #32]	; (3058 <pm_policy_next_state+0x90>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    303e:	d0cd      	beq.n	2fdc <pm_policy_next_state+0x14>
    3040:	4283      	cmp	r3, r0
    3042:	d8cb      	bhi.n	2fdc <pm_policy_next_state+0x14>
    3044:	e7d0      	b.n	2fe8 <pm_policy_next_state+0x20>
	return NULL;
    3046:	2500      	movs	r5, #0
}
    3048:	4628      	mov	r0, r5
    304a:	b002      	add	sp, #8
    304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3050:	000f423f 	.word	0x000f423f
    3054:	000f4240 	.word	0x000f4240
    3058:	200000a0 	.word	0x200000a0

0000305c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    305c:	b908      	cbnz	r0, 3062 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    305e:	4b02      	ldr	r3, [pc, #8]	; (3068 <pm_state_cpu_get_all+0xc>)
    3060:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3062:	2000      	movs	r0, #0
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	0000cd68 	.word	0x0000cd68

0000306c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    306c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    306e:	4802      	ldr	r0, [pc, #8]	; (3078 <nrf_cc3xx_platform_abort_init+0xc>)
    3070:	f007 fc04 	bl	a87c <nrf_cc3xx_platform_set_abort>
}
    3074:	bd08      	pop	{r3, pc}
    3076:	bf00      	nop
    3078:	0000cd68 	.word	0x0000cd68

0000307c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    307c:	b1d0      	cbz	r0, 30b4 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    307e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3080:	6842      	ldr	r2, [r0, #4]
    3082:	2a04      	cmp	r2, #4
    3084:	d005      	beq.n	3092 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3086:	b1d2      	cbz	r2, 30be <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3088:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    308a:	f005 fa2d 	bl	84e8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    308e:	2000      	movs	r0, #0
    }
}
    3090:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3092:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3094:	2200      	movs	r2, #0
    3096:	f3bf 8f5b 	dmb	ish
    309a:	e853 1f00 	ldrex	r1, [r3]
    309e:	2901      	cmp	r1, #1
    30a0:	d103      	bne.n	30aa <mutex_unlock_platform+0x2e>
    30a2:	e843 2000 	strex	r0, r2, [r3]
    30a6:	2800      	cmp	r0, #0
    30a8:	d1f7      	bne.n	309a <mutex_unlock_platform+0x1e>
    30aa:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30ae:	d104      	bne.n	30ba <mutex_unlock_platform+0x3e>
    30b0:	4610      	mov	r0, r2
    30b2:	e7ed      	b.n	3090 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    30b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    30b8:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30ba:	4802      	ldr	r0, [pc, #8]	; (30c4 <mutex_unlock_platform+0x48>)
    30bc:	e7e8      	b.n	3090 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    30be:	4802      	ldr	r0, [pc, #8]	; (30c8 <mutex_unlock_platform+0x4c>)
    30c0:	e7e6      	b.n	3090 <mutex_unlock_platform+0x14>
    30c2:	bf00      	nop
    30c4:	ffff8fe9 	.word	0xffff8fe9
    30c8:	ffff8fea 	.word	0xffff8fea

000030cc <mutex_lock_platform>:
    if(mutex == NULL) {
    30cc:	b320      	cbz	r0, 3118 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    30ce:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    30d0:	6842      	ldr	r2, [r0, #4]
    30d2:	2a04      	cmp	r2, #4
    30d4:	d002      	beq.n	30dc <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    30d6:	b992      	cbnz	r2, 30fe <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    30d8:	4811      	ldr	r0, [pc, #68]	; (3120 <mutex_lock_platform+0x54>)
    30da:	e00f      	b.n	30fc <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    30dc:	6803      	ldr	r3, [r0, #0]
    30de:	2201      	movs	r2, #1
    30e0:	f3bf 8f5b 	dmb	ish
    30e4:	e853 1f00 	ldrex	r1, [r3]
    30e8:	2900      	cmp	r1, #0
    30ea:	d103      	bne.n	30f4 <mutex_lock_platform+0x28>
    30ec:	e843 2000 	strex	r0, r2, [r3]
    30f0:	2800      	cmp	r0, #0
    30f2:	d1f7      	bne.n	30e4 <mutex_lock_platform+0x18>
    30f4:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    30f8:	d10c      	bne.n	3114 <mutex_lock_platform+0x48>
    30fa:	2000      	movs	r0, #0
}
    30fc:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    30fe:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3108:	f005 f8ce 	bl	82a8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    310c:	2800      	cmp	r0, #0
    310e:	d0f5      	beq.n	30fc <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3110:	4804      	ldr	r0, [pc, #16]	; (3124 <mutex_lock_platform+0x58>)
    3112:	e7f3      	b.n	30fc <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3114:	4803      	ldr	r0, [pc, #12]	; (3124 <mutex_lock_platform+0x58>)
    3116:	e7f1      	b.n	30fc <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3118:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    311c:	4770      	bx	lr
    311e:	bf00      	nop
    3120:	ffff8fea 	.word	0xffff8fea
    3124:	ffff8fe9 	.word	0xffff8fe9

00003128 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3128:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    312a:	4604      	mov	r4, r0
    312c:	b188      	cbz	r0, 3152 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    312e:	6863      	ldr	r3, [r4, #4]
    3130:	2b04      	cmp	r3, #4
    3132:	d00d      	beq.n	3150 <mutex_free_platform+0x28>
    3134:	2b08      	cmp	r3, #8
    3136:	d00b      	beq.n	3150 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3138:	b153      	cbz	r3, 3150 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    313a:	f013 0f02 	tst.w	r3, #2
    313e:	d00d      	beq.n	315c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3140:	4621      	mov	r1, r4
    3142:	4809      	ldr	r0, [pc, #36]	; (3168 <mutex_free_platform+0x40>)
    3144:	f004 fdfa 	bl	7d3c <k_mem_slab_free>
        mutex->mutex = NULL;
    3148:	2300      	movs	r3, #0
    314a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    314c:	2300      	movs	r3, #0
    314e:	6063      	str	r3, [r4, #4]
}
    3150:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3152:	4b06      	ldr	r3, [pc, #24]	; (316c <mutex_free_platform+0x44>)
    3154:	685b      	ldr	r3, [r3, #4]
    3156:	4806      	ldr	r0, [pc, #24]	; (3170 <mutex_free_platform+0x48>)
    3158:	4798      	blx	r3
    315a:	e7e8      	b.n	312e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    315c:	2214      	movs	r2, #20
    315e:	2100      	movs	r1, #0
    3160:	6820      	ldr	r0, [r4, #0]
    3162:	f008 f8c7 	bl	b2f4 <memset>
    3166:	e7f1      	b.n	314c <mutex_free_platform+0x24>
    3168:	200006d0 	.word	0x200006d0
    316c:	2000017c 	.word	0x2000017c
    3170:	0000cd70 	.word	0x0000cd70

00003174 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3174:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3176:	4604      	mov	r4, r0
    3178:	b178      	cbz	r0, 319a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    317a:	6863      	ldr	r3, [r4, #4]
    317c:	2b04      	cmp	r3, #4
    317e:	d00b      	beq.n	3198 <mutex_init_platform+0x24>
    3180:	2b08      	cmp	r3, #8
    3182:	d009      	beq.n	3198 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3184:	b90b      	cbnz	r3, 318a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3186:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3188:	b163      	cbz	r3, 31a4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    318a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    318c:	f008 fe0a 	bl	bda4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3190:	6863      	ldr	r3, [r4, #4]
    3192:	f043 0301 	orr.w	r3, r3, #1
    3196:	6063      	str	r3, [r4, #4]
}
    3198:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    319a:	4b0f      	ldr	r3, [pc, #60]	; (31d8 <mutex_init_platform+0x64>)
    319c:	685b      	ldr	r3, [r3, #4]
    319e:	480f      	ldr	r0, [pc, #60]	; (31dc <mutex_init_platform+0x68>)
    31a0:	4798      	blx	r3
    31a2:	e7ea      	b.n	317a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    31a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    31a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31ac:	4621      	mov	r1, r4
    31ae:	480c      	ldr	r0, [pc, #48]	; (31e0 <mutex_init_platform+0x6c>)
    31b0:	f004 fd4e 	bl	7c50 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    31b4:	b908      	cbnz	r0, 31ba <mutex_init_platform+0x46>
    31b6:	6823      	ldr	r3, [r4, #0]
    31b8:	b91b      	cbnz	r3, 31c2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <mutex_init_platform+0x64>)
    31bc:	685b      	ldr	r3, [r3, #4]
    31be:	4809      	ldr	r0, [pc, #36]	; (31e4 <mutex_init_platform+0x70>)
    31c0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    31c2:	2214      	movs	r2, #20
    31c4:	2100      	movs	r1, #0
    31c6:	6820      	ldr	r0, [r4, #0]
    31c8:	f008 f894 	bl	b2f4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    31cc:	6863      	ldr	r3, [r4, #4]
    31ce:	f043 0302 	orr.w	r3, r3, #2
    31d2:	6063      	str	r3, [r4, #4]
    31d4:	e7d9      	b.n	318a <mutex_init_platform+0x16>
    31d6:	bf00      	nop
    31d8:	2000017c 	.word	0x2000017c
    31dc:	0000cd70 	.word	0x0000cd70
    31e0:	200006d0 	.word	0x200006d0
    31e4:	0000cd98 	.word	0x0000cd98

000031e8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    31e8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    31ea:	2340      	movs	r3, #64	; 0x40
    31ec:	2214      	movs	r2, #20
    31ee:	4904      	ldr	r1, [pc, #16]	; (3200 <nrf_cc3xx_platform_mutex_init+0x18>)
    31f0:	4804      	ldr	r0, [pc, #16]	; (3204 <nrf_cc3xx_platform_mutex_init+0x1c>)
    31f2:	f008 fd83 	bl	bcfc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    31f6:	4904      	ldr	r1, [pc, #16]	; (3208 <nrf_cc3xx_platform_mutex_init+0x20>)
    31f8:	4804      	ldr	r0, [pc, #16]	; (320c <nrf_cc3xx_platform_mutex_init+0x24>)
    31fa:	f007 fb9f 	bl	a93c <nrf_cc3xx_platform_set_mutexes>
}
    31fe:	bd08      	pop	{r3, pc}
    3200:	200006f0 	.word	0x200006f0
    3204:	200006d0 	.word	0x200006d0
    3208:	0000cdd8 	.word	0x0000cdd8
    320c:	0000cdc8 	.word	0x0000cdc8

00003210 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3210:	4901      	ldr	r1, [pc, #4]	; (3218 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3212:	2210      	movs	r2, #16
	str	r2, [r1]
    3214:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3216:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3218:	e000ed10 	.word	0xe000ed10

0000321c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    321c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    321e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3220:	f380 8811 	msr	BASEPRI, r0
	isb
    3224:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3228:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    322c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    322e:	b662      	cpsie	i
	isb
    3230:	f3bf 8f6f 	isb	sy

	bx	lr
    3234:	4770      	bx	lr
    3236:	bf00      	nop

00003238 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3238:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    323a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    323c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3240:	bf20      	wfe

	msr	BASEPRI, r0
    3242:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3246:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3248:	4770      	bx	lr
    324a:	bf00      	nop

0000324c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    324c:	b570      	push	{r4, r5, r6, lr}
    324e:	b086      	sub	sp, #24
    3250:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3252:	4e1e      	ldr	r6, [pc, #120]	; (32cc <esf_dump+0x80>)
    3254:	6883      	ldr	r3, [r0, #8]
    3256:	9305      	str	r3, [sp, #20]
    3258:	6843      	ldr	r3, [r0, #4]
    325a:	9304      	str	r3, [sp, #16]
    325c:	6803      	ldr	r3, [r0, #0]
    325e:	9303      	str	r3, [sp, #12]
    3260:	4b1b      	ldr	r3, [pc, #108]	; (32d0 <esf_dump+0x84>)
    3262:	9302      	str	r3, [sp, #8]
    3264:	2400      	movs	r4, #0
    3266:	9401      	str	r4, [sp, #4]
    3268:	9400      	str	r4, [sp, #0]
    326a:	4623      	mov	r3, r4
    326c:	2201      	movs	r2, #1
    326e:	4631      	mov	r1, r6
    3270:	4620      	mov	r0, r4
    3272:	f007 ff2c 	bl	b0ce <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3276:	696b      	ldr	r3, [r5, #20]
    3278:	9305      	str	r3, [sp, #20]
    327a:	692b      	ldr	r3, [r5, #16]
    327c:	9304      	str	r3, [sp, #16]
    327e:	68eb      	ldr	r3, [r5, #12]
    3280:	9303      	str	r3, [sp, #12]
    3282:	4b14      	ldr	r3, [pc, #80]	; (32d4 <esf_dump+0x88>)
    3284:	9302      	str	r3, [sp, #8]
    3286:	9401      	str	r4, [sp, #4]
    3288:	9400      	str	r4, [sp, #0]
    328a:	4623      	mov	r3, r4
    328c:	2201      	movs	r2, #1
    328e:	4631      	mov	r1, r6
    3290:	4620      	mov	r0, r4
    3292:	f007 ff1c 	bl	b0ce <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3296:	69eb      	ldr	r3, [r5, #28]
    3298:	9303      	str	r3, [sp, #12]
    329a:	4b0f      	ldr	r3, [pc, #60]	; (32d8 <esf_dump+0x8c>)
    329c:	9302      	str	r3, [sp, #8]
    329e:	9401      	str	r4, [sp, #4]
    32a0:	9400      	str	r4, [sp, #0]
    32a2:	4623      	mov	r3, r4
    32a4:	2201      	movs	r2, #1
    32a6:	4631      	mov	r1, r6
    32a8:	4620      	mov	r0, r4
    32aa:	f007 ff10 	bl	b0ce <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    32ae:	69ab      	ldr	r3, [r5, #24]
    32b0:	9303      	str	r3, [sp, #12]
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <esf_dump+0x90>)
    32b4:	9302      	str	r3, [sp, #8]
    32b6:	9401      	str	r4, [sp, #4]
    32b8:	9400      	str	r4, [sp, #0]
    32ba:	4623      	mov	r3, r4
    32bc:	2201      	movs	r2, #1
    32be:	4631      	mov	r1, r6
    32c0:	4620      	mov	r0, r4
    32c2:	f007 ff04 	bl	b0ce <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    32c6:	b006      	add	sp, #24
    32c8:	bd70      	pop	{r4, r5, r6, pc}
    32ca:	bf00      	nop
    32cc:	0000c17c 	.word	0x0000c17c
    32d0:	0000cdec 	.word	0x0000cdec
    32d4:	0000ce1c 	.word	0x0000ce1c
    32d8:	0000ce4c 	.word	0x0000ce4c
    32dc:	0000ce5c 	.word	0x0000ce5c

000032e0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    32e0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    32e2:	2800      	cmp	r0, #0
    32e4:	db07      	blt.n	32f6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32e6:	f000 021f 	and.w	r2, r0, #31
    32ea:	0940      	lsrs	r0, r0, #5
    32ec:	2301      	movs	r3, #1
    32ee:	4093      	lsls	r3, r2
    32f0:	4a01      	ldr	r2, [pc, #4]	; (32f8 <arch_irq_enable+0x18>)
    32f2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    32f6:	4770      	bx	lr
    32f8:	e000e100 	.word	0xe000e100

000032fc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    32fc:	0942      	lsrs	r2, r0, #5
    32fe:	4b05      	ldr	r3, [pc, #20]	; (3314 <arch_irq_is_enabled+0x18>)
    3300:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3304:	f000 001f 	and.w	r0, r0, #31
    3308:	2301      	movs	r3, #1
    330a:	fa03 f000 	lsl.w	r0, r3, r0
}
    330e:	4010      	ands	r0, r2
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	e000e100 	.word	0xe000e100

00003318 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    331a:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    331c:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    331e:	2d07      	cmp	r5, #7
    3320:	d80b      	bhi.n	333a <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3322:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3324:	2800      	cmp	r0, #0
    3326:	db1b      	blt.n	3360 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3328:	016d      	lsls	r5, r5, #5
    332a:	b2ed      	uxtb	r5, r5
    332c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    3330:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    3334:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    3338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    333a:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    333c:	4f0c      	ldr	r7, [pc, #48]	; (3370 <z_arm_irq_priority_set+0x58>)
    333e:	2357      	movs	r3, #87	; 0x57
    3340:	463a      	mov	r2, r7
    3342:	490c      	ldr	r1, [pc, #48]	; (3374 <z_arm_irq_priority_set+0x5c>)
    3344:	480c      	ldr	r0, [pc, #48]	; (3378 <z_arm_irq_priority_set+0x60>)
    3346:	f007 fe0e 	bl	af66 <assert_print>
    334a:	2307      	movs	r3, #7
    334c:	4622      	mov	r2, r4
    334e:	4631      	mov	r1, r6
    3350:	480a      	ldr	r0, [pc, #40]	; (337c <z_arm_irq_priority_set+0x64>)
    3352:	f007 fe08 	bl	af66 <assert_print>
    3356:	2157      	movs	r1, #87	; 0x57
    3358:	4638      	mov	r0, r7
    335a:	f007 fdfd 	bl	af58 <assert_post_action>
    335e:	e7e0      	b.n	3322 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3360:	f000 000f 	and.w	r0, r0, #15
    3364:	016d      	lsls	r5, r5, #5
    3366:	b2ed      	uxtb	r5, r5
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <z_arm_irq_priority_set+0x68>)
    336a:	541d      	strb	r5, [r3, r0]
}
    336c:	e7e4      	b.n	3338 <z_arm_irq_priority_set+0x20>
    336e:	bf00      	nop
    3370:	0000ce8c 	.word	0x0000ce8c
    3374:	0000cec4 	.word	0x0000cec4
    3378:	0000c5c0 	.word	0x0000c5c0
    337c:	0000cee0 	.word	0x0000cee0
    3380:	e000ed14 	.word	0xe000ed14

00003384 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3384:	bf30      	wfi
    b z_SysNmiOnReset
    3386:	f7ff bffd 	b.w	3384 <z_SysNmiOnReset>
    338a:	bf00      	nop

0000338c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    338c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    338e:	4b0b      	ldr	r3, [pc, #44]	; (33bc <z_arm_prep_c+0x30>)
    3390:	4a0b      	ldr	r2, [pc, #44]	; (33c0 <z_arm_prep_c+0x34>)
    3392:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3396:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    339c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    33a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    33a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    33a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    33ac:	f004 fb7c 	bl	7aa8 <z_bss_zero>
	z_data_copy();
    33b0:	f006 fd42 	bl	9e38 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    33b4:	f000 fc6a 	bl	3c8c <z_arm_interrupt_init>
	z_cstart();
    33b8:	f004 fbd4 	bl	7b64 <z_cstart>
    33bc:	e000ed00 	.word	0xe000ed00
    33c0:	00000000 	.word	0x00000000

000033c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    33c4:	4a0a      	ldr	r2, [pc, #40]	; (33f0 <arch_swap+0x2c>)
    33c6:	6893      	ldr	r3, [r2, #8]
    33c8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    33cc:	4909      	ldr	r1, [pc, #36]	; (33f4 <arch_swap+0x30>)
    33ce:	6809      	ldr	r1, [r1, #0]
    33d0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    33d4:	4908      	ldr	r1, [pc, #32]	; (33f8 <arch_swap+0x34>)
    33d6:	684b      	ldr	r3, [r1, #4]
    33d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    33dc:	604b      	str	r3, [r1, #4]
    33de:	2300      	movs	r3, #0
    33e0:	f383 8811 	msr	BASEPRI, r3
    33e4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    33e8:	6893      	ldr	r3, [r2, #8]
}
    33ea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    33ee:	4770      	bx	lr
    33f0:	20001154 	.word	0x20001154
    33f4:	0000db80 	.word	0x0000db80
    33f8:	e000ed00 	.word	0xe000ed00

000033fc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    33fc:	4913      	ldr	r1, [pc, #76]	; (344c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    33fe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3400:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3404:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3406:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    340a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    340e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3410:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3414:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3418:	4f0d      	ldr	r7, [pc, #52]	; (3450 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    341a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    341e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3420:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3422:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3424:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3428:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    342a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    342e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3432:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3434:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3436:	f000 fcd3 	bl	3de0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    343a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    343e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3442:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3446:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    344a:	4770      	bx	lr
    ldr r1, =_kernel
    344c:	20001154 	.word	0x20001154
    ldr v4, =_SCS_ICSR
    3450:	e000ed04 	.word	0xe000ed04

00003454 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3454:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3458:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    345a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    345e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3462:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3464:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3468:	2902      	cmp	r1, #2
    beq _oops
    346a:	d0ff      	beq.n	346c <_oops>

0000346c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    346c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    346e:	f007 fe49 	bl	b104 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3472:	bd01      	pop	{r0, pc}

00003474 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3474:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3476:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    347a:	490e      	ldr	r1, [pc, #56]	; (34b4 <arch_new_thread+0x40>)
    347c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3480:	f021 0101 	bic.w	r1, r1, #1
    3484:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3488:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    348c:	9b01      	ldr	r3, [sp, #4]
    348e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3492:	9b02      	ldr	r3, [sp, #8]
    3494:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3498:	9b03      	ldr	r3, [sp, #12]
    349a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    349e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    34a2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    34a6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    34a8:	2300      	movs	r3, #0
    34aa:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    34ae:	bc10      	pop	{r4}
    34b0:	4770      	bx	lr
    34b2:	bf00      	nop
    34b4:	0000adb1 	.word	0x0000adb1

000034b8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    34b8:	4b12      	ldr	r3, [pc, #72]	; (3504 <z_check_thread_stack_fail+0x4c>)
    34ba:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    34bc:	b302      	cbz	r2, 3500 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    34be:	f110 0f16 	cmn.w	r0, #22
    34c2:	d011      	beq.n	34e8 <z_check_thread_stack_fail+0x30>
    34c4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    34c8:	f1a3 0c20 	sub.w	ip, r3, #32
    34cc:	4584      	cmp	ip, r0
    34ce:	d805      	bhi.n	34dc <z_check_thread_stack_fail+0x24>
    34d0:	4283      	cmp	r3, r0
    34d2:	d905      	bls.n	34e0 <z_check_thread_stack_fail+0x28>
    34d4:	428b      	cmp	r3, r1
    34d6:	d805      	bhi.n	34e4 <z_check_thread_stack_fail+0x2c>
    34d8:	2100      	movs	r1, #0
    34da:	e00b      	b.n	34f4 <z_check_thread_stack_fail+0x3c>
    34dc:	2100      	movs	r1, #0
    34de:	e009      	b.n	34f4 <z_check_thread_stack_fail+0x3c>
    34e0:	2100      	movs	r1, #0
    34e2:	e007      	b.n	34f4 <z_check_thread_stack_fail+0x3c>
    34e4:	2101      	movs	r1, #1
    34e6:	e005      	b.n	34f4 <z_check_thread_stack_fail+0x3c>
    34e8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    34ec:	428b      	cmp	r3, r1
    34ee:	bf94      	ite	ls
    34f0:	2100      	movls	r1, #0
    34f2:	2101      	movhi	r1, #1
    34f4:	b909      	cbnz	r1, 34fa <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    34f6:	2000      	movs	r0, #0
}
    34f8:	4770      	bx	lr
		return thread->stack_info.start;
    34fa:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    34fe:	4770      	bx	lr
		return 0;
    3500:	2000      	movs	r0, #0
    3502:	4770      	bx	lr
    3504:	20001154 	.word	0x20001154

00003508 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3508:	b508      	push	{r3, lr}
    350a:	460d      	mov	r5, r1
    350c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    350e:	4b08      	ldr	r3, [pc, #32]	; (3530 <arch_switch_to_main_thread+0x28>)
    3510:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3512:	f000 fc65 	bl	3de0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3516:	4620      	mov	r0, r4
    3518:	f385 8809 	msr	PSP, r5
    351c:	2100      	movs	r1, #0
    351e:	b663      	cpsie	if
    3520:	f381 8811 	msr	BASEPRI, r1
    3524:	f3bf 8f6f 	isb	sy
    3528:	2200      	movs	r2, #0
    352a:	2300      	movs	r3, #0
    352c:	f007 fc40 	bl	adb0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3530:	20001154 	.word	0x20001154

00003534 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3534:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3536:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3538:	4a0b      	ldr	r2, [pc, #44]	; (3568 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    353a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    353c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    353e:	bf1e      	ittt	ne
	movne	r1, #0
    3540:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3542:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3544:	f008 fc12 	blne	bd6c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3548:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    354a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    354e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3552:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3556:	4905      	ldr	r1, [pc, #20]	; (356c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3558:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    355a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    355c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    355e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3562:	4903      	ldr	r1, [pc, #12]	; (3570 <_isr_wrapper+0x3c>)
	bx r1
    3564:	4708      	bx	r1
    3566:	0000      	.short	0x0000
	ldr r2, =_kernel
    3568:	20001154 	.word	0x20001154
	ldr r1, =_sw_isr_table
    356c:	0000bfcc 	.word	0x0000bfcc
	ldr r1, =z_arm_int_exit
    3570:	00003575 	.word	0x00003575

00003574 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3574:	4b04      	ldr	r3, [pc, #16]	; (3588 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3576:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3578:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    357a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    357c:	d003      	beq.n	3586 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    357e:	4903      	ldr	r1, [pc, #12]	; (358c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3584:	600a      	str	r2, [r1, #0]

00003586 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3586:	4770      	bx	lr
	ldr r3, =_kernel
    3588:	20001154 	.word	0x20001154
	ldr r1, =_SCS_ICSR
    358c:	e000ed04 	.word	0xe000ed04

00003590 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3590:	b570      	push	{r4, r5, r6, lr}
    3592:	b084      	sub	sp, #16
    3594:	4605      	mov	r5, r0
    3596:	460e      	mov	r6, r1
    3598:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    359a:	4b47      	ldr	r3, [pc, #284]	; (36b8 <bus_fault+0x128>)
    359c:	9302      	str	r3, [sp, #8]
    359e:	2000      	movs	r0, #0
    35a0:	9001      	str	r0, [sp, #4]
    35a2:	9000      	str	r0, [sp, #0]
    35a4:	4603      	mov	r3, r0
    35a6:	2201      	movs	r2, #1
    35a8:	4944      	ldr	r1, [pc, #272]	; (36bc <bus_fault+0x12c>)
    35aa:	f007 fdbf 	bl	b12c <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    35ae:	4b44      	ldr	r3, [pc, #272]	; (36c0 <bus_fault+0x130>)
    35b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35b2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    35b6:	d125      	bne.n	3604 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    35b8:	4b41      	ldr	r3, [pc, #260]	; (36c0 <bus_fault+0x130>)
    35ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
    35c0:	d12b      	bne.n	361a <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    35c2:	4b3f      	ldr	r3, [pc, #252]	; (36c0 <bus_fault+0x130>)
    35c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35c6:	f413 7f00 	tst.w	r3, #512	; 0x200
    35ca:	d131      	bne.n	3630 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    35cc:	4b3c      	ldr	r3, [pc, #240]	; (36c0 <bus_fault+0x130>)
    35ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    35d4:	d14f      	bne.n	3676 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    35d6:	4b3a      	ldr	r3, [pc, #232]	; (36c0 <bus_fault+0x130>)
    35d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35da:	f413 7f80 	tst.w	r3, #256	; 0x100
    35de:	d155      	bne.n	368c <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    35e0:	4b37      	ldr	r3, [pc, #220]	; (36c0 <bus_fault+0x130>)
    35e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    35e8:	d15b      	bne.n	36a2 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    35ea:	4a35      	ldr	r2, [pc, #212]	; (36c0 <bus_fault+0x130>)
    35ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    35ee:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    35f2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    35f4:	2101      	movs	r1, #1
    35f6:	4628      	mov	r0, r5
    35f8:	f007 fd96 	bl	b128 <memory_fault_recoverable>
    35fc:	7020      	strb	r0, [r4, #0]

	return reason;
}
    35fe:	2000      	movs	r0, #0
    3600:	b004      	add	sp, #16
    3602:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    3604:	4b2f      	ldr	r3, [pc, #188]	; (36c4 <bus_fault+0x134>)
    3606:	9302      	str	r3, [sp, #8]
    3608:	2000      	movs	r0, #0
    360a:	9001      	str	r0, [sp, #4]
    360c:	9000      	str	r0, [sp, #0]
    360e:	4603      	mov	r3, r0
    3610:	2201      	movs	r2, #1
    3612:	492a      	ldr	r1, [pc, #168]	; (36bc <bus_fault+0x12c>)
    3614:	f007 fd8a 	bl	b12c <z_log_msg2_runtime_create>
    3618:	e7ce      	b.n	35b8 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    361a:	4b2b      	ldr	r3, [pc, #172]	; (36c8 <bus_fault+0x138>)
    361c:	9302      	str	r3, [sp, #8]
    361e:	2000      	movs	r0, #0
    3620:	9001      	str	r0, [sp, #4]
    3622:	9000      	str	r0, [sp, #0]
    3624:	4603      	mov	r3, r0
    3626:	2201      	movs	r2, #1
    3628:	4924      	ldr	r1, [pc, #144]	; (36bc <bus_fault+0x12c>)
    362a:	f007 fd7f 	bl	b12c <z_log_msg2_runtime_create>
    362e:	e7c8      	b.n	35c2 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    3630:	4b26      	ldr	r3, [pc, #152]	; (36cc <bus_fault+0x13c>)
    3632:	9302      	str	r3, [sp, #8]
    3634:	2000      	movs	r0, #0
    3636:	9001      	str	r0, [sp, #4]
    3638:	9000      	str	r0, [sp, #0]
    363a:	4603      	mov	r3, r0
    363c:	2201      	movs	r2, #1
    363e:	491f      	ldr	r1, [pc, #124]	; (36bc <bus_fault+0x12c>)
    3640:	f007 fd74 	bl	b12c <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3644:	4b1e      	ldr	r3, [pc, #120]	; (36c0 <bus_fault+0x130>)
    3646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    364a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    364e:	d0bd      	beq.n	35cc <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3650:	9203      	str	r2, [sp, #12]
    3652:	4b1f      	ldr	r3, [pc, #124]	; (36d0 <bus_fault+0x140>)
    3654:	9302      	str	r3, [sp, #8]
    3656:	2000      	movs	r0, #0
    3658:	9001      	str	r0, [sp, #4]
    365a:	9000      	str	r0, [sp, #0]
    365c:	4603      	mov	r3, r0
    365e:	2201      	movs	r2, #1
    3660:	4916      	ldr	r1, [pc, #88]	; (36bc <bus_fault+0x12c>)
    3662:	f007 fd63 	bl	b12c <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3666:	2e00      	cmp	r6, #0
    3668:	d0b0      	beq.n	35cc <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    366a:	4a15      	ldr	r2, [pc, #84]	; (36c0 <bus_fault+0x130>)
    366c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    366e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3672:	6293      	str	r3, [r2, #40]	; 0x28
    3674:	e7aa      	b.n	35cc <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    3676:	4b17      	ldr	r3, [pc, #92]	; (36d4 <bus_fault+0x144>)
    3678:	9302      	str	r3, [sp, #8]
    367a:	2000      	movs	r0, #0
    367c:	9001      	str	r0, [sp, #4]
    367e:	9000      	str	r0, [sp, #0]
    3680:	4603      	mov	r3, r0
    3682:	2201      	movs	r2, #1
    3684:	490d      	ldr	r1, [pc, #52]	; (36bc <bus_fault+0x12c>)
    3686:	f007 fd51 	bl	b12c <z_log_msg2_runtime_create>
    368a:	e7a4      	b.n	35d6 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    368c:	4b12      	ldr	r3, [pc, #72]	; (36d8 <bus_fault+0x148>)
    368e:	9302      	str	r3, [sp, #8]
    3690:	2000      	movs	r0, #0
    3692:	9001      	str	r0, [sp, #4]
    3694:	9000      	str	r0, [sp, #0]
    3696:	4603      	mov	r3, r0
    3698:	2201      	movs	r2, #1
    369a:	4908      	ldr	r1, [pc, #32]	; (36bc <bus_fault+0x12c>)
    369c:	f007 fd46 	bl	b12c <z_log_msg2_runtime_create>
    36a0:	e7a3      	b.n	35ea <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    36a2:	4b0e      	ldr	r3, [pc, #56]	; (36dc <bus_fault+0x14c>)
    36a4:	9302      	str	r3, [sp, #8]
    36a6:	2000      	movs	r0, #0
    36a8:	9001      	str	r0, [sp, #4]
    36aa:	9000      	str	r0, [sp, #0]
    36ac:	4603      	mov	r3, r0
    36ae:	2201      	movs	r2, #1
    36b0:	4902      	ldr	r1, [pc, #8]	; (36bc <bus_fault+0x12c>)
    36b2:	f007 fd3b 	bl	b12c <z_log_msg2_runtime_create>
    36b6:	e798      	b.n	35ea <bus_fault+0x5a>
    36b8:	0000cf20 	.word	0x0000cf20
    36bc:	0000c17c 	.word	0x0000c17c
    36c0:	e000ed00 	.word	0xe000ed00
    36c4:	0000cf38 	.word	0x0000cf38
    36c8:	0000cf4c 	.word	0x0000cf4c
    36cc:	0000cf60 	.word	0x0000cf60
    36d0:	0000cf7c 	.word	0x0000cf7c
    36d4:	0000cf94 	.word	0x0000cf94
    36d8:	0000cfb0 	.word	0x0000cfb0
    36dc:	0000cfc8 	.word	0x0000cfc8

000036e0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    36e0:	b500      	push	{lr}
    36e2:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    36e4:	4b3a      	ldr	r3, [pc, #232]	; (37d0 <usage_fault+0xf0>)
    36e6:	9302      	str	r3, [sp, #8]
    36e8:	2000      	movs	r0, #0
    36ea:	9001      	str	r0, [sp, #4]
    36ec:	9000      	str	r0, [sp, #0]
    36ee:	4603      	mov	r3, r0
    36f0:	2201      	movs	r2, #1
    36f2:	4938      	ldr	r1, [pc, #224]	; (37d4 <usage_fault+0xf4>)
    36f4:	f007 fd1a 	bl	b12c <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    36f8:	4b37      	ldr	r3, [pc, #220]	; (37d8 <usage_fault+0xf8>)
    36fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    36fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3700:	d123      	bne.n	374a <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3702:	4b35      	ldr	r3, [pc, #212]	; (37d8 <usage_fault+0xf8>)
    3704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3706:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    370a:	d129      	bne.n	3760 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    370c:	4b32      	ldr	r3, [pc, #200]	; (37d8 <usage_fault+0xf8>)
    370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3710:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3714:	d12f      	bne.n	3776 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3716:	4b30      	ldr	r3, [pc, #192]	; (37d8 <usage_fault+0xf8>)
    3718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    371a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    371e:	d135      	bne.n	378c <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3720:	4b2d      	ldr	r3, [pc, #180]	; (37d8 <usage_fault+0xf8>)
    3722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3724:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3728:	d13b      	bne.n	37a2 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    372a:	4b2b      	ldr	r3, [pc, #172]	; (37d8 <usage_fault+0xf8>)
    372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    372e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3732:	d141      	bne.n	37b8 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3734:	4a28      	ldr	r2, [pc, #160]	; (37d8 <usage_fault+0xf8>)
    3736:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3738:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    373c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3740:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3742:	2000      	movs	r0, #0
    3744:	b005      	add	sp, #20
    3746:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    374a:	4b24      	ldr	r3, [pc, #144]	; (37dc <usage_fault+0xfc>)
    374c:	9302      	str	r3, [sp, #8]
    374e:	2000      	movs	r0, #0
    3750:	9001      	str	r0, [sp, #4]
    3752:	9000      	str	r0, [sp, #0]
    3754:	4603      	mov	r3, r0
    3756:	2201      	movs	r2, #1
    3758:	491e      	ldr	r1, [pc, #120]	; (37d4 <usage_fault+0xf4>)
    375a:	f007 fce7 	bl	b12c <z_log_msg2_runtime_create>
    375e:	e7d0      	b.n	3702 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    3760:	4b1f      	ldr	r3, [pc, #124]	; (37e0 <usage_fault+0x100>)
    3762:	9302      	str	r3, [sp, #8]
    3764:	2000      	movs	r0, #0
    3766:	9001      	str	r0, [sp, #4]
    3768:	9000      	str	r0, [sp, #0]
    376a:	4603      	mov	r3, r0
    376c:	2201      	movs	r2, #1
    376e:	4919      	ldr	r1, [pc, #100]	; (37d4 <usage_fault+0xf4>)
    3770:	f007 fcdc 	bl	b12c <z_log_msg2_runtime_create>
    3774:	e7ca      	b.n	370c <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3776:	4b1b      	ldr	r3, [pc, #108]	; (37e4 <usage_fault+0x104>)
    3778:	9302      	str	r3, [sp, #8]
    377a:	2000      	movs	r0, #0
    377c:	9001      	str	r0, [sp, #4]
    377e:	9000      	str	r0, [sp, #0]
    3780:	4603      	mov	r3, r0
    3782:	2201      	movs	r2, #1
    3784:	4913      	ldr	r1, [pc, #76]	; (37d4 <usage_fault+0xf4>)
    3786:	f007 fcd1 	bl	b12c <z_log_msg2_runtime_create>
    378a:	e7c4      	b.n	3716 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    378c:	4b16      	ldr	r3, [pc, #88]	; (37e8 <usage_fault+0x108>)
    378e:	9302      	str	r3, [sp, #8]
    3790:	2000      	movs	r0, #0
    3792:	9001      	str	r0, [sp, #4]
    3794:	9000      	str	r0, [sp, #0]
    3796:	4603      	mov	r3, r0
    3798:	2201      	movs	r2, #1
    379a:	490e      	ldr	r1, [pc, #56]	; (37d4 <usage_fault+0xf4>)
    379c:	f007 fcc6 	bl	b12c <z_log_msg2_runtime_create>
    37a0:	e7be      	b.n	3720 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    37a2:	4b12      	ldr	r3, [pc, #72]	; (37ec <usage_fault+0x10c>)
    37a4:	9302      	str	r3, [sp, #8]
    37a6:	2000      	movs	r0, #0
    37a8:	9001      	str	r0, [sp, #4]
    37aa:	9000      	str	r0, [sp, #0]
    37ac:	4603      	mov	r3, r0
    37ae:	2201      	movs	r2, #1
    37b0:	4908      	ldr	r1, [pc, #32]	; (37d4 <usage_fault+0xf4>)
    37b2:	f007 fcbb 	bl	b12c <z_log_msg2_runtime_create>
    37b6:	e7b8      	b.n	372a <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    37b8:	4b0d      	ldr	r3, [pc, #52]	; (37f0 <usage_fault+0x110>)
    37ba:	9302      	str	r3, [sp, #8]
    37bc:	2000      	movs	r0, #0
    37be:	9001      	str	r0, [sp, #4]
    37c0:	9000      	str	r0, [sp, #0]
    37c2:	4603      	mov	r3, r0
    37c4:	2201      	movs	r2, #1
    37c6:	4903      	ldr	r1, [pc, #12]	; (37d4 <usage_fault+0xf4>)
    37c8:	f007 fcb0 	bl	b12c <z_log_msg2_runtime_create>
    37cc:	e7b2      	b.n	3734 <usage_fault+0x54>
    37ce:	bf00      	nop
    37d0:	0000cff8 	.word	0x0000cff8
    37d4:	0000c17c 	.word	0x0000c17c
    37d8:	e000ed00 	.word	0xe000ed00
    37dc:	0000d010 	.word	0x0000d010
    37e0:	0000d024 	.word	0x0000d024
    37e4:	0000d040 	.word	0x0000d040
    37e8:	0000d060 	.word	0x0000d060
    37ec:	0000d088 	.word	0x0000d088
    37f0:	0000d0a4 	.word	0x0000d0a4

000037f4 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    37f4:	b500      	push	{lr}
    37f6:	b085      	sub	sp, #20
	*recoverable = false;
    37f8:	2000      	movs	r0, #0
    37fa:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    37fc:	4b05      	ldr	r3, [pc, #20]	; (3814 <debug_monitor+0x20>)
    37fe:	9302      	str	r3, [sp, #8]
    3800:	9001      	str	r0, [sp, #4]
    3802:	9000      	str	r0, [sp, #0]
    3804:	4603      	mov	r3, r0
    3806:	2201      	movs	r2, #1
    3808:	4903      	ldr	r1, [pc, #12]	; (3818 <debug_monitor+0x24>)
    380a:	f007 fc8f 	bl	b12c <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    380e:	b005      	add	sp, #20
    3810:	f85d fb04 	ldr.w	pc, [sp], #4
    3814:	0000d0d0 	.word	0x0000d0d0
    3818:	0000c17c 	.word	0x0000c17c

0000381c <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    381c:	b500      	push	{lr}
    381e:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    3820:	290f      	cmp	r1, #15
    3822:	dc10      	bgt.n	3846 <reserved_exception+0x2a>
    3824:	4b09      	ldr	r3, [pc, #36]	; (384c <reserved_exception+0x30>)
    3826:	3910      	subs	r1, #16
    3828:	9104      	str	r1, [sp, #16]
    382a:	9303      	str	r3, [sp, #12]
    382c:	4b08      	ldr	r3, [pc, #32]	; (3850 <reserved_exception+0x34>)
    382e:	9302      	str	r3, [sp, #8]
    3830:	2000      	movs	r0, #0
    3832:	9001      	str	r0, [sp, #4]
    3834:	9000      	str	r0, [sp, #0]
    3836:	4603      	mov	r3, r0
    3838:	2201      	movs	r2, #1
    383a:	4906      	ldr	r1, [pc, #24]	; (3854 <reserved_exception+0x38>)
    383c:	f007 fc76 	bl	b12c <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    3840:	b007      	add	sp, #28
    3842:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    3846:	4b04      	ldr	r3, [pc, #16]	; (3858 <reserved_exception+0x3c>)
    3848:	e7ed      	b.n	3826 <reserved_exception+0xa>
    384a:	bf00      	nop
    384c:	0000d110 	.word	0x0000d110
    3850:	0000d128 	.word	0x0000d128
    3854:	0000c17c 	.word	0x0000c17c
    3858:	0000d0f4 	.word	0x0000d0f4

0000385c <mem_manage_fault>:
{
    385c:	b5f0      	push	{r4, r5, r6, r7, lr}
    385e:	b085      	sub	sp, #20
    3860:	4605      	mov	r5, r0
    3862:	460c      	mov	r4, r1
    3864:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3866:	4b5f      	ldr	r3, [pc, #380]	; (39e4 <mem_manage_fault+0x188>)
    3868:	9302      	str	r3, [sp, #8]
    386a:	2000      	movs	r0, #0
    386c:	9001      	str	r0, [sp, #4]
    386e:	9000      	str	r0, [sp, #0]
    3870:	4603      	mov	r3, r0
    3872:	2201      	movs	r2, #1
    3874:	495c      	ldr	r1, [pc, #368]	; (39e8 <mem_manage_fault+0x18c>)
    3876:	f007 fc59 	bl	b12c <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    387a:	4b5c      	ldr	r3, [pc, #368]	; (39ec <mem_manage_fault+0x190>)
    387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    387e:	f013 0f10 	tst.w	r3, #16
    3882:	d13b      	bne.n	38fc <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3884:	4b59      	ldr	r3, [pc, #356]	; (39ec <mem_manage_fault+0x190>)
    3886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3888:	f013 0f08 	tst.w	r3, #8
    388c:	d141      	bne.n	3912 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    388e:	4b57      	ldr	r3, [pc, #348]	; (39ec <mem_manage_fault+0x190>)
    3890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3892:	f013 0f02 	tst.w	r3, #2
    3896:	d147      	bne.n	3928 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    3898:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    389c:	4b53      	ldr	r3, [pc, #332]	; (39ec <mem_manage_fault+0x190>)
    389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38a0:	f013 0f01 	tst.w	r3, #1
    38a4:	d166      	bne.n	3974 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    38a6:	4b51      	ldr	r3, [pc, #324]	; (39ec <mem_manage_fault+0x190>)
    38a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38aa:	f013 0f20 	tst.w	r3, #32
    38ae:	d16c      	bne.n	398a <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    38b0:	4b4e      	ldr	r3, [pc, #312]	; (39ec <mem_manage_fault+0x190>)
    38b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38b4:	f013 0f10 	tst.w	r3, #16
    38b8:	d104      	bne.n	38c4 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    38ba:	4b4c      	ldr	r3, [pc, #304]	; (39ec <mem_manage_fault+0x190>)
    38bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    38be:	f014 0402 	ands.w	r4, r4, #2
    38c2:	d004      	beq.n	38ce <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    38c4:	4b49      	ldr	r3, [pc, #292]	; (39ec <mem_manage_fault+0x190>)
    38c6:	685c      	ldr	r4, [r3, #4]
    38c8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    38cc:	d168      	bne.n	39a0 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    38ce:	4b47      	ldr	r3, [pc, #284]	; (39ec <mem_manage_fault+0x190>)
    38d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38d2:	f013 0f20 	tst.w	r3, #32
    38d6:	d004      	beq.n	38e2 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    38d8:	4a44      	ldr	r2, [pc, #272]	; (39ec <mem_manage_fault+0x190>)
    38da:	6a53      	ldr	r3, [r2, #36]	; 0x24
    38dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    38e0:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    38e2:	4a42      	ldr	r2, [pc, #264]	; (39ec <mem_manage_fault+0x190>)
    38e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    38e6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    38ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    38ec:	2101      	movs	r1, #1
    38ee:	4628      	mov	r0, r5
    38f0:	f007 fc1a 	bl	b128 <memory_fault_recoverable>
    38f4:	7030      	strb	r0, [r6, #0]
}
    38f6:	4620      	mov	r0, r4
    38f8:	b005      	add	sp, #20
    38fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    38fc:	4b3c      	ldr	r3, [pc, #240]	; (39f0 <mem_manage_fault+0x194>)
    38fe:	9302      	str	r3, [sp, #8]
    3900:	2000      	movs	r0, #0
    3902:	9001      	str	r0, [sp, #4]
    3904:	9000      	str	r0, [sp, #0]
    3906:	4603      	mov	r3, r0
    3908:	2201      	movs	r2, #1
    390a:	4937      	ldr	r1, [pc, #220]	; (39e8 <mem_manage_fault+0x18c>)
    390c:	f007 fc0e 	bl	b12c <z_log_msg2_runtime_create>
    3910:	e7b8      	b.n	3884 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    3912:	4b38      	ldr	r3, [pc, #224]	; (39f4 <mem_manage_fault+0x198>)
    3914:	9302      	str	r3, [sp, #8]
    3916:	2000      	movs	r0, #0
    3918:	9001      	str	r0, [sp, #4]
    391a:	9000      	str	r0, [sp, #0]
    391c:	4603      	mov	r3, r0
    391e:	2201      	movs	r2, #1
    3920:	4931      	ldr	r1, [pc, #196]	; (39e8 <mem_manage_fault+0x18c>)
    3922:	f007 fc03 	bl	b12c <z_log_msg2_runtime_create>
    3926:	e7b2      	b.n	388e <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    3928:	4b33      	ldr	r3, [pc, #204]	; (39f8 <mem_manage_fault+0x19c>)
    392a:	9302      	str	r3, [sp, #8]
    392c:	2000      	movs	r0, #0
    392e:	9001      	str	r0, [sp, #4]
    3930:	9000      	str	r0, [sp, #0]
    3932:	4603      	mov	r3, r0
    3934:	2201      	movs	r2, #1
    3936:	492c      	ldr	r1, [pc, #176]	; (39e8 <mem_manage_fault+0x18c>)
    3938:	f007 fbf8 	bl	b12c <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    393c:	4b2b      	ldr	r3, [pc, #172]	; (39ec <mem_manage_fault+0x190>)
    393e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3942:	f013 0f80 	tst.w	r3, #128	; 0x80
    3946:	d102      	bne.n	394e <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    3948:	f06f 0715 	mvn.w	r7, #21
    394c:	e7a6      	b.n	389c <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    394e:	9703      	str	r7, [sp, #12]
    3950:	4b2a      	ldr	r3, [pc, #168]	; (39fc <mem_manage_fault+0x1a0>)
    3952:	9302      	str	r3, [sp, #8]
    3954:	2000      	movs	r0, #0
    3956:	9001      	str	r0, [sp, #4]
    3958:	9000      	str	r0, [sp, #0]
    395a:	4603      	mov	r3, r0
    395c:	2201      	movs	r2, #1
    395e:	4922      	ldr	r1, [pc, #136]	; (39e8 <mem_manage_fault+0x18c>)
    3960:	f007 fbe4 	bl	b12c <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3964:	2c00      	cmp	r4, #0
    3966:	d099      	beq.n	389c <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3968:	4a20      	ldr	r2, [pc, #128]	; (39ec <mem_manage_fault+0x190>)
    396a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    396c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3970:	6293      	str	r3, [r2, #40]	; 0x28
    3972:	e793      	b.n	389c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3974:	4b22      	ldr	r3, [pc, #136]	; (3a00 <mem_manage_fault+0x1a4>)
    3976:	9302      	str	r3, [sp, #8]
    3978:	2000      	movs	r0, #0
    397a:	9001      	str	r0, [sp, #4]
    397c:	9000      	str	r0, [sp, #0]
    397e:	4603      	mov	r3, r0
    3980:	2201      	movs	r2, #1
    3982:	4919      	ldr	r1, [pc, #100]	; (39e8 <mem_manage_fault+0x18c>)
    3984:	f007 fbd2 	bl	b12c <z_log_msg2_runtime_create>
    3988:	e78d      	b.n	38a6 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    398a:	4b1e      	ldr	r3, [pc, #120]	; (3a04 <mem_manage_fault+0x1a8>)
    398c:	9302      	str	r3, [sp, #8]
    398e:	2000      	movs	r0, #0
    3990:	9001      	str	r0, [sp, #4]
    3992:	9000      	str	r0, [sp, #0]
    3994:	4603      	mov	r3, r0
    3996:	2201      	movs	r2, #1
    3998:	4913      	ldr	r1, [pc, #76]	; (39e8 <mem_manage_fault+0x18c>)
    399a:	f007 fbc7 	bl	b12c <z_log_msg2_runtime_create>
    399e:	e787      	b.n	38b0 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    39a0:	4629      	mov	r1, r5
    39a2:	4638      	mov	r0, r7
    39a4:	f7ff fd88 	bl	34b8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    39a8:	4607      	mov	r7, r0
    39aa:	b9b0      	cbnz	r0, 39da <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    39ac:	4b0f      	ldr	r3, [pc, #60]	; (39ec <mem_manage_fault+0x190>)
    39ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    39b0:	f014 0410 	ands.w	r4, r4, #16
    39b4:	d08b      	beq.n	38ce <mem_manage_fault+0x72>
    39b6:	4c14      	ldr	r4, [pc, #80]	; (3a08 <mem_manage_fault+0x1ac>)
    39b8:	f240 1349 	movw	r3, #329	; 0x149
    39bc:	4622      	mov	r2, r4
    39be:	4913      	ldr	r1, [pc, #76]	; (3a0c <mem_manage_fault+0x1b0>)
    39c0:	4813      	ldr	r0, [pc, #76]	; (3a10 <mem_manage_fault+0x1b4>)
    39c2:	f007 fad0 	bl	af66 <assert_print>
    39c6:	4813      	ldr	r0, [pc, #76]	; (3a14 <mem_manage_fault+0x1b8>)
    39c8:	f007 facd 	bl	af66 <assert_print>
    39cc:	f240 1149 	movw	r1, #329	; 0x149
    39d0:	4620      	mov	r0, r4
    39d2:	f007 fac1 	bl	af58 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    39d6:	463c      	mov	r4, r7
    39d8:	e779      	b.n	38ce <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    39da:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    39de:	2402      	movs	r4, #2
    39e0:	e775      	b.n	38ce <mem_manage_fault+0x72>
    39e2:	bf00      	nop
    39e4:	0000d13c 	.word	0x0000d13c
    39e8:	0000c17c 	.word	0x0000c17c
    39ec:	e000ed00 	.word	0xe000ed00
    39f0:	0000d154 	.word	0x0000d154
    39f4:	0000cf4c 	.word	0x0000cf4c
    39f8:	0000d188 	.word	0x0000d188
    39fc:	0000d1a0 	.word	0x0000d1a0
    3a00:	0000d1b8 	.word	0x0000d1b8
    3a04:	0000cfc8 	.word	0x0000cfc8
    3a08:	0000d1d8 	.word	0x0000d1d8
    3a0c:	0000d214 	.word	0x0000d214
    3a10:	0000c5c0 	.word	0x0000c5c0
    3a14:	0000d260 	.word	0x0000d260

00003a18 <hard_fault>:
{
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	b085      	sub	sp, #20
    3a1c:	4607      	mov	r7, r0
    3a1e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    3a20:	4b4b      	ldr	r3, [pc, #300]	; (3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>)
    3a22:	9302      	str	r3, [sp, #8]
    3a24:	2400      	movs	r4, #0
    3a26:	9401      	str	r4, [sp, #4]
    3a28:	9400      	str	r4, [sp, #0]
    3a2a:	4623      	mov	r3, r4
    3a2c:	2201      	movs	r2, #1
    3a2e:	4949      	ldr	r1, [pc, #292]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3a30:	4620      	mov	r0, r4
    3a32:	f007 fb7b 	bl	b12c <z_log_msg2_runtime_create>
	*recoverable = false;
    3a36:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a38:	4b47      	ldr	r3, [pc, #284]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a3a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    3a3c:	f015 0502 	ands.w	r5, r5, #2
    3a40:	d12d      	bne.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3a42:	4b45      	ldr	r3, [pc, #276]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a46:	2b00      	cmp	r3, #0
    3a48:	db36      	blt.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3a4a:	4b43      	ldr	r3, [pc, #268]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a4c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3a4e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3a52:	d06b      	beq.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
		PR_EXC("  Fault escalation (see below)");
    3a54:	4b41      	ldr	r3, [pc, #260]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    3a56:	9302      	str	r3, [sp, #8]
    3a58:	2000      	movs	r0, #0
    3a5a:	9001      	str	r0, [sp, #4]
    3a5c:	9000      	str	r0, [sp, #0]
    3a5e:	4603      	mov	r3, r0
    3a60:	2201      	movs	r2, #1
    3a62:	493c      	ldr	r1, [pc, #240]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3a64:	f007 fb62 	bl	b12c <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3a68:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3a6a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3a6e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3a72:	429a      	cmp	r2, r3
    3a74:	d02c      	beq.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
		} else if (SCB_MMFSR != 0) {
    3a76:	4b38      	ldr	r3, [pc, #224]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d135      	bne.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		} else if (SCB_BFSR != 0) {
    3a80:	4b35      	ldr	r3, [pc, #212]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    3a86:	2b00      	cmp	r3, #0
    3a88:	d137      	bne.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
		} else if (SCB_UFSR != 0) {
    3a8a:	4b33      	ldr	r3, [pc, #204]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3a8e:	b29b      	uxth	r3, r3
    3a90:	2b00      	cmp	r3, #0
    3a92:	d039      	beq.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
			reason = usage_fault(esf);
    3a94:	4638      	mov	r0, r7
    3a96:	f7ff fe23 	bl	36e0 <usage_fault>
    3a9a:	4604      	mov	r4, r0
    3a9c:	e009      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		PR_EXC("  Bus fault on vector table read");
    3a9e:	4b30      	ldr	r3, [pc, #192]	; (3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>)
    3aa0:	9302      	str	r3, [sp, #8]
    3aa2:	9401      	str	r4, [sp, #4]
    3aa4:	9400      	str	r4, [sp, #0]
    3aa6:	4623      	mov	r3, r4
    3aa8:	2201      	movs	r2, #1
    3aaa:	492a      	ldr	r1, [pc, #168]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3aac:	4620      	mov	r0, r4
    3aae:	f007 fb3d 	bl	b12c <z_log_msg2_runtime_create>
}
    3ab2:	4620      	mov	r0, r4
    3ab4:	b005      	add	sp, #20
    3ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    3ab8:	4b2a      	ldr	r3, [pc, #168]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3aba:	9302      	str	r3, [sp, #8]
    3abc:	2000      	movs	r0, #0
    3abe:	9001      	str	r0, [sp, #4]
    3ac0:	9000      	str	r0, [sp, #0]
    3ac2:	4603      	mov	r3, r0
    3ac4:	2201      	movs	r2, #1
    3ac6:	4923      	ldr	r1, [pc, #140]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3ac8:	f007 fb30 	bl	b12c <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3acc:	462c      	mov	r4, r5
    3ace:	e7f0      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3ad0:	683b      	ldr	r3, [r7, #0]
    3ad2:	9303      	str	r3, [sp, #12]
    3ad4:	4b24      	ldr	r3, [pc, #144]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3ad6:	9302      	str	r3, [sp, #8]
    3ad8:	2000      	movs	r0, #0
    3ada:	9001      	str	r0, [sp, #4]
    3adc:	9000      	str	r0, [sp, #0]
    3ade:	4603      	mov	r3, r0
    3ae0:	2201      	movs	r2, #1
    3ae2:	491c      	ldr	r1, [pc, #112]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3ae4:	f007 fb22 	bl	b12c <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    3ae8:	683c      	ldr	r4, [r7, #0]
    3aea:	e7e2      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3aec:	4632      	mov	r2, r6
    3aee:	2101      	movs	r1, #1
    3af0:	4638      	mov	r0, r7
    3af2:	f7ff feb3 	bl	385c <mem_manage_fault>
    3af6:	4604      	mov	r4, r0
    3af8:	e7db      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			reason = bus_fault(esf, 1, recoverable);
    3afa:	4632      	mov	r2, r6
    3afc:	2101      	movs	r1, #1
    3afe:	4638      	mov	r0, r7
    3b00:	f7ff fd46 	bl	3590 <bus_fault>
    3b04:	4604      	mov	r4, r0
    3b06:	e7d4      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			__ASSERT(0,
    3b08:	4c18      	ldr	r4, [pc, #96]	; (3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>)
    3b0a:	f240 23cd 	movw	r3, #717	; 0x2cd
    3b0e:	4622      	mov	r2, r4
    3b10:	4917      	ldr	r1, [pc, #92]	; (3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>)
    3b12:	4818      	ldr	r0, [pc, #96]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3b14:	f007 fa27 	bl	af66 <assert_print>
    3b18:	4817      	ldr	r0, [pc, #92]	; (3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>)
    3b1a:	f007 fa24 	bl	af66 <assert_print>
    3b1e:	f240 21cd 	movw	r1, #717	; 0x2cd
    3b22:	4620      	mov	r0, r4
    3b24:	f007 fa18 	bl	af58 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3b28:	462c      	mov	r4, r5
    3b2a:	e7c2      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		__ASSERT(0,
    3b2c:	4d0f      	ldr	r5, [pc, #60]	; (3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>)
    3b2e:	f240 23d1 	movw	r3, #721	; 0x2d1
    3b32:	462a      	mov	r2, r5
    3b34:	490e      	ldr	r1, [pc, #56]	; (3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>)
    3b36:	480f      	ldr	r0, [pc, #60]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3b38:	f007 fa15 	bl	af66 <assert_print>
    3b3c:	480f      	ldr	r0, [pc, #60]	; (3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>)
    3b3e:	f007 fa12 	bl	af66 <assert_print>
    3b42:	f240 21d1 	movw	r1, #721	; 0x2d1
    3b46:	4628      	mov	r0, r5
    3b48:	f007 fa06 	bl	af58 <assert_post_action>
	return reason;
    3b4c:	e7b1      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3b4e:	bf00      	nop
    3b50:	0000d284 	.word	0x0000d284
    3b54:	0000c17c 	.word	0x0000c17c
    3b58:	e000ed00 	.word	0xe000ed00
    3b5c:	0000d2d0 	.word	0x0000d2d0
    3b60:	0000d29c 	.word	0x0000d29c
    3b64:	0000d2c0 	.word	0x0000d2c0
    3b68:	0000d2f0 	.word	0x0000d2f0
    3b6c:	0000d1d8 	.word	0x0000d1d8
    3b70:	0000cc7c 	.word	0x0000cc7c
    3b74:	0000c5c0 	.word	0x0000c5c0
    3b78:	0000d30c 	.word	0x0000d30c
    3b7c:	0000d330 	.word	0x0000d330

00003b80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3b84:	4b31      	ldr	r3, [pc, #196]	; (3c4c <z_arm_fault+0xcc>)
    3b86:	685d      	ldr	r5, [r3, #4]
    3b88:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3b8c:	2300      	movs	r3, #0
    3b8e:	f383 8811 	msr	BASEPRI, r3
    3b92:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3b96:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3b9a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3b9e:	d125      	bne.n	3bec <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3ba0:	f002 030c 	and.w	r3, r2, #12
    3ba4:	2b08      	cmp	r3, #8
    3ba6:	d011      	beq.n	3bcc <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3ba8:	f012 0f08 	tst.w	r2, #8
    3bac:	d01b      	beq.n	3be6 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    3bae:	460c      	mov	r4, r1
	*nested_exc = false;
    3bb0:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3bb2:	b1f4      	cbz	r4, 3bf2 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    3bb4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    3bb8:	4629      	mov	r1, r5
    3bba:	4620      	mov	r0, r4
    3bbc:	f007 fac5 	bl	b14a <fault_handle>
    3bc0:	4605      	mov	r5, r0
	if (recoverable) {
    3bc2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    3bc6:	b32b      	cbz	r3, 3c14 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    3bc8:	b00f      	add	sp, #60	; 0x3c
    3bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3bcc:	4b20      	ldr	r3, [pc, #128]	; (3c50 <z_arm_fault+0xd0>)
    3bce:	9302      	str	r3, [sp, #8]
    3bd0:	2400      	movs	r4, #0
    3bd2:	9401      	str	r4, [sp, #4]
    3bd4:	9400      	str	r4, [sp, #0]
    3bd6:	4623      	mov	r3, r4
    3bd8:	2201      	movs	r2, #1
    3bda:	491e      	ldr	r1, [pc, #120]	; (3c54 <z_arm_fault+0xd4>)
    3bdc:	4620      	mov	r0, r4
    3bde:	f007 faa5 	bl	b12c <z_log_msg2_runtime_create>
	*nested_exc = false;
    3be2:	4626      	mov	r6, r4
		return NULL;
    3be4:	e7e5      	b.n	3bb2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3be6:	4604      	mov	r4, r0
			*nested_exc = true;
    3be8:	2601      	movs	r6, #1
    3bea:	e7e2      	b.n	3bb2 <z_arm_fault+0x32>
	*nested_exc = false;
    3bec:	2600      	movs	r6, #0
		return NULL;
    3bee:	4634      	mov	r4, r6
    3bf0:	e7df      	b.n	3bb2 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    3bf2:	4f19      	ldr	r7, [pc, #100]	; (3c58 <z_arm_fault+0xd8>)
    3bf4:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3bf8:	463a      	mov	r2, r7
    3bfa:	4918      	ldr	r1, [pc, #96]	; (3c5c <z_arm_fault+0xdc>)
    3bfc:	4818      	ldr	r0, [pc, #96]	; (3c60 <z_arm_fault+0xe0>)
    3bfe:	f007 f9b2 	bl	af66 <assert_print>
    3c02:	4818      	ldr	r0, [pc, #96]	; (3c64 <z_arm_fault+0xe4>)
    3c04:	f007 f9af 	bl	af66 <assert_print>
    3c08:	f240 31fb 	movw	r1, #1019	; 0x3fb
    3c0c:	4638      	mov	r0, r7
    3c0e:	f007 f9a3 	bl	af58 <assert_post_action>
    3c12:	e7cf      	b.n	3bb4 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3c14:	2220      	movs	r2, #32
    3c16:	4621      	mov	r1, r4
    3c18:	a805      	add	r0, sp, #20
    3c1a:	f007 fb3c 	bl	b296 <memcpy>
	if (nested_exc) {
    3c1e:	b14e      	cbz	r6, 3c34 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3c26:	b95a      	cbnz	r2, 3c40 <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3c28:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3c2c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    3c30:	930c      	str	r3, [sp, #48]	; 0x30
    3c32:	e005      	b.n	3c40 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3c3a:	f023 0301 	bic.w	r3, r3, #1
    3c3e:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    3c40:	a905      	add	r1, sp, #20
    3c42:	4628      	mov	r0, r5
    3c44:	f007 fa52 	bl	b0ec <z_arm_fatal_error>
    3c48:	e7be      	b.n	3bc8 <z_arm_fault+0x48>
    3c4a:	bf00      	nop
    3c4c:	e000ed00 	.word	0xe000ed00
    3c50:	0000d360 	.word	0x0000d360
    3c54:	0000c17c 	.word	0x0000c17c
    3c58:	0000d1d8 	.word	0x0000d1d8
    3c5c:	0000d38c 	.word	0x0000d38c
    3c60:	0000c5c0 	.word	0x0000c5c0
    3c64:	0000d3a0 	.word	0x0000d3a0

00003c68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3c68:	4a02      	ldr	r2, [pc, #8]	; (3c74 <z_arm_fault_init+0xc>)
    3c6a:	6953      	ldr	r3, [r2, #20]
    3c6c:	f043 0310 	orr.w	r3, r3, #16
    3c70:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3c72:	4770      	bx	lr
    3c74:	e000ed00 	.word	0xe000ed00

00003c78 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3c78:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3c7c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3c80:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3c82:	4672      	mov	r2, lr
	bl z_arm_fault
    3c84:	f7ff ff7c 	bl	3b80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3c88:	bd01      	pop	{r0, pc}
    3c8a:	bf00      	nop

00003c8c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3c8c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3c8e:	e006      	b.n	3c9e <z_arm_interrupt_init+0x12>
    3c90:	f002 010f 	and.w	r1, r2, #15
    3c94:	4b09      	ldr	r3, [pc, #36]	; (3cbc <z_arm_interrupt_init+0x30>)
    3c96:	440b      	add	r3, r1
    3c98:	2120      	movs	r1, #32
    3c9a:	7619      	strb	r1, [r3, #24]
    3c9c:	3201      	adds	r2, #1
    3c9e:	2a2f      	cmp	r2, #47	; 0x2f
    3ca0:	dc0a      	bgt.n	3cb8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3ca2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	dbf3      	blt.n	3c90 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ca8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3cac:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3cb0:	2120      	movs	r1, #32
    3cb2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3cb6:	e7f1      	b.n	3c9c <z_arm_interrupt_init+0x10>
	}
}
    3cb8:	4770      	bx	lr
    3cba:	bf00      	nop
    3cbc:	e000ecfc 	.word	0xe000ecfc

00003cc0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3cc0:	2000      	movs	r0, #0
    msr CONTROL, r0
    3cc2:	f380 8814 	msr	CONTROL, r0
    isb
    3cc6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3cca:	f008 f8f5 	bl	beb8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3cce:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3cd0:	490d      	ldr	r1, [pc, #52]	; (3d08 <__start+0x48>)
    str r0, [r1]
    3cd2:	6008      	str	r0, [r1, #0]
    dsb
    3cd4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3cd8:	480c      	ldr	r0, [pc, #48]	; (3d0c <__start+0x4c>)
    msr msp, r0
    3cda:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3cde:	f000 f82d 	bl	3d3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3ce2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3ce4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3ce8:	4809      	ldr	r0, [pc, #36]	; (3d10 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3cea:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3cee:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3cf0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3cf4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3cf8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3cfa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3cfc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3d00:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3d04:	f7ff fb42 	bl	338c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3d08:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3d0c:	20002400 	.word	0x20002400
    ldr r0, =z_interrupt_stacks
    3d10:	20002580 	.word	0x20002580

00003d14 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <z_arm_clear_arm_mpu_config+0x24>)
    3d16:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    3d1a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    3d1e:	2300      	movs	r3, #0
    3d20:	e006      	b.n	3d30 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3d22:	4a05      	ldr	r2, [pc, #20]	; (3d38 <z_arm_clear_arm_mpu_config+0x24>)
    3d24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3d28:	2100      	movs	r1, #0
    3d2a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3d2e:	3301      	adds	r3, #1
    3d30:	4283      	cmp	r3, r0
    3d32:	dbf6      	blt.n	3d22 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop
    3d38:	e000ed00 	.word	0xe000ed00

00003d3c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3d3c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3d3e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3d40:	2400      	movs	r4, #0
    3d42:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3d46:	f7ff ffe5 	bl	3d14 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3d4a:	4623      	mov	r3, r4
    3d4c:	e008      	b.n	3d60 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3d4e:	f103 0120 	add.w	r1, r3, #32
    3d52:	4a0e      	ldr	r2, [pc, #56]	; (3d8c <z_arm_init_arch_hw_at_boot+0x50>)
    3d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d58:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3d5c:	3301      	adds	r3, #1
    3d5e:	b2db      	uxtb	r3, r3
    3d60:	2b07      	cmp	r3, #7
    3d62:	d9f4      	bls.n	3d4e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3d64:	2300      	movs	r3, #0
    3d66:	e008      	b.n	3d7a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3d68:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3d6c:	4a07      	ldr	r2, [pc, #28]	; (3d8c <z_arm_init_arch_hw_at_boot+0x50>)
    3d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d72:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3d76:	3301      	adds	r3, #1
    3d78:	b2db      	uxtb	r3, r3
    3d7a:	2b07      	cmp	r3, #7
    3d7c:	d9f4      	bls.n	3d68 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3d7e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d84:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	bf00      	nop
    3d8c:	e000e100 	.word	0xe000e100

00003d90 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3d90:	b508      	push	{r3, lr}
	if (_current == thread) {
    3d92:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <z_impl_k_thread_abort+0x2c>)
    3d94:	689b      	ldr	r3, [r3, #8]
    3d96:	4283      	cmp	r3, r0
    3d98:	d002      	beq.n	3da0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    3d9a:	f005 ffab 	bl	9cf4 <z_thread_abort>
}
    3d9e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3da0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3da4:	2b00      	cmp	r3, #0
    3da6:	d0f8      	beq.n	3d9a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3da8:	4b05      	ldr	r3, [pc, #20]	; (3dc0 <z_impl_k_thread_abort+0x30>)
    3daa:	685a      	ldr	r2, [r3, #4]
    3dac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3db0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3db8:	625a      	str	r2, [r3, #36]	; 0x24
    3dba:	e7ee      	b.n	3d9a <z_impl_k_thread_abort+0xa>
    3dbc:	20001154 	.word	0x20001154
    3dc0:	e000ed00 	.word	0xe000ed00

00003dc4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3dc4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3dc6:	4b03      	ldr	r3, [pc, #12]	; (3dd4 <z_arm_configure_static_mpu_regions+0x10>)
    3dc8:	4a03      	ldr	r2, [pc, #12]	; (3dd8 <z_arm_configure_static_mpu_regions+0x14>)
    3dca:	2101      	movs	r1, #1
    3dcc:	4803      	ldr	r0, [pc, #12]	; (3ddc <z_arm_configure_static_mpu_regions+0x18>)
    3dce:	f000 f8bb 	bl	3f48 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3dd2:	bd08      	pop	{r3, pc}
    3dd4:	20040000 	.word	0x20040000
    3dd8:	20000000 	.word	0x20000000
    3ddc:	0000d3e4 	.word	0x0000d3e4

00003de0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3de0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3de2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3de6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3de8:	4804      	ldr	r0, [pc, #16]	; (3dfc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3dea:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3dec:	2320      	movs	r3, #32
    3dee:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3df0:	4b03      	ldr	r3, [pc, #12]	; (3e00 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3df2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3df4:	2101      	movs	r1, #1
    3df6:	f000 f8c9 	bl	3f8c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    3dfa:	bd08      	pop	{r3, pc}
    3dfc:	20000bf0 	.word	0x20000bf0
    3e00:	150b0000 	.word	0x150b0000

00003e04 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3e04:	4a08      	ldr	r2, [pc, #32]	; (3e28 <region_init+0x24>)
    3e06:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e0a:	680b      	ldr	r3, [r1, #0]
    3e0c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3e10:	4303      	orrs	r3, r0
    3e12:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3e16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3e1a:	688b      	ldr	r3, [r1, #8]
    3e1c:	f043 0301 	orr.w	r3, r3, #1
    3e20:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop
    3e28:	e000ed00 	.word	0xe000ed00

00003e2c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3e2c:	b510      	push	{r4, lr}
    3e2e:	b084      	sub	sp, #16
    3e30:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3e32:	2807      	cmp	r0, #7
    3e34:	d804      	bhi.n	3e40 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    3e36:	f7ff ffe5 	bl	3e04 <region_init>

	return index;
    3e3a:	4620      	mov	r0, r4
}
    3e3c:	b004      	add	sp, #16
    3e3e:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3e40:	9003      	str	r0, [sp, #12]
    3e42:	4b06      	ldr	r3, [pc, #24]	; (3e5c <region_allocate_and_init+0x30>)
    3e44:	9302      	str	r3, [sp, #8]
    3e46:	2000      	movs	r0, #0
    3e48:	9001      	str	r0, [sp, #4]
    3e4a:	9000      	str	r0, [sp, #0]
    3e4c:	4603      	mov	r3, r0
    3e4e:	2201      	movs	r2, #1
    3e50:	4903      	ldr	r1, [pc, #12]	; (3e60 <region_allocate_and_init+0x34>)
    3e52:	f007 f9b0 	bl	b1b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    3e56:	f06f 0015 	mvn.w	r0, #21
    3e5a:	e7ef      	b.n	3e3c <region_allocate_and_init+0x10>
    3e5c:	0000d3f0 	.word	0x0000d3f0
    3e60:	0000c174 	.word	0x0000c174

00003e64 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e68:	b085      	sub	sp, #20
    3e6a:	4680      	mov	r8, r0
    3e6c:	460f      	mov	r7, r1
    3e6e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    3e70:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3e72:	2500      	movs	r5, #0
    3e74:	e009      	b.n	3e8a <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3e76:	4621      	mov	r1, r4
    3e78:	b2f0      	uxtb	r0, r6
    3e7a:	f007 f9ab 	bl	b1d4 <mpu_configure_region>
    3e7e:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3e80:	f110 0f16 	cmn.w	r0, #22
    3e84:	d01e      	beq.n	3ec4 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3e86:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    3e88:	3501      	adds	r5, #1
    3e8a:	42bd      	cmp	r5, r7
    3e8c:	da1a      	bge.n	3ec4 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    3e8e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    3e92:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    3e96:	6862      	ldr	r2, [r4, #4]
    3e98:	2a00      	cmp	r2, #0
    3e9a:	d0f5      	beq.n	3e88 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    3e9c:	f1b9 0f00 	cmp.w	r9, #0
    3ea0:	d0e9      	beq.n	3e76 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    3ea2:	4620      	mov	r0, r4
    3ea4:	f007 f976 	bl	b194 <mpu_partition_is_valid>
		if (do_sanity_check &&
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d1e4      	bne.n	3e76 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3eac:	9503      	str	r5, [sp, #12]
    3eae:	4b07      	ldr	r3, [pc, #28]	; (3ecc <mpu_configure_regions+0x68>)
    3eb0:	9302      	str	r3, [sp, #8]
    3eb2:	9001      	str	r0, [sp, #4]
    3eb4:	9000      	str	r0, [sp, #0]
    3eb6:	4603      	mov	r3, r0
    3eb8:	2201      	movs	r2, #1
    3eba:	4905      	ldr	r1, [pc, #20]	; (3ed0 <mpu_configure_regions+0x6c>)
    3ebc:	f007 f97b 	bl	b1b6 <z_log_msg2_runtime_create>
			return -EINVAL;
    3ec0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3ec4:	4630      	mov	r0, r6
    3ec6:	b005      	add	sp, #20
    3ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ecc:	0000d418 	.word	0x0000d418
    3ed0:	0000c174 	.word	0x0000c174

00003ed4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3ed4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3ed6:	4c03      	ldr	r4, [pc, #12]	; (3ee4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3ed8:	2301      	movs	r3, #1
    3eda:	7822      	ldrb	r2, [r4, #0]
    3edc:	f7ff ffc2 	bl	3e64 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3ee0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3ee2:	bd10      	pop	{r4, pc}
    3ee4:	20001385 	.word	0x20001385

00003ee8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3ee8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3eea:	2300      	movs	r3, #0
    3eec:	4a09      	ldr	r2, [pc, #36]	; (3f14 <mpu_configure_dynamic_mpu_regions+0x2c>)
    3eee:	7812      	ldrb	r2, [r2, #0]
    3ef0:	f7ff ffb8 	bl	3e64 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3ef4:	f110 0f16 	cmn.w	r0, #22
    3ef8:	d00a      	beq.n	3f10 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3efa:	4603      	mov	r3, r0
    3efc:	e006      	b.n	3f0c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    3efe:	4a06      	ldr	r2, [pc, #24]	; (3f18 <mpu_configure_dynamic_mpu_regions+0x30>)
    3f00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3f04:	2100      	movs	r1, #0
    3f06:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3f0a:	3301      	adds	r3, #1
    3f0c:	2b07      	cmp	r3, #7
    3f0e:	ddf6      	ble.n	3efe <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    3f10:	bd08      	pop	{r3, pc}
    3f12:	bf00      	nop
    3f14:	20001385 	.word	0x20001385
    3f18:	e000ed00 	.word	0xe000ed00

00003f1c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3f1c:	4b04      	ldr	r3, [pc, #16]	; (3f30 <arm_core_mpu_enable+0x14>)
    3f1e:	2205      	movs	r2, #5
    3f20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f28:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	e000ed00 	.word	0xe000ed00

00003f34 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3f34:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3f38:	4b02      	ldr	r3, [pc, #8]	; (3f44 <arm_core_mpu_disable+0x10>)
    3f3a:	2200      	movs	r2, #0
    3f3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3f40:	4770      	bx	lr
    3f42:	bf00      	nop
    3f44:	e000ed00 	.word	0xe000ed00

00003f48 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3f48:	b538      	push	{r3, r4, r5, lr}
    3f4a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3f4c:	f7ff ffc2 	bl	3ed4 <mpu_configure_static_mpu_regions>
    3f50:	f110 0f16 	cmn.w	r0, #22
    3f54:	d000      	beq.n	3f58 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3f56:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3f58:	4d08      	ldr	r5, [pc, #32]	; (3f7c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3f5a:	f240 1311 	movw	r3, #273	; 0x111
    3f5e:	462a      	mov	r2, r5
    3f60:	4907      	ldr	r1, [pc, #28]	; (3f80 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3f62:	4808      	ldr	r0, [pc, #32]	; (3f84 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3f64:	f006 ffff 	bl	af66 <assert_print>
    3f68:	4621      	mov	r1, r4
    3f6a:	4807      	ldr	r0, [pc, #28]	; (3f88 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3f6c:	f006 fffb 	bl	af66 <assert_print>
    3f70:	f240 1111 	movw	r1, #273	; 0x111
    3f74:	4628      	mov	r0, r5
    3f76:	f006 ffef 	bl	af58 <assert_post_action>
}
    3f7a:	e7ec      	b.n	3f56 <arm_core_mpu_configure_static_mpu_regions+0xe>
    3f7c:	0000d43c 	.word	0x0000d43c
    3f80:	0000cc7c 	.word	0x0000cc7c
    3f84:	0000c5c0 	.word	0x0000c5c0
    3f88:	0000d474 	.word	0x0000d474

00003f8c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3f8c:	b538      	push	{r3, r4, r5, lr}
    3f8e:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    3f90:	f7ff ffaa 	bl	3ee8 <mpu_configure_dynamic_mpu_regions>
    3f94:	f110 0f16 	cmn.w	r0, #22
    3f98:	d000      	beq.n	3f9c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3f9a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3f9c:	4d08      	ldr	r5, [pc, #32]	; (3fc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    3f9e:	f44f 7398 	mov.w	r3, #304	; 0x130
    3fa2:	462a      	mov	r2, r5
    3fa4:	4907      	ldr	r1, [pc, #28]	; (3fc4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    3fa6:	4808      	ldr	r0, [pc, #32]	; (3fc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    3fa8:	f006 ffdd 	bl	af66 <assert_print>
    3fac:	4621      	mov	r1, r4
    3fae:	4807      	ldr	r0, [pc, #28]	; (3fcc <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    3fb0:	f006 ffd9 	bl	af66 <assert_print>
    3fb4:	f44f 7198 	mov.w	r1, #304	; 0x130
    3fb8:	4628      	mov	r0, r5
    3fba:	f006 ffcd 	bl	af58 <assert_post_action>
}
    3fbe:	e7ec      	b.n	3f9a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    3fc0:	0000d43c 	.word	0x0000d43c
    3fc4:	0000cc7c 	.word	0x0000cc7c
    3fc8:	0000c5c0 	.word	0x0000c5c0
    3fcc:	0000d4a0 	.word	0x0000d4a0

00003fd0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3fd0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3fd2:	4b24      	ldr	r3, [pc, #144]	; (4064 <z_arm_mpu_init+0x94>)
    3fd4:	681d      	ldr	r5, [r3, #0]
    3fd6:	2d08      	cmp	r5, #8
    3fd8:	d803      	bhi.n	3fe2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3fda:	f7ff ffab 	bl	3f34 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3fde:	2400      	movs	r4, #0
    3fe0:	e01e      	b.n	4020 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    3fe2:	4c21      	ldr	r4, [pc, #132]	; (4068 <z_arm_mpu_init+0x98>)
    3fe4:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3fe8:	4622      	mov	r2, r4
    3fea:	4920      	ldr	r1, [pc, #128]	; (406c <z_arm_mpu_init+0x9c>)
    3fec:	4820      	ldr	r0, [pc, #128]	; (4070 <z_arm_mpu_init+0xa0>)
    3fee:	f006 ffba 	bl	af66 <assert_print>
    3ff2:	2208      	movs	r2, #8
    3ff4:	4629      	mov	r1, r5
    3ff6:	481f      	ldr	r0, [pc, #124]	; (4074 <z_arm_mpu_init+0xa4>)
    3ff8:	f006 ffb5 	bl	af66 <assert_print>
    3ffc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4000:	4620      	mov	r0, r4
    4002:	f006 ffa9 	bl	af58 <assert_post_action>
		return -1;
    4006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    400a:	e017      	b.n	403c <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    400c:	4b15      	ldr	r3, [pc, #84]	; (4064 <z_arm_mpu_init+0x94>)
    400e:	6859      	ldr	r1, [r3, #4]
    4010:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4014:	0093      	lsls	r3, r2, #2
    4016:	4419      	add	r1, r3
    4018:	4620      	mov	r0, r4
    401a:	f7ff fef3 	bl	3e04 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    401e:	3401      	adds	r4, #1
    4020:	42a5      	cmp	r5, r4
    4022:	d8f3      	bhi.n	400c <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4024:	4b14      	ldr	r3, [pc, #80]	; (4078 <z_arm_mpu_init+0xa8>)
    4026:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4028:	f7ff ff78 	bl	3f1c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    402c:	4b13      	ldr	r3, [pc, #76]	; (407c <z_arm_mpu_init+0xac>)
    402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    4032:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4036:	2b08      	cmp	r3, #8
    4038:	d101      	bne.n	403e <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    403a:	2000      	movs	r0, #0
}
    403c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    403e:	4c0a      	ldr	r4, [pc, #40]	; (4068 <z_arm_mpu_init+0x98>)
    4040:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4044:	4622      	mov	r2, r4
    4046:	490e      	ldr	r1, [pc, #56]	; (4080 <z_arm_mpu_init+0xb0>)
    4048:	4809      	ldr	r0, [pc, #36]	; (4070 <z_arm_mpu_init+0xa0>)
    404a:	f006 ff8c 	bl	af66 <assert_print>
    404e:	480d      	ldr	r0, [pc, #52]	; (4084 <z_arm_mpu_init+0xb4>)
    4050:	f006 ff89 	bl	af66 <assert_print>
    4054:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4058:	4620      	mov	r0, r4
    405a:	f006 ff7d 	bl	af58 <assert_post_action>
	return 0;
    405e:	2000      	movs	r0, #0
    4060:	e7ec      	b.n	403c <z_arm_mpu_init+0x6c>
    4062:	bf00      	nop
    4064:	0000d588 	.word	0x0000d588
    4068:	0000d43c 	.word	0x0000d43c
    406c:	0000cc7c 	.word	0x0000cc7c
    4070:	0000c5c0 	.word	0x0000c5c0
    4074:	0000d4d0 	.word	0x0000d4d0
    4078:	20001385 	.word	0x20001385
    407c:	e000ed00 	.word	0xe000ed00
    4080:	0000d504 	.word	0x0000d504
    4084:	0000d554 	.word	0x0000d554

00004088 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4088:	4b01      	ldr	r3, [pc, #4]	; (4090 <__stdout_hook_install+0x8>)
    408a:	6018      	str	r0, [r3, #0]
}
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	200000c4 	.word	0x200000c4

00004094 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4094:	3902      	subs	r1, #2
    4096:	2901      	cmp	r1, #1
    4098:	d804      	bhi.n	40a4 <z_impl_zephyr_fputc+0x10>
{
    409a:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    409c:	4b03      	ldr	r3, [pc, #12]	; (40ac <z_impl_zephyr_fputc+0x18>)
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	4798      	blx	r3
}
    40a2:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    40a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    40a8:	4770      	bx	lr
    40aa:	bf00      	nop
    40ac:	200000c4 	.word	0x200000c4

000040b0 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    40b0:	b40f      	push	{r0, r1, r2, r3}
    40b2:	b500      	push	{lr}
    40b4:	b083      	sub	sp, #12
    40b6:	ab04      	add	r3, sp, #16
    40b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    40bc:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    40be:	2102      	movs	r1, #2
    40c0:	4803      	ldr	r0, [pc, #12]	; (40d0 <printf+0x20>)
    40c2:	f7fd fe13 	bl	1cec <cbvprintf>
	va_end(vargs);

	return r;
}
    40c6:	b003      	add	sp, #12
    40c8:	f85d eb04 	ldr.w	lr, [sp], #4
    40cc:	b004      	add	sp, #16
    40ce:	4770      	bx	lr
    40d0:	0000b337 	.word	0x0000b337

000040d4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    40d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    40d6:	f04f 0320 	mov.w	r3, #32
    40da:	f3ef 8411 	mrs	r4, BASEPRI
    40de:	f383 8812 	msr	BASEPRI_MAX, r3
    40e2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    40e6:	2301      	movs	r3, #1
    40e8:	4a0c      	ldr	r2, [pc, #48]	; (411c <nordicsemi_nrf52_init+0x48>)
    40ea:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    40ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    40f2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    40f6:	f007 f922 	bl	b33e <nrf52_errata_197>
    40fa:	b120      	cbz	r0, 4106 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    40fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4100:	2201      	movs	r2, #1
    4102:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    410a:	2201      	movs	r2, #1
    410c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4110:	f384 8811 	msr	BASEPRI, r4
    4114:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4118:	2000      	movs	r0, #0
    411a:	bd10      	pop	{r4, pc}
    411c:	4001e000 	.word	0x4001e000

00004120 <sys_arch_reboot>:
    *p_gpregret = val;
    4120:	b2c0      	uxtb	r0, r0
    4122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4126:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    412a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    412e:	4905      	ldr	r1, [pc, #20]	; (4144 <sys_arch_reboot+0x24>)
    4130:	68ca      	ldr	r2, [r1, #12]
    4132:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4136:	4b04      	ldr	r3, [pc, #16]	; (4148 <sys_arch_reboot+0x28>)
    4138:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    413a:	60cb      	str	r3, [r1, #12]
    413c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4140:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4142:	e7fd      	b.n	4140 <sys_arch_reboot+0x20>
    4144:	e000ed00 	.word	0xe000ed00
    4148:	05fa0004 	.word	0x05fa0004

0000414c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    414c:	b130      	cbz	r0, 415c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    414e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4150:	0180      	lsls	r0, r0, #6
    4152:	4b03      	ldr	r3, [pc, #12]	; (4160 <arch_busy_wait+0x14>)
    4154:	f043 0301 	orr.w	r3, r3, #1
    4158:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    415a:	bd08      	pop	{r3, pc}
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	0000c230 	.word	0x0000c230

00004164 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <adc_context_start_sampling+0x20>)
    4166:	2201      	movs	r2, #1
    4168:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    416c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    4170:	b113      	cbz	r3, 4178 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4172:	4b04      	ldr	r3, [pc, #16]	; (4184 <adc_context_start_sampling+0x20>)
    4174:	60da      	str	r2, [r3, #12]
}
    4176:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4178:	4b02      	ldr	r3, [pc, #8]	; (4184 <adc_context_start_sampling+0x20>)
    417a:	2201      	movs	r2, #1
    417c:	601a      	str	r2, [r3, #0]
    417e:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    4180:	4770      	bx	lr
    4182:	bf00      	nop
    4184:	40007000 	.word	0x40007000

00004188 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    4188:	b949      	cbnz	r1, 419e <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    418a:	4b05      	ldr	r3, [pc, #20]	; (41a0 <adc_context_update_buffer_pointer+0x18>)
    418c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    4190:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    4194:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    4196:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    419a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    419e:	4770      	bx	lr
    41a0:	40007000 	.word	0x40007000

000041a4 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    41a4:	7c02      	ldrb	r2, [r0, #16]
    41a6:	f1a2 0308 	sub.w	r3, r2, #8
    41aa:	2b06      	cmp	r3, #6
    41ac:	d80d      	bhi.n	41ca <set_resolution+0x26>
    41ae:	e8df f003 	tbb	[pc, r3]
    41b2:	0c1e      	.short	0x0c1e
    41b4:	0c040c20 	.word	0x0c040c20
    41b8:	0a          	.byte	0x0a
    41b9:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    41ba:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    41bc:	4b0e      	ldr	r3, [pc, #56]	; (41f8 <set_resolution+0x54>)
    41be:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    41c2:	2000      	movs	r0, #0
}
    41c4:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    41c6:	2203      	movs	r2, #3
		break;
    41c8:	e7f8      	b.n	41bc <set_resolution+0x18>
{
    41ca:	b500      	push	{lr}
    41cc:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    41ce:	9203      	str	r2, [sp, #12]
    41d0:	4b0a      	ldr	r3, [pc, #40]	; (41fc <set_resolution+0x58>)
    41d2:	9302      	str	r3, [sp, #8]
    41d4:	2000      	movs	r0, #0
    41d6:	9001      	str	r0, [sp, #4]
    41d8:	9000      	str	r0, [sp, #0]
    41da:	4603      	mov	r3, r0
    41dc:	2201      	movs	r2, #1
    41de:	4908      	ldr	r1, [pc, #32]	; (4200 <set_resolution+0x5c>)
    41e0:	f007 f8e4 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    41e4:	f06f 0015 	mvn.w	r0, #21
}
    41e8:	b005      	add	sp, #20
    41ea:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    41ee:	2200      	movs	r2, #0
    41f0:	e7e4      	b.n	41bc <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    41f2:	2201      	movs	r2, #1
    41f4:	e7e2      	b.n	41bc <set_resolution+0x18>
    41f6:	bf00      	nop
    41f8:	40007000 	.word	0x40007000
    41fc:	0000d5ac 	.word	0x0000d5ac
    4200:	0000c14c 	.word	0x0000c14c

00004204 <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    4204:	b500      	push	{lr}
    4206:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    4208:	2901      	cmp	r1, #1
    420a:	d901      	bls.n	4210 <set_oversampling+0xc>
    420c:	7c43      	ldrb	r3, [r0, #17]
    420e:	b94b      	cbnz	r3, 4224 <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    4210:	7c43      	ldrb	r3, [r0, #17]
    4212:	2b08      	cmp	r3, #8
    4214:	d813      	bhi.n	423e <set_oversampling+0x3a>
    4216:	e8df f003 	tbb	[pc, r3]
    421a:	2020      	.short	0x2020
    421c:	20202020 	.word	0x20202020
    4220:	2020      	.short	0x2020
    4222:	20          	.byte	0x20
    4223:	00          	.byte	0x00
		LOG_ERR(
    4224:	4b10      	ldr	r3, [pc, #64]	; (4268 <set_oversampling+0x64>)
    4226:	9302      	str	r3, [sp, #8]
    4228:	2000      	movs	r0, #0
    422a:	9001      	str	r0, [sp, #4]
    422c:	9000      	str	r0, [sp, #0]
    422e:	4603      	mov	r3, r0
    4230:	2201      	movs	r2, #1
    4232:	490e      	ldr	r1, [pc, #56]	; (426c <set_oversampling+0x68>)
    4234:	f007 f8ba 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    4238:	f06f 0015 	mvn.w	r0, #21
    423c:	e011      	b.n	4262 <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    423e:	9303      	str	r3, [sp, #12]
    4240:	4b0b      	ldr	r3, [pc, #44]	; (4270 <set_oversampling+0x6c>)
    4242:	9302      	str	r3, [sp, #8]
    4244:	2000      	movs	r0, #0
    4246:	9001      	str	r0, [sp, #4]
    4248:	9000      	str	r0, [sp, #0]
    424a:	4603      	mov	r3, r0
    424c:	2201      	movs	r2, #1
    424e:	4907      	ldr	r1, [pc, #28]	; (426c <set_oversampling+0x68>)
    4250:	f007 f8ac 	bl	b3ac <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    4254:	f06f 0015 	mvn.w	r0, #21
    4258:	e003      	b.n	4262 <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    425a:	4a06      	ldr	r2, [pc, #24]	; (4274 <set_oversampling+0x70>)
    425c:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    4260:	2000      	movs	r0, #0
}
    4262:	b005      	add	sp, #20
    4264:	f85d fb04 	ldr.w	pc, [sp], #4
    4268:	0000d5d4 	.word	0x0000d5d4
    426c:	0000c14c 	.word	0x0000c14c
    4270:	0000d608 	.word	0x0000d608
    4274:	40007000 	.word	0x40007000

00004278 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    4278:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    427a:	6803      	ldr	r3, [r0, #0]
    427c:	b113      	cbz	r3, 4284 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    427e:	899b      	ldrh	r3, [r3, #12]
    4280:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    4284:	68c3      	ldr	r3, [r0, #12]
    4286:	428b      	cmp	r3, r1
    4288:	d301      	bcc.n	428e <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    428a:	2000      	movs	r0, #0
}
    428c:	4770      	bx	lr
{
    428e:	b500      	push	{lr}
    4290:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    4292:	9104      	str	r1, [sp, #16]
    4294:	9303      	str	r3, [sp, #12]
    4296:	4b07      	ldr	r3, [pc, #28]	; (42b4 <check_buffer_size+0x3c>)
    4298:	9302      	str	r3, [sp, #8]
    429a:	2000      	movs	r0, #0
    429c:	9001      	str	r0, [sp, #4]
    429e:	9000      	str	r0, [sp, #0]
    42a0:	4603      	mov	r3, r0
    42a2:	2201      	movs	r2, #1
    42a4:	4904      	ldr	r1, [pc, #16]	; (42b8 <check_buffer_size+0x40>)
    42a6:	f007 f881 	bl	b3ac <z_log_msg2_runtime_create>
		return -ENOMEM;
    42aa:	f06f 000b 	mvn.w	r0, #11
}
    42ae:	b007      	add	sp, #28
    42b0:	f85d fb04 	ldr.w	pc, [sp], #4
    42b4:	0000d62c 	.word	0x0000d62c
    42b8:	0000c14c 	.word	0x0000c14c

000042bc <adc_nrfx_channel_setup>:
{
    42bc:	b510      	push	{r4, lr}
    42be:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    42c0:	2300      	movs	r3, #0
    42c2:	9304      	str	r3, [sp, #16]
    42c4:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    42c8:	790a      	ldrb	r2, [r1, #4]
    42ca:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    42ce:	2a07      	cmp	r2, #7
    42d0:	f200 80d0 	bhi.w	4474 <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    42d4:	780b      	ldrb	r3, [r1, #0]
    42d6:	2b09      	cmp	r3, #9
    42d8:	d833      	bhi.n	4342 <adc_nrfx_channel_setup+0x86>
    42da:	e8df f003 	tbb	[pc, r3]
    42de:	0508      	.short	0x0508
    42e0:	32221e1a 	.word	0x32221e1a
    42e4:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    42e8:	2301      	movs	r3, #1
    42ea:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    42ee:	784b      	ldrb	r3, [r1, #1]
    42f0:	2b03      	cmp	r3, #3
    42f2:	d033      	beq.n	435c <adc_nrfx_channel_setup+0xa0>
    42f4:	2b04      	cmp	r3, #4
    42f6:	d034      	beq.n	4362 <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    42f8:	4b60      	ldr	r3, [pc, #384]	; (447c <adc_nrfx_channel_setup+0x1c0>)
    42fa:	9302      	str	r3, [sp, #8]
    42fc:	2000      	movs	r0, #0
    42fe:	9001      	str	r0, [sp, #4]
    4300:	9000      	str	r0, [sp, #0]
    4302:	4603      	mov	r3, r0
    4304:	2201      	movs	r2, #1
    4306:	495e      	ldr	r1, [pc, #376]	; (4480 <adc_nrfx_channel_setup+0x1c4>)
    4308:	f007 f850 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    430c:	f06f 0015 	mvn.w	r0, #21
    4310:	e091      	b.n	4436 <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    4312:	2302      	movs	r3, #2
    4314:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4318:	e7e9      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    431a:	2303      	movs	r3, #3
    431c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4320:	e7e5      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    4322:	2304      	movs	r3, #4
    4324:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4328:	e7e1      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    432a:	2305      	movs	r3, #5
    432c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4330:	e7dd      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    4332:	2306      	movs	r3, #6
    4334:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4338:	e7d9      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    433a:	2307      	movs	r3, #7
    433c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4340:	e7d5      	b.n	42ee <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    4342:	4b50      	ldr	r3, [pc, #320]	; (4484 <adc_nrfx_channel_setup+0x1c8>)
    4344:	9302      	str	r3, [sp, #8]
    4346:	2000      	movs	r0, #0
    4348:	9001      	str	r0, [sp, #4]
    434a:	9000      	str	r0, [sp, #0]
    434c:	4603      	mov	r3, r0
    434e:	2201      	movs	r2, #1
    4350:	494b      	ldr	r1, [pc, #300]	; (4480 <adc_nrfx_channel_setup+0x1c4>)
    4352:	f007 f82b 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    4356:	f06f 0015 	mvn.w	r0, #21
    435a:	e06c      	b.n	4436 <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    435c:	2301      	movs	r3, #1
    435e:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    4362:	884b      	ldrh	r3, [r1, #2]
    4364:	2b00      	cmp	r3, #0
    4366:	d068      	beq.n	443a <adc_nrfx_channel_setup+0x17e>
    4368:	f244 0028 	movw	r0, #16424	; 0x4028
    436c:	4283      	cmp	r3, r0
    436e:	d874      	bhi.n	445a <adc_nrfx_channel_setup+0x19e>
    4370:	f244 0003 	movw	r0, #16387	; 0x4003
    4374:	4283      	cmp	r3, r0
    4376:	d370      	bcc.n	445a <adc_nrfx_channel_setup+0x19e>
    4378:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    437c:	3b03      	subs	r3, #3
    437e:	2b25      	cmp	r3, #37	; 0x25
    4380:	d86b      	bhi.n	445a <adc_nrfx_channel_setup+0x19e>
    4382:	e8df f003 	tbb	[pc, r3]
    4386:	6a16      	.short	0x6a16
    4388:	6a6a6a13 	.word	0x6a6a6a13
    438c:	6a6a5a6a 	.word	0x6a6a5a6a
    4390:	6a5e6a6a 	.word	0x6a5e6a6a
    4394:	626a6a6a 	.word	0x626a6a6a
    4398:	6a6a6a6a 	.word	0x6a6a6a6a
    439c:	6a6a6a6a 	.word	0x6a6a6a6a
    43a0:	6a6a6a6a 	.word	0x6a6a6a6a
    43a4:	6a6a6a6a 	.word	0x6a6a6a6a
    43a8:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    43ac:	2301      	movs	r3, #1
    43ae:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    43b2:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    43b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    43b8:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    43bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    43c0:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    43c4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    43c8:	0100      	lsls	r0, r0, #4
    43ca:	f000 0030 	and.w	r0, r0, #48	; 0x30
    43ce:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    43d0:	f89d 0012 	ldrb.w	r0, [sp, #18]
    43d4:	0200      	lsls	r0, r0, #8
    43d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    43da:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    43dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
    43e0:	0300      	lsls	r0, r0, #12
    43e2:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    43e6:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    43e8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    43ec:	0400      	lsls	r0, r0, #16
    43ee:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    43f2:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    43f4:	f89d 0015 	ldrb.w	r0, [sp, #21]
    43f8:	0500      	lsls	r0, r0, #20
    43fa:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    43fe:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    4400:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4404:	0600      	lsls	r0, r0, #24
    4406:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    440a:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    440c:	4c1e      	ldr	r4, [pc, #120]	; (4488 <adc_nrfx_channel_setup+0x1cc>)
    440e:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    4412:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    4416:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    4418:	f102 0351 	add.w	r3, r2, #81	; 0x51
    441c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    4420:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    4424:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    4426:	2000      	movs	r0, #0
    4428:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    442c:	7949      	ldrb	r1, [r1, #5]
    442e:	4b17      	ldr	r3, [pc, #92]	; (448c <adc_nrfx_channel_setup+0x1d0>)
    4430:	441a      	add	r2, r3
    4432:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    4436:	b006      	add	sp, #24
    4438:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    443a:	2302      	movs	r3, #2
    443c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    4440:	e7b7      	b.n	43b2 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    4442:	2303      	movs	r3, #3
    4444:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    4448:	e7b3      	b.n	43b2 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    444a:	2304      	movs	r3, #4
    444c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    4450:	e7af      	b.n	43b2 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    4452:	2305      	movs	r3, #5
    4454:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    4458:	e7ab      	b.n	43b2 <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    445a:	4b0d      	ldr	r3, [pc, #52]	; (4490 <adc_nrfx_channel_setup+0x1d4>)
    445c:	9302      	str	r3, [sp, #8]
    445e:	2000      	movs	r0, #0
    4460:	9001      	str	r0, [sp, #4]
    4462:	9000      	str	r0, [sp, #0]
    4464:	4603      	mov	r3, r0
    4466:	2201      	movs	r2, #1
    4468:	4905      	ldr	r1, [pc, #20]	; (4480 <adc_nrfx_channel_setup+0x1c4>)
    446a:	f006 ff9f 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    446e:	f06f 0015 	mvn.w	r0, #21
    4472:	e7e0      	b.n	4436 <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    4474:	f06f 0015 	mvn.w	r0, #21
    4478:	e7dd      	b.n	4436 <adc_nrfx_channel_setup+0x17a>
    447a:	bf00      	nop
    447c:	0000d674 	.word	0x0000d674
    4480:	0000c14c 	.word	0x0000c14c
    4484:	0000d654 	.word	0x0000d654
    4488:	40007000 	.word	0x40007000
    448c:	20000000 	.word	0x20000000
    4490:	0000d698 	.word	0x0000d698

00004494 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    4494:	b5f0      	push	{r4, r5, r6, r7, lr}
    4496:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    4498:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    449a:	b136      	cbz	r6, 44aa <start_read+0x16>
    449c:	460d      	mov	r5, r1
    449e:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    44a2:	d102      	bne.n	44aa <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    44a4:	2300      	movs	r3, #0
	active_channels = 0U;
    44a6:	461c      	mov	r4, r3
    44a8:	e024      	b.n	44f4 <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    44aa:	4b54      	ldr	r3, [pc, #336]	; (45fc <start_read+0x168>)
    44ac:	9302      	str	r3, [sp, #8]
    44ae:	2000      	movs	r0, #0
    44b0:	9001      	str	r0, [sp, #4]
    44b2:	9000      	str	r0, [sp, #0]
    44b4:	4603      	mov	r3, r0
    44b6:	2201      	movs	r2, #1
    44b8:	4951      	ldr	r1, [pc, #324]	; (4600 <start_read+0x16c>)
    44ba:	f006 ff77 	bl	b3ac <z_log_msg2_runtime_create>
		return -EINVAL;
    44be:	f06f 0315 	mvn.w	r3, #21
    44c2:	e03f      	b.n	4544 <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    44c4:	9303      	str	r3, [sp, #12]
    44c6:	4b4f      	ldr	r3, [pc, #316]	; (4604 <start_read+0x170>)
    44c8:	9302      	str	r3, [sp, #8]
    44ca:	2000      	movs	r0, #0
    44cc:	9001      	str	r0, [sp, #4]
    44ce:	9000      	str	r0, [sp, #0]
    44d0:	4603      	mov	r3, r0
    44d2:	2201      	movs	r2, #1
    44d4:	494a      	ldr	r1, [pc, #296]	; (4600 <start_read+0x16c>)
    44d6:	f006 ff69 	bl	b3ac <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    44da:	f06f 0315 	mvn.w	r3, #21
    44de:	e031      	b.n	4544 <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    44e0:	f103 0251 	add.w	r2, r3, #81	; 0x51
    44e4:	0112      	lsls	r2, r2, #4
    44e6:	4948      	ldr	r1, [pc, #288]	; (4608 <start_read+0x174>)
    44e8:	2000      	movs	r0, #0
    44ea:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    44ec:	3301      	adds	r3, #1
    44ee:	b2db      	uxtb	r3, r3
    44f0:	2b07      	cmp	r3, #7
    44f2:	d822      	bhi.n	453a <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    44f4:	461a      	mov	r2, r3
    44f6:	fa26 f103 	lsr.w	r1, r6, r3
    44fa:	f011 0f01 	tst.w	r1, #1
    44fe:	d0ef      	beq.n	44e0 <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    4500:	4942      	ldr	r1, [pc, #264]	; (460c <start_read+0x178>)
    4502:	4419      	add	r1, r3
    4504:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    4508:	2f00      	cmp	r7, #0
    450a:	d0db      	beq.n	44c4 <start_read+0x30>
				(sequence->oversampling != 0U ?
    450c:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    450e:	1e01      	subs	r1, r0, #0
    4510:	bf18      	it	ne
    4512:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    4514:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 4608 <start_read+0x174>
    4518:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    451c:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    4520:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    4524:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    4528:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    452c:	3251      	adds	r2, #81	; 0x51
    452e:	0112      	lsls	r2, r2, #4
    4530:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    4534:	3401      	adds	r4, #1
    4536:	b2e4      	uxtb	r4, r4
    4538:	e7d8      	b.n	44ec <start_read+0x58>

	error = set_resolution(sequence);
    453a:	4628      	mov	r0, r5
    453c:	f7ff fe32 	bl	41a4 <set_resolution>
	if (error) {
    4540:	4603      	mov	r3, r0
    4542:	b110      	cbz	r0, 454a <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    4544:	4618      	mov	r0, r3
    4546:	b005      	add	sp, #20
    4548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    454a:	4621      	mov	r1, r4
    454c:	4628      	mov	r0, r5
    454e:	f7ff fe59 	bl	4204 <set_oversampling>
	if (error) {
    4552:	4603      	mov	r3, r0
    4554:	2800      	cmp	r0, #0
    4556:	d1f5      	bne.n	4544 <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    4558:	4621      	mov	r1, r4
    455a:	4628      	mov	r0, r5
    455c:	f7ff fe8c 	bl	4278 <check_buffer_size>
	if (error) {
    4560:	4603      	mov	r3, r0
    4562:	2800      	cmp	r0, #0
    4564:	d1ee      	bne.n	4544 <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    4566:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    4568:	4b27      	ldr	r3, [pc, #156]	; (4608 <start_read+0x174>)
    456a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    456e:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    4572:	4f26      	ldr	r7, [pc, #152]	; (460c <start_read+0x178>)
    4574:	f107 0464 	add.w	r4, r7, #100	; 0x64
    4578:	462e      	mov	r6, r5
    457a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    457c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    457e:	6833      	ldr	r3, [r6, #0]
    4580:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    4582:	2300      	movs	r3, #0
    4584:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    4586:	682b      	ldr	r3, [r5, #0]
    4588:	b14b      	cbz	r3, 459e <start_read+0x10a>
		ctx->options = *sequence->options;
    458a:	f107 0478 	add.w	r4, r7, #120	; 0x78
    458e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    4594:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    4596:	2300      	movs	r3, #0
    4598:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    459c:	b968      	cbnz	r0, 45ba <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    459e:	481b      	ldr	r0, [pc, #108]	; (460c <start_read+0x178>)
    45a0:	f7ff fde0 	bl	4164 <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    45a4:	4c19      	ldr	r4, [pc, #100]	; (460c <start_read+0x178>)
    45a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
    45b2:	f004 f8b1 	bl	8718 <z_impl_k_sem_take>
	return ctx->status;
    45b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    45b8:	e7c4      	b.n	4544 <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    45ba:	463c      	mov	r4, r7
    45bc:	2300      	movs	r3, #0
    45be:	f3bf 8f5b 	dmb	ish
    45c2:	e854 2f00 	ldrex	r2, [r4]
    45c6:	e844 3100 	strex	r1, r3, [r4]
    45ca:	2900      	cmp	r1, #0
    45cc:	d1f9      	bne.n	45c2 <start_read+0x12e>
    45ce:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    45d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    45d4:	0c59      	lsrs	r1, r3, #17
    45d6:	03db      	lsls	r3, r3, #15
    45d8:	480d      	ldr	r0, [pc, #52]	; (4610 <start_read+0x17c>)
    45da:	1818      	adds	r0, r3, r0
    45dc:	4a0d      	ldr	r2, [pc, #52]	; (4614 <start_read+0x180>)
    45de:	f04f 0300 	mov.w	r3, #0
    45e2:	f141 0100 	adc.w	r1, r1, #0
    45e6:	f7fb ff6d 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    45ea:	9000      	str	r0, [sp, #0]
    45ec:	9101      	str	r1, [sp, #4]
    45ee:	2200      	movs	r2, #0
    45f0:	2300      	movs	r3, #0
    45f2:	f104 0008 	add.w	r0, r4, #8
    45f6:	f006 f863 	bl	a6c0 <z_impl_k_timer_start>
}
    45fa:	e7d3      	b.n	45a4 <start_read+0x110>
    45fc:	0000d6c4 	.word	0x0000d6c4
    4600:	0000c14c 	.word	0x0000c14c
    4604:	0000d6e4 	.word	0x0000d6e4
    4608:	40007000 	.word	0x40007000
    460c:	20000000 	.word	0x20000000
    4610:	000f423f 	.word	0x000f423f
    4614:	000f4240 	.word	0x000f4240

00004618 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    4618:	b570      	push	{r4, r5, r6, lr}
    461a:	4604      	mov	r4, r0
    461c:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    461e:	4e09      	ldr	r6, [pc, #36]	; (4644 <adc_nrfx_read+0x2c>)
    4620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4628:	4630      	mov	r0, r6
    462a:	f004 f875 	bl	8718 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    462e:	4629      	mov	r1, r5
    4630:	4620      	mov	r0, r4
    4632:	f7ff ff2f 	bl	4494 <start_read>
    4636:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    4638:	4630      	mov	r0, r6
    463a:	f004 f829 	bl	8690 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    463e:	4620      	mov	r0, r4
    4640:	bd70      	pop	{r4, r5, r6, pc}
    4642:	bf00      	nop
    4644:	20000040 	.word	0x20000040

00004648 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    4648:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    464a:	4b0f      	ldr	r3, [pc, #60]	; (4688 <init_saadc+0x40>)
    464c:	2400      	movs	r4, #0
    464e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4652:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4656:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    465a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    465e:	2212      	movs	r2, #18
    4660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    4664:	2007      	movs	r0, #7
    4666:	f7fe fe3b 	bl	32e0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    466a:	4622      	mov	r2, r4
    466c:	2101      	movs	r1, #1
    466e:	2007      	movs	r0, #7
    4670:	f7fe fe52 	bl	3318 <z_arm_irq_priority_set>
	return sem->count;
    4674:	4b05      	ldr	r3, [pc, #20]	; (468c <init_saadc+0x44>)
    4676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    4678:	b10b      	cbz	r3, 467e <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    467a:	2000      	movs	r0, #0
    467c:	bd10      	pop	{r4, pc}
    467e:	4804      	ldr	r0, [pc, #16]	; (4690 <init_saadc+0x48>)
    4680:	f004 f806 	bl	8690 <z_impl_k_sem_give>
}
    4684:	e7f9      	b.n	467a <init_saadc+0x32>
    4686:	bf00      	nop
    4688:	40007000 	.word	0x40007000
    468c:	20000000 	.word	0x20000000
    4690:	20000040 	.word	0x20000040

00004694 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4694:	4b36      	ldr	r3, [pc, #216]	; (4770 <saadc_irq_handler+0xdc>)
    4696:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    469a:	b97b      	cbnz	r3, 46bc <saadc_irq_handler+0x28>
    469c:	4b34      	ldr	r3, [pc, #208]	; (4770 <saadc_irq_handler+0xdc>)
    469e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    46a2:	2b00      	cmp	r3, #0
    46a4:	d062      	beq.n	476c <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46a6:	4b32      	ldr	r3, [pc, #200]	; (4770 <saadc_irq_handler+0xdc>)
    46a8:	2200      	movs	r2, #0
    46aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    46ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46b2:	2201      	movs	r2, #1
    46b4:	609a      	str	r2, [r3, #8]
    46b6:	601a      	str	r2, [r3, #0]
    46b8:	605a      	str	r2, [r3, #4]
}
    46ba:	4770      	bx	lr
{
    46bc:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46be:	4b2c      	ldr	r3, [pc, #176]	; (4770 <saadc_irq_handler+0xdc>)
    46c0:	2200      	movs	r2, #0
    46c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    46c6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46ca:	2101      	movs	r1, #1
    46cc:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    46ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    46d2:	4b28      	ldr	r3, [pc, #160]	; (4774 <saadc_irq_handler+0xe0>)
    46d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    46d6:	b313      	cbz	r3, 471e <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    46d8:	4b26      	ldr	r3, [pc, #152]	; (4774 <saadc_irq_handler+0xe0>)
    46da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    46dc:	b143      	cbz	r3, 46f0 <saadc_irq_handler+0x5c>
			action = callback(dev,
    46de:	4925      	ldr	r1, [pc, #148]	; (4774 <saadc_irq_handler+0xe0>)
    46e0:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    46e4:	3164      	adds	r1, #100	; 0x64
    46e6:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    46e8:	2801      	cmp	r0, #1
    46ea:	d00f      	beq.n	470c <saadc_irq_handler+0x78>
    46ec:	2802      	cmp	r0, #2
    46ee:	d010      	beq.n	4712 <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    46f0:	4a20      	ldr	r2, [pc, #128]	; (4774 <saadc_irq_handler+0xe0>)
    46f2:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    46f6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    46fa:	4293      	cmp	r3, r2
    46fc:	d213      	bcs.n	4726 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    46fe:	3301      	adds	r3, #1
    4700:	4a1c      	ldr	r2, [pc, #112]	; (4774 <saadc_irq_handler+0xe0>)
    4702:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    4706:	2100      	movs	r1, #0
		bool finish = false;
    4708:	460b      	mov	r3, r1
    470a:	e004      	b.n	4716 <saadc_irq_handler+0x82>
		switch (action) {
    470c:	2101      	movs	r1, #1
    470e:	2300      	movs	r3, #0
    4710:	e001      	b.n	4716 <saadc_irq_handler+0x82>
		bool repeat = false;
    4712:	2100      	movs	r1, #0
			finish = true;
    4714:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    4716:	b14b      	cbz	r3, 472c <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    4718:	4b16      	ldr	r3, [pc, #88]	; (4774 <saadc_irq_handler+0xe0>)
    471a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    471c:	bb13      	cbnz	r3, 4764 <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    471e:	4816      	ldr	r0, [pc, #88]	; (4778 <saadc_irq_handler+0xe4>)
    4720:	f003 ffb6 	bl	8690 <z_impl_k_sem_give>
}
    4724:	bd10      	pop	{r4, pc}
		bool repeat = false;
    4726:	2100      	movs	r1, #0
				finish = true;
    4728:	2301      	movs	r3, #1
    472a:	e7f4      	b.n	4716 <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    472c:	4c11      	ldr	r4, [pc, #68]	; (4774 <saadc_irq_handler+0xe0>)
    472e:	4620      	mov	r0, r4
    4730:	f7ff fd2a 	bl	4188 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    4734:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    4736:	b91b      	cbnz	r3, 4740 <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    4738:	4620      	mov	r0, r4
    473a:	f7ff fd13 	bl	4164 <adc_context_start_sampling>
    473e:	e7f1      	b.n	4724 <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4740:	4b0c      	ldr	r3, [pc, #48]	; (4774 <saadc_irq_handler+0xe0>)
    4742:	f3bf 8f5b 	dmb	ish
    4746:	e853 2f00 	ldrex	r2, [r3]
    474a:	1e51      	subs	r1, r2, #1
    474c:	e843 1000 	strex	r0, r1, [r3]
    4750:	2800      	cmp	r0, #0
    4752:	d1f8      	bne.n	4746 <saadc_irq_handler+0xb2>
    4754:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    4758:	2a01      	cmp	r2, #1
    475a:	dde3      	ble.n	4724 <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    475c:	4618      	mov	r0, r3
    475e:	f7ff fd01 	bl	4164 <adc_context_start_sampling>
			return;
    4762:	e7df      	b.n	4724 <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    4764:	4805      	ldr	r0, [pc, #20]	; (477c <saadc_irq_handler+0xe8>)
    4766:	f007 fb84 	bl	be72 <z_impl_k_timer_stop>
}
    476a:	e7d8      	b.n	471e <saadc_irq_handler+0x8a>
    476c:	4770      	bx	lr
    476e:	bf00      	nop
    4770:	40007000 	.word	0x40007000
    4774:	20000000 	.word	0x20000000
    4778:	20000050 	.word	0x20000050
    477c:	20000008 	.word	0x20000008

00004780 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4780:	4800      	ldr	r0, [pc, #0]	; (4784 <get_hf_flags+0x4>)
    4782:	4770      	bx	lr
    4784:	20000c54 	.word	0x20000c54

00004788 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4788:	4b01      	ldr	r3, [pc, #4]	; (4790 <get_subsys+0x8>)
    478a:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    478c:	1140      	asrs	r0, r0, #5
    478e:	4770      	bx	lr
    4790:	20000c0c 	.word	0x20000c0c

00004794 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4794:	b530      	push	{r4, r5, lr}
    4796:	b083      	sub	sp, #12
    4798:	4605      	mov	r5, r0
    479a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    479c:	f7ff fff4 	bl	4788 <get_subsys>
    47a0:	4601      	mov	r1, r0
    47a2:	2340      	movs	r3, #64	; 0x40
    47a4:	9300      	str	r3, [sp, #0]
    47a6:	4623      	mov	r3, r4
    47a8:	4a05      	ldr	r2, [pc, #20]	; (47c0 <onoff_start+0x2c>)
    47aa:	4806      	ldr	r0, [pc, #24]	; (47c4 <onoff_start+0x30>)
    47ac:	f006 fe7a 	bl	b4a4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    47b0:	1e01      	subs	r1, r0, #0
    47b2:	db01      	blt.n	47b8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    47b4:	b003      	add	sp, #12
    47b6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    47b8:	4628      	mov	r0, r5
    47ba:	47a0      	blx	r4
}
    47bc:	e7fa      	b.n	47b4 <onoff_start+0x20>
    47be:	bf00      	nop
    47c0:	0000b4ed 	.word	0x0000b4ed
    47c4:	0000bf3c 	.word	0x0000bf3c

000047c8 <generic_hfclk_stop>:
{
    47c8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47ca:	4b0a      	ldr	r3, [pc, #40]	; (47f4 <generic_hfclk_stop+0x2c>)
    47cc:	f3bf 8f5b 	dmb	ish
    47d0:	e853 2f00 	ldrex	r2, [r3]
    47d4:	f022 0102 	bic.w	r1, r2, #2
    47d8:	e843 1000 	strex	r0, r1, [r3]
    47dc:	2800      	cmp	r0, #0
    47de:	d1f7      	bne.n	47d0 <generic_hfclk_stop+0x8>
    47e0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    47e4:	f012 0f01 	tst.w	r2, #1
    47e8:	d000      	beq.n	47ec <generic_hfclk_stop+0x24>
}
    47ea:	bd08      	pop	{r3, pc}
	hfclk_stop();
    47ec:	f006 fe90 	bl	b510 <hfclk_stop>
    47f0:	e7fb      	b.n	47ea <generic_hfclk_stop+0x22>
    47f2:	bf00      	nop
    47f4:	20000c64 	.word	0x20000c64

000047f8 <get_status>:
{
    47f8:	b570      	push	{r4, r5, r6, lr}
    47fa:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    47fc:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    47fe:	2c01      	cmp	r4, #1
    4800:	d807      	bhi.n	4812 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4802:	4621      	mov	r1, r4
    4804:	4628      	mov	r0, r5
    4806:	f006 fde0 	bl	b3ca <get_sub_data>
    480a:	6880      	ldr	r0, [r0, #8]
}
    480c:	f000 0007 	and.w	r0, r0, #7
    4810:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4812:	4e06      	ldr	r6, [pc, #24]	; (482c <get_status+0x34>)
    4814:	2379      	movs	r3, #121	; 0x79
    4816:	4632      	mov	r2, r6
    4818:	4905      	ldr	r1, [pc, #20]	; (4830 <get_status+0x38>)
    481a:	4806      	ldr	r0, [pc, #24]	; (4834 <get_status+0x3c>)
    481c:	f006 fba3 	bl	af66 <assert_print>
    4820:	2179      	movs	r1, #121	; 0x79
    4822:	4630      	mov	r0, r6
    4824:	f006 fb98 	bl	af58 <assert_post_action>
    4828:	e7eb      	b.n	4802 <get_status+0xa>
    482a:	bf00      	nop
    482c:	0000d71c 	.word	0x0000d71c
    4830:	0000d75c 	.word	0x0000d75c
    4834:	0000c5c0 	.word	0x0000c5c0

00004838 <stop>:
{
    4838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    483c:	4607      	mov	r7, r0
    483e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4840:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4842:	4621      	mov	r1, r4
    4844:	f006 fdc1 	bl	b3ca <get_sub_data>
    4848:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    484a:	2c01      	cmp	r4, #1
    484c:	d80f      	bhi.n	486e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    484e:	4631      	mov	r1, r6
    4850:	f105 0008 	add.w	r0, r5, #8
    4854:	f006 fdca 	bl	b3ec <set_off_state>
	if (err < 0) {
    4858:	2800      	cmp	r0, #0
    485a:	db06      	blt.n	486a <stop+0x32>
	get_sub_config(dev, type)->stop();
    485c:	4621      	mov	r1, r4
    485e:	4638      	mov	r0, r7
    4860:	f006 fdba 	bl	b3d8 <get_sub_config>
    4864:	6843      	ldr	r3, [r0, #4]
    4866:	4798      	blx	r3
	return 0;
    4868:	2000      	movs	r0, #0
}
    486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    486e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 488c <stop+0x54>
    4872:	f240 134d 	movw	r3, #333	; 0x14d
    4876:	4642      	mov	r2, r8
    4878:	4905      	ldr	r1, [pc, #20]	; (4890 <stop+0x58>)
    487a:	4806      	ldr	r0, [pc, #24]	; (4894 <stop+0x5c>)
    487c:	f006 fb73 	bl	af66 <assert_print>
    4880:	f240 114d 	movw	r1, #333	; 0x14d
    4884:	4640      	mov	r0, r8
    4886:	f006 fb67 	bl	af58 <assert_post_action>
    488a:	e7e0      	b.n	484e <stop+0x16>
    488c:	0000d71c 	.word	0x0000d71c
    4890:	0000d75c 	.word	0x0000d75c
    4894:	0000c5c0 	.word	0x0000c5c0

00004898 <onoff_stop>:
{
    4898:	b538      	push	{r3, r4, r5, lr}
    489a:	4605      	mov	r5, r0
    489c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    489e:	f7ff ff73 	bl	4788 <get_subsys>
    48a2:	4601      	mov	r1, r0
    48a4:	2240      	movs	r2, #64	; 0x40
    48a6:	4803      	ldr	r0, [pc, #12]	; (48b4 <onoff_stop+0x1c>)
    48a8:	f7ff ffc6 	bl	4838 <stop>
    48ac:	4601      	mov	r1, r0
	notify(mgr, res);
    48ae:	4628      	mov	r0, r5
    48b0:	47a0      	blx	r4
}
    48b2:	bd38      	pop	{r3, r4, r5, pc}
    48b4:	0000bf3c 	.word	0x0000bf3c

000048b8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    48b8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    48ba:	2801      	cmp	r0, #1
    48bc:	d01d      	beq.n	48fa <clock_event_handler+0x42>
    48be:	2803      	cmp	r0, #3
    48c0:	d020      	beq.n	4904 <clock_event_handler+0x4c>
    48c2:	b168      	cbz	r0, 48e0 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    48c4:	4c16      	ldr	r4, [pc, #88]	; (4920 <clock_event_handler+0x68>)
    48c6:	f240 2362 	movw	r3, #610	; 0x262
    48ca:	4622      	mov	r2, r4
    48cc:	4915      	ldr	r1, [pc, #84]	; (4924 <clock_event_handler+0x6c>)
    48ce:	4816      	ldr	r0, [pc, #88]	; (4928 <clock_event_handler+0x70>)
    48d0:	f006 fb49 	bl	af66 <assert_print>
    48d4:	f240 2162 	movw	r1, #610	; 0x262
    48d8:	4620      	mov	r0, r4
    48da:	f006 fb3d 	bl	af58 <assert_post_action>
		break;
	}
}
    48de:	e010      	b.n	4902 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    48e0:	2100      	movs	r1, #0
    48e2:	4812      	ldr	r0, [pc, #72]	; (492c <clock_event_handler+0x74>)
    48e4:	f006 fd71 	bl	b3ca <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    48e8:	6883      	ldr	r3, [r0, #8]
    48ea:	f013 0f07 	tst.w	r3, #7
    48ee:	d108      	bne.n	4902 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    48f0:	2100      	movs	r1, #0
    48f2:	480e      	ldr	r0, [pc, #56]	; (492c <clock_event_handler+0x74>)
    48f4:	f006 fdc4 	bl	b480 <clkstarted_handle>
    48f8:	e003      	b.n	4902 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    48fa:	2101      	movs	r1, #1
    48fc:	480b      	ldr	r0, [pc, #44]	; (492c <clock_event_handler+0x74>)
    48fe:	f006 fdbf 	bl	b480 <clkstarted_handle>
}
    4902:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    4904:	4c06      	ldr	r4, [pc, #24]	; (4920 <clock_event_handler+0x68>)
    4906:	f240 235e 	movw	r3, #606	; 0x25e
    490a:	4622      	mov	r2, r4
    490c:	4905      	ldr	r1, [pc, #20]	; (4924 <clock_event_handler+0x6c>)
    490e:	4806      	ldr	r0, [pc, #24]	; (4928 <clock_event_handler+0x70>)
    4910:	f006 fb29 	bl	af66 <assert_print>
    4914:	f240 215e 	movw	r1, #606	; 0x25e
    4918:	4620      	mov	r0, r4
    491a:	f006 fb1d 	bl	af58 <assert_post_action>
		break;
    491e:	e7f0      	b.n	4902 <clock_event_handler+0x4a>
    4920:	0000d71c 	.word	0x0000d71c
    4924:	0000cc7c 	.word	0x0000cc7c
    4928:	0000c5c0 	.word	0x0000c5c0
    492c:	0000bf3c 	.word	0x0000bf3c

00004930 <api_blocking_start>:
{
    4930:	b500      	push	{lr}
    4932:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4934:	f8cd d000 	str.w	sp, [sp]
    4938:	f8cd d004 	str.w	sp, [sp, #4]
    493c:	2300      	movs	r3, #0
    493e:	9302      	str	r3, [sp, #8]
    4940:	2301      	movs	r3, #1
    4942:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4944:	466b      	mov	r3, sp
    4946:	4a07      	ldr	r2, [pc, #28]	; (4964 <api_blocking_start+0x34>)
    4948:	f006 fdc8 	bl	b4dc <api_start>
	if (err < 0) {
    494c:	2800      	cmp	r0, #0
    494e:	db05      	blt.n	495c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    4950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4954:	2300      	movs	r3, #0
    4956:	4668      	mov	r0, sp
    4958:	f003 fede 	bl	8718 <z_impl_k_sem_take>
}
    495c:	b005      	add	sp, #20
    495e:	f85d fb04 	ldr.w	pc, [sp], #4
    4962:	bf00      	nop
    4964:	0000b52f 	.word	0x0000b52f

00004968 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4968:	b570      	push	{r4, r5, r6, lr}
    496a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    496c:	2200      	movs	r2, #0
    496e:	2101      	movs	r1, #1
    4970:	4610      	mov	r0, r2
    4972:	f7fe fcd1 	bl	3318 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4976:	4811      	ldr	r0, [pc, #68]	; (49bc <clk_init+0x54>)
    4978:	f001 fd8c 	bl	6494 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    497c:	4b10      	ldr	r3, [pc, #64]	; (49c0 <clk_init+0x58>)
    497e:	4298      	cmp	r0, r3
    4980:	d119      	bne.n	49b6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4982:	f001 fdb1 	bl	64e8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4986:	2400      	movs	r4, #0
    4988:	2c01      	cmp	r4, #1
    498a:	d812      	bhi.n	49b2 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    498c:	4621      	mov	r1, r4
    498e:	4630      	mov	r0, r6
    4990:	f006 fd1b 	bl	b3ca <get_sub_data>
    4994:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4996:	4621      	mov	r1, r4
    4998:	4630      	mov	r0, r6
    499a:	f006 fd23 	bl	b3e4 <get_onoff_manager>
    499e:	4909      	ldr	r1, [pc, #36]	; (49c4 <clk_init+0x5c>)
    49a0:	f006 f9ea 	bl	ad78 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    49a4:	2800      	cmp	r0, #0
    49a6:	db05      	blt.n	49b4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    49a8:	2301      	movs	r3, #1
    49aa:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    49ac:	441c      	add	r4, r3
    49ae:	b2e4      	uxtb	r4, r4
    49b0:	e7ea      	b.n	4988 <clk_init+0x20>
	}

	return 0;
    49b2:	2000      	movs	r0, #0
}
    49b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    49b6:	f06f 0004 	mvn.w	r0, #4
    49ba:	e7fb      	b.n	49b4 <clk_init+0x4c>
    49bc:	000048b9 	.word	0x000048b9
    49c0:	0bad0000 	.word	0x0bad0000
    49c4:	0000d7d8 	.word	0x0000d7d8

000049c8 <lfclk_spinwait>:
{
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    49cc:	2801      	cmp	r0, #1
    49ce:	d107      	bne.n	49e0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    49d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49d4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    49d8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    49dc:	2b01      	cmp	r3, #1
    49de:	d05a      	beq.n	4a96 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    49e0:	f007 f9ad 	bl	bd3e <k_is_in_isr>
    49e4:	b928      	cbnz	r0, 49f2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    49e6:	4b2f      	ldr	r3, [pc, #188]	; (4aa4 <lfclk_spinwait+0xdc>)
    49e8:	781b      	ldrb	r3, [r3, #0]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d043      	beq.n	4a76 <lfclk_spinwait+0xae>
    49ee:	2300      	movs	r3, #0
    49f0:	e000      	b.n	49f4 <lfclk_spinwait+0x2c>
    49f2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    49f4:	461c      	mov	r4, r3
    49f6:	2b00      	cmp	r3, #0
    49f8:	d03f      	beq.n	4a7a <lfclk_spinwait+0xb2>
	__asm__ volatile(
    49fa:	f04f 0320 	mov.w	r3, #32
    49fe:	f3ef 8611 	mrs	r6, BASEPRI
    4a02:	f383 8812 	msr	BASEPRI_MAX, r3
    4a06:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4a0a:	b924      	cbnz	r4, 4a16 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a10:	2202      	movs	r2, #2
    4a12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a1a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4a1e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a22:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4a26:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4a2a:	d12d      	bne.n	4a88 <lfclk_spinwait+0xc0>
    return false;
    4a2c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4a2e:	b11a      	cbz	r2, 4a38 <lfclk_spinwait+0x70>
    4a30:	2b01      	cmp	r3, #1
    4a32:	d02b      	beq.n	4a8c <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4a34:	2d01      	cmp	r5, #1
    4a36:	d029      	beq.n	4a8c <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4a38:	b30c      	cbz	r4, 4a7e <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4a3a:	4630      	mov	r0, r6
    4a3c:	f7fe fbfc 	bl	3238 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a44:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d1e4      	bne.n	4a16 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4a54:	2b00      	cmp	r3, #0
    4a56:	d0de      	beq.n	4a16 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a5c:	2200      	movs	r2, #0
    4a5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a62:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a66:	2201      	movs	r2, #1
    4a68:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a6c:	490e      	ldr	r1, [pc, #56]	; (4aa8 <lfclk_spinwait+0xe0>)
    4a6e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a72:	609a      	str	r2, [r3, #8]
}
    4a74:	e7cf      	b.n	4a16 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a76:	2301      	movs	r3, #1
    4a78:	e7bc      	b.n	49f4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    4a7a:	2600      	movs	r6, #0
    4a7c:	e7c5      	b.n	4a0a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4a7e:	2021      	movs	r0, #33	; 0x21
    4a80:	2100      	movs	r1, #0
    4a82:	f005 f8e5 	bl	9c50 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4a86:	e7db      	b.n	4a40 <lfclk_spinwait+0x78>
                return true;
    4a88:	2201      	movs	r2, #1
    4a8a:	e7d0      	b.n	4a2e <lfclk_spinwait+0x66>
	if (isr_mode) {
    4a8c:	b124      	cbz	r4, 4a98 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    4a8e:	f386 8811 	msr	BASEPRI, r6
    4a92:	f3bf 8f6f 	isb	sy
}
    4a96:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a9c:	2202      	movs	r2, #2
    4a9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4aa2:	e7f8      	b.n	4a96 <lfclk_spinwait+0xce>
    4aa4:	20001386 	.word	0x20001386
    4aa8:	e000e100 	.word	0xe000e100

00004aac <generic_hfclk_start>:
{
    4aac:	b510      	push	{r4, lr}
	__asm__ volatile(
    4aae:	f04f 0320 	mov.w	r3, #32
    4ab2:	f3ef 8411 	mrs	r4, BASEPRI
    4ab6:	f383 8812 	msr	BASEPRI_MAX, r3
    4aba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4abe:	4a13      	ldr	r2, [pc, #76]	; (4b0c <generic_hfclk_start+0x60>)
    4ac0:	6813      	ldr	r3, [r2, #0]
    4ac2:	f043 0302 	orr.w	r3, r3, #2
    4ac6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4ac8:	f013 0f01 	tst.w	r3, #1
    4acc:	d108      	bne.n	4ae0 <generic_hfclk_start+0x34>
	bool already_started = false;
    4ace:	2300      	movs	r3, #0
	__asm__ volatile(
    4ad0:	f384 8811 	msr	BASEPRI, r4
    4ad4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4ad8:	b99b      	cbnz	r3, 4b02 <generic_hfclk_start+0x56>
	hfclk_start();
    4ada:	f006 fd0f 	bl	b4fc <hfclk_start>
}
    4ade:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ae4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4ae8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4aec:	f012 0f01 	tst.w	r2, #1
    4af0:	d101      	bne.n	4af6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4af2:	2300      	movs	r3, #0
    4af4:	e7ec      	b.n	4ad0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4af6:	f7ff fe43 	bl	4780 <get_hf_flags>
    4afa:	f006 fcae 	bl	b45a <set_on_state>
			already_started = true;
    4afe:	2301      	movs	r3, #1
    4b00:	e7e6      	b.n	4ad0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4b02:	2100      	movs	r1, #0
    4b04:	4802      	ldr	r0, [pc, #8]	; (4b10 <generic_hfclk_start+0x64>)
    4b06:	f006 fcbb 	bl	b480 <clkstarted_handle>
		return;
    4b0a:	e7e8      	b.n	4ade <generic_hfclk_start+0x32>
    4b0c:	20000c64 	.word	0x20000c64
    4b10:	0000bf3c 	.word	0x0000bf3c

00004b14 <z_nrf_clock_control_lf_on>:
{
    4b14:	b538      	push	{r3, r4, r5, lr}
    4b16:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4b18:	4b1f      	ldr	r3, [pc, #124]	; (4b98 <z_nrf_clock_control_lf_on+0x84>)
    4b1a:	2101      	movs	r1, #1
    4b1c:	f3bf 8f5b 	dmb	ish
    4b20:	e853 2f00 	ldrex	r2, [r3]
    4b24:	e843 1000 	strex	r0, r1, [r3]
    4b28:	2800      	cmp	r0, #0
    4b2a:	d1f9      	bne.n	4b20 <z_nrf_clock_control_lf_on+0xc>
    4b2c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4b30:	b142      	cbz	r2, 4b44 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    4b32:	b134      	cbz	r4, 4b42 <z_nrf_clock_control_lf_on+0x2e>
    4b34:	1e63      	subs	r3, r4, #1
    4b36:	b2db      	uxtb	r3, r3
    4b38:	2b01      	cmp	r3, #1
    4b3a:	d81f      	bhi.n	4b7c <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    4b3c:	4620      	mov	r0, r4
    4b3e:	f7ff ff43 	bl	49c8 <lfclk_spinwait>
}
    4b42:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4b44:	4815      	ldr	r0, [pc, #84]	; (4b9c <z_nrf_clock_control_lf_on+0x88>)
    4b46:	f006 fc4d 	bl	b3e4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4b4a:	4915      	ldr	r1, [pc, #84]	; (4ba0 <z_nrf_clock_control_lf_on+0x8c>)
    4b4c:	2300      	movs	r3, #0
    4b4e:	604b      	str	r3, [r1, #4]
    4b50:	608b      	str	r3, [r1, #8]
    4b52:	60cb      	str	r3, [r1, #12]
    4b54:	2301      	movs	r3, #1
    4b56:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4b58:	f7fc fdd4 	bl	1704 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4b5c:	2800      	cmp	r0, #0
    4b5e:	dae8      	bge.n	4b32 <z_nrf_clock_control_lf_on+0x1e>
    4b60:	4d10      	ldr	r5, [pc, #64]	; (4ba4 <z_nrf_clock_control_lf_on+0x90>)
    4b62:	f44f 7308 	mov.w	r3, #544	; 0x220
    4b66:	462a      	mov	r2, r5
    4b68:	490f      	ldr	r1, [pc, #60]	; (4ba8 <z_nrf_clock_control_lf_on+0x94>)
    4b6a:	4810      	ldr	r0, [pc, #64]	; (4bac <z_nrf_clock_control_lf_on+0x98>)
    4b6c:	f006 f9fb 	bl	af66 <assert_print>
    4b70:	f44f 7108 	mov.w	r1, #544	; 0x220
    4b74:	4628      	mov	r0, r5
    4b76:	f006 f9ef 	bl	af58 <assert_post_action>
    4b7a:	e7da      	b.n	4b32 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    4b7c:	4c09      	ldr	r4, [pc, #36]	; (4ba4 <z_nrf_clock_control_lf_on+0x90>)
    4b7e:	f240 2332 	movw	r3, #562	; 0x232
    4b82:	4622      	mov	r2, r4
    4b84:	490a      	ldr	r1, [pc, #40]	; (4bb0 <z_nrf_clock_control_lf_on+0x9c>)
    4b86:	4809      	ldr	r0, [pc, #36]	; (4bac <z_nrf_clock_control_lf_on+0x98>)
    4b88:	f006 f9ed 	bl	af66 <assert_print>
    4b8c:	f240 2132 	movw	r1, #562	; 0x232
    4b90:	4620      	mov	r0, r4
    4b92:	f006 f9e1 	bl	af58 <assert_post_action>
    4b96:	e7d4      	b.n	4b42 <z_nrf_clock_control_lf_on+0x2e>
    4b98:	20000c68 	.word	0x20000c68
    4b9c:	0000bf3c 	.word	0x0000bf3c
    4ba0:	20000bfc 	.word	0x20000bfc
    4ba4:	0000d71c 	.word	0x0000d71c
    4ba8:	0000cbe4 	.word	0x0000cbe4
    4bac:	0000c5c0 	.word	0x0000c5c0
    4bb0:	0000cc7c 	.word	0x0000cc7c

00004bb4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4bb4:	b510      	push	{r4, lr}
    4bb6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4bb8:	280a      	cmp	r0, #10
    4bba:	d007      	beq.n	4bcc <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4bbc:	4b07      	ldr	r3, [pc, #28]	; (4bdc <console_out+0x28>)
    4bbe:	6818      	ldr	r0, [r3, #0]
    4bc0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    4bc2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4bc4:	685b      	ldr	r3, [r3, #4]
    4bc6:	4798      	blx	r3

	return c;
}
    4bc8:	4620      	mov	r0, r4
    4bca:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4bcc:	4b03      	ldr	r3, [pc, #12]	; (4bdc <console_out+0x28>)
    4bce:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4bd0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4bd2:	685b      	ldr	r3, [r3, #4]
    4bd4:	210d      	movs	r1, #13
    4bd6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4bd8:	e7f0      	b.n	4bbc <console_out+0x8>
    4bda:	bf00      	nop
    4bdc:	20000c6c 	.word	0x20000c6c

00004be0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4be0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4be2:	4c04      	ldr	r4, [pc, #16]	; (4bf4 <uart_console_hook_install+0x14>)
    4be4:	4620      	mov	r0, r4
    4be6:	f7ff fa4f 	bl	4088 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4bea:	4620      	mov	r0, r4
    4bec:	f7fc faf0 	bl	11d0 <__printk_hook_install>
#endif
}
    4bf0:	bd10      	pop	{r4, pc}
    4bf2:	bf00      	nop
    4bf4:	00004bb5 	.word	0x00004bb5

00004bf8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4bf8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4bfa:	4806      	ldr	r0, [pc, #24]	; (4c14 <uart_console_init+0x1c>)
    4bfc:	4b06      	ldr	r3, [pc, #24]	; (4c18 <uart_console_init+0x20>)
    4bfe:	6018      	str	r0, [r3, #0]
    4c00:	f007 f841 	bl	bc86 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4c04:	b118      	cbz	r0, 4c0e <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    4c06:	f7ff ffeb 	bl	4be0 <uart_console_hook_install>

	return 0;
    4c0a:	2000      	movs	r0, #0
}
    4c0c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4c0e:	f06f 0012 	mvn.w	r0, #18
    4c12:	e7fb      	b.n	4c0c <uart_console_init+0x14>
    4c14:	0000bf9c 	.word	0x0000bf9c
    4c18:	20000c6c 	.word	0x20000c6c

00004c1c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c1c:	b128      	cbz	r0, 4c2a <get_dev+0xe>
    4c1e:	2801      	cmp	r0, #1
    4c20:	d101      	bne.n	4c26 <get_dev+0xa>
    4c22:	4803      	ldr	r0, [pc, #12]	; (4c30 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4c24:	4770      	bx	lr
	const struct device *dev = NULL;
    4c26:	2000      	movs	r0, #0
    4c28:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c2a:	4802      	ldr	r0, [pc, #8]	; (4c34 <get_dev+0x18>)
    4c2c:	4770      	bx	lr
    4c2e:	bf00      	nop
    4c30:	0000bf54 	.word	0x0000bf54
    4c34:	0000bf6c 	.word	0x0000bf6c

00004c38 <gpio_nrfx_manage_callback>:
{
    4c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c3c:	4616      	mov	r6, r2
	return port->data;
    4c3e:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4c40:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4c42:	460c      	mov	r4, r1
    4c44:	b131      	cbz	r1, 4c54 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    4c46:	6863      	ldr	r3, [r4, #4]
    4c48:	b1a3      	cbz	r3, 4c74 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    4c4a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d03b      	beq.n	4cc8 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c50:	2100      	movs	r1, #0
    4c52:	e02a      	b.n	4caa <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    4c54:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4cec <gpio_nrfx_manage_callback+0xb4>
    4c58:	2324      	movs	r3, #36	; 0x24
    4c5a:	4642      	mov	r2, r8
    4c5c:	4924      	ldr	r1, [pc, #144]	; (4cf0 <gpio_nrfx_manage_callback+0xb8>)
    4c5e:	4825      	ldr	r0, [pc, #148]	; (4cf4 <gpio_nrfx_manage_callback+0xbc>)
    4c60:	f006 f981 	bl	af66 <assert_print>
    4c64:	4824      	ldr	r0, [pc, #144]	; (4cf8 <gpio_nrfx_manage_callback+0xc0>)
    4c66:	f006 f97e 	bl	af66 <assert_print>
    4c6a:	2124      	movs	r1, #36	; 0x24
    4c6c:	4640      	mov	r0, r8
    4c6e:	f006 f973 	bl	af58 <assert_post_action>
    4c72:	e7e8      	b.n	4c46 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    4c74:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4cec <gpio_nrfx_manage_callback+0xb4>
    4c78:	2325      	movs	r3, #37	; 0x25
    4c7a:	4642      	mov	r2, r8
    4c7c:	491f      	ldr	r1, [pc, #124]	; (4cfc <gpio_nrfx_manage_callback+0xc4>)
    4c7e:	481d      	ldr	r0, [pc, #116]	; (4cf4 <gpio_nrfx_manage_callback+0xbc>)
    4c80:	f006 f971 	bl	af66 <assert_print>
    4c84:	481e      	ldr	r0, [pc, #120]	; (4d00 <gpio_nrfx_manage_callback+0xc8>)
    4c86:	f006 f96e 	bl	af66 <assert_print>
    4c8a:	2125      	movs	r1, #37	; 0x25
    4c8c:	4640      	mov	r0, r8
    4c8e:	f006 f963 	bl	af58 <assert_post_action>
    4c92:	e7da      	b.n	4c4a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    4c94:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4c96:	606b      	str	r3, [r5, #4]
	return list->tail;
    4c98:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c9a:	4294      	cmp	r4, r2
    4c9c:	d10f      	bne.n	4cbe <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    4c9e:	607b      	str	r3, [r7, #4]
}
    4ca0:	e00d      	b.n	4cbe <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    4ca2:	6079      	str	r1, [r7, #4]
}
    4ca4:	e00b      	b.n	4cbe <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ca6:	4619      	mov	r1, r3
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	b15b      	cbz	r3, 4cc4 <gpio_nrfx_manage_callback+0x8c>
    4cac:	429c      	cmp	r4, r3
    4cae:	d1fa      	bne.n	4ca6 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    4cb0:	2900      	cmp	r1, #0
    4cb2:	d0ef      	beq.n	4c94 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    4cb4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    4cb6:	600b      	str	r3, [r1, #0]
	return list->tail;
    4cb8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4cba:	429c      	cmp	r4, r3
    4cbc:	d0f1      	beq.n	4ca2 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    4cbe:	2300      	movs	r3, #0
    4cc0:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4cc2:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4cc4:	b903      	cbnz	r3, 4cc8 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    4cc6:	b156      	cbz	r6, 4cde <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4cc8:	b166      	cbz	r6, 4ce4 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    4cca:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4ccc:	6023      	str	r3, [r4, #0]
	list->head = node;
    4cce:	606c      	str	r4, [r5, #4]
	return list->tail;
    4cd0:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    4cd2:	b10b      	cbz	r3, 4cd8 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4cd4:	2000      	movs	r0, #0
    4cd6:	e006      	b.n	4ce6 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    4cd8:	607c      	str	r4, [r7, #4]
    4cda:	2000      	movs	r0, #0
}
    4cdc:	e003      	b.n	4ce6 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    4cde:	f06f 0015 	mvn.w	r0, #21
    4ce2:	e000      	b.n	4ce6 <gpio_nrfx_manage_callback+0xae>
	return 0;
    4ce4:	2000      	movs	r0, #0
}
    4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cea:	bf00      	nop
    4cec:	0000d7e4 	.word	0x0000d7e4
    4cf0:	0000d814 	.word	0x0000d814
    4cf4:	0000c5c0 	.word	0x0000c5c0
    4cf8:	0000d820 	.word	0x0000d820
    4cfc:	0000d830 	.word	0x0000d830
    4d00:	0000d844 	.word	0x0000d844

00004d04 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4d08:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    4d0c:	0940      	lsrs	r0, r0, #5
    4d0e:	f7ff ff85 	bl	4c1c <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    4d12:	b380      	cbz	r0, 4d76 <nrfx_gpio_handler+0x72>
    4d14:	4607      	mov	r7, r0
	return port->data;
    4d16:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    4d18:	2601      	movs	r6, #1
    4d1a:	40a6      	lsls	r6, r4
	return list->head;
    4d1c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d1e:	b11c      	cbz	r4, 4d28 <nrfx_gpio_handler+0x24>
    4d20:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d22:	b17c      	cbz	r4, 4d44 <nrfx_gpio_handler+0x40>
	return node->next;
    4d24:	6825      	ldr	r5, [r4, #0]
    4d26:	e00d      	b.n	4d44 <nrfx_gpio_handler+0x40>
    4d28:	4625      	mov	r5, r4
    4d2a:	e00b      	b.n	4d44 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4d2c:	6863      	ldr	r3, [r4, #4]
    4d2e:	68a2      	ldr	r2, [r4, #8]
    4d30:	4032      	ands	r2, r6
    4d32:	4621      	mov	r1, r4
    4d34:	4638      	mov	r0, r7
    4d36:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d38:	b1dd      	cbz	r5, 4d72 <nrfx_gpio_handler+0x6e>
    4d3a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d3c:	b105      	cbz	r5, 4d40 <nrfx_gpio_handler+0x3c>
	return node->next;
    4d3e:	682b      	ldr	r3, [r5, #0]
    4d40:	462c      	mov	r4, r5
    4d42:	461d      	mov	r5, r3
    4d44:	b1bc      	cbz	r4, 4d76 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    4d46:	68a3      	ldr	r3, [r4, #8]
    4d48:	421e      	tst	r6, r3
    4d4a:	d0f5      	beq.n	4d38 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    4d4c:	6863      	ldr	r3, [r4, #4]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d1ec      	bne.n	4d2c <nrfx_gpio_handler+0x28>
    4d52:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4d7c <nrfx_gpio_handler+0x78>
    4d56:	2345      	movs	r3, #69	; 0x45
    4d58:	4642      	mov	r2, r8
    4d5a:	4909      	ldr	r1, [pc, #36]	; (4d80 <nrfx_gpio_handler+0x7c>)
    4d5c:	4809      	ldr	r0, [pc, #36]	; (4d84 <nrfx_gpio_handler+0x80>)
    4d5e:	f006 f902 	bl	af66 <assert_print>
    4d62:	4809      	ldr	r0, [pc, #36]	; (4d88 <nrfx_gpio_handler+0x84>)
    4d64:	f006 f8ff 	bl	af66 <assert_print>
    4d68:	2145      	movs	r1, #69	; 0x45
    4d6a:	4640      	mov	r0, r8
    4d6c:	f006 f8f4 	bl	af58 <assert_post_action>
    4d70:	e7dc      	b.n	4d2c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d72:	462b      	mov	r3, r5
    4d74:	e7e4      	b.n	4d40 <nrfx_gpio_handler+0x3c>
}
    4d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d7a:	bf00      	nop
    4d7c:	0000d7e4 	.word	0x0000d7e4
    4d80:	0000d85c 	.word	0x0000d85c
    4d84:	0000c5c0 	.word	0x0000c5c0
    4d88:	0000d844 	.word	0x0000d844

00004d8c <gpio_nrfx_pin_interrupt_configure>:
{
    4d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d8e:	b085      	sub	sp, #20
    4d90:	460e      	mov	r6, r1
    4d92:	4619      	mov	r1, r3
	return port->config;
    4d94:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4d96:	7b1b      	ldrb	r3, [r3, #12]
    4d98:	f006 041f 	and.w	r4, r6, #31
    4d9c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4da0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    4da4:	d022      	beq.n	4dec <gpio_nrfx_pin_interrupt_configure+0x60>
    4da6:	4607      	mov	r7, r0
    4da8:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4daa:	2300      	movs	r3, #0
    4dac:	9302      	str	r3, [sp, #8]
    4dae:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    4db0:	4610      	mov	r0, r2
    4db2:	f006 fc3a 	bl	b62a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4db6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    4dba:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4dbc:	6899      	ldr	r1, [r3, #8]
    4dbe:	40f1      	lsrs	r1, r6
    4dc0:	f011 0101 	ands.w	r1, r1, #1
    4dc4:	d102      	bne.n	4dcc <gpio_nrfx_pin_interrupt_configure+0x40>
    4dc6:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    4dca:	d014      	beq.n	4df6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4dcc:	2300      	movs	r3, #0
    4dce:	aa02      	add	r2, sp, #8
    4dd0:	4619      	mov	r1, r3
    4dd2:	4620      	mov	r0, r4
    4dd4:	f002 f802 	bl	6ddc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4dd8:	4b32      	ldr	r3, [pc, #200]	; (4ea4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4dda:	4298      	cmp	r0, r3
    4ddc:	d15f      	bne.n	4e9e <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4dde:	2101      	movs	r1, #1
    4de0:	4620      	mov	r0, r4
    4de2:	f002 fa5f 	bl	72a4 <nrfx_gpiote_trigger_enable>
	return 0;
    4de6:	2000      	movs	r0, #0
}
    4de8:	b005      	add	sp, #20
    4dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4dec:	4620      	mov	r0, r4
    4dee:	f002 fb65 	bl	74bc <nrfx_gpiote_trigger_disable>
		return 0;
    4df2:	2000      	movs	r0, #0
    4df4:	e7f8      	b.n	4de8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    4df6:	0963      	lsrs	r3, r4, #5
    4df8:	d01f      	beq.n	4e3a <gpio_nrfx_pin_interrupt_configure+0xae>
    4dfa:	2b01      	cmp	r3, #1
    4dfc:	d101      	bne.n	4e02 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    4dfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    4e02:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4e06:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e08:	f011 0f01 	tst.w	r1, #1
    4e0c:	d018      	beq.n	4e40 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    4e0e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e12:	0963      	lsrs	r3, r4, #5
    4e14:	d022      	beq.n	4e5c <gpio_nrfx_pin_interrupt_configure+0xd0>
    4e16:	2b01      	cmp	r3, #1
    4e18:	d023      	beq.n	4e62 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    4e1a:	4e23      	ldr	r6, [pc, #140]	; (4ea8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4e1c:	f240 232e 	movw	r3, #558	; 0x22e
    4e20:	4632      	mov	r2, r6
    4e22:	4922      	ldr	r1, [pc, #136]	; (4eac <gpio_nrfx_pin_interrupt_configure+0x120>)
    4e24:	4822      	ldr	r0, [pc, #136]	; (4eb0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4e26:	f006 f89e 	bl	af66 <assert_print>
    4e2a:	f240 212e 	movw	r1, #558	; 0x22e
    4e2e:	4630      	mov	r0, r6
    4e30:	f006 f892 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    4e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e38:	e014      	b.n	4e64 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    4e3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4e3e:	e7e0      	b.n	4e02 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e40:	4d19      	ldr	r5, [pc, #100]	; (4ea8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4e42:	f240 2329 	movw	r3, #553	; 0x229
    4e46:	462a      	mov	r2, r5
    4e48:	491a      	ldr	r1, [pc, #104]	; (4eb4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4e4a:	4819      	ldr	r0, [pc, #100]	; (4eb0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4e4c:	f006 f88b 	bl	af66 <assert_print>
    4e50:	f240 2129 	movw	r1, #553	; 0x229
    4e54:	4628      	mov	r0, r5
    4e56:	f006 f87f 	bl	af58 <assert_post_action>
    4e5a:	e7d8      	b.n	4e0e <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    4e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e60:	e000      	b.n	4e64 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e62:	4b15      	ldr	r3, [pc, #84]	; (4eb8 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4e64:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4e68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4e6c:	f013 0f01 	tst.w	r3, #1
    4e70:	d1ac      	bne.n	4dcc <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4e72:	f10d 0107 	add.w	r1, sp, #7
    4e76:	4620      	mov	r0, r4
    4e78:	f002 f9a4 	bl	71c4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4e7c:	4b0f      	ldr	r3, [pc, #60]	; (4ebc <gpio_nrfx_pin_interrupt_configure+0x130>)
    4e7e:	4298      	cmp	r0, r3
    4e80:	d003      	beq.n	4e8a <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    4e82:	f10d 0307 	add.w	r3, sp, #7
    4e86:	9303      	str	r3, [sp, #12]
    4e88:	e7a0      	b.n	4dcc <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    4e8a:	f10d 0007 	add.w	r0, sp, #7
    4e8e:	f002 fa01 	bl	7294 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4e92:	4b04      	ldr	r3, [pc, #16]	; (4ea4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4e94:	4298      	cmp	r0, r3
    4e96:	d0f4      	beq.n	4e82 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    4e98:	f06f 000b 	mvn.w	r0, #11
    4e9c:	e7a4      	b.n	4de8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    4e9e:	f06f 0004 	mvn.w	r0, #4
    4ea2:	e7a1      	b.n	4de8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    4ea4:	0bad0000 	.word	0x0bad0000
    4ea8:	0000d868 	.word	0x0000d868
    4eac:	0000cc7c 	.word	0x0000cc7c
    4eb0:	0000c5c0 	.word	0x0000c5c0
    4eb4:	0000d89c 	.word	0x0000d89c
    4eb8:	50000300 	.word	0x50000300
    4ebc:	0bad0004 	.word	0x0bad0004

00004ec0 <pin_uninit>:
{
    4ec0:	b530      	push	{r4, r5, lr}
    4ec2:	b083      	sub	sp, #12
    4ec4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4ec6:	f10d 0107 	add.w	r1, sp, #7
    4eca:	f002 f97b 	bl	71c4 <nrfx_gpiote_channel_get>
    4ece:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4ed0:	4620      	mov	r0, r4
    4ed2:	f002 fb5b 	bl	758c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4ed6:	4b0b      	ldr	r3, [pc, #44]	; (4f04 <pin_uninit+0x44>)
    4ed8:	4298      	cmp	r0, r3
    4eda:	d10f      	bne.n	4efc <pin_uninit+0x3c>
	if (free_ch) {
    4edc:	429d      	cmp	r5, r3
    4ede:	d005      	beq.n	4eec <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4ee0:	4b08      	ldr	r3, [pc, #32]	; (4f04 <pin_uninit+0x44>)
    4ee2:	4298      	cmp	r0, r3
    4ee4:	d107      	bne.n	4ef6 <pin_uninit+0x36>
    4ee6:	2000      	movs	r0, #0
}
    4ee8:	b003      	add	sp, #12
    4eea:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4eec:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4ef0:	f002 f9c8 	bl	7284 <nrfx_gpiote_channel_free>
    4ef4:	e7f4      	b.n	4ee0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4ef6:	f06f 0004 	mvn.w	r0, #4
    4efa:	e7f5      	b.n	4ee8 <pin_uninit+0x28>
		return -EIO;
    4efc:	f06f 0004 	mvn.w	r0, #4
    4f00:	e7f2      	b.n	4ee8 <pin_uninit+0x28>
    4f02:	bf00      	nop
    4f04:	0bad0000 	.word	0x0bad0000

00004f08 <gpio_nrfx_pin_configure>:
{
    4f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f0c:	b087      	sub	sp, #28
	return port->config;
    4f0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f12:	f898 300c 	ldrb.w	r3, [r8, #12]
    4f16:	f001 051f 	and.w	r5, r1, #31
    4f1a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4f1e:	2a00      	cmp	r2, #0
    4f20:	d044      	beq.n	4fac <gpio_nrfx_pin_configure+0xa4>
    4f22:	460c      	mov	r4, r1
    4f24:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f26:	2600      	movs	r6, #0
    4f28:	9603      	str	r6, [sp, #12]
    4f2a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4f2c:	f10d 0117 	add.w	r1, sp, #23
    4f30:	4620      	mov	r0, r4
    4f32:	f002 f947 	bl	71c4 <nrfx_gpiote_channel_get>
    4f36:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f38:	4633      	mov	r3, r6
    4f3a:	aa03      	add	r2, sp, #12
    4f3c:	4631      	mov	r1, r6
    4f3e:	4628      	mov	r0, r5
    4f40:	f001 ff4c 	bl	6ddc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4f44:	4b30      	ldr	r3, [pc, #192]	; (5008 <gpio_nrfx_pin_configure+0x100>)
    4f46:	4298      	cmp	r0, r3
    4f48:	d15b      	bne.n	5002 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    4f4a:	4599      	cmp	r9, r3
    4f4c:	d036      	beq.n	4fbc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    4f4e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    4f52:	d043      	beq.n	4fdc <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4f54:	f10d 0103 	add.w	r1, sp, #3
    4f58:	4638      	mov	r0, r7
    4f5a:	f006 faed 	bl	b538 <get_drive>
		if (rv != 0) {
    4f5e:	4606      	mov	r6, r0
    4f60:	bb40      	cbnz	r0, 4fb4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    4f62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4f66:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4f6a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    4f6e:	bf0c      	ite	eq
    4f70:	2301      	moveq	r3, #1
    4f72:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    4f74:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    4f78:	4638      	mov	r0, r7
    4f7a:	f006 fb23 	bl	b5c4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    4f7e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f82:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    4f86:	d01e      	beq.n	4fc6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4f88:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4f8c:	2101      	movs	r1, #1
    4f8e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    4f92:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4f96:	2200      	movs	r2, #0
    4f98:	a901      	add	r1, sp, #4
    4f9a:	4628      	mov	r0, r5
    4f9c:	f002 f812 	bl	6fc4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4fa0:	4b19      	ldr	r3, [pc, #100]	; (5008 <gpio_nrfx_pin_configure+0x100>)
    4fa2:	4298      	cmp	r0, r3
    4fa4:	d006      	beq.n	4fb4 <gpio_nrfx_pin_configure+0xac>
    4fa6:	f06f 0615 	mvn.w	r6, #21
    4faa:	e003      	b.n	4fb4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    4fac:	4628      	mov	r0, r5
    4fae:	f7ff ff87 	bl	4ec0 <pin_uninit>
    4fb2:	4606      	mov	r6, r0
}
    4fb4:	4630      	mov	r0, r6
    4fb6:	b007      	add	sp, #28
    4fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    4fbc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4fc0:	f002 f960 	bl	7284 <nrfx_gpiote_channel_free>
    4fc4:	e7c3      	b.n	4f4e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4fc6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    4fca:	d0e4      	beq.n	4f96 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4fcc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4fd0:	2301      	movs	r3, #1
    4fd2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    4fd6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    4fda:	e7dc      	b.n	4f96 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    4fdc:	4638      	mov	r0, r7
    4fde:	f006 faf1 	bl	b5c4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4fe2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4fe6:	2300      	movs	r3, #0
    4fe8:	461a      	mov	r2, r3
    4fea:	a902      	add	r1, sp, #8
    4fec:	4628      	mov	r0, r5
    4fee:	f001 fef5 	bl	6ddc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4ff2:	4b05      	ldr	r3, [pc, #20]	; (5008 <gpio_nrfx_pin_configure+0x100>)
    4ff4:	4298      	cmp	r0, r3
    4ff6:	d101      	bne.n	4ffc <gpio_nrfx_pin_configure+0xf4>
    4ff8:	2600      	movs	r6, #0
    4ffa:	e7db      	b.n	4fb4 <gpio_nrfx_pin_configure+0xac>
    4ffc:	f06f 0615 	mvn.w	r6, #21
    5000:	e7d8      	b.n	4fb4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    5002:	f06f 0615 	mvn.w	r6, #21
    5006:	e7d5      	b.n	4fb4 <gpio_nrfx_pin_configure+0xac>
    5008:	0bad0000 	.word	0x0bad0000

0000500c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    500c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    500e:	f002 f92f 	bl	7270 <nrfx_gpiote_is_init>
    5012:	b108      	cbz	r0, 5018 <gpio_nrfx_init+0xc>
		return 0;
    5014:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5016:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    5018:	f002 f900 	bl	721c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    501c:	4b08      	ldr	r3, [pc, #32]	; (5040 <gpio_nrfx_init+0x34>)
    501e:	4298      	cmp	r0, r3
    5020:	d10a      	bne.n	5038 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5022:	2100      	movs	r1, #0
    5024:	4807      	ldr	r0, [pc, #28]	; (5044 <gpio_nrfx_init+0x38>)
    5026:	f002 f8c7 	bl	71b8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    502a:	2200      	movs	r2, #0
    502c:	2105      	movs	r1, #5
    502e:	2006      	movs	r0, #6
    5030:	f7fe f972 	bl	3318 <z_arm_irq_priority_set>
	return 0;
    5034:	2000      	movs	r0, #0
    5036:	e7ee      	b.n	5016 <gpio_nrfx_init+0xa>
		return -EIO;
    5038:	f06f 0004 	mvn.w	r0, #4
    503c:	e7eb      	b.n	5016 <gpio_nrfx_init+0xa>
    503e:	bf00      	nop
    5040:	0bad0000 	.word	0x0bad0000
    5044:	00004d05 	.word	0x00004d05

00005048 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    5048:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    504a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    504c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    5050:	d06f      	beq.n	5132 <baudrate_set+0xea>
    5052:	d83a      	bhi.n	50ca <baudrate_set+0x82>
    5054:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5058:	d06e      	beq.n	5138 <baudrate_set+0xf0>
    505a:	d90a      	bls.n	5072 <baudrate_set+0x2a>
    505c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5060:	d075      	beq.n	514e <baudrate_set+0x106>
    5062:	d924      	bls.n	50ae <baudrate_set+0x66>
    5064:	f647 2312 	movw	r3, #31250	; 0x7a12
    5068:	4299      	cmp	r1, r3
    506a:	d12b      	bne.n	50c4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    506c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5070:	e013      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    5072:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5076:	d061      	beq.n	513c <baudrate_set+0xf4>
    5078:	d907      	bls.n	508a <baudrate_set+0x42>
    507a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    507e:	d063      	beq.n	5148 <baudrate_set+0x100>
    5080:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5084:	d110      	bne.n	50a8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5086:	4b3c      	ldr	r3, [pc, #240]	; (5178 <baudrate_set+0x130>)
    5088:	e007      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    508a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    508e:	d058      	beq.n	5142 <baudrate_set+0xfa>
    5090:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5094:	d105      	bne.n	50a2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5096:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    509a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    509e:	2000      	movs	r0, #0
    50a0:	4770      	bx	lr
	switch (baudrate) {
    50a2:	f06f 0015 	mvn.w	r0, #21
    50a6:	4770      	bx	lr
    50a8:	f06f 0015 	mvn.w	r0, #21
    50ac:	4770      	bx	lr
    50ae:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    50b2:	d04e      	beq.n	5152 <baudrate_set+0x10a>
    50b4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    50b8:	d101      	bne.n	50be <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    50ba:	4b30      	ldr	r3, [pc, #192]	; (517c <baudrate_set+0x134>)
    50bc:	e7ed      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    50be:	f06f 0015 	mvn.w	r0, #21
    50c2:	4770      	bx	lr
    50c4:	f06f 0015 	mvn.w	r0, #21
    50c8:	4770      	bx	lr
    50ca:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    50ce:	d042      	beq.n	5156 <baudrate_set+0x10e>
    50d0:	d909      	bls.n	50e6 <baudrate_set+0x9e>
    50d2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    50d6:	d046      	beq.n	5166 <baudrate_set+0x11e>
    50d8:	d91f      	bls.n	511a <baudrate_set+0xd2>
    50da:	4b29      	ldr	r3, [pc, #164]	; (5180 <baudrate_set+0x138>)
    50dc:	4299      	cmp	r1, r3
    50de:	d148      	bne.n	5172 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    50e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    50e4:	e7d9      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    50e6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    50ea:	d037      	beq.n	515c <baudrate_set+0x114>
    50ec:	d905      	bls.n	50fa <baudrate_set+0xb2>
    50ee:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    50f2:	d10f      	bne.n	5114 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    50f4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    50f8:	e7cf      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    50fa:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    50fe:	4299      	cmp	r1, r3
    5100:	d02e      	beq.n	5160 <baudrate_set+0x118>
    5102:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5106:	d102      	bne.n	510e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5108:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    510c:	e7c5      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    510e:	f06f 0015 	mvn.w	r0, #21
    5112:	4770      	bx	lr
    5114:	f06f 0015 	mvn.w	r0, #21
    5118:	4770      	bx	lr
    511a:	4b1a      	ldr	r3, [pc, #104]	; (5184 <baudrate_set+0x13c>)
    511c:	4299      	cmp	r1, r3
    511e:	d025      	beq.n	516c <baudrate_set+0x124>
    5120:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5124:	d102      	bne.n	512c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5126:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    512a:	e7b6      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    512c:	f06f 0015 	mvn.w	r0, #21
    5130:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5132:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5136:	e7b0      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5138:	4b13      	ldr	r3, [pc, #76]	; (5188 <baudrate_set+0x140>)
    513a:	e7ae      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    513c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5140:	e7ab      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    5142:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5146:	e7a8      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5148:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    514c:	e7a5      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    514e:	4b0f      	ldr	r3, [pc, #60]	; (518c <baudrate_set+0x144>)
    5150:	e7a3      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5152:	4b0f      	ldr	r3, [pc, #60]	; (5190 <baudrate_set+0x148>)
    5154:	e7a1      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5156:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    515a:	e79e      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    515c:	4b0d      	ldr	r3, [pc, #52]	; (5194 <baudrate_set+0x14c>)
    515e:	e79c      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5160:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5164:	e799      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5166:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    516a:	e796      	b.n	509a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    516c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5170:	e793      	b.n	509a <baudrate_set+0x52>
	switch (baudrate) {
    5172:	f06f 0015 	mvn.w	r0, #21
}
    5176:	4770      	bx	lr
    5178:	0013b000 	.word	0x0013b000
    517c:	004ea000 	.word	0x004ea000
    5180:	000f4240 	.word	0x000f4240
    5184:	0003d090 	.word	0x0003d090
    5188:	00275000 	.word	0x00275000
    518c:	0075c000 	.word	0x0075c000
    5190:	003af000 	.word	0x003af000
    5194:	013a9000 	.word	0x013a9000

00005198 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    519c:	4605      	mov	r5, r0
    519e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    51a0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    51a4:	f006 fdcb 	bl	bd3e <k_is_in_isr>
    51a8:	b920      	cbnz	r0, 51b4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    51aa:	4b16      	ldr	r3, [pc, #88]	; (5204 <uarte_nrfx_poll_out+0x6c>)
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	b143      	cbz	r3, 51c2 <uarte_nrfx_poll_out+0x2a>
    51b0:	2300      	movs	r3, #0
    51b2:	e000      	b.n	51b6 <uarte_nrfx_poll_out+0x1e>
    51b4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    51b6:	b953      	cbnz	r3, 51ce <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    51b8:	4628      	mov	r0, r5
    51ba:	f006 fb3f 	bl	b83c <wait_tx_ready>
    51be:	4606      	mov	r6, r0
    51c0:	e013      	b.n	51ea <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    51c2:	2301      	movs	r3, #1
    51c4:	e7f7      	b.n	51b6 <uarte_nrfx_poll_out+0x1e>
    51c6:	f384 8811 	msr	BASEPRI, r4
    51ca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    51ce:	f04f 0320 	mov.w	r3, #32
    51d2:	f3ef 8411 	mrs	r4, BASEPRI
    51d6:	f383 8812 	msr	BASEPRI_MAX, r3
    51da:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    51de:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    51e0:	4628      	mov	r0, r5
    51e2:	f006 fadd 	bl	b7a0 <is_tx_ready>
    51e6:	2800      	cmp	r0, #0
    51e8:	d0ed      	beq.n	51c6 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    51ea:	4641      	mov	r1, r8
    51ec:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    51f0:	2201      	movs	r2, #1
    51f2:	4628      	mov	r0, r5
    51f4:	f006 faee 	bl	b7d4 <tx_start>
	__asm__ volatile(
    51f8:	f386 8811 	msr	BASEPRI, r6
    51fc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5204:	20001386 	.word	0x20001386

00005208 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5208:	b530      	push	{r4, r5, lr}
    520a:	b085      	sub	sp, #20
    520c:	4604      	mov	r4, r0
    520e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5210:	f101 0012 	add.w	r0, r1, #18
    5214:	f002 fa46 	bl	76a4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5218:	4b11      	ldr	r3, [pc, #68]	; (5260 <endtx_stoptx_ppi_init+0x58>)
    521a:	4298      	cmp	r0, r3
    521c:	d112      	bne.n	5244 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    521e:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5220:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    5224:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5226:	4a0f      	ldr	r2, [pc, #60]	; (5264 <endtx_stoptx_ppi_init+0x5c>)
    5228:	33a2      	adds	r3, #162	; 0xa2
    522a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    522e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5232:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5234:	7ca9      	ldrb	r1, [r5, #18]
    5236:	2301      	movs	r3, #1
    5238:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    523a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    523e:	2000      	movs	r0, #0
}
    5240:	b005      	add	sp, #20
    5242:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    5244:	4b08      	ldr	r3, [pc, #32]	; (5268 <endtx_stoptx_ppi_init+0x60>)
    5246:	9302      	str	r3, [sp, #8]
    5248:	2000      	movs	r0, #0
    524a:	9001      	str	r0, [sp, #4]
    524c:	9000      	str	r0, [sp, #0]
    524e:	4603      	mov	r3, r0
    5250:	2201      	movs	r2, #1
    5252:	4906      	ldr	r1, [pc, #24]	; (526c <endtx_stoptx_ppi_init+0x64>)
    5254:	f006 fb19 	bl	b88a <z_log_msg2_runtime_create>
		return -EIO;
    5258:	f06f 0004 	mvn.w	r0, #4
    525c:	e7f0      	b.n	5240 <endtx_stoptx_ppi_init+0x38>
    525e:	bf00      	nop
    5260:	0bad0000 	.word	0x0bad0000
    5264:	4001f000 	.word	0x4001f000
    5268:	0000d914 	.word	0x0000d914
    526c:	0000c194 	.word	0x0000c194

00005270 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5270:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5274:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5278:	4b01      	ldr	r3, [pc, #4]	; (5280 <set_comparator+0x10>)
    527a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    527e:	4770      	bx	lr
    5280:	40011000 	.word	0x40011000

00005284 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5284:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5288:	4b01      	ldr	r3, [pc, #4]	; (5290 <get_comparator+0xc>)
    528a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    528e:	4770      	bx	lr
    5290:	40011000 	.word	0x40011000

00005294 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5298:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    529a:	4a02      	ldr	r2, [pc, #8]	; (52a4 <event_enable+0x10>)
    529c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    52a0:	4770      	bx	lr
    52a2:	bf00      	nop
    52a4:	40011000 	.word	0x40011000

000052a8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    52ac:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    52ae:	4a02      	ldr	r2, [pc, #8]	; (52b8 <event_disable+0x10>)
    52b0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    52b4:	4770      	bx	lr
    52b6:	bf00      	nop
    52b8:	40011000 	.word	0x40011000

000052bc <counter>:
     return p_reg->COUNTER;
    52bc:	4b01      	ldr	r3, [pc, #4]	; (52c4 <counter+0x8>)
    52be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    52c2:	4770      	bx	lr
    52c4:	40011000 	.word	0x40011000

000052c8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    52c8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    52ca:	2301      	movs	r3, #1
    52cc:	4083      	lsls	r3, r0
    52ce:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    52d2:	4a10      	ldr	r2, [pc, #64]	; (5314 <compare_int_lock+0x4c>)
    52d4:	f3bf 8f5b 	dmb	ish
    52d8:	e852 1f00 	ldrex	r1, [r2]
    52dc:	ea01 0e0c 	and.w	lr, r1, ip
    52e0:	e842 e400 	strex	r4, lr, [r2]
    52e4:	2c00      	cmp	r4, #0
    52e6:	d1f7      	bne.n	52d8 <compare_int_lock+0x10>
    52e8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    52f0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    52f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    52f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    52fc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5300:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5304:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5308:	420b      	tst	r3, r1
}
    530a:	bf14      	ite	ne
    530c:	2001      	movne	r0, #1
    530e:	2000      	moveq	r0, #0
    5310:	bd10      	pop	{r4, pc}
    5312:	bf00      	nop
    5314:	20000c8c 	.word	0x20000c8c

00005318 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5318:	b570      	push	{r4, r5, r6, lr}
    531a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    531c:	f006 fb57 	bl	b9ce <full_int_lock>
    5320:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5326:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5328:	4a17      	ldr	r2, [pc, #92]	; (5388 <channel_processing_check_and_clear+0x70>)
    532a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    532e:	4213      	tst	r3, r2
    5330:	d105      	bne.n	533e <channel_processing_check_and_clear+0x26>
	bool result = false;
    5332:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    5334:	4628      	mov	r0, r5
    5336:	f006 fb53 	bl	b9e0 <full_int_unlock>

	return result;
}
    533a:	4630      	mov	r0, r6
    533c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    533e:	2301      	movs	r3, #1
    5340:	40a3      	lsls	r3, r4
    5342:	43db      	mvns	r3, r3
    5344:	4a11      	ldr	r2, [pc, #68]	; (538c <channel_processing_check_and_clear+0x74>)
    5346:	f3bf 8f5b 	dmb	ish
    534a:	e852 1f00 	ldrex	r1, [r2]
    534e:	ea01 0003 	and.w	r0, r1, r3
    5352:	e842 0600 	strex	r6, r0, [r2]
    5356:	2e00      	cmp	r6, #0
    5358:	d1f7      	bne.n	534a <channel_processing_check_and_clear+0x32>
    535a:	f3bf 8f5b 	dmb	ish
    535e:	b959      	cbnz	r1, 5378 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5360:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5364:	009b      	lsls	r3, r3, #2
    5366:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    536c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5370:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5372:	b113      	cbz	r3, 537a <channel_processing_check_and_clear+0x62>
    5374:	2301      	movs	r3, #1
    5376:	e000      	b.n	537a <channel_processing_check_and_clear+0x62>
    5378:	2301      	movs	r3, #1
		if (result) {
    537a:	461e      	mov	r6, r3
    537c:	2b00      	cmp	r3, #0
    537e:	d0d9      	beq.n	5334 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5380:	4620      	mov	r0, r4
    5382:	f006 fb15 	bl	b9b0 <event_clear>
    5386:	e7d5      	b.n	5334 <channel_processing_check_and_clear+0x1c>
    5388:	40011000 	.word	0x40011000
    538c:	20000c88 	.word	0x20000c88

00005390 <compare_int_unlock>:
	if (key) {
    5390:	b901      	cbnz	r1, 5394 <compare_int_unlock+0x4>
}
    5392:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5394:	2301      	movs	r3, #1
    5396:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5398:	4a11      	ldr	r2, [pc, #68]	; (53e0 <compare_int_unlock+0x50>)
    539a:	f3bf 8f5b 	dmb	ish
    539e:	e852 1f00 	ldrex	r1, [r2]
    53a2:	4319      	orrs	r1, r3
    53a4:	e842 1c00 	strex	ip, r1, [r2]
    53a8:	f1bc 0f00 	cmp.w	ip, #0
    53ac:	d1f7      	bne.n	539e <compare_int_unlock+0xe>
    53ae:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    53b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    53b6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    53b8:	4a0a      	ldr	r2, [pc, #40]	; (53e4 <compare_int_unlock+0x54>)
    53ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    53be:	f3bf 8f5b 	dmb	ish
    53c2:	4b09      	ldr	r3, [pc, #36]	; (53e8 <compare_int_unlock+0x58>)
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    53ca:	fa23 f000 	lsr.w	r0, r3, r0
    53ce:	f010 0f01 	tst.w	r0, #1
    53d2:	d0de      	beq.n	5392 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    53d4:	4b05      	ldr	r3, [pc, #20]	; (53ec <compare_int_unlock+0x5c>)
    53d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    53da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    53de:	e7d8      	b.n	5392 <compare_int_unlock+0x2>
    53e0:	20000c8c 	.word	0x20000c8c
    53e4:	40011000 	.word	0x40011000
    53e8:	20000c88 	.word	0x20000c88
    53ec:	e000e100 	.word	0xe000e100

000053f0 <sys_clock_timeout_handler>:
{
    53f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    53f4:	4607      	mov	r7, r0
    53f6:	4614      	mov	r4, r2
    53f8:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    53fa:	4610      	mov	r0, r2
    53fc:	4619      	mov	r1, r3
    53fe:	f006 fae3 	bl	b9c8 <absolute_time_to_cc>
    5402:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5404:	4b15      	ldr	r3, [pc, #84]	; (545c <sys_clock_timeout_handler+0x6c>)
    5406:	681a      	ldr	r2, [r3, #0]
    5408:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    540a:	601c      	str	r4, [r3, #0]
    540c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    540e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5412:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5416:	d309      	bcc.n	542c <sys_clock_timeout_handler+0x3c>
	return false;
    5418:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    541a:	f004 ff65 	bl	a2e8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    541e:	4638      	mov	r0, r7
    5420:	f7ff ff30 	bl	5284 <get_comparator>
    5424:	42a8      	cmp	r0, r5
    5426:	d00e      	beq.n	5446 <sys_clock_timeout_handler+0x56>
}
    5428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    542c:	4b0c      	ldr	r3, [pc, #48]	; (5460 <sys_clock_timeout_handler+0x70>)
    542e:	681b      	ldr	r3, [r3, #0]
    5430:	0a1a      	lsrs	r2, r3, #8
    5432:	061b      	lsls	r3, r3, #24
    5434:	eb15 0803 	adds.w	r8, r5, r3
    5438:	f142 0900 	adc.w	r9, r2, #0
    543c:	4b09      	ldr	r3, [pc, #36]	; (5464 <sys_clock_timeout_handler+0x74>)
    543e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    5442:	2401      	movs	r4, #1
    5444:	e7e9      	b.n	541a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    5446:	b11c      	cbz	r4, 5450 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    5448:	4638      	mov	r0, r7
    544a:	f7ff ff23 	bl	5294 <event_enable>
}
    544e:	e7eb      	b.n	5428 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    5450:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5454:	4638      	mov	r0, r7
    5456:	f7ff ff0b 	bl	5270 <set_comparator>
    545a:	e7f5      	b.n	5448 <sys_clock_timeout_handler+0x58>
    545c:	20000488 	.word	0x20000488
    5460:	20000c90 	.word	0x20000c90
    5464:	20000470 	.word	0x20000470

00005468 <z_nrf_rtc_timer_read>:
{
    5468:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    546a:	4b0d      	ldr	r3, [pc, #52]	; (54a0 <z_nrf_rtc_timer_read+0x38>)
    546c:	681c      	ldr	r4, [r3, #0]
    546e:	0a25      	lsrs	r5, r4, #8
    5470:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5472:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5476:	f7ff ff21 	bl	52bc <counter>
    547a:	4603      	mov	r3, r0
	val += cntr;
    547c:	1900      	adds	r0, r0, r4
    547e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5486:	d20a      	bcs.n	549e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5488:	4b06      	ldr	r3, [pc, #24]	; (54a4 <z_nrf_rtc_timer_read+0x3c>)
    548a:	e9d3 2300 	ldrd	r2, r3, [r3]
    548e:	4290      	cmp	r0, r2
    5490:	eb71 0303 	sbcs.w	r3, r1, r3
    5494:	d203      	bcs.n	549e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5496:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    549a:	f141 0100 	adc.w	r1, r1, #0
}
    549e:	bd38      	pop	{r3, r4, r5, pc}
    54a0:	20000c90 	.word	0x20000c90
    54a4:	20000470 	.word	0x20000470

000054a8 <compare_set_nolocks>:
{
    54a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54aa:	4606      	mov	r6, r0
    54ac:	4614      	mov	r4, r2
    54ae:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    54b0:	4610      	mov	r0, r2
    54b2:	4619      	mov	r1, r3
    54b4:	f006 fa88 	bl	b9c8 <absolute_time_to_cc>
    54b8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    54ba:	f7ff ffd5 	bl	5468 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    54be:	42a0      	cmp	r0, r4
    54c0:	eb71 0305 	sbcs.w	r3, r1, r5
    54c4:	d21d      	bcs.n	5502 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    54c6:	1a23      	subs	r3, r4, r0
    54c8:	eb65 0101 	sbc.w	r1, r5, r1
    54cc:	4a1b      	ldr	r2, [pc, #108]	; (553c <compare_set_nolocks+0x94>)
    54ce:	4293      	cmp	r3, r2
    54d0:	f171 0300 	sbcs.w	r3, r1, #0
    54d4:	d22f      	bcs.n	5536 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    54d6:	4b1a      	ldr	r3, [pc, #104]	; (5540 <compare_set_nolocks+0x98>)
    54d8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    54dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    54e0:	42ab      	cmp	r3, r5
    54e2:	bf08      	it	eq
    54e4:	42a2      	cmpeq	r2, r4
    54e6:	d01a      	beq.n	551e <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    54e8:	4639      	mov	r1, r7
    54ea:	4630      	mov	r0, r6
    54ec:	f006 fa7d 	bl	b9ea <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    54f0:	4639      	mov	r1, r7
    54f2:	f006 fa59 	bl	b9a8 <counter_sub>
    54f6:	1900      	adds	r0, r0, r4
    54f8:	f145 0300 	adc.w	r3, r5, #0
    54fc:	4604      	mov	r4, r0
    54fe:	461d      	mov	r5, r3
    5500:	e00d      	b.n	551e <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    5502:	2301      	movs	r3, #1
    5504:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5506:	4a0f      	ldr	r2, [pc, #60]	; (5544 <compare_set_nolocks+0x9c>)
    5508:	f3bf 8f5b 	dmb	ish
    550c:	e852 1f00 	ldrex	r1, [r2]
    5510:	4319      	orrs	r1, r3
    5512:	e842 1000 	strex	r0, r1, [r2]
    5516:	2800      	cmp	r0, #0
    5518:	d1f8      	bne.n	550c <compare_set_nolocks+0x64>
    551a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    551e:	4b08      	ldr	r3, [pc, #32]	; (5540 <compare_set_nolocks+0x98>)
    5520:	0132      	lsls	r2, r6, #4
    5522:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5526:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    552a:	9906      	ldr	r1, [sp, #24]
    552c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    552e:	9b07      	ldr	r3, [sp, #28]
    5530:	6073      	str	r3, [r6, #4]
	return ret;
    5532:	2000      	movs	r0, #0
}
    5534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    5536:	f06f 0015 	mvn.w	r0, #21
    553a:	e7fb      	b.n	5534 <compare_set_nolocks+0x8c>
    553c:	01000001 	.word	0x01000001
    5540:	20000478 	.word	0x20000478
    5544:	20000c88 	.word	0x20000c88

00005548 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5548:	b530      	push	{r4, r5, lr}
    554a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    554c:	2300      	movs	r3, #0
    554e:	4a1d      	ldr	r2, [pc, #116]	; (55c4 <sys_clock_driver_init+0x7c>)
    5550:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5554:	2b00      	cmp	r3, #0
    5556:	dd24      	ble.n	55a2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    5558:	4c1a      	ldr	r4, [pc, #104]	; (55c4 <sys_clock_driver_init+0x7c>)
    555a:	2502      	movs	r5, #2
    555c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5560:	4b19      	ldr	r3, [pc, #100]	; (55c8 <sys_clock_driver_init+0x80>)
    5562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5566:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    556a:	2200      	movs	r2, #0
    556c:	2101      	movs	r1, #1
    556e:	2011      	movs	r0, #17
    5570:	f7fd fed2 	bl	3318 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5574:	2011      	movs	r0, #17
    5576:	f7fd feb3 	bl	32e0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    557a:	2301      	movs	r3, #1
    557c:	60a3      	str	r3, [r4, #8]
    557e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5580:	4a12      	ldr	r2, [pc, #72]	; (55cc <sys_clock_driver_init+0x84>)
    5582:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5584:	2400      	movs	r4, #0
    5586:	9401      	str	r4, [sp, #4]
    5588:	4b11      	ldr	r3, [pc, #68]	; (55d0 <sys_clock_driver_init+0x88>)
    558a:	9300      	str	r3, [sp, #0]
    558c:	4a11      	ldr	r2, [pc, #68]	; (55d4 <sys_clock_driver_init+0x8c>)
    558e:	2300      	movs	r3, #0
    5590:	4620      	mov	r0, r4
    5592:	f006 fa65 	bl	ba60 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5596:	4628      	mov	r0, r5
    5598:	f7ff fabc 	bl	4b14 <z_nrf_clock_control_lf_on>

	return 0;
}
    559c:	4620      	mov	r0, r4
    559e:	b003      	add	sp, #12
    55a0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    55a2:	4a0d      	ldr	r2, [pc, #52]	; (55d8 <sys_clock_driver_init+0x90>)
    55a4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    55a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    55b0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    55b8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    55ba:	4902      	ldr	r1, [pc, #8]	; (55c4 <sys_clock_driver_init+0x7c>)
    55bc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    55c0:	3301      	adds	r3, #1
    55c2:	e7c7      	b.n	5554 <sys_clock_driver_init+0xc>
    55c4:	40011000 	.word	0x40011000
    55c8:	e000e100 	.word	0xe000e100
    55cc:	20000c8c 	.word	0x20000c8c
    55d0:	000053f1 	.word	0x000053f1
    55d4:	007fffff 	.word	0x007fffff
    55d8:	20000478 	.word	0x20000478

000055dc <process_channel>:
{
    55dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55e0:	b082      	sub	sp, #8
    55e2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    55e4:	f7ff fe98 	bl	5318 <channel_processing_check_and_clear>
    55e8:	b910      	cbnz	r0, 55f0 <process_channel+0x14>
}
    55ea:	b002      	add	sp, #8
    55ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    55f0:	f7ff ff3a 	bl	5468 <z_nrf_rtc_timer_read>
    55f4:	4682      	mov	sl, r0
    55f6:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    55f8:	f006 f9e9 	bl	b9ce <full_int_lock>
    55fc:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    55fe:	4b13      	ldr	r3, [pc, #76]	; (564c <process_channel+0x70>)
    5600:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5604:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5608:	45c2      	cmp	sl, r8
    560a:	eb76 0309 	sbcs.w	r3, r6, r9
    560e:	d20b      	bcs.n	5628 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5610:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5612:	4628      	mov	r0, r5
    5614:	f006 f9e4 	bl	b9e0 <full_int_unlock>
		if (handler) {
    5618:	2e00      	cmp	r6, #0
    561a:	d0e6      	beq.n	55ea <process_channel+0xe>
			handler(chan, expire_time, user_context);
    561c:	9700      	str	r7, [sp, #0]
    561e:	4642      	mov	r2, r8
    5620:	464b      	mov	r3, r9
    5622:	4620      	mov	r0, r4
    5624:	47b0      	blx	r6
}
    5626:	e7e0      	b.n	55ea <process_channel+0xe>
			handler = cc_data[chan].callback;
    5628:	4a08      	ldr	r2, [pc, #32]	; (564c <process_channel+0x70>)
    562a:	0123      	lsls	r3, r4, #4
    562c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5630:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5632:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    5634:	2000      	movs	r0, #0
    5636:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    563c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5640:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5644:	4620      	mov	r0, r4
    5646:	f7ff fe2f 	bl	52a8 <event_disable>
    564a:	e7e2      	b.n	5612 <process_channel+0x36>
    564c:	20000478 	.word	0x20000478

00005650 <rtc_nrf_isr>:
{
    5650:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5652:	4b0e      	ldr	r3, [pc, #56]	; (568c <rtc_nrf_isr+0x3c>)
    5654:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5658:	f013 0f02 	tst.w	r3, #2
    565c:	d00d      	beq.n	567a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    565e:	4b0b      	ldr	r3, [pc, #44]	; (568c <rtc_nrf_isr+0x3c>)
    5660:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    5664:	b14b      	cbz	r3, 567a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5666:	4b09      	ldr	r3, [pc, #36]	; (568c <rtc_nrf_isr+0x3c>)
    5668:	2200      	movs	r2, #0
    566a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    566e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    5672:	4a07      	ldr	r2, [pc, #28]	; (5690 <rtc_nrf_isr+0x40>)
    5674:	6813      	ldr	r3, [r2, #0]
    5676:	3301      	adds	r3, #1
    5678:	6013      	str	r3, [r2, #0]
{
    567a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    567c:	2c00      	cmp	r4, #0
    567e:	dd00      	ble.n	5682 <rtc_nrf_isr+0x32>
}
    5680:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5682:	4620      	mov	r0, r4
    5684:	f7ff ffaa 	bl	55dc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5688:	3401      	adds	r4, #1
    568a:	e7f7      	b.n	567c <rtc_nrf_isr+0x2c>
    568c:	40011000 	.word	0x40011000
    5690:	20000c90 	.word	0x20000c90

00005694 <sys_clock_set_timeout>:
{
    5694:	b510      	push	{r4, lr}
    5696:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5698:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    569c:	d006      	beq.n	56ac <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    569e:	2801      	cmp	r0, #1
    56a0:	dd06      	ble.n	56b0 <sys_clock_set_timeout+0x1c>
    56a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    56a6:	da05      	bge.n	56b4 <sys_clock_set_timeout+0x20>
    56a8:	1e44      	subs	r4, r0, #1
    56aa:	e004      	b.n	56b6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    56ac:	480f      	ldr	r0, [pc, #60]	; (56ec <sys_clock_set_timeout+0x58>)
    56ae:	e7f8      	b.n	56a2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    56b0:	2400      	movs	r4, #0
    56b2:	e000      	b.n	56b6 <sys_clock_set_timeout+0x22>
    56b4:	4c0d      	ldr	r4, [pc, #52]	; (56ec <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    56b6:	f7ff fed7 	bl	5468 <z_nrf_rtc_timer_read>
    56ba:	4b0d      	ldr	r3, [pc, #52]	; (56f0 <sys_clock_set_timeout+0x5c>)
    56bc:	6819      	ldr	r1, [r3, #0]
    56be:	685b      	ldr	r3, [r3, #4]
    56c0:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    56c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    56c6:	d300      	bcc.n	56ca <sys_clock_set_timeout+0x36>
		ticks = 0;
    56c8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    56ca:	4420      	add	r0, r4
    56cc:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    56ce:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    56d2:	d300      	bcc.n	56d6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    56d4:	4a05      	ldr	r2, [pc, #20]	; (56ec <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    56d6:	2000      	movs	r0, #0
    56d8:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    56da:	9001      	str	r0, [sp, #4]
    56dc:	4905      	ldr	r1, [pc, #20]	; (56f4 <sys_clock_set_timeout+0x60>)
    56de:	9100      	str	r1, [sp, #0]
    56e0:	f143 0300 	adc.w	r3, r3, #0
    56e4:	f006 f9bc 	bl	ba60 <compare_set>
}
    56e8:	b002      	add	sp, #8
    56ea:	bd10      	pop	{r4, pc}
    56ec:	007fffff 	.word	0x007fffff
    56f0:	20000488 	.word	0x20000488
    56f4:	000053f1 	.word	0x000053f1

000056f8 <sys_clock_elapsed>:
{
    56f8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    56fa:	f7ff feb5 	bl	5468 <z_nrf_rtc_timer_read>
    56fe:	4b02      	ldr	r3, [pc, #8]	; (5708 <sys_clock_elapsed+0x10>)
    5700:	681b      	ldr	r3, [r3, #0]
}
    5702:	1ac0      	subs	r0, r0, r3
    5704:	bd08      	pop	{r3, pc}
    5706:	bf00      	nop
    5708:	20000488 	.word	0x20000488

0000570c <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5710:	460c      	mov	r4, r1
    5712:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    5714:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5718:	d002      	beq.n	5720 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    571a:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    571e:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    5720:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    5724:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    5728:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    572c:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    5730:	f010 0f20 	tst.w	r0, #32
    5734:	d01d      	beq.n	5772 <nrf_pin_configure+0x66>
    5736:	b1fb      	cbz	r3, 5778 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    5738:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    573c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5740:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5742:	f013 0f01 	tst.w	r3, #1
    5746:	d019      	beq.n	577c <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    5748:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    574c:	096d      	lsrs	r5, r5, #5
    574e:	d023      	beq.n	5798 <nrf_pin_configure+0x8c>
    5750:	bb2d      	cbnz	r5, 579e <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    5752:	4d19      	ldr	r5, [pc, #100]	; (57b8 <nrf_pin_configure+0xac>)
    5754:	f240 232e 	movw	r3, #558	; 0x22e
    5758:	462a      	mov	r2, r5
    575a:	4918      	ldr	r1, [pc, #96]	; (57bc <nrf_pin_configure+0xb0>)
    575c:	4818      	ldr	r0, [pc, #96]	; (57c0 <nrf_pin_configure+0xb4>)
    575e:	f005 fc02 	bl	af66 <assert_print>
    5762:	f240 212e 	movw	r1, #558	; 0x22e
    5766:	4628      	mov	r0, r5
    5768:	f005 fbf6 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    576c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5770:	e016      	b.n	57a0 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    5772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5776:	e7e1      	b.n	573c <nrf_pin_configure+0x30>
    switch (port)
    5778:	2300      	movs	r3, #0
    577a:	e7df      	b.n	573c <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    577c:	4e0e      	ldr	r6, [pc, #56]	; (57b8 <nrf_pin_configure+0xac>)
    577e:	f240 2329 	movw	r3, #553	; 0x229
    5782:	4632      	mov	r2, r6
    5784:	490f      	ldr	r1, [pc, #60]	; (57c4 <nrf_pin_configure+0xb8>)
    5786:	480e      	ldr	r0, [pc, #56]	; (57c0 <nrf_pin_configure+0xb4>)
    5788:	f005 fbed 	bl	af66 <assert_print>
    578c:	f240 2129 	movw	r1, #553	; 0x229
    5790:	4630      	mov	r0, r6
    5792:	f005 fbe1 	bl	af58 <assert_post_action>
    5796:	e7d7      	b.n	5748 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    5798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    579c:	e000      	b.n	57a0 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    579e:	4b0a      	ldr	r3, [pc, #40]	; (57c8 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    57a0:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    57a4:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    57a8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    57ac:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    57b0:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    57b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    57b8:	0000d868 	.word	0x0000d868
    57bc:	0000cc7c 	.word	0x0000cc7c
    57c0:	0000c5c0 	.word	0x0000c5c0
    57c4:	0000d89c 	.word	0x0000d89c
    57c8:	50000300 	.word	0x50000300

000057cc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    57cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57d0:	4605      	mov	r5, r0
    57d2:	460e      	mov	r6, r1
    57d4:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    57d6:	2400      	movs	r4, #0
    57d8:	e04e      	b.n	5878 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    57da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    57de:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    57e2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    57e6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    57ea:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    57ee:	f013 0f20 	tst.w	r3, #32
    57f2:	d01f      	beq.n	5834 <pinctrl_configure_pins+0x68>
    57f4:	b109      	cbz	r1, 57fa <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    57f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    57fa:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    57fe:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5800:	f012 0f01 	tst.w	r2, #1
    5804:	d019      	beq.n	583a <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    5806:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    580a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    580e:	d023      	beq.n	5858 <pinctrl_configure_pins+0x8c>
    5810:	bb2b      	cbnz	r3, 585e <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    5812:	f8df 9344 	ldr.w	r9, [pc, #836]	; 5b58 <pinctrl_configure_pins+0x38c>
    5816:	f240 232e 	movw	r3, #558	; 0x22e
    581a:	464a      	mov	r2, r9
    581c:	49cf      	ldr	r1, [pc, #828]	; (5b5c <pinctrl_configure_pins+0x390>)
    581e:	48d0      	ldr	r0, [pc, #832]	; (5b60 <pinctrl_configure_pins+0x394>)
    5820:	f005 fba1 	bl	af66 <assert_print>
    5824:	f240 212e 	movw	r1, #558	; 0x22e
    5828:	4648      	mov	r0, r9
    582a:	f005 fb95 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    582e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5832:	e015      	b.n	5860 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    5834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5838:	e7df      	b.n	57fa <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    583a:	f8df a31c 	ldr.w	sl, [pc, #796]	; 5b58 <pinctrl_configure_pins+0x38c>
    583e:	f240 2329 	movw	r3, #553	; 0x229
    5842:	4652      	mov	r2, sl
    5844:	49c7      	ldr	r1, [pc, #796]	; (5b64 <pinctrl_configure_pins+0x398>)
    5846:	48c6      	ldr	r0, [pc, #792]	; (5b60 <pinctrl_configure_pins+0x394>)
    5848:	f005 fb8d 	bl	af66 <assert_print>
    584c:	f240 2129 	movw	r1, #553	; 0x229
    5850:	4650      	mov	r0, sl
    5852:	f005 fb81 	bl	af58 <assert_post_action>
    5856:	e7d6      	b.n	5806 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    5858:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    585c:	e000      	b.n	5860 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    585e:	4ac2      	ldr	r2, [pc, #776]	; (5b68 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5860:	2101      	movs	r1, #1
    5862:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    5866:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    586a:	460a      	mov	r2, r1
    586c:	f855 0008 	ldr.w	r0, [r5, r8]
    5870:	f7ff ff4c 	bl	570c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5874:	3401      	adds	r4, #1
    5876:	b2e4      	uxtb	r4, r4
    5878:	42b4      	cmp	r4, r6
    587a:	f080 841e 	bcs.w	60ba <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    587e:	ea4f 0884 	mov.w	r8, r4, lsl #2
    5882:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5886:	0c1a      	lsrs	r2, r3, #16
    5888:	2a22      	cmp	r2, #34	; 0x22
    588a:	f200 8418 	bhi.w	60be <pinctrl_configure_pins+0x8f2>
    588e:	a101      	add	r1, pc, #4	; (adr r1, 5894 <pinctrl_configure_pins+0xc8>)
    5890:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5894:	000057db 	.word	0x000057db
    5898:	00005921 	.word	0x00005921
    589c:	00005937 	.word	0x00005937
    58a0:	000059d7 	.word	0x000059d7
    58a4:	000059ed 	.word	0x000059ed
    58a8:	00005a8d 	.word	0x00005a8d
    58ac:	00005b2d 	.word	0x00005b2d
    58b0:	000060bf 	.word	0x000060bf
    58b4:	000060bf 	.word	0x000060bf
    58b8:	000060bf 	.word	0x000060bf
    58bc:	000060bf 	.word	0x000060bf
    58c0:	00005b43 	.word	0x00005b43
    58c4:	00005b6d 	.word	0x00005b6d
    58c8:	000060bf 	.word	0x000060bf
    58cc:	000060bf 	.word	0x000060bf
    58d0:	000060bf 	.word	0x000060bf
    58d4:	000060bf 	.word	0x000060bf
    58d8:	000060bf 	.word	0x000060bf
    58dc:	000060bf 	.word	0x000060bf
    58e0:	000060bf 	.word	0x000060bf
    58e4:	000060bf 	.word	0x000060bf
    58e8:	000060bf 	.word	0x000060bf
    58ec:	00005b83 	.word	0x00005b83
    58f0:	00005ca9 	.word	0x00005ca9
    58f4:	00005dcf 	.word	0x00005dcf
    58f8:	00005f0b 	.word	0x00005f0b
    58fc:	000060bf 	.word	0x000060bf
    5900:	000060bf 	.word	0x000060bf
    5904:	000060bf 	.word	0x000060bf
    5908:	00006031 	.word	0x00006031
    590c:	00006047 	.word	0x00006047
    5910:	0000605d 	.word	0x0000605d
    5914:	00006073 	.word	0x00006073
    5918:	0000608b 	.word	0x0000608b
    591c:	000060a3 	.word	0x000060a3
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5924:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5928:	2200      	movs	r2, #0
    592a:	4611      	mov	r1, r2
    592c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5930:	f7ff feec 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5934:	e79e      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    5936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    593a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    593e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5942:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5946:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    594a:	f013 0f20 	tst.w	r3, #32
    594e:	d01f      	beq.n	5990 <pinctrl_configure_pins+0x1c4>
    5950:	b30a      	cbz	r2, 5996 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    5952:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5956:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    595a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    595c:	f013 0f01 	tst.w	r3, #1
    5960:	d01b      	beq.n	599a <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    5962:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5966:	ea5f 1359 	movs.w	r3, r9, lsr #5
    596a:	d025      	beq.n	59b8 <pinctrl_configure_pins+0x1ec>
    596c:	bb3b      	cbnz	r3, 59be <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    596e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 5b58 <pinctrl_configure_pins+0x38c>
    5972:	f240 232e 	movw	r3, #558	; 0x22e
    5976:	464a      	mov	r2, r9
    5978:	4978      	ldr	r1, [pc, #480]	; (5b5c <pinctrl_configure_pins+0x390>)
    597a:	4879      	ldr	r0, [pc, #484]	; (5b60 <pinctrl_configure_pins+0x394>)
    597c:	f005 faf3 	bl	af66 <assert_print>
    5980:	f240 212e 	movw	r1, #558	; 0x22e
    5984:	4648      	mov	r0, r9
    5986:	f005 fae7 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    598a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    598e:	e017      	b.n	59c0 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    5990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5994:	e7df      	b.n	5956 <pinctrl_configure_pins+0x18a>
    switch (port)
    5996:	2300      	movs	r3, #0
    5998:	e7dd      	b.n	5956 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    599a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5b58 <pinctrl_configure_pins+0x38c>
    599e:	f240 2329 	movw	r3, #553	; 0x229
    59a2:	4652      	mov	r2, sl
    59a4:	496f      	ldr	r1, [pc, #444]	; (5b64 <pinctrl_configure_pins+0x398>)
    59a6:	486e      	ldr	r0, [pc, #440]	; (5b60 <pinctrl_configure_pins+0x394>)
    59a8:	f005 fadd 	bl	af66 <assert_print>
    59ac:	f240 2129 	movw	r1, #553	; 0x229
    59b0:	4650      	mov	r0, sl
    59b2:	f005 fad1 	bl	af58 <assert_post_action>
    59b6:	e7d4      	b.n	5962 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    59b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    59bc:	e000      	b.n	59c0 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    59be:	4a6a      	ldr	r2, [pc, #424]	; (5b68 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    59c0:	2101      	movs	r1, #1
    59c2:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    59c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    59ca:	460a      	mov	r2, r1
    59cc:	f855 0008 	ldr.w	r0, [r5, r8]
    59d0:	f7ff fe9c 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    59d4:	e74e      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    59d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    59da:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    59de:	2200      	movs	r2, #0
    59e0:	4611      	mov	r1, r2
    59e2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    59e6:	f7ff fe91 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    59ea:	e743      	b.n	5874 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    59ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    59f0:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    59f4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    59f8:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    59fc:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5a00:	f013 0f20 	tst.w	r3, #32
    5a04:	d01f      	beq.n	5a46 <pinctrl_configure_pins+0x27a>
    5a06:	b30a      	cbz	r2, 5a4c <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    5a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5a0c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5a10:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a12:	f013 0f01 	tst.w	r3, #1
    5a16:	d01b      	beq.n	5a50 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    5a18:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a1c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5a20:	d025      	beq.n	5a6e <pinctrl_configure_pins+0x2a2>
    5a22:	bb3b      	cbnz	r3, 5a74 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    5a24:	f8df 9130 	ldr.w	r9, [pc, #304]	; 5b58 <pinctrl_configure_pins+0x38c>
    5a28:	f240 232e 	movw	r3, #558	; 0x22e
    5a2c:	464a      	mov	r2, r9
    5a2e:	494b      	ldr	r1, [pc, #300]	; (5b5c <pinctrl_configure_pins+0x390>)
    5a30:	484b      	ldr	r0, [pc, #300]	; (5b60 <pinctrl_configure_pins+0x394>)
    5a32:	f005 fa98 	bl	af66 <assert_print>
    5a36:	f240 212e 	movw	r1, #558	; 0x22e
    5a3a:	4648      	mov	r0, r9
    5a3c:	f005 fa8c 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5a40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5a44:	e017      	b.n	5a76 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    5a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a4a:	e7df      	b.n	5a0c <pinctrl_configure_pins+0x240>
    switch (port)
    5a4c:	2300      	movs	r3, #0
    5a4e:	e7dd      	b.n	5a0c <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a50:	f8df a104 	ldr.w	sl, [pc, #260]	; 5b58 <pinctrl_configure_pins+0x38c>
    5a54:	f240 2329 	movw	r3, #553	; 0x229
    5a58:	4652      	mov	r2, sl
    5a5a:	4942      	ldr	r1, [pc, #264]	; (5b64 <pinctrl_configure_pins+0x398>)
    5a5c:	4840      	ldr	r0, [pc, #256]	; (5b60 <pinctrl_configure_pins+0x394>)
    5a5e:	f005 fa82 	bl	af66 <assert_print>
    5a62:	f240 2129 	movw	r1, #553	; 0x229
    5a66:	4650      	mov	r0, sl
    5a68:	f005 fa76 	bl	af58 <assert_post_action>
    5a6c:	e7d4      	b.n	5a18 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    5a6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5a72:	e000      	b.n	5a76 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a74:	4a3c      	ldr	r2, [pc, #240]	; (5b68 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5a76:	2101      	movs	r1, #1
    5a78:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5a7c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5a80:	2200      	movs	r2, #0
    5a82:	f855 0008 	ldr.w	r0, [r5, r8]
    5a86:	f7ff fe41 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5a8a:	e6f3      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5a90:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5a94:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5a98:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5a9c:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5aa0:	f013 0f20 	tst.w	r3, #32
    5aa4:	d01f      	beq.n	5ae6 <pinctrl_configure_pins+0x31a>
    5aa6:	b30a      	cbz	r2, 5aec <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    5aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5aac:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5ab0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ab2:	f013 0f01 	tst.w	r3, #1
    5ab6:	d01b      	beq.n	5af0 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    5ab8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5abc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5ac0:	d025      	beq.n	5b0e <pinctrl_configure_pins+0x342>
    5ac2:	bb3b      	cbnz	r3, 5b14 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    5ac4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5b58 <pinctrl_configure_pins+0x38c>
    5ac8:	f240 232e 	movw	r3, #558	; 0x22e
    5acc:	464a      	mov	r2, r9
    5ace:	4923      	ldr	r1, [pc, #140]	; (5b5c <pinctrl_configure_pins+0x390>)
    5ad0:	4823      	ldr	r0, [pc, #140]	; (5b60 <pinctrl_configure_pins+0x394>)
    5ad2:	f005 fa48 	bl	af66 <assert_print>
    5ad6:	f240 212e 	movw	r1, #558	; 0x22e
    5ada:	4648      	mov	r0, r9
    5adc:	f005 fa3c 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5ae0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5ae4:	e017      	b.n	5b16 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    5ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aea:	e7df      	b.n	5aac <pinctrl_configure_pins+0x2e0>
    switch (port)
    5aec:	2300      	movs	r3, #0
    5aee:	e7dd      	b.n	5aac <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5af0:	f8df a064 	ldr.w	sl, [pc, #100]	; 5b58 <pinctrl_configure_pins+0x38c>
    5af4:	f240 2329 	movw	r3, #553	; 0x229
    5af8:	4652      	mov	r2, sl
    5afa:	491a      	ldr	r1, [pc, #104]	; (5b64 <pinctrl_configure_pins+0x398>)
    5afc:	4818      	ldr	r0, [pc, #96]	; (5b60 <pinctrl_configure_pins+0x394>)
    5afe:	f005 fa32 	bl	af66 <assert_print>
    5b02:	f240 2129 	movw	r1, #553	; 0x229
    5b06:	4650      	mov	r0, sl
    5b08:	f005 fa26 	bl	af58 <assert_post_action>
    5b0c:	e7d4      	b.n	5ab8 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    5b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5b12:	e000      	b.n	5b16 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b14:	4a14      	ldr	r2, [pc, #80]	; (5b68 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5b16:	2101      	movs	r1, #1
    5b18:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5b1c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5b20:	460a      	mov	r2, r1
    5b22:	f855 0008 	ldr.w	r0, [r5, r8]
    5b26:	f7ff fdf1 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5b2a:	e6a3      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b30:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5b34:	2200      	movs	r2, #0
    5b36:	4611      	mov	r1, r2
    5b38:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5b3c:	f7ff fde6 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5b40:	e698      	b.n	5874 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    5b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b46:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5b4a:	2200      	movs	r2, #0
    5b4c:	4611      	mov	r1, r2
    5b4e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5b52:	f7ff fddb 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5b56:	e68d      	b.n	5874 <pinctrl_configure_pins+0xa8>
    5b58:	0000d868 	.word	0x0000d868
    5b5c:	0000cc7c 	.word	0x0000cc7c
    5b60:	0000c5c0 	.word	0x0000c5c0
    5b64:	0000d89c 	.word	0x0000d89c
    5b68:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b70:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5b74:	2200      	movs	r2, #0
    5b76:	4611      	mov	r1, r2
    5b78:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5b7c:	f7ff fdc6 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5b80:	e678      	b.n	5874 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    5b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b86:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5b8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5b8e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5b92:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5b96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5b9a:	d144      	bne.n	5c26 <pinctrl_configure_pins+0x45a>
    switch (port)
    5b9c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5ba0:	d01f      	beq.n	5be2 <pinctrl_configure_pins+0x416>
    5ba2:	b10b      	cbz	r3, 5ba8 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    5ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5ba8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5bac:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5bae:	f012 0f01 	tst.w	r2, #1
    5bb2:	d019      	beq.n	5be8 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    5bb4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bb8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5bbc:	d023      	beq.n	5c06 <pinctrl_configure_pins+0x43a>
    5bbe:	bb2b      	cbnz	r3, 5c0c <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    5bc0:	f8df 9300 	ldr.w	r9, [pc, #768]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5bc4:	f240 232e 	movw	r3, #558	; 0x22e
    5bc8:	464a      	mov	r2, r9
    5bca:	49bf      	ldr	r1, [pc, #764]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5bcc:	48bf      	ldr	r0, [pc, #764]	; (5ecc <pinctrl_configure_pins+0x700>)
    5bce:	f005 f9ca 	bl	af66 <assert_print>
    5bd2:	f240 212e 	movw	r1, #558	; 0x22e
    5bd6:	4648      	mov	r0, r9
    5bd8:	f005 f9be 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5bdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5be0:	e015      	b.n	5c0e <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    5be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5be6:	e7df      	b.n	5ba8 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5be8:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5bec:	f240 2329 	movw	r3, #553	; 0x229
    5bf0:	4652      	mov	r2, sl
    5bf2:	49b7      	ldr	r1, [pc, #732]	; (5ed0 <pinctrl_configure_pins+0x704>)
    5bf4:	48b5      	ldr	r0, [pc, #724]	; (5ecc <pinctrl_configure_pins+0x700>)
    5bf6:	f005 f9b6 	bl	af66 <assert_print>
    5bfa:	f240 2129 	movw	r1, #553	; 0x229
    5bfe:	4650      	mov	r0, sl
    5c00:	f005 f9aa 	bl	af58 <assert_post_action>
    5c04:	e7d6      	b.n	5bb4 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    5c06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5c0a:	e000      	b.n	5c0e <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c0c:	4ab1      	ldr	r2, [pc, #708]	; (5ed4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5c0e:	2301      	movs	r3, #1
    5c10:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5c14:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5c18:	2201      	movs	r2, #1
    5c1a:	4611      	mov	r1, r2
    5c1c:	f855 0008 	ldr.w	r0, [r5, r8]
    5c20:	f7ff fd74 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5c24:	e626      	b.n	5874 <pinctrl_configure_pins+0xa8>
    switch (port)
    5c26:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5c2a:	d01f      	beq.n	5c6c <pinctrl_configure_pins+0x4a0>
    5c2c:	b30b      	cbz	r3, 5c72 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    5c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5c32:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5c36:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5c38:	f013 0f01 	tst.w	r3, #1
    5c3c:	d01b      	beq.n	5c76 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    5c3e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c42:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5c46:	d025      	beq.n	5c94 <pinctrl_configure_pins+0x4c8>
    5c48:	bb3b      	cbnz	r3, 5c9a <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    5c4a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5c4e:	f240 232e 	movw	r3, #558	; 0x22e
    5c52:	464a      	mov	r2, r9
    5c54:	499c      	ldr	r1, [pc, #624]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5c56:	489d      	ldr	r0, [pc, #628]	; (5ecc <pinctrl_configure_pins+0x700>)
    5c58:	f005 f985 	bl	af66 <assert_print>
    5c5c:	f240 212e 	movw	r1, #558	; 0x22e
    5c60:	4648      	mov	r0, r9
    5c62:	f005 f979 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5c6a:	e017      	b.n	5c9c <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    5c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c70:	e7df      	b.n	5c32 <pinctrl_configure_pins+0x466>
    switch (port)
    5c72:	2300      	movs	r3, #0
    5c74:	e7dd      	b.n	5c32 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5c76:	f8df a24c 	ldr.w	sl, [pc, #588]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5c7a:	f240 2329 	movw	r3, #553	; 0x229
    5c7e:	4652      	mov	r2, sl
    5c80:	4993      	ldr	r1, [pc, #588]	; (5ed0 <pinctrl_configure_pins+0x704>)
    5c82:	4892      	ldr	r0, [pc, #584]	; (5ecc <pinctrl_configure_pins+0x700>)
    5c84:	f005 f96f 	bl	af66 <assert_print>
    5c88:	f240 2129 	movw	r1, #553	; 0x229
    5c8c:	4650      	mov	r0, sl
    5c8e:	f005 f963 	bl	af58 <assert_post_action>
    5c92:	e7d4      	b.n	5c3e <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    5c94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5c98:	e000      	b.n	5c9c <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c9a:	4a8e      	ldr	r2, [pc, #568]	; (5ed4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5c9c:	2301      	movs	r3, #1
    5c9e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5ca2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5ca6:	e7b7      	b.n	5c18 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cac:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5cb0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5cb4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5cb8:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5cbc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5cc0:	d144      	bne.n	5d4c <pinctrl_configure_pins+0x580>
    switch (port)
    5cc2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5cc6:	d01f      	beq.n	5d08 <pinctrl_configure_pins+0x53c>
    5cc8:	b10b      	cbz	r3, 5cce <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    5cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5cce:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5cd2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5cd4:	f012 0f01 	tst.w	r2, #1
    5cd8:	d019      	beq.n	5d0e <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    5cda:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5cde:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5ce2:	d023      	beq.n	5d2c <pinctrl_configure_pins+0x560>
    5ce4:	bb2b      	cbnz	r3, 5d32 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    5ce6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5cea:	f240 232e 	movw	r3, #558	; 0x22e
    5cee:	464a      	mov	r2, r9
    5cf0:	4975      	ldr	r1, [pc, #468]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5cf2:	4876      	ldr	r0, [pc, #472]	; (5ecc <pinctrl_configure_pins+0x700>)
    5cf4:	f005 f937 	bl	af66 <assert_print>
    5cf8:	f240 212e 	movw	r1, #558	; 0x22e
    5cfc:	4648      	mov	r0, r9
    5cfe:	f005 f92b 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5d02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5d06:	e015      	b.n	5d34 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    5d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d0c:	e7df      	b.n	5cce <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d0e:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5d12:	f240 2329 	movw	r3, #553	; 0x229
    5d16:	4652      	mov	r2, sl
    5d18:	496d      	ldr	r1, [pc, #436]	; (5ed0 <pinctrl_configure_pins+0x704>)
    5d1a:	486c      	ldr	r0, [pc, #432]	; (5ecc <pinctrl_configure_pins+0x700>)
    5d1c:	f005 f923 	bl	af66 <assert_print>
    5d20:	f240 2129 	movw	r1, #553	; 0x229
    5d24:	4650      	mov	r0, sl
    5d26:	f005 f917 	bl	af58 <assert_post_action>
    5d2a:	e7d6      	b.n	5cda <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    5d2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5d30:	e000      	b.n	5d34 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d32:	4a68      	ldr	r2, [pc, #416]	; (5ed4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5d34:	2301      	movs	r3, #1
    5d36:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5d3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5d3e:	2201      	movs	r2, #1
    5d40:	4611      	mov	r1, r2
    5d42:	f855 0008 	ldr.w	r0, [r5, r8]
    5d46:	f7ff fce1 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5d4a:	e593      	b.n	5874 <pinctrl_configure_pins+0xa8>
    switch (port)
    5d4c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5d50:	d01f      	beq.n	5d92 <pinctrl_configure_pins+0x5c6>
    5d52:	b30b      	cbz	r3, 5d98 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    5d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5d58:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d5c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d5e:	f013 0f01 	tst.w	r3, #1
    5d62:	d01b      	beq.n	5d9c <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    5d64:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d68:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5d6c:	d025      	beq.n	5dba <pinctrl_configure_pins+0x5ee>
    5d6e:	bb3b      	cbnz	r3, 5dc0 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    5d70:	f8df 9150 	ldr.w	r9, [pc, #336]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5d74:	f240 232e 	movw	r3, #558	; 0x22e
    5d78:	464a      	mov	r2, r9
    5d7a:	4953      	ldr	r1, [pc, #332]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5d7c:	4853      	ldr	r0, [pc, #332]	; (5ecc <pinctrl_configure_pins+0x700>)
    5d7e:	f005 f8f2 	bl	af66 <assert_print>
    5d82:	f240 212e 	movw	r1, #558	; 0x22e
    5d86:	4648      	mov	r0, r9
    5d88:	f005 f8e6 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5d90:	e017      	b.n	5dc2 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    5d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d96:	e7df      	b.n	5d58 <pinctrl_configure_pins+0x58c>
    switch (port)
    5d98:	2300      	movs	r3, #0
    5d9a:	e7dd      	b.n	5d58 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d9c:	f8df a124 	ldr.w	sl, [pc, #292]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5da0:	f240 2329 	movw	r3, #553	; 0x229
    5da4:	4652      	mov	r2, sl
    5da6:	494a      	ldr	r1, [pc, #296]	; (5ed0 <pinctrl_configure_pins+0x704>)
    5da8:	4848      	ldr	r0, [pc, #288]	; (5ecc <pinctrl_configure_pins+0x700>)
    5daa:	f005 f8dc 	bl	af66 <assert_print>
    5dae:	f240 2129 	movw	r1, #553	; 0x229
    5db2:	4650      	mov	r0, sl
    5db4:	f005 f8d0 	bl	af58 <assert_post_action>
    5db8:	e7d4      	b.n	5d64 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    5dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5dbe:	e000      	b.n	5dc2 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5dc0:	4a44      	ldr	r2, [pc, #272]	; (5ed4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5dc2:	2301      	movs	r3, #1
    5dc4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5dc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5dcc:	e7b7      	b.n	5d3e <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    5dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5dd2:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5dd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5dda:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5dde:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5de2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5de6:	d144      	bne.n	5e72 <pinctrl_configure_pins+0x6a6>
    switch (port)
    5de8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5dec:	d01f      	beq.n	5e2e <pinctrl_configure_pins+0x662>
    5dee:	b10b      	cbz	r3, 5df4 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    5df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5df4:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5df8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5dfa:	f012 0f01 	tst.w	r2, #1
    5dfe:	d019      	beq.n	5e34 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    5e00:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e04:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5e08:	d023      	beq.n	5e52 <pinctrl_configure_pins+0x686>
    5e0a:	bb2b      	cbnz	r3, 5e58 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    5e0c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5e10:	f240 232e 	movw	r3, #558	; 0x22e
    5e14:	464a      	mov	r2, r9
    5e16:	492c      	ldr	r1, [pc, #176]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5e18:	482c      	ldr	r0, [pc, #176]	; (5ecc <pinctrl_configure_pins+0x700>)
    5e1a:	f005 f8a4 	bl	af66 <assert_print>
    5e1e:	f240 212e 	movw	r1, #558	; 0x22e
    5e22:	4648      	mov	r0, r9
    5e24:	f005 f898 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5e2c:	e015      	b.n	5e5a <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    5e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e32:	e7df      	b.n	5df4 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e34:	f8df a08c 	ldr.w	sl, [pc, #140]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5e38:	f240 2329 	movw	r3, #553	; 0x229
    5e3c:	4652      	mov	r2, sl
    5e3e:	4924      	ldr	r1, [pc, #144]	; (5ed0 <pinctrl_configure_pins+0x704>)
    5e40:	4822      	ldr	r0, [pc, #136]	; (5ecc <pinctrl_configure_pins+0x700>)
    5e42:	f005 f890 	bl	af66 <assert_print>
    5e46:	f240 2129 	movw	r1, #553	; 0x229
    5e4a:	4650      	mov	r0, sl
    5e4c:	f005 f884 	bl	af58 <assert_post_action>
    5e50:	e7d6      	b.n	5e00 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    5e52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5e56:	e000      	b.n	5e5a <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e58:	4a1e      	ldr	r2, [pc, #120]	; (5ed4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5e5a:	2301      	movs	r3, #1
    5e5c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5e60:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5e64:	2201      	movs	r2, #1
    5e66:	4611      	mov	r1, r2
    5e68:	f855 0008 	ldr.w	r0, [r5, r8]
    5e6c:	f7ff fc4e 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5e70:	e500      	b.n	5874 <pinctrl_configure_pins+0xa8>
    switch (port)
    5e72:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5e76:	d01f      	beq.n	5eb8 <pinctrl_configure_pins+0x6ec>
    5e78:	b30b      	cbz	r3, 5ebe <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    5e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5e7e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5e82:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e84:	f013 0f01 	tst.w	r3, #1
    5e88:	d026      	beq.n	5ed8 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    5e8a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e8e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5e92:	d030      	beq.n	5ef6 <pinctrl_configure_pins+0x72a>
    5e94:	bb93      	cbnz	r3, 5efc <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    5e96:	f8df 902c 	ldr.w	r9, [pc, #44]	; 5ec4 <pinctrl_configure_pins+0x6f8>
    5e9a:	f240 232e 	movw	r3, #558	; 0x22e
    5e9e:	464a      	mov	r2, r9
    5ea0:	4909      	ldr	r1, [pc, #36]	; (5ec8 <pinctrl_configure_pins+0x6fc>)
    5ea2:	480a      	ldr	r0, [pc, #40]	; (5ecc <pinctrl_configure_pins+0x700>)
    5ea4:	f005 f85f 	bl	af66 <assert_print>
    5ea8:	f240 212e 	movw	r1, #558	; 0x22e
    5eac:	4648      	mov	r0, r9
    5eae:	f005 f853 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5eb6:	e022      	b.n	5efe <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    5eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ebc:	e7df      	b.n	5e7e <pinctrl_configure_pins+0x6b2>
    switch (port)
    5ebe:	2300      	movs	r3, #0
    5ec0:	e7dd      	b.n	5e7e <pinctrl_configure_pins+0x6b2>
    5ec2:	bf00      	nop
    5ec4:	0000d868 	.word	0x0000d868
    5ec8:	0000cc7c 	.word	0x0000cc7c
    5ecc:	0000c5c0 	.word	0x0000c5c0
    5ed0:	0000d89c 	.word	0x0000d89c
    5ed4:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ed8:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 60c8 <pinctrl_configure_pins+0x8fc>
    5edc:	f240 2329 	movw	r3, #553	; 0x229
    5ee0:	4652      	mov	r2, sl
    5ee2:	497a      	ldr	r1, [pc, #488]	; (60cc <pinctrl_configure_pins+0x900>)
    5ee4:	487a      	ldr	r0, [pc, #488]	; (60d0 <pinctrl_configure_pins+0x904>)
    5ee6:	f005 f83e 	bl	af66 <assert_print>
    5eea:	f240 2129 	movw	r1, #553	; 0x229
    5eee:	4650      	mov	r0, sl
    5ef0:	f005 f832 	bl	af58 <assert_post_action>
    5ef4:	e7c9      	b.n	5e8a <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    5ef6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5efa:	e000      	b.n	5efe <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5efc:	4a75      	ldr	r2, [pc, #468]	; (60d4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5efe:	2301      	movs	r3, #1
    5f00:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5f04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5f08:	e7ac      	b.n	5e64 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f0e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5f12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5f16:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5f1a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5f1e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5f22:	d144      	bne.n	5fae <pinctrl_configure_pins+0x7e2>
    switch (port)
    5f24:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5f28:	d01f      	beq.n	5f6a <pinctrl_configure_pins+0x79e>
    5f2a:	b10b      	cbz	r3, 5f30 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    5f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5f30:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5f34:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f36:	f012 0f01 	tst.w	r2, #1
    5f3a:	d019      	beq.n	5f70 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    5f3c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f40:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5f44:	d023      	beq.n	5f8e <pinctrl_configure_pins+0x7c2>
    5f46:	bb2b      	cbnz	r3, 5f94 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    5f48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 60c8 <pinctrl_configure_pins+0x8fc>
    5f4c:	f240 232e 	movw	r3, #558	; 0x22e
    5f50:	464a      	mov	r2, r9
    5f52:	4961      	ldr	r1, [pc, #388]	; (60d8 <pinctrl_configure_pins+0x90c>)
    5f54:	485e      	ldr	r0, [pc, #376]	; (60d0 <pinctrl_configure_pins+0x904>)
    5f56:	f005 f806 	bl	af66 <assert_print>
    5f5a:	f240 212e 	movw	r1, #558	; 0x22e
    5f5e:	4648      	mov	r0, r9
    5f60:	f004 fffa 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5f68:	e015      	b.n	5f96 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    5f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f6e:	e7df      	b.n	5f30 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f70:	f8df a154 	ldr.w	sl, [pc, #340]	; 60c8 <pinctrl_configure_pins+0x8fc>
    5f74:	f240 2329 	movw	r3, #553	; 0x229
    5f78:	4652      	mov	r2, sl
    5f7a:	4954      	ldr	r1, [pc, #336]	; (60cc <pinctrl_configure_pins+0x900>)
    5f7c:	4854      	ldr	r0, [pc, #336]	; (60d0 <pinctrl_configure_pins+0x904>)
    5f7e:	f004 fff2 	bl	af66 <assert_print>
    5f82:	f240 2129 	movw	r1, #553	; 0x229
    5f86:	4650      	mov	r0, sl
    5f88:	f004 ffe6 	bl	af58 <assert_post_action>
    5f8c:	e7d6      	b.n	5f3c <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    5f8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5f92:	e000      	b.n	5f96 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f94:	4a4f      	ldr	r2, [pc, #316]	; (60d4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5f96:	2301      	movs	r3, #1
    5f98:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5f9c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5fa0:	2201      	movs	r2, #1
    5fa2:	4611      	mov	r1, r2
    5fa4:	f855 0008 	ldr.w	r0, [r5, r8]
    5fa8:	f7ff fbb0 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5fac:	e462      	b.n	5874 <pinctrl_configure_pins+0xa8>
    switch (port)
    5fae:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5fb2:	d01f      	beq.n	5ff4 <pinctrl_configure_pins+0x828>
    5fb4:	b30b      	cbz	r3, 5ffa <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    5fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5fba:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5fbe:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fc0:	f013 0f01 	tst.w	r3, #1
    5fc4:	d01b      	beq.n	5ffe <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    5fc6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fca:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5fce:	d025      	beq.n	601c <pinctrl_configure_pins+0x850>
    5fd0:	bb3b      	cbnz	r3, 6022 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    5fd2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 60c8 <pinctrl_configure_pins+0x8fc>
    5fd6:	f240 232e 	movw	r3, #558	; 0x22e
    5fda:	464a      	mov	r2, r9
    5fdc:	493e      	ldr	r1, [pc, #248]	; (60d8 <pinctrl_configure_pins+0x90c>)
    5fde:	483c      	ldr	r0, [pc, #240]	; (60d0 <pinctrl_configure_pins+0x904>)
    5fe0:	f004 ffc1 	bl	af66 <assert_print>
    5fe4:	f240 212e 	movw	r1, #558	; 0x22e
    5fe8:	4648      	mov	r0, r9
    5fea:	f004 ffb5 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    5fee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5ff2:	e017      	b.n	6024 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    5ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ff8:	e7df      	b.n	5fba <pinctrl_configure_pins+0x7ee>
    switch (port)
    5ffa:	2300      	movs	r3, #0
    5ffc:	e7dd      	b.n	5fba <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ffe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 60c8 <pinctrl_configure_pins+0x8fc>
    6002:	f240 2329 	movw	r3, #553	; 0x229
    6006:	4652      	mov	r2, sl
    6008:	4930      	ldr	r1, [pc, #192]	; (60cc <pinctrl_configure_pins+0x900>)
    600a:	4831      	ldr	r0, [pc, #196]	; (60d0 <pinctrl_configure_pins+0x904>)
    600c:	f004 ffab 	bl	af66 <assert_print>
    6010:	f240 2129 	movw	r1, #553	; 0x229
    6014:	4650      	mov	r0, sl
    6016:	f004 ff9f 	bl	af58 <assert_post_action>
    601a:	e7d4      	b.n	5fc6 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    601c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6020:	e000      	b.n	6024 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6022:	4a2c      	ldr	r2, [pc, #176]	; (60d4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6024:	2301      	movs	r3, #1
    6026:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    602a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    602e:	e7b7      	b.n	5fa0 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    6030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6034:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6038:	2201      	movs	r2, #1
    603a:	2100      	movs	r1, #0
    603c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6040:	f7ff fb64 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6044:	e416      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    6046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    604a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    604e:	2201      	movs	r2, #1
    6050:	2100      	movs	r1, #0
    6052:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6056:	f7ff fb59 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    605a:	e40b      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    605c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6060:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6064:	2201      	movs	r2, #1
    6066:	2100      	movs	r1, #0
    6068:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    606c:	f7ff fb4e 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6070:	e400      	b.n	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6076:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    607a:	2201      	movs	r2, #1
    607c:	2100      	movs	r1, #0
    607e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6082:	f7ff fb43 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6086:	f7ff bbf5 	b.w	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    608a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    608e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6092:	2201      	movs	r2, #1
    6094:	2100      	movs	r1, #0
    6096:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    609a:	f7ff fb37 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    609e:	f7ff bbe9 	b.w	5874 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    60a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    60a6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    60aa:	2201      	movs	r2, #1
    60ac:	2100      	movs	r1, #0
    60ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    60b2:	f7ff fb2b 	bl	570c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    60b6:	f7ff bbdd 	b.w	5874 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    60ba:	2000      	movs	r0, #0
    60bc:	e001      	b.n	60c2 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    60be:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    60c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60c6:	bf00      	nop
    60c8:	0000d868 	.word	0x0000d868
    60cc:	0000d89c 	.word	0x0000d89c
    60d0:	0000c5c0 	.word	0x0000c5c0
    60d4:	50000300 	.word	0x50000300
    60d8:	0000cc7c 	.word	0x0000cc7c

000060dc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    60dc:	b510      	push	{r4, lr}
    60de:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    60e0:	f7fc f9d4 	bl	248c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    60e4:	4b06      	ldr	r3, [pc, #24]	; (6100 <k_sys_fatal_error_handler+0x24>)
    60e6:	9302      	str	r3, [sp, #8]
    60e8:	2400      	movs	r4, #0
    60ea:	9401      	str	r4, [sp, #4]
    60ec:	9400      	str	r4, [sp, #0]
    60ee:	4623      	mov	r3, r4
    60f0:	2201      	movs	r2, #1
    60f2:	4904      	ldr	r1, [pc, #16]	; (6104 <k_sys_fatal_error_handler+0x28>)
    60f4:	4620      	mov	r0, r4
    60f6:	f005 fcea 	bl	bace <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    60fa:	4620      	mov	r0, r4
    60fc:	f7fe f810 	bl	4120 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6100:	0000d9c8 	.word	0x0000d9c8
    6104:	0000c15c 	.word	0x0000c15c

00006108 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6108:	4b02      	ldr	r3, [pc, #8]	; (6114 <nvmc_wait+0xc>)
    610a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    610e:	2b00      	cmp	r3, #0
    6110:	d0fa      	beq.n	6108 <nvmc_wait>
}
    6112:	4770      	bx	lr
    6114:	4001e000 	.word	0x4001e000

00006118 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    6118:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    611a:	4b03      	ldr	r3, [pc, #12]	; (6128 <nvmc_config+0x10>)
    611c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    6120:	f7ff fff2 	bl	6108 <nvmc_wait>
}
    6124:	bd08      	pop	{r3, pc}
    6126:	bf00      	nop
    6128:	4001e000 	.word	0x4001e000

0000612c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    612c:	4b01      	ldr	r3, [pc, #4]	; (6134 <SystemCoreClockUpdate+0x8>)
    612e:	4a02      	ldr	r2, [pc, #8]	; (6138 <SystemCoreClockUpdate+0xc>)
    6130:	601a      	str	r2, [r3, #0]
}
    6132:	4770      	bx	lr
    6134:	200000f0 	.word	0x200000f0
    6138:	03d09000 	.word	0x03d09000

0000613c <SystemInit>:

void SystemInit(void)
{
    613c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    613e:	f005 fce3 	bl	bb08 <nrf52_errata_36>
    6142:	b140      	cbz	r0, 6156 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6148:	2200      	movs	r2, #0
    614a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    614e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6152:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6156:	f005 fce1 	bl	bb1c <nrf52_errata_66>
    615a:	2800      	cmp	r0, #0
    615c:	d046      	beq.n	61ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6162:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6166:	4b59      	ldr	r3, [pc, #356]	; (62cc <SystemInit+0x190>)
    6168:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    616c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6170:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6174:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6178:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    617c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6180:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6184:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6188:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    618c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6190:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6194:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6198:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    619c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    61a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    61a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    61a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    61ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    61b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    61b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    61b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    61bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    61c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    61c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    61c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    61cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    61d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    61d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    61d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    61dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    61e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    61e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    61e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    61ec:	f005 fca0 	bl	bb30 <nrf52_errata_98>
    61f0:	b118      	cbz	r0, 61fa <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    61f2:	4b37      	ldr	r3, [pc, #220]	; (62d0 <SystemInit+0x194>)
    61f4:	4a37      	ldr	r2, [pc, #220]	; (62d4 <SystemInit+0x198>)
    61f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    61fa:	f005 fcac 	bl	bb56 <nrf52_errata_103>
    61fe:	b118      	cbz	r0, 6208 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6200:	4b35      	ldr	r3, [pc, #212]	; (62d8 <SystemInit+0x19c>)
    6202:	22fb      	movs	r2, #251	; 0xfb
    6204:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6208:	f005 fcb8 	bl	bb7c <nrf52_errata_115>
    620c:	b170      	cbz	r0, 622c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    620e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6212:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    6216:	f023 030f 	bic.w	r3, r3, #15
    621a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    621e:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    6222:	f002 020f 	and.w	r2, r2, #15
    6226:	4313      	orrs	r3, r2
    6228:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    622c:	f005 fcb9 	bl	bba2 <nrf52_errata_120>
    6230:	b120      	cbz	r0, 623c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    6232:	4b2a      	ldr	r3, [pc, #168]	; (62dc <SystemInit+0x1a0>)
    6234:	f44f 7200 	mov.w	r2, #512	; 0x200
    6238:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    623c:	f005 fcc4 	bl	bbc8 <nrf52_errata_136>
    6240:	b160      	cbz	r0, 625c <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6246:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    624a:	f013 0f01 	tst.w	r3, #1
    624e:	d005      	beq.n	625c <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6254:	f06f 0201 	mvn.w	r2, #1
    6258:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    625c:	f005 fcbe 	bl	bbdc <nrf52_configuration_249>
    6260:	b138      	cbz	r0, 6272 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6262:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6266:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    626a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    626e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6272:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6276:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    627a:	2b00      	cmp	r3, #0
    627c:	db08      	blt.n	6290 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    627e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6286:	2b00      	cmp	r3, #0
    6288:	db02      	blt.n	6290 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    628a:	f7ff ff4f 	bl	612c <SystemCoreClockUpdate>
}
    628e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    6290:	2001      	movs	r0, #1
    6292:	f7ff ff41 	bl	6118 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6296:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    629a:	2512      	movs	r5, #18
    629c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    62a0:	f7ff ff32 	bl	6108 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    62a4:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    62a8:	f7ff ff2e 	bl	6108 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    62ac:	2000      	movs	r0, #0
    62ae:	f7ff ff33 	bl	6118 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    62b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    62b6:	490a      	ldr	r1, [pc, #40]	; (62e0 <SystemInit+0x1a4>)
    62b8:	68ca      	ldr	r2, [r1, #12]
    62ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    62be:	4b09      	ldr	r3, [pc, #36]	; (62e4 <SystemInit+0x1a8>)
    62c0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    62c2:	60cb      	str	r3, [r1, #12]
    62c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    62c8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    62ca:	e7fd      	b.n	62c8 <SystemInit+0x18c>
    62cc:	4000c000 	.word	0x4000c000
    62d0:	40005000 	.word	0x40005000
    62d4:	00038148 	.word	0x00038148
    62d8:	4000f000 	.word	0x4000f000
    62dc:	40029000 	.word	0x40029000
    62e0:	e000ed00 	.word	0xe000ed00
    62e4:	05fa0004 	.word	0x05fa0004

000062e8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    62e8:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    62ea:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    62ec:	fab4 f384 	clz	r3, r4
    62f0:	f1c3 031f 	rsb	r3, r3, #31
    62f4:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    62f8:	2b00      	cmp	r3, #0
    62fa:	db16      	blt.n	632a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    62fc:	2201      	movs	r2, #1
    62fe:	fa02 f303 	lsl.w	r3, r2, r3
    6302:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6306:	f3bf 8f5b 	dmb	ish
    630a:	e850 2f00 	ldrex	r2, [r0]
    630e:	42a2      	cmp	r2, r4
    6310:	d104      	bne.n	631c <nrfx_flag32_alloc+0x34>
    6312:	e840 3e00 	strex	lr, r3, [r0]
    6316:	f1be 0f00 	cmp.w	lr, #0
    631a:	d1f6      	bne.n	630a <nrfx_flag32_alloc+0x22>
    631c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6320:	d1e3      	bne.n	62ea <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    6322:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    6326:	4802      	ldr	r0, [pc, #8]	; (6330 <nrfx_flag32_alloc+0x48>)
}
    6328:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    632a:	4802      	ldr	r0, [pc, #8]	; (6334 <nrfx_flag32_alloc+0x4c>)
    632c:	e7fc      	b.n	6328 <nrfx_flag32_alloc+0x40>
    632e:	bf00      	nop
    6330:	0bad0000 	.word	0x0bad0000
    6334:	0bad0002 	.word	0x0bad0002

00006338 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6338:	6803      	ldr	r3, [r0, #0]
    633a:	40cb      	lsrs	r3, r1
    633c:	f013 0f01 	tst.w	r3, #1
    6340:	d115      	bne.n	636e <nrfx_flag32_free+0x36>
{
    6342:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    6344:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    6346:	2301      	movs	r3, #1
    6348:	408b      	lsls	r3, r1
    634a:	4313      	orrs	r3, r2
    634c:	f3bf 8f5b 	dmb	ish
    6350:	e850 cf00 	ldrex	ip, [r0]
    6354:	4594      	cmp	ip, r2
    6356:	d104      	bne.n	6362 <nrfx_flag32_free+0x2a>
    6358:	e840 3e00 	strex	lr, r3, [r0]
    635c:	f1be 0f00 	cmp.w	lr, #0
    6360:	d1f6      	bne.n	6350 <nrfx_flag32_free+0x18>
    6362:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6366:	d1ed      	bne.n	6344 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    6368:	4802      	ldr	r0, [pc, #8]	; (6374 <nrfx_flag32_free+0x3c>)
}
    636a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    636e:	4802      	ldr	r0, [pc, #8]	; (6378 <nrfx_flag32_free+0x40>)
}
    6370:	4770      	bx	lr
    6372:	bf00      	nop
    6374:	0bad0000 	.word	0x0bad0000
    6378:	0bad0004 	.word	0x0bad0004

0000637c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    637c:	b5f0      	push	{r4, r5, r6, r7, lr}
    637e:	b083      	sub	sp, #12
    switch (domain)
    6380:	4605      	mov	r5, r0
    6382:	b168      	cbz	r0, 63a0 <clock_stop+0x24>
    6384:	2801      	cmp	r0, #1
    6386:	d020      	beq.n	63ca <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6388:	4c3d      	ldr	r4, [pc, #244]	; (6480 <clock_stop+0x104>)
    638a:	23d8      	movs	r3, #216	; 0xd8
    638c:	4622      	mov	r2, r4
    638e:	493d      	ldr	r1, [pc, #244]	; (6484 <clock_stop+0x108>)
    6390:	483d      	ldr	r0, [pc, #244]	; (6488 <clock_stop+0x10c>)
    6392:	f004 fde8 	bl	af66 <assert_print>
    6396:	21d8      	movs	r1, #216	; 0xd8
    6398:	4620      	mov	r0, r4
    639a:	f004 fddd 	bl	af58 <assert_post_action>
            return;
    639e:	e068      	b.n	6472 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    63a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63a4:	2202      	movs	r2, #2
    63a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63aa:	2200      	movs	r2, #0
    63ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    63b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63b4:	2201      	movs	r2, #1
    63b6:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    63b8:	2301      	movs	r3, #1
    63ba:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    63be:	429d      	cmp	r5, r3
    63c0:	d00f      	beq.n	63e2 <clock_stop+0x66>
    63c2:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    63c4:	f242 7410 	movw	r4, #10000	; 0x2710
    63c8:	e029      	b.n	641e <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    63ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63ce:	2201      	movs	r2, #1
    63d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63d4:	2100      	movs	r1, #0
    63d6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    63da:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63de:	605a      	str	r2, [r3, #4]
}
    63e0:	e7ea      	b.n	63b8 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    63e2:	f10d 0607 	add.w	r6, sp, #7
    63e6:	e7ed      	b.n	63c4 <clock_stop+0x48>
            if (p_clk_src != NULL)
    63e8:	b136      	cbz	r6, 63f8 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    63ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63ee:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    63f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    63f6:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    63f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63fc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6400:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6404:	d12f      	bne.n	6466 <clock_stop+0xea>
    return false;
    6406:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6408:	b38b      	cbz	r3, 646e <clock_stop+0xf2>
    640a:	b11e      	cbz	r6, 6414 <clock_stop+0x98>
    640c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6410:	2b01      	cmp	r3, #1
    6412:	d12c      	bne.n	646e <clock_stop+0xf2>
    6414:	2001      	movs	r0, #1
    6416:	f005 fbf4 	bl	bc02 <nrfx_busy_wait>
    641a:	3c01      	subs	r4, #1
    641c:	d027      	beq.n	646e <clock_stop+0xf2>
    switch (domain)
    641e:	2d00      	cmp	r5, #0
    6420:	d0e2      	beq.n	63e8 <clock_stop+0x6c>
    6422:	2d01      	cmp	r5, #1
    6424:	d00e      	beq.n	6444 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    6426:	4f19      	ldr	r7, [pc, #100]	; (648c <clock_stop+0x110>)
    6428:	f44f 734f 	mov.w	r3, #828	; 0x33c
    642c:	463a      	mov	r2, r7
    642e:	4915      	ldr	r1, [pc, #84]	; (6484 <clock_stop+0x108>)
    6430:	4815      	ldr	r0, [pc, #84]	; (6488 <clock_stop+0x10c>)
    6432:	f004 fd98 	bl	af66 <assert_print>
    6436:	f44f 714f 	mov.w	r1, #828	; 0x33c
    643a:	4638      	mov	r0, r7
    643c:	f004 fd8c 	bl	af58 <assert_post_action>
            return false;
    6440:	2300      	movs	r3, #0
    6442:	e7e1      	b.n	6408 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    6444:	b136      	cbz	r6, 6454 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    644a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    644e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6452:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6458:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    645c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6460:	d103      	bne.n	646a <clock_stop+0xee>
    return false;
    6462:	2300      	movs	r3, #0
    6464:	e7d0      	b.n	6408 <clock_stop+0x8c>
                return true;
    6466:	2301      	movs	r3, #1
    6468:	e7ce      	b.n	6408 <clock_stop+0x8c>
                return true;
    646a:	2301      	movs	r3, #1
    646c:	e7cc      	b.n	6408 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    646e:	2d01      	cmp	r5, #1
    6470:	d001      	beq.n	6476 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6472:	b003      	add	sp, #12
    6474:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    6476:	4b06      	ldr	r3, [pc, #24]	; (6490 <clock_stop+0x114>)
    6478:	2200      	movs	r2, #0
    647a:	715a      	strb	r2, [r3, #5]
    647c:	e7f9      	b.n	6472 <clock_stop+0xf6>
    647e:	bf00      	nop
    6480:	0000d9e8 	.word	0x0000d9e8
    6484:	0000cc7c 	.word	0x0000cc7c
    6488:	0000c5c0 	.word	0x0000c5c0
    648c:	0000da28 	.word	0x0000da28
    6490:	20000c94 	.word	0x20000c94

00006494 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    6494:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    6496:	4604      	mov	r4, r0
    6498:	b150      	cbz	r0, 64b0 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    649a:	4b0d      	ldr	r3, [pc, #52]	; (64d0 <nrfx_clock_init+0x3c>)
    649c:	791b      	ldrb	r3, [r3, #4]
    649e:	b9ab      	cbnz	r3, 64cc <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    64a0:	4b0b      	ldr	r3, [pc, #44]	; (64d0 <nrfx_clock_init+0x3c>)
    64a2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    64a4:	2201      	movs	r2, #1
    64a6:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    64a8:	2200      	movs	r2, #0
    64aa:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    64ac:	4809      	ldr	r0, [pc, #36]	; (64d4 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    64ae:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    64b0:	4d09      	ldr	r5, [pc, #36]	; (64d8 <nrfx_clock_init+0x44>)
    64b2:	f240 1315 	movw	r3, #277	; 0x115
    64b6:	462a      	mov	r2, r5
    64b8:	4908      	ldr	r1, [pc, #32]	; (64dc <nrfx_clock_init+0x48>)
    64ba:	4809      	ldr	r0, [pc, #36]	; (64e0 <nrfx_clock_init+0x4c>)
    64bc:	f004 fd53 	bl	af66 <assert_print>
    64c0:	f240 1115 	movw	r1, #277	; 0x115
    64c4:	4628      	mov	r0, r5
    64c6:	f004 fd47 	bl	af58 <assert_post_action>
    64ca:	e7e6      	b.n	649a <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    64cc:	4805      	ldr	r0, [pc, #20]	; (64e4 <nrfx_clock_init+0x50>)
    return err_code;
    64ce:	e7ee      	b.n	64ae <nrfx_clock_init+0x1a>
    64d0:	20000c94 	.word	0x20000c94
    64d4:	0bad0000 	.word	0x0bad0000
    64d8:	0000d9e8 	.word	0x0000d9e8
    64dc:	0000da5c 	.word	0x0000da5c
    64e0:	0000c5c0 	.word	0x0000c5c0
    64e4:	0bad000c 	.word	0x0bad000c

000064e8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    64e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    64ea:	4b0f      	ldr	r3, [pc, #60]	; (6528 <nrfx_clock_enable+0x40>)
    64ec:	791b      	ldrb	r3, [r3, #4]
    64ee:	b153      	cbz	r3, 6506 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    64f0:	2000      	movs	r0, #0
    64f2:	f7fc ff03 	bl	32fc <arch_irq_is_enabled>
    64f6:	b1a0      	cbz	r0, 6522 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    64f8:	f005 fb87 	bl	bc0a <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    64fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6500:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6504:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6506:	4c09      	ldr	r4, [pc, #36]	; (652c <nrfx_clock_enable+0x44>)
    6508:	f44f 7397 	mov.w	r3, #302	; 0x12e
    650c:	4622      	mov	r2, r4
    650e:	4908      	ldr	r1, [pc, #32]	; (6530 <nrfx_clock_enable+0x48>)
    6510:	4808      	ldr	r0, [pc, #32]	; (6534 <nrfx_clock_enable+0x4c>)
    6512:	f004 fd28 	bl	af66 <assert_print>
    6516:	f44f 7197 	mov.w	r1, #302	; 0x12e
    651a:	4620      	mov	r0, r4
    651c:	f004 fd1c 	bl	af58 <assert_post_action>
    6520:	e7e6      	b.n	64f0 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6522:	f7fc fedd 	bl	32e0 <arch_irq_enable>
    6526:	e7e7      	b.n	64f8 <nrfx_clock_enable+0x10>
    6528:	20000c94 	.word	0x20000c94
    652c:	0000d9e8 	.word	0x0000d9e8
    6530:	0000da6c 	.word	0x0000da6c
    6534:	0000c5c0 	.word	0x0000c5c0

00006538 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    6538:	b530      	push	{r4, r5, lr}
    653a:	b083      	sub	sp, #12
    653c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    653e:	4b34      	ldr	r3, [pc, #208]	; (6610 <nrfx_clock_start+0xd8>)
    6540:	791b      	ldrb	r3, [r3, #4]
    6542:	b183      	cbz	r3, 6566 <nrfx_clock_start+0x2e>
    switch (domain)
    6544:	b1ec      	cbz	r4, 6582 <nrfx_clock_start+0x4a>
    6546:	2c01      	cmp	r4, #1
    6548:	d055      	beq.n	65f6 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    654a:	4c32      	ldr	r4, [pc, #200]	; (6614 <nrfx_clock_start+0xdc>)
    654c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    6550:	4622      	mov	r2, r4
    6552:	4931      	ldr	r1, [pc, #196]	; (6618 <nrfx_clock_start+0xe0>)
    6554:	4831      	ldr	r0, [pc, #196]	; (661c <nrfx_clock_start+0xe4>)
    6556:	f004 fd06 	bl	af66 <assert_print>
    655a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    655e:	4620      	mov	r0, r4
    6560:	f004 fcfa 	bl	af58 <assert_post_action>
            break;
    }
}
    6564:	e052      	b.n	660c <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6566:	4d2b      	ldr	r5, [pc, #172]	; (6614 <nrfx_clock_start+0xdc>)
    6568:	f44f 73b4 	mov.w	r3, #360	; 0x168
    656c:	462a      	mov	r2, r5
    656e:	492c      	ldr	r1, [pc, #176]	; (6620 <nrfx_clock_start+0xe8>)
    6570:	482a      	ldr	r0, [pc, #168]	; (661c <nrfx_clock_start+0xe4>)
    6572:	f004 fcf8 	bl	af66 <assert_print>
    6576:	f44f 71b4 	mov.w	r1, #360	; 0x168
    657a:	4628      	mov	r0, r5
    657c:	f004 fcec 	bl	af58 <assert_post_action>
    6580:	e7e0      	b.n	6544 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6586:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    658a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    658e:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6590:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6598:	d117      	bne.n	65ca <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    659a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    659e:	f013 0f01 	tst.w	r3, #1
    65a2:	d116      	bne.n	65d2 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    65a4:	f005 fb31 	bl	bc0a <clock_initial_lfclksrc_get>
    65a8:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    65aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65ae:	9a01      	ldr	r2, [sp, #4]
    65b0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65b4:	2200      	movs	r2, #0
    65b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    65ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    65be:	2202      	movs	r2, #2
    65c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65c4:	2201      	movs	r2, #1
    65c6:	609a      	str	r2, [r3, #8]
}
    65c8:	e020      	b.n	660c <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    65ca:	a801      	add	r0, sp, #4
    65cc:	f005 fb1f 	bl	bc0e <clock_lfclksrc_tweak>
    65d0:	e7eb      	b.n	65aa <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    65d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65d6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    65da:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    65de:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    65e0:	a801      	add	r0, sp, #4
    65e2:	f005 fb14 	bl	bc0e <clock_lfclksrc_tweak>
    65e6:	2800      	cmp	r0, #0
    65e8:	d0df      	beq.n	65aa <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    65ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65ee:	2202      	movs	r2, #2
    65f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    65f4:	e00a      	b.n	660c <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65fa:	2200      	movs	r2, #0
    65fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6600:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6604:	2201      	movs	r2, #1
    6606:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    660a:	601a      	str	r2, [r3, #0]
}
    660c:	b003      	add	sp, #12
    660e:	bd30      	pop	{r4, r5, pc}
    6610:	20000c94 	.word	0x20000c94
    6614:	0000d9e8 	.word	0x0000d9e8
    6618:	0000cc7c 	.word	0x0000cc7c
    661c:	0000c5c0 	.word	0x0000c5c0
    6620:	0000da6c 	.word	0x0000da6c

00006624 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6624:	b538      	push	{r3, r4, r5, lr}
    6626:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6628:	4b0a      	ldr	r3, [pc, #40]	; (6654 <nrfx_clock_stop+0x30>)
    662a:	791b      	ldrb	r3, [r3, #4]
    662c:	b11b      	cbz	r3, 6636 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    662e:	4620      	mov	r0, r4
    6630:	f7ff fea4 	bl	637c <clock_stop>
}
    6634:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6636:	4d08      	ldr	r5, [pc, #32]	; (6658 <nrfx_clock_stop+0x34>)
    6638:	f240 13ad 	movw	r3, #429	; 0x1ad
    663c:	462a      	mov	r2, r5
    663e:	4907      	ldr	r1, [pc, #28]	; (665c <nrfx_clock_stop+0x38>)
    6640:	4807      	ldr	r0, [pc, #28]	; (6660 <nrfx_clock_stop+0x3c>)
    6642:	f004 fc90 	bl	af66 <assert_print>
    6646:	f240 11ad 	movw	r1, #429	; 0x1ad
    664a:	4628      	mov	r0, r5
    664c:	f004 fc84 	bl	af58 <assert_post_action>
    6650:	e7ed      	b.n	662e <nrfx_clock_stop+0xa>
    6652:	bf00      	nop
    6654:	20000c94 	.word	0x20000c94
    6658:	0000d9e8 	.word	0x0000d9e8
    665c:	0000da6c 	.word	0x0000da6c
    6660:	0000c5c0 	.word	0x0000c5c0

00006664 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6664:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    666a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    666e:	b18b      	cbz	r3, 6694 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6674:	2200      	movs	r2, #0
    6676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    667a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    667e:	2201      	movs	r2, #1
    6680:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6684:	4b15      	ldr	r3, [pc, #84]	; (66dc <nrfx_power_clock_irq_handler+0x78>)
    6686:	795b      	ldrb	r3, [r3, #5]
    6688:	b923      	cbnz	r3, 6694 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    668a:	4b14      	ldr	r3, [pc, #80]	; (66dc <nrfx_power_clock_irq_handler+0x78>)
    668c:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    668e:	681b      	ldr	r3, [r3, #0]
    6690:	2000      	movs	r0, #0
    6692:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6698:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    669c:	b19b      	cbz	r3, 66c6 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    669e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66a2:	2200      	movs	r2, #0
    66a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    66a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    66ac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    66b0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    66b4:	f012 0f03 	tst.w	r2, #3
    66b8:	d106      	bne.n	66c8 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    66ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66be:	2201      	movs	r2, #1
    66c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66c4:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    66c6:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    66c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66cc:	2202      	movs	r2, #2
    66ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    66d2:	4b02      	ldr	r3, [pc, #8]	; (66dc <nrfx_power_clock_irq_handler+0x78>)
    66d4:	681b      	ldr	r3, [r3, #0]
    66d6:	2001      	movs	r0, #1
    66d8:	4798      	blx	r3
}
    66da:	e7f4      	b.n	66c6 <nrfx_power_clock_irq_handler+0x62>
    66dc:	20000c94 	.word	0x20000c94

000066e0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    66e0:	3008      	adds	r0, #8
    66e2:	4b03      	ldr	r3, [pc, #12]	; (66f0 <pin_in_use+0x10>)
    66e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    66e8:	f000 0001 	and.w	r0, r0, #1
    66ec:	4770      	bx	lr
    66ee:	bf00      	nop
    66f0:	200000f4 	.word	0x200000f4

000066f4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    66f4:	3008      	adds	r0, #8
    66f6:	4b03      	ldr	r3, [pc, #12]	; (6704 <pin_in_use_by_te+0x10>)
    66f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    66fc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6700:	4770      	bx	lr
    6702:	bf00      	nop
    6704:	200000f4 	.word	0x200000f4

00006708 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6708:	3008      	adds	r0, #8
    670a:	4b04      	ldr	r3, [pc, #16]	; (671c <pin_has_trigger+0x14>)
    670c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6710:	f010 001c 	ands.w	r0, r0, #28
    6714:	bf18      	it	ne
    6716:	2001      	movne	r0, #1
    6718:	4770      	bx	lr
    671a:	bf00      	nop
    671c:	200000f4 	.word	0x200000f4

00006720 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6720:	3008      	adds	r0, #8
    6722:	4b03      	ldr	r3, [pc, #12]	; (6730 <pin_is_output+0x10>)
    6724:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6728:	f3c0 0040 	ubfx	r0, r0, #1, #1
    672c:	4770      	bx	lr
    672e:	bf00      	nop
    6730:	200000f4 	.word	0x200000f4

00006734 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6734:	3008      	adds	r0, #8
    6736:	4b02      	ldr	r3, [pc, #8]	; (6740 <pin_te_get+0xc>)
    6738:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    673c:	0b40      	lsrs	r0, r0, #13
    673e:	4770      	bx	lr
    6740:	200000f4 	.word	0x200000f4

00006744 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6744:	2200      	movs	r2, #0
    6746:	e004      	b.n	6752 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    674c:	4283      	cmp	r3, r0
    674e:	d00f      	beq.n	6770 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6750:	3201      	adds	r2, #1
    6752:	2a2f      	cmp	r2, #47	; 0x2f
    6754:	d80a      	bhi.n	676c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6756:	f102 0308 	add.w	r3, r2, #8
    675a:	4906      	ldr	r1, [pc, #24]	; (6774 <handler_in_use+0x30>)
    675c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6760:	f413 7f80 	tst.w	r3, #256	; 0x100
    6764:	d0f0      	beq.n	6748 <handler_in_use+0x4>
    6766:	f3c3 2343 	ubfx	r3, r3, #9, #4
    676a:	e7ef      	b.n	674c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    676c:	2000      	movs	r0, #0
    676e:	4770      	bx	lr
            return true;
    6770:	2001      	movs	r0, #1
}
    6772:	4770      	bx	lr
    6774:	200000f4 	.word	0x200000f4

00006778 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6778:	2300      	movs	r3, #0
    677a:	b113      	cbz	r3, 6782 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    677c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6780:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6782:	4a07      	ldr	r2, [pc, #28]	; (67a0 <find_handler+0x28>)
    6784:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6788:	4282      	cmp	r2, r0
    678a:	d001      	beq.n	6790 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    678c:	3301      	adds	r3, #1
    678e:	e7f4      	b.n	677a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6790:	4a03      	ldr	r2, [pc, #12]	; (67a0 <find_handler+0x28>)
    6792:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6796:	6852      	ldr	r2, [r2, #4]
    6798:	428a      	cmp	r2, r1
    679a:	d1f7      	bne.n	678c <find_handler+0x14>
            return i;
    679c:	4618      	mov	r0, r3
    679e:	4770      	bx	lr
    67a0:	200000f4 	.word	0x200000f4

000067a4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    67a4:	3008      	adds	r0, #8
    67a6:	4b06      	ldr	r3, [pc, #24]	; (67c0 <channel_handler_get+0x1c>)
    67a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    67ac:	f410 7f80 	tst.w	r0, #256	; 0x100
    67b0:	d004      	beq.n	67bc <channel_handler_get+0x18>
    67b2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    67b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    67ba:	4770      	bx	lr
        return NULL;
    67bc:	2000      	movs	r0, #0
}
    67be:	4770      	bx	lr
    67c0:	200000f4 	.word	0x200000f4

000067c4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    67c4:	b570      	push	{r4, r5, r6, lr}
    67c6:	4604      	mov	r4, r0
    67c8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    67ca:	f7ff ffeb 	bl	67a4 <channel_handler_get>

    if (handler)
    67ce:	b120      	cbz	r0, 67da <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    67d0:	6806      	ldr	r6, [r0, #0]
    67d2:	6842      	ldr	r2, [r0, #4]
    67d4:	4629      	mov	r1, r5
    67d6:	4620      	mov	r0, r4
    67d8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    67da:	4b04      	ldr	r3, [pc, #16]	; (67ec <call_handler+0x28>)
    67dc:	689b      	ldr	r3, [r3, #8]
    67de:	b123      	cbz	r3, 67ea <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    67e0:	4a02      	ldr	r2, [pc, #8]	; (67ec <call_handler+0x28>)
    67e2:	68d2      	ldr	r2, [r2, #12]
    67e4:	4629      	mov	r1, r5
    67e6:	4620      	mov	r0, r4
    67e8:	4798      	blx	r3
    }
}
    67ea:	bd70      	pop	{r4, r5, r6, pc}
    67ec:	200000f4 	.word	0x200000f4

000067f0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    67f0:	f100 0208 	add.w	r2, r0, #8
    67f4:	4b16      	ldr	r3, [pc, #88]	; (6850 <release_handler+0x60>)
    67f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    67fa:	f413 7f80 	tst.w	r3, #256	; 0x100
    67fe:	d026      	beq.n	684e <release_handler+0x5e>
{
    6800:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6802:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6806:	4610      	mov	r0, r2
    6808:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    680c:	4a10      	ldr	r2, [pc, #64]	; (6850 <release_handler+0x60>)
    680e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    6812:	4620      	mov	r0, r4
    6814:	f7ff ff96 	bl	6744 <handler_in_use>
    6818:	b100      	cbz	r0, 681c <release_handler+0x2c>
}
    681a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    681c:	480c      	ldr	r0, [pc, #48]	; (6850 <release_handler+0x60>)
    681e:	2300      	movs	r3, #0
    6820:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6824:	4621      	mov	r1, r4
    6826:	3074      	adds	r0, #116	; 0x74
    6828:	f7ff fd86 	bl	6338 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    682c:	4b09      	ldr	r3, [pc, #36]	; (6854 <release_handler+0x64>)
    682e:	4298      	cmp	r0, r3
    6830:	d0f3      	beq.n	681a <release_handler+0x2a>
    6832:	4c09      	ldr	r4, [pc, #36]	; (6858 <release_handler+0x68>)
    6834:	f44f 7399 	mov.w	r3, #306	; 0x132
    6838:	4622      	mov	r2, r4
    683a:	4908      	ldr	r1, [pc, #32]	; (685c <release_handler+0x6c>)
    683c:	4808      	ldr	r0, [pc, #32]	; (6860 <release_handler+0x70>)
    683e:	f004 fb92 	bl	af66 <assert_print>
    6842:	f44f 7199 	mov.w	r1, #306	; 0x132
    6846:	4620      	mov	r0, r4
    6848:	f004 fb86 	bl	af58 <assert_post_action>
    684c:	e7e5      	b.n	681a <release_handler+0x2a>
    684e:	4770      	bx	lr
    6850:	200000f4 	.word	0x200000f4
    6854:	0bad0000 	.word	0x0bad0000
    6858:	0000da8c 	.word	0x0000da8c
    685c:	0000dacc 	.word	0x0000dacc
    6860:	0000c5c0 	.word	0x0000c5c0

00006864 <pin_handler_trigger_uninit>:
{
    6864:	b510      	push	{r4, lr}
    6866:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6868:	f7ff ff44 	bl	66f4 <pin_in_use_by_te>
    686c:	b140      	cbz	r0, 6880 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    686e:	4620      	mov	r0, r4
    6870:	f7ff ff60 	bl	6734 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6874:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6878:	4b06      	ldr	r3, [pc, #24]	; (6894 <pin_handler_trigger_uninit+0x30>)
    687a:	2200      	movs	r2, #0
    687c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6880:	4620      	mov	r0, r4
    6882:	f7ff ffb5 	bl	67f0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6886:	3408      	adds	r4, #8
    6888:	4b03      	ldr	r3, [pc, #12]	; (6898 <pin_handler_trigger_uninit+0x34>)
    688a:	2200      	movs	r2, #0
    688c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6890:	bd10      	pop	{r4, pc}
    6892:	bf00      	nop
    6894:	40006000 	.word	0x40006000
    6898:	200000f4 	.word	0x200000f4

0000689c <pin_handler_set>:
{
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	b082      	sub	sp, #8
    68a0:	4606      	mov	r6, r0
    68a2:	460c      	mov	r4, r1
    68a4:	4615      	mov	r5, r2
    release_handler(pin);
    68a6:	f7ff ffa3 	bl	67f0 <release_handler>
    if (!handler)
    68aa:	b324      	cbz	r4, 68f6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    68ac:	4629      	mov	r1, r5
    68ae:	4620      	mov	r0, r4
    68b0:	f7ff ff62 	bl	6778 <find_handler>
    if (handler_id < 0)
    68b4:	1e03      	subs	r3, r0, #0
    68b6:	db13      	blt.n	68e0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    68b8:	4a10      	ldr	r2, [pc, #64]	; (68fc <pin_handler_set+0x60>)
    68ba:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    68be:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    68c2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    68c4:	025b      	lsls	r3, r3, #9
    68c6:	b29b      	uxth	r3, r3
    68c8:	f106 0008 	add.w	r0, r6, #8
    68cc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    68d0:	430b      	orrs	r3, r1
    68d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    68d6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    68da:	4809      	ldr	r0, [pc, #36]	; (6900 <pin_handler_set+0x64>)
}
    68dc:	b002      	add	sp, #8
    68de:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    68e0:	f10d 0107 	add.w	r1, sp, #7
    68e4:	4807      	ldr	r0, [pc, #28]	; (6904 <pin_handler_set+0x68>)
    68e6:	f7ff fcff 	bl	62e8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    68ea:	4b05      	ldr	r3, [pc, #20]	; (6900 <pin_handler_set+0x64>)
    68ec:	4298      	cmp	r0, r3
    68ee:	d1f5      	bne.n	68dc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    68f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68f4:	e7e0      	b.n	68b8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    68f6:	4802      	ldr	r0, [pc, #8]	; (6900 <pin_handler_set+0x64>)
    68f8:	e7f0      	b.n	68dc <pin_handler_set+0x40>
    68fa:	bf00      	nop
    68fc:	200000f4 	.word	0x200000f4
    6900:	0bad0000 	.word	0x0bad0000
    6904:	20000168 	.word	0x20000168

00006908 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6908:	b538      	push	{r3, r4, r5, lr}
    690a:	4604      	mov	r4, r0
    while (mask)
    690c:	e018      	b.n	6940 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    690e:	fa94 f3a4 	rbit	r3, r4
    6912:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6916:	2201      	movs	r2, #1
    6918:	409a      	lsls	r2, r3
    691a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    691e:	4a0a      	ldr	r2, [pc, #40]	; (6948 <gpiote_evt_handle+0x40>)
    6920:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6924:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6928:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    692c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6930:	f3c0 4001 	ubfx	r0, r0, #16, #2
    6934:	f005 f997 	bl	bc66 <gpiote_polarity_to_trigger>
    6938:	4601      	mov	r1, r0
    693a:	4628      	mov	r0, r5
    693c:	f7ff ff42 	bl	67c4 <call_handler>
    while (mask)
    6940:	2c00      	cmp	r4, #0
    6942:	d1e4      	bne.n	690e <gpiote_evt_handle+0x6>
    }
}
    6944:	bd38      	pop	{r3, r4, r5, pc}
    6946:	bf00      	nop
    6948:	40006000 	.word	0x40006000

0000694c <latch_pending_read_and_check>:
{
    694c:	b082      	sub	sp, #8
    694e:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6950:	4b11      	ldr	r3, [pc, #68]	; (6998 <latch_pending_read_and_check+0x4c>)
    6952:	e893 0003 	ldmia.w	r3, {r0, r1}
    6956:	ab02      	add	r3, sp, #8
    6958:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    695c:	4660      	mov	r0, ip
    695e:	2300      	movs	r3, #0
    6960:	e00b      	b.n	697a <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    6962:	aa02      	add	r2, sp, #8
    6964:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6968:	f852 2c08 	ldr.w	r2, [r2, #-8]
    696c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6970:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    6974:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6978:	3301      	adds	r3, #1
    697a:	2b01      	cmp	r3, #1
    697c:	d9f1      	bls.n	6962 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    697e:	2300      	movs	r3, #0
    6980:	2b01      	cmp	r3, #1
    6982:	d804      	bhi.n	698e <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    6984:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    6988:	b922      	cbnz	r2, 6994 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    698a:	3301      	adds	r3, #1
    698c:	e7f8      	b.n	6980 <latch_pending_read_and_check+0x34>
    return false;
    698e:	2000      	movs	r0, #0
}
    6990:	b002      	add	sp, #8
    6992:	4770      	bx	lr
            return true;
    6994:	2001      	movs	r0, #1
    6996:	e7fb      	b.n	6990 <latch_pending_read_and_check+0x44>
    6998:	0000c220 	.word	0x0000c220

0000699c <next_sense_cond_call_handler>:
{
    699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69a0:	4604      	mov	r4, r0
    69a2:	460d      	mov	r5, r1
    69a4:	4616      	mov	r6, r2
    if (is_level(trigger))
    69a6:	4608      	mov	r0, r1
    69a8:	f005 f95f 	bl	bc6a <is_level>
    69ac:	bb60      	cbnz	r0, 6a08 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    69ae:	2e02      	cmp	r6, #2
    69b0:	f000 80f5 	beq.w	6b9e <next_sense_cond_call_handler+0x202>
    69b4:	f04f 0802 	mov.w	r8, #2
    switch (port)
    69b8:	0963      	lsrs	r3, r4, #5
    69ba:	f000 80f3 	beq.w	6ba4 <next_sense_cond_call_handler+0x208>
    69be:	2b01      	cmp	r3, #1
    69c0:	f040 80f3 	bne.w	6baa <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    69c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    69c8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    69cc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69ce:	f013 0f01 	tst.w	r3, #1
    69d2:	f000 80ec 	beq.w	6bae <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    69d6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69da:	0963      	lsrs	r3, r4, #5
    69dc:	f000 80f5 	beq.w	6bca <next_sense_cond_call_handler+0x22e>
    69e0:	2b01      	cmp	r3, #1
    69e2:	f000 80f5 	beq.w	6bd0 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    69e6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 6c0c <next_sense_cond_call_handler+0x270>
    69ea:	f240 232e 	movw	r3, #558	; 0x22e
    69ee:	464a      	mov	r2, r9
    69f0:	4987      	ldr	r1, [pc, #540]	; (6c10 <next_sense_cond_call_handler+0x274>)
    69f2:	4888      	ldr	r0, [pc, #544]	; (6c14 <next_sense_cond_call_handler+0x278>)
    69f4:	f004 fab7 	bl	af66 <assert_print>
    69f8:	f240 212e 	movw	r1, #558	; 0x22e
    69fc:	4648      	mov	r0, r9
    69fe:	f004 faab 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6a02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6a06:	e0e4      	b.n	6bd2 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    6a08:	4629      	mov	r1, r5
    6a0a:	4620      	mov	r0, r4
    6a0c:	f7ff feda 	bl	67c4 <call_handler>
    switch (port)
    6a10:	0963      	lsrs	r3, r4, #5
    6a12:	d01f      	beq.n	6a54 <next_sense_cond_call_handler+0xb8>
    6a14:	2b01      	cmp	r3, #1
    6a16:	d120      	bne.n	6a5a <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    6a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6a1c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6a20:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a22:	f013 0f01 	tst.w	r3, #1
    6a26:	d01a      	beq.n	6a5e <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    6a28:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a2c:	0963      	lsrs	r3, r4, #5
    6a2e:	d024      	beq.n	6a7a <next_sense_cond_call_handler+0xde>
    6a30:	2b01      	cmp	r3, #1
    6a32:	d025      	beq.n	6a80 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    6a34:	4f75      	ldr	r7, [pc, #468]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6a36:	f240 232e 	movw	r3, #558	; 0x22e
    6a3a:	463a      	mov	r2, r7
    6a3c:	4974      	ldr	r1, [pc, #464]	; (6c10 <next_sense_cond_call_handler+0x274>)
    6a3e:	4875      	ldr	r0, [pc, #468]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6a40:	f004 fa91 	bl	af66 <assert_print>
    6a44:	f240 212e 	movw	r1, #558	; 0x22e
    6a48:	4638      	mov	r0, r7
    6a4a:	f004 fa85 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a52:	e016      	b.n	6a82 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    6a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a58:	e7e0      	b.n	6a1c <next_sense_cond_call_handler+0x80>
    switch (port)
    6a5a:	2300      	movs	r3, #0
    6a5c:	e7de      	b.n	6a1c <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a5e:	4d6b      	ldr	r5, [pc, #428]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6a60:	f240 2329 	movw	r3, #553	; 0x229
    6a64:	462a      	mov	r2, r5
    6a66:	496c      	ldr	r1, [pc, #432]	; (6c18 <next_sense_cond_call_handler+0x27c>)
    6a68:	486a      	ldr	r0, [pc, #424]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6a6a:	f004 fa7c 	bl	af66 <assert_print>
    6a6e:	f240 2129 	movw	r1, #553	; 0x229
    6a72:	4628      	mov	r0, r5
    6a74:	f004 fa70 	bl	af58 <assert_post_action>
    6a78:	e7d6      	b.n	6a28 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    6a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a7e:	e000      	b.n	6a82 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a80:	4b66      	ldr	r3, [pc, #408]	; (6c1c <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a82:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6a86:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6a8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6a8e:	429e      	cmp	r6, r3
    6a90:	f040 80af 	bne.w	6bf2 <next_sense_cond_call_handler+0x256>
    switch (port)
    6a94:	0963      	lsrs	r3, r4, #5
    6a96:	d01f      	beq.n	6ad8 <next_sense_cond_call_handler+0x13c>
    6a98:	2b01      	cmp	r3, #1
    6a9a:	d120      	bne.n	6ade <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    6a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6aa0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6aa4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6aa6:	f013 0f01 	tst.w	r3, #1
    6aaa:	d01a      	beq.n	6ae2 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    6aac:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ab0:	0963      	lsrs	r3, r4, #5
    6ab2:	d024      	beq.n	6afe <next_sense_cond_call_handler+0x162>
    6ab4:	2b01      	cmp	r3, #1
    6ab6:	d025      	beq.n	6b04 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    6ab8:	4f54      	ldr	r7, [pc, #336]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6aba:	f240 232e 	movw	r3, #558	; 0x22e
    6abe:	463a      	mov	r2, r7
    6ac0:	4953      	ldr	r1, [pc, #332]	; (6c10 <next_sense_cond_call_handler+0x274>)
    6ac2:	4854      	ldr	r0, [pc, #336]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6ac4:	f004 fa4f 	bl	af66 <assert_print>
    6ac8:	f240 212e 	movw	r1, #558	; 0x22e
    6acc:	4638      	mov	r0, r7
    6ace:	f004 fa43 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6ad2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6ad6:	e016      	b.n	6b06 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    6ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6adc:	e7e0      	b.n	6aa0 <next_sense_cond_call_handler+0x104>
    switch (port)
    6ade:	2300      	movs	r3, #0
    6ae0:	e7de      	b.n	6aa0 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ae2:	4d4a      	ldr	r5, [pc, #296]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6ae4:	f240 2329 	movw	r3, #553	; 0x229
    6ae8:	462a      	mov	r2, r5
    6aea:	494b      	ldr	r1, [pc, #300]	; (6c18 <next_sense_cond_call_handler+0x27c>)
    6aec:	4849      	ldr	r0, [pc, #292]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6aee:	f004 fa3a 	bl	af66 <assert_print>
    6af2:	f240 2129 	movw	r1, #553	; 0x229
    6af6:	4628      	mov	r0, r5
    6af8:	f004 fa2e 	bl	af58 <assert_post_action>
    6afc:	e7d6      	b.n	6aac <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    6afe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b02:	e000      	b.n	6b06 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b04:	4945      	ldr	r1, [pc, #276]	; (6c1c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b06:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6b0a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6b0e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    6b16:	0963      	lsrs	r3, r4, #5
    6b18:	d01f      	beq.n	6b5a <next_sense_cond_call_handler+0x1be>
    6b1a:	2b01      	cmp	r3, #1
    6b1c:	d120      	bne.n	6b60 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    6b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b22:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b26:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b28:	f013 0f01 	tst.w	r3, #1
    6b2c:	d01a      	beq.n	6b64 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    6b2e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b32:	0964      	lsrs	r4, r4, #5
    6b34:	d024      	beq.n	6b80 <next_sense_cond_call_handler+0x1e4>
    6b36:	2c01      	cmp	r4, #1
    6b38:	d025      	beq.n	6b86 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    6b3a:	4c34      	ldr	r4, [pc, #208]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6b3c:	f240 232e 	movw	r3, #558	; 0x22e
    6b40:	4622      	mov	r2, r4
    6b42:	4933      	ldr	r1, [pc, #204]	; (6c10 <next_sense_cond_call_handler+0x274>)
    6b44:	4833      	ldr	r0, [pc, #204]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6b46:	f004 fa0e 	bl	af66 <assert_print>
    6b4a:	f240 212e 	movw	r1, #558	; 0x22e
    6b4e:	4620      	mov	r0, r4
    6b50:	f004 fa02 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6b54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b58:	e016      	b.n	6b88 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    6b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b5e:	e7e0      	b.n	6b22 <next_sense_cond_call_handler+0x186>
    switch (port)
    6b60:	2300      	movs	r3, #0
    6b62:	e7de      	b.n	6b22 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b64:	4d29      	ldr	r5, [pc, #164]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6b66:	f240 2329 	movw	r3, #553	; 0x229
    6b6a:	462a      	mov	r2, r5
    6b6c:	492a      	ldr	r1, [pc, #168]	; (6c18 <next_sense_cond_call_handler+0x27c>)
    6b6e:	4829      	ldr	r0, [pc, #164]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6b70:	f004 f9f9 	bl	af66 <assert_print>
    6b74:	f240 2129 	movw	r1, #553	; 0x229
    6b78:	4628      	mov	r0, r5
    6b7a:	f004 f9ed 	bl	af58 <assert_post_action>
    6b7e:	e7d6      	b.n	6b2e <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    6b80:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b84:	e000      	b.n	6b88 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b86:	4925      	ldr	r1, [pc, #148]	; (6c1c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b88:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6b8c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6b90:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6b94:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6b98:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    6b9c:	e029      	b.n	6bf2 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b9e:	f04f 0803 	mov.w	r8, #3
    6ba2:	e709      	b.n	69b8 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    6ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ba8:	e70e      	b.n	69c8 <next_sense_cond_call_handler+0x2c>
    switch (port)
    6baa:	2300      	movs	r3, #0
    6bac:	e70c      	b.n	69c8 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bae:	4f17      	ldr	r7, [pc, #92]	; (6c0c <next_sense_cond_call_handler+0x270>)
    6bb0:	f240 2329 	movw	r3, #553	; 0x229
    6bb4:	463a      	mov	r2, r7
    6bb6:	4918      	ldr	r1, [pc, #96]	; (6c18 <next_sense_cond_call_handler+0x27c>)
    6bb8:	4816      	ldr	r0, [pc, #88]	; (6c14 <next_sense_cond_call_handler+0x278>)
    6bba:	f004 f9d4 	bl	af66 <assert_print>
    6bbe:	f240 2129 	movw	r1, #553	; 0x229
    6bc2:	4638      	mov	r0, r7
    6bc4:	f004 f9c8 	bl	af58 <assert_post_action>
    6bc8:	e705      	b.n	69d6 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    6bca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6bce:	e000      	b.n	6bd2 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bd0:	4912      	ldr	r1, [pc, #72]	; (6c1c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6bd2:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    6bd6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6bda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6be6:	2d03      	cmp	r5, #3
    6be8:	d007      	beq.n	6bfa <next_sense_cond_call_handler+0x25e>
    6bea:	2e02      	cmp	r6, #2
    6bec:	d003      	beq.n	6bf6 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6bee:	2e03      	cmp	r6, #3
    6bf0:	d008      	beq.n	6c04 <next_sense_cond_call_handler+0x268>
}
    6bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6bf6:	2d01      	cmp	r5, #1
    6bf8:	d1f9      	bne.n	6bee <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    6bfa:	4629      	mov	r1, r5
    6bfc:	4620      	mov	r0, r4
    6bfe:	f7ff fde1 	bl	67c4 <call_handler>
}
    6c02:	e7f6      	b.n	6bf2 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6c04:	2d02      	cmp	r5, #2
    6c06:	d1f4      	bne.n	6bf2 <next_sense_cond_call_handler+0x256>
    6c08:	e7f7      	b.n	6bfa <next_sense_cond_call_handler+0x25e>
    6c0a:	bf00      	nop
    6c0c:	0000d868 	.word	0x0000d868
    6c10:	0000cc7c 	.word	0x0000cc7c
    6c14:	0000c5c0 	.word	0x0000c5c0
    6c18:	0000d89c 	.word	0x0000d89c
    6c1c:	50000300 	.word	0x50000300

00006c20 <port_event_handle>:
{
    6c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c24:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6c26:	4a65      	ldr	r2, [pc, #404]	; (6dbc <port_event_handle+0x19c>)
    6c28:	466b      	mov	r3, sp
    6c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
    6c2e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    6c32:	2300      	movs	r3, #0
    6c34:	a802      	add	r0, sp, #8
    6c36:	e00b      	b.n	6c50 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    6c38:	aa04      	add	r2, sp, #16
    6c3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6c3e:	f852 2c10 	ldr.w	r2, [r2, #-16]
    6c42:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6c46:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    6c4a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6c4e:	3301      	adds	r3, #1
    6c50:	2b01      	cmp	r3, #1
    6c52:	d9f1      	bls.n	6c38 <port_event_handle+0x18>
    6c54:	e0ad      	b.n	6db2 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    6c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c5a:	e07f      	b.n	6d5c <port_event_handle+0x13c>
    switch (port)
    6c5c:	2300      	movs	r3, #0
    6c5e:	e07d      	b.n	6d5c <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c60:	4f57      	ldr	r7, [pc, #348]	; (6dc0 <port_event_handle+0x1a0>)
    6c62:	f240 2329 	movw	r3, #553	; 0x229
    6c66:	463a      	mov	r2, r7
    6c68:	4956      	ldr	r1, [pc, #344]	; (6dc4 <port_event_handle+0x1a4>)
    6c6a:	4857      	ldr	r0, [pc, #348]	; (6dc8 <port_event_handle+0x1a8>)
    6c6c:	f004 f97b 	bl	af66 <assert_print>
    6c70:	f240 2129 	movw	r1, #553	; 0x229
    6c74:	4638      	mov	r0, r7
    6c76:	f004 f96f 	bl	af58 <assert_post_action>
    6c7a:	e076      	b.n	6d6a <port_event_handle+0x14a>
        case 0: return NRF_P0;
    6c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c80:	e000      	b.n	6c84 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c82:	4b52      	ldr	r3, [pc, #328]	; (6dcc <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6c84:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6c88:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    6c8c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6c90:	4631      	mov	r1, r6
    6c92:	4620      	mov	r0, r4
    6c94:	f7ff fe82 	bl	699c <next_sense_cond_call_handler>
    switch (port)
    6c98:	0963      	lsrs	r3, r4, #5
    6c9a:	d01f      	beq.n	6cdc <port_event_handle+0xbc>
    6c9c:	2b01      	cmp	r3, #1
    6c9e:	d120      	bne.n	6ce2 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    6ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ca4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ca8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6caa:	f013 0f01 	tst.w	r3, #1
    6cae:	d01a      	beq.n	6ce6 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    6cb0:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cb4:	0964      	lsrs	r4, r4, #5
    6cb6:	d024      	beq.n	6d02 <port_event_handle+0xe2>
    6cb8:	2c01      	cmp	r4, #1
    6cba:	d025      	beq.n	6d08 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    6cbc:	4c40      	ldr	r4, [pc, #256]	; (6dc0 <port_event_handle+0x1a0>)
    6cbe:	f240 232e 	movw	r3, #558	; 0x22e
    6cc2:	4622      	mov	r2, r4
    6cc4:	4942      	ldr	r1, [pc, #264]	; (6dd0 <port_event_handle+0x1b0>)
    6cc6:	4840      	ldr	r0, [pc, #256]	; (6dc8 <port_event_handle+0x1a8>)
    6cc8:	f004 f94d 	bl	af66 <assert_print>
    6ccc:	f240 212e 	movw	r1, #558	; 0x22e
    6cd0:	4620      	mov	r0, r4
    6cd2:	f004 f941 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6cd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6cda:	e016      	b.n	6d0a <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    6cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ce0:	e7e0      	b.n	6ca4 <port_event_handle+0x84>
    switch (port)
    6ce2:	2300      	movs	r3, #0
    6ce4:	e7de      	b.n	6ca4 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ce6:	4e36      	ldr	r6, [pc, #216]	; (6dc0 <port_event_handle+0x1a0>)
    6ce8:	f240 2329 	movw	r3, #553	; 0x229
    6cec:	4632      	mov	r2, r6
    6cee:	4935      	ldr	r1, [pc, #212]	; (6dc4 <port_event_handle+0x1a4>)
    6cf0:	4835      	ldr	r0, [pc, #212]	; (6dc8 <port_event_handle+0x1a8>)
    6cf2:	f004 f938 	bl	af66 <assert_print>
    6cf6:	f240 2129 	movw	r1, #553	; 0x229
    6cfa:	4630      	mov	r0, r6
    6cfc:	f004 f92c 	bl	af58 <assert_post_action>
    6d00:	e7d6      	b.n	6cb0 <port_event_handle+0x90>
        case 0: return NRF_P0;
    6d02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d06:	e000      	b.n	6d0a <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d08:	4a30      	ldr	r2, [pc, #192]	; (6dcc <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    6d0a:	2301      	movs	r3, #1
    6d0c:	40b3      	lsls	r3, r6
    6d0e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    6d12:	ab04      	add	r3, sp, #16
    6d14:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6d18:	f853 4c08 	ldr.w	r4, [r3, #-8]
    6d1c:	2c00      	cmp	r4, #0
    6d1e:	d03b      	beq.n	6d98 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    6d20:	fa94 f4a4 	rbit	r4, r4
    6d24:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6d28:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6d2c:	f104 0208 	add.w	r2, r4, #8
    6d30:	4b28      	ldr	r3, [pc, #160]	; (6dd4 <port_event_handle+0x1b4>)
    6d32:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    6d36:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6d3a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    6d3c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6d40:	a802      	add	r0, sp, #8
    6d42:	2301      	movs	r3, #1
    6d44:	fa03 f202 	lsl.w	r2, r3, r2
    6d48:	5c43      	ldrb	r3, [r0, r1]
    6d4a:	ea23 0302 	bic.w	r3, r3, r2
    6d4e:	5443      	strb	r3, [r0, r1]
    switch (port)
    6d50:	0963      	lsrs	r3, r4, #5
    6d52:	d080      	beq.n	6c56 <port_event_handle+0x36>
    6d54:	2b01      	cmp	r3, #1
    6d56:	d181      	bne.n	6c5c <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    6d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d5c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d60:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d62:	f013 0f01 	tst.w	r3, #1
    6d66:	f43f af7b 	beq.w	6c60 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    6d6a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d6e:	0963      	lsrs	r3, r4, #5
    6d70:	d084      	beq.n	6c7c <port_event_handle+0x5c>
    6d72:	2b01      	cmp	r3, #1
    6d74:	d085      	beq.n	6c82 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    6d76:	f8df 8048 	ldr.w	r8, [pc, #72]	; 6dc0 <port_event_handle+0x1a0>
    6d7a:	f240 232e 	movw	r3, #558	; 0x22e
    6d7e:	4642      	mov	r2, r8
    6d80:	4913      	ldr	r1, [pc, #76]	; (6dd0 <port_event_handle+0x1b0>)
    6d82:	4811      	ldr	r0, [pc, #68]	; (6dc8 <port_event_handle+0x1a8>)
    6d84:	f004 f8ef 	bl	af66 <assert_print>
    6d88:	f240 212e 	movw	r1, #558	; 0x22e
    6d8c:	4640      	mov	r0, r8
    6d8e:	f004 f8e3 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6d96:	e775      	b.n	6c84 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6d98:	3501      	adds	r5, #1
    6d9a:	2d01      	cmp	r5, #1
    6d9c:	d9b9      	bls.n	6d12 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d9e:	4b0e      	ldr	r3, [pc, #56]	; (6dd8 <port_event_handle+0x1b8>)
    6da0:	2200      	movs	r2, #0
    6da2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6da6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    6daa:	a802      	add	r0, sp, #8
    6dac:	f7ff fdce 	bl	694c <latch_pending_read_and_check>
    6db0:	b108      	cbz	r0, 6db6 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6db2:	2500      	movs	r5, #0
    6db4:	e7f1      	b.n	6d9a <port_event_handle+0x17a>
}
    6db6:	b004      	add	sp, #16
    6db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dbc:	0000c220 	.word	0x0000c220
    6dc0:	0000d868 	.word	0x0000d868
    6dc4:	0000d89c 	.word	0x0000d89c
    6dc8:	0000c5c0 	.word	0x0000c5c0
    6dcc:	50000300 	.word	0x50000300
    6dd0:	0000cc7c 	.word	0x0000cc7c
    6dd4:	200000f4 	.word	0x200000f4
    6dd8:	40006000 	.word	0x40006000

00006ddc <nrfx_gpiote_input_configure>:
{
    6ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6de0:	4604      	mov	r4, r0
    6de2:	4615      	mov	r5, r2
    6de4:	461e      	mov	r6, r3
    if (p_input_config)
    6de6:	2900      	cmp	r1, #0
    6de8:	d064      	beq.n	6eb4 <nrfx_gpiote_input_configure+0xd8>
    6dea:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    6dec:	f004 ff25 	bl	bc3a <pin_is_task_output>
    6df0:	2800      	cmp	r0, #0
    6df2:	f040 80cd 	bne.w	6f90 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    6df6:	0963      	lsrs	r3, r4, #5
    6df8:	d020      	beq.n	6e3c <nrfx_gpiote_input_configure+0x60>
    6dfa:	2b01      	cmp	r3, #1
    6dfc:	d121      	bne.n	6e42 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    6dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e02:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e06:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e08:	f013 0f01 	tst.w	r3, #1
    6e0c:	d01b      	beq.n	6e46 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    6e0e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e12:	0963      	lsrs	r3, r4, #5
    6e14:	d025      	beq.n	6e62 <nrfx_gpiote_input_configure+0x86>
    6e16:	2b01      	cmp	r3, #1
    6e18:	d026      	beq.n	6e68 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    6e1a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 6fa0 <nrfx_gpiote_input_configure+0x1c4>
    6e1e:	f240 232e 	movw	r3, #558	; 0x22e
    6e22:	464a      	mov	r2, r9
    6e24:	495f      	ldr	r1, [pc, #380]	; (6fa4 <nrfx_gpiote_input_configure+0x1c8>)
    6e26:	4860      	ldr	r0, [pc, #384]	; (6fa8 <nrfx_gpiote_input_configure+0x1cc>)
    6e28:	f004 f89d 	bl	af66 <assert_print>
    6e2c:	f240 212e 	movw	r1, #558	; 0x22e
    6e30:	4648      	mov	r0, r9
    6e32:	f004 f891 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    6e36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e3a:	e016      	b.n	6e6a <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    6e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e40:	e7df      	b.n	6e02 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    6e42:	2300      	movs	r3, #0
    6e44:	e7dd      	b.n	6e02 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e46:	4f56      	ldr	r7, [pc, #344]	; (6fa0 <nrfx_gpiote_input_configure+0x1c4>)
    6e48:	f240 2329 	movw	r3, #553	; 0x229
    6e4c:	463a      	mov	r2, r7
    6e4e:	4957      	ldr	r1, [pc, #348]	; (6fac <nrfx_gpiote_input_configure+0x1d0>)
    6e50:	4855      	ldr	r0, [pc, #340]	; (6fa8 <nrfx_gpiote_input_configure+0x1cc>)
    6e52:	f004 f888 	bl	af66 <assert_print>
    6e56:	f240 2129 	movw	r1, #553	; 0x229
    6e5a:	4638      	mov	r0, r7
    6e5c:	f004 f87c 	bl	af58 <assert_post_action>
    6e60:	e7d5      	b.n	6e0e <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    6e62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e66:	e000      	b.n	6e6a <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e68:	4951      	ldr	r1, [pc, #324]	; (6fb0 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6e6a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    6e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6e72:	f1b8 0f00 	cmp.w	r8, #0
    6e76:	d03f      	beq.n	6ef8 <nrfx_gpiote_input_configure+0x11c>
    6e78:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6e7a:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    6e7e:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6e82:	f1b8 0f00 	cmp.w	r8, #0
    6e86:	d039      	beq.n	6efc <nrfx_gpiote_input_configure+0x120>
    6e88:	f898 2000 	ldrb.w	r2, [r8]
    6e8c:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e8e:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    6e90:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6e94:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6e98:	4a46      	ldr	r2, [pc, #280]	; (6fb4 <nrfx_gpiote_input_configure+0x1d8>)
    6e9a:	f104 0108 	add.w	r1, r4, #8
    6e9e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6ea2:	f023 0302 	bic.w	r3, r3, #2
    6ea6:	b29b      	uxth	r3, r3
    6ea8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6eac:	f043 0301 	orr.w	r3, r3, #1
    6eb0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6eb4:	b1bd      	cbz	r5, 6ee6 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6eb6:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6eb8:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    6ebc:	4620      	mov	r0, r4
    6ebe:	f7ff fc2f 	bl	6720 <pin_is_output>
    6ec2:	b1e8      	cbz	r0, 6f00 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    6ec4:	f1b8 0f00 	cmp.w	r8, #0
    6ec8:	d164      	bne.n	6f94 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6eca:	4a3a      	ldr	r2, [pc, #232]	; (6fb4 <nrfx_gpiote_input_configure+0x1d8>)
    6ecc:	f104 0108 	add.w	r1, r4, #8
    6ed0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6ed4:	f023 031c 	bic.w	r3, r3, #28
    6ed8:	b29b      	uxth	r3, r3
    6eda:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6ede:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    6ee2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6ee6:	2e00      	cmp	r6, #0
    6ee8:	d058      	beq.n	6f9c <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6eea:	6872      	ldr	r2, [r6, #4]
    6eec:	6831      	ldr	r1, [r6, #0]
    6eee:	4620      	mov	r0, r4
    6ef0:	f7ff fcd4 	bl	689c <pin_handler_set>
}
    6ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6ef8:	2200      	movs	r2, #0
    6efa:	e7be      	b.n	6e7a <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6efc:	2200      	movs	r2, #0
    6efe:	e7c6      	b.n	6e8e <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6f00:	4a2c      	ldr	r2, [pc, #176]	; (6fb4 <nrfx_gpiote_input_configure+0x1d8>)
    6f02:	f104 0108 	add.w	r1, r4, #8
    6f06:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6f0a:	f023 0320 	bic.w	r3, r3, #32
    6f0e:	04db      	lsls	r3, r3, #19
    6f10:	0cdb      	lsrs	r3, r3, #19
    6f12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    6f16:	f1b8 0f00 	cmp.w	r8, #0
    6f1a:	d0d6      	beq.n	6eca <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    6f1c:	2f03      	cmp	r7, #3
    6f1e:	d83b      	bhi.n	6f98 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6f20:	686b      	ldr	r3, [r5, #4]
    6f22:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6f24:	b937      	cbnz	r7, 6f34 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    6f26:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6f2a:	4b23      	ldr	r3, [pc, #140]	; (6fb8 <nrfx_gpiote_input_configure+0x1dc>)
    6f2c:	2200      	movs	r2, #0
    6f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6f32:	e7ca      	b.n	6eca <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6f34:	4638      	mov	r0, r7
    6f36:	f004 fe97 	bl	bc68 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6f3a:	4b1f      	ldr	r3, [pc, #124]	; (6fb8 <nrfx_gpiote_input_configure+0x1dc>)
    6f3c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    6f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6f44:	f021 0103 	bic.w	r1, r1, #3
    6f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6f50:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    6f54:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    6f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6f5c:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    6f60:	0221      	lsls	r1, r4, #8
    6f62:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6f66:	0400      	lsls	r0, r0, #16
    6f68:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6f6c:	4301      	orrs	r1, r0
    6f6e:	ea4c 0101 	orr.w	r1, ip, r1
    6f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6f76:	036b      	lsls	r3, r5, #13
    6f78:	b29b      	uxth	r3, r3
    6f7a:	4a0e      	ldr	r2, [pc, #56]	; (6fb4 <nrfx_gpiote_input_configure+0x1d8>)
    6f7c:	f104 0108 	add.w	r1, r4, #8
    6f80:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    6f84:	4303      	orrs	r3, r0
    6f86:	f043 0320 	orr.w	r3, r3, #32
    6f8a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    6f8e:	e79c      	b.n	6eca <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    6f90:	480a      	ldr	r0, [pc, #40]	; (6fbc <nrfx_gpiote_input_configure+0x1e0>)
    6f92:	e7af      	b.n	6ef4 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    6f94:	4809      	ldr	r0, [pc, #36]	; (6fbc <nrfx_gpiote_input_configure+0x1e0>)
    6f96:	e7ad      	b.n	6ef4 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    6f98:	4808      	ldr	r0, [pc, #32]	; (6fbc <nrfx_gpiote_input_configure+0x1e0>)
    6f9a:	e7ab      	b.n	6ef4 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    6f9c:	4808      	ldr	r0, [pc, #32]	; (6fc0 <nrfx_gpiote_input_configure+0x1e4>)
    6f9e:	e7a9      	b.n	6ef4 <nrfx_gpiote_input_configure+0x118>
    6fa0:	0000d868 	.word	0x0000d868
    6fa4:	0000cc7c 	.word	0x0000cc7c
    6fa8:	0000c5c0 	.word	0x0000c5c0
    6fac:	0000d89c 	.word	0x0000d89c
    6fb0:	50000300 	.word	0x50000300
    6fb4:	200000f4 	.word	0x200000f4
    6fb8:	40006000 	.word	0x40006000
    6fbc:	0bad0004 	.word	0x0bad0004
    6fc0:	0bad0000 	.word	0x0bad0000

00006fc4 <nrfx_gpiote_output_configure>:
{
    6fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fc8:	4604      	mov	r4, r0
    6fca:	4615      	mov	r5, r2
    if (p_config)
    6fcc:	2900      	cmp	r1, #0
    6fce:	f000 8086 	beq.w	70de <nrfx_gpiote_output_configure+0x11a>
    6fd2:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6fd4:	f004 fe40 	bl	bc58 <pin_is_input>
    6fd8:	b128      	cbz	r0, 6fe6 <nrfx_gpiote_output_configure+0x22>
    6fda:	4620      	mov	r0, r4
    6fdc:	f7ff fb8a 	bl	66f4 <pin_in_use_by_te>
    6fe0:	2800      	cmp	r0, #0
    6fe2:	f040 80ce 	bne.w	7182 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6fe6:	4620      	mov	r0, r4
    6fe8:	f7ff fb8e 	bl	6708 <pin_has_trigger>
    6fec:	b118      	cbz	r0, 6ff6 <nrfx_gpiote_output_configure+0x32>
    6fee:	787b      	ldrb	r3, [r7, #1]
    6ff0:	2b01      	cmp	r3, #1
    6ff2:	f000 80c8 	beq.w	7186 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6ff6:	f107 0901 	add.w	r9, r7, #1
    6ffa:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    6ffe:	0963      	lsrs	r3, r4, #5
    7000:	d020      	beq.n	7044 <nrfx_gpiote_output_configure+0x80>
    7002:	2b01      	cmp	r3, #1
    7004:	d121      	bne.n	704a <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    7006:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    700a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    700e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7010:	f013 0f01 	tst.w	r3, #1
    7014:	d01b      	beq.n	704e <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    7016:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    701a:	0963      	lsrs	r3, r4, #5
    701c:	d025      	beq.n	706a <nrfx_gpiote_output_configure+0xa6>
    701e:	2b01      	cmp	r3, #1
    7020:	d026      	beq.n	7070 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    7022:	f8df a170 	ldr.w	sl, [pc, #368]	; 7194 <nrfx_gpiote_output_configure+0x1d0>
    7026:	f240 232e 	movw	r3, #558	; 0x22e
    702a:	4652      	mov	r2, sl
    702c:	495a      	ldr	r1, [pc, #360]	; (7198 <nrfx_gpiote_output_configure+0x1d4>)
    702e:	485b      	ldr	r0, [pc, #364]	; (719c <nrfx_gpiote_output_configure+0x1d8>)
    7030:	f003 ff99 	bl	af66 <assert_print>
    7034:	f240 212e 	movw	r1, #558	; 0x22e
    7038:	4650      	mov	r0, sl
    703a:	f003 ff8d 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    703e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7042:	e016      	b.n	7072 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    7044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7048:	e7df      	b.n	700a <nrfx_gpiote_output_configure+0x46>
    switch (port)
    704a:	2300      	movs	r3, #0
    704c:	e7dd      	b.n	700a <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    704e:	4e51      	ldr	r6, [pc, #324]	; (7194 <nrfx_gpiote_output_configure+0x1d0>)
    7050:	f240 2329 	movw	r3, #553	; 0x229
    7054:	4632      	mov	r2, r6
    7056:	4952      	ldr	r1, [pc, #328]	; (71a0 <nrfx_gpiote_output_configure+0x1dc>)
    7058:	4850      	ldr	r0, [pc, #320]	; (719c <nrfx_gpiote_output_configure+0x1d8>)
    705a:	f003 ff84 	bl	af66 <assert_print>
    705e:	f240 2129 	movw	r1, #553	; 0x229
    7062:	4630      	mov	r0, r6
    7064:	f003 ff78 	bl	af58 <assert_post_action>
    7068:	e7d5      	b.n	7016 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    706a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    706e:	e000      	b.n	7072 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7070:	4a4c      	ldr	r2, [pc, #304]	; (71a4 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7072:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    7076:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    707a:	f1b9 0f00 	cmp.w	r9, #0
    707e:	d04b      	beq.n	7118 <nrfx_gpiote_output_configure+0x154>
    7080:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7082:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7086:	f1b8 0f00 	cmp.w	r8, #0
    708a:	d047      	beq.n	711c <nrfx_gpiote_output_configure+0x158>
    708c:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    708e:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7090:	2f00      	cmp	r7, #0
    7092:	d045      	beq.n	7120 <nrfx_gpiote_output_configure+0x15c>
    7094:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7098:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    709a:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    709e:	f1b9 0f00 	cmp.w	r9, #0
    70a2:	d03f      	beq.n	7124 <nrfx_gpiote_output_configure+0x160>
    70a4:	787b      	ldrb	r3, [r7, #1]
    70a6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    70a8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    70ac:	f1b8 0f00 	cmp.w	r8, #0
    70b0:	d03a      	beq.n	7128 <nrfx_gpiote_output_configure+0x164>
    70b2:	78b8      	ldrb	r0, [r7, #2]
    70b4:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    70b6:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    70b8:	2f00      	cmp	r7, #0
    70ba:	d037      	beq.n	712c <nrfx_gpiote_output_configure+0x168>
    70bc:	7838      	ldrb	r0, [r7, #0]
    70be:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    70c0:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    70c2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    70c4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    70c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    70cc:	4a36      	ldr	r2, [pc, #216]	; (71a8 <nrfx_gpiote_output_configure+0x1e4>)
    70ce:	f104 0108 	add.w	r1, r4, #8
    70d2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    70d6:	f043 0303 	orr.w	r3, r3, #3
    70da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    70de:	2d00      	cmp	r5, #0
    70e0:	d053      	beq.n	718a <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    70e2:	4620      	mov	r0, r4
    70e4:	f004 fdb8 	bl	bc58 <pin_is_input>
    70e8:	2800      	cmp	r0, #0
    70ea:	d150      	bne.n	718e <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    70ec:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    70ee:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    70f2:	4a2e      	ldr	r2, [pc, #184]	; (71ac <nrfx_gpiote_output_configure+0x1e8>)
    70f4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    70f8:	492b      	ldr	r1, [pc, #172]	; (71a8 <nrfx_gpiote_output_configure+0x1e4>)
    70fa:	f104 0008 	add.w	r0, r4, #8
    70fe:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    7102:	f022 0220 	bic.w	r2, r2, #32
    7106:	04d2      	lsls	r2, r2, #19
    7108:	0cd2      	lsrs	r2, r2, #19
    710a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    710e:	786a      	ldrb	r2, [r5, #1]
    7110:	b972      	cbnz	r2, 7130 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    7112:	4827      	ldr	r0, [pc, #156]	; (71b0 <nrfx_gpiote_output_configure+0x1ec>)
}
    7114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7118:	2300      	movs	r3, #0
    711a:	e7b2      	b.n	7082 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    711c:	2000      	movs	r0, #0
    711e:	e7b6      	b.n	708e <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7120:	2000      	movs	r0, #0
    7122:	e7b9      	b.n	7098 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7124:	2300      	movs	r3, #0
    7126:	e7bf      	b.n	70a8 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7128:	2000      	movs	r0, #0
    712a:	e7c4      	b.n	70b6 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    712c:	2000      	movs	r0, #0
    712e:	e7c7      	b.n	70c0 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7130:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7132:	481e      	ldr	r0, [pc, #120]	; (71ac <nrfx_gpiote_output_configure+0x1e8>)
    7134:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    7138:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    713c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    7140:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    7144:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7148:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    714c:	0221      	lsls	r1, r4, #8
    714e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7152:	0412      	lsls	r2, r2, #16
    7154:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7158:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    715a:	0539      	lsls	r1, r7, #20
    715c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7160:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7162:	4332      	orrs	r2, r6
    7164:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7168:	035b      	lsls	r3, r3, #13
    716a:	b29b      	uxth	r3, r3
    716c:	4a0e      	ldr	r2, [pc, #56]	; (71a8 <nrfx_gpiote_output_configure+0x1e4>)
    716e:	3408      	adds	r4, #8
    7170:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    7174:	430b      	orrs	r3, r1
    7176:	f043 0320 	orr.w	r3, r3, #32
    717a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    717e:	480c      	ldr	r0, [pc, #48]	; (71b0 <nrfx_gpiote_output_configure+0x1ec>)
    7180:	e7c8      	b.n	7114 <nrfx_gpiote_output_configure+0x150>
    7182:	480c      	ldr	r0, [pc, #48]	; (71b4 <nrfx_gpiote_output_configure+0x1f0>)
    7184:	e7c6      	b.n	7114 <nrfx_gpiote_output_configure+0x150>
    7186:	480b      	ldr	r0, [pc, #44]	; (71b4 <nrfx_gpiote_output_configure+0x1f0>)
    7188:	e7c4      	b.n	7114 <nrfx_gpiote_output_configure+0x150>
    718a:	4809      	ldr	r0, [pc, #36]	; (71b0 <nrfx_gpiote_output_configure+0x1ec>)
    718c:	e7c2      	b.n	7114 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    718e:	4809      	ldr	r0, [pc, #36]	; (71b4 <nrfx_gpiote_output_configure+0x1f0>)
    7190:	e7c0      	b.n	7114 <nrfx_gpiote_output_configure+0x150>
    7192:	bf00      	nop
    7194:	0000d868 	.word	0x0000d868
    7198:	0000cc7c 	.word	0x0000cc7c
    719c:	0000c5c0 	.word	0x0000c5c0
    71a0:	0000d89c 	.word	0x0000d89c
    71a4:	50000300 	.word	0x50000300
    71a8:	200000f4 	.word	0x200000f4
    71ac:	40006000 	.word	0x40006000
    71b0:	0bad0000 	.word	0x0bad0000
    71b4:	0bad0004 	.word	0x0bad0004

000071b8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    71b8:	4b01      	ldr	r3, [pc, #4]	; (71c0 <nrfx_gpiote_global_callback_set+0x8>)
    71ba:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    71bc:	60d9      	str	r1, [r3, #12]
}
    71be:	4770      	bx	lr
    71c0:	200000f4 	.word	0x200000f4

000071c4 <nrfx_gpiote_channel_get>:
{
    71c4:	b570      	push	{r4, r5, r6, lr}
    71c6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    71c8:	460d      	mov	r5, r1
    71ca:	b159      	cbz	r1, 71e4 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    71cc:	4620      	mov	r0, r4
    71ce:	f7ff fa91 	bl	66f4 <pin_in_use_by_te>
    71d2:	b1a8      	cbz	r0, 7200 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    71d4:	3408      	adds	r4, #8
    71d6:	4b0b      	ldr	r3, [pc, #44]	; (7204 <nrfx_gpiote_channel_get+0x40>)
    71d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    71dc:	0b5b      	lsrs	r3, r3, #13
    71de:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    71e0:	4809      	ldr	r0, [pc, #36]	; (7208 <nrfx_gpiote_channel_get+0x44>)
}
    71e2:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    71e4:	4e09      	ldr	r6, [pc, #36]	; (720c <nrfx_gpiote_channel_get+0x48>)
    71e6:	f240 2335 	movw	r3, #565	; 0x235
    71ea:	4632      	mov	r2, r6
    71ec:	4908      	ldr	r1, [pc, #32]	; (7210 <nrfx_gpiote_channel_get+0x4c>)
    71ee:	4809      	ldr	r0, [pc, #36]	; (7214 <nrfx_gpiote_channel_get+0x50>)
    71f0:	f003 feb9 	bl	af66 <assert_print>
    71f4:	f240 2135 	movw	r1, #565	; 0x235
    71f8:	4630      	mov	r0, r6
    71fa:	f003 fead 	bl	af58 <assert_post_action>
    71fe:	e7e5      	b.n	71cc <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    7200:	4805      	ldr	r0, [pc, #20]	; (7218 <nrfx_gpiote_channel_get+0x54>)
    7202:	e7ee      	b.n	71e2 <nrfx_gpiote_channel_get+0x1e>
    7204:	200000f4 	.word	0x200000f4
    7208:	0bad0000 	.word	0x0bad0000
    720c:	0000da8c 	.word	0x0000da8c
    7210:	0000dae0 	.word	0x0000dae0
    7214:	0000c5c0 	.word	0x0000c5c0
    7218:	0bad0004 	.word	0x0bad0004

0000721c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    721c:	4b10      	ldr	r3, [pc, #64]	; (7260 <nrfx_gpiote_init+0x44>)
    721e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7222:	b10b      	cbz	r3, 7228 <nrfx_gpiote_init+0xc>
        return err_code;
    7224:	480f      	ldr	r0, [pc, #60]	; (7264 <nrfx_gpiote_init+0x48>)
}
    7226:	4770      	bx	lr
{
    7228:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    722a:	4c0d      	ldr	r4, [pc, #52]	; (7260 <nrfx_gpiote_init+0x44>)
    722c:	2260      	movs	r2, #96	; 0x60
    722e:	2100      	movs	r1, #0
    7230:	f104 0010 	add.w	r0, r4, #16
    7234:	f004 f85e 	bl	b2f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7238:	2006      	movs	r0, #6
    723a:	f7fc f851 	bl	32e0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    723e:	4b0a      	ldr	r3, [pc, #40]	; (7268 <nrfx_gpiote_init+0x4c>)
    7240:	2200      	movs	r2, #0
    7242:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7246:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    724a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    724e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7252:	2301      	movs	r3, #1
    7254:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7258:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    725a:	4804      	ldr	r0, [pc, #16]	; (726c <nrfx_gpiote_init+0x50>)
}
    725c:	bd10      	pop	{r4, pc}
    725e:	bf00      	nop
    7260:	200000f4 	.word	0x200000f4
    7264:	0bad0005 	.word	0x0bad0005
    7268:	40006000 	.word	0x40006000
    726c:	0bad0000 	.word	0x0bad0000

00007270 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7270:	4b03      	ldr	r3, [pc, #12]	; (7280 <nrfx_gpiote_is_init+0x10>)
    7272:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7276:	3800      	subs	r0, #0
    7278:	bf18      	it	ne
    727a:	2001      	movne	r0, #1
    727c:	4770      	bx	lr
    727e:	bf00      	nop
    7280:	200000f4 	.word	0x200000f4

00007284 <nrfx_gpiote_channel_free>:
{
    7284:	b508      	push	{r3, lr}
    7286:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7288:	4801      	ldr	r0, [pc, #4]	; (7290 <nrfx_gpiote_channel_free+0xc>)
    728a:	f7ff f855 	bl	6338 <nrfx_flag32_free>
}
    728e:	bd08      	pop	{r3, pc}
    7290:	20000164 	.word	0x20000164

00007294 <nrfx_gpiote_channel_alloc>:
{
    7294:	b508      	push	{r3, lr}
    7296:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7298:	4801      	ldr	r0, [pc, #4]	; (72a0 <nrfx_gpiote_channel_alloc+0xc>)
    729a:	f7ff f825 	bl	62e8 <nrfx_flag32_alloc>
}
    729e:	bd08      	pop	{r3, pc}
    72a0:	20000164 	.word	0x20000164

000072a4 <nrfx_gpiote_trigger_enable>:
{
    72a4:	b570      	push	{r4, r5, r6, lr}
    72a6:	4604      	mov	r4, r0
    72a8:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    72aa:	f7ff fa2d 	bl	6708 <pin_has_trigger>
    72ae:	b1b8      	cbz	r0, 72e0 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    72b0:	4620      	mov	r0, r4
    72b2:	f7ff fa1f 	bl	66f4 <pin_in_use_by_te>
    72b6:	b118      	cbz	r0, 72c0 <nrfx_gpiote_trigger_enable+0x1c>
    72b8:	4620      	mov	r0, r4
    72ba:	f004 fccd 	bl	bc58 <pin_is_input>
    72be:	b9e8      	cbnz	r0, 72fc <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    72c0:	2d00      	cmp	r5, #0
    72c2:	d04c      	beq.n	735e <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    72c4:	f104 0308 	add.w	r3, r4, #8
    72c8:	4a70      	ldr	r2, [pc, #448]	; (748c <nrfx_gpiote_trigger_enable+0x1e8>)
    72ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    72ce:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    72d2:	2b04      	cmp	r3, #4
    72d4:	f000 8092 	beq.w	73fc <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    72d8:	2b05      	cmp	r3, #5
    72da:	d14e      	bne.n	737a <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    72dc:	2602      	movs	r6, #2
    72de:	e08e      	b.n	73fe <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    72e0:	4e6b      	ldr	r6, [pc, #428]	; (7490 <nrfx_gpiote_trigger_enable+0x1ec>)
    72e2:	f240 33df 	movw	r3, #991	; 0x3df
    72e6:	4632      	mov	r2, r6
    72e8:	496a      	ldr	r1, [pc, #424]	; (7494 <nrfx_gpiote_trigger_enable+0x1f0>)
    72ea:	486b      	ldr	r0, [pc, #428]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    72ec:	f003 fe3b 	bl	af66 <assert_print>
    72f0:	f240 31df 	movw	r1, #991	; 0x3df
    72f4:	4630      	mov	r0, r6
    72f6:	f003 fe2f 	bl	af58 <assert_post_action>
    72fa:	e7d9      	b.n	72b0 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    72fc:	4620      	mov	r0, r4
    72fe:	f7ff fa19 	bl	6734 <pin_te_get>
    7302:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    7304:	2807      	cmp	r0, #7
    7306:	d81c      	bhi.n	7342 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7308:	00a3      	lsls	r3, r4, #2
    730a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    730e:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    7310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7314:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7318:	2200      	movs	r2, #0
    731a:	601a      	str	r2, [r3, #0]
    731c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    731e:	4a5f      	ldr	r2, [pc, #380]	; (749c <nrfx_gpiote_trigger_enable+0x1f8>)
    7320:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    7324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7328:	f043 0301 	orr.w	r3, r3, #1
    732c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    7330:	2d00      	cmp	r5, #0
    7332:	f000 80a9 	beq.w	7488 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7336:	2001      	movs	r0, #1
    7338:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    733c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    7340:	e0a2      	b.n	7488 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    7342:	4e57      	ldr	r6, [pc, #348]	; (74a0 <nrfx_gpiote_trigger_enable+0x1fc>)
    7344:	f44f 7323 	mov.w	r3, #652	; 0x28c
    7348:	4632      	mov	r2, r6
    734a:	4956      	ldr	r1, [pc, #344]	; (74a4 <nrfx_gpiote_trigger_enable+0x200>)
    734c:	4852      	ldr	r0, [pc, #328]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    734e:	f003 fe0a 	bl	af66 <assert_print>
    7352:	f44f 7123 	mov.w	r1, #652	; 0x28c
    7356:	4630      	mov	r0, r6
    7358:	f003 fdfe 	bl	af58 <assert_post_action>
    735c:	e7d4      	b.n	7308 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    735e:	4d4c      	ldr	r5, [pc, #304]	; (7490 <nrfx_gpiote_trigger_enable+0x1ec>)
    7360:	f240 33ee 	movw	r3, #1006	; 0x3ee
    7364:	462a      	mov	r2, r5
    7366:	4950      	ldr	r1, [pc, #320]	; (74a8 <nrfx_gpiote_trigger_enable+0x204>)
    7368:	484b      	ldr	r0, [pc, #300]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    736a:	f003 fdfc 	bl	af66 <assert_print>
    736e:	f240 31ee 	movw	r1, #1006	; 0x3ee
    7372:	4628      	mov	r0, r5
    7374:	f003 fdf0 	bl	af58 <assert_post_action>
    7378:	e7a4      	b.n	72c4 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    737a:	0963      	lsrs	r3, r4, #5
    737c:	d01f      	beq.n	73be <nrfx_gpiote_trigger_enable+0x11a>
    737e:	2b01      	cmp	r3, #1
    7380:	d120      	bne.n	73c4 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    7382:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7386:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    738a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    738c:	f013 0f01 	tst.w	r3, #1
    7390:	d01a      	beq.n	73c8 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    7392:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7396:	0963      	lsrs	r3, r4, #5
    7398:	d024      	beq.n	73e4 <nrfx_gpiote_trigger_enable+0x140>
    739a:	2b01      	cmp	r3, #1
    739c:	d025      	beq.n	73ea <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    739e:	4e43      	ldr	r6, [pc, #268]	; (74ac <nrfx_gpiote_trigger_enable+0x208>)
    73a0:	f240 232e 	movw	r3, #558	; 0x22e
    73a4:	4632      	mov	r2, r6
    73a6:	4942      	ldr	r1, [pc, #264]	; (74b0 <nrfx_gpiote_trigger_enable+0x20c>)
    73a8:	483b      	ldr	r0, [pc, #236]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    73aa:	f003 fddc 	bl	af66 <assert_print>
    73ae:	f240 212e 	movw	r1, #558	; 0x22e
    73b2:	4630      	mov	r0, r6
    73b4:	f003 fdd0 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    73b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    73bc:	e016      	b.n	73ec <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    73be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73c2:	e7e0      	b.n	7386 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    73c4:	2300      	movs	r3, #0
    73c6:	e7de      	b.n	7386 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    73c8:	4d38      	ldr	r5, [pc, #224]	; (74ac <nrfx_gpiote_trigger_enable+0x208>)
    73ca:	f240 2329 	movw	r3, #553	; 0x229
    73ce:	462a      	mov	r2, r5
    73d0:	4938      	ldr	r1, [pc, #224]	; (74b4 <nrfx_gpiote_trigger_enable+0x210>)
    73d2:	4831      	ldr	r0, [pc, #196]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    73d4:	f003 fdc7 	bl	af66 <assert_print>
    73d8:	f240 2129 	movw	r1, #553	; 0x229
    73dc:	4628      	mov	r0, r5
    73de:	f003 fdbb 	bl	af58 <assert_post_action>
    73e2:	e7d6      	b.n	7392 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    73e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    73e8:	e000      	b.n	73ec <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    73ea:	4b33      	ldr	r3, [pc, #204]	; (74b8 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    73ec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    73f0:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    73f2:	f013 0f01 	tst.w	r3, #1
    73f6:	d024      	beq.n	7442 <nrfx_gpiote_trigger_enable+0x19e>
    73f8:	2603      	movs	r6, #3
    73fa:	e000      	b.n	73fe <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    73fc:	2603      	movs	r6, #3
    switch (port)
    73fe:	0963      	lsrs	r3, r4, #5
    7400:	d021      	beq.n	7446 <nrfx_gpiote_trigger_enable+0x1a2>
    7402:	2b01      	cmp	r3, #1
    7404:	d122      	bne.n	744c <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    7406:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    740a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    740e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7410:	f013 0f01 	tst.w	r3, #1
    7414:	d01c      	beq.n	7450 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    7416:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    741a:	0964      	lsrs	r4, r4, #5
    741c:	d026      	beq.n	746c <nrfx_gpiote_trigger_enable+0x1c8>
    741e:	2c01      	cmp	r4, #1
    7420:	d027      	beq.n	7472 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    7422:	4c22      	ldr	r4, [pc, #136]	; (74ac <nrfx_gpiote_trigger_enable+0x208>)
    7424:	f240 232e 	movw	r3, #558	; 0x22e
    7428:	4622      	mov	r2, r4
    742a:	4921      	ldr	r1, [pc, #132]	; (74b0 <nrfx_gpiote_trigger_enable+0x20c>)
    742c:	481a      	ldr	r0, [pc, #104]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    742e:	f003 fd9a 	bl	af66 <assert_print>
    7432:	f240 212e 	movw	r1, #558	; 0x22e
    7436:	4620      	mov	r0, r4
    7438:	f003 fd8e 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    743c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7440:	e018      	b.n	7474 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7442:	2602      	movs	r6, #2
    7444:	e7db      	b.n	73fe <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    7446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    744a:	e7de      	b.n	740a <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    744c:	2300      	movs	r3, #0
    744e:	e7dc      	b.n	740a <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7450:	4d16      	ldr	r5, [pc, #88]	; (74ac <nrfx_gpiote_trigger_enable+0x208>)
    7452:	f240 2329 	movw	r3, #553	; 0x229
    7456:	462a      	mov	r2, r5
    7458:	4916      	ldr	r1, [pc, #88]	; (74b4 <nrfx_gpiote_trigger_enable+0x210>)
    745a:	480f      	ldr	r0, [pc, #60]	; (7498 <nrfx_gpiote_trigger_enable+0x1f4>)
    745c:	f003 fd83 	bl	af66 <assert_print>
    7460:	f240 2129 	movw	r1, #553	; 0x229
    7464:	4628      	mov	r0, r5
    7466:	f003 fd77 	bl	af58 <assert_post_action>
    746a:	e7d4      	b.n	7416 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    746c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7470:	e000      	b.n	7474 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7472:	4911      	ldr	r1, [pc, #68]	; (74b8 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7474:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    7478:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    747c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7480:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7484:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    7488:	bd70      	pop	{r4, r5, r6, pc}
    748a:	bf00      	nop
    748c:	200000f4 	.word	0x200000f4
    7490:	0000da8c 	.word	0x0000da8c
    7494:	0000db30 	.word	0x0000db30
    7498:	0000c5c0 	.word	0x0000c5c0
    749c:	40006000 	.word	0x40006000
    74a0:	0000daec 	.word	0x0000daec
    74a4:	0000db24 	.word	0x0000db24
    74a8:	0000db48 	.word	0x0000db48
    74ac:	0000d868 	.word	0x0000d868
    74b0:	0000cc7c 	.word	0x0000cc7c
    74b4:	0000d89c 	.word	0x0000d89c
    74b8:	50000300 	.word	0x50000300

000074bc <nrfx_gpiote_trigger_disable>:
{
    74bc:	b538      	push	{r3, r4, r5, lr}
    74be:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    74c0:	f7ff f918 	bl	66f4 <pin_in_use_by_te>
    74c4:	b1a0      	cbz	r0, 74f0 <nrfx_gpiote_trigger_disable+0x34>
    74c6:	4620      	mov	r0, r4
    74c8:	f004 fbc6 	bl	bc58 <pin_is_input>
    74cc:	b180      	cbz	r0, 74f0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    74ce:	4620      	mov	r0, r4
    74d0:	f7ff f930 	bl	6734 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    74d4:	2201      	movs	r2, #1
    74d6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    74d8:	4b26      	ldr	r3, [pc, #152]	; (7574 <nrfx_gpiote_trigger_disable+0xb8>)
    74da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    74de:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    74e2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    74e6:	f022 0203 	bic.w	r2, r2, #3
    74ea:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    74ee:	e040      	b.n	7572 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    74f0:	0963      	lsrs	r3, r4, #5
    74f2:	d01f      	beq.n	7534 <nrfx_gpiote_trigger_disable+0x78>
    74f4:	2b01      	cmp	r3, #1
    74f6:	d120      	bne.n	753a <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    74f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    74fc:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7500:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7502:	f013 0f01 	tst.w	r3, #1
    7506:	d01a      	beq.n	753e <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    7508:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    750c:	0964      	lsrs	r4, r4, #5
    750e:	d024      	beq.n	755a <nrfx_gpiote_trigger_disable+0x9e>
    7510:	2c01      	cmp	r4, #1
    7512:	d025      	beq.n	7560 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    7514:	4c18      	ldr	r4, [pc, #96]	; (7578 <nrfx_gpiote_trigger_disable+0xbc>)
    7516:	f240 232e 	movw	r3, #558	; 0x22e
    751a:	4622      	mov	r2, r4
    751c:	4917      	ldr	r1, [pc, #92]	; (757c <nrfx_gpiote_trigger_disable+0xc0>)
    751e:	4818      	ldr	r0, [pc, #96]	; (7580 <nrfx_gpiote_trigger_disable+0xc4>)
    7520:	f003 fd21 	bl	af66 <assert_print>
    7524:	f240 212e 	movw	r1, #558	; 0x22e
    7528:	4620      	mov	r0, r4
    752a:	f003 fd15 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    752e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7532:	e016      	b.n	7562 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    7534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7538:	e7e0      	b.n	74fc <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    753a:	2300      	movs	r3, #0
    753c:	e7de      	b.n	74fc <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    753e:	4d0e      	ldr	r5, [pc, #56]	; (7578 <nrfx_gpiote_trigger_disable+0xbc>)
    7540:	f240 2329 	movw	r3, #553	; 0x229
    7544:	462a      	mov	r2, r5
    7546:	490f      	ldr	r1, [pc, #60]	; (7584 <nrfx_gpiote_trigger_disable+0xc8>)
    7548:	480d      	ldr	r0, [pc, #52]	; (7580 <nrfx_gpiote_trigger_disable+0xc4>)
    754a:	f003 fd0c 	bl	af66 <assert_print>
    754e:	f240 2129 	movw	r1, #553	; 0x229
    7552:	4628      	mov	r0, r5
    7554:	f003 fd00 	bl	af58 <assert_post_action>
    7558:	e7d6      	b.n	7508 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    755a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    755e:	e000      	b.n	7562 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7560:	4909      	ldr	r1, [pc, #36]	; (7588 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7562:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7566:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    756a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7572:	bd38      	pop	{r3, r4, r5, pc}
    7574:	40006000 	.word	0x40006000
    7578:	0000d868 	.word	0x0000d868
    757c:	0000cc7c 	.word	0x0000cc7c
    7580:	0000c5c0 	.word	0x0000c5c0
    7584:	0000d89c 	.word	0x0000d89c
    7588:	50000300 	.word	0x50000300

0000758c <nrfx_gpiote_pin_uninit>:
{
    758c:	b538      	push	{r3, r4, r5, lr}
    758e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7590:	f7ff f8a6 	bl	66e0 <pin_in_use>
    7594:	b908      	cbnz	r0, 759a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    7596:	4824      	ldr	r0, [pc, #144]	; (7628 <nrfx_gpiote_pin_uninit+0x9c>)
}
    7598:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    759a:	4620      	mov	r0, r4
    759c:	f7ff ff8e 	bl	74bc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    75a0:	4620      	mov	r0, r4
    75a2:	f7ff f95f 	bl	6864 <pin_handler_trigger_uninit>
    switch (port)
    75a6:	0963      	lsrs	r3, r4, #5
    75a8:	d01f      	beq.n	75ea <nrfx_gpiote_pin_uninit+0x5e>
    75aa:	2b01      	cmp	r3, #1
    75ac:	d120      	bne.n	75f0 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    75ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    75b2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    75b6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    75b8:	f013 0f01 	tst.w	r3, #1
    75bc:	d01a      	beq.n	75f4 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    75be:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    75c2:	0964      	lsrs	r4, r4, #5
    75c4:	d024      	beq.n	7610 <nrfx_gpiote_pin_uninit+0x84>
    75c6:	2c01      	cmp	r4, #1
    75c8:	d025      	beq.n	7616 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    75ca:	4c18      	ldr	r4, [pc, #96]	; (762c <nrfx_gpiote_pin_uninit+0xa0>)
    75cc:	f240 232e 	movw	r3, #558	; 0x22e
    75d0:	4622      	mov	r2, r4
    75d2:	4917      	ldr	r1, [pc, #92]	; (7630 <nrfx_gpiote_pin_uninit+0xa4>)
    75d4:	4817      	ldr	r0, [pc, #92]	; (7634 <nrfx_gpiote_pin_uninit+0xa8>)
    75d6:	f003 fcc6 	bl	af66 <assert_print>
    75da:	f240 212e 	movw	r1, #558	; 0x22e
    75de:	4620      	mov	r0, r4
    75e0:	f003 fcba 	bl	af58 <assert_post_action>
        case 0: return NRF_P0;
    75e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    75e8:	e016      	b.n	7618 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    75ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75ee:	e7e0      	b.n	75b2 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    75f0:	2300      	movs	r3, #0
    75f2:	e7de      	b.n	75b2 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    75f4:	4d0d      	ldr	r5, [pc, #52]	; (762c <nrfx_gpiote_pin_uninit+0xa0>)
    75f6:	f240 2329 	movw	r3, #553	; 0x229
    75fa:	462a      	mov	r2, r5
    75fc:	490e      	ldr	r1, [pc, #56]	; (7638 <nrfx_gpiote_pin_uninit+0xac>)
    75fe:	480d      	ldr	r0, [pc, #52]	; (7634 <nrfx_gpiote_pin_uninit+0xa8>)
    7600:	f003 fcb1 	bl	af66 <assert_print>
    7604:	f240 2129 	movw	r1, #553	; 0x229
    7608:	4628      	mov	r0, r5
    760a:	f003 fca5 	bl	af58 <assert_post_action>
    760e:	e7d6      	b.n	75be <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    7610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7614:	e000      	b.n	7618 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7616:	4b09      	ldr	r3, [pc, #36]	; (763c <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    7618:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    761c:	2202      	movs	r2, #2
    761e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    7622:	4807      	ldr	r0, [pc, #28]	; (7640 <nrfx_gpiote_pin_uninit+0xb4>)
}
    7624:	e7b8      	b.n	7598 <nrfx_gpiote_pin_uninit+0xc>
    7626:	bf00      	nop
    7628:	0bad0004 	.word	0x0bad0004
    762c:	0000d868 	.word	0x0000d868
    7630:	0000cc7c 	.word	0x0000cc7c
    7634:	0000c5c0 	.word	0x0000c5c0
    7638:	0000d89c 	.word	0x0000d89c
    763c:	50000300 	.word	0x50000300
    7640:	0bad0000 	.word	0x0bad0000

00007644 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7644:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7646:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7648:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    764c:	2100      	movs	r1, #0
    uint32_t status = 0;
    764e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7650:	e003      	b.n	765a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    7652:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7654:	3304      	adds	r3, #4
    7656:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7658:	3101      	adds	r1, #1
    765a:	2907      	cmp	r1, #7
    765c:	d814      	bhi.n	7688 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    765e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7662:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    7666:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7668:	2a00      	cmp	r2, #0
    766a:	d0f2      	beq.n	7652 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    766c:	4a0c      	ldr	r2, [pc, #48]	; (76a0 <nrfx_gpiote_irq_handler+0x5c>)
    766e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7672:	4210      	tst	r0, r2
    7674:	d0ed      	beq.n	7652 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7676:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    767a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    767e:	2500      	movs	r5, #0
    7680:	6015      	str	r5, [r2, #0]
    7682:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7684:	4304      	orrs	r4, r0
    7686:	e7e4      	b.n	7652 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7688:	4b05      	ldr	r3, [pc, #20]	; (76a0 <nrfx_gpiote_irq_handler+0x5c>)
    768a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    768e:	b91b      	cbnz	r3, 7698 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    7690:	4620      	mov	r0, r4
    7692:	f7ff f939 	bl	6908 <gpiote_evt_handle>
}
    7696:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7698:	f7ff fac2 	bl	6c20 <port_event_handle>
    769c:	e7f8      	b.n	7690 <nrfx_gpiote_irq_handler+0x4c>
    769e:	bf00      	nop
    76a0:	40006000 	.word	0x40006000

000076a4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    76a4:	b508      	push	{r3, lr}
    76a6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    76a8:	4801      	ldr	r0, [pc, #4]	; (76b0 <nrfx_ppi_channel_alloc+0xc>)
    76aa:	f7fe fe1d 	bl	62e8 <nrfx_flag32_alloc>
}
    76ae:	bd08      	pop	{r3, pc}
    76b0:	20000170 	.word	0x20000170

000076b4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    76b4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    76b6:	4c11      	ldr	r4, [pc, #68]	; (76fc <_DoInit+0x48>)
    76b8:	2303      	movs	r3, #3
    76ba:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    76bc:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    76be:	4a10      	ldr	r2, [pc, #64]	; (7700 <_DoInit+0x4c>)
    76c0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    76c2:	4b10      	ldr	r3, [pc, #64]	; (7704 <_DoInit+0x50>)
    76c4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    76c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    76ca:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    76cc:	2300      	movs	r3, #0
    76ce:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    76d0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    76d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    76d4:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    76d6:	4a0c      	ldr	r2, [pc, #48]	; (7708 <_DoInit+0x54>)
    76d8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    76da:	2210      	movs	r2, #16
    76dc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    76de:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    76e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    76e2:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    76e4:	4909      	ldr	r1, [pc, #36]	; (770c <_DoInit+0x58>)
    76e6:	1de0      	adds	r0, r4, #7
    76e8:	f003 fd93 	bl	b212 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    76ec:	4908      	ldr	r1, [pc, #32]	; (7710 <_DoInit+0x5c>)
    76ee:	4620      	mov	r0, r4
    76f0:	f003 fd8f 	bl	b212 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    76f4:	2320      	movs	r3, #32
    76f6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    76f8:	bd10      	pop	{r4, pc}
    76fa:	bf00      	nop
    76fc:	20000c9c 	.word	0x20000c9c
    7700:	0000db54 	.word	0x0000db54
    7704:	20000d54 	.word	0x20000d54
    7708:	20000d44 	.word	0x20000d44
    770c:	0000db60 	.word	0x0000db60
    7710:	0000db64 	.word	0x0000db64

00007714 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7718:	4604      	mov	r4, r0
    771a:	460e      	mov	r6, r1
    771c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    771e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7722:	4a2d      	ldr	r2, [pc, #180]	; (77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7724:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7728:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    772a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    772c:	42bb      	cmp	r3, r7
    772e:	d84b      	bhi.n	77c8 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7730:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7734:	4928      	ldr	r1, [pc, #160]	; (77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7736:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    773a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    773e:	eba8 0907 	sub.w	r9, r8, r7
    7742:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7746:	4295      	cmp	r5, r2
    7748:	d904      	bls.n	7754 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    774a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    774c:	429d      	cmp	r5, r3
    774e:	d916      	bls.n	777e <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    7750:	2000      	movs	r0, #0
    7752:	e03e      	b.n	77d2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7754:	f8df 8080 	ldr.w	r8, [pc, #128]	; 77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    7758:	1c63      	adds	r3, r4, #1
    775a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    775e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    7762:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    7764:	462a      	mov	r2, r5
    7766:	4631      	mov	r1, r6
    7768:	4438      	add	r0, r7
    776a:	f003 fd94 	bl	b296 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    776e:	443d      	add	r5, r7
    7770:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7774:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    7778:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    777a:	2001      	movs	r0, #1
    777c:	e029      	b.n	77d2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    777e:	1c43      	adds	r3, r0, #1
    7780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7784:	4a14      	ldr	r2, [pc, #80]	; (77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    778a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    778c:	464a      	mov	r2, r9
    778e:	4631      	mov	r1, r6
    7790:	4438      	add	r0, r7
    7792:	f003 fd80 	bl	b296 <memcpy>
      NumBytes -= Rem;
    7796:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    779a:	197f      	adds	r7, r7, r5
    779c:	d107      	bne.n	77ae <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    779e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    77a2:	4b0d      	ldr	r3, [pc, #52]	; (77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    77a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    77a8:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    77aa:	2001      	movs	r0, #1
    77ac:	e011      	b.n	77d2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    77ae:	1c63      	adds	r3, r4, #1
    77b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    77b4:	4a08      	ldr	r2, [pc, #32]	; (77d8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    77b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    77ba:	463a      	mov	r2, r7
    77bc:	eb06 0109 	add.w	r1, r6, r9
    77c0:	6858      	ldr	r0, [r3, #4]
    77c2:	f003 fd68 	bl	b296 <memcpy>
    77c6:	e7ea      	b.n	779e <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    77c8:	1bdb      	subs	r3, r3, r7
    77ca:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    77cc:	42ab      	cmp	r3, r5
    77ce:	d2c1      	bcs.n	7754 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    77d0:	2000      	movs	r0, #0
}
    77d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    77d6:	bf00      	nop
    77d8:	20000c9c 	.word	0x20000c9c

000077dc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    77dc:	4b06      	ldr	r3, [pc, #24]	; (77f8 <SEGGER_RTT_HasDataUp+0x1c>)
    77de:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    77e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    77e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    77e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    77ec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    77f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    77f2:	1a80      	subs	r0, r0, r2
    77f4:	4770      	bx	lr
    77f6:	bf00      	nop
    77f8:	20000c9c 	.word	0x20000c9c

000077fc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    77fc:	4b03      	ldr	r3, [pc, #12]	; (780c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    77fe:	e000      	b.n	7802 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    7800:	3318      	adds	r3, #24
	while (dev < __device_end) {
    7802:	4a03      	ldr	r2, [pc, #12]	; (7810 <z_device_state_init+0x14>)
    7804:	4293      	cmp	r3, r2
    7806:	d3fb      	bcc.n	7800 <z_device_state_init+0x4>
	}
}
    7808:	4770      	bx	lr
    780a:	bf00      	nop
    780c:	0000bf3c 	.word	0x0000bf3c
    7810:	0000bfcc 	.word	0x0000bfcc

00007814 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7814:	b570      	push	{r4, r5, r6, lr}
    7816:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7818:	4b11      	ldr	r3, [pc, #68]	; (7860 <z_sys_init_run_level+0x4c>)
    781a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    781e:	e009      	b.n	7834 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7820:	4240      	negs	r0, r0
    7822:	e017      	b.n	7854 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7824:	68eb      	ldr	r3, [r5, #12]
    7826:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7828:	68ea      	ldr	r2, [r5, #12]
    782a:	7853      	ldrb	r3, [r2, #1]
    782c:	f043 0301 	orr.w	r3, r3, #1
    7830:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7832:	3408      	adds	r4, #8
    7834:	1c73      	adds	r3, r6, #1
    7836:	4a0a      	ldr	r2, [pc, #40]	; (7860 <z_sys_init_run_level+0x4c>)
    7838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783c:	42a3      	cmp	r3, r4
    783e:	d90d      	bls.n	785c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    7840:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    7842:	6823      	ldr	r3, [r4, #0]
    7844:	4628      	mov	r0, r5
    7846:	4798      	blx	r3
		if (dev != NULL) {
    7848:	2d00      	cmp	r5, #0
    784a:	d0f2      	beq.n	7832 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    784c:	2800      	cmp	r0, #0
    784e:	d0eb      	beq.n	7828 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    7850:	2800      	cmp	r0, #0
    7852:	dbe5      	blt.n	7820 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    7854:	28ff      	cmp	r0, #255	; 0xff
    7856:	dde5      	ble.n	7824 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    7858:	20ff      	movs	r0, #255	; 0xff
    785a:	e7e3      	b.n	7824 <z_sys_init_run_level+0x10>
		}
	}
}
    785c:	bd70      	pop	{r4, r5, r6, pc}
    785e:	bf00      	nop
    7860:	0000db6c 	.word	0x0000db6c

00007864 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7864:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7866:	4605      	mov	r5, r0
    7868:	b328      	cbz	r0, 78b6 <z_impl_device_get_binding+0x52>
    786a:	7803      	ldrb	r3, [r0, #0]
    786c:	b32b      	cbz	r3, 78ba <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    786e:	4c14      	ldr	r4, [pc, #80]	; (78c0 <z_impl_device_get_binding+0x5c>)
    7870:	e000      	b.n	7874 <z_impl_device_get_binding+0x10>
    7872:	3418      	adds	r4, #24
    7874:	4b13      	ldr	r3, [pc, #76]	; (78c4 <z_impl_device_get_binding+0x60>)
    7876:	429c      	cmp	r4, r3
    7878:	d008      	beq.n	788c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    787a:	4620      	mov	r0, r4
    787c:	f004 fa03 	bl	bc86 <z_device_is_ready>
    7880:	2800      	cmp	r0, #0
    7882:	d0f6      	beq.n	7872 <z_impl_device_get_binding+0xe>
    7884:	6823      	ldr	r3, [r4, #0]
    7886:	42ab      	cmp	r3, r5
    7888:	d1f3      	bne.n	7872 <z_impl_device_get_binding+0xe>
    788a:	e012      	b.n	78b2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    788c:	4c0c      	ldr	r4, [pc, #48]	; (78c0 <z_impl_device_get_binding+0x5c>)
    788e:	e000      	b.n	7892 <z_impl_device_get_binding+0x2e>
    7890:	3418      	adds	r4, #24
    7892:	4b0c      	ldr	r3, [pc, #48]	; (78c4 <z_impl_device_get_binding+0x60>)
    7894:	429c      	cmp	r4, r3
    7896:	d00b      	beq.n	78b0 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7898:	4620      	mov	r0, r4
    789a:	f004 f9f4 	bl	bc86 <z_device_is_ready>
    789e:	2800      	cmp	r0, #0
    78a0:	d0f6      	beq.n	7890 <z_impl_device_get_binding+0x2c>
    78a2:	6821      	ldr	r1, [r4, #0]
    78a4:	4628      	mov	r0, r5
    78a6:	f003 fceb 	bl	b280 <strcmp>
    78aa:	2800      	cmp	r0, #0
    78ac:	d1f0      	bne.n	7890 <z_impl_device_get_binding+0x2c>
    78ae:	e000      	b.n	78b2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    78b0:	2400      	movs	r4, #0
}
    78b2:	4620      	mov	r0, r4
    78b4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    78b6:	4604      	mov	r4, r0
    78b8:	e7fb      	b.n	78b2 <z_impl_device_get_binding+0x4e>
    78ba:	2400      	movs	r4, #0
    78bc:	e7f9      	b.n	78b2 <z_impl_device_get_binding+0x4e>
    78be:	bf00      	nop
    78c0:	0000bf3c 	.word	0x0000bf3c
    78c4:	0000bfcc 	.word	0x0000bfcc

000078c8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    78c8:	2804      	cmp	r0, #4
    78ca:	d80c      	bhi.n	78e6 <reason_to_str+0x1e>
    78cc:	e8df f000 	tbb	[pc, r0]
    78d0:	07050d03 	.word	0x07050d03
    78d4:	09          	.byte	0x09
    78d5:	00          	.byte	0x00
    78d6:	4806      	ldr	r0, [pc, #24]	; (78f0 <reason_to_str+0x28>)
    78d8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    78da:	4806      	ldr	r0, [pc, #24]	; (78f4 <reason_to_str+0x2c>)
    78dc:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    78de:	4806      	ldr	r0, [pc, #24]	; (78f8 <reason_to_str+0x30>)
    78e0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    78e2:	4806      	ldr	r0, [pc, #24]	; (78fc <reason_to_str+0x34>)
    78e4:	4770      	bx	lr
	default:
		return "Unknown error";
    78e6:	4806      	ldr	r0, [pc, #24]	; (7900 <reason_to_str+0x38>)
    78e8:	4770      	bx	lr
		return "Unhandled interrupt";
    78ea:	4806      	ldr	r0, [pc, #24]	; (7904 <reason_to_str+0x3c>)
	}
}
    78ec:	4770      	bx	lr
    78ee:	bf00      	nop
    78f0:	0000dbd4 	.word	0x0000dbd4
    78f4:	0000dba8 	.word	0x0000dba8
    78f8:	0000dbb8 	.word	0x0000dbb8
    78fc:	0000dbc4 	.word	0x0000dbc4
    7900:	0000db84 	.word	0x0000db84
    7904:	0000db94 	.word	0x0000db94

00007908 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7908:	b130      	cbz	r0, 7918 <thread_name_get+0x10>
{
    790a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    790c:	f004 fa1d 	bl	bd4a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7910:	b120      	cbz	r0, 791c <thread_name_get+0x14>
    7912:	7803      	ldrb	r3, [r0, #0]
    7914:	b123      	cbz	r3, 7920 <thread_name_get+0x18>
}
    7916:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    7918:	4802      	ldr	r0, [pc, #8]	; (7924 <thread_name_get+0x1c>)
}
    791a:	4770      	bx	lr
		thread_name = "unknown";
    791c:	4801      	ldr	r0, [pc, #4]	; (7924 <thread_name_get+0x1c>)
    791e:	e7fa      	b.n	7916 <thread_name_get+0xe>
    7920:	4800      	ldr	r0, [pc, #0]	; (7924 <thread_name_get+0x1c>)
	return thread_name;
    7922:	e7f8      	b.n	7916 <thread_name_get+0xe>
    7924:	0000dbe4 	.word	0x0000dbe4

00007928 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7928:	b5f0      	push	{r4, r5, r6, r7, lr}
    792a:	b087      	sub	sp, #28
    792c:	4604      	mov	r4, r0
    792e:	460e      	mov	r6, r1
	__asm__ volatile(
    7930:	f04f 0320 	mov.w	r3, #32
    7934:	f3ef 8711 	mrs	r7, BASEPRI
    7938:	f383 8812 	msr	BASEPRI_MAX, r3
    793c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7940:	f002 f9d2 	bl	9ce8 <z_impl_z_current_get>
    7944:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7946:	4620      	mov	r0, r4
    7948:	f7ff ffbe 	bl	78c8 <reason_to_str>
    794c:	2300      	movs	r3, #0
    794e:	9305      	str	r3, [sp, #20]
    7950:	9004      	str	r0, [sp, #16]
    7952:	9403      	str	r4, [sp, #12]
    7954:	4a22      	ldr	r2, [pc, #136]	; (79e0 <z_fatal_error+0xb8>)
    7956:	9202      	str	r2, [sp, #8]
    7958:	9301      	str	r3, [sp, #4]
    795a:	9300      	str	r3, [sp, #0]
    795c:	2201      	movs	r2, #1
    795e:	4921      	ldr	r1, [pc, #132]	; (79e4 <z_fatal_error+0xbc>)
    7960:	4618      	mov	r0, r3
    7962:	f004 f99d 	bl	bca0 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7966:	b11e      	cbz	r6, 7970 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7968:	69f3      	ldr	r3, [r6, #28]
    796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    796e:	b9eb      	cbnz	r3, 79ac <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7970:	4628      	mov	r0, r5
    7972:	f7ff ffc9 	bl	7908 <thread_name_get>
    7976:	9004      	str	r0, [sp, #16]
    7978:	9503      	str	r5, [sp, #12]
    797a:	4b1b      	ldr	r3, [pc, #108]	; (79e8 <z_fatal_error+0xc0>)
    797c:	9302      	str	r3, [sp, #8]
    797e:	2000      	movs	r0, #0
    7980:	9001      	str	r0, [sp, #4]
    7982:	9000      	str	r0, [sp, #0]
    7984:	4603      	mov	r3, r0
    7986:	2201      	movs	r2, #1
    7988:	4916      	ldr	r1, [pc, #88]	; (79e4 <z_fatal_error+0xbc>)
    798a:	f004 f989 	bl	bca0 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    798e:	4631      	mov	r1, r6
    7990:	4620      	mov	r0, r4
    7992:	f7fe fba3 	bl	60dc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    7996:	2c04      	cmp	r4, #4
    7998:	d013      	beq.n	79c2 <z_fatal_error+0x9a>
	__asm__ volatile(
    799a:	f387 8811 	msr	BASEPRI, r7
    799e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    79a2:	4628      	mov	r0, r5
    79a4:	f7fc f9f4 	bl	3d90 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    79a8:	b007      	add	sp, #28
    79aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    79ac:	4b0f      	ldr	r3, [pc, #60]	; (79ec <z_fatal_error+0xc4>)
    79ae:	9302      	str	r3, [sp, #8]
    79b0:	2000      	movs	r0, #0
    79b2:	9001      	str	r0, [sp, #4]
    79b4:	9000      	str	r0, [sp, #0]
    79b6:	4603      	mov	r3, r0
    79b8:	2201      	movs	r2, #1
    79ba:	490a      	ldr	r1, [pc, #40]	; (79e4 <z_fatal_error+0xbc>)
    79bc:	f004 f970 	bl	bca0 <z_log_msg2_runtime_create>
    79c0:	e7d6      	b.n	7970 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    79c2:	4c0b      	ldr	r4, [pc, #44]	; (79f0 <z_fatal_error+0xc8>)
    79c4:	238f      	movs	r3, #143	; 0x8f
    79c6:	4622      	mov	r2, r4
    79c8:	490a      	ldr	r1, [pc, #40]	; (79f4 <z_fatal_error+0xcc>)
    79ca:	480b      	ldr	r0, [pc, #44]	; (79f8 <z_fatal_error+0xd0>)
    79cc:	f003 facb 	bl	af66 <assert_print>
    79d0:	480a      	ldr	r0, [pc, #40]	; (79fc <z_fatal_error+0xd4>)
    79d2:	f003 fac8 	bl	af66 <assert_print>
    79d6:	218f      	movs	r1, #143	; 0x8f
    79d8:	4620      	mov	r0, r4
    79da:	f003 fabd 	bl	af58 <assert_post_action>
    79de:	e7dc      	b.n	799a <z_fatal_error+0x72>
    79e0:	0000dbec 	.word	0x0000dbec
    79e4:	0000c17c 	.word	0x0000c17c
    79e8:	0000dc38 	.word	0x0000dc38
    79ec:	0000dc14 	.word	0x0000dc14
    79f0:	0000dc50 	.word	0x0000dc50
    79f4:	0000dc74 	.word	0x0000dc74
    79f8:	0000c5c0 	.word	0x0000c5c0
    79fc:	0000dc94 	.word	0x0000dc94

00007a00 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7a00:	b510      	push	{r4, lr}
    7a02:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    7a04:	4c11      	ldr	r4, [pc, #68]	; (7a4c <init_idle_thread+0x4c>)
    7a06:	23b0      	movs	r3, #176	; 0xb0
    7a08:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7a0c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7a10:	4b0f      	ldr	r3, [pc, #60]	; (7a50 <init_idle_thread+0x50>)
    7a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    7a16:	4a0f      	ldr	r2, [pc, #60]	; (7a54 <init_idle_thread+0x54>)
    7a18:	9205      	str	r2, [sp, #20]
    7a1a:	2201      	movs	r2, #1
    7a1c:	9204      	str	r2, [sp, #16]
    7a1e:	220f      	movs	r2, #15
    7a20:	9203      	str	r2, [sp, #12]
    7a22:	2200      	movs	r2, #0
    7a24:	9202      	str	r2, [sp, #8]
    7a26:	9201      	str	r2, [sp, #4]
    7a28:	9300      	str	r3, [sp, #0]
    7a2a:	4b0b      	ldr	r3, [pc, #44]	; (7a58 <init_idle_thread+0x58>)
    7a2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7a30:	490a      	ldr	r1, [pc, #40]	; (7a5c <init_idle_thread+0x5c>)
    7a32:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    7a36:	fb0c 1100 	mla	r1, ip, r0, r1
    7a3a:	4620      	mov	r0, r4
    7a3c:	f000 fa76 	bl	7f2c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7a40:	7b63      	ldrb	r3, [r4, #13]
    7a42:	f023 0304 	bic.w	r3, r3, #4
    7a46:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7a48:	b006      	add	sp, #24
    7a4a:	bd10      	pop	{r4, pc}
    7a4c:	20000490 	.word	0x20000490
    7a50:	20001154 	.word	0x20001154
    7a54:	0000dccc 	.word	0x0000dccc
    7a58:	00008241 	.word	0x00008241
    7a5c:	20002420 	.word	0x20002420

00007a60 <bg_thread_main>:
{
    7a60:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7a62:	4b0a      	ldr	r3, [pc, #40]	; (7a8c <bg_thread_main+0x2c>)
    7a64:	2201      	movs	r2, #1
    7a66:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7a68:	2002      	movs	r0, #2
    7a6a:	f7ff fed3 	bl	7814 <z_sys_init_run_level>
	boot_banner();
    7a6e:	f002 fe83 	bl	a778 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7a72:	2003      	movs	r0, #3
    7a74:	f7ff fece 	bl	7814 <z_sys_init_run_level>
	z_init_static_threads();
    7a78:	f000 fb68 	bl	814c <z_init_static_threads>
	main();
    7a7c:	f7f8 ffbe 	bl	9fc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7a80:	4a03      	ldr	r2, [pc, #12]	; (7a90 <bg_thread_main+0x30>)
    7a82:	7b13      	ldrb	r3, [r2, #12]
    7a84:	f023 0301 	bic.w	r3, r3, #1
    7a88:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7a8a:	bd08      	pop	{r3, pc}
    7a8c:	20001386 	.word	0x20001386
    7a90:	20000540 	.word	0x20000540

00007a94 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    7a94:	b508      	push	{r3, lr}
    7a96:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7a98:	4a01      	ldr	r2, [pc, #4]	; (7aa0 <switch_to_main_thread+0xc>)
    7a9a:	4802      	ldr	r0, [pc, #8]	; (7aa4 <switch_to_main_thread+0x10>)
    7a9c:	f7fb fd34 	bl	3508 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7aa0:	00007a61 	.word	0x00007a61
    7aa4:	20000540 	.word	0x20000540

00007aa8 <z_bss_zero>:
{
    7aa8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7aaa:	4803      	ldr	r0, [pc, #12]	; (7ab8 <z_bss_zero+0x10>)
    7aac:	4a03      	ldr	r2, [pc, #12]	; (7abc <z_bss_zero+0x14>)
    7aae:	1a12      	subs	r2, r2, r0
    7ab0:	2100      	movs	r1, #0
    7ab2:	f004 f904 	bl	bcbe <z_early_memset>
}
    7ab6:	bd08      	pop	{r3, pc}
    7ab8:	20000260 	.word	0x20000260
    7abc:	20001388 	.word	0x20001388

00007ac0 <z_init_cpu>:
{
    7ac0:	b510      	push	{r4, lr}
    7ac2:	4604      	mov	r4, r0
	init_idle_thread(id);
    7ac4:	f7ff ff9c 	bl	7a00 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7ac8:	490b      	ldr	r1, [pc, #44]	; (7af8 <z_init_cpu+0x38>)
    7aca:	23b0      	movs	r3, #176	; 0xb0
    7acc:	fb03 1104 	mla	r1, r3, r4, r1
    7ad0:	4a0a      	ldr	r2, [pc, #40]	; (7afc <z_init_cpu+0x3c>)
    7ad2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    7ad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7ada:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    7adc:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7ade:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    7ae2:	4b07      	ldr	r3, [pc, #28]	; (7b00 <z_init_cpu+0x40>)
    7ae4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7ae8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    7aec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7af0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    7af4:	6063      	str	r3, [r4, #4]
}
    7af6:	bd10      	pop	{r4, pc}
    7af8:	20000490 	.word	0x20000490
    7afc:	20001154 	.word	0x20001154
    7b00:	20002580 	.word	0x20002580

00007b04 <prepare_multithreading>:
{
    7b04:	b570      	push	{r4, r5, r6, lr}
    7b06:	b086      	sub	sp, #24
	z_sched_init();
    7b08:	f001 ff2a 	bl	9960 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    7b0c:	4d10      	ldr	r5, [pc, #64]	; (7b50 <prepare_multithreading+0x4c>)
    7b0e:	4b11      	ldr	r3, [pc, #68]	; (7b54 <prepare_multithreading+0x50>)
    7b10:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b12:	4b11      	ldr	r3, [pc, #68]	; (7b58 <prepare_multithreading+0x54>)
    7b14:	9305      	str	r3, [sp, #20]
    7b16:	2301      	movs	r3, #1
    7b18:	9304      	str	r3, [sp, #16]
    7b1a:	2400      	movs	r4, #0
    7b1c:	9403      	str	r4, [sp, #12]
    7b1e:	9402      	str	r4, [sp, #8]
    7b20:	9401      	str	r4, [sp, #4]
    7b22:	9400      	str	r4, [sp, #0]
    7b24:	4b0d      	ldr	r3, [pc, #52]	; (7b5c <prepare_multithreading+0x58>)
    7b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7b2a:	490d      	ldr	r1, [pc, #52]	; (7b60 <prepare_multithreading+0x5c>)
    7b2c:	4628      	mov	r0, r5
    7b2e:	f000 f9fd 	bl	7f2c <z_setup_new_thread>
    7b32:	4606      	mov	r6, r0
    7b34:	7b6b      	ldrb	r3, [r5, #13]
    7b36:	f023 0304 	bic.w	r3, r3, #4
    7b3a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    7b3c:	4628      	mov	r0, r5
    7b3e:	f001 fa33 	bl	8fa8 <z_ready_thread>
	z_init_cpu(0);
    7b42:	4620      	mov	r0, r4
    7b44:	f7ff ffbc 	bl	7ac0 <z_init_cpu>
}
    7b48:	4630      	mov	r0, r6
    7b4a:	b006      	add	sp, #24
    7b4c:	bd70      	pop	{r4, r5, r6, pc}
    7b4e:	bf00      	nop
    7b50:	20000540 	.word	0x20000540
    7b54:	20001154 	.word	0x20001154
    7b58:	0000dcd4 	.word	0x0000dcd4
    7b5c:	00007a61 	.word	0x00007a61
    7b60:	20002000 	.word	0x20002000

00007b64 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7b64:	b500      	push	{lr}
    7b66:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7b68:	4b1f      	ldr	r3, [pc, #124]	; (7be8 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7b6a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7b6e:	4c1f      	ldr	r4, [pc, #124]	; (7bec <z_cstart+0x88>)
    7b70:	6963      	ldr	r3, [r4, #20]
    7b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7b76:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b78:	23e0      	movs	r3, #224	; 0xe0
    7b7a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    7b7e:	2500      	movs	r5, #0
    7b80:	77e5      	strb	r5, [r4, #31]
    7b82:	7625      	strb	r5, [r4, #24]
    7b84:	7665      	strb	r5, [r4, #25]
    7b86:	76a5      	strb	r5, [r4, #26]
    7b88:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7b8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7b92:	6263      	str	r3, [r4, #36]	; 0x24
    7b94:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7b98:	f7fc f866 	bl	3c68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7b9c:	f7fb fb38 	bl	3210 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ba4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7ba8:	f7fc fa12 	bl	3fd0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7bac:	f7fc f90a 	bl	3dc4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7bb0:	f7fa fc5a 	bl	2468 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    7bb4:	2401      	movs	r4, #1
    7bb6:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    7bba:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    7bbe:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    7bc0:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    7bc2:	4668      	mov	r0, sp
    7bc4:	f002 fdd2 	bl	a76c <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7bc8:	4b09      	ldr	r3, [pc, #36]	; (7bf0 <z_cstart+0x8c>)
    7bca:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7bce:	f7ff fe15 	bl	77fc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7bd2:	4628      	mov	r0, r5
    7bd4:	f7ff fe1e 	bl	7814 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7bd8:	4620      	mov	r0, r4
    7bda:	f7ff fe1b 	bl	7814 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7bde:	f7ff ff91 	bl	7b04 <prepare_multithreading>
    7be2:	f7ff ff57 	bl	7a94 <switch_to_main_thread>
    7be6:	bf00      	nop
    7be8:	20002da0 	.word	0x20002da0
    7bec:	e000ed00 	.word	0xe000ed00
    7bf0:	20001154 	.word	0x20001154

00007bf4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    7bf4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7bf6:	4c10      	ldr	r4, [pc, #64]	; (7c38 <init_mem_slab_module+0x44>)
	int rc = 0;
    7bf8:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7bfa:	e008      	b.n	7c0e <init_mem_slab_module+0x1a>
    7bfc:	4b0f      	ldr	r3, [pc, #60]	; (7c3c <init_mem_slab_module+0x48>)
    7bfe:	429c      	cmp	r4, r3
    7c00:	d217      	bcs.n	7c32 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    7c02:	4620      	mov	r0, r4
    7c04:	f004 f863 	bl	bcce <create_free_list>
		if (rc < 0) {
    7c08:	1e05      	subs	r5, r0, #0
    7c0a:	db12      	blt.n	7c32 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7c0c:	3420      	adds	r4, #32
    7c0e:	4b0b      	ldr	r3, [pc, #44]	; (7c3c <init_mem_slab_module+0x48>)
    7c10:	429c      	cmp	r4, r3
    7c12:	d9f3      	bls.n	7bfc <init_mem_slab_module+0x8>
    7c14:	4e0a      	ldr	r6, [pc, #40]	; (7c40 <init_mem_slab_module+0x4c>)
    7c16:	233d      	movs	r3, #61	; 0x3d
    7c18:	4632      	mov	r2, r6
    7c1a:	490a      	ldr	r1, [pc, #40]	; (7c44 <init_mem_slab_module+0x50>)
    7c1c:	480a      	ldr	r0, [pc, #40]	; (7c48 <init_mem_slab_module+0x54>)
    7c1e:	f003 f9a2 	bl	af66 <assert_print>
    7c22:	480a      	ldr	r0, [pc, #40]	; (7c4c <init_mem_slab_module+0x58>)
    7c24:	f003 f99f 	bl	af66 <assert_print>
    7c28:	213d      	movs	r1, #61	; 0x3d
    7c2a:	4630      	mov	r0, r6
    7c2c:	f003 f994 	bl	af58 <assert_post_action>
    7c30:	e7e4      	b.n	7bfc <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    7c32:	4628      	mov	r0, r5
    7c34:	bd70      	pop	{r4, r5, r6, pc}
    7c36:	bf00      	nop
    7c38:	200001f8 	.word	0x200001f8
    7c3c:	200001f8 	.word	0x200001f8
    7c40:	0000dce0 	.word	0x0000dce0
    7c44:	0000dd08 	.word	0x0000dd08
    7c48:	0000c5c0 	.word	0x0000c5c0
    7c4c:	0000dd28 	.word	0x0000dd28

00007c50 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c54:	b082      	sub	sp, #8
    7c56:	4604      	mov	r4, r0
    7c58:	460e      	mov	r6, r1
    7c5a:	4690      	mov	r8, r2
    7c5c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7c5e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7c62:	f04f 0320 	mov.w	r3, #32
    7c66:	f3ef 8711 	mrs	r7, BASEPRI
    7c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    7c6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c72:	4628      	mov	r0, r5
    7c74:	f000 f8d8 	bl	7e28 <z_spin_lock_valid>
    7c78:	b1c0      	cbz	r0, 7cac <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    7c7a:	4628      	mov	r0, r5
    7c7c:	f000 f8f4 	bl	7e68 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7c80:	69a1      	ldr	r1, [r4, #24]
    7c82:	b321      	cbz	r1, 7cce <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    7c84:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    7c86:	69a3      	ldr	r3, [r4, #24]
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7c8c:	69e3      	ldr	r3, [r4, #28]
    7c8e:	3301      	adds	r3, #1
    7c90:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7c92:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c94:	4628      	mov	r0, r5
    7c96:	f000 f8d7 	bl	7e48 <z_spin_unlock_valid>
    7c9a:	b388      	cbz	r0, 7d00 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    7c9c:	f387 8811 	msr	BASEPRI, r7
    7ca0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    7ca4:	4620      	mov	r0, r4
    7ca6:	b002      	add	sp, #8
    7ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7cac:	f8df a070 	ldr.w	sl, [pc, #112]	; 7d20 <k_mem_slab_alloc+0xd0>
    7cb0:	238e      	movs	r3, #142	; 0x8e
    7cb2:	4652      	mov	r2, sl
    7cb4:	491b      	ldr	r1, [pc, #108]	; (7d24 <k_mem_slab_alloc+0xd4>)
    7cb6:	481c      	ldr	r0, [pc, #112]	; (7d28 <k_mem_slab_alloc+0xd8>)
    7cb8:	f003 f955 	bl	af66 <assert_print>
    7cbc:	4629      	mov	r1, r5
    7cbe:	481b      	ldr	r0, [pc, #108]	; (7d2c <k_mem_slab_alloc+0xdc>)
    7cc0:	f003 f951 	bl	af66 <assert_print>
    7cc4:	218e      	movs	r1, #142	; 0x8e
    7cc6:	4650      	mov	r0, sl
    7cc8:	f003 f946 	bl	af58 <assert_post_action>
    7ccc:	e7d5      	b.n	7c7a <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7cce:	ea59 0308 	orrs.w	r3, r9, r8
    7cd2:	d104      	bne.n	7cde <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    7cd4:	2300      	movs	r3, #0
    7cd6:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    7cd8:	f06f 040b 	mvn.w	r4, #11
    7cdc:	e7da      	b.n	7c94 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7cde:	f8cd 8000 	str.w	r8, [sp]
    7ce2:	f8cd 9004 	str.w	r9, [sp, #4]
    7ce6:	4622      	mov	r2, r4
    7ce8:	4639      	mov	r1, r7
    7cea:	4628      	mov	r0, r5
    7cec:	f001 fb38 	bl	9360 <z_pend_curr>
		if (result == 0) {
    7cf0:	4604      	mov	r4, r0
    7cf2:	2800      	cmp	r0, #0
    7cf4:	d1d6      	bne.n	7ca4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7cf6:	4b0e      	ldr	r3, [pc, #56]	; (7d30 <k_mem_slab_alloc+0xe0>)
    7cf8:	689b      	ldr	r3, [r3, #8]
    7cfa:	695b      	ldr	r3, [r3, #20]
    7cfc:	6033      	str	r3, [r6, #0]
		return result;
    7cfe:	e7d1      	b.n	7ca4 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d00:	4e07      	ldr	r6, [pc, #28]	; (7d20 <k_mem_slab_alloc+0xd0>)
    7d02:	23b9      	movs	r3, #185	; 0xb9
    7d04:	4632      	mov	r2, r6
    7d06:	490b      	ldr	r1, [pc, #44]	; (7d34 <k_mem_slab_alloc+0xe4>)
    7d08:	4807      	ldr	r0, [pc, #28]	; (7d28 <k_mem_slab_alloc+0xd8>)
    7d0a:	f003 f92c 	bl	af66 <assert_print>
    7d0e:	4629      	mov	r1, r5
    7d10:	4809      	ldr	r0, [pc, #36]	; (7d38 <k_mem_slab_alloc+0xe8>)
    7d12:	f003 f928 	bl	af66 <assert_print>
    7d16:	21b9      	movs	r1, #185	; 0xb9
    7d18:	4630      	mov	r0, r6
    7d1a:	f003 f91d 	bl	af58 <assert_post_action>
    7d1e:	e7bd      	b.n	7c9c <k_mem_slab_alloc+0x4c>
    7d20:	0000c76c 	.word	0x0000c76c
    7d24:	0000c7cc 	.word	0x0000c7cc
    7d28:	0000c5c0 	.word	0x0000c5c0
    7d2c:	0000c7e4 	.word	0x0000c7e4
    7d30:	20001154 	.word	0x20001154
    7d34:	0000c79c 	.word	0x0000c79c
    7d38:	0000c7b4 	.word	0x0000c7b4

00007d3c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d40:	4604      	mov	r4, r0
    7d42:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7d44:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    7d48:	f04f 0320 	mov.w	r3, #32
    7d4c:	f3ef 8711 	mrs	r7, BASEPRI
    7d50:	f383 8812 	msr	BASEPRI_MAX, r3
    7d54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d58:	4630      	mov	r0, r6
    7d5a:	f000 f865 	bl	7e28 <z_spin_lock_valid>
    7d5e:	b1b0      	cbz	r0, 7d8e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    7d60:	4630      	mov	r0, r6
    7d62:	f000 f881 	bl	7e68 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7d66:	69a3      	ldr	r3, [r4, #24]
    7d68:	b313      	cbz	r3, 7db0 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    7d6a:	682b      	ldr	r3, [r5, #0]
    7d6c:	69a2      	ldr	r2, [r4, #24]
    7d6e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7d70:	682b      	ldr	r3, [r5, #0]
    7d72:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7d74:	69e3      	ldr	r3, [r4, #28]
    7d76:	3b01      	subs	r3, #1
    7d78:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d7a:	4630      	mov	r0, r6
    7d7c:	f000 f864 	bl	7e48 <z_spin_unlock_valid>
    7d80:	b338      	cbz	r0, 7dd2 <k_mem_slab_free+0x96>
	__asm__ volatile(
    7d82:	f387 8811 	msr	BASEPRI, r7
    7d86:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d8e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7df4 <k_mem_slab_free+0xb8>
    7d92:	238e      	movs	r3, #142	; 0x8e
    7d94:	4642      	mov	r2, r8
    7d96:	4918      	ldr	r1, [pc, #96]	; (7df8 <k_mem_slab_free+0xbc>)
    7d98:	4818      	ldr	r0, [pc, #96]	; (7dfc <k_mem_slab_free+0xc0>)
    7d9a:	f003 f8e4 	bl	af66 <assert_print>
    7d9e:	4631      	mov	r1, r6
    7da0:	4817      	ldr	r0, [pc, #92]	; (7e00 <k_mem_slab_free+0xc4>)
    7da2:	f003 f8e0 	bl	af66 <assert_print>
    7da6:	218e      	movs	r1, #142	; 0x8e
    7da8:	4640      	mov	r0, r8
    7daa:	f003 f8d5 	bl	af58 <assert_post_action>
    7dae:	e7d7      	b.n	7d60 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7db0:	4620      	mov	r0, r4
    7db2:	f001 fd71 	bl	9898 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7db6:	2800      	cmp	r0, #0
    7db8:	d0d7      	beq.n	7d6a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7dba:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7dbc:	2100      	movs	r1, #0
    7dbe:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7dc2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    7dc4:	f001 f8f0 	bl	8fa8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7dc8:	4639      	mov	r1, r7
    7dca:	4630      	mov	r0, r6
    7dcc:	f000 fe48 	bl	8a60 <z_reschedule>
			return;
    7dd0:	e7db      	b.n	7d8a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7dd2:	4c08      	ldr	r4, [pc, #32]	; (7df4 <k_mem_slab_free+0xb8>)
    7dd4:	23b9      	movs	r3, #185	; 0xb9
    7dd6:	4622      	mov	r2, r4
    7dd8:	490a      	ldr	r1, [pc, #40]	; (7e04 <k_mem_slab_free+0xc8>)
    7dda:	4808      	ldr	r0, [pc, #32]	; (7dfc <k_mem_slab_free+0xc0>)
    7ddc:	f003 f8c3 	bl	af66 <assert_print>
    7de0:	4631      	mov	r1, r6
    7de2:	4809      	ldr	r0, [pc, #36]	; (7e08 <k_mem_slab_free+0xcc>)
    7de4:	f003 f8bf 	bl	af66 <assert_print>
    7de8:	21b9      	movs	r1, #185	; 0xb9
    7dea:	4620      	mov	r0, r4
    7dec:	f003 f8b4 	bl	af58 <assert_post_action>
    7df0:	e7c7      	b.n	7d82 <k_mem_slab_free+0x46>
    7df2:	bf00      	nop
    7df4:	0000c76c 	.word	0x0000c76c
    7df8:	0000c7cc 	.word	0x0000c7cc
    7dfc:	0000c5c0 	.word	0x0000c5c0
    7e00:	0000c7e4 	.word	0x0000c7e4
    7e04:	0000c79c 	.word	0x0000c79c
    7e08:	0000c7b4 	.word	0x0000c7b4

00007e0c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    7e0c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7e0e:	ea53 0102 	orrs.w	r1, r3, r2
    7e12:	d102      	bne.n	7e1a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    7e14:	f003 ff9b 	bl	bd4e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    7e18:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7e1a:	4902      	ldr	r1, [pc, #8]	; (7e24 <schedule_new_thread+0x18>)
    7e1c:	3018      	adds	r0, #24
    7e1e:	f002 f86d 	bl	9efc <z_add_timeout>
    7e22:	e7f9      	b.n	7e18 <schedule_new_thread+0xc>
    7e24:	00009105 	.word	0x00009105

00007e28 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7e28:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    7e2a:	b13b      	cbz	r3, 7e3c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7e2c:	f003 0303 	and.w	r3, r3, #3
    7e30:	4a04      	ldr	r2, [pc, #16]	; (7e44 <z_spin_lock_valid+0x1c>)
    7e32:	7d12      	ldrb	r2, [r2, #20]
    7e34:	4293      	cmp	r3, r2
    7e36:	d003      	beq.n	7e40 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    7e38:	2001      	movs	r0, #1
    7e3a:	4770      	bx	lr
    7e3c:	2001      	movs	r0, #1
    7e3e:	4770      	bx	lr
			return false;
    7e40:	2000      	movs	r0, #0
}
    7e42:	4770      	bx	lr
    7e44:	20001154 	.word	0x20001154

00007e48 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7e48:	6801      	ldr	r1, [r0, #0]
    7e4a:	4a06      	ldr	r2, [pc, #24]	; (7e64 <z_spin_unlock_valid+0x1c>)
    7e4c:	7d13      	ldrb	r3, [r2, #20]
    7e4e:	6892      	ldr	r2, [r2, #8]
    7e50:	4313      	orrs	r3, r2
    7e52:	4299      	cmp	r1, r3
    7e54:	d103      	bne.n	7e5e <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    7e56:	2300      	movs	r3, #0
    7e58:	6003      	str	r3, [r0, #0]
	return true;
    7e5a:	2001      	movs	r0, #1
    7e5c:	4770      	bx	lr
		return false;
    7e5e:	2000      	movs	r0, #0
}
    7e60:	4770      	bx	lr
    7e62:	bf00      	nop
    7e64:	20001154 	.word	0x20001154

00007e68 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7e68:	4a02      	ldr	r2, [pc, #8]	; (7e74 <z_spin_lock_set_owner+0xc>)
    7e6a:	7d13      	ldrb	r3, [r2, #20]
    7e6c:	6892      	ldr	r2, [r2, #8]
    7e6e:	4313      	orrs	r3, r2
    7e70:	6003      	str	r3, [r0, #0]
}
    7e72:	4770      	bx	lr
    7e74:	20001154 	.word	0x20001154

00007e78 <z_thread_monitor_exit>:
{
    7e78:	b570      	push	{r4, r5, r6, lr}
    7e7a:	4604      	mov	r4, r0
	__asm__ volatile(
    7e7c:	f04f 0320 	mov.w	r3, #32
    7e80:	f3ef 8511 	mrs	r5, BASEPRI
    7e84:	f383 8812 	msr	BASEPRI_MAX, r3
    7e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e8c:	481f      	ldr	r0, [pc, #124]	; (7f0c <z_thread_monitor_exit+0x94>)
    7e8e:	f7ff ffcb 	bl	7e28 <z_spin_lock_valid>
    7e92:	b150      	cbz	r0, 7eaa <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    7e94:	481d      	ldr	r0, [pc, #116]	; (7f0c <z_thread_monitor_exit+0x94>)
    7e96:	f7ff ffe7 	bl	7e68 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    7e9a:	4b1d      	ldr	r3, [pc, #116]	; (7f10 <z_thread_monitor_exit+0x98>)
    7e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e9e:	42a3      	cmp	r3, r4
    7ea0:	d114      	bne.n	7ecc <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    7ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7ea4:	4b1a      	ldr	r3, [pc, #104]	; (7f10 <z_thread_monitor_exit+0x98>)
    7ea6:	629a      	str	r2, [r3, #40]	; 0x28
    7ea8:	e017      	b.n	7eda <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7eaa:	4e1a      	ldr	r6, [pc, #104]	; (7f14 <z_thread_monitor_exit+0x9c>)
    7eac:	238e      	movs	r3, #142	; 0x8e
    7eae:	4632      	mov	r2, r6
    7eb0:	4919      	ldr	r1, [pc, #100]	; (7f18 <z_thread_monitor_exit+0xa0>)
    7eb2:	481a      	ldr	r0, [pc, #104]	; (7f1c <z_thread_monitor_exit+0xa4>)
    7eb4:	f003 f857 	bl	af66 <assert_print>
    7eb8:	4914      	ldr	r1, [pc, #80]	; (7f0c <z_thread_monitor_exit+0x94>)
    7eba:	4819      	ldr	r0, [pc, #100]	; (7f20 <z_thread_monitor_exit+0xa8>)
    7ebc:	f003 f853 	bl	af66 <assert_print>
    7ec0:	218e      	movs	r1, #142	; 0x8e
    7ec2:	4630      	mov	r0, r6
    7ec4:	f003 f848 	bl	af58 <assert_post_action>
    7ec8:	e7e4      	b.n	7e94 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    7eca:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7ecc:	b113      	cbz	r3, 7ed4 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    7ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    7ed0:	42a2      	cmp	r2, r4
    7ed2:	d1fa      	bne.n	7eca <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    7ed4:	b10b      	cbz	r3, 7eda <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    7ed6:	6f22      	ldr	r2, [r4, #112]	; 0x70
    7ed8:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7eda:	480c      	ldr	r0, [pc, #48]	; (7f0c <z_thread_monitor_exit+0x94>)
    7edc:	f7ff ffb4 	bl	7e48 <z_spin_unlock_valid>
    7ee0:	b120      	cbz	r0, 7eec <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    7ee2:	f385 8811 	msr	BASEPRI, r5
    7ee6:	f3bf 8f6f 	isb	sy
}
    7eea:	bd70      	pop	{r4, r5, r6, pc}
    7eec:	4c09      	ldr	r4, [pc, #36]	; (7f14 <z_thread_monitor_exit+0x9c>)
    7eee:	23b9      	movs	r3, #185	; 0xb9
    7ef0:	4622      	mov	r2, r4
    7ef2:	490c      	ldr	r1, [pc, #48]	; (7f24 <z_thread_monitor_exit+0xac>)
    7ef4:	4809      	ldr	r0, [pc, #36]	; (7f1c <z_thread_monitor_exit+0xa4>)
    7ef6:	f003 f836 	bl	af66 <assert_print>
    7efa:	4904      	ldr	r1, [pc, #16]	; (7f0c <z_thread_monitor_exit+0x94>)
    7efc:	480a      	ldr	r0, [pc, #40]	; (7f28 <z_thread_monitor_exit+0xb0>)
    7efe:	f003 f832 	bl	af66 <assert_print>
    7f02:	21b9      	movs	r1, #185	; 0xb9
    7f04:	4620      	mov	r0, r4
    7f06:	f003 f827 	bl	af58 <assert_post_action>
    7f0a:	e7ea      	b.n	7ee2 <z_thread_monitor_exit+0x6a>
    7f0c:	20001180 	.word	0x20001180
    7f10:	20001154 	.word	0x20001154
    7f14:	0000c76c 	.word	0x0000c76c
    7f18:	0000c7cc 	.word	0x0000c7cc
    7f1c:	0000c5c0 	.word	0x0000c5c0
    7f20:	0000c7e4 	.word	0x0000c7e4
    7f24:	0000c79c 	.word	0x0000c79c
    7f28:	0000c7b4 	.word	0x0000c7b4

00007f2c <z_setup_new_thread>:
{
    7f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f30:	b085      	sub	sp, #20
    7f32:	4604      	mov	r4, r0
    7f34:	460e      	mov	r6, r1
    7f36:	4690      	mov	r8, r2
    7f38:	461d      	mov	r5, r3
    7f3a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    7f3e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    7f42:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    7f44:	2f0f      	cmp	r7, #15
    7f46:	d05e      	beq.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    7f48:	f107 0310 	add.w	r3, r7, #16
    7f4c:	2b1e      	cmp	r3, #30
    7f4e:	d85e      	bhi.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7f50:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7f54:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7f56:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7f5a:	2204      	movs	r2, #4
    7f5c:	4639      	mov	r1, r7
    7f5e:	4620      	mov	r0, r4
    7f60:	f003 fef9 	bl	bd56 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7f64:	4642      	mov	r2, r8
    7f66:	4631      	mov	r1, r6
    7f68:	4620      	mov	r0, r4
    7f6a:	f003 fed6 	bl	bd1a <setup_thread_stack>
    7f6e:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7f72:	9302      	str	r3, [sp, #8]
    7f74:	f8cd a004 	str.w	sl, [sp, #4]
    7f78:	f8cd b000 	str.w	fp, [sp]
    7f7c:	462b      	mov	r3, r5
    7f7e:	4602      	mov	r2, r0
    7f80:	4631      	mov	r1, r6
    7f82:	4620      	mov	r0, r4
    7f84:	f7fb fa76 	bl	3474 <arch_new_thread>
	new_thread->init_data = NULL;
    7f88:	2300      	movs	r3, #0
    7f8a:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    7f8c:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    7f8e:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    7f92:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    7f96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7f98:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    7f9a:	f04f 0320 	mov.w	r3, #32
    7f9e:	f3ef 8611 	mrs	r6, BASEPRI
    7fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    7fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7faa:	4837      	ldr	r0, [pc, #220]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fac:	f7ff ff3c 	bl	7e28 <z_spin_lock_valid>
    7fb0:	2800      	cmp	r0, #0
    7fb2:	d042      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
	z_spin_lock_set_owner(l);
    7fb4:	4d34      	ldr	r5, [pc, #208]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fb6:	4628      	mov	r0, r5
    7fb8:	f7ff ff56 	bl	7e68 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    7fbc:	4b33      	ldr	r3, [pc, #204]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7fc0:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    7fc2:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fc4:	4628      	mov	r0, r5
    7fc6:	f7ff ff3f 	bl	7e48 <z_spin_unlock_valid>
    7fca:	2800      	cmp	r0, #0
    7fcc:	d045      	beq.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
	__asm__ volatile(
    7fce:	f386 8811 	msr	BASEPRI, r6
    7fd2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    7fd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d04e      	beq.n	807a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
		strncpy(new_thread->name, name,
    7fdc:	221f      	movs	r2, #31
    7fde:	4619      	mov	r1, r3
    7fe0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7fe4:	f003 f91f 	bl	b226 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7fe8:	2300      	movs	r3, #0
    7fea:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    7fee:	4b27      	ldr	r3, [pc, #156]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7ff0:	689b      	ldr	r3, [r3, #8]
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d045      	beq.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
	new_thread->resource_pool = _current->resource_pool;
    7ff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7ffa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    7ffe:	4638      	mov	r0, r7
    8000:	b005      	add	sp, #20
    8002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    8006:	4b22      	ldr	r3, [pc, #136]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8008:	429d      	cmp	r5, r3
    800a:	d19d      	bne.n	7f48 <z_setup_new_thread+0x1c>
    800c:	e7a0      	b.n	7f50 <z_setup_new_thread+0x24>
    800e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    8012:	f240 13ff 	movw	r3, #511	; 0x1ff
    8016:	464a      	mov	r2, r9
    8018:	491f      	ldr	r1, [pc, #124]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    801a:	4820      	ldr	r0, [pc, #128]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    801c:	f002 ffa3 	bl	af66 <assert_print>
    8020:	f06f 030f 	mvn.w	r3, #15
    8024:	220e      	movs	r2, #14
    8026:	4639      	mov	r1, r7
    8028:	481d      	ldr	r0, [pc, #116]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    802a:	f002 ff9c 	bl	af66 <assert_print>
    802e:	f240 11ff 	movw	r1, #511	; 0x1ff
    8032:	4648      	mov	r0, r9
    8034:	f002 ff90 	bl	af58 <assert_post_action>
    8038:	e78a      	b.n	7f50 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    803a:	4d1a      	ldr	r5, [pc, #104]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    803c:	238e      	movs	r3, #142	; 0x8e
    803e:	462a      	mov	r2, r5
    8040:	4919      	ldr	r1, [pc, #100]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    8042:	4816      	ldr	r0, [pc, #88]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    8044:	f002 ff8f 	bl	af66 <assert_print>
    8048:	490f      	ldr	r1, [pc, #60]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    804a:	4818      	ldr	r0, [pc, #96]	; (80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    804c:	f002 ff8b 	bl	af66 <assert_print>
    8050:	218e      	movs	r1, #142	; 0x8e
    8052:	4628      	mov	r0, r5
    8054:	f002 ff80 	bl	af58 <assert_post_action>
    8058:	e7ac      	b.n	7fb4 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    805a:	4d12      	ldr	r5, [pc, #72]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    805c:	23b9      	movs	r3, #185	; 0xb9
    805e:	462a      	mov	r2, r5
    8060:	4913      	ldr	r1, [pc, #76]	; (80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    8062:	480e      	ldr	r0, [pc, #56]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    8064:	f002 ff7f 	bl	af66 <assert_print>
    8068:	4907      	ldr	r1, [pc, #28]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    806a:	4812      	ldr	r0, [pc, #72]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    806c:	f002 ff7b 	bl	af66 <assert_print>
    8070:	21b9      	movs	r1, #185	; 0xb9
    8072:	4628      	mov	r0, r5
    8074:	f002 ff70 	bl	af58 <assert_post_action>
    8078:	e7a9      	b.n	7fce <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    807a:	2300      	movs	r3, #0
    807c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    8080:	e7b5      	b.n	7fee <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    8082:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    8086:	e7ba      	b.n	7ffe <z_setup_new_thread+0xd2>
    8088:	20001180 	.word	0x20001180
    808c:	20001154 	.word	0x20001154
    8090:	00008241 	.word	0x00008241
    8094:	0000dd48 	.word	0x0000dd48
    8098:	0000dda0 	.word	0x0000dda0
    809c:	0000c5c0 	.word	0x0000c5c0
    80a0:	0000de20 	.word	0x0000de20
    80a4:	0000c76c 	.word	0x0000c76c
    80a8:	0000c7cc 	.word	0x0000c7cc
    80ac:	0000c7e4 	.word	0x0000c7e4
    80b0:	0000c79c 	.word	0x0000c79c
    80b4:	0000c7b4 	.word	0x0000c7b4

000080b8 <z_impl_k_thread_create>:
{
    80b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80bc:	b086      	sub	sp, #24
    80be:	4604      	mov	r4, r0
    80c0:	460d      	mov	r5, r1
    80c2:	4616      	mov	r6, r2
    80c4:	461f      	mov	r7, r3
    80c6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    80ca:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    80ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    80d2:	b9db      	cbnz	r3, 810c <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    80d4:	2300      	movs	r3, #0
    80d6:	9305      	str	r3, [sp, #20]
    80d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    80da:	9304      	str	r3, [sp, #16]
    80dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    80de:	9303      	str	r3, [sp, #12]
    80e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    80e2:	9302      	str	r3, [sp, #8]
    80e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80e6:	9301      	str	r3, [sp, #4]
    80e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    80ea:	9300      	str	r3, [sp, #0]
    80ec:	463b      	mov	r3, r7
    80ee:	4632      	mov	r2, r6
    80f0:	4629      	mov	r1, r5
    80f2:	4620      	mov	r0, r4
    80f4:	f7ff ff1a 	bl	7f2c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    80f8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    80fc:	bf08      	it	eq
    80fe:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    8102:	d115      	bne.n	8130 <z_impl_k_thread_create+0x78>
}
    8104:	4620      	mov	r0, r4
    8106:	b006      	add	sp, #24
    8108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    810c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 813c <z_impl_k_thread_create+0x84>
    8110:	f240 236e 	movw	r3, #622	; 0x26e
    8114:	4652      	mov	r2, sl
    8116:	490a      	ldr	r1, [pc, #40]	; (8140 <z_impl_k_thread_create+0x88>)
    8118:	480a      	ldr	r0, [pc, #40]	; (8144 <z_impl_k_thread_create+0x8c>)
    811a:	f002 ff24 	bl	af66 <assert_print>
    811e:	480a      	ldr	r0, [pc, #40]	; (8148 <z_impl_k_thread_create+0x90>)
    8120:	f002 ff21 	bl	af66 <assert_print>
    8124:	f240 216e 	movw	r1, #622	; 0x26e
    8128:	4650      	mov	r0, sl
    812a:	f002 ff15 	bl	af58 <assert_post_action>
    812e:	e7d1      	b.n	80d4 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    8130:	464a      	mov	r2, r9
    8132:	4643      	mov	r3, r8
    8134:	4620      	mov	r0, r4
    8136:	f7ff fe69 	bl	7e0c <schedule_new_thread>
    813a:	e7e3      	b.n	8104 <z_impl_k_thread_create+0x4c>
    813c:	0000dd48 	.word	0x0000dd48
    8140:	0000de54 	.word	0x0000de54
    8144:	0000c5c0 	.word	0x0000c5c0
    8148:	0000de68 	.word	0x0000de68

0000814c <z_init_static_threads>:
{
    814c:	b530      	push	{r4, r5, lr}
    814e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    8150:	4c35      	ldr	r4, [pc, #212]	; (8228 <z_init_static_threads+0xdc>)
    8152:	e017      	b.n	8184 <z_init_static_threads+0x38>
    8154:	4b35      	ldr	r3, [pc, #212]	; (822c <z_init_static_threads+0xe0>)
    8156:	429c      	cmp	r4, r3
    8158:	d228      	bcs.n	81ac <z_init_static_threads+0x60>
		z_setup_new_thread(
    815a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    815c:	9305      	str	r3, [sp, #20]
    815e:	6a23      	ldr	r3, [r4, #32]
    8160:	9304      	str	r3, [sp, #16]
    8162:	69e3      	ldr	r3, [r4, #28]
    8164:	9303      	str	r3, [sp, #12]
    8166:	69a3      	ldr	r3, [r4, #24]
    8168:	9302      	str	r3, [sp, #8]
    816a:	6963      	ldr	r3, [r4, #20]
    816c:	9301      	str	r3, [sp, #4]
    816e:	6923      	ldr	r3, [r4, #16]
    8170:	9300      	str	r3, [sp, #0]
    8172:	68e3      	ldr	r3, [r4, #12]
    8174:	68a2      	ldr	r2, [r4, #8]
    8176:	6861      	ldr	r1, [r4, #4]
    8178:	6820      	ldr	r0, [r4, #0]
    817a:	f7ff fed7 	bl	7f2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    817e:	6823      	ldr	r3, [r4, #0]
    8180:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    8182:	3430      	adds	r4, #48	; 0x30
    8184:	4b29      	ldr	r3, [pc, #164]	; (822c <z_init_static_threads+0xe0>)
    8186:	429c      	cmp	r4, r3
    8188:	d9e4      	bls.n	8154 <z_init_static_threads+0x8>
    818a:	4d29      	ldr	r5, [pc, #164]	; (8230 <z_init_static_threads+0xe4>)
    818c:	f240 23d5 	movw	r3, #725	; 0x2d5
    8190:	462a      	mov	r2, r5
    8192:	4928      	ldr	r1, [pc, #160]	; (8234 <z_init_static_threads+0xe8>)
    8194:	4828      	ldr	r0, [pc, #160]	; (8238 <z_init_static_threads+0xec>)
    8196:	f002 fee6 	bl	af66 <assert_print>
    819a:	4828      	ldr	r0, [pc, #160]	; (823c <z_init_static_threads+0xf0>)
    819c:	f002 fee3 	bl	af66 <assert_print>
    81a0:	f240 21d5 	movw	r1, #725	; 0x2d5
    81a4:	4628      	mov	r0, r5
    81a6:	f002 fed7 	bl	af58 <assert_post_action>
    81aa:	e7d3      	b.n	8154 <z_init_static_threads+0x8>
	k_sched_lock();
    81ac:	f000 fca6 	bl	8afc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    81b0:	4c1d      	ldr	r4, [pc, #116]	; (8228 <z_init_static_threads+0xdc>)
    81b2:	e000      	b.n	81b6 <z_init_static_threads+0x6a>
    81b4:	3430      	adds	r4, #48	; 0x30
    81b6:	4b1d      	ldr	r3, [pc, #116]	; (822c <z_init_static_threads+0xe0>)
    81b8:	429c      	cmp	r4, r3
    81ba:	d81f      	bhi.n	81fc <z_init_static_threads+0xb0>
    81bc:	4b1b      	ldr	r3, [pc, #108]	; (822c <z_init_static_threads+0xe0>)
    81be:	429c      	cmp	r4, r3
    81c0:	d22d      	bcs.n	821e <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    81c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    81c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    81c8:	d0f4      	beq.n	81b4 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    81ca:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    81cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    81d0:	17c1      	asrs	r1, r0, #31
    81d2:	03c9      	lsls	r1, r1, #15
    81d4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    81d8:	03c0      	lsls	r0, r0, #15
    81da:	f240 33e7 	movw	r3, #999	; 0x3e7
    81de:	18c0      	adds	r0, r0, r3
    81e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    81e4:	f04f 0300 	mov.w	r3, #0
    81e8:	f141 0100 	adc.w	r1, r1, #0
    81ec:	f7f8 f96a 	bl	4c4 <__aeabi_uldivmod>
    81f0:	4602      	mov	r2, r0
    81f2:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    81f4:	4628      	mov	r0, r5
    81f6:	f7ff fe09 	bl	7e0c <schedule_new_thread>
    81fa:	e7db      	b.n	81b4 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    81fc:	4d0c      	ldr	r5, [pc, #48]	; (8230 <z_init_static_threads+0xe4>)
    81fe:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    8202:	462a      	mov	r2, r5
    8204:	490b      	ldr	r1, [pc, #44]	; (8234 <z_init_static_threads+0xe8>)
    8206:	480c      	ldr	r0, [pc, #48]	; (8238 <z_init_static_threads+0xec>)
    8208:	f002 fead 	bl	af66 <assert_print>
    820c:	480b      	ldr	r0, [pc, #44]	; (823c <z_init_static_threads+0xf0>)
    820e:	f002 feaa 	bl	af66 <assert_print>
    8212:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    8216:	4628      	mov	r0, r5
    8218:	f002 fe9e 	bl	af58 <assert_post_action>
    821c:	e7ce      	b.n	81bc <z_init_static_threads+0x70>
	k_sched_unlock();
    821e:	f001 f9f9 	bl	9614 <k_sched_unlock>
}
    8222:	b007      	add	sp, #28
    8224:	bd30      	pop	{r4, r5, pc}
    8226:	bf00      	nop
    8228:	200001f8 	.word	0x200001f8
    822c:	200001f8 	.word	0x200001f8
    8230:	0000dd48 	.word	0x0000dd48
    8234:	0000de90 	.word	0x0000de90
    8238:	0000c5c0 	.word	0x0000c5c0
    823c:	0000dd28 	.word	0x0000dd28

00008240 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8240:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    8242:	4b14      	ldr	r3, [pc, #80]	; (8294 <idle+0x54>)
    8244:	689b      	ldr	r3, [r3, #8]
    8246:	f993 300e 	ldrsb.w	r3, [r3, #14]
    824a:	2b00      	cmp	r3, #0
    824c:	da0d      	bge.n	826a <idle+0x2a>
    824e:	4c12      	ldr	r4, [pc, #72]	; (8298 <idle+0x58>)
    8250:	2327      	movs	r3, #39	; 0x27
    8252:	4622      	mov	r2, r4
    8254:	4911      	ldr	r1, [pc, #68]	; (829c <idle+0x5c>)
    8256:	4812      	ldr	r0, [pc, #72]	; (82a0 <idle+0x60>)
    8258:	f002 fe85 	bl	af66 <assert_print>
    825c:	2127      	movs	r1, #39	; 0x27
    825e:	4620      	mov	r0, r4
    8260:	f002 fe7a 	bl	af58 <assert_post_action>
    8264:	e001      	b.n	826a <idle+0x2a>
	arch_cpu_idle();
    8266:	f7fa ffd9 	bl	321c <arch_cpu_idle>
	__asm__ volatile(
    826a:	f04f 0220 	mov.w	r2, #32
    826e:	f3ef 8311 	mrs	r3, BASEPRI
    8272:	f382 8812 	msr	BASEPRI_MAX, r2
    8276:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    827a:	f001 ff7d 	bl	a178 <z_get_next_timeout_expiry>
    827e:	4b05      	ldr	r3, [pc, #20]	; (8294 <idle+0x54>)
    8280:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    8282:	4b08      	ldr	r3, [pc, #32]	; (82a4 <idle+0x64>)
    8284:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8286:	2b00      	cmp	r3, #0
    8288:	d0ed      	beq.n	8266 <idle+0x26>
    828a:	f7fa fd93 	bl	2db4 <pm_system_suspend>
    828e:	2800      	cmp	r0, #0
    8290:	d1eb      	bne.n	826a <idle+0x2a>
    8292:	e7e8      	b.n	8266 <idle+0x26>
    8294:	20001154 	.word	0x20001154
    8298:	0000dec0 	.word	0x0000dec0
    829c:	0000dee4 	.word	0x0000dee4
    82a0:	0000c5c0 	.word	0x0000c5c0
    82a4:	20001386 	.word	0x20001386

000082a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    82a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    82ac:	b083      	sub	sp, #12
    82ae:	4604      	mov	r4, r0
    82b0:	4616      	mov	r6, r2
    82b2:	461d      	mov	r5, r3
    82b4:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    82b8:	2900      	cmp	r1, #0
    82ba:	d12b      	bne.n	8314 <z_impl_k_mutex_lock+0x6c>
    82bc:	f04f 0320 	mov.w	r3, #32
    82c0:	f3ef 8711 	mrs	r7, BASEPRI
    82c4:	f383 8812 	msr	BASEPRI_MAX, r3
    82c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82cc:	487b      	ldr	r0, [pc, #492]	; (84bc <z_impl_k_mutex_lock+0x214>)
    82ce:	f7ff fdab 	bl	7e28 <z_spin_lock_valid>
    82d2:	2800      	cmp	r0, #0
    82d4:	d02d      	beq.n	8332 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    82d6:	4879      	ldr	r0, [pc, #484]	; (84bc <z_impl_k_mutex_lock+0x214>)
    82d8:	f7ff fdc6 	bl	7e68 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    82dc:	68e1      	ldr	r1, [r4, #12]
    82de:	2900      	cmp	r1, #0
    82e0:	d138      	bne.n	8354 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    82e2:	2900      	cmp	r1, #0
    82e4:	d17d      	bne.n	83e2 <z_impl_k_mutex_lock+0x13a>
    82e6:	4b76      	ldr	r3, [pc, #472]	; (84c0 <z_impl_k_mutex_lock+0x218>)
    82e8:	689b      	ldr	r3, [r3, #8]
    82ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    82ee:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    82f0:	3101      	adds	r1, #1
    82f2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    82f4:	4b72      	ldr	r3, [pc, #456]	; (84c0 <z_impl_k_mutex_lock+0x218>)
    82f6:	689b      	ldr	r3, [r3, #8]
    82f8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82fa:	4870      	ldr	r0, [pc, #448]	; (84bc <z_impl_k_mutex_lock+0x214>)
    82fc:	f7ff fda4 	bl	7e48 <z_spin_unlock_valid>
    8300:	2800      	cmp	r0, #0
    8302:	d070      	beq.n	83e6 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    8304:	f387 8811 	msr	BASEPRI, r7
    8308:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    830c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    830e:	b003      	add	sp, #12
    8310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8314:	4f6b      	ldr	r7, [pc, #428]	; (84c4 <z_impl_k_mutex_lock+0x21c>)
    8316:	2365      	movs	r3, #101	; 0x65
    8318:	463a      	mov	r2, r7
    831a:	496b      	ldr	r1, [pc, #428]	; (84c8 <z_impl_k_mutex_lock+0x220>)
    831c:	486b      	ldr	r0, [pc, #428]	; (84cc <z_impl_k_mutex_lock+0x224>)
    831e:	f002 fe22 	bl	af66 <assert_print>
    8322:	486b      	ldr	r0, [pc, #428]	; (84d0 <z_impl_k_mutex_lock+0x228>)
    8324:	f002 fe1f 	bl	af66 <assert_print>
    8328:	2165      	movs	r1, #101	; 0x65
    832a:	4638      	mov	r0, r7
    832c:	f002 fe14 	bl	af58 <assert_post_action>
    8330:	e7c4      	b.n	82bc <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8332:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 84d4 <z_impl_k_mutex_lock+0x22c>
    8336:	238e      	movs	r3, #142	; 0x8e
    8338:	4642      	mov	r2, r8
    833a:	4967      	ldr	r1, [pc, #412]	; (84d8 <z_impl_k_mutex_lock+0x230>)
    833c:	4863      	ldr	r0, [pc, #396]	; (84cc <z_impl_k_mutex_lock+0x224>)
    833e:	f002 fe12 	bl	af66 <assert_print>
    8342:	495e      	ldr	r1, [pc, #376]	; (84bc <z_impl_k_mutex_lock+0x214>)
    8344:	4865      	ldr	r0, [pc, #404]	; (84dc <z_impl_k_mutex_lock+0x234>)
    8346:	f002 fe0e 	bl	af66 <assert_print>
    834a:	218e      	movs	r1, #142	; 0x8e
    834c:	4640      	mov	r0, r8
    834e:	f002 fe03 	bl	af58 <assert_post_action>
    8352:	e7c0      	b.n	82d6 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8354:	68a2      	ldr	r2, [r4, #8]
    8356:	4b5a      	ldr	r3, [pc, #360]	; (84c0 <z_impl_k_mutex_lock+0x218>)
    8358:	689b      	ldr	r3, [r3, #8]
    835a:	429a      	cmp	r2, r3
    835c:	d0c1      	beq.n	82e2 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    835e:	ea55 0106 	orrs.w	r1, r5, r6
    8362:	bf0c      	ite	eq
    8364:	f04f 0801 	moveq.w	r8, #1
    8368:	f04f 0800 	movne.w	r8, #0
    836c:	d04b      	beq.n	8406 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    836e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8372:	4649      	mov	r1, r9
    8374:	f993 000e 	ldrsb.w	r0, [r3, #14]
    8378:	f003 fcfe 	bl	bd78 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    837c:	4581      	cmp	r9, r0
    837e:	dc5d      	bgt.n	843c <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    8380:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8384:	9600      	str	r6, [sp, #0]
    8386:	9501      	str	r5, [sp, #4]
    8388:	4622      	mov	r2, r4
    838a:	4639      	mov	r1, r7
    838c:	484b      	ldr	r0, [pc, #300]	; (84bc <z_impl_k_mutex_lock+0x214>)
    838e:	f000 ffe7 	bl	9360 <z_pend_curr>
	if (got_mutex == 0) {
    8392:	2800      	cmp	r0, #0
    8394:	d0bb      	beq.n	830e <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    8396:	f04f 0320 	mov.w	r3, #32
    839a:	f3ef 8511 	mrs	r5, BASEPRI
    839e:	f383 8812 	msr	BASEPRI_MAX, r3
    83a2:	f3bf 8f6f 	isb	sy
    83a6:	4845      	ldr	r0, [pc, #276]	; (84bc <z_impl_k_mutex_lock+0x214>)
    83a8:	f7ff fd3e 	bl	7e28 <z_spin_lock_valid>
    83ac:	2800      	cmp	r0, #0
    83ae:	d04b      	beq.n	8448 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    83b0:	4842      	ldr	r0, [pc, #264]	; (84bc <z_impl_k_mutex_lock+0x214>)
    83b2:	f7ff fd59 	bl	7e68 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    83b6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83b8:	42a3      	cmp	r3, r4
    83ba:	d055      	beq.n	8468 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    83bc:	2b00      	cmp	r3, #0
    83be:	d053      	beq.n	8468 <z_impl_k_mutex_lock+0x1c0>
    83c0:	6921      	ldr	r1, [r4, #16]
    83c2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    83c6:	f003 fcd7 	bl	bd78 <new_prio_for_inheritance>
    83ca:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    83cc:	4620      	mov	r0, r4
    83ce:	f003 fcde 	bl	bd8e <adjust_owner_prio>
    83d2:	2800      	cmp	r0, #0
    83d4:	d14a      	bne.n	846c <z_impl_k_mutex_lock+0x1c4>
    83d6:	f1b9 0f00 	cmp.w	r9, #0
    83da:	d049      	beq.n	8470 <z_impl_k_mutex_lock+0x1c8>
    83dc:	f04f 0801 	mov.w	r8, #1
    83e0:	e046      	b.n	8470 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    83e2:	6923      	ldr	r3, [r4, #16]
    83e4:	e783      	b.n	82ee <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83e6:	4c3b      	ldr	r4, [pc, #236]	; (84d4 <z_impl_k_mutex_lock+0x22c>)
    83e8:	23b9      	movs	r3, #185	; 0xb9
    83ea:	4622      	mov	r2, r4
    83ec:	493c      	ldr	r1, [pc, #240]	; (84e0 <z_impl_k_mutex_lock+0x238>)
    83ee:	4837      	ldr	r0, [pc, #220]	; (84cc <z_impl_k_mutex_lock+0x224>)
    83f0:	f002 fdb9 	bl	af66 <assert_print>
    83f4:	4931      	ldr	r1, [pc, #196]	; (84bc <z_impl_k_mutex_lock+0x214>)
    83f6:	483b      	ldr	r0, [pc, #236]	; (84e4 <z_impl_k_mutex_lock+0x23c>)
    83f8:	f002 fdb5 	bl	af66 <assert_print>
    83fc:	21b9      	movs	r1, #185	; 0xb9
    83fe:	4620      	mov	r0, r4
    8400:	f002 fdaa 	bl	af58 <assert_post_action>
    8404:	e77e      	b.n	8304 <z_impl_k_mutex_lock+0x5c>
    8406:	482d      	ldr	r0, [pc, #180]	; (84bc <z_impl_k_mutex_lock+0x214>)
    8408:	f7ff fd1e 	bl	7e48 <z_spin_unlock_valid>
    840c:	b130      	cbz	r0, 841c <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    840e:	f387 8811 	msr	BASEPRI, r7
    8412:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    8416:	f06f 000f 	mvn.w	r0, #15
    841a:	e778      	b.n	830e <z_impl_k_mutex_lock+0x66>
    841c:	4c2d      	ldr	r4, [pc, #180]	; (84d4 <z_impl_k_mutex_lock+0x22c>)
    841e:	23b9      	movs	r3, #185	; 0xb9
    8420:	4622      	mov	r2, r4
    8422:	492f      	ldr	r1, [pc, #188]	; (84e0 <z_impl_k_mutex_lock+0x238>)
    8424:	4829      	ldr	r0, [pc, #164]	; (84cc <z_impl_k_mutex_lock+0x224>)
    8426:	f002 fd9e 	bl	af66 <assert_print>
    842a:	4924      	ldr	r1, [pc, #144]	; (84bc <z_impl_k_mutex_lock+0x214>)
    842c:	482d      	ldr	r0, [pc, #180]	; (84e4 <z_impl_k_mutex_lock+0x23c>)
    842e:	f002 fd9a 	bl	af66 <assert_print>
    8432:	21b9      	movs	r1, #185	; 0xb9
    8434:	4620      	mov	r0, r4
    8436:	f002 fd8f 	bl	af58 <assert_post_action>
    843a:	e7e8      	b.n	840e <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    843c:	4601      	mov	r1, r0
    843e:	4620      	mov	r0, r4
    8440:	f003 fca5 	bl	bd8e <adjust_owner_prio>
    8444:	4681      	mov	r9, r0
    8446:	e79d      	b.n	8384 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8448:	4e22      	ldr	r6, [pc, #136]	; (84d4 <z_impl_k_mutex_lock+0x22c>)
    844a:	238e      	movs	r3, #142	; 0x8e
    844c:	4632      	mov	r2, r6
    844e:	4922      	ldr	r1, [pc, #136]	; (84d8 <z_impl_k_mutex_lock+0x230>)
    8450:	481e      	ldr	r0, [pc, #120]	; (84cc <z_impl_k_mutex_lock+0x224>)
    8452:	f002 fd88 	bl	af66 <assert_print>
    8456:	4919      	ldr	r1, [pc, #100]	; (84bc <z_impl_k_mutex_lock+0x214>)
    8458:	4820      	ldr	r0, [pc, #128]	; (84dc <z_impl_k_mutex_lock+0x234>)
    845a:	f002 fd84 	bl	af66 <assert_print>
    845e:	218e      	movs	r1, #142	; 0x8e
    8460:	4630      	mov	r0, r6
    8462:	f002 fd79 	bl	af58 <assert_post_action>
    8466:	e7a3      	b.n	83b0 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8468:	6921      	ldr	r1, [r4, #16]
    846a:	e7af      	b.n	83cc <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    846c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    8470:	f1b8 0f00 	cmp.w	r8, #0
    8474:	d006      	beq.n	8484 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    8476:	4629      	mov	r1, r5
    8478:	4810      	ldr	r0, [pc, #64]	; (84bc <z_impl_k_mutex_lock+0x214>)
    847a:	f000 faf1 	bl	8a60 <z_reschedule>
	return -EAGAIN;
    847e:	f06f 000a 	mvn.w	r0, #10
    8482:	e744      	b.n	830e <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8484:	480d      	ldr	r0, [pc, #52]	; (84bc <z_impl_k_mutex_lock+0x214>)
    8486:	f7ff fcdf 	bl	7e48 <z_spin_unlock_valid>
    848a:	b130      	cbz	r0, 849a <z_impl_k_mutex_lock+0x1f2>
    848c:	f385 8811 	msr	BASEPRI, r5
    8490:	f3bf 8f6f 	isb	sy
    8494:	f06f 000a 	mvn.w	r0, #10
    8498:	e739      	b.n	830e <z_impl_k_mutex_lock+0x66>
    849a:	4c0e      	ldr	r4, [pc, #56]	; (84d4 <z_impl_k_mutex_lock+0x22c>)
    849c:	23b9      	movs	r3, #185	; 0xb9
    849e:	4622      	mov	r2, r4
    84a0:	490f      	ldr	r1, [pc, #60]	; (84e0 <z_impl_k_mutex_lock+0x238>)
    84a2:	480a      	ldr	r0, [pc, #40]	; (84cc <z_impl_k_mutex_lock+0x224>)
    84a4:	f002 fd5f 	bl	af66 <assert_print>
    84a8:	4904      	ldr	r1, [pc, #16]	; (84bc <z_impl_k_mutex_lock+0x214>)
    84aa:	480e      	ldr	r0, [pc, #56]	; (84e4 <z_impl_k_mutex_lock+0x23c>)
    84ac:	f002 fd5b 	bl	af66 <assert_print>
    84b0:	21b9      	movs	r1, #185	; 0xb9
    84b2:	4620      	mov	r0, r4
    84b4:	f002 fd50 	bl	af58 <assert_post_action>
    84b8:	e7e8      	b.n	848c <z_impl_k_mutex_lock+0x1e4>
    84ba:	bf00      	nop
    84bc:	20001184 	.word	0x20001184
    84c0:	20001154 	.word	0x20001154
    84c4:	0000df0c 	.word	0x0000df0c
    84c8:	0000de54 	.word	0x0000de54
    84cc:	0000c5c0 	.word	0x0000c5c0
    84d0:	0000df30 	.word	0x0000df30
    84d4:	0000c76c 	.word	0x0000c76c
    84d8:	0000c7cc 	.word	0x0000c7cc
    84dc:	0000c7e4 	.word	0x0000c7e4
    84e0:	0000c79c 	.word	0x0000c79c
    84e4:	0000c7b4 	.word	0x0000c7b4

000084e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    84e8:	b570      	push	{r4, r5, r6, lr}
    84ea:	4604      	mov	r4, r0
    84ec:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    84f0:	bb03      	cbnz	r3, 8534 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    84f2:	68a3      	ldr	r3, [r4, #8]
    84f4:	2b00      	cmp	r3, #0
    84f6:	f000 80a6 	beq.w	8646 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    84fa:	4a56      	ldr	r2, [pc, #344]	; (8654 <z_impl_k_mutex_unlock+0x16c>)
    84fc:	6892      	ldr	r2, [r2, #8]
    84fe:	4293      	cmp	r3, r2
    8500:	f040 80a4 	bne.w	864c <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    8504:	68e3      	ldr	r3, [r4, #12]
    8506:	b323      	cbz	r3, 8552 <z_impl_k_mutex_unlock+0x6a>
    8508:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    850c:	bb6b      	cbnz	r3, 856a <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    850e:	4b51      	ldr	r3, [pc, #324]	; (8654 <z_impl_k_mutex_unlock+0x16c>)
    8510:	689b      	ldr	r3, [r3, #8]
    8512:	7bdb      	ldrb	r3, [r3, #15]
    8514:	2b01      	cmp	r3, #1
    8516:	d037      	beq.n	8588 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    8518:	4b4e      	ldr	r3, [pc, #312]	; (8654 <z_impl_k_mutex_unlock+0x16c>)
    851a:	689a      	ldr	r2, [r3, #8]
    851c:	7bd3      	ldrb	r3, [r2, #15]
    851e:	3b01      	subs	r3, #1
    8520:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8522:	68e3      	ldr	r3, [r4, #12]
    8524:	2b01      	cmp	r3, #1
    8526:	d93e      	bls.n	85a6 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    8528:	3b01      	subs	r3, #1
    852a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    852c:	f001 f872 	bl	9614 <k_sched_unlock>

	return 0;
    8530:	2000      	movs	r0, #0
}
    8532:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8534:	4d48      	ldr	r5, [pc, #288]	; (8658 <z_impl_k_mutex_unlock+0x170>)
    8536:	23c7      	movs	r3, #199	; 0xc7
    8538:	462a      	mov	r2, r5
    853a:	4948      	ldr	r1, [pc, #288]	; (865c <z_impl_k_mutex_unlock+0x174>)
    853c:	4848      	ldr	r0, [pc, #288]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    853e:	f002 fd12 	bl	af66 <assert_print>
    8542:	4848      	ldr	r0, [pc, #288]	; (8664 <z_impl_k_mutex_unlock+0x17c>)
    8544:	f002 fd0f 	bl	af66 <assert_print>
    8548:	21c7      	movs	r1, #199	; 0xc7
    854a:	4628      	mov	r0, r5
    854c:	f002 fd04 	bl	af58 <assert_post_action>
    8550:	e7cf      	b.n	84f2 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    8552:	4d41      	ldr	r5, [pc, #260]	; (8658 <z_impl_k_mutex_unlock+0x170>)
    8554:	23df      	movs	r3, #223	; 0xdf
    8556:	462a      	mov	r2, r5
    8558:	4943      	ldr	r1, [pc, #268]	; (8668 <z_impl_k_mutex_unlock+0x180>)
    855a:	4841      	ldr	r0, [pc, #260]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    855c:	f002 fd03 	bl	af66 <assert_print>
    8560:	21df      	movs	r1, #223	; 0xdf
    8562:	4628      	mov	r0, r5
    8564:	f002 fcf8 	bl	af58 <assert_post_action>
    8568:	e7ce      	b.n	8508 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    856a:	4d40      	ldr	r5, [pc, #256]	; (866c <z_impl_k_mutex_unlock+0x184>)
    856c:	23fd      	movs	r3, #253	; 0xfd
    856e:	462a      	mov	r2, r5
    8570:	493a      	ldr	r1, [pc, #232]	; (865c <z_impl_k_mutex_unlock+0x174>)
    8572:	483b      	ldr	r0, [pc, #236]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    8574:	f002 fcf7 	bl	af66 <assert_print>
    8578:	483d      	ldr	r0, [pc, #244]	; (8670 <z_impl_k_mutex_unlock+0x188>)
    857a:	f002 fcf4 	bl	af66 <assert_print>
    857e:	21fd      	movs	r1, #253	; 0xfd
    8580:	4628      	mov	r0, r5
    8582:	f002 fce9 	bl	af58 <assert_post_action>
    8586:	e7c2      	b.n	850e <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8588:	4d38      	ldr	r5, [pc, #224]	; (866c <z_impl_k_mutex_unlock+0x184>)
    858a:	23fe      	movs	r3, #254	; 0xfe
    858c:	462a      	mov	r2, r5
    858e:	4939      	ldr	r1, [pc, #228]	; (8674 <z_impl_k_mutex_unlock+0x18c>)
    8590:	4833      	ldr	r0, [pc, #204]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    8592:	f002 fce8 	bl	af66 <assert_print>
    8596:	4836      	ldr	r0, [pc, #216]	; (8670 <z_impl_k_mutex_unlock+0x188>)
    8598:	f002 fce5 	bl	af66 <assert_print>
    859c:	21fe      	movs	r1, #254	; 0xfe
    859e:	4628      	mov	r0, r5
    85a0:	f002 fcda 	bl	af58 <assert_post_action>
    85a4:	e7b8      	b.n	8518 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    85a6:	f04f 0320 	mov.w	r3, #32
    85aa:	f3ef 8511 	mrs	r5, BASEPRI
    85ae:	f383 8812 	msr	BASEPRI_MAX, r3
    85b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85b6:	4830      	ldr	r0, [pc, #192]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    85b8:	f7ff fc36 	bl	7e28 <z_spin_lock_valid>
    85bc:	b1c0      	cbz	r0, 85f0 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    85be:	482e      	ldr	r0, [pc, #184]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    85c0:	f7ff fc52 	bl	7e68 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    85c4:	6921      	ldr	r1, [r4, #16]
    85c6:	4620      	mov	r0, r4
    85c8:	f003 fbe1 	bl	bd8e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    85cc:	4620      	mov	r0, r4
    85ce:	f001 f963 	bl	9898 <z_unpend_first_thread>
	mutex->owner = new_owner;
    85d2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    85d4:	b1e0      	cbz	r0, 8610 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    85d6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    85da:	6123      	str	r3, [r4, #16]
    85dc:	2300      	movs	r3, #0
    85de:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    85e2:	f000 fce1 	bl	8fa8 <z_ready_thread>
		z_reschedule(&lock, key);
    85e6:	4629      	mov	r1, r5
    85e8:	4823      	ldr	r0, [pc, #140]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    85ea:	f000 fa39 	bl	8a60 <z_reschedule>
    85ee:	e79d      	b.n	852c <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85f0:	4e22      	ldr	r6, [pc, #136]	; (867c <z_impl_k_mutex_unlock+0x194>)
    85f2:	238e      	movs	r3, #142	; 0x8e
    85f4:	4632      	mov	r2, r6
    85f6:	4922      	ldr	r1, [pc, #136]	; (8680 <z_impl_k_mutex_unlock+0x198>)
    85f8:	4819      	ldr	r0, [pc, #100]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    85fa:	f002 fcb4 	bl	af66 <assert_print>
    85fe:	491e      	ldr	r1, [pc, #120]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    8600:	4820      	ldr	r0, [pc, #128]	; (8684 <z_impl_k_mutex_unlock+0x19c>)
    8602:	f002 fcb0 	bl	af66 <assert_print>
    8606:	218e      	movs	r1, #142	; 0x8e
    8608:	4630      	mov	r0, r6
    860a:	f002 fca5 	bl	af58 <assert_post_action>
    860e:	e7d6      	b.n	85be <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    8610:	2300      	movs	r3, #0
    8612:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8614:	4818      	ldr	r0, [pc, #96]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    8616:	f7ff fc17 	bl	7e48 <z_spin_unlock_valid>
    861a:	b120      	cbz	r0, 8626 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    861c:	f385 8811 	msr	BASEPRI, r5
    8620:	f3bf 8f6f 	isb	sy
    8624:	e782      	b.n	852c <z_impl_k_mutex_unlock+0x44>
    8626:	4c15      	ldr	r4, [pc, #84]	; (867c <z_impl_k_mutex_unlock+0x194>)
    8628:	23b9      	movs	r3, #185	; 0xb9
    862a:	4622      	mov	r2, r4
    862c:	4916      	ldr	r1, [pc, #88]	; (8688 <z_impl_k_mutex_unlock+0x1a0>)
    862e:	480c      	ldr	r0, [pc, #48]	; (8660 <z_impl_k_mutex_unlock+0x178>)
    8630:	f002 fc99 	bl	af66 <assert_print>
    8634:	4910      	ldr	r1, [pc, #64]	; (8678 <z_impl_k_mutex_unlock+0x190>)
    8636:	4815      	ldr	r0, [pc, #84]	; (868c <z_impl_k_mutex_unlock+0x1a4>)
    8638:	f002 fc95 	bl	af66 <assert_print>
    863c:	21b9      	movs	r1, #185	; 0xb9
    863e:	4620      	mov	r0, r4
    8640:	f002 fc8a 	bl	af58 <assert_post_action>
    8644:	e7ea      	b.n	861c <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    8646:	f06f 0015 	mvn.w	r0, #21
    864a:	e772      	b.n	8532 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    864c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8650:	e76f      	b.n	8532 <z_impl_k_mutex_unlock+0x4a>
    8652:	bf00      	nop
    8654:	20001154 	.word	0x20001154
    8658:	0000df0c 	.word	0x0000df0c
    865c:	0000de54 	.word	0x0000de54
    8660:	0000c5c0 	.word	0x0000c5c0
    8664:	0000df30 	.word	0x0000df30
    8668:	0000df58 	.word	0x0000df58
    866c:	0000df70 	.word	0x0000df70
    8670:	0000df9c 	.word	0x0000df9c
    8674:	0000dfa0 	.word	0x0000dfa0
    8678:	20001184 	.word	0x20001184
    867c:	0000c76c 	.word	0x0000c76c
    8680:	0000c7cc 	.word	0x0000c7cc
    8684:	0000c7e4 	.word	0x0000c7e4
    8688:	0000c79c 	.word	0x0000c79c
    868c:	0000c7b4 	.word	0x0000c7b4

00008690 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8690:	b570      	push	{r4, r5, r6, lr}
    8692:	4604      	mov	r4, r0
	__asm__ volatile(
    8694:	f04f 0320 	mov.w	r3, #32
    8698:	f3ef 8511 	mrs	r5, BASEPRI
    869c:	f383 8812 	msr	BASEPRI_MAX, r3
    86a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86a4:	4817      	ldr	r0, [pc, #92]	; (8704 <z_impl_k_sem_give+0x74>)
    86a6:	f7ff fbbf 	bl	7e28 <z_spin_lock_valid>
    86aa:	b180      	cbz	r0, 86ce <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    86ac:	4815      	ldr	r0, [pc, #84]	; (8704 <z_impl_k_sem_give+0x74>)
    86ae:	f7ff fbdb 	bl	7e68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    86b2:	4620      	mov	r0, r4
    86b4:	f001 f8f0 	bl	9898 <z_unpend_first_thread>

	if (thread != NULL) {
    86b8:	b1c8      	cbz	r0, 86ee <z_impl_k_sem_give+0x5e>
    86ba:	2200      	movs	r2, #0
    86bc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    86c0:	f000 fc72 	bl	8fa8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    86c4:	4629      	mov	r1, r5
    86c6:	480f      	ldr	r0, [pc, #60]	; (8704 <z_impl_k_sem_give+0x74>)
    86c8:	f000 f9ca 	bl	8a60 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    86cc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86ce:	4e0e      	ldr	r6, [pc, #56]	; (8708 <z_impl_k_sem_give+0x78>)
    86d0:	238e      	movs	r3, #142	; 0x8e
    86d2:	4632      	mov	r2, r6
    86d4:	490d      	ldr	r1, [pc, #52]	; (870c <z_impl_k_sem_give+0x7c>)
    86d6:	480e      	ldr	r0, [pc, #56]	; (8710 <z_impl_k_sem_give+0x80>)
    86d8:	f002 fc45 	bl	af66 <assert_print>
    86dc:	4909      	ldr	r1, [pc, #36]	; (8704 <z_impl_k_sem_give+0x74>)
    86de:	480d      	ldr	r0, [pc, #52]	; (8714 <z_impl_k_sem_give+0x84>)
    86e0:	f002 fc41 	bl	af66 <assert_print>
    86e4:	218e      	movs	r1, #142	; 0x8e
    86e6:	4630      	mov	r0, r6
    86e8:	f002 fc36 	bl	af58 <assert_post_action>
    86ec:	e7de      	b.n	86ac <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    86ee:	68a3      	ldr	r3, [r4, #8]
    86f0:	68e2      	ldr	r2, [r4, #12]
    86f2:	4293      	cmp	r3, r2
    86f4:	d003      	beq.n	86fe <z_impl_k_sem_give+0x6e>
    86f6:	2201      	movs	r2, #1
    86f8:	4413      	add	r3, r2
    86fa:	60a3      	str	r3, [r4, #8]
}
    86fc:	e7e2      	b.n	86c4 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    86fe:	2200      	movs	r2, #0
    8700:	e7fa      	b.n	86f8 <z_impl_k_sem_give+0x68>
    8702:	bf00      	nop
    8704:	20001188 	.word	0x20001188
    8708:	0000c76c 	.word	0x0000c76c
    870c:	0000c7cc 	.word	0x0000c7cc
    8710:	0000c5c0 	.word	0x0000c5c0
    8714:	0000c7e4 	.word	0x0000c7e4

00008718 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    871c:	b082      	sub	sp, #8
    871e:	4604      	mov	r4, r0
    8720:	4617      	mov	r7, r2
    8722:	461d      	mov	r5, r3
    8724:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    8728:	b111      	cbz	r1, 8730 <z_impl_k_sem_take+0x18>
    872a:	ea55 0302 	orrs.w	r3, r5, r2
    872e:	d11f      	bne.n	8770 <z_impl_k_sem_take+0x58>
    8730:	f04f 0320 	mov.w	r3, #32
    8734:	f3ef 8611 	mrs	r6, BASEPRI
    8738:	f383 8812 	msr	BASEPRI_MAX, r3
    873c:	f3bf 8f6f 	isb	sy
    8740:	4836      	ldr	r0, [pc, #216]	; (881c <z_impl_k_sem_take+0x104>)
    8742:	f7ff fb71 	bl	7e28 <z_spin_lock_valid>
    8746:	b310      	cbz	r0, 878e <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    8748:	4834      	ldr	r0, [pc, #208]	; (881c <z_impl_k_sem_take+0x104>)
    874a:	f7ff fb8d 	bl	7e68 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    874e:	68a1      	ldr	r1, [r4, #8]
    8750:	2900      	cmp	r1, #0
    8752:	d03d      	beq.n	87d0 <z_impl_k_sem_take+0xb8>
		sem->count--;
    8754:	3901      	subs	r1, #1
    8756:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8758:	4830      	ldr	r0, [pc, #192]	; (881c <z_impl_k_sem_take+0x104>)
    875a:	f7ff fb75 	bl	7e48 <z_spin_unlock_valid>
    875e:	b338      	cbz	r0, 87b0 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    8760:	f386 8811 	msr	BASEPRI, r6
    8764:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8768:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    876a:	b002      	add	sp, #8
    876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    8770:	4e2b      	ldr	r6, [pc, #172]	; (8820 <z_impl_k_sem_take+0x108>)
    8772:	2379      	movs	r3, #121	; 0x79
    8774:	4632      	mov	r2, r6
    8776:	492b      	ldr	r1, [pc, #172]	; (8824 <z_impl_k_sem_take+0x10c>)
    8778:	482b      	ldr	r0, [pc, #172]	; (8828 <z_impl_k_sem_take+0x110>)
    877a:	f002 fbf4 	bl	af66 <assert_print>
    877e:	482b      	ldr	r0, [pc, #172]	; (882c <z_impl_k_sem_take+0x114>)
    8780:	f002 fbf1 	bl	af66 <assert_print>
    8784:	2179      	movs	r1, #121	; 0x79
    8786:	4630      	mov	r0, r6
    8788:	f002 fbe6 	bl	af58 <assert_post_action>
    878c:	e7d0      	b.n	8730 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    878e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8830 <z_impl_k_sem_take+0x118>
    8792:	238e      	movs	r3, #142	; 0x8e
    8794:	4642      	mov	r2, r8
    8796:	4927      	ldr	r1, [pc, #156]	; (8834 <z_impl_k_sem_take+0x11c>)
    8798:	4823      	ldr	r0, [pc, #140]	; (8828 <z_impl_k_sem_take+0x110>)
    879a:	f002 fbe4 	bl	af66 <assert_print>
    879e:	491f      	ldr	r1, [pc, #124]	; (881c <z_impl_k_sem_take+0x104>)
    87a0:	4825      	ldr	r0, [pc, #148]	; (8838 <z_impl_k_sem_take+0x120>)
    87a2:	f002 fbe0 	bl	af66 <assert_print>
    87a6:	218e      	movs	r1, #142	; 0x8e
    87a8:	4640      	mov	r0, r8
    87aa:	f002 fbd5 	bl	af58 <assert_post_action>
    87ae:	e7cb      	b.n	8748 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    87b0:	4c1f      	ldr	r4, [pc, #124]	; (8830 <z_impl_k_sem_take+0x118>)
    87b2:	23b9      	movs	r3, #185	; 0xb9
    87b4:	4622      	mov	r2, r4
    87b6:	4921      	ldr	r1, [pc, #132]	; (883c <z_impl_k_sem_take+0x124>)
    87b8:	481b      	ldr	r0, [pc, #108]	; (8828 <z_impl_k_sem_take+0x110>)
    87ba:	f002 fbd4 	bl	af66 <assert_print>
    87be:	4917      	ldr	r1, [pc, #92]	; (881c <z_impl_k_sem_take+0x104>)
    87c0:	481f      	ldr	r0, [pc, #124]	; (8840 <z_impl_k_sem_take+0x128>)
    87c2:	f002 fbd0 	bl	af66 <assert_print>
    87c6:	21b9      	movs	r1, #185	; 0xb9
    87c8:	4620      	mov	r0, r4
    87ca:	f002 fbc5 	bl	af58 <assert_post_action>
    87ce:	e7c7      	b.n	8760 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    87d0:	ea55 0307 	orrs.w	r3, r5, r7
    87d4:	d007      	beq.n	87e6 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    87d6:	9700      	str	r7, [sp, #0]
    87d8:	9501      	str	r5, [sp, #4]
    87da:	4622      	mov	r2, r4
    87dc:	4631      	mov	r1, r6
    87de:	480f      	ldr	r0, [pc, #60]	; (881c <z_impl_k_sem_take+0x104>)
    87e0:	f000 fdbe 	bl	9360 <z_pend_curr>
	return ret;
    87e4:	e7c1      	b.n	876a <z_impl_k_sem_take+0x52>
    87e6:	480d      	ldr	r0, [pc, #52]	; (881c <z_impl_k_sem_take+0x104>)
    87e8:	f7ff fb2e 	bl	7e48 <z_spin_unlock_valid>
    87ec:	b130      	cbz	r0, 87fc <z_impl_k_sem_take+0xe4>
    87ee:	f386 8811 	msr	BASEPRI, r6
    87f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    87f6:	f06f 000f 	mvn.w	r0, #15
    87fa:	e7b6      	b.n	876a <z_impl_k_sem_take+0x52>
    87fc:	4c0c      	ldr	r4, [pc, #48]	; (8830 <z_impl_k_sem_take+0x118>)
    87fe:	23b9      	movs	r3, #185	; 0xb9
    8800:	4622      	mov	r2, r4
    8802:	490e      	ldr	r1, [pc, #56]	; (883c <z_impl_k_sem_take+0x124>)
    8804:	4808      	ldr	r0, [pc, #32]	; (8828 <z_impl_k_sem_take+0x110>)
    8806:	f002 fbae 	bl	af66 <assert_print>
    880a:	4904      	ldr	r1, [pc, #16]	; (881c <z_impl_k_sem_take+0x104>)
    880c:	480c      	ldr	r0, [pc, #48]	; (8840 <z_impl_k_sem_take+0x128>)
    880e:	f002 fbaa 	bl	af66 <assert_print>
    8812:	21b9      	movs	r1, #185	; 0xb9
    8814:	4620      	mov	r0, r4
    8816:	f002 fb9f 	bl	af58 <assert_post_action>
    881a:	e7e8      	b.n	87ee <z_impl_k_sem_take+0xd6>
    881c:	20001188 	.word	0x20001188
    8820:	0000dfd4 	.word	0x0000dfd4
    8824:	0000dff4 	.word	0x0000dff4
    8828:	0000c5c0 	.word	0x0000c5c0
    882c:	0000df9c 	.word	0x0000df9c
    8830:	0000c76c 	.word	0x0000c76c
    8834:	0000c7cc 	.word	0x0000c7cc
    8838:	0000c7e4 	.word	0x0000c7e4
    883c:	0000c79c 	.word	0x0000c79c
    8840:	0000c7b4 	.word	0x0000c7b4

00008844 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    8844:	b538      	push	{r3, r4, r5, lr}
    8846:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8848:	6883      	ldr	r3, [r0, #8]
    884a:	b10b      	cbz	r3, 8850 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    884c:	68a0      	ldr	r0, [r4, #8]
    884e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    8850:	4d06      	ldr	r5, [pc, #24]	; (886c <pended_on_thread+0x28>)
    8852:	f240 23b9 	movw	r3, #697	; 0x2b9
    8856:	462a      	mov	r2, r5
    8858:	4905      	ldr	r1, [pc, #20]	; (8870 <pended_on_thread+0x2c>)
    885a:	4806      	ldr	r0, [pc, #24]	; (8874 <pended_on_thread+0x30>)
    885c:	f002 fb83 	bl	af66 <assert_print>
    8860:	f240 21b9 	movw	r1, #697	; 0x2b9
    8864:	4628      	mov	r0, r5
    8866:	f002 fb77 	bl	af58 <assert_post_action>
    886a:	e7ef      	b.n	884c <pended_on_thread+0x8>
    886c:	0000e044 	.word	0x0000e044
    8870:	0000e068 	.word	0x0000e068
    8874:	0000c5c0 	.word	0x0000c5c0

00008878 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    887c:	bf08      	it	eq
    887e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    8882:	d100      	bne.n	8886 <add_thread_timeout+0xe>
    8884:	4770      	bx	lr
{
    8886:	b508      	push	{r3, lr}
    8888:	4902      	ldr	r1, [pc, #8]	; (8894 <add_thread_timeout+0x1c>)
    888a:	3018      	adds	r0, #24
    888c:	f001 fb36 	bl	9efc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    8890:	bd08      	pop	{r3, pc}
    8892:	bf00      	nop
    8894:	00009105 	.word	0x00009105

00008898 <z_reset_time_slice>:
{
    8898:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    889a:	4b07      	ldr	r3, [pc, #28]	; (88b8 <z_reset_time_slice+0x20>)
    889c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    889e:	b904      	cbnz	r4, 88a2 <z_reset_time_slice+0xa>
}
    88a0:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    88a2:	f7fc ff29 	bl	56f8 <sys_clock_elapsed>
    88a6:	4404      	add	r4, r0
    88a8:	4b04      	ldr	r3, [pc, #16]	; (88bc <z_reset_time_slice+0x24>)
    88aa:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    88ac:	2100      	movs	r1, #0
    88ae:	4b02      	ldr	r3, [pc, #8]	; (88b8 <z_reset_time_slice+0x20>)
    88b0:	6818      	ldr	r0, [r3, #0]
    88b2:	f001 fcb3 	bl	a21c <z_set_timeout_expiry>
}
    88b6:	e7f3      	b.n	88a0 <z_reset_time_slice+0x8>
    88b8:	20001198 	.word	0x20001198
    88bc:	20001154 	.word	0x20001154

000088c0 <k_sched_time_slice_set>:
{
    88c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88c4:	4604      	mov	r4, r0
    88c6:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    88c8:	2700      	movs	r7, #0
	__asm__ volatile(
    88ca:	f04f 0320 	mov.w	r3, #32
    88ce:	f3ef 8611 	mrs	r6, BASEPRI
    88d2:	f383 8812 	msr	BASEPRI_MAX, r3
    88d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88da:	482a      	ldr	r0, [pc, #168]	; (8984 <k_sched_time_slice_set+0xc4>)
    88dc:	f7ff faa4 	bl	7e28 <z_spin_lock_valid>
    88e0:	b118      	cbz	r0, 88ea <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    88e2:	4828      	ldr	r0, [pc, #160]	; (8984 <k_sched_time_slice_set+0xc4>)
    88e4:	f7ff fac0 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    88e8:	e023      	b.n	8932 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88ea:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8988 <k_sched_time_slice_set+0xc8>
    88ee:	238e      	movs	r3, #142	; 0x8e
    88f0:	4642      	mov	r2, r8
    88f2:	4926      	ldr	r1, [pc, #152]	; (898c <k_sched_time_slice_set+0xcc>)
    88f4:	4826      	ldr	r0, [pc, #152]	; (8990 <k_sched_time_slice_set+0xd0>)
    88f6:	f002 fb36 	bl	af66 <assert_print>
    88fa:	4922      	ldr	r1, [pc, #136]	; (8984 <k_sched_time_slice_set+0xc4>)
    88fc:	4825      	ldr	r0, [pc, #148]	; (8994 <k_sched_time_slice_set+0xd4>)
    88fe:	f002 fb32 	bl	af66 <assert_print>
    8902:	218e      	movs	r1, #142	; 0x8e
    8904:	4640      	mov	r0, r8
    8906:	f002 fb27 	bl	af58 <assert_post_action>
    890a:	e7ea      	b.n	88e2 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    890c:	2802      	cmp	r0, #2
    890e:	bfb8      	it	lt
    8910:	2002      	movlt	r0, #2
    8912:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    8914:	4b20      	ldr	r3, [pc, #128]	; (8998 <k_sched_time_slice_set+0xd8>)
    8916:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    8918:	4b20      	ldr	r3, [pc, #128]	; (899c <k_sched_time_slice_set+0xdc>)
    891a:	6898      	ldr	r0, [r3, #8]
    891c:	f7ff ffbc 	bl	8898 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8920:	4818      	ldr	r0, [pc, #96]	; (8984 <k_sched_time_slice_set+0xc4>)
    8922:	f7ff fa91 	bl	7e48 <z_spin_unlock_valid>
    8926:	b1d0      	cbz	r0, 895e <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    8928:	f386 8811 	msr	BASEPRI, r6
    892c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8930:	2701      	movs	r7, #1
    8932:	bb27      	cbnz	r7, 897e <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    8934:	4b19      	ldr	r3, [pc, #100]	; (899c <k_sched_time_slice_set+0xdc>)
    8936:	2200      	movs	r2, #0
    8938:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    893a:	0c61      	lsrs	r1, r4, #17
    893c:	03e3      	lsls	r3, r4, #15
    893e:	f240 30e7 	movw	r0, #999	; 0x3e7
    8942:	1818      	adds	r0, r3, r0
    8944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8948:	f04f 0300 	mov.w	r3, #0
    894c:	f141 0100 	adc.w	r1, r1, #0
    8950:	f7f7 fdb8 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8954:	4b12      	ldr	r3, [pc, #72]	; (89a0 <k_sched_time_slice_set+0xe0>)
    8956:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8958:	2c00      	cmp	r4, #0
    895a:	dcd7      	bgt.n	890c <k_sched_time_slice_set+0x4c>
    895c:	e7da      	b.n	8914 <k_sched_time_slice_set+0x54>
    895e:	4f0a      	ldr	r7, [pc, #40]	; (8988 <k_sched_time_slice_set+0xc8>)
    8960:	23b9      	movs	r3, #185	; 0xb9
    8962:	463a      	mov	r2, r7
    8964:	490f      	ldr	r1, [pc, #60]	; (89a4 <k_sched_time_slice_set+0xe4>)
    8966:	480a      	ldr	r0, [pc, #40]	; (8990 <k_sched_time_slice_set+0xd0>)
    8968:	f002 fafd 	bl	af66 <assert_print>
    896c:	4905      	ldr	r1, [pc, #20]	; (8984 <k_sched_time_slice_set+0xc4>)
    896e:	480e      	ldr	r0, [pc, #56]	; (89a8 <k_sched_time_slice_set+0xe8>)
    8970:	f002 faf9 	bl	af66 <assert_print>
    8974:	21b9      	movs	r1, #185	; 0xb9
    8976:	4638      	mov	r0, r7
    8978:	f002 faee 	bl	af58 <assert_post_action>
    897c:	e7d4      	b.n	8928 <k_sched_time_slice_set+0x68>
}
    897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8982:	bf00      	nop
    8984:	20001190 	.word	0x20001190
    8988:	0000c76c 	.word	0x0000c76c
    898c:	0000c7cc 	.word	0x0000c7cc
    8990:	0000c5c0 	.word	0x0000c5c0
    8994:	0000c7e4 	.word	0x0000c7e4
    8998:	20001194 	.word	0x20001194
    899c:	20001154 	.word	0x20001154
    89a0:	20001198 	.word	0x20001198
    89a4:	0000c79c 	.word	0x0000c79c
    89a8:	0000c7b4 	.word	0x0000c7b4

000089ac <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    89ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89ae:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    89b0:	2500      	movs	r5, #0
	__asm__ volatile(
    89b2:	f04f 0320 	mov.w	r3, #32
    89b6:	f3ef 8611 	mrs	r6, BASEPRI
    89ba:	f383 8812 	msr	BASEPRI_MAX, r3
    89be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89c2:	4820      	ldr	r0, [pc, #128]	; (8a44 <z_unpend_thread_no_timeout+0x98>)
    89c4:	f7ff fa30 	bl	7e28 <z_spin_lock_valid>
    89c8:	b118      	cbz	r0, 89d2 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    89ca:	481e      	ldr	r0, [pc, #120]	; (8a44 <z_unpend_thread_no_timeout+0x98>)
    89cc:	f7ff fa4c 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    89d0:	e014      	b.n	89fc <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89d2:	4f1d      	ldr	r7, [pc, #116]	; (8a48 <z_unpend_thread_no_timeout+0x9c>)
    89d4:	238e      	movs	r3, #142	; 0x8e
    89d6:	463a      	mov	r2, r7
    89d8:	491c      	ldr	r1, [pc, #112]	; (8a4c <z_unpend_thread_no_timeout+0xa0>)
    89da:	481d      	ldr	r0, [pc, #116]	; (8a50 <z_unpend_thread_no_timeout+0xa4>)
    89dc:	f002 fac3 	bl	af66 <assert_print>
    89e0:	4918      	ldr	r1, [pc, #96]	; (8a44 <z_unpend_thread_no_timeout+0x98>)
    89e2:	481c      	ldr	r0, [pc, #112]	; (8a54 <z_unpend_thread_no_timeout+0xa8>)
    89e4:	f002 fabf 	bl	af66 <assert_print>
    89e8:	218e      	movs	r1, #142	; 0x8e
    89ea:	4638      	mov	r0, r7
    89ec:	f002 fab4 	bl	af58 <assert_post_action>
    89f0:	e7eb      	b.n	89ca <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    89f2:	f386 8811 	msr	BASEPRI, r6
    89f6:	f3bf 8f6f 	isb	sy
    89fa:	2501      	movs	r5, #1
    89fc:	bb05      	cbnz	r5, 8a40 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    89fe:	4620      	mov	r0, r4
    8a00:	f7ff ff20 	bl	8844 <pended_on_thread>
    8a04:	4621      	mov	r1, r4
    8a06:	f000 f8fb 	bl	8c00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8a0a:	7b63      	ldrb	r3, [r4, #13]
    8a0c:	f023 0302 	bic.w	r3, r3, #2
    8a10:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8a12:	2300      	movs	r3, #0
    8a14:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a16:	480b      	ldr	r0, [pc, #44]	; (8a44 <z_unpend_thread_no_timeout+0x98>)
    8a18:	f7ff fa16 	bl	7e48 <z_spin_unlock_valid>
    8a1c:	2800      	cmp	r0, #0
    8a1e:	d1e8      	bne.n	89f2 <z_unpend_thread_no_timeout+0x46>
    8a20:	4d09      	ldr	r5, [pc, #36]	; (8a48 <z_unpend_thread_no_timeout+0x9c>)
    8a22:	23b9      	movs	r3, #185	; 0xb9
    8a24:	462a      	mov	r2, r5
    8a26:	490c      	ldr	r1, [pc, #48]	; (8a58 <z_unpend_thread_no_timeout+0xac>)
    8a28:	4809      	ldr	r0, [pc, #36]	; (8a50 <z_unpend_thread_no_timeout+0xa4>)
    8a2a:	f002 fa9c 	bl	af66 <assert_print>
    8a2e:	4905      	ldr	r1, [pc, #20]	; (8a44 <z_unpend_thread_no_timeout+0x98>)
    8a30:	480a      	ldr	r0, [pc, #40]	; (8a5c <z_unpend_thread_no_timeout+0xb0>)
    8a32:	f002 fa98 	bl	af66 <assert_print>
    8a36:	21b9      	movs	r1, #185	; 0xb9
    8a38:	4628      	mov	r0, r5
    8a3a:	f002 fa8d 	bl	af58 <assert_post_action>
    8a3e:	e7d8      	b.n	89f2 <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    8a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a42:	bf00      	nop
    8a44:	20001190 	.word	0x20001190
    8a48:	0000c76c 	.word	0x0000c76c
    8a4c:	0000c7cc 	.word	0x0000c7cc
    8a50:	0000c5c0 	.word	0x0000c5c0
    8a54:	0000c7e4 	.word	0x0000c7e4
    8a58:	0000c79c 	.word	0x0000c79c
    8a5c:	0000c7b4 	.word	0x0000c7b4

00008a60 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8a60:	b570      	push	{r4, r5, r6, lr}
    8a62:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    8a64:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8a66:	b921      	cbnz	r1, 8a72 <z_reschedule+0x12>
    8a68:	f3ef 8305 	mrs	r3, IPSR
    8a6c:	b913      	cbnz	r3, 8a74 <z_reschedule+0x14>
    8a6e:	2101      	movs	r1, #1
    8a70:	e000      	b.n	8a74 <z_reschedule+0x14>
    8a72:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    8a74:	f011 0f01 	tst.w	r1, #1
    8a78:	d01c      	beq.n	8ab4 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    8a7a:	4b1b      	ldr	r3, [pc, #108]	; (8ae8 <z_reschedule+0x88>)
    8a7c:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    8a7e:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    8a80:	429a      	cmp	r2, r3
    8a82:	d017      	beq.n	8ab4 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a84:	4620      	mov	r0, r4
    8a86:	f7ff f9df 	bl	7e48 <z_spin_unlock_valid>
    8a8a:	b118      	cbz	r0, 8a94 <z_reschedule+0x34>
	ret = arch_swap(key);
    8a8c:	4628      	mov	r0, r5
    8a8e:	f7fa fc99 	bl	33c4 <arch_swap>
		z_swap(lock, key);
    8a92:	e017      	b.n	8ac4 <z_reschedule+0x64>
    8a94:	4e15      	ldr	r6, [pc, #84]	; (8aec <z_reschedule+0x8c>)
    8a96:	23d0      	movs	r3, #208	; 0xd0
    8a98:	4632      	mov	r2, r6
    8a9a:	4915      	ldr	r1, [pc, #84]	; (8af0 <z_reschedule+0x90>)
    8a9c:	4815      	ldr	r0, [pc, #84]	; (8af4 <z_reschedule+0x94>)
    8a9e:	f002 fa62 	bl	af66 <assert_print>
    8aa2:	4621      	mov	r1, r4
    8aa4:	4814      	ldr	r0, [pc, #80]	; (8af8 <z_reschedule+0x98>)
    8aa6:	f002 fa5e 	bl	af66 <assert_print>
    8aaa:	21d0      	movs	r1, #208	; 0xd0
    8aac:	4630      	mov	r0, r6
    8aae:	f002 fa53 	bl	af58 <assert_post_action>
    8ab2:	e7eb      	b.n	8a8c <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ab4:	4620      	mov	r0, r4
    8ab6:	f7ff f9c7 	bl	7e48 <z_spin_unlock_valid>
    8aba:	b120      	cbz	r0, 8ac6 <z_reschedule+0x66>
    8abc:	f385 8811 	msr	BASEPRI, r5
    8ac0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    8ac4:	bd70      	pop	{r4, r5, r6, pc}
    8ac6:	4e09      	ldr	r6, [pc, #36]	; (8aec <z_reschedule+0x8c>)
    8ac8:	23b9      	movs	r3, #185	; 0xb9
    8aca:	4632      	mov	r2, r6
    8acc:	4908      	ldr	r1, [pc, #32]	; (8af0 <z_reschedule+0x90>)
    8ace:	4809      	ldr	r0, [pc, #36]	; (8af4 <z_reschedule+0x94>)
    8ad0:	f002 fa49 	bl	af66 <assert_print>
    8ad4:	4621      	mov	r1, r4
    8ad6:	4808      	ldr	r0, [pc, #32]	; (8af8 <z_reschedule+0x98>)
    8ad8:	f002 fa45 	bl	af66 <assert_print>
    8adc:	21b9      	movs	r1, #185	; 0xb9
    8ade:	4630      	mov	r0, r6
    8ae0:	f002 fa3a 	bl	af58 <assert_post_action>
    8ae4:	e7ea      	b.n	8abc <z_reschedule+0x5c>
    8ae6:	bf00      	nop
    8ae8:	20001154 	.word	0x20001154
    8aec:	0000c76c 	.word	0x0000c76c
    8af0:	0000c79c 	.word	0x0000c79c
    8af4:	0000c5c0 	.word	0x0000c5c0
    8af8:	0000c7b4 	.word	0x0000c7b4

00008afc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8afc:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8afe:	2400      	movs	r4, #0
	__asm__ volatile(
    8b00:	f04f 0320 	mov.w	r3, #32
    8b04:	f3ef 8511 	mrs	r5, BASEPRI
    8b08:	f383 8812 	msr	BASEPRI_MAX, r3
    8b0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b10:	482f      	ldr	r0, [pc, #188]	; (8bd0 <k_sched_lock+0xd4>)
    8b12:	f7ff f989 	bl	7e28 <z_spin_lock_valid>
    8b16:	b118      	cbz	r0, 8b20 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    8b18:	482d      	ldr	r0, [pc, #180]	; (8bd0 <k_sched_lock+0xd4>)
    8b1a:	f7ff f9a5 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    8b1e:	e022      	b.n	8b66 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b20:	4e2c      	ldr	r6, [pc, #176]	; (8bd4 <k_sched_lock+0xd8>)
    8b22:	238e      	movs	r3, #142	; 0x8e
    8b24:	4632      	mov	r2, r6
    8b26:	492c      	ldr	r1, [pc, #176]	; (8bd8 <k_sched_lock+0xdc>)
    8b28:	482c      	ldr	r0, [pc, #176]	; (8bdc <k_sched_lock+0xe0>)
    8b2a:	f002 fa1c 	bl	af66 <assert_print>
    8b2e:	4928      	ldr	r1, [pc, #160]	; (8bd0 <k_sched_lock+0xd4>)
    8b30:	482b      	ldr	r0, [pc, #172]	; (8be0 <k_sched_lock+0xe4>)
    8b32:	f002 fa18 	bl	af66 <assert_print>
    8b36:	218e      	movs	r1, #142	; 0x8e
    8b38:	4630      	mov	r0, r6
    8b3a:	f002 fa0d 	bl	af58 <assert_post_action>
    8b3e:	e7eb      	b.n	8b18 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8b40:	4b28      	ldr	r3, [pc, #160]	; (8be4 <k_sched_lock+0xe8>)
    8b42:	689b      	ldr	r3, [r3, #8]
    8b44:	7bdb      	ldrb	r3, [r3, #15]
    8b46:	2b01      	cmp	r3, #1
    8b48:	d022      	beq.n	8b90 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    8b4a:	4b26      	ldr	r3, [pc, #152]	; (8be4 <k_sched_lock+0xe8>)
    8b4c:	689a      	ldr	r2, [r3, #8]
    8b4e:	7bd3      	ldrb	r3, [r2, #15]
    8b50:	3b01      	subs	r3, #1
    8b52:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b54:	481e      	ldr	r0, [pc, #120]	; (8bd0 <k_sched_lock+0xd4>)
    8b56:	f7ff f977 	bl	7e48 <z_spin_unlock_valid>
    8b5a:	b340      	cbz	r0, 8bae <k_sched_lock+0xb2>
	__asm__ volatile(
    8b5c:	f385 8811 	msr	BASEPRI, r5
    8b60:	f3bf 8f6f 	isb	sy
    8b64:	2401      	movs	r4, #1
    8b66:	2c00      	cmp	r4, #0
    8b68:	d131      	bne.n	8bce <k_sched_lock+0xd2>
    8b6a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d0e6      	beq.n	8b40 <k_sched_lock+0x44>
    8b72:	4c1d      	ldr	r4, [pc, #116]	; (8be8 <k_sched_lock+0xec>)
    8b74:	23fd      	movs	r3, #253	; 0xfd
    8b76:	4622      	mov	r2, r4
    8b78:	491c      	ldr	r1, [pc, #112]	; (8bec <k_sched_lock+0xf0>)
    8b7a:	4818      	ldr	r0, [pc, #96]	; (8bdc <k_sched_lock+0xe0>)
    8b7c:	f002 f9f3 	bl	af66 <assert_print>
    8b80:	481b      	ldr	r0, [pc, #108]	; (8bf0 <k_sched_lock+0xf4>)
    8b82:	f002 f9f0 	bl	af66 <assert_print>
    8b86:	21fd      	movs	r1, #253	; 0xfd
    8b88:	4620      	mov	r0, r4
    8b8a:	f002 f9e5 	bl	af58 <assert_post_action>
    8b8e:	e7d7      	b.n	8b40 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8b90:	4c15      	ldr	r4, [pc, #84]	; (8be8 <k_sched_lock+0xec>)
    8b92:	23fe      	movs	r3, #254	; 0xfe
    8b94:	4622      	mov	r2, r4
    8b96:	4917      	ldr	r1, [pc, #92]	; (8bf4 <k_sched_lock+0xf8>)
    8b98:	4810      	ldr	r0, [pc, #64]	; (8bdc <k_sched_lock+0xe0>)
    8b9a:	f002 f9e4 	bl	af66 <assert_print>
    8b9e:	4814      	ldr	r0, [pc, #80]	; (8bf0 <k_sched_lock+0xf4>)
    8ba0:	f002 f9e1 	bl	af66 <assert_print>
    8ba4:	21fe      	movs	r1, #254	; 0xfe
    8ba6:	4620      	mov	r0, r4
    8ba8:	f002 f9d6 	bl	af58 <assert_post_action>
    8bac:	e7cd      	b.n	8b4a <k_sched_lock+0x4e>
    8bae:	4c09      	ldr	r4, [pc, #36]	; (8bd4 <k_sched_lock+0xd8>)
    8bb0:	23b9      	movs	r3, #185	; 0xb9
    8bb2:	4622      	mov	r2, r4
    8bb4:	4910      	ldr	r1, [pc, #64]	; (8bf8 <k_sched_lock+0xfc>)
    8bb6:	4809      	ldr	r0, [pc, #36]	; (8bdc <k_sched_lock+0xe0>)
    8bb8:	f002 f9d5 	bl	af66 <assert_print>
    8bbc:	4904      	ldr	r1, [pc, #16]	; (8bd0 <k_sched_lock+0xd4>)
    8bbe:	480f      	ldr	r0, [pc, #60]	; (8bfc <k_sched_lock+0x100>)
    8bc0:	f002 f9d1 	bl	af66 <assert_print>
    8bc4:	21b9      	movs	r1, #185	; 0xb9
    8bc6:	4620      	mov	r0, r4
    8bc8:	f002 f9c6 	bl	af58 <assert_post_action>
    8bcc:	e7c6      	b.n	8b5c <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8bce:	bd70      	pop	{r4, r5, r6, pc}
    8bd0:	20001190 	.word	0x20001190
    8bd4:	0000c76c 	.word	0x0000c76c
    8bd8:	0000c7cc 	.word	0x0000c7cc
    8bdc:	0000c5c0 	.word	0x0000c5c0
    8be0:	0000c7e4 	.word	0x0000c7e4
    8be4:	20001154 	.word	0x20001154
    8be8:	0000df70 	.word	0x0000df70
    8bec:	0000de54 	.word	0x0000de54
    8bf0:	0000df9c 	.word	0x0000df9c
    8bf4:	0000dfa0 	.word	0x0000dfa0
    8bf8:	0000c79c 	.word	0x0000c79c
    8bfc:	0000c7b4 	.word	0x0000c7b4

00008c00 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    8c00:	b538      	push	{r3, r4, r5, lr}
    8c02:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8c04:	4b0c      	ldr	r3, [pc, #48]	; (8c38 <z_priq_dumb_remove+0x38>)
    8c06:	4299      	cmp	r1, r3
    8c08:	d007      	beq.n	8c1a <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8c0a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8c0c:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    8c0e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8c10:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8c12:	2300      	movs	r3, #0
    8c14:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8c16:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8c18:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8c1a:	4d08      	ldr	r5, [pc, #32]	; (8c3c <z_priq_dumb_remove+0x3c>)
    8c1c:	f240 433d 	movw	r3, #1085	; 0x43d
    8c20:	462a      	mov	r2, r5
    8c22:	4907      	ldr	r1, [pc, #28]	; (8c40 <z_priq_dumb_remove+0x40>)
    8c24:	4807      	ldr	r0, [pc, #28]	; (8c44 <z_priq_dumb_remove+0x44>)
    8c26:	f002 f99e 	bl	af66 <assert_print>
    8c2a:	f240 413d 	movw	r1, #1085	; 0x43d
    8c2e:	4628      	mov	r0, r5
    8c30:	f002 f992 	bl	af58 <assert_post_action>
    8c34:	e7e9      	b.n	8c0a <z_priq_dumb_remove+0xa>
    8c36:	bf00      	nop
    8c38:	20000490 	.word	0x20000490
    8c3c:	0000e044 	.word	0x0000e044
    8c40:	0000e080 	.word	0x0000e080
    8c44:	0000c5c0 	.word	0x0000c5c0

00008c48 <update_cache>:
{
    8c48:	b538      	push	{r3, r4, r5, lr}
    8c4a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    8c4c:	4819      	ldr	r0, [pc, #100]	; (8cb4 <update_cache+0x6c>)
    8c4e:	f003 f8e0 	bl	be12 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8c52:	4605      	mov	r5, r0
    8c54:	b188      	cbz	r0, 8c7a <update_cache+0x32>
	if (preempt_ok != 0) {
    8c56:	bb14      	cbnz	r4, 8c9e <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    8c58:	4b17      	ldr	r3, [pc, #92]	; (8cb8 <update_cache+0x70>)
    8c5a:	689b      	ldr	r3, [r3, #8]
    8c5c:	b183      	cbz	r3, 8c80 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    8c5e:	4b16      	ldr	r3, [pc, #88]	; (8cb8 <update_cache+0x70>)
    8c60:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    8c62:	7b5a      	ldrb	r2, [r3, #13]
    8c64:	f012 0f1f 	tst.w	r2, #31
    8c68:	d119      	bne.n	8c9e <update_cache+0x56>
	return node->next != NULL;
    8c6a:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8c6c:	b9ba      	cbnz	r2, 8c9e <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8c6e:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    8c70:	2a7f      	cmp	r2, #127	; 0x7f
    8c72:	d914      	bls.n	8c9e <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    8c74:	4a10      	ldr	r2, [pc, #64]	; (8cb8 <update_cache+0x70>)
    8c76:	61d3      	str	r3, [r2, #28]
    8c78:	e01a      	b.n	8cb0 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8c7a:	4b0f      	ldr	r3, [pc, #60]	; (8cb8 <update_cache+0x70>)
    8c7c:	68dd      	ldr	r5, [r3, #12]
    8c7e:	e7ea      	b.n	8c56 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    8c80:	4c0e      	ldr	r4, [pc, #56]	; (8cbc <update_cache+0x74>)
    8c82:	2389      	movs	r3, #137	; 0x89
    8c84:	4622      	mov	r2, r4
    8c86:	490e      	ldr	r1, [pc, #56]	; (8cc0 <update_cache+0x78>)
    8c88:	480e      	ldr	r0, [pc, #56]	; (8cc4 <update_cache+0x7c>)
    8c8a:	f002 f96c 	bl	af66 <assert_print>
    8c8e:	480e      	ldr	r0, [pc, #56]	; (8cc8 <update_cache+0x80>)
    8c90:	f002 f969 	bl	af66 <assert_print>
    8c94:	2189      	movs	r1, #137	; 0x89
    8c96:	4620      	mov	r0, r4
    8c98:	f002 f95e 	bl	af58 <assert_post_action>
    8c9c:	e7df      	b.n	8c5e <update_cache+0x16>
		if (thread != _current) {
    8c9e:	4b06      	ldr	r3, [pc, #24]	; (8cb8 <update_cache+0x70>)
    8ca0:	689b      	ldr	r3, [r3, #8]
    8ca2:	42ab      	cmp	r3, r5
    8ca4:	d002      	beq.n	8cac <update_cache+0x64>
			z_reset_time_slice(thread);
    8ca6:	4628      	mov	r0, r5
    8ca8:	f7ff fdf6 	bl	8898 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8cac:	4b02      	ldr	r3, [pc, #8]	; (8cb8 <update_cache+0x70>)
    8cae:	61dd      	str	r5, [r3, #28]
}
    8cb0:	bd38      	pop	{r3, r4, r5, pc}
    8cb2:	bf00      	nop
    8cb4:	20001174 	.word	0x20001174
    8cb8:	20001154 	.word	0x20001154
    8cbc:	0000e044 	.word	0x0000e044
    8cc0:	0000e0a4 	.word	0x0000e0a4
    8cc4:	0000c5c0 	.word	0x0000c5c0
    8cc8:	0000df9c 	.word	0x0000df9c

00008ccc <move_thread_to_end_of_prio_q>:
{
    8ccc:	b538      	push	{r3, r4, r5, lr}
    8cce:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    8cd0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8cd2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	db2b      	blt.n	8d32 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    8cda:	7b6b      	ldrb	r3, [r5, #13]
    8cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8ce0:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8ce2:	4b22      	ldr	r3, [pc, #136]	; (8d6c <move_thread_to_end_of_prio_q+0xa0>)
    8ce4:	429d      	cmp	r5, r3
    8ce6:	d02c      	beq.n	8d42 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    8ce8:	4b21      	ldr	r3, [pc, #132]	; (8d70 <move_thread_to_end_of_prio_q+0xa4>)
    8cea:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8cee:	429c      	cmp	r4, r3
    8cf0:	d039      	beq.n	8d66 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cf2:	b16c      	cbz	r4, 8d10 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8cf4:	4621      	mov	r1, r4
    8cf6:	4628      	mov	r0, r5
    8cf8:	f003 f86c 	bl	bdd4 <z_sched_prio_cmp>
    8cfc:	2800      	cmp	r0, #0
    8cfe:	dc2c      	bgt.n	8d5a <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8d00:	b134      	cbz	r4, 8d10 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    8d02:	4b1b      	ldr	r3, [pc, #108]	; (8d70 <move_thread_to_end_of_prio_q+0xa4>)
    8d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d06:	429c      	cmp	r4, r3
    8d08:	d002      	beq.n	8d10 <move_thread_to_end_of_prio_q+0x44>
    8d0a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d0c:	2c00      	cmp	r4, #0
    8d0e:	d1f0      	bne.n	8cf2 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    8d10:	4b17      	ldr	r3, [pc, #92]	; (8d70 <move_thread_to_end_of_prio_q+0xa4>)
    8d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8d14:	f103 0120 	add.w	r1, r3, #32
    8d18:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8d1a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8d1c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8d1e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    8d20:	4b13      	ldr	r3, [pc, #76]	; (8d70 <move_thread_to_end_of_prio_q+0xa4>)
    8d22:	6898      	ldr	r0, [r3, #8]
    8d24:	42a8      	cmp	r0, r5
    8d26:	bf14      	ite	ne
    8d28:	2000      	movne	r0, #0
    8d2a:	2001      	moveq	r0, #1
    8d2c:	f7ff ff8c 	bl	8c48 <update_cache>
}
    8d30:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8d36:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8d38:	4601      	mov	r1, r0
    8d3a:	480e      	ldr	r0, [pc, #56]	; (8d74 <move_thread_to_end_of_prio_q+0xa8>)
    8d3c:	f7ff ff60 	bl	8c00 <z_priq_dumb_remove>
}
    8d40:	e7cb      	b.n	8cda <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8d42:	4c0d      	ldr	r4, [pc, #52]	; (8d78 <move_thread_to_end_of_prio_q+0xac>)
    8d44:	23ba      	movs	r3, #186	; 0xba
    8d46:	4622      	mov	r2, r4
    8d48:	490c      	ldr	r1, [pc, #48]	; (8d7c <move_thread_to_end_of_prio_q+0xb0>)
    8d4a:	480d      	ldr	r0, [pc, #52]	; (8d80 <move_thread_to_end_of_prio_q+0xb4>)
    8d4c:	f002 f90b 	bl	af66 <assert_print>
    8d50:	21ba      	movs	r1, #186	; 0xba
    8d52:	4620      	mov	r0, r4
    8d54:	f002 f900 	bl	af58 <assert_post_action>
    8d58:	e7c6      	b.n	8ce8 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8d5a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8d5c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8d5e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8d60:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8d62:	6065      	str	r5, [r4, #4]
}
    8d64:	e7dc      	b.n	8d20 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d66:	2400      	movs	r4, #0
    8d68:	e7c3      	b.n	8cf2 <move_thread_to_end_of_prio_q+0x26>
    8d6a:	bf00      	nop
    8d6c:	20000490 	.word	0x20000490
    8d70:	20001154 	.word	0x20001154
    8d74:	20001174 	.word	0x20001174
    8d78:	0000e044 	.word	0x0000e044
    8d7c:	0000e080 	.word	0x0000e080
    8d80:	0000c5c0 	.word	0x0000c5c0

00008d84 <slice_expired_locked>:
{
    8d84:	b538      	push	{r3, r4, r5, lr}
    8d86:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    8d88:	4b07      	ldr	r3, [pc, #28]	; (8da8 <slice_expired_locked+0x24>)
    8d8a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    8d8c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    8d8e:	f013 0f1f 	tst.w	r3, #31
    8d92:	d004      	beq.n	8d9e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    8d94:	4628      	mov	r0, r5
    8d96:	f7ff fd7f 	bl	8898 <z_reset_time_slice>
}
    8d9a:	4620      	mov	r0, r4
    8d9c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    8d9e:	4628      	mov	r0, r5
    8da0:	f7ff ff94 	bl	8ccc <move_thread_to_end_of_prio_q>
    8da4:	e7f6      	b.n	8d94 <slice_expired_locked+0x10>
    8da6:	bf00      	nop
    8da8:	20001154 	.word	0x20001154

00008dac <z_time_slice>:
{
    8dac:	b570      	push	{r4, r5, r6, lr}
    8dae:	4604      	mov	r4, r0
	__asm__ volatile(
    8db0:	f04f 0320 	mov.w	r3, #32
    8db4:	f3ef 8511 	mrs	r5, BASEPRI
    8db8:	f383 8812 	msr	BASEPRI_MAX, r3
    8dbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8dc0:	4842      	ldr	r0, [pc, #264]	; (8ecc <z_time_slice+0x120>)
    8dc2:	f7ff f831 	bl	7e28 <z_spin_lock_valid>
    8dc6:	b310      	cbz	r0, 8e0e <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    8dc8:	4840      	ldr	r0, [pc, #256]	; (8ecc <z_time_slice+0x120>)
    8dca:	f7ff f84d 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    8dce:	462b      	mov	r3, r5
	if (pending_current == _current) {
    8dd0:	4a3f      	ldr	r2, [pc, #252]	; (8ed0 <z_time_slice+0x124>)
    8dd2:	6892      	ldr	r2, [r2, #8]
    8dd4:	493f      	ldr	r1, [pc, #252]	; (8ed4 <z_time_slice+0x128>)
    8dd6:	6809      	ldr	r1, [r1, #0]
    8dd8:	428a      	cmp	r2, r1
    8dda:	d028      	beq.n	8e2e <z_time_slice+0x82>
	pending_current = NULL;
    8ddc:	493d      	ldr	r1, [pc, #244]	; (8ed4 <z_time_slice+0x128>)
    8dde:	2000      	movs	r0, #0
    8de0:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    8de2:	493d      	ldr	r1, [pc, #244]	; (8ed8 <z_time_slice+0x12c>)
    8de4:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    8de6:	2900      	cmp	r1, #0
    8de8:	d052      	beq.n	8e90 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8dea:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    8dec:	297f      	cmp	r1, #127	; 0x7f
    8dee:	d83a      	bhi.n	8e66 <z_time_slice+0xba>
    8df0:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    8df2:	f011 0f1f 	tst.w	r1, #31
    8df6:	d140      	bne.n	8e7a <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8df8:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8dfc:	4937      	ldr	r1, [pc, #220]	; (8edc <z_time_slice+0x130>)
    8dfe:	6809      	ldr	r1, [r1, #0]
    8e00:	4288      	cmp	r0, r1
    8e02:	db3c      	blt.n	8e7e <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    8e04:	4936      	ldr	r1, [pc, #216]	; (8ee0 <z_time_slice+0x134>)
    8e06:	428a      	cmp	r2, r1
    8e08:	d03b      	beq.n	8e82 <z_time_slice+0xd6>
    8e0a:	2201      	movs	r2, #1
    8e0c:	e02c      	b.n	8e68 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e0e:	4e35      	ldr	r6, [pc, #212]	; (8ee4 <z_time_slice+0x138>)
    8e10:	238e      	movs	r3, #142	; 0x8e
    8e12:	4632      	mov	r2, r6
    8e14:	4934      	ldr	r1, [pc, #208]	; (8ee8 <z_time_slice+0x13c>)
    8e16:	4835      	ldr	r0, [pc, #212]	; (8eec <z_time_slice+0x140>)
    8e18:	f002 f8a5 	bl	af66 <assert_print>
    8e1c:	492b      	ldr	r1, [pc, #172]	; (8ecc <z_time_slice+0x120>)
    8e1e:	4834      	ldr	r0, [pc, #208]	; (8ef0 <z_time_slice+0x144>)
    8e20:	f002 f8a1 	bl	af66 <assert_print>
    8e24:	218e      	movs	r1, #142	; 0x8e
    8e26:	4630      	mov	r0, r6
    8e28:	f002 f896 	bl	af58 <assert_post_action>
    8e2c:	e7cc      	b.n	8dc8 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    8e2e:	4610      	mov	r0, r2
    8e30:	f7ff fd32 	bl	8898 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e34:	4825      	ldr	r0, [pc, #148]	; (8ecc <z_time_slice+0x120>)
    8e36:	f7ff f807 	bl	7e48 <z_spin_unlock_valid>
    8e3a:	b120      	cbz	r0, 8e46 <z_time_slice+0x9a>
	__asm__ volatile(
    8e3c:	f385 8811 	msr	BASEPRI, r5
    8e40:	f3bf 8f6f 	isb	sy
		return;
    8e44:	e030      	b.n	8ea8 <z_time_slice+0xfc>
    8e46:	4c27      	ldr	r4, [pc, #156]	; (8ee4 <z_time_slice+0x138>)
    8e48:	23b9      	movs	r3, #185	; 0xb9
    8e4a:	4622      	mov	r2, r4
    8e4c:	4929      	ldr	r1, [pc, #164]	; (8ef4 <z_time_slice+0x148>)
    8e4e:	4827      	ldr	r0, [pc, #156]	; (8eec <z_time_slice+0x140>)
    8e50:	f002 f889 	bl	af66 <assert_print>
    8e54:	491d      	ldr	r1, [pc, #116]	; (8ecc <z_time_slice+0x120>)
    8e56:	4828      	ldr	r0, [pc, #160]	; (8ef8 <z_time_slice+0x14c>)
    8e58:	f002 f885 	bl	af66 <assert_print>
    8e5c:	21b9      	movs	r1, #185	; 0xb9
    8e5e:	4620      	mov	r0, r4
    8e60:	f002 f87a 	bl	af58 <assert_post_action>
    8e64:	e7ea      	b.n	8e3c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    8e66:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    8e68:	b192      	cbz	r2, 8e90 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    8e6a:	4a19      	ldr	r2, [pc, #100]	; (8ed0 <z_time_slice+0x124>)
    8e6c:	6910      	ldr	r0, [r2, #16]
    8e6e:	42a0      	cmp	r0, r4
    8e70:	dd09      	ble.n	8e86 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    8e72:	1b00      	subs	r0, r0, r4
    8e74:	4a16      	ldr	r2, [pc, #88]	; (8ed0 <z_time_slice+0x124>)
    8e76:	6110      	str	r0, [r2, #16]
    8e78:	e00d      	b.n	8e96 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    8e7a:	2200      	movs	r2, #0
    8e7c:	e7f4      	b.n	8e68 <z_time_slice+0xbc>
    8e7e:	2200      	movs	r2, #0
    8e80:	e7f2      	b.n	8e68 <z_time_slice+0xbc>
    8e82:	2200      	movs	r2, #0
    8e84:	e7f0      	b.n	8e68 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    8e86:	4628      	mov	r0, r5
    8e88:	f7ff ff7c 	bl	8d84 <slice_expired_locked>
    8e8c:	4603      	mov	r3, r0
    8e8e:	e002      	b.n	8e96 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    8e90:	4a0f      	ldr	r2, [pc, #60]	; (8ed0 <z_time_slice+0x124>)
    8e92:	2100      	movs	r1, #0
    8e94:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    8e96:	461c      	mov	r4, r3
    8e98:	480c      	ldr	r0, [pc, #48]	; (8ecc <z_time_slice+0x120>)
    8e9a:	f7fe ffd5 	bl	7e48 <z_spin_unlock_valid>
    8e9e:	b120      	cbz	r0, 8eaa <z_time_slice+0xfe>
    8ea0:	f384 8811 	msr	BASEPRI, r4
    8ea4:	f3bf 8f6f 	isb	sy
}
    8ea8:	bd70      	pop	{r4, r5, r6, pc}
    8eaa:	4d0e      	ldr	r5, [pc, #56]	; (8ee4 <z_time_slice+0x138>)
    8eac:	23b9      	movs	r3, #185	; 0xb9
    8eae:	462a      	mov	r2, r5
    8eb0:	4910      	ldr	r1, [pc, #64]	; (8ef4 <z_time_slice+0x148>)
    8eb2:	480e      	ldr	r0, [pc, #56]	; (8eec <z_time_slice+0x140>)
    8eb4:	f002 f857 	bl	af66 <assert_print>
    8eb8:	4904      	ldr	r1, [pc, #16]	; (8ecc <z_time_slice+0x120>)
    8eba:	480f      	ldr	r0, [pc, #60]	; (8ef8 <z_time_slice+0x14c>)
    8ebc:	f002 f853 	bl	af66 <assert_print>
    8ec0:	21b9      	movs	r1, #185	; 0xb9
    8ec2:	4628      	mov	r0, r5
    8ec4:	f002 f848 	bl	af58 <assert_post_action>
    8ec8:	e7ea      	b.n	8ea0 <z_time_slice+0xf4>
    8eca:	bf00      	nop
    8ecc:	20001190 	.word	0x20001190
    8ed0:	20001154 	.word	0x20001154
    8ed4:	2000118c 	.word	0x2000118c
    8ed8:	20001198 	.word	0x20001198
    8edc:	20001194 	.word	0x20001194
    8ee0:	20000490 	.word	0x20000490
    8ee4:	0000c76c 	.word	0x0000c76c
    8ee8:	0000c7cc 	.word	0x0000c7cc
    8eec:	0000c5c0 	.word	0x0000c5c0
    8ef0:	0000c7e4 	.word	0x0000c7e4
    8ef4:	0000c79c 	.word	0x0000c79c
    8ef8:	0000c7b4 	.word	0x0000c7b4

00008efc <ready_thread>:
{
    8efc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    8efe:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8f00:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8f04:	2a00      	cmp	r2, #0
    8f06:	db30      	blt.n	8f6a <ready_thread+0x6e>
    8f08:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8f0a:	f013 0f1f 	tst.w	r3, #31
    8f0e:	d105      	bne.n	8f1c <ready_thread+0x20>
	return node->next != NULL;
    8f10:	6982      	ldr	r2, [r0, #24]
    8f12:	b10a      	cbz	r2, 8f18 <ready_thread+0x1c>
    8f14:	2200      	movs	r2, #0
    8f16:	e002      	b.n	8f1e <ready_thread+0x22>
    8f18:	2201      	movs	r2, #1
    8f1a:	e000      	b.n	8f1e <ready_thread+0x22>
    8f1c:	2200      	movs	r2, #0
    8f1e:	b322      	cbz	r2, 8f6a <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    8f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8f24:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8f26:	4b1b      	ldr	r3, [pc, #108]	; (8f94 <ready_thread+0x98>)
    8f28:	429c      	cmp	r4, r3
    8f2a:	d01f      	beq.n	8f6c <ready_thread+0x70>
	return list->head == list;
    8f2c:	4b1a      	ldr	r3, [pc, #104]	; (8f98 <ready_thread+0x9c>)
    8f2e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f32:	429d      	cmp	r5, r3
    8f34:	d02c      	beq.n	8f90 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8f36:	b16d      	cbz	r5, 8f54 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8f38:	4629      	mov	r1, r5
    8f3a:	4620      	mov	r0, r4
    8f3c:	f002 ff4a 	bl	bdd4 <z_sched_prio_cmp>
    8f40:	2800      	cmp	r0, #0
    8f42:	dc1f      	bgt.n	8f84 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8f44:	b135      	cbz	r5, 8f54 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    8f46:	4b14      	ldr	r3, [pc, #80]	; (8f98 <ready_thread+0x9c>)
    8f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f4a:	429d      	cmp	r5, r3
    8f4c:	d002      	beq.n	8f54 <ready_thread+0x58>
    8f4e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8f50:	2d00      	cmp	r5, #0
    8f52:	d1f0      	bne.n	8f36 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    8f54:	4b10      	ldr	r3, [pc, #64]	; (8f98 <ready_thread+0x9c>)
    8f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8f58:	f103 0120 	add.w	r1, r3, #32
    8f5c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8f5e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8f60:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8f62:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8f64:	2000      	movs	r0, #0
    8f66:	f7ff fe6f 	bl	8c48 <update_cache>
}
    8f6a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8f6c:	4d0b      	ldr	r5, [pc, #44]	; (8f9c <ready_thread+0xa0>)
    8f6e:	23ba      	movs	r3, #186	; 0xba
    8f70:	462a      	mov	r2, r5
    8f72:	490b      	ldr	r1, [pc, #44]	; (8fa0 <ready_thread+0xa4>)
    8f74:	480b      	ldr	r0, [pc, #44]	; (8fa4 <ready_thread+0xa8>)
    8f76:	f001 fff6 	bl	af66 <assert_print>
    8f7a:	21ba      	movs	r1, #186	; 0xba
    8f7c:	4628      	mov	r0, r5
    8f7e:	f001 ffeb 	bl	af58 <assert_post_action>
    8f82:	e7d3      	b.n	8f2c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    8f84:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8f86:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8f88:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8f8a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8f8c:	606c      	str	r4, [r5, #4]
}
    8f8e:	e7e9      	b.n	8f64 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8f90:	2500      	movs	r5, #0
    8f92:	e7d0      	b.n	8f36 <ready_thread+0x3a>
    8f94:	20000490 	.word	0x20000490
    8f98:	20001154 	.word	0x20001154
    8f9c:	0000e044 	.word	0x0000e044
    8fa0:	0000e080 	.word	0x0000e080
    8fa4:	0000c5c0 	.word	0x0000c5c0

00008fa8 <z_ready_thread>:
{
    8fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8faa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    8fac:	2400      	movs	r4, #0
	__asm__ volatile(
    8fae:	f04f 0320 	mov.w	r3, #32
    8fb2:	f3ef 8611 	mrs	r6, BASEPRI
    8fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    8fba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fbe:	481e      	ldr	r0, [pc, #120]	; (9038 <z_ready_thread+0x90>)
    8fc0:	f7fe ff32 	bl	7e28 <z_spin_lock_valid>
    8fc4:	b118      	cbz	r0, 8fce <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    8fc6:	481c      	ldr	r0, [pc, #112]	; (9038 <z_ready_thread+0x90>)
    8fc8:	f7fe ff4e 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    8fcc:	e018      	b.n	9000 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fce:	4f1b      	ldr	r7, [pc, #108]	; (903c <z_ready_thread+0x94>)
    8fd0:	238e      	movs	r3, #142	; 0x8e
    8fd2:	463a      	mov	r2, r7
    8fd4:	491a      	ldr	r1, [pc, #104]	; (9040 <z_ready_thread+0x98>)
    8fd6:	481b      	ldr	r0, [pc, #108]	; (9044 <z_ready_thread+0x9c>)
    8fd8:	f001 ffc5 	bl	af66 <assert_print>
    8fdc:	4916      	ldr	r1, [pc, #88]	; (9038 <z_ready_thread+0x90>)
    8fde:	481a      	ldr	r0, [pc, #104]	; (9048 <z_ready_thread+0xa0>)
    8fe0:	f001 ffc1 	bl	af66 <assert_print>
    8fe4:	218e      	movs	r1, #142	; 0x8e
    8fe6:	4638      	mov	r0, r7
    8fe8:	f001 ffb6 	bl	af58 <assert_post_action>
    8fec:	e7eb      	b.n	8fc6 <z_ready_thread+0x1e>
			ready_thread(thread);
    8fee:	4628      	mov	r0, r5
    8ff0:	f7ff ff84 	bl	8efc <ready_thread>
    8ff4:	e00a      	b.n	900c <z_ready_thread+0x64>
	__asm__ volatile(
    8ff6:	f386 8811 	msr	BASEPRI, r6
    8ffa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8ffe:	2401      	movs	r4, #1
    9000:	b9cc      	cbnz	r4, 9036 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    9002:	4628      	mov	r0, r5
    9004:	f002 fee4 	bl	bdd0 <thread_active_elsewhere>
    9008:	2800      	cmp	r0, #0
    900a:	d0f0      	beq.n	8fee <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    900c:	480a      	ldr	r0, [pc, #40]	; (9038 <z_ready_thread+0x90>)
    900e:	f7fe ff1b 	bl	7e48 <z_spin_unlock_valid>
    9012:	2800      	cmp	r0, #0
    9014:	d1ef      	bne.n	8ff6 <z_ready_thread+0x4e>
    9016:	4c09      	ldr	r4, [pc, #36]	; (903c <z_ready_thread+0x94>)
    9018:	23b9      	movs	r3, #185	; 0xb9
    901a:	4622      	mov	r2, r4
    901c:	490b      	ldr	r1, [pc, #44]	; (904c <z_ready_thread+0xa4>)
    901e:	4809      	ldr	r0, [pc, #36]	; (9044 <z_ready_thread+0x9c>)
    9020:	f001 ffa1 	bl	af66 <assert_print>
    9024:	4904      	ldr	r1, [pc, #16]	; (9038 <z_ready_thread+0x90>)
    9026:	480a      	ldr	r0, [pc, #40]	; (9050 <z_ready_thread+0xa8>)
    9028:	f001 ff9d 	bl	af66 <assert_print>
    902c:	21b9      	movs	r1, #185	; 0xb9
    902e:	4620      	mov	r0, r4
    9030:	f001 ff92 	bl	af58 <assert_post_action>
    9034:	e7df      	b.n	8ff6 <z_ready_thread+0x4e>
}
    9036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9038:	20001190 	.word	0x20001190
    903c:	0000c76c 	.word	0x0000c76c
    9040:	0000c7cc 	.word	0x0000c7cc
    9044:	0000c5c0 	.word	0x0000c5c0
    9048:	0000c7e4 	.word	0x0000c7e4
    904c:	0000c79c 	.word	0x0000c79c
    9050:	0000c7b4 	.word	0x0000c7b4

00009054 <z_sched_start>:
{
    9054:	b570      	push	{r4, r5, r6, lr}
    9056:	4604      	mov	r4, r0
	__asm__ volatile(
    9058:	f04f 0320 	mov.w	r3, #32
    905c:	f3ef 8511 	mrs	r5, BASEPRI
    9060:	f383 8812 	msr	BASEPRI_MAX, r3
    9064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9068:	481f      	ldr	r0, [pc, #124]	; (90e8 <z_sched_start+0x94>)
    906a:	f7fe fedd 	bl	7e28 <z_spin_lock_valid>
    906e:	b188      	cbz	r0, 9094 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    9070:	481d      	ldr	r0, [pc, #116]	; (90e8 <z_sched_start+0x94>)
    9072:	f7fe fef9 	bl	7e68 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9076:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    9078:	f013 0f04 	tst.w	r3, #4
    907c:	d01a      	beq.n	90b4 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    907e:	f023 0304 	bic.w	r3, r3, #4
    9082:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    9084:	4620      	mov	r0, r4
    9086:	f7ff ff39 	bl	8efc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    908a:	4629      	mov	r1, r5
    908c:	4816      	ldr	r0, [pc, #88]	; (90e8 <z_sched_start+0x94>)
    908e:	f7ff fce7 	bl	8a60 <z_reschedule>
}
    9092:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9094:	4e15      	ldr	r6, [pc, #84]	; (90ec <z_sched_start+0x98>)
    9096:	238e      	movs	r3, #142	; 0x8e
    9098:	4632      	mov	r2, r6
    909a:	4915      	ldr	r1, [pc, #84]	; (90f0 <z_sched_start+0x9c>)
    909c:	4815      	ldr	r0, [pc, #84]	; (90f4 <z_sched_start+0xa0>)
    909e:	f001 ff62 	bl	af66 <assert_print>
    90a2:	4911      	ldr	r1, [pc, #68]	; (90e8 <z_sched_start+0x94>)
    90a4:	4814      	ldr	r0, [pc, #80]	; (90f8 <z_sched_start+0xa4>)
    90a6:	f001 ff5e 	bl	af66 <assert_print>
    90aa:	218e      	movs	r1, #142	; 0x8e
    90ac:	4630      	mov	r0, r6
    90ae:	f001 ff53 	bl	af58 <assert_post_action>
    90b2:	e7dd      	b.n	9070 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90b4:	480c      	ldr	r0, [pc, #48]	; (90e8 <z_sched_start+0x94>)
    90b6:	f7fe fec7 	bl	7e48 <z_spin_unlock_valid>
    90ba:	b120      	cbz	r0, 90c6 <z_sched_start+0x72>
	__asm__ volatile(
    90bc:	f385 8811 	msr	BASEPRI, r5
    90c0:	f3bf 8f6f 	isb	sy
		return;
    90c4:	e7e5      	b.n	9092 <z_sched_start+0x3e>
    90c6:	4c09      	ldr	r4, [pc, #36]	; (90ec <z_sched_start+0x98>)
    90c8:	23b9      	movs	r3, #185	; 0xb9
    90ca:	4622      	mov	r2, r4
    90cc:	490b      	ldr	r1, [pc, #44]	; (90fc <z_sched_start+0xa8>)
    90ce:	4809      	ldr	r0, [pc, #36]	; (90f4 <z_sched_start+0xa0>)
    90d0:	f001 ff49 	bl	af66 <assert_print>
    90d4:	4904      	ldr	r1, [pc, #16]	; (90e8 <z_sched_start+0x94>)
    90d6:	480a      	ldr	r0, [pc, #40]	; (9100 <z_sched_start+0xac>)
    90d8:	f001 ff45 	bl	af66 <assert_print>
    90dc:	21b9      	movs	r1, #185	; 0xb9
    90de:	4620      	mov	r0, r4
    90e0:	f001 ff3a 	bl	af58 <assert_post_action>
    90e4:	e7ea      	b.n	90bc <z_sched_start+0x68>
    90e6:	bf00      	nop
    90e8:	20001190 	.word	0x20001190
    90ec:	0000c76c 	.word	0x0000c76c
    90f0:	0000c7cc 	.word	0x0000c7cc
    90f4:	0000c5c0 	.word	0x0000c5c0
    90f8:	0000c7e4 	.word	0x0000c7e4
    90fc:	0000c79c 	.word	0x0000c79c
    9100:	0000c7b4 	.word	0x0000c7b4

00009104 <z_thread_timeout>:
{
    9104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9108:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    910a:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    910e:	2500      	movs	r5, #0
	__asm__ volatile(
    9110:	f04f 0320 	mov.w	r3, #32
    9114:	f3ef 8711 	mrs	r7, BASEPRI
    9118:	f383 8812 	msr	BASEPRI_MAX, r3
    911c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9120:	482b      	ldr	r0, [pc, #172]	; (91d0 <z_thread_timeout+0xcc>)
    9122:	f7fe fe81 	bl	7e28 <z_spin_lock_valid>
    9126:	b118      	cbz	r0, 9130 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    9128:	4829      	ldr	r0, [pc, #164]	; (91d0 <z_thread_timeout+0xcc>)
    912a:	f7fe fe9d 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    912e:	e026      	b.n	917e <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9130:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 91d4 <z_thread_timeout+0xd0>
    9134:	238e      	movs	r3, #142	; 0x8e
    9136:	4642      	mov	r2, r8
    9138:	4927      	ldr	r1, [pc, #156]	; (91d8 <z_thread_timeout+0xd4>)
    913a:	4828      	ldr	r0, [pc, #160]	; (91dc <z_thread_timeout+0xd8>)
    913c:	f001 ff13 	bl	af66 <assert_print>
    9140:	4923      	ldr	r1, [pc, #140]	; (91d0 <z_thread_timeout+0xcc>)
    9142:	4827      	ldr	r0, [pc, #156]	; (91e0 <z_thread_timeout+0xdc>)
    9144:	f001 ff0f 	bl	af66 <assert_print>
    9148:	218e      	movs	r1, #142	; 0x8e
    914a:	4640      	mov	r0, r8
    914c:	f001 ff04 	bl	af58 <assert_post_action>
    9150:	e7ea      	b.n	9128 <z_thread_timeout+0x24>
    9152:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    9156:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    915a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    915e:	f023 0310 	bic.w	r3, r3, #16
    9162:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    9166:	4630      	mov	r0, r6
    9168:	f7ff fec8 	bl	8efc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    916c:	4818      	ldr	r0, [pc, #96]	; (91d0 <z_thread_timeout+0xcc>)
    916e:	f7fe fe6b 	bl	7e48 <z_spin_unlock_valid>
    9172:	b1d8      	cbz	r0, 91ac <z_thread_timeout+0xa8>
	__asm__ volatile(
    9174:	f387 8811 	msr	BASEPRI, r7
    9178:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    917c:	2501      	movs	r5, #1
    917e:	bb2d      	cbnz	r5, 91cc <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    9180:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    9184:	f013 0f28 	tst.w	r3, #40	; 0x28
    9188:	d1f0      	bne.n	916c <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    918a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    918e:	2b00      	cmp	r3, #0
    9190:	d0df      	beq.n	9152 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9192:	4630      	mov	r0, r6
    9194:	f7ff fb56 	bl	8844 <pended_on_thread>
    9198:	4631      	mov	r1, r6
    919a:	f7ff fd31 	bl	8c00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    919e:	7b73      	ldrb	r3, [r6, #13]
    91a0:	f023 0302 	bic.w	r3, r3, #2
    91a4:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    91a6:	2300      	movs	r3, #0
    91a8:	60b3      	str	r3, [r6, #8]
}
    91aa:	e7d2      	b.n	9152 <z_thread_timeout+0x4e>
    91ac:	4d09      	ldr	r5, [pc, #36]	; (91d4 <z_thread_timeout+0xd0>)
    91ae:	23b9      	movs	r3, #185	; 0xb9
    91b0:	462a      	mov	r2, r5
    91b2:	490c      	ldr	r1, [pc, #48]	; (91e4 <z_thread_timeout+0xe0>)
    91b4:	4809      	ldr	r0, [pc, #36]	; (91dc <z_thread_timeout+0xd8>)
    91b6:	f001 fed6 	bl	af66 <assert_print>
    91ba:	4905      	ldr	r1, [pc, #20]	; (91d0 <z_thread_timeout+0xcc>)
    91bc:	480a      	ldr	r0, [pc, #40]	; (91e8 <z_thread_timeout+0xe4>)
    91be:	f001 fed2 	bl	af66 <assert_print>
    91c2:	21b9      	movs	r1, #185	; 0xb9
    91c4:	4628      	mov	r0, r5
    91c6:	f001 fec7 	bl	af58 <assert_post_action>
    91ca:	e7d3      	b.n	9174 <z_thread_timeout+0x70>
}
    91cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91d0:	20001190 	.word	0x20001190
    91d4:	0000c76c 	.word	0x0000c76c
    91d8:	0000c7cc 	.word	0x0000c7cc
    91dc:	0000c5c0 	.word	0x0000c5c0
    91e0:	0000c7e4 	.word	0x0000c7e4
    91e4:	0000c79c 	.word	0x0000c79c
    91e8:	0000c7b4 	.word	0x0000c7b4

000091ec <unready_thread>:
{
    91ec:	b510      	push	{r4, lr}
    91ee:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    91f0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    91f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    91f6:	2b00      	cmp	r3, #0
    91f8:	db08      	blt.n	920c <unready_thread+0x20>
	update_cache(thread == _current);
    91fa:	4b08      	ldr	r3, [pc, #32]	; (921c <unready_thread+0x30>)
    91fc:	6898      	ldr	r0, [r3, #8]
    91fe:	42a0      	cmp	r0, r4
    9200:	bf14      	ite	ne
    9202:	2000      	movne	r0, #0
    9204:	2001      	moveq	r0, #1
    9206:	f7ff fd1f 	bl	8c48 <update_cache>
}
    920a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    920c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9210:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9212:	4601      	mov	r1, r0
    9214:	4802      	ldr	r0, [pc, #8]	; (9220 <unready_thread+0x34>)
    9216:	f7ff fcf3 	bl	8c00 <z_priq_dumb_remove>
}
    921a:	e7ee      	b.n	91fa <unready_thread+0xe>
    921c:	20001154 	.word	0x20001154
    9220:	20001174 	.word	0x20001174

00009224 <add_to_waitq_locked>:
{
    9224:	b570      	push	{r4, r5, r6, lr}
    9226:	4605      	mov	r5, r0
    9228:	460e      	mov	r6, r1
	unready_thread(thread);
    922a:	f7ff ffdf 	bl	91ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    922e:	7b6b      	ldrb	r3, [r5, #13]
    9230:	f043 0302 	orr.w	r3, r3, #2
    9234:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    9236:	b1ce      	cbz	r6, 926c <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    9238:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    923a:	4b17      	ldr	r3, [pc, #92]	; (9298 <add_to_waitq_locked+0x74>)
    923c:	429d      	cmp	r5, r3
    923e:	d016      	beq.n	926e <add_to_waitq_locked+0x4a>
	return list->head == list;
    9240:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9242:	42a6      	cmp	r6, r4
    9244:	d025      	beq.n	9292 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9246:	b164      	cbz	r4, 9262 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9248:	4621      	mov	r1, r4
    924a:	4628      	mov	r0, r5
    924c:	f002 fdc2 	bl	bdd4 <z_sched_prio_cmp>
    9250:	2800      	cmp	r0, #0
    9252:	dc18      	bgt.n	9286 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9254:	b12c      	cbz	r4, 9262 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    9256:	6873      	ldr	r3, [r6, #4]
    9258:	429c      	cmp	r4, r3
    925a:	d002      	beq.n	9262 <add_to_waitq_locked+0x3e>
    925c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    925e:	2c00      	cmp	r4, #0
    9260:	d1f1      	bne.n	9246 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    9262:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    9264:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    9266:	606b      	str	r3, [r5, #4]
	tail->next = node;
    9268:	601d      	str	r5, [r3, #0]
	list->tail = node;
    926a:	6075      	str	r5, [r6, #4]
}
    926c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    926e:	4c0b      	ldr	r4, [pc, #44]	; (929c <add_to_waitq_locked+0x78>)
    9270:	23ba      	movs	r3, #186	; 0xba
    9272:	4622      	mov	r2, r4
    9274:	490a      	ldr	r1, [pc, #40]	; (92a0 <add_to_waitq_locked+0x7c>)
    9276:	480b      	ldr	r0, [pc, #44]	; (92a4 <add_to_waitq_locked+0x80>)
    9278:	f001 fe75 	bl	af66 <assert_print>
    927c:	21ba      	movs	r1, #186	; 0xba
    927e:	4620      	mov	r0, r4
    9280:	f001 fe6a 	bl	af58 <assert_post_action>
    9284:	e7dc      	b.n	9240 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9286:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9288:	606b      	str	r3, [r5, #4]
	node->next = successor;
    928a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    928c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    928e:	6065      	str	r5, [r4, #4]
}
    9290:	e7ec      	b.n	926c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9292:	2400      	movs	r4, #0
    9294:	e7d7      	b.n	9246 <add_to_waitq_locked+0x22>
    9296:	bf00      	nop
    9298:	20000490 	.word	0x20000490
    929c:	0000e044 	.word	0x0000e044
    92a0:	0000e080 	.word	0x0000e080
    92a4:	0000c5c0 	.word	0x0000c5c0

000092a8 <pend>:
{
    92a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92ac:	4605      	mov	r5, r0
    92ae:	460e      	mov	r6, r1
    92b0:	4691      	mov	r9, r2
    92b2:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    92b4:	2400      	movs	r4, #0
	__asm__ volatile(
    92b6:	f04f 0320 	mov.w	r3, #32
    92ba:	f3ef 8711 	mrs	r7, BASEPRI
    92be:	f383 8812 	msr	BASEPRI_MAX, r3
    92c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92c6:	481f      	ldr	r0, [pc, #124]	; (9344 <pend+0x9c>)
    92c8:	f7fe fdae 	bl	7e28 <z_spin_lock_valid>
    92cc:	b118      	cbz	r0, 92d6 <pend+0x2e>
	z_spin_lock_set_owner(l);
    92ce:	481d      	ldr	r0, [pc, #116]	; (9344 <pend+0x9c>)
    92d0:	f7fe fdca 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    92d4:	e015      	b.n	9302 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92d6:	f8df a070 	ldr.w	sl, [pc, #112]	; 9348 <pend+0xa0>
    92da:	238e      	movs	r3, #142	; 0x8e
    92dc:	4652      	mov	r2, sl
    92de:	491b      	ldr	r1, [pc, #108]	; (934c <pend+0xa4>)
    92e0:	481b      	ldr	r0, [pc, #108]	; (9350 <pend+0xa8>)
    92e2:	f001 fe40 	bl	af66 <assert_print>
    92e6:	4917      	ldr	r1, [pc, #92]	; (9344 <pend+0x9c>)
    92e8:	481a      	ldr	r0, [pc, #104]	; (9354 <pend+0xac>)
    92ea:	f001 fe3c 	bl	af66 <assert_print>
    92ee:	218e      	movs	r1, #142	; 0x8e
    92f0:	4650      	mov	r0, sl
    92f2:	f001 fe31 	bl	af58 <assert_post_action>
    92f6:	e7ea      	b.n	92ce <pend+0x26>
	__asm__ volatile(
    92f8:	f387 8811 	msr	BASEPRI, r7
    92fc:	f3bf 8f6f 	isb	sy
    9300:	2401      	movs	r4, #1
    9302:	b9c4      	cbnz	r4, 9336 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    9304:	4631      	mov	r1, r6
    9306:	4628      	mov	r0, r5
    9308:	f7ff ff8c 	bl	9224 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    930c:	480d      	ldr	r0, [pc, #52]	; (9344 <pend+0x9c>)
    930e:	f7fe fd9b 	bl	7e48 <z_spin_unlock_valid>
    9312:	2800      	cmp	r0, #0
    9314:	d1f0      	bne.n	92f8 <pend+0x50>
    9316:	4c0c      	ldr	r4, [pc, #48]	; (9348 <pend+0xa0>)
    9318:	23b9      	movs	r3, #185	; 0xb9
    931a:	4622      	mov	r2, r4
    931c:	490e      	ldr	r1, [pc, #56]	; (9358 <pend+0xb0>)
    931e:	480c      	ldr	r0, [pc, #48]	; (9350 <pend+0xa8>)
    9320:	f001 fe21 	bl	af66 <assert_print>
    9324:	4907      	ldr	r1, [pc, #28]	; (9344 <pend+0x9c>)
    9326:	480d      	ldr	r0, [pc, #52]	; (935c <pend+0xb4>)
    9328:	f001 fe1d 	bl	af66 <assert_print>
    932c:	21b9      	movs	r1, #185	; 0xb9
    932e:	4620      	mov	r0, r4
    9330:	f001 fe12 	bl	af58 <assert_post_action>
    9334:	e7e0      	b.n	92f8 <pend+0x50>
	add_thread_timeout(thread, timeout);
    9336:	464a      	mov	r2, r9
    9338:	4643      	mov	r3, r8
    933a:	4628      	mov	r0, r5
    933c:	f7ff fa9c 	bl	8878 <add_thread_timeout>
}
    9340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9344:	20001190 	.word	0x20001190
    9348:	0000c76c 	.word	0x0000c76c
    934c:	0000c7cc 	.word	0x0000c7cc
    9350:	0000c5c0 	.word	0x0000c5c0
    9354:	0000c7e4 	.word	0x0000c7e4
    9358:	0000c79c 	.word	0x0000c79c
    935c:	0000c7b4 	.word	0x0000c7b4

00009360 <z_pend_curr>:
{
    9360:	b570      	push	{r4, r5, r6, lr}
    9362:	4604      	mov	r4, r0
    9364:	460d      	mov	r5, r1
    9366:	4611      	mov	r1, r2
	pending_current = _current;
    9368:	4b0f      	ldr	r3, [pc, #60]	; (93a8 <z_pend_curr+0x48>)
    936a:	6898      	ldr	r0, [r3, #8]
    936c:	4b0f      	ldr	r3, [pc, #60]	; (93ac <z_pend_curr+0x4c>)
    936e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    9370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9374:	f7ff ff98 	bl	92a8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9378:	4620      	mov	r0, r4
    937a:	f7fe fd65 	bl	7e48 <z_spin_unlock_valid>
    937e:	b118      	cbz	r0, 9388 <z_pend_curr+0x28>
    9380:	4628      	mov	r0, r5
    9382:	f7fa f81f 	bl	33c4 <arch_swap>
}
    9386:	bd70      	pop	{r4, r5, r6, pc}
    9388:	4e09      	ldr	r6, [pc, #36]	; (93b0 <z_pend_curr+0x50>)
    938a:	23d0      	movs	r3, #208	; 0xd0
    938c:	4632      	mov	r2, r6
    938e:	4909      	ldr	r1, [pc, #36]	; (93b4 <z_pend_curr+0x54>)
    9390:	4809      	ldr	r0, [pc, #36]	; (93b8 <z_pend_curr+0x58>)
    9392:	f001 fde8 	bl	af66 <assert_print>
    9396:	4621      	mov	r1, r4
    9398:	4808      	ldr	r0, [pc, #32]	; (93bc <z_pend_curr+0x5c>)
    939a:	f001 fde4 	bl	af66 <assert_print>
    939e:	21d0      	movs	r1, #208	; 0xd0
    93a0:	4630      	mov	r0, r6
    93a2:	f001 fdd9 	bl	af58 <assert_post_action>
    93a6:	e7eb      	b.n	9380 <z_pend_curr+0x20>
    93a8:	20001154 	.word	0x20001154
    93ac:	2000118c 	.word	0x2000118c
    93b0:	0000c76c 	.word	0x0000c76c
    93b4:	0000c79c 	.word	0x0000c79c
    93b8:	0000c5c0 	.word	0x0000c5c0
    93bc:	0000c7b4 	.word	0x0000c7b4

000093c0 <z_set_prio>:
{
    93c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93c4:	4604      	mov	r4, r0
    93c6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    93c8:	2500      	movs	r5, #0
	__asm__ volatile(
    93ca:	f04f 0320 	mov.w	r3, #32
    93ce:	f3ef 8811 	mrs	r8, BASEPRI
    93d2:	f383 8812 	msr	BASEPRI_MAX, r3
    93d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93da:	4844      	ldr	r0, [pc, #272]	; (94ec <z_set_prio+0x12c>)
    93dc:	f7fe fd24 	bl	7e28 <z_spin_lock_valid>
    93e0:	b120      	cbz	r0, 93ec <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    93e2:	4842      	ldr	r0, [pc, #264]	; (94ec <z_set_prio+0x12c>)
    93e4:	f7fe fd40 	bl	7e68 <z_spin_lock_set_owner>
	bool need_sched = 0;
    93e8:	2700      	movs	r7, #0
	return k;
    93ea:	e01d      	b.n	9428 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ec:	4f40      	ldr	r7, [pc, #256]	; (94f0 <z_set_prio+0x130>)
    93ee:	238e      	movs	r3, #142	; 0x8e
    93f0:	463a      	mov	r2, r7
    93f2:	4940      	ldr	r1, [pc, #256]	; (94f4 <z_set_prio+0x134>)
    93f4:	4840      	ldr	r0, [pc, #256]	; (94f8 <z_set_prio+0x138>)
    93f6:	f001 fdb6 	bl	af66 <assert_print>
    93fa:	493c      	ldr	r1, [pc, #240]	; (94ec <z_set_prio+0x12c>)
    93fc:	483f      	ldr	r0, [pc, #252]	; (94fc <z_set_prio+0x13c>)
    93fe:	f001 fdb2 	bl	af66 <assert_print>
    9402:	218e      	movs	r1, #142	; 0x8e
    9404:	4638      	mov	r0, r7
    9406:	f001 fda7 	bl	af58 <assert_post_action>
    940a:	e7ea      	b.n	93e2 <z_set_prio+0x22>
		if (need_sched) {
    940c:	f013 0701 	ands.w	r7, r3, #1
    9410:	d116      	bne.n	9440 <z_set_prio+0x80>
			thread->base.prio = prio;
    9412:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9414:	4835      	ldr	r0, [pc, #212]	; (94ec <z_set_prio+0x12c>)
    9416:	f7fe fd17 	bl	7e48 <z_spin_unlock_valid>
    941a:	2800      	cmp	r0, #0
    941c:	d053      	beq.n	94c6 <z_set_prio+0x106>
	__asm__ volatile(
    941e:	f388 8811 	msr	BASEPRI, r8
    9422:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9426:	2501      	movs	r5, #1
    9428:	462b      	mov	r3, r5
    942a:	2d00      	cmp	r5, #0
    942c:	d15b      	bne.n	94e6 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    942e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9430:	f012 0f1f 	tst.w	r2, #31
    9434:	d1ea      	bne.n	940c <z_set_prio+0x4c>
	return node->next != NULL;
    9436:	69a1      	ldr	r1, [r4, #24]
    9438:	2900      	cmp	r1, #0
    943a:	d1e7      	bne.n	940c <z_set_prio+0x4c>
    943c:	2301      	movs	r3, #1
    943e:	e7e5      	b.n	940c <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9444:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9446:	4621      	mov	r1, r4
    9448:	482d      	ldr	r0, [pc, #180]	; (9500 <z_set_prio+0x140>)
    944a:	f7ff fbd9 	bl	8c00 <z_priq_dumb_remove>
				thread->base.prio = prio;
    944e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9450:	7b63      	ldrb	r3, [r4, #13]
    9452:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9456:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9458:	4b2a      	ldr	r3, [pc, #168]	; (9504 <z_set_prio+0x144>)
    945a:	429c      	cmp	r4, r3
    945c:	d01f      	beq.n	949e <z_set_prio+0xde>
	return list->head == list;
    945e:	4b2a      	ldr	r3, [pc, #168]	; (9508 <z_set_prio+0x148>)
    9460:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9464:	429d      	cmp	r5, r3
    9466:	d02c      	beq.n	94c2 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9468:	b16d      	cbz	r5, 9486 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    946a:	4629      	mov	r1, r5
    946c:	4620      	mov	r0, r4
    946e:	f002 fcb1 	bl	bdd4 <z_sched_prio_cmp>
    9472:	2800      	cmp	r0, #0
    9474:	dc1f      	bgt.n	94b6 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9476:	b135      	cbz	r5, 9486 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    9478:	4b23      	ldr	r3, [pc, #140]	; (9508 <z_set_prio+0x148>)
    947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    947c:	429d      	cmp	r5, r3
    947e:	d002      	beq.n	9486 <z_set_prio+0xc6>
    9480:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9482:	2d00      	cmp	r5, #0
    9484:	d1f0      	bne.n	9468 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    9486:	4b20      	ldr	r3, [pc, #128]	; (9508 <z_set_prio+0x148>)
    9488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    948a:	f103 0120 	add.w	r1, r3, #32
    948e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    9490:	6062      	str	r2, [r4, #4]
	tail->next = node;
    9492:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9494:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    9496:	2001      	movs	r0, #1
    9498:	f7ff fbd6 	bl	8c48 <update_cache>
    949c:	e7ba      	b.n	9414 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    949e:	4d1b      	ldr	r5, [pc, #108]	; (950c <z_set_prio+0x14c>)
    94a0:	23ba      	movs	r3, #186	; 0xba
    94a2:	462a      	mov	r2, r5
    94a4:	491a      	ldr	r1, [pc, #104]	; (9510 <z_set_prio+0x150>)
    94a6:	4814      	ldr	r0, [pc, #80]	; (94f8 <z_set_prio+0x138>)
    94a8:	f001 fd5d 	bl	af66 <assert_print>
    94ac:	21ba      	movs	r1, #186	; 0xba
    94ae:	4628      	mov	r0, r5
    94b0:	f001 fd52 	bl	af58 <assert_post_action>
    94b4:	e7d3      	b.n	945e <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    94b6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    94b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    94ba:	6025      	str	r5, [r4, #0]
	prev->next = node;
    94bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    94be:	606c      	str	r4, [r5, #4]
}
    94c0:	e7e9      	b.n	9496 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    94c2:	2500      	movs	r5, #0
    94c4:	e7d0      	b.n	9468 <z_set_prio+0xa8>
    94c6:	4d0a      	ldr	r5, [pc, #40]	; (94f0 <z_set_prio+0x130>)
    94c8:	23b9      	movs	r3, #185	; 0xb9
    94ca:	462a      	mov	r2, r5
    94cc:	4911      	ldr	r1, [pc, #68]	; (9514 <z_set_prio+0x154>)
    94ce:	480a      	ldr	r0, [pc, #40]	; (94f8 <z_set_prio+0x138>)
    94d0:	f001 fd49 	bl	af66 <assert_print>
    94d4:	4905      	ldr	r1, [pc, #20]	; (94ec <z_set_prio+0x12c>)
    94d6:	4810      	ldr	r0, [pc, #64]	; (9518 <z_set_prio+0x158>)
    94d8:	f001 fd45 	bl	af66 <assert_print>
    94dc:	21b9      	movs	r1, #185	; 0xb9
    94de:	4628      	mov	r0, r5
    94e0:	f001 fd3a 	bl	af58 <assert_post_action>
    94e4:	e79b      	b.n	941e <z_set_prio+0x5e>
}
    94e6:	4638      	mov	r0, r7
    94e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94ec:	20001190 	.word	0x20001190
    94f0:	0000c76c 	.word	0x0000c76c
    94f4:	0000c7cc 	.word	0x0000c7cc
    94f8:	0000c5c0 	.word	0x0000c5c0
    94fc:	0000c7e4 	.word	0x0000c7e4
    9500:	20001174 	.word	0x20001174
    9504:	20000490 	.word	0x20000490
    9508:	20001154 	.word	0x20001154
    950c:	0000e044 	.word	0x0000e044
    9510:	0000e080 	.word	0x0000e080
    9514:	0000c79c 	.word	0x0000c79c
    9518:	0000c7b4 	.word	0x0000c7b4

0000951c <z_impl_k_thread_suspend>:
{
    951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    951e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9520:	3018      	adds	r0, #24
    9522:	f000 fdcf 	bl	a0c4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    9526:	2500      	movs	r5, #0
	__asm__ volatile(
    9528:	f04f 0320 	mov.w	r3, #32
    952c:	f3ef 8611 	mrs	r6, BASEPRI
    9530:	f383 8812 	msr	BASEPRI_MAX, r3
    9534:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9538:	482d      	ldr	r0, [pc, #180]	; (95f0 <z_impl_k_thread_suspend+0xd4>)
    953a:	f7fe fc75 	bl	7e28 <z_spin_lock_valid>
    953e:	b118      	cbz	r0, 9548 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    9540:	482b      	ldr	r0, [pc, #172]	; (95f0 <z_impl_k_thread_suspend+0xd4>)
    9542:	f7fe fc91 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    9546:	e01c      	b.n	9582 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9548:	4f2a      	ldr	r7, [pc, #168]	; (95f4 <z_impl_k_thread_suspend+0xd8>)
    954a:	238e      	movs	r3, #142	; 0x8e
    954c:	463a      	mov	r2, r7
    954e:	492a      	ldr	r1, [pc, #168]	; (95f8 <z_impl_k_thread_suspend+0xdc>)
    9550:	482a      	ldr	r0, [pc, #168]	; (95fc <z_impl_k_thread_suspend+0xe0>)
    9552:	f001 fd08 	bl	af66 <assert_print>
    9556:	4926      	ldr	r1, [pc, #152]	; (95f0 <z_impl_k_thread_suspend+0xd4>)
    9558:	4829      	ldr	r0, [pc, #164]	; (9600 <z_impl_k_thread_suspend+0xe4>)
    955a:	f001 fd04 	bl	af66 <assert_print>
    955e:	218e      	movs	r1, #142	; 0x8e
    9560:	4638      	mov	r0, r7
    9562:	f001 fcf9 	bl	af58 <assert_post_action>
    9566:	e7eb      	b.n	9540 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    956c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    956e:	4621      	mov	r1, r4
    9570:	4824      	ldr	r0, [pc, #144]	; (9604 <z_impl_k_thread_suspend+0xe8>)
    9572:	f7ff fb45 	bl	8c00 <z_priq_dumb_remove>
}
    9576:	e00a      	b.n	958e <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    9578:	f386 8811 	msr	BASEPRI, r6
    957c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9580:	2501      	movs	r5, #1
    9582:	bb2d      	cbnz	r5, 95d0 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    9584:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    9586:	f994 300d 	ldrsb.w	r3, [r4, #13]
    958a:	2b00      	cmp	r3, #0
    958c:	dbec      	blt.n	9568 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    958e:	7b63      	ldrb	r3, [r4, #13]
    9590:	f043 0310 	orr.w	r3, r3, #16
    9594:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    9596:	4b1c      	ldr	r3, [pc, #112]	; (9608 <z_impl_k_thread_suspend+0xec>)
    9598:	6898      	ldr	r0, [r3, #8]
    959a:	42a0      	cmp	r0, r4
    959c:	bf14      	ite	ne
    959e:	2000      	movne	r0, #0
    95a0:	2001      	moveq	r0, #1
    95a2:	f7ff fb51 	bl	8c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95a6:	4812      	ldr	r0, [pc, #72]	; (95f0 <z_impl_k_thread_suspend+0xd4>)
    95a8:	f7fe fc4e 	bl	7e48 <z_spin_unlock_valid>
    95ac:	2800      	cmp	r0, #0
    95ae:	d1e3      	bne.n	9578 <z_impl_k_thread_suspend+0x5c>
    95b0:	4d10      	ldr	r5, [pc, #64]	; (95f4 <z_impl_k_thread_suspend+0xd8>)
    95b2:	23b9      	movs	r3, #185	; 0xb9
    95b4:	462a      	mov	r2, r5
    95b6:	4915      	ldr	r1, [pc, #84]	; (960c <z_impl_k_thread_suspend+0xf0>)
    95b8:	4810      	ldr	r0, [pc, #64]	; (95fc <z_impl_k_thread_suspend+0xe0>)
    95ba:	f001 fcd4 	bl	af66 <assert_print>
    95be:	490c      	ldr	r1, [pc, #48]	; (95f0 <z_impl_k_thread_suspend+0xd4>)
    95c0:	4813      	ldr	r0, [pc, #76]	; (9610 <z_impl_k_thread_suspend+0xf4>)
    95c2:	f001 fcd0 	bl	af66 <assert_print>
    95c6:	21b9      	movs	r1, #185	; 0xb9
    95c8:	4628      	mov	r0, r5
    95ca:	f001 fcc5 	bl	af58 <assert_post_action>
    95ce:	e7d3      	b.n	9578 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    95d0:	4b0d      	ldr	r3, [pc, #52]	; (9608 <z_impl_k_thread_suspend+0xec>)
    95d2:	689b      	ldr	r3, [r3, #8]
    95d4:	42a3      	cmp	r3, r4
    95d6:	d000      	beq.n	95da <z_impl_k_thread_suspend+0xbe>
}
    95d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    95da:	f04f 0320 	mov.w	r3, #32
    95de:	f3ef 8011 	mrs	r0, BASEPRI
    95e2:	f383 8812 	msr	BASEPRI_MAX, r3
    95e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    95ea:	f002 fbfd 	bl	bde8 <z_reschedule_irqlock>
    95ee:	e7f3      	b.n	95d8 <z_impl_k_thread_suspend+0xbc>
    95f0:	20001190 	.word	0x20001190
    95f4:	0000c76c 	.word	0x0000c76c
    95f8:	0000c7cc 	.word	0x0000c7cc
    95fc:	0000c5c0 	.word	0x0000c5c0
    9600:	0000c7e4 	.word	0x0000c7e4
    9604:	20001174 	.word	0x20001174
    9608:	20001154 	.word	0x20001154
    960c:	0000c79c 	.word	0x0000c79c
    9610:	0000c7b4 	.word	0x0000c7b4

00009614 <k_sched_unlock>:
{
    9614:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9616:	2400      	movs	r4, #0
    9618:	f04f 0320 	mov.w	r3, #32
    961c:	f3ef 8511 	mrs	r5, BASEPRI
    9620:	f383 8812 	msr	BASEPRI_MAX, r3
    9624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9628:	4838      	ldr	r0, [pc, #224]	; (970c <k_sched_unlock+0xf8>)
    962a:	f7fe fbfd 	bl	7e28 <z_spin_lock_valid>
    962e:	b118      	cbz	r0, 9638 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    9630:	4836      	ldr	r0, [pc, #216]	; (970c <k_sched_unlock+0xf8>)
    9632:	f7fe fc19 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    9636:	e036      	b.n	96a6 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9638:	4e35      	ldr	r6, [pc, #212]	; (9710 <k_sched_unlock+0xfc>)
    963a:	238e      	movs	r3, #142	; 0x8e
    963c:	4632      	mov	r2, r6
    963e:	4935      	ldr	r1, [pc, #212]	; (9714 <k_sched_unlock+0x100>)
    9640:	4835      	ldr	r0, [pc, #212]	; (9718 <k_sched_unlock+0x104>)
    9642:	f001 fc90 	bl	af66 <assert_print>
    9646:	4931      	ldr	r1, [pc, #196]	; (970c <k_sched_unlock+0xf8>)
    9648:	4834      	ldr	r0, [pc, #208]	; (971c <k_sched_unlock+0x108>)
    964a:	f001 fc8c 	bl	af66 <assert_print>
    964e:	218e      	movs	r1, #142	; 0x8e
    9650:	4630      	mov	r0, r6
    9652:	f001 fc81 	bl	af58 <assert_post_action>
    9656:	e7eb      	b.n	9630 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    9658:	4c31      	ldr	r4, [pc, #196]	; (9720 <k_sched_unlock+0x10c>)
    965a:	f240 33bb 	movw	r3, #955	; 0x3bb
    965e:	4622      	mov	r2, r4
    9660:	4930      	ldr	r1, [pc, #192]	; (9724 <k_sched_unlock+0x110>)
    9662:	482d      	ldr	r0, [pc, #180]	; (9718 <k_sched_unlock+0x104>)
    9664:	f001 fc7f 	bl	af66 <assert_print>
    9668:	482f      	ldr	r0, [pc, #188]	; (9728 <k_sched_unlock+0x114>)
    966a:	f001 fc7c 	bl	af66 <assert_print>
    966e:	f240 31bb 	movw	r1, #955	; 0x3bb
    9672:	4620      	mov	r0, r4
    9674:	f001 fc70 	bl	af58 <assert_post_action>
    9678:	e01b      	b.n	96b2 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    967a:	4c29      	ldr	r4, [pc, #164]	; (9720 <k_sched_unlock+0x10c>)
    967c:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    9680:	4622      	mov	r2, r4
    9682:	492a      	ldr	r1, [pc, #168]	; (972c <k_sched_unlock+0x118>)
    9684:	4824      	ldr	r0, [pc, #144]	; (9718 <k_sched_unlock+0x104>)
    9686:	f001 fc6e 	bl	af66 <assert_print>
    968a:	4827      	ldr	r0, [pc, #156]	; (9728 <k_sched_unlock+0x114>)
    968c:	f001 fc6b 	bl	af66 <assert_print>
    9690:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    9694:	4620      	mov	r0, r4
    9696:	f001 fc5f 	bl	af58 <assert_post_action>
    969a:	e00e      	b.n	96ba <k_sched_unlock+0xa6>
	__asm__ volatile(
    969c:	f385 8811 	msr	BASEPRI, r5
    96a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    96a4:	2401      	movs	r4, #1
    96a6:	bb2c      	cbnz	r4, 96f4 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    96a8:	4b21      	ldr	r3, [pc, #132]	; (9730 <k_sched_unlock+0x11c>)
    96aa:	689b      	ldr	r3, [r3, #8]
    96ac:	7bdb      	ldrb	r3, [r3, #15]
    96ae:	2b00      	cmp	r3, #0
    96b0:	d0d2      	beq.n	9658 <k_sched_unlock+0x44>
    96b2:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    96b6:	2b00      	cmp	r3, #0
    96b8:	d1df      	bne.n	967a <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    96ba:	4b1d      	ldr	r3, [pc, #116]	; (9730 <k_sched_unlock+0x11c>)
    96bc:	689a      	ldr	r2, [r3, #8]
    96be:	7bd3      	ldrb	r3, [r2, #15]
    96c0:	3301      	adds	r3, #1
    96c2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    96c4:	2000      	movs	r0, #0
    96c6:	f7ff fabf 	bl	8c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96ca:	4810      	ldr	r0, [pc, #64]	; (970c <k_sched_unlock+0xf8>)
    96cc:	f7fe fbbc 	bl	7e48 <z_spin_unlock_valid>
    96d0:	2800      	cmp	r0, #0
    96d2:	d1e3      	bne.n	969c <k_sched_unlock+0x88>
    96d4:	4c0e      	ldr	r4, [pc, #56]	; (9710 <k_sched_unlock+0xfc>)
    96d6:	23b9      	movs	r3, #185	; 0xb9
    96d8:	4622      	mov	r2, r4
    96da:	4916      	ldr	r1, [pc, #88]	; (9734 <k_sched_unlock+0x120>)
    96dc:	480e      	ldr	r0, [pc, #56]	; (9718 <k_sched_unlock+0x104>)
    96de:	f001 fc42 	bl	af66 <assert_print>
    96e2:	490a      	ldr	r1, [pc, #40]	; (970c <k_sched_unlock+0xf8>)
    96e4:	4814      	ldr	r0, [pc, #80]	; (9738 <k_sched_unlock+0x124>)
    96e6:	f001 fc3e 	bl	af66 <assert_print>
    96ea:	21b9      	movs	r1, #185	; 0xb9
    96ec:	4620      	mov	r0, r4
    96ee:	f001 fc33 	bl	af58 <assert_post_action>
    96f2:	e7d3      	b.n	969c <k_sched_unlock+0x88>
	__asm__ volatile(
    96f4:	f04f 0320 	mov.w	r3, #32
    96f8:	f3ef 8011 	mrs	r0, BASEPRI
    96fc:	f383 8812 	msr	BASEPRI_MAX, r3
    9700:	f3bf 8f6f 	isb	sy
    9704:	f002 fb70 	bl	bde8 <z_reschedule_irqlock>
}
    9708:	bd70      	pop	{r4, r5, r6, pc}
    970a:	bf00      	nop
    970c:	20001190 	.word	0x20001190
    9710:	0000c76c 	.word	0x0000c76c
    9714:	0000c7cc 	.word	0x0000c7cc
    9718:	0000c5c0 	.word	0x0000c5c0
    971c:	0000c7e4 	.word	0x0000c7e4
    9720:	0000e044 	.word	0x0000e044
    9724:	0000e0cc 	.word	0x0000e0cc
    9728:	0000df9c 	.word	0x0000df9c
    972c:	0000de54 	.word	0x0000de54
    9730:	20001154 	.word	0x20001154
    9734:	0000c79c 	.word	0x0000c79c
    9738:	0000c7b4 	.word	0x0000c7b4

0000973c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    973e:	7b43      	ldrb	r3, [r0, #13]
    9740:	f013 0f08 	tst.w	r3, #8
    9744:	d145      	bne.n	97d2 <end_thread+0x96>
    9746:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    9748:	f043 0308 	orr.w	r3, r3, #8
    974c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    974e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9752:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    9754:	f013 0f80 	tst.w	r3, #128	; 0x80
    9758:	d12d      	bne.n	97b6 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    975a:	68ab      	ldr	r3, [r5, #8]
    975c:	b15b      	cbz	r3, 9776 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    975e:	4628      	mov	r0, r5
    9760:	f7ff f870 	bl	8844 <pended_on_thread>
    9764:	4629      	mov	r1, r5
    9766:	f7ff fa4b 	bl	8c00 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    976a:	7b6b      	ldrb	r3, [r5, #13]
    976c:	f023 0302 	bic.w	r3, r3, #2
    9770:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    9772:	2300      	movs	r3, #0
    9774:	60ab      	str	r3, [r5, #8]
    9776:	f105 0018 	add.w	r0, r5, #24
    977a:	f000 fca3 	bl	a0c4 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    977e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    9782:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9784:	42bc      	cmp	r4, r7
    9786:	d01e      	beq.n	97c6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9788:	b1ec      	cbz	r4, 97c6 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    978a:	4620      	mov	r0, r4
    978c:	f7ff f85a 	bl	8844 <pended_on_thread>
    9790:	4621      	mov	r1, r4
    9792:	f7ff fa35 	bl	8c00 <z_priq_dumb_remove>
    9796:	7b63      	ldrb	r3, [r4, #13]
    9798:	f023 0302 	bic.w	r3, r3, #2
    979c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    979e:	2600      	movs	r6, #0
    97a0:	60a6      	str	r6, [r4, #8]
    97a2:	f104 0018 	add.w	r0, r4, #24
    97a6:	f000 fc8d 	bl	a0c4 <z_abort_timeout>
    97aa:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    97ae:	4620      	mov	r0, r4
    97b0:	f7ff fba4 	bl	8efc <ready_thread>
    97b4:	e7e5      	b.n	9782 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    97b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    97ba:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    97bc:	4601      	mov	r1, r0
    97be:	4805      	ldr	r0, [pc, #20]	; (97d4 <end_thread+0x98>)
    97c0:	f7ff fa1e 	bl	8c00 <z_priq_dumb_remove>
}
    97c4:	e7c9      	b.n	975a <end_thread+0x1e>
		update_cache(1);
    97c6:	2001      	movs	r0, #1
    97c8:	f7ff fa3e 	bl	8c48 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    97cc:	4628      	mov	r0, r5
    97ce:	f7fe fb53 	bl	7e78 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    97d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97d4:	20001174 	.word	0x20001174

000097d8 <z_unpend1_no_timeout>:
{
    97d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97da:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    97dc:	2500      	movs	r5, #0
    97de:	f04f 0320 	mov.w	r3, #32
    97e2:	f3ef 8711 	mrs	r7, BASEPRI
    97e6:	f383 8812 	msr	BASEPRI_MAX, r3
    97ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97ee:	4823      	ldr	r0, [pc, #140]	; (987c <z_unpend1_no_timeout+0xa4>)
    97f0:	f7fe fb1a 	bl	7e28 <z_spin_lock_valid>
    97f4:	b120      	cbz	r0, 9800 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    97f6:	4821      	ldr	r0, [pc, #132]	; (987c <z_unpend1_no_timeout+0xa4>)
    97f8:	f7fe fb36 	bl	7e68 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    97fc:	2400      	movs	r4, #0
	return k;
    97fe:	e018      	b.n	9832 <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9800:	4c1f      	ldr	r4, [pc, #124]	; (9880 <z_unpend1_no_timeout+0xa8>)
    9802:	238e      	movs	r3, #142	; 0x8e
    9804:	4622      	mov	r2, r4
    9806:	491f      	ldr	r1, [pc, #124]	; (9884 <z_unpend1_no_timeout+0xac>)
    9808:	481f      	ldr	r0, [pc, #124]	; (9888 <z_unpend1_no_timeout+0xb0>)
    980a:	f001 fbac 	bl	af66 <assert_print>
    980e:	491b      	ldr	r1, [pc, #108]	; (987c <z_unpend1_no_timeout+0xa4>)
    9810:	481e      	ldr	r0, [pc, #120]	; (988c <z_unpend1_no_timeout+0xb4>)
    9812:	f001 fba8 	bl	af66 <assert_print>
    9816:	218e      	movs	r1, #142	; 0x8e
    9818:	4620      	mov	r0, r4
    981a:	f001 fb9d 	bl	af58 <assert_post_action>
    981e:	e7ea      	b.n	97f6 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9820:	4816      	ldr	r0, [pc, #88]	; (987c <z_unpend1_no_timeout+0xa4>)
    9822:	f7fe fb11 	bl	7e48 <z_spin_unlock_valid>
    9826:	b1b8      	cbz	r0, 9858 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    9828:	f387 8811 	msr	BASEPRI, r7
    982c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9830:	2501      	movs	r5, #1
    9832:	bb0d      	cbnz	r5, 9878 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    9834:	4630      	mov	r0, r6
    9836:	f002 faec 	bl	be12 <z_priq_dumb_best>
		if (thread != NULL) {
    983a:	4604      	mov	r4, r0
    983c:	2800      	cmp	r0, #0
    983e:	d0ef      	beq.n	9820 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9840:	f7ff f800 	bl	8844 <pended_on_thread>
    9844:	4621      	mov	r1, r4
    9846:	f7ff f9db 	bl	8c00 <z_priq_dumb_remove>
    984a:	7b63      	ldrb	r3, [r4, #13]
    984c:	f023 0302 	bic.w	r3, r3, #2
    9850:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9852:	2300      	movs	r3, #0
    9854:	60a3      	str	r3, [r4, #8]
}
    9856:	e7e3      	b.n	9820 <z_unpend1_no_timeout+0x48>
    9858:	4d09      	ldr	r5, [pc, #36]	; (9880 <z_unpend1_no_timeout+0xa8>)
    985a:	23b9      	movs	r3, #185	; 0xb9
    985c:	462a      	mov	r2, r5
    985e:	490c      	ldr	r1, [pc, #48]	; (9890 <z_unpend1_no_timeout+0xb8>)
    9860:	4809      	ldr	r0, [pc, #36]	; (9888 <z_unpend1_no_timeout+0xb0>)
    9862:	f001 fb80 	bl	af66 <assert_print>
    9866:	4905      	ldr	r1, [pc, #20]	; (987c <z_unpend1_no_timeout+0xa4>)
    9868:	480a      	ldr	r0, [pc, #40]	; (9894 <z_unpend1_no_timeout+0xbc>)
    986a:	f001 fb7c 	bl	af66 <assert_print>
    986e:	21b9      	movs	r1, #185	; 0xb9
    9870:	4628      	mov	r0, r5
    9872:	f001 fb71 	bl	af58 <assert_post_action>
    9876:	e7d7      	b.n	9828 <z_unpend1_no_timeout+0x50>
}
    9878:	4620      	mov	r0, r4
    987a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    987c:	20001190 	.word	0x20001190
    9880:	0000c76c 	.word	0x0000c76c
    9884:	0000c7cc 	.word	0x0000c7cc
    9888:	0000c5c0 	.word	0x0000c5c0
    988c:	0000c7e4 	.word	0x0000c7e4
    9890:	0000c79c 	.word	0x0000c79c
    9894:	0000c7b4 	.word	0x0000c7b4

00009898 <z_unpend_first_thread>:
{
    9898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    989a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    989c:	2500      	movs	r5, #0
	__asm__ volatile(
    989e:	f04f 0320 	mov.w	r3, #32
    98a2:	f3ef 8711 	mrs	r7, BASEPRI
    98a6:	f383 8812 	msr	BASEPRI_MAX, r3
    98aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98ae:	4825      	ldr	r0, [pc, #148]	; (9944 <z_unpend_first_thread+0xac>)
    98b0:	f7fe faba 	bl	7e28 <z_spin_lock_valid>
    98b4:	b120      	cbz	r0, 98c0 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    98b6:	4823      	ldr	r0, [pc, #140]	; (9944 <z_unpend_first_thread+0xac>)
    98b8:	f7fe fad6 	bl	7e68 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    98bc:	2400      	movs	r4, #0
	return k;
    98be:	e018      	b.n	98f2 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98c0:	4c21      	ldr	r4, [pc, #132]	; (9948 <z_unpend_first_thread+0xb0>)
    98c2:	238e      	movs	r3, #142	; 0x8e
    98c4:	4622      	mov	r2, r4
    98c6:	4921      	ldr	r1, [pc, #132]	; (994c <z_unpend_first_thread+0xb4>)
    98c8:	4821      	ldr	r0, [pc, #132]	; (9950 <z_unpend_first_thread+0xb8>)
    98ca:	f001 fb4c 	bl	af66 <assert_print>
    98ce:	491d      	ldr	r1, [pc, #116]	; (9944 <z_unpend_first_thread+0xac>)
    98d0:	4820      	ldr	r0, [pc, #128]	; (9954 <z_unpend_first_thread+0xbc>)
    98d2:	f001 fb48 	bl	af66 <assert_print>
    98d6:	218e      	movs	r1, #142	; 0x8e
    98d8:	4620      	mov	r0, r4
    98da:	f001 fb3d 	bl	af58 <assert_post_action>
    98de:	e7ea      	b.n	98b6 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98e0:	4818      	ldr	r0, [pc, #96]	; (9944 <z_unpend_first_thread+0xac>)
    98e2:	f7fe fab1 	bl	7e48 <z_spin_unlock_valid>
    98e6:	b1d8      	cbz	r0, 9920 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    98e8:	f387 8811 	msr	BASEPRI, r7
    98ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    98f0:	2501      	movs	r5, #1
    98f2:	bb2d      	cbnz	r5, 9940 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    98f4:	4630      	mov	r0, r6
    98f6:	f002 fa8c 	bl	be12 <z_priq_dumb_best>
		if (thread != NULL) {
    98fa:	4604      	mov	r4, r0
    98fc:	2800      	cmp	r0, #0
    98fe:	d0ef      	beq.n	98e0 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9900:	f7fe ffa0 	bl	8844 <pended_on_thread>
    9904:	4621      	mov	r1, r4
    9906:	f7ff f97b 	bl	8c00 <z_priq_dumb_remove>
    990a:	7b63      	ldrb	r3, [r4, #13]
    990c:	f023 0302 	bic.w	r3, r3, #2
    9910:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9912:	2300      	movs	r3, #0
    9914:	60a3      	str	r3, [r4, #8]
    9916:	f104 0018 	add.w	r0, r4, #24
    991a:	f000 fbd3 	bl	a0c4 <z_abort_timeout>
    991e:	e7df      	b.n	98e0 <z_unpend_first_thread+0x48>
    9920:	4d09      	ldr	r5, [pc, #36]	; (9948 <z_unpend_first_thread+0xb0>)
    9922:	23b9      	movs	r3, #185	; 0xb9
    9924:	462a      	mov	r2, r5
    9926:	490c      	ldr	r1, [pc, #48]	; (9958 <z_unpend_first_thread+0xc0>)
    9928:	4809      	ldr	r0, [pc, #36]	; (9950 <z_unpend_first_thread+0xb8>)
    992a:	f001 fb1c 	bl	af66 <assert_print>
    992e:	4905      	ldr	r1, [pc, #20]	; (9944 <z_unpend_first_thread+0xac>)
    9930:	480a      	ldr	r0, [pc, #40]	; (995c <z_unpend_first_thread+0xc4>)
    9932:	f001 fb18 	bl	af66 <assert_print>
    9936:	21b9      	movs	r1, #185	; 0xb9
    9938:	4628      	mov	r0, r5
    993a:	f001 fb0d 	bl	af58 <assert_post_action>
    993e:	e7d3      	b.n	98e8 <z_unpend_first_thread+0x50>
}
    9940:	4620      	mov	r0, r4
    9942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9944:	20001190 	.word	0x20001190
    9948:	0000c76c 	.word	0x0000c76c
    994c:	0000c7cc 	.word	0x0000c7cc
    9950:	0000c5c0 	.word	0x0000c5c0
    9954:	0000c7e4 	.word	0x0000c7e4
    9958:	0000c79c 	.word	0x0000c79c
    995c:	0000c7b4 	.word	0x0000c7b4

00009960 <z_sched_init>:
{
    9960:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    9962:	4804      	ldr	r0, [pc, #16]	; (9974 <z_sched_init+0x14>)
    9964:	f002 fa5c 	bl	be20 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9968:	2100      	movs	r1, #0
    996a:	4608      	mov	r0, r1
    996c:	f7fe ffa8 	bl	88c0 <k_sched_time_slice_set>
}
    9970:	bd08      	pop	{r3, pc}
    9972:	bf00      	nop
    9974:	20001170 	.word	0x20001170

00009978 <z_impl_k_yield>:
{
    9978:	b570      	push	{r4, r5, r6, lr}
    997a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    997e:	2b00      	cmp	r3, #0
    9980:	d149      	bne.n	9a16 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    9982:	f04f 0320 	mov.w	r3, #32
    9986:	f3ef 8611 	mrs	r6, BASEPRI
    998a:	f383 8812 	msr	BASEPRI_MAX, r3
    998e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9992:	4843      	ldr	r0, [pc, #268]	; (9aa0 <z_impl_k_yield+0x128>)
    9994:	f7fe fa48 	bl	7e28 <z_spin_lock_valid>
    9998:	2800      	cmp	r0, #0
    999a:	d04d      	beq.n	9a38 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    999c:	4840      	ldr	r0, [pc, #256]	; (9aa0 <z_impl_k_yield+0x128>)
    999e:	f7fe fa63 	bl	7e68 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    99a2:	4c40      	ldr	r4, [pc, #256]	; (9aa4 <z_impl_k_yield+0x12c>)
    99a4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    99a6:	7b4b      	ldrb	r3, [r1, #13]
    99a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    99ac:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    99ae:	f104 0020 	add.w	r0, r4, #32
    99b2:	f7ff f925 	bl	8c00 <z_priq_dumb_remove>
	queue_thread(_current);
    99b6:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    99b8:	7b6b      	ldrb	r3, [r5, #13]
    99ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    99be:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    99c0:	4b39      	ldr	r3, [pc, #228]	; (9aa8 <z_impl_k_yield+0x130>)
    99c2:	429d      	cmp	r5, r3
    99c4:	d048      	beq.n	9a58 <z_impl_k_yield+0xe0>
	return list->head == list;
    99c6:	4b37      	ldr	r3, [pc, #220]	; (9aa4 <z_impl_k_yield+0x12c>)
    99c8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99cc:	429c      	cmp	r4, r3
    99ce:	d055      	beq.n	9a7c <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99d0:	b16c      	cbz	r4, 99ee <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    99d2:	4621      	mov	r1, r4
    99d4:	4628      	mov	r0, r5
    99d6:	f002 f9fd 	bl	bdd4 <z_sched_prio_cmp>
    99da:	2800      	cmp	r0, #0
    99dc:	dc48      	bgt.n	9a70 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    99de:	b134      	cbz	r4, 99ee <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    99e0:	4b30      	ldr	r3, [pc, #192]	; (9aa4 <z_impl_k_yield+0x12c>)
    99e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    99e4:	429c      	cmp	r4, r3
    99e6:	d002      	beq.n	99ee <z_impl_k_yield+0x76>
    99e8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99ea:	2c00      	cmp	r4, #0
    99ec:	d1f0      	bne.n	99d0 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    99ee:	4b2d      	ldr	r3, [pc, #180]	; (9aa4 <z_impl_k_yield+0x12c>)
    99f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    99f2:	f103 0120 	add.w	r1, r3, #32
    99f6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    99f8:	606a      	str	r2, [r5, #4]
	tail->next = node;
    99fa:	6015      	str	r5, [r2, #0]
	list->tail = node;
    99fc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    99fe:	2001      	movs	r0, #1
    9a00:	f7ff f922 	bl	8c48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a04:	4826      	ldr	r0, [pc, #152]	; (9aa0 <z_impl_k_yield+0x128>)
    9a06:	f7fe fa1f 	bl	7e48 <z_spin_unlock_valid>
    9a0a:	2800      	cmp	r0, #0
    9a0c:	d038      	beq.n	9a80 <z_impl_k_yield+0x108>
    9a0e:	4630      	mov	r0, r6
    9a10:	f7f9 fcd8 	bl	33c4 <arch_swap>
}
    9a14:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9a16:	4c25      	ldr	r4, [pc, #148]	; (9aac <z_impl_k_yield+0x134>)
    9a18:	f240 5332 	movw	r3, #1330	; 0x532
    9a1c:	4622      	mov	r2, r4
    9a1e:	4924      	ldr	r1, [pc, #144]	; (9ab0 <z_impl_k_yield+0x138>)
    9a20:	4824      	ldr	r0, [pc, #144]	; (9ab4 <z_impl_k_yield+0x13c>)
    9a22:	f001 faa0 	bl	af66 <assert_print>
    9a26:	4824      	ldr	r0, [pc, #144]	; (9ab8 <z_impl_k_yield+0x140>)
    9a28:	f001 fa9d 	bl	af66 <assert_print>
    9a2c:	f240 5132 	movw	r1, #1330	; 0x532
    9a30:	4620      	mov	r0, r4
    9a32:	f001 fa91 	bl	af58 <assert_post_action>
    9a36:	e7a4      	b.n	9982 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a38:	4c20      	ldr	r4, [pc, #128]	; (9abc <z_impl_k_yield+0x144>)
    9a3a:	238e      	movs	r3, #142	; 0x8e
    9a3c:	4622      	mov	r2, r4
    9a3e:	4920      	ldr	r1, [pc, #128]	; (9ac0 <z_impl_k_yield+0x148>)
    9a40:	481c      	ldr	r0, [pc, #112]	; (9ab4 <z_impl_k_yield+0x13c>)
    9a42:	f001 fa90 	bl	af66 <assert_print>
    9a46:	4916      	ldr	r1, [pc, #88]	; (9aa0 <z_impl_k_yield+0x128>)
    9a48:	481e      	ldr	r0, [pc, #120]	; (9ac4 <z_impl_k_yield+0x14c>)
    9a4a:	f001 fa8c 	bl	af66 <assert_print>
    9a4e:	218e      	movs	r1, #142	; 0x8e
    9a50:	4620      	mov	r0, r4
    9a52:	f001 fa81 	bl	af58 <assert_post_action>
    9a56:	e7a1      	b.n	999c <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9a58:	4c14      	ldr	r4, [pc, #80]	; (9aac <z_impl_k_yield+0x134>)
    9a5a:	23ba      	movs	r3, #186	; 0xba
    9a5c:	4622      	mov	r2, r4
    9a5e:	491a      	ldr	r1, [pc, #104]	; (9ac8 <z_impl_k_yield+0x150>)
    9a60:	4814      	ldr	r0, [pc, #80]	; (9ab4 <z_impl_k_yield+0x13c>)
    9a62:	f001 fa80 	bl	af66 <assert_print>
    9a66:	21ba      	movs	r1, #186	; 0xba
    9a68:	4620      	mov	r0, r4
    9a6a:	f001 fa75 	bl	af58 <assert_post_action>
    9a6e:	e7aa      	b.n	99c6 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9a70:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9a72:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9a74:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9a76:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9a78:	6065      	str	r5, [r4, #4]
}
    9a7a:	e7c0      	b.n	99fe <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a7c:	2400      	movs	r4, #0
    9a7e:	e7a7      	b.n	99d0 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a80:	4c0e      	ldr	r4, [pc, #56]	; (9abc <z_impl_k_yield+0x144>)
    9a82:	23d0      	movs	r3, #208	; 0xd0
    9a84:	4622      	mov	r2, r4
    9a86:	4911      	ldr	r1, [pc, #68]	; (9acc <z_impl_k_yield+0x154>)
    9a88:	480a      	ldr	r0, [pc, #40]	; (9ab4 <z_impl_k_yield+0x13c>)
    9a8a:	f001 fa6c 	bl	af66 <assert_print>
    9a8e:	4904      	ldr	r1, [pc, #16]	; (9aa0 <z_impl_k_yield+0x128>)
    9a90:	480f      	ldr	r0, [pc, #60]	; (9ad0 <z_impl_k_yield+0x158>)
    9a92:	f001 fa68 	bl	af66 <assert_print>
    9a96:	21d0      	movs	r1, #208	; 0xd0
    9a98:	4620      	mov	r0, r4
    9a9a:	f001 fa5d 	bl	af58 <assert_post_action>
    9a9e:	e7b6      	b.n	9a0e <z_impl_k_yield+0x96>
    9aa0:	20001190 	.word	0x20001190
    9aa4:	20001154 	.word	0x20001154
    9aa8:	20000490 	.word	0x20000490
    9aac:	0000e044 	.word	0x0000e044
    9ab0:	0000de54 	.word	0x0000de54
    9ab4:	0000c5c0 	.word	0x0000c5c0
    9ab8:	0000df9c 	.word	0x0000df9c
    9abc:	0000c76c 	.word	0x0000c76c
    9ac0:	0000c7cc 	.word	0x0000c7cc
    9ac4:	0000c7e4 	.word	0x0000c7e4
    9ac8:	0000e080 	.word	0x0000e080
    9acc:	0000c79c 	.word	0x0000c79c
    9ad0:	0000c7b4 	.word	0x0000c7b4

00009ad4 <z_tick_sleep>:
{
    9ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ad8:	4604      	mov	r4, r0
    9ada:	460e      	mov	r6, r1
    9adc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	d14e      	bne.n	9b82 <z_tick_sleep+0xae>
	if (ticks == 0) {
    9ae4:	ea54 0306 	orrs.w	r3, r4, r6
    9ae8:	d05c      	beq.n	9ba4 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    9aea:	f06f 0301 	mvn.w	r3, #1
    9aee:	1b1b      	subs	r3, r3, r4
    9af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9af4:	eb62 0206 	sbc.w	r2, r2, r6
    9af8:	2b01      	cmp	r3, #1
    9afa:	f172 0300 	sbcs.w	r3, r2, #0
    9afe:	db55      	blt.n	9bac <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9b00:	f06f 0501 	mvn.w	r5, #1
    9b04:	1b2d      	subs	r5, r5, r4
    9b06:	f04f 0320 	mov.w	r3, #32
    9b0a:	f3ef 8911 	mrs	r9, BASEPRI
    9b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b16:	4840      	ldr	r0, [pc, #256]	; (9c18 <z_tick_sleep+0x144>)
    9b18:	f7fe f986 	bl	7e28 <z_spin_lock_valid>
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d049      	beq.n	9bb4 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    9b20:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9c18 <z_tick_sleep+0x144>
    9b24:	4640      	mov	r0, r8
    9b26:	f7fe f99f 	bl	7e68 <z_spin_lock_set_owner>
	pending_current = _current;
    9b2a:	4f3c      	ldr	r7, [pc, #240]	; (9c1c <z_tick_sleep+0x148>)
    9b2c:	68b8      	ldr	r0, [r7, #8]
    9b2e:	4b3c      	ldr	r3, [pc, #240]	; (9c20 <z_tick_sleep+0x14c>)
    9b30:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9b32:	f7ff fb5b 	bl	91ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9b36:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9b38:	4622      	mov	r2, r4
    9b3a:	4633      	mov	r3, r6
    9b3c:	4939      	ldr	r1, [pc, #228]	; (9c24 <z_tick_sleep+0x150>)
    9b3e:	3018      	adds	r0, #24
    9b40:	f000 f9dc 	bl	9efc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9b44:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9b46:	7b53      	ldrb	r3, [r2, #13]
    9b48:	f043 0310 	orr.w	r3, r3, #16
    9b4c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b4e:	4640      	mov	r0, r8
    9b50:	f7fe f97a 	bl	7e48 <z_spin_unlock_valid>
    9b54:	2800      	cmp	r0, #0
    9b56:	d03d      	beq.n	9bd4 <z_tick_sleep+0x100>
    9b58:	4648      	mov	r0, r9
    9b5a:	f7f9 fc33 	bl	33c4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9b5e:	4b2f      	ldr	r3, [pc, #188]	; (9c1c <z_tick_sleep+0x148>)
    9b60:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    9b62:	7b5b      	ldrb	r3, [r3, #13]
    9b64:	f013 0f10 	tst.w	r3, #16
    9b68:	d144      	bne.n	9bf4 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9b6a:	f002 f974 	bl	be56 <sys_clock_tick_get_32>
    9b6e:	1a28      	subs	r0, r5, r0
    9b70:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    9b74:	2801      	cmp	r0, #1
    9b76:	f173 0300 	sbcs.w	r3, r3, #0
    9b7a:	da00      	bge.n	9b7e <z_tick_sleep+0xaa>
	return 0;
    9b7c:	2000      	movs	r0, #0
}
    9b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9b82:	4d29      	ldr	r5, [pc, #164]	; (9c28 <z_tick_sleep+0x154>)
    9b84:	f240 534e 	movw	r3, #1358	; 0x54e
    9b88:	462a      	mov	r2, r5
    9b8a:	4928      	ldr	r1, [pc, #160]	; (9c2c <z_tick_sleep+0x158>)
    9b8c:	4828      	ldr	r0, [pc, #160]	; (9c30 <z_tick_sleep+0x15c>)
    9b8e:	f001 f9ea 	bl	af66 <assert_print>
    9b92:	4828      	ldr	r0, [pc, #160]	; (9c34 <z_tick_sleep+0x160>)
    9b94:	f001 f9e7 	bl	af66 <assert_print>
    9b98:	f240 514e 	movw	r1, #1358	; 0x54e
    9b9c:	4628      	mov	r0, r5
    9b9e:	f001 f9db 	bl	af58 <assert_post_action>
    9ba2:	e79f      	b.n	9ae4 <z_tick_sleep+0x10>
	z_impl_k_yield();
    9ba4:	f7ff fee8 	bl	9978 <z_impl_k_yield>
		return 0;
    9ba8:	2000      	movs	r0, #0
    9baa:	e7e8      	b.n	9b7e <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9bac:	f002 f953 	bl	be56 <sys_clock_tick_get_32>
    9bb0:	1905      	adds	r5, r0, r4
    9bb2:	e7a8      	b.n	9b06 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bb4:	4f20      	ldr	r7, [pc, #128]	; (9c38 <z_tick_sleep+0x164>)
    9bb6:	238e      	movs	r3, #142	; 0x8e
    9bb8:	463a      	mov	r2, r7
    9bba:	4920      	ldr	r1, [pc, #128]	; (9c3c <z_tick_sleep+0x168>)
    9bbc:	481c      	ldr	r0, [pc, #112]	; (9c30 <z_tick_sleep+0x15c>)
    9bbe:	f001 f9d2 	bl	af66 <assert_print>
    9bc2:	4915      	ldr	r1, [pc, #84]	; (9c18 <z_tick_sleep+0x144>)
    9bc4:	481e      	ldr	r0, [pc, #120]	; (9c40 <z_tick_sleep+0x16c>)
    9bc6:	f001 f9ce 	bl	af66 <assert_print>
    9bca:	218e      	movs	r1, #142	; 0x8e
    9bcc:	4638      	mov	r0, r7
    9bce:	f001 f9c3 	bl	af58 <assert_post_action>
    9bd2:	e7a5      	b.n	9b20 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bd4:	4c18      	ldr	r4, [pc, #96]	; (9c38 <z_tick_sleep+0x164>)
    9bd6:	23d0      	movs	r3, #208	; 0xd0
    9bd8:	4622      	mov	r2, r4
    9bda:	491a      	ldr	r1, [pc, #104]	; (9c44 <z_tick_sleep+0x170>)
    9bdc:	4814      	ldr	r0, [pc, #80]	; (9c30 <z_tick_sleep+0x15c>)
    9bde:	f001 f9c2 	bl	af66 <assert_print>
    9be2:	4641      	mov	r1, r8
    9be4:	4818      	ldr	r0, [pc, #96]	; (9c48 <z_tick_sleep+0x174>)
    9be6:	f001 f9be 	bl	af66 <assert_print>
    9bea:	21d0      	movs	r1, #208	; 0xd0
    9bec:	4620      	mov	r0, r4
    9bee:	f001 f9b3 	bl	af58 <assert_post_action>
    9bf2:	e7b1      	b.n	9b58 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9bf4:	4c0c      	ldr	r4, [pc, #48]	; (9c28 <z_tick_sleep+0x154>)
    9bf6:	f240 536f 	movw	r3, #1391	; 0x56f
    9bfa:	4622      	mov	r2, r4
    9bfc:	4913      	ldr	r1, [pc, #76]	; (9c4c <z_tick_sleep+0x178>)
    9bfe:	480c      	ldr	r0, [pc, #48]	; (9c30 <z_tick_sleep+0x15c>)
    9c00:	f001 f9b1 	bl	af66 <assert_print>
    9c04:	480b      	ldr	r0, [pc, #44]	; (9c34 <z_tick_sleep+0x160>)
    9c06:	f001 f9ae 	bl	af66 <assert_print>
    9c0a:	f240 516f 	movw	r1, #1391	; 0x56f
    9c0e:	4620      	mov	r0, r4
    9c10:	f001 f9a2 	bl	af58 <assert_post_action>
    9c14:	e7a9      	b.n	9b6a <z_tick_sleep+0x96>
    9c16:	bf00      	nop
    9c18:	20001190 	.word	0x20001190
    9c1c:	20001154 	.word	0x20001154
    9c20:	2000118c 	.word	0x2000118c
    9c24:	00009105 	.word	0x00009105
    9c28:	0000e044 	.word	0x0000e044
    9c2c:	0000de54 	.word	0x0000de54
    9c30:	0000c5c0 	.word	0x0000c5c0
    9c34:	0000df9c 	.word	0x0000df9c
    9c38:	0000c76c 	.word	0x0000c76c
    9c3c:	0000c7cc 	.word	0x0000c7cc
    9c40:	0000c7e4 	.word	0x0000c7e4
    9c44:	0000c79c 	.word	0x0000c79c
    9c48:	0000c7b4 	.word	0x0000c7b4
    9c4c:	0000e100 	.word	0x0000e100

00009c50 <z_impl_k_sleep>:
{
    9c50:	b570      	push	{r4, r5, r6, lr}
    9c52:	4605      	mov	r5, r0
    9c54:	460c      	mov	r4, r1
    9c56:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9c5a:	bb13      	cbnz	r3, 9ca2 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9c5c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9c60:	bf08      	it	eq
    9c62:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    9c66:	d02d      	beq.n	9cc4 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    9c68:	4628      	mov	r0, r5
    9c6a:	4621      	mov	r1, r4
    9c6c:	f7ff ff32 	bl	9ad4 <z_tick_sleep>
    9c70:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    9c72:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    9c74:	0151      	lsls	r1, r2, #5
    9c76:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    9c7a:	0143      	lsls	r3, r0, #5
    9c7c:	1a1b      	subs	r3, r3, r0
    9c7e:	eb61 0102 	sbc.w	r1, r1, r2
    9c82:	0088      	lsls	r0, r1, #2
    9c84:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    9c88:	009b      	lsls	r3, r3, #2
    9c8a:	eb13 030c 	adds.w	r3, r3, ip
    9c8e:	eb42 0000 	adc.w	r0, r2, r0
    9c92:	00c0      	lsls	r0, r0, #3
    9c94:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    9c98:	f3c3 3310 	ubfx	r3, r3, #12, #17
    9c9c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    9ca0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9ca2:	4e0c      	ldr	r6, [pc, #48]	; (9cd4 <z_impl_k_sleep+0x84>)
    9ca4:	f240 537e 	movw	r3, #1406	; 0x57e
    9ca8:	4632      	mov	r2, r6
    9caa:	490b      	ldr	r1, [pc, #44]	; (9cd8 <z_impl_k_sleep+0x88>)
    9cac:	480b      	ldr	r0, [pc, #44]	; (9cdc <z_impl_k_sleep+0x8c>)
    9cae:	f001 f95a 	bl	af66 <assert_print>
    9cb2:	480b      	ldr	r0, [pc, #44]	; (9ce0 <z_impl_k_sleep+0x90>)
    9cb4:	f001 f957 	bl	af66 <assert_print>
    9cb8:	f240 517e 	movw	r1, #1406	; 0x57e
    9cbc:	4630      	mov	r0, r6
    9cbe:	f001 f94b 	bl	af58 <assert_post_action>
    9cc2:	e7cb      	b.n	9c5c <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    9cc4:	4b07      	ldr	r3, [pc, #28]	; (9ce4 <z_impl_k_sleep+0x94>)
    9cc6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9cc8:	f7ff fc28 	bl	951c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    9ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cd0:	e7e6      	b.n	9ca0 <z_impl_k_sleep+0x50>
    9cd2:	bf00      	nop
    9cd4:	0000e044 	.word	0x0000e044
    9cd8:	0000de54 	.word	0x0000de54
    9cdc:	0000c5c0 	.word	0x0000c5c0
    9ce0:	0000df9c 	.word	0x0000df9c
    9ce4:	20001154 	.word	0x20001154

00009ce8 <z_impl_z_current_get>:
}
    9ce8:	4b01      	ldr	r3, [pc, #4]	; (9cf0 <z_impl_z_current_get+0x8>)
    9cea:	6898      	ldr	r0, [r3, #8]
    9cec:	4770      	bx	lr
    9cee:	bf00      	nop
    9cf0:	20001154 	.word	0x20001154

00009cf4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    9cf4:	b570      	push	{r4, r5, r6, lr}
    9cf6:	4604      	mov	r4, r0
    9cf8:	f04f 0320 	mov.w	r3, #32
    9cfc:	f3ef 8511 	mrs	r5, BASEPRI
    9d00:	f383 8812 	msr	BASEPRI_MAX, r3
    9d04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d08:	4840      	ldr	r0, [pc, #256]	; (9e0c <z_thread_abort+0x118>)
    9d0a:	f7fe f88d 	bl	7e28 <z_spin_lock_valid>
    9d0e:	b1b8      	cbz	r0, 9d40 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    9d10:	483e      	ldr	r0, [pc, #248]	; (9e0c <z_thread_abort+0x118>)
    9d12:	f7fe f8a9 	bl	7e68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9d16:	7b63      	ldrb	r3, [r4, #13]
    9d18:	f013 0f08 	tst.w	r3, #8
    9d1c:	d120      	bne.n	9d60 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    9d1e:	4620      	mov	r0, r4
    9d20:	f7ff fd0c 	bl	973c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    9d24:	4b3a      	ldr	r3, [pc, #232]	; (9e10 <z_thread_abort+0x11c>)
    9d26:	689b      	ldr	r3, [r3, #8]
    9d28:	42a3      	cmp	r3, r4
    9d2a:	d032      	beq.n	9d92 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d2c:	4837      	ldr	r0, [pc, #220]	; (9e0c <z_thread_abort+0x118>)
    9d2e:	f7fe f88b 	bl	7e48 <z_spin_unlock_valid>
    9d32:	2800      	cmp	r0, #0
    9d34:	d059      	beq.n	9dea <z_thread_abort+0xf6>
	__asm__ volatile(
    9d36:	f385 8811 	msr	BASEPRI, r5
    9d3a:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9d3e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d40:	4e34      	ldr	r6, [pc, #208]	; (9e14 <z_thread_abort+0x120>)
    9d42:	238e      	movs	r3, #142	; 0x8e
    9d44:	4632      	mov	r2, r6
    9d46:	4934      	ldr	r1, [pc, #208]	; (9e18 <z_thread_abort+0x124>)
    9d48:	4834      	ldr	r0, [pc, #208]	; (9e1c <z_thread_abort+0x128>)
    9d4a:	f001 f90c 	bl	af66 <assert_print>
    9d4e:	492f      	ldr	r1, [pc, #188]	; (9e0c <z_thread_abort+0x118>)
    9d50:	4833      	ldr	r0, [pc, #204]	; (9e20 <z_thread_abort+0x12c>)
    9d52:	f001 f908 	bl	af66 <assert_print>
    9d56:	218e      	movs	r1, #142	; 0x8e
    9d58:	4630      	mov	r0, r6
    9d5a:	f001 f8fd 	bl	af58 <assert_post_action>
    9d5e:	e7d7      	b.n	9d10 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d60:	482a      	ldr	r0, [pc, #168]	; (9e0c <z_thread_abort+0x118>)
    9d62:	f7fe f871 	bl	7e48 <z_spin_unlock_valid>
    9d66:	b120      	cbz	r0, 9d72 <z_thread_abort+0x7e>
    9d68:	f385 8811 	msr	BASEPRI, r5
    9d6c:	f3bf 8f6f 	isb	sy
		return;
    9d70:	e7e5      	b.n	9d3e <z_thread_abort+0x4a>
    9d72:	4c28      	ldr	r4, [pc, #160]	; (9e14 <z_thread_abort+0x120>)
    9d74:	23b9      	movs	r3, #185	; 0xb9
    9d76:	4622      	mov	r2, r4
    9d78:	492a      	ldr	r1, [pc, #168]	; (9e24 <z_thread_abort+0x130>)
    9d7a:	4828      	ldr	r0, [pc, #160]	; (9e1c <z_thread_abort+0x128>)
    9d7c:	f001 f8f3 	bl	af66 <assert_print>
    9d80:	4922      	ldr	r1, [pc, #136]	; (9e0c <z_thread_abort+0x118>)
    9d82:	4829      	ldr	r0, [pc, #164]	; (9e28 <z_thread_abort+0x134>)
    9d84:	f001 f8ef 	bl	af66 <assert_print>
    9d88:	21b9      	movs	r1, #185	; 0xb9
    9d8a:	4620      	mov	r0, r4
    9d8c:	f001 f8e4 	bl	af58 <assert_post_action>
    9d90:	e7ea      	b.n	9d68 <z_thread_abort+0x74>
    9d92:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    9d96:	2b00      	cmp	r3, #0
    9d98:	d1c8      	bne.n	9d2c <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d9a:	481c      	ldr	r0, [pc, #112]	; (9e0c <z_thread_abort+0x118>)
    9d9c:	f7fe f854 	bl	7e48 <z_spin_unlock_valid>
    9da0:	b198      	cbz	r0, 9dca <z_thread_abort+0xd6>
    9da2:	4628      	mov	r0, r5
    9da4:	f7f9 fb0e 	bl	33c4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    9da8:	4c20      	ldr	r4, [pc, #128]	; (9e2c <z_thread_abort+0x138>)
    9daa:	f240 63ac 	movw	r3, #1708	; 0x6ac
    9dae:	4622      	mov	r2, r4
    9db0:	491f      	ldr	r1, [pc, #124]	; (9e30 <z_thread_abort+0x13c>)
    9db2:	481a      	ldr	r0, [pc, #104]	; (9e1c <z_thread_abort+0x128>)
    9db4:	f001 f8d7 	bl	af66 <assert_print>
    9db8:	481e      	ldr	r0, [pc, #120]	; (9e34 <z_thread_abort+0x140>)
    9dba:	f001 f8d4 	bl	af66 <assert_print>
    9dbe:	f240 61ac 	movw	r1, #1708	; 0x6ac
    9dc2:	4620      	mov	r0, r4
    9dc4:	f001 f8c8 	bl	af58 <assert_post_action>
    9dc8:	e7b0      	b.n	9d2c <z_thread_abort+0x38>
    9dca:	4c12      	ldr	r4, [pc, #72]	; (9e14 <z_thread_abort+0x120>)
    9dcc:	23d0      	movs	r3, #208	; 0xd0
    9dce:	4622      	mov	r2, r4
    9dd0:	4914      	ldr	r1, [pc, #80]	; (9e24 <z_thread_abort+0x130>)
    9dd2:	4812      	ldr	r0, [pc, #72]	; (9e1c <z_thread_abort+0x128>)
    9dd4:	f001 f8c7 	bl	af66 <assert_print>
    9dd8:	490c      	ldr	r1, [pc, #48]	; (9e0c <z_thread_abort+0x118>)
    9dda:	4813      	ldr	r0, [pc, #76]	; (9e28 <z_thread_abort+0x134>)
    9ddc:	f001 f8c3 	bl	af66 <assert_print>
    9de0:	21d0      	movs	r1, #208	; 0xd0
    9de2:	4620      	mov	r0, r4
    9de4:	f001 f8b8 	bl	af58 <assert_post_action>
    9de8:	e7db      	b.n	9da2 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9dea:	4c0a      	ldr	r4, [pc, #40]	; (9e14 <z_thread_abort+0x120>)
    9dec:	23b9      	movs	r3, #185	; 0xb9
    9dee:	4622      	mov	r2, r4
    9df0:	490c      	ldr	r1, [pc, #48]	; (9e24 <z_thread_abort+0x130>)
    9df2:	480a      	ldr	r0, [pc, #40]	; (9e1c <z_thread_abort+0x128>)
    9df4:	f001 f8b7 	bl	af66 <assert_print>
    9df8:	4904      	ldr	r1, [pc, #16]	; (9e0c <z_thread_abort+0x118>)
    9dfa:	480b      	ldr	r0, [pc, #44]	; (9e28 <z_thread_abort+0x134>)
    9dfc:	f001 f8b3 	bl	af66 <assert_print>
    9e00:	21b9      	movs	r1, #185	; 0xb9
    9e02:	4620      	mov	r0, r4
    9e04:	f001 f8a8 	bl	af58 <assert_post_action>
    9e08:	e795      	b.n	9d36 <z_thread_abort+0x42>
    9e0a:	bf00      	nop
    9e0c:	20001190 	.word	0x20001190
    9e10:	20001154 	.word	0x20001154
    9e14:	0000c76c 	.word	0x0000c76c
    9e18:	0000c7cc 	.word	0x0000c7cc
    9e1c:	0000c5c0 	.word	0x0000c5c0
    9e20:	0000c7e4 	.word	0x0000c7e4
    9e24:	0000c79c 	.word	0x0000c79c
    9e28:	0000c7b4 	.word	0x0000c7b4
    9e2c:	0000e044 	.word	0x0000e044
    9e30:	0000cc7c 	.word	0x0000cc7c
    9e34:	0000e140 	.word	0x0000e140

00009e38 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9e38:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9e3a:	4806      	ldr	r0, [pc, #24]	; (9e54 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9e3c:	4a06      	ldr	r2, [pc, #24]	; (9e58 <z_data_copy+0x20>)
    9e3e:	1a12      	subs	r2, r2, r0
    9e40:	4906      	ldr	r1, [pc, #24]	; (9e5c <z_data_copy+0x24>)
    9e42:	f001 ff40 	bl	bcc6 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9e46:	4a06      	ldr	r2, [pc, #24]	; (9e60 <z_data_copy+0x28>)
    9e48:	4906      	ldr	r1, [pc, #24]	; (9e64 <z_data_copy+0x2c>)
    9e4a:	4807      	ldr	r0, [pc, #28]	; (9e68 <z_data_copy+0x30>)
    9e4c:	f001 ff3b 	bl	bcc6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9e50:	bd08      	pop	{r3, pc}
    9e52:	bf00      	nop
    9e54:	20000000 	.word	0x20000000
    9e58:	20000260 	.word	0x20000260
    9e5c:	0000e2a4 	.word	0x0000e2a4
    9e60:	00000000 	.word	0x00000000
    9e64:	0000e2a4 	.word	0x0000e2a4
    9e68:	20000000 	.word	0x20000000

00009e6c <first>:
	return list->head == list;
    9e6c:	4b03      	ldr	r3, [pc, #12]	; (9e7c <first+0x10>)
    9e6e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e70:	4298      	cmp	r0, r3
    9e72:	d000      	beq.n	9e76 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    9e74:	4770      	bx	lr
    9e76:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    9e78:	e7fc      	b.n	9e74 <first+0x8>
    9e7a:	bf00      	nop
    9e7c:	20000174 	.word	0x20000174

00009e80 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9e80:	b130      	cbz	r0, 9e90 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    9e82:	4a04      	ldr	r2, [pc, #16]	; (9e94 <next+0x14>)
    9e84:	6852      	ldr	r2, [r2, #4]
    9e86:	4290      	cmp	r0, r2
    9e88:	d001      	beq.n	9e8e <next+0xe>
    9e8a:	6800      	ldr	r0, [r0, #0]
    9e8c:	4770      	bx	lr
    9e8e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    9e90:	4770      	bx	lr
    9e92:	bf00      	nop
    9e94:	20000174 	.word	0x20000174

00009e98 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    9e98:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9e9a:	4b04      	ldr	r3, [pc, #16]	; (9eac <elapsed+0x14>)
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	b10b      	cbz	r3, 9ea4 <elapsed+0xc>
    9ea0:	2000      	movs	r0, #0
}
    9ea2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9ea4:	f7fb fc28 	bl	56f8 <sys_clock_elapsed>
    9ea8:	e7fb      	b.n	9ea2 <elapsed+0xa>
    9eaa:	bf00      	nop
    9eac:	2000119c 	.word	0x2000119c

00009eb0 <next_timeout>:

static int32_t next_timeout(void)
{
    9eb0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    9eb2:	f7ff ffdb 	bl	9e6c <first>
    9eb6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    9eb8:	f7ff ffee 	bl	9e98 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    9ebc:	b17c      	cbz	r4, 9ede <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9ebe:	6923      	ldr	r3, [r4, #16]
    9ec0:	6962      	ldr	r2, [r4, #20]
    9ec2:	1a1b      	subs	r3, r3, r0
    9ec4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9ecc:	f170 0200 	sbcs.w	r2, r0, #0
    9ed0:	da08      	bge.n	9ee4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    9ed2:	2800      	cmp	r0, #0
    9ed4:	db01      	blt.n	9eda <next_timeout+0x2a>
    9ed6:	4618      	mov	r0, r3
    9ed8:	e006      	b.n	9ee8 <next_timeout+0x38>
    9eda:	2300      	movs	r3, #0
    9edc:	e7fb      	b.n	9ed6 <next_timeout+0x26>
		ret = MAX_WAIT;
    9ede:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9ee2:	e001      	b.n	9ee8 <next_timeout+0x38>
    9ee4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9ee8:	4b03      	ldr	r3, [pc, #12]	; (9ef8 <next_timeout+0x48>)
    9eea:	691b      	ldr	r3, [r3, #16]
    9eec:	b113      	cbz	r3, 9ef4 <next_timeout+0x44>
    9eee:	4283      	cmp	r3, r0
    9ef0:	da00      	bge.n	9ef4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    9ef2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    9ef4:	bd10      	pop	{r4, pc}
    9ef6:	bf00      	nop
    9ef8:	20001154 	.word	0x20001154

00009efc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9f00:	bf08      	it	eq
    9f02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9f06:	f000 80c1 	beq.w	a08c <z_add_timeout+0x190>
{
    9f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f0e:	4604      	mov	r4, r0
    9f10:	460f      	mov	r7, r1
    9f12:	4692      	mov	sl, r2
    9f14:	461d      	mov	r5, r3
	return node->next != NULL;
    9f16:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9f18:	b173      	cbz	r3, 9f38 <z_add_timeout+0x3c>
    9f1a:	f8df 8174 	ldr.w	r8, [pc, #372]	; a090 <z_add_timeout+0x194>
    9f1e:	2363      	movs	r3, #99	; 0x63
    9f20:	4642      	mov	r2, r8
    9f22:	495c      	ldr	r1, [pc, #368]	; (a094 <z_add_timeout+0x198>)
    9f24:	485c      	ldr	r0, [pc, #368]	; (a098 <z_add_timeout+0x19c>)
    9f26:	f001 f81e 	bl	af66 <assert_print>
    9f2a:	485c      	ldr	r0, [pc, #368]	; (a09c <z_add_timeout+0x1a0>)
    9f2c:	f001 f81b 	bl	af66 <assert_print>
    9f30:	2163      	movs	r1, #99	; 0x63
    9f32:	4640      	mov	r0, r8
    9f34:	f001 f810 	bl	af58 <assert_post_action>
	to->fn = fn;
    9f38:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    9f3a:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    9f3e:	f04f 0320 	mov.w	r3, #32
    9f42:	f3ef 8711 	mrs	r7, BASEPRI
    9f46:	f383 8812 	msr	BASEPRI_MAX, r3
    9f4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f4e:	4854      	ldr	r0, [pc, #336]	; (a0a0 <z_add_timeout+0x1a4>)
    9f50:	f7fd ff6a 	bl	7e28 <z_spin_lock_valid>
    9f54:	b118      	cbz	r0, 9f5e <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    9f56:	4852      	ldr	r0, [pc, #328]	; (a0a0 <z_add_timeout+0x1a4>)
    9f58:	f7fd ff86 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    9f5c:	e038      	b.n	9fd0 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f5e:	f8df 9144 	ldr.w	r9, [pc, #324]	; a0a4 <z_add_timeout+0x1a8>
    9f62:	238e      	movs	r3, #142	; 0x8e
    9f64:	464a      	mov	r2, r9
    9f66:	4950      	ldr	r1, [pc, #320]	; (a0a8 <z_add_timeout+0x1ac>)
    9f68:	484b      	ldr	r0, [pc, #300]	; (a098 <z_add_timeout+0x19c>)
    9f6a:	f000 fffc 	bl	af66 <assert_print>
    9f6e:	494c      	ldr	r1, [pc, #304]	; (a0a0 <z_add_timeout+0x1a4>)
    9f70:	484e      	ldr	r0, [pc, #312]	; (a0ac <z_add_timeout+0x1b0>)
    9f72:	f000 fff8 	bl	af66 <assert_print>
    9f76:	218e      	movs	r1, #142	; 0x8e
    9f78:	4648      	mov	r0, r9
    9f7a:	f000 ffed 	bl	af58 <assert_post_action>
    9f7e:	e7ea      	b.n	9f56 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    9f80:	f11a 0801 	adds.w	r8, sl, #1
    9f84:	f145 0900 	adc.w	r9, r5, #0
    9f88:	f7ff ff86 	bl	9e98 <elapsed>
    9f8c:	eb18 0300 	adds.w	r3, r8, r0
    9f90:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    9f94:	6123      	str	r3, [r4, #16]
    9f96:	6160      	str	r0, [r4, #20]
    9f98:	e03d      	b.n	a016 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    9f9a:	1a51      	subs	r1, r2, r1
    9f9c:	eb66 0303 	sbc.w	r3, r6, r3
    9fa0:	6101      	str	r1, [r0, #16]
    9fa2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    9fa4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    9fa6:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9fa8:	6020      	str	r0, [r4, #0]
	prev->next = node;
    9faa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9fac:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    9fae:	2800      	cmp	r0, #0
    9fb0:	d045      	beq.n	a03e <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9fb2:	f7ff ff5b 	bl	9e6c <first>
    9fb6:	4284      	cmp	r4, r0
    9fb8:	d048      	beq.n	a04c <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fba:	4839      	ldr	r0, [pc, #228]	; (a0a0 <z_add_timeout+0x1a4>)
    9fbc:	f7fd ff44 	bl	7e48 <z_spin_unlock_valid>
    9fc0:	2800      	cmp	r0, #0
    9fc2:	d050      	beq.n	a066 <z_add_timeout+0x16a>
	__asm__ volatile(
    9fc4:	f387 8811 	msr	BASEPRI, r7
    9fc8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9fcc:	f04f 0801 	mov.w	r8, #1
    9fd0:	f1b8 0f00 	cmp.w	r8, #0
    9fd4:	d158      	bne.n	a088 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    9fd6:	4653      	mov	r3, sl
    9fd8:	f06f 0101 	mvn.w	r1, #1
    9fdc:	ebb1 010a 	subs.w	r1, r1, sl
    9fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9fe4:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9fe8:	2a00      	cmp	r2, #0
    9fea:	dbc9      	blt.n	9f80 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9fec:	4a30      	ldr	r2, [pc, #192]	; (a0b0 <z_add_timeout+0x1b4>)
    9fee:	6811      	ldr	r1, [r2, #0]
    9ff0:	6852      	ldr	r2, [r2, #4]
    9ff2:	185b      	adds	r3, r3, r1
    9ff4:	eb42 0205 	adc.w	r2, r2, r5
    9ff8:	f06f 0101 	mvn.w	r1, #1
    9ffc:	1acb      	subs	r3, r1, r3
    9ffe:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    a002:	4618      	mov	r0, r3
    a004:	4611      	mov	r1, r2
    a006:	2b01      	cmp	r3, #1
    a008:	f172 0300 	sbcs.w	r3, r2, #0
    a00c:	da01      	bge.n	a012 <z_add_timeout+0x116>
    a00e:	2001      	movs	r0, #1
    a010:	2100      	movs	r1, #0
    a012:	6120      	str	r0, [r4, #16]
    a014:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a016:	f7ff ff29 	bl	9e6c <first>
    a01a:	2800      	cmp	r0, #0
    a01c:	d0c7      	beq.n	9fae <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    a01e:	6902      	ldr	r2, [r0, #16]
    a020:	6946      	ldr	r6, [r0, #20]
    a022:	6921      	ldr	r1, [r4, #16]
    a024:	6963      	ldr	r3, [r4, #20]
    a026:	4291      	cmp	r1, r2
    a028:	eb73 0c06 	sbcs.w	ip, r3, r6
    a02c:	dbb5      	blt.n	9f9a <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    a02e:	1a89      	subs	r1, r1, r2
    a030:	eb63 0306 	sbc.w	r3, r3, r6
    a034:	6121      	str	r1, [r4, #16]
    a036:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a038:	f7ff ff22 	bl	9e80 <next>
    a03c:	e7ed      	b.n	a01a <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    a03e:	4b1d      	ldr	r3, [pc, #116]	; (a0b4 <z_add_timeout+0x1b8>)
    a040:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    a042:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    a044:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a046:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a048:	605c      	str	r4, [r3, #4]
}
    a04a:	e7b2      	b.n	9fb2 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    a04c:	f7ff ff30 	bl	9eb0 <next_timeout>

			if (next_time == 0 ||
    a050:	4603      	mov	r3, r0
    a052:	b118      	cbz	r0, a05c <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    a054:	4a18      	ldr	r2, [pc, #96]	; (a0b8 <z_add_timeout+0x1bc>)
    a056:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    a058:	4282      	cmp	r2, r0
    a05a:	d0ae      	beq.n	9fba <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    a05c:	2100      	movs	r1, #0
    a05e:	4618      	mov	r0, r3
    a060:	f7fb fb18 	bl	5694 <sys_clock_set_timeout>
    a064:	e7a9      	b.n	9fba <z_add_timeout+0xbe>
    a066:	f8df 803c 	ldr.w	r8, [pc, #60]	; a0a4 <z_add_timeout+0x1a8>
    a06a:	23b9      	movs	r3, #185	; 0xb9
    a06c:	4642      	mov	r2, r8
    a06e:	4913      	ldr	r1, [pc, #76]	; (a0bc <z_add_timeout+0x1c0>)
    a070:	4809      	ldr	r0, [pc, #36]	; (a098 <z_add_timeout+0x19c>)
    a072:	f000 ff78 	bl	af66 <assert_print>
    a076:	490a      	ldr	r1, [pc, #40]	; (a0a0 <z_add_timeout+0x1a4>)
    a078:	4811      	ldr	r0, [pc, #68]	; (a0c0 <z_add_timeout+0x1c4>)
    a07a:	f000 ff74 	bl	af66 <assert_print>
    a07e:	21b9      	movs	r1, #185	; 0xb9
    a080:	4640      	mov	r0, r8
    a082:	f000 ff69 	bl	af58 <assert_post_action>
    a086:	e79d      	b.n	9fc4 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a08c:	4770      	bx	lr
    a08e:	bf00      	nop
    a090:	0000e164 	.word	0x0000e164
    a094:	0000e188 	.word	0x0000e188
    a098:	0000c5c0 	.word	0x0000c5c0
    a09c:	0000df9c 	.word	0x0000df9c
    a0a0:	200011a0 	.word	0x200011a0
    a0a4:	0000c76c 	.word	0x0000c76c
    a0a8:	0000c7cc 	.word	0x0000c7cc
    a0ac:	0000c7e4 	.word	0x0000c7e4
    a0b0:	200005f0 	.word	0x200005f0
    a0b4:	20000174 	.word	0x20000174
    a0b8:	20001154 	.word	0x20001154
    a0bc:	0000c79c 	.word	0x0000c79c
    a0c0:	0000c7b4 	.word	0x0000c7b4

0000a0c4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c8:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    a0ca:	2400      	movs	r4, #0
	__asm__ volatile(
    a0cc:	f04f 0320 	mov.w	r3, #32
    a0d0:	f3ef 8711 	mrs	r7, BASEPRI
    a0d4:	f383 8812 	msr	BASEPRI_MAX, r3
    a0d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0dc:	481f      	ldr	r0, [pc, #124]	; (a15c <z_abort_timeout+0x98>)
    a0de:	f7fd fea3 	bl	7e28 <z_spin_lock_valid>
    a0e2:	b128      	cbz	r0, a0f0 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    a0e4:	481d      	ldr	r0, [pc, #116]	; (a15c <z_abort_timeout+0x98>)
    a0e6:	f7fd febf 	bl	7e68 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    a0ea:	f06f 0815 	mvn.w	r8, #21
	return k;
    a0ee:	e018      	b.n	a122 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0f0:	4e1b      	ldr	r6, [pc, #108]	; (a160 <z_abort_timeout+0x9c>)
    a0f2:	238e      	movs	r3, #142	; 0x8e
    a0f4:	4632      	mov	r2, r6
    a0f6:	491b      	ldr	r1, [pc, #108]	; (a164 <z_abort_timeout+0xa0>)
    a0f8:	481b      	ldr	r0, [pc, #108]	; (a168 <z_abort_timeout+0xa4>)
    a0fa:	f000 ff34 	bl	af66 <assert_print>
    a0fe:	4917      	ldr	r1, [pc, #92]	; (a15c <z_abort_timeout+0x98>)
    a100:	481a      	ldr	r0, [pc, #104]	; (a16c <z_abort_timeout+0xa8>)
    a102:	f000 ff30 	bl	af66 <assert_print>
    a106:	218e      	movs	r1, #142	; 0x8e
    a108:	4630      	mov	r0, r6
    a10a:	f000 ff25 	bl	af58 <assert_post_action>
    a10e:	e7e9      	b.n	a0e4 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a110:	4812      	ldr	r0, [pc, #72]	; (a15c <z_abort_timeout+0x98>)
    a112:	f7fd fe99 	bl	7e48 <z_spin_unlock_valid>
    a116:	b170      	cbz	r0, a136 <z_abort_timeout+0x72>
	__asm__ volatile(
    a118:	f387 8811 	msr	BASEPRI, r7
    a11c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a120:	2401      	movs	r4, #1
    a122:	4626      	mov	r6, r4
    a124:	b9bc      	cbnz	r4, a156 <z_abort_timeout+0x92>
	return node->next != NULL;
    a126:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    a128:	2b00      	cmp	r3, #0
    a12a:	d0f1      	beq.n	a110 <z_abort_timeout+0x4c>
			remove_timeout(to);
    a12c:	4628      	mov	r0, r5
    a12e:	f001 fe7b 	bl	be28 <remove_timeout>
			ret = 0;
    a132:	46b0      	mov	r8, r6
    a134:	e7ec      	b.n	a110 <z_abort_timeout+0x4c>
    a136:	4c0a      	ldr	r4, [pc, #40]	; (a160 <z_abort_timeout+0x9c>)
    a138:	23b9      	movs	r3, #185	; 0xb9
    a13a:	4622      	mov	r2, r4
    a13c:	490c      	ldr	r1, [pc, #48]	; (a170 <z_abort_timeout+0xac>)
    a13e:	480a      	ldr	r0, [pc, #40]	; (a168 <z_abort_timeout+0xa4>)
    a140:	f000 ff11 	bl	af66 <assert_print>
    a144:	4905      	ldr	r1, [pc, #20]	; (a15c <z_abort_timeout+0x98>)
    a146:	480b      	ldr	r0, [pc, #44]	; (a174 <z_abort_timeout+0xb0>)
    a148:	f000 ff0d 	bl	af66 <assert_print>
    a14c:	21b9      	movs	r1, #185	; 0xb9
    a14e:	4620      	mov	r0, r4
    a150:	f000 ff02 	bl	af58 <assert_post_action>
    a154:	e7e0      	b.n	a118 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    a156:	4640      	mov	r0, r8
    a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a15c:	200011a0 	.word	0x200011a0
    a160:	0000c76c 	.word	0x0000c76c
    a164:	0000c7cc 	.word	0x0000c7cc
    a168:	0000c5c0 	.word	0x0000c5c0
    a16c:	0000c7e4 	.word	0x0000c7e4
    a170:	0000c79c 	.word	0x0000c79c
    a174:	0000c7b4 	.word	0x0000c7b4

0000a178 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    a178:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    a17a:	2500      	movs	r5, #0
	__asm__ volatile(
    a17c:	f04f 0320 	mov.w	r3, #32
    a180:	f3ef 8611 	mrs	r6, BASEPRI
    a184:	f383 8812 	msr	BASEPRI_MAX, r3
    a188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a18c:	481c      	ldr	r0, [pc, #112]	; (a200 <z_get_next_timeout_expiry+0x88>)
    a18e:	f7fd fe4b 	bl	7e28 <z_spin_lock_valid>
    a192:	b128      	cbz	r0, a1a0 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    a194:	481a      	ldr	r0, [pc, #104]	; (a200 <z_get_next_timeout_expiry+0x88>)
    a196:	f7fd fe67 	bl	7e68 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    a19a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    a19e:	e014      	b.n	a1ca <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1a0:	4c18      	ldr	r4, [pc, #96]	; (a204 <z_get_next_timeout_expiry+0x8c>)
    a1a2:	238e      	movs	r3, #142	; 0x8e
    a1a4:	4622      	mov	r2, r4
    a1a6:	4918      	ldr	r1, [pc, #96]	; (a208 <z_get_next_timeout_expiry+0x90>)
    a1a8:	4818      	ldr	r0, [pc, #96]	; (a20c <z_get_next_timeout_expiry+0x94>)
    a1aa:	f000 fedc 	bl	af66 <assert_print>
    a1ae:	4914      	ldr	r1, [pc, #80]	; (a200 <z_get_next_timeout_expiry+0x88>)
    a1b0:	4817      	ldr	r0, [pc, #92]	; (a210 <z_get_next_timeout_expiry+0x98>)
    a1b2:	f000 fed8 	bl	af66 <assert_print>
    a1b6:	218e      	movs	r1, #142	; 0x8e
    a1b8:	4620      	mov	r0, r4
    a1ba:	f000 fecd 	bl	af58 <assert_post_action>
    a1be:	e7e9      	b.n	a194 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    a1c0:	f386 8811 	msr	BASEPRI, r6
    a1c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a1c8:	2501      	movs	r5, #1
    a1ca:	b9bd      	cbnz	r5, a1fc <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    a1cc:	f7ff fe70 	bl	9eb0 <next_timeout>
    a1d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1d2:	480b      	ldr	r0, [pc, #44]	; (a200 <z_get_next_timeout_expiry+0x88>)
    a1d4:	f7fd fe38 	bl	7e48 <z_spin_unlock_valid>
    a1d8:	2800      	cmp	r0, #0
    a1da:	d1f1      	bne.n	a1c0 <z_get_next_timeout_expiry+0x48>
    a1dc:	4d09      	ldr	r5, [pc, #36]	; (a204 <z_get_next_timeout_expiry+0x8c>)
    a1de:	23b9      	movs	r3, #185	; 0xb9
    a1e0:	462a      	mov	r2, r5
    a1e2:	490c      	ldr	r1, [pc, #48]	; (a214 <z_get_next_timeout_expiry+0x9c>)
    a1e4:	4809      	ldr	r0, [pc, #36]	; (a20c <z_get_next_timeout_expiry+0x94>)
    a1e6:	f000 febe 	bl	af66 <assert_print>
    a1ea:	4905      	ldr	r1, [pc, #20]	; (a200 <z_get_next_timeout_expiry+0x88>)
    a1ec:	480a      	ldr	r0, [pc, #40]	; (a218 <z_get_next_timeout_expiry+0xa0>)
    a1ee:	f000 feba 	bl	af66 <assert_print>
    a1f2:	21b9      	movs	r1, #185	; 0xb9
    a1f4:	4628      	mov	r0, r5
    a1f6:	f000 feaf 	bl	af58 <assert_post_action>
    a1fa:	e7e1      	b.n	a1c0 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    a1fc:	4620      	mov	r0, r4
    a1fe:	bd70      	pop	{r4, r5, r6, pc}
    a200:	200011a0 	.word	0x200011a0
    a204:	0000c76c 	.word	0x0000c76c
    a208:	0000c7cc 	.word	0x0000c7cc
    a20c:	0000c5c0 	.word	0x0000c5c0
    a210:	0000c7e4 	.word	0x0000c7e4
    a214:	0000c79c 	.word	0x0000c79c
    a218:	0000c7b4 	.word	0x0000c7b4

0000a21c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a220:	4606      	mov	r6, r0
    a222:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    a224:	2500      	movs	r5, #0
	__asm__ volatile(
    a226:	f04f 0320 	mov.w	r3, #32
    a22a:	f3ef 8711 	mrs	r7, BASEPRI
    a22e:	f383 8812 	msr	BASEPRI_MAX, r3
    a232:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a236:	4825      	ldr	r0, [pc, #148]	; (a2cc <z_set_timeout_expiry+0xb0>)
    a238:	f7fd fdf6 	bl	7e28 <z_spin_lock_valid>
    a23c:	b118      	cbz	r0, a246 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    a23e:	4823      	ldr	r0, [pc, #140]	; (a2cc <z_set_timeout_expiry+0xb0>)
    a240:	f7fd fe12 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    a244:	e01e      	b.n	a284 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a246:	4c22      	ldr	r4, [pc, #136]	; (a2d0 <z_set_timeout_expiry+0xb4>)
    a248:	238e      	movs	r3, #142	; 0x8e
    a24a:	4622      	mov	r2, r4
    a24c:	4921      	ldr	r1, [pc, #132]	; (a2d4 <z_set_timeout_expiry+0xb8>)
    a24e:	4822      	ldr	r0, [pc, #136]	; (a2d8 <z_set_timeout_expiry+0xbc>)
    a250:	f000 fe89 	bl	af66 <assert_print>
    a254:	491d      	ldr	r1, [pc, #116]	; (a2cc <z_set_timeout_expiry+0xb0>)
    a256:	4821      	ldr	r0, [pc, #132]	; (a2dc <z_set_timeout_expiry+0xc0>)
    a258:	f000 fe85 	bl	af66 <assert_print>
    a25c:	218e      	movs	r1, #142	; 0x8e
    a25e:	4620      	mov	r0, r4
    a260:	f000 fe7a 	bl	af58 <assert_post_action>
    a264:	e7eb      	b.n	a23e <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    a266:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    a268:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a26c:	2801      	cmp	r0, #1
    a26e:	dd00      	ble.n	a272 <z_set_timeout_expiry+0x56>
    a270:	b99c      	cbnz	r4, a29a <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a272:	4816      	ldr	r0, [pc, #88]	; (a2cc <z_set_timeout_expiry+0xb0>)
    a274:	f7fd fde8 	bl	7e48 <z_spin_unlock_valid>
    a278:	b1b0      	cbz	r0, a2a8 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    a27a:	f387 8811 	msr	BASEPRI, r7
    a27e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a282:	2501      	movs	r5, #1
    a284:	462c      	mov	r4, r5
    a286:	b9fd      	cbnz	r5, a2c8 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    a288:	f7ff fe12 	bl	9eb0 <next_timeout>
			      || (ticks <= next_to);
    a28c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a290:	d0e9      	beq.n	a266 <z_set_timeout_expiry+0x4a>
    a292:	42b0      	cmp	r0, r6
    a294:	dbe8      	blt.n	a268 <z_set_timeout_expiry+0x4c>
    a296:	2401      	movs	r4, #1
    a298:	e7e6      	b.n	a268 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a29a:	4641      	mov	r1, r8
    a29c:	42b0      	cmp	r0, r6
    a29e:	bfa8      	it	ge
    a2a0:	4630      	movge	r0, r6
    a2a2:	f7fb f9f7 	bl	5694 <sys_clock_set_timeout>
    a2a6:	e7e4      	b.n	a272 <z_set_timeout_expiry+0x56>
    a2a8:	4c09      	ldr	r4, [pc, #36]	; (a2d0 <z_set_timeout_expiry+0xb4>)
    a2aa:	23b9      	movs	r3, #185	; 0xb9
    a2ac:	4622      	mov	r2, r4
    a2ae:	490c      	ldr	r1, [pc, #48]	; (a2e0 <z_set_timeout_expiry+0xc4>)
    a2b0:	4809      	ldr	r0, [pc, #36]	; (a2d8 <z_set_timeout_expiry+0xbc>)
    a2b2:	f000 fe58 	bl	af66 <assert_print>
    a2b6:	4905      	ldr	r1, [pc, #20]	; (a2cc <z_set_timeout_expiry+0xb0>)
    a2b8:	480a      	ldr	r0, [pc, #40]	; (a2e4 <z_set_timeout_expiry+0xc8>)
    a2ba:	f000 fe54 	bl	af66 <assert_print>
    a2be:	21b9      	movs	r1, #185	; 0xb9
    a2c0:	4620      	mov	r0, r4
    a2c2:	f000 fe49 	bl	af58 <assert_post_action>
    a2c6:	e7d8      	b.n	a27a <z_set_timeout_expiry+0x5e>
		}
	}
}
    a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2cc:	200011a0 	.word	0x200011a0
    a2d0:	0000c76c 	.word	0x0000c76c
    a2d4:	0000c7cc 	.word	0x0000c7cc
    a2d8:	0000c5c0 	.word	0x0000c5c0
    a2dc:	0000c7e4 	.word	0x0000c7e4
    a2e0:	0000c79c 	.word	0x0000c79c
    a2e4:	0000c7b4 	.word	0x0000c7b4

0000a2e8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    a2e8:	b570      	push	{r4, r5, r6, lr}
    a2ea:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a2ec:	f7fe fd5e 	bl	8dac <z_time_slice>
	__asm__ volatile(
    a2f0:	f04f 0320 	mov.w	r3, #32
    a2f4:	f3ef 8511 	mrs	r5, BASEPRI
    a2f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a2fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a300:	4854      	ldr	r0, [pc, #336]	; (a454 <sys_clock_announce+0x16c>)
    a302:	f7fd fd91 	bl	7e28 <z_spin_lock_valid>
    a306:	b128      	cbz	r0, a314 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    a308:	4852      	ldr	r0, [pc, #328]	; (a454 <sys_clock_announce+0x16c>)
    a30a:	f7fd fdad 	bl	7e68 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a30e:	4b52      	ldr	r3, [pc, #328]	; (a458 <sys_clock_announce+0x170>)
    a310:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    a312:	e022      	b.n	a35a <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a314:	4e51      	ldr	r6, [pc, #324]	; (a45c <sys_clock_announce+0x174>)
    a316:	238e      	movs	r3, #142	; 0x8e
    a318:	4632      	mov	r2, r6
    a31a:	4951      	ldr	r1, [pc, #324]	; (a460 <sys_clock_announce+0x178>)
    a31c:	4851      	ldr	r0, [pc, #324]	; (a464 <sys_clock_announce+0x17c>)
    a31e:	f000 fe22 	bl	af66 <assert_print>
    a322:	494c      	ldr	r1, [pc, #304]	; (a454 <sys_clock_announce+0x16c>)
    a324:	4850      	ldr	r0, [pc, #320]	; (a468 <sys_clock_announce+0x180>)
    a326:	f000 fe1e 	bl	af66 <assert_print>
    a32a:	218e      	movs	r1, #142	; 0x8e
    a32c:	4630      	mov	r0, r6
    a32e:	f000 fe13 	bl	af58 <assert_post_action>
    a332:	e7e9      	b.n	a308 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a334:	4e49      	ldr	r6, [pc, #292]	; (a45c <sys_clock_announce+0x174>)
    a336:	23b9      	movs	r3, #185	; 0xb9
    a338:	4632      	mov	r2, r6
    a33a:	494c      	ldr	r1, [pc, #304]	; (a46c <sys_clock_announce+0x184>)
    a33c:	4849      	ldr	r0, [pc, #292]	; (a464 <sys_clock_announce+0x17c>)
    a33e:	f000 fe12 	bl	af66 <assert_print>
    a342:	4944      	ldr	r1, [pc, #272]	; (a454 <sys_clock_announce+0x16c>)
    a344:	484a      	ldr	r0, [pc, #296]	; (a470 <sys_clock_announce+0x188>)
    a346:	f000 fe0e 	bl	af66 <assert_print>
    a34a:	21b9      	movs	r1, #185	; 0xb9
    a34c:	4630      	mov	r0, r6
    a34e:	f000 fe03 	bl	af58 <assert_post_action>
    a352:	e027      	b.n	a3a4 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    a354:	483f      	ldr	r0, [pc, #252]	; (a454 <sys_clock_announce+0x16c>)
    a356:	f7fd fd87 	bl	7e68 <z_spin_lock_set_owner>
    a35a:	f7ff fd87 	bl	9e6c <first>
    a35e:	4604      	mov	r4, r0
    a360:	2800      	cmp	r0, #0
    a362:	d043      	beq.n	a3ec <sys_clock_announce+0x104>
    a364:	6902      	ldr	r2, [r0, #16]
    a366:	6941      	ldr	r1, [r0, #20]
    a368:	4b3b      	ldr	r3, [pc, #236]	; (a458 <sys_clock_announce+0x170>)
    a36a:	681b      	ldr	r3, [r3, #0]
    a36c:	17d8      	asrs	r0, r3, #31
    a36e:	4293      	cmp	r3, r2
    a370:	eb70 0101 	sbcs.w	r1, r0, r1
    a374:	db3a      	blt.n	a3ec <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a376:	483f      	ldr	r0, [pc, #252]	; (a474 <sys_clock_announce+0x18c>)
    a378:	6801      	ldr	r1, [r0, #0]
    a37a:	6846      	ldr	r6, [r0, #4]
    a37c:	1889      	adds	r1, r1, r2
    a37e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    a382:	6001      	str	r1, [r0, #0]
    a384:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    a386:	1a9b      	subs	r3, r3, r2
    a388:	4a33      	ldr	r2, [pc, #204]	; (a458 <sys_clock_announce+0x170>)
    a38a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    a38c:	2200      	movs	r2, #0
    a38e:	2300      	movs	r3, #0
    a390:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    a394:	4620      	mov	r0, r4
    a396:	f001 fd47 	bl	be28 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a39a:	482e      	ldr	r0, [pc, #184]	; (a454 <sys_clock_announce+0x16c>)
    a39c:	f7fd fd54 	bl	7e48 <z_spin_unlock_valid>
    a3a0:	2800      	cmp	r0, #0
    a3a2:	d0c7      	beq.n	a334 <sys_clock_announce+0x4c>
	__asm__ volatile(
    a3a4:	f385 8811 	msr	BASEPRI, r5
    a3a8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    a3ac:	68a3      	ldr	r3, [r4, #8]
    a3ae:	4620      	mov	r0, r4
    a3b0:	4798      	blx	r3
	__asm__ volatile(
    a3b2:	f04f 0320 	mov.w	r3, #32
    a3b6:	f3ef 8511 	mrs	r5, BASEPRI
    a3ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a3be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3c2:	4824      	ldr	r0, [pc, #144]	; (a454 <sys_clock_announce+0x16c>)
    a3c4:	f7fd fd30 	bl	7e28 <z_spin_lock_valid>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d1c3      	bne.n	a354 <sys_clock_announce+0x6c>
    a3cc:	4c23      	ldr	r4, [pc, #140]	; (a45c <sys_clock_announce+0x174>)
    a3ce:	238e      	movs	r3, #142	; 0x8e
    a3d0:	4622      	mov	r2, r4
    a3d2:	4923      	ldr	r1, [pc, #140]	; (a460 <sys_clock_announce+0x178>)
    a3d4:	4823      	ldr	r0, [pc, #140]	; (a464 <sys_clock_announce+0x17c>)
    a3d6:	f000 fdc6 	bl	af66 <assert_print>
    a3da:	491e      	ldr	r1, [pc, #120]	; (a454 <sys_clock_announce+0x16c>)
    a3dc:	4822      	ldr	r0, [pc, #136]	; (a468 <sys_clock_announce+0x180>)
    a3de:	f000 fdc2 	bl	af66 <assert_print>
    a3e2:	218e      	movs	r1, #142	; 0x8e
    a3e4:	4620      	mov	r0, r4
    a3e6:	f000 fdb7 	bl	af58 <assert_post_action>
    a3ea:	e7b3      	b.n	a354 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    a3ec:	b144      	cbz	r4, a400 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    a3ee:	4b1a      	ldr	r3, [pc, #104]	; (a458 <sys_clock_announce+0x170>)
    a3f0:	6819      	ldr	r1, [r3, #0]
    a3f2:	6923      	ldr	r3, [r4, #16]
    a3f4:	6962      	ldr	r2, [r4, #20]
    a3f6:	1a5b      	subs	r3, r3, r1
    a3f8:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    a3fc:	6123      	str	r3, [r4, #16]
    a3fe:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    a400:	4a1c      	ldr	r2, [pc, #112]	; (a474 <sys_clock_announce+0x18c>)
    a402:	4e15      	ldr	r6, [pc, #84]	; (a458 <sys_clock_announce+0x170>)
    a404:	6830      	ldr	r0, [r6, #0]
    a406:	6813      	ldr	r3, [r2, #0]
    a408:	6851      	ldr	r1, [r2, #4]
    a40a:	181b      	adds	r3, r3, r0
    a40c:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    a410:	6013      	str	r3, [r2, #0]
    a412:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    a414:	2400      	movs	r4, #0
    a416:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a418:	f7ff fd4a 	bl	9eb0 <next_timeout>
    a41c:	4621      	mov	r1, r4
    a41e:	f7fb f939 	bl	5694 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a422:	480c      	ldr	r0, [pc, #48]	; (a454 <sys_clock_announce+0x16c>)
    a424:	f7fd fd10 	bl	7e48 <z_spin_unlock_valid>
    a428:	b120      	cbz	r0, a434 <sys_clock_announce+0x14c>
	__asm__ volatile(
    a42a:	f385 8811 	msr	BASEPRI, r5
    a42e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a432:	bd70      	pop	{r4, r5, r6, pc}
    a434:	4c09      	ldr	r4, [pc, #36]	; (a45c <sys_clock_announce+0x174>)
    a436:	23b9      	movs	r3, #185	; 0xb9
    a438:	4622      	mov	r2, r4
    a43a:	490c      	ldr	r1, [pc, #48]	; (a46c <sys_clock_announce+0x184>)
    a43c:	4809      	ldr	r0, [pc, #36]	; (a464 <sys_clock_announce+0x17c>)
    a43e:	f000 fd92 	bl	af66 <assert_print>
    a442:	4904      	ldr	r1, [pc, #16]	; (a454 <sys_clock_announce+0x16c>)
    a444:	480a      	ldr	r0, [pc, #40]	; (a470 <sys_clock_announce+0x188>)
    a446:	f000 fd8e 	bl	af66 <assert_print>
    a44a:	21b9      	movs	r1, #185	; 0xb9
    a44c:	4620      	mov	r0, r4
    a44e:	f000 fd83 	bl	af58 <assert_post_action>
    a452:	e7ea      	b.n	a42a <sys_clock_announce+0x142>
    a454:	200011a0 	.word	0x200011a0
    a458:	2000119c 	.word	0x2000119c
    a45c:	0000c76c 	.word	0x0000c76c
    a460:	0000c7cc 	.word	0x0000c7cc
    a464:	0000c5c0 	.word	0x0000c5c0
    a468:	0000c7e4 	.word	0x0000c7e4
    a46c:	0000c79c 	.word	0x0000c79c
    a470:	0000c7b4 	.word	0x0000c7b4
    a474:	200005f0 	.word	0x200005f0

0000a478 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    a47a:	2600      	movs	r6, #0
	__asm__ volatile(
    a47c:	f04f 0320 	mov.w	r3, #32
    a480:	f3ef 8711 	mrs	r7, BASEPRI
    a484:	f383 8812 	msr	BASEPRI_MAX, r3
    a488:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a48c:	481f      	ldr	r0, [pc, #124]	; (a50c <sys_clock_tick_get+0x94>)
    a48e:	f7fd fccb 	bl	7e28 <z_spin_lock_valid>
    a492:	b128      	cbz	r0, a4a0 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    a494:	481d      	ldr	r0, [pc, #116]	; (a50c <sys_clock_tick_get+0x94>)
    a496:	f7fd fce7 	bl	7e68 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    a49a:	2400      	movs	r4, #0
    a49c:	4625      	mov	r5, r4
	return k;
    a49e:	e014      	b.n	a4ca <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4a0:	4c1b      	ldr	r4, [pc, #108]	; (a510 <sys_clock_tick_get+0x98>)
    a4a2:	238e      	movs	r3, #142	; 0x8e
    a4a4:	4622      	mov	r2, r4
    a4a6:	491b      	ldr	r1, [pc, #108]	; (a514 <sys_clock_tick_get+0x9c>)
    a4a8:	481b      	ldr	r0, [pc, #108]	; (a518 <sys_clock_tick_get+0xa0>)
    a4aa:	f000 fd5c 	bl	af66 <assert_print>
    a4ae:	4917      	ldr	r1, [pc, #92]	; (a50c <sys_clock_tick_get+0x94>)
    a4b0:	481a      	ldr	r0, [pc, #104]	; (a51c <sys_clock_tick_get+0xa4>)
    a4b2:	f000 fd58 	bl	af66 <assert_print>
    a4b6:	218e      	movs	r1, #142	; 0x8e
    a4b8:	4620      	mov	r0, r4
    a4ba:	f000 fd4d 	bl	af58 <assert_post_action>
    a4be:	e7e9      	b.n	a494 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    a4c0:	f387 8811 	msr	BASEPRI, r7
    a4c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a4c8:	2601      	movs	r6, #1
    a4ca:	b9e6      	cbnz	r6, a506 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    a4cc:	f7fb f914 	bl	56f8 <sys_clock_elapsed>
    a4d0:	4b13      	ldr	r3, [pc, #76]	; (a520 <sys_clock_tick_get+0xa8>)
    a4d2:	681c      	ldr	r4, [r3, #0]
    a4d4:	685d      	ldr	r5, [r3, #4]
    a4d6:	1904      	adds	r4, r0, r4
    a4d8:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a4dc:	480b      	ldr	r0, [pc, #44]	; (a50c <sys_clock_tick_get+0x94>)
    a4de:	f7fd fcb3 	bl	7e48 <z_spin_unlock_valid>
    a4e2:	2800      	cmp	r0, #0
    a4e4:	d1ec      	bne.n	a4c0 <sys_clock_tick_get+0x48>
    a4e6:	4e0a      	ldr	r6, [pc, #40]	; (a510 <sys_clock_tick_get+0x98>)
    a4e8:	23b9      	movs	r3, #185	; 0xb9
    a4ea:	4632      	mov	r2, r6
    a4ec:	490d      	ldr	r1, [pc, #52]	; (a524 <sys_clock_tick_get+0xac>)
    a4ee:	480a      	ldr	r0, [pc, #40]	; (a518 <sys_clock_tick_get+0xa0>)
    a4f0:	f000 fd39 	bl	af66 <assert_print>
    a4f4:	4905      	ldr	r1, [pc, #20]	; (a50c <sys_clock_tick_get+0x94>)
    a4f6:	480c      	ldr	r0, [pc, #48]	; (a528 <sys_clock_tick_get+0xb0>)
    a4f8:	f000 fd35 	bl	af66 <assert_print>
    a4fc:	21b9      	movs	r1, #185	; 0xb9
    a4fe:	4630      	mov	r0, r6
    a500:	f000 fd2a 	bl	af58 <assert_post_action>
    a504:	e7dc      	b.n	a4c0 <sys_clock_tick_get+0x48>
	}
	return t;
}
    a506:	4620      	mov	r0, r4
    a508:	4629      	mov	r1, r5
    a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a50c:	200011a0 	.word	0x200011a0
    a510:	0000c76c 	.word	0x0000c76c
    a514:	0000c7cc 	.word	0x0000c7cc
    a518:	0000c5c0 	.word	0x0000c5c0
    a51c:	0000c7e4 	.word	0x0000c7e4
    a520:	200005f0 	.word	0x200005f0
    a524:	0000c79c 	.word	0x0000c79c
    a528:	0000c7b4 	.word	0x0000c7b4

0000a52c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a52c:	b570      	push	{r4, r5, r6, lr}
    a52e:	4604      	mov	r4, r0
	__asm__ volatile(
    a530:	f04f 0320 	mov.w	r3, #32
    a534:	f3ef 8611 	mrs	r6, BASEPRI
    a538:	f383 8812 	msr	BASEPRI_MAX, r3
    a53c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a540:	4857      	ldr	r0, [pc, #348]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a542:	f7fd fc71 	bl	7e28 <z_spin_lock_valid>
    a546:	2800      	cmp	r0, #0
    a548:	d049      	beq.n	a5de <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    a54a:	4855      	ldr	r0, [pc, #340]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a54c:	f7fd fc8c 	bl	7e68 <z_spin_lock_set_owner>
	return k;
    a550:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a552:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a556:	ea52 0103 	orrs.w	r1, r2, r3
    a55a:	d005      	beq.n	a568 <z_timer_expiration_handler+0x3c>
    a55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a560:	bf08      	it	eq
    a562:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a566:	d14a      	bne.n	a5fe <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a568:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a56a:	3301      	adds	r3, #1
    a56c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a56e:	6a23      	ldr	r3, [r4, #32]
    a570:	b1db      	cbz	r3, a5aa <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a572:	484b      	ldr	r0, [pc, #300]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a574:	f7fd fc68 	bl	7e48 <z_spin_unlock_valid>
    a578:	2800      	cmp	r0, #0
    a57a:	d047      	beq.n	a60c <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    a57c:	f386 8811 	msr	BASEPRI, r6
    a580:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    a584:	6a23      	ldr	r3, [r4, #32]
    a586:	4620      	mov	r0, r4
    a588:	4798      	blx	r3
	__asm__ volatile(
    a58a:	f04f 0320 	mov.w	r3, #32
    a58e:	f3ef 8511 	mrs	r5, BASEPRI
    a592:	f383 8812 	msr	BASEPRI_MAX, r3
    a596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a59a:	4841      	ldr	r0, [pc, #260]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a59c:	f7fd fc44 	bl	7e28 <z_spin_lock_valid>
    a5a0:	2800      	cmp	r0, #0
    a5a2:	d043      	beq.n	a62c <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    a5a4:	483e      	ldr	r0, [pc, #248]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a5a6:	f7fd fc5f 	bl	7e68 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a5aa:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    a5ae:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5b0:	42a3      	cmp	r3, r4
    a5b2:	d04b      	beq.n	a64c <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    a5b4:	2c00      	cmp	r4, #0
    a5b6:	d049      	beq.n	a64c <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    a5b8:	4620      	mov	r0, r4
    a5ba:	f7fe f9f7 	bl	89ac <z_unpend_thread_no_timeout>
    a5be:	2300      	movs	r3, #0
    a5c0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5c4:	4836      	ldr	r0, [pc, #216]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a5c6:	f7fd fc3f 	bl	7e48 <z_spin_unlock_valid>
    a5ca:	2800      	cmp	r0, #0
    a5cc:	d057      	beq.n	a67e <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    a5ce:	f385 8811 	msr	BASEPRI, r5
    a5d2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    a5d6:	4620      	mov	r0, r4
    a5d8:	f7fe fce6 	bl	8fa8 <z_ready_thread>
}
    a5dc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5de:	4d31      	ldr	r5, [pc, #196]	; (a6a4 <z_timer_expiration_handler+0x178>)
    a5e0:	238e      	movs	r3, #142	; 0x8e
    a5e2:	462a      	mov	r2, r5
    a5e4:	4930      	ldr	r1, [pc, #192]	; (a6a8 <z_timer_expiration_handler+0x17c>)
    a5e6:	4831      	ldr	r0, [pc, #196]	; (a6ac <z_timer_expiration_handler+0x180>)
    a5e8:	f000 fcbd 	bl	af66 <assert_print>
    a5ec:	492c      	ldr	r1, [pc, #176]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a5ee:	4830      	ldr	r0, [pc, #192]	; (a6b0 <z_timer_expiration_handler+0x184>)
    a5f0:	f000 fcb9 	bl	af66 <assert_print>
    a5f4:	218e      	movs	r1, #142	; 0x8e
    a5f6:	4628      	mov	r0, r5
    a5f8:	f000 fcae 	bl	af58 <assert_post_action>
    a5fc:	e7a5      	b.n	a54a <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a5fe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    a602:	492c      	ldr	r1, [pc, #176]	; (a6b4 <z_timer_expiration_handler+0x188>)
    a604:	4620      	mov	r0, r4
    a606:	f7ff fc79 	bl	9efc <z_add_timeout>
    a60a:	e7ad      	b.n	a568 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a60c:	4d25      	ldr	r5, [pc, #148]	; (a6a4 <z_timer_expiration_handler+0x178>)
    a60e:	23b9      	movs	r3, #185	; 0xb9
    a610:	462a      	mov	r2, r5
    a612:	4929      	ldr	r1, [pc, #164]	; (a6b8 <z_timer_expiration_handler+0x18c>)
    a614:	4825      	ldr	r0, [pc, #148]	; (a6ac <z_timer_expiration_handler+0x180>)
    a616:	f000 fca6 	bl	af66 <assert_print>
    a61a:	4921      	ldr	r1, [pc, #132]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a61c:	4827      	ldr	r0, [pc, #156]	; (a6bc <z_timer_expiration_handler+0x190>)
    a61e:	f000 fca2 	bl	af66 <assert_print>
    a622:	21b9      	movs	r1, #185	; 0xb9
    a624:	4628      	mov	r0, r5
    a626:	f000 fc97 	bl	af58 <assert_post_action>
    a62a:	e7a7      	b.n	a57c <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a62c:	4e1d      	ldr	r6, [pc, #116]	; (a6a4 <z_timer_expiration_handler+0x178>)
    a62e:	238e      	movs	r3, #142	; 0x8e
    a630:	4632      	mov	r2, r6
    a632:	491d      	ldr	r1, [pc, #116]	; (a6a8 <z_timer_expiration_handler+0x17c>)
    a634:	481d      	ldr	r0, [pc, #116]	; (a6ac <z_timer_expiration_handler+0x180>)
    a636:	f000 fc96 	bl	af66 <assert_print>
    a63a:	4919      	ldr	r1, [pc, #100]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a63c:	481c      	ldr	r0, [pc, #112]	; (a6b0 <z_timer_expiration_handler+0x184>)
    a63e:	f000 fc92 	bl	af66 <assert_print>
    a642:	218e      	movs	r1, #142	; 0x8e
    a644:	4630      	mov	r0, r6
    a646:	f000 fc87 	bl	af58 <assert_post_action>
    a64a:	e7ab      	b.n	a5a4 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a64c:	4814      	ldr	r0, [pc, #80]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a64e:	f7fd fbfb 	bl	7e48 <z_spin_unlock_valid>
    a652:	b120      	cbz	r0, a65e <z_timer_expiration_handler+0x132>
    a654:	f385 8811 	msr	BASEPRI, r5
    a658:	f3bf 8f6f 	isb	sy
		return;
    a65c:	e7be      	b.n	a5dc <z_timer_expiration_handler+0xb0>
    a65e:	4c11      	ldr	r4, [pc, #68]	; (a6a4 <z_timer_expiration_handler+0x178>)
    a660:	23b9      	movs	r3, #185	; 0xb9
    a662:	4622      	mov	r2, r4
    a664:	4914      	ldr	r1, [pc, #80]	; (a6b8 <z_timer_expiration_handler+0x18c>)
    a666:	4811      	ldr	r0, [pc, #68]	; (a6ac <z_timer_expiration_handler+0x180>)
    a668:	f000 fc7d 	bl	af66 <assert_print>
    a66c:	490c      	ldr	r1, [pc, #48]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a66e:	4813      	ldr	r0, [pc, #76]	; (a6bc <z_timer_expiration_handler+0x190>)
    a670:	f000 fc79 	bl	af66 <assert_print>
    a674:	21b9      	movs	r1, #185	; 0xb9
    a676:	4620      	mov	r0, r4
    a678:	f000 fc6e 	bl	af58 <assert_post_action>
    a67c:	e7ea      	b.n	a654 <z_timer_expiration_handler+0x128>
    a67e:	4e09      	ldr	r6, [pc, #36]	; (a6a4 <z_timer_expiration_handler+0x178>)
    a680:	23b9      	movs	r3, #185	; 0xb9
    a682:	4632      	mov	r2, r6
    a684:	490c      	ldr	r1, [pc, #48]	; (a6b8 <z_timer_expiration_handler+0x18c>)
    a686:	4809      	ldr	r0, [pc, #36]	; (a6ac <z_timer_expiration_handler+0x180>)
    a688:	f000 fc6d 	bl	af66 <assert_print>
    a68c:	4904      	ldr	r1, [pc, #16]	; (a6a0 <z_timer_expiration_handler+0x174>)
    a68e:	480b      	ldr	r0, [pc, #44]	; (a6bc <z_timer_expiration_handler+0x190>)
    a690:	f000 fc69 	bl	af66 <assert_print>
    a694:	21b9      	movs	r1, #185	; 0xb9
    a696:	4630      	mov	r0, r6
    a698:	f000 fc5e 	bl	af58 <assert_post_action>
    a69c:	e797      	b.n	a5ce <z_timer_expiration_handler+0xa2>
    a69e:	bf00      	nop
    a6a0:	200011a4 	.word	0x200011a4
    a6a4:	0000c76c 	.word	0x0000c76c
    a6a8:	0000c7cc 	.word	0x0000c7cc
    a6ac:	0000c5c0 	.word	0x0000c5c0
    a6b0:	0000c7e4 	.word	0x0000c7e4
    a6b4:	0000a52d 	.word	0x0000a52d
    a6b8:	0000c79c 	.word	0x0000c79c
    a6bc:	0000c7b4 	.word	0x0000c7b4

0000a6c0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6c4:	9f06      	ldr	r7, [sp, #24]
    a6c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a6ce:	bf08      	it	eq
    a6d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a6d4:	d02f      	beq.n	a736 <z_impl_k_timer_start+0x76>
    a6d6:	4605      	mov	r5, r0
    a6d8:	4614      	mov	r4, r2
    a6da:	461e      	mov	r6, r3
    a6dc:	4611      	mov	r1, r2
    a6de:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a6e0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a6e4:	bf08      	it	eq
    a6e6:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    a6ea:	d00d      	beq.n	a708 <z_impl_k_timer_start+0x48>
    a6ec:	ea57 0c08 	orrs.w	ip, r7, r8
    a6f0:	d00a      	beq.n	a708 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    a6f2:	f06f 0c01 	mvn.w	ip, #1
    a6f6:	ebbc 0c07 	subs.w	ip, ip, r7
    a6fa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    a6fe:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    a702:	f1bc 0f00 	cmp.w	ip, #0
    a706:	db18      	blt.n	a73a <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    a708:	f06f 0301 	mvn.w	r3, #1
    a70c:	1a5b      	subs	r3, r3, r1
    a70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a712:	eb63 0300 	sbc.w	r3, r3, r0
    a716:	2b00      	cmp	r3, #0
    a718:	db1a      	blt.n	a750 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    a71a:	4628      	mov	r0, r5
    a71c:	f7ff fcd2 	bl	a0c4 <z_abort_timeout>
	timer->period = period;
    a720:	62af      	str	r7, [r5, #40]	; 0x28
    a722:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    a726:	2300      	movs	r3, #0
    a728:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a72a:	4622      	mov	r2, r4
    a72c:	4633      	mov	r3, r6
    a72e:	490e      	ldr	r1, [pc, #56]	; (a768 <z_impl_k_timer_start+0xa8>)
    a730:	4628      	mov	r0, r5
    a732:	f7ff fbe3 	bl	9efc <z_add_timeout>
		     duration);
}
    a736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    a73a:	2f02      	cmp	r7, #2
    a73c:	f178 0300 	sbcs.w	r3, r8, #0
    a740:	da02      	bge.n	a748 <z_impl_k_timer_start+0x88>
    a742:	2702      	movs	r7, #2
    a744:	f04f 0800 	mov.w	r8, #0
    a748:	3f01      	subs	r7, #1
    a74a:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    a74e:	e7db      	b.n	a708 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    a750:	460c      	mov	r4, r1
    a752:	4606      	mov	r6, r0
    a754:	2901      	cmp	r1, #1
    a756:	f170 0300 	sbcs.w	r3, r0, #0
    a75a:	da01      	bge.n	a760 <z_impl_k_timer_start+0xa0>
    a75c:	2401      	movs	r4, #1
    a75e:	2600      	movs	r6, #0
    a760:	3c01      	subs	r4, #1
    a762:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    a766:	e7d8      	b.n	a71a <z_impl_k_timer_start+0x5a>
    a768:	0000a52d 	.word	0x0000a52d

0000a76c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    a76c:	4b01      	ldr	r3, [pc, #4]	; (a774 <k_thread_system_pool_assign+0x8>)
    a76e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    a772:	4770      	bx	lr
    a774:	200001f8 	.word	0x200001f8

0000a778 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    a778:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    a77a:	4a03      	ldr	r2, [pc, #12]	; (a788 <boot_banner+0x10>)
    a77c:	4903      	ldr	r1, [pc, #12]	; (a78c <boot_banner+0x14>)
    a77e:	4804      	ldr	r0, [pc, #16]	; (a790 <boot_banner+0x18>)
    a780:	f000 fa6c 	bl	ac5c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    a784:	bd08      	pop	{r3, pc}
    a786:	bf00      	nop
    a788:	0000d4cc 	.word	0x0000d4cc
    a78c:	0000e1a8 	.word	0x0000e1a8
    a790:	0000e1b8 	.word	0x0000e1b8

0000a794 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    a794:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a796:	4c0f      	ldr	r4, [pc, #60]	; (a7d4 <statics_init+0x40>)
    a798:	e008      	b.n	a7ac <statics_init+0x18>
    a79a:	4b0f      	ldr	r3, [pc, #60]	; (a7d8 <statics_init+0x44>)
    a79c:	429c      	cmp	r4, r3
    a79e:	d217      	bcs.n	a7d0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    a7a0:	68a2      	ldr	r2, [r4, #8]
    a7a2:	6861      	ldr	r1, [r4, #4]
    a7a4:	4620      	mov	r0, r4
    a7a6:	f001 fb7f 	bl	bea8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    a7aa:	3418      	adds	r4, #24
    a7ac:	4b0a      	ldr	r3, [pc, #40]	; (a7d8 <statics_init+0x44>)
    a7ae:	429c      	cmp	r4, r3
    a7b0:	d9f3      	bls.n	a79a <statics_init+0x6>
    a7b2:	4d0a      	ldr	r5, [pc, #40]	; (a7dc <statics_init+0x48>)
    a7b4:	2318      	movs	r3, #24
    a7b6:	462a      	mov	r2, r5
    a7b8:	4909      	ldr	r1, [pc, #36]	; (a7e0 <statics_init+0x4c>)
    a7ba:	480a      	ldr	r0, [pc, #40]	; (a7e4 <statics_init+0x50>)
    a7bc:	f000 fbd3 	bl	af66 <assert_print>
    a7c0:	4809      	ldr	r0, [pc, #36]	; (a7e8 <statics_init+0x54>)
    a7c2:	f000 fbd0 	bl	af66 <assert_print>
    a7c6:	2118      	movs	r1, #24
    a7c8:	4628      	mov	r0, r5
    a7ca:	f000 fbc5 	bl	af58 <assert_post_action>
    a7ce:	e7e4      	b.n	a79a <statics_init+0x6>
		}
	}
	return 0;
}
    a7d0:	2000      	movs	r0, #0
    a7d2:	bd38      	pop	{r3, r4, r5, pc}
    a7d4:	200001f8 	.word	0x200001f8
    a7d8:	20000210 	.word	0x20000210
    a7dc:	0000e1e0 	.word	0x0000e1e0
    a7e0:	0000e204 	.word	0x0000e204
    a7e4:	0000c5c0 	.word	0x0000c5c0
    a7e8:	0000dd28 	.word	0x0000dd28

0000a7ec <nrf_cc3xx_platform_init_no_rng>:
    a7ec:	b510      	push	{r4, lr}
    a7ee:	4c0a      	ldr	r4, [pc, #40]	; (a818 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a7f0:	6823      	ldr	r3, [r4, #0]
    a7f2:	b11b      	cbz	r3, a7fc <nrf_cc3xx_platform_init_no_rng+0x10>
    a7f4:	2301      	movs	r3, #1
    a7f6:	6023      	str	r3, [r4, #0]
    a7f8:	2000      	movs	r0, #0
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	f000 f8ce 	bl	a99c <CC_LibInitNoRng>
    a800:	2800      	cmp	r0, #0
    a802:	d0f7      	beq.n	a7f4 <nrf_cc3xx_platform_init_no_rng+0x8>
    a804:	3801      	subs	r0, #1
    a806:	2806      	cmp	r0, #6
    a808:	d803      	bhi.n	a812 <nrf_cc3xx_platform_init_no_rng+0x26>
    a80a:	4b04      	ldr	r3, [pc, #16]	; (a81c <nrf_cc3xx_platform_init_no_rng+0x30>)
    a80c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a810:	bd10      	pop	{r4, pc}
    a812:	4803      	ldr	r0, [pc, #12]	; (a820 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a814:	bd10      	pop	{r4, pc}
    a816:	bf00      	nop
    a818:	200011a8 	.word	0x200011a8
    a81c:	0000e21c 	.word	0x0000e21c
    a820:	ffff8ffe 	.word	0xffff8ffe

0000a824 <nrf_cc3xx_platform_abort>:
    a824:	f3bf 8f4f 	dsb	sy
    a828:	4905      	ldr	r1, [pc, #20]	; (a840 <nrf_cc3xx_platform_abort+0x1c>)
    a82a:	4b06      	ldr	r3, [pc, #24]	; (a844 <nrf_cc3xx_platform_abort+0x20>)
    a82c:	68ca      	ldr	r2, [r1, #12]
    a82e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a832:	4313      	orrs	r3, r2
    a834:	60cb      	str	r3, [r1, #12]
    a836:	f3bf 8f4f 	dsb	sy
    a83a:	bf00      	nop
    a83c:	e7fd      	b.n	a83a <nrf_cc3xx_platform_abort+0x16>
    a83e:	bf00      	nop
    a840:	e000ed00 	.word	0xe000ed00
    a844:	05fa0004 	.word	0x05fa0004

0000a848 <CC_PalAbort>:
    a848:	b410      	push	{r4}
    a84a:	4b09      	ldr	r3, [pc, #36]	; (a870 <CC_PalAbort+0x28>)
    a84c:	4909      	ldr	r1, [pc, #36]	; (a874 <CC_PalAbort+0x2c>)
    a84e:	4c0a      	ldr	r4, [pc, #40]	; (a878 <CC_PalAbort+0x30>)
    a850:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a854:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a858:	6849      	ldr	r1, [r1, #4]
    a85a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a85e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a862:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a866:	2300      	movs	r3, #0
    a868:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a86c:	bc10      	pop	{r4}
    a86e:	4708      	bx	r1
    a870:	5002b000 	.word	0x5002b000
    a874:	2000017c 	.word	0x2000017c
    a878:	5002a000 	.word	0x5002a000

0000a87c <nrf_cc3xx_platform_set_abort>:
    a87c:	e9d0 1200 	ldrd	r1, r2, [r0]
    a880:	4b01      	ldr	r3, [pc, #4]	; (a888 <nrf_cc3xx_platform_set_abort+0xc>)
    a882:	e9c3 1200 	strd	r1, r2, [r3]
    a886:	4770      	bx	lr
    a888:	2000017c 	.word	0x2000017c

0000a88c <mutex_free>:
    a88c:	b510      	push	{r4, lr}
    a88e:	4604      	mov	r4, r0
    a890:	b130      	cbz	r0, a8a0 <mutex_free+0x14>
    a892:	6863      	ldr	r3, [r4, #4]
    a894:	06db      	lsls	r3, r3, #27
    a896:	d502      	bpl.n	a89e <mutex_free+0x12>
    a898:	2300      	movs	r3, #0
    a89a:	6023      	str	r3, [r4, #0]
    a89c:	6063      	str	r3, [r4, #4]
    a89e:	bd10      	pop	{r4, pc}
    a8a0:	4b02      	ldr	r3, [pc, #8]	; (a8ac <mutex_free+0x20>)
    a8a2:	4803      	ldr	r0, [pc, #12]	; (a8b0 <mutex_free+0x24>)
    a8a4:	685b      	ldr	r3, [r3, #4]
    a8a6:	4798      	blx	r3
    a8a8:	e7f3      	b.n	a892 <mutex_free+0x6>
    a8aa:	bf00      	nop
    a8ac:	2000017c 	.word	0x2000017c
    a8b0:	0000e238 	.word	0x0000e238

0000a8b4 <mutex_lock>:
    a8b4:	b1b0      	cbz	r0, a8e4 <mutex_lock+0x30>
    a8b6:	6843      	ldr	r3, [r0, #4]
    a8b8:	b193      	cbz	r3, a8e0 <mutex_lock+0x2c>
    a8ba:	06db      	lsls	r3, r3, #27
    a8bc:	d50e      	bpl.n	a8dc <mutex_lock+0x28>
    a8be:	2301      	movs	r3, #1
    a8c0:	e850 2f00 	ldrex	r2, [r0]
    a8c4:	4619      	mov	r1, r3
    a8c6:	e840 1c00 	strex	ip, r1, [r0]
    a8ca:	f09c 0f00 	teq	ip, #0
    a8ce:	d1f7      	bne.n	a8c0 <mutex_lock+0xc>
    a8d0:	2a01      	cmp	r2, #1
    a8d2:	d0f5      	beq.n	a8c0 <mutex_lock+0xc>
    a8d4:	f3bf 8f5f 	dmb	sy
    a8d8:	2000      	movs	r0, #0
    a8da:	4770      	bx	lr
    a8dc:	4803      	ldr	r0, [pc, #12]	; (a8ec <mutex_lock+0x38>)
    a8de:	4770      	bx	lr
    a8e0:	4803      	ldr	r0, [pc, #12]	; (a8f0 <mutex_lock+0x3c>)
    a8e2:	4770      	bx	lr
    a8e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a8e8:	4770      	bx	lr
    a8ea:	bf00      	nop
    a8ec:	ffff8fe9 	.word	0xffff8fe9
    a8f0:	ffff8fea 	.word	0xffff8fea

0000a8f4 <mutex_unlock>:
    a8f4:	b168      	cbz	r0, a912 <mutex_unlock+0x1e>
    a8f6:	6843      	ldr	r3, [r0, #4]
    a8f8:	b13b      	cbz	r3, a90a <mutex_unlock+0x16>
    a8fa:	06db      	lsls	r3, r3, #27
    a8fc:	d507      	bpl.n	a90e <mutex_unlock+0x1a>
    a8fe:	f3bf 8f5f 	dmb	sy
    a902:	2300      	movs	r3, #0
    a904:	6003      	str	r3, [r0, #0]
    a906:	4618      	mov	r0, r3
    a908:	4770      	bx	lr
    a90a:	4803      	ldr	r0, [pc, #12]	; (a918 <mutex_unlock+0x24>)
    a90c:	4770      	bx	lr
    a90e:	4803      	ldr	r0, [pc, #12]	; (a91c <mutex_unlock+0x28>)
    a910:	4770      	bx	lr
    a912:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a916:	4770      	bx	lr
    a918:	ffff8fea 	.word	0xffff8fea
    a91c:	ffff8fe9 	.word	0xffff8fe9

0000a920 <mutex_init>:
    a920:	b510      	push	{r4, lr}
    a922:	4604      	mov	r4, r0
    a924:	b120      	cbz	r0, a930 <mutex_init+0x10>
    a926:	2200      	movs	r2, #0
    a928:	2311      	movs	r3, #17
    a92a:	6022      	str	r2, [r4, #0]
    a92c:	6063      	str	r3, [r4, #4]
    a92e:	bd10      	pop	{r4, pc}
    a930:	4801      	ldr	r0, [pc, #4]	; (a938 <mutex_init+0x18>)
    a932:	f7ff ff89 	bl	a848 <CC_PalAbort>
    a936:	e7f6      	b.n	a926 <mutex_init+0x6>
    a938:	0000e260 	.word	0x0000e260

0000a93c <nrf_cc3xx_platform_set_mutexes>:
    a93c:	b570      	push	{r4, r5, r6, lr}
    a93e:	e9d0 2300 	ldrd	r2, r3, [r0]
    a942:	4c13      	ldr	r4, [pc, #76]	; (a990 <nrf_cc3xx_platform_set_mutexes+0x54>)
    a944:	4d13      	ldr	r5, [pc, #76]	; (a994 <nrf_cc3xx_platform_set_mutexes+0x58>)
    a946:	6063      	str	r3, [r4, #4]
    a948:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a94c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a950:	6022      	str	r2, [r4, #0]
    a952:	4b11      	ldr	r3, [pc, #68]	; (a998 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a954:	6808      	ldr	r0, [r1, #0]
    a956:	6018      	str	r0, [r3, #0]
    a958:	6848      	ldr	r0, [r1, #4]
    a95a:	6058      	str	r0, [r3, #4]
    a95c:	6888      	ldr	r0, [r1, #8]
    a95e:	6098      	str	r0, [r3, #8]
    a960:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a964:	60d8      	str	r0, [r3, #12]
    a966:	6119      	str	r1, [r3, #16]
    a968:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a96c:	06db      	lsls	r3, r3, #27
    a96e:	d50d      	bpl.n	a98c <nrf_cc3xx_platform_set_mutexes+0x50>
    a970:	2300      	movs	r3, #0
    a972:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a976:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a97a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a97e:	4790      	blx	r2
    a980:	6823      	ldr	r3, [r4, #0]
    a982:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a98a:	4718      	bx	r3
    a98c:	bd70      	pop	{r4, r5, r6, pc}
    a98e:	bf00      	nop
    a990:	2000018c 	.word	0x2000018c
    a994:	200011c0 	.word	0x200011c0
    a998:	2000019c 	.word	0x2000019c

0000a99c <CC_LibInitNoRng>:
    a99c:	b538      	push	{r3, r4, r5, lr}
    a99e:	f000 f82f 	bl	aa00 <CC_HalInit>
    a9a2:	b120      	cbz	r0, a9ae <CC_LibInitNoRng+0x12>
    a9a4:	2403      	movs	r4, #3
    a9a6:	f000 f863 	bl	aa70 <CC_PalTerminate>
    a9aa:	4620      	mov	r0, r4
    a9ac:	bd38      	pop	{r3, r4, r5, pc}
    a9ae:	f000 f831 	bl	aa14 <CC_PalInit>
    a9b2:	b998      	cbnz	r0, a9dc <CC_LibInitNoRng+0x40>
    a9b4:	f000 f8ac 	bl	ab10 <CC_PalPowerSaveModeSelect>
    a9b8:	b998      	cbnz	r0, a9e2 <CC_LibInitNoRng+0x46>
    a9ba:	4d0f      	ldr	r5, [pc, #60]	; (a9f8 <CC_LibInitNoRng+0x5c>)
    a9bc:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a9c0:	0e1b      	lsrs	r3, r3, #24
    a9c2:	2bf0      	cmp	r3, #240	; 0xf0
    a9c4:	d108      	bne.n	a9d8 <CC_LibInitNoRng+0x3c>
    a9c6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a9ca:	4b0c      	ldr	r3, [pc, #48]	; (a9fc <CC_LibInitNoRng+0x60>)
    a9cc:	429a      	cmp	r2, r3
    a9ce:	d00a      	beq.n	a9e6 <CC_LibInitNoRng+0x4a>
    a9d0:	2407      	movs	r4, #7
    a9d2:	f000 f817 	bl	aa04 <CC_HalTerminate>
    a9d6:	e7e6      	b.n	a9a6 <CC_LibInitNoRng+0xa>
    a9d8:	2406      	movs	r4, #6
    a9da:	e7fa      	b.n	a9d2 <CC_LibInitNoRng+0x36>
    a9dc:	2404      	movs	r4, #4
    a9de:	4620      	mov	r0, r4
    a9e0:	bd38      	pop	{r3, r4, r5, pc}
    a9e2:	2400      	movs	r4, #0
    a9e4:	e7f5      	b.n	a9d2 <CC_LibInitNoRng+0x36>
    a9e6:	2001      	movs	r0, #1
    a9e8:	f000 f892 	bl	ab10 <CC_PalPowerSaveModeSelect>
    a9ec:	4604      	mov	r4, r0
    a9ee:	2800      	cmp	r0, #0
    a9f0:	d1f7      	bne.n	a9e2 <CC_LibInitNoRng+0x46>
    a9f2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a9f6:	e7d8      	b.n	a9aa <CC_LibInitNoRng+0xe>
    a9f8:	5002b000 	.word	0x5002b000
    a9fc:	20e00000 	.word	0x20e00000

0000aa00 <CC_HalInit>:
    aa00:	2000      	movs	r0, #0
    aa02:	4770      	bx	lr

0000aa04 <CC_HalTerminate>:
    aa04:	2000      	movs	r0, #0
    aa06:	4770      	bx	lr

0000aa08 <CC_HalMaskInterrupt>:
    aa08:	4b01      	ldr	r3, [pc, #4]	; (aa10 <CC_HalMaskInterrupt+0x8>)
    aa0a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    aa0e:	4770      	bx	lr
    aa10:	5002b000 	.word	0x5002b000

0000aa14 <CC_PalInit>:
    aa14:	b510      	push	{r4, lr}
    aa16:	4811      	ldr	r0, [pc, #68]	; (aa5c <CC_PalInit+0x48>)
    aa18:	f000 f848 	bl	aaac <CC_PalMutexCreate>
    aa1c:	b100      	cbz	r0, aa20 <CC_PalInit+0xc>
    aa1e:	bd10      	pop	{r4, pc}
    aa20:	480f      	ldr	r0, [pc, #60]	; (aa60 <CC_PalInit+0x4c>)
    aa22:	f000 f843 	bl	aaac <CC_PalMutexCreate>
    aa26:	2800      	cmp	r0, #0
    aa28:	d1f9      	bne.n	aa1e <CC_PalInit+0xa>
    aa2a:	4c0e      	ldr	r4, [pc, #56]	; (aa64 <CC_PalInit+0x50>)
    aa2c:	4620      	mov	r0, r4
    aa2e:	f000 f83d 	bl	aaac <CC_PalMutexCreate>
    aa32:	2800      	cmp	r0, #0
    aa34:	d1f3      	bne.n	aa1e <CC_PalInit+0xa>
    aa36:	4b0c      	ldr	r3, [pc, #48]	; (aa68 <CC_PalInit+0x54>)
    aa38:	480c      	ldr	r0, [pc, #48]	; (aa6c <CC_PalInit+0x58>)
    aa3a:	601c      	str	r4, [r3, #0]
    aa3c:	f000 f836 	bl	aaac <CC_PalMutexCreate>
    aa40:	4601      	mov	r1, r0
    aa42:	2800      	cmp	r0, #0
    aa44:	d1eb      	bne.n	aa1e <CC_PalInit+0xa>
    aa46:	f000 f82d 	bl	aaa4 <CC_PalDmaInit>
    aa4a:	4604      	mov	r4, r0
    aa4c:	b108      	cbz	r0, aa52 <CC_PalInit+0x3e>
    aa4e:	4620      	mov	r0, r4
    aa50:	bd10      	pop	{r4, pc}
    aa52:	f000 f83f 	bl	aad4 <CC_PalPowerSaveModeInit>
    aa56:	4620      	mov	r0, r4
    aa58:	e7fa      	b.n	aa50 <CC_PalInit+0x3c>
    aa5a:	bf00      	nop
    aa5c:	200001d4 	.word	0x200001d4
    aa60:	200001c8 	.word	0x200001c8
    aa64:	200001d0 	.word	0x200001d0
    aa68:	200001d8 	.word	0x200001d8
    aa6c:	200001cc 	.word	0x200001cc

0000aa70 <CC_PalTerminate>:
    aa70:	b508      	push	{r3, lr}
    aa72:	4808      	ldr	r0, [pc, #32]	; (aa94 <CC_PalTerminate+0x24>)
    aa74:	f000 f824 	bl	aac0 <CC_PalMutexDestroy>
    aa78:	4807      	ldr	r0, [pc, #28]	; (aa98 <CC_PalTerminate+0x28>)
    aa7a:	f000 f821 	bl	aac0 <CC_PalMutexDestroy>
    aa7e:	4807      	ldr	r0, [pc, #28]	; (aa9c <CC_PalTerminate+0x2c>)
    aa80:	f000 f81e 	bl	aac0 <CC_PalMutexDestroy>
    aa84:	4806      	ldr	r0, [pc, #24]	; (aaa0 <CC_PalTerminate+0x30>)
    aa86:	f000 f81b 	bl	aac0 <CC_PalMutexDestroy>
    aa8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa8e:	f000 b80b 	b.w	aaa8 <CC_PalDmaTerminate>
    aa92:	bf00      	nop
    aa94:	200001d4 	.word	0x200001d4
    aa98:	200001c8 	.word	0x200001c8
    aa9c:	200001d0 	.word	0x200001d0
    aaa0:	200001cc 	.word	0x200001cc

0000aaa4 <CC_PalDmaInit>:
    aaa4:	2000      	movs	r0, #0
    aaa6:	4770      	bx	lr

0000aaa8 <CC_PalDmaTerminate>:
    aaa8:	4770      	bx	lr
    aaaa:	bf00      	nop

0000aaac <CC_PalMutexCreate>:
    aaac:	b508      	push	{r3, lr}
    aaae:	4b03      	ldr	r3, [pc, #12]	; (aabc <CC_PalMutexCreate+0x10>)
    aab0:	6802      	ldr	r2, [r0, #0]
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	6810      	ldr	r0, [r2, #0]
    aab6:	4798      	blx	r3
    aab8:	2000      	movs	r0, #0
    aaba:	bd08      	pop	{r3, pc}
    aabc:	2000018c 	.word	0x2000018c

0000aac0 <CC_PalMutexDestroy>:
    aac0:	b508      	push	{r3, lr}
    aac2:	4b03      	ldr	r3, [pc, #12]	; (aad0 <CC_PalMutexDestroy+0x10>)
    aac4:	6802      	ldr	r2, [r0, #0]
    aac6:	685b      	ldr	r3, [r3, #4]
    aac8:	6810      	ldr	r0, [r2, #0]
    aaca:	4798      	blx	r3
    aacc:	2000      	movs	r0, #0
    aace:	bd08      	pop	{r3, pc}
    aad0:	2000018c 	.word	0x2000018c

0000aad4 <CC_PalPowerSaveModeInit>:
    aad4:	b570      	push	{r4, r5, r6, lr}
    aad6:	4c09      	ldr	r4, [pc, #36]	; (aafc <CC_PalPowerSaveModeInit+0x28>)
    aad8:	4d09      	ldr	r5, [pc, #36]	; (ab00 <CC_PalPowerSaveModeInit+0x2c>)
    aada:	6920      	ldr	r0, [r4, #16]
    aadc:	68ab      	ldr	r3, [r5, #8]
    aade:	4798      	blx	r3
    aae0:	b118      	cbz	r0, aaea <CC_PalPowerSaveModeInit+0x16>
    aae2:	4b08      	ldr	r3, [pc, #32]	; (ab04 <CC_PalPowerSaveModeInit+0x30>)
    aae4:	4808      	ldr	r0, [pc, #32]	; (ab08 <CC_PalPowerSaveModeInit+0x34>)
    aae6:	685b      	ldr	r3, [r3, #4]
    aae8:	4798      	blx	r3
    aaea:	4a08      	ldr	r2, [pc, #32]	; (ab0c <CC_PalPowerSaveModeInit+0x38>)
    aaec:	68eb      	ldr	r3, [r5, #12]
    aaee:	6920      	ldr	r0, [r4, #16]
    aaf0:	2100      	movs	r1, #0
    aaf2:	6011      	str	r1, [r2, #0]
    aaf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aaf8:	4718      	bx	r3
    aafa:	bf00      	nop
    aafc:	2000019c 	.word	0x2000019c
    ab00:	2000018c 	.word	0x2000018c
    ab04:	2000017c 	.word	0x2000017c
    ab08:	0000e284 	.word	0x0000e284
    ab0c:	200011bc 	.word	0x200011bc

0000ab10 <CC_PalPowerSaveModeSelect>:
    ab10:	b570      	push	{r4, r5, r6, lr}
    ab12:	4d1b      	ldr	r5, [pc, #108]	; (ab80 <CC_PalPowerSaveModeSelect+0x70>)
    ab14:	4e1b      	ldr	r6, [pc, #108]	; (ab84 <CC_PalPowerSaveModeSelect+0x74>)
    ab16:	4604      	mov	r4, r0
    ab18:	68b2      	ldr	r2, [r6, #8]
    ab1a:	6928      	ldr	r0, [r5, #16]
    ab1c:	4790      	blx	r2
    ab1e:	b9f8      	cbnz	r0, ab60 <CC_PalPowerSaveModeSelect+0x50>
    ab20:	b15c      	cbz	r4, ab3a <CC_PalPowerSaveModeSelect+0x2a>
    ab22:	4c19      	ldr	r4, [pc, #100]	; (ab88 <CC_PalPowerSaveModeSelect+0x78>)
    ab24:	6823      	ldr	r3, [r4, #0]
    ab26:	b1b3      	cbz	r3, ab56 <CC_PalPowerSaveModeSelect+0x46>
    ab28:	2b01      	cmp	r3, #1
    ab2a:	d01b      	beq.n	ab64 <CC_PalPowerSaveModeSelect+0x54>
    ab2c:	3b01      	subs	r3, #1
    ab2e:	6023      	str	r3, [r4, #0]
    ab30:	6928      	ldr	r0, [r5, #16]
    ab32:	68f3      	ldr	r3, [r6, #12]
    ab34:	4798      	blx	r3
    ab36:	2000      	movs	r0, #0
    ab38:	bd70      	pop	{r4, r5, r6, pc}
    ab3a:	4c13      	ldr	r4, [pc, #76]	; (ab88 <CC_PalPowerSaveModeSelect+0x78>)
    ab3c:	6821      	ldr	r1, [r4, #0]
    ab3e:	b941      	cbnz	r1, ab52 <CC_PalPowerSaveModeSelect+0x42>
    ab40:	4b12      	ldr	r3, [pc, #72]	; (ab8c <CC_PalPowerSaveModeSelect+0x7c>)
    ab42:	2201      	movs	r2, #1
    ab44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    ab48:	4a11      	ldr	r2, [pc, #68]	; (ab90 <CC_PalPowerSaveModeSelect+0x80>)
    ab4a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d1fb      	bne.n	ab4a <CC_PalPowerSaveModeSelect+0x3a>
    ab52:	3101      	adds	r1, #1
    ab54:	6021      	str	r1, [r4, #0]
    ab56:	68f3      	ldr	r3, [r6, #12]
    ab58:	6928      	ldr	r0, [r5, #16]
    ab5a:	4798      	blx	r3
    ab5c:	2000      	movs	r0, #0
    ab5e:	bd70      	pop	{r4, r5, r6, pc}
    ab60:	480c      	ldr	r0, [pc, #48]	; (ab94 <CC_PalPowerSaveModeSelect+0x84>)
    ab62:	bd70      	pop	{r4, r5, r6, pc}
    ab64:	4a0a      	ldr	r2, [pc, #40]	; (ab90 <CC_PalPowerSaveModeSelect+0x80>)
    ab66:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d1fb      	bne.n	ab66 <CC_PalPowerSaveModeSelect+0x56>
    ab6e:	4a07      	ldr	r2, [pc, #28]	; (ab8c <CC_PalPowerSaveModeSelect+0x7c>)
    ab70:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    ab74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    ab78:	f7ff ff46 	bl	aa08 <CC_HalMaskInterrupt>
    ab7c:	6823      	ldr	r3, [r4, #0]
    ab7e:	e7d5      	b.n	ab2c <CC_PalPowerSaveModeSelect+0x1c>
    ab80:	2000019c 	.word	0x2000019c
    ab84:	2000018c 	.word	0x2000018c
    ab88:	200011bc 	.word	0x200011bc
    ab8c:	5002a000 	.word	0x5002a000
    ab90:	5002b000 	.word	0x5002b000
    ab94:	ffff8fe9 	.word	0xffff8fe9

0000ab98 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ab98:	4770      	bx	lr

0000ab9a <precedentsAverage>:
}


uint16_t precedentsAverage(uint16_t* precedents, uint16_t current_read, uint16_t precedents_size) {
    uint16_t sum = 0;
    for (uint16_t i = 0; i < precedents_size; i++)
    ab9a:	2300      	movs	r3, #0
    uint16_t sum = 0;
    ab9c:	4619      	mov	r1, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    ab9e:	e005      	b.n	abac <precedentsAverage+0x12>
        sum += precedents[i];
    aba0:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
    aba4:	4461      	add	r1, ip
    aba6:	b289      	uxth	r1, r1
    for (uint16_t i = 0; i < precedents_size; i++)
    aba8:	3301      	adds	r3, #1
    abaa:	b29b      	uxth	r3, r3
    abac:	4293      	cmp	r3, r2
    abae:	d3f7      	bcc.n	aba0 <precedentsAverage+0x6>
    return sum / precedents_size;
}
    abb0:	fbb1 f0f2 	udiv	r0, r1, r2
    abb4:	4770      	bx	lr

0000abb6 <cbprintf_via_va_list>:
{
    abb6:	b510      	push	{r4, lr}
    abb8:	460c      	mov	r4, r1
    abba:	4611      	mov	r1, r2
    abbc:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    abbe:	9b02      	ldr	r3, [sp, #8]
    abc0:	47a0      	blx	r4
}
    abc2:	bd10      	pop	{r4, pc}

0000abc4 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    abc4:	b353      	cbz	r3, ac1c <cbpprintf_external+0x58>
{
    abc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abca:	b082      	sub	sp, #8
    abcc:	4607      	mov	r7, r0
    abce:	4688      	mov	r8, r1
    abd0:	4691      	mov	r9, r2
    abd2:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    abd4:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    abd6:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    abd8:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    abda:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    abdc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    abe0:	441c      	add	r4, r3
    abe2:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    abe4:	f04f 0a00 	mov.w	sl, #0
    abe8:	e00a      	b.n	ac00 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    abea:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    abee:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    abf2:	4620      	mov	r0, r4
    abf4:	f000 fb31 	bl	b25a <strlen>
    abf8:	3001      	adds	r0, #1
    abfa:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    abfc:	f10a 0a01 	add.w	sl, sl, #1
    ac00:	45b2      	cmp	sl, r6
    ac02:	d3f2      	bcc.n	abea <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    ac04:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    ac08:	9300      	str	r3, [sp, #0]
    ac0a:	686b      	ldr	r3, [r5, #4]
    ac0c:	464a      	mov	r2, r9
    ac0e:	4641      	mov	r1, r8
    ac10:	4638      	mov	r0, r7
    ac12:	f7ff ffd0 	bl	abb6 <cbprintf_via_va_list>
}
    ac16:	b002      	add	sp, #8
    ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    ac1c:	f06f 0015 	mvn.w	r0, #21
}
    ac20:	4770      	bx	lr

0000ac22 <sys_notify_validate>:
	if (notify == NULL) {
    ac22:	4602      	mov	r2, r0
    ac24:	b158      	cbz	r0, ac3e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ac26:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ac28:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    ac2c:	2b01      	cmp	r3, #1
    ac2e:	d003      	beq.n	ac38 <sys_notify_validate+0x16>
    ac30:	2b03      	cmp	r3, #3
    ac32:	d107      	bne.n	ac44 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    ac34:	6803      	ldr	r3, [r0, #0]
    ac36:	b143      	cbz	r3, ac4a <sys_notify_validate+0x28>
		notify->result = 0;
    ac38:	2000      	movs	r0, #0
    ac3a:	6090      	str	r0, [r2, #8]
    ac3c:	4770      	bx	lr
		return -EINVAL;
    ac3e:	f06f 0015 	mvn.w	r0, #21
    ac42:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    ac44:	f06f 0015 	mvn.w	r0, #21
    ac48:	4770      	bx	lr
			rv = -EINVAL;
    ac4a:	f06f 0015 	mvn.w	r0, #21
}
    ac4e:	4770      	bx	lr

0000ac50 <arch_printk_char_out>:
}
    ac50:	2000      	movs	r0, #0
    ac52:	4770      	bx	lr

0000ac54 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    ac54:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    ac56:	f000 f99d 	bl	af94 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    ac5a:	bd08      	pop	{r3, pc}

0000ac5c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    ac5c:	b40f      	push	{r0, r1, r2, r3}
    ac5e:	b500      	push	{lr}
    ac60:	b083      	sub	sp, #12
    ac62:	a904      	add	r1, sp, #16
    ac64:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    ac68:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    ac6a:	f7ff fff3 	bl	ac54 <vprintk>

	va_end(ap);
}
    ac6e:	b003      	add	sp, #12
    ac70:	f85d eb04 	ldr.w	lr, [sp], #4
    ac74:	b004      	add	sp, #16
    ac76:	4770      	bx	lr

0000ac78 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    ac78:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ac7c:	8b81      	ldrh	r1, [r0, #28]
    ac7e:	f021 0107 	bic.w	r1, r1, #7
    ac82:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    ac84:	8381      	strh	r1, [r0, #28]
}
    ac86:	4770      	bx	lr

0000ac88 <notify_monitors>:
{
    ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac8c:	4606      	mov	r6, r0
    ac8e:	460f      	mov	r7, r1
    ac90:	4690      	mov	r8, r2
	return list->head;
    ac92:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ac94:	b119      	cbz	r1, ac9e <notify_monitors+0x16>
    ac96:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    ac98:	b131      	cbz	r1, aca8 <notify_monitors+0x20>
	return node->next;
    ac9a:	680c      	ldr	r4, [r1, #0]
    ac9c:	e004      	b.n	aca8 <notify_monitors+0x20>
    ac9e:	460c      	mov	r4, r1
    aca0:	e002      	b.n	aca8 <notify_monitors+0x20>
    aca2:	4623      	mov	r3, r4
    aca4:	4621      	mov	r1, r4
    aca6:	461c      	mov	r4, r3
    aca8:	b159      	cbz	r1, acc2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    acaa:	684d      	ldr	r5, [r1, #4]
    acac:	4643      	mov	r3, r8
    acae:	463a      	mov	r2, r7
    acb0:	4630      	mov	r0, r6
    acb2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    acb4:	2c00      	cmp	r4, #0
    acb6:	d0f4      	beq.n	aca2 <notify_monitors+0x1a>
    acb8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    acba:	2c00      	cmp	r4, #0
    acbc:	d0f2      	beq.n	aca4 <notify_monitors+0x1c>
	return node->next;
    acbe:	6823      	ldr	r3, [r4, #0]
    acc0:	e7f0      	b.n	aca4 <notify_monitors+0x1c>
}
    acc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000acc6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    acc6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    acc8:	f013 0307 	ands.w	r3, r3, #7
    accc:	d103      	bne.n	acd6 <process_recheck+0x10>
	return list->head;
    acce:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    acd0:	b10a      	cbz	r2, acd6 <process_recheck+0x10>
		evt = EVT_START;
    acd2:	2003      	movs	r0, #3
    acd4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    acd6:	2b02      	cmp	r3, #2
    acd8:	d003      	beq.n	ace2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    acda:	2b01      	cmp	r3, #1
    acdc:	d006      	beq.n	acec <process_recheck+0x26>
	int evt = EVT_NOP;
    acde:	2000      	movs	r0, #0
    ace0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    ace2:	8bc2      	ldrh	r2, [r0, #30]
    ace4:	2a00      	cmp	r2, #0
    ace6:	d1f8      	bne.n	acda <process_recheck+0x14>
		evt = EVT_STOP;
    ace8:	2004      	movs	r0, #4
    acea:	4770      	bx	lr
    acec:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    acee:	b10b      	cbz	r3, acf4 <process_recheck+0x2e>
		evt = EVT_RESET;
    acf0:	2005      	movs	r0, #5
}
    acf2:	4770      	bx	lr
	int evt = EVT_NOP;
    acf4:	2000      	movs	r0, #0
    acf6:	4770      	bx	lr

0000acf8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    acf8:	b158      	cbz	r0, ad12 <validate_args+0x1a>
{
    acfa:	b510      	push	{r4, lr}
    acfc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    acfe:	b159      	cbz	r1, ad18 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    ad00:	1d08      	adds	r0, r1, #4
    ad02:	f7ff ff8e 	bl	ac22 <sys_notify_validate>
	if ((rv == 0)
    ad06:	b918      	cbnz	r0, ad10 <validate_args+0x18>
	    && ((cli->notify.flags
    ad08:	68a3      	ldr	r3, [r4, #8]
    ad0a:	f033 0303 	bics.w	r3, r3, #3
    ad0e:	d106      	bne.n	ad1e <validate_args+0x26>
}
    ad10:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ad12:	f06f 0015 	mvn.w	r0, #21
}
    ad16:	4770      	bx	lr
		return -EINVAL;
    ad18:	f06f 0015 	mvn.w	r0, #21
    ad1c:	e7f8      	b.n	ad10 <validate_args+0x18>
		rv = -EINVAL;
    ad1e:	f06f 0015 	mvn.w	r0, #21
    ad22:	e7f5      	b.n	ad10 <validate_args+0x18>

0000ad24 <notify_one>:
{
    ad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad28:	4607      	mov	r7, r0
    ad2a:	460c      	mov	r4, r1
    ad2c:	4616      	mov	r6, r2
    ad2e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ad30:	4619      	mov	r1, r3
    ad32:	1d20      	adds	r0, r4, #4
    ad34:	f7f6 fa28 	bl	1188 <sys_notify_finalize>
	if (cb) {
    ad38:	b128      	cbz	r0, ad46 <notify_one+0x22>
    ad3a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    ad3c:	462b      	mov	r3, r5
    ad3e:	4632      	mov	r2, r6
    ad40:	4621      	mov	r1, r4
    ad42:	4638      	mov	r0, r7
    ad44:	47c0      	blx	r8
}
    ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad4a <notify_all>:
{
    ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad4e:	4680      	mov	r8, r0
    ad50:	460c      	mov	r4, r1
    ad52:	4617      	mov	r7, r2
    ad54:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    ad56:	e004      	b.n	ad62 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    ad58:	4633      	mov	r3, r6
    ad5a:	463a      	mov	r2, r7
    ad5c:	4640      	mov	r0, r8
    ad5e:	f7ff ffe1 	bl	ad24 <notify_one>
    ad62:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    ad64:	b131      	cbz	r1, ad74 <notify_all+0x2a>
	return node->next;
    ad66:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    ad68:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ad6a:	6863      	ldr	r3, [r4, #4]
    ad6c:	428b      	cmp	r3, r1
    ad6e:	d1f3      	bne.n	ad58 <notify_all+0xe>
	list->tail = node;
    ad70:	6065      	str	r5, [r4, #4]
}
    ad72:	e7f1      	b.n	ad58 <notify_all+0xe>
}
    ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad78 <onoff_manager_init>:
	if ((mgr == NULL)
    ad78:	b170      	cbz	r0, ad98 <onoff_manager_init+0x20>
{
    ad7a:	b538      	push	{r3, r4, r5, lr}
    ad7c:	460c      	mov	r4, r1
    ad7e:	4605      	mov	r5, r0
	    || (transitions == NULL)
    ad80:	b169      	cbz	r1, ad9e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ad82:	680b      	ldr	r3, [r1, #0]
    ad84:	b173      	cbz	r3, ada4 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    ad86:	684b      	ldr	r3, [r1, #4]
    ad88:	b17b      	cbz	r3, adaa <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ad8a:	2220      	movs	r2, #32
    ad8c:	2100      	movs	r1, #0
    ad8e:	f000 fab1 	bl	b2f4 <memset>
    ad92:	612c      	str	r4, [r5, #16]
	return 0;
    ad94:	2000      	movs	r0, #0
}
    ad96:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ad98:	f06f 0015 	mvn.w	r0, #21
}
    ad9c:	4770      	bx	lr
		return -EINVAL;
    ad9e:	f06f 0015 	mvn.w	r0, #21
    ada2:	e7f8      	b.n	ad96 <onoff_manager_init+0x1e>
    ada4:	f06f 0015 	mvn.w	r0, #21
    ada8:	e7f5      	b.n	ad96 <onoff_manager_init+0x1e>
    adaa:	f06f 0015 	mvn.w	r0, #21
    adae:	e7f2      	b.n	ad96 <onoff_manager_init+0x1e>

0000adb0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    adb0:	b508      	push	{r3, lr}
    adb2:	4604      	mov	r4, r0
    adb4:	4608      	mov	r0, r1
    adb6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    adb8:	461a      	mov	r2, r3
    adba:	47a0      	blx	r4
	return z_impl_z_current_get();
    adbc:	f7fe ff94 	bl	9ce8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    adc0:	f7f8 ffe6 	bl	3d90 <z_impl_k_thread_abort>

0000adc4 <free_list_add_bidx>:
{
    adc4:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    adc6:	1d13      	adds	r3, r2, #4
    adc8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    adcc:	b97c      	cbnz	r4, adee <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    adce:	2301      	movs	r3, #1
    add0:	fa03 f402 	lsl.w	r4, r3, r2
    add4:	68c3      	ldr	r3, [r0, #12]
    add6:	4323      	orrs	r3, r4
    add8:	60c3      	str	r3, [r0, #12]
		b->next = c;
    adda:	3204      	adds	r2, #4
    addc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    ade0:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    ade2:	1d1a      	adds	r2, r3, #4
    ade4:	b289      	uxth	r1, r1
    ade6:	5281      	strh	r1, [r0, r2]
    ade8:	3306      	adds	r3, #6
    adea:	52c1      	strh	r1, [r0, r3]
}
    adec:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    adee:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    adf0:	3204      	adds	r2, #4
    adf2:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    adf4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    adf8:	f10c 0e04 	add.w	lr, ip, #4
    adfc:	f820 300e 	strh.w	r3, [r0, lr]
    ae00:	f10c 0c06 	add.w	ip, ip, #6
    ae04:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    ae08:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    ae0a:	3306      	adds	r3, #6
    ae0c:	b289      	uxth	r1, r1
    ae0e:	52c1      	strh	r1, [r0, r3]
    ae10:	5281      	strh	r1, [r0, r2]
    ae12:	e7eb      	b.n	adec <free_list_add_bidx+0x28>

0000ae14 <free_list_add>:
{
    ae14:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    ae16:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    ae1a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    ae1c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    ae1e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    ae22:	f1c2 021f 	rsb	r2, r2, #31
    ae26:	f7ff ffcd 	bl	adc4 <free_list_add_bidx>
}
    ae2a:	bd08      	pop	{r3, pc}

0000ae2c <extract_decimal>:
{
    ae2c:	4684      	mov	ip, r0
	const char *sp = *str;
    ae2e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    ae30:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    ae32:	e005      	b.n	ae40 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    ae34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ae38:	3201      	adds	r2, #1
    ae3a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ae3e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ae40:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ae42:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    ae46:	2909      	cmp	r1, #9
    ae48:	d9f4      	bls.n	ae34 <extract_decimal+0x8>
	*str = sp;
    ae4a:	f8cc 2000 	str.w	r2, [ip]
}
    ae4e:	4770      	bx	lr

0000ae50 <encode_uint>:
{
    ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae54:	b083      	sub	sp, #12
    ae56:	4604      	mov	r4, r0
    ae58:	460d      	mov	r5, r1
    ae5a:	9201      	str	r2, [sp, #4]
    ae5c:	469a      	mov	sl, r3
    ae5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    ae60:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ae62:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ae66:	2b6f      	cmp	r3, #111	; 0x6f
    ae68:	d00f      	beq.n	ae8a <encode_uint+0x3a>
    ae6a:	d906      	bls.n	ae7a <encode_uint+0x2a>
    ae6c:	2b70      	cmp	r3, #112	; 0x70
    ae6e:	d00f      	beq.n	ae90 <encode_uint+0x40>
    ae70:	2b78      	cmp	r3, #120	; 0x78
    ae72:	d110      	bne.n	ae96 <encode_uint+0x46>
		return 16;
    ae74:	f04f 0910 	mov.w	r9, #16
    ae78:	e026      	b.n	aec8 <encode_uint+0x78>
	switch (specifier) {
    ae7a:	2b58      	cmp	r3, #88	; 0x58
    ae7c:	d002      	beq.n	ae84 <encode_uint+0x34>
    ae7e:	f04f 090a 	mov.w	r9, #10
    ae82:	e021      	b.n	aec8 <encode_uint+0x78>
		return 16;
    ae84:	f04f 0910 	mov.w	r9, #16
    ae88:	e01e      	b.n	aec8 <encode_uint+0x78>
		return 8;
    ae8a:	f04f 0908 	mov.w	r9, #8
    ae8e:	e01b      	b.n	aec8 <encode_uint+0x78>
		return 16;
    ae90:	f04f 0910 	mov.w	r9, #16
    ae94:	e018      	b.n	aec8 <encode_uint+0x78>
	switch (specifier) {
    ae96:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    ae9a:	e015      	b.n	aec8 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ae9c:	f1bb 0f19 	cmp.w	fp, #25
    aea0:	d821      	bhi.n	aee6 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    aea2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    aea4:	3237      	adds	r2, #55	; 0x37
    aea6:	b2d2      	uxtb	r2, r2
    aea8:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    aeac:	463a      	mov	r2, r7
    aeae:	4643      	mov	r3, r8
    aeb0:	4620      	mov	r0, r4
    aeb2:	4629      	mov	r1, r5
    aeb4:	f7f5 fb06 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    aeb8:	42bc      	cmp	r4, r7
    aeba:	f175 0300 	sbcs.w	r3, r5, #0
    aebe:	d316      	bcc.n	aeee <encode_uint+0x9e>
    aec0:	4556      	cmp	r6, sl
    aec2:	d914      	bls.n	aeee <encode_uint+0x9e>
		value /= radix;
    aec4:	4604      	mov	r4, r0
    aec6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    aec8:	f04f 0800 	mov.w	r8, #0
    aecc:	464f      	mov	r7, r9
    aece:	464a      	mov	r2, r9
    aed0:	4643      	mov	r3, r8
    aed2:	4620      	mov	r0, r4
    aed4:	4629      	mov	r1, r5
    aed6:	f7f5 faf5 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    aeda:	2a09      	cmp	r2, #9
    aedc:	d8de      	bhi.n	ae9c <encode_uint+0x4c>
    aede:	b2d2      	uxtb	r2, r2
    aee0:	3230      	adds	r2, #48	; 0x30
    aee2:	b2d2      	uxtb	r2, r2
    aee4:	e7e0      	b.n	aea8 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    aee6:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    aee8:	3257      	adds	r2, #87	; 0x57
    aeea:	b2d2      	uxtb	r2, r2
    aeec:	e7dc      	b.n	aea8 <encode_uint+0x58>
	if (conv->flag_hash) {
    aeee:	9b01      	ldr	r3, [sp, #4]
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	f013 0f20 	tst.w	r3, #32
    aef6:	d005      	beq.n	af04 <encode_uint+0xb4>
		if (radix == 8) {
    aef8:	f1b9 0f08 	cmp.w	r9, #8
    aefc:	d006      	beq.n	af0c <encode_uint+0xbc>
		} else if (radix == 16) {
    aefe:	f1b9 0f10 	cmp.w	r9, #16
    af02:	d009      	beq.n	af18 <encode_uint+0xc8>
}
    af04:	4630      	mov	r0, r6
    af06:	b003      	add	sp, #12
    af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    af0c:	9a01      	ldr	r2, [sp, #4]
    af0e:	7893      	ldrb	r3, [r2, #2]
    af10:	f043 0308 	orr.w	r3, r3, #8
    af14:	7093      	strb	r3, [r2, #2]
    af16:	e7f5      	b.n	af04 <encode_uint+0xb4>
			conv->altform_0c = true;
    af18:	9a01      	ldr	r2, [sp, #4]
    af1a:	7893      	ldrb	r3, [r2, #2]
    af1c:	f043 0310 	orr.w	r3, r3, #16
    af20:	7093      	strb	r3, [r2, #2]
    af22:	e7ef      	b.n	af04 <encode_uint+0xb4>

0000af24 <outs>:
{
    af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af28:	4607      	mov	r7, r0
    af2a:	460e      	mov	r6, r1
    af2c:	4614      	mov	r4, r2
    af2e:	4698      	mov	r8, r3
	size_t count = 0;
    af30:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    af32:	e006      	b.n	af42 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    af34:	4631      	mov	r1, r6
    af36:	f814 0b01 	ldrb.w	r0, [r4], #1
    af3a:	47b8      	blx	r7
		if (rc < 0) {
    af3c:	2800      	cmp	r0, #0
    af3e:	db09      	blt.n	af54 <outs+0x30>
		++count;
    af40:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    af42:	4544      	cmp	r4, r8
    af44:	d3f6      	bcc.n	af34 <outs+0x10>
    af46:	f1b8 0f00 	cmp.w	r8, #0
    af4a:	d102      	bne.n	af52 <outs+0x2e>
    af4c:	7823      	ldrb	r3, [r4, #0]
    af4e:	2b00      	cmp	r3, #0
    af50:	d1f0      	bne.n	af34 <outs+0x10>
	return (int)count;
    af52:	4628      	mov	r0, r5
}
    af54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000af58 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    af58:	4040      	eors	r0, r0
    af5a:	f380 8811 	msr	BASEPRI, r0
    af5e:	f04f 0004 	mov.w	r0, #4
    af62:	df02      	svc	2
}
    af64:	4770      	bx	lr

0000af66 <assert_print>:

void assert_print(const char *fmt, ...)
{
    af66:	b40f      	push	{r0, r1, r2, r3}
    af68:	b500      	push	{lr}
    af6a:	b083      	sub	sp, #12
    af6c:	a904      	add	r1, sp, #16
    af6e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    af72:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    af74:	f7ff fe6e 	bl	ac54 <vprintk>

	va_end(ap);
}
    af78:	b003      	add	sp, #12
    af7a:	f85d eb04 	ldr.w	lr, [sp], #4
    af7e:	b004      	add	sp, #16
    af80:	4770      	bx	lr

0000af82 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    af82:	4770      	bx	lr

0000af84 <dummy_timestamp>:
}
    af84:	2000      	movs	r0, #0
    af86:	4770      	bx	lr

0000af88 <msg_filter_check>:
}
    af88:	2001      	movs	r0, #1
    af8a:	4770      	bx	lr

0000af8c <default_get_timestamp>:
{
    af8c:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    af8e:	f000 fd80 	bl	ba92 <sys_clock_cycle_get_32>
}
    af92:	bd08      	pop	{r3, pc}

0000af94 <z_log_vprintk>:
{
    af94:	b500      	push	{lr}
    af96:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    af98:	9103      	str	r1, [sp, #12]
    af9a:	9002      	str	r0, [sp, #8]
    af9c:	2000      	movs	r0, #0
    af9e:	9001      	str	r0, [sp, #4]
    afa0:	9000      	str	r0, [sp, #0]
    afa2:	4603      	mov	r3, r0
    afa4:	4602      	mov	r2, r0
    afa6:	4601      	mov	r1, r0
    afa8:	f7f7 fd2c 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    afac:	b005      	add	sp, #20
    afae:	f85d fb04 	ldr.w	pc, [sp], #4

0000afb2 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    afb2:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    afb4:	f7f7 f9fc 	bl	23b0 <log_init>
	}

	return 0;
}
    afb8:	2000      	movs	r0, #0
    afba:	bd08      	pop	{r3, pc}

0000afbc <z_log_get_tag>:
}
    afbc:	2000      	movs	r0, #0
    afbe:	4770      	bx	lr

0000afc0 <out_func>:
{
    afc0:	b500      	push	{lr}
    afc2:	b083      	sub	sp, #12
		char x = (char)c;
    afc4:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    afc8:	680b      	ldr	r3, [r1, #0]
    afca:	684a      	ldr	r2, [r1, #4]
    afcc:	6852      	ldr	r2, [r2, #4]
    afce:	2101      	movs	r1, #1
    afd0:	f10d 0007 	add.w	r0, sp, #7
    afd4:	4798      	blx	r3
}
    afd6:	2000      	movs	r0, #0
    afd8:	b003      	add	sp, #12
    afda:	f85d fb04 	ldr.w	pc, [sp], #4

0000afde <cr_out_func>:
{
    afde:	b538      	push	{r3, r4, r5, lr}
    afe0:	4604      	mov	r4, r0
    afe2:	460d      	mov	r5, r1
	out_func(c, ctx);
    afe4:	f7ff ffec 	bl	afc0 <out_func>
	if (c == '\n') {
    afe8:	2c0a      	cmp	r4, #10
    afea:	d001      	beq.n	aff0 <cr_out_func+0x12>
}
    afec:	2000      	movs	r0, #0
    afee:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    aff0:	4629      	mov	r1, r5
    aff2:	200d      	movs	r0, #13
    aff4:	f7ff ffe4 	bl	afc0 <out_func>
    aff8:	e7f8      	b.n	afec <cr_out_func+0xe>

0000affa <buffer_write>:
{
    affa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    affc:	4607      	mov	r7, r0
    affe:	460d      	mov	r5, r1
    b000:	4614      	mov	r4, r2
    b002:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    b004:	4632      	mov	r2, r6
    b006:	4621      	mov	r1, r4
    b008:	4628      	mov	r0, r5
    b00a:	47b8      	blx	r7
		buf += processed;
    b00c:	4405      	add	r5, r0
	} while (len != 0);
    b00e:	1a24      	subs	r4, r4, r0
    b010:	d1f8      	bne.n	b004 <buffer_write+0xa>
}
    b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b014 <color_prefix>:
{
    b014:	b508      	push	{r3, lr}
    b016:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    b018:	2201      	movs	r2, #1
    b01a:	f7f7 fb6f 	bl	26fc <color_print>
}
    b01e:	bd08      	pop	{r3, pc}

0000b020 <color_postfix>:
{
    b020:	b508      	push	{r3, lr}
    b022:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    b024:	2200      	movs	r2, #0
    b026:	f7f7 fb69 	bl	26fc <color_print>
}
    b02a:	bd08      	pop	{r3, pc}

0000b02c <postfix_print>:
{
    b02c:	b538      	push	{r3, r4, r5, lr}
    b02e:	4605      	mov	r5, r0
    b030:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    b032:	f001 0101 	and.w	r1, r1, #1
    b036:	f7ff fff3 	bl	b020 <color_postfix>
	newline_print(output, flags);
    b03a:	4621      	mov	r1, r4
    b03c:	4628      	mov	r0, r5
    b03e:	f7f7 fb73 	bl	2728 <newline_print>
}
    b042:	bd38      	pop	{r3, r4, r5, pc}

0000b044 <log_msg2_hexdump>:
{
    b044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b048:	b083      	sub	sp, #12
    b04a:	4680      	mov	r8, r0
    b04c:	460e      	mov	r6, r1
    b04e:	4615      	mov	r5, r2
    b050:	461f      	mov	r7, r3
    b052:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b056:	462c      	mov	r4, r5
    b058:	2d10      	cmp	r5, #16
    b05a:	bf28      	it	cs
    b05c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    b05e:	f8cd 9000 	str.w	r9, [sp]
    b062:	463b      	mov	r3, r7
    b064:	4622      	mov	r2, r4
    b066:	4631      	mov	r1, r6
    b068:	4640      	mov	r0, r8
    b06a:	f7f7 fb71 	bl	2750 <hexdump_line_print>
		data += length;
    b06e:	4426      	add	r6, r4
	} while (len);
    b070:	1b2d      	subs	r5, r5, r4
    b072:	d1f0      	bne.n	b056 <log_msg2_hexdump+0x12>
}
    b074:	b003      	add	sp, #12
    b076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b07a <log_output_flush>:
{
    b07a:	b510      	push	{r4, lr}
    b07c:	4604      	mov	r4, r0
		     output->control_block->offset,
    b07e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    b080:	6853      	ldr	r3, [r2, #4]
    b082:	6812      	ldr	r2, [r2, #0]
    b084:	6881      	ldr	r1, [r0, #8]
    b086:	6800      	ldr	r0, [r0, #0]
    b088:	f7ff ffb7 	bl	affa <buffer_write>
	output->control_block->offset = 0;
    b08c:	6863      	ldr	r3, [r4, #4]
    b08e:	2200      	movs	r2, #0
    b090:	601a      	str	r2, [r3, #0]
}
    b092:	bd10      	pop	{r4, pc}

0000b094 <z_log_msg2_finalize>:
{
    b094:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    b096:	b198      	cbz	r0, b0c0 <z_log_msg2_finalize+0x2c>
    b098:	460e      	mov	r6, r1
    b09a:	4614      	mov	r4, r2
    b09c:	4619      	mov	r1, r3
    b09e:	4605      	mov	r5, r0
	if (data) {
    b0a0:	b143      	cbz	r3, b0b4 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    b0a2:	f100 0310 	add.w	r3, r0, #16
    b0a6:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    b0aa:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    b0ae:	4418      	add	r0, r3
    b0b0:	f000 f8f1 	bl	b296 <memcpy>
	msg->hdr.desc = desc;
    b0b4:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    b0b6:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    b0b8:	4628      	mov	r0, r5
    b0ba:	f7f7 fa5b 	bl	2574 <z_log_msg2_commit>
}
    b0be:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    b0c0:	f7f7 fa38 	bl	2534 <z_log_dropped>
		return;
    b0c4:	e7fb      	b.n	b0be <z_log_msg2_finalize+0x2a>

0000b0c6 <abort_function>:
{
    b0c6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b0c8:	2000      	movs	r0, #0
    b0ca:	f7f7 f8f7 	bl	22bc <sys_reboot>

0000b0ce <z_log_msg2_runtime_create>:
{
    b0ce:	b510      	push	{r4, lr}
    b0d0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b0d2:	ac0b      	add	r4, sp, #44	; 0x2c
    b0d4:	9405      	str	r4, [sp, #20]
    b0d6:	9403      	str	r4, [sp, #12]
    b0d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b0da:	9402      	str	r4, [sp, #8]
    b0dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b0de:	9401      	str	r4, [sp, #4]
    b0e0:	9c08      	ldr	r4, [sp, #32]
    b0e2:	9400      	str	r4, [sp, #0]
    b0e4:	f7f7 fc8e 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    b0e8:	b006      	add	sp, #24
    b0ea:	bd10      	pop	{r4, pc}

0000b0ec <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b0ec:	b538      	push	{r3, r4, r5, lr}
    b0ee:	4604      	mov	r4, r0

	if (esf != NULL) {
    b0f0:	460d      	mov	r5, r1
    b0f2:	b111      	cbz	r1, b0fa <z_arm_fatal_error+0xe>
		esf_dump(esf);
    b0f4:	4608      	mov	r0, r1
    b0f6:	f7f8 f8a9 	bl	324c <esf_dump>
	}
	z_fatal_error(reason, esf);
    b0fa:	4629      	mov	r1, r5
    b0fc:	4620      	mov	r0, r4
    b0fe:	f7fc fc13 	bl	7928 <z_fatal_error>
}
    b102:	bd38      	pop	{r3, r4, r5, pc}

0000b104 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b104:	b508      	push	{r3, lr}
    b106:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b108:	6800      	ldr	r0, [r0, #0]
    b10a:	f7ff ffef 	bl	b0ec <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    b10e:	bd08      	pop	{r3, pc}

0000b110 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    b110:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b112:	2100      	movs	r1, #0
    b114:	2001      	movs	r0, #1
    b116:	f7ff ffe9 	bl	b0ec <z_arm_fatal_error>
}
    b11a:	bd08      	pop	{r3, pc}

0000b11c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b11c:	b508      	push	{r3, lr}
	handler();
    b11e:	f7f8 f931 	bl	3384 <z_SysNmiOnReset>
	z_arm_int_exit();
    b122:	f7f8 fa27 	bl	3574 <z_arm_exc_exit>
}
    b126:	bd08      	pop	{r3, pc}

0000b128 <memory_fault_recoverable>:
}
    b128:	2000      	movs	r0, #0
    b12a:	4770      	bx	lr

0000b12c <z_log_msg2_runtime_create>:
{
    b12c:	b510      	push	{r4, lr}
    b12e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b130:	ac0b      	add	r4, sp, #44	; 0x2c
    b132:	9405      	str	r4, [sp, #20]
    b134:	9403      	str	r4, [sp, #12]
    b136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b138:	9402      	str	r4, [sp, #8]
    b13a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b13c:	9401      	str	r4, [sp, #4]
    b13e:	9c08      	ldr	r4, [sp, #32]
    b140:	9400      	str	r4, [sp, #0]
    b142:	f7f7 fc5f 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    b146:	b006      	add	sp, #24
    b148:	bd10      	pop	{r4, pc}

0000b14a <fault_handle>:
{
    b14a:	b508      	push	{r3, lr}
	*recoverable = false;
    b14c:	2300      	movs	r3, #0
    b14e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    b150:	1ecb      	subs	r3, r1, #3
    b152:	2b09      	cmp	r3, #9
    b154:	d81a      	bhi.n	b18c <fault_handle+0x42>
    b156:	e8df f003 	tbb	[pc, r3]
    b15a:	0905      	.short	0x0905
    b15c:	1919110d 	.word	0x1919110d
    b160:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    b164:	4611      	mov	r1, r2
    b166:	f7f8 fc57 	bl	3a18 <hard_fault>
}
    b16a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    b16c:	2100      	movs	r1, #0
    b16e:	f7f8 fb75 	bl	385c <mem_manage_fault>
		break;
    b172:	e7fa      	b.n	b16a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    b174:	2100      	movs	r1, #0
    b176:	f7f8 fa0b 	bl	3590 <bus_fault>
		break;
    b17a:	e7f6      	b.n	b16a <fault_handle+0x20>
		reason = usage_fault(esf);
    b17c:	f7f8 fab0 	bl	36e0 <usage_fault>
		break;
    b180:	e7f3      	b.n	b16a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    b182:	4611      	mov	r1, r2
    b184:	f7f8 fb36 	bl	37f4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b188:	2000      	movs	r0, #0
		break;
    b18a:	e7ee      	b.n	b16a <fault_handle+0x20>
		reserved_exception(esf, fault);
    b18c:	f7f8 fb46 	bl	381c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b190:	2000      	movs	r0, #0
	return reason;
    b192:	e7ea      	b.n	b16a <fault_handle+0x20>

0000b194 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    b194:	6843      	ldr	r3, [r0, #4]
    b196:	1e5a      	subs	r2, r3, #1
		&&
    b198:	4213      	tst	r3, r2
    b19a:	d106      	bne.n	b1aa <mpu_partition_is_valid+0x16>
		&&
    b19c:	2b1f      	cmp	r3, #31
    b19e:	d906      	bls.n	b1ae <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    b1a0:	6803      	ldr	r3, [r0, #0]
		&&
    b1a2:	421a      	tst	r2, r3
    b1a4:	d005      	beq.n	b1b2 <mpu_partition_is_valid+0x1e>
    b1a6:	2000      	movs	r0, #0
    b1a8:	4770      	bx	lr
    b1aa:	2000      	movs	r0, #0
    b1ac:	4770      	bx	lr
    b1ae:	2000      	movs	r0, #0
    b1b0:	4770      	bx	lr
    b1b2:	2001      	movs	r0, #1
}
    b1b4:	4770      	bx	lr

0000b1b6 <z_log_msg2_runtime_create>:
{
    b1b6:	b510      	push	{r4, lr}
    b1b8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b1ba:	ac0b      	add	r4, sp, #44	; 0x2c
    b1bc:	9405      	str	r4, [sp, #20]
    b1be:	9403      	str	r4, [sp, #12]
    b1c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b1c2:	9402      	str	r4, [sp, #8]
    b1c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b1c6:	9401      	str	r4, [sp, #4]
    b1c8:	9c08      	ldr	r4, [sp, #32]
    b1ca:	9400      	str	r4, [sp, #0]
    b1cc:	f7f7 fc1a 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    b1d0:	b006      	add	sp, #24
    b1d2:	bd10      	pop	{r4, pc}

0000b1d4 <mpu_configure_region>:
{
    b1d4:	b500      	push	{lr}
    b1d6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    b1d8:	680b      	ldr	r3, [r1, #0]
    b1da:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    b1dc:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b1de:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    b1e0:	2b20      	cmp	r3, #32
    b1e2:	d912      	bls.n	b20a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    b1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b1e8:	d811      	bhi.n	b20e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    b1ea:	3b01      	subs	r3, #1
    b1ec:	fab3 f383 	clz	r3, r3
    b1f0:	f1c3 031f 	rsb	r3, r3, #31
    b1f4:	005b      	lsls	r3, r3, #1
    b1f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b1fa:	4313      	orrs	r3, r2
    b1fc:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    b1fe:	a901      	add	r1, sp, #4
    b200:	f7f8 fe14 	bl	3e2c <region_allocate_and_init>
}
    b204:	b005      	add	sp, #20
    b206:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    b20a:	2308      	movs	r3, #8
    b20c:	e7f5      	b.n	b1fa <mpu_configure_region+0x26>
		return REGION_4G;
    b20e:	233e      	movs	r3, #62	; 0x3e
    b210:	e7f3      	b.n	b1fa <mpu_configure_region+0x26>

0000b212 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    b212:	4602      	mov	r2, r0
    b214:	e002      	b.n	b21c <strcpy+0xa>
		*d = *s;
    b216:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    b21a:	3101      	adds	r1, #1
	while (*s != '\0') {
    b21c:	780b      	ldrb	r3, [r1, #0]
    b21e:	2b00      	cmp	r3, #0
    b220:	d1f9      	bne.n	b216 <strcpy+0x4>
	}

	*d = '\0';
    b222:	7013      	strb	r3, [r2, #0]

	return dest;
}
    b224:	4770      	bx	lr

0000b226 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    b226:	4603      	mov	r3, r0
    b228:	b1a2      	cbz	r2, b254 <strncpy+0x2e>
{
    b22a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    b22c:	780c      	ldrb	r4, [r1, #0]
    b22e:	b12c      	cbz	r4, b23c <strncpy+0x16>
		*d = *s;
    b230:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    b234:	3101      	adds	r1, #1
		d++;
		n--;
    b236:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    b238:	2a00      	cmp	r2, #0
    b23a:	d1f7      	bne.n	b22c <strncpy+0x6>
	}

	while (n > 0) {
    b23c:	b122      	cbz	r2, b248 <strncpy+0x22>
		*d = '\0';
    b23e:	2100      	movs	r1, #0
    b240:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    b244:	3a01      	subs	r2, #1
    b246:	e7f9      	b.n	b23c <strncpy+0x16>
	}

	return dest;
}
    b248:	bc10      	pop	{r4}
    b24a:	4770      	bx	lr
		*d = '\0';
    b24c:	2100      	movs	r1, #0
    b24e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b252:	3a01      	subs	r2, #1
	while (n > 0) {
    b254:	2a00      	cmp	r2, #0
    b256:	d1f9      	bne.n	b24c <strncpy+0x26>
    b258:	4770      	bx	lr

0000b25a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b25a:	4603      	mov	r3, r0
	size_t n = 0;
    b25c:	2000      	movs	r0, #0

	while (*s != '\0') {
    b25e:	e001      	b.n	b264 <strlen+0xa>
		s++;
    b260:	3301      	adds	r3, #1
		n++;
    b262:	3001      	adds	r0, #1
	while (*s != '\0') {
    b264:	781a      	ldrb	r2, [r3, #0]
    b266:	2a00      	cmp	r2, #0
    b268:	d1fa      	bne.n	b260 <strlen+0x6>
	}

	return n;
}
    b26a:	4770      	bx	lr

0000b26c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    b26c:	4603      	mov	r3, r0
	size_t n = 0;
    b26e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    b270:	e001      	b.n	b276 <strnlen+0xa>
		s++;
    b272:	3301      	adds	r3, #1
		n++;
    b274:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    b276:	781a      	ldrb	r2, [r3, #0]
    b278:	b10a      	cbz	r2, b27e <strnlen+0x12>
    b27a:	4288      	cmp	r0, r1
    b27c:	d3f9      	bcc.n	b272 <strnlen+0x6>
	}

	return n;
}
    b27e:	4770      	bx	lr

0000b280 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b280:	e001      	b.n	b286 <strcmp+0x6>
		s1++;
    b282:	3001      	adds	r0, #1
		s2++;
    b284:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b286:	7803      	ldrb	r3, [r0, #0]
    b288:	780a      	ldrb	r2, [r1, #0]
    b28a:	4293      	cmp	r3, r2
    b28c:	d101      	bne.n	b292 <strcmp+0x12>
    b28e:	2b00      	cmp	r3, #0
    b290:	d1f7      	bne.n	b282 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    b292:	1a98      	subs	r0, r3, r2
    b294:	4770      	bx	lr

0000b296 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    b296:	ea80 0301 	eor.w	r3, r0, r1
    b29a:	f013 0f03 	tst.w	r3, #3
    b29e:	d001      	beq.n	b2a4 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    b2a0:	4603      	mov	r3, r0
    b2a2:	e023      	b.n	b2ec <memcpy+0x56>
    b2a4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    b2a6:	f013 0f03 	tst.w	r3, #3
    b2aa:	d00f      	beq.n	b2cc <memcpy+0x36>
			if (n == 0) {
    b2ac:	b30a      	cbz	r2, b2f2 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    b2ae:	f811 cb01 	ldrb.w	ip, [r1], #1
    b2b2:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    b2b6:	3a01      	subs	r2, #1
    b2b8:	e7f5      	b.n	b2a6 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    b2ba:	f811 cb01 	ldrb.w	ip, [r1], #1
    b2be:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b2c2:	3a01      	subs	r2, #1
	while (n > 0) {
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	d1f8      	bne.n	b2ba <memcpy+0x24>
	}

	return d;
}
    b2c8:	bc10      	pop	{r4}
    b2ca:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    b2cc:	2a03      	cmp	r2, #3
    b2ce:	d90d      	bls.n	b2ec <memcpy+0x56>
{
    b2d0:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    b2d2:	f851 4b04 	ldr.w	r4, [r1], #4
    b2d6:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    b2da:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    b2dc:	2a03      	cmp	r2, #3
    b2de:	d8f8      	bhi.n	b2d2 <memcpy+0x3c>
    b2e0:	e7f0      	b.n	b2c4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    b2e2:	f811 cb01 	ldrb.w	ip, [r1], #1
    b2e6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b2ea:	3a01      	subs	r2, #1
	while (n > 0) {
    b2ec:	2a00      	cmp	r2, #0
    b2ee:	d1f8      	bne.n	b2e2 <memcpy+0x4c>
    b2f0:	4770      	bx	lr
}
    b2f2:	4770      	bx	lr

0000b2f4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    b2f4:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    b2f8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    b2fa:	e002      	b.n	b302 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    b2fc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b300:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    b302:	f013 0f03 	tst.w	r3, #3
    b306:	d002      	beq.n	b30e <memset+0x1a>
		if (n == 0) {
    b308:	2a00      	cmp	r2, #0
    b30a:	d1f7      	bne.n	b2fc <memset+0x8>
    b30c:	e00f      	b.n	b32e <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    b30e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    b310:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    b314:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    b318:	2a03      	cmp	r2, #3
    b31a:	d906      	bls.n	b32a <memset+0x36>
		*(d_word++) = c_word;
    b31c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    b320:	3a04      	subs	r2, #4
    b322:	e7f9      	b.n	b318 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    b324:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b328:	3a01      	subs	r2, #1
	while (n > 0) {
    b32a:	2a00      	cmp	r2, #0
    b32c:	d1fa      	bne.n	b324 <memset+0x30>
	}

	return buf;
}
    b32e:	4770      	bx	lr

0000b330 <_stdout_hook_default>:
}
    b330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b334:	4770      	bx	lr

0000b336 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    b336:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    b338:	f7f8 feac 	bl	4094 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    b33c:	bd08      	pop	{r3, pc}

0000b33e <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b33e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b342:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    b346:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    b34a:	2a08      	cmp	r2, #8
    b34c:	d001      	beq.n	b352 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b34e:	2000      	movs	r0, #0
    b350:	4770      	bx	lr
                switch(var2)
    b352:	2b02      	cmp	r3, #2
    b354:	d001      	beq.n	b35a <nrf52_errata_197+0x1c>
                        return false;
    b356:	2000      	movs	r0, #0
    b358:	4770      	bx	lr
                        return true;
    b35a:	2001      	movs	r0, #1
    #endif
}
    b35c:	4770      	bx	lr

0000b35e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    b35e:	2806      	cmp	r0, #6
    b360:	d000      	beq.n	b364 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    b362:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b368:	2201      	movs	r2, #1
    b36a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b36e:	f3bf 8f4f 	dsb	sy
        __WFE();
    b372:	bf20      	wfe
    while (true)
    b374:	e7fd      	b.n	b372 <pm_state_set+0x14>

0000b376 <pm_state_exit_post_ops>:
    b376:	2300      	movs	r3, #0
    b378:	f383 8811 	msr	BASEPRI, r3
    b37c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b380:	4770      	bx	lr

0000b382 <adc_context_on_timer_expired>:
{
    b382:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    b384:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b386:	f3bf 8f5b 	dmb	ish
    b38a:	e850 3f00 	ldrex	r3, [r0]
    b38e:	1c5a      	adds	r2, r3, #1
    b390:	e840 2100 	strex	r1, r2, [r0]
    b394:	2900      	cmp	r1, #0
    b396:	d1f8      	bne.n	b38a <adc_context_on_timer_expired+0x8>
    b398:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    b39c:	b11b      	cbz	r3, b3a6 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    b39e:	f06f 030f 	mvn.w	r3, #15
    b3a2:	6603      	str	r3, [r0, #96]	; 0x60
}
    b3a4:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    b3a6:	f7f8 fedd 	bl	4164 <adc_context_start_sampling>
    b3aa:	e7fb      	b.n	b3a4 <adc_context_on_timer_expired+0x22>

0000b3ac <z_log_msg2_runtime_create>:
{
    b3ac:	b510      	push	{r4, lr}
    b3ae:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b3b0:	ac0b      	add	r4, sp, #44	; 0x2c
    b3b2:	9405      	str	r4, [sp, #20]
    b3b4:	9403      	str	r4, [sp, #12]
    b3b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b3b8:	9402      	str	r4, [sp, #8]
    b3ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b3bc:	9401      	str	r4, [sp, #4]
    b3be:	9c08      	ldr	r4, [sp, #32]
    b3c0:	9400      	str	r4, [sp, #0]
    b3c2:	f7f7 fb1f 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    b3c6:	b006      	add	sp, #24
    b3c8:	bd10      	pop	{r4, pc}

0000b3ca <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    b3ca:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b3cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b3d0:	0089      	lsls	r1, r1, #2
    b3d2:	3140      	adds	r1, #64	; 0x40
}
    b3d4:	4408      	add	r0, r1
    b3d6:	4770      	bx	lr

0000b3d8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    b3d8:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    b3da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    b3de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b3e2:	4770      	bx	lr

0000b3e4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    b3e4:	6900      	ldr	r0, [r0, #16]
}
    b3e6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    b3ea:	4770      	bx	lr

0000b3ec <set_off_state>:
	__asm__ volatile(
    b3ec:	f04f 0320 	mov.w	r3, #32
    b3f0:	f3ef 8211 	mrs	r2, BASEPRI
    b3f4:	f383 8812 	msr	BASEPRI_MAX, r3
    b3f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b3fc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b3fe:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b402:	d001      	beq.n	b408 <set_off_state+0x1c>
    b404:	428b      	cmp	r3, r1
    b406:	d107      	bne.n	b418 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b408:	2301      	movs	r3, #1
    b40a:	6003      	str	r3, [r0, #0]
	int err = 0;
    b40c:	2000      	movs	r0, #0
	__asm__ volatile(
    b40e:	f382 8811 	msr	BASEPRI, r2
    b412:	f3bf 8f6f 	isb	sy
}
    b416:	4770      	bx	lr
		err = -EPERM;
    b418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b41c:	e7f7      	b.n	b40e <set_off_state+0x22>

0000b41e <set_starting_state>:
	__asm__ volatile(
    b41e:	f04f 0320 	mov.w	r3, #32
    b422:	f3ef 8211 	mrs	r2, BASEPRI
    b426:	f383 8812 	msr	BASEPRI_MAX, r3
    b42a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b42e:	6803      	ldr	r3, [r0, #0]
    b430:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b434:	f003 0307 	and.w	r3, r3, #7
    b438:	2b01      	cmp	r3, #1
    b43a:	d008      	beq.n	b44e <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    b43c:	458c      	cmp	ip, r1
    b43e:	d009      	beq.n	b454 <set_starting_state+0x36>
		err = -EPERM;
    b440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    b444:	f382 8811 	msr	BASEPRI, r2
    b448:	f3bf 8f6f 	isb	sy
}
    b44c:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b44e:	6001      	str	r1, [r0, #0]
	int err = 0;
    b450:	2000      	movs	r0, #0
    b452:	e7f7      	b.n	b444 <set_starting_state+0x26>
		err = -EALREADY;
    b454:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b458:	e7f4      	b.n	b444 <set_starting_state+0x26>

0000b45a <set_on_state>:
	__asm__ volatile(
    b45a:	f04f 0320 	mov.w	r3, #32
    b45e:	f3ef 8211 	mrs	r2, BASEPRI
    b462:	f383 8812 	msr	BASEPRI_MAX, r3
    b466:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b46a:	6803      	ldr	r3, [r0, #0]
    b46c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b470:	f043 0302 	orr.w	r3, r3, #2
    b474:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b476:	f382 8811 	msr	BASEPRI, r2
    b47a:	f3bf 8f6f 	isb	sy
}
    b47e:	4770      	bx	lr

0000b480 <clkstarted_handle>:
{
    b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b482:	4606      	mov	r6, r0
    b484:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    b486:	f7ff ffa0 	bl	b3ca <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    b48a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    b48c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    b48e:	2300      	movs	r3, #0
    b490:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    b494:	f7ff ffe1 	bl	b45a <set_on_state>
	if (callback) {
    b498:	b11d      	cbz	r5, b4a2 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b49a:	463a      	mov	r2, r7
    b49c:	4621      	mov	r1, r4
    b49e:	4630      	mov	r0, r6
    b4a0:	47a8      	blx	r5
}
    b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b4a4 <async_start>:
{
    b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4a8:	4606      	mov	r6, r0
    b4aa:	4690      	mov	r8, r2
    b4ac:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    b4ae:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    b4b0:	4629      	mov	r1, r5
    b4b2:	f7ff ff8a 	bl	b3ca <get_sub_data>
    b4b6:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    b4b8:	9906      	ldr	r1, [sp, #24]
    b4ba:	3008      	adds	r0, #8
    b4bc:	f7ff ffaf 	bl	b41e <set_starting_state>
	if (err < 0) {
    b4c0:	2800      	cmp	r0, #0
    b4c2:	db09      	blt.n	b4d8 <async_start+0x34>
	subdata->cb = cb;
    b4c4:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    b4c8:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    b4ca:	4629      	mov	r1, r5
    b4cc:	4630      	mov	r0, r6
    b4ce:	f7ff ff83 	bl	b3d8 <get_sub_config>
    b4d2:	6803      	ldr	r3, [r0, #0]
    b4d4:	4798      	blx	r3
	return 0;
    b4d6:	2000      	movs	r0, #0
}
    b4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b4dc <api_start>:
{
    b4dc:	b510      	push	{r4, lr}
    b4de:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b4e0:	2480      	movs	r4, #128	; 0x80
    b4e2:	9400      	str	r4, [sp, #0]
    b4e4:	f7ff ffde 	bl	b4a4 <async_start>
}
    b4e8:	b002      	add	sp, #8
    b4ea:	bd10      	pop	{r4, pc}

0000b4ec <onoff_started_callback>:
{
    b4ec:	b510      	push	{r4, lr}
    b4ee:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    b4f0:	b2c9      	uxtb	r1, r1
    b4f2:	f7ff ff77 	bl	b3e4 <get_onoff_manager>
	notify(mgr, 0);
    b4f6:	2100      	movs	r1, #0
    b4f8:	47a0      	blx	r4
}
    b4fa:	bd10      	pop	{r4, pc}

0000b4fc <hfclk_start>:
{
    b4fc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b4fe:	2001      	movs	r0, #1
    b500:	f7fb f81a 	bl	6538 <nrfx_clock_start>
}
    b504:	bd08      	pop	{r3, pc}

0000b506 <lfclk_start>:
{
    b506:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b508:	2000      	movs	r0, #0
    b50a:	f7fb f815 	bl	6538 <nrfx_clock_start>
}
    b50e:	bd08      	pop	{r3, pc}

0000b510 <hfclk_stop>:
{
    b510:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b512:	2001      	movs	r0, #1
    b514:	f7fb f886 	bl	6624 <nrfx_clock_stop>
}
    b518:	bd08      	pop	{r3, pc}

0000b51a <lfclk_stop>:
{
    b51a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b51c:	2000      	movs	r0, #0
    b51e:	f7fb f881 	bl	6624 <nrfx_clock_stop>
}
    b522:	bd08      	pop	{r3, pc}

0000b524 <api_stop>:
{
    b524:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    b526:	2280      	movs	r2, #128	; 0x80
    b528:	f7f9 f986 	bl	4838 <stop>
}
    b52c:	bd08      	pop	{r3, pc}

0000b52e <blocking_start_callback>:
{
    b52e:	b508      	push	{r3, lr}
    b530:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b532:	f7fd f8ad 	bl	8690 <z_impl_k_sem_give>
}
    b536:	bd08      	pop	{r3, pc}

0000b538 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b538:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    b53c:	f020 0001 	bic.w	r0, r0, #1
    b540:	0540      	lsls	r0, r0, #21
    b542:	0d40      	lsrs	r0, r0, #21
    b544:	f240 2306 	movw	r3, #518	; 0x206
    b548:	4298      	cmp	r0, r3
    b54a:	d033      	beq.n	b5b4 <get_drive+0x7c>
    b54c:	d816      	bhi.n	b57c <get_drive+0x44>
    b54e:	2806      	cmp	r0, #6
    b550:	d02c      	beq.n	b5ac <get_drive+0x74>
    b552:	d906      	bls.n	b562 <get_drive+0x2a>
    b554:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    b558:	d10d      	bne.n	b576 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    b55a:	2301      	movs	r3, #1
    b55c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b55e:	2000      	movs	r0, #0
		break;
    b560:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b562:	b300      	cbz	r0, b5a6 <get_drive+0x6e>
    b564:	2802      	cmp	r0, #2
    b566:	d103      	bne.n	b570 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    b568:	2304      	movs	r3, #4
    b56a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b56c:	2000      	movs	r0, #0
		break;
    b56e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b570:	f06f 0015 	mvn.w	r0, #21
    b574:	4770      	bx	lr
    b576:	f06f 0015 	mvn.w	r0, #21
    b57a:	4770      	bx	lr
    b57c:	f240 4302 	movw	r3, #1026	; 0x402
    b580:	4298      	cmp	r0, r3
    b582:	d01b      	beq.n	b5bc <get_drive+0x84>
    b584:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    b588:	d103      	bne.n	b592 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    b58a:	2303      	movs	r3, #3
    b58c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b58e:	2000      	movs	r0, #0
		break;
    b590:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b592:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    b596:	d103      	bne.n	b5a0 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    b598:	2302      	movs	r3, #2
    b59a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b59c:	2000      	movs	r0, #0
		break;
    b59e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b5a0:	f06f 0015 	mvn.w	r0, #21
    b5a4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    b5a6:	2000      	movs	r0, #0
    b5a8:	7008      	strb	r0, [r1, #0]
		break;
    b5aa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    b5ac:	2306      	movs	r3, #6
    b5ae:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b5b0:	2000      	movs	r0, #0
		break;
    b5b2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    b5b4:	2307      	movs	r3, #7
    b5b6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b5b8:	2000      	movs	r0, #0
		break;
    b5ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    b5bc:	2305      	movs	r3, #5
    b5be:	700b      	strb	r3, [r1, #0]
	int err = 0;
    b5c0:	2000      	movs	r0, #0
}
    b5c2:	4770      	bx	lr

0000b5c4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    b5c4:	f010 0f10 	tst.w	r0, #16
    b5c8:	d104      	bne.n	b5d4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    b5ca:	f010 0f20 	tst.w	r0, #32
    b5ce:	d103      	bne.n	b5d8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    b5d0:	2000      	movs	r0, #0
    b5d2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    b5d4:	2003      	movs	r0, #3
    b5d6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    b5d8:	2001      	movs	r0, #1
}
    b5da:	4770      	bx	lr

0000b5dc <gpio_nrfx_port_get_raw>:
	return port->config;
    b5dc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b5de:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b5e0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b5e4:	600b      	str	r3, [r1, #0]
}
    b5e6:	2000      	movs	r0, #0
    b5e8:	4770      	bx	lr

0000b5ea <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    b5ea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b5ec:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b5ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b5f2:	4042      	eors	r2, r0
    b5f4:	400a      	ands	r2, r1
    b5f6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b5f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b5fc:	2000      	movs	r0, #0
    b5fe:	4770      	bx	lr

0000b600 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    b600:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b602:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    b604:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    b608:	2000      	movs	r0, #0
    b60a:	4770      	bx	lr

0000b60c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    b60c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b60e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    b610:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    b614:	2000      	movs	r0, #0
    b616:	4770      	bx	lr

0000b618 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    b618:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b61a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b61c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b620:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b622:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b626:	2000      	movs	r0, #0
    b628:	4770      	bx	lr

0000b62a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    b62a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    b62e:	d007      	beq.n	b640 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b630:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    b634:	d00d      	beq.n	b652 <get_trigger+0x28>
    b636:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    b63a:	d008      	beq.n	b64e <get_trigger+0x24>
    b63c:	2001      	movs	r0, #1
}
    b63e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    b640:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    b644:	d001      	beq.n	b64a <get_trigger+0x20>
    b646:	2005      	movs	r0, #5
    b648:	4770      	bx	lr
    b64a:	2004      	movs	r0, #4
    b64c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    b64e:	2002      	movs	r0, #2
    b650:	4770      	bx	lr
    b652:	2003      	movs	r0, #3
    b654:	4770      	bx	lr

0000b656 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    b656:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b658:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b65a:	f04f 0120 	mov.w	r1, #32
    b65e:	f3ef 8211 	mrs	r2, BASEPRI
    b662:	f381 8812 	msr	BASEPRI_MAX, r1
    b666:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b66a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b66e:	b131      	cbz	r1, b67e <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b670:	2100      	movs	r1, #0
    b672:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b676:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b67a:	2101      	movs	r1, #1
    b67c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b67e:	f382 8811 	msr	BASEPRI, r2
    b682:	f3bf 8f6f 	isb	sy
}
    b686:	4770      	bx	lr

0000b688 <uarte_nrfx_isr_int>:
{
    b688:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b68a:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    b68c:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    b68e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b692:	f413 7f80 	tst.w	r3, #256	; 0x100
    b696:	d002      	beq.n	b69e <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b698:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    b69c:	b9d3      	cbnz	r3, b6d4 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b69e:	686b      	ldr	r3, [r5, #4]
    b6a0:	f013 0f10 	tst.w	r3, #16
    b6a4:	d015      	beq.n	b6d2 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    b6a6:	f04f 0220 	mov.w	r2, #32
    b6aa:	f3ef 8311 	mrs	r3, BASEPRI
    b6ae:	f382 8812 	msr	BASEPRI_MAX, r2
    b6b2:	f3bf 8f6f 	isb	sy
    b6b6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b6ba:	b112      	cbz	r2, b6c2 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b6bc:	2200      	movs	r2, #0
    b6be:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    b6c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b6c6:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    b6ca:	f383 8811 	msr	BASEPRI, r3
    b6ce:	f3bf 8f6f 	isb	sy
}
    b6d2:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    b6d4:	f7ff ffbf 	bl	b656 <endtx_isr>
    b6d8:	e7e1      	b.n	b69e <uarte_nrfx_isr_int+0x16>

0000b6da <uarte_nrfx_configure>:
{
    b6da:	b570      	push	{r4, r5, r6, lr}
    b6dc:	b082      	sub	sp, #8
    b6de:	4606      	mov	r6, r0
    b6e0:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    b6e2:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    b6e4:	794b      	ldrb	r3, [r1, #5]
    b6e6:	2b01      	cmp	r3, #1
    b6e8:	d006      	beq.n	b6f8 <uarte_nrfx_configure+0x1e>
    b6ea:	2b03      	cmp	r3, #3
    b6ec:	d011      	beq.n	b712 <uarte_nrfx_configure+0x38>
    b6ee:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    b6f2:	4618      	mov	r0, r3
    b6f4:	b002      	add	sp, #8
    b6f6:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    b6f8:	2300      	movs	r3, #0
    b6fa:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b6fe:	79a3      	ldrb	r3, [r4, #6]
    b700:	2b03      	cmp	r3, #3
    b702:	d137      	bne.n	b774 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    b704:	79e3      	ldrb	r3, [r4, #7]
    b706:	b143      	cbz	r3, b71a <uarte_nrfx_configure+0x40>
    b708:	2b01      	cmp	r3, #1
    b70a:	d010      	beq.n	b72e <uarte_nrfx_configure+0x54>
    b70c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b710:	e7ef      	b.n	b6f2 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    b712:	2310      	movs	r3, #16
    b714:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    b718:	e7f1      	b.n	b6fe <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    b71a:	2300      	movs	r3, #0
    b71c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    b720:	7923      	ldrb	r3, [r4, #4]
    b722:	b143      	cbz	r3, b736 <uarte_nrfx_configure+0x5c>
    b724:	2b02      	cmp	r3, #2
    b726:	d021      	beq.n	b76c <uarte_nrfx_configure+0x92>
    b728:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b72c:	e7e1      	b.n	b6f2 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    b72e:	2301      	movs	r3, #1
    b730:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    b734:	e7f4      	b.n	b720 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    b736:	2300      	movs	r3, #0
    b738:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b73c:	6821      	ldr	r1, [r4, #0]
    b73e:	4630      	mov	r0, r6
    b740:	f7f9 fc82 	bl	5048 <baudrate_set>
    b744:	4603      	mov	r3, r0
    b746:	b9c0      	cbnz	r0, b77a <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    b748:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    b74a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b74c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    b750:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    b754:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b758:	4331      	orrs	r1, r6
    b75a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    b75c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    b760:	3504      	adds	r5, #4
    b762:	e894 0003 	ldmia.w	r4, {r0, r1}
    b766:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    b76a:	e7c2      	b.n	b6f2 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    b76c:	230e      	movs	r3, #14
    b76e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    b772:	e7e3      	b.n	b73c <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    b774:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b778:	e7bb      	b.n	b6f2 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    b77a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    b77e:	e7b8      	b.n	b6f2 <uarte_nrfx_configure+0x18>

0000b780 <uarte_nrfx_config_get>:
{
    b780:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    b782:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    b784:	3304      	adds	r3, #4
    b786:	e893 0003 	ldmia.w	r3, {r0, r1}
    b78a:	e882 0003 	stmia.w	r2, {r0, r1}
}
    b78e:	2000      	movs	r0, #0
    b790:	4770      	bx	lr

0000b792 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    b792:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b794:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b796:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b79a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b79e:	4770      	bx	lr

0000b7a0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    b7a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b7a2:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b7a4:	685b      	ldr	r3, [r3, #4]
    b7a6:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7aa:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b7ae:	b929      	cbnz	r1, b7bc <is_tx_ready+0x1c>
    b7b0:	b933      	cbnz	r3, b7c0 <is_tx_ready+0x20>
    b7b2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    b7b6:	b92b      	cbnz	r3, b7c4 <is_tx_ready+0x24>
    b7b8:	2000      	movs	r0, #0
    b7ba:	4770      	bx	lr
    b7bc:	2001      	movs	r0, #1
    b7be:	4770      	bx	lr
    b7c0:	2000      	movs	r0, #0
    b7c2:	4770      	bx	lr
    b7c4:	2001      	movs	r0, #1
}
    b7c6:	4770      	bx	lr

0000b7c8 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    b7c8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b7ca:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b7cc:	2208      	movs	r2, #8
    b7ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b7d2:	4770      	bx	lr

0000b7d4 <tx_start>:
{
    b7d4:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b7d6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b7d8:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b7da:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b7de:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b7e2:	2200      	movs	r2, #0
    b7e4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    b7e8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    b7ec:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    b7f0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b7f4:	685b      	ldr	r3, [r3, #4]
    b7f6:	f013 0f10 	tst.w	r3, #16
    b7fa:	d102      	bne.n	b802 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b7fc:	2301      	movs	r3, #1
    b7fe:	60a3      	str	r3, [r4, #8]
}
    b800:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b802:	2101      	movs	r1, #1
    b804:	f7ff ffe0 	bl	b7c8 <uarte_enable>
    p_reg->INTENSET = mask;
    b808:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b80c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b810:	e7f4      	b.n	b7fc <tx_start+0x28>

0000b812 <uarte_nrfx_poll_in>:
{
    b812:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    b814:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b816:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b818:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b81a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b81e:	b152      	cbz	r2, b836 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    b820:	7c62      	ldrb	r2, [r4, #17]
    b822:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b824:	2000      	movs	r0, #0
    b826:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b82a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b82e:	2201      	movs	r2, #1
    b830:	601a      	str	r2, [r3, #0]
}
    b832:	bc10      	pop	{r4}
    b834:	4770      	bx	lr
		return -1;
    b836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b83a:	e7fa      	b.n	b832 <uarte_nrfx_poll_in+0x20>

0000b83c <wait_tx_ready>:
{
    b83c:	b570      	push	{r4, r5, r6, lr}
    b83e:	4606      	mov	r6, r0
    b840:	e014      	b.n	b86c <wait_tx_ready+0x30>
		if (res) {
    b842:	b17d      	cbz	r5, b864 <wait_tx_ready+0x28>
	__asm__ volatile(
    b844:	f04f 0320 	mov.w	r3, #32
    b848:	f3ef 8411 	mrs	r4, BASEPRI
    b84c:	f383 8812 	msr	BASEPRI_MAX, r3
    b850:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b854:	4630      	mov	r0, r6
    b856:	f7ff ffa3 	bl	b7a0 <is_tx_ready>
    b85a:	b9a0      	cbnz	r0, b886 <wait_tx_ready+0x4a>
	__asm__ volatile(
    b85c:	f384 8811 	msr	BASEPRI, r4
    b860:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b864:	2021      	movs	r0, #33	; 0x21
    b866:	2100      	movs	r1, #0
    b868:	f7fe f9f2 	bl	9c50 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b86c:	2464      	movs	r4, #100	; 0x64
    b86e:	4630      	mov	r0, r6
    b870:	f7ff ff96 	bl	b7a0 <is_tx_ready>
    b874:	4605      	mov	r5, r0
    b876:	2800      	cmp	r0, #0
    b878:	d1e3      	bne.n	b842 <wait_tx_ready+0x6>
    b87a:	2001      	movs	r0, #1
    b87c:	f000 f9c1 	bl	bc02 <nrfx_busy_wait>
    b880:	3c01      	subs	r4, #1
    b882:	d1f4      	bne.n	b86e <wait_tx_ready+0x32>
    b884:	e7dd      	b.n	b842 <wait_tx_ready+0x6>
}
    b886:	4620      	mov	r0, r4
    b888:	bd70      	pop	{r4, r5, r6, pc}

0000b88a <z_log_msg2_runtime_create>:
{
    b88a:	b510      	push	{r4, lr}
    b88c:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b88e:	ac0b      	add	r4, sp, #44	; 0x2c
    b890:	9405      	str	r4, [sp, #20]
    b892:	9403      	str	r4, [sp, #12]
    b894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b896:	9402      	str	r4, [sp, #8]
    b898:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b89a:	9401      	str	r4, [sp, #4]
    b89c:	9c08      	ldr	r4, [sp, #32]
    b89e:	9400      	str	r4, [sp, #0]
    b8a0:	f7f7 f8b0 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    b8a4:	b006      	add	sp, #24
    b8a6:	bd10      	pop	{r4, pc}

0000b8a8 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b8ac:	b083      	sub	sp, #12
    b8ae:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b8b0:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    b8b2:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    b8b4:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b8b8:	2100      	movs	r1, #0
    b8ba:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b8be:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b8c2:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b8c6:	aa01      	add	r2, sp, #4
    b8c8:	4648      	mov	r0, r9
    b8ca:	f000 f8e6 	bl	ba9a <pinctrl_lookup_state>
	if (ret < 0) {
    b8ce:	1e04      	subs	r4, r0, #0
    b8d0:	db07      	blt.n	b8e2 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b8d2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b8d4:	f8d9 2000 	ldr.w	r2, [r9]
    b8d8:	7919      	ldrb	r1, [r3, #4]
    b8da:	6818      	ldr	r0, [r3, #0]
    b8dc:	f7f9 ff76 	bl	57cc <pinctrl_configure_pins>
    b8e0:	4604      	mov	r4, r0
	if (err < 0) {
    b8e2:	2c00      	cmp	r4, #0
    b8e4:	db35      	blt.n	b952 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    b8e6:	f108 0104 	add.w	r1, r8, #4
    b8ea:	4628      	mov	r0, r5
    b8ec:	f7ff fef5 	bl	b6da <uarte_nrfx_configure>
	if (err) {
    b8f0:	4604      	mov	r4, r0
    b8f2:	bb70      	cbnz	r0, b952 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b8f4:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b8f6:	f013 0f02 	tst.w	r3, #2
    b8fa:	d12e      	bne.n	b95a <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b8fc:	2308      	movs	r3, #8
    b8fe:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    b902:	7a3b      	ldrb	r3, [r7, #8]
    b904:	b95b      	cbnz	r3, b91e <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b906:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    b90a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b90e:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b912:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b916:	2301      	movs	r3, #1
    b918:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b91c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	f013 0f02 	tst.w	r3, #2
    b924:	d103      	bne.n	b92e <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    b926:	f44f 7380 	mov.w	r3, #256	; 0x100
    b92a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b92e:	687b      	ldr	r3, [r7, #4]
    b930:	f013 0f10 	tst.w	r3, #16
    b934:	d003      	beq.n	b93e <uarte_instance_init+0x96>
    b936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b93a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b93e:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b942:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b946:	2300      	movs	r3, #0
    b948:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b94c:	2301      	movs	r3, #1
    b94e:	60b3      	str	r3, [r6, #8]
    b950:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b952:	4620      	mov	r0, r4
    b954:	b003      	add	sp, #12
    b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b95a:	4641      	mov	r1, r8
    b95c:	4630      	mov	r0, r6
    b95e:	f7f9 fc53 	bl	5208 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b962:	2800      	cmp	r0, #0
    b964:	daca      	bge.n	b8fc <uarte_instance_init+0x54>
			return err;
    b966:	4604      	mov	r4, r0
    b968:	e7f3      	b.n	b952 <uarte_instance_init+0xaa>

0000b96a <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b96a:	b510      	push	{r4, lr}
    b96c:	4604      	mov	r4, r0
    b96e:	2200      	movs	r2, #0
    b970:	2101      	movs	r1, #1
    b972:	2002      	movs	r0, #2
    b974:	f7f7 fcd0 	bl	3318 <z_arm_irq_priority_set>
    b978:	2002      	movs	r0, #2
    b97a:	f7f7 fcb1 	bl	32e0 <arch_irq_enable>
    b97e:	2100      	movs	r1, #0
    b980:	4620      	mov	r0, r4
    b982:	f7ff ff91 	bl	b8a8 <uarte_instance_init>
    b986:	bd10      	pop	{r4, pc}

0000b988 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b988:	b510      	push	{r4, lr}
    b98a:	4604      	mov	r4, r0
    b98c:	2200      	movs	r2, #0
    b98e:	2101      	movs	r1, #1
    b990:	2028      	movs	r0, #40	; 0x28
    b992:	f7f7 fcc1 	bl	3318 <z_arm_irq_priority_set>
    b996:	2028      	movs	r0, #40	; 0x28
    b998:	f7f7 fca2 	bl	32e0 <arch_irq_enable>
    b99c:	2100      	movs	r1, #0
    b99e:	4620      	mov	r0, r4
    b9a0:	f7ff ff82 	bl	b8a8 <uarte_instance_init>
    b9a4:	bd10      	pop	{r4, pc}

0000b9a6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b9a6:	4770      	bx	lr

0000b9a8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b9a8:	1a40      	subs	r0, r0, r1
}
    b9aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9ae:	4770      	bx	lr

0000b9b0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b9b0:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b9b4:	009b      	lsls	r3, r3, #2
    b9b6:	b29b      	uxth	r3, r3
    b9b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b9bc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b9c0:	2200      	movs	r2, #0
    b9c2:	601a      	str	r2, [r3, #0]
    b9c4:	681b      	ldr	r3, [r3, #0]
}
    b9c6:	4770      	bx	lr

0000b9c8 <absolute_time_to_cc>:
}
    b9c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9cc:	4770      	bx	lr

0000b9ce <full_int_lock>:
	__asm__ volatile(
    b9ce:	f04f 0320 	mov.w	r3, #32
    b9d2:	f3ef 8011 	mrs	r0, BASEPRI
    b9d6:	f383 8812 	msr	BASEPRI_MAX, r3
    b9da:	f3bf 8f6f 	isb	sy
}
    b9de:	4770      	bx	lr

0000b9e0 <full_int_unlock>:
	__asm__ volatile(
    b9e0:	f380 8811 	msr	BASEPRI, r0
    b9e4:	f3bf 8f6f 	isb	sy
}
    b9e8:	4770      	bx	lr

0000b9ea <set_absolute_alarm>:
{
    b9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9ec:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b9ee:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    b9f2:	f7f9 fc47 	bl	5284 <get_comparator>
    b9f6:	4607      	mov	r7, r0
    b9f8:	e019      	b.n	ba2e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    b9fa:	2013      	movs	r0, #19
    b9fc:	f000 fa33 	bl	be66 <z_impl_k_busy_wait>
}
    ba00:	e022      	b.n	ba48 <set_absolute_alarm+0x5e>
		event_clear(chan);
    ba02:	4630      	mov	r0, r6
    ba04:	f7ff ffd4 	bl	b9b0 <event_clear>
		event_enable(chan);
    ba08:	4630      	mov	r0, r6
    ba0a:	f7f9 fc43 	bl	5294 <event_enable>
		set_comparator(chan, cc_val);
    ba0e:	4629      	mov	r1, r5
    ba10:	4630      	mov	r0, r6
    ba12:	f7f9 fc2d 	bl	5270 <set_comparator>
		now2 = counter();
    ba16:	f7f9 fc51 	bl	52bc <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ba1a:	4284      	cmp	r4, r0
    ba1c:	d01e      	beq.n	ba5c <set_absolute_alarm+0x72>
    ba1e:	1c81      	adds	r1, r0, #2
    ba20:	4628      	mov	r0, r5
    ba22:	f7ff ffc1 	bl	b9a8 <counter_sub>
	} while ((now2 != now) &&
    ba26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ba2a:	d917      	bls.n	ba5c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    ba2c:	462f      	mov	r7, r5
		now = counter();
    ba2e:	f7f9 fc45 	bl	52bc <counter>
    ba32:	4604      	mov	r4, r0
		set_comparator(chan, now);
    ba34:	4601      	mov	r1, r0
    ba36:	4630      	mov	r0, r6
    ba38:	f7f9 fc1a 	bl	5270 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    ba3c:	4621      	mov	r1, r4
    ba3e:	4638      	mov	r0, r7
    ba40:	f7ff ffb2 	bl	b9a8 <counter_sub>
    ba44:	2801      	cmp	r0, #1
    ba46:	d0d8      	beq.n	b9fa <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ba48:	1ca7      	adds	r7, r4, #2
    ba4a:	4639      	mov	r1, r7
    ba4c:	4628      	mov	r0, r5
    ba4e:	f7ff ffab 	bl	b9a8 <counter_sub>
    ba52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ba56:	d9d4      	bls.n	ba02 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    ba58:	463d      	mov	r5, r7
    ba5a:	e7d2      	b.n	ba02 <set_absolute_alarm+0x18>
}
    ba5c:	4628      	mov	r0, r5
    ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ba60 <compare_set>:
{
    ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba62:	b083      	sub	sp, #12
    ba64:	4604      	mov	r4, r0
    ba66:	4617      	mov	r7, r2
    ba68:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    ba6a:	f7f9 fc2d 	bl	52c8 <compare_int_lock>
    ba6e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba72:	9301      	str	r3, [sp, #4]
    ba74:	9b08      	ldr	r3, [sp, #32]
    ba76:	9300      	str	r3, [sp, #0]
    ba78:	463a      	mov	r2, r7
    ba7a:	462b      	mov	r3, r5
    ba7c:	4620      	mov	r0, r4
    ba7e:	f7f9 fd13 	bl	54a8 <compare_set_nolocks>
    ba82:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    ba84:	4631      	mov	r1, r6
    ba86:	4620      	mov	r0, r4
    ba88:	f7f9 fc82 	bl	5390 <compare_int_unlock>
}
    ba8c:	4628      	mov	r0, r5
    ba8e:	b003      	add	sp, #12
    ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ba92 <sys_clock_cycle_get_32>:
{
    ba92:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    ba94:	f7f9 fce8 	bl	5468 <z_nrf_rtc_timer_read>
}
    ba98:	bd08      	pop	{r3, pc}

0000ba9a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    ba9a:	b410      	push	{r4}
	*state = &config->states[0];
    ba9c:	6843      	ldr	r3, [r0, #4]
    ba9e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    baa0:	e001      	b.n	baa6 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    baa2:	3408      	adds	r4, #8
    baa4:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    baa6:	6814      	ldr	r4, [r2, #0]
    baa8:	7a03      	ldrb	r3, [r0, #8]
    baaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    baae:	3b01      	subs	r3, #1
    bab0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bab4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    bab8:	429c      	cmp	r4, r3
    baba:	d804      	bhi.n	bac6 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    babc:	7963      	ldrb	r3, [r4, #5]
    babe:	428b      	cmp	r3, r1
    bac0:	d1ef      	bne.n	baa2 <pinctrl_lookup_state+0x8>
			return 0;
    bac2:	2000      	movs	r0, #0
    bac4:	e001      	b.n	baca <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    bac6:	f06f 0001 	mvn.w	r0, #1
}
    baca:	bc10      	pop	{r4}
    bacc:	4770      	bx	lr

0000bace <z_log_msg2_runtime_create>:
{
    bace:	b510      	push	{r4, lr}
    bad0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bad2:	ac0b      	add	r4, sp, #44	; 0x2c
    bad4:	9405      	str	r4, [sp, #20]
    bad6:	9403      	str	r4, [sp, #12]
    bad8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bada:	9402      	str	r4, [sp, #8]
    badc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bade:	9401      	str	r4, [sp, #4]
    bae0:	9c08      	ldr	r4, [sp, #32]
    bae2:	9400      	str	r4, [sp, #0]
    bae4:	f7f6 ff8e 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    bae8:	b006      	add	sp, #24
    baea:	bd10      	pop	{r4, pc}

0000baec <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    baec:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    baee:	f7fe fe7d 	bl	a7ec <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    baf2:	bd08      	pop	{r3, pc}

0000baf4 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    baf4:	b510      	push	{r4, lr}
    baf6:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    baf8:	f7f7 fab8 	bl	306c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    bafc:	f7f7 fb74 	bl	31e8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    bb00:	4620      	mov	r0, r4
    bb02:	f7ff fff3 	bl	baec <hw_cc3xx_init_internal>
	return res;
}
    bb06:	bd10      	pop	{r4, pc}

0000bb08 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bb0c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bb10:	2b08      	cmp	r3, #8
    bb12:	d001      	beq.n	bb18 <nrf52_errata_36+0x10>
        return false;
    bb14:	2000      	movs	r0, #0
    bb16:	4770      	bx	lr
                        return true;
    bb18:	2001      	movs	r0, #1
}
    bb1a:	4770      	bx	lr

0000bb1c <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bb20:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bb24:	2b08      	cmp	r3, #8
    bb26:	d001      	beq.n	bb2c <nrf52_errata_66+0x10>
        return false;
    bb28:	2000      	movs	r0, #0
    bb2a:	4770      	bx	lr
                        return true;
    bb2c:	2001      	movs	r0, #1
}
    bb2e:	4770      	bx	lr

0000bb30 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bb34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bb38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bb3c:	2a08      	cmp	r2, #8
    bb3e:	d001      	beq.n	bb44 <nrf52_errata_98+0x14>
        return false;
    bb40:	2000      	movs	r0, #0
    bb42:	4770      	bx	lr
                switch(var2)
    bb44:	2b00      	cmp	r3, #0
    bb46:	d804      	bhi.n	bb52 <nrf52_errata_98+0x22>
    bb48:	e8df f003 	tbb	[pc, r3]
    bb4c:	01          	.byte	0x01
    bb4d:	00          	.byte	0x00
    bb4e:	2001      	movs	r0, #1
    bb50:	4770      	bx	lr
                        return false;
    bb52:	2000      	movs	r0, #0
}
    bb54:	4770      	bx	lr

0000bb56 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bb5a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bb5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bb62:	2a08      	cmp	r2, #8
    bb64:	d001      	beq.n	bb6a <nrf52_errata_103+0x14>
        return false;
    bb66:	2000      	movs	r0, #0
    bb68:	4770      	bx	lr
                switch(var2)
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d804      	bhi.n	bb78 <nrf52_errata_103+0x22>
    bb6e:	e8df f003 	tbb	[pc, r3]
    bb72:	01          	.byte	0x01
    bb73:	00          	.byte	0x00
    bb74:	2001      	movs	r0, #1
    bb76:	4770      	bx	lr
                        return false;
    bb78:	2000      	movs	r0, #0
}
    bb7a:	4770      	bx	lr

0000bb7c <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bb7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bb80:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bb84:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bb88:	2a08      	cmp	r2, #8
    bb8a:	d001      	beq.n	bb90 <nrf52_errata_115+0x14>
        return false;
    bb8c:	2000      	movs	r0, #0
    bb8e:	4770      	bx	lr
                switch(var2)
    bb90:	2b00      	cmp	r3, #0
    bb92:	d804      	bhi.n	bb9e <nrf52_errata_115+0x22>
    bb94:	e8df f003 	tbb	[pc, r3]
    bb98:	01          	.byte	0x01
    bb99:	00          	.byte	0x00
    bb9a:	2001      	movs	r0, #1
    bb9c:	4770      	bx	lr
                        return false;
    bb9e:	2000      	movs	r0, #0
}
    bba0:	4770      	bx	lr

0000bba2 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bba6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bbaa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bbae:	2a08      	cmp	r2, #8
    bbb0:	d001      	beq.n	bbb6 <nrf52_errata_120+0x14>
        return false;
    bbb2:	2000      	movs	r0, #0
    bbb4:	4770      	bx	lr
                switch(var2)
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d804      	bhi.n	bbc4 <nrf52_errata_120+0x22>
    bbba:	e8df f003 	tbb	[pc, r3]
    bbbe:	01          	.byte	0x01
    bbbf:	00          	.byte	0x00
    bbc0:	2001      	movs	r0, #1
    bbc2:	4770      	bx	lr
                        return false;
    bbc4:	2000      	movs	r0, #0
}
    bbc6:	4770      	bx	lr

0000bbc8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bbc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bbcc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bbd0:	2b08      	cmp	r3, #8
    bbd2:	d001      	beq.n	bbd8 <nrf52_errata_136+0x10>
        return false;
    bbd4:	2000      	movs	r0, #0
    bbd6:	4770      	bx	lr
                        return true;
    bbd8:	2001      	movs	r0, #1
}
    bbda:	4770      	bx	lr

0000bbdc <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bbdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bbe0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bbe4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    bbe8:	2a08      	cmp	r2, #8
    bbea:	d001      	beq.n	bbf0 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    bbec:	2000      	movs	r0, #0
    bbee:	4770      	bx	lr
                switch(var2)
    bbf0:	2b04      	cmp	r3, #4
    bbf2:	d801      	bhi.n	bbf8 <nrf52_configuration_249+0x1c>
    bbf4:	2000      	movs	r0, #0
    bbf6:	4770      	bx	lr
                        return true;
    bbf8:	2001      	movs	r0, #1
    #endif
}
    bbfa:	4770      	bx	lr

0000bbfc <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    bbfc:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    bbfe:	4780      	blx	r0
}
    bc00:	bd08      	pop	{r3, pc}

0000bc02 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    bc02:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    bc04:	f000 f92f 	bl	be66 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    bc08:	bd08      	pop	{r3, pc}

0000bc0a <clock_initial_lfclksrc_get>:
}
    bc0a:	2000      	movs	r0, #0
    bc0c:	4770      	bx	lr

0000bc0e <clock_lfclksrc_tweak>:
{
    bc0e:	b538      	push	{r3, r4, r5, lr}
    bc10:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    bc12:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bc14:	2b01      	cmp	r3, #1
    bc16:	d002      	beq.n	bc1e <clock_lfclksrc_tweak+0x10>
    bc18:	b933      	cbnz	r3, bc28 <clock_lfclksrc_tweak+0x1a>
    bc1a:	2301      	movs	r3, #1
    bc1c:	e000      	b.n	bc20 <clock_lfclksrc_tweak+0x12>
    bc1e:	2301      	movs	r3, #1
    if (!is_correct_clk)
    bc20:	461d      	mov	r5, r3
    bc22:	b11b      	cbz	r3, bc2c <clock_lfclksrc_tweak+0x1e>
}
    bc24:	4628      	mov	r0, r5
    bc26:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bc28:	2300      	movs	r3, #0
    bc2a:	e7f9      	b.n	bc20 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bc2c:	2000      	movs	r0, #0
    bc2e:	f7fa fba5 	bl	637c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    bc32:	f7ff ffea 	bl	bc0a <clock_initial_lfclksrc_get>
    bc36:	6020      	str	r0, [r4, #0]
    bc38:	e7f4      	b.n	bc24 <clock_lfclksrc_tweak+0x16>

0000bc3a <pin_is_task_output>:
{
    bc3a:	b510      	push	{r4, lr}
    bc3c:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bc3e:	f7fa fd6f 	bl	6720 <pin_is_output>
    bc42:	b128      	cbz	r0, bc50 <pin_is_task_output+0x16>
    bc44:	4620      	mov	r0, r4
    bc46:	f7fa fd55 	bl	66f4 <pin_in_use_by_te>
    bc4a:	b118      	cbz	r0, bc54 <pin_is_task_output+0x1a>
    bc4c:	2001      	movs	r0, #1
    bc4e:	e000      	b.n	bc52 <pin_is_task_output+0x18>
    bc50:	2000      	movs	r0, #0
}
    bc52:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bc54:	2000      	movs	r0, #0
    bc56:	e7fc      	b.n	bc52 <pin_is_task_output+0x18>

0000bc58 <pin_is_input>:
{
    bc58:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    bc5a:	f7fa fd61 	bl	6720 <pin_is_output>
    bc5e:	f080 0001 	eor.w	r0, r0, #1
}
    bc62:	b2c0      	uxtb	r0, r0
    bc64:	bd08      	pop	{r3, pc}

0000bc66 <gpiote_polarity_to_trigger>:
}
    bc66:	4770      	bx	lr

0000bc68 <gpiote_trigger_to_polarity>:
}
    bc68:	4770      	bx	lr

0000bc6a <is_level>:
}
    bc6a:	2803      	cmp	r0, #3
    bc6c:	bf94      	ite	ls
    bc6e:	2000      	movls	r0, #0
    bc70:	2001      	movhi	r0, #1
    bc72:	4770      	bx	lr

0000bc74 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bc74:	b508      	push	{r3, lr}
  _DoInit();
    bc76:	f7fb fd1d 	bl	76b4 <_DoInit>
}
    bc7a:	bd08      	pop	{r3, pc}

0000bc7c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    bc7c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    bc7e:	f7ff fff9 	bl	bc74 <SEGGER_RTT_Init>

	return 0;
}
    bc82:	2000      	movs	r0, #0
    bc84:	bd08      	pop	{r3, pc}

0000bc86 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bc86:	b148      	cbz	r0, bc9c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bc88:	68c3      	ldr	r3, [r0, #12]
    bc8a:	8818      	ldrh	r0, [r3, #0]
    bc8c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bc90:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    bc94:	bf14      	ite	ne
    bc96:	2000      	movne	r0, #0
    bc98:	2001      	moveq	r0, #1
    bc9a:	4770      	bx	lr
		return false;
    bc9c:	2000      	movs	r0, #0
}
    bc9e:	4770      	bx	lr

0000bca0 <z_log_msg2_runtime_create>:
{
    bca0:	b510      	push	{r4, lr}
    bca2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bca4:	ac0b      	add	r4, sp, #44	; 0x2c
    bca6:	9405      	str	r4, [sp, #20]
    bca8:	9403      	str	r4, [sp, #12]
    bcaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bcac:	9402      	str	r4, [sp, #8]
    bcae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bcb0:	9401      	str	r4, [sp, #4]
    bcb2:	9c08      	ldr	r4, [sp, #32]
    bcb4:	9400      	str	r4, [sp, #0]
    bcb6:	f7f6 fea5 	bl	2a04 <z_impl_z_log_msg2_runtime_vcreate>
}
    bcba:	b006      	add	sp, #24
    bcbc:	bd10      	pop	{r4, pc}

0000bcbe <z_early_memset>:
{
    bcbe:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    bcc0:	f7ff fb18 	bl	b2f4 <memset>
}
    bcc4:	bd08      	pop	{r3, pc}

0000bcc6 <z_early_memcpy>:
{
    bcc6:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    bcc8:	f7ff fae5 	bl	b296 <memcpy>
}
    bccc:	bd08      	pop	{r3, pc}

0000bcce <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bcce:	6902      	ldr	r2, [r0, #16]
    bcd0:	6943      	ldr	r3, [r0, #20]
    bcd2:	431a      	orrs	r2, r3
    bcd4:	f012 0203 	ands.w	r2, r2, #3
    bcd8:	d10d      	bne.n	bcf6 <create_free_list+0x28>
	slab->free_list = NULL;
    bcda:	2100      	movs	r1, #0
    bcdc:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bcde:	e005      	b.n	bcec <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    bce0:	6981      	ldr	r1, [r0, #24]
    bce2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    bce4:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    bce6:	6901      	ldr	r1, [r0, #16]
    bce8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bcea:	3201      	adds	r2, #1
    bcec:	68c1      	ldr	r1, [r0, #12]
    bcee:	4291      	cmp	r1, r2
    bcf0:	d8f6      	bhi.n	bce0 <create_free_list+0x12>
	return 0;
    bcf2:	2000      	movs	r0, #0
    bcf4:	4770      	bx	lr
		return -EINVAL;
    bcf6:	f06f 0015 	mvn.w	r0, #21
}
    bcfa:	4770      	bx	lr

0000bcfc <k_mem_slab_init>:
{
    bcfc:	b510      	push	{r4, lr}
    bcfe:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    bd00:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    bd02:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    bd04:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    bd06:	2300      	movs	r3, #0
    bd08:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    bd0a:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    bd0c:	f7ff ffdf 	bl	bcce <create_free_list>
	if (rc < 0) {
    bd10:	2800      	cmp	r0, #0
    bd12:	db01      	blt.n	bd18 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    bd14:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    bd16:	6064      	str	r4, [r4, #4]
}
    bd18:	bd10      	pop	{r4, pc}

0000bd1a <setup_thread_stack>:
{
    bd1a:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bd1c:	3207      	adds	r2, #7
    bd1e:	f022 0207 	bic.w	r2, r2, #7
    bd22:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bd26:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bd2a:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    bd2e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    bd32:	2200      	movs	r2, #0
    bd34:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    bd38:	18c8      	adds	r0, r1, r3
    bd3a:	bc10      	pop	{r4}
    bd3c:	4770      	bx	lr

0000bd3e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bd3e:	f3ef 8005 	mrs	r0, IPSR
}
    bd42:	3800      	subs	r0, #0
    bd44:	bf18      	it	ne
    bd46:	2001      	movne	r0, #1
    bd48:	4770      	bx	lr

0000bd4a <k_thread_name_get>:
}
    bd4a:	3074      	adds	r0, #116	; 0x74
    bd4c:	4770      	bx	lr

0000bd4e <z_impl_k_thread_start>:
{
    bd4e:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bd50:	f7fd f980 	bl	9054 <z_sched_start>
}
    bd54:	bd08      	pop	{r3, pc}

0000bd56 <z_init_thread_base>:
{
    bd56:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    bd58:	2400      	movs	r4, #0
    bd5a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bd5c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bd5e:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    bd60:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    bd62:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bd64:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bd66:	61c4      	str	r4, [r0, #28]
}
    bd68:	bc10      	pop	{r4}
    bd6a:	4770      	bx	lr

0000bd6c <z_pm_save_idle_exit>:
{
    bd6c:	b508      	push	{r3, lr}
	pm_system_resume();
    bd6e:	f7f6 ff87 	bl	2c80 <pm_system_resume>
	sys_clock_idle_exit();
    bd72:	f7ff fe18 	bl	b9a6 <sys_clock_idle_exit>
}
    bd76:	bd08      	pop	{r3, pc}

0000bd78 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    bd78:	4288      	cmp	r0, r1
    bd7a:	da00      	bge.n	bd7e <new_prio_for_inheritance+0x6>
    bd7c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    bd7e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    bd82:	db01      	blt.n	bd88 <new_prio_for_inheritance+0x10>
    bd84:	4608      	mov	r0, r1
    bd86:	4770      	bx	lr
    bd88:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    bd8c:	4770      	bx	lr

0000bd8e <adjust_owner_prio>:
{
    bd8e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    bd90:	6880      	ldr	r0, [r0, #8]
    bd92:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bd96:	428b      	cmp	r3, r1
    bd98:	d101      	bne.n	bd9e <adjust_owner_prio+0x10>
	return false;
    bd9a:	2000      	movs	r0, #0
}
    bd9c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    bd9e:	f7fd fb0f 	bl	93c0 <z_set_prio>
    bda2:	e7fb      	b.n	bd9c <adjust_owner_prio+0xe>

0000bda4 <z_impl_k_mutex_init>:
{
    bda4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    bda6:	2000      	movs	r0, #0
    bda8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    bdaa:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    bdac:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    bdae:	605b      	str	r3, [r3, #4]
}
    bdb0:	4770      	bx	lr

0000bdb2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    bdb2:	b13a      	cbz	r2, bdc4 <z_impl_k_sem_init+0x12>
    bdb4:	428a      	cmp	r2, r1
    bdb6:	d308      	bcc.n	bdca <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    bdb8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    bdba:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    bdbc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    bdbe:	6040      	str	r0, [r0, #4]
	return 0;
    bdc0:	2000      	movs	r0, #0
    bdc2:	4770      	bx	lr
		return -EINVAL;
    bdc4:	f06f 0015 	mvn.w	r0, #21
    bdc8:	4770      	bx	lr
    bdca:	f06f 0015 	mvn.w	r0, #21
}
    bdce:	4770      	bx	lr

0000bdd0 <thread_active_elsewhere>:
}
    bdd0:	2000      	movs	r0, #0
    bdd2:	4770      	bx	lr

0000bdd4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    bdd4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bdd8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    bddc:	4283      	cmp	r3, r0
    bdde:	d001      	beq.n	bde4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    bde0:	1ac0      	subs	r0, r0, r3
    bde2:	4770      	bx	lr
	return 0;
    bde4:	2000      	movs	r0, #0
}
    bde6:	4770      	bx	lr

0000bde8 <z_reschedule_irqlock>:
{
    bde8:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bdea:	4603      	mov	r3, r0
    bdec:	b920      	cbnz	r0, bdf8 <z_reschedule_irqlock+0x10>
    bdee:	f3ef 8205 	mrs	r2, IPSR
    bdf2:	b942      	cbnz	r2, be06 <z_reschedule_irqlock+0x1e>
    bdf4:	2201      	movs	r2, #1
    bdf6:	e000      	b.n	bdfa <z_reschedule_irqlock+0x12>
    bdf8:	2200      	movs	r2, #0
	if (resched(key)) {
    bdfa:	b932      	cbnz	r2, be0a <z_reschedule_irqlock+0x22>
    bdfc:	f383 8811 	msr	BASEPRI, r3
    be00:	f3bf 8f6f 	isb	sy
}
    be04:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be06:	2200      	movs	r2, #0
    be08:	e7f7      	b.n	bdfa <z_reschedule_irqlock+0x12>
    be0a:	4618      	mov	r0, r3
    be0c:	f7f7 fada 	bl	33c4 <arch_swap>
	return ret;
    be10:	e7f8      	b.n	be04 <z_reschedule_irqlock+0x1c>

0000be12 <z_priq_dumb_best>:
{
    be12:	4603      	mov	r3, r0
	return list->head == list;
    be14:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be16:	4283      	cmp	r3, r0
    be18:	d000      	beq.n	be1c <z_priq_dumb_best+0xa>
}
    be1a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    be1c:	2000      	movs	r0, #0
	return thread;
    be1e:	e7fc      	b.n	be1a <z_priq_dumb_best+0x8>

0000be20 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    be20:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    be22:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    be24:	6083      	str	r3, [r0, #8]
}
    be26:	4770      	bx	lr

0000be28 <remove_timeout>:
{
    be28:	b510      	push	{r4, lr}
    be2a:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    be2c:	f7fe f828 	bl	9e80 <next>
    be30:	b148      	cbz	r0, be46 <remove_timeout+0x1e>
    be32:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    be34:	6920      	ldr	r0, [r4, #16]
    be36:	6961      	ldr	r1, [r4, #20]
    be38:	6913      	ldr	r3, [r2, #16]
    be3a:	181b      	adds	r3, r3, r0
    be3c:	6950      	ldr	r0, [r2, #20]
    be3e:	eb41 0100 	adc.w	r1, r1, r0
    be42:	6113      	str	r3, [r2, #16]
    be44:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    be46:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    be48:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    be4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    be4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    be4e:	2300      	movs	r3, #0
    be50:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    be52:	6063      	str	r3, [r4, #4]
}
    be54:	bd10      	pop	{r4, pc}

0000be56 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    be56:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    be58:	f7fe fb0e 	bl	a478 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    be5c:	bd08      	pop	{r3, pc}

0000be5e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    be5e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    be60:	f7fe fb0a 	bl	a478 <sys_clock_tick_get>
}
    be64:	bd08      	pop	{r3, pc}

0000be66 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    be66:	b900      	cbnz	r0, be6a <z_impl_k_busy_wait+0x4>
    be68:	4770      	bx	lr
{
    be6a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    be6c:	f7f8 f96e 	bl	414c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    be70:	bd08      	pop	{r3, pc}

0000be72 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    be72:	b510      	push	{r4, lr}
    be74:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    be76:	f7fe f925 	bl	a0c4 <z_abort_timeout>

	if (inactive) {
    be7a:	b9a0      	cbnz	r0, bea6 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    be7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    be7e:	b10b      	cbz	r3, be84 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    be80:	4620      	mov	r0, r4
    be82:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    be84:	f104 0018 	add.w	r0, r4, #24
    be88:	f7fd fca6 	bl	97d8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    be8c:	b158      	cbz	r0, bea6 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    be8e:	f7fd f88b 	bl	8fa8 <z_ready_thread>
	__asm__ volatile(
    be92:	f04f 0320 	mov.w	r3, #32
    be96:	f3ef 8011 	mrs	r0, BASEPRI
    be9a:	f383 8812 	msr	BASEPRI_MAX, r3
    be9e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bea2:	f7ff ffa1 	bl	bde8 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    bea6:	bd10      	pop	{r4, pc}

0000bea8 <k_heap_init>:
{
    bea8:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    beaa:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    beae:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    beb0:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    beb2:	f7f5 fce5 	bl	1880 <sys_heap_init>
}
    beb6:	bd10      	pop	{r4, pc}

0000beb8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    beb8:	f7fa b940 	b.w	613c <SystemInit>
