
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 24 00 20 4d 41 00 00 c3 b5 00 00 05 41 00 00     .$. MA.......A..
  10:	05 41 00 00 05 41 00 00 05 41 00 00 00 00 00 00     .A...A...A......
	...
  2c:	e1 38 00 00 05 41 00 00 00 00 00 00 89 38 00 00     .8...A.......8..
  3c:	05 41 00 00                                         .A..

00000040 <_irq_vector_table>:
  40:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  50:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  60:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  70:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  80:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  90:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  a0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  b0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  c0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  d0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  e0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..
  f0:	c1 39 00 00 c1 39 00 00 c1 39 00 00 c1 39 00 00     .9...9...9...9..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <adc_sample>:
void turnLedOn(int *ledState, const struct gpio_dt_spec *led);
void turnLedOff(int *ledState, const struct gpio_dt_spec *led);

/* Takes one sample */
static int adc_sample(void)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	b086      	sub	sp, #24
    int ret;
    const struct adc_sequence sequence = {
     7a4:	2300      	movs	r3, #0
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	9302      	str	r3, [sp, #8]
     7aa:	9303      	str	r3, [sp, #12]
     7ac:	9304      	str	r3, [sp, #16]
     7ae:	9305      	str	r3, [sp, #20]
     7b0:	2302      	movs	r3, #2
     7b2:	9302      	str	r3, [sp, #8]
     7b4:	4a0e      	ldr	r2, [pc, #56]	; (7f0 <adc_sample+0x50>)
     7b6:	9203      	str	r2, [sp, #12]
     7b8:	9304      	str	r3, [sp, #16]
     7ba:	230a      	movs	r3, #10
     7bc:	f88d 3014 	strb.w	r3, [sp, #20]
        .buffer = adc_sample_buffer,
        .buffer_size = sizeof(adc_sample_buffer),
        .resolution = ADC_RESOLUTION,
    };

    if (adc_dev == NULL)
     7c0:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <adc_sample+0x54>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	b140      	cbz	r0, 7d8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7c6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7c8:	685b      	ldr	r3, [r3, #4]
     7ca:	a901      	add	r1, sp, #4
     7cc:	4798      	blx	r3
        printk("adc_sample(): error, must bind to adc first \n\r");
        return -1;
    }

    ret = adc_read(adc_dev, &sequence);
    if (ret)
     7ce:	4604      	mov	r4, r0
     7d0:	b940      	cbnz	r0, 7e4 <adc_sample+0x44>
    {
        printk("adc_read() failed with code %d\n", ret);
    }

    return ret;
}
     7d2:	4620      	mov	r0, r4
     7d4:	b006      	add	sp, #24
     7d6:	bd10      	pop	{r4, pc}
        printk("adc_sample(): error, must bind to adc first \n\r");
     7d8:	4807      	ldr	r0, [pc, #28]	; (7f8 <adc_sample+0x58>)
     7da:	f00a fc92 	bl	b102 <printk>
        return -1;
     7de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7e2:	e7f6      	b.n	7d2 <adc_sample+0x32>
        printk("adc_read() failed with code %d\n", ret);
     7e4:	4601      	mov	r1, r0
     7e6:	4805      	ldr	r0, [pc, #20]	; (7fc <adc_sample+0x5c>)
     7e8:	f00a fc8b 	bl	b102 <printk>
     7ec:	e7f1      	b.n	7d2 <adc_sample+0x32>
     7ee:	bf00      	nop
     7f0:	200005fc 	.word	0x200005fc
     7f4:	200005f8 	.word	0x200005f8
     7f8:	0000c6f8 	.word	0x0000c6f8
     7fc:	0000c728 	.word	0x0000c728

00000800 <thread_sensor_code>:
    return;
}

/* Thread code implementation */
void thread_sensor_code(void *argA, void *argB, void *argC)
{
     800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int64_t fin_time = 0, release_time = 0;

    /* Other variables */
    long int nact = 0;

    printk("Thread A init (periodic)\n");
     804:	4857      	ldr	r0, [pc, #348]	; (964 <thread_sensor_code+0x164>)
     806:	f00a fc7c 	bl	b102 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     80a:	f00b fd7b 	bl	c304 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     80e:	014a      	lsls	r2, r1, #5
     810:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     814:	0143      	lsls	r3, r0, #5
     816:	1a1b      	subs	r3, r3, r0
     818:	eb62 0201 	sbc.w	r2, r2, r1
     81c:	0092      	lsls	r2, r2, #2
     81e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     822:	009b      	lsls	r3, r3, #2
     824:	181c      	adds	r4, r3, r0
     826:	eb42 0301 	adc.w	r3, r2, r1
     82a:	00db      	lsls	r3, r3, #3
     82c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     830:	f3c4 3410 	ubfx	r4, r4, #12, #17
     834:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     838:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     83a:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     83e:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     842:	2500      	movs	r5, #0
     844:	e048      	b.n	8d8 <thread_sensor_code+0xd8>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());

        err = adc_sample();
        if (err)
        {
            printk("adc_sample() failed with error code %d\n\r", err);
     846:	4848      	ldr	r0, [pc, #288]	; (968 <thread_sensor_code+0x168>)
     848:	f00a fc5b 	bl	b102 <printk>
     84c:	e022      	b.n	894 <thread_sensor_code+0x94>
                printk("adc reading out of range\n\r");
            }
            else
            {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r", adc_sample_buffer[0], (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023)));
     84e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
     852:	fb08 f007 	mul.w	r0, r8, r7
     856:	f7ff fdc1 	bl	3dc <__aeabi_i2f>
     85a:	4944      	ldr	r1, [pc, #272]	; (96c <thread_sensor_code+0x16c>)
     85c:	f7ff fc50 	bl	100 <__aeabi_fmul>
     860:	f7ff fe10 	bl	484 <__aeabi_f2uiz>
     864:	b282      	uxth	r2, r0
     866:	4639      	mov	r1, r7
     868:	4841      	ldr	r0, [pc, #260]	; (970 <thread_sensor_code+0x170>)
     86a:	f00a fc4a 	bl	b102 <printk>
                ab = (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023));
     86e:	4b41      	ldr	r3, [pc, #260]	; (974 <thread_sensor_code+0x174>)
     870:	8818      	ldrh	r0, [r3, #0]
     872:	fb08 f000 	mul.w	r0, r8, r0
     876:	f7ff fdb1 	bl	3dc <__aeabi_i2f>
     87a:	493c      	ldr	r1, [pc, #240]	; (96c <thread_sensor_code+0x16c>)
     87c:	f7ff fc40 	bl	100 <__aeabi_fmul>
     880:	f7ff fe00 	bl	484 <__aeabi_f2uiz>
     884:	4b3c      	ldr	r3, [pc, #240]	; (978 <thread_sensor_code+0x178>)
     886:	8018      	strh	r0, [r3, #0]
                ab = 1500;
     888:	f240 51dc 	movw	r1, #1500	; 0x5dc
     88c:	8019      	strh	r1, [r3, #0]
                printk("Thread A set ab value to: %d \n", ab);
     88e:	483b      	ldr	r0, [pc, #236]	; (97c <thread_sensor_code+0x17c>)
     890:	f00a fc37 	bl	b102 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     894:	483a      	ldr	r0, [pc, #232]	; (980 <thread_sensor_code+0x180>)
     896:	f008 f941 	bl	8b1c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     89a:	f00b fd33 	bl	c304 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     89e:	4684      	mov	ip, r0
     8a0:	014a      	lsls	r2, r1, #5
     8a2:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     8a6:	0140      	lsls	r0, r0, #5
     8a8:	ebb0 030c 	subs.w	r3, r0, ip
     8ac:	eb62 0201 	sbc.w	r2, r2, r1
     8b0:	0092      	lsls	r2, r2, #2
     8b2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     8b6:	009b      	lsls	r3, r3, #2
     8b8:	eb13 030c 	adds.w	r3, r3, ip
     8bc:	eb42 0101 	adc.w	r1, r2, r1
     8c0:	00c9      	lsls	r1, r1, #3
     8c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     8c6:	f3c3 3310 	ubfx	r3, r3, #12, #17
     8ca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     8ce:	0bc9      	lsrs	r1, r1, #15

        k_sem_give(&sem_ab);

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        if (fin_time < release_time)
     8d0:	42a3      	cmp	r3, r4
     8d2:	eb71 0206 	sbcs.w	r2, r1, r6
     8d6:	db2b      	blt.n	930 <thread_sensor_code+0x130>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     8d8:	3501      	adds	r5, #1
     8da:	f00b fd13 	bl	c304 <z_impl_k_uptime_ticks>
     8de:	4602      	mov	r2, r0
     8e0:	014b      	lsls	r3, r1, #5
     8e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     8e6:	0140      	lsls	r0, r0, #5
     8e8:	1a80      	subs	r0, r0, r2
     8ea:	eb63 0301 	sbc.w	r3, r3, r1
     8ee:	009b      	lsls	r3, r3, #2
     8f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     8f4:	0080      	lsls	r0, r0, #2
     8f6:	1880      	adds	r0, r0, r2
     8f8:	eb43 0301 	adc.w	r3, r3, r1
     8fc:	00db      	lsls	r3, r3, #3
     8fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     902:	f3c0 3010 	ubfx	r0, r0, #12, #17
     906:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     90a:	0bdb      	lsrs	r3, r3, #15
     90c:	4629      	mov	r1, r5
     90e:	481d      	ldr	r0, [pc, #116]	; (984 <thread_sensor_code+0x184>)
     910:	f00a fbf7 	bl	b102 <printk>
        err = adc_sample();
     914:	f7ff ff44 	bl	7a0 <adc_sample>
        if (err)
     918:	4601      	mov	r1, r0
     91a:	2800      	cmp	r0, #0
     91c:	d193      	bne.n	846 <thread_sensor_code+0x46>
            if (adc_sample_buffer[0] > 1023)
     91e:	4b15      	ldr	r3, [pc, #84]	; (974 <thread_sensor_code+0x174>)
     920:	881f      	ldrh	r7, [r3, #0]
     922:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     926:	d392      	bcc.n	84e <thread_sensor_code+0x4e>
                printk("adc reading out of range\n\r");
     928:	4817      	ldr	r0, [pc, #92]	; (988 <thread_sensor_code+0x188>)
     92a:	f00a fbea 	bl	b102 <printk>
     92e:	e7b1      	b.n	894 <thread_sensor_code+0x94>
        {
            k_msleep(release_time - fin_time);
     930:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     932:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     936:	17c1      	asrs	r1, r0, #31
     938:	03c9      	lsls	r1, r1, #15
     93a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     93e:	03c0      	lsls	r0, r0, #15
     940:	f240 33e7 	movw	r3, #999	; 0x3e7
     944:	18c0      	adds	r0, r0, r3
     946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     94a:	f04f 0300 	mov.w	r3, #0
     94e:	f141 0100 	adc.w	r1, r1, #0
     952:	f7ff fdb7 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     956:	f009 fbc1 	bl	a0dc <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     95a:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     95e:	f146 0600 	adc.w	r6, r6, #0
     962:	e7b9      	b.n	8d8 <thread_sensor_code+0xd8>
     964:	0000c748 	.word	0x0000c748
     968:	0000c79c 	.word	0x0000c79c
     96c:	3b40300c 	.word	0x3b40300c
     970:	0000c7e4 	.word	0x0000c7e4
     974:	200005fc 	.word	0x200005fc
     978:	200001dc 	.word	0x200001dc
     97c:	0000c808 	.word	0x0000c808
     980:	20000600 	.word	0x20000600
     984:	0000c764 	.word	0x0000c764
     988:	0000c7c8 	.word	0x0000c7c8

0000098c <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     990:	4605      	mov	r5, r0
     992:	460e      	mov	r6, r1
     994:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     996:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     99a:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     99e:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     9a2:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     9a6:	d136      	bne.n	a16 <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     9a8:	f004 0330 	and.w	r3, r4, #48	; 0x30
     9ac:	2b30      	cmp	r3, #48	; 0x30
     9ae:	d043      	beq.n	a38 <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     9b0:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     9b4:	2b02      	cmp	r3, #2
     9b6:	d050      	beq.n	a5a <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     9b8:	f004 0306 	and.w	r3, r4, #6
     9bc:	2b04      	cmp	r3, #4
     9be:	d05d      	beq.n	a7c <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     9c0:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     9c4:	d002      	beq.n	9cc <z_impl_gpio_pin_configure+0x40>
     9c6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     9ca:	d065      	beq.n	a98 <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     9cc:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     9d0:	d074      	beq.n	abc <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     9d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     9d6:	d005      	beq.n	9e4 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     9d8:	b127      	cbz	r7, 9e4 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     9da:	f014 0f01 	tst.w	r4, #1
     9de:	d001      	beq.n	9e4 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     9e0:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     9e4:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9e8:	f8db 3000 	ldr.w	r3, [fp]
     9ec:	2701      	movs	r7, #1
     9ee:	40b7      	lsls	r7, r6
     9f0:	423b      	tst	r3, r7
     9f2:	d075      	beq.n	ae0 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     9f4:	f014 0f01 	tst.w	r4, #1
     9f8:	f000 8084 	beq.w	b04 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     9fc:	f8d8 3000 	ldr.w	r3, [r8]
     a00:	433b      	orrs	r3, r7
     a02:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     a06:	f8da 3000 	ldr.w	r3, [sl]
     a0a:	464a      	mov	r2, r9
     a0c:	4631      	mov	r1, r6
     a0e:	4628      	mov	r0, r5
     a10:	4798      	blx	r3
}
     a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     a16:	4f3f      	ldr	r7, [pc, #252]	; (b14 <z_impl_gpio_pin_configure+0x188>)
     a18:	f240 23b5 	movw	r3, #693	; 0x2b5
     a1c:	463a      	mov	r2, r7
     a1e:	493e      	ldr	r1, [pc, #248]	; (b18 <z_impl_gpio_pin_configure+0x18c>)
     a20:	483e      	ldr	r0, [pc, #248]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     a22:	f00a fcf3 	bl	b40c <assert_print>
     a26:	483e      	ldr	r0, [pc, #248]	; (b20 <z_impl_gpio_pin_configure+0x194>)
     a28:	f00a fcf0 	bl	b40c <assert_print>
     a2c:	f240 21b5 	movw	r1, #693	; 0x2b5
     a30:	4638      	mov	r0, r7
     a32:	f00a fce4 	bl	b3fe <assert_post_action>
     a36:	e7b7      	b.n	9a8 <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     a38:	4f36      	ldr	r7, [pc, #216]	; (b14 <z_impl_gpio_pin_configure+0x188>)
     a3a:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     a3e:	463a      	mov	r2, r7
     a40:	4938      	ldr	r1, [pc, #224]	; (b24 <z_impl_gpio_pin_configure+0x198>)
     a42:	4836      	ldr	r0, [pc, #216]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     a44:	f00a fce2 	bl	b40c <assert_print>
     a48:	4837      	ldr	r0, [pc, #220]	; (b28 <z_impl_gpio_pin_configure+0x19c>)
     a4a:	f00a fcdf 	bl	b40c <assert_print>
     a4e:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     a52:	4638      	mov	r0, r7
     a54:	f00a fcd3 	bl	b3fe <assert_post_action>
     a58:	e7aa      	b.n	9b0 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     a5a:	4f2e      	ldr	r7, [pc, #184]	; (b14 <z_impl_gpio_pin_configure+0x188>)
     a5c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     a60:	463a      	mov	r2, r7
     a62:	4932      	ldr	r1, [pc, #200]	; (b2c <z_impl_gpio_pin_configure+0x1a0>)
     a64:	482d      	ldr	r0, [pc, #180]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     a66:	f00a fcd1 	bl	b40c <assert_print>
     a6a:	4831      	ldr	r0, [pc, #196]	; (b30 <z_impl_gpio_pin_configure+0x1a4>)
     a6c:	f00a fcce 	bl	b40c <assert_print>
     a70:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     a74:	4638      	mov	r0, r7
     a76:	f00a fcc2 	bl	b3fe <assert_post_action>
     a7a:	e79d      	b.n	9b8 <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     a7c:	4f25      	ldr	r7, [pc, #148]	; (b14 <z_impl_gpio_pin_configure+0x188>)
     a7e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     a82:	463a      	mov	r2, r7
     a84:	492b      	ldr	r1, [pc, #172]	; (b34 <z_impl_gpio_pin_configure+0x1a8>)
     a86:	4825      	ldr	r0, [pc, #148]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     a88:	f00a fcc0 	bl	b40c <assert_print>
     a8c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     a90:	4638      	mov	r0, r7
     a92:	f00a fcb4 	bl	b3fe <assert_post_action>
     a96:	e793      	b.n	9c0 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     a98:	f8df 9078 	ldr.w	r9, [pc, #120]	; b14 <z_impl_gpio_pin_configure+0x188>
     a9c:	f240 23c3 	movw	r3, #707	; 0x2c3
     aa0:	464a      	mov	r2, r9
     aa2:	4925      	ldr	r1, [pc, #148]	; (b38 <z_impl_gpio_pin_configure+0x1ac>)
     aa4:	481d      	ldr	r0, [pc, #116]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     aa6:	f00a fcb1 	bl	b40c <assert_print>
     aaa:	4824      	ldr	r0, [pc, #144]	; (b3c <z_impl_gpio_pin_configure+0x1b0>)
     aac:	f00a fcae 	bl	b40c <assert_print>
     ab0:	f240 21c3 	movw	r1, #707	; 0x2c3
     ab4:	4648      	mov	r0, r9
     ab6:	f00a fca2 	bl	b3fe <assert_post_action>
     aba:	e787      	b.n	9cc <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     abc:	f8df 9054 	ldr.w	r9, [pc, #84]	; b14 <z_impl_gpio_pin_configure+0x188>
     ac0:	f240 23c7 	movw	r3, #711	; 0x2c7
     ac4:	464a      	mov	r2, r9
     ac6:	491e      	ldr	r1, [pc, #120]	; (b40 <z_impl_gpio_pin_configure+0x1b4>)
     ac8:	4814      	ldr	r0, [pc, #80]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     aca:	f00a fc9f 	bl	b40c <assert_print>
     ace:	481d      	ldr	r0, [pc, #116]	; (b44 <z_impl_gpio_pin_configure+0x1b8>)
     ad0:	f00a fc9c 	bl	b40c <assert_print>
     ad4:	f240 21c7 	movw	r1, #711	; 0x2c7
     ad8:	4648      	mov	r0, r9
     ada:	f00a fc90 	bl	b3fe <assert_post_action>
     ade:	e778      	b.n	9d2 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ae0:	f8df b030 	ldr.w	fp, [pc, #48]	; b14 <z_impl_gpio_pin_configure+0x188>
     ae4:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     ae8:	465a      	mov	r2, fp
     aea:	4917      	ldr	r1, [pc, #92]	; (b48 <z_impl_gpio_pin_configure+0x1bc>)
     aec:	480b      	ldr	r0, [pc, #44]	; (b1c <z_impl_gpio_pin_configure+0x190>)
     aee:	f00a fc8d 	bl	b40c <assert_print>
     af2:	4816      	ldr	r0, [pc, #88]	; (b4c <z_impl_gpio_pin_configure+0x1c0>)
     af4:	f00a fc8a 	bl	b40c <assert_print>
     af8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     afc:	4658      	mov	r0, fp
     afe:	f00a fc7e 	bl	b3fe <assert_post_action>
     b02:	e777      	b.n	9f4 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     b04:	f8d8 3000 	ldr.w	r3, [r8]
     b08:	ea23 0307 	bic.w	r3, r3, r7
     b0c:	f8c8 3000 	str.w	r3, [r8]
     b10:	e779      	b.n	a06 <z_impl_gpio_pin_configure+0x7a>
     b12:	bf00      	nop
     b14:	0000c828 	.word	0x0000c828
     b18:	0000c85c 	.word	0x0000c85c
     b1c:	0000c8bc 	.word	0x0000c8bc
     b20:	0000c8dc 	.word	0x0000c8dc
     b24:	0000c900 	.word	0x0000c900
     b28:	0000c93c 	.word	0x0000c93c
     b2c:	0000c97c 	.word	0x0000c97c
     b30:	0000c9b4 	.word	0x0000c9b4
     b34:	0000ca08 	.word	0x0000ca08
     b38:	0000ca3c 	.word	0x0000ca3c
     b3c:	0000ca84 	.word	0x0000ca84
     b40:	0000cac0 	.word	0x0000cac0
     b44:	0000cb04 	.word	0x0000cb04
     b48:	0000cb30 	.word	0x0000cb30
     b4c:	0000cb70 	.word	0x0000cb70

00000b50 <main>:
{
     b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b54:	b088      	sub	sp, #32
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b56:	4830      	ldr	r0, [pc, #192]	; (c18 <main+0xc8>)
     b58:	f007 f8ca 	bl	7cf0 <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     b5c:	4b2f      	ldr	r3, [pc, #188]	; (c1c <main+0xcc>)
     b5e:	6018      	str	r0, [r3, #0]
    if (!adc_dev)
     b60:	2800      	cmp	r0, #0
     b62:	d050      	beq.n	c06 <main+0xb6>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     b64:	4b2d      	ldr	r3, [pc, #180]	; (c1c <main+0xcc>)
     b66:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
     b68:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	492c      	ldr	r1, [pc, #176]	; (c20 <main+0xd0>)
     b6e:	4798      	blx	r3
    if (err)
     b70:	4601      	mov	r1, r0
     b72:	2800      	cmp	r0, #0
     b74:	d14b      	bne.n	c0e <main+0xbe>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     b76:	2501      	movs	r5, #1
     b78:	4b2a      	ldr	r3, [pc, #168]	; (c24 <main+0xd4>)
     b7a:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     b7c:	482a      	ldr	r0, [pc, #168]	; (c28 <main+0xd8>)
     b7e:	f003 fcdd 	bl	453c <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     b82:	462a      	mov	r2, r5
     b84:	2100      	movs	r1, #0
     b86:	4829      	ldr	r0, [pc, #164]	; (c2c <main+0xdc>)
     b88:	f00b fb66 	bl	c258 <z_impl_k_sem_init>
     b8c:	462a      	mov	r2, r5
     b8e:	2100      	movs	r1, #0
     b90:	4827      	ldr	r0, [pc, #156]	; (c30 <main+0xe0>)
     b92:	f00b fb61 	bl	c258 <z_impl_k_sem_init>
                                        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
     b96:	2600      	movs	r6, #0
     b98:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     b9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b9e:	2400      	movs	r4, #0
     ba0:	9404      	str	r4, [sp, #16]
     ba2:	9503      	str	r5, [sp, #12]
     ba4:	9402      	str	r4, [sp, #8]
     ba6:	9401      	str	r4, [sp, #4]
     ba8:	9400      	str	r4, [sp, #0]
     baa:	4b22      	ldr	r3, [pc, #136]	; (c34 <main+0xe4>)
     bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
     bb0:	4921      	ldr	r1, [pc, #132]	; (c38 <main+0xe8>)
     bb2:	4822      	ldr	r0, [pc, #136]	; (c3c <main+0xec>)
     bb4:	f007 fcc6 	bl	8544 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
     bb8:	4b21      	ldr	r3, [pc, #132]	; (c40 <main+0xf0>)
     bba:	6018      	str	r0, [r3, #0]
     bbc:	e9cd 6706 	strd	r6, r7, [sp, #24]
     bc0:	9404      	str	r4, [sp, #16]
     bc2:	9503      	str	r5, [sp, #12]
     bc4:	9402      	str	r4, [sp, #8]
     bc6:	9401      	str	r4, [sp, #4]
     bc8:	9400      	str	r4, [sp, #0]
     bca:	4b1e      	ldr	r3, [pc, #120]	; (c44 <main+0xf4>)
     bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
     bd0:	491d      	ldr	r1, [pc, #116]	; (c48 <main+0xf8>)
     bd2:	481e      	ldr	r0, [pc, #120]	; (c4c <main+0xfc>)
     bd4:	f007 fcb6 	bl	8544 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
     bd8:	f8df 8074 	ldr.w	r8, [pc, #116]	; c50 <main+0x100>
     bdc:	f8c8 0000 	str.w	r0, [r8]
     be0:	e9cd 6706 	strd	r6, r7, [sp, #24]
     be4:	9404      	str	r4, [sp, #16]
     be6:	9503      	str	r5, [sp, #12]
     be8:	9402      	str	r4, [sp, #8]
     bea:	9401      	str	r4, [sp, #4]
     bec:	9400      	str	r4, [sp, #0]
     bee:	4b19      	ldr	r3, [pc, #100]	; (c54 <main+0x104>)
     bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     bf4:	4918      	ldr	r1, [pc, #96]	; (c58 <main+0x108>)
     bf6:	4819      	ldr	r0, [pc, #100]	; (c5c <main+0x10c>)
     bf8:	f007 fca4 	bl	8544 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_output_data, thread_output_stack,
     bfc:	f8c8 0000 	str.w	r0, [r8]
}
     c00:	b008      	add	sp, #32
     c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("ADC device_get_binding() failed\n");
     c06:	4816      	ldr	r0, [pc, #88]	; (c60 <main+0x110>)
     c08:	f00a fa7b 	bl	b102 <printk>
     c0c:	e7aa      	b.n	b64 <main+0x14>
        printk("adc_channel_setup() failed with error code %d\n", err);
     c0e:	4815      	ldr	r0, [pc, #84]	; (c64 <main+0x114>)
     c10:	f00a fa77 	bl	b102 <printk>
     c14:	e7af      	b.n	b76 <main+0x26>
     c16:	bf00      	nop
     c18:	0000cb84 	.word	0x0000cb84
     c1c:	200005f8 	.word	0x200005f8
     c20:	0000cdd4 	.word	0x0000cdd4
     c24:	40007000 	.word	0x40007000
     c28:	0000cbe0 	.word	0x0000cbe0
     c2c:	20000600 	.word	0x20000600
     c30:	20000610 	.word	0x20000610
     c34:	00000801 	.word	0x00000801
     c38:	200013a0 	.word	0x200013a0
     c3c:	200003c0 	.word	0x200003c0
     c40:	20000624 	.word	0x20000624
     c44:	00000c69 	.word	0x00000c69
     c48:	200017c0 	.word	0x200017c0
     c4c:	20000310 	.word	0x20000310
     c50:	20000620 	.word	0x20000620
     c54:	00000e6d 	.word	0x00000e6d
     c58:	20001be0 	.word	0x20001be0
     c5c:	20000260 	.word	0x20000260
     c60:	0000cb8c 	.word	0x0000cb8c
     c64:	0000cbb0 	.word	0x0000cbb0

00000c68 <thread_processing_code>:
        }
    }
}

void thread_processing_code(void *argA, void *argB, void *argC)
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	b08f      	sub	sp, #60	; 0x3c
    /* Other variables */
    long int nact = 0;
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
     c6c:	2500      	movs	r5, #0
     c6e:	9509      	str	r5, [sp, #36]	; 0x24
     c70:	950a      	str	r5, [sp, #40]	; 0x28
     c72:	950b      	str	r5, [sp, #44]	; 0x2c
     c74:	950c      	str	r5, [sp, #48]	; 0x30
     c76:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint16_t current_read = 0;
    int iterations = 0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     c7a:	483b      	ldr	r0, [pc, #236]	; (d68 <thread_processing_code+0x100>)
     c7c:	f00a fa41 	bl	b102 <printk>
    int iterations = 0;
     c80:	462c      	mov	r4, r5
     c82:	e03d      	b.n	d00 <thread_processing_code+0x98>
        printk("Task B read ab value: %d\n", ab);
        current_read = ab;

        if (iterations > 8)
        {
            uint16_t avg = precedentsAverage(precedents, current_read, 9);
     c84:	2209      	movs	r2, #9
     c86:	4631      	mov	r1, r6
     c88:	a809      	add	r0, sp, #36	; 0x24
     c8a:	f00a f9cc 	bl	b026 <precedentsAverage>
     c8e:	4607      	mov	r7, r0
            bc = avg;
     c90:	4b36      	ldr	r3, [pc, #216]	; (d6c <thread_processing_code+0x104>)
     c92:	8018      	strh	r0, [r3, #0]
	z_impl_k_sem_give(sem);
     c94:	4836      	ldr	r0, [pc, #216]	; (d70 <thread_processing_code+0x108>)
     c96:	f007 ff41 	bl	8b1c <z_impl_k_sem_give>
            k_sem_give(&sem_bc);
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], current_read, avg);
     c9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
     c9e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
     ca2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
     ca6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
     caa:	f8bd c032 	ldrh.w	ip, [sp, #50]	; 0x32
     cae:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
     cb2:	9707      	str	r7, [sp, #28]
     cb4:	9606      	str	r6, [sp, #24]
     cb6:	f8cd e014 	str.w	lr, [sp, #20]
     cba:	f8cd c010 	str.w	ip, [sp, #16]
     cbe:	9003      	str	r0, [sp, #12]
     cc0:	9102      	str	r1, [sp, #8]
     cc2:	9201      	str	r2, [sp, #4]
     cc4:	9300      	str	r3, [sp, #0]
     cc6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     cca:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
     cce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
     cd2:	4828      	ldr	r0, [pc, #160]	; (d74 <thread_processing_code+0x10c>)
     cd4:	f00a fa15 	bl	b102 <printk>

            precedents[iterations % 9] = current_read;
     cd8:	4a27      	ldr	r2, [pc, #156]	; (d78 <thread_processing_code+0x110>)
     cda:	fb82 3204 	smull	r3, r2, r2, r4
     cde:	17e3      	asrs	r3, r4, #31
     ce0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
     ce4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     ce8:	1ae3      	subs	r3, r4, r3
     cea:	aa0e      	add	r2, sp, #56	; 0x38
     cec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     cf0:	f823 6c14 	strh.w	r6, [r3, #-20]
        }
        else
            precedents[iterations] = current_read;
        iterations++;
     cf4:	3401      	adds	r4, #1
        printk("Thread B set bc value to: %d \n", bc);
     cf6:	4b1d      	ldr	r3, [pc, #116]	; (d6c <thread_processing_code+0x104>)
     cf8:	8819      	ldrh	r1, [r3, #0]
     cfa:	4820      	ldr	r0, [pc, #128]	; (d7c <thread_processing_code+0x114>)
     cfc:	f00a fa01 	bl	b102 <printk>
	return z_impl_k_sem_take(sem, timeout);
     d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d08:	481d      	ldr	r0, [pc, #116]	; (d80 <thread_processing_code+0x118>)
     d0a:	f007 ff4b 	bl	8ba4 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     d0e:	3501      	adds	r5, #1
	return z_impl_k_uptime_ticks();
     d10:	f00b faf8 	bl	c304 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     d14:	4602      	mov	r2, r0
     d16:	014b      	lsls	r3, r1, #5
     d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     d1c:	0140      	lsls	r0, r0, #5
     d1e:	1a80      	subs	r0, r0, r2
     d20:	eb63 0301 	sbc.w	r3, r3, r1
     d24:	009b      	lsls	r3, r3, #2
     d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     d2a:	0080      	lsls	r0, r0, #2
     d2c:	1880      	adds	r0, r0, r2
     d2e:	eb43 0301 	adc.w	r3, r3, r1
     d32:	00db      	lsls	r3, r3, #3
     d34:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     d38:	f3c0 3010 	ubfx	r0, r0, #12, #17
     d3c:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     d40:	0bdb      	lsrs	r3, r3, #15
     d42:	4629      	mov	r1, r5
     d44:	480f      	ldr	r0, [pc, #60]	; (d84 <thread_processing_code+0x11c>)
     d46:	f00a f9dc 	bl	b102 <printk>
        printk("Task B read ab value: %d\n", ab);
     d4a:	4e0f      	ldr	r6, [pc, #60]	; (d88 <thread_processing_code+0x120>)
     d4c:	8831      	ldrh	r1, [r6, #0]
     d4e:	480f      	ldr	r0, [pc, #60]	; (d8c <thread_processing_code+0x124>)
     d50:	f00a f9d7 	bl	b102 <printk>
        current_read = ab;
     d54:	8836      	ldrh	r6, [r6, #0]
        if (iterations > 8)
     d56:	2c08      	cmp	r4, #8
     d58:	dc94      	bgt.n	c84 <thread_processing_code+0x1c>
            precedents[iterations] = current_read;
     d5a:	ab0e      	add	r3, sp, #56	; 0x38
     d5c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
     d60:	f823 6c14 	strh.w	r6, [r3, #-20]
     d64:	e7c6      	b.n	cf4 <thread_processing_code+0x8c>
     d66:	bf00      	nop
     d68:	0000cc14 	.word	0x0000cc14
     d6c:	200001de 	.word	0x200001de
     d70:	20000610 	.word	0x20000610
     d74:	0000cca4 	.word	0x0000cca4
     d78:	38e38e39 	.word	0x38e38e39
     d7c:	0000ccd0 	.word	0x0000ccd0
     d80:	20000600 	.word	0x20000600
     d84:	0000cc50 	.word	0x0000cc50
     d88:	200001dc 	.word	0x200001dc
     d8c:	0000cc88 	.word	0x0000cc88

00000d90 <turnLedOn>:
        sum += precedents[i];
    return (sum + current_read) / (precedents_size+1);
}

void turnLedOn(int *ledState, const struct gpio_dt_spec *led)
{
     d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    if (*ledState == 0)
     d92:	6803      	ldr	r3, [r0, #0]
     d94:	b103      	cbz	r3, d98 <turnLedOn+0x8>
        ret = gpio_pin_toggle_dt(led);
        if (ret < 0)
            printk("TOGGLING LED FAILED");
        *ledState = 1;
    }
}
     d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d98:	4604      	mov	r4, r0
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
     d9a:	680e      	ldr	r6, [r1, #0]
     d9c:	790a      	ldrb	r2, [r1, #4]
	const struct gpio_driver_config *const cfg =
     d9e:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	2501      	movs	r5, #1
     da4:	4095      	lsls	r5, r2
     da6:	422b      	tst	r3, r5
     da8:	d009      	beq.n	dbe <turnLedOn+0x2e>
	const struct gpio_driver_api *api =
     daa:	68b3      	ldr	r3, [r6, #8]
	return api->port_toggle_bits(port, pins);
     dac:	695b      	ldr	r3, [r3, #20]
     dae:	4629      	mov	r1, r5
     db0:	4630      	mov	r0, r6
     db2:	4798      	blx	r3
        if (ret < 0)
     db4:	2800      	cmp	r0, #0
     db6:	db13      	blt.n	de0 <turnLedOn+0x50>
        *ledState = 1;
     db8:	2301      	movs	r3, #1
     dba:	6023      	str	r3, [r4, #0]
}
     dbc:	e7eb      	b.n	d96 <turnLedOn+0x6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dbe:	4f0a      	ldr	r7, [pc, #40]	; (de8 <turnLedOn+0x58>)
     dc0:	f240 43bc 	movw	r3, #1212	; 0x4bc
     dc4:	463a      	mov	r2, r7
     dc6:	4909      	ldr	r1, [pc, #36]	; (dec <turnLedOn+0x5c>)
     dc8:	4809      	ldr	r0, [pc, #36]	; (df0 <turnLedOn+0x60>)
     dca:	f00a fb1f 	bl	b40c <assert_print>
     dce:	4809      	ldr	r0, [pc, #36]	; (df4 <turnLedOn+0x64>)
     dd0:	f00a fb1c 	bl	b40c <assert_print>
     dd4:	f240 41bc 	movw	r1, #1212	; 0x4bc
     dd8:	4638      	mov	r0, r7
     dda:	f00a fb10 	bl	b3fe <assert_post_action>
     dde:	e7e4      	b.n	daa <turnLedOn+0x1a>
            printk("TOGGLING LED FAILED");
     de0:	4805      	ldr	r0, [pc, #20]	; (df8 <turnLedOn+0x68>)
     de2:	f00a f98e 	bl	b102 <printk>
     de6:	e7e7      	b.n	db8 <turnLedOn+0x28>
     de8:	0000c828 	.word	0x0000c828
     dec:	0000cb30 	.word	0x0000cb30
     df0:	0000c8bc 	.word	0x0000c8bc
     df4:	0000cb70 	.word	0x0000cb70
     df8:	0000ccf0 	.word	0x0000ccf0

00000dfc <turnLedOff>:

void turnLedOff(int *ledState, const struct gpio_dt_spec *led)
{
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    if (*ledState == 1)
     dfe:	6803      	ldr	r3, [r0, #0]
     e00:	2b01      	cmp	r3, #1
     e02:	d000      	beq.n	e06 <turnLedOff+0xa>
        ret = gpio_pin_toggle_dt(led);
        if (ret < 0)
            printk("TOGGLING LED FAILED");
        *ledState = 0;
    }
}
     e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e06:	4604      	mov	r4, r0
	return gpio_pin_toggle(spec->port, spec->pin);
     e08:	680e      	ldr	r6, [r1, #0]
     e0a:	790a      	ldrb	r2, [r1, #4]
	const struct gpio_driver_config *const cfg =
     e0c:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	2501      	movs	r5, #1
     e12:	4095      	lsls	r5, r2
     e14:	422b      	tst	r3, r5
     e16:	d009      	beq.n	e2c <turnLedOff+0x30>
	const struct gpio_driver_api *api =
     e18:	68b3      	ldr	r3, [r6, #8]
	return api->port_toggle_bits(port, pins);
     e1a:	695b      	ldr	r3, [r3, #20]
     e1c:	4629      	mov	r1, r5
     e1e:	4630      	mov	r0, r6
     e20:	4798      	blx	r3
        if (ret < 0)
     e22:	2800      	cmp	r0, #0
     e24:	db13      	blt.n	e4e <turnLedOff+0x52>
        *ledState = 0;
     e26:	2300      	movs	r3, #0
     e28:	6023      	str	r3, [r4, #0]
}
     e2a:	e7eb      	b.n	e04 <turnLedOff+0x8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e2c:	4f0a      	ldr	r7, [pc, #40]	; (e58 <turnLedOff+0x5c>)
     e2e:	f240 43bc 	movw	r3, #1212	; 0x4bc
     e32:	463a      	mov	r2, r7
     e34:	4909      	ldr	r1, [pc, #36]	; (e5c <turnLedOff+0x60>)
     e36:	480a      	ldr	r0, [pc, #40]	; (e60 <turnLedOff+0x64>)
     e38:	f00a fae8 	bl	b40c <assert_print>
     e3c:	4809      	ldr	r0, [pc, #36]	; (e64 <turnLedOff+0x68>)
     e3e:	f00a fae5 	bl	b40c <assert_print>
     e42:	f240 41bc 	movw	r1, #1212	; 0x4bc
     e46:	4638      	mov	r0, r7
     e48:	f00a fad9 	bl	b3fe <assert_post_action>
     e4c:	e7e4      	b.n	e18 <turnLedOff+0x1c>
            printk("TOGGLING LED FAILED");
     e4e:	4806      	ldr	r0, [pc, #24]	; (e68 <turnLedOff+0x6c>)
     e50:	f00a f957 	bl	b102 <printk>
     e54:	e7e7      	b.n	e26 <turnLedOff+0x2a>
     e56:	bf00      	nop
     e58:	0000c828 	.word	0x0000c828
     e5c:	0000cb30 	.word	0x0000cb30
     e60:	0000c8bc 	.word	0x0000c8bc
     e64:	0000cb70 	.word	0x0000cb70
     e68:	0000ccf0 	.word	0x0000ccf0

00000e6c <thread_output_code>:
{
     e6c:	b530      	push	{r4, r5, lr}
     e6e:	b087      	sub	sp, #28
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     e70:	487d      	ldr	r0, [pc, #500]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
     e72:	f00a f946 	bl	b102 <printk>
    int led_states[4] = {1, 1, 1, 1};
     e76:	4b7d      	ldr	r3, [pc, #500]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
     e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     e7a:	ac06      	add	r4, sp, #24
     e7c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
	const struct gpio_driver_config *const cfg =
     e80:	4b7b      	ldr	r3, [pc, #492]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     e82:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e84:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e86:	6813      	ldr	r3, [r2, #0]
     e88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e8c:	d015      	beq.n	eba <thread_output_code+0x4e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e94:	d122      	bne.n	edc <thread_output_code+0x70>
     e96:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
     e98:	4b75      	ldr	r3, [pc, #468]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     e9a:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     ea2:	d01d      	beq.n	ee0 <thread_output_code+0x74>
	if (value != 0)	{
     ea4:	b36c      	cbz	r4, f02 <thread_output_code+0x96>
	const struct gpio_driver_api *api =
     ea6:	4872      	ldr	r0, [pc, #456]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     ea8:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     eaa:	68db      	ldr	r3, [r3, #12]
     eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     eb0:	4798      	blx	r3
    if (ret < 0)
     eb2:	2800      	cmp	r0, #0
     eb4:	db2c      	blt.n	f10 <thread_output_code+0xa4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     eb6:	2400      	movs	r4, #0
     eb8:	e03e      	b.n	f38 <thread_output_code+0xcc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eba:	4d6e      	ldr	r5, [pc, #440]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
     ebc:	f240 4392 	movw	r3, #1170	; 0x492
     ec0:	462a      	mov	r2, r5
     ec2:	496d      	ldr	r1, [pc, #436]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
     ec4:	486d      	ldr	r0, [pc, #436]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
     ec6:	f00a faa1 	bl	b40c <assert_print>
     eca:	486d      	ldr	r0, [pc, #436]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     ecc:	f00a fa9e 	bl	b40c <assert_print>
     ed0:	f240 4192 	movw	r1, #1170	; 0x492
     ed4:	4628      	mov	r0, r5
     ed6:	f00a fa92 	bl	b3fe <assert_post_action>
     eda:	e7d8      	b.n	e8e <thread_output_code+0x22>
		value = (value != 0) ? 0 : 1;
     edc:	2401      	movs	r4, #1
     ede:	e7db      	b.n	e98 <thread_output_code+0x2c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ee0:	4d64      	ldr	r5, [pc, #400]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
     ee2:	f44f 638d 	mov.w	r3, #1128	; 0x468
     ee6:	462a      	mov	r2, r5
     ee8:	4963      	ldr	r1, [pc, #396]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
     eea:	4864      	ldr	r0, [pc, #400]	; (107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>)
     eec:	f00a fa8e 	bl	b40c <assert_print>
     ef0:	4863      	ldr	r0, [pc, #396]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     ef2:	f00a fa8b 	bl	b40c <assert_print>
     ef6:	f44f 618d 	mov.w	r1, #1128	; 0x468
     efa:	4628      	mov	r0, r5
     efc:	f00a fa7f 	bl	b3fe <assert_post_action>
     f00:	e7d0      	b.n	ea4 <thread_output_code+0x38>
	const struct gpio_driver_api *api =
     f02:	485b      	ldr	r0, [pc, #364]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     f04:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     f06:	691b      	ldr	r3, [r3, #16]
     f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     f0c:	4798      	blx	r3
     f0e:	e7d0      	b.n	eb2 <thread_output_code+0x46>
        printk("TOGGLING LED FAILED");
     f10:	485c      	ldr	r0, [pc, #368]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
     f12:	f00a f8f6 	bl	b102 <printk>
     f16:	e7ce      	b.n	eb6 <thread_output_code+0x4a>
            turnLedOn(&led_states[0], &led0);
     f18:	495b      	ldr	r1, [pc, #364]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
     f1a:	a802      	add	r0, sp, #8
     f1c:	f7ff ff38 	bl	d90 <turnLedOn>
            turnLedOn(&led_states[1], &led1);
     f20:	495a      	ldr	r1, [pc, #360]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
     f22:	a803      	add	r0, sp, #12
     f24:	f7ff ff34 	bl	d90 <turnLedOn>
            turnLedOn(&led_states[2], &led2);
     f28:	4959      	ldr	r1, [pc, #356]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
     f2a:	a804      	add	r0, sp, #16
     f2c:	f7ff ff30 	bl	d90 <turnLedOn>
            turnLedOn(&led_states[3], &led3);
     f30:	4958      	ldr	r1, [pc, #352]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
     f32:	a805      	add	r0, sp, #20
     f34:	f7ff ff2c 	bl	d90 <turnLedOn>
	return z_impl_k_sem_take(sem, timeout);
     f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f40:	4855      	ldr	r0, [pc, #340]	; (1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
     f42:	f007 fe2f 	bl	8ba4 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     f46:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     f48:	f00b f9dc 	bl	c304 <z_impl_k_uptime_ticks>
     f4c:	4602      	mov	r2, r0
     f4e:	014b      	lsls	r3, r1, #5
     f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     f54:	0140      	lsls	r0, r0, #5
     f56:	1a80      	subs	r0, r0, r2
     f58:	eb63 0301 	sbc.w	r3, r3, r1
     f5c:	009b      	lsls	r3, r3, #2
     f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     f62:	0080      	lsls	r0, r0, #2
     f64:	1880      	adds	r0, r0, r2
     f66:	eb43 0301 	adc.w	r3, r3, r1
     f6a:	00db      	lsls	r3, r3, #3
     f6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     f70:	f3c0 3010 	ubfx	r0, r0, #12, #17
     f74:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     f78:	0bdb      	lsrs	r3, r3, #15
     f7a:	4621      	mov	r1, r4
     f7c:	4847      	ldr	r0, [pc, #284]	; (109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>)
     f7e:	f00a f8c0 	bl	b102 <printk>
        printk("Task C read bc value: %d\n", bc);
     f82:	4b47      	ldr	r3, [pc, #284]	; (10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>)
     f84:	8819      	ldrh	r1, [r3, #0]
     f86:	4847      	ldr	r0, [pc, #284]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     f88:	f00a f8bb 	bl	b102 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     f8c:	4838      	ldr	r0, [pc, #224]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     f8e:	f00b f8cd 	bl	c12c <z_device_is_ready>
        if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
     f92:	2800      	cmp	r0, #0
     f94:	d065      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     f96:	4836      	ldr	r0, [pc, #216]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     f98:	f00b f8c8 	bl	c12c <z_device_is_ready>
     f9c:	2800      	cmp	r0, #0
     f9e:	d060      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     fa0:	4833      	ldr	r0, [pc, #204]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fa2:	f00b f8c3 	bl	c12c <z_device_is_ready>
     fa6:	2800      	cmp	r0, #0
     fa8:	d05b      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     faa:	4831      	ldr	r0, [pc, #196]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fac:	f00b f8be 	bl	c12c <z_device_is_ready>
     fb0:	2800      	cmp	r0, #0
     fb2:	d056      	beq.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     fb4:	4a3c      	ldr	r2, [pc, #240]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fb6:	210d      	movs	r1, #13
     fb8:	482d      	ldr	r0, [pc, #180]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fba:	f7ff fce7 	bl	98c <z_impl_gpio_pin_configure>
        if (ret < 0)
     fbe:	2800      	cmp	r0, #0
     fc0:	db4f      	blt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     fc2:	4a39      	ldr	r2, [pc, #228]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fc4:	210e      	movs	r1, #14
     fc6:	482a      	ldr	r0, [pc, #168]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fc8:	f7ff fce0 	bl	98c <z_impl_gpio_pin_configure>
        if (ret < 0)
     fcc:	2800      	cmp	r0, #0
     fce:	db48      	blt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     fd0:	4a35      	ldr	r2, [pc, #212]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fd2:	210f      	movs	r1, #15
     fd4:	4826      	ldr	r0, [pc, #152]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fd6:	f7ff fcd9 	bl	98c <z_impl_gpio_pin_configure>
        if (ret < 0)
     fda:	2800      	cmp	r0, #0
     fdc:	db41      	blt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
     fde:	4a32      	ldr	r2, [pc, #200]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fe0:	2110      	movs	r1, #16
     fe2:	4823      	ldr	r0, [pc, #140]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     fe4:	f7ff fcd2 	bl	98c <z_impl_gpio_pin_configure>
        if (ret < 0)
     fe8:	2800      	cmp	r0, #0
     fea:	db3a      	blt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
        printk("\t%d\n",bc);
     fec:	4d2c      	ldr	r5, [pc, #176]	; (10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>)
     fee:	8829      	ldrh	r1, [r5, #0]
     ff0:	482e      	ldr	r0, [pc, #184]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
     ff2:	f00a f886 	bl	b102 <printk>
        if (bc < 1000)
     ff6:	882b      	ldrh	r3, [r5, #0]
     ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     ffc:	d38c      	bcc.n	f18 <thread_output_code+0xac>
        else if (bc < 2000)
     ffe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1002:	d314      	bcc.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
        else if (bc < 3000)
    1004:	f640 32b7 	movw	r2, #2999	; 0xbb7
    1008:	4293      	cmp	r3, r2
    100a:	d819      	bhi.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
            turnLedOn(&led_states[0], &led0);
    100c:	491e      	ldr	r1, [pc, #120]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    100e:	a802      	add	r0, sp, #8
    1010:	f7ff febe 	bl	d90 <turnLedOn>
            turnLedOn(&led_states[1], &led1);
    1014:	491d      	ldr	r1, [pc, #116]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    1016:	a803      	add	r0, sp, #12
    1018:	f7ff feba 	bl	d90 <turnLedOn>
            turnLedOff(&led_states[2], &led2);
    101c:	491c      	ldr	r1, [pc, #112]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    101e:	a804      	add	r0, sp, #16
    1020:	f7ff feec 	bl	dfc <turnLedOff>
            turnLedOff(&led_states[3], &led3);
    1024:	491b      	ldr	r1, [pc, #108]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    1026:	a805      	add	r0, sp, #20
    1028:	f7ff fee8 	bl	dfc <turnLedOff>
    102c:	e784      	b.n	f38 <thread_output_code+0xcc>
            printk("states=%d, %d, %d, %d\n",led_states[0],led_states[1],led_states[2],led_states[3]);
    102e:	9b05      	ldr	r3, [sp, #20]
    1030:	9300      	str	r3, [sp, #0]
    1032:	9b04      	ldr	r3, [sp, #16]
    1034:	9a03      	ldr	r2, [sp, #12]
    1036:	9902      	ldr	r1, [sp, #8]
    1038:	481d      	ldr	r0, [pc, #116]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    103a:	f00a f862 	bl	b102 <printk>
    103e:	e77b      	b.n	f38 <thread_output_code+0xcc>
            turnLedOn(&led_states[0], &led0);
    1040:	4911      	ldr	r1, [pc, #68]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1042:	a802      	add	r0, sp, #8
    1044:	f7ff fea4 	bl	d90 <turnLedOn>
            turnLedOff(&led_states[1], &led1);
    1048:	4910      	ldr	r1, [pc, #64]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    104a:	a803      	add	r0, sp, #12
    104c:	f7ff fed6 	bl	dfc <turnLedOff>
            turnLedOff(&led_states[2], &led2);
    1050:	490f      	ldr	r1, [pc, #60]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1052:	a804      	add	r0, sp, #16
    1054:	f7ff fed2 	bl	dfc <turnLedOff>
            turnLedOff(&led_states[3], &led3);
    1058:	490e      	ldr	r1, [pc, #56]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    105a:	a805      	add	r0, sp, #20
    105c:	f7ff fece 	bl	dfc <turnLedOff>
    {
    1060:	e76a      	b.n	f38 <thread_output_code+0xcc>
}
    1062:	b007      	add	sp, #28
    1064:	bd30      	pop	{r4, r5, pc}
    1066:	bf00      	nop
    1068:	0000cd04 	.word	0x0000cd04
    106c:	0000c6d0 	.word	0x0000c6d0
    1070:	0000c414 	.word	0x0000c414
    1074:	0000c828 	.word	0x0000c828
    1078:	0000cb30 	.word	0x0000cb30
    107c:	0000c8bc 	.word	0x0000c8bc
    1080:	0000cb70 	.word	0x0000cb70
    1084:	0000ccf0 	.word	0x0000ccf0
    1088:	0000cdb4 	.word	0x0000cdb4
    108c:	0000cdbc 	.word	0x0000cdbc
    1090:	0000cdc4 	.word	0x0000cdc4
    1094:	0000cdcc 	.word	0x0000cdcc
    1098:	20000610 	.word	0x20000610
    109c:	0000cd40 	.word	0x0000cd40
    10a0:	200001de 	.word	0x200001de
    10a4:	0000cd78 	.word	0x0000cd78
    10a8:	001a0001 	.word	0x001a0001
    10ac:	0000cd94 	.word	0x0000cd94
    10b0:	0000cd9c 	.word	0x0000cd9c

000010b4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    10b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b8:	b08d      	sub	sp, #52	; 0x34
    10ba:	9205      	str	r2, [sp, #20]
    10bc:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    10be:	4613      	mov	r3, r2
    10c0:	f002 0204 	and.w	r2, r2, #4
    10c4:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    10c6:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    10ca:	f010 0303 	ands.w	r3, r0, #3
    10ce:	9302      	str	r3, [sp, #8]
    10d0:	f040 8293 	bne.w	15fa <cbvprintf_package+0x546>
    10d4:	4607      	mov	r7, r0
    10d6:	468a      	mov	sl, r1
    10d8:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    10da:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    10dc:	2800      	cmp	r0, #0
    10de:	d041      	beq.n	1164 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    10e0:	b127      	cbz	r7, 10ec <cbvprintf_package+0x38>
    10e2:	1be3      	subs	r3, r4, r7
    10e4:	3304      	adds	r3, #4
    10e6:	4553      	cmp	r3, sl
    10e8:	f200 828a 	bhi.w	1600 <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    10ec:	9b03      	ldr	r3, [sp, #12]
    10ee:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    10f0:	f8dd b008 	ldr.w	fp, [sp, #8]
    10f4:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    10f8:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    10fc:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    10fe:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1102:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1104:	b10f      	cbz	r7, 110a <cbvprintf_package+0x56>
				*(const char **)buf = s;
    1106:	9b03      	ldr	r3, [sp, #12]
    1108:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    110a:	1e53      	subs	r3, r2, #1
    110c:	9307      	str	r3, [sp, #28]
    110e:	2a00      	cmp	r2, #0
    1110:	f340 80b7 	ble.w	1282 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1114:	9b05      	ldr	r3, [sp, #20]
    1116:	f013 0202 	ands.w	r2, r3, #2
    111a:	d021      	beq.n	1160 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    111c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    111e:	1be1      	subs	r1, r4, r7
    1120:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1122:	b11a      	cbz	r2, 112c <cbvprintf_package+0x78>
    1124:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1128:	f080 80bf 	bcs.w	12aa <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    112c:	f1bb 0f0f 	cmp.w	fp, #15
    1130:	f200 80ce 	bhi.w	12d0 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1134:	2f00      	cmp	r7, #0
    1136:	f000 80e2 	beq.w	12fe <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    113a:	b2db      	uxtb	r3, r3
    113c:	aa0c      	add	r2, sp, #48	; 0x30
    113e:	445a      	add	r2, fp
    1140:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1144:	2800      	cmp	r0, #0
    1146:	f000 80d6 	beq.w	12f6 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    114a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    114e:	aa0c      	add	r2, sp, #48	; 0x30
    1150:	445a      	add	r2, fp
    1152:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    1156:	9b04      	ldr	r3, [sp, #16]
    1158:	3301      	adds	r3, #1
    115a:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    115c:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    1160:	3404      	adds	r4, #4
    1162:	e0f6      	b.n	1352 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1164:	f001 0a07 	and.w	sl, r1, #7
    1168:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    116a:	f1ca 0a08 	rsb	sl, sl, #8
    116e:	e7b7      	b.n	10e0 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    1170:	2b25      	cmp	r3, #37	; 0x25
    1172:	f040 80ed 	bne.w	1350 <cbvprintf_package+0x29c>
				parsing = true;
    1176:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    1178:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    117c:	46c1      	mov	r9, r8
			continue;
    117e:	e0e7      	b.n	1350 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    1180:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    1184:	46c1      	mov	r9, r8
			continue;
    1186:	e0e3      	b.n	1350 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    1188:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    118c:	46c1      	mov	r9, r8
			continue;
    118e:	e0df      	b.n	1350 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    1190:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    1194:	46c1      	mov	r9, r8
			continue;
    1196:	e0db      	b.n	1350 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    1198:	782a      	ldrb	r2, [r5, #0]
    119a:	2a6c      	cmp	r2, #108	; 0x6c
    119c:	d026      	beq.n	11ec <cbvprintf_package+0x138>
			parsing = false;
    119e:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    11a0:	eb04 0208 	add.w	r2, r4, r8
    11a4:	3a01      	subs	r2, #1
    11a6:	f1c8 0100 	rsb	r1, r8, #0
    11aa:	400a      	ands	r2, r1
    11ac:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    11ae:	b127      	cbz	r7, 11ba <cbvprintf_package+0x106>
    11b0:	1bd1      	subs	r1, r2, r7
    11b2:	4449      	add	r1, r9
    11b4:	4551      	cmp	r1, sl
    11b6:	f200 8226 	bhi.w	1606 <cbvprintf_package+0x552>
		if (*fmt == 's') {
    11ba:	2b73      	cmp	r3, #115	; 0x73
    11bc:	d059      	beq.n	1272 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    11be:	f1b9 0f04 	cmp.w	r9, #4
    11c2:	f000 80a8 	beq.w	1316 <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    11c6:	f1b9 0f08 	cmp.w	r9, #8
    11ca:	f040 80ac 	bne.w	1326 <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    11ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    11d0:	3307      	adds	r3, #7
    11d2:	f023 0307 	bic.w	r3, r3, #7
    11d6:	f103 0108 	add.w	r1, r3, #8
    11da:	9116      	str	r1, [sp, #88]	; 0x58
    11dc:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    11e0:	b10f      	cbz	r7, 11e6 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    11e2:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    11e6:	f102 0408 	add.w	r4, r2, #8
    11ea:	e0b1      	b.n	1350 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    11ec:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    11f0:	2a6c      	cmp	r2, #108	; 0x6c
    11f2:	d004      	beq.n	11fe <cbvprintf_package+0x14a>
			parsing = false;
    11f4:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    11f6:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    11fa:	46c1      	mov	r9, r8
    11fc:	e7d0      	b.n	11a0 <cbvprintf_package+0xec>
			parsing = false;
    11fe:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    1200:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    1204:	46c1      	mov	r9, r8
    1206:	e7cb      	b.n	11a0 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    1208:	782b      	ldrb	r3, [r5, #0]
    120a:	2b4c      	cmp	r3, #76	; 0x4c
    120c:	d01c      	beq.n	1248 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    120e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1210:	3307      	adds	r3, #7
    1212:	f023 0307 	bic.w	r3, r3, #7
    1216:	f103 0208 	add.w	r2, r3, #8
    121a:	9216      	str	r2, [sp, #88]	; 0x58
    121c:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    1220:	1de2      	adds	r2, r4, #7
    1222:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    1226:	b147      	cbz	r7, 123a <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    1228:	1bd3      	subs	r3, r2, r7
    122a:	3308      	adds	r3, #8
    122c:	4553      	cmp	r3, sl
    122e:	d815      	bhi.n	125c <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    1230:	782b      	ldrb	r3, [r5, #0]
    1232:	2b4c      	cmp	r3, #76	; 0x4c
    1234:	d015      	beq.n	1262 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    1236:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    123a:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    123e:	2600      	movs	r6, #0
			continue;
    1240:	f04f 0808 	mov.w	r8, #8
    1244:	46c1      	mov	r9, r8
    1246:	e083      	b.n	1350 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    1248:	9b16      	ldr	r3, [sp, #88]	; 0x58
    124a:	3307      	adds	r3, #7
    124c:	f023 0307 	bic.w	r3, r3, #7
    1250:	f103 0208 	add.w	r2, r3, #8
    1254:	9216      	str	r2, [sp, #88]	; 0x58
    1256:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    125a:	e7e1      	b.n	1220 <cbvprintf_package+0x16c>
					return -ENOSPC;
    125c:	f06f 001b 	mvn.w	r0, #27
    1260:	e1c8      	b.n	15f4 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    1262:	e9c2 0100 	strd	r0, r1, [r2]
    1266:	e7e8      	b.n	123a <cbvprintf_package+0x186>
			parsing = false;
    1268:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    126a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    126e:	46c1      	mov	r9, r8
    1270:	e796      	b.n	11a0 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    1272:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1274:	1d1a      	adds	r2, r3, #4
    1276:	9216      	str	r2, [sp, #88]	; 0x58
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    127c:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    127e:	4665      	mov	r5, ip
    1280:	e740      	b.n	1104 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1282:	4bbb      	ldr	r3, [pc, #748]	; (1570 <cbvprintf_package+0x4bc>)
    1284:	9a03      	ldr	r2, [sp, #12]
    1286:	429a      	cmp	r2, r3
    1288:	d304      	bcc.n	1294 <cbvprintf_package+0x1e0>
    128a:	4bba      	ldr	r3, [pc, #744]	; (1574 <cbvprintf_package+0x4c0>)
    128c:	429a      	cmp	r2, r3
    128e:	d30a      	bcc.n	12a6 <cbvprintf_package+0x1f2>
    1290:	2300      	movs	r3, #0
    1292:	e000      	b.n	1296 <cbvprintf_package+0x1e2>
    1294:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1296:	2b00      	cmp	r3, #0
    1298:	f47f af3c 	bne.w	1114 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    129c:	9b05      	ldr	r3, [sp, #20]
    129e:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12a2:	2000      	movs	r0, #0
    12a4:	e73b      	b.n	111e <cbvprintf_package+0x6a>
    12a6:	2301      	movs	r3, #1
    12a8:	e7f5      	b.n	1296 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    12aa:	4cb3      	ldr	r4, [pc, #716]	; (1578 <cbvprintf_package+0x4c4>)
    12ac:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    12b0:	4622      	mov	r2, r4
    12b2:	49b2      	ldr	r1, [pc, #712]	; (157c <cbvprintf_package+0x4c8>)
    12b4:	48b2      	ldr	r0, [pc, #712]	; (1580 <cbvprintf_package+0x4cc>)
    12b6:	f00a f8a9 	bl	b40c <assert_print>
    12ba:	48b2      	ldr	r0, [pc, #712]	; (1584 <cbvprintf_package+0x4d0>)
    12bc:	f00a f8a6 	bl	b40c <assert_print>
    12c0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    12c4:	4620      	mov	r0, r4
    12c6:	f00a f89a 	bl	b3fe <assert_post_action>
					return -EINVAL;
    12ca:	f06f 0015 	mvn.w	r0, #21
    12ce:	e191      	b.n	15f4 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    12d0:	4ca9      	ldr	r4, [pc, #676]	; (1578 <cbvprintf_package+0x4c4>)
    12d2:	f240 13f5 	movw	r3, #501	; 0x1f5
    12d6:	4622      	mov	r2, r4
    12d8:	49a8      	ldr	r1, [pc, #672]	; (157c <cbvprintf_package+0x4c8>)
    12da:	48a9      	ldr	r0, [pc, #676]	; (1580 <cbvprintf_package+0x4cc>)
    12dc:	f00a f896 	bl	b40c <assert_print>
    12e0:	48a9      	ldr	r0, [pc, #676]	; (1588 <cbvprintf_package+0x4d4>)
    12e2:	f00a f893 	bl	b40c <assert_print>
    12e6:	f240 11f5 	movw	r1, #501	; 0x1f5
    12ea:	4620      	mov	r0, r4
    12ec:	f00a f887 	bl	b3fe <assert_post_action>
					return -EINVAL;
    12f0:	f06f 0015 	mvn.w	r0, #21
    12f4:	e17e      	b.n	15f4 <cbvprintf_package+0x540>
						s_rw_cnt++;
    12f6:	9b06      	ldr	r3, [sp, #24]
    12f8:	3301      	adds	r3, #1
    12fa:	9306      	str	r3, [sp, #24]
    12fc:	e72e      	b.n	115c <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    12fe:	b908      	cbnz	r0, 1304 <cbvprintf_package+0x250>
    1300:	9b01      	ldr	r3, [sp, #4]
    1302:	b113      	cbz	r3, 130a <cbvprintf_package+0x256>
					len += 1;
    1304:	f10a 0a01 	add.w	sl, sl, #1
    1308:	e728      	b.n	115c <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    130a:	9803      	ldr	r0, [sp, #12]
    130c:	f00a f9f8 	bl	b700 <strlen>
    1310:	1c83      	adds	r3, r0, #2
    1312:	449a      	add	sl, r3
    1314:	e722      	b.n	115c <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    1316:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1318:	1d19      	adds	r1, r3, #4
    131a:	9116      	str	r1, [sp, #88]	; 0x58
    131c:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    131e:	b107      	cbz	r7, 1322 <cbvprintf_package+0x26e>
				*(int *)buf = v;
    1320:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    1322:	1d14      	adds	r4, r2, #4
    1324:	e014      	b.n	1350 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    1326:	4c94      	ldr	r4, [pc, #592]	; (1578 <cbvprintf_package+0x4c4>)
    1328:	f240 2331 	movw	r3, #561	; 0x231
    132c:	4622      	mov	r2, r4
    132e:	4993      	ldr	r1, [pc, #588]	; (157c <cbvprintf_package+0x4c8>)
    1330:	4893      	ldr	r0, [pc, #588]	; (1580 <cbvprintf_package+0x4cc>)
    1332:	f00a f86b 	bl	b40c <assert_print>
    1336:	4649      	mov	r1, r9
    1338:	4894      	ldr	r0, [pc, #592]	; (158c <cbvprintf_package+0x4d8>)
    133a:	f00a f867 	bl	b40c <assert_print>
    133e:	f240 2131 	movw	r1, #561	; 0x231
    1342:	4620      	mov	r0, r4
    1344:	f00a f85b 	bl	b3fe <assert_post_action>
			return -EINVAL;
    1348:	f06f 0015 	mvn.w	r0, #21
    134c:	e152      	b.n	15f4 <cbvprintf_package+0x540>
		switch (*fmt) {
    134e:	2600      	movs	r6, #0
    1350:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    1352:	f105 0c01 	add.w	ip, r5, #1
    1356:	786b      	ldrb	r3, [r5, #1]
    1358:	2b00      	cmp	r3, #0
    135a:	f000 80c1 	beq.w	14e0 <cbvprintf_package+0x42c>
		if (!parsing) {
    135e:	2e00      	cmp	r6, #0
    1360:	f43f af06 	beq.w	1170 <cbvprintf_package+0xbc>
		switch (*fmt) {
    1364:	f1a3 0120 	sub.w	r1, r3, #32
    1368:	295a      	cmp	r1, #90	; 0x5a
    136a:	d8f0      	bhi.n	134e <cbvprintf_package+0x29a>
    136c:	a201      	add	r2, pc, #4	; (adr r2, 1374 <cbvprintf_package+0x2c0>)
    136e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    1372:	bf00      	nop
    1374:	00001351 	.word	0x00001351
    1378:	0000134f 	.word	0x0000134f
    137c:	0000134f 	.word	0x0000134f
    1380:	00001351 	.word	0x00001351
    1384:	0000134f 	.word	0x0000134f
    1388:	0000134f 	.word	0x0000134f
    138c:	0000134f 	.word	0x0000134f
    1390:	0000134f 	.word	0x0000134f
    1394:	0000134f 	.word	0x0000134f
    1398:	0000134f 	.word	0x0000134f
    139c:	000011a1 	.word	0x000011a1
    13a0:	00001351 	.word	0x00001351
    13a4:	0000134f 	.word	0x0000134f
    13a8:	00001351 	.word	0x00001351
    13ac:	00001351 	.word	0x00001351
    13b0:	0000134f 	.word	0x0000134f
    13b4:	00001351 	.word	0x00001351
    13b8:	00001351 	.word	0x00001351
    13bc:	00001351 	.word	0x00001351
    13c0:	00001351 	.word	0x00001351
    13c4:	00001351 	.word	0x00001351
    13c8:	00001351 	.word	0x00001351
    13cc:	00001351 	.word	0x00001351
    13d0:	00001351 	.word	0x00001351
    13d4:	00001351 	.word	0x00001351
    13d8:	00001351 	.word	0x00001351
    13dc:	0000134f 	.word	0x0000134f
    13e0:	0000134f 	.word	0x0000134f
    13e4:	0000134f 	.word	0x0000134f
    13e8:	0000134f 	.word	0x0000134f
    13ec:	0000134f 	.word	0x0000134f
    13f0:	0000134f 	.word	0x0000134f
    13f4:	0000134f 	.word	0x0000134f
    13f8:	00001209 	.word	0x00001209
    13fc:	0000134f 	.word	0x0000134f
    1400:	0000134f 	.word	0x0000134f
    1404:	0000134f 	.word	0x0000134f
    1408:	00001209 	.word	0x00001209
    140c:	00001209 	.word	0x00001209
    1410:	00001209 	.word	0x00001209
    1414:	0000134f 	.word	0x0000134f
    1418:	0000134f 	.word	0x0000134f
    141c:	0000134f 	.word	0x0000134f
    1420:	0000134f 	.word	0x0000134f
    1424:	00001351 	.word	0x00001351
    1428:	0000134f 	.word	0x0000134f
    142c:	0000134f 	.word	0x0000134f
    1430:	0000134f 	.word	0x0000134f
    1434:	0000134f 	.word	0x0000134f
    1438:	0000134f 	.word	0x0000134f
    143c:	0000134f 	.word	0x0000134f
    1440:	0000134f 	.word	0x0000134f
    1444:	0000134f 	.word	0x0000134f
    1448:	0000134f 	.word	0x0000134f
    144c:	0000134f 	.word	0x0000134f
    1450:	0000134f 	.word	0x0000134f
    1454:	00001199 	.word	0x00001199
    1458:	0000134f 	.word	0x0000134f
    145c:	0000134f 	.word	0x0000134f
    1460:	0000134f 	.word	0x0000134f
    1464:	0000134f 	.word	0x0000134f
    1468:	0000134f 	.word	0x0000134f
    146c:	0000134f 	.word	0x0000134f
    1470:	0000134f 	.word	0x0000134f
    1474:	0000134f 	.word	0x0000134f
    1478:	00001209 	.word	0x00001209
    147c:	0000134f 	.word	0x0000134f
    1480:	00001199 	.word	0x00001199
    1484:	00001199 	.word	0x00001199
    1488:	00001209 	.word	0x00001209
    148c:	00001209 	.word	0x00001209
    1490:	00001209 	.word	0x00001209
    1494:	00001351 	.word	0x00001351
    1498:	00001199 	.word	0x00001199
    149c:	00001181 	.word	0x00001181
    14a0:	0000134f 	.word	0x0000134f
    14a4:	00001351 	.word	0x00001351
    14a8:	0000134f 	.word	0x0000134f
    14ac:	00001269 	.word	0x00001269
    14b0:	00001199 	.word	0x00001199
    14b4:	00001269 	.word	0x00001269
    14b8:	0000134f 	.word	0x0000134f
    14bc:	0000134f 	.word	0x0000134f
    14c0:	00001269 	.word	0x00001269
    14c4:	00001191 	.word	0x00001191
    14c8:	00001199 	.word	0x00001199
    14cc:	0000134f 	.word	0x0000134f
    14d0:	0000134f 	.word	0x0000134f
    14d4:	00001199 	.word	0x00001199
    14d8:	0000134f 	.word	0x0000134f
    14dc:	00001189 	.word	0x00001189
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    14e0:	1be3      	subs	r3, r4, r7
    14e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    14e6:	d211      	bcs.n	150c <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    14e8:	b31f      	cbz	r7, 1532 <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    14ea:	2200      	movs	r2, #0
    14ec:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    14ee:	089b      	lsrs	r3, r3, #2
    14f0:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    14f2:	9b01      	ldr	r3, [sp, #4]
    14f4:	b30b      	cbz	r3, 153a <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    14f6:	9b06      	ldr	r3, [sp, #24]
    14f8:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    14fa:	9b04      	ldr	r3, [sp, #16]
    14fc:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    14fe:	bbab      	cbnz	r3, 156c <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    1500:	9d02      	ldr	r5, [sp, #8]
    1502:	f8dd 9010 	ldr.w	r9, [sp, #16]
    1506:	f8dd 800c 	ldr.w	r8, [sp, #12]
    150a:	e058      	b.n	15be <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    150c:	4c1a      	ldr	r4, [pc, #104]	; (1578 <cbvprintf_package+0x4c4>)
    150e:	f240 233d 	movw	r3, #573	; 0x23d
    1512:	4622      	mov	r2, r4
    1514:	4919      	ldr	r1, [pc, #100]	; (157c <cbvprintf_package+0x4c8>)
    1516:	481a      	ldr	r0, [pc, #104]	; (1580 <cbvprintf_package+0x4cc>)
    1518:	f009 ff78 	bl	b40c <assert_print>
    151c:	481c      	ldr	r0, [pc, #112]	; (1590 <cbvprintf_package+0x4dc>)
    151e:	f009 ff75 	bl	b40c <assert_print>
    1522:	f240 213d 	movw	r1, #573	; 0x23d
    1526:	4620      	mov	r0, r4
    1528:	f009 ff69 	bl	b3fe <assert_post_action>
		return -EINVAL;
    152c:	f06f 0015 	mvn.w	r0, #21
    1530:	e060      	b.n	15f4 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1532:	4453      	add	r3, sl
    1534:	f1a3 0008 	sub.w	r0, r3, #8
    1538:	e05c      	b.n	15f4 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    153a:	9b06      	ldr	r3, [sp, #24]
    153c:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    153e:	e7dc      	b.n	14fa <cbvprintf_package+0x446>
			*buf++ = pos;
    1540:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1544:	3301      	adds	r3, #1
    1546:	459b      	cmp	fp, r3
    1548:	d9da      	bls.n	1500 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    154a:	aa0c      	add	r2, sp, #48	; 0x30
    154c:	441a      	add	r2, r3
    154e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    1552:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    1556:	2a00      	cmp	r2, #0
    1558:	daf4      	bge.n	1544 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    155a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    155e:	1be2      	subs	r2, r4, r7
    1560:	3201      	adds	r2, #1
    1562:	4552      	cmp	r2, sl
    1564:	d9ec      	bls.n	1540 <cbvprintf_package+0x48c>
				return -ENOSPC;
    1566:	f06f 001b 	mvn.w	r0, #27
    156a:	e043      	b.n	15f4 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    156c:	9b02      	ldr	r3, [sp, #8]
    156e:	e7ea      	b.n	1546 <cbvprintf_package+0x492>
    1570:	0000c36c 	.word	0x0000c36c
    1574:	0000eae8 	.word	0x0000eae8
    1578:	0000cddc 	.word	0x0000cddc
    157c:	0000ca80 	.word	0x0000ca80
    1580:	0000c8bc 	.word	0x0000c8bc
    1584:	0000ce24 	.word	0x0000ce24
    1588:	0000ce48 	.word	0x0000ce48
    158c:	0000ce64 	.word	0x0000ce64
    1590:	0000ce7c 	.word	0x0000ce7c
		if (rws_pos_en) {
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	b1f3      	cbz	r3, 15d6 <cbvprintf_package+0x522>
			size = 0;
    1598:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    159a:	1be3      	subs	r3, r4, r7
    159c:	4433      	add	r3, r6
    159e:	3301      	adds	r3, #1
    15a0:	4553      	cmp	r3, sl
    15a2:	d833      	bhi.n	160c <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    15a4:	ab0c      	add	r3, sp, #48	; 0x30
    15a6:	442b      	add	r3, r5
    15a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    15ac:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    15b0:	4632      	mov	r2, r6
    15b2:	4641      	mov	r1, r8
    15b4:	4620      	mov	r0, r4
    15b6:	f00a f8c1 	bl	b73c <memcpy>
		buf += size;
    15ba:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    15bc:	3501      	adds	r5, #1
    15be:	45ab      	cmp	fp, r5
    15c0:	d917      	bls.n	15f2 <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    15c2:	f1b9 0f00 	cmp.w	r9, #0
    15c6:	d0e5      	beq.n	1594 <cbvprintf_package+0x4e0>
    15c8:	ab0c      	add	r3, sp, #48	; 0x30
    15ca:	442b      	add	r3, r5
    15cc:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    15d0:	2b00      	cmp	r3, #0
    15d2:	dadf      	bge.n	1594 <cbvprintf_package+0x4e0>
    15d4:	e7f2      	b.n	15bc <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    15d6:	ab0c      	add	r3, sp, #48	; 0x30
    15d8:	442b      	add	r3, r5
    15da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    15de:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    15e2:	2200      	movs	r2, #0
    15e4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    15e8:	4640      	mov	r0, r8
    15ea:	f00a f889 	bl	b700 <strlen>
    15ee:	1c46      	adds	r6, r0, #1
    15f0:	e7d3      	b.n	159a <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    15f2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    15f4:	b00d      	add	sp, #52	; 0x34
    15f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    15fa:	f06f 000d 	mvn.w	r0, #13
    15fe:	e7f9      	b.n	15f4 <cbvprintf_package+0x540>
		return -ENOSPC;
    1600:	f06f 001b 	mvn.w	r0, #27
    1604:	e7f6      	b.n	15f4 <cbvprintf_package+0x540>
			return -ENOSPC;
    1606:	f06f 001b 	mvn.w	r0, #27
    160a:	e7f3      	b.n	15f4 <cbvprintf_package+0x540>
			return -ENOSPC;
    160c:	f06f 001b 	mvn.w	r0, #27
    1610:	e7f0      	b.n	15f4 <cbvprintf_package+0x540>
    1612:	bf00      	nop

00001614 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1614:	b538      	push	{r3, r4, r5, lr}
    1616:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1618:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    161a:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    161e:	6081      	str	r1, [r0, #8]
	switch (method) {
    1620:	2b02      	cmp	r3, #2
    1622:	d903      	bls.n	162c <sys_notify_finalize+0x18>
    1624:	2b03      	cmp	r3, #3
    1626:	d102      	bne.n	162e <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1628:	6800      	ldr	r0, [r0, #0]
		break;
    162a:	e00e      	b.n	164a <sys_notify_finalize+0x36>
	switch (method) {
    162c:	b963      	cbnz	r3, 1648 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    162e:	4d08      	ldr	r5, [pc, #32]	; (1650 <sys_notify_finalize+0x3c>)
    1630:	2345      	movs	r3, #69	; 0x45
    1632:	462a      	mov	r2, r5
    1634:	4907      	ldr	r1, [pc, #28]	; (1654 <sys_notify_finalize+0x40>)
    1636:	4808      	ldr	r0, [pc, #32]	; (1658 <sys_notify_finalize+0x44>)
    1638:	f009 fee8 	bl	b40c <assert_print>
    163c:	2145      	movs	r1, #69	; 0x45
    163e:	4628      	mov	r0, r5
    1640:	f009 fedd 	bl	b3fe <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1644:	2000      	movs	r0, #0
    1646:	e000      	b.n	164a <sys_notify_finalize+0x36>
	switch (method) {
    1648:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    164a:	2300      	movs	r3, #0
    164c:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    164e:	bd38      	pop	{r3, r4, r5, pc}
    1650:	0000ce94 	.word	0x0000ce94
    1654:	0000ca80 	.word	0x0000ca80
    1658:	0000c8bc 	.word	0x0000c8bc

0000165c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    165c:	4b01      	ldr	r3, [pc, #4]	; (1664 <__printk_hook_install+0x8>)
    165e:	6018      	str	r0, [r3, #0]
}
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	20000098 	.word	0x20000098

00001668 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    1668:	b538      	push	{r3, r4, r5, lr}
    166a:	4604      	mov	r4, r0
    166c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    166e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    1670:	2a00      	cmp	r2, #0
    1672:	db14      	blt.n	169e <process_complete+0x36>
    1674:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    1678:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    167a:	2a01      	cmp	r2, #1
    167c:	d91b      	bls.n	16b6 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    167e:	2b04      	cmp	r3, #4
    1680:	d050      	beq.n	1724 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    1682:	4c2f      	ldr	r4, [pc, #188]	; (1740 <process_complete+0xd8>)
    1684:	f240 131b 	movw	r3, #283	; 0x11b
    1688:	4622      	mov	r2, r4
    168a:	492e      	ldr	r1, [pc, #184]	; (1744 <process_complete+0xdc>)
    168c:	482e      	ldr	r0, [pc, #184]	; (1748 <process_complete+0xe0>)
    168e:	f009 febd 	bl	b40c <assert_print>
    1692:	f240 111b 	movw	r1, #283	; 0x11b
    1696:	4620      	mov	r0, r4
    1698:	f009 feb1 	bl	b3fe <assert_post_action>
	}
}
    169c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    169e:	e9d0 0100 	ldrd	r0, r1, [r0]
    16a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    16a6:	2300      	movs	r3, #0
    16a8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    16aa:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    16ac:	2101      	movs	r1, #1
    16ae:	4620      	mov	r0, r4
    16b0:	f009 fd35 	bl	b11e <set_state>
    16b4:	e7f2      	b.n	169c <process_complete+0x34>
		*clients = mgr->clients;
    16b6:	e9d0 0100 	ldrd	r0, r1, [r0]
    16ba:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    16be:	2200      	movs	r2, #0
    16c0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    16c2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    16c4:	2b06      	cmp	r3, #6
    16c6:	d00f      	beq.n	16e8 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    16c8:	2b05      	cmp	r3, #5
    16ca:	d11d      	bne.n	1708 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    16cc:	2100      	movs	r1, #0
    16ce:	4620      	mov	r0, r4
    16d0:	f009 fd25 	bl	b11e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    16d4:	4620      	mov	r0, r4
    16d6:	f009 fd49 	bl	b16c <process_recheck>
    16da:	2800      	cmp	r0, #0
    16dc:	d0de      	beq.n	169c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16de:	8ba3      	ldrh	r3, [r4, #28]
    16e0:	f043 0320 	orr.w	r3, r3, #32
    16e4:	83a3      	strh	r3, [r4, #28]
    16e6:	e7d9      	b.n	169c <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16e8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    16ec:	b13b      	cbz	r3, 16fe <process_complete+0x96>
				mgr->refs += 1U;
    16ee:	8be2      	ldrh	r2, [r4, #30]
    16f0:	3201      	adds	r2, #1
    16f2:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    16f4:	2b00      	cmp	r3, #0
    16f6:	d0f9      	beq.n	16ec <process_complete+0x84>
	return node->next;
    16f8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    16fa:	2b00      	cmp	r3, #0
    16fc:	d1f6      	bne.n	16ec <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    16fe:	2102      	movs	r1, #2
    1700:	4620      	mov	r0, r4
    1702:	f009 fd0c 	bl	b11e <set_state>
    1706:	e7e5      	b.n	16d4 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    1708:	4d0d      	ldr	r5, [pc, #52]	; (1740 <process_complete+0xd8>)
    170a:	f240 1309 	movw	r3, #265	; 0x109
    170e:	462a      	mov	r2, r5
    1710:	490e      	ldr	r1, [pc, #56]	; (174c <process_complete+0xe4>)
    1712:	480d      	ldr	r0, [pc, #52]	; (1748 <process_complete+0xe0>)
    1714:	f009 fe7a 	bl	b40c <assert_print>
    1718:	f240 1109 	movw	r1, #265	; 0x109
    171c:	4628      	mov	r0, r5
    171e:	f009 fe6e 	bl	b3fe <assert_post_action>
    1722:	e7d3      	b.n	16cc <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    1724:	2100      	movs	r1, #0
    1726:	f009 fcfa 	bl	b11e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    172a:	4620      	mov	r0, r4
    172c:	f009 fd1e 	bl	b16c <process_recheck>
    1730:	2800      	cmp	r0, #0
    1732:	d0b3      	beq.n	169c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1734:	8ba3      	ldrh	r3, [r4, #28]
    1736:	f043 0320 	orr.w	r3, r3, #32
    173a:	83a3      	strh	r3, [r4, #28]
    173c:	e7ae      	b.n	169c <process_complete+0x34>
    173e:	bf00      	nop
    1740:	0000ceb8 	.word	0x0000ceb8
    1744:	0000ca80 	.word	0x0000ca80
    1748:	0000c8bc 	.word	0x0000c8bc
    174c:	0000cedc 	.word	0x0000cedc

00001750 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1754:	b083      	sub	sp, #12
    1756:	4604      	mov	r4, r0
    1758:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    175a:	8b83      	ldrh	r3, [r0, #28]
    175c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    1760:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    1764:	460d      	mov	r5, r1
    1766:	b131      	cbz	r1, 1776 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1768:	f1b8 0f00 	cmp.w	r8, #0
    176c:	d112      	bne.n	1794 <process_event+0x44>
	list->head = NULL;
    176e:	2300      	movs	r3, #0
    1770:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1772:	9301      	str	r3, [sp, #4]
}
    1774:	e0aa      	b.n	18cc <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    1776:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 1a58 <process_event+0x308>
    177a:	f240 1333 	movw	r3, #307	; 0x133
    177e:	464a      	mov	r2, r9
    1780:	49b6      	ldr	r1, [pc, #728]	; (1a5c <process_event+0x30c>)
    1782:	48b7      	ldr	r0, [pc, #732]	; (1a60 <process_event+0x310>)
    1784:	f009 fe42 	bl	b40c <assert_print>
    1788:	f240 1133 	movw	r1, #307	; 0x133
    178c:	4648      	mov	r0, r9
    178e:	f009 fe36 	bl	b3fe <assert_post_action>
    1792:	e7e9      	b.n	1768 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    1794:	2d01      	cmp	r5, #1
    1796:	d013      	beq.n	17c0 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    1798:	2d02      	cmp	r5, #2
    179a:	d116      	bne.n	17ca <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    179c:	8ba3      	ldrh	r3, [r4, #28]
    179e:	f043 0320 	orr.w	r3, r3, #32
    17a2:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    17a4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    17a6:	4620      	mov	r0, r4
    17a8:	f006 fd94 	bl	82d4 <z_spin_unlock_valid>
    17ac:	2800      	cmp	r0, #0
    17ae:	f000 819c 	beq.w	1aea <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    17b2:	f386 8811 	msr	BASEPRI, r6
    17b6:	f3bf 8f6f 	isb	sy
}
    17ba:	b003      	add	sp, #12
    17bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    17c0:	8ba3      	ldrh	r3, [r4, #28]
    17c2:	f043 0310 	orr.w	r3, r3, #16
    17c6:	83a3      	strh	r3, [r4, #28]
    17c8:	e7ec      	b.n	17a4 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    17ca:	4da3      	ldr	r5, [pc, #652]	; (1a58 <process_event+0x308>)
    17cc:	f44f 739e 	mov.w	r3, #316	; 0x13c
    17d0:	462a      	mov	r2, r5
    17d2:	49a4      	ldr	r1, [pc, #656]	; (1a64 <process_event+0x314>)
    17d4:	48a2      	ldr	r0, [pc, #648]	; (1a60 <process_event+0x310>)
    17d6:	f009 fe19 	bl	b40c <assert_print>
    17da:	f44f 719e 	mov.w	r1, #316	; 0x13c
    17de:	4628      	mov	r0, r5
    17e0:	f009 fe0d 	bl	b3fe <assert_post_action>
    17e4:	e7da      	b.n	179c <process_event+0x4c>
			evt = process_recheck(mgr);
    17e6:	4620      	mov	r0, r4
    17e8:	f009 fcc0 	bl	b16c <process_recheck>
    17ec:	4605      	mov	r5, r0
    17ee:	e06f      	b.n	18d0 <process_event+0x180>
			res = mgr->last_res;
    17f0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    17f4:	464a      	mov	r2, r9
    17f6:	4669      	mov	r1, sp
    17f8:	4620      	mov	r0, r4
    17fa:	f7ff ff35 	bl	1668 <process_complete>
		onoff_transition_fn transit = NULL;
    17fe:	2500      	movs	r5, #0
    1800:	e011      	b.n	1826 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1802:	2f00      	cmp	r7, #0
    1804:	f040 8081 	bne.w	190a <process_event+0x1ba>
	return list->head;
    1808:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    180a:	2b00      	cmp	r3, #0
    180c:	f000 808b 	beq.w	1926 <process_event+0x1d6>
			transit = mgr->transitions->start;
    1810:	6923      	ldr	r3, [r4, #16]
    1812:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1814:	2d00      	cmp	r5, #0
    1816:	f000 8094 	beq.w	1942 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    181a:	2106      	movs	r1, #6
    181c:	4620      	mov	r0, r4
    181e:	f009 fc7e 	bl	b11e <set_state>
		res = 0;
    1822:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1826:	8ba3      	ldrh	r3, [r4, #28]
    1828:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    182c:	45b8      	cmp	r8, r7
    182e:	f000 810b 	beq.w	1a48 <process_event+0x2f8>
    1832:	68a2      	ldr	r2, [r4, #8]
    1834:	2a00      	cmp	r2, #0
    1836:	f000 8109 	beq.w	1a4c <process_event+0x2fc>
    183a:	2201      	movs	r2, #1
		if (do_monitors
    183c:	4617      	mov	r7, r2
    183e:	b91a      	cbnz	r2, 1848 <process_event+0xf8>
    1840:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    1842:	2a00      	cmp	r2, #0
    1844:	f000 8104 	beq.w	1a50 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1848:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    184c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    184e:	f104 0a14 	add.w	sl, r4, #20
    1852:	4650      	mov	r0, sl
    1854:	f006 fd3e 	bl	82d4 <z_spin_unlock_valid>
    1858:	2800      	cmp	r0, #0
    185a:	f000 8115 	beq.w	1a88 <process_event+0x338>
    185e:	f386 8811 	msr	BASEPRI, r6
    1862:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1866:	2f00      	cmp	r7, #0
    1868:	f040 811f 	bne.w	1aaa <process_event+0x35a>
    186c:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    186e:	b12b      	cbz	r3, 187c <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    1870:	464b      	mov	r3, r9
    1872:	4642      	mov	r2, r8
    1874:	4669      	mov	r1, sp
    1876:	4620      	mov	r0, r4
    1878:	f009 fcba 	bl	b1f0 <notify_all>
			if (transit != NULL) {
    187c:	b115      	cbz	r5, 1884 <process_event+0x134>
				transit(mgr, transition_complete);
    187e:	497a      	ldr	r1, [pc, #488]	; (1a68 <process_event+0x318>)
    1880:	4620      	mov	r0, r4
    1882:	47a8      	blx	r5
	__asm__ volatile(
    1884:	f04f 0320 	mov.w	r3, #32
    1888:	f3ef 8611 	mrs	r6, BASEPRI
    188c:	f383 8812 	msr	BASEPRI_MAX, r3
    1890:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1894:	4650      	mov	r0, sl
    1896:	f006 fd0d 	bl	82b4 <z_spin_lock_valid>
    189a:	2800      	cmp	r0, #0
    189c:	f000 810b 	beq.w	1ab6 <process_event+0x366>
	z_spin_lock_set_owner(l);
    18a0:	4650      	mov	r0, sl
    18a2:	f006 fd27 	bl	82f4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    18a6:	8ba3      	ldrh	r3, [r4, #28]
    18a8:	f023 0308 	bic.w	r3, r3, #8
    18ac:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    18ae:	8ba3      	ldrh	r3, [r4, #28]
    18b0:	f013 0f10 	tst.w	r3, #16
    18b4:	f000 810f 	beq.w	1ad6 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18b8:	f023 0310 	bic.w	r3, r3, #16
    18bc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    18be:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    18c0:	8ba7      	ldrh	r7, [r4, #28]
    18c2:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    18c6:	2d00      	cmp	r5, #0
    18c8:	f43f af6c 	beq.w	17a4 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    18cc:	2d02      	cmp	r5, #2
    18ce:	d08a      	beq.n	17e6 <process_event+0x96>
		if (evt == EVT_NOP) {
    18d0:	2d00      	cmp	r5, #0
    18d2:	f43f af67 	beq.w	17a4 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    18d6:	2d01      	cmp	r5, #1
    18d8:	d08a      	beq.n	17f0 <process_event+0xa0>
		} else if (evt == EVT_START) {
    18da:	2d03      	cmp	r5, #3
    18dc:	d091      	beq.n	1802 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    18de:	2d04      	cmp	r5, #4
    18e0:	d03e      	beq.n	1960 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    18e2:	2d05      	cmp	r5, #5
    18e4:	f040 80a0 	bne.w	1a28 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18e8:	2f01      	cmp	r7, #1
    18ea:	d172      	bne.n	19d2 <process_event+0x282>
    18ec:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    18ee:	2b00      	cmp	r3, #0
    18f0:	d07d      	beq.n	19ee <process_event+0x29e>
			transit = mgr->transitions->reset;
    18f2:	6923      	ldr	r3, [r4, #16]
    18f4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    18f6:	2d00      	cmp	r5, #0
    18f8:	f000 8087 	beq.w	1a0a <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    18fc:	2105      	movs	r1, #5
    18fe:	4620      	mov	r0, r4
    1900:	f009 fc0d 	bl	b11e <set_state>
		res = 0;
    1904:	f04f 0900 	mov.w	r9, #0
    1908:	e78d      	b.n	1826 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    190a:	4d53      	ldr	r5, [pc, #332]	; (1a58 <process_event+0x308>)
    190c:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1910:	462a      	mov	r2, r5
    1912:	4956      	ldr	r1, [pc, #344]	; (1a6c <process_event+0x31c>)
    1914:	4852      	ldr	r0, [pc, #328]	; (1a60 <process_event+0x310>)
    1916:	f009 fd79 	bl	b40c <assert_print>
    191a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    191e:	4628      	mov	r0, r5
    1920:	f009 fd6d 	bl	b3fe <assert_post_action>
    1924:	e770      	b.n	1808 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1926:	4d4c      	ldr	r5, [pc, #304]	; (1a58 <process_event+0x308>)
    1928:	f240 1357 	movw	r3, #343	; 0x157
    192c:	462a      	mov	r2, r5
    192e:	4950      	ldr	r1, [pc, #320]	; (1a70 <process_event+0x320>)
    1930:	484b      	ldr	r0, [pc, #300]	; (1a60 <process_event+0x310>)
    1932:	f009 fd6b 	bl	b40c <assert_print>
    1936:	f240 1157 	movw	r1, #343	; 0x157
    193a:	4628      	mov	r0, r5
    193c:	f009 fd5f 	bl	b3fe <assert_post_action>
    1940:	e766      	b.n	1810 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    1942:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1a58 <process_event+0x308>
    1946:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    194a:	4642      	mov	r2, r8
    194c:	4949      	ldr	r1, [pc, #292]	; (1a74 <process_event+0x324>)
    194e:	4844      	ldr	r0, [pc, #272]	; (1a60 <process_event+0x310>)
    1950:	f009 fd5c 	bl	b40c <assert_print>
    1954:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1958:	4640      	mov	r0, r8
    195a:	f009 fd50 	bl	b3fe <assert_post_action>
    195e:	e75c      	b.n	181a <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1960:	2f02      	cmp	r7, #2
    1962:	d10b      	bne.n	197c <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1964:	8be3      	ldrh	r3, [r4, #30]
    1966:	b9bb      	cbnz	r3, 1998 <process_event+0x248>
			transit = mgr->transitions->stop;
    1968:	6923      	ldr	r3, [r4, #16]
    196a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    196c:	b315      	cbz	r5, 19b4 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    196e:	2104      	movs	r1, #4
    1970:	4620      	mov	r0, r4
    1972:	f009 fbd4 	bl	b11e <set_state>
		res = 0;
    1976:	f04f 0900 	mov.w	r9, #0
    197a:	e754      	b.n	1826 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    197c:	4d36      	ldr	r5, [pc, #216]	; (1a58 <process_event+0x308>)
    197e:	f240 135d 	movw	r3, #349	; 0x15d
    1982:	462a      	mov	r2, r5
    1984:	493c      	ldr	r1, [pc, #240]	; (1a78 <process_event+0x328>)
    1986:	4836      	ldr	r0, [pc, #216]	; (1a60 <process_event+0x310>)
    1988:	f009 fd40 	bl	b40c <assert_print>
    198c:	f240 115d 	movw	r1, #349	; 0x15d
    1990:	4628      	mov	r0, r5
    1992:	f009 fd34 	bl	b3fe <assert_post_action>
    1996:	e7e5      	b.n	1964 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1998:	4d2f      	ldr	r5, [pc, #188]	; (1a58 <process_event+0x308>)
    199a:	f44f 73af 	mov.w	r3, #350	; 0x15e
    199e:	462a      	mov	r2, r5
    19a0:	4936      	ldr	r1, [pc, #216]	; (1a7c <process_event+0x32c>)
    19a2:	482f      	ldr	r0, [pc, #188]	; (1a60 <process_event+0x310>)
    19a4:	f009 fd32 	bl	b40c <assert_print>
    19a8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    19ac:	4628      	mov	r0, r5
    19ae:	f009 fd26 	bl	b3fe <assert_post_action>
    19b2:	e7d9      	b.n	1968 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    19b4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1a58 <process_event+0x308>
    19b8:	f240 1361 	movw	r3, #353	; 0x161
    19bc:	4642      	mov	r2, r8
    19be:	492d      	ldr	r1, [pc, #180]	; (1a74 <process_event+0x324>)
    19c0:	4827      	ldr	r0, [pc, #156]	; (1a60 <process_event+0x310>)
    19c2:	f009 fd23 	bl	b40c <assert_print>
    19c6:	f240 1161 	movw	r1, #353	; 0x161
    19ca:	4640      	mov	r0, r8
    19cc:	f009 fd17 	bl	b3fe <assert_post_action>
    19d0:	e7cd      	b.n	196e <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    19d2:	4d21      	ldr	r5, [pc, #132]	; (1a58 <process_event+0x308>)
    19d4:	f44f 73b2 	mov.w	r3, #356	; 0x164
    19d8:	462a      	mov	r2, r5
    19da:	4929      	ldr	r1, [pc, #164]	; (1a80 <process_event+0x330>)
    19dc:	4820      	ldr	r0, [pc, #128]	; (1a60 <process_event+0x310>)
    19de:	f009 fd15 	bl	b40c <assert_print>
    19e2:	f44f 71b2 	mov.w	r1, #356	; 0x164
    19e6:	4628      	mov	r0, r5
    19e8:	f009 fd09 	bl	b3fe <assert_post_action>
    19ec:	e77e      	b.n	18ec <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    19ee:	4d1a      	ldr	r5, [pc, #104]	; (1a58 <process_event+0x308>)
    19f0:	f240 1365 	movw	r3, #357	; 0x165
    19f4:	462a      	mov	r2, r5
    19f6:	491e      	ldr	r1, [pc, #120]	; (1a70 <process_event+0x320>)
    19f8:	4819      	ldr	r0, [pc, #100]	; (1a60 <process_event+0x310>)
    19fa:	f009 fd07 	bl	b40c <assert_print>
    19fe:	f240 1165 	movw	r1, #357	; 0x165
    1a02:	4628      	mov	r0, r5
    1a04:	f009 fcfb 	bl	b3fe <assert_post_action>
    1a08:	e773      	b.n	18f2 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    1a0a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a58 <process_event+0x308>
    1a0e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1a12:	4642      	mov	r2, r8
    1a14:	4917      	ldr	r1, [pc, #92]	; (1a74 <process_event+0x324>)
    1a16:	4812      	ldr	r0, [pc, #72]	; (1a60 <process_event+0x310>)
    1a18:	f009 fcf8 	bl	b40c <assert_print>
    1a1c:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1a20:	4640      	mov	r0, r8
    1a22:	f009 fcec 	bl	b3fe <assert_post_action>
    1a26:	e769      	b.n	18fc <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    1a28:	4d0b      	ldr	r5, [pc, #44]	; (1a58 <process_event+0x308>)
    1a2a:	f240 136b 	movw	r3, #363	; 0x16b
    1a2e:	462a      	mov	r2, r5
    1a30:	4914      	ldr	r1, [pc, #80]	; (1a84 <process_event+0x334>)
    1a32:	480b      	ldr	r0, [pc, #44]	; (1a60 <process_event+0x310>)
    1a34:	f009 fcea 	bl	b40c <assert_print>
    1a38:	f240 116b 	movw	r1, #363	; 0x16b
    1a3c:	4628      	mov	r0, r5
    1a3e:	f009 fcde 	bl	b3fe <assert_post_action>
		onoff_transition_fn transit = NULL;
    1a42:	2500      	movs	r5, #0
		res = 0;
    1a44:	46a9      	mov	r9, r5
    1a46:	e6ee      	b.n	1826 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    1a48:	2200      	movs	r2, #0
    1a4a:	e6f7      	b.n	183c <process_event+0xec>
    1a4c:	2200      	movs	r2, #0
    1a4e:	e6f5      	b.n	183c <process_event+0xec>
		    || (transit != NULL)) {
    1a50:	2d00      	cmp	r5, #0
    1a52:	f47f aef9 	bne.w	1848 <process_event+0xf8>
    1a56:	e72a      	b.n	18ae <process_event+0x15e>
    1a58:	0000ceb8 	.word	0x0000ceb8
    1a5c:	0000cf04 	.word	0x0000cf04
    1a60:	0000c8bc 	.word	0x0000c8bc
    1a64:	0000cf14 	.word	0x0000cf14
    1a68:	00001b25 	.word	0x00001b25
    1a6c:	0000cf28 	.word	0x0000cf28
    1a70:	0000cf34 	.word	0x0000cf34
    1a74:	0000cf58 	.word	0x0000cf58
    1a78:	0000cf70 	.word	0x0000cf70
    1a7c:	0000cf88 	.word	0x0000cf88
    1a80:	0000cf98 	.word	0x0000cf98
    1a84:	0000ca80 	.word	0x0000ca80
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1a88:	f8df b080 	ldr.w	fp, [pc, #128]	; 1b0c <process_event+0x3bc>
    1a8c:	23b9      	movs	r3, #185	; 0xb9
    1a8e:	465a      	mov	r2, fp
    1a90:	491f      	ldr	r1, [pc, #124]	; (1b10 <process_event+0x3c0>)
    1a92:	4820      	ldr	r0, [pc, #128]	; (1b14 <process_event+0x3c4>)
    1a94:	f009 fcba 	bl	b40c <assert_print>
    1a98:	4651      	mov	r1, sl
    1a9a:	481f      	ldr	r0, [pc, #124]	; (1b18 <process_event+0x3c8>)
    1a9c:	f009 fcb6 	bl	b40c <assert_print>
    1aa0:	21b9      	movs	r1, #185	; 0xb9
    1aa2:	4658      	mov	r0, fp
    1aa4:	f009 fcab 	bl	b3fe <assert_post_action>
    1aa8:	e6d9      	b.n	185e <process_event+0x10e>
				notify_monitors(mgr, state, res);
    1aaa:	464a      	mov	r2, r9
    1aac:	4641      	mov	r1, r8
    1aae:	4620      	mov	r0, r4
    1ab0:	f009 fb3d 	bl	b12e <notify_monitors>
    1ab4:	e6da      	b.n	186c <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1ab6:	4d15      	ldr	r5, [pc, #84]	; (1b0c <process_event+0x3bc>)
    1ab8:	238e      	movs	r3, #142	; 0x8e
    1aba:	462a      	mov	r2, r5
    1abc:	4917      	ldr	r1, [pc, #92]	; (1b1c <process_event+0x3cc>)
    1abe:	4815      	ldr	r0, [pc, #84]	; (1b14 <process_event+0x3c4>)
    1ac0:	f009 fca4 	bl	b40c <assert_print>
    1ac4:	4651      	mov	r1, sl
    1ac6:	4816      	ldr	r0, [pc, #88]	; (1b20 <process_event+0x3d0>)
    1ac8:	f009 fca0 	bl	b40c <assert_print>
    1acc:	218e      	movs	r1, #142	; 0x8e
    1ace:	4628      	mov	r0, r5
    1ad0:	f009 fc95 	bl	b3fe <assert_post_action>
    1ad4:	e6e4      	b.n	18a0 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1ad6:	f013 0f20 	tst.w	r3, #32
    1ada:	d004      	beq.n	1ae6 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1adc:	f023 0320 	bic.w	r3, r3, #32
    1ae0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    1ae2:	2502      	movs	r5, #2
    1ae4:	e6ec      	b.n	18c0 <process_event+0x170>
		evt = EVT_NOP;
    1ae6:	2500      	movs	r5, #0
    1ae8:	e6ea      	b.n	18c0 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1aea:	4d08      	ldr	r5, [pc, #32]	; (1b0c <process_event+0x3bc>)
    1aec:	23b9      	movs	r3, #185	; 0xb9
    1aee:	462a      	mov	r2, r5
    1af0:	4907      	ldr	r1, [pc, #28]	; (1b10 <process_event+0x3c0>)
    1af2:	4808      	ldr	r0, [pc, #32]	; (1b14 <process_event+0x3c4>)
    1af4:	f009 fc8a 	bl	b40c <assert_print>
    1af8:	4621      	mov	r1, r4
    1afa:	4807      	ldr	r0, [pc, #28]	; (1b18 <process_event+0x3c8>)
    1afc:	f009 fc86 	bl	b40c <assert_print>
    1b00:	21b9      	movs	r1, #185	; 0xb9
    1b02:	4628      	mov	r0, r5
    1b04:	f009 fc7b 	bl	b3fe <assert_post_action>
    1b08:	e653      	b.n	17b2 <process_event+0x62>
    1b0a:	bf00      	nop
    1b0c:	0000cfb0 	.word	0x0000cfb0
    1b10:	0000cfe0 	.word	0x0000cfe0
    1b14:	0000c8bc 	.word	0x0000c8bc
    1b18:	0000cff8 	.word	0x0000cff8
    1b1c:	0000d010 	.word	0x0000d010
    1b20:	0000d028 	.word	0x0000d028

00001b24 <transition_complete>:
{
    1b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b28:	4604      	mov	r4, r0
    1b2a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1b2c:	f100 0614 	add.w	r6, r0, #20
    1b30:	f04f 0320 	mov.w	r3, #32
    1b34:	f3ef 8711 	mrs	r7, BASEPRI
    1b38:	f383 8812 	msr	BASEPRI_MAX, r3
    1b3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b40:	4630      	mov	r0, r6
    1b42:	f006 fbb7 	bl	82b4 <z_spin_lock_valid>
    1b46:	b150      	cbz	r0, 1b5e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1b48:	4630      	mov	r0, r6
    1b4a:	f006 fbd3 	bl	82f4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1b4e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1b50:	463a      	mov	r2, r7
    1b52:	2101      	movs	r1, #1
    1b54:	4620      	mov	r0, r4
    1b56:	f7ff fdfb 	bl	1750 <process_event>
}
    1b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b5e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1b80 <transition_complete+0x5c>
    1b62:	238e      	movs	r3, #142	; 0x8e
    1b64:	4642      	mov	r2, r8
    1b66:	4907      	ldr	r1, [pc, #28]	; (1b84 <transition_complete+0x60>)
    1b68:	4807      	ldr	r0, [pc, #28]	; (1b88 <transition_complete+0x64>)
    1b6a:	f009 fc4f 	bl	b40c <assert_print>
    1b6e:	4631      	mov	r1, r6
    1b70:	4806      	ldr	r0, [pc, #24]	; (1b8c <transition_complete+0x68>)
    1b72:	f009 fc4b 	bl	b40c <assert_print>
    1b76:	218e      	movs	r1, #142	; 0x8e
    1b78:	4640      	mov	r0, r8
    1b7a:	f009 fc40 	bl	b3fe <assert_post_action>
    1b7e:	e7e3      	b.n	1b48 <transition_complete+0x24>
    1b80:	0000cfb0 	.word	0x0000cfb0
    1b84:	0000d010 	.word	0x0000d010
    1b88:	0000c8bc 	.word	0x0000c8bc
    1b8c:	0000d028 	.word	0x0000d028

00001b90 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b94:	4604      	mov	r4, r0
    1b96:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1b98:	f009 fb01 	bl	b19e <validate_args>

	if (rv < 0) {
    1b9c:	1e06      	subs	r6, r0, #0
    1b9e:	db58      	blt.n	1c52 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1ba0:	f104 0714 	add.w	r7, r4, #20
    1ba4:	f04f 0320 	mov.w	r3, #32
    1ba8:	f3ef 8911 	mrs	r9, BASEPRI
    1bac:	f383 8812 	msr	BASEPRI_MAX, r3
    1bb0:	f3bf 8f6f 	isb	sy
    1bb4:	4638      	mov	r0, r7
    1bb6:	f006 fb7d 	bl	82b4 <z_spin_lock_valid>
    1bba:	b1e8      	cbz	r0, 1bf8 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    1bbc:	4638      	mov	r0, r7
    1bbe:	f006 fb99 	bl	82f4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bc2:	8ba5      	ldrh	r5, [r4, #28]
    1bc4:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1bc8:	8be3      	ldrh	r3, [r4, #30]
    1bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bce:	4293      	cmp	r3, r2
    1bd0:	d056      	beq.n	1c80 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    1bd2:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    1bd4:	2d02      	cmp	r5, #2
    1bd6:	d01f      	beq.n	1c18 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    1bd8:	b32d      	cbz	r5, 1c26 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    1bda:	2d04      	cmp	r5, #4
    1bdc:	d023      	beq.n	1c26 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    1bde:	2d06      	cmp	r5, #6
    1be0:	d021      	beq.n	1c26 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    1be2:	2d05      	cmp	r5, #5
    1be4:	d053      	beq.n	1c8e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1be6:	2d01      	cmp	r5, #1
    1be8:	d136      	bne.n	1c58 <onoff_request+0xc8>
		rv = -EIO;
    1bea:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1bee:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1bf2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1bf4:	4652      	mov	r2, sl
    1bf6:	e01c      	b.n	1c32 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1bf8:	4d3c      	ldr	r5, [pc, #240]	; (1cec <onoff_request+0x15c>)
    1bfa:	238e      	movs	r3, #142	; 0x8e
    1bfc:	462a      	mov	r2, r5
    1bfe:	493c      	ldr	r1, [pc, #240]	; (1cf0 <onoff_request+0x160>)
    1c00:	483c      	ldr	r0, [pc, #240]	; (1cf4 <onoff_request+0x164>)
    1c02:	f009 fc03 	bl	b40c <assert_print>
    1c06:	4639      	mov	r1, r7
    1c08:	483b      	ldr	r0, [pc, #236]	; (1cf8 <onoff_request+0x168>)
    1c0a:	f009 fbff 	bl	b40c <assert_print>
    1c0e:	218e      	movs	r1, #142	; 0x8e
    1c10:	4628      	mov	r0, r5
    1c12:	f009 fbf4 	bl	b3fe <assert_post_action>
    1c16:	e7d1      	b.n	1bbc <onoff_request+0x2c>
		mgr->refs += 1U;
    1c18:	3301      	adds	r3, #1
    1c1a:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1c1c:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1c20:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1c22:	461a      	mov	r2, r3
    1c24:	e005      	b.n	1c32 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1c26:	fab5 f385 	clz	r3, r5
    1c2a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1c2c:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1c30:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1c32:	b142      	cbz	r2, 1c46 <onoff_request+0xb6>
	parent->next = child;
    1c34:	2200      	movs	r2, #0
    1c36:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    1c3a:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1c3c:	b372      	cbz	r2, 1c9c <onoff_request+0x10c>
	parent->next = child;
    1c3e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1c42:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1c46:	b373      	cbz	r3, 1ca6 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1c48:	464a      	mov	r2, r9
    1c4a:	2102      	movs	r1, #2
    1c4c:	4620      	mov	r0, r4
    1c4e:	f7ff fd7f 	bl	1750 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1c52:	4630      	mov	r0, r6
    1c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1c58:	4e28      	ldr	r6, [pc, #160]	; (1cfc <onoff_request+0x16c>)
    1c5a:	f240 13c9 	movw	r3, #457	; 0x1c9
    1c5e:	4632      	mov	r2, r6
    1c60:	4927      	ldr	r1, [pc, #156]	; (1d00 <onoff_request+0x170>)
    1c62:	4824      	ldr	r0, [pc, #144]	; (1cf4 <onoff_request+0x164>)
    1c64:	f009 fbd2 	bl	b40c <assert_print>
    1c68:	f240 11c9 	movw	r1, #457	; 0x1c9
    1c6c:	4630      	mov	r0, r6
    1c6e:	f009 fbc6 	bl	b3fe <assert_post_action>
		rv = -EIO;
    1c72:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1c76:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1c7a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1c7c:	4652      	mov	r2, sl
    1c7e:	e7d8      	b.n	1c32 <onoff_request+0xa2>
		rv = -EAGAIN;
    1c80:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1c84:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1c88:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1c8a:	4652      	mov	r2, sl
    1c8c:	e7d1      	b.n	1c32 <onoff_request+0xa2>
		rv = -ENOTSUP;
    1c8e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    1c92:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1c96:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1c98:	4652      	mov	r2, sl
    1c9a:	e7ca      	b.n	1c32 <onoff_request+0xa2>
    1c9c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1ca0:	f8c4 8000 	str.w	r8, [r4]
}
    1ca4:	e7cf      	b.n	1c46 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ca6:	4638      	mov	r0, r7
    1ca8:	f006 fb14 	bl	82d4 <z_spin_unlock_valid>
    1cac:	b168      	cbz	r0, 1cca <onoff_request+0x13a>
	__asm__ volatile(
    1cae:	f389 8811 	msr	BASEPRI, r9
    1cb2:	f3bf 8f6f 	isb	sy
		if (notify) {
    1cb6:	f1ba 0f00 	cmp.w	sl, #0
    1cba:	d0ca      	beq.n	1c52 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    1cbc:	2300      	movs	r3, #0
    1cbe:	462a      	mov	r2, r5
    1cc0:	4641      	mov	r1, r8
    1cc2:	4620      	mov	r0, r4
    1cc4:	f009 fa81 	bl	b1ca <notify_one>
    1cc8:	e7c3      	b.n	1c52 <onoff_request+0xc2>
    1cca:	f8df b020 	ldr.w	fp, [pc, #32]	; 1cec <onoff_request+0x15c>
    1cce:	23b9      	movs	r3, #185	; 0xb9
    1cd0:	465a      	mov	r2, fp
    1cd2:	490c      	ldr	r1, [pc, #48]	; (1d04 <onoff_request+0x174>)
    1cd4:	4807      	ldr	r0, [pc, #28]	; (1cf4 <onoff_request+0x164>)
    1cd6:	f009 fb99 	bl	b40c <assert_print>
    1cda:	4639      	mov	r1, r7
    1cdc:	480a      	ldr	r0, [pc, #40]	; (1d08 <onoff_request+0x178>)
    1cde:	f009 fb95 	bl	b40c <assert_print>
    1ce2:	21b9      	movs	r1, #185	; 0xb9
    1ce4:	4658      	mov	r0, fp
    1ce6:	f009 fb8a 	bl	b3fe <assert_post_action>
    1cea:	e7e0      	b.n	1cae <onoff_request+0x11e>
    1cec:	0000cfb0 	.word	0x0000cfb0
    1cf0:	0000d010 	.word	0x0000d010
    1cf4:	0000c8bc 	.word	0x0000c8bc
    1cf8:	0000d028 	.word	0x0000d028
    1cfc:	0000ceb8 	.word	0x0000ceb8
    1d00:	0000cf98 	.word	0x0000cf98
    1d04:	0000cfe0 	.word	0x0000cfe0
    1d08:	0000cff8 	.word	0x0000cff8

00001d0c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d10:	4606      	mov	r6, r0
    1d12:	460d      	mov	r5, r1
    1d14:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1d16:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    1d1a:	d222      	bcs.n	1d62 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1d1c:	2c04      	cmp	r4, #4
    1d1e:	d931      	bls.n	1d84 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    1d20:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1d22:	1dec      	adds	r4, r5, #7
    1d24:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1d28:	4415      	add	r5, r2
    1d2a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1d2e:	1b2d      	subs	r5, r5, r4
    1d30:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1d34:	2d17      	cmp	r5, #23
    1d36:	d936      	bls.n	1da6 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1d38:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    1d3a:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    1d3e:	2300      	movs	r3, #0
    1d40:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1d42:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1d46:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1d4a:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    1d4e:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1d50:	3607      	adds	r6, #7
    1d52:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1d56:	f109 0301 	add.w	r3, r9, #1
    1d5a:	4543      	cmp	r3, r8
    1d5c:	d834      	bhi.n	1dc8 <sys_heap_init+0xbc>
{
    1d5e:	2300      	movs	r3, #0
    1d60:	e049      	b.n	1df6 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1d62:	4f38      	ldr	r7, [pc, #224]	; (1e44 <sys_heap_init+0x138>)
    1d64:	f240 13e3 	movw	r3, #483	; 0x1e3
    1d68:	463a      	mov	r2, r7
    1d6a:	4937      	ldr	r1, [pc, #220]	; (1e48 <sys_heap_init+0x13c>)
    1d6c:	4837      	ldr	r0, [pc, #220]	; (1e4c <sys_heap_init+0x140>)
    1d6e:	f009 fb4d 	bl	b40c <assert_print>
    1d72:	4837      	ldr	r0, [pc, #220]	; (1e50 <sys_heap_init+0x144>)
    1d74:	f009 fb4a 	bl	b40c <assert_print>
    1d78:	f240 11e3 	movw	r1, #483	; 0x1e3
    1d7c:	4638      	mov	r0, r7
    1d7e:	f009 fb3e 	bl	b3fe <assert_post_action>
    1d82:	e7cb      	b.n	1d1c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1d84:	4f2f      	ldr	r7, [pc, #188]	; (1e44 <sys_heap_init+0x138>)
    1d86:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1d8a:	463a      	mov	r2, r7
    1d8c:	4931      	ldr	r1, [pc, #196]	; (1e54 <sys_heap_init+0x148>)
    1d8e:	482f      	ldr	r0, [pc, #188]	; (1e4c <sys_heap_init+0x140>)
    1d90:	f009 fb3c 	bl	b40c <assert_print>
    1d94:	4830      	ldr	r0, [pc, #192]	; (1e58 <sys_heap_init+0x14c>)
    1d96:	f009 fb39 	bl	b40c <assert_print>
    1d9a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1d9e:	4638      	mov	r0, r7
    1da0:	f009 fb2d 	bl	b3fe <assert_post_action>
    1da4:	e7bc      	b.n	1d20 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1da6:	4f27      	ldr	r7, [pc, #156]	; (1e44 <sys_heap_init+0x138>)
    1da8:	f240 13f3 	movw	r3, #499	; 0x1f3
    1dac:	463a      	mov	r2, r7
    1dae:	492b      	ldr	r1, [pc, #172]	; (1e5c <sys_heap_init+0x150>)
    1db0:	4826      	ldr	r0, [pc, #152]	; (1e4c <sys_heap_init+0x140>)
    1db2:	f009 fb2b 	bl	b40c <assert_print>
    1db6:	4828      	ldr	r0, [pc, #160]	; (1e58 <sys_heap_init+0x14c>)
    1db8:	f009 fb28 	bl	b40c <assert_print>
    1dbc:	f240 11f3 	movw	r1, #499	; 0x1f3
    1dc0:	4638      	mov	r0, r7
    1dc2:	f009 fb1c 	bl	b3fe <assert_post_action>
    1dc6:	e7b7      	b.n	1d38 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1dc8:	f8df a078 	ldr.w	sl, [pc, #120]	; 1e44 <sys_heap_init+0x138>
    1dcc:	f44f 7301 	mov.w	r3, #516	; 0x204
    1dd0:	4652      	mov	r2, sl
    1dd2:	4923      	ldr	r1, [pc, #140]	; (1e60 <sys_heap_init+0x154>)
    1dd4:	481d      	ldr	r0, [pc, #116]	; (1e4c <sys_heap_init+0x140>)
    1dd6:	f009 fb19 	bl	b40c <assert_print>
    1dda:	481f      	ldr	r0, [pc, #124]	; (1e58 <sys_heap_init+0x14c>)
    1ddc:	f009 fb16 	bl	b40c <assert_print>
    1de0:	f44f 7101 	mov.w	r1, #516	; 0x204
    1de4:	4650      	mov	r0, sl
    1de6:	f009 fb0a 	bl	b3fe <assert_post_action>
    1dea:	e7b8      	b.n	1d5e <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1dec:	1d1a      	adds	r2, r3, #4
    1dee:	2100      	movs	r1, #0
    1df0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1df4:	3301      	adds	r3, #1
    1df6:	42bb      	cmp	r3, r7
    1df8:	dbf8      	blt.n	1dec <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1dfa:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    1dfe:	b29b      	uxth	r3, r3
    1e00:	8063      	strh	r3, [r4, #2]
    1e02:	2200      	movs	r2, #0
    1e04:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1e06:	f043 0301 	orr.w	r3, r3, #1
    1e0a:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1e0c:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1e10:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1e14:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    1e18:	1cb3      	adds	r3, r6, #2
    1e1a:	52e1      	strh	r1, [r4, r3]
    1e1c:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    1e20:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1e24:	1ca9      	adds	r1, r5, #2
    1e26:	5262      	strh	r2, [r4, r1]
    1e28:	4425      	add	r5, r4
    1e2a:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1e2e:	886b      	ldrh	r3, [r5, #2]
    1e30:	f043 0301 	orr.w	r3, r3, #1
    1e34:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1e36:	4649      	mov	r1, r9
    1e38:	4620      	mov	r0, r4
    1e3a:	f009 fa3e 	bl	b2ba <free_list_add>
}
    1e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e42:	bf00      	nop
    1e44:	0000d040 	.word	0x0000d040
    1e48:	0000d114 	.word	0x0000d114
    1e4c:	0000c8bc 	.word	0x0000c8bc
    1e50:	0000d12c 	.word	0x0000d12c
    1e54:	0000d144 	.word	0x0000d144
    1e58:	0000d168 	.word	0x0000d168
    1e5c:	0000d184 	.word	0x0000d184
    1e60:	0000d1b0 	.word	0x0000d1b0

00001e64 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	b082      	sub	sp, #8
    1e68:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    1e6a:	2300      	movs	r3, #0
    1e6c:	6003      	str	r3, [r0, #0]
    1e6e:	6043      	str	r3, [r0, #4]
    1e70:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    1e72:	784b      	ldrb	r3, [r1, #1]
    1e74:	2b25      	cmp	r3, #37	; 0x25
    1e76:	d002      	beq.n	1e7e <extract_conversion+0x1a>
    1e78:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    1e7a:	2501      	movs	r5, #1
    1e7c:	e01f      	b.n	1ebe <extract_conversion+0x5a>
		conv->specifier = *sp++;
    1e7e:	1c88      	adds	r0, r1, #2
    1e80:	70e3      	strb	r3, [r4, #3]
		return sp;
    1e82:	e145      	b.n	2110 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    1e84:	7823      	ldrb	r3, [r4, #0]
    1e86:	f043 0304 	orr.w	r3, r3, #4
    1e8a:	7023      	strb	r3, [r4, #0]
		if (loop) {
    1e8c:	b1b5      	cbz	r5, 1ebc <extract_conversion+0x58>
			++sp;
    1e8e:	3601      	adds	r6, #1
    1e90:	e014      	b.n	1ebc <extract_conversion+0x58>
			conv->flag_plus = true;
    1e92:	7823      	ldrb	r3, [r4, #0]
    1e94:	f043 0308 	orr.w	r3, r3, #8
    1e98:	7023      	strb	r3, [r4, #0]
			break;
    1e9a:	e7f7      	b.n	1e8c <extract_conversion+0x28>
			conv->flag_space = true;
    1e9c:	7823      	ldrb	r3, [r4, #0]
    1e9e:	f043 0310 	orr.w	r3, r3, #16
    1ea2:	7023      	strb	r3, [r4, #0]
			break;
    1ea4:	e7f2      	b.n	1e8c <extract_conversion+0x28>
			conv->flag_hash = true;
    1ea6:	7823      	ldrb	r3, [r4, #0]
    1ea8:	f043 0320 	orr.w	r3, r3, #32
    1eac:	7023      	strb	r3, [r4, #0]
			break;
    1eae:	e7ed      	b.n	1e8c <extract_conversion+0x28>
			conv->flag_zero = true;
    1eb0:	7823      	ldrb	r3, [r4, #0]
    1eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1eb6:	7023      	strb	r3, [r4, #0]
			break;
    1eb8:	e7e8      	b.n	1e8c <extract_conversion+0x28>
		switch (*sp) {
    1eba:	2500      	movs	r5, #0
	} while (loop);
    1ebc:	b345      	cbz	r5, 1f10 <extract_conversion+0xac>
		switch (*sp) {
    1ebe:	7833      	ldrb	r3, [r6, #0]
    1ec0:	3b20      	subs	r3, #32
    1ec2:	2b10      	cmp	r3, #16
    1ec4:	d8f9      	bhi.n	1eba <extract_conversion+0x56>
    1ec6:	a201      	add	r2, pc, #4	; (adr r2, 1ecc <extract_conversion+0x68>)
    1ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ecc:	00001e9d 	.word	0x00001e9d
    1ed0:	00001ebb 	.word	0x00001ebb
    1ed4:	00001ebb 	.word	0x00001ebb
    1ed8:	00001ea7 	.word	0x00001ea7
    1edc:	00001ebb 	.word	0x00001ebb
    1ee0:	00001ebb 	.word	0x00001ebb
    1ee4:	00001ebb 	.word	0x00001ebb
    1ee8:	00001ebb 	.word	0x00001ebb
    1eec:	00001ebb 	.word	0x00001ebb
    1ef0:	00001ebb 	.word	0x00001ebb
    1ef4:	00001ebb 	.word	0x00001ebb
    1ef8:	00001e93 	.word	0x00001e93
    1efc:	00001ebb 	.word	0x00001ebb
    1f00:	00001e85 	.word	0x00001e85
    1f04:	00001ebb 	.word	0x00001ebb
    1f08:	00001ebb 	.word	0x00001ebb
    1f0c:	00001eb1 	.word	0x00001eb1
	if (conv->flag_zero && conv->flag_dash) {
    1f10:	7823      	ldrb	r3, [r4, #0]
    1f12:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1f16:	2b44      	cmp	r3, #68	; 0x44
    1f18:	d05f      	beq.n	1fda <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1f1a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1f1c:	7823      	ldrb	r3, [r4, #0]
    1f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f22:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1f24:	7833      	ldrb	r3, [r6, #0]
    1f26:	2b2a      	cmp	r3, #42	; 0x2a
    1f28:	d05c      	beq.n	1fe4 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    1f2a:	a801      	add	r0, sp, #4
    1f2c:	f009 f9d1 	bl	b2d2 <extract_decimal>
	if (sp != wp) {
    1f30:	9b01      	ldr	r3, [sp, #4]
    1f32:	429e      	cmp	r6, r3
    1f34:	d00f      	beq.n	1f56 <extract_conversion+0xf2>
		conv->width_present = true;
    1f36:	7823      	ldrb	r3, [r4, #0]
    1f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f3c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    1f3e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1f40:	b2db      	uxtb	r3, r3
    1f42:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1f46:	2800      	cmp	r0, #0
    1f48:	db54      	blt.n	1ff4 <extract_conversion+0x190>
    1f4a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1f4c:	4313      	orrs	r3, r2
    1f4e:	7822      	ldrb	r2, [r4, #0]
    1f50:	f363 0241 	bfi	r2, r3, #1, #1
    1f54:	7022      	strb	r2, [r4, #0]
	return sp;
    1f56:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1f58:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    1f5a:	781b      	ldrb	r3, [r3, #0]
    1f5c:	2b2e      	cmp	r3, #46	; 0x2e
    1f5e:	bf14      	ite	ne
    1f60:	2300      	movne	r3, #0
    1f62:	2301      	moveq	r3, #1
    1f64:	7862      	ldrb	r2, [r4, #1]
    1f66:	f363 0241 	bfi	r2, r3, #1, #1
    1f6a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d043      	beq.n	1ff8 <extract_conversion+0x194>
	++sp;
    1f70:	9b01      	ldr	r3, [sp, #4]
    1f72:	1c5a      	adds	r2, r3, #1
    1f74:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    1f76:	785b      	ldrb	r3, [r3, #1]
    1f78:	2b2a      	cmp	r3, #42	; 0x2a
    1f7a:	d03f      	beq.n	1ffc <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1f7c:	a801      	add	r0, sp, #4
    1f7e:	f009 f9a8 	bl	b2d2 <extract_decimal>
	conv->prec_value = prec;
    1f82:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    1f84:	7823      	ldrb	r3, [r4, #0]
    1f86:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1f8a:	2800      	cmp	r0, #0
    1f8c:	db3e      	blt.n	200c <extract_conversion+0x1a8>
    1f8e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1f90:	4313      	orrs	r3, r2
    1f92:	7822      	ldrb	r2, [r4, #0]
    1f94:	f363 0241 	bfi	r2, r3, #1, #1
    1f98:	7022      	strb	r2, [r4, #0]
	return sp;
    1f9a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    1f9c:	7803      	ldrb	r3, [r0, #0]
    1f9e:	3b4c      	subs	r3, #76	; 0x4c
    1fa0:	2b2e      	cmp	r3, #46	; 0x2e
    1fa2:	f200 809d 	bhi.w	20e0 <extract_conversion+0x27c>
    1fa6:	e8df f003 	tbb	[pc, r3]
    1faa:	9b90      	.short	0x9b90
    1fac:	9b9b9b9b 	.word	0x9b9b9b9b
    1fb0:	9b9b9b9b 	.word	0x9b9b9b9b
    1fb4:	9b9b9b9b 	.word	0x9b9b9b9b
    1fb8:	9b9b9b9b 	.word	0x9b9b9b9b
    1fbc:	9b9b9b9b 	.word	0x9b9b9b9b
    1fc0:	9b9b9b9b 	.word	0x9b9b9b9b
    1fc4:	9b339b9b 	.word	0x9b339b9b
    1fc8:	9b459b57 	.word	0x9b459b57
    1fcc:	9b9b9b9b 	.word	0x9b9b9b9b
    1fd0:	9b899b9b 	.word	0x9b899b9b
    1fd4:	9b9b9b9b 	.word	0x9b9b9b9b
    1fd8:	82          	.byte	0x82
    1fd9:	00          	.byte	0x00
		conv->flag_zero = false;
    1fda:	7823      	ldrb	r3, [r4, #0]
    1fdc:	f36f 1386 	bfc	r3, #6, #1
    1fe0:	7023      	strb	r3, [r4, #0]
    1fe2:	e79a      	b.n	1f1a <extract_conversion+0xb6>
		conv->width_star = true;
    1fe4:	7863      	ldrb	r3, [r4, #1]
    1fe6:	f043 0301 	orr.w	r3, r3, #1
    1fea:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1fec:	4633      	mov	r3, r6
    1fee:	3301      	adds	r3, #1
    1ff0:	9301      	str	r3, [sp, #4]
    1ff2:	e7b1      	b.n	1f58 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1ff4:	2201      	movs	r2, #1
    1ff6:	e7a9      	b.n	1f4c <extract_conversion+0xe8>
		return sp;
    1ff8:	9801      	ldr	r0, [sp, #4]
    1ffa:	e7cf      	b.n	1f9c <extract_conversion+0x138>
		conv->prec_star = true;
    1ffc:	7863      	ldrb	r3, [r4, #1]
    1ffe:	f043 0304 	orr.w	r3, r3, #4
    2002:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2004:	4610      	mov	r0, r2
    2006:	3001      	adds	r0, #1
    2008:	9001      	str	r0, [sp, #4]
    200a:	e7c7      	b.n	1f9c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    200c:	2201      	movs	r2, #1
    200e:	e7bf      	b.n	1f90 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    2010:	1c42      	adds	r2, r0, #1
    2012:	7843      	ldrb	r3, [r0, #1]
    2014:	2b68      	cmp	r3, #104	; 0x68
    2016:	d006      	beq.n	2026 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    2018:	7863      	ldrb	r3, [r4, #1]
    201a:	2102      	movs	r1, #2
    201c:	f361 03c6 	bfi	r3, r1, #3, #4
    2020:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    2022:	4610      	mov	r0, r2
    2024:	e01e      	b.n	2064 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    2026:	7863      	ldrb	r3, [r4, #1]
    2028:	2201      	movs	r2, #1
    202a:	f362 03c6 	bfi	r3, r2, #3, #4
    202e:	7063      	strb	r3, [r4, #1]
			++sp;
    2030:	3002      	adds	r0, #2
    2032:	e017      	b.n	2064 <extract_conversion+0x200>
		if (*++sp == 'l') {
    2034:	1c42      	adds	r2, r0, #1
    2036:	7843      	ldrb	r3, [r0, #1]
    2038:	2b6c      	cmp	r3, #108	; 0x6c
    203a:	d006      	beq.n	204a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    203c:	7863      	ldrb	r3, [r4, #1]
    203e:	2103      	movs	r1, #3
    2040:	f361 03c6 	bfi	r3, r1, #3, #4
    2044:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    2046:	4610      	mov	r0, r2
    2048:	e00c      	b.n	2064 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    204a:	7863      	ldrb	r3, [r4, #1]
    204c:	2204      	movs	r2, #4
    204e:	f362 03c6 	bfi	r3, r2, #3, #4
    2052:	7063      	strb	r3, [r4, #1]
			++sp;
    2054:	3002      	adds	r0, #2
    2056:	e005      	b.n	2064 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    2058:	7863      	ldrb	r3, [r4, #1]
    205a:	2205      	movs	r2, #5
    205c:	f362 03c6 	bfi	r3, r2, #3, #4
    2060:	7063      	strb	r3, [r4, #1]
		++sp;
    2062:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    2064:	f810 3b01 	ldrb.w	r3, [r0], #1
    2068:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    206a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    206e:	2a37      	cmp	r2, #55	; 0x37
    2070:	d87d      	bhi.n	216e <extract_conversion+0x30a>
    2072:	e8df f002 	tbb	[pc, r2]
    2076:	7c5e      	.short	0x7c5e
    2078:	5e5e7c7c 	.word	0x5e5e7c7c
    207c:	7c7c7c5e 	.word	0x7c7c7c5e
    2080:	7c7c7c7c 	.word	0x7c7c7c7c
    2084:	7c7c7c7c 	.word	0x7c7c7c7c
    2088:	7c7c7c7c 	.word	0x7c7c7c7c
    208c:	7c7c4f7c 	.word	0x7c7c4f7c
    2090:	7c7c7c7c 	.word	0x7c7c7c7c
    2094:	7c5e7c7c 	.word	0x7c5e7c7c
    2098:	5e5e3a4f 	.word	0x5e5e3a4f
    209c:	7c3a7c5e 	.word	0x7c3a7c5e
    20a0:	657c7c7c 	.word	0x657c7c7c
    20a4:	7c7c714f 	.word	0x7c7c714f
    20a8:	7c4f7c71 	.word	0x7c4f7c71
    20ac:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    20ae:	7863      	ldrb	r3, [r4, #1]
    20b0:	2206      	movs	r2, #6
    20b2:	f362 03c6 	bfi	r3, r2, #3, #4
    20b6:	7063      	strb	r3, [r4, #1]
		++sp;
    20b8:	3001      	adds	r0, #1
		break;
    20ba:	e7d3      	b.n	2064 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    20bc:	7863      	ldrb	r3, [r4, #1]
    20be:	2207      	movs	r2, #7
    20c0:	f362 03c6 	bfi	r3, r2, #3, #4
    20c4:	7063      	strb	r3, [r4, #1]
		++sp;
    20c6:	3001      	adds	r0, #1
		break;
    20c8:	e7cc      	b.n	2064 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    20ca:	7863      	ldrb	r3, [r4, #1]
    20cc:	2208      	movs	r2, #8
    20ce:	f362 03c6 	bfi	r3, r2, #3, #4
    20d2:	7063      	strb	r3, [r4, #1]
		++sp;
    20d4:	3001      	adds	r0, #1
		conv->unsupported = true;
    20d6:	7823      	ldrb	r3, [r4, #0]
    20d8:	f043 0302 	orr.w	r3, r3, #2
    20dc:	7023      	strb	r3, [r4, #0]
		break;
    20de:	e7c1      	b.n	2064 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    20e0:	7863      	ldrb	r3, [r4, #1]
    20e2:	f36f 03c6 	bfc	r3, #3, #4
    20e6:	7063      	strb	r3, [r4, #1]
		break;
    20e8:	e7bc      	b.n	2064 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    20ea:	78a2      	ldrb	r2, [r4, #2]
    20ec:	2101      	movs	r1, #1
    20ee:	f361 0202 	bfi	r2, r1, #0, #3
    20f2:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    20f4:	7862      	ldrb	r2, [r4, #1]
    20f6:	f002 0278 	and.w	r2, r2, #120	; 0x78
    20fa:	2a40      	cmp	r2, #64	; 0x40
    20fc:	d010      	beq.n	2120 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    20fe:	2b63      	cmp	r3, #99	; 0x63
    2100:	d013      	beq.n	212a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    2102:	7823      	ldrb	r3, [r4, #0]
    2104:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2108:	4315      	orrs	r5, r2
    210a:	f365 0341 	bfi	r3, r5, #1, #1
    210e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    2110:	b002      	add	sp, #8
    2112:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    2114:	78a2      	ldrb	r2, [r4, #2]
    2116:	2102      	movs	r1, #2
    2118:	f361 0202 	bfi	r2, r1, #0, #3
    211c:	70a2      	strb	r2, [r4, #2]
    211e:	e7e9      	b.n	20f4 <extract_conversion+0x290>
			conv->invalid = true;
    2120:	7821      	ldrb	r1, [r4, #0]
    2122:	f041 0101 	orr.w	r1, r1, #1
    2126:	7021      	strb	r1, [r4, #0]
    2128:	e7e9      	b.n	20fe <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    212a:	1e15      	subs	r5, r2, #0
    212c:	bf18      	it	ne
    212e:	2501      	movne	r5, #1
    2130:	e7e7      	b.n	2102 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    2132:	78a3      	ldrb	r3, [r4, #2]
    2134:	2204      	movs	r2, #4
    2136:	f362 0302 	bfi	r3, r2, #0, #3
    213a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    213c:	2501      	movs	r5, #1
			break;
    213e:	e7e0      	b.n	2102 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2140:	78a3      	ldrb	r3, [r4, #2]
    2142:	2203      	movs	r2, #3
    2144:	f362 0302 	bfi	r3, r2, #0, #3
    2148:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    214a:	7863      	ldrb	r3, [r4, #1]
    214c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2150:	2b40      	cmp	r3, #64	; 0x40
    2152:	d1d6      	bne.n	2102 <extract_conversion+0x29e>
			unsupported = true;
    2154:	2501      	movs	r5, #1
    2156:	e7d4      	b.n	2102 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2158:	78a3      	ldrb	r3, [r4, #2]
    215a:	2203      	movs	r2, #3
    215c:	f362 0302 	bfi	r3, r2, #0, #3
    2160:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    2162:	7863      	ldrb	r3, [r4, #1]
    2164:	f013 0f78 	tst.w	r3, #120	; 0x78
    2168:	d0cb      	beq.n	2102 <extract_conversion+0x29e>
			unsupported = true;
    216a:	2501      	movs	r5, #1
    216c:	e7c9      	b.n	2102 <extract_conversion+0x29e>
		conv->invalid = true;
    216e:	7823      	ldrb	r3, [r4, #0]
    2170:	f043 0301 	orr.w	r3, r3, #1
    2174:	7023      	strb	r3, [r4, #0]
		break;
    2176:	e7c4      	b.n	2102 <extract_conversion+0x29e>

00002178 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    217c:	b091      	sub	sp, #68	; 0x44
    217e:	4606      	mov	r6, r0
    2180:	460d      	mov	r5, r1
    2182:	4691      	mov	r9, r2
    2184:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2186:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2188:	f899 0000 	ldrb.w	r0, [r9]
    218c:	2800      	cmp	r0, #0
    218e:	f000 82d5 	beq.w	273c <cbvprintf+0x5c4>
		if (*fp != '%') {
    2192:	2825      	cmp	r0, #37	; 0x25
    2194:	d008      	beq.n	21a8 <cbvprintf+0x30>
			OUTC(*fp++);
    2196:	f109 0901 	add.w	r9, r9, #1
    219a:	4629      	mov	r1, r5
    219c:	47b0      	blx	r6
    219e:	2800      	cmp	r0, #0
    21a0:	f2c0 82cd 	blt.w	273e <cbvprintf+0x5c6>
    21a4:	3401      	adds	r4, #1
			continue;
    21a6:	e7ef      	b.n	2188 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    21a8:	2300      	movs	r3, #0
    21aa:	9304      	str	r3, [sp, #16]
    21ac:	9305      	str	r3, [sp, #20]
    21ae:	9306      	str	r3, [sp, #24]
    21b0:	9307      	str	r3, [sp, #28]
    21b2:	9308      	str	r3, [sp, #32]
    21b4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    21b6:	4649      	mov	r1, r9
    21b8:	a806      	add	r0, sp, #24
    21ba:	f7ff fe53 	bl	1e64 <extract_conversion>
    21be:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    21c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    21c4:	f013 0f01 	tst.w	r3, #1
    21c8:	f000 8097 	beq.w	22fa <cbvprintf+0x182>
			width = va_arg(ap, int);
    21cc:	9b03      	ldr	r3, [sp, #12]
    21ce:	1d1a      	adds	r2, r3, #4
    21d0:	9203      	str	r2, [sp, #12]
    21d2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    21d4:	2f00      	cmp	r7, #0
    21d6:	f2c0 8088 	blt.w	22ea <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    21da:	f89d 3019 	ldrb.w	r3, [sp, #25]
    21de:	f013 0f04 	tst.w	r3, #4
    21e2:	f000 809c 	beq.w	231e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    21e6:	9b03      	ldr	r3, [sp, #12]
    21e8:	1d1a      	adds	r2, r3, #4
    21ea:	9203      	str	r2, [sp, #12]
    21ec:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    21f0:	f1ba 0f00 	cmp.w	sl, #0
    21f4:	f2c0 808a 	blt.w	230c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    21f8:	2300      	movs	r3, #0
    21fa:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    21fc:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    21fe:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2202:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2206:	f89d 1019 	ldrb.w	r1, [sp, #25]
    220a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    220e:	2b01      	cmp	r3, #1
    2210:	f000 808e 	beq.w	2330 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2214:	2b02      	cmp	r3, #2
    2216:	f000 80d3 	beq.w	23c0 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    221a:	2b04      	cmp	r3, #4
    221c:	f000 8124 	beq.w	2468 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2220:	2b03      	cmp	r3, #3
    2222:	f000 813b 	beq.w	249c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2226:	f89d 8018 	ldrb.w	r8, [sp, #24]
    222a:	f018 0b03 	ands.w	fp, r8, #3
    222e:	f040 813b 	bne.w	24a8 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2232:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2236:	3b25      	subs	r3, #37	; 0x25
    2238:	2b53      	cmp	r3, #83	; 0x53
    223a:	f200 81e6 	bhi.w	260a <cbvprintf+0x492>
    223e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2242:	0140      	.short	0x0140
    2244:	01e401e4 	.word	0x01e401e4
    2248:	01e401e4 	.word	0x01e401e4
    224c:	01e401e4 	.word	0x01e401e4
    2250:	01e401e4 	.word	0x01e401e4
    2254:	01e401e4 	.word	0x01e401e4
    2258:	01e401e4 	.word	0x01e401e4
    225c:	01e401e4 	.word	0x01e401e4
    2260:	01e401e4 	.word	0x01e401e4
    2264:	01e401e4 	.word	0x01e401e4
    2268:	01e401e4 	.word	0x01e401e4
    226c:	01e401e4 	.word	0x01e401e4
    2270:	01e401e4 	.word	0x01e401e4
    2274:	01e401e4 	.word	0x01e401e4
    2278:	01e401e4 	.word	0x01e401e4
    227c:	01e401e4 	.word	0x01e401e4
    2280:	01e401e4 	.word	0x01e401e4
    2284:	01e401e4 	.word	0x01e401e4
    2288:	01e401e4 	.word	0x01e401e4
    228c:	01e401e4 	.word	0x01e401e4
    2290:	01e401e4 	.word	0x01e401e4
    2294:	01e401e4 	.word	0x01e401e4
    2298:	01e401e4 	.word	0x01e401e4
    229c:	01e401e4 	.word	0x01e401e4
    22a0:	01e401e4 	.word	0x01e401e4
    22a4:	01e401e4 	.word	0x01e401e4
    22a8:	01e40181 	.word	0x01e40181
    22ac:	01e401e4 	.word	0x01e401e4
    22b0:	01e401e4 	.word	0x01e401e4
    22b4:	01e401e4 	.word	0x01e401e4
    22b8:	01e401e4 	.word	0x01e401e4
    22bc:	015e01e4 	.word	0x015e01e4
    22c0:	01e40167 	.word	0x01e40167
    22c4:	01e401e4 	.word	0x01e401e4
    22c8:	016701e4 	.word	0x016701e4
    22cc:	01e401e4 	.word	0x01e401e4
    22d0:	01e401e4 	.word	0x01e401e4
    22d4:	018101be 	.word	0x018101be
    22d8:	01e401a2 	.word	0x01e401a2
    22dc:	014d01e4 	.word	0x014d01e4
    22e0:	018101e4 	.word	0x018101e4
    22e4:	01e401e4 	.word	0x01e401e4
    22e8:	0181      	.short	0x0181
				conv->flag_dash = true;
    22ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
    22ee:	f043 0304 	orr.w	r3, r3, #4
    22f2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    22f6:	427f      	negs	r7, r7
    22f8:	e76f      	b.n	21da <cbvprintf+0x62>
		} else if (conv->width_present) {
    22fa:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    22fe:	2b00      	cmp	r3, #0
    2300:	db02      	blt.n	2308 <cbvprintf+0x190>
		int width = -1;
    2302:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    2306:	e768      	b.n	21da <cbvprintf+0x62>
			width = conv->width_value;
    2308:	9f07      	ldr	r7, [sp, #28]
    230a:	e766      	b.n	21da <cbvprintf+0x62>
				conv->prec_present = false;
    230c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2310:	f36f 0341 	bfc	r3, #1, #1
    2314:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    2318:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    231c:	e76c      	b.n	21f8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    231e:	f013 0f02 	tst.w	r3, #2
    2322:	d002      	beq.n	232a <cbvprintf+0x1b2>
			precision = conv->prec_value;
    2324:	f8dd a020 	ldr.w	sl, [sp, #32]
    2328:	e766      	b.n	21f8 <cbvprintf+0x80>
		int precision = -1;
    232a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    232e:	e763      	b.n	21f8 <cbvprintf+0x80>
			switch (length_mod) {
    2330:	1ecb      	subs	r3, r1, #3
    2332:	2b04      	cmp	r3, #4
    2334:	d804      	bhi.n	2340 <cbvprintf+0x1c8>
    2336:	e8df f003 	tbb	[pc, r3]
    233a:	1d0b      	.short	0x1d0b
    233c:	3529      	.short	0x3529
    233e:	35          	.byte	0x35
    233f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2340:	9b03      	ldr	r3, [sp, #12]
    2342:	1d1a      	adds	r2, r3, #4
    2344:	9203      	str	r2, [sp, #12]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	17da      	asrs	r2, r3, #31
    234a:	9304      	str	r3, [sp, #16]
    234c:	9205      	str	r2, [sp, #20]
				break;
    234e:	e006      	b.n	235e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    2350:	9b03      	ldr	r3, [sp, #12]
    2352:	1d1a      	adds	r2, r3, #4
    2354:	9203      	str	r2, [sp, #12]
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	17da      	asrs	r2, r3, #31
    235a:	9304      	str	r3, [sp, #16]
    235c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    235e:	2901      	cmp	r1, #1
    2360:	d028      	beq.n	23b4 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    2362:	2902      	cmp	r1, #2
    2364:	f47f af5f 	bne.w	2226 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    2368:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    236c:	17da      	asrs	r2, r3, #31
    236e:	9304      	str	r3, [sp, #16]
    2370:	9205      	str	r2, [sp, #20]
    2372:	e758      	b.n	2226 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    2374:	9b03      	ldr	r3, [sp, #12]
    2376:	3307      	adds	r3, #7
    2378:	f023 0307 	bic.w	r3, r3, #7
    237c:	f103 0208 	add.w	r2, r3, #8
    2380:	9203      	str	r2, [sp, #12]
    2382:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2386:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    238a:	e7e8      	b.n	235e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    238c:	9b03      	ldr	r3, [sp, #12]
    238e:	3307      	adds	r3, #7
    2390:	f023 0307 	bic.w	r3, r3, #7
    2394:	f103 0208 	add.w	r2, r3, #8
    2398:	9203      	str	r2, [sp, #12]
    239a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    239e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    23a2:	e7dc      	b.n	235e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    23a4:	9b03      	ldr	r3, [sp, #12]
    23a6:	1d1a      	adds	r2, r3, #4
    23a8:	9203      	str	r2, [sp, #12]
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	17da      	asrs	r2, r3, #31
				value->sint =
    23ae:	9304      	str	r3, [sp, #16]
    23b0:	9205      	str	r2, [sp, #20]
				break;
    23b2:	e7d4      	b.n	235e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    23b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    23b8:	9304      	str	r3, [sp, #16]
    23ba:	2300      	movs	r3, #0
    23bc:	9305      	str	r3, [sp, #20]
    23be:	e732      	b.n	2226 <cbvprintf+0xae>
			switch (length_mod) {
    23c0:	1ecb      	subs	r3, r1, #3
    23c2:	2b04      	cmp	r3, #4
    23c4:	d804      	bhi.n	23d0 <cbvprintf+0x258>
    23c6:	e8df f003 	tbb	[pc, r3]
    23ca:	1f0b      	.short	0x1f0b
    23cc:	4135      	.short	0x4135
    23ce:	41          	.byte	0x41
    23cf:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    23d0:	9b03      	ldr	r3, [sp, #12]
    23d2:	1d1a      	adds	r2, r3, #4
    23d4:	9203      	str	r2, [sp, #12]
    23d6:	681b      	ldr	r3, [r3, #0]
    23d8:	9304      	str	r3, [sp, #16]
    23da:	2300      	movs	r3, #0
    23dc:	9305      	str	r3, [sp, #20]
				break;
    23de:	e01e      	b.n	241e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    23e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    23e4:	2b63      	cmp	r3, #99	; 0x63
    23e6:	d007      	beq.n	23f8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    23e8:	9b03      	ldr	r3, [sp, #12]
    23ea:	1d1a      	adds	r2, r3, #4
    23ec:	9203      	str	r2, [sp, #12]
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	9304      	str	r3, [sp, #16]
    23f2:	2300      	movs	r3, #0
    23f4:	9305      	str	r3, [sp, #20]
    23f6:	e012      	b.n	241e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    23f8:	9b03      	ldr	r3, [sp, #12]
    23fa:	1d1a      	adds	r2, r3, #4
    23fc:	9203      	str	r2, [sp, #12]
    23fe:	681b      	ldr	r3, [r3, #0]
    2400:	9304      	str	r3, [sp, #16]
    2402:	2300      	movs	r3, #0
    2404:	9305      	str	r3, [sp, #20]
    2406:	e00a      	b.n	241e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    2408:	9b03      	ldr	r3, [sp, #12]
    240a:	3307      	adds	r3, #7
    240c:	f023 0307 	bic.w	r3, r3, #7
    2410:	f103 0208 	add.w	r2, r3, #8
    2414:	9203      	str	r2, [sp, #12]
    2416:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    241a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    241e:	2901      	cmp	r1, #1
    2420:	d01c      	beq.n	245c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    2422:	2902      	cmp	r1, #2
    2424:	f47f aeff 	bne.w	2226 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    2428:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    242c:	9304      	str	r3, [sp, #16]
    242e:	2300      	movs	r3, #0
    2430:	9305      	str	r3, [sp, #20]
    2432:	e6f8      	b.n	2226 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    2434:	9b03      	ldr	r3, [sp, #12]
    2436:	3307      	adds	r3, #7
    2438:	f023 0307 	bic.w	r3, r3, #7
    243c:	f103 0208 	add.w	r2, r3, #8
    2440:	9203      	str	r2, [sp, #12]
    2442:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2446:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    244a:	e7e8      	b.n	241e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    244c:	9b03      	ldr	r3, [sp, #12]
    244e:	1d1a      	adds	r2, r3, #4
    2450:	9203      	str	r2, [sp, #12]
    2452:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2454:	9304      	str	r3, [sp, #16]
    2456:	2300      	movs	r3, #0
    2458:	9305      	str	r3, [sp, #20]
				break;
    245a:	e7e0      	b.n	241e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    245c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2460:	9304      	str	r3, [sp, #16]
    2462:	2300      	movs	r3, #0
    2464:	9305      	str	r3, [sp, #20]
    2466:	e6de      	b.n	2226 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    2468:	2908      	cmp	r1, #8
    246a:	d00b      	beq.n	2484 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    246c:	9b03      	ldr	r3, [sp, #12]
    246e:	3307      	adds	r3, #7
    2470:	f023 0307 	bic.w	r3, r3, #7
    2474:	f103 0208 	add.w	r2, r3, #8
    2478:	9203      	str	r2, [sp, #12]
    247a:	e9d3 2300 	ldrd	r2, r3, [r3]
    247e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2482:	e6d0      	b.n	2226 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    2484:	9b03      	ldr	r3, [sp, #12]
    2486:	3307      	adds	r3, #7
    2488:	f023 0307 	bic.w	r3, r3, #7
    248c:	f103 0208 	add.w	r2, r3, #8
    2490:	9203      	str	r2, [sp, #12]
    2492:	e9d3 2300 	ldrd	r2, r3, [r3]
    2496:	e9cd 2304 	strd	r2, r3, [sp, #16]
    249a:	e6c4      	b.n	2226 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    249c:	9b03      	ldr	r3, [sp, #12]
    249e:	1d1a      	adds	r2, r3, #4
    24a0:	9203      	str	r2, [sp, #12]
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	9304      	str	r3, [sp, #16]
    24a6:	e6be      	b.n	2226 <cbvprintf+0xae>
			OUTS(sp, fp);
    24a8:	9f02      	ldr	r7, [sp, #8]
    24aa:	463b      	mov	r3, r7
    24ac:	464a      	mov	r2, r9
    24ae:	4629      	mov	r1, r5
    24b0:	4630      	mov	r0, r6
    24b2:	f008 ff8a 	bl	b3ca <outs>
    24b6:	2800      	cmp	r0, #0
    24b8:	f2c0 8141 	blt.w	273e <cbvprintf+0x5c6>
    24bc:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    24be:	46b9      	mov	r9, r7
			continue;
    24c0:	e662      	b.n	2188 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    24c2:	4629      	mov	r1, r5
    24c4:	2025      	movs	r0, #37	; 0x25
    24c6:	47b0      	blx	r6
    24c8:	2800      	cmp	r0, #0
    24ca:	f2c0 8138 	blt.w	273e <cbvprintf+0x5c6>
    24ce:	3401      	adds	r4, #1
		char sign = 0;
    24d0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    24d2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    24d6:	f04f 0900 	mov.w	r9, #0
			break;
    24da:	e09b      	b.n	2614 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    24dc:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    24e0:	f1ba 0f00 	cmp.w	sl, #0
    24e4:	db07      	blt.n	24f6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    24e6:	4651      	mov	r1, sl
    24e8:	4648      	mov	r0, r9
    24ea:	f009 f912 	bl	b712 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    24ee:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    24f2:	46d8      	mov	r8, fp
			precision = -1;

			break;
    24f4:	e08e      	b.n	2614 <cbvprintf+0x49c>
				len = strlen(bps);
    24f6:	4648      	mov	r0, r9
    24f8:	f009 f902 	bl	b700 <strlen>
    24fc:	e7f7      	b.n	24ee <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    24fe:	9b04      	ldr	r3, [sp, #16]
    2500:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2504:	46d8      	mov	r8, fp
			bpe = buf + 1;
    2506:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    250a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    250e:	e081      	b.n	2614 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2510:	f018 0f08 	tst.w	r8, #8
    2514:	d105      	bne.n	2522 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    2516:	f018 0810 	ands.w	r8, r8, #16
    251a:	d004      	beq.n	2526 <cbvprintf+0x3ae>
				sign = ' ';
    251c:	f04f 0820 	mov.w	r8, #32
    2520:	e001      	b.n	2526 <cbvprintf+0x3ae>
				sign = '+';
    2522:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2526:	9a04      	ldr	r2, [sp, #16]
    2528:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    252a:	2b00      	cmp	r3, #0
    252c:	db02      	blt.n	2534 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    252e:	9204      	str	r2, [sp, #16]
    2530:	9305      	str	r3, [sp, #20]
    2532:	e008      	b.n	2546 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    2534:	4252      	negs	r2, r2
    2536:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    253a:	9204      	str	r2, [sp, #16]
    253c:	9305      	str	r3, [sp, #20]
				sign = '-';
    253e:	f04f 082d 	mov.w	r8, #45	; 0x2d
    2542:	e000      	b.n	2546 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    2544:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2546:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    254a:	9300      	str	r3, [sp, #0]
    254c:	ab0a      	add	r3, sp, #40	; 0x28
    254e:	aa06      	add	r2, sp, #24
    2550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2554:	f008 fecf 	bl	b2f6 <encode_uint>
    2558:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    255a:	f1ba 0f00 	cmp.w	sl, #0
    255e:	f2c0 8088 	blt.w	2672 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    2562:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2566:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    256a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    256e:	f36f 1286 	bfc	r2, #6, #1
    2572:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2576:	459a      	cmp	sl, r3
    2578:	d97e      	bls.n	2678 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    257a:	ebaa 0303 	sub.w	r3, sl, r3
    257e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    2580:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2584:	e046      	b.n	2614 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2586:	9804      	ldr	r0, [sp, #16]
    2588:	b928      	cbnz	r0, 2596 <cbvprintf+0x41e>
		char sign = 0;
    258a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    258c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 2744 <cbvprintf+0x5cc>
			bps = "(nil)";
    2590:	f1aa 0905 	sub.w	r9, sl, #5
    2594:	e03e      	b.n	2614 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2596:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    259a:	9300      	str	r3, [sp, #0]
    259c:	ab0a      	add	r3, sp, #40	; 0x28
    259e:	aa06      	add	r2, sp, #24
    25a0:	2100      	movs	r1, #0
    25a2:	f008 fea8 	bl	b2f6 <encode_uint>
    25a6:	4681      	mov	r9, r0
				conv->altform_0c = true;
    25a8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    25ac:	f043 0310 	orr.w	r3, r3, #16
    25b0:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    25b4:	2378      	movs	r3, #120	; 0x78
    25b6:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    25ba:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    25bc:	e7cd      	b.n	255a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    25be:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    25c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    25c4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    25c8:	2b07      	cmp	r3, #7
    25ca:	d806      	bhi.n	25da <cbvprintf+0x462>
    25cc:	e8df f003 	tbb	[pc, r3]
    25d0:	0f0d0b04 	.word	0x0f0d0b04
    25d4:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    25d8:	6014      	str	r4, [r2, #0]
		char sign = 0;
    25da:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    25dc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    25e0:	f04f 0900 	mov.w	r9, #0
}
    25e4:	e016      	b.n	2614 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    25e6:	7014      	strb	r4, [r2, #0]
		break;
    25e8:	e7f7      	b.n	25da <cbvprintf+0x462>
		*(short *)dp = (short)count;
    25ea:	8014      	strh	r4, [r2, #0]
		break;
    25ec:	e7f5      	b.n	25da <cbvprintf+0x462>
		*(long *)dp = (long)count;
    25ee:	6014      	str	r4, [r2, #0]
		break;
    25f0:	e7f3      	b.n	25da <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    25f2:	17e3      	asrs	r3, r4, #31
    25f4:	6014      	str	r4, [r2, #0]
    25f6:	6053      	str	r3, [r2, #4]
		break;
    25f8:	e7ef      	b.n	25da <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    25fa:	17e3      	asrs	r3, r4, #31
    25fc:	6014      	str	r4, [r2, #0]
    25fe:	6053      	str	r3, [r2, #4]
		break;
    2600:	e7eb      	b.n	25da <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    2602:	6014      	str	r4, [r2, #0]
		break;
    2604:	e7e9      	b.n	25da <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2606:	6014      	str	r4, [r2, #0]
		break;
    2608:	e7e7      	b.n	25da <cbvprintf+0x462>
		switch (conv->specifier) {
    260a:	46d8      	mov	r8, fp
    260c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2610:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2614:	f1b9 0f00 	cmp.w	r9, #0
    2618:	f000 808d 	beq.w	2736 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    261c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    2620:	f1b8 0f00 	cmp.w	r8, #0
    2624:	d000      	beq.n	2628 <cbvprintf+0x4b0>
			nj_len += 1U;
    2626:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    2628:	f89d 201a 	ldrb.w	r2, [sp, #26]
    262c:	f012 0f10 	tst.w	r2, #16
    2630:	d025      	beq.n	267e <cbvprintf+0x506>
			nj_len += 2U;
    2632:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2634:	9907      	ldr	r1, [sp, #28]
    2636:	440b      	add	r3, r1
		if (conv->pad_fp) {
    2638:	f012 0f40 	tst.w	r2, #64	; 0x40
    263c:	d001      	beq.n	2642 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    263e:	9a08      	ldr	r2, [sp, #32]
    2640:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2642:	2f00      	cmp	r7, #0
    2644:	dd31      	ble.n	26aa <cbvprintf+0x532>
			width -= (int)nj_len;
    2646:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2648:	f89d 3018 	ldrb.w	r3, [sp, #24]
    264c:	f013 0f04 	tst.w	r3, #4
    2650:	d12b      	bne.n	26aa <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2652:	f013 0f40 	tst.w	r3, #64	; 0x40
    2656:	d017      	beq.n	2688 <cbvprintf+0x510>
					if (sign != 0) {
    2658:	f1b8 0f00 	cmp.w	r8, #0
    265c:	d017      	beq.n	268e <cbvprintf+0x516>
						OUTC(sign);
    265e:	4629      	mov	r1, r5
    2660:	4640      	mov	r0, r8
    2662:	47b0      	blx	r6
    2664:	2800      	cmp	r0, #0
    2666:	db6a      	blt.n	273e <cbvprintf+0x5c6>
    2668:	3401      	adds	r4, #1
						sign = 0;
    266a:	46d8      	mov	r8, fp
					}
					pad = '0';
    266c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2670:	e00f      	b.n	2692 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    2672:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2676:	e7cd      	b.n	2614 <cbvprintf+0x49c>
    2678:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    267c:	e7ca      	b.n	2614 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    267e:	f012 0f08 	tst.w	r2, #8
    2682:	d0d7      	beq.n	2634 <cbvprintf+0x4bc>
			nj_len += 1U;
    2684:	3301      	adds	r3, #1
    2686:	e7d5      	b.n	2634 <cbvprintf+0x4bc>
				char pad = ' ';
    2688:	f04f 0b20 	mov.w	fp, #32
    268c:	e001      	b.n	2692 <cbvprintf+0x51a>
					pad = '0';
    268e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2692:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2694:	1e5f      	subs	r7, r3, #1
    2696:	2b00      	cmp	r3, #0
    2698:	dd07      	ble.n	26aa <cbvprintf+0x532>
					OUTC(pad);
    269a:	4629      	mov	r1, r5
    269c:	4658      	mov	r0, fp
    269e:	47b0      	blx	r6
    26a0:	2800      	cmp	r0, #0
    26a2:	db4c      	blt.n	273e <cbvprintf+0x5c6>
    26a4:	3401      	adds	r4, #1
				while (width-- > 0) {
    26a6:	463b      	mov	r3, r7
    26a8:	e7f4      	b.n	2694 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    26aa:	f1b8 0f00 	cmp.w	r8, #0
    26ae:	d005      	beq.n	26bc <cbvprintf+0x544>
			OUTC(sign);
    26b0:	4629      	mov	r1, r5
    26b2:	4640      	mov	r0, r8
    26b4:	47b0      	blx	r6
    26b6:	2800      	cmp	r0, #0
    26b8:	db41      	blt.n	273e <cbvprintf+0x5c6>
    26ba:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    26bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    26c0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    26c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    26c8:	4313      	orrs	r3, r2
    26ca:	d005      	beq.n	26d8 <cbvprintf+0x560>
				OUTC('0');
    26cc:	4629      	mov	r1, r5
    26ce:	2030      	movs	r0, #48	; 0x30
    26d0:	47b0      	blx	r6
    26d2:	2800      	cmp	r0, #0
    26d4:	db33      	blt.n	273e <cbvprintf+0x5c6>
    26d6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    26d8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    26dc:	f013 0f10 	tst.w	r3, #16
    26e0:	d006      	beq.n	26f0 <cbvprintf+0x578>
				OUTC(conv->specifier);
    26e2:	4629      	mov	r1, r5
    26e4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    26e8:	47b0      	blx	r6
    26ea:	2800      	cmp	r0, #0
    26ec:	db27      	blt.n	273e <cbvprintf+0x5c6>
    26ee:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    26f0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    26f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    26f6:	2b00      	cmp	r3, #0
    26f8:	dd07      	ble.n	270a <cbvprintf+0x592>
				OUTC('0');
    26fa:	4629      	mov	r1, r5
    26fc:	2030      	movs	r0, #48	; 0x30
    26fe:	47b0      	blx	r6
    2700:	2800      	cmp	r0, #0
    2702:	db1c      	blt.n	273e <cbvprintf+0x5c6>
    2704:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2706:	4643      	mov	r3, r8
    2708:	e7f3      	b.n	26f2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    270a:	4653      	mov	r3, sl
    270c:	464a      	mov	r2, r9
    270e:	4629      	mov	r1, r5
    2710:	4630      	mov	r0, r6
    2712:	f008 fe5a 	bl	b3ca <outs>
    2716:	2800      	cmp	r0, #0
    2718:	db11      	blt.n	273e <cbvprintf+0x5c6>
    271a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    271c:	2f00      	cmp	r7, #0
    271e:	dd07      	ble.n	2730 <cbvprintf+0x5b8>
			OUTC(' ');
    2720:	4629      	mov	r1, r5
    2722:	2020      	movs	r0, #32
    2724:	47b0      	blx	r6
    2726:	2800      	cmp	r0, #0
    2728:	db09      	blt.n	273e <cbvprintf+0x5c6>
    272a:	3401      	adds	r4, #1
			--width;
    272c:	3f01      	subs	r7, #1
    272e:	e7f5      	b.n	271c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    2730:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2734:	e528      	b.n	2188 <cbvprintf+0x10>
    2736:	f8dd 9008 	ldr.w	r9, [sp, #8]
    273a:	e525      	b.n	2188 <cbvprintf+0x10>
		}
	}

	return count;
    273c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    273e:	b011      	add	sp, #68	; 0x44
    2740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2744:	0000d1e1 	.word	0x0000d1e1

00002748 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2748:	b508      	push	{r3, lr}
	__asm__ volatile(
    274a:	f04f 0220 	mov.w	r2, #32
    274e:	f3ef 8311 	mrs	r3, BASEPRI
    2752:	f382 8812 	msr	BASEPRI_MAX, r2
    2756:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    275a:	f001 ff27 	bl	45ac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    275e:	4803      	ldr	r0, [pc, #12]	; (276c <sys_reboot+0x24>)
    2760:	f008 fccf 	bl	b102 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2764:	f000 ffa0 	bl	36a8 <arch_cpu_idle>
    2768:	e7fc      	b.n	2764 <sys_reboot+0x1c>
    276a:	bf00      	nop
    276c:	0000d1e4 	.word	0x0000d1e4

00002770 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    2770:	2900      	cmp	r1, #0
    2772:	d150      	bne.n	2816 <msg_process+0xa6>
{
    2774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2778:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    277a:	2400      	movs	r4, #0
    277c:	e022      	b.n	27c4 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    277e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2818 <msg_process+0xa8>
    2782:	f44f 7399 	mov.w	r3, #306	; 0x132
    2786:	464a      	mov	r2, r9
    2788:	4924      	ldr	r1, [pc, #144]	; (281c <msg_process+0xac>)
    278a:	4825      	ldr	r0, [pc, #148]	; (2820 <msg_process+0xb0>)
    278c:	f008 fe3e 	bl	b40c <assert_print>
    2790:	f44f 7199 	mov.w	r1, #306	; 0x132
    2794:	4648      	mov	r0, r9
    2796:	f008 fe32 	bl	b3fe <assert_post_action>
    279a:	e01f      	b.n	27dc <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    279c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2818 <msg_process+0xa8>
    27a0:	2385      	movs	r3, #133	; 0x85
    27a2:	464a      	mov	r2, r9
    27a4:	491d      	ldr	r1, [pc, #116]	; (281c <msg_process+0xac>)
    27a6:	481e      	ldr	r0, [pc, #120]	; (2820 <msg_process+0xb0>)
    27a8:	f008 fe30 	bl	b40c <assert_print>
    27ac:	2185      	movs	r1, #133	; 0x85
    27ae:	4648      	mov	r0, r9
    27b0:	f008 fe25 	bl	b3fe <assert_post_action>
    27b4:	e01e      	b.n	27f4 <msg_process+0x84>
	backend->api->process(backend, msg);
    27b6:	f858 3005 	ldr.w	r3, [r8, r5]
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	4639      	mov	r1, r7
    27be:	4630      	mov	r0, r6
    27c0:	4798      	blx	r3
    27c2:	3401      	adds	r4, #1
    27c4:	4b17      	ldr	r3, [pc, #92]	; (2824 <msg_process+0xb4>)
    27c6:	4a18      	ldr	r2, [pc, #96]	; (2828 <msg_process+0xb8>)
    27c8:	1a9b      	subs	r3, r3, r2
    27ca:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    27ce:	da20      	bge.n	2812 <msg_process+0xa2>
	return &__log_backends_start[idx];
    27d0:	ea4f 1804 	mov.w	r8, r4, lsl #4
    27d4:	4d14      	ldr	r5, [pc, #80]	; (2828 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    27d6:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    27da:	d0d0      	beq.n	277e <msg_process+0xe>
	return backend->cb->active;
    27dc:	6873      	ldr	r3, [r6, #4]
    27de:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    27e0:	2b00      	cmp	r3, #0
    27e2:	d0ee      	beq.n	27c2 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    27e4:	4639      	mov	r1, r7
    27e6:	4630      	mov	r0, r6
    27e8:	f008 fe21 	bl	b42e <msg_filter_check>
			if (log_backend_is_active(backend) &&
    27ec:	2800      	cmp	r0, #0
    27ee:	d0e8      	beq.n	27c2 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    27f0:	2e00      	cmp	r6, #0
    27f2:	d0d3      	beq.n	279c <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    27f4:	2f00      	cmp	r7, #0
    27f6:	d1de      	bne.n	27b6 <msg_process+0x46>
    27f8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 2818 <msg_process+0xa8>
    27fc:	2386      	movs	r3, #134	; 0x86
    27fe:	464a      	mov	r2, r9
    2800:	490a      	ldr	r1, [pc, #40]	; (282c <msg_process+0xbc>)
    2802:	4807      	ldr	r0, [pc, #28]	; (2820 <msg_process+0xb0>)
    2804:	f008 fe02 	bl	b40c <assert_print>
    2808:	2186      	movs	r1, #134	; 0x86
    280a:	4648      	mov	r0, r9
    280c:	f008 fdf7 	bl	b3fe <assert_post_action>
    2810:	e7d1      	b.n	27b6 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2816:	4770      	bx	lr
    2818:	0000d210 	.word	0x0000d210
    281c:	0000d248 	.word	0x0000d248
    2820:	0000c8bc 	.word	0x0000c8bc
    2824:	0000c664 	.word	0x0000c664
    2828:	0000c644 	.word	0x0000c644
    282c:	0000d260 	.word	0x0000d260

00002830 <log_format_func_t_get>:
}
    2830:	4b01      	ldr	r3, [pc, #4]	; (2838 <log_format_func_t_get+0x8>)
    2832:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2836:	4770      	bx	lr
    2838:	0000d2e4 	.word	0x0000d2e4

0000283c <log_init>:
{
    283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    283e:	4b20      	ldr	r3, [pc, #128]	; (28c0 <log_init+0x84>)
    2840:	4a20      	ldr	r2, [pc, #128]	; (28c4 <log_init+0x88>)
    2842:	1a9b      	subs	r3, r3, r2
    2844:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2846:	2b90      	cmp	r3, #144	; 0x90
    2848:	d80e      	bhi.n	2868 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    284a:	4b1f      	ldr	r3, [pc, #124]	; (28c8 <log_init+0x8c>)
    284c:	f3bf 8f5b 	dmb	ish
    2850:	e853 2f00 	ldrex	r2, [r3]
    2854:	1c51      	adds	r1, r2, #1
    2856:	e843 1000 	strex	r0, r1, [r3]
    285a:	2800      	cmp	r0, #0
    285c:	d1f8      	bne.n	2850 <log_init+0x14>
    285e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2862:	bb5a      	cbnz	r2, 28bc <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    2864:	2400      	movs	r4, #0
    2866:	e017      	b.n	2898 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2868:	4c18      	ldr	r4, [pc, #96]	; (28cc <log_init+0x90>)
    286a:	f240 2373 	movw	r3, #627	; 0x273
    286e:	4622      	mov	r2, r4
    2870:	4917      	ldr	r1, [pc, #92]	; (28d0 <log_init+0x94>)
    2872:	4818      	ldr	r0, [pc, #96]	; (28d4 <log_init+0x98>)
    2874:	f008 fdca 	bl	b40c <assert_print>
    2878:	f240 2173 	movw	r1, #627	; 0x273
    287c:	4620      	mov	r0, r4
    287e:	f008 fdbe 	bl	b3fe <assert_post_action>
    2882:	e7e2      	b.n	284a <log_init+0xe>
					   backend->cb->ctx,
    2884:	4b0f      	ldr	r3, [pc, #60]	; (28c4 <log_init+0x88>)
    2886:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    288a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    288c:	2204      	movs	r2, #4
    288e:	6819      	ldr	r1, [r3, #0]
    2890:	4628      	mov	r0, r5
    2892:	f000 f8d3 	bl	2a3c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2896:	3401      	adds	r4, #1
    2898:	42b4      	cmp	r4, r6
    289a:	da0f      	bge.n	28bc <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    289c:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    289e:	4d09      	ldr	r5, [pc, #36]	; (28c4 <log_init+0x88>)
    28a0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    28a4:	7b2b      	ldrb	r3, [r5, #12]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d0f5      	beq.n	2896 <log_init+0x5a>
			if (backend->api->init != NULL) {
    28aa:	0123      	lsls	r3, r4, #4
    28ac:	4a05      	ldr	r2, [pc, #20]	; (28c4 <log_init+0x88>)
    28ae:	58d3      	ldr	r3, [r2, r3]
    28b0:	699b      	ldr	r3, [r3, #24]
    28b2:	2b00      	cmp	r3, #0
    28b4:	d0e6      	beq.n	2884 <log_init+0x48>
				backend->api->init(backend);
    28b6:	4628      	mov	r0, r5
    28b8:	4798      	blx	r3
    28ba:	e7e3      	b.n	2884 <log_init+0x48>
}
    28bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28be:	bf00      	nop
    28c0:	0000c664 	.word	0x0000c664
    28c4:	0000c644 	.word	0x0000c644
    28c8:	20000630 	.word	0x20000630
    28cc:	0000d274 	.word	0x0000d274
    28d0:	0000d2bc 	.word	0x0000d2bc
    28d4:	0000c8bc 	.word	0x0000c8bc

000028d8 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    28d8:	b138      	cbz	r0, 28ea <log_set_timestamp_func+0x12>
{
    28da:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    28dc:	4a04      	ldr	r2, [pc, #16]	; (28f0 <log_set_timestamp_func+0x18>)
    28de:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    28e0:	4608      	mov	r0, r1
    28e2:	f000 fabf 	bl	2e64 <log_output_timestamp_freq_set>
	return 0;
    28e6:	2000      	movs	r0, #0
}
    28e8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    28ea:	f06f 0015 	mvn.w	r0, #21
}
    28ee:	4770      	bx	lr
    28f0:	2000009c 	.word	0x2000009c

000028f4 <log_core_init>:
{
    28f4:	b508      	push	{r3, lr}
	panic_mode = false;
    28f6:	2300      	movs	r3, #0
    28f8:	4a04      	ldr	r2, [pc, #16]	; (290c <log_core_init+0x18>)
    28fa:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    28fc:	4a04      	ldr	r2, [pc, #16]	; (2910 <log_core_init+0x1c>)
    28fe:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    2900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2904:	4803      	ldr	r0, [pc, #12]	; (2914 <log_core_init+0x20>)
    2906:	f7ff ffe7 	bl	28d8 <log_set_timestamp_func>
}
    290a:	bd08      	pop	{r3, pc}
    290c:	20001381 	.word	0x20001381
    2910:	2000062c 	.word	0x2000062c
    2914:	0000b433 	.word	0x0000b433

00002918 <z_impl_log_panic>:
	if (panic_mode) {
    2918:	4b20      	ldr	r3, [pc, #128]	; (299c <z_impl_log_panic+0x84>)
    291a:	781b      	ldrb	r3, [r3, #0]
    291c:	b103      	cbz	r3, 2920 <z_impl_log_panic+0x8>
    291e:	4770      	bx	lr
{
    2920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    2924:	f7ff ff8a 	bl	283c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    2928:	2400      	movs	r4, #0
    292a:	e013      	b.n	2954 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    292c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 29a0 <z_impl_log_panic+0x88>
    2930:	f44f 7399 	mov.w	r3, #306	; 0x132
    2934:	4642      	mov	r2, r8
    2936:	491b      	ldr	r1, [pc, #108]	; (29a4 <z_impl_log_panic+0x8c>)
    2938:	481b      	ldr	r0, [pc, #108]	; (29a8 <z_impl_log_panic+0x90>)
    293a:	f008 fd67 	bl	b40c <assert_print>
    293e:	f44f 7199 	mov.w	r1, #306	; 0x132
    2942:	4640      	mov	r0, r8
    2944:	f008 fd5b 	bl	b3fe <assert_post_action>
    2948:	e00f      	b.n	296a <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    294a:	597b      	ldr	r3, [r7, r5]
    294c:	695b      	ldr	r3, [r3, #20]
    294e:	4630      	mov	r0, r6
    2950:	4798      	blx	r3
    2952:	3401      	adds	r4, #1
    2954:	4b15      	ldr	r3, [pc, #84]	; (29ac <z_impl_log_panic+0x94>)
    2956:	4a16      	ldr	r2, [pc, #88]	; (29b0 <z_impl_log_panic+0x98>)
    2958:	1a9b      	subs	r3, r3, r2
    295a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    295e:	da17      	bge.n	2990 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    2960:	0127      	lsls	r7, r4, #4
    2962:	4d13      	ldr	r5, [pc, #76]	; (29b0 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    2964:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    2968:	d0e0      	beq.n	292c <z_impl_log_panic+0x14>
	return backend->cb->active;
    296a:	6873      	ldr	r3, [r6, #4]
    296c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    296e:	2b00      	cmp	r3, #0
    2970:	d0ef      	beq.n	2952 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    2972:	2e00      	cmp	r6, #0
    2974:	d1e9      	bne.n	294a <z_impl_log_panic+0x32>
    2976:	f8df 8028 	ldr.w	r8, [pc, #40]	; 29a0 <z_impl_log_panic+0x88>
    297a:	23d7      	movs	r3, #215	; 0xd7
    297c:	4642      	mov	r2, r8
    297e:	4909      	ldr	r1, [pc, #36]	; (29a4 <z_impl_log_panic+0x8c>)
    2980:	4809      	ldr	r0, [pc, #36]	; (29a8 <z_impl_log_panic+0x90>)
    2982:	f008 fd43 	bl	b40c <assert_print>
    2986:	21d7      	movs	r1, #215	; 0xd7
    2988:	4640      	mov	r0, r8
    298a:	f008 fd38 	bl	b3fe <assert_post_action>
    298e:	e7dc      	b.n	294a <z_impl_log_panic+0x32>
	panic_mode = true;
    2990:	4b02      	ldr	r3, [pc, #8]	; (299c <z_impl_log_panic+0x84>)
    2992:	2201      	movs	r2, #1
    2994:	701a      	strb	r2, [r3, #0]
}
    2996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    299a:	bf00      	nop
    299c:	20001381 	.word	0x20001381
    29a0:	0000d210 	.word	0x0000d210
    29a4:	0000d248 	.word	0x0000d248
    29a8:	0000c8bc 	.word	0x0000c8bc
    29ac:	0000c664 	.word	0x0000c664
    29b0:	0000c644 	.word	0x0000c644

000029b4 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    29b4:	4b01      	ldr	r3, [pc, #4]	; (29bc <z_log_notify_backend_enabled+0x8>)
    29b6:	2201      	movs	r2, #1
    29b8:	701a      	strb	r2, [r3, #0]
}
    29ba:	4770      	bx	lr
    29bc:	20001380 	.word	0x20001380

000029c0 <z_log_dropped>:
    29c0:	4b0d      	ldr	r3, [pc, #52]	; (29f8 <z_log_dropped+0x38>)
    29c2:	f3bf 8f5b 	dmb	ish
    29c6:	e853 2f00 	ldrex	r2, [r3]
    29ca:	3201      	adds	r2, #1
    29cc:	e843 2100 	strex	r1, r2, [r3]
    29d0:	2900      	cmp	r1, #0
    29d2:	d1f8      	bne.n	29c6 <z_log_dropped+0x6>
    29d4:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    29d8:	b900      	cbnz	r0, 29dc <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    29da:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    29dc:	4b07      	ldr	r3, [pc, #28]	; (29fc <z_log_dropped+0x3c>)
    29de:	f3bf 8f5b 	dmb	ish
    29e2:	e853 2f00 	ldrex	r2, [r3]
    29e6:	3a01      	subs	r2, #1
    29e8:	e843 2100 	strex	r1, r2, [r3]
    29ec:	2900      	cmp	r1, #0
    29ee:	d1f8      	bne.n	29e2 <z_log_dropped+0x22>
    29f0:	f3bf 8f5b 	dmb	ish
    29f4:	e7f1      	b.n	29da <z_log_dropped+0x1a>
    29f6:	bf00      	nop
    29f8:	2000062c 	.word	0x2000062c
    29fc:	20000628 	.word	0x20000628

00002a00 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    2a00:	b510      	push	{r4, lr}
    2a02:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2a04:	4b04      	ldr	r3, [pc, #16]	; (2a18 <z_log_msg2_commit+0x18>)
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	4798      	blx	r3
    2a0a:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2a0c:	2100      	movs	r1, #0
    2a0e:	4620      	mov	r0, r4
    2a10:	f7ff feae 	bl	2770 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2a14:	bd10      	pop	{r4, pc}
    2a16:	bf00      	nop
    2a18:	2000009c 	.word	0x2000009c

00002a1c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2a1c:	4b05      	ldr	r3, [pc, #20]	; (2a34 <log_source_name_get+0x18>)
    2a1e:	4a06      	ldr	r2, [pc, #24]	; (2a38 <log_source_name_get+0x1c>)
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    2a26:	d202      	bcs.n	2a2e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    2a28:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    2a2c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2a2e:	2000      	movs	r0, #0
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	0000c644 	.word	0x0000c644
    2a38:	0000c5f4 	.word	0x0000c5f4

00002a3c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a3e:	4604      	mov	r4, r0
    2a40:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2a42:	4d1e      	ldr	r5, [pc, #120]	; (2abc <log_backend_enable+0x80>)
    2a44:	1b45      	subs	r5, r0, r5
    2a46:	112d      	asrs	r5, r5, #4
    2a48:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2a4a:	6803      	ldr	r3, [r0, #0]
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	b163      	cbz	r3, 2a6a <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    2a50:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    2a52:	b1cc      	cbz	r4, 2a88 <log_backend_enable+0x4c>
	backend->cb->id = id;
    2a54:	6863      	ldr	r3, [r4, #4]
    2a56:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    2a58:	b314      	cbz	r4, 2aa0 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    2a5a:	6863      	ldr	r3, [r4, #4]
    2a5c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    2a5e:	6863      	ldr	r3, [r4, #4]
    2a60:	2201      	movs	r2, #1
    2a62:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2a64:	f7ff ffa6 	bl	29b4 <z_log_notify_backend_enabled>
}
    2a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2a6a:	4f15      	ldr	r7, [pc, #84]	; (2ac0 <log_backend_enable+0x84>)
    2a6c:	23bb      	movs	r3, #187	; 0xbb
    2a6e:	463a      	mov	r2, r7
    2a70:	4914      	ldr	r1, [pc, #80]	; (2ac4 <log_backend_enable+0x88>)
    2a72:	4815      	ldr	r0, [pc, #84]	; (2ac8 <log_backend_enable+0x8c>)
    2a74:	f008 fcca 	bl	b40c <assert_print>
    2a78:	4814      	ldr	r0, [pc, #80]	; (2acc <log_backend_enable+0x90>)
    2a7a:	f008 fcc7 	bl	b40c <assert_print>
    2a7e:	21bb      	movs	r1, #187	; 0xbb
    2a80:	4638      	mov	r0, r7
    2a82:	f008 fcbc 	bl	b3fe <assert_post_action>
    2a86:	e7e3      	b.n	2a50 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    2a88:	4f11      	ldr	r7, [pc, #68]	; (2ad0 <log_backend_enable+0x94>)
    2a8a:	23e6      	movs	r3, #230	; 0xe6
    2a8c:	463a      	mov	r2, r7
    2a8e:	4911      	ldr	r1, [pc, #68]	; (2ad4 <log_backend_enable+0x98>)
    2a90:	480d      	ldr	r0, [pc, #52]	; (2ac8 <log_backend_enable+0x8c>)
    2a92:	f008 fcbb 	bl	b40c <assert_print>
    2a96:	21e6      	movs	r1, #230	; 0xe6
    2a98:	4638      	mov	r0, r7
    2a9a:	f008 fcb0 	bl	b3fe <assert_post_action>
    2a9e:	e7d9      	b.n	2a54 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    2aa0:	4d0b      	ldr	r5, [pc, #44]	; (2ad0 <log_backend_enable+0x94>)
    2aa2:	f240 1317 	movw	r3, #279	; 0x117
    2aa6:	462a      	mov	r2, r5
    2aa8:	490a      	ldr	r1, [pc, #40]	; (2ad4 <log_backend_enable+0x98>)
    2aaa:	4807      	ldr	r0, [pc, #28]	; (2ac8 <log_backend_enable+0x8c>)
    2aac:	f008 fcae 	bl	b40c <assert_print>
    2ab0:	f240 1117 	movw	r1, #279	; 0x117
    2ab4:	4628      	mov	r0, r5
    2ab6:	f008 fca2 	bl	b3fe <assert_post_action>
    2aba:	e7ce      	b.n	2a5a <log_backend_enable+0x1e>
    2abc:	0000c644 	.word	0x0000c644
    2ac0:	0000d2f0 	.word	0x0000d2f0
    2ac4:	0000d34c 	.word	0x0000d34c
    2ac8:	0000c8bc 	.word	0x0000c8bc
    2acc:	0000d364 	.word	0x0000d364
    2ad0:	0000d210 	.word	0x0000d210
    2ad4:	0000d248 	.word	0x0000d248

00002ad8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2ad8:	b40e      	push	{r1, r2, r3}
    2ada:	b500      	push	{lr}
    2adc:	b082      	sub	sp, #8
    2ade:	4601      	mov	r1, r0
    2ae0:	ab03      	add	r3, sp, #12
    2ae2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    2ae6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2ae8:	4803      	ldr	r0, [pc, #12]	; (2af8 <print_formatted+0x20>)
    2aea:	f7ff fb45 	bl	2178 <cbvprintf>
	va_end(args);

	return length;
}
    2aee:	b002      	add	sp, #8
    2af0:	f85d eb04 	ldr.w	lr, [sp], #4
    2af4:	b003      	add	sp, #12
    2af6:	4770      	bx	lr
    2af8:	0000b467 	.word	0x0000b467

00002afc <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2afc:	b530      	push	{r4, r5, lr}
    2afe:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2b00:	f011 0f44 	tst.w	r1, #68	; 0x44
    2b04:	d005      	beq.n	2b12 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    2b06:	4b1a      	ldr	r3, [pc, #104]	; (2b70 <timestamp_print+0x74>)
    2b08:	681c      	ldr	r4, [r3, #0]
    2b0a:	b934      	cbnz	r4, 2b1a <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2b0c:	2000      	movs	r0, #0
	}

	return length;
}
    2b0e:	b005      	add	sp, #20
    2b10:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2b12:	4918      	ldr	r1, [pc, #96]	; (2b74 <timestamp_print+0x78>)
    2b14:	f7ff ffe0 	bl	2ad8 <print_formatted>
    2b18:	e7f9      	b.n	2b0e <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2b1a:	4b17      	ldr	r3, [pc, #92]	; (2b78 <timestamp_print+0x7c>)
    2b1c:	6819      	ldr	r1, [r3, #0]
    2b1e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2b22:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    2b26:	4a15      	ldr	r2, [pc, #84]	; (2b7c <timestamp_print+0x80>)
    2b28:	fba2 320c 	umull	r3, r2, r2, ip
    2b2c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2b2e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2b32:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    2b36:	4b12      	ldr	r3, [pc, #72]	; (2b80 <timestamp_print+0x84>)
    2b38:	fba3 530e 	umull	r5, r3, r3, lr
    2b3c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2b3e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    2b42:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    2b46:	fb0c f101 	mul.w	r1, ip, r1
    2b4a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2b4e:	fb05 1114 	mls	r1, r5, r4, r1
    2b52:	fb0c f101 	mul.w	r1, ip, r1
    2b56:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    2b5a:	9102      	str	r1, [sp, #8]
    2b5c:	9501      	str	r5, [sp, #4]
    2b5e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    2b62:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    2b66:	9100      	str	r1, [sp, #0]
    2b68:	4906      	ldr	r1, [pc, #24]	; (2b84 <timestamp_print+0x88>)
    2b6a:	f7ff ffb5 	bl	2ad8 <print_formatted>
    2b6e:	e7ce      	b.n	2b0e <timestamp_print+0x12>
    2b70:	20000634 	.word	0x20000634
    2b74:	0000d388 	.word	0x0000d388
    2b78:	20000638 	.word	0x20000638
    2b7c:	91a2b3c5 	.word	0x91a2b3c5
    2b80:	88888889 	.word	0x88888889
    2b84:	0000d394 	.word	0x0000d394

00002b88 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2b88:	b161      	cbz	r1, 2ba4 <color_print+0x1c>
{
    2b8a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2b8c:	b12a      	cbz	r2, 2b9a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2b8e:	4a06      	ldr	r2, [pc, #24]	; (2ba8 <color_print+0x20>)
    2b90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2b94:	b912      	cbnz	r2, 2b9c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2b96:	4a05      	ldr	r2, [pc, #20]	; (2bac <color_print+0x24>)
    2b98:	e000      	b.n	2b9c <color_print+0x14>
    2b9a:	4a04      	ldr	r2, [pc, #16]	; (2bac <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2b9c:	4904      	ldr	r1, [pc, #16]	; (2bb0 <color_print+0x28>)
    2b9e:	f7ff ff9b 	bl	2ad8 <print_formatted>
	}
}
    2ba2:	bd08      	pop	{r3, pc}
    2ba4:	4770      	bx	lr
    2ba6:	bf00      	nop
    2ba8:	0000d454 	.word	0x0000d454
    2bac:	0000d3b0 	.word	0x0000d3b0
    2bb0:	0000d3b8 	.word	0x0000d3b8

00002bb4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2bb4:	f011 0f10 	tst.w	r1, #16
    2bb8:	d10b      	bne.n	2bd2 <newline_print+0x1e>
{
    2bba:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2bbc:	f011 0f20 	tst.w	r1, #32
    2bc0:	d003      	beq.n	2bca <newline_print+0x16>
		print_formatted(ctx, "\n");
    2bc2:	4904      	ldr	r1, [pc, #16]	; (2bd4 <newline_print+0x20>)
    2bc4:	f7ff ff88 	bl	2ad8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    2bc8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    2bca:	4903      	ldr	r1, [pc, #12]	; (2bd8 <newline_print+0x24>)
    2bcc:	f7ff ff84 	bl	2ad8 <print_formatted>
    2bd0:	e7fa      	b.n	2bc8 <newline_print+0x14>
    2bd2:	4770      	bx	lr
    2bd4:	0000cd74 	.word	0x0000cd74
    2bd8:	0000eac4 	.word	0x0000eac4

00002bdc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2be0:	4605      	mov	r5, r0
    2be2:	460f      	mov	r7, r1
    2be4:	4616      	mov	r6, r2
    2be6:	4698      	mov	r8, r3
	newline_print(output, flags);
    2be8:	9906      	ldr	r1, [sp, #24]
    2bea:	f7ff ffe3 	bl	2bb4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2bee:	2400      	movs	r4, #0
    2bf0:	4544      	cmp	r4, r8
    2bf2:	da05      	bge.n	2c00 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2bf4:	4923      	ldr	r1, [pc, #140]	; (2c84 <hexdump_line_print+0xa8>)
    2bf6:	4628      	mov	r0, r5
    2bf8:	f7ff ff6e 	bl	2ad8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2bfc:	3401      	adds	r4, #1
    2bfe:	e7f7      	b.n	2bf0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c00:	2400      	movs	r4, #0
    2c02:	e009      	b.n	2c18 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2c04:	491f      	ldr	r1, [pc, #124]	; (2c84 <hexdump_line_print+0xa8>)
    2c06:	4628      	mov	r0, r5
    2c08:	f7ff ff66 	bl	2ad8 <print_formatted>
    2c0c:	e00b      	b.n	2c26 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2c0e:	491e      	ldr	r1, [pc, #120]	; (2c88 <hexdump_line_print+0xac>)
    2c10:	4628      	mov	r0, r5
    2c12:	f7ff ff61 	bl	2ad8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c16:	3401      	adds	r4, #1
    2c18:	2c0f      	cmp	r4, #15
    2c1a:	dc0c      	bgt.n	2c36 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2c1c:	2c00      	cmp	r4, #0
    2c1e:	dd02      	ble.n	2c26 <hexdump_line_print+0x4a>
    2c20:	f014 0f07 	tst.w	r4, #7
    2c24:	d0ee      	beq.n	2c04 <hexdump_line_print+0x28>
		if (i < length) {
    2c26:	42b4      	cmp	r4, r6
    2c28:	d2f1      	bcs.n	2c0e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2c2a:	5d3a      	ldrb	r2, [r7, r4]
    2c2c:	4917      	ldr	r1, [pc, #92]	; (2c8c <hexdump_line_print+0xb0>)
    2c2e:	4628      	mov	r0, r5
    2c30:	f7ff ff52 	bl	2ad8 <print_formatted>
    2c34:	e7ef      	b.n	2c16 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    2c36:	4916      	ldr	r1, [pc, #88]	; (2c90 <hexdump_line_print+0xb4>)
    2c38:	4628      	mov	r0, r5
    2c3a:	f7ff ff4d 	bl	2ad8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c3e:	2400      	movs	r4, #0
    2c40:	e009      	b.n	2c56 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2c42:	4910      	ldr	r1, [pc, #64]	; (2c84 <hexdump_line_print+0xa8>)
    2c44:	4628      	mov	r0, r5
    2c46:	f7ff ff47 	bl	2ad8 <print_formatted>
    2c4a:	e00b      	b.n	2c64 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    2c4c:	4911      	ldr	r1, [pc, #68]	; (2c94 <hexdump_line_print+0xb8>)
    2c4e:	4628      	mov	r0, r5
    2c50:	f7ff ff42 	bl	2ad8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2c54:	3401      	adds	r4, #1
    2c56:	2c0f      	cmp	r4, #15
    2c58:	dc12      	bgt.n	2c80 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2c5a:	2c00      	cmp	r4, #0
    2c5c:	dd02      	ble.n	2c64 <hexdump_line_print+0x88>
    2c5e:	f014 0f07 	tst.w	r4, #7
    2c62:	d0ee      	beq.n	2c42 <hexdump_line_print+0x66>
		if (i < length) {
    2c64:	42b4      	cmp	r4, r6
    2c66:	d206      	bcs.n	2c76 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    2c68:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    2c6a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    2c6e:	2b5e      	cmp	r3, #94	; 0x5e
    2c70:	d9ec      	bls.n	2c4c <hexdump_line_print+0x70>
    2c72:	222e      	movs	r2, #46	; 0x2e
    2c74:	e7ea      	b.n	2c4c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    2c76:	4903      	ldr	r1, [pc, #12]	; (2c84 <hexdump_line_print+0xa8>)
    2c78:	4628      	mov	r0, r5
    2c7a:	f7ff ff2d 	bl	2ad8 <print_formatted>
    2c7e:	e7e9      	b.n	2c54 <hexdump_line_print+0x78>
		}
	}
}
    2c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c84:	0000d3e0 	.word	0x0000d3e0
    2c88:	0000d3c4 	.word	0x0000d3c4
    2c8c:	0000d3bc 	.word	0x0000d3bc
    2c90:	0000d3c8 	.word	0x0000d3c8
    2c94:	0000d3cc 	.word	0x0000d3cc

00002c98 <ids_print>:
{
    2c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c9c:	4680      	mov	r8, r0
    2c9e:	4616      	mov	r6, r2
    2ca0:	461d      	mov	r5, r3
    2ca2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    2ca6:	b959      	cbnz	r1, 2cc0 <ids_print+0x28>
	int total = 0;
    2ca8:	2400      	movs	r4, #0
	if (source_id >= 0) {
    2caa:	2f00      	cmp	r7, #0
    2cac:	db1c      	blt.n	2ce8 <ids_print+0x50>
		total += print_formatted(output,
    2cae:	b186      	cbz	r6, 2cd2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2cb0:	2301      	movs	r3, #1
    2cb2:	9a07      	ldr	r2, [sp, #28]
    2cb4:	4093      	lsls	r3, r2
				(func_on &&
    2cb6:	f013 0f10 	tst.w	r3, #16
    2cba:	d118      	bne.n	2cee <ids_print+0x56>
		total += print_formatted(output,
    2cbc:	4e0d      	ldr	r6, [pc, #52]	; (2cf4 <ids_print+0x5c>)
    2cbe:	e009      	b.n	2cd4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2cc0:	4b0d      	ldr	r3, [pc, #52]	; (2cf8 <ids_print+0x60>)
    2cc2:	9a07      	ldr	r2, [sp, #28]
    2cc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2cc8:	490c      	ldr	r1, [pc, #48]	; (2cfc <ids_print+0x64>)
    2cca:	f7ff ff05 	bl	2ad8 <print_formatted>
    2cce:	4604      	mov	r4, r0
    2cd0:	e7eb      	b.n	2caa <ids_print+0x12>
		total += print_formatted(output,
    2cd2:	4e08      	ldr	r6, [pc, #32]	; (2cf4 <ids_print+0x5c>)
    2cd4:	4639      	mov	r1, r7
    2cd6:	4628      	mov	r0, r5
    2cd8:	f7ff fea0 	bl	2a1c <log_source_name_get>
    2cdc:	4602      	mov	r2, r0
    2cde:	4631      	mov	r1, r6
    2ce0:	4640      	mov	r0, r8
    2ce2:	f7ff fef9 	bl	2ad8 <print_formatted>
    2ce6:	4404      	add	r4, r0
}
    2ce8:	4620      	mov	r0, r4
    2cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2cee:	4e04      	ldr	r6, [pc, #16]	; (2d00 <ids_print+0x68>)
    2cf0:	e7f0      	b.n	2cd4 <ids_print+0x3c>
    2cf2:	bf00      	nop
    2cf4:	0000d3d0 	.word	0x0000d3d0
    2cf8:	0000d468 	.word	0x0000d468
    2cfc:	0000d3dc 	.word	0x0000d3dc
    2d00:	0000d3d8 	.word	0x0000d3d8

00002d04 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d08:	b085      	sub	sp, #20
    2d0a:	4605      	mov	r5, r0
    2d0c:	460c      	mov	r4, r1
    2d0e:	4616      	mov	r6, r2
    2d10:	9303      	str	r3, [sp, #12]
    2d12:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2d16:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2d1a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2d1e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2d22:	f008 fb9e 	bl	b462 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2d26:	b1e8      	cbz	r0, 2d64 <prefix_print+0x60>
    2d28:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    2d2a:	4913      	ldr	r1, [pc, #76]	; (2d78 <prefix_print+0x74>)
    2d2c:	4628      	mov	r0, r5
    2d2e:	f7ff fed3 	bl	2ad8 <print_formatted>
    2d32:	4607      	mov	r7, r0
	}

	if (stamp) {
    2d34:	f1bb 0f00 	cmp.w	fp, #0
    2d38:	d116      	bne.n	2d68 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    2d3a:	4642      	mov	r2, r8
    2d3c:	4651      	mov	r1, sl
    2d3e:	4628      	mov	r0, r5
    2d40:	f008 fbbb 	bl	b4ba <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    2d44:	f8cd 8004 	str.w	r8, [sp, #4]
    2d48:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    2d4c:	9300      	str	r3, [sp, #0]
    2d4e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2d52:	4632      	mov	r2, r6
    2d54:	4649      	mov	r1, r9
    2d56:	4628      	mov	r0, r5
    2d58:	f7ff ff9e 	bl	2c98 <ids_print>
			domain_id, source_id, level);


	return length;
}
    2d5c:	4438      	add	r0, r7
    2d5e:	b005      	add	sp, #20
    2d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2d64:	2700      	movs	r7, #0
    2d66:	e7e5      	b.n	2d34 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    2d68:	9a03      	ldr	r2, [sp, #12]
    2d6a:	4621      	mov	r1, r4
    2d6c:	4628      	mov	r0, r5
    2d6e:	f7ff fec5 	bl	2afc <timestamp_print>
    2d72:	4407      	add	r7, r0
    2d74:	e7e1      	b.n	2d3a <prefix_print+0x36>
    2d76:	bf00      	nop
    2d78:	0000d3e4 	.word	0x0000d3e4

00002d7c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d80:	b084      	sub	sp, #16
    2d82:	4606      	mov	r6, r0
    2d84:	460c      	mov	r4, r1
    2d86:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    2d88:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    2d8a:	880a      	ldrh	r2, [r1, #0]
    2d8c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2d90:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    2d94:	d037      	beq.n	2e06 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    2d96:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    2d98:	7809      	ldrb	r1, [r1, #0]
    2d9a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2d9e:	b37a      	cbz	r2, 2e00 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2da0:	4829      	ldr	r0, [pc, #164]	; (2e48 <log_output_msg2_process+0xcc>)
    2da2:	1a12      	subs	r2, r2, r0
    2da4:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2da8:	9202      	str	r2, [sp, #8]
    2daa:	9101      	str	r1, [sp, #4]
    2dac:	f8cd 8000 	str.w	r8, [sp]
    2db0:	2200      	movs	r2, #0
    2db2:	4639      	mov	r1, r7
    2db4:	4630      	mov	r0, r6
    2db6:	f7ff ffa5 	bl	2d04 <prefix_print>
    2dba:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2dbc:	4625      	mov	r5, r4
    2dbe:	f855 3b10 	ldr.w	r3, [r5], #16
    2dc2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2dc6:	b153      	cbz	r3, 2dde <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2dc8:	f1b8 0f00 	cmp.w	r8, #0
    2dcc:	d11e      	bne.n	2e0c <log_output_msg2_process+0x90>
    2dce:	481f      	ldr	r0, [pc, #124]	; (2e4c <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2dd0:	462b      	mov	r3, r5
    2dd2:	4632      	mov	r2, r6
    2dd4:	491e      	ldr	r1, [pc, #120]	; (2e50 <log_output_msg2_process+0xd4>)
    2dd6:	f008 f948 	bl	b06a <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    2dda:	2800      	cmp	r0, #0
    2ddc:	db18      	blt.n	2e10 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    2dde:	8862      	ldrh	r2, [r4, #2]
    2de0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    2de4:	6821      	ldr	r1, [r4, #0]
    2de6:	f3c1 2149 	ubfx	r1, r1, #9, #10
    2dea:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2dec:	b9fa      	cbnz	r2, 2e2e <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2dee:	f1b8 0f00 	cmp.w	r8, #0
    2df2:	d122      	bne.n	2e3a <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2df4:	4630      	mov	r0, r6
    2df6:	f008 fb93 	bl	b520 <log_output_flush>
}
    2dfa:	b004      	add	sp, #16
    2dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e04:	e7d0      	b.n	2da8 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    2e06:	f04f 0900 	mov.w	r9, #0
    2e0a:	e7d7      	b.n	2dbc <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2e0c:	4811      	ldr	r0, [pc, #68]	; (2e54 <log_output_msg2_process+0xd8>)
    2e0e:	e7df      	b.n	2dd0 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2e10:	f8df a044 	ldr.w	sl, [pc, #68]	; 2e58 <log_output_msg2_process+0xdc>
    2e14:	f240 23b7 	movw	r3, #695	; 0x2b7
    2e18:	4652      	mov	r2, sl
    2e1a:	4910      	ldr	r1, [pc, #64]	; (2e5c <log_output_msg2_process+0xe0>)
    2e1c:	4810      	ldr	r0, [pc, #64]	; (2e60 <log_output_msg2_process+0xe4>)
    2e1e:	f008 faf5 	bl	b40c <assert_print>
    2e22:	f240 21b7 	movw	r1, #695	; 0x2b7
    2e26:	4650      	mov	r0, sl
    2e28:	f008 fae9 	bl	b3fe <assert_post_action>
    2e2c:	e7d7      	b.n	2dde <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    2e2e:	9700      	str	r7, [sp, #0]
    2e30:	464b      	mov	r3, r9
    2e32:	4630      	mov	r0, r6
    2e34:	f008 fb59 	bl	b4ea <log_msg2_hexdump>
    2e38:	e7d9      	b.n	2dee <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    2e3a:	4642      	mov	r2, r8
    2e3c:	4639      	mov	r1, r7
    2e3e:	4630      	mov	r0, r6
    2e40:	f008 fb47 	bl	b4d2 <postfix_print>
    2e44:	e7d6      	b.n	2df4 <log_output_msg2_process+0x78>
    2e46:	bf00      	nop
    2e48:	0000c5f4 	.word	0x0000c5f4
    2e4c:	0000b485 	.word	0x0000b485
    2e50:	00002179 	.word	0x00002179
    2e54:	0000b467 	.word	0x0000b467
    2e58:	0000d3e8 	.word	0x0000d3e8
    2e5c:	0000d428 	.word	0x0000d428
    2e60:	0000c8bc 	.word	0x0000c8bc

00002e64 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2e64:	4b07      	ldr	r3, [pc, #28]	; (2e84 <log_output_timestamp_freq_set+0x20>)
    2e66:	2201      	movs	r2, #1
    2e68:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2e6a:	e004      	b.n	2e76 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    2e6c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2e6e:	4a05      	ldr	r2, [pc, #20]	; (2e84 <log_output_timestamp_freq_set+0x20>)
    2e70:	6813      	ldr	r3, [r2, #0]
    2e72:	005b      	lsls	r3, r3, #1
    2e74:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2e76:	4b04      	ldr	r3, [pc, #16]	; (2e88 <log_output_timestamp_freq_set+0x24>)
    2e78:	4298      	cmp	r0, r3
    2e7a:	d8f7      	bhi.n	2e6c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    2e7c:	4b03      	ldr	r3, [pc, #12]	; (2e8c <log_output_timestamp_freq_set+0x28>)
    2e7e:	6018      	str	r0, [r3, #0]
}
    2e80:	4770      	bx	lr
    2e82:	bf00      	nop
    2e84:	20000638 	.word	0x20000638
    2e88:	000f4240 	.word	0x000f4240
    2e8c:	20000634 	.word	0x20000634

00002e90 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e94:	b087      	sub	sp, #28
    2e96:	af02      	add	r7, sp, #8
    2e98:	4682      	mov	sl, r0
    2e9a:	6079      	str	r1, [r7, #4]
    2e9c:	4691      	mov	r9, r2
    2e9e:	4698      	mov	r8, r3
    2ea0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    2ea2:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    2ea6:	f1bb 0f00 	cmp.w	fp, #0
    2eaa:	d016      	beq.n	2eda <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    2eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2eae:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2eb0:	9300      	str	r3, [sp, #0]
    2eb2:	465b      	mov	r3, fp
    2eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2eb6:	2110      	movs	r1, #16
    2eb8:	2000      	movs	r0, #0
    2eba:	f7fe f8fb 	bl	10b4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    2ebe:	1e05      	subs	r5, r0, #0
    2ec0:	da0c      	bge.n	2edc <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    2ec2:	4c26      	ldr	r4, [pc, #152]	; (2f5c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    2ec4:	2367      	movs	r3, #103	; 0x67
    2ec6:	4622      	mov	r2, r4
    2ec8:	4925      	ldr	r1, [pc, #148]	; (2f60 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    2eca:	4826      	ldr	r0, [pc, #152]	; (2f64 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2ecc:	f008 fa9e 	bl	b40c <assert_print>
    2ed0:	2167      	movs	r1, #103	; 0x67
    2ed2:	4620      	mov	r0, r4
    2ed4:	f008 fa93 	bl	b3fe <assert_post_action>
		va_end(ap2);
    2ed8:	e000      	b.n	2edc <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    2eda:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2edc:	4629      	mov	r1, r5
    2ede:	19ab      	adds	r3, r5, r6
    2ee0:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2ee2:	2400      	movs	r4, #0
    2ee4:	f36f 0400 	bfc	r4, #0, #1
    2ee8:	f36f 0441 	bfc	r4, #1, #1
    2eec:	f36f 0482 	bfc	r4, #2, #1
    2ef0:	f36a 04c5 	bfi	r4, sl, #3, #3
    2ef4:	f369 1488 	bfi	r4, r9, #6, #3
    2ef8:	f365 2452 	bfi	r4, r5, #9, #10
    2efc:	f366 44de 	bfi	r4, r6, #19, #12
    2f00:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2f04:	f023 0307 	bic.w	r3, r3, #7
    2f08:	ebad 0d03 	sub.w	sp, sp, r3
    2f0c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2f0e:	466b      	mov	r3, sp
    2f10:	f113 0018 	adds.w	r0, r3, #24
    2f14:	d00a      	beq.n	2f2c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2f16:	f1bb 0f00 	cmp.w	fp, #0
    2f1a:	d007      	beq.n	2f2c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2f1e:	9300      	str	r3, [sp, #0]
    2f20:	465b      	mov	r3, fp
    2f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2f24:	f7fe f8c6 	bl	10b4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2f28:	2800      	cmp	r0, #0
    2f2a:	db09      	blt.n	2f40 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2f2c:	4643      	mov	r3, r8
    2f2e:	4622      	mov	r2, r4
    2f30:	6879      	ldr	r1, [r7, #4]
    2f32:	4628      	mov	r0, r5
    2f34:	f008 fb01 	bl	b53a <z_log_msg2_finalize>
	}
}
    2f38:	3714      	adds	r7, #20
    2f3a:	46bd      	mov	sp, r7
    2f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2f40:	f8df 9018 	ldr.w	r9, [pc, #24]	; 2f5c <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2f44:	2381      	movs	r3, #129	; 0x81
    2f46:	464a      	mov	r2, r9
    2f48:	4905      	ldr	r1, [pc, #20]	; (2f60 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    2f4a:	4806      	ldr	r0, [pc, #24]	; (2f64 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2f4c:	f008 fa5e 	bl	b40c <assert_print>
    2f50:	2181      	movs	r1, #129	; 0x81
    2f52:	4648      	mov	r0, r9
    2f54:	f008 fa53 	bl	b3fe <assert_post_action>
    2f58:	e7e8      	b.n	2f2c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2f5a:	bf00      	nop
    2f5c:	0000d47c 	.word	0x0000d47c
    2f60:	0000d4b8 	.word	0x0000d4b8
    2f64:	0000c8bc 	.word	0x0000c8bc

00002f68 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2f68:	b570      	push	{r4, r5, r6, lr}
    2f6a:	4606      	mov	r6, r0
    2f6c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2f6e:	2400      	movs	r4, #0
    2f70:	e006      	b.n	2f80 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2f72:	4b05      	ldr	r3, [pc, #20]	; (2f88 <char_out+0x20>)
    2f74:	6818      	ldr	r0, [r3, #0]
    2f76:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2f78:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2f7a:	685b      	ldr	r3, [r3, #4]
    2f7c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2f7e:	3401      	adds	r4, #1
    2f80:	42ac      	cmp	r4, r5
    2f82:	d3f6      	bcc.n	2f72 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2f84:	4628      	mov	r0, r5
    2f86:	bd70      	pop	{r4, r5, r6, pc}
    2f88:	20000654 	.word	0x20000654

00002f8c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2f8c:	4b01      	ldr	r3, [pc, #4]	; (2f94 <format_set+0x8>)
    2f8e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2f90:	2000      	movs	r0, #0
    2f92:	4770      	bx	lr
    2f94:	20000644 	.word	0x20000644

00002f98 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    2f98:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2f9a:	4809      	ldr	r0, [pc, #36]	; (2fc0 <log_backend_uart_init+0x28>)
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <log_backend_uart_init+0x2c>)
    2f9e:	6018      	str	r0, [r3, #0]
    2fa0:	f009 f8c4 	bl	c12c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2fa4:	b100      	cbz	r0, 2fa8 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    2fa6:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2fa8:	4c07      	ldr	r4, [pc, #28]	; (2fc8 <log_backend_uart_init+0x30>)
    2faa:	2379      	movs	r3, #121	; 0x79
    2fac:	4622      	mov	r2, r4
    2fae:	4907      	ldr	r1, [pc, #28]	; (2fcc <log_backend_uart_init+0x34>)
    2fb0:	4807      	ldr	r0, [pc, #28]	; (2fd0 <log_backend_uart_init+0x38>)
    2fb2:	f008 fa2b 	bl	b40c <assert_print>
    2fb6:	2179      	movs	r1, #121	; 0x79
    2fb8:	4620      	mov	r0, r4
    2fba:	f008 fa20 	bl	b3fe <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    2fbe:	e7f2      	b.n	2fa6 <log_backend_uart_init+0xe>
    2fc0:	0000c444 	.word	0x0000c444
    2fc4:	20000654 	.word	0x20000654
    2fc8:	0000d4c4 	.word	0x0000d4c4
    2fcc:	0000d4fc 	.word	0x0000d4fc
    2fd0:	0000c8bc 	.word	0x0000c8bc

00002fd4 <panic>:

static void panic(struct log_backend const *const backend)
{
    2fd4:	b508      	push	{r3, lr}
	in_panic = true;
    2fd6:	4b03      	ldr	r3, [pc, #12]	; (2fe4 <panic+0x10>)
    2fd8:	2201      	movs	r2, #1
    2fda:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2fdc:	4802      	ldr	r0, [pc, #8]	; (2fe8 <panic+0x14>)
    2fde:	f008 fa9f 	bl	b520 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2fe2:	bd08      	pop	{r3, pc}
    2fe4:	20001382 	.word	0x20001382
    2fe8:	0000d558 	.word	0x0000d558

00002fec <process>:
{
    2fec:	b510      	push	{r4, lr}
    2fee:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <process+0x18>)
    2ff2:	6818      	ldr	r0, [r3, #0]
    2ff4:	f7ff fc1c 	bl	2830 <log_format_func_t_get>
    2ff8:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    2ffa:	220f      	movs	r2, #15
    2ffc:	4621      	mov	r1, r4
    2ffe:	4802      	ldr	r0, [pc, #8]	; (3008 <process+0x1c>)
    3000:	4798      	blx	r3
}
    3002:	bd10      	pop	{r4, pc}
    3004:	20000644 	.word	0x20000644
    3008:	0000d558 	.word	0x0000d558

0000300c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    300c:	4b03      	ldr	r3, [pc, #12]	; (301c <log_backend_rtt_init+0x10>)
    300e:	2201      	movs	r2, #1
    3010:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3012:	4b03      	ldr	r3, [pc, #12]	; (3020 <log_backend_rtt_init+0x14>)
    3014:	4a03      	ldr	r2, [pc, #12]	; (3024 <log_backend_rtt_init+0x18>)
    3016:	601a      	str	r2, [r3, #0]
}
    3018:	4770      	bx	lr
    301a:	bf00      	nop
    301c:	20001383 	.word	0x20001383
    3020:	20000680 	.word	0x20000680
    3024:	20000668 	.word	0x20000668

00003028 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3028:	4b01      	ldr	r3, [pc, #4]	; (3030 <format_set+0x8>)
    302a:	6019      	str	r1, [r3, #0]
	return 0;
}
    302c:	2000      	movs	r0, #0
    302e:	4770      	bx	lr
    3030:	20000684 	.word	0x20000684

00003034 <on_failed_write>:
{
    3034:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3036:	b918      	cbnz	r0, 3040 <on_failed_write+0xc>
		host_present = false;
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <on_failed_write+0x18>)
    303a:	2200      	movs	r2, #0
    303c:	701a      	strb	r2, [r3, #0]
}
    303e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3040:	f241 3088 	movw	r0, #5000	; 0x1388
    3044:	f009 f962 	bl	c30c <z_impl_k_busy_wait>
    3048:	e7f9      	b.n	303e <on_failed_write+0xa>
    304a:	bf00      	nop
    304c:	20001383 	.word	0x20001383

00003050 <on_write>:
{
    3050:	b538      	push	{r3, r4, r5, lr}
    3052:	4604      	mov	r4, r0
	host_present = true;
    3054:	4b0a      	ldr	r3, [pc, #40]	; (3080 <on_write+0x30>)
    3056:	2201      	movs	r2, #1
    3058:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    305a:	4b0a      	ldr	r3, [pc, #40]	; (3084 <on_write+0x34>)
    305c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    305e:	b92b      	cbnz	r3, 306c <on_write+0x1c>
}
    3060:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3062:	1e65      	subs	r5, r4, #1
    3064:	4620      	mov	r0, r4
    3066:	f7ff ffe5 	bl	3034 <on_failed_write>
    306a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    306c:	2000      	movs	r0, #0
    306e:	f004 fdfb 	bl	7c68 <SEGGER_RTT_HasDataUp>
    3072:	2800      	cmp	r0, #0
    3074:	d0f4      	beq.n	3060 <on_write+0x10>
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <on_write+0x30>)
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	2b00      	cmp	r3, #0
    307c:	d1f1      	bne.n	3062 <on_write+0x12>
    307e:	e7ef      	b.n	3060 <on_write+0x10>
    3080:	20001383 	.word	0x20001383
    3084:	20001384 	.word	0x20001384

00003088 <data_out_block_mode>:
{
    3088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    308a:	4606      	mov	r6, r0
    308c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    308e:	2704      	movs	r7, #4
    3090:	e006      	b.n	30a0 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    3092:	4638      	mov	r0, r7
    3094:	f7ff ffdc 	bl	3050 <on_write>
	} while ((ret == 0) && host_present);
    3098:	b99c      	cbnz	r4, 30c2 <data_out_block_mode+0x3a>
    309a:	4b0d      	ldr	r3, [pc, #52]	; (30d0 <data_out_block_mode+0x48>)
    309c:	781b      	ldrb	r3, [r3, #0]
    309e:	b183      	cbz	r3, 30c2 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    30a0:	462a      	mov	r2, r5
    30a2:	4631      	mov	r1, r6
    30a4:	2000      	movs	r0, #0
    30a6:	f004 fd7b 	bl	7ba0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    30aa:	4604      	mov	r4, r0
    30ac:	2800      	cmp	r0, #0
    30ae:	d1f0      	bne.n	3092 <data_out_block_mode+0xa>
		} else if (host_present) {
    30b0:	4b07      	ldr	r3, [pc, #28]	; (30d0 <data_out_block_mode+0x48>)
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d0ef      	beq.n	3098 <data_out_block_mode+0x10>
			retry_cnt--;
    30b8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    30ba:	4638      	mov	r0, r7
    30bc:	f7ff ffba 	bl	3034 <on_failed_write>
    30c0:	e7ea      	b.n	3098 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    30c2:	b914      	cbnz	r4, 30ca <data_out_block_mode+0x42>
    30c4:	4b02      	ldr	r3, [pc, #8]	; (30d0 <data_out_block_mode+0x48>)
    30c6:	781b      	ldrb	r3, [r3, #0]
    30c8:	b903      	cbnz	r3, 30cc <data_out_block_mode+0x44>
    30ca:	462c      	mov	r4, r5
}
    30cc:	4620      	mov	r0, r4
    30ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30d0:	20001383 	.word	0x20001383

000030d4 <panic>:
{
    30d4:	b508      	push	{r3, lr}
	panic_mode = true;
    30d6:	4b03      	ldr	r3, [pc, #12]	; (30e4 <panic+0x10>)
    30d8:	2201      	movs	r2, #1
    30da:	701a      	strb	r2, [r3, #0]
    30dc:	4802      	ldr	r0, [pc, #8]	; (30e8 <panic+0x14>)
    30de:	f008 fa1f 	bl	b520 <log_output_flush>
}
    30e2:	bd08      	pop	{r3, pc}
    30e4:	20001384 	.word	0x20001384
    30e8:	0000d598 	.word	0x0000d598

000030ec <process>:
{
    30ec:	b510      	push	{r4, lr}
    30ee:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    30f0:	4b04      	ldr	r3, [pc, #16]	; (3104 <process+0x18>)
    30f2:	6818      	ldr	r0, [r3, #0]
    30f4:	f7ff fb9c 	bl	2830 <log_format_func_t_get>
    30f8:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    30fa:	220f      	movs	r2, #15
    30fc:	4621      	mov	r1, r4
    30fe:	4802      	ldr	r0, [pc, #8]	; (3108 <process+0x1c>)
    3100:	4798      	blx	r3
}
    3102:	bd10      	pop	{r4, pc}
    3104:	20000684 	.word	0x20000684
    3108:	0000d598 	.word	0x0000d598

0000310c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    310c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    310e:	4b40      	ldr	r3, [pc, #256]	; (3210 <pm_system_resume+0x104>)
    3110:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3112:	f005 031f 	and.w	r3, r5, #31
    3116:	2201      	movs	r2, #1
    3118:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    311a:	0969      	lsrs	r1, r5, #5
    311c:	4b3d      	ldr	r3, [pc, #244]	; (3214 <pm_system_resume+0x108>)
    311e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3122:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3124:	f3bf 8f5b 	dmb	ish
    3128:	e853 1f00 	ldrex	r1, [r3]
    312c:	ea01 0400 	and.w	r4, r1, r0
    3130:	e843 4600 	strex	r6, r4, [r3]
    3134:	2e00      	cmp	r6, #0
    3136:	d1f7      	bne.n	3128 <pm_system_resume+0x1c>
    3138:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    313c:	420a      	tst	r2, r1
    313e:	d100      	bne.n	3142 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3140:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3142:	4a35      	ldr	r2, [pc, #212]	; (3218 <pm_system_resume+0x10c>)
    3144:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3148:	0098      	lsls	r0, r3, #2
    314a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    314e:	4933      	ldr	r1, [pc, #204]	; (321c <pm_system_resume+0x110>)
    3150:	b1a9      	cbz	r1, 317e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3152:	7859      	ldrb	r1, [r3, #1]
    3154:	5c10      	ldrb	r0, [r2, r0]
    3156:	f008 fb61 	bl	b81c <pm_state_exit_post_ops>
    315a:	f04f 0320 	mov.w	r3, #32
    315e:	f3ef 8611 	mrs	r6, BASEPRI
    3162:	f383 8812 	msr	BASEPRI_MAX, r3
    3166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    316a:	482d      	ldr	r0, [pc, #180]	; (3220 <pm_system_resume+0x114>)
    316c:	f005 f8a2 	bl	82b4 <z_spin_lock_valid>
    3170:	b158      	cbz	r0, 318a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    3172:	482b      	ldr	r0, [pc, #172]	; (3220 <pm_system_resume+0x114>)
    3174:	f005 f8be 	bl	82f4 <z_spin_lock_set_owner>
	return list->head;
    3178:	4b2a      	ldr	r3, [pc, #168]	; (3224 <pm_system_resume+0x118>)
    317a:	681c      	ldr	r4, [r3, #0]
    317c:	e020      	b.n	31c0 <pm_system_resume+0xb4>
	__asm__ volatile(
    317e:	2300      	movs	r3, #0
    3180:	f383 8811 	msr	BASEPRI, r3
    3184:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3188:	e7e7      	b.n	315a <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    318a:	4c27      	ldr	r4, [pc, #156]	; (3228 <pm_system_resume+0x11c>)
    318c:	238e      	movs	r3, #142	; 0x8e
    318e:	4622      	mov	r2, r4
    3190:	4926      	ldr	r1, [pc, #152]	; (322c <pm_system_resume+0x120>)
    3192:	4827      	ldr	r0, [pc, #156]	; (3230 <pm_system_resume+0x124>)
    3194:	f008 f93a 	bl	b40c <assert_print>
    3198:	4921      	ldr	r1, [pc, #132]	; (3220 <pm_system_resume+0x114>)
    319a:	4826      	ldr	r0, [pc, #152]	; (3234 <pm_system_resume+0x128>)
    319c:	f008 f936 	bl	b40c <assert_print>
    31a0:	218e      	movs	r1, #142	; 0x8e
    31a2:	4620      	mov	r0, r4
    31a4:	f008 f92b 	bl	b3fe <assert_post_action>
    31a8:	e7e3      	b.n	3172 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    31aa:	4b19      	ldr	r3, [pc, #100]	; (3210 <pm_system_resume+0x104>)
    31ac:	7d1b      	ldrb	r3, [r3, #20]
    31ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31b2:	4919      	ldr	r1, [pc, #100]	; (3218 <pm_system_resume+0x10c>)
    31b4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    31b8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    31ba:	b10c      	cbz	r4, 31c0 <pm_system_resume+0xb4>
	return node->next;
    31bc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    31be:	b124      	cbz	r4, 31ca <pm_system_resume+0xbe>
    31c0:	b11c      	cbz	r4, 31ca <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    31c2:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    31c4:	2a00      	cmp	r2, #0
    31c6:	d1f0      	bne.n	31aa <pm_system_resume+0x9e>
    31c8:	e7f7      	b.n	31ba <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    31ca:	4815      	ldr	r0, [pc, #84]	; (3220 <pm_system_resume+0x114>)
    31cc:	f005 f882 	bl	82d4 <z_spin_unlock_valid>
    31d0:	b170      	cbz	r0, 31f0 <pm_system_resume+0xe4>
	__asm__ volatile(
    31d2:	f386 8811 	msr	BASEPRI, r6
    31d6:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    31da:	4a0f      	ldr	r2, [pc, #60]	; (3218 <pm_system_resume+0x10c>)
    31dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    31e0:	00a9      	lsls	r1, r5, #2
    31e2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    31e6:	2300      	movs	r3, #0
    31e8:	5053      	str	r3, [r2, r1]
    31ea:	606b      	str	r3, [r5, #4]
    31ec:	60ab      	str	r3, [r5, #8]
}
    31ee:	e7a7      	b.n	3140 <pm_system_resume+0x34>
    31f0:	4c0d      	ldr	r4, [pc, #52]	; (3228 <pm_system_resume+0x11c>)
    31f2:	23b9      	movs	r3, #185	; 0xb9
    31f4:	4622      	mov	r2, r4
    31f6:	4910      	ldr	r1, [pc, #64]	; (3238 <pm_system_resume+0x12c>)
    31f8:	480d      	ldr	r0, [pc, #52]	; (3230 <pm_system_resume+0x124>)
    31fa:	f008 f907 	bl	b40c <assert_print>
    31fe:	4908      	ldr	r1, [pc, #32]	; (3220 <pm_system_resume+0x114>)
    3200:	480e      	ldr	r0, [pc, #56]	; (323c <pm_system_resume+0x130>)
    3202:	f008 f903 	bl	b40c <assert_print>
    3206:	21b9      	movs	r1, #185	; 0xb9
    3208:	4620      	mov	r0, r4
    320a:	f008 f8f8 	bl	b3fe <assert_post_action>
    320e:	e7e0      	b.n	31d2 <pm_system_resume+0xc6>
    3210:	20001154 	.word	0x20001154
    3214:	200006b0 	.word	0x200006b0
    3218:	200006a0 	.word	0x200006a0
    321c:	0000b81d 	.word	0x0000b81d
    3220:	20000694 	.word	0x20000694
    3224:	20000698 	.word	0x20000698
    3228:	0000cfb0 	.word	0x0000cfb0
    322c:	0000d010 	.word	0x0000d010
    3230:	0000c8bc 	.word	0x0000c8bc
    3234:	0000d028 	.word	0x0000d028
    3238:	0000cfe0 	.word	0x0000cfe0
    323c:	0000cff8 	.word	0x0000cff8

00003240 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3240:	b570      	push	{r4, r5, r6, lr}
    3242:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3244:	4b6d      	ldr	r3, [pc, #436]	; (33fc <pm_system_suspend+0x1bc>)
    3246:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3248:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    324a:	f3bf 8f5b 	dmb	ish
    324e:	4b6c      	ldr	r3, [pc, #432]	; (3400 <pm_system_suspend+0x1c0>)
    3250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3254:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3258:	f005 021f 	and.w	r2, r5, #31
    325c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    325e:	f013 0f01 	tst.w	r3, #1
    3262:	d01d      	beq.n	32a0 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3264:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3268:	4a66      	ldr	r2, [pc, #408]	; (3404 <pm_system_suspend+0x1c4>)
    326a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    326e:	b333      	cbz	r3, 32be <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3270:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3274:	d139      	bne.n	32ea <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3276:	f005 fe87 	bl	8f88 <k_sched_lock>
	__asm__ volatile(
    327a:	f04f 0320 	mov.w	r3, #32
    327e:	f3ef 8611 	mrs	r6, BASEPRI
    3282:	f383 8812 	msr	BASEPRI_MAX, r3
    3286:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    328a:	485f      	ldr	r0, [pc, #380]	; (3408 <pm_system_suspend+0x1c8>)
    328c:	f005 f812 	bl	82b4 <z_spin_lock_valid>
    3290:	2800      	cmp	r0, #0
    3292:	d040      	beq.n	3316 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    3294:	485c      	ldr	r0, [pc, #368]	; (3408 <pm_system_suspend+0x1c8>)
    3296:	f005 f82d 	bl	82f4 <z_spin_lock_set_owner>
	return list->head;
    329a:	4b5c      	ldr	r3, [pc, #368]	; (340c <pm_system_suspend+0x1cc>)
    329c:	681c      	ldr	r4, [r3, #0]
    329e:	e055      	b.n	334c <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    32a0:	4601      	mov	r1, r0
    32a2:	4628      	mov	r0, r5
    32a4:	f000 f8d6 	bl	3454 <pm_policy_next_state>
		if (info != NULL) {
    32a8:	2800      	cmp	r0, #0
    32aa:	d0db      	beq.n	3264 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    32ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    32b0:	4a54      	ldr	r2, [pc, #336]	; (3404 <pm_system_suspend+0x1c4>)
    32b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    32b6:	c807      	ldmia	r0, {r0, r1, r2}
    32b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    32bc:	e7d2      	b.n	3264 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    32be:	f005 021f 	and.w	r2, r5, #31
    32c2:	2301      	movs	r3, #1
    32c4:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32c6:	096d      	lsrs	r5, r5, #5
    32c8:	4a4d      	ldr	r2, [pc, #308]	; (3400 <pm_system_suspend+0x1c0>)
    32ca:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    32ce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32d0:	f3bf 8f5b 	dmb	ish
    32d4:	e855 2f00 	ldrex	r2, [r5]
    32d8:	401a      	ands	r2, r3
    32da:	e845 2100 	strex	r1, r2, [r5]
    32de:	2900      	cmp	r1, #0
    32e0:	d1f8      	bne.n	32d4 <pm_system_suspend+0x94>
    32e2:	f3bf 8f5b 	dmb	ish
		ret = false;
    32e6:	2000      	movs	r0, #0
		goto end;
    32e8:	e077      	b.n	33da <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    32ea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    32ee:	4a45      	ldr	r2, [pc, #276]	; (3404 <pm_system_suspend+0x1c4>)
    32f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    32f4:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    32f6:	0c41      	lsrs	r1, r0, #17
    32f8:	03c0      	lsls	r0, r0, #15
    32fa:	4b45      	ldr	r3, [pc, #276]	; (3410 <pm_system_suspend+0x1d0>)
    32fc:	18c0      	adds	r0, r0, r3
    32fe:	4a45      	ldr	r2, [pc, #276]	; (3414 <pm_system_suspend+0x1d4>)
    3300:	f04f 0300 	mov.w	r3, #0
    3304:	f141 0100 	adc.w	r1, r1, #0
    3308:	f7fd f8dc 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    330c:	2101      	movs	r1, #1
    330e:	1a20      	subs	r0, r4, r0
    3310:	f007 f9ca 	bl	a6a8 <z_set_timeout_expiry>
    3314:	e7af      	b.n	3276 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3316:	4c40      	ldr	r4, [pc, #256]	; (3418 <pm_system_suspend+0x1d8>)
    3318:	238e      	movs	r3, #142	; 0x8e
    331a:	4622      	mov	r2, r4
    331c:	493f      	ldr	r1, [pc, #252]	; (341c <pm_system_suspend+0x1dc>)
    331e:	4840      	ldr	r0, [pc, #256]	; (3420 <pm_system_suspend+0x1e0>)
    3320:	f008 f874 	bl	b40c <assert_print>
    3324:	4938      	ldr	r1, [pc, #224]	; (3408 <pm_system_suspend+0x1c8>)
    3326:	483f      	ldr	r0, [pc, #252]	; (3424 <pm_system_suspend+0x1e4>)
    3328:	f008 f870 	bl	b40c <assert_print>
    332c:	218e      	movs	r1, #142	; 0x8e
    332e:	4620      	mov	r0, r4
    3330:	f008 f865 	bl	b3fe <assert_post_action>
    3334:	e7ae      	b.n	3294 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3336:	4b31      	ldr	r3, [pc, #196]	; (33fc <pm_system_suspend+0x1bc>)
    3338:	7d1b      	ldrb	r3, [r3, #20]
    333a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    333e:	4931      	ldr	r1, [pc, #196]	; (3404 <pm_system_suspend+0x1c4>)
    3340:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3344:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3346:	b10c      	cbz	r4, 334c <pm_system_suspend+0x10c>
	return node->next;
    3348:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    334a:	b124      	cbz	r4, 3356 <pm_system_suspend+0x116>
    334c:	b11c      	cbz	r4, 3356 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    334e:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    3350:	2a00      	cmp	r2, #0
    3352:	d1f0      	bne.n	3336 <pm_system_suspend+0xf6>
    3354:	e7f7      	b.n	3346 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3356:	482c      	ldr	r0, [pc, #176]	; (3408 <pm_system_suspend+0x1c8>)
    3358:	f004 ffbc 	bl	82d4 <z_spin_unlock_valid>
    335c:	2800      	cmp	r0, #0
    335e:	d03d      	beq.n	33dc <pm_system_suspend+0x19c>
	__asm__ volatile(
    3360:	f386 8811 	msr	BASEPRI, r6
    3364:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3368:	f005 031f 	and.w	r3, r5, #31
    336c:	2101      	movs	r1, #1
    336e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3370:	096b      	lsrs	r3, r5, #5
    3372:	4a2d      	ldr	r2, [pc, #180]	; (3428 <pm_system_suspend+0x1e8>)
    3374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3378:	f3bf 8f5b 	dmb	ish
    337c:	e853 2f00 	ldrex	r2, [r3]
    3380:	430a      	orrs	r2, r1
    3382:	e843 2000 	strex	r0, r2, [r3]
    3386:	2800      	cmp	r0, #0
    3388:	d1f8      	bne.n	337c <pm_system_suspend+0x13c>
    338a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    338e:	4b27      	ldr	r3, [pc, #156]	; (342c <pm_system_suspend+0x1ec>)
    3390:	b14b      	cbz	r3, 33a6 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    3392:	4b1c      	ldr	r3, [pc, #112]	; (3404 <pm_system_suspend+0x1c4>)
    3394:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    3398:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    339c:	7849      	ldrb	r1, [r1, #1]
    339e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    33a2:	f008 fa2f 	bl	b804 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    33a6:	f7ff feb1 	bl	310c <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    33aa:	f005 031f 	and.w	r3, r5, #31
    33ae:	2401      	movs	r4, #1
    33b0:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33b4:	096d      	lsrs	r5, r5, #5
    33b6:	4a12      	ldr	r2, [pc, #72]	; (3400 <pm_system_suspend+0x1c0>)
    33b8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    33bc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33be:	f3bf 8f5b 	dmb	ish
    33c2:	e855 2f00 	ldrex	r2, [r5]
    33c6:	401a      	ands	r2, r3
    33c8:	e845 2100 	strex	r1, r2, [r5]
    33cc:	2900      	cmp	r1, #0
    33ce:	d1f8      	bne.n	33c2 <pm_system_suspend+0x182>
    33d0:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    33d4:	f006 fb64 	bl	9aa0 <k_sched_unlock>
	bool ret = true;
    33d8:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    33da:	bd70      	pop	{r4, r5, r6, pc}
    33dc:	4c0e      	ldr	r4, [pc, #56]	; (3418 <pm_system_suspend+0x1d8>)
    33de:	23b9      	movs	r3, #185	; 0xb9
    33e0:	4622      	mov	r2, r4
    33e2:	4913      	ldr	r1, [pc, #76]	; (3430 <pm_system_suspend+0x1f0>)
    33e4:	480e      	ldr	r0, [pc, #56]	; (3420 <pm_system_suspend+0x1e0>)
    33e6:	f008 f811 	bl	b40c <assert_print>
    33ea:	4907      	ldr	r1, [pc, #28]	; (3408 <pm_system_suspend+0x1c8>)
    33ec:	4811      	ldr	r0, [pc, #68]	; (3434 <pm_system_suspend+0x1f4>)
    33ee:	f008 f80d 	bl	b40c <assert_print>
    33f2:	21b9      	movs	r1, #185	; 0xb9
    33f4:	4620      	mov	r0, r4
    33f6:	f008 f802 	bl	b3fe <assert_post_action>
    33fa:	e7b1      	b.n	3360 <pm_system_suspend+0x120>
    33fc:	20001154 	.word	0x20001154
    3400:	200006ac 	.word	0x200006ac
    3404:	200006a0 	.word	0x200006a0
    3408:	20000694 	.word	0x20000694
    340c:	20000698 	.word	0x20000698
    3410:	000f423f 	.word	0x000f423f
    3414:	000f4240 	.word	0x000f4240
    3418:	0000cfb0 	.word	0x0000cfb0
    341c:	0000d010 	.word	0x0000d010
    3420:	0000c8bc 	.word	0x0000c8bc
    3424:	0000d028 	.word	0x0000d028
    3428:	200006b0 	.word	0x200006b0
    342c:	0000b805 	.word	0x0000b805
    3430:	0000cfe0 	.word	0x0000cfe0
    3434:	0000cff8 	.word	0x0000cff8

00003438 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3438:	f3bf 8f5b 	dmb	ish
    343c:	4b04      	ldr	r3, [pc, #16]	; (3450 <pm_policy_state_lock_is_active+0x18>)
    343e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3442:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3446:	3800      	subs	r0, #0
    3448:	bf18      	it	ne
    344a:	2001      	movne	r0, #1
    344c:	4770      	bx	lr
    344e:	bf00      	nop
    3450:	200006b4 	.word	0x200006b4

00003454 <pm_policy_next_state>:
{
    3454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3458:	b082      	sub	sp, #8
    345a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    345c:	a901      	add	r1, sp, #4
    345e:	f000 f843 	bl	34e8 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3462:	1e44      	subs	r4, r0, #1
    3464:	b224      	sxth	r4, r4
    3466:	e007      	b.n	3478 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    3468:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    346c:	d032      	beq.n	34d4 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    346e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    3470:	42b0      	cmp	r0, r6
    3472:	d92f      	bls.n	34d4 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3474:	3c01      	subs	r4, #1
    3476:	b224      	sxth	r4, r4
    3478:	2c00      	cmp	r4, #0
    347a:	db2a      	blt.n	34d2 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    347c:	9b01      	ldr	r3, [sp, #4]
    347e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3482:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    3486:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    348a:	f7ff ffd5 	bl	3438 <pm_policy_state_lock_is_active>
    348e:	2800      	cmp	r0, #0
    3490:	d1f0      	bne.n	3474 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    3492:	6868      	ldr	r0, [r5, #4]
    3494:	0c41      	lsrs	r1, r0, #17
    3496:	03c0      	lsls	r0, r0, #15
    3498:	4f10      	ldr	r7, [pc, #64]	; (34dc <pm_policy_next_state+0x88>)
    349a:	19c0      	adds	r0, r0, r7
    349c:	4a10      	ldr	r2, [pc, #64]	; (34e0 <pm_policy_next_state+0x8c>)
    349e:	f04f 0300 	mov.w	r3, #0
    34a2:	f141 0100 	adc.w	r1, r1, #0
    34a6:	f7fd f80d 	bl	4c4 <__aeabi_uldivmod>
    34aa:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    34ac:	68ab      	ldr	r3, [r5, #8]
    34ae:	0c59      	lsrs	r1, r3, #17
    34b0:	03db      	lsls	r3, r3, #15
    34b2:	19d8      	adds	r0, r3, r7
    34b4:	4a0a      	ldr	r2, [pc, #40]	; (34e0 <pm_policy_next_state+0x8c>)
    34b6:	f04f 0300 	mov.w	r3, #0
    34ba:	f141 0100 	adc.w	r1, r1, #0
    34be:	f7fd f801 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    34c2:	4b08      	ldr	r3, [pc, #32]	; (34e4 <pm_policy_next_state+0x90>)
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    34ca:	d0cd      	beq.n	3468 <pm_policy_next_state+0x14>
    34cc:	4283      	cmp	r3, r0
    34ce:	d8cb      	bhi.n	3468 <pm_policy_next_state+0x14>
    34d0:	e7d0      	b.n	3474 <pm_policy_next_state+0x20>
	return NULL;
    34d2:	2500      	movs	r5, #0
}
    34d4:	4628      	mov	r0, r5
    34d6:	b002      	add	sp, #8
    34d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34dc:	000f423f 	.word	0x000f423f
    34e0:	000f4240 	.word	0x000f4240
    34e4:	200000a0 	.word	0x200000a0

000034e8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    34e8:	b908      	cbnz	r0, 34ee <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    34ea:	4b02      	ldr	r3, [pc, #8]	; (34f4 <pm_state_cpu_get_all+0xc>)
    34ec:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    34ee:	2000      	movs	r0, #0
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	0000d5ac 	.word	0x0000d5ac

000034f8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    34f8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    34fa:	4802      	ldr	r0, [pc, #8]	; (3504 <nrf_cc3xx_platform_abort_init+0xc>)
    34fc:	f007 fc04 	bl	ad08 <nrf_cc3xx_platform_set_abort>
}
    3500:	bd08      	pop	{r3, pc}
    3502:	bf00      	nop
    3504:	0000d5ac 	.word	0x0000d5ac

00003508 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3508:	b1d0      	cbz	r0, 3540 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    350a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    350c:	6842      	ldr	r2, [r0, #4]
    350e:	2a04      	cmp	r2, #4
    3510:	d005      	beq.n	351e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3512:	b1d2      	cbz	r2, 354a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3514:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3516:	f005 fa2d 	bl	8974 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    351a:	2000      	movs	r0, #0
    }
}
    351c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    351e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3520:	2200      	movs	r2, #0
    3522:	f3bf 8f5b 	dmb	ish
    3526:	e853 1f00 	ldrex	r1, [r3]
    352a:	2901      	cmp	r1, #1
    352c:	d103      	bne.n	3536 <mutex_unlock_platform+0x2e>
    352e:	e843 2000 	strex	r0, r2, [r3]
    3532:	2800      	cmp	r0, #0
    3534:	d1f7      	bne.n	3526 <mutex_unlock_platform+0x1e>
    3536:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    353a:	d104      	bne.n	3546 <mutex_unlock_platform+0x3e>
    353c:	4610      	mov	r0, r2
    353e:	e7ed      	b.n	351c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3540:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3544:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3546:	4802      	ldr	r0, [pc, #8]	; (3550 <mutex_unlock_platform+0x48>)
    3548:	e7e8      	b.n	351c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    354a:	4802      	ldr	r0, [pc, #8]	; (3554 <mutex_unlock_platform+0x4c>)
    354c:	e7e6      	b.n	351c <mutex_unlock_platform+0x14>
    354e:	bf00      	nop
    3550:	ffff8fe9 	.word	0xffff8fe9
    3554:	ffff8fea 	.word	0xffff8fea

00003558 <mutex_lock_platform>:
    if(mutex == NULL) {
    3558:	b320      	cbz	r0, 35a4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    355a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    355c:	6842      	ldr	r2, [r0, #4]
    355e:	2a04      	cmp	r2, #4
    3560:	d002      	beq.n	3568 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3562:	b992      	cbnz	r2, 358a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3564:	4811      	ldr	r0, [pc, #68]	; (35ac <mutex_lock_platform+0x54>)
    3566:	e00f      	b.n	3588 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3568:	6803      	ldr	r3, [r0, #0]
    356a:	2201      	movs	r2, #1
    356c:	f3bf 8f5b 	dmb	ish
    3570:	e853 1f00 	ldrex	r1, [r3]
    3574:	2900      	cmp	r1, #0
    3576:	d103      	bne.n	3580 <mutex_lock_platform+0x28>
    3578:	e843 2000 	strex	r0, r2, [r3]
    357c:	2800      	cmp	r0, #0
    357e:	d1f7      	bne.n	3570 <mutex_lock_platform+0x18>
    3580:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3584:	d10c      	bne.n	35a0 <mutex_lock_platform+0x48>
    3586:	2000      	movs	r0, #0
}
    3588:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    358a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    358c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3594:	f005 f8ce 	bl	8734 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3598:	2800      	cmp	r0, #0
    359a:	d0f5      	beq.n	3588 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    359c:	4804      	ldr	r0, [pc, #16]	; (35b0 <mutex_lock_platform+0x58>)
    359e:	e7f3      	b.n	3588 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    35a0:	4803      	ldr	r0, [pc, #12]	; (35b0 <mutex_lock_platform+0x58>)
    35a2:	e7f1      	b.n	3588 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    35a4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    35a8:	4770      	bx	lr
    35aa:	bf00      	nop
    35ac:	ffff8fea 	.word	0xffff8fea
    35b0:	ffff8fe9 	.word	0xffff8fe9

000035b4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    35b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    35b6:	4604      	mov	r4, r0
    35b8:	b188      	cbz	r0, 35de <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    35ba:	6863      	ldr	r3, [r4, #4]
    35bc:	2b04      	cmp	r3, #4
    35be:	d00d      	beq.n	35dc <mutex_free_platform+0x28>
    35c0:	2b08      	cmp	r3, #8
    35c2:	d00b      	beq.n	35dc <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    35c4:	b153      	cbz	r3, 35dc <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    35c6:	f013 0f02 	tst.w	r3, #2
    35ca:	d00d      	beq.n	35e8 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    35cc:	4621      	mov	r1, r4
    35ce:	4809      	ldr	r0, [pc, #36]	; (35f4 <mutex_free_platform+0x40>)
    35d0:	f004 fdfa 	bl	81c8 <k_mem_slab_free>
        mutex->mutex = NULL;
    35d4:	2300      	movs	r3, #0
    35d6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    35d8:	2300      	movs	r3, #0
    35da:	6063      	str	r3, [r4, #4]
}
    35dc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    35de:	4b06      	ldr	r3, [pc, #24]	; (35f8 <mutex_free_platform+0x44>)
    35e0:	685b      	ldr	r3, [r3, #4]
    35e2:	4806      	ldr	r0, [pc, #24]	; (35fc <mutex_free_platform+0x48>)
    35e4:	4798      	blx	r3
    35e6:	e7e8      	b.n	35ba <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    35e8:	2214      	movs	r2, #20
    35ea:	2100      	movs	r1, #0
    35ec:	6820      	ldr	r0, [r4, #0]
    35ee:	f008 f8d4 	bl	b79a <memset>
    35f2:	e7f1      	b.n	35d8 <mutex_free_platform+0x24>
    35f4:	200006d0 	.word	0x200006d0
    35f8:	2000017c 	.word	0x2000017c
    35fc:	0000d5b4 	.word	0x0000d5b4

00003600 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3600:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3602:	4604      	mov	r4, r0
    3604:	b178      	cbz	r0, 3626 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3606:	6863      	ldr	r3, [r4, #4]
    3608:	2b04      	cmp	r3, #4
    360a:	d00b      	beq.n	3624 <mutex_init_platform+0x24>
    360c:	2b08      	cmp	r3, #8
    360e:	d009      	beq.n	3624 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3610:	b90b      	cbnz	r3, 3616 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3612:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3614:	b163      	cbz	r3, 3630 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3616:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3618:	f008 fe17 	bl	c24a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    361c:	6863      	ldr	r3, [r4, #4]
    361e:	f043 0301 	orr.w	r3, r3, #1
    3622:	6063      	str	r3, [r4, #4]
}
    3624:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3626:	4b0f      	ldr	r3, [pc, #60]	; (3664 <mutex_init_platform+0x64>)
    3628:	685b      	ldr	r3, [r3, #4]
    362a:	480f      	ldr	r0, [pc, #60]	; (3668 <mutex_init_platform+0x68>)
    362c:	4798      	blx	r3
    362e:	e7ea      	b.n	3606 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3638:	4621      	mov	r1, r4
    363a:	480c      	ldr	r0, [pc, #48]	; (366c <mutex_init_platform+0x6c>)
    363c:	f004 fd4e 	bl	80dc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3640:	b908      	cbnz	r0, 3646 <mutex_init_platform+0x46>
    3642:	6823      	ldr	r3, [r4, #0]
    3644:	b91b      	cbnz	r3, 364e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3646:	4b07      	ldr	r3, [pc, #28]	; (3664 <mutex_init_platform+0x64>)
    3648:	685b      	ldr	r3, [r3, #4]
    364a:	4809      	ldr	r0, [pc, #36]	; (3670 <mutex_init_platform+0x70>)
    364c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    364e:	2214      	movs	r2, #20
    3650:	2100      	movs	r1, #0
    3652:	6820      	ldr	r0, [r4, #0]
    3654:	f008 f8a1 	bl	b79a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3658:	6863      	ldr	r3, [r4, #4]
    365a:	f043 0302 	orr.w	r3, r3, #2
    365e:	6063      	str	r3, [r4, #4]
    3660:	e7d9      	b.n	3616 <mutex_init_platform+0x16>
    3662:	bf00      	nop
    3664:	2000017c 	.word	0x2000017c
    3668:	0000d5b4 	.word	0x0000d5b4
    366c:	200006d0 	.word	0x200006d0
    3670:	0000d5dc 	.word	0x0000d5dc

00003674 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3674:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3676:	2340      	movs	r3, #64	; 0x40
    3678:	2214      	movs	r2, #20
    367a:	4904      	ldr	r1, [pc, #16]	; (368c <nrf_cc3xx_platform_mutex_init+0x18>)
    367c:	4804      	ldr	r0, [pc, #16]	; (3690 <nrf_cc3xx_platform_mutex_init+0x1c>)
    367e:	f008 fd90 	bl	c1a2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3682:	4904      	ldr	r1, [pc, #16]	; (3694 <nrf_cc3xx_platform_mutex_init+0x20>)
    3684:	4804      	ldr	r0, [pc, #16]	; (3698 <nrf_cc3xx_platform_mutex_init+0x24>)
    3686:	f007 fb9f 	bl	adc8 <nrf_cc3xx_platform_set_mutexes>
}
    368a:	bd08      	pop	{r3, pc}
    368c:	200006f0 	.word	0x200006f0
    3690:	200006d0 	.word	0x200006d0
    3694:	0000d61c 	.word	0x0000d61c
    3698:	0000d60c 	.word	0x0000d60c

0000369c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    369c:	4901      	ldr	r1, [pc, #4]	; (36a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    369e:	2210      	movs	r2, #16
	str	r2, [r1]
    36a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    36a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    36a4:	e000ed10 	.word	0xe000ed10

000036a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    36a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    36aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    36ac:	f380 8811 	msr	BASEPRI, r0
	isb
    36b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    36b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    36b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    36ba:	b662      	cpsie	i
	isb
    36bc:	f3bf 8f6f 	isb	sy

	bx	lr
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop

000036c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    36c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    36c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    36c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    36cc:	bf20      	wfe

	msr	BASEPRI, r0
    36ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    36d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop

000036d8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    36d8:	b570      	push	{r4, r5, r6, lr}
    36da:	b086      	sub	sp, #24
    36dc:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    36de:	4e1e      	ldr	r6, [pc, #120]	; (3758 <esf_dump+0x80>)
    36e0:	6883      	ldr	r3, [r0, #8]
    36e2:	9305      	str	r3, [sp, #20]
    36e4:	6843      	ldr	r3, [r0, #4]
    36e6:	9304      	str	r3, [sp, #16]
    36e8:	6803      	ldr	r3, [r0, #0]
    36ea:	9303      	str	r3, [sp, #12]
    36ec:	4b1b      	ldr	r3, [pc, #108]	; (375c <esf_dump+0x84>)
    36ee:	9302      	str	r3, [sp, #8]
    36f0:	2400      	movs	r4, #0
    36f2:	9401      	str	r4, [sp, #4]
    36f4:	9400      	str	r4, [sp, #0]
    36f6:	4623      	mov	r3, r4
    36f8:	2201      	movs	r2, #1
    36fa:	4631      	mov	r1, r6
    36fc:	4620      	mov	r0, r4
    36fe:	f007 ff39 	bl	b574 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3702:	696b      	ldr	r3, [r5, #20]
    3704:	9305      	str	r3, [sp, #20]
    3706:	692b      	ldr	r3, [r5, #16]
    3708:	9304      	str	r3, [sp, #16]
    370a:	68eb      	ldr	r3, [r5, #12]
    370c:	9303      	str	r3, [sp, #12]
    370e:	4b14      	ldr	r3, [pc, #80]	; (3760 <esf_dump+0x88>)
    3710:	9302      	str	r3, [sp, #8]
    3712:	9401      	str	r4, [sp, #4]
    3714:	9400      	str	r4, [sp, #0]
    3716:	4623      	mov	r3, r4
    3718:	2201      	movs	r2, #1
    371a:	4631      	mov	r1, r6
    371c:	4620      	mov	r0, r4
    371e:	f007 ff29 	bl	b574 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3722:	69eb      	ldr	r3, [r5, #28]
    3724:	9303      	str	r3, [sp, #12]
    3726:	4b0f      	ldr	r3, [pc, #60]	; (3764 <esf_dump+0x8c>)
    3728:	9302      	str	r3, [sp, #8]
    372a:	9401      	str	r4, [sp, #4]
    372c:	9400      	str	r4, [sp, #0]
    372e:	4623      	mov	r3, r4
    3730:	2201      	movs	r2, #1
    3732:	4631      	mov	r1, r6
    3734:	4620      	mov	r0, r4
    3736:	f007 ff1d 	bl	b574 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    373a:	69ab      	ldr	r3, [r5, #24]
    373c:	9303      	str	r3, [sp, #12]
    373e:	4b0a      	ldr	r3, [pc, #40]	; (3768 <esf_dump+0x90>)
    3740:	9302      	str	r3, [sp, #8]
    3742:	9401      	str	r4, [sp, #4]
    3744:	9400      	str	r4, [sp, #0]
    3746:	4623      	mov	r3, r4
    3748:	2201      	movs	r2, #1
    374a:	4631      	mov	r1, r6
    374c:	4620      	mov	r0, r4
    374e:	f007 ff11 	bl	b574 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    3752:	b006      	add	sp, #24
    3754:	bd70      	pop	{r4, r5, r6, pc}
    3756:	bf00      	nop
    3758:	0000c624 	.word	0x0000c624
    375c:	0000d630 	.word	0x0000d630
    3760:	0000d660 	.word	0x0000d660
    3764:	0000d690 	.word	0x0000d690
    3768:	0000d6a0 	.word	0x0000d6a0

0000376c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    376c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    376e:	2800      	cmp	r0, #0
    3770:	db07      	blt.n	3782 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3772:	f000 021f 	and.w	r2, r0, #31
    3776:	0940      	lsrs	r0, r0, #5
    3778:	2301      	movs	r3, #1
    377a:	4093      	lsls	r3, r2
    377c:	4a01      	ldr	r2, [pc, #4]	; (3784 <arch_irq_enable+0x18>)
    377e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    3782:	4770      	bx	lr
    3784:	e000e100 	.word	0xe000e100

00003788 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3788:	0942      	lsrs	r2, r0, #5
    378a:	4b05      	ldr	r3, [pc, #20]	; (37a0 <arch_irq_is_enabled+0x18>)
    378c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3790:	f000 001f 	and.w	r0, r0, #31
    3794:	2301      	movs	r3, #1
    3796:	fa03 f000 	lsl.w	r0, r3, r0
}
    379a:	4010      	ands	r0, r2
    379c:	4770      	bx	lr
    379e:	bf00      	nop
    37a0:	e000e100 	.word	0xe000e100

000037a4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    37a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37a6:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    37a8:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    37aa:	2d07      	cmp	r5, #7
    37ac:	d80b      	bhi.n	37c6 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    37ae:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    37b0:	2800      	cmp	r0, #0
    37b2:	db1b      	blt.n	37ec <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37b4:	016d      	lsls	r5, r5, #5
    37b6:	b2ed      	uxtb	r5, r5
    37b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    37bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    37c0:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    37c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37c6:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    37c8:	4f0c      	ldr	r7, [pc, #48]	; (37fc <z_arm_irq_priority_set+0x58>)
    37ca:	2357      	movs	r3, #87	; 0x57
    37cc:	463a      	mov	r2, r7
    37ce:	490c      	ldr	r1, [pc, #48]	; (3800 <z_arm_irq_priority_set+0x5c>)
    37d0:	480c      	ldr	r0, [pc, #48]	; (3804 <z_arm_irq_priority_set+0x60>)
    37d2:	f007 fe1b 	bl	b40c <assert_print>
    37d6:	2307      	movs	r3, #7
    37d8:	4622      	mov	r2, r4
    37da:	4631      	mov	r1, r6
    37dc:	480a      	ldr	r0, [pc, #40]	; (3808 <z_arm_irq_priority_set+0x64>)
    37de:	f007 fe15 	bl	b40c <assert_print>
    37e2:	2157      	movs	r1, #87	; 0x57
    37e4:	4638      	mov	r0, r7
    37e6:	f007 fe0a 	bl	b3fe <assert_post_action>
    37ea:	e7e0      	b.n	37ae <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37ec:	f000 000f 	and.w	r0, r0, #15
    37f0:	016d      	lsls	r5, r5, #5
    37f2:	b2ed      	uxtb	r5, r5
    37f4:	4b05      	ldr	r3, [pc, #20]	; (380c <z_arm_irq_priority_set+0x68>)
    37f6:	541d      	strb	r5, [r3, r0]
}
    37f8:	e7e4      	b.n	37c4 <z_arm_irq_priority_set+0x20>
    37fa:	bf00      	nop
    37fc:	0000d6d0 	.word	0x0000d6d0
    3800:	0000d708 	.word	0x0000d708
    3804:	0000c8bc 	.word	0x0000c8bc
    3808:	0000d724 	.word	0x0000d724
    380c:	e000ed14 	.word	0xe000ed14

00003810 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3810:	bf30      	wfi
    b z_SysNmiOnReset
    3812:	f7ff bffd 	b.w	3810 <z_SysNmiOnReset>
    3816:	bf00      	nop

00003818 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3818:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    381a:	4b0b      	ldr	r3, [pc, #44]	; (3848 <z_arm_prep_c+0x30>)
    381c:	4a0b      	ldr	r2, [pc, #44]	; (384c <z_arm_prep_c+0x34>)
    381e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3822:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3824:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3828:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    382c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3830:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3838:	f004 fb7c 	bl	7f34 <z_bss_zero>
	z_data_copy();
    383c:	f006 fd42 	bl	a2c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3840:	f000 fc6a 	bl	4118 <z_arm_interrupt_init>
	z_cstart();
    3844:	f004 fbd4 	bl	7ff0 <z_cstart>
    3848:	e000ed00 	.word	0xe000ed00
    384c:	00000000 	.word	0x00000000

00003850 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3850:	4a0a      	ldr	r2, [pc, #40]	; (387c <arch_swap+0x2c>)
    3852:	6893      	ldr	r3, [r2, #8]
    3854:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3858:	4909      	ldr	r1, [pc, #36]	; (3880 <arch_swap+0x30>)
    385a:	6809      	ldr	r1, [r1, #0]
    385c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3860:	4908      	ldr	r1, [pc, #32]	; (3884 <arch_swap+0x34>)
    3862:	684b      	ldr	r3, [r1, #4]
    3864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3868:	604b      	str	r3, [r1, #4]
    386a:	2300      	movs	r3, #0
    386c:	f383 8811 	msr	BASEPRI, r3
    3870:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3874:	6893      	ldr	r3, [r2, #8]
}
    3876:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    387a:	4770      	bx	lr
    387c:	20001154 	.word	0x20001154
    3880:	0000e3c4 	.word	0x0000e3c4
    3884:	e000ed00 	.word	0xe000ed00

00003888 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3888:	4913      	ldr	r1, [pc, #76]	; (38d8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    388a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    388c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3890:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3892:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3896:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    389a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    389c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    38a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    38a4:	4f0d      	ldr	r7, [pc, #52]	; (38dc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    38a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    38aa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    38ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    38ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    38b0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    38b4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    38b6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    38ba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    38be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    38c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    38c2:	f000 fcd3 	bl	426c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    38c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    38ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    38ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    38d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    38d6:	4770      	bx	lr
    ldr r1, =_kernel
    38d8:	20001154 	.word	0x20001154
    ldr v4, =_SCS_ICSR
    38dc:	e000ed04 	.word	0xe000ed04

000038e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    38e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    38e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    38e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    38ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    38ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    38f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    38f4:	2902      	cmp	r1, #2
    beq _oops
    38f6:	d0ff      	beq.n	38f8 <_oops>

000038f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    38f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    38fa:	f007 fe56 	bl	b5aa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    38fe:	bd01      	pop	{r0, pc}

00003900 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3900:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3902:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3906:	490e      	ldr	r1, [pc, #56]	; (3940 <arch_new_thread+0x40>)
    3908:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    390c:	f021 0101 	bic.w	r1, r1, #1
    3910:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3914:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    391e:	9b02      	ldr	r3, [sp, #8]
    3920:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3924:	9b03      	ldr	r3, [sp, #12]
    3926:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    392a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    392e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3932:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3934:	2300      	movs	r3, #0
    3936:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    393a:	bc10      	pop	{r4}
    393c:	4770      	bx	lr
    393e:	bf00      	nop
    3940:	0000b257 	.word	0x0000b257

00003944 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3944:	4b12      	ldr	r3, [pc, #72]	; (3990 <z_check_thread_stack_fail+0x4c>)
    3946:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    3948:	b302      	cbz	r2, 398c <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    394a:	f110 0f16 	cmn.w	r0, #22
    394e:	d011      	beq.n	3974 <z_check_thread_stack_fail+0x30>
    3950:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3954:	f1a3 0c20 	sub.w	ip, r3, #32
    3958:	4584      	cmp	ip, r0
    395a:	d805      	bhi.n	3968 <z_check_thread_stack_fail+0x24>
    395c:	4283      	cmp	r3, r0
    395e:	d905      	bls.n	396c <z_check_thread_stack_fail+0x28>
    3960:	428b      	cmp	r3, r1
    3962:	d805      	bhi.n	3970 <z_check_thread_stack_fail+0x2c>
    3964:	2100      	movs	r1, #0
    3966:	e00b      	b.n	3980 <z_check_thread_stack_fail+0x3c>
    3968:	2100      	movs	r1, #0
    396a:	e009      	b.n	3980 <z_check_thread_stack_fail+0x3c>
    396c:	2100      	movs	r1, #0
    396e:	e007      	b.n	3980 <z_check_thread_stack_fail+0x3c>
    3970:	2101      	movs	r1, #1
    3972:	e005      	b.n	3980 <z_check_thread_stack_fail+0x3c>
    3974:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3978:	428b      	cmp	r3, r1
    397a:	bf94      	ite	ls
    397c:	2100      	movls	r1, #0
    397e:	2101      	movhi	r1, #1
    3980:	b909      	cbnz	r1, 3986 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3982:	2000      	movs	r0, #0
}
    3984:	4770      	bx	lr
		return thread->stack_info.start;
    3986:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    398a:	4770      	bx	lr
		return 0;
    398c:	2000      	movs	r0, #0
    398e:	4770      	bx	lr
    3990:	20001154 	.word	0x20001154

00003994 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3994:	b508      	push	{r3, lr}
    3996:	460d      	mov	r5, r1
    3998:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    399a:	4b08      	ldr	r3, [pc, #32]	; (39bc <arch_switch_to_main_thread+0x28>)
    399c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    399e:	f000 fc65 	bl	426c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    39a2:	4620      	mov	r0, r4
    39a4:	f385 8809 	msr	PSP, r5
    39a8:	2100      	movs	r1, #0
    39aa:	b663      	cpsie	if
    39ac:	f381 8811 	msr	BASEPRI, r1
    39b0:	f3bf 8f6f 	isb	sy
    39b4:	2200      	movs	r2, #0
    39b6:	2300      	movs	r3, #0
    39b8:	f007 fc4d 	bl	b256 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    39bc:	20001154 	.word	0x20001154

000039c0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    39c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    39c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    39c4:	4a0b      	ldr	r2, [pc, #44]	; (39f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    39c6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    39c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    39ca:	bf1e      	ittt	ne
	movne	r1, #0
    39cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    39ce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    39d0:	f008 fc1f 	blne	c212 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    39d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    39d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    39da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    39de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    39e2:	4905      	ldr	r1, [pc, #20]	; (39f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    39e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    39e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    39e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    39ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    39ee:	4903      	ldr	r1, [pc, #12]	; (39fc <_isr_wrapper+0x3c>)
	bx r1
    39f0:	4708      	bx	r1
    39f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    39f4:	20001154 	.word	0x20001154
	ldr r1, =_sw_isr_table
    39f8:	0000c474 	.word	0x0000c474
	ldr r1, =z_arm_int_exit
    39fc:	00003a01 	.word	0x00003a01

00003a00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3a00:	4b04      	ldr	r3, [pc, #16]	; (3a14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3a02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3a04:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3a06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3a08:	d003      	beq.n	3a12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3a0a:	4903      	ldr	r1, [pc, #12]	; (3a18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3a10:	600a      	str	r2, [r1, #0]

00003a12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3a12:	4770      	bx	lr
	ldr r3, =_kernel
    3a14:	20001154 	.word	0x20001154
	ldr r1, =_SCS_ICSR
    3a18:	e000ed04 	.word	0xe000ed04

00003a1c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	b084      	sub	sp, #16
    3a20:	4605      	mov	r5, r0
    3a22:	460e      	mov	r6, r1
    3a24:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3a26:	4b47      	ldr	r3, [pc, #284]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3a28:	9302      	str	r3, [sp, #8]
    3a2a:	2000      	movs	r0, #0
    3a2c:	9001      	str	r0, [sp, #4]
    3a2e:	9000      	str	r0, [sp, #0]
    3a30:	4603      	mov	r3, r0
    3a32:	2201      	movs	r2, #1
    3a34:	4944      	ldr	r1, [pc, #272]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3a36:	f007 fdcc 	bl	b5d2 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3a3a:	4b44      	ldr	r3, [pc, #272]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3a42:	d125      	bne.n	3a90 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3a44:	4b41      	ldr	r3, [pc, #260]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a48:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3a4c:	d12b      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3a4e:	4b3f      	ldr	r3, [pc, #252]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a52:	f413 7f00 	tst.w	r3, #512	; 0x200
    3a56:	d131      	bne.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3a58:	4b3c      	ldr	r3, [pc, #240]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3a60:	d14f      	bne.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3a62:	4b3a      	ldr	r3, [pc, #232]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a66:	f413 7f80 	tst.w	r3, #256	; 0x100
    3a6a:	d155      	bne.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3a6c:	4b37      	ldr	r3, [pc, #220]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a70:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3a74:	d15b      	bne.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3a76:	4a35      	ldr	r2, [pc, #212]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3a78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3a7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3a7e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3a80:	2101      	movs	r1, #1
    3a82:	4628      	mov	r0, r5
    3a84:	f007 fda3 	bl	b5ce <memory_fault_recoverable>
    3a88:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3a8a:	2000      	movs	r0, #0
    3a8c:	b004      	add	sp, #16
    3a8e:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    3a90:	4b2f      	ldr	r3, [pc, #188]	; (3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>)
    3a92:	9302      	str	r3, [sp, #8]
    3a94:	2000      	movs	r0, #0
    3a96:	9001      	str	r0, [sp, #4]
    3a98:	9000      	str	r0, [sp, #0]
    3a9a:	4603      	mov	r3, r0
    3a9c:	2201      	movs	r2, #1
    3a9e:	492a      	ldr	r1, [pc, #168]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3aa0:	f007 fd97 	bl	b5d2 <z_log_msg2_runtime_create>
    3aa4:	e7ce      	b.n	3a44 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    3aa6:	4b2b      	ldr	r3, [pc, #172]	; (3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>)
    3aa8:	9302      	str	r3, [sp, #8]
    3aaa:	2000      	movs	r0, #0
    3aac:	9001      	str	r0, [sp, #4]
    3aae:	9000      	str	r0, [sp, #0]
    3ab0:	4603      	mov	r3, r0
    3ab2:	2201      	movs	r2, #1
    3ab4:	4924      	ldr	r1, [pc, #144]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3ab6:	f007 fd8c 	bl	b5d2 <z_log_msg2_runtime_create>
    3aba:	e7c8      	b.n	3a4e <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    3abc:	4b26      	ldr	r3, [pc, #152]	; (3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>)
    3abe:	9302      	str	r3, [sp, #8]
    3ac0:	2000      	movs	r0, #0
    3ac2:	9001      	str	r0, [sp, #4]
    3ac4:	9000      	str	r0, [sp, #0]
    3ac6:	4603      	mov	r3, r0
    3ac8:	2201      	movs	r2, #1
    3aca:	491f      	ldr	r1, [pc, #124]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3acc:	f007 fd81 	bl	b5d2 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3ad0:	4b1e      	ldr	r3, [pc, #120]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ad6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3ada:	d0bd      	beq.n	3a58 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3adc:	9203      	str	r2, [sp, #12]
    3ade:	4b1f      	ldr	r3, [pc, #124]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    3ae0:	9302      	str	r3, [sp, #8]
    3ae2:	2000      	movs	r0, #0
    3ae4:	9001      	str	r0, [sp, #4]
    3ae6:	9000      	str	r0, [sp, #0]
    3ae8:	4603      	mov	r3, r0
    3aea:	2201      	movs	r2, #1
    3aec:	4916      	ldr	r1, [pc, #88]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3aee:	f007 fd70 	bl	b5d2 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3af2:	2e00      	cmp	r6, #0
    3af4:	d0b0      	beq.n	3a58 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3af6:	4a15      	ldr	r2, [pc, #84]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3afe:	6293      	str	r3, [r2, #40]	; 0x28
    3b00:	e7aa      	b.n	3a58 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    3b02:	4b17      	ldr	r3, [pc, #92]	; (3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>)
    3b04:	9302      	str	r3, [sp, #8]
    3b06:	2000      	movs	r0, #0
    3b08:	9001      	str	r0, [sp, #4]
    3b0a:	9000      	str	r0, [sp, #0]
    3b0c:	4603      	mov	r3, r0
    3b0e:	2201      	movs	r2, #1
    3b10:	490d      	ldr	r1, [pc, #52]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b12:	f007 fd5e 	bl	b5d2 <z_log_msg2_runtime_create>
    3b16:	e7a4      	b.n	3a62 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    3b18:	4b12      	ldr	r3, [pc, #72]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3b1a:	9302      	str	r3, [sp, #8]
    3b1c:	2000      	movs	r0, #0
    3b1e:	9001      	str	r0, [sp, #4]
    3b20:	9000      	str	r0, [sp, #0]
    3b22:	4603      	mov	r3, r0
    3b24:	2201      	movs	r2, #1
    3b26:	4908      	ldr	r1, [pc, #32]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b28:	f007 fd53 	bl	b5d2 <z_log_msg2_runtime_create>
    3b2c:	e7a3      	b.n	3a76 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3b2e:	4b0e      	ldr	r3, [pc, #56]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3b30:	9302      	str	r3, [sp, #8]
    3b32:	2000      	movs	r0, #0
    3b34:	9001      	str	r0, [sp, #4]
    3b36:	9000      	str	r0, [sp, #0]
    3b38:	4603      	mov	r3, r0
    3b3a:	2201      	movs	r2, #1
    3b3c:	4902      	ldr	r1, [pc, #8]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b3e:	f007 fd48 	bl	b5d2 <z_log_msg2_runtime_create>
    3b42:	e798      	b.n	3a76 <bus_fault+0x5a>
    3b44:	0000d764 	.word	0x0000d764
    3b48:	0000c624 	.word	0x0000c624
    3b4c:	e000ed00 	.word	0xe000ed00
    3b50:	0000d77c 	.word	0x0000d77c
    3b54:	0000d790 	.word	0x0000d790
    3b58:	0000d7a4 	.word	0x0000d7a4
    3b5c:	0000d7c0 	.word	0x0000d7c0
    3b60:	0000d7d8 	.word	0x0000d7d8
    3b64:	0000d7f4 	.word	0x0000d7f4
    3b68:	0000d80c 	.word	0x0000d80c

00003b6c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3b6c:	b500      	push	{lr}
    3b6e:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3b70:	4b3a      	ldr	r3, [pc, #232]	; (3c5c <usage_fault+0xf0>)
    3b72:	9302      	str	r3, [sp, #8]
    3b74:	2000      	movs	r0, #0
    3b76:	9001      	str	r0, [sp, #4]
    3b78:	9000      	str	r0, [sp, #0]
    3b7a:	4603      	mov	r3, r0
    3b7c:	2201      	movs	r2, #1
    3b7e:	4938      	ldr	r1, [pc, #224]	; (3c60 <usage_fault+0xf4>)
    3b80:	f007 fd27 	bl	b5d2 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3b84:	4b37      	ldr	r3, [pc, #220]	; (3c64 <usage_fault+0xf8>)
    3b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3b8c:	d123      	bne.n	3bd6 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3b8e:	4b35      	ldr	r3, [pc, #212]	; (3c64 <usage_fault+0xf8>)
    3b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b92:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3b96:	d129      	bne.n	3bec <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3b98:	4b32      	ldr	r3, [pc, #200]	; (3c64 <usage_fault+0xf8>)
    3b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3ba0:	d12f      	bne.n	3c02 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3ba2:	4b30      	ldr	r3, [pc, #192]	; (3c64 <usage_fault+0xf8>)
    3ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ba6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3baa:	d135      	bne.n	3c18 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3bac:	4b2d      	ldr	r3, [pc, #180]	; (3c64 <usage_fault+0xf8>)
    3bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3bb4:	d13b      	bne.n	3c2e <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3bb6:	4b2b      	ldr	r3, [pc, #172]	; (3c64 <usage_fault+0xf8>)
    3bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3bbe:	d141      	bne.n	3c44 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3bc0:	4a28      	ldr	r2, [pc, #160]	; (3c64 <usage_fault+0xf8>)
    3bc2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3bc4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3bc8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3bcc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3bce:	2000      	movs	r0, #0
    3bd0:	b005      	add	sp, #20
    3bd2:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    3bd6:	4b24      	ldr	r3, [pc, #144]	; (3c68 <usage_fault+0xfc>)
    3bd8:	9302      	str	r3, [sp, #8]
    3bda:	2000      	movs	r0, #0
    3bdc:	9001      	str	r0, [sp, #4]
    3bde:	9000      	str	r0, [sp, #0]
    3be0:	4603      	mov	r3, r0
    3be2:	2201      	movs	r2, #1
    3be4:	491e      	ldr	r1, [pc, #120]	; (3c60 <usage_fault+0xf4>)
    3be6:	f007 fcf4 	bl	b5d2 <z_log_msg2_runtime_create>
    3bea:	e7d0      	b.n	3b8e <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    3bec:	4b1f      	ldr	r3, [pc, #124]	; (3c6c <usage_fault+0x100>)
    3bee:	9302      	str	r3, [sp, #8]
    3bf0:	2000      	movs	r0, #0
    3bf2:	9001      	str	r0, [sp, #4]
    3bf4:	9000      	str	r0, [sp, #0]
    3bf6:	4603      	mov	r3, r0
    3bf8:	2201      	movs	r2, #1
    3bfa:	4919      	ldr	r1, [pc, #100]	; (3c60 <usage_fault+0xf4>)
    3bfc:	f007 fce9 	bl	b5d2 <z_log_msg2_runtime_create>
    3c00:	e7ca      	b.n	3b98 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3c02:	4b1b      	ldr	r3, [pc, #108]	; (3c70 <usage_fault+0x104>)
    3c04:	9302      	str	r3, [sp, #8]
    3c06:	2000      	movs	r0, #0
    3c08:	9001      	str	r0, [sp, #4]
    3c0a:	9000      	str	r0, [sp, #0]
    3c0c:	4603      	mov	r3, r0
    3c0e:	2201      	movs	r2, #1
    3c10:	4913      	ldr	r1, [pc, #76]	; (3c60 <usage_fault+0xf4>)
    3c12:	f007 fcde 	bl	b5d2 <z_log_msg2_runtime_create>
    3c16:	e7c4      	b.n	3ba2 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3c18:	4b16      	ldr	r3, [pc, #88]	; (3c74 <usage_fault+0x108>)
    3c1a:	9302      	str	r3, [sp, #8]
    3c1c:	2000      	movs	r0, #0
    3c1e:	9001      	str	r0, [sp, #4]
    3c20:	9000      	str	r0, [sp, #0]
    3c22:	4603      	mov	r3, r0
    3c24:	2201      	movs	r2, #1
    3c26:	490e      	ldr	r1, [pc, #56]	; (3c60 <usage_fault+0xf4>)
    3c28:	f007 fcd3 	bl	b5d2 <z_log_msg2_runtime_create>
    3c2c:	e7be      	b.n	3bac <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3c2e:	4b12      	ldr	r3, [pc, #72]	; (3c78 <usage_fault+0x10c>)
    3c30:	9302      	str	r3, [sp, #8]
    3c32:	2000      	movs	r0, #0
    3c34:	9001      	str	r0, [sp, #4]
    3c36:	9000      	str	r0, [sp, #0]
    3c38:	4603      	mov	r3, r0
    3c3a:	2201      	movs	r2, #1
    3c3c:	4908      	ldr	r1, [pc, #32]	; (3c60 <usage_fault+0xf4>)
    3c3e:	f007 fcc8 	bl	b5d2 <z_log_msg2_runtime_create>
    3c42:	e7b8      	b.n	3bb6 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3c44:	4b0d      	ldr	r3, [pc, #52]	; (3c7c <usage_fault+0x110>)
    3c46:	9302      	str	r3, [sp, #8]
    3c48:	2000      	movs	r0, #0
    3c4a:	9001      	str	r0, [sp, #4]
    3c4c:	9000      	str	r0, [sp, #0]
    3c4e:	4603      	mov	r3, r0
    3c50:	2201      	movs	r2, #1
    3c52:	4903      	ldr	r1, [pc, #12]	; (3c60 <usage_fault+0xf4>)
    3c54:	f007 fcbd 	bl	b5d2 <z_log_msg2_runtime_create>
    3c58:	e7b2      	b.n	3bc0 <usage_fault+0x54>
    3c5a:	bf00      	nop
    3c5c:	0000d83c 	.word	0x0000d83c
    3c60:	0000c624 	.word	0x0000c624
    3c64:	e000ed00 	.word	0xe000ed00
    3c68:	0000d854 	.word	0x0000d854
    3c6c:	0000d868 	.word	0x0000d868
    3c70:	0000d884 	.word	0x0000d884
    3c74:	0000d8a4 	.word	0x0000d8a4
    3c78:	0000d8cc 	.word	0x0000d8cc
    3c7c:	0000d8e8 	.word	0x0000d8e8

00003c80 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    3c80:	b500      	push	{lr}
    3c82:	b085      	sub	sp, #20
	*recoverable = false;
    3c84:	2000      	movs	r0, #0
    3c86:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    3c88:	4b05      	ldr	r3, [pc, #20]	; (3ca0 <debug_monitor+0x20>)
    3c8a:	9302      	str	r3, [sp, #8]
    3c8c:	9001      	str	r0, [sp, #4]
    3c8e:	9000      	str	r0, [sp, #0]
    3c90:	4603      	mov	r3, r0
    3c92:	2201      	movs	r2, #1
    3c94:	4903      	ldr	r1, [pc, #12]	; (3ca4 <debug_monitor+0x24>)
    3c96:	f007 fc9c 	bl	b5d2 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    3c9a:	b005      	add	sp, #20
    3c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    3ca0:	0000d914 	.word	0x0000d914
    3ca4:	0000c624 	.word	0x0000c624

00003ca8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    3ca8:	b500      	push	{lr}
    3caa:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    3cac:	290f      	cmp	r1, #15
    3cae:	dc10      	bgt.n	3cd2 <reserved_exception+0x2a>
    3cb0:	4b09      	ldr	r3, [pc, #36]	; (3cd8 <reserved_exception+0x30>)
    3cb2:	3910      	subs	r1, #16
    3cb4:	9104      	str	r1, [sp, #16]
    3cb6:	9303      	str	r3, [sp, #12]
    3cb8:	4b08      	ldr	r3, [pc, #32]	; (3cdc <reserved_exception+0x34>)
    3cba:	9302      	str	r3, [sp, #8]
    3cbc:	2000      	movs	r0, #0
    3cbe:	9001      	str	r0, [sp, #4]
    3cc0:	9000      	str	r0, [sp, #0]
    3cc2:	4603      	mov	r3, r0
    3cc4:	2201      	movs	r2, #1
    3cc6:	4906      	ldr	r1, [pc, #24]	; (3ce0 <reserved_exception+0x38>)
    3cc8:	f007 fc83 	bl	b5d2 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    3ccc:	b007      	add	sp, #28
    3cce:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    3cd2:	4b04      	ldr	r3, [pc, #16]	; (3ce4 <reserved_exception+0x3c>)
    3cd4:	e7ed      	b.n	3cb2 <reserved_exception+0xa>
    3cd6:	bf00      	nop
    3cd8:	0000d954 	.word	0x0000d954
    3cdc:	0000d96c 	.word	0x0000d96c
    3ce0:	0000c624 	.word	0x0000c624
    3ce4:	0000d938 	.word	0x0000d938

00003ce8 <mem_manage_fault>:
{
    3ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cea:	b085      	sub	sp, #20
    3cec:	4605      	mov	r5, r0
    3cee:	460c      	mov	r4, r1
    3cf0:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3cf2:	4b5f      	ldr	r3, [pc, #380]	; (3e70 <mem_manage_fault+0x188>)
    3cf4:	9302      	str	r3, [sp, #8]
    3cf6:	2000      	movs	r0, #0
    3cf8:	9001      	str	r0, [sp, #4]
    3cfa:	9000      	str	r0, [sp, #0]
    3cfc:	4603      	mov	r3, r0
    3cfe:	2201      	movs	r2, #1
    3d00:	495c      	ldr	r1, [pc, #368]	; (3e74 <mem_manage_fault+0x18c>)
    3d02:	f007 fc66 	bl	b5d2 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3d06:	4b5c      	ldr	r3, [pc, #368]	; (3e78 <mem_manage_fault+0x190>)
    3d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d0a:	f013 0f10 	tst.w	r3, #16
    3d0e:	d13b      	bne.n	3d88 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3d10:	4b59      	ldr	r3, [pc, #356]	; (3e78 <mem_manage_fault+0x190>)
    3d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d14:	f013 0f08 	tst.w	r3, #8
    3d18:	d141      	bne.n	3d9e <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3d1a:	4b57      	ldr	r3, [pc, #348]	; (3e78 <mem_manage_fault+0x190>)
    3d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d1e:	f013 0f02 	tst.w	r3, #2
    3d22:	d147      	bne.n	3db4 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    3d24:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3d28:	4b53      	ldr	r3, [pc, #332]	; (3e78 <mem_manage_fault+0x190>)
    3d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d2c:	f013 0f01 	tst.w	r3, #1
    3d30:	d166      	bne.n	3e00 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d32:	4b51      	ldr	r3, [pc, #324]	; (3e78 <mem_manage_fault+0x190>)
    3d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d36:	f013 0f20 	tst.w	r3, #32
    3d3a:	d16c      	bne.n	3e16 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d3c:	4b4e      	ldr	r3, [pc, #312]	; (3e78 <mem_manage_fault+0x190>)
    3d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d40:	f013 0f10 	tst.w	r3, #16
    3d44:	d104      	bne.n	3d50 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3d46:	4b4c      	ldr	r3, [pc, #304]	; (3e78 <mem_manage_fault+0x190>)
    3d48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d4a:	f014 0402 	ands.w	r4, r4, #2
    3d4e:	d004      	beq.n	3d5a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3d50:	4b49      	ldr	r3, [pc, #292]	; (3e78 <mem_manage_fault+0x190>)
    3d52:	685c      	ldr	r4, [r3, #4]
    3d54:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3d58:	d168      	bne.n	3e2c <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d5a:	4b47      	ldr	r3, [pc, #284]	; (3e78 <mem_manage_fault+0x190>)
    3d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d5e:	f013 0f20 	tst.w	r3, #32
    3d62:	d004      	beq.n	3d6e <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3d64:	4a44      	ldr	r2, [pc, #272]	; (3e78 <mem_manage_fault+0x190>)
    3d66:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3d6c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3d6e:	4a42      	ldr	r2, [pc, #264]	; (3e78 <mem_manage_fault+0x190>)
    3d70:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3d72:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3d76:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3d78:	2101      	movs	r1, #1
    3d7a:	4628      	mov	r0, r5
    3d7c:	f007 fc27 	bl	b5ce <memory_fault_recoverable>
    3d80:	7030      	strb	r0, [r6, #0]
}
    3d82:	4620      	mov	r0, r4
    3d84:	b005      	add	sp, #20
    3d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    3d88:	4b3c      	ldr	r3, [pc, #240]	; (3e7c <mem_manage_fault+0x194>)
    3d8a:	9302      	str	r3, [sp, #8]
    3d8c:	2000      	movs	r0, #0
    3d8e:	9001      	str	r0, [sp, #4]
    3d90:	9000      	str	r0, [sp, #0]
    3d92:	4603      	mov	r3, r0
    3d94:	2201      	movs	r2, #1
    3d96:	4937      	ldr	r1, [pc, #220]	; (3e74 <mem_manage_fault+0x18c>)
    3d98:	f007 fc1b 	bl	b5d2 <z_log_msg2_runtime_create>
    3d9c:	e7b8      	b.n	3d10 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    3d9e:	4b38      	ldr	r3, [pc, #224]	; (3e80 <mem_manage_fault+0x198>)
    3da0:	9302      	str	r3, [sp, #8]
    3da2:	2000      	movs	r0, #0
    3da4:	9001      	str	r0, [sp, #4]
    3da6:	9000      	str	r0, [sp, #0]
    3da8:	4603      	mov	r3, r0
    3daa:	2201      	movs	r2, #1
    3dac:	4931      	ldr	r1, [pc, #196]	; (3e74 <mem_manage_fault+0x18c>)
    3dae:	f007 fc10 	bl	b5d2 <z_log_msg2_runtime_create>
    3db2:	e7b2      	b.n	3d1a <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    3db4:	4b33      	ldr	r3, [pc, #204]	; (3e84 <mem_manage_fault+0x19c>)
    3db6:	9302      	str	r3, [sp, #8]
    3db8:	2000      	movs	r0, #0
    3dba:	9001      	str	r0, [sp, #4]
    3dbc:	9000      	str	r0, [sp, #0]
    3dbe:	4603      	mov	r3, r0
    3dc0:	2201      	movs	r2, #1
    3dc2:	492c      	ldr	r1, [pc, #176]	; (3e74 <mem_manage_fault+0x18c>)
    3dc4:	f007 fc05 	bl	b5d2 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    3dc8:	4b2b      	ldr	r3, [pc, #172]	; (3e78 <mem_manage_fault+0x190>)
    3dca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3dce:	f013 0f80 	tst.w	r3, #128	; 0x80
    3dd2:	d102      	bne.n	3dda <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    3dd4:	f06f 0715 	mvn.w	r7, #21
    3dd8:	e7a6      	b.n	3d28 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3dda:	9703      	str	r7, [sp, #12]
    3ddc:	4b2a      	ldr	r3, [pc, #168]	; (3e88 <mem_manage_fault+0x1a0>)
    3dde:	9302      	str	r3, [sp, #8]
    3de0:	2000      	movs	r0, #0
    3de2:	9001      	str	r0, [sp, #4]
    3de4:	9000      	str	r0, [sp, #0]
    3de6:	4603      	mov	r3, r0
    3de8:	2201      	movs	r2, #1
    3dea:	4922      	ldr	r1, [pc, #136]	; (3e74 <mem_manage_fault+0x18c>)
    3dec:	f007 fbf1 	bl	b5d2 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3df0:	2c00      	cmp	r4, #0
    3df2:	d099      	beq.n	3d28 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3df4:	4a20      	ldr	r2, [pc, #128]	; (3e78 <mem_manage_fault+0x190>)
    3df6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3dfc:	6293      	str	r3, [r2, #40]	; 0x28
    3dfe:	e793      	b.n	3d28 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3e00:	4b22      	ldr	r3, [pc, #136]	; (3e8c <mem_manage_fault+0x1a4>)
    3e02:	9302      	str	r3, [sp, #8]
    3e04:	2000      	movs	r0, #0
    3e06:	9001      	str	r0, [sp, #4]
    3e08:	9000      	str	r0, [sp, #0]
    3e0a:	4603      	mov	r3, r0
    3e0c:	2201      	movs	r2, #1
    3e0e:	4919      	ldr	r1, [pc, #100]	; (3e74 <mem_manage_fault+0x18c>)
    3e10:	f007 fbdf 	bl	b5d2 <z_log_msg2_runtime_create>
    3e14:	e78d      	b.n	3d32 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    3e16:	4b1e      	ldr	r3, [pc, #120]	; (3e90 <mem_manage_fault+0x1a8>)
    3e18:	9302      	str	r3, [sp, #8]
    3e1a:	2000      	movs	r0, #0
    3e1c:	9001      	str	r0, [sp, #4]
    3e1e:	9000      	str	r0, [sp, #0]
    3e20:	4603      	mov	r3, r0
    3e22:	2201      	movs	r2, #1
    3e24:	4913      	ldr	r1, [pc, #76]	; (3e74 <mem_manage_fault+0x18c>)
    3e26:	f007 fbd4 	bl	b5d2 <z_log_msg2_runtime_create>
    3e2a:	e787      	b.n	3d3c <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3e2c:	4629      	mov	r1, r5
    3e2e:	4638      	mov	r0, r7
    3e30:	f7ff fd88 	bl	3944 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3e34:	4607      	mov	r7, r0
    3e36:	b9b0      	cbnz	r0, 3e66 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3e38:	4b0f      	ldr	r3, [pc, #60]	; (3e78 <mem_manage_fault+0x190>)
    3e3a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3e3c:	f014 0410 	ands.w	r4, r4, #16
    3e40:	d08b      	beq.n	3d5a <mem_manage_fault+0x72>
    3e42:	4c14      	ldr	r4, [pc, #80]	; (3e94 <mem_manage_fault+0x1ac>)
    3e44:	f240 1349 	movw	r3, #329	; 0x149
    3e48:	4622      	mov	r2, r4
    3e4a:	4913      	ldr	r1, [pc, #76]	; (3e98 <mem_manage_fault+0x1b0>)
    3e4c:	4813      	ldr	r0, [pc, #76]	; (3e9c <mem_manage_fault+0x1b4>)
    3e4e:	f007 fadd 	bl	b40c <assert_print>
    3e52:	4813      	ldr	r0, [pc, #76]	; (3ea0 <mem_manage_fault+0x1b8>)
    3e54:	f007 fada 	bl	b40c <assert_print>
    3e58:	f240 1149 	movw	r1, #329	; 0x149
    3e5c:	4620      	mov	r0, r4
    3e5e:	f007 face 	bl	b3fe <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e62:	463c      	mov	r4, r7
    3e64:	e779      	b.n	3d5a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3e66:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3e6a:	2402      	movs	r4, #2
    3e6c:	e775      	b.n	3d5a <mem_manage_fault+0x72>
    3e6e:	bf00      	nop
    3e70:	0000d980 	.word	0x0000d980
    3e74:	0000c624 	.word	0x0000c624
    3e78:	e000ed00 	.word	0xe000ed00
    3e7c:	0000d998 	.word	0x0000d998
    3e80:	0000d790 	.word	0x0000d790
    3e84:	0000d9cc 	.word	0x0000d9cc
    3e88:	0000d9e4 	.word	0x0000d9e4
    3e8c:	0000d9fc 	.word	0x0000d9fc
    3e90:	0000d80c 	.word	0x0000d80c
    3e94:	0000da1c 	.word	0x0000da1c
    3e98:	0000da58 	.word	0x0000da58
    3e9c:	0000c8bc 	.word	0x0000c8bc
    3ea0:	0000daa4 	.word	0x0000daa4

00003ea4 <hard_fault>:
{
    3ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ea6:	b085      	sub	sp, #20
    3ea8:	4607      	mov	r7, r0
    3eaa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    3eac:	4b4b      	ldr	r3, [pc, #300]	; (3fdc <hard_fault+0x138>)
    3eae:	9302      	str	r3, [sp, #8]
    3eb0:	2400      	movs	r4, #0
    3eb2:	9401      	str	r4, [sp, #4]
    3eb4:	9400      	str	r4, [sp, #0]
    3eb6:	4623      	mov	r3, r4
    3eb8:	2201      	movs	r2, #1
    3eba:	4949      	ldr	r1, [pc, #292]	; (3fe0 <hard_fault+0x13c>)
    3ebc:	4620      	mov	r0, r4
    3ebe:	f007 fb88 	bl	b5d2 <z_log_msg2_runtime_create>
	*recoverable = false;
    3ec2:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3ec4:	4b47      	ldr	r3, [pc, #284]	; (3fe4 <hard_fault+0x140>)
    3ec6:	6add      	ldr	r5, [r3, #44]	; 0x2c
    3ec8:	f015 0502 	ands.w	r5, r5, #2
    3ecc:	d12d      	bne.n	3f2a <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3ece:	4b45      	ldr	r3, [pc, #276]	; (3fe4 <hard_fault+0x140>)
    3ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	db36      	blt.n	3f44 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3ed6:	4b43      	ldr	r3, [pc, #268]	; (3fe4 <hard_fault+0x140>)
    3ed8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3eda:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3ede:	d06b      	beq.n	3fb8 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    3ee0:	4b41      	ldr	r3, [pc, #260]	; (3fe8 <hard_fault+0x144>)
    3ee2:	9302      	str	r3, [sp, #8]
    3ee4:	2000      	movs	r0, #0
    3ee6:	9001      	str	r0, [sp, #4]
    3ee8:	9000      	str	r0, [sp, #0]
    3eea:	4603      	mov	r3, r0
    3eec:	2201      	movs	r2, #1
    3eee:	493c      	ldr	r1, [pc, #240]	; (3fe0 <hard_fault+0x13c>)
    3ef0:	f007 fb6f 	bl	b5d2 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3ef4:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3ef6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3efa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3efe:	429a      	cmp	r2, r3
    3f00:	d02c      	beq.n	3f5c <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    3f02:	4b38      	ldr	r3, [pc, #224]	; (3fe4 <hard_fault+0x140>)
    3f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d135      	bne.n	3f78 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    3f0c:	4b35      	ldr	r3, [pc, #212]	; (3fe4 <hard_fault+0x140>)
    3f0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    3f12:	2b00      	cmp	r3, #0
    3f14:	d137      	bne.n	3f86 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    3f16:	4b33      	ldr	r3, [pc, #204]	; (3fe4 <hard_fault+0x140>)
    3f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3f1a:	b29b      	uxth	r3, r3
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d039      	beq.n	3f94 <hard_fault+0xf0>
			reason = usage_fault(esf);
    3f20:	4638      	mov	r0, r7
    3f22:	f7ff fe23 	bl	3b6c <usage_fault>
    3f26:	4604      	mov	r4, r0
    3f28:	e009      	b.n	3f3e <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3f2a:	4b30      	ldr	r3, [pc, #192]	; (3fec <hard_fault+0x148>)
    3f2c:	9302      	str	r3, [sp, #8]
    3f2e:	9401      	str	r4, [sp, #4]
    3f30:	9400      	str	r4, [sp, #0]
    3f32:	4623      	mov	r3, r4
    3f34:	2201      	movs	r2, #1
    3f36:	492a      	ldr	r1, [pc, #168]	; (3fe0 <hard_fault+0x13c>)
    3f38:	4620      	mov	r0, r4
    3f3a:	f007 fb4a 	bl	b5d2 <z_log_msg2_runtime_create>
}
    3f3e:	4620      	mov	r0, r4
    3f40:	b005      	add	sp, #20
    3f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    3f44:	4b2a      	ldr	r3, [pc, #168]	; (3ff0 <hard_fault+0x14c>)
    3f46:	9302      	str	r3, [sp, #8]
    3f48:	2000      	movs	r0, #0
    3f4a:	9001      	str	r0, [sp, #4]
    3f4c:	9000      	str	r0, [sp, #0]
    3f4e:	4603      	mov	r3, r0
    3f50:	2201      	movs	r2, #1
    3f52:	4923      	ldr	r1, [pc, #140]	; (3fe0 <hard_fault+0x13c>)
    3f54:	f007 fb3d 	bl	b5d2 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3f58:	462c      	mov	r4, r5
    3f5a:	e7f0      	b.n	3f3e <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3f5c:	683b      	ldr	r3, [r7, #0]
    3f5e:	9303      	str	r3, [sp, #12]
    3f60:	4b24      	ldr	r3, [pc, #144]	; (3ff4 <hard_fault+0x150>)
    3f62:	9302      	str	r3, [sp, #8]
    3f64:	2000      	movs	r0, #0
    3f66:	9001      	str	r0, [sp, #4]
    3f68:	9000      	str	r0, [sp, #0]
    3f6a:	4603      	mov	r3, r0
    3f6c:	2201      	movs	r2, #1
    3f6e:	491c      	ldr	r1, [pc, #112]	; (3fe0 <hard_fault+0x13c>)
    3f70:	f007 fb2f 	bl	b5d2 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    3f74:	683c      	ldr	r4, [r7, #0]
    3f76:	e7e2      	b.n	3f3e <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3f78:	4632      	mov	r2, r6
    3f7a:	2101      	movs	r1, #1
    3f7c:	4638      	mov	r0, r7
    3f7e:	f7ff feb3 	bl	3ce8 <mem_manage_fault>
    3f82:	4604      	mov	r4, r0
    3f84:	e7db      	b.n	3f3e <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    3f86:	4632      	mov	r2, r6
    3f88:	2101      	movs	r1, #1
    3f8a:	4638      	mov	r0, r7
    3f8c:	f7ff fd46 	bl	3a1c <bus_fault>
    3f90:	4604      	mov	r4, r0
    3f92:	e7d4      	b.n	3f3e <hard_fault+0x9a>
			__ASSERT(0,
    3f94:	4c18      	ldr	r4, [pc, #96]	; (3ff8 <hard_fault+0x154>)
    3f96:	f240 23cd 	movw	r3, #717	; 0x2cd
    3f9a:	4622      	mov	r2, r4
    3f9c:	4917      	ldr	r1, [pc, #92]	; (3ffc <hard_fault+0x158>)
    3f9e:	4818      	ldr	r0, [pc, #96]	; (4000 <hard_fault+0x15c>)
    3fa0:	f007 fa34 	bl	b40c <assert_print>
    3fa4:	4817      	ldr	r0, [pc, #92]	; (4004 <hard_fault+0x160>)
    3fa6:	f007 fa31 	bl	b40c <assert_print>
    3faa:	f240 21cd 	movw	r1, #717	; 0x2cd
    3fae:	4620      	mov	r0, r4
    3fb0:	f007 fa25 	bl	b3fe <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3fb4:	462c      	mov	r4, r5
    3fb6:	e7c2      	b.n	3f3e <hard_fault+0x9a>
		__ASSERT(0,
    3fb8:	4d0f      	ldr	r5, [pc, #60]	; (3ff8 <hard_fault+0x154>)
    3fba:	f240 23d1 	movw	r3, #721	; 0x2d1
    3fbe:	462a      	mov	r2, r5
    3fc0:	490e      	ldr	r1, [pc, #56]	; (3ffc <hard_fault+0x158>)
    3fc2:	480f      	ldr	r0, [pc, #60]	; (4000 <hard_fault+0x15c>)
    3fc4:	f007 fa22 	bl	b40c <assert_print>
    3fc8:	480f      	ldr	r0, [pc, #60]	; (4008 <hard_fault+0x164>)
    3fca:	f007 fa1f 	bl	b40c <assert_print>
    3fce:	f240 21d1 	movw	r1, #721	; 0x2d1
    3fd2:	4628      	mov	r0, r5
    3fd4:	f007 fa13 	bl	b3fe <assert_post_action>
	return reason;
    3fd8:	e7b1      	b.n	3f3e <hard_fault+0x9a>
    3fda:	bf00      	nop
    3fdc:	0000dac8 	.word	0x0000dac8
    3fe0:	0000c624 	.word	0x0000c624
    3fe4:	e000ed00 	.word	0xe000ed00
    3fe8:	0000db14 	.word	0x0000db14
    3fec:	0000dae0 	.word	0x0000dae0
    3ff0:	0000db04 	.word	0x0000db04
    3ff4:	0000db34 	.word	0x0000db34
    3ff8:	0000da1c 	.word	0x0000da1c
    3ffc:	0000ca80 	.word	0x0000ca80
    4000:	0000c8bc 	.word	0x0000c8bc
    4004:	0000db50 	.word	0x0000db50
    4008:	0000db74 	.word	0x0000db74

0000400c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    400c:	b5f0      	push	{r4, r5, r6, r7, lr}
    400e:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4010:	4b31      	ldr	r3, [pc, #196]	; (40d8 <z_arm_fault+0xcc>)
    4012:	685d      	ldr	r5, [r3, #4]
    4014:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4018:	2300      	movs	r3, #0
    401a:	f383 8811 	msr	BASEPRI, r3
    401e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4022:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4026:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    402a:	d125      	bne.n	4078 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    402c:	f002 030c 	and.w	r3, r2, #12
    4030:	2b08      	cmp	r3, #8
    4032:	d011      	beq.n	4058 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4034:	f012 0f08 	tst.w	r2, #8
    4038:	d01b      	beq.n	4072 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    403a:	460c      	mov	r4, r1
	*nested_exc = false;
    403c:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    403e:	b1f4      	cbz	r4, 407e <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4040:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    4044:	4629      	mov	r1, r5
    4046:	4620      	mov	r0, r4
    4048:	f007 fad2 	bl	b5f0 <fault_handle>
    404c:	4605      	mov	r5, r0
	if (recoverable) {
    404e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    4052:	b32b      	cbz	r3, 40a0 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4054:	b00f      	add	sp, #60	; 0x3c
    4056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4058:	4b20      	ldr	r3, [pc, #128]	; (40dc <z_arm_fault+0xd0>)
    405a:	9302      	str	r3, [sp, #8]
    405c:	2400      	movs	r4, #0
    405e:	9401      	str	r4, [sp, #4]
    4060:	9400      	str	r4, [sp, #0]
    4062:	4623      	mov	r3, r4
    4064:	2201      	movs	r2, #1
    4066:	491e      	ldr	r1, [pc, #120]	; (40e0 <z_arm_fault+0xd4>)
    4068:	4620      	mov	r0, r4
    406a:	f007 fab2 	bl	b5d2 <z_log_msg2_runtime_create>
	*nested_exc = false;
    406e:	4626      	mov	r6, r4
		return NULL;
    4070:	e7e5      	b.n	403e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4072:	4604      	mov	r4, r0
			*nested_exc = true;
    4074:	2601      	movs	r6, #1
    4076:	e7e2      	b.n	403e <z_arm_fault+0x32>
	*nested_exc = false;
    4078:	2600      	movs	r6, #0
		return NULL;
    407a:	4634      	mov	r4, r6
    407c:	e7df      	b.n	403e <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    407e:	4f19      	ldr	r7, [pc, #100]	; (40e4 <z_arm_fault+0xd8>)
    4080:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4084:	463a      	mov	r2, r7
    4086:	4918      	ldr	r1, [pc, #96]	; (40e8 <z_arm_fault+0xdc>)
    4088:	4818      	ldr	r0, [pc, #96]	; (40ec <z_arm_fault+0xe0>)
    408a:	f007 f9bf 	bl	b40c <assert_print>
    408e:	4818      	ldr	r0, [pc, #96]	; (40f0 <z_arm_fault+0xe4>)
    4090:	f007 f9bc 	bl	b40c <assert_print>
    4094:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4098:	4638      	mov	r0, r7
    409a:	f007 f9b0 	bl	b3fe <assert_post_action>
    409e:	e7cf      	b.n	4040 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    40a0:	2220      	movs	r2, #32
    40a2:	4621      	mov	r1, r4
    40a4:	a805      	add	r0, sp, #20
    40a6:	f007 fb49 	bl	b73c <memcpy>
	if (nested_exc) {
    40aa:	b14e      	cbz	r6, 40c0 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    40ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
    40b2:	b95a      	cbnz	r2, 40cc <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    40b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    40b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    40bc:	930c      	str	r3, [sp, #48]	; 0x30
    40be:	e005      	b.n	40cc <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    40c6:	f023 0301 	bic.w	r3, r3, #1
    40ca:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    40cc:	a905      	add	r1, sp, #20
    40ce:	4628      	mov	r0, r5
    40d0:	f007 fa5f 	bl	b592 <z_arm_fatal_error>
    40d4:	e7be      	b.n	4054 <z_arm_fault+0x48>
    40d6:	bf00      	nop
    40d8:	e000ed00 	.word	0xe000ed00
    40dc:	0000dba4 	.word	0x0000dba4
    40e0:	0000c624 	.word	0x0000c624
    40e4:	0000da1c 	.word	0x0000da1c
    40e8:	0000dbd0 	.word	0x0000dbd0
    40ec:	0000c8bc 	.word	0x0000c8bc
    40f0:	0000dbe4 	.word	0x0000dbe4

000040f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40f4:	4a02      	ldr	r2, [pc, #8]	; (4100 <z_arm_fault_init+0xc>)
    40f6:	6953      	ldr	r3, [r2, #20]
    40f8:	f043 0310 	orr.w	r3, r3, #16
    40fc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    40fe:	4770      	bx	lr
    4100:	e000ed00 	.word	0xe000ed00

00004104 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4104:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4108:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    410c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    410e:	4672      	mov	r2, lr
	bl z_arm_fault
    4110:	f7ff ff7c 	bl	400c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4114:	bd01      	pop	{r0, pc}
    4116:	bf00      	nop

00004118 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4118:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    411a:	e006      	b.n	412a <z_arm_interrupt_init+0x12>
    411c:	f002 010f 	and.w	r1, r2, #15
    4120:	4b09      	ldr	r3, [pc, #36]	; (4148 <z_arm_interrupt_init+0x30>)
    4122:	440b      	add	r3, r1
    4124:	2120      	movs	r1, #32
    4126:	7619      	strb	r1, [r3, #24]
    4128:	3201      	adds	r2, #1
    412a:	2a2f      	cmp	r2, #47	; 0x2f
    412c:	dc0a      	bgt.n	4144 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    412e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4130:	2b00      	cmp	r3, #0
    4132:	dbf3      	blt.n	411c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4134:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4138:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    413c:	2120      	movs	r1, #32
    413e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4142:	e7f1      	b.n	4128 <z_arm_interrupt_init+0x10>
	}
}
    4144:	4770      	bx	lr
    4146:	bf00      	nop
    4148:	e000ecfc 	.word	0xe000ecfc

0000414c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    414c:	2000      	movs	r0, #0
    msr CONTROL, r0
    414e:	f380 8814 	msr	CONTROL, r0
    isb
    4152:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4156:	f008 f903 	bl	c360 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    415a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    415c:	490d      	ldr	r1, [pc, #52]	; (4194 <__start+0x48>)
    str r0, [r1]
    415e:	6008      	str	r0, [r1, #0]
    dsb
    4160:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4164:	480c      	ldr	r0, [pc, #48]	; (4198 <__start+0x4c>)
    msr msp, r0
    4166:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    416a:	f000 f82d 	bl	41c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    416e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4170:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4174:	4809      	ldr	r0, [pc, #36]	; (419c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4176:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    417a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    417c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4180:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4184:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4186:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4188:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    418c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4190:	f7ff fb42 	bl	3818 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4194:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4198:	20002400 	.word	0x20002400
    ldr r0, =z_interrupt_stacks
    419c:	20002580 	.word	0x20002580

000041a0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    41a0:	4b08      	ldr	r3, [pc, #32]	; (41c4 <z_arm_clear_arm_mpu_config+0x24>)
    41a2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    41a6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    41aa:	2300      	movs	r3, #0
    41ac:	e006      	b.n	41bc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    41ae:	4a05      	ldr	r2, [pc, #20]	; (41c4 <z_arm_clear_arm_mpu_config+0x24>)
    41b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    41b4:	2100      	movs	r1, #0
    41b6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    41ba:	3301      	adds	r3, #1
    41bc:	4283      	cmp	r3, r0
    41be:	dbf6      	blt.n	41ae <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    41c0:	4770      	bx	lr
    41c2:	bf00      	nop
    41c4:	e000ed00 	.word	0xe000ed00

000041c8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    41c8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    41ca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    41cc:	2400      	movs	r4, #0
    41ce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    41d2:	f7ff ffe5 	bl	41a0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    41d6:	4623      	mov	r3, r4
    41d8:	e008      	b.n	41ec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    41da:	f103 0120 	add.w	r1, r3, #32
    41de:	4a0e      	ldr	r2, [pc, #56]	; (4218 <z_arm_init_arch_hw_at_boot+0x50>)
    41e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    41e8:	3301      	adds	r3, #1
    41ea:	b2db      	uxtb	r3, r3
    41ec:	2b07      	cmp	r3, #7
    41ee:	d9f4      	bls.n	41da <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    41f0:	2300      	movs	r3, #0
    41f2:	e008      	b.n	4206 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    41f4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    41f8:	4a07      	ldr	r2, [pc, #28]	; (4218 <z_arm_init_arch_hw_at_boot+0x50>)
    41fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4202:	3301      	adds	r3, #1
    4204:	b2db      	uxtb	r3, r3
    4206:	2b07      	cmp	r3, #7
    4208:	d9f4      	bls.n	41f4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    420a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    420c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4210:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4214:	bd10      	pop	{r4, pc}
    4216:	bf00      	nop
    4218:	e000e100 	.word	0xe000e100

0000421c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    421c:	b508      	push	{r3, lr}
	if (_current == thread) {
    421e:	4b0a      	ldr	r3, [pc, #40]	; (4248 <z_impl_k_thread_abort+0x2c>)
    4220:	689b      	ldr	r3, [r3, #8]
    4222:	4283      	cmp	r3, r0
    4224:	d002      	beq.n	422c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4226:	f005 ffab 	bl	a180 <z_thread_abort>
}
    422a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    422c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4230:	2b00      	cmp	r3, #0
    4232:	d0f8      	beq.n	4226 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4234:	4b05      	ldr	r3, [pc, #20]	; (424c <z_impl_k_thread_abort+0x30>)
    4236:	685a      	ldr	r2, [r3, #4]
    4238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    423c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    423e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4244:	625a      	str	r2, [r3, #36]	; 0x24
    4246:	e7ee      	b.n	4226 <z_impl_k_thread_abort+0xa>
    4248:	20001154 	.word	0x20001154
    424c:	e000ed00 	.word	0xe000ed00

00004250 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4250:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4252:	4b03      	ldr	r3, [pc, #12]	; (4260 <z_arm_configure_static_mpu_regions+0x10>)
    4254:	4a03      	ldr	r2, [pc, #12]	; (4264 <z_arm_configure_static_mpu_regions+0x14>)
    4256:	2101      	movs	r1, #1
    4258:	4803      	ldr	r0, [pc, #12]	; (4268 <z_arm_configure_static_mpu_regions+0x18>)
    425a:	f000 f8bb 	bl	43d4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    425e:	bd08      	pop	{r3, pc}
    4260:	20040000 	.word	0x20040000
    4264:	20000000 	.word	0x20000000
    4268:	0000dc28 	.word	0x0000dc28

0000426c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    426c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    426e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4272:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4274:	4804      	ldr	r0, [pc, #16]	; (4288 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4276:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4278:	2320      	movs	r3, #32
    427a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    427c:	4b03      	ldr	r3, [pc, #12]	; (428c <z_arm_configure_dynamic_mpu_regions+0x20>)
    427e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4280:	2101      	movs	r1, #1
    4282:	f000 f8c9 	bl	4418 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4286:	bd08      	pop	{r3, pc}
    4288:	20000bf0 	.word	0x20000bf0
    428c:	150b0000 	.word	0x150b0000

00004290 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4290:	4a08      	ldr	r2, [pc, #32]	; (42b4 <region_init+0x24>)
    4292:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4296:	680b      	ldr	r3, [r1, #0]
    4298:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    429c:	4303      	orrs	r3, r0
    429e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42a6:	688b      	ldr	r3, [r1, #8]
    42a8:	f043 0301 	orr.w	r3, r3, #1
    42ac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    42b0:	4770      	bx	lr
    42b2:	bf00      	nop
    42b4:	e000ed00 	.word	0xe000ed00

000042b8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    42b8:	b510      	push	{r4, lr}
    42ba:	b084      	sub	sp, #16
    42bc:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    42be:	2807      	cmp	r0, #7
    42c0:	d804      	bhi.n	42cc <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    42c2:	f7ff ffe5 	bl	4290 <region_init>

	return index;
    42c6:	4620      	mov	r0, r4
}
    42c8:	b004      	add	sp, #16
    42ca:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    42cc:	9003      	str	r0, [sp, #12]
    42ce:	4b06      	ldr	r3, [pc, #24]	; (42e8 <region_allocate_and_init+0x30>)
    42d0:	9302      	str	r3, [sp, #8]
    42d2:	2000      	movs	r0, #0
    42d4:	9001      	str	r0, [sp, #4]
    42d6:	9000      	str	r0, [sp, #0]
    42d8:	4603      	mov	r3, r0
    42da:	2201      	movs	r2, #1
    42dc:	4903      	ldr	r1, [pc, #12]	; (42ec <region_allocate_and_init+0x34>)
    42de:	f007 f9bd 	bl	b65c <z_log_msg2_runtime_create>
		return -EINVAL;
    42e2:	f06f 0015 	mvn.w	r0, #21
    42e6:	e7ef      	b.n	42c8 <region_allocate_and_init+0x10>
    42e8:	0000dc34 	.word	0x0000dc34
    42ec:	0000c61c 	.word	0x0000c61c

000042f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    42f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    42f4:	b085      	sub	sp, #20
    42f6:	4680      	mov	r8, r0
    42f8:	460f      	mov	r7, r1
    42fa:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    42fc:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    42fe:	2500      	movs	r5, #0
    4300:	e009      	b.n	4316 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4302:	4621      	mov	r1, r4
    4304:	b2f0      	uxtb	r0, r6
    4306:	f007 f9b8 	bl	b67a <mpu_configure_region>
    430a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    430c:	f110 0f16 	cmn.w	r0, #22
    4310:	d01e      	beq.n	4350 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4312:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4314:	3501      	adds	r5, #1
    4316:	42bd      	cmp	r5, r7
    4318:	da1a      	bge.n	4350 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    431a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    431e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    4322:	6862      	ldr	r2, [r4, #4]
    4324:	2a00      	cmp	r2, #0
    4326:	d0f5      	beq.n	4314 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    4328:	f1b9 0f00 	cmp.w	r9, #0
    432c:	d0e9      	beq.n	4302 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    432e:	4620      	mov	r0, r4
    4330:	f007 f983 	bl	b63a <mpu_partition_is_valid>
		if (do_sanity_check &&
    4334:	2800      	cmp	r0, #0
    4336:	d1e4      	bne.n	4302 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4338:	9503      	str	r5, [sp, #12]
    433a:	4b07      	ldr	r3, [pc, #28]	; (4358 <mpu_configure_regions+0x68>)
    433c:	9302      	str	r3, [sp, #8]
    433e:	9001      	str	r0, [sp, #4]
    4340:	9000      	str	r0, [sp, #0]
    4342:	4603      	mov	r3, r0
    4344:	2201      	movs	r2, #1
    4346:	4905      	ldr	r1, [pc, #20]	; (435c <mpu_configure_regions+0x6c>)
    4348:	f007 f988 	bl	b65c <z_log_msg2_runtime_create>
			return -EINVAL;
    434c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4350:	4630      	mov	r0, r6
    4352:	b005      	add	sp, #20
    4354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4358:	0000dc5c 	.word	0x0000dc5c
    435c:	0000c61c 	.word	0x0000c61c

00004360 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4360:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4362:	4c03      	ldr	r4, [pc, #12]	; (4370 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4364:	2301      	movs	r3, #1
    4366:	7822      	ldrb	r2, [r4, #0]
    4368:	f7ff ffc2 	bl	42f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    436c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    436e:	bd10      	pop	{r4, pc}
    4370:	20001385 	.word	0x20001385

00004374 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4374:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4376:	2300      	movs	r3, #0
    4378:	4a09      	ldr	r2, [pc, #36]	; (43a0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    437a:	7812      	ldrb	r2, [r2, #0]
    437c:	f7ff ffb8 	bl	42f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4380:	f110 0f16 	cmn.w	r0, #22
    4384:	d00a      	beq.n	439c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4386:	4603      	mov	r3, r0
    4388:	e006      	b.n	4398 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    438a:	4a06      	ldr	r2, [pc, #24]	; (43a4 <mpu_configure_dynamic_mpu_regions+0x30>)
    438c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4390:	2100      	movs	r1, #0
    4392:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4396:	3301      	adds	r3, #1
    4398:	2b07      	cmp	r3, #7
    439a:	ddf6      	ble.n	438a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    439c:	bd08      	pop	{r3, pc}
    439e:	bf00      	nop
    43a0:	20001385 	.word	0x20001385
    43a4:	e000ed00 	.word	0xe000ed00

000043a8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    43a8:	4b04      	ldr	r3, [pc, #16]	; (43bc <arm_core_mpu_enable+0x14>)
    43aa:	2205      	movs	r2, #5
    43ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    43b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    43b4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	e000ed00 	.word	0xe000ed00

000043c0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    43c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    43c4:	4b02      	ldr	r3, [pc, #8]	; (43d0 <arm_core_mpu_disable+0x10>)
    43c6:	2200      	movs	r2, #0
    43c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    43cc:	4770      	bx	lr
    43ce:	bf00      	nop
    43d0:	e000ed00 	.word	0xe000ed00

000043d4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    43d4:	b538      	push	{r3, r4, r5, lr}
    43d6:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    43d8:	f7ff ffc2 	bl	4360 <mpu_configure_static_mpu_regions>
    43dc:	f110 0f16 	cmn.w	r0, #22
    43e0:	d000      	beq.n	43e4 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    43e2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    43e4:	4d08      	ldr	r5, [pc, #32]	; (4408 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    43e6:	f240 1311 	movw	r3, #273	; 0x111
    43ea:	462a      	mov	r2, r5
    43ec:	4907      	ldr	r1, [pc, #28]	; (440c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    43ee:	4808      	ldr	r0, [pc, #32]	; (4410 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    43f0:	f007 f80c 	bl	b40c <assert_print>
    43f4:	4621      	mov	r1, r4
    43f6:	4807      	ldr	r0, [pc, #28]	; (4414 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    43f8:	f007 f808 	bl	b40c <assert_print>
    43fc:	f240 1111 	movw	r1, #273	; 0x111
    4400:	4628      	mov	r0, r5
    4402:	f006 fffc 	bl	b3fe <assert_post_action>
}
    4406:	e7ec      	b.n	43e2 <arm_core_mpu_configure_static_mpu_regions+0xe>
    4408:	0000dc80 	.word	0x0000dc80
    440c:	0000ca80 	.word	0x0000ca80
    4410:	0000c8bc 	.word	0x0000c8bc
    4414:	0000dcb8 	.word	0x0000dcb8

00004418 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4418:	b538      	push	{r3, r4, r5, lr}
    441a:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    441c:	f7ff ffaa 	bl	4374 <mpu_configure_dynamic_mpu_regions>
    4420:	f110 0f16 	cmn.w	r0, #22
    4424:	d000      	beq.n	4428 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4426:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4428:	4d08      	ldr	r5, [pc, #32]	; (444c <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    442a:	f44f 7398 	mov.w	r3, #304	; 0x130
    442e:	462a      	mov	r2, r5
    4430:	4907      	ldr	r1, [pc, #28]	; (4450 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    4432:	4808      	ldr	r0, [pc, #32]	; (4454 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    4434:	f006 ffea 	bl	b40c <assert_print>
    4438:	4621      	mov	r1, r4
    443a:	4807      	ldr	r0, [pc, #28]	; (4458 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    443c:	f006 ffe6 	bl	b40c <assert_print>
    4440:	f44f 7198 	mov.w	r1, #304	; 0x130
    4444:	4628      	mov	r0, r5
    4446:	f006 ffda 	bl	b3fe <assert_post_action>
}
    444a:	e7ec      	b.n	4426 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    444c:	0000dc80 	.word	0x0000dc80
    4450:	0000ca80 	.word	0x0000ca80
    4454:	0000c8bc 	.word	0x0000c8bc
    4458:	0000dce4 	.word	0x0000dce4

0000445c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    445c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    445e:	4b24      	ldr	r3, [pc, #144]	; (44f0 <z_arm_mpu_init+0x94>)
    4460:	681d      	ldr	r5, [r3, #0]
    4462:	2d08      	cmp	r5, #8
    4464:	d803      	bhi.n	446e <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4466:	f7ff ffab 	bl	43c0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    446a:	2400      	movs	r4, #0
    446c:	e01e      	b.n	44ac <z_arm_mpu_init+0x50>
		__ASSERT(0,
    446e:	4c21      	ldr	r4, [pc, #132]	; (44f4 <z_arm_mpu_init+0x98>)
    4470:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4474:	4622      	mov	r2, r4
    4476:	4920      	ldr	r1, [pc, #128]	; (44f8 <z_arm_mpu_init+0x9c>)
    4478:	4820      	ldr	r0, [pc, #128]	; (44fc <z_arm_mpu_init+0xa0>)
    447a:	f006 ffc7 	bl	b40c <assert_print>
    447e:	2208      	movs	r2, #8
    4480:	4629      	mov	r1, r5
    4482:	481f      	ldr	r0, [pc, #124]	; (4500 <z_arm_mpu_init+0xa4>)
    4484:	f006 ffc2 	bl	b40c <assert_print>
    4488:	f44f 71a4 	mov.w	r1, #328	; 0x148
    448c:	4620      	mov	r0, r4
    448e:	f006 ffb6 	bl	b3fe <assert_post_action>
		return -1;
    4492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4496:	e017      	b.n	44c8 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4498:	4b15      	ldr	r3, [pc, #84]	; (44f0 <z_arm_mpu_init+0x94>)
    449a:	6859      	ldr	r1, [r3, #4]
    449c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    44a0:	0093      	lsls	r3, r2, #2
    44a2:	4419      	add	r1, r3
    44a4:	4620      	mov	r0, r4
    44a6:	f7ff fef3 	bl	4290 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    44aa:	3401      	adds	r4, #1
    44ac:	42a5      	cmp	r5, r4
    44ae:	d8f3      	bhi.n	4498 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    44b0:	4b14      	ldr	r3, [pc, #80]	; (4504 <z_arm_mpu_init+0xa8>)
    44b2:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    44b4:	f7ff ff78 	bl	43a8 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    44b8:	4b13      	ldr	r3, [pc, #76]	; (4508 <z_arm_mpu_init+0xac>)
    44ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    44be:	f3c3 2307 	ubfx	r3, r3, #8, #8
    44c2:	2b08      	cmp	r3, #8
    44c4:	d101      	bne.n	44ca <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    44c6:	2000      	movs	r0, #0
}
    44c8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    44ca:	4c0a      	ldr	r4, [pc, #40]	; (44f4 <z_arm_mpu_init+0x98>)
    44cc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    44d0:	4622      	mov	r2, r4
    44d2:	490e      	ldr	r1, [pc, #56]	; (450c <z_arm_mpu_init+0xb0>)
    44d4:	4809      	ldr	r0, [pc, #36]	; (44fc <z_arm_mpu_init+0xa0>)
    44d6:	f006 ff99 	bl	b40c <assert_print>
    44da:	480d      	ldr	r0, [pc, #52]	; (4510 <z_arm_mpu_init+0xb4>)
    44dc:	f006 ff96 	bl	b40c <assert_print>
    44e0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    44e4:	4620      	mov	r0, r4
    44e6:	f006 ff8a 	bl	b3fe <assert_post_action>
	return 0;
    44ea:	2000      	movs	r0, #0
    44ec:	e7ec      	b.n	44c8 <z_arm_mpu_init+0x6c>
    44ee:	bf00      	nop
    44f0:	0000ddcc 	.word	0x0000ddcc
    44f4:	0000dc80 	.word	0x0000dc80
    44f8:	0000ca80 	.word	0x0000ca80
    44fc:	0000c8bc 	.word	0x0000c8bc
    4500:	0000dd14 	.word	0x0000dd14
    4504:	20001385 	.word	0x20001385
    4508:	e000ed00 	.word	0xe000ed00
    450c:	0000dd48 	.word	0x0000dd48
    4510:	0000dd98 	.word	0x0000dd98

00004514 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4514:	4b01      	ldr	r3, [pc, #4]	; (451c <__stdout_hook_install+0x8>)
    4516:	6018      	str	r0, [r3, #0]
}
    4518:	4770      	bx	lr
    451a:	bf00      	nop
    451c:	200000c4 	.word	0x200000c4

00004520 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4520:	3902      	subs	r1, #2
    4522:	2901      	cmp	r1, #1
    4524:	d804      	bhi.n	4530 <z_impl_zephyr_fputc+0x10>
{
    4526:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4528:	4b03      	ldr	r3, [pc, #12]	; (4538 <z_impl_zephyr_fputc+0x18>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	4798      	blx	r3
}
    452e:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4534:	4770      	bx	lr
    4536:	bf00      	nop
    4538:	200000c4 	.word	0x200000c4

0000453c <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    453c:	b40f      	push	{r0, r1, r2, r3}
    453e:	b500      	push	{lr}
    4540:	b083      	sub	sp, #12
    4542:	ab04      	add	r3, sp, #16
    4544:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    4548:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    454a:	2102      	movs	r1, #2
    454c:	4803      	ldr	r0, [pc, #12]	; (455c <printf+0x20>)
    454e:	f7fd fe13 	bl	2178 <cbvprintf>
	va_end(vargs);

	return r;
}
    4552:	b003      	add	sp, #12
    4554:	f85d eb04 	ldr.w	lr, [sp], #4
    4558:	b004      	add	sp, #16
    455a:	4770      	bx	lr
    455c:	0000b7dd 	.word	0x0000b7dd

00004560 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4560:	b510      	push	{r4, lr}
	__asm__ volatile(
    4562:	f04f 0320 	mov.w	r3, #32
    4566:	f3ef 8411 	mrs	r4, BASEPRI
    456a:	f383 8812 	msr	BASEPRI_MAX, r3
    456e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4572:	2301      	movs	r3, #1
    4574:	4a0c      	ldr	r2, [pc, #48]	; (45a8 <nordicsemi_nrf52_init+0x48>)
    4576:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    457a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    457e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4582:	f007 f92f 	bl	b7e4 <nrf52_errata_197>
    4586:	b120      	cbz	r0, 4592 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    458c:	2201      	movs	r2, #1
    458e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4596:	2201      	movs	r2, #1
    4598:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    459c:	f384 8811 	msr	BASEPRI, r4
    45a0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    45a4:	2000      	movs	r0, #0
    45a6:	bd10      	pop	{r4, pc}
    45a8:	4001e000 	.word	0x4001e000

000045ac <sys_arch_reboot>:
    *p_gpregret = val;
    45ac:	b2c0      	uxtb	r0, r0
    45ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    45b2:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    45b6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    45ba:	4905      	ldr	r1, [pc, #20]	; (45d0 <sys_arch_reboot+0x24>)
    45bc:	68ca      	ldr	r2, [r1, #12]
    45be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    45c2:	4b04      	ldr	r3, [pc, #16]	; (45d4 <sys_arch_reboot+0x28>)
    45c4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    45c6:	60cb      	str	r3, [r1, #12]
    45c8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    45cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    45ce:	e7fd      	b.n	45cc <sys_arch_reboot+0x20>
    45d0:	e000ed00 	.word	0xe000ed00
    45d4:	05fa0004 	.word	0x05fa0004

000045d8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    45d8:	b130      	cbz	r0, 45e8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    45da:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    45dc:	0180      	lsls	r0, r0, #6
    45de:	4b03      	ldr	r3, [pc, #12]	; (45ec <arch_busy_wait+0x14>)
    45e0:	f043 0301 	orr.w	r3, r3, #1
    45e4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    45e6:	bd08      	pop	{r3, pc}
    45e8:	4770      	bx	lr
    45ea:	bf00      	nop
    45ec:	0000c6f0 	.word	0x0000c6f0

000045f0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    45f0:	4b07      	ldr	r3, [pc, #28]	; (4610 <adc_context_start_sampling+0x20>)
    45f2:	2201      	movs	r2, #1
    45f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    45f8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    45fc:	b113      	cbz	r3, 4604 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45fe:	4b04      	ldr	r3, [pc, #16]	; (4610 <adc_context_start_sampling+0x20>)
    4600:	60da      	str	r2, [r3, #12]
}
    4602:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4604:	4b02      	ldr	r3, [pc, #8]	; (4610 <adc_context_start_sampling+0x20>)
    4606:	2201      	movs	r2, #1
    4608:	601a      	str	r2, [r3, #0]
    460a:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    460c:	4770      	bx	lr
    460e:	bf00      	nop
    4610:	40007000 	.word	0x40007000

00004614 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    4614:	b949      	cbnz	r1, 462a <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    4616:	4b05      	ldr	r3, [pc, #20]	; (462c <adc_context_update_buffer_pointer+0x18>)
    4618:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    461c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    4620:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    4622:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    4626:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    462a:	4770      	bx	lr
    462c:	40007000 	.word	0x40007000

00004630 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    4630:	7c02      	ldrb	r2, [r0, #16]
    4632:	f1a2 0308 	sub.w	r3, r2, #8
    4636:	2b06      	cmp	r3, #6
    4638:	d80d      	bhi.n	4656 <set_resolution+0x26>
    463a:	e8df f003 	tbb	[pc, r3]
    463e:	0c1e      	.short	0x0c1e
    4640:	0c040c20 	.word	0x0c040c20
    4644:	0a          	.byte	0x0a
    4645:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    4646:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    4648:	4b0e      	ldr	r3, [pc, #56]	; (4684 <set_resolution+0x54>)
    464a:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    464e:	2000      	movs	r0, #0
}
    4650:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    4652:	2203      	movs	r2, #3
		break;
    4654:	e7f8      	b.n	4648 <set_resolution+0x18>
{
    4656:	b500      	push	{lr}
    4658:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    465a:	9203      	str	r2, [sp, #12]
    465c:	4b0a      	ldr	r3, [pc, #40]	; (4688 <set_resolution+0x58>)
    465e:	9302      	str	r3, [sp, #8]
    4660:	2000      	movs	r0, #0
    4662:	9001      	str	r0, [sp, #4]
    4664:	9000      	str	r0, [sp, #0]
    4666:	4603      	mov	r3, r0
    4668:	2201      	movs	r2, #1
    466a:	4908      	ldr	r1, [pc, #32]	; (468c <set_resolution+0x5c>)
    466c:	f007 f8f1 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    4670:	f06f 0015 	mvn.w	r0, #21
}
    4674:	b005      	add	sp, #20
    4676:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    467a:	2200      	movs	r2, #0
    467c:	e7e4      	b.n	4648 <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    467e:	2201      	movs	r2, #1
    4680:	e7e2      	b.n	4648 <set_resolution+0x18>
    4682:	bf00      	nop
    4684:	40007000 	.word	0x40007000
    4688:	0000ddf0 	.word	0x0000ddf0
    468c:	0000c5f4 	.word	0x0000c5f4

00004690 <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    4690:	b500      	push	{lr}
    4692:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    4694:	2901      	cmp	r1, #1
    4696:	d901      	bls.n	469c <set_oversampling+0xc>
    4698:	7c43      	ldrb	r3, [r0, #17]
    469a:	b94b      	cbnz	r3, 46b0 <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    469c:	7c43      	ldrb	r3, [r0, #17]
    469e:	2b08      	cmp	r3, #8
    46a0:	d813      	bhi.n	46ca <set_oversampling+0x3a>
    46a2:	e8df f003 	tbb	[pc, r3]
    46a6:	2020      	.short	0x2020
    46a8:	20202020 	.word	0x20202020
    46ac:	2020      	.short	0x2020
    46ae:	20          	.byte	0x20
    46af:	00          	.byte	0x00
		LOG_ERR(
    46b0:	4b10      	ldr	r3, [pc, #64]	; (46f4 <set_oversampling+0x64>)
    46b2:	9302      	str	r3, [sp, #8]
    46b4:	2000      	movs	r0, #0
    46b6:	9001      	str	r0, [sp, #4]
    46b8:	9000      	str	r0, [sp, #0]
    46ba:	4603      	mov	r3, r0
    46bc:	2201      	movs	r2, #1
    46be:	490e      	ldr	r1, [pc, #56]	; (46f8 <set_oversampling+0x68>)
    46c0:	f007 f8c7 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    46c4:	f06f 0015 	mvn.w	r0, #21
    46c8:	e011      	b.n	46ee <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    46ca:	9303      	str	r3, [sp, #12]
    46cc:	4b0b      	ldr	r3, [pc, #44]	; (46fc <set_oversampling+0x6c>)
    46ce:	9302      	str	r3, [sp, #8]
    46d0:	2000      	movs	r0, #0
    46d2:	9001      	str	r0, [sp, #4]
    46d4:	9000      	str	r0, [sp, #0]
    46d6:	4603      	mov	r3, r0
    46d8:	2201      	movs	r2, #1
    46da:	4907      	ldr	r1, [pc, #28]	; (46f8 <set_oversampling+0x68>)
    46dc:	f007 f8b9 	bl	b852 <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    46e0:	f06f 0015 	mvn.w	r0, #21
    46e4:	e003      	b.n	46ee <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    46e6:	4a06      	ldr	r2, [pc, #24]	; (4700 <set_oversampling+0x70>)
    46e8:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    46ec:	2000      	movs	r0, #0
}
    46ee:	b005      	add	sp, #20
    46f0:	f85d fb04 	ldr.w	pc, [sp], #4
    46f4:	0000de18 	.word	0x0000de18
    46f8:	0000c5f4 	.word	0x0000c5f4
    46fc:	0000de4c 	.word	0x0000de4c
    4700:	40007000 	.word	0x40007000

00004704 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    4704:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    4706:	6803      	ldr	r3, [r0, #0]
    4708:	b113      	cbz	r3, 4710 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    470a:	899b      	ldrh	r3, [r3, #12]
    470c:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    4710:	68c3      	ldr	r3, [r0, #12]
    4712:	428b      	cmp	r3, r1
    4714:	d301      	bcc.n	471a <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    4716:	2000      	movs	r0, #0
}
    4718:	4770      	bx	lr
{
    471a:	b500      	push	{lr}
    471c:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    471e:	9104      	str	r1, [sp, #16]
    4720:	9303      	str	r3, [sp, #12]
    4722:	4b07      	ldr	r3, [pc, #28]	; (4740 <check_buffer_size+0x3c>)
    4724:	9302      	str	r3, [sp, #8]
    4726:	2000      	movs	r0, #0
    4728:	9001      	str	r0, [sp, #4]
    472a:	9000      	str	r0, [sp, #0]
    472c:	4603      	mov	r3, r0
    472e:	2201      	movs	r2, #1
    4730:	4904      	ldr	r1, [pc, #16]	; (4744 <check_buffer_size+0x40>)
    4732:	f007 f88e 	bl	b852 <z_log_msg2_runtime_create>
		return -ENOMEM;
    4736:	f06f 000b 	mvn.w	r0, #11
}
    473a:	b007      	add	sp, #28
    473c:	f85d fb04 	ldr.w	pc, [sp], #4
    4740:	0000de70 	.word	0x0000de70
    4744:	0000c5f4 	.word	0x0000c5f4

00004748 <adc_nrfx_channel_setup>:
{
    4748:	b510      	push	{r4, lr}
    474a:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    474c:	2300      	movs	r3, #0
    474e:	9304      	str	r3, [sp, #16]
    4750:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    4754:	790a      	ldrb	r2, [r1, #4]
    4756:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    475a:	2a07      	cmp	r2, #7
    475c:	f200 80d0 	bhi.w	4900 <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    4760:	780b      	ldrb	r3, [r1, #0]
    4762:	2b09      	cmp	r3, #9
    4764:	d833      	bhi.n	47ce <adc_nrfx_channel_setup+0x86>
    4766:	e8df f003 	tbb	[pc, r3]
    476a:	0508      	.short	0x0508
    476c:	32221e1a 	.word	0x32221e1a
    4770:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    4774:	2301      	movs	r3, #1
    4776:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    477a:	784b      	ldrb	r3, [r1, #1]
    477c:	2b03      	cmp	r3, #3
    477e:	d033      	beq.n	47e8 <adc_nrfx_channel_setup+0xa0>
    4780:	2b04      	cmp	r3, #4
    4782:	d034      	beq.n	47ee <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    4784:	4b60      	ldr	r3, [pc, #384]	; (4908 <adc_nrfx_channel_setup+0x1c0>)
    4786:	9302      	str	r3, [sp, #8]
    4788:	2000      	movs	r0, #0
    478a:	9001      	str	r0, [sp, #4]
    478c:	9000      	str	r0, [sp, #0]
    478e:	4603      	mov	r3, r0
    4790:	2201      	movs	r2, #1
    4792:	495e      	ldr	r1, [pc, #376]	; (490c <adc_nrfx_channel_setup+0x1c4>)
    4794:	f007 f85d 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    4798:	f06f 0015 	mvn.w	r0, #21
    479c:	e091      	b.n	48c2 <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    479e:	2302      	movs	r3, #2
    47a0:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47a4:	e7e9      	b.n	477a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    47a6:	2303      	movs	r3, #3
    47a8:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47ac:	e7e5      	b.n	477a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    47ae:	2304      	movs	r3, #4
    47b0:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47b4:	e7e1      	b.n	477a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    47b6:	2305      	movs	r3, #5
    47b8:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47bc:	e7dd      	b.n	477a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    47be:	2306      	movs	r3, #6
    47c0:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47c4:	e7d9      	b.n	477a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    47c6:	2307      	movs	r3, #7
    47c8:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    47cc:	e7d5      	b.n	477a <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    47ce:	4b50      	ldr	r3, [pc, #320]	; (4910 <adc_nrfx_channel_setup+0x1c8>)
    47d0:	9302      	str	r3, [sp, #8]
    47d2:	2000      	movs	r0, #0
    47d4:	9001      	str	r0, [sp, #4]
    47d6:	9000      	str	r0, [sp, #0]
    47d8:	4603      	mov	r3, r0
    47da:	2201      	movs	r2, #1
    47dc:	494b      	ldr	r1, [pc, #300]	; (490c <adc_nrfx_channel_setup+0x1c4>)
    47de:	f007 f838 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    47e2:	f06f 0015 	mvn.w	r0, #21
    47e6:	e06c      	b.n	48c2 <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    47e8:	2301      	movs	r3, #1
    47ea:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    47ee:	884b      	ldrh	r3, [r1, #2]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d068      	beq.n	48c6 <adc_nrfx_channel_setup+0x17e>
    47f4:	f244 0028 	movw	r0, #16424	; 0x4028
    47f8:	4283      	cmp	r3, r0
    47fa:	d874      	bhi.n	48e6 <adc_nrfx_channel_setup+0x19e>
    47fc:	f244 0003 	movw	r0, #16387	; 0x4003
    4800:	4283      	cmp	r3, r0
    4802:	d370      	bcc.n	48e6 <adc_nrfx_channel_setup+0x19e>
    4804:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4808:	3b03      	subs	r3, #3
    480a:	2b25      	cmp	r3, #37	; 0x25
    480c:	d86b      	bhi.n	48e6 <adc_nrfx_channel_setup+0x19e>
    480e:	e8df f003 	tbb	[pc, r3]
    4812:	6a16      	.short	0x6a16
    4814:	6a6a6a13 	.word	0x6a6a6a13
    4818:	6a6a5a6a 	.word	0x6a6a5a6a
    481c:	6a5e6a6a 	.word	0x6a5e6a6a
    4820:	626a6a6a 	.word	0x626a6a6a
    4824:	6a6a6a6a 	.word	0x6a6a6a6a
    4828:	6a6a6a6a 	.word	0x6a6a6a6a
    482c:	6a6a6a6a 	.word	0x6a6a6a6a
    4830:	6a6a6a6a 	.word	0x6a6a6a6a
    4834:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    4838:	2301      	movs	r3, #1
    483a:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    483e:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    4840:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    4844:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    4848:	f89d 3010 	ldrb.w	r3, [sp, #16]
    484c:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    4850:	f89d 0011 	ldrb.w	r0, [sp, #17]
    4854:	0100      	lsls	r0, r0, #4
    4856:	f000 0030 	and.w	r0, r0, #48	; 0x30
    485a:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    485c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    4860:	0200      	lsls	r0, r0, #8
    4862:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    4866:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    4868:	f89d 0013 	ldrb.w	r0, [sp, #19]
    486c:	0300      	lsls	r0, r0, #12
    486e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    4872:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    4874:	f89d 0014 	ldrb.w	r0, [sp, #20]
    4878:	0400      	lsls	r0, r0, #16
    487a:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    487e:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    4880:	f89d 0015 	ldrb.w	r0, [sp, #21]
    4884:	0500      	lsls	r0, r0, #20
    4886:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    488a:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    488c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4890:	0600      	lsls	r0, r0, #24
    4892:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    4896:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    4898:	4c1e      	ldr	r4, [pc, #120]	; (4914 <adc_nrfx_channel_setup+0x1cc>)
    489a:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    489e:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    48a2:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    48a4:	f102 0351 	add.w	r3, r2, #81	; 0x51
    48a8:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    48ac:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    48b0:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    48b2:	2000      	movs	r0, #0
    48b4:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    48b8:	7949      	ldrb	r1, [r1, #5]
    48ba:	4b17      	ldr	r3, [pc, #92]	; (4918 <adc_nrfx_channel_setup+0x1d0>)
    48bc:	441a      	add	r2, r3
    48be:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    48c2:	b006      	add	sp, #24
    48c4:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    48c6:	2302      	movs	r3, #2
    48c8:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    48cc:	e7b7      	b.n	483e <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    48ce:	2303      	movs	r3, #3
    48d0:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    48d4:	e7b3      	b.n	483e <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    48d6:	2304      	movs	r3, #4
    48d8:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    48dc:	e7af      	b.n	483e <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    48de:	2305      	movs	r3, #5
    48e0:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    48e4:	e7ab      	b.n	483e <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    48e6:	4b0d      	ldr	r3, [pc, #52]	; (491c <adc_nrfx_channel_setup+0x1d4>)
    48e8:	9302      	str	r3, [sp, #8]
    48ea:	2000      	movs	r0, #0
    48ec:	9001      	str	r0, [sp, #4]
    48ee:	9000      	str	r0, [sp, #0]
    48f0:	4603      	mov	r3, r0
    48f2:	2201      	movs	r2, #1
    48f4:	4905      	ldr	r1, [pc, #20]	; (490c <adc_nrfx_channel_setup+0x1c4>)
    48f6:	f006 ffac 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    48fa:	f06f 0015 	mvn.w	r0, #21
    48fe:	e7e0      	b.n	48c2 <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    4900:	f06f 0015 	mvn.w	r0, #21
    4904:	e7dd      	b.n	48c2 <adc_nrfx_channel_setup+0x17a>
    4906:	bf00      	nop
    4908:	0000deb8 	.word	0x0000deb8
    490c:	0000c5f4 	.word	0x0000c5f4
    4910:	0000de98 	.word	0x0000de98
    4914:	40007000 	.word	0x40007000
    4918:	20000000 	.word	0x20000000
    491c:	0000dedc 	.word	0x0000dedc

00004920 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    4920:	b5f0      	push	{r4, r5, r6, r7, lr}
    4922:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    4924:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    4926:	b136      	cbz	r6, 4936 <start_read+0x16>
    4928:	460d      	mov	r5, r1
    492a:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    492e:	d102      	bne.n	4936 <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    4930:	2300      	movs	r3, #0
	active_channels = 0U;
    4932:	461c      	mov	r4, r3
    4934:	e024      	b.n	4980 <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    4936:	4b54      	ldr	r3, [pc, #336]	; (4a88 <start_read+0x168>)
    4938:	9302      	str	r3, [sp, #8]
    493a:	2000      	movs	r0, #0
    493c:	9001      	str	r0, [sp, #4]
    493e:	9000      	str	r0, [sp, #0]
    4940:	4603      	mov	r3, r0
    4942:	2201      	movs	r2, #1
    4944:	4951      	ldr	r1, [pc, #324]	; (4a8c <start_read+0x16c>)
    4946:	f006 ff84 	bl	b852 <z_log_msg2_runtime_create>
		return -EINVAL;
    494a:	f06f 0315 	mvn.w	r3, #21
    494e:	e03f      	b.n	49d0 <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    4950:	9303      	str	r3, [sp, #12]
    4952:	4b4f      	ldr	r3, [pc, #316]	; (4a90 <start_read+0x170>)
    4954:	9302      	str	r3, [sp, #8]
    4956:	2000      	movs	r0, #0
    4958:	9001      	str	r0, [sp, #4]
    495a:	9000      	str	r0, [sp, #0]
    495c:	4603      	mov	r3, r0
    495e:	2201      	movs	r2, #1
    4960:	494a      	ldr	r1, [pc, #296]	; (4a8c <start_read+0x16c>)
    4962:	f006 ff76 	bl	b852 <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    4966:	f06f 0315 	mvn.w	r3, #21
    496a:	e031      	b.n	49d0 <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    496c:	f103 0251 	add.w	r2, r3, #81	; 0x51
    4970:	0112      	lsls	r2, r2, #4
    4972:	4948      	ldr	r1, [pc, #288]	; (4a94 <start_read+0x174>)
    4974:	2000      	movs	r0, #0
    4976:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    4978:	3301      	adds	r3, #1
    497a:	b2db      	uxtb	r3, r3
    497c:	2b07      	cmp	r3, #7
    497e:	d822      	bhi.n	49c6 <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    4980:	461a      	mov	r2, r3
    4982:	fa26 f103 	lsr.w	r1, r6, r3
    4986:	f011 0f01 	tst.w	r1, #1
    498a:	d0ef      	beq.n	496c <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    498c:	4942      	ldr	r1, [pc, #264]	; (4a98 <start_read+0x178>)
    498e:	4419      	add	r1, r3
    4990:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    4994:	2f00      	cmp	r7, #0
    4996:	d0db      	beq.n	4950 <start_read+0x30>
				(sequence->oversampling != 0U ?
    4998:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    499a:	1e01      	subs	r1, r0, #0
    499c:	bf18      	it	ne
    499e:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    49a0:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 4a94 <start_read+0x174>
    49a4:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    49a8:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    49ac:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    49b0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    49b4:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    49b8:	3251      	adds	r2, #81	; 0x51
    49ba:	0112      	lsls	r2, r2, #4
    49bc:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    49c0:	3401      	adds	r4, #1
    49c2:	b2e4      	uxtb	r4, r4
    49c4:	e7d8      	b.n	4978 <start_read+0x58>

	error = set_resolution(sequence);
    49c6:	4628      	mov	r0, r5
    49c8:	f7ff fe32 	bl	4630 <set_resolution>
	if (error) {
    49cc:	4603      	mov	r3, r0
    49ce:	b110      	cbz	r0, 49d6 <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    49d0:	4618      	mov	r0, r3
    49d2:	b005      	add	sp, #20
    49d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    49d6:	4621      	mov	r1, r4
    49d8:	4628      	mov	r0, r5
    49da:	f7ff fe59 	bl	4690 <set_oversampling>
	if (error) {
    49de:	4603      	mov	r3, r0
    49e0:	2800      	cmp	r0, #0
    49e2:	d1f5      	bne.n	49d0 <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    49e4:	4621      	mov	r1, r4
    49e6:	4628      	mov	r0, r5
    49e8:	f7ff fe8c 	bl	4704 <check_buffer_size>
	if (error) {
    49ec:	4603      	mov	r3, r0
    49ee:	2800      	cmp	r0, #0
    49f0:	d1ee      	bne.n	49d0 <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    49f2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    49f4:	4b27      	ldr	r3, [pc, #156]	; (4a94 <start_read+0x174>)
    49f6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    49fa:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    49fe:	4f26      	ldr	r7, [pc, #152]	; (4a98 <start_read+0x178>)
    4a00:	f107 0464 	add.w	r4, r7, #100	; 0x64
    4a04:	462e      	mov	r6, r5
    4a06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4a0a:	6833      	ldr	r3, [r6, #0]
    4a0c:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    4a0e:	2300      	movs	r3, #0
    4a10:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    4a12:	682b      	ldr	r3, [r5, #0]
    4a14:	b14b      	cbz	r3, 4a2a <start_read+0x10a>
		ctx->options = *sequence->options;
    4a16:	f107 0478 	add.w	r4, r7, #120	; 0x78
    4a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    4a20:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    4a22:	2300      	movs	r3, #0
    4a24:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    4a28:	b968      	cbnz	r0, 4a46 <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    4a2a:	481b      	ldr	r0, [pc, #108]	; (4a98 <start_read+0x178>)
    4a2c:	f7ff fde0 	bl	45f0 <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    4a30:	4c19      	ldr	r4, [pc, #100]	; (4a98 <start_read+0x178>)
    4a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4a3e:	f004 f8b1 	bl	8ba4 <z_impl_k_sem_take>
	return ctx->status;
    4a42:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    4a44:	e7c4      	b.n	49d0 <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4a46:	463c      	mov	r4, r7
    4a48:	2300      	movs	r3, #0
    4a4a:	f3bf 8f5b 	dmb	ish
    4a4e:	e854 2f00 	ldrex	r2, [r4]
    4a52:	e844 3100 	strex	r1, r3, [r4]
    4a56:	2900      	cmp	r1, #0
    4a58:	d1f9      	bne.n	4a4e <start_read+0x12e>
    4a5a:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    4a5e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    4a60:	0c59      	lsrs	r1, r3, #17
    4a62:	03db      	lsls	r3, r3, #15
    4a64:	480d      	ldr	r0, [pc, #52]	; (4a9c <start_read+0x17c>)
    4a66:	1818      	adds	r0, r3, r0
    4a68:	4a0d      	ldr	r2, [pc, #52]	; (4aa0 <start_read+0x180>)
    4a6a:	f04f 0300 	mov.w	r3, #0
    4a6e:	f141 0100 	adc.w	r1, r1, #0
    4a72:	f7fb fd27 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    4a76:	9000      	str	r0, [sp, #0]
    4a78:	9101      	str	r1, [sp, #4]
    4a7a:	2200      	movs	r2, #0
    4a7c:	2300      	movs	r3, #0
    4a7e:	f104 0008 	add.w	r0, r4, #8
    4a82:	f006 f863 	bl	ab4c <z_impl_k_timer_start>
}
    4a86:	e7d3      	b.n	4a30 <start_read+0x110>
    4a88:	0000df08 	.word	0x0000df08
    4a8c:	0000c5f4 	.word	0x0000c5f4
    4a90:	0000df28 	.word	0x0000df28
    4a94:	40007000 	.word	0x40007000
    4a98:	20000000 	.word	0x20000000
    4a9c:	000f423f 	.word	0x000f423f
    4aa0:	000f4240 	.word	0x000f4240

00004aa4 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    4aa4:	b570      	push	{r4, r5, r6, lr}
    4aa6:	4604      	mov	r4, r0
    4aa8:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    4aaa:	4e09      	ldr	r6, [pc, #36]	; (4ad0 <adc_nrfx_read+0x2c>)
    4aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ab4:	4630      	mov	r0, r6
    4ab6:	f004 f875 	bl	8ba4 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    4aba:	4629      	mov	r1, r5
    4abc:	4620      	mov	r0, r4
    4abe:	f7ff ff2f 	bl	4920 <start_read>
    4ac2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    4ac4:	4630      	mov	r0, r6
    4ac6:	f004 f829 	bl	8b1c <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    4aca:	4620      	mov	r0, r4
    4acc:	bd70      	pop	{r4, r5, r6, pc}
    4ace:	bf00      	nop
    4ad0:	20000040 	.word	0x20000040

00004ad4 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    4ad4:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ad6:	4b0f      	ldr	r3, [pc, #60]	; (4b14 <init_saadc+0x40>)
    4ad8:	2400      	movs	r4, #0
    4ada:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4ade:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4ae2:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    4ae6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    4aea:	2212      	movs	r2, #18
    4aec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    4af0:	2007      	movs	r0, #7
    4af2:	f7fe fe3b 	bl	376c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4af6:	4622      	mov	r2, r4
    4af8:	2101      	movs	r1, #1
    4afa:	2007      	movs	r0, #7
    4afc:	f7fe fe52 	bl	37a4 <z_arm_irq_priority_set>
	return sem->count;
    4b00:	4b05      	ldr	r3, [pc, #20]	; (4b18 <init_saadc+0x44>)
    4b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    4b04:	b10b      	cbz	r3, 4b0a <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    4b06:	2000      	movs	r0, #0
    4b08:	bd10      	pop	{r4, pc}
    4b0a:	4804      	ldr	r0, [pc, #16]	; (4b1c <init_saadc+0x48>)
    4b0c:	f004 f806 	bl	8b1c <z_impl_k_sem_give>
}
    4b10:	e7f9      	b.n	4b06 <init_saadc+0x32>
    4b12:	bf00      	nop
    4b14:	40007000 	.word	0x40007000
    4b18:	20000000 	.word	0x20000000
    4b1c:	20000040 	.word	0x20000040

00004b20 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b20:	4b36      	ldr	r3, [pc, #216]	; (4bfc <saadc_irq_handler+0xdc>)
    4b22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    4b26:	b97b      	cbnz	r3, 4b48 <saadc_irq_handler+0x28>
    4b28:	4b34      	ldr	r3, [pc, #208]	; (4bfc <saadc_irq_handler+0xdc>)
    4b2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d062      	beq.n	4bf8 <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b32:	4b32      	ldr	r3, [pc, #200]	; (4bfc <saadc_irq_handler+0xdc>)
    4b34:	2200      	movs	r2, #0
    4b36:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b3e:	2201      	movs	r2, #1
    4b40:	609a      	str	r2, [r3, #8]
    4b42:	601a      	str	r2, [r3, #0]
    4b44:	605a      	str	r2, [r3, #4]
}
    4b46:	4770      	bx	lr
{
    4b48:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b4a:	4b2c      	ldr	r3, [pc, #176]	; (4bfc <saadc_irq_handler+0xdc>)
    4b4c:	2200      	movs	r2, #0
    4b4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4b52:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b56:	2101      	movs	r1, #1
    4b58:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    4b5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    4b5e:	4b28      	ldr	r3, [pc, #160]	; (4c00 <saadc_irq_handler+0xe0>)
    4b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4b62:	b313      	cbz	r3, 4baa <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    4b64:	4b26      	ldr	r3, [pc, #152]	; (4c00 <saadc_irq_handler+0xe0>)
    4b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    4b68:	b143      	cbz	r3, 4b7c <saadc_irq_handler+0x5c>
			action = callback(dev,
    4b6a:	4925      	ldr	r1, [pc, #148]	; (4c00 <saadc_irq_handler+0xe0>)
    4b6c:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    4b70:	3164      	adds	r1, #100	; 0x64
    4b72:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    4b74:	2801      	cmp	r0, #1
    4b76:	d00f      	beq.n	4b98 <saadc_irq_handler+0x78>
    4b78:	2802      	cmp	r0, #2
    4b7a:	d010      	beq.n	4b9e <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    4b7c:	4a20      	ldr	r2, [pc, #128]	; (4c00 <saadc_irq_handler+0xe0>)
    4b7e:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    4b82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    4b86:	4293      	cmp	r3, r2
    4b88:	d213      	bcs.n	4bb2 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    4b8a:	3301      	adds	r3, #1
    4b8c:	4a1c      	ldr	r2, [pc, #112]	; (4c00 <saadc_irq_handler+0xe0>)
    4b8e:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    4b92:	2100      	movs	r1, #0
		bool finish = false;
    4b94:	460b      	mov	r3, r1
    4b96:	e004      	b.n	4ba2 <saadc_irq_handler+0x82>
		switch (action) {
    4b98:	2101      	movs	r1, #1
    4b9a:	2300      	movs	r3, #0
    4b9c:	e001      	b.n	4ba2 <saadc_irq_handler+0x82>
		bool repeat = false;
    4b9e:	2100      	movs	r1, #0
			finish = true;
    4ba0:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    4ba2:	b14b      	cbz	r3, 4bb8 <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    4ba4:	4b16      	ldr	r3, [pc, #88]	; (4c00 <saadc_irq_handler+0xe0>)
    4ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    4ba8:	bb13      	cbnz	r3, 4bf0 <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    4baa:	4816      	ldr	r0, [pc, #88]	; (4c04 <saadc_irq_handler+0xe4>)
    4bac:	f003 ffb6 	bl	8b1c <z_impl_k_sem_give>
}
    4bb0:	bd10      	pop	{r4, pc}
		bool repeat = false;
    4bb2:	2100      	movs	r1, #0
				finish = true;
    4bb4:	2301      	movs	r3, #1
    4bb6:	e7f4      	b.n	4ba2 <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    4bb8:	4c11      	ldr	r4, [pc, #68]	; (4c00 <saadc_irq_handler+0xe0>)
    4bba:	4620      	mov	r0, r4
    4bbc:	f7ff fd2a 	bl	4614 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    4bc0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    4bc2:	b91b      	cbnz	r3, 4bcc <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    4bc4:	4620      	mov	r0, r4
    4bc6:	f7ff fd13 	bl	45f0 <adc_context_start_sampling>
    4bca:	e7f1      	b.n	4bb0 <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4bcc:	4b0c      	ldr	r3, [pc, #48]	; (4c00 <saadc_irq_handler+0xe0>)
    4bce:	f3bf 8f5b 	dmb	ish
    4bd2:	e853 2f00 	ldrex	r2, [r3]
    4bd6:	1e51      	subs	r1, r2, #1
    4bd8:	e843 1000 	strex	r0, r1, [r3]
    4bdc:	2800      	cmp	r0, #0
    4bde:	d1f8      	bne.n	4bd2 <saadc_irq_handler+0xb2>
    4be0:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    4be4:	2a01      	cmp	r2, #1
    4be6:	dde3      	ble.n	4bb0 <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    4be8:	4618      	mov	r0, r3
    4bea:	f7ff fd01 	bl	45f0 <adc_context_start_sampling>
			return;
    4bee:	e7df      	b.n	4bb0 <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    4bf0:	4805      	ldr	r0, [pc, #20]	; (4c08 <saadc_irq_handler+0xe8>)
    4bf2:	f007 fb91 	bl	c318 <z_impl_k_timer_stop>
}
    4bf6:	e7d8      	b.n	4baa <saadc_irq_handler+0x8a>
    4bf8:	4770      	bx	lr
    4bfa:	bf00      	nop
    4bfc:	40007000 	.word	0x40007000
    4c00:	20000000 	.word	0x20000000
    4c04:	20000050 	.word	0x20000050
    4c08:	20000008 	.word	0x20000008

00004c0c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4c0c:	4800      	ldr	r0, [pc, #0]	; (4c10 <get_hf_flags+0x4>)
    4c0e:	4770      	bx	lr
    4c10:	20000c54 	.word	0x20000c54

00004c14 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4c14:	4b01      	ldr	r3, [pc, #4]	; (4c1c <get_subsys+0x8>)
    4c16:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4c18:	1140      	asrs	r0, r0, #5
    4c1a:	4770      	bx	lr
    4c1c:	20000c0c 	.word	0x20000c0c

00004c20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4c20:	b530      	push	{r4, r5, lr}
    4c22:	b083      	sub	sp, #12
    4c24:	4605      	mov	r5, r0
    4c26:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c28:	f7ff fff4 	bl	4c14 <get_subsys>
    4c2c:	4601      	mov	r1, r0
    4c2e:	2340      	movs	r3, #64	; 0x40
    4c30:	9300      	str	r3, [sp, #0]
    4c32:	4623      	mov	r3, r4
    4c34:	4a05      	ldr	r2, [pc, #20]	; (4c4c <onoff_start+0x2c>)
    4c36:	4806      	ldr	r0, [pc, #24]	; (4c50 <onoff_start+0x30>)
    4c38:	f006 fe87 	bl	b94a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4c3c:	1e01      	subs	r1, r0, #0
    4c3e:	db01      	blt.n	4c44 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4c40:	b003      	add	sp, #12
    4c42:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4c44:	4628      	mov	r0, r5
    4c46:	47a0      	blx	r4
}
    4c48:	e7fa      	b.n	4c40 <onoff_start+0x20>
    4c4a:	bf00      	nop
    4c4c:	0000b993 	.word	0x0000b993
    4c50:	0000c3e4 	.word	0x0000c3e4

00004c54 <generic_hfclk_stop>:
{
    4c54:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c56:	4b0a      	ldr	r3, [pc, #40]	; (4c80 <generic_hfclk_stop+0x2c>)
    4c58:	f3bf 8f5b 	dmb	ish
    4c5c:	e853 2f00 	ldrex	r2, [r3]
    4c60:	f022 0102 	bic.w	r1, r2, #2
    4c64:	e843 1000 	strex	r0, r1, [r3]
    4c68:	2800      	cmp	r0, #0
    4c6a:	d1f7      	bne.n	4c5c <generic_hfclk_stop+0x8>
    4c6c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4c70:	f012 0f01 	tst.w	r2, #1
    4c74:	d000      	beq.n	4c78 <generic_hfclk_stop+0x24>
}
    4c76:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4c78:	f006 fe9d 	bl	b9b6 <hfclk_stop>
    4c7c:	e7fb      	b.n	4c76 <generic_hfclk_stop+0x22>
    4c7e:	bf00      	nop
    4c80:	20000c64 	.word	0x20000c64

00004c84 <get_status>:
{
    4c84:	b570      	push	{r4, r5, r6, lr}
    4c86:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4c88:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4c8a:	2c01      	cmp	r4, #1
    4c8c:	d807      	bhi.n	4c9e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4c8e:	4621      	mov	r1, r4
    4c90:	4628      	mov	r0, r5
    4c92:	f006 fded 	bl	b870 <get_sub_data>
    4c96:	6880      	ldr	r0, [r0, #8]
}
    4c98:	f000 0007 	and.w	r0, r0, #7
    4c9c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4c9e:	4e06      	ldr	r6, [pc, #24]	; (4cb8 <get_status+0x34>)
    4ca0:	2379      	movs	r3, #121	; 0x79
    4ca2:	4632      	mov	r2, r6
    4ca4:	4905      	ldr	r1, [pc, #20]	; (4cbc <get_status+0x38>)
    4ca6:	4806      	ldr	r0, [pc, #24]	; (4cc0 <get_status+0x3c>)
    4ca8:	f006 fbb0 	bl	b40c <assert_print>
    4cac:	2179      	movs	r1, #121	; 0x79
    4cae:	4630      	mov	r0, r6
    4cb0:	f006 fba5 	bl	b3fe <assert_post_action>
    4cb4:	e7eb      	b.n	4c8e <get_status+0xa>
    4cb6:	bf00      	nop
    4cb8:	0000df60 	.word	0x0000df60
    4cbc:	0000dfa0 	.word	0x0000dfa0
    4cc0:	0000c8bc 	.word	0x0000c8bc

00004cc4 <stop>:
{
    4cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc8:	4607      	mov	r7, r0
    4cca:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4ccc:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4cce:	4621      	mov	r1, r4
    4cd0:	f006 fdce 	bl	b870 <get_sub_data>
    4cd4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cd6:	2c01      	cmp	r4, #1
    4cd8:	d80f      	bhi.n	4cfa <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    4cda:	4631      	mov	r1, r6
    4cdc:	f105 0008 	add.w	r0, r5, #8
    4ce0:	f006 fdd7 	bl	b892 <set_off_state>
	if (err < 0) {
    4ce4:	2800      	cmp	r0, #0
    4ce6:	db06      	blt.n	4cf6 <stop+0x32>
	get_sub_config(dev, type)->stop();
    4ce8:	4621      	mov	r1, r4
    4cea:	4638      	mov	r0, r7
    4cec:	f006 fdc7 	bl	b87e <get_sub_config>
    4cf0:	6843      	ldr	r3, [r0, #4]
    4cf2:	4798      	blx	r3
	return 0;
    4cf4:	2000      	movs	r0, #0
}
    4cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cfa:	f8df 801c 	ldr.w	r8, [pc, #28]	; 4d18 <stop+0x54>
    4cfe:	f240 134d 	movw	r3, #333	; 0x14d
    4d02:	4642      	mov	r2, r8
    4d04:	4905      	ldr	r1, [pc, #20]	; (4d1c <stop+0x58>)
    4d06:	4806      	ldr	r0, [pc, #24]	; (4d20 <stop+0x5c>)
    4d08:	f006 fb80 	bl	b40c <assert_print>
    4d0c:	f240 114d 	movw	r1, #333	; 0x14d
    4d10:	4640      	mov	r0, r8
    4d12:	f006 fb74 	bl	b3fe <assert_post_action>
    4d16:	e7e0      	b.n	4cda <stop+0x16>
    4d18:	0000df60 	.word	0x0000df60
    4d1c:	0000dfa0 	.word	0x0000dfa0
    4d20:	0000c8bc 	.word	0x0000c8bc

00004d24 <onoff_stop>:
{
    4d24:	b538      	push	{r3, r4, r5, lr}
    4d26:	4605      	mov	r5, r0
    4d28:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4d2a:	f7ff ff73 	bl	4c14 <get_subsys>
    4d2e:	4601      	mov	r1, r0
    4d30:	2240      	movs	r2, #64	; 0x40
    4d32:	4803      	ldr	r0, [pc, #12]	; (4d40 <onoff_stop+0x1c>)
    4d34:	f7ff ffc6 	bl	4cc4 <stop>
    4d38:	4601      	mov	r1, r0
	notify(mgr, res);
    4d3a:	4628      	mov	r0, r5
    4d3c:	47a0      	blx	r4
}
    4d3e:	bd38      	pop	{r3, r4, r5, pc}
    4d40:	0000c3e4 	.word	0x0000c3e4

00004d44 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4d44:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4d46:	2801      	cmp	r0, #1
    4d48:	d01d      	beq.n	4d86 <clock_event_handler+0x42>
    4d4a:	2803      	cmp	r0, #3
    4d4c:	d020      	beq.n	4d90 <clock_event_handler+0x4c>
    4d4e:	b168      	cbz	r0, 4d6c <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    4d50:	4c16      	ldr	r4, [pc, #88]	; (4dac <clock_event_handler+0x68>)
    4d52:	f240 2362 	movw	r3, #610	; 0x262
    4d56:	4622      	mov	r2, r4
    4d58:	4915      	ldr	r1, [pc, #84]	; (4db0 <clock_event_handler+0x6c>)
    4d5a:	4816      	ldr	r0, [pc, #88]	; (4db4 <clock_event_handler+0x70>)
    4d5c:	f006 fb56 	bl	b40c <assert_print>
    4d60:	f240 2162 	movw	r1, #610	; 0x262
    4d64:	4620      	mov	r0, r4
    4d66:	f006 fb4a 	bl	b3fe <assert_post_action>
		break;
	}
}
    4d6a:	e010      	b.n	4d8e <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4d6c:	2100      	movs	r1, #0
    4d6e:	4812      	ldr	r0, [pc, #72]	; (4db8 <clock_event_handler+0x74>)
    4d70:	f006 fd7e 	bl	b870 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4d74:	6883      	ldr	r3, [r0, #8]
    4d76:	f013 0f07 	tst.w	r3, #7
    4d7a:	d108      	bne.n	4d8e <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4d7c:	2100      	movs	r1, #0
    4d7e:	480e      	ldr	r0, [pc, #56]	; (4db8 <clock_event_handler+0x74>)
    4d80:	f006 fdd1 	bl	b926 <clkstarted_handle>
    4d84:	e003      	b.n	4d8e <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4d86:	2101      	movs	r1, #1
    4d88:	480b      	ldr	r0, [pc, #44]	; (4db8 <clock_event_handler+0x74>)
    4d8a:	f006 fdcc 	bl	b926 <clkstarted_handle>
}
    4d8e:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    4d90:	4c06      	ldr	r4, [pc, #24]	; (4dac <clock_event_handler+0x68>)
    4d92:	f240 235e 	movw	r3, #606	; 0x25e
    4d96:	4622      	mov	r2, r4
    4d98:	4905      	ldr	r1, [pc, #20]	; (4db0 <clock_event_handler+0x6c>)
    4d9a:	4806      	ldr	r0, [pc, #24]	; (4db4 <clock_event_handler+0x70>)
    4d9c:	f006 fb36 	bl	b40c <assert_print>
    4da0:	f240 215e 	movw	r1, #606	; 0x25e
    4da4:	4620      	mov	r0, r4
    4da6:	f006 fb2a 	bl	b3fe <assert_post_action>
		break;
    4daa:	e7f0      	b.n	4d8e <clock_event_handler+0x4a>
    4dac:	0000df60 	.word	0x0000df60
    4db0:	0000ca80 	.word	0x0000ca80
    4db4:	0000c8bc 	.word	0x0000c8bc
    4db8:	0000c3e4 	.word	0x0000c3e4

00004dbc <api_blocking_start>:
{
    4dbc:	b500      	push	{lr}
    4dbe:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4dc0:	f8cd d000 	str.w	sp, [sp]
    4dc4:	f8cd d004 	str.w	sp, [sp, #4]
    4dc8:	2300      	movs	r3, #0
    4dca:	9302      	str	r3, [sp, #8]
    4dcc:	2301      	movs	r3, #1
    4dce:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4dd0:	466b      	mov	r3, sp
    4dd2:	4a07      	ldr	r2, [pc, #28]	; (4df0 <api_blocking_start+0x34>)
    4dd4:	f006 fdd5 	bl	b982 <api_start>
	if (err < 0) {
    4dd8:	2800      	cmp	r0, #0
    4dda:	db05      	blt.n	4de8 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    4ddc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4de0:	2300      	movs	r3, #0
    4de2:	4668      	mov	r0, sp
    4de4:	f003 fede 	bl	8ba4 <z_impl_k_sem_take>
}
    4de8:	b005      	add	sp, #20
    4dea:	f85d fb04 	ldr.w	pc, [sp], #4
    4dee:	bf00      	nop
    4df0:	0000b9d5 	.word	0x0000b9d5

00004df4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4df4:	b570      	push	{r4, r5, r6, lr}
    4df6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4df8:	2200      	movs	r2, #0
    4dfa:	2101      	movs	r1, #1
    4dfc:	4610      	mov	r0, r2
    4dfe:	f7fe fcd1 	bl	37a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4e02:	4811      	ldr	r0, [pc, #68]	; (4e48 <clk_init+0x54>)
    4e04:	f001 fd8c 	bl	6920 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4e08:	4b10      	ldr	r3, [pc, #64]	; (4e4c <clk_init+0x58>)
    4e0a:	4298      	cmp	r0, r3
    4e0c:	d119      	bne.n	4e42 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4e0e:	f001 fdb1 	bl	6974 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4e12:	2400      	movs	r4, #0
    4e14:	2c01      	cmp	r4, #1
    4e16:	d812      	bhi.n	4e3e <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4e18:	4621      	mov	r1, r4
    4e1a:	4630      	mov	r0, r6
    4e1c:	f006 fd28 	bl	b870 <get_sub_data>
    4e20:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4e22:	4621      	mov	r1, r4
    4e24:	4630      	mov	r0, r6
    4e26:	f006 fd30 	bl	b88a <get_onoff_manager>
    4e2a:	4909      	ldr	r1, [pc, #36]	; (4e50 <clk_init+0x5c>)
    4e2c:	f006 f9f7 	bl	b21e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4e30:	2800      	cmp	r0, #0
    4e32:	db05      	blt.n	4e40 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4e34:	2301      	movs	r3, #1
    4e36:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4e38:	441c      	add	r4, r3
    4e3a:	b2e4      	uxtb	r4, r4
    4e3c:	e7ea      	b.n	4e14 <clk_init+0x20>
	}

	return 0;
    4e3e:	2000      	movs	r0, #0
}
    4e40:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4e42:	f06f 0004 	mvn.w	r0, #4
    4e46:	e7fb      	b.n	4e40 <clk_init+0x4c>
    4e48:	00004d45 	.word	0x00004d45
    4e4c:	0bad0000 	.word	0x0bad0000
    4e50:	0000e01c 	.word	0x0000e01c

00004e54 <lfclk_spinwait>:
{
    4e54:	b570      	push	{r4, r5, r6, lr}
    4e56:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4e58:	2801      	cmp	r0, #1
    4e5a:	d107      	bne.n	4e6c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4e64:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4e68:	2b01      	cmp	r3, #1
    4e6a:	d05a      	beq.n	4f22 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4e6c:	f007 f9ba 	bl	c1e4 <k_is_in_isr>
    4e70:	b928      	cbnz	r0, 4e7e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    4e72:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <lfclk_spinwait+0xdc>)
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d043      	beq.n	4f02 <lfclk_spinwait+0xae>
    4e7a:	2300      	movs	r3, #0
    4e7c:	e000      	b.n	4e80 <lfclk_spinwait+0x2c>
    4e7e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4e80:	461c      	mov	r4, r3
    4e82:	2b00      	cmp	r3, #0
    4e84:	d03f      	beq.n	4f06 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    4e86:	f04f 0320 	mov.w	r3, #32
    4e8a:	f3ef 8611 	mrs	r6, BASEPRI
    4e8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e92:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4e96:	b924      	cbnz	r4, 4ea2 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    4e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e9c:	2202      	movs	r2, #2
    4e9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4ea6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4eaa:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4eae:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4eb2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4eb6:	d12d      	bne.n	4f14 <lfclk_spinwait+0xc0>
    return false;
    4eb8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4eba:	b11a      	cbz	r2, 4ec4 <lfclk_spinwait+0x70>
    4ebc:	2b01      	cmp	r3, #1
    4ebe:	d02b      	beq.n	4f18 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4ec0:	2d01      	cmp	r5, #1
    4ec2:	d029      	beq.n	4f18 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4ec4:	b30c      	cbz	r4, 4f0a <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4ec6:	4630      	mov	r0, r6
    4ec8:	f7fe fbfc 	bl	36c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ed0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d1e4      	bne.n	4ea2 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4edc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d0de      	beq.n	4ea2 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ee8:	2200      	movs	r2, #0
    4eea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4eee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ef2:	2201      	movs	r2, #1
    4ef4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ef8:	490e      	ldr	r1, [pc, #56]	; (4f34 <lfclk_spinwait+0xe0>)
    4efa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4efe:	609a      	str	r2, [r3, #8]
}
    4f00:	e7cf      	b.n	4ea2 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4f02:	2301      	movs	r3, #1
    4f04:	e7bc      	b.n	4e80 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    4f06:	2600      	movs	r6, #0
    4f08:	e7c5      	b.n	4e96 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    4f0a:	2021      	movs	r0, #33	; 0x21
    4f0c:	2100      	movs	r1, #0
    4f0e:	f005 f8e5 	bl	a0dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4f12:	e7db      	b.n	4ecc <lfclk_spinwait+0x78>
                return true;
    4f14:	2201      	movs	r2, #1
    4f16:	e7d0      	b.n	4eba <lfclk_spinwait+0x66>
	if (isr_mode) {
    4f18:	b124      	cbz	r4, 4f24 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    4f1a:	f386 8811 	msr	BASEPRI, r6
    4f1e:	f3bf 8f6f 	isb	sy
}
    4f22:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f28:	2202      	movs	r2, #2
    4f2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4f2e:	e7f8      	b.n	4f22 <lfclk_spinwait+0xce>
    4f30:	20001386 	.word	0x20001386
    4f34:	e000e100 	.word	0xe000e100

00004f38 <generic_hfclk_start>:
{
    4f38:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f3a:	f04f 0320 	mov.w	r3, #32
    4f3e:	f3ef 8411 	mrs	r4, BASEPRI
    4f42:	f383 8812 	msr	BASEPRI_MAX, r3
    4f46:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4f4a:	4a13      	ldr	r2, [pc, #76]	; (4f98 <generic_hfclk_start+0x60>)
    4f4c:	6813      	ldr	r3, [r2, #0]
    4f4e:	f043 0302 	orr.w	r3, r3, #2
    4f52:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4f54:	f013 0f01 	tst.w	r3, #1
    4f58:	d108      	bne.n	4f6c <generic_hfclk_start+0x34>
	bool already_started = false;
    4f5a:	2300      	movs	r3, #0
	__asm__ volatile(
    4f5c:	f384 8811 	msr	BASEPRI, r4
    4f60:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4f64:	b99b      	cbnz	r3, 4f8e <generic_hfclk_start+0x56>
	hfclk_start();
    4f66:	f006 fd1c 	bl	b9a2 <hfclk_start>
}
    4f6a:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f70:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4f74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4f78:	f012 0f01 	tst.w	r2, #1
    4f7c:	d101      	bne.n	4f82 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4f7e:	2300      	movs	r3, #0
    4f80:	e7ec      	b.n	4f5c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4f82:	f7ff fe43 	bl	4c0c <get_hf_flags>
    4f86:	f006 fcbb 	bl	b900 <set_on_state>
			already_started = true;
    4f8a:	2301      	movs	r3, #1
    4f8c:	e7e6      	b.n	4f5c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4f8e:	2100      	movs	r1, #0
    4f90:	4802      	ldr	r0, [pc, #8]	; (4f9c <generic_hfclk_start+0x64>)
    4f92:	f006 fcc8 	bl	b926 <clkstarted_handle>
		return;
    4f96:	e7e8      	b.n	4f6a <generic_hfclk_start+0x32>
    4f98:	20000c64 	.word	0x20000c64
    4f9c:	0000c3e4 	.word	0x0000c3e4

00004fa0 <z_nrf_clock_control_lf_on>:
{
    4fa0:	b538      	push	{r3, r4, r5, lr}
    4fa2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4fa4:	4b1f      	ldr	r3, [pc, #124]	; (5024 <z_nrf_clock_control_lf_on+0x84>)
    4fa6:	2101      	movs	r1, #1
    4fa8:	f3bf 8f5b 	dmb	ish
    4fac:	e853 2f00 	ldrex	r2, [r3]
    4fb0:	e843 1000 	strex	r0, r1, [r3]
    4fb4:	2800      	cmp	r0, #0
    4fb6:	d1f9      	bne.n	4fac <z_nrf_clock_control_lf_on+0xc>
    4fb8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4fbc:	b142      	cbz	r2, 4fd0 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    4fbe:	b134      	cbz	r4, 4fce <z_nrf_clock_control_lf_on+0x2e>
    4fc0:	1e63      	subs	r3, r4, #1
    4fc2:	b2db      	uxtb	r3, r3
    4fc4:	2b01      	cmp	r3, #1
    4fc6:	d81f      	bhi.n	5008 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    4fc8:	4620      	mov	r0, r4
    4fca:	f7ff ff43 	bl	4e54 <lfclk_spinwait>
}
    4fce:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4fd0:	4815      	ldr	r0, [pc, #84]	; (5028 <z_nrf_clock_control_lf_on+0x88>)
    4fd2:	f006 fc5a 	bl	b88a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4fd6:	4915      	ldr	r1, [pc, #84]	; (502c <z_nrf_clock_control_lf_on+0x8c>)
    4fd8:	2300      	movs	r3, #0
    4fda:	604b      	str	r3, [r1, #4]
    4fdc:	608b      	str	r3, [r1, #8]
    4fde:	60cb      	str	r3, [r1, #12]
    4fe0:	2301      	movs	r3, #1
    4fe2:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4fe4:	f7fc fdd4 	bl	1b90 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4fe8:	2800      	cmp	r0, #0
    4fea:	dae8      	bge.n	4fbe <z_nrf_clock_control_lf_on+0x1e>
    4fec:	4d10      	ldr	r5, [pc, #64]	; (5030 <z_nrf_clock_control_lf_on+0x90>)
    4fee:	f44f 7308 	mov.w	r3, #544	; 0x220
    4ff2:	462a      	mov	r2, r5
    4ff4:	490f      	ldr	r1, [pc, #60]	; (5034 <z_nrf_clock_control_lf_on+0x94>)
    4ff6:	4810      	ldr	r0, [pc, #64]	; (5038 <z_nrf_clock_control_lf_on+0x98>)
    4ff8:	f006 fa08 	bl	b40c <assert_print>
    4ffc:	f44f 7108 	mov.w	r1, #544	; 0x220
    5000:	4628      	mov	r0, r5
    5002:	f006 f9fc 	bl	b3fe <assert_post_action>
    5006:	e7da      	b.n	4fbe <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    5008:	4c09      	ldr	r4, [pc, #36]	; (5030 <z_nrf_clock_control_lf_on+0x90>)
    500a:	f240 2332 	movw	r3, #562	; 0x232
    500e:	4622      	mov	r2, r4
    5010:	490a      	ldr	r1, [pc, #40]	; (503c <z_nrf_clock_control_lf_on+0x9c>)
    5012:	4809      	ldr	r0, [pc, #36]	; (5038 <z_nrf_clock_control_lf_on+0x98>)
    5014:	f006 f9fa 	bl	b40c <assert_print>
    5018:	f240 2132 	movw	r1, #562	; 0x232
    501c:	4620      	mov	r0, r4
    501e:	f006 f9ee 	bl	b3fe <assert_post_action>
    5022:	e7d4      	b.n	4fce <z_nrf_clock_control_lf_on+0x2e>
    5024:	20000c68 	.word	0x20000c68
    5028:	0000c3e4 	.word	0x0000c3e4
    502c:	20000bfc 	.word	0x20000bfc
    5030:	0000df60 	.word	0x0000df60
    5034:	0000d428 	.word	0x0000d428
    5038:	0000c8bc 	.word	0x0000c8bc
    503c:	0000ca80 	.word	0x0000ca80

00005040 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5040:	b510      	push	{r4, lr}
    5042:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5044:	280a      	cmp	r0, #10
    5046:	d007      	beq.n	5058 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5048:	4b07      	ldr	r3, [pc, #28]	; (5068 <console_out+0x28>)
    504a:	6818      	ldr	r0, [r3, #0]
    504c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    504e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5050:	685b      	ldr	r3, [r3, #4]
    5052:	4798      	blx	r3

	return c;
}
    5054:	4620      	mov	r0, r4
    5056:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    5058:	4b03      	ldr	r3, [pc, #12]	; (5068 <console_out+0x28>)
    505a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    505c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    505e:	685b      	ldr	r3, [r3, #4]
    5060:	210d      	movs	r1, #13
    5062:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    5064:	e7f0      	b.n	5048 <console_out+0x8>
    5066:	bf00      	nop
    5068:	20000c6c 	.word	0x20000c6c

0000506c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    506c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    506e:	4c04      	ldr	r4, [pc, #16]	; (5080 <uart_console_hook_install+0x14>)
    5070:	4620      	mov	r0, r4
    5072:	f7ff fa4f 	bl	4514 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    5076:	4620      	mov	r0, r4
    5078:	f7fc faf0 	bl	165c <__printk_hook_install>
#endif
}
    507c:	bd10      	pop	{r4, pc}
    507e:	bf00      	nop
    5080:	00005041 	.word	0x00005041

00005084 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5084:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5086:	4806      	ldr	r0, [pc, #24]	; (50a0 <uart_console_init+0x1c>)
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <uart_console_init+0x20>)
    508a:	6018      	str	r0, [r3, #0]
    508c:	f007 f84e 	bl	c12c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5090:	b118      	cbz	r0, 509a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    5092:	f7ff ffeb 	bl	506c <uart_console_hook_install>

	return 0;
    5096:	2000      	movs	r0, #0
}
    5098:	bd08      	pop	{r3, pc}
		return -ENODEV;
    509a:	f06f 0012 	mvn.w	r0, #18
    509e:	e7fb      	b.n	5098 <uart_console_init+0x14>
    50a0:	0000c444 	.word	0x0000c444
    50a4:	20000c6c 	.word	0x20000c6c

000050a8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50a8:	b128      	cbz	r0, 50b6 <get_dev+0xe>
    50aa:	2801      	cmp	r0, #1
    50ac:	d101      	bne.n	50b2 <get_dev+0xa>
    50ae:	4803      	ldr	r0, [pc, #12]	; (50bc <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    50b0:	4770      	bx	lr
	const struct device *dev = NULL;
    50b2:	2000      	movs	r0, #0
    50b4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50b6:	4802      	ldr	r0, [pc, #8]	; (50c0 <get_dev+0x18>)
    50b8:	4770      	bx	lr
    50ba:	bf00      	nop
    50bc:	0000c3fc 	.word	0x0000c3fc
    50c0:	0000c414 	.word	0x0000c414

000050c4 <gpio_nrfx_manage_callback>:
{
    50c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50c8:	4616      	mov	r6, r2
	return port->data;
    50ca:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    50cc:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    50ce:	460c      	mov	r4, r1
    50d0:	b131      	cbz	r1, 50e0 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    50d2:	6863      	ldr	r3, [r4, #4]
    50d4:	b1a3      	cbz	r3, 5100 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    50d6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    50d8:	2b00      	cmp	r3, #0
    50da:	d03b      	beq.n	5154 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    50dc:	2100      	movs	r1, #0
    50de:	e02a      	b.n	5136 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    50e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5178 <gpio_nrfx_manage_callback+0xb4>
    50e4:	2324      	movs	r3, #36	; 0x24
    50e6:	4642      	mov	r2, r8
    50e8:	4924      	ldr	r1, [pc, #144]	; (517c <gpio_nrfx_manage_callback+0xb8>)
    50ea:	4825      	ldr	r0, [pc, #148]	; (5180 <gpio_nrfx_manage_callback+0xbc>)
    50ec:	f006 f98e 	bl	b40c <assert_print>
    50f0:	4824      	ldr	r0, [pc, #144]	; (5184 <gpio_nrfx_manage_callback+0xc0>)
    50f2:	f006 f98b 	bl	b40c <assert_print>
    50f6:	2124      	movs	r1, #36	; 0x24
    50f8:	4640      	mov	r0, r8
    50fa:	f006 f980 	bl	b3fe <assert_post_action>
    50fe:	e7e8      	b.n	50d2 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5100:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5178 <gpio_nrfx_manage_callback+0xb4>
    5104:	2325      	movs	r3, #37	; 0x25
    5106:	4642      	mov	r2, r8
    5108:	491f      	ldr	r1, [pc, #124]	; (5188 <gpio_nrfx_manage_callback+0xc4>)
    510a:	481d      	ldr	r0, [pc, #116]	; (5180 <gpio_nrfx_manage_callback+0xbc>)
    510c:	f006 f97e 	bl	b40c <assert_print>
    5110:	481e      	ldr	r0, [pc, #120]	; (518c <gpio_nrfx_manage_callback+0xc8>)
    5112:	f006 f97b 	bl	b40c <assert_print>
    5116:	2125      	movs	r1, #37	; 0x25
    5118:	4640      	mov	r0, r8
    511a:	f006 f970 	bl	b3fe <assert_post_action>
    511e:	e7da      	b.n	50d6 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5120:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5122:	606b      	str	r3, [r5, #4]
	return list->tail;
    5124:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5126:	4294      	cmp	r4, r2
    5128:	d10f      	bne.n	514a <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    512a:	607b      	str	r3, [r7, #4]
}
    512c:	e00d      	b.n	514a <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    512e:	6079      	str	r1, [r7, #4]
}
    5130:	e00b      	b.n	514a <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5132:	4619      	mov	r1, r3
    5134:	681b      	ldr	r3, [r3, #0]
    5136:	b15b      	cbz	r3, 5150 <gpio_nrfx_manage_callback+0x8c>
    5138:	429c      	cmp	r4, r3
    513a:	d1fa      	bne.n	5132 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    513c:	2900      	cmp	r1, #0
    513e:	d0ef      	beq.n	5120 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5140:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5142:	600b      	str	r3, [r1, #0]
	return list->tail;
    5144:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5146:	429c      	cmp	r4, r3
    5148:	d0f1      	beq.n	512e <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    514a:	2300      	movs	r3, #0
    514c:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    514e:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5150:	b903      	cbnz	r3, 5154 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    5152:	b156      	cbz	r6, 516a <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5154:	b166      	cbz	r6, 5170 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    5156:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    5158:	6023      	str	r3, [r4, #0]
	list->head = node;
    515a:	606c      	str	r4, [r5, #4]
	return list->tail;
    515c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    515e:	b10b      	cbz	r3, 5164 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5160:	2000      	movs	r0, #0
    5162:	e006      	b.n	5172 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    5164:	607c      	str	r4, [r7, #4]
    5166:	2000      	movs	r0, #0
}
    5168:	e003      	b.n	5172 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    516a:	f06f 0015 	mvn.w	r0, #21
    516e:	e000      	b.n	5172 <gpio_nrfx_manage_callback+0xae>
	return 0;
    5170:	2000      	movs	r0, #0
}
    5172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5176:	bf00      	nop
    5178:	0000e028 	.word	0x0000e028
    517c:	0000e058 	.word	0x0000e058
    5180:	0000c8bc 	.word	0x0000c8bc
    5184:	0000e064 	.word	0x0000e064
    5188:	0000e074 	.word	0x0000e074
    518c:	0000e088 	.word	0x0000e088

00005190 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5194:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    5198:	0940      	lsrs	r0, r0, #5
    519a:	f7ff ff85 	bl	50a8 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    519e:	b380      	cbz	r0, 5202 <nrfx_gpio_handler+0x72>
    51a0:	4607      	mov	r7, r0
	return port->data;
    51a2:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    51a4:	2601      	movs	r6, #1
    51a6:	40a6      	lsls	r6, r4
	return list->head;
    51a8:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    51aa:	b11c      	cbz	r4, 51b4 <nrfx_gpio_handler+0x24>
    51ac:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    51ae:	b17c      	cbz	r4, 51d0 <nrfx_gpio_handler+0x40>
	return node->next;
    51b0:	6825      	ldr	r5, [r4, #0]
    51b2:	e00d      	b.n	51d0 <nrfx_gpio_handler+0x40>
    51b4:	4625      	mov	r5, r4
    51b6:	e00b      	b.n	51d0 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    51b8:	6863      	ldr	r3, [r4, #4]
    51ba:	68a2      	ldr	r2, [r4, #8]
    51bc:	4032      	ands	r2, r6
    51be:	4621      	mov	r1, r4
    51c0:	4638      	mov	r0, r7
    51c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    51c4:	b1dd      	cbz	r5, 51fe <nrfx_gpio_handler+0x6e>
    51c6:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    51c8:	b105      	cbz	r5, 51cc <nrfx_gpio_handler+0x3c>
	return node->next;
    51ca:	682b      	ldr	r3, [r5, #0]
    51cc:	462c      	mov	r4, r5
    51ce:	461d      	mov	r5, r3
    51d0:	b1bc      	cbz	r4, 5202 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    51d2:	68a3      	ldr	r3, [r4, #8]
    51d4:	421e      	tst	r6, r3
    51d6:	d0f5      	beq.n	51c4 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    51d8:	6863      	ldr	r3, [r4, #4]
    51da:	2b00      	cmp	r3, #0
    51dc:	d1ec      	bne.n	51b8 <nrfx_gpio_handler+0x28>
    51de:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5208 <nrfx_gpio_handler+0x78>
    51e2:	2345      	movs	r3, #69	; 0x45
    51e4:	4642      	mov	r2, r8
    51e6:	4909      	ldr	r1, [pc, #36]	; (520c <nrfx_gpio_handler+0x7c>)
    51e8:	4809      	ldr	r0, [pc, #36]	; (5210 <nrfx_gpio_handler+0x80>)
    51ea:	f006 f90f 	bl	b40c <assert_print>
    51ee:	4809      	ldr	r0, [pc, #36]	; (5214 <nrfx_gpio_handler+0x84>)
    51f0:	f006 f90c 	bl	b40c <assert_print>
    51f4:	2145      	movs	r1, #69	; 0x45
    51f6:	4640      	mov	r0, r8
    51f8:	f006 f901 	bl	b3fe <assert_post_action>
    51fc:	e7dc      	b.n	51b8 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    51fe:	462b      	mov	r3, r5
    5200:	e7e4      	b.n	51cc <nrfx_gpio_handler+0x3c>
}
    5202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5206:	bf00      	nop
    5208:	0000e028 	.word	0x0000e028
    520c:	0000e0a0 	.word	0x0000e0a0
    5210:	0000c8bc 	.word	0x0000c8bc
    5214:	0000e088 	.word	0x0000e088

00005218 <gpio_nrfx_pin_interrupt_configure>:
{
    5218:	b5f0      	push	{r4, r5, r6, r7, lr}
    521a:	b085      	sub	sp, #20
    521c:	460e      	mov	r6, r1
    521e:	4619      	mov	r1, r3
	return port->config;
    5220:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5222:	7b1b      	ldrb	r3, [r3, #12]
    5224:	f006 041f 	and.w	r4, r6, #31
    5228:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    522c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5230:	d022      	beq.n	5278 <gpio_nrfx_pin_interrupt_configure+0x60>
    5232:	4607      	mov	r7, r0
    5234:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5236:	2300      	movs	r3, #0
    5238:	9302      	str	r3, [sp, #8]
    523a:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    523c:	4610      	mov	r0, r2
    523e:	f006 fc47 	bl	bad0 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5242:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    5246:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5248:	6899      	ldr	r1, [r3, #8]
    524a:	40f1      	lsrs	r1, r6
    524c:	f011 0101 	ands.w	r1, r1, #1
    5250:	d102      	bne.n	5258 <gpio_nrfx_pin_interrupt_configure+0x40>
    5252:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    5256:	d014      	beq.n	5282 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5258:	2300      	movs	r3, #0
    525a:	aa02      	add	r2, sp, #8
    525c:	4619      	mov	r1, r3
    525e:	4620      	mov	r0, r4
    5260:	f002 f802 	bl	7268 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5264:	4b32      	ldr	r3, [pc, #200]	; (5330 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5266:	4298      	cmp	r0, r3
    5268:	d15f      	bne.n	532a <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    526a:	2101      	movs	r1, #1
    526c:	4620      	mov	r0, r4
    526e:	f002 fa5f 	bl	7730 <nrfx_gpiote_trigger_enable>
	return 0;
    5272:	2000      	movs	r0, #0
}
    5274:	b005      	add	sp, #20
    5276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    5278:	4620      	mov	r0, r4
    527a:	f002 fb65 	bl	7948 <nrfx_gpiote_trigger_disable>
		return 0;
    527e:	2000      	movs	r0, #0
    5280:	e7f8      	b.n	5274 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    5282:	0963      	lsrs	r3, r4, #5
    5284:	d01f      	beq.n	52c6 <gpio_nrfx_pin_interrupt_configure+0xae>
    5286:	2b01      	cmp	r3, #1
    5288:	d101      	bne.n	528e <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    528a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    528e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5292:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5294:	f011 0f01 	tst.w	r1, #1
    5298:	d018      	beq.n	52cc <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    529a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    529e:	0963      	lsrs	r3, r4, #5
    52a0:	d022      	beq.n	52e8 <gpio_nrfx_pin_interrupt_configure+0xd0>
    52a2:	2b01      	cmp	r3, #1
    52a4:	d023      	beq.n	52ee <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    52a6:	4e23      	ldr	r6, [pc, #140]	; (5334 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    52a8:	f240 232e 	movw	r3, #558	; 0x22e
    52ac:	4632      	mov	r2, r6
    52ae:	4922      	ldr	r1, [pc, #136]	; (5338 <gpio_nrfx_pin_interrupt_configure+0x120>)
    52b0:	4822      	ldr	r0, [pc, #136]	; (533c <gpio_nrfx_pin_interrupt_configure+0x124>)
    52b2:	f006 f8ab 	bl	b40c <assert_print>
    52b6:	f240 212e 	movw	r1, #558	; 0x22e
    52ba:	4630      	mov	r0, r6
    52bc:	f006 f89f 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    52c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    52c4:	e014      	b.n	52f0 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    52c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    52ca:	e7e0      	b.n	528e <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52cc:	4d19      	ldr	r5, [pc, #100]	; (5334 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    52ce:	f240 2329 	movw	r3, #553	; 0x229
    52d2:	462a      	mov	r2, r5
    52d4:	491a      	ldr	r1, [pc, #104]	; (5340 <gpio_nrfx_pin_interrupt_configure+0x128>)
    52d6:	4819      	ldr	r0, [pc, #100]	; (533c <gpio_nrfx_pin_interrupt_configure+0x124>)
    52d8:	f006 f898 	bl	b40c <assert_print>
    52dc:	f240 2129 	movw	r1, #553	; 0x229
    52e0:	4628      	mov	r0, r5
    52e2:	f006 f88c 	bl	b3fe <assert_post_action>
    52e6:	e7d8      	b.n	529a <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    52e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    52ec:	e000      	b.n	52f0 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52ee:	4b15      	ldr	r3, [pc, #84]	; (5344 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    52f0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    52f4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    52f8:	f013 0f01 	tst.w	r3, #1
    52fc:	d1ac      	bne.n	5258 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    52fe:	f10d 0107 	add.w	r1, sp, #7
    5302:	4620      	mov	r0, r4
    5304:	f002 f9a4 	bl	7650 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5308:	4b0f      	ldr	r3, [pc, #60]	; (5348 <gpio_nrfx_pin_interrupt_configure+0x130>)
    530a:	4298      	cmp	r0, r3
    530c:	d003      	beq.n	5316 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    530e:	f10d 0307 	add.w	r3, sp, #7
    5312:	9303      	str	r3, [sp, #12]
    5314:	e7a0      	b.n	5258 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    5316:	f10d 0007 	add.w	r0, sp, #7
    531a:	f002 fa01 	bl	7720 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    531e:	4b04      	ldr	r3, [pc, #16]	; (5330 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5320:	4298      	cmp	r0, r3
    5322:	d0f4      	beq.n	530e <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    5324:	f06f 000b 	mvn.w	r0, #11
    5328:	e7a4      	b.n	5274 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    532a:	f06f 0004 	mvn.w	r0, #4
    532e:	e7a1      	b.n	5274 <gpio_nrfx_pin_interrupt_configure+0x5c>
    5330:	0bad0000 	.word	0x0bad0000
    5334:	0000e0ac 	.word	0x0000e0ac
    5338:	0000ca80 	.word	0x0000ca80
    533c:	0000c8bc 	.word	0x0000c8bc
    5340:	0000e0e0 	.word	0x0000e0e0
    5344:	50000300 	.word	0x50000300
    5348:	0bad0004 	.word	0x0bad0004

0000534c <pin_uninit>:
{
    534c:	b530      	push	{r4, r5, lr}
    534e:	b083      	sub	sp, #12
    5350:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5352:	f10d 0107 	add.w	r1, sp, #7
    5356:	f002 f97b 	bl	7650 <nrfx_gpiote_channel_get>
    535a:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    535c:	4620      	mov	r0, r4
    535e:	f002 fb5b 	bl	7a18 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5362:	4b0b      	ldr	r3, [pc, #44]	; (5390 <pin_uninit+0x44>)
    5364:	4298      	cmp	r0, r3
    5366:	d10f      	bne.n	5388 <pin_uninit+0x3c>
	if (free_ch) {
    5368:	429d      	cmp	r5, r3
    536a:	d005      	beq.n	5378 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    536c:	4b08      	ldr	r3, [pc, #32]	; (5390 <pin_uninit+0x44>)
    536e:	4298      	cmp	r0, r3
    5370:	d107      	bne.n	5382 <pin_uninit+0x36>
    5372:	2000      	movs	r0, #0
}
    5374:	b003      	add	sp, #12
    5376:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    5378:	f89d 0007 	ldrb.w	r0, [sp, #7]
    537c:	f002 f9c8 	bl	7710 <nrfx_gpiote_channel_free>
    5380:	e7f4      	b.n	536c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5382:	f06f 0004 	mvn.w	r0, #4
    5386:	e7f5      	b.n	5374 <pin_uninit+0x28>
		return -EIO;
    5388:	f06f 0004 	mvn.w	r0, #4
    538c:	e7f2      	b.n	5374 <pin_uninit+0x28>
    538e:	bf00      	nop
    5390:	0bad0000 	.word	0x0bad0000

00005394 <gpio_nrfx_pin_configure>:
{
    5394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5398:	b087      	sub	sp, #28
	return port->config;
    539a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    539e:	f898 300c 	ldrb.w	r3, [r8, #12]
    53a2:	f001 051f 	and.w	r5, r1, #31
    53a6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    53aa:	2a00      	cmp	r2, #0
    53ac:	d044      	beq.n	5438 <gpio_nrfx_pin_configure+0xa4>
    53ae:	460c      	mov	r4, r1
    53b0:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    53b2:	2600      	movs	r6, #0
    53b4:	9603      	str	r6, [sp, #12]
    53b6:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    53b8:	f10d 0117 	add.w	r1, sp, #23
    53bc:	4620      	mov	r0, r4
    53be:	f002 f947 	bl	7650 <nrfx_gpiote_channel_get>
    53c2:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    53c4:	4633      	mov	r3, r6
    53c6:	aa03      	add	r2, sp, #12
    53c8:	4631      	mov	r1, r6
    53ca:	4628      	mov	r0, r5
    53cc:	f001 ff4c 	bl	7268 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    53d0:	4b30      	ldr	r3, [pc, #192]	; (5494 <gpio_nrfx_pin_configure+0x100>)
    53d2:	4298      	cmp	r0, r3
    53d4:	d15b      	bne.n	548e <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    53d6:	4599      	cmp	r9, r3
    53d8:	d036      	beq.n	5448 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    53da:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    53de:	d043      	beq.n	5468 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    53e0:	f10d 0103 	add.w	r1, sp, #3
    53e4:	4638      	mov	r0, r7
    53e6:	f006 fafa 	bl	b9de <get_drive>
		if (rv != 0) {
    53ea:	4606      	mov	r6, r0
    53ec:	bb40      	cbnz	r0, 5440 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    53ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    53f2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    53f6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    53fa:	bf0c      	ite	eq
    53fc:	2301      	moveq	r3, #1
    53fe:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    5400:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    5404:	4638      	mov	r0, r7
    5406:	f006 fb30 	bl	ba6a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    540a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    540e:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    5412:	d01e      	beq.n	5452 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5414:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5418:	2101      	movs	r1, #1
    541a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    541e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5422:	2200      	movs	r2, #0
    5424:	a901      	add	r1, sp, #4
    5426:	4628      	mov	r0, r5
    5428:	f002 f812 	bl	7450 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    542c:	4b19      	ldr	r3, [pc, #100]	; (5494 <gpio_nrfx_pin_configure+0x100>)
    542e:	4298      	cmp	r0, r3
    5430:	d006      	beq.n	5440 <gpio_nrfx_pin_configure+0xac>
    5432:	f06f 0615 	mvn.w	r6, #21
    5436:	e003      	b.n	5440 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    5438:	4628      	mov	r0, r5
    543a:	f7ff ff87 	bl	534c <pin_uninit>
    543e:	4606      	mov	r6, r0
}
    5440:	4630      	mov	r0, r6
    5442:	b007      	add	sp, #28
    5444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    5448:	f89d 0017 	ldrb.w	r0, [sp, #23]
    544c:	f002 f960 	bl	7710 <nrfx_gpiote_channel_free>
    5450:	e7c3      	b.n	53da <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5452:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    5456:	d0e4      	beq.n	5422 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5458:	f8d8 2004 	ldr.w	r2, [r8, #4]
    545c:	2301      	movs	r3, #1
    545e:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    5462:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    5466:	e7dc      	b.n	5422 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    5468:	4638      	mov	r0, r7
    546a:	f006 fafe 	bl	ba6a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    546e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5472:	2300      	movs	r3, #0
    5474:	461a      	mov	r2, r3
    5476:	a902      	add	r1, sp, #8
    5478:	4628      	mov	r0, r5
    547a:	f001 fef5 	bl	7268 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    547e:	4b05      	ldr	r3, [pc, #20]	; (5494 <gpio_nrfx_pin_configure+0x100>)
    5480:	4298      	cmp	r0, r3
    5482:	d101      	bne.n	5488 <gpio_nrfx_pin_configure+0xf4>
    5484:	2600      	movs	r6, #0
    5486:	e7db      	b.n	5440 <gpio_nrfx_pin_configure+0xac>
    5488:	f06f 0615 	mvn.w	r6, #21
    548c:	e7d8      	b.n	5440 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    548e:	f06f 0615 	mvn.w	r6, #21
    5492:	e7d5      	b.n	5440 <gpio_nrfx_pin_configure+0xac>
    5494:	0bad0000 	.word	0x0bad0000

00005498 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5498:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    549a:	f002 f92f 	bl	76fc <nrfx_gpiote_is_init>
    549e:	b108      	cbz	r0, 54a4 <gpio_nrfx_init+0xc>
		return 0;
    54a0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    54a2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    54a4:	f002 f900 	bl	76a8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    54a8:	4b08      	ldr	r3, [pc, #32]	; (54cc <gpio_nrfx_init+0x34>)
    54aa:	4298      	cmp	r0, r3
    54ac:	d10a      	bne.n	54c4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    54ae:	2100      	movs	r1, #0
    54b0:	4807      	ldr	r0, [pc, #28]	; (54d0 <gpio_nrfx_init+0x38>)
    54b2:	f002 f8c7 	bl	7644 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    54b6:	2200      	movs	r2, #0
    54b8:	2105      	movs	r1, #5
    54ba:	2006      	movs	r0, #6
    54bc:	f7fe f972 	bl	37a4 <z_arm_irq_priority_set>
	return 0;
    54c0:	2000      	movs	r0, #0
    54c2:	e7ee      	b.n	54a2 <gpio_nrfx_init+0xa>
		return -EIO;
    54c4:	f06f 0004 	mvn.w	r0, #4
    54c8:	e7eb      	b.n	54a2 <gpio_nrfx_init+0xa>
    54ca:	bf00      	nop
    54cc:	0bad0000 	.word	0x0bad0000
    54d0:	00005191 	.word	0x00005191

000054d4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    54d4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    54d6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    54d8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    54dc:	d06f      	beq.n	55be <baudrate_set+0xea>
    54de:	d83a      	bhi.n	5556 <baudrate_set+0x82>
    54e0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    54e4:	d06e      	beq.n	55c4 <baudrate_set+0xf0>
    54e6:	d90a      	bls.n	54fe <baudrate_set+0x2a>
    54e8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    54ec:	d075      	beq.n	55da <baudrate_set+0x106>
    54ee:	d924      	bls.n	553a <baudrate_set+0x66>
    54f0:	f647 2312 	movw	r3, #31250	; 0x7a12
    54f4:	4299      	cmp	r1, r3
    54f6:	d12b      	bne.n	5550 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    54f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    54fc:	e013      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    54fe:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5502:	d061      	beq.n	55c8 <baudrate_set+0xf4>
    5504:	d907      	bls.n	5516 <baudrate_set+0x42>
    5506:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    550a:	d063      	beq.n	55d4 <baudrate_set+0x100>
    550c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5510:	d110      	bne.n	5534 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5512:	4b3c      	ldr	r3, [pc, #240]	; (5604 <baudrate_set+0x130>)
    5514:	e007      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    5516:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    551a:	d058      	beq.n	55ce <baudrate_set+0xfa>
    551c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5520:	d105      	bne.n	552e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5522:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5526:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    552a:	2000      	movs	r0, #0
    552c:	4770      	bx	lr
	switch (baudrate) {
    552e:	f06f 0015 	mvn.w	r0, #21
    5532:	4770      	bx	lr
    5534:	f06f 0015 	mvn.w	r0, #21
    5538:	4770      	bx	lr
    553a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    553e:	d04e      	beq.n	55de <baudrate_set+0x10a>
    5540:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5544:	d101      	bne.n	554a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5546:	4b30      	ldr	r3, [pc, #192]	; (5608 <baudrate_set+0x134>)
    5548:	e7ed      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    554a:	f06f 0015 	mvn.w	r0, #21
    554e:	4770      	bx	lr
    5550:	f06f 0015 	mvn.w	r0, #21
    5554:	4770      	bx	lr
    5556:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    555a:	d042      	beq.n	55e2 <baudrate_set+0x10e>
    555c:	d909      	bls.n	5572 <baudrate_set+0x9e>
    555e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5562:	d046      	beq.n	55f2 <baudrate_set+0x11e>
    5564:	d91f      	bls.n	55a6 <baudrate_set+0xd2>
    5566:	4b29      	ldr	r3, [pc, #164]	; (560c <baudrate_set+0x138>)
    5568:	4299      	cmp	r1, r3
    556a:	d148      	bne.n	55fe <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    556c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5570:	e7d9      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    5572:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    5576:	d037      	beq.n	55e8 <baudrate_set+0x114>
    5578:	d905      	bls.n	5586 <baudrate_set+0xb2>
    557a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    557e:	d10f      	bne.n	55a0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5580:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5584:	e7cf      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    5586:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    558a:	4299      	cmp	r1, r3
    558c:	d02e      	beq.n	55ec <baudrate_set+0x118>
    558e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5592:	d102      	bne.n	559a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5594:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5598:	e7c5      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    559a:	f06f 0015 	mvn.w	r0, #21
    559e:	4770      	bx	lr
    55a0:	f06f 0015 	mvn.w	r0, #21
    55a4:	4770      	bx	lr
    55a6:	4b1a      	ldr	r3, [pc, #104]	; (5610 <baudrate_set+0x13c>)
    55a8:	4299      	cmp	r1, r3
    55aa:	d025      	beq.n	55f8 <baudrate_set+0x124>
    55ac:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    55b0:	d102      	bne.n	55b8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    55b2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    55b6:	e7b6      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    55b8:	f06f 0015 	mvn.w	r0, #21
    55bc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    55be:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    55c2:	e7b0      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    55c4:	4b13      	ldr	r3, [pc, #76]	; (5614 <baudrate_set+0x140>)
    55c6:	e7ae      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    55c8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    55cc:	e7ab      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    55ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    55d2:	e7a8      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    55d4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    55d8:	e7a5      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    55da:	4b0f      	ldr	r3, [pc, #60]	; (5618 <baudrate_set+0x144>)
    55dc:	e7a3      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    55de:	4b0f      	ldr	r3, [pc, #60]	; (561c <baudrate_set+0x148>)
    55e0:	e7a1      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    55e2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    55e6:	e79e      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    55e8:	4b0d      	ldr	r3, [pc, #52]	; (5620 <baudrate_set+0x14c>)
    55ea:	e79c      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    55ec:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    55f0:	e799      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    55f2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    55f6:	e796      	b.n	5526 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    55f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    55fc:	e793      	b.n	5526 <baudrate_set+0x52>
	switch (baudrate) {
    55fe:	f06f 0015 	mvn.w	r0, #21
}
    5602:	4770      	bx	lr
    5604:	0013b000 	.word	0x0013b000
    5608:	004ea000 	.word	0x004ea000
    560c:	000f4240 	.word	0x000f4240
    5610:	0003d090 	.word	0x0003d090
    5614:	00275000 	.word	0x00275000
    5618:	0075c000 	.word	0x0075c000
    561c:	003af000 	.word	0x003af000
    5620:	013a9000 	.word	0x013a9000

00005624 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5628:	4605      	mov	r5, r0
    562a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    562c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5630:	f006 fdd8 	bl	c1e4 <k_is_in_isr>
    5634:	b920      	cbnz	r0, 5640 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    5636:	4b16      	ldr	r3, [pc, #88]	; (5690 <uarte_nrfx_poll_out+0x6c>)
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	b143      	cbz	r3, 564e <uarte_nrfx_poll_out+0x2a>
    563c:	2300      	movs	r3, #0
    563e:	e000      	b.n	5642 <uarte_nrfx_poll_out+0x1e>
    5640:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    5642:	b953      	cbnz	r3, 565a <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    5644:	4628      	mov	r0, r5
    5646:	f006 fb4c 	bl	bce2 <wait_tx_ready>
    564a:	4606      	mov	r6, r0
    564c:	e013      	b.n	5676 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    564e:	2301      	movs	r3, #1
    5650:	e7f7      	b.n	5642 <uarte_nrfx_poll_out+0x1e>
    5652:	f384 8811 	msr	BASEPRI, r4
    5656:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    565a:	f04f 0320 	mov.w	r3, #32
    565e:	f3ef 8411 	mrs	r4, BASEPRI
    5662:	f383 8812 	msr	BASEPRI_MAX, r3
    5666:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    566a:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    566c:	4628      	mov	r0, r5
    566e:	f006 faea 	bl	bc46 <is_tx_ready>
    5672:	2800      	cmp	r0, #0
    5674:	d0ed      	beq.n	5652 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    5676:	4641      	mov	r1, r8
    5678:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    567c:	2201      	movs	r2, #1
    567e:	4628      	mov	r0, r5
    5680:	f006 fafb 	bl	bc7a <tx_start>
	__asm__ volatile(
    5684:	f386 8811 	msr	BASEPRI, r6
    5688:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5690:	20001386 	.word	0x20001386

00005694 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5694:	b530      	push	{r4, r5, lr}
    5696:	b085      	sub	sp, #20
    5698:	4604      	mov	r4, r0
    569a:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    569c:	f101 0012 	add.w	r0, r1, #18
    56a0:	f002 fa46 	bl	7b30 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    56a4:	4b11      	ldr	r3, [pc, #68]	; (56ec <endtx_stoptx_ppi_init+0x58>)
    56a6:	4298      	cmp	r0, r3
    56a8:	d112      	bne.n	56d0 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    56aa:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    56ac:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    56b0:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    56b2:	4a0f      	ldr	r2, [pc, #60]	; (56f0 <endtx_stoptx_ppi_init+0x5c>)
    56b4:	33a2      	adds	r3, #162	; 0xa2
    56b6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    56ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    56be:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    56c0:	7ca9      	ldrb	r1, [r5, #18]
    56c2:	2301      	movs	r3, #1
    56c4:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    56c6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    56ca:	2000      	movs	r0, #0
}
    56cc:	b005      	add	sp, #20
    56ce:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    56d0:	4b08      	ldr	r3, [pc, #32]	; (56f4 <endtx_stoptx_ppi_init+0x60>)
    56d2:	9302      	str	r3, [sp, #8]
    56d4:	2000      	movs	r0, #0
    56d6:	9001      	str	r0, [sp, #4]
    56d8:	9000      	str	r0, [sp, #0]
    56da:	4603      	mov	r3, r0
    56dc:	2201      	movs	r2, #1
    56de:	4906      	ldr	r1, [pc, #24]	; (56f8 <endtx_stoptx_ppi_init+0x64>)
    56e0:	f006 fb26 	bl	bd30 <z_log_msg2_runtime_create>
		return -EIO;
    56e4:	f06f 0004 	mvn.w	r0, #4
    56e8:	e7f0      	b.n	56cc <endtx_stoptx_ppi_init+0x38>
    56ea:	bf00      	nop
    56ec:	0bad0000 	.word	0x0bad0000
    56f0:	4001f000 	.word	0x4001f000
    56f4:	0000e158 	.word	0x0000e158
    56f8:	0000c63c 	.word	0x0000c63c

000056fc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    56fc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5700:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5704:	4b01      	ldr	r3, [pc, #4]	; (570c <set_comparator+0x10>)
    5706:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    570a:	4770      	bx	lr
    570c:	40011000 	.word	0x40011000

00005710 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5710:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5714:	4b01      	ldr	r3, [pc, #4]	; (571c <get_comparator+0xc>)
    5716:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    571a:	4770      	bx	lr
    571c:	40011000 	.word	0x40011000

00005720 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5724:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5726:	4a02      	ldr	r2, [pc, #8]	; (5730 <event_enable+0x10>)
    5728:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	40011000 	.word	0x40011000

00005734 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5738:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    573a:	4a02      	ldr	r2, [pc, #8]	; (5744 <event_disable+0x10>)
    573c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5740:	4770      	bx	lr
    5742:	bf00      	nop
    5744:	40011000 	.word	0x40011000

00005748 <counter>:
     return p_reg->COUNTER;
    5748:	4b01      	ldr	r3, [pc, #4]	; (5750 <counter+0x8>)
    574a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    574e:	4770      	bx	lr
    5750:	40011000 	.word	0x40011000

00005754 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5754:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5756:	2301      	movs	r3, #1
    5758:	4083      	lsls	r3, r0
    575a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    575e:	4a10      	ldr	r2, [pc, #64]	; (57a0 <compare_int_lock+0x4c>)
    5760:	f3bf 8f5b 	dmb	ish
    5764:	e852 1f00 	ldrex	r1, [r2]
    5768:	ea01 0e0c 	and.w	lr, r1, ip
    576c:	e842 e400 	strex	r4, lr, [r2]
    5770:	2c00      	cmp	r4, #0
    5772:	d1f7      	bne.n	5764 <compare_int_lock+0x10>
    5774:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    577c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5780:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5788:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    578c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5790:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5794:	420b      	tst	r3, r1
}
    5796:	bf14      	ite	ne
    5798:	2001      	movne	r0, #1
    579a:	2000      	moveq	r0, #0
    579c:	bd10      	pop	{r4, pc}
    579e:	bf00      	nop
    57a0:	20000c8c 	.word	0x20000c8c

000057a4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    57a4:	b570      	push	{r4, r5, r6, lr}
    57a6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    57a8:	f006 fb64 	bl	be74 <full_int_lock>
    57ac:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    57ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57b2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    57b4:	4a17      	ldr	r2, [pc, #92]	; (5814 <channel_processing_check_and_clear+0x70>)
    57b6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    57ba:	4213      	tst	r3, r2
    57bc:	d105      	bne.n	57ca <channel_processing_check_and_clear+0x26>
	bool result = false;
    57be:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    57c0:	4628      	mov	r0, r5
    57c2:	f006 fb60 	bl	be86 <full_int_unlock>

	return result;
}
    57c6:	4630      	mov	r0, r6
    57c8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    57ca:	2301      	movs	r3, #1
    57cc:	40a3      	lsls	r3, r4
    57ce:	43db      	mvns	r3, r3
    57d0:	4a11      	ldr	r2, [pc, #68]	; (5818 <channel_processing_check_and_clear+0x74>)
    57d2:	f3bf 8f5b 	dmb	ish
    57d6:	e852 1f00 	ldrex	r1, [r2]
    57da:	ea01 0003 	and.w	r0, r1, r3
    57de:	e842 0600 	strex	r6, r0, [r2]
    57e2:	2e00      	cmp	r6, #0
    57e4:	d1f7      	bne.n	57d6 <channel_processing_check_and_clear+0x32>
    57e6:	f3bf 8f5b 	dmb	ish
    57ea:	b959      	cbnz	r1, 5804 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    57ec:	f104 0350 	add.w	r3, r4, #80	; 0x50
    57f0:	009b      	lsls	r3, r3, #2
    57f2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    57f8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    57fc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    57fe:	b113      	cbz	r3, 5806 <channel_processing_check_and_clear+0x62>
    5800:	2301      	movs	r3, #1
    5802:	e000      	b.n	5806 <channel_processing_check_and_clear+0x62>
    5804:	2301      	movs	r3, #1
		if (result) {
    5806:	461e      	mov	r6, r3
    5808:	2b00      	cmp	r3, #0
    580a:	d0d9      	beq.n	57c0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    580c:	4620      	mov	r0, r4
    580e:	f006 fb22 	bl	be56 <event_clear>
    5812:	e7d5      	b.n	57c0 <channel_processing_check_and_clear+0x1c>
    5814:	40011000 	.word	0x40011000
    5818:	20000c88 	.word	0x20000c88

0000581c <compare_int_unlock>:
	if (key) {
    581c:	b901      	cbnz	r1, 5820 <compare_int_unlock+0x4>
}
    581e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5820:	2301      	movs	r3, #1
    5822:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5824:	4a11      	ldr	r2, [pc, #68]	; (586c <compare_int_unlock+0x50>)
    5826:	f3bf 8f5b 	dmb	ish
    582a:	e852 1f00 	ldrex	r1, [r2]
    582e:	4319      	orrs	r1, r3
    5830:	e842 1c00 	strex	ip, r1, [r2]
    5834:	f1bc 0f00 	cmp.w	ip, #0
    5838:	d1f7      	bne.n	582a <compare_int_unlock+0xe>
    583a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    583e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5842:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5844:	4a0a      	ldr	r2, [pc, #40]	; (5870 <compare_int_unlock+0x54>)
    5846:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    584a:	f3bf 8f5b 	dmb	ish
    584e:	4b09      	ldr	r3, [pc, #36]	; (5874 <compare_int_unlock+0x58>)
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5856:	fa23 f000 	lsr.w	r0, r3, r0
    585a:	f010 0f01 	tst.w	r0, #1
    585e:	d0de      	beq.n	581e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5860:	4b05      	ldr	r3, [pc, #20]	; (5878 <compare_int_unlock+0x5c>)
    5862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5866:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    586a:	e7d8      	b.n	581e <compare_int_unlock+0x2>
    586c:	20000c8c 	.word	0x20000c8c
    5870:	40011000 	.word	0x40011000
    5874:	20000c88 	.word	0x20000c88
    5878:	e000e100 	.word	0xe000e100

0000587c <sys_clock_timeout_handler>:
{
    587c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5880:	4607      	mov	r7, r0
    5882:	4614      	mov	r4, r2
    5884:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    5886:	4610      	mov	r0, r2
    5888:	4619      	mov	r1, r3
    588a:	f006 faf0 	bl	be6e <absolute_time_to_cc>
    588e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5890:	4b15      	ldr	r3, [pc, #84]	; (58e8 <sys_clock_timeout_handler+0x6c>)
    5892:	681a      	ldr	r2, [r3, #0]
    5894:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5896:	601c      	str	r4, [r3, #0]
    5898:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    589a:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    589e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    58a2:	d309      	bcc.n	58b8 <sys_clock_timeout_handler+0x3c>
	return false;
    58a4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    58a6:	f004 ff65 	bl	a774 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    58aa:	4638      	mov	r0, r7
    58ac:	f7ff ff30 	bl	5710 <get_comparator>
    58b0:	42a8      	cmp	r0, r5
    58b2:	d00e      	beq.n	58d2 <sys_clock_timeout_handler+0x56>
}
    58b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    58b8:	4b0c      	ldr	r3, [pc, #48]	; (58ec <sys_clock_timeout_handler+0x70>)
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	0a1a      	lsrs	r2, r3, #8
    58be:	061b      	lsls	r3, r3, #24
    58c0:	eb15 0803 	adds.w	r8, r5, r3
    58c4:	f142 0900 	adc.w	r9, r2, #0
    58c8:	4b09      	ldr	r3, [pc, #36]	; (58f0 <sys_clock_timeout_handler+0x74>)
    58ca:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    58ce:	2401      	movs	r4, #1
    58d0:	e7e9      	b.n	58a6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    58d2:	b11c      	cbz	r4, 58dc <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    58d4:	4638      	mov	r0, r7
    58d6:	f7ff ff23 	bl	5720 <event_enable>
}
    58da:	e7eb      	b.n	58b4 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    58dc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    58e0:	4638      	mov	r0, r7
    58e2:	f7ff ff0b 	bl	56fc <set_comparator>
    58e6:	e7f5      	b.n	58d4 <sys_clock_timeout_handler+0x58>
    58e8:	20000488 	.word	0x20000488
    58ec:	20000c90 	.word	0x20000c90
    58f0:	20000470 	.word	0x20000470

000058f4 <z_nrf_rtc_timer_read>:
{
    58f4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    58f6:	4b0d      	ldr	r3, [pc, #52]	; (592c <z_nrf_rtc_timer_read+0x38>)
    58f8:	681c      	ldr	r4, [r3, #0]
    58fa:	0a25      	lsrs	r5, r4, #8
    58fc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    58fe:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5902:	f7ff ff21 	bl	5748 <counter>
    5906:	4603      	mov	r3, r0
	val += cntr;
    5908:	1900      	adds	r0, r0, r4
    590a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    590e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5912:	d20a      	bcs.n	592a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5914:	4b06      	ldr	r3, [pc, #24]	; (5930 <z_nrf_rtc_timer_read+0x3c>)
    5916:	e9d3 2300 	ldrd	r2, r3, [r3]
    591a:	4290      	cmp	r0, r2
    591c:	eb71 0303 	sbcs.w	r3, r1, r3
    5920:	d203      	bcs.n	592a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5922:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5926:	f141 0100 	adc.w	r1, r1, #0
}
    592a:	bd38      	pop	{r3, r4, r5, pc}
    592c:	20000c90 	.word	0x20000c90
    5930:	20000470 	.word	0x20000470

00005934 <compare_set_nolocks>:
{
    5934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5936:	4606      	mov	r6, r0
    5938:	4614      	mov	r4, r2
    593a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    593c:	4610      	mov	r0, r2
    593e:	4619      	mov	r1, r3
    5940:	f006 fa95 	bl	be6e <absolute_time_to_cc>
    5944:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5946:	f7ff ffd5 	bl	58f4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    594a:	42a0      	cmp	r0, r4
    594c:	eb71 0305 	sbcs.w	r3, r1, r5
    5950:	d21d      	bcs.n	598e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    5952:	1a23      	subs	r3, r4, r0
    5954:	eb65 0101 	sbc.w	r1, r5, r1
    5958:	4a1b      	ldr	r2, [pc, #108]	; (59c8 <compare_set_nolocks+0x94>)
    595a:	4293      	cmp	r3, r2
    595c:	f171 0300 	sbcs.w	r3, r1, #0
    5960:	d22f      	bcs.n	59c2 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    5962:	4b1a      	ldr	r3, [pc, #104]	; (59cc <compare_set_nolocks+0x98>)
    5964:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5968:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    596c:	42ab      	cmp	r3, r5
    596e:	bf08      	it	eq
    5970:	42a2      	cmpeq	r2, r4
    5972:	d01a      	beq.n	59aa <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5974:	4639      	mov	r1, r7
    5976:	4630      	mov	r0, r6
    5978:	f006 fa8a 	bl	be90 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    597c:	4639      	mov	r1, r7
    597e:	f006 fa66 	bl	be4e <counter_sub>
    5982:	1900      	adds	r0, r0, r4
    5984:	f145 0300 	adc.w	r3, r5, #0
    5988:	4604      	mov	r4, r0
    598a:	461d      	mov	r5, r3
    598c:	e00d      	b.n	59aa <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    598e:	2301      	movs	r3, #1
    5990:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5992:	4a0f      	ldr	r2, [pc, #60]	; (59d0 <compare_set_nolocks+0x9c>)
    5994:	f3bf 8f5b 	dmb	ish
    5998:	e852 1f00 	ldrex	r1, [r2]
    599c:	4319      	orrs	r1, r3
    599e:	e842 1000 	strex	r0, r1, [r2]
    59a2:	2800      	cmp	r0, #0
    59a4:	d1f8      	bne.n	5998 <compare_set_nolocks+0x64>
    59a6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    59aa:	4b08      	ldr	r3, [pc, #32]	; (59cc <compare_set_nolocks+0x98>)
    59ac:	0132      	lsls	r2, r6, #4
    59ae:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    59b2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    59b6:	9906      	ldr	r1, [sp, #24]
    59b8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    59ba:	9b07      	ldr	r3, [sp, #28]
    59bc:	6073      	str	r3, [r6, #4]
	return ret;
    59be:	2000      	movs	r0, #0
}
    59c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    59c2:	f06f 0015 	mvn.w	r0, #21
    59c6:	e7fb      	b.n	59c0 <compare_set_nolocks+0x8c>
    59c8:	01000001 	.word	0x01000001
    59cc:	20000478 	.word	0x20000478
    59d0:	20000c88 	.word	0x20000c88

000059d4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    59d4:	b530      	push	{r4, r5, lr}
    59d6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    59d8:	2300      	movs	r3, #0
    59da:	4a1d      	ldr	r2, [pc, #116]	; (5a50 <sys_clock_driver_init+0x7c>)
    59dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    59e0:	2b00      	cmp	r3, #0
    59e2:	dd24      	ble.n	5a2e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    59e4:	4c1a      	ldr	r4, [pc, #104]	; (5a50 <sys_clock_driver_init+0x7c>)
    59e6:	2502      	movs	r5, #2
    59e8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59ec:	4b19      	ldr	r3, [pc, #100]	; (5a54 <sys_clock_driver_init+0x80>)
    59ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    59f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    59f6:	2200      	movs	r2, #0
    59f8:	2101      	movs	r1, #1
    59fa:	2011      	movs	r0, #17
    59fc:	f7fd fed2 	bl	37a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5a00:	2011      	movs	r0, #17
    5a02:	f7fd feb3 	bl	376c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5a06:	2301      	movs	r3, #1
    5a08:	60a3      	str	r3, [r4, #8]
    5a0a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5a0c:	4a12      	ldr	r2, [pc, #72]	; (5a58 <sys_clock_driver_init+0x84>)
    5a0e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5a10:	2400      	movs	r4, #0
    5a12:	9401      	str	r4, [sp, #4]
    5a14:	4b11      	ldr	r3, [pc, #68]	; (5a5c <sys_clock_driver_init+0x88>)
    5a16:	9300      	str	r3, [sp, #0]
    5a18:	4a11      	ldr	r2, [pc, #68]	; (5a60 <sys_clock_driver_init+0x8c>)
    5a1a:	2300      	movs	r3, #0
    5a1c:	4620      	mov	r0, r4
    5a1e:	f006 fa72 	bl	bf06 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5a22:	4628      	mov	r0, r5
    5a24:	f7ff fabc 	bl	4fa0 <z_nrf_clock_control_lf_on>

	return 0;
}
    5a28:	4620      	mov	r0, r4
    5a2a:	b003      	add	sp, #12
    5a2c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5a2e:	4a0d      	ldr	r2, [pc, #52]	; (5a64 <sys_clock_driver_init+0x90>)
    5a30:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a3c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5a40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5a44:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5a46:	4902      	ldr	r1, [pc, #8]	; (5a50 <sys_clock_driver_init+0x7c>)
    5a48:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5a4c:	3301      	adds	r3, #1
    5a4e:	e7c7      	b.n	59e0 <sys_clock_driver_init+0xc>
    5a50:	40011000 	.word	0x40011000
    5a54:	e000e100 	.word	0xe000e100
    5a58:	20000c8c 	.word	0x20000c8c
    5a5c:	0000587d 	.word	0x0000587d
    5a60:	007fffff 	.word	0x007fffff
    5a64:	20000478 	.word	0x20000478

00005a68 <process_channel>:
{
    5a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a6c:	b082      	sub	sp, #8
    5a6e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    5a70:	f7ff fe98 	bl	57a4 <channel_processing_check_and_clear>
    5a74:	b910      	cbnz	r0, 5a7c <process_channel+0x14>
}
    5a76:	b002      	add	sp, #8
    5a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5a7c:	f7ff ff3a 	bl	58f4 <z_nrf_rtc_timer_read>
    5a80:	4682      	mov	sl, r0
    5a82:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    5a84:	f006 f9f6 	bl	be74 <full_int_lock>
    5a88:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    5a8a:	4b13      	ldr	r3, [pc, #76]	; (5ad8 <process_channel+0x70>)
    5a8c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5a90:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5a94:	45c2      	cmp	sl, r8
    5a96:	eb76 0309 	sbcs.w	r3, r6, r9
    5a9a:	d20b      	bcs.n	5ab4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5a9c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5a9e:	4628      	mov	r0, r5
    5aa0:	f006 f9f1 	bl	be86 <full_int_unlock>
		if (handler) {
    5aa4:	2e00      	cmp	r6, #0
    5aa6:	d0e6      	beq.n	5a76 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5aa8:	9700      	str	r7, [sp, #0]
    5aaa:	4642      	mov	r2, r8
    5aac:	464b      	mov	r3, r9
    5aae:	4620      	mov	r0, r4
    5ab0:	47b0      	blx	r6
}
    5ab2:	e7e0      	b.n	5a76 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5ab4:	4a08      	ldr	r2, [pc, #32]	; (5ad8 <process_channel+0x70>)
    5ab6:	0123      	lsls	r3, r4, #4
    5ab8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5abc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5abe:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    5ac0:	2000      	movs	r0, #0
    5ac2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5ad0:	4620      	mov	r0, r4
    5ad2:	f7ff fe2f 	bl	5734 <event_disable>
    5ad6:	e7e2      	b.n	5a9e <process_channel+0x36>
    5ad8:	20000478 	.word	0x20000478

00005adc <rtc_nrf_isr>:
{
    5adc:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5ade:	4b0e      	ldr	r3, [pc, #56]	; (5b18 <rtc_nrf_isr+0x3c>)
    5ae0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5ae4:	f013 0f02 	tst.w	r3, #2
    5ae8:	d00d      	beq.n	5b06 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5aea:	4b0b      	ldr	r3, [pc, #44]	; (5b18 <rtc_nrf_isr+0x3c>)
    5aec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    5af0:	b14b      	cbz	r3, 5b06 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5af2:	4b09      	ldr	r3, [pc, #36]	; (5b18 <rtc_nrf_isr+0x3c>)
    5af4:	2200      	movs	r2, #0
    5af6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5afa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    5afe:	4a07      	ldr	r2, [pc, #28]	; (5b1c <rtc_nrf_isr+0x40>)
    5b00:	6813      	ldr	r3, [r2, #0]
    5b02:	3301      	adds	r3, #1
    5b04:	6013      	str	r3, [r2, #0]
{
    5b06:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b08:	2c00      	cmp	r4, #0
    5b0a:	dd00      	ble.n	5b0e <rtc_nrf_isr+0x32>
}
    5b0c:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5b0e:	4620      	mov	r0, r4
    5b10:	f7ff ffaa 	bl	5a68 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b14:	3401      	adds	r4, #1
    5b16:	e7f7      	b.n	5b08 <rtc_nrf_isr+0x2c>
    5b18:	40011000 	.word	0x40011000
    5b1c:	20000c90 	.word	0x20000c90

00005b20 <sys_clock_set_timeout>:
{
    5b20:	b510      	push	{r4, lr}
    5b22:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5b28:	d006      	beq.n	5b38 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5b2a:	2801      	cmp	r0, #1
    5b2c:	dd06      	ble.n	5b3c <sys_clock_set_timeout+0x1c>
    5b2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5b32:	da05      	bge.n	5b40 <sys_clock_set_timeout+0x20>
    5b34:	1e44      	subs	r4, r0, #1
    5b36:	e004      	b.n	5b42 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5b38:	480f      	ldr	r0, [pc, #60]	; (5b78 <sys_clock_set_timeout+0x58>)
    5b3a:	e7f8      	b.n	5b2e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5b3c:	2400      	movs	r4, #0
    5b3e:	e000      	b.n	5b42 <sys_clock_set_timeout+0x22>
    5b40:	4c0d      	ldr	r4, [pc, #52]	; (5b78 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5b42:	f7ff fed7 	bl	58f4 <z_nrf_rtc_timer_read>
    5b46:	4b0d      	ldr	r3, [pc, #52]	; (5b7c <sys_clock_set_timeout+0x5c>)
    5b48:	6819      	ldr	r1, [r3, #0]
    5b4a:	685b      	ldr	r3, [r3, #4]
    5b4c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    5b4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5b52:	d300      	bcc.n	5b56 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5b54:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5b56:	4420      	add	r0, r4
    5b58:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    5b5a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    5b5e:	d300      	bcc.n	5b62 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5b60:	4a05      	ldr	r2, [pc, #20]	; (5b78 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    5b62:	2000      	movs	r0, #0
    5b64:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5b66:	9001      	str	r0, [sp, #4]
    5b68:	4905      	ldr	r1, [pc, #20]	; (5b80 <sys_clock_set_timeout+0x60>)
    5b6a:	9100      	str	r1, [sp, #0]
    5b6c:	f143 0300 	adc.w	r3, r3, #0
    5b70:	f006 f9c9 	bl	bf06 <compare_set>
}
    5b74:	b002      	add	sp, #8
    5b76:	bd10      	pop	{r4, pc}
    5b78:	007fffff 	.word	0x007fffff
    5b7c:	20000488 	.word	0x20000488
    5b80:	0000587d 	.word	0x0000587d

00005b84 <sys_clock_elapsed>:
{
    5b84:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5b86:	f7ff feb5 	bl	58f4 <z_nrf_rtc_timer_read>
    5b8a:	4b02      	ldr	r3, [pc, #8]	; (5b94 <sys_clock_elapsed+0x10>)
    5b8c:	681b      	ldr	r3, [r3, #0]
}
    5b8e:	1ac0      	subs	r0, r0, r3
    5b90:	bd08      	pop	{r3, pc}
    5b92:	bf00      	nop
    5b94:	20000488 	.word	0x20000488

00005b98 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    5b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b9c:	460c      	mov	r4, r1
    5b9e:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    5ba0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5ba4:	d002      	beq.n	5bac <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    5ba6:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    5baa:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    5bac:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    5bb0:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    5bb4:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    5bb8:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    5bbc:	f010 0f20 	tst.w	r0, #32
    5bc0:	d01d      	beq.n	5bfe <nrf_pin_configure+0x66>
    5bc2:	b1fb      	cbz	r3, 5c04 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    5bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5bc8:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5bcc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5bce:	f013 0f01 	tst.w	r3, #1
    5bd2:	d019      	beq.n	5c08 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    5bd4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bd8:	096d      	lsrs	r5, r5, #5
    5bda:	d023      	beq.n	5c24 <nrf_pin_configure+0x8c>
    5bdc:	bb2d      	cbnz	r5, 5c2a <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    5bde:	4d19      	ldr	r5, [pc, #100]	; (5c44 <nrf_pin_configure+0xac>)
    5be0:	f240 232e 	movw	r3, #558	; 0x22e
    5be4:	462a      	mov	r2, r5
    5be6:	4918      	ldr	r1, [pc, #96]	; (5c48 <nrf_pin_configure+0xb0>)
    5be8:	4818      	ldr	r0, [pc, #96]	; (5c4c <nrf_pin_configure+0xb4>)
    5bea:	f005 fc0f 	bl	b40c <assert_print>
    5bee:	f240 212e 	movw	r1, #558	; 0x22e
    5bf2:	4628      	mov	r0, r5
    5bf4:	f005 fc03 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    5bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5bfc:	e016      	b.n	5c2c <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    5bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c02:	e7e1      	b.n	5bc8 <nrf_pin_configure+0x30>
    switch (port)
    5c04:	2300      	movs	r3, #0
    5c06:	e7df      	b.n	5bc8 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5c08:	4e0e      	ldr	r6, [pc, #56]	; (5c44 <nrf_pin_configure+0xac>)
    5c0a:	f240 2329 	movw	r3, #553	; 0x229
    5c0e:	4632      	mov	r2, r6
    5c10:	490f      	ldr	r1, [pc, #60]	; (5c50 <nrf_pin_configure+0xb8>)
    5c12:	480e      	ldr	r0, [pc, #56]	; (5c4c <nrf_pin_configure+0xb4>)
    5c14:	f005 fbfa 	bl	b40c <assert_print>
    5c18:	f240 2129 	movw	r1, #553	; 0x229
    5c1c:	4630      	mov	r0, r6
    5c1e:	f005 fbee 	bl	b3fe <assert_post_action>
    5c22:	e7d7      	b.n	5bd4 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    5c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5c28:	e000      	b.n	5c2c <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c2a:	4b0a      	ldr	r3, [pc, #40]	; (5c54 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5c2c:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    5c30:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5c34:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5c38:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5c3c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    5c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c44:	0000e0ac 	.word	0x0000e0ac
    5c48:	0000ca80 	.word	0x0000ca80
    5c4c:	0000c8bc 	.word	0x0000c8bc
    5c50:	0000e0e0 	.word	0x0000e0e0
    5c54:	50000300 	.word	0x50000300

00005c58 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c5c:	4605      	mov	r5, r0
    5c5e:	460e      	mov	r6, r1
    5c60:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5c62:	2400      	movs	r4, #0
    5c64:	e04e      	b.n	5d04 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c6a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5c6e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5c72:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5c76:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    5c7a:	f013 0f20 	tst.w	r3, #32
    5c7e:	d01f      	beq.n	5cc0 <pinctrl_configure_pins+0x68>
    5c80:	b109      	cbz	r1, 5c86 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    5c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5c86:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5c8a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5c8c:	f012 0f01 	tst.w	r2, #1
    5c90:	d019      	beq.n	5cc6 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    5c92:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5c96:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5c9a:	d023      	beq.n	5ce4 <pinctrl_configure_pins+0x8c>
    5c9c:	bb2b      	cbnz	r3, 5cea <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    5c9e:	f8df 9344 	ldr.w	r9, [pc, #836]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5ca2:	f240 232e 	movw	r3, #558	; 0x22e
    5ca6:	464a      	mov	r2, r9
    5ca8:	49cf      	ldr	r1, [pc, #828]	; (5fe8 <pinctrl_configure_pins+0x390>)
    5caa:	48d0      	ldr	r0, [pc, #832]	; (5fec <pinctrl_configure_pins+0x394>)
    5cac:	f005 fbae 	bl	b40c <assert_print>
    5cb0:	f240 212e 	movw	r1, #558	; 0x22e
    5cb4:	4648      	mov	r0, r9
    5cb6:	f005 fba2 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    5cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5cbe:	e015      	b.n	5cec <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    5cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5cc4:	e7df      	b.n	5c86 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5cc6:	f8df a31c 	ldr.w	sl, [pc, #796]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5cca:	f240 2329 	movw	r3, #553	; 0x229
    5cce:	4652      	mov	r2, sl
    5cd0:	49c7      	ldr	r1, [pc, #796]	; (5ff0 <pinctrl_configure_pins+0x398>)
    5cd2:	48c6      	ldr	r0, [pc, #792]	; (5fec <pinctrl_configure_pins+0x394>)
    5cd4:	f005 fb9a 	bl	b40c <assert_print>
    5cd8:	f240 2129 	movw	r1, #553	; 0x229
    5cdc:	4650      	mov	r0, sl
    5cde:	f005 fb8e 	bl	b3fe <assert_post_action>
    5ce2:	e7d6      	b.n	5c92 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    5ce4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5ce8:	e000      	b.n	5cec <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5cea:	4ac2      	ldr	r2, [pc, #776]	; (5ff4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5cec:	2101      	movs	r1, #1
    5cee:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    5cf2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5cf6:	460a      	mov	r2, r1
    5cf8:	f855 0008 	ldr.w	r0, [r5, r8]
    5cfc:	f7ff ff4c 	bl	5b98 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5d00:	3401      	adds	r4, #1
    5d02:	b2e4      	uxtb	r4, r4
    5d04:	42b4      	cmp	r4, r6
    5d06:	f080 841e 	bcs.w	6546 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    5d0a:	ea4f 0884 	mov.w	r8, r4, lsl #2
    5d0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5d12:	0c1a      	lsrs	r2, r3, #16
    5d14:	2a22      	cmp	r2, #34	; 0x22
    5d16:	f200 8418 	bhi.w	654a <pinctrl_configure_pins+0x8f2>
    5d1a:	a101      	add	r1, pc, #4	; (adr r1, 5d20 <pinctrl_configure_pins+0xc8>)
    5d1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5d20:	00005c67 	.word	0x00005c67
    5d24:	00005dad 	.word	0x00005dad
    5d28:	00005dc3 	.word	0x00005dc3
    5d2c:	00005e63 	.word	0x00005e63
    5d30:	00005e79 	.word	0x00005e79
    5d34:	00005f19 	.word	0x00005f19
    5d38:	00005fb9 	.word	0x00005fb9
    5d3c:	0000654b 	.word	0x0000654b
    5d40:	0000654b 	.word	0x0000654b
    5d44:	0000654b 	.word	0x0000654b
    5d48:	0000654b 	.word	0x0000654b
    5d4c:	00005fcf 	.word	0x00005fcf
    5d50:	00005ff9 	.word	0x00005ff9
    5d54:	0000654b 	.word	0x0000654b
    5d58:	0000654b 	.word	0x0000654b
    5d5c:	0000654b 	.word	0x0000654b
    5d60:	0000654b 	.word	0x0000654b
    5d64:	0000654b 	.word	0x0000654b
    5d68:	0000654b 	.word	0x0000654b
    5d6c:	0000654b 	.word	0x0000654b
    5d70:	0000654b 	.word	0x0000654b
    5d74:	0000654b 	.word	0x0000654b
    5d78:	0000600f 	.word	0x0000600f
    5d7c:	00006135 	.word	0x00006135
    5d80:	0000625b 	.word	0x0000625b
    5d84:	00006397 	.word	0x00006397
    5d88:	0000654b 	.word	0x0000654b
    5d8c:	0000654b 	.word	0x0000654b
    5d90:	0000654b 	.word	0x0000654b
    5d94:	000064bd 	.word	0x000064bd
    5d98:	000064d3 	.word	0x000064d3
    5d9c:	000064e9 	.word	0x000064e9
    5da0:	000064ff 	.word	0x000064ff
    5da4:	00006517 	.word	0x00006517
    5da8:	0000652f 	.word	0x0000652f
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5db0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5db4:	2200      	movs	r2, #0
    5db6:	4611      	mov	r1, r2
    5db8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5dbc:	f7ff feec 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5dc0:	e79e      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    5dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5dc6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5dca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5dce:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5dd2:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5dd6:	f013 0f20 	tst.w	r3, #32
    5dda:	d01f      	beq.n	5e1c <pinctrl_configure_pins+0x1c4>
    5ddc:	b30a      	cbz	r2, 5e22 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    5dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5de2:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5de6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5de8:	f013 0f01 	tst.w	r3, #1
    5dec:	d01b      	beq.n	5e26 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    5dee:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5df2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5df6:	d025      	beq.n	5e44 <pinctrl_configure_pins+0x1ec>
    5df8:	bb3b      	cbnz	r3, 5e4a <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    5dfa:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5dfe:	f240 232e 	movw	r3, #558	; 0x22e
    5e02:	464a      	mov	r2, r9
    5e04:	4978      	ldr	r1, [pc, #480]	; (5fe8 <pinctrl_configure_pins+0x390>)
    5e06:	4879      	ldr	r0, [pc, #484]	; (5fec <pinctrl_configure_pins+0x394>)
    5e08:	f005 fb00 	bl	b40c <assert_print>
    5e0c:	f240 212e 	movw	r1, #558	; 0x22e
    5e10:	4648      	mov	r0, r9
    5e12:	f005 faf4 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    5e16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5e1a:	e017      	b.n	5e4c <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    5e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e20:	e7df      	b.n	5de2 <pinctrl_configure_pins+0x18a>
    switch (port)
    5e22:	2300      	movs	r3, #0
    5e24:	e7dd      	b.n	5de2 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e26:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5e2a:	f240 2329 	movw	r3, #553	; 0x229
    5e2e:	4652      	mov	r2, sl
    5e30:	496f      	ldr	r1, [pc, #444]	; (5ff0 <pinctrl_configure_pins+0x398>)
    5e32:	486e      	ldr	r0, [pc, #440]	; (5fec <pinctrl_configure_pins+0x394>)
    5e34:	f005 faea 	bl	b40c <assert_print>
    5e38:	f240 2129 	movw	r1, #553	; 0x229
    5e3c:	4650      	mov	r0, sl
    5e3e:	f005 fade 	bl	b3fe <assert_post_action>
    5e42:	e7d4      	b.n	5dee <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    5e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5e48:	e000      	b.n	5e4c <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e4a:	4a6a      	ldr	r2, [pc, #424]	; (5ff4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5e4c:	2101      	movs	r1, #1
    5e4e:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    5e52:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5e56:	460a      	mov	r2, r1
    5e58:	f855 0008 	ldr.w	r0, [r5, r8]
    5e5c:	f7ff fe9c 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5e60:	e74e      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    5e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e66:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5e6a:	2200      	movs	r2, #0
    5e6c:	4611      	mov	r1, r2
    5e6e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5e72:	f7ff fe91 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5e76:	e743      	b.n	5d00 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    5e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e7c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5e80:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5e84:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5e88:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5e8c:	f013 0f20 	tst.w	r3, #32
    5e90:	d01f      	beq.n	5ed2 <pinctrl_configure_pins+0x27a>
    5e92:	b30a      	cbz	r2, 5ed8 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    5e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5e98:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5e9c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e9e:	f013 0f01 	tst.w	r3, #1
    5ea2:	d01b      	beq.n	5edc <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    5ea4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ea8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5eac:	d025      	beq.n	5efa <pinctrl_configure_pins+0x2a2>
    5eae:	bb3b      	cbnz	r3, 5f00 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    5eb0:	f8df 9130 	ldr.w	r9, [pc, #304]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5eb4:	f240 232e 	movw	r3, #558	; 0x22e
    5eb8:	464a      	mov	r2, r9
    5eba:	494b      	ldr	r1, [pc, #300]	; (5fe8 <pinctrl_configure_pins+0x390>)
    5ebc:	484b      	ldr	r0, [pc, #300]	; (5fec <pinctrl_configure_pins+0x394>)
    5ebe:	f005 faa5 	bl	b40c <assert_print>
    5ec2:	f240 212e 	movw	r1, #558	; 0x22e
    5ec6:	4648      	mov	r0, r9
    5ec8:	f005 fa99 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    5ecc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5ed0:	e017      	b.n	5f02 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    5ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ed6:	e7df      	b.n	5e98 <pinctrl_configure_pins+0x240>
    switch (port)
    5ed8:	2300      	movs	r3, #0
    5eda:	e7dd      	b.n	5e98 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5edc:	f8df a104 	ldr.w	sl, [pc, #260]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5ee0:	f240 2329 	movw	r3, #553	; 0x229
    5ee4:	4652      	mov	r2, sl
    5ee6:	4942      	ldr	r1, [pc, #264]	; (5ff0 <pinctrl_configure_pins+0x398>)
    5ee8:	4840      	ldr	r0, [pc, #256]	; (5fec <pinctrl_configure_pins+0x394>)
    5eea:	f005 fa8f 	bl	b40c <assert_print>
    5eee:	f240 2129 	movw	r1, #553	; 0x229
    5ef2:	4650      	mov	r0, sl
    5ef4:	f005 fa83 	bl	b3fe <assert_post_action>
    5ef8:	e7d4      	b.n	5ea4 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    5efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5efe:	e000      	b.n	5f02 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f00:	4a3c      	ldr	r2, [pc, #240]	; (5ff4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5f02:	2101      	movs	r1, #1
    5f04:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5f08:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5f0c:	2200      	movs	r2, #0
    5f0e:	f855 0008 	ldr.w	r0, [r5, r8]
    5f12:	f7ff fe41 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5f16:	e6f3      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f1c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5f20:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5f24:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5f28:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5f2c:	f013 0f20 	tst.w	r3, #32
    5f30:	d01f      	beq.n	5f72 <pinctrl_configure_pins+0x31a>
    5f32:	b30a      	cbz	r2, 5f78 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    5f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5f38:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5f3c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f3e:	f013 0f01 	tst.w	r3, #1
    5f42:	d01b      	beq.n	5f7c <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    5f44:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f48:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5f4c:	d025      	beq.n	5f9a <pinctrl_configure_pins+0x342>
    5f4e:	bb3b      	cbnz	r3, 5fa0 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    5f50:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5f54:	f240 232e 	movw	r3, #558	; 0x22e
    5f58:	464a      	mov	r2, r9
    5f5a:	4923      	ldr	r1, [pc, #140]	; (5fe8 <pinctrl_configure_pins+0x390>)
    5f5c:	4823      	ldr	r0, [pc, #140]	; (5fec <pinctrl_configure_pins+0x394>)
    5f5e:	f005 fa55 	bl	b40c <assert_print>
    5f62:	f240 212e 	movw	r1, #558	; 0x22e
    5f66:	4648      	mov	r0, r9
    5f68:	f005 fa49 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    5f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5f70:	e017      	b.n	5fa2 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    5f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f76:	e7df      	b.n	5f38 <pinctrl_configure_pins+0x2e0>
    switch (port)
    5f78:	2300      	movs	r3, #0
    5f7a:	e7dd      	b.n	5f38 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5f7c:	f8df a064 	ldr.w	sl, [pc, #100]	; 5fe4 <pinctrl_configure_pins+0x38c>
    5f80:	f240 2329 	movw	r3, #553	; 0x229
    5f84:	4652      	mov	r2, sl
    5f86:	491a      	ldr	r1, [pc, #104]	; (5ff0 <pinctrl_configure_pins+0x398>)
    5f88:	4818      	ldr	r0, [pc, #96]	; (5fec <pinctrl_configure_pins+0x394>)
    5f8a:	f005 fa3f 	bl	b40c <assert_print>
    5f8e:	f240 2129 	movw	r1, #553	; 0x229
    5f92:	4650      	mov	r0, sl
    5f94:	f005 fa33 	bl	b3fe <assert_post_action>
    5f98:	e7d4      	b.n	5f44 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    5f9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5f9e:	e000      	b.n	5fa2 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fa0:	4a14      	ldr	r2, [pc, #80]	; (5ff4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5fa2:	2101      	movs	r1, #1
    5fa4:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5fa8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5fac:	460a      	mov	r2, r1
    5fae:	f855 0008 	ldr.w	r0, [r5, r8]
    5fb2:	f7ff fdf1 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5fb6:	e6a3      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fbc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5fc0:	2200      	movs	r2, #0
    5fc2:	4611      	mov	r1, r2
    5fc4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5fc8:	f7ff fde6 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5fcc:	e698      	b.n	5d00 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    5fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fd2:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5fd6:	2200      	movs	r2, #0
    5fd8:	4611      	mov	r1, r2
    5fda:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5fde:	f7ff fddb 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5fe2:	e68d      	b.n	5d00 <pinctrl_configure_pins+0xa8>
    5fe4:	0000e0ac 	.word	0x0000e0ac
    5fe8:	0000ca80 	.word	0x0000ca80
    5fec:	0000c8bc 	.word	0x0000c8bc
    5ff0:	0000e0e0 	.word	0x0000e0e0
    5ff4:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ffc:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6000:	2200      	movs	r2, #0
    6002:	4611      	mov	r1, r2
    6004:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6008:	f7ff fdc6 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    600c:	e678      	b.n	5d00 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    600e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6012:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6016:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    601a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    601e:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6022:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6026:	d144      	bne.n	60b2 <pinctrl_configure_pins+0x45a>
    switch (port)
    6028:	ea5f 1359 	movs.w	r3, r9, lsr #5
    602c:	d01f      	beq.n	606e <pinctrl_configure_pins+0x416>
    602e:	b10b      	cbz	r3, 6034 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    6030:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6034:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6038:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    603a:	f012 0f01 	tst.w	r2, #1
    603e:	d019      	beq.n	6074 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    6040:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6044:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6048:	d023      	beq.n	6092 <pinctrl_configure_pins+0x43a>
    604a:	bb2b      	cbnz	r3, 6098 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    604c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 6350 <pinctrl_configure_pins+0x6f8>
    6050:	f240 232e 	movw	r3, #558	; 0x22e
    6054:	464a      	mov	r2, r9
    6056:	49bf      	ldr	r1, [pc, #764]	; (6354 <pinctrl_configure_pins+0x6fc>)
    6058:	48bf      	ldr	r0, [pc, #764]	; (6358 <pinctrl_configure_pins+0x700>)
    605a:	f005 f9d7 	bl	b40c <assert_print>
    605e:	f240 212e 	movw	r1, #558	; 0x22e
    6062:	4648      	mov	r0, r9
    6064:	f005 f9cb 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    606c:	e015      	b.n	609a <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    606e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6072:	e7df      	b.n	6034 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6074:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 6350 <pinctrl_configure_pins+0x6f8>
    6078:	f240 2329 	movw	r3, #553	; 0x229
    607c:	4652      	mov	r2, sl
    607e:	49b7      	ldr	r1, [pc, #732]	; (635c <pinctrl_configure_pins+0x704>)
    6080:	48b5      	ldr	r0, [pc, #724]	; (6358 <pinctrl_configure_pins+0x700>)
    6082:	f005 f9c3 	bl	b40c <assert_print>
    6086:	f240 2129 	movw	r1, #553	; 0x229
    608a:	4650      	mov	r0, sl
    608c:	f005 f9b7 	bl	b3fe <assert_post_action>
    6090:	e7d6      	b.n	6040 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    6092:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6096:	e000      	b.n	609a <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6098:	4ab1      	ldr	r2, [pc, #708]	; (6360 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    609a:	2301      	movs	r3, #1
    609c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    60a0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    60a4:	2201      	movs	r2, #1
    60a6:	4611      	mov	r1, r2
    60a8:	f855 0008 	ldr.w	r0, [r5, r8]
    60ac:	f7ff fd74 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    60b0:	e626      	b.n	5d00 <pinctrl_configure_pins+0xa8>
    switch (port)
    60b2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    60b6:	d01f      	beq.n	60f8 <pinctrl_configure_pins+0x4a0>
    60b8:	b30b      	cbz	r3, 60fe <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    60ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    60be:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    60c2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    60c4:	f013 0f01 	tst.w	r3, #1
    60c8:	d01b      	beq.n	6102 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    60ca:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60ce:	ea5f 1359 	movs.w	r3, r9, lsr #5
    60d2:	d025      	beq.n	6120 <pinctrl_configure_pins+0x4c8>
    60d4:	bb3b      	cbnz	r3, 6126 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    60d6:	f8df 9278 	ldr.w	r9, [pc, #632]	; 6350 <pinctrl_configure_pins+0x6f8>
    60da:	f240 232e 	movw	r3, #558	; 0x22e
    60de:	464a      	mov	r2, r9
    60e0:	499c      	ldr	r1, [pc, #624]	; (6354 <pinctrl_configure_pins+0x6fc>)
    60e2:	489d      	ldr	r0, [pc, #628]	; (6358 <pinctrl_configure_pins+0x700>)
    60e4:	f005 f992 	bl	b40c <assert_print>
    60e8:	f240 212e 	movw	r1, #558	; 0x22e
    60ec:	4648      	mov	r0, r9
    60ee:	f005 f986 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    60f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    60f6:	e017      	b.n	6128 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    60f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    60fc:	e7df      	b.n	60be <pinctrl_configure_pins+0x466>
    switch (port)
    60fe:	2300      	movs	r3, #0
    6100:	e7dd      	b.n	60be <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6102:	f8df a24c 	ldr.w	sl, [pc, #588]	; 6350 <pinctrl_configure_pins+0x6f8>
    6106:	f240 2329 	movw	r3, #553	; 0x229
    610a:	4652      	mov	r2, sl
    610c:	4993      	ldr	r1, [pc, #588]	; (635c <pinctrl_configure_pins+0x704>)
    610e:	4892      	ldr	r0, [pc, #584]	; (6358 <pinctrl_configure_pins+0x700>)
    6110:	f005 f97c 	bl	b40c <assert_print>
    6114:	f240 2129 	movw	r1, #553	; 0x229
    6118:	4650      	mov	r0, sl
    611a:	f005 f970 	bl	b3fe <assert_post_action>
    611e:	e7d4      	b.n	60ca <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    6120:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6124:	e000      	b.n	6128 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6126:	4a8e      	ldr	r2, [pc, #568]	; (6360 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6128:	2301      	movs	r3, #1
    612a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    612e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6132:	e7b7      	b.n	60a4 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6138:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    613c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6140:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6144:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6148:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    614c:	d144      	bne.n	61d8 <pinctrl_configure_pins+0x580>
    switch (port)
    614e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6152:	d01f      	beq.n	6194 <pinctrl_configure_pins+0x53c>
    6154:	b10b      	cbz	r3, 615a <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    6156:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    615a:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    615e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6160:	f012 0f01 	tst.w	r2, #1
    6164:	d019      	beq.n	619a <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    6166:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    616a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    616e:	d023      	beq.n	61b8 <pinctrl_configure_pins+0x560>
    6170:	bb2b      	cbnz	r3, 61be <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    6172:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 6350 <pinctrl_configure_pins+0x6f8>
    6176:	f240 232e 	movw	r3, #558	; 0x22e
    617a:	464a      	mov	r2, r9
    617c:	4975      	ldr	r1, [pc, #468]	; (6354 <pinctrl_configure_pins+0x6fc>)
    617e:	4876      	ldr	r0, [pc, #472]	; (6358 <pinctrl_configure_pins+0x700>)
    6180:	f005 f944 	bl	b40c <assert_print>
    6184:	f240 212e 	movw	r1, #558	; 0x22e
    6188:	4648      	mov	r0, r9
    618a:	f005 f938 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    618e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6192:	e015      	b.n	61c0 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    6194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6198:	e7df      	b.n	615a <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    619a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 6350 <pinctrl_configure_pins+0x6f8>
    619e:	f240 2329 	movw	r3, #553	; 0x229
    61a2:	4652      	mov	r2, sl
    61a4:	496d      	ldr	r1, [pc, #436]	; (635c <pinctrl_configure_pins+0x704>)
    61a6:	486c      	ldr	r0, [pc, #432]	; (6358 <pinctrl_configure_pins+0x700>)
    61a8:	f005 f930 	bl	b40c <assert_print>
    61ac:	f240 2129 	movw	r1, #553	; 0x229
    61b0:	4650      	mov	r0, sl
    61b2:	f005 f924 	bl	b3fe <assert_post_action>
    61b6:	e7d6      	b.n	6166 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    61b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    61bc:	e000      	b.n	61c0 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    61be:	4a68      	ldr	r2, [pc, #416]	; (6360 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    61c0:	2301      	movs	r3, #1
    61c2:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    61c6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    61ca:	2201      	movs	r2, #1
    61cc:	4611      	mov	r1, r2
    61ce:	f855 0008 	ldr.w	r0, [r5, r8]
    61d2:	f7ff fce1 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    61d6:	e593      	b.n	5d00 <pinctrl_configure_pins+0xa8>
    switch (port)
    61d8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    61dc:	d01f      	beq.n	621e <pinctrl_configure_pins+0x5c6>
    61de:	b30b      	cbz	r3, 6224 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    61e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    61e4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    61e8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    61ea:	f013 0f01 	tst.w	r3, #1
    61ee:	d01b      	beq.n	6228 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    61f0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    61f4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    61f8:	d025      	beq.n	6246 <pinctrl_configure_pins+0x5ee>
    61fa:	bb3b      	cbnz	r3, 624c <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    61fc:	f8df 9150 	ldr.w	r9, [pc, #336]	; 6350 <pinctrl_configure_pins+0x6f8>
    6200:	f240 232e 	movw	r3, #558	; 0x22e
    6204:	464a      	mov	r2, r9
    6206:	4953      	ldr	r1, [pc, #332]	; (6354 <pinctrl_configure_pins+0x6fc>)
    6208:	4853      	ldr	r0, [pc, #332]	; (6358 <pinctrl_configure_pins+0x700>)
    620a:	f005 f8ff 	bl	b40c <assert_print>
    620e:	f240 212e 	movw	r1, #558	; 0x22e
    6212:	4648      	mov	r0, r9
    6214:	f005 f8f3 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    621c:	e017      	b.n	624e <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    621e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6222:	e7df      	b.n	61e4 <pinctrl_configure_pins+0x58c>
    switch (port)
    6224:	2300      	movs	r3, #0
    6226:	e7dd      	b.n	61e4 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6228:	f8df a124 	ldr.w	sl, [pc, #292]	; 6350 <pinctrl_configure_pins+0x6f8>
    622c:	f240 2329 	movw	r3, #553	; 0x229
    6230:	4652      	mov	r2, sl
    6232:	494a      	ldr	r1, [pc, #296]	; (635c <pinctrl_configure_pins+0x704>)
    6234:	4848      	ldr	r0, [pc, #288]	; (6358 <pinctrl_configure_pins+0x700>)
    6236:	f005 f8e9 	bl	b40c <assert_print>
    623a:	f240 2129 	movw	r1, #553	; 0x229
    623e:	4650      	mov	r0, sl
    6240:	f005 f8dd 	bl	b3fe <assert_post_action>
    6244:	e7d4      	b.n	61f0 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    6246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    624a:	e000      	b.n	624e <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    624c:	4a44      	ldr	r2, [pc, #272]	; (6360 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    624e:	2301      	movs	r3, #1
    6250:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6254:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6258:	e7b7      	b.n	61ca <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    625a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    625e:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6262:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6266:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    626a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    626e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6272:	d144      	bne.n	62fe <pinctrl_configure_pins+0x6a6>
    switch (port)
    6274:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6278:	d01f      	beq.n	62ba <pinctrl_configure_pins+0x662>
    627a:	b10b      	cbz	r3, 6280 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    627c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6280:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6284:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6286:	f012 0f01 	tst.w	r2, #1
    628a:	d019      	beq.n	62c0 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    628c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6290:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6294:	d023      	beq.n	62de <pinctrl_configure_pins+0x686>
    6296:	bb2b      	cbnz	r3, 62e4 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    6298:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6350 <pinctrl_configure_pins+0x6f8>
    629c:	f240 232e 	movw	r3, #558	; 0x22e
    62a0:	464a      	mov	r2, r9
    62a2:	492c      	ldr	r1, [pc, #176]	; (6354 <pinctrl_configure_pins+0x6fc>)
    62a4:	482c      	ldr	r0, [pc, #176]	; (6358 <pinctrl_configure_pins+0x700>)
    62a6:	f005 f8b1 	bl	b40c <assert_print>
    62aa:	f240 212e 	movw	r1, #558	; 0x22e
    62ae:	4648      	mov	r0, r9
    62b0:	f005 f8a5 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    62b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    62b8:	e015      	b.n	62e6 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    62ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62be:	e7df      	b.n	6280 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62c0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 6350 <pinctrl_configure_pins+0x6f8>
    62c4:	f240 2329 	movw	r3, #553	; 0x229
    62c8:	4652      	mov	r2, sl
    62ca:	4924      	ldr	r1, [pc, #144]	; (635c <pinctrl_configure_pins+0x704>)
    62cc:	4822      	ldr	r0, [pc, #136]	; (6358 <pinctrl_configure_pins+0x700>)
    62ce:	f005 f89d 	bl	b40c <assert_print>
    62d2:	f240 2129 	movw	r1, #553	; 0x229
    62d6:	4650      	mov	r0, sl
    62d8:	f005 f891 	bl	b3fe <assert_post_action>
    62dc:	e7d6      	b.n	628c <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    62de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    62e2:	e000      	b.n	62e6 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62e4:	4a1e      	ldr	r2, [pc, #120]	; (6360 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    62e6:	2301      	movs	r3, #1
    62e8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    62ec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    62f0:	2201      	movs	r2, #1
    62f2:	4611      	mov	r1, r2
    62f4:	f855 0008 	ldr.w	r0, [r5, r8]
    62f8:	f7ff fc4e 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    62fc:	e500      	b.n	5d00 <pinctrl_configure_pins+0xa8>
    switch (port)
    62fe:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6302:	d01f      	beq.n	6344 <pinctrl_configure_pins+0x6ec>
    6304:	b30b      	cbz	r3, 634a <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    6306:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    630a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    630e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6310:	f013 0f01 	tst.w	r3, #1
    6314:	d026      	beq.n	6364 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    6316:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    631a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    631e:	d030      	beq.n	6382 <pinctrl_configure_pins+0x72a>
    6320:	bb93      	cbnz	r3, 6388 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    6322:	f8df 902c 	ldr.w	r9, [pc, #44]	; 6350 <pinctrl_configure_pins+0x6f8>
    6326:	f240 232e 	movw	r3, #558	; 0x22e
    632a:	464a      	mov	r2, r9
    632c:	4909      	ldr	r1, [pc, #36]	; (6354 <pinctrl_configure_pins+0x6fc>)
    632e:	480a      	ldr	r0, [pc, #40]	; (6358 <pinctrl_configure_pins+0x700>)
    6330:	f005 f86c 	bl	b40c <assert_print>
    6334:	f240 212e 	movw	r1, #558	; 0x22e
    6338:	4648      	mov	r0, r9
    633a:	f005 f860 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    633e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6342:	e022      	b.n	638a <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    6344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6348:	e7df      	b.n	630a <pinctrl_configure_pins+0x6b2>
    switch (port)
    634a:	2300      	movs	r3, #0
    634c:	e7dd      	b.n	630a <pinctrl_configure_pins+0x6b2>
    634e:	bf00      	nop
    6350:	0000e0ac 	.word	0x0000e0ac
    6354:	0000ca80 	.word	0x0000ca80
    6358:	0000c8bc 	.word	0x0000c8bc
    635c:	0000e0e0 	.word	0x0000e0e0
    6360:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6364:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 6554 <pinctrl_configure_pins+0x8fc>
    6368:	f240 2329 	movw	r3, #553	; 0x229
    636c:	4652      	mov	r2, sl
    636e:	497a      	ldr	r1, [pc, #488]	; (6558 <pinctrl_configure_pins+0x900>)
    6370:	487a      	ldr	r0, [pc, #488]	; (655c <pinctrl_configure_pins+0x904>)
    6372:	f005 f84b 	bl	b40c <assert_print>
    6376:	f240 2129 	movw	r1, #553	; 0x229
    637a:	4650      	mov	r0, sl
    637c:	f005 f83f 	bl	b3fe <assert_post_action>
    6380:	e7c9      	b.n	6316 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    6382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6386:	e000      	b.n	638a <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6388:	4a75      	ldr	r2, [pc, #468]	; (6560 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    638a:	2301      	movs	r3, #1
    638c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6390:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6394:	e7ac      	b.n	62f0 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    6396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    639a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    639e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    63a2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    63a6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    63aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    63ae:	d144      	bne.n	643a <pinctrl_configure_pins+0x7e2>
    switch (port)
    63b0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    63b4:	d01f      	beq.n	63f6 <pinctrl_configure_pins+0x79e>
    63b6:	b10b      	cbz	r3, 63bc <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    63b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    63bc:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    63c0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63c2:	f012 0f01 	tst.w	r2, #1
    63c6:	d019      	beq.n	63fc <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    63c8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63cc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    63d0:	d023      	beq.n	641a <pinctrl_configure_pins+0x7c2>
    63d2:	bb2b      	cbnz	r3, 6420 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    63d4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6554 <pinctrl_configure_pins+0x8fc>
    63d8:	f240 232e 	movw	r3, #558	; 0x22e
    63dc:	464a      	mov	r2, r9
    63de:	4961      	ldr	r1, [pc, #388]	; (6564 <pinctrl_configure_pins+0x90c>)
    63e0:	485e      	ldr	r0, [pc, #376]	; (655c <pinctrl_configure_pins+0x904>)
    63e2:	f005 f813 	bl	b40c <assert_print>
    63e6:	f240 212e 	movw	r1, #558	; 0x22e
    63ea:	4648      	mov	r0, r9
    63ec:	f005 f807 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    63f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    63f4:	e015      	b.n	6422 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    63f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63fa:	e7df      	b.n	63bc <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63fc:	f8df a154 	ldr.w	sl, [pc, #340]	; 6554 <pinctrl_configure_pins+0x8fc>
    6400:	f240 2329 	movw	r3, #553	; 0x229
    6404:	4652      	mov	r2, sl
    6406:	4954      	ldr	r1, [pc, #336]	; (6558 <pinctrl_configure_pins+0x900>)
    6408:	4854      	ldr	r0, [pc, #336]	; (655c <pinctrl_configure_pins+0x904>)
    640a:	f004 ffff 	bl	b40c <assert_print>
    640e:	f240 2129 	movw	r1, #553	; 0x229
    6412:	4650      	mov	r0, sl
    6414:	f004 fff3 	bl	b3fe <assert_post_action>
    6418:	e7d6      	b.n	63c8 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    641a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    641e:	e000      	b.n	6422 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6420:	4a4f      	ldr	r2, [pc, #316]	; (6560 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6422:	2301      	movs	r3, #1
    6424:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6428:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    642c:	2201      	movs	r2, #1
    642e:	4611      	mov	r1, r2
    6430:	f855 0008 	ldr.w	r0, [r5, r8]
    6434:	f7ff fbb0 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6438:	e462      	b.n	5d00 <pinctrl_configure_pins+0xa8>
    switch (port)
    643a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    643e:	d01f      	beq.n	6480 <pinctrl_configure_pins+0x828>
    6440:	b30b      	cbz	r3, 6486 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    6442:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6446:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    644a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    644c:	f013 0f01 	tst.w	r3, #1
    6450:	d01b      	beq.n	648a <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    6452:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6456:	ea5f 1359 	movs.w	r3, r9, lsr #5
    645a:	d025      	beq.n	64a8 <pinctrl_configure_pins+0x850>
    645c:	bb3b      	cbnz	r3, 64ae <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    645e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 6554 <pinctrl_configure_pins+0x8fc>
    6462:	f240 232e 	movw	r3, #558	; 0x22e
    6466:	464a      	mov	r2, r9
    6468:	493e      	ldr	r1, [pc, #248]	; (6564 <pinctrl_configure_pins+0x90c>)
    646a:	483c      	ldr	r0, [pc, #240]	; (655c <pinctrl_configure_pins+0x904>)
    646c:	f004 ffce 	bl	b40c <assert_print>
    6470:	f240 212e 	movw	r1, #558	; 0x22e
    6474:	4648      	mov	r0, r9
    6476:	f004 ffc2 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    647a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    647e:	e017      	b.n	64b0 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    6480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6484:	e7df      	b.n	6446 <pinctrl_configure_pins+0x7ee>
    switch (port)
    6486:	2300      	movs	r3, #0
    6488:	e7dd      	b.n	6446 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    648a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6554 <pinctrl_configure_pins+0x8fc>
    648e:	f240 2329 	movw	r3, #553	; 0x229
    6492:	4652      	mov	r2, sl
    6494:	4930      	ldr	r1, [pc, #192]	; (6558 <pinctrl_configure_pins+0x900>)
    6496:	4831      	ldr	r0, [pc, #196]	; (655c <pinctrl_configure_pins+0x904>)
    6498:	f004 ffb8 	bl	b40c <assert_print>
    649c:	f240 2129 	movw	r1, #553	; 0x229
    64a0:	4650      	mov	r0, sl
    64a2:	f004 ffac 	bl	b3fe <assert_post_action>
    64a6:	e7d4      	b.n	6452 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    64a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    64ac:	e000      	b.n	64b0 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64ae:	4a2c      	ldr	r2, [pc, #176]	; (6560 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    64b0:	2301      	movs	r3, #1
    64b2:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    64b6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    64ba:	e7b7      	b.n	642c <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    64bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64c0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    64c4:	2201      	movs	r2, #1
    64c6:	2100      	movs	r1, #0
    64c8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    64cc:	f7ff fb64 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    64d0:	e416      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    64d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64d6:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    64da:	2201      	movs	r2, #1
    64dc:	2100      	movs	r1, #0
    64de:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    64e2:	f7ff fb59 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    64e6:	e40b      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    64e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64ec:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    64f0:	2201      	movs	r2, #1
    64f2:	2100      	movs	r1, #0
    64f4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    64f8:	f7ff fb4e 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    64fc:	e400      	b.n	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    64fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6502:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6506:	2201      	movs	r2, #1
    6508:	2100      	movs	r1, #0
    650a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    650e:	f7ff fb43 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6512:	f7ff bbf5 	b.w	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    651a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    651e:	2201      	movs	r2, #1
    6520:	2100      	movs	r1, #0
    6522:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6526:	f7ff fb37 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    652a:	f7ff bbe9 	b.w	5d00 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    652e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6532:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6536:	2201      	movs	r2, #1
    6538:	2100      	movs	r1, #0
    653a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    653e:	f7ff fb2b 	bl	5b98 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6542:	f7ff bbdd 	b.w	5d00 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6546:	2000      	movs	r0, #0
    6548:	e001      	b.n	654e <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    654a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6552:	bf00      	nop
    6554:	0000e0ac 	.word	0x0000e0ac
    6558:	0000e0e0 	.word	0x0000e0e0
    655c:	0000c8bc 	.word	0x0000c8bc
    6560:	50000300 	.word	0x50000300
    6564:	0000ca80 	.word	0x0000ca80

00006568 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6568:	b510      	push	{r4, lr}
    656a:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    656c:	f7fc f9d4 	bl	2918 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6570:	4b06      	ldr	r3, [pc, #24]	; (658c <k_sys_fatal_error_handler+0x24>)
    6572:	9302      	str	r3, [sp, #8]
    6574:	2400      	movs	r4, #0
    6576:	9401      	str	r4, [sp, #4]
    6578:	9400      	str	r4, [sp, #0]
    657a:	4623      	mov	r3, r4
    657c:	2201      	movs	r2, #1
    657e:	4904      	ldr	r1, [pc, #16]	; (6590 <k_sys_fatal_error_handler+0x28>)
    6580:	4620      	mov	r0, r4
    6582:	f005 fcf7 	bl	bf74 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    6586:	4620      	mov	r0, r4
    6588:	f7fe f810 	bl	45ac <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    658c:	0000e20c 	.word	0x0000e20c
    6590:	0000c604 	.word	0x0000c604

00006594 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6594:	4b02      	ldr	r3, [pc, #8]	; (65a0 <nvmc_wait+0xc>)
    6596:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    659a:	2b00      	cmp	r3, #0
    659c:	d0fa      	beq.n	6594 <nvmc_wait>
}
    659e:	4770      	bx	lr
    65a0:	4001e000 	.word	0x4001e000

000065a4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    65a4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    65a6:	4b03      	ldr	r3, [pc, #12]	; (65b4 <nvmc_config+0x10>)
    65a8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    65ac:	f7ff fff2 	bl	6594 <nvmc_wait>
}
    65b0:	bd08      	pop	{r3, pc}
    65b2:	bf00      	nop
    65b4:	4001e000 	.word	0x4001e000

000065b8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    65b8:	4b01      	ldr	r3, [pc, #4]	; (65c0 <SystemCoreClockUpdate+0x8>)
    65ba:	4a02      	ldr	r2, [pc, #8]	; (65c4 <SystemCoreClockUpdate+0xc>)
    65bc:	601a      	str	r2, [r3, #0]
}
    65be:	4770      	bx	lr
    65c0:	200000f0 	.word	0x200000f0
    65c4:	03d09000 	.word	0x03d09000

000065c8 <SystemInit>:

void SystemInit(void)
{
    65c8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    65ca:	f005 fcf0 	bl	bfae <nrf52_errata_36>
    65ce:	b140      	cbz	r0, 65e2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    65d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65d4:	2200      	movs	r2, #0
    65d6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    65da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    65de:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    65e2:	f005 fcee 	bl	bfc2 <nrf52_errata_66>
    65e6:	2800      	cmp	r0, #0
    65e8:	d046      	beq.n	6678 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    65ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    65ee:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    65f2:	4b59      	ldr	r3, [pc, #356]	; (6758 <SystemInit+0x190>)
    65f4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    65f8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    65fc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6600:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6604:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6608:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    660c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6610:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6614:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6618:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    661c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6620:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6624:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6628:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    662c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6630:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    6634:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6638:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    663c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6640:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    6644:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6648:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    664c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6650:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6654:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6658:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    665c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6660:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6664:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6668:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    666c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6670:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6674:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6678:	f005 fcad 	bl	bfd6 <nrf52_errata_98>
    667c:	b118      	cbz	r0, 6686 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    667e:	4b37      	ldr	r3, [pc, #220]	; (675c <SystemInit+0x194>)
    6680:	4a37      	ldr	r2, [pc, #220]	; (6760 <SystemInit+0x198>)
    6682:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6686:	f005 fcb9 	bl	bffc <nrf52_errata_103>
    668a:	b118      	cbz	r0, 6694 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    668c:	4b35      	ldr	r3, [pc, #212]	; (6764 <SystemInit+0x19c>)
    668e:	22fb      	movs	r2, #251	; 0xfb
    6690:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6694:	f005 fcc5 	bl	c022 <nrf52_errata_115>
    6698:	b170      	cbz	r0, 66b8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    669a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    669e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    66a2:	f023 030f 	bic.w	r3, r3, #15
    66a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    66aa:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    66ae:	f002 020f 	and.w	r2, r2, #15
    66b2:	4313      	orrs	r3, r2
    66b4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    66b8:	f005 fcc6 	bl	c048 <nrf52_errata_120>
    66bc:	b120      	cbz	r0, 66c8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    66be:	4b2a      	ldr	r3, [pc, #168]	; (6768 <SystemInit+0x1a0>)
    66c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    66c4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    66c8:	f005 fcd1 	bl	c06e <nrf52_errata_136>
    66cc:	b160      	cbz	r0, 66e8 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    66ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    66d6:	f013 0f01 	tst.w	r3, #1
    66da:	d005      	beq.n	66e8 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    66dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66e0:	f06f 0201 	mvn.w	r2, #1
    66e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    66e8:	f005 fccb 	bl	c082 <nrf52_configuration_249>
    66ec:	b138      	cbz	r0, 66fe <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    66ee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    66f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    66f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66fa:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    66fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    6706:	2b00      	cmp	r3, #0
    6708:	db08      	blt.n	671c <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    670a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    670e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6712:	2b00      	cmp	r3, #0
    6714:	db02      	blt.n	671c <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    6716:	f7ff ff4f 	bl	65b8 <SystemCoreClockUpdate>
}
    671a:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    671c:	2001      	movs	r0, #1
    671e:	f7ff ff41 	bl	65a4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6722:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    6726:	2512      	movs	r5, #18
    6728:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    672c:	f7ff ff32 	bl	6594 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6730:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    6734:	f7ff ff2e 	bl	6594 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    6738:	2000      	movs	r0, #0
    673a:	f7ff ff33 	bl	65a4 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    673e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6742:	490a      	ldr	r1, [pc, #40]	; (676c <SystemInit+0x1a4>)
    6744:	68ca      	ldr	r2, [r1, #12]
    6746:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    674a:	4b09      	ldr	r3, [pc, #36]	; (6770 <SystemInit+0x1a8>)
    674c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    674e:	60cb      	str	r3, [r1, #12]
    6750:	f3bf 8f4f 	dsb	sy
    __NOP();
    6754:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6756:	e7fd      	b.n	6754 <SystemInit+0x18c>
    6758:	4000c000 	.word	0x4000c000
    675c:	40005000 	.word	0x40005000
    6760:	00038148 	.word	0x00038148
    6764:	4000f000 	.word	0x4000f000
    6768:	40029000 	.word	0x40029000
    676c:	e000ed00 	.word	0xe000ed00
    6770:	05fa0004 	.word	0x05fa0004

00006774 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6774:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    6776:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6778:	fab4 f384 	clz	r3, r4
    677c:	f1c3 031f 	rsb	r3, r3, #31
    6780:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    6784:	2b00      	cmp	r3, #0
    6786:	db16      	blt.n	67b6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6788:	2201      	movs	r2, #1
    678a:	fa02 f303 	lsl.w	r3, r2, r3
    678e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6792:	f3bf 8f5b 	dmb	ish
    6796:	e850 2f00 	ldrex	r2, [r0]
    679a:	42a2      	cmp	r2, r4
    679c:	d104      	bne.n	67a8 <nrfx_flag32_alloc+0x34>
    679e:	e840 3e00 	strex	lr, r3, [r0]
    67a2:	f1be 0f00 	cmp.w	lr, #0
    67a6:	d1f6      	bne.n	6796 <nrfx_flag32_alloc+0x22>
    67a8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    67ac:	d1e3      	bne.n	6776 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    67ae:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    67b2:	4802      	ldr	r0, [pc, #8]	; (67bc <nrfx_flag32_alloc+0x48>)
}
    67b4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    67b6:	4802      	ldr	r0, [pc, #8]	; (67c0 <nrfx_flag32_alloc+0x4c>)
    67b8:	e7fc      	b.n	67b4 <nrfx_flag32_alloc+0x40>
    67ba:	bf00      	nop
    67bc:	0bad0000 	.word	0x0bad0000
    67c0:	0bad0002 	.word	0x0bad0002

000067c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    67c4:	6803      	ldr	r3, [r0, #0]
    67c6:	40cb      	lsrs	r3, r1
    67c8:	f013 0f01 	tst.w	r3, #1
    67cc:	d115      	bne.n	67fa <nrfx_flag32_free+0x36>
{
    67ce:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    67d0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    67d2:	2301      	movs	r3, #1
    67d4:	408b      	lsls	r3, r1
    67d6:	4313      	orrs	r3, r2
    67d8:	f3bf 8f5b 	dmb	ish
    67dc:	e850 cf00 	ldrex	ip, [r0]
    67e0:	4594      	cmp	ip, r2
    67e2:	d104      	bne.n	67ee <nrfx_flag32_free+0x2a>
    67e4:	e840 3e00 	strex	lr, r3, [r0]
    67e8:	f1be 0f00 	cmp.w	lr, #0
    67ec:	d1f6      	bne.n	67dc <nrfx_flag32_free+0x18>
    67ee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    67f2:	d1ed      	bne.n	67d0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    67f4:	4802      	ldr	r0, [pc, #8]	; (6800 <nrfx_flag32_free+0x3c>)
}
    67f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    67fa:	4802      	ldr	r0, [pc, #8]	; (6804 <nrfx_flag32_free+0x40>)
}
    67fc:	4770      	bx	lr
    67fe:	bf00      	nop
    6800:	0bad0000 	.word	0x0bad0000
    6804:	0bad0004 	.word	0x0bad0004

00006808 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    6808:	b5f0      	push	{r4, r5, r6, r7, lr}
    680a:	b083      	sub	sp, #12
    switch (domain)
    680c:	4605      	mov	r5, r0
    680e:	b168      	cbz	r0, 682c <clock_stop+0x24>
    6810:	2801      	cmp	r0, #1
    6812:	d020      	beq.n	6856 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6814:	4c3d      	ldr	r4, [pc, #244]	; (690c <clock_stop+0x104>)
    6816:	23d8      	movs	r3, #216	; 0xd8
    6818:	4622      	mov	r2, r4
    681a:	493d      	ldr	r1, [pc, #244]	; (6910 <clock_stop+0x108>)
    681c:	483d      	ldr	r0, [pc, #244]	; (6914 <clock_stop+0x10c>)
    681e:	f004 fdf5 	bl	b40c <assert_print>
    6822:	21d8      	movs	r1, #216	; 0xd8
    6824:	4620      	mov	r0, r4
    6826:	f004 fdea 	bl	b3fe <assert_post_action>
            return;
    682a:	e068      	b.n	68fe <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    682c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6830:	2202      	movs	r2, #2
    6832:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6836:	2200      	movs	r2, #0
    6838:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    683c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6840:	2201      	movs	r2, #1
    6842:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6844:	2301      	movs	r3, #1
    6846:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    684a:	429d      	cmp	r5, r3
    684c:	d00f      	beq.n	686e <clock_stop+0x66>
    684e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6850:	f242 7410 	movw	r4, #10000	; 0x2710
    6854:	e029      	b.n	68aa <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    6856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    685a:	2201      	movs	r2, #1
    685c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6860:	2100      	movs	r1, #0
    6862:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6866:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    686a:	605a      	str	r2, [r3, #4]
}
    686c:	e7ea      	b.n	6844 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    686e:	f10d 0607 	add.w	r6, sp, #7
    6872:	e7ed      	b.n	6850 <clock_stop+0x48>
            if (p_clk_src != NULL)
    6874:	b136      	cbz	r6, 6884 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    687a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    687e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6882:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6888:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    688c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6890:	d12f      	bne.n	68f2 <clock_stop+0xea>
    return false;
    6892:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6894:	b38b      	cbz	r3, 68fa <clock_stop+0xf2>
    6896:	b11e      	cbz	r6, 68a0 <clock_stop+0x98>
    6898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    689c:	2b01      	cmp	r3, #1
    689e:	d12c      	bne.n	68fa <clock_stop+0xf2>
    68a0:	2001      	movs	r0, #1
    68a2:	f005 fc01 	bl	c0a8 <nrfx_busy_wait>
    68a6:	3c01      	subs	r4, #1
    68a8:	d027      	beq.n	68fa <clock_stop+0xf2>
    switch (domain)
    68aa:	2d00      	cmp	r5, #0
    68ac:	d0e2      	beq.n	6874 <clock_stop+0x6c>
    68ae:	2d01      	cmp	r5, #1
    68b0:	d00e      	beq.n	68d0 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    68b2:	4f19      	ldr	r7, [pc, #100]	; (6918 <clock_stop+0x110>)
    68b4:	f44f 734f 	mov.w	r3, #828	; 0x33c
    68b8:	463a      	mov	r2, r7
    68ba:	4915      	ldr	r1, [pc, #84]	; (6910 <clock_stop+0x108>)
    68bc:	4815      	ldr	r0, [pc, #84]	; (6914 <clock_stop+0x10c>)
    68be:	f004 fda5 	bl	b40c <assert_print>
    68c2:	f44f 714f 	mov.w	r1, #828	; 0x33c
    68c6:	4638      	mov	r0, r7
    68c8:	f004 fd99 	bl	b3fe <assert_post_action>
            return false;
    68cc:	2300      	movs	r3, #0
    68ce:	e7e1      	b.n	6894 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    68d0:	b136      	cbz	r6, 68e0 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    68d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    68da:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    68de:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    68e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    68e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    68ec:	d103      	bne.n	68f6 <clock_stop+0xee>
    return false;
    68ee:	2300      	movs	r3, #0
    68f0:	e7d0      	b.n	6894 <clock_stop+0x8c>
                return true;
    68f2:	2301      	movs	r3, #1
    68f4:	e7ce      	b.n	6894 <clock_stop+0x8c>
                return true;
    68f6:	2301      	movs	r3, #1
    68f8:	e7cc      	b.n	6894 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    68fa:	2d01      	cmp	r5, #1
    68fc:	d001      	beq.n	6902 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    68fe:	b003      	add	sp, #12
    6900:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    6902:	4b06      	ldr	r3, [pc, #24]	; (691c <clock_stop+0x114>)
    6904:	2200      	movs	r2, #0
    6906:	715a      	strb	r2, [r3, #5]
    6908:	e7f9      	b.n	68fe <clock_stop+0xf6>
    690a:	bf00      	nop
    690c:	0000e22c 	.word	0x0000e22c
    6910:	0000ca80 	.word	0x0000ca80
    6914:	0000c8bc 	.word	0x0000c8bc
    6918:	0000e26c 	.word	0x0000e26c
    691c:	20000c94 	.word	0x20000c94

00006920 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    6920:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    6922:	4604      	mov	r4, r0
    6924:	b150      	cbz	r0, 693c <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6926:	4b0d      	ldr	r3, [pc, #52]	; (695c <nrfx_clock_init+0x3c>)
    6928:	791b      	ldrb	r3, [r3, #4]
    692a:	b9ab      	cbnz	r3, 6958 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    692c:	4b0b      	ldr	r3, [pc, #44]	; (695c <nrfx_clock_init+0x3c>)
    692e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    6930:	2201      	movs	r2, #1
    6932:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    6934:	2200      	movs	r2, #0
    6936:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6938:	4809      	ldr	r0, [pc, #36]	; (6960 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    693a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    693c:	4d09      	ldr	r5, [pc, #36]	; (6964 <nrfx_clock_init+0x44>)
    693e:	f240 1315 	movw	r3, #277	; 0x115
    6942:	462a      	mov	r2, r5
    6944:	4908      	ldr	r1, [pc, #32]	; (6968 <nrfx_clock_init+0x48>)
    6946:	4809      	ldr	r0, [pc, #36]	; (696c <nrfx_clock_init+0x4c>)
    6948:	f004 fd60 	bl	b40c <assert_print>
    694c:	f240 1115 	movw	r1, #277	; 0x115
    6950:	4628      	mov	r0, r5
    6952:	f004 fd54 	bl	b3fe <assert_post_action>
    6956:	e7e6      	b.n	6926 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6958:	4805      	ldr	r0, [pc, #20]	; (6970 <nrfx_clock_init+0x50>)
    return err_code;
    695a:	e7ee      	b.n	693a <nrfx_clock_init+0x1a>
    695c:	20000c94 	.word	0x20000c94
    6960:	0bad0000 	.word	0x0bad0000
    6964:	0000e22c 	.word	0x0000e22c
    6968:	0000e2a0 	.word	0x0000e2a0
    696c:	0000c8bc 	.word	0x0000c8bc
    6970:	0bad000c 	.word	0x0bad000c

00006974 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6974:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6976:	4b0f      	ldr	r3, [pc, #60]	; (69b4 <nrfx_clock_enable+0x40>)
    6978:	791b      	ldrb	r3, [r3, #4]
    697a:	b153      	cbz	r3, 6992 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    697c:	2000      	movs	r0, #0
    697e:	f7fc ff03 	bl	3788 <arch_irq_is_enabled>
    6982:	b1a0      	cbz	r0, 69ae <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6984:	f005 fb94 	bl	c0b0 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    698c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6990:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6992:	4c09      	ldr	r4, [pc, #36]	; (69b8 <nrfx_clock_enable+0x44>)
    6994:	f44f 7397 	mov.w	r3, #302	; 0x12e
    6998:	4622      	mov	r2, r4
    699a:	4908      	ldr	r1, [pc, #32]	; (69bc <nrfx_clock_enable+0x48>)
    699c:	4808      	ldr	r0, [pc, #32]	; (69c0 <nrfx_clock_enable+0x4c>)
    699e:	f004 fd35 	bl	b40c <assert_print>
    69a2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    69a6:	4620      	mov	r0, r4
    69a8:	f004 fd29 	bl	b3fe <assert_post_action>
    69ac:	e7e6      	b.n	697c <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    69ae:	f7fc fedd 	bl	376c <arch_irq_enable>
    69b2:	e7e7      	b.n	6984 <nrfx_clock_enable+0x10>
    69b4:	20000c94 	.word	0x20000c94
    69b8:	0000e22c 	.word	0x0000e22c
    69bc:	0000e2b0 	.word	0x0000e2b0
    69c0:	0000c8bc 	.word	0x0000c8bc

000069c4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    69c4:	b530      	push	{r4, r5, lr}
    69c6:	b083      	sub	sp, #12
    69c8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    69ca:	4b34      	ldr	r3, [pc, #208]	; (6a9c <nrfx_clock_start+0xd8>)
    69cc:	791b      	ldrb	r3, [r3, #4]
    69ce:	b183      	cbz	r3, 69f2 <nrfx_clock_start+0x2e>
    switch (domain)
    69d0:	b1ec      	cbz	r4, 6a0e <nrfx_clock_start+0x4a>
    69d2:	2c01      	cmp	r4, #1
    69d4:	d055      	beq.n	6a82 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    69d6:	4c32      	ldr	r4, [pc, #200]	; (6aa0 <nrfx_clock_start+0xdc>)
    69d8:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    69dc:	4622      	mov	r2, r4
    69de:	4931      	ldr	r1, [pc, #196]	; (6aa4 <nrfx_clock_start+0xe0>)
    69e0:	4831      	ldr	r0, [pc, #196]	; (6aa8 <nrfx_clock_start+0xe4>)
    69e2:	f004 fd13 	bl	b40c <assert_print>
    69e6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    69ea:	4620      	mov	r0, r4
    69ec:	f004 fd07 	bl	b3fe <assert_post_action>
            break;
    }
}
    69f0:	e052      	b.n	6a98 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    69f2:	4d2b      	ldr	r5, [pc, #172]	; (6aa0 <nrfx_clock_start+0xdc>)
    69f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
    69f8:	462a      	mov	r2, r5
    69fa:	492c      	ldr	r1, [pc, #176]	; (6aac <nrfx_clock_start+0xe8>)
    69fc:	482a      	ldr	r0, [pc, #168]	; (6aa8 <nrfx_clock_start+0xe4>)
    69fe:	f004 fd05 	bl	b40c <assert_print>
    6a02:	f44f 71b4 	mov.w	r1, #360	; 0x168
    6a06:	4628      	mov	r0, r5
    6a08:	f004 fcf9 	bl	b3fe <assert_post_action>
    6a0c:	e7e0      	b.n	69d0 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a12:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6a16:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6a1a:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6a1c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6a20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6a24:	d117      	bne.n	6a56 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6a26:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6a2a:	f013 0f01 	tst.w	r3, #1
    6a2e:	d116      	bne.n	6a5e <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    6a30:	f005 fb3e 	bl	c0b0 <clock_initial_lfclksrc_get>
    6a34:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a3a:	9a01      	ldr	r2, [sp, #4]
    6a3c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a40:	2200      	movs	r2, #0
    6a42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6a46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6a4a:	2202      	movs	r2, #2
    6a4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a50:	2201      	movs	r2, #1
    6a52:	609a      	str	r2, [r3, #8]
}
    6a54:	e020      	b.n	6a98 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6a56:	a801      	add	r0, sp, #4
    6a58:	f005 fb2c 	bl	c0b4 <clock_lfclksrc_tweak>
    6a5c:	e7eb      	b.n	6a36 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a62:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6a66:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6a6a:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6a6c:	a801      	add	r0, sp, #4
    6a6e:	f005 fb21 	bl	c0b4 <clock_lfclksrc_tweak>
    6a72:	2800      	cmp	r0, #0
    6a74:	d0df      	beq.n	6a36 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    6a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a7a:	2202      	movs	r2, #2
    6a7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6a80:	e00a      	b.n	6a98 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a86:	2200      	movs	r2, #0
    6a88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6a8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6a90:	2201      	movs	r2, #1
    6a92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a96:	601a      	str	r2, [r3, #0]
}
    6a98:	b003      	add	sp, #12
    6a9a:	bd30      	pop	{r4, r5, pc}
    6a9c:	20000c94 	.word	0x20000c94
    6aa0:	0000e22c 	.word	0x0000e22c
    6aa4:	0000ca80 	.word	0x0000ca80
    6aa8:	0000c8bc 	.word	0x0000c8bc
    6aac:	0000e2b0 	.word	0x0000e2b0

00006ab0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6ab0:	b538      	push	{r3, r4, r5, lr}
    6ab2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6ab4:	4b0a      	ldr	r3, [pc, #40]	; (6ae0 <nrfx_clock_stop+0x30>)
    6ab6:	791b      	ldrb	r3, [r3, #4]
    6ab8:	b11b      	cbz	r3, 6ac2 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    6aba:	4620      	mov	r0, r4
    6abc:	f7ff fea4 	bl	6808 <clock_stop>
}
    6ac0:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6ac2:	4d08      	ldr	r5, [pc, #32]	; (6ae4 <nrfx_clock_stop+0x34>)
    6ac4:	f240 13ad 	movw	r3, #429	; 0x1ad
    6ac8:	462a      	mov	r2, r5
    6aca:	4907      	ldr	r1, [pc, #28]	; (6ae8 <nrfx_clock_stop+0x38>)
    6acc:	4807      	ldr	r0, [pc, #28]	; (6aec <nrfx_clock_stop+0x3c>)
    6ace:	f004 fc9d 	bl	b40c <assert_print>
    6ad2:	f240 11ad 	movw	r1, #429	; 0x1ad
    6ad6:	4628      	mov	r0, r5
    6ad8:	f004 fc91 	bl	b3fe <assert_post_action>
    6adc:	e7ed      	b.n	6aba <nrfx_clock_stop+0xa>
    6ade:	bf00      	nop
    6ae0:	20000c94 	.word	0x20000c94
    6ae4:	0000e22c 	.word	0x0000e22c
    6ae8:	0000e2b0 	.word	0x0000e2b0
    6aec:	0000c8bc 	.word	0x0000c8bc

00006af0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6af0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6af6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6afa:	b18b      	cbz	r3, 6b20 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b00:	2200      	movs	r2, #0
    6b02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6b06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6b0a:	2201      	movs	r2, #1
    6b0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6b10:	4b15      	ldr	r3, [pc, #84]	; (6b68 <nrfx_power_clock_irq_handler+0x78>)
    6b12:	795b      	ldrb	r3, [r3, #5]
    6b14:	b923      	cbnz	r3, 6b20 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    6b16:	4b14      	ldr	r3, [pc, #80]	; (6b68 <nrfx_power_clock_irq_handler+0x78>)
    6b18:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6b1a:	681b      	ldr	r3, [r3, #0]
    6b1c:	2000      	movs	r0, #0
    6b1e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6b28:	b19b      	cbz	r3, 6b52 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b2e:	2200      	movs	r2, #0
    6b30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b38:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b3c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6b40:	f012 0f03 	tst.w	r2, #3
    6b44:	d106      	bne.n	6b54 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b4a:	2201      	movs	r2, #1
    6b4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b50:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6b52:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    6b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b58:	2202      	movs	r2, #2
    6b5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6b5e:	4b02      	ldr	r3, [pc, #8]	; (6b68 <nrfx_power_clock_irq_handler+0x78>)
    6b60:	681b      	ldr	r3, [r3, #0]
    6b62:	2001      	movs	r0, #1
    6b64:	4798      	blx	r3
}
    6b66:	e7f4      	b.n	6b52 <nrfx_power_clock_irq_handler+0x62>
    6b68:	20000c94 	.word	0x20000c94

00006b6c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6b6c:	3008      	adds	r0, #8
    6b6e:	4b03      	ldr	r3, [pc, #12]	; (6b7c <pin_in_use+0x10>)
    6b70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6b74:	f000 0001 	and.w	r0, r0, #1
    6b78:	4770      	bx	lr
    6b7a:	bf00      	nop
    6b7c:	200000f4 	.word	0x200000f4

00006b80 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6b80:	3008      	adds	r0, #8
    6b82:	4b03      	ldr	r3, [pc, #12]	; (6b90 <pin_in_use_by_te+0x10>)
    6b84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6b88:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6b8c:	4770      	bx	lr
    6b8e:	bf00      	nop
    6b90:	200000f4 	.word	0x200000f4

00006b94 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6b94:	3008      	adds	r0, #8
    6b96:	4b04      	ldr	r3, [pc, #16]	; (6ba8 <pin_has_trigger+0x14>)
    6b98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6b9c:	f010 001c 	ands.w	r0, r0, #28
    6ba0:	bf18      	it	ne
    6ba2:	2001      	movne	r0, #1
    6ba4:	4770      	bx	lr
    6ba6:	bf00      	nop
    6ba8:	200000f4 	.word	0x200000f4

00006bac <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6bac:	3008      	adds	r0, #8
    6bae:	4b03      	ldr	r3, [pc, #12]	; (6bbc <pin_is_output+0x10>)
    6bb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6bb4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	200000f4 	.word	0x200000f4

00006bc0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6bc0:	3008      	adds	r0, #8
    6bc2:	4b02      	ldr	r3, [pc, #8]	; (6bcc <pin_te_get+0xc>)
    6bc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6bc8:	0b40      	lsrs	r0, r0, #13
    6bca:	4770      	bx	lr
    6bcc:	200000f4 	.word	0x200000f4

00006bd0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bd0:	2200      	movs	r2, #0
    6bd2:	e004      	b.n	6bde <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bd8:	4283      	cmp	r3, r0
    6bda:	d00f      	beq.n	6bfc <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bdc:	3201      	adds	r2, #1
    6bde:	2a2f      	cmp	r2, #47	; 0x2f
    6be0:	d80a      	bhi.n	6bf8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6be2:	f102 0308 	add.w	r3, r2, #8
    6be6:	4906      	ldr	r1, [pc, #24]	; (6c00 <handler_in_use+0x30>)
    6be8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6bec:	f413 7f80 	tst.w	r3, #256	; 0x100
    6bf0:	d0f0      	beq.n	6bd4 <handler_in_use+0x4>
    6bf2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6bf6:	e7ef      	b.n	6bd8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    6bf8:	2000      	movs	r0, #0
    6bfa:	4770      	bx	lr
            return true;
    6bfc:	2001      	movs	r0, #1
}
    6bfe:	4770      	bx	lr
    6c00:	200000f4 	.word	0x200000f4

00006c04 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6c04:	2300      	movs	r3, #0
    6c06:	b113      	cbz	r3, 6c0e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    6c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6c0c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6c0e:	4a07      	ldr	r2, [pc, #28]	; (6c2c <find_handler+0x28>)
    6c10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6c14:	4282      	cmp	r2, r0
    6c16:	d001      	beq.n	6c1c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6c18:	3301      	adds	r3, #1
    6c1a:	e7f4      	b.n	6c06 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6c1c:	4a03      	ldr	r2, [pc, #12]	; (6c2c <find_handler+0x28>)
    6c1e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6c22:	6852      	ldr	r2, [r2, #4]
    6c24:	428a      	cmp	r2, r1
    6c26:	d1f7      	bne.n	6c18 <find_handler+0x14>
            return i;
    6c28:	4618      	mov	r0, r3
    6c2a:	4770      	bx	lr
    6c2c:	200000f4 	.word	0x200000f4

00006c30 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c30:	3008      	adds	r0, #8
    6c32:	4b06      	ldr	r3, [pc, #24]	; (6c4c <channel_handler_get+0x1c>)
    6c34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    6c38:	f410 7f80 	tst.w	r0, #256	; 0x100
    6c3c:	d004      	beq.n	6c48 <channel_handler_get+0x18>
    6c3e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    6c42:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6c46:	4770      	bx	lr
        return NULL;
    6c48:	2000      	movs	r0, #0
}
    6c4a:	4770      	bx	lr
    6c4c:	200000f4 	.word	0x200000f4

00006c50 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6c50:	b570      	push	{r4, r5, r6, lr}
    6c52:	4604      	mov	r4, r0
    6c54:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    6c56:	f7ff ffeb 	bl	6c30 <channel_handler_get>

    if (handler)
    6c5a:	b120      	cbz	r0, 6c66 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    6c5c:	6806      	ldr	r6, [r0, #0]
    6c5e:	6842      	ldr	r2, [r0, #4]
    6c60:	4629      	mov	r1, r5
    6c62:	4620      	mov	r0, r4
    6c64:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    6c66:	4b04      	ldr	r3, [pc, #16]	; (6c78 <call_handler+0x28>)
    6c68:	689b      	ldr	r3, [r3, #8]
    6c6a:	b123      	cbz	r3, 6c76 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c6c:	4a02      	ldr	r2, [pc, #8]	; (6c78 <call_handler+0x28>)
    6c6e:	68d2      	ldr	r2, [r2, #12]
    6c70:	4629      	mov	r1, r5
    6c72:	4620      	mov	r0, r4
    6c74:	4798      	blx	r3
    }
}
    6c76:	bd70      	pop	{r4, r5, r6, pc}
    6c78:	200000f4 	.word	0x200000f4

00006c7c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c7c:	f100 0208 	add.w	r2, r0, #8
    6c80:	4b16      	ldr	r3, [pc, #88]	; (6cdc <release_handler+0x60>)
    6c82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6c86:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c8a:	d026      	beq.n	6cda <release_handler+0x5e>
{
    6c8c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c8e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6c92:	4610      	mov	r0, r2
    6c94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c98:	4a10      	ldr	r2, [pc, #64]	; (6cdc <release_handler+0x60>)
    6c9a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    6c9e:	4620      	mov	r0, r4
    6ca0:	f7ff ff96 	bl	6bd0 <handler_in_use>
    6ca4:	b100      	cbz	r0, 6ca8 <release_handler+0x2c>
}
    6ca6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    6ca8:	480c      	ldr	r0, [pc, #48]	; (6cdc <release_handler+0x60>)
    6caa:	2300      	movs	r3, #0
    6cac:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6cb0:	4621      	mov	r1, r4
    6cb2:	3074      	adds	r0, #116	; 0x74
    6cb4:	f7ff fd86 	bl	67c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6cb8:	4b09      	ldr	r3, [pc, #36]	; (6ce0 <release_handler+0x64>)
    6cba:	4298      	cmp	r0, r3
    6cbc:	d0f3      	beq.n	6ca6 <release_handler+0x2a>
    6cbe:	4c09      	ldr	r4, [pc, #36]	; (6ce4 <release_handler+0x68>)
    6cc0:	f44f 7399 	mov.w	r3, #306	; 0x132
    6cc4:	4622      	mov	r2, r4
    6cc6:	4908      	ldr	r1, [pc, #32]	; (6ce8 <release_handler+0x6c>)
    6cc8:	4808      	ldr	r0, [pc, #32]	; (6cec <release_handler+0x70>)
    6cca:	f004 fb9f 	bl	b40c <assert_print>
    6cce:	f44f 7199 	mov.w	r1, #306	; 0x132
    6cd2:	4620      	mov	r0, r4
    6cd4:	f004 fb93 	bl	b3fe <assert_post_action>
    6cd8:	e7e5      	b.n	6ca6 <release_handler+0x2a>
    6cda:	4770      	bx	lr
    6cdc:	200000f4 	.word	0x200000f4
    6ce0:	0bad0000 	.word	0x0bad0000
    6ce4:	0000e2d0 	.word	0x0000e2d0
    6ce8:	0000e310 	.word	0x0000e310
    6cec:	0000c8bc 	.word	0x0000c8bc

00006cf0 <pin_handler_trigger_uninit>:
{
    6cf0:	b510      	push	{r4, lr}
    6cf2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6cf4:	f7ff ff44 	bl	6b80 <pin_in_use_by_te>
    6cf8:	b140      	cbz	r0, 6d0c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6cfa:	4620      	mov	r0, r4
    6cfc:	f7ff ff60 	bl	6bc0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6d00:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6d04:	4b06      	ldr	r3, [pc, #24]	; (6d20 <pin_handler_trigger_uninit+0x30>)
    6d06:	2200      	movs	r2, #0
    6d08:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6d0c:	4620      	mov	r0, r4
    6d0e:	f7ff ffb5 	bl	6c7c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6d12:	3408      	adds	r4, #8
    6d14:	4b03      	ldr	r3, [pc, #12]	; (6d24 <pin_handler_trigger_uninit+0x34>)
    6d16:	2200      	movs	r2, #0
    6d18:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6d1c:	bd10      	pop	{r4, pc}
    6d1e:	bf00      	nop
    6d20:	40006000 	.word	0x40006000
    6d24:	200000f4 	.word	0x200000f4

00006d28 <pin_handler_set>:
{
    6d28:	b570      	push	{r4, r5, r6, lr}
    6d2a:	b082      	sub	sp, #8
    6d2c:	4606      	mov	r6, r0
    6d2e:	460c      	mov	r4, r1
    6d30:	4615      	mov	r5, r2
    release_handler(pin);
    6d32:	f7ff ffa3 	bl	6c7c <release_handler>
    if (!handler)
    6d36:	b324      	cbz	r4, 6d82 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    6d38:	4629      	mov	r1, r5
    6d3a:	4620      	mov	r0, r4
    6d3c:	f7ff ff62 	bl	6c04 <find_handler>
    if (handler_id < 0)
    6d40:	1e03      	subs	r3, r0, #0
    6d42:	db13      	blt.n	6d6c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    6d44:	4a10      	ldr	r2, [pc, #64]	; (6d88 <pin_handler_set+0x60>)
    6d46:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6d4a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d4e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6d50:	025b      	lsls	r3, r3, #9
    6d52:	b29b      	uxth	r3, r3
    6d54:	f106 0008 	add.w	r0, r6, #8
    6d58:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    6d5c:	430b      	orrs	r3, r1
    6d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d62:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    6d66:	4809      	ldr	r0, [pc, #36]	; (6d8c <pin_handler_set+0x64>)
}
    6d68:	b002      	add	sp, #8
    6d6a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6d6c:	f10d 0107 	add.w	r1, sp, #7
    6d70:	4807      	ldr	r0, [pc, #28]	; (6d90 <pin_handler_set+0x68>)
    6d72:	f7ff fcff 	bl	6774 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6d76:	4b05      	ldr	r3, [pc, #20]	; (6d8c <pin_handler_set+0x64>)
    6d78:	4298      	cmp	r0, r3
    6d7a:	d1f5      	bne.n	6d68 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    6d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d80:	e7e0      	b.n	6d44 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    6d82:	4802      	ldr	r0, [pc, #8]	; (6d8c <pin_handler_set+0x64>)
    6d84:	e7f0      	b.n	6d68 <pin_handler_set+0x40>
    6d86:	bf00      	nop
    6d88:	200000f4 	.word	0x200000f4
    6d8c:	0bad0000 	.word	0x0bad0000
    6d90:	20000168 	.word	0x20000168

00006d94 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6d94:	b538      	push	{r3, r4, r5, lr}
    6d96:	4604      	mov	r4, r0
    while (mask)
    6d98:	e018      	b.n	6dcc <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    6d9a:	fa94 f3a4 	rbit	r3, r4
    6d9e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6da2:	2201      	movs	r2, #1
    6da4:	409a      	lsls	r2, r3
    6da6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6daa:	4a0a      	ldr	r2, [pc, #40]	; (6dd4 <gpiote_evt_handle+0x40>)
    6dac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6db0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6db4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6db8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6dbc:	f3c0 4001 	ubfx	r0, r0, #16, #2
    6dc0:	f005 f9a4 	bl	c10c <gpiote_polarity_to_trigger>
    6dc4:	4601      	mov	r1, r0
    6dc6:	4628      	mov	r0, r5
    6dc8:	f7ff ff42 	bl	6c50 <call_handler>
    while (mask)
    6dcc:	2c00      	cmp	r4, #0
    6dce:	d1e4      	bne.n	6d9a <gpiote_evt_handle+0x6>
    }
}
    6dd0:	bd38      	pop	{r3, r4, r5, pc}
    6dd2:	bf00      	nop
    6dd4:	40006000 	.word	0x40006000

00006dd8 <latch_pending_read_and_check>:
{
    6dd8:	b082      	sub	sp, #8
    6dda:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6ddc:	4b11      	ldr	r3, [pc, #68]	; (6e24 <latch_pending_read_and_check+0x4c>)
    6dde:	e893 0003 	ldmia.w	r3, {r0, r1}
    6de2:	ab02      	add	r3, sp, #8
    6de4:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    6de8:	4660      	mov	r0, ip
    6dea:	2300      	movs	r3, #0
    6dec:	e00b      	b.n	6e06 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    6dee:	aa02      	add	r2, sp, #8
    6df0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6df4:	f852 2c08 	ldr.w	r2, [r2, #-8]
    6df8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6dfc:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    6e00:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6e04:	3301      	adds	r3, #1
    6e06:	2b01      	cmp	r3, #1
    6e08:	d9f1      	bls.n	6dee <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6e0a:	2300      	movs	r3, #0
    6e0c:	2b01      	cmp	r3, #1
    6e0e:	d804      	bhi.n	6e1a <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    6e10:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    6e14:	b922      	cbnz	r2, 6e20 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6e16:	3301      	adds	r3, #1
    6e18:	e7f8      	b.n	6e0c <latch_pending_read_and_check+0x34>
    return false;
    6e1a:	2000      	movs	r0, #0
}
    6e1c:	b002      	add	sp, #8
    6e1e:	4770      	bx	lr
            return true;
    6e20:	2001      	movs	r0, #1
    6e22:	e7fb      	b.n	6e1c <latch_pending_read_and_check+0x44>
    6e24:	0000c6e0 	.word	0x0000c6e0

00006e28 <next_sense_cond_call_handler>:
{
    6e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e2c:	4604      	mov	r4, r0
    6e2e:	460d      	mov	r5, r1
    6e30:	4616      	mov	r6, r2
    if (is_level(trigger))
    6e32:	4608      	mov	r0, r1
    6e34:	f005 f96c 	bl	c110 <is_level>
    6e38:	bb60      	cbnz	r0, 6e94 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6e3a:	2e02      	cmp	r6, #2
    6e3c:	f000 80f5 	beq.w	702a <next_sense_cond_call_handler+0x202>
    6e40:	f04f 0802 	mov.w	r8, #2
    switch (port)
    6e44:	0963      	lsrs	r3, r4, #5
    6e46:	f000 80f3 	beq.w	7030 <next_sense_cond_call_handler+0x208>
    6e4a:	2b01      	cmp	r3, #1
    6e4c:	f040 80f3 	bne.w	7036 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    6e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e54:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e58:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e5a:	f013 0f01 	tst.w	r3, #1
    6e5e:	f000 80ec 	beq.w	703a <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    6e62:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e66:	0963      	lsrs	r3, r4, #5
    6e68:	f000 80f5 	beq.w	7056 <next_sense_cond_call_handler+0x22e>
    6e6c:	2b01      	cmp	r3, #1
    6e6e:	f000 80f5 	beq.w	705c <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    6e72:	f8df 9224 	ldr.w	r9, [pc, #548]	; 7098 <next_sense_cond_call_handler+0x270>
    6e76:	f240 232e 	movw	r3, #558	; 0x22e
    6e7a:	464a      	mov	r2, r9
    6e7c:	4987      	ldr	r1, [pc, #540]	; (709c <next_sense_cond_call_handler+0x274>)
    6e7e:	4888      	ldr	r0, [pc, #544]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6e80:	f004 fac4 	bl	b40c <assert_print>
    6e84:	f240 212e 	movw	r1, #558	; 0x22e
    6e88:	4648      	mov	r0, r9
    6e8a:	f004 fab8 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6e8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6e92:	e0e4      	b.n	705e <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    6e94:	4629      	mov	r1, r5
    6e96:	4620      	mov	r0, r4
    6e98:	f7ff feda 	bl	6c50 <call_handler>
    switch (port)
    6e9c:	0963      	lsrs	r3, r4, #5
    6e9e:	d01f      	beq.n	6ee0 <next_sense_cond_call_handler+0xb8>
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d120      	bne.n	6ee6 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    6ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ea8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6eac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eae:	f013 0f01 	tst.w	r3, #1
    6eb2:	d01a      	beq.n	6eea <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    6eb4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6eb8:	0963      	lsrs	r3, r4, #5
    6eba:	d024      	beq.n	6f06 <next_sense_cond_call_handler+0xde>
    6ebc:	2b01      	cmp	r3, #1
    6ebe:	d025      	beq.n	6f0c <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    6ec0:	4f75      	ldr	r7, [pc, #468]	; (7098 <next_sense_cond_call_handler+0x270>)
    6ec2:	f240 232e 	movw	r3, #558	; 0x22e
    6ec6:	463a      	mov	r2, r7
    6ec8:	4974      	ldr	r1, [pc, #464]	; (709c <next_sense_cond_call_handler+0x274>)
    6eca:	4875      	ldr	r0, [pc, #468]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6ecc:	f004 fa9e 	bl	b40c <assert_print>
    6ed0:	f240 212e 	movw	r1, #558	; 0x22e
    6ed4:	4638      	mov	r0, r7
    6ed6:	f004 fa92 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6eda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6ede:	e016      	b.n	6f0e <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    6ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ee4:	e7e0      	b.n	6ea8 <next_sense_cond_call_handler+0x80>
    switch (port)
    6ee6:	2300      	movs	r3, #0
    6ee8:	e7de      	b.n	6ea8 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eea:	4d6b      	ldr	r5, [pc, #428]	; (7098 <next_sense_cond_call_handler+0x270>)
    6eec:	f240 2329 	movw	r3, #553	; 0x229
    6ef0:	462a      	mov	r2, r5
    6ef2:	496c      	ldr	r1, [pc, #432]	; (70a4 <next_sense_cond_call_handler+0x27c>)
    6ef4:	486a      	ldr	r0, [pc, #424]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6ef6:	f004 fa89 	bl	b40c <assert_print>
    6efa:	f240 2129 	movw	r1, #553	; 0x229
    6efe:	4628      	mov	r0, r5
    6f00:	f004 fa7d 	bl	b3fe <assert_post_action>
    6f04:	e7d6      	b.n	6eb4 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    6f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6f0a:	e000      	b.n	6f0e <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f0c:	4b66      	ldr	r3, [pc, #408]	; (70a8 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6f0e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6f12:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6f16:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6f1a:	429e      	cmp	r6, r3
    6f1c:	f040 80af 	bne.w	707e <next_sense_cond_call_handler+0x256>
    switch (port)
    6f20:	0963      	lsrs	r3, r4, #5
    6f22:	d01f      	beq.n	6f64 <next_sense_cond_call_handler+0x13c>
    6f24:	2b01      	cmp	r3, #1
    6f26:	d120      	bne.n	6f6a <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    6f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6f2c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f32:	f013 0f01 	tst.w	r3, #1
    6f36:	d01a      	beq.n	6f6e <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    6f38:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f3c:	0963      	lsrs	r3, r4, #5
    6f3e:	d024      	beq.n	6f8a <next_sense_cond_call_handler+0x162>
    6f40:	2b01      	cmp	r3, #1
    6f42:	d025      	beq.n	6f90 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    6f44:	4f54      	ldr	r7, [pc, #336]	; (7098 <next_sense_cond_call_handler+0x270>)
    6f46:	f240 232e 	movw	r3, #558	; 0x22e
    6f4a:	463a      	mov	r2, r7
    6f4c:	4953      	ldr	r1, [pc, #332]	; (709c <next_sense_cond_call_handler+0x274>)
    6f4e:	4854      	ldr	r0, [pc, #336]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6f50:	f004 fa5c 	bl	b40c <assert_print>
    6f54:	f240 212e 	movw	r1, #558	; 0x22e
    6f58:	4638      	mov	r0, r7
    6f5a:	f004 fa50 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6f5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6f62:	e016      	b.n	6f92 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    6f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f68:	e7e0      	b.n	6f2c <next_sense_cond_call_handler+0x104>
    switch (port)
    6f6a:	2300      	movs	r3, #0
    6f6c:	e7de      	b.n	6f2c <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f6e:	4d4a      	ldr	r5, [pc, #296]	; (7098 <next_sense_cond_call_handler+0x270>)
    6f70:	f240 2329 	movw	r3, #553	; 0x229
    6f74:	462a      	mov	r2, r5
    6f76:	494b      	ldr	r1, [pc, #300]	; (70a4 <next_sense_cond_call_handler+0x27c>)
    6f78:	4849      	ldr	r0, [pc, #292]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6f7a:	f004 fa47 	bl	b40c <assert_print>
    6f7e:	f240 2129 	movw	r1, #553	; 0x229
    6f82:	4628      	mov	r0, r5
    6f84:	f004 fa3b 	bl	b3fe <assert_post_action>
    6f88:	e7d6      	b.n	6f38 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    6f8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6f8e:	e000      	b.n	6f92 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f90:	4945      	ldr	r1, [pc, #276]	; (70a8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6f92:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6f96:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6f9a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    6fa2:	0963      	lsrs	r3, r4, #5
    6fa4:	d01f      	beq.n	6fe6 <next_sense_cond_call_handler+0x1be>
    6fa6:	2b01      	cmp	r3, #1
    6fa8:	d120      	bne.n	6fec <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    6faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6fae:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6fb2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6fb4:	f013 0f01 	tst.w	r3, #1
    6fb8:	d01a      	beq.n	6ff0 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    6fba:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6fbe:	0964      	lsrs	r4, r4, #5
    6fc0:	d024      	beq.n	700c <next_sense_cond_call_handler+0x1e4>
    6fc2:	2c01      	cmp	r4, #1
    6fc4:	d025      	beq.n	7012 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    6fc6:	4c34      	ldr	r4, [pc, #208]	; (7098 <next_sense_cond_call_handler+0x270>)
    6fc8:	f240 232e 	movw	r3, #558	; 0x22e
    6fcc:	4622      	mov	r2, r4
    6fce:	4933      	ldr	r1, [pc, #204]	; (709c <next_sense_cond_call_handler+0x274>)
    6fd0:	4833      	ldr	r0, [pc, #204]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6fd2:	f004 fa1b 	bl	b40c <assert_print>
    6fd6:	f240 212e 	movw	r1, #558	; 0x22e
    6fda:	4620      	mov	r0, r4
    6fdc:	f004 fa0f 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    6fe0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6fe4:	e016      	b.n	7014 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    6fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fea:	e7e0      	b.n	6fae <next_sense_cond_call_handler+0x186>
    switch (port)
    6fec:	2300      	movs	r3, #0
    6fee:	e7de      	b.n	6fae <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ff0:	4d29      	ldr	r5, [pc, #164]	; (7098 <next_sense_cond_call_handler+0x270>)
    6ff2:	f240 2329 	movw	r3, #553	; 0x229
    6ff6:	462a      	mov	r2, r5
    6ff8:	492a      	ldr	r1, [pc, #168]	; (70a4 <next_sense_cond_call_handler+0x27c>)
    6ffa:	4829      	ldr	r0, [pc, #164]	; (70a0 <next_sense_cond_call_handler+0x278>)
    6ffc:	f004 fa06 	bl	b40c <assert_print>
    7000:	f240 2129 	movw	r1, #553	; 0x229
    7004:	4628      	mov	r0, r5
    7006:	f004 f9fa 	bl	b3fe <assert_post_action>
    700a:	e7d6      	b.n	6fba <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    700c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7010:	e000      	b.n	7014 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7012:	4925      	ldr	r1, [pc, #148]	; (70a8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7014:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7018:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    701c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7020:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7024:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    7028:	e029      	b.n	707e <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    702a:	f04f 0803 	mov.w	r8, #3
    702e:	e709      	b.n	6e44 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    7030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7034:	e70e      	b.n	6e54 <next_sense_cond_call_handler+0x2c>
    switch (port)
    7036:	2300      	movs	r3, #0
    7038:	e70c      	b.n	6e54 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    703a:	4f17      	ldr	r7, [pc, #92]	; (7098 <next_sense_cond_call_handler+0x270>)
    703c:	f240 2329 	movw	r3, #553	; 0x229
    7040:	463a      	mov	r2, r7
    7042:	4918      	ldr	r1, [pc, #96]	; (70a4 <next_sense_cond_call_handler+0x27c>)
    7044:	4816      	ldr	r0, [pc, #88]	; (70a0 <next_sense_cond_call_handler+0x278>)
    7046:	f004 f9e1 	bl	b40c <assert_print>
    704a:	f240 2129 	movw	r1, #553	; 0x229
    704e:	4638      	mov	r0, r7
    7050:	f004 f9d5 	bl	b3fe <assert_post_action>
    7054:	e705      	b.n	6e62 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    7056:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    705a:	e000      	b.n	705e <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    705c:	4912      	ldr	r1, [pc, #72]	; (70a8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    705e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    7062:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7066:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    706a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    706e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7072:	2d03      	cmp	r5, #3
    7074:	d007      	beq.n	7086 <next_sense_cond_call_handler+0x25e>
    7076:	2e02      	cmp	r6, #2
    7078:	d003      	beq.n	7082 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    707a:	2e03      	cmp	r6, #3
    707c:	d008      	beq.n	7090 <next_sense_cond_call_handler+0x268>
}
    707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7082:	2d01      	cmp	r5, #1
    7084:	d1f9      	bne.n	707a <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    7086:	4629      	mov	r1, r5
    7088:	4620      	mov	r0, r4
    708a:	f7ff fde1 	bl	6c50 <call_handler>
}
    708e:	e7f6      	b.n	707e <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7090:	2d02      	cmp	r5, #2
    7092:	d1f4      	bne.n	707e <next_sense_cond_call_handler+0x256>
    7094:	e7f7      	b.n	7086 <next_sense_cond_call_handler+0x25e>
    7096:	bf00      	nop
    7098:	0000e0ac 	.word	0x0000e0ac
    709c:	0000ca80 	.word	0x0000ca80
    70a0:	0000c8bc 	.word	0x0000c8bc
    70a4:	0000e0e0 	.word	0x0000e0e0
    70a8:	50000300 	.word	0x50000300

000070ac <port_event_handle>:
{
    70ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70b0:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    70b2:	4a65      	ldr	r2, [pc, #404]	; (7248 <port_event_handle+0x19c>)
    70b4:	466b      	mov	r3, sp
    70b6:	e892 0003 	ldmia.w	r2, {r0, r1}
    70ba:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    70be:	2300      	movs	r3, #0
    70c0:	a802      	add	r0, sp, #8
    70c2:	e00b      	b.n	70dc <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    70c4:	aa04      	add	r2, sp, #16
    70c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    70ca:	f852 2c10 	ldr.w	r2, [r2, #-16]
    70ce:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    70d2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    70d6:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    70da:	3301      	adds	r3, #1
    70dc:	2b01      	cmp	r3, #1
    70de:	d9f1      	bls.n	70c4 <port_event_handle+0x18>
    70e0:	e0ad      	b.n	723e <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    70e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70e6:	e07f      	b.n	71e8 <port_event_handle+0x13c>
    switch (port)
    70e8:	2300      	movs	r3, #0
    70ea:	e07d      	b.n	71e8 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70ec:	4f57      	ldr	r7, [pc, #348]	; (724c <port_event_handle+0x1a0>)
    70ee:	f240 2329 	movw	r3, #553	; 0x229
    70f2:	463a      	mov	r2, r7
    70f4:	4956      	ldr	r1, [pc, #344]	; (7250 <port_event_handle+0x1a4>)
    70f6:	4857      	ldr	r0, [pc, #348]	; (7254 <port_event_handle+0x1a8>)
    70f8:	f004 f988 	bl	b40c <assert_print>
    70fc:	f240 2129 	movw	r1, #553	; 0x229
    7100:	4638      	mov	r0, r7
    7102:	f004 f97c 	bl	b3fe <assert_post_action>
    7106:	e076      	b.n	71f6 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    7108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    710c:	e000      	b.n	7110 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    710e:	4b52      	ldr	r3, [pc, #328]	; (7258 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7110:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7114:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    7118:	f3c2 4201 	ubfx	r2, r2, #16, #2
    711c:	4631      	mov	r1, r6
    711e:	4620      	mov	r0, r4
    7120:	f7ff fe82 	bl	6e28 <next_sense_cond_call_handler>
    switch (port)
    7124:	0963      	lsrs	r3, r4, #5
    7126:	d01f      	beq.n	7168 <port_event_handle+0xbc>
    7128:	2b01      	cmp	r3, #1
    712a:	d120      	bne.n	716e <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    712c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7130:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7134:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7136:	f013 0f01 	tst.w	r3, #1
    713a:	d01a      	beq.n	7172 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    713c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7140:	0964      	lsrs	r4, r4, #5
    7142:	d024      	beq.n	718e <port_event_handle+0xe2>
    7144:	2c01      	cmp	r4, #1
    7146:	d025      	beq.n	7194 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    7148:	4c40      	ldr	r4, [pc, #256]	; (724c <port_event_handle+0x1a0>)
    714a:	f240 232e 	movw	r3, #558	; 0x22e
    714e:	4622      	mov	r2, r4
    7150:	4942      	ldr	r1, [pc, #264]	; (725c <port_event_handle+0x1b0>)
    7152:	4840      	ldr	r0, [pc, #256]	; (7254 <port_event_handle+0x1a8>)
    7154:	f004 f95a 	bl	b40c <assert_print>
    7158:	f240 212e 	movw	r1, #558	; 0x22e
    715c:	4620      	mov	r0, r4
    715e:	f004 f94e 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    7162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7166:	e016      	b.n	7196 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    7168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    716c:	e7e0      	b.n	7130 <port_event_handle+0x84>
    switch (port)
    716e:	2300      	movs	r3, #0
    7170:	e7de      	b.n	7130 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7172:	4e36      	ldr	r6, [pc, #216]	; (724c <port_event_handle+0x1a0>)
    7174:	f240 2329 	movw	r3, #553	; 0x229
    7178:	4632      	mov	r2, r6
    717a:	4935      	ldr	r1, [pc, #212]	; (7250 <port_event_handle+0x1a4>)
    717c:	4835      	ldr	r0, [pc, #212]	; (7254 <port_event_handle+0x1a8>)
    717e:	f004 f945 	bl	b40c <assert_print>
    7182:	f240 2129 	movw	r1, #553	; 0x229
    7186:	4630      	mov	r0, r6
    7188:	f004 f939 	bl	b3fe <assert_post_action>
    718c:	e7d6      	b.n	713c <port_event_handle+0x90>
        case 0: return NRF_P0;
    718e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7192:	e000      	b.n	7196 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7194:	4a30      	ldr	r2, [pc, #192]	; (7258 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    7196:	2301      	movs	r3, #1
    7198:	40b3      	lsls	r3, r6
    719a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    719e:	ab04      	add	r3, sp, #16
    71a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    71a4:	f853 4c08 	ldr.w	r4, [r3, #-8]
    71a8:	2c00      	cmp	r4, #0
    71aa:	d03b      	beq.n	7224 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    71ac:	fa94 f4a4 	rbit	r4, r4
    71b0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    71b4:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    71b8:	f104 0208 	add.w	r2, r4, #8
    71bc:	4b28      	ldr	r3, [pc, #160]	; (7260 <port_event_handle+0x1b4>)
    71be:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    71c2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    71c6:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    71c8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    71cc:	a802      	add	r0, sp, #8
    71ce:	2301      	movs	r3, #1
    71d0:	fa03 f202 	lsl.w	r2, r3, r2
    71d4:	5c43      	ldrb	r3, [r0, r1]
    71d6:	ea23 0302 	bic.w	r3, r3, r2
    71da:	5443      	strb	r3, [r0, r1]
    switch (port)
    71dc:	0963      	lsrs	r3, r4, #5
    71de:	d080      	beq.n	70e2 <port_event_handle+0x36>
    71e0:	2b01      	cmp	r3, #1
    71e2:	d181      	bne.n	70e8 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    71e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    71e8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    71ec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71ee:	f013 0f01 	tst.w	r3, #1
    71f2:	f43f af7b 	beq.w	70ec <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    71f6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71fa:	0963      	lsrs	r3, r4, #5
    71fc:	d084      	beq.n	7108 <port_event_handle+0x5c>
    71fe:	2b01      	cmp	r3, #1
    7200:	d085      	beq.n	710e <port_event_handle+0x62>
            NRFX_ASSERT(0);
    7202:	f8df 8048 	ldr.w	r8, [pc, #72]	; 724c <port_event_handle+0x1a0>
    7206:	f240 232e 	movw	r3, #558	; 0x22e
    720a:	4642      	mov	r2, r8
    720c:	4913      	ldr	r1, [pc, #76]	; (725c <port_event_handle+0x1b0>)
    720e:	4811      	ldr	r0, [pc, #68]	; (7254 <port_event_handle+0x1a8>)
    7210:	f004 f8fc 	bl	b40c <assert_print>
    7214:	f240 212e 	movw	r1, #558	; 0x22e
    7218:	4640      	mov	r0, r8
    721a:	f004 f8f0 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    721e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7222:	e775      	b.n	7110 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7224:	3501      	adds	r5, #1
    7226:	2d01      	cmp	r5, #1
    7228:	d9b9      	bls.n	719e <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    722a:	4b0e      	ldr	r3, [pc, #56]	; (7264 <port_event_handle+0x1b8>)
    722c:	2200      	movs	r2, #0
    722e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7232:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    7236:	a802      	add	r0, sp, #8
    7238:	f7ff fdce 	bl	6dd8 <latch_pending_read_and_check>
    723c:	b108      	cbz	r0, 7242 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    723e:	2500      	movs	r5, #0
    7240:	e7f1      	b.n	7226 <port_event_handle+0x17a>
}
    7242:	b004      	add	sp, #16
    7244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7248:	0000c6e0 	.word	0x0000c6e0
    724c:	0000e0ac 	.word	0x0000e0ac
    7250:	0000e0e0 	.word	0x0000e0e0
    7254:	0000c8bc 	.word	0x0000c8bc
    7258:	50000300 	.word	0x50000300
    725c:	0000ca80 	.word	0x0000ca80
    7260:	200000f4 	.word	0x200000f4
    7264:	40006000 	.word	0x40006000

00007268 <nrfx_gpiote_input_configure>:
{
    7268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    726c:	4604      	mov	r4, r0
    726e:	4615      	mov	r5, r2
    7270:	461e      	mov	r6, r3
    if (p_input_config)
    7272:	2900      	cmp	r1, #0
    7274:	d064      	beq.n	7340 <nrfx_gpiote_input_configure+0xd8>
    7276:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    7278:	f004 ff32 	bl	c0e0 <pin_is_task_output>
    727c:	2800      	cmp	r0, #0
    727e:	f040 80cd 	bne.w	741c <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    7282:	0963      	lsrs	r3, r4, #5
    7284:	d020      	beq.n	72c8 <nrfx_gpiote_input_configure+0x60>
    7286:	2b01      	cmp	r3, #1
    7288:	d121      	bne.n	72ce <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    728a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    728e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7292:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7294:	f013 0f01 	tst.w	r3, #1
    7298:	d01b      	beq.n	72d2 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    729a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    729e:	0963      	lsrs	r3, r4, #5
    72a0:	d025      	beq.n	72ee <nrfx_gpiote_input_configure+0x86>
    72a2:	2b01      	cmp	r3, #1
    72a4:	d026      	beq.n	72f4 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    72a6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 742c <nrfx_gpiote_input_configure+0x1c4>
    72aa:	f240 232e 	movw	r3, #558	; 0x22e
    72ae:	464a      	mov	r2, r9
    72b0:	495f      	ldr	r1, [pc, #380]	; (7430 <nrfx_gpiote_input_configure+0x1c8>)
    72b2:	4860      	ldr	r0, [pc, #384]	; (7434 <nrfx_gpiote_input_configure+0x1cc>)
    72b4:	f004 f8aa 	bl	b40c <assert_print>
    72b8:	f240 212e 	movw	r1, #558	; 0x22e
    72bc:	4648      	mov	r0, r9
    72be:	f004 f89e 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    72c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    72c6:	e016      	b.n	72f6 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    72c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72cc:	e7df      	b.n	728e <nrfx_gpiote_input_configure+0x26>
    switch (port)
    72ce:	2300      	movs	r3, #0
    72d0:	e7dd      	b.n	728e <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    72d2:	4f56      	ldr	r7, [pc, #344]	; (742c <nrfx_gpiote_input_configure+0x1c4>)
    72d4:	f240 2329 	movw	r3, #553	; 0x229
    72d8:	463a      	mov	r2, r7
    72da:	4957      	ldr	r1, [pc, #348]	; (7438 <nrfx_gpiote_input_configure+0x1d0>)
    72dc:	4855      	ldr	r0, [pc, #340]	; (7434 <nrfx_gpiote_input_configure+0x1cc>)
    72de:	f004 f895 	bl	b40c <assert_print>
    72e2:	f240 2129 	movw	r1, #553	; 0x229
    72e6:	4638      	mov	r0, r7
    72e8:	f004 f889 	bl	b3fe <assert_post_action>
    72ec:	e7d5      	b.n	729a <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    72ee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    72f2:	e000      	b.n	72f6 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    72f4:	4951      	ldr	r1, [pc, #324]	; (743c <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    72f6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    72fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    72fe:	f1b8 0f00 	cmp.w	r8, #0
    7302:	d03f      	beq.n	7384 <nrfx_gpiote_input_configure+0x11c>
    7304:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7306:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    730a:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    730e:	f1b8 0f00 	cmp.w	r8, #0
    7312:	d039      	beq.n	7388 <nrfx_gpiote_input_configure+0x120>
    7314:	f898 2000 	ldrb.w	r2, [r8]
    7318:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    731a:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    731c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7320:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7324:	4a46      	ldr	r2, [pc, #280]	; (7440 <nrfx_gpiote_input_configure+0x1d8>)
    7326:	f104 0108 	add.w	r1, r4, #8
    732a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    732e:	f023 0302 	bic.w	r3, r3, #2
    7332:	b29b      	uxth	r3, r3
    7334:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7338:	f043 0301 	orr.w	r3, r3, #1
    733c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    7340:	b1bd      	cbz	r5, 7372 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7342:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7344:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    7348:	4620      	mov	r0, r4
    734a:	f7ff fc2f 	bl	6bac <pin_is_output>
    734e:	b1e8      	cbz	r0, 738c <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    7350:	f1b8 0f00 	cmp.w	r8, #0
    7354:	d164      	bne.n	7420 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7356:	4a3a      	ldr	r2, [pc, #232]	; (7440 <nrfx_gpiote_input_configure+0x1d8>)
    7358:	f104 0108 	add.w	r1, r4, #8
    735c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7360:	f023 031c 	bic.w	r3, r3, #28
    7364:	b29b      	uxth	r3, r3
    7366:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    736a:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    736e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    7372:	2e00      	cmp	r6, #0
    7374:	d058      	beq.n	7428 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7376:	6872      	ldr	r2, [r6, #4]
    7378:	6831      	ldr	r1, [r6, #0]
    737a:	4620      	mov	r0, r4
    737c:	f7ff fcd4 	bl	6d28 <pin_handler_set>
}
    7380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7384:	2200      	movs	r2, #0
    7386:	e7be      	b.n	7306 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7388:	2200      	movs	r2, #0
    738a:	e7c6      	b.n	731a <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    738c:	4a2c      	ldr	r2, [pc, #176]	; (7440 <nrfx_gpiote_input_configure+0x1d8>)
    738e:	f104 0108 	add.w	r1, r4, #8
    7392:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7396:	f023 0320 	bic.w	r3, r3, #32
    739a:	04db      	lsls	r3, r3, #19
    739c:	0cdb      	lsrs	r3, r3, #19
    739e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    73a2:	f1b8 0f00 	cmp.w	r8, #0
    73a6:	d0d6      	beq.n	7356 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    73a8:	2f03      	cmp	r7, #3
    73aa:	d83b      	bhi.n	7424 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    73ac:	686b      	ldr	r3, [r5, #4]
    73ae:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    73b0:	b937      	cbnz	r7, 73c0 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    73b2:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    73b6:	4b23      	ldr	r3, [pc, #140]	; (7444 <nrfx_gpiote_input_configure+0x1dc>)
    73b8:	2200      	movs	r2, #0
    73ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    73be:	e7ca      	b.n	7356 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    73c0:	4638      	mov	r0, r7
    73c2:	f004 fea4 	bl	c10e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    73c6:	4b1f      	ldr	r3, [pc, #124]	; (7444 <nrfx_gpiote_input_configure+0x1dc>)
    73c8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    73cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    73d0:	f021 0103 	bic.w	r1, r1, #3
    73d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    73d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    73dc:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    73e0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    73e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    73e8:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    73ec:	0221      	lsls	r1, r4, #8
    73ee:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    73f2:	0400      	lsls	r0, r0, #16
    73f4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    73f8:	4301      	orrs	r1, r0
    73fa:	ea4c 0101 	orr.w	r1, ip, r1
    73fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7402:	036b      	lsls	r3, r5, #13
    7404:	b29b      	uxth	r3, r3
    7406:	4a0e      	ldr	r2, [pc, #56]	; (7440 <nrfx_gpiote_input_configure+0x1d8>)
    7408:	f104 0108 	add.w	r1, r4, #8
    740c:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    7410:	4303      	orrs	r3, r0
    7412:	f043 0320 	orr.w	r3, r3, #32
    7416:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    741a:	e79c      	b.n	7356 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    741c:	480a      	ldr	r0, [pc, #40]	; (7448 <nrfx_gpiote_input_configure+0x1e0>)
    741e:	e7af      	b.n	7380 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    7420:	4809      	ldr	r0, [pc, #36]	; (7448 <nrfx_gpiote_input_configure+0x1e0>)
    7422:	e7ad      	b.n	7380 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    7424:	4808      	ldr	r0, [pc, #32]	; (7448 <nrfx_gpiote_input_configure+0x1e0>)
    7426:	e7ab      	b.n	7380 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    7428:	4808      	ldr	r0, [pc, #32]	; (744c <nrfx_gpiote_input_configure+0x1e4>)
    742a:	e7a9      	b.n	7380 <nrfx_gpiote_input_configure+0x118>
    742c:	0000e0ac 	.word	0x0000e0ac
    7430:	0000ca80 	.word	0x0000ca80
    7434:	0000c8bc 	.word	0x0000c8bc
    7438:	0000e0e0 	.word	0x0000e0e0
    743c:	50000300 	.word	0x50000300
    7440:	200000f4 	.word	0x200000f4
    7444:	40006000 	.word	0x40006000
    7448:	0bad0004 	.word	0x0bad0004
    744c:	0bad0000 	.word	0x0bad0000

00007450 <nrfx_gpiote_output_configure>:
{
    7450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7454:	4604      	mov	r4, r0
    7456:	4615      	mov	r5, r2
    if (p_config)
    7458:	2900      	cmp	r1, #0
    745a:	f000 8086 	beq.w	756a <nrfx_gpiote_output_configure+0x11a>
    745e:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7460:	f004 fe4d 	bl	c0fe <pin_is_input>
    7464:	b128      	cbz	r0, 7472 <nrfx_gpiote_output_configure+0x22>
    7466:	4620      	mov	r0, r4
    7468:	f7ff fb8a 	bl	6b80 <pin_in_use_by_te>
    746c:	2800      	cmp	r0, #0
    746e:	f040 80ce 	bne.w	760e <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7472:	4620      	mov	r0, r4
    7474:	f7ff fb8e 	bl	6b94 <pin_has_trigger>
    7478:	b118      	cbz	r0, 7482 <nrfx_gpiote_output_configure+0x32>
    747a:	787b      	ldrb	r3, [r7, #1]
    747c:	2b01      	cmp	r3, #1
    747e:	f000 80c8 	beq.w	7612 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7482:	f107 0901 	add.w	r9, r7, #1
    7486:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    748a:	0963      	lsrs	r3, r4, #5
    748c:	d020      	beq.n	74d0 <nrfx_gpiote_output_configure+0x80>
    748e:	2b01      	cmp	r3, #1
    7490:	d121      	bne.n	74d6 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    7492:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7496:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    749a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    749c:	f013 0f01 	tst.w	r3, #1
    74a0:	d01b      	beq.n	74da <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    74a2:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74a6:	0963      	lsrs	r3, r4, #5
    74a8:	d025      	beq.n	74f6 <nrfx_gpiote_output_configure+0xa6>
    74aa:	2b01      	cmp	r3, #1
    74ac:	d026      	beq.n	74fc <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    74ae:	f8df a170 	ldr.w	sl, [pc, #368]	; 7620 <nrfx_gpiote_output_configure+0x1d0>
    74b2:	f240 232e 	movw	r3, #558	; 0x22e
    74b6:	4652      	mov	r2, sl
    74b8:	495a      	ldr	r1, [pc, #360]	; (7624 <nrfx_gpiote_output_configure+0x1d4>)
    74ba:	485b      	ldr	r0, [pc, #364]	; (7628 <nrfx_gpiote_output_configure+0x1d8>)
    74bc:	f003 ffa6 	bl	b40c <assert_print>
    74c0:	f240 212e 	movw	r1, #558	; 0x22e
    74c4:	4650      	mov	r0, sl
    74c6:	f003 ff9a 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    74ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    74ce:	e016      	b.n	74fe <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    74d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74d4:	e7df      	b.n	7496 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    74d6:	2300      	movs	r3, #0
    74d8:	e7dd      	b.n	7496 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    74da:	4e51      	ldr	r6, [pc, #324]	; (7620 <nrfx_gpiote_output_configure+0x1d0>)
    74dc:	f240 2329 	movw	r3, #553	; 0x229
    74e0:	4632      	mov	r2, r6
    74e2:	4952      	ldr	r1, [pc, #328]	; (762c <nrfx_gpiote_output_configure+0x1dc>)
    74e4:	4850      	ldr	r0, [pc, #320]	; (7628 <nrfx_gpiote_output_configure+0x1d8>)
    74e6:	f003 ff91 	bl	b40c <assert_print>
    74ea:	f240 2129 	movw	r1, #553	; 0x229
    74ee:	4630      	mov	r0, r6
    74f0:	f003 ff85 	bl	b3fe <assert_post_action>
    74f4:	e7d5      	b.n	74a2 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    74f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    74fa:	e000      	b.n	74fe <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74fc:	4a4c      	ldr	r2, [pc, #304]	; (7630 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    74fe:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    7502:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7506:	f1b9 0f00 	cmp.w	r9, #0
    750a:	d04b      	beq.n	75a4 <nrfx_gpiote_output_configure+0x154>
    750c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    750e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7512:	f1b8 0f00 	cmp.w	r8, #0
    7516:	d047      	beq.n	75a8 <nrfx_gpiote_output_configure+0x158>
    7518:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    751a:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    751c:	2f00      	cmp	r7, #0
    751e:	d045      	beq.n	75ac <nrfx_gpiote_output_configure+0x15c>
    7520:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7524:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    7526:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    752a:	f1b9 0f00 	cmp.w	r9, #0
    752e:	d03f      	beq.n	75b0 <nrfx_gpiote_output_configure+0x160>
    7530:	787b      	ldrb	r3, [r7, #1]
    7532:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7534:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7538:	f1b8 0f00 	cmp.w	r8, #0
    753c:	d03a      	beq.n	75b4 <nrfx_gpiote_output_configure+0x164>
    753e:	78b8      	ldrb	r0, [r7, #2]
    7540:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7542:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7544:	2f00      	cmp	r7, #0
    7546:	d037      	beq.n	75b8 <nrfx_gpiote_output_configure+0x168>
    7548:	7838      	ldrb	r0, [r7, #0]
    754a:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    754c:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    754e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    7550:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    7554:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7558:	4a36      	ldr	r2, [pc, #216]	; (7634 <nrfx_gpiote_output_configure+0x1e4>)
    755a:	f104 0108 	add.w	r1, r4, #8
    755e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7562:	f043 0303 	orr.w	r3, r3, #3
    7566:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    756a:	2d00      	cmp	r5, #0
    756c:	d053      	beq.n	7616 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    756e:	4620      	mov	r0, r4
    7570:	f004 fdc5 	bl	c0fe <pin_is_input>
    7574:	2800      	cmp	r0, #0
    7576:	d150      	bne.n	761a <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    7578:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    757a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    757e:	4a2e      	ldr	r2, [pc, #184]	; (7638 <nrfx_gpiote_output_configure+0x1e8>)
    7580:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7584:	492b      	ldr	r1, [pc, #172]	; (7634 <nrfx_gpiote_output_configure+0x1e4>)
    7586:	f104 0008 	add.w	r0, r4, #8
    758a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    758e:	f022 0220 	bic.w	r2, r2, #32
    7592:	04d2      	lsls	r2, r2, #19
    7594:	0cd2      	lsrs	r2, r2, #19
    7596:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    759a:	786a      	ldrb	r2, [r5, #1]
    759c:	b972      	cbnz	r2, 75bc <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    759e:	4827      	ldr	r0, [pc, #156]	; (763c <nrfx_gpiote_output_configure+0x1ec>)
}
    75a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    75a4:	2300      	movs	r3, #0
    75a6:	e7b2      	b.n	750e <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75a8:	2000      	movs	r0, #0
    75aa:	e7b6      	b.n	751a <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    75ac:	2000      	movs	r0, #0
    75ae:	e7b9      	b.n	7524 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    75b0:	2300      	movs	r3, #0
    75b2:	e7bf      	b.n	7534 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    75b4:	2000      	movs	r0, #0
    75b6:	e7c4      	b.n	7542 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    75b8:	2000      	movs	r0, #0
    75ba:	e7c7      	b.n	754c <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    75bc:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    75be:	481e      	ldr	r0, [pc, #120]	; (7638 <nrfx_gpiote_output_configure+0x1e8>)
    75c0:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    75c4:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    75c8:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    75cc:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    75d0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    75d4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    75d8:	0221      	lsls	r1, r4, #8
    75da:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    75de:	0412      	lsls	r2, r2, #16
    75e0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    75e4:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    75e6:	0539      	lsls	r1, r7, #20
    75e8:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    75ec:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    75ee:	4332      	orrs	r2, r6
    75f0:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    75f4:	035b      	lsls	r3, r3, #13
    75f6:	b29b      	uxth	r3, r3
    75f8:	4a0e      	ldr	r2, [pc, #56]	; (7634 <nrfx_gpiote_output_configure+0x1e4>)
    75fa:	3408      	adds	r4, #8
    75fc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    7600:	430b      	orrs	r3, r1
    7602:	f043 0320 	orr.w	r3, r3, #32
    7606:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    760a:	480c      	ldr	r0, [pc, #48]	; (763c <nrfx_gpiote_output_configure+0x1ec>)
    760c:	e7c8      	b.n	75a0 <nrfx_gpiote_output_configure+0x150>
    760e:	480c      	ldr	r0, [pc, #48]	; (7640 <nrfx_gpiote_output_configure+0x1f0>)
    7610:	e7c6      	b.n	75a0 <nrfx_gpiote_output_configure+0x150>
    7612:	480b      	ldr	r0, [pc, #44]	; (7640 <nrfx_gpiote_output_configure+0x1f0>)
    7614:	e7c4      	b.n	75a0 <nrfx_gpiote_output_configure+0x150>
    7616:	4809      	ldr	r0, [pc, #36]	; (763c <nrfx_gpiote_output_configure+0x1ec>)
    7618:	e7c2      	b.n	75a0 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    761a:	4809      	ldr	r0, [pc, #36]	; (7640 <nrfx_gpiote_output_configure+0x1f0>)
    761c:	e7c0      	b.n	75a0 <nrfx_gpiote_output_configure+0x150>
    761e:	bf00      	nop
    7620:	0000e0ac 	.word	0x0000e0ac
    7624:	0000ca80 	.word	0x0000ca80
    7628:	0000c8bc 	.word	0x0000c8bc
    762c:	0000e0e0 	.word	0x0000e0e0
    7630:	50000300 	.word	0x50000300
    7634:	200000f4 	.word	0x200000f4
    7638:	40006000 	.word	0x40006000
    763c:	0bad0000 	.word	0x0bad0000
    7640:	0bad0004 	.word	0x0bad0004

00007644 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7644:	4b01      	ldr	r3, [pc, #4]	; (764c <nrfx_gpiote_global_callback_set+0x8>)
    7646:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    7648:	60d9      	str	r1, [r3, #12]
}
    764a:	4770      	bx	lr
    764c:	200000f4 	.word	0x200000f4

00007650 <nrfx_gpiote_channel_get>:
{
    7650:	b570      	push	{r4, r5, r6, lr}
    7652:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    7654:	460d      	mov	r5, r1
    7656:	b159      	cbz	r1, 7670 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    7658:	4620      	mov	r0, r4
    765a:	f7ff fa91 	bl	6b80 <pin_in_use_by_te>
    765e:	b1a8      	cbz	r0, 768c <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7660:	3408      	adds	r4, #8
    7662:	4b0b      	ldr	r3, [pc, #44]	; (7690 <nrfx_gpiote_channel_get+0x40>)
    7664:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7668:	0b5b      	lsrs	r3, r3, #13
    766a:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    766c:	4809      	ldr	r0, [pc, #36]	; (7694 <nrfx_gpiote_channel_get+0x44>)
}
    766e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    7670:	4e09      	ldr	r6, [pc, #36]	; (7698 <nrfx_gpiote_channel_get+0x48>)
    7672:	f240 2335 	movw	r3, #565	; 0x235
    7676:	4632      	mov	r2, r6
    7678:	4908      	ldr	r1, [pc, #32]	; (769c <nrfx_gpiote_channel_get+0x4c>)
    767a:	4809      	ldr	r0, [pc, #36]	; (76a0 <nrfx_gpiote_channel_get+0x50>)
    767c:	f003 fec6 	bl	b40c <assert_print>
    7680:	f240 2135 	movw	r1, #565	; 0x235
    7684:	4630      	mov	r0, r6
    7686:	f003 feba 	bl	b3fe <assert_post_action>
    768a:	e7e5      	b.n	7658 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    768c:	4805      	ldr	r0, [pc, #20]	; (76a4 <nrfx_gpiote_channel_get+0x54>)
    768e:	e7ee      	b.n	766e <nrfx_gpiote_channel_get+0x1e>
    7690:	200000f4 	.word	0x200000f4
    7694:	0bad0000 	.word	0x0bad0000
    7698:	0000e2d0 	.word	0x0000e2d0
    769c:	0000e324 	.word	0x0000e324
    76a0:	0000c8bc 	.word	0x0000c8bc
    76a4:	0bad0004 	.word	0x0bad0004

000076a8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    76a8:	4b10      	ldr	r3, [pc, #64]	; (76ec <nrfx_gpiote_init+0x44>)
    76aa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    76ae:	b10b      	cbz	r3, 76b4 <nrfx_gpiote_init+0xc>
        return err_code;
    76b0:	480f      	ldr	r0, [pc, #60]	; (76f0 <nrfx_gpiote_init+0x48>)
}
    76b2:	4770      	bx	lr
{
    76b4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    76b6:	4c0d      	ldr	r4, [pc, #52]	; (76ec <nrfx_gpiote_init+0x44>)
    76b8:	2260      	movs	r2, #96	; 0x60
    76ba:	2100      	movs	r1, #0
    76bc:	f104 0010 	add.w	r0, r4, #16
    76c0:	f004 f86b 	bl	b79a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    76c4:	2006      	movs	r0, #6
    76c6:	f7fc f851 	bl	376c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    76ca:	4b0a      	ldr	r3, [pc, #40]	; (76f4 <nrfx_gpiote_init+0x4c>)
    76cc:	2200      	movs	r2, #0
    76ce:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    76d2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    76d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    76da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    76de:	2301      	movs	r3, #1
    76e0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    76e4:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    76e6:	4804      	ldr	r0, [pc, #16]	; (76f8 <nrfx_gpiote_init+0x50>)
}
    76e8:	bd10      	pop	{r4, pc}
    76ea:	bf00      	nop
    76ec:	200000f4 	.word	0x200000f4
    76f0:	0bad0005 	.word	0x0bad0005
    76f4:	40006000 	.word	0x40006000
    76f8:	0bad0000 	.word	0x0bad0000

000076fc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    76fc:	4b03      	ldr	r3, [pc, #12]	; (770c <nrfx_gpiote_is_init+0x10>)
    76fe:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7702:	3800      	subs	r0, #0
    7704:	bf18      	it	ne
    7706:	2001      	movne	r0, #1
    7708:	4770      	bx	lr
    770a:	bf00      	nop
    770c:	200000f4 	.word	0x200000f4

00007710 <nrfx_gpiote_channel_free>:
{
    7710:	b508      	push	{r3, lr}
    7712:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7714:	4801      	ldr	r0, [pc, #4]	; (771c <nrfx_gpiote_channel_free+0xc>)
    7716:	f7ff f855 	bl	67c4 <nrfx_flag32_free>
}
    771a:	bd08      	pop	{r3, pc}
    771c:	20000164 	.word	0x20000164

00007720 <nrfx_gpiote_channel_alloc>:
{
    7720:	b508      	push	{r3, lr}
    7722:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7724:	4801      	ldr	r0, [pc, #4]	; (772c <nrfx_gpiote_channel_alloc+0xc>)
    7726:	f7ff f825 	bl	6774 <nrfx_flag32_alloc>
}
    772a:	bd08      	pop	{r3, pc}
    772c:	20000164 	.word	0x20000164

00007730 <nrfx_gpiote_trigger_enable>:
{
    7730:	b570      	push	{r4, r5, r6, lr}
    7732:	4604      	mov	r4, r0
    7734:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    7736:	f7ff fa2d 	bl	6b94 <pin_has_trigger>
    773a:	b1b8      	cbz	r0, 776c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    773c:	4620      	mov	r0, r4
    773e:	f7ff fa1f 	bl	6b80 <pin_in_use_by_te>
    7742:	b118      	cbz	r0, 774c <nrfx_gpiote_trigger_enable+0x1c>
    7744:	4620      	mov	r0, r4
    7746:	f004 fcda 	bl	c0fe <pin_is_input>
    774a:	b9e8      	cbnz	r0, 7788 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    774c:	2d00      	cmp	r5, #0
    774e:	d04c      	beq.n	77ea <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7750:	f104 0308 	add.w	r3, r4, #8
    7754:	4a70      	ldr	r2, [pc, #448]	; (7918 <nrfx_gpiote_trigger_enable+0x1e8>)
    7756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    775a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    775e:	2b04      	cmp	r3, #4
    7760:	f000 8092 	beq.w	7888 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7764:	2b05      	cmp	r3, #5
    7766:	d14e      	bne.n	7806 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7768:	2602      	movs	r6, #2
    776a:	e08e      	b.n	788a <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    776c:	4e6b      	ldr	r6, [pc, #428]	; (791c <nrfx_gpiote_trigger_enable+0x1ec>)
    776e:	f240 33df 	movw	r3, #991	; 0x3df
    7772:	4632      	mov	r2, r6
    7774:	496a      	ldr	r1, [pc, #424]	; (7920 <nrfx_gpiote_trigger_enable+0x1f0>)
    7776:	486b      	ldr	r0, [pc, #428]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    7778:	f003 fe48 	bl	b40c <assert_print>
    777c:	f240 31df 	movw	r1, #991	; 0x3df
    7780:	4630      	mov	r0, r6
    7782:	f003 fe3c 	bl	b3fe <assert_post_action>
    7786:	e7d9      	b.n	773c <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    7788:	4620      	mov	r0, r4
    778a:	f7ff fa19 	bl	6bc0 <pin_te_get>
    778e:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    7790:	2807      	cmp	r0, #7
    7792:	d81c      	bhi.n	77ce <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7794:	00a3      	lsls	r3, r4, #2
    7796:	f503 7380 	add.w	r3, r3, #256	; 0x100
    779a:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    779c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    77a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77a4:	2200      	movs	r2, #0
    77a6:	601a      	str	r2, [r3, #0]
    77a8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    77aa:	4a5f      	ldr	r2, [pc, #380]	; (7928 <nrfx_gpiote_trigger_enable+0x1f8>)
    77ac:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    77b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    77b4:	f043 0301 	orr.w	r3, r3, #1
    77b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    77bc:	2d00      	cmp	r5, #0
    77be:	f000 80a9 	beq.w	7914 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    77c2:	2001      	movs	r0, #1
    77c4:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    77c8:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    77cc:	e0a2      	b.n	7914 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    77ce:	4e57      	ldr	r6, [pc, #348]	; (792c <nrfx_gpiote_trigger_enable+0x1fc>)
    77d0:	f44f 7323 	mov.w	r3, #652	; 0x28c
    77d4:	4632      	mov	r2, r6
    77d6:	4956      	ldr	r1, [pc, #344]	; (7930 <nrfx_gpiote_trigger_enable+0x200>)
    77d8:	4852      	ldr	r0, [pc, #328]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    77da:	f003 fe17 	bl	b40c <assert_print>
    77de:	f44f 7123 	mov.w	r1, #652	; 0x28c
    77e2:	4630      	mov	r0, r6
    77e4:	f003 fe0b 	bl	b3fe <assert_post_action>
    77e8:	e7d4      	b.n	7794 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    77ea:	4d4c      	ldr	r5, [pc, #304]	; (791c <nrfx_gpiote_trigger_enable+0x1ec>)
    77ec:	f240 33ee 	movw	r3, #1006	; 0x3ee
    77f0:	462a      	mov	r2, r5
    77f2:	4950      	ldr	r1, [pc, #320]	; (7934 <nrfx_gpiote_trigger_enable+0x204>)
    77f4:	484b      	ldr	r0, [pc, #300]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    77f6:	f003 fe09 	bl	b40c <assert_print>
    77fa:	f240 31ee 	movw	r1, #1006	; 0x3ee
    77fe:	4628      	mov	r0, r5
    7800:	f003 fdfd 	bl	b3fe <assert_post_action>
    7804:	e7a4      	b.n	7750 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    7806:	0963      	lsrs	r3, r4, #5
    7808:	d01f      	beq.n	784a <nrfx_gpiote_trigger_enable+0x11a>
    780a:	2b01      	cmp	r3, #1
    780c:	d120      	bne.n	7850 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    780e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7812:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7816:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7818:	f013 0f01 	tst.w	r3, #1
    781c:	d01a      	beq.n	7854 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    781e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7822:	0963      	lsrs	r3, r4, #5
    7824:	d024      	beq.n	7870 <nrfx_gpiote_trigger_enable+0x140>
    7826:	2b01      	cmp	r3, #1
    7828:	d025      	beq.n	7876 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    782a:	4e43      	ldr	r6, [pc, #268]	; (7938 <nrfx_gpiote_trigger_enable+0x208>)
    782c:	f240 232e 	movw	r3, #558	; 0x22e
    7830:	4632      	mov	r2, r6
    7832:	4942      	ldr	r1, [pc, #264]	; (793c <nrfx_gpiote_trigger_enable+0x20c>)
    7834:	483b      	ldr	r0, [pc, #236]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    7836:	f003 fde9 	bl	b40c <assert_print>
    783a:	f240 212e 	movw	r1, #558	; 0x22e
    783e:	4630      	mov	r0, r6
    7840:	f003 fddd 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    7844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7848:	e016      	b.n	7878 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    784a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    784e:	e7e0      	b.n	7812 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    7850:	2300      	movs	r3, #0
    7852:	e7de      	b.n	7812 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7854:	4d38      	ldr	r5, [pc, #224]	; (7938 <nrfx_gpiote_trigger_enable+0x208>)
    7856:	f240 2329 	movw	r3, #553	; 0x229
    785a:	462a      	mov	r2, r5
    785c:	4938      	ldr	r1, [pc, #224]	; (7940 <nrfx_gpiote_trigger_enable+0x210>)
    785e:	4831      	ldr	r0, [pc, #196]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    7860:	f003 fdd4 	bl	b40c <assert_print>
    7864:	f240 2129 	movw	r1, #553	; 0x229
    7868:	4628      	mov	r0, r5
    786a:	f003 fdc8 	bl	b3fe <assert_post_action>
    786e:	e7d6      	b.n	781e <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    7870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7874:	e000      	b.n	7878 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7876:	4b33      	ldr	r3, [pc, #204]	; (7944 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    7878:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    787c:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    787e:	f013 0f01 	tst.w	r3, #1
    7882:	d024      	beq.n	78ce <nrfx_gpiote_trigger_enable+0x19e>
    7884:	2603      	movs	r6, #3
    7886:	e000      	b.n	788a <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7888:	2603      	movs	r6, #3
    switch (port)
    788a:	0963      	lsrs	r3, r4, #5
    788c:	d021      	beq.n	78d2 <nrfx_gpiote_trigger_enable+0x1a2>
    788e:	2b01      	cmp	r3, #1
    7890:	d122      	bne.n	78d8 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    7892:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7896:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    789a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    789c:	f013 0f01 	tst.w	r3, #1
    78a0:	d01c      	beq.n	78dc <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    78a2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    78a6:	0964      	lsrs	r4, r4, #5
    78a8:	d026      	beq.n	78f8 <nrfx_gpiote_trigger_enable+0x1c8>
    78aa:	2c01      	cmp	r4, #1
    78ac:	d027      	beq.n	78fe <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    78ae:	4c22      	ldr	r4, [pc, #136]	; (7938 <nrfx_gpiote_trigger_enable+0x208>)
    78b0:	f240 232e 	movw	r3, #558	; 0x22e
    78b4:	4622      	mov	r2, r4
    78b6:	4921      	ldr	r1, [pc, #132]	; (793c <nrfx_gpiote_trigger_enable+0x20c>)
    78b8:	481a      	ldr	r0, [pc, #104]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    78ba:	f003 fda7 	bl	b40c <assert_print>
    78be:	f240 212e 	movw	r1, #558	; 0x22e
    78c2:	4620      	mov	r0, r4
    78c4:	f003 fd9b 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    78c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    78cc:	e018      	b.n	7900 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    78ce:	2602      	movs	r6, #2
    78d0:	e7db      	b.n	788a <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    78d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78d6:	e7de      	b.n	7896 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    78d8:	2300      	movs	r3, #0
    78da:	e7dc      	b.n	7896 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    78dc:	4d16      	ldr	r5, [pc, #88]	; (7938 <nrfx_gpiote_trigger_enable+0x208>)
    78de:	f240 2329 	movw	r3, #553	; 0x229
    78e2:	462a      	mov	r2, r5
    78e4:	4916      	ldr	r1, [pc, #88]	; (7940 <nrfx_gpiote_trigger_enable+0x210>)
    78e6:	480f      	ldr	r0, [pc, #60]	; (7924 <nrfx_gpiote_trigger_enable+0x1f4>)
    78e8:	f003 fd90 	bl	b40c <assert_print>
    78ec:	f240 2129 	movw	r1, #553	; 0x229
    78f0:	4628      	mov	r0, r5
    78f2:	f003 fd84 	bl	b3fe <assert_post_action>
    78f6:	e7d4      	b.n	78a2 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    78f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    78fc:	e000      	b.n	7900 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    78fe:	4911      	ldr	r1, [pc, #68]	; (7944 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7900:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    7904:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7908:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    790c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7910:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    7914:	bd70      	pop	{r4, r5, r6, pc}
    7916:	bf00      	nop
    7918:	200000f4 	.word	0x200000f4
    791c:	0000e2d0 	.word	0x0000e2d0
    7920:	0000e374 	.word	0x0000e374
    7924:	0000c8bc 	.word	0x0000c8bc
    7928:	40006000 	.word	0x40006000
    792c:	0000e330 	.word	0x0000e330
    7930:	0000e368 	.word	0x0000e368
    7934:	0000e38c 	.word	0x0000e38c
    7938:	0000e0ac 	.word	0x0000e0ac
    793c:	0000ca80 	.word	0x0000ca80
    7940:	0000e0e0 	.word	0x0000e0e0
    7944:	50000300 	.word	0x50000300

00007948 <nrfx_gpiote_trigger_disable>:
{
    7948:	b538      	push	{r3, r4, r5, lr}
    794a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    794c:	f7ff f918 	bl	6b80 <pin_in_use_by_te>
    7950:	b1a0      	cbz	r0, 797c <nrfx_gpiote_trigger_disable+0x34>
    7952:	4620      	mov	r0, r4
    7954:	f004 fbd3 	bl	c0fe <pin_is_input>
    7958:	b180      	cbz	r0, 797c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    795a:	4620      	mov	r0, r4
    795c:	f7ff f930 	bl	6bc0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7960:	2201      	movs	r2, #1
    7962:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    7964:	4b26      	ldr	r3, [pc, #152]	; (7a00 <nrfx_gpiote_trigger_disable+0xb8>)
    7966:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    796a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    796e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    7972:	f022 0203 	bic.w	r2, r2, #3
    7976:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    797a:	e040      	b.n	79fe <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    797c:	0963      	lsrs	r3, r4, #5
    797e:	d01f      	beq.n	79c0 <nrfx_gpiote_trigger_disable+0x78>
    7980:	2b01      	cmp	r3, #1
    7982:	d120      	bne.n	79c6 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    7984:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7988:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    798c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    798e:	f013 0f01 	tst.w	r3, #1
    7992:	d01a      	beq.n	79ca <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    7994:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7998:	0964      	lsrs	r4, r4, #5
    799a:	d024      	beq.n	79e6 <nrfx_gpiote_trigger_disable+0x9e>
    799c:	2c01      	cmp	r4, #1
    799e:	d025      	beq.n	79ec <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    79a0:	4c18      	ldr	r4, [pc, #96]	; (7a04 <nrfx_gpiote_trigger_disable+0xbc>)
    79a2:	f240 232e 	movw	r3, #558	; 0x22e
    79a6:	4622      	mov	r2, r4
    79a8:	4917      	ldr	r1, [pc, #92]	; (7a08 <nrfx_gpiote_trigger_disable+0xc0>)
    79aa:	4818      	ldr	r0, [pc, #96]	; (7a0c <nrfx_gpiote_trigger_disable+0xc4>)
    79ac:	f003 fd2e 	bl	b40c <assert_print>
    79b0:	f240 212e 	movw	r1, #558	; 0x22e
    79b4:	4620      	mov	r0, r4
    79b6:	f003 fd22 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    79ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    79be:	e016      	b.n	79ee <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    79c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    79c4:	e7e0      	b.n	7988 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    79c6:	2300      	movs	r3, #0
    79c8:	e7de      	b.n	7988 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    79ca:	4d0e      	ldr	r5, [pc, #56]	; (7a04 <nrfx_gpiote_trigger_disable+0xbc>)
    79cc:	f240 2329 	movw	r3, #553	; 0x229
    79d0:	462a      	mov	r2, r5
    79d2:	490f      	ldr	r1, [pc, #60]	; (7a10 <nrfx_gpiote_trigger_disable+0xc8>)
    79d4:	480d      	ldr	r0, [pc, #52]	; (7a0c <nrfx_gpiote_trigger_disable+0xc4>)
    79d6:	f003 fd19 	bl	b40c <assert_print>
    79da:	f240 2129 	movw	r1, #553	; 0x229
    79de:	4628      	mov	r0, r5
    79e0:	f003 fd0d 	bl	b3fe <assert_post_action>
    79e4:	e7d6      	b.n	7994 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    79e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    79ea:	e000      	b.n	79ee <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79ec:	4909      	ldr	r1, [pc, #36]	; (7a14 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    79ee:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    79f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    79f6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    79fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79fe:	bd38      	pop	{r3, r4, r5, pc}
    7a00:	40006000 	.word	0x40006000
    7a04:	0000e0ac 	.word	0x0000e0ac
    7a08:	0000ca80 	.word	0x0000ca80
    7a0c:	0000c8bc 	.word	0x0000c8bc
    7a10:	0000e0e0 	.word	0x0000e0e0
    7a14:	50000300 	.word	0x50000300

00007a18 <nrfx_gpiote_pin_uninit>:
{
    7a18:	b538      	push	{r3, r4, r5, lr}
    7a1a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7a1c:	f7ff f8a6 	bl	6b6c <pin_in_use>
    7a20:	b908      	cbnz	r0, 7a26 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    7a22:	4824      	ldr	r0, [pc, #144]	; (7ab4 <nrfx_gpiote_pin_uninit+0x9c>)
}
    7a24:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    7a26:	4620      	mov	r0, r4
    7a28:	f7ff ff8e 	bl	7948 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7a2c:	4620      	mov	r0, r4
    7a2e:	f7ff f95f 	bl	6cf0 <pin_handler_trigger_uninit>
    switch (port)
    7a32:	0963      	lsrs	r3, r4, #5
    7a34:	d01f      	beq.n	7a76 <nrfx_gpiote_pin_uninit+0x5e>
    7a36:	2b01      	cmp	r3, #1
    7a38:	d120      	bne.n	7a7c <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    7a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7a3e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7a42:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7a44:	f013 0f01 	tst.w	r3, #1
    7a48:	d01a      	beq.n	7a80 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    7a4a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a4e:	0964      	lsrs	r4, r4, #5
    7a50:	d024      	beq.n	7a9c <nrfx_gpiote_pin_uninit+0x84>
    7a52:	2c01      	cmp	r4, #1
    7a54:	d025      	beq.n	7aa2 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    7a56:	4c18      	ldr	r4, [pc, #96]	; (7ab8 <nrfx_gpiote_pin_uninit+0xa0>)
    7a58:	f240 232e 	movw	r3, #558	; 0x22e
    7a5c:	4622      	mov	r2, r4
    7a5e:	4917      	ldr	r1, [pc, #92]	; (7abc <nrfx_gpiote_pin_uninit+0xa4>)
    7a60:	4817      	ldr	r0, [pc, #92]	; (7ac0 <nrfx_gpiote_pin_uninit+0xa8>)
    7a62:	f003 fcd3 	bl	b40c <assert_print>
    7a66:	f240 212e 	movw	r1, #558	; 0x22e
    7a6a:	4620      	mov	r0, r4
    7a6c:	f003 fcc7 	bl	b3fe <assert_post_action>
        case 0: return NRF_P0;
    7a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7a74:	e016      	b.n	7aa4 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    7a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a7a:	e7e0      	b.n	7a3e <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    7a7c:	2300      	movs	r3, #0
    7a7e:	e7de      	b.n	7a3e <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7a80:	4d0d      	ldr	r5, [pc, #52]	; (7ab8 <nrfx_gpiote_pin_uninit+0xa0>)
    7a82:	f240 2329 	movw	r3, #553	; 0x229
    7a86:	462a      	mov	r2, r5
    7a88:	490e      	ldr	r1, [pc, #56]	; (7ac4 <nrfx_gpiote_pin_uninit+0xac>)
    7a8a:	480d      	ldr	r0, [pc, #52]	; (7ac0 <nrfx_gpiote_pin_uninit+0xa8>)
    7a8c:	f003 fcbe 	bl	b40c <assert_print>
    7a90:	f240 2129 	movw	r1, #553	; 0x229
    7a94:	4628      	mov	r0, r5
    7a96:	f003 fcb2 	bl	b3fe <assert_post_action>
    7a9a:	e7d6      	b.n	7a4a <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    7a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7aa0:	e000      	b.n	7aa4 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7aa2:	4b09      	ldr	r3, [pc, #36]	; (7ac8 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    7aa4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7aa8:	2202      	movs	r2, #2
    7aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    7aae:	4807      	ldr	r0, [pc, #28]	; (7acc <nrfx_gpiote_pin_uninit+0xb4>)
}
    7ab0:	e7b8      	b.n	7a24 <nrfx_gpiote_pin_uninit+0xc>
    7ab2:	bf00      	nop
    7ab4:	0bad0004 	.word	0x0bad0004
    7ab8:	0000e0ac 	.word	0x0000e0ac
    7abc:	0000ca80 	.word	0x0000ca80
    7ac0:	0000c8bc 	.word	0x0000c8bc
    7ac4:	0000e0e0 	.word	0x0000e0e0
    7ac8:	50000300 	.word	0x50000300
    7acc:	0bad0000 	.word	0x0bad0000

00007ad0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7ad0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7ad2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7ad4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7ad8:	2100      	movs	r1, #0
    uint32_t status = 0;
    7ada:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7adc:	e003      	b.n	7ae6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    7ade:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7ae0:	3304      	adds	r3, #4
    7ae2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7ae4:	3101      	adds	r1, #1
    7ae6:	2907      	cmp	r1, #7
    7ae8:	d814      	bhi.n	7b14 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7aea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7aee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    7af2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7af4:	2a00      	cmp	r2, #0
    7af6:	d0f2      	beq.n	7ade <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    7af8:	4a0c      	ldr	r2, [pc, #48]	; (7b2c <nrfx_gpiote_irq_handler+0x5c>)
    7afa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7afe:	4210      	tst	r0, r2
    7b00:	d0ed      	beq.n	7ade <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7b02:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7b06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7b0a:	2500      	movs	r5, #0
    7b0c:	6015      	str	r5, [r2, #0]
    7b0e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7b10:	4304      	orrs	r4, r0
    7b12:	e7e4      	b.n	7ade <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b14:	4b05      	ldr	r3, [pc, #20]	; (7b2c <nrfx_gpiote_irq_handler+0x5c>)
    7b16:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7b1a:	b91b      	cbnz	r3, 7b24 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    7b1c:	4620      	mov	r0, r4
    7b1e:	f7ff f939 	bl	6d94 <gpiote_evt_handle>
}
    7b22:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7b24:	f7ff fac2 	bl	70ac <port_event_handle>
    7b28:	e7f8      	b.n	7b1c <nrfx_gpiote_irq_handler+0x4c>
    7b2a:	bf00      	nop
    7b2c:	40006000 	.word	0x40006000

00007b30 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    7b30:	b508      	push	{r3, lr}
    7b32:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    7b34:	4801      	ldr	r0, [pc, #4]	; (7b3c <nrfx_ppi_channel_alloc+0xc>)
    7b36:	f7fe fe1d 	bl	6774 <nrfx_flag32_alloc>
}
    7b3a:	bd08      	pop	{r3, pc}
    7b3c:	20000170 	.word	0x20000170

00007b40 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7b40:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7b42:	4c11      	ldr	r4, [pc, #68]	; (7b88 <_DoInit+0x48>)
    7b44:	2303      	movs	r3, #3
    7b46:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7b48:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7b4a:	4a10      	ldr	r2, [pc, #64]	; (7b8c <_DoInit+0x4c>)
    7b4c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7b4e:	4b10      	ldr	r3, [pc, #64]	; (7b90 <_DoInit+0x50>)
    7b50:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7b56:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7b58:	2300      	movs	r3, #0
    7b5a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7b5c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7b60:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7b62:	4a0c      	ldr	r2, [pc, #48]	; (7b94 <_DoInit+0x54>)
    7b64:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7b66:	2210      	movs	r2, #16
    7b68:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7b6a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7b6c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7b6e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7b70:	4909      	ldr	r1, [pc, #36]	; (7b98 <_DoInit+0x58>)
    7b72:	1de0      	adds	r0, r4, #7
    7b74:	f003 fda0 	bl	b6b8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    7b78:	4908      	ldr	r1, [pc, #32]	; (7b9c <_DoInit+0x5c>)
    7b7a:	4620      	mov	r0, r4
    7b7c:	f003 fd9c 	bl	b6b8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    7b80:	2320      	movs	r3, #32
    7b82:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    7b84:	bd10      	pop	{r4, pc}
    7b86:	bf00      	nop
    7b88:	20000c9c 	.word	0x20000c9c
    7b8c:	0000e398 	.word	0x0000e398
    7b90:	20000d54 	.word	0x20000d54
    7b94:	20000d44 	.word	0x20000d44
    7b98:	0000e3a4 	.word	0x0000e3a4
    7b9c:	0000e3a8 	.word	0x0000e3a8

00007ba0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ba4:	4604      	mov	r4, r0
    7ba6:	460e      	mov	r6, r1
    7ba8:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7baa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7bae:	4a2d      	ldr	r2, [pc, #180]	; (7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7bb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7bb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7bb6:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7bb8:	42bb      	cmp	r3, r7
    7bba:	d84b      	bhi.n	7c54 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7bbc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7bc0:	4928      	ldr	r1, [pc, #160]	; (7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7bc2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    7bc6:	f8d2 8020 	ldr.w	r8, [r2, #32]
    7bca:	eba8 0907 	sub.w	r9, r8, r7
    7bce:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7bd2:	4295      	cmp	r5, r2
    7bd4:	d904      	bls.n	7be0 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    7bd6:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7bd8:	429d      	cmp	r5, r3
    7bda:	d916      	bls.n	7c0a <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    7bdc:	2000      	movs	r0, #0
    7bde:	e03e      	b.n	7c5e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7be0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    7be4:	1c63      	adds	r3, r4, #1
    7be6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7bea:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    7bee:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    7bf0:	462a      	mov	r2, r5
    7bf2:	4631      	mov	r1, r6
    7bf4:	4438      	add	r0, r7
    7bf6:	f003 fda1 	bl	b73c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    7bfa:	443d      	add	r5, r7
    7bfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c00:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    7c04:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    7c06:	2001      	movs	r0, #1
    7c08:	e029      	b.n	7c5e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7c0a:	1c43      	adds	r3, r0, #1
    7c0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7c10:	4a14      	ldr	r2, [pc, #80]	; (7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7c12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7c16:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    7c18:	464a      	mov	r2, r9
    7c1a:	4631      	mov	r1, r6
    7c1c:	4438      	add	r0, r7
    7c1e:	f003 fd8d 	bl	b73c <memcpy>
      NumBytes -= Rem;
    7c22:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    7c26:	197f      	adds	r7, r7, r5
    7c28:	d107      	bne.n	7c3a <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    7c2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c2e:	4b0d      	ldr	r3, [pc, #52]	; (7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7c30:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    7c34:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    7c36:	2001      	movs	r0, #1
    7c38:	e011      	b.n	7c5e <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    7c3a:	1c63      	adds	r3, r4, #1
    7c3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7c40:	4a08      	ldr	r2, [pc, #32]	; (7c64 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7c42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    7c46:	463a      	mov	r2, r7
    7c48:	eb06 0109 	add.w	r1, r6, r9
    7c4c:	6858      	ldr	r0, [r3, #4]
    7c4e:	f003 fd75 	bl	b73c <memcpy>
    7c52:	e7ea      	b.n	7c2a <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    7c54:	1bdb      	subs	r3, r3, r7
    7c56:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7c58:	42ab      	cmp	r3, r5
    7c5a:	d2c1      	bcs.n	7be0 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    7c5c:	2000      	movs	r0, #0
}
    7c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7c62:	bf00      	nop
    7c64:	20000c9c 	.word	0x20000c9c

00007c68 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7c68:	4b06      	ldr	r3, [pc, #24]	; (7c84 <SEGGER_RTT_HasDataUp+0x1c>)
    7c6a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7c6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    7c72:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    7c74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7c78:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7c7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    7c7e:	1a80      	subs	r0, r0, r2
    7c80:	4770      	bx	lr
    7c82:	bf00      	nop
    7c84:	20000c9c 	.word	0x20000c9c

00007c88 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    7c88:	4b03      	ldr	r3, [pc, #12]	; (7c98 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    7c8a:	e000      	b.n	7c8e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    7c8c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    7c8e:	4a03      	ldr	r2, [pc, #12]	; (7c9c <z_device_state_init+0x14>)
    7c90:	4293      	cmp	r3, r2
    7c92:	d3fb      	bcc.n	7c8c <z_device_state_init+0x4>
	}
}
    7c94:	4770      	bx	lr
    7c96:	bf00      	nop
    7c98:	0000c3e4 	.word	0x0000c3e4
    7c9c:	0000c474 	.word	0x0000c474

00007ca0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7ca0:	b570      	push	{r4, r5, r6, lr}
    7ca2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7ca4:	4b11      	ldr	r3, [pc, #68]	; (7cec <z_sys_init_run_level+0x4c>)
    7ca6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7caa:	e009      	b.n	7cc0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7cac:	4240      	negs	r0, r0
    7cae:	e017      	b.n	7ce0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7cb0:	68eb      	ldr	r3, [r5, #12]
    7cb2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7cb4:	68ea      	ldr	r2, [r5, #12]
    7cb6:	7853      	ldrb	r3, [r2, #1]
    7cb8:	f043 0301 	orr.w	r3, r3, #1
    7cbc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7cbe:	3408      	adds	r4, #8
    7cc0:	1c73      	adds	r3, r6, #1
    7cc2:	4a0a      	ldr	r2, [pc, #40]	; (7cec <z_sys_init_run_level+0x4c>)
    7cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cc8:	42a3      	cmp	r3, r4
    7cca:	d90d      	bls.n	7ce8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    7ccc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    7cce:	6823      	ldr	r3, [r4, #0]
    7cd0:	4628      	mov	r0, r5
    7cd2:	4798      	blx	r3
		if (dev != NULL) {
    7cd4:	2d00      	cmp	r5, #0
    7cd6:	d0f2      	beq.n	7cbe <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    7cd8:	2800      	cmp	r0, #0
    7cda:	d0eb      	beq.n	7cb4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    7cdc:	2800      	cmp	r0, #0
    7cde:	dbe5      	blt.n	7cac <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    7ce0:	28ff      	cmp	r0, #255	; 0xff
    7ce2:	dde5      	ble.n	7cb0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    7ce4:	20ff      	movs	r0, #255	; 0xff
    7ce6:	e7e3      	b.n	7cb0 <z_sys_init_run_level+0x10>
		}
	}
}
    7ce8:	bd70      	pop	{r4, r5, r6, pc}
    7cea:	bf00      	nop
    7cec:	0000e3b0 	.word	0x0000e3b0

00007cf0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7cf0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7cf2:	4605      	mov	r5, r0
    7cf4:	b328      	cbz	r0, 7d42 <z_impl_device_get_binding+0x52>
    7cf6:	7803      	ldrb	r3, [r0, #0]
    7cf8:	b32b      	cbz	r3, 7d46 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    7cfa:	4c14      	ldr	r4, [pc, #80]	; (7d4c <z_impl_device_get_binding+0x5c>)
    7cfc:	e000      	b.n	7d00 <z_impl_device_get_binding+0x10>
    7cfe:	3418      	adds	r4, #24
    7d00:	4b13      	ldr	r3, [pc, #76]	; (7d50 <z_impl_device_get_binding+0x60>)
    7d02:	429c      	cmp	r4, r3
    7d04:	d008      	beq.n	7d18 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    7d06:	4620      	mov	r0, r4
    7d08:	f004 fa10 	bl	c12c <z_device_is_ready>
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d0f6      	beq.n	7cfe <z_impl_device_get_binding+0xe>
    7d10:	6823      	ldr	r3, [r4, #0]
    7d12:	42ab      	cmp	r3, r5
    7d14:	d1f3      	bne.n	7cfe <z_impl_device_get_binding+0xe>
    7d16:	e012      	b.n	7d3e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    7d18:	4c0c      	ldr	r4, [pc, #48]	; (7d4c <z_impl_device_get_binding+0x5c>)
    7d1a:	e000      	b.n	7d1e <z_impl_device_get_binding+0x2e>
    7d1c:	3418      	adds	r4, #24
    7d1e:	4b0c      	ldr	r3, [pc, #48]	; (7d50 <z_impl_device_get_binding+0x60>)
    7d20:	429c      	cmp	r4, r3
    7d22:	d00b      	beq.n	7d3c <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7d24:	4620      	mov	r0, r4
    7d26:	f004 fa01 	bl	c12c <z_device_is_ready>
    7d2a:	2800      	cmp	r0, #0
    7d2c:	d0f6      	beq.n	7d1c <z_impl_device_get_binding+0x2c>
    7d2e:	6821      	ldr	r1, [r4, #0]
    7d30:	4628      	mov	r0, r5
    7d32:	f003 fcf8 	bl	b726 <strcmp>
    7d36:	2800      	cmp	r0, #0
    7d38:	d1f0      	bne.n	7d1c <z_impl_device_get_binding+0x2c>
    7d3a:	e000      	b.n	7d3e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    7d3c:	2400      	movs	r4, #0
}
    7d3e:	4620      	mov	r0, r4
    7d40:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    7d42:	4604      	mov	r4, r0
    7d44:	e7fb      	b.n	7d3e <z_impl_device_get_binding+0x4e>
    7d46:	2400      	movs	r4, #0
    7d48:	e7f9      	b.n	7d3e <z_impl_device_get_binding+0x4e>
    7d4a:	bf00      	nop
    7d4c:	0000c3e4 	.word	0x0000c3e4
    7d50:	0000c474 	.word	0x0000c474

00007d54 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    7d54:	2804      	cmp	r0, #4
    7d56:	d80c      	bhi.n	7d72 <reason_to_str+0x1e>
    7d58:	e8df f000 	tbb	[pc, r0]
    7d5c:	07050d03 	.word	0x07050d03
    7d60:	09          	.byte	0x09
    7d61:	00          	.byte	0x00
    7d62:	4806      	ldr	r0, [pc, #24]	; (7d7c <reason_to_str+0x28>)
    7d64:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    7d66:	4806      	ldr	r0, [pc, #24]	; (7d80 <reason_to_str+0x2c>)
    7d68:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    7d6a:	4806      	ldr	r0, [pc, #24]	; (7d84 <reason_to_str+0x30>)
    7d6c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    7d6e:	4806      	ldr	r0, [pc, #24]	; (7d88 <reason_to_str+0x34>)
    7d70:	4770      	bx	lr
	default:
		return "Unknown error";
    7d72:	4806      	ldr	r0, [pc, #24]	; (7d8c <reason_to_str+0x38>)
    7d74:	4770      	bx	lr
		return "Unhandled interrupt";
    7d76:	4806      	ldr	r0, [pc, #24]	; (7d90 <reason_to_str+0x3c>)
	}
}
    7d78:	4770      	bx	lr
    7d7a:	bf00      	nop
    7d7c:	0000e418 	.word	0x0000e418
    7d80:	0000e3ec 	.word	0x0000e3ec
    7d84:	0000e3fc 	.word	0x0000e3fc
    7d88:	0000e408 	.word	0x0000e408
    7d8c:	0000e3c8 	.word	0x0000e3c8
    7d90:	0000e3d8 	.word	0x0000e3d8

00007d94 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7d94:	b130      	cbz	r0, 7da4 <thread_name_get+0x10>
{
    7d96:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7d98:	f004 fa2a 	bl	c1f0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7d9c:	b120      	cbz	r0, 7da8 <thread_name_get+0x14>
    7d9e:	7803      	ldrb	r3, [r0, #0]
    7da0:	b123      	cbz	r3, 7dac <thread_name_get+0x18>
}
    7da2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    7da4:	4802      	ldr	r0, [pc, #8]	; (7db0 <thread_name_get+0x1c>)
}
    7da6:	4770      	bx	lr
		thread_name = "unknown";
    7da8:	4801      	ldr	r0, [pc, #4]	; (7db0 <thread_name_get+0x1c>)
    7daa:	e7fa      	b.n	7da2 <thread_name_get+0xe>
    7dac:	4800      	ldr	r0, [pc, #0]	; (7db0 <thread_name_get+0x1c>)
	return thread_name;
    7dae:	e7f8      	b.n	7da2 <thread_name_get+0xe>
    7db0:	0000e428 	.word	0x0000e428

00007db4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7db6:	b087      	sub	sp, #28
    7db8:	4604      	mov	r4, r0
    7dba:	460e      	mov	r6, r1
	__asm__ volatile(
    7dbc:	f04f 0320 	mov.w	r3, #32
    7dc0:	f3ef 8711 	mrs	r7, BASEPRI
    7dc4:	f383 8812 	msr	BASEPRI_MAX, r3
    7dc8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7dcc:	f002 f9d2 	bl	a174 <z_impl_z_current_get>
    7dd0:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7dd2:	4620      	mov	r0, r4
    7dd4:	f7ff ffbe 	bl	7d54 <reason_to_str>
    7dd8:	2300      	movs	r3, #0
    7dda:	9305      	str	r3, [sp, #20]
    7ddc:	9004      	str	r0, [sp, #16]
    7dde:	9403      	str	r4, [sp, #12]
    7de0:	4a22      	ldr	r2, [pc, #136]	; (7e6c <z_fatal_error+0xb8>)
    7de2:	9202      	str	r2, [sp, #8]
    7de4:	9301      	str	r3, [sp, #4]
    7de6:	9300      	str	r3, [sp, #0]
    7de8:	2201      	movs	r2, #1
    7dea:	4921      	ldr	r1, [pc, #132]	; (7e70 <z_fatal_error+0xbc>)
    7dec:	4618      	mov	r0, r3
    7dee:	f004 f9aa 	bl	c146 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7df2:	b11e      	cbz	r6, 7dfc <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7df4:	69f3      	ldr	r3, [r6, #28]
    7df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7dfa:	b9eb      	cbnz	r3, 7e38 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7dfc:	4628      	mov	r0, r5
    7dfe:	f7ff ffc9 	bl	7d94 <thread_name_get>
    7e02:	9004      	str	r0, [sp, #16]
    7e04:	9503      	str	r5, [sp, #12]
    7e06:	4b1b      	ldr	r3, [pc, #108]	; (7e74 <z_fatal_error+0xc0>)
    7e08:	9302      	str	r3, [sp, #8]
    7e0a:	2000      	movs	r0, #0
    7e0c:	9001      	str	r0, [sp, #4]
    7e0e:	9000      	str	r0, [sp, #0]
    7e10:	4603      	mov	r3, r0
    7e12:	2201      	movs	r2, #1
    7e14:	4916      	ldr	r1, [pc, #88]	; (7e70 <z_fatal_error+0xbc>)
    7e16:	f004 f996 	bl	c146 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7e1a:	4631      	mov	r1, r6
    7e1c:	4620      	mov	r0, r4
    7e1e:	f7fe fba3 	bl	6568 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    7e22:	2c04      	cmp	r4, #4
    7e24:	d013      	beq.n	7e4e <z_fatal_error+0x9a>
	__asm__ volatile(
    7e26:	f387 8811 	msr	BASEPRI, r7
    7e2a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7e2e:	4628      	mov	r0, r5
    7e30:	f7fc f9f4 	bl	421c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7e34:	b007      	add	sp, #28
    7e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    7e38:	4b0f      	ldr	r3, [pc, #60]	; (7e78 <z_fatal_error+0xc4>)
    7e3a:	9302      	str	r3, [sp, #8]
    7e3c:	2000      	movs	r0, #0
    7e3e:	9001      	str	r0, [sp, #4]
    7e40:	9000      	str	r0, [sp, #0]
    7e42:	4603      	mov	r3, r0
    7e44:	2201      	movs	r2, #1
    7e46:	490a      	ldr	r1, [pc, #40]	; (7e70 <z_fatal_error+0xbc>)
    7e48:	f004 f97d 	bl	c146 <z_log_msg2_runtime_create>
    7e4c:	e7d6      	b.n	7dfc <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    7e4e:	4c0b      	ldr	r4, [pc, #44]	; (7e7c <z_fatal_error+0xc8>)
    7e50:	238f      	movs	r3, #143	; 0x8f
    7e52:	4622      	mov	r2, r4
    7e54:	490a      	ldr	r1, [pc, #40]	; (7e80 <z_fatal_error+0xcc>)
    7e56:	480b      	ldr	r0, [pc, #44]	; (7e84 <z_fatal_error+0xd0>)
    7e58:	f003 fad8 	bl	b40c <assert_print>
    7e5c:	480a      	ldr	r0, [pc, #40]	; (7e88 <z_fatal_error+0xd4>)
    7e5e:	f003 fad5 	bl	b40c <assert_print>
    7e62:	218f      	movs	r1, #143	; 0x8f
    7e64:	4620      	mov	r0, r4
    7e66:	f003 faca 	bl	b3fe <assert_post_action>
    7e6a:	e7dc      	b.n	7e26 <z_fatal_error+0x72>
    7e6c:	0000e430 	.word	0x0000e430
    7e70:	0000c624 	.word	0x0000c624
    7e74:	0000e47c 	.word	0x0000e47c
    7e78:	0000e458 	.word	0x0000e458
    7e7c:	0000e494 	.word	0x0000e494
    7e80:	0000e4b8 	.word	0x0000e4b8
    7e84:	0000c8bc 	.word	0x0000c8bc
    7e88:	0000e4d8 	.word	0x0000e4d8

00007e8c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7e8c:	b510      	push	{r4, lr}
    7e8e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    7e90:	4c11      	ldr	r4, [pc, #68]	; (7ed8 <init_idle_thread+0x4c>)
    7e92:	23b0      	movs	r3, #176	; 0xb0
    7e94:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7e98:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7e9c:	4b0f      	ldr	r3, [pc, #60]	; (7edc <init_idle_thread+0x50>)
    7e9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    7ea2:	4a0f      	ldr	r2, [pc, #60]	; (7ee0 <init_idle_thread+0x54>)
    7ea4:	9205      	str	r2, [sp, #20]
    7ea6:	2201      	movs	r2, #1
    7ea8:	9204      	str	r2, [sp, #16]
    7eaa:	220f      	movs	r2, #15
    7eac:	9203      	str	r2, [sp, #12]
    7eae:	2200      	movs	r2, #0
    7eb0:	9202      	str	r2, [sp, #8]
    7eb2:	9201      	str	r2, [sp, #4]
    7eb4:	9300      	str	r3, [sp, #0]
    7eb6:	4b0b      	ldr	r3, [pc, #44]	; (7ee4 <init_idle_thread+0x58>)
    7eb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7ebc:	490a      	ldr	r1, [pc, #40]	; (7ee8 <init_idle_thread+0x5c>)
    7ebe:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    7ec2:	fb0c 1100 	mla	r1, ip, r0, r1
    7ec6:	4620      	mov	r0, r4
    7ec8:	f000 fa76 	bl	83b8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7ecc:	7b63      	ldrb	r3, [r4, #13]
    7ece:	f023 0304 	bic.w	r3, r3, #4
    7ed2:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7ed4:	b006      	add	sp, #24
    7ed6:	bd10      	pop	{r4, pc}
    7ed8:	20000490 	.word	0x20000490
    7edc:	20001154 	.word	0x20001154
    7ee0:	0000e510 	.word	0x0000e510
    7ee4:	000086cd 	.word	0x000086cd
    7ee8:	20002420 	.word	0x20002420

00007eec <bg_thread_main>:
{
    7eec:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7eee:	4b0a      	ldr	r3, [pc, #40]	; (7f18 <bg_thread_main+0x2c>)
    7ef0:	2201      	movs	r2, #1
    7ef2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7ef4:	2002      	movs	r0, #2
    7ef6:	f7ff fed3 	bl	7ca0 <z_sys_init_run_level>
	boot_banner();
    7efa:	f002 fe83 	bl	ac04 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7efe:	2003      	movs	r0, #3
    7f00:	f7ff fece 	bl	7ca0 <z_sys_init_run_level>
	z_init_static_threads();
    7f04:	f000 fb68 	bl	85d8 <z_init_static_threads>
	main();
    7f08:	f7f8 fe22 	bl	b50 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7f0c:	4a03      	ldr	r2, [pc, #12]	; (7f1c <bg_thread_main+0x30>)
    7f0e:	7b13      	ldrb	r3, [r2, #12]
    7f10:	f023 0301 	bic.w	r3, r3, #1
    7f14:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7f16:	bd08      	pop	{r3, pc}
    7f18:	20001386 	.word	0x20001386
    7f1c:	20000540 	.word	0x20000540

00007f20 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    7f20:	b508      	push	{r3, lr}
    7f22:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7f24:	4a01      	ldr	r2, [pc, #4]	; (7f2c <switch_to_main_thread+0xc>)
    7f26:	4802      	ldr	r0, [pc, #8]	; (7f30 <switch_to_main_thread+0x10>)
    7f28:	f7fb fd34 	bl	3994 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7f2c:	00007eed 	.word	0x00007eed
    7f30:	20000540 	.word	0x20000540

00007f34 <z_bss_zero>:
{
    7f34:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7f36:	4803      	ldr	r0, [pc, #12]	; (7f44 <z_bss_zero+0x10>)
    7f38:	4a03      	ldr	r2, [pc, #12]	; (7f48 <z_bss_zero+0x14>)
    7f3a:	1a12      	subs	r2, r2, r0
    7f3c:	2100      	movs	r1, #0
    7f3e:	f004 f911 	bl	c164 <z_early_memset>
}
    7f42:	bd08      	pop	{r3, pc}
    7f44:	20000260 	.word	0x20000260
    7f48:	20001388 	.word	0x20001388

00007f4c <z_init_cpu>:
{
    7f4c:	b510      	push	{r4, lr}
    7f4e:	4604      	mov	r4, r0
	init_idle_thread(id);
    7f50:	f7ff ff9c 	bl	7e8c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7f54:	490b      	ldr	r1, [pc, #44]	; (7f84 <z_init_cpu+0x38>)
    7f56:	23b0      	movs	r3, #176	; 0xb0
    7f58:	fb03 1104 	mla	r1, r3, r4, r1
    7f5c:	4a0a      	ldr	r2, [pc, #40]	; (7f88 <z_init_cpu+0x3c>)
    7f5e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    7f62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7f66:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    7f68:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7f6a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    7f6e:	4b07      	ldr	r3, [pc, #28]	; (7f8c <z_init_cpu+0x40>)
    7f70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7f74:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    7f78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7f7c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    7f80:	6063      	str	r3, [r4, #4]
}
    7f82:	bd10      	pop	{r4, pc}
    7f84:	20000490 	.word	0x20000490
    7f88:	20001154 	.word	0x20001154
    7f8c:	20002580 	.word	0x20002580

00007f90 <prepare_multithreading>:
{
    7f90:	b570      	push	{r4, r5, r6, lr}
    7f92:	b086      	sub	sp, #24
	z_sched_init();
    7f94:	f001 ff2a 	bl	9dec <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    7f98:	4d10      	ldr	r5, [pc, #64]	; (7fdc <prepare_multithreading+0x4c>)
    7f9a:	4b11      	ldr	r3, [pc, #68]	; (7fe0 <prepare_multithreading+0x50>)
    7f9c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7f9e:	4b11      	ldr	r3, [pc, #68]	; (7fe4 <prepare_multithreading+0x54>)
    7fa0:	9305      	str	r3, [sp, #20]
    7fa2:	2301      	movs	r3, #1
    7fa4:	9304      	str	r3, [sp, #16]
    7fa6:	2400      	movs	r4, #0
    7fa8:	9403      	str	r4, [sp, #12]
    7faa:	9402      	str	r4, [sp, #8]
    7fac:	9401      	str	r4, [sp, #4]
    7fae:	9400      	str	r4, [sp, #0]
    7fb0:	4b0d      	ldr	r3, [pc, #52]	; (7fe8 <prepare_multithreading+0x58>)
    7fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7fb6:	490d      	ldr	r1, [pc, #52]	; (7fec <prepare_multithreading+0x5c>)
    7fb8:	4628      	mov	r0, r5
    7fba:	f000 f9fd 	bl	83b8 <z_setup_new_thread>
    7fbe:	4606      	mov	r6, r0
    7fc0:	7b6b      	ldrb	r3, [r5, #13]
    7fc2:	f023 0304 	bic.w	r3, r3, #4
    7fc6:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    7fc8:	4628      	mov	r0, r5
    7fca:	f001 fa33 	bl	9434 <z_ready_thread>
	z_init_cpu(0);
    7fce:	4620      	mov	r0, r4
    7fd0:	f7ff ffbc 	bl	7f4c <z_init_cpu>
}
    7fd4:	4630      	mov	r0, r6
    7fd6:	b006      	add	sp, #24
    7fd8:	bd70      	pop	{r4, r5, r6, pc}
    7fda:	bf00      	nop
    7fdc:	20000540 	.word	0x20000540
    7fe0:	20001154 	.word	0x20001154
    7fe4:	0000e518 	.word	0x0000e518
    7fe8:	00007eed 	.word	0x00007eed
    7fec:	20002000 	.word	0x20002000

00007ff0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7ff0:	b500      	push	{lr}
    7ff2:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7ff4:	4b1f      	ldr	r3, [pc, #124]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7ff6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7ffa:	4c1f      	ldr	r4, [pc, #124]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7ffc:	6963      	ldr	r3, [r4, #20]
    7ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8002:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8004:	23e0      	movs	r3, #224	; 0xe0
    8006:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    800a:	2500      	movs	r5, #0
    800c:	77e5      	strb	r5, [r4, #31]
    800e:	7625      	strb	r5, [r4, #24]
    8010:	7665      	strb	r5, [r4, #25]
    8012:	76a5      	strb	r5, [r4, #26]
    8014:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8018:	6a63      	ldr	r3, [r4, #36]	; 0x24
    801a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    801e:	6263      	str	r3, [r4, #36]	; 0x24
    8020:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8024:	f7fc f866 	bl	40f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8028:	f7fb fb38 	bl	369c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    802c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8030:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8032:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8034:	f7fc fa12 	bl	445c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8038:	f7fc f90a 	bl	4250 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    803c:	f7fa fc5a 	bl	28f4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    8040:	2401      	movs	r4, #1
    8042:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    8046:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    804a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    804c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    804e:	4668      	mov	r0, sp
    8050:	f002 fdd2 	bl	abf8 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    8054:	4b09      	ldr	r3, [pc, #36]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    8056:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    805a:	f7ff fe15 	bl	7c88 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    805e:	4628      	mov	r0, r5
    8060:	f7ff fe1e 	bl	7ca0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8064:	4620      	mov	r0, r4
    8066:	f7ff fe1b 	bl	7ca0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    806a:	f7ff ff91 	bl	7f90 <prepare_multithreading>
    806e:	f7ff ff57 	bl	7f20 <switch_to_main_thread>
    8072:	bf00      	nop
    8074:	20002da0 	.word	0x20002da0
    8078:	e000ed00 	.word	0xe000ed00
    807c:	20001154 	.word	0x20001154

00008080 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8080:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8082:	4c10      	ldr	r4, [pc, #64]	; (80c4 <init_mem_slab_module+0x44>)
	int rc = 0;
    8084:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8086:	e008      	b.n	809a <init_mem_slab_module+0x1a>
    8088:	4b0f      	ldr	r3, [pc, #60]	; (80c8 <init_mem_slab_module+0x48>)
    808a:	429c      	cmp	r4, r3
    808c:	d217      	bcs.n	80be <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    808e:	4620      	mov	r0, r4
    8090:	f004 f870 	bl	c174 <create_free_list>
		if (rc < 0) {
    8094:	1e05      	subs	r5, r0, #0
    8096:	db12      	blt.n	80be <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8098:	3420      	adds	r4, #32
    809a:	4b0b      	ldr	r3, [pc, #44]	; (80c8 <init_mem_slab_module+0x48>)
    809c:	429c      	cmp	r4, r3
    809e:	d9f3      	bls.n	8088 <init_mem_slab_module+0x8>
    80a0:	4e0a      	ldr	r6, [pc, #40]	; (80cc <init_mem_slab_module+0x4c>)
    80a2:	233d      	movs	r3, #61	; 0x3d
    80a4:	4632      	mov	r2, r6
    80a6:	490a      	ldr	r1, [pc, #40]	; (80d0 <init_mem_slab_module+0x50>)
    80a8:	480a      	ldr	r0, [pc, #40]	; (80d4 <init_mem_slab_module+0x54>)
    80aa:	f003 f9af 	bl	b40c <assert_print>
    80ae:	480a      	ldr	r0, [pc, #40]	; (80d8 <init_mem_slab_module+0x58>)
    80b0:	f003 f9ac 	bl	b40c <assert_print>
    80b4:	213d      	movs	r1, #61	; 0x3d
    80b6:	4630      	mov	r0, r6
    80b8:	f003 f9a1 	bl	b3fe <assert_post_action>
    80bc:	e7e4      	b.n	8088 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    80be:	4628      	mov	r0, r5
    80c0:	bd70      	pop	{r4, r5, r6, pc}
    80c2:	bf00      	nop
    80c4:	200001f8 	.word	0x200001f8
    80c8:	200001f8 	.word	0x200001f8
    80cc:	0000e524 	.word	0x0000e524
    80d0:	0000e54c 	.word	0x0000e54c
    80d4:	0000c8bc 	.word	0x0000c8bc
    80d8:	0000e56c 	.word	0x0000e56c

000080dc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    80dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80e0:	b082      	sub	sp, #8
    80e2:	4604      	mov	r4, r0
    80e4:	460e      	mov	r6, r1
    80e6:	4690      	mov	r8, r2
    80e8:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    80ea:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    80ee:	f04f 0320 	mov.w	r3, #32
    80f2:	f3ef 8711 	mrs	r7, BASEPRI
    80f6:	f383 8812 	msr	BASEPRI_MAX, r3
    80fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80fe:	4628      	mov	r0, r5
    8100:	f000 f8d8 	bl	82b4 <z_spin_lock_valid>
    8104:	b1c0      	cbz	r0, 8138 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    8106:	4628      	mov	r0, r5
    8108:	f000 f8f4 	bl	82f4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    810c:	69a1      	ldr	r1, [r4, #24]
    810e:	b321      	cbz	r1, 815a <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    8110:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    8112:	69a3      	ldr	r3, [r4, #24]
    8114:	681b      	ldr	r3, [r3, #0]
    8116:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    8118:	69e3      	ldr	r3, [r4, #28]
    811a:	3301      	adds	r3, #1
    811c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    811e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8120:	4628      	mov	r0, r5
    8122:	f000 f8d7 	bl	82d4 <z_spin_unlock_valid>
    8126:	b388      	cbz	r0, 818c <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    8128:	f387 8811 	msr	BASEPRI, r7
    812c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    8130:	4620      	mov	r0, r4
    8132:	b002      	add	sp, #8
    8134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8138:	f8df a070 	ldr.w	sl, [pc, #112]	; 81ac <k_mem_slab_alloc+0xd0>
    813c:	238e      	movs	r3, #142	; 0x8e
    813e:	4652      	mov	r2, sl
    8140:	491b      	ldr	r1, [pc, #108]	; (81b0 <k_mem_slab_alloc+0xd4>)
    8142:	481c      	ldr	r0, [pc, #112]	; (81b4 <k_mem_slab_alloc+0xd8>)
    8144:	f003 f962 	bl	b40c <assert_print>
    8148:	4629      	mov	r1, r5
    814a:	481b      	ldr	r0, [pc, #108]	; (81b8 <k_mem_slab_alloc+0xdc>)
    814c:	f003 f95e 	bl	b40c <assert_print>
    8150:	218e      	movs	r1, #142	; 0x8e
    8152:	4650      	mov	r0, sl
    8154:	f003 f953 	bl	b3fe <assert_post_action>
    8158:	e7d5      	b.n	8106 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    815a:	ea59 0308 	orrs.w	r3, r9, r8
    815e:	d104      	bne.n	816a <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    8160:	2300      	movs	r3, #0
    8162:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    8164:	f06f 040b 	mvn.w	r4, #11
    8168:	e7da      	b.n	8120 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    816a:	f8cd 8000 	str.w	r8, [sp]
    816e:	f8cd 9004 	str.w	r9, [sp, #4]
    8172:	4622      	mov	r2, r4
    8174:	4639      	mov	r1, r7
    8176:	4628      	mov	r0, r5
    8178:	f001 fb38 	bl	97ec <z_pend_curr>
		if (result == 0) {
    817c:	4604      	mov	r4, r0
    817e:	2800      	cmp	r0, #0
    8180:	d1d6      	bne.n	8130 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8182:	4b0e      	ldr	r3, [pc, #56]	; (81bc <k_mem_slab_alloc+0xe0>)
    8184:	689b      	ldr	r3, [r3, #8]
    8186:	695b      	ldr	r3, [r3, #20]
    8188:	6033      	str	r3, [r6, #0]
		return result;
    818a:	e7d1      	b.n	8130 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    818c:	4e07      	ldr	r6, [pc, #28]	; (81ac <k_mem_slab_alloc+0xd0>)
    818e:	23b9      	movs	r3, #185	; 0xb9
    8190:	4632      	mov	r2, r6
    8192:	490b      	ldr	r1, [pc, #44]	; (81c0 <k_mem_slab_alloc+0xe4>)
    8194:	4807      	ldr	r0, [pc, #28]	; (81b4 <k_mem_slab_alloc+0xd8>)
    8196:	f003 f939 	bl	b40c <assert_print>
    819a:	4629      	mov	r1, r5
    819c:	4809      	ldr	r0, [pc, #36]	; (81c4 <k_mem_slab_alloc+0xe8>)
    819e:	f003 f935 	bl	b40c <assert_print>
    81a2:	21b9      	movs	r1, #185	; 0xb9
    81a4:	4630      	mov	r0, r6
    81a6:	f003 f92a 	bl	b3fe <assert_post_action>
    81aa:	e7bd      	b.n	8128 <k_mem_slab_alloc+0x4c>
    81ac:	0000cfb0 	.word	0x0000cfb0
    81b0:	0000d010 	.word	0x0000d010
    81b4:	0000c8bc 	.word	0x0000c8bc
    81b8:	0000d028 	.word	0x0000d028
    81bc:	20001154 	.word	0x20001154
    81c0:	0000cfe0 	.word	0x0000cfe0
    81c4:	0000cff8 	.word	0x0000cff8

000081c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    81c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81cc:	4604      	mov	r4, r0
    81ce:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    81d0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    81d4:	f04f 0320 	mov.w	r3, #32
    81d8:	f3ef 8711 	mrs	r7, BASEPRI
    81dc:	f383 8812 	msr	BASEPRI_MAX, r3
    81e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81e4:	4630      	mov	r0, r6
    81e6:	f000 f865 	bl	82b4 <z_spin_lock_valid>
    81ea:	b1b0      	cbz	r0, 821a <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    81ec:	4630      	mov	r0, r6
    81ee:	f000 f881 	bl	82f4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    81f2:	69a3      	ldr	r3, [r4, #24]
    81f4:	b313      	cbz	r3, 823c <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    81f6:	682b      	ldr	r3, [r5, #0]
    81f8:	69a2      	ldr	r2, [r4, #24]
    81fa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    81fc:	682b      	ldr	r3, [r5, #0]
    81fe:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8200:	69e3      	ldr	r3, [r4, #28]
    8202:	3b01      	subs	r3, #1
    8204:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8206:	4630      	mov	r0, r6
    8208:	f000 f864 	bl	82d4 <z_spin_unlock_valid>
    820c:	b338      	cbz	r0, 825e <k_mem_slab_free+0x96>
	__asm__ volatile(
    820e:	f387 8811 	msr	BASEPRI, r7
    8212:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    821a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8280 <k_mem_slab_free+0xb8>
    821e:	238e      	movs	r3, #142	; 0x8e
    8220:	4642      	mov	r2, r8
    8222:	4918      	ldr	r1, [pc, #96]	; (8284 <k_mem_slab_free+0xbc>)
    8224:	4818      	ldr	r0, [pc, #96]	; (8288 <k_mem_slab_free+0xc0>)
    8226:	f003 f8f1 	bl	b40c <assert_print>
    822a:	4631      	mov	r1, r6
    822c:	4817      	ldr	r0, [pc, #92]	; (828c <k_mem_slab_free+0xc4>)
    822e:	f003 f8ed 	bl	b40c <assert_print>
    8232:	218e      	movs	r1, #142	; 0x8e
    8234:	4640      	mov	r0, r8
    8236:	f003 f8e2 	bl	b3fe <assert_post_action>
    823a:	e7d7      	b.n	81ec <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    823c:	4620      	mov	r0, r4
    823e:	f001 fd71 	bl	9d24 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8242:	2800      	cmp	r0, #0
    8244:	d0d7      	beq.n	81f6 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8246:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8248:	2100      	movs	r1, #0
    824a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    824e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8250:	f001 f8f0 	bl	9434 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8254:	4639      	mov	r1, r7
    8256:	4630      	mov	r0, r6
    8258:	f000 fe48 	bl	8eec <z_reschedule>
			return;
    825c:	e7db      	b.n	8216 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    825e:	4c08      	ldr	r4, [pc, #32]	; (8280 <k_mem_slab_free+0xb8>)
    8260:	23b9      	movs	r3, #185	; 0xb9
    8262:	4622      	mov	r2, r4
    8264:	490a      	ldr	r1, [pc, #40]	; (8290 <k_mem_slab_free+0xc8>)
    8266:	4808      	ldr	r0, [pc, #32]	; (8288 <k_mem_slab_free+0xc0>)
    8268:	f003 f8d0 	bl	b40c <assert_print>
    826c:	4631      	mov	r1, r6
    826e:	4809      	ldr	r0, [pc, #36]	; (8294 <k_mem_slab_free+0xcc>)
    8270:	f003 f8cc 	bl	b40c <assert_print>
    8274:	21b9      	movs	r1, #185	; 0xb9
    8276:	4620      	mov	r0, r4
    8278:	f003 f8c1 	bl	b3fe <assert_post_action>
    827c:	e7c7      	b.n	820e <k_mem_slab_free+0x46>
    827e:	bf00      	nop
    8280:	0000cfb0 	.word	0x0000cfb0
    8284:	0000d010 	.word	0x0000d010
    8288:	0000c8bc 	.word	0x0000c8bc
    828c:	0000d028 	.word	0x0000d028
    8290:	0000cfe0 	.word	0x0000cfe0
    8294:	0000cff8 	.word	0x0000cff8

00008298 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    8298:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    829a:	ea53 0102 	orrs.w	r1, r3, r2
    829e:	d102      	bne.n	82a6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    82a0:	f003 ffa8 	bl	c1f4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    82a4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    82a6:	4902      	ldr	r1, [pc, #8]	; (82b0 <schedule_new_thread+0x18>)
    82a8:	3018      	adds	r0, #24
    82aa:	f002 f86d 	bl	a388 <z_add_timeout>
    82ae:	e7f9      	b.n	82a4 <schedule_new_thread+0xc>
    82b0:	00009591 	.word	0x00009591

000082b4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    82b4:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    82b6:	b13b      	cbz	r3, 82c8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    82b8:	f003 0303 	and.w	r3, r3, #3
    82bc:	4a04      	ldr	r2, [pc, #16]	; (82d0 <z_spin_lock_valid+0x1c>)
    82be:	7d12      	ldrb	r2, [r2, #20]
    82c0:	4293      	cmp	r3, r2
    82c2:	d003      	beq.n	82cc <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
    82c8:	2001      	movs	r0, #1
    82ca:	4770      	bx	lr
			return false;
    82cc:	2000      	movs	r0, #0
}
    82ce:	4770      	bx	lr
    82d0:	20001154 	.word	0x20001154

000082d4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    82d4:	6801      	ldr	r1, [r0, #0]
    82d6:	4a06      	ldr	r2, [pc, #24]	; (82f0 <z_spin_unlock_valid+0x1c>)
    82d8:	7d13      	ldrb	r3, [r2, #20]
    82da:	6892      	ldr	r2, [r2, #8]
    82dc:	4313      	orrs	r3, r2
    82de:	4299      	cmp	r1, r3
    82e0:	d103      	bne.n	82ea <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    82e2:	2300      	movs	r3, #0
    82e4:	6003      	str	r3, [r0, #0]
	return true;
    82e6:	2001      	movs	r0, #1
    82e8:	4770      	bx	lr
		return false;
    82ea:	2000      	movs	r0, #0
}
    82ec:	4770      	bx	lr
    82ee:	bf00      	nop
    82f0:	20001154 	.word	0x20001154

000082f4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    82f4:	4a02      	ldr	r2, [pc, #8]	; (8300 <z_spin_lock_set_owner+0xc>)
    82f6:	7d13      	ldrb	r3, [r2, #20]
    82f8:	6892      	ldr	r2, [r2, #8]
    82fa:	4313      	orrs	r3, r2
    82fc:	6003      	str	r3, [r0, #0]
}
    82fe:	4770      	bx	lr
    8300:	20001154 	.word	0x20001154

00008304 <z_thread_monitor_exit>:
{
    8304:	b570      	push	{r4, r5, r6, lr}
    8306:	4604      	mov	r4, r0
	__asm__ volatile(
    8308:	f04f 0320 	mov.w	r3, #32
    830c:	f3ef 8511 	mrs	r5, BASEPRI
    8310:	f383 8812 	msr	BASEPRI_MAX, r3
    8314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8318:	481f      	ldr	r0, [pc, #124]	; (8398 <z_thread_monitor_exit+0x94>)
    831a:	f7ff ffcb 	bl	82b4 <z_spin_lock_valid>
    831e:	b150      	cbz	r0, 8336 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    8320:	481d      	ldr	r0, [pc, #116]	; (8398 <z_thread_monitor_exit+0x94>)
    8322:	f7ff ffe7 	bl	82f4 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    8326:	4b1d      	ldr	r3, [pc, #116]	; (839c <z_thread_monitor_exit+0x98>)
    8328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    832a:	42a3      	cmp	r3, r4
    832c:	d114      	bne.n	8358 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    832e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    8330:	4b1a      	ldr	r3, [pc, #104]	; (839c <z_thread_monitor_exit+0x98>)
    8332:	629a      	str	r2, [r3, #40]	; 0x28
    8334:	e017      	b.n	8366 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8336:	4e1a      	ldr	r6, [pc, #104]	; (83a0 <z_thread_monitor_exit+0x9c>)
    8338:	238e      	movs	r3, #142	; 0x8e
    833a:	4632      	mov	r2, r6
    833c:	4919      	ldr	r1, [pc, #100]	; (83a4 <z_thread_monitor_exit+0xa0>)
    833e:	481a      	ldr	r0, [pc, #104]	; (83a8 <z_thread_monitor_exit+0xa4>)
    8340:	f003 f864 	bl	b40c <assert_print>
    8344:	4914      	ldr	r1, [pc, #80]	; (8398 <z_thread_monitor_exit+0x94>)
    8346:	4819      	ldr	r0, [pc, #100]	; (83ac <z_thread_monitor_exit+0xa8>)
    8348:	f003 f860 	bl	b40c <assert_print>
    834c:	218e      	movs	r1, #142	; 0x8e
    834e:	4630      	mov	r0, r6
    8350:	f003 f855 	bl	b3fe <assert_post_action>
    8354:	e7e4      	b.n	8320 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    8356:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    8358:	b113      	cbz	r3, 8360 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    835a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    835c:	42a2      	cmp	r2, r4
    835e:	d1fa      	bne.n	8356 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    8360:	b10b      	cbz	r3, 8366 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    8362:	6f22      	ldr	r2, [r4, #112]	; 0x70
    8364:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8366:	480c      	ldr	r0, [pc, #48]	; (8398 <z_thread_monitor_exit+0x94>)
    8368:	f7ff ffb4 	bl	82d4 <z_spin_unlock_valid>
    836c:	b120      	cbz	r0, 8378 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    836e:	f385 8811 	msr	BASEPRI, r5
    8372:	f3bf 8f6f 	isb	sy
}
    8376:	bd70      	pop	{r4, r5, r6, pc}
    8378:	4c09      	ldr	r4, [pc, #36]	; (83a0 <z_thread_monitor_exit+0x9c>)
    837a:	23b9      	movs	r3, #185	; 0xb9
    837c:	4622      	mov	r2, r4
    837e:	490c      	ldr	r1, [pc, #48]	; (83b0 <z_thread_monitor_exit+0xac>)
    8380:	4809      	ldr	r0, [pc, #36]	; (83a8 <z_thread_monitor_exit+0xa4>)
    8382:	f003 f843 	bl	b40c <assert_print>
    8386:	4904      	ldr	r1, [pc, #16]	; (8398 <z_thread_monitor_exit+0x94>)
    8388:	480a      	ldr	r0, [pc, #40]	; (83b4 <z_thread_monitor_exit+0xb0>)
    838a:	f003 f83f 	bl	b40c <assert_print>
    838e:	21b9      	movs	r1, #185	; 0xb9
    8390:	4620      	mov	r0, r4
    8392:	f003 f834 	bl	b3fe <assert_post_action>
    8396:	e7ea      	b.n	836e <z_thread_monitor_exit+0x6a>
    8398:	20001180 	.word	0x20001180
    839c:	20001154 	.word	0x20001154
    83a0:	0000cfb0 	.word	0x0000cfb0
    83a4:	0000d010 	.word	0x0000d010
    83a8:	0000c8bc 	.word	0x0000c8bc
    83ac:	0000d028 	.word	0x0000d028
    83b0:	0000cfe0 	.word	0x0000cfe0
    83b4:	0000cff8 	.word	0x0000cff8

000083b8 <z_setup_new_thread>:
{
    83b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83bc:	b085      	sub	sp, #20
    83be:	4604      	mov	r4, r0
    83c0:	460e      	mov	r6, r1
    83c2:	4690      	mov	r8, r2
    83c4:	461d      	mov	r5, r3
    83c6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    83ca:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    83ce:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    83d0:	2f0f      	cmp	r7, #15
    83d2:	d05e      	beq.n	8492 <z_setup_new_thread+0xda>
    83d4:	f107 0310 	add.w	r3, r7, #16
    83d8:	2b1e      	cmp	r3, #30
    83da:	d85e      	bhi.n	849a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    83dc:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    83e0:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    83e2:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    83e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    83e6:	2204      	movs	r2, #4
    83e8:	4639      	mov	r1, r7
    83ea:	4620      	mov	r0, r4
    83ec:	f003 ff06 	bl	c1fc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    83f0:	4642      	mov	r2, r8
    83f2:	4631      	mov	r1, r6
    83f4:	4620      	mov	r0, r4
    83f6:	f003 fee3 	bl	c1c0 <setup_thread_stack>
    83fa:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    83fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83fe:	9302      	str	r3, [sp, #8]
    8400:	f8cd a004 	str.w	sl, [sp, #4]
    8404:	f8cd b000 	str.w	fp, [sp]
    8408:	462b      	mov	r3, r5
    840a:	4602      	mov	r2, r0
    840c:	4631      	mov	r1, r6
    840e:	4620      	mov	r0, r4
    8410:	f7fb fa76 	bl	3900 <arch_new_thread>
	new_thread->init_data = NULL;
    8414:	2300      	movs	r3, #0
    8416:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    8418:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    841a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    841e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    8422:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8424:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    8426:	f04f 0320 	mov.w	r3, #32
    842a:	f3ef 8611 	mrs	r6, BASEPRI
    842e:	f383 8812 	msr	BASEPRI_MAX, r3
    8432:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8436:	4837      	ldr	r0, [pc, #220]	; (8514 <z_setup_new_thread+0x15c>)
    8438:	f7ff ff3c 	bl	82b4 <z_spin_lock_valid>
    843c:	2800      	cmp	r0, #0
    843e:	d042      	beq.n	84c6 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    8440:	4d34      	ldr	r5, [pc, #208]	; (8514 <z_setup_new_thread+0x15c>)
    8442:	4628      	mov	r0, r5
    8444:	f7ff ff56 	bl	82f4 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    8448:	4b33      	ldr	r3, [pc, #204]	; (8518 <z_setup_new_thread+0x160>)
    844a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    844c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    844e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8450:	4628      	mov	r0, r5
    8452:	f7ff ff3f 	bl	82d4 <z_spin_unlock_valid>
    8456:	2800      	cmp	r0, #0
    8458:	d045      	beq.n	84e6 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    845a:	f386 8811 	msr	BASEPRI, r6
    845e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    8462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8464:	2b00      	cmp	r3, #0
    8466:	d04e      	beq.n	8506 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    8468:	221f      	movs	r2, #31
    846a:	4619      	mov	r1, r3
    846c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8470:	f003 f92c 	bl	b6cc <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    8474:	2300      	movs	r3, #0
    8476:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    847a:	4b27      	ldr	r3, [pc, #156]	; (8518 <z_setup_new_thread+0x160>)
    847c:	689b      	ldr	r3, [r3, #8]
    847e:	2b00      	cmp	r3, #0
    8480:	d045      	beq.n	850e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    8482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    8486:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    848a:	4638      	mov	r0, r7
    848c:	b005      	add	sp, #20
    848e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    8492:	4b22      	ldr	r3, [pc, #136]	; (851c <z_setup_new_thread+0x164>)
    8494:	429d      	cmp	r5, r3
    8496:	d19d      	bne.n	83d4 <z_setup_new_thread+0x1c>
    8498:	e7a0      	b.n	83dc <z_setup_new_thread+0x24>
    849a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8520 <z_setup_new_thread+0x168>
    849e:	f240 13ff 	movw	r3, #511	; 0x1ff
    84a2:	464a      	mov	r2, r9
    84a4:	491f      	ldr	r1, [pc, #124]	; (8524 <z_setup_new_thread+0x16c>)
    84a6:	4820      	ldr	r0, [pc, #128]	; (8528 <z_setup_new_thread+0x170>)
    84a8:	f002 ffb0 	bl	b40c <assert_print>
    84ac:	f06f 030f 	mvn.w	r3, #15
    84b0:	220e      	movs	r2, #14
    84b2:	4639      	mov	r1, r7
    84b4:	481d      	ldr	r0, [pc, #116]	; (852c <z_setup_new_thread+0x174>)
    84b6:	f002 ffa9 	bl	b40c <assert_print>
    84ba:	f240 11ff 	movw	r1, #511	; 0x1ff
    84be:	4648      	mov	r0, r9
    84c0:	f002 ff9d 	bl	b3fe <assert_post_action>
    84c4:	e78a      	b.n	83dc <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84c6:	4d1a      	ldr	r5, [pc, #104]	; (8530 <z_setup_new_thread+0x178>)
    84c8:	238e      	movs	r3, #142	; 0x8e
    84ca:	462a      	mov	r2, r5
    84cc:	4919      	ldr	r1, [pc, #100]	; (8534 <z_setup_new_thread+0x17c>)
    84ce:	4816      	ldr	r0, [pc, #88]	; (8528 <z_setup_new_thread+0x170>)
    84d0:	f002 ff9c 	bl	b40c <assert_print>
    84d4:	490f      	ldr	r1, [pc, #60]	; (8514 <z_setup_new_thread+0x15c>)
    84d6:	4818      	ldr	r0, [pc, #96]	; (8538 <z_setup_new_thread+0x180>)
    84d8:	f002 ff98 	bl	b40c <assert_print>
    84dc:	218e      	movs	r1, #142	; 0x8e
    84de:	4628      	mov	r0, r5
    84e0:	f002 ff8d 	bl	b3fe <assert_post_action>
    84e4:	e7ac      	b.n	8440 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84e6:	4d12      	ldr	r5, [pc, #72]	; (8530 <z_setup_new_thread+0x178>)
    84e8:	23b9      	movs	r3, #185	; 0xb9
    84ea:	462a      	mov	r2, r5
    84ec:	4913      	ldr	r1, [pc, #76]	; (853c <z_setup_new_thread+0x184>)
    84ee:	480e      	ldr	r0, [pc, #56]	; (8528 <z_setup_new_thread+0x170>)
    84f0:	f002 ff8c 	bl	b40c <assert_print>
    84f4:	4907      	ldr	r1, [pc, #28]	; (8514 <z_setup_new_thread+0x15c>)
    84f6:	4812      	ldr	r0, [pc, #72]	; (8540 <z_setup_new_thread+0x188>)
    84f8:	f002 ff88 	bl	b40c <assert_print>
    84fc:	21b9      	movs	r1, #185	; 0xb9
    84fe:	4628      	mov	r0, r5
    8500:	f002 ff7d 	bl	b3fe <assert_post_action>
    8504:	e7a9      	b.n	845a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    8506:	2300      	movs	r3, #0
    8508:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    850c:	e7b5      	b.n	847a <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    850e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    8512:	e7ba      	b.n	848a <z_setup_new_thread+0xd2>
    8514:	20001180 	.word	0x20001180
    8518:	20001154 	.word	0x20001154
    851c:	000086cd 	.word	0x000086cd
    8520:	0000e58c 	.word	0x0000e58c
    8524:	0000e5e4 	.word	0x0000e5e4
    8528:	0000c8bc 	.word	0x0000c8bc
    852c:	0000e664 	.word	0x0000e664
    8530:	0000cfb0 	.word	0x0000cfb0
    8534:	0000d010 	.word	0x0000d010
    8538:	0000d028 	.word	0x0000d028
    853c:	0000cfe0 	.word	0x0000cfe0
    8540:	0000cff8 	.word	0x0000cff8

00008544 <z_impl_k_thread_create>:
{
    8544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8548:	b086      	sub	sp, #24
    854a:	4604      	mov	r4, r0
    854c:	460d      	mov	r5, r1
    854e:	4616      	mov	r6, r2
    8550:	461f      	mov	r7, r3
    8552:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    8556:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    855a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    855e:	b9db      	cbnz	r3, 8598 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8560:	2300      	movs	r3, #0
    8562:	9305      	str	r3, [sp, #20]
    8564:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8566:	9304      	str	r3, [sp, #16]
    8568:	9b11      	ldr	r3, [sp, #68]	; 0x44
    856a:	9303      	str	r3, [sp, #12]
    856c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    856e:	9302      	str	r3, [sp, #8]
    8570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8572:	9301      	str	r3, [sp, #4]
    8574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8576:	9300      	str	r3, [sp, #0]
    8578:	463b      	mov	r3, r7
    857a:	4632      	mov	r2, r6
    857c:	4629      	mov	r1, r5
    857e:	4620      	mov	r0, r4
    8580:	f7ff ff1a 	bl	83b8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8584:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    8588:	bf08      	it	eq
    858a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    858e:	d115      	bne.n	85bc <z_impl_k_thread_create+0x78>
}
    8590:	4620      	mov	r0, r4
    8592:	b006      	add	sp, #24
    8594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    8598:	f8df a02c 	ldr.w	sl, [pc, #44]	; 85c8 <z_impl_k_thread_create+0x84>
    859c:	f240 236e 	movw	r3, #622	; 0x26e
    85a0:	4652      	mov	r2, sl
    85a2:	490a      	ldr	r1, [pc, #40]	; (85cc <z_impl_k_thread_create+0x88>)
    85a4:	480a      	ldr	r0, [pc, #40]	; (85d0 <z_impl_k_thread_create+0x8c>)
    85a6:	f002 ff31 	bl	b40c <assert_print>
    85aa:	480a      	ldr	r0, [pc, #40]	; (85d4 <z_impl_k_thread_create+0x90>)
    85ac:	f002 ff2e 	bl	b40c <assert_print>
    85b0:	f240 216e 	movw	r1, #622	; 0x26e
    85b4:	4650      	mov	r0, sl
    85b6:	f002 ff22 	bl	b3fe <assert_post_action>
    85ba:	e7d1      	b.n	8560 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    85bc:	464a      	mov	r2, r9
    85be:	4643      	mov	r3, r8
    85c0:	4620      	mov	r0, r4
    85c2:	f7ff fe69 	bl	8298 <schedule_new_thread>
    85c6:	e7e3      	b.n	8590 <z_impl_k_thread_create+0x4c>
    85c8:	0000e58c 	.word	0x0000e58c
    85cc:	0000e698 	.word	0x0000e698
    85d0:	0000c8bc 	.word	0x0000c8bc
    85d4:	0000e6ac 	.word	0x0000e6ac

000085d8 <z_init_static_threads>:
{
    85d8:	b530      	push	{r4, r5, lr}
    85da:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    85dc:	4c35      	ldr	r4, [pc, #212]	; (86b4 <z_init_static_threads+0xdc>)
    85de:	e017      	b.n	8610 <z_init_static_threads+0x38>
    85e0:	4b35      	ldr	r3, [pc, #212]	; (86b8 <z_init_static_threads+0xe0>)
    85e2:	429c      	cmp	r4, r3
    85e4:	d228      	bcs.n	8638 <z_init_static_threads+0x60>
		z_setup_new_thread(
    85e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    85e8:	9305      	str	r3, [sp, #20]
    85ea:	6a23      	ldr	r3, [r4, #32]
    85ec:	9304      	str	r3, [sp, #16]
    85ee:	69e3      	ldr	r3, [r4, #28]
    85f0:	9303      	str	r3, [sp, #12]
    85f2:	69a3      	ldr	r3, [r4, #24]
    85f4:	9302      	str	r3, [sp, #8]
    85f6:	6963      	ldr	r3, [r4, #20]
    85f8:	9301      	str	r3, [sp, #4]
    85fa:	6923      	ldr	r3, [r4, #16]
    85fc:	9300      	str	r3, [sp, #0]
    85fe:	68e3      	ldr	r3, [r4, #12]
    8600:	68a2      	ldr	r2, [r4, #8]
    8602:	6861      	ldr	r1, [r4, #4]
    8604:	6820      	ldr	r0, [r4, #0]
    8606:	f7ff fed7 	bl	83b8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    860a:	6823      	ldr	r3, [r4, #0]
    860c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    860e:	3430      	adds	r4, #48	; 0x30
    8610:	4b29      	ldr	r3, [pc, #164]	; (86b8 <z_init_static_threads+0xe0>)
    8612:	429c      	cmp	r4, r3
    8614:	d9e4      	bls.n	85e0 <z_init_static_threads+0x8>
    8616:	4d29      	ldr	r5, [pc, #164]	; (86bc <z_init_static_threads+0xe4>)
    8618:	f240 23d5 	movw	r3, #725	; 0x2d5
    861c:	462a      	mov	r2, r5
    861e:	4928      	ldr	r1, [pc, #160]	; (86c0 <z_init_static_threads+0xe8>)
    8620:	4828      	ldr	r0, [pc, #160]	; (86c4 <z_init_static_threads+0xec>)
    8622:	f002 fef3 	bl	b40c <assert_print>
    8626:	4828      	ldr	r0, [pc, #160]	; (86c8 <z_init_static_threads+0xf0>)
    8628:	f002 fef0 	bl	b40c <assert_print>
    862c:	f240 21d5 	movw	r1, #725	; 0x2d5
    8630:	4628      	mov	r0, r5
    8632:	f002 fee4 	bl	b3fe <assert_post_action>
    8636:	e7d3      	b.n	85e0 <z_init_static_threads+0x8>
	k_sched_lock();
    8638:	f000 fca6 	bl	8f88 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    863c:	4c1d      	ldr	r4, [pc, #116]	; (86b4 <z_init_static_threads+0xdc>)
    863e:	e000      	b.n	8642 <z_init_static_threads+0x6a>
    8640:	3430      	adds	r4, #48	; 0x30
    8642:	4b1d      	ldr	r3, [pc, #116]	; (86b8 <z_init_static_threads+0xe0>)
    8644:	429c      	cmp	r4, r3
    8646:	d81f      	bhi.n	8688 <z_init_static_threads+0xb0>
    8648:	4b1b      	ldr	r3, [pc, #108]	; (86b8 <z_init_static_threads+0xe0>)
    864a:	429c      	cmp	r4, r3
    864c:	d22d      	bcs.n	86aa <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    864e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8650:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8654:	d0f4      	beq.n	8640 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    8656:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    8658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    865c:	17c1      	asrs	r1, r0, #31
    865e:	03c9      	lsls	r1, r1, #15
    8660:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    8664:	03c0      	lsls	r0, r0, #15
    8666:	f240 33e7 	movw	r3, #999	; 0x3e7
    866a:	18c0      	adds	r0, r0, r3
    866c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8670:	f04f 0300 	mov.w	r3, #0
    8674:	f141 0100 	adc.w	r1, r1, #0
    8678:	f7f7 ff24 	bl	4c4 <__aeabi_uldivmod>
    867c:	4602      	mov	r2, r0
    867e:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    8680:	4628      	mov	r0, r5
    8682:	f7ff fe09 	bl	8298 <schedule_new_thread>
    8686:	e7db      	b.n	8640 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    8688:	4d0c      	ldr	r5, [pc, #48]	; (86bc <z_init_static_threads+0xe4>)
    868a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    868e:	462a      	mov	r2, r5
    8690:	490b      	ldr	r1, [pc, #44]	; (86c0 <z_init_static_threads+0xe8>)
    8692:	480c      	ldr	r0, [pc, #48]	; (86c4 <z_init_static_threads+0xec>)
    8694:	f002 feba 	bl	b40c <assert_print>
    8698:	480b      	ldr	r0, [pc, #44]	; (86c8 <z_init_static_threads+0xf0>)
    869a:	f002 feb7 	bl	b40c <assert_print>
    869e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    86a2:	4628      	mov	r0, r5
    86a4:	f002 feab 	bl	b3fe <assert_post_action>
    86a8:	e7ce      	b.n	8648 <z_init_static_threads+0x70>
	k_sched_unlock();
    86aa:	f001 f9f9 	bl	9aa0 <k_sched_unlock>
}
    86ae:	b007      	add	sp, #28
    86b0:	bd30      	pop	{r4, r5, pc}
    86b2:	bf00      	nop
    86b4:	200001f8 	.word	0x200001f8
    86b8:	200001f8 	.word	0x200001f8
    86bc:	0000e58c 	.word	0x0000e58c
    86c0:	0000e6d4 	.word	0x0000e6d4
    86c4:	0000c8bc 	.word	0x0000c8bc
    86c8:	0000e56c 	.word	0x0000e56c

000086cc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    86cc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    86ce:	4b14      	ldr	r3, [pc, #80]	; (8720 <idle+0x54>)
    86d0:	689b      	ldr	r3, [r3, #8]
    86d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    86d6:	2b00      	cmp	r3, #0
    86d8:	da0d      	bge.n	86f6 <idle+0x2a>
    86da:	4c12      	ldr	r4, [pc, #72]	; (8724 <idle+0x58>)
    86dc:	2327      	movs	r3, #39	; 0x27
    86de:	4622      	mov	r2, r4
    86e0:	4911      	ldr	r1, [pc, #68]	; (8728 <idle+0x5c>)
    86e2:	4812      	ldr	r0, [pc, #72]	; (872c <idle+0x60>)
    86e4:	f002 fe92 	bl	b40c <assert_print>
    86e8:	2127      	movs	r1, #39	; 0x27
    86ea:	4620      	mov	r0, r4
    86ec:	f002 fe87 	bl	b3fe <assert_post_action>
    86f0:	e001      	b.n	86f6 <idle+0x2a>
	arch_cpu_idle();
    86f2:	f7fa ffd9 	bl	36a8 <arch_cpu_idle>
	__asm__ volatile(
    86f6:	f04f 0220 	mov.w	r2, #32
    86fa:	f3ef 8311 	mrs	r3, BASEPRI
    86fe:	f382 8812 	msr	BASEPRI_MAX, r2
    8702:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    8706:	f001 ff7d 	bl	a604 <z_get_next_timeout_expiry>
    870a:	4b05      	ldr	r3, [pc, #20]	; (8720 <idle+0x54>)
    870c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    870e:	4b08      	ldr	r3, [pc, #32]	; (8730 <idle+0x64>)
    8710:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8712:	2b00      	cmp	r3, #0
    8714:	d0ed      	beq.n	86f2 <idle+0x26>
    8716:	f7fa fd93 	bl	3240 <pm_system_suspend>
    871a:	2800      	cmp	r0, #0
    871c:	d1eb      	bne.n	86f6 <idle+0x2a>
    871e:	e7e8      	b.n	86f2 <idle+0x26>
    8720:	20001154 	.word	0x20001154
    8724:	0000e704 	.word	0x0000e704
    8728:	0000e728 	.word	0x0000e728
    872c:	0000c8bc 	.word	0x0000c8bc
    8730:	20001386 	.word	0x20001386

00008734 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8738:	b083      	sub	sp, #12
    873a:	4604      	mov	r4, r0
    873c:	4616      	mov	r6, r2
    873e:	461d      	mov	r5, r3
    8740:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8744:	2900      	cmp	r1, #0
    8746:	d12b      	bne.n	87a0 <z_impl_k_mutex_lock+0x6c>
    8748:	f04f 0320 	mov.w	r3, #32
    874c:	f3ef 8711 	mrs	r7, BASEPRI
    8750:	f383 8812 	msr	BASEPRI_MAX, r3
    8754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8758:	487b      	ldr	r0, [pc, #492]	; (8948 <z_impl_k_mutex_lock+0x214>)
    875a:	f7ff fdab 	bl	82b4 <z_spin_lock_valid>
    875e:	2800      	cmp	r0, #0
    8760:	d02d      	beq.n	87be <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    8762:	4879      	ldr	r0, [pc, #484]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8764:	f7ff fdc6 	bl	82f4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8768:	68e1      	ldr	r1, [r4, #12]
    876a:	2900      	cmp	r1, #0
    876c:	d138      	bne.n	87e0 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    876e:	2900      	cmp	r1, #0
    8770:	d17d      	bne.n	886e <z_impl_k_mutex_lock+0x13a>
    8772:	4b76      	ldr	r3, [pc, #472]	; (894c <z_impl_k_mutex_lock+0x218>)
    8774:	689b      	ldr	r3, [r3, #8]
    8776:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    877a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    877c:	3101      	adds	r1, #1
    877e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    8780:	4b72      	ldr	r3, [pc, #456]	; (894c <z_impl_k_mutex_lock+0x218>)
    8782:	689b      	ldr	r3, [r3, #8]
    8784:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8786:	4870      	ldr	r0, [pc, #448]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8788:	f7ff fda4 	bl	82d4 <z_spin_unlock_valid>
    878c:	2800      	cmp	r0, #0
    878e:	d070      	beq.n	8872 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    8790:	f387 8811 	msr	BASEPRI, r7
    8794:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    8798:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    879a:	b003      	add	sp, #12
    879c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    87a0:	4f6b      	ldr	r7, [pc, #428]	; (8950 <z_impl_k_mutex_lock+0x21c>)
    87a2:	2365      	movs	r3, #101	; 0x65
    87a4:	463a      	mov	r2, r7
    87a6:	496b      	ldr	r1, [pc, #428]	; (8954 <z_impl_k_mutex_lock+0x220>)
    87a8:	486b      	ldr	r0, [pc, #428]	; (8958 <z_impl_k_mutex_lock+0x224>)
    87aa:	f002 fe2f 	bl	b40c <assert_print>
    87ae:	486b      	ldr	r0, [pc, #428]	; (895c <z_impl_k_mutex_lock+0x228>)
    87b0:	f002 fe2c 	bl	b40c <assert_print>
    87b4:	2165      	movs	r1, #101	; 0x65
    87b6:	4638      	mov	r0, r7
    87b8:	f002 fe21 	bl	b3fe <assert_post_action>
    87bc:	e7c4      	b.n	8748 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8960 <z_impl_k_mutex_lock+0x22c>
    87c2:	238e      	movs	r3, #142	; 0x8e
    87c4:	4642      	mov	r2, r8
    87c6:	4967      	ldr	r1, [pc, #412]	; (8964 <z_impl_k_mutex_lock+0x230>)
    87c8:	4863      	ldr	r0, [pc, #396]	; (8958 <z_impl_k_mutex_lock+0x224>)
    87ca:	f002 fe1f 	bl	b40c <assert_print>
    87ce:	495e      	ldr	r1, [pc, #376]	; (8948 <z_impl_k_mutex_lock+0x214>)
    87d0:	4865      	ldr	r0, [pc, #404]	; (8968 <z_impl_k_mutex_lock+0x234>)
    87d2:	f002 fe1b 	bl	b40c <assert_print>
    87d6:	218e      	movs	r1, #142	; 0x8e
    87d8:	4640      	mov	r0, r8
    87da:	f002 fe10 	bl	b3fe <assert_post_action>
    87de:	e7c0      	b.n	8762 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    87e0:	68a2      	ldr	r2, [r4, #8]
    87e2:	4b5a      	ldr	r3, [pc, #360]	; (894c <z_impl_k_mutex_lock+0x218>)
    87e4:	689b      	ldr	r3, [r3, #8]
    87e6:	429a      	cmp	r2, r3
    87e8:	d0c1      	beq.n	876e <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    87ea:	ea55 0106 	orrs.w	r1, r5, r6
    87ee:	bf0c      	ite	eq
    87f0:	f04f 0801 	moveq.w	r8, #1
    87f4:	f04f 0800 	movne.w	r8, #0
    87f8:	d04b      	beq.n	8892 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    87fa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    87fe:	4649      	mov	r1, r9
    8800:	f993 000e 	ldrsb.w	r0, [r3, #14]
    8804:	f003 fd0b 	bl	c21e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8808:	4581      	cmp	r9, r0
    880a:	dc5d      	bgt.n	88c8 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    880c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8810:	9600      	str	r6, [sp, #0]
    8812:	9501      	str	r5, [sp, #4]
    8814:	4622      	mov	r2, r4
    8816:	4639      	mov	r1, r7
    8818:	484b      	ldr	r0, [pc, #300]	; (8948 <z_impl_k_mutex_lock+0x214>)
    881a:	f000 ffe7 	bl	97ec <z_pend_curr>
	if (got_mutex == 0) {
    881e:	2800      	cmp	r0, #0
    8820:	d0bb      	beq.n	879a <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    8822:	f04f 0320 	mov.w	r3, #32
    8826:	f3ef 8511 	mrs	r5, BASEPRI
    882a:	f383 8812 	msr	BASEPRI_MAX, r3
    882e:	f3bf 8f6f 	isb	sy
    8832:	4845      	ldr	r0, [pc, #276]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8834:	f7ff fd3e 	bl	82b4 <z_spin_lock_valid>
    8838:	2800      	cmp	r0, #0
    883a:	d04b      	beq.n	88d4 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    883c:	4842      	ldr	r0, [pc, #264]	; (8948 <z_impl_k_mutex_lock+0x214>)
    883e:	f7ff fd59 	bl	82f4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8842:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8844:	42a3      	cmp	r3, r4
    8846:	d055      	beq.n	88f4 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8848:	2b00      	cmp	r3, #0
    884a:	d053      	beq.n	88f4 <z_impl_k_mutex_lock+0x1c0>
    884c:	6921      	ldr	r1, [r4, #16]
    884e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    8852:	f003 fce4 	bl	c21e <new_prio_for_inheritance>
    8856:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8858:	4620      	mov	r0, r4
    885a:	f003 fceb 	bl	c234 <adjust_owner_prio>
    885e:	2800      	cmp	r0, #0
    8860:	d14a      	bne.n	88f8 <z_impl_k_mutex_lock+0x1c4>
    8862:	f1b9 0f00 	cmp.w	r9, #0
    8866:	d049      	beq.n	88fc <z_impl_k_mutex_lock+0x1c8>
    8868:	f04f 0801 	mov.w	r8, #1
    886c:	e046      	b.n	88fc <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    886e:	6923      	ldr	r3, [r4, #16]
    8870:	e783      	b.n	877a <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8872:	4c3b      	ldr	r4, [pc, #236]	; (8960 <z_impl_k_mutex_lock+0x22c>)
    8874:	23b9      	movs	r3, #185	; 0xb9
    8876:	4622      	mov	r2, r4
    8878:	493c      	ldr	r1, [pc, #240]	; (896c <z_impl_k_mutex_lock+0x238>)
    887a:	4837      	ldr	r0, [pc, #220]	; (8958 <z_impl_k_mutex_lock+0x224>)
    887c:	f002 fdc6 	bl	b40c <assert_print>
    8880:	4931      	ldr	r1, [pc, #196]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8882:	483b      	ldr	r0, [pc, #236]	; (8970 <z_impl_k_mutex_lock+0x23c>)
    8884:	f002 fdc2 	bl	b40c <assert_print>
    8888:	21b9      	movs	r1, #185	; 0xb9
    888a:	4620      	mov	r0, r4
    888c:	f002 fdb7 	bl	b3fe <assert_post_action>
    8890:	e77e      	b.n	8790 <z_impl_k_mutex_lock+0x5c>
    8892:	482d      	ldr	r0, [pc, #180]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8894:	f7ff fd1e 	bl	82d4 <z_spin_unlock_valid>
    8898:	b130      	cbz	r0, 88a8 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    889a:	f387 8811 	msr	BASEPRI, r7
    889e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    88a2:	f06f 000f 	mvn.w	r0, #15
    88a6:	e778      	b.n	879a <z_impl_k_mutex_lock+0x66>
    88a8:	4c2d      	ldr	r4, [pc, #180]	; (8960 <z_impl_k_mutex_lock+0x22c>)
    88aa:	23b9      	movs	r3, #185	; 0xb9
    88ac:	4622      	mov	r2, r4
    88ae:	492f      	ldr	r1, [pc, #188]	; (896c <z_impl_k_mutex_lock+0x238>)
    88b0:	4829      	ldr	r0, [pc, #164]	; (8958 <z_impl_k_mutex_lock+0x224>)
    88b2:	f002 fdab 	bl	b40c <assert_print>
    88b6:	4924      	ldr	r1, [pc, #144]	; (8948 <z_impl_k_mutex_lock+0x214>)
    88b8:	482d      	ldr	r0, [pc, #180]	; (8970 <z_impl_k_mutex_lock+0x23c>)
    88ba:	f002 fda7 	bl	b40c <assert_print>
    88be:	21b9      	movs	r1, #185	; 0xb9
    88c0:	4620      	mov	r0, r4
    88c2:	f002 fd9c 	bl	b3fe <assert_post_action>
    88c6:	e7e8      	b.n	889a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    88c8:	4601      	mov	r1, r0
    88ca:	4620      	mov	r0, r4
    88cc:	f003 fcb2 	bl	c234 <adjust_owner_prio>
    88d0:	4681      	mov	r9, r0
    88d2:	e79d      	b.n	8810 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88d4:	4e22      	ldr	r6, [pc, #136]	; (8960 <z_impl_k_mutex_lock+0x22c>)
    88d6:	238e      	movs	r3, #142	; 0x8e
    88d8:	4632      	mov	r2, r6
    88da:	4922      	ldr	r1, [pc, #136]	; (8964 <z_impl_k_mutex_lock+0x230>)
    88dc:	481e      	ldr	r0, [pc, #120]	; (8958 <z_impl_k_mutex_lock+0x224>)
    88de:	f002 fd95 	bl	b40c <assert_print>
    88e2:	4919      	ldr	r1, [pc, #100]	; (8948 <z_impl_k_mutex_lock+0x214>)
    88e4:	4820      	ldr	r0, [pc, #128]	; (8968 <z_impl_k_mutex_lock+0x234>)
    88e6:	f002 fd91 	bl	b40c <assert_print>
    88ea:	218e      	movs	r1, #142	; 0x8e
    88ec:	4630      	mov	r0, r6
    88ee:	f002 fd86 	bl	b3fe <assert_post_action>
    88f2:	e7a3      	b.n	883c <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    88f4:	6921      	ldr	r1, [r4, #16]
    88f6:	e7af      	b.n	8858 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    88f8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    88fc:	f1b8 0f00 	cmp.w	r8, #0
    8900:	d006      	beq.n	8910 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    8902:	4629      	mov	r1, r5
    8904:	4810      	ldr	r0, [pc, #64]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8906:	f000 faf1 	bl	8eec <z_reschedule>
	return -EAGAIN;
    890a:	f06f 000a 	mvn.w	r0, #10
    890e:	e744      	b.n	879a <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8910:	480d      	ldr	r0, [pc, #52]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8912:	f7ff fcdf 	bl	82d4 <z_spin_unlock_valid>
    8916:	b130      	cbz	r0, 8926 <z_impl_k_mutex_lock+0x1f2>
    8918:	f385 8811 	msr	BASEPRI, r5
    891c:	f3bf 8f6f 	isb	sy
    8920:	f06f 000a 	mvn.w	r0, #10
    8924:	e739      	b.n	879a <z_impl_k_mutex_lock+0x66>
    8926:	4c0e      	ldr	r4, [pc, #56]	; (8960 <z_impl_k_mutex_lock+0x22c>)
    8928:	23b9      	movs	r3, #185	; 0xb9
    892a:	4622      	mov	r2, r4
    892c:	490f      	ldr	r1, [pc, #60]	; (896c <z_impl_k_mutex_lock+0x238>)
    892e:	480a      	ldr	r0, [pc, #40]	; (8958 <z_impl_k_mutex_lock+0x224>)
    8930:	f002 fd6c 	bl	b40c <assert_print>
    8934:	4904      	ldr	r1, [pc, #16]	; (8948 <z_impl_k_mutex_lock+0x214>)
    8936:	480e      	ldr	r0, [pc, #56]	; (8970 <z_impl_k_mutex_lock+0x23c>)
    8938:	f002 fd68 	bl	b40c <assert_print>
    893c:	21b9      	movs	r1, #185	; 0xb9
    893e:	4620      	mov	r0, r4
    8940:	f002 fd5d 	bl	b3fe <assert_post_action>
    8944:	e7e8      	b.n	8918 <z_impl_k_mutex_lock+0x1e4>
    8946:	bf00      	nop
    8948:	20001184 	.word	0x20001184
    894c:	20001154 	.word	0x20001154
    8950:	0000e750 	.word	0x0000e750
    8954:	0000e698 	.word	0x0000e698
    8958:	0000c8bc 	.word	0x0000c8bc
    895c:	0000e774 	.word	0x0000e774
    8960:	0000cfb0 	.word	0x0000cfb0
    8964:	0000d010 	.word	0x0000d010
    8968:	0000d028 	.word	0x0000d028
    896c:	0000cfe0 	.word	0x0000cfe0
    8970:	0000cff8 	.word	0x0000cff8

00008974 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8974:	b570      	push	{r4, r5, r6, lr}
    8976:	4604      	mov	r4, r0
    8978:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    897c:	bb03      	cbnz	r3, 89c0 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    897e:	68a3      	ldr	r3, [r4, #8]
    8980:	2b00      	cmp	r3, #0
    8982:	f000 80a6 	beq.w	8ad2 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8986:	4a56      	ldr	r2, [pc, #344]	; (8ae0 <z_impl_k_mutex_unlock+0x16c>)
    8988:	6892      	ldr	r2, [r2, #8]
    898a:	4293      	cmp	r3, r2
    898c:	f040 80a4 	bne.w	8ad8 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    8990:	68e3      	ldr	r3, [r4, #12]
    8992:	b323      	cbz	r3, 89de <z_impl_k_mutex_unlock+0x6a>
    8994:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    8998:	bb6b      	cbnz	r3, 89f6 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    899a:	4b51      	ldr	r3, [pc, #324]	; (8ae0 <z_impl_k_mutex_unlock+0x16c>)
    899c:	689b      	ldr	r3, [r3, #8]
    899e:	7bdb      	ldrb	r3, [r3, #15]
    89a0:	2b01      	cmp	r3, #1
    89a2:	d037      	beq.n	8a14 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    89a4:	4b4e      	ldr	r3, [pc, #312]	; (8ae0 <z_impl_k_mutex_unlock+0x16c>)
    89a6:	689a      	ldr	r2, [r3, #8]
    89a8:	7bd3      	ldrb	r3, [r2, #15]
    89aa:	3b01      	subs	r3, #1
    89ac:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    89ae:	68e3      	ldr	r3, [r4, #12]
    89b0:	2b01      	cmp	r3, #1
    89b2:	d93e      	bls.n	8a32 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    89b4:	3b01      	subs	r3, #1
    89b6:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    89b8:	f001 f872 	bl	9aa0 <k_sched_unlock>

	return 0;
    89bc:	2000      	movs	r0, #0
}
    89be:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    89c0:	4d48      	ldr	r5, [pc, #288]	; (8ae4 <z_impl_k_mutex_unlock+0x170>)
    89c2:	23c7      	movs	r3, #199	; 0xc7
    89c4:	462a      	mov	r2, r5
    89c6:	4948      	ldr	r1, [pc, #288]	; (8ae8 <z_impl_k_mutex_unlock+0x174>)
    89c8:	4848      	ldr	r0, [pc, #288]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    89ca:	f002 fd1f 	bl	b40c <assert_print>
    89ce:	4848      	ldr	r0, [pc, #288]	; (8af0 <z_impl_k_mutex_unlock+0x17c>)
    89d0:	f002 fd1c 	bl	b40c <assert_print>
    89d4:	21c7      	movs	r1, #199	; 0xc7
    89d6:	4628      	mov	r0, r5
    89d8:	f002 fd11 	bl	b3fe <assert_post_action>
    89dc:	e7cf      	b.n	897e <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    89de:	4d41      	ldr	r5, [pc, #260]	; (8ae4 <z_impl_k_mutex_unlock+0x170>)
    89e0:	23df      	movs	r3, #223	; 0xdf
    89e2:	462a      	mov	r2, r5
    89e4:	4943      	ldr	r1, [pc, #268]	; (8af4 <z_impl_k_mutex_unlock+0x180>)
    89e6:	4841      	ldr	r0, [pc, #260]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    89e8:	f002 fd10 	bl	b40c <assert_print>
    89ec:	21df      	movs	r1, #223	; 0xdf
    89ee:	4628      	mov	r0, r5
    89f0:	f002 fd05 	bl	b3fe <assert_post_action>
    89f4:	e7ce      	b.n	8994 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    89f6:	4d40      	ldr	r5, [pc, #256]	; (8af8 <z_impl_k_mutex_unlock+0x184>)
    89f8:	23fd      	movs	r3, #253	; 0xfd
    89fa:	462a      	mov	r2, r5
    89fc:	493a      	ldr	r1, [pc, #232]	; (8ae8 <z_impl_k_mutex_unlock+0x174>)
    89fe:	483b      	ldr	r0, [pc, #236]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    8a00:	f002 fd04 	bl	b40c <assert_print>
    8a04:	483d      	ldr	r0, [pc, #244]	; (8afc <z_impl_k_mutex_unlock+0x188>)
    8a06:	f002 fd01 	bl	b40c <assert_print>
    8a0a:	21fd      	movs	r1, #253	; 0xfd
    8a0c:	4628      	mov	r0, r5
    8a0e:	f002 fcf6 	bl	b3fe <assert_post_action>
    8a12:	e7c2      	b.n	899a <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8a14:	4d38      	ldr	r5, [pc, #224]	; (8af8 <z_impl_k_mutex_unlock+0x184>)
    8a16:	23fe      	movs	r3, #254	; 0xfe
    8a18:	462a      	mov	r2, r5
    8a1a:	4939      	ldr	r1, [pc, #228]	; (8b00 <z_impl_k_mutex_unlock+0x18c>)
    8a1c:	4833      	ldr	r0, [pc, #204]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    8a1e:	f002 fcf5 	bl	b40c <assert_print>
    8a22:	4836      	ldr	r0, [pc, #216]	; (8afc <z_impl_k_mutex_unlock+0x188>)
    8a24:	f002 fcf2 	bl	b40c <assert_print>
    8a28:	21fe      	movs	r1, #254	; 0xfe
    8a2a:	4628      	mov	r0, r5
    8a2c:	f002 fce7 	bl	b3fe <assert_post_action>
    8a30:	e7b8      	b.n	89a4 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    8a32:	f04f 0320 	mov.w	r3, #32
    8a36:	f3ef 8511 	mrs	r5, BASEPRI
    8a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a42:	4830      	ldr	r0, [pc, #192]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8a44:	f7ff fc36 	bl	82b4 <z_spin_lock_valid>
    8a48:	b1c0      	cbz	r0, 8a7c <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    8a4a:	482e      	ldr	r0, [pc, #184]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8a4c:	f7ff fc52 	bl	82f4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8a50:	6921      	ldr	r1, [r4, #16]
    8a52:	4620      	mov	r0, r4
    8a54:	f003 fbee 	bl	c234 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8a58:	4620      	mov	r0, r4
    8a5a:	f001 f963 	bl	9d24 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8a5e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8a60:	b1e0      	cbz	r0, 8a9c <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    8a62:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8a66:	6123      	str	r3, [r4, #16]
    8a68:	2300      	movs	r3, #0
    8a6a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    8a6e:	f000 fce1 	bl	9434 <z_ready_thread>
		z_reschedule(&lock, key);
    8a72:	4629      	mov	r1, r5
    8a74:	4823      	ldr	r0, [pc, #140]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8a76:	f000 fa39 	bl	8eec <z_reschedule>
    8a7a:	e79d      	b.n	89b8 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a7c:	4e22      	ldr	r6, [pc, #136]	; (8b08 <z_impl_k_mutex_unlock+0x194>)
    8a7e:	238e      	movs	r3, #142	; 0x8e
    8a80:	4632      	mov	r2, r6
    8a82:	4922      	ldr	r1, [pc, #136]	; (8b0c <z_impl_k_mutex_unlock+0x198>)
    8a84:	4819      	ldr	r0, [pc, #100]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    8a86:	f002 fcc1 	bl	b40c <assert_print>
    8a8a:	491e      	ldr	r1, [pc, #120]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8a8c:	4820      	ldr	r0, [pc, #128]	; (8b10 <z_impl_k_mutex_unlock+0x19c>)
    8a8e:	f002 fcbd 	bl	b40c <assert_print>
    8a92:	218e      	movs	r1, #142	; 0x8e
    8a94:	4630      	mov	r0, r6
    8a96:	f002 fcb2 	bl	b3fe <assert_post_action>
    8a9a:	e7d6      	b.n	8a4a <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    8a9c:	2300      	movs	r3, #0
    8a9e:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8aa0:	4818      	ldr	r0, [pc, #96]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8aa2:	f7ff fc17 	bl	82d4 <z_spin_unlock_valid>
    8aa6:	b120      	cbz	r0, 8ab2 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    8aa8:	f385 8811 	msr	BASEPRI, r5
    8aac:	f3bf 8f6f 	isb	sy
    8ab0:	e782      	b.n	89b8 <z_impl_k_mutex_unlock+0x44>
    8ab2:	4c15      	ldr	r4, [pc, #84]	; (8b08 <z_impl_k_mutex_unlock+0x194>)
    8ab4:	23b9      	movs	r3, #185	; 0xb9
    8ab6:	4622      	mov	r2, r4
    8ab8:	4916      	ldr	r1, [pc, #88]	; (8b14 <z_impl_k_mutex_unlock+0x1a0>)
    8aba:	480c      	ldr	r0, [pc, #48]	; (8aec <z_impl_k_mutex_unlock+0x178>)
    8abc:	f002 fca6 	bl	b40c <assert_print>
    8ac0:	4910      	ldr	r1, [pc, #64]	; (8b04 <z_impl_k_mutex_unlock+0x190>)
    8ac2:	4815      	ldr	r0, [pc, #84]	; (8b18 <z_impl_k_mutex_unlock+0x1a4>)
    8ac4:	f002 fca2 	bl	b40c <assert_print>
    8ac8:	21b9      	movs	r1, #185	; 0xb9
    8aca:	4620      	mov	r0, r4
    8acc:	f002 fc97 	bl	b3fe <assert_post_action>
    8ad0:	e7ea      	b.n	8aa8 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    8ad2:	f06f 0015 	mvn.w	r0, #21
    8ad6:	e772      	b.n	89be <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    8ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8adc:	e76f      	b.n	89be <z_impl_k_mutex_unlock+0x4a>
    8ade:	bf00      	nop
    8ae0:	20001154 	.word	0x20001154
    8ae4:	0000e750 	.word	0x0000e750
    8ae8:	0000e698 	.word	0x0000e698
    8aec:	0000c8bc 	.word	0x0000c8bc
    8af0:	0000e774 	.word	0x0000e774
    8af4:	0000e79c 	.word	0x0000e79c
    8af8:	0000e7b4 	.word	0x0000e7b4
    8afc:	0000e7e0 	.word	0x0000e7e0
    8b00:	0000e7e4 	.word	0x0000e7e4
    8b04:	20001184 	.word	0x20001184
    8b08:	0000cfb0 	.word	0x0000cfb0
    8b0c:	0000d010 	.word	0x0000d010
    8b10:	0000d028 	.word	0x0000d028
    8b14:	0000cfe0 	.word	0x0000cfe0
    8b18:	0000cff8 	.word	0x0000cff8

00008b1c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8b1c:	b570      	push	{r4, r5, r6, lr}
    8b1e:	4604      	mov	r4, r0
	__asm__ volatile(
    8b20:	f04f 0320 	mov.w	r3, #32
    8b24:	f3ef 8511 	mrs	r5, BASEPRI
    8b28:	f383 8812 	msr	BASEPRI_MAX, r3
    8b2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b30:	4817      	ldr	r0, [pc, #92]	; (8b90 <z_impl_k_sem_give+0x74>)
    8b32:	f7ff fbbf 	bl	82b4 <z_spin_lock_valid>
    8b36:	b180      	cbz	r0, 8b5a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    8b38:	4815      	ldr	r0, [pc, #84]	; (8b90 <z_impl_k_sem_give+0x74>)
    8b3a:	f7ff fbdb 	bl	82f4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8b3e:	4620      	mov	r0, r4
    8b40:	f001 f8f0 	bl	9d24 <z_unpend_first_thread>

	if (thread != NULL) {
    8b44:	b1c8      	cbz	r0, 8b7a <z_impl_k_sem_give+0x5e>
    8b46:	2200      	movs	r2, #0
    8b48:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8b4c:	f000 fc72 	bl	9434 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8b50:	4629      	mov	r1, r5
    8b52:	480f      	ldr	r0, [pc, #60]	; (8b90 <z_impl_k_sem_give+0x74>)
    8b54:	f000 f9ca 	bl	8eec <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8b58:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b5a:	4e0e      	ldr	r6, [pc, #56]	; (8b94 <z_impl_k_sem_give+0x78>)
    8b5c:	238e      	movs	r3, #142	; 0x8e
    8b5e:	4632      	mov	r2, r6
    8b60:	490d      	ldr	r1, [pc, #52]	; (8b98 <z_impl_k_sem_give+0x7c>)
    8b62:	480e      	ldr	r0, [pc, #56]	; (8b9c <z_impl_k_sem_give+0x80>)
    8b64:	f002 fc52 	bl	b40c <assert_print>
    8b68:	4909      	ldr	r1, [pc, #36]	; (8b90 <z_impl_k_sem_give+0x74>)
    8b6a:	480d      	ldr	r0, [pc, #52]	; (8ba0 <z_impl_k_sem_give+0x84>)
    8b6c:	f002 fc4e 	bl	b40c <assert_print>
    8b70:	218e      	movs	r1, #142	; 0x8e
    8b72:	4630      	mov	r0, r6
    8b74:	f002 fc43 	bl	b3fe <assert_post_action>
    8b78:	e7de      	b.n	8b38 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8b7a:	68a3      	ldr	r3, [r4, #8]
    8b7c:	68e2      	ldr	r2, [r4, #12]
    8b7e:	4293      	cmp	r3, r2
    8b80:	d003      	beq.n	8b8a <z_impl_k_sem_give+0x6e>
    8b82:	2201      	movs	r2, #1
    8b84:	4413      	add	r3, r2
    8b86:	60a3      	str	r3, [r4, #8]
}
    8b88:	e7e2      	b.n	8b50 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8b8a:	2200      	movs	r2, #0
    8b8c:	e7fa      	b.n	8b84 <z_impl_k_sem_give+0x68>
    8b8e:	bf00      	nop
    8b90:	20001188 	.word	0x20001188
    8b94:	0000cfb0 	.word	0x0000cfb0
    8b98:	0000d010 	.word	0x0000d010
    8b9c:	0000c8bc 	.word	0x0000c8bc
    8ba0:	0000d028 	.word	0x0000d028

00008ba4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ba8:	b082      	sub	sp, #8
    8baa:	4604      	mov	r4, r0
    8bac:	4617      	mov	r7, r2
    8bae:	461d      	mov	r5, r3
    8bb0:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    8bb4:	b111      	cbz	r1, 8bbc <z_impl_k_sem_take+0x18>
    8bb6:	ea55 0302 	orrs.w	r3, r5, r2
    8bba:	d11f      	bne.n	8bfc <z_impl_k_sem_take+0x58>
    8bbc:	f04f 0320 	mov.w	r3, #32
    8bc0:	f3ef 8611 	mrs	r6, BASEPRI
    8bc4:	f383 8812 	msr	BASEPRI_MAX, r3
    8bc8:	f3bf 8f6f 	isb	sy
    8bcc:	4836      	ldr	r0, [pc, #216]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8bce:	f7ff fb71 	bl	82b4 <z_spin_lock_valid>
    8bd2:	b310      	cbz	r0, 8c1a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    8bd4:	4834      	ldr	r0, [pc, #208]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8bd6:	f7ff fb8d 	bl	82f4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8bda:	68a1      	ldr	r1, [r4, #8]
    8bdc:	2900      	cmp	r1, #0
    8bde:	d03d      	beq.n	8c5c <z_impl_k_sem_take+0xb8>
		sem->count--;
    8be0:	3901      	subs	r1, #1
    8be2:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8be4:	4830      	ldr	r0, [pc, #192]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8be6:	f7ff fb75 	bl	82d4 <z_spin_unlock_valid>
    8bea:	b338      	cbz	r0, 8c3c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    8bec:	f386 8811 	msr	BASEPRI, r6
    8bf0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8bf4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8bf6:	b002      	add	sp, #8
    8bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    8bfc:	4e2b      	ldr	r6, [pc, #172]	; (8cac <z_impl_k_sem_take+0x108>)
    8bfe:	2379      	movs	r3, #121	; 0x79
    8c00:	4632      	mov	r2, r6
    8c02:	492b      	ldr	r1, [pc, #172]	; (8cb0 <z_impl_k_sem_take+0x10c>)
    8c04:	482b      	ldr	r0, [pc, #172]	; (8cb4 <z_impl_k_sem_take+0x110>)
    8c06:	f002 fc01 	bl	b40c <assert_print>
    8c0a:	482b      	ldr	r0, [pc, #172]	; (8cb8 <z_impl_k_sem_take+0x114>)
    8c0c:	f002 fbfe 	bl	b40c <assert_print>
    8c10:	2179      	movs	r1, #121	; 0x79
    8c12:	4630      	mov	r0, r6
    8c14:	f002 fbf3 	bl	b3fe <assert_post_action>
    8c18:	e7d0      	b.n	8bbc <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c1a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8cbc <z_impl_k_sem_take+0x118>
    8c1e:	238e      	movs	r3, #142	; 0x8e
    8c20:	4642      	mov	r2, r8
    8c22:	4927      	ldr	r1, [pc, #156]	; (8cc0 <z_impl_k_sem_take+0x11c>)
    8c24:	4823      	ldr	r0, [pc, #140]	; (8cb4 <z_impl_k_sem_take+0x110>)
    8c26:	f002 fbf1 	bl	b40c <assert_print>
    8c2a:	491f      	ldr	r1, [pc, #124]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8c2c:	4825      	ldr	r0, [pc, #148]	; (8cc4 <z_impl_k_sem_take+0x120>)
    8c2e:	f002 fbed 	bl	b40c <assert_print>
    8c32:	218e      	movs	r1, #142	; 0x8e
    8c34:	4640      	mov	r0, r8
    8c36:	f002 fbe2 	bl	b3fe <assert_post_action>
    8c3a:	e7cb      	b.n	8bd4 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c3c:	4c1f      	ldr	r4, [pc, #124]	; (8cbc <z_impl_k_sem_take+0x118>)
    8c3e:	23b9      	movs	r3, #185	; 0xb9
    8c40:	4622      	mov	r2, r4
    8c42:	4921      	ldr	r1, [pc, #132]	; (8cc8 <z_impl_k_sem_take+0x124>)
    8c44:	481b      	ldr	r0, [pc, #108]	; (8cb4 <z_impl_k_sem_take+0x110>)
    8c46:	f002 fbe1 	bl	b40c <assert_print>
    8c4a:	4917      	ldr	r1, [pc, #92]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8c4c:	481f      	ldr	r0, [pc, #124]	; (8ccc <z_impl_k_sem_take+0x128>)
    8c4e:	f002 fbdd 	bl	b40c <assert_print>
    8c52:	21b9      	movs	r1, #185	; 0xb9
    8c54:	4620      	mov	r0, r4
    8c56:	f002 fbd2 	bl	b3fe <assert_post_action>
    8c5a:	e7c7      	b.n	8bec <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8c5c:	ea55 0307 	orrs.w	r3, r5, r7
    8c60:	d007      	beq.n	8c72 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8c62:	9700      	str	r7, [sp, #0]
    8c64:	9501      	str	r5, [sp, #4]
    8c66:	4622      	mov	r2, r4
    8c68:	4631      	mov	r1, r6
    8c6a:	480f      	ldr	r0, [pc, #60]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8c6c:	f000 fdbe 	bl	97ec <z_pend_curr>
	return ret;
    8c70:	e7c1      	b.n	8bf6 <z_impl_k_sem_take+0x52>
    8c72:	480d      	ldr	r0, [pc, #52]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8c74:	f7ff fb2e 	bl	82d4 <z_spin_unlock_valid>
    8c78:	b130      	cbz	r0, 8c88 <z_impl_k_sem_take+0xe4>
    8c7a:	f386 8811 	msr	BASEPRI, r6
    8c7e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8c82:	f06f 000f 	mvn.w	r0, #15
    8c86:	e7b6      	b.n	8bf6 <z_impl_k_sem_take+0x52>
    8c88:	4c0c      	ldr	r4, [pc, #48]	; (8cbc <z_impl_k_sem_take+0x118>)
    8c8a:	23b9      	movs	r3, #185	; 0xb9
    8c8c:	4622      	mov	r2, r4
    8c8e:	490e      	ldr	r1, [pc, #56]	; (8cc8 <z_impl_k_sem_take+0x124>)
    8c90:	4808      	ldr	r0, [pc, #32]	; (8cb4 <z_impl_k_sem_take+0x110>)
    8c92:	f002 fbbb 	bl	b40c <assert_print>
    8c96:	4904      	ldr	r1, [pc, #16]	; (8ca8 <z_impl_k_sem_take+0x104>)
    8c98:	480c      	ldr	r0, [pc, #48]	; (8ccc <z_impl_k_sem_take+0x128>)
    8c9a:	f002 fbb7 	bl	b40c <assert_print>
    8c9e:	21b9      	movs	r1, #185	; 0xb9
    8ca0:	4620      	mov	r0, r4
    8ca2:	f002 fbac 	bl	b3fe <assert_post_action>
    8ca6:	e7e8      	b.n	8c7a <z_impl_k_sem_take+0xd6>
    8ca8:	20001188 	.word	0x20001188
    8cac:	0000e818 	.word	0x0000e818
    8cb0:	0000e838 	.word	0x0000e838
    8cb4:	0000c8bc 	.word	0x0000c8bc
    8cb8:	0000e7e0 	.word	0x0000e7e0
    8cbc:	0000cfb0 	.word	0x0000cfb0
    8cc0:	0000d010 	.word	0x0000d010
    8cc4:	0000d028 	.word	0x0000d028
    8cc8:	0000cfe0 	.word	0x0000cfe0
    8ccc:	0000cff8 	.word	0x0000cff8

00008cd0 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    8cd0:	b538      	push	{r3, r4, r5, lr}
    8cd2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8cd4:	6883      	ldr	r3, [r0, #8]
    8cd6:	b10b      	cbz	r3, 8cdc <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    8cd8:	68a0      	ldr	r0, [r4, #8]
    8cda:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    8cdc:	4d06      	ldr	r5, [pc, #24]	; (8cf8 <pended_on_thread+0x28>)
    8cde:	f240 23b9 	movw	r3, #697	; 0x2b9
    8ce2:	462a      	mov	r2, r5
    8ce4:	4905      	ldr	r1, [pc, #20]	; (8cfc <pended_on_thread+0x2c>)
    8ce6:	4806      	ldr	r0, [pc, #24]	; (8d00 <pended_on_thread+0x30>)
    8ce8:	f002 fb90 	bl	b40c <assert_print>
    8cec:	f240 21b9 	movw	r1, #697	; 0x2b9
    8cf0:	4628      	mov	r0, r5
    8cf2:	f002 fb84 	bl	b3fe <assert_post_action>
    8cf6:	e7ef      	b.n	8cd8 <pended_on_thread+0x8>
    8cf8:	0000e888 	.word	0x0000e888
    8cfc:	0000e8ac 	.word	0x0000e8ac
    8d00:	0000c8bc 	.word	0x0000c8bc

00008d04 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8d08:	bf08      	it	eq
    8d0a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    8d0e:	d100      	bne.n	8d12 <add_thread_timeout+0xe>
    8d10:	4770      	bx	lr
{
    8d12:	b508      	push	{r3, lr}
    8d14:	4902      	ldr	r1, [pc, #8]	; (8d20 <add_thread_timeout+0x1c>)
    8d16:	3018      	adds	r0, #24
    8d18:	f001 fb36 	bl	a388 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    8d1c:	bd08      	pop	{r3, pc}
    8d1e:	bf00      	nop
    8d20:	00009591 	.word	0x00009591

00008d24 <z_reset_time_slice>:
{
    8d24:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    8d26:	4b07      	ldr	r3, [pc, #28]	; (8d44 <z_reset_time_slice+0x20>)
    8d28:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    8d2a:	b904      	cbnz	r4, 8d2e <z_reset_time_slice+0xa>
}
    8d2c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    8d2e:	f7fc ff29 	bl	5b84 <sys_clock_elapsed>
    8d32:	4404      	add	r4, r0
    8d34:	4b04      	ldr	r3, [pc, #16]	; (8d48 <z_reset_time_slice+0x24>)
    8d36:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    8d38:	2100      	movs	r1, #0
    8d3a:	4b02      	ldr	r3, [pc, #8]	; (8d44 <z_reset_time_slice+0x20>)
    8d3c:	6818      	ldr	r0, [r3, #0]
    8d3e:	f001 fcb3 	bl	a6a8 <z_set_timeout_expiry>
}
    8d42:	e7f3      	b.n	8d2c <z_reset_time_slice+0x8>
    8d44:	20001198 	.word	0x20001198
    8d48:	20001154 	.word	0x20001154

00008d4c <k_sched_time_slice_set>:
{
    8d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d50:	4604      	mov	r4, r0
    8d52:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    8d54:	2700      	movs	r7, #0
	__asm__ volatile(
    8d56:	f04f 0320 	mov.w	r3, #32
    8d5a:	f3ef 8611 	mrs	r6, BASEPRI
    8d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d66:	482a      	ldr	r0, [pc, #168]	; (8e10 <k_sched_time_slice_set+0xc4>)
    8d68:	f7ff faa4 	bl	82b4 <z_spin_lock_valid>
    8d6c:	b118      	cbz	r0, 8d76 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    8d6e:	4828      	ldr	r0, [pc, #160]	; (8e10 <k_sched_time_slice_set+0xc4>)
    8d70:	f7ff fac0 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    8d74:	e023      	b.n	8dbe <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d76:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8e14 <k_sched_time_slice_set+0xc8>
    8d7a:	238e      	movs	r3, #142	; 0x8e
    8d7c:	4642      	mov	r2, r8
    8d7e:	4926      	ldr	r1, [pc, #152]	; (8e18 <k_sched_time_slice_set+0xcc>)
    8d80:	4826      	ldr	r0, [pc, #152]	; (8e1c <k_sched_time_slice_set+0xd0>)
    8d82:	f002 fb43 	bl	b40c <assert_print>
    8d86:	4922      	ldr	r1, [pc, #136]	; (8e10 <k_sched_time_slice_set+0xc4>)
    8d88:	4825      	ldr	r0, [pc, #148]	; (8e20 <k_sched_time_slice_set+0xd4>)
    8d8a:	f002 fb3f 	bl	b40c <assert_print>
    8d8e:	218e      	movs	r1, #142	; 0x8e
    8d90:	4640      	mov	r0, r8
    8d92:	f002 fb34 	bl	b3fe <assert_post_action>
    8d96:	e7ea      	b.n	8d6e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    8d98:	2802      	cmp	r0, #2
    8d9a:	bfb8      	it	lt
    8d9c:	2002      	movlt	r0, #2
    8d9e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    8da0:	4b20      	ldr	r3, [pc, #128]	; (8e24 <k_sched_time_slice_set+0xd8>)
    8da2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    8da4:	4b20      	ldr	r3, [pc, #128]	; (8e28 <k_sched_time_slice_set+0xdc>)
    8da6:	6898      	ldr	r0, [r3, #8]
    8da8:	f7ff ffbc 	bl	8d24 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8dac:	4818      	ldr	r0, [pc, #96]	; (8e10 <k_sched_time_slice_set+0xc4>)
    8dae:	f7ff fa91 	bl	82d4 <z_spin_unlock_valid>
    8db2:	b1d0      	cbz	r0, 8dea <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    8db4:	f386 8811 	msr	BASEPRI, r6
    8db8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8dbc:	2701      	movs	r7, #1
    8dbe:	bb27      	cbnz	r7, 8e0a <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    8dc0:	4b19      	ldr	r3, [pc, #100]	; (8e28 <k_sched_time_slice_set+0xdc>)
    8dc2:	2200      	movs	r2, #0
    8dc4:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    8dc6:	0c61      	lsrs	r1, r4, #17
    8dc8:	03e3      	lsls	r3, r4, #15
    8dca:	f240 30e7 	movw	r0, #999	; 0x3e7
    8dce:	1818      	adds	r0, r3, r0
    8dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8dd4:	f04f 0300 	mov.w	r3, #0
    8dd8:	f141 0100 	adc.w	r1, r1, #0
    8ddc:	f7f7 fb72 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8de0:	4b12      	ldr	r3, [pc, #72]	; (8e2c <k_sched_time_slice_set+0xe0>)
    8de2:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8de4:	2c00      	cmp	r4, #0
    8de6:	dcd7      	bgt.n	8d98 <k_sched_time_slice_set+0x4c>
    8de8:	e7da      	b.n	8da0 <k_sched_time_slice_set+0x54>
    8dea:	4f0a      	ldr	r7, [pc, #40]	; (8e14 <k_sched_time_slice_set+0xc8>)
    8dec:	23b9      	movs	r3, #185	; 0xb9
    8dee:	463a      	mov	r2, r7
    8df0:	490f      	ldr	r1, [pc, #60]	; (8e30 <k_sched_time_slice_set+0xe4>)
    8df2:	480a      	ldr	r0, [pc, #40]	; (8e1c <k_sched_time_slice_set+0xd0>)
    8df4:	f002 fb0a 	bl	b40c <assert_print>
    8df8:	4905      	ldr	r1, [pc, #20]	; (8e10 <k_sched_time_slice_set+0xc4>)
    8dfa:	480e      	ldr	r0, [pc, #56]	; (8e34 <k_sched_time_slice_set+0xe8>)
    8dfc:	f002 fb06 	bl	b40c <assert_print>
    8e00:	21b9      	movs	r1, #185	; 0xb9
    8e02:	4638      	mov	r0, r7
    8e04:	f002 fafb 	bl	b3fe <assert_post_action>
    8e08:	e7d4      	b.n	8db4 <k_sched_time_slice_set+0x68>
}
    8e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e0e:	bf00      	nop
    8e10:	20001190 	.word	0x20001190
    8e14:	0000cfb0 	.word	0x0000cfb0
    8e18:	0000d010 	.word	0x0000d010
    8e1c:	0000c8bc 	.word	0x0000c8bc
    8e20:	0000d028 	.word	0x0000d028
    8e24:	20001194 	.word	0x20001194
    8e28:	20001154 	.word	0x20001154
    8e2c:	20001198 	.word	0x20001198
    8e30:	0000cfe0 	.word	0x0000cfe0
    8e34:	0000cff8 	.word	0x0000cff8

00008e38 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    8e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e3a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    8e3c:	2500      	movs	r5, #0
	__asm__ volatile(
    8e3e:	f04f 0320 	mov.w	r3, #32
    8e42:	f3ef 8611 	mrs	r6, BASEPRI
    8e46:	f383 8812 	msr	BASEPRI_MAX, r3
    8e4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e4e:	4820      	ldr	r0, [pc, #128]	; (8ed0 <z_unpend_thread_no_timeout+0x98>)
    8e50:	f7ff fa30 	bl	82b4 <z_spin_lock_valid>
    8e54:	b118      	cbz	r0, 8e5e <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    8e56:	481e      	ldr	r0, [pc, #120]	; (8ed0 <z_unpend_thread_no_timeout+0x98>)
    8e58:	f7ff fa4c 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    8e5c:	e014      	b.n	8e88 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e5e:	4f1d      	ldr	r7, [pc, #116]	; (8ed4 <z_unpend_thread_no_timeout+0x9c>)
    8e60:	238e      	movs	r3, #142	; 0x8e
    8e62:	463a      	mov	r2, r7
    8e64:	491c      	ldr	r1, [pc, #112]	; (8ed8 <z_unpend_thread_no_timeout+0xa0>)
    8e66:	481d      	ldr	r0, [pc, #116]	; (8edc <z_unpend_thread_no_timeout+0xa4>)
    8e68:	f002 fad0 	bl	b40c <assert_print>
    8e6c:	4918      	ldr	r1, [pc, #96]	; (8ed0 <z_unpend_thread_no_timeout+0x98>)
    8e6e:	481c      	ldr	r0, [pc, #112]	; (8ee0 <z_unpend_thread_no_timeout+0xa8>)
    8e70:	f002 facc 	bl	b40c <assert_print>
    8e74:	218e      	movs	r1, #142	; 0x8e
    8e76:	4638      	mov	r0, r7
    8e78:	f002 fac1 	bl	b3fe <assert_post_action>
    8e7c:	e7eb      	b.n	8e56 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    8e7e:	f386 8811 	msr	BASEPRI, r6
    8e82:	f3bf 8f6f 	isb	sy
    8e86:	2501      	movs	r5, #1
    8e88:	bb05      	cbnz	r5, 8ecc <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8e8a:	4620      	mov	r0, r4
    8e8c:	f7ff ff20 	bl	8cd0 <pended_on_thread>
    8e90:	4621      	mov	r1, r4
    8e92:	f000 f8fb 	bl	908c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8e96:	7b63      	ldrb	r3, [r4, #13]
    8e98:	f023 0302 	bic.w	r3, r3, #2
    8e9c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8e9e:	2300      	movs	r3, #0
    8ea0:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ea2:	480b      	ldr	r0, [pc, #44]	; (8ed0 <z_unpend_thread_no_timeout+0x98>)
    8ea4:	f7ff fa16 	bl	82d4 <z_spin_unlock_valid>
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d1e8      	bne.n	8e7e <z_unpend_thread_no_timeout+0x46>
    8eac:	4d09      	ldr	r5, [pc, #36]	; (8ed4 <z_unpend_thread_no_timeout+0x9c>)
    8eae:	23b9      	movs	r3, #185	; 0xb9
    8eb0:	462a      	mov	r2, r5
    8eb2:	490c      	ldr	r1, [pc, #48]	; (8ee4 <z_unpend_thread_no_timeout+0xac>)
    8eb4:	4809      	ldr	r0, [pc, #36]	; (8edc <z_unpend_thread_no_timeout+0xa4>)
    8eb6:	f002 faa9 	bl	b40c <assert_print>
    8eba:	4905      	ldr	r1, [pc, #20]	; (8ed0 <z_unpend_thread_no_timeout+0x98>)
    8ebc:	480a      	ldr	r0, [pc, #40]	; (8ee8 <z_unpend_thread_no_timeout+0xb0>)
    8ebe:	f002 faa5 	bl	b40c <assert_print>
    8ec2:	21b9      	movs	r1, #185	; 0xb9
    8ec4:	4628      	mov	r0, r5
    8ec6:	f002 fa9a 	bl	b3fe <assert_post_action>
    8eca:	e7d8      	b.n	8e7e <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    8ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ece:	bf00      	nop
    8ed0:	20001190 	.word	0x20001190
    8ed4:	0000cfb0 	.word	0x0000cfb0
    8ed8:	0000d010 	.word	0x0000d010
    8edc:	0000c8bc 	.word	0x0000c8bc
    8ee0:	0000d028 	.word	0x0000d028
    8ee4:	0000cfe0 	.word	0x0000cfe0
    8ee8:	0000cff8 	.word	0x0000cff8

00008eec <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8eec:	b570      	push	{r4, r5, r6, lr}
    8eee:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    8ef0:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8ef2:	b921      	cbnz	r1, 8efe <z_reschedule+0x12>
    8ef4:	f3ef 8305 	mrs	r3, IPSR
    8ef8:	b913      	cbnz	r3, 8f00 <z_reschedule+0x14>
    8efa:	2101      	movs	r1, #1
    8efc:	e000      	b.n	8f00 <z_reschedule+0x14>
    8efe:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    8f00:	f011 0f01 	tst.w	r1, #1
    8f04:	d01c      	beq.n	8f40 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    8f06:	4b1b      	ldr	r3, [pc, #108]	; (8f74 <z_reschedule+0x88>)
    8f08:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    8f0a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    8f0c:	429a      	cmp	r2, r3
    8f0e:	d017      	beq.n	8f40 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f10:	4620      	mov	r0, r4
    8f12:	f7ff f9df 	bl	82d4 <z_spin_unlock_valid>
    8f16:	b118      	cbz	r0, 8f20 <z_reschedule+0x34>
	ret = arch_swap(key);
    8f18:	4628      	mov	r0, r5
    8f1a:	f7fa fc99 	bl	3850 <arch_swap>
		z_swap(lock, key);
    8f1e:	e017      	b.n	8f50 <z_reschedule+0x64>
    8f20:	4e15      	ldr	r6, [pc, #84]	; (8f78 <z_reschedule+0x8c>)
    8f22:	23d0      	movs	r3, #208	; 0xd0
    8f24:	4632      	mov	r2, r6
    8f26:	4915      	ldr	r1, [pc, #84]	; (8f7c <z_reschedule+0x90>)
    8f28:	4815      	ldr	r0, [pc, #84]	; (8f80 <z_reschedule+0x94>)
    8f2a:	f002 fa6f 	bl	b40c <assert_print>
    8f2e:	4621      	mov	r1, r4
    8f30:	4814      	ldr	r0, [pc, #80]	; (8f84 <z_reschedule+0x98>)
    8f32:	f002 fa6b 	bl	b40c <assert_print>
    8f36:	21d0      	movs	r1, #208	; 0xd0
    8f38:	4630      	mov	r0, r6
    8f3a:	f002 fa60 	bl	b3fe <assert_post_action>
    8f3e:	e7eb      	b.n	8f18 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f40:	4620      	mov	r0, r4
    8f42:	f7ff f9c7 	bl	82d4 <z_spin_unlock_valid>
    8f46:	b120      	cbz	r0, 8f52 <z_reschedule+0x66>
    8f48:	f385 8811 	msr	BASEPRI, r5
    8f4c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    8f50:	bd70      	pop	{r4, r5, r6, pc}
    8f52:	4e09      	ldr	r6, [pc, #36]	; (8f78 <z_reschedule+0x8c>)
    8f54:	23b9      	movs	r3, #185	; 0xb9
    8f56:	4632      	mov	r2, r6
    8f58:	4908      	ldr	r1, [pc, #32]	; (8f7c <z_reschedule+0x90>)
    8f5a:	4809      	ldr	r0, [pc, #36]	; (8f80 <z_reschedule+0x94>)
    8f5c:	f002 fa56 	bl	b40c <assert_print>
    8f60:	4621      	mov	r1, r4
    8f62:	4808      	ldr	r0, [pc, #32]	; (8f84 <z_reschedule+0x98>)
    8f64:	f002 fa52 	bl	b40c <assert_print>
    8f68:	21b9      	movs	r1, #185	; 0xb9
    8f6a:	4630      	mov	r0, r6
    8f6c:	f002 fa47 	bl	b3fe <assert_post_action>
    8f70:	e7ea      	b.n	8f48 <z_reschedule+0x5c>
    8f72:	bf00      	nop
    8f74:	20001154 	.word	0x20001154
    8f78:	0000cfb0 	.word	0x0000cfb0
    8f7c:	0000cfe0 	.word	0x0000cfe0
    8f80:	0000c8bc 	.word	0x0000c8bc
    8f84:	0000cff8 	.word	0x0000cff8

00008f88 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8f88:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8f8a:	2400      	movs	r4, #0
	__asm__ volatile(
    8f8c:	f04f 0320 	mov.w	r3, #32
    8f90:	f3ef 8511 	mrs	r5, BASEPRI
    8f94:	f383 8812 	msr	BASEPRI_MAX, r3
    8f98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f9c:	482f      	ldr	r0, [pc, #188]	; (905c <k_sched_lock+0xd4>)
    8f9e:	f7ff f989 	bl	82b4 <z_spin_lock_valid>
    8fa2:	b118      	cbz	r0, 8fac <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    8fa4:	482d      	ldr	r0, [pc, #180]	; (905c <k_sched_lock+0xd4>)
    8fa6:	f7ff f9a5 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    8faa:	e022      	b.n	8ff2 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fac:	4e2c      	ldr	r6, [pc, #176]	; (9060 <k_sched_lock+0xd8>)
    8fae:	238e      	movs	r3, #142	; 0x8e
    8fb0:	4632      	mov	r2, r6
    8fb2:	492c      	ldr	r1, [pc, #176]	; (9064 <k_sched_lock+0xdc>)
    8fb4:	482c      	ldr	r0, [pc, #176]	; (9068 <k_sched_lock+0xe0>)
    8fb6:	f002 fa29 	bl	b40c <assert_print>
    8fba:	4928      	ldr	r1, [pc, #160]	; (905c <k_sched_lock+0xd4>)
    8fbc:	482b      	ldr	r0, [pc, #172]	; (906c <k_sched_lock+0xe4>)
    8fbe:	f002 fa25 	bl	b40c <assert_print>
    8fc2:	218e      	movs	r1, #142	; 0x8e
    8fc4:	4630      	mov	r0, r6
    8fc6:	f002 fa1a 	bl	b3fe <assert_post_action>
    8fca:	e7eb      	b.n	8fa4 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8fcc:	4b28      	ldr	r3, [pc, #160]	; (9070 <k_sched_lock+0xe8>)
    8fce:	689b      	ldr	r3, [r3, #8]
    8fd0:	7bdb      	ldrb	r3, [r3, #15]
    8fd2:	2b01      	cmp	r3, #1
    8fd4:	d022      	beq.n	901c <k_sched_lock+0x94>
	--_current->base.sched_locked;
    8fd6:	4b26      	ldr	r3, [pc, #152]	; (9070 <k_sched_lock+0xe8>)
    8fd8:	689a      	ldr	r2, [r3, #8]
    8fda:	7bd3      	ldrb	r3, [r2, #15]
    8fdc:	3b01      	subs	r3, #1
    8fde:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8fe0:	481e      	ldr	r0, [pc, #120]	; (905c <k_sched_lock+0xd4>)
    8fe2:	f7ff f977 	bl	82d4 <z_spin_unlock_valid>
    8fe6:	b340      	cbz	r0, 903a <k_sched_lock+0xb2>
	__asm__ volatile(
    8fe8:	f385 8811 	msr	BASEPRI, r5
    8fec:	f3bf 8f6f 	isb	sy
    8ff0:	2401      	movs	r4, #1
    8ff2:	2c00      	cmp	r4, #0
    8ff4:	d131      	bne.n	905a <k_sched_lock+0xd2>
    8ff6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8ffa:	2b00      	cmp	r3, #0
    8ffc:	d0e6      	beq.n	8fcc <k_sched_lock+0x44>
    8ffe:	4c1d      	ldr	r4, [pc, #116]	; (9074 <k_sched_lock+0xec>)
    9000:	23fd      	movs	r3, #253	; 0xfd
    9002:	4622      	mov	r2, r4
    9004:	491c      	ldr	r1, [pc, #112]	; (9078 <k_sched_lock+0xf0>)
    9006:	4818      	ldr	r0, [pc, #96]	; (9068 <k_sched_lock+0xe0>)
    9008:	f002 fa00 	bl	b40c <assert_print>
    900c:	481b      	ldr	r0, [pc, #108]	; (907c <k_sched_lock+0xf4>)
    900e:	f002 f9fd 	bl	b40c <assert_print>
    9012:	21fd      	movs	r1, #253	; 0xfd
    9014:	4620      	mov	r0, r4
    9016:	f002 f9f2 	bl	b3fe <assert_post_action>
    901a:	e7d7      	b.n	8fcc <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    901c:	4c15      	ldr	r4, [pc, #84]	; (9074 <k_sched_lock+0xec>)
    901e:	23fe      	movs	r3, #254	; 0xfe
    9020:	4622      	mov	r2, r4
    9022:	4917      	ldr	r1, [pc, #92]	; (9080 <k_sched_lock+0xf8>)
    9024:	4810      	ldr	r0, [pc, #64]	; (9068 <k_sched_lock+0xe0>)
    9026:	f002 f9f1 	bl	b40c <assert_print>
    902a:	4814      	ldr	r0, [pc, #80]	; (907c <k_sched_lock+0xf4>)
    902c:	f002 f9ee 	bl	b40c <assert_print>
    9030:	21fe      	movs	r1, #254	; 0xfe
    9032:	4620      	mov	r0, r4
    9034:	f002 f9e3 	bl	b3fe <assert_post_action>
    9038:	e7cd      	b.n	8fd6 <k_sched_lock+0x4e>
    903a:	4c09      	ldr	r4, [pc, #36]	; (9060 <k_sched_lock+0xd8>)
    903c:	23b9      	movs	r3, #185	; 0xb9
    903e:	4622      	mov	r2, r4
    9040:	4910      	ldr	r1, [pc, #64]	; (9084 <k_sched_lock+0xfc>)
    9042:	4809      	ldr	r0, [pc, #36]	; (9068 <k_sched_lock+0xe0>)
    9044:	f002 f9e2 	bl	b40c <assert_print>
    9048:	4904      	ldr	r1, [pc, #16]	; (905c <k_sched_lock+0xd4>)
    904a:	480f      	ldr	r0, [pc, #60]	; (9088 <k_sched_lock+0x100>)
    904c:	f002 f9de 	bl	b40c <assert_print>
    9050:	21b9      	movs	r1, #185	; 0xb9
    9052:	4620      	mov	r0, r4
    9054:	f002 f9d3 	bl	b3fe <assert_post_action>
    9058:	e7c6      	b.n	8fe8 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    905a:	bd70      	pop	{r4, r5, r6, pc}
    905c:	20001190 	.word	0x20001190
    9060:	0000cfb0 	.word	0x0000cfb0
    9064:	0000d010 	.word	0x0000d010
    9068:	0000c8bc 	.word	0x0000c8bc
    906c:	0000d028 	.word	0x0000d028
    9070:	20001154 	.word	0x20001154
    9074:	0000e7b4 	.word	0x0000e7b4
    9078:	0000e698 	.word	0x0000e698
    907c:	0000e7e0 	.word	0x0000e7e0
    9080:	0000e7e4 	.word	0x0000e7e4
    9084:	0000cfe0 	.word	0x0000cfe0
    9088:	0000cff8 	.word	0x0000cff8

0000908c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    908c:	b538      	push	{r3, r4, r5, lr}
    908e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9090:	4b0c      	ldr	r3, [pc, #48]	; (90c4 <z_priq_dumb_remove+0x38>)
    9092:	4299      	cmp	r1, r3
    9094:	d007      	beq.n	90a6 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9096:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    9098:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    909a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    909c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    909e:	2300      	movs	r3, #0
    90a0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    90a2:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    90a4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    90a6:	4d08      	ldr	r5, [pc, #32]	; (90c8 <z_priq_dumb_remove+0x3c>)
    90a8:	f240 433d 	movw	r3, #1085	; 0x43d
    90ac:	462a      	mov	r2, r5
    90ae:	4907      	ldr	r1, [pc, #28]	; (90cc <z_priq_dumb_remove+0x40>)
    90b0:	4807      	ldr	r0, [pc, #28]	; (90d0 <z_priq_dumb_remove+0x44>)
    90b2:	f002 f9ab 	bl	b40c <assert_print>
    90b6:	f240 413d 	movw	r1, #1085	; 0x43d
    90ba:	4628      	mov	r0, r5
    90bc:	f002 f99f 	bl	b3fe <assert_post_action>
    90c0:	e7e9      	b.n	9096 <z_priq_dumb_remove+0xa>
    90c2:	bf00      	nop
    90c4:	20000490 	.word	0x20000490
    90c8:	0000e888 	.word	0x0000e888
    90cc:	0000e8c4 	.word	0x0000e8c4
    90d0:	0000c8bc 	.word	0x0000c8bc

000090d4 <update_cache>:
{
    90d4:	b538      	push	{r3, r4, r5, lr}
    90d6:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    90d8:	4819      	ldr	r0, [pc, #100]	; (9140 <update_cache+0x6c>)
    90da:	f003 f8ed 	bl	c2b8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    90de:	4605      	mov	r5, r0
    90e0:	b188      	cbz	r0, 9106 <update_cache+0x32>
	if (preempt_ok != 0) {
    90e2:	bb14      	cbnz	r4, 912a <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    90e4:	4b17      	ldr	r3, [pc, #92]	; (9144 <update_cache+0x70>)
    90e6:	689b      	ldr	r3, [r3, #8]
    90e8:	b183      	cbz	r3, 910c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    90ea:	4b16      	ldr	r3, [pc, #88]	; (9144 <update_cache+0x70>)
    90ec:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    90ee:	7b5a      	ldrb	r2, [r3, #13]
    90f0:	f012 0f1f 	tst.w	r2, #31
    90f4:	d119      	bne.n	912a <update_cache+0x56>
	return node->next != NULL;
    90f6:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    90f8:	b9ba      	cbnz	r2, 912a <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    90fa:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    90fc:	2a7f      	cmp	r2, #127	; 0x7f
    90fe:	d914      	bls.n	912a <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    9100:	4a10      	ldr	r2, [pc, #64]	; (9144 <update_cache+0x70>)
    9102:	61d3      	str	r3, [r2, #28]
    9104:	e01a      	b.n	913c <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9106:	4b0f      	ldr	r3, [pc, #60]	; (9144 <update_cache+0x70>)
    9108:	68dd      	ldr	r5, [r3, #12]
    910a:	e7ea      	b.n	90e2 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    910c:	4c0e      	ldr	r4, [pc, #56]	; (9148 <update_cache+0x74>)
    910e:	2389      	movs	r3, #137	; 0x89
    9110:	4622      	mov	r2, r4
    9112:	490e      	ldr	r1, [pc, #56]	; (914c <update_cache+0x78>)
    9114:	480e      	ldr	r0, [pc, #56]	; (9150 <update_cache+0x7c>)
    9116:	f002 f979 	bl	b40c <assert_print>
    911a:	480e      	ldr	r0, [pc, #56]	; (9154 <update_cache+0x80>)
    911c:	f002 f976 	bl	b40c <assert_print>
    9120:	2189      	movs	r1, #137	; 0x89
    9122:	4620      	mov	r0, r4
    9124:	f002 f96b 	bl	b3fe <assert_post_action>
    9128:	e7df      	b.n	90ea <update_cache+0x16>
		if (thread != _current) {
    912a:	4b06      	ldr	r3, [pc, #24]	; (9144 <update_cache+0x70>)
    912c:	689b      	ldr	r3, [r3, #8]
    912e:	42ab      	cmp	r3, r5
    9130:	d002      	beq.n	9138 <update_cache+0x64>
			z_reset_time_slice(thread);
    9132:	4628      	mov	r0, r5
    9134:	f7ff fdf6 	bl	8d24 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <update_cache+0x70>)
    913a:	61dd      	str	r5, [r3, #28]
}
    913c:	bd38      	pop	{r3, r4, r5, pc}
    913e:	bf00      	nop
    9140:	20001174 	.word	0x20001174
    9144:	20001154 	.word	0x20001154
    9148:	0000e888 	.word	0x0000e888
    914c:	0000e8e8 	.word	0x0000e8e8
    9150:	0000c8bc 	.word	0x0000c8bc
    9154:	0000e7e0 	.word	0x0000e7e0

00009158 <move_thread_to_end_of_prio_q>:
{
    9158:	b538      	push	{r3, r4, r5, lr}
    915a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    915c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    915e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9162:	2b00      	cmp	r3, #0
    9164:	db2b      	blt.n	91be <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    9166:	7b6b      	ldrb	r3, [r5, #13]
    9168:	f063 037f 	orn	r3, r3, #127	; 0x7f
    916c:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    916e:	4b22      	ldr	r3, [pc, #136]	; (91f8 <move_thread_to_end_of_prio_q+0xa0>)
    9170:	429d      	cmp	r5, r3
    9172:	d02c      	beq.n	91ce <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    9174:	4b21      	ldr	r3, [pc, #132]	; (91fc <move_thread_to_end_of_prio_q+0xa4>)
    9176:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    917a:	429c      	cmp	r4, r3
    917c:	d039      	beq.n	91f2 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    917e:	b16c      	cbz	r4, 919c <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9180:	4621      	mov	r1, r4
    9182:	4628      	mov	r0, r5
    9184:	f003 f879 	bl	c27a <z_sched_prio_cmp>
    9188:	2800      	cmp	r0, #0
    918a:	dc2c      	bgt.n	91e6 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    918c:	b134      	cbz	r4, 919c <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    918e:	4b1b      	ldr	r3, [pc, #108]	; (91fc <move_thread_to_end_of_prio_q+0xa4>)
    9190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9192:	429c      	cmp	r4, r3
    9194:	d002      	beq.n	919c <move_thread_to_end_of_prio_q+0x44>
    9196:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9198:	2c00      	cmp	r4, #0
    919a:	d1f0      	bne.n	917e <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    919c:	4b17      	ldr	r3, [pc, #92]	; (91fc <move_thread_to_end_of_prio_q+0xa4>)
    919e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    91a0:	f103 0120 	add.w	r1, r3, #32
    91a4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    91a6:	606a      	str	r2, [r5, #4]
	tail->next = node;
    91a8:	6015      	str	r5, [r2, #0]
	list->tail = node;
    91aa:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    91ac:	4b13      	ldr	r3, [pc, #76]	; (91fc <move_thread_to_end_of_prio_q+0xa4>)
    91ae:	6898      	ldr	r0, [r3, #8]
    91b0:	42a8      	cmp	r0, r5
    91b2:	bf14      	ite	ne
    91b4:	2000      	movne	r0, #0
    91b6:	2001      	moveq	r0, #1
    91b8:	f7ff ff8c 	bl	90d4 <update_cache>
}
    91bc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    91be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    91c2:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    91c4:	4601      	mov	r1, r0
    91c6:	480e      	ldr	r0, [pc, #56]	; (9200 <move_thread_to_end_of_prio_q+0xa8>)
    91c8:	f7ff ff60 	bl	908c <z_priq_dumb_remove>
}
    91cc:	e7cb      	b.n	9166 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    91ce:	4c0d      	ldr	r4, [pc, #52]	; (9204 <move_thread_to_end_of_prio_q+0xac>)
    91d0:	23ba      	movs	r3, #186	; 0xba
    91d2:	4622      	mov	r2, r4
    91d4:	490c      	ldr	r1, [pc, #48]	; (9208 <move_thread_to_end_of_prio_q+0xb0>)
    91d6:	480d      	ldr	r0, [pc, #52]	; (920c <move_thread_to_end_of_prio_q+0xb4>)
    91d8:	f002 f918 	bl	b40c <assert_print>
    91dc:	21ba      	movs	r1, #186	; 0xba
    91de:	4620      	mov	r0, r4
    91e0:	f002 f90d 	bl	b3fe <assert_post_action>
    91e4:	e7c6      	b.n	9174 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    91e6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    91e8:	606b      	str	r3, [r5, #4]
	node->next = successor;
    91ea:	602c      	str	r4, [r5, #0]
	prev->next = node;
    91ec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    91ee:	6065      	str	r5, [r4, #4]
}
    91f0:	e7dc      	b.n	91ac <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    91f2:	2400      	movs	r4, #0
    91f4:	e7c3      	b.n	917e <move_thread_to_end_of_prio_q+0x26>
    91f6:	bf00      	nop
    91f8:	20000490 	.word	0x20000490
    91fc:	20001154 	.word	0x20001154
    9200:	20001174 	.word	0x20001174
    9204:	0000e888 	.word	0x0000e888
    9208:	0000e8c4 	.word	0x0000e8c4
    920c:	0000c8bc 	.word	0x0000c8bc

00009210 <slice_expired_locked>:
{
    9210:	b538      	push	{r3, r4, r5, lr}
    9212:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9214:	4b07      	ldr	r3, [pc, #28]	; (9234 <slice_expired_locked+0x24>)
    9216:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9218:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    921a:	f013 0f1f 	tst.w	r3, #31
    921e:	d004      	beq.n	922a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9220:	4628      	mov	r0, r5
    9222:	f7ff fd7f 	bl	8d24 <z_reset_time_slice>
}
    9226:	4620      	mov	r0, r4
    9228:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    922a:	4628      	mov	r0, r5
    922c:	f7ff ff94 	bl	9158 <move_thread_to_end_of_prio_q>
    9230:	e7f6      	b.n	9220 <slice_expired_locked+0x10>
    9232:	bf00      	nop
    9234:	20001154 	.word	0x20001154

00009238 <z_time_slice>:
{
    9238:	b570      	push	{r4, r5, r6, lr}
    923a:	4604      	mov	r4, r0
	__asm__ volatile(
    923c:	f04f 0320 	mov.w	r3, #32
    9240:	f3ef 8511 	mrs	r5, BASEPRI
    9244:	f383 8812 	msr	BASEPRI_MAX, r3
    9248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    924c:	4842      	ldr	r0, [pc, #264]	; (9358 <z_time_slice+0x120>)
    924e:	f7ff f831 	bl	82b4 <z_spin_lock_valid>
    9252:	b310      	cbz	r0, 929a <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    9254:	4840      	ldr	r0, [pc, #256]	; (9358 <z_time_slice+0x120>)
    9256:	f7ff f84d 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    925a:	462b      	mov	r3, r5
	if (pending_current == _current) {
    925c:	4a3f      	ldr	r2, [pc, #252]	; (935c <z_time_slice+0x124>)
    925e:	6892      	ldr	r2, [r2, #8]
    9260:	493f      	ldr	r1, [pc, #252]	; (9360 <z_time_slice+0x128>)
    9262:	6809      	ldr	r1, [r1, #0]
    9264:	428a      	cmp	r2, r1
    9266:	d028      	beq.n	92ba <z_time_slice+0x82>
	pending_current = NULL;
    9268:	493d      	ldr	r1, [pc, #244]	; (9360 <z_time_slice+0x128>)
    926a:	2000      	movs	r0, #0
    926c:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    926e:	493d      	ldr	r1, [pc, #244]	; (9364 <z_time_slice+0x12c>)
    9270:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    9272:	2900      	cmp	r1, #0
    9274:	d052      	beq.n	931c <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9276:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    9278:	297f      	cmp	r1, #127	; 0x7f
    927a:	d83a      	bhi.n	92f2 <z_time_slice+0xba>
    927c:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    927e:	f011 0f1f 	tst.w	r1, #31
    9282:	d140      	bne.n	9306 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9284:	f992 000e 	ldrsb.w	r0, [r2, #14]
    9288:	4937      	ldr	r1, [pc, #220]	; (9368 <z_time_slice+0x130>)
    928a:	6809      	ldr	r1, [r1, #0]
    928c:	4288      	cmp	r0, r1
    928e:	db3c      	blt.n	930a <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    9290:	4936      	ldr	r1, [pc, #216]	; (936c <z_time_slice+0x134>)
    9292:	428a      	cmp	r2, r1
    9294:	d03b      	beq.n	930e <z_time_slice+0xd6>
    9296:	2201      	movs	r2, #1
    9298:	e02c      	b.n	92f4 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    929a:	4e35      	ldr	r6, [pc, #212]	; (9370 <z_time_slice+0x138>)
    929c:	238e      	movs	r3, #142	; 0x8e
    929e:	4632      	mov	r2, r6
    92a0:	4934      	ldr	r1, [pc, #208]	; (9374 <z_time_slice+0x13c>)
    92a2:	4835      	ldr	r0, [pc, #212]	; (9378 <z_time_slice+0x140>)
    92a4:	f002 f8b2 	bl	b40c <assert_print>
    92a8:	492b      	ldr	r1, [pc, #172]	; (9358 <z_time_slice+0x120>)
    92aa:	4834      	ldr	r0, [pc, #208]	; (937c <z_time_slice+0x144>)
    92ac:	f002 f8ae 	bl	b40c <assert_print>
    92b0:	218e      	movs	r1, #142	; 0x8e
    92b2:	4630      	mov	r0, r6
    92b4:	f002 f8a3 	bl	b3fe <assert_post_action>
    92b8:	e7cc      	b.n	9254 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    92ba:	4610      	mov	r0, r2
    92bc:	f7ff fd32 	bl	8d24 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    92c0:	4825      	ldr	r0, [pc, #148]	; (9358 <z_time_slice+0x120>)
    92c2:	f7ff f807 	bl	82d4 <z_spin_unlock_valid>
    92c6:	b120      	cbz	r0, 92d2 <z_time_slice+0x9a>
	__asm__ volatile(
    92c8:	f385 8811 	msr	BASEPRI, r5
    92cc:	f3bf 8f6f 	isb	sy
		return;
    92d0:	e030      	b.n	9334 <z_time_slice+0xfc>
    92d2:	4c27      	ldr	r4, [pc, #156]	; (9370 <z_time_slice+0x138>)
    92d4:	23b9      	movs	r3, #185	; 0xb9
    92d6:	4622      	mov	r2, r4
    92d8:	4929      	ldr	r1, [pc, #164]	; (9380 <z_time_slice+0x148>)
    92da:	4827      	ldr	r0, [pc, #156]	; (9378 <z_time_slice+0x140>)
    92dc:	f002 f896 	bl	b40c <assert_print>
    92e0:	491d      	ldr	r1, [pc, #116]	; (9358 <z_time_slice+0x120>)
    92e2:	4828      	ldr	r0, [pc, #160]	; (9384 <z_time_slice+0x14c>)
    92e4:	f002 f892 	bl	b40c <assert_print>
    92e8:	21b9      	movs	r1, #185	; 0xb9
    92ea:	4620      	mov	r0, r4
    92ec:	f002 f887 	bl	b3fe <assert_post_action>
    92f0:	e7ea      	b.n	92c8 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    92f2:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    92f4:	b192      	cbz	r2, 931c <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    92f6:	4a19      	ldr	r2, [pc, #100]	; (935c <z_time_slice+0x124>)
    92f8:	6910      	ldr	r0, [r2, #16]
    92fa:	42a0      	cmp	r0, r4
    92fc:	dd09      	ble.n	9312 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    92fe:	1b00      	subs	r0, r0, r4
    9300:	4a16      	ldr	r2, [pc, #88]	; (935c <z_time_slice+0x124>)
    9302:	6110      	str	r0, [r2, #16]
    9304:	e00d      	b.n	9322 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    9306:	2200      	movs	r2, #0
    9308:	e7f4      	b.n	92f4 <z_time_slice+0xbc>
    930a:	2200      	movs	r2, #0
    930c:	e7f2      	b.n	92f4 <z_time_slice+0xbc>
    930e:	2200      	movs	r2, #0
    9310:	e7f0      	b.n	92f4 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    9312:	4628      	mov	r0, r5
    9314:	f7ff ff7c 	bl	9210 <slice_expired_locked>
    9318:	4603      	mov	r3, r0
    931a:	e002      	b.n	9322 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    931c:	4a0f      	ldr	r2, [pc, #60]	; (935c <z_time_slice+0x124>)
    931e:	2100      	movs	r1, #0
    9320:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    9322:	461c      	mov	r4, r3
    9324:	480c      	ldr	r0, [pc, #48]	; (9358 <z_time_slice+0x120>)
    9326:	f7fe ffd5 	bl	82d4 <z_spin_unlock_valid>
    932a:	b120      	cbz	r0, 9336 <z_time_slice+0xfe>
    932c:	f384 8811 	msr	BASEPRI, r4
    9330:	f3bf 8f6f 	isb	sy
}
    9334:	bd70      	pop	{r4, r5, r6, pc}
    9336:	4d0e      	ldr	r5, [pc, #56]	; (9370 <z_time_slice+0x138>)
    9338:	23b9      	movs	r3, #185	; 0xb9
    933a:	462a      	mov	r2, r5
    933c:	4910      	ldr	r1, [pc, #64]	; (9380 <z_time_slice+0x148>)
    933e:	480e      	ldr	r0, [pc, #56]	; (9378 <z_time_slice+0x140>)
    9340:	f002 f864 	bl	b40c <assert_print>
    9344:	4904      	ldr	r1, [pc, #16]	; (9358 <z_time_slice+0x120>)
    9346:	480f      	ldr	r0, [pc, #60]	; (9384 <z_time_slice+0x14c>)
    9348:	f002 f860 	bl	b40c <assert_print>
    934c:	21b9      	movs	r1, #185	; 0xb9
    934e:	4628      	mov	r0, r5
    9350:	f002 f855 	bl	b3fe <assert_post_action>
    9354:	e7ea      	b.n	932c <z_time_slice+0xf4>
    9356:	bf00      	nop
    9358:	20001190 	.word	0x20001190
    935c:	20001154 	.word	0x20001154
    9360:	2000118c 	.word	0x2000118c
    9364:	20001198 	.word	0x20001198
    9368:	20001194 	.word	0x20001194
    936c:	20000490 	.word	0x20000490
    9370:	0000cfb0 	.word	0x0000cfb0
    9374:	0000d010 	.word	0x0000d010
    9378:	0000c8bc 	.word	0x0000c8bc
    937c:	0000d028 	.word	0x0000d028
    9380:	0000cfe0 	.word	0x0000cfe0
    9384:	0000cff8 	.word	0x0000cff8

00009388 <ready_thread>:
{
    9388:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    938a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    938c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    9390:	2a00      	cmp	r2, #0
    9392:	db30      	blt.n	93f6 <ready_thread+0x6e>
    9394:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9396:	f013 0f1f 	tst.w	r3, #31
    939a:	d105      	bne.n	93a8 <ready_thread+0x20>
	return node->next != NULL;
    939c:	6982      	ldr	r2, [r0, #24]
    939e:	b10a      	cbz	r2, 93a4 <ready_thread+0x1c>
    93a0:	2200      	movs	r2, #0
    93a2:	e002      	b.n	93aa <ready_thread+0x22>
    93a4:	2201      	movs	r2, #1
    93a6:	e000      	b.n	93aa <ready_thread+0x22>
    93a8:	2200      	movs	r2, #0
    93aa:	b322      	cbz	r2, 93f6 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    93ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    93b0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    93b2:	4b1b      	ldr	r3, [pc, #108]	; (9420 <ready_thread+0x98>)
    93b4:	429c      	cmp	r4, r3
    93b6:	d01f      	beq.n	93f8 <ready_thread+0x70>
	return list->head == list;
    93b8:	4b1a      	ldr	r3, [pc, #104]	; (9424 <ready_thread+0x9c>)
    93ba:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93be:	429d      	cmp	r5, r3
    93c0:	d02c      	beq.n	941c <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    93c2:	b16d      	cbz	r5, 93e0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    93c4:	4629      	mov	r1, r5
    93c6:	4620      	mov	r0, r4
    93c8:	f002 ff57 	bl	c27a <z_sched_prio_cmp>
    93cc:	2800      	cmp	r0, #0
    93ce:	dc1f      	bgt.n	9410 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    93d0:	b135      	cbz	r5, 93e0 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    93d2:	4b14      	ldr	r3, [pc, #80]	; (9424 <ready_thread+0x9c>)
    93d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93d6:	429d      	cmp	r5, r3
    93d8:	d002      	beq.n	93e0 <ready_thread+0x58>
    93da:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    93dc:	2d00      	cmp	r5, #0
    93de:	d1f0      	bne.n	93c2 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    93e0:	4b10      	ldr	r3, [pc, #64]	; (9424 <ready_thread+0x9c>)
    93e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    93e4:	f103 0120 	add.w	r1, r3, #32
    93e8:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    93ea:	6062      	str	r2, [r4, #4]
	tail->next = node;
    93ec:	6014      	str	r4, [r2, #0]
	list->tail = node;
    93ee:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    93f0:	2000      	movs	r0, #0
    93f2:	f7ff fe6f 	bl	90d4 <update_cache>
}
    93f6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    93f8:	4d0b      	ldr	r5, [pc, #44]	; (9428 <ready_thread+0xa0>)
    93fa:	23ba      	movs	r3, #186	; 0xba
    93fc:	462a      	mov	r2, r5
    93fe:	490b      	ldr	r1, [pc, #44]	; (942c <ready_thread+0xa4>)
    9400:	480b      	ldr	r0, [pc, #44]	; (9430 <ready_thread+0xa8>)
    9402:	f002 f803 	bl	b40c <assert_print>
    9406:	21ba      	movs	r1, #186	; 0xba
    9408:	4628      	mov	r0, r5
    940a:	f001 fff8 	bl	b3fe <assert_post_action>
    940e:	e7d3      	b.n	93b8 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    9410:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    9412:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9414:	6025      	str	r5, [r4, #0]
	prev->next = node;
    9416:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9418:	606c      	str	r4, [r5, #4]
}
    941a:	e7e9      	b.n	93f0 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    941c:	2500      	movs	r5, #0
    941e:	e7d0      	b.n	93c2 <ready_thread+0x3a>
    9420:	20000490 	.word	0x20000490
    9424:	20001154 	.word	0x20001154
    9428:	0000e888 	.word	0x0000e888
    942c:	0000e8c4 	.word	0x0000e8c4
    9430:	0000c8bc 	.word	0x0000c8bc

00009434 <z_ready_thread>:
{
    9434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9436:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9438:	2400      	movs	r4, #0
	__asm__ volatile(
    943a:	f04f 0320 	mov.w	r3, #32
    943e:	f3ef 8611 	mrs	r6, BASEPRI
    9442:	f383 8812 	msr	BASEPRI_MAX, r3
    9446:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    944a:	481e      	ldr	r0, [pc, #120]	; (94c4 <z_ready_thread+0x90>)
    944c:	f7fe ff32 	bl	82b4 <z_spin_lock_valid>
    9450:	b118      	cbz	r0, 945a <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    9452:	481c      	ldr	r0, [pc, #112]	; (94c4 <z_ready_thread+0x90>)
    9454:	f7fe ff4e 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    9458:	e018      	b.n	948c <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    945a:	4f1b      	ldr	r7, [pc, #108]	; (94c8 <z_ready_thread+0x94>)
    945c:	238e      	movs	r3, #142	; 0x8e
    945e:	463a      	mov	r2, r7
    9460:	491a      	ldr	r1, [pc, #104]	; (94cc <z_ready_thread+0x98>)
    9462:	481b      	ldr	r0, [pc, #108]	; (94d0 <z_ready_thread+0x9c>)
    9464:	f001 ffd2 	bl	b40c <assert_print>
    9468:	4916      	ldr	r1, [pc, #88]	; (94c4 <z_ready_thread+0x90>)
    946a:	481a      	ldr	r0, [pc, #104]	; (94d4 <z_ready_thread+0xa0>)
    946c:	f001 ffce 	bl	b40c <assert_print>
    9470:	218e      	movs	r1, #142	; 0x8e
    9472:	4638      	mov	r0, r7
    9474:	f001 ffc3 	bl	b3fe <assert_post_action>
    9478:	e7eb      	b.n	9452 <z_ready_thread+0x1e>
			ready_thread(thread);
    947a:	4628      	mov	r0, r5
    947c:	f7ff ff84 	bl	9388 <ready_thread>
    9480:	e00a      	b.n	9498 <z_ready_thread+0x64>
	__asm__ volatile(
    9482:	f386 8811 	msr	BASEPRI, r6
    9486:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    948a:	2401      	movs	r4, #1
    948c:	b9cc      	cbnz	r4, 94c2 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    948e:	4628      	mov	r0, r5
    9490:	f002 fef1 	bl	c276 <thread_active_elsewhere>
    9494:	2800      	cmp	r0, #0
    9496:	d0f0      	beq.n	947a <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9498:	480a      	ldr	r0, [pc, #40]	; (94c4 <z_ready_thread+0x90>)
    949a:	f7fe ff1b 	bl	82d4 <z_spin_unlock_valid>
    949e:	2800      	cmp	r0, #0
    94a0:	d1ef      	bne.n	9482 <z_ready_thread+0x4e>
    94a2:	4c09      	ldr	r4, [pc, #36]	; (94c8 <z_ready_thread+0x94>)
    94a4:	23b9      	movs	r3, #185	; 0xb9
    94a6:	4622      	mov	r2, r4
    94a8:	490b      	ldr	r1, [pc, #44]	; (94d8 <z_ready_thread+0xa4>)
    94aa:	4809      	ldr	r0, [pc, #36]	; (94d0 <z_ready_thread+0x9c>)
    94ac:	f001 ffae 	bl	b40c <assert_print>
    94b0:	4904      	ldr	r1, [pc, #16]	; (94c4 <z_ready_thread+0x90>)
    94b2:	480a      	ldr	r0, [pc, #40]	; (94dc <z_ready_thread+0xa8>)
    94b4:	f001 ffaa 	bl	b40c <assert_print>
    94b8:	21b9      	movs	r1, #185	; 0xb9
    94ba:	4620      	mov	r0, r4
    94bc:	f001 ff9f 	bl	b3fe <assert_post_action>
    94c0:	e7df      	b.n	9482 <z_ready_thread+0x4e>
}
    94c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94c4:	20001190 	.word	0x20001190
    94c8:	0000cfb0 	.word	0x0000cfb0
    94cc:	0000d010 	.word	0x0000d010
    94d0:	0000c8bc 	.word	0x0000c8bc
    94d4:	0000d028 	.word	0x0000d028
    94d8:	0000cfe0 	.word	0x0000cfe0
    94dc:	0000cff8 	.word	0x0000cff8

000094e0 <z_sched_start>:
{
    94e0:	b570      	push	{r4, r5, r6, lr}
    94e2:	4604      	mov	r4, r0
	__asm__ volatile(
    94e4:	f04f 0320 	mov.w	r3, #32
    94e8:	f3ef 8511 	mrs	r5, BASEPRI
    94ec:	f383 8812 	msr	BASEPRI_MAX, r3
    94f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94f4:	481f      	ldr	r0, [pc, #124]	; (9574 <z_sched_start+0x94>)
    94f6:	f7fe fedd 	bl	82b4 <z_spin_lock_valid>
    94fa:	b188      	cbz	r0, 9520 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    94fc:	481d      	ldr	r0, [pc, #116]	; (9574 <z_sched_start+0x94>)
    94fe:	f7fe fef9 	bl	82f4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9502:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    9504:	f013 0f04 	tst.w	r3, #4
    9508:	d01a      	beq.n	9540 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    950a:	f023 0304 	bic.w	r3, r3, #4
    950e:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    9510:	4620      	mov	r0, r4
    9512:	f7ff ff39 	bl	9388 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9516:	4629      	mov	r1, r5
    9518:	4816      	ldr	r0, [pc, #88]	; (9574 <z_sched_start+0x94>)
    951a:	f7ff fce7 	bl	8eec <z_reschedule>
}
    951e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9520:	4e15      	ldr	r6, [pc, #84]	; (9578 <z_sched_start+0x98>)
    9522:	238e      	movs	r3, #142	; 0x8e
    9524:	4632      	mov	r2, r6
    9526:	4915      	ldr	r1, [pc, #84]	; (957c <z_sched_start+0x9c>)
    9528:	4815      	ldr	r0, [pc, #84]	; (9580 <z_sched_start+0xa0>)
    952a:	f001 ff6f 	bl	b40c <assert_print>
    952e:	4911      	ldr	r1, [pc, #68]	; (9574 <z_sched_start+0x94>)
    9530:	4814      	ldr	r0, [pc, #80]	; (9584 <z_sched_start+0xa4>)
    9532:	f001 ff6b 	bl	b40c <assert_print>
    9536:	218e      	movs	r1, #142	; 0x8e
    9538:	4630      	mov	r0, r6
    953a:	f001 ff60 	bl	b3fe <assert_post_action>
    953e:	e7dd      	b.n	94fc <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9540:	480c      	ldr	r0, [pc, #48]	; (9574 <z_sched_start+0x94>)
    9542:	f7fe fec7 	bl	82d4 <z_spin_unlock_valid>
    9546:	b120      	cbz	r0, 9552 <z_sched_start+0x72>
	__asm__ volatile(
    9548:	f385 8811 	msr	BASEPRI, r5
    954c:	f3bf 8f6f 	isb	sy
		return;
    9550:	e7e5      	b.n	951e <z_sched_start+0x3e>
    9552:	4c09      	ldr	r4, [pc, #36]	; (9578 <z_sched_start+0x98>)
    9554:	23b9      	movs	r3, #185	; 0xb9
    9556:	4622      	mov	r2, r4
    9558:	490b      	ldr	r1, [pc, #44]	; (9588 <z_sched_start+0xa8>)
    955a:	4809      	ldr	r0, [pc, #36]	; (9580 <z_sched_start+0xa0>)
    955c:	f001 ff56 	bl	b40c <assert_print>
    9560:	4904      	ldr	r1, [pc, #16]	; (9574 <z_sched_start+0x94>)
    9562:	480a      	ldr	r0, [pc, #40]	; (958c <z_sched_start+0xac>)
    9564:	f001 ff52 	bl	b40c <assert_print>
    9568:	21b9      	movs	r1, #185	; 0xb9
    956a:	4620      	mov	r0, r4
    956c:	f001 ff47 	bl	b3fe <assert_post_action>
    9570:	e7ea      	b.n	9548 <z_sched_start+0x68>
    9572:	bf00      	nop
    9574:	20001190 	.word	0x20001190
    9578:	0000cfb0 	.word	0x0000cfb0
    957c:	0000d010 	.word	0x0000d010
    9580:	0000c8bc 	.word	0x0000c8bc
    9584:	0000d028 	.word	0x0000d028
    9588:	0000cfe0 	.word	0x0000cfe0
    958c:	0000cff8 	.word	0x0000cff8

00009590 <z_thread_timeout>:
{
    9590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9594:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    9596:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    959a:	2500      	movs	r5, #0
	__asm__ volatile(
    959c:	f04f 0320 	mov.w	r3, #32
    95a0:	f3ef 8711 	mrs	r7, BASEPRI
    95a4:	f383 8812 	msr	BASEPRI_MAX, r3
    95a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95ac:	482b      	ldr	r0, [pc, #172]	; (965c <z_thread_timeout+0xcc>)
    95ae:	f7fe fe81 	bl	82b4 <z_spin_lock_valid>
    95b2:	b118      	cbz	r0, 95bc <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    95b4:	4829      	ldr	r0, [pc, #164]	; (965c <z_thread_timeout+0xcc>)
    95b6:	f7fe fe9d 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    95ba:	e026      	b.n	960a <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95bc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9660 <z_thread_timeout+0xd0>
    95c0:	238e      	movs	r3, #142	; 0x8e
    95c2:	4642      	mov	r2, r8
    95c4:	4927      	ldr	r1, [pc, #156]	; (9664 <z_thread_timeout+0xd4>)
    95c6:	4828      	ldr	r0, [pc, #160]	; (9668 <z_thread_timeout+0xd8>)
    95c8:	f001 ff20 	bl	b40c <assert_print>
    95cc:	4923      	ldr	r1, [pc, #140]	; (965c <z_thread_timeout+0xcc>)
    95ce:	4827      	ldr	r0, [pc, #156]	; (966c <z_thread_timeout+0xdc>)
    95d0:	f001 ff1c 	bl	b40c <assert_print>
    95d4:	218e      	movs	r1, #142	; 0x8e
    95d6:	4640      	mov	r0, r8
    95d8:	f001 ff11 	bl	b3fe <assert_post_action>
    95dc:	e7ea      	b.n	95b4 <z_thread_timeout+0x24>
    95de:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    95e2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    95e6:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    95ea:	f023 0310 	bic.w	r3, r3, #16
    95ee:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    95f2:	4630      	mov	r0, r6
    95f4:	f7ff fec8 	bl	9388 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95f8:	4818      	ldr	r0, [pc, #96]	; (965c <z_thread_timeout+0xcc>)
    95fa:	f7fe fe6b 	bl	82d4 <z_spin_unlock_valid>
    95fe:	b1d8      	cbz	r0, 9638 <z_thread_timeout+0xa8>
	__asm__ volatile(
    9600:	f387 8811 	msr	BASEPRI, r7
    9604:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9608:	2501      	movs	r5, #1
    960a:	bb2d      	cbnz	r5, 9658 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    960c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    9610:	f013 0f28 	tst.w	r3, #40	; 0x28
    9614:	d1f0      	bne.n	95f8 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    9616:	f854 3c10 	ldr.w	r3, [r4, #-16]
    961a:	2b00      	cmp	r3, #0
    961c:	d0df      	beq.n	95de <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    961e:	4630      	mov	r0, r6
    9620:	f7ff fb56 	bl	8cd0 <pended_on_thread>
    9624:	4631      	mov	r1, r6
    9626:	f7ff fd31 	bl	908c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    962a:	7b73      	ldrb	r3, [r6, #13]
    962c:	f023 0302 	bic.w	r3, r3, #2
    9630:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    9632:	2300      	movs	r3, #0
    9634:	60b3      	str	r3, [r6, #8]
}
    9636:	e7d2      	b.n	95de <z_thread_timeout+0x4e>
    9638:	4d09      	ldr	r5, [pc, #36]	; (9660 <z_thread_timeout+0xd0>)
    963a:	23b9      	movs	r3, #185	; 0xb9
    963c:	462a      	mov	r2, r5
    963e:	490c      	ldr	r1, [pc, #48]	; (9670 <z_thread_timeout+0xe0>)
    9640:	4809      	ldr	r0, [pc, #36]	; (9668 <z_thread_timeout+0xd8>)
    9642:	f001 fee3 	bl	b40c <assert_print>
    9646:	4905      	ldr	r1, [pc, #20]	; (965c <z_thread_timeout+0xcc>)
    9648:	480a      	ldr	r0, [pc, #40]	; (9674 <z_thread_timeout+0xe4>)
    964a:	f001 fedf 	bl	b40c <assert_print>
    964e:	21b9      	movs	r1, #185	; 0xb9
    9650:	4628      	mov	r0, r5
    9652:	f001 fed4 	bl	b3fe <assert_post_action>
    9656:	e7d3      	b.n	9600 <z_thread_timeout+0x70>
}
    9658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    965c:	20001190 	.word	0x20001190
    9660:	0000cfb0 	.word	0x0000cfb0
    9664:	0000d010 	.word	0x0000d010
    9668:	0000c8bc 	.word	0x0000c8bc
    966c:	0000d028 	.word	0x0000d028
    9670:	0000cfe0 	.word	0x0000cfe0
    9674:	0000cff8 	.word	0x0000cff8

00009678 <unready_thread>:
{
    9678:	b510      	push	{r4, lr}
    967a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    967c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    967e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9682:	2b00      	cmp	r3, #0
    9684:	db08      	blt.n	9698 <unready_thread+0x20>
	update_cache(thread == _current);
    9686:	4b08      	ldr	r3, [pc, #32]	; (96a8 <unready_thread+0x30>)
    9688:	6898      	ldr	r0, [r3, #8]
    968a:	42a0      	cmp	r0, r4
    968c:	bf14      	ite	ne
    968e:	2000      	movne	r0, #0
    9690:	2001      	moveq	r0, #1
    9692:	f7ff fd1f 	bl	90d4 <update_cache>
}
    9696:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9698:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    969c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    969e:	4601      	mov	r1, r0
    96a0:	4802      	ldr	r0, [pc, #8]	; (96ac <unready_thread+0x34>)
    96a2:	f7ff fcf3 	bl	908c <z_priq_dumb_remove>
}
    96a6:	e7ee      	b.n	9686 <unready_thread+0xe>
    96a8:	20001154 	.word	0x20001154
    96ac:	20001174 	.word	0x20001174

000096b0 <add_to_waitq_locked>:
{
    96b0:	b570      	push	{r4, r5, r6, lr}
    96b2:	4605      	mov	r5, r0
    96b4:	460e      	mov	r6, r1
	unready_thread(thread);
    96b6:	f7ff ffdf 	bl	9678 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    96ba:	7b6b      	ldrb	r3, [r5, #13]
    96bc:	f043 0302 	orr.w	r3, r3, #2
    96c0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    96c2:	b1ce      	cbz	r6, 96f8 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    96c4:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    96c6:	4b17      	ldr	r3, [pc, #92]	; (9724 <add_to_waitq_locked+0x74>)
    96c8:	429d      	cmp	r5, r3
    96ca:	d016      	beq.n	96fa <add_to_waitq_locked+0x4a>
	return list->head == list;
    96cc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96ce:	42a6      	cmp	r6, r4
    96d0:	d025      	beq.n	971e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    96d2:	b164      	cbz	r4, 96ee <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    96d4:	4621      	mov	r1, r4
    96d6:	4628      	mov	r0, r5
    96d8:	f002 fdcf 	bl	c27a <z_sched_prio_cmp>
    96dc:	2800      	cmp	r0, #0
    96de:	dc18      	bgt.n	9712 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    96e0:	b12c      	cbz	r4, 96ee <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    96e2:	6873      	ldr	r3, [r6, #4]
    96e4:	429c      	cmp	r4, r3
    96e6:	d002      	beq.n	96ee <add_to_waitq_locked+0x3e>
    96e8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    96ea:	2c00      	cmp	r4, #0
    96ec:	d1f1      	bne.n	96d2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    96ee:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    96f0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    96f2:	606b      	str	r3, [r5, #4]
	tail->next = node;
    96f4:	601d      	str	r5, [r3, #0]
	list->tail = node;
    96f6:	6075      	str	r5, [r6, #4]
}
    96f8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    96fa:	4c0b      	ldr	r4, [pc, #44]	; (9728 <add_to_waitq_locked+0x78>)
    96fc:	23ba      	movs	r3, #186	; 0xba
    96fe:	4622      	mov	r2, r4
    9700:	490a      	ldr	r1, [pc, #40]	; (972c <add_to_waitq_locked+0x7c>)
    9702:	480b      	ldr	r0, [pc, #44]	; (9730 <add_to_waitq_locked+0x80>)
    9704:	f001 fe82 	bl	b40c <assert_print>
    9708:	21ba      	movs	r1, #186	; 0xba
    970a:	4620      	mov	r0, r4
    970c:	f001 fe77 	bl	b3fe <assert_post_action>
    9710:	e7dc      	b.n	96cc <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9712:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9714:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9716:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9718:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    971a:	6065      	str	r5, [r4, #4]
}
    971c:	e7ec      	b.n	96f8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    971e:	2400      	movs	r4, #0
    9720:	e7d7      	b.n	96d2 <add_to_waitq_locked+0x22>
    9722:	bf00      	nop
    9724:	20000490 	.word	0x20000490
    9728:	0000e888 	.word	0x0000e888
    972c:	0000e8c4 	.word	0x0000e8c4
    9730:	0000c8bc 	.word	0x0000c8bc

00009734 <pend>:
{
    9734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9738:	4605      	mov	r5, r0
    973a:	460e      	mov	r6, r1
    973c:	4691      	mov	r9, r2
    973e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    9740:	2400      	movs	r4, #0
	__asm__ volatile(
    9742:	f04f 0320 	mov.w	r3, #32
    9746:	f3ef 8711 	mrs	r7, BASEPRI
    974a:	f383 8812 	msr	BASEPRI_MAX, r3
    974e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9752:	481f      	ldr	r0, [pc, #124]	; (97d0 <pend+0x9c>)
    9754:	f7fe fdae 	bl	82b4 <z_spin_lock_valid>
    9758:	b118      	cbz	r0, 9762 <pend+0x2e>
	z_spin_lock_set_owner(l);
    975a:	481d      	ldr	r0, [pc, #116]	; (97d0 <pend+0x9c>)
    975c:	f7fe fdca 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    9760:	e015      	b.n	978e <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9762:	f8df a070 	ldr.w	sl, [pc, #112]	; 97d4 <pend+0xa0>
    9766:	238e      	movs	r3, #142	; 0x8e
    9768:	4652      	mov	r2, sl
    976a:	491b      	ldr	r1, [pc, #108]	; (97d8 <pend+0xa4>)
    976c:	481b      	ldr	r0, [pc, #108]	; (97dc <pend+0xa8>)
    976e:	f001 fe4d 	bl	b40c <assert_print>
    9772:	4917      	ldr	r1, [pc, #92]	; (97d0 <pend+0x9c>)
    9774:	481a      	ldr	r0, [pc, #104]	; (97e0 <pend+0xac>)
    9776:	f001 fe49 	bl	b40c <assert_print>
    977a:	218e      	movs	r1, #142	; 0x8e
    977c:	4650      	mov	r0, sl
    977e:	f001 fe3e 	bl	b3fe <assert_post_action>
    9782:	e7ea      	b.n	975a <pend+0x26>
	__asm__ volatile(
    9784:	f387 8811 	msr	BASEPRI, r7
    9788:	f3bf 8f6f 	isb	sy
    978c:	2401      	movs	r4, #1
    978e:	b9c4      	cbnz	r4, 97c2 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    9790:	4631      	mov	r1, r6
    9792:	4628      	mov	r0, r5
    9794:	f7ff ff8c 	bl	96b0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9798:	480d      	ldr	r0, [pc, #52]	; (97d0 <pend+0x9c>)
    979a:	f7fe fd9b 	bl	82d4 <z_spin_unlock_valid>
    979e:	2800      	cmp	r0, #0
    97a0:	d1f0      	bne.n	9784 <pend+0x50>
    97a2:	4c0c      	ldr	r4, [pc, #48]	; (97d4 <pend+0xa0>)
    97a4:	23b9      	movs	r3, #185	; 0xb9
    97a6:	4622      	mov	r2, r4
    97a8:	490e      	ldr	r1, [pc, #56]	; (97e4 <pend+0xb0>)
    97aa:	480c      	ldr	r0, [pc, #48]	; (97dc <pend+0xa8>)
    97ac:	f001 fe2e 	bl	b40c <assert_print>
    97b0:	4907      	ldr	r1, [pc, #28]	; (97d0 <pend+0x9c>)
    97b2:	480d      	ldr	r0, [pc, #52]	; (97e8 <pend+0xb4>)
    97b4:	f001 fe2a 	bl	b40c <assert_print>
    97b8:	21b9      	movs	r1, #185	; 0xb9
    97ba:	4620      	mov	r0, r4
    97bc:	f001 fe1f 	bl	b3fe <assert_post_action>
    97c0:	e7e0      	b.n	9784 <pend+0x50>
	add_thread_timeout(thread, timeout);
    97c2:	464a      	mov	r2, r9
    97c4:	4643      	mov	r3, r8
    97c6:	4628      	mov	r0, r5
    97c8:	f7ff fa9c 	bl	8d04 <add_thread_timeout>
}
    97cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97d0:	20001190 	.word	0x20001190
    97d4:	0000cfb0 	.word	0x0000cfb0
    97d8:	0000d010 	.word	0x0000d010
    97dc:	0000c8bc 	.word	0x0000c8bc
    97e0:	0000d028 	.word	0x0000d028
    97e4:	0000cfe0 	.word	0x0000cfe0
    97e8:	0000cff8 	.word	0x0000cff8

000097ec <z_pend_curr>:
{
    97ec:	b570      	push	{r4, r5, r6, lr}
    97ee:	4604      	mov	r4, r0
    97f0:	460d      	mov	r5, r1
    97f2:	4611      	mov	r1, r2
	pending_current = _current;
    97f4:	4b0f      	ldr	r3, [pc, #60]	; (9834 <z_pend_curr+0x48>)
    97f6:	6898      	ldr	r0, [r3, #8]
    97f8:	4b0f      	ldr	r3, [pc, #60]	; (9838 <z_pend_curr+0x4c>)
    97fa:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    97fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9800:	f7ff ff98 	bl	9734 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9804:	4620      	mov	r0, r4
    9806:	f7fe fd65 	bl	82d4 <z_spin_unlock_valid>
    980a:	b118      	cbz	r0, 9814 <z_pend_curr+0x28>
    980c:	4628      	mov	r0, r5
    980e:	f7fa f81f 	bl	3850 <arch_swap>
}
    9812:	bd70      	pop	{r4, r5, r6, pc}
    9814:	4e09      	ldr	r6, [pc, #36]	; (983c <z_pend_curr+0x50>)
    9816:	23d0      	movs	r3, #208	; 0xd0
    9818:	4632      	mov	r2, r6
    981a:	4909      	ldr	r1, [pc, #36]	; (9840 <z_pend_curr+0x54>)
    981c:	4809      	ldr	r0, [pc, #36]	; (9844 <z_pend_curr+0x58>)
    981e:	f001 fdf5 	bl	b40c <assert_print>
    9822:	4621      	mov	r1, r4
    9824:	4808      	ldr	r0, [pc, #32]	; (9848 <z_pend_curr+0x5c>)
    9826:	f001 fdf1 	bl	b40c <assert_print>
    982a:	21d0      	movs	r1, #208	; 0xd0
    982c:	4630      	mov	r0, r6
    982e:	f001 fde6 	bl	b3fe <assert_post_action>
    9832:	e7eb      	b.n	980c <z_pend_curr+0x20>
    9834:	20001154 	.word	0x20001154
    9838:	2000118c 	.word	0x2000118c
    983c:	0000cfb0 	.word	0x0000cfb0
    9840:	0000cfe0 	.word	0x0000cfe0
    9844:	0000c8bc 	.word	0x0000c8bc
    9848:	0000cff8 	.word	0x0000cff8

0000984c <z_set_prio>:
{
    984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9850:	4604      	mov	r4, r0
    9852:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    9854:	2500      	movs	r5, #0
	__asm__ volatile(
    9856:	f04f 0320 	mov.w	r3, #32
    985a:	f3ef 8811 	mrs	r8, BASEPRI
    985e:	f383 8812 	msr	BASEPRI_MAX, r3
    9862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9866:	4844      	ldr	r0, [pc, #272]	; (9978 <z_set_prio+0x12c>)
    9868:	f7fe fd24 	bl	82b4 <z_spin_lock_valid>
    986c:	b120      	cbz	r0, 9878 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    986e:	4842      	ldr	r0, [pc, #264]	; (9978 <z_set_prio+0x12c>)
    9870:	f7fe fd40 	bl	82f4 <z_spin_lock_set_owner>
	bool need_sched = 0;
    9874:	2700      	movs	r7, #0
	return k;
    9876:	e01d      	b.n	98b4 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9878:	4f40      	ldr	r7, [pc, #256]	; (997c <z_set_prio+0x130>)
    987a:	238e      	movs	r3, #142	; 0x8e
    987c:	463a      	mov	r2, r7
    987e:	4940      	ldr	r1, [pc, #256]	; (9980 <z_set_prio+0x134>)
    9880:	4840      	ldr	r0, [pc, #256]	; (9984 <z_set_prio+0x138>)
    9882:	f001 fdc3 	bl	b40c <assert_print>
    9886:	493c      	ldr	r1, [pc, #240]	; (9978 <z_set_prio+0x12c>)
    9888:	483f      	ldr	r0, [pc, #252]	; (9988 <z_set_prio+0x13c>)
    988a:	f001 fdbf 	bl	b40c <assert_print>
    988e:	218e      	movs	r1, #142	; 0x8e
    9890:	4638      	mov	r0, r7
    9892:	f001 fdb4 	bl	b3fe <assert_post_action>
    9896:	e7ea      	b.n	986e <z_set_prio+0x22>
		if (need_sched) {
    9898:	f013 0701 	ands.w	r7, r3, #1
    989c:	d116      	bne.n	98cc <z_set_prio+0x80>
			thread->base.prio = prio;
    989e:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98a0:	4835      	ldr	r0, [pc, #212]	; (9978 <z_set_prio+0x12c>)
    98a2:	f7fe fd17 	bl	82d4 <z_spin_unlock_valid>
    98a6:	2800      	cmp	r0, #0
    98a8:	d053      	beq.n	9952 <z_set_prio+0x106>
	__asm__ volatile(
    98aa:	f388 8811 	msr	BASEPRI, r8
    98ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    98b2:	2501      	movs	r5, #1
    98b4:	462b      	mov	r3, r5
    98b6:	2d00      	cmp	r5, #0
    98b8:	d15b      	bne.n	9972 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    98ba:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    98bc:	f012 0f1f 	tst.w	r2, #31
    98c0:	d1ea      	bne.n	9898 <z_set_prio+0x4c>
	return node->next != NULL;
    98c2:	69a1      	ldr	r1, [r4, #24]
    98c4:	2900      	cmp	r1, #0
    98c6:	d1e7      	bne.n	9898 <z_set_prio+0x4c>
    98c8:	2301      	movs	r3, #1
    98ca:	e7e5      	b.n	9898 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    98cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    98d0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    98d2:	4621      	mov	r1, r4
    98d4:	482d      	ldr	r0, [pc, #180]	; (998c <z_set_prio+0x140>)
    98d6:	f7ff fbd9 	bl	908c <z_priq_dumb_remove>
				thread->base.prio = prio;
    98da:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    98dc:	7b63      	ldrb	r3, [r4, #13]
    98de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    98e2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    98e4:	4b2a      	ldr	r3, [pc, #168]	; (9990 <z_set_prio+0x144>)
    98e6:	429c      	cmp	r4, r3
    98e8:	d01f      	beq.n	992a <z_set_prio+0xde>
	return list->head == list;
    98ea:	4b2a      	ldr	r3, [pc, #168]	; (9994 <z_set_prio+0x148>)
    98ec:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98f0:	429d      	cmp	r5, r3
    98f2:	d02c      	beq.n	994e <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    98f4:	b16d      	cbz	r5, 9912 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    98f6:	4629      	mov	r1, r5
    98f8:	4620      	mov	r0, r4
    98fa:	f002 fcbe 	bl	c27a <z_sched_prio_cmp>
    98fe:	2800      	cmp	r0, #0
    9900:	dc1f      	bgt.n	9942 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9902:	b135      	cbz	r5, 9912 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    9904:	4b23      	ldr	r3, [pc, #140]	; (9994 <z_set_prio+0x148>)
    9906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9908:	429d      	cmp	r5, r3
    990a:	d002      	beq.n	9912 <z_set_prio+0xc6>
    990c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    990e:	2d00      	cmp	r5, #0
    9910:	d1f0      	bne.n	98f4 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    9912:	4b20      	ldr	r3, [pc, #128]	; (9994 <z_set_prio+0x148>)
    9914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9916:	f103 0120 	add.w	r1, r3, #32
    991a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    991c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    991e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9920:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    9922:	2001      	movs	r0, #1
    9924:	f7ff fbd6 	bl	90d4 <update_cache>
    9928:	e7ba      	b.n	98a0 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    992a:	4d1b      	ldr	r5, [pc, #108]	; (9998 <z_set_prio+0x14c>)
    992c:	23ba      	movs	r3, #186	; 0xba
    992e:	462a      	mov	r2, r5
    9930:	491a      	ldr	r1, [pc, #104]	; (999c <z_set_prio+0x150>)
    9932:	4814      	ldr	r0, [pc, #80]	; (9984 <z_set_prio+0x138>)
    9934:	f001 fd6a 	bl	b40c <assert_print>
    9938:	21ba      	movs	r1, #186	; 0xba
    993a:	4628      	mov	r0, r5
    993c:	f001 fd5f 	bl	b3fe <assert_post_action>
    9940:	e7d3      	b.n	98ea <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    9942:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    9944:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9946:	6025      	str	r5, [r4, #0]
	prev->next = node;
    9948:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    994a:	606c      	str	r4, [r5, #4]
}
    994c:	e7e9      	b.n	9922 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    994e:	2500      	movs	r5, #0
    9950:	e7d0      	b.n	98f4 <z_set_prio+0xa8>
    9952:	4d0a      	ldr	r5, [pc, #40]	; (997c <z_set_prio+0x130>)
    9954:	23b9      	movs	r3, #185	; 0xb9
    9956:	462a      	mov	r2, r5
    9958:	4911      	ldr	r1, [pc, #68]	; (99a0 <z_set_prio+0x154>)
    995a:	480a      	ldr	r0, [pc, #40]	; (9984 <z_set_prio+0x138>)
    995c:	f001 fd56 	bl	b40c <assert_print>
    9960:	4905      	ldr	r1, [pc, #20]	; (9978 <z_set_prio+0x12c>)
    9962:	4810      	ldr	r0, [pc, #64]	; (99a4 <z_set_prio+0x158>)
    9964:	f001 fd52 	bl	b40c <assert_print>
    9968:	21b9      	movs	r1, #185	; 0xb9
    996a:	4628      	mov	r0, r5
    996c:	f001 fd47 	bl	b3fe <assert_post_action>
    9970:	e79b      	b.n	98aa <z_set_prio+0x5e>
}
    9972:	4638      	mov	r0, r7
    9974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9978:	20001190 	.word	0x20001190
    997c:	0000cfb0 	.word	0x0000cfb0
    9980:	0000d010 	.word	0x0000d010
    9984:	0000c8bc 	.word	0x0000c8bc
    9988:	0000d028 	.word	0x0000d028
    998c:	20001174 	.word	0x20001174
    9990:	20000490 	.word	0x20000490
    9994:	20001154 	.word	0x20001154
    9998:	0000e888 	.word	0x0000e888
    999c:	0000e8c4 	.word	0x0000e8c4
    99a0:	0000cfe0 	.word	0x0000cfe0
    99a4:	0000cff8 	.word	0x0000cff8

000099a8 <z_impl_k_thread_suspend>:
{
    99a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99aa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    99ac:	3018      	adds	r0, #24
    99ae:	f000 fdcf 	bl	a550 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    99b2:	2500      	movs	r5, #0
	__asm__ volatile(
    99b4:	f04f 0320 	mov.w	r3, #32
    99b8:	f3ef 8611 	mrs	r6, BASEPRI
    99bc:	f383 8812 	msr	BASEPRI_MAX, r3
    99c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99c4:	482d      	ldr	r0, [pc, #180]	; (9a7c <z_impl_k_thread_suspend+0xd4>)
    99c6:	f7fe fc75 	bl	82b4 <z_spin_lock_valid>
    99ca:	b118      	cbz	r0, 99d4 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    99cc:	482b      	ldr	r0, [pc, #172]	; (9a7c <z_impl_k_thread_suspend+0xd4>)
    99ce:	f7fe fc91 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    99d2:	e01c      	b.n	9a0e <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99d4:	4f2a      	ldr	r7, [pc, #168]	; (9a80 <z_impl_k_thread_suspend+0xd8>)
    99d6:	238e      	movs	r3, #142	; 0x8e
    99d8:	463a      	mov	r2, r7
    99da:	492a      	ldr	r1, [pc, #168]	; (9a84 <z_impl_k_thread_suspend+0xdc>)
    99dc:	482a      	ldr	r0, [pc, #168]	; (9a88 <z_impl_k_thread_suspend+0xe0>)
    99de:	f001 fd15 	bl	b40c <assert_print>
    99e2:	4926      	ldr	r1, [pc, #152]	; (9a7c <z_impl_k_thread_suspend+0xd4>)
    99e4:	4829      	ldr	r0, [pc, #164]	; (9a8c <z_impl_k_thread_suspend+0xe4>)
    99e6:	f001 fd11 	bl	b40c <assert_print>
    99ea:	218e      	movs	r1, #142	; 0x8e
    99ec:	4638      	mov	r0, r7
    99ee:	f001 fd06 	bl	b3fe <assert_post_action>
    99f2:	e7eb      	b.n	99cc <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    99f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    99f8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    99fa:	4621      	mov	r1, r4
    99fc:	4824      	ldr	r0, [pc, #144]	; (9a90 <z_impl_k_thread_suspend+0xe8>)
    99fe:	f7ff fb45 	bl	908c <z_priq_dumb_remove>
}
    9a02:	e00a      	b.n	9a1a <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    9a04:	f386 8811 	msr	BASEPRI, r6
    9a08:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9a0c:	2501      	movs	r5, #1
    9a0e:	bb2d      	cbnz	r5, 9a5c <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    9a10:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    9a12:	f994 300d 	ldrsb.w	r3, [r4, #13]
    9a16:	2b00      	cmp	r3, #0
    9a18:	dbec      	blt.n	99f4 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9a1a:	7b63      	ldrb	r3, [r4, #13]
    9a1c:	f043 0310 	orr.w	r3, r3, #16
    9a20:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    9a22:	4b1c      	ldr	r3, [pc, #112]	; (9a94 <z_impl_k_thread_suspend+0xec>)
    9a24:	6898      	ldr	r0, [r3, #8]
    9a26:	42a0      	cmp	r0, r4
    9a28:	bf14      	ite	ne
    9a2a:	2000      	movne	r0, #0
    9a2c:	2001      	moveq	r0, #1
    9a2e:	f7ff fb51 	bl	90d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a32:	4812      	ldr	r0, [pc, #72]	; (9a7c <z_impl_k_thread_suspend+0xd4>)
    9a34:	f7fe fc4e 	bl	82d4 <z_spin_unlock_valid>
    9a38:	2800      	cmp	r0, #0
    9a3a:	d1e3      	bne.n	9a04 <z_impl_k_thread_suspend+0x5c>
    9a3c:	4d10      	ldr	r5, [pc, #64]	; (9a80 <z_impl_k_thread_suspend+0xd8>)
    9a3e:	23b9      	movs	r3, #185	; 0xb9
    9a40:	462a      	mov	r2, r5
    9a42:	4915      	ldr	r1, [pc, #84]	; (9a98 <z_impl_k_thread_suspend+0xf0>)
    9a44:	4810      	ldr	r0, [pc, #64]	; (9a88 <z_impl_k_thread_suspend+0xe0>)
    9a46:	f001 fce1 	bl	b40c <assert_print>
    9a4a:	490c      	ldr	r1, [pc, #48]	; (9a7c <z_impl_k_thread_suspend+0xd4>)
    9a4c:	4813      	ldr	r0, [pc, #76]	; (9a9c <z_impl_k_thread_suspend+0xf4>)
    9a4e:	f001 fcdd 	bl	b40c <assert_print>
    9a52:	21b9      	movs	r1, #185	; 0xb9
    9a54:	4628      	mov	r0, r5
    9a56:	f001 fcd2 	bl	b3fe <assert_post_action>
    9a5a:	e7d3      	b.n	9a04 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    9a5c:	4b0d      	ldr	r3, [pc, #52]	; (9a94 <z_impl_k_thread_suspend+0xec>)
    9a5e:	689b      	ldr	r3, [r3, #8]
    9a60:	42a3      	cmp	r3, r4
    9a62:	d000      	beq.n	9a66 <z_impl_k_thread_suspend+0xbe>
}
    9a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    9a66:	f04f 0320 	mov.w	r3, #32
    9a6a:	f3ef 8011 	mrs	r0, BASEPRI
    9a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    9a72:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9a76:	f002 fc0a 	bl	c28e <z_reschedule_irqlock>
    9a7a:	e7f3      	b.n	9a64 <z_impl_k_thread_suspend+0xbc>
    9a7c:	20001190 	.word	0x20001190
    9a80:	0000cfb0 	.word	0x0000cfb0
    9a84:	0000d010 	.word	0x0000d010
    9a88:	0000c8bc 	.word	0x0000c8bc
    9a8c:	0000d028 	.word	0x0000d028
    9a90:	20001174 	.word	0x20001174
    9a94:	20001154 	.word	0x20001154
    9a98:	0000cfe0 	.word	0x0000cfe0
    9a9c:	0000cff8 	.word	0x0000cff8

00009aa0 <k_sched_unlock>:
{
    9aa0:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9aa2:	2400      	movs	r4, #0
    9aa4:	f04f 0320 	mov.w	r3, #32
    9aa8:	f3ef 8511 	mrs	r5, BASEPRI
    9aac:	f383 8812 	msr	BASEPRI_MAX, r3
    9ab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ab4:	4838      	ldr	r0, [pc, #224]	; (9b98 <k_sched_unlock+0xf8>)
    9ab6:	f7fe fbfd 	bl	82b4 <z_spin_lock_valid>
    9aba:	b118      	cbz	r0, 9ac4 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    9abc:	4836      	ldr	r0, [pc, #216]	; (9b98 <k_sched_unlock+0xf8>)
    9abe:	f7fe fc19 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    9ac2:	e036      	b.n	9b32 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ac4:	4e35      	ldr	r6, [pc, #212]	; (9b9c <k_sched_unlock+0xfc>)
    9ac6:	238e      	movs	r3, #142	; 0x8e
    9ac8:	4632      	mov	r2, r6
    9aca:	4935      	ldr	r1, [pc, #212]	; (9ba0 <k_sched_unlock+0x100>)
    9acc:	4835      	ldr	r0, [pc, #212]	; (9ba4 <k_sched_unlock+0x104>)
    9ace:	f001 fc9d 	bl	b40c <assert_print>
    9ad2:	4931      	ldr	r1, [pc, #196]	; (9b98 <k_sched_unlock+0xf8>)
    9ad4:	4834      	ldr	r0, [pc, #208]	; (9ba8 <k_sched_unlock+0x108>)
    9ad6:	f001 fc99 	bl	b40c <assert_print>
    9ada:	218e      	movs	r1, #142	; 0x8e
    9adc:	4630      	mov	r0, r6
    9ade:	f001 fc8e 	bl	b3fe <assert_post_action>
    9ae2:	e7eb      	b.n	9abc <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    9ae4:	4c31      	ldr	r4, [pc, #196]	; (9bac <k_sched_unlock+0x10c>)
    9ae6:	f240 33bb 	movw	r3, #955	; 0x3bb
    9aea:	4622      	mov	r2, r4
    9aec:	4930      	ldr	r1, [pc, #192]	; (9bb0 <k_sched_unlock+0x110>)
    9aee:	482d      	ldr	r0, [pc, #180]	; (9ba4 <k_sched_unlock+0x104>)
    9af0:	f001 fc8c 	bl	b40c <assert_print>
    9af4:	482f      	ldr	r0, [pc, #188]	; (9bb4 <k_sched_unlock+0x114>)
    9af6:	f001 fc89 	bl	b40c <assert_print>
    9afa:	f240 31bb 	movw	r1, #955	; 0x3bb
    9afe:	4620      	mov	r0, r4
    9b00:	f001 fc7d 	bl	b3fe <assert_post_action>
    9b04:	e01b      	b.n	9b3e <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    9b06:	4c29      	ldr	r4, [pc, #164]	; (9bac <k_sched_unlock+0x10c>)
    9b08:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    9b0c:	4622      	mov	r2, r4
    9b0e:	492a      	ldr	r1, [pc, #168]	; (9bb8 <k_sched_unlock+0x118>)
    9b10:	4824      	ldr	r0, [pc, #144]	; (9ba4 <k_sched_unlock+0x104>)
    9b12:	f001 fc7b 	bl	b40c <assert_print>
    9b16:	4827      	ldr	r0, [pc, #156]	; (9bb4 <k_sched_unlock+0x114>)
    9b18:	f001 fc78 	bl	b40c <assert_print>
    9b1c:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    9b20:	4620      	mov	r0, r4
    9b22:	f001 fc6c 	bl	b3fe <assert_post_action>
    9b26:	e00e      	b.n	9b46 <k_sched_unlock+0xa6>
	__asm__ volatile(
    9b28:	f385 8811 	msr	BASEPRI, r5
    9b2c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9b30:	2401      	movs	r4, #1
    9b32:	bb2c      	cbnz	r4, 9b80 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    9b34:	4b21      	ldr	r3, [pc, #132]	; (9bbc <k_sched_unlock+0x11c>)
    9b36:	689b      	ldr	r3, [r3, #8]
    9b38:	7bdb      	ldrb	r3, [r3, #15]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d0d2      	beq.n	9ae4 <k_sched_unlock+0x44>
    9b3e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    9b42:	2b00      	cmp	r3, #0
    9b44:	d1df      	bne.n	9b06 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    9b46:	4b1d      	ldr	r3, [pc, #116]	; (9bbc <k_sched_unlock+0x11c>)
    9b48:	689a      	ldr	r2, [r3, #8]
    9b4a:	7bd3      	ldrb	r3, [r2, #15]
    9b4c:	3301      	adds	r3, #1
    9b4e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9b50:	2000      	movs	r0, #0
    9b52:	f7ff fabf 	bl	90d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b56:	4810      	ldr	r0, [pc, #64]	; (9b98 <k_sched_unlock+0xf8>)
    9b58:	f7fe fbbc 	bl	82d4 <z_spin_unlock_valid>
    9b5c:	2800      	cmp	r0, #0
    9b5e:	d1e3      	bne.n	9b28 <k_sched_unlock+0x88>
    9b60:	4c0e      	ldr	r4, [pc, #56]	; (9b9c <k_sched_unlock+0xfc>)
    9b62:	23b9      	movs	r3, #185	; 0xb9
    9b64:	4622      	mov	r2, r4
    9b66:	4916      	ldr	r1, [pc, #88]	; (9bc0 <k_sched_unlock+0x120>)
    9b68:	480e      	ldr	r0, [pc, #56]	; (9ba4 <k_sched_unlock+0x104>)
    9b6a:	f001 fc4f 	bl	b40c <assert_print>
    9b6e:	490a      	ldr	r1, [pc, #40]	; (9b98 <k_sched_unlock+0xf8>)
    9b70:	4814      	ldr	r0, [pc, #80]	; (9bc4 <k_sched_unlock+0x124>)
    9b72:	f001 fc4b 	bl	b40c <assert_print>
    9b76:	21b9      	movs	r1, #185	; 0xb9
    9b78:	4620      	mov	r0, r4
    9b7a:	f001 fc40 	bl	b3fe <assert_post_action>
    9b7e:	e7d3      	b.n	9b28 <k_sched_unlock+0x88>
	__asm__ volatile(
    9b80:	f04f 0320 	mov.w	r3, #32
    9b84:	f3ef 8011 	mrs	r0, BASEPRI
    9b88:	f383 8812 	msr	BASEPRI_MAX, r3
    9b8c:	f3bf 8f6f 	isb	sy
    9b90:	f002 fb7d 	bl	c28e <z_reschedule_irqlock>
}
    9b94:	bd70      	pop	{r4, r5, r6, pc}
    9b96:	bf00      	nop
    9b98:	20001190 	.word	0x20001190
    9b9c:	0000cfb0 	.word	0x0000cfb0
    9ba0:	0000d010 	.word	0x0000d010
    9ba4:	0000c8bc 	.word	0x0000c8bc
    9ba8:	0000d028 	.word	0x0000d028
    9bac:	0000e888 	.word	0x0000e888
    9bb0:	0000e910 	.word	0x0000e910
    9bb4:	0000e7e0 	.word	0x0000e7e0
    9bb8:	0000e698 	.word	0x0000e698
    9bbc:	20001154 	.word	0x20001154
    9bc0:	0000cfe0 	.word	0x0000cfe0
    9bc4:	0000cff8 	.word	0x0000cff8

00009bc8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    9bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    9bca:	7b43      	ldrb	r3, [r0, #13]
    9bcc:	f013 0f08 	tst.w	r3, #8
    9bd0:	d145      	bne.n	9c5e <end_thread+0x96>
    9bd2:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    9bd4:	f043 0308 	orr.w	r3, r3, #8
    9bd8:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9bda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9bde:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    9be0:	f013 0f80 	tst.w	r3, #128	; 0x80
    9be4:	d12d      	bne.n	9c42 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    9be6:	68ab      	ldr	r3, [r5, #8]
    9be8:	b15b      	cbz	r3, 9c02 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9bea:	4628      	mov	r0, r5
    9bec:	f7ff f870 	bl	8cd0 <pended_on_thread>
    9bf0:	4629      	mov	r1, r5
    9bf2:	f7ff fa4b 	bl	908c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9bf6:	7b6b      	ldrb	r3, [r5, #13]
    9bf8:	f023 0302 	bic.w	r3, r3, #2
    9bfc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    9bfe:	2300      	movs	r3, #0
    9c00:	60ab      	str	r3, [r5, #8]
    9c02:	f105 0018 	add.w	r0, r5, #24
    9c06:	f000 fca3 	bl	a550 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    9c0a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    9c0e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c10:	42bc      	cmp	r4, r7
    9c12:	d01e      	beq.n	9c52 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9c14:	b1ec      	cbz	r4, 9c52 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9c16:	4620      	mov	r0, r4
    9c18:	f7ff f85a 	bl	8cd0 <pended_on_thread>
    9c1c:	4621      	mov	r1, r4
    9c1e:	f7ff fa35 	bl	908c <z_priq_dumb_remove>
    9c22:	7b63      	ldrb	r3, [r4, #13]
    9c24:	f023 0302 	bic.w	r3, r3, #2
    9c28:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9c2a:	2600      	movs	r6, #0
    9c2c:	60a6      	str	r6, [r4, #8]
    9c2e:	f104 0018 	add.w	r0, r4, #24
    9c32:	f000 fc8d 	bl	a550 <z_abort_timeout>
    9c36:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    9c3a:	4620      	mov	r0, r4
    9c3c:	f7ff fba4 	bl	9388 <ready_thread>
    9c40:	e7e5      	b.n	9c0e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9c46:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9c48:	4601      	mov	r1, r0
    9c4a:	4805      	ldr	r0, [pc, #20]	; (9c60 <end_thread+0x98>)
    9c4c:	f7ff fa1e 	bl	908c <z_priq_dumb_remove>
}
    9c50:	e7c9      	b.n	9be6 <end_thread+0x1e>
		update_cache(1);
    9c52:	2001      	movs	r0, #1
    9c54:	f7ff fa3e 	bl	90d4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    9c58:	4628      	mov	r0, r5
    9c5a:	f7fe fb53 	bl	8304 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    9c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c60:	20001174 	.word	0x20001174

00009c64 <z_unpend1_no_timeout>:
{
    9c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c66:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9c68:	2500      	movs	r5, #0
    9c6a:	f04f 0320 	mov.w	r3, #32
    9c6e:	f3ef 8711 	mrs	r7, BASEPRI
    9c72:	f383 8812 	msr	BASEPRI_MAX, r3
    9c76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c7a:	4823      	ldr	r0, [pc, #140]	; (9d08 <z_unpend1_no_timeout+0xa4>)
    9c7c:	f7fe fb1a 	bl	82b4 <z_spin_lock_valid>
    9c80:	b120      	cbz	r0, 9c8c <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    9c82:	4821      	ldr	r0, [pc, #132]	; (9d08 <z_unpend1_no_timeout+0xa4>)
    9c84:	f7fe fb36 	bl	82f4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9c88:	2400      	movs	r4, #0
	return k;
    9c8a:	e018      	b.n	9cbe <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c8c:	4c1f      	ldr	r4, [pc, #124]	; (9d0c <z_unpend1_no_timeout+0xa8>)
    9c8e:	238e      	movs	r3, #142	; 0x8e
    9c90:	4622      	mov	r2, r4
    9c92:	491f      	ldr	r1, [pc, #124]	; (9d10 <z_unpend1_no_timeout+0xac>)
    9c94:	481f      	ldr	r0, [pc, #124]	; (9d14 <z_unpend1_no_timeout+0xb0>)
    9c96:	f001 fbb9 	bl	b40c <assert_print>
    9c9a:	491b      	ldr	r1, [pc, #108]	; (9d08 <z_unpend1_no_timeout+0xa4>)
    9c9c:	481e      	ldr	r0, [pc, #120]	; (9d18 <z_unpend1_no_timeout+0xb4>)
    9c9e:	f001 fbb5 	bl	b40c <assert_print>
    9ca2:	218e      	movs	r1, #142	; 0x8e
    9ca4:	4620      	mov	r0, r4
    9ca6:	f001 fbaa 	bl	b3fe <assert_post_action>
    9caa:	e7ea      	b.n	9c82 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cac:	4816      	ldr	r0, [pc, #88]	; (9d08 <z_unpend1_no_timeout+0xa4>)
    9cae:	f7fe fb11 	bl	82d4 <z_spin_unlock_valid>
    9cb2:	b1b8      	cbz	r0, 9ce4 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    9cb4:	f387 8811 	msr	BASEPRI, r7
    9cb8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9cbc:	2501      	movs	r5, #1
    9cbe:	bb0d      	cbnz	r5, 9d04 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    9cc0:	4630      	mov	r0, r6
    9cc2:	f002 faf9 	bl	c2b8 <z_priq_dumb_best>
		if (thread != NULL) {
    9cc6:	4604      	mov	r4, r0
    9cc8:	2800      	cmp	r0, #0
    9cca:	d0ef      	beq.n	9cac <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9ccc:	f7ff f800 	bl	8cd0 <pended_on_thread>
    9cd0:	4621      	mov	r1, r4
    9cd2:	f7ff f9db 	bl	908c <z_priq_dumb_remove>
    9cd6:	7b63      	ldrb	r3, [r4, #13]
    9cd8:	f023 0302 	bic.w	r3, r3, #2
    9cdc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9cde:	2300      	movs	r3, #0
    9ce0:	60a3      	str	r3, [r4, #8]
}
    9ce2:	e7e3      	b.n	9cac <z_unpend1_no_timeout+0x48>
    9ce4:	4d09      	ldr	r5, [pc, #36]	; (9d0c <z_unpend1_no_timeout+0xa8>)
    9ce6:	23b9      	movs	r3, #185	; 0xb9
    9ce8:	462a      	mov	r2, r5
    9cea:	490c      	ldr	r1, [pc, #48]	; (9d1c <z_unpend1_no_timeout+0xb8>)
    9cec:	4809      	ldr	r0, [pc, #36]	; (9d14 <z_unpend1_no_timeout+0xb0>)
    9cee:	f001 fb8d 	bl	b40c <assert_print>
    9cf2:	4905      	ldr	r1, [pc, #20]	; (9d08 <z_unpend1_no_timeout+0xa4>)
    9cf4:	480a      	ldr	r0, [pc, #40]	; (9d20 <z_unpend1_no_timeout+0xbc>)
    9cf6:	f001 fb89 	bl	b40c <assert_print>
    9cfa:	21b9      	movs	r1, #185	; 0xb9
    9cfc:	4628      	mov	r0, r5
    9cfe:	f001 fb7e 	bl	b3fe <assert_post_action>
    9d02:	e7d7      	b.n	9cb4 <z_unpend1_no_timeout+0x50>
}
    9d04:	4620      	mov	r0, r4
    9d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d08:	20001190 	.word	0x20001190
    9d0c:	0000cfb0 	.word	0x0000cfb0
    9d10:	0000d010 	.word	0x0000d010
    9d14:	0000c8bc 	.word	0x0000c8bc
    9d18:	0000d028 	.word	0x0000d028
    9d1c:	0000cfe0 	.word	0x0000cfe0
    9d20:	0000cff8 	.word	0x0000cff8

00009d24 <z_unpend_first_thread>:
{
    9d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d26:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9d28:	2500      	movs	r5, #0
	__asm__ volatile(
    9d2a:	f04f 0320 	mov.w	r3, #32
    9d2e:	f3ef 8711 	mrs	r7, BASEPRI
    9d32:	f383 8812 	msr	BASEPRI_MAX, r3
    9d36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d3a:	4825      	ldr	r0, [pc, #148]	; (9dd0 <z_unpend_first_thread+0xac>)
    9d3c:	f7fe faba 	bl	82b4 <z_spin_lock_valid>
    9d40:	b120      	cbz	r0, 9d4c <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    9d42:	4823      	ldr	r0, [pc, #140]	; (9dd0 <z_unpend_first_thread+0xac>)
    9d44:	f7fe fad6 	bl	82f4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9d48:	2400      	movs	r4, #0
	return k;
    9d4a:	e018      	b.n	9d7e <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d4c:	4c21      	ldr	r4, [pc, #132]	; (9dd4 <z_unpend_first_thread+0xb0>)
    9d4e:	238e      	movs	r3, #142	; 0x8e
    9d50:	4622      	mov	r2, r4
    9d52:	4921      	ldr	r1, [pc, #132]	; (9dd8 <z_unpend_first_thread+0xb4>)
    9d54:	4821      	ldr	r0, [pc, #132]	; (9ddc <z_unpend_first_thread+0xb8>)
    9d56:	f001 fb59 	bl	b40c <assert_print>
    9d5a:	491d      	ldr	r1, [pc, #116]	; (9dd0 <z_unpend_first_thread+0xac>)
    9d5c:	4820      	ldr	r0, [pc, #128]	; (9de0 <z_unpend_first_thread+0xbc>)
    9d5e:	f001 fb55 	bl	b40c <assert_print>
    9d62:	218e      	movs	r1, #142	; 0x8e
    9d64:	4620      	mov	r0, r4
    9d66:	f001 fb4a 	bl	b3fe <assert_post_action>
    9d6a:	e7ea      	b.n	9d42 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d6c:	4818      	ldr	r0, [pc, #96]	; (9dd0 <z_unpend_first_thread+0xac>)
    9d6e:	f7fe fab1 	bl	82d4 <z_spin_unlock_valid>
    9d72:	b1d8      	cbz	r0, 9dac <z_unpend_first_thread+0x88>
	__asm__ volatile(
    9d74:	f387 8811 	msr	BASEPRI, r7
    9d78:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9d7c:	2501      	movs	r5, #1
    9d7e:	bb2d      	cbnz	r5, 9dcc <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    9d80:	4630      	mov	r0, r6
    9d82:	f002 fa99 	bl	c2b8 <z_priq_dumb_best>
		if (thread != NULL) {
    9d86:	4604      	mov	r4, r0
    9d88:	2800      	cmp	r0, #0
    9d8a:	d0ef      	beq.n	9d6c <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9d8c:	f7fe ffa0 	bl	8cd0 <pended_on_thread>
    9d90:	4621      	mov	r1, r4
    9d92:	f7ff f97b 	bl	908c <z_priq_dumb_remove>
    9d96:	7b63      	ldrb	r3, [r4, #13]
    9d98:	f023 0302 	bic.w	r3, r3, #2
    9d9c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9d9e:	2300      	movs	r3, #0
    9da0:	60a3      	str	r3, [r4, #8]
    9da2:	f104 0018 	add.w	r0, r4, #24
    9da6:	f000 fbd3 	bl	a550 <z_abort_timeout>
    9daa:	e7df      	b.n	9d6c <z_unpend_first_thread+0x48>
    9dac:	4d09      	ldr	r5, [pc, #36]	; (9dd4 <z_unpend_first_thread+0xb0>)
    9dae:	23b9      	movs	r3, #185	; 0xb9
    9db0:	462a      	mov	r2, r5
    9db2:	490c      	ldr	r1, [pc, #48]	; (9de4 <z_unpend_first_thread+0xc0>)
    9db4:	4809      	ldr	r0, [pc, #36]	; (9ddc <z_unpend_first_thread+0xb8>)
    9db6:	f001 fb29 	bl	b40c <assert_print>
    9dba:	4905      	ldr	r1, [pc, #20]	; (9dd0 <z_unpend_first_thread+0xac>)
    9dbc:	480a      	ldr	r0, [pc, #40]	; (9de8 <z_unpend_first_thread+0xc4>)
    9dbe:	f001 fb25 	bl	b40c <assert_print>
    9dc2:	21b9      	movs	r1, #185	; 0xb9
    9dc4:	4628      	mov	r0, r5
    9dc6:	f001 fb1a 	bl	b3fe <assert_post_action>
    9dca:	e7d3      	b.n	9d74 <z_unpend_first_thread+0x50>
}
    9dcc:	4620      	mov	r0, r4
    9dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dd0:	20001190 	.word	0x20001190
    9dd4:	0000cfb0 	.word	0x0000cfb0
    9dd8:	0000d010 	.word	0x0000d010
    9ddc:	0000c8bc 	.word	0x0000c8bc
    9de0:	0000d028 	.word	0x0000d028
    9de4:	0000cfe0 	.word	0x0000cfe0
    9de8:	0000cff8 	.word	0x0000cff8

00009dec <z_sched_init>:
{
    9dec:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    9dee:	4804      	ldr	r0, [pc, #16]	; (9e00 <z_sched_init+0x14>)
    9df0:	f002 fa69 	bl	c2c6 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9df4:	2100      	movs	r1, #0
    9df6:	4608      	mov	r0, r1
    9df8:	f7fe ffa8 	bl	8d4c <k_sched_time_slice_set>
}
    9dfc:	bd08      	pop	{r3, pc}
    9dfe:	bf00      	nop
    9e00:	20001170 	.word	0x20001170

00009e04 <z_impl_k_yield>:
{
    9e04:	b570      	push	{r4, r5, r6, lr}
    9e06:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d149      	bne.n	9ea2 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    9e0e:	f04f 0320 	mov.w	r3, #32
    9e12:	f3ef 8611 	mrs	r6, BASEPRI
    9e16:	f383 8812 	msr	BASEPRI_MAX, r3
    9e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e1e:	4843      	ldr	r0, [pc, #268]	; (9f2c <z_impl_k_yield+0x128>)
    9e20:	f7fe fa48 	bl	82b4 <z_spin_lock_valid>
    9e24:	2800      	cmp	r0, #0
    9e26:	d04d      	beq.n	9ec4 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    9e28:	4840      	ldr	r0, [pc, #256]	; (9f2c <z_impl_k_yield+0x128>)
    9e2a:	f7fe fa63 	bl	82f4 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    9e2e:	4c40      	ldr	r4, [pc, #256]	; (9f30 <z_impl_k_yield+0x12c>)
    9e30:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9e32:	7b4b      	ldrb	r3, [r1, #13]
    9e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9e38:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9e3a:	f104 0020 	add.w	r0, r4, #32
    9e3e:	f7ff f925 	bl	908c <z_priq_dumb_remove>
	queue_thread(_current);
    9e42:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9e44:	7b6b      	ldrb	r3, [r5, #13]
    9e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9e4a:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9e4c:	4b39      	ldr	r3, [pc, #228]	; (9f34 <z_impl_k_yield+0x130>)
    9e4e:	429d      	cmp	r5, r3
    9e50:	d048      	beq.n	9ee4 <z_impl_k_yield+0xe0>
	return list->head == list;
    9e52:	4b37      	ldr	r3, [pc, #220]	; (9f30 <z_impl_k_yield+0x12c>)
    9e54:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9e58:	429c      	cmp	r4, r3
    9e5a:	d055      	beq.n	9f08 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e5c:	b16c      	cbz	r4, 9e7a <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9e5e:	4621      	mov	r1, r4
    9e60:	4628      	mov	r0, r5
    9e62:	f002 fa0a 	bl	c27a <z_sched_prio_cmp>
    9e66:	2800      	cmp	r0, #0
    9e68:	dc48      	bgt.n	9efc <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9e6a:	b134      	cbz	r4, 9e7a <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    9e6c:	4b30      	ldr	r3, [pc, #192]	; (9f30 <z_impl_k_yield+0x12c>)
    9e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e70:	429c      	cmp	r4, r3
    9e72:	d002      	beq.n	9e7a <z_impl_k_yield+0x76>
    9e74:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9e76:	2c00      	cmp	r4, #0
    9e78:	d1f0      	bne.n	9e5c <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    9e7a:	4b2d      	ldr	r3, [pc, #180]	; (9f30 <z_impl_k_yield+0x12c>)
    9e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9e7e:	f103 0120 	add.w	r1, r3, #32
    9e82:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9e84:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9e86:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9e88:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    9e8a:	2001      	movs	r0, #1
    9e8c:	f7ff f922 	bl	90d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e90:	4826      	ldr	r0, [pc, #152]	; (9f2c <z_impl_k_yield+0x128>)
    9e92:	f7fe fa1f 	bl	82d4 <z_spin_unlock_valid>
    9e96:	2800      	cmp	r0, #0
    9e98:	d038      	beq.n	9f0c <z_impl_k_yield+0x108>
    9e9a:	4630      	mov	r0, r6
    9e9c:	f7f9 fcd8 	bl	3850 <arch_swap>
}
    9ea0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9ea2:	4c25      	ldr	r4, [pc, #148]	; (9f38 <z_impl_k_yield+0x134>)
    9ea4:	f240 5332 	movw	r3, #1330	; 0x532
    9ea8:	4622      	mov	r2, r4
    9eaa:	4924      	ldr	r1, [pc, #144]	; (9f3c <z_impl_k_yield+0x138>)
    9eac:	4824      	ldr	r0, [pc, #144]	; (9f40 <z_impl_k_yield+0x13c>)
    9eae:	f001 faad 	bl	b40c <assert_print>
    9eb2:	4824      	ldr	r0, [pc, #144]	; (9f44 <z_impl_k_yield+0x140>)
    9eb4:	f001 faaa 	bl	b40c <assert_print>
    9eb8:	f240 5132 	movw	r1, #1330	; 0x532
    9ebc:	4620      	mov	r0, r4
    9ebe:	f001 fa9e 	bl	b3fe <assert_post_action>
    9ec2:	e7a4      	b.n	9e0e <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ec4:	4c20      	ldr	r4, [pc, #128]	; (9f48 <z_impl_k_yield+0x144>)
    9ec6:	238e      	movs	r3, #142	; 0x8e
    9ec8:	4622      	mov	r2, r4
    9eca:	4920      	ldr	r1, [pc, #128]	; (9f4c <z_impl_k_yield+0x148>)
    9ecc:	481c      	ldr	r0, [pc, #112]	; (9f40 <z_impl_k_yield+0x13c>)
    9ece:	f001 fa9d 	bl	b40c <assert_print>
    9ed2:	4916      	ldr	r1, [pc, #88]	; (9f2c <z_impl_k_yield+0x128>)
    9ed4:	481e      	ldr	r0, [pc, #120]	; (9f50 <z_impl_k_yield+0x14c>)
    9ed6:	f001 fa99 	bl	b40c <assert_print>
    9eda:	218e      	movs	r1, #142	; 0x8e
    9edc:	4620      	mov	r0, r4
    9ede:	f001 fa8e 	bl	b3fe <assert_post_action>
    9ee2:	e7a1      	b.n	9e28 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9ee4:	4c14      	ldr	r4, [pc, #80]	; (9f38 <z_impl_k_yield+0x134>)
    9ee6:	23ba      	movs	r3, #186	; 0xba
    9ee8:	4622      	mov	r2, r4
    9eea:	491a      	ldr	r1, [pc, #104]	; (9f54 <z_impl_k_yield+0x150>)
    9eec:	4814      	ldr	r0, [pc, #80]	; (9f40 <z_impl_k_yield+0x13c>)
    9eee:	f001 fa8d 	bl	b40c <assert_print>
    9ef2:	21ba      	movs	r1, #186	; 0xba
    9ef4:	4620      	mov	r0, r4
    9ef6:	f001 fa82 	bl	b3fe <assert_post_action>
    9efa:	e7aa      	b.n	9e52 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9efc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9efe:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9f00:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9f02:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9f04:	6065      	str	r5, [r4, #4]
}
    9f06:	e7c0      	b.n	9e8a <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f08:	2400      	movs	r4, #0
    9f0a:	e7a7      	b.n	9e5c <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f0c:	4c0e      	ldr	r4, [pc, #56]	; (9f48 <z_impl_k_yield+0x144>)
    9f0e:	23d0      	movs	r3, #208	; 0xd0
    9f10:	4622      	mov	r2, r4
    9f12:	4911      	ldr	r1, [pc, #68]	; (9f58 <z_impl_k_yield+0x154>)
    9f14:	480a      	ldr	r0, [pc, #40]	; (9f40 <z_impl_k_yield+0x13c>)
    9f16:	f001 fa79 	bl	b40c <assert_print>
    9f1a:	4904      	ldr	r1, [pc, #16]	; (9f2c <z_impl_k_yield+0x128>)
    9f1c:	480f      	ldr	r0, [pc, #60]	; (9f5c <z_impl_k_yield+0x158>)
    9f1e:	f001 fa75 	bl	b40c <assert_print>
    9f22:	21d0      	movs	r1, #208	; 0xd0
    9f24:	4620      	mov	r0, r4
    9f26:	f001 fa6a 	bl	b3fe <assert_post_action>
    9f2a:	e7b6      	b.n	9e9a <z_impl_k_yield+0x96>
    9f2c:	20001190 	.word	0x20001190
    9f30:	20001154 	.word	0x20001154
    9f34:	20000490 	.word	0x20000490
    9f38:	0000e888 	.word	0x0000e888
    9f3c:	0000e698 	.word	0x0000e698
    9f40:	0000c8bc 	.word	0x0000c8bc
    9f44:	0000e7e0 	.word	0x0000e7e0
    9f48:	0000cfb0 	.word	0x0000cfb0
    9f4c:	0000d010 	.word	0x0000d010
    9f50:	0000d028 	.word	0x0000d028
    9f54:	0000e8c4 	.word	0x0000e8c4
    9f58:	0000cfe0 	.word	0x0000cfe0
    9f5c:	0000cff8 	.word	0x0000cff8

00009f60 <z_tick_sleep>:
{
    9f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f64:	4604      	mov	r4, r0
    9f66:	460e      	mov	r6, r1
    9f68:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d14e      	bne.n	a00e <z_tick_sleep+0xae>
	if (ticks == 0) {
    9f70:	ea54 0306 	orrs.w	r3, r4, r6
    9f74:	d05c      	beq.n	a030 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    9f76:	f06f 0301 	mvn.w	r3, #1
    9f7a:	1b1b      	subs	r3, r3, r4
    9f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f80:	eb62 0206 	sbc.w	r2, r2, r6
    9f84:	2b01      	cmp	r3, #1
    9f86:	f172 0300 	sbcs.w	r3, r2, #0
    9f8a:	db55      	blt.n	a038 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9f8c:	f06f 0501 	mvn.w	r5, #1
    9f90:	1b2d      	subs	r5, r5, r4
    9f92:	f04f 0320 	mov.w	r3, #32
    9f96:	f3ef 8911 	mrs	r9, BASEPRI
    9f9a:	f383 8812 	msr	BASEPRI_MAX, r3
    9f9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fa2:	4840      	ldr	r0, [pc, #256]	; (a0a4 <z_tick_sleep+0x144>)
    9fa4:	f7fe f986 	bl	82b4 <z_spin_lock_valid>
    9fa8:	2800      	cmp	r0, #0
    9faa:	d049      	beq.n	a040 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    9fac:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a0a4 <z_tick_sleep+0x144>
    9fb0:	4640      	mov	r0, r8
    9fb2:	f7fe f99f 	bl	82f4 <z_spin_lock_set_owner>
	pending_current = _current;
    9fb6:	4f3c      	ldr	r7, [pc, #240]	; (a0a8 <z_tick_sleep+0x148>)
    9fb8:	68b8      	ldr	r0, [r7, #8]
    9fba:	4b3c      	ldr	r3, [pc, #240]	; (a0ac <z_tick_sleep+0x14c>)
    9fbc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9fbe:	f7ff fb5b 	bl	9678 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9fc2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9fc4:	4622      	mov	r2, r4
    9fc6:	4633      	mov	r3, r6
    9fc8:	4939      	ldr	r1, [pc, #228]	; (a0b0 <z_tick_sleep+0x150>)
    9fca:	3018      	adds	r0, #24
    9fcc:	f000 f9dc 	bl	a388 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9fd0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9fd2:	7b53      	ldrb	r3, [r2, #13]
    9fd4:	f043 0310 	orr.w	r3, r3, #16
    9fd8:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fda:	4640      	mov	r0, r8
    9fdc:	f7fe f97a 	bl	82d4 <z_spin_unlock_valid>
    9fe0:	2800      	cmp	r0, #0
    9fe2:	d03d      	beq.n	a060 <z_tick_sleep+0x100>
    9fe4:	4648      	mov	r0, r9
    9fe6:	f7f9 fc33 	bl	3850 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9fea:	4b2f      	ldr	r3, [pc, #188]	; (a0a8 <z_tick_sleep+0x148>)
    9fec:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    9fee:	7b5b      	ldrb	r3, [r3, #13]
    9ff0:	f013 0f10 	tst.w	r3, #16
    9ff4:	d144      	bne.n	a080 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9ff6:	f002 f981 	bl	c2fc <sys_clock_tick_get_32>
    9ffa:	1a28      	subs	r0, r5, r0
    9ffc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a000:	2801      	cmp	r0, #1
    a002:	f173 0300 	sbcs.w	r3, r3, #0
    a006:	da00      	bge.n	a00a <z_tick_sleep+0xaa>
	return 0;
    a008:	2000      	movs	r0, #0
}
    a00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    a00e:	4d29      	ldr	r5, [pc, #164]	; (a0b4 <z_tick_sleep+0x154>)
    a010:	f240 534e 	movw	r3, #1358	; 0x54e
    a014:	462a      	mov	r2, r5
    a016:	4928      	ldr	r1, [pc, #160]	; (a0b8 <z_tick_sleep+0x158>)
    a018:	4828      	ldr	r0, [pc, #160]	; (a0bc <z_tick_sleep+0x15c>)
    a01a:	f001 f9f7 	bl	b40c <assert_print>
    a01e:	4828      	ldr	r0, [pc, #160]	; (a0c0 <z_tick_sleep+0x160>)
    a020:	f001 f9f4 	bl	b40c <assert_print>
    a024:	f240 514e 	movw	r1, #1358	; 0x54e
    a028:	4628      	mov	r0, r5
    a02a:	f001 f9e8 	bl	b3fe <assert_post_action>
    a02e:	e79f      	b.n	9f70 <z_tick_sleep+0x10>
	z_impl_k_yield();
    a030:	f7ff fee8 	bl	9e04 <z_impl_k_yield>
		return 0;
    a034:	2000      	movs	r0, #0
    a036:	e7e8      	b.n	a00a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a038:	f002 f960 	bl	c2fc <sys_clock_tick_get_32>
    a03c:	1905      	adds	r5, r0, r4
    a03e:	e7a8      	b.n	9f92 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a040:	4f20      	ldr	r7, [pc, #128]	; (a0c4 <z_tick_sleep+0x164>)
    a042:	238e      	movs	r3, #142	; 0x8e
    a044:	463a      	mov	r2, r7
    a046:	4920      	ldr	r1, [pc, #128]	; (a0c8 <z_tick_sleep+0x168>)
    a048:	481c      	ldr	r0, [pc, #112]	; (a0bc <z_tick_sleep+0x15c>)
    a04a:	f001 f9df 	bl	b40c <assert_print>
    a04e:	4915      	ldr	r1, [pc, #84]	; (a0a4 <z_tick_sleep+0x144>)
    a050:	481e      	ldr	r0, [pc, #120]	; (a0cc <z_tick_sleep+0x16c>)
    a052:	f001 f9db 	bl	b40c <assert_print>
    a056:	218e      	movs	r1, #142	; 0x8e
    a058:	4638      	mov	r0, r7
    a05a:	f001 f9d0 	bl	b3fe <assert_post_action>
    a05e:	e7a5      	b.n	9fac <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a060:	4c18      	ldr	r4, [pc, #96]	; (a0c4 <z_tick_sleep+0x164>)
    a062:	23d0      	movs	r3, #208	; 0xd0
    a064:	4622      	mov	r2, r4
    a066:	491a      	ldr	r1, [pc, #104]	; (a0d0 <z_tick_sleep+0x170>)
    a068:	4814      	ldr	r0, [pc, #80]	; (a0bc <z_tick_sleep+0x15c>)
    a06a:	f001 f9cf 	bl	b40c <assert_print>
    a06e:	4641      	mov	r1, r8
    a070:	4818      	ldr	r0, [pc, #96]	; (a0d4 <z_tick_sleep+0x174>)
    a072:	f001 f9cb 	bl	b40c <assert_print>
    a076:	21d0      	movs	r1, #208	; 0xd0
    a078:	4620      	mov	r0, r4
    a07a:	f001 f9c0 	bl	b3fe <assert_post_action>
    a07e:	e7b1      	b.n	9fe4 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    a080:	4c0c      	ldr	r4, [pc, #48]	; (a0b4 <z_tick_sleep+0x154>)
    a082:	f240 536f 	movw	r3, #1391	; 0x56f
    a086:	4622      	mov	r2, r4
    a088:	4913      	ldr	r1, [pc, #76]	; (a0d8 <z_tick_sleep+0x178>)
    a08a:	480c      	ldr	r0, [pc, #48]	; (a0bc <z_tick_sleep+0x15c>)
    a08c:	f001 f9be 	bl	b40c <assert_print>
    a090:	480b      	ldr	r0, [pc, #44]	; (a0c0 <z_tick_sleep+0x160>)
    a092:	f001 f9bb 	bl	b40c <assert_print>
    a096:	f240 516f 	movw	r1, #1391	; 0x56f
    a09a:	4620      	mov	r0, r4
    a09c:	f001 f9af 	bl	b3fe <assert_post_action>
    a0a0:	e7a9      	b.n	9ff6 <z_tick_sleep+0x96>
    a0a2:	bf00      	nop
    a0a4:	20001190 	.word	0x20001190
    a0a8:	20001154 	.word	0x20001154
    a0ac:	2000118c 	.word	0x2000118c
    a0b0:	00009591 	.word	0x00009591
    a0b4:	0000e888 	.word	0x0000e888
    a0b8:	0000e698 	.word	0x0000e698
    a0bc:	0000c8bc 	.word	0x0000c8bc
    a0c0:	0000e7e0 	.word	0x0000e7e0
    a0c4:	0000cfb0 	.word	0x0000cfb0
    a0c8:	0000d010 	.word	0x0000d010
    a0cc:	0000d028 	.word	0x0000d028
    a0d0:	0000cfe0 	.word	0x0000cfe0
    a0d4:	0000cff8 	.word	0x0000cff8
    a0d8:	0000e944 	.word	0x0000e944

0000a0dc <z_impl_k_sleep>:
{
    a0dc:	b570      	push	{r4, r5, r6, lr}
    a0de:	4605      	mov	r5, r0
    a0e0:	460c      	mov	r4, r1
    a0e2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    a0e6:	bb13      	cbnz	r3, a12e <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a0e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a0ec:	bf08      	it	eq
    a0ee:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    a0f2:	d02d      	beq.n	a150 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    a0f4:	4628      	mov	r0, r5
    a0f6:	4621      	mov	r1, r4
    a0f8:	f7ff ff32 	bl	9f60 <z_tick_sleep>
    a0fc:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    a0fe:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    a100:	0151      	lsls	r1, r2, #5
    a102:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    a106:	0143      	lsls	r3, r0, #5
    a108:	1a1b      	subs	r3, r3, r0
    a10a:	eb61 0102 	sbc.w	r1, r1, r2
    a10e:	0088      	lsls	r0, r1, #2
    a110:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    a114:	009b      	lsls	r3, r3, #2
    a116:	eb13 030c 	adds.w	r3, r3, ip
    a11a:	eb42 0000 	adc.w	r0, r2, r0
    a11e:	00c0      	lsls	r0, r0, #3
    a120:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    a124:	f3c3 3310 	ubfx	r3, r3, #12, #17
    a128:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    a12c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    a12e:	4e0c      	ldr	r6, [pc, #48]	; (a160 <z_impl_k_sleep+0x84>)
    a130:	f240 537e 	movw	r3, #1406	; 0x57e
    a134:	4632      	mov	r2, r6
    a136:	490b      	ldr	r1, [pc, #44]	; (a164 <z_impl_k_sleep+0x88>)
    a138:	480b      	ldr	r0, [pc, #44]	; (a168 <z_impl_k_sleep+0x8c>)
    a13a:	f001 f967 	bl	b40c <assert_print>
    a13e:	480b      	ldr	r0, [pc, #44]	; (a16c <z_impl_k_sleep+0x90>)
    a140:	f001 f964 	bl	b40c <assert_print>
    a144:	f240 517e 	movw	r1, #1406	; 0x57e
    a148:	4630      	mov	r0, r6
    a14a:	f001 f958 	bl	b3fe <assert_post_action>
    a14e:	e7cb      	b.n	a0e8 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    a150:	4b07      	ldr	r3, [pc, #28]	; (a170 <z_impl_k_sleep+0x94>)
    a152:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a154:	f7ff fc28 	bl	99a8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    a158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a15c:	e7e6      	b.n	a12c <z_impl_k_sleep+0x50>
    a15e:	bf00      	nop
    a160:	0000e888 	.word	0x0000e888
    a164:	0000e698 	.word	0x0000e698
    a168:	0000c8bc 	.word	0x0000c8bc
    a16c:	0000e7e0 	.word	0x0000e7e0
    a170:	20001154 	.word	0x20001154

0000a174 <z_impl_z_current_get>:
}
    a174:	4b01      	ldr	r3, [pc, #4]	; (a17c <z_impl_z_current_get+0x8>)
    a176:	6898      	ldr	r0, [r3, #8]
    a178:	4770      	bx	lr
    a17a:	bf00      	nop
    a17c:	20001154 	.word	0x20001154

0000a180 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    a180:	b570      	push	{r4, r5, r6, lr}
    a182:	4604      	mov	r4, r0
    a184:	f04f 0320 	mov.w	r3, #32
    a188:	f3ef 8511 	mrs	r5, BASEPRI
    a18c:	f383 8812 	msr	BASEPRI_MAX, r3
    a190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a194:	4840      	ldr	r0, [pc, #256]	; (a298 <z_thread_abort+0x118>)
    a196:	f7fe f88d 	bl	82b4 <z_spin_lock_valid>
    a19a:	b1b8      	cbz	r0, a1cc <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    a19c:	483e      	ldr	r0, [pc, #248]	; (a298 <z_thread_abort+0x118>)
    a19e:	f7fe f8a9 	bl	82f4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a1a2:	7b63      	ldrb	r3, [r4, #13]
    a1a4:	f013 0f08 	tst.w	r3, #8
    a1a8:	d120      	bne.n	a1ec <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    a1aa:	4620      	mov	r0, r4
    a1ac:	f7ff fd0c 	bl	9bc8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    a1b0:	4b3a      	ldr	r3, [pc, #232]	; (a29c <z_thread_abort+0x11c>)
    a1b2:	689b      	ldr	r3, [r3, #8]
    a1b4:	42a3      	cmp	r3, r4
    a1b6:	d032      	beq.n	a21e <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1b8:	4837      	ldr	r0, [pc, #220]	; (a298 <z_thread_abort+0x118>)
    a1ba:	f7fe f88b 	bl	82d4 <z_spin_unlock_valid>
    a1be:	2800      	cmp	r0, #0
    a1c0:	d059      	beq.n	a276 <z_thread_abort+0xf6>
	__asm__ volatile(
    a1c2:	f385 8811 	msr	BASEPRI, r5
    a1c6:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a1ca:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1cc:	4e34      	ldr	r6, [pc, #208]	; (a2a0 <z_thread_abort+0x120>)
    a1ce:	238e      	movs	r3, #142	; 0x8e
    a1d0:	4632      	mov	r2, r6
    a1d2:	4934      	ldr	r1, [pc, #208]	; (a2a4 <z_thread_abort+0x124>)
    a1d4:	4834      	ldr	r0, [pc, #208]	; (a2a8 <z_thread_abort+0x128>)
    a1d6:	f001 f919 	bl	b40c <assert_print>
    a1da:	492f      	ldr	r1, [pc, #188]	; (a298 <z_thread_abort+0x118>)
    a1dc:	4833      	ldr	r0, [pc, #204]	; (a2ac <z_thread_abort+0x12c>)
    a1de:	f001 f915 	bl	b40c <assert_print>
    a1e2:	218e      	movs	r1, #142	; 0x8e
    a1e4:	4630      	mov	r0, r6
    a1e6:	f001 f90a 	bl	b3fe <assert_post_action>
    a1ea:	e7d7      	b.n	a19c <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1ec:	482a      	ldr	r0, [pc, #168]	; (a298 <z_thread_abort+0x118>)
    a1ee:	f7fe f871 	bl	82d4 <z_spin_unlock_valid>
    a1f2:	b120      	cbz	r0, a1fe <z_thread_abort+0x7e>
    a1f4:	f385 8811 	msr	BASEPRI, r5
    a1f8:	f3bf 8f6f 	isb	sy
		return;
    a1fc:	e7e5      	b.n	a1ca <z_thread_abort+0x4a>
    a1fe:	4c28      	ldr	r4, [pc, #160]	; (a2a0 <z_thread_abort+0x120>)
    a200:	23b9      	movs	r3, #185	; 0xb9
    a202:	4622      	mov	r2, r4
    a204:	492a      	ldr	r1, [pc, #168]	; (a2b0 <z_thread_abort+0x130>)
    a206:	4828      	ldr	r0, [pc, #160]	; (a2a8 <z_thread_abort+0x128>)
    a208:	f001 f900 	bl	b40c <assert_print>
    a20c:	4922      	ldr	r1, [pc, #136]	; (a298 <z_thread_abort+0x118>)
    a20e:	4829      	ldr	r0, [pc, #164]	; (a2b4 <z_thread_abort+0x134>)
    a210:	f001 f8fc 	bl	b40c <assert_print>
    a214:	21b9      	movs	r1, #185	; 0xb9
    a216:	4620      	mov	r0, r4
    a218:	f001 f8f1 	bl	b3fe <assert_post_action>
    a21c:	e7ea      	b.n	a1f4 <z_thread_abort+0x74>
    a21e:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    a222:	2b00      	cmp	r3, #0
    a224:	d1c8      	bne.n	a1b8 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a226:	481c      	ldr	r0, [pc, #112]	; (a298 <z_thread_abort+0x118>)
    a228:	f7fe f854 	bl	82d4 <z_spin_unlock_valid>
    a22c:	b198      	cbz	r0, a256 <z_thread_abort+0xd6>
    a22e:	4628      	mov	r0, r5
    a230:	f7f9 fb0e 	bl	3850 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    a234:	4c20      	ldr	r4, [pc, #128]	; (a2b8 <z_thread_abort+0x138>)
    a236:	f240 63ac 	movw	r3, #1708	; 0x6ac
    a23a:	4622      	mov	r2, r4
    a23c:	491f      	ldr	r1, [pc, #124]	; (a2bc <z_thread_abort+0x13c>)
    a23e:	481a      	ldr	r0, [pc, #104]	; (a2a8 <z_thread_abort+0x128>)
    a240:	f001 f8e4 	bl	b40c <assert_print>
    a244:	481e      	ldr	r0, [pc, #120]	; (a2c0 <z_thread_abort+0x140>)
    a246:	f001 f8e1 	bl	b40c <assert_print>
    a24a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    a24e:	4620      	mov	r0, r4
    a250:	f001 f8d5 	bl	b3fe <assert_post_action>
    a254:	e7b0      	b.n	a1b8 <z_thread_abort+0x38>
    a256:	4c12      	ldr	r4, [pc, #72]	; (a2a0 <z_thread_abort+0x120>)
    a258:	23d0      	movs	r3, #208	; 0xd0
    a25a:	4622      	mov	r2, r4
    a25c:	4914      	ldr	r1, [pc, #80]	; (a2b0 <z_thread_abort+0x130>)
    a25e:	4812      	ldr	r0, [pc, #72]	; (a2a8 <z_thread_abort+0x128>)
    a260:	f001 f8d4 	bl	b40c <assert_print>
    a264:	490c      	ldr	r1, [pc, #48]	; (a298 <z_thread_abort+0x118>)
    a266:	4813      	ldr	r0, [pc, #76]	; (a2b4 <z_thread_abort+0x134>)
    a268:	f001 f8d0 	bl	b40c <assert_print>
    a26c:	21d0      	movs	r1, #208	; 0xd0
    a26e:	4620      	mov	r0, r4
    a270:	f001 f8c5 	bl	b3fe <assert_post_action>
    a274:	e7db      	b.n	a22e <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a276:	4c0a      	ldr	r4, [pc, #40]	; (a2a0 <z_thread_abort+0x120>)
    a278:	23b9      	movs	r3, #185	; 0xb9
    a27a:	4622      	mov	r2, r4
    a27c:	490c      	ldr	r1, [pc, #48]	; (a2b0 <z_thread_abort+0x130>)
    a27e:	480a      	ldr	r0, [pc, #40]	; (a2a8 <z_thread_abort+0x128>)
    a280:	f001 f8c4 	bl	b40c <assert_print>
    a284:	4904      	ldr	r1, [pc, #16]	; (a298 <z_thread_abort+0x118>)
    a286:	480b      	ldr	r0, [pc, #44]	; (a2b4 <z_thread_abort+0x134>)
    a288:	f001 f8c0 	bl	b40c <assert_print>
    a28c:	21b9      	movs	r1, #185	; 0xb9
    a28e:	4620      	mov	r0, r4
    a290:	f001 f8b5 	bl	b3fe <assert_post_action>
    a294:	e795      	b.n	a1c2 <z_thread_abort+0x42>
    a296:	bf00      	nop
    a298:	20001190 	.word	0x20001190
    a29c:	20001154 	.word	0x20001154
    a2a0:	0000cfb0 	.word	0x0000cfb0
    a2a4:	0000d010 	.word	0x0000d010
    a2a8:	0000c8bc 	.word	0x0000c8bc
    a2ac:	0000d028 	.word	0x0000d028
    a2b0:	0000cfe0 	.word	0x0000cfe0
    a2b4:	0000cff8 	.word	0x0000cff8
    a2b8:	0000e888 	.word	0x0000e888
    a2bc:	0000ca80 	.word	0x0000ca80
    a2c0:	0000e984 	.word	0x0000e984

0000a2c4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a2c4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a2c6:	4806      	ldr	r0, [pc, #24]	; (a2e0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a2c8:	4a06      	ldr	r2, [pc, #24]	; (a2e4 <z_data_copy+0x20>)
    a2ca:	1a12      	subs	r2, r2, r0
    a2cc:	4906      	ldr	r1, [pc, #24]	; (a2e8 <z_data_copy+0x24>)
    a2ce:	f001 ff4d 	bl	c16c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a2d2:	4a06      	ldr	r2, [pc, #24]	; (a2ec <z_data_copy+0x28>)
    a2d4:	4906      	ldr	r1, [pc, #24]	; (a2f0 <z_data_copy+0x2c>)
    a2d6:	4807      	ldr	r0, [pc, #28]	; (a2f4 <z_data_copy+0x30>)
    a2d8:	f001 ff48 	bl	c16c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a2dc:	bd08      	pop	{r3, pc}
    a2de:	bf00      	nop
    a2e0:	20000000 	.word	0x20000000
    a2e4:	20000260 	.word	0x20000260
    a2e8:	0000eae8 	.word	0x0000eae8
    a2ec:	00000000 	.word	0x00000000
    a2f0:	0000eae8 	.word	0x0000eae8
    a2f4:	20000000 	.word	0x20000000

0000a2f8 <first>:
	return list->head == list;
    a2f8:	4b03      	ldr	r3, [pc, #12]	; (a308 <first+0x10>)
    a2fa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2fc:	4298      	cmp	r0, r3
    a2fe:	d000      	beq.n	a302 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    a300:	4770      	bx	lr
    a302:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    a304:	e7fc      	b.n	a300 <first+0x8>
    a306:	bf00      	nop
    a308:	20000174 	.word	0x20000174

0000a30c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a30c:	b130      	cbz	r0, a31c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    a30e:	4a04      	ldr	r2, [pc, #16]	; (a320 <next+0x14>)
    a310:	6852      	ldr	r2, [r2, #4]
    a312:	4290      	cmp	r0, r2
    a314:	d001      	beq.n	a31a <next+0xe>
    a316:	6800      	ldr	r0, [r0, #0]
    a318:	4770      	bx	lr
    a31a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    a31c:	4770      	bx	lr
    a31e:	bf00      	nop
    a320:	20000174 	.word	0x20000174

0000a324 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    a324:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a326:	4b04      	ldr	r3, [pc, #16]	; (a338 <elapsed+0x14>)
    a328:	681b      	ldr	r3, [r3, #0]
    a32a:	b10b      	cbz	r3, a330 <elapsed+0xc>
    a32c:	2000      	movs	r0, #0
}
    a32e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a330:	f7fb fc28 	bl	5b84 <sys_clock_elapsed>
    a334:	e7fb      	b.n	a32e <elapsed+0xa>
    a336:	bf00      	nop
    a338:	2000119c 	.word	0x2000119c

0000a33c <next_timeout>:

static int32_t next_timeout(void)
{
    a33c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    a33e:	f7ff ffdb 	bl	a2f8 <first>
    a342:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    a344:	f7ff ffee 	bl	a324 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    a348:	b17c      	cbz	r4, a36a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a34a:	6923      	ldr	r3, [r4, #16]
    a34c:	6962      	ldr	r2, [r4, #20]
    a34e:	1a1b      	subs	r3, r3, r0
    a350:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    a354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a358:	f170 0200 	sbcs.w	r2, r0, #0
    a35c:	da08      	bge.n	a370 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    a35e:	2800      	cmp	r0, #0
    a360:	db01      	blt.n	a366 <next_timeout+0x2a>
    a362:	4618      	mov	r0, r3
    a364:	e006      	b.n	a374 <next_timeout+0x38>
    a366:	2300      	movs	r3, #0
    a368:	e7fb      	b.n	a362 <next_timeout+0x26>
		ret = MAX_WAIT;
    a36a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    a36e:	e001      	b.n	a374 <next_timeout+0x38>
    a370:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    a374:	4b03      	ldr	r3, [pc, #12]	; (a384 <next_timeout+0x48>)
    a376:	691b      	ldr	r3, [r3, #16]
    a378:	b113      	cbz	r3, a380 <next_timeout+0x44>
    a37a:	4283      	cmp	r3, r0
    a37c:	da00      	bge.n	a380 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    a37e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    a380:	bd10      	pop	{r4, pc}
    a382:	bf00      	nop
    a384:	20001154 	.word	0x20001154

0000a388 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a38c:	bf08      	it	eq
    a38e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a392:	f000 80c1 	beq.w	a518 <z_add_timeout+0x190>
{
    a396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a39a:	4604      	mov	r4, r0
    a39c:	460f      	mov	r7, r1
    a39e:	4692      	mov	sl, r2
    a3a0:	461d      	mov	r5, r3
	return node->next != NULL;
    a3a2:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    a3a4:	b173      	cbz	r3, a3c4 <z_add_timeout+0x3c>
    a3a6:	f8df 8174 	ldr.w	r8, [pc, #372]	; a51c <z_add_timeout+0x194>
    a3aa:	2363      	movs	r3, #99	; 0x63
    a3ac:	4642      	mov	r2, r8
    a3ae:	495c      	ldr	r1, [pc, #368]	; (a520 <z_add_timeout+0x198>)
    a3b0:	485c      	ldr	r0, [pc, #368]	; (a524 <z_add_timeout+0x19c>)
    a3b2:	f001 f82b 	bl	b40c <assert_print>
    a3b6:	485c      	ldr	r0, [pc, #368]	; (a528 <z_add_timeout+0x1a0>)
    a3b8:	f001 f828 	bl	b40c <assert_print>
    a3bc:	2163      	movs	r1, #99	; 0x63
    a3be:	4640      	mov	r0, r8
    a3c0:	f001 f81d 	bl	b3fe <assert_post_action>
	to->fn = fn;
    a3c4:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    a3c6:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    a3ca:	f04f 0320 	mov.w	r3, #32
    a3ce:	f3ef 8711 	mrs	r7, BASEPRI
    a3d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a3d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3da:	4854      	ldr	r0, [pc, #336]	; (a52c <z_add_timeout+0x1a4>)
    a3dc:	f7fd ff6a 	bl	82b4 <z_spin_lock_valid>
    a3e0:	b118      	cbz	r0, a3ea <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    a3e2:	4852      	ldr	r0, [pc, #328]	; (a52c <z_add_timeout+0x1a4>)
    a3e4:	f7fd ff86 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    a3e8:	e038      	b.n	a45c <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a3ea:	f8df 9144 	ldr.w	r9, [pc, #324]	; a530 <z_add_timeout+0x1a8>
    a3ee:	238e      	movs	r3, #142	; 0x8e
    a3f0:	464a      	mov	r2, r9
    a3f2:	4950      	ldr	r1, [pc, #320]	; (a534 <z_add_timeout+0x1ac>)
    a3f4:	484b      	ldr	r0, [pc, #300]	; (a524 <z_add_timeout+0x19c>)
    a3f6:	f001 f809 	bl	b40c <assert_print>
    a3fa:	494c      	ldr	r1, [pc, #304]	; (a52c <z_add_timeout+0x1a4>)
    a3fc:	484e      	ldr	r0, [pc, #312]	; (a538 <z_add_timeout+0x1b0>)
    a3fe:	f001 f805 	bl	b40c <assert_print>
    a402:	218e      	movs	r1, #142	; 0x8e
    a404:	4648      	mov	r0, r9
    a406:	f000 fffa 	bl	b3fe <assert_post_action>
    a40a:	e7ea      	b.n	a3e2 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    a40c:	f11a 0801 	adds.w	r8, sl, #1
    a410:	f145 0900 	adc.w	r9, r5, #0
    a414:	f7ff ff86 	bl	a324 <elapsed>
    a418:	eb18 0300 	adds.w	r3, r8, r0
    a41c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    a420:	6123      	str	r3, [r4, #16]
    a422:	6160      	str	r0, [r4, #20]
    a424:	e03d      	b.n	a4a2 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    a426:	1a51      	subs	r1, r2, r1
    a428:	eb66 0303 	sbc.w	r3, r6, r3
    a42c:	6101      	str	r1, [r0, #16]
    a42e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    a430:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    a432:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a434:	6020      	str	r0, [r4, #0]
	prev->next = node;
    a436:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a438:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    a43a:	2800      	cmp	r0, #0
    a43c:	d045      	beq.n	a4ca <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a43e:	f7ff ff5b 	bl	a2f8 <first>
    a442:	4284      	cmp	r4, r0
    a444:	d048      	beq.n	a4d8 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a446:	4839      	ldr	r0, [pc, #228]	; (a52c <z_add_timeout+0x1a4>)
    a448:	f7fd ff44 	bl	82d4 <z_spin_unlock_valid>
    a44c:	2800      	cmp	r0, #0
    a44e:	d050      	beq.n	a4f2 <z_add_timeout+0x16a>
	__asm__ volatile(
    a450:	f387 8811 	msr	BASEPRI, r7
    a454:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a458:	f04f 0801 	mov.w	r8, #1
    a45c:	f1b8 0f00 	cmp.w	r8, #0
    a460:	d158      	bne.n	a514 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    a462:	4653      	mov	r3, sl
    a464:	f06f 0101 	mvn.w	r1, #1
    a468:	ebb1 010a 	subs.w	r1, r1, sl
    a46c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a470:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    a474:	2a00      	cmp	r2, #0
    a476:	dbc9      	blt.n	a40c <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    a478:	4a30      	ldr	r2, [pc, #192]	; (a53c <z_add_timeout+0x1b4>)
    a47a:	6811      	ldr	r1, [r2, #0]
    a47c:	6852      	ldr	r2, [r2, #4]
    a47e:	185b      	adds	r3, r3, r1
    a480:	eb42 0205 	adc.w	r2, r2, r5
    a484:	f06f 0101 	mvn.w	r1, #1
    a488:	1acb      	subs	r3, r1, r3
    a48a:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    a48e:	4618      	mov	r0, r3
    a490:	4611      	mov	r1, r2
    a492:	2b01      	cmp	r3, #1
    a494:	f172 0300 	sbcs.w	r3, r2, #0
    a498:	da01      	bge.n	a49e <z_add_timeout+0x116>
    a49a:	2001      	movs	r0, #1
    a49c:	2100      	movs	r1, #0
    a49e:	6120      	str	r0, [r4, #16]
    a4a0:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a4a2:	f7ff ff29 	bl	a2f8 <first>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d0c7      	beq.n	a43a <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    a4aa:	6902      	ldr	r2, [r0, #16]
    a4ac:	6946      	ldr	r6, [r0, #20]
    a4ae:	6921      	ldr	r1, [r4, #16]
    a4b0:	6963      	ldr	r3, [r4, #20]
    a4b2:	4291      	cmp	r1, r2
    a4b4:	eb73 0c06 	sbcs.w	ip, r3, r6
    a4b8:	dbb5      	blt.n	a426 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    a4ba:	1a89      	subs	r1, r1, r2
    a4bc:	eb63 0306 	sbc.w	r3, r3, r6
    a4c0:	6121      	str	r1, [r4, #16]
    a4c2:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    a4c4:	f7ff ff22 	bl	a30c <next>
    a4c8:	e7ed      	b.n	a4a6 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    a4ca:	4b1d      	ldr	r3, [pc, #116]	; (a540 <z_add_timeout+0x1b8>)
    a4cc:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    a4ce:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    a4d0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a4d2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a4d4:	605c      	str	r4, [r3, #4]
}
    a4d6:	e7b2      	b.n	a43e <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    a4d8:	f7ff ff30 	bl	a33c <next_timeout>

			if (next_time == 0 ||
    a4dc:	4603      	mov	r3, r0
    a4de:	b118      	cbz	r0, a4e8 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    a4e0:	4a18      	ldr	r2, [pc, #96]	; (a544 <z_add_timeout+0x1bc>)
    a4e2:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    a4e4:	4282      	cmp	r2, r0
    a4e6:	d0ae      	beq.n	a446 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    a4e8:	2100      	movs	r1, #0
    a4ea:	4618      	mov	r0, r3
    a4ec:	f7fb fb18 	bl	5b20 <sys_clock_set_timeout>
    a4f0:	e7a9      	b.n	a446 <z_add_timeout+0xbe>
    a4f2:	f8df 803c 	ldr.w	r8, [pc, #60]	; a530 <z_add_timeout+0x1a8>
    a4f6:	23b9      	movs	r3, #185	; 0xb9
    a4f8:	4642      	mov	r2, r8
    a4fa:	4913      	ldr	r1, [pc, #76]	; (a548 <z_add_timeout+0x1c0>)
    a4fc:	4809      	ldr	r0, [pc, #36]	; (a524 <z_add_timeout+0x19c>)
    a4fe:	f000 ff85 	bl	b40c <assert_print>
    a502:	490a      	ldr	r1, [pc, #40]	; (a52c <z_add_timeout+0x1a4>)
    a504:	4811      	ldr	r0, [pc, #68]	; (a54c <z_add_timeout+0x1c4>)
    a506:	f000 ff81 	bl	b40c <assert_print>
    a50a:	21b9      	movs	r1, #185	; 0xb9
    a50c:	4640      	mov	r0, r8
    a50e:	f000 ff76 	bl	b3fe <assert_post_action>
    a512:	e79d      	b.n	a450 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    a514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a518:	4770      	bx	lr
    a51a:	bf00      	nop
    a51c:	0000e9a8 	.word	0x0000e9a8
    a520:	0000e9cc 	.word	0x0000e9cc
    a524:	0000c8bc 	.word	0x0000c8bc
    a528:	0000e7e0 	.word	0x0000e7e0
    a52c:	200011a0 	.word	0x200011a0
    a530:	0000cfb0 	.word	0x0000cfb0
    a534:	0000d010 	.word	0x0000d010
    a538:	0000d028 	.word	0x0000d028
    a53c:	200005f0 	.word	0x200005f0
    a540:	20000174 	.word	0x20000174
    a544:	20001154 	.word	0x20001154
    a548:	0000cfe0 	.word	0x0000cfe0
    a54c:	0000cff8 	.word	0x0000cff8

0000a550 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a554:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    a556:	2400      	movs	r4, #0
	__asm__ volatile(
    a558:	f04f 0320 	mov.w	r3, #32
    a55c:	f3ef 8711 	mrs	r7, BASEPRI
    a560:	f383 8812 	msr	BASEPRI_MAX, r3
    a564:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a568:	481f      	ldr	r0, [pc, #124]	; (a5e8 <z_abort_timeout+0x98>)
    a56a:	f7fd fea3 	bl	82b4 <z_spin_lock_valid>
    a56e:	b128      	cbz	r0, a57c <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    a570:	481d      	ldr	r0, [pc, #116]	; (a5e8 <z_abort_timeout+0x98>)
    a572:	f7fd febf 	bl	82f4 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    a576:	f06f 0815 	mvn.w	r8, #21
	return k;
    a57a:	e018      	b.n	a5ae <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a57c:	4e1b      	ldr	r6, [pc, #108]	; (a5ec <z_abort_timeout+0x9c>)
    a57e:	238e      	movs	r3, #142	; 0x8e
    a580:	4632      	mov	r2, r6
    a582:	491b      	ldr	r1, [pc, #108]	; (a5f0 <z_abort_timeout+0xa0>)
    a584:	481b      	ldr	r0, [pc, #108]	; (a5f4 <z_abort_timeout+0xa4>)
    a586:	f000 ff41 	bl	b40c <assert_print>
    a58a:	4917      	ldr	r1, [pc, #92]	; (a5e8 <z_abort_timeout+0x98>)
    a58c:	481a      	ldr	r0, [pc, #104]	; (a5f8 <z_abort_timeout+0xa8>)
    a58e:	f000 ff3d 	bl	b40c <assert_print>
    a592:	218e      	movs	r1, #142	; 0x8e
    a594:	4630      	mov	r0, r6
    a596:	f000 ff32 	bl	b3fe <assert_post_action>
    a59a:	e7e9      	b.n	a570 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a59c:	4812      	ldr	r0, [pc, #72]	; (a5e8 <z_abort_timeout+0x98>)
    a59e:	f7fd fe99 	bl	82d4 <z_spin_unlock_valid>
    a5a2:	b170      	cbz	r0, a5c2 <z_abort_timeout+0x72>
	__asm__ volatile(
    a5a4:	f387 8811 	msr	BASEPRI, r7
    a5a8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a5ac:	2401      	movs	r4, #1
    a5ae:	4626      	mov	r6, r4
    a5b0:	b9bc      	cbnz	r4, a5e2 <z_abort_timeout+0x92>
	return node->next != NULL;
    a5b2:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d0f1      	beq.n	a59c <z_abort_timeout+0x4c>
			remove_timeout(to);
    a5b8:	4628      	mov	r0, r5
    a5ba:	f001 fe88 	bl	c2ce <remove_timeout>
			ret = 0;
    a5be:	46b0      	mov	r8, r6
    a5c0:	e7ec      	b.n	a59c <z_abort_timeout+0x4c>
    a5c2:	4c0a      	ldr	r4, [pc, #40]	; (a5ec <z_abort_timeout+0x9c>)
    a5c4:	23b9      	movs	r3, #185	; 0xb9
    a5c6:	4622      	mov	r2, r4
    a5c8:	490c      	ldr	r1, [pc, #48]	; (a5fc <z_abort_timeout+0xac>)
    a5ca:	480a      	ldr	r0, [pc, #40]	; (a5f4 <z_abort_timeout+0xa4>)
    a5cc:	f000 ff1e 	bl	b40c <assert_print>
    a5d0:	4905      	ldr	r1, [pc, #20]	; (a5e8 <z_abort_timeout+0x98>)
    a5d2:	480b      	ldr	r0, [pc, #44]	; (a600 <z_abort_timeout+0xb0>)
    a5d4:	f000 ff1a 	bl	b40c <assert_print>
    a5d8:	21b9      	movs	r1, #185	; 0xb9
    a5da:	4620      	mov	r0, r4
    a5dc:	f000 ff0f 	bl	b3fe <assert_post_action>
    a5e0:	e7e0      	b.n	a5a4 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    a5e2:	4640      	mov	r0, r8
    a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5e8:	200011a0 	.word	0x200011a0
    a5ec:	0000cfb0 	.word	0x0000cfb0
    a5f0:	0000d010 	.word	0x0000d010
    a5f4:	0000c8bc 	.word	0x0000c8bc
    a5f8:	0000d028 	.word	0x0000d028
    a5fc:	0000cfe0 	.word	0x0000cfe0
    a600:	0000cff8 	.word	0x0000cff8

0000a604 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    a604:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    a606:	2500      	movs	r5, #0
	__asm__ volatile(
    a608:	f04f 0320 	mov.w	r3, #32
    a60c:	f3ef 8611 	mrs	r6, BASEPRI
    a610:	f383 8812 	msr	BASEPRI_MAX, r3
    a614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a618:	481c      	ldr	r0, [pc, #112]	; (a68c <z_get_next_timeout_expiry+0x88>)
    a61a:	f7fd fe4b 	bl	82b4 <z_spin_lock_valid>
    a61e:	b128      	cbz	r0, a62c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    a620:	481a      	ldr	r0, [pc, #104]	; (a68c <z_get_next_timeout_expiry+0x88>)
    a622:	f7fd fe67 	bl	82f4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    a626:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    a62a:	e014      	b.n	a656 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a62c:	4c18      	ldr	r4, [pc, #96]	; (a690 <z_get_next_timeout_expiry+0x8c>)
    a62e:	238e      	movs	r3, #142	; 0x8e
    a630:	4622      	mov	r2, r4
    a632:	4918      	ldr	r1, [pc, #96]	; (a694 <z_get_next_timeout_expiry+0x90>)
    a634:	4818      	ldr	r0, [pc, #96]	; (a698 <z_get_next_timeout_expiry+0x94>)
    a636:	f000 fee9 	bl	b40c <assert_print>
    a63a:	4914      	ldr	r1, [pc, #80]	; (a68c <z_get_next_timeout_expiry+0x88>)
    a63c:	4817      	ldr	r0, [pc, #92]	; (a69c <z_get_next_timeout_expiry+0x98>)
    a63e:	f000 fee5 	bl	b40c <assert_print>
    a642:	218e      	movs	r1, #142	; 0x8e
    a644:	4620      	mov	r0, r4
    a646:	f000 feda 	bl	b3fe <assert_post_action>
    a64a:	e7e9      	b.n	a620 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    a64c:	f386 8811 	msr	BASEPRI, r6
    a650:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a654:	2501      	movs	r5, #1
    a656:	b9bd      	cbnz	r5, a688 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    a658:	f7ff fe70 	bl	a33c <next_timeout>
    a65c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a65e:	480b      	ldr	r0, [pc, #44]	; (a68c <z_get_next_timeout_expiry+0x88>)
    a660:	f7fd fe38 	bl	82d4 <z_spin_unlock_valid>
    a664:	2800      	cmp	r0, #0
    a666:	d1f1      	bne.n	a64c <z_get_next_timeout_expiry+0x48>
    a668:	4d09      	ldr	r5, [pc, #36]	; (a690 <z_get_next_timeout_expiry+0x8c>)
    a66a:	23b9      	movs	r3, #185	; 0xb9
    a66c:	462a      	mov	r2, r5
    a66e:	490c      	ldr	r1, [pc, #48]	; (a6a0 <z_get_next_timeout_expiry+0x9c>)
    a670:	4809      	ldr	r0, [pc, #36]	; (a698 <z_get_next_timeout_expiry+0x94>)
    a672:	f000 fecb 	bl	b40c <assert_print>
    a676:	4905      	ldr	r1, [pc, #20]	; (a68c <z_get_next_timeout_expiry+0x88>)
    a678:	480a      	ldr	r0, [pc, #40]	; (a6a4 <z_get_next_timeout_expiry+0xa0>)
    a67a:	f000 fec7 	bl	b40c <assert_print>
    a67e:	21b9      	movs	r1, #185	; 0xb9
    a680:	4628      	mov	r0, r5
    a682:	f000 febc 	bl	b3fe <assert_post_action>
    a686:	e7e1      	b.n	a64c <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    a688:	4620      	mov	r0, r4
    a68a:	bd70      	pop	{r4, r5, r6, pc}
    a68c:	200011a0 	.word	0x200011a0
    a690:	0000cfb0 	.word	0x0000cfb0
    a694:	0000d010 	.word	0x0000d010
    a698:	0000c8bc 	.word	0x0000c8bc
    a69c:	0000d028 	.word	0x0000d028
    a6a0:	0000cfe0 	.word	0x0000cfe0
    a6a4:	0000cff8 	.word	0x0000cff8

0000a6a8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6ac:	4606      	mov	r6, r0
    a6ae:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    a6b0:	2500      	movs	r5, #0
	__asm__ volatile(
    a6b2:	f04f 0320 	mov.w	r3, #32
    a6b6:	f3ef 8711 	mrs	r7, BASEPRI
    a6ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a6be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6c2:	4825      	ldr	r0, [pc, #148]	; (a758 <z_set_timeout_expiry+0xb0>)
    a6c4:	f7fd fdf6 	bl	82b4 <z_spin_lock_valid>
    a6c8:	b118      	cbz	r0, a6d2 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    a6ca:	4823      	ldr	r0, [pc, #140]	; (a758 <z_set_timeout_expiry+0xb0>)
    a6cc:	f7fd fe12 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    a6d0:	e01e      	b.n	a710 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6d2:	4c22      	ldr	r4, [pc, #136]	; (a75c <z_set_timeout_expiry+0xb4>)
    a6d4:	238e      	movs	r3, #142	; 0x8e
    a6d6:	4622      	mov	r2, r4
    a6d8:	4921      	ldr	r1, [pc, #132]	; (a760 <z_set_timeout_expiry+0xb8>)
    a6da:	4822      	ldr	r0, [pc, #136]	; (a764 <z_set_timeout_expiry+0xbc>)
    a6dc:	f000 fe96 	bl	b40c <assert_print>
    a6e0:	491d      	ldr	r1, [pc, #116]	; (a758 <z_set_timeout_expiry+0xb0>)
    a6e2:	4821      	ldr	r0, [pc, #132]	; (a768 <z_set_timeout_expiry+0xc0>)
    a6e4:	f000 fe92 	bl	b40c <assert_print>
    a6e8:	218e      	movs	r1, #142	; 0x8e
    a6ea:	4620      	mov	r0, r4
    a6ec:	f000 fe87 	bl	b3fe <assert_post_action>
    a6f0:	e7eb      	b.n	a6ca <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    a6f2:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    a6f4:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a6f8:	2801      	cmp	r0, #1
    a6fa:	dd00      	ble.n	a6fe <z_set_timeout_expiry+0x56>
    a6fc:	b99c      	cbnz	r4, a726 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a6fe:	4816      	ldr	r0, [pc, #88]	; (a758 <z_set_timeout_expiry+0xb0>)
    a700:	f7fd fde8 	bl	82d4 <z_spin_unlock_valid>
    a704:	b1b0      	cbz	r0, a734 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    a706:	f387 8811 	msr	BASEPRI, r7
    a70a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a70e:	2501      	movs	r5, #1
    a710:	462c      	mov	r4, r5
    a712:	b9fd      	cbnz	r5, a754 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    a714:	f7ff fe12 	bl	a33c <next_timeout>
			      || (ticks <= next_to);
    a718:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a71c:	d0e9      	beq.n	a6f2 <z_set_timeout_expiry+0x4a>
    a71e:	42b0      	cmp	r0, r6
    a720:	dbe8      	blt.n	a6f4 <z_set_timeout_expiry+0x4c>
    a722:	2401      	movs	r4, #1
    a724:	e7e6      	b.n	a6f4 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a726:	4641      	mov	r1, r8
    a728:	42b0      	cmp	r0, r6
    a72a:	bfa8      	it	ge
    a72c:	4630      	movge	r0, r6
    a72e:	f7fb f9f7 	bl	5b20 <sys_clock_set_timeout>
    a732:	e7e4      	b.n	a6fe <z_set_timeout_expiry+0x56>
    a734:	4c09      	ldr	r4, [pc, #36]	; (a75c <z_set_timeout_expiry+0xb4>)
    a736:	23b9      	movs	r3, #185	; 0xb9
    a738:	4622      	mov	r2, r4
    a73a:	490c      	ldr	r1, [pc, #48]	; (a76c <z_set_timeout_expiry+0xc4>)
    a73c:	4809      	ldr	r0, [pc, #36]	; (a764 <z_set_timeout_expiry+0xbc>)
    a73e:	f000 fe65 	bl	b40c <assert_print>
    a742:	4905      	ldr	r1, [pc, #20]	; (a758 <z_set_timeout_expiry+0xb0>)
    a744:	480a      	ldr	r0, [pc, #40]	; (a770 <z_set_timeout_expiry+0xc8>)
    a746:	f000 fe61 	bl	b40c <assert_print>
    a74a:	21b9      	movs	r1, #185	; 0xb9
    a74c:	4620      	mov	r0, r4
    a74e:	f000 fe56 	bl	b3fe <assert_post_action>
    a752:	e7d8      	b.n	a706 <z_set_timeout_expiry+0x5e>
		}
	}
}
    a754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a758:	200011a0 	.word	0x200011a0
    a75c:	0000cfb0 	.word	0x0000cfb0
    a760:	0000d010 	.word	0x0000d010
    a764:	0000c8bc 	.word	0x0000c8bc
    a768:	0000d028 	.word	0x0000d028
    a76c:	0000cfe0 	.word	0x0000cfe0
    a770:	0000cff8 	.word	0x0000cff8

0000a774 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    a774:	b570      	push	{r4, r5, r6, lr}
    a776:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    a778:	f7fe fd5e 	bl	9238 <z_time_slice>
	__asm__ volatile(
    a77c:	f04f 0320 	mov.w	r3, #32
    a780:	f3ef 8511 	mrs	r5, BASEPRI
    a784:	f383 8812 	msr	BASEPRI_MAX, r3
    a788:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a78c:	4854      	ldr	r0, [pc, #336]	; (a8e0 <sys_clock_announce+0x16c>)
    a78e:	f7fd fd91 	bl	82b4 <z_spin_lock_valid>
    a792:	b128      	cbz	r0, a7a0 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    a794:	4852      	ldr	r0, [pc, #328]	; (a8e0 <sys_clock_announce+0x16c>)
    a796:	f7fd fdad 	bl	82f4 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a79a:	4b52      	ldr	r3, [pc, #328]	; (a8e4 <sys_clock_announce+0x170>)
    a79c:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    a79e:	e022      	b.n	a7e6 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7a0:	4e51      	ldr	r6, [pc, #324]	; (a8e8 <sys_clock_announce+0x174>)
    a7a2:	238e      	movs	r3, #142	; 0x8e
    a7a4:	4632      	mov	r2, r6
    a7a6:	4951      	ldr	r1, [pc, #324]	; (a8ec <sys_clock_announce+0x178>)
    a7a8:	4851      	ldr	r0, [pc, #324]	; (a8f0 <sys_clock_announce+0x17c>)
    a7aa:	f000 fe2f 	bl	b40c <assert_print>
    a7ae:	494c      	ldr	r1, [pc, #304]	; (a8e0 <sys_clock_announce+0x16c>)
    a7b0:	4850      	ldr	r0, [pc, #320]	; (a8f4 <sys_clock_announce+0x180>)
    a7b2:	f000 fe2b 	bl	b40c <assert_print>
    a7b6:	218e      	movs	r1, #142	; 0x8e
    a7b8:	4630      	mov	r0, r6
    a7ba:	f000 fe20 	bl	b3fe <assert_post_action>
    a7be:	e7e9      	b.n	a794 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a7c0:	4e49      	ldr	r6, [pc, #292]	; (a8e8 <sys_clock_announce+0x174>)
    a7c2:	23b9      	movs	r3, #185	; 0xb9
    a7c4:	4632      	mov	r2, r6
    a7c6:	494c      	ldr	r1, [pc, #304]	; (a8f8 <sys_clock_announce+0x184>)
    a7c8:	4849      	ldr	r0, [pc, #292]	; (a8f0 <sys_clock_announce+0x17c>)
    a7ca:	f000 fe1f 	bl	b40c <assert_print>
    a7ce:	4944      	ldr	r1, [pc, #272]	; (a8e0 <sys_clock_announce+0x16c>)
    a7d0:	484a      	ldr	r0, [pc, #296]	; (a8fc <sys_clock_announce+0x188>)
    a7d2:	f000 fe1b 	bl	b40c <assert_print>
    a7d6:	21b9      	movs	r1, #185	; 0xb9
    a7d8:	4630      	mov	r0, r6
    a7da:	f000 fe10 	bl	b3fe <assert_post_action>
    a7de:	e027      	b.n	a830 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    a7e0:	483f      	ldr	r0, [pc, #252]	; (a8e0 <sys_clock_announce+0x16c>)
    a7e2:	f7fd fd87 	bl	82f4 <z_spin_lock_set_owner>
    a7e6:	f7ff fd87 	bl	a2f8 <first>
    a7ea:	4604      	mov	r4, r0
    a7ec:	2800      	cmp	r0, #0
    a7ee:	d043      	beq.n	a878 <sys_clock_announce+0x104>
    a7f0:	6902      	ldr	r2, [r0, #16]
    a7f2:	6941      	ldr	r1, [r0, #20]
    a7f4:	4b3b      	ldr	r3, [pc, #236]	; (a8e4 <sys_clock_announce+0x170>)
    a7f6:	681b      	ldr	r3, [r3, #0]
    a7f8:	17d8      	asrs	r0, r3, #31
    a7fa:	4293      	cmp	r3, r2
    a7fc:	eb70 0101 	sbcs.w	r1, r0, r1
    a800:	db3a      	blt.n	a878 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    a802:	483f      	ldr	r0, [pc, #252]	; (a900 <sys_clock_announce+0x18c>)
    a804:	6801      	ldr	r1, [r0, #0]
    a806:	6846      	ldr	r6, [r0, #4]
    a808:	1889      	adds	r1, r1, r2
    a80a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    a80e:	6001      	str	r1, [r0, #0]
    a810:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    a812:	1a9b      	subs	r3, r3, r2
    a814:	4a33      	ldr	r2, [pc, #204]	; (a8e4 <sys_clock_announce+0x170>)
    a816:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    a818:	2200      	movs	r2, #0
    a81a:	2300      	movs	r3, #0
    a81c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    a820:	4620      	mov	r0, r4
    a822:	f001 fd54 	bl	c2ce <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a826:	482e      	ldr	r0, [pc, #184]	; (a8e0 <sys_clock_announce+0x16c>)
    a828:	f7fd fd54 	bl	82d4 <z_spin_unlock_valid>
    a82c:	2800      	cmp	r0, #0
    a82e:	d0c7      	beq.n	a7c0 <sys_clock_announce+0x4c>
	__asm__ volatile(
    a830:	f385 8811 	msr	BASEPRI, r5
    a834:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    a838:	68a3      	ldr	r3, [r4, #8]
    a83a:	4620      	mov	r0, r4
    a83c:	4798      	blx	r3
	__asm__ volatile(
    a83e:	f04f 0320 	mov.w	r3, #32
    a842:	f3ef 8511 	mrs	r5, BASEPRI
    a846:	f383 8812 	msr	BASEPRI_MAX, r3
    a84a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a84e:	4824      	ldr	r0, [pc, #144]	; (a8e0 <sys_clock_announce+0x16c>)
    a850:	f7fd fd30 	bl	82b4 <z_spin_lock_valid>
    a854:	2800      	cmp	r0, #0
    a856:	d1c3      	bne.n	a7e0 <sys_clock_announce+0x6c>
    a858:	4c23      	ldr	r4, [pc, #140]	; (a8e8 <sys_clock_announce+0x174>)
    a85a:	238e      	movs	r3, #142	; 0x8e
    a85c:	4622      	mov	r2, r4
    a85e:	4923      	ldr	r1, [pc, #140]	; (a8ec <sys_clock_announce+0x178>)
    a860:	4823      	ldr	r0, [pc, #140]	; (a8f0 <sys_clock_announce+0x17c>)
    a862:	f000 fdd3 	bl	b40c <assert_print>
    a866:	491e      	ldr	r1, [pc, #120]	; (a8e0 <sys_clock_announce+0x16c>)
    a868:	4822      	ldr	r0, [pc, #136]	; (a8f4 <sys_clock_announce+0x180>)
    a86a:	f000 fdcf 	bl	b40c <assert_print>
    a86e:	218e      	movs	r1, #142	; 0x8e
    a870:	4620      	mov	r0, r4
    a872:	f000 fdc4 	bl	b3fe <assert_post_action>
    a876:	e7b3      	b.n	a7e0 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    a878:	b144      	cbz	r4, a88c <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    a87a:	4b1a      	ldr	r3, [pc, #104]	; (a8e4 <sys_clock_announce+0x170>)
    a87c:	6819      	ldr	r1, [r3, #0]
    a87e:	6923      	ldr	r3, [r4, #16]
    a880:	6962      	ldr	r2, [r4, #20]
    a882:	1a5b      	subs	r3, r3, r1
    a884:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    a888:	6123      	str	r3, [r4, #16]
    a88a:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    a88c:	4a1c      	ldr	r2, [pc, #112]	; (a900 <sys_clock_announce+0x18c>)
    a88e:	4e15      	ldr	r6, [pc, #84]	; (a8e4 <sys_clock_announce+0x170>)
    a890:	6830      	ldr	r0, [r6, #0]
    a892:	6813      	ldr	r3, [r2, #0]
    a894:	6851      	ldr	r1, [r2, #4]
    a896:	181b      	adds	r3, r3, r0
    a898:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    a89c:	6013      	str	r3, [r2, #0]
    a89e:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    a8a0:	2400      	movs	r4, #0
    a8a2:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    a8a4:	f7ff fd4a 	bl	a33c <next_timeout>
    a8a8:	4621      	mov	r1, r4
    a8aa:	f7fb f939 	bl	5b20 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8ae:	480c      	ldr	r0, [pc, #48]	; (a8e0 <sys_clock_announce+0x16c>)
    a8b0:	f7fd fd10 	bl	82d4 <z_spin_unlock_valid>
    a8b4:	b120      	cbz	r0, a8c0 <sys_clock_announce+0x14c>
	__asm__ volatile(
    a8b6:	f385 8811 	msr	BASEPRI, r5
    a8ba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    a8be:	bd70      	pop	{r4, r5, r6, pc}
    a8c0:	4c09      	ldr	r4, [pc, #36]	; (a8e8 <sys_clock_announce+0x174>)
    a8c2:	23b9      	movs	r3, #185	; 0xb9
    a8c4:	4622      	mov	r2, r4
    a8c6:	490c      	ldr	r1, [pc, #48]	; (a8f8 <sys_clock_announce+0x184>)
    a8c8:	4809      	ldr	r0, [pc, #36]	; (a8f0 <sys_clock_announce+0x17c>)
    a8ca:	f000 fd9f 	bl	b40c <assert_print>
    a8ce:	4904      	ldr	r1, [pc, #16]	; (a8e0 <sys_clock_announce+0x16c>)
    a8d0:	480a      	ldr	r0, [pc, #40]	; (a8fc <sys_clock_announce+0x188>)
    a8d2:	f000 fd9b 	bl	b40c <assert_print>
    a8d6:	21b9      	movs	r1, #185	; 0xb9
    a8d8:	4620      	mov	r0, r4
    a8da:	f000 fd90 	bl	b3fe <assert_post_action>
    a8de:	e7ea      	b.n	a8b6 <sys_clock_announce+0x142>
    a8e0:	200011a0 	.word	0x200011a0
    a8e4:	2000119c 	.word	0x2000119c
    a8e8:	0000cfb0 	.word	0x0000cfb0
    a8ec:	0000d010 	.word	0x0000d010
    a8f0:	0000c8bc 	.word	0x0000c8bc
    a8f4:	0000d028 	.word	0x0000d028
    a8f8:	0000cfe0 	.word	0x0000cfe0
    a8fc:	0000cff8 	.word	0x0000cff8
    a900:	200005f0 	.word	0x200005f0

0000a904 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    a906:	2600      	movs	r6, #0
	__asm__ volatile(
    a908:	f04f 0320 	mov.w	r3, #32
    a90c:	f3ef 8711 	mrs	r7, BASEPRI
    a910:	f383 8812 	msr	BASEPRI_MAX, r3
    a914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a918:	481f      	ldr	r0, [pc, #124]	; (a998 <sys_clock_tick_get+0x94>)
    a91a:	f7fd fccb 	bl	82b4 <z_spin_lock_valid>
    a91e:	b128      	cbz	r0, a92c <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    a920:	481d      	ldr	r0, [pc, #116]	; (a998 <sys_clock_tick_get+0x94>)
    a922:	f7fd fce7 	bl	82f4 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    a926:	2400      	movs	r4, #0
    a928:	4625      	mov	r5, r4
	return k;
    a92a:	e014      	b.n	a956 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a92c:	4c1b      	ldr	r4, [pc, #108]	; (a99c <sys_clock_tick_get+0x98>)
    a92e:	238e      	movs	r3, #142	; 0x8e
    a930:	4622      	mov	r2, r4
    a932:	491b      	ldr	r1, [pc, #108]	; (a9a0 <sys_clock_tick_get+0x9c>)
    a934:	481b      	ldr	r0, [pc, #108]	; (a9a4 <sys_clock_tick_get+0xa0>)
    a936:	f000 fd69 	bl	b40c <assert_print>
    a93a:	4917      	ldr	r1, [pc, #92]	; (a998 <sys_clock_tick_get+0x94>)
    a93c:	481a      	ldr	r0, [pc, #104]	; (a9a8 <sys_clock_tick_get+0xa4>)
    a93e:	f000 fd65 	bl	b40c <assert_print>
    a942:	218e      	movs	r1, #142	; 0x8e
    a944:	4620      	mov	r0, r4
    a946:	f000 fd5a 	bl	b3fe <assert_post_action>
    a94a:	e7e9      	b.n	a920 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    a94c:	f387 8811 	msr	BASEPRI, r7
    a950:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a954:	2601      	movs	r6, #1
    a956:	b9e6      	cbnz	r6, a992 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    a958:	f7fb f914 	bl	5b84 <sys_clock_elapsed>
    a95c:	4b13      	ldr	r3, [pc, #76]	; (a9ac <sys_clock_tick_get+0xa8>)
    a95e:	681c      	ldr	r4, [r3, #0]
    a960:	685d      	ldr	r5, [r3, #4]
    a962:	1904      	adds	r4, r0, r4
    a964:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a968:	480b      	ldr	r0, [pc, #44]	; (a998 <sys_clock_tick_get+0x94>)
    a96a:	f7fd fcb3 	bl	82d4 <z_spin_unlock_valid>
    a96e:	2800      	cmp	r0, #0
    a970:	d1ec      	bne.n	a94c <sys_clock_tick_get+0x48>
    a972:	4e0a      	ldr	r6, [pc, #40]	; (a99c <sys_clock_tick_get+0x98>)
    a974:	23b9      	movs	r3, #185	; 0xb9
    a976:	4632      	mov	r2, r6
    a978:	490d      	ldr	r1, [pc, #52]	; (a9b0 <sys_clock_tick_get+0xac>)
    a97a:	480a      	ldr	r0, [pc, #40]	; (a9a4 <sys_clock_tick_get+0xa0>)
    a97c:	f000 fd46 	bl	b40c <assert_print>
    a980:	4905      	ldr	r1, [pc, #20]	; (a998 <sys_clock_tick_get+0x94>)
    a982:	480c      	ldr	r0, [pc, #48]	; (a9b4 <sys_clock_tick_get+0xb0>)
    a984:	f000 fd42 	bl	b40c <assert_print>
    a988:	21b9      	movs	r1, #185	; 0xb9
    a98a:	4630      	mov	r0, r6
    a98c:	f000 fd37 	bl	b3fe <assert_post_action>
    a990:	e7dc      	b.n	a94c <sys_clock_tick_get+0x48>
	}
	return t;
}
    a992:	4620      	mov	r0, r4
    a994:	4629      	mov	r1, r5
    a996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a998:	200011a0 	.word	0x200011a0
    a99c:	0000cfb0 	.word	0x0000cfb0
    a9a0:	0000d010 	.word	0x0000d010
    a9a4:	0000c8bc 	.word	0x0000c8bc
    a9a8:	0000d028 	.word	0x0000d028
    a9ac:	200005f0 	.word	0x200005f0
    a9b0:	0000cfe0 	.word	0x0000cfe0
    a9b4:	0000cff8 	.word	0x0000cff8

0000a9b8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a9b8:	b570      	push	{r4, r5, r6, lr}
    a9ba:	4604      	mov	r4, r0
	__asm__ volatile(
    a9bc:	f04f 0320 	mov.w	r3, #32
    a9c0:	f3ef 8611 	mrs	r6, BASEPRI
    a9c4:	f383 8812 	msr	BASEPRI_MAX, r3
    a9c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9cc:	4857      	ldr	r0, [pc, #348]	; (ab2c <z_timer_expiration_handler+0x174>)
    a9ce:	f7fd fc71 	bl	82b4 <z_spin_lock_valid>
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d049      	beq.n	aa6a <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    a9d6:	4855      	ldr	r0, [pc, #340]	; (ab2c <z_timer_expiration_handler+0x174>)
    a9d8:	f7fd fc8c 	bl	82f4 <z_spin_lock_set_owner>
	return k;
    a9dc:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a9de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a9e2:	ea52 0103 	orrs.w	r1, r2, r3
    a9e6:	d005      	beq.n	a9f4 <z_timer_expiration_handler+0x3c>
    a9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a9ec:	bf08      	it	eq
    a9ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    a9f2:	d14a      	bne.n	aa8a <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    a9f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a9f6:	3301      	adds	r3, #1
    a9f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    a9fa:	6a23      	ldr	r3, [r4, #32]
    a9fc:	b1db      	cbz	r3, aa36 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9fe:	484b      	ldr	r0, [pc, #300]	; (ab2c <z_timer_expiration_handler+0x174>)
    aa00:	f7fd fc68 	bl	82d4 <z_spin_unlock_valid>
    aa04:	2800      	cmp	r0, #0
    aa06:	d047      	beq.n	aa98 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    aa08:	f386 8811 	msr	BASEPRI, r6
    aa0c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    aa10:	6a23      	ldr	r3, [r4, #32]
    aa12:	4620      	mov	r0, r4
    aa14:	4798      	blx	r3
	__asm__ volatile(
    aa16:	f04f 0320 	mov.w	r3, #32
    aa1a:	f3ef 8511 	mrs	r5, BASEPRI
    aa1e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa26:	4841      	ldr	r0, [pc, #260]	; (ab2c <z_timer_expiration_handler+0x174>)
    aa28:	f7fd fc44 	bl	82b4 <z_spin_lock_valid>
    aa2c:	2800      	cmp	r0, #0
    aa2e:	d043      	beq.n	aab8 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    aa30:	483e      	ldr	r0, [pc, #248]	; (ab2c <z_timer_expiration_handler+0x174>)
    aa32:	f7fd fc5f 	bl	82f4 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    aa36:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    aa3a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa3c:	42a3      	cmp	r3, r4
    aa3e:	d04b      	beq.n	aad8 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    aa40:	2c00      	cmp	r4, #0
    aa42:	d049      	beq.n	aad8 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    aa44:	4620      	mov	r0, r4
    aa46:	f7fe f9f7 	bl	8e38 <z_unpend_thread_no_timeout>
    aa4a:	2300      	movs	r3, #0
    aa4c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa50:	4836      	ldr	r0, [pc, #216]	; (ab2c <z_timer_expiration_handler+0x174>)
    aa52:	f7fd fc3f 	bl	82d4 <z_spin_unlock_valid>
    aa56:	2800      	cmp	r0, #0
    aa58:	d057      	beq.n	ab0a <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    aa5a:	f385 8811 	msr	BASEPRI, r5
    aa5e:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    aa62:	4620      	mov	r0, r4
    aa64:	f7fe fce6 	bl	9434 <z_ready_thread>
}
    aa68:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa6a:	4d31      	ldr	r5, [pc, #196]	; (ab30 <z_timer_expiration_handler+0x178>)
    aa6c:	238e      	movs	r3, #142	; 0x8e
    aa6e:	462a      	mov	r2, r5
    aa70:	4930      	ldr	r1, [pc, #192]	; (ab34 <z_timer_expiration_handler+0x17c>)
    aa72:	4831      	ldr	r0, [pc, #196]	; (ab38 <z_timer_expiration_handler+0x180>)
    aa74:	f000 fcca 	bl	b40c <assert_print>
    aa78:	492c      	ldr	r1, [pc, #176]	; (ab2c <z_timer_expiration_handler+0x174>)
    aa7a:	4830      	ldr	r0, [pc, #192]	; (ab3c <z_timer_expiration_handler+0x184>)
    aa7c:	f000 fcc6 	bl	b40c <assert_print>
    aa80:	218e      	movs	r1, #142	; 0x8e
    aa82:	4628      	mov	r0, r5
    aa84:	f000 fcbb 	bl	b3fe <assert_post_action>
    aa88:	e7a5      	b.n	a9d6 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    aa8a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    aa8e:	492c      	ldr	r1, [pc, #176]	; (ab40 <z_timer_expiration_handler+0x188>)
    aa90:	4620      	mov	r0, r4
    aa92:	f7ff fc79 	bl	a388 <z_add_timeout>
    aa96:	e7ad      	b.n	a9f4 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa98:	4d25      	ldr	r5, [pc, #148]	; (ab30 <z_timer_expiration_handler+0x178>)
    aa9a:	23b9      	movs	r3, #185	; 0xb9
    aa9c:	462a      	mov	r2, r5
    aa9e:	4929      	ldr	r1, [pc, #164]	; (ab44 <z_timer_expiration_handler+0x18c>)
    aaa0:	4825      	ldr	r0, [pc, #148]	; (ab38 <z_timer_expiration_handler+0x180>)
    aaa2:	f000 fcb3 	bl	b40c <assert_print>
    aaa6:	4921      	ldr	r1, [pc, #132]	; (ab2c <z_timer_expiration_handler+0x174>)
    aaa8:	4827      	ldr	r0, [pc, #156]	; (ab48 <z_timer_expiration_handler+0x190>)
    aaaa:	f000 fcaf 	bl	b40c <assert_print>
    aaae:	21b9      	movs	r1, #185	; 0xb9
    aab0:	4628      	mov	r0, r5
    aab2:	f000 fca4 	bl	b3fe <assert_post_action>
    aab6:	e7a7      	b.n	aa08 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aab8:	4e1d      	ldr	r6, [pc, #116]	; (ab30 <z_timer_expiration_handler+0x178>)
    aaba:	238e      	movs	r3, #142	; 0x8e
    aabc:	4632      	mov	r2, r6
    aabe:	491d      	ldr	r1, [pc, #116]	; (ab34 <z_timer_expiration_handler+0x17c>)
    aac0:	481d      	ldr	r0, [pc, #116]	; (ab38 <z_timer_expiration_handler+0x180>)
    aac2:	f000 fca3 	bl	b40c <assert_print>
    aac6:	4919      	ldr	r1, [pc, #100]	; (ab2c <z_timer_expiration_handler+0x174>)
    aac8:	481c      	ldr	r0, [pc, #112]	; (ab3c <z_timer_expiration_handler+0x184>)
    aaca:	f000 fc9f 	bl	b40c <assert_print>
    aace:	218e      	movs	r1, #142	; 0x8e
    aad0:	4630      	mov	r0, r6
    aad2:	f000 fc94 	bl	b3fe <assert_post_action>
    aad6:	e7ab      	b.n	aa30 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aad8:	4814      	ldr	r0, [pc, #80]	; (ab2c <z_timer_expiration_handler+0x174>)
    aada:	f7fd fbfb 	bl	82d4 <z_spin_unlock_valid>
    aade:	b120      	cbz	r0, aaea <z_timer_expiration_handler+0x132>
    aae0:	f385 8811 	msr	BASEPRI, r5
    aae4:	f3bf 8f6f 	isb	sy
		return;
    aae8:	e7be      	b.n	aa68 <z_timer_expiration_handler+0xb0>
    aaea:	4c11      	ldr	r4, [pc, #68]	; (ab30 <z_timer_expiration_handler+0x178>)
    aaec:	23b9      	movs	r3, #185	; 0xb9
    aaee:	4622      	mov	r2, r4
    aaf0:	4914      	ldr	r1, [pc, #80]	; (ab44 <z_timer_expiration_handler+0x18c>)
    aaf2:	4811      	ldr	r0, [pc, #68]	; (ab38 <z_timer_expiration_handler+0x180>)
    aaf4:	f000 fc8a 	bl	b40c <assert_print>
    aaf8:	490c      	ldr	r1, [pc, #48]	; (ab2c <z_timer_expiration_handler+0x174>)
    aafa:	4813      	ldr	r0, [pc, #76]	; (ab48 <z_timer_expiration_handler+0x190>)
    aafc:	f000 fc86 	bl	b40c <assert_print>
    ab00:	21b9      	movs	r1, #185	; 0xb9
    ab02:	4620      	mov	r0, r4
    ab04:	f000 fc7b 	bl	b3fe <assert_post_action>
    ab08:	e7ea      	b.n	aae0 <z_timer_expiration_handler+0x128>
    ab0a:	4e09      	ldr	r6, [pc, #36]	; (ab30 <z_timer_expiration_handler+0x178>)
    ab0c:	23b9      	movs	r3, #185	; 0xb9
    ab0e:	4632      	mov	r2, r6
    ab10:	490c      	ldr	r1, [pc, #48]	; (ab44 <z_timer_expiration_handler+0x18c>)
    ab12:	4809      	ldr	r0, [pc, #36]	; (ab38 <z_timer_expiration_handler+0x180>)
    ab14:	f000 fc7a 	bl	b40c <assert_print>
    ab18:	4904      	ldr	r1, [pc, #16]	; (ab2c <z_timer_expiration_handler+0x174>)
    ab1a:	480b      	ldr	r0, [pc, #44]	; (ab48 <z_timer_expiration_handler+0x190>)
    ab1c:	f000 fc76 	bl	b40c <assert_print>
    ab20:	21b9      	movs	r1, #185	; 0xb9
    ab22:	4630      	mov	r0, r6
    ab24:	f000 fc6b 	bl	b3fe <assert_post_action>
    ab28:	e797      	b.n	aa5a <z_timer_expiration_handler+0xa2>
    ab2a:	bf00      	nop
    ab2c:	200011a4 	.word	0x200011a4
    ab30:	0000cfb0 	.word	0x0000cfb0
    ab34:	0000d010 	.word	0x0000d010
    ab38:	0000c8bc 	.word	0x0000c8bc
    ab3c:	0000d028 	.word	0x0000d028
    ab40:	0000a9b9 	.word	0x0000a9b9
    ab44:	0000cfe0 	.word	0x0000cfe0
    ab48:	0000cff8 	.word	0x0000cff8

0000ab4c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab50:	9f06      	ldr	r7, [sp, #24]
    ab52:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    ab56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ab5a:	bf08      	it	eq
    ab5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ab60:	d02f      	beq.n	abc2 <z_impl_k_timer_start+0x76>
    ab62:	4605      	mov	r5, r0
    ab64:	4614      	mov	r4, r2
    ab66:	461e      	mov	r6, r3
    ab68:	4611      	mov	r1, r2
    ab6a:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    ab6c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    ab70:	bf08      	it	eq
    ab72:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    ab76:	d00d      	beq.n	ab94 <z_impl_k_timer_start+0x48>
    ab78:	ea57 0c08 	orrs.w	ip, r7, r8
    ab7c:	d00a      	beq.n	ab94 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    ab7e:	f06f 0c01 	mvn.w	ip, #1
    ab82:	ebbc 0c07 	subs.w	ip, ip, r7
    ab86:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    ab8a:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    ab8e:	f1bc 0f00 	cmp.w	ip, #0
    ab92:	db18      	blt.n	abc6 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    ab94:	f06f 0301 	mvn.w	r3, #1
    ab98:	1a5b      	subs	r3, r3, r1
    ab9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ab9e:	eb63 0300 	sbc.w	r3, r3, r0
    aba2:	2b00      	cmp	r3, #0
    aba4:	db1a      	blt.n	abdc <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    aba6:	4628      	mov	r0, r5
    aba8:	f7ff fcd2 	bl	a550 <z_abort_timeout>
	timer->period = period;
    abac:	62af      	str	r7, [r5, #40]	; 0x28
    abae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    abb2:	2300      	movs	r3, #0
    abb4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    abb6:	4622      	mov	r2, r4
    abb8:	4633      	mov	r3, r6
    abba:	490e      	ldr	r1, [pc, #56]	; (abf4 <z_impl_k_timer_start+0xa8>)
    abbc:	4628      	mov	r0, r5
    abbe:	f7ff fbe3 	bl	a388 <z_add_timeout>
		     duration);
}
    abc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    abc6:	2f02      	cmp	r7, #2
    abc8:	f178 0300 	sbcs.w	r3, r8, #0
    abcc:	da02      	bge.n	abd4 <z_impl_k_timer_start+0x88>
    abce:	2702      	movs	r7, #2
    abd0:	f04f 0800 	mov.w	r8, #0
    abd4:	3f01      	subs	r7, #1
    abd6:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    abda:	e7db      	b.n	ab94 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    abdc:	460c      	mov	r4, r1
    abde:	4606      	mov	r6, r0
    abe0:	2901      	cmp	r1, #1
    abe2:	f170 0300 	sbcs.w	r3, r0, #0
    abe6:	da01      	bge.n	abec <z_impl_k_timer_start+0xa0>
    abe8:	2401      	movs	r4, #1
    abea:	2600      	movs	r6, #0
    abec:	3c01      	subs	r4, #1
    abee:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    abf2:	e7d8      	b.n	aba6 <z_impl_k_timer_start+0x5a>
    abf4:	0000a9b9 	.word	0x0000a9b9

0000abf8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    abf8:	4b01      	ldr	r3, [pc, #4]	; (ac00 <k_thread_system_pool_assign+0x8>)
    abfa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    abfe:	4770      	bx	lr
    ac00:	200001f8 	.word	0x200001f8

0000ac04 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    ac04:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ac06:	4a03      	ldr	r2, [pc, #12]	; (ac14 <boot_banner+0x10>)
    ac08:	4903      	ldr	r1, [pc, #12]	; (ac18 <boot_banner+0x14>)
    ac0a:	4804      	ldr	r0, [pc, #16]	; (ac1c <boot_banner+0x18>)
    ac0c:	f000 fa79 	bl	b102 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    ac10:	bd08      	pop	{r3, pc}
    ac12:	bf00      	nop
    ac14:	0000dd10 	.word	0x0000dd10
    ac18:	0000e9ec 	.word	0x0000e9ec
    ac1c:	0000e9fc 	.word	0x0000e9fc

0000ac20 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    ac20:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ac22:	4c0f      	ldr	r4, [pc, #60]	; (ac60 <statics_init+0x40>)
    ac24:	e008      	b.n	ac38 <statics_init+0x18>
    ac26:	4b0f      	ldr	r3, [pc, #60]	; (ac64 <statics_init+0x44>)
    ac28:	429c      	cmp	r4, r3
    ac2a:	d217      	bcs.n	ac5c <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ac2c:	68a2      	ldr	r2, [r4, #8]
    ac2e:	6861      	ldr	r1, [r4, #4]
    ac30:	4620      	mov	r0, r4
    ac32:	f001 fb8c 	bl	c34e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ac36:	3418      	adds	r4, #24
    ac38:	4b0a      	ldr	r3, [pc, #40]	; (ac64 <statics_init+0x44>)
    ac3a:	429c      	cmp	r4, r3
    ac3c:	d9f3      	bls.n	ac26 <statics_init+0x6>
    ac3e:	4d0a      	ldr	r5, [pc, #40]	; (ac68 <statics_init+0x48>)
    ac40:	2318      	movs	r3, #24
    ac42:	462a      	mov	r2, r5
    ac44:	4909      	ldr	r1, [pc, #36]	; (ac6c <statics_init+0x4c>)
    ac46:	480a      	ldr	r0, [pc, #40]	; (ac70 <statics_init+0x50>)
    ac48:	f000 fbe0 	bl	b40c <assert_print>
    ac4c:	4809      	ldr	r0, [pc, #36]	; (ac74 <statics_init+0x54>)
    ac4e:	f000 fbdd 	bl	b40c <assert_print>
    ac52:	2118      	movs	r1, #24
    ac54:	4628      	mov	r0, r5
    ac56:	f000 fbd2 	bl	b3fe <assert_post_action>
    ac5a:	e7e4      	b.n	ac26 <statics_init+0x6>
		}
	}
	return 0;
}
    ac5c:	2000      	movs	r0, #0
    ac5e:	bd38      	pop	{r3, r4, r5, pc}
    ac60:	200001f8 	.word	0x200001f8
    ac64:	20000210 	.word	0x20000210
    ac68:	0000ea24 	.word	0x0000ea24
    ac6c:	0000ea48 	.word	0x0000ea48
    ac70:	0000c8bc 	.word	0x0000c8bc
    ac74:	0000e56c 	.word	0x0000e56c

0000ac78 <nrf_cc3xx_platform_init_no_rng>:
    ac78:	b510      	push	{r4, lr}
    ac7a:	4c0a      	ldr	r4, [pc, #40]	; (aca4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ac7c:	6823      	ldr	r3, [r4, #0]
    ac7e:	b11b      	cbz	r3, ac88 <nrf_cc3xx_platform_init_no_rng+0x10>
    ac80:	2301      	movs	r3, #1
    ac82:	6023      	str	r3, [r4, #0]
    ac84:	2000      	movs	r0, #0
    ac86:	bd10      	pop	{r4, pc}
    ac88:	f000 f8ce 	bl	ae28 <CC_LibInitNoRng>
    ac8c:	2800      	cmp	r0, #0
    ac8e:	d0f7      	beq.n	ac80 <nrf_cc3xx_platform_init_no_rng+0x8>
    ac90:	3801      	subs	r0, #1
    ac92:	2806      	cmp	r0, #6
    ac94:	d803      	bhi.n	ac9e <nrf_cc3xx_platform_init_no_rng+0x26>
    ac96:	4b04      	ldr	r3, [pc, #16]	; (aca8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    ac98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ac9c:	bd10      	pop	{r4, pc}
    ac9e:	4803      	ldr	r0, [pc, #12]	; (acac <nrf_cc3xx_platform_init_no_rng+0x34>)
    aca0:	bd10      	pop	{r4, pc}
    aca2:	bf00      	nop
    aca4:	200011a8 	.word	0x200011a8
    aca8:	0000ea60 	.word	0x0000ea60
    acac:	ffff8ffe 	.word	0xffff8ffe

0000acb0 <nrf_cc3xx_platform_abort>:
    acb0:	f3bf 8f4f 	dsb	sy
    acb4:	4905      	ldr	r1, [pc, #20]	; (accc <nrf_cc3xx_platform_abort+0x1c>)
    acb6:	4b06      	ldr	r3, [pc, #24]	; (acd0 <nrf_cc3xx_platform_abort+0x20>)
    acb8:	68ca      	ldr	r2, [r1, #12]
    acba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    acbe:	4313      	orrs	r3, r2
    acc0:	60cb      	str	r3, [r1, #12]
    acc2:	f3bf 8f4f 	dsb	sy
    acc6:	bf00      	nop
    acc8:	e7fd      	b.n	acc6 <nrf_cc3xx_platform_abort+0x16>
    acca:	bf00      	nop
    accc:	e000ed00 	.word	0xe000ed00
    acd0:	05fa0004 	.word	0x05fa0004

0000acd4 <CC_PalAbort>:
    acd4:	b410      	push	{r4}
    acd6:	4b09      	ldr	r3, [pc, #36]	; (acfc <CC_PalAbort+0x28>)
    acd8:	4909      	ldr	r1, [pc, #36]	; (ad00 <CC_PalAbort+0x2c>)
    acda:	4c0a      	ldr	r4, [pc, #40]	; (ad04 <CC_PalAbort+0x30>)
    acdc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    ace0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ace4:	6849      	ldr	r1, [r1, #4]
    ace6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    acea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    acee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    acf2:	2300      	movs	r3, #0
    acf4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    acf8:	bc10      	pop	{r4}
    acfa:	4708      	bx	r1
    acfc:	5002b000 	.word	0x5002b000
    ad00:	2000017c 	.word	0x2000017c
    ad04:	5002a000 	.word	0x5002a000

0000ad08 <nrf_cc3xx_platform_set_abort>:
    ad08:	e9d0 1200 	ldrd	r1, r2, [r0]
    ad0c:	4b01      	ldr	r3, [pc, #4]	; (ad14 <nrf_cc3xx_platform_set_abort+0xc>)
    ad0e:	e9c3 1200 	strd	r1, r2, [r3]
    ad12:	4770      	bx	lr
    ad14:	2000017c 	.word	0x2000017c

0000ad18 <mutex_free>:
    ad18:	b510      	push	{r4, lr}
    ad1a:	4604      	mov	r4, r0
    ad1c:	b130      	cbz	r0, ad2c <mutex_free+0x14>
    ad1e:	6863      	ldr	r3, [r4, #4]
    ad20:	06db      	lsls	r3, r3, #27
    ad22:	d502      	bpl.n	ad2a <mutex_free+0x12>
    ad24:	2300      	movs	r3, #0
    ad26:	6023      	str	r3, [r4, #0]
    ad28:	6063      	str	r3, [r4, #4]
    ad2a:	bd10      	pop	{r4, pc}
    ad2c:	4b02      	ldr	r3, [pc, #8]	; (ad38 <mutex_free+0x20>)
    ad2e:	4803      	ldr	r0, [pc, #12]	; (ad3c <mutex_free+0x24>)
    ad30:	685b      	ldr	r3, [r3, #4]
    ad32:	4798      	blx	r3
    ad34:	e7f3      	b.n	ad1e <mutex_free+0x6>
    ad36:	bf00      	nop
    ad38:	2000017c 	.word	0x2000017c
    ad3c:	0000ea7c 	.word	0x0000ea7c

0000ad40 <mutex_lock>:
    ad40:	b1b0      	cbz	r0, ad70 <mutex_lock+0x30>
    ad42:	6843      	ldr	r3, [r0, #4]
    ad44:	b193      	cbz	r3, ad6c <mutex_lock+0x2c>
    ad46:	06db      	lsls	r3, r3, #27
    ad48:	d50e      	bpl.n	ad68 <mutex_lock+0x28>
    ad4a:	2301      	movs	r3, #1
    ad4c:	e850 2f00 	ldrex	r2, [r0]
    ad50:	4619      	mov	r1, r3
    ad52:	e840 1c00 	strex	ip, r1, [r0]
    ad56:	f09c 0f00 	teq	ip, #0
    ad5a:	d1f7      	bne.n	ad4c <mutex_lock+0xc>
    ad5c:	2a01      	cmp	r2, #1
    ad5e:	d0f5      	beq.n	ad4c <mutex_lock+0xc>
    ad60:	f3bf 8f5f 	dmb	sy
    ad64:	2000      	movs	r0, #0
    ad66:	4770      	bx	lr
    ad68:	4803      	ldr	r0, [pc, #12]	; (ad78 <mutex_lock+0x38>)
    ad6a:	4770      	bx	lr
    ad6c:	4803      	ldr	r0, [pc, #12]	; (ad7c <mutex_lock+0x3c>)
    ad6e:	4770      	bx	lr
    ad70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ad74:	4770      	bx	lr
    ad76:	bf00      	nop
    ad78:	ffff8fe9 	.word	0xffff8fe9
    ad7c:	ffff8fea 	.word	0xffff8fea

0000ad80 <mutex_unlock>:
    ad80:	b168      	cbz	r0, ad9e <mutex_unlock+0x1e>
    ad82:	6843      	ldr	r3, [r0, #4]
    ad84:	b13b      	cbz	r3, ad96 <mutex_unlock+0x16>
    ad86:	06db      	lsls	r3, r3, #27
    ad88:	d507      	bpl.n	ad9a <mutex_unlock+0x1a>
    ad8a:	f3bf 8f5f 	dmb	sy
    ad8e:	2300      	movs	r3, #0
    ad90:	6003      	str	r3, [r0, #0]
    ad92:	4618      	mov	r0, r3
    ad94:	4770      	bx	lr
    ad96:	4803      	ldr	r0, [pc, #12]	; (ada4 <mutex_unlock+0x24>)
    ad98:	4770      	bx	lr
    ad9a:	4803      	ldr	r0, [pc, #12]	; (ada8 <mutex_unlock+0x28>)
    ad9c:	4770      	bx	lr
    ad9e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ada2:	4770      	bx	lr
    ada4:	ffff8fea 	.word	0xffff8fea
    ada8:	ffff8fe9 	.word	0xffff8fe9

0000adac <mutex_init>:
    adac:	b510      	push	{r4, lr}
    adae:	4604      	mov	r4, r0
    adb0:	b120      	cbz	r0, adbc <mutex_init+0x10>
    adb2:	2200      	movs	r2, #0
    adb4:	2311      	movs	r3, #17
    adb6:	6022      	str	r2, [r4, #0]
    adb8:	6063      	str	r3, [r4, #4]
    adba:	bd10      	pop	{r4, pc}
    adbc:	4801      	ldr	r0, [pc, #4]	; (adc4 <mutex_init+0x18>)
    adbe:	f7ff ff89 	bl	acd4 <CC_PalAbort>
    adc2:	e7f6      	b.n	adb2 <mutex_init+0x6>
    adc4:	0000eaa4 	.word	0x0000eaa4

0000adc8 <nrf_cc3xx_platform_set_mutexes>:
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	e9d0 2300 	ldrd	r2, r3, [r0]
    adce:	4c13      	ldr	r4, [pc, #76]	; (ae1c <nrf_cc3xx_platform_set_mutexes+0x54>)
    add0:	4d13      	ldr	r5, [pc, #76]	; (ae20 <nrf_cc3xx_platform_set_mutexes+0x58>)
    add2:	6063      	str	r3, [r4, #4]
    add4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    add8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    addc:	6022      	str	r2, [r4, #0]
    adde:	4b11      	ldr	r3, [pc, #68]	; (ae24 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    ade0:	6808      	ldr	r0, [r1, #0]
    ade2:	6018      	str	r0, [r3, #0]
    ade4:	6848      	ldr	r0, [r1, #4]
    ade6:	6058      	str	r0, [r3, #4]
    ade8:	6888      	ldr	r0, [r1, #8]
    adea:	6098      	str	r0, [r3, #8]
    adec:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    adf0:	60d8      	str	r0, [r3, #12]
    adf2:	6119      	str	r1, [r3, #16]
    adf4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    adf8:	06db      	lsls	r3, r3, #27
    adfa:	d50d      	bpl.n	ae18 <nrf_cc3xx_platform_set_mutexes+0x50>
    adfc:	2300      	movs	r3, #0
    adfe:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    ae02:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    ae06:	f505 708a 	add.w	r0, r5, #276	; 0x114
    ae0a:	4790      	blx	r2
    ae0c:	6823      	ldr	r3, [r4, #0]
    ae0e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    ae12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ae16:	4718      	bx	r3
    ae18:	bd70      	pop	{r4, r5, r6, pc}
    ae1a:	bf00      	nop
    ae1c:	2000018c 	.word	0x2000018c
    ae20:	200011c0 	.word	0x200011c0
    ae24:	2000019c 	.word	0x2000019c

0000ae28 <CC_LibInitNoRng>:
    ae28:	b538      	push	{r3, r4, r5, lr}
    ae2a:	f000 f82f 	bl	ae8c <CC_HalInit>
    ae2e:	b120      	cbz	r0, ae3a <CC_LibInitNoRng+0x12>
    ae30:	2403      	movs	r4, #3
    ae32:	f000 f863 	bl	aefc <CC_PalTerminate>
    ae36:	4620      	mov	r0, r4
    ae38:	bd38      	pop	{r3, r4, r5, pc}
    ae3a:	f000 f831 	bl	aea0 <CC_PalInit>
    ae3e:	b998      	cbnz	r0, ae68 <CC_LibInitNoRng+0x40>
    ae40:	f000 f8ac 	bl	af9c <CC_PalPowerSaveModeSelect>
    ae44:	b998      	cbnz	r0, ae6e <CC_LibInitNoRng+0x46>
    ae46:	4d0f      	ldr	r5, [pc, #60]	; (ae84 <CC_LibInitNoRng+0x5c>)
    ae48:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    ae4c:	0e1b      	lsrs	r3, r3, #24
    ae4e:	2bf0      	cmp	r3, #240	; 0xf0
    ae50:	d108      	bne.n	ae64 <CC_LibInitNoRng+0x3c>
    ae52:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    ae56:	4b0c      	ldr	r3, [pc, #48]	; (ae88 <CC_LibInitNoRng+0x60>)
    ae58:	429a      	cmp	r2, r3
    ae5a:	d00a      	beq.n	ae72 <CC_LibInitNoRng+0x4a>
    ae5c:	2407      	movs	r4, #7
    ae5e:	f000 f817 	bl	ae90 <CC_HalTerminate>
    ae62:	e7e6      	b.n	ae32 <CC_LibInitNoRng+0xa>
    ae64:	2406      	movs	r4, #6
    ae66:	e7fa      	b.n	ae5e <CC_LibInitNoRng+0x36>
    ae68:	2404      	movs	r4, #4
    ae6a:	4620      	mov	r0, r4
    ae6c:	bd38      	pop	{r3, r4, r5, pc}
    ae6e:	2400      	movs	r4, #0
    ae70:	e7f5      	b.n	ae5e <CC_LibInitNoRng+0x36>
    ae72:	2001      	movs	r0, #1
    ae74:	f000 f892 	bl	af9c <CC_PalPowerSaveModeSelect>
    ae78:	4604      	mov	r4, r0
    ae7a:	2800      	cmp	r0, #0
    ae7c:	d1f7      	bne.n	ae6e <CC_LibInitNoRng+0x46>
    ae7e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    ae82:	e7d8      	b.n	ae36 <CC_LibInitNoRng+0xe>
    ae84:	5002b000 	.word	0x5002b000
    ae88:	20e00000 	.word	0x20e00000

0000ae8c <CC_HalInit>:
    ae8c:	2000      	movs	r0, #0
    ae8e:	4770      	bx	lr

0000ae90 <CC_HalTerminate>:
    ae90:	2000      	movs	r0, #0
    ae92:	4770      	bx	lr

0000ae94 <CC_HalMaskInterrupt>:
    ae94:	4b01      	ldr	r3, [pc, #4]	; (ae9c <CC_HalMaskInterrupt+0x8>)
    ae96:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    ae9a:	4770      	bx	lr
    ae9c:	5002b000 	.word	0x5002b000

0000aea0 <CC_PalInit>:
    aea0:	b510      	push	{r4, lr}
    aea2:	4811      	ldr	r0, [pc, #68]	; (aee8 <CC_PalInit+0x48>)
    aea4:	f000 f848 	bl	af38 <CC_PalMutexCreate>
    aea8:	b100      	cbz	r0, aeac <CC_PalInit+0xc>
    aeaa:	bd10      	pop	{r4, pc}
    aeac:	480f      	ldr	r0, [pc, #60]	; (aeec <CC_PalInit+0x4c>)
    aeae:	f000 f843 	bl	af38 <CC_PalMutexCreate>
    aeb2:	2800      	cmp	r0, #0
    aeb4:	d1f9      	bne.n	aeaa <CC_PalInit+0xa>
    aeb6:	4c0e      	ldr	r4, [pc, #56]	; (aef0 <CC_PalInit+0x50>)
    aeb8:	4620      	mov	r0, r4
    aeba:	f000 f83d 	bl	af38 <CC_PalMutexCreate>
    aebe:	2800      	cmp	r0, #0
    aec0:	d1f3      	bne.n	aeaa <CC_PalInit+0xa>
    aec2:	4b0c      	ldr	r3, [pc, #48]	; (aef4 <CC_PalInit+0x54>)
    aec4:	480c      	ldr	r0, [pc, #48]	; (aef8 <CC_PalInit+0x58>)
    aec6:	601c      	str	r4, [r3, #0]
    aec8:	f000 f836 	bl	af38 <CC_PalMutexCreate>
    aecc:	4601      	mov	r1, r0
    aece:	2800      	cmp	r0, #0
    aed0:	d1eb      	bne.n	aeaa <CC_PalInit+0xa>
    aed2:	f000 f82d 	bl	af30 <CC_PalDmaInit>
    aed6:	4604      	mov	r4, r0
    aed8:	b108      	cbz	r0, aede <CC_PalInit+0x3e>
    aeda:	4620      	mov	r0, r4
    aedc:	bd10      	pop	{r4, pc}
    aede:	f000 f83f 	bl	af60 <CC_PalPowerSaveModeInit>
    aee2:	4620      	mov	r0, r4
    aee4:	e7fa      	b.n	aedc <CC_PalInit+0x3c>
    aee6:	bf00      	nop
    aee8:	200001d4 	.word	0x200001d4
    aeec:	200001c8 	.word	0x200001c8
    aef0:	200001d0 	.word	0x200001d0
    aef4:	200001d8 	.word	0x200001d8
    aef8:	200001cc 	.word	0x200001cc

0000aefc <CC_PalTerminate>:
    aefc:	b508      	push	{r3, lr}
    aefe:	4808      	ldr	r0, [pc, #32]	; (af20 <CC_PalTerminate+0x24>)
    af00:	f000 f824 	bl	af4c <CC_PalMutexDestroy>
    af04:	4807      	ldr	r0, [pc, #28]	; (af24 <CC_PalTerminate+0x28>)
    af06:	f000 f821 	bl	af4c <CC_PalMutexDestroy>
    af0a:	4807      	ldr	r0, [pc, #28]	; (af28 <CC_PalTerminate+0x2c>)
    af0c:	f000 f81e 	bl	af4c <CC_PalMutexDestroy>
    af10:	4806      	ldr	r0, [pc, #24]	; (af2c <CC_PalTerminate+0x30>)
    af12:	f000 f81b 	bl	af4c <CC_PalMutexDestroy>
    af16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af1a:	f000 b80b 	b.w	af34 <CC_PalDmaTerminate>
    af1e:	bf00      	nop
    af20:	200001d4 	.word	0x200001d4
    af24:	200001c8 	.word	0x200001c8
    af28:	200001d0 	.word	0x200001d0
    af2c:	200001cc 	.word	0x200001cc

0000af30 <CC_PalDmaInit>:
    af30:	2000      	movs	r0, #0
    af32:	4770      	bx	lr

0000af34 <CC_PalDmaTerminate>:
    af34:	4770      	bx	lr
    af36:	bf00      	nop

0000af38 <CC_PalMutexCreate>:
    af38:	b508      	push	{r3, lr}
    af3a:	4b03      	ldr	r3, [pc, #12]	; (af48 <CC_PalMutexCreate+0x10>)
    af3c:	6802      	ldr	r2, [r0, #0]
    af3e:	681b      	ldr	r3, [r3, #0]
    af40:	6810      	ldr	r0, [r2, #0]
    af42:	4798      	blx	r3
    af44:	2000      	movs	r0, #0
    af46:	bd08      	pop	{r3, pc}
    af48:	2000018c 	.word	0x2000018c

0000af4c <CC_PalMutexDestroy>:
    af4c:	b508      	push	{r3, lr}
    af4e:	4b03      	ldr	r3, [pc, #12]	; (af5c <CC_PalMutexDestroy+0x10>)
    af50:	6802      	ldr	r2, [r0, #0]
    af52:	685b      	ldr	r3, [r3, #4]
    af54:	6810      	ldr	r0, [r2, #0]
    af56:	4798      	blx	r3
    af58:	2000      	movs	r0, #0
    af5a:	bd08      	pop	{r3, pc}
    af5c:	2000018c 	.word	0x2000018c

0000af60 <CC_PalPowerSaveModeInit>:
    af60:	b570      	push	{r4, r5, r6, lr}
    af62:	4c09      	ldr	r4, [pc, #36]	; (af88 <CC_PalPowerSaveModeInit+0x28>)
    af64:	4d09      	ldr	r5, [pc, #36]	; (af8c <CC_PalPowerSaveModeInit+0x2c>)
    af66:	6920      	ldr	r0, [r4, #16]
    af68:	68ab      	ldr	r3, [r5, #8]
    af6a:	4798      	blx	r3
    af6c:	b118      	cbz	r0, af76 <CC_PalPowerSaveModeInit+0x16>
    af6e:	4b08      	ldr	r3, [pc, #32]	; (af90 <CC_PalPowerSaveModeInit+0x30>)
    af70:	4808      	ldr	r0, [pc, #32]	; (af94 <CC_PalPowerSaveModeInit+0x34>)
    af72:	685b      	ldr	r3, [r3, #4]
    af74:	4798      	blx	r3
    af76:	4a08      	ldr	r2, [pc, #32]	; (af98 <CC_PalPowerSaveModeInit+0x38>)
    af78:	68eb      	ldr	r3, [r5, #12]
    af7a:	6920      	ldr	r0, [r4, #16]
    af7c:	2100      	movs	r1, #0
    af7e:	6011      	str	r1, [r2, #0]
    af80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af84:	4718      	bx	r3
    af86:	bf00      	nop
    af88:	2000019c 	.word	0x2000019c
    af8c:	2000018c 	.word	0x2000018c
    af90:	2000017c 	.word	0x2000017c
    af94:	0000eac8 	.word	0x0000eac8
    af98:	200011bc 	.word	0x200011bc

0000af9c <CC_PalPowerSaveModeSelect>:
    af9c:	b570      	push	{r4, r5, r6, lr}
    af9e:	4d1b      	ldr	r5, [pc, #108]	; (b00c <CC_PalPowerSaveModeSelect+0x70>)
    afa0:	4e1b      	ldr	r6, [pc, #108]	; (b010 <CC_PalPowerSaveModeSelect+0x74>)
    afa2:	4604      	mov	r4, r0
    afa4:	68b2      	ldr	r2, [r6, #8]
    afa6:	6928      	ldr	r0, [r5, #16]
    afa8:	4790      	blx	r2
    afaa:	b9f8      	cbnz	r0, afec <CC_PalPowerSaveModeSelect+0x50>
    afac:	b15c      	cbz	r4, afc6 <CC_PalPowerSaveModeSelect+0x2a>
    afae:	4c19      	ldr	r4, [pc, #100]	; (b014 <CC_PalPowerSaveModeSelect+0x78>)
    afb0:	6823      	ldr	r3, [r4, #0]
    afb2:	b1b3      	cbz	r3, afe2 <CC_PalPowerSaveModeSelect+0x46>
    afb4:	2b01      	cmp	r3, #1
    afb6:	d01b      	beq.n	aff0 <CC_PalPowerSaveModeSelect+0x54>
    afb8:	3b01      	subs	r3, #1
    afba:	6023      	str	r3, [r4, #0]
    afbc:	6928      	ldr	r0, [r5, #16]
    afbe:	68f3      	ldr	r3, [r6, #12]
    afc0:	4798      	blx	r3
    afc2:	2000      	movs	r0, #0
    afc4:	bd70      	pop	{r4, r5, r6, pc}
    afc6:	4c13      	ldr	r4, [pc, #76]	; (b014 <CC_PalPowerSaveModeSelect+0x78>)
    afc8:	6821      	ldr	r1, [r4, #0]
    afca:	b941      	cbnz	r1, afde <CC_PalPowerSaveModeSelect+0x42>
    afcc:	4b12      	ldr	r3, [pc, #72]	; (b018 <CC_PalPowerSaveModeSelect+0x7c>)
    afce:	2201      	movs	r2, #1
    afd0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    afd4:	4a11      	ldr	r2, [pc, #68]	; (b01c <CC_PalPowerSaveModeSelect+0x80>)
    afd6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    afda:	2b00      	cmp	r3, #0
    afdc:	d1fb      	bne.n	afd6 <CC_PalPowerSaveModeSelect+0x3a>
    afde:	3101      	adds	r1, #1
    afe0:	6021      	str	r1, [r4, #0]
    afe2:	68f3      	ldr	r3, [r6, #12]
    afe4:	6928      	ldr	r0, [r5, #16]
    afe6:	4798      	blx	r3
    afe8:	2000      	movs	r0, #0
    afea:	bd70      	pop	{r4, r5, r6, pc}
    afec:	480c      	ldr	r0, [pc, #48]	; (b020 <CC_PalPowerSaveModeSelect+0x84>)
    afee:	bd70      	pop	{r4, r5, r6, pc}
    aff0:	4a0a      	ldr	r2, [pc, #40]	; (b01c <CC_PalPowerSaveModeSelect+0x80>)
    aff2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    aff6:	2b00      	cmp	r3, #0
    aff8:	d1fb      	bne.n	aff2 <CC_PalPowerSaveModeSelect+0x56>
    affa:	4a07      	ldr	r2, [pc, #28]	; (b018 <CC_PalPowerSaveModeSelect+0x7c>)
    affc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    b000:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b004:	f7ff ff46 	bl	ae94 <CC_HalMaskInterrupt>
    b008:	6823      	ldr	r3, [r4, #0]
    b00a:	e7d5      	b.n	afb8 <CC_PalPowerSaveModeSelect+0x1c>
    b00c:	2000019c 	.word	0x2000019c
    b010:	2000018c 	.word	0x2000018c
    b014:	200011bc 	.word	0x200011bc
    b018:	5002a000 	.word	0x5002a000
    b01c:	5002b000 	.word	0x5002b000
    b020:	ffff8fe9 	.word	0xffff8fe9

0000b024 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b024:	4770      	bx	lr

0000b026 <precedentsAverage>:
    for (uint16_t i = 0; i < precedents_size; i++)
    b026:	2300      	movs	r3, #0
    uint16_t sum = 0;
    b028:	469c      	mov	ip, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    b02a:	4293      	cmp	r3, r2
    b02c:	d210      	bcs.n	b050 <precedentsAverage+0x2a>
{
    b02e:	b500      	push	{lr}
        sum += precedents[i];
    b030:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
    b034:	44f4      	add	ip, lr
    b036:	fa1f fc8c 	uxth.w	ip, ip
    for (uint16_t i = 0; i < precedents_size; i++)
    b03a:	3301      	adds	r3, #1
    b03c:	b29b      	uxth	r3, r3
    b03e:	4293      	cmp	r3, r2
    b040:	d3f6      	bcc.n	b030 <precedentsAverage+0xa>
    return (sum + current_read) / (precedents_size+1);
    b042:	448c      	add	ip, r1
    b044:	1c50      	adds	r0, r2, #1
    b046:	fb9c f0f0 	sdiv	r0, ip, r0
}
    b04a:	b280      	uxth	r0, r0
    b04c:	f85d fb04 	ldr.w	pc, [sp], #4
    return (sum + current_read) / (precedents_size+1);
    b050:	448c      	add	ip, r1
    b052:	1c50      	adds	r0, r2, #1
    b054:	fb9c f0f0 	sdiv	r0, ip, r0
}
    b058:	b280      	uxth	r0, r0
    b05a:	4770      	bx	lr

0000b05c <cbprintf_via_va_list>:
{
    b05c:	b510      	push	{r4, lr}
    b05e:	460c      	mov	r4, r1
    b060:	4611      	mov	r1, r2
    b062:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    b064:	9b02      	ldr	r3, [sp, #8]
    b066:	47a0      	blx	r4
}
    b068:	bd10      	pop	{r4, pc}

0000b06a <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    b06a:	b353      	cbz	r3, b0c2 <cbpprintf_external+0x58>
{
    b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b070:	b082      	sub	sp, #8
    b072:	4607      	mov	r7, r0
    b074:	4688      	mov	r8, r1
    b076:	4691      	mov	r9, r2
    b078:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    b07a:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    b07c:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    b07e:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    b080:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    b082:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    b086:	441c      	add	r4, r3
    b088:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    b08a:	f04f 0a00 	mov.w	sl, #0
    b08e:	e00a      	b.n	b0a6 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    b090:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    b094:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    b098:	4620      	mov	r0, r4
    b09a:	f000 fb31 	bl	b700 <strlen>
    b09e:	3001      	adds	r0, #1
    b0a0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    b0a2:	f10a 0a01 	add.w	sl, sl, #1
    b0a6:	45b2      	cmp	sl, r6
    b0a8:	d3f2      	bcc.n	b090 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    b0aa:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    b0ae:	9300      	str	r3, [sp, #0]
    b0b0:	686b      	ldr	r3, [r5, #4]
    b0b2:	464a      	mov	r2, r9
    b0b4:	4641      	mov	r1, r8
    b0b6:	4638      	mov	r0, r7
    b0b8:	f7ff ffd0 	bl	b05c <cbprintf_via_va_list>
}
    b0bc:	b002      	add	sp, #8
    b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    b0c2:	f06f 0015 	mvn.w	r0, #21
}
    b0c6:	4770      	bx	lr

0000b0c8 <sys_notify_validate>:
	if (notify == NULL) {
    b0c8:	4602      	mov	r2, r0
    b0ca:	b158      	cbz	r0, b0e4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b0cc:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b0ce:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    b0d2:	2b01      	cmp	r3, #1
    b0d4:	d003      	beq.n	b0de <sys_notify_validate+0x16>
    b0d6:	2b03      	cmp	r3, #3
    b0d8:	d107      	bne.n	b0ea <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    b0da:	6803      	ldr	r3, [r0, #0]
    b0dc:	b143      	cbz	r3, b0f0 <sys_notify_validate+0x28>
		notify->result = 0;
    b0de:	2000      	movs	r0, #0
    b0e0:	6090      	str	r0, [r2, #8]
    b0e2:	4770      	bx	lr
		return -EINVAL;
    b0e4:	f06f 0015 	mvn.w	r0, #21
    b0e8:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    b0ea:	f06f 0015 	mvn.w	r0, #21
    b0ee:	4770      	bx	lr
			rv = -EINVAL;
    b0f0:	f06f 0015 	mvn.w	r0, #21
}
    b0f4:	4770      	bx	lr

0000b0f6 <arch_printk_char_out>:
}
    b0f6:	2000      	movs	r0, #0
    b0f8:	4770      	bx	lr

0000b0fa <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    b0fa:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    b0fc:	f000 f99d 	bl	b43a <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b100:	bd08      	pop	{r3, pc}

0000b102 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    b102:	b40f      	push	{r0, r1, r2, r3}
    b104:	b500      	push	{lr}
    b106:	b083      	sub	sp, #12
    b108:	a904      	add	r1, sp, #16
    b10a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    b10e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    b110:	f7ff fff3 	bl	b0fa <vprintk>

	va_end(ap);
}
    b114:	b003      	add	sp, #12
    b116:	f85d eb04 	ldr.w	lr, [sp], #4
    b11a:	b004      	add	sp, #16
    b11c:	4770      	bx	lr

0000b11e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    b11e:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b122:	8b81      	ldrh	r1, [r0, #28]
    b124:	f021 0107 	bic.w	r1, r1, #7
    b128:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    b12a:	8381      	strh	r1, [r0, #28]
}
    b12c:	4770      	bx	lr

0000b12e <notify_monitors>:
{
    b12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b132:	4606      	mov	r6, r0
    b134:	460f      	mov	r7, r1
    b136:	4690      	mov	r8, r2
	return list->head;
    b138:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b13a:	b119      	cbz	r1, b144 <notify_monitors+0x16>
    b13c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b13e:	b131      	cbz	r1, b14e <notify_monitors+0x20>
	return node->next;
    b140:	680c      	ldr	r4, [r1, #0]
    b142:	e004      	b.n	b14e <notify_monitors+0x20>
    b144:	460c      	mov	r4, r1
    b146:	e002      	b.n	b14e <notify_monitors+0x20>
    b148:	4623      	mov	r3, r4
    b14a:	4621      	mov	r1, r4
    b14c:	461c      	mov	r4, r3
    b14e:	b159      	cbz	r1, b168 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    b150:	684d      	ldr	r5, [r1, #4]
    b152:	4643      	mov	r3, r8
    b154:	463a      	mov	r2, r7
    b156:	4630      	mov	r0, r6
    b158:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b15a:	2c00      	cmp	r4, #0
    b15c:	d0f4      	beq.n	b148 <notify_monitors+0x1a>
    b15e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    b160:	2c00      	cmp	r4, #0
    b162:	d0f2      	beq.n	b14a <notify_monitors+0x1c>
	return node->next;
    b164:	6823      	ldr	r3, [r4, #0]
    b166:	e7f0      	b.n	b14a <notify_monitors+0x1c>
}
    b168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b16c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b16c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    b16e:	f013 0307 	ands.w	r3, r3, #7
    b172:	d103      	bne.n	b17c <process_recheck+0x10>
	return list->head;
    b174:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    b176:	b10a      	cbz	r2, b17c <process_recheck+0x10>
		evt = EVT_START;
    b178:	2003      	movs	r0, #3
    b17a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b17c:	2b02      	cmp	r3, #2
    b17e:	d003      	beq.n	b188 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    b180:	2b01      	cmp	r3, #1
    b182:	d006      	beq.n	b192 <process_recheck+0x26>
	int evt = EVT_NOP;
    b184:	2000      	movs	r0, #0
    b186:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    b188:	8bc2      	ldrh	r2, [r0, #30]
    b18a:	2a00      	cmp	r2, #0
    b18c:	d1f8      	bne.n	b180 <process_recheck+0x14>
		evt = EVT_STOP;
    b18e:	2004      	movs	r0, #4
    b190:	4770      	bx	lr
    b192:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    b194:	b10b      	cbz	r3, b19a <process_recheck+0x2e>
		evt = EVT_RESET;
    b196:	2005      	movs	r0, #5
}
    b198:	4770      	bx	lr
	int evt = EVT_NOP;
    b19a:	2000      	movs	r0, #0
    b19c:	4770      	bx	lr

0000b19e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    b19e:	b158      	cbz	r0, b1b8 <validate_args+0x1a>
{
    b1a0:	b510      	push	{r4, lr}
    b1a2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b1a4:	b159      	cbz	r1, b1be <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    b1a6:	1d08      	adds	r0, r1, #4
    b1a8:	f7ff ff8e 	bl	b0c8 <sys_notify_validate>
	if ((rv == 0)
    b1ac:	b918      	cbnz	r0, b1b6 <validate_args+0x18>
	    && ((cli->notify.flags
    b1ae:	68a3      	ldr	r3, [r4, #8]
    b1b0:	f033 0303 	bics.w	r3, r3, #3
    b1b4:	d106      	bne.n	b1c4 <validate_args+0x26>
}
    b1b6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b1b8:	f06f 0015 	mvn.w	r0, #21
}
    b1bc:	4770      	bx	lr
		return -EINVAL;
    b1be:	f06f 0015 	mvn.w	r0, #21
    b1c2:	e7f8      	b.n	b1b6 <validate_args+0x18>
		rv = -EINVAL;
    b1c4:	f06f 0015 	mvn.w	r0, #21
    b1c8:	e7f5      	b.n	b1b6 <validate_args+0x18>

0000b1ca <notify_one>:
{
    b1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1ce:	4607      	mov	r7, r0
    b1d0:	460c      	mov	r4, r1
    b1d2:	4616      	mov	r6, r2
    b1d4:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b1d6:	4619      	mov	r1, r3
    b1d8:	1d20      	adds	r0, r4, #4
    b1da:	f7f6 fa1b 	bl	1614 <sys_notify_finalize>
	if (cb) {
    b1de:	b128      	cbz	r0, b1ec <notify_one+0x22>
    b1e0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    b1e2:	462b      	mov	r3, r5
    b1e4:	4632      	mov	r2, r6
    b1e6:	4621      	mov	r1, r4
    b1e8:	4638      	mov	r0, r7
    b1ea:	47c0      	blx	r8
}
    b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b1f0 <notify_all>:
{
    b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1f4:	4680      	mov	r8, r0
    b1f6:	460c      	mov	r4, r1
    b1f8:	4617      	mov	r7, r2
    b1fa:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    b1fc:	e004      	b.n	b208 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    b1fe:	4633      	mov	r3, r6
    b200:	463a      	mov	r2, r7
    b202:	4640      	mov	r0, r8
    b204:	f7ff ffe1 	bl	b1ca <notify_one>
    b208:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    b20a:	b131      	cbz	r1, b21a <notify_all+0x2a>
	return node->next;
    b20c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    b20e:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b210:	6863      	ldr	r3, [r4, #4]
    b212:	428b      	cmp	r3, r1
    b214:	d1f3      	bne.n	b1fe <notify_all+0xe>
	list->tail = node;
    b216:	6065      	str	r5, [r4, #4]
}
    b218:	e7f1      	b.n	b1fe <notify_all+0xe>
}
    b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b21e <onoff_manager_init>:
	if ((mgr == NULL)
    b21e:	b170      	cbz	r0, b23e <onoff_manager_init+0x20>
{
    b220:	b538      	push	{r3, r4, r5, lr}
    b222:	460c      	mov	r4, r1
    b224:	4605      	mov	r5, r0
	    || (transitions == NULL)
    b226:	b169      	cbz	r1, b244 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    b228:	680b      	ldr	r3, [r1, #0]
    b22a:	b173      	cbz	r3, b24a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    b22c:	684b      	ldr	r3, [r1, #4]
    b22e:	b17b      	cbz	r3, b250 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b230:	2220      	movs	r2, #32
    b232:	2100      	movs	r1, #0
    b234:	f000 fab1 	bl	b79a <memset>
    b238:	612c      	str	r4, [r5, #16]
	return 0;
    b23a:	2000      	movs	r0, #0
}
    b23c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b23e:	f06f 0015 	mvn.w	r0, #21
}
    b242:	4770      	bx	lr
		return -EINVAL;
    b244:	f06f 0015 	mvn.w	r0, #21
    b248:	e7f8      	b.n	b23c <onoff_manager_init+0x1e>
    b24a:	f06f 0015 	mvn.w	r0, #21
    b24e:	e7f5      	b.n	b23c <onoff_manager_init+0x1e>
    b250:	f06f 0015 	mvn.w	r0, #21
    b254:	e7f2      	b.n	b23c <onoff_manager_init+0x1e>

0000b256 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b256:	b508      	push	{r3, lr}
    b258:	4604      	mov	r4, r0
    b25a:	4608      	mov	r0, r1
    b25c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b25e:	461a      	mov	r2, r3
    b260:	47a0      	blx	r4
	return z_impl_z_current_get();
    b262:	f7fe ff87 	bl	a174 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b266:	f7f8 ffd9 	bl	421c <z_impl_k_thread_abort>

0000b26a <free_list_add_bidx>:
{
    b26a:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    b26c:	1d13      	adds	r3, r2, #4
    b26e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    b272:	b97c      	cbnz	r4, b294 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    b274:	2301      	movs	r3, #1
    b276:	fa03 f402 	lsl.w	r4, r3, r2
    b27a:	68c3      	ldr	r3, [r0, #12]
    b27c:	4323      	orrs	r3, r4
    b27e:	60c3      	str	r3, [r0, #12]
		b->next = c;
    b280:	3204      	adds	r2, #4
    b282:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    b286:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    b288:	1d1a      	adds	r2, r3, #4
    b28a:	b289      	uxth	r1, r1
    b28c:	5281      	strh	r1, [r0, r2]
    b28e:	3306      	adds	r3, #6
    b290:	52c1      	strh	r1, [r0, r3]
}
    b292:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    b294:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    b296:	3204      	adds	r2, #4
    b298:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    b29a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    b29e:	f10c 0e04 	add.w	lr, ip, #4
    b2a2:	f820 300e 	strh.w	r3, [r0, lr]
    b2a6:	f10c 0c06 	add.w	ip, ip, #6
    b2aa:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    b2ae:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    b2b0:	3306      	adds	r3, #6
    b2b2:	b289      	uxth	r1, r1
    b2b4:	52c1      	strh	r1, [r0, r3]
    b2b6:	5281      	strh	r1, [r0, r2]
    b2b8:	e7eb      	b.n	b292 <free_list_add_bidx+0x28>

0000b2ba <free_list_add>:
{
    b2ba:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    b2bc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    b2c0:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    b2c2:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    b2c4:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    b2c8:	f1c2 021f 	rsb	r2, r2, #31
    b2cc:	f7ff ffcd 	bl	b26a <free_list_add_bidx>
}
    b2d0:	bd08      	pop	{r3, pc}

0000b2d2 <extract_decimal>:
{
    b2d2:	4684      	mov	ip, r0
	const char *sp = *str;
    b2d4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    b2d6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    b2d8:	e005      	b.n	b2e6 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    b2da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    b2de:	3201      	adds	r2, #1
    b2e0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    b2e4:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b2e6:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b2e8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    b2ec:	2909      	cmp	r1, #9
    b2ee:	d9f4      	bls.n	b2da <extract_decimal+0x8>
	*str = sp;
    b2f0:	f8cc 2000 	str.w	r2, [ip]
}
    b2f4:	4770      	bx	lr

0000b2f6 <encode_uint>:
{
    b2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2fa:	b083      	sub	sp, #12
    b2fc:	4604      	mov	r4, r0
    b2fe:	460d      	mov	r5, r1
    b300:	9201      	str	r2, [sp, #4]
    b302:	469a      	mov	sl, r3
    b304:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    b306:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b308:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    b30c:	2b6f      	cmp	r3, #111	; 0x6f
    b30e:	d00f      	beq.n	b330 <encode_uint+0x3a>
    b310:	d906      	bls.n	b320 <encode_uint+0x2a>
    b312:	2b70      	cmp	r3, #112	; 0x70
    b314:	d00f      	beq.n	b336 <encode_uint+0x40>
    b316:	2b78      	cmp	r3, #120	; 0x78
    b318:	d110      	bne.n	b33c <encode_uint+0x46>
		return 16;
    b31a:	f04f 0910 	mov.w	r9, #16
    b31e:	e026      	b.n	b36e <encode_uint+0x78>
	switch (specifier) {
    b320:	2b58      	cmp	r3, #88	; 0x58
    b322:	d002      	beq.n	b32a <encode_uint+0x34>
    b324:	f04f 090a 	mov.w	r9, #10
    b328:	e021      	b.n	b36e <encode_uint+0x78>
		return 16;
    b32a:	f04f 0910 	mov.w	r9, #16
    b32e:	e01e      	b.n	b36e <encode_uint+0x78>
		return 8;
    b330:	f04f 0908 	mov.w	r9, #8
    b334:	e01b      	b.n	b36e <encode_uint+0x78>
		return 16;
    b336:	f04f 0910 	mov.w	r9, #16
    b33a:	e018      	b.n	b36e <encode_uint+0x78>
	switch (specifier) {
    b33c:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    b340:	e015      	b.n	b36e <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b342:	f1bb 0f19 	cmp.w	fp, #25
    b346:	d821      	bhi.n	b38c <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    b348:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b34a:	3237      	adds	r2, #55	; 0x37
    b34c:	b2d2      	uxtb	r2, r2
    b34e:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    b352:	463a      	mov	r2, r7
    b354:	4643      	mov	r3, r8
    b356:	4620      	mov	r0, r4
    b358:	4629      	mov	r1, r5
    b35a:	f7f5 f8b3 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    b35e:	42bc      	cmp	r4, r7
    b360:	f175 0300 	sbcs.w	r3, r5, #0
    b364:	d316      	bcc.n	b394 <encode_uint+0x9e>
    b366:	4556      	cmp	r6, sl
    b368:	d914      	bls.n	b394 <encode_uint+0x9e>
		value /= radix;
    b36a:	4604      	mov	r4, r0
    b36c:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    b36e:	f04f 0800 	mov.w	r8, #0
    b372:	464f      	mov	r7, r9
    b374:	464a      	mov	r2, r9
    b376:	4643      	mov	r3, r8
    b378:	4620      	mov	r0, r4
    b37a:	4629      	mov	r1, r5
    b37c:	f7f5 f8a2 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b380:	2a09      	cmp	r2, #9
    b382:	d8de      	bhi.n	b342 <encode_uint+0x4c>
    b384:	b2d2      	uxtb	r2, r2
    b386:	3230      	adds	r2, #48	; 0x30
    b388:	b2d2      	uxtb	r2, r2
    b38a:	e7e0      	b.n	b34e <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    b38c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b38e:	3257      	adds	r2, #87	; 0x57
    b390:	b2d2      	uxtb	r2, r2
    b392:	e7dc      	b.n	b34e <encode_uint+0x58>
	if (conv->flag_hash) {
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	781b      	ldrb	r3, [r3, #0]
    b398:	f013 0f20 	tst.w	r3, #32
    b39c:	d005      	beq.n	b3aa <encode_uint+0xb4>
		if (radix == 8) {
    b39e:	f1b9 0f08 	cmp.w	r9, #8
    b3a2:	d006      	beq.n	b3b2 <encode_uint+0xbc>
		} else if (radix == 16) {
    b3a4:	f1b9 0f10 	cmp.w	r9, #16
    b3a8:	d009      	beq.n	b3be <encode_uint+0xc8>
}
    b3aa:	4630      	mov	r0, r6
    b3ac:	b003      	add	sp, #12
    b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    b3b2:	9a01      	ldr	r2, [sp, #4]
    b3b4:	7893      	ldrb	r3, [r2, #2]
    b3b6:	f043 0308 	orr.w	r3, r3, #8
    b3ba:	7093      	strb	r3, [r2, #2]
    b3bc:	e7f5      	b.n	b3aa <encode_uint+0xb4>
			conv->altform_0c = true;
    b3be:	9a01      	ldr	r2, [sp, #4]
    b3c0:	7893      	ldrb	r3, [r2, #2]
    b3c2:	f043 0310 	orr.w	r3, r3, #16
    b3c6:	7093      	strb	r3, [r2, #2]
    b3c8:	e7ef      	b.n	b3aa <encode_uint+0xb4>

0000b3ca <outs>:
{
    b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3ce:	4607      	mov	r7, r0
    b3d0:	460e      	mov	r6, r1
    b3d2:	4614      	mov	r4, r2
    b3d4:	4698      	mov	r8, r3
	size_t count = 0;
    b3d6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b3d8:	e006      	b.n	b3e8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    b3da:	4631      	mov	r1, r6
    b3dc:	f814 0b01 	ldrb.w	r0, [r4], #1
    b3e0:	47b8      	blx	r7
		if (rc < 0) {
    b3e2:	2800      	cmp	r0, #0
    b3e4:	db09      	blt.n	b3fa <outs+0x30>
		++count;
    b3e6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b3e8:	4544      	cmp	r4, r8
    b3ea:	d3f6      	bcc.n	b3da <outs+0x10>
    b3ec:	f1b8 0f00 	cmp.w	r8, #0
    b3f0:	d102      	bne.n	b3f8 <outs+0x2e>
    b3f2:	7823      	ldrb	r3, [r4, #0]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d1f0      	bne.n	b3da <outs+0x10>
	return (int)count;
    b3f8:	4628      	mov	r0, r5
}
    b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b3fe <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    b3fe:	4040      	eors	r0, r0
    b400:	f380 8811 	msr	BASEPRI, r0
    b404:	f04f 0004 	mov.w	r0, #4
    b408:	df02      	svc	2
}
    b40a:	4770      	bx	lr

0000b40c <assert_print>:

void assert_print(const char *fmt, ...)
{
    b40c:	b40f      	push	{r0, r1, r2, r3}
    b40e:	b500      	push	{lr}
    b410:	b083      	sub	sp, #12
    b412:	a904      	add	r1, sp, #16
    b414:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    b418:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    b41a:	f7ff fe6e 	bl	b0fa <vprintk>

	va_end(ap);
}
    b41e:	b003      	add	sp, #12
    b420:	f85d eb04 	ldr.w	lr, [sp], #4
    b424:	b004      	add	sp, #16
    b426:	4770      	bx	lr

0000b428 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    b428:	4770      	bx	lr

0000b42a <dummy_timestamp>:
}
    b42a:	2000      	movs	r0, #0
    b42c:	4770      	bx	lr

0000b42e <msg_filter_check>:
}
    b42e:	2001      	movs	r0, #1
    b430:	4770      	bx	lr

0000b432 <default_get_timestamp>:
{
    b432:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b434:	f000 fd80 	bl	bf38 <sys_clock_cycle_get_32>
}
    b438:	bd08      	pop	{r3, pc}

0000b43a <z_log_vprintk>:
{
    b43a:	b500      	push	{lr}
    b43c:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    b43e:	9103      	str	r1, [sp, #12]
    b440:	9002      	str	r0, [sp, #8]
    b442:	2000      	movs	r0, #0
    b444:	9001      	str	r0, [sp, #4]
    b446:	9000      	str	r0, [sp, #0]
    b448:	4603      	mov	r3, r0
    b44a:	4602      	mov	r2, r0
    b44c:	4601      	mov	r1, r0
    b44e:	f7f7 fd1f 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    b452:	b005      	add	sp, #20
    b454:	f85d fb04 	ldr.w	pc, [sp], #4

0000b458 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    b458:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    b45a:	f7f7 f9ef 	bl	283c <log_init>
	}

	return 0;
}
    b45e:	2000      	movs	r0, #0
    b460:	bd08      	pop	{r3, pc}

0000b462 <z_log_get_tag>:
}
    b462:	2000      	movs	r0, #0
    b464:	4770      	bx	lr

0000b466 <out_func>:
{
    b466:	b500      	push	{lr}
    b468:	b083      	sub	sp, #12
		char x = (char)c;
    b46a:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    b46e:	680b      	ldr	r3, [r1, #0]
    b470:	684a      	ldr	r2, [r1, #4]
    b472:	6852      	ldr	r2, [r2, #4]
    b474:	2101      	movs	r1, #1
    b476:	f10d 0007 	add.w	r0, sp, #7
    b47a:	4798      	blx	r3
}
    b47c:	2000      	movs	r0, #0
    b47e:	b003      	add	sp, #12
    b480:	f85d fb04 	ldr.w	pc, [sp], #4

0000b484 <cr_out_func>:
{
    b484:	b538      	push	{r3, r4, r5, lr}
    b486:	4604      	mov	r4, r0
    b488:	460d      	mov	r5, r1
	out_func(c, ctx);
    b48a:	f7ff ffec 	bl	b466 <out_func>
	if (c == '\n') {
    b48e:	2c0a      	cmp	r4, #10
    b490:	d001      	beq.n	b496 <cr_out_func+0x12>
}
    b492:	2000      	movs	r0, #0
    b494:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    b496:	4629      	mov	r1, r5
    b498:	200d      	movs	r0, #13
    b49a:	f7ff ffe4 	bl	b466 <out_func>
    b49e:	e7f8      	b.n	b492 <cr_out_func+0xe>

0000b4a0 <buffer_write>:
{
    b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4a2:	4607      	mov	r7, r0
    b4a4:	460d      	mov	r5, r1
    b4a6:	4614      	mov	r4, r2
    b4a8:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    b4aa:	4632      	mov	r2, r6
    b4ac:	4621      	mov	r1, r4
    b4ae:	4628      	mov	r0, r5
    b4b0:	47b8      	blx	r7
		buf += processed;
    b4b2:	4405      	add	r5, r0
	} while (len != 0);
    b4b4:	1a24      	subs	r4, r4, r0
    b4b6:	d1f8      	bne.n	b4aa <buffer_write+0xa>
}
    b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b4ba <color_prefix>:
{
    b4ba:	b508      	push	{r3, lr}
    b4bc:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    b4be:	2201      	movs	r2, #1
    b4c0:	f7f7 fb62 	bl	2b88 <color_print>
}
    b4c4:	bd08      	pop	{r3, pc}

0000b4c6 <color_postfix>:
{
    b4c6:	b508      	push	{r3, lr}
    b4c8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    b4ca:	2200      	movs	r2, #0
    b4cc:	f7f7 fb5c 	bl	2b88 <color_print>
}
    b4d0:	bd08      	pop	{r3, pc}

0000b4d2 <postfix_print>:
{
    b4d2:	b538      	push	{r3, r4, r5, lr}
    b4d4:	4605      	mov	r5, r0
    b4d6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    b4d8:	f001 0101 	and.w	r1, r1, #1
    b4dc:	f7ff fff3 	bl	b4c6 <color_postfix>
	newline_print(output, flags);
    b4e0:	4621      	mov	r1, r4
    b4e2:	4628      	mov	r0, r5
    b4e4:	f7f7 fb66 	bl	2bb4 <newline_print>
}
    b4e8:	bd38      	pop	{r3, r4, r5, pc}

0000b4ea <log_msg2_hexdump>:
{
    b4ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b4ee:	b083      	sub	sp, #12
    b4f0:	4680      	mov	r8, r0
    b4f2:	460e      	mov	r6, r1
    b4f4:	4615      	mov	r5, r2
    b4f6:	461f      	mov	r7, r3
    b4f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    b4fc:	462c      	mov	r4, r5
    b4fe:	2d10      	cmp	r5, #16
    b500:	bf28      	it	cs
    b502:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    b504:	f8cd 9000 	str.w	r9, [sp]
    b508:	463b      	mov	r3, r7
    b50a:	4622      	mov	r2, r4
    b50c:	4631      	mov	r1, r6
    b50e:	4640      	mov	r0, r8
    b510:	f7f7 fb64 	bl	2bdc <hexdump_line_print>
		data += length;
    b514:	4426      	add	r6, r4
	} while (len);
    b516:	1b2d      	subs	r5, r5, r4
    b518:	d1f0      	bne.n	b4fc <log_msg2_hexdump+0x12>
}
    b51a:	b003      	add	sp, #12
    b51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b520 <log_output_flush>:
{
    b520:	b510      	push	{r4, lr}
    b522:	4604      	mov	r4, r0
		     output->control_block->offset,
    b524:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    b526:	6853      	ldr	r3, [r2, #4]
    b528:	6812      	ldr	r2, [r2, #0]
    b52a:	6881      	ldr	r1, [r0, #8]
    b52c:	6800      	ldr	r0, [r0, #0]
    b52e:	f7ff ffb7 	bl	b4a0 <buffer_write>
	output->control_block->offset = 0;
    b532:	6863      	ldr	r3, [r4, #4]
    b534:	2200      	movs	r2, #0
    b536:	601a      	str	r2, [r3, #0]
}
    b538:	bd10      	pop	{r4, pc}

0000b53a <z_log_msg2_finalize>:
{
    b53a:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    b53c:	b198      	cbz	r0, b566 <z_log_msg2_finalize+0x2c>
    b53e:	460e      	mov	r6, r1
    b540:	4614      	mov	r4, r2
    b542:	4619      	mov	r1, r3
    b544:	4605      	mov	r5, r0
	if (data) {
    b546:	b143      	cbz	r3, b55a <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    b548:	f100 0310 	add.w	r3, r0, #16
    b54c:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    b550:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    b554:	4418      	add	r0, r3
    b556:	f000 f8f1 	bl	b73c <memcpy>
	msg->hdr.desc = desc;
    b55a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    b55c:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    b55e:	4628      	mov	r0, r5
    b560:	f7f7 fa4e 	bl	2a00 <z_log_msg2_commit>
}
    b564:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    b566:	f7f7 fa2b 	bl	29c0 <z_log_dropped>
		return;
    b56a:	e7fb      	b.n	b564 <z_log_msg2_finalize+0x2a>

0000b56c <abort_function>:
{
    b56c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b56e:	2000      	movs	r0, #0
    b570:	f7f7 f8ea 	bl	2748 <sys_reboot>

0000b574 <z_log_msg2_runtime_create>:
{
    b574:	b510      	push	{r4, lr}
    b576:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b578:	ac0b      	add	r4, sp, #44	; 0x2c
    b57a:	9405      	str	r4, [sp, #20]
    b57c:	9403      	str	r4, [sp, #12]
    b57e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b580:	9402      	str	r4, [sp, #8]
    b582:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b584:	9401      	str	r4, [sp, #4]
    b586:	9c08      	ldr	r4, [sp, #32]
    b588:	9400      	str	r4, [sp, #0]
    b58a:	f7f7 fc81 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    b58e:	b006      	add	sp, #24
    b590:	bd10      	pop	{r4, pc}

0000b592 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b592:	b538      	push	{r3, r4, r5, lr}
    b594:	4604      	mov	r4, r0

	if (esf != NULL) {
    b596:	460d      	mov	r5, r1
    b598:	b111      	cbz	r1, b5a0 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    b59a:	4608      	mov	r0, r1
    b59c:	f7f8 f89c 	bl	36d8 <esf_dump>
	}
	z_fatal_error(reason, esf);
    b5a0:	4629      	mov	r1, r5
    b5a2:	4620      	mov	r0, r4
    b5a4:	f7fc fc06 	bl	7db4 <z_fatal_error>
}
    b5a8:	bd38      	pop	{r3, r4, r5, pc}

0000b5aa <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b5aa:	b508      	push	{r3, lr}
    b5ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b5ae:	6800      	ldr	r0, [r0, #0]
    b5b0:	f7ff ffef 	bl	b592 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    b5b4:	bd08      	pop	{r3, pc}

0000b5b6 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    b5b6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b5b8:	2100      	movs	r1, #0
    b5ba:	2001      	movs	r0, #1
    b5bc:	f7ff ffe9 	bl	b592 <z_arm_fatal_error>
}
    b5c0:	bd08      	pop	{r3, pc}

0000b5c2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b5c2:	b508      	push	{r3, lr}
	handler();
    b5c4:	f7f8 f924 	bl	3810 <z_SysNmiOnReset>
	z_arm_int_exit();
    b5c8:	f7f8 fa1a 	bl	3a00 <z_arm_exc_exit>
}
    b5cc:	bd08      	pop	{r3, pc}

0000b5ce <memory_fault_recoverable>:
}
    b5ce:	2000      	movs	r0, #0
    b5d0:	4770      	bx	lr

0000b5d2 <z_log_msg2_runtime_create>:
{
    b5d2:	b510      	push	{r4, lr}
    b5d4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b5d6:	ac0b      	add	r4, sp, #44	; 0x2c
    b5d8:	9405      	str	r4, [sp, #20]
    b5da:	9403      	str	r4, [sp, #12]
    b5dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b5de:	9402      	str	r4, [sp, #8]
    b5e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b5e2:	9401      	str	r4, [sp, #4]
    b5e4:	9c08      	ldr	r4, [sp, #32]
    b5e6:	9400      	str	r4, [sp, #0]
    b5e8:	f7f7 fc52 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    b5ec:	b006      	add	sp, #24
    b5ee:	bd10      	pop	{r4, pc}

0000b5f0 <fault_handle>:
{
    b5f0:	b508      	push	{r3, lr}
	*recoverable = false;
    b5f2:	2300      	movs	r3, #0
    b5f4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    b5f6:	1ecb      	subs	r3, r1, #3
    b5f8:	2b09      	cmp	r3, #9
    b5fa:	d81a      	bhi.n	b632 <fault_handle+0x42>
    b5fc:	e8df f003 	tbb	[pc, r3]
    b600:	110d0905 	.word	0x110d0905
    b604:	19191919 	.word	0x19191919
    b608:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    b60a:	4611      	mov	r1, r2
    b60c:	f7f8 fc4a 	bl	3ea4 <hard_fault>
}
    b610:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    b612:	2100      	movs	r1, #0
    b614:	f7f8 fb68 	bl	3ce8 <mem_manage_fault>
		break;
    b618:	e7fa      	b.n	b610 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    b61a:	2100      	movs	r1, #0
    b61c:	f7f8 f9fe 	bl	3a1c <bus_fault>
		break;
    b620:	e7f6      	b.n	b610 <fault_handle+0x20>
		reason = usage_fault(esf);
    b622:	f7f8 faa3 	bl	3b6c <usage_fault>
		break;
    b626:	e7f3      	b.n	b610 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    b628:	4611      	mov	r1, r2
    b62a:	f7f8 fb29 	bl	3c80 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b62e:	2000      	movs	r0, #0
		break;
    b630:	e7ee      	b.n	b610 <fault_handle+0x20>
		reserved_exception(esf, fault);
    b632:	f7f8 fb39 	bl	3ca8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    b636:	2000      	movs	r0, #0
	return reason;
    b638:	e7ea      	b.n	b610 <fault_handle+0x20>

0000b63a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    b63a:	6843      	ldr	r3, [r0, #4]
    b63c:	1e5a      	subs	r2, r3, #1
		&&
    b63e:	4213      	tst	r3, r2
    b640:	d106      	bne.n	b650 <mpu_partition_is_valid+0x16>
		&&
    b642:	2b1f      	cmp	r3, #31
    b644:	d906      	bls.n	b654 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    b646:	6803      	ldr	r3, [r0, #0]
		&&
    b648:	421a      	tst	r2, r3
    b64a:	d005      	beq.n	b658 <mpu_partition_is_valid+0x1e>
    b64c:	2000      	movs	r0, #0
    b64e:	4770      	bx	lr
    b650:	2000      	movs	r0, #0
    b652:	4770      	bx	lr
    b654:	2000      	movs	r0, #0
    b656:	4770      	bx	lr
    b658:	2001      	movs	r0, #1
}
    b65a:	4770      	bx	lr

0000b65c <z_log_msg2_runtime_create>:
{
    b65c:	b510      	push	{r4, lr}
    b65e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b660:	ac0b      	add	r4, sp, #44	; 0x2c
    b662:	9405      	str	r4, [sp, #20]
    b664:	9403      	str	r4, [sp, #12]
    b666:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b668:	9402      	str	r4, [sp, #8]
    b66a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b66c:	9401      	str	r4, [sp, #4]
    b66e:	9c08      	ldr	r4, [sp, #32]
    b670:	9400      	str	r4, [sp, #0]
    b672:	f7f7 fc0d 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    b676:	b006      	add	sp, #24
    b678:	bd10      	pop	{r4, pc}

0000b67a <mpu_configure_region>:
{
    b67a:	b500      	push	{lr}
    b67c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    b67e:	680b      	ldr	r3, [r1, #0]
    b680:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    b682:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b684:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    b686:	2b20      	cmp	r3, #32
    b688:	d912      	bls.n	b6b0 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    b68a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b68e:	d811      	bhi.n	b6b4 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    b690:	3b01      	subs	r3, #1
    b692:	fab3 f383 	clz	r3, r3
    b696:	f1c3 031f 	rsb	r3, r3, #31
    b69a:	005b      	lsls	r3, r3, #1
    b69c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    b6a0:	4313      	orrs	r3, r2
    b6a2:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    b6a4:	a901      	add	r1, sp, #4
    b6a6:	f7f8 fe07 	bl	42b8 <region_allocate_and_init>
}
    b6aa:	b005      	add	sp, #20
    b6ac:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    b6b0:	2308      	movs	r3, #8
    b6b2:	e7f5      	b.n	b6a0 <mpu_configure_region+0x26>
		return REGION_4G;
    b6b4:	233e      	movs	r3, #62	; 0x3e
    b6b6:	e7f3      	b.n	b6a0 <mpu_configure_region+0x26>

0000b6b8 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    b6b8:	4602      	mov	r2, r0
    b6ba:	e002      	b.n	b6c2 <strcpy+0xa>
		*d = *s;
    b6bc:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    b6c0:	3101      	adds	r1, #1
	while (*s != '\0') {
    b6c2:	780b      	ldrb	r3, [r1, #0]
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d1f9      	bne.n	b6bc <strcpy+0x4>
	}

	*d = '\0';
    b6c8:	7013      	strb	r3, [r2, #0]

	return dest;
}
    b6ca:	4770      	bx	lr

0000b6cc <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    b6cc:	4603      	mov	r3, r0
    b6ce:	b1a2      	cbz	r2, b6fa <strncpy+0x2e>
{
    b6d0:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    b6d2:	780c      	ldrb	r4, [r1, #0]
    b6d4:	b12c      	cbz	r4, b6e2 <strncpy+0x16>
		*d = *s;
    b6d6:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    b6da:	3101      	adds	r1, #1
		d++;
		n--;
    b6dc:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    b6de:	2a00      	cmp	r2, #0
    b6e0:	d1f7      	bne.n	b6d2 <strncpy+0x6>
	}

	while (n > 0) {
    b6e2:	b122      	cbz	r2, b6ee <strncpy+0x22>
		*d = '\0';
    b6e4:	2100      	movs	r1, #0
    b6e6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    b6ea:	3a01      	subs	r2, #1
    b6ec:	e7f9      	b.n	b6e2 <strncpy+0x16>
	}

	return dest;
}
    b6ee:	bc10      	pop	{r4}
    b6f0:	4770      	bx	lr
		*d = '\0';
    b6f2:	2100      	movs	r1, #0
    b6f4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b6f8:	3a01      	subs	r2, #1
	while (n > 0) {
    b6fa:	2a00      	cmp	r2, #0
    b6fc:	d1f9      	bne.n	b6f2 <strncpy+0x26>
    b6fe:	4770      	bx	lr

0000b700 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b700:	4603      	mov	r3, r0
	size_t n = 0;
    b702:	2000      	movs	r0, #0

	while (*s != '\0') {
    b704:	e001      	b.n	b70a <strlen+0xa>
		s++;
    b706:	3301      	adds	r3, #1
		n++;
    b708:	3001      	adds	r0, #1
	while (*s != '\0') {
    b70a:	781a      	ldrb	r2, [r3, #0]
    b70c:	2a00      	cmp	r2, #0
    b70e:	d1fa      	bne.n	b706 <strlen+0x6>
	}

	return n;
}
    b710:	4770      	bx	lr

0000b712 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    b712:	4603      	mov	r3, r0
	size_t n = 0;
    b714:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    b716:	e001      	b.n	b71c <strnlen+0xa>
		s++;
    b718:	3301      	adds	r3, #1
		n++;
    b71a:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    b71c:	781a      	ldrb	r2, [r3, #0]
    b71e:	b10a      	cbz	r2, b724 <strnlen+0x12>
    b720:	4288      	cmp	r0, r1
    b722:	d3f9      	bcc.n	b718 <strnlen+0x6>
	}

	return n;
}
    b724:	4770      	bx	lr

0000b726 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b726:	e001      	b.n	b72c <strcmp+0x6>
		s1++;
    b728:	3001      	adds	r0, #1
		s2++;
    b72a:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b72c:	7803      	ldrb	r3, [r0, #0]
    b72e:	780a      	ldrb	r2, [r1, #0]
    b730:	4293      	cmp	r3, r2
    b732:	d101      	bne.n	b738 <strcmp+0x12>
    b734:	2b00      	cmp	r3, #0
    b736:	d1f7      	bne.n	b728 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    b738:	1a98      	subs	r0, r3, r2
    b73a:	4770      	bx	lr

0000b73c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    b73c:	ea80 0301 	eor.w	r3, r0, r1
    b740:	f013 0f03 	tst.w	r3, #3
    b744:	d001      	beq.n	b74a <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    b746:	4603      	mov	r3, r0
    b748:	e023      	b.n	b792 <memcpy+0x56>
    b74a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    b74c:	f013 0f03 	tst.w	r3, #3
    b750:	d00f      	beq.n	b772 <memcpy+0x36>
			if (n == 0) {
    b752:	b30a      	cbz	r2, b798 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    b754:	f811 cb01 	ldrb.w	ip, [r1], #1
    b758:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    b75c:	3a01      	subs	r2, #1
    b75e:	e7f5      	b.n	b74c <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    b760:	f811 cb01 	ldrb.w	ip, [r1], #1
    b764:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b768:	3a01      	subs	r2, #1
	while (n > 0) {
    b76a:	2a00      	cmp	r2, #0
    b76c:	d1f8      	bne.n	b760 <memcpy+0x24>
	}

	return d;
}
    b76e:	bc10      	pop	{r4}
    b770:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    b772:	2a03      	cmp	r2, #3
    b774:	d90d      	bls.n	b792 <memcpy+0x56>
{
    b776:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    b778:	f851 4b04 	ldr.w	r4, [r1], #4
    b77c:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    b780:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    b782:	2a03      	cmp	r2, #3
    b784:	d8f8      	bhi.n	b778 <memcpy+0x3c>
    b786:	e7f0      	b.n	b76a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    b788:	f811 cb01 	ldrb.w	ip, [r1], #1
    b78c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b790:	3a01      	subs	r2, #1
	while (n > 0) {
    b792:	2a00      	cmp	r2, #0
    b794:	d1f8      	bne.n	b788 <memcpy+0x4c>
    b796:	4770      	bx	lr
}
    b798:	4770      	bx	lr

0000b79a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    b79a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    b79e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    b7a0:	e002      	b.n	b7a8 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    b7a2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b7a6:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    b7a8:	f013 0f03 	tst.w	r3, #3
    b7ac:	d002      	beq.n	b7b4 <memset+0x1a>
		if (n == 0) {
    b7ae:	2a00      	cmp	r2, #0
    b7b0:	d1f7      	bne.n	b7a2 <memset+0x8>
    b7b2:	e00f      	b.n	b7d4 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    b7b4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    b7b6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    b7ba:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    b7be:	2a03      	cmp	r2, #3
    b7c0:	d906      	bls.n	b7d0 <memset+0x36>
		*(d_word++) = c_word;
    b7c2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    b7c6:	3a04      	subs	r2, #4
    b7c8:	e7f9      	b.n	b7be <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    b7ca:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    b7ce:	3a01      	subs	r2, #1
	while (n > 0) {
    b7d0:	2a00      	cmp	r2, #0
    b7d2:	d1fa      	bne.n	b7ca <memset+0x30>
	}

	return buf;
}
    b7d4:	4770      	bx	lr

0000b7d6 <_stdout_hook_default>:
}
    b7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b7da:	4770      	bx	lr

0000b7dc <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    b7dc:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    b7de:	f7f8 fe9f 	bl	4520 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    b7e2:	bd08      	pop	{r3, pc}

0000b7e4 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b7e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b7e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    b7ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    b7f0:	2a08      	cmp	r2, #8
    b7f2:	d001      	beq.n	b7f8 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    b7f4:	2000      	movs	r0, #0
    b7f6:	4770      	bx	lr
                switch(var2)
    b7f8:	2b02      	cmp	r3, #2
    b7fa:	d001      	beq.n	b800 <nrf52_errata_197+0x1c>
                        return false;
    b7fc:	2000      	movs	r0, #0
    b7fe:	4770      	bx	lr
                        return true;
    b800:	2001      	movs	r0, #1
    #endif
}
    b802:	4770      	bx	lr

0000b804 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    b804:	2806      	cmp	r0, #6
    b806:	d000      	beq.n	b80a <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    b808:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b80a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b80e:	2201      	movs	r2, #1
    b810:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b814:	f3bf 8f4f 	dsb	sy
        __WFE();
    b818:	bf20      	wfe
    while (true)
    b81a:	e7fd      	b.n	b818 <pm_state_set+0x14>

0000b81c <pm_state_exit_post_ops>:
    b81c:	2300      	movs	r3, #0
    b81e:	f383 8811 	msr	BASEPRI, r3
    b822:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b826:	4770      	bx	lr

0000b828 <adc_context_on_timer_expired>:
{
    b828:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    b82a:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b82c:	f3bf 8f5b 	dmb	ish
    b830:	e850 3f00 	ldrex	r3, [r0]
    b834:	1c5a      	adds	r2, r3, #1
    b836:	e840 2100 	strex	r1, r2, [r0]
    b83a:	2900      	cmp	r1, #0
    b83c:	d1f8      	bne.n	b830 <adc_context_on_timer_expired+0x8>
    b83e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    b842:	b11b      	cbz	r3, b84c <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    b844:	f06f 030f 	mvn.w	r3, #15
    b848:	6603      	str	r3, [r0, #96]	; 0x60
}
    b84a:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    b84c:	f7f8 fed0 	bl	45f0 <adc_context_start_sampling>
    b850:	e7fb      	b.n	b84a <adc_context_on_timer_expired+0x22>

0000b852 <z_log_msg2_runtime_create>:
{
    b852:	b510      	push	{r4, lr}
    b854:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b856:	ac0b      	add	r4, sp, #44	; 0x2c
    b858:	9405      	str	r4, [sp, #20]
    b85a:	9403      	str	r4, [sp, #12]
    b85c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b85e:	9402      	str	r4, [sp, #8]
    b860:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b862:	9401      	str	r4, [sp, #4]
    b864:	9c08      	ldr	r4, [sp, #32]
    b866:	9400      	str	r4, [sp, #0]
    b868:	f7f7 fb12 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    b86c:	b006      	add	sp, #24
    b86e:	bd10      	pop	{r4, pc}

0000b870 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    b870:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b872:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b876:	0089      	lsls	r1, r1, #2
    b878:	3140      	adds	r1, #64	; 0x40
}
    b87a:	4408      	add	r0, r1
    b87c:	4770      	bx	lr

0000b87e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    b87e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    b880:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    b884:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b888:	4770      	bx	lr

0000b88a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    b88a:	6900      	ldr	r0, [r0, #16]
}
    b88c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    b890:	4770      	bx	lr

0000b892 <set_off_state>:
	__asm__ volatile(
    b892:	f04f 0320 	mov.w	r3, #32
    b896:	f3ef 8211 	mrs	r2, BASEPRI
    b89a:	f383 8812 	msr	BASEPRI_MAX, r3
    b89e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b8a2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b8a4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b8a8:	d001      	beq.n	b8ae <set_off_state+0x1c>
    b8aa:	428b      	cmp	r3, r1
    b8ac:	d107      	bne.n	b8be <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b8ae:	2301      	movs	r3, #1
    b8b0:	6003      	str	r3, [r0, #0]
	int err = 0;
    b8b2:	2000      	movs	r0, #0
	__asm__ volatile(
    b8b4:	f382 8811 	msr	BASEPRI, r2
    b8b8:	f3bf 8f6f 	isb	sy
}
    b8bc:	4770      	bx	lr
		err = -EPERM;
    b8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b8c2:	e7f7      	b.n	b8b4 <set_off_state+0x22>

0000b8c4 <set_starting_state>:
	__asm__ volatile(
    b8c4:	f04f 0320 	mov.w	r3, #32
    b8c8:	f3ef 8211 	mrs	r2, BASEPRI
    b8cc:	f383 8812 	msr	BASEPRI_MAX, r3
    b8d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b8d4:	6803      	ldr	r3, [r0, #0]
    b8d6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b8da:	f003 0307 	and.w	r3, r3, #7
    b8de:	2b01      	cmp	r3, #1
    b8e0:	d008      	beq.n	b8f4 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    b8e2:	458c      	cmp	ip, r1
    b8e4:	d009      	beq.n	b8fa <set_starting_state+0x36>
		err = -EPERM;
    b8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    b8ea:	f382 8811 	msr	BASEPRI, r2
    b8ee:	f3bf 8f6f 	isb	sy
}
    b8f2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b8f4:	6001      	str	r1, [r0, #0]
	int err = 0;
    b8f6:	2000      	movs	r0, #0
    b8f8:	e7f7      	b.n	b8ea <set_starting_state+0x26>
		err = -EALREADY;
    b8fa:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b8fe:	e7f4      	b.n	b8ea <set_starting_state+0x26>

0000b900 <set_on_state>:
	__asm__ volatile(
    b900:	f04f 0320 	mov.w	r3, #32
    b904:	f3ef 8211 	mrs	r2, BASEPRI
    b908:	f383 8812 	msr	BASEPRI_MAX, r3
    b90c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b910:	6803      	ldr	r3, [r0, #0]
    b912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b916:	f043 0302 	orr.w	r3, r3, #2
    b91a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b91c:	f382 8811 	msr	BASEPRI, r2
    b920:	f3bf 8f6f 	isb	sy
}
    b924:	4770      	bx	lr

0000b926 <clkstarted_handle>:
{
    b926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b928:	4606      	mov	r6, r0
    b92a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    b92c:	f7ff ffa0 	bl	b870 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    b930:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    b932:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    b934:	2300      	movs	r3, #0
    b936:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    b93a:	f7ff ffe1 	bl	b900 <set_on_state>
	if (callback) {
    b93e:	b11d      	cbz	r5, b948 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b940:	463a      	mov	r2, r7
    b942:	4621      	mov	r1, r4
    b944:	4630      	mov	r0, r6
    b946:	47a8      	blx	r5
}
    b948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b94a <async_start>:
{
    b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b94e:	4606      	mov	r6, r0
    b950:	4690      	mov	r8, r2
    b952:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    b954:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    b956:	4629      	mov	r1, r5
    b958:	f7ff ff8a 	bl	b870 <get_sub_data>
    b95c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    b95e:	9906      	ldr	r1, [sp, #24]
    b960:	3008      	adds	r0, #8
    b962:	f7ff ffaf 	bl	b8c4 <set_starting_state>
	if (err < 0) {
    b966:	2800      	cmp	r0, #0
    b968:	db09      	blt.n	b97e <async_start+0x34>
	subdata->cb = cb;
    b96a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    b96e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    b970:	4629      	mov	r1, r5
    b972:	4630      	mov	r0, r6
    b974:	f7ff ff83 	bl	b87e <get_sub_config>
    b978:	6803      	ldr	r3, [r0, #0]
    b97a:	4798      	blx	r3
	return 0;
    b97c:	2000      	movs	r0, #0
}
    b97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b982 <api_start>:
{
    b982:	b510      	push	{r4, lr}
    b984:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b986:	2480      	movs	r4, #128	; 0x80
    b988:	9400      	str	r4, [sp, #0]
    b98a:	f7ff ffde 	bl	b94a <async_start>
}
    b98e:	b002      	add	sp, #8
    b990:	bd10      	pop	{r4, pc}

0000b992 <onoff_started_callback>:
{
    b992:	b510      	push	{r4, lr}
    b994:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    b996:	b2c9      	uxtb	r1, r1
    b998:	f7ff ff77 	bl	b88a <get_onoff_manager>
	notify(mgr, 0);
    b99c:	2100      	movs	r1, #0
    b99e:	47a0      	blx	r4
}
    b9a0:	bd10      	pop	{r4, pc}

0000b9a2 <hfclk_start>:
{
    b9a2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b9a4:	2001      	movs	r0, #1
    b9a6:	f7fb f80d 	bl	69c4 <nrfx_clock_start>
}
    b9aa:	bd08      	pop	{r3, pc}

0000b9ac <lfclk_start>:
{
    b9ac:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b9ae:	2000      	movs	r0, #0
    b9b0:	f7fb f808 	bl	69c4 <nrfx_clock_start>
}
    b9b4:	bd08      	pop	{r3, pc}

0000b9b6 <hfclk_stop>:
{
    b9b6:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b9b8:	2001      	movs	r0, #1
    b9ba:	f7fb f879 	bl	6ab0 <nrfx_clock_stop>
}
    b9be:	bd08      	pop	{r3, pc}

0000b9c0 <lfclk_stop>:
{
    b9c0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b9c2:	2000      	movs	r0, #0
    b9c4:	f7fb f874 	bl	6ab0 <nrfx_clock_stop>
}
    b9c8:	bd08      	pop	{r3, pc}

0000b9ca <api_stop>:
{
    b9ca:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    b9cc:	2280      	movs	r2, #128	; 0x80
    b9ce:	f7f9 f979 	bl	4cc4 <stop>
}
    b9d2:	bd08      	pop	{r3, pc}

0000b9d4 <blocking_start_callback>:
{
    b9d4:	b508      	push	{r3, lr}
    b9d6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b9d8:	f7fd f8a0 	bl	8b1c <z_impl_k_sem_give>
}
    b9dc:	bd08      	pop	{r3, pc}

0000b9de <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    b9de:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    b9e2:	f020 0001 	bic.w	r0, r0, #1
    b9e6:	0540      	lsls	r0, r0, #21
    b9e8:	0d40      	lsrs	r0, r0, #21
    b9ea:	f240 2306 	movw	r3, #518	; 0x206
    b9ee:	4298      	cmp	r0, r3
    b9f0:	d033      	beq.n	ba5a <get_drive+0x7c>
    b9f2:	d816      	bhi.n	ba22 <get_drive+0x44>
    b9f4:	2806      	cmp	r0, #6
    b9f6:	d02c      	beq.n	ba52 <get_drive+0x74>
    b9f8:	d906      	bls.n	ba08 <get_drive+0x2a>
    b9fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    b9fe:	d10d      	bne.n	ba1c <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    ba00:	2301      	movs	r3, #1
    ba02:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba04:	2000      	movs	r0, #0
		break;
    ba06:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ba08:	b300      	cbz	r0, ba4c <get_drive+0x6e>
    ba0a:	2802      	cmp	r0, #2
    ba0c:	d103      	bne.n	ba16 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    ba0e:	2304      	movs	r3, #4
    ba10:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba12:	2000      	movs	r0, #0
		break;
    ba14:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ba16:	f06f 0015 	mvn.w	r0, #21
    ba1a:	4770      	bx	lr
    ba1c:	f06f 0015 	mvn.w	r0, #21
    ba20:	4770      	bx	lr
    ba22:	f240 4302 	movw	r3, #1026	; 0x402
    ba26:	4298      	cmp	r0, r3
    ba28:	d01b      	beq.n	ba62 <get_drive+0x84>
    ba2a:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    ba2e:	d103      	bne.n	ba38 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    ba30:	2303      	movs	r3, #3
    ba32:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba34:	2000      	movs	r0, #0
		break;
    ba36:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ba38:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    ba3c:	d103      	bne.n	ba46 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    ba3e:	2302      	movs	r3, #2
    ba40:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba42:	2000      	movs	r0, #0
		break;
    ba44:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ba46:	f06f 0015 	mvn.w	r0, #21
    ba4a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    ba4c:	2000      	movs	r0, #0
    ba4e:	7008      	strb	r0, [r1, #0]
		break;
    ba50:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    ba52:	2306      	movs	r3, #6
    ba54:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba56:	2000      	movs	r0, #0
		break;
    ba58:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    ba5a:	2307      	movs	r3, #7
    ba5c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba5e:	2000      	movs	r0, #0
		break;
    ba60:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    ba62:	2305      	movs	r3, #5
    ba64:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ba66:	2000      	movs	r0, #0
}
    ba68:	4770      	bx	lr

0000ba6a <get_pull>:
	if (flags & GPIO_PULL_UP) {
    ba6a:	f010 0f10 	tst.w	r0, #16
    ba6e:	d104      	bne.n	ba7a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    ba70:	f010 0f20 	tst.w	r0, #32
    ba74:	d103      	bne.n	ba7e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    ba76:	2000      	movs	r0, #0
    ba78:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    ba7a:	2003      	movs	r0, #3
    ba7c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    ba7e:	2001      	movs	r0, #1
}
    ba80:	4770      	bx	lr

0000ba82 <gpio_nrfx_port_get_raw>:
	return port->config;
    ba82:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ba84:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ba86:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ba8a:	600b      	str	r3, [r1, #0]
}
    ba8c:	2000      	movs	r0, #0
    ba8e:	4770      	bx	lr

0000ba90 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    ba90:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ba92:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ba94:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ba98:	4042      	eors	r2, r0
    ba9a:	400a      	ands	r2, r1
    ba9c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ba9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    baa2:	2000      	movs	r0, #0
    baa4:	4770      	bx	lr

0000baa6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    baa6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    baa8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    baaa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    baae:	2000      	movs	r0, #0
    bab0:	4770      	bx	lr

0000bab2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    bab2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bab4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    bab6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    baba:	2000      	movs	r0, #0
    babc:	4770      	bx	lr

0000babe <gpio_nrfx_port_toggle_bits>:
	return port->config;
    babe:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bac0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bac2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    bac6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    bac8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    bacc:	2000      	movs	r0, #0
    bace:	4770      	bx	lr

0000bad0 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    bad0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    bad4:	d007      	beq.n	bae6 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    bad6:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    bada:	d00d      	beq.n	baf8 <get_trigger+0x28>
    badc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    bae0:	d008      	beq.n	baf4 <get_trigger+0x24>
    bae2:	2001      	movs	r0, #1
}
    bae4:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    bae6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    baea:	d001      	beq.n	baf0 <get_trigger+0x20>
    baec:	2005      	movs	r0, #5
    baee:	4770      	bx	lr
    baf0:	2004      	movs	r0, #4
    baf2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    baf4:	2002      	movs	r0, #2
    baf6:	4770      	bx	lr
    baf8:	2003      	movs	r0, #3
    bafa:	4770      	bx	lr

0000bafc <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    bafc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bafe:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    bb00:	f04f 0120 	mov.w	r1, #32
    bb04:	f3ef 8211 	mrs	r2, BASEPRI
    bb08:	f381 8812 	msr	BASEPRI_MAX, r1
    bb0c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bb10:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    bb14:	b131      	cbz	r1, bb24 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb16:	2100      	movs	r1, #0
    bb18:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    bb1c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bb20:	2101      	movs	r1, #1
    bb22:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    bb24:	f382 8811 	msr	BASEPRI, r2
    bb28:	f3bf 8f6f 	isb	sy
}
    bb2c:	4770      	bx	lr

0000bb2e <uarte_nrfx_isr_int>:
{
    bb2e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    bb30:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    bb32:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    bb34:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    bb38:	f413 7f80 	tst.w	r3, #256	; 0x100
    bb3c:	d002      	beq.n	bb44 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bb3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    bb42:	b9d3      	cbnz	r3, bb7a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bb44:	686b      	ldr	r3, [r5, #4]
    bb46:	f013 0f10 	tst.w	r3, #16
    bb4a:	d015      	beq.n	bb78 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    bb4c:	f04f 0220 	mov.w	r2, #32
    bb50:	f3ef 8311 	mrs	r3, BASEPRI
    bb54:	f382 8812 	msr	BASEPRI_MAX, r2
    bb58:	f3bf 8f6f 	isb	sy
    bb5c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    bb60:	b112      	cbz	r2, bb68 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    bb62:	2200      	movs	r2, #0
    bb64:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    bb68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    bb6c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    bb70:	f383 8811 	msr	BASEPRI, r3
    bb74:	f3bf 8f6f 	isb	sy
}
    bb78:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    bb7a:	f7ff ffbf 	bl	bafc <endtx_isr>
    bb7e:	e7e1      	b.n	bb44 <uarte_nrfx_isr_int+0x16>

0000bb80 <uarte_nrfx_configure>:
{
    bb80:	b570      	push	{r4, r5, r6, lr}
    bb82:	b082      	sub	sp, #8
    bb84:	4606      	mov	r6, r0
    bb86:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    bb88:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    bb8a:	794b      	ldrb	r3, [r1, #5]
    bb8c:	2b01      	cmp	r3, #1
    bb8e:	d006      	beq.n	bb9e <uarte_nrfx_configure+0x1e>
    bb90:	2b03      	cmp	r3, #3
    bb92:	d011      	beq.n	bbb8 <uarte_nrfx_configure+0x38>
    bb94:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    bb98:	4618      	mov	r0, r3
    bb9a:	b002      	add	sp, #8
    bb9c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    bb9e:	2300      	movs	r3, #0
    bba0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    bba4:	79a3      	ldrb	r3, [r4, #6]
    bba6:	2b03      	cmp	r3, #3
    bba8:	d137      	bne.n	bc1a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    bbaa:	79e3      	ldrb	r3, [r4, #7]
    bbac:	b143      	cbz	r3, bbc0 <uarte_nrfx_configure+0x40>
    bbae:	2b01      	cmp	r3, #1
    bbb0:	d010      	beq.n	bbd4 <uarte_nrfx_configure+0x54>
    bbb2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    bbb6:	e7ef      	b.n	bb98 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    bbb8:	2310      	movs	r3, #16
    bbba:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    bbbe:	e7f1      	b.n	bba4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    bbc0:	2300      	movs	r3, #0
    bbc2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    bbc6:	7923      	ldrb	r3, [r4, #4]
    bbc8:	b143      	cbz	r3, bbdc <uarte_nrfx_configure+0x5c>
    bbca:	2b02      	cmp	r3, #2
    bbcc:	d021      	beq.n	bc12 <uarte_nrfx_configure+0x92>
    bbce:	f06f 0385 	mvn.w	r3, #133	; 0x85
    bbd2:	e7e1      	b.n	bb98 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    bbd4:	2301      	movs	r3, #1
    bbd6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    bbda:	e7f4      	b.n	bbc6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    bbdc:	2300      	movs	r3, #0
    bbde:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    bbe2:	6821      	ldr	r1, [r4, #0]
    bbe4:	4630      	mov	r0, r6
    bbe6:	f7f9 fc75 	bl	54d4 <baudrate_set>
    bbea:	4603      	mov	r3, r0
    bbec:	b9c0      	cbnz	r0, bc20 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    bbee:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    bbf0:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    bbf2:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    bbf6:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    bbfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    bbfe:	4331      	orrs	r1, r6
    bc00:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    bc02:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    bc06:	3504      	adds	r5, #4
    bc08:	e894 0003 	ldmia.w	r4, {r0, r1}
    bc0c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    bc10:	e7c2      	b.n	bb98 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    bc12:	230e      	movs	r3, #14
    bc14:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    bc18:	e7e3      	b.n	bbe2 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    bc1a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    bc1e:	e7bb      	b.n	bb98 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    bc20:	f06f 0385 	mvn.w	r3, #133	; 0x85
    bc24:	e7b8      	b.n	bb98 <uarte_nrfx_configure+0x18>

0000bc26 <uarte_nrfx_config_get>:
{
    bc26:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    bc28:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    bc2a:	3304      	adds	r3, #4
    bc2c:	e893 0003 	ldmia.w	r3, {r0, r1}
    bc30:	e882 0003 	stmia.w	r2, {r0, r1}
}
    bc34:	2000      	movs	r0, #0
    bc36:	4770      	bx	lr

0000bc38 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    bc38:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bc3a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    bc3c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    bc40:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    bc44:	4770      	bx	lr

0000bc46 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    bc46:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bc48:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    bc4a:	685b      	ldr	r3, [r3, #4]
    bc4c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bc50:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    bc54:	b929      	cbnz	r1, bc62 <is_tx_ready+0x1c>
    bc56:	b933      	cbnz	r3, bc66 <is_tx_ready+0x20>
    bc58:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    bc5c:	b92b      	cbnz	r3, bc6a <is_tx_ready+0x24>
    bc5e:	2000      	movs	r0, #0
    bc60:	4770      	bx	lr
    bc62:	2001      	movs	r0, #1
    bc64:	4770      	bx	lr
    bc66:	2000      	movs	r0, #0
    bc68:	4770      	bx	lr
    bc6a:	2001      	movs	r0, #1
}
    bc6c:	4770      	bx	lr

0000bc6e <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    bc6e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bc70:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    bc72:	2208      	movs	r2, #8
    bc74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    bc78:	4770      	bx	lr

0000bc7a <tx_start>:
{
    bc7a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    bc7c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bc7e:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bc80:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bc84:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bc88:	2200      	movs	r2, #0
    bc8a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    bc8e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    bc92:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    bc96:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bc9a:	685b      	ldr	r3, [r3, #4]
    bc9c:	f013 0f10 	tst.w	r3, #16
    bca0:	d102      	bne.n	bca8 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bca2:	2301      	movs	r3, #1
    bca4:	60a3      	str	r3, [r4, #8]
}
    bca6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    bca8:	2101      	movs	r1, #1
    bcaa:	f7ff ffe0 	bl	bc6e <uarte_enable>
    p_reg->INTENSET = mask;
    bcae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    bcb2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    bcb6:	e7f4      	b.n	bca2 <tx_start+0x28>

0000bcb8 <uarte_nrfx_poll_in>:
{
    bcb8:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    bcba:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    bcbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    bcbe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bcc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bcc4:	b152      	cbz	r2, bcdc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    bcc6:	7c62      	ldrb	r2, [r4, #17]
    bcc8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bcca:	2000      	movs	r0, #0
    bccc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    bcd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bcd4:	2201      	movs	r2, #1
    bcd6:	601a      	str	r2, [r3, #0]
}
    bcd8:	bc10      	pop	{r4}
    bcda:	4770      	bx	lr
		return -1;
    bcdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bce0:	e7fa      	b.n	bcd8 <uarte_nrfx_poll_in+0x20>

0000bce2 <wait_tx_ready>:
{
    bce2:	b570      	push	{r4, r5, r6, lr}
    bce4:	4606      	mov	r6, r0
    bce6:	e014      	b.n	bd12 <wait_tx_ready+0x30>
		if (res) {
    bce8:	b17d      	cbz	r5, bd0a <wait_tx_ready+0x28>
	__asm__ volatile(
    bcea:	f04f 0320 	mov.w	r3, #32
    bcee:	f3ef 8411 	mrs	r4, BASEPRI
    bcf2:	f383 8812 	msr	BASEPRI_MAX, r3
    bcf6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    bcfa:	4630      	mov	r0, r6
    bcfc:	f7ff ffa3 	bl	bc46 <is_tx_ready>
    bd00:	b9a0      	cbnz	r0, bd2c <wait_tx_ready+0x4a>
	__asm__ volatile(
    bd02:	f384 8811 	msr	BASEPRI, r4
    bd06:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    bd0a:	2021      	movs	r0, #33	; 0x21
    bd0c:	2100      	movs	r1, #0
    bd0e:	f7fe f9e5 	bl	a0dc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    bd12:	2464      	movs	r4, #100	; 0x64
    bd14:	4630      	mov	r0, r6
    bd16:	f7ff ff96 	bl	bc46 <is_tx_ready>
    bd1a:	4605      	mov	r5, r0
    bd1c:	2800      	cmp	r0, #0
    bd1e:	d1e3      	bne.n	bce8 <wait_tx_ready+0x6>
    bd20:	2001      	movs	r0, #1
    bd22:	f000 f9c1 	bl	c0a8 <nrfx_busy_wait>
    bd26:	3c01      	subs	r4, #1
    bd28:	d1f4      	bne.n	bd14 <wait_tx_ready+0x32>
    bd2a:	e7dd      	b.n	bce8 <wait_tx_ready+0x6>
}
    bd2c:	4620      	mov	r0, r4
    bd2e:	bd70      	pop	{r4, r5, r6, pc}

0000bd30 <z_log_msg2_runtime_create>:
{
    bd30:	b510      	push	{r4, lr}
    bd32:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bd34:	ac0b      	add	r4, sp, #44	; 0x2c
    bd36:	9405      	str	r4, [sp, #20]
    bd38:	9403      	str	r4, [sp, #12]
    bd3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bd3c:	9402      	str	r4, [sp, #8]
    bd3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bd40:	9401      	str	r4, [sp, #4]
    bd42:	9c08      	ldr	r4, [sp, #32]
    bd44:	9400      	str	r4, [sp, #0]
    bd46:	f7f7 f8a3 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    bd4a:	b006      	add	sp, #24
    bd4c:	bd10      	pop	{r4, pc}

0000bd4e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    bd4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd52:	b083      	sub	sp, #12
    bd54:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    bd56:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    bd58:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    bd5a:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    bd5e:	2100      	movs	r1, #0
    bd60:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    bd64:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    bd68:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    bd6c:	aa01      	add	r2, sp, #4
    bd6e:	4648      	mov	r0, r9
    bd70:	f000 f8e6 	bl	bf40 <pinctrl_lookup_state>
	if (ret < 0) {
    bd74:	1e04      	subs	r4, r0, #0
    bd76:	db07      	blt.n	bd88 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    bd78:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    bd7a:	f8d9 2000 	ldr.w	r2, [r9]
    bd7e:	7919      	ldrb	r1, [r3, #4]
    bd80:	6818      	ldr	r0, [r3, #0]
    bd82:	f7f9 ff69 	bl	5c58 <pinctrl_configure_pins>
    bd86:	4604      	mov	r4, r0
	if (err < 0) {
    bd88:	2c00      	cmp	r4, #0
    bd8a:	db35      	blt.n	bdf8 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    bd8c:	f108 0104 	add.w	r1, r8, #4
    bd90:	4628      	mov	r0, r5
    bd92:	f7ff fef5 	bl	bb80 <uarte_nrfx_configure>
	if (err) {
    bd96:	4604      	mov	r4, r0
    bd98:	bb70      	cbnz	r0, bdf8 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    bd9a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    bd9c:	f013 0f02 	tst.w	r3, #2
    bda0:	d12e      	bne.n	be00 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    bda2:	2308      	movs	r3, #8
    bda4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    bda8:	7a3b      	ldrb	r3, [r7, #8]
    bdaa:	b95b      	cbnz	r3, bdc4 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bdac:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    bdb0:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    bdb4:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    bdb8:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    bdbc:	2301      	movs	r3, #1
    bdbe:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bdc2:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    bdc4:	687b      	ldr	r3, [r7, #4]
    bdc6:	f013 0f02 	tst.w	r3, #2
    bdca:	d103      	bne.n	bdd4 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    bdcc:	f44f 7380 	mov.w	r3, #256	; 0x100
    bdd0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    bdd4:	687b      	ldr	r3, [r7, #4]
    bdd6:	f013 0f10 	tst.w	r3, #16
    bdda:	d003      	beq.n	bde4 <uarte_instance_init+0x96>
    bddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    bde0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    bde4:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bde8:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    bdec:	2300      	movs	r3, #0
    bdee:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bdf2:	2301      	movs	r3, #1
    bdf4:	60b3      	str	r3, [r6, #8]
    bdf6:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    bdf8:	4620      	mov	r0, r4
    bdfa:	b003      	add	sp, #12
    bdfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    be00:	4641      	mov	r1, r8
    be02:	4630      	mov	r0, r6
    be04:	f7f9 fc46 	bl	5694 <endtx_stoptx_ppi_init>
		if (err < 0) {
    be08:	2800      	cmp	r0, #0
    be0a:	daca      	bge.n	bda2 <uarte_instance_init+0x54>
			return err;
    be0c:	4604      	mov	r4, r0
    be0e:	e7f3      	b.n	bdf8 <uarte_instance_init+0xaa>

0000be10 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    be10:	b510      	push	{r4, lr}
    be12:	4604      	mov	r4, r0
    be14:	2200      	movs	r2, #0
    be16:	2101      	movs	r1, #1
    be18:	2002      	movs	r0, #2
    be1a:	f7f7 fcc3 	bl	37a4 <z_arm_irq_priority_set>
    be1e:	2002      	movs	r0, #2
    be20:	f7f7 fca4 	bl	376c <arch_irq_enable>
    be24:	2100      	movs	r1, #0
    be26:	4620      	mov	r0, r4
    be28:	f7ff ff91 	bl	bd4e <uarte_instance_init>
    be2c:	bd10      	pop	{r4, pc}

0000be2e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    be2e:	b510      	push	{r4, lr}
    be30:	4604      	mov	r4, r0
    be32:	2200      	movs	r2, #0
    be34:	2101      	movs	r1, #1
    be36:	2028      	movs	r0, #40	; 0x28
    be38:	f7f7 fcb4 	bl	37a4 <z_arm_irq_priority_set>
    be3c:	2028      	movs	r0, #40	; 0x28
    be3e:	f7f7 fc95 	bl	376c <arch_irq_enable>
    be42:	2100      	movs	r1, #0
    be44:	4620      	mov	r0, r4
    be46:	f7ff ff82 	bl	bd4e <uarte_instance_init>
    be4a:	bd10      	pop	{r4, pc}

0000be4c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    be4c:	4770      	bx	lr

0000be4e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    be4e:	1a40      	subs	r0, r0, r1
}
    be50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    be54:	4770      	bx	lr

0000be56 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    be56:	f100 0350 	add.w	r3, r0, #80	; 0x50
    be5a:	009b      	lsls	r3, r3, #2
    be5c:	b29b      	uxth	r3, r3
    be5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    be62:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    be66:	2200      	movs	r2, #0
    be68:	601a      	str	r2, [r3, #0]
    be6a:	681b      	ldr	r3, [r3, #0]
}
    be6c:	4770      	bx	lr

0000be6e <absolute_time_to_cc>:
}
    be6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    be72:	4770      	bx	lr

0000be74 <full_int_lock>:
	__asm__ volatile(
    be74:	f04f 0320 	mov.w	r3, #32
    be78:	f3ef 8011 	mrs	r0, BASEPRI
    be7c:	f383 8812 	msr	BASEPRI_MAX, r3
    be80:	f3bf 8f6f 	isb	sy
}
    be84:	4770      	bx	lr

0000be86 <full_int_unlock>:
	__asm__ volatile(
    be86:	f380 8811 	msr	BASEPRI, r0
    be8a:	f3bf 8f6f 	isb	sy
}
    be8e:	4770      	bx	lr

0000be90 <set_absolute_alarm>:
{
    be90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be92:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    be94:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    be98:	f7f9 fc3a 	bl	5710 <get_comparator>
    be9c:	4607      	mov	r7, r0
    be9e:	e019      	b.n	bed4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    bea0:	2013      	movs	r0, #19
    bea2:	f000 fa33 	bl	c30c <z_impl_k_busy_wait>
}
    bea6:	e022      	b.n	beee <set_absolute_alarm+0x5e>
		event_clear(chan);
    bea8:	4630      	mov	r0, r6
    beaa:	f7ff ffd4 	bl	be56 <event_clear>
		event_enable(chan);
    beae:	4630      	mov	r0, r6
    beb0:	f7f9 fc36 	bl	5720 <event_enable>
		set_comparator(chan, cc_val);
    beb4:	4629      	mov	r1, r5
    beb6:	4630      	mov	r0, r6
    beb8:	f7f9 fc20 	bl	56fc <set_comparator>
		now2 = counter();
    bebc:	f7f9 fc44 	bl	5748 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bec0:	4284      	cmp	r4, r0
    bec2:	d01e      	beq.n	bf02 <set_absolute_alarm+0x72>
    bec4:	1c81      	adds	r1, r0, #2
    bec6:	4628      	mov	r0, r5
    bec8:	f7ff ffc1 	bl	be4e <counter_sub>
	} while ((now2 != now) &&
    becc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bed0:	d917      	bls.n	bf02 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    bed2:	462f      	mov	r7, r5
		now = counter();
    bed4:	f7f9 fc38 	bl	5748 <counter>
    bed8:	4604      	mov	r4, r0
		set_comparator(chan, now);
    beda:	4601      	mov	r1, r0
    bedc:	4630      	mov	r0, r6
    bede:	f7f9 fc0d 	bl	56fc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    bee2:	4621      	mov	r1, r4
    bee4:	4638      	mov	r0, r7
    bee6:	f7ff ffb2 	bl	be4e <counter_sub>
    beea:	2801      	cmp	r0, #1
    beec:	d0d8      	beq.n	bea0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    beee:	1ca7      	adds	r7, r4, #2
    bef0:	4639      	mov	r1, r7
    bef2:	4628      	mov	r0, r5
    bef4:	f7ff ffab 	bl	be4e <counter_sub>
    bef8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    befc:	d9d4      	bls.n	bea8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    befe:	463d      	mov	r5, r7
    bf00:	e7d2      	b.n	bea8 <set_absolute_alarm+0x18>
}
    bf02:	4628      	mov	r0, r5
    bf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bf06 <compare_set>:
{
    bf06:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf08:	b083      	sub	sp, #12
    bf0a:	4604      	mov	r4, r0
    bf0c:	4617      	mov	r7, r2
    bf0e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    bf10:	f7f9 fc20 	bl	5754 <compare_int_lock>
    bf14:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf18:	9301      	str	r3, [sp, #4]
    bf1a:	9b08      	ldr	r3, [sp, #32]
    bf1c:	9300      	str	r3, [sp, #0]
    bf1e:	463a      	mov	r2, r7
    bf20:	462b      	mov	r3, r5
    bf22:	4620      	mov	r0, r4
    bf24:	f7f9 fd06 	bl	5934 <compare_set_nolocks>
    bf28:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    bf2a:	4631      	mov	r1, r6
    bf2c:	4620      	mov	r0, r4
    bf2e:	f7f9 fc75 	bl	581c <compare_int_unlock>
}
    bf32:	4628      	mov	r0, r5
    bf34:	b003      	add	sp, #12
    bf36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bf38 <sys_clock_cycle_get_32>:
{
    bf38:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    bf3a:	f7f9 fcdb 	bl	58f4 <z_nrf_rtc_timer_read>
}
    bf3e:	bd08      	pop	{r3, pc}

0000bf40 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bf40:	b410      	push	{r4}
	*state = &config->states[0];
    bf42:	6843      	ldr	r3, [r0, #4]
    bf44:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    bf46:	e001      	b.n	bf4c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    bf48:	3408      	adds	r4, #8
    bf4a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    bf4c:	6814      	ldr	r4, [r2, #0]
    bf4e:	7a03      	ldrb	r3, [r0, #8]
    bf50:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    bf54:	3b01      	subs	r3, #1
    bf56:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bf5a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    bf5e:	429c      	cmp	r4, r3
    bf60:	d804      	bhi.n	bf6c <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    bf62:	7963      	ldrb	r3, [r4, #5]
    bf64:	428b      	cmp	r3, r1
    bf66:	d1ef      	bne.n	bf48 <pinctrl_lookup_state+0x8>
			return 0;
    bf68:	2000      	movs	r0, #0
    bf6a:	e001      	b.n	bf70 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    bf6c:	f06f 0001 	mvn.w	r0, #1
}
    bf70:	bc10      	pop	{r4}
    bf72:	4770      	bx	lr

0000bf74 <z_log_msg2_runtime_create>:
{
    bf74:	b510      	push	{r4, lr}
    bf76:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bf78:	ac0b      	add	r4, sp, #44	; 0x2c
    bf7a:	9405      	str	r4, [sp, #20]
    bf7c:	9403      	str	r4, [sp, #12]
    bf7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bf80:	9402      	str	r4, [sp, #8]
    bf82:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bf84:	9401      	str	r4, [sp, #4]
    bf86:	9c08      	ldr	r4, [sp, #32]
    bf88:	9400      	str	r4, [sp, #0]
    bf8a:	f7f6 ff81 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    bf8e:	b006      	add	sp, #24
    bf90:	bd10      	pop	{r4, pc}

0000bf92 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    bf92:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    bf94:	f7fe fe70 	bl	ac78 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    bf98:	bd08      	pop	{r3, pc}

0000bf9a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    bf9a:	b510      	push	{r4, lr}
    bf9c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    bf9e:	f7f7 faab 	bl	34f8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    bfa2:	f7f7 fb67 	bl	3674 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    bfa6:	4620      	mov	r0, r4
    bfa8:	f7ff fff3 	bl	bf92 <hw_cc3xx_init_internal>
	return res;
}
    bfac:	bd10      	pop	{r4, pc}

0000bfae <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bfae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bfb2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bfb6:	2b08      	cmp	r3, #8
    bfb8:	d001      	beq.n	bfbe <nrf52_errata_36+0x10>
        return false;
    bfba:	2000      	movs	r0, #0
    bfbc:	4770      	bx	lr
                        return true;
    bfbe:	2001      	movs	r0, #1
}
    bfc0:	4770      	bx	lr

0000bfc2 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bfc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bfc6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    bfca:	2b08      	cmp	r3, #8
    bfcc:	d001      	beq.n	bfd2 <nrf52_errata_66+0x10>
        return false;
    bfce:	2000      	movs	r0, #0
    bfd0:	4770      	bx	lr
                        return true;
    bfd2:	2001      	movs	r0, #1
}
    bfd4:	4770      	bx	lr

0000bfd6 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bfd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    bfda:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bfde:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    bfe2:	2a08      	cmp	r2, #8
    bfe4:	d001      	beq.n	bfea <nrf52_errata_98+0x14>
        return false;
    bfe6:	2000      	movs	r0, #0
    bfe8:	4770      	bx	lr
                switch(var2)
    bfea:	2b00      	cmp	r3, #0
    bfec:	d804      	bhi.n	bff8 <nrf52_errata_98+0x22>
    bfee:	e8df f003 	tbb	[pc, r3]
    bff2:	01          	.byte	0x01
    bff3:	00          	.byte	0x00
    bff4:	2001      	movs	r0, #1
    bff6:	4770      	bx	lr
                        return false;
    bff8:	2000      	movs	r0, #0
}
    bffa:	4770      	bx	lr

0000bffc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    bffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c000:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c004:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c008:	2a08      	cmp	r2, #8
    c00a:	d001      	beq.n	c010 <nrf52_errata_103+0x14>
        return false;
    c00c:	2000      	movs	r0, #0
    c00e:	4770      	bx	lr
                switch(var2)
    c010:	2b00      	cmp	r3, #0
    c012:	d804      	bhi.n	c01e <nrf52_errata_103+0x22>
    c014:	e8df f003 	tbb	[pc, r3]
    c018:	01          	.byte	0x01
    c019:	00          	.byte	0x00
    c01a:	2001      	movs	r0, #1
    c01c:	4770      	bx	lr
                        return false;
    c01e:	2000      	movs	r0, #0
}
    c020:	4770      	bx	lr

0000c022 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c026:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c02a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c02e:	2a08      	cmp	r2, #8
    c030:	d001      	beq.n	c036 <nrf52_errata_115+0x14>
        return false;
    c032:	2000      	movs	r0, #0
    c034:	4770      	bx	lr
                switch(var2)
    c036:	2b00      	cmp	r3, #0
    c038:	d804      	bhi.n	c044 <nrf52_errata_115+0x22>
    c03a:	e8df f003 	tbb	[pc, r3]
    c03e:	01          	.byte	0x01
    c03f:	00          	.byte	0x00
    c040:	2001      	movs	r0, #1
    c042:	4770      	bx	lr
                        return false;
    c044:	2000      	movs	r0, #0
}
    c046:	4770      	bx	lr

0000c048 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c04c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c050:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c054:	2a08      	cmp	r2, #8
    c056:	d001      	beq.n	c05c <nrf52_errata_120+0x14>
        return false;
    c058:	2000      	movs	r0, #0
    c05a:	4770      	bx	lr
                switch(var2)
    c05c:	2b00      	cmp	r3, #0
    c05e:	d804      	bhi.n	c06a <nrf52_errata_120+0x22>
    c060:	e8df f003 	tbb	[pc, r3]
    c064:	01          	.byte	0x01
    c065:	00          	.byte	0x00
    c066:	2001      	movs	r0, #1
    c068:	4770      	bx	lr
                        return false;
    c06a:	2000      	movs	r0, #0
}
    c06c:	4770      	bx	lr

0000c06e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c06e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c072:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    c076:	2b08      	cmp	r3, #8
    c078:	d001      	beq.n	c07e <nrf52_errata_136+0x10>
        return false;
    c07a:	2000      	movs	r0, #0
    c07c:	4770      	bx	lr
                        return true;
    c07e:	2001      	movs	r0, #1
}
    c080:	4770      	bx	lr

0000c082 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c086:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c08a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c08e:	2a08      	cmp	r2, #8
    c090:	d001      	beq.n	c096 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    c092:	2000      	movs	r0, #0
    c094:	4770      	bx	lr
                switch(var2)
    c096:	2b04      	cmp	r3, #4
    c098:	d801      	bhi.n	c09e <nrf52_configuration_249+0x1c>
    c09a:	2000      	movs	r0, #0
    c09c:	4770      	bx	lr
                        return true;
    c09e:	2001      	movs	r0, #1
    #endif
}
    c0a0:	4770      	bx	lr

0000c0a2 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    c0a2:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    c0a4:	4780      	blx	r0
}
    c0a6:	bd08      	pop	{r3, pc}

0000c0a8 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    c0a8:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    c0aa:	f000 f92f 	bl	c30c <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    c0ae:	bd08      	pop	{r3, pc}

0000c0b0 <clock_initial_lfclksrc_get>:
}
    c0b0:	2000      	movs	r0, #0
    c0b2:	4770      	bx	lr

0000c0b4 <clock_lfclksrc_tweak>:
{
    c0b4:	b538      	push	{r3, r4, r5, lr}
    c0b6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    c0b8:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c0ba:	2b01      	cmp	r3, #1
    c0bc:	d002      	beq.n	c0c4 <clock_lfclksrc_tweak+0x10>
    c0be:	b933      	cbnz	r3, c0ce <clock_lfclksrc_tweak+0x1a>
    c0c0:	2301      	movs	r3, #1
    c0c2:	e000      	b.n	c0c6 <clock_lfclksrc_tweak+0x12>
    c0c4:	2301      	movs	r3, #1
    if (!is_correct_clk)
    c0c6:	461d      	mov	r5, r3
    c0c8:	b11b      	cbz	r3, c0d2 <clock_lfclksrc_tweak+0x1e>
}
    c0ca:	4628      	mov	r0, r5
    c0cc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c0ce:	2300      	movs	r3, #0
    c0d0:	e7f9      	b.n	c0c6 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c0d2:	2000      	movs	r0, #0
    c0d4:	f7fa fb98 	bl	6808 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    c0d8:	f7ff ffea 	bl	c0b0 <clock_initial_lfclksrc_get>
    c0dc:	6020      	str	r0, [r4, #0]
    c0de:	e7f4      	b.n	c0ca <clock_lfclksrc_tweak+0x16>

0000c0e0 <pin_is_task_output>:
{
    c0e0:	b510      	push	{r4, lr}
    c0e2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    c0e4:	f7fa fd62 	bl	6bac <pin_is_output>
    c0e8:	b128      	cbz	r0, c0f6 <pin_is_task_output+0x16>
    c0ea:	4620      	mov	r0, r4
    c0ec:	f7fa fd48 	bl	6b80 <pin_in_use_by_te>
    c0f0:	b118      	cbz	r0, c0fa <pin_is_task_output+0x1a>
    c0f2:	2001      	movs	r0, #1
    c0f4:	e000      	b.n	c0f8 <pin_is_task_output+0x18>
    c0f6:	2000      	movs	r0, #0
}
    c0f8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    c0fa:	2000      	movs	r0, #0
    c0fc:	e7fc      	b.n	c0f8 <pin_is_task_output+0x18>

0000c0fe <pin_is_input>:
{
    c0fe:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    c100:	f7fa fd54 	bl	6bac <pin_is_output>
    c104:	f080 0001 	eor.w	r0, r0, #1
}
    c108:	b2c0      	uxtb	r0, r0
    c10a:	bd08      	pop	{r3, pc}

0000c10c <gpiote_polarity_to_trigger>:
}
    c10c:	4770      	bx	lr

0000c10e <gpiote_trigger_to_polarity>:
}
    c10e:	4770      	bx	lr

0000c110 <is_level>:
}
    c110:	2803      	cmp	r0, #3
    c112:	bf94      	ite	ls
    c114:	2000      	movls	r0, #0
    c116:	2001      	movhi	r0, #1
    c118:	4770      	bx	lr

0000c11a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    c11a:	b508      	push	{r3, lr}
  _DoInit();
    c11c:	f7fb fd10 	bl	7b40 <_DoInit>
}
    c120:	bd08      	pop	{r3, pc}

0000c122 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    c122:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    c124:	f7ff fff9 	bl	c11a <SEGGER_RTT_Init>

	return 0;
}
    c128:	2000      	movs	r0, #0
    c12a:	bd08      	pop	{r3, pc}

0000c12c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    c12c:	b148      	cbz	r0, c142 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    c12e:	68c3      	ldr	r3, [r0, #12]
    c130:	8818      	ldrh	r0, [r3, #0]
    c132:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c136:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    c13a:	bf14      	ite	ne
    c13c:	2000      	movne	r0, #0
    c13e:	2001      	moveq	r0, #1
    c140:	4770      	bx	lr
		return false;
    c142:	2000      	movs	r0, #0
}
    c144:	4770      	bx	lr

0000c146 <z_log_msg2_runtime_create>:
{
    c146:	b510      	push	{r4, lr}
    c148:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c14a:	ac0b      	add	r4, sp, #44	; 0x2c
    c14c:	9405      	str	r4, [sp, #20]
    c14e:	9403      	str	r4, [sp, #12]
    c150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c152:	9402      	str	r4, [sp, #8]
    c154:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c156:	9401      	str	r4, [sp, #4]
    c158:	9c08      	ldr	r4, [sp, #32]
    c15a:	9400      	str	r4, [sp, #0]
    c15c:	f7f6 fe98 	bl	2e90 <z_impl_z_log_msg2_runtime_vcreate>
}
    c160:	b006      	add	sp, #24
    c162:	bd10      	pop	{r4, pc}

0000c164 <z_early_memset>:
{
    c164:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    c166:	f7ff fb18 	bl	b79a <memset>
}
    c16a:	bd08      	pop	{r3, pc}

0000c16c <z_early_memcpy>:
{
    c16c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    c16e:	f7ff fae5 	bl	b73c <memcpy>
}
    c172:	bd08      	pop	{r3, pc}

0000c174 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    c174:	6902      	ldr	r2, [r0, #16]
    c176:	6943      	ldr	r3, [r0, #20]
    c178:	431a      	orrs	r2, r3
    c17a:	f012 0203 	ands.w	r2, r2, #3
    c17e:	d10d      	bne.n	c19c <create_free_list+0x28>
	slab->free_list = NULL;
    c180:	2100      	movs	r1, #0
    c182:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    c184:	e005      	b.n	c192 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    c186:	6981      	ldr	r1, [r0, #24]
    c188:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    c18a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    c18c:	6901      	ldr	r1, [r0, #16]
    c18e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    c190:	3201      	adds	r2, #1
    c192:	68c1      	ldr	r1, [r0, #12]
    c194:	4291      	cmp	r1, r2
    c196:	d8f6      	bhi.n	c186 <create_free_list+0x12>
	return 0;
    c198:	2000      	movs	r0, #0
    c19a:	4770      	bx	lr
		return -EINVAL;
    c19c:	f06f 0015 	mvn.w	r0, #21
}
    c1a0:	4770      	bx	lr

0000c1a2 <k_mem_slab_init>:
{
    c1a2:	b510      	push	{r4, lr}
    c1a4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    c1a6:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    c1a8:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    c1aa:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    c1ac:	2300      	movs	r3, #0
    c1ae:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    c1b0:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    c1b2:	f7ff ffdf 	bl	c174 <create_free_list>
	if (rc < 0) {
    c1b6:	2800      	cmp	r0, #0
    c1b8:	db01      	blt.n	c1be <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    c1ba:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    c1bc:	6064      	str	r4, [r4, #4]
}
    c1be:	bd10      	pop	{r4, pc}

0000c1c0 <setup_thread_stack>:
{
    c1c0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    c1c2:	3207      	adds	r2, #7
    c1c4:	f022 0207 	bic.w	r2, r2, #7
    c1c8:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    c1cc:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    c1d0:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    c1d4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    c1d8:	2200      	movs	r2, #0
    c1da:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    c1de:	18c8      	adds	r0, r1, r3
    c1e0:	bc10      	pop	{r4}
    c1e2:	4770      	bx	lr

0000c1e4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c1e4:	f3ef 8005 	mrs	r0, IPSR
}
    c1e8:	3800      	subs	r0, #0
    c1ea:	bf18      	it	ne
    c1ec:	2001      	movne	r0, #1
    c1ee:	4770      	bx	lr

0000c1f0 <k_thread_name_get>:
}
    c1f0:	3074      	adds	r0, #116	; 0x74
    c1f2:	4770      	bx	lr

0000c1f4 <z_impl_k_thread_start>:
{
    c1f4:	b508      	push	{r3, lr}
	z_sched_start(thread);
    c1f6:	f7fd f973 	bl	94e0 <z_sched_start>
}
    c1fa:	bd08      	pop	{r3, pc}

0000c1fc <z_init_thread_base>:
{
    c1fc:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    c1fe:	2400      	movs	r4, #0
    c200:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    c202:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    c204:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    c206:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    c208:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    c20a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    c20c:	61c4      	str	r4, [r0, #28]
}
    c20e:	bc10      	pop	{r4}
    c210:	4770      	bx	lr

0000c212 <z_pm_save_idle_exit>:
{
    c212:	b508      	push	{r3, lr}
	pm_system_resume();
    c214:	f7f6 ff7a 	bl	310c <pm_system_resume>
	sys_clock_idle_exit();
    c218:	f7ff fe18 	bl	be4c <sys_clock_idle_exit>
}
    c21c:	bd08      	pop	{r3, pc}

0000c21e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    c21e:	4288      	cmp	r0, r1
    c220:	da00      	bge.n	c224 <new_prio_for_inheritance+0x6>
    c222:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    c224:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    c228:	db01      	blt.n	c22e <new_prio_for_inheritance+0x10>
    c22a:	4608      	mov	r0, r1
    c22c:	4770      	bx	lr
    c22e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    c232:	4770      	bx	lr

0000c234 <adjust_owner_prio>:
{
    c234:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    c236:	6880      	ldr	r0, [r0, #8]
    c238:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c23c:	428b      	cmp	r3, r1
    c23e:	d101      	bne.n	c244 <adjust_owner_prio+0x10>
	return false;
    c240:	2000      	movs	r0, #0
}
    c242:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    c244:	f7fd fb02 	bl	984c <z_set_prio>
    c248:	e7fb      	b.n	c242 <adjust_owner_prio+0xe>

0000c24a <z_impl_k_mutex_init>:
{
    c24a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    c24c:	2000      	movs	r0, #0
    c24e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    c250:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    c252:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    c254:	605b      	str	r3, [r3, #4]
}
    c256:	4770      	bx	lr

0000c258 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    c258:	b13a      	cbz	r2, c26a <z_impl_k_sem_init+0x12>
    c25a:	428a      	cmp	r2, r1
    c25c:	d308      	bcc.n	c270 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    c25e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c260:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c262:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c264:	6040      	str	r0, [r0, #4]
	return 0;
    c266:	2000      	movs	r0, #0
    c268:	4770      	bx	lr
		return -EINVAL;
    c26a:	f06f 0015 	mvn.w	r0, #21
    c26e:	4770      	bx	lr
    c270:	f06f 0015 	mvn.w	r0, #21
}
    c274:	4770      	bx	lr

0000c276 <thread_active_elsewhere>:
}
    c276:	2000      	movs	r0, #0
    c278:	4770      	bx	lr

0000c27a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    c27a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    c27e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    c282:	4283      	cmp	r3, r0
    c284:	d001      	beq.n	c28a <z_sched_prio_cmp+0x10>
		return b2 - b1;
    c286:	1ac0      	subs	r0, r0, r3
    c288:	4770      	bx	lr
	return 0;
    c28a:	2000      	movs	r0, #0
}
    c28c:	4770      	bx	lr

0000c28e <z_reschedule_irqlock>:
{
    c28e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c290:	4603      	mov	r3, r0
    c292:	b920      	cbnz	r0, c29e <z_reschedule_irqlock+0x10>
    c294:	f3ef 8205 	mrs	r2, IPSR
    c298:	b942      	cbnz	r2, c2ac <z_reschedule_irqlock+0x1e>
    c29a:	2201      	movs	r2, #1
    c29c:	e000      	b.n	c2a0 <z_reschedule_irqlock+0x12>
    c29e:	2200      	movs	r2, #0
	if (resched(key)) {
    c2a0:	b932      	cbnz	r2, c2b0 <z_reschedule_irqlock+0x22>
    c2a2:	f383 8811 	msr	BASEPRI, r3
    c2a6:	f3bf 8f6f 	isb	sy
}
    c2aa:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c2ac:	2200      	movs	r2, #0
    c2ae:	e7f7      	b.n	c2a0 <z_reschedule_irqlock+0x12>
    c2b0:	4618      	mov	r0, r3
    c2b2:	f7f7 facd 	bl	3850 <arch_swap>
	return ret;
    c2b6:	e7f8      	b.n	c2aa <z_reschedule_irqlock+0x1c>

0000c2b8 <z_priq_dumb_best>:
{
    c2b8:	4603      	mov	r3, r0
	return list->head == list;
    c2ba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c2bc:	4283      	cmp	r3, r0
    c2be:	d000      	beq.n	c2c2 <z_priq_dumb_best+0xa>
}
    c2c0:	4770      	bx	lr
	struct k_thread *thread = NULL;
    c2c2:	2000      	movs	r0, #0
	return thread;
    c2c4:	e7fc      	b.n	c2c0 <z_priq_dumb_best+0x8>

0000c2c6 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    c2c6:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    c2c8:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    c2ca:	6083      	str	r3, [r0, #8]
}
    c2cc:	4770      	bx	lr

0000c2ce <remove_timeout>:
{
    c2ce:	b510      	push	{r4, lr}
    c2d0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    c2d2:	f7fe f81b 	bl	a30c <next>
    c2d6:	b148      	cbz	r0, c2ec <remove_timeout+0x1e>
    c2d8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    c2da:	6920      	ldr	r0, [r4, #16]
    c2dc:	6961      	ldr	r1, [r4, #20]
    c2de:	6913      	ldr	r3, [r2, #16]
    c2e0:	181b      	adds	r3, r3, r0
    c2e2:	6950      	ldr	r0, [r2, #20]
    c2e4:	eb41 0100 	adc.w	r1, r1, r0
    c2e8:	6113      	str	r3, [r2, #16]
    c2ea:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    c2ec:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    c2ee:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    c2f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c2f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c2f4:	2300      	movs	r3, #0
    c2f6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    c2f8:	6063      	str	r3, [r4, #4]
}
    c2fa:	bd10      	pop	{r4, pc}

0000c2fc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    c2fc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    c2fe:	f7fe fb01 	bl	a904 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    c302:	bd08      	pop	{r3, pc}

0000c304 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    c304:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    c306:	f7fe fafd 	bl	a904 <sys_clock_tick_get>
}
    c30a:	bd08      	pop	{r3, pc}

0000c30c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    c30c:	b900      	cbnz	r0, c310 <z_impl_k_busy_wait+0x4>
    c30e:	4770      	bx	lr
{
    c310:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    c312:	f7f8 f961 	bl	45d8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    c316:	bd08      	pop	{r3, pc}

0000c318 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    c318:	b510      	push	{r4, lr}
    c31a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    c31c:	f7fe f918 	bl	a550 <z_abort_timeout>

	if (inactive) {
    c320:	b9a0      	cbnz	r0, c34c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    c322:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c324:	b10b      	cbz	r3, c32a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    c326:	4620      	mov	r0, r4
    c328:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    c32a:	f104 0018 	add.w	r0, r4, #24
    c32e:	f7fd fc99 	bl	9c64 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    c332:	b158      	cbz	r0, c34c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    c334:	f7fd f87e 	bl	9434 <z_ready_thread>
	__asm__ volatile(
    c338:	f04f 0320 	mov.w	r3, #32
    c33c:	f3ef 8011 	mrs	r0, BASEPRI
    c340:	f383 8812 	msr	BASEPRI_MAX, r3
    c344:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c348:	f7ff ffa1 	bl	c28e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    c34c:	bd10      	pop	{r4, pc}

0000c34e <k_heap_init>:
{
    c34e:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    c350:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    c354:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    c356:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    c358:	f7f5 fcd8 	bl	1d0c <sys_heap_init>
}
    c35c:	bd10      	pop	{r4, pc}
	...

0000c360 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    c360:	f7fa b932 	b.w	65c8 <SystemInit>
