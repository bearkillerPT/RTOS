
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 24 00 20 a1 49 00 00 27 be 00 00 59 49 00 00     .$. .I..'...YI..
  10:	59 49 00 00 59 49 00 00 59 49 00 00 00 00 00 00     YI..YI..YI......
	...
  2c:	35 41 00 00 59 49 00 00 00 00 00 00 dd 40 00 00     5A..YI.......@..
  3c:	59 49 00 00                                         YI..

00000040 <_irq_vector_table>:
  40:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  50:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  60:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  70:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  80:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  90:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  a0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  b0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  c0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  d0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  e0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..
  f0:	15 42 00 00 15 42 00 00 15 42 00 00 15 42 00 00     .B...B...B...B..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <adc_sample>:
int precedentsAverage(uint16_t *precedents, uint16_t current_read, uint16_t precedents_size);


/* Takes one sample */
static int adc_sample(void)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	b086      	sub	sp, #24
    int ret;
    const struct adc_sequence sequence = {
     7a4:	2300      	movs	r3, #0
     7a6:	9301      	str	r3, [sp, #4]
     7a8:	9302      	str	r3, [sp, #8]
     7aa:	9303      	str	r3, [sp, #12]
     7ac:	9304      	str	r3, [sp, #16]
     7ae:	9305      	str	r3, [sp, #20]
     7b0:	2302      	movs	r3, #2
     7b2:	9302      	str	r3, [sp, #8]
     7b4:	4a0e      	ldr	r2, [pc, #56]	; (7f0 <adc_sample+0x50>)
     7b6:	9203      	str	r2, [sp, #12]
     7b8:	9304      	str	r3, [sp, #16]
     7ba:	230a      	movs	r3, #10
     7bc:	f88d 3014 	strb.w	r3, [sp, #20]
        .buffer = adc_sample_buffer,
        .buffer_size = sizeof(adc_sample_buffer),
        .resolution = ADC_RESOLUTION,
    };

    if (adc_dev == NULL)
     7c0:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <adc_sample+0x54>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	b140      	cbz	r0, 7d8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7c6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7c8:	685b      	ldr	r3, [r3, #4]
     7ca:	a901      	add	r1, sp, #4
     7cc:	4798      	blx	r3
        printk("adc_sample(): error, must bind to adc first \n\r");
        return -1;
    }

    ret = adc_read(adc_dev, &sequence);
    if (ret)
     7ce:	4604      	mov	r4, r0
     7d0:	b940      	cbnz	r0, 7e4 <adc_sample+0x44>
    {
        printk("adc_read() failed with code %d\n", ret);
    }

    return ret;
}
     7d2:	4620      	mov	r0, r4
     7d4:	b006      	add	sp, #24
     7d6:	bd10      	pop	{r4, pc}
        printk("adc_sample(): error, must bind to adc first \n\r");
     7d8:	4807      	ldr	r0, [pc, #28]	; (7f8 <adc_sample+0x58>)
     7da:	f00b f8c4 	bl	b966 <printk>
        return -1;
     7de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7e2:	e7f6      	b.n	7d2 <adc_sample+0x32>
        printk("adc_read() failed with code %d\n", ret);
     7e4:	4601      	mov	r1, r0
     7e6:	4805      	ldr	r0, [pc, #20]	; (7fc <adc_sample+0x5c>)
     7e8:	f00b f8bd 	bl	b966 <printk>
     7ec:	e7f1      	b.n	7d2 <adc_sample+0x32>
     7ee:	bf00      	nop
     7f0:	200005fc 	.word	0x200005fc
     7f4:	200005f8 	.word	0x200005f8
     7f8:	0000cf48 	.word	0x0000cf48
     7fc:	0000cf78 	.word	0x0000cf78

00000800 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     804:	4605      	mov	r5, r0
     806:	460e      	mov	r6, r1
     808:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     80a:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     80e:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     812:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     816:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     81a:	d136      	bne.n	88a <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     81c:	f004 0330 	and.w	r3, r4, #48	; 0x30
     820:	2b30      	cmp	r3, #48	; 0x30
     822:	d043      	beq.n	8ac <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     824:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     828:	2b02      	cmp	r3, #2
     82a:	d050      	beq.n	8ce <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     82c:	f004 0306 	and.w	r3, r4, #6
     830:	2b04      	cmp	r3, #4
     832:	d05d      	beq.n	8f0 <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     834:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     838:	d002      	beq.n	840 <z_impl_gpio_pin_configure+0x40>
     83a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     83e:	d065      	beq.n	90c <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     840:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     844:	d074      	beq.n	930 <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     846:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     84a:	d005      	beq.n	858 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     84c:	b127      	cbz	r7, 858 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     84e:	f014 0f01 	tst.w	r4, #1
     852:	d001      	beq.n	858 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     854:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     858:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     85c:	f8db 3000 	ldr.w	r3, [fp]
     860:	2701      	movs	r7, #1
     862:	40b7      	lsls	r7, r6
     864:	423b      	tst	r3, r7
     866:	d075      	beq.n	954 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     868:	f014 0f01 	tst.w	r4, #1
     86c:	f000 8084 	beq.w	978 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     870:	f8d8 3000 	ldr.w	r3, [r8]
     874:	433b      	orrs	r3, r7
     876:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     87a:	f8da 3000 	ldr.w	r3, [sl]
     87e:	464a      	mov	r2, r9
     880:	4631      	mov	r1, r6
     882:	4628      	mov	r0, r5
     884:	4798      	blx	r3
}
     886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     88a:	4f3f      	ldr	r7, [pc, #252]	; (988 <z_impl_gpio_pin_configure+0x188>)
     88c:	f240 23b5 	movw	r3, #693	; 0x2b5
     890:	463a      	mov	r2, r7
     892:	493e      	ldr	r1, [pc, #248]	; (98c <z_impl_gpio_pin_configure+0x18c>)
     894:	483e      	ldr	r0, [pc, #248]	; (990 <z_impl_gpio_pin_configure+0x190>)
     896:	f00b f9eb 	bl	bc70 <assert_print>
     89a:	483e      	ldr	r0, [pc, #248]	; (994 <z_impl_gpio_pin_configure+0x194>)
     89c:	f00b f9e8 	bl	bc70 <assert_print>
     8a0:	f240 21b5 	movw	r1, #693	; 0x2b5
     8a4:	4638      	mov	r0, r7
     8a6:	f00b f9dc 	bl	bc62 <assert_post_action>
     8aa:	e7b7      	b.n	81c <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     8ac:	4f36      	ldr	r7, [pc, #216]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8ae:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     8b2:	463a      	mov	r2, r7
     8b4:	4938      	ldr	r1, [pc, #224]	; (998 <z_impl_gpio_pin_configure+0x198>)
     8b6:	4836      	ldr	r0, [pc, #216]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8b8:	f00b f9da 	bl	bc70 <assert_print>
     8bc:	4837      	ldr	r0, [pc, #220]	; (99c <z_impl_gpio_pin_configure+0x19c>)
     8be:	f00b f9d7 	bl	bc70 <assert_print>
     8c2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     8c6:	4638      	mov	r0, r7
     8c8:	f00b f9cb 	bl	bc62 <assert_post_action>
     8cc:	e7aa      	b.n	824 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     8ce:	4f2e      	ldr	r7, [pc, #184]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8d0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     8d4:	463a      	mov	r2, r7
     8d6:	4932      	ldr	r1, [pc, #200]	; (9a0 <z_impl_gpio_pin_configure+0x1a0>)
     8d8:	482d      	ldr	r0, [pc, #180]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8da:	f00b f9c9 	bl	bc70 <assert_print>
     8de:	4831      	ldr	r0, [pc, #196]	; (9a4 <z_impl_gpio_pin_configure+0x1a4>)
     8e0:	f00b f9c6 	bl	bc70 <assert_print>
     8e4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     8e8:	4638      	mov	r0, r7
     8ea:	f00b f9ba 	bl	bc62 <assert_post_action>
     8ee:	e79d      	b.n	82c <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     8f0:	4f25      	ldr	r7, [pc, #148]	; (988 <z_impl_gpio_pin_configure+0x188>)
     8f2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     8f6:	463a      	mov	r2, r7
     8f8:	492b      	ldr	r1, [pc, #172]	; (9a8 <z_impl_gpio_pin_configure+0x1a8>)
     8fa:	4825      	ldr	r0, [pc, #148]	; (990 <z_impl_gpio_pin_configure+0x190>)
     8fc:	f00b f9b8 	bl	bc70 <assert_print>
     900:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     904:	4638      	mov	r0, r7
     906:	f00b f9ac 	bl	bc62 <assert_post_action>
     90a:	e793      	b.n	834 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     90c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 988 <z_impl_gpio_pin_configure+0x188>
     910:	f240 23c3 	movw	r3, #707	; 0x2c3
     914:	464a      	mov	r2, r9
     916:	4925      	ldr	r1, [pc, #148]	; (9ac <z_impl_gpio_pin_configure+0x1ac>)
     918:	481d      	ldr	r0, [pc, #116]	; (990 <z_impl_gpio_pin_configure+0x190>)
     91a:	f00b f9a9 	bl	bc70 <assert_print>
     91e:	4824      	ldr	r0, [pc, #144]	; (9b0 <z_impl_gpio_pin_configure+0x1b0>)
     920:	f00b f9a6 	bl	bc70 <assert_print>
     924:	f240 21c3 	movw	r1, #707	; 0x2c3
     928:	4648      	mov	r0, r9
     92a:	f00b f99a 	bl	bc62 <assert_post_action>
     92e:	e787      	b.n	840 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     930:	f8df 9054 	ldr.w	r9, [pc, #84]	; 988 <z_impl_gpio_pin_configure+0x188>
     934:	f240 23c7 	movw	r3, #711	; 0x2c7
     938:	464a      	mov	r2, r9
     93a:	491e      	ldr	r1, [pc, #120]	; (9b4 <z_impl_gpio_pin_configure+0x1b4>)
     93c:	4814      	ldr	r0, [pc, #80]	; (990 <z_impl_gpio_pin_configure+0x190>)
     93e:	f00b f997 	bl	bc70 <assert_print>
     942:	481d      	ldr	r0, [pc, #116]	; (9b8 <z_impl_gpio_pin_configure+0x1b8>)
     944:	f00b f994 	bl	bc70 <assert_print>
     948:	f240 21c7 	movw	r1, #711	; 0x2c7
     94c:	4648      	mov	r0, r9
     94e:	f00b f988 	bl	bc62 <assert_post_action>
     952:	e778      	b.n	846 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     954:	f8df b030 	ldr.w	fp, [pc, #48]	; 988 <z_impl_gpio_pin_configure+0x188>
     958:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     95c:	465a      	mov	r2, fp
     95e:	4917      	ldr	r1, [pc, #92]	; (9bc <z_impl_gpio_pin_configure+0x1bc>)
     960:	480b      	ldr	r0, [pc, #44]	; (990 <z_impl_gpio_pin_configure+0x190>)
     962:	f00b f985 	bl	bc70 <assert_print>
     966:	4816      	ldr	r0, [pc, #88]	; (9c0 <z_impl_gpio_pin_configure+0x1c0>)
     968:	f00b f982 	bl	bc70 <assert_print>
     96c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     970:	4658      	mov	r0, fp
     972:	f00b f976 	bl	bc62 <assert_post_action>
     976:	e777      	b.n	868 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     978:	f8d8 3000 	ldr.w	r3, [r8]
     97c:	ea23 0307 	bic.w	r3, r3, r7
     980:	f8c8 3000 	str.w	r3, [r8]
     984:	e779      	b.n	87a <z_impl_gpio_pin_configure+0x7a>
     986:	bf00      	nop
     988:	0000cf98 	.word	0x0000cf98
     98c:	0000cfcc 	.word	0x0000cfcc
     990:	0000d02c 	.word	0x0000d02c
     994:	0000d04c 	.word	0x0000d04c
     998:	0000d070 	.word	0x0000d070
     99c:	0000d0ac 	.word	0x0000d0ac
     9a0:	0000d0ec 	.word	0x0000d0ec
     9a4:	0000d124 	.word	0x0000d124
     9a8:	0000d178 	.word	0x0000d178
     9ac:	0000d1ac 	.word	0x0000d1ac
     9b0:	0000d1f4 	.word	0x0000d1f4
     9b4:	0000d230 	.word	0x0000d230
     9b8:	0000d274 	.word	0x0000d274
     9bc:	0000d2a0 	.word	0x0000d2a0
     9c0:	0000d2e0 	.word	0x0000d2e0

000009c4 <thread_sensor_code>:
    return;
}

/* Thread code implementation */
void thread_sensor_code(void *argA, void *argB, void *argC)
{
     9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int64_t fin_time = 0, release_time = 0;

    /* Other variables */
    long int nact = 0;

    printk("Thread A init (periodic)\n");
     9c8:	4857      	ldr	r0, [pc, #348]	; (b28 <thread_sensor_code+0x164>)
     9ca:	f00a ffcc 	bl	b966 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     9ce:	f00c f8cb 	bl	cb68 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     9d2:	014a      	lsls	r2, r1, #5
     9d4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     9d8:	0143      	lsls	r3, r0, #5
     9da:	1a1b      	subs	r3, r3, r0
     9dc:	eb62 0201 	sbc.w	r2, r2, r1
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     9e6:	009b      	lsls	r3, r3, #2
     9e8:	181c      	adds	r4, r3, r0
     9ea:	eb42 0301 	adc.w	r3, r2, r1
     9ee:	00db      	lsls	r3, r3, #3
     9f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     9f4:	f3c4 3410 	ubfx	r4, r4, #12, #17
     9f8:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     9fc:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     9fe:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     a02:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     a06:	2500      	movs	r5, #0
     a08:	e048      	b.n	a9c <thread_sensor_code+0xd8>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());

        err = adc_sample();
        if (err)
        {
            printk("adc_sample() failed with error code %d\n\r", err);
     a0a:	4848      	ldr	r0, [pc, #288]	; (b2c <thread_sensor_code+0x168>)
     a0c:	f00a ffab 	bl	b966 <printk>
     a10:	e022      	b.n	a58 <thread_sensor_code+0x94>
                printk("adc reading out of range\n\r");
            }
            else
            {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r", adc_sample_buffer[0], (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023)));
     a12:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
     a16:	fb08 f007 	mul.w	r0, r8, r7
     a1a:	f7ff fcdf 	bl	3dc <__aeabi_i2f>
     a1e:	4944      	ldr	r1, [pc, #272]	; (b30 <thread_sensor_code+0x16c>)
     a20:	f7ff fb6e 	bl	100 <__aeabi_fmul>
     a24:	f7ff fd2e 	bl	484 <__aeabi_f2uiz>
     a28:	b282      	uxth	r2, r0
     a2a:	4639      	mov	r1, r7
     a2c:	4841      	ldr	r0, [pc, #260]	; (b34 <thread_sensor_code+0x170>)
     a2e:	f00a ff9a 	bl	b966 <printk>
                ab = (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023));
     a32:	4b41      	ldr	r3, [pc, #260]	; (b38 <thread_sensor_code+0x174>)
     a34:	8818      	ldrh	r0, [r3, #0]
     a36:	fb08 f000 	mul.w	r0, r8, r0
     a3a:	f7ff fccf 	bl	3dc <__aeabi_i2f>
     a3e:	493c      	ldr	r1, [pc, #240]	; (b30 <thread_sensor_code+0x16c>)
     a40:	f7ff fb5e 	bl	100 <__aeabi_fmul>
     a44:	f7ff fd1e 	bl	484 <__aeabi_f2uiz>
     a48:	4b3c      	ldr	r3, [pc, #240]	; (b3c <thread_sensor_code+0x178>)
     a4a:	8018      	strh	r0, [r3, #0]
                ab = 8000;
     a4c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
     a50:	8019      	strh	r1, [r3, #0]
                printk("Thread A set ab value to: %d \n", ab);
     a52:	483b      	ldr	r0, [pc, #236]	; (b40 <thread_sensor_code+0x17c>)
     a54:	f00a ff87 	bl	b966 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     a58:	483a      	ldr	r0, [pc, #232]	; (b44 <thread_sensor_code+0x180>)
     a5a:	f008 fc89 	bl	9370 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     a5e:	f00c f883 	bl	cb68 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     a62:	4684      	mov	ip, r0
     a64:	014a      	lsls	r2, r1, #5
     a66:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     a6a:	0140      	lsls	r0, r0, #5
     a6c:	ebb0 030c 	subs.w	r3, r0, ip
     a70:	eb62 0201 	sbc.w	r2, r2, r1
     a74:	0092      	lsls	r2, r2, #2
     a76:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     a7a:	009b      	lsls	r3, r3, #2
     a7c:	eb13 030c 	adds.w	r3, r3, ip
     a80:	eb42 0101 	adc.w	r1, r2, r1
     a84:	00c9      	lsls	r1, r1, #3
     a86:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     a8a:	f3c3 3310 	ubfx	r3, r3, #12, #17
     a8e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     a92:	0bc9      	lsrs	r1, r1, #15

        k_sem_give(&sem_ab);

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        if (fin_time < release_time)
     a94:	42a3      	cmp	r3, r4
     a96:	eb71 0206 	sbcs.w	r2, r1, r6
     a9a:	db2b      	blt.n	af4 <thread_sensor_code+0x130>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     a9c:	3501      	adds	r5, #1
     a9e:	f00c f863 	bl	cb68 <z_impl_k_uptime_ticks>
     aa2:	4602      	mov	r2, r0
     aa4:	014b      	lsls	r3, r1, #5
     aa6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     aaa:	0140      	lsls	r0, r0, #5
     aac:	1a80      	subs	r0, r0, r2
     aae:	eb63 0301 	sbc.w	r3, r3, r1
     ab2:	009b      	lsls	r3, r3, #2
     ab4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     ab8:	0080      	lsls	r0, r0, #2
     aba:	1880      	adds	r0, r0, r2
     abc:	eb43 0301 	adc.w	r3, r3, r1
     ac0:	00db      	lsls	r3, r3, #3
     ac2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     ac6:	f3c0 3010 	ubfx	r0, r0, #12, #17
     aca:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     ace:	0bdb      	lsrs	r3, r3, #15
     ad0:	4629      	mov	r1, r5
     ad2:	481d      	ldr	r0, [pc, #116]	; (b48 <thread_sensor_code+0x184>)
     ad4:	f00a ff47 	bl	b966 <printk>
        err = adc_sample();
     ad8:	f7ff fe62 	bl	7a0 <adc_sample>
        if (err)
     adc:	4601      	mov	r1, r0
     ade:	2800      	cmp	r0, #0
     ae0:	d193      	bne.n	a0a <thread_sensor_code+0x46>
            if (adc_sample_buffer[0] > 1023)
     ae2:	4b15      	ldr	r3, [pc, #84]	; (b38 <thread_sensor_code+0x174>)
     ae4:	881f      	ldrh	r7, [r3, #0]
     ae6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     aea:	d392      	bcc.n	a12 <thread_sensor_code+0x4e>
                printk("adc reading out of range\n\r");
     aec:	4817      	ldr	r0, [pc, #92]	; (b4c <thread_sensor_code+0x188>)
     aee:	f00a ff3a 	bl	b966 <printk>
     af2:	e7b1      	b.n	a58 <thread_sensor_code+0x94>
        {
            k_msleep(release_time - fin_time);
     af4:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     afa:	17c1      	asrs	r1, r0, #31
     afc:	03c9      	lsls	r1, r1, #15
     afe:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     b02:	03c0      	lsls	r0, r0, #15
     b04:	f240 33e7 	movw	r3, #999	; 0x3e7
     b08:	18c0      	adds	r0, r0, r3
     b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b0e:	f04f 0300 	mov.w	r3, #0
     b12:	f141 0100 	adc.w	r1, r1, #0
     b16:	f7ff fcd5 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     b1a:	f009 ff09 	bl	a930 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     b1e:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     b22:	f146 0600 	adc.w	r6, r6, #0
     b26:	e7b9      	b.n	a9c <thread_sensor_code+0xd8>
     b28:	0000d2f4 	.word	0x0000d2f4
     b2c:	0000d348 	.word	0x0000d348
     b30:	3b40300c 	.word	0x3b40300c
     b34:	0000d390 	.word	0x0000d390
     b38:	200005fc 	.word	0x200005fc
     b3c:	200001dc 	.word	0x200001dc
     b40:	0000d3b4 	.word	0x0000d3b4
     b44:	20000600 	.word	0x20000600
     b48:	0000d310 	.word	0x0000d310
     b4c:	0000d374 	.word	0x0000d374

00000b50 <thread_output_code>:
        printk("Thread B set bc value to: %d \n", bc);
    }
}

void thread_output_code(void *argA, void *argB, void *argC)
{
     b50:	b570      	push	{r4, r5, r6, lr}
    /* Other variables */
    long int nact = 0;
    int ret;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     b52:	4865      	ldr	r0, [pc, #404]	; (ce8 <thread_output_code+0x198>)
     b54:	f00a ff07 	bl	b966 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     b58:	4864      	ldr	r0, [pc, #400]	; (cec <thread_output_code+0x19c>)
     b5a:	f00b ff19 	bl	c990 <z_device_is_ready>

    /* Check if device is ready */
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
     b5e:	b900      	cbnz	r0, b62 <thread_output_code+0x12>
        }

       
        
    }
}
     b60:	bd70      	pop	{r4, r5, r6, pc}
     b62:	4862      	ldr	r0, [pc, #392]	; (cec <thread_output_code+0x19c>)
     b64:	f00b ff14 	bl	c990 <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
     b68:	2800      	cmp	r0, #0
     b6a:	d0f9      	beq.n	b60 <thread_output_code+0x10>
     b6c:	485f      	ldr	r0, [pc, #380]	; (cec <thread_output_code+0x19c>)
     b6e:	f00b ff0f 	bl	c990 <z_device_is_ready>
     b72:	2800      	cmp	r0, #0
     b74:	d0f4      	beq.n	b60 <thread_output_code+0x10>
     b76:	485d      	ldr	r0, [pc, #372]	; (cec <thread_output_code+0x19c>)
     b78:	f00b ff0a 	bl	c990 <z_device_is_ready>
     b7c:	2800      	cmp	r0, #0
     b7e:	d0ef      	beq.n	b60 <thread_output_code+0x10>
    long int nact = 0;
     b80:	2400      	movs	r4, #0
     b82:	e0c8      	b.n	d16 <thread_output_code+0x1c6>
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b84:	4e5a      	ldr	r6, [pc, #360]	; (cf0 <thread_output_code+0x1a0>)
     b86:	f240 4392 	movw	r3, #1170	; 0x492
     b8a:	4632      	mov	r2, r6
     b8c:	4959      	ldr	r1, [pc, #356]	; (cf4 <thread_output_code+0x1a4>)
     b8e:	485a      	ldr	r0, [pc, #360]	; (cf8 <thread_output_code+0x1a8>)
     b90:	f00b f86e 	bl	bc70 <assert_print>
     b94:	4859      	ldr	r0, [pc, #356]	; (cfc <thread_output_code+0x1ac>)
     b96:	f00b f86b 	bl	bc70 <assert_print>
     b9a:	f240 4192 	movw	r1, #1170	; 0x492
     b9e:	4630      	mov	r0, r6
     ba0:	f00b f85f 	bl	bc62 <assert_post_action>
     ba4:	e0f2      	b.n	d8c <thread_output_code+0x23c>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
     ba6:	2500      	movs	r5, #0
     ba8:	e0f6      	b.n	d98 <thread_output_code+0x248>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     baa:	4e51      	ldr	r6, [pc, #324]	; (cf0 <thread_output_code+0x1a0>)
     bac:	f44f 638d 	mov.w	r3, #1128	; 0x468
     bb0:	4632      	mov	r2, r6
     bb2:	4950      	ldr	r1, [pc, #320]	; (cf4 <thread_output_code+0x1a4>)
     bb4:	4850      	ldr	r0, [pc, #320]	; (cf8 <thread_output_code+0x1a8>)
     bb6:	f00b f85b 	bl	bc70 <assert_print>
     bba:	4850      	ldr	r0, [pc, #320]	; (cfc <thread_output_code+0x1ac>)
     bbc:	f00b f858 	bl	bc70 <assert_print>
     bc0:	f44f 618d 	mov.w	r1, #1128	; 0x468
     bc4:	4630      	mov	r0, r6
     bc6:	f00b f84c 	bl	bc62 <assert_post_action>
     bca:	e0ec      	b.n	da6 <thread_output_code+0x256>
	const struct gpio_driver_api *api =
     bcc:	4847      	ldr	r0, [pc, #284]	; (cec <thread_output_code+0x19c>)
     bce:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     bd0:	691b      	ldr	r3, [r3, #16]
     bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     bd6:	4798      	blx	r3
     bd8:	e0ee      	b.n	db8 <thread_output_code+0x268>
                printk("SETTING LED VALUE FAILED");
     bda:	4849      	ldr	r0, [pc, #292]	; (d00 <thread_output_code+0x1b0>)
     bdc:	f00a fec3 	bl	b966 <printk>
     be0:	e0ed      	b.n	dbe <thread_output_code+0x26e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     be2:	4e43      	ldr	r6, [pc, #268]	; (cf0 <thread_output_code+0x1a0>)
     be4:	f240 4392 	movw	r3, #1170	; 0x492
     be8:	4632      	mov	r2, r6
     bea:	4942      	ldr	r1, [pc, #264]	; (cf4 <thread_output_code+0x1a4>)
     bec:	4842      	ldr	r0, [pc, #264]	; (cf8 <thread_output_code+0x1a8>)
     bee:	f00b f83f 	bl	bc70 <assert_print>
     bf2:	4842      	ldr	r0, [pc, #264]	; (cfc <thread_output_code+0x1ac>)
     bf4:	f00b f83c 	bl	bc70 <assert_print>
     bf8:	f240 4192 	movw	r1, #1170	; 0x492
     bfc:	4630      	mov	r0, r6
     bfe:	f00b f830 	bl	bc62 <assert_post_action>
     c02:	e0e4      	b.n	dce <thread_output_code+0x27e>
		value = (value != 0) ? 0 : 1;
     c04:	2500      	movs	r5, #0
     c06:	e0e8      	b.n	dda <thread_output_code+0x28a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c08:	4e39      	ldr	r6, [pc, #228]	; (cf0 <thread_output_code+0x1a0>)
     c0a:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c0e:	4632      	mov	r2, r6
     c10:	4938      	ldr	r1, [pc, #224]	; (cf4 <thread_output_code+0x1a4>)
     c12:	4839      	ldr	r0, [pc, #228]	; (cf8 <thread_output_code+0x1a8>)
     c14:	f00b f82c 	bl	bc70 <assert_print>
     c18:	4838      	ldr	r0, [pc, #224]	; (cfc <thread_output_code+0x1ac>)
     c1a:	f00b f829 	bl	bc70 <assert_print>
     c1e:	f44f 618d 	mov.w	r1, #1128	; 0x468
     c22:	4630      	mov	r0, r6
     c24:	f00b f81d 	bl	bc62 <assert_post_action>
     c28:	e0de      	b.n	de8 <thread_output_code+0x298>
	const struct gpio_driver_api *api =
     c2a:	4830      	ldr	r0, [pc, #192]	; (cec <thread_output_code+0x19c>)
     c2c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     c2e:	691b      	ldr	r3, [r3, #16]
     c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c34:	4798      	blx	r3
     c36:	e0e0      	b.n	dfa <thread_output_code+0x2aa>
                printk("SETTING LED VALUE FAILED");
     c38:	4831      	ldr	r0, [pc, #196]	; (d00 <thread_output_code+0x1b0>)
     c3a:	f00a fe94 	bl	b966 <printk>
     c3e:	e0df      	b.n	e00 <thread_output_code+0x2b0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c40:	4e2b      	ldr	r6, [pc, #172]	; (cf0 <thread_output_code+0x1a0>)
     c42:	f240 4392 	movw	r3, #1170	; 0x492
     c46:	4632      	mov	r2, r6
     c48:	492a      	ldr	r1, [pc, #168]	; (cf4 <thread_output_code+0x1a4>)
     c4a:	482b      	ldr	r0, [pc, #172]	; (cf8 <thread_output_code+0x1a8>)
     c4c:	f00b f810 	bl	bc70 <assert_print>
     c50:	482a      	ldr	r0, [pc, #168]	; (cfc <thread_output_code+0x1ac>)
     c52:	f00b f80d 	bl	bc70 <assert_print>
     c56:	f240 4192 	movw	r1, #1170	; 0x492
     c5a:	4630      	mov	r0, r6
     c5c:	f00b f801 	bl	bc62 <assert_post_action>
     c60:	e0d6      	b.n	e10 <thread_output_code+0x2c0>
		value = (value != 0) ? 0 : 1;
     c62:	2500      	movs	r5, #0
     c64:	e0da      	b.n	e1c <thread_output_code+0x2cc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c66:	4e22      	ldr	r6, [pc, #136]	; (cf0 <thread_output_code+0x1a0>)
     c68:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c6c:	4632      	mov	r2, r6
     c6e:	4921      	ldr	r1, [pc, #132]	; (cf4 <thread_output_code+0x1a4>)
     c70:	4821      	ldr	r0, [pc, #132]	; (cf8 <thread_output_code+0x1a8>)
     c72:	f00a fffd 	bl	bc70 <assert_print>
     c76:	4821      	ldr	r0, [pc, #132]	; (cfc <thread_output_code+0x1ac>)
     c78:	f00a fffa 	bl	bc70 <assert_print>
     c7c:	f44f 618d 	mov.w	r1, #1128	; 0x468
     c80:	4630      	mov	r0, r6
     c82:	f00a ffee 	bl	bc62 <assert_post_action>
     c86:	e0d0      	b.n	e2a <thread_output_code+0x2da>
	const struct gpio_driver_api *api =
     c88:	4818      	ldr	r0, [pc, #96]	; (cec <thread_output_code+0x19c>)
     c8a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     c8c:	691b      	ldr	r3, [r3, #16]
     c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     c92:	4798      	blx	r3
     c94:	e0d2      	b.n	e3c <thread_output_code+0x2ec>
                printk("SETTING LED VALUE FAILED");
     c96:	481a      	ldr	r0, [pc, #104]	; (d00 <thread_output_code+0x1b0>)
     c98:	f00a fe65 	bl	b966 <printk>
     c9c:	e0d1      	b.n	e42 <thread_output_code+0x2f2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c9e:	4e14      	ldr	r6, [pc, #80]	; (cf0 <thread_output_code+0x1a0>)
     ca0:	f240 4392 	movw	r3, #1170	; 0x492
     ca4:	4632      	mov	r2, r6
     ca6:	4913      	ldr	r1, [pc, #76]	; (cf4 <thread_output_code+0x1a4>)
     ca8:	4813      	ldr	r0, [pc, #76]	; (cf8 <thread_output_code+0x1a8>)
     caa:	f00a ffe1 	bl	bc70 <assert_print>
     cae:	4813      	ldr	r0, [pc, #76]	; (cfc <thread_output_code+0x1ac>)
     cb0:	f00a ffde 	bl	bc70 <assert_print>
     cb4:	f240 4192 	movw	r1, #1170	; 0x492
     cb8:	4630      	mov	r0, r6
     cba:	f00a ffd2 	bl	bc62 <assert_post_action>
     cbe:	e0c8      	b.n	e52 <thread_output_code+0x302>
		value = (value != 0) ? 0 : 1;
     cc0:	2500      	movs	r5, #0
     cc2:	e0cc      	b.n	e5e <thread_output_code+0x30e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     cc4:	4e0a      	ldr	r6, [pc, #40]	; (cf0 <thread_output_code+0x1a0>)
     cc6:	f44f 638d 	mov.w	r3, #1128	; 0x468
     cca:	4632      	mov	r2, r6
     ccc:	4909      	ldr	r1, [pc, #36]	; (cf4 <thread_output_code+0x1a4>)
     cce:	480a      	ldr	r0, [pc, #40]	; (cf8 <thread_output_code+0x1a8>)
     cd0:	f00a ffce 	bl	bc70 <assert_print>
     cd4:	4809      	ldr	r0, [pc, #36]	; (cfc <thread_output_code+0x1ac>)
     cd6:	f00a ffcb 	bl	bc70 <assert_print>
     cda:	f44f 618d 	mov.w	r1, #1128	; 0x468
     cde:	4630      	mov	r0, r6
     ce0:	f00a ffbf 	bl	bc62 <assert_post_action>
     ce4:	e0c2      	b.n	e6c <thread_output_code+0x31c>
     ce6:	bf00      	nop
     ce8:	0000d3d4 	.word	0x0000d3d4
     cec:	0000cc78 	.word	0x0000cc78
     cf0:	0000cf98 	.word	0x0000cf98
     cf4:	0000d2a0 	.word	0x0000d2a0
     cf8:	0000d02c 	.word	0x0000d02c
     cfc:	0000d2e0 	.word	0x0000d2e0
     d00:	0000d46c 	.word	0x0000d46c
	const struct gpio_driver_api *api =
     d04:	48a9      	ldr	r0, [pc, #676]	; (fac <thread_output_code+0x45c>)
     d06:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     d08:	691b      	ldr	r3, [r3, #16]
     d0a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     d0e:	4798      	blx	r3
            if (ret < 0)
     d10:	2800      	cmp	r0, #0
     d12:	f2c0 80b5 	blt.w	e80 <thread_output_code+0x330>
	return z_impl_k_sem_take(sem, timeout);
     d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d1e:	48a4      	ldr	r0, [pc, #656]	; (fb0 <thread_output_code+0x460>)
     d20:	f008 fb6a 	bl	93f8 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     d24:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
     d26:	f00b ff1f 	bl	cb68 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     d2a:	4602      	mov	r2, r0
     d2c:	014b      	lsls	r3, r1, #5
     d2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     d32:	0140      	lsls	r0, r0, #5
     d34:	1a80      	subs	r0, r0, r2
     d36:	eb63 0301 	sbc.w	r3, r3, r1
     d3a:	009b      	lsls	r3, r3, #2
     d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     d40:	0080      	lsls	r0, r0, #2
     d42:	1880      	adds	r0, r0, r2
     d44:	eb43 0301 	adc.w	r3, r3, r1
     d48:	00db      	lsls	r3, r3, #3
     d4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     d4e:	f3c0 3010 	ubfx	r0, r0, #12, #17
     d52:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     d56:	0bdb      	lsrs	r3, r3, #15
     d58:	4621      	mov	r1, r4
     d5a:	4896      	ldr	r0, [pc, #600]	; (fb4 <thread_output_code+0x464>)
     d5c:	f00a fe03 	bl	b966 <printk>
        printk("Task C read bc value: %d\n", bc);
     d60:	4d95      	ldr	r5, [pc, #596]	; (fb8 <thread_output_code+0x468>)
     d62:	8829      	ldrh	r1, [r5, #0]
     d64:	4895      	ldr	r0, [pc, #596]	; (fbc <thread_output_code+0x46c>)
     d66:	f00a fdfe 	bl	b966 <printk>
        printk("\t%d\n",bc);
     d6a:	8829      	ldrh	r1, [r5, #0]
     d6c:	4894      	ldr	r0, [pc, #592]	; (fc0 <thread_output_code+0x470>)
     d6e:	f00a fdfa 	bl	b966 <printk>
        if (bc < 1000)
     d72:	882b      	ldrh	r3, [r5, #0]
     d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     d78:	f080 8086 	bcs.w	e88 <thread_output_code+0x338>
	const struct gpio_driver_config *const cfg =
     d7c:	4b8b      	ldr	r3, [pc, #556]	; (fac <thread_output_code+0x45c>)
     d7e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     d80:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d82:	6813      	ldr	r3, [r2, #0]
     d84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     d88:	f43f aefc 	beq.w	b84 <thread_output_code+0x34>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     d8c:	682b      	ldr	r3, [r5, #0]
     d8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     d92:	f47f af08 	bne.w	ba6 <thread_output_code+0x56>
     d96:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     d98:	4b84      	ldr	r3, [pc, #528]	; (fac <thread_output_code+0x45c>)
     d9a:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     da2:	f43f af02 	beq.w	baa <thread_output_code+0x5a>
	if (value != 0)	{
     da6:	2d00      	cmp	r5, #0
     da8:	f43f af10 	beq.w	bcc <thread_output_code+0x7c>
	const struct gpio_driver_api *api =
     dac:	487f      	ldr	r0, [pc, #508]	; (fac <thread_output_code+0x45c>)
     dae:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     db0:	68db      	ldr	r3, [r3, #12]
     db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     db6:	4798      	blx	r3
            if (ret < 0)
     db8:	2800      	cmp	r0, #0
     dba:	f6ff af0e 	blt.w	bda <thread_output_code+0x8a>
	const struct gpio_driver_config *const cfg =
     dbe:	4b7b      	ldr	r3, [pc, #492]	; (fac <thread_output_code+0x45c>)
     dc0:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     dc2:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dc4:	6813      	ldr	r3, [r2, #0]
     dc6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     dca:	f43f af0a 	beq.w	be2 <thread_output_code+0x92>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     dce:	682b      	ldr	r3, [r5, #0]
     dd0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     dd4:	f47f af16 	bne.w	c04 <thread_output_code+0xb4>
     dd8:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     dda:	4b74      	ldr	r3, [pc, #464]	; (fac <thread_output_code+0x45c>)
     ddc:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     de4:	f43f af10 	beq.w	c08 <thread_output_code+0xb8>
	if (value != 0)	{
     de8:	2d00      	cmp	r5, #0
     dea:	f43f af1e 	beq.w	c2a <thread_output_code+0xda>
	const struct gpio_driver_api *api =
     dee:	486f      	ldr	r0, [pc, #444]	; (fac <thread_output_code+0x45c>)
     df0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     df2:	68db      	ldr	r3, [r3, #12]
     df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     df8:	4798      	blx	r3
            if (ret < 0)
     dfa:	2800      	cmp	r0, #0
     dfc:	f6ff af1c 	blt.w	c38 <thread_output_code+0xe8>
	const struct gpio_driver_config *const cfg =
     e00:	4b6a      	ldr	r3, [pc, #424]	; (fac <thread_output_code+0x45c>)
     e02:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e04:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e06:	6813      	ldr	r3, [r2, #0]
     e08:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     e0c:	f43f af18 	beq.w	c40 <thread_output_code+0xf0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e10:	682b      	ldr	r3, [r5, #0]
     e12:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     e16:	f47f af24 	bne.w	c62 <thread_output_code+0x112>
     e1a:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     e1c:	4b63      	ldr	r3, [pc, #396]	; (fac <thread_output_code+0x45c>)
     e1e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     e26:	f43f af1e 	beq.w	c66 <thread_output_code+0x116>
	if (value != 0)	{
     e2a:	2d00      	cmp	r5, #0
     e2c:	f43f af2c 	beq.w	c88 <thread_output_code+0x138>
	const struct gpio_driver_api *api =
     e30:	485e      	ldr	r0, [pc, #376]	; (fac <thread_output_code+0x45c>)
     e32:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     e34:	68db      	ldr	r3, [r3, #12]
     e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     e3a:	4798      	blx	r3
            if (ret < 0)
     e3c:	2800      	cmp	r0, #0
     e3e:	f6ff af2a 	blt.w	c96 <thread_output_code+0x146>
	const struct gpio_driver_config *const cfg =
     e42:	4b5a      	ldr	r3, [pc, #360]	; (fac <thread_output_code+0x45c>)
     e44:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e46:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e48:	6813      	ldr	r3, [r2, #0]
     e4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e4e:	f43f af26 	beq.w	c9e <thread_output_code+0x14e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e52:	682b      	ldr	r3, [r5, #0]
     e54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e58:	f47f af32 	bne.w	cc0 <thread_output_code+0x170>
     e5c:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     e5e:	4b53      	ldr	r3, [pc, #332]	; (fac <thread_output_code+0x45c>)
     e60:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e68:	f43f af2c 	beq.w	cc4 <thread_output_code+0x174>
	if (value != 0)	{
     e6c:	2d00      	cmp	r5, #0
     e6e:	f43f af49 	beq.w	d04 <thread_output_code+0x1b4>
	const struct gpio_driver_api *api =
     e72:	484e      	ldr	r0, [pc, #312]	; (fac <thread_output_code+0x45c>)
     e74:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     e76:	68db      	ldr	r3, [r3, #12]
     e78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e7c:	4798      	blx	r3
     e7e:	e747      	b.n	d10 <thread_output_code+0x1c0>
                printk("SETTING LED VALUE FAILED");
     e80:	4850      	ldr	r0, [pc, #320]	; (fc4 <thread_output_code+0x474>)
     e82:	f00a fd70 	bl	b966 <printk>
     e86:	e746      	b.n	d16 <thread_output_code+0x1c6>
        else if (bc < 2000)
     e88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     e8c:	f0c0 809c 	bcc.w	fc8 <thread_output_code+0x478>
        else if (bc < 3000)
     e90:	f640 32b7 	movw	r2, #2999	; 0xbb7
     e94:	4293      	cmp	r3, r2
     e96:	f200 829b 	bhi.w	13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>
	const struct gpio_driver_config *const cfg =
     e9a:	4b44      	ldr	r3, [pc, #272]	; (fac <thread_output_code+0x45c>)
     e9c:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e9e:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ea0:	6813      	ldr	r3, [r2, #0]
     ea2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     ea6:	f000 81ce 	beq.w	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     eaa:	682b      	ldr	r3, [r5, #0]
     eac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     eb0:	f040 81da 	bne.w	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
     eb4:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     eb6:	4b3d      	ldr	r3, [pc, #244]	; (fac <thread_output_code+0x45c>)
     eb8:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     ec0:	f000 81d4 	beq.w	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
	if (value != 0)	{
     ec4:	2d00      	cmp	r5, #0
     ec6:	f000 81ef 	beq.w	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
	const struct gpio_driver_api *api =
     eca:	4838      	ldr	r0, [pc, #224]	; (fac <thread_output_code+0x45c>)
     ecc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ece:	68db      	ldr	r3, [r3, #12]
     ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ed4:	4798      	blx	r3
            if (ret < 0)
     ed6:	2800      	cmp	r0, #0
     ed8:	f2c0 81ed 	blt.w	12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
	const struct gpio_driver_config *const cfg =
     edc:	4b33      	ldr	r3, [pc, #204]	; (fac <thread_output_code+0x45c>)
     ede:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     ee0:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ee2:	6813      	ldr	r3, [r2, #0]
     ee4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ee8:	f000 81e9 	beq.w	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     eec:	682b      	ldr	r3, [r5, #0]
     eee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ef2:	f040 81f5 	bne.w	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
     ef6:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     ef8:	4b2c      	ldr	r3, [pc, #176]	; (fac <thread_output_code+0x45c>)
     efa:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     f02:	f000 81ef 	beq.w	12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>
	if (value != 0)	{
     f06:	2d00      	cmp	r5, #0
     f08:	f000 81fd 	beq.w	1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
	const struct gpio_driver_api *api =
     f0c:	4827      	ldr	r0, [pc, #156]	; (fac <thread_output_code+0x45c>)
     f0e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f10:	68db      	ldr	r3, [r3, #12]
     f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     f16:	4798      	blx	r3
            if (ret < 0)
     f18:	2800      	cmp	r0, #0
     f1a:	f2c0 81fb 	blt.w	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
	const struct gpio_driver_config *const cfg =
     f1e:	4b23      	ldr	r3, [pc, #140]	; (fac <thread_output_code+0x45c>)
     f20:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     f22:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f24:	6813      	ldr	r3, [r2, #0]
     f26:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f2a:	f000 81f7 	beq.w	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f2e:	682b      	ldr	r3, [r5, #0]
     f30:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f34:	f040 8203 	bne.w	133e <CONFIG_FPROTECT_BLOCK_SIZE+0x33e>
     f38:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
     f3a:	4b1c      	ldr	r3, [pc, #112]	; (fac <thread_output_code+0x45c>)
     f3c:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f44:	f000 81fd 	beq.w	1342 <CONFIG_FPROTECT_BLOCK_SIZE+0x342>
	if (value != 0)	{
     f48:	2d00      	cmp	r5, #0
     f4a:	f000 820b 	beq.w	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
	const struct gpio_driver_api *api =
     f4e:	4817      	ldr	r0, [pc, #92]	; (fac <thread_output_code+0x45c>)
     f50:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f52:	68db      	ldr	r3, [r3, #12]
     f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     f58:	4798      	blx	r3
            if (ret < 0)
     f5a:	2800      	cmp	r0, #0
     f5c:	f2c0 8209 	blt.w	1372 <CONFIG_FPROTECT_BLOCK_SIZE+0x372>
	const struct gpio_driver_config *const cfg =
     f60:	4b12      	ldr	r3, [pc, #72]	; (fac <thread_output_code+0x45c>)
     f62:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     f64:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f66:	6813      	ldr	r3, [r2, #0]
     f68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f6c:	f000 8205 	beq.w	137a <CONFIG_FPROTECT_BLOCK_SIZE+0x37a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f70:	682b      	ldr	r3, [r5, #0]
     f72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f76:	f040 8211 	bne.w	139c <CONFIG_FPROTECT_BLOCK_SIZE+0x39c>
     f7a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <thread_output_code+0x45c>)
     f7e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f86:	f000 820b 	beq.w	13a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a0>
	if (value != 0)	{
     f8a:	2d00      	cmp	r5, #0
     f8c:	f000 8219 	beq.w	13c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c2>
	const struct gpio_driver_api *api =
     f90:	4806      	ldr	r0, [pc, #24]	; (fac <thread_output_code+0x45c>)
     f92:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f94:	68db      	ldr	r3, [r3, #12]
     f96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     f9a:	4798      	blx	r3
            if (ret < 0)
     f9c:	2800      	cmp	r0, #0
     f9e:	f6bf aeba 	bge.w	d16 <thread_output_code+0x1c6>
                printk("SETTING LED VALUE FAILED");
     fa2:	4808      	ldr	r0, [pc, #32]	; (fc4 <thread_output_code+0x474>)
     fa4:	f00a fcdf 	bl	b966 <printk>
     fa8:	e6b5      	b.n	d16 <thread_output_code+0x1c6>
     faa:	bf00      	nop
     fac:	0000cc78 	.word	0x0000cc78
     fb0:	20000610 	.word	0x20000610
     fb4:	0000d410 	.word	0x0000d410
     fb8:	200001de 	.word	0x200001de
     fbc:	0000d448 	.word	0x0000d448
     fc0:	0000d464 	.word	0x0000d464
     fc4:	0000d46c 	.word	0x0000d46c
	const struct gpio_driver_config *const cfg =
     fc8:	4bb1      	ldr	r3, [pc, #708]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     fca:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     fcc:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fce:	6813      	ldr	r3, [r2, #0]
     fd0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fd4:	d07f      	beq.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     fd6:	682b      	ldr	r3, [r5, #0]
     fd8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fdc:	f040 808c 	bne.w	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
     fe0:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
     fe2:	4bab      	ldr	r3, [pc, #684]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     fe4:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     fec:	f000 8086 	beq.w	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
	if (value != 0)	{
     ff0:	2d00      	cmp	r5, #0
     ff2:	f000 8094 	beq.w	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
	const struct gpio_driver_api *api =
     ff6:	48a6      	ldr	r0, [pc, #664]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
     ff8:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ffa:	68db      	ldr	r3, [r3, #12]
     ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1000:	4798      	blx	r3
            if (ret < 0)
    1002:	2800      	cmp	r0, #0
    1004:	f2c0 8092 	blt.w	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
	const struct gpio_driver_config *const cfg =
    1008:	4ba1      	ldr	r3, [pc, #644]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    100a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    100c:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    100e:	6813      	ldr	r3, [r2, #0]
    1010:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1014:	f000 808e 	beq.w	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1018:	682b      	ldr	r3, [r5, #0]
    101a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    101e:	f040 809a 	bne.w	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
    1022:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1024:	4b9a      	ldr	r3, [pc, #616]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    1026:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    102e:	f000 8094 	beq.w	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
	if (value != 0)	{
    1032:	2d00      	cmp	r5, #0
    1034:	f000 80a2 	beq.w	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
	const struct gpio_driver_api *api =
    1038:	4895      	ldr	r0, [pc, #596]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    103a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    103c:	68db      	ldr	r3, [r3, #12]
    103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1042:	4798      	blx	r3
            if (ret < 0)
    1044:	2800      	cmp	r0, #0
    1046:	f2c0 80a0 	blt.w	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
	const struct gpio_driver_config *const cfg =
    104a:	4b91      	ldr	r3, [pc, #580]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    104c:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    104e:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1050:	6813      	ldr	r3, [r2, #0]
    1052:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1056:	f000 809c 	beq.w	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    105a:	682b      	ldr	r3, [r5, #0]
    105c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1060:	f040 80a8 	bne.w	11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
    1064:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1066:	4b8a      	ldr	r3, [pc, #552]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    1068:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1070:	f000 80a2 	beq.w	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
	if (value != 0)	{
    1074:	2d00      	cmp	r5, #0
    1076:	f000 80b0 	beq.w	11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
	const struct gpio_driver_api *api =
    107a:	4885      	ldr	r0, [pc, #532]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    107c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    107e:	68db      	ldr	r3, [r3, #12]
    1080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1084:	4798      	blx	r3
            if (ret < 0)
    1086:	2800      	cmp	r0, #0
    1088:	f2c0 80ae 	blt.w	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
	const struct gpio_driver_config *const cfg =
    108c:	4b80      	ldr	r3, [pc, #512]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    108e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1090:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1092:	6813      	ldr	r3, [r2, #0]
    1094:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1098:	f000 80aa 	beq.w	11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    109c:	682b      	ldr	r3, [r5, #0]
    109e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    10a2:	f040 80b6 	bne.w	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
    10a6:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    10a8:	4b79      	ldr	r3, [pc, #484]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    10aa:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    10b2:	f000 80b0 	beq.w	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
	if (value != 0)	{
    10b6:	2d00      	cmp	r5, #0
    10b8:	f000 80be 	beq.w	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
	const struct gpio_driver_api *api =
    10bc:	4874      	ldr	r0, [pc, #464]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    10be:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    10c0:	68db      	ldr	r3, [r3, #12]
    10c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    10c6:	4798      	blx	r3
            if (ret < 0)
    10c8:	2800      	cmp	r0, #0
    10ca:	f6bf ae24 	bge.w	d16 <thread_output_code+0x1c6>
                printk("SETTING LED VALUE FAILED");
    10ce:	4871      	ldr	r0, [pc, #452]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    10d0:	f00a fc49 	bl	b966 <printk>
    10d4:	e61f      	b.n	d16 <thread_output_code+0x1c6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10d6:	4e70      	ldr	r6, [pc, #448]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    10d8:	f240 4392 	movw	r3, #1170	; 0x492
    10dc:	4632      	mov	r2, r6
    10de:	496f      	ldr	r1, [pc, #444]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    10e0:	486f      	ldr	r0, [pc, #444]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    10e2:	f00a fdc5 	bl	bc70 <assert_print>
    10e6:	486f      	ldr	r0, [pc, #444]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    10e8:	f00a fdc2 	bl	bc70 <assert_print>
    10ec:	f240 4192 	movw	r1, #1170	; 0x492
    10f0:	4630      	mov	r0, r6
    10f2:	f00a fdb6 	bl	bc62 <assert_post_action>
    10f6:	e76e      	b.n	fd6 <thread_output_code+0x486>
		value = (value != 0) ? 0 : 1;
    10f8:	2500      	movs	r5, #0
    10fa:	e772      	b.n	fe2 <thread_output_code+0x492>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10fc:	4e66      	ldr	r6, [pc, #408]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    10fe:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1102:	4632      	mov	r2, r6
    1104:	4965      	ldr	r1, [pc, #404]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    1106:	4866      	ldr	r0, [pc, #408]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1108:	f00a fdb2 	bl	bc70 <assert_print>
    110c:	4865      	ldr	r0, [pc, #404]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    110e:	f00a fdaf 	bl	bc70 <assert_print>
    1112:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1116:	4630      	mov	r0, r6
    1118:	f00a fda3 	bl	bc62 <assert_post_action>
    111c:	e768      	b.n	ff0 <thread_output_code+0x4a0>
	const struct gpio_driver_api *api =
    111e:	485c      	ldr	r0, [pc, #368]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    1120:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1122:	691b      	ldr	r3, [r3, #16]
    1124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1128:	4798      	blx	r3
    112a:	e76a      	b.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
                printk("SETTING LED VALUE FAILED");
    112c:	4859      	ldr	r0, [pc, #356]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    112e:	f00a fc1a 	bl	b966 <printk>
    1132:	e769      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1134:	4e58      	ldr	r6, [pc, #352]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1136:	f240 4392 	movw	r3, #1170	; 0x492
    113a:	4632      	mov	r2, r6
    113c:	4957      	ldr	r1, [pc, #348]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    113e:	4858      	ldr	r0, [pc, #352]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1140:	f00a fd96 	bl	bc70 <assert_print>
    1144:	4857      	ldr	r0, [pc, #348]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1146:	f00a fd93 	bl	bc70 <assert_print>
    114a:	f240 4192 	movw	r1, #1170	; 0x492
    114e:	4630      	mov	r0, r6
    1150:	f00a fd87 	bl	bc62 <assert_post_action>
    1154:	e760      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		value = (value != 0) ? 0 : 1;
    1156:	2500      	movs	r5, #0
    1158:	e764      	b.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    115a:	4e4f      	ldr	r6, [pc, #316]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    115c:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1160:	4632      	mov	r2, r6
    1162:	494e      	ldr	r1, [pc, #312]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    1164:	484e      	ldr	r0, [pc, #312]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1166:	f00a fd83 	bl	bc70 <assert_print>
    116a:	484e      	ldr	r0, [pc, #312]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    116c:	f00a fd80 	bl	bc70 <assert_print>
    1170:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1174:	4630      	mov	r0, r6
    1176:	f00a fd74 	bl	bc62 <assert_post_action>
    117a:	e75a      	b.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
	const struct gpio_driver_api *api =
    117c:	4844      	ldr	r0, [pc, #272]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    117e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1180:	691b      	ldr	r3, [r3, #16]
    1182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1186:	4798      	blx	r3
    1188:	e75c      	b.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
                printk("SETTING LED VALUE FAILED");
    118a:	4842      	ldr	r0, [pc, #264]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    118c:	f00a fbeb 	bl	b966 <printk>
    1190:	e75b      	b.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1192:	4e41      	ldr	r6, [pc, #260]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1194:	f240 4392 	movw	r3, #1170	; 0x492
    1198:	4632      	mov	r2, r6
    119a:	4940      	ldr	r1, [pc, #256]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    119c:	4840      	ldr	r0, [pc, #256]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    119e:	f00a fd67 	bl	bc70 <assert_print>
    11a2:	4840      	ldr	r0, [pc, #256]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    11a4:	f00a fd64 	bl	bc70 <assert_print>
    11a8:	f240 4192 	movw	r1, #1170	; 0x492
    11ac:	4630      	mov	r0, r6
    11ae:	f00a fd58 	bl	bc62 <assert_post_action>
    11b2:	e752      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
		value = (value != 0) ? 0 : 1;
    11b4:	2500      	movs	r5, #0
    11b6:	e756      	b.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11b8:	4e37      	ldr	r6, [pc, #220]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    11ba:	f44f 638d 	mov.w	r3, #1128	; 0x468
    11be:	4632      	mov	r2, r6
    11c0:	4936      	ldr	r1, [pc, #216]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    11c2:	4837      	ldr	r0, [pc, #220]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    11c4:	f00a fd54 	bl	bc70 <assert_print>
    11c8:	4836      	ldr	r0, [pc, #216]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    11ca:	f00a fd51 	bl	bc70 <assert_print>
    11ce:	f44f 618d 	mov.w	r1, #1128	; 0x468
    11d2:	4630      	mov	r0, r6
    11d4:	f00a fd45 	bl	bc62 <assert_post_action>
    11d8:	e74c      	b.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
	const struct gpio_driver_api *api =
    11da:	482d      	ldr	r0, [pc, #180]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    11dc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    11de:	691b      	ldr	r3, [r3, #16]
    11e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    11e4:	4798      	blx	r3
    11e6:	e74e      	b.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
                printk("SETTING LED VALUE FAILED");
    11e8:	482a      	ldr	r0, [pc, #168]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    11ea:	f00a fbbc 	bl	b966 <printk>
    11ee:	e74d      	b.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11f0:	4e29      	ldr	r6, [pc, #164]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    11f2:	f240 4392 	movw	r3, #1170	; 0x492
    11f6:	4632      	mov	r2, r6
    11f8:	4928      	ldr	r1, [pc, #160]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    11fa:	4829      	ldr	r0, [pc, #164]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    11fc:	f00a fd38 	bl	bc70 <assert_print>
    1200:	4828      	ldr	r0, [pc, #160]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1202:	f00a fd35 	bl	bc70 <assert_print>
    1206:	f240 4192 	movw	r1, #1170	; 0x492
    120a:	4630      	mov	r0, r6
    120c:	f00a fd29 	bl	bc62 <assert_post_action>
    1210:	e744      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
		value = (value != 0) ? 0 : 1;
    1212:	2501      	movs	r5, #1
    1214:	e748      	b.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1216:	4e20      	ldr	r6, [pc, #128]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1218:	f44f 638d 	mov.w	r3, #1128	; 0x468
    121c:	4632      	mov	r2, r6
    121e:	491f      	ldr	r1, [pc, #124]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    1220:	481f      	ldr	r0, [pc, #124]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1222:	f00a fd25 	bl	bc70 <assert_print>
    1226:	481f      	ldr	r0, [pc, #124]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1228:	f00a fd22 	bl	bc70 <assert_print>
    122c:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1230:	4630      	mov	r0, r6
    1232:	f00a fd16 	bl	bc62 <assert_post_action>
    1236:	e73e      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
	const struct gpio_driver_api *api =
    1238:	4815      	ldr	r0, [pc, #84]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    123a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    123c:	691b      	ldr	r3, [r3, #16]
    123e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1242:	4798      	blx	r3
    1244:	e740      	b.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1246:	4e14      	ldr	r6, [pc, #80]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1248:	f240 4392 	movw	r3, #1170	; 0x492
    124c:	4632      	mov	r2, r6
    124e:	4913      	ldr	r1, [pc, #76]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    1250:	4813      	ldr	r0, [pc, #76]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1252:	f00a fd0d 	bl	bc70 <assert_print>
    1256:	4813      	ldr	r0, [pc, #76]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1258:	f00a fd0a 	bl	bc70 <assert_print>
    125c:	f240 4192 	movw	r1, #1170	; 0x492
    1260:	4630      	mov	r0, r6
    1262:	f00a fcfe 	bl	bc62 <assert_post_action>
    1266:	e620      	b.n	eaa <thread_output_code+0x35a>
		value = (value != 0) ? 0 : 1;
    1268:	2500      	movs	r5, #0
    126a:	e624      	b.n	eb6 <thread_output_code+0x366>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    126c:	4e0a      	ldr	r6, [pc, #40]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    126e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1272:	4632      	mov	r2, r6
    1274:	4909      	ldr	r1, [pc, #36]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    1276:	480a      	ldr	r0, [pc, #40]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1278:	f00a fcfa 	bl	bc70 <assert_print>
    127c:	4809      	ldr	r0, [pc, #36]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    127e:	f00a fcf7 	bl	bc70 <assert_print>
    1282:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1286:	4630      	mov	r0, r6
    1288:	f00a fceb 	bl	bc62 <assert_post_action>
    128c:	e61a      	b.n	ec4 <thread_output_code+0x374>
    128e:	bf00      	nop
    1290:	0000cc78 	.word	0x0000cc78
    1294:	0000d46c 	.word	0x0000d46c
    1298:	0000cf98 	.word	0x0000cf98
    129c:	0000d2a0 	.word	0x0000d2a0
    12a0:	0000d02c 	.word	0x0000d02c
    12a4:	0000d2e0 	.word	0x0000d2e0
	const struct gpio_driver_api *api =
    12a8:	48ae      	ldr	r0, [pc, #696]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    12aa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    12ac:	691b      	ldr	r3, [r3, #16]
    12ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    12b2:	4798      	blx	r3
    12b4:	e60f      	b.n	ed6 <thread_output_code+0x386>
                printk("SETTING LED VALUE FAILED");
    12b6:	48ac      	ldr	r0, [pc, #688]	; (1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>)
    12b8:	f00a fb55 	bl	b966 <printk>
    12bc:	e60e      	b.n	edc <thread_output_code+0x38c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12be:	4eab      	ldr	r6, [pc, #684]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    12c0:	f240 4392 	movw	r3, #1170	; 0x492
    12c4:	4632      	mov	r2, r6
    12c6:	49aa      	ldr	r1, [pc, #680]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    12c8:	48aa      	ldr	r0, [pc, #680]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    12ca:	f00a fcd1 	bl	bc70 <assert_print>
    12ce:	48aa      	ldr	r0, [pc, #680]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    12d0:	f00a fcce 	bl	bc70 <assert_print>
    12d4:	f240 4192 	movw	r1, #1170	; 0x492
    12d8:	4630      	mov	r0, r6
    12da:	f00a fcc2 	bl	bc62 <assert_post_action>
    12de:	e605      	b.n	eec <thread_output_code+0x39c>
		value = (value != 0) ? 0 : 1;
    12e0:	2500      	movs	r5, #0
    12e2:	e609      	b.n	ef8 <thread_output_code+0x3a8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12e4:	4ea1      	ldr	r6, [pc, #644]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    12e6:	f44f 638d 	mov.w	r3, #1128	; 0x468
    12ea:	4632      	mov	r2, r6
    12ec:	49a0      	ldr	r1, [pc, #640]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    12ee:	48a1      	ldr	r0, [pc, #644]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    12f0:	f00a fcbe 	bl	bc70 <assert_print>
    12f4:	48a0      	ldr	r0, [pc, #640]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    12f6:	f00a fcbb 	bl	bc70 <assert_print>
    12fa:	f44f 618d 	mov.w	r1, #1128	; 0x468
    12fe:	4630      	mov	r0, r6
    1300:	f00a fcaf 	bl	bc62 <assert_post_action>
    1304:	e5ff      	b.n	f06 <thread_output_code+0x3b6>
	const struct gpio_driver_api *api =
    1306:	4897      	ldr	r0, [pc, #604]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1308:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    130a:	691b      	ldr	r3, [r3, #16]
    130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1310:	4798      	blx	r3
    1312:	e601      	b.n	f18 <thread_output_code+0x3c8>
                printk("SETTING LED VALUE FAILED");
    1314:	4894      	ldr	r0, [pc, #592]	; (1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>)
    1316:	f00a fb26 	bl	b966 <printk>
    131a:	e600      	b.n	f1e <thread_output_code+0x3ce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    131c:	4e93      	ldr	r6, [pc, #588]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    131e:	f240 4392 	movw	r3, #1170	; 0x492
    1322:	4632      	mov	r2, r6
    1324:	4992      	ldr	r1, [pc, #584]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    1326:	4893      	ldr	r0, [pc, #588]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    1328:	f00a fca2 	bl	bc70 <assert_print>
    132c:	4892      	ldr	r0, [pc, #584]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    132e:	f00a fc9f 	bl	bc70 <assert_print>
    1332:	f240 4192 	movw	r1, #1170	; 0x492
    1336:	4630      	mov	r0, r6
    1338:	f00a fc93 	bl	bc62 <assert_post_action>
    133c:	e5f7      	b.n	f2e <thread_output_code+0x3de>
		value = (value != 0) ? 0 : 1;
    133e:	2501      	movs	r5, #1
    1340:	e5fb      	b.n	f3a <thread_output_code+0x3ea>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1342:	4e8a      	ldr	r6, [pc, #552]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    1344:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1348:	4632      	mov	r2, r6
    134a:	4989      	ldr	r1, [pc, #548]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    134c:	4889      	ldr	r0, [pc, #548]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    134e:	f00a fc8f 	bl	bc70 <assert_print>
    1352:	4889      	ldr	r0, [pc, #548]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    1354:	f00a fc8c 	bl	bc70 <assert_print>
    1358:	f44f 618d 	mov.w	r1, #1128	; 0x468
    135c:	4630      	mov	r0, r6
    135e:	f00a fc80 	bl	bc62 <assert_post_action>
    1362:	e5f1      	b.n	f48 <thread_output_code+0x3f8>
	const struct gpio_driver_api *api =
    1364:	487f      	ldr	r0, [pc, #508]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1366:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1368:	691b      	ldr	r3, [r3, #16]
    136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    136e:	4798      	blx	r3
    1370:	e5f3      	b.n	f5a <thread_output_code+0x40a>
                printk("SETTING LED VALUE FAILED");
    1372:	487d      	ldr	r0, [pc, #500]	; (1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>)
    1374:	f00a faf7 	bl	b966 <printk>
    1378:	e5f2      	b.n	f60 <thread_output_code+0x410>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    137a:	4e7c      	ldr	r6, [pc, #496]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    137c:	f240 4392 	movw	r3, #1170	; 0x492
    1380:	4632      	mov	r2, r6
    1382:	497b      	ldr	r1, [pc, #492]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    1384:	487b      	ldr	r0, [pc, #492]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    1386:	f00a fc73 	bl	bc70 <assert_print>
    138a:	487b      	ldr	r0, [pc, #492]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    138c:	f00a fc70 	bl	bc70 <assert_print>
    1390:	f240 4192 	movw	r1, #1170	; 0x492
    1394:	4630      	mov	r0, r6
    1396:	f00a fc64 	bl	bc62 <assert_post_action>
    139a:	e5e9      	b.n	f70 <thread_output_code+0x420>
		value = (value != 0) ? 0 : 1;
    139c:	2501      	movs	r5, #1
    139e:	e5ed      	b.n	f7c <thread_output_code+0x42c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13a0:	4e72      	ldr	r6, [pc, #456]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    13a2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    13a6:	4632      	mov	r2, r6
    13a8:	4971      	ldr	r1, [pc, #452]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    13aa:	4872      	ldr	r0, [pc, #456]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    13ac:	f00a fc60 	bl	bc70 <assert_print>
    13b0:	4871      	ldr	r0, [pc, #452]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    13b2:	f00a fc5d 	bl	bc70 <assert_print>
    13b6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    13ba:	4630      	mov	r0, r6
    13bc:	f00a fc51 	bl	bc62 <assert_post_action>
    13c0:	e5e3      	b.n	f8a <thread_output_code+0x43a>
	const struct gpio_driver_api *api =
    13c2:	4868      	ldr	r0, [pc, #416]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    13c4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    13c6:	691b      	ldr	r3, [r3, #16]
    13c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    13cc:	4798      	blx	r3
    13ce:	e5e5      	b.n	f9c <thread_output_code+0x44c>
	const struct gpio_driver_config *const cfg =
    13d0:	4b64      	ldr	r3, [pc, #400]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    13d2:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13d4:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13d6:	6813      	ldr	r3, [r2, #0]
    13d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13dc:	d07f      	beq.n	14de <CONFIG_FPROTECT_BLOCK_SIZE+0x4de>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    13de:	682b      	ldr	r3, [r5, #0]
    13e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13e4:	f040 808c 	bne.w	1500 <CONFIG_FPROTECT_BLOCK_SIZE+0x500>
    13e8:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    13ea:	4b5e      	ldr	r3, [pc, #376]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    13ec:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13f4:	f000 8086 	beq.w	1504 <CONFIG_FPROTECT_BLOCK_SIZE+0x504>
	if (value != 0)	{
    13f8:	2d00      	cmp	r5, #0
    13fa:	f000 8094 	beq.w	1526 <CONFIG_FPROTECT_BLOCK_SIZE+0x526>
	const struct gpio_driver_api *api =
    13fe:	4859      	ldr	r0, [pc, #356]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1400:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1402:	68db      	ldr	r3, [r3, #12]
    1404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1408:	4798      	blx	r3
            if (ret < 0)
    140a:	2800      	cmp	r0, #0
    140c:	f2c0 8092 	blt.w	1534 <CONFIG_FPROTECT_BLOCK_SIZE+0x534>
	const struct gpio_driver_config *const cfg =
    1410:	4b54      	ldr	r3, [pc, #336]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1412:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1414:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1416:	6813      	ldr	r3, [r2, #0]
    1418:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    141c:	f000 808e 	beq.w	153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1420:	682b      	ldr	r3, [r5, #0]
    1422:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1426:	f040 809a 	bne.w	155e <CONFIG_FPROTECT_BLOCK_SIZE+0x55e>
    142a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    142c:	4b4d      	ldr	r3, [pc, #308]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    142e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1436:	f000 80a1 	beq.w	157c <CONFIG_FPROTECT_BLOCK_SIZE+0x57c>
	if (value != 0)	{
    143a:	2d00      	cmp	r5, #0
    143c:	f000 80af 	beq.w	159e <CONFIG_FPROTECT_BLOCK_SIZE+0x59e>
	const struct gpio_driver_api *api =
    1440:	4848      	ldr	r0, [pc, #288]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1442:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1444:	68db      	ldr	r3, [r3, #12]
    1446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    144a:	4798      	blx	r3
            if (ret < 0)
    144c:	2800      	cmp	r0, #0
    144e:	f2c0 80ad 	blt.w	15ac <CONFIG_FPROTECT_BLOCK_SIZE+0x5ac>
	const struct gpio_driver_config *const cfg =
    1452:	4b44      	ldr	r3, [pc, #272]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1454:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1456:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1458:	6813      	ldr	r3, [r2, #0]
    145a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    145e:	f000 80a9 	beq.w	15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1462:	682b      	ldr	r3, [r5, #0]
    1464:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1468:	f040 80b5 	bne.w	15d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d6>
    146c:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    146e:	4b3d      	ldr	r3, [pc, #244]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1470:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1478:	f000 80af 	beq.w	15da <CONFIG_FPROTECT_BLOCK_SIZE+0x5da>
	if (value != 0)	{
    147c:	2d00      	cmp	r5, #0
    147e:	f000 80bd 	beq.w	15fc <CONFIG_FPROTECT_BLOCK_SIZE+0x5fc>
	const struct gpio_driver_api *api =
    1482:	4838      	ldr	r0, [pc, #224]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1484:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1486:	68db      	ldr	r3, [r3, #12]
    1488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    148c:	4798      	blx	r3
            if (ret < 0)
    148e:	2800      	cmp	r0, #0
    1490:	f2c0 80bb 	blt.w	160a <CONFIG_FPROTECT_BLOCK_SIZE+0x60a>
	const struct gpio_driver_config *const cfg =
    1494:	4b33      	ldr	r3, [pc, #204]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1496:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1498:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    149a:	6813      	ldr	r3, [r2, #0]
    149c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14a0:	f000 80b7 	beq.w	1612 <CONFIG_FPROTECT_BLOCK_SIZE+0x612>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    14a4:	682b      	ldr	r3, [r5, #0]
    14a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14aa:	f040 80c3 	bne.w	1634 <CONFIG_FPROTECT_BLOCK_SIZE+0x634>
    14ae:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    14b0:	4b2c      	ldr	r3, [pc, #176]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    14b2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14b4:	681b      	ldr	r3, [r3, #0]
    14b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14ba:	f000 80bd 	beq.w	1638 <CONFIG_FPROTECT_BLOCK_SIZE+0x638>
	if (value != 0)	{
    14be:	2d00      	cmp	r5, #0
    14c0:	f000 80cb 	beq.w	165a <CONFIG_FPROTECT_BLOCK_SIZE+0x65a>
	const struct gpio_driver_api *api =
    14c4:	4827      	ldr	r0, [pc, #156]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    14c6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    14c8:	68db      	ldr	r3, [r3, #12]
    14ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    14ce:	4798      	blx	r3
            if (ret < 0)
    14d0:	2800      	cmp	r0, #0
    14d2:	f6bf ac20 	bge.w	d16 <thread_output_code+0x1c6>
                printk("SETTING LED VALUE FAILED");
    14d6:	4824      	ldr	r0, [pc, #144]	; (1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>)
    14d8:	f00a fa45 	bl	b966 <printk>
    {
    14dc:	e41b      	b.n	d16 <thread_output_code+0x1c6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14de:	4e23      	ldr	r6, [pc, #140]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    14e0:	f240 4392 	movw	r3, #1170	; 0x492
    14e4:	4632      	mov	r2, r6
    14e6:	4922      	ldr	r1, [pc, #136]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    14e8:	4822      	ldr	r0, [pc, #136]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    14ea:	f00a fbc1 	bl	bc70 <assert_print>
    14ee:	4822      	ldr	r0, [pc, #136]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    14f0:	f00a fbbe 	bl	bc70 <assert_print>
    14f4:	f240 4192 	movw	r1, #1170	; 0x492
    14f8:	4630      	mov	r0, r6
    14fa:	f00a fbb2 	bl	bc62 <assert_post_action>
    14fe:	e76e      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
		value = (value != 0) ? 0 : 1;
    1500:	2500      	movs	r5, #0
    1502:	e772      	b.n	13ea <CONFIG_FPROTECT_BLOCK_SIZE+0x3ea>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1504:	4e19      	ldr	r6, [pc, #100]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    1506:	f44f 638d 	mov.w	r3, #1128	; 0x468
    150a:	4632      	mov	r2, r6
    150c:	4918      	ldr	r1, [pc, #96]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    150e:	4819      	ldr	r0, [pc, #100]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    1510:	f00a fbae 	bl	bc70 <assert_print>
    1514:	4818      	ldr	r0, [pc, #96]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    1516:	f00a fbab 	bl	bc70 <assert_print>
    151a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    151e:	4630      	mov	r0, r6
    1520:	f00a fb9f 	bl	bc62 <assert_post_action>
    1524:	e768      	b.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
	const struct gpio_driver_api *api =
    1526:	480f      	ldr	r0, [pc, #60]	; (1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>)
    1528:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    152a:	691b      	ldr	r3, [r3, #16]
    152c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1530:	4798      	blx	r3
    1532:	e76a      	b.n	140a <CONFIG_FPROTECT_BLOCK_SIZE+0x40a>
                printk("SETTING LED VALUE FAILED");
    1534:	480c      	ldr	r0, [pc, #48]	; (1568 <CONFIG_FPROTECT_BLOCK_SIZE+0x568>)
    1536:	f00a fa16 	bl	b966 <printk>
    153a:	e769      	b.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    153c:	4e0b      	ldr	r6, [pc, #44]	; (156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>)
    153e:	f240 4392 	movw	r3, #1170	; 0x492
    1542:	4632      	mov	r2, r6
    1544:	490a      	ldr	r1, [pc, #40]	; (1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>)
    1546:	480b      	ldr	r0, [pc, #44]	; (1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>)
    1548:	f00a fb92 	bl	bc70 <assert_print>
    154c:	480a      	ldr	r0, [pc, #40]	; (1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>)
    154e:	f00a fb8f 	bl	bc70 <assert_print>
    1552:	f240 4192 	movw	r1, #1170	; 0x492
    1556:	4630      	mov	r0, r6
    1558:	f00a fb83 	bl	bc62 <assert_post_action>
    155c:	e760      	b.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
		value = (value != 0) ? 0 : 1;
    155e:	2501      	movs	r5, #1
    1560:	e764      	b.n	142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
    1562:	bf00      	nop
    1564:	0000cc78 	.word	0x0000cc78
    1568:	0000d46c 	.word	0x0000d46c
    156c:	0000cf98 	.word	0x0000cf98
    1570:	0000d2a0 	.word	0x0000d2a0
    1574:	0000d02c 	.word	0x0000d02c
    1578:	0000d2e0 	.word	0x0000d2e0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    157c:	4e3a      	ldr	r6, [pc, #232]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
    157e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1582:	4632      	mov	r2, r6
    1584:	4939      	ldr	r1, [pc, #228]	; (166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>)
    1586:	483a      	ldr	r0, [pc, #232]	; (1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>)
    1588:	f00a fb72 	bl	bc70 <assert_print>
    158c:	4839      	ldr	r0, [pc, #228]	; (1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>)
    158e:	f00a fb6f 	bl	bc70 <assert_print>
    1592:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1596:	4630      	mov	r0, r6
    1598:	f00a fb63 	bl	bc62 <assert_post_action>
    159c:	e74d      	b.n	143a <CONFIG_FPROTECT_BLOCK_SIZE+0x43a>
	const struct gpio_driver_api *api =
    159e:	4836      	ldr	r0, [pc, #216]	; (1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>)
    15a0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    15a2:	691b      	ldr	r3, [r3, #16]
    15a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15a8:	4798      	blx	r3
    15aa:	e74f      	b.n	144c <CONFIG_FPROTECT_BLOCK_SIZE+0x44c>
                printk("SETTING LED VALUE FAILED");
    15ac:	4833      	ldr	r0, [pc, #204]	; (167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>)
    15ae:	f00a f9da 	bl	b966 <printk>
    15b2:	e74e      	b.n	1452 <CONFIG_FPROTECT_BLOCK_SIZE+0x452>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15b4:	4e2c      	ldr	r6, [pc, #176]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
    15b6:	f240 4392 	movw	r3, #1170	; 0x492
    15ba:	4632      	mov	r2, r6
    15bc:	492b      	ldr	r1, [pc, #172]	; (166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>)
    15be:	482c      	ldr	r0, [pc, #176]	; (1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>)
    15c0:	f00a fb56 	bl	bc70 <assert_print>
    15c4:	482b      	ldr	r0, [pc, #172]	; (1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>)
    15c6:	f00a fb53 	bl	bc70 <assert_print>
    15ca:	f240 4192 	movw	r1, #1170	; 0x492
    15ce:	4630      	mov	r0, r6
    15d0:	f00a fb47 	bl	bc62 <assert_post_action>
    15d4:	e745      	b.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
		value = (value != 0) ? 0 : 1;
    15d6:	2501      	movs	r5, #1
    15d8:	e749      	b.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15da:	4e23      	ldr	r6, [pc, #140]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
    15dc:	f44f 638d 	mov.w	r3, #1128	; 0x468
    15e0:	4632      	mov	r2, r6
    15e2:	4922      	ldr	r1, [pc, #136]	; (166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>)
    15e4:	4822      	ldr	r0, [pc, #136]	; (1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>)
    15e6:	f00a fb43 	bl	bc70 <assert_print>
    15ea:	4822      	ldr	r0, [pc, #136]	; (1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>)
    15ec:	f00a fb40 	bl	bc70 <assert_print>
    15f0:	f44f 618d 	mov.w	r1, #1128	; 0x468
    15f4:	4630      	mov	r0, r6
    15f6:	f00a fb34 	bl	bc62 <assert_post_action>
    15fa:	e73f      	b.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
	const struct gpio_driver_api *api =
    15fc:	481e      	ldr	r0, [pc, #120]	; (1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>)
    15fe:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1600:	691b      	ldr	r3, [r3, #16]
    1602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1606:	4798      	blx	r3
    1608:	e741      	b.n	148e <CONFIG_FPROTECT_BLOCK_SIZE+0x48e>
                printk("SETTING LED VALUE FAILED");
    160a:	481c      	ldr	r0, [pc, #112]	; (167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>)
    160c:	f00a f9ab 	bl	b966 <printk>
    1610:	e740      	b.n	1494 <CONFIG_FPROTECT_BLOCK_SIZE+0x494>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1612:	4e15      	ldr	r6, [pc, #84]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
    1614:	f240 4392 	movw	r3, #1170	; 0x492
    1618:	4632      	mov	r2, r6
    161a:	4914      	ldr	r1, [pc, #80]	; (166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>)
    161c:	4814      	ldr	r0, [pc, #80]	; (1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>)
    161e:	f00a fb27 	bl	bc70 <assert_print>
    1622:	4814      	ldr	r0, [pc, #80]	; (1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>)
    1624:	f00a fb24 	bl	bc70 <assert_print>
    1628:	f240 4192 	movw	r1, #1170	; 0x492
    162c:	4630      	mov	r0, r6
    162e:	f00a fb18 	bl	bc62 <assert_post_action>
    1632:	e737      	b.n	14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>
		value = (value != 0) ? 0 : 1;
    1634:	2501      	movs	r5, #1
    1636:	e73b      	b.n	14b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1638:	4e0b      	ldr	r6, [pc, #44]	; (1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>)
    163a:	f44f 638d 	mov.w	r3, #1128	; 0x468
    163e:	4632      	mov	r2, r6
    1640:	490a      	ldr	r1, [pc, #40]	; (166c <CONFIG_FPROTECT_BLOCK_SIZE+0x66c>)
    1642:	480b      	ldr	r0, [pc, #44]	; (1670 <CONFIG_FPROTECT_BLOCK_SIZE+0x670>)
    1644:	f00a fb14 	bl	bc70 <assert_print>
    1648:	480a      	ldr	r0, [pc, #40]	; (1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>)
    164a:	f00a fb11 	bl	bc70 <assert_print>
    164e:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1652:	4630      	mov	r0, r6
    1654:	f00a fb05 	bl	bc62 <assert_post_action>
    1658:	e731      	b.n	14be <CONFIG_FPROTECT_BLOCK_SIZE+0x4be>
	const struct gpio_driver_api *api =
    165a:	4807      	ldr	r0, [pc, #28]	; (1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>)
    165c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    165e:	691b      	ldr	r3, [r3, #16]
    1660:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1664:	4798      	blx	r3
    1666:	e733      	b.n	14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>
    1668:	0000cf98 	.word	0x0000cf98
    166c:	0000d2a0 	.word	0x0000d2a0
    1670:	0000d02c 	.word	0x0000d02c
    1674:	0000d2e0 	.word	0x0000d2e0
    1678:	0000cc78 	.word	0x0000cc78
    167c:	0000d46c 	.word	0x0000d46c

00001680 <main>:
{
    1680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1684:	b088      	sub	sp, #32
    ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_INACTIVE);
    1686:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    168a:	483d      	ldr	r0, [pc, #244]	; (1780 <main+0x100>)
    168c:	f00a f8f5 	bl	b87a <gpio_pin_configure_dt>
    if (ret < 0)
    1690:	2800      	cmp	r0, #0
    1692:	db69      	blt.n	1768 <main+0xe8>
    ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_INACTIVE);
    1694:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1698:	483a      	ldr	r0, [pc, #232]	; (1784 <main+0x104>)
    169a:	f00a f8ee 	bl	b87a <gpio_pin_configure_dt>
    if (ret < 0)
    169e:	2800      	cmp	r0, #0
    16a0:	db62      	blt.n	1768 <main+0xe8>
    ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_INACTIVE);
    16a2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    16a6:	4838      	ldr	r0, [pc, #224]	; (1788 <main+0x108>)
    16a8:	f00a f8e7 	bl	b87a <gpio_pin_configure_dt>
    if (ret < 0)
    16ac:	2800      	cmp	r0, #0
    16ae:	db5b      	blt.n	1768 <main+0xe8>
    ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_INACTIVE);
    16b0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    16b4:	4835      	ldr	r0, [pc, #212]	; (178c <main+0x10c>)
    16b6:	f00a f8e0 	bl	b87a <gpio_pin_configure_dt>
    if (ret < 0)
    16ba:	2800      	cmp	r0, #0
    16bc:	db54      	blt.n	1768 <main+0xe8>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    16be:	4834      	ldr	r0, [pc, #208]	; (1790 <main+0x110>)
    16c0:	f006 ff40 	bl	8544 <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
    16c4:	4b33      	ldr	r3, [pc, #204]	; (1794 <main+0x114>)
    16c6:	6018      	str	r0, [r3, #0]
    if (!adc_dev)
    16c8:	2800      	cmp	r0, #0
    16ca:	d050      	beq.n	176e <main+0xee>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    16cc:	4b31      	ldr	r3, [pc, #196]	; (1794 <main+0x114>)
    16ce:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
    16d0:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    16d2:	681b      	ldr	r3, [r3, #0]
    16d4:	4930      	ldr	r1, [pc, #192]	; (1798 <main+0x118>)
    16d6:	4798      	blx	r3
    if (err)
    16d8:	4601      	mov	r1, r0
    16da:	2800      	cmp	r0, #0
    16dc:	d14b      	bne.n	1776 <main+0xf6>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    16de:	2501      	movs	r5, #1
    16e0:	4b2e      	ldr	r3, [pc, #184]	; (179c <main+0x11c>)
    16e2:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    16e4:	482e      	ldr	r0, [pc, #184]	; (17a0 <main+0x120>)
    16e6:	f003 fb53 	bl	4d90 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
    16ea:	462a      	mov	r2, r5
    16ec:	2100      	movs	r1, #0
    16ee:	482d      	ldr	r0, [pc, #180]	; (17a4 <main+0x124>)
    16f0:	f00b f9e4 	bl	cabc <z_impl_k_sem_init>
    16f4:	462a      	mov	r2, r5
    16f6:	2100      	movs	r1, #0
    16f8:	482b      	ldr	r0, [pc, #172]	; (17a8 <main+0x128>)
    16fa:	f00b f9df 	bl	cabc <z_impl_k_sem_init>
                                        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
    16fe:	2600      	movs	r6, #0
    1700:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1702:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1706:	2400      	movs	r4, #0
    1708:	9404      	str	r4, [sp, #16]
    170a:	9503      	str	r5, [sp, #12]
    170c:	9402      	str	r4, [sp, #8]
    170e:	9401      	str	r4, [sp, #4]
    1710:	9400      	str	r4, [sp, #0]
    1712:	4b26      	ldr	r3, [pc, #152]	; (17ac <main+0x12c>)
    1714:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1718:	4925      	ldr	r1, [pc, #148]	; (17b0 <main+0x130>)
    171a:	4826      	ldr	r0, [pc, #152]	; (17b4 <main+0x134>)
    171c:	f007 fb3c 	bl	8d98 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
    1720:	4b25      	ldr	r3, [pc, #148]	; (17b8 <main+0x138>)
    1722:	6018      	str	r0, [r3, #0]
    1724:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1728:	9404      	str	r4, [sp, #16]
    172a:	9503      	str	r5, [sp, #12]
    172c:	9402      	str	r4, [sp, #8]
    172e:	9401      	str	r4, [sp, #4]
    1730:	9400      	str	r4, [sp, #0]
    1732:	4b22      	ldr	r3, [pc, #136]	; (17bc <main+0x13c>)
    1734:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1738:	4921      	ldr	r1, [pc, #132]	; (17c0 <main+0x140>)
    173a:	4822      	ldr	r0, [pc, #136]	; (17c4 <main+0x144>)
    173c:	f007 fb2c 	bl	8d98 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
    1740:	f8df 8084 	ldr.w	r8, [pc, #132]	; 17c8 <main+0x148>
    1744:	f8c8 0000 	str.w	r0, [r8]
    1748:	e9cd 6706 	strd	r6, r7, [sp, #24]
    174c:	9404      	str	r4, [sp, #16]
    174e:	9503      	str	r5, [sp, #12]
    1750:	9402      	str	r4, [sp, #8]
    1752:	9401      	str	r4, [sp, #4]
    1754:	9400      	str	r4, [sp, #0]
    1756:	4b1d      	ldr	r3, [pc, #116]	; (17cc <main+0x14c>)
    1758:	f44f 6280 	mov.w	r2, #1024	; 0x400
    175c:	491c      	ldr	r1, [pc, #112]	; (17d0 <main+0x150>)
    175e:	481d      	ldr	r0, [pc, #116]	; (17d4 <main+0x154>)
    1760:	f007 fb1a 	bl	8d98 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_output_data, thread_output_stack,
    1764:	f8c8 0000 	str.w	r0, [r8]
}
    1768:	b008      	add	sp, #32
    176a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        printk("ADC device_get_binding() failed\n");
    176e:	481a      	ldr	r0, [pc, #104]	; (17d8 <main+0x158>)
    1770:	f00a f8f9 	bl	b966 <printk>
    1774:	e7aa      	b.n	16cc <main+0x4c>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1776:	4819      	ldr	r0, [pc, #100]	; (17dc <main+0x15c>)
    1778:	f00a f8f5 	bl	b966 <printk>
    177c:	e7af      	b.n	16de <main+0x5e>
    177e:	bf00      	nop
    1780:	0000d5f4 	.word	0x0000d5f4
    1784:	0000d5fc 	.word	0x0000d5fc
    1788:	0000d604 	.word	0x0000d604
    178c:	0000d60c 	.word	0x0000d60c
    1790:	0000d488 	.word	0x0000d488
    1794:	200005f8 	.word	0x200005f8
    1798:	0000d614 	.word	0x0000d614
    179c:	40007000 	.word	0x40007000
    17a0:	0000d4e4 	.word	0x0000d4e4
    17a4:	20000600 	.word	0x20000600
    17a8:	20000610 	.word	0x20000610
    17ac:	000009c5 	.word	0x000009c5
    17b0:	200013a0 	.word	0x200013a0
    17b4:	200003c0 	.word	0x200003c0
    17b8:	20000624 	.word	0x20000624
    17bc:	000017e1 	.word	0x000017e1
    17c0:	200017c0 	.word	0x200017c0
    17c4:	20000310 	.word	0x20000310
    17c8:	20000620 	.word	0x20000620
    17cc:	00000b51 	.word	0x00000b51
    17d0:	20001be0 	.word	0x20001be0
    17d4:	20000260 	.word	0x20000260
    17d8:	0000d490 	.word	0x0000d490
    17dc:	0000d4b4 	.word	0x0000d4b4

000017e0 <thread_processing_code>:
{
    17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e2:	b08f      	sub	sp, #60	; 0x3c
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    17e4:	2500      	movs	r5, #0
    17e6:	9509      	str	r5, [sp, #36]	; 0x24
    17e8:	950a      	str	r5, [sp, #40]	; 0x28
    17ea:	950b      	str	r5, [sp, #44]	; 0x2c
    17ec:	950c      	str	r5, [sp, #48]	; 0x30
    17ee:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
    17f2:	483b      	ldr	r0, [pc, #236]	; (18e0 <thread_processing_code+0x100>)
    17f4:	f00a f8b7 	bl	b966 <printk>
    int iterations = 0;
    17f8:	462c      	mov	r4, r5
    17fa:	e03d      	b.n	1878 <thread_processing_code+0x98>
            uint16_t avg = precedentsAverage(precedents, current_read, 9);
    17fc:	2209      	movs	r2, #9
    17fe:	4631      	mov	r1, r6
    1800:	a809      	add	r0, sp, #36	; 0x24
    1802:	f00a f845 	bl	b890 <precedentsAverage>
    1806:	b287      	uxth	r7, r0
            bc = avg;
    1808:	4b36      	ldr	r3, [pc, #216]	; (18e4 <thread_processing_code+0x104>)
    180a:	801f      	strh	r7, [r3, #0]
	z_impl_k_sem_give(sem);
    180c:	4836      	ldr	r0, [pc, #216]	; (18e8 <thread_processing_code+0x108>)
    180e:	f007 fdaf 	bl	9370 <z_impl_k_sem_give>
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], current_read, avg);
    1812:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    1816:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    181a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    181e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1822:	f8bd c032 	ldrh.w	ip, [sp, #50]	; 0x32
    1826:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
    182a:	9707      	str	r7, [sp, #28]
    182c:	9606      	str	r6, [sp, #24]
    182e:	f8cd e014 	str.w	lr, [sp, #20]
    1832:	f8cd c010 	str.w	ip, [sp, #16]
    1836:	9003      	str	r0, [sp, #12]
    1838:	9102      	str	r1, [sp, #8]
    183a:	9201      	str	r2, [sp, #4]
    183c:	9300      	str	r3, [sp, #0]
    183e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1842:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    1846:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    184a:	4828      	ldr	r0, [pc, #160]	; (18ec <thread_processing_code+0x10c>)
    184c:	f00a f88b 	bl	b966 <printk>
            precedents[iterations % 9] = current_read;
    1850:	4a27      	ldr	r2, [pc, #156]	; (18f0 <thread_processing_code+0x110>)
    1852:	fb82 3204 	smull	r3, r2, r2, r4
    1856:	17e3      	asrs	r3, r4, #31
    1858:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    185c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1860:	1ae3      	subs	r3, r4, r3
    1862:	aa0e      	add	r2, sp, #56	; 0x38
    1864:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1868:	f823 6c14 	strh.w	r6, [r3, #-20]
        iterations++;
    186c:	3401      	adds	r4, #1
        printk("Thread B set bc value to: %d \n", bc);
    186e:	4b1d      	ldr	r3, [pc, #116]	; (18e4 <thread_processing_code+0x104>)
    1870:	8819      	ldrh	r1, [r3, #0]
    1872:	4820      	ldr	r0, [pc, #128]	; (18f4 <thread_processing_code+0x114>)
    1874:	f00a f877 	bl	b966 <printk>
	return z_impl_k_sem_take(sem, timeout);
    1878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    187c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1880:	481d      	ldr	r0, [pc, #116]	; (18f8 <thread_processing_code+0x118>)
    1882:	f007 fdb9 	bl	93f8 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    1886:	3501      	adds	r5, #1
	return z_impl_k_uptime_ticks();
    1888:	f00b f96e 	bl	cb68 <z_impl_k_uptime_ticks>
    188c:	4602      	mov	r2, r0
    188e:	014b      	lsls	r3, r1, #5
    1890:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    1894:	0140      	lsls	r0, r0, #5
    1896:	1a80      	subs	r0, r0, r2
    1898:	eb63 0301 	sbc.w	r3, r3, r1
    189c:	009b      	lsls	r3, r3, #2
    189e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    18a2:	0080      	lsls	r0, r0, #2
    18a4:	1880      	adds	r0, r0, r2
    18a6:	eb43 0301 	adc.w	r3, r3, r1
    18aa:	00db      	lsls	r3, r3, #3
    18ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    18b0:	f3c0 3010 	ubfx	r0, r0, #12, #17
    18b4:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    18b8:	0bdb      	lsrs	r3, r3, #15
    18ba:	4629      	mov	r1, r5
    18bc:	480f      	ldr	r0, [pc, #60]	; (18fc <thread_processing_code+0x11c>)
    18be:	f00a f852 	bl	b966 <printk>
        printk("Task B read ab value: %d\n", ab);
    18c2:	4e0f      	ldr	r6, [pc, #60]	; (1900 <thread_processing_code+0x120>)
    18c4:	8831      	ldrh	r1, [r6, #0]
    18c6:	480f      	ldr	r0, [pc, #60]	; (1904 <thread_processing_code+0x124>)
    18c8:	f00a f84d 	bl	b966 <printk>
        current_read = ab;
    18cc:	8836      	ldrh	r6, [r6, #0]
        if (iterations > 8)
    18ce:	2c08      	cmp	r4, #8
    18d0:	dc94      	bgt.n	17fc <thread_processing_code+0x1c>
            precedents[iterations] = current_read;
    18d2:	ab0e      	add	r3, sp, #56	; 0x38
    18d4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    18d8:	f823 6c14 	strh.w	r6, [r3, #-20]
    18dc:	e7c6      	b.n	186c <thread_processing_code+0x8c>
    18de:	bf00      	nop
    18e0:	0000d518 	.word	0x0000d518
    18e4:	200001de 	.word	0x200001de
    18e8:	20000610 	.word	0x20000610
    18ec:	0000d5a8 	.word	0x0000d5a8
    18f0:	38e38e39 	.word	0x38e38e39
    18f4:	0000d5d4 	.word	0x0000d5d4
    18f8:	20000600 	.word	0x20000600
    18fc:	0000d554 	.word	0x0000d554
    1900:	200001dc 	.word	0x200001dc
    1904:	0000d58c 	.word	0x0000d58c

00001908 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    190c:	b08d      	sub	sp, #52	; 0x34
    190e:	9205      	str	r2, [sp, #20]
    1910:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1912:	4613      	mov	r3, r2
    1914:	f002 0204 	and.w	r2, r2, #4
    1918:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    191a:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    191e:	f010 0303 	ands.w	r3, r0, #3
    1922:	9302      	str	r3, [sp, #8]
    1924:	f040 8293 	bne.w	1e4e <cbvprintf_package+0x546>
    1928:	4607      	mov	r7, r0
    192a:	468a      	mov	sl, r1
    192c:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    192e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1930:	2800      	cmp	r0, #0
    1932:	d041      	beq.n	19b8 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1934:	b127      	cbz	r7, 1940 <cbvprintf_package+0x38>
    1936:	1be3      	subs	r3, r4, r7
    1938:	3304      	adds	r3, #4
    193a:	4553      	cmp	r3, sl
    193c:	f200 828a 	bhi.w	1e54 <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    1940:	9b03      	ldr	r3, [sp, #12]
    1942:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1944:	f8dd b008 	ldr.w	fp, [sp, #8]
    1948:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    194c:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    1950:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    1952:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1956:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1958:	b10f      	cbz	r7, 195e <cbvprintf_package+0x56>
				*(const char **)buf = s;
    195a:	9b03      	ldr	r3, [sp, #12]
    195c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    195e:	1e53      	subs	r3, r2, #1
    1960:	9307      	str	r3, [sp, #28]
    1962:	2a00      	cmp	r2, #0
    1964:	f340 80b7 	ble.w	1ad6 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1968:	9b05      	ldr	r3, [sp, #20]
    196a:	f013 0202 	ands.w	r2, r3, #2
    196e:	d021      	beq.n	19b4 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1970:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1972:	1be1      	subs	r1, r4, r7
    1974:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1976:	b11a      	cbz	r2, 1980 <cbvprintf_package+0x78>
    1978:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    197c:	f080 80bf 	bcs.w	1afe <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1980:	f1bb 0f0f 	cmp.w	fp, #15
    1984:	f200 80ce 	bhi.w	1b24 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1988:	2f00      	cmp	r7, #0
    198a:	f000 80e2 	beq.w	1b52 <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    198e:	b2db      	uxtb	r3, r3
    1990:	aa0c      	add	r2, sp, #48	; 0x30
    1992:	445a      	add	r2, fp
    1994:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1998:	2800      	cmp	r0, #0
    199a:	f000 80d6 	beq.w	1b4a <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    19a2:	aa0c      	add	r2, sp, #48	; 0x30
    19a4:	445a      	add	r2, fp
    19a6:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    19aa:	9b04      	ldr	r3, [sp, #16]
    19ac:	3301      	adds	r3, #1
    19ae:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    19b0:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    19b4:	3404      	adds	r4, #4
    19b6:	e0f6      	b.n	1ba6 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    19b8:	f001 0a07 	and.w	sl, r1, #7
    19bc:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    19be:	f1ca 0a08 	rsb	sl, sl, #8
    19c2:	e7b7      	b.n	1934 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    19c4:	2b25      	cmp	r3, #37	; 0x25
    19c6:	f040 80ed 	bne.w	1ba4 <cbvprintf_package+0x29c>
				parsing = true;
    19ca:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    19cc:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    19d0:	46c1      	mov	r9, r8
			continue;
    19d2:	e0e7      	b.n	1ba4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    19d4:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    19d8:	46c1      	mov	r9, r8
			continue;
    19da:	e0e3      	b.n	1ba4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    19dc:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    19e0:	46c1      	mov	r9, r8
			continue;
    19e2:	e0df      	b.n	1ba4 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    19e4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    19e8:	46c1      	mov	r9, r8
			continue;
    19ea:	e0db      	b.n	1ba4 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    19ec:	782a      	ldrb	r2, [r5, #0]
    19ee:	2a6c      	cmp	r2, #108	; 0x6c
    19f0:	d026      	beq.n	1a40 <cbvprintf_package+0x138>
			parsing = false;
    19f2:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    19f4:	eb04 0208 	add.w	r2, r4, r8
    19f8:	3a01      	subs	r2, #1
    19fa:	f1c8 0100 	rsb	r1, r8, #0
    19fe:	400a      	ands	r2, r1
    1a00:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1a02:	b127      	cbz	r7, 1a0e <cbvprintf_package+0x106>
    1a04:	1bd1      	subs	r1, r2, r7
    1a06:	4449      	add	r1, r9
    1a08:	4551      	cmp	r1, sl
    1a0a:	f200 8226 	bhi.w	1e5a <cbvprintf_package+0x552>
		if (*fmt == 's') {
    1a0e:	2b73      	cmp	r3, #115	; 0x73
    1a10:	d059      	beq.n	1ac6 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    1a12:	f1b9 0f04 	cmp.w	r9, #4
    1a16:	f000 80a8 	beq.w	1b6a <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1a1a:	f1b9 0f08 	cmp.w	r9, #8
    1a1e:	f040 80ac 	bne.w	1b7a <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    1a22:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1a24:	3307      	adds	r3, #7
    1a26:	f023 0307 	bic.w	r3, r3, #7
    1a2a:	f103 0108 	add.w	r1, r3, #8
    1a2e:	9116      	str	r1, [sp, #88]	; 0x58
    1a30:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    1a34:	b10f      	cbz	r7, 1a3a <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    1a36:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    1a3a:	f102 0408 	add.w	r4, r2, #8
    1a3e:	e0b1      	b.n	1ba4 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    1a40:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    1a44:	2a6c      	cmp	r2, #108	; 0x6c
    1a46:	d004      	beq.n	1a52 <cbvprintf_package+0x14a>
			parsing = false;
    1a48:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    1a4a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    1a4e:	46c1      	mov	r9, r8
    1a50:	e7d0      	b.n	19f4 <cbvprintf_package+0xec>
			parsing = false;
    1a52:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    1a54:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    1a58:	46c1      	mov	r9, r8
    1a5a:	e7cb      	b.n	19f4 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    1a5c:	782b      	ldrb	r3, [r5, #0]
    1a5e:	2b4c      	cmp	r3, #76	; 0x4c
    1a60:	d01c      	beq.n	1a9c <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    1a62:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1a64:	3307      	adds	r3, #7
    1a66:	f023 0307 	bic.w	r3, r3, #7
    1a6a:	f103 0208 	add.w	r2, r3, #8
    1a6e:	9216      	str	r2, [sp, #88]	; 0x58
    1a70:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    1a74:	1de2      	adds	r2, r4, #7
    1a76:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    1a7a:	b147      	cbz	r7, 1a8e <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    1a7c:	1bd3      	subs	r3, r2, r7
    1a7e:	3308      	adds	r3, #8
    1a80:	4553      	cmp	r3, sl
    1a82:	d815      	bhi.n	1ab0 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    1a84:	782b      	ldrb	r3, [r5, #0]
    1a86:	2b4c      	cmp	r3, #76	; 0x4c
    1a88:	d015      	beq.n	1ab6 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    1a8a:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    1a8e:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    1a92:	2600      	movs	r6, #0
			continue;
    1a94:	f04f 0808 	mov.w	r8, #8
    1a98:	46c1      	mov	r9, r8
    1a9a:	e083      	b.n	1ba4 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    1a9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1a9e:	3307      	adds	r3, #7
    1aa0:	f023 0307 	bic.w	r3, r3, #7
    1aa4:	f103 0208 	add.w	r2, r3, #8
    1aa8:	9216      	str	r2, [sp, #88]	; 0x58
    1aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    1aae:	e7e1      	b.n	1a74 <cbvprintf_package+0x16c>
					return -ENOSPC;
    1ab0:	f06f 001b 	mvn.w	r0, #27
    1ab4:	e1c8      	b.n	1e48 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    1ab6:	e9c2 0100 	strd	r0, r1, [r2]
    1aba:	e7e8      	b.n	1a8e <cbvprintf_package+0x186>
			parsing = false;
    1abc:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    1abe:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    1ac2:	46c1      	mov	r9, r8
    1ac4:	e796      	b.n	19f4 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    1ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1ac8:	1d1a      	adds	r2, r3, #4
    1aca:	9216      	str	r2, [sp, #88]	; 0x58
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1ad0:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    1ad2:	4665      	mov	r5, ip
    1ad4:	e740      	b.n	1958 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1ad6:	4bbb      	ldr	r3, [pc, #748]	; (1dc4 <cbvprintf_package+0x4bc>)
    1ad8:	9a03      	ldr	r2, [sp, #12]
    1ada:	429a      	cmp	r2, r3
    1adc:	d304      	bcc.n	1ae8 <cbvprintf_package+0x1e0>
    1ade:	4bba      	ldr	r3, [pc, #744]	; (1dc8 <cbvprintf_package+0x4c0>)
    1ae0:	429a      	cmp	r2, r3
    1ae2:	d30a      	bcc.n	1afa <cbvprintf_package+0x1f2>
    1ae4:	2300      	movs	r3, #0
    1ae6:	e000      	b.n	1aea <cbvprintf_package+0x1e2>
    1ae8:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1aea:	2b00      	cmp	r3, #0
    1aec:	f47f af3c 	bne.w	1968 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    1af0:	9b05      	ldr	r3, [sp, #20]
    1af2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1af6:	2000      	movs	r0, #0
    1af8:	e73b      	b.n	1972 <cbvprintf_package+0x6a>
    1afa:	2301      	movs	r3, #1
    1afc:	e7f5      	b.n	1aea <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    1afe:	4cb3      	ldr	r4, [pc, #716]	; (1dcc <cbvprintf_package+0x4c4>)
    1b00:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1b04:	4622      	mov	r2, r4
    1b06:	49b2      	ldr	r1, [pc, #712]	; (1dd0 <cbvprintf_package+0x4c8>)
    1b08:	48b2      	ldr	r0, [pc, #712]	; (1dd4 <cbvprintf_package+0x4cc>)
    1b0a:	f00a f8b1 	bl	bc70 <assert_print>
    1b0e:	48b2      	ldr	r0, [pc, #712]	; (1dd8 <cbvprintf_package+0x4d0>)
    1b10:	f00a f8ae 	bl	bc70 <assert_print>
    1b14:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    1b18:	4620      	mov	r0, r4
    1b1a:	f00a f8a2 	bl	bc62 <assert_post_action>
					return -EINVAL;
    1b1e:	f06f 0015 	mvn.w	r0, #21
    1b22:	e191      	b.n	1e48 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    1b24:	4ca9      	ldr	r4, [pc, #676]	; (1dcc <cbvprintf_package+0x4c4>)
    1b26:	f240 13f5 	movw	r3, #501	; 0x1f5
    1b2a:	4622      	mov	r2, r4
    1b2c:	49a8      	ldr	r1, [pc, #672]	; (1dd0 <cbvprintf_package+0x4c8>)
    1b2e:	48a9      	ldr	r0, [pc, #676]	; (1dd4 <cbvprintf_package+0x4cc>)
    1b30:	f00a f89e 	bl	bc70 <assert_print>
    1b34:	48a9      	ldr	r0, [pc, #676]	; (1ddc <cbvprintf_package+0x4d4>)
    1b36:	f00a f89b 	bl	bc70 <assert_print>
    1b3a:	f240 11f5 	movw	r1, #501	; 0x1f5
    1b3e:	4620      	mov	r0, r4
    1b40:	f00a f88f 	bl	bc62 <assert_post_action>
					return -EINVAL;
    1b44:	f06f 0015 	mvn.w	r0, #21
    1b48:	e17e      	b.n	1e48 <cbvprintf_package+0x540>
						s_rw_cnt++;
    1b4a:	9b06      	ldr	r3, [sp, #24]
    1b4c:	3301      	adds	r3, #1
    1b4e:	9306      	str	r3, [sp, #24]
    1b50:	e72e      	b.n	19b0 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    1b52:	b908      	cbnz	r0, 1b58 <cbvprintf_package+0x250>
    1b54:	9b01      	ldr	r3, [sp, #4]
    1b56:	b113      	cbz	r3, 1b5e <cbvprintf_package+0x256>
					len += 1;
    1b58:	f10a 0a01 	add.w	sl, sl, #1
    1b5c:	e728      	b.n	19b0 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    1b5e:	9803      	ldr	r0, [sp, #12]
    1b60:	f00a fa00 	bl	bf64 <strlen>
    1b64:	1c83      	adds	r3, r0, #2
    1b66:	449a      	add	sl, r3
    1b68:	e722      	b.n	19b0 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    1b6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1b6c:	1d19      	adds	r1, r3, #4
    1b6e:	9116      	str	r1, [sp, #88]	; 0x58
    1b70:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    1b72:	b107      	cbz	r7, 1b76 <cbvprintf_package+0x26e>
				*(int *)buf = v;
    1b74:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    1b76:	1d14      	adds	r4, r2, #4
    1b78:	e014      	b.n	1ba4 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    1b7a:	4c94      	ldr	r4, [pc, #592]	; (1dcc <cbvprintf_package+0x4c4>)
    1b7c:	f240 2331 	movw	r3, #561	; 0x231
    1b80:	4622      	mov	r2, r4
    1b82:	4993      	ldr	r1, [pc, #588]	; (1dd0 <cbvprintf_package+0x4c8>)
    1b84:	4893      	ldr	r0, [pc, #588]	; (1dd4 <cbvprintf_package+0x4cc>)
    1b86:	f00a f873 	bl	bc70 <assert_print>
    1b8a:	4649      	mov	r1, r9
    1b8c:	4894      	ldr	r0, [pc, #592]	; (1de0 <cbvprintf_package+0x4d8>)
    1b8e:	f00a f86f 	bl	bc70 <assert_print>
    1b92:	f240 2131 	movw	r1, #561	; 0x231
    1b96:	4620      	mov	r0, r4
    1b98:	f00a f863 	bl	bc62 <assert_post_action>
			return -EINVAL;
    1b9c:	f06f 0015 	mvn.w	r0, #21
    1ba0:	e152      	b.n	1e48 <cbvprintf_package+0x540>
		switch (*fmt) {
    1ba2:	2600      	movs	r6, #0
    1ba4:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    1ba6:	f105 0c01 	add.w	ip, r5, #1
    1baa:	786b      	ldrb	r3, [r5, #1]
    1bac:	2b00      	cmp	r3, #0
    1bae:	f000 80c1 	beq.w	1d34 <cbvprintf_package+0x42c>
		if (!parsing) {
    1bb2:	2e00      	cmp	r6, #0
    1bb4:	f43f af06 	beq.w	19c4 <cbvprintf_package+0xbc>
		switch (*fmt) {
    1bb8:	f1a3 0120 	sub.w	r1, r3, #32
    1bbc:	295a      	cmp	r1, #90	; 0x5a
    1bbe:	d8f0      	bhi.n	1ba2 <cbvprintf_package+0x29a>
    1bc0:	a201      	add	r2, pc, #4	; (adr r2, 1bc8 <cbvprintf_package+0x2c0>)
    1bc2:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    1bc6:	bf00      	nop
    1bc8:	00001ba5 	.word	0x00001ba5
    1bcc:	00001ba3 	.word	0x00001ba3
    1bd0:	00001ba3 	.word	0x00001ba3
    1bd4:	00001ba5 	.word	0x00001ba5
    1bd8:	00001ba3 	.word	0x00001ba3
    1bdc:	00001ba3 	.word	0x00001ba3
    1be0:	00001ba3 	.word	0x00001ba3
    1be4:	00001ba3 	.word	0x00001ba3
    1be8:	00001ba3 	.word	0x00001ba3
    1bec:	00001ba3 	.word	0x00001ba3
    1bf0:	000019f5 	.word	0x000019f5
    1bf4:	00001ba5 	.word	0x00001ba5
    1bf8:	00001ba3 	.word	0x00001ba3
    1bfc:	00001ba5 	.word	0x00001ba5
    1c00:	00001ba5 	.word	0x00001ba5
    1c04:	00001ba3 	.word	0x00001ba3
    1c08:	00001ba5 	.word	0x00001ba5
    1c0c:	00001ba5 	.word	0x00001ba5
    1c10:	00001ba5 	.word	0x00001ba5
    1c14:	00001ba5 	.word	0x00001ba5
    1c18:	00001ba5 	.word	0x00001ba5
    1c1c:	00001ba5 	.word	0x00001ba5
    1c20:	00001ba5 	.word	0x00001ba5
    1c24:	00001ba5 	.word	0x00001ba5
    1c28:	00001ba5 	.word	0x00001ba5
    1c2c:	00001ba5 	.word	0x00001ba5
    1c30:	00001ba3 	.word	0x00001ba3
    1c34:	00001ba3 	.word	0x00001ba3
    1c38:	00001ba3 	.word	0x00001ba3
    1c3c:	00001ba3 	.word	0x00001ba3
    1c40:	00001ba3 	.word	0x00001ba3
    1c44:	00001ba3 	.word	0x00001ba3
    1c48:	00001ba3 	.word	0x00001ba3
    1c4c:	00001a5d 	.word	0x00001a5d
    1c50:	00001ba3 	.word	0x00001ba3
    1c54:	00001ba3 	.word	0x00001ba3
    1c58:	00001ba3 	.word	0x00001ba3
    1c5c:	00001a5d 	.word	0x00001a5d
    1c60:	00001a5d 	.word	0x00001a5d
    1c64:	00001a5d 	.word	0x00001a5d
    1c68:	00001ba3 	.word	0x00001ba3
    1c6c:	00001ba3 	.word	0x00001ba3
    1c70:	00001ba3 	.word	0x00001ba3
    1c74:	00001ba3 	.word	0x00001ba3
    1c78:	00001ba5 	.word	0x00001ba5
    1c7c:	00001ba3 	.word	0x00001ba3
    1c80:	00001ba3 	.word	0x00001ba3
    1c84:	00001ba3 	.word	0x00001ba3
    1c88:	00001ba3 	.word	0x00001ba3
    1c8c:	00001ba3 	.word	0x00001ba3
    1c90:	00001ba3 	.word	0x00001ba3
    1c94:	00001ba3 	.word	0x00001ba3
    1c98:	00001ba3 	.word	0x00001ba3
    1c9c:	00001ba3 	.word	0x00001ba3
    1ca0:	00001ba3 	.word	0x00001ba3
    1ca4:	00001ba3 	.word	0x00001ba3
    1ca8:	000019ed 	.word	0x000019ed
    1cac:	00001ba3 	.word	0x00001ba3
    1cb0:	00001ba3 	.word	0x00001ba3
    1cb4:	00001ba3 	.word	0x00001ba3
    1cb8:	00001ba3 	.word	0x00001ba3
    1cbc:	00001ba3 	.word	0x00001ba3
    1cc0:	00001ba3 	.word	0x00001ba3
    1cc4:	00001ba3 	.word	0x00001ba3
    1cc8:	00001ba3 	.word	0x00001ba3
    1ccc:	00001a5d 	.word	0x00001a5d
    1cd0:	00001ba3 	.word	0x00001ba3
    1cd4:	000019ed 	.word	0x000019ed
    1cd8:	000019ed 	.word	0x000019ed
    1cdc:	00001a5d 	.word	0x00001a5d
    1ce0:	00001a5d 	.word	0x00001a5d
    1ce4:	00001a5d 	.word	0x00001a5d
    1ce8:	00001ba5 	.word	0x00001ba5
    1cec:	000019ed 	.word	0x000019ed
    1cf0:	000019d5 	.word	0x000019d5
    1cf4:	00001ba3 	.word	0x00001ba3
    1cf8:	00001ba5 	.word	0x00001ba5
    1cfc:	00001ba3 	.word	0x00001ba3
    1d00:	00001abd 	.word	0x00001abd
    1d04:	000019ed 	.word	0x000019ed
    1d08:	00001abd 	.word	0x00001abd
    1d0c:	00001ba3 	.word	0x00001ba3
    1d10:	00001ba3 	.word	0x00001ba3
    1d14:	00001abd 	.word	0x00001abd
    1d18:	000019e5 	.word	0x000019e5
    1d1c:	000019ed 	.word	0x000019ed
    1d20:	00001ba3 	.word	0x00001ba3
    1d24:	00001ba3 	.word	0x00001ba3
    1d28:	000019ed 	.word	0x000019ed
    1d2c:	00001ba3 	.word	0x00001ba3
    1d30:	000019dd 	.word	0x000019dd
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    1d34:	1be3      	subs	r3, r4, r7
    1d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1d3a:	d211      	bcs.n	1d60 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    1d3c:	b31f      	cbz	r7, 1d86 <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    1d3e:	2200      	movs	r2, #0
    1d40:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    1d42:	089b      	lsrs	r3, r3, #2
    1d44:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    1d46:	9b01      	ldr	r3, [sp, #4]
    1d48:	b30b      	cbz	r3, 1d8e <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    1d4a:	9b06      	ldr	r3, [sp, #24]
    1d4c:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    1d4e:	9b04      	ldr	r3, [sp, #16]
    1d50:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    1d52:	bbab      	cbnz	r3, 1dc0 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    1d54:	9d02      	ldr	r5, [sp, #8]
    1d56:	f8dd 9010 	ldr.w	r9, [sp, #16]
    1d5a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1d5e:	e058      	b.n	1e12 <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    1d60:	4c1a      	ldr	r4, [pc, #104]	; (1dcc <cbvprintf_package+0x4c4>)
    1d62:	f240 233d 	movw	r3, #573	; 0x23d
    1d66:	4622      	mov	r2, r4
    1d68:	4919      	ldr	r1, [pc, #100]	; (1dd0 <cbvprintf_package+0x4c8>)
    1d6a:	481a      	ldr	r0, [pc, #104]	; (1dd4 <cbvprintf_package+0x4cc>)
    1d6c:	f009 ff80 	bl	bc70 <assert_print>
    1d70:	481c      	ldr	r0, [pc, #112]	; (1de4 <cbvprintf_package+0x4dc>)
    1d72:	f009 ff7d 	bl	bc70 <assert_print>
    1d76:	f240 213d 	movw	r1, #573	; 0x23d
    1d7a:	4620      	mov	r0, r4
    1d7c:	f009 ff71 	bl	bc62 <assert_post_action>
		return -EINVAL;
    1d80:	f06f 0015 	mvn.w	r0, #21
    1d84:	e060      	b.n	1e48 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1d86:	4453      	add	r3, sl
    1d88:	f1a3 0008 	sub.w	r0, r3, #8
    1d8c:	e05c      	b.n	1e48 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    1d8e:	9b06      	ldr	r3, [sp, #24]
    1d90:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    1d92:	e7dc      	b.n	1d4e <cbvprintf_package+0x446>
			*buf++ = pos;
    1d94:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1d98:	3301      	adds	r3, #1
    1d9a:	459b      	cmp	fp, r3
    1d9c:	d9da      	bls.n	1d54 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1d9e:	aa0c      	add	r2, sp, #48	; 0x30
    1da0:	441a      	add	r2, r3
    1da2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    1da6:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    1daa:	2a00      	cmp	r2, #0
    1dac:	daf4      	bge.n	1d98 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1dae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1db2:	1be2      	subs	r2, r4, r7
    1db4:	3201      	adds	r2, #1
    1db6:	4552      	cmp	r2, sl
    1db8:	d9ec      	bls.n	1d94 <cbvprintf_package+0x48c>
				return -ENOSPC;
    1dba:	f06f 001b 	mvn.w	r0, #27
    1dbe:	e043      	b.n	1e48 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    1dc0:	9b02      	ldr	r3, [sp, #8]
    1dc2:	e7ea      	b.n	1d9a <cbvprintf_package+0x492>
    1dc4:	0000cbd0 	.word	0x0000cbd0
    1dc8:	0000f328 	.word	0x0000f328
    1dcc:	0000d61c 	.word	0x0000d61c
    1dd0:	0000d1f0 	.word	0x0000d1f0
    1dd4:	0000d02c 	.word	0x0000d02c
    1dd8:	0000d664 	.word	0x0000d664
    1ddc:	0000d688 	.word	0x0000d688
    1de0:	0000d6a4 	.word	0x0000d6a4
    1de4:	0000d6bc 	.word	0x0000d6bc
		if (rws_pos_en) {
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	b1f3      	cbz	r3, 1e2a <cbvprintf_package+0x522>
			size = 0;
    1dec:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    1dee:	1be3      	subs	r3, r4, r7
    1df0:	4433      	add	r3, r6
    1df2:	3301      	adds	r3, #1
    1df4:	4553      	cmp	r3, sl
    1df6:	d833      	bhi.n	1e60 <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    1df8:	ab0c      	add	r3, sp, #48	; 0x30
    1dfa:	442b      	add	r3, r5
    1dfc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1e00:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    1e04:	4632      	mov	r2, r6
    1e06:	4641      	mov	r1, r8
    1e08:	4620      	mov	r0, r4
    1e0a:	f00a f8c9 	bl	bfa0 <memcpy>
		buf += size;
    1e0e:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    1e10:	3501      	adds	r5, #1
    1e12:	45ab      	cmp	fp, r5
    1e14:	d917      	bls.n	1e46 <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1e16:	f1b9 0f00 	cmp.w	r9, #0
    1e1a:	d0e5      	beq.n	1de8 <cbvprintf_package+0x4e0>
    1e1c:	ab0c      	add	r3, sp, #48	; 0x30
    1e1e:	442b      	add	r3, r5
    1e20:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    1e24:	2b00      	cmp	r3, #0
    1e26:	dadf      	bge.n	1de8 <cbvprintf_package+0x4e0>
    1e28:	e7f2      	b.n	1e10 <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1e2a:	ab0c      	add	r3, sp, #48	; 0x30
    1e2c:	442b      	add	r3, r5
    1e2e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    1e32:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1e36:	2200      	movs	r2, #0
    1e38:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    1e3c:	4640      	mov	r0, r8
    1e3e:	f00a f891 	bl	bf64 <strlen>
    1e42:	1c46      	adds	r6, r0, #1
    1e44:	e7d3      	b.n	1dee <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    1e46:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1e48:	b00d      	add	sp, #52	; 0x34
    1e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    1e4e:	f06f 000d 	mvn.w	r0, #13
    1e52:	e7f9      	b.n	1e48 <cbvprintf_package+0x540>
		return -ENOSPC;
    1e54:	f06f 001b 	mvn.w	r0, #27
    1e58:	e7f6      	b.n	1e48 <cbvprintf_package+0x540>
			return -ENOSPC;
    1e5a:	f06f 001b 	mvn.w	r0, #27
    1e5e:	e7f3      	b.n	1e48 <cbvprintf_package+0x540>
			return -ENOSPC;
    1e60:	f06f 001b 	mvn.w	r0, #27
    1e64:	e7f0      	b.n	1e48 <cbvprintf_package+0x540>
    1e66:	bf00      	nop

00001e68 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1e68:	b538      	push	{r3, r4, r5, lr}
    1e6a:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1e6c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1e6e:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1e72:	6081      	str	r1, [r0, #8]
	switch (method) {
    1e74:	2b02      	cmp	r3, #2
    1e76:	d903      	bls.n	1e80 <sys_notify_finalize+0x18>
    1e78:	2b03      	cmp	r3, #3
    1e7a:	d102      	bne.n	1e82 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1e7c:	6800      	ldr	r0, [r0, #0]
		break;
    1e7e:	e00e      	b.n	1e9e <sys_notify_finalize+0x36>
	switch (method) {
    1e80:	b963      	cbnz	r3, 1e9c <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    1e82:	4d08      	ldr	r5, [pc, #32]	; (1ea4 <sys_notify_finalize+0x3c>)
    1e84:	2345      	movs	r3, #69	; 0x45
    1e86:	462a      	mov	r2, r5
    1e88:	4907      	ldr	r1, [pc, #28]	; (1ea8 <sys_notify_finalize+0x40>)
    1e8a:	4808      	ldr	r0, [pc, #32]	; (1eac <sys_notify_finalize+0x44>)
    1e8c:	f009 fef0 	bl	bc70 <assert_print>
    1e90:	2145      	movs	r1, #69	; 0x45
    1e92:	4628      	mov	r0, r5
    1e94:	f009 fee5 	bl	bc62 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1e98:	2000      	movs	r0, #0
    1e9a:	e000      	b.n	1e9e <sys_notify_finalize+0x36>
	switch (method) {
    1e9c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1e9e:	2300      	movs	r3, #0
    1ea0:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1ea2:	bd38      	pop	{r3, r4, r5, pc}
    1ea4:	0000d6d4 	.word	0x0000d6d4
    1ea8:	0000d1f0 	.word	0x0000d1f0
    1eac:	0000d02c 	.word	0x0000d02c

00001eb0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1eb0:	4b01      	ldr	r3, [pc, #4]	; (1eb8 <__printk_hook_install+0x8>)
    1eb2:	6018      	str	r0, [r3, #0]
}
    1eb4:	4770      	bx	lr
    1eb6:	bf00      	nop
    1eb8:	20000098 	.word	0x20000098

00001ebc <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    1ebc:	b538      	push	{r3, r4, r5, lr}
    1ebe:	4604      	mov	r4, r0
    1ec0:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ec2:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    1ec4:	2a00      	cmp	r2, #0
    1ec6:	db14      	blt.n	1ef2 <process_complete+0x36>
    1ec8:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    1ecc:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1ece:	2a01      	cmp	r2, #1
    1ed0:	d91b      	bls.n	1f0a <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    1ed2:	2b04      	cmp	r3, #4
    1ed4:	d050      	beq.n	1f78 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    1ed6:	4c2f      	ldr	r4, [pc, #188]	; (1f94 <process_complete+0xd8>)
    1ed8:	f240 131b 	movw	r3, #283	; 0x11b
    1edc:	4622      	mov	r2, r4
    1ede:	492e      	ldr	r1, [pc, #184]	; (1f98 <process_complete+0xdc>)
    1ee0:	482e      	ldr	r0, [pc, #184]	; (1f9c <process_complete+0xe0>)
    1ee2:	f009 fec5 	bl	bc70 <assert_print>
    1ee6:	f240 111b 	movw	r1, #283	; 0x11b
    1eea:	4620      	mov	r0, r4
    1eec:	f009 feb9 	bl	bc62 <assert_post_action>
	}
}
    1ef0:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    1ef2:	e9d0 0100 	ldrd	r0, r1, [r0]
    1ef6:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1efa:	2300      	movs	r3, #0
    1efc:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    1efe:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    1f00:	2101      	movs	r1, #1
    1f02:	4620      	mov	r0, r4
    1f04:	f009 fd3d 	bl	b982 <set_state>
    1f08:	e7f2      	b.n	1ef0 <process_complete+0x34>
		*clients = mgr->clients;
    1f0a:	e9d0 0100 	ldrd	r0, r1, [r0]
    1f0e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    1f12:	2200      	movs	r2, #0
    1f14:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    1f16:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    1f18:	2b06      	cmp	r3, #6
    1f1a:	d00f      	beq.n	1f3c <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    1f1c:	2b05      	cmp	r3, #5
    1f1e:	d11d      	bne.n	1f5c <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    1f20:	2100      	movs	r1, #0
    1f22:	4620      	mov	r0, r4
    1f24:	f009 fd2d 	bl	b982 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    1f28:	4620      	mov	r0, r4
    1f2a:	f009 fd51 	bl	b9d0 <process_recheck>
    1f2e:	2800      	cmp	r0, #0
    1f30:	d0de      	beq.n	1ef0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f32:	8ba3      	ldrh	r3, [r4, #28]
    1f34:	f043 0320 	orr.w	r3, r3, #32
    1f38:	83a3      	strh	r3, [r4, #28]
    1f3a:	e7d9      	b.n	1ef0 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1f3c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1f40:	b13b      	cbz	r3, 1f52 <process_complete+0x96>
				mgr->refs += 1U;
    1f42:	8be2      	ldrh	r2, [r4, #30]
    1f44:	3201      	adds	r2, #1
    1f46:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d0f9      	beq.n	1f40 <process_complete+0x84>
	return node->next;
    1f4c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d1f6      	bne.n	1f40 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    1f52:	2102      	movs	r1, #2
    1f54:	4620      	mov	r0, r4
    1f56:	f009 fd14 	bl	b982 <set_state>
    1f5a:	e7e5      	b.n	1f28 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    1f5c:	4d0d      	ldr	r5, [pc, #52]	; (1f94 <process_complete+0xd8>)
    1f5e:	f240 1309 	movw	r3, #265	; 0x109
    1f62:	462a      	mov	r2, r5
    1f64:	490e      	ldr	r1, [pc, #56]	; (1fa0 <process_complete+0xe4>)
    1f66:	480d      	ldr	r0, [pc, #52]	; (1f9c <process_complete+0xe0>)
    1f68:	f009 fe82 	bl	bc70 <assert_print>
    1f6c:	f240 1109 	movw	r1, #265	; 0x109
    1f70:	4628      	mov	r0, r5
    1f72:	f009 fe76 	bl	bc62 <assert_post_action>
    1f76:	e7d3      	b.n	1f20 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    1f78:	2100      	movs	r1, #0
    1f7a:	f009 fd02 	bl	b982 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    1f7e:	4620      	mov	r0, r4
    1f80:	f009 fd26 	bl	b9d0 <process_recheck>
    1f84:	2800      	cmp	r0, #0
    1f86:	d0b3      	beq.n	1ef0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f88:	8ba3      	ldrh	r3, [r4, #28]
    1f8a:	f043 0320 	orr.w	r3, r3, #32
    1f8e:	83a3      	strh	r3, [r4, #28]
    1f90:	e7ae      	b.n	1ef0 <process_complete+0x34>
    1f92:	bf00      	nop
    1f94:	0000d6f8 	.word	0x0000d6f8
    1f98:	0000d1f0 	.word	0x0000d1f0
    1f9c:	0000d02c 	.word	0x0000d02c
    1fa0:	0000d71c 	.word	0x0000d71c

00001fa4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa8:	b083      	sub	sp, #12
    1faa:	4604      	mov	r4, r0
    1fac:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fae:	8b83      	ldrh	r3, [r0, #28]
    1fb0:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    1fb4:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    1fb8:	460d      	mov	r5, r1
    1fba:	b131      	cbz	r1, 1fca <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1fbc:	f1b8 0f00 	cmp.w	r8, #0
    1fc0:	d112      	bne.n	1fe8 <process_event+0x44>
	list->head = NULL;
    1fc2:	2300      	movs	r3, #0
    1fc4:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1fc6:	9301      	str	r3, [sp, #4]
}
    1fc8:	e0aa      	b.n	2120 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    1fca:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 22ac <process_event+0x308>
    1fce:	f240 1333 	movw	r3, #307	; 0x133
    1fd2:	464a      	mov	r2, r9
    1fd4:	49b6      	ldr	r1, [pc, #728]	; (22b0 <process_event+0x30c>)
    1fd6:	48b7      	ldr	r0, [pc, #732]	; (22b4 <process_event+0x310>)
    1fd8:	f009 fe4a 	bl	bc70 <assert_print>
    1fdc:	f240 1133 	movw	r1, #307	; 0x133
    1fe0:	4648      	mov	r0, r9
    1fe2:	f009 fe3e 	bl	bc62 <assert_post_action>
    1fe6:	e7e9      	b.n	1fbc <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    1fe8:	2d01      	cmp	r5, #1
    1fea:	d013      	beq.n	2014 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    1fec:	2d02      	cmp	r5, #2
    1fee:	d116      	bne.n	201e <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ff0:	8ba3      	ldrh	r3, [r4, #28]
    1ff2:	f043 0320 	orr.w	r3, r3, #32
    1ff6:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1ff8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ffa:	4620      	mov	r0, r4
    1ffc:	f006 fd94 	bl	8b28 <z_spin_unlock_valid>
    2000:	2800      	cmp	r0, #0
    2002:	f000 819c 	beq.w	233e <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2006:	f386 8811 	msr	BASEPRI, r6
    200a:	f3bf 8f6f 	isb	sy
}
    200e:	b003      	add	sp, #12
    2010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2014:	8ba3      	ldrh	r3, [r4, #28]
    2016:	f043 0310 	orr.w	r3, r3, #16
    201a:	83a3      	strh	r3, [r4, #28]
    201c:	e7ec      	b.n	1ff8 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    201e:	4da3      	ldr	r5, [pc, #652]	; (22ac <process_event+0x308>)
    2020:	f44f 739e 	mov.w	r3, #316	; 0x13c
    2024:	462a      	mov	r2, r5
    2026:	49a4      	ldr	r1, [pc, #656]	; (22b8 <process_event+0x314>)
    2028:	48a2      	ldr	r0, [pc, #648]	; (22b4 <process_event+0x310>)
    202a:	f009 fe21 	bl	bc70 <assert_print>
    202e:	f44f 719e 	mov.w	r1, #316	; 0x13c
    2032:	4628      	mov	r0, r5
    2034:	f009 fe15 	bl	bc62 <assert_post_action>
    2038:	e7da      	b.n	1ff0 <process_event+0x4c>
			evt = process_recheck(mgr);
    203a:	4620      	mov	r0, r4
    203c:	f009 fcc8 	bl	b9d0 <process_recheck>
    2040:	4605      	mov	r5, r0
    2042:	e06f      	b.n	2124 <process_event+0x180>
			res = mgr->last_res;
    2044:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    2048:	464a      	mov	r2, r9
    204a:	4669      	mov	r1, sp
    204c:	4620      	mov	r0, r4
    204e:	f7ff ff35 	bl	1ebc <process_complete>
		onoff_transition_fn transit = NULL;
    2052:	2500      	movs	r5, #0
    2054:	e011      	b.n	207a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2056:	2f00      	cmp	r7, #0
    2058:	f040 8081 	bne.w	215e <process_event+0x1ba>
	return list->head;
    205c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    205e:	2b00      	cmp	r3, #0
    2060:	f000 808b 	beq.w	217a <process_event+0x1d6>
			transit = mgr->transitions->start;
    2064:	6923      	ldr	r3, [r4, #16]
    2066:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    2068:	2d00      	cmp	r5, #0
    206a:	f000 8094 	beq.w	2196 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    206e:	2106      	movs	r1, #6
    2070:	4620      	mov	r0, r4
    2072:	f009 fc86 	bl	b982 <set_state>
		res = 0;
    2076:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    207a:	8ba3      	ldrh	r3, [r4, #28]
    207c:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2080:	45b8      	cmp	r8, r7
    2082:	f000 810b 	beq.w	229c <process_event+0x2f8>
    2086:	68a2      	ldr	r2, [r4, #8]
    2088:	2a00      	cmp	r2, #0
    208a:	f000 8109 	beq.w	22a0 <process_event+0x2fc>
    208e:	2201      	movs	r2, #1
		if (do_monitors
    2090:	4617      	mov	r7, r2
    2092:	b91a      	cbnz	r2, 209c <process_event+0xf8>
    2094:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2096:	2a00      	cmp	r2, #0
    2098:	f000 8104 	beq.w	22a4 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    209c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    20a0:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    20a2:	f104 0a14 	add.w	sl, r4, #20
    20a6:	4650      	mov	r0, sl
    20a8:	f006 fd3e 	bl	8b28 <z_spin_unlock_valid>
    20ac:	2800      	cmp	r0, #0
    20ae:	f000 8115 	beq.w	22dc <process_event+0x338>
    20b2:	f386 8811 	msr	BASEPRI, r6
    20b6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    20ba:	2f00      	cmp	r7, #0
    20bc:	f040 811f 	bne.w	22fe <process_event+0x35a>
    20c0:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    20c2:	b12b      	cbz	r3, 20d0 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    20c4:	464b      	mov	r3, r9
    20c6:	4642      	mov	r2, r8
    20c8:	4669      	mov	r1, sp
    20ca:	4620      	mov	r0, r4
    20cc:	f009 fcc2 	bl	ba54 <notify_all>
			if (transit != NULL) {
    20d0:	b115      	cbz	r5, 20d8 <process_event+0x134>
				transit(mgr, transition_complete);
    20d2:	497a      	ldr	r1, [pc, #488]	; (22bc <process_event+0x318>)
    20d4:	4620      	mov	r0, r4
    20d6:	47a8      	blx	r5
	__asm__ volatile(
    20d8:	f04f 0320 	mov.w	r3, #32
    20dc:	f3ef 8611 	mrs	r6, BASEPRI
    20e0:	f383 8812 	msr	BASEPRI_MAX, r3
    20e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    20e8:	4650      	mov	r0, sl
    20ea:	f006 fd0d 	bl	8b08 <z_spin_lock_valid>
    20ee:	2800      	cmp	r0, #0
    20f0:	f000 810b 	beq.w	230a <process_event+0x366>
	z_spin_lock_set_owner(l);
    20f4:	4650      	mov	r0, sl
    20f6:	f006 fd27 	bl	8b48 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    20fa:	8ba3      	ldrh	r3, [r4, #28]
    20fc:	f023 0308 	bic.w	r3, r3, #8
    2100:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2102:	8ba3      	ldrh	r3, [r4, #28]
    2104:	f013 0f10 	tst.w	r3, #16
    2108:	f000 810f 	beq.w	232a <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    210c:	f023 0310 	bic.w	r3, r3, #16
    2110:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2112:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2114:	8ba7      	ldrh	r7, [r4, #28]
    2116:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    211a:	2d00      	cmp	r5, #0
    211c:	f43f af6c 	beq.w	1ff8 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    2120:	2d02      	cmp	r5, #2
    2122:	d08a      	beq.n	203a <process_event+0x96>
		if (evt == EVT_NOP) {
    2124:	2d00      	cmp	r5, #0
    2126:	f43f af67 	beq.w	1ff8 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    212a:	2d01      	cmp	r5, #1
    212c:	d08a      	beq.n	2044 <process_event+0xa0>
		} else if (evt == EVT_START) {
    212e:	2d03      	cmp	r5, #3
    2130:	d091      	beq.n	2056 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    2132:	2d04      	cmp	r5, #4
    2134:	d03e      	beq.n	21b4 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    2136:	2d05      	cmp	r5, #5
    2138:	f040 80a0 	bne.w	227c <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    213c:	2f01      	cmp	r7, #1
    213e:	d172      	bne.n	2226 <process_event+0x282>
    2140:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2142:	2b00      	cmp	r3, #0
    2144:	d07d      	beq.n	2242 <process_event+0x29e>
			transit = mgr->transitions->reset;
    2146:	6923      	ldr	r3, [r4, #16]
    2148:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    214a:	2d00      	cmp	r5, #0
    214c:	f000 8087 	beq.w	225e <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    2150:	2105      	movs	r1, #5
    2152:	4620      	mov	r0, r4
    2154:	f009 fc15 	bl	b982 <set_state>
		res = 0;
    2158:	f04f 0900 	mov.w	r9, #0
    215c:	e78d      	b.n	207a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    215e:	4d53      	ldr	r5, [pc, #332]	; (22ac <process_event+0x308>)
    2160:	f44f 73ab 	mov.w	r3, #342	; 0x156
    2164:	462a      	mov	r2, r5
    2166:	4956      	ldr	r1, [pc, #344]	; (22c0 <process_event+0x31c>)
    2168:	4852      	ldr	r0, [pc, #328]	; (22b4 <process_event+0x310>)
    216a:	f009 fd81 	bl	bc70 <assert_print>
    216e:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2172:	4628      	mov	r0, r5
    2174:	f009 fd75 	bl	bc62 <assert_post_action>
    2178:	e770      	b.n	205c <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    217a:	4d4c      	ldr	r5, [pc, #304]	; (22ac <process_event+0x308>)
    217c:	f240 1357 	movw	r3, #343	; 0x157
    2180:	462a      	mov	r2, r5
    2182:	4950      	ldr	r1, [pc, #320]	; (22c4 <process_event+0x320>)
    2184:	484b      	ldr	r0, [pc, #300]	; (22b4 <process_event+0x310>)
    2186:	f009 fd73 	bl	bc70 <assert_print>
    218a:	f240 1157 	movw	r1, #343	; 0x157
    218e:	4628      	mov	r0, r5
    2190:	f009 fd67 	bl	bc62 <assert_post_action>
    2194:	e766      	b.n	2064 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    2196:	f8df 8114 	ldr.w	r8, [pc, #276]	; 22ac <process_event+0x308>
    219a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    219e:	4642      	mov	r2, r8
    21a0:	4949      	ldr	r1, [pc, #292]	; (22c8 <process_event+0x324>)
    21a2:	4844      	ldr	r0, [pc, #272]	; (22b4 <process_event+0x310>)
    21a4:	f009 fd64 	bl	bc70 <assert_print>
    21a8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    21ac:	4640      	mov	r0, r8
    21ae:	f009 fd58 	bl	bc62 <assert_post_action>
    21b2:	e75c      	b.n	206e <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    21b4:	2f02      	cmp	r7, #2
    21b6:	d10b      	bne.n	21d0 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    21b8:	8be3      	ldrh	r3, [r4, #30]
    21ba:	b9bb      	cbnz	r3, 21ec <process_event+0x248>
			transit = mgr->transitions->stop;
    21bc:	6923      	ldr	r3, [r4, #16]
    21be:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    21c0:	b315      	cbz	r5, 2208 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    21c2:	2104      	movs	r1, #4
    21c4:	4620      	mov	r0, r4
    21c6:	f009 fbdc 	bl	b982 <set_state>
		res = 0;
    21ca:	f04f 0900 	mov.w	r9, #0
    21ce:	e754      	b.n	207a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    21d0:	4d36      	ldr	r5, [pc, #216]	; (22ac <process_event+0x308>)
    21d2:	f240 135d 	movw	r3, #349	; 0x15d
    21d6:	462a      	mov	r2, r5
    21d8:	493c      	ldr	r1, [pc, #240]	; (22cc <process_event+0x328>)
    21da:	4836      	ldr	r0, [pc, #216]	; (22b4 <process_event+0x310>)
    21dc:	f009 fd48 	bl	bc70 <assert_print>
    21e0:	f240 115d 	movw	r1, #349	; 0x15d
    21e4:	4628      	mov	r0, r5
    21e6:	f009 fd3c 	bl	bc62 <assert_post_action>
    21ea:	e7e5      	b.n	21b8 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    21ec:	4d2f      	ldr	r5, [pc, #188]	; (22ac <process_event+0x308>)
    21ee:	f44f 73af 	mov.w	r3, #350	; 0x15e
    21f2:	462a      	mov	r2, r5
    21f4:	4936      	ldr	r1, [pc, #216]	; (22d0 <process_event+0x32c>)
    21f6:	482f      	ldr	r0, [pc, #188]	; (22b4 <process_event+0x310>)
    21f8:	f009 fd3a 	bl	bc70 <assert_print>
    21fc:	f44f 71af 	mov.w	r1, #350	; 0x15e
    2200:	4628      	mov	r0, r5
    2202:	f009 fd2e 	bl	bc62 <assert_post_action>
    2206:	e7d9      	b.n	21bc <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    2208:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 22ac <process_event+0x308>
    220c:	f240 1361 	movw	r3, #353	; 0x161
    2210:	4642      	mov	r2, r8
    2212:	492d      	ldr	r1, [pc, #180]	; (22c8 <process_event+0x324>)
    2214:	4827      	ldr	r0, [pc, #156]	; (22b4 <process_event+0x310>)
    2216:	f009 fd2b 	bl	bc70 <assert_print>
    221a:	f240 1161 	movw	r1, #353	; 0x161
    221e:	4640      	mov	r0, r8
    2220:	f009 fd1f 	bl	bc62 <assert_post_action>
    2224:	e7cd      	b.n	21c2 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2226:	4d21      	ldr	r5, [pc, #132]	; (22ac <process_event+0x308>)
    2228:	f44f 73b2 	mov.w	r3, #356	; 0x164
    222c:	462a      	mov	r2, r5
    222e:	4929      	ldr	r1, [pc, #164]	; (22d4 <process_event+0x330>)
    2230:	4820      	ldr	r0, [pc, #128]	; (22b4 <process_event+0x310>)
    2232:	f009 fd1d 	bl	bc70 <assert_print>
    2236:	f44f 71b2 	mov.w	r1, #356	; 0x164
    223a:	4628      	mov	r0, r5
    223c:	f009 fd11 	bl	bc62 <assert_post_action>
    2240:	e77e      	b.n	2140 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2242:	4d1a      	ldr	r5, [pc, #104]	; (22ac <process_event+0x308>)
    2244:	f240 1365 	movw	r3, #357	; 0x165
    2248:	462a      	mov	r2, r5
    224a:	491e      	ldr	r1, [pc, #120]	; (22c4 <process_event+0x320>)
    224c:	4819      	ldr	r0, [pc, #100]	; (22b4 <process_event+0x310>)
    224e:	f009 fd0f 	bl	bc70 <assert_print>
    2252:	f240 1165 	movw	r1, #357	; 0x165
    2256:	4628      	mov	r0, r5
    2258:	f009 fd03 	bl	bc62 <assert_post_action>
    225c:	e773      	b.n	2146 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    225e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 22ac <process_event+0x308>
    2262:	f44f 73b4 	mov.w	r3, #360	; 0x168
    2266:	4642      	mov	r2, r8
    2268:	4917      	ldr	r1, [pc, #92]	; (22c8 <process_event+0x324>)
    226a:	4812      	ldr	r0, [pc, #72]	; (22b4 <process_event+0x310>)
    226c:	f009 fd00 	bl	bc70 <assert_print>
    2270:	f44f 71b4 	mov.w	r1, #360	; 0x168
    2274:	4640      	mov	r0, r8
    2276:	f009 fcf4 	bl	bc62 <assert_post_action>
    227a:	e769      	b.n	2150 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    227c:	4d0b      	ldr	r5, [pc, #44]	; (22ac <process_event+0x308>)
    227e:	f240 136b 	movw	r3, #363	; 0x16b
    2282:	462a      	mov	r2, r5
    2284:	4914      	ldr	r1, [pc, #80]	; (22d8 <process_event+0x334>)
    2286:	480b      	ldr	r0, [pc, #44]	; (22b4 <process_event+0x310>)
    2288:	f009 fcf2 	bl	bc70 <assert_print>
    228c:	f240 116b 	movw	r1, #363	; 0x16b
    2290:	4628      	mov	r0, r5
    2292:	f009 fce6 	bl	bc62 <assert_post_action>
		onoff_transition_fn transit = NULL;
    2296:	2500      	movs	r5, #0
		res = 0;
    2298:	46a9      	mov	r9, r5
    229a:	e6ee      	b.n	207a <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    229c:	2200      	movs	r2, #0
    229e:	e6f7      	b.n	2090 <process_event+0xec>
    22a0:	2200      	movs	r2, #0
    22a2:	e6f5      	b.n	2090 <process_event+0xec>
		    || (transit != NULL)) {
    22a4:	2d00      	cmp	r5, #0
    22a6:	f47f aef9 	bne.w	209c <process_event+0xf8>
    22aa:	e72a      	b.n	2102 <process_event+0x15e>
    22ac:	0000d6f8 	.word	0x0000d6f8
    22b0:	0000d744 	.word	0x0000d744
    22b4:	0000d02c 	.word	0x0000d02c
    22b8:	0000d754 	.word	0x0000d754
    22bc:	00002379 	.word	0x00002379
    22c0:	0000d768 	.word	0x0000d768
    22c4:	0000d774 	.word	0x0000d774
    22c8:	0000d798 	.word	0x0000d798
    22cc:	0000d7b0 	.word	0x0000d7b0
    22d0:	0000d7c8 	.word	0x0000d7c8
    22d4:	0000d7d8 	.word	0x0000d7d8
    22d8:	0000d1f0 	.word	0x0000d1f0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    22dc:	f8df b080 	ldr.w	fp, [pc, #128]	; 2360 <process_event+0x3bc>
    22e0:	23b9      	movs	r3, #185	; 0xb9
    22e2:	465a      	mov	r2, fp
    22e4:	491f      	ldr	r1, [pc, #124]	; (2364 <process_event+0x3c0>)
    22e6:	4820      	ldr	r0, [pc, #128]	; (2368 <process_event+0x3c4>)
    22e8:	f009 fcc2 	bl	bc70 <assert_print>
    22ec:	4651      	mov	r1, sl
    22ee:	481f      	ldr	r0, [pc, #124]	; (236c <process_event+0x3c8>)
    22f0:	f009 fcbe 	bl	bc70 <assert_print>
    22f4:	21b9      	movs	r1, #185	; 0xb9
    22f6:	4658      	mov	r0, fp
    22f8:	f009 fcb3 	bl	bc62 <assert_post_action>
    22fc:	e6d9      	b.n	20b2 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    22fe:	464a      	mov	r2, r9
    2300:	4641      	mov	r1, r8
    2302:	4620      	mov	r0, r4
    2304:	f009 fb45 	bl	b992 <notify_monitors>
    2308:	e6da      	b.n	20c0 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    230a:	4d15      	ldr	r5, [pc, #84]	; (2360 <process_event+0x3bc>)
    230c:	238e      	movs	r3, #142	; 0x8e
    230e:	462a      	mov	r2, r5
    2310:	4917      	ldr	r1, [pc, #92]	; (2370 <process_event+0x3cc>)
    2312:	4815      	ldr	r0, [pc, #84]	; (2368 <process_event+0x3c4>)
    2314:	f009 fcac 	bl	bc70 <assert_print>
    2318:	4651      	mov	r1, sl
    231a:	4816      	ldr	r0, [pc, #88]	; (2374 <process_event+0x3d0>)
    231c:	f009 fca8 	bl	bc70 <assert_print>
    2320:	218e      	movs	r1, #142	; 0x8e
    2322:	4628      	mov	r0, r5
    2324:	f009 fc9d 	bl	bc62 <assert_post_action>
    2328:	e6e4      	b.n	20f4 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    232a:	f013 0f20 	tst.w	r3, #32
    232e:	d004      	beq.n	233a <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2330:	f023 0320 	bic.w	r3, r3, #32
    2334:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    2336:	2502      	movs	r5, #2
    2338:	e6ec      	b.n	2114 <process_event+0x170>
		evt = EVT_NOP;
    233a:	2500      	movs	r5, #0
    233c:	e6ea      	b.n	2114 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    233e:	4d08      	ldr	r5, [pc, #32]	; (2360 <process_event+0x3bc>)
    2340:	23b9      	movs	r3, #185	; 0xb9
    2342:	462a      	mov	r2, r5
    2344:	4907      	ldr	r1, [pc, #28]	; (2364 <process_event+0x3c0>)
    2346:	4808      	ldr	r0, [pc, #32]	; (2368 <process_event+0x3c4>)
    2348:	f009 fc92 	bl	bc70 <assert_print>
    234c:	4621      	mov	r1, r4
    234e:	4807      	ldr	r0, [pc, #28]	; (236c <process_event+0x3c8>)
    2350:	f009 fc8e 	bl	bc70 <assert_print>
    2354:	21b9      	movs	r1, #185	; 0xb9
    2356:	4628      	mov	r0, r5
    2358:	f009 fc83 	bl	bc62 <assert_post_action>
    235c:	e653      	b.n	2006 <process_event+0x62>
    235e:	bf00      	nop
    2360:	0000d7f0 	.word	0x0000d7f0
    2364:	0000d820 	.word	0x0000d820
    2368:	0000d02c 	.word	0x0000d02c
    236c:	0000d838 	.word	0x0000d838
    2370:	0000d850 	.word	0x0000d850
    2374:	0000d868 	.word	0x0000d868

00002378 <transition_complete>:
{
    2378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    237c:	4604      	mov	r4, r0
    237e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2380:	f100 0614 	add.w	r6, r0, #20
    2384:	f04f 0320 	mov.w	r3, #32
    2388:	f3ef 8711 	mrs	r7, BASEPRI
    238c:	f383 8812 	msr	BASEPRI_MAX, r3
    2390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2394:	4630      	mov	r0, r6
    2396:	f006 fbb7 	bl	8b08 <z_spin_lock_valid>
    239a:	b150      	cbz	r0, 23b2 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    239c:	4630      	mov	r0, r6
    239e:	f006 fbd3 	bl	8b48 <z_spin_lock_set_owner>
	mgr->last_res = res;
    23a2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    23a4:	463a      	mov	r2, r7
    23a6:	2101      	movs	r1, #1
    23a8:	4620      	mov	r0, r4
    23aa:	f7ff fdfb 	bl	1fa4 <process_event>
}
    23ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    23b2:	f8df 8020 	ldr.w	r8, [pc, #32]	; 23d4 <transition_complete+0x5c>
    23b6:	238e      	movs	r3, #142	; 0x8e
    23b8:	4642      	mov	r2, r8
    23ba:	4907      	ldr	r1, [pc, #28]	; (23d8 <transition_complete+0x60>)
    23bc:	4807      	ldr	r0, [pc, #28]	; (23dc <transition_complete+0x64>)
    23be:	f009 fc57 	bl	bc70 <assert_print>
    23c2:	4631      	mov	r1, r6
    23c4:	4806      	ldr	r0, [pc, #24]	; (23e0 <transition_complete+0x68>)
    23c6:	f009 fc53 	bl	bc70 <assert_print>
    23ca:	218e      	movs	r1, #142	; 0x8e
    23cc:	4640      	mov	r0, r8
    23ce:	f009 fc48 	bl	bc62 <assert_post_action>
    23d2:	e7e3      	b.n	239c <transition_complete+0x24>
    23d4:	0000d7f0 	.word	0x0000d7f0
    23d8:	0000d850 	.word	0x0000d850
    23dc:	0000d02c 	.word	0x0000d02c
    23e0:	0000d868 	.word	0x0000d868

000023e4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    23e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e8:	4604      	mov	r4, r0
    23ea:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    23ec:	f009 fb09 	bl	ba02 <validate_args>

	if (rv < 0) {
    23f0:	1e06      	subs	r6, r0, #0
    23f2:	db58      	blt.n	24a6 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    23f4:	f104 0714 	add.w	r7, r4, #20
    23f8:	f04f 0320 	mov.w	r3, #32
    23fc:	f3ef 8911 	mrs	r9, BASEPRI
    2400:	f383 8812 	msr	BASEPRI_MAX, r3
    2404:	f3bf 8f6f 	isb	sy
    2408:	4638      	mov	r0, r7
    240a:	f006 fb7d 	bl	8b08 <z_spin_lock_valid>
    240e:	b1e8      	cbz	r0, 244c <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    2410:	4638      	mov	r0, r7
    2412:	f006 fb99 	bl	8b48 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2416:	8ba5      	ldrh	r5, [r4, #28]
    2418:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    241c:	8be3      	ldrh	r3, [r4, #30]
    241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2422:	4293      	cmp	r3, r2
    2424:	d056      	beq.n	24d4 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    2426:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    2428:	2d02      	cmp	r5, #2
    242a:	d01f      	beq.n	246c <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    242c:	b32d      	cbz	r5, 247a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    242e:	2d04      	cmp	r5, #4
    2430:	d023      	beq.n	247a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    2432:	2d06      	cmp	r5, #6
    2434:	d021      	beq.n	247a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    2436:	2d05      	cmp	r5, #5
    2438:	d053      	beq.n	24e2 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    243a:	2d01      	cmp	r5, #1
    243c:	d136      	bne.n	24ac <onoff_request+0xc8>
		rv = -EIO;
    243e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    2442:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2446:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2448:	4652      	mov	r2, sl
    244a:	e01c      	b.n	2486 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    244c:	4d3c      	ldr	r5, [pc, #240]	; (2540 <onoff_request+0x15c>)
    244e:	238e      	movs	r3, #142	; 0x8e
    2450:	462a      	mov	r2, r5
    2452:	493c      	ldr	r1, [pc, #240]	; (2544 <onoff_request+0x160>)
    2454:	483c      	ldr	r0, [pc, #240]	; (2548 <onoff_request+0x164>)
    2456:	f009 fc0b 	bl	bc70 <assert_print>
    245a:	4639      	mov	r1, r7
    245c:	483b      	ldr	r0, [pc, #236]	; (254c <onoff_request+0x168>)
    245e:	f009 fc07 	bl	bc70 <assert_print>
    2462:	218e      	movs	r1, #142	; 0x8e
    2464:	4628      	mov	r0, r5
    2466:	f009 fbfc 	bl	bc62 <assert_post_action>
    246a:	e7d1      	b.n	2410 <onoff_request+0x2c>
		mgr->refs += 1U;
    246c:	3301      	adds	r3, #1
    246e:	83e3      	strh	r3, [r4, #30]
		notify = true;
    2470:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    2474:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    2476:	461a      	mov	r2, r3
    2478:	e005      	b.n	2486 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    247a:	fab5 f385 	clz	r3, r5
    247e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    2480:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    2484:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    2486:	b142      	cbz	r2, 249a <onoff_request+0xb6>
	parent->next = child;
    2488:	2200      	movs	r2, #0
    248a:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    248e:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2490:	b372      	cbz	r2, 24f0 <onoff_request+0x10c>
	parent->next = child;
    2492:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    2496:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    249a:	b373      	cbz	r3, 24fa <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    249c:	464a      	mov	r2, r9
    249e:	2102      	movs	r1, #2
    24a0:	4620      	mov	r0, r4
    24a2:	f7ff fd7f 	bl	1fa4 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    24a6:	4630      	mov	r0, r6
    24a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    24ac:	4e28      	ldr	r6, [pc, #160]	; (2550 <onoff_request+0x16c>)
    24ae:	f240 13c9 	movw	r3, #457	; 0x1c9
    24b2:	4632      	mov	r2, r6
    24b4:	4927      	ldr	r1, [pc, #156]	; (2554 <onoff_request+0x170>)
    24b6:	4824      	ldr	r0, [pc, #144]	; (2548 <onoff_request+0x164>)
    24b8:	f009 fbda 	bl	bc70 <assert_print>
    24bc:	f240 11c9 	movw	r1, #457	; 0x1c9
    24c0:	4630      	mov	r0, r6
    24c2:	f009 fbce 	bl	bc62 <assert_post_action>
		rv = -EIO;
    24c6:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    24ca:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    24ce:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    24d0:	4652      	mov	r2, sl
    24d2:	e7d8      	b.n	2486 <onoff_request+0xa2>
		rv = -EAGAIN;
    24d4:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    24d8:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    24dc:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    24de:	4652      	mov	r2, sl
    24e0:	e7d1      	b.n	2486 <onoff_request+0xa2>
		rv = -ENOTSUP;
    24e2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    24e6:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    24ea:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    24ec:	4652      	mov	r2, sl
    24ee:	e7ca      	b.n	2486 <onoff_request+0xa2>
    24f0:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    24f4:	f8c4 8000 	str.w	r8, [r4]
}
    24f8:	e7cf      	b.n	249a <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24fa:	4638      	mov	r0, r7
    24fc:	f006 fb14 	bl	8b28 <z_spin_unlock_valid>
    2500:	b168      	cbz	r0, 251e <onoff_request+0x13a>
	__asm__ volatile(
    2502:	f389 8811 	msr	BASEPRI, r9
    2506:	f3bf 8f6f 	isb	sy
		if (notify) {
    250a:	f1ba 0f00 	cmp.w	sl, #0
    250e:	d0ca      	beq.n	24a6 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    2510:	2300      	movs	r3, #0
    2512:	462a      	mov	r2, r5
    2514:	4641      	mov	r1, r8
    2516:	4620      	mov	r0, r4
    2518:	f009 fa89 	bl	ba2e <notify_one>
    251c:	e7c3      	b.n	24a6 <onoff_request+0xc2>
    251e:	f8df b020 	ldr.w	fp, [pc, #32]	; 2540 <onoff_request+0x15c>
    2522:	23b9      	movs	r3, #185	; 0xb9
    2524:	465a      	mov	r2, fp
    2526:	490c      	ldr	r1, [pc, #48]	; (2558 <onoff_request+0x174>)
    2528:	4807      	ldr	r0, [pc, #28]	; (2548 <onoff_request+0x164>)
    252a:	f009 fba1 	bl	bc70 <assert_print>
    252e:	4639      	mov	r1, r7
    2530:	480a      	ldr	r0, [pc, #40]	; (255c <onoff_request+0x178>)
    2532:	f009 fb9d 	bl	bc70 <assert_print>
    2536:	21b9      	movs	r1, #185	; 0xb9
    2538:	4658      	mov	r0, fp
    253a:	f009 fb92 	bl	bc62 <assert_post_action>
    253e:	e7e0      	b.n	2502 <onoff_request+0x11e>
    2540:	0000d7f0 	.word	0x0000d7f0
    2544:	0000d850 	.word	0x0000d850
    2548:	0000d02c 	.word	0x0000d02c
    254c:	0000d868 	.word	0x0000d868
    2550:	0000d6f8 	.word	0x0000d6f8
    2554:	0000d7d8 	.word	0x0000d7d8
    2558:	0000d820 	.word	0x0000d820
    255c:	0000d838 	.word	0x0000d838

00002560 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2564:	4606      	mov	r6, r0
    2566:	460d      	mov	r5, r1
    2568:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    256a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    256e:	d222      	bcs.n	25b6 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2570:	2c04      	cmp	r4, #4
    2572:	d931      	bls.n	25d8 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    2574:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2576:	1dec      	adds	r4, r5, #7
    2578:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    257c:	4415      	add	r5, r2
    257e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2582:	1b2d      	subs	r5, r5, r4
    2584:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2588:	2d17      	cmp	r5, #23
    258a:	d936      	bls.n	25fa <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    258c:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    258e:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    2592:	2300      	movs	r3, #0
    2594:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    2596:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    259a:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    259e:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    25a2:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    25a4:	3607      	adds	r6, #7
    25a6:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    25aa:	f109 0301 	add.w	r3, r9, #1
    25ae:	4543      	cmp	r3, r8
    25b0:	d834      	bhi.n	261c <sys_heap_init+0xbc>
{
    25b2:	2300      	movs	r3, #0
    25b4:	e049      	b.n	264a <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    25b6:	4f38      	ldr	r7, [pc, #224]	; (2698 <sys_heap_init+0x138>)
    25b8:	f240 13e3 	movw	r3, #483	; 0x1e3
    25bc:	463a      	mov	r2, r7
    25be:	4937      	ldr	r1, [pc, #220]	; (269c <sys_heap_init+0x13c>)
    25c0:	4837      	ldr	r0, [pc, #220]	; (26a0 <sys_heap_init+0x140>)
    25c2:	f009 fb55 	bl	bc70 <assert_print>
    25c6:	4837      	ldr	r0, [pc, #220]	; (26a4 <sys_heap_init+0x144>)
    25c8:	f009 fb52 	bl	bc70 <assert_print>
    25cc:	f240 11e3 	movw	r1, #483	; 0x1e3
    25d0:	4638      	mov	r0, r7
    25d2:	f009 fb46 	bl	bc62 <assert_post_action>
    25d6:	e7cb      	b.n	2570 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    25d8:	4f2f      	ldr	r7, [pc, #188]	; (2698 <sys_heap_init+0x138>)
    25da:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    25de:	463a      	mov	r2, r7
    25e0:	4931      	ldr	r1, [pc, #196]	; (26a8 <sys_heap_init+0x148>)
    25e2:	482f      	ldr	r0, [pc, #188]	; (26a0 <sys_heap_init+0x140>)
    25e4:	f009 fb44 	bl	bc70 <assert_print>
    25e8:	4830      	ldr	r0, [pc, #192]	; (26ac <sys_heap_init+0x14c>)
    25ea:	f009 fb41 	bl	bc70 <assert_print>
    25ee:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    25f2:	4638      	mov	r0, r7
    25f4:	f009 fb35 	bl	bc62 <assert_post_action>
    25f8:	e7bc      	b.n	2574 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    25fa:	4f27      	ldr	r7, [pc, #156]	; (2698 <sys_heap_init+0x138>)
    25fc:	f240 13f3 	movw	r3, #499	; 0x1f3
    2600:	463a      	mov	r2, r7
    2602:	492b      	ldr	r1, [pc, #172]	; (26b0 <sys_heap_init+0x150>)
    2604:	4826      	ldr	r0, [pc, #152]	; (26a0 <sys_heap_init+0x140>)
    2606:	f009 fb33 	bl	bc70 <assert_print>
    260a:	4828      	ldr	r0, [pc, #160]	; (26ac <sys_heap_init+0x14c>)
    260c:	f009 fb30 	bl	bc70 <assert_print>
    2610:	f240 11f3 	movw	r1, #499	; 0x1f3
    2614:	4638      	mov	r0, r7
    2616:	f009 fb24 	bl	bc62 <assert_post_action>
    261a:	e7b7      	b.n	258c <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    261c:	f8df a078 	ldr.w	sl, [pc, #120]	; 2698 <sys_heap_init+0x138>
    2620:	f44f 7301 	mov.w	r3, #516	; 0x204
    2624:	4652      	mov	r2, sl
    2626:	4923      	ldr	r1, [pc, #140]	; (26b4 <sys_heap_init+0x154>)
    2628:	481d      	ldr	r0, [pc, #116]	; (26a0 <sys_heap_init+0x140>)
    262a:	f009 fb21 	bl	bc70 <assert_print>
    262e:	481f      	ldr	r0, [pc, #124]	; (26ac <sys_heap_init+0x14c>)
    2630:	f009 fb1e 	bl	bc70 <assert_print>
    2634:	f44f 7101 	mov.w	r1, #516	; 0x204
    2638:	4650      	mov	r0, sl
    263a:	f009 fb12 	bl	bc62 <assert_post_action>
    263e:	e7b8      	b.n	25b2 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    2640:	1d1a      	adds	r2, r3, #4
    2642:	2100      	movs	r1, #0
    2644:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    2648:	3301      	adds	r3, #1
    264a:	42bb      	cmp	r3, r7
    264c:	dbf8      	blt.n	2640 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    264e:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    2652:	b29b      	uxth	r3, r3
    2654:	8063      	strh	r3, [r4, #2]
    2656:	2200      	movs	r2, #0
    2658:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    265a:	f043 0301 	orr.w	r3, r3, #1
    265e:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2660:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2664:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    2668:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    266c:	1cb3      	adds	r3, r6, #2
    266e:	52e1      	strh	r1, [r4, r3]
    2670:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    2674:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    2678:	1ca9      	adds	r1, r5, #2
    267a:	5262      	strh	r2, [r4, r1]
    267c:	4425      	add	r5, r4
    267e:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2682:	886b      	ldrh	r3, [r5, #2]
    2684:	f043 0301 	orr.w	r3, r3, #1
    2688:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    268a:	4649      	mov	r1, r9
    268c:	4620      	mov	r0, r4
    268e:	f009 fa46 	bl	bb1e <free_list_add>
}
    2692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2696:	bf00      	nop
    2698:	0000d880 	.word	0x0000d880
    269c:	0000d954 	.word	0x0000d954
    26a0:	0000d02c 	.word	0x0000d02c
    26a4:	0000d96c 	.word	0x0000d96c
    26a8:	0000d984 	.word	0x0000d984
    26ac:	0000d9a8 	.word	0x0000d9a8
    26b0:	0000d9c4 	.word	0x0000d9c4
    26b4:	0000d9f0 	.word	0x0000d9f0

000026b8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	b082      	sub	sp, #8
    26bc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    26be:	2300      	movs	r3, #0
    26c0:	6003      	str	r3, [r0, #0]
    26c2:	6043      	str	r3, [r0, #4]
    26c4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    26c6:	784b      	ldrb	r3, [r1, #1]
    26c8:	2b25      	cmp	r3, #37	; 0x25
    26ca:	d002      	beq.n	26d2 <extract_conversion+0x1a>
    26cc:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    26ce:	2501      	movs	r5, #1
    26d0:	e01f      	b.n	2712 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    26d2:	1c88      	adds	r0, r1, #2
    26d4:	70e3      	strb	r3, [r4, #3]
		return sp;
    26d6:	e145      	b.n	2964 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    26d8:	7823      	ldrb	r3, [r4, #0]
    26da:	f043 0304 	orr.w	r3, r3, #4
    26de:	7023      	strb	r3, [r4, #0]
		if (loop) {
    26e0:	b1b5      	cbz	r5, 2710 <extract_conversion+0x58>
			++sp;
    26e2:	3601      	adds	r6, #1
    26e4:	e014      	b.n	2710 <extract_conversion+0x58>
			conv->flag_plus = true;
    26e6:	7823      	ldrb	r3, [r4, #0]
    26e8:	f043 0308 	orr.w	r3, r3, #8
    26ec:	7023      	strb	r3, [r4, #0]
			break;
    26ee:	e7f7      	b.n	26e0 <extract_conversion+0x28>
			conv->flag_space = true;
    26f0:	7823      	ldrb	r3, [r4, #0]
    26f2:	f043 0310 	orr.w	r3, r3, #16
    26f6:	7023      	strb	r3, [r4, #0]
			break;
    26f8:	e7f2      	b.n	26e0 <extract_conversion+0x28>
			conv->flag_hash = true;
    26fa:	7823      	ldrb	r3, [r4, #0]
    26fc:	f043 0320 	orr.w	r3, r3, #32
    2700:	7023      	strb	r3, [r4, #0]
			break;
    2702:	e7ed      	b.n	26e0 <extract_conversion+0x28>
			conv->flag_zero = true;
    2704:	7823      	ldrb	r3, [r4, #0]
    2706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    270a:	7023      	strb	r3, [r4, #0]
			break;
    270c:	e7e8      	b.n	26e0 <extract_conversion+0x28>
		switch (*sp) {
    270e:	2500      	movs	r5, #0
	} while (loop);
    2710:	b345      	cbz	r5, 2764 <extract_conversion+0xac>
		switch (*sp) {
    2712:	7833      	ldrb	r3, [r6, #0]
    2714:	3b20      	subs	r3, #32
    2716:	2b10      	cmp	r3, #16
    2718:	d8f9      	bhi.n	270e <extract_conversion+0x56>
    271a:	a201      	add	r2, pc, #4	; (adr r2, 2720 <extract_conversion+0x68>)
    271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2720:	000026f1 	.word	0x000026f1
    2724:	0000270f 	.word	0x0000270f
    2728:	0000270f 	.word	0x0000270f
    272c:	000026fb 	.word	0x000026fb
    2730:	0000270f 	.word	0x0000270f
    2734:	0000270f 	.word	0x0000270f
    2738:	0000270f 	.word	0x0000270f
    273c:	0000270f 	.word	0x0000270f
    2740:	0000270f 	.word	0x0000270f
    2744:	0000270f 	.word	0x0000270f
    2748:	0000270f 	.word	0x0000270f
    274c:	000026e7 	.word	0x000026e7
    2750:	0000270f 	.word	0x0000270f
    2754:	000026d9 	.word	0x000026d9
    2758:	0000270f 	.word	0x0000270f
    275c:	0000270f 	.word	0x0000270f
    2760:	00002705 	.word	0x00002705
	if (conv->flag_zero && conv->flag_dash) {
    2764:	7823      	ldrb	r3, [r4, #0]
    2766:	f003 0344 	and.w	r3, r3, #68	; 0x44
    276a:	2b44      	cmp	r3, #68	; 0x44
    276c:	d05f      	beq.n	282e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    276e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    2770:	7823      	ldrb	r3, [r4, #0]
    2772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2776:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    2778:	7833      	ldrb	r3, [r6, #0]
    277a:	2b2a      	cmp	r3, #42	; 0x2a
    277c:	d05c      	beq.n	2838 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    277e:	a801      	add	r0, sp, #4
    2780:	f009 f9d9 	bl	bb36 <extract_decimal>
	if (sp != wp) {
    2784:	9b01      	ldr	r3, [sp, #4]
    2786:	429e      	cmp	r6, r3
    2788:	d00f      	beq.n	27aa <extract_conversion+0xf2>
		conv->width_present = true;
    278a:	7823      	ldrb	r3, [r4, #0]
    278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2790:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    2792:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    2794:	b2db      	uxtb	r3, r3
    2796:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    279a:	2800      	cmp	r0, #0
    279c:	db54      	blt.n	2848 <extract_conversion+0x190>
    279e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    27a0:	4313      	orrs	r3, r2
    27a2:	7822      	ldrb	r2, [r4, #0]
    27a4:	f363 0241 	bfi	r2, r3, #1, #1
    27a8:	7022      	strb	r2, [r4, #0]
	return sp;
    27aa:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    27ac:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    27ae:	781b      	ldrb	r3, [r3, #0]
    27b0:	2b2e      	cmp	r3, #46	; 0x2e
    27b2:	bf14      	ite	ne
    27b4:	2300      	movne	r3, #0
    27b6:	2301      	moveq	r3, #1
    27b8:	7862      	ldrb	r2, [r4, #1]
    27ba:	f363 0241 	bfi	r2, r3, #1, #1
    27be:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    27c0:	2b00      	cmp	r3, #0
    27c2:	d043      	beq.n	284c <extract_conversion+0x194>
	++sp;
    27c4:	9b01      	ldr	r3, [sp, #4]
    27c6:	1c5a      	adds	r2, r3, #1
    27c8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    27ca:	785b      	ldrb	r3, [r3, #1]
    27cc:	2b2a      	cmp	r3, #42	; 0x2a
    27ce:	d03f      	beq.n	2850 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    27d0:	a801      	add	r0, sp, #4
    27d2:	f009 f9b0 	bl	bb36 <extract_decimal>
	conv->prec_value = prec;
    27d6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    27d8:	7823      	ldrb	r3, [r4, #0]
    27da:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    27de:	2800      	cmp	r0, #0
    27e0:	db3e      	blt.n	2860 <extract_conversion+0x1a8>
    27e2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    27e4:	4313      	orrs	r3, r2
    27e6:	7822      	ldrb	r2, [r4, #0]
    27e8:	f363 0241 	bfi	r2, r3, #1, #1
    27ec:	7022      	strb	r2, [r4, #0]
	return sp;
    27ee:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    27f0:	7803      	ldrb	r3, [r0, #0]
    27f2:	3b4c      	subs	r3, #76	; 0x4c
    27f4:	2b2e      	cmp	r3, #46	; 0x2e
    27f6:	f200 809d 	bhi.w	2934 <extract_conversion+0x27c>
    27fa:	e8df f003 	tbb	[pc, r3]
    27fe:	9b90      	.short	0x9b90
    2800:	9b9b9b9b 	.word	0x9b9b9b9b
    2804:	9b9b9b9b 	.word	0x9b9b9b9b
    2808:	9b9b9b9b 	.word	0x9b9b9b9b
    280c:	9b9b9b9b 	.word	0x9b9b9b9b
    2810:	9b9b9b9b 	.word	0x9b9b9b9b
    2814:	9b9b9b9b 	.word	0x9b9b9b9b
    2818:	9b339b9b 	.word	0x9b339b9b
    281c:	9b459b57 	.word	0x9b459b57
    2820:	9b9b9b9b 	.word	0x9b9b9b9b
    2824:	9b899b9b 	.word	0x9b899b9b
    2828:	9b9b9b9b 	.word	0x9b9b9b9b
    282c:	82          	.byte	0x82
    282d:	00          	.byte	0x00
		conv->flag_zero = false;
    282e:	7823      	ldrb	r3, [r4, #0]
    2830:	f36f 1386 	bfc	r3, #6, #1
    2834:	7023      	strb	r3, [r4, #0]
    2836:	e79a      	b.n	276e <extract_conversion+0xb6>
		conv->width_star = true;
    2838:	7863      	ldrb	r3, [r4, #1]
    283a:	f043 0301 	orr.w	r3, r3, #1
    283e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2840:	4633      	mov	r3, r6
    2842:	3301      	adds	r3, #1
    2844:	9301      	str	r3, [sp, #4]
    2846:	e7b1      	b.n	27ac <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    2848:	2201      	movs	r2, #1
    284a:	e7a9      	b.n	27a0 <extract_conversion+0xe8>
		return sp;
    284c:	9801      	ldr	r0, [sp, #4]
    284e:	e7cf      	b.n	27f0 <extract_conversion+0x138>
		conv->prec_star = true;
    2850:	7863      	ldrb	r3, [r4, #1]
    2852:	f043 0304 	orr.w	r3, r3, #4
    2856:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2858:	4610      	mov	r0, r2
    285a:	3001      	adds	r0, #1
    285c:	9001      	str	r0, [sp, #4]
    285e:	e7c7      	b.n	27f0 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    2860:	2201      	movs	r2, #1
    2862:	e7bf      	b.n	27e4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    2864:	1c42      	adds	r2, r0, #1
    2866:	7843      	ldrb	r3, [r0, #1]
    2868:	2b68      	cmp	r3, #104	; 0x68
    286a:	d006      	beq.n	287a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    286c:	7863      	ldrb	r3, [r4, #1]
    286e:	2102      	movs	r1, #2
    2870:	f361 03c6 	bfi	r3, r1, #3, #4
    2874:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    2876:	4610      	mov	r0, r2
    2878:	e01e      	b.n	28b8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    287a:	7863      	ldrb	r3, [r4, #1]
    287c:	2201      	movs	r2, #1
    287e:	f362 03c6 	bfi	r3, r2, #3, #4
    2882:	7063      	strb	r3, [r4, #1]
			++sp;
    2884:	3002      	adds	r0, #2
    2886:	e017      	b.n	28b8 <extract_conversion+0x200>
		if (*++sp == 'l') {
    2888:	1c42      	adds	r2, r0, #1
    288a:	7843      	ldrb	r3, [r0, #1]
    288c:	2b6c      	cmp	r3, #108	; 0x6c
    288e:	d006      	beq.n	289e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    2890:	7863      	ldrb	r3, [r4, #1]
    2892:	2103      	movs	r1, #3
    2894:	f361 03c6 	bfi	r3, r1, #3, #4
    2898:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    289a:	4610      	mov	r0, r2
    289c:	e00c      	b.n	28b8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    289e:	7863      	ldrb	r3, [r4, #1]
    28a0:	2204      	movs	r2, #4
    28a2:	f362 03c6 	bfi	r3, r2, #3, #4
    28a6:	7063      	strb	r3, [r4, #1]
			++sp;
    28a8:	3002      	adds	r0, #2
    28aa:	e005      	b.n	28b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    28ac:	7863      	ldrb	r3, [r4, #1]
    28ae:	2205      	movs	r2, #5
    28b0:	f362 03c6 	bfi	r3, r2, #3, #4
    28b4:	7063      	strb	r3, [r4, #1]
		++sp;
    28b6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    28b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    28bc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    28be:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    28c2:	2a37      	cmp	r2, #55	; 0x37
    28c4:	d87d      	bhi.n	29c2 <extract_conversion+0x30a>
    28c6:	e8df f002 	tbb	[pc, r2]
    28ca:	7c5e      	.short	0x7c5e
    28cc:	5e5e7c7c 	.word	0x5e5e7c7c
    28d0:	7c7c7c5e 	.word	0x7c7c7c5e
    28d4:	7c7c7c7c 	.word	0x7c7c7c7c
    28d8:	7c7c7c7c 	.word	0x7c7c7c7c
    28dc:	7c7c7c7c 	.word	0x7c7c7c7c
    28e0:	7c7c4f7c 	.word	0x7c7c4f7c
    28e4:	7c7c7c7c 	.word	0x7c7c7c7c
    28e8:	7c5e7c7c 	.word	0x7c5e7c7c
    28ec:	5e5e3a4f 	.word	0x5e5e3a4f
    28f0:	7c3a7c5e 	.word	0x7c3a7c5e
    28f4:	657c7c7c 	.word	0x657c7c7c
    28f8:	7c7c714f 	.word	0x7c7c714f
    28fc:	7c4f7c71 	.word	0x7c4f7c71
    2900:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    2902:	7863      	ldrb	r3, [r4, #1]
    2904:	2206      	movs	r2, #6
    2906:	f362 03c6 	bfi	r3, r2, #3, #4
    290a:	7063      	strb	r3, [r4, #1]
		++sp;
    290c:	3001      	adds	r0, #1
		break;
    290e:	e7d3      	b.n	28b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    2910:	7863      	ldrb	r3, [r4, #1]
    2912:	2207      	movs	r2, #7
    2914:	f362 03c6 	bfi	r3, r2, #3, #4
    2918:	7063      	strb	r3, [r4, #1]
		++sp;
    291a:	3001      	adds	r0, #1
		break;
    291c:	e7cc      	b.n	28b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    291e:	7863      	ldrb	r3, [r4, #1]
    2920:	2208      	movs	r2, #8
    2922:	f362 03c6 	bfi	r3, r2, #3, #4
    2926:	7063      	strb	r3, [r4, #1]
		++sp;
    2928:	3001      	adds	r0, #1
		conv->unsupported = true;
    292a:	7823      	ldrb	r3, [r4, #0]
    292c:	f043 0302 	orr.w	r3, r3, #2
    2930:	7023      	strb	r3, [r4, #0]
		break;
    2932:	e7c1      	b.n	28b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    2934:	7863      	ldrb	r3, [r4, #1]
    2936:	f36f 03c6 	bfc	r3, #3, #4
    293a:	7063      	strb	r3, [r4, #1]
		break;
    293c:	e7bc      	b.n	28b8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    293e:	78a2      	ldrb	r2, [r4, #2]
    2940:	2101      	movs	r1, #1
    2942:	f361 0202 	bfi	r2, r1, #0, #3
    2946:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2948:	7862      	ldrb	r2, [r4, #1]
    294a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    294e:	2a40      	cmp	r2, #64	; 0x40
    2950:	d010      	beq.n	2974 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    2952:	2b63      	cmp	r3, #99	; 0x63
    2954:	d013      	beq.n	297e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    2956:	7823      	ldrb	r3, [r4, #0]
    2958:	f3c3 0240 	ubfx	r2, r3, #1, #1
    295c:	4315      	orrs	r5, r2
    295e:	f365 0341 	bfi	r3, r5, #1, #1
    2962:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    2964:	b002      	add	sp, #8
    2966:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    2968:	78a2      	ldrb	r2, [r4, #2]
    296a:	2102      	movs	r1, #2
    296c:	f361 0202 	bfi	r2, r1, #0, #3
    2970:	70a2      	strb	r2, [r4, #2]
    2972:	e7e9      	b.n	2948 <extract_conversion+0x290>
			conv->invalid = true;
    2974:	7821      	ldrb	r1, [r4, #0]
    2976:	f041 0101 	orr.w	r1, r1, #1
    297a:	7021      	strb	r1, [r4, #0]
    297c:	e7e9      	b.n	2952 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    297e:	1e15      	subs	r5, r2, #0
    2980:	bf18      	it	ne
    2982:	2501      	movne	r5, #1
    2984:	e7e7      	b.n	2956 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    2986:	78a3      	ldrb	r3, [r4, #2]
    2988:	2204      	movs	r2, #4
    298a:	f362 0302 	bfi	r3, r2, #0, #3
    298e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    2990:	2501      	movs	r5, #1
			break;
    2992:	e7e0      	b.n	2956 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2994:	78a3      	ldrb	r3, [r4, #2]
    2996:	2203      	movs	r2, #3
    2998:	f362 0302 	bfi	r3, r2, #0, #3
    299c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    299e:	7863      	ldrb	r3, [r4, #1]
    29a0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    29a4:	2b40      	cmp	r3, #64	; 0x40
    29a6:	d1d6      	bne.n	2956 <extract_conversion+0x29e>
			unsupported = true;
    29a8:	2501      	movs	r5, #1
    29aa:	e7d4      	b.n	2956 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    29ac:	78a3      	ldrb	r3, [r4, #2]
    29ae:	2203      	movs	r2, #3
    29b0:	f362 0302 	bfi	r3, r2, #0, #3
    29b4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    29b6:	7863      	ldrb	r3, [r4, #1]
    29b8:	f013 0f78 	tst.w	r3, #120	; 0x78
    29bc:	d0cb      	beq.n	2956 <extract_conversion+0x29e>
			unsupported = true;
    29be:	2501      	movs	r5, #1
    29c0:	e7c9      	b.n	2956 <extract_conversion+0x29e>
		conv->invalid = true;
    29c2:	7823      	ldrb	r3, [r4, #0]
    29c4:	f043 0301 	orr.w	r3, r3, #1
    29c8:	7023      	strb	r3, [r4, #0]
		break;
    29ca:	e7c4      	b.n	2956 <extract_conversion+0x29e>

000029cc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    29cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d0:	b091      	sub	sp, #68	; 0x44
    29d2:	4606      	mov	r6, r0
    29d4:	460d      	mov	r5, r1
    29d6:	4691      	mov	r9, r2
    29d8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    29da:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    29dc:	f899 0000 	ldrb.w	r0, [r9]
    29e0:	2800      	cmp	r0, #0
    29e2:	f000 82d5 	beq.w	2f90 <cbvprintf+0x5c4>
		if (*fp != '%') {
    29e6:	2825      	cmp	r0, #37	; 0x25
    29e8:	d008      	beq.n	29fc <cbvprintf+0x30>
			OUTC(*fp++);
    29ea:	f109 0901 	add.w	r9, r9, #1
    29ee:	4629      	mov	r1, r5
    29f0:	47b0      	blx	r6
    29f2:	2800      	cmp	r0, #0
    29f4:	f2c0 82cd 	blt.w	2f92 <cbvprintf+0x5c6>
    29f8:	3401      	adds	r4, #1
			continue;
    29fa:	e7ef      	b.n	29dc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    29fc:	2300      	movs	r3, #0
    29fe:	9304      	str	r3, [sp, #16]
    2a00:	9305      	str	r3, [sp, #20]
    2a02:	9306      	str	r3, [sp, #24]
    2a04:	9307      	str	r3, [sp, #28]
    2a06:	9308      	str	r3, [sp, #32]
    2a08:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    2a0a:	4649      	mov	r1, r9
    2a0c:	a806      	add	r0, sp, #24
    2a0e:	f7ff fe53 	bl	26b8 <extract_conversion>
    2a12:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2a14:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2a18:	f013 0f01 	tst.w	r3, #1
    2a1c:	f000 8097 	beq.w	2b4e <cbvprintf+0x182>
			width = va_arg(ap, int);
    2a20:	9b03      	ldr	r3, [sp, #12]
    2a22:	1d1a      	adds	r2, r3, #4
    2a24:	9203      	str	r2, [sp, #12]
    2a26:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2a28:	2f00      	cmp	r7, #0
    2a2a:	f2c0 8088 	blt.w	2b3e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2a2e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2a32:	f013 0f04 	tst.w	r3, #4
    2a36:	f000 809c 	beq.w	2b72 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    2a3a:	9b03      	ldr	r3, [sp, #12]
    2a3c:	1d1a      	adds	r2, r3, #4
    2a3e:	9203      	str	r2, [sp, #12]
    2a40:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    2a44:	f1ba 0f00 	cmp.w	sl, #0
    2a48:	f2c0 808a 	blt.w	2b60 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2a4c:	2300      	movs	r3, #0
    2a4e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    2a50:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2a52:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2a56:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2a5a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    2a5e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2a62:	2b01      	cmp	r3, #1
    2a64:	f000 808e 	beq.w	2b84 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2a68:	2b02      	cmp	r3, #2
    2a6a:	f000 80d3 	beq.w	2c14 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2a6e:	2b04      	cmp	r3, #4
    2a70:	f000 8124 	beq.w	2cbc <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2a74:	2b03      	cmp	r3, #3
    2a76:	f000 813b 	beq.w	2cf0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2a7a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    2a7e:	f018 0b03 	ands.w	fp, r8, #3
    2a82:	f040 813b 	bne.w	2cfc <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2a86:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2a8a:	3b25      	subs	r3, #37	; 0x25
    2a8c:	2b53      	cmp	r3, #83	; 0x53
    2a8e:	f200 81e6 	bhi.w	2e5e <cbvprintf+0x492>
    2a92:	e8df f013 	tbh	[pc, r3, lsl #1]
    2a96:	0140      	.short	0x0140
    2a98:	01e401e4 	.word	0x01e401e4
    2a9c:	01e401e4 	.word	0x01e401e4
    2aa0:	01e401e4 	.word	0x01e401e4
    2aa4:	01e401e4 	.word	0x01e401e4
    2aa8:	01e401e4 	.word	0x01e401e4
    2aac:	01e401e4 	.word	0x01e401e4
    2ab0:	01e401e4 	.word	0x01e401e4
    2ab4:	01e401e4 	.word	0x01e401e4
    2ab8:	01e401e4 	.word	0x01e401e4
    2abc:	01e401e4 	.word	0x01e401e4
    2ac0:	01e401e4 	.word	0x01e401e4
    2ac4:	01e401e4 	.word	0x01e401e4
    2ac8:	01e401e4 	.word	0x01e401e4
    2acc:	01e401e4 	.word	0x01e401e4
    2ad0:	01e401e4 	.word	0x01e401e4
    2ad4:	01e401e4 	.word	0x01e401e4
    2ad8:	01e401e4 	.word	0x01e401e4
    2adc:	01e401e4 	.word	0x01e401e4
    2ae0:	01e401e4 	.word	0x01e401e4
    2ae4:	01e401e4 	.word	0x01e401e4
    2ae8:	01e401e4 	.word	0x01e401e4
    2aec:	01e401e4 	.word	0x01e401e4
    2af0:	01e401e4 	.word	0x01e401e4
    2af4:	01e401e4 	.word	0x01e401e4
    2af8:	01e401e4 	.word	0x01e401e4
    2afc:	01e40181 	.word	0x01e40181
    2b00:	01e401e4 	.word	0x01e401e4
    2b04:	01e401e4 	.word	0x01e401e4
    2b08:	01e401e4 	.word	0x01e401e4
    2b0c:	01e401e4 	.word	0x01e401e4
    2b10:	015e01e4 	.word	0x015e01e4
    2b14:	01e40167 	.word	0x01e40167
    2b18:	01e401e4 	.word	0x01e401e4
    2b1c:	016701e4 	.word	0x016701e4
    2b20:	01e401e4 	.word	0x01e401e4
    2b24:	01e401e4 	.word	0x01e401e4
    2b28:	018101be 	.word	0x018101be
    2b2c:	01e401a2 	.word	0x01e401a2
    2b30:	014d01e4 	.word	0x014d01e4
    2b34:	018101e4 	.word	0x018101e4
    2b38:	01e401e4 	.word	0x01e401e4
    2b3c:	0181      	.short	0x0181
				conv->flag_dash = true;
    2b3e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2b42:	f043 0304 	orr.w	r3, r3, #4
    2b46:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    2b4a:	427f      	negs	r7, r7
    2b4c:	e76f      	b.n	2a2e <cbvprintf+0x62>
		} else if (conv->width_present) {
    2b4e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    2b52:	2b00      	cmp	r3, #0
    2b54:	db02      	blt.n	2b5c <cbvprintf+0x190>
		int width = -1;
    2b56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    2b5a:	e768      	b.n	2a2e <cbvprintf+0x62>
			width = conv->width_value;
    2b5c:	9f07      	ldr	r7, [sp, #28]
    2b5e:	e766      	b.n	2a2e <cbvprintf+0x62>
				conv->prec_present = false;
    2b60:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2b64:	f36f 0341 	bfc	r3, #1, #1
    2b68:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    2b6c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    2b70:	e76c      	b.n	2a4c <cbvprintf+0x80>
		} else if (conv->prec_present) {
    2b72:	f013 0f02 	tst.w	r3, #2
    2b76:	d002      	beq.n	2b7e <cbvprintf+0x1b2>
			precision = conv->prec_value;
    2b78:	f8dd a020 	ldr.w	sl, [sp, #32]
    2b7c:	e766      	b.n	2a4c <cbvprintf+0x80>
		int precision = -1;
    2b7e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    2b82:	e763      	b.n	2a4c <cbvprintf+0x80>
			switch (length_mod) {
    2b84:	1ecb      	subs	r3, r1, #3
    2b86:	2b04      	cmp	r3, #4
    2b88:	d804      	bhi.n	2b94 <cbvprintf+0x1c8>
    2b8a:	e8df f003 	tbb	[pc, r3]
    2b8e:	1d0b      	.short	0x1d0b
    2b90:	3529      	.short	0x3529
    2b92:	35          	.byte	0x35
    2b93:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2b94:	9b03      	ldr	r3, [sp, #12]
    2b96:	1d1a      	adds	r2, r3, #4
    2b98:	9203      	str	r2, [sp, #12]
    2b9a:	681b      	ldr	r3, [r3, #0]
    2b9c:	17da      	asrs	r2, r3, #31
    2b9e:	9304      	str	r3, [sp, #16]
    2ba0:	9205      	str	r2, [sp, #20]
				break;
    2ba2:	e006      	b.n	2bb2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    2ba4:	9b03      	ldr	r3, [sp, #12]
    2ba6:	1d1a      	adds	r2, r3, #4
    2ba8:	9203      	str	r2, [sp, #12]
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	17da      	asrs	r2, r3, #31
    2bae:	9304      	str	r3, [sp, #16]
    2bb0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    2bb2:	2901      	cmp	r1, #1
    2bb4:	d028      	beq.n	2c08 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    2bb6:	2902      	cmp	r1, #2
    2bb8:	f47f af5f 	bne.w	2a7a <cbvprintf+0xae>
				value->sint = (short)value->sint;
    2bbc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    2bc0:	17da      	asrs	r2, r3, #31
    2bc2:	9304      	str	r3, [sp, #16]
    2bc4:	9205      	str	r2, [sp, #20]
    2bc6:	e758      	b.n	2a7a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	3307      	adds	r3, #7
    2bcc:	f023 0307 	bic.w	r3, r3, #7
    2bd0:	f103 0208 	add.w	r2, r3, #8
    2bd4:	9203      	str	r2, [sp, #12]
    2bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2bde:	e7e8      	b.n	2bb2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    2be0:	9b03      	ldr	r3, [sp, #12]
    2be2:	3307      	adds	r3, #7
    2be4:	f023 0307 	bic.w	r3, r3, #7
    2be8:	f103 0208 	add.w	r2, r3, #8
    2bec:	9203      	str	r2, [sp, #12]
    2bee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2bf6:	e7dc      	b.n	2bb2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2bf8:	9b03      	ldr	r3, [sp, #12]
    2bfa:	1d1a      	adds	r2, r3, #4
    2bfc:	9203      	str	r2, [sp, #12]
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	17da      	asrs	r2, r3, #31
				value->sint =
    2c02:	9304      	str	r3, [sp, #16]
    2c04:	9205      	str	r2, [sp, #20]
				break;
    2c06:	e7d4      	b.n	2bb2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    2c08:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2c0c:	9304      	str	r3, [sp, #16]
    2c0e:	2300      	movs	r3, #0
    2c10:	9305      	str	r3, [sp, #20]
    2c12:	e732      	b.n	2a7a <cbvprintf+0xae>
			switch (length_mod) {
    2c14:	1ecb      	subs	r3, r1, #3
    2c16:	2b04      	cmp	r3, #4
    2c18:	d804      	bhi.n	2c24 <cbvprintf+0x258>
    2c1a:	e8df f003 	tbb	[pc, r3]
    2c1e:	1f0b      	.short	0x1f0b
    2c20:	4135      	.short	0x4135
    2c22:	41          	.byte	0x41
    2c23:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2c24:	9b03      	ldr	r3, [sp, #12]
    2c26:	1d1a      	adds	r2, r3, #4
    2c28:	9203      	str	r2, [sp, #12]
    2c2a:	681b      	ldr	r3, [r3, #0]
    2c2c:	9304      	str	r3, [sp, #16]
    2c2e:	2300      	movs	r3, #0
    2c30:	9305      	str	r3, [sp, #20]
				break;
    2c32:	e01e      	b.n	2c72 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    2c34:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    2c38:	2b63      	cmp	r3, #99	; 0x63
    2c3a:	d007      	beq.n	2c4c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    2c3c:	9b03      	ldr	r3, [sp, #12]
    2c3e:	1d1a      	adds	r2, r3, #4
    2c40:	9203      	str	r2, [sp, #12]
    2c42:	681b      	ldr	r3, [r3, #0]
    2c44:	9304      	str	r3, [sp, #16]
    2c46:	2300      	movs	r3, #0
    2c48:	9305      	str	r3, [sp, #20]
    2c4a:	e012      	b.n	2c72 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    2c4c:	9b03      	ldr	r3, [sp, #12]
    2c4e:	1d1a      	adds	r2, r3, #4
    2c50:	9203      	str	r2, [sp, #12]
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	9304      	str	r3, [sp, #16]
    2c56:	2300      	movs	r3, #0
    2c58:	9305      	str	r3, [sp, #20]
    2c5a:	e00a      	b.n	2c72 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    2c5c:	9b03      	ldr	r3, [sp, #12]
    2c5e:	3307      	adds	r3, #7
    2c60:	f023 0307 	bic.w	r3, r3, #7
    2c64:	f103 0208 	add.w	r2, r3, #8
    2c68:	9203      	str	r2, [sp, #12]
    2c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2c6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    2c72:	2901      	cmp	r1, #1
    2c74:	d01c      	beq.n	2cb0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    2c76:	2902      	cmp	r1, #2
    2c78:	f47f aeff 	bne.w	2a7a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    2c7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    2c80:	9304      	str	r3, [sp, #16]
    2c82:	2300      	movs	r3, #0
    2c84:	9305      	str	r3, [sp, #20]
    2c86:	e6f8      	b.n	2a7a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    2c88:	9b03      	ldr	r3, [sp, #12]
    2c8a:	3307      	adds	r3, #7
    2c8c:	f023 0307 	bic.w	r3, r3, #7
    2c90:	f103 0208 	add.w	r2, r3, #8
    2c94:	9203      	str	r2, [sp, #12]
    2c96:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2c9e:	e7e8      	b.n	2c72 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    2ca0:	9b03      	ldr	r3, [sp, #12]
    2ca2:	1d1a      	adds	r2, r3, #4
    2ca4:	9203      	str	r2, [sp, #12]
    2ca6:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2ca8:	9304      	str	r3, [sp, #16]
    2caa:	2300      	movs	r3, #0
    2cac:	9305      	str	r3, [sp, #20]
				break;
    2cae:	e7e0      	b.n	2c72 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    2cb0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2cb4:	9304      	str	r3, [sp, #16]
    2cb6:	2300      	movs	r3, #0
    2cb8:	9305      	str	r3, [sp, #20]
    2cba:	e6de      	b.n	2a7a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    2cbc:	2908      	cmp	r1, #8
    2cbe:	d00b      	beq.n	2cd8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    2cc0:	9b03      	ldr	r3, [sp, #12]
    2cc2:	3307      	adds	r3, #7
    2cc4:	f023 0307 	bic.w	r3, r3, #7
    2cc8:	f103 0208 	add.w	r2, r3, #8
    2ccc:	9203      	str	r2, [sp, #12]
    2cce:	e9d3 2300 	ldrd	r2, r3, [r3]
    2cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2cd6:	e6d0      	b.n	2a7a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    2cd8:	9b03      	ldr	r3, [sp, #12]
    2cda:	3307      	adds	r3, #7
    2cdc:	f023 0307 	bic.w	r3, r3, #7
    2ce0:	f103 0208 	add.w	r2, r3, #8
    2ce4:	9203      	str	r2, [sp, #12]
    2ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
    2cea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2cee:	e6c4      	b.n	2a7a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    2cf0:	9b03      	ldr	r3, [sp, #12]
    2cf2:	1d1a      	adds	r2, r3, #4
    2cf4:	9203      	str	r2, [sp, #12]
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	9304      	str	r3, [sp, #16]
    2cfa:	e6be      	b.n	2a7a <cbvprintf+0xae>
			OUTS(sp, fp);
    2cfc:	9f02      	ldr	r7, [sp, #8]
    2cfe:	463b      	mov	r3, r7
    2d00:	464a      	mov	r2, r9
    2d02:	4629      	mov	r1, r5
    2d04:	4630      	mov	r0, r6
    2d06:	f008 ff92 	bl	bc2e <outs>
    2d0a:	2800      	cmp	r0, #0
    2d0c:	f2c0 8141 	blt.w	2f92 <cbvprintf+0x5c6>
    2d10:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2d12:	46b9      	mov	r9, r7
			continue;
    2d14:	e662      	b.n	29dc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    2d16:	4629      	mov	r1, r5
    2d18:	2025      	movs	r0, #37	; 0x25
    2d1a:	47b0      	blx	r6
    2d1c:	2800      	cmp	r0, #0
    2d1e:	f2c0 8138 	blt.w	2f92 <cbvprintf+0x5c6>
    2d22:	3401      	adds	r4, #1
		char sign = 0;
    2d24:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2d26:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2d2a:	f04f 0900 	mov.w	r9, #0
			break;
    2d2e:	e09b      	b.n	2e68 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    2d30:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    2d34:	f1ba 0f00 	cmp.w	sl, #0
    2d38:	db07      	blt.n	2d4a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    2d3a:	4651      	mov	r1, sl
    2d3c:	4648      	mov	r0, r9
    2d3e:	f009 f91a 	bl	bf76 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2d42:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    2d46:	46d8      	mov	r8, fp
			precision = -1;

			break;
    2d48:	e08e      	b.n	2e68 <cbvprintf+0x49c>
				len = strlen(bps);
    2d4a:	4648      	mov	r0, r9
    2d4c:	f009 f90a 	bl	bf64 <strlen>
    2d50:	e7f7      	b.n	2d42 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2d52:	9b04      	ldr	r3, [sp, #16]
    2d54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2d58:	46d8      	mov	r8, fp
			bpe = buf + 1;
    2d5a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    2d5e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    2d62:	e081      	b.n	2e68 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2d64:	f018 0f08 	tst.w	r8, #8
    2d68:	d105      	bne.n	2d76 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    2d6a:	f018 0810 	ands.w	r8, r8, #16
    2d6e:	d004      	beq.n	2d7a <cbvprintf+0x3ae>
				sign = ' ';
    2d70:	f04f 0820 	mov.w	r8, #32
    2d74:	e001      	b.n	2d7a <cbvprintf+0x3ae>
				sign = '+';
    2d76:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2d7a:	9a04      	ldr	r2, [sp, #16]
    2d7c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    2d7e:	2b00      	cmp	r3, #0
    2d80:	db02      	blt.n	2d88 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2d82:	9204      	str	r2, [sp, #16]
    2d84:	9305      	str	r3, [sp, #20]
    2d86:	e008      	b.n	2d9a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    2d88:	4252      	negs	r2, r2
    2d8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2d8e:	9204      	str	r2, [sp, #16]
    2d90:	9305      	str	r3, [sp, #20]
				sign = '-';
    2d92:	f04f 082d 	mov.w	r8, #45	; 0x2d
    2d96:	e000      	b.n	2d9a <cbvprintf+0x3ce>
		switch (conv->specifier) {
    2d98:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2d9a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2d9e:	9300      	str	r3, [sp, #0]
    2da0:	ab0a      	add	r3, sp, #40	; 0x28
    2da2:	aa06      	add	r2, sp, #24
    2da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2da8:	f008 fed7 	bl	bb5a <encode_uint>
    2dac:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2dae:	f1ba 0f00 	cmp.w	sl, #0
    2db2:	f2c0 8088 	blt.w	2ec6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    2db6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2dba:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2dbe:	f89d 2018 	ldrb.w	r2, [sp, #24]
    2dc2:	f36f 1286 	bfc	r2, #6, #1
    2dc6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2dca:	459a      	cmp	sl, r3
    2dcc:	d97e      	bls.n	2ecc <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    2dce:	ebaa 0303 	sub.w	r3, sl, r3
    2dd2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    2dd4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2dd8:	e046      	b.n	2e68 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2dda:	9804      	ldr	r0, [sp, #16]
    2ddc:	b928      	cbnz	r0, 2dea <cbvprintf+0x41e>
		char sign = 0;
    2dde:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2de0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 2f98 <cbvprintf+0x5cc>
			bps = "(nil)";
    2de4:	f1aa 0905 	sub.w	r9, sl, #5
    2de8:	e03e      	b.n	2e68 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2dea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2dee:	9300      	str	r3, [sp, #0]
    2df0:	ab0a      	add	r3, sp, #40	; 0x28
    2df2:	aa06      	add	r2, sp, #24
    2df4:	2100      	movs	r1, #0
    2df6:	f008 feb0 	bl	bb5a <encode_uint>
    2dfa:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2dfc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2e00:	f043 0310 	orr.w	r3, r3, #16
    2e04:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    2e08:	2378      	movs	r3, #120	; 0x78
    2e0a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    2e0e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    2e10:	e7cd      	b.n	2dae <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2e12:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    2e14:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2e18:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2e1c:	2b07      	cmp	r3, #7
    2e1e:	d806      	bhi.n	2e2e <cbvprintf+0x462>
    2e20:	e8df f003 	tbb	[pc, r3]
    2e24:	0f0d0b04 	.word	0x0f0d0b04
    2e28:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    2e2c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2e2e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2e30:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2e34:	f04f 0900 	mov.w	r9, #0
}
    2e38:	e016      	b.n	2e68 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    2e3a:	7014      	strb	r4, [r2, #0]
		break;
    2e3c:	e7f7      	b.n	2e2e <cbvprintf+0x462>
		*(short *)dp = (short)count;
    2e3e:	8014      	strh	r4, [r2, #0]
		break;
    2e40:	e7f5      	b.n	2e2e <cbvprintf+0x462>
		*(long *)dp = (long)count;
    2e42:	6014      	str	r4, [r2, #0]
		break;
    2e44:	e7f3      	b.n	2e2e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    2e46:	17e3      	asrs	r3, r4, #31
    2e48:	6014      	str	r4, [r2, #0]
    2e4a:	6053      	str	r3, [r2, #4]
		break;
    2e4c:	e7ef      	b.n	2e2e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    2e4e:	17e3      	asrs	r3, r4, #31
    2e50:	6014      	str	r4, [r2, #0]
    2e52:	6053      	str	r3, [r2, #4]
		break;
    2e54:	e7eb      	b.n	2e2e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    2e56:	6014      	str	r4, [r2, #0]
		break;
    2e58:	e7e9      	b.n	2e2e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2e5a:	6014      	str	r4, [r2, #0]
		break;
    2e5c:	e7e7      	b.n	2e2e <cbvprintf+0x462>
		switch (conv->specifier) {
    2e5e:	46d8      	mov	r8, fp
    2e60:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2e64:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2e68:	f1b9 0f00 	cmp.w	r9, #0
    2e6c:	f000 808d 	beq.w	2f8a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2e70:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    2e74:	f1b8 0f00 	cmp.w	r8, #0
    2e78:	d000      	beq.n	2e7c <cbvprintf+0x4b0>
			nj_len += 1U;
    2e7a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    2e7c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    2e80:	f012 0f10 	tst.w	r2, #16
    2e84:	d025      	beq.n	2ed2 <cbvprintf+0x506>
			nj_len += 2U;
    2e86:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2e88:	9907      	ldr	r1, [sp, #28]
    2e8a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    2e8c:	f012 0f40 	tst.w	r2, #64	; 0x40
    2e90:	d001      	beq.n	2e96 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    2e92:	9a08      	ldr	r2, [sp, #32]
    2e94:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2e96:	2f00      	cmp	r7, #0
    2e98:	dd31      	ble.n	2efe <cbvprintf+0x532>
			width -= (int)nj_len;
    2e9a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2e9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2ea0:	f013 0f04 	tst.w	r3, #4
    2ea4:	d12b      	bne.n	2efe <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2ea6:	f013 0f40 	tst.w	r3, #64	; 0x40
    2eaa:	d017      	beq.n	2edc <cbvprintf+0x510>
					if (sign != 0) {
    2eac:	f1b8 0f00 	cmp.w	r8, #0
    2eb0:	d017      	beq.n	2ee2 <cbvprintf+0x516>
						OUTC(sign);
    2eb2:	4629      	mov	r1, r5
    2eb4:	4640      	mov	r0, r8
    2eb6:	47b0      	blx	r6
    2eb8:	2800      	cmp	r0, #0
    2eba:	db6a      	blt.n	2f92 <cbvprintf+0x5c6>
    2ebc:	3401      	adds	r4, #1
						sign = 0;
    2ebe:	46d8      	mov	r8, fp
					}
					pad = '0';
    2ec0:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2ec4:	e00f      	b.n	2ee6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    2ec6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2eca:	e7cd      	b.n	2e68 <cbvprintf+0x49c>
    2ecc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2ed0:	e7ca      	b.n	2e68 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    2ed2:	f012 0f08 	tst.w	r2, #8
    2ed6:	d0d7      	beq.n	2e88 <cbvprintf+0x4bc>
			nj_len += 1U;
    2ed8:	3301      	adds	r3, #1
    2eda:	e7d5      	b.n	2e88 <cbvprintf+0x4bc>
				char pad = ' ';
    2edc:	f04f 0b20 	mov.w	fp, #32
    2ee0:	e001      	b.n	2ee6 <cbvprintf+0x51a>
					pad = '0';
    2ee2:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2ee6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2ee8:	1e5f      	subs	r7, r3, #1
    2eea:	2b00      	cmp	r3, #0
    2eec:	dd07      	ble.n	2efe <cbvprintf+0x532>
					OUTC(pad);
    2eee:	4629      	mov	r1, r5
    2ef0:	4658      	mov	r0, fp
    2ef2:	47b0      	blx	r6
    2ef4:	2800      	cmp	r0, #0
    2ef6:	db4c      	blt.n	2f92 <cbvprintf+0x5c6>
    2ef8:	3401      	adds	r4, #1
				while (width-- > 0) {
    2efa:	463b      	mov	r3, r7
    2efc:	e7f4      	b.n	2ee8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    2efe:	f1b8 0f00 	cmp.w	r8, #0
    2f02:	d005      	beq.n	2f10 <cbvprintf+0x544>
			OUTC(sign);
    2f04:	4629      	mov	r1, r5
    2f06:	4640      	mov	r0, r8
    2f08:	47b0      	blx	r6
    2f0a:	2800      	cmp	r0, #0
    2f0c:	db41      	blt.n	2f92 <cbvprintf+0x5c6>
    2f0e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    2f10:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2f14:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2f18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    2f1c:	4313      	orrs	r3, r2
    2f1e:	d005      	beq.n	2f2c <cbvprintf+0x560>
				OUTC('0');
    2f20:	4629      	mov	r1, r5
    2f22:	2030      	movs	r0, #48	; 0x30
    2f24:	47b0      	blx	r6
    2f26:	2800      	cmp	r0, #0
    2f28:	db33      	blt.n	2f92 <cbvprintf+0x5c6>
    2f2a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    2f2c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2f30:	f013 0f10 	tst.w	r3, #16
    2f34:	d006      	beq.n	2f44 <cbvprintf+0x578>
				OUTC(conv->specifier);
    2f36:	4629      	mov	r1, r5
    2f38:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2f3c:	47b0      	blx	r6
    2f3e:	2800      	cmp	r0, #0
    2f40:	db27      	blt.n	2f92 <cbvprintf+0x5c6>
    2f42:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2f44:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    2f46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	dd07      	ble.n	2f5e <cbvprintf+0x592>
				OUTC('0');
    2f4e:	4629      	mov	r1, r5
    2f50:	2030      	movs	r0, #48	; 0x30
    2f52:	47b0      	blx	r6
    2f54:	2800      	cmp	r0, #0
    2f56:	db1c      	blt.n	2f92 <cbvprintf+0x5c6>
    2f58:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2f5a:	4643      	mov	r3, r8
    2f5c:	e7f3      	b.n	2f46 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    2f5e:	4653      	mov	r3, sl
    2f60:	464a      	mov	r2, r9
    2f62:	4629      	mov	r1, r5
    2f64:	4630      	mov	r0, r6
    2f66:	f008 fe62 	bl	bc2e <outs>
    2f6a:	2800      	cmp	r0, #0
    2f6c:	db11      	blt.n	2f92 <cbvprintf+0x5c6>
    2f6e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2f70:	2f00      	cmp	r7, #0
    2f72:	dd07      	ble.n	2f84 <cbvprintf+0x5b8>
			OUTC(' ');
    2f74:	4629      	mov	r1, r5
    2f76:	2020      	movs	r0, #32
    2f78:	47b0      	blx	r6
    2f7a:	2800      	cmp	r0, #0
    2f7c:	db09      	blt.n	2f92 <cbvprintf+0x5c6>
    2f7e:	3401      	adds	r4, #1
			--width;
    2f80:	3f01      	subs	r7, #1
    2f82:	e7f5      	b.n	2f70 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    2f84:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2f88:	e528      	b.n	29dc <cbvprintf+0x10>
    2f8a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2f8e:	e525      	b.n	29dc <cbvprintf+0x10>
		}
	}

	return count;
    2f90:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2f92:	b011      	add	sp, #68	; 0x44
    2f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f98:	0000da21 	.word	0x0000da21

00002f9c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2f9c:	b508      	push	{r3, lr}
	__asm__ volatile(
    2f9e:	f04f 0220 	mov.w	r2, #32
    2fa2:	f3ef 8311 	mrs	r3, BASEPRI
    2fa6:	f382 8812 	msr	BASEPRI_MAX, r2
    2faa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2fae:	f001 ff27 	bl	4e00 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2fb2:	4803      	ldr	r0, [pc, #12]	; (2fc0 <sys_reboot+0x24>)
    2fb4:	f008 fcd7 	bl	b966 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2fb8:	f000 ffa0 	bl	3efc <arch_cpu_idle>
    2fbc:	e7fc      	b.n	2fb8 <sys_reboot+0x1c>
    2fbe:	bf00      	nop
    2fc0:	0000da24 	.word	0x0000da24

00002fc4 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    2fc4:	2900      	cmp	r1, #0
    2fc6:	d150      	bne.n	306a <msg_process+0xa6>
{
    2fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fcc:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2fce:	2400      	movs	r4, #0
    2fd0:	e022      	b.n	3018 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    2fd2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 306c <msg_process+0xa8>
    2fd6:	f44f 7399 	mov.w	r3, #306	; 0x132
    2fda:	464a      	mov	r2, r9
    2fdc:	4924      	ldr	r1, [pc, #144]	; (3070 <msg_process+0xac>)
    2fde:	4825      	ldr	r0, [pc, #148]	; (3074 <msg_process+0xb0>)
    2fe0:	f008 fe46 	bl	bc70 <assert_print>
    2fe4:	f44f 7199 	mov.w	r1, #306	; 0x132
    2fe8:	4648      	mov	r0, r9
    2fea:	f008 fe3a 	bl	bc62 <assert_post_action>
    2fee:	e01f      	b.n	3030 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    2ff0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 306c <msg_process+0xa8>
    2ff4:	2385      	movs	r3, #133	; 0x85
    2ff6:	464a      	mov	r2, r9
    2ff8:	491d      	ldr	r1, [pc, #116]	; (3070 <msg_process+0xac>)
    2ffa:	481e      	ldr	r0, [pc, #120]	; (3074 <msg_process+0xb0>)
    2ffc:	f008 fe38 	bl	bc70 <assert_print>
    3000:	2185      	movs	r1, #133	; 0x85
    3002:	4648      	mov	r0, r9
    3004:	f008 fe2d 	bl	bc62 <assert_post_action>
    3008:	e01e      	b.n	3048 <msg_process+0x84>
	backend->api->process(backend, msg);
    300a:	f858 3005 	ldr.w	r3, [r8, r5]
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	4639      	mov	r1, r7
    3012:	4630      	mov	r0, r6
    3014:	4798      	blx	r3
    3016:	3401      	adds	r4, #1
    3018:	4b17      	ldr	r3, [pc, #92]	; (3078 <msg_process+0xb4>)
    301a:	4a18      	ldr	r2, [pc, #96]	; (307c <msg_process+0xb8>)
    301c:	1a9b      	subs	r3, r3, r2
    301e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3022:	da20      	bge.n	3066 <msg_process+0xa2>
	return &__log_backends_start[idx];
    3024:	ea4f 1804 	mov.w	r8, r4, lsl #4
    3028:	4d14      	ldr	r5, [pc, #80]	; (307c <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    302a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    302e:	d0d0      	beq.n	2fd2 <msg_process+0xe>
	return backend->cb->active;
    3030:	6873      	ldr	r3, [r6, #4]
    3032:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    3034:	2b00      	cmp	r3, #0
    3036:	d0ee      	beq.n	3016 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    3038:	4639      	mov	r1, r7
    303a:	4630      	mov	r0, r6
    303c:	f008 fe29 	bl	bc92 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    3040:	2800      	cmp	r0, #0
    3042:	d0e8      	beq.n	3016 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    3044:	2e00      	cmp	r6, #0
    3046:	d0d3      	beq.n	2ff0 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    3048:	2f00      	cmp	r7, #0
    304a:	d1de      	bne.n	300a <msg_process+0x46>
    304c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 306c <msg_process+0xa8>
    3050:	2386      	movs	r3, #134	; 0x86
    3052:	464a      	mov	r2, r9
    3054:	490a      	ldr	r1, [pc, #40]	; (3080 <msg_process+0xbc>)
    3056:	4807      	ldr	r0, [pc, #28]	; (3074 <msg_process+0xb0>)
    3058:	f008 fe0a 	bl	bc70 <assert_print>
    305c:	2186      	movs	r1, #134	; 0x86
    305e:	4648      	mov	r0, r9
    3060:	f008 fdff 	bl	bc62 <assert_post_action>
    3064:	e7d1      	b.n	300a <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    3066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    306a:	4770      	bx	lr
    306c:	0000da50 	.word	0x0000da50
    3070:	0000da88 	.word	0x0000da88
    3074:	0000d02c 	.word	0x0000d02c
    3078:	0000cec8 	.word	0x0000cec8
    307c:	0000cea8 	.word	0x0000cea8
    3080:	0000daa0 	.word	0x0000daa0

00003084 <log_format_func_t_get>:
}
    3084:	4b01      	ldr	r3, [pc, #4]	; (308c <log_format_func_t_get+0x8>)
    3086:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    308a:	4770      	bx	lr
    308c:	0000db24 	.word	0x0000db24

00003090 <log_init>:
{
    3090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    3092:	4b20      	ldr	r3, [pc, #128]	; (3114 <log_init+0x84>)
    3094:	4a20      	ldr	r2, [pc, #128]	; (3118 <log_init+0x88>)
    3096:	1a9b      	subs	r3, r3, r2
    3098:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    309a:	2b90      	cmp	r3, #144	; 0x90
    309c:	d80e      	bhi.n	30bc <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    309e:	4b1f      	ldr	r3, [pc, #124]	; (311c <log_init+0x8c>)
    30a0:	f3bf 8f5b 	dmb	ish
    30a4:	e853 2f00 	ldrex	r2, [r3]
    30a8:	1c51      	adds	r1, r2, #1
    30aa:	e843 1000 	strex	r0, r1, [r3]
    30ae:	2800      	cmp	r0, #0
    30b0:	d1f8      	bne.n	30a4 <log_init+0x14>
    30b2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    30b6:	bb5a      	cbnz	r2, 3110 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    30b8:	2400      	movs	r4, #0
    30ba:	e017      	b.n	30ec <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    30bc:	4c18      	ldr	r4, [pc, #96]	; (3120 <log_init+0x90>)
    30be:	f240 2373 	movw	r3, #627	; 0x273
    30c2:	4622      	mov	r2, r4
    30c4:	4917      	ldr	r1, [pc, #92]	; (3124 <log_init+0x94>)
    30c6:	4818      	ldr	r0, [pc, #96]	; (3128 <log_init+0x98>)
    30c8:	f008 fdd2 	bl	bc70 <assert_print>
    30cc:	f240 2173 	movw	r1, #627	; 0x273
    30d0:	4620      	mov	r0, r4
    30d2:	f008 fdc6 	bl	bc62 <assert_post_action>
    30d6:	e7e2      	b.n	309e <log_init+0xe>
					   backend->cb->ctx,
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <log_init+0x88>)
    30da:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    30de:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    30e0:	2204      	movs	r2, #4
    30e2:	6819      	ldr	r1, [r3, #0]
    30e4:	4628      	mov	r0, r5
    30e6:	f000 f8d3 	bl	3290 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    30ea:	3401      	adds	r4, #1
    30ec:	42b4      	cmp	r4, r6
    30ee:	da0f      	bge.n	3110 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    30f0:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    30f2:	4d09      	ldr	r5, [pc, #36]	; (3118 <log_init+0x88>)
    30f4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    30f8:	7b2b      	ldrb	r3, [r5, #12]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d0f5      	beq.n	30ea <log_init+0x5a>
			if (backend->api->init != NULL) {
    30fe:	0123      	lsls	r3, r4, #4
    3100:	4a05      	ldr	r2, [pc, #20]	; (3118 <log_init+0x88>)
    3102:	58d3      	ldr	r3, [r2, r3]
    3104:	699b      	ldr	r3, [r3, #24]
    3106:	2b00      	cmp	r3, #0
    3108:	d0e6      	beq.n	30d8 <log_init+0x48>
				backend->api->init(backend);
    310a:	4628      	mov	r0, r5
    310c:	4798      	blx	r3
    310e:	e7e3      	b.n	30d8 <log_init+0x48>
}
    3110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3112:	bf00      	nop
    3114:	0000cec8 	.word	0x0000cec8
    3118:	0000cea8 	.word	0x0000cea8
    311c:	20000630 	.word	0x20000630
    3120:	0000dab4 	.word	0x0000dab4
    3124:	0000dafc 	.word	0x0000dafc
    3128:	0000d02c 	.word	0x0000d02c

0000312c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    312c:	b138      	cbz	r0, 313e <log_set_timestamp_func+0x12>
{
    312e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    3130:	4a04      	ldr	r2, [pc, #16]	; (3144 <log_set_timestamp_func+0x18>)
    3132:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    3134:	4608      	mov	r0, r1
    3136:	f000 fabf 	bl	36b8 <log_output_timestamp_freq_set>
	return 0;
    313a:	2000      	movs	r0, #0
}
    313c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    313e:	f06f 0015 	mvn.w	r0, #21
}
    3142:	4770      	bx	lr
    3144:	2000009c 	.word	0x2000009c

00003148 <log_core_init>:
{
    3148:	b508      	push	{r3, lr}
	panic_mode = false;
    314a:	2300      	movs	r3, #0
    314c:	4a04      	ldr	r2, [pc, #16]	; (3160 <log_core_init+0x18>)
    314e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3150:	4a04      	ldr	r2, [pc, #16]	; (3164 <log_core_init+0x1c>)
    3152:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    3154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3158:	4803      	ldr	r0, [pc, #12]	; (3168 <log_core_init+0x20>)
    315a:	f7ff ffe7 	bl	312c <log_set_timestamp_func>
}
    315e:	bd08      	pop	{r3, pc}
    3160:	20001381 	.word	0x20001381
    3164:	2000062c 	.word	0x2000062c
    3168:	0000bc97 	.word	0x0000bc97

0000316c <z_impl_log_panic>:
	if (panic_mode) {
    316c:	4b20      	ldr	r3, [pc, #128]	; (31f0 <z_impl_log_panic+0x84>)
    316e:	781b      	ldrb	r3, [r3, #0]
    3170:	b103      	cbz	r3, 3174 <z_impl_log_panic+0x8>
    3172:	4770      	bx	lr
{
    3174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    3178:	f7ff ff8a 	bl	3090 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    317c:	2400      	movs	r4, #0
    317e:	e013      	b.n	31a8 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    3180:	f8df 8070 	ldr.w	r8, [pc, #112]	; 31f4 <z_impl_log_panic+0x88>
    3184:	f44f 7399 	mov.w	r3, #306	; 0x132
    3188:	4642      	mov	r2, r8
    318a:	491b      	ldr	r1, [pc, #108]	; (31f8 <z_impl_log_panic+0x8c>)
    318c:	481b      	ldr	r0, [pc, #108]	; (31fc <z_impl_log_panic+0x90>)
    318e:	f008 fd6f 	bl	bc70 <assert_print>
    3192:	f44f 7199 	mov.w	r1, #306	; 0x132
    3196:	4640      	mov	r0, r8
    3198:	f008 fd63 	bl	bc62 <assert_post_action>
    319c:	e00f      	b.n	31be <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    319e:	597b      	ldr	r3, [r7, r5]
    31a0:	695b      	ldr	r3, [r3, #20]
    31a2:	4630      	mov	r0, r6
    31a4:	4798      	blx	r3
    31a6:	3401      	adds	r4, #1
    31a8:	4b15      	ldr	r3, [pc, #84]	; (3200 <z_impl_log_panic+0x94>)
    31aa:	4a16      	ldr	r2, [pc, #88]	; (3204 <z_impl_log_panic+0x98>)
    31ac:	1a9b      	subs	r3, r3, r2
    31ae:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    31b2:	da17      	bge.n	31e4 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    31b4:	0127      	lsls	r7, r4, #4
    31b6:	4d13      	ldr	r5, [pc, #76]	; (3204 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    31b8:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    31bc:	d0e0      	beq.n	3180 <z_impl_log_panic+0x14>
	return backend->cb->active;
    31be:	6873      	ldr	r3, [r6, #4]
    31c0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    31c2:	2b00      	cmp	r3, #0
    31c4:	d0ef      	beq.n	31a6 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    31c6:	2e00      	cmp	r6, #0
    31c8:	d1e9      	bne.n	319e <z_impl_log_panic+0x32>
    31ca:	f8df 8028 	ldr.w	r8, [pc, #40]	; 31f4 <z_impl_log_panic+0x88>
    31ce:	23d7      	movs	r3, #215	; 0xd7
    31d0:	4642      	mov	r2, r8
    31d2:	4909      	ldr	r1, [pc, #36]	; (31f8 <z_impl_log_panic+0x8c>)
    31d4:	4809      	ldr	r0, [pc, #36]	; (31fc <z_impl_log_panic+0x90>)
    31d6:	f008 fd4b 	bl	bc70 <assert_print>
    31da:	21d7      	movs	r1, #215	; 0xd7
    31dc:	4640      	mov	r0, r8
    31de:	f008 fd40 	bl	bc62 <assert_post_action>
    31e2:	e7dc      	b.n	319e <z_impl_log_panic+0x32>
	panic_mode = true;
    31e4:	4b02      	ldr	r3, [pc, #8]	; (31f0 <z_impl_log_panic+0x84>)
    31e6:	2201      	movs	r2, #1
    31e8:	701a      	strb	r2, [r3, #0]
}
    31ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31ee:	bf00      	nop
    31f0:	20001381 	.word	0x20001381
    31f4:	0000da50 	.word	0x0000da50
    31f8:	0000da88 	.word	0x0000da88
    31fc:	0000d02c 	.word	0x0000d02c
    3200:	0000cec8 	.word	0x0000cec8
    3204:	0000cea8 	.word	0x0000cea8

00003208 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3208:	4b01      	ldr	r3, [pc, #4]	; (3210 <z_log_notify_backend_enabled+0x8>)
    320a:	2201      	movs	r2, #1
    320c:	701a      	strb	r2, [r3, #0]
}
    320e:	4770      	bx	lr
    3210:	20001380 	.word	0x20001380

00003214 <z_log_dropped>:
    3214:	4b0d      	ldr	r3, [pc, #52]	; (324c <z_log_dropped+0x38>)
    3216:	f3bf 8f5b 	dmb	ish
    321a:	e853 2f00 	ldrex	r2, [r3]
    321e:	3201      	adds	r2, #1
    3220:	e843 2100 	strex	r1, r2, [r3]
    3224:	2900      	cmp	r1, #0
    3226:	d1f8      	bne.n	321a <z_log_dropped+0x6>
    3228:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    322c:	b900      	cbnz	r0, 3230 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    322e:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3230:	4b07      	ldr	r3, [pc, #28]	; (3250 <z_log_dropped+0x3c>)
    3232:	f3bf 8f5b 	dmb	ish
    3236:	e853 2f00 	ldrex	r2, [r3]
    323a:	3a01      	subs	r2, #1
    323c:	e843 2100 	strex	r1, r2, [r3]
    3240:	2900      	cmp	r1, #0
    3242:	d1f8      	bne.n	3236 <z_log_dropped+0x22>
    3244:	f3bf 8f5b 	dmb	ish
    3248:	e7f1      	b.n	322e <z_log_dropped+0x1a>
    324a:	bf00      	nop
    324c:	2000062c 	.word	0x2000062c
    3250:	20000628 	.word	0x20000628

00003254 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    3254:	b510      	push	{r4, lr}
    3256:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3258:	4b04      	ldr	r3, [pc, #16]	; (326c <z_log_msg2_commit+0x18>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	4798      	blx	r3
    325e:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    3260:	2100      	movs	r1, #0
    3262:	4620      	mov	r0, r4
    3264:	f7ff feae 	bl	2fc4 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3268:	bd10      	pop	{r4, pc}
    326a:	bf00      	nop
    326c:	2000009c 	.word	0x2000009c

00003270 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3270:	4b05      	ldr	r3, [pc, #20]	; (3288 <log_source_name_get+0x18>)
    3272:	4a06      	ldr	r2, [pc, #24]	; (328c <log_source_name_get+0x1c>)
    3274:	1a9b      	subs	r3, r3, r2
    3276:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    327a:	d202      	bcs.n	3282 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    327c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3280:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3282:	2000      	movs	r0, #0
}
    3284:	4770      	bx	lr
    3286:	bf00      	nop
    3288:	0000cea8 	.word	0x0000cea8
    328c:	0000ce58 	.word	0x0000ce58

00003290 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3292:	4604      	mov	r4, r0
    3294:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3296:	4d1e      	ldr	r5, [pc, #120]	; (3310 <log_backend_enable+0x80>)
    3298:	1b45      	subs	r5, r0, r5
    329a:	112d      	asrs	r5, r5, #4
    329c:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    329e:	6803      	ldr	r3, [r0, #0]
    32a0:	681b      	ldr	r3, [r3, #0]
    32a2:	b163      	cbz	r3, 32be <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    32a4:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    32a6:	b1cc      	cbz	r4, 32dc <log_backend_enable+0x4c>
	backend->cb->id = id;
    32a8:	6863      	ldr	r3, [r4, #4]
    32aa:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    32ac:	b314      	cbz	r4, 32f4 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    32ae:	6863      	ldr	r3, [r4, #4]
    32b0:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    32b2:	6863      	ldr	r3, [r4, #4]
    32b4:	2201      	movs	r2, #1
    32b6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    32b8:	f7ff ffa6 	bl	3208 <z_log_notify_backend_enabled>
}
    32bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    32be:	4f15      	ldr	r7, [pc, #84]	; (3314 <log_backend_enable+0x84>)
    32c0:	23bb      	movs	r3, #187	; 0xbb
    32c2:	463a      	mov	r2, r7
    32c4:	4914      	ldr	r1, [pc, #80]	; (3318 <log_backend_enable+0x88>)
    32c6:	4815      	ldr	r0, [pc, #84]	; (331c <log_backend_enable+0x8c>)
    32c8:	f008 fcd2 	bl	bc70 <assert_print>
    32cc:	4814      	ldr	r0, [pc, #80]	; (3320 <log_backend_enable+0x90>)
    32ce:	f008 fccf 	bl	bc70 <assert_print>
    32d2:	21bb      	movs	r1, #187	; 0xbb
    32d4:	4638      	mov	r0, r7
    32d6:	f008 fcc4 	bl	bc62 <assert_post_action>
    32da:	e7e3      	b.n	32a4 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    32dc:	4f11      	ldr	r7, [pc, #68]	; (3324 <log_backend_enable+0x94>)
    32de:	23e6      	movs	r3, #230	; 0xe6
    32e0:	463a      	mov	r2, r7
    32e2:	4911      	ldr	r1, [pc, #68]	; (3328 <log_backend_enable+0x98>)
    32e4:	480d      	ldr	r0, [pc, #52]	; (331c <log_backend_enable+0x8c>)
    32e6:	f008 fcc3 	bl	bc70 <assert_print>
    32ea:	21e6      	movs	r1, #230	; 0xe6
    32ec:	4638      	mov	r0, r7
    32ee:	f008 fcb8 	bl	bc62 <assert_post_action>
    32f2:	e7d9      	b.n	32a8 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    32f4:	4d0b      	ldr	r5, [pc, #44]	; (3324 <log_backend_enable+0x94>)
    32f6:	f240 1317 	movw	r3, #279	; 0x117
    32fa:	462a      	mov	r2, r5
    32fc:	490a      	ldr	r1, [pc, #40]	; (3328 <log_backend_enable+0x98>)
    32fe:	4807      	ldr	r0, [pc, #28]	; (331c <log_backend_enable+0x8c>)
    3300:	f008 fcb6 	bl	bc70 <assert_print>
    3304:	f240 1117 	movw	r1, #279	; 0x117
    3308:	4628      	mov	r0, r5
    330a:	f008 fcaa 	bl	bc62 <assert_post_action>
    330e:	e7ce      	b.n	32ae <log_backend_enable+0x1e>
    3310:	0000cea8 	.word	0x0000cea8
    3314:	0000db30 	.word	0x0000db30
    3318:	0000db8c 	.word	0x0000db8c
    331c:	0000d02c 	.word	0x0000d02c
    3320:	0000dba4 	.word	0x0000dba4
    3324:	0000da50 	.word	0x0000da50
    3328:	0000da88 	.word	0x0000da88

0000332c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    332c:	b40e      	push	{r1, r2, r3}
    332e:	b500      	push	{lr}
    3330:	b082      	sub	sp, #8
    3332:	4601      	mov	r1, r0
    3334:	ab03      	add	r3, sp, #12
    3336:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    333a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    333c:	4803      	ldr	r0, [pc, #12]	; (334c <print_formatted+0x20>)
    333e:	f7ff fb45 	bl	29cc <cbvprintf>
	va_end(args);

	return length;
}
    3342:	b002      	add	sp, #8
    3344:	f85d eb04 	ldr.w	lr, [sp], #4
    3348:	b003      	add	sp, #12
    334a:	4770      	bx	lr
    334c:	0000bccb 	.word	0x0000bccb

00003350 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    3350:	b530      	push	{r4, r5, lr}
    3352:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    3354:	f011 0f44 	tst.w	r1, #68	; 0x44
    3358:	d005      	beq.n	3366 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    335a:	4b1a      	ldr	r3, [pc, #104]	; (33c4 <timestamp_print+0x74>)
    335c:	681c      	ldr	r4, [r3, #0]
    335e:	b934      	cbnz	r4, 336e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    3360:	2000      	movs	r0, #0
	}

	return length;
}
    3362:	b005      	add	sp, #20
    3364:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    3366:	4918      	ldr	r1, [pc, #96]	; (33c8 <timestamp_print+0x78>)
    3368:	f7ff ffe0 	bl	332c <print_formatted>
    336c:	e7f9      	b.n	3362 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    336e:	4b17      	ldr	r3, [pc, #92]	; (33cc <timestamp_print+0x7c>)
    3370:	6819      	ldr	r1, [r3, #0]
    3372:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    3376:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    337a:	4a15      	ldr	r2, [pc, #84]	; (33d0 <timestamp_print+0x80>)
    337c:	fba2 320c 	umull	r3, r2, r2, ip
    3380:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    3382:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3386:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    338a:	4b12      	ldr	r3, [pc, #72]	; (33d4 <timestamp_print+0x84>)
    338c:	fba3 530e 	umull	r5, r3, r3, lr
    3390:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    3392:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    3396:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    339a:	fb0c f101 	mul.w	r1, ip, r1
    339e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    33a2:	fb05 1114 	mls	r1, r5, r4, r1
    33a6:	fb0c f101 	mul.w	r1, ip, r1
    33aa:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    33ae:	9102      	str	r1, [sp, #8]
    33b0:	9501      	str	r5, [sp, #4]
    33b2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    33b6:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    33ba:	9100      	str	r1, [sp, #0]
    33bc:	4906      	ldr	r1, [pc, #24]	; (33d8 <timestamp_print+0x88>)
    33be:	f7ff ffb5 	bl	332c <print_formatted>
    33c2:	e7ce      	b.n	3362 <timestamp_print+0x12>
    33c4:	20000634 	.word	0x20000634
    33c8:	0000dbc8 	.word	0x0000dbc8
    33cc:	20000638 	.word	0x20000638
    33d0:	91a2b3c5 	.word	0x91a2b3c5
    33d4:	88888889 	.word	0x88888889
    33d8:	0000dbd4 	.word	0x0000dbd4

000033dc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    33dc:	b161      	cbz	r1, 33f8 <color_print+0x1c>
{
    33de:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    33e0:	b12a      	cbz	r2, 33ee <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    33e2:	4a06      	ldr	r2, [pc, #24]	; (33fc <color_print+0x20>)
    33e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    33e8:	b912      	cbnz	r2, 33f0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    33ea:	4a05      	ldr	r2, [pc, #20]	; (3400 <color_print+0x24>)
    33ec:	e000      	b.n	33f0 <color_print+0x14>
    33ee:	4a04      	ldr	r2, [pc, #16]	; (3400 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    33f0:	4904      	ldr	r1, [pc, #16]	; (3404 <color_print+0x28>)
    33f2:	f7ff ff9b 	bl	332c <print_formatted>
	}
}
    33f6:	bd08      	pop	{r3, pc}
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop
    33fc:	0000dc94 	.word	0x0000dc94
    3400:	0000dbf0 	.word	0x0000dbf0
    3404:	0000dbf8 	.word	0x0000dbf8

00003408 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3408:	f011 0f10 	tst.w	r1, #16
    340c:	d10b      	bne.n	3426 <newline_print+0x1e>
{
    340e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3410:	f011 0f20 	tst.w	r1, #32
    3414:	d003      	beq.n	341e <newline_print+0x16>
		print_formatted(ctx, "\n");
    3416:	4904      	ldr	r1, [pc, #16]	; (3428 <newline_print+0x20>)
    3418:	f7ff ff88 	bl	332c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    341c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    341e:	4903      	ldr	r1, [pc, #12]	; (342c <newline_print+0x24>)
    3420:	f7ff ff84 	bl	332c <print_formatted>
    3424:	e7fa      	b.n	341c <newline_print+0x14>
    3426:	4770      	bx	lr
    3428:	0000d444 	.word	0x0000d444
    342c:	0000f304 	.word	0x0000f304

00003430 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3434:	4605      	mov	r5, r0
    3436:	460f      	mov	r7, r1
    3438:	4616      	mov	r6, r2
    343a:	4698      	mov	r8, r3
	newline_print(output, flags);
    343c:	9906      	ldr	r1, [sp, #24]
    343e:	f7ff ffe3 	bl	3408 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    3442:	2400      	movs	r4, #0
    3444:	4544      	cmp	r4, r8
    3446:	da05      	bge.n	3454 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3448:	4923      	ldr	r1, [pc, #140]	; (34d8 <hexdump_line_print+0xa8>)
    344a:	4628      	mov	r0, r5
    344c:	f7ff ff6e 	bl	332c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3450:	3401      	adds	r4, #1
    3452:	e7f7      	b.n	3444 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3454:	2400      	movs	r4, #0
    3456:	e009      	b.n	346c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3458:	491f      	ldr	r1, [pc, #124]	; (34d8 <hexdump_line_print+0xa8>)
    345a:	4628      	mov	r0, r5
    345c:	f7ff ff66 	bl	332c <print_formatted>
    3460:	e00b      	b.n	347a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    3462:	491e      	ldr	r1, [pc, #120]	; (34dc <hexdump_line_print+0xac>)
    3464:	4628      	mov	r0, r5
    3466:	f7ff ff61 	bl	332c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    346a:	3401      	adds	r4, #1
    346c:	2c0f      	cmp	r4, #15
    346e:	dc0c      	bgt.n	348a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3470:	2c00      	cmp	r4, #0
    3472:	dd02      	ble.n	347a <hexdump_line_print+0x4a>
    3474:	f014 0f07 	tst.w	r4, #7
    3478:	d0ee      	beq.n	3458 <hexdump_line_print+0x28>
		if (i < length) {
    347a:	42b4      	cmp	r4, r6
    347c:	d2f1      	bcs.n	3462 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    347e:	5d3a      	ldrb	r2, [r7, r4]
    3480:	4917      	ldr	r1, [pc, #92]	; (34e0 <hexdump_line_print+0xb0>)
    3482:	4628      	mov	r0, r5
    3484:	f7ff ff52 	bl	332c <print_formatted>
    3488:	e7ef      	b.n	346a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    348a:	4916      	ldr	r1, [pc, #88]	; (34e4 <hexdump_line_print+0xb4>)
    348c:	4628      	mov	r0, r5
    348e:	f7ff ff4d 	bl	332c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3492:	2400      	movs	r4, #0
    3494:	e009      	b.n	34aa <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3496:	4910      	ldr	r1, [pc, #64]	; (34d8 <hexdump_line_print+0xa8>)
    3498:	4628      	mov	r0, r5
    349a:	f7ff ff47 	bl	332c <print_formatted>
    349e:	e00b      	b.n	34b8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    34a0:	4911      	ldr	r1, [pc, #68]	; (34e8 <hexdump_line_print+0xb8>)
    34a2:	4628      	mov	r0, r5
    34a4:	f7ff ff42 	bl	332c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    34a8:	3401      	adds	r4, #1
    34aa:	2c0f      	cmp	r4, #15
    34ac:	dc12      	bgt.n	34d4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    34ae:	2c00      	cmp	r4, #0
    34b0:	dd02      	ble.n	34b8 <hexdump_line_print+0x88>
    34b2:	f014 0f07 	tst.w	r4, #7
    34b6:	d0ee      	beq.n	3496 <hexdump_line_print+0x66>
		if (i < length) {
    34b8:	42b4      	cmp	r4, r6
    34ba:	d206      	bcs.n	34ca <hexdump_line_print+0x9a>
			char c = (char)data[i];
    34bc:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    34be:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    34c2:	2b5e      	cmp	r3, #94	; 0x5e
    34c4:	d9ec      	bls.n	34a0 <hexdump_line_print+0x70>
    34c6:	222e      	movs	r2, #46	; 0x2e
    34c8:	e7ea      	b.n	34a0 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    34ca:	4903      	ldr	r1, [pc, #12]	; (34d8 <hexdump_line_print+0xa8>)
    34cc:	4628      	mov	r0, r5
    34ce:	f7ff ff2d 	bl	332c <print_formatted>
    34d2:	e7e9      	b.n	34a8 <hexdump_line_print+0x78>
		}
	}
}
    34d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34d8:	0000dc20 	.word	0x0000dc20
    34dc:	0000dc04 	.word	0x0000dc04
    34e0:	0000dbfc 	.word	0x0000dbfc
    34e4:	0000dc08 	.word	0x0000dc08
    34e8:	0000dc0c 	.word	0x0000dc0c

000034ec <ids_print>:
{
    34ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f0:	4680      	mov	r8, r0
    34f2:	4616      	mov	r6, r2
    34f4:	461d      	mov	r5, r3
    34f6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    34fa:	b959      	cbnz	r1, 3514 <ids_print+0x28>
	int total = 0;
    34fc:	2400      	movs	r4, #0
	if (source_id >= 0) {
    34fe:	2f00      	cmp	r7, #0
    3500:	db1c      	blt.n	353c <ids_print+0x50>
		total += print_formatted(output,
    3502:	b186      	cbz	r6, 3526 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3504:	2301      	movs	r3, #1
    3506:	9a07      	ldr	r2, [sp, #28]
    3508:	4093      	lsls	r3, r2
				(func_on &&
    350a:	f013 0f10 	tst.w	r3, #16
    350e:	d118      	bne.n	3542 <ids_print+0x56>
		total += print_formatted(output,
    3510:	4e0d      	ldr	r6, [pc, #52]	; (3548 <ids_print+0x5c>)
    3512:	e009      	b.n	3528 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3514:	4b0d      	ldr	r3, [pc, #52]	; (354c <ids_print+0x60>)
    3516:	9a07      	ldr	r2, [sp, #28]
    3518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    351c:	490c      	ldr	r1, [pc, #48]	; (3550 <ids_print+0x64>)
    351e:	f7ff ff05 	bl	332c <print_formatted>
    3522:	4604      	mov	r4, r0
    3524:	e7eb      	b.n	34fe <ids_print+0x12>
		total += print_formatted(output,
    3526:	4e08      	ldr	r6, [pc, #32]	; (3548 <ids_print+0x5c>)
    3528:	4639      	mov	r1, r7
    352a:	4628      	mov	r0, r5
    352c:	f7ff fea0 	bl	3270 <log_source_name_get>
    3530:	4602      	mov	r2, r0
    3532:	4631      	mov	r1, r6
    3534:	4640      	mov	r0, r8
    3536:	f7ff fef9 	bl	332c <print_formatted>
    353a:	4404      	add	r4, r0
}
    353c:	4620      	mov	r0, r4
    353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3542:	4e04      	ldr	r6, [pc, #16]	; (3554 <ids_print+0x68>)
    3544:	e7f0      	b.n	3528 <ids_print+0x3c>
    3546:	bf00      	nop
    3548:	0000dc10 	.word	0x0000dc10
    354c:	0000dca8 	.word	0x0000dca8
    3550:	0000dc1c 	.word	0x0000dc1c
    3554:	0000dc18 	.word	0x0000dc18

00003558 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    355c:	b085      	sub	sp, #20
    355e:	4605      	mov	r5, r0
    3560:	460c      	mov	r4, r1
    3562:	4616      	mov	r6, r2
    3564:	9303      	str	r3, [sp, #12]
    3566:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    356a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    356e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3572:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3576:	f008 fba6 	bl	bcc6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    357a:	b1e8      	cbz	r0, 35b8 <prefix_print+0x60>
    357c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    357e:	4913      	ldr	r1, [pc, #76]	; (35cc <prefix_print+0x74>)
    3580:	4628      	mov	r0, r5
    3582:	f7ff fed3 	bl	332c <print_formatted>
    3586:	4607      	mov	r7, r0
	}

	if (stamp) {
    3588:	f1bb 0f00 	cmp.w	fp, #0
    358c:	d116      	bne.n	35bc <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    358e:	4642      	mov	r2, r8
    3590:	4651      	mov	r1, sl
    3592:	4628      	mov	r0, r5
    3594:	f008 fbc3 	bl	bd1e <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3598:	f8cd 8004 	str.w	r8, [sp, #4]
    359c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    35a0:	9300      	str	r3, [sp, #0]
    35a2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    35a6:	4632      	mov	r2, r6
    35a8:	4649      	mov	r1, r9
    35aa:	4628      	mov	r0, r5
    35ac:	f7ff ff9e 	bl	34ec <ids_print>
			domain_id, source_id, level);


	return length;
}
    35b0:	4438      	add	r0, r7
    35b2:	b005      	add	sp, #20
    35b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    35b8:	2700      	movs	r7, #0
    35ba:	e7e5      	b.n	3588 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    35bc:	9a03      	ldr	r2, [sp, #12]
    35be:	4621      	mov	r1, r4
    35c0:	4628      	mov	r0, r5
    35c2:	f7ff fec5 	bl	3350 <timestamp_print>
    35c6:	4407      	add	r7, r0
    35c8:	e7e1      	b.n	358e <prefix_print+0x36>
    35ca:	bf00      	nop
    35cc:	0000dc24 	.word	0x0000dc24

000035d0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    35d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35d4:	b084      	sub	sp, #16
    35d6:	4606      	mov	r6, r0
    35d8:	460c      	mov	r4, r1
    35da:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    35dc:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    35de:	880a      	ldrh	r2, [r1, #0]
    35e0:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    35e4:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    35e8:	d037      	beq.n	365a <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    35ea:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    35ec:	7809      	ldrb	r1, [r1, #0]
    35ee:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    35f2:	b37a      	cbz	r2, 3654 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    35f4:	4829      	ldr	r0, [pc, #164]	; (369c <log_output_msg2_process+0xcc>)
    35f6:	1a12      	subs	r2, r2, r0
    35f8:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    35fc:	9202      	str	r2, [sp, #8]
    35fe:	9101      	str	r1, [sp, #4]
    3600:	f8cd 8000 	str.w	r8, [sp]
    3604:	2200      	movs	r2, #0
    3606:	4639      	mov	r1, r7
    3608:	4630      	mov	r0, r6
    360a:	f7ff ffa5 	bl	3558 <prefix_print>
    360e:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3610:	4625      	mov	r5, r4
    3612:	f855 3b10 	ldr.w	r3, [r5], #16
    3616:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    361a:	b153      	cbz	r3, 3632 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    361c:	f1b8 0f00 	cmp.w	r8, #0
    3620:	d11e      	bne.n	3660 <log_output_msg2_process+0x90>
    3622:	481f      	ldr	r0, [pc, #124]	; (36a0 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3624:	462b      	mov	r3, r5
    3626:	4632      	mov	r2, r6
    3628:	491e      	ldr	r1, [pc, #120]	; (36a4 <log_output_msg2_process+0xd4>)
    362a:	f008 f950 	bl	b8ce <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    362e:	2800      	cmp	r0, #0
    3630:	db18      	blt.n	3664 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    3632:	8862      	ldrh	r2, [r4, #2]
    3634:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3638:	6821      	ldr	r1, [r4, #0]
    363a:	f3c1 2149 	ubfx	r1, r1, #9, #10
    363e:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    3640:	b9fa      	cbnz	r2, 3682 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    3642:	f1b8 0f00 	cmp.w	r8, #0
    3646:	d122      	bne.n	368e <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3648:	4630      	mov	r0, r6
    364a:	f008 fb9b 	bl	bd84 <log_output_flush>
}
    364e:	b004      	add	sp, #16
    3650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    3654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3658:	e7d0      	b.n	35fc <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    365a:	f04f 0900 	mov.w	r9, #0
    365e:	e7d7      	b.n	3610 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3660:	4811      	ldr	r0, [pc, #68]	; (36a8 <log_output_msg2_process+0xd8>)
    3662:	e7df      	b.n	3624 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    3664:	f8df a044 	ldr.w	sl, [pc, #68]	; 36ac <log_output_msg2_process+0xdc>
    3668:	f240 23b7 	movw	r3, #695	; 0x2b7
    366c:	4652      	mov	r2, sl
    366e:	4910      	ldr	r1, [pc, #64]	; (36b0 <log_output_msg2_process+0xe0>)
    3670:	4810      	ldr	r0, [pc, #64]	; (36b4 <log_output_msg2_process+0xe4>)
    3672:	f008 fafd 	bl	bc70 <assert_print>
    3676:	f240 21b7 	movw	r1, #695	; 0x2b7
    367a:	4650      	mov	r0, sl
    367c:	f008 faf1 	bl	bc62 <assert_post_action>
    3680:	e7d7      	b.n	3632 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    3682:	9700      	str	r7, [sp, #0]
    3684:	464b      	mov	r3, r9
    3686:	4630      	mov	r0, r6
    3688:	f008 fb61 	bl	bd4e <log_msg2_hexdump>
    368c:	e7d9      	b.n	3642 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    368e:	4642      	mov	r2, r8
    3690:	4639      	mov	r1, r7
    3692:	4630      	mov	r0, r6
    3694:	f008 fb4f 	bl	bd36 <postfix_print>
    3698:	e7d6      	b.n	3648 <log_output_msg2_process+0x78>
    369a:	bf00      	nop
    369c:	0000ce58 	.word	0x0000ce58
    36a0:	0000bce9 	.word	0x0000bce9
    36a4:	000029cd 	.word	0x000029cd
    36a8:	0000bccb 	.word	0x0000bccb
    36ac:	0000dc28 	.word	0x0000dc28
    36b0:	0000dc68 	.word	0x0000dc68
    36b4:	0000d02c 	.word	0x0000d02c

000036b8 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    36b8:	4b07      	ldr	r3, [pc, #28]	; (36d8 <log_output_timestamp_freq_set+0x20>)
    36ba:	2201      	movs	r2, #1
    36bc:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    36be:	e004      	b.n	36ca <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    36c0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    36c2:	4a05      	ldr	r2, [pc, #20]	; (36d8 <log_output_timestamp_freq_set+0x20>)
    36c4:	6813      	ldr	r3, [r2, #0]
    36c6:	005b      	lsls	r3, r3, #1
    36c8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <log_output_timestamp_freq_set+0x24>)
    36cc:	4298      	cmp	r0, r3
    36ce:	d8f7      	bhi.n	36c0 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    36d0:	4b03      	ldr	r3, [pc, #12]	; (36e0 <log_output_timestamp_freq_set+0x28>)
    36d2:	6018      	str	r0, [r3, #0]
}
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop
    36d8:	20000638 	.word	0x20000638
    36dc:	000f4240 	.word	0x000f4240
    36e0:	20000634 	.word	0x20000634

000036e4 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    36e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36e8:	b087      	sub	sp, #28
    36ea:	af02      	add	r7, sp, #8
    36ec:	4682      	mov	sl, r0
    36ee:	6079      	str	r1, [r7, #4]
    36f0:	4691      	mov	r9, r2
    36f2:	4698      	mov	r8, r3
    36f4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    36f6:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    36fa:	f1bb 0f00 	cmp.w	fp, #0
    36fe:	d016      	beq.n	372e <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    3700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3702:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3704:	9300      	str	r3, [sp, #0]
    3706:	465b      	mov	r3, fp
    3708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    370a:	2110      	movs	r1, #16
    370c:	2000      	movs	r0, #0
    370e:	f7fe f8fb 	bl	1908 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3712:	1e05      	subs	r5, r0, #0
    3714:	da0c      	bge.n	3730 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    3716:	4c26      	ldr	r4, [pc, #152]	; (37b0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    3718:	2367      	movs	r3, #103	; 0x67
    371a:	4622      	mov	r2, r4
    371c:	4925      	ldr	r1, [pc, #148]	; (37b4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    371e:	4826      	ldr	r0, [pc, #152]	; (37b8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3720:	f008 faa6 	bl	bc70 <assert_print>
    3724:	2167      	movs	r1, #103	; 0x67
    3726:	4620      	mov	r0, r4
    3728:	f008 fa9b 	bl	bc62 <assert_post_action>
		va_end(ap2);
    372c:	e000      	b.n	3730 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    372e:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3730:	4629      	mov	r1, r5
    3732:	19ab      	adds	r3, r5, r6
    3734:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3736:	2400      	movs	r4, #0
    3738:	f36f 0400 	bfc	r4, #0, #1
    373c:	f36f 0441 	bfc	r4, #1, #1
    3740:	f36f 0482 	bfc	r4, #2, #1
    3744:	f36a 04c5 	bfi	r4, sl, #3, #3
    3748:	f369 1488 	bfi	r4, r9, #6, #3
    374c:	f365 2452 	bfi	r4, r5, #9, #10
    3750:	f366 44de 	bfi	r4, r6, #19, #12
    3754:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3758:	f023 0307 	bic.w	r3, r3, #7
    375c:	ebad 0d03 	sub.w	sp, sp, r3
    3760:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3762:	466b      	mov	r3, sp
    3764:	f113 0018 	adds.w	r0, r3, #24
    3768:	d00a      	beq.n	3780 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    376a:	f1bb 0f00 	cmp.w	fp, #0
    376e:	d007      	beq.n	3780 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3772:	9300      	str	r3, [sp, #0]
    3774:	465b      	mov	r3, fp
    3776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3778:	f7fe f8c6 	bl	1908 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    377c:	2800      	cmp	r0, #0
    377e:	db09      	blt.n	3794 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3780:	4643      	mov	r3, r8
    3782:	4622      	mov	r2, r4
    3784:	6879      	ldr	r1, [r7, #4]
    3786:	4628      	mov	r0, r5
    3788:	f008 fb09 	bl	bd9e <z_log_msg2_finalize>
	}
}
    378c:	3714      	adds	r7, #20
    378e:	46bd      	mov	sp, r7
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    3794:	f8df 9018 	ldr.w	r9, [pc, #24]	; 37b0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    3798:	2381      	movs	r3, #129	; 0x81
    379a:	464a      	mov	r2, r9
    379c:	4905      	ldr	r1, [pc, #20]	; (37b4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    379e:	4806      	ldr	r0, [pc, #24]	; (37b8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    37a0:	f008 fa66 	bl	bc70 <assert_print>
    37a4:	2181      	movs	r1, #129	; 0x81
    37a6:	4648      	mov	r0, r9
    37a8:	f008 fa5b 	bl	bc62 <assert_post_action>
    37ac:	e7e8      	b.n	3780 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    37ae:	bf00      	nop
    37b0:	0000dcbc 	.word	0x0000dcbc
    37b4:	0000dcf8 	.word	0x0000dcf8
    37b8:	0000d02c 	.word	0x0000d02c

000037bc <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    37bc:	b570      	push	{r4, r5, r6, lr}
    37be:	4606      	mov	r6, r0
    37c0:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    37c2:	2400      	movs	r4, #0
    37c4:	e006      	b.n	37d4 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    37c6:	4b05      	ldr	r3, [pc, #20]	; (37dc <char_out+0x20>)
    37c8:	6818      	ldr	r0, [r3, #0]
    37ca:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    37cc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    37ce:	685b      	ldr	r3, [r3, #4]
    37d0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    37d2:	3401      	adds	r4, #1
    37d4:	42ac      	cmp	r4, r5
    37d6:	d3f6      	bcc.n	37c6 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    37d8:	4628      	mov	r0, r5
    37da:	bd70      	pop	{r4, r5, r6, pc}
    37dc:	20000654 	.word	0x20000654

000037e0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    37e0:	4b01      	ldr	r3, [pc, #4]	; (37e8 <format_set+0x8>)
    37e2:	6019      	str	r1, [r3, #0]
	return 0;
}
    37e4:	2000      	movs	r0, #0
    37e6:	4770      	bx	lr
    37e8:	20000644 	.word	0x20000644

000037ec <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    37ec:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    37ee:	4809      	ldr	r0, [pc, #36]	; (3814 <log_backend_uart_init+0x28>)
    37f0:	4b09      	ldr	r3, [pc, #36]	; (3818 <log_backend_uart_init+0x2c>)
    37f2:	6018      	str	r0, [r3, #0]
    37f4:	f009 f8cc 	bl	c990 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    37f8:	b100      	cbz	r0, 37fc <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    37fa:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    37fc:	4c07      	ldr	r4, [pc, #28]	; (381c <log_backend_uart_init+0x30>)
    37fe:	2379      	movs	r3, #121	; 0x79
    3800:	4622      	mov	r2, r4
    3802:	4907      	ldr	r1, [pc, #28]	; (3820 <log_backend_uart_init+0x34>)
    3804:	4807      	ldr	r0, [pc, #28]	; (3824 <log_backend_uart_init+0x38>)
    3806:	f008 fa33 	bl	bc70 <assert_print>
    380a:	2179      	movs	r1, #121	; 0x79
    380c:	4620      	mov	r0, r4
    380e:	f008 fa28 	bl	bc62 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    3812:	e7f2      	b.n	37fa <log_backend_uart_init+0xe>
    3814:	0000cca8 	.word	0x0000cca8
    3818:	20000654 	.word	0x20000654
    381c:	0000dd04 	.word	0x0000dd04
    3820:	0000dd3c 	.word	0x0000dd3c
    3824:	0000d02c 	.word	0x0000d02c

00003828 <panic>:

static void panic(struct log_backend const *const backend)
{
    3828:	b508      	push	{r3, lr}
	in_panic = true;
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <panic+0x10>)
    382c:	2201      	movs	r2, #1
    382e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3830:	4802      	ldr	r0, [pc, #8]	; (383c <panic+0x14>)
    3832:	f008 faa7 	bl	bd84 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3836:	bd08      	pop	{r3, pc}
    3838:	20001382 	.word	0x20001382
    383c:	0000dd98 	.word	0x0000dd98

00003840 <process>:
{
    3840:	b510      	push	{r4, lr}
    3842:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3844:	4b04      	ldr	r3, [pc, #16]	; (3858 <process+0x18>)
    3846:	6818      	ldr	r0, [r3, #0]
    3848:	f7ff fc1c 	bl	3084 <log_format_func_t_get>
    384c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    384e:	220f      	movs	r2, #15
    3850:	4621      	mov	r1, r4
    3852:	4802      	ldr	r0, [pc, #8]	; (385c <process+0x1c>)
    3854:	4798      	blx	r3
}
    3856:	bd10      	pop	{r4, pc}
    3858:	20000644 	.word	0x20000644
    385c:	0000dd98 	.word	0x0000dd98

00003860 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3860:	4b03      	ldr	r3, [pc, #12]	; (3870 <log_backend_rtt_init+0x10>)
    3862:	2201      	movs	r2, #1
    3864:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3866:	4b03      	ldr	r3, [pc, #12]	; (3874 <log_backend_rtt_init+0x14>)
    3868:	4a03      	ldr	r2, [pc, #12]	; (3878 <log_backend_rtt_init+0x18>)
    386a:	601a      	str	r2, [r3, #0]
}
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	20001383 	.word	0x20001383
    3874:	20000680 	.word	0x20000680
    3878:	20000668 	.word	0x20000668

0000387c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    387c:	4b01      	ldr	r3, [pc, #4]	; (3884 <format_set+0x8>)
    387e:	6019      	str	r1, [r3, #0]
	return 0;
}
    3880:	2000      	movs	r0, #0
    3882:	4770      	bx	lr
    3884:	20000684 	.word	0x20000684

00003888 <on_failed_write>:
{
    3888:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    388a:	b918      	cbnz	r0, 3894 <on_failed_write+0xc>
		host_present = false;
    388c:	4b04      	ldr	r3, [pc, #16]	; (38a0 <on_failed_write+0x18>)
    388e:	2200      	movs	r2, #0
    3890:	701a      	strb	r2, [r3, #0]
}
    3892:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3894:	f241 3088 	movw	r0, #5000	; 0x1388
    3898:	f009 f96a 	bl	cb70 <z_impl_k_busy_wait>
    389c:	e7f9      	b.n	3892 <on_failed_write+0xa>
    389e:	bf00      	nop
    38a0:	20001383 	.word	0x20001383

000038a4 <on_write>:
{
    38a4:	b538      	push	{r3, r4, r5, lr}
    38a6:	4604      	mov	r4, r0
	host_present = true;
    38a8:	4b0a      	ldr	r3, [pc, #40]	; (38d4 <on_write+0x30>)
    38aa:	2201      	movs	r2, #1
    38ac:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    38ae:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <on_write+0x34>)
    38b0:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    38b2:	b92b      	cbnz	r3, 38c0 <on_write+0x1c>
}
    38b4:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    38b6:	1e65      	subs	r5, r4, #1
    38b8:	4620      	mov	r0, r4
    38ba:	f7ff ffe5 	bl	3888 <on_failed_write>
    38be:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    38c0:	2000      	movs	r0, #0
    38c2:	f004 fdfb 	bl	84bc <SEGGER_RTT_HasDataUp>
    38c6:	2800      	cmp	r0, #0
    38c8:	d0f4      	beq.n	38b4 <on_write+0x10>
    38ca:	4b02      	ldr	r3, [pc, #8]	; (38d4 <on_write+0x30>)
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d1f1      	bne.n	38b6 <on_write+0x12>
    38d2:	e7ef      	b.n	38b4 <on_write+0x10>
    38d4:	20001383 	.word	0x20001383
    38d8:	20001384 	.word	0x20001384

000038dc <data_out_block_mode>:
{
    38dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38de:	4606      	mov	r6, r0
    38e0:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    38e2:	2704      	movs	r7, #4
    38e4:	e006      	b.n	38f4 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    38e6:	4638      	mov	r0, r7
    38e8:	f7ff ffdc 	bl	38a4 <on_write>
	} while ((ret == 0) && host_present);
    38ec:	b99c      	cbnz	r4, 3916 <data_out_block_mode+0x3a>
    38ee:	4b0d      	ldr	r3, [pc, #52]	; (3924 <data_out_block_mode+0x48>)
    38f0:	781b      	ldrb	r3, [r3, #0]
    38f2:	b183      	cbz	r3, 3916 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    38f4:	462a      	mov	r2, r5
    38f6:	4631      	mov	r1, r6
    38f8:	2000      	movs	r0, #0
    38fa:	f004 fd7b 	bl	83f4 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    38fe:	4604      	mov	r4, r0
    3900:	2800      	cmp	r0, #0
    3902:	d1f0      	bne.n	38e6 <data_out_block_mode+0xa>
		} else if (host_present) {
    3904:	4b07      	ldr	r3, [pc, #28]	; (3924 <data_out_block_mode+0x48>)
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	2b00      	cmp	r3, #0
    390a:	d0ef      	beq.n	38ec <data_out_block_mode+0x10>
			retry_cnt--;
    390c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    390e:	4638      	mov	r0, r7
    3910:	f7ff ffba 	bl	3888 <on_failed_write>
    3914:	e7ea      	b.n	38ec <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    3916:	b914      	cbnz	r4, 391e <data_out_block_mode+0x42>
    3918:	4b02      	ldr	r3, [pc, #8]	; (3924 <data_out_block_mode+0x48>)
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	b903      	cbnz	r3, 3920 <data_out_block_mode+0x44>
    391e:	462c      	mov	r4, r5
}
    3920:	4620      	mov	r0, r4
    3922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3924:	20001383 	.word	0x20001383

00003928 <panic>:
{
    3928:	b508      	push	{r3, lr}
	panic_mode = true;
    392a:	4b03      	ldr	r3, [pc, #12]	; (3938 <panic+0x10>)
    392c:	2201      	movs	r2, #1
    392e:	701a      	strb	r2, [r3, #0]
    3930:	4802      	ldr	r0, [pc, #8]	; (393c <panic+0x14>)
    3932:	f008 fa27 	bl	bd84 <log_output_flush>
}
    3936:	bd08      	pop	{r3, pc}
    3938:	20001384 	.word	0x20001384
    393c:	0000ddd8 	.word	0x0000ddd8

00003940 <process>:
{
    3940:	b510      	push	{r4, lr}
    3942:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3944:	4b04      	ldr	r3, [pc, #16]	; (3958 <process+0x18>)
    3946:	6818      	ldr	r0, [r3, #0]
    3948:	f7ff fb9c 	bl	3084 <log_format_func_t_get>
    394c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    394e:	220f      	movs	r2, #15
    3950:	4621      	mov	r1, r4
    3952:	4802      	ldr	r0, [pc, #8]	; (395c <process+0x1c>)
    3954:	4798      	blx	r3
}
    3956:	bd10      	pop	{r4, pc}
    3958:	20000684 	.word	0x20000684
    395c:	0000ddd8 	.word	0x0000ddd8

00003960 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3960:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    3962:	4b40      	ldr	r3, [pc, #256]	; (3a64 <pm_system_resume+0x104>)
    3964:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3966:	f005 031f 	and.w	r3, r5, #31
    396a:	2201      	movs	r2, #1
    396c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    396e:	0969      	lsrs	r1, r5, #5
    3970:	4b3d      	ldr	r3, [pc, #244]	; (3a68 <pm_system_resume+0x108>)
    3972:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3976:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3978:	f3bf 8f5b 	dmb	ish
    397c:	e853 1f00 	ldrex	r1, [r3]
    3980:	ea01 0400 	and.w	r4, r1, r0
    3984:	e843 4600 	strex	r6, r4, [r3]
    3988:	2e00      	cmp	r6, #0
    398a:	d1f7      	bne.n	397c <pm_system_resume+0x1c>
    398c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3990:	420a      	tst	r2, r1
    3992:	d100      	bne.n	3996 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3994:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3996:	4a35      	ldr	r2, [pc, #212]	; (3a6c <pm_system_resume+0x10c>)
    3998:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    399c:	0098      	lsls	r0, r3, #2
    399e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    39a2:	4933      	ldr	r1, [pc, #204]	; (3a70 <pm_system_resume+0x110>)
    39a4:	b1a9      	cbz	r1, 39d2 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    39a6:	7859      	ldrb	r1, [r3, #1]
    39a8:	5c10      	ldrb	r0, [r2, r0]
    39aa:	f008 fb69 	bl	c080 <pm_state_exit_post_ops>
    39ae:	f04f 0320 	mov.w	r3, #32
    39b2:	f3ef 8611 	mrs	r6, BASEPRI
    39b6:	f383 8812 	msr	BASEPRI_MAX, r3
    39ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39be:	482d      	ldr	r0, [pc, #180]	; (3a74 <pm_system_resume+0x114>)
    39c0:	f005 f8a2 	bl	8b08 <z_spin_lock_valid>
    39c4:	b158      	cbz	r0, 39de <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    39c6:	482b      	ldr	r0, [pc, #172]	; (3a74 <pm_system_resume+0x114>)
    39c8:	f005 f8be 	bl	8b48 <z_spin_lock_set_owner>
	return list->head;
    39cc:	4b2a      	ldr	r3, [pc, #168]	; (3a78 <pm_system_resume+0x118>)
    39ce:	681c      	ldr	r4, [r3, #0]
    39d0:	e020      	b.n	3a14 <pm_system_resume+0xb4>
	__asm__ volatile(
    39d2:	2300      	movs	r3, #0
    39d4:	f383 8811 	msr	BASEPRI, r3
    39d8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    39dc:	e7e7      	b.n	39ae <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39de:	4c27      	ldr	r4, [pc, #156]	; (3a7c <pm_system_resume+0x11c>)
    39e0:	238e      	movs	r3, #142	; 0x8e
    39e2:	4622      	mov	r2, r4
    39e4:	4926      	ldr	r1, [pc, #152]	; (3a80 <pm_system_resume+0x120>)
    39e6:	4827      	ldr	r0, [pc, #156]	; (3a84 <pm_system_resume+0x124>)
    39e8:	f008 f942 	bl	bc70 <assert_print>
    39ec:	4921      	ldr	r1, [pc, #132]	; (3a74 <pm_system_resume+0x114>)
    39ee:	4826      	ldr	r0, [pc, #152]	; (3a88 <pm_system_resume+0x128>)
    39f0:	f008 f93e 	bl	bc70 <assert_print>
    39f4:	218e      	movs	r1, #142	; 0x8e
    39f6:	4620      	mov	r0, r4
    39f8:	f008 f933 	bl	bc62 <assert_post_action>
    39fc:	e7e3      	b.n	39c6 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    39fe:	4b19      	ldr	r3, [pc, #100]	; (3a64 <pm_system_resume+0x104>)
    3a00:	7d1b      	ldrb	r3, [r3, #20]
    3a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a06:	4919      	ldr	r1, [pc, #100]	; (3a6c <pm_system_resume+0x10c>)
    3a08:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3a0c:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3a0e:	b10c      	cbz	r4, 3a14 <pm_system_resume+0xb4>
	return node->next;
    3a10:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3a12:	b124      	cbz	r4, 3a1e <pm_system_resume+0xbe>
    3a14:	b11c      	cbz	r4, 3a1e <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    3a16:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    3a18:	2a00      	cmp	r2, #0
    3a1a:	d1f0      	bne.n	39fe <pm_system_resume+0x9e>
    3a1c:	e7f7      	b.n	3a0e <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3a1e:	4815      	ldr	r0, [pc, #84]	; (3a74 <pm_system_resume+0x114>)
    3a20:	f005 f882 	bl	8b28 <z_spin_unlock_valid>
    3a24:	b170      	cbz	r0, 3a44 <pm_system_resume+0xe4>
	__asm__ volatile(
    3a26:	f386 8811 	msr	BASEPRI, r6
    3a2a:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3a2e:	4a0f      	ldr	r2, [pc, #60]	; (3a6c <pm_system_resume+0x10c>)
    3a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3a34:	00a9      	lsls	r1, r5, #2
    3a36:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3a3a:	2300      	movs	r3, #0
    3a3c:	5053      	str	r3, [r2, r1]
    3a3e:	606b      	str	r3, [r5, #4]
    3a40:	60ab      	str	r3, [r5, #8]
}
    3a42:	e7a7      	b.n	3994 <pm_system_resume+0x34>
    3a44:	4c0d      	ldr	r4, [pc, #52]	; (3a7c <pm_system_resume+0x11c>)
    3a46:	23b9      	movs	r3, #185	; 0xb9
    3a48:	4622      	mov	r2, r4
    3a4a:	4910      	ldr	r1, [pc, #64]	; (3a8c <pm_system_resume+0x12c>)
    3a4c:	480d      	ldr	r0, [pc, #52]	; (3a84 <pm_system_resume+0x124>)
    3a4e:	f008 f90f 	bl	bc70 <assert_print>
    3a52:	4908      	ldr	r1, [pc, #32]	; (3a74 <pm_system_resume+0x114>)
    3a54:	480e      	ldr	r0, [pc, #56]	; (3a90 <pm_system_resume+0x130>)
    3a56:	f008 f90b 	bl	bc70 <assert_print>
    3a5a:	21b9      	movs	r1, #185	; 0xb9
    3a5c:	4620      	mov	r0, r4
    3a5e:	f008 f900 	bl	bc62 <assert_post_action>
    3a62:	e7e0      	b.n	3a26 <pm_system_resume+0xc6>
    3a64:	20001154 	.word	0x20001154
    3a68:	200006b0 	.word	0x200006b0
    3a6c:	200006a0 	.word	0x200006a0
    3a70:	0000c081 	.word	0x0000c081
    3a74:	20000694 	.word	0x20000694
    3a78:	20000698 	.word	0x20000698
    3a7c:	0000d7f0 	.word	0x0000d7f0
    3a80:	0000d850 	.word	0x0000d850
    3a84:	0000d02c 	.word	0x0000d02c
    3a88:	0000d868 	.word	0x0000d868
    3a8c:	0000d820 	.word	0x0000d820
    3a90:	0000d838 	.word	0x0000d838

00003a94 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3a98:	4b6d      	ldr	r3, [pc, #436]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3a9a:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3a9c:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a9e:	f3bf 8f5b 	dmb	ish
    3aa2:	4b6c      	ldr	r3, [pc, #432]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3aa8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3aac:	f005 021f 	and.w	r2, r5, #31
    3ab0:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3ab2:	f013 0f01 	tst.w	r3, #1
    3ab6:	d01d      	beq.n	3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3ab8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3abc:	4a66      	ldr	r2, [pc, #408]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3abe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3ac2:	b333      	cbz	r3, 3b12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3ac4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3ac8:	d139      	bne.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3aca:	f005 fe87 	bl	97dc <k_sched_lock>
	__asm__ volatile(
    3ace:	f04f 0320 	mov.w	r3, #32
    3ad2:	f3ef 8611 	mrs	r6, BASEPRI
    3ad6:	f383 8812 	msr	BASEPRI_MAX, r3
    3ada:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ade:	485f      	ldr	r0, [pc, #380]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3ae0:	f005 f812 	bl	8b08 <z_spin_lock_valid>
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d040      	beq.n	3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
	z_spin_lock_set_owner(l);
    3ae8:	485c      	ldr	r0, [pc, #368]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3aea:	f005 f82d 	bl	8b48 <z_spin_lock_set_owner>
	return list->head;
    3aee:	4b5c      	ldr	r3, [pc, #368]	; (3c60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c8>)
    3af0:	681c      	ldr	r4, [r3, #0]
    3af2:	e055      	b.n	3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>
		info = pm_policy_next_state(id, ticks);
    3af4:	4601      	mov	r1, r0
    3af6:	4628      	mov	r0, r5
    3af8:	f000 f8d6 	bl	3ca8 <pm_policy_next_state>
		if (info != NULL) {
    3afc:	2800      	cmp	r0, #0
    3afe:	d0db      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
			z_cpus_pm_state[id] = *info;
    3b00:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3b04:	4a54      	ldr	r2, [pc, #336]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b0a:	c807      	ldmia	r0, {r0, r1, r2}
    3b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    3b10:	e7d2      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3b12:	f005 021f 	and.w	r2, r5, #31
    3b16:	2301      	movs	r3, #1
    3b18:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b1a:	096d      	lsrs	r5, r5, #5
    3b1c:	4a4d      	ldr	r2, [pc, #308]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b1e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3b22:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b24:	f3bf 8f5b 	dmb	ish
    3b28:	e855 2f00 	ldrex	r2, [r5]
    3b2c:	401a      	ands	r2, r3
    3b2e:	e845 2100 	strex	r1, r2, [r5]
    3b32:	2900      	cmp	r1, #0
    3b34:	d1f8      	bne.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3b36:	f3bf 8f5b 	dmb	ish
		ret = false;
    3b3a:	2000      	movs	r0, #0
		goto end;
    3b3c:	e077      	b.n	3c2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x196>
		     k_us_to_ticks_ceil32(
    3b3e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3b42:	4a45      	ldr	r2, [pc, #276]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3b44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b48:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3b4a:	0c41      	lsrs	r1, r0, #17
    3b4c:	03c0      	lsls	r0, r0, #15
    3b4e:	4b45      	ldr	r3, [pc, #276]	; (3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>)
    3b50:	18c0      	adds	r0, r0, r3
    3b52:	4a45      	ldr	r2, [pc, #276]	; (3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>)
    3b54:	f04f 0300 	mov.w	r3, #0
    3b58:	f141 0100 	adc.w	r1, r1, #0
    3b5c:	f7fc fcb2 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3b60:	2101      	movs	r1, #1
    3b62:	1a20      	subs	r0, r4, r0
    3b64:	f007 f9ca 	bl	aefc <z_set_timeout_expiry>
    3b68:	e7af      	b.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3b6a:	4c40      	ldr	r4, [pc, #256]	; (3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>)
    3b6c:	238e      	movs	r3, #142	; 0x8e
    3b6e:	4622      	mov	r2, r4
    3b70:	493f      	ldr	r1, [pc, #252]	; (3c70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d8>)
    3b72:	4840      	ldr	r0, [pc, #256]	; (3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>)
    3b74:	f008 f87c 	bl	bc70 <assert_print>
    3b78:	4938      	ldr	r1, [pc, #224]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3b7a:	483f      	ldr	r0, [pc, #252]	; (3c78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e0>)
    3b7c:	f008 f878 	bl	bc70 <assert_print>
    3b80:	218e      	movs	r1, #142	; 0x8e
    3b82:	4620      	mov	r0, r4
    3b84:	f008 f86d 	bl	bc62 <assert_post_action>
    3b88:	e7ae      	b.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3b8a:	4b31      	ldr	r3, [pc, #196]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3b8c:	7d1b      	ldrb	r3, [r3, #20]
    3b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b92:	4931      	ldr	r1, [pc, #196]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3b94:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3b98:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3b9a:	b10c      	cbz	r4, 3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>
	return node->next;
    3b9c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3b9e:	b124      	cbz	r4, 3baa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x112>
    3ba0:	b11c      	cbz	r4, 3baa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x112>
			callback = notifier->state_entry;
    3ba2:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    3ba4:	2a00      	cmp	r2, #0
    3ba6:	d1f0      	bne.n	3b8a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf2>
    3ba8:	e7f7      	b.n	3b9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3baa:	482c      	ldr	r0, [pc, #176]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3bac:	f004 ffbc 	bl	8b28 <z_spin_unlock_valid>
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d03d      	beq.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
	__asm__ volatile(
    3bb4:	f386 8811 	msr	BASEPRI, r6
    3bb8:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3bbc:	f005 031f 	and.w	r3, r5, #31
    3bc0:	2101      	movs	r1, #1
    3bc2:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3bc4:	096b      	lsrs	r3, r5, #5
    3bc6:	4a2d      	ldr	r2, [pc, #180]	; (3c7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e4>)
    3bc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3bcc:	f3bf 8f5b 	dmb	ish
    3bd0:	e853 2f00 	ldrex	r2, [r3]
    3bd4:	430a      	orrs	r2, r1
    3bd6:	e843 2000 	strex	r0, r2, [r3]
    3bda:	2800      	cmp	r0, #0
    3bdc:	d1f8      	bne.n	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
    3bde:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3be2:	4b27      	ldr	r3, [pc, #156]	; (3c80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e8>)
    3be4:	b14b      	cbz	r3, 3bfa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x162>
		pm_state_set(info->state, info->substate_id);
    3be6:	4b1c      	ldr	r3, [pc, #112]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3be8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    3bec:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3bf0:	7849      	ldrb	r1, [r1, #1]
    3bf2:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    3bf6:	f008 fa37 	bl	c068 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3bfa:	f7ff feb1 	bl	3960 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    3bfe:	f005 031f 	and.w	r3, r5, #31
    3c02:	2401      	movs	r4, #1
    3c04:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3c08:	096d      	lsrs	r5, r5, #5
    3c0a:	4a12      	ldr	r2, [pc, #72]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3c0c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3c10:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c12:	f3bf 8f5b 	dmb	ish
    3c16:	e855 2f00 	ldrex	r2, [r5]
    3c1a:	401a      	ands	r2, r3
    3c1c:	e845 2100 	strex	r1, r2, [r5]
    3c20:	2900      	cmp	r1, #0
    3c22:	d1f8      	bne.n	3c16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x17e>
    3c24:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    3c28:	f006 fb64 	bl	a2f4 <k_sched_unlock>
	bool ret = true;
    3c2c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    3c2e:	bd70      	pop	{r4, r5, r6, pc}
    3c30:	4c0e      	ldr	r4, [pc, #56]	; (3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>)
    3c32:	23b9      	movs	r3, #185	; 0xb9
    3c34:	4622      	mov	r2, r4
    3c36:	4913      	ldr	r1, [pc, #76]	; (3c84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ec>)
    3c38:	480e      	ldr	r0, [pc, #56]	; (3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>)
    3c3a:	f008 f819 	bl	bc70 <assert_print>
    3c3e:	4907      	ldr	r1, [pc, #28]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3c40:	4811      	ldr	r0, [pc, #68]	; (3c88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f0>)
    3c42:	f008 f815 	bl	bc70 <assert_print>
    3c46:	21b9      	movs	r1, #185	; 0xb9
    3c48:	4620      	mov	r0, r4
    3c4a:	f008 f80a 	bl	bc62 <assert_post_action>
    3c4e:	e7b1      	b.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
    3c50:	20001154 	.word	0x20001154
    3c54:	200006ac 	.word	0x200006ac
    3c58:	200006a0 	.word	0x200006a0
    3c5c:	20000694 	.word	0x20000694
    3c60:	20000698 	.word	0x20000698
    3c64:	000f423f 	.word	0x000f423f
    3c68:	000f4240 	.word	0x000f4240
    3c6c:	0000d7f0 	.word	0x0000d7f0
    3c70:	0000d850 	.word	0x0000d850
    3c74:	0000d02c 	.word	0x0000d02c
    3c78:	0000d868 	.word	0x0000d868
    3c7c:	200006b0 	.word	0x200006b0
    3c80:	0000c069 	.word	0x0000c069
    3c84:	0000d820 	.word	0x0000d820
    3c88:	0000d838 	.word	0x0000d838

00003c8c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c8c:	f3bf 8f5b 	dmb	ish
    3c90:	4b04      	ldr	r3, [pc, #16]	; (3ca4 <pm_policy_state_lock_is_active+0x18>)
    3c92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3c96:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3c9a:	3800      	subs	r0, #0
    3c9c:	bf18      	it	ne
    3c9e:	2001      	movne	r0, #1
    3ca0:	4770      	bx	lr
    3ca2:	bf00      	nop
    3ca4:	200006b4 	.word	0x200006b4

00003ca8 <pm_policy_next_state>:
{
    3ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cac:	b082      	sub	sp, #8
    3cae:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3cb0:	a901      	add	r1, sp, #4
    3cb2:	f000 f843 	bl	3d3c <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3cb6:	1e44      	subs	r4, r0, #1
    3cb8:	b224      	sxth	r4, r4
    3cba:	e007      	b.n	3ccc <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    3cbc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    3cc0:	d032      	beq.n	3d28 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    3cc2:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    3cc4:	42b0      	cmp	r0, r6
    3cc6:	d92f      	bls.n	3d28 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3cc8:	3c01      	subs	r4, #1
    3cca:	b224      	sxth	r4, r4
    3ccc:	2c00      	cmp	r4, #0
    3cce:	db2a      	blt.n	3d26 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3cd6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    3cda:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    3cde:	f7ff ffd5 	bl	3c8c <pm_policy_state_lock_is_active>
    3ce2:	2800      	cmp	r0, #0
    3ce4:	d1f0      	bne.n	3cc8 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    3ce6:	6868      	ldr	r0, [r5, #4]
    3ce8:	0c41      	lsrs	r1, r0, #17
    3cea:	03c0      	lsls	r0, r0, #15
    3cec:	4f10      	ldr	r7, [pc, #64]	; (3d30 <pm_policy_next_state+0x88>)
    3cee:	19c0      	adds	r0, r0, r7
    3cf0:	4a10      	ldr	r2, [pc, #64]	; (3d34 <pm_policy_next_state+0x8c>)
    3cf2:	f04f 0300 	mov.w	r3, #0
    3cf6:	f141 0100 	adc.w	r1, r1, #0
    3cfa:	f7fc fbe3 	bl	4c4 <__aeabi_uldivmod>
    3cfe:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    3d00:	68ab      	ldr	r3, [r5, #8]
    3d02:	0c59      	lsrs	r1, r3, #17
    3d04:	03db      	lsls	r3, r3, #15
    3d06:	19d8      	adds	r0, r3, r7
    3d08:	4a0a      	ldr	r2, [pc, #40]	; (3d34 <pm_policy_next_state+0x8c>)
    3d0a:	f04f 0300 	mov.w	r3, #0
    3d0e:	f141 0100 	adc.w	r1, r1, #0
    3d12:	f7fc fbd7 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3d16:	4b08      	ldr	r3, [pc, #32]	; (3d38 <pm_policy_next_state+0x90>)
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3d1e:	d0cd      	beq.n	3cbc <pm_policy_next_state+0x14>
    3d20:	4283      	cmp	r3, r0
    3d22:	d8cb      	bhi.n	3cbc <pm_policy_next_state+0x14>
    3d24:	e7d0      	b.n	3cc8 <pm_policy_next_state+0x20>
	return NULL;
    3d26:	2500      	movs	r5, #0
}
    3d28:	4628      	mov	r0, r5
    3d2a:	b002      	add	sp, #8
    3d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d30:	000f423f 	.word	0x000f423f
    3d34:	000f4240 	.word	0x000f4240
    3d38:	200000a0 	.word	0x200000a0

00003d3c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3d3c:	b908      	cbnz	r0, 3d42 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3d3e:	4b02      	ldr	r3, [pc, #8]	; (3d48 <pm_state_cpu_get_all+0xc>)
    3d40:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3d42:	2000      	movs	r0, #0
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop
    3d48:	0000ddec 	.word	0x0000ddec

00003d4c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3d4c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3d4e:	4802      	ldr	r0, [pc, #8]	; (3d58 <nrf_cc3xx_platform_abort_init+0xc>)
    3d50:	f007 fc04 	bl	b55c <nrf_cc3xx_platform_set_abort>
}
    3d54:	bd08      	pop	{r3, pc}
    3d56:	bf00      	nop
    3d58:	0000ddec 	.word	0x0000ddec

00003d5c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3d5c:	b1d0      	cbz	r0, 3d94 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d5e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3d60:	6842      	ldr	r2, [r0, #4]
    3d62:	2a04      	cmp	r2, #4
    3d64:	d005      	beq.n	3d72 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3d66:	b1d2      	cbz	r2, 3d9e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3d68:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3d6a:	f005 fa2d 	bl	91c8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3d6e:	2000      	movs	r0, #0
    }
}
    3d70:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3d72:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3d74:	2200      	movs	r2, #0
    3d76:	f3bf 8f5b 	dmb	ish
    3d7a:	e853 1f00 	ldrex	r1, [r3]
    3d7e:	2901      	cmp	r1, #1
    3d80:	d103      	bne.n	3d8a <mutex_unlock_platform+0x2e>
    3d82:	e843 2000 	strex	r0, r2, [r3]
    3d86:	2800      	cmp	r0, #0
    3d88:	d1f7      	bne.n	3d7a <mutex_unlock_platform+0x1e>
    3d8a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d8e:	d104      	bne.n	3d9a <mutex_unlock_platform+0x3e>
    3d90:	4610      	mov	r0, r2
    3d92:	e7ed      	b.n	3d70 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3d94:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3d98:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d9a:	4802      	ldr	r0, [pc, #8]	; (3da4 <mutex_unlock_platform+0x48>)
    3d9c:	e7e8      	b.n	3d70 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3d9e:	4802      	ldr	r0, [pc, #8]	; (3da8 <mutex_unlock_platform+0x4c>)
    3da0:	e7e6      	b.n	3d70 <mutex_unlock_platform+0x14>
    3da2:	bf00      	nop
    3da4:	ffff8fe9 	.word	0xffff8fe9
    3da8:	ffff8fea 	.word	0xffff8fea

00003dac <mutex_lock_platform>:
    if(mutex == NULL) {
    3dac:	b320      	cbz	r0, 3df8 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3dae:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3db0:	6842      	ldr	r2, [r0, #4]
    3db2:	2a04      	cmp	r2, #4
    3db4:	d002      	beq.n	3dbc <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3db6:	b992      	cbnz	r2, 3dde <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3db8:	4811      	ldr	r0, [pc, #68]	; (3e00 <mutex_lock_platform+0x54>)
    3dba:	e00f      	b.n	3ddc <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3dbc:	6803      	ldr	r3, [r0, #0]
    3dbe:	2201      	movs	r2, #1
    3dc0:	f3bf 8f5b 	dmb	ish
    3dc4:	e853 1f00 	ldrex	r1, [r3]
    3dc8:	2900      	cmp	r1, #0
    3dca:	d103      	bne.n	3dd4 <mutex_lock_platform+0x28>
    3dcc:	e843 2000 	strex	r0, r2, [r3]
    3dd0:	2800      	cmp	r0, #0
    3dd2:	d1f7      	bne.n	3dc4 <mutex_lock_platform+0x18>
    3dd4:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3dd8:	d10c      	bne.n	3df4 <mutex_lock_platform+0x48>
    3dda:	2000      	movs	r0, #0
}
    3ddc:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3dde:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3de8:	f005 f8ce 	bl	8f88 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3dec:	2800      	cmp	r0, #0
    3dee:	d0f5      	beq.n	3ddc <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3df0:	4804      	ldr	r0, [pc, #16]	; (3e04 <mutex_lock_platform+0x58>)
    3df2:	e7f3      	b.n	3ddc <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3df4:	4803      	ldr	r0, [pc, #12]	; (3e04 <mutex_lock_platform+0x58>)
    3df6:	e7f1      	b.n	3ddc <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3df8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop
    3e00:	ffff8fea 	.word	0xffff8fea
    3e04:	ffff8fe9 	.word	0xffff8fe9

00003e08 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3e08:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3e0a:	4604      	mov	r4, r0
    3e0c:	b188      	cbz	r0, 3e32 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3e0e:	6863      	ldr	r3, [r4, #4]
    3e10:	2b04      	cmp	r3, #4
    3e12:	d00d      	beq.n	3e30 <mutex_free_platform+0x28>
    3e14:	2b08      	cmp	r3, #8
    3e16:	d00b      	beq.n	3e30 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3e18:	b153      	cbz	r3, 3e30 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3e1a:	f013 0f02 	tst.w	r3, #2
    3e1e:	d00d      	beq.n	3e3c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3e20:	4621      	mov	r1, r4
    3e22:	4809      	ldr	r0, [pc, #36]	; (3e48 <mutex_free_platform+0x40>)
    3e24:	f004 fdfa 	bl	8a1c <k_mem_slab_free>
        mutex->mutex = NULL;
    3e28:	2300      	movs	r3, #0
    3e2a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3e2c:	2300      	movs	r3, #0
    3e2e:	6063      	str	r3, [r4, #4]
}
    3e30:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3e32:	4b06      	ldr	r3, [pc, #24]	; (3e4c <mutex_free_platform+0x44>)
    3e34:	685b      	ldr	r3, [r3, #4]
    3e36:	4806      	ldr	r0, [pc, #24]	; (3e50 <mutex_free_platform+0x48>)
    3e38:	4798      	blx	r3
    3e3a:	e7e8      	b.n	3e0e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3e3c:	2214      	movs	r2, #20
    3e3e:	2100      	movs	r1, #0
    3e40:	6820      	ldr	r0, [r4, #0]
    3e42:	f008 f8dc 	bl	bffe <memset>
    3e46:	e7f1      	b.n	3e2c <mutex_free_platform+0x24>
    3e48:	200006d0 	.word	0x200006d0
    3e4c:	2000017c 	.word	0x2000017c
    3e50:	0000ddf4 	.word	0x0000ddf4

00003e54 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3e54:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3e56:	4604      	mov	r4, r0
    3e58:	b178      	cbz	r0, 3e7a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3e5a:	6863      	ldr	r3, [r4, #4]
    3e5c:	2b04      	cmp	r3, #4
    3e5e:	d00b      	beq.n	3e78 <mutex_init_platform+0x24>
    3e60:	2b08      	cmp	r3, #8
    3e62:	d009      	beq.n	3e78 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3e64:	b90b      	cbnz	r3, 3e6a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3e66:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3e68:	b163      	cbz	r3, 3e84 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3e6a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3e6c:	f008 fe1f 	bl	caae <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3e70:	6863      	ldr	r3, [r4, #4]
    3e72:	f043 0301 	orr.w	r3, r3, #1
    3e76:	6063      	str	r3, [r4, #4]
}
    3e78:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3e7a:	4b0f      	ldr	r3, [pc, #60]	; (3eb8 <mutex_init_platform+0x64>)
    3e7c:	685b      	ldr	r3, [r3, #4]
    3e7e:	480f      	ldr	r0, [pc, #60]	; (3ebc <mutex_init_platform+0x68>)
    3e80:	4798      	blx	r3
    3e82:	e7ea      	b.n	3e5a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e8c:	4621      	mov	r1, r4
    3e8e:	480c      	ldr	r0, [pc, #48]	; (3ec0 <mutex_init_platform+0x6c>)
    3e90:	f004 fd4e 	bl	8930 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3e94:	b908      	cbnz	r0, 3e9a <mutex_init_platform+0x46>
    3e96:	6823      	ldr	r3, [r4, #0]
    3e98:	b91b      	cbnz	r3, 3ea2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3e9a:	4b07      	ldr	r3, [pc, #28]	; (3eb8 <mutex_init_platform+0x64>)
    3e9c:	685b      	ldr	r3, [r3, #4]
    3e9e:	4809      	ldr	r0, [pc, #36]	; (3ec4 <mutex_init_platform+0x70>)
    3ea0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3ea2:	2214      	movs	r2, #20
    3ea4:	2100      	movs	r1, #0
    3ea6:	6820      	ldr	r0, [r4, #0]
    3ea8:	f008 f8a9 	bl	bffe <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3eac:	6863      	ldr	r3, [r4, #4]
    3eae:	f043 0302 	orr.w	r3, r3, #2
    3eb2:	6063      	str	r3, [r4, #4]
    3eb4:	e7d9      	b.n	3e6a <mutex_init_platform+0x16>
    3eb6:	bf00      	nop
    3eb8:	2000017c 	.word	0x2000017c
    3ebc:	0000ddf4 	.word	0x0000ddf4
    3ec0:	200006d0 	.word	0x200006d0
    3ec4:	0000de1c 	.word	0x0000de1c

00003ec8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3ec8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3eca:	2340      	movs	r3, #64	; 0x40
    3ecc:	2214      	movs	r2, #20
    3ece:	4904      	ldr	r1, [pc, #16]	; (3ee0 <nrf_cc3xx_platform_mutex_init+0x18>)
    3ed0:	4804      	ldr	r0, [pc, #16]	; (3ee4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3ed2:	f008 fd98 	bl	ca06 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3ed6:	4904      	ldr	r1, [pc, #16]	; (3ee8 <nrf_cc3xx_platform_mutex_init+0x20>)
    3ed8:	4804      	ldr	r0, [pc, #16]	; (3eec <nrf_cc3xx_platform_mutex_init+0x24>)
    3eda:	f007 fb9f 	bl	b61c <nrf_cc3xx_platform_set_mutexes>
}
    3ede:	bd08      	pop	{r3, pc}
    3ee0:	200006f0 	.word	0x200006f0
    3ee4:	200006d0 	.word	0x200006d0
    3ee8:	0000de5c 	.word	0x0000de5c
    3eec:	0000de4c 	.word	0x0000de4c

00003ef0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3ef0:	4901      	ldr	r1, [pc, #4]	; (3ef8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3ef2:	2210      	movs	r2, #16
	str	r2, [r1]
    3ef4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3ef6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3ef8:	e000ed10 	.word	0xe000ed10

00003efc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3efc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3efe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3f00:	f380 8811 	msr	BASEPRI, r0
	isb
    3f04:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3f08:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3f0c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3f0e:	b662      	cpsie	i
	isb
    3f10:	f3bf 8f6f 	isb	sy

	bx	lr
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3f18:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3f1a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3f1c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3f20:	bf20      	wfe

	msr	BASEPRI, r0
    3f22:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3f26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    3f2c:	b570      	push	{r4, r5, r6, lr}
    3f2e:	b086      	sub	sp, #24
    3f30:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3f32:	4e1e      	ldr	r6, [pc, #120]	; (3fac <esf_dump+0x80>)
    3f34:	6883      	ldr	r3, [r0, #8]
    3f36:	9305      	str	r3, [sp, #20]
    3f38:	6843      	ldr	r3, [r0, #4]
    3f3a:	9304      	str	r3, [sp, #16]
    3f3c:	6803      	ldr	r3, [r0, #0]
    3f3e:	9303      	str	r3, [sp, #12]
    3f40:	4b1b      	ldr	r3, [pc, #108]	; (3fb0 <esf_dump+0x84>)
    3f42:	9302      	str	r3, [sp, #8]
    3f44:	2400      	movs	r4, #0
    3f46:	9401      	str	r4, [sp, #4]
    3f48:	9400      	str	r4, [sp, #0]
    3f4a:	4623      	mov	r3, r4
    3f4c:	2201      	movs	r2, #1
    3f4e:	4631      	mov	r1, r6
    3f50:	4620      	mov	r0, r4
    3f52:	f007 ff41 	bl	bdd8 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3f56:	696b      	ldr	r3, [r5, #20]
    3f58:	9305      	str	r3, [sp, #20]
    3f5a:	692b      	ldr	r3, [r5, #16]
    3f5c:	9304      	str	r3, [sp, #16]
    3f5e:	68eb      	ldr	r3, [r5, #12]
    3f60:	9303      	str	r3, [sp, #12]
    3f62:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <esf_dump+0x88>)
    3f64:	9302      	str	r3, [sp, #8]
    3f66:	9401      	str	r4, [sp, #4]
    3f68:	9400      	str	r4, [sp, #0]
    3f6a:	4623      	mov	r3, r4
    3f6c:	2201      	movs	r2, #1
    3f6e:	4631      	mov	r1, r6
    3f70:	4620      	mov	r0, r4
    3f72:	f007 ff31 	bl	bdd8 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3f76:	69eb      	ldr	r3, [r5, #28]
    3f78:	9303      	str	r3, [sp, #12]
    3f7a:	4b0f      	ldr	r3, [pc, #60]	; (3fb8 <esf_dump+0x8c>)
    3f7c:	9302      	str	r3, [sp, #8]
    3f7e:	9401      	str	r4, [sp, #4]
    3f80:	9400      	str	r4, [sp, #0]
    3f82:	4623      	mov	r3, r4
    3f84:	2201      	movs	r2, #1
    3f86:	4631      	mov	r1, r6
    3f88:	4620      	mov	r0, r4
    3f8a:	f007 ff25 	bl	bdd8 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3f8e:	69ab      	ldr	r3, [r5, #24]
    3f90:	9303      	str	r3, [sp, #12]
    3f92:	4b0a      	ldr	r3, [pc, #40]	; (3fbc <esf_dump+0x90>)
    3f94:	9302      	str	r3, [sp, #8]
    3f96:	9401      	str	r4, [sp, #4]
    3f98:	9400      	str	r4, [sp, #0]
    3f9a:	4623      	mov	r3, r4
    3f9c:	2201      	movs	r2, #1
    3f9e:	4631      	mov	r1, r6
    3fa0:	4620      	mov	r0, r4
    3fa2:	f007 ff19 	bl	bdd8 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    3fa6:	b006      	add	sp, #24
    3fa8:	bd70      	pop	{r4, r5, r6, pc}
    3faa:	bf00      	nop
    3fac:	0000ce88 	.word	0x0000ce88
    3fb0:	0000de70 	.word	0x0000de70
    3fb4:	0000dea0 	.word	0x0000dea0
    3fb8:	0000ded0 	.word	0x0000ded0
    3fbc:	0000dee0 	.word	0x0000dee0

00003fc0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3fc0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3fc2:	2800      	cmp	r0, #0
    3fc4:	db07      	blt.n	3fd6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fc6:	f000 021f 	and.w	r2, r0, #31
    3fca:	0940      	lsrs	r0, r0, #5
    3fcc:	2301      	movs	r3, #1
    3fce:	4093      	lsls	r3, r2
    3fd0:	4a01      	ldr	r2, [pc, #4]	; (3fd8 <arch_irq_enable+0x18>)
    3fd2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    3fd6:	4770      	bx	lr
    3fd8:	e000e100 	.word	0xe000e100

00003fdc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3fdc:	0942      	lsrs	r2, r0, #5
    3fde:	4b05      	ldr	r3, [pc, #20]	; (3ff4 <arch_irq_is_enabled+0x18>)
    3fe0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3fe4:	f000 001f 	and.w	r0, r0, #31
    3fe8:	2301      	movs	r3, #1
    3fea:	fa03 f000 	lsl.w	r0, r3, r0
}
    3fee:	4010      	ands	r0, r2
    3ff0:	4770      	bx	lr
    3ff2:	bf00      	nop
    3ff4:	e000e100 	.word	0xe000e100

00003ff8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ffa:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3ffc:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3ffe:	2d07      	cmp	r5, #7
    4000:	d80b      	bhi.n	401a <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4002:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4004:	2800      	cmp	r0, #0
    4006:	db1b      	blt.n	4040 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4008:	016d      	lsls	r5, r5, #5
    400a:	b2ed      	uxtb	r5, r5
    400c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4010:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4014:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    4018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    401a:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    401c:	4f0c      	ldr	r7, [pc, #48]	; (4050 <z_arm_irq_priority_set+0x58>)
    401e:	2357      	movs	r3, #87	; 0x57
    4020:	463a      	mov	r2, r7
    4022:	490c      	ldr	r1, [pc, #48]	; (4054 <z_arm_irq_priority_set+0x5c>)
    4024:	480c      	ldr	r0, [pc, #48]	; (4058 <z_arm_irq_priority_set+0x60>)
    4026:	f007 fe23 	bl	bc70 <assert_print>
    402a:	2307      	movs	r3, #7
    402c:	4622      	mov	r2, r4
    402e:	4631      	mov	r1, r6
    4030:	480a      	ldr	r0, [pc, #40]	; (405c <z_arm_irq_priority_set+0x64>)
    4032:	f007 fe1d 	bl	bc70 <assert_print>
    4036:	2157      	movs	r1, #87	; 0x57
    4038:	4638      	mov	r0, r7
    403a:	f007 fe12 	bl	bc62 <assert_post_action>
    403e:	e7e0      	b.n	4002 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4040:	f000 000f 	and.w	r0, r0, #15
    4044:	016d      	lsls	r5, r5, #5
    4046:	b2ed      	uxtb	r5, r5
    4048:	4b05      	ldr	r3, [pc, #20]	; (4060 <z_arm_irq_priority_set+0x68>)
    404a:	541d      	strb	r5, [r3, r0]
}
    404c:	e7e4      	b.n	4018 <z_arm_irq_priority_set+0x20>
    404e:	bf00      	nop
    4050:	0000df10 	.word	0x0000df10
    4054:	0000df48 	.word	0x0000df48
    4058:	0000d02c 	.word	0x0000d02c
    405c:	0000df64 	.word	0x0000df64
    4060:	e000ed14 	.word	0xe000ed14

00004064 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4064:	bf30      	wfi
    b z_SysNmiOnReset
    4066:	f7ff bffd 	b.w	4064 <z_SysNmiOnReset>
    406a:	bf00      	nop

0000406c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    406c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    406e:	4b0b      	ldr	r3, [pc, #44]	; (409c <z_arm_prep_c+0x30>)
    4070:	4a0b      	ldr	r2, [pc, #44]	; (40a0 <z_arm_prep_c+0x34>)
    4072:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4076:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4078:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    407c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4084:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    408c:	f004 fb7c 	bl	8788 <z_bss_zero>
	z_data_copy();
    4090:	f006 fd42 	bl	ab18 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4094:	f000 fc6a 	bl	496c <z_arm_interrupt_init>
	z_cstart();
    4098:	f004 fbd4 	bl	8844 <z_cstart>
    409c:	e000ed00 	.word	0xe000ed00
    40a0:	00000000 	.word	0x00000000

000040a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    40a4:	4a0a      	ldr	r2, [pc, #40]	; (40d0 <arch_swap+0x2c>)
    40a6:	6893      	ldr	r3, [r2, #8]
    40a8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    40ac:	4909      	ldr	r1, [pc, #36]	; (40d4 <arch_swap+0x30>)
    40ae:	6809      	ldr	r1, [r1, #0]
    40b0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    40b4:	4908      	ldr	r1, [pc, #32]	; (40d8 <arch_swap+0x34>)
    40b6:	684b      	ldr	r3, [r1, #4]
    40b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    40bc:	604b      	str	r3, [r1, #4]
    40be:	2300      	movs	r3, #0
    40c0:	f383 8811 	msr	BASEPRI, r3
    40c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    40c8:	6893      	ldr	r3, [r2, #8]
}
    40ca:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    40ce:	4770      	bx	lr
    40d0:	20001154 	.word	0x20001154
    40d4:	0000ec04 	.word	0x0000ec04
    40d8:	e000ed00 	.word	0xe000ed00

000040dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    40dc:	4913      	ldr	r1, [pc, #76]	; (412c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    40de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    40e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    40e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    40e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    40ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    40ee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    40f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    40f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    40f8:	4f0d      	ldr	r7, [pc, #52]	; (4130 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    40fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    40fe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4100:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4102:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4104:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4108:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    410a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    410e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4112:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4114:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4116:	f000 fcd3 	bl	4ac0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    411a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    411e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4122:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4126:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    412a:	4770      	bx	lr
    ldr r1, =_kernel
    412c:	20001154 	.word	0x20001154
    ldr v4, =_SCS_ICSR
    4130:	e000ed04 	.word	0xe000ed04

00004134 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4134:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4138:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    413a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    413e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4142:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4144:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4148:	2902      	cmp	r1, #2
    beq _oops
    414a:	d0ff      	beq.n	414c <_oops>

0000414c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    414c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    414e:	f007 fe5e 	bl	be0e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4152:	bd01      	pop	{r0, pc}

00004154 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4154:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4156:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    415a:	490e      	ldr	r1, [pc, #56]	; (4194 <arch_new_thread+0x40>)
    415c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4160:	f021 0101 	bic.w	r1, r1, #1
    4164:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4168:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    416c:	9b01      	ldr	r3, [sp, #4]
    416e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4172:	9b02      	ldr	r3, [sp, #8]
    4174:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4178:	9b03      	ldr	r3, [sp, #12]
    417a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    417e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4182:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    4186:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4188:	2300      	movs	r3, #0
    418a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    418e:	bc10      	pop	{r4}
    4190:	4770      	bx	lr
    4192:	bf00      	nop
    4194:	0000babb 	.word	0x0000babb

00004198 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4198:	4b12      	ldr	r3, [pc, #72]	; (41e4 <z_check_thread_stack_fail+0x4c>)
    419a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    419c:	b302      	cbz	r2, 41e0 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    419e:	f110 0f16 	cmn.w	r0, #22
    41a2:	d011      	beq.n	41c8 <z_check_thread_stack_fail+0x30>
    41a4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    41a8:	f1a3 0c20 	sub.w	ip, r3, #32
    41ac:	4584      	cmp	ip, r0
    41ae:	d805      	bhi.n	41bc <z_check_thread_stack_fail+0x24>
    41b0:	4283      	cmp	r3, r0
    41b2:	d905      	bls.n	41c0 <z_check_thread_stack_fail+0x28>
    41b4:	428b      	cmp	r3, r1
    41b6:	d805      	bhi.n	41c4 <z_check_thread_stack_fail+0x2c>
    41b8:	2100      	movs	r1, #0
    41ba:	e00b      	b.n	41d4 <z_check_thread_stack_fail+0x3c>
    41bc:	2100      	movs	r1, #0
    41be:	e009      	b.n	41d4 <z_check_thread_stack_fail+0x3c>
    41c0:	2100      	movs	r1, #0
    41c2:	e007      	b.n	41d4 <z_check_thread_stack_fail+0x3c>
    41c4:	2101      	movs	r1, #1
    41c6:	e005      	b.n	41d4 <z_check_thread_stack_fail+0x3c>
    41c8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    41cc:	428b      	cmp	r3, r1
    41ce:	bf94      	ite	ls
    41d0:	2100      	movls	r1, #0
    41d2:	2101      	movhi	r1, #1
    41d4:	b909      	cbnz	r1, 41da <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    41d6:	2000      	movs	r0, #0
}
    41d8:	4770      	bx	lr
		return thread->stack_info.start;
    41da:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    41de:	4770      	bx	lr
		return 0;
    41e0:	2000      	movs	r0, #0
    41e2:	4770      	bx	lr
    41e4:	20001154 	.word	0x20001154

000041e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    41e8:	b508      	push	{r3, lr}
    41ea:	460d      	mov	r5, r1
    41ec:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    41ee:	4b08      	ldr	r3, [pc, #32]	; (4210 <arch_switch_to_main_thread+0x28>)
    41f0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    41f2:	f000 fc65 	bl	4ac0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    41f6:	4620      	mov	r0, r4
    41f8:	f385 8809 	msr	PSP, r5
    41fc:	2100      	movs	r1, #0
    41fe:	b663      	cpsie	if
    4200:	f381 8811 	msr	BASEPRI, r1
    4204:	f3bf 8f6f 	isb	sy
    4208:	2200      	movs	r2, #0
    420a:	2300      	movs	r3, #0
    420c:	f007 fc55 	bl	baba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4210:	20001154 	.word	0x20001154

00004214 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4214:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4216:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4218:	4a0b      	ldr	r2, [pc, #44]	; (4248 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    421a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    421c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    421e:	bf1e      	ittt	ne
	movne	r1, #0
    4220:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4222:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4224:	f008 fc27 	blne	ca76 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4228:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    422a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    422e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4232:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4236:	4905      	ldr	r1, [pc, #20]	; (424c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4238:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    423a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    423c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    423e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4242:	4903      	ldr	r1, [pc, #12]	; (4250 <_isr_wrapper+0x3c>)
	bx r1
    4244:	4708      	bx	r1
    4246:	0000      	.short	0x0000
	ldr r2, =_kernel
    4248:	20001154 	.word	0x20001154
	ldr r1, =_sw_isr_table
    424c:	0000ccd8 	.word	0x0000ccd8
	ldr r1, =z_arm_int_exit
    4250:	00004255 	.word	0x00004255

00004254 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4254:	4b04      	ldr	r3, [pc, #16]	; (4268 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4256:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4258:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    425a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    425c:	d003      	beq.n	4266 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    425e:	4903      	ldr	r1, [pc, #12]	; (426c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4264:	600a      	str	r2, [r1, #0]

00004266 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4266:	4770      	bx	lr
	ldr r3, =_kernel
    4268:	20001154 	.word	0x20001154
	ldr r1, =_SCS_ICSR
    426c:	e000ed04 	.word	0xe000ed04

00004270 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4270:	b570      	push	{r4, r5, r6, lr}
    4272:	b084      	sub	sp, #16
    4274:	4605      	mov	r5, r0
    4276:	460e      	mov	r6, r1
    4278:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    427a:	4b47      	ldr	r3, [pc, #284]	; (4398 <bus_fault+0x128>)
    427c:	9302      	str	r3, [sp, #8]
    427e:	2000      	movs	r0, #0
    4280:	9001      	str	r0, [sp, #4]
    4282:	9000      	str	r0, [sp, #0]
    4284:	4603      	mov	r3, r0
    4286:	2201      	movs	r2, #1
    4288:	4944      	ldr	r1, [pc, #272]	; (439c <bus_fault+0x12c>)
    428a:	f007 fdd4 	bl	be36 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    428e:	4b44      	ldr	r3, [pc, #272]	; (43a0 <bus_fault+0x130>)
    4290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4292:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4296:	d125      	bne.n	42e4 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4298:	4b41      	ldr	r3, [pc, #260]	; (43a0 <bus_fault+0x130>)
    429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    429c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    42a0:	d12b      	bne.n	42fa <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    42a2:	4b3f      	ldr	r3, [pc, #252]	; (43a0 <bus_fault+0x130>)
    42a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42a6:	f413 7f00 	tst.w	r3, #512	; 0x200
    42aa:	d131      	bne.n	4310 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    42ac:	4b3c      	ldr	r3, [pc, #240]	; (43a0 <bus_fault+0x130>)
    42ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    42b4:	d14f      	bne.n	4356 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    42b6:	4b3a      	ldr	r3, [pc, #232]	; (43a0 <bus_fault+0x130>)
    42b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42ba:	f413 7f80 	tst.w	r3, #256	; 0x100
    42be:	d155      	bne.n	436c <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    42c0:	4b37      	ldr	r3, [pc, #220]	; (43a0 <bus_fault+0x130>)
    42c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    42c8:	d15b      	bne.n	4382 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    42ca:	4a35      	ldr	r2, [pc, #212]	; (43a0 <bus_fault+0x130>)
    42cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    42ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    42d2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    42d4:	2101      	movs	r1, #1
    42d6:	4628      	mov	r0, r5
    42d8:	f007 fdab 	bl	be32 <memory_fault_recoverable>
    42dc:	7020      	strb	r0, [r4, #0]

	return reason;
}
    42de:	2000      	movs	r0, #0
    42e0:	b004      	add	sp, #16
    42e2:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    42e4:	4b2f      	ldr	r3, [pc, #188]	; (43a4 <bus_fault+0x134>)
    42e6:	9302      	str	r3, [sp, #8]
    42e8:	2000      	movs	r0, #0
    42ea:	9001      	str	r0, [sp, #4]
    42ec:	9000      	str	r0, [sp, #0]
    42ee:	4603      	mov	r3, r0
    42f0:	2201      	movs	r2, #1
    42f2:	492a      	ldr	r1, [pc, #168]	; (439c <bus_fault+0x12c>)
    42f4:	f007 fd9f 	bl	be36 <z_log_msg2_runtime_create>
    42f8:	e7ce      	b.n	4298 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    42fa:	4b2b      	ldr	r3, [pc, #172]	; (43a8 <bus_fault+0x138>)
    42fc:	9302      	str	r3, [sp, #8]
    42fe:	2000      	movs	r0, #0
    4300:	9001      	str	r0, [sp, #4]
    4302:	9000      	str	r0, [sp, #0]
    4304:	4603      	mov	r3, r0
    4306:	2201      	movs	r2, #1
    4308:	4924      	ldr	r1, [pc, #144]	; (439c <bus_fault+0x12c>)
    430a:	f007 fd94 	bl	be36 <z_log_msg2_runtime_create>
    430e:	e7c8      	b.n	42a2 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    4310:	4b26      	ldr	r3, [pc, #152]	; (43ac <bus_fault+0x13c>)
    4312:	9302      	str	r3, [sp, #8]
    4314:	2000      	movs	r0, #0
    4316:	9001      	str	r0, [sp, #4]
    4318:	9000      	str	r0, [sp, #0]
    431a:	4603      	mov	r3, r0
    431c:	2201      	movs	r2, #1
    431e:	491f      	ldr	r1, [pc, #124]	; (439c <bus_fault+0x12c>)
    4320:	f007 fd89 	bl	be36 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    4324:	4b1e      	ldr	r3, [pc, #120]	; (43a0 <bus_fault+0x130>)
    4326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    432a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    432e:	d0bd      	beq.n	42ac <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4330:	9203      	str	r2, [sp, #12]
    4332:	4b1f      	ldr	r3, [pc, #124]	; (43b0 <bus_fault+0x140>)
    4334:	9302      	str	r3, [sp, #8]
    4336:	2000      	movs	r0, #0
    4338:	9001      	str	r0, [sp, #4]
    433a:	9000      	str	r0, [sp, #0]
    433c:	4603      	mov	r3, r0
    433e:	2201      	movs	r2, #1
    4340:	4916      	ldr	r1, [pc, #88]	; (439c <bus_fault+0x12c>)
    4342:	f007 fd78 	bl	be36 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    4346:	2e00      	cmp	r6, #0
    4348:	d0b0      	beq.n	42ac <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    434a:	4a15      	ldr	r2, [pc, #84]	; (43a0 <bus_fault+0x130>)
    434c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    434e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4352:	6293      	str	r3, [r2, #40]	; 0x28
    4354:	e7aa      	b.n	42ac <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    4356:	4b17      	ldr	r3, [pc, #92]	; (43b4 <bus_fault+0x144>)
    4358:	9302      	str	r3, [sp, #8]
    435a:	2000      	movs	r0, #0
    435c:	9001      	str	r0, [sp, #4]
    435e:	9000      	str	r0, [sp, #0]
    4360:	4603      	mov	r3, r0
    4362:	2201      	movs	r2, #1
    4364:	490d      	ldr	r1, [pc, #52]	; (439c <bus_fault+0x12c>)
    4366:	f007 fd66 	bl	be36 <z_log_msg2_runtime_create>
    436a:	e7a4      	b.n	42b6 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    436c:	4b12      	ldr	r3, [pc, #72]	; (43b8 <bus_fault+0x148>)
    436e:	9302      	str	r3, [sp, #8]
    4370:	2000      	movs	r0, #0
    4372:	9001      	str	r0, [sp, #4]
    4374:	9000      	str	r0, [sp, #0]
    4376:	4603      	mov	r3, r0
    4378:	2201      	movs	r2, #1
    437a:	4908      	ldr	r1, [pc, #32]	; (439c <bus_fault+0x12c>)
    437c:	f007 fd5b 	bl	be36 <z_log_msg2_runtime_create>
    4380:	e7a3      	b.n	42ca <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4382:	4b0e      	ldr	r3, [pc, #56]	; (43bc <bus_fault+0x14c>)
    4384:	9302      	str	r3, [sp, #8]
    4386:	2000      	movs	r0, #0
    4388:	9001      	str	r0, [sp, #4]
    438a:	9000      	str	r0, [sp, #0]
    438c:	4603      	mov	r3, r0
    438e:	2201      	movs	r2, #1
    4390:	4902      	ldr	r1, [pc, #8]	; (439c <bus_fault+0x12c>)
    4392:	f007 fd50 	bl	be36 <z_log_msg2_runtime_create>
    4396:	e798      	b.n	42ca <bus_fault+0x5a>
    4398:	0000dfa4 	.word	0x0000dfa4
    439c:	0000ce88 	.word	0x0000ce88
    43a0:	e000ed00 	.word	0xe000ed00
    43a4:	0000dfbc 	.word	0x0000dfbc
    43a8:	0000dfd0 	.word	0x0000dfd0
    43ac:	0000dfe4 	.word	0x0000dfe4
    43b0:	0000e000 	.word	0x0000e000
    43b4:	0000e018 	.word	0x0000e018
    43b8:	0000e034 	.word	0x0000e034
    43bc:	0000e04c 	.word	0x0000e04c

000043c0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    43c0:	b500      	push	{lr}
    43c2:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    43c4:	4b3a      	ldr	r3, [pc, #232]	; (44b0 <usage_fault+0xf0>)
    43c6:	9302      	str	r3, [sp, #8]
    43c8:	2000      	movs	r0, #0
    43ca:	9001      	str	r0, [sp, #4]
    43cc:	9000      	str	r0, [sp, #0]
    43ce:	4603      	mov	r3, r0
    43d0:	2201      	movs	r2, #1
    43d2:	4938      	ldr	r1, [pc, #224]	; (44b4 <usage_fault+0xf4>)
    43d4:	f007 fd2f 	bl	be36 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    43d8:	4b37      	ldr	r3, [pc, #220]	; (44b8 <usage_fault+0xf8>)
    43da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    43e0:	d123      	bne.n	442a <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    43e2:	4b35      	ldr	r3, [pc, #212]	; (44b8 <usage_fault+0xf8>)
    43e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    43ea:	d129      	bne.n	4440 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    43ec:	4b32      	ldr	r3, [pc, #200]	; (44b8 <usage_fault+0xf8>)
    43ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    43f4:	d12f      	bne.n	4456 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    43f6:	4b30      	ldr	r3, [pc, #192]	; (44b8 <usage_fault+0xf8>)
    43f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43fa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    43fe:	d135      	bne.n	446c <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4400:	4b2d      	ldr	r3, [pc, #180]	; (44b8 <usage_fault+0xf8>)
    4402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4404:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    4408:	d13b      	bne.n	4482 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    440a:	4b2b      	ldr	r3, [pc, #172]	; (44b8 <usage_fault+0xf8>)
    440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    440e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4412:	d141      	bne.n	4498 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4414:	4a28      	ldr	r2, [pc, #160]	; (44b8 <usage_fault+0xf8>)
    4416:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4418:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    441c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4420:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4422:	2000      	movs	r0, #0
    4424:	b005      	add	sp, #20
    4426:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    442a:	4b24      	ldr	r3, [pc, #144]	; (44bc <usage_fault+0xfc>)
    442c:	9302      	str	r3, [sp, #8]
    442e:	2000      	movs	r0, #0
    4430:	9001      	str	r0, [sp, #4]
    4432:	9000      	str	r0, [sp, #0]
    4434:	4603      	mov	r3, r0
    4436:	2201      	movs	r2, #1
    4438:	491e      	ldr	r1, [pc, #120]	; (44b4 <usage_fault+0xf4>)
    443a:	f007 fcfc 	bl	be36 <z_log_msg2_runtime_create>
    443e:	e7d0      	b.n	43e2 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    4440:	4b1f      	ldr	r3, [pc, #124]	; (44c0 <usage_fault+0x100>)
    4442:	9302      	str	r3, [sp, #8]
    4444:	2000      	movs	r0, #0
    4446:	9001      	str	r0, [sp, #4]
    4448:	9000      	str	r0, [sp, #0]
    444a:	4603      	mov	r3, r0
    444c:	2201      	movs	r2, #1
    444e:	4919      	ldr	r1, [pc, #100]	; (44b4 <usage_fault+0xf4>)
    4450:	f007 fcf1 	bl	be36 <z_log_msg2_runtime_create>
    4454:	e7ca      	b.n	43ec <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    4456:	4b1b      	ldr	r3, [pc, #108]	; (44c4 <usage_fault+0x104>)
    4458:	9302      	str	r3, [sp, #8]
    445a:	2000      	movs	r0, #0
    445c:	9001      	str	r0, [sp, #4]
    445e:	9000      	str	r0, [sp, #0]
    4460:	4603      	mov	r3, r0
    4462:	2201      	movs	r2, #1
    4464:	4913      	ldr	r1, [pc, #76]	; (44b4 <usage_fault+0xf4>)
    4466:	f007 fce6 	bl	be36 <z_log_msg2_runtime_create>
    446a:	e7c4      	b.n	43f6 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    446c:	4b16      	ldr	r3, [pc, #88]	; (44c8 <usage_fault+0x108>)
    446e:	9302      	str	r3, [sp, #8]
    4470:	2000      	movs	r0, #0
    4472:	9001      	str	r0, [sp, #4]
    4474:	9000      	str	r0, [sp, #0]
    4476:	4603      	mov	r3, r0
    4478:	2201      	movs	r2, #1
    447a:	490e      	ldr	r1, [pc, #56]	; (44b4 <usage_fault+0xf4>)
    447c:	f007 fcdb 	bl	be36 <z_log_msg2_runtime_create>
    4480:	e7be      	b.n	4400 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4482:	4b12      	ldr	r3, [pc, #72]	; (44cc <usage_fault+0x10c>)
    4484:	9302      	str	r3, [sp, #8]
    4486:	2000      	movs	r0, #0
    4488:	9001      	str	r0, [sp, #4]
    448a:	9000      	str	r0, [sp, #0]
    448c:	4603      	mov	r3, r0
    448e:	2201      	movs	r2, #1
    4490:	4908      	ldr	r1, [pc, #32]	; (44b4 <usage_fault+0xf4>)
    4492:	f007 fcd0 	bl	be36 <z_log_msg2_runtime_create>
    4496:	e7b8      	b.n	440a <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4498:	4b0d      	ldr	r3, [pc, #52]	; (44d0 <usage_fault+0x110>)
    449a:	9302      	str	r3, [sp, #8]
    449c:	2000      	movs	r0, #0
    449e:	9001      	str	r0, [sp, #4]
    44a0:	9000      	str	r0, [sp, #0]
    44a2:	4603      	mov	r3, r0
    44a4:	2201      	movs	r2, #1
    44a6:	4903      	ldr	r1, [pc, #12]	; (44b4 <usage_fault+0xf4>)
    44a8:	f007 fcc5 	bl	be36 <z_log_msg2_runtime_create>
    44ac:	e7b2      	b.n	4414 <usage_fault+0x54>
    44ae:	bf00      	nop
    44b0:	0000e07c 	.word	0x0000e07c
    44b4:	0000ce88 	.word	0x0000ce88
    44b8:	e000ed00 	.word	0xe000ed00
    44bc:	0000e094 	.word	0x0000e094
    44c0:	0000e0a8 	.word	0x0000e0a8
    44c4:	0000e0c4 	.word	0x0000e0c4
    44c8:	0000e0e4 	.word	0x0000e0e4
    44cc:	0000e10c 	.word	0x0000e10c
    44d0:	0000e128 	.word	0x0000e128

000044d4 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    44d4:	b500      	push	{lr}
    44d6:	b085      	sub	sp, #20
	*recoverable = false;
    44d8:	2000      	movs	r0, #0
    44da:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    44dc:	4b05      	ldr	r3, [pc, #20]	; (44f4 <debug_monitor+0x20>)
    44de:	9302      	str	r3, [sp, #8]
    44e0:	9001      	str	r0, [sp, #4]
    44e2:	9000      	str	r0, [sp, #0]
    44e4:	4603      	mov	r3, r0
    44e6:	2201      	movs	r2, #1
    44e8:	4903      	ldr	r1, [pc, #12]	; (44f8 <debug_monitor+0x24>)
    44ea:	f007 fca4 	bl	be36 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    44ee:	b005      	add	sp, #20
    44f0:	f85d fb04 	ldr.w	pc, [sp], #4
    44f4:	0000e154 	.word	0x0000e154
    44f8:	0000ce88 	.word	0x0000ce88

000044fc <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    44fc:	b500      	push	{lr}
    44fe:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4500:	290f      	cmp	r1, #15
    4502:	dc10      	bgt.n	4526 <reserved_exception+0x2a>
    4504:	4b09      	ldr	r3, [pc, #36]	; (452c <reserved_exception+0x30>)
    4506:	3910      	subs	r1, #16
    4508:	9104      	str	r1, [sp, #16]
    450a:	9303      	str	r3, [sp, #12]
    450c:	4b08      	ldr	r3, [pc, #32]	; (4530 <reserved_exception+0x34>)
    450e:	9302      	str	r3, [sp, #8]
    4510:	2000      	movs	r0, #0
    4512:	9001      	str	r0, [sp, #4]
    4514:	9000      	str	r0, [sp, #0]
    4516:	4603      	mov	r3, r0
    4518:	2201      	movs	r2, #1
    451a:	4906      	ldr	r1, [pc, #24]	; (4534 <reserved_exception+0x38>)
    451c:	f007 fc8b 	bl	be36 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4520:	b007      	add	sp, #28
    4522:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    4526:	4b04      	ldr	r3, [pc, #16]	; (4538 <reserved_exception+0x3c>)
    4528:	e7ed      	b.n	4506 <reserved_exception+0xa>
    452a:	bf00      	nop
    452c:	0000e194 	.word	0x0000e194
    4530:	0000e1ac 	.word	0x0000e1ac
    4534:	0000ce88 	.word	0x0000ce88
    4538:	0000e178 	.word	0x0000e178

0000453c <mem_manage_fault>:
{
    453c:	b5f0      	push	{r4, r5, r6, r7, lr}
    453e:	b085      	sub	sp, #20
    4540:	4605      	mov	r5, r0
    4542:	460c      	mov	r4, r1
    4544:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4546:	4b5f      	ldr	r3, [pc, #380]	; (46c4 <mem_manage_fault+0x188>)
    4548:	9302      	str	r3, [sp, #8]
    454a:	2000      	movs	r0, #0
    454c:	9001      	str	r0, [sp, #4]
    454e:	9000      	str	r0, [sp, #0]
    4550:	4603      	mov	r3, r0
    4552:	2201      	movs	r2, #1
    4554:	495c      	ldr	r1, [pc, #368]	; (46c8 <mem_manage_fault+0x18c>)
    4556:	f007 fc6e 	bl	be36 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    455a:	4b5c      	ldr	r3, [pc, #368]	; (46cc <mem_manage_fault+0x190>)
    455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    455e:	f013 0f10 	tst.w	r3, #16
    4562:	d13b      	bne.n	45dc <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4564:	4b59      	ldr	r3, [pc, #356]	; (46cc <mem_manage_fault+0x190>)
    4566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4568:	f013 0f08 	tst.w	r3, #8
    456c:	d141      	bne.n	45f2 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    456e:	4b57      	ldr	r3, [pc, #348]	; (46cc <mem_manage_fault+0x190>)
    4570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4572:	f013 0f02 	tst.w	r3, #2
    4576:	d147      	bne.n	4608 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    4578:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    457c:	4b53      	ldr	r3, [pc, #332]	; (46cc <mem_manage_fault+0x190>)
    457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4580:	f013 0f01 	tst.w	r3, #1
    4584:	d166      	bne.n	4654 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4586:	4b51      	ldr	r3, [pc, #324]	; (46cc <mem_manage_fault+0x190>)
    4588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    458a:	f013 0f20 	tst.w	r3, #32
    458e:	d16c      	bne.n	466a <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4590:	4b4e      	ldr	r3, [pc, #312]	; (46cc <mem_manage_fault+0x190>)
    4592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4594:	f013 0f10 	tst.w	r3, #16
    4598:	d104      	bne.n	45a4 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    459a:	4b4c      	ldr	r3, [pc, #304]	; (46cc <mem_manage_fault+0x190>)
    459c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    459e:	f014 0402 	ands.w	r4, r4, #2
    45a2:	d004      	beq.n	45ae <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    45a4:	4b49      	ldr	r3, [pc, #292]	; (46cc <mem_manage_fault+0x190>)
    45a6:	685c      	ldr	r4, [r3, #4]
    45a8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    45ac:	d168      	bne.n	4680 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    45ae:	4b47      	ldr	r3, [pc, #284]	; (46cc <mem_manage_fault+0x190>)
    45b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45b2:	f013 0f20 	tst.w	r3, #32
    45b6:	d004      	beq.n	45c2 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    45b8:	4a44      	ldr	r2, [pc, #272]	; (46cc <mem_manage_fault+0x190>)
    45ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
    45bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    45c0:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    45c2:	4a42      	ldr	r2, [pc, #264]	; (46cc <mem_manage_fault+0x190>)
    45c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    45c6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    45ca:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    45cc:	2101      	movs	r1, #1
    45ce:	4628      	mov	r0, r5
    45d0:	f007 fc2f 	bl	be32 <memory_fault_recoverable>
    45d4:	7030      	strb	r0, [r6, #0]
}
    45d6:	4620      	mov	r0, r4
    45d8:	b005      	add	sp, #20
    45da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    45dc:	4b3c      	ldr	r3, [pc, #240]	; (46d0 <mem_manage_fault+0x194>)
    45de:	9302      	str	r3, [sp, #8]
    45e0:	2000      	movs	r0, #0
    45e2:	9001      	str	r0, [sp, #4]
    45e4:	9000      	str	r0, [sp, #0]
    45e6:	4603      	mov	r3, r0
    45e8:	2201      	movs	r2, #1
    45ea:	4937      	ldr	r1, [pc, #220]	; (46c8 <mem_manage_fault+0x18c>)
    45ec:	f007 fc23 	bl	be36 <z_log_msg2_runtime_create>
    45f0:	e7b8      	b.n	4564 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    45f2:	4b38      	ldr	r3, [pc, #224]	; (46d4 <mem_manage_fault+0x198>)
    45f4:	9302      	str	r3, [sp, #8]
    45f6:	2000      	movs	r0, #0
    45f8:	9001      	str	r0, [sp, #4]
    45fa:	9000      	str	r0, [sp, #0]
    45fc:	4603      	mov	r3, r0
    45fe:	2201      	movs	r2, #1
    4600:	4931      	ldr	r1, [pc, #196]	; (46c8 <mem_manage_fault+0x18c>)
    4602:	f007 fc18 	bl	be36 <z_log_msg2_runtime_create>
    4606:	e7b2      	b.n	456e <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    4608:	4b33      	ldr	r3, [pc, #204]	; (46d8 <mem_manage_fault+0x19c>)
    460a:	9302      	str	r3, [sp, #8]
    460c:	2000      	movs	r0, #0
    460e:	9001      	str	r0, [sp, #4]
    4610:	9000      	str	r0, [sp, #0]
    4612:	4603      	mov	r3, r0
    4614:	2201      	movs	r2, #1
    4616:	492c      	ldr	r1, [pc, #176]	; (46c8 <mem_manage_fault+0x18c>)
    4618:	f007 fc0d 	bl	be36 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    461c:	4b2b      	ldr	r3, [pc, #172]	; (46cc <mem_manage_fault+0x190>)
    461e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4622:	f013 0f80 	tst.w	r3, #128	; 0x80
    4626:	d102      	bne.n	462e <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    4628:	f06f 0715 	mvn.w	r7, #21
    462c:	e7a6      	b.n	457c <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    462e:	9703      	str	r7, [sp, #12]
    4630:	4b2a      	ldr	r3, [pc, #168]	; (46dc <mem_manage_fault+0x1a0>)
    4632:	9302      	str	r3, [sp, #8]
    4634:	2000      	movs	r0, #0
    4636:	9001      	str	r0, [sp, #4]
    4638:	9000      	str	r0, [sp, #0]
    463a:	4603      	mov	r3, r0
    463c:	2201      	movs	r2, #1
    463e:	4922      	ldr	r1, [pc, #136]	; (46c8 <mem_manage_fault+0x18c>)
    4640:	f007 fbf9 	bl	be36 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    4644:	2c00      	cmp	r4, #0
    4646:	d099      	beq.n	457c <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4648:	4a20      	ldr	r2, [pc, #128]	; (46cc <mem_manage_fault+0x190>)
    464a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    464c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4650:	6293      	str	r3, [r2, #40]	; 0x28
    4652:	e793      	b.n	457c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    4654:	4b22      	ldr	r3, [pc, #136]	; (46e0 <mem_manage_fault+0x1a4>)
    4656:	9302      	str	r3, [sp, #8]
    4658:	2000      	movs	r0, #0
    465a:	9001      	str	r0, [sp, #4]
    465c:	9000      	str	r0, [sp, #0]
    465e:	4603      	mov	r3, r0
    4660:	2201      	movs	r2, #1
    4662:	4919      	ldr	r1, [pc, #100]	; (46c8 <mem_manage_fault+0x18c>)
    4664:	f007 fbe7 	bl	be36 <z_log_msg2_runtime_create>
    4668:	e78d      	b.n	4586 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    466a:	4b1e      	ldr	r3, [pc, #120]	; (46e4 <mem_manage_fault+0x1a8>)
    466c:	9302      	str	r3, [sp, #8]
    466e:	2000      	movs	r0, #0
    4670:	9001      	str	r0, [sp, #4]
    4672:	9000      	str	r0, [sp, #0]
    4674:	4603      	mov	r3, r0
    4676:	2201      	movs	r2, #1
    4678:	4913      	ldr	r1, [pc, #76]	; (46c8 <mem_manage_fault+0x18c>)
    467a:	f007 fbdc 	bl	be36 <z_log_msg2_runtime_create>
    467e:	e787      	b.n	4590 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4680:	4629      	mov	r1, r5
    4682:	4638      	mov	r0, r7
    4684:	f7ff fd88 	bl	4198 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4688:	4607      	mov	r7, r0
    468a:	b9b0      	cbnz	r0, 46ba <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    468c:	4b0f      	ldr	r3, [pc, #60]	; (46cc <mem_manage_fault+0x190>)
    468e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4690:	f014 0410 	ands.w	r4, r4, #16
    4694:	d08b      	beq.n	45ae <mem_manage_fault+0x72>
    4696:	4c14      	ldr	r4, [pc, #80]	; (46e8 <mem_manage_fault+0x1ac>)
    4698:	f240 1349 	movw	r3, #329	; 0x149
    469c:	4622      	mov	r2, r4
    469e:	4913      	ldr	r1, [pc, #76]	; (46ec <mem_manage_fault+0x1b0>)
    46a0:	4813      	ldr	r0, [pc, #76]	; (46f0 <mem_manage_fault+0x1b4>)
    46a2:	f007 fae5 	bl	bc70 <assert_print>
    46a6:	4813      	ldr	r0, [pc, #76]	; (46f4 <mem_manage_fault+0x1b8>)
    46a8:	f007 fae2 	bl	bc70 <assert_print>
    46ac:	f240 1149 	movw	r1, #329	; 0x149
    46b0:	4620      	mov	r0, r4
    46b2:	f007 fad6 	bl	bc62 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    46b6:	463c      	mov	r4, r7
    46b8:	e779      	b.n	45ae <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    46ba:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    46be:	2402      	movs	r4, #2
    46c0:	e775      	b.n	45ae <mem_manage_fault+0x72>
    46c2:	bf00      	nop
    46c4:	0000e1c0 	.word	0x0000e1c0
    46c8:	0000ce88 	.word	0x0000ce88
    46cc:	e000ed00 	.word	0xe000ed00
    46d0:	0000e1d8 	.word	0x0000e1d8
    46d4:	0000dfd0 	.word	0x0000dfd0
    46d8:	0000e20c 	.word	0x0000e20c
    46dc:	0000e224 	.word	0x0000e224
    46e0:	0000e23c 	.word	0x0000e23c
    46e4:	0000e04c 	.word	0x0000e04c
    46e8:	0000e25c 	.word	0x0000e25c
    46ec:	0000e298 	.word	0x0000e298
    46f0:	0000d02c 	.word	0x0000d02c
    46f4:	0000e2e4 	.word	0x0000e2e4

000046f8 <hard_fault>:
{
    46f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fa:	b085      	sub	sp, #20
    46fc:	4607      	mov	r7, r0
    46fe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4700:	4b4b      	ldr	r3, [pc, #300]	; (4830 <hard_fault+0x138>)
    4702:	9302      	str	r3, [sp, #8]
    4704:	2400      	movs	r4, #0
    4706:	9401      	str	r4, [sp, #4]
    4708:	9400      	str	r4, [sp, #0]
    470a:	4623      	mov	r3, r4
    470c:	2201      	movs	r2, #1
    470e:	4949      	ldr	r1, [pc, #292]	; (4834 <hard_fault+0x13c>)
    4710:	4620      	mov	r0, r4
    4712:	f007 fb90 	bl	be36 <z_log_msg2_runtime_create>
	*recoverable = false;
    4716:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4718:	4b47      	ldr	r3, [pc, #284]	; (4838 <hard_fault+0x140>)
    471a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    471c:	f015 0502 	ands.w	r5, r5, #2
    4720:	d12d      	bne.n	477e <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4722:	4b45      	ldr	r3, [pc, #276]	; (4838 <hard_fault+0x140>)
    4724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4726:	2b00      	cmp	r3, #0
    4728:	db36      	blt.n	4798 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    472a:	4b43      	ldr	r3, [pc, #268]	; (4838 <hard_fault+0x140>)
    472c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    472e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4732:	d06b      	beq.n	480c <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    4734:	4b41      	ldr	r3, [pc, #260]	; (483c <hard_fault+0x144>)
    4736:	9302      	str	r3, [sp, #8]
    4738:	2000      	movs	r0, #0
    473a:	9001      	str	r0, [sp, #4]
    473c:	9000      	str	r0, [sp, #0]
    473e:	4603      	mov	r3, r0
    4740:	2201      	movs	r2, #1
    4742:	493c      	ldr	r1, [pc, #240]	; (4834 <hard_fault+0x13c>)
    4744:	f007 fb77 	bl	be36 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4748:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    474a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    474e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4752:	429a      	cmp	r2, r3
    4754:	d02c      	beq.n	47b0 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    4756:	4b38      	ldr	r3, [pc, #224]	; (4838 <hard_fault+0x140>)
    4758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    475c:	2b00      	cmp	r3, #0
    475e:	d135      	bne.n	47cc <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    4760:	4b35      	ldr	r3, [pc, #212]	; (4838 <hard_fault+0x140>)
    4762:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    4766:	2b00      	cmp	r3, #0
    4768:	d137      	bne.n	47da <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    476a:	4b33      	ldr	r3, [pc, #204]	; (4838 <hard_fault+0x140>)
    476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    476e:	b29b      	uxth	r3, r3
    4770:	2b00      	cmp	r3, #0
    4772:	d039      	beq.n	47e8 <hard_fault+0xf0>
			reason = usage_fault(esf);
    4774:	4638      	mov	r0, r7
    4776:	f7ff fe23 	bl	43c0 <usage_fault>
    477a:	4604      	mov	r4, r0
    477c:	e009      	b.n	4792 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    477e:	4b30      	ldr	r3, [pc, #192]	; (4840 <hard_fault+0x148>)
    4780:	9302      	str	r3, [sp, #8]
    4782:	9401      	str	r4, [sp, #4]
    4784:	9400      	str	r4, [sp, #0]
    4786:	4623      	mov	r3, r4
    4788:	2201      	movs	r2, #1
    478a:	492a      	ldr	r1, [pc, #168]	; (4834 <hard_fault+0x13c>)
    478c:	4620      	mov	r0, r4
    478e:	f007 fb52 	bl	be36 <z_log_msg2_runtime_create>
}
    4792:	4620      	mov	r0, r4
    4794:	b005      	add	sp, #20
    4796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    4798:	4b2a      	ldr	r3, [pc, #168]	; (4844 <hard_fault+0x14c>)
    479a:	9302      	str	r3, [sp, #8]
    479c:	2000      	movs	r0, #0
    479e:	9001      	str	r0, [sp, #4]
    47a0:	9000      	str	r0, [sp, #0]
    47a2:	4603      	mov	r3, r0
    47a4:	2201      	movs	r2, #1
    47a6:	4923      	ldr	r1, [pc, #140]	; (4834 <hard_fault+0x13c>)
    47a8:	f007 fb45 	bl	be36 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    47ac:	462c      	mov	r4, r5
    47ae:	e7f0      	b.n	4792 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    47b0:	683b      	ldr	r3, [r7, #0]
    47b2:	9303      	str	r3, [sp, #12]
    47b4:	4b24      	ldr	r3, [pc, #144]	; (4848 <hard_fault+0x150>)
    47b6:	9302      	str	r3, [sp, #8]
    47b8:	2000      	movs	r0, #0
    47ba:	9001      	str	r0, [sp, #4]
    47bc:	9000      	str	r0, [sp, #0]
    47be:	4603      	mov	r3, r0
    47c0:	2201      	movs	r2, #1
    47c2:	491c      	ldr	r1, [pc, #112]	; (4834 <hard_fault+0x13c>)
    47c4:	f007 fb37 	bl	be36 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    47c8:	683c      	ldr	r4, [r7, #0]
    47ca:	e7e2      	b.n	4792 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    47cc:	4632      	mov	r2, r6
    47ce:	2101      	movs	r1, #1
    47d0:	4638      	mov	r0, r7
    47d2:	f7ff feb3 	bl	453c <mem_manage_fault>
    47d6:	4604      	mov	r4, r0
    47d8:	e7db      	b.n	4792 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    47da:	4632      	mov	r2, r6
    47dc:	2101      	movs	r1, #1
    47de:	4638      	mov	r0, r7
    47e0:	f7ff fd46 	bl	4270 <bus_fault>
    47e4:	4604      	mov	r4, r0
    47e6:	e7d4      	b.n	4792 <hard_fault+0x9a>
			__ASSERT(0,
    47e8:	4c18      	ldr	r4, [pc, #96]	; (484c <hard_fault+0x154>)
    47ea:	f240 23cd 	movw	r3, #717	; 0x2cd
    47ee:	4622      	mov	r2, r4
    47f0:	4917      	ldr	r1, [pc, #92]	; (4850 <hard_fault+0x158>)
    47f2:	4818      	ldr	r0, [pc, #96]	; (4854 <hard_fault+0x15c>)
    47f4:	f007 fa3c 	bl	bc70 <assert_print>
    47f8:	4817      	ldr	r0, [pc, #92]	; (4858 <hard_fault+0x160>)
    47fa:	f007 fa39 	bl	bc70 <assert_print>
    47fe:	f240 21cd 	movw	r1, #717	; 0x2cd
    4802:	4620      	mov	r0, r4
    4804:	f007 fa2d 	bl	bc62 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4808:	462c      	mov	r4, r5
    480a:	e7c2      	b.n	4792 <hard_fault+0x9a>
		__ASSERT(0,
    480c:	4d0f      	ldr	r5, [pc, #60]	; (484c <hard_fault+0x154>)
    480e:	f240 23d1 	movw	r3, #721	; 0x2d1
    4812:	462a      	mov	r2, r5
    4814:	490e      	ldr	r1, [pc, #56]	; (4850 <hard_fault+0x158>)
    4816:	480f      	ldr	r0, [pc, #60]	; (4854 <hard_fault+0x15c>)
    4818:	f007 fa2a 	bl	bc70 <assert_print>
    481c:	480f      	ldr	r0, [pc, #60]	; (485c <hard_fault+0x164>)
    481e:	f007 fa27 	bl	bc70 <assert_print>
    4822:	f240 21d1 	movw	r1, #721	; 0x2d1
    4826:	4628      	mov	r0, r5
    4828:	f007 fa1b 	bl	bc62 <assert_post_action>
	return reason;
    482c:	e7b1      	b.n	4792 <hard_fault+0x9a>
    482e:	bf00      	nop
    4830:	0000e308 	.word	0x0000e308
    4834:	0000ce88 	.word	0x0000ce88
    4838:	e000ed00 	.word	0xe000ed00
    483c:	0000e354 	.word	0x0000e354
    4840:	0000e320 	.word	0x0000e320
    4844:	0000e344 	.word	0x0000e344
    4848:	0000e374 	.word	0x0000e374
    484c:	0000e25c 	.word	0x0000e25c
    4850:	0000d1f0 	.word	0x0000d1f0
    4854:	0000d02c 	.word	0x0000d02c
    4858:	0000e390 	.word	0x0000e390
    485c:	0000e3b4 	.word	0x0000e3b4

00004860 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4860:	b5f0      	push	{r4, r5, r6, r7, lr}
    4862:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4864:	4b31      	ldr	r3, [pc, #196]	; (492c <z_arm_fault+0xcc>)
    4866:	685d      	ldr	r5, [r3, #4]
    4868:	f3c5 0508 	ubfx	r5, r5, #0, #9
    486c:	2300      	movs	r3, #0
    486e:	f383 8811 	msr	BASEPRI, r3
    4872:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4876:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    487a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    487e:	d125      	bne.n	48cc <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4880:	f002 030c 	and.w	r3, r2, #12
    4884:	2b08      	cmp	r3, #8
    4886:	d011      	beq.n	48ac <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4888:	f012 0f08 	tst.w	r2, #8
    488c:	d01b      	beq.n	48c6 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    488e:	460c      	mov	r4, r1
	*nested_exc = false;
    4890:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4892:	b1f4      	cbz	r4, 48d2 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4894:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    4898:	4629      	mov	r1, r5
    489a:	4620      	mov	r0, r4
    489c:	f007 fada 	bl	be54 <fault_handle>
    48a0:	4605      	mov	r5, r0
	if (recoverable) {
    48a2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    48a6:	b32b      	cbz	r3, 48f4 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    48a8:	b00f      	add	sp, #60	; 0x3c
    48aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    48ac:	4b20      	ldr	r3, [pc, #128]	; (4930 <z_arm_fault+0xd0>)
    48ae:	9302      	str	r3, [sp, #8]
    48b0:	2400      	movs	r4, #0
    48b2:	9401      	str	r4, [sp, #4]
    48b4:	9400      	str	r4, [sp, #0]
    48b6:	4623      	mov	r3, r4
    48b8:	2201      	movs	r2, #1
    48ba:	491e      	ldr	r1, [pc, #120]	; (4934 <z_arm_fault+0xd4>)
    48bc:	4620      	mov	r0, r4
    48be:	f007 faba 	bl	be36 <z_log_msg2_runtime_create>
	*nested_exc = false;
    48c2:	4626      	mov	r6, r4
		return NULL;
    48c4:	e7e5      	b.n	4892 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    48c6:	4604      	mov	r4, r0
			*nested_exc = true;
    48c8:	2601      	movs	r6, #1
    48ca:	e7e2      	b.n	4892 <z_arm_fault+0x32>
	*nested_exc = false;
    48cc:	2600      	movs	r6, #0
		return NULL;
    48ce:	4634      	mov	r4, r6
    48d0:	e7df      	b.n	4892 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    48d2:	4f19      	ldr	r7, [pc, #100]	; (4938 <z_arm_fault+0xd8>)
    48d4:	f240 33fb 	movw	r3, #1019	; 0x3fb
    48d8:	463a      	mov	r2, r7
    48da:	4918      	ldr	r1, [pc, #96]	; (493c <z_arm_fault+0xdc>)
    48dc:	4818      	ldr	r0, [pc, #96]	; (4940 <z_arm_fault+0xe0>)
    48de:	f007 f9c7 	bl	bc70 <assert_print>
    48e2:	4818      	ldr	r0, [pc, #96]	; (4944 <z_arm_fault+0xe4>)
    48e4:	f007 f9c4 	bl	bc70 <assert_print>
    48e8:	f240 31fb 	movw	r1, #1019	; 0x3fb
    48ec:	4638      	mov	r0, r7
    48ee:	f007 f9b8 	bl	bc62 <assert_post_action>
    48f2:	e7cf      	b.n	4894 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    48f4:	2220      	movs	r2, #32
    48f6:	4621      	mov	r1, r4
    48f8:	a805      	add	r0, sp, #20
    48fa:	f007 fb51 	bl	bfa0 <memcpy>
	if (nested_exc) {
    48fe:	b14e      	cbz	r6, 4914 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4902:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4906:	b95a      	cbnz	r2, 4920 <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4908:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    490c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4910:	930c      	str	r3, [sp, #48]	; 0x30
    4912:	e005      	b.n	4920 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4916:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    491a:	f023 0301 	bic.w	r3, r3, #1
    491e:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    4920:	a905      	add	r1, sp, #20
    4922:	4628      	mov	r0, r5
    4924:	f007 fa67 	bl	bdf6 <z_arm_fatal_error>
    4928:	e7be      	b.n	48a8 <z_arm_fault+0x48>
    492a:	bf00      	nop
    492c:	e000ed00 	.word	0xe000ed00
    4930:	0000e3e4 	.word	0x0000e3e4
    4934:	0000ce88 	.word	0x0000ce88
    4938:	0000e25c 	.word	0x0000e25c
    493c:	0000e410 	.word	0x0000e410
    4940:	0000d02c 	.word	0x0000d02c
    4944:	0000e424 	.word	0x0000e424

00004948 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4948:	4a02      	ldr	r2, [pc, #8]	; (4954 <z_arm_fault_init+0xc>)
    494a:	6953      	ldr	r3, [r2, #20]
    494c:	f043 0310 	orr.w	r3, r3, #16
    4950:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4952:	4770      	bx	lr
    4954:	e000ed00 	.word	0xe000ed00

00004958 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4958:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    495c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4960:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4962:	4672      	mov	r2, lr
	bl z_arm_fault
    4964:	f7ff ff7c 	bl	4860 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4968:	bd01      	pop	{r0, pc}
    496a:	bf00      	nop

0000496c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    496c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    496e:	e006      	b.n	497e <z_arm_interrupt_init+0x12>
    4970:	f002 010f 	and.w	r1, r2, #15
    4974:	4b09      	ldr	r3, [pc, #36]	; (499c <z_arm_interrupt_init+0x30>)
    4976:	440b      	add	r3, r1
    4978:	2120      	movs	r1, #32
    497a:	7619      	strb	r1, [r3, #24]
    497c:	3201      	adds	r2, #1
    497e:	2a2f      	cmp	r2, #47	; 0x2f
    4980:	dc0a      	bgt.n	4998 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4982:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4984:	2b00      	cmp	r3, #0
    4986:	dbf3      	blt.n	4970 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4988:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    498c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4990:	2120      	movs	r1, #32
    4992:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4996:	e7f1      	b.n	497c <z_arm_interrupt_init+0x10>
	}
}
    4998:	4770      	bx	lr
    499a:	bf00      	nop
    499c:	e000ecfc 	.word	0xe000ecfc

000049a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    49a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    49a2:	f380 8814 	msr	CONTROL, r0
    isb
    49a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    49aa:	f008 f90b 	bl	cbc4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    49ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    49b0:	490d      	ldr	r1, [pc, #52]	; (49e8 <__start+0x48>)
    str r0, [r1]
    49b2:	6008      	str	r0, [r1, #0]
    dsb
    49b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    49b8:	480c      	ldr	r0, [pc, #48]	; (49ec <__start+0x4c>)
    msr msp, r0
    49ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    49be:	f000 f82d 	bl	4a1c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    49c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    49c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    49c8:	4809      	ldr	r0, [pc, #36]	; (49f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    49ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    49ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    49d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    49d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    49d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    49da:	4308      	orrs	r0, r1
    msr CONTROL, r0
    49dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    49e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    49e4:	f7ff fb42 	bl	406c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    49e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    49ec:	20002400 	.word	0x20002400
    ldr r0, =z_interrupt_stacks
    49f0:	20002580 	.word	0x20002580

000049f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    49f4:	4b08      	ldr	r3, [pc, #32]	; (4a18 <z_arm_clear_arm_mpu_config+0x24>)
    49f6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    49fa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    49fe:	2300      	movs	r3, #0
    4a00:	e006      	b.n	4a10 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4a02:	4a05      	ldr	r2, [pc, #20]	; (4a18 <z_arm_clear_arm_mpu_config+0x24>)
    4a04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4a08:	2100      	movs	r1, #0
    4a0a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4a0e:	3301      	adds	r3, #1
    4a10:	4283      	cmp	r3, r0
    4a12:	dbf6      	blt.n	4a02 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4a14:	4770      	bx	lr
    4a16:	bf00      	nop
    4a18:	e000ed00 	.word	0xe000ed00

00004a1c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4a1c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4a1e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4a20:	2400      	movs	r4, #0
    4a22:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4a26:	f7ff ffe5 	bl	49f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4a2a:	4623      	mov	r3, r4
    4a2c:	e008      	b.n	4a40 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4a2e:	f103 0120 	add.w	r1, r3, #32
    4a32:	4a0e      	ldr	r2, [pc, #56]	; (4a6c <z_arm_init_arch_hw_at_boot+0x50>)
    4a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a38:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4a3c:	3301      	adds	r3, #1
    4a3e:	b2db      	uxtb	r3, r3
    4a40:	2b07      	cmp	r3, #7
    4a42:	d9f4      	bls.n	4a2e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4a44:	2300      	movs	r3, #0
    4a46:	e008      	b.n	4a5a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4a48:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4a4c:	4a07      	ldr	r2, [pc, #28]	; (4a6c <z_arm_init_arch_hw_at_boot+0x50>)
    4a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4a52:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4a56:	3301      	adds	r3, #1
    4a58:	b2db      	uxtb	r3, r3
    4a5a:	2b07      	cmp	r3, #7
    4a5c:	d9f4      	bls.n	4a48 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4a5e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4a60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a64:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4a68:	bd10      	pop	{r4, pc}
    4a6a:	bf00      	nop
    4a6c:	e000e100 	.word	0xe000e100

00004a70 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4a70:	b508      	push	{r3, lr}
	if (_current == thread) {
    4a72:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <z_impl_k_thread_abort+0x2c>)
    4a74:	689b      	ldr	r3, [r3, #8]
    4a76:	4283      	cmp	r3, r0
    4a78:	d002      	beq.n	4a80 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4a7a:	f005 ffab 	bl	a9d4 <z_thread_abort>
}
    4a7e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a80:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4a84:	2b00      	cmp	r3, #0
    4a86:	d0f8      	beq.n	4a7a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a88:	4b05      	ldr	r3, [pc, #20]	; (4aa0 <z_impl_k_thread_abort+0x30>)
    4a8a:	685a      	ldr	r2, [r3, #4]
    4a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4a90:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4a98:	625a      	str	r2, [r3, #36]	; 0x24
    4a9a:	e7ee      	b.n	4a7a <z_impl_k_thread_abort+0xa>
    4a9c:	20001154 	.word	0x20001154
    4aa0:	e000ed00 	.word	0xe000ed00

00004aa4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4aa4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4aa6:	4b03      	ldr	r3, [pc, #12]	; (4ab4 <z_arm_configure_static_mpu_regions+0x10>)
    4aa8:	4a03      	ldr	r2, [pc, #12]	; (4ab8 <z_arm_configure_static_mpu_regions+0x14>)
    4aaa:	2101      	movs	r1, #1
    4aac:	4803      	ldr	r0, [pc, #12]	; (4abc <z_arm_configure_static_mpu_regions+0x18>)
    4aae:	f000 f8bb 	bl	4c28 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4ab2:	bd08      	pop	{r3, pc}
    4ab4:	20040000 	.word	0x20040000
    4ab8:	20000000 	.word	0x20000000
    4abc:	0000e468 	.word	0x0000e468

00004ac0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4ac0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4ac2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4ac6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4ac8:	4804      	ldr	r0, [pc, #16]	; (4adc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4aca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4acc:	2320      	movs	r3, #32
    4ace:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4ad0:	4b03      	ldr	r3, [pc, #12]	; (4ae0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4ad2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4ad4:	2101      	movs	r1, #1
    4ad6:	f000 f8c9 	bl	4c6c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4ada:	bd08      	pop	{r3, pc}
    4adc:	20000bf0 	.word	0x20000bf0
    4ae0:	150b0000 	.word	0x150b0000

00004ae4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4ae4:	4a08      	ldr	r2, [pc, #32]	; (4b08 <region_init+0x24>)
    4ae6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4aea:	680b      	ldr	r3, [r1, #0]
    4aec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4af0:	4303      	orrs	r3, r0
    4af2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4afa:	688b      	ldr	r3, [r1, #8]
    4afc:	f043 0301 	orr.w	r3, r3, #1
    4b00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop
    4b08:	e000ed00 	.word	0xe000ed00

00004b0c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4b0c:	b510      	push	{r4, lr}
    4b0e:	b084      	sub	sp, #16
    4b10:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4b12:	2807      	cmp	r0, #7
    4b14:	d804      	bhi.n	4b20 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4b16:	f7ff ffe5 	bl	4ae4 <region_init>

	return index;
    4b1a:	4620      	mov	r0, r4
}
    4b1c:	b004      	add	sp, #16
    4b1e:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4b20:	9003      	str	r0, [sp, #12]
    4b22:	4b06      	ldr	r3, [pc, #24]	; (4b3c <region_allocate_and_init+0x30>)
    4b24:	9302      	str	r3, [sp, #8]
    4b26:	2000      	movs	r0, #0
    4b28:	9001      	str	r0, [sp, #4]
    4b2a:	9000      	str	r0, [sp, #0]
    4b2c:	4603      	mov	r3, r0
    4b2e:	2201      	movs	r2, #1
    4b30:	4903      	ldr	r1, [pc, #12]	; (4b40 <region_allocate_and_init+0x34>)
    4b32:	f007 f9c5 	bl	bec0 <z_log_msg2_runtime_create>
		return -EINVAL;
    4b36:	f06f 0015 	mvn.w	r0, #21
    4b3a:	e7ef      	b.n	4b1c <region_allocate_and_init+0x10>
    4b3c:	0000e474 	.word	0x0000e474
    4b40:	0000ce80 	.word	0x0000ce80

00004b44 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b48:	b085      	sub	sp, #20
    4b4a:	4680      	mov	r8, r0
    4b4c:	460f      	mov	r7, r1
    4b4e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    4b50:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4b52:	2500      	movs	r5, #0
    4b54:	e009      	b.n	4b6a <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4b56:	4621      	mov	r1, r4
    4b58:	b2f0      	uxtb	r0, r6
    4b5a:	f007 f9c0 	bl	bede <mpu_configure_region>
    4b5e:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4b60:	f110 0f16 	cmn.w	r0, #22
    4b64:	d01e      	beq.n	4ba4 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4b66:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4b68:	3501      	adds	r5, #1
    4b6a:	42bd      	cmp	r5, r7
    4b6c:	da1a      	bge.n	4ba4 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    4b6e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    4b72:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    4b76:	6862      	ldr	r2, [r4, #4]
    4b78:	2a00      	cmp	r2, #0
    4b7a:	d0f5      	beq.n	4b68 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    4b7c:	f1b9 0f00 	cmp.w	r9, #0
    4b80:	d0e9      	beq.n	4b56 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    4b82:	4620      	mov	r0, r4
    4b84:	f007 f98b 	bl	be9e <mpu_partition_is_valid>
		if (do_sanity_check &&
    4b88:	2800      	cmp	r0, #0
    4b8a:	d1e4      	bne.n	4b56 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4b8c:	9503      	str	r5, [sp, #12]
    4b8e:	4b07      	ldr	r3, [pc, #28]	; (4bac <mpu_configure_regions+0x68>)
    4b90:	9302      	str	r3, [sp, #8]
    4b92:	9001      	str	r0, [sp, #4]
    4b94:	9000      	str	r0, [sp, #0]
    4b96:	4603      	mov	r3, r0
    4b98:	2201      	movs	r2, #1
    4b9a:	4905      	ldr	r1, [pc, #20]	; (4bb0 <mpu_configure_regions+0x6c>)
    4b9c:	f007 f990 	bl	bec0 <z_log_msg2_runtime_create>
			return -EINVAL;
    4ba0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4ba4:	4630      	mov	r0, r6
    4ba6:	b005      	add	sp, #20
    4ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4bac:	0000e49c 	.word	0x0000e49c
    4bb0:	0000ce80 	.word	0x0000ce80

00004bb4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4bb4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4bb6:	4c03      	ldr	r4, [pc, #12]	; (4bc4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4bb8:	2301      	movs	r3, #1
    4bba:	7822      	ldrb	r2, [r4, #0]
    4bbc:	f7ff ffc2 	bl	4b44 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4bc0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4bc2:	bd10      	pop	{r4, pc}
    4bc4:	20001385 	.word	0x20001385

00004bc8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4bc8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4bca:	2300      	movs	r3, #0
    4bcc:	4a09      	ldr	r2, [pc, #36]	; (4bf4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    4bce:	7812      	ldrb	r2, [r2, #0]
    4bd0:	f7ff ffb8 	bl	4b44 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4bd4:	f110 0f16 	cmn.w	r0, #22
    4bd8:	d00a      	beq.n	4bf0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4bda:	4603      	mov	r3, r0
    4bdc:	e006      	b.n	4bec <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4bde:	4a06      	ldr	r2, [pc, #24]	; (4bf8 <mpu_configure_dynamic_mpu_regions+0x30>)
    4be0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4be4:	2100      	movs	r1, #0
    4be6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4bea:	3301      	adds	r3, #1
    4bec:	2b07      	cmp	r3, #7
    4bee:	ddf6      	ble.n	4bde <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4bf0:	bd08      	pop	{r3, pc}
    4bf2:	bf00      	nop
    4bf4:	20001385 	.word	0x20001385
    4bf8:	e000ed00 	.word	0xe000ed00

00004bfc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4bfc:	4b04      	ldr	r3, [pc, #16]	; (4c10 <arm_core_mpu_enable+0x14>)
    4bfe:	2205      	movs	r2, #5
    4c00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4c04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c08:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4c0c:	4770      	bx	lr
    4c0e:	bf00      	nop
    4c10:	e000ed00 	.word	0xe000ed00

00004c14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4c14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4c18:	4b02      	ldr	r3, [pc, #8]	; (4c24 <arm_core_mpu_disable+0x10>)
    4c1a:	2200      	movs	r2, #0
    4c1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4c20:	4770      	bx	lr
    4c22:	bf00      	nop
    4c24:	e000ed00 	.word	0xe000ed00

00004c28 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4c28:	b538      	push	{r3, r4, r5, lr}
    4c2a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4c2c:	f7ff ffc2 	bl	4bb4 <mpu_configure_static_mpu_regions>
    4c30:	f110 0f16 	cmn.w	r0, #22
    4c34:	d000      	beq.n	4c38 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4c36:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4c38:	4d08      	ldr	r5, [pc, #32]	; (4c5c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    4c3a:	f240 1311 	movw	r3, #273	; 0x111
    4c3e:	462a      	mov	r2, r5
    4c40:	4907      	ldr	r1, [pc, #28]	; (4c60 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    4c42:	4808      	ldr	r0, [pc, #32]	; (4c64 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    4c44:	f007 f814 	bl	bc70 <assert_print>
    4c48:	4621      	mov	r1, r4
    4c4a:	4807      	ldr	r0, [pc, #28]	; (4c68 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    4c4c:	f007 f810 	bl	bc70 <assert_print>
    4c50:	f240 1111 	movw	r1, #273	; 0x111
    4c54:	4628      	mov	r0, r5
    4c56:	f007 f804 	bl	bc62 <assert_post_action>
}
    4c5a:	e7ec      	b.n	4c36 <arm_core_mpu_configure_static_mpu_regions+0xe>
    4c5c:	0000e4c0 	.word	0x0000e4c0
    4c60:	0000d1f0 	.word	0x0000d1f0
    4c64:	0000d02c 	.word	0x0000d02c
    4c68:	0000e4f8 	.word	0x0000e4f8

00004c6c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4c6c:	b538      	push	{r3, r4, r5, lr}
    4c6e:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    4c70:	f7ff ffaa 	bl	4bc8 <mpu_configure_dynamic_mpu_regions>
    4c74:	f110 0f16 	cmn.w	r0, #22
    4c78:	d000      	beq.n	4c7c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4c7a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4c7c:	4d08      	ldr	r5, [pc, #32]	; (4ca0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    4c7e:	f44f 7398 	mov.w	r3, #304	; 0x130
    4c82:	462a      	mov	r2, r5
    4c84:	4907      	ldr	r1, [pc, #28]	; (4ca4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    4c86:	4808      	ldr	r0, [pc, #32]	; (4ca8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    4c88:	f006 fff2 	bl	bc70 <assert_print>
    4c8c:	4621      	mov	r1, r4
    4c8e:	4807      	ldr	r0, [pc, #28]	; (4cac <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    4c90:	f006 ffee 	bl	bc70 <assert_print>
    4c94:	f44f 7198 	mov.w	r1, #304	; 0x130
    4c98:	4628      	mov	r0, r5
    4c9a:	f006 ffe2 	bl	bc62 <assert_post_action>
}
    4c9e:	e7ec      	b.n	4c7a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    4ca0:	0000e4c0 	.word	0x0000e4c0
    4ca4:	0000d1f0 	.word	0x0000d1f0
    4ca8:	0000d02c 	.word	0x0000d02c
    4cac:	0000e524 	.word	0x0000e524

00004cb0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4cb0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4cb2:	4b24      	ldr	r3, [pc, #144]	; (4d44 <z_arm_mpu_init+0x94>)
    4cb4:	681d      	ldr	r5, [r3, #0]
    4cb6:	2d08      	cmp	r5, #8
    4cb8:	d803      	bhi.n	4cc2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4cba:	f7ff ffab 	bl	4c14 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4cbe:	2400      	movs	r4, #0
    4cc0:	e01e      	b.n	4d00 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    4cc2:	4c21      	ldr	r4, [pc, #132]	; (4d48 <z_arm_mpu_init+0x98>)
    4cc4:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4cc8:	4622      	mov	r2, r4
    4cca:	4920      	ldr	r1, [pc, #128]	; (4d4c <z_arm_mpu_init+0x9c>)
    4ccc:	4820      	ldr	r0, [pc, #128]	; (4d50 <z_arm_mpu_init+0xa0>)
    4cce:	f006 ffcf 	bl	bc70 <assert_print>
    4cd2:	2208      	movs	r2, #8
    4cd4:	4629      	mov	r1, r5
    4cd6:	481f      	ldr	r0, [pc, #124]	; (4d54 <z_arm_mpu_init+0xa4>)
    4cd8:	f006 ffca 	bl	bc70 <assert_print>
    4cdc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4ce0:	4620      	mov	r0, r4
    4ce2:	f006 ffbe 	bl	bc62 <assert_post_action>
		return -1;
    4ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cea:	e017      	b.n	4d1c <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4cec:	4b15      	ldr	r3, [pc, #84]	; (4d44 <z_arm_mpu_init+0x94>)
    4cee:	6859      	ldr	r1, [r3, #4]
    4cf0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4cf4:	0093      	lsls	r3, r2, #2
    4cf6:	4419      	add	r1, r3
    4cf8:	4620      	mov	r0, r4
    4cfa:	f7ff fef3 	bl	4ae4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4cfe:	3401      	adds	r4, #1
    4d00:	42a5      	cmp	r5, r4
    4d02:	d8f3      	bhi.n	4cec <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4d04:	4b14      	ldr	r3, [pc, #80]	; (4d58 <z_arm_mpu_init+0xa8>)
    4d06:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4d08:	f7ff ff78 	bl	4bfc <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    4d0c:	4b13      	ldr	r3, [pc, #76]	; (4d5c <z_arm_mpu_init+0xac>)
    4d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    4d12:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4d16:	2b08      	cmp	r3, #8
    4d18:	d101      	bne.n	4d1e <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4d1a:	2000      	movs	r0, #0
}
    4d1c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    4d1e:	4c0a      	ldr	r4, [pc, #40]	; (4d48 <z_arm_mpu_init+0x98>)
    4d20:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4d24:	4622      	mov	r2, r4
    4d26:	490e      	ldr	r1, [pc, #56]	; (4d60 <z_arm_mpu_init+0xb0>)
    4d28:	4809      	ldr	r0, [pc, #36]	; (4d50 <z_arm_mpu_init+0xa0>)
    4d2a:	f006 ffa1 	bl	bc70 <assert_print>
    4d2e:	480d      	ldr	r0, [pc, #52]	; (4d64 <z_arm_mpu_init+0xb4>)
    4d30:	f006 ff9e 	bl	bc70 <assert_print>
    4d34:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4d38:	4620      	mov	r0, r4
    4d3a:	f006 ff92 	bl	bc62 <assert_post_action>
	return 0;
    4d3e:	2000      	movs	r0, #0
    4d40:	e7ec      	b.n	4d1c <z_arm_mpu_init+0x6c>
    4d42:	bf00      	nop
    4d44:	0000e60c 	.word	0x0000e60c
    4d48:	0000e4c0 	.word	0x0000e4c0
    4d4c:	0000d1f0 	.word	0x0000d1f0
    4d50:	0000d02c 	.word	0x0000d02c
    4d54:	0000e554 	.word	0x0000e554
    4d58:	20001385 	.word	0x20001385
    4d5c:	e000ed00 	.word	0xe000ed00
    4d60:	0000e588 	.word	0x0000e588
    4d64:	0000e5d8 	.word	0x0000e5d8

00004d68 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4d68:	4b01      	ldr	r3, [pc, #4]	; (4d70 <__stdout_hook_install+0x8>)
    4d6a:	6018      	str	r0, [r3, #0]
}
    4d6c:	4770      	bx	lr
    4d6e:	bf00      	nop
    4d70:	200000c4 	.word	0x200000c4

00004d74 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4d74:	3902      	subs	r1, #2
    4d76:	2901      	cmp	r1, #1
    4d78:	d804      	bhi.n	4d84 <z_impl_zephyr_fputc+0x10>
{
    4d7a:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4d7c:	4b03      	ldr	r3, [pc, #12]	; (4d8c <z_impl_zephyr_fputc+0x18>)
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	4798      	blx	r3
}
    4d82:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4d88:	4770      	bx	lr
    4d8a:	bf00      	nop
    4d8c:	200000c4 	.word	0x200000c4

00004d90 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    4d90:	b40f      	push	{r0, r1, r2, r3}
    4d92:	b500      	push	{lr}
    4d94:	b083      	sub	sp, #12
    4d96:	ab04      	add	r3, sp, #16
    4d98:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    4d9c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    4d9e:	2102      	movs	r1, #2
    4da0:	4803      	ldr	r0, [pc, #12]	; (4db0 <printf+0x20>)
    4da2:	f7fd fe13 	bl	29cc <cbvprintf>
	va_end(vargs);

	return r;
}
    4da6:	b003      	add	sp, #12
    4da8:	f85d eb04 	ldr.w	lr, [sp], #4
    4dac:	b004      	add	sp, #16
    4dae:	4770      	bx	lr
    4db0:	0000c041 	.word	0x0000c041

00004db4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4db4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4db6:	f04f 0320 	mov.w	r3, #32
    4dba:	f3ef 8411 	mrs	r4, BASEPRI
    4dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    4dc2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4dc6:	2301      	movs	r3, #1
    4dc8:	4a0c      	ldr	r2, [pc, #48]	; (4dfc <nordicsemi_nrf52_init+0x48>)
    4dca:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4dd2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4dd6:	f007 f937 	bl	c048 <nrf52_errata_197>
    4dda:	b120      	cbz	r0, 4de6 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4de0:	2201      	movs	r2, #1
    4de2:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dea:	2201      	movs	r2, #1
    4dec:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4df0:	f384 8811 	msr	BASEPRI, r4
    4df4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4df8:	2000      	movs	r0, #0
    4dfa:	bd10      	pop	{r4, pc}
    4dfc:	4001e000 	.word	0x4001e000

00004e00 <sys_arch_reboot>:
    *p_gpregret = val;
    4e00:	b2c0      	uxtb	r0, r0
    4e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4e06:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4e0a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4e0e:	4905      	ldr	r1, [pc, #20]	; (4e24 <sys_arch_reboot+0x24>)
    4e10:	68ca      	ldr	r2, [r1, #12]
    4e12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e16:	4b04      	ldr	r3, [pc, #16]	; (4e28 <sys_arch_reboot+0x28>)
    4e18:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4e1a:	60cb      	str	r3, [r1, #12]
    4e1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4e20:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4e22:	e7fd      	b.n	4e20 <sys_arch_reboot+0x20>
    4e24:	e000ed00 	.word	0xe000ed00
    4e28:	05fa0004 	.word	0x05fa0004

00004e2c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4e2c:	b130      	cbz	r0, 4e3c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    4e2e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4e30:	0180      	lsls	r0, r0, #6
    4e32:	4b03      	ldr	r3, [pc, #12]	; (4e40 <arch_busy_wait+0x14>)
    4e34:	f043 0301 	orr.w	r3, r3, #1
    4e38:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4e3a:	bd08      	pop	{r3, pc}
    4e3c:	4770      	bx	lr
    4e3e:	bf00      	nop
    4e40:	0000cf40 	.word	0x0000cf40

00004e44 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    4e44:	4b07      	ldr	r3, [pc, #28]	; (4e64 <adc_context_start_sampling+0x20>)
    4e46:	2201      	movs	r2, #1
    4e48:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    4e4c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    4e50:	b113      	cbz	r3, 4e58 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e52:	4b04      	ldr	r3, [pc, #16]	; (4e64 <adc_context_start_sampling+0x20>)
    4e54:	60da      	str	r2, [r3, #12]
}
    4e56:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e58:	4b02      	ldr	r3, [pc, #8]	; (4e64 <adc_context_start_sampling+0x20>)
    4e5a:	2201      	movs	r2, #1
    4e5c:	601a      	str	r2, [r3, #0]
    4e5e:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    4e60:	4770      	bx	lr
    4e62:	bf00      	nop
    4e64:	40007000 	.word	0x40007000

00004e68 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    4e68:	b949      	cbnz	r1, 4e7e <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    4e6a:	4b05      	ldr	r3, [pc, #20]	; (4e80 <adc_context_update_buffer_pointer+0x18>)
    4e6c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    4e70:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    4e74:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    4e76:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    4e7a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    4e7e:	4770      	bx	lr
    4e80:	40007000 	.word	0x40007000

00004e84 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    4e84:	7c02      	ldrb	r2, [r0, #16]
    4e86:	f1a2 0308 	sub.w	r3, r2, #8
    4e8a:	2b06      	cmp	r3, #6
    4e8c:	d80d      	bhi.n	4eaa <set_resolution+0x26>
    4e8e:	e8df f003 	tbb	[pc, r3]
    4e92:	0c1e      	.short	0x0c1e
    4e94:	0c040c20 	.word	0x0c040c20
    4e98:	0a          	.byte	0x0a
    4e99:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    4e9a:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    4e9c:	4b0e      	ldr	r3, [pc, #56]	; (4ed8 <set_resolution+0x54>)
    4e9e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    4ea2:	2000      	movs	r0, #0
}
    4ea4:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    4ea6:	2203      	movs	r2, #3
		break;
    4ea8:	e7f8      	b.n	4e9c <set_resolution+0x18>
{
    4eaa:	b500      	push	{lr}
    4eac:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    4eae:	9203      	str	r2, [sp, #12]
    4eb0:	4b0a      	ldr	r3, [pc, #40]	; (4edc <set_resolution+0x58>)
    4eb2:	9302      	str	r3, [sp, #8]
    4eb4:	2000      	movs	r0, #0
    4eb6:	9001      	str	r0, [sp, #4]
    4eb8:	9000      	str	r0, [sp, #0]
    4eba:	4603      	mov	r3, r0
    4ebc:	2201      	movs	r2, #1
    4ebe:	4908      	ldr	r1, [pc, #32]	; (4ee0 <set_resolution+0x5c>)
    4ec0:	f007 f8f9 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    4ec4:	f06f 0015 	mvn.w	r0, #21
}
    4ec8:	b005      	add	sp, #20
    4eca:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    4ece:	2200      	movs	r2, #0
    4ed0:	e7e4      	b.n	4e9c <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    4ed2:	2201      	movs	r2, #1
    4ed4:	e7e2      	b.n	4e9c <set_resolution+0x18>
    4ed6:	bf00      	nop
    4ed8:	40007000 	.word	0x40007000
    4edc:	0000e630 	.word	0x0000e630
    4ee0:	0000ce58 	.word	0x0000ce58

00004ee4 <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    4ee4:	b500      	push	{lr}
    4ee6:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    4ee8:	2901      	cmp	r1, #1
    4eea:	d901      	bls.n	4ef0 <set_oversampling+0xc>
    4eec:	7c43      	ldrb	r3, [r0, #17]
    4eee:	b94b      	cbnz	r3, 4f04 <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    4ef0:	7c43      	ldrb	r3, [r0, #17]
    4ef2:	2b08      	cmp	r3, #8
    4ef4:	d813      	bhi.n	4f1e <set_oversampling+0x3a>
    4ef6:	e8df f003 	tbb	[pc, r3]
    4efa:	2020      	.short	0x2020
    4efc:	20202020 	.word	0x20202020
    4f00:	2020      	.short	0x2020
    4f02:	20          	.byte	0x20
    4f03:	00          	.byte	0x00
		LOG_ERR(
    4f04:	4b10      	ldr	r3, [pc, #64]	; (4f48 <set_oversampling+0x64>)
    4f06:	9302      	str	r3, [sp, #8]
    4f08:	2000      	movs	r0, #0
    4f0a:	9001      	str	r0, [sp, #4]
    4f0c:	9000      	str	r0, [sp, #0]
    4f0e:	4603      	mov	r3, r0
    4f10:	2201      	movs	r2, #1
    4f12:	490e      	ldr	r1, [pc, #56]	; (4f4c <set_oversampling+0x68>)
    4f14:	f007 f8cf 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    4f18:	f06f 0015 	mvn.w	r0, #21
    4f1c:	e011      	b.n	4f42 <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    4f1e:	9303      	str	r3, [sp, #12]
    4f20:	4b0b      	ldr	r3, [pc, #44]	; (4f50 <set_oversampling+0x6c>)
    4f22:	9302      	str	r3, [sp, #8]
    4f24:	2000      	movs	r0, #0
    4f26:	9001      	str	r0, [sp, #4]
    4f28:	9000      	str	r0, [sp, #0]
    4f2a:	4603      	mov	r3, r0
    4f2c:	2201      	movs	r2, #1
    4f2e:	4907      	ldr	r1, [pc, #28]	; (4f4c <set_oversampling+0x68>)
    4f30:	f007 f8c1 	bl	c0b6 <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    4f34:	f06f 0015 	mvn.w	r0, #21
    4f38:	e003      	b.n	4f42 <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    4f3a:	4a06      	ldr	r2, [pc, #24]	; (4f54 <set_oversampling+0x70>)
    4f3c:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    4f40:	2000      	movs	r0, #0
}
    4f42:	b005      	add	sp, #20
    4f44:	f85d fb04 	ldr.w	pc, [sp], #4
    4f48:	0000e658 	.word	0x0000e658
    4f4c:	0000ce58 	.word	0x0000ce58
    4f50:	0000e68c 	.word	0x0000e68c
    4f54:	40007000 	.word	0x40007000

00004f58 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    4f58:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    4f5a:	6803      	ldr	r3, [r0, #0]
    4f5c:	b113      	cbz	r3, 4f64 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    4f5e:	899b      	ldrh	r3, [r3, #12]
    4f60:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    4f64:	68c3      	ldr	r3, [r0, #12]
    4f66:	428b      	cmp	r3, r1
    4f68:	d301      	bcc.n	4f6e <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    4f6a:	2000      	movs	r0, #0
}
    4f6c:	4770      	bx	lr
{
    4f6e:	b500      	push	{lr}
    4f70:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    4f72:	9104      	str	r1, [sp, #16]
    4f74:	9303      	str	r3, [sp, #12]
    4f76:	4b07      	ldr	r3, [pc, #28]	; (4f94 <check_buffer_size+0x3c>)
    4f78:	9302      	str	r3, [sp, #8]
    4f7a:	2000      	movs	r0, #0
    4f7c:	9001      	str	r0, [sp, #4]
    4f7e:	9000      	str	r0, [sp, #0]
    4f80:	4603      	mov	r3, r0
    4f82:	2201      	movs	r2, #1
    4f84:	4904      	ldr	r1, [pc, #16]	; (4f98 <check_buffer_size+0x40>)
    4f86:	f007 f896 	bl	c0b6 <z_log_msg2_runtime_create>
		return -ENOMEM;
    4f8a:	f06f 000b 	mvn.w	r0, #11
}
    4f8e:	b007      	add	sp, #28
    4f90:	f85d fb04 	ldr.w	pc, [sp], #4
    4f94:	0000e6b0 	.word	0x0000e6b0
    4f98:	0000ce58 	.word	0x0000ce58

00004f9c <adc_nrfx_channel_setup>:
{
    4f9c:	b510      	push	{r4, lr}
    4f9e:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    4fa0:	2300      	movs	r3, #0
    4fa2:	9304      	str	r3, [sp, #16]
    4fa4:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    4fa8:	790a      	ldrb	r2, [r1, #4]
    4faa:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    4fae:	2a07      	cmp	r2, #7
    4fb0:	f200 80d0 	bhi.w	5154 <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    4fb4:	780b      	ldrb	r3, [r1, #0]
    4fb6:	2b09      	cmp	r3, #9
    4fb8:	d833      	bhi.n	5022 <adc_nrfx_channel_setup+0x86>
    4fba:	e8df f003 	tbb	[pc, r3]
    4fbe:	0508      	.short	0x0508
    4fc0:	32221e1a 	.word	0x32221e1a
    4fc4:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    4fc8:	2301      	movs	r3, #1
    4fca:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    4fce:	784b      	ldrb	r3, [r1, #1]
    4fd0:	2b03      	cmp	r3, #3
    4fd2:	d033      	beq.n	503c <adc_nrfx_channel_setup+0xa0>
    4fd4:	2b04      	cmp	r3, #4
    4fd6:	d034      	beq.n	5042 <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    4fd8:	4b60      	ldr	r3, [pc, #384]	; (515c <adc_nrfx_channel_setup+0x1c0>)
    4fda:	9302      	str	r3, [sp, #8]
    4fdc:	2000      	movs	r0, #0
    4fde:	9001      	str	r0, [sp, #4]
    4fe0:	9000      	str	r0, [sp, #0]
    4fe2:	4603      	mov	r3, r0
    4fe4:	2201      	movs	r2, #1
    4fe6:	495e      	ldr	r1, [pc, #376]	; (5160 <adc_nrfx_channel_setup+0x1c4>)
    4fe8:	f007 f865 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    4fec:	f06f 0015 	mvn.w	r0, #21
    4ff0:	e091      	b.n	5116 <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    4ff2:	2302      	movs	r3, #2
    4ff4:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    4ff8:	e7e9      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    4ffa:	2303      	movs	r3, #3
    4ffc:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5000:	e7e5      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    5002:	2304      	movs	r3, #4
    5004:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5008:	e7e1      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    500a:	2305      	movs	r3, #5
    500c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5010:	e7dd      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    5012:	2306      	movs	r3, #6
    5014:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5018:	e7d9      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    501a:	2307      	movs	r3, #7
    501c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5020:	e7d5      	b.n	4fce <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    5022:	4b50      	ldr	r3, [pc, #320]	; (5164 <adc_nrfx_channel_setup+0x1c8>)
    5024:	9302      	str	r3, [sp, #8]
    5026:	2000      	movs	r0, #0
    5028:	9001      	str	r0, [sp, #4]
    502a:	9000      	str	r0, [sp, #0]
    502c:	4603      	mov	r3, r0
    502e:	2201      	movs	r2, #1
    5030:	494b      	ldr	r1, [pc, #300]	; (5160 <adc_nrfx_channel_setup+0x1c4>)
    5032:	f007 f840 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    5036:	f06f 0015 	mvn.w	r0, #21
    503a:	e06c      	b.n	5116 <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    503c:	2301      	movs	r3, #1
    503e:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    5042:	884b      	ldrh	r3, [r1, #2]
    5044:	2b00      	cmp	r3, #0
    5046:	d068      	beq.n	511a <adc_nrfx_channel_setup+0x17e>
    5048:	f244 0028 	movw	r0, #16424	; 0x4028
    504c:	4283      	cmp	r3, r0
    504e:	d874      	bhi.n	513a <adc_nrfx_channel_setup+0x19e>
    5050:	f244 0003 	movw	r0, #16387	; 0x4003
    5054:	4283      	cmp	r3, r0
    5056:	d370      	bcc.n	513a <adc_nrfx_channel_setup+0x19e>
    5058:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    505c:	3b03      	subs	r3, #3
    505e:	2b25      	cmp	r3, #37	; 0x25
    5060:	d86b      	bhi.n	513a <adc_nrfx_channel_setup+0x19e>
    5062:	e8df f003 	tbb	[pc, r3]
    5066:	6a16      	.short	0x6a16
    5068:	6a6a6a13 	.word	0x6a6a6a13
    506c:	6a6a5a6a 	.word	0x6a6a5a6a
    5070:	6a5e6a6a 	.word	0x6a5e6a6a
    5074:	626a6a6a 	.word	0x626a6a6a
    5078:	6a6a6a6a 	.word	0x6a6a6a6a
    507c:	6a6a6a6a 	.word	0x6a6a6a6a
    5080:	6a6a6a6a 	.word	0x6a6a6a6a
    5084:	6a6a6a6a 	.word	0x6a6a6a6a
    5088:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    508c:	2301      	movs	r3, #1
    508e:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    5092:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    5094:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    5098:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    509c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    50a0:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    50a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    50a8:	0100      	lsls	r0, r0, #4
    50aa:	f000 0030 	and.w	r0, r0, #48	; 0x30
    50ae:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    50b0:	f89d 0012 	ldrb.w	r0, [sp, #18]
    50b4:	0200      	lsls	r0, r0, #8
    50b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    50ba:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    50bc:	f89d 0013 	ldrb.w	r0, [sp, #19]
    50c0:	0300      	lsls	r0, r0, #12
    50c2:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    50c6:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    50c8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    50cc:	0400      	lsls	r0, r0, #16
    50ce:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    50d2:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    50d4:	f89d 0015 	ldrb.w	r0, [sp, #21]
    50d8:	0500      	lsls	r0, r0, #20
    50da:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    50de:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    50e0:	f89d 0016 	ldrb.w	r0, [sp, #22]
    50e4:	0600      	lsls	r0, r0, #24
    50e6:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    50ea:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    50ec:	4c1e      	ldr	r4, [pc, #120]	; (5168 <adc_nrfx_channel_setup+0x1cc>)
    50ee:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    50f2:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    50f6:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    50f8:	f102 0351 	add.w	r3, r2, #81	; 0x51
    50fc:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    5100:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    5104:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    5106:	2000      	movs	r0, #0
    5108:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    510c:	7949      	ldrb	r1, [r1, #5]
    510e:	4b17      	ldr	r3, [pc, #92]	; (516c <adc_nrfx_channel_setup+0x1d0>)
    5110:	441a      	add	r2, r3
    5112:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    5116:	b006      	add	sp, #24
    5118:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    511a:	2302      	movs	r3, #2
    511c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5120:	e7b7      	b.n	5092 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    5122:	2303      	movs	r3, #3
    5124:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5128:	e7b3      	b.n	5092 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    512a:	2304      	movs	r3, #4
    512c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5130:	e7af      	b.n	5092 <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    5132:	2305      	movs	r3, #5
    5134:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5138:	e7ab      	b.n	5092 <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    513a:	4b0d      	ldr	r3, [pc, #52]	; (5170 <adc_nrfx_channel_setup+0x1d4>)
    513c:	9302      	str	r3, [sp, #8]
    513e:	2000      	movs	r0, #0
    5140:	9001      	str	r0, [sp, #4]
    5142:	9000      	str	r0, [sp, #0]
    5144:	4603      	mov	r3, r0
    5146:	2201      	movs	r2, #1
    5148:	4905      	ldr	r1, [pc, #20]	; (5160 <adc_nrfx_channel_setup+0x1c4>)
    514a:	f006 ffb4 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    514e:	f06f 0015 	mvn.w	r0, #21
    5152:	e7e0      	b.n	5116 <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    5154:	f06f 0015 	mvn.w	r0, #21
    5158:	e7dd      	b.n	5116 <adc_nrfx_channel_setup+0x17a>
    515a:	bf00      	nop
    515c:	0000e6f8 	.word	0x0000e6f8
    5160:	0000ce58 	.word	0x0000ce58
    5164:	0000e6d8 	.word	0x0000e6d8
    5168:	40007000 	.word	0x40007000
    516c:	20000000 	.word	0x20000000
    5170:	0000e71c 	.word	0x0000e71c

00005174 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    5174:	b5f0      	push	{r4, r5, r6, r7, lr}
    5176:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    5178:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    517a:	b136      	cbz	r6, 518a <start_read+0x16>
    517c:	460d      	mov	r5, r1
    517e:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    5182:	d102      	bne.n	518a <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    5184:	2300      	movs	r3, #0
	active_channels = 0U;
    5186:	461c      	mov	r4, r3
    5188:	e024      	b.n	51d4 <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    518a:	4b54      	ldr	r3, [pc, #336]	; (52dc <start_read+0x168>)
    518c:	9302      	str	r3, [sp, #8]
    518e:	2000      	movs	r0, #0
    5190:	9001      	str	r0, [sp, #4]
    5192:	9000      	str	r0, [sp, #0]
    5194:	4603      	mov	r3, r0
    5196:	2201      	movs	r2, #1
    5198:	4951      	ldr	r1, [pc, #324]	; (52e0 <start_read+0x16c>)
    519a:	f006 ff8c 	bl	c0b6 <z_log_msg2_runtime_create>
		return -EINVAL;
    519e:	f06f 0315 	mvn.w	r3, #21
    51a2:	e03f      	b.n	5224 <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    51a4:	9303      	str	r3, [sp, #12]
    51a6:	4b4f      	ldr	r3, [pc, #316]	; (52e4 <start_read+0x170>)
    51a8:	9302      	str	r3, [sp, #8]
    51aa:	2000      	movs	r0, #0
    51ac:	9001      	str	r0, [sp, #4]
    51ae:	9000      	str	r0, [sp, #0]
    51b0:	4603      	mov	r3, r0
    51b2:	2201      	movs	r2, #1
    51b4:	494a      	ldr	r1, [pc, #296]	; (52e0 <start_read+0x16c>)
    51b6:	f006 ff7e 	bl	c0b6 <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    51ba:	f06f 0315 	mvn.w	r3, #21
    51be:	e031      	b.n	5224 <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    51c0:	f103 0251 	add.w	r2, r3, #81	; 0x51
    51c4:	0112      	lsls	r2, r2, #4
    51c6:	4948      	ldr	r1, [pc, #288]	; (52e8 <start_read+0x174>)
    51c8:	2000      	movs	r0, #0
    51ca:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    51cc:	3301      	adds	r3, #1
    51ce:	b2db      	uxtb	r3, r3
    51d0:	2b07      	cmp	r3, #7
    51d2:	d822      	bhi.n	521a <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    51d4:	461a      	mov	r2, r3
    51d6:	fa26 f103 	lsr.w	r1, r6, r3
    51da:	f011 0f01 	tst.w	r1, #1
    51de:	d0ef      	beq.n	51c0 <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    51e0:	4942      	ldr	r1, [pc, #264]	; (52ec <start_read+0x178>)
    51e2:	4419      	add	r1, r3
    51e4:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    51e8:	2f00      	cmp	r7, #0
    51ea:	d0db      	beq.n	51a4 <start_read+0x30>
				(sequence->oversampling != 0U ?
    51ec:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    51ee:	1e01      	subs	r1, r0, #0
    51f0:	bf18      	it	ne
    51f2:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    51f4:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 52e8 <start_read+0x174>
    51f8:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    51fc:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    5200:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    5204:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    5208:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    520c:	3251      	adds	r2, #81	; 0x51
    520e:	0112      	lsls	r2, r2, #4
    5210:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    5214:	3401      	adds	r4, #1
    5216:	b2e4      	uxtb	r4, r4
    5218:	e7d8      	b.n	51cc <start_read+0x58>

	error = set_resolution(sequence);
    521a:	4628      	mov	r0, r5
    521c:	f7ff fe32 	bl	4e84 <set_resolution>
	if (error) {
    5220:	4603      	mov	r3, r0
    5222:	b110      	cbz	r0, 522a <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    5224:	4618      	mov	r0, r3
    5226:	b005      	add	sp, #20
    5228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    522a:	4621      	mov	r1, r4
    522c:	4628      	mov	r0, r5
    522e:	f7ff fe59 	bl	4ee4 <set_oversampling>
	if (error) {
    5232:	4603      	mov	r3, r0
    5234:	2800      	cmp	r0, #0
    5236:	d1f5      	bne.n	5224 <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    5238:	4621      	mov	r1, r4
    523a:	4628      	mov	r0, r5
    523c:	f7ff fe8c 	bl	4f58 <check_buffer_size>
	if (error) {
    5240:	4603      	mov	r3, r0
    5242:	2800      	cmp	r0, #0
    5244:	d1ee      	bne.n	5224 <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    5246:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5248:	4b27      	ldr	r3, [pc, #156]	; (52e8 <start_read+0x174>)
    524a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    524e:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    5252:	4f26      	ldr	r7, [pc, #152]	; (52ec <start_read+0x178>)
    5254:	f107 0464 	add.w	r4, r7, #100	; 0x64
    5258:	462e      	mov	r6, r5
    525a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    525c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    525e:	6833      	ldr	r3, [r6, #0]
    5260:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    5262:	2300      	movs	r3, #0
    5264:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    5266:	682b      	ldr	r3, [r5, #0]
    5268:	b14b      	cbz	r3, 527e <start_read+0x10a>
		ctx->options = *sequence->options;
    526a:	f107 0478 	add.w	r4, r7, #120	; 0x78
    526e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    5274:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    5276:	2300      	movs	r3, #0
    5278:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    527c:	b968      	cbnz	r0, 529a <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    527e:	481b      	ldr	r0, [pc, #108]	; (52ec <start_read+0x178>)
    5280:	f7ff fde0 	bl	4e44 <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    5284:	4c19      	ldr	r4, [pc, #100]	; (52ec <start_read+0x178>)
    5286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    528a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    528e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    5292:	f004 f8b1 	bl	93f8 <z_impl_k_sem_take>
	return ctx->status;
    5296:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    5298:	e7c4      	b.n	5224 <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    529a:	463c      	mov	r4, r7
    529c:	2300      	movs	r3, #0
    529e:	f3bf 8f5b 	dmb	ish
    52a2:	e854 2f00 	ldrex	r2, [r4]
    52a6:	e844 3100 	strex	r1, r3, [r4]
    52aa:	2900      	cmp	r1, #0
    52ac:	d1f9      	bne.n	52a2 <start_read+0x12e>
    52ae:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    52b2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    52b4:	0c59      	lsrs	r1, r3, #17
    52b6:	03db      	lsls	r3, r3, #15
    52b8:	480d      	ldr	r0, [pc, #52]	; (52f0 <start_read+0x17c>)
    52ba:	1818      	adds	r0, r3, r0
    52bc:	4a0d      	ldr	r2, [pc, #52]	; (52f4 <start_read+0x180>)
    52be:	f04f 0300 	mov.w	r3, #0
    52c2:	f141 0100 	adc.w	r1, r1, #0
    52c6:	f7fb f8fd 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    52ca:	9000      	str	r0, [sp, #0]
    52cc:	9101      	str	r1, [sp, #4]
    52ce:	2200      	movs	r2, #0
    52d0:	2300      	movs	r3, #0
    52d2:	f104 0008 	add.w	r0, r4, #8
    52d6:	f006 f863 	bl	b3a0 <z_impl_k_timer_start>
}
    52da:	e7d3      	b.n	5284 <start_read+0x110>
    52dc:	0000e748 	.word	0x0000e748
    52e0:	0000ce58 	.word	0x0000ce58
    52e4:	0000e768 	.word	0x0000e768
    52e8:	40007000 	.word	0x40007000
    52ec:	20000000 	.word	0x20000000
    52f0:	000f423f 	.word	0x000f423f
    52f4:	000f4240 	.word	0x000f4240

000052f8 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	4604      	mov	r4, r0
    52fc:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    52fe:	4e09      	ldr	r6, [pc, #36]	; (5324 <adc_nrfx_read+0x2c>)
    5300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5308:	4630      	mov	r0, r6
    530a:	f004 f875 	bl	93f8 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    530e:	4629      	mov	r1, r5
    5310:	4620      	mov	r0, r4
    5312:	f7ff ff2f 	bl	5174 <start_read>
    5316:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5318:	4630      	mov	r0, r6
    531a:	f004 f829 	bl	9370 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    531e:	4620      	mov	r0, r4
    5320:	bd70      	pop	{r4, r5, r6, pc}
    5322:	bf00      	nop
    5324:	20000040 	.word	0x20000040

00005328 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    5328:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    532a:	4b0f      	ldr	r3, [pc, #60]	; (5368 <init_saadc+0x40>)
    532c:	2400      	movs	r4, #0
    532e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5332:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    5336:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    533a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    533e:	2212      	movs	r2, #18
    5340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    5344:	2007      	movs	r0, #7
    5346:	f7fe fe3b 	bl	3fc0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    534a:	4622      	mov	r2, r4
    534c:	2101      	movs	r1, #1
    534e:	2007      	movs	r0, #7
    5350:	f7fe fe52 	bl	3ff8 <z_arm_irq_priority_set>
	return sem->count;
    5354:	4b05      	ldr	r3, [pc, #20]	; (536c <init_saadc+0x44>)
    5356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    5358:	b10b      	cbz	r3, 535e <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    535a:	2000      	movs	r0, #0
    535c:	bd10      	pop	{r4, pc}
    535e:	4804      	ldr	r0, [pc, #16]	; (5370 <init_saadc+0x48>)
    5360:	f004 f806 	bl	9370 <z_impl_k_sem_give>
}
    5364:	e7f9      	b.n	535a <init_saadc+0x32>
    5366:	bf00      	nop
    5368:	40007000 	.word	0x40007000
    536c:	20000000 	.word	0x20000000
    5370:	20000040 	.word	0x20000040

00005374 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5374:	4b36      	ldr	r3, [pc, #216]	; (5450 <saadc_irq_handler+0xdc>)
    5376:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    537a:	b97b      	cbnz	r3, 539c <saadc_irq_handler+0x28>
    537c:	4b34      	ldr	r3, [pc, #208]	; (5450 <saadc_irq_handler+0xdc>)
    537e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    5382:	2b00      	cmp	r3, #0
    5384:	d062      	beq.n	544c <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5386:	4b32      	ldr	r3, [pc, #200]	; (5450 <saadc_irq_handler+0xdc>)
    5388:	2200      	movs	r2, #0
    538a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    538e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5392:	2201      	movs	r2, #1
    5394:	609a      	str	r2, [r3, #8]
    5396:	601a      	str	r2, [r3, #0]
    5398:	605a      	str	r2, [r3, #4]
}
    539a:	4770      	bx	lr
{
    539c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    539e:	4b2c      	ldr	r3, [pc, #176]	; (5450 <saadc_irq_handler+0xdc>)
    53a0:	2200      	movs	r2, #0
    53a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    53a6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53aa:	2101      	movs	r1, #1
    53ac:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    53ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    53b2:	4b28      	ldr	r3, [pc, #160]	; (5454 <saadc_irq_handler+0xe0>)
    53b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    53b6:	b313      	cbz	r3, 53fe <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    53b8:	4b26      	ldr	r3, [pc, #152]	; (5454 <saadc_irq_handler+0xe0>)
    53ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    53bc:	b143      	cbz	r3, 53d0 <saadc_irq_handler+0x5c>
			action = callback(dev,
    53be:	4925      	ldr	r1, [pc, #148]	; (5454 <saadc_irq_handler+0xe0>)
    53c0:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    53c4:	3164      	adds	r1, #100	; 0x64
    53c6:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    53c8:	2801      	cmp	r0, #1
    53ca:	d00f      	beq.n	53ec <saadc_irq_handler+0x78>
    53cc:	2802      	cmp	r0, #2
    53ce:	d010      	beq.n	53f2 <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    53d0:	4a20      	ldr	r2, [pc, #128]	; (5454 <saadc_irq_handler+0xe0>)
    53d2:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    53d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    53da:	4293      	cmp	r3, r2
    53dc:	d213      	bcs.n	5406 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    53de:	3301      	adds	r3, #1
    53e0:	4a1c      	ldr	r2, [pc, #112]	; (5454 <saadc_irq_handler+0xe0>)
    53e2:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    53e6:	2100      	movs	r1, #0
		bool finish = false;
    53e8:	460b      	mov	r3, r1
    53ea:	e004      	b.n	53f6 <saadc_irq_handler+0x82>
		switch (action) {
    53ec:	2101      	movs	r1, #1
    53ee:	2300      	movs	r3, #0
    53f0:	e001      	b.n	53f6 <saadc_irq_handler+0x82>
		bool repeat = false;
    53f2:	2100      	movs	r1, #0
			finish = true;
    53f4:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    53f6:	b14b      	cbz	r3, 540c <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    53f8:	4b16      	ldr	r3, [pc, #88]	; (5454 <saadc_irq_handler+0xe0>)
    53fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    53fc:	bb13      	cbnz	r3, 5444 <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    53fe:	4816      	ldr	r0, [pc, #88]	; (5458 <saadc_irq_handler+0xe4>)
    5400:	f003 ffb6 	bl	9370 <z_impl_k_sem_give>
}
    5404:	bd10      	pop	{r4, pc}
		bool repeat = false;
    5406:	2100      	movs	r1, #0
				finish = true;
    5408:	2301      	movs	r3, #1
    540a:	e7f4      	b.n	53f6 <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    540c:	4c11      	ldr	r4, [pc, #68]	; (5454 <saadc_irq_handler+0xe0>)
    540e:	4620      	mov	r0, r4
    5410:	f7ff fd2a 	bl	4e68 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    5414:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    5416:	b91b      	cbnz	r3, 5420 <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    5418:	4620      	mov	r0, r4
    541a:	f7ff fd13 	bl	4e44 <adc_context_start_sampling>
    541e:	e7f1      	b.n	5404 <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5420:	4b0c      	ldr	r3, [pc, #48]	; (5454 <saadc_irq_handler+0xe0>)
    5422:	f3bf 8f5b 	dmb	ish
    5426:	e853 2f00 	ldrex	r2, [r3]
    542a:	1e51      	subs	r1, r2, #1
    542c:	e843 1000 	strex	r0, r1, [r3]
    5430:	2800      	cmp	r0, #0
    5432:	d1f8      	bne.n	5426 <saadc_irq_handler+0xb2>
    5434:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    5438:	2a01      	cmp	r2, #1
    543a:	dde3      	ble.n	5404 <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    543c:	4618      	mov	r0, r3
    543e:	f7ff fd01 	bl	4e44 <adc_context_start_sampling>
			return;
    5442:	e7df      	b.n	5404 <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    5444:	4805      	ldr	r0, [pc, #20]	; (545c <saadc_irq_handler+0xe8>)
    5446:	f007 fb99 	bl	cb7c <z_impl_k_timer_stop>
}
    544a:	e7d8      	b.n	53fe <saadc_irq_handler+0x8a>
    544c:	4770      	bx	lr
    544e:	bf00      	nop
    5450:	40007000 	.word	0x40007000
    5454:	20000000 	.word	0x20000000
    5458:	20000050 	.word	0x20000050
    545c:	20000008 	.word	0x20000008

00005460 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    5460:	4800      	ldr	r0, [pc, #0]	; (5464 <get_hf_flags+0x4>)
    5462:	4770      	bx	lr
    5464:	20000c54 	.word	0x20000c54

00005468 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5468:	4b01      	ldr	r3, [pc, #4]	; (5470 <get_subsys+0x8>)
    546a:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    546c:	1140      	asrs	r0, r0, #5
    546e:	4770      	bx	lr
    5470:	20000c0c 	.word	0x20000c0c

00005474 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5474:	b530      	push	{r4, r5, lr}
    5476:	b083      	sub	sp, #12
    5478:	4605      	mov	r5, r0
    547a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    547c:	f7ff fff4 	bl	5468 <get_subsys>
    5480:	4601      	mov	r1, r0
    5482:	2340      	movs	r3, #64	; 0x40
    5484:	9300      	str	r3, [sp, #0]
    5486:	4623      	mov	r3, r4
    5488:	4a05      	ldr	r2, [pc, #20]	; (54a0 <onoff_start+0x2c>)
    548a:	4806      	ldr	r0, [pc, #24]	; (54a4 <onoff_start+0x30>)
    548c:	f006 fe8f 	bl	c1ae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5490:	1e01      	subs	r1, r0, #0
    5492:	db01      	blt.n	5498 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    5494:	b003      	add	sp, #12
    5496:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    5498:	4628      	mov	r0, r5
    549a:	47a0      	blx	r4
}
    549c:	e7fa      	b.n	5494 <onoff_start+0x20>
    549e:	bf00      	nop
    54a0:	0000c1f7 	.word	0x0000c1f7
    54a4:	0000cc48 	.word	0x0000cc48

000054a8 <generic_hfclk_stop>:
{
    54a8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54aa:	4b0a      	ldr	r3, [pc, #40]	; (54d4 <generic_hfclk_stop+0x2c>)
    54ac:	f3bf 8f5b 	dmb	ish
    54b0:	e853 2f00 	ldrex	r2, [r3]
    54b4:	f022 0102 	bic.w	r1, r2, #2
    54b8:	e843 1000 	strex	r0, r1, [r3]
    54bc:	2800      	cmp	r0, #0
    54be:	d1f7      	bne.n	54b0 <generic_hfclk_stop+0x8>
    54c0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    54c4:	f012 0f01 	tst.w	r2, #1
    54c8:	d000      	beq.n	54cc <generic_hfclk_stop+0x24>
}
    54ca:	bd08      	pop	{r3, pc}
	hfclk_stop();
    54cc:	f006 fea5 	bl	c21a <hfclk_stop>
    54d0:	e7fb      	b.n	54ca <generic_hfclk_stop+0x22>
    54d2:	bf00      	nop
    54d4:	20000c64 	.word	0x20000c64

000054d8 <get_status>:
{
    54d8:	b570      	push	{r4, r5, r6, lr}
    54da:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    54dc:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    54de:	2c01      	cmp	r4, #1
    54e0:	d807      	bhi.n	54f2 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    54e2:	4621      	mov	r1, r4
    54e4:	4628      	mov	r0, r5
    54e6:	f006 fdf5 	bl	c0d4 <get_sub_data>
    54ea:	6880      	ldr	r0, [r0, #8]
}
    54ec:	f000 0007 	and.w	r0, r0, #7
    54f0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    54f2:	4e06      	ldr	r6, [pc, #24]	; (550c <get_status+0x34>)
    54f4:	2379      	movs	r3, #121	; 0x79
    54f6:	4632      	mov	r2, r6
    54f8:	4905      	ldr	r1, [pc, #20]	; (5510 <get_status+0x38>)
    54fa:	4806      	ldr	r0, [pc, #24]	; (5514 <get_status+0x3c>)
    54fc:	f006 fbb8 	bl	bc70 <assert_print>
    5500:	2179      	movs	r1, #121	; 0x79
    5502:	4630      	mov	r0, r6
    5504:	f006 fbad 	bl	bc62 <assert_post_action>
    5508:	e7eb      	b.n	54e2 <get_status+0xa>
    550a:	bf00      	nop
    550c:	0000e7a0 	.word	0x0000e7a0
    5510:	0000e7e0 	.word	0x0000e7e0
    5514:	0000d02c 	.word	0x0000d02c

00005518 <stop>:
{
    5518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    551c:	4607      	mov	r7, r0
    551e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5520:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5522:	4621      	mov	r1, r4
    5524:	f006 fdd6 	bl	c0d4 <get_sub_data>
    5528:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    552a:	2c01      	cmp	r4, #1
    552c:	d80f      	bhi.n	554e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    552e:	4631      	mov	r1, r6
    5530:	f105 0008 	add.w	r0, r5, #8
    5534:	f006 fddf 	bl	c0f6 <set_off_state>
	if (err < 0) {
    5538:	2800      	cmp	r0, #0
    553a:	db06      	blt.n	554a <stop+0x32>
	get_sub_config(dev, type)->stop();
    553c:	4621      	mov	r1, r4
    553e:	4638      	mov	r0, r7
    5540:	f006 fdcf 	bl	c0e2 <get_sub_config>
    5544:	6843      	ldr	r3, [r0, #4]
    5546:	4798      	blx	r3
	return 0;
    5548:	2000      	movs	r0, #0
}
    554a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    554e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 556c <stop+0x54>
    5552:	f240 134d 	movw	r3, #333	; 0x14d
    5556:	4642      	mov	r2, r8
    5558:	4905      	ldr	r1, [pc, #20]	; (5570 <stop+0x58>)
    555a:	4806      	ldr	r0, [pc, #24]	; (5574 <stop+0x5c>)
    555c:	f006 fb88 	bl	bc70 <assert_print>
    5560:	f240 114d 	movw	r1, #333	; 0x14d
    5564:	4640      	mov	r0, r8
    5566:	f006 fb7c 	bl	bc62 <assert_post_action>
    556a:	e7e0      	b.n	552e <stop+0x16>
    556c:	0000e7a0 	.word	0x0000e7a0
    5570:	0000e7e0 	.word	0x0000e7e0
    5574:	0000d02c 	.word	0x0000d02c

00005578 <onoff_stop>:
{
    5578:	b538      	push	{r3, r4, r5, lr}
    557a:	4605      	mov	r5, r0
    557c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    557e:	f7ff ff73 	bl	5468 <get_subsys>
    5582:	4601      	mov	r1, r0
    5584:	2240      	movs	r2, #64	; 0x40
    5586:	4803      	ldr	r0, [pc, #12]	; (5594 <onoff_stop+0x1c>)
    5588:	f7ff ffc6 	bl	5518 <stop>
    558c:	4601      	mov	r1, r0
	notify(mgr, res);
    558e:	4628      	mov	r0, r5
    5590:	47a0      	blx	r4
}
    5592:	bd38      	pop	{r3, r4, r5, pc}
    5594:	0000cc48 	.word	0x0000cc48

00005598 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    5598:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    559a:	2801      	cmp	r0, #1
    559c:	d01d      	beq.n	55da <clock_event_handler+0x42>
    559e:	2803      	cmp	r0, #3
    55a0:	d020      	beq.n	55e4 <clock_event_handler+0x4c>
    55a2:	b168      	cbz	r0, 55c0 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    55a4:	4c16      	ldr	r4, [pc, #88]	; (5600 <clock_event_handler+0x68>)
    55a6:	f240 2362 	movw	r3, #610	; 0x262
    55aa:	4622      	mov	r2, r4
    55ac:	4915      	ldr	r1, [pc, #84]	; (5604 <clock_event_handler+0x6c>)
    55ae:	4816      	ldr	r0, [pc, #88]	; (5608 <clock_event_handler+0x70>)
    55b0:	f006 fb5e 	bl	bc70 <assert_print>
    55b4:	f240 2162 	movw	r1, #610	; 0x262
    55b8:	4620      	mov	r0, r4
    55ba:	f006 fb52 	bl	bc62 <assert_post_action>
		break;
	}
}
    55be:	e010      	b.n	55e2 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    55c0:	2100      	movs	r1, #0
    55c2:	4812      	ldr	r0, [pc, #72]	; (560c <clock_event_handler+0x74>)
    55c4:	f006 fd86 	bl	c0d4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    55c8:	6883      	ldr	r3, [r0, #8]
    55ca:	f013 0f07 	tst.w	r3, #7
    55ce:	d108      	bne.n	55e2 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    55d0:	2100      	movs	r1, #0
    55d2:	480e      	ldr	r0, [pc, #56]	; (560c <clock_event_handler+0x74>)
    55d4:	f006 fdd9 	bl	c18a <clkstarted_handle>
    55d8:	e003      	b.n	55e2 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    55da:	2101      	movs	r1, #1
    55dc:	480b      	ldr	r0, [pc, #44]	; (560c <clock_event_handler+0x74>)
    55de:	f006 fdd4 	bl	c18a <clkstarted_handle>
}
    55e2:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    55e4:	4c06      	ldr	r4, [pc, #24]	; (5600 <clock_event_handler+0x68>)
    55e6:	f240 235e 	movw	r3, #606	; 0x25e
    55ea:	4622      	mov	r2, r4
    55ec:	4905      	ldr	r1, [pc, #20]	; (5604 <clock_event_handler+0x6c>)
    55ee:	4806      	ldr	r0, [pc, #24]	; (5608 <clock_event_handler+0x70>)
    55f0:	f006 fb3e 	bl	bc70 <assert_print>
    55f4:	f240 215e 	movw	r1, #606	; 0x25e
    55f8:	4620      	mov	r0, r4
    55fa:	f006 fb32 	bl	bc62 <assert_post_action>
		break;
    55fe:	e7f0      	b.n	55e2 <clock_event_handler+0x4a>
    5600:	0000e7a0 	.word	0x0000e7a0
    5604:	0000d1f0 	.word	0x0000d1f0
    5608:	0000d02c 	.word	0x0000d02c
    560c:	0000cc48 	.word	0x0000cc48

00005610 <api_blocking_start>:
{
    5610:	b500      	push	{lr}
    5612:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5614:	f8cd d000 	str.w	sp, [sp]
    5618:	f8cd d004 	str.w	sp, [sp, #4]
    561c:	2300      	movs	r3, #0
    561e:	9302      	str	r3, [sp, #8]
    5620:	2301      	movs	r3, #1
    5622:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5624:	466b      	mov	r3, sp
    5626:	4a07      	ldr	r2, [pc, #28]	; (5644 <api_blocking_start+0x34>)
    5628:	f006 fddd 	bl	c1e6 <api_start>
	if (err < 0) {
    562c:	2800      	cmp	r0, #0
    562e:	db05      	blt.n	563c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    5630:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5634:	2300      	movs	r3, #0
    5636:	4668      	mov	r0, sp
    5638:	f003 fede 	bl	93f8 <z_impl_k_sem_take>
}
    563c:	b005      	add	sp, #20
    563e:	f85d fb04 	ldr.w	pc, [sp], #4
    5642:	bf00      	nop
    5644:	0000c239 	.word	0x0000c239

00005648 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5648:	b570      	push	{r4, r5, r6, lr}
    564a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    564c:	2200      	movs	r2, #0
    564e:	2101      	movs	r1, #1
    5650:	4610      	mov	r0, r2
    5652:	f7fe fcd1 	bl	3ff8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5656:	4811      	ldr	r0, [pc, #68]	; (569c <clk_init+0x54>)
    5658:	f001 fd8c 	bl	7174 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    565c:	4b10      	ldr	r3, [pc, #64]	; (56a0 <clk_init+0x58>)
    565e:	4298      	cmp	r0, r3
    5660:	d119      	bne.n	5696 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5662:	f001 fdb1 	bl	71c8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    5666:	2400      	movs	r4, #0
    5668:	2c01      	cmp	r4, #1
    566a:	d812      	bhi.n	5692 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    566c:	4621      	mov	r1, r4
    566e:	4630      	mov	r0, r6
    5670:	f006 fd30 	bl	c0d4 <get_sub_data>
    5674:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5676:	4621      	mov	r1, r4
    5678:	4630      	mov	r0, r6
    567a:	f006 fd38 	bl	c0ee <get_onoff_manager>
    567e:	4909      	ldr	r1, [pc, #36]	; (56a4 <clk_init+0x5c>)
    5680:	f006 f9ff 	bl	ba82 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5684:	2800      	cmp	r0, #0
    5686:	db05      	blt.n	5694 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5688:	2301      	movs	r3, #1
    568a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    568c:	441c      	add	r4, r3
    568e:	b2e4      	uxtb	r4, r4
    5690:	e7ea      	b.n	5668 <clk_init+0x20>
	}

	return 0;
    5692:	2000      	movs	r0, #0
}
    5694:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5696:	f06f 0004 	mvn.w	r0, #4
    569a:	e7fb      	b.n	5694 <clk_init+0x4c>
    569c:	00005599 	.word	0x00005599
    56a0:	0bad0000 	.word	0x0bad0000
    56a4:	0000e85c 	.word	0x0000e85c

000056a8 <lfclk_spinwait>:
{
    56a8:	b570      	push	{r4, r5, r6, lr}
    56aa:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    56ac:	2801      	cmp	r0, #1
    56ae:	d107      	bne.n	56c0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    56b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56b4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    56b8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    56bc:	2b01      	cmp	r3, #1
    56be:	d05a      	beq.n	5776 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    56c0:	f007 f9c2 	bl	ca48 <k_is_in_isr>
    56c4:	b928      	cbnz	r0, 56d2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    56c6:	4b2f      	ldr	r3, [pc, #188]	; (5784 <lfclk_spinwait+0xdc>)
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d043      	beq.n	5756 <lfclk_spinwait+0xae>
    56ce:	2300      	movs	r3, #0
    56d0:	e000      	b.n	56d4 <lfclk_spinwait+0x2c>
    56d2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    56d4:	461c      	mov	r4, r3
    56d6:	2b00      	cmp	r3, #0
    56d8:	d03f      	beq.n	575a <lfclk_spinwait+0xb2>
	__asm__ volatile(
    56da:	f04f 0320 	mov.w	r3, #32
    56de:	f3ef 8611 	mrs	r6, BASEPRI
    56e2:	f383 8812 	msr	BASEPRI_MAX, r3
    56e6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    56ea:	b924      	cbnz	r4, 56f6 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    56ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56f0:	2202      	movs	r2, #2
    56f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    56f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    56fa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    56fe:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5702:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5706:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    570a:	d12d      	bne.n	5768 <lfclk_spinwait+0xc0>
    return false;
    570c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    570e:	b11a      	cbz	r2, 5718 <lfclk_spinwait+0x70>
    5710:	2b01      	cmp	r3, #1
    5712:	d02b      	beq.n	576c <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5714:	2d01      	cmp	r5, #1
    5716:	d029      	beq.n	576c <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5718:	b30c      	cbz	r4, 575e <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    571a:	4630      	mov	r0, r6
    571c:	f7fe fbfc 	bl	3f18 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5724:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5728:	2b00      	cmp	r3, #0
    572a:	d1e4      	bne.n	56f6 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    572c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5730:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5734:	2b00      	cmp	r3, #0
    5736:	d0de      	beq.n	56f6 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    573c:	2200      	movs	r2, #0
    573e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5742:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5746:	2201      	movs	r2, #1
    5748:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    574c:	490e      	ldr	r1, [pc, #56]	; (5788 <lfclk_spinwait+0xe0>)
    574e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5752:	609a      	str	r2, [r3, #8]
}
    5754:	e7cf      	b.n	56f6 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5756:	2301      	movs	r3, #1
    5758:	e7bc      	b.n	56d4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    575a:	2600      	movs	r6, #0
    575c:	e7c5      	b.n	56ea <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    575e:	2021      	movs	r0, #33	; 0x21
    5760:	2100      	movs	r1, #0
    5762:	f005 f8e5 	bl	a930 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5766:	e7db      	b.n	5720 <lfclk_spinwait+0x78>
                return true;
    5768:	2201      	movs	r2, #1
    576a:	e7d0      	b.n	570e <lfclk_spinwait+0x66>
	if (isr_mode) {
    576c:	b124      	cbz	r4, 5778 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    576e:	f386 8811 	msr	BASEPRI, r6
    5772:	f3bf 8f6f 	isb	sy
}
    5776:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    5778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    577c:	2202      	movs	r2, #2
    577e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5782:	e7f8      	b.n	5776 <lfclk_spinwait+0xce>
    5784:	20001386 	.word	0x20001386
    5788:	e000e100 	.word	0xe000e100

0000578c <generic_hfclk_start>:
{
    578c:	b510      	push	{r4, lr}
	__asm__ volatile(
    578e:	f04f 0320 	mov.w	r3, #32
    5792:	f3ef 8411 	mrs	r4, BASEPRI
    5796:	f383 8812 	msr	BASEPRI_MAX, r3
    579a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    579e:	4a13      	ldr	r2, [pc, #76]	; (57ec <generic_hfclk_start+0x60>)
    57a0:	6813      	ldr	r3, [r2, #0]
    57a2:	f043 0302 	orr.w	r3, r3, #2
    57a6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    57a8:	f013 0f01 	tst.w	r3, #1
    57ac:	d108      	bne.n	57c0 <generic_hfclk_start+0x34>
	bool already_started = false;
    57ae:	2300      	movs	r3, #0
	__asm__ volatile(
    57b0:	f384 8811 	msr	BASEPRI, r4
    57b4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    57b8:	b99b      	cbnz	r3, 57e2 <generic_hfclk_start+0x56>
	hfclk_start();
    57ba:	f006 fd24 	bl	c206 <hfclk_start>
}
    57be:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    57c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    57c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    57cc:	f012 0f01 	tst.w	r2, #1
    57d0:	d101      	bne.n	57d6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    57d2:	2300      	movs	r3, #0
    57d4:	e7ec      	b.n	57b0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    57d6:	f7ff fe43 	bl	5460 <get_hf_flags>
    57da:	f006 fcc3 	bl	c164 <set_on_state>
			already_started = true;
    57de:	2301      	movs	r3, #1
    57e0:	e7e6      	b.n	57b0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    57e2:	2100      	movs	r1, #0
    57e4:	4802      	ldr	r0, [pc, #8]	; (57f0 <generic_hfclk_start+0x64>)
    57e6:	f006 fcd0 	bl	c18a <clkstarted_handle>
		return;
    57ea:	e7e8      	b.n	57be <generic_hfclk_start+0x32>
    57ec:	20000c64 	.word	0x20000c64
    57f0:	0000cc48 	.word	0x0000cc48

000057f4 <z_nrf_clock_control_lf_on>:
{
    57f4:	b538      	push	{r3, r4, r5, lr}
    57f6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    57f8:	4b1f      	ldr	r3, [pc, #124]	; (5878 <z_nrf_clock_control_lf_on+0x84>)
    57fa:	2101      	movs	r1, #1
    57fc:	f3bf 8f5b 	dmb	ish
    5800:	e853 2f00 	ldrex	r2, [r3]
    5804:	e843 1000 	strex	r0, r1, [r3]
    5808:	2800      	cmp	r0, #0
    580a:	d1f9      	bne.n	5800 <z_nrf_clock_control_lf_on+0xc>
    580c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5810:	b142      	cbz	r2, 5824 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    5812:	b134      	cbz	r4, 5822 <z_nrf_clock_control_lf_on+0x2e>
    5814:	1e63      	subs	r3, r4, #1
    5816:	b2db      	uxtb	r3, r3
    5818:	2b01      	cmp	r3, #1
    581a:	d81f      	bhi.n	585c <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    581c:	4620      	mov	r0, r4
    581e:	f7ff ff43 	bl	56a8 <lfclk_spinwait>
}
    5822:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    5824:	4815      	ldr	r0, [pc, #84]	; (587c <z_nrf_clock_control_lf_on+0x88>)
    5826:	f006 fc62 	bl	c0ee <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    582a:	4915      	ldr	r1, [pc, #84]	; (5880 <z_nrf_clock_control_lf_on+0x8c>)
    582c:	2300      	movs	r3, #0
    582e:	604b      	str	r3, [r1, #4]
    5830:	608b      	str	r3, [r1, #8]
    5832:	60cb      	str	r3, [r1, #12]
    5834:	2301      	movs	r3, #1
    5836:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5838:	f7fc fdd4 	bl	23e4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    583c:	2800      	cmp	r0, #0
    583e:	dae8      	bge.n	5812 <z_nrf_clock_control_lf_on+0x1e>
    5840:	4d10      	ldr	r5, [pc, #64]	; (5884 <z_nrf_clock_control_lf_on+0x90>)
    5842:	f44f 7308 	mov.w	r3, #544	; 0x220
    5846:	462a      	mov	r2, r5
    5848:	490f      	ldr	r1, [pc, #60]	; (5888 <z_nrf_clock_control_lf_on+0x94>)
    584a:	4810      	ldr	r0, [pc, #64]	; (588c <z_nrf_clock_control_lf_on+0x98>)
    584c:	f006 fa10 	bl	bc70 <assert_print>
    5850:	f44f 7108 	mov.w	r1, #544	; 0x220
    5854:	4628      	mov	r0, r5
    5856:	f006 fa04 	bl	bc62 <assert_post_action>
    585a:	e7da      	b.n	5812 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    585c:	4c09      	ldr	r4, [pc, #36]	; (5884 <z_nrf_clock_control_lf_on+0x90>)
    585e:	f240 2332 	movw	r3, #562	; 0x232
    5862:	4622      	mov	r2, r4
    5864:	490a      	ldr	r1, [pc, #40]	; (5890 <z_nrf_clock_control_lf_on+0x9c>)
    5866:	4809      	ldr	r0, [pc, #36]	; (588c <z_nrf_clock_control_lf_on+0x98>)
    5868:	f006 fa02 	bl	bc70 <assert_print>
    586c:	f240 2132 	movw	r1, #562	; 0x232
    5870:	4620      	mov	r0, r4
    5872:	f006 f9f6 	bl	bc62 <assert_post_action>
    5876:	e7d4      	b.n	5822 <z_nrf_clock_control_lf_on+0x2e>
    5878:	20000c68 	.word	0x20000c68
    587c:	0000cc48 	.word	0x0000cc48
    5880:	20000bfc 	.word	0x20000bfc
    5884:	0000e7a0 	.word	0x0000e7a0
    5888:	0000dc68 	.word	0x0000dc68
    588c:	0000d02c 	.word	0x0000d02c
    5890:	0000d1f0 	.word	0x0000d1f0

00005894 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5894:	b510      	push	{r4, lr}
    5896:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5898:	280a      	cmp	r0, #10
    589a:	d007      	beq.n	58ac <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    589c:	4b07      	ldr	r3, [pc, #28]	; (58bc <console_out+0x28>)
    589e:	6818      	ldr	r0, [r3, #0]
    58a0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    58a2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    58a4:	685b      	ldr	r3, [r3, #4]
    58a6:	4798      	blx	r3

	return c;
}
    58a8:	4620      	mov	r0, r4
    58aa:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    58ac:	4b03      	ldr	r3, [pc, #12]	; (58bc <console_out+0x28>)
    58ae:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    58b0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    58b2:	685b      	ldr	r3, [r3, #4]
    58b4:	210d      	movs	r1, #13
    58b6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    58b8:	e7f0      	b.n	589c <console_out+0x8>
    58ba:	bf00      	nop
    58bc:	20000c6c 	.word	0x20000c6c

000058c0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    58c0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    58c2:	4c04      	ldr	r4, [pc, #16]	; (58d4 <uart_console_hook_install+0x14>)
    58c4:	4620      	mov	r0, r4
    58c6:	f7ff fa4f 	bl	4d68 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    58ca:	4620      	mov	r0, r4
    58cc:	f7fc faf0 	bl	1eb0 <__printk_hook_install>
#endif
}
    58d0:	bd10      	pop	{r4, pc}
    58d2:	bf00      	nop
    58d4:	00005895 	.word	0x00005895

000058d8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    58d8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    58da:	4806      	ldr	r0, [pc, #24]	; (58f4 <uart_console_init+0x1c>)
    58dc:	4b06      	ldr	r3, [pc, #24]	; (58f8 <uart_console_init+0x20>)
    58de:	6018      	str	r0, [r3, #0]
    58e0:	f007 f856 	bl	c990 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    58e4:	b118      	cbz	r0, 58ee <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    58e6:	f7ff ffeb 	bl	58c0 <uart_console_hook_install>

	return 0;
    58ea:	2000      	movs	r0, #0
}
    58ec:	bd08      	pop	{r3, pc}
		return -ENODEV;
    58ee:	f06f 0012 	mvn.w	r0, #18
    58f2:	e7fb      	b.n	58ec <uart_console_init+0x14>
    58f4:	0000cca8 	.word	0x0000cca8
    58f8:	20000c6c 	.word	0x20000c6c

000058fc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    58fc:	b128      	cbz	r0, 590a <get_dev+0xe>
    58fe:	2801      	cmp	r0, #1
    5900:	d101      	bne.n	5906 <get_dev+0xa>
    5902:	4803      	ldr	r0, [pc, #12]	; (5910 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5904:	4770      	bx	lr
	const struct device *dev = NULL;
    5906:	2000      	movs	r0, #0
    5908:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    590a:	4802      	ldr	r0, [pc, #8]	; (5914 <get_dev+0x18>)
    590c:	4770      	bx	lr
    590e:	bf00      	nop
    5910:	0000cc60 	.word	0x0000cc60
    5914:	0000cc78 	.word	0x0000cc78

00005918 <gpio_nrfx_manage_callback>:
{
    5918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    591c:	4616      	mov	r6, r2
	return port->data;
    591e:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5920:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    5922:	460c      	mov	r4, r1
    5924:	b131      	cbz	r1, 5934 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    5926:	6863      	ldr	r3, [r4, #4]
    5928:	b1a3      	cbz	r3, 5954 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    592a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    592c:	2b00      	cmp	r3, #0
    592e:	d03b      	beq.n	59a8 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5930:	2100      	movs	r1, #0
    5932:	e02a      	b.n	598a <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    5934:	f8df 8094 	ldr.w	r8, [pc, #148]	; 59cc <gpio_nrfx_manage_callback+0xb4>
    5938:	2324      	movs	r3, #36	; 0x24
    593a:	4642      	mov	r2, r8
    593c:	4924      	ldr	r1, [pc, #144]	; (59d0 <gpio_nrfx_manage_callback+0xb8>)
    593e:	4825      	ldr	r0, [pc, #148]	; (59d4 <gpio_nrfx_manage_callback+0xbc>)
    5940:	f006 f996 	bl	bc70 <assert_print>
    5944:	4824      	ldr	r0, [pc, #144]	; (59d8 <gpio_nrfx_manage_callback+0xc0>)
    5946:	f006 f993 	bl	bc70 <assert_print>
    594a:	2124      	movs	r1, #36	; 0x24
    594c:	4640      	mov	r0, r8
    594e:	f006 f988 	bl	bc62 <assert_post_action>
    5952:	e7e8      	b.n	5926 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5954:	f8df 8074 	ldr.w	r8, [pc, #116]	; 59cc <gpio_nrfx_manage_callback+0xb4>
    5958:	2325      	movs	r3, #37	; 0x25
    595a:	4642      	mov	r2, r8
    595c:	491f      	ldr	r1, [pc, #124]	; (59dc <gpio_nrfx_manage_callback+0xc4>)
    595e:	481d      	ldr	r0, [pc, #116]	; (59d4 <gpio_nrfx_manage_callback+0xbc>)
    5960:	f006 f986 	bl	bc70 <assert_print>
    5964:	481e      	ldr	r0, [pc, #120]	; (59e0 <gpio_nrfx_manage_callback+0xc8>)
    5966:	f006 f983 	bl	bc70 <assert_print>
    596a:	2125      	movs	r1, #37	; 0x25
    596c:	4640      	mov	r0, r8
    596e:	f006 f978 	bl	bc62 <assert_post_action>
    5972:	e7da      	b.n	592a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5974:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5976:	606b      	str	r3, [r5, #4]
	return list->tail;
    5978:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    597a:	4294      	cmp	r4, r2
    597c:	d10f      	bne.n	599e <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    597e:	607b      	str	r3, [r7, #4]
}
    5980:	e00d      	b.n	599e <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5982:	6079      	str	r1, [r7, #4]
}
    5984:	e00b      	b.n	599e <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5986:	4619      	mov	r1, r3
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	b15b      	cbz	r3, 59a4 <gpio_nrfx_manage_callback+0x8c>
    598c:	429c      	cmp	r4, r3
    598e:	d1fa      	bne.n	5986 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    5990:	2900      	cmp	r1, #0
    5992:	d0ef      	beq.n	5974 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5994:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5996:	600b      	str	r3, [r1, #0]
	return list->tail;
    5998:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    599a:	429c      	cmp	r4, r3
    599c:	d0f1      	beq.n	5982 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    599e:	2300      	movs	r3, #0
    59a0:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    59a2:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    59a4:	b903      	cbnz	r3, 59a8 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    59a6:	b156      	cbz	r6, 59be <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    59a8:	b166      	cbz	r6, 59c4 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    59aa:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    59ac:	6023      	str	r3, [r4, #0]
	list->head = node;
    59ae:	606c      	str	r4, [r5, #4]
	return list->tail;
    59b0:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    59b2:	b10b      	cbz	r3, 59b8 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    59b4:	2000      	movs	r0, #0
    59b6:	e006      	b.n	59c6 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    59b8:	607c      	str	r4, [r7, #4]
    59ba:	2000      	movs	r0, #0
}
    59bc:	e003      	b.n	59c6 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    59be:	f06f 0015 	mvn.w	r0, #21
    59c2:	e000      	b.n	59c6 <gpio_nrfx_manage_callback+0xae>
	return 0;
    59c4:	2000      	movs	r0, #0
}
    59c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ca:	bf00      	nop
    59cc:	0000e868 	.word	0x0000e868
    59d0:	0000e898 	.word	0x0000e898
    59d4:	0000d02c 	.word	0x0000d02c
    59d8:	0000e8a4 	.word	0x0000e8a4
    59dc:	0000e8b4 	.word	0x0000e8b4
    59e0:	0000e8c8 	.word	0x0000e8c8

000059e4 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    59e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    59e8:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    59ec:	0940      	lsrs	r0, r0, #5
    59ee:	f7ff ff85 	bl	58fc <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    59f2:	b380      	cbz	r0, 5a56 <nrfx_gpio_handler+0x72>
    59f4:	4607      	mov	r7, r0
	return port->data;
    59f6:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    59f8:	2601      	movs	r6, #1
    59fa:	40a6      	lsls	r6, r4
	return list->head;
    59fc:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59fe:	b11c      	cbz	r4, 5a08 <nrfx_gpio_handler+0x24>
    5a00:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5a02:	b17c      	cbz	r4, 5a24 <nrfx_gpio_handler+0x40>
	return node->next;
    5a04:	6825      	ldr	r5, [r4, #0]
    5a06:	e00d      	b.n	5a24 <nrfx_gpio_handler+0x40>
    5a08:	4625      	mov	r5, r4
    5a0a:	e00b      	b.n	5a24 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5a0c:	6863      	ldr	r3, [r4, #4]
    5a0e:	68a2      	ldr	r2, [r4, #8]
    5a10:	4032      	ands	r2, r6
    5a12:	4621      	mov	r1, r4
    5a14:	4638      	mov	r0, r7
    5a16:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5a18:	b1dd      	cbz	r5, 5a52 <nrfx_gpio_handler+0x6e>
    5a1a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5a1c:	b105      	cbz	r5, 5a20 <nrfx_gpio_handler+0x3c>
	return node->next;
    5a1e:	682b      	ldr	r3, [r5, #0]
    5a20:	462c      	mov	r4, r5
    5a22:	461d      	mov	r5, r3
    5a24:	b1bc      	cbz	r4, 5a56 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    5a26:	68a3      	ldr	r3, [r4, #8]
    5a28:	421e      	tst	r6, r3
    5a2a:	d0f5      	beq.n	5a18 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    5a2c:	6863      	ldr	r3, [r4, #4]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d1ec      	bne.n	5a0c <nrfx_gpio_handler+0x28>
    5a32:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5a5c <nrfx_gpio_handler+0x78>
    5a36:	2345      	movs	r3, #69	; 0x45
    5a38:	4642      	mov	r2, r8
    5a3a:	4909      	ldr	r1, [pc, #36]	; (5a60 <nrfx_gpio_handler+0x7c>)
    5a3c:	4809      	ldr	r0, [pc, #36]	; (5a64 <nrfx_gpio_handler+0x80>)
    5a3e:	f006 f917 	bl	bc70 <assert_print>
    5a42:	4809      	ldr	r0, [pc, #36]	; (5a68 <nrfx_gpio_handler+0x84>)
    5a44:	f006 f914 	bl	bc70 <assert_print>
    5a48:	2145      	movs	r1, #69	; 0x45
    5a4a:	4640      	mov	r0, r8
    5a4c:	f006 f909 	bl	bc62 <assert_post_action>
    5a50:	e7dc      	b.n	5a0c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5a52:	462b      	mov	r3, r5
    5a54:	e7e4      	b.n	5a20 <nrfx_gpio_handler+0x3c>
}
    5a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a5a:	bf00      	nop
    5a5c:	0000e868 	.word	0x0000e868
    5a60:	0000e8e0 	.word	0x0000e8e0
    5a64:	0000d02c 	.word	0x0000d02c
    5a68:	0000e8c8 	.word	0x0000e8c8

00005a6c <gpio_nrfx_pin_interrupt_configure>:
{
    5a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a6e:	b085      	sub	sp, #20
    5a70:	460e      	mov	r6, r1
    5a72:	4619      	mov	r1, r3
	return port->config;
    5a74:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5a76:	7b1b      	ldrb	r3, [r3, #12]
    5a78:	f006 041f 	and.w	r4, r6, #31
    5a7c:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5a80:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5a84:	d022      	beq.n	5acc <gpio_nrfx_pin_interrupt_configure+0x60>
    5a86:	4607      	mov	r7, r0
    5a88:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5a8a:	2300      	movs	r3, #0
    5a8c:	9302      	str	r3, [sp, #8]
    5a8e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    5a90:	4610      	mov	r0, r2
    5a92:	f006 fc4f 	bl	c334 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5a96:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    5a9a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5a9c:	6899      	ldr	r1, [r3, #8]
    5a9e:	40f1      	lsrs	r1, r6
    5aa0:	f011 0101 	ands.w	r1, r1, #1
    5aa4:	d102      	bne.n	5aac <gpio_nrfx_pin_interrupt_configure+0x40>
    5aa6:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    5aaa:	d014      	beq.n	5ad6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5aac:	2300      	movs	r3, #0
    5aae:	aa02      	add	r2, sp, #8
    5ab0:	4619      	mov	r1, r3
    5ab2:	4620      	mov	r0, r4
    5ab4:	f002 f802 	bl	7abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5ab8:	4b32      	ldr	r3, [pc, #200]	; (5b84 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5aba:	4298      	cmp	r0, r3
    5abc:	d15f      	bne.n	5b7e <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5abe:	2101      	movs	r1, #1
    5ac0:	4620      	mov	r0, r4
    5ac2:	f002 fa5f 	bl	7f84 <nrfx_gpiote_trigger_enable>
	return 0;
    5ac6:	2000      	movs	r0, #0
}
    5ac8:	b005      	add	sp, #20
    5aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    5acc:	4620      	mov	r0, r4
    5ace:	f002 fb65 	bl	819c <nrfx_gpiote_trigger_disable>
		return 0;
    5ad2:	2000      	movs	r0, #0
    5ad4:	e7f8      	b.n	5ac8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    5ad6:	0963      	lsrs	r3, r4, #5
    5ad8:	d01f      	beq.n	5b1a <gpio_nrfx_pin_interrupt_configure+0xae>
    5ada:	2b01      	cmp	r3, #1
    5adc:	d101      	bne.n	5ae2 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    5ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    5ae2:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5ae6:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ae8:	f011 0f01 	tst.w	r1, #1
    5aec:	d018      	beq.n	5b20 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    5aee:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5af2:	0963      	lsrs	r3, r4, #5
    5af4:	d022      	beq.n	5b3c <gpio_nrfx_pin_interrupt_configure+0xd0>
    5af6:	2b01      	cmp	r3, #1
    5af8:	d023      	beq.n	5b42 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    5afa:	4e23      	ldr	r6, [pc, #140]	; (5b88 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5afc:	f240 232e 	movw	r3, #558	; 0x22e
    5b00:	4632      	mov	r2, r6
    5b02:	4922      	ldr	r1, [pc, #136]	; (5b8c <gpio_nrfx_pin_interrupt_configure+0x120>)
    5b04:	4822      	ldr	r0, [pc, #136]	; (5b90 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5b06:	f006 f8b3 	bl	bc70 <assert_print>
    5b0a:	f240 212e 	movw	r1, #558	; 0x22e
    5b0e:	4630      	mov	r0, r6
    5b10:	f006 f8a7 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    5b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5b18:	e014      	b.n	5b44 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    5b1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5b1e:	e7e0      	b.n	5ae2 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5b20:	4d19      	ldr	r5, [pc, #100]	; (5b88 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5b22:	f240 2329 	movw	r3, #553	; 0x229
    5b26:	462a      	mov	r2, r5
    5b28:	491a      	ldr	r1, [pc, #104]	; (5b94 <gpio_nrfx_pin_interrupt_configure+0x128>)
    5b2a:	4819      	ldr	r0, [pc, #100]	; (5b90 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5b2c:	f006 f8a0 	bl	bc70 <assert_print>
    5b30:	f240 2129 	movw	r1, #553	; 0x229
    5b34:	4628      	mov	r0, r5
    5b36:	f006 f894 	bl	bc62 <assert_post_action>
    5b3a:	e7d8      	b.n	5aee <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5b3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5b40:	e000      	b.n	5b44 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5b42:	4b15      	ldr	r3, [pc, #84]	; (5b98 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5b44:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5b48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5b4c:	f013 0f01 	tst.w	r3, #1
    5b50:	d1ac      	bne.n	5aac <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5b52:	f10d 0107 	add.w	r1, sp, #7
    5b56:	4620      	mov	r0, r4
    5b58:	f002 f9a4 	bl	7ea4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5b5c:	4b0f      	ldr	r3, [pc, #60]	; (5b9c <gpio_nrfx_pin_interrupt_configure+0x130>)
    5b5e:	4298      	cmp	r0, r3
    5b60:	d003      	beq.n	5b6a <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    5b62:	f10d 0307 	add.w	r3, sp, #7
    5b66:	9303      	str	r3, [sp, #12]
    5b68:	e7a0      	b.n	5aac <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    5b6a:	f10d 0007 	add.w	r0, sp, #7
    5b6e:	f002 fa01 	bl	7f74 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5b72:	4b04      	ldr	r3, [pc, #16]	; (5b84 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5b74:	4298      	cmp	r0, r3
    5b76:	d0f4      	beq.n	5b62 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    5b78:	f06f 000b 	mvn.w	r0, #11
    5b7c:	e7a4      	b.n	5ac8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    5b7e:	f06f 0004 	mvn.w	r0, #4
    5b82:	e7a1      	b.n	5ac8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    5b84:	0bad0000 	.word	0x0bad0000
    5b88:	0000e8ec 	.word	0x0000e8ec
    5b8c:	0000d1f0 	.word	0x0000d1f0
    5b90:	0000d02c 	.word	0x0000d02c
    5b94:	0000e920 	.word	0x0000e920
    5b98:	50000300 	.word	0x50000300
    5b9c:	0bad0004 	.word	0x0bad0004

00005ba0 <pin_uninit>:
{
    5ba0:	b530      	push	{r4, r5, lr}
    5ba2:	b083      	sub	sp, #12
    5ba4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5ba6:	f10d 0107 	add.w	r1, sp, #7
    5baa:	f002 f97b 	bl	7ea4 <nrfx_gpiote_channel_get>
    5bae:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5bb0:	4620      	mov	r0, r4
    5bb2:	f002 fb5b 	bl	826c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5bb6:	4b0b      	ldr	r3, [pc, #44]	; (5be4 <pin_uninit+0x44>)
    5bb8:	4298      	cmp	r0, r3
    5bba:	d10f      	bne.n	5bdc <pin_uninit+0x3c>
	if (free_ch) {
    5bbc:	429d      	cmp	r5, r3
    5bbe:	d005      	beq.n	5bcc <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5bc0:	4b08      	ldr	r3, [pc, #32]	; (5be4 <pin_uninit+0x44>)
    5bc2:	4298      	cmp	r0, r3
    5bc4:	d107      	bne.n	5bd6 <pin_uninit+0x36>
    5bc6:	2000      	movs	r0, #0
}
    5bc8:	b003      	add	sp, #12
    5bca:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    5bcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5bd0:	f002 f9c8 	bl	7f64 <nrfx_gpiote_channel_free>
    5bd4:	e7f4      	b.n	5bc0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5bd6:	f06f 0004 	mvn.w	r0, #4
    5bda:	e7f5      	b.n	5bc8 <pin_uninit+0x28>
		return -EIO;
    5bdc:	f06f 0004 	mvn.w	r0, #4
    5be0:	e7f2      	b.n	5bc8 <pin_uninit+0x28>
    5be2:	bf00      	nop
    5be4:	0bad0000 	.word	0x0bad0000

00005be8 <gpio_nrfx_pin_configure>:
{
    5be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bec:	b087      	sub	sp, #28
	return port->config;
    5bee:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5bf2:	f898 300c 	ldrb.w	r3, [r8, #12]
    5bf6:	f001 051f 	and.w	r5, r1, #31
    5bfa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5bfe:	2a00      	cmp	r2, #0
    5c00:	d044      	beq.n	5c8c <gpio_nrfx_pin_configure+0xa4>
    5c02:	460c      	mov	r4, r1
    5c04:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5c06:	2600      	movs	r6, #0
    5c08:	9603      	str	r6, [sp, #12]
    5c0a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    5c0c:	f10d 0117 	add.w	r1, sp, #23
    5c10:	4620      	mov	r0, r4
    5c12:	f002 f947 	bl	7ea4 <nrfx_gpiote_channel_get>
    5c16:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5c18:	4633      	mov	r3, r6
    5c1a:	aa03      	add	r2, sp, #12
    5c1c:	4631      	mov	r1, r6
    5c1e:	4628      	mov	r0, r5
    5c20:	f001 ff4c 	bl	7abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5c24:	4b30      	ldr	r3, [pc, #192]	; (5ce8 <gpio_nrfx_pin_configure+0x100>)
    5c26:	4298      	cmp	r0, r3
    5c28:	d15b      	bne.n	5ce2 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    5c2a:	4599      	cmp	r9, r3
    5c2c:	d036      	beq.n	5c9c <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    5c2e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    5c32:	d043      	beq.n	5cbc <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    5c34:	f10d 0103 	add.w	r1, sp, #3
    5c38:	4638      	mov	r0, r7
    5c3a:	f006 fb02 	bl	c242 <get_drive>
		if (rv != 0) {
    5c3e:	4606      	mov	r6, r0
    5c40:	bb40      	cbnz	r0, 5c94 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    5c42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c46:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5c4a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    5c4e:	bf0c      	ite	eq
    5c50:	2301      	moveq	r3, #1
    5c52:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    5c54:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    5c58:	4638      	mov	r0, r7
    5c5a:	f006 fb38 	bl	c2ce <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    5c5e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5c62:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    5c66:	d01e      	beq.n	5ca6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5c6c:	2101      	movs	r1, #1
    5c6e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    5c72:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5c76:	2200      	movs	r2, #0
    5c78:	a901      	add	r1, sp, #4
    5c7a:	4628      	mov	r0, r5
    5c7c:	f002 f812 	bl	7ca4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5c80:	4b19      	ldr	r3, [pc, #100]	; (5ce8 <gpio_nrfx_pin_configure+0x100>)
    5c82:	4298      	cmp	r0, r3
    5c84:	d006      	beq.n	5c94 <gpio_nrfx_pin_configure+0xac>
    5c86:	f06f 0615 	mvn.w	r6, #21
    5c8a:	e003      	b.n	5c94 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    5c8c:	4628      	mov	r0, r5
    5c8e:	f7ff ff87 	bl	5ba0 <pin_uninit>
    5c92:	4606      	mov	r6, r0
}
    5c94:	4630      	mov	r0, r6
    5c96:	b007      	add	sp, #28
    5c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    5c9c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    5ca0:	f002 f960 	bl	7f64 <nrfx_gpiote_channel_free>
    5ca4:	e7c3      	b.n	5c2e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5ca6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    5caa:	d0e4      	beq.n	5c76 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5cac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5cb0:	2301      	movs	r3, #1
    5cb2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    5cb6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    5cba:	e7dc      	b.n	5c76 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    5cbc:	4638      	mov	r0, r7
    5cbe:	f006 fb06 	bl	c2ce <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    5cc2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5cc6:	2300      	movs	r3, #0
    5cc8:	461a      	mov	r2, r3
    5cca:	a902      	add	r1, sp, #8
    5ccc:	4628      	mov	r0, r5
    5cce:	f001 fef5 	bl	7abc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5cd2:	4b05      	ldr	r3, [pc, #20]	; (5ce8 <gpio_nrfx_pin_configure+0x100>)
    5cd4:	4298      	cmp	r0, r3
    5cd6:	d101      	bne.n	5cdc <gpio_nrfx_pin_configure+0xf4>
    5cd8:	2600      	movs	r6, #0
    5cda:	e7db      	b.n	5c94 <gpio_nrfx_pin_configure+0xac>
    5cdc:	f06f 0615 	mvn.w	r6, #21
    5ce0:	e7d8      	b.n	5c94 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    5ce2:	f06f 0615 	mvn.w	r6, #21
    5ce6:	e7d5      	b.n	5c94 <gpio_nrfx_pin_configure+0xac>
    5ce8:	0bad0000 	.word	0x0bad0000

00005cec <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5cec:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5cee:	f002 f92f 	bl	7f50 <nrfx_gpiote_is_init>
    5cf2:	b108      	cbz	r0, 5cf8 <gpio_nrfx_init+0xc>
		return 0;
    5cf4:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5cf6:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    5cf8:	f002 f900 	bl	7efc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5cfc:	4b08      	ldr	r3, [pc, #32]	; (5d20 <gpio_nrfx_init+0x34>)
    5cfe:	4298      	cmp	r0, r3
    5d00:	d10a      	bne.n	5d18 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5d02:	2100      	movs	r1, #0
    5d04:	4807      	ldr	r0, [pc, #28]	; (5d24 <gpio_nrfx_init+0x38>)
    5d06:	f002 f8c7 	bl	7e98 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5d0a:	2200      	movs	r2, #0
    5d0c:	2105      	movs	r1, #5
    5d0e:	2006      	movs	r0, #6
    5d10:	f7fe f972 	bl	3ff8 <z_arm_irq_priority_set>
	return 0;
    5d14:	2000      	movs	r0, #0
    5d16:	e7ee      	b.n	5cf6 <gpio_nrfx_init+0xa>
		return -EIO;
    5d18:	f06f 0004 	mvn.w	r0, #4
    5d1c:	e7eb      	b.n	5cf6 <gpio_nrfx_init+0xa>
    5d1e:	bf00      	nop
    5d20:	0bad0000 	.word	0x0bad0000
    5d24:	000059e5 	.word	0x000059e5

00005d28 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    5d28:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    5d2a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5d2c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    5d30:	d06f      	beq.n	5e12 <baudrate_set+0xea>
    5d32:	d83a      	bhi.n	5daa <baudrate_set+0x82>
    5d34:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5d38:	d06e      	beq.n	5e18 <baudrate_set+0xf0>
    5d3a:	d90a      	bls.n	5d52 <baudrate_set+0x2a>
    5d3c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    5d40:	d075      	beq.n	5e2e <baudrate_set+0x106>
    5d42:	d924      	bls.n	5d8e <baudrate_set+0x66>
    5d44:	f647 2312 	movw	r3, #31250	; 0x7a12
    5d48:	4299      	cmp	r1, r3
    5d4a:	d12b      	bne.n	5da4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5d4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    5d50:	e013      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5d52:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5d56:	d061      	beq.n	5e1c <baudrate_set+0xf4>
    5d58:	d907      	bls.n	5d6a <baudrate_set+0x42>
    5d5a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    5d5e:	d063      	beq.n	5e28 <baudrate_set+0x100>
    5d60:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5d64:	d110      	bne.n	5d88 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5d66:	4b3c      	ldr	r3, [pc, #240]	; (5e58 <baudrate_set+0x130>)
    5d68:	e007      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5d6a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    5d6e:	d058      	beq.n	5e22 <baudrate_set+0xfa>
    5d70:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5d74:	d105      	bne.n	5d82 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5d76:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5d7a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    5d7e:	2000      	movs	r0, #0
    5d80:	4770      	bx	lr
	switch (baudrate) {
    5d82:	f06f 0015 	mvn.w	r0, #21
    5d86:	4770      	bx	lr
    5d88:	f06f 0015 	mvn.w	r0, #21
    5d8c:	4770      	bx	lr
    5d8e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    5d92:	d04e      	beq.n	5e32 <baudrate_set+0x10a>
    5d94:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5d98:	d101      	bne.n	5d9e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5d9a:	4b30      	ldr	r3, [pc, #192]	; (5e5c <baudrate_set+0x134>)
    5d9c:	e7ed      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5d9e:	f06f 0015 	mvn.w	r0, #21
    5da2:	4770      	bx	lr
    5da4:	f06f 0015 	mvn.w	r0, #21
    5da8:	4770      	bx	lr
    5daa:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    5dae:	d042      	beq.n	5e36 <baudrate_set+0x10e>
    5db0:	d909      	bls.n	5dc6 <baudrate_set+0x9e>
    5db2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5db6:	d046      	beq.n	5e46 <baudrate_set+0x11e>
    5db8:	d91f      	bls.n	5dfa <baudrate_set+0xd2>
    5dba:	4b29      	ldr	r3, [pc, #164]	; (5e60 <baudrate_set+0x138>)
    5dbc:	4299      	cmp	r1, r3
    5dbe:	d148      	bne.n	5e52 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5dc4:	e7d9      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5dc6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    5dca:	d037      	beq.n	5e3c <baudrate_set+0x114>
    5dcc:	d905      	bls.n	5dda <baudrate_set+0xb2>
    5dce:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    5dd2:	d10f      	bne.n	5df4 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5dd4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5dd8:	e7cf      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5dda:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    5dde:	4299      	cmp	r1, r3
    5de0:	d02e      	beq.n	5e40 <baudrate_set+0x118>
    5de2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5de6:	d102      	bne.n	5dee <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5de8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5dec:	e7c5      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5dee:	f06f 0015 	mvn.w	r0, #21
    5df2:	4770      	bx	lr
    5df4:	f06f 0015 	mvn.w	r0, #21
    5df8:	4770      	bx	lr
    5dfa:	4b1a      	ldr	r3, [pc, #104]	; (5e64 <baudrate_set+0x13c>)
    5dfc:	4299      	cmp	r1, r3
    5dfe:	d025      	beq.n	5e4c <baudrate_set+0x124>
    5e00:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5e04:	d102      	bne.n	5e0c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5e06:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5e0a:	e7b6      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5e0c:	f06f 0015 	mvn.w	r0, #21
    5e10:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5e12:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5e16:	e7b0      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5e18:	4b13      	ldr	r3, [pc, #76]	; (5e68 <baudrate_set+0x140>)
    5e1a:	e7ae      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5e1c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5e20:	e7ab      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5e22:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5e26:	e7a8      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5e28:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5e2c:	e7a5      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5e2e:	4b0f      	ldr	r3, [pc, #60]	; (5e6c <baudrate_set+0x144>)
    5e30:	e7a3      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5e32:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <baudrate_set+0x148>)
    5e34:	e7a1      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5e36:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5e3a:	e79e      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5e3c:	4b0d      	ldr	r3, [pc, #52]	; (5e74 <baudrate_set+0x14c>)
    5e3e:	e79c      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5e40:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5e44:	e799      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5e46:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5e4a:	e796      	b.n	5d7a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5e4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5e50:	e793      	b.n	5d7a <baudrate_set+0x52>
	switch (baudrate) {
    5e52:	f06f 0015 	mvn.w	r0, #21
}
    5e56:	4770      	bx	lr
    5e58:	0013b000 	.word	0x0013b000
    5e5c:	004ea000 	.word	0x004ea000
    5e60:	000f4240 	.word	0x000f4240
    5e64:	0003d090 	.word	0x0003d090
    5e68:	00275000 	.word	0x00275000
    5e6c:	0075c000 	.word	0x0075c000
    5e70:	003af000 	.word	0x003af000
    5e74:	013a9000 	.word	0x013a9000

00005e78 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e7c:	4605      	mov	r5, r0
    5e7e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    5e80:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5e84:	f006 fde0 	bl	ca48 <k_is_in_isr>
    5e88:	b920      	cbnz	r0, 5e94 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    5e8a:	4b16      	ldr	r3, [pc, #88]	; (5ee4 <uarte_nrfx_poll_out+0x6c>)
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	b143      	cbz	r3, 5ea2 <uarte_nrfx_poll_out+0x2a>
    5e90:	2300      	movs	r3, #0
    5e92:	e000      	b.n	5e96 <uarte_nrfx_poll_out+0x1e>
    5e94:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    5e96:	b953      	cbnz	r3, 5eae <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    5e98:	4628      	mov	r0, r5
    5e9a:	f006 fb54 	bl	c546 <wait_tx_ready>
    5e9e:	4606      	mov	r6, r0
    5ea0:	e013      	b.n	5eca <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5ea2:	2301      	movs	r3, #1
    5ea4:	e7f7      	b.n	5e96 <uarte_nrfx_poll_out+0x1e>
    5ea6:	f384 8811 	msr	BASEPRI, r4
    5eaa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    5eae:	f04f 0320 	mov.w	r3, #32
    5eb2:	f3ef 8411 	mrs	r4, BASEPRI
    5eb6:	f383 8812 	msr	BASEPRI_MAX, r3
    5eba:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    5ebe:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    5ec0:	4628      	mov	r0, r5
    5ec2:	f006 faf2 	bl	c4aa <is_tx_ready>
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d0ed      	beq.n	5ea6 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    5eca:	4641      	mov	r1, r8
    5ecc:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    5ed0:	2201      	movs	r2, #1
    5ed2:	4628      	mov	r0, r5
    5ed4:	f006 fb03 	bl	c4de <tx_start>
	__asm__ volatile(
    5ed8:	f386 8811 	msr	BASEPRI, r6
    5edc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    5ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ee4:	20001386 	.word	0x20001386

00005ee8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5ee8:	b530      	push	{r4, r5, lr}
    5eea:	b085      	sub	sp, #20
    5eec:	4604      	mov	r4, r0
    5eee:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5ef0:	f101 0012 	add.w	r0, r1, #18
    5ef4:	f002 fa46 	bl	8384 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5ef8:	4b11      	ldr	r3, [pc, #68]	; (5f40 <endtx_stoptx_ppi_init+0x58>)
    5efa:	4298      	cmp	r0, r3
    5efc:	d112      	bne.n	5f24 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5efe:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5f00:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    5f04:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5f06:	4a0f      	ldr	r2, [pc, #60]	; (5f44 <endtx_stoptx_ppi_init+0x5c>)
    5f08:	33a2      	adds	r3, #162	; 0xa2
    5f0a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5f0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5f12:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5f14:	7ca9      	ldrb	r1, [r5, #18]
    5f16:	2301      	movs	r3, #1
    5f18:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    5f1a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    5f1e:	2000      	movs	r0, #0
}
    5f20:	b005      	add	sp, #20
    5f22:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    5f24:	4b08      	ldr	r3, [pc, #32]	; (5f48 <endtx_stoptx_ppi_init+0x60>)
    5f26:	9302      	str	r3, [sp, #8]
    5f28:	2000      	movs	r0, #0
    5f2a:	9001      	str	r0, [sp, #4]
    5f2c:	9000      	str	r0, [sp, #0]
    5f2e:	4603      	mov	r3, r0
    5f30:	2201      	movs	r2, #1
    5f32:	4906      	ldr	r1, [pc, #24]	; (5f4c <endtx_stoptx_ppi_init+0x64>)
    5f34:	f006 fb2e 	bl	c594 <z_log_msg2_runtime_create>
		return -EIO;
    5f38:	f06f 0004 	mvn.w	r0, #4
    5f3c:	e7f0      	b.n	5f20 <endtx_stoptx_ppi_init+0x38>
    5f3e:	bf00      	nop
    5f40:	0bad0000 	.word	0x0bad0000
    5f44:	4001f000 	.word	0x4001f000
    5f48:	0000e998 	.word	0x0000e998
    5f4c:	0000cea0 	.word	0x0000cea0

00005f50 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5f50:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5f54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5f58:	4b01      	ldr	r3, [pc, #4]	; (5f60 <set_comparator+0x10>)
    5f5a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    5f5e:	4770      	bx	lr
    5f60:	40011000 	.word	0x40011000

00005f64 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5f64:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    5f68:	4b01      	ldr	r3, [pc, #4]	; (5f70 <get_comparator+0xc>)
    5f6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5f6e:	4770      	bx	lr
    5f70:	40011000 	.word	0x40011000

00005f74 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5f78:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5f7a:	4a02      	ldr	r2, [pc, #8]	; (5f84 <event_enable+0x10>)
    5f7c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5f80:	4770      	bx	lr
    5f82:	bf00      	nop
    5f84:	40011000 	.word	0x40011000

00005f88 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5f8c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5f8e:	4a02      	ldr	r2, [pc, #8]	; (5f98 <event_disable+0x10>)
    5f90:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5f94:	4770      	bx	lr
    5f96:	bf00      	nop
    5f98:	40011000 	.word	0x40011000

00005f9c <counter>:
     return p_reg->COUNTER;
    5f9c:	4b01      	ldr	r3, [pc, #4]	; (5fa4 <counter+0x8>)
    5f9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    5fa2:	4770      	bx	lr
    5fa4:	40011000 	.word	0x40011000

00005fa8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5fa8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5faa:	2301      	movs	r3, #1
    5fac:	4083      	lsls	r3, r0
    5fae:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fb2:	4a10      	ldr	r2, [pc, #64]	; (5ff4 <compare_int_lock+0x4c>)
    5fb4:	f3bf 8f5b 	dmb	ish
    5fb8:	e852 1f00 	ldrex	r1, [r2]
    5fbc:	ea01 0e0c 	and.w	lr, r1, ip
    5fc0:	e842 e400 	strex	r4, lr, [r2]
    5fc4:	2c00      	cmp	r4, #0
    5fc6:	d1f7      	bne.n	5fb8 <compare_int_lock+0x10>
    5fc8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5fd0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5fd4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5fd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5fdc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5fe0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fe4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5fe8:	420b      	tst	r3, r1
}
    5fea:	bf14      	ite	ne
    5fec:	2001      	movne	r0, #1
    5fee:	2000      	moveq	r0, #0
    5ff0:	bd10      	pop	{r4, pc}
    5ff2:	bf00      	nop
    5ff4:	20000c8c 	.word	0x20000c8c

00005ff8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5ff8:	b570      	push	{r4, r5, r6, lr}
    5ffa:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5ffc:	f006 fb6c 	bl	c6d8 <full_int_lock>
    6000:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6006:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6008:	4a17      	ldr	r2, [pc, #92]	; (6068 <channel_processing_check_and_clear+0x70>)
    600a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    600e:	4213      	tst	r3, r2
    6010:	d105      	bne.n	601e <channel_processing_check_and_clear+0x26>
	bool result = false;
    6012:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6014:	4628      	mov	r0, r5
    6016:	f006 fb68 	bl	c6ea <full_int_unlock>

	return result;
}
    601a:	4630      	mov	r0, r6
    601c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    601e:	2301      	movs	r3, #1
    6020:	40a3      	lsls	r3, r4
    6022:	43db      	mvns	r3, r3
    6024:	4a11      	ldr	r2, [pc, #68]	; (606c <channel_processing_check_and_clear+0x74>)
    6026:	f3bf 8f5b 	dmb	ish
    602a:	e852 1f00 	ldrex	r1, [r2]
    602e:	ea01 0003 	and.w	r0, r1, r3
    6032:	e842 0600 	strex	r6, r0, [r2]
    6036:	2e00      	cmp	r6, #0
    6038:	d1f7      	bne.n	602a <channel_processing_check_and_clear+0x32>
    603a:	f3bf 8f5b 	dmb	ish
    603e:	b959      	cbnz	r1, 6058 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6040:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6044:	009b      	lsls	r3, r3, #2
    6046:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    604c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6050:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6052:	b113      	cbz	r3, 605a <channel_processing_check_and_clear+0x62>
    6054:	2301      	movs	r3, #1
    6056:	e000      	b.n	605a <channel_processing_check_and_clear+0x62>
    6058:	2301      	movs	r3, #1
		if (result) {
    605a:	461e      	mov	r6, r3
    605c:	2b00      	cmp	r3, #0
    605e:	d0d9      	beq.n	6014 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6060:	4620      	mov	r0, r4
    6062:	f006 fb2a 	bl	c6ba <event_clear>
    6066:	e7d5      	b.n	6014 <channel_processing_check_and_clear+0x1c>
    6068:	40011000 	.word	0x40011000
    606c:	20000c88 	.word	0x20000c88

00006070 <compare_int_unlock>:
	if (key) {
    6070:	b901      	cbnz	r1, 6074 <compare_int_unlock+0x4>
}
    6072:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6074:	2301      	movs	r3, #1
    6076:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6078:	4a11      	ldr	r2, [pc, #68]	; (60c0 <compare_int_unlock+0x50>)
    607a:	f3bf 8f5b 	dmb	ish
    607e:	e852 1f00 	ldrex	r1, [r2]
    6082:	4319      	orrs	r1, r3
    6084:	e842 1c00 	strex	ip, r1, [r2]
    6088:	f1bc 0f00 	cmp.w	ip, #0
    608c:	d1f7      	bne.n	607e <compare_int_unlock+0xe>
    608e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6096:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6098:	4a0a      	ldr	r2, [pc, #40]	; (60c4 <compare_int_unlock+0x54>)
    609a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    609e:	f3bf 8f5b 	dmb	ish
    60a2:	4b09      	ldr	r3, [pc, #36]	; (60c8 <compare_int_unlock+0x58>)
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    60aa:	fa23 f000 	lsr.w	r0, r3, r0
    60ae:	f010 0f01 	tst.w	r0, #1
    60b2:	d0de      	beq.n	6072 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60b4:	4b05      	ldr	r3, [pc, #20]	; (60cc <compare_int_unlock+0x5c>)
    60b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    60ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    60be:	e7d8      	b.n	6072 <compare_int_unlock+0x2>
    60c0:	20000c8c 	.word	0x20000c8c
    60c4:	40011000 	.word	0x40011000
    60c8:	20000c88 	.word	0x20000c88
    60cc:	e000e100 	.word	0xe000e100

000060d0 <sys_clock_timeout_handler>:
{
    60d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60d4:	4607      	mov	r7, r0
    60d6:	4614      	mov	r4, r2
    60d8:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    60da:	4610      	mov	r0, r2
    60dc:	4619      	mov	r1, r3
    60de:	f006 faf8 	bl	c6d2 <absolute_time_to_cc>
    60e2:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    60e4:	4b15      	ldr	r3, [pc, #84]	; (613c <sys_clock_timeout_handler+0x6c>)
    60e6:	681a      	ldr	r2, [r3, #0]
    60e8:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    60ea:	601c      	str	r4, [r3, #0]
    60ec:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    60ee:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    60f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    60f6:	d309      	bcc.n	610c <sys_clock_timeout_handler+0x3c>
	return false;
    60f8:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    60fa:	f004 ff65 	bl	afc8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    60fe:	4638      	mov	r0, r7
    6100:	f7ff ff30 	bl	5f64 <get_comparator>
    6104:	42a8      	cmp	r0, r5
    6106:	d00e      	beq.n	6126 <sys_clock_timeout_handler+0x56>
}
    6108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    610c:	4b0c      	ldr	r3, [pc, #48]	; (6140 <sys_clock_timeout_handler+0x70>)
    610e:	681b      	ldr	r3, [r3, #0]
    6110:	0a1a      	lsrs	r2, r3, #8
    6112:	061b      	lsls	r3, r3, #24
    6114:	eb15 0803 	adds.w	r8, r5, r3
    6118:	f142 0900 	adc.w	r9, r2, #0
    611c:	4b09      	ldr	r3, [pc, #36]	; (6144 <sys_clock_timeout_handler+0x74>)
    611e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    6122:	2401      	movs	r4, #1
    6124:	e7e9      	b.n	60fa <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    6126:	b11c      	cbz	r4, 6130 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    6128:	4638      	mov	r0, r7
    612a:	f7ff ff23 	bl	5f74 <event_enable>
}
    612e:	e7eb      	b.n	6108 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6130:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6134:	4638      	mov	r0, r7
    6136:	f7ff ff0b 	bl	5f50 <set_comparator>
    613a:	e7f5      	b.n	6128 <sys_clock_timeout_handler+0x58>
    613c:	20000488 	.word	0x20000488
    6140:	20000c90 	.word	0x20000c90
    6144:	20000470 	.word	0x20000470

00006148 <z_nrf_rtc_timer_read>:
{
    6148:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    614a:	4b0d      	ldr	r3, [pc, #52]	; (6180 <z_nrf_rtc_timer_read+0x38>)
    614c:	681c      	ldr	r4, [r3, #0]
    614e:	0a25      	lsrs	r5, r4, #8
    6150:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6152:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    6156:	f7ff ff21 	bl	5f9c <counter>
    615a:	4603      	mov	r3, r0
	val += cntr;
    615c:	1900      	adds	r0, r0, r4
    615e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6166:	d20a      	bcs.n	617e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6168:	4b06      	ldr	r3, [pc, #24]	; (6184 <z_nrf_rtc_timer_read+0x3c>)
    616a:	e9d3 2300 	ldrd	r2, r3, [r3]
    616e:	4290      	cmp	r0, r2
    6170:	eb71 0303 	sbcs.w	r3, r1, r3
    6174:	d203      	bcs.n	617e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    6176:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    617a:	f141 0100 	adc.w	r1, r1, #0
}
    617e:	bd38      	pop	{r3, r4, r5, pc}
    6180:	20000c90 	.word	0x20000c90
    6184:	20000470 	.word	0x20000470

00006188 <compare_set_nolocks>:
{
    6188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    618a:	4606      	mov	r6, r0
    618c:	4614      	mov	r4, r2
    618e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6190:	4610      	mov	r0, r2
    6192:	4619      	mov	r1, r3
    6194:	f006 fa9d 	bl	c6d2 <absolute_time_to_cc>
    6198:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    619a:	f7ff ffd5 	bl	6148 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    619e:	42a0      	cmp	r0, r4
    61a0:	eb71 0305 	sbcs.w	r3, r1, r5
    61a4:	d21d      	bcs.n	61e2 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    61a6:	1a23      	subs	r3, r4, r0
    61a8:	eb65 0101 	sbc.w	r1, r5, r1
    61ac:	4a1b      	ldr	r2, [pc, #108]	; (621c <compare_set_nolocks+0x94>)
    61ae:	4293      	cmp	r3, r2
    61b0:	f171 0300 	sbcs.w	r3, r1, #0
    61b4:	d22f      	bcs.n	6216 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    61b6:	4b1a      	ldr	r3, [pc, #104]	; (6220 <compare_set_nolocks+0x98>)
    61b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    61bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    61c0:	42ab      	cmp	r3, r5
    61c2:	bf08      	it	eq
    61c4:	42a2      	cmpeq	r2, r4
    61c6:	d01a      	beq.n	61fe <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    61c8:	4639      	mov	r1, r7
    61ca:	4630      	mov	r0, r6
    61cc:	f006 fa92 	bl	c6f4 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    61d0:	4639      	mov	r1, r7
    61d2:	f006 fa6e 	bl	c6b2 <counter_sub>
    61d6:	1900      	adds	r0, r0, r4
    61d8:	f145 0300 	adc.w	r3, r5, #0
    61dc:	4604      	mov	r4, r0
    61de:	461d      	mov	r5, r3
    61e0:	e00d      	b.n	61fe <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    61e2:	2301      	movs	r3, #1
    61e4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    61e6:	4a0f      	ldr	r2, [pc, #60]	; (6224 <compare_set_nolocks+0x9c>)
    61e8:	f3bf 8f5b 	dmb	ish
    61ec:	e852 1f00 	ldrex	r1, [r2]
    61f0:	4319      	orrs	r1, r3
    61f2:	e842 1000 	strex	r0, r1, [r2]
    61f6:	2800      	cmp	r0, #0
    61f8:	d1f8      	bne.n	61ec <compare_set_nolocks+0x64>
    61fa:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    61fe:	4b08      	ldr	r3, [pc, #32]	; (6220 <compare_set_nolocks+0x98>)
    6200:	0132      	lsls	r2, r6, #4
    6202:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6206:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    620a:	9906      	ldr	r1, [sp, #24]
    620c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    620e:	9b07      	ldr	r3, [sp, #28]
    6210:	6073      	str	r3, [r6, #4]
	return ret;
    6212:	2000      	movs	r0, #0
}
    6214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    6216:	f06f 0015 	mvn.w	r0, #21
    621a:	e7fb      	b.n	6214 <compare_set_nolocks+0x8c>
    621c:	01000001 	.word	0x01000001
    6220:	20000478 	.word	0x20000478
    6224:	20000c88 	.word	0x20000c88

00006228 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6228:	b530      	push	{r4, r5, lr}
    622a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    622c:	2300      	movs	r3, #0
    622e:	4a1d      	ldr	r2, [pc, #116]	; (62a4 <sys_clock_driver_init+0x7c>)
    6230:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6234:	2b00      	cmp	r3, #0
    6236:	dd24      	ble.n	6282 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    6238:	4c1a      	ldr	r4, [pc, #104]	; (62a4 <sys_clock_driver_init+0x7c>)
    623a:	2502      	movs	r5, #2
    623c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6240:	4b19      	ldr	r3, [pc, #100]	; (62a8 <sys_clock_driver_init+0x80>)
    6242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6246:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    624a:	2200      	movs	r2, #0
    624c:	2101      	movs	r1, #1
    624e:	2011      	movs	r0, #17
    6250:	f7fd fed2 	bl	3ff8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6254:	2011      	movs	r0, #17
    6256:	f7fd feb3 	bl	3fc0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    625a:	2301      	movs	r3, #1
    625c:	60a3      	str	r3, [r4, #8]
    625e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6260:	4a12      	ldr	r2, [pc, #72]	; (62ac <sys_clock_driver_init+0x84>)
    6262:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6264:	2400      	movs	r4, #0
    6266:	9401      	str	r4, [sp, #4]
    6268:	4b11      	ldr	r3, [pc, #68]	; (62b0 <sys_clock_driver_init+0x88>)
    626a:	9300      	str	r3, [sp, #0]
    626c:	4a11      	ldr	r2, [pc, #68]	; (62b4 <sys_clock_driver_init+0x8c>)
    626e:	2300      	movs	r3, #0
    6270:	4620      	mov	r0, r4
    6272:	f006 fa7a 	bl	c76a <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6276:	4628      	mov	r0, r5
    6278:	f7ff fabc 	bl	57f4 <z_nrf_clock_control_lf_on>

	return 0;
}
    627c:	4620      	mov	r0, r4
    627e:	b003      	add	sp, #12
    6280:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6282:	4a0d      	ldr	r2, [pc, #52]	; (62b8 <sys_clock_driver_init+0x90>)
    6284:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    628c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6290:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6298:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    629a:	4902      	ldr	r1, [pc, #8]	; (62a4 <sys_clock_driver_init+0x7c>)
    629c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    62a0:	3301      	adds	r3, #1
    62a2:	e7c7      	b.n	6234 <sys_clock_driver_init+0xc>
    62a4:	40011000 	.word	0x40011000
    62a8:	e000e100 	.word	0xe000e100
    62ac:	20000c8c 	.word	0x20000c8c
    62b0:	000060d1 	.word	0x000060d1
    62b4:	007fffff 	.word	0x007fffff
    62b8:	20000478 	.word	0x20000478

000062bc <process_channel>:
{
    62bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c0:	b082      	sub	sp, #8
    62c2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    62c4:	f7ff fe98 	bl	5ff8 <channel_processing_check_and_clear>
    62c8:	b910      	cbnz	r0, 62d0 <process_channel+0x14>
}
    62ca:	b002      	add	sp, #8
    62cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    62d0:	f7ff ff3a 	bl	6148 <z_nrf_rtc_timer_read>
    62d4:	4682      	mov	sl, r0
    62d6:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    62d8:	f006 f9fe 	bl	c6d8 <full_int_lock>
    62dc:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    62de:	4b13      	ldr	r3, [pc, #76]	; (632c <process_channel+0x70>)
    62e0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    62e4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    62e8:	45c2      	cmp	sl, r8
    62ea:	eb76 0309 	sbcs.w	r3, r6, r9
    62ee:	d20b      	bcs.n	6308 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    62f0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    62f2:	4628      	mov	r0, r5
    62f4:	f006 f9f9 	bl	c6ea <full_int_unlock>
		if (handler) {
    62f8:	2e00      	cmp	r6, #0
    62fa:	d0e6      	beq.n	62ca <process_channel+0xe>
			handler(chan, expire_time, user_context);
    62fc:	9700      	str	r7, [sp, #0]
    62fe:	4642      	mov	r2, r8
    6300:	464b      	mov	r3, r9
    6302:	4620      	mov	r0, r4
    6304:	47b0      	blx	r6
}
    6306:	e7e0      	b.n	62ca <process_channel+0xe>
			handler = cc_data[chan].callback;
    6308:	4a08      	ldr	r2, [pc, #32]	; (632c <process_channel+0x70>)
    630a:	0123      	lsls	r3, r4, #4
    630c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6310:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    6312:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    6314:	2000      	movs	r0, #0
    6316:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    631c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6320:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    6324:	4620      	mov	r0, r4
    6326:	f7ff fe2f 	bl	5f88 <event_disable>
    632a:	e7e2      	b.n	62f2 <process_channel+0x36>
    632c:	20000478 	.word	0x20000478

00006330 <rtc_nrf_isr>:
{
    6330:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    6332:	4b0e      	ldr	r3, [pc, #56]	; (636c <rtc_nrf_isr+0x3c>)
    6334:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6338:	f013 0f02 	tst.w	r3, #2
    633c:	d00d      	beq.n	635a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    633e:	4b0b      	ldr	r3, [pc, #44]	; (636c <rtc_nrf_isr+0x3c>)
    6340:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    6344:	b14b      	cbz	r3, 635a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6346:	4b09      	ldr	r3, [pc, #36]	; (636c <rtc_nrf_isr+0x3c>)
    6348:	2200      	movs	r2, #0
    634a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    634e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    6352:	4a07      	ldr	r2, [pc, #28]	; (6370 <rtc_nrf_isr+0x40>)
    6354:	6813      	ldr	r3, [r2, #0]
    6356:	3301      	adds	r3, #1
    6358:	6013      	str	r3, [r2, #0]
{
    635a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    635c:	2c00      	cmp	r4, #0
    635e:	dd00      	ble.n	6362 <rtc_nrf_isr+0x32>
}
    6360:	bd10      	pop	{r4, pc}
		process_channel(chan);
    6362:	4620      	mov	r0, r4
    6364:	f7ff ffaa 	bl	62bc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6368:	3401      	adds	r4, #1
    636a:	e7f7      	b.n	635c <rtc_nrf_isr+0x2c>
    636c:	40011000 	.word	0x40011000
    6370:	20000c90 	.word	0x20000c90

00006374 <sys_clock_set_timeout>:
{
    6374:	b510      	push	{r4, lr}
    6376:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6378:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    637c:	d006      	beq.n	638c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    637e:	2801      	cmp	r0, #1
    6380:	dd06      	ble.n	6390 <sys_clock_set_timeout+0x1c>
    6382:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6386:	da05      	bge.n	6394 <sys_clock_set_timeout+0x20>
    6388:	1e44      	subs	r4, r0, #1
    638a:	e004      	b.n	6396 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    638c:	480f      	ldr	r0, [pc, #60]	; (63cc <sys_clock_set_timeout+0x58>)
    638e:	e7f8      	b.n	6382 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6390:	2400      	movs	r4, #0
    6392:	e000      	b.n	6396 <sys_clock_set_timeout+0x22>
    6394:	4c0d      	ldr	r4, [pc, #52]	; (63cc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6396:	f7ff fed7 	bl	6148 <z_nrf_rtc_timer_read>
    639a:	4b0d      	ldr	r3, [pc, #52]	; (63d0 <sys_clock_set_timeout+0x5c>)
    639c:	6819      	ldr	r1, [r3, #0]
    639e:	685b      	ldr	r3, [r3, #4]
    63a0:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    63a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    63a6:	d300      	bcc.n	63aa <sys_clock_set_timeout+0x36>
		ticks = 0;
    63a8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    63aa:	4420      	add	r0, r4
    63ac:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    63ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    63b2:	d300      	bcc.n	63b6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    63b4:	4a05      	ldr	r2, [pc, #20]	; (63cc <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    63b6:	2000      	movs	r0, #0
    63b8:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    63ba:	9001      	str	r0, [sp, #4]
    63bc:	4905      	ldr	r1, [pc, #20]	; (63d4 <sys_clock_set_timeout+0x60>)
    63be:	9100      	str	r1, [sp, #0]
    63c0:	f143 0300 	adc.w	r3, r3, #0
    63c4:	f006 f9d1 	bl	c76a <compare_set>
}
    63c8:	b002      	add	sp, #8
    63ca:	bd10      	pop	{r4, pc}
    63cc:	007fffff 	.word	0x007fffff
    63d0:	20000488 	.word	0x20000488
    63d4:	000060d1 	.word	0x000060d1

000063d8 <sys_clock_elapsed>:
{
    63d8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    63da:	f7ff feb5 	bl	6148 <z_nrf_rtc_timer_read>
    63de:	4b02      	ldr	r3, [pc, #8]	; (63e8 <sys_clock_elapsed+0x10>)
    63e0:	681b      	ldr	r3, [r3, #0]
}
    63e2:	1ac0      	subs	r0, r0, r3
    63e4:	bd08      	pop	{r3, pc}
    63e6:	bf00      	nop
    63e8:	20000488 	.word	0x20000488

000063ec <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    63ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63f0:	460c      	mov	r4, r1
    63f2:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    63f4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    63f8:	d002      	beq.n	6400 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    63fa:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    63fe:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    6400:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    6404:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    6408:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    640c:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    6410:	f010 0f20 	tst.w	r0, #32
    6414:	d01d      	beq.n	6452 <nrf_pin_configure+0x66>
    6416:	b1fb      	cbz	r3, 6458 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    6418:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    641c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6420:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6422:	f013 0f01 	tst.w	r3, #1
    6426:	d019      	beq.n	645c <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    6428:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    642c:	096d      	lsrs	r5, r5, #5
    642e:	d023      	beq.n	6478 <nrf_pin_configure+0x8c>
    6430:	bb2d      	cbnz	r5, 647e <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    6432:	4d19      	ldr	r5, [pc, #100]	; (6498 <nrf_pin_configure+0xac>)
    6434:	f240 232e 	movw	r3, #558	; 0x22e
    6438:	462a      	mov	r2, r5
    643a:	4918      	ldr	r1, [pc, #96]	; (649c <nrf_pin_configure+0xb0>)
    643c:	4818      	ldr	r0, [pc, #96]	; (64a0 <nrf_pin_configure+0xb4>)
    643e:	f005 fc17 	bl	bc70 <assert_print>
    6442:	f240 212e 	movw	r1, #558	; 0x22e
    6446:	4628      	mov	r0, r5
    6448:	f005 fc0b 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    644c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6450:	e016      	b.n	6480 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    6452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6456:	e7e1      	b.n	641c <nrf_pin_configure+0x30>
    switch (port)
    6458:	2300      	movs	r3, #0
    645a:	e7df      	b.n	641c <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    645c:	4e0e      	ldr	r6, [pc, #56]	; (6498 <nrf_pin_configure+0xac>)
    645e:	f240 2329 	movw	r3, #553	; 0x229
    6462:	4632      	mov	r2, r6
    6464:	490f      	ldr	r1, [pc, #60]	; (64a4 <nrf_pin_configure+0xb8>)
    6466:	480e      	ldr	r0, [pc, #56]	; (64a0 <nrf_pin_configure+0xb4>)
    6468:	f005 fc02 	bl	bc70 <assert_print>
    646c:	f240 2129 	movw	r1, #553	; 0x229
    6470:	4630      	mov	r0, r6
    6472:	f005 fbf6 	bl	bc62 <assert_post_action>
    6476:	e7d7      	b.n	6428 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    6478:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    647c:	e000      	b.n	6480 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    647e:	4b0a      	ldr	r3, [pc, #40]	; (64a8 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6480:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    6484:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6488:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    648c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6490:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    6494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6498:	0000e8ec 	.word	0x0000e8ec
    649c:	0000d1f0 	.word	0x0000d1f0
    64a0:	0000d02c 	.word	0x0000d02c
    64a4:	0000e920 	.word	0x0000e920
    64a8:	50000300 	.word	0x50000300

000064ac <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    64ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64b0:	4605      	mov	r5, r0
    64b2:	460e      	mov	r6, r1
    64b4:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    64b6:	2400      	movs	r4, #0
    64b8:	e04e      	b.n	6558 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    64ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64be:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    64c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    64c6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    64ca:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    64ce:	f013 0f20 	tst.w	r3, #32
    64d2:	d01f      	beq.n	6514 <pinctrl_configure_pins+0x68>
    64d4:	b109      	cbz	r1, 64da <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    64d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    64da:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    64de:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    64e0:	f012 0f01 	tst.w	r2, #1
    64e4:	d019      	beq.n	651a <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    64e6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64ea:	ea5f 1359 	movs.w	r3, r9, lsr #5
    64ee:	d023      	beq.n	6538 <pinctrl_configure_pins+0x8c>
    64f0:	bb2b      	cbnz	r3, 653e <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    64f2:	f8df 9344 	ldr.w	r9, [pc, #836]	; 6838 <pinctrl_configure_pins+0x38c>
    64f6:	f240 232e 	movw	r3, #558	; 0x22e
    64fa:	464a      	mov	r2, r9
    64fc:	49cf      	ldr	r1, [pc, #828]	; (683c <pinctrl_configure_pins+0x390>)
    64fe:	48d0      	ldr	r0, [pc, #832]	; (6840 <pinctrl_configure_pins+0x394>)
    6500:	f005 fbb6 	bl	bc70 <assert_print>
    6504:	f240 212e 	movw	r1, #558	; 0x22e
    6508:	4648      	mov	r0, r9
    650a:	f005 fbaa 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    650e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6512:	e015      	b.n	6540 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    6514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6518:	e7df      	b.n	64da <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    651a:	f8df a31c 	ldr.w	sl, [pc, #796]	; 6838 <pinctrl_configure_pins+0x38c>
    651e:	f240 2329 	movw	r3, #553	; 0x229
    6522:	4652      	mov	r2, sl
    6524:	49c7      	ldr	r1, [pc, #796]	; (6844 <pinctrl_configure_pins+0x398>)
    6526:	48c6      	ldr	r0, [pc, #792]	; (6840 <pinctrl_configure_pins+0x394>)
    6528:	f005 fba2 	bl	bc70 <assert_print>
    652c:	f240 2129 	movw	r1, #553	; 0x229
    6530:	4650      	mov	r0, sl
    6532:	f005 fb96 	bl	bc62 <assert_post_action>
    6536:	e7d6      	b.n	64e6 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    6538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    653c:	e000      	b.n	6540 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    653e:	4ac2      	ldr	r2, [pc, #776]	; (6848 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6540:	2101      	movs	r1, #1
    6542:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6546:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    654a:	460a      	mov	r2, r1
    654c:	f855 0008 	ldr.w	r0, [r5, r8]
    6550:	f7ff ff4c 	bl	63ec <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6554:	3401      	adds	r4, #1
    6556:	b2e4      	uxtb	r4, r4
    6558:	42b4      	cmp	r4, r6
    655a:	f080 841e 	bcs.w	6d9a <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    655e:	ea4f 0884 	mov.w	r8, r4, lsl #2
    6562:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6566:	0c1a      	lsrs	r2, r3, #16
    6568:	2a22      	cmp	r2, #34	; 0x22
    656a:	f200 8418 	bhi.w	6d9e <pinctrl_configure_pins+0x8f2>
    656e:	a101      	add	r1, pc, #4	; (adr r1, 6574 <pinctrl_configure_pins+0xc8>)
    6570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6574:	000064bb 	.word	0x000064bb
    6578:	00006601 	.word	0x00006601
    657c:	00006617 	.word	0x00006617
    6580:	000066b7 	.word	0x000066b7
    6584:	000066cd 	.word	0x000066cd
    6588:	0000676d 	.word	0x0000676d
    658c:	0000680d 	.word	0x0000680d
    6590:	00006d9f 	.word	0x00006d9f
    6594:	00006d9f 	.word	0x00006d9f
    6598:	00006d9f 	.word	0x00006d9f
    659c:	00006d9f 	.word	0x00006d9f
    65a0:	00006823 	.word	0x00006823
    65a4:	0000684d 	.word	0x0000684d
    65a8:	00006d9f 	.word	0x00006d9f
    65ac:	00006d9f 	.word	0x00006d9f
    65b0:	00006d9f 	.word	0x00006d9f
    65b4:	00006d9f 	.word	0x00006d9f
    65b8:	00006d9f 	.word	0x00006d9f
    65bc:	00006d9f 	.word	0x00006d9f
    65c0:	00006d9f 	.word	0x00006d9f
    65c4:	00006d9f 	.word	0x00006d9f
    65c8:	00006d9f 	.word	0x00006d9f
    65cc:	00006863 	.word	0x00006863
    65d0:	00006989 	.word	0x00006989
    65d4:	00006aaf 	.word	0x00006aaf
    65d8:	00006beb 	.word	0x00006beb
    65dc:	00006d9f 	.word	0x00006d9f
    65e0:	00006d9f 	.word	0x00006d9f
    65e4:	00006d9f 	.word	0x00006d9f
    65e8:	00006d11 	.word	0x00006d11
    65ec:	00006d27 	.word	0x00006d27
    65f0:	00006d3d 	.word	0x00006d3d
    65f4:	00006d53 	.word	0x00006d53
    65f8:	00006d6b 	.word	0x00006d6b
    65fc:	00006d83 	.word	0x00006d83
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6604:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6608:	2200      	movs	r2, #0
    660a:	4611      	mov	r1, r2
    660c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6610:	f7ff feec 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6614:	e79e      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    661a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    661e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6622:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6626:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    662a:	f013 0f20 	tst.w	r3, #32
    662e:	d01f      	beq.n	6670 <pinctrl_configure_pins+0x1c4>
    6630:	b30a      	cbz	r2, 6676 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    6632:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6636:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    663a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    663c:	f013 0f01 	tst.w	r3, #1
    6640:	d01b      	beq.n	667a <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    6642:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6646:	ea5f 1359 	movs.w	r3, r9, lsr #5
    664a:	d025      	beq.n	6698 <pinctrl_configure_pins+0x1ec>
    664c:	bb3b      	cbnz	r3, 669e <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    664e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 6838 <pinctrl_configure_pins+0x38c>
    6652:	f240 232e 	movw	r3, #558	; 0x22e
    6656:	464a      	mov	r2, r9
    6658:	4978      	ldr	r1, [pc, #480]	; (683c <pinctrl_configure_pins+0x390>)
    665a:	4879      	ldr	r0, [pc, #484]	; (6840 <pinctrl_configure_pins+0x394>)
    665c:	f005 fb08 	bl	bc70 <assert_print>
    6660:	f240 212e 	movw	r1, #558	; 0x22e
    6664:	4648      	mov	r0, r9
    6666:	f005 fafc 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    666a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    666e:	e017      	b.n	66a0 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    6670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6674:	e7df      	b.n	6636 <pinctrl_configure_pins+0x18a>
    switch (port)
    6676:	2300      	movs	r3, #0
    6678:	e7dd      	b.n	6636 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    667a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 6838 <pinctrl_configure_pins+0x38c>
    667e:	f240 2329 	movw	r3, #553	; 0x229
    6682:	4652      	mov	r2, sl
    6684:	496f      	ldr	r1, [pc, #444]	; (6844 <pinctrl_configure_pins+0x398>)
    6686:	486e      	ldr	r0, [pc, #440]	; (6840 <pinctrl_configure_pins+0x394>)
    6688:	f005 faf2 	bl	bc70 <assert_print>
    668c:	f240 2129 	movw	r1, #553	; 0x229
    6690:	4650      	mov	r0, sl
    6692:	f005 fae6 	bl	bc62 <assert_post_action>
    6696:	e7d4      	b.n	6642 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    6698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    669c:	e000      	b.n	66a0 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    669e:	4a6a      	ldr	r2, [pc, #424]	; (6848 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    66a0:	2101      	movs	r1, #1
    66a2:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    66a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    66aa:	460a      	mov	r2, r1
    66ac:	f855 0008 	ldr.w	r0, [r5, r8]
    66b0:	f7ff fe9c 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    66b4:	e74e      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    66b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    66ba:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    66be:	2200      	movs	r2, #0
    66c0:	4611      	mov	r1, r2
    66c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    66c6:	f7ff fe91 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    66ca:	e743      	b.n	6554 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    66cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    66d0:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    66d4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    66d8:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    66dc:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    66e0:	f013 0f20 	tst.w	r3, #32
    66e4:	d01f      	beq.n	6726 <pinctrl_configure_pins+0x27a>
    66e6:	b30a      	cbz	r2, 672c <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    66e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    66ec:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    66f0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66f2:	f013 0f01 	tst.w	r3, #1
    66f6:	d01b      	beq.n	6730 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    66f8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66fc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6700:	d025      	beq.n	674e <pinctrl_configure_pins+0x2a2>
    6702:	bb3b      	cbnz	r3, 6754 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    6704:	f8df 9130 	ldr.w	r9, [pc, #304]	; 6838 <pinctrl_configure_pins+0x38c>
    6708:	f240 232e 	movw	r3, #558	; 0x22e
    670c:	464a      	mov	r2, r9
    670e:	494b      	ldr	r1, [pc, #300]	; (683c <pinctrl_configure_pins+0x390>)
    6710:	484b      	ldr	r0, [pc, #300]	; (6840 <pinctrl_configure_pins+0x394>)
    6712:	f005 faad 	bl	bc70 <assert_print>
    6716:	f240 212e 	movw	r1, #558	; 0x22e
    671a:	4648      	mov	r0, r9
    671c:	f005 faa1 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6724:	e017      	b.n	6756 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    6726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    672a:	e7df      	b.n	66ec <pinctrl_configure_pins+0x240>
    switch (port)
    672c:	2300      	movs	r3, #0
    672e:	e7dd      	b.n	66ec <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6730:	f8df a104 	ldr.w	sl, [pc, #260]	; 6838 <pinctrl_configure_pins+0x38c>
    6734:	f240 2329 	movw	r3, #553	; 0x229
    6738:	4652      	mov	r2, sl
    673a:	4942      	ldr	r1, [pc, #264]	; (6844 <pinctrl_configure_pins+0x398>)
    673c:	4840      	ldr	r0, [pc, #256]	; (6840 <pinctrl_configure_pins+0x394>)
    673e:	f005 fa97 	bl	bc70 <assert_print>
    6742:	f240 2129 	movw	r1, #553	; 0x229
    6746:	4650      	mov	r0, sl
    6748:	f005 fa8b 	bl	bc62 <assert_post_action>
    674c:	e7d4      	b.n	66f8 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    674e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6752:	e000      	b.n	6756 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6754:	4a3c      	ldr	r2, [pc, #240]	; (6848 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6756:	2101      	movs	r1, #1
    6758:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    675c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6760:	2200      	movs	r2, #0
    6762:	f855 0008 	ldr.w	r0, [r5, r8]
    6766:	f7ff fe41 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    676a:	e6f3      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    676c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6770:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6774:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6778:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    677c:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6780:	f013 0f20 	tst.w	r3, #32
    6784:	d01f      	beq.n	67c6 <pinctrl_configure_pins+0x31a>
    6786:	b30a      	cbz	r2, 67cc <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    6788:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    678c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6790:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6792:	f013 0f01 	tst.w	r3, #1
    6796:	d01b      	beq.n	67d0 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    6798:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    679c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    67a0:	d025      	beq.n	67ee <pinctrl_configure_pins+0x342>
    67a2:	bb3b      	cbnz	r3, 67f4 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    67a4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6838 <pinctrl_configure_pins+0x38c>
    67a8:	f240 232e 	movw	r3, #558	; 0x22e
    67ac:	464a      	mov	r2, r9
    67ae:	4923      	ldr	r1, [pc, #140]	; (683c <pinctrl_configure_pins+0x390>)
    67b0:	4823      	ldr	r0, [pc, #140]	; (6840 <pinctrl_configure_pins+0x394>)
    67b2:	f005 fa5d 	bl	bc70 <assert_print>
    67b6:	f240 212e 	movw	r1, #558	; 0x22e
    67ba:	4648      	mov	r0, r9
    67bc:	f005 fa51 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    67c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    67c4:	e017      	b.n	67f6 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    67c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    67ca:	e7df      	b.n	678c <pinctrl_configure_pins+0x2e0>
    switch (port)
    67cc:	2300      	movs	r3, #0
    67ce:	e7dd      	b.n	678c <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    67d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 6838 <pinctrl_configure_pins+0x38c>
    67d4:	f240 2329 	movw	r3, #553	; 0x229
    67d8:	4652      	mov	r2, sl
    67da:	491a      	ldr	r1, [pc, #104]	; (6844 <pinctrl_configure_pins+0x398>)
    67dc:	4818      	ldr	r0, [pc, #96]	; (6840 <pinctrl_configure_pins+0x394>)
    67de:	f005 fa47 	bl	bc70 <assert_print>
    67e2:	f240 2129 	movw	r1, #553	; 0x229
    67e6:	4650      	mov	r0, sl
    67e8:	f005 fa3b 	bl	bc62 <assert_post_action>
    67ec:	e7d4      	b.n	6798 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    67ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    67f2:	e000      	b.n	67f6 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67f4:	4a14      	ldr	r2, [pc, #80]	; (6848 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    67f6:	2101      	movs	r1, #1
    67f8:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    67fc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6800:	460a      	mov	r2, r1
    6802:	f855 0008 	ldr.w	r0, [r5, r8]
    6806:	f7ff fdf1 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    680a:	e6a3      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    680c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6810:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6814:	2200      	movs	r2, #0
    6816:	4611      	mov	r1, r2
    6818:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    681c:	f7ff fde6 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6820:	e698      	b.n	6554 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6826:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    682a:	2200      	movs	r2, #0
    682c:	4611      	mov	r1, r2
    682e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6832:	f7ff fddb 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6836:	e68d      	b.n	6554 <pinctrl_configure_pins+0xa8>
    6838:	0000e8ec 	.word	0x0000e8ec
    683c:	0000d1f0 	.word	0x0000d1f0
    6840:	0000d02c 	.word	0x0000d02c
    6844:	0000e920 	.word	0x0000e920
    6848:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    684c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6850:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6854:	2200      	movs	r2, #0
    6856:	4611      	mov	r1, r2
    6858:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    685c:	f7ff fdc6 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6860:	e678      	b.n	6554 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6866:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    686a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    686e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6872:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6876:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    687a:	d144      	bne.n	6906 <pinctrl_configure_pins+0x45a>
    switch (port)
    687c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6880:	d01f      	beq.n	68c2 <pinctrl_configure_pins+0x416>
    6882:	b10b      	cbz	r3, 6888 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    6884:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6888:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    688c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    688e:	f012 0f01 	tst.w	r2, #1
    6892:	d019      	beq.n	68c8 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    6894:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6898:	ea5f 1359 	movs.w	r3, r9, lsr #5
    689c:	d023      	beq.n	68e6 <pinctrl_configure_pins+0x43a>
    689e:	bb2b      	cbnz	r3, 68ec <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    68a0:	f8df 9300 	ldr.w	r9, [pc, #768]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    68a4:	f240 232e 	movw	r3, #558	; 0x22e
    68a8:	464a      	mov	r2, r9
    68aa:	49bf      	ldr	r1, [pc, #764]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    68ac:	48bf      	ldr	r0, [pc, #764]	; (6bac <pinctrl_configure_pins+0x700>)
    68ae:	f005 f9df 	bl	bc70 <assert_print>
    68b2:	f240 212e 	movw	r1, #558	; 0x22e
    68b6:	4648      	mov	r0, r9
    68b8:	f005 f9d3 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    68bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    68c0:	e015      	b.n	68ee <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    68c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    68c6:	e7df      	b.n	6888 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68c8:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    68cc:	f240 2329 	movw	r3, #553	; 0x229
    68d0:	4652      	mov	r2, sl
    68d2:	49b7      	ldr	r1, [pc, #732]	; (6bb0 <pinctrl_configure_pins+0x704>)
    68d4:	48b5      	ldr	r0, [pc, #724]	; (6bac <pinctrl_configure_pins+0x700>)
    68d6:	f005 f9cb 	bl	bc70 <assert_print>
    68da:	f240 2129 	movw	r1, #553	; 0x229
    68de:	4650      	mov	r0, sl
    68e0:	f005 f9bf 	bl	bc62 <assert_post_action>
    68e4:	e7d6      	b.n	6894 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    68e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    68ea:	e000      	b.n	68ee <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68ec:	4ab1      	ldr	r2, [pc, #708]	; (6bb4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    68ee:	2301      	movs	r3, #1
    68f0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    68f4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    68f8:	2201      	movs	r2, #1
    68fa:	4611      	mov	r1, r2
    68fc:	f855 0008 	ldr.w	r0, [r5, r8]
    6900:	f7ff fd74 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6904:	e626      	b.n	6554 <pinctrl_configure_pins+0xa8>
    switch (port)
    6906:	ea5f 1359 	movs.w	r3, r9, lsr #5
    690a:	d01f      	beq.n	694c <pinctrl_configure_pins+0x4a0>
    690c:	b30b      	cbz	r3, 6952 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    690e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6912:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6916:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6918:	f013 0f01 	tst.w	r3, #1
    691c:	d01b      	beq.n	6956 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    691e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6922:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6926:	d025      	beq.n	6974 <pinctrl_configure_pins+0x4c8>
    6928:	bb3b      	cbnz	r3, 697a <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    692a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    692e:	f240 232e 	movw	r3, #558	; 0x22e
    6932:	464a      	mov	r2, r9
    6934:	499c      	ldr	r1, [pc, #624]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    6936:	489d      	ldr	r0, [pc, #628]	; (6bac <pinctrl_configure_pins+0x700>)
    6938:	f005 f99a 	bl	bc70 <assert_print>
    693c:	f240 212e 	movw	r1, #558	; 0x22e
    6940:	4648      	mov	r0, r9
    6942:	f005 f98e 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    694a:	e017      	b.n	697c <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    694c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6950:	e7df      	b.n	6912 <pinctrl_configure_pins+0x466>
    switch (port)
    6952:	2300      	movs	r3, #0
    6954:	e7dd      	b.n	6912 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6956:	f8df a24c 	ldr.w	sl, [pc, #588]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    695a:	f240 2329 	movw	r3, #553	; 0x229
    695e:	4652      	mov	r2, sl
    6960:	4993      	ldr	r1, [pc, #588]	; (6bb0 <pinctrl_configure_pins+0x704>)
    6962:	4892      	ldr	r0, [pc, #584]	; (6bac <pinctrl_configure_pins+0x700>)
    6964:	f005 f984 	bl	bc70 <assert_print>
    6968:	f240 2129 	movw	r1, #553	; 0x229
    696c:	4650      	mov	r0, sl
    696e:	f005 f978 	bl	bc62 <assert_post_action>
    6972:	e7d4      	b.n	691e <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    6974:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6978:	e000      	b.n	697c <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    697a:	4a8e      	ldr	r2, [pc, #568]	; (6bb4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    697c:	2301      	movs	r3, #1
    697e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6982:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6986:	e7b7      	b.n	68f8 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    698c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6990:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6994:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6998:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    699c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    69a0:	d144      	bne.n	6a2c <pinctrl_configure_pins+0x580>
    switch (port)
    69a2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    69a6:	d01f      	beq.n	69e8 <pinctrl_configure_pins+0x53c>
    69a8:	b10b      	cbz	r3, 69ae <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    69aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    69ae:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    69b2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69b4:	f012 0f01 	tst.w	r2, #1
    69b8:	d019      	beq.n	69ee <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    69ba:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69be:	ea5f 1359 	movs.w	r3, r9, lsr #5
    69c2:	d023      	beq.n	6a0c <pinctrl_configure_pins+0x560>
    69c4:	bb2b      	cbnz	r3, 6a12 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    69c6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    69ca:	f240 232e 	movw	r3, #558	; 0x22e
    69ce:	464a      	mov	r2, r9
    69d0:	4975      	ldr	r1, [pc, #468]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    69d2:	4876      	ldr	r0, [pc, #472]	; (6bac <pinctrl_configure_pins+0x700>)
    69d4:	f005 f94c 	bl	bc70 <assert_print>
    69d8:	f240 212e 	movw	r1, #558	; 0x22e
    69dc:	4648      	mov	r0, r9
    69de:	f005 f940 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    69e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    69e6:	e015      	b.n	6a14 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    69e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    69ec:	e7df      	b.n	69ae <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69ee:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    69f2:	f240 2329 	movw	r3, #553	; 0x229
    69f6:	4652      	mov	r2, sl
    69f8:	496d      	ldr	r1, [pc, #436]	; (6bb0 <pinctrl_configure_pins+0x704>)
    69fa:	486c      	ldr	r0, [pc, #432]	; (6bac <pinctrl_configure_pins+0x700>)
    69fc:	f005 f938 	bl	bc70 <assert_print>
    6a00:	f240 2129 	movw	r1, #553	; 0x229
    6a04:	4650      	mov	r0, sl
    6a06:	f005 f92c 	bl	bc62 <assert_post_action>
    6a0a:	e7d6      	b.n	69ba <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    6a0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a10:	e000      	b.n	6a14 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a12:	4a68      	ldr	r2, [pc, #416]	; (6bb4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6a14:	2301      	movs	r3, #1
    6a16:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6a1a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6a1e:	2201      	movs	r2, #1
    6a20:	4611      	mov	r1, r2
    6a22:	f855 0008 	ldr.w	r0, [r5, r8]
    6a26:	f7ff fce1 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6a2a:	e593      	b.n	6554 <pinctrl_configure_pins+0xa8>
    switch (port)
    6a2c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6a30:	d01f      	beq.n	6a72 <pinctrl_configure_pins+0x5c6>
    6a32:	b30b      	cbz	r3, 6a78 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    6a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6a38:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6a3c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a3e:	f013 0f01 	tst.w	r3, #1
    6a42:	d01b      	beq.n	6a7c <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    6a44:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a48:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6a4c:	d025      	beq.n	6a9a <pinctrl_configure_pins+0x5ee>
    6a4e:	bb3b      	cbnz	r3, 6aa0 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    6a50:	f8df 9150 	ldr.w	r9, [pc, #336]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    6a54:	f240 232e 	movw	r3, #558	; 0x22e
    6a58:	464a      	mov	r2, r9
    6a5a:	4953      	ldr	r1, [pc, #332]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    6a5c:	4853      	ldr	r0, [pc, #332]	; (6bac <pinctrl_configure_pins+0x700>)
    6a5e:	f005 f907 	bl	bc70 <assert_print>
    6a62:	f240 212e 	movw	r1, #558	; 0x22e
    6a66:	4648      	mov	r0, r9
    6a68:	f005 f8fb 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6a6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a70:	e017      	b.n	6aa2 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    6a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a76:	e7df      	b.n	6a38 <pinctrl_configure_pins+0x58c>
    switch (port)
    6a78:	2300      	movs	r3, #0
    6a7a:	e7dd      	b.n	6a38 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a7c:	f8df a124 	ldr.w	sl, [pc, #292]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    6a80:	f240 2329 	movw	r3, #553	; 0x229
    6a84:	4652      	mov	r2, sl
    6a86:	494a      	ldr	r1, [pc, #296]	; (6bb0 <pinctrl_configure_pins+0x704>)
    6a88:	4848      	ldr	r0, [pc, #288]	; (6bac <pinctrl_configure_pins+0x700>)
    6a8a:	f005 f8f1 	bl	bc70 <assert_print>
    6a8e:	f240 2129 	movw	r1, #553	; 0x229
    6a92:	4650      	mov	r0, sl
    6a94:	f005 f8e5 	bl	bc62 <assert_post_action>
    6a98:	e7d4      	b.n	6a44 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    6a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a9e:	e000      	b.n	6aa2 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6aa0:	4a44      	ldr	r2, [pc, #272]	; (6bb4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6aa2:	2301      	movs	r3, #1
    6aa4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6aa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6aac:	e7b7      	b.n	6a1e <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ab2:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6ab6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6aba:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6abe:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6ac2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6ac6:	d144      	bne.n	6b52 <pinctrl_configure_pins+0x6a6>
    switch (port)
    6ac8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6acc:	d01f      	beq.n	6b0e <pinctrl_configure_pins+0x662>
    6ace:	b10b      	cbz	r3, 6ad4 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    6ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6ad4:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ad8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ada:	f012 0f01 	tst.w	r2, #1
    6ade:	d019      	beq.n	6b14 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    6ae0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ae4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ae8:	d023      	beq.n	6b32 <pinctrl_configure_pins+0x686>
    6aea:	bb2b      	cbnz	r3, 6b38 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    6aec:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    6af0:	f240 232e 	movw	r3, #558	; 0x22e
    6af4:	464a      	mov	r2, r9
    6af6:	492c      	ldr	r1, [pc, #176]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    6af8:	482c      	ldr	r0, [pc, #176]	; (6bac <pinctrl_configure_pins+0x700>)
    6afa:	f005 f8b9 	bl	bc70 <assert_print>
    6afe:	f240 212e 	movw	r1, #558	; 0x22e
    6b02:	4648      	mov	r0, r9
    6b04:	f005 f8ad 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6b08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b0c:	e015      	b.n	6b3a <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    6b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b12:	e7df      	b.n	6ad4 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b14:	f8df a08c 	ldr.w	sl, [pc, #140]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    6b18:	f240 2329 	movw	r3, #553	; 0x229
    6b1c:	4652      	mov	r2, sl
    6b1e:	4924      	ldr	r1, [pc, #144]	; (6bb0 <pinctrl_configure_pins+0x704>)
    6b20:	4822      	ldr	r0, [pc, #136]	; (6bac <pinctrl_configure_pins+0x700>)
    6b22:	f005 f8a5 	bl	bc70 <assert_print>
    6b26:	f240 2129 	movw	r1, #553	; 0x229
    6b2a:	4650      	mov	r0, sl
    6b2c:	f005 f899 	bl	bc62 <assert_post_action>
    6b30:	e7d6      	b.n	6ae0 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    6b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b36:	e000      	b.n	6b3a <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b38:	4a1e      	ldr	r2, [pc, #120]	; (6bb4 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6b3a:	2301      	movs	r3, #1
    6b3c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6b40:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6b44:	2201      	movs	r2, #1
    6b46:	4611      	mov	r1, r2
    6b48:	f855 0008 	ldr.w	r0, [r5, r8]
    6b4c:	f7ff fc4e 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6b50:	e500      	b.n	6554 <pinctrl_configure_pins+0xa8>
    switch (port)
    6b52:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6b56:	d01f      	beq.n	6b98 <pinctrl_configure_pins+0x6ec>
    6b58:	b30b      	cbz	r3, 6b9e <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    6b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b5e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b62:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b64:	f013 0f01 	tst.w	r3, #1
    6b68:	d026      	beq.n	6bb8 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    6b6a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b6e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6b72:	d030      	beq.n	6bd6 <pinctrl_configure_pins+0x72a>
    6b74:	bb93      	cbnz	r3, 6bdc <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    6b76:	f8df 902c 	ldr.w	r9, [pc, #44]	; 6ba4 <pinctrl_configure_pins+0x6f8>
    6b7a:	f240 232e 	movw	r3, #558	; 0x22e
    6b7e:	464a      	mov	r2, r9
    6b80:	4909      	ldr	r1, [pc, #36]	; (6ba8 <pinctrl_configure_pins+0x6fc>)
    6b82:	480a      	ldr	r0, [pc, #40]	; (6bac <pinctrl_configure_pins+0x700>)
    6b84:	f005 f874 	bl	bc70 <assert_print>
    6b88:	f240 212e 	movw	r1, #558	; 0x22e
    6b8c:	4648      	mov	r0, r9
    6b8e:	f005 f868 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6b92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b96:	e022      	b.n	6bde <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    6b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b9c:	e7df      	b.n	6b5e <pinctrl_configure_pins+0x6b2>
    switch (port)
    6b9e:	2300      	movs	r3, #0
    6ba0:	e7dd      	b.n	6b5e <pinctrl_configure_pins+0x6b2>
    6ba2:	bf00      	nop
    6ba4:	0000e8ec 	.word	0x0000e8ec
    6ba8:	0000d1f0 	.word	0x0000d1f0
    6bac:	0000d02c 	.word	0x0000d02c
    6bb0:	0000e920 	.word	0x0000e920
    6bb4:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bb8:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 6da8 <pinctrl_configure_pins+0x8fc>
    6bbc:	f240 2329 	movw	r3, #553	; 0x229
    6bc0:	4652      	mov	r2, sl
    6bc2:	497a      	ldr	r1, [pc, #488]	; (6dac <pinctrl_configure_pins+0x900>)
    6bc4:	487a      	ldr	r0, [pc, #488]	; (6db0 <pinctrl_configure_pins+0x904>)
    6bc6:	f005 f853 	bl	bc70 <assert_print>
    6bca:	f240 2129 	movw	r1, #553	; 0x229
    6bce:	4650      	mov	r0, sl
    6bd0:	f005 f847 	bl	bc62 <assert_post_action>
    6bd4:	e7c9      	b.n	6b6a <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    6bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bda:	e000      	b.n	6bde <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bdc:	4a75      	ldr	r2, [pc, #468]	; (6db4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6bde:	2301      	movs	r3, #1
    6be0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6be4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6be8:	e7ac      	b.n	6b44 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    6bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bee:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6bf2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6bf6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6bfa:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6bfe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6c02:	d144      	bne.n	6c8e <pinctrl_configure_pins+0x7e2>
    switch (port)
    6c04:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c08:	d01f      	beq.n	6c4a <pinctrl_configure_pins+0x79e>
    6c0a:	b10b      	cbz	r3, 6c10 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    6c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6c10:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c14:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c16:	f012 0f01 	tst.w	r2, #1
    6c1a:	d019      	beq.n	6c50 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    6c1c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c20:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c24:	d023      	beq.n	6c6e <pinctrl_configure_pins+0x7c2>
    6c26:	bb2b      	cbnz	r3, 6c74 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    6c28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6da8 <pinctrl_configure_pins+0x8fc>
    6c2c:	f240 232e 	movw	r3, #558	; 0x22e
    6c30:	464a      	mov	r2, r9
    6c32:	4961      	ldr	r1, [pc, #388]	; (6db8 <pinctrl_configure_pins+0x90c>)
    6c34:	485e      	ldr	r0, [pc, #376]	; (6db0 <pinctrl_configure_pins+0x904>)
    6c36:	f005 f81b 	bl	bc70 <assert_print>
    6c3a:	f240 212e 	movw	r1, #558	; 0x22e
    6c3e:	4648      	mov	r0, r9
    6c40:	f005 f80f 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c48:	e015      	b.n	6c76 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    6c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c4e:	e7df      	b.n	6c10 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c50:	f8df a154 	ldr.w	sl, [pc, #340]	; 6da8 <pinctrl_configure_pins+0x8fc>
    6c54:	f240 2329 	movw	r3, #553	; 0x229
    6c58:	4652      	mov	r2, sl
    6c5a:	4954      	ldr	r1, [pc, #336]	; (6dac <pinctrl_configure_pins+0x900>)
    6c5c:	4854      	ldr	r0, [pc, #336]	; (6db0 <pinctrl_configure_pins+0x904>)
    6c5e:	f005 f807 	bl	bc70 <assert_print>
    6c62:	f240 2129 	movw	r1, #553	; 0x229
    6c66:	4650      	mov	r0, sl
    6c68:	f004 fffb 	bl	bc62 <assert_post_action>
    6c6c:	e7d6      	b.n	6c1c <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    6c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c72:	e000      	b.n	6c76 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c74:	4a4f      	ldr	r2, [pc, #316]	; (6db4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c76:	2301      	movs	r3, #1
    6c78:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6c7c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c80:	2201      	movs	r2, #1
    6c82:	4611      	mov	r1, r2
    6c84:	f855 0008 	ldr.w	r0, [r5, r8]
    6c88:	f7ff fbb0 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6c8c:	e462      	b.n	6554 <pinctrl_configure_pins+0xa8>
    switch (port)
    6c8e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c92:	d01f      	beq.n	6cd4 <pinctrl_configure_pins+0x828>
    6c94:	b30b      	cbz	r3, 6cda <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    6c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c9a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c9e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ca0:	f013 0f01 	tst.w	r3, #1
    6ca4:	d01b      	beq.n	6cde <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    6ca6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6caa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6cae:	d025      	beq.n	6cfc <pinctrl_configure_pins+0x850>
    6cb0:	bb3b      	cbnz	r3, 6d02 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    6cb2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 6da8 <pinctrl_configure_pins+0x8fc>
    6cb6:	f240 232e 	movw	r3, #558	; 0x22e
    6cba:	464a      	mov	r2, r9
    6cbc:	493e      	ldr	r1, [pc, #248]	; (6db8 <pinctrl_configure_pins+0x90c>)
    6cbe:	483c      	ldr	r0, [pc, #240]	; (6db0 <pinctrl_configure_pins+0x904>)
    6cc0:	f004 ffd6 	bl	bc70 <assert_print>
    6cc4:	f240 212e 	movw	r1, #558	; 0x22e
    6cc8:	4648      	mov	r0, r9
    6cca:	f004 ffca 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    6cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6cd2:	e017      	b.n	6d04 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    6cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6cd8:	e7df      	b.n	6c9a <pinctrl_configure_pins+0x7ee>
    switch (port)
    6cda:	2300      	movs	r3, #0
    6cdc:	e7dd      	b.n	6c9a <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6cde:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6da8 <pinctrl_configure_pins+0x8fc>
    6ce2:	f240 2329 	movw	r3, #553	; 0x229
    6ce6:	4652      	mov	r2, sl
    6ce8:	4930      	ldr	r1, [pc, #192]	; (6dac <pinctrl_configure_pins+0x900>)
    6cea:	4831      	ldr	r0, [pc, #196]	; (6db0 <pinctrl_configure_pins+0x904>)
    6cec:	f004 ffc0 	bl	bc70 <assert_print>
    6cf0:	f240 2129 	movw	r1, #553	; 0x229
    6cf4:	4650      	mov	r0, sl
    6cf6:	f004 ffb4 	bl	bc62 <assert_post_action>
    6cfa:	e7d4      	b.n	6ca6 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    6cfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d00:	e000      	b.n	6d04 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d02:	4a2c      	ldr	r2, [pc, #176]	; (6db4 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6d04:	2301      	movs	r3, #1
    6d06:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6d0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6d0e:	e7b7      	b.n	6c80 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    6d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d14:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d18:	2201      	movs	r2, #1
    6d1a:	2100      	movs	r1, #0
    6d1c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d20:	f7ff fb64 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d24:	e416      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    6d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d2a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d2e:	2201      	movs	r2, #1
    6d30:	2100      	movs	r1, #0
    6d32:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d36:	f7ff fb59 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d3a:	e40b      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    6d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d40:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d44:	2201      	movs	r2, #1
    6d46:	2100      	movs	r1, #0
    6d48:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d4c:	f7ff fb4e 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d50:	e400      	b.n	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d56:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d5a:	2201      	movs	r2, #1
    6d5c:	2100      	movs	r1, #0
    6d5e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d62:	f7ff fb43 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d66:	f7ff bbf5 	b.w	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d6e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d72:	2201      	movs	r2, #1
    6d74:	2100      	movs	r1, #0
    6d76:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d7a:	f7ff fb37 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d7e:	f7ff bbe9 	b.w	6554 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    6d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d86:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d8a:	2201      	movs	r2, #1
    6d8c:	2100      	movs	r1, #0
    6d8e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d92:	f7ff fb2b 	bl	63ec <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d96:	f7ff bbdd 	b.w	6554 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6d9a:	2000      	movs	r0, #0
    6d9c:	e001      	b.n	6da2 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    6d9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6da6:	bf00      	nop
    6da8:	0000e8ec 	.word	0x0000e8ec
    6dac:	0000e920 	.word	0x0000e920
    6db0:	0000d02c 	.word	0x0000d02c
    6db4:	50000300 	.word	0x50000300
    6db8:	0000d1f0 	.word	0x0000d1f0

00006dbc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6dbc:	b510      	push	{r4, lr}
    6dbe:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    6dc0:	f7fc f9d4 	bl	316c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6dc4:	4b06      	ldr	r3, [pc, #24]	; (6de0 <k_sys_fatal_error_handler+0x24>)
    6dc6:	9302      	str	r3, [sp, #8]
    6dc8:	2400      	movs	r4, #0
    6dca:	9401      	str	r4, [sp, #4]
    6dcc:	9400      	str	r4, [sp, #0]
    6dce:	4623      	mov	r3, r4
    6dd0:	2201      	movs	r2, #1
    6dd2:	4904      	ldr	r1, [pc, #16]	; (6de4 <k_sys_fatal_error_handler+0x28>)
    6dd4:	4620      	mov	r0, r4
    6dd6:	f005 fcff 	bl	c7d8 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    6dda:	4620      	mov	r0, r4
    6ddc:	f7fe f810 	bl	4e00 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6de0:	0000ea4c 	.word	0x0000ea4c
    6de4:	0000ce68 	.word	0x0000ce68

00006de8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6de8:	4b02      	ldr	r3, [pc, #8]	; (6df4 <nvmc_wait+0xc>)
    6dea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6dee:	2b00      	cmp	r3, #0
    6df0:	d0fa      	beq.n	6de8 <nvmc_wait>
}
    6df2:	4770      	bx	lr
    6df4:	4001e000 	.word	0x4001e000

00006df8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    6df8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6dfa:	4b03      	ldr	r3, [pc, #12]	; (6e08 <nvmc_config+0x10>)
    6dfc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    6e00:	f7ff fff2 	bl	6de8 <nvmc_wait>
}
    6e04:	bd08      	pop	{r3, pc}
    6e06:	bf00      	nop
    6e08:	4001e000 	.word	0x4001e000

00006e0c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6e0c:	4b01      	ldr	r3, [pc, #4]	; (6e14 <SystemCoreClockUpdate+0x8>)
    6e0e:	4a02      	ldr	r2, [pc, #8]	; (6e18 <SystemCoreClockUpdate+0xc>)
    6e10:	601a      	str	r2, [r3, #0]
}
    6e12:	4770      	bx	lr
    6e14:	200000f0 	.word	0x200000f0
    6e18:	03d09000 	.word	0x03d09000

00006e1c <SystemInit>:

void SystemInit(void)
{
    6e1c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    6e1e:	f005 fcf8 	bl	c812 <nrf52_errata_36>
    6e22:	b140      	cbz	r0, 6e36 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e28:	2200      	movs	r2, #0
    6e2a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6e2e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6e32:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6e36:	f005 fcf6 	bl	c826 <nrf52_errata_66>
    6e3a:	2800      	cmp	r0, #0
    6e3c:	d046      	beq.n	6ecc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6e42:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6e46:	4b59      	ldr	r3, [pc, #356]	; (6fac <SystemInit+0x190>)
    6e48:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6e4c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6e50:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6e54:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6e58:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6e5c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6e60:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6e64:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6e68:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6e6c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6e70:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6e74:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6e78:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6e7c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    6e80:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6e84:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    6e88:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6e8c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    6e90:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6e94:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    6e98:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6e9c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6ea0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6ea4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6ea8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6eac:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6eb0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6eb4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6eb8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6ebc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6ec0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6ec4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6ec8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6ecc:	f005 fcb5 	bl	c83a <nrf52_errata_98>
    6ed0:	b118      	cbz	r0, 6eda <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    6ed2:	4b37      	ldr	r3, [pc, #220]	; (6fb0 <SystemInit+0x194>)
    6ed4:	4a37      	ldr	r2, [pc, #220]	; (6fb4 <SystemInit+0x198>)
    6ed6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6eda:	f005 fcc1 	bl	c860 <nrf52_errata_103>
    6ede:	b118      	cbz	r0, 6ee8 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6ee0:	4b35      	ldr	r3, [pc, #212]	; (6fb8 <SystemInit+0x19c>)
    6ee2:	22fb      	movs	r2, #251	; 0xfb
    6ee4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6ee8:	f005 fccd 	bl	c886 <nrf52_errata_115>
    6eec:	b170      	cbz	r0, 6f0c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6eee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6ef2:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    6ef6:	f023 030f 	bic.w	r3, r3, #15
    6efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6efe:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    6f02:	f002 020f 	and.w	r2, r2, #15
    6f06:	4313      	orrs	r3, r2
    6f08:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6f0c:	f005 fcce 	bl	c8ac <nrf52_errata_120>
    6f10:	b120      	cbz	r0, 6f1c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    6f12:	4b2a      	ldr	r3, [pc, #168]	; (6fbc <SystemInit+0x1a0>)
    6f14:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f18:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6f1c:	f005 fcd9 	bl	c8d2 <nrf52_errata_136>
    6f20:	b160      	cbz	r0, 6f3c <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6f2a:	f013 0f01 	tst.w	r3, #1
    6f2e:	d005      	beq.n	6f3c <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f34:	f06f 0201 	mvn.w	r2, #1
    6f38:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6f3c:	f005 fcd3 	bl	c8e6 <nrf52_configuration_249>
    6f40:	b138      	cbz	r0, 6f52 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6f42:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6f46:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f4e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6f52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	db08      	blt.n	6f70 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    6f5e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6f62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6f66:	2b00      	cmp	r3, #0
    6f68:	db02      	blt.n	6f70 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    6f6a:	f7ff ff4f 	bl	6e0c <SystemCoreClockUpdate>
}
    6f6e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    6f70:	2001      	movs	r0, #1
    6f72:	f7ff ff41 	bl	6df8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6f76:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    6f7a:	2512      	movs	r5, #18
    6f7c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    6f80:	f7ff ff32 	bl	6de8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6f84:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    6f88:	f7ff ff2e 	bl	6de8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    6f8c:	2000      	movs	r0, #0
    6f8e:	f7ff ff33 	bl	6df8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    6f92:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6f96:	490a      	ldr	r1, [pc, #40]	; (6fc0 <SystemInit+0x1a4>)
    6f98:	68ca      	ldr	r2, [r1, #12]
    6f9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6f9e:	4b09      	ldr	r3, [pc, #36]	; (6fc4 <SystemInit+0x1a8>)
    6fa0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6fa2:	60cb      	str	r3, [r1, #12]
    6fa4:	f3bf 8f4f 	dsb	sy
    __NOP();
    6fa8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6faa:	e7fd      	b.n	6fa8 <SystemInit+0x18c>
    6fac:	4000c000 	.word	0x4000c000
    6fb0:	40005000 	.word	0x40005000
    6fb4:	00038148 	.word	0x00038148
    6fb8:	4000f000 	.word	0x4000f000
    6fbc:	40029000 	.word	0x40029000
    6fc0:	e000ed00 	.word	0xe000ed00
    6fc4:	05fa0004 	.word	0x05fa0004

00006fc8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6fc8:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    6fca:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6fcc:	fab4 f384 	clz	r3, r4
    6fd0:	f1c3 031f 	rsb	r3, r3, #31
    6fd4:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    6fd8:	2b00      	cmp	r3, #0
    6fda:	db16      	blt.n	700a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6fdc:	2201      	movs	r2, #1
    6fde:	fa02 f303 	lsl.w	r3, r2, r3
    6fe2:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6fe6:	f3bf 8f5b 	dmb	ish
    6fea:	e850 2f00 	ldrex	r2, [r0]
    6fee:	42a2      	cmp	r2, r4
    6ff0:	d104      	bne.n	6ffc <nrfx_flag32_alloc+0x34>
    6ff2:	e840 3e00 	strex	lr, r3, [r0]
    6ff6:	f1be 0f00 	cmp.w	lr, #0
    6ffa:	d1f6      	bne.n	6fea <nrfx_flag32_alloc+0x22>
    6ffc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7000:	d1e3      	bne.n	6fca <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    7002:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    7006:	4802      	ldr	r0, [pc, #8]	; (7010 <nrfx_flag32_alloc+0x48>)
}
    7008:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    700a:	4802      	ldr	r0, [pc, #8]	; (7014 <nrfx_flag32_alloc+0x4c>)
    700c:	e7fc      	b.n	7008 <nrfx_flag32_alloc+0x40>
    700e:	bf00      	nop
    7010:	0bad0000 	.word	0x0bad0000
    7014:	0bad0002 	.word	0x0bad0002

00007018 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7018:	6803      	ldr	r3, [r0, #0]
    701a:	40cb      	lsrs	r3, r1
    701c:	f013 0f01 	tst.w	r3, #1
    7020:	d115      	bne.n	704e <nrfx_flag32_free+0x36>
{
    7022:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    7024:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    7026:	2301      	movs	r3, #1
    7028:	408b      	lsls	r3, r1
    702a:	4313      	orrs	r3, r2
    702c:	f3bf 8f5b 	dmb	ish
    7030:	e850 cf00 	ldrex	ip, [r0]
    7034:	4594      	cmp	ip, r2
    7036:	d104      	bne.n	7042 <nrfx_flag32_free+0x2a>
    7038:	e840 3e00 	strex	lr, r3, [r0]
    703c:	f1be 0f00 	cmp.w	lr, #0
    7040:	d1f6      	bne.n	7030 <nrfx_flag32_free+0x18>
    7042:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7046:	d1ed      	bne.n	7024 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    7048:	4802      	ldr	r0, [pc, #8]	; (7054 <nrfx_flag32_free+0x3c>)
}
    704a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    704e:	4802      	ldr	r0, [pc, #8]	; (7058 <nrfx_flag32_free+0x40>)
}
    7050:	4770      	bx	lr
    7052:	bf00      	nop
    7054:	0bad0000 	.word	0x0bad0000
    7058:	0bad0004 	.word	0x0bad0004

0000705c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    705c:	b5f0      	push	{r4, r5, r6, r7, lr}
    705e:	b083      	sub	sp, #12
    switch (domain)
    7060:	4605      	mov	r5, r0
    7062:	b168      	cbz	r0, 7080 <clock_stop+0x24>
    7064:	2801      	cmp	r0, #1
    7066:	d020      	beq.n	70aa <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7068:	4c3d      	ldr	r4, [pc, #244]	; (7160 <clock_stop+0x104>)
    706a:	23d8      	movs	r3, #216	; 0xd8
    706c:	4622      	mov	r2, r4
    706e:	493d      	ldr	r1, [pc, #244]	; (7164 <clock_stop+0x108>)
    7070:	483d      	ldr	r0, [pc, #244]	; (7168 <clock_stop+0x10c>)
    7072:	f004 fdfd 	bl	bc70 <assert_print>
    7076:	21d8      	movs	r1, #216	; 0xd8
    7078:	4620      	mov	r0, r4
    707a:	f004 fdf2 	bl	bc62 <assert_post_action>
            return;
    707e:	e068      	b.n	7152 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    7080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7084:	2202      	movs	r2, #2
    7086:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    708a:	2200      	movs	r2, #0
    708c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7090:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7094:	2201      	movs	r2, #1
    7096:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7098:	2301      	movs	r3, #1
    709a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    709e:	429d      	cmp	r5, r3
    70a0:	d00f      	beq.n	70c2 <clock_stop+0x66>
    70a2:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    70a4:	f242 7410 	movw	r4, #10000	; 0x2710
    70a8:	e029      	b.n	70fe <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    70aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70ae:	2201      	movs	r2, #1
    70b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70b4:	2100      	movs	r1, #0
    70b6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    70ba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70be:	605a      	str	r2, [r3, #4]
}
    70c0:	e7ea      	b.n	7098 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    70c2:	f10d 0607 	add.w	r6, sp, #7
    70c6:	e7ed      	b.n	70a4 <clock_stop+0x48>
            if (p_clk_src != NULL)
    70c8:	b136      	cbz	r6, 70d8 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    70ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70ce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    70d2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    70d6:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    70d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70dc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    70e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    70e4:	d12f      	bne.n	7146 <clock_stop+0xea>
    return false;
    70e6:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    70e8:	b38b      	cbz	r3, 714e <clock_stop+0xf2>
    70ea:	b11e      	cbz	r6, 70f4 <clock_stop+0x98>
    70ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70f0:	2b01      	cmp	r3, #1
    70f2:	d12c      	bne.n	714e <clock_stop+0xf2>
    70f4:	2001      	movs	r0, #1
    70f6:	f005 fc09 	bl	c90c <nrfx_busy_wait>
    70fa:	3c01      	subs	r4, #1
    70fc:	d027      	beq.n	714e <clock_stop+0xf2>
    switch (domain)
    70fe:	2d00      	cmp	r5, #0
    7100:	d0e2      	beq.n	70c8 <clock_stop+0x6c>
    7102:	2d01      	cmp	r5, #1
    7104:	d00e      	beq.n	7124 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    7106:	4f19      	ldr	r7, [pc, #100]	; (716c <clock_stop+0x110>)
    7108:	f44f 734f 	mov.w	r3, #828	; 0x33c
    710c:	463a      	mov	r2, r7
    710e:	4915      	ldr	r1, [pc, #84]	; (7164 <clock_stop+0x108>)
    7110:	4815      	ldr	r0, [pc, #84]	; (7168 <clock_stop+0x10c>)
    7112:	f004 fdad 	bl	bc70 <assert_print>
    7116:	f44f 714f 	mov.w	r1, #828	; 0x33c
    711a:	4638      	mov	r0, r7
    711c:	f004 fda1 	bl	bc62 <assert_post_action>
            return false;
    7120:	2300      	movs	r3, #0
    7122:	e7e1      	b.n	70e8 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    7124:	b136      	cbz	r6, 7134 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    712a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    712e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7132:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7138:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    713c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7140:	d103      	bne.n	714a <clock_stop+0xee>
    return false;
    7142:	2300      	movs	r3, #0
    7144:	e7d0      	b.n	70e8 <clock_stop+0x8c>
                return true;
    7146:	2301      	movs	r3, #1
    7148:	e7ce      	b.n	70e8 <clock_stop+0x8c>
                return true;
    714a:	2301      	movs	r3, #1
    714c:	e7cc      	b.n	70e8 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    714e:	2d01      	cmp	r5, #1
    7150:	d001      	beq.n	7156 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    7152:	b003      	add	sp, #12
    7154:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    7156:	4b06      	ldr	r3, [pc, #24]	; (7170 <clock_stop+0x114>)
    7158:	2200      	movs	r2, #0
    715a:	715a      	strb	r2, [r3, #5]
    715c:	e7f9      	b.n	7152 <clock_stop+0xf6>
    715e:	bf00      	nop
    7160:	0000ea6c 	.word	0x0000ea6c
    7164:	0000d1f0 	.word	0x0000d1f0
    7168:	0000d02c 	.word	0x0000d02c
    716c:	0000eaac 	.word	0x0000eaac
    7170:	20000c94 	.word	0x20000c94

00007174 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    7174:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    7176:	4604      	mov	r4, r0
    7178:	b150      	cbz	r0, 7190 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    717a:	4b0d      	ldr	r3, [pc, #52]	; (71b0 <nrfx_clock_init+0x3c>)
    717c:	791b      	ldrb	r3, [r3, #4]
    717e:	b9ab      	cbnz	r3, 71ac <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    7180:	4b0b      	ldr	r3, [pc, #44]	; (71b0 <nrfx_clock_init+0x3c>)
    7182:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    7184:	2201      	movs	r2, #1
    7186:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    7188:	2200      	movs	r2, #0
    718a:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    718c:	4809      	ldr	r0, [pc, #36]	; (71b4 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    718e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    7190:	4d09      	ldr	r5, [pc, #36]	; (71b8 <nrfx_clock_init+0x44>)
    7192:	f240 1315 	movw	r3, #277	; 0x115
    7196:	462a      	mov	r2, r5
    7198:	4908      	ldr	r1, [pc, #32]	; (71bc <nrfx_clock_init+0x48>)
    719a:	4809      	ldr	r0, [pc, #36]	; (71c0 <nrfx_clock_init+0x4c>)
    719c:	f004 fd68 	bl	bc70 <assert_print>
    71a0:	f240 1115 	movw	r1, #277	; 0x115
    71a4:	4628      	mov	r0, r5
    71a6:	f004 fd5c 	bl	bc62 <assert_post_action>
    71aa:	e7e6      	b.n	717a <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    71ac:	4805      	ldr	r0, [pc, #20]	; (71c4 <nrfx_clock_init+0x50>)
    return err_code;
    71ae:	e7ee      	b.n	718e <nrfx_clock_init+0x1a>
    71b0:	20000c94 	.word	0x20000c94
    71b4:	0bad0000 	.word	0x0bad0000
    71b8:	0000ea6c 	.word	0x0000ea6c
    71bc:	0000eae0 	.word	0x0000eae0
    71c0:	0000d02c 	.word	0x0000d02c
    71c4:	0bad000c 	.word	0x0bad000c

000071c8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    71c8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    71ca:	4b0f      	ldr	r3, [pc, #60]	; (7208 <nrfx_clock_enable+0x40>)
    71cc:	791b      	ldrb	r3, [r3, #4]
    71ce:	b153      	cbz	r3, 71e6 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    71d0:	2000      	movs	r0, #0
    71d2:	f7fc ff03 	bl	3fdc <arch_irq_is_enabled>
    71d6:	b1a0      	cbz	r0, 7202 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    71d8:	f005 fb9c 	bl	c914 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    71dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    71e0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    71e4:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    71e6:	4c09      	ldr	r4, [pc, #36]	; (720c <nrfx_clock_enable+0x44>)
    71e8:	f44f 7397 	mov.w	r3, #302	; 0x12e
    71ec:	4622      	mov	r2, r4
    71ee:	4908      	ldr	r1, [pc, #32]	; (7210 <nrfx_clock_enable+0x48>)
    71f0:	4808      	ldr	r0, [pc, #32]	; (7214 <nrfx_clock_enable+0x4c>)
    71f2:	f004 fd3d 	bl	bc70 <assert_print>
    71f6:	f44f 7197 	mov.w	r1, #302	; 0x12e
    71fa:	4620      	mov	r0, r4
    71fc:	f004 fd31 	bl	bc62 <assert_post_action>
    7200:	e7e6      	b.n	71d0 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7202:	f7fc fedd 	bl	3fc0 <arch_irq_enable>
    7206:	e7e7      	b.n	71d8 <nrfx_clock_enable+0x10>
    7208:	20000c94 	.word	0x20000c94
    720c:	0000ea6c 	.word	0x0000ea6c
    7210:	0000eaf0 	.word	0x0000eaf0
    7214:	0000d02c 	.word	0x0000d02c

00007218 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    7218:	b530      	push	{r4, r5, lr}
    721a:	b083      	sub	sp, #12
    721c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    721e:	4b34      	ldr	r3, [pc, #208]	; (72f0 <nrfx_clock_start+0xd8>)
    7220:	791b      	ldrb	r3, [r3, #4]
    7222:	b183      	cbz	r3, 7246 <nrfx_clock_start+0x2e>
    switch (domain)
    7224:	b1ec      	cbz	r4, 7262 <nrfx_clock_start+0x4a>
    7226:	2c01      	cmp	r4, #1
    7228:	d055      	beq.n	72d6 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    722a:	4c32      	ldr	r4, [pc, #200]	; (72f4 <nrfx_clock_start+0xdc>)
    722c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    7230:	4622      	mov	r2, r4
    7232:	4931      	ldr	r1, [pc, #196]	; (72f8 <nrfx_clock_start+0xe0>)
    7234:	4831      	ldr	r0, [pc, #196]	; (72fc <nrfx_clock_start+0xe4>)
    7236:	f004 fd1b 	bl	bc70 <assert_print>
    723a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    723e:	4620      	mov	r0, r4
    7240:	f004 fd0f 	bl	bc62 <assert_post_action>
            break;
    }
}
    7244:	e052      	b.n	72ec <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7246:	4d2b      	ldr	r5, [pc, #172]	; (72f4 <nrfx_clock_start+0xdc>)
    7248:	f44f 73b4 	mov.w	r3, #360	; 0x168
    724c:	462a      	mov	r2, r5
    724e:	492c      	ldr	r1, [pc, #176]	; (7300 <nrfx_clock_start+0xe8>)
    7250:	482a      	ldr	r0, [pc, #168]	; (72fc <nrfx_clock_start+0xe4>)
    7252:	f004 fd0d 	bl	bc70 <assert_print>
    7256:	f44f 71b4 	mov.w	r1, #360	; 0x168
    725a:	4628      	mov	r0, r5
    725c:	f004 fd01 	bl	bc62 <assert_post_action>
    7260:	e7e0      	b.n	7224 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7266:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    726a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    726e:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7270:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7274:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7278:	d117      	bne.n	72aa <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    727a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    727e:	f013 0f01 	tst.w	r3, #1
    7282:	d116      	bne.n	72b2 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    7284:	f005 fb46 	bl	c914 <clock_initial_lfclksrc_get>
    7288:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    728a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    728e:	9a01      	ldr	r2, [sp, #4]
    7290:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7294:	2200      	movs	r2, #0
    7296:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    729a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    729e:	2202      	movs	r2, #2
    72a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72a4:	2201      	movs	r2, #1
    72a6:	609a      	str	r2, [r3, #8]
}
    72a8:	e020      	b.n	72ec <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    72aa:	a801      	add	r0, sp, #4
    72ac:	f005 fb34 	bl	c918 <clock_lfclksrc_tweak>
    72b0:	e7eb      	b.n	728a <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    72b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    72ba:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    72be:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    72c0:	a801      	add	r0, sp, #4
    72c2:	f005 fb29 	bl	c918 <clock_lfclksrc_tweak>
    72c6:	2800      	cmp	r0, #0
    72c8:	d0df      	beq.n	728a <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    72ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72ce:	2202      	movs	r2, #2
    72d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    72d4:	e00a      	b.n	72ec <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72da:	2200      	movs	r2, #0
    72dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    72e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    72e4:	2201      	movs	r2, #1
    72e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72ea:	601a      	str	r2, [r3, #0]
}
    72ec:	b003      	add	sp, #12
    72ee:	bd30      	pop	{r4, r5, pc}
    72f0:	20000c94 	.word	0x20000c94
    72f4:	0000ea6c 	.word	0x0000ea6c
    72f8:	0000d1f0 	.word	0x0000d1f0
    72fc:	0000d02c 	.word	0x0000d02c
    7300:	0000eaf0 	.word	0x0000eaf0

00007304 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    7304:	b538      	push	{r3, r4, r5, lr}
    7306:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7308:	4b0a      	ldr	r3, [pc, #40]	; (7334 <nrfx_clock_stop+0x30>)
    730a:	791b      	ldrb	r3, [r3, #4]
    730c:	b11b      	cbz	r3, 7316 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    730e:	4620      	mov	r0, r4
    7310:	f7ff fea4 	bl	705c <clock_stop>
}
    7314:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7316:	4d08      	ldr	r5, [pc, #32]	; (7338 <nrfx_clock_stop+0x34>)
    7318:	f240 13ad 	movw	r3, #429	; 0x1ad
    731c:	462a      	mov	r2, r5
    731e:	4907      	ldr	r1, [pc, #28]	; (733c <nrfx_clock_stop+0x38>)
    7320:	4807      	ldr	r0, [pc, #28]	; (7340 <nrfx_clock_stop+0x3c>)
    7322:	f004 fca5 	bl	bc70 <assert_print>
    7326:	f240 11ad 	movw	r1, #429	; 0x1ad
    732a:	4628      	mov	r0, r5
    732c:	f004 fc99 	bl	bc62 <assert_post_action>
    7330:	e7ed      	b.n	730e <nrfx_clock_stop+0xa>
    7332:	bf00      	nop
    7334:	20000c94 	.word	0x20000c94
    7338:	0000ea6c 	.word	0x0000ea6c
    733c:	0000eaf0 	.word	0x0000eaf0
    7340:	0000d02c 	.word	0x0000d02c

00007344 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7344:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    734a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    734e:	b18b      	cbz	r3, 7374 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7354:	2200      	movs	r2, #0
    7356:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    735a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    735e:	2201      	movs	r2, #1
    7360:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    7364:	4b15      	ldr	r3, [pc, #84]	; (73bc <nrfx_power_clock_irq_handler+0x78>)
    7366:	795b      	ldrb	r3, [r3, #5]
    7368:	b923      	cbnz	r3, 7374 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    736a:	4b14      	ldr	r3, [pc, #80]	; (73bc <nrfx_power_clock_irq_handler+0x78>)
    736c:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    736e:	681b      	ldr	r3, [r3, #0]
    7370:	2000      	movs	r0, #0
    7372:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7378:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    737c:	b19b      	cbz	r3, 73a6 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    737e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7382:	2200      	movs	r2, #0
    7384:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7388:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    738c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7390:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7394:	f012 0f03 	tst.w	r2, #3
    7398:	d106      	bne.n	73a8 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    739a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    739e:	2201      	movs	r2, #1
    73a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73a4:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    73a6:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    73a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73ac:	2202      	movs	r2, #2
    73ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    73b2:	4b02      	ldr	r3, [pc, #8]	; (73bc <nrfx_power_clock_irq_handler+0x78>)
    73b4:	681b      	ldr	r3, [r3, #0]
    73b6:	2001      	movs	r0, #1
    73b8:	4798      	blx	r3
}
    73ba:	e7f4      	b.n	73a6 <nrfx_power_clock_irq_handler+0x62>
    73bc:	20000c94 	.word	0x20000c94

000073c0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    73c0:	3008      	adds	r0, #8
    73c2:	4b03      	ldr	r3, [pc, #12]	; (73d0 <pin_in_use+0x10>)
    73c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    73c8:	f000 0001 	and.w	r0, r0, #1
    73cc:	4770      	bx	lr
    73ce:	bf00      	nop
    73d0:	200000f4 	.word	0x200000f4

000073d4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    73d4:	3008      	adds	r0, #8
    73d6:	4b03      	ldr	r3, [pc, #12]	; (73e4 <pin_in_use_by_te+0x10>)
    73d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    73dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    73e0:	4770      	bx	lr
    73e2:	bf00      	nop
    73e4:	200000f4 	.word	0x200000f4

000073e8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    73e8:	3008      	adds	r0, #8
    73ea:	4b04      	ldr	r3, [pc, #16]	; (73fc <pin_has_trigger+0x14>)
    73ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    73f0:	f010 001c 	ands.w	r0, r0, #28
    73f4:	bf18      	it	ne
    73f6:	2001      	movne	r0, #1
    73f8:	4770      	bx	lr
    73fa:	bf00      	nop
    73fc:	200000f4 	.word	0x200000f4

00007400 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7400:	3008      	adds	r0, #8
    7402:	4b03      	ldr	r3, [pc, #12]	; (7410 <pin_is_output+0x10>)
    7404:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7408:	f3c0 0040 	ubfx	r0, r0, #1, #1
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	200000f4 	.word	0x200000f4

00007414 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7414:	3008      	adds	r0, #8
    7416:	4b02      	ldr	r3, [pc, #8]	; (7420 <pin_te_get+0xc>)
    7418:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    741c:	0b40      	lsrs	r0, r0, #13
    741e:	4770      	bx	lr
    7420:	200000f4 	.word	0x200000f4

00007424 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7424:	2200      	movs	r2, #0
    7426:	e004      	b.n	7432 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    742c:	4283      	cmp	r3, r0
    742e:	d00f      	beq.n	7450 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7430:	3201      	adds	r2, #1
    7432:	2a2f      	cmp	r2, #47	; 0x2f
    7434:	d80a      	bhi.n	744c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7436:	f102 0308 	add.w	r3, r2, #8
    743a:	4906      	ldr	r1, [pc, #24]	; (7454 <handler_in_use+0x30>)
    743c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7440:	f413 7f80 	tst.w	r3, #256	; 0x100
    7444:	d0f0      	beq.n	7428 <handler_in_use+0x4>
    7446:	f3c3 2343 	ubfx	r3, r3, #9, #4
    744a:	e7ef      	b.n	742c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    744c:	2000      	movs	r0, #0
    744e:	4770      	bx	lr
            return true;
    7450:	2001      	movs	r0, #1
}
    7452:	4770      	bx	lr
    7454:	200000f4 	.word	0x200000f4

00007458 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7458:	2300      	movs	r3, #0
    745a:	b113      	cbz	r3, 7462 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    745c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7460:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7462:	4a07      	ldr	r2, [pc, #28]	; (7480 <find_handler+0x28>)
    7464:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7468:	4282      	cmp	r2, r0
    746a:	d001      	beq.n	7470 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    746c:	3301      	adds	r3, #1
    746e:	e7f4      	b.n	745a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7470:	4a03      	ldr	r2, [pc, #12]	; (7480 <find_handler+0x28>)
    7472:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    7476:	6852      	ldr	r2, [r2, #4]
    7478:	428a      	cmp	r2, r1
    747a:	d1f7      	bne.n	746c <find_handler+0x14>
            return i;
    747c:	4618      	mov	r0, r3
    747e:	4770      	bx	lr
    7480:	200000f4 	.word	0x200000f4

00007484 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7484:	3008      	adds	r0, #8
    7486:	4b06      	ldr	r3, [pc, #24]	; (74a0 <channel_handler_get+0x1c>)
    7488:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    748c:	f410 7f80 	tst.w	r0, #256	; 0x100
    7490:	d004      	beq.n	749c <channel_handler_get+0x18>
    7492:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    7496:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    749a:	4770      	bx	lr
        return NULL;
    749c:	2000      	movs	r0, #0
}
    749e:	4770      	bx	lr
    74a0:	200000f4 	.word	0x200000f4

000074a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    74a4:	b570      	push	{r4, r5, r6, lr}
    74a6:	4604      	mov	r4, r0
    74a8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    74aa:	f7ff ffeb 	bl	7484 <channel_handler_get>

    if (handler)
    74ae:	b120      	cbz	r0, 74ba <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    74b0:	6806      	ldr	r6, [r0, #0]
    74b2:	6842      	ldr	r2, [r0, #4]
    74b4:	4629      	mov	r1, r5
    74b6:	4620      	mov	r0, r4
    74b8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    74ba:	4b04      	ldr	r3, [pc, #16]	; (74cc <call_handler+0x28>)
    74bc:	689b      	ldr	r3, [r3, #8]
    74be:	b123      	cbz	r3, 74ca <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    74c0:	4a02      	ldr	r2, [pc, #8]	; (74cc <call_handler+0x28>)
    74c2:	68d2      	ldr	r2, [r2, #12]
    74c4:	4629      	mov	r1, r5
    74c6:	4620      	mov	r0, r4
    74c8:	4798      	blx	r3
    }
}
    74ca:	bd70      	pop	{r4, r5, r6, pc}
    74cc:	200000f4 	.word	0x200000f4

000074d0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    74d0:	f100 0208 	add.w	r2, r0, #8
    74d4:	4b16      	ldr	r3, [pc, #88]	; (7530 <release_handler+0x60>)
    74d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    74da:	f413 7f80 	tst.w	r3, #256	; 0x100
    74de:	d026      	beq.n	752e <release_handler+0x5e>
{
    74e0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    74e2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    74e6:	4610      	mov	r0, r2
    74e8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    74ec:	4a10      	ldr	r2, [pc, #64]	; (7530 <release_handler+0x60>)
    74ee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    74f2:	4620      	mov	r0, r4
    74f4:	f7ff ff96 	bl	7424 <handler_in_use>
    74f8:	b100      	cbz	r0, 74fc <release_handler+0x2c>
}
    74fa:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    74fc:	480c      	ldr	r0, [pc, #48]	; (7530 <release_handler+0x60>)
    74fe:	2300      	movs	r3, #0
    7500:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7504:	4621      	mov	r1, r4
    7506:	3074      	adds	r0, #116	; 0x74
    7508:	f7ff fd86 	bl	7018 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    750c:	4b09      	ldr	r3, [pc, #36]	; (7534 <release_handler+0x64>)
    750e:	4298      	cmp	r0, r3
    7510:	d0f3      	beq.n	74fa <release_handler+0x2a>
    7512:	4c09      	ldr	r4, [pc, #36]	; (7538 <release_handler+0x68>)
    7514:	f44f 7399 	mov.w	r3, #306	; 0x132
    7518:	4622      	mov	r2, r4
    751a:	4908      	ldr	r1, [pc, #32]	; (753c <release_handler+0x6c>)
    751c:	4808      	ldr	r0, [pc, #32]	; (7540 <release_handler+0x70>)
    751e:	f004 fba7 	bl	bc70 <assert_print>
    7522:	f44f 7199 	mov.w	r1, #306	; 0x132
    7526:	4620      	mov	r0, r4
    7528:	f004 fb9b 	bl	bc62 <assert_post_action>
    752c:	e7e5      	b.n	74fa <release_handler+0x2a>
    752e:	4770      	bx	lr
    7530:	200000f4 	.word	0x200000f4
    7534:	0bad0000 	.word	0x0bad0000
    7538:	0000eb10 	.word	0x0000eb10
    753c:	0000eb50 	.word	0x0000eb50
    7540:	0000d02c 	.word	0x0000d02c

00007544 <pin_handler_trigger_uninit>:
{
    7544:	b510      	push	{r4, lr}
    7546:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    7548:	f7ff ff44 	bl	73d4 <pin_in_use_by_te>
    754c:	b140      	cbz	r0, 7560 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    754e:	4620      	mov	r0, r4
    7550:	f7ff ff60 	bl	7414 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7554:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7558:	4b06      	ldr	r3, [pc, #24]	; (7574 <pin_handler_trigger_uninit+0x30>)
    755a:	2200      	movs	r2, #0
    755c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7560:	4620      	mov	r0, r4
    7562:	f7ff ffb5 	bl	74d0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7566:	3408      	adds	r4, #8
    7568:	4b03      	ldr	r3, [pc, #12]	; (7578 <pin_handler_trigger_uninit+0x34>)
    756a:	2200      	movs	r2, #0
    756c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7570:	bd10      	pop	{r4, pc}
    7572:	bf00      	nop
    7574:	40006000 	.word	0x40006000
    7578:	200000f4 	.word	0x200000f4

0000757c <pin_handler_set>:
{
    757c:	b570      	push	{r4, r5, r6, lr}
    757e:	b082      	sub	sp, #8
    7580:	4606      	mov	r6, r0
    7582:	460c      	mov	r4, r1
    7584:	4615      	mov	r5, r2
    release_handler(pin);
    7586:	f7ff ffa3 	bl	74d0 <release_handler>
    if (!handler)
    758a:	b324      	cbz	r4, 75d6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    758c:	4629      	mov	r1, r5
    758e:	4620      	mov	r0, r4
    7590:	f7ff ff62 	bl	7458 <find_handler>
    if (handler_id < 0)
    7594:	1e03      	subs	r3, r0, #0
    7596:	db13      	blt.n	75c0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7598:	4a10      	ldr	r2, [pc, #64]	; (75dc <pin_handler_set+0x60>)
    759a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    759e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    75a2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    75a4:	025b      	lsls	r3, r3, #9
    75a6:	b29b      	uxth	r3, r3
    75a8:	f106 0008 	add.w	r0, r6, #8
    75ac:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    75b0:	430b      	orrs	r3, r1
    75b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    75b6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    75ba:	4809      	ldr	r0, [pc, #36]	; (75e0 <pin_handler_set+0x64>)
}
    75bc:	b002      	add	sp, #8
    75be:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    75c0:	f10d 0107 	add.w	r1, sp, #7
    75c4:	4807      	ldr	r0, [pc, #28]	; (75e4 <pin_handler_set+0x68>)
    75c6:	f7ff fcff 	bl	6fc8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    75ca:	4b05      	ldr	r3, [pc, #20]	; (75e0 <pin_handler_set+0x64>)
    75cc:	4298      	cmp	r0, r3
    75ce:	d1f5      	bne.n	75bc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    75d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75d4:	e7e0      	b.n	7598 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    75d6:	4802      	ldr	r0, [pc, #8]	; (75e0 <pin_handler_set+0x64>)
    75d8:	e7f0      	b.n	75bc <pin_handler_set+0x40>
    75da:	bf00      	nop
    75dc:	200000f4 	.word	0x200000f4
    75e0:	0bad0000 	.word	0x0bad0000
    75e4:	20000168 	.word	0x20000168

000075e8 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    75e8:	b538      	push	{r3, r4, r5, lr}
    75ea:	4604      	mov	r4, r0
    while (mask)
    75ec:	e018      	b.n	7620 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    75ee:	fa94 f3a4 	rbit	r3, r4
    75f2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    75f6:	2201      	movs	r2, #1
    75f8:	409a      	lsls	r2, r3
    75fa:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    75fe:	4a0a      	ldr	r2, [pc, #40]	; (7628 <gpiote_evt_handle+0x40>)
    7600:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7604:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7608:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    760c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7610:	f3c0 4001 	ubfx	r0, r0, #16, #2
    7614:	f005 f9ac 	bl	c970 <gpiote_polarity_to_trigger>
    7618:	4601      	mov	r1, r0
    761a:	4628      	mov	r0, r5
    761c:	f7ff ff42 	bl	74a4 <call_handler>
    while (mask)
    7620:	2c00      	cmp	r4, #0
    7622:	d1e4      	bne.n	75ee <gpiote_evt_handle+0x6>
    }
}
    7624:	bd38      	pop	{r3, r4, r5, pc}
    7626:	bf00      	nop
    7628:	40006000 	.word	0x40006000

0000762c <latch_pending_read_and_check>:
{
    762c:	b082      	sub	sp, #8
    762e:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7630:	4b11      	ldr	r3, [pc, #68]	; (7678 <latch_pending_read_and_check+0x4c>)
    7632:	e893 0003 	ldmia.w	r3, {r0, r1}
    7636:	ab02      	add	r3, sp, #8
    7638:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    763c:	4660      	mov	r0, ip
    763e:	2300      	movs	r3, #0
    7640:	e00b      	b.n	765a <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    7642:	aa02      	add	r2, sp, #8
    7644:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7648:	f852 2c08 	ldr.w	r2, [r2, #-8]
    764c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7650:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7654:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7658:	3301      	adds	r3, #1
    765a:	2b01      	cmp	r3, #1
    765c:	d9f1      	bls.n	7642 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    765e:	2300      	movs	r3, #0
    7660:	2b01      	cmp	r3, #1
    7662:	d804      	bhi.n	766e <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    7664:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    7668:	b922      	cbnz	r2, 7674 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    766a:	3301      	adds	r3, #1
    766c:	e7f8      	b.n	7660 <latch_pending_read_and_check+0x34>
    return false;
    766e:	2000      	movs	r0, #0
}
    7670:	b002      	add	sp, #8
    7672:	4770      	bx	lr
            return true;
    7674:	2001      	movs	r0, #1
    7676:	e7fb      	b.n	7670 <latch_pending_read_and_check+0x44>
    7678:	0000cf30 	.word	0x0000cf30

0000767c <next_sense_cond_call_handler>:
{
    767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7680:	4604      	mov	r4, r0
    7682:	460d      	mov	r5, r1
    7684:	4616      	mov	r6, r2
    if (is_level(trigger))
    7686:	4608      	mov	r0, r1
    7688:	f005 f974 	bl	c974 <is_level>
    768c:	bb60      	cbnz	r0, 76e8 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    768e:	2e02      	cmp	r6, #2
    7690:	f000 80f5 	beq.w	787e <next_sense_cond_call_handler+0x202>
    7694:	f04f 0802 	mov.w	r8, #2
    switch (port)
    7698:	0963      	lsrs	r3, r4, #5
    769a:	f000 80f3 	beq.w	7884 <next_sense_cond_call_handler+0x208>
    769e:	2b01      	cmp	r3, #1
    76a0:	f040 80f3 	bne.w	788a <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    76a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    76a8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    76ac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    76ae:	f013 0f01 	tst.w	r3, #1
    76b2:	f000 80ec 	beq.w	788e <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    76b6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    76ba:	0963      	lsrs	r3, r4, #5
    76bc:	f000 80f5 	beq.w	78aa <next_sense_cond_call_handler+0x22e>
    76c0:	2b01      	cmp	r3, #1
    76c2:	f000 80f5 	beq.w	78b0 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    76c6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 78ec <next_sense_cond_call_handler+0x270>
    76ca:	f240 232e 	movw	r3, #558	; 0x22e
    76ce:	464a      	mov	r2, r9
    76d0:	4987      	ldr	r1, [pc, #540]	; (78f0 <next_sense_cond_call_handler+0x274>)
    76d2:	4888      	ldr	r0, [pc, #544]	; (78f4 <next_sense_cond_call_handler+0x278>)
    76d4:	f004 facc 	bl	bc70 <assert_print>
    76d8:	f240 212e 	movw	r1, #558	; 0x22e
    76dc:	4648      	mov	r0, r9
    76de:	f004 fac0 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    76e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    76e6:	e0e4      	b.n	78b2 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    76e8:	4629      	mov	r1, r5
    76ea:	4620      	mov	r0, r4
    76ec:	f7ff feda 	bl	74a4 <call_handler>
    switch (port)
    76f0:	0963      	lsrs	r3, r4, #5
    76f2:	d01f      	beq.n	7734 <next_sense_cond_call_handler+0xb8>
    76f4:	2b01      	cmp	r3, #1
    76f6:	d120      	bne.n	773a <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    76f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    76fc:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7700:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7702:	f013 0f01 	tst.w	r3, #1
    7706:	d01a      	beq.n	773e <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    7708:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    770c:	0963      	lsrs	r3, r4, #5
    770e:	d024      	beq.n	775a <next_sense_cond_call_handler+0xde>
    7710:	2b01      	cmp	r3, #1
    7712:	d025      	beq.n	7760 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    7714:	4f75      	ldr	r7, [pc, #468]	; (78ec <next_sense_cond_call_handler+0x270>)
    7716:	f240 232e 	movw	r3, #558	; 0x22e
    771a:	463a      	mov	r2, r7
    771c:	4974      	ldr	r1, [pc, #464]	; (78f0 <next_sense_cond_call_handler+0x274>)
    771e:	4875      	ldr	r0, [pc, #468]	; (78f4 <next_sense_cond_call_handler+0x278>)
    7720:	f004 faa6 	bl	bc70 <assert_print>
    7724:	f240 212e 	movw	r1, #558	; 0x22e
    7728:	4638      	mov	r0, r7
    772a:	f004 fa9a 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    772e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7732:	e016      	b.n	7762 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    7734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7738:	e7e0      	b.n	76fc <next_sense_cond_call_handler+0x80>
    switch (port)
    773a:	2300      	movs	r3, #0
    773c:	e7de      	b.n	76fc <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    773e:	4d6b      	ldr	r5, [pc, #428]	; (78ec <next_sense_cond_call_handler+0x270>)
    7740:	f240 2329 	movw	r3, #553	; 0x229
    7744:	462a      	mov	r2, r5
    7746:	496c      	ldr	r1, [pc, #432]	; (78f8 <next_sense_cond_call_handler+0x27c>)
    7748:	486a      	ldr	r0, [pc, #424]	; (78f4 <next_sense_cond_call_handler+0x278>)
    774a:	f004 fa91 	bl	bc70 <assert_print>
    774e:	f240 2129 	movw	r1, #553	; 0x229
    7752:	4628      	mov	r0, r5
    7754:	f004 fa85 	bl	bc62 <assert_post_action>
    7758:	e7d6      	b.n	7708 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    775a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    775e:	e000      	b.n	7762 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7760:	4b66      	ldr	r3, [pc, #408]	; (78fc <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7762:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7766:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    776a:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    776e:	429e      	cmp	r6, r3
    7770:	f040 80af 	bne.w	78d2 <next_sense_cond_call_handler+0x256>
    switch (port)
    7774:	0963      	lsrs	r3, r4, #5
    7776:	d01f      	beq.n	77b8 <next_sense_cond_call_handler+0x13c>
    7778:	2b01      	cmp	r3, #1
    777a:	d120      	bne.n	77be <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    777c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7780:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7784:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7786:	f013 0f01 	tst.w	r3, #1
    778a:	d01a      	beq.n	77c2 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    778c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7790:	0963      	lsrs	r3, r4, #5
    7792:	d024      	beq.n	77de <next_sense_cond_call_handler+0x162>
    7794:	2b01      	cmp	r3, #1
    7796:	d025      	beq.n	77e4 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    7798:	4f54      	ldr	r7, [pc, #336]	; (78ec <next_sense_cond_call_handler+0x270>)
    779a:	f240 232e 	movw	r3, #558	; 0x22e
    779e:	463a      	mov	r2, r7
    77a0:	4953      	ldr	r1, [pc, #332]	; (78f0 <next_sense_cond_call_handler+0x274>)
    77a2:	4854      	ldr	r0, [pc, #336]	; (78f4 <next_sense_cond_call_handler+0x278>)
    77a4:	f004 fa64 	bl	bc70 <assert_print>
    77a8:	f240 212e 	movw	r1, #558	; 0x22e
    77ac:	4638      	mov	r0, r7
    77ae:	f004 fa58 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    77b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    77b6:	e016      	b.n	77e6 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    77b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77bc:	e7e0      	b.n	7780 <next_sense_cond_call_handler+0x104>
    switch (port)
    77be:	2300      	movs	r3, #0
    77c0:	e7de      	b.n	7780 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    77c2:	4d4a      	ldr	r5, [pc, #296]	; (78ec <next_sense_cond_call_handler+0x270>)
    77c4:	f240 2329 	movw	r3, #553	; 0x229
    77c8:	462a      	mov	r2, r5
    77ca:	494b      	ldr	r1, [pc, #300]	; (78f8 <next_sense_cond_call_handler+0x27c>)
    77cc:	4849      	ldr	r0, [pc, #292]	; (78f4 <next_sense_cond_call_handler+0x278>)
    77ce:	f004 fa4f 	bl	bc70 <assert_print>
    77d2:	f240 2129 	movw	r1, #553	; 0x229
    77d6:	4628      	mov	r0, r5
    77d8:	f004 fa43 	bl	bc62 <assert_post_action>
    77dc:	e7d6      	b.n	778c <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    77de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    77e2:	e000      	b.n	77e6 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    77e4:	4945      	ldr	r1, [pc, #276]	; (78fc <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    77e6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    77ea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    77ee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    77f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    77f6:	0963      	lsrs	r3, r4, #5
    77f8:	d01f      	beq.n	783a <next_sense_cond_call_handler+0x1be>
    77fa:	2b01      	cmp	r3, #1
    77fc:	d120      	bne.n	7840 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    77fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7802:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7806:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7808:	f013 0f01 	tst.w	r3, #1
    780c:	d01a      	beq.n	7844 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    780e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7812:	0964      	lsrs	r4, r4, #5
    7814:	d024      	beq.n	7860 <next_sense_cond_call_handler+0x1e4>
    7816:	2c01      	cmp	r4, #1
    7818:	d025      	beq.n	7866 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    781a:	4c34      	ldr	r4, [pc, #208]	; (78ec <next_sense_cond_call_handler+0x270>)
    781c:	f240 232e 	movw	r3, #558	; 0x22e
    7820:	4622      	mov	r2, r4
    7822:	4933      	ldr	r1, [pc, #204]	; (78f0 <next_sense_cond_call_handler+0x274>)
    7824:	4833      	ldr	r0, [pc, #204]	; (78f4 <next_sense_cond_call_handler+0x278>)
    7826:	f004 fa23 	bl	bc70 <assert_print>
    782a:	f240 212e 	movw	r1, #558	; 0x22e
    782e:	4620      	mov	r0, r4
    7830:	f004 fa17 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    7834:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7838:	e016      	b.n	7868 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    783a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    783e:	e7e0      	b.n	7802 <next_sense_cond_call_handler+0x186>
    switch (port)
    7840:	2300      	movs	r3, #0
    7842:	e7de      	b.n	7802 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7844:	4d29      	ldr	r5, [pc, #164]	; (78ec <next_sense_cond_call_handler+0x270>)
    7846:	f240 2329 	movw	r3, #553	; 0x229
    784a:	462a      	mov	r2, r5
    784c:	492a      	ldr	r1, [pc, #168]	; (78f8 <next_sense_cond_call_handler+0x27c>)
    784e:	4829      	ldr	r0, [pc, #164]	; (78f4 <next_sense_cond_call_handler+0x278>)
    7850:	f004 fa0e 	bl	bc70 <assert_print>
    7854:	f240 2129 	movw	r1, #553	; 0x229
    7858:	4628      	mov	r0, r5
    785a:	f004 fa02 	bl	bc62 <assert_post_action>
    785e:	e7d6      	b.n	780e <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    7860:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7864:	e000      	b.n	7868 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7866:	4925      	ldr	r1, [pc, #148]	; (78fc <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7868:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    786c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7870:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7874:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7878:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    787c:	e029      	b.n	78d2 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    787e:	f04f 0803 	mov.w	r8, #3
    7882:	e709      	b.n	7698 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    7884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7888:	e70e      	b.n	76a8 <next_sense_cond_call_handler+0x2c>
    switch (port)
    788a:	2300      	movs	r3, #0
    788c:	e70c      	b.n	76a8 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    788e:	4f17      	ldr	r7, [pc, #92]	; (78ec <next_sense_cond_call_handler+0x270>)
    7890:	f240 2329 	movw	r3, #553	; 0x229
    7894:	463a      	mov	r2, r7
    7896:	4918      	ldr	r1, [pc, #96]	; (78f8 <next_sense_cond_call_handler+0x27c>)
    7898:	4816      	ldr	r0, [pc, #88]	; (78f4 <next_sense_cond_call_handler+0x278>)
    789a:	f004 f9e9 	bl	bc70 <assert_print>
    789e:	f240 2129 	movw	r1, #553	; 0x229
    78a2:	4638      	mov	r0, r7
    78a4:	f004 f9dd 	bl	bc62 <assert_post_action>
    78a8:	e705      	b.n	76b6 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    78aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    78ae:	e000      	b.n	78b2 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    78b0:	4912      	ldr	r1, [pc, #72]	; (78fc <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    78b2:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    78b6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    78ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    78be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    78c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    78c6:	2d03      	cmp	r5, #3
    78c8:	d007      	beq.n	78da <next_sense_cond_call_handler+0x25e>
    78ca:	2e02      	cmp	r6, #2
    78cc:	d003      	beq.n	78d6 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    78ce:	2e03      	cmp	r6, #3
    78d0:	d008      	beq.n	78e4 <next_sense_cond_call_handler+0x268>
}
    78d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    78d6:	2d01      	cmp	r5, #1
    78d8:	d1f9      	bne.n	78ce <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    78da:	4629      	mov	r1, r5
    78dc:	4620      	mov	r0, r4
    78de:	f7ff fde1 	bl	74a4 <call_handler>
}
    78e2:	e7f6      	b.n	78d2 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    78e4:	2d02      	cmp	r5, #2
    78e6:	d1f4      	bne.n	78d2 <next_sense_cond_call_handler+0x256>
    78e8:	e7f7      	b.n	78da <next_sense_cond_call_handler+0x25e>
    78ea:	bf00      	nop
    78ec:	0000e8ec 	.word	0x0000e8ec
    78f0:	0000d1f0 	.word	0x0000d1f0
    78f4:	0000d02c 	.word	0x0000d02c
    78f8:	0000e920 	.word	0x0000e920
    78fc:	50000300 	.word	0x50000300

00007900 <port_event_handle>:
{
    7900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7904:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7906:	4a65      	ldr	r2, [pc, #404]	; (7a9c <port_event_handle+0x19c>)
    7908:	466b      	mov	r3, sp
    790a:	e892 0003 	ldmia.w	r2, {r0, r1}
    790e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7912:	2300      	movs	r3, #0
    7914:	a802      	add	r0, sp, #8
    7916:	e00b      	b.n	7930 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    7918:	aa04      	add	r2, sp, #16
    791a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    791e:	f852 2c10 	ldr.w	r2, [r2, #-16]
    7922:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7926:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    792a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    792e:	3301      	adds	r3, #1
    7930:	2b01      	cmp	r3, #1
    7932:	d9f1      	bls.n	7918 <port_event_handle+0x18>
    7934:	e0ad      	b.n	7a92 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    7936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    793a:	e07f      	b.n	7a3c <port_event_handle+0x13c>
    switch (port)
    793c:	2300      	movs	r3, #0
    793e:	e07d      	b.n	7a3c <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7940:	4f57      	ldr	r7, [pc, #348]	; (7aa0 <port_event_handle+0x1a0>)
    7942:	f240 2329 	movw	r3, #553	; 0x229
    7946:	463a      	mov	r2, r7
    7948:	4956      	ldr	r1, [pc, #344]	; (7aa4 <port_event_handle+0x1a4>)
    794a:	4857      	ldr	r0, [pc, #348]	; (7aa8 <port_event_handle+0x1a8>)
    794c:	f004 f990 	bl	bc70 <assert_print>
    7950:	f240 2129 	movw	r1, #553	; 0x229
    7954:	4638      	mov	r0, r7
    7956:	f004 f984 	bl	bc62 <assert_post_action>
    795a:	e076      	b.n	7a4a <port_event_handle+0x14a>
        case 0: return NRF_P0;
    795c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7960:	e000      	b.n	7964 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7962:	4b52      	ldr	r3, [pc, #328]	; (7aac <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7964:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7968:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    796c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    7970:	4631      	mov	r1, r6
    7972:	4620      	mov	r0, r4
    7974:	f7ff fe82 	bl	767c <next_sense_cond_call_handler>
    switch (port)
    7978:	0963      	lsrs	r3, r4, #5
    797a:	d01f      	beq.n	79bc <port_event_handle+0xbc>
    797c:	2b01      	cmp	r3, #1
    797e:	d120      	bne.n	79c2 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    7980:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7984:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7988:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    798a:	f013 0f01 	tst.w	r3, #1
    798e:	d01a      	beq.n	79c6 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    7990:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7994:	0964      	lsrs	r4, r4, #5
    7996:	d024      	beq.n	79e2 <port_event_handle+0xe2>
    7998:	2c01      	cmp	r4, #1
    799a:	d025      	beq.n	79e8 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    799c:	4c40      	ldr	r4, [pc, #256]	; (7aa0 <port_event_handle+0x1a0>)
    799e:	f240 232e 	movw	r3, #558	; 0x22e
    79a2:	4622      	mov	r2, r4
    79a4:	4942      	ldr	r1, [pc, #264]	; (7ab0 <port_event_handle+0x1b0>)
    79a6:	4840      	ldr	r0, [pc, #256]	; (7aa8 <port_event_handle+0x1a8>)
    79a8:	f004 f962 	bl	bc70 <assert_print>
    79ac:	f240 212e 	movw	r1, #558	; 0x22e
    79b0:	4620      	mov	r0, r4
    79b2:	f004 f956 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    79b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    79ba:	e016      	b.n	79ea <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    79bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    79c0:	e7e0      	b.n	7984 <port_event_handle+0x84>
    switch (port)
    79c2:	2300      	movs	r3, #0
    79c4:	e7de      	b.n	7984 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    79c6:	4e36      	ldr	r6, [pc, #216]	; (7aa0 <port_event_handle+0x1a0>)
    79c8:	f240 2329 	movw	r3, #553	; 0x229
    79cc:	4632      	mov	r2, r6
    79ce:	4935      	ldr	r1, [pc, #212]	; (7aa4 <port_event_handle+0x1a4>)
    79d0:	4835      	ldr	r0, [pc, #212]	; (7aa8 <port_event_handle+0x1a8>)
    79d2:	f004 f94d 	bl	bc70 <assert_print>
    79d6:	f240 2129 	movw	r1, #553	; 0x229
    79da:	4630      	mov	r0, r6
    79dc:	f004 f941 	bl	bc62 <assert_post_action>
    79e0:	e7d6      	b.n	7990 <port_event_handle+0x90>
        case 0: return NRF_P0;
    79e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    79e6:	e000      	b.n	79ea <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79e8:	4a30      	ldr	r2, [pc, #192]	; (7aac <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    79ea:	2301      	movs	r3, #1
    79ec:	40b3      	lsls	r3, r6
    79ee:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    79f2:	ab04      	add	r3, sp, #16
    79f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    79f8:	f853 4c08 	ldr.w	r4, [r3, #-8]
    79fc:	2c00      	cmp	r4, #0
    79fe:	d03b      	beq.n	7a78 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    7a00:	fa94 f4a4 	rbit	r4, r4
    7a04:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7a08:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7a0c:	f104 0208 	add.w	r2, r4, #8
    7a10:	4b28      	ldr	r3, [pc, #160]	; (7ab4 <port_event_handle+0x1b4>)
    7a12:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    7a16:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7a1a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    7a1c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7a20:	a802      	add	r0, sp, #8
    7a22:	2301      	movs	r3, #1
    7a24:	fa03 f202 	lsl.w	r2, r3, r2
    7a28:	5c43      	ldrb	r3, [r0, r1]
    7a2a:	ea23 0302 	bic.w	r3, r3, r2
    7a2e:	5443      	strb	r3, [r0, r1]
    switch (port)
    7a30:	0963      	lsrs	r3, r4, #5
    7a32:	d080      	beq.n	7936 <port_event_handle+0x36>
    7a34:	2b01      	cmp	r3, #1
    7a36:	d181      	bne.n	793c <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    7a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7a3c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7a40:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7a42:	f013 0f01 	tst.w	r3, #1
    7a46:	f43f af7b 	beq.w	7940 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    7a4a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a4e:	0963      	lsrs	r3, r4, #5
    7a50:	d084      	beq.n	795c <port_event_handle+0x5c>
    7a52:	2b01      	cmp	r3, #1
    7a54:	d085      	beq.n	7962 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    7a56:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7aa0 <port_event_handle+0x1a0>
    7a5a:	f240 232e 	movw	r3, #558	; 0x22e
    7a5e:	4642      	mov	r2, r8
    7a60:	4913      	ldr	r1, [pc, #76]	; (7ab0 <port_event_handle+0x1b0>)
    7a62:	4811      	ldr	r0, [pc, #68]	; (7aa8 <port_event_handle+0x1a8>)
    7a64:	f004 f904 	bl	bc70 <assert_print>
    7a68:	f240 212e 	movw	r1, #558	; 0x22e
    7a6c:	4640      	mov	r0, r8
    7a6e:	f004 f8f8 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    7a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7a76:	e775      	b.n	7964 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7a78:	3501      	adds	r5, #1
    7a7a:	2d01      	cmp	r5, #1
    7a7c:	d9b9      	bls.n	79f2 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7a7e:	4b0e      	ldr	r3, [pc, #56]	; (7ab8 <port_event_handle+0x1b8>)
    7a80:	2200      	movs	r2, #0
    7a82:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7a86:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    7a8a:	a802      	add	r0, sp, #8
    7a8c:	f7ff fdce 	bl	762c <latch_pending_read_and_check>
    7a90:	b108      	cbz	r0, 7a96 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7a92:	2500      	movs	r5, #0
    7a94:	e7f1      	b.n	7a7a <port_event_handle+0x17a>
}
    7a96:	b004      	add	sp, #16
    7a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a9c:	0000cf30 	.word	0x0000cf30
    7aa0:	0000e8ec 	.word	0x0000e8ec
    7aa4:	0000e920 	.word	0x0000e920
    7aa8:	0000d02c 	.word	0x0000d02c
    7aac:	50000300 	.word	0x50000300
    7ab0:	0000d1f0 	.word	0x0000d1f0
    7ab4:	200000f4 	.word	0x200000f4
    7ab8:	40006000 	.word	0x40006000

00007abc <nrfx_gpiote_input_configure>:
{
    7abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ac0:	4604      	mov	r4, r0
    7ac2:	4615      	mov	r5, r2
    7ac4:	461e      	mov	r6, r3
    if (p_input_config)
    7ac6:	2900      	cmp	r1, #0
    7ac8:	d064      	beq.n	7b94 <nrfx_gpiote_input_configure+0xd8>
    7aca:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    7acc:	f004 ff3a 	bl	c944 <pin_is_task_output>
    7ad0:	2800      	cmp	r0, #0
    7ad2:	f040 80cd 	bne.w	7c70 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    7ad6:	0963      	lsrs	r3, r4, #5
    7ad8:	d020      	beq.n	7b1c <nrfx_gpiote_input_configure+0x60>
    7ada:	2b01      	cmp	r3, #1
    7adc:	d121      	bne.n	7b22 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    7ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7ae2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ae6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ae8:	f013 0f01 	tst.w	r3, #1
    7aec:	d01b      	beq.n	7b26 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    7aee:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7af2:	0963      	lsrs	r3, r4, #5
    7af4:	d025      	beq.n	7b42 <nrfx_gpiote_input_configure+0x86>
    7af6:	2b01      	cmp	r3, #1
    7af8:	d026      	beq.n	7b48 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    7afa:	f8df 9184 	ldr.w	r9, [pc, #388]	; 7c80 <nrfx_gpiote_input_configure+0x1c4>
    7afe:	f240 232e 	movw	r3, #558	; 0x22e
    7b02:	464a      	mov	r2, r9
    7b04:	495f      	ldr	r1, [pc, #380]	; (7c84 <nrfx_gpiote_input_configure+0x1c8>)
    7b06:	4860      	ldr	r0, [pc, #384]	; (7c88 <nrfx_gpiote_input_configure+0x1cc>)
    7b08:	f004 f8b2 	bl	bc70 <assert_print>
    7b0c:	f240 212e 	movw	r1, #558	; 0x22e
    7b10:	4648      	mov	r0, r9
    7b12:	f004 f8a6 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    7b16:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7b1a:	e016      	b.n	7b4a <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    7b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b20:	e7df      	b.n	7ae2 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    7b22:	2300      	movs	r3, #0
    7b24:	e7dd      	b.n	7ae2 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b26:	4f56      	ldr	r7, [pc, #344]	; (7c80 <nrfx_gpiote_input_configure+0x1c4>)
    7b28:	f240 2329 	movw	r3, #553	; 0x229
    7b2c:	463a      	mov	r2, r7
    7b2e:	4957      	ldr	r1, [pc, #348]	; (7c8c <nrfx_gpiote_input_configure+0x1d0>)
    7b30:	4855      	ldr	r0, [pc, #340]	; (7c88 <nrfx_gpiote_input_configure+0x1cc>)
    7b32:	f004 f89d 	bl	bc70 <assert_print>
    7b36:	f240 2129 	movw	r1, #553	; 0x229
    7b3a:	4638      	mov	r0, r7
    7b3c:	f004 f891 	bl	bc62 <assert_post_action>
    7b40:	e7d5      	b.n	7aee <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    7b42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7b46:	e000      	b.n	7b4a <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b48:	4951      	ldr	r1, [pc, #324]	; (7c90 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7b4a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    7b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7b52:	f1b8 0f00 	cmp.w	r8, #0
    7b56:	d03f      	beq.n	7bd8 <nrfx_gpiote_input_configure+0x11c>
    7b58:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7b5a:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    7b5e:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7b62:	f1b8 0f00 	cmp.w	r8, #0
    7b66:	d039      	beq.n	7bdc <nrfx_gpiote_input_configure+0x120>
    7b68:	f898 2000 	ldrb.w	r2, [r8]
    7b6c:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7b6e:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    7b70:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7b74:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7b78:	4a46      	ldr	r2, [pc, #280]	; (7c94 <nrfx_gpiote_input_configure+0x1d8>)
    7b7a:	f104 0108 	add.w	r1, r4, #8
    7b7e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7b82:	f023 0302 	bic.w	r3, r3, #2
    7b86:	b29b      	uxth	r3, r3
    7b88:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7b8c:	f043 0301 	orr.w	r3, r3, #1
    7b90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    7b94:	b1bd      	cbz	r5, 7bc6 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7b96:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7b98:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    7b9c:	4620      	mov	r0, r4
    7b9e:	f7ff fc2f 	bl	7400 <pin_is_output>
    7ba2:	b1e8      	cbz	r0, 7be0 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    7ba4:	f1b8 0f00 	cmp.w	r8, #0
    7ba8:	d164      	bne.n	7c74 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7baa:	4a3a      	ldr	r2, [pc, #232]	; (7c94 <nrfx_gpiote_input_configure+0x1d8>)
    7bac:	f104 0108 	add.w	r1, r4, #8
    7bb0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7bb4:	f023 031c 	bic.w	r3, r3, #28
    7bb8:	b29b      	uxth	r3, r3
    7bba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7bbe:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    7bc2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    7bc6:	2e00      	cmp	r6, #0
    7bc8:	d058      	beq.n	7c7c <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7bca:	6872      	ldr	r2, [r6, #4]
    7bcc:	6831      	ldr	r1, [r6, #0]
    7bce:	4620      	mov	r0, r4
    7bd0:	f7ff fcd4 	bl	757c <pin_handler_set>
}
    7bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7bd8:	2200      	movs	r2, #0
    7bda:	e7be      	b.n	7b5a <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7bdc:	2200      	movs	r2, #0
    7bde:	e7c6      	b.n	7b6e <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7be0:	4a2c      	ldr	r2, [pc, #176]	; (7c94 <nrfx_gpiote_input_configure+0x1d8>)
    7be2:	f104 0108 	add.w	r1, r4, #8
    7be6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7bea:	f023 0320 	bic.w	r3, r3, #32
    7bee:	04db      	lsls	r3, r3, #19
    7bf0:	0cdb      	lsrs	r3, r3, #19
    7bf2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    7bf6:	f1b8 0f00 	cmp.w	r8, #0
    7bfa:	d0d6      	beq.n	7baa <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    7bfc:	2f03      	cmp	r7, #3
    7bfe:	d83b      	bhi.n	7c78 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7c00:	686b      	ldr	r3, [r5, #4]
    7c02:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7c04:	b937      	cbnz	r7, 7c14 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    7c06:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    7c0a:	4b23      	ldr	r3, [pc, #140]	; (7c98 <nrfx_gpiote_input_configure+0x1dc>)
    7c0c:	2200      	movs	r2, #0
    7c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    7c12:	e7ca      	b.n	7baa <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    7c14:	4638      	mov	r0, r7
    7c16:	f004 feac 	bl	c972 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7c1a:	4b1f      	ldr	r3, [pc, #124]	; (7c98 <nrfx_gpiote_input_configure+0x1dc>)
    7c1c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    7c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7c24:	f021 0103 	bic.w	r1, r1, #3
    7c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7c30:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7c34:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    7c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c3c:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    7c40:	0221      	lsls	r1, r4, #8
    7c42:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7c46:	0400      	lsls	r0, r0, #16
    7c48:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c4c:	4301      	orrs	r1, r0
    7c4e:	ea4c 0101 	orr.w	r1, ip, r1
    7c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7c56:	036b      	lsls	r3, r5, #13
    7c58:	b29b      	uxth	r3, r3
    7c5a:	4a0e      	ldr	r2, [pc, #56]	; (7c94 <nrfx_gpiote_input_configure+0x1d8>)
    7c5c:	f104 0108 	add.w	r1, r4, #8
    7c60:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    7c64:	4303      	orrs	r3, r0
    7c66:	f043 0320 	orr.w	r3, r3, #32
    7c6a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    7c6e:	e79c      	b.n	7baa <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    7c70:	480a      	ldr	r0, [pc, #40]	; (7c9c <nrfx_gpiote_input_configure+0x1e0>)
    7c72:	e7af      	b.n	7bd4 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    7c74:	4809      	ldr	r0, [pc, #36]	; (7c9c <nrfx_gpiote_input_configure+0x1e0>)
    7c76:	e7ad      	b.n	7bd4 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    7c78:	4808      	ldr	r0, [pc, #32]	; (7c9c <nrfx_gpiote_input_configure+0x1e0>)
    7c7a:	e7ab      	b.n	7bd4 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    7c7c:	4808      	ldr	r0, [pc, #32]	; (7ca0 <nrfx_gpiote_input_configure+0x1e4>)
    7c7e:	e7a9      	b.n	7bd4 <nrfx_gpiote_input_configure+0x118>
    7c80:	0000e8ec 	.word	0x0000e8ec
    7c84:	0000d1f0 	.word	0x0000d1f0
    7c88:	0000d02c 	.word	0x0000d02c
    7c8c:	0000e920 	.word	0x0000e920
    7c90:	50000300 	.word	0x50000300
    7c94:	200000f4 	.word	0x200000f4
    7c98:	40006000 	.word	0x40006000
    7c9c:	0bad0004 	.word	0x0bad0004
    7ca0:	0bad0000 	.word	0x0bad0000

00007ca4 <nrfx_gpiote_output_configure>:
{
    7ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ca8:	4604      	mov	r4, r0
    7caa:	4615      	mov	r5, r2
    if (p_config)
    7cac:	2900      	cmp	r1, #0
    7cae:	f000 8086 	beq.w	7dbe <nrfx_gpiote_output_configure+0x11a>
    7cb2:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7cb4:	f004 fe55 	bl	c962 <pin_is_input>
    7cb8:	b128      	cbz	r0, 7cc6 <nrfx_gpiote_output_configure+0x22>
    7cba:	4620      	mov	r0, r4
    7cbc:	f7ff fb8a 	bl	73d4 <pin_in_use_by_te>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	f040 80ce 	bne.w	7e62 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7cc6:	4620      	mov	r0, r4
    7cc8:	f7ff fb8e 	bl	73e8 <pin_has_trigger>
    7ccc:	b118      	cbz	r0, 7cd6 <nrfx_gpiote_output_configure+0x32>
    7cce:	787b      	ldrb	r3, [r7, #1]
    7cd0:	2b01      	cmp	r3, #1
    7cd2:	f000 80c8 	beq.w	7e66 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7cd6:	f107 0901 	add.w	r9, r7, #1
    7cda:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    7cde:	0963      	lsrs	r3, r4, #5
    7ce0:	d020      	beq.n	7d24 <nrfx_gpiote_output_configure+0x80>
    7ce2:	2b01      	cmp	r3, #1
    7ce4:	d121      	bne.n	7d2a <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    7ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7cea:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7cee:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7cf0:	f013 0f01 	tst.w	r3, #1
    7cf4:	d01b      	beq.n	7d2e <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    7cf6:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cfa:	0963      	lsrs	r3, r4, #5
    7cfc:	d025      	beq.n	7d4a <nrfx_gpiote_output_configure+0xa6>
    7cfe:	2b01      	cmp	r3, #1
    7d00:	d026      	beq.n	7d50 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    7d02:	f8df a170 	ldr.w	sl, [pc, #368]	; 7e74 <nrfx_gpiote_output_configure+0x1d0>
    7d06:	f240 232e 	movw	r3, #558	; 0x22e
    7d0a:	4652      	mov	r2, sl
    7d0c:	495a      	ldr	r1, [pc, #360]	; (7e78 <nrfx_gpiote_output_configure+0x1d4>)
    7d0e:	485b      	ldr	r0, [pc, #364]	; (7e7c <nrfx_gpiote_output_configure+0x1d8>)
    7d10:	f003 ffae 	bl	bc70 <assert_print>
    7d14:	f240 212e 	movw	r1, #558	; 0x22e
    7d18:	4650      	mov	r0, sl
    7d1a:	f003 ffa2 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    7d1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7d22:	e016      	b.n	7d52 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    7d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d28:	e7df      	b.n	7cea <nrfx_gpiote_output_configure+0x46>
    switch (port)
    7d2a:	2300      	movs	r3, #0
    7d2c:	e7dd      	b.n	7cea <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d2e:	4e51      	ldr	r6, [pc, #324]	; (7e74 <nrfx_gpiote_output_configure+0x1d0>)
    7d30:	f240 2329 	movw	r3, #553	; 0x229
    7d34:	4632      	mov	r2, r6
    7d36:	4952      	ldr	r1, [pc, #328]	; (7e80 <nrfx_gpiote_output_configure+0x1dc>)
    7d38:	4850      	ldr	r0, [pc, #320]	; (7e7c <nrfx_gpiote_output_configure+0x1d8>)
    7d3a:	f003 ff99 	bl	bc70 <assert_print>
    7d3e:	f240 2129 	movw	r1, #553	; 0x229
    7d42:	4630      	mov	r0, r6
    7d44:	f003 ff8d 	bl	bc62 <assert_post_action>
    7d48:	e7d5      	b.n	7cf6 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    7d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7d4e:	e000      	b.n	7d52 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d50:	4a4c      	ldr	r2, [pc, #304]	; (7e84 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d52:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    7d56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7d5a:	f1b9 0f00 	cmp.w	r9, #0
    7d5e:	d04b      	beq.n	7df8 <nrfx_gpiote_output_configure+0x154>
    7d60:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7d62:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7d66:	f1b8 0f00 	cmp.w	r8, #0
    7d6a:	d047      	beq.n	7dfc <nrfx_gpiote_output_configure+0x158>
    7d6c:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7d6e:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7d70:	2f00      	cmp	r7, #0
    7d72:	d045      	beq.n	7e00 <nrfx_gpiote_output_configure+0x15c>
    7d74:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7d78:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    7d7a:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7d7e:	f1b9 0f00 	cmp.w	r9, #0
    7d82:	d03f      	beq.n	7e04 <nrfx_gpiote_output_configure+0x160>
    7d84:	787b      	ldrb	r3, [r7, #1]
    7d86:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d88:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7d8c:	f1b8 0f00 	cmp.w	r8, #0
    7d90:	d03a      	beq.n	7e08 <nrfx_gpiote_output_configure+0x164>
    7d92:	78b8      	ldrb	r0, [r7, #2]
    7d94:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7d96:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7d98:	2f00      	cmp	r7, #0
    7d9a:	d037      	beq.n	7e0c <nrfx_gpiote_output_configure+0x168>
    7d9c:	7838      	ldrb	r0, [r7, #0]
    7d9e:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7da0:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7da2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    7da4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    7da8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7dac:	4a36      	ldr	r2, [pc, #216]	; (7e88 <nrfx_gpiote_output_configure+0x1e4>)
    7dae:	f104 0108 	add.w	r1, r4, #8
    7db2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7db6:	f043 0303 	orr.w	r3, r3, #3
    7dba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    7dbe:	2d00      	cmp	r5, #0
    7dc0:	d053      	beq.n	7e6a <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    7dc2:	4620      	mov	r0, r4
    7dc4:	f004 fdcd 	bl	c962 <pin_is_input>
    7dc8:	2800      	cmp	r0, #0
    7dca:	d150      	bne.n	7e6e <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    7dcc:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    7dce:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    7dd2:	4a2e      	ldr	r2, [pc, #184]	; (7e8c <nrfx_gpiote_output_configure+0x1e8>)
    7dd4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7dd8:	492b      	ldr	r1, [pc, #172]	; (7e88 <nrfx_gpiote_output_configure+0x1e4>)
    7dda:	f104 0008 	add.w	r0, r4, #8
    7dde:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    7de2:	f022 0220 	bic.w	r2, r2, #32
    7de6:	04d2      	lsls	r2, r2, #19
    7de8:	0cd2      	lsrs	r2, r2, #19
    7dea:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7dee:	786a      	ldrb	r2, [r5, #1]
    7df0:	b972      	cbnz	r2, 7e10 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    7df2:	4827      	ldr	r0, [pc, #156]	; (7e90 <nrfx_gpiote_output_configure+0x1ec>)
}
    7df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7df8:	2300      	movs	r3, #0
    7dfa:	e7b2      	b.n	7d62 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7dfc:	2000      	movs	r0, #0
    7dfe:	e7b6      	b.n	7d6e <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7e00:	2000      	movs	r0, #0
    7e02:	e7b9      	b.n	7d78 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7e04:	2300      	movs	r3, #0
    7e06:	e7bf      	b.n	7d88 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7e08:	2000      	movs	r0, #0
    7e0a:	e7c4      	b.n	7d96 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7e0c:	2000      	movs	r0, #0
    7e0e:	e7c7      	b.n	7da0 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7e10:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7e12:	481e      	ldr	r0, [pc, #120]	; (7e8c <nrfx_gpiote_output_configure+0x1e8>)
    7e14:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    7e18:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    7e1c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    7e20:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    7e24:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7e28:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    7e2c:	0221      	lsls	r1, r4, #8
    7e2e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7e32:	0412      	lsls	r2, r2, #16
    7e34:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7e38:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7e3a:	0539      	lsls	r1, r7, #20
    7e3c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7e40:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7e42:	4332      	orrs	r2, r6
    7e44:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7e48:	035b      	lsls	r3, r3, #13
    7e4a:	b29b      	uxth	r3, r3
    7e4c:	4a0e      	ldr	r2, [pc, #56]	; (7e88 <nrfx_gpiote_output_configure+0x1e4>)
    7e4e:	3408      	adds	r4, #8
    7e50:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    7e54:	430b      	orrs	r3, r1
    7e56:	f043 0320 	orr.w	r3, r3, #32
    7e5a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    7e5e:	480c      	ldr	r0, [pc, #48]	; (7e90 <nrfx_gpiote_output_configure+0x1ec>)
    7e60:	e7c8      	b.n	7df4 <nrfx_gpiote_output_configure+0x150>
    7e62:	480c      	ldr	r0, [pc, #48]	; (7e94 <nrfx_gpiote_output_configure+0x1f0>)
    7e64:	e7c6      	b.n	7df4 <nrfx_gpiote_output_configure+0x150>
    7e66:	480b      	ldr	r0, [pc, #44]	; (7e94 <nrfx_gpiote_output_configure+0x1f0>)
    7e68:	e7c4      	b.n	7df4 <nrfx_gpiote_output_configure+0x150>
    7e6a:	4809      	ldr	r0, [pc, #36]	; (7e90 <nrfx_gpiote_output_configure+0x1ec>)
    7e6c:	e7c2      	b.n	7df4 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    7e6e:	4809      	ldr	r0, [pc, #36]	; (7e94 <nrfx_gpiote_output_configure+0x1f0>)
    7e70:	e7c0      	b.n	7df4 <nrfx_gpiote_output_configure+0x150>
    7e72:	bf00      	nop
    7e74:	0000e8ec 	.word	0x0000e8ec
    7e78:	0000d1f0 	.word	0x0000d1f0
    7e7c:	0000d02c 	.word	0x0000d02c
    7e80:	0000e920 	.word	0x0000e920
    7e84:	50000300 	.word	0x50000300
    7e88:	200000f4 	.word	0x200000f4
    7e8c:	40006000 	.word	0x40006000
    7e90:	0bad0000 	.word	0x0bad0000
    7e94:	0bad0004 	.word	0x0bad0004

00007e98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7e98:	4b01      	ldr	r3, [pc, #4]	; (7ea0 <nrfx_gpiote_global_callback_set+0x8>)
    7e9a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    7e9c:	60d9      	str	r1, [r3, #12]
}
    7e9e:	4770      	bx	lr
    7ea0:	200000f4 	.word	0x200000f4

00007ea4 <nrfx_gpiote_channel_get>:
{
    7ea4:	b570      	push	{r4, r5, r6, lr}
    7ea6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    7ea8:	460d      	mov	r5, r1
    7eaa:	b159      	cbz	r1, 7ec4 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    7eac:	4620      	mov	r0, r4
    7eae:	f7ff fa91 	bl	73d4 <pin_in_use_by_te>
    7eb2:	b1a8      	cbz	r0, 7ee0 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7eb4:	3408      	adds	r4, #8
    7eb6:	4b0b      	ldr	r3, [pc, #44]	; (7ee4 <nrfx_gpiote_channel_get+0x40>)
    7eb8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7ebc:	0b5b      	lsrs	r3, r3, #13
    7ebe:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    7ec0:	4809      	ldr	r0, [pc, #36]	; (7ee8 <nrfx_gpiote_channel_get+0x44>)
}
    7ec2:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    7ec4:	4e09      	ldr	r6, [pc, #36]	; (7eec <nrfx_gpiote_channel_get+0x48>)
    7ec6:	f240 2335 	movw	r3, #565	; 0x235
    7eca:	4632      	mov	r2, r6
    7ecc:	4908      	ldr	r1, [pc, #32]	; (7ef0 <nrfx_gpiote_channel_get+0x4c>)
    7ece:	4809      	ldr	r0, [pc, #36]	; (7ef4 <nrfx_gpiote_channel_get+0x50>)
    7ed0:	f003 fece 	bl	bc70 <assert_print>
    7ed4:	f240 2135 	movw	r1, #565	; 0x235
    7ed8:	4630      	mov	r0, r6
    7eda:	f003 fec2 	bl	bc62 <assert_post_action>
    7ede:	e7e5      	b.n	7eac <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    7ee0:	4805      	ldr	r0, [pc, #20]	; (7ef8 <nrfx_gpiote_channel_get+0x54>)
    7ee2:	e7ee      	b.n	7ec2 <nrfx_gpiote_channel_get+0x1e>
    7ee4:	200000f4 	.word	0x200000f4
    7ee8:	0bad0000 	.word	0x0bad0000
    7eec:	0000eb10 	.word	0x0000eb10
    7ef0:	0000eb64 	.word	0x0000eb64
    7ef4:	0000d02c 	.word	0x0000d02c
    7ef8:	0bad0004 	.word	0x0bad0004

00007efc <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7efc:	4b10      	ldr	r3, [pc, #64]	; (7f40 <nrfx_gpiote_init+0x44>)
    7efe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7f02:	b10b      	cbz	r3, 7f08 <nrfx_gpiote_init+0xc>
        return err_code;
    7f04:	480f      	ldr	r0, [pc, #60]	; (7f44 <nrfx_gpiote_init+0x48>)
}
    7f06:	4770      	bx	lr
{
    7f08:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7f0a:	4c0d      	ldr	r4, [pc, #52]	; (7f40 <nrfx_gpiote_init+0x44>)
    7f0c:	2260      	movs	r2, #96	; 0x60
    7f0e:	2100      	movs	r1, #0
    7f10:	f104 0010 	add.w	r0, r4, #16
    7f14:	f004 f873 	bl	bffe <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7f18:	2006      	movs	r0, #6
    7f1a:	f7fc f851 	bl	3fc0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7f1e:	4b0a      	ldr	r3, [pc, #40]	; (7f48 <nrfx_gpiote_init+0x4c>)
    7f20:	2200      	movs	r2, #0
    7f22:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7f26:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7f2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7f2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7f32:	2301      	movs	r3, #1
    7f34:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7f38:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    7f3a:	4804      	ldr	r0, [pc, #16]	; (7f4c <nrfx_gpiote_init+0x50>)
}
    7f3c:	bd10      	pop	{r4, pc}
    7f3e:	bf00      	nop
    7f40:	200000f4 	.word	0x200000f4
    7f44:	0bad0005 	.word	0x0bad0005
    7f48:	40006000 	.word	0x40006000
    7f4c:	0bad0000 	.word	0x0bad0000

00007f50 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7f50:	4b03      	ldr	r3, [pc, #12]	; (7f60 <nrfx_gpiote_is_init+0x10>)
    7f52:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7f56:	3800      	subs	r0, #0
    7f58:	bf18      	it	ne
    7f5a:	2001      	movne	r0, #1
    7f5c:	4770      	bx	lr
    7f5e:	bf00      	nop
    7f60:	200000f4 	.word	0x200000f4

00007f64 <nrfx_gpiote_channel_free>:
{
    7f64:	b508      	push	{r3, lr}
    7f66:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7f68:	4801      	ldr	r0, [pc, #4]	; (7f70 <nrfx_gpiote_channel_free+0xc>)
    7f6a:	f7ff f855 	bl	7018 <nrfx_flag32_free>
}
    7f6e:	bd08      	pop	{r3, pc}
    7f70:	20000164 	.word	0x20000164

00007f74 <nrfx_gpiote_channel_alloc>:
{
    7f74:	b508      	push	{r3, lr}
    7f76:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7f78:	4801      	ldr	r0, [pc, #4]	; (7f80 <nrfx_gpiote_channel_alloc+0xc>)
    7f7a:	f7ff f825 	bl	6fc8 <nrfx_flag32_alloc>
}
    7f7e:	bd08      	pop	{r3, pc}
    7f80:	20000164 	.word	0x20000164

00007f84 <nrfx_gpiote_trigger_enable>:
{
    7f84:	b570      	push	{r4, r5, r6, lr}
    7f86:	4604      	mov	r4, r0
    7f88:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    7f8a:	f7ff fa2d 	bl	73e8 <pin_has_trigger>
    7f8e:	b1b8      	cbz	r0, 7fc0 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7f90:	4620      	mov	r0, r4
    7f92:	f7ff fa1f 	bl	73d4 <pin_in_use_by_te>
    7f96:	b118      	cbz	r0, 7fa0 <nrfx_gpiote_trigger_enable+0x1c>
    7f98:	4620      	mov	r0, r4
    7f9a:	f004 fce2 	bl	c962 <pin_is_input>
    7f9e:	b9e8      	cbnz	r0, 7fdc <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    7fa0:	2d00      	cmp	r5, #0
    7fa2:	d04c      	beq.n	803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7fa4:	f104 0308 	add.w	r3, r4, #8
    7fa8:	4a70      	ldr	r2, [pc, #448]	; (816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>)
    7faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7fae:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7fb2:	2b04      	cmp	r3, #4
    7fb4:	f000 8092 	beq.w	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7fb8:	2b05      	cmp	r3, #5
    7fba:	d14e      	bne.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7fbc:	2602      	movs	r6, #2
    7fbe:	e08e      	b.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
    NRFX_ASSERT(pin_has_trigger(pin));
    7fc0:	4e6b      	ldr	r6, [pc, #428]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    7fc2:	f240 33df 	movw	r3, #991	; 0x3df
    7fc6:	4632      	mov	r2, r6
    7fc8:	496a      	ldr	r1, [pc, #424]	; (8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>)
    7fca:	486b      	ldr	r0, [pc, #428]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    7fcc:	f003 fe50 	bl	bc70 <assert_print>
    7fd0:	f240 31df 	movw	r1, #991	; 0x3df
    7fd4:	4630      	mov	r0, r6
    7fd6:	f003 fe44 	bl	bc62 <assert_post_action>
    7fda:	e7d9      	b.n	7f90 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    7fdc:	4620      	mov	r0, r4
    7fde:	f7ff fa19 	bl	7414 <pin_te_get>
    7fe2:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    7fe4:	2807      	cmp	r0, #7
    7fe6:	d81c      	bhi.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7fe8:	00a3      	lsls	r3, r4, #2
    7fea:	f503 7380 	add.w	r3, r3, #256	; 0x100
    7fee:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    7ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7ff4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7ff8:	2200      	movs	r2, #0
    7ffa:	601a      	str	r2, [r3, #0]
    7ffc:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7ffe:	4a5f      	ldr	r2, [pc, #380]	; (817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    8000:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    8004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8008:	f043 0301 	orr.w	r3, r3, #1
    800c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    8010:	2d00      	cmp	r5, #0
    8012:	f000 80a9 	beq.w	8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8016:	2001      	movs	r0, #1
    8018:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    801c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    8020:	e0a2      	b.n	8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    8022:	4e57      	ldr	r6, [pc, #348]	; (8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    8024:	f44f 7323 	mov.w	r3, #652	; 0x28c
    8028:	4632      	mov	r2, r6
    802a:	4956      	ldr	r1, [pc, #344]	; (8184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    802c:	4852      	ldr	r0, [pc, #328]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    802e:	f003 fe1f 	bl	bc70 <assert_print>
    8032:	f44f 7123 	mov.w	r1, #652	; 0x28c
    8036:	4630      	mov	r0, r6
    8038:	f003 fe13 	bl	bc62 <assert_post_action>
    803c:	e7d4      	b.n	7fe8 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    803e:	4d4c      	ldr	r5, [pc, #304]	; (8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>)
    8040:	f240 33ee 	movw	r3, #1006	; 0x3ee
    8044:	462a      	mov	r2, r5
    8046:	4950      	ldr	r1, [pc, #320]	; (8188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>)
    8048:	484b      	ldr	r0, [pc, #300]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    804a:	f003 fe11 	bl	bc70 <assert_print>
    804e:	f240 31ee 	movw	r1, #1006	; 0x3ee
    8052:	4628      	mov	r0, r5
    8054:	f003 fe05 	bl	bc62 <assert_post_action>
    8058:	e7a4      	b.n	7fa4 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    805a:	0963      	lsrs	r3, r4, #5
    805c:	d01f      	beq.n	809e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    805e:	2b01      	cmp	r3, #1
    8060:	d120      	bne.n	80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
            mask = P1_FEATURE_PINS_PRESENT;
    8062:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8066:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    806a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    806c:	f013 0f01 	tst.w	r3, #1
    8070:	d01a      	beq.n	80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    *p_pin = pin_number & 0x1F;
    8072:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8076:	0963      	lsrs	r3, r4, #5
    8078:	d024      	beq.n	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    807a:	2b01      	cmp	r3, #1
    807c:	d025      	beq.n	80ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
            NRFX_ASSERT(0);
    807e:	4e43      	ldr	r6, [pc, #268]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8080:	f240 232e 	movw	r3, #558	; 0x22e
    8084:	4632      	mov	r2, r6
    8086:	4942      	ldr	r1, [pc, #264]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    8088:	483b      	ldr	r0, [pc, #236]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    808a:	f003 fdf1 	bl	bc70 <assert_print>
    808e:	f240 212e 	movw	r1, #558	; 0x22e
    8092:	4630      	mov	r0, r6
    8094:	f003 fde5 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    8098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    809c:	e016      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
            mask = P0_FEATURE_PINS_PRESENT;
    809e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80a2:	e7e0      	b.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    switch (port)
    80a4:	2300      	movs	r3, #0
    80a6:	e7de      	b.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    80a8:	4d38      	ldr	r5, [pc, #224]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    80aa:	f240 2329 	movw	r3, #553	; 0x229
    80ae:	462a      	mov	r2, r5
    80b0:	4938      	ldr	r1, [pc, #224]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    80b2:	4831      	ldr	r0, [pc, #196]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    80b4:	f003 fddc 	bl	bc70 <assert_print>
    80b8:	f240 2129 	movw	r1, #553	; 0x229
    80bc:	4628      	mov	r0, r5
    80be:	f003 fdd0 	bl	bc62 <assert_post_action>
    80c2:	e7d6      	b.n	8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
        case 0: return NRF_P0;
    80c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    80c8:	e000      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80ca:	4b33      	ldr	r3, [pc, #204]	; (8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>)
    return p_reg->IN;
    80cc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    80d0:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    80d2:	f013 0f01 	tst.w	r3, #1
    80d6:	d024      	beq.n	8122 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122>
    80d8:	2603      	movs	r6, #3
    80da:	e000      	b.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    80dc:	2603      	movs	r6, #3
    switch (port)
    80de:	0963      	lsrs	r3, r4, #5
    80e0:	d021      	beq.n	8126 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x126>
    80e2:	2b01      	cmp	r3, #1
    80e4:	d122      	bne.n	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
            mask = P1_FEATURE_PINS_PRESENT;
    80e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    80ea:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    80ee:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    80f0:	f013 0f01 	tst.w	r3, #1
    80f4:	d01c      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    *p_pin = pin_number & 0x1F;
    80f6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80fa:	0964      	lsrs	r4, r4, #5
    80fc:	d026      	beq.n	814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    80fe:	2c01      	cmp	r4, #1
    8100:	d027      	beq.n	8152 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152>
            NRFX_ASSERT(0);
    8102:	4c22      	ldr	r4, [pc, #136]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8104:	f240 232e 	movw	r3, #558	; 0x22e
    8108:	4622      	mov	r2, r4
    810a:	4921      	ldr	r1, [pc, #132]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    810c:	481a      	ldr	r0, [pc, #104]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    810e:	f003 fdaf 	bl	bc70 <assert_print>
    8112:	f240 212e 	movw	r1, #558	; 0x22e
    8116:	4620      	mov	r0, r4
    8118:	f003 fda3 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    811c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8120:	e018      	b.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8122:	2602      	movs	r6, #2
    8124:	e7db      	b.n	80de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde>
            mask = P0_FEATURE_PINS_PRESENT;
    8126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    812a:	e7de      	b.n	80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    switch (port)
    812c:	2300      	movs	r3, #0
    812e:	e7dc      	b.n	80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8130:	4d16      	ldr	r5, [pc, #88]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8132:	f240 2329 	movw	r3, #553	; 0x229
    8136:	462a      	mov	r2, r5
    8138:	4916      	ldr	r1, [pc, #88]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    813a:	480f      	ldr	r0, [pc, #60]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    813c:	f003 fd98 	bl	bc70 <assert_print>
    8140:	f240 2129 	movw	r1, #553	; 0x229
    8144:	4628      	mov	r0, r5
    8146:	f003 fd8c 	bl	bc62 <assert_post_action>
    814a:	e7d4      	b.n	80f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6>
        case 0: return NRF_P0;
    814c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8150:	e000      	b.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8152:	4911      	ldr	r1, [pc, #68]	; (8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8154:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    8158:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    815c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8160:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    8164:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    8168:	bd70      	pop	{r4, r5, r6, pc}
    816a:	bf00      	nop
    816c:	200000f4 	.word	0x200000f4
    8170:	0000eb10 	.word	0x0000eb10
    8174:	0000ebb4 	.word	0x0000ebb4
    8178:	0000d02c 	.word	0x0000d02c
    817c:	40006000 	.word	0x40006000
    8180:	0000eb70 	.word	0x0000eb70
    8184:	0000eba8 	.word	0x0000eba8
    8188:	0000ebcc 	.word	0x0000ebcc
    818c:	0000e8ec 	.word	0x0000e8ec
    8190:	0000d1f0 	.word	0x0000d1f0
    8194:	0000e920 	.word	0x0000e920
    8198:	50000300 	.word	0x50000300

0000819c <nrfx_gpiote_trigger_disable>:
{
    819c:	b538      	push	{r3, r4, r5, lr}
    819e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    81a0:	f7ff f918 	bl	73d4 <pin_in_use_by_te>
    81a4:	b1a0      	cbz	r0, 81d0 <nrfx_gpiote_trigger_disable+0x34>
    81a6:	4620      	mov	r0, r4
    81a8:	f004 fbdb 	bl	c962 <pin_is_input>
    81ac:	b180      	cbz	r0, 81d0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    81ae:	4620      	mov	r0, r4
    81b0:	f7ff f930 	bl	7414 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    81b4:	2201      	movs	r2, #1
    81b6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    81b8:	4b26      	ldr	r3, [pc, #152]	; (8254 <nrfx_gpiote_trigger_disable+0xb8>)
    81ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    81be:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    81c2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    81c6:	f022 0203 	bic.w	r2, r2, #3
    81ca:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    81ce:	e040      	b.n	8252 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    81d0:	0963      	lsrs	r3, r4, #5
    81d2:	d01f      	beq.n	8214 <nrfx_gpiote_trigger_disable+0x78>
    81d4:	2b01      	cmp	r3, #1
    81d6:	d120      	bne.n	821a <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    81d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    81dc:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    81e0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81e2:	f013 0f01 	tst.w	r3, #1
    81e6:	d01a      	beq.n	821e <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    81e8:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81ec:	0964      	lsrs	r4, r4, #5
    81ee:	d024      	beq.n	823a <nrfx_gpiote_trigger_disable+0x9e>
    81f0:	2c01      	cmp	r4, #1
    81f2:	d025      	beq.n	8240 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    81f4:	4c18      	ldr	r4, [pc, #96]	; (8258 <nrfx_gpiote_trigger_disable+0xbc>)
    81f6:	f240 232e 	movw	r3, #558	; 0x22e
    81fa:	4622      	mov	r2, r4
    81fc:	4917      	ldr	r1, [pc, #92]	; (825c <nrfx_gpiote_trigger_disable+0xc0>)
    81fe:	4818      	ldr	r0, [pc, #96]	; (8260 <nrfx_gpiote_trigger_disable+0xc4>)
    8200:	f003 fd36 	bl	bc70 <assert_print>
    8204:	f240 212e 	movw	r1, #558	; 0x22e
    8208:	4620      	mov	r0, r4
    820a:	f003 fd2a 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    820e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8212:	e016      	b.n	8242 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    8214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8218:	e7e0      	b.n	81dc <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    821a:	2300      	movs	r3, #0
    821c:	e7de      	b.n	81dc <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    821e:	4d0e      	ldr	r5, [pc, #56]	; (8258 <nrfx_gpiote_trigger_disable+0xbc>)
    8220:	f240 2329 	movw	r3, #553	; 0x229
    8224:	462a      	mov	r2, r5
    8226:	490f      	ldr	r1, [pc, #60]	; (8264 <nrfx_gpiote_trigger_disable+0xc8>)
    8228:	480d      	ldr	r0, [pc, #52]	; (8260 <nrfx_gpiote_trigger_disable+0xc4>)
    822a:	f003 fd21 	bl	bc70 <assert_print>
    822e:	f240 2129 	movw	r1, #553	; 0x229
    8232:	4628      	mov	r0, r5
    8234:	f003 fd15 	bl	bc62 <assert_post_action>
    8238:	e7d6      	b.n	81e8 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    823a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    823e:	e000      	b.n	8242 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8240:	4909      	ldr	r1, [pc, #36]	; (8268 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8242:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    8246:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    824a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    824e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8252:	bd38      	pop	{r3, r4, r5, pc}
    8254:	40006000 	.word	0x40006000
    8258:	0000e8ec 	.word	0x0000e8ec
    825c:	0000d1f0 	.word	0x0000d1f0
    8260:	0000d02c 	.word	0x0000d02c
    8264:	0000e920 	.word	0x0000e920
    8268:	50000300 	.word	0x50000300

0000826c <nrfx_gpiote_pin_uninit>:
{
    826c:	b538      	push	{r3, r4, r5, lr}
    826e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8270:	f7ff f8a6 	bl	73c0 <pin_in_use>
    8274:	b908      	cbnz	r0, 827a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    8276:	4824      	ldr	r0, [pc, #144]	; (8308 <nrfx_gpiote_pin_uninit+0x9c>)
}
    8278:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    827a:	4620      	mov	r0, r4
    827c:	f7ff ff8e 	bl	819c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8280:	4620      	mov	r0, r4
    8282:	f7ff f95f 	bl	7544 <pin_handler_trigger_uninit>
    switch (port)
    8286:	0963      	lsrs	r3, r4, #5
    8288:	d01f      	beq.n	82ca <nrfx_gpiote_pin_uninit+0x5e>
    828a:	2b01      	cmp	r3, #1
    828c:	d120      	bne.n	82d0 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    828e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8292:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8296:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8298:	f013 0f01 	tst.w	r3, #1
    829c:	d01a      	beq.n	82d4 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    829e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82a2:	0964      	lsrs	r4, r4, #5
    82a4:	d024      	beq.n	82f0 <nrfx_gpiote_pin_uninit+0x84>
    82a6:	2c01      	cmp	r4, #1
    82a8:	d025      	beq.n	82f6 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    82aa:	4c18      	ldr	r4, [pc, #96]	; (830c <nrfx_gpiote_pin_uninit+0xa0>)
    82ac:	f240 232e 	movw	r3, #558	; 0x22e
    82b0:	4622      	mov	r2, r4
    82b2:	4917      	ldr	r1, [pc, #92]	; (8310 <nrfx_gpiote_pin_uninit+0xa4>)
    82b4:	4817      	ldr	r0, [pc, #92]	; (8314 <nrfx_gpiote_pin_uninit+0xa8>)
    82b6:	f003 fcdb 	bl	bc70 <assert_print>
    82ba:	f240 212e 	movw	r1, #558	; 0x22e
    82be:	4620      	mov	r0, r4
    82c0:	f003 fccf 	bl	bc62 <assert_post_action>
        case 0: return NRF_P0;
    82c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    82c8:	e016      	b.n	82f8 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    82ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82ce:	e7e0      	b.n	8292 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    82d0:	2300      	movs	r3, #0
    82d2:	e7de      	b.n	8292 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    82d4:	4d0d      	ldr	r5, [pc, #52]	; (830c <nrfx_gpiote_pin_uninit+0xa0>)
    82d6:	f240 2329 	movw	r3, #553	; 0x229
    82da:	462a      	mov	r2, r5
    82dc:	490e      	ldr	r1, [pc, #56]	; (8318 <nrfx_gpiote_pin_uninit+0xac>)
    82de:	480d      	ldr	r0, [pc, #52]	; (8314 <nrfx_gpiote_pin_uninit+0xa8>)
    82e0:	f003 fcc6 	bl	bc70 <assert_print>
    82e4:	f240 2129 	movw	r1, #553	; 0x229
    82e8:	4628      	mov	r0, r5
    82ea:	f003 fcba 	bl	bc62 <assert_post_action>
    82ee:	e7d6      	b.n	829e <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    82f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    82f4:	e000      	b.n	82f8 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82f6:	4b09      	ldr	r3, [pc, #36]	; (831c <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    82f8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    82fc:	2202      	movs	r2, #2
    82fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    8302:	4807      	ldr	r0, [pc, #28]	; (8320 <nrfx_gpiote_pin_uninit+0xb4>)
}
    8304:	e7b8      	b.n	8278 <nrfx_gpiote_pin_uninit+0xc>
    8306:	bf00      	nop
    8308:	0bad0004 	.word	0x0bad0004
    830c:	0000e8ec 	.word	0x0000e8ec
    8310:	0000d1f0 	.word	0x0000d1f0
    8314:	0000d02c 	.word	0x0000d02c
    8318:	0000e920 	.word	0x0000e920
    831c:	50000300 	.word	0x50000300
    8320:	0bad0000 	.word	0x0bad0000

00008324 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    8324:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8326:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    8328:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    832c:	2100      	movs	r1, #0
    uint32_t status = 0;
    832e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8330:	e003      	b.n	833a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    8332:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    8334:	3304      	adds	r3, #4
    8336:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8338:	3101      	adds	r1, #1
    833a:	2907      	cmp	r1, #7
    833c:	d814      	bhi.n	8368 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    833e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8342:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    8346:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8348:	2a00      	cmp	r2, #0
    834a:	d0f2      	beq.n	8332 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    834c:	4a0c      	ldr	r2, [pc, #48]	; (8380 <nrfx_gpiote_irq_handler+0x5c>)
    834e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8352:	4210      	tst	r0, r2
    8354:	d0ed      	beq.n	8332 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    8356:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    835a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    835e:	2500      	movs	r5, #0
    8360:	6015      	str	r5, [r2, #0]
    8362:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    8364:	4304      	orrs	r4, r0
    8366:	e7e4      	b.n	8332 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8368:	4b05      	ldr	r3, [pc, #20]	; (8380 <nrfx_gpiote_irq_handler+0x5c>)
    836a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    836e:	b91b      	cbnz	r3, 8378 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    8370:	4620      	mov	r0, r4
    8372:	f7ff f939 	bl	75e8 <gpiote_evt_handle>
}
    8376:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    8378:	f7ff fac2 	bl	7900 <port_event_handle>
    837c:	e7f8      	b.n	8370 <nrfx_gpiote_irq_handler+0x4c>
    837e:	bf00      	nop
    8380:	40006000 	.word	0x40006000

00008384 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    8384:	b508      	push	{r3, lr}
    8386:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    8388:	4801      	ldr	r0, [pc, #4]	; (8390 <nrfx_ppi_channel_alloc+0xc>)
    838a:	f7fe fe1d 	bl	6fc8 <nrfx_flag32_alloc>
}
    838e:	bd08      	pop	{r3, pc}
    8390:	20000170 	.word	0x20000170

00008394 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    8394:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    8396:	4c11      	ldr	r4, [pc, #68]	; (83dc <_DoInit+0x48>)
    8398:	2303      	movs	r3, #3
    839a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    839c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    839e:	4a10      	ldr	r2, [pc, #64]	; (83e0 <_DoInit+0x4c>)
    83a0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    83a2:	4b10      	ldr	r3, [pc, #64]	; (83e4 <_DoInit+0x50>)
    83a4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    83a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    83aa:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    83ac:	2300      	movs	r3, #0
    83ae:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    83b0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    83b2:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    83b4:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    83b6:	4a0c      	ldr	r2, [pc, #48]	; (83e8 <_DoInit+0x54>)
    83b8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    83ba:	2210      	movs	r2, #16
    83bc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    83be:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    83c0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    83c2:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    83c4:	4909      	ldr	r1, [pc, #36]	; (83ec <_DoInit+0x58>)
    83c6:	1de0      	adds	r0, r4, #7
    83c8:	f003 fda8 	bl	bf1c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    83cc:	4908      	ldr	r1, [pc, #32]	; (83f0 <_DoInit+0x5c>)
    83ce:	4620      	mov	r0, r4
    83d0:	f003 fda4 	bl	bf1c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    83d4:	2320      	movs	r3, #32
    83d6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    83d8:	bd10      	pop	{r4, pc}
    83da:	bf00      	nop
    83dc:	20000c9c 	.word	0x20000c9c
    83e0:	0000ebd8 	.word	0x0000ebd8
    83e4:	20000d54 	.word	0x20000d54
    83e8:	20000d44 	.word	0x20000d44
    83ec:	0000ebe4 	.word	0x0000ebe4
    83f0:	0000ebe8 	.word	0x0000ebe8

000083f4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    83f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    83f8:	4604      	mov	r4, r0
    83fa:	460e      	mov	r6, r1
    83fc:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    83fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    8402:	4a2d      	ldr	r2, [pc, #180]	; (84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8404:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8408:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    840a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    840c:	42bb      	cmp	r3, r7
    840e:	d84b      	bhi.n	84a8 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    8410:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8414:	4928      	ldr	r1, [pc, #160]	; (84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8416:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    841a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    841e:	eba8 0907 	sub.w	r9, r8, r7
    8422:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    8426:	4295      	cmp	r5, r2
    8428:	d904      	bls.n	8434 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    842a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    842c:	429d      	cmp	r5, r3
    842e:	d916      	bls.n	845e <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    8430:	2000      	movs	r0, #0
    8432:	e03e      	b.n	84b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8434:	f8df 8080 	ldr.w	r8, [pc, #128]	; 84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    8438:	1c63      	adds	r3, r4, #1
    843a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    843e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    8442:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    8444:	462a      	mov	r2, r5
    8446:	4631      	mov	r1, r6
    8448:	4438      	add	r0, r7
    844a:	f003 fda9 	bl	bfa0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    844e:	443d      	add	r5, r7
    8450:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8454:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    8458:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    845a:	2001      	movs	r0, #1
    845c:	e029      	b.n	84b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    845e:	1c43      	adds	r3, r0, #1
    8460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8464:	4a14      	ldr	r2, [pc, #80]	; (84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8466:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    846a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    846c:	464a      	mov	r2, r9
    846e:	4631      	mov	r1, r6
    8470:	4438      	add	r0, r7
    8472:	f003 fd95 	bl	bfa0 <memcpy>
      NumBytes -= Rem;
    8476:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    847a:	197f      	adds	r7, r7, r5
    847c:	d107      	bne.n	848e <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    847e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8482:	4b0d      	ldr	r3, [pc, #52]	; (84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8484:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    8488:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    848a:	2001      	movs	r0, #1
    848c:	e011      	b.n	84b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    848e:	1c63      	adds	r3, r4, #1
    8490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8494:	4a08      	ldr	r2, [pc, #32]	; (84b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8496:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    849a:	463a      	mov	r2, r7
    849c:	eb06 0109 	add.w	r1, r6, r9
    84a0:	6858      	ldr	r0, [r3, #4]
    84a2:	f003 fd7d 	bl	bfa0 <memcpy>
    84a6:	e7ea      	b.n	847e <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    84a8:	1bdb      	subs	r3, r3, r7
    84aa:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    84ac:	42ab      	cmp	r3, r5
    84ae:	d2c1      	bcs.n	8434 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    84b0:	2000      	movs	r0, #0
}
    84b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    84b6:	bf00      	nop
    84b8:	20000c9c 	.word	0x20000c9c

000084bc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    84bc:	4b06      	ldr	r3, [pc, #24]	; (84d8 <SEGGER_RTT_HasDataUp+0x1c>)
    84be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    84c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    84c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    84c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    84cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    84d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    84d2:	1a80      	subs	r0, r0, r2
    84d4:	4770      	bx	lr
    84d6:	bf00      	nop
    84d8:	20000c9c 	.word	0x20000c9c

000084dc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    84dc:	4b03      	ldr	r3, [pc, #12]	; (84ec <z_device_state_init+0x10>)

	while (dev < __device_end) {
    84de:	e000      	b.n	84e2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    84e0:	3318      	adds	r3, #24
	while (dev < __device_end) {
    84e2:	4a03      	ldr	r2, [pc, #12]	; (84f0 <z_device_state_init+0x14>)
    84e4:	4293      	cmp	r3, r2
    84e6:	d3fb      	bcc.n	84e0 <z_device_state_init+0x4>
	}
}
    84e8:	4770      	bx	lr
    84ea:	bf00      	nop
    84ec:	0000cc48 	.word	0x0000cc48
    84f0:	0000ccd8 	.word	0x0000ccd8

000084f4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    84f4:	b570      	push	{r4, r5, r6, lr}
    84f6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    84f8:	4b11      	ldr	r3, [pc, #68]	; (8540 <z_sys_init_run_level+0x4c>)
    84fa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    84fe:	e009      	b.n	8514 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    8500:	4240      	negs	r0, r0
    8502:	e017      	b.n	8534 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    8504:	68eb      	ldr	r3, [r5, #12]
    8506:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    8508:	68ea      	ldr	r2, [r5, #12]
    850a:	7853      	ldrb	r3, [r2, #1]
    850c:	f043 0301 	orr.w	r3, r3, #1
    8510:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8512:	3408      	adds	r4, #8
    8514:	1c73      	adds	r3, r6, #1
    8516:	4a0a      	ldr	r2, [pc, #40]	; (8540 <z_sys_init_run_level+0x4c>)
    8518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    851c:	42a3      	cmp	r3, r4
    851e:	d90d      	bls.n	853c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    8520:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    8522:	6823      	ldr	r3, [r4, #0]
    8524:	4628      	mov	r0, r5
    8526:	4798      	blx	r3
		if (dev != NULL) {
    8528:	2d00      	cmp	r5, #0
    852a:	d0f2      	beq.n	8512 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    852c:	2800      	cmp	r0, #0
    852e:	d0eb      	beq.n	8508 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    8530:	2800      	cmp	r0, #0
    8532:	dbe5      	blt.n	8500 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    8534:	28ff      	cmp	r0, #255	; 0xff
    8536:	dde5      	ble.n	8504 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    8538:	20ff      	movs	r0, #255	; 0xff
    853a:	e7e3      	b.n	8504 <z_sys_init_run_level+0x10>
		}
	}
}
    853c:	bd70      	pop	{r4, r5, r6, pc}
    853e:	bf00      	nop
    8540:	0000ebf0 	.word	0x0000ebf0

00008544 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    8544:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    8546:	4605      	mov	r5, r0
    8548:	b328      	cbz	r0, 8596 <z_impl_device_get_binding+0x52>
    854a:	7803      	ldrb	r3, [r0, #0]
    854c:	b32b      	cbz	r3, 859a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    854e:	4c14      	ldr	r4, [pc, #80]	; (85a0 <z_impl_device_get_binding+0x5c>)
    8550:	e000      	b.n	8554 <z_impl_device_get_binding+0x10>
    8552:	3418      	adds	r4, #24
    8554:	4b13      	ldr	r3, [pc, #76]	; (85a4 <z_impl_device_get_binding+0x60>)
    8556:	429c      	cmp	r4, r3
    8558:	d008      	beq.n	856c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    855a:	4620      	mov	r0, r4
    855c:	f004 fa18 	bl	c990 <z_device_is_ready>
    8560:	2800      	cmp	r0, #0
    8562:	d0f6      	beq.n	8552 <z_impl_device_get_binding+0xe>
    8564:	6823      	ldr	r3, [r4, #0]
    8566:	42ab      	cmp	r3, r5
    8568:	d1f3      	bne.n	8552 <z_impl_device_get_binding+0xe>
    856a:	e012      	b.n	8592 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    856c:	4c0c      	ldr	r4, [pc, #48]	; (85a0 <z_impl_device_get_binding+0x5c>)
    856e:	e000      	b.n	8572 <z_impl_device_get_binding+0x2e>
    8570:	3418      	adds	r4, #24
    8572:	4b0c      	ldr	r3, [pc, #48]	; (85a4 <z_impl_device_get_binding+0x60>)
    8574:	429c      	cmp	r4, r3
    8576:	d00b      	beq.n	8590 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8578:	4620      	mov	r0, r4
    857a:	f004 fa09 	bl	c990 <z_device_is_ready>
    857e:	2800      	cmp	r0, #0
    8580:	d0f6      	beq.n	8570 <z_impl_device_get_binding+0x2c>
    8582:	6821      	ldr	r1, [r4, #0]
    8584:	4628      	mov	r0, r5
    8586:	f003 fd00 	bl	bf8a <strcmp>
    858a:	2800      	cmp	r0, #0
    858c:	d1f0      	bne.n	8570 <z_impl_device_get_binding+0x2c>
    858e:	e000      	b.n	8592 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    8590:	2400      	movs	r4, #0
}
    8592:	4620      	mov	r0, r4
    8594:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8596:	4604      	mov	r4, r0
    8598:	e7fb      	b.n	8592 <z_impl_device_get_binding+0x4e>
    859a:	2400      	movs	r4, #0
    859c:	e7f9      	b.n	8592 <z_impl_device_get_binding+0x4e>
    859e:	bf00      	nop
    85a0:	0000cc48 	.word	0x0000cc48
    85a4:	0000ccd8 	.word	0x0000ccd8

000085a8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    85a8:	2804      	cmp	r0, #4
    85aa:	d80c      	bhi.n	85c6 <reason_to_str+0x1e>
    85ac:	e8df f000 	tbb	[pc, r0]
    85b0:	07050d03 	.word	0x07050d03
    85b4:	09          	.byte	0x09
    85b5:	00          	.byte	0x00
    85b6:	4806      	ldr	r0, [pc, #24]	; (85d0 <reason_to_str+0x28>)
    85b8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    85ba:	4806      	ldr	r0, [pc, #24]	; (85d4 <reason_to_str+0x2c>)
    85bc:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    85be:	4806      	ldr	r0, [pc, #24]	; (85d8 <reason_to_str+0x30>)
    85c0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    85c2:	4806      	ldr	r0, [pc, #24]	; (85dc <reason_to_str+0x34>)
    85c4:	4770      	bx	lr
	default:
		return "Unknown error";
    85c6:	4806      	ldr	r0, [pc, #24]	; (85e0 <reason_to_str+0x38>)
    85c8:	4770      	bx	lr
		return "Unhandled interrupt";
    85ca:	4806      	ldr	r0, [pc, #24]	; (85e4 <reason_to_str+0x3c>)
	}
}
    85cc:	4770      	bx	lr
    85ce:	bf00      	nop
    85d0:	0000ec58 	.word	0x0000ec58
    85d4:	0000ec2c 	.word	0x0000ec2c
    85d8:	0000ec3c 	.word	0x0000ec3c
    85dc:	0000ec48 	.word	0x0000ec48
    85e0:	0000ec08 	.word	0x0000ec08
    85e4:	0000ec18 	.word	0x0000ec18

000085e8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    85e8:	b130      	cbz	r0, 85f8 <thread_name_get+0x10>
{
    85ea:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    85ec:	f004 fa32 	bl	ca54 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    85f0:	b120      	cbz	r0, 85fc <thread_name_get+0x14>
    85f2:	7803      	ldrb	r3, [r0, #0]
    85f4:	b123      	cbz	r3, 8600 <thread_name_get+0x18>
}
    85f6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    85f8:	4802      	ldr	r0, [pc, #8]	; (8604 <thread_name_get+0x1c>)
}
    85fa:	4770      	bx	lr
		thread_name = "unknown";
    85fc:	4801      	ldr	r0, [pc, #4]	; (8604 <thread_name_get+0x1c>)
    85fe:	e7fa      	b.n	85f6 <thread_name_get+0xe>
    8600:	4800      	ldr	r0, [pc, #0]	; (8604 <thread_name_get+0x1c>)
	return thread_name;
    8602:	e7f8      	b.n	85f6 <thread_name_get+0xe>
    8604:	0000ec68 	.word	0x0000ec68

00008608 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8608:	b5f0      	push	{r4, r5, r6, r7, lr}
    860a:	b087      	sub	sp, #28
    860c:	4604      	mov	r4, r0
    860e:	460e      	mov	r6, r1
	__asm__ volatile(
    8610:	f04f 0320 	mov.w	r3, #32
    8614:	f3ef 8711 	mrs	r7, BASEPRI
    8618:	f383 8812 	msr	BASEPRI_MAX, r3
    861c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8620:	f002 f9d2 	bl	a9c8 <z_impl_z_current_get>
    8624:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8626:	4620      	mov	r0, r4
    8628:	f7ff ffbe 	bl	85a8 <reason_to_str>
    862c:	2300      	movs	r3, #0
    862e:	9305      	str	r3, [sp, #20]
    8630:	9004      	str	r0, [sp, #16]
    8632:	9403      	str	r4, [sp, #12]
    8634:	4a22      	ldr	r2, [pc, #136]	; (86c0 <z_fatal_error+0xb8>)
    8636:	9202      	str	r2, [sp, #8]
    8638:	9301      	str	r3, [sp, #4]
    863a:	9300      	str	r3, [sp, #0]
    863c:	2201      	movs	r2, #1
    863e:	4921      	ldr	r1, [pc, #132]	; (86c4 <z_fatal_error+0xbc>)
    8640:	4618      	mov	r0, r3
    8642:	f004 f9b2 	bl	c9aa <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    8646:	b11e      	cbz	r6, 8650 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    8648:	69f3      	ldr	r3, [r6, #28]
    864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    864e:	b9eb      	cbnz	r3, 868c <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8650:	4628      	mov	r0, r5
    8652:	f7ff ffc9 	bl	85e8 <thread_name_get>
    8656:	9004      	str	r0, [sp, #16]
    8658:	9503      	str	r5, [sp, #12]
    865a:	4b1b      	ldr	r3, [pc, #108]	; (86c8 <z_fatal_error+0xc0>)
    865c:	9302      	str	r3, [sp, #8]
    865e:	2000      	movs	r0, #0
    8660:	9001      	str	r0, [sp, #4]
    8662:	9000      	str	r0, [sp, #0]
    8664:	4603      	mov	r3, r0
    8666:	2201      	movs	r2, #1
    8668:	4916      	ldr	r1, [pc, #88]	; (86c4 <z_fatal_error+0xbc>)
    866a:	f004 f99e 	bl	c9aa <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    866e:	4631      	mov	r1, r6
    8670:	4620      	mov	r0, r4
    8672:	f7fe fba3 	bl	6dbc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8676:	2c04      	cmp	r4, #4
    8678:	d013      	beq.n	86a2 <z_fatal_error+0x9a>
	__asm__ volatile(
    867a:	f387 8811 	msr	BASEPRI, r7
    867e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8682:	4628      	mov	r0, r5
    8684:	f7fc f9f4 	bl	4a70 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8688:	b007      	add	sp, #28
    868a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    868c:	4b0f      	ldr	r3, [pc, #60]	; (86cc <z_fatal_error+0xc4>)
    868e:	9302      	str	r3, [sp, #8]
    8690:	2000      	movs	r0, #0
    8692:	9001      	str	r0, [sp, #4]
    8694:	9000      	str	r0, [sp, #0]
    8696:	4603      	mov	r3, r0
    8698:	2201      	movs	r2, #1
    869a:	490a      	ldr	r1, [pc, #40]	; (86c4 <z_fatal_error+0xbc>)
    869c:	f004 f985 	bl	c9aa <z_log_msg2_runtime_create>
    86a0:	e7d6      	b.n	8650 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    86a2:	4c0b      	ldr	r4, [pc, #44]	; (86d0 <z_fatal_error+0xc8>)
    86a4:	238f      	movs	r3, #143	; 0x8f
    86a6:	4622      	mov	r2, r4
    86a8:	490a      	ldr	r1, [pc, #40]	; (86d4 <z_fatal_error+0xcc>)
    86aa:	480b      	ldr	r0, [pc, #44]	; (86d8 <z_fatal_error+0xd0>)
    86ac:	f003 fae0 	bl	bc70 <assert_print>
    86b0:	480a      	ldr	r0, [pc, #40]	; (86dc <z_fatal_error+0xd4>)
    86b2:	f003 fadd 	bl	bc70 <assert_print>
    86b6:	218f      	movs	r1, #143	; 0x8f
    86b8:	4620      	mov	r0, r4
    86ba:	f003 fad2 	bl	bc62 <assert_post_action>
    86be:	e7dc      	b.n	867a <z_fatal_error+0x72>
    86c0:	0000ec70 	.word	0x0000ec70
    86c4:	0000ce88 	.word	0x0000ce88
    86c8:	0000ecbc 	.word	0x0000ecbc
    86cc:	0000ec98 	.word	0x0000ec98
    86d0:	0000ecd4 	.word	0x0000ecd4
    86d4:	0000ecf8 	.word	0x0000ecf8
    86d8:	0000d02c 	.word	0x0000d02c
    86dc:	0000ed18 	.word	0x0000ed18

000086e0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    86e0:	b510      	push	{r4, lr}
    86e2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    86e4:	4c11      	ldr	r4, [pc, #68]	; (872c <init_idle_thread+0x4c>)
    86e6:	23b0      	movs	r3, #176	; 0xb0
    86e8:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    86ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    86f0:	4b0f      	ldr	r3, [pc, #60]	; (8730 <init_idle_thread+0x50>)
    86f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    86f6:	4a0f      	ldr	r2, [pc, #60]	; (8734 <init_idle_thread+0x54>)
    86f8:	9205      	str	r2, [sp, #20]
    86fa:	2201      	movs	r2, #1
    86fc:	9204      	str	r2, [sp, #16]
    86fe:	220f      	movs	r2, #15
    8700:	9203      	str	r2, [sp, #12]
    8702:	2200      	movs	r2, #0
    8704:	9202      	str	r2, [sp, #8]
    8706:	9201      	str	r2, [sp, #4]
    8708:	9300      	str	r3, [sp, #0]
    870a:	4b0b      	ldr	r3, [pc, #44]	; (8738 <init_idle_thread+0x58>)
    870c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8710:	490a      	ldr	r1, [pc, #40]	; (873c <init_idle_thread+0x5c>)
    8712:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    8716:	fb0c 1100 	mla	r1, ip, r0, r1
    871a:	4620      	mov	r0, r4
    871c:	f000 fa76 	bl	8c0c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8720:	7b63      	ldrb	r3, [r4, #13]
    8722:	f023 0304 	bic.w	r3, r3, #4
    8726:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    8728:	b006      	add	sp, #24
    872a:	bd10      	pop	{r4, pc}
    872c:	20000490 	.word	0x20000490
    8730:	20001154 	.word	0x20001154
    8734:	0000ed50 	.word	0x0000ed50
    8738:	00008f21 	.word	0x00008f21
    873c:	20002420 	.word	0x20002420

00008740 <bg_thread_main>:
{
    8740:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8742:	4b0a      	ldr	r3, [pc, #40]	; (876c <bg_thread_main+0x2c>)
    8744:	2201      	movs	r2, #1
    8746:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8748:	2002      	movs	r0, #2
    874a:	f7ff fed3 	bl	84f4 <z_sys_init_run_level>
	boot_banner();
    874e:	f002 fe83 	bl	b458 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8752:	2003      	movs	r0, #3
    8754:	f7ff fece 	bl	84f4 <z_sys_init_run_level>
	z_init_static_threads();
    8758:	f000 fb68 	bl	8e2c <z_init_static_threads>
	main();
    875c:	f7f8 ff90 	bl	1680 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8760:	4a03      	ldr	r2, [pc, #12]	; (8770 <bg_thread_main+0x30>)
    8762:	7b13      	ldrb	r3, [r2, #12]
    8764:	f023 0301 	bic.w	r3, r3, #1
    8768:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    876a:	bd08      	pop	{r3, pc}
    876c:	20001386 	.word	0x20001386
    8770:	20000540 	.word	0x20000540

00008774 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    8774:	b508      	push	{r3, lr}
    8776:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8778:	4a01      	ldr	r2, [pc, #4]	; (8780 <switch_to_main_thread+0xc>)
    877a:	4802      	ldr	r0, [pc, #8]	; (8784 <switch_to_main_thread+0x10>)
    877c:	f7fb fd34 	bl	41e8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8780:	00008741 	.word	0x00008741
    8784:	20000540 	.word	0x20000540

00008788 <z_bss_zero>:
{
    8788:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    878a:	4803      	ldr	r0, [pc, #12]	; (8798 <z_bss_zero+0x10>)
    878c:	4a03      	ldr	r2, [pc, #12]	; (879c <z_bss_zero+0x14>)
    878e:	1a12      	subs	r2, r2, r0
    8790:	2100      	movs	r1, #0
    8792:	f004 f919 	bl	c9c8 <z_early_memset>
}
    8796:	bd08      	pop	{r3, pc}
    8798:	20000260 	.word	0x20000260
    879c:	20001388 	.word	0x20001388

000087a0 <z_init_cpu>:
{
    87a0:	b510      	push	{r4, lr}
    87a2:	4604      	mov	r4, r0
	init_idle_thread(id);
    87a4:	f7ff ff9c 	bl	86e0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    87a8:	490b      	ldr	r1, [pc, #44]	; (87d8 <z_init_cpu+0x38>)
    87aa:	23b0      	movs	r3, #176	; 0xb0
    87ac:	fb03 1104 	mla	r1, r3, r4, r1
    87b0:	4a0a      	ldr	r2, [pc, #40]	; (87dc <z_init_cpu+0x3c>)
    87b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    87b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    87ba:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    87bc:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    87be:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    87c2:	4b07      	ldr	r3, [pc, #28]	; (87e0 <z_init_cpu+0x40>)
    87c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    87c8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    87cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    87d0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    87d4:	6063      	str	r3, [r4, #4]
}
    87d6:	bd10      	pop	{r4, pc}
    87d8:	20000490 	.word	0x20000490
    87dc:	20001154 	.word	0x20001154
    87e0:	20002580 	.word	0x20002580

000087e4 <prepare_multithreading>:
{
    87e4:	b570      	push	{r4, r5, r6, lr}
    87e6:	b086      	sub	sp, #24
	z_sched_init();
    87e8:	f001 ff2a 	bl	a640 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    87ec:	4d10      	ldr	r5, [pc, #64]	; (8830 <prepare_multithreading+0x4c>)
    87ee:	4b11      	ldr	r3, [pc, #68]	; (8834 <prepare_multithreading+0x50>)
    87f0:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    87f2:	4b11      	ldr	r3, [pc, #68]	; (8838 <prepare_multithreading+0x54>)
    87f4:	9305      	str	r3, [sp, #20]
    87f6:	2301      	movs	r3, #1
    87f8:	9304      	str	r3, [sp, #16]
    87fa:	2400      	movs	r4, #0
    87fc:	9403      	str	r4, [sp, #12]
    87fe:	9402      	str	r4, [sp, #8]
    8800:	9401      	str	r4, [sp, #4]
    8802:	9400      	str	r4, [sp, #0]
    8804:	4b0d      	ldr	r3, [pc, #52]	; (883c <prepare_multithreading+0x58>)
    8806:	f44f 6280 	mov.w	r2, #1024	; 0x400
    880a:	490d      	ldr	r1, [pc, #52]	; (8840 <prepare_multithreading+0x5c>)
    880c:	4628      	mov	r0, r5
    880e:	f000 f9fd 	bl	8c0c <z_setup_new_thread>
    8812:	4606      	mov	r6, r0
    8814:	7b6b      	ldrb	r3, [r5, #13]
    8816:	f023 0304 	bic.w	r3, r3, #4
    881a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    881c:	4628      	mov	r0, r5
    881e:	f001 fa33 	bl	9c88 <z_ready_thread>
	z_init_cpu(0);
    8822:	4620      	mov	r0, r4
    8824:	f7ff ffbc 	bl	87a0 <z_init_cpu>
}
    8828:	4630      	mov	r0, r6
    882a:	b006      	add	sp, #24
    882c:	bd70      	pop	{r4, r5, r6, pc}
    882e:	bf00      	nop
    8830:	20000540 	.word	0x20000540
    8834:	20001154 	.word	0x20001154
    8838:	0000ed58 	.word	0x0000ed58
    883c:	00008741 	.word	0x00008741
    8840:	20002000 	.word	0x20002000

00008844 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8844:	b500      	push	{lr}
    8846:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8848:	4b1f      	ldr	r3, [pc, #124]	; (88c8 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    884a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    884e:	4c1f      	ldr	r4, [pc, #124]	; (88cc <z_cstart+0x88>)
    8850:	6963      	ldr	r3, [r4, #20]
    8852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8856:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8858:	23e0      	movs	r3, #224	; 0xe0
    885a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    885e:	2500      	movs	r5, #0
    8860:	77e5      	strb	r5, [r4, #31]
    8862:	7625      	strb	r5, [r4, #24]
    8864:	7665      	strb	r5, [r4, #25]
    8866:	76a5      	strb	r5, [r4, #26]
    8868:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    886c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    886e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8872:	6263      	str	r3, [r4, #36]	; 0x24
    8874:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8878:	f7fc f866 	bl	4948 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    887c:	f7fb fb38 	bl	3ef0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8884:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8886:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8888:	f7fc fa12 	bl	4cb0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    888c:	f7fc f90a 	bl	4aa4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8890:	f7fa fc5a 	bl	3148 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    8894:	2401      	movs	r4, #1
    8896:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    889a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    889e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    88a0:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    88a2:	4668      	mov	r0, sp
    88a4:	f002 fdd2 	bl	b44c <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    88a8:	4b09      	ldr	r3, [pc, #36]	; (88d0 <z_cstart+0x8c>)
    88aa:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    88ae:	f7ff fe15 	bl	84dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    88b2:	4628      	mov	r0, r5
    88b4:	f7ff fe1e 	bl	84f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    88b8:	4620      	mov	r0, r4
    88ba:	f7ff fe1b 	bl	84f4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    88be:	f7ff ff91 	bl	87e4 <prepare_multithreading>
    88c2:	f7ff ff57 	bl	8774 <switch_to_main_thread>
    88c6:	bf00      	nop
    88c8:	20002da0 	.word	0x20002da0
    88cc:	e000ed00 	.word	0xe000ed00
    88d0:	20001154 	.word	0x20001154

000088d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    88d4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    88d6:	4c10      	ldr	r4, [pc, #64]	; (8918 <init_mem_slab_module+0x44>)
	int rc = 0;
    88d8:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    88da:	e008      	b.n	88ee <init_mem_slab_module+0x1a>
    88dc:	4b0f      	ldr	r3, [pc, #60]	; (891c <init_mem_slab_module+0x48>)
    88de:	429c      	cmp	r4, r3
    88e0:	d217      	bcs.n	8912 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    88e2:	4620      	mov	r0, r4
    88e4:	f004 f878 	bl	c9d8 <create_free_list>
		if (rc < 0) {
    88e8:	1e05      	subs	r5, r0, #0
    88ea:	db12      	blt.n	8912 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    88ec:	3420      	adds	r4, #32
    88ee:	4b0b      	ldr	r3, [pc, #44]	; (891c <init_mem_slab_module+0x48>)
    88f0:	429c      	cmp	r4, r3
    88f2:	d9f3      	bls.n	88dc <init_mem_slab_module+0x8>
    88f4:	4e0a      	ldr	r6, [pc, #40]	; (8920 <init_mem_slab_module+0x4c>)
    88f6:	233d      	movs	r3, #61	; 0x3d
    88f8:	4632      	mov	r2, r6
    88fa:	490a      	ldr	r1, [pc, #40]	; (8924 <init_mem_slab_module+0x50>)
    88fc:	480a      	ldr	r0, [pc, #40]	; (8928 <init_mem_slab_module+0x54>)
    88fe:	f003 f9b7 	bl	bc70 <assert_print>
    8902:	480a      	ldr	r0, [pc, #40]	; (892c <init_mem_slab_module+0x58>)
    8904:	f003 f9b4 	bl	bc70 <assert_print>
    8908:	213d      	movs	r1, #61	; 0x3d
    890a:	4630      	mov	r0, r6
    890c:	f003 f9a9 	bl	bc62 <assert_post_action>
    8910:	e7e4      	b.n	88dc <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    8912:	4628      	mov	r0, r5
    8914:	bd70      	pop	{r4, r5, r6, pc}
    8916:	bf00      	nop
    8918:	200001f8 	.word	0x200001f8
    891c:	200001f8 	.word	0x200001f8
    8920:	0000ed64 	.word	0x0000ed64
    8924:	0000ed8c 	.word	0x0000ed8c
    8928:	0000d02c 	.word	0x0000d02c
    892c:	0000edac 	.word	0x0000edac

00008930 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8934:	b082      	sub	sp, #8
    8936:	4604      	mov	r4, r0
    8938:	460e      	mov	r6, r1
    893a:	4690      	mov	r8, r2
    893c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    893e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    8942:	f04f 0320 	mov.w	r3, #32
    8946:	f3ef 8711 	mrs	r7, BASEPRI
    894a:	f383 8812 	msr	BASEPRI_MAX, r3
    894e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8952:	4628      	mov	r0, r5
    8954:	f000 f8d8 	bl	8b08 <z_spin_lock_valid>
    8958:	b1c0      	cbz	r0, 898c <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    895a:	4628      	mov	r0, r5
    895c:	f000 f8f4 	bl	8b48 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8960:	69a1      	ldr	r1, [r4, #24]
    8962:	b321      	cbz	r1, 89ae <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    8964:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    8966:	69a3      	ldr	r3, [r4, #24]
    8968:	681b      	ldr	r3, [r3, #0]
    896a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    896c:	69e3      	ldr	r3, [r4, #28]
    896e:	3301      	adds	r3, #1
    8970:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8972:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8974:	4628      	mov	r0, r5
    8976:	f000 f8d7 	bl	8b28 <z_spin_unlock_valid>
    897a:	b388      	cbz	r0, 89e0 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    897c:	f387 8811 	msr	BASEPRI, r7
    8980:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    8984:	4620      	mov	r0, r4
    8986:	b002      	add	sp, #8
    8988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    898c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8a00 <k_mem_slab_alloc+0xd0>
    8990:	238e      	movs	r3, #142	; 0x8e
    8992:	4652      	mov	r2, sl
    8994:	491b      	ldr	r1, [pc, #108]	; (8a04 <k_mem_slab_alloc+0xd4>)
    8996:	481c      	ldr	r0, [pc, #112]	; (8a08 <k_mem_slab_alloc+0xd8>)
    8998:	f003 f96a 	bl	bc70 <assert_print>
    899c:	4629      	mov	r1, r5
    899e:	481b      	ldr	r0, [pc, #108]	; (8a0c <k_mem_slab_alloc+0xdc>)
    89a0:	f003 f966 	bl	bc70 <assert_print>
    89a4:	218e      	movs	r1, #142	; 0x8e
    89a6:	4650      	mov	r0, sl
    89a8:	f003 f95b 	bl	bc62 <assert_post_action>
    89ac:	e7d5      	b.n	895a <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    89ae:	ea59 0308 	orrs.w	r3, r9, r8
    89b2:	d104      	bne.n	89be <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    89b4:	2300      	movs	r3, #0
    89b6:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    89b8:	f06f 040b 	mvn.w	r4, #11
    89bc:	e7da      	b.n	8974 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    89be:	f8cd 8000 	str.w	r8, [sp]
    89c2:	f8cd 9004 	str.w	r9, [sp, #4]
    89c6:	4622      	mov	r2, r4
    89c8:	4639      	mov	r1, r7
    89ca:	4628      	mov	r0, r5
    89cc:	f001 fb38 	bl	a040 <z_pend_curr>
		if (result == 0) {
    89d0:	4604      	mov	r4, r0
    89d2:	2800      	cmp	r0, #0
    89d4:	d1d6      	bne.n	8984 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    89d6:	4b0e      	ldr	r3, [pc, #56]	; (8a10 <k_mem_slab_alloc+0xe0>)
    89d8:	689b      	ldr	r3, [r3, #8]
    89da:	695b      	ldr	r3, [r3, #20]
    89dc:	6033      	str	r3, [r6, #0]
		return result;
    89de:	e7d1      	b.n	8984 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89e0:	4e07      	ldr	r6, [pc, #28]	; (8a00 <k_mem_slab_alloc+0xd0>)
    89e2:	23b9      	movs	r3, #185	; 0xb9
    89e4:	4632      	mov	r2, r6
    89e6:	490b      	ldr	r1, [pc, #44]	; (8a14 <k_mem_slab_alloc+0xe4>)
    89e8:	4807      	ldr	r0, [pc, #28]	; (8a08 <k_mem_slab_alloc+0xd8>)
    89ea:	f003 f941 	bl	bc70 <assert_print>
    89ee:	4629      	mov	r1, r5
    89f0:	4809      	ldr	r0, [pc, #36]	; (8a18 <k_mem_slab_alloc+0xe8>)
    89f2:	f003 f93d 	bl	bc70 <assert_print>
    89f6:	21b9      	movs	r1, #185	; 0xb9
    89f8:	4630      	mov	r0, r6
    89fa:	f003 f932 	bl	bc62 <assert_post_action>
    89fe:	e7bd      	b.n	897c <k_mem_slab_alloc+0x4c>
    8a00:	0000d7f0 	.word	0x0000d7f0
    8a04:	0000d850 	.word	0x0000d850
    8a08:	0000d02c 	.word	0x0000d02c
    8a0c:	0000d868 	.word	0x0000d868
    8a10:	20001154 	.word	0x20001154
    8a14:	0000d820 	.word	0x0000d820
    8a18:	0000d838 	.word	0x0000d838

00008a1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a20:	4604      	mov	r4, r0
    8a22:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8a24:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    8a28:	f04f 0320 	mov.w	r3, #32
    8a2c:	f3ef 8711 	mrs	r7, BASEPRI
    8a30:	f383 8812 	msr	BASEPRI_MAX, r3
    8a34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a38:	4630      	mov	r0, r6
    8a3a:	f000 f865 	bl	8b08 <z_spin_lock_valid>
    8a3e:	b1b0      	cbz	r0, 8a6e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    8a40:	4630      	mov	r0, r6
    8a42:	f000 f881 	bl	8b48 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8a46:	69a3      	ldr	r3, [r4, #24]
    8a48:	b313      	cbz	r3, 8a90 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    8a4a:	682b      	ldr	r3, [r5, #0]
    8a4c:	69a2      	ldr	r2, [r4, #24]
    8a4e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8a50:	682b      	ldr	r3, [r5, #0]
    8a52:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8a54:	69e3      	ldr	r3, [r4, #28]
    8a56:	3b01      	subs	r3, #1
    8a58:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a5a:	4630      	mov	r0, r6
    8a5c:	f000 f864 	bl	8b28 <z_spin_unlock_valid>
    8a60:	b338      	cbz	r0, 8ab2 <k_mem_slab_free+0x96>
	__asm__ volatile(
    8a62:	f387 8811 	msr	BASEPRI, r7
    8a66:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a6e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8ad4 <k_mem_slab_free+0xb8>
    8a72:	238e      	movs	r3, #142	; 0x8e
    8a74:	4642      	mov	r2, r8
    8a76:	4918      	ldr	r1, [pc, #96]	; (8ad8 <k_mem_slab_free+0xbc>)
    8a78:	4818      	ldr	r0, [pc, #96]	; (8adc <k_mem_slab_free+0xc0>)
    8a7a:	f003 f8f9 	bl	bc70 <assert_print>
    8a7e:	4631      	mov	r1, r6
    8a80:	4817      	ldr	r0, [pc, #92]	; (8ae0 <k_mem_slab_free+0xc4>)
    8a82:	f003 f8f5 	bl	bc70 <assert_print>
    8a86:	218e      	movs	r1, #142	; 0x8e
    8a88:	4640      	mov	r0, r8
    8a8a:	f003 f8ea 	bl	bc62 <assert_post_action>
    8a8e:	e7d7      	b.n	8a40 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8a90:	4620      	mov	r0, r4
    8a92:	f001 fd71 	bl	a578 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8a96:	2800      	cmp	r0, #0
    8a98:	d0d7      	beq.n	8a4a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8a9a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8a9c:	2100      	movs	r1, #0
    8a9e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8aa2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8aa4:	f001 f8f0 	bl	9c88 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8aa8:	4639      	mov	r1, r7
    8aaa:	4630      	mov	r0, r6
    8aac:	f000 fe48 	bl	9740 <z_reschedule>
			return;
    8ab0:	e7db      	b.n	8a6a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ab2:	4c08      	ldr	r4, [pc, #32]	; (8ad4 <k_mem_slab_free+0xb8>)
    8ab4:	23b9      	movs	r3, #185	; 0xb9
    8ab6:	4622      	mov	r2, r4
    8ab8:	490a      	ldr	r1, [pc, #40]	; (8ae4 <k_mem_slab_free+0xc8>)
    8aba:	4808      	ldr	r0, [pc, #32]	; (8adc <k_mem_slab_free+0xc0>)
    8abc:	f003 f8d8 	bl	bc70 <assert_print>
    8ac0:	4631      	mov	r1, r6
    8ac2:	4809      	ldr	r0, [pc, #36]	; (8ae8 <k_mem_slab_free+0xcc>)
    8ac4:	f003 f8d4 	bl	bc70 <assert_print>
    8ac8:	21b9      	movs	r1, #185	; 0xb9
    8aca:	4620      	mov	r0, r4
    8acc:	f003 f8c9 	bl	bc62 <assert_post_action>
    8ad0:	e7c7      	b.n	8a62 <k_mem_slab_free+0x46>
    8ad2:	bf00      	nop
    8ad4:	0000d7f0 	.word	0x0000d7f0
    8ad8:	0000d850 	.word	0x0000d850
    8adc:	0000d02c 	.word	0x0000d02c
    8ae0:	0000d868 	.word	0x0000d868
    8ae4:	0000d820 	.word	0x0000d820
    8ae8:	0000d838 	.word	0x0000d838

00008aec <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    8aec:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8aee:	ea53 0102 	orrs.w	r1, r3, r2
    8af2:	d102      	bne.n	8afa <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    8af4:	f003 ffb0 	bl	ca58 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    8af8:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8afa:	4902      	ldr	r1, [pc, #8]	; (8b04 <schedule_new_thread+0x18>)
    8afc:	3018      	adds	r0, #24
    8afe:	f002 f86d 	bl	abdc <z_add_timeout>
    8b02:	e7f9      	b.n	8af8 <schedule_new_thread+0xc>
    8b04:	00009de5 	.word	0x00009de5

00008b08 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    8b08:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    8b0a:	b13b      	cbz	r3, 8b1c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    8b0c:	f003 0303 	and.w	r3, r3, #3
    8b10:	4a04      	ldr	r2, [pc, #16]	; (8b24 <z_spin_lock_valid+0x1c>)
    8b12:	7d12      	ldrb	r2, [r2, #20]
    8b14:	4293      	cmp	r3, r2
    8b16:	d003      	beq.n	8b20 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    8b18:	2001      	movs	r0, #1
    8b1a:	4770      	bx	lr
    8b1c:	2001      	movs	r0, #1
    8b1e:	4770      	bx	lr
			return false;
    8b20:	2000      	movs	r0, #0
}
    8b22:	4770      	bx	lr
    8b24:	20001154 	.word	0x20001154

00008b28 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    8b28:	6801      	ldr	r1, [r0, #0]
    8b2a:	4a06      	ldr	r2, [pc, #24]	; (8b44 <z_spin_unlock_valid+0x1c>)
    8b2c:	7d13      	ldrb	r3, [r2, #20]
    8b2e:	6892      	ldr	r2, [r2, #8]
    8b30:	4313      	orrs	r3, r2
    8b32:	4299      	cmp	r1, r3
    8b34:	d103      	bne.n	8b3e <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    8b36:	2300      	movs	r3, #0
    8b38:	6003      	str	r3, [r0, #0]
	return true;
    8b3a:	2001      	movs	r0, #1
    8b3c:	4770      	bx	lr
		return false;
    8b3e:	2000      	movs	r0, #0
}
    8b40:	4770      	bx	lr
    8b42:	bf00      	nop
    8b44:	20001154 	.word	0x20001154

00008b48 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    8b48:	4a02      	ldr	r2, [pc, #8]	; (8b54 <z_spin_lock_set_owner+0xc>)
    8b4a:	7d13      	ldrb	r3, [r2, #20]
    8b4c:	6892      	ldr	r2, [r2, #8]
    8b4e:	4313      	orrs	r3, r2
    8b50:	6003      	str	r3, [r0, #0]
}
    8b52:	4770      	bx	lr
    8b54:	20001154 	.word	0x20001154

00008b58 <z_thread_monitor_exit>:
{
    8b58:	b570      	push	{r4, r5, r6, lr}
    8b5a:	4604      	mov	r4, r0
	__asm__ volatile(
    8b5c:	f04f 0320 	mov.w	r3, #32
    8b60:	f3ef 8511 	mrs	r5, BASEPRI
    8b64:	f383 8812 	msr	BASEPRI_MAX, r3
    8b68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b6c:	481f      	ldr	r0, [pc, #124]	; (8bec <z_thread_monitor_exit+0x94>)
    8b6e:	f7ff ffcb 	bl	8b08 <z_spin_lock_valid>
    8b72:	b150      	cbz	r0, 8b8a <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    8b74:	481d      	ldr	r0, [pc, #116]	; (8bec <z_thread_monitor_exit+0x94>)
    8b76:	f7ff ffe7 	bl	8b48 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    8b7a:	4b1d      	ldr	r3, [pc, #116]	; (8bf0 <z_thread_monitor_exit+0x98>)
    8b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b7e:	42a3      	cmp	r3, r4
    8b80:	d114      	bne.n	8bac <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    8b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    8b84:	4b1a      	ldr	r3, [pc, #104]	; (8bf0 <z_thread_monitor_exit+0x98>)
    8b86:	629a      	str	r2, [r3, #40]	; 0x28
    8b88:	e017      	b.n	8bba <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b8a:	4e1a      	ldr	r6, [pc, #104]	; (8bf4 <z_thread_monitor_exit+0x9c>)
    8b8c:	238e      	movs	r3, #142	; 0x8e
    8b8e:	4632      	mov	r2, r6
    8b90:	4919      	ldr	r1, [pc, #100]	; (8bf8 <z_thread_monitor_exit+0xa0>)
    8b92:	481a      	ldr	r0, [pc, #104]	; (8bfc <z_thread_monitor_exit+0xa4>)
    8b94:	f003 f86c 	bl	bc70 <assert_print>
    8b98:	4914      	ldr	r1, [pc, #80]	; (8bec <z_thread_monitor_exit+0x94>)
    8b9a:	4819      	ldr	r0, [pc, #100]	; (8c00 <z_thread_monitor_exit+0xa8>)
    8b9c:	f003 f868 	bl	bc70 <assert_print>
    8ba0:	218e      	movs	r1, #142	; 0x8e
    8ba2:	4630      	mov	r0, r6
    8ba4:	f003 f85d 	bl	bc62 <assert_post_action>
    8ba8:	e7e4      	b.n	8b74 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    8baa:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    8bac:	b113      	cbz	r3, 8bb4 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    8bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    8bb0:	42a2      	cmp	r2, r4
    8bb2:	d1fa      	bne.n	8baa <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    8bb4:	b10b      	cbz	r3, 8bba <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    8bb6:	6f22      	ldr	r2, [r4, #112]	; 0x70
    8bb8:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bba:	480c      	ldr	r0, [pc, #48]	; (8bec <z_thread_monitor_exit+0x94>)
    8bbc:	f7ff ffb4 	bl	8b28 <z_spin_unlock_valid>
    8bc0:	b120      	cbz	r0, 8bcc <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    8bc2:	f385 8811 	msr	BASEPRI, r5
    8bc6:	f3bf 8f6f 	isb	sy
}
    8bca:	bd70      	pop	{r4, r5, r6, pc}
    8bcc:	4c09      	ldr	r4, [pc, #36]	; (8bf4 <z_thread_monitor_exit+0x9c>)
    8bce:	23b9      	movs	r3, #185	; 0xb9
    8bd0:	4622      	mov	r2, r4
    8bd2:	490c      	ldr	r1, [pc, #48]	; (8c04 <z_thread_monitor_exit+0xac>)
    8bd4:	4809      	ldr	r0, [pc, #36]	; (8bfc <z_thread_monitor_exit+0xa4>)
    8bd6:	f003 f84b 	bl	bc70 <assert_print>
    8bda:	4904      	ldr	r1, [pc, #16]	; (8bec <z_thread_monitor_exit+0x94>)
    8bdc:	480a      	ldr	r0, [pc, #40]	; (8c08 <z_thread_monitor_exit+0xb0>)
    8bde:	f003 f847 	bl	bc70 <assert_print>
    8be2:	21b9      	movs	r1, #185	; 0xb9
    8be4:	4620      	mov	r0, r4
    8be6:	f003 f83c 	bl	bc62 <assert_post_action>
    8bea:	e7ea      	b.n	8bc2 <z_thread_monitor_exit+0x6a>
    8bec:	20001180 	.word	0x20001180
    8bf0:	20001154 	.word	0x20001154
    8bf4:	0000d7f0 	.word	0x0000d7f0
    8bf8:	0000d850 	.word	0x0000d850
    8bfc:	0000d02c 	.word	0x0000d02c
    8c00:	0000d868 	.word	0x0000d868
    8c04:	0000d820 	.word	0x0000d820
    8c08:	0000d838 	.word	0x0000d838

00008c0c <z_setup_new_thread>:
{
    8c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c10:	b085      	sub	sp, #20
    8c12:	4604      	mov	r4, r0
    8c14:	460e      	mov	r6, r1
    8c16:	4690      	mov	r8, r2
    8c18:	461d      	mov	r5, r3
    8c1a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    8c1e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    8c22:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    8c24:	2f0f      	cmp	r7, #15
    8c26:	d05e      	beq.n	8ce6 <z_setup_new_thread+0xda>
    8c28:	f107 0310 	add.w	r3, r7, #16
    8c2c:	2b1e      	cmp	r3, #30
    8c2e:	d85e      	bhi.n	8cee <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8c30:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    8c34:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    8c36:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    8c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8c3a:	2204      	movs	r2, #4
    8c3c:	4639      	mov	r1, r7
    8c3e:	4620      	mov	r0, r4
    8c40:	f003 ff0e 	bl	ca60 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    8c44:	4642      	mov	r2, r8
    8c46:	4631      	mov	r1, r6
    8c48:	4620      	mov	r0, r4
    8c4a:	f003 feeb 	bl	ca24 <setup_thread_stack>
    8c4e:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c52:	9302      	str	r3, [sp, #8]
    8c54:	f8cd a004 	str.w	sl, [sp, #4]
    8c58:	f8cd b000 	str.w	fp, [sp]
    8c5c:	462b      	mov	r3, r5
    8c5e:	4602      	mov	r2, r0
    8c60:	4631      	mov	r1, r6
    8c62:	4620      	mov	r0, r4
    8c64:	f7fb fa76 	bl	4154 <arch_new_thread>
	new_thread->init_data = NULL;
    8c68:	2300      	movs	r3, #0
    8c6a:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    8c6c:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    8c6e:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    8c72:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    8c76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c78:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    8c7a:	f04f 0320 	mov.w	r3, #32
    8c7e:	f3ef 8611 	mrs	r6, BASEPRI
    8c82:	f383 8812 	msr	BASEPRI_MAX, r3
    8c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c8a:	4837      	ldr	r0, [pc, #220]	; (8d68 <z_setup_new_thread+0x15c>)
    8c8c:	f7ff ff3c 	bl	8b08 <z_spin_lock_valid>
    8c90:	2800      	cmp	r0, #0
    8c92:	d042      	beq.n	8d1a <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    8c94:	4d34      	ldr	r5, [pc, #208]	; (8d68 <z_setup_new_thread+0x15c>)
    8c96:	4628      	mov	r0, r5
    8c98:	f7ff ff56 	bl	8b48 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    8c9c:	4b33      	ldr	r3, [pc, #204]	; (8d6c <z_setup_new_thread+0x160>)
    8c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8ca0:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    8ca2:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ca4:	4628      	mov	r0, r5
    8ca6:	f7ff ff3f 	bl	8b28 <z_spin_unlock_valid>
    8caa:	2800      	cmp	r0, #0
    8cac:	d045      	beq.n	8d3a <z_setup_new_thread+0x12e>
	__asm__ volatile(
    8cae:	f386 8811 	msr	BASEPRI, r6
    8cb2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    8cb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d04e      	beq.n	8d5a <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    8cbc:	221f      	movs	r2, #31
    8cbe:	4619      	mov	r1, r3
    8cc0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8cc4:	f003 f934 	bl	bf30 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    8cc8:	2300      	movs	r3, #0
    8cca:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    8cce:	4b27      	ldr	r3, [pc, #156]	; (8d6c <z_setup_new_thread+0x160>)
    8cd0:	689b      	ldr	r3, [r3, #8]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d045      	beq.n	8d62 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    8cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    8cda:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    8cde:	4638      	mov	r0, r7
    8ce0:	b005      	add	sp, #20
    8ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    8ce6:	4b22      	ldr	r3, [pc, #136]	; (8d70 <z_setup_new_thread+0x164>)
    8ce8:	429d      	cmp	r5, r3
    8cea:	d19d      	bne.n	8c28 <z_setup_new_thread+0x1c>
    8cec:	e7a0      	b.n	8c30 <z_setup_new_thread+0x24>
    8cee:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8d74 <z_setup_new_thread+0x168>
    8cf2:	f240 13ff 	movw	r3, #511	; 0x1ff
    8cf6:	464a      	mov	r2, r9
    8cf8:	491f      	ldr	r1, [pc, #124]	; (8d78 <z_setup_new_thread+0x16c>)
    8cfa:	4820      	ldr	r0, [pc, #128]	; (8d7c <z_setup_new_thread+0x170>)
    8cfc:	f002 ffb8 	bl	bc70 <assert_print>
    8d00:	f06f 030f 	mvn.w	r3, #15
    8d04:	220e      	movs	r2, #14
    8d06:	4639      	mov	r1, r7
    8d08:	481d      	ldr	r0, [pc, #116]	; (8d80 <z_setup_new_thread+0x174>)
    8d0a:	f002 ffb1 	bl	bc70 <assert_print>
    8d0e:	f240 11ff 	movw	r1, #511	; 0x1ff
    8d12:	4648      	mov	r0, r9
    8d14:	f002 ffa5 	bl	bc62 <assert_post_action>
    8d18:	e78a      	b.n	8c30 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d1a:	4d1a      	ldr	r5, [pc, #104]	; (8d84 <z_setup_new_thread+0x178>)
    8d1c:	238e      	movs	r3, #142	; 0x8e
    8d1e:	462a      	mov	r2, r5
    8d20:	4919      	ldr	r1, [pc, #100]	; (8d88 <z_setup_new_thread+0x17c>)
    8d22:	4816      	ldr	r0, [pc, #88]	; (8d7c <z_setup_new_thread+0x170>)
    8d24:	f002 ffa4 	bl	bc70 <assert_print>
    8d28:	490f      	ldr	r1, [pc, #60]	; (8d68 <z_setup_new_thread+0x15c>)
    8d2a:	4818      	ldr	r0, [pc, #96]	; (8d8c <z_setup_new_thread+0x180>)
    8d2c:	f002 ffa0 	bl	bc70 <assert_print>
    8d30:	218e      	movs	r1, #142	; 0x8e
    8d32:	4628      	mov	r0, r5
    8d34:	f002 ff95 	bl	bc62 <assert_post_action>
    8d38:	e7ac      	b.n	8c94 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d3a:	4d12      	ldr	r5, [pc, #72]	; (8d84 <z_setup_new_thread+0x178>)
    8d3c:	23b9      	movs	r3, #185	; 0xb9
    8d3e:	462a      	mov	r2, r5
    8d40:	4913      	ldr	r1, [pc, #76]	; (8d90 <z_setup_new_thread+0x184>)
    8d42:	480e      	ldr	r0, [pc, #56]	; (8d7c <z_setup_new_thread+0x170>)
    8d44:	f002 ff94 	bl	bc70 <assert_print>
    8d48:	4907      	ldr	r1, [pc, #28]	; (8d68 <z_setup_new_thread+0x15c>)
    8d4a:	4812      	ldr	r0, [pc, #72]	; (8d94 <z_setup_new_thread+0x188>)
    8d4c:	f002 ff90 	bl	bc70 <assert_print>
    8d50:	21b9      	movs	r1, #185	; 0xb9
    8d52:	4628      	mov	r0, r5
    8d54:	f002 ff85 	bl	bc62 <assert_post_action>
    8d58:	e7a9      	b.n	8cae <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    8d5a:	2300      	movs	r3, #0
    8d5c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    8d60:	e7b5      	b.n	8cce <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    8d62:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    8d66:	e7ba      	b.n	8cde <z_setup_new_thread+0xd2>
    8d68:	20001180 	.word	0x20001180
    8d6c:	20001154 	.word	0x20001154
    8d70:	00008f21 	.word	0x00008f21
    8d74:	0000edcc 	.word	0x0000edcc
    8d78:	0000ee24 	.word	0x0000ee24
    8d7c:	0000d02c 	.word	0x0000d02c
    8d80:	0000eea4 	.word	0x0000eea4
    8d84:	0000d7f0 	.word	0x0000d7f0
    8d88:	0000d850 	.word	0x0000d850
    8d8c:	0000d868 	.word	0x0000d868
    8d90:	0000d820 	.word	0x0000d820
    8d94:	0000d838 	.word	0x0000d838

00008d98 <z_impl_k_thread_create>:
{
    8d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d9c:	b086      	sub	sp, #24
    8d9e:	4604      	mov	r4, r0
    8da0:	460d      	mov	r5, r1
    8da2:	4616      	mov	r6, r2
    8da4:	461f      	mov	r7, r3
    8da6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    8daa:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8dae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    8db2:	b9db      	cbnz	r3, 8dec <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8db4:	2300      	movs	r3, #0
    8db6:	9305      	str	r3, [sp, #20]
    8db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dba:	9304      	str	r3, [sp, #16]
    8dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8dbe:	9303      	str	r3, [sp, #12]
    8dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8dc2:	9302      	str	r3, [sp, #8]
    8dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8dc6:	9301      	str	r3, [sp, #4]
    8dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dca:	9300      	str	r3, [sp, #0]
    8dcc:	463b      	mov	r3, r7
    8dce:	4632      	mov	r2, r6
    8dd0:	4629      	mov	r1, r5
    8dd2:	4620      	mov	r0, r4
    8dd4:	f7ff ff1a 	bl	8c0c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8dd8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    8ddc:	bf08      	it	eq
    8dde:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    8de2:	d115      	bne.n	8e10 <z_impl_k_thread_create+0x78>
}
    8de4:	4620      	mov	r0, r4
    8de6:	b006      	add	sp, #24
    8de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    8dec:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8e1c <z_impl_k_thread_create+0x84>
    8df0:	f240 236e 	movw	r3, #622	; 0x26e
    8df4:	4652      	mov	r2, sl
    8df6:	490a      	ldr	r1, [pc, #40]	; (8e20 <z_impl_k_thread_create+0x88>)
    8df8:	480a      	ldr	r0, [pc, #40]	; (8e24 <z_impl_k_thread_create+0x8c>)
    8dfa:	f002 ff39 	bl	bc70 <assert_print>
    8dfe:	480a      	ldr	r0, [pc, #40]	; (8e28 <z_impl_k_thread_create+0x90>)
    8e00:	f002 ff36 	bl	bc70 <assert_print>
    8e04:	f240 216e 	movw	r1, #622	; 0x26e
    8e08:	4650      	mov	r0, sl
    8e0a:	f002 ff2a 	bl	bc62 <assert_post_action>
    8e0e:	e7d1      	b.n	8db4 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    8e10:	464a      	mov	r2, r9
    8e12:	4643      	mov	r3, r8
    8e14:	4620      	mov	r0, r4
    8e16:	f7ff fe69 	bl	8aec <schedule_new_thread>
    8e1a:	e7e3      	b.n	8de4 <z_impl_k_thread_create+0x4c>
    8e1c:	0000edcc 	.word	0x0000edcc
    8e20:	0000eed8 	.word	0x0000eed8
    8e24:	0000d02c 	.word	0x0000d02c
    8e28:	0000eeec 	.word	0x0000eeec

00008e2c <z_init_static_threads>:
{
    8e2c:	b530      	push	{r4, r5, lr}
    8e2e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    8e30:	4c35      	ldr	r4, [pc, #212]	; (8f08 <z_init_static_threads+0xdc>)
    8e32:	e017      	b.n	8e64 <z_init_static_threads+0x38>
    8e34:	4b35      	ldr	r3, [pc, #212]	; (8f0c <z_init_static_threads+0xe0>)
    8e36:	429c      	cmp	r4, r3
    8e38:	d228      	bcs.n	8e8c <z_init_static_threads+0x60>
		z_setup_new_thread(
    8e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8e3c:	9305      	str	r3, [sp, #20]
    8e3e:	6a23      	ldr	r3, [r4, #32]
    8e40:	9304      	str	r3, [sp, #16]
    8e42:	69e3      	ldr	r3, [r4, #28]
    8e44:	9303      	str	r3, [sp, #12]
    8e46:	69a3      	ldr	r3, [r4, #24]
    8e48:	9302      	str	r3, [sp, #8]
    8e4a:	6963      	ldr	r3, [r4, #20]
    8e4c:	9301      	str	r3, [sp, #4]
    8e4e:	6923      	ldr	r3, [r4, #16]
    8e50:	9300      	str	r3, [sp, #0]
    8e52:	68e3      	ldr	r3, [r4, #12]
    8e54:	68a2      	ldr	r2, [r4, #8]
    8e56:	6861      	ldr	r1, [r4, #4]
    8e58:	6820      	ldr	r0, [r4, #0]
    8e5a:	f7ff fed7 	bl	8c0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8e5e:	6823      	ldr	r3, [r4, #0]
    8e60:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    8e62:	3430      	adds	r4, #48	; 0x30
    8e64:	4b29      	ldr	r3, [pc, #164]	; (8f0c <z_init_static_threads+0xe0>)
    8e66:	429c      	cmp	r4, r3
    8e68:	d9e4      	bls.n	8e34 <z_init_static_threads+0x8>
    8e6a:	4d29      	ldr	r5, [pc, #164]	; (8f10 <z_init_static_threads+0xe4>)
    8e6c:	f240 23d5 	movw	r3, #725	; 0x2d5
    8e70:	462a      	mov	r2, r5
    8e72:	4928      	ldr	r1, [pc, #160]	; (8f14 <z_init_static_threads+0xe8>)
    8e74:	4828      	ldr	r0, [pc, #160]	; (8f18 <z_init_static_threads+0xec>)
    8e76:	f002 fefb 	bl	bc70 <assert_print>
    8e7a:	4828      	ldr	r0, [pc, #160]	; (8f1c <z_init_static_threads+0xf0>)
    8e7c:	f002 fef8 	bl	bc70 <assert_print>
    8e80:	f240 21d5 	movw	r1, #725	; 0x2d5
    8e84:	4628      	mov	r0, r5
    8e86:	f002 feec 	bl	bc62 <assert_post_action>
    8e8a:	e7d3      	b.n	8e34 <z_init_static_threads+0x8>
	k_sched_lock();
    8e8c:	f000 fca6 	bl	97dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8e90:	4c1d      	ldr	r4, [pc, #116]	; (8f08 <z_init_static_threads+0xdc>)
    8e92:	e000      	b.n	8e96 <z_init_static_threads+0x6a>
    8e94:	3430      	adds	r4, #48	; 0x30
    8e96:	4b1d      	ldr	r3, [pc, #116]	; (8f0c <z_init_static_threads+0xe0>)
    8e98:	429c      	cmp	r4, r3
    8e9a:	d81f      	bhi.n	8edc <z_init_static_threads+0xb0>
    8e9c:	4b1b      	ldr	r3, [pc, #108]	; (8f0c <z_init_static_threads+0xe0>)
    8e9e:	429c      	cmp	r4, r3
    8ea0:	d22d      	bcs.n	8efe <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8ea2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8ea4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8ea8:	d0f4      	beq.n	8e94 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    8eaa:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    8eac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    8eb0:	17c1      	asrs	r1, r0, #31
    8eb2:	03c9      	lsls	r1, r1, #15
    8eb4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    8eb8:	03c0      	lsls	r0, r0, #15
    8eba:	f240 33e7 	movw	r3, #999	; 0x3e7
    8ebe:	18c0      	adds	r0, r0, r3
    8ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ec4:	f04f 0300 	mov.w	r3, #0
    8ec8:	f141 0100 	adc.w	r1, r1, #0
    8ecc:	f7f7 fafa 	bl	4c4 <__aeabi_uldivmod>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    8ed4:	4628      	mov	r0, r5
    8ed6:	f7ff fe09 	bl	8aec <schedule_new_thread>
    8eda:	e7db      	b.n	8e94 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    8edc:	4d0c      	ldr	r5, [pc, #48]	; (8f10 <z_init_static_threads+0xe4>)
    8ede:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    8ee2:	462a      	mov	r2, r5
    8ee4:	490b      	ldr	r1, [pc, #44]	; (8f14 <z_init_static_threads+0xe8>)
    8ee6:	480c      	ldr	r0, [pc, #48]	; (8f18 <z_init_static_threads+0xec>)
    8ee8:	f002 fec2 	bl	bc70 <assert_print>
    8eec:	480b      	ldr	r0, [pc, #44]	; (8f1c <z_init_static_threads+0xf0>)
    8eee:	f002 febf 	bl	bc70 <assert_print>
    8ef2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    8ef6:	4628      	mov	r0, r5
    8ef8:	f002 feb3 	bl	bc62 <assert_post_action>
    8efc:	e7ce      	b.n	8e9c <z_init_static_threads+0x70>
	k_sched_unlock();
    8efe:	f001 f9f9 	bl	a2f4 <k_sched_unlock>
}
    8f02:	b007      	add	sp, #28
    8f04:	bd30      	pop	{r4, r5, pc}
    8f06:	bf00      	nop
    8f08:	200001f8 	.word	0x200001f8
    8f0c:	200001f8 	.word	0x200001f8
    8f10:	0000edcc 	.word	0x0000edcc
    8f14:	0000ef14 	.word	0x0000ef14
    8f18:	0000d02c 	.word	0x0000d02c
    8f1c:	0000edac 	.word	0x0000edac

00008f20 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8f20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    8f22:	4b14      	ldr	r3, [pc, #80]	; (8f74 <idle+0x54>)
    8f24:	689b      	ldr	r3, [r3, #8]
    8f26:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	da0d      	bge.n	8f4a <idle+0x2a>
    8f2e:	4c12      	ldr	r4, [pc, #72]	; (8f78 <idle+0x58>)
    8f30:	2327      	movs	r3, #39	; 0x27
    8f32:	4622      	mov	r2, r4
    8f34:	4911      	ldr	r1, [pc, #68]	; (8f7c <idle+0x5c>)
    8f36:	4812      	ldr	r0, [pc, #72]	; (8f80 <idle+0x60>)
    8f38:	f002 fe9a 	bl	bc70 <assert_print>
    8f3c:	2127      	movs	r1, #39	; 0x27
    8f3e:	4620      	mov	r0, r4
    8f40:	f002 fe8f 	bl	bc62 <assert_post_action>
    8f44:	e001      	b.n	8f4a <idle+0x2a>
	arch_cpu_idle();
    8f46:	f7fa ffd9 	bl	3efc <arch_cpu_idle>
	__asm__ volatile(
    8f4a:	f04f 0220 	mov.w	r2, #32
    8f4e:	f3ef 8311 	mrs	r3, BASEPRI
    8f52:	f382 8812 	msr	BASEPRI_MAX, r2
    8f56:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    8f5a:	f001 ff7d 	bl	ae58 <z_get_next_timeout_expiry>
    8f5e:	4b05      	ldr	r3, [pc, #20]	; (8f74 <idle+0x54>)
    8f60:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    8f62:	4b08      	ldr	r3, [pc, #32]	; (8f84 <idle+0x64>)
    8f64:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8f66:	2b00      	cmp	r3, #0
    8f68:	d0ed      	beq.n	8f46 <idle+0x26>
    8f6a:	f7fa fd93 	bl	3a94 <pm_system_suspend>
    8f6e:	2800      	cmp	r0, #0
    8f70:	d1eb      	bne.n	8f4a <idle+0x2a>
    8f72:	e7e8      	b.n	8f46 <idle+0x26>
    8f74:	20001154 	.word	0x20001154
    8f78:	0000ef44 	.word	0x0000ef44
    8f7c:	0000ef68 	.word	0x0000ef68
    8f80:	0000d02c 	.word	0x0000d02c
    8f84:	20001386 	.word	0x20001386

00008f88 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f8c:	b083      	sub	sp, #12
    8f8e:	4604      	mov	r4, r0
    8f90:	4616      	mov	r6, r2
    8f92:	461d      	mov	r5, r3
    8f94:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8f98:	2900      	cmp	r1, #0
    8f9a:	d12b      	bne.n	8ff4 <z_impl_k_mutex_lock+0x6c>
    8f9c:	f04f 0320 	mov.w	r3, #32
    8fa0:	f3ef 8711 	mrs	r7, BASEPRI
    8fa4:	f383 8812 	msr	BASEPRI_MAX, r3
    8fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fac:	487b      	ldr	r0, [pc, #492]	; (919c <z_impl_k_mutex_lock+0x214>)
    8fae:	f7ff fdab 	bl	8b08 <z_spin_lock_valid>
    8fb2:	2800      	cmp	r0, #0
    8fb4:	d02d      	beq.n	9012 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    8fb6:	4879      	ldr	r0, [pc, #484]	; (919c <z_impl_k_mutex_lock+0x214>)
    8fb8:	f7ff fdc6 	bl	8b48 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8fbc:	68e1      	ldr	r1, [r4, #12]
    8fbe:	2900      	cmp	r1, #0
    8fc0:	d138      	bne.n	9034 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    8fc2:	2900      	cmp	r1, #0
    8fc4:	d17d      	bne.n	90c2 <z_impl_k_mutex_lock+0x13a>
    8fc6:	4b76      	ldr	r3, [pc, #472]	; (91a0 <z_impl_k_mutex_lock+0x218>)
    8fc8:	689b      	ldr	r3, [r3, #8]
    8fca:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8fce:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    8fd0:	3101      	adds	r1, #1
    8fd2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    8fd4:	4b72      	ldr	r3, [pc, #456]	; (91a0 <z_impl_k_mutex_lock+0x218>)
    8fd6:	689b      	ldr	r3, [r3, #8]
    8fd8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8fda:	4870      	ldr	r0, [pc, #448]	; (919c <z_impl_k_mutex_lock+0x214>)
    8fdc:	f7ff fda4 	bl	8b28 <z_spin_unlock_valid>
    8fe0:	2800      	cmp	r0, #0
    8fe2:	d070      	beq.n	90c6 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    8fe4:	f387 8811 	msr	BASEPRI, r7
    8fe8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    8fec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8fee:	b003      	add	sp, #12
    8ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    8ff4:	4f6b      	ldr	r7, [pc, #428]	; (91a4 <z_impl_k_mutex_lock+0x21c>)
    8ff6:	2365      	movs	r3, #101	; 0x65
    8ff8:	463a      	mov	r2, r7
    8ffa:	496b      	ldr	r1, [pc, #428]	; (91a8 <z_impl_k_mutex_lock+0x220>)
    8ffc:	486b      	ldr	r0, [pc, #428]	; (91ac <z_impl_k_mutex_lock+0x224>)
    8ffe:	f002 fe37 	bl	bc70 <assert_print>
    9002:	486b      	ldr	r0, [pc, #428]	; (91b0 <z_impl_k_mutex_lock+0x228>)
    9004:	f002 fe34 	bl	bc70 <assert_print>
    9008:	2165      	movs	r1, #101	; 0x65
    900a:	4638      	mov	r0, r7
    900c:	f002 fe29 	bl	bc62 <assert_post_action>
    9010:	e7c4      	b.n	8f9c <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9012:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 91b4 <z_impl_k_mutex_lock+0x22c>
    9016:	238e      	movs	r3, #142	; 0x8e
    9018:	4642      	mov	r2, r8
    901a:	4967      	ldr	r1, [pc, #412]	; (91b8 <z_impl_k_mutex_lock+0x230>)
    901c:	4863      	ldr	r0, [pc, #396]	; (91ac <z_impl_k_mutex_lock+0x224>)
    901e:	f002 fe27 	bl	bc70 <assert_print>
    9022:	495e      	ldr	r1, [pc, #376]	; (919c <z_impl_k_mutex_lock+0x214>)
    9024:	4865      	ldr	r0, [pc, #404]	; (91bc <z_impl_k_mutex_lock+0x234>)
    9026:	f002 fe23 	bl	bc70 <assert_print>
    902a:	218e      	movs	r1, #142	; 0x8e
    902c:	4640      	mov	r0, r8
    902e:	f002 fe18 	bl	bc62 <assert_post_action>
    9032:	e7c0      	b.n	8fb6 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9034:	68a2      	ldr	r2, [r4, #8]
    9036:	4b5a      	ldr	r3, [pc, #360]	; (91a0 <z_impl_k_mutex_lock+0x218>)
    9038:	689b      	ldr	r3, [r3, #8]
    903a:	429a      	cmp	r2, r3
    903c:	d0c1      	beq.n	8fc2 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    903e:	ea55 0106 	orrs.w	r1, r5, r6
    9042:	bf0c      	ite	eq
    9044:	f04f 0801 	moveq.w	r8, #1
    9048:	f04f 0800 	movne.w	r8, #0
    904c:	d04b      	beq.n	90e6 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    904e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9052:	4649      	mov	r1, r9
    9054:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9058:	f003 fd13 	bl	ca82 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    905c:	4581      	cmp	r9, r0
    905e:	dc5d      	bgt.n	911c <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    9060:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9064:	9600      	str	r6, [sp, #0]
    9066:	9501      	str	r5, [sp, #4]
    9068:	4622      	mov	r2, r4
    906a:	4639      	mov	r1, r7
    906c:	484b      	ldr	r0, [pc, #300]	; (919c <z_impl_k_mutex_lock+0x214>)
    906e:	f000 ffe7 	bl	a040 <z_pend_curr>
	if (got_mutex == 0) {
    9072:	2800      	cmp	r0, #0
    9074:	d0bb      	beq.n	8fee <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    9076:	f04f 0320 	mov.w	r3, #32
    907a:	f3ef 8511 	mrs	r5, BASEPRI
    907e:	f383 8812 	msr	BASEPRI_MAX, r3
    9082:	f3bf 8f6f 	isb	sy
    9086:	4845      	ldr	r0, [pc, #276]	; (919c <z_impl_k_mutex_lock+0x214>)
    9088:	f7ff fd3e 	bl	8b08 <z_spin_lock_valid>
    908c:	2800      	cmp	r0, #0
    908e:	d04b      	beq.n	9128 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    9090:	4842      	ldr	r0, [pc, #264]	; (919c <z_impl_k_mutex_lock+0x214>)
    9092:	f7ff fd59 	bl	8b48 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9096:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9098:	42a3      	cmp	r3, r4
    909a:	d055      	beq.n	9148 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    909c:	2b00      	cmp	r3, #0
    909e:	d053      	beq.n	9148 <z_impl_k_mutex_lock+0x1c0>
    90a0:	6921      	ldr	r1, [r4, #16]
    90a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    90a6:	f003 fcec 	bl	ca82 <new_prio_for_inheritance>
    90aa:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    90ac:	4620      	mov	r0, r4
    90ae:	f003 fcf3 	bl	ca98 <adjust_owner_prio>
    90b2:	2800      	cmp	r0, #0
    90b4:	d14a      	bne.n	914c <z_impl_k_mutex_lock+0x1c4>
    90b6:	f1b9 0f00 	cmp.w	r9, #0
    90ba:	d049      	beq.n	9150 <z_impl_k_mutex_lock+0x1c8>
    90bc:	f04f 0801 	mov.w	r8, #1
    90c0:	e046      	b.n	9150 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    90c2:	6923      	ldr	r3, [r4, #16]
    90c4:	e783      	b.n	8fce <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90c6:	4c3b      	ldr	r4, [pc, #236]	; (91b4 <z_impl_k_mutex_lock+0x22c>)
    90c8:	23b9      	movs	r3, #185	; 0xb9
    90ca:	4622      	mov	r2, r4
    90cc:	493c      	ldr	r1, [pc, #240]	; (91c0 <z_impl_k_mutex_lock+0x238>)
    90ce:	4837      	ldr	r0, [pc, #220]	; (91ac <z_impl_k_mutex_lock+0x224>)
    90d0:	f002 fdce 	bl	bc70 <assert_print>
    90d4:	4931      	ldr	r1, [pc, #196]	; (919c <z_impl_k_mutex_lock+0x214>)
    90d6:	483b      	ldr	r0, [pc, #236]	; (91c4 <z_impl_k_mutex_lock+0x23c>)
    90d8:	f002 fdca 	bl	bc70 <assert_print>
    90dc:	21b9      	movs	r1, #185	; 0xb9
    90de:	4620      	mov	r0, r4
    90e0:	f002 fdbf 	bl	bc62 <assert_post_action>
    90e4:	e77e      	b.n	8fe4 <z_impl_k_mutex_lock+0x5c>
    90e6:	482d      	ldr	r0, [pc, #180]	; (919c <z_impl_k_mutex_lock+0x214>)
    90e8:	f7ff fd1e 	bl	8b28 <z_spin_unlock_valid>
    90ec:	b130      	cbz	r0, 90fc <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    90ee:	f387 8811 	msr	BASEPRI, r7
    90f2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    90f6:	f06f 000f 	mvn.w	r0, #15
    90fa:	e778      	b.n	8fee <z_impl_k_mutex_lock+0x66>
    90fc:	4c2d      	ldr	r4, [pc, #180]	; (91b4 <z_impl_k_mutex_lock+0x22c>)
    90fe:	23b9      	movs	r3, #185	; 0xb9
    9100:	4622      	mov	r2, r4
    9102:	492f      	ldr	r1, [pc, #188]	; (91c0 <z_impl_k_mutex_lock+0x238>)
    9104:	4829      	ldr	r0, [pc, #164]	; (91ac <z_impl_k_mutex_lock+0x224>)
    9106:	f002 fdb3 	bl	bc70 <assert_print>
    910a:	4924      	ldr	r1, [pc, #144]	; (919c <z_impl_k_mutex_lock+0x214>)
    910c:	482d      	ldr	r0, [pc, #180]	; (91c4 <z_impl_k_mutex_lock+0x23c>)
    910e:	f002 fdaf 	bl	bc70 <assert_print>
    9112:	21b9      	movs	r1, #185	; 0xb9
    9114:	4620      	mov	r0, r4
    9116:	f002 fda4 	bl	bc62 <assert_post_action>
    911a:	e7e8      	b.n	90ee <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    911c:	4601      	mov	r1, r0
    911e:	4620      	mov	r0, r4
    9120:	f003 fcba 	bl	ca98 <adjust_owner_prio>
    9124:	4681      	mov	r9, r0
    9126:	e79d      	b.n	9064 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9128:	4e22      	ldr	r6, [pc, #136]	; (91b4 <z_impl_k_mutex_lock+0x22c>)
    912a:	238e      	movs	r3, #142	; 0x8e
    912c:	4632      	mov	r2, r6
    912e:	4922      	ldr	r1, [pc, #136]	; (91b8 <z_impl_k_mutex_lock+0x230>)
    9130:	481e      	ldr	r0, [pc, #120]	; (91ac <z_impl_k_mutex_lock+0x224>)
    9132:	f002 fd9d 	bl	bc70 <assert_print>
    9136:	4919      	ldr	r1, [pc, #100]	; (919c <z_impl_k_mutex_lock+0x214>)
    9138:	4820      	ldr	r0, [pc, #128]	; (91bc <z_impl_k_mutex_lock+0x234>)
    913a:	f002 fd99 	bl	bc70 <assert_print>
    913e:	218e      	movs	r1, #142	; 0x8e
    9140:	4630      	mov	r0, r6
    9142:	f002 fd8e 	bl	bc62 <assert_post_action>
    9146:	e7a3      	b.n	9090 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9148:	6921      	ldr	r1, [r4, #16]
    914a:	e7af      	b.n	90ac <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    914c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    9150:	f1b8 0f00 	cmp.w	r8, #0
    9154:	d006      	beq.n	9164 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    9156:	4629      	mov	r1, r5
    9158:	4810      	ldr	r0, [pc, #64]	; (919c <z_impl_k_mutex_lock+0x214>)
    915a:	f000 faf1 	bl	9740 <z_reschedule>
	return -EAGAIN;
    915e:	f06f 000a 	mvn.w	r0, #10
    9162:	e744      	b.n	8fee <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9164:	480d      	ldr	r0, [pc, #52]	; (919c <z_impl_k_mutex_lock+0x214>)
    9166:	f7ff fcdf 	bl	8b28 <z_spin_unlock_valid>
    916a:	b130      	cbz	r0, 917a <z_impl_k_mutex_lock+0x1f2>
    916c:	f385 8811 	msr	BASEPRI, r5
    9170:	f3bf 8f6f 	isb	sy
    9174:	f06f 000a 	mvn.w	r0, #10
    9178:	e739      	b.n	8fee <z_impl_k_mutex_lock+0x66>
    917a:	4c0e      	ldr	r4, [pc, #56]	; (91b4 <z_impl_k_mutex_lock+0x22c>)
    917c:	23b9      	movs	r3, #185	; 0xb9
    917e:	4622      	mov	r2, r4
    9180:	490f      	ldr	r1, [pc, #60]	; (91c0 <z_impl_k_mutex_lock+0x238>)
    9182:	480a      	ldr	r0, [pc, #40]	; (91ac <z_impl_k_mutex_lock+0x224>)
    9184:	f002 fd74 	bl	bc70 <assert_print>
    9188:	4904      	ldr	r1, [pc, #16]	; (919c <z_impl_k_mutex_lock+0x214>)
    918a:	480e      	ldr	r0, [pc, #56]	; (91c4 <z_impl_k_mutex_lock+0x23c>)
    918c:	f002 fd70 	bl	bc70 <assert_print>
    9190:	21b9      	movs	r1, #185	; 0xb9
    9192:	4620      	mov	r0, r4
    9194:	f002 fd65 	bl	bc62 <assert_post_action>
    9198:	e7e8      	b.n	916c <z_impl_k_mutex_lock+0x1e4>
    919a:	bf00      	nop
    919c:	20001184 	.word	0x20001184
    91a0:	20001154 	.word	0x20001154
    91a4:	0000ef90 	.word	0x0000ef90
    91a8:	0000eed8 	.word	0x0000eed8
    91ac:	0000d02c 	.word	0x0000d02c
    91b0:	0000efb4 	.word	0x0000efb4
    91b4:	0000d7f0 	.word	0x0000d7f0
    91b8:	0000d850 	.word	0x0000d850
    91bc:	0000d868 	.word	0x0000d868
    91c0:	0000d820 	.word	0x0000d820
    91c4:	0000d838 	.word	0x0000d838

000091c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    91c8:	b570      	push	{r4, r5, r6, lr}
    91ca:	4604      	mov	r4, r0
    91cc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    91d0:	bb03      	cbnz	r3, 9214 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    91d2:	68a3      	ldr	r3, [r4, #8]
    91d4:	2b00      	cmp	r3, #0
    91d6:	f000 80a6 	beq.w	9326 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    91da:	4a56      	ldr	r2, [pc, #344]	; (9334 <z_impl_k_mutex_unlock+0x16c>)
    91dc:	6892      	ldr	r2, [r2, #8]
    91de:	4293      	cmp	r3, r2
    91e0:	f040 80a4 	bne.w	932c <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    91e4:	68e3      	ldr	r3, [r4, #12]
    91e6:	b323      	cbz	r3, 9232 <z_impl_k_mutex_unlock+0x6a>
    91e8:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    91ec:	bb6b      	cbnz	r3, 924a <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    91ee:	4b51      	ldr	r3, [pc, #324]	; (9334 <z_impl_k_mutex_unlock+0x16c>)
    91f0:	689b      	ldr	r3, [r3, #8]
    91f2:	7bdb      	ldrb	r3, [r3, #15]
    91f4:	2b01      	cmp	r3, #1
    91f6:	d037      	beq.n	9268 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    91f8:	4b4e      	ldr	r3, [pc, #312]	; (9334 <z_impl_k_mutex_unlock+0x16c>)
    91fa:	689a      	ldr	r2, [r3, #8]
    91fc:	7bd3      	ldrb	r3, [r2, #15]
    91fe:	3b01      	subs	r3, #1
    9200:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    9202:	68e3      	ldr	r3, [r4, #12]
    9204:	2b01      	cmp	r3, #1
    9206:	d93e      	bls.n	9286 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    9208:	3b01      	subs	r3, #1
    920a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    920c:	f001 f872 	bl	a2f4 <k_sched_unlock>

	return 0;
    9210:	2000      	movs	r0, #0
}
    9212:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9214:	4d48      	ldr	r5, [pc, #288]	; (9338 <z_impl_k_mutex_unlock+0x170>)
    9216:	23c7      	movs	r3, #199	; 0xc7
    9218:	462a      	mov	r2, r5
    921a:	4948      	ldr	r1, [pc, #288]	; (933c <z_impl_k_mutex_unlock+0x174>)
    921c:	4848      	ldr	r0, [pc, #288]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    921e:	f002 fd27 	bl	bc70 <assert_print>
    9222:	4848      	ldr	r0, [pc, #288]	; (9344 <z_impl_k_mutex_unlock+0x17c>)
    9224:	f002 fd24 	bl	bc70 <assert_print>
    9228:	21c7      	movs	r1, #199	; 0xc7
    922a:	4628      	mov	r0, r5
    922c:	f002 fd19 	bl	bc62 <assert_post_action>
    9230:	e7cf      	b.n	91d2 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    9232:	4d41      	ldr	r5, [pc, #260]	; (9338 <z_impl_k_mutex_unlock+0x170>)
    9234:	23df      	movs	r3, #223	; 0xdf
    9236:	462a      	mov	r2, r5
    9238:	4943      	ldr	r1, [pc, #268]	; (9348 <z_impl_k_mutex_unlock+0x180>)
    923a:	4841      	ldr	r0, [pc, #260]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    923c:	f002 fd18 	bl	bc70 <assert_print>
    9240:	21df      	movs	r1, #223	; 0xdf
    9242:	4628      	mov	r0, r5
    9244:	f002 fd0d 	bl	bc62 <assert_post_action>
    9248:	e7ce      	b.n	91e8 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    924a:	4d40      	ldr	r5, [pc, #256]	; (934c <z_impl_k_mutex_unlock+0x184>)
    924c:	23fd      	movs	r3, #253	; 0xfd
    924e:	462a      	mov	r2, r5
    9250:	493a      	ldr	r1, [pc, #232]	; (933c <z_impl_k_mutex_unlock+0x174>)
    9252:	483b      	ldr	r0, [pc, #236]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    9254:	f002 fd0c 	bl	bc70 <assert_print>
    9258:	483d      	ldr	r0, [pc, #244]	; (9350 <z_impl_k_mutex_unlock+0x188>)
    925a:	f002 fd09 	bl	bc70 <assert_print>
    925e:	21fd      	movs	r1, #253	; 0xfd
    9260:	4628      	mov	r0, r5
    9262:	f002 fcfe 	bl	bc62 <assert_post_action>
    9266:	e7c2      	b.n	91ee <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9268:	4d38      	ldr	r5, [pc, #224]	; (934c <z_impl_k_mutex_unlock+0x184>)
    926a:	23fe      	movs	r3, #254	; 0xfe
    926c:	462a      	mov	r2, r5
    926e:	4939      	ldr	r1, [pc, #228]	; (9354 <z_impl_k_mutex_unlock+0x18c>)
    9270:	4833      	ldr	r0, [pc, #204]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    9272:	f002 fcfd 	bl	bc70 <assert_print>
    9276:	4836      	ldr	r0, [pc, #216]	; (9350 <z_impl_k_mutex_unlock+0x188>)
    9278:	f002 fcfa 	bl	bc70 <assert_print>
    927c:	21fe      	movs	r1, #254	; 0xfe
    927e:	4628      	mov	r0, r5
    9280:	f002 fcef 	bl	bc62 <assert_post_action>
    9284:	e7b8      	b.n	91f8 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    9286:	f04f 0320 	mov.w	r3, #32
    928a:	f3ef 8511 	mrs	r5, BASEPRI
    928e:	f383 8812 	msr	BASEPRI_MAX, r3
    9292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9296:	4830      	ldr	r0, [pc, #192]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    9298:	f7ff fc36 	bl	8b08 <z_spin_lock_valid>
    929c:	b1c0      	cbz	r0, 92d0 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    929e:	482e      	ldr	r0, [pc, #184]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    92a0:	f7ff fc52 	bl	8b48 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    92a4:	6921      	ldr	r1, [r4, #16]
    92a6:	4620      	mov	r0, r4
    92a8:	f003 fbf6 	bl	ca98 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    92ac:	4620      	mov	r0, r4
    92ae:	f001 f963 	bl	a578 <z_unpend_first_thread>
	mutex->owner = new_owner;
    92b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    92b4:	b1e0      	cbz	r0, 92f0 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    92b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    92ba:	6123      	str	r3, [r4, #16]
    92bc:	2300      	movs	r3, #0
    92be:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    92c2:	f000 fce1 	bl	9c88 <z_ready_thread>
		z_reschedule(&lock, key);
    92c6:	4629      	mov	r1, r5
    92c8:	4823      	ldr	r0, [pc, #140]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    92ca:	f000 fa39 	bl	9740 <z_reschedule>
    92ce:	e79d      	b.n	920c <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92d0:	4e22      	ldr	r6, [pc, #136]	; (935c <z_impl_k_mutex_unlock+0x194>)
    92d2:	238e      	movs	r3, #142	; 0x8e
    92d4:	4632      	mov	r2, r6
    92d6:	4922      	ldr	r1, [pc, #136]	; (9360 <z_impl_k_mutex_unlock+0x198>)
    92d8:	4819      	ldr	r0, [pc, #100]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    92da:	f002 fcc9 	bl	bc70 <assert_print>
    92de:	491e      	ldr	r1, [pc, #120]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    92e0:	4820      	ldr	r0, [pc, #128]	; (9364 <z_impl_k_mutex_unlock+0x19c>)
    92e2:	f002 fcc5 	bl	bc70 <assert_print>
    92e6:	218e      	movs	r1, #142	; 0x8e
    92e8:	4630      	mov	r0, r6
    92ea:	f002 fcba 	bl	bc62 <assert_post_action>
    92ee:	e7d6      	b.n	929e <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    92f0:	2300      	movs	r3, #0
    92f2:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    92f4:	4818      	ldr	r0, [pc, #96]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    92f6:	f7ff fc17 	bl	8b28 <z_spin_unlock_valid>
    92fa:	b120      	cbz	r0, 9306 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    92fc:	f385 8811 	msr	BASEPRI, r5
    9300:	f3bf 8f6f 	isb	sy
    9304:	e782      	b.n	920c <z_impl_k_mutex_unlock+0x44>
    9306:	4c15      	ldr	r4, [pc, #84]	; (935c <z_impl_k_mutex_unlock+0x194>)
    9308:	23b9      	movs	r3, #185	; 0xb9
    930a:	4622      	mov	r2, r4
    930c:	4916      	ldr	r1, [pc, #88]	; (9368 <z_impl_k_mutex_unlock+0x1a0>)
    930e:	480c      	ldr	r0, [pc, #48]	; (9340 <z_impl_k_mutex_unlock+0x178>)
    9310:	f002 fcae 	bl	bc70 <assert_print>
    9314:	4910      	ldr	r1, [pc, #64]	; (9358 <z_impl_k_mutex_unlock+0x190>)
    9316:	4815      	ldr	r0, [pc, #84]	; (936c <z_impl_k_mutex_unlock+0x1a4>)
    9318:	f002 fcaa 	bl	bc70 <assert_print>
    931c:	21b9      	movs	r1, #185	; 0xb9
    931e:	4620      	mov	r0, r4
    9320:	f002 fc9f 	bl	bc62 <assert_post_action>
    9324:	e7ea      	b.n	92fc <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    9326:	f06f 0015 	mvn.w	r0, #21
    932a:	e772      	b.n	9212 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    932c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9330:	e76f      	b.n	9212 <z_impl_k_mutex_unlock+0x4a>
    9332:	bf00      	nop
    9334:	20001154 	.word	0x20001154
    9338:	0000ef90 	.word	0x0000ef90
    933c:	0000eed8 	.word	0x0000eed8
    9340:	0000d02c 	.word	0x0000d02c
    9344:	0000efb4 	.word	0x0000efb4
    9348:	0000efdc 	.word	0x0000efdc
    934c:	0000eff4 	.word	0x0000eff4
    9350:	0000f020 	.word	0x0000f020
    9354:	0000f024 	.word	0x0000f024
    9358:	20001184 	.word	0x20001184
    935c:	0000d7f0 	.word	0x0000d7f0
    9360:	0000d850 	.word	0x0000d850
    9364:	0000d868 	.word	0x0000d868
    9368:	0000d820 	.word	0x0000d820
    936c:	0000d838 	.word	0x0000d838

00009370 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9370:	b570      	push	{r4, r5, r6, lr}
    9372:	4604      	mov	r4, r0
	__asm__ volatile(
    9374:	f04f 0320 	mov.w	r3, #32
    9378:	f3ef 8511 	mrs	r5, BASEPRI
    937c:	f383 8812 	msr	BASEPRI_MAX, r3
    9380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9384:	4817      	ldr	r0, [pc, #92]	; (93e4 <z_impl_k_sem_give+0x74>)
    9386:	f7ff fbbf 	bl	8b08 <z_spin_lock_valid>
    938a:	b180      	cbz	r0, 93ae <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    938c:	4815      	ldr	r0, [pc, #84]	; (93e4 <z_impl_k_sem_give+0x74>)
    938e:	f7ff fbdb 	bl	8b48 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9392:	4620      	mov	r0, r4
    9394:	f001 f8f0 	bl	a578 <z_unpend_first_thread>

	if (thread != NULL) {
    9398:	b1c8      	cbz	r0, 93ce <z_impl_k_sem_give+0x5e>
    939a:	2200      	movs	r2, #0
    939c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    93a0:	f000 fc72 	bl	9c88 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    93a4:	4629      	mov	r1, r5
    93a6:	480f      	ldr	r0, [pc, #60]	; (93e4 <z_impl_k_sem_give+0x74>)
    93a8:	f000 f9ca 	bl	9740 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    93ac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ae:	4e0e      	ldr	r6, [pc, #56]	; (93e8 <z_impl_k_sem_give+0x78>)
    93b0:	238e      	movs	r3, #142	; 0x8e
    93b2:	4632      	mov	r2, r6
    93b4:	490d      	ldr	r1, [pc, #52]	; (93ec <z_impl_k_sem_give+0x7c>)
    93b6:	480e      	ldr	r0, [pc, #56]	; (93f0 <z_impl_k_sem_give+0x80>)
    93b8:	f002 fc5a 	bl	bc70 <assert_print>
    93bc:	4909      	ldr	r1, [pc, #36]	; (93e4 <z_impl_k_sem_give+0x74>)
    93be:	480d      	ldr	r0, [pc, #52]	; (93f4 <z_impl_k_sem_give+0x84>)
    93c0:	f002 fc56 	bl	bc70 <assert_print>
    93c4:	218e      	movs	r1, #142	; 0x8e
    93c6:	4630      	mov	r0, r6
    93c8:	f002 fc4b 	bl	bc62 <assert_post_action>
    93cc:	e7de      	b.n	938c <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    93ce:	68a3      	ldr	r3, [r4, #8]
    93d0:	68e2      	ldr	r2, [r4, #12]
    93d2:	4293      	cmp	r3, r2
    93d4:	d003      	beq.n	93de <z_impl_k_sem_give+0x6e>
    93d6:	2201      	movs	r2, #1
    93d8:	4413      	add	r3, r2
    93da:	60a3      	str	r3, [r4, #8]
}
    93dc:	e7e2      	b.n	93a4 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    93de:	2200      	movs	r2, #0
    93e0:	e7fa      	b.n	93d8 <z_impl_k_sem_give+0x68>
    93e2:	bf00      	nop
    93e4:	20001188 	.word	0x20001188
    93e8:	0000d7f0 	.word	0x0000d7f0
    93ec:	0000d850 	.word	0x0000d850
    93f0:	0000d02c 	.word	0x0000d02c
    93f4:	0000d868 	.word	0x0000d868

000093f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    93f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93fc:	b082      	sub	sp, #8
    93fe:	4604      	mov	r4, r0
    9400:	4617      	mov	r7, r2
    9402:	461d      	mov	r5, r3
    9404:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    9408:	b111      	cbz	r1, 9410 <z_impl_k_sem_take+0x18>
    940a:	ea55 0302 	orrs.w	r3, r5, r2
    940e:	d11f      	bne.n	9450 <z_impl_k_sem_take+0x58>
    9410:	f04f 0320 	mov.w	r3, #32
    9414:	f3ef 8611 	mrs	r6, BASEPRI
    9418:	f383 8812 	msr	BASEPRI_MAX, r3
    941c:	f3bf 8f6f 	isb	sy
    9420:	4836      	ldr	r0, [pc, #216]	; (94fc <z_impl_k_sem_take+0x104>)
    9422:	f7ff fb71 	bl	8b08 <z_spin_lock_valid>
    9426:	b310      	cbz	r0, 946e <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    9428:	4834      	ldr	r0, [pc, #208]	; (94fc <z_impl_k_sem_take+0x104>)
    942a:	f7ff fb8d 	bl	8b48 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    942e:	68a1      	ldr	r1, [r4, #8]
    9430:	2900      	cmp	r1, #0
    9432:	d03d      	beq.n	94b0 <z_impl_k_sem_take+0xb8>
		sem->count--;
    9434:	3901      	subs	r1, #1
    9436:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9438:	4830      	ldr	r0, [pc, #192]	; (94fc <z_impl_k_sem_take+0x104>)
    943a:	f7ff fb75 	bl	8b28 <z_spin_unlock_valid>
    943e:	b338      	cbz	r0, 9490 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    9440:	f386 8811 	msr	BASEPRI, r6
    9444:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9448:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    944a:	b002      	add	sp, #8
    944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    9450:	4e2b      	ldr	r6, [pc, #172]	; (9500 <z_impl_k_sem_take+0x108>)
    9452:	2379      	movs	r3, #121	; 0x79
    9454:	4632      	mov	r2, r6
    9456:	492b      	ldr	r1, [pc, #172]	; (9504 <z_impl_k_sem_take+0x10c>)
    9458:	482b      	ldr	r0, [pc, #172]	; (9508 <z_impl_k_sem_take+0x110>)
    945a:	f002 fc09 	bl	bc70 <assert_print>
    945e:	482b      	ldr	r0, [pc, #172]	; (950c <z_impl_k_sem_take+0x114>)
    9460:	f002 fc06 	bl	bc70 <assert_print>
    9464:	2179      	movs	r1, #121	; 0x79
    9466:	4630      	mov	r0, r6
    9468:	f002 fbfb 	bl	bc62 <assert_post_action>
    946c:	e7d0      	b.n	9410 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    946e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9510 <z_impl_k_sem_take+0x118>
    9472:	238e      	movs	r3, #142	; 0x8e
    9474:	4642      	mov	r2, r8
    9476:	4927      	ldr	r1, [pc, #156]	; (9514 <z_impl_k_sem_take+0x11c>)
    9478:	4823      	ldr	r0, [pc, #140]	; (9508 <z_impl_k_sem_take+0x110>)
    947a:	f002 fbf9 	bl	bc70 <assert_print>
    947e:	491f      	ldr	r1, [pc, #124]	; (94fc <z_impl_k_sem_take+0x104>)
    9480:	4825      	ldr	r0, [pc, #148]	; (9518 <z_impl_k_sem_take+0x120>)
    9482:	f002 fbf5 	bl	bc70 <assert_print>
    9486:	218e      	movs	r1, #142	; 0x8e
    9488:	4640      	mov	r0, r8
    948a:	f002 fbea 	bl	bc62 <assert_post_action>
    948e:	e7cb      	b.n	9428 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9490:	4c1f      	ldr	r4, [pc, #124]	; (9510 <z_impl_k_sem_take+0x118>)
    9492:	23b9      	movs	r3, #185	; 0xb9
    9494:	4622      	mov	r2, r4
    9496:	4921      	ldr	r1, [pc, #132]	; (951c <z_impl_k_sem_take+0x124>)
    9498:	481b      	ldr	r0, [pc, #108]	; (9508 <z_impl_k_sem_take+0x110>)
    949a:	f002 fbe9 	bl	bc70 <assert_print>
    949e:	4917      	ldr	r1, [pc, #92]	; (94fc <z_impl_k_sem_take+0x104>)
    94a0:	481f      	ldr	r0, [pc, #124]	; (9520 <z_impl_k_sem_take+0x128>)
    94a2:	f002 fbe5 	bl	bc70 <assert_print>
    94a6:	21b9      	movs	r1, #185	; 0xb9
    94a8:	4620      	mov	r0, r4
    94aa:	f002 fbda 	bl	bc62 <assert_post_action>
    94ae:	e7c7      	b.n	9440 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    94b0:	ea55 0307 	orrs.w	r3, r5, r7
    94b4:	d007      	beq.n	94c6 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    94b6:	9700      	str	r7, [sp, #0]
    94b8:	9501      	str	r5, [sp, #4]
    94ba:	4622      	mov	r2, r4
    94bc:	4631      	mov	r1, r6
    94be:	480f      	ldr	r0, [pc, #60]	; (94fc <z_impl_k_sem_take+0x104>)
    94c0:	f000 fdbe 	bl	a040 <z_pend_curr>
	return ret;
    94c4:	e7c1      	b.n	944a <z_impl_k_sem_take+0x52>
    94c6:	480d      	ldr	r0, [pc, #52]	; (94fc <z_impl_k_sem_take+0x104>)
    94c8:	f7ff fb2e 	bl	8b28 <z_spin_unlock_valid>
    94cc:	b130      	cbz	r0, 94dc <z_impl_k_sem_take+0xe4>
    94ce:	f386 8811 	msr	BASEPRI, r6
    94d2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    94d6:	f06f 000f 	mvn.w	r0, #15
    94da:	e7b6      	b.n	944a <z_impl_k_sem_take+0x52>
    94dc:	4c0c      	ldr	r4, [pc, #48]	; (9510 <z_impl_k_sem_take+0x118>)
    94de:	23b9      	movs	r3, #185	; 0xb9
    94e0:	4622      	mov	r2, r4
    94e2:	490e      	ldr	r1, [pc, #56]	; (951c <z_impl_k_sem_take+0x124>)
    94e4:	4808      	ldr	r0, [pc, #32]	; (9508 <z_impl_k_sem_take+0x110>)
    94e6:	f002 fbc3 	bl	bc70 <assert_print>
    94ea:	4904      	ldr	r1, [pc, #16]	; (94fc <z_impl_k_sem_take+0x104>)
    94ec:	480c      	ldr	r0, [pc, #48]	; (9520 <z_impl_k_sem_take+0x128>)
    94ee:	f002 fbbf 	bl	bc70 <assert_print>
    94f2:	21b9      	movs	r1, #185	; 0xb9
    94f4:	4620      	mov	r0, r4
    94f6:	f002 fbb4 	bl	bc62 <assert_post_action>
    94fa:	e7e8      	b.n	94ce <z_impl_k_sem_take+0xd6>
    94fc:	20001188 	.word	0x20001188
    9500:	0000f058 	.word	0x0000f058
    9504:	0000f078 	.word	0x0000f078
    9508:	0000d02c 	.word	0x0000d02c
    950c:	0000f020 	.word	0x0000f020
    9510:	0000d7f0 	.word	0x0000d7f0
    9514:	0000d850 	.word	0x0000d850
    9518:	0000d868 	.word	0x0000d868
    951c:	0000d820 	.word	0x0000d820
    9520:	0000d838 	.word	0x0000d838

00009524 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    9524:	b538      	push	{r3, r4, r5, lr}
    9526:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    9528:	6883      	ldr	r3, [r0, #8]
    952a:	b10b      	cbz	r3, 9530 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    952c:	68a0      	ldr	r0, [r4, #8]
    952e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    9530:	4d06      	ldr	r5, [pc, #24]	; (954c <pended_on_thread+0x28>)
    9532:	f240 23b9 	movw	r3, #697	; 0x2b9
    9536:	462a      	mov	r2, r5
    9538:	4905      	ldr	r1, [pc, #20]	; (9550 <pended_on_thread+0x2c>)
    953a:	4806      	ldr	r0, [pc, #24]	; (9554 <pended_on_thread+0x30>)
    953c:	f002 fb98 	bl	bc70 <assert_print>
    9540:	f240 21b9 	movw	r1, #697	; 0x2b9
    9544:	4628      	mov	r0, r5
    9546:	f002 fb8c 	bl	bc62 <assert_post_action>
    954a:	e7ef      	b.n	952c <pended_on_thread+0x8>
    954c:	0000f0c8 	.word	0x0000f0c8
    9550:	0000f0ec 	.word	0x0000f0ec
    9554:	0000d02c 	.word	0x0000d02c

00009558 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    955c:	bf08      	it	eq
    955e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9562:	d100      	bne.n	9566 <add_thread_timeout+0xe>
    9564:	4770      	bx	lr
{
    9566:	b508      	push	{r3, lr}
    9568:	4902      	ldr	r1, [pc, #8]	; (9574 <add_thread_timeout+0x1c>)
    956a:	3018      	adds	r0, #24
    956c:	f001 fb36 	bl	abdc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    9570:	bd08      	pop	{r3, pc}
    9572:	bf00      	nop
    9574:	00009de5 	.word	0x00009de5

00009578 <z_reset_time_slice>:
{
    9578:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    957a:	4b07      	ldr	r3, [pc, #28]	; (9598 <z_reset_time_slice+0x20>)
    957c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    957e:	b904      	cbnz	r4, 9582 <z_reset_time_slice+0xa>
}
    9580:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9582:	f7fc ff29 	bl	63d8 <sys_clock_elapsed>
    9586:	4404      	add	r4, r0
    9588:	4b04      	ldr	r3, [pc, #16]	; (959c <z_reset_time_slice+0x24>)
    958a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    958c:	2100      	movs	r1, #0
    958e:	4b02      	ldr	r3, [pc, #8]	; (9598 <z_reset_time_slice+0x20>)
    9590:	6818      	ldr	r0, [r3, #0]
    9592:	f001 fcb3 	bl	aefc <z_set_timeout_expiry>
}
    9596:	e7f3      	b.n	9580 <z_reset_time_slice+0x8>
    9598:	20001198 	.word	0x20001198
    959c:	20001154 	.word	0x20001154

000095a0 <k_sched_time_slice_set>:
{
    95a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95a4:	4604      	mov	r4, r0
    95a6:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    95a8:	2700      	movs	r7, #0
	__asm__ volatile(
    95aa:	f04f 0320 	mov.w	r3, #32
    95ae:	f3ef 8611 	mrs	r6, BASEPRI
    95b2:	f383 8812 	msr	BASEPRI_MAX, r3
    95b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95ba:	482a      	ldr	r0, [pc, #168]	; (9664 <k_sched_time_slice_set+0xc4>)
    95bc:	f7ff faa4 	bl	8b08 <z_spin_lock_valid>
    95c0:	b118      	cbz	r0, 95ca <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    95c2:	4828      	ldr	r0, [pc, #160]	; (9664 <k_sched_time_slice_set+0xc4>)
    95c4:	f7ff fac0 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    95c8:	e023      	b.n	9612 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; 9668 <k_sched_time_slice_set+0xc8>
    95ce:	238e      	movs	r3, #142	; 0x8e
    95d0:	4642      	mov	r2, r8
    95d2:	4926      	ldr	r1, [pc, #152]	; (966c <k_sched_time_slice_set+0xcc>)
    95d4:	4826      	ldr	r0, [pc, #152]	; (9670 <k_sched_time_slice_set+0xd0>)
    95d6:	f002 fb4b 	bl	bc70 <assert_print>
    95da:	4922      	ldr	r1, [pc, #136]	; (9664 <k_sched_time_slice_set+0xc4>)
    95dc:	4825      	ldr	r0, [pc, #148]	; (9674 <k_sched_time_slice_set+0xd4>)
    95de:	f002 fb47 	bl	bc70 <assert_print>
    95e2:	218e      	movs	r1, #142	; 0x8e
    95e4:	4640      	mov	r0, r8
    95e6:	f002 fb3c 	bl	bc62 <assert_post_action>
    95ea:	e7ea      	b.n	95c2 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    95ec:	2802      	cmp	r0, #2
    95ee:	bfb8      	it	lt
    95f0:	2002      	movlt	r0, #2
    95f2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    95f4:	4b20      	ldr	r3, [pc, #128]	; (9678 <k_sched_time_slice_set+0xd8>)
    95f6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    95f8:	4b20      	ldr	r3, [pc, #128]	; (967c <k_sched_time_slice_set+0xdc>)
    95fa:	6898      	ldr	r0, [r3, #8]
    95fc:	f7ff ffbc 	bl	9578 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9600:	4818      	ldr	r0, [pc, #96]	; (9664 <k_sched_time_slice_set+0xc4>)
    9602:	f7ff fa91 	bl	8b28 <z_spin_unlock_valid>
    9606:	b1d0      	cbz	r0, 963e <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    9608:	f386 8811 	msr	BASEPRI, r6
    960c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9610:	2701      	movs	r7, #1
    9612:	bb27      	cbnz	r7, 965e <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    9614:	4b19      	ldr	r3, [pc, #100]	; (967c <k_sched_time_slice_set+0xdc>)
    9616:	2200      	movs	r2, #0
    9618:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    961a:	0c61      	lsrs	r1, r4, #17
    961c:	03e3      	lsls	r3, r4, #15
    961e:	f240 30e7 	movw	r0, #999	; 0x3e7
    9622:	1818      	adds	r0, r3, r0
    9624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9628:	f04f 0300 	mov.w	r3, #0
    962c:	f141 0100 	adc.w	r1, r1, #0
    9630:	f7f6 ff48 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    9634:	4b12      	ldr	r3, [pc, #72]	; (9680 <k_sched_time_slice_set+0xe0>)
    9636:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9638:	2c00      	cmp	r4, #0
    963a:	dcd7      	bgt.n	95ec <k_sched_time_slice_set+0x4c>
    963c:	e7da      	b.n	95f4 <k_sched_time_slice_set+0x54>
    963e:	4f0a      	ldr	r7, [pc, #40]	; (9668 <k_sched_time_slice_set+0xc8>)
    9640:	23b9      	movs	r3, #185	; 0xb9
    9642:	463a      	mov	r2, r7
    9644:	490f      	ldr	r1, [pc, #60]	; (9684 <k_sched_time_slice_set+0xe4>)
    9646:	480a      	ldr	r0, [pc, #40]	; (9670 <k_sched_time_slice_set+0xd0>)
    9648:	f002 fb12 	bl	bc70 <assert_print>
    964c:	4905      	ldr	r1, [pc, #20]	; (9664 <k_sched_time_slice_set+0xc4>)
    964e:	480e      	ldr	r0, [pc, #56]	; (9688 <k_sched_time_slice_set+0xe8>)
    9650:	f002 fb0e 	bl	bc70 <assert_print>
    9654:	21b9      	movs	r1, #185	; 0xb9
    9656:	4638      	mov	r0, r7
    9658:	f002 fb03 	bl	bc62 <assert_post_action>
    965c:	e7d4      	b.n	9608 <k_sched_time_slice_set+0x68>
}
    965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9662:	bf00      	nop
    9664:	20001190 	.word	0x20001190
    9668:	0000d7f0 	.word	0x0000d7f0
    966c:	0000d850 	.word	0x0000d850
    9670:	0000d02c 	.word	0x0000d02c
    9674:	0000d868 	.word	0x0000d868
    9678:	20001194 	.word	0x20001194
    967c:	20001154 	.word	0x20001154
    9680:	20001198 	.word	0x20001198
    9684:	0000d820 	.word	0x0000d820
    9688:	0000d838 	.word	0x0000d838

0000968c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    968e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9690:	2500      	movs	r5, #0
	__asm__ volatile(
    9692:	f04f 0320 	mov.w	r3, #32
    9696:	f3ef 8611 	mrs	r6, BASEPRI
    969a:	f383 8812 	msr	BASEPRI_MAX, r3
    969e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96a2:	4820      	ldr	r0, [pc, #128]	; (9724 <z_unpend_thread_no_timeout+0x98>)
    96a4:	f7ff fa30 	bl	8b08 <z_spin_lock_valid>
    96a8:	b118      	cbz	r0, 96b2 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    96aa:	481e      	ldr	r0, [pc, #120]	; (9724 <z_unpend_thread_no_timeout+0x98>)
    96ac:	f7ff fa4c 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    96b0:	e014      	b.n	96dc <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96b2:	4f1d      	ldr	r7, [pc, #116]	; (9728 <z_unpend_thread_no_timeout+0x9c>)
    96b4:	238e      	movs	r3, #142	; 0x8e
    96b6:	463a      	mov	r2, r7
    96b8:	491c      	ldr	r1, [pc, #112]	; (972c <z_unpend_thread_no_timeout+0xa0>)
    96ba:	481d      	ldr	r0, [pc, #116]	; (9730 <z_unpend_thread_no_timeout+0xa4>)
    96bc:	f002 fad8 	bl	bc70 <assert_print>
    96c0:	4918      	ldr	r1, [pc, #96]	; (9724 <z_unpend_thread_no_timeout+0x98>)
    96c2:	481c      	ldr	r0, [pc, #112]	; (9734 <z_unpend_thread_no_timeout+0xa8>)
    96c4:	f002 fad4 	bl	bc70 <assert_print>
    96c8:	218e      	movs	r1, #142	; 0x8e
    96ca:	4638      	mov	r0, r7
    96cc:	f002 fac9 	bl	bc62 <assert_post_action>
    96d0:	e7eb      	b.n	96aa <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    96d2:	f386 8811 	msr	BASEPRI, r6
    96d6:	f3bf 8f6f 	isb	sy
    96da:	2501      	movs	r5, #1
    96dc:	bb05      	cbnz	r5, 9720 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    96de:	4620      	mov	r0, r4
    96e0:	f7ff ff20 	bl	9524 <pended_on_thread>
    96e4:	4621      	mov	r1, r4
    96e6:	f000 f8fb 	bl	98e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    96ea:	7b63      	ldrb	r3, [r4, #13]
    96ec:	f023 0302 	bic.w	r3, r3, #2
    96f0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    96f2:	2300      	movs	r3, #0
    96f4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96f6:	480b      	ldr	r0, [pc, #44]	; (9724 <z_unpend_thread_no_timeout+0x98>)
    96f8:	f7ff fa16 	bl	8b28 <z_spin_unlock_valid>
    96fc:	2800      	cmp	r0, #0
    96fe:	d1e8      	bne.n	96d2 <z_unpend_thread_no_timeout+0x46>
    9700:	4d09      	ldr	r5, [pc, #36]	; (9728 <z_unpend_thread_no_timeout+0x9c>)
    9702:	23b9      	movs	r3, #185	; 0xb9
    9704:	462a      	mov	r2, r5
    9706:	490c      	ldr	r1, [pc, #48]	; (9738 <z_unpend_thread_no_timeout+0xac>)
    9708:	4809      	ldr	r0, [pc, #36]	; (9730 <z_unpend_thread_no_timeout+0xa4>)
    970a:	f002 fab1 	bl	bc70 <assert_print>
    970e:	4905      	ldr	r1, [pc, #20]	; (9724 <z_unpend_thread_no_timeout+0x98>)
    9710:	480a      	ldr	r0, [pc, #40]	; (973c <z_unpend_thread_no_timeout+0xb0>)
    9712:	f002 faad 	bl	bc70 <assert_print>
    9716:	21b9      	movs	r1, #185	; 0xb9
    9718:	4628      	mov	r0, r5
    971a:	f002 faa2 	bl	bc62 <assert_post_action>
    971e:	e7d8      	b.n	96d2 <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    9720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9722:	bf00      	nop
    9724:	20001190 	.word	0x20001190
    9728:	0000d7f0 	.word	0x0000d7f0
    972c:	0000d850 	.word	0x0000d850
    9730:	0000d02c 	.word	0x0000d02c
    9734:	0000d868 	.word	0x0000d868
    9738:	0000d820 	.word	0x0000d820
    973c:	0000d838 	.word	0x0000d838

00009740 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9740:	b570      	push	{r4, r5, r6, lr}
    9742:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    9744:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9746:	b921      	cbnz	r1, 9752 <z_reschedule+0x12>
    9748:	f3ef 8305 	mrs	r3, IPSR
    974c:	b913      	cbnz	r3, 9754 <z_reschedule+0x14>
    974e:	2101      	movs	r1, #1
    9750:	e000      	b.n	9754 <z_reschedule+0x14>
    9752:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    9754:	f011 0f01 	tst.w	r1, #1
    9758:	d01c      	beq.n	9794 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    975a:	4b1b      	ldr	r3, [pc, #108]	; (97c8 <z_reschedule+0x88>)
    975c:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    975e:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    9760:	429a      	cmp	r2, r3
    9762:	d017      	beq.n	9794 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9764:	4620      	mov	r0, r4
    9766:	f7ff f9df 	bl	8b28 <z_spin_unlock_valid>
    976a:	b118      	cbz	r0, 9774 <z_reschedule+0x34>
	ret = arch_swap(key);
    976c:	4628      	mov	r0, r5
    976e:	f7fa fc99 	bl	40a4 <arch_swap>
		z_swap(lock, key);
    9772:	e017      	b.n	97a4 <z_reschedule+0x64>
    9774:	4e15      	ldr	r6, [pc, #84]	; (97cc <z_reschedule+0x8c>)
    9776:	23d0      	movs	r3, #208	; 0xd0
    9778:	4632      	mov	r2, r6
    977a:	4915      	ldr	r1, [pc, #84]	; (97d0 <z_reschedule+0x90>)
    977c:	4815      	ldr	r0, [pc, #84]	; (97d4 <z_reschedule+0x94>)
    977e:	f002 fa77 	bl	bc70 <assert_print>
    9782:	4621      	mov	r1, r4
    9784:	4814      	ldr	r0, [pc, #80]	; (97d8 <z_reschedule+0x98>)
    9786:	f002 fa73 	bl	bc70 <assert_print>
    978a:	21d0      	movs	r1, #208	; 0xd0
    978c:	4630      	mov	r0, r6
    978e:	f002 fa68 	bl	bc62 <assert_post_action>
    9792:	e7eb      	b.n	976c <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9794:	4620      	mov	r0, r4
    9796:	f7ff f9c7 	bl	8b28 <z_spin_unlock_valid>
    979a:	b120      	cbz	r0, 97a6 <z_reschedule+0x66>
    979c:	f385 8811 	msr	BASEPRI, r5
    97a0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    97a4:	bd70      	pop	{r4, r5, r6, pc}
    97a6:	4e09      	ldr	r6, [pc, #36]	; (97cc <z_reschedule+0x8c>)
    97a8:	23b9      	movs	r3, #185	; 0xb9
    97aa:	4632      	mov	r2, r6
    97ac:	4908      	ldr	r1, [pc, #32]	; (97d0 <z_reschedule+0x90>)
    97ae:	4809      	ldr	r0, [pc, #36]	; (97d4 <z_reschedule+0x94>)
    97b0:	f002 fa5e 	bl	bc70 <assert_print>
    97b4:	4621      	mov	r1, r4
    97b6:	4808      	ldr	r0, [pc, #32]	; (97d8 <z_reschedule+0x98>)
    97b8:	f002 fa5a 	bl	bc70 <assert_print>
    97bc:	21b9      	movs	r1, #185	; 0xb9
    97be:	4630      	mov	r0, r6
    97c0:	f002 fa4f 	bl	bc62 <assert_post_action>
    97c4:	e7ea      	b.n	979c <z_reschedule+0x5c>
    97c6:	bf00      	nop
    97c8:	20001154 	.word	0x20001154
    97cc:	0000d7f0 	.word	0x0000d7f0
    97d0:	0000d820 	.word	0x0000d820
    97d4:	0000d02c 	.word	0x0000d02c
    97d8:	0000d838 	.word	0x0000d838

000097dc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    97dc:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    97de:	2400      	movs	r4, #0
	__asm__ volatile(
    97e0:	f04f 0320 	mov.w	r3, #32
    97e4:	f3ef 8511 	mrs	r5, BASEPRI
    97e8:	f383 8812 	msr	BASEPRI_MAX, r3
    97ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97f0:	482f      	ldr	r0, [pc, #188]	; (98b0 <k_sched_lock+0xd4>)
    97f2:	f7ff f989 	bl	8b08 <z_spin_lock_valid>
    97f6:	b118      	cbz	r0, 9800 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    97f8:	482d      	ldr	r0, [pc, #180]	; (98b0 <k_sched_lock+0xd4>)
    97fa:	f7ff f9a5 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    97fe:	e022      	b.n	9846 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9800:	4e2c      	ldr	r6, [pc, #176]	; (98b4 <k_sched_lock+0xd8>)
    9802:	238e      	movs	r3, #142	; 0x8e
    9804:	4632      	mov	r2, r6
    9806:	492c      	ldr	r1, [pc, #176]	; (98b8 <k_sched_lock+0xdc>)
    9808:	482c      	ldr	r0, [pc, #176]	; (98bc <k_sched_lock+0xe0>)
    980a:	f002 fa31 	bl	bc70 <assert_print>
    980e:	4928      	ldr	r1, [pc, #160]	; (98b0 <k_sched_lock+0xd4>)
    9810:	482b      	ldr	r0, [pc, #172]	; (98c0 <k_sched_lock+0xe4>)
    9812:	f002 fa2d 	bl	bc70 <assert_print>
    9816:	218e      	movs	r1, #142	; 0x8e
    9818:	4630      	mov	r0, r6
    981a:	f002 fa22 	bl	bc62 <assert_post_action>
    981e:	e7eb      	b.n	97f8 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9820:	4b28      	ldr	r3, [pc, #160]	; (98c4 <k_sched_lock+0xe8>)
    9822:	689b      	ldr	r3, [r3, #8]
    9824:	7bdb      	ldrb	r3, [r3, #15]
    9826:	2b01      	cmp	r3, #1
    9828:	d022      	beq.n	9870 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    982a:	4b26      	ldr	r3, [pc, #152]	; (98c4 <k_sched_lock+0xe8>)
    982c:	689a      	ldr	r2, [r3, #8]
    982e:	7bd3      	ldrb	r3, [r2, #15]
    9830:	3b01      	subs	r3, #1
    9832:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9834:	481e      	ldr	r0, [pc, #120]	; (98b0 <k_sched_lock+0xd4>)
    9836:	f7ff f977 	bl	8b28 <z_spin_unlock_valid>
    983a:	b340      	cbz	r0, 988e <k_sched_lock+0xb2>
	__asm__ volatile(
    983c:	f385 8811 	msr	BASEPRI, r5
    9840:	f3bf 8f6f 	isb	sy
    9844:	2401      	movs	r4, #1
    9846:	2c00      	cmp	r4, #0
    9848:	d131      	bne.n	98ae <k_sched_lock+0xd2>
    984a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    984e:	2b00      	cmp	r3, #0
    9850:	d0e6      	beq.n	9820 <k_sched_lock+0x44>
    9852:	4c1d      	ldr	r4, [pc, #116]	; (98c8 <k_sched_lock+0xec>)
    9854:	23fd      	movs	r3, #253	; 0xfd
    9856:	4622      	mov	r2, r4
    9858:	491c      	ldr	r1, [pc, #112]	; (98cc <k_sched_lock+0xf0>)
    985a:	4818      	ldr	r0, [pc, #96]	; (98bc <k_sched_lock+0xe0>)
    985c:	f002 fa08 	bl	bc70 <assert_print>
    9860:	481b      	ldr	r0, [pc, #108]	; (98d0 <k_sched_lock+0xf4>)
    9862:	f002 fa05 	bl	bc70 <assert_print>
    9866:	21fd      	movs	r1, #253	; 0xfd
    9868:	4620      	mov	r0, r4
    986a:	f002 f9fa 	bl	bc62 <assert_post_action>
    986e:	e7d7      	b.n	9820 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9870:	4c15      	ldr	r4, [pc, #84]	; (98c8 <k_sched_lock+0xec>)
    9872:	23fe      	movs	r3, #254	; 0xfe
    9874:	4622      	mov	r2, r4
    9876:	4917      	ldr	r1, [pc, #92]	; (98d4 <k_sched_lock+0xf8>)
    9878:	4810      	ldr	r0, [pc, #64]	; (98bc <k_sched_lock+0xe0>)
    987a:	f002 f9f9 	bl	bc70 <assert_print>
    987e:	4814      	ldr	r0, [pc, #80]	; (98d0 <k_sched_lock+0xf4>)
    9880:	f002 f9f6 	bl	bc70 <assert_print>
    9884:	21fe      	movs	r1, #254	; 0xfe
    9886:	4620      	mov	r0, r4
    9888:	f002 f9eb 	bl	bc62 <assert_post_action>
    988c:	e7cd      	b.n	982a <k_sched_lock+0x4e>
    988e:	4c09      	ldr	r4, [pc, #36]	; (98b4 <k_sched_lock+0xd8>)
    9890:	23b9      	movs	r3, #185	; 0xb9
    9892:	4622      	mov	r2, r4
    9894:	4910      	ldr	r1, [pc, #64]	; (98d8 <k_sched_lock+0xfc>)
    9896:	4809      	ldr	r0, [pc, #36]	; (98bc <k_sched_lock+0xe0>)
    9898:	f002 f9ea 	bl	bc70 <assert_print>
    989c:	4904      	ldr	r1, [pc, #16]	; (98b0 <k_sched_lock+0xd4>)
    989e:	480f      	ldr	r0, [pc, #60]	; (98dc <k_sched_lock+0x100>)
    98a0:	f002 f9e6 	bl	bc70 <assert_print>
    98a4:	21b9      	movs	r1, #185	; 0xb9
    98a6:	4620      	mov	r0, r4
    98a8:	f002 f9db 	bl	bc62 <assert_post_action>
    98ac:	e7c6      	b.n	983c <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    98ae:	bd70      	pop	{r4, r5, r6, pc}
    98b0:	20001190 	.word	0x20001190
    98b4:	0000d7f0 	.word	0x0000d7f0
    98b8:	0000d850 	.word	0x0000d850
    98bc:	0000d02c 	.word	0x0000d02c
    98c0:	0000d868 	.word	0x0000d868
    98c4:	20001154 	.word	0x20001154
    98c8:	0000eff4 	.word	0x0000eff4
    98cc:	0000eed8 	.word	0x0000eed8
    98d0:	0000f020 	.word	0x0000f020
    98d4:	0000f024 	.word	0x0000f024
    98d8:	0000d820 	.word	0x0000d820
    98dc:	0000d838 	.word	0x0000d838

000098e0 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    98e0:	b538      	push	{r3, r4, r5, lr}
    98e2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    98e4:	4b0c      	ldr	r3, [pc, #48]	; (9918 <z_priq_dumb_remove+0x38>)
    98e6:	4299      	cmp	r1, r3
    98e8:	d007      	beq.n	98fa <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    98ea:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    98ec:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    98ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    98f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    98f2:	2300      	movs	r3, #0
    98f4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    98f6:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    98f8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    98fa:	4d08      	ldr	r5, [pc, #32]	; (991c <z_priq_dumb_remove+0x3c>)
    98fc:	f240 433d 	movw	r3, #1085	; 0x43d
    9900:	462a      	mov	r2, r5
    9902:	4907      	ldr	r1, [pc, #28]	; (9920 <z_priq_dumb_remove+0x40>)
    9904:	4807      	ldr	r0, [pc, #28]	; (9924 <z_priq_dumb_remove+0x44>)
    9906:	f002 f9b3 	bl	bc70 <assert_print>
    990a:	f240 413d 	movw	r1, #1085	; 0x43d
    990e:	4628      	mov	r0, r5
    9910:	f002 f9a7 	bl	bc62 <assert_post_action>
    9914:	e7e9      	b.n	98ea <z_priq_dumb_remove+0xa>
    9916:	bf00      	nop
    9918:	20000490 	.word	0x20000490
    991c:	0000f0c8 	.word	0x0000f0c8
    9920:	0000f104 	.word	0x0000f104
    9924:	0000d02c 	.word	0x0000d02c

00009928 <update_cache>:
{
    9928:	b538      	push	{r3, r4, r5, lr}
    992a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    992c:	4819      	ldr	r0, [pc, #100]	; (9994 <update_cache+0x6c>)
    992e:	f003 f8f5 	bl	cb1c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9932:	4605      	mov	r5, r0
    9934:	b188      	cbz	r0, 995a <update_cache+0x32>
	if (preempt_ok != 0) {
    9936:	bb14      	cbnz	r4, 997e <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    9938:	4b17      	ldr	r3, [pc, #92]	; (9998 <update_cache+0x70>)
    993a:	689b      	ldr	r3, [r3, #8]
    993c:	b183      	cbz	r3, 9960 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    993e:	4b16      	ldr	r3, [pc, #88]	; (9998 <update_cache+0x70>)
    9940:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9942:	7b5a      	ldrb	r2, [r3, #13]
    9944:	f012 0f1f 	tst.w	r2, #31
    9948:	d119      	bne.n	997e <update_cache+0x56>
	return node->next != NULL;
    994a:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    994c:	b9ba      	cbnz	r2, 997e <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    994e:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    9950:	2a7f      	cmp	r2, #127	; 0x7f
    9952:	d914      	bls.n	997e <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    9954:	4a10      	ldr	r2, [pc, #64]	; (9998 <update_cache+0x70>)
    9956:	61d3      	str	r3, [r2, #28]
    9958:	e01a      	b.n	9990 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    995a:	4b0f      	ldr	r3, [pc, #60]	; (9998 <update_cache+0x70>)
    995c:	68dd      	ldr	r5, [r3, #12]
    995e:	e7ea      	b.n	9936 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    9960:	4c0e      	ldr	r4, [pc, #56]	; (999c <update_cache+0x74>)
    9962:	2389      	movs	r3, #137	; 0x89
    9964:	4622      	mov	r2, r4
    9966:	490e      	ldr	r1, [pc, #56]	; (99a0 <update_cache+0x78>)
    9968:	480e      	ldr	r0, [pc, #56]	; (99a4 <update_cache+0x7c>)
    996a:	f002 f981 	bl	bc70 <assert_print>
    996e:	480e      	ldr	r0, [pc, #56]	; (99a8 <update_cache+0x80>)
    9970:	f002 f97e 	bl	bc70 <assert_print>
    9974:	2189      	movs	r1, #137	; 0x89
    9976:	4620      	mov	r0, r4
    9978:	f002 f973 	bl	bc62 <assert_post_action>
    997c:	e7df      	b.n	993e <update_cache+0x16>
		if (thread != _current) {
    997e:	4b06      	ldr	r3, [pc, #24]	; (9998 <update_cache+0x70>)
    9980:	689b      	ldr	r3, [r3, #8]
    9982:	42ab      	cmp	r3, r5
    9984:	d002      	beq.n	998c <update_cache+0x64>
			z_reset_time_slice(thread);
    9986:	4628      	mov	r0, r5
    9988:	f7ff fdf6 	bl	9578 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <update_cache+0x70>)
    998e:	61dd      	str	r5, [r3, #28]
}
    9990:	bd38      	pop	{r3, r4, r5, pc}
    9992:	bf00      	nop
    9994:	20001174 	.word	0x20001174
    9998:	20001154 	.word	0x20001154
    999c:	0000f0c8 	.word	0x0000f0c8
    99a0:	0000f128 	.word	0x0000f128
    99a4:	0000d02c 	.word	0x0000d02c
    99a8:	0000f020 	.word	0x0000f020

000099ac <move_thread_to_end_of_prio_q>:
{
    99ac:	b538      	push	{r3, r4, r5, lr}
    99ae:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    99b0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    99b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    99b6:	2b00      	cmp	r3, #0
    99b8:	db2b      	blt.n	9a12 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    99ba:	7b6b      	ldrb	r3, [r5, #13]
    99bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    99c0:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    99c2:	4b22      	ldr	r3, [pc, #136]	; (9a4c <move_thread_to_end_of_prio_q+0xa0>)
    99c4:	429d      	cmp	r5, r3
    99c6:	d02c      	beq.n	9a22 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    99c8:	4b21      	ldr	r3, [pc, #132]	; (9a50 <move_thread_to_end_of_prio_q+0xa4>)
    99ca:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99ce:	429c      	cmp	r4, r3
    99d0:	d039      	beq.n	9a46 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99d2:	b16c      	cbz	r4, 99f0 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    99d4:	4621      	mov	r1, r4
    99d6:	4628      	mov	r0, r5
    99d8:	f003 f881 	bl	cade <z_sched_prio_cmp>
    99dc:	2800      	cmp	r0, #0
    99de:	dc2c      	bgt.n	9a3a <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    99e0:	b134      	cbz	r4, 99f0 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    99e2:	4b1b      	ldr	r3, [pc, #108]	; (9a50 <move_thread_to_end_of_prio_q+0xa4>)
    99e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    99e6:	429c      	cmp	r4, r3
    99e8:	d002      	beq.n	99f0 <move_thread_to_end_of_prio_q+0x44>
    99ea:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    99ec:	2c00      	cmp	r4, #0
    99ee:	d1f0      	bne.n	99d2 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    99f0:	4b17      	ldr	r3, [pc, #92]	; (9a50 <move_thread_to_end_of_prio_q+0xa4>)
    99f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    99f4:	f103 0120 	add.w	r1, r3, #32
    99f8:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    99fa:	606a      	str	r2, [r5, #4]
	tail->next = node;
    99fc:	6015      	str	r5, [r2, #0]
	list->tail = node;
    99fe:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    9a00:	4b13      	ldr	r3, [pc, #76]	; (9a50 <move_thread_to_end_of_prio_q+0xa4>)
    9a02:	6898      	ldr	r0, [r3, #8]
    9a04:	42a8      	cmp	r0, r5
    9a06:	bf14      	ite	ne
    9a08:	2000      	movne	r0, #0
    9a0a:	2001      	moveq	r0, #1
    9a0c:	f7ff ff8c 	bl	9928 <update_cache>
}
    9a10:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9a16:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9a18:	4601      	mov	r1, r0
    9a1a:	480e      	ldr	r0, [pc, #56]	; (9a54 <move_thread_to_end_of_prio_q+0xa8>)
    9a1c:	f7ff ff60 	bl	98e0 <z_priq_dumb_remove>
}
    9a20:	e7cb      	b.n	99ba <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9a22:	4c0d      	ldr	r4, [pc, #52]	; (9a58 <move_thread_to_end_of_prio_q+0xac>)
    9a24:	23ba      	movs	r3, #186	; 0xba
    9a26:	4622      	mov	r2, r4
    9a28:	490c      	ldr	r1, [pc, #48]	; (9a5c <move_thread_to_end_of_prio_q+0xb0>)
    9a2a:	480d      	ldr	r0, [pc, #52]	; (9a60 <move_thread_to_end_of_prio_q+0xb4>)
    9a2c:	f002 f920 	bl	bc70 <assert_print>
    9a30:	21ba      	movs	r1, #186	; 0xba
    9a32:	4620      	mov	r0, r4
    9a34:	f002 f915 	bl	bc62 <assert_post_action>
    9a38:	e7c6      	b.n	99c8 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9a3a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9a3c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9a3e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9a40:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9a42:	6065      	str	r5, [r4, #4]
}
    9a44:	e7dc      	b.n	9a00 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a46:	2400      	movs	r4, #0
    9a48:	e7c3      	b.n	99d2 <move_thread_to_end_of_prio_q+0x26>
    9a4a:	bf00      	nop
    9a4c:	20000490 	.word	0x20000490
    9a50:	20001154 	.word	0x20001154
    9a54:	20001174 	.word	0x20001174
    9a58:	0000f0c8 	.word	0x0000f0c8
    9a5c:	0000f104 	.word	0x0000f104
    9a60:	0000d02c 	.word	0x0000d02c

00009a64 <slice_expired_locked>:
{
    9a64:	b538      	push	{r3, r4, r5, lr}
    9a66:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9a68:	4b07      	ldr	r3, [pc, #28]	; (9a88 <slice_expired_locked+0x24>)
    9a6a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9a6c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    9a6e:	f013 0f1f 	tst.w	r3, #31
    9a72:	d004      	beq.n	9a7e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9a74:	4628      	mov	r0, r5
    9a76:	f7ff fd7f 	bl	9578 <z_reset_time_slice>
}
    9a7a:	4620      	mov	r0, r4
    9a7c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    9a7e:	4628      	mov	r0, r5
    9a80:	f7ff ff94 	bl	99ac <move_thread_to_end_of_prio_q>
    9a84:	e7f6      	b.n	9a74 <slice_expired_locked+0x10>
    9a86:	bf00      	nop
    9a88:	20001154 	.word	0x20001154

00009a8c <z_time_slice>:
{
    9a8c:	b570      	push	{r4, r5, r6, lr}
    9a8e:	4604      	mov	r4, r0
	__asm__ volatile(
    9a90:	f04f 0320 	mov.w	r3, #32
    9a94:	f3ef 8511 	mrs	r5, BASEPRI
    9a98:	f383 8812 	msr	BASEPRI_MAX, r3
    9a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9aa0:	4842      	ldr	r0, [pc, #264]	; (9bac <z_time_slice+0x120>)
    9aa2:	f7ff f831 	bl	8b08 <z_spin_lock_valid>
    9aa6:	b310      	cbz	r0, 9aee <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    9aa8:	4840      	ldr	r0, [pc, #256]	; (9bac <z_time_slice+0x120>)
    9aaa:	f7ff f84d 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    9aae:	462b      	mov	r3, r5
	if (pending_current == _current) {
    9ab0:	4a3f      	ldr	r2, [pc, #252]	; (9bb0 <z_time_slice+0x124>)
    9ab2:	6892      	ldr	r2, [r2, #8]
    9ab4:	493f      	ldr	r1, [pc, #252]	; (9bb4 <z_time_slice+0x128>)
    9ab6:	6809      	ldr	r1, [r1, #0]
    9ab8:	428a      	cmp	r2, r1
    9aba:	d028      	beq.n	9b0e <z_time_slice+0x82>
	pending_current = NULL;
    9abc:	493d      	ldr	r1, [pc, #244]	; (9bb4 <z_time_slice+0x128>)
    9abe:	2000      	movs	r0, #0
    9ac0:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    9ac2:	493d      	ldr	r1, [pc, #244]	; (9bb8 <z_time_slice+0x12c>)
    9ac4:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    9ac6:	2900      	cmp	r1, #0
    9ac8:	d052      	beq.n	9b70 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9aca:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    9acc:	297f      	cmp	r1, #127	; 0x7f
    9ace:	d83a      	bhi.n	9b46 <z_time_slice+0xba>
    9ad0:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    9ad2:	f011 0f1f 	tst.w	r1, #31
    9ad6:	d140      	bne.n	9b5a <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9ad8:	f992 000e 	ldrsb.w	r0, [r2, #14]
    9adc:	4937      	ldr	r1, [pc, #220]	; (9bbc <z_time_slice+0x130>)
    9ade:	6809      	ldr	r1, [r1, #0]
    9ae0:	4288      	cmp	r0, r1
    9ae2:	db3c      	blt.n	9b5e <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    9ae4:	4936      	ldr	r1, [pc, #216]	; (9bc0 <z_time_slice+0x134>)
    9ae6:	428a      	cmp	r2, r1
    9ae8:	d03b      	beq.n	9b62 <z_time_slice+0xd6>
    9aea:	2201      	movs	r2, #1
    9aec:	e02c      	b.n	9b48 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9aee:	4e35      	ldr	r6, [pc, #212]	; (9bc4 <z_time_slice+0x138>)
    9af0:	238e      	movs	r3, #142	; 0x8e
    9af2:	4632      	mov	r2, r6
    9af4:	4934      	ldr	r1, [pc, #208]	; (9bc8 <z_time_slice+0x13c>)
    9af6:	4835      	ldr	r0, [pc, #212]	; (9bcc <z_time_slice+0x140>)
    9af8:	f002 f8ba 	bl	bc70 <assert_print>
    9afc:	492b      	ldr	r1, [pc, #172]	; (9bac <z_time_slice+0x120>)
    9afe:	4834      	ldr	r0, [pc, #208]	; (9bd0 <z_time_slice+0x144>)
    9b00:	f002 f8b6 	bl	bc70 <assert_print>
    9b04:	218e      	movs	r1, #142	; 0x8e
    9b06:	4630      	mov	r0, r6
    9b08:	f002 f8ab 	bl	bc62 <assert_post_action>
    9b0c:	e7cc      	b.n	9aa8 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    9b0e:	4610      	mov	r0, r2
    9b10:	f7ff fd32 	bl	9578 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b14:	4825      	ldr	r0, [pc, #148]	; (9bac <z_time_slice+0x120>)
    9b16:	f7ff f807 	bl	8b28 <z_spin_unlock_valid>
    9b1a:	b120      	cbz	r0, 9b26 <z_time_slice+0x9a>
	__asm__ volatile(
    9b1c:	f385 8811 	msr	BASEPRI, r5
    9b20:	f3bf 8f6f 	isb	sy
		return;
    9b24:	e030      	b.n	9b88 <z_time_slice+0xfc>
    9b26:	4c27      	ldr	r4, [pc, #156]	; (9bc4 <z_time_slice+0x138>)
    9b28:	23b9      	movs	r3, #185	; 0xb9
    9b2a:	4622      	mov	r2, r4
    9b2c:	4929      	ldr	r1, [pc, #164]	; (9bd4 <z_time_slice+0x148>)
    9b2e:	4827      	ldr	r0, [pc, #156]	; (9bcc <z_time_slice+0x140>)
    9b30:	f002 f89e 	bl	bc70 <assert_print>
    9b34:	491d      	ldr	r1, [pc, #116]	; (9bac <z_time_slice+0x120>)
    9b36:	4828      	ldr	r0, [pc, #160]	; (9bd8 <z_time_slice+0x14c>)
    9b38:	f002 f89a 	bl	bc70 <assert_print>
    9b3c:	21b9      	movs	r1, #185	; 0xb9
    9b3e:	4620      	mov	r0, r4
    9b40:	f002 f88f 	bl	bc62 <assert_post_action>
    9b44:	e7ea      	b.n	9b1c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    9b46:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    9b48:	b192      	cbz	r2, 9b70 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    9b4a:	4a19      	ldr	r2, [pc, #100]	; (9bb0 <z_time_slice+0x124>)
    9b4c:	6910      	ldr	r0, [r2, #16]
    9b4e:	42a0      	cmp	r0, r4
    9b50:	dd09      	ble.n	9b66 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    9b52:	1b00      	subs	r0, r0, r4
    9b54:	4a16      	ldr	r2, [pc, #88]	; (9bb0 <z_time_slice+0x124>)
    9b56:	6110      	str	r0, [r2, #16]
    9b58:	e00d      	b.n	9b76 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    9b5a:	2200      	movs	r2, #0
    9b5c:	e7f4      	b.n	9b48 <z_time_slice+0xbc>
    9b5e:	2200      	movs	r2, #0
    9b60:	e7f2      	b.n	9b48 <z_time_slice+0xbc>
    9b62:	2200      	movs	r2, #0
    9b64:	e7f0      	b.n	9b48 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    9b66:	4628      	mov	r0, r5
    9b68:	f7ff ff7c 	bl	9a64 <slice_expired_locked>
    9b6c:	4603      	mov	r3, r0
    9b6e:	e002      	b.n	9b76 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    9b70:	4a0f      	ldr	r2, [pc, #60]	; (9bb0 <z_time_slice+0x124>)
    9b72:	2100      	movs	r1, #0
    9b74:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    9b76:	461c      	mov	r4, r3
    9b78:	480c      	ldr	r0, [pc, #48]	; (9bac <z_time_slice+0x120>)
    9b7a:	f7fe ffd5 	bl	8b28 <z_spin_unlock_valid>
    9b7e:	b120      	cbz	r0, 9b8a <z_time_slice+0xfe>
    9b80:	f384 8811 	msr	BASEPRI, r4
    9b84:	f3bf 8f6f 	isb	sy
}
    9b88:	bd70      	pop	{r4, r5, r6, pc}
    9b8a:	4d0e      	ldr	r5, [pc, #56]	; (9bc4 <z_time_slice+0x138>)
    9b8c:	23b9      	movs	r3, #185	; 0xb9
    9b8e:	462a      	mov	r2, r5
    9b90:	4910      	ldr	r1, [pc, #64]	; (9bd4 <z_time_slice+0x148>)
    9b92:	480e      	ldr	r0, [pc, #56]	; (9bcc <z_time_slice+0x140>)
    9b94:	f002 f86c 	bl	bc70 <assert_print>
    9b98:	4904      	ldr	r1, [pc, #16]	; (9bac <z_time_slice+0x120>)
    9b9a:	480f      	ldr	r0, [pc, #60]	; (9bd8 <z_time_slice+0x14c>)
    9b9c:	f002 f868 	bl	bc70 <assert_print>
    9ba0:	21b9      	movs	r1, #185	; 0xb9
    9ba2:	4628      	mov	r0, r5
    9ba4:	f002 f85d 	bl	bc62 <assert_post_action>
    9ba8:	e7ea      	b.n	9b80 <z_time_slice+0xf4>
    9baa:	bf00      	nop
    9bac:	20001190 	.word	0x20001190
    9bb0:	20001154 	.word	0x20001154
    9bb4:	2000118c 	.word	0x2000118c
    9bb8:	20001198 	.word	0x20001198
    9bbc:	20001194 	.word	0x20001194
    9bc0:	20000490 	.word	0x20000490
    9bc4:	0000d7f0 	.word	0x0000d7f0
    9bc8:	0000d850 	.word	0x0000d850
    9bcc:	0000d02c 	.word	0x0000d02c
    9bd0:	0000d868 	.word	0x0000d868
    9bd4:	0000d820 	.word	0x0000d820
    9bd8:	0000d838 	.word	0x0000d838

00009bdc <ready_thread>:
{
    9bdc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    9bde:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    9be0:	f990 200d 	ldrsb.w	r2, [r0, #13]
    9be4:	2a00      	cmp	r2, #0
    9be6:	db30      	blt.n	9c4a <ready_thread+0x6e>
    9be8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9bea:	f013 0f1f 	tst.w	r3, #31
    9bee:	d105      	bne.n	9bfc <ready_thread+0x20>
	return node->next != NULL;
    9bf0:	6982      	ldr	r2, [r0, #24]
    9bf2:	b10a      	cbz	r2, 9bf8 <ready_thread+0x1c>
    9bf4:	2200      	movs	r2, #0
    9bf6:	e002      	b.n	9bfe <ready_thread+0x22>
    9bf8:	2201      	movs	r2, #1
    9bfa:	e000      	b.n	9bfe <ready_thread+0x22>
    9bfc:	2200      	movs	r2, #0
    9bfe:	b322      	cbz	r2, 9c4a <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    9c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c04:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9c06:	4b1b      	ldr	r3, [pc, #108]	; (9c74 <ready_thread+0x98>)
    9c08:	429c      	cmp	r4, r3
    9c0a:	d01f      	beq.n	9c4c <ready_thread+0x70>
	return list->head == list;
    9c0c:	4b1a      	ldr	r3, [pc, #104]	; (9c78 <ready_thread+0x9c>)
    9c0e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c12:	429d      	cmp	r5, r3
    9c14:	d02c      	beq.n	9c70 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c16:	b16d      	cbz	r5, 9c34 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9c18:	4629      	mov	r1, r5
    9c1a:	4620      	mov	r0, r4
    9c1c:	f002 ff5f 	bl	cade <z_sched_prio_cmp>
    9c20:	2800      	cmp	r0, #0
    9c22:	dc1f      	bgt.n	9c64 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9c24:	b135      	cbz	r5, 9c34 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    9c26:	4b14      	ldr	r3, [pc, #80]	; (9c78 <ready_thread+0x9c>)
    9c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9c2a:	429d      	cmp	r5, r3
    9c2c:	d002      	beq.n	9c34 <ready_thread+0x58>
    9c2e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c30:	2d00      	cmp	r5, #0
    9c32:	d1f0      	bne.n	9c16 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    9c34:	4b10      	ldr	r3, [pc, #64]	; (9c78 <ready_thread+0x9c>)
    9c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9c38:	f103 0120 	add.w	r1, r3, #32
    9c3c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    9c3e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    9c40:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9c42:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    9c44:	2000      	movs	r0, #0
    9c46:	f7ff fe6f 	bl	9928 <update_cache>
}
    9c4a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9c4c:	4d0b      	ldr	r5, [pc, #44]	; (9c7c <ready_thread+0xa0>)
    9c4e:	23ba      	movs	r3, #186	; 0xba
    9c50:	462a      	mov	r2, r5
    9c52:	490b      	ldr	r1, [pc, #44]	; (9c80 <ready_thread+0xa4>)
    9c54:	480b      	ldr	r0, [pc, #44]	; (9c84 <ready_thread+0xa8>)
    9c56:	f002 f80b 	bl	bc70 <assert_print>
    9c5a:	21ba      	movs	r1, #186	; 0xba
    9c5c:	4628      	mov	r0, r5
    9c5e:	f002 f800 	bl	bc62 <assert_post_action>
    9c62:	e7d3      	b.n	9c0c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    9c64:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    9c66:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9c68:	6025      	str	r5, [r4, #0]
	prev->next = node;
    9c6a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9c6c:	606c      	str	r4, [r5, #4]
}
    9c6e:	e7e9      	b.n	9c44 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c70:	2500      	movs	r5, #0
    9c72:	e7d0      	b.n	9c16 <ready_thread+0x3a>
    9c74:	20000490 	.word	0x20000490
    9c78:	20001154 	.word	0x20001154
    9c7c:	0000f0c8 	.word	0x0000f0c8
    9c80:	0000f104 	.word	0x0000f104
    9c84:	0000d02c 	.word	0x0000d02c

00009c88 <z_ready_thread>:
{
    9c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c8a:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9c8c:	2400      	movs	r4, #0
	__asm__ volatile(
    9c8e:	f04f 0320 	mov.w	r3, #32
    9c92:	f3ef 8611 	mrs	r6, BASEPRI
    9c96:	f383 8812 	msr	BASEPRI_MAX, r3
    9c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c9e:	481e      	ldr	r0, [pc, #120]	; (9d18 <z_ready_thread+0x90>)
    9ca0:	f7fe ff32 	bl	8b08 <z_spin_lock_valid>
    9ca4:	b118      	cbz	r0, 9cae <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    9ca6:	481c      	ldr	r0, [pc, #112]	; (9d18 <z_ready_thread+0x90>)
    9ca8:	f7fe ff4e 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    9cac:	e018      	b.n	9ce0 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cae:	4f1b      	ldr	r7, [pc, #108]	; (9d1c <z_ready_thread+0x94>)
    9cb0:	238e      	movs	r3, #142	; 0x8e
    9cb2:	463a      	mov	r2, r7
    9cb4:	491a      	ldr	r1, [pc, #104]	; (9d20 <z_ready_thread+0x98>)
    9cb6:	481b      	ldr	r0, [pc, #108]	; (9d24 <z_ready_thread+0x9c>)
    9cb8:	f001 ffda 	bl	bc70 <assert_print>
    9cbc:	4916      	ldr	r1, [pc, #88]	; (9d18 <z_ready_thread+0x90>)
    9cbe:	481a      	ldr	r0, [pc, #104]	; (9d28 <z_ready_thread+0xa0>)
    9cc0:	f001 ffd6 	bl	bc70 <assert_print>
    9cc4:	218e      	movs	r1, #142	; 0x8e
    9cc6:	4638      	mov	r0, r7
    9cc8:	f001 ffcb 	bl	bc62 <assert_post_action>
    9ccc:	e7eb      	b.n	9ca6 <z_ready_thread+0x1e>
			ready_thread(thread);
    9cce:	4628      	mov	r0, r5
    9cd0:	f7ff ff84 	bl	9bdc <ready_thread>
    9cd4:	e00a      	b.n	9cec <z_ready_thread+0x64>
	__asm__ volatile(
    9cd6:	f386 8811 	msr	BASEPRI, r6
    9cda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9cde:	2401      	movs	r4, #1
    9ce0:	b9cc      	cbnz	r4, 9d16 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    9ce2:	4628      	mov	r0, r5
    9ce4:	f002 fef9 	bl	cada <thread_active_elsewhere>
    9ce8:	2800      	cmp	r0, #0
    9cea:	d0f0      	beq.n	9cce <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cec:	480a      	ldr	r0, [pc, #40]	; (9d18 <z_ready_thread+0x90>)
    9cee:	f7fe ff1b 	bl	8b28 <z_spin_unlock_valid>
    9cf2:	2800      	cmp	r0, #0
    9cf4:	d1ef      	bne.n	9cd6 <z_ready_thread+0x4e>
    9cf6:	4c09      	ldr	r4, [pc, #36]	; (9d1c <z_ready_thread+0x94>)
    9cf8:	23b9      	movs	r3, #185	; 0xb9
    9cfa:	4622      	mov	r2, r4
    9cfc:	490b      	ldr	r1, [pc, #44]	; (9d2c <z_ready_thread+0xa4>)
    9cfe:	4809      	ldr	r0, [pc, #36]	; (9d24 <z_ready_thread+0x9c>)
    9d00:	f001 ffb6 	bl	bc70 <assert_print>
    9d04:	4904      	ldr	r1, [pc, #16]	; (9d18 <z_ready_thread+0x90>)
    9d06:	480a      	ldr	r0, [pc, #40]	; (9d30 <z_ready_thread+0xa8>)
    9d08:	f001 ffb2 	bl	bc70 <assert_print>
    9d0c:	21b9      	movs	r1, #185	; 0xb9
    9d0e:	4620      	mov	r0, r4
    9d10:	f001 ffa7 	bl	bc62 <assert_post_action>
    9d14:	e7df      	b.n	9cd6 <z_ready_thread+0x4e>
}
    9d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d18:	20001190 	.word	0x20001190
    9d1c:	0000d7f0 	.word	0x0000d7f0
    9d20:	0000d850 	.word	0x0000d850
    9d24:	0000d02c 	.word	0x0000d02c
    9d28:	0000d868 	.word	0x0000d868
    9d2c:	0000d820 	.word	0x0000d820
    9d30:	0000d838 	.word	0x0000d838

00009d34 <z_sched_start>:
{
    9d34:	b570      	push	{r4, r5, r6, lr}
    9d36:	4604      	mov	r4, r0
	__asm__ volatile(
    9d38:	f04f 0320 	mov.w	r3, #32
    9d3c:	f3ef 8511 	mrs	r5, BASEPRI
    9d40:	f383 8812 	msr	BASEPRI_MAX, r3
    9d44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d48:	481f      	ldr	r0, [pc, #124]	; (9dc8 <z_sched_start+0x94>)
    9d4a:	f7fe fedd 	bl	8b08 <z_spin_lock_valid>
    9d4e:	b188      	cbz	r0, 9d74 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    9d50:	481d      	ldr	r0, [pc, #116]	; (9dc8 <z_sched_start+0x94>)
    9d52:	f7fe fef9 	bl	8b48 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9d56:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    9d58:	f013 0f04 	tst.w	r3, #4
    9d5c:	d01a      	beq.n	9d94 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9d5e:	f023 0304 	bic.w	r3, r3, #4
    9d62:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    9d64:	4620      	mov	r0, r4
    9d66:	f7ff ff39 	bl	9bdc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9d6a:	4629      	mov	r1, r5
    9d6c:	4816      	ldr	r0, [pc, #88]	; (9dc8 <z_sched_start+0x94>)
    9d6e:	f7ff fce7 	bl	9740 <z_reschedule>
}
    9d72:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d74:	4e15      	ldr	r6, [pc, #84]	; (9dcc <z_sched_start+0x98>)
    9d76:	238e      	movs	r3, #142	; 0x8e
    9d78:	4632      	mov	r2, r6
    9d7a:	4915      	ldr	r1, [pc, #84]	; (9dd0 <z_sched_start+0x9c>)
    9d7c:	4815      	ldr	r0, [pc, #84]	; (9dd4 <z_sched_start+0xa0>)
    9d7e:	f001 ff77 	bl	bc70 <assert_print>
    9d82:	4911      	ldr	r1, [pc, #68]	; (9dc8 <z_sched_start+0x94>)
    9d84:	4814      	ldr	r0, [pc, #80]	; (9dd8 <z_sched_start+0xa4>)
    9d86:	f001 ff73 	bl	bc70 <assert_print>
    9d8a:	218e      	movs	r1, #142	; 0x8e
    9d8c:	4630      	mov	r0, r6
    9d8e:	f001 ff68 	bl	bc62 <assert_post_action>
    9d92:	e7dd      	b.n	9d50 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d94:	480c      	ldr	r0, [pc, #48]	; (9dc8 <z_sched_start+0x94>)
    9d96:	f7fe fec7 	bl	8b28 <z_spin_unlock_valid>
    9d9a:	b120      	cbz	r0, 9da6 <z_sched_start+0x72>
	__asm__ volatile(
    9d9c:	f385 8811 	msr	BASEPRI, r5
    9da0:	f3bf 8f6f 	isb	sy
		return;
    9da4:	e7e5      	b.n	9d72 <z_sched_start+0x3e>
    9da6:	4c09      	ldr	r4, [pc, #36]	; (9dcc <z_sched_start+0x98>)
    9da8:	23b9      	movs	r3, #185	; 0xb9
    9daa:	4622      	mov	r2, r4
    9dac:	490b      	ldr	r1, [pc, #44]	; (9ddc <z_sched_start+0xa8>)
    9dae:	4809      	ldr	r0, [pc, #36]	; (9dd4 <z_sched_start+0xa0>)
    9db0:	f001 ff5e 	bl	bc70 <assert_print>
    9db4:	4904      	ldr	r1, [pc, #16]	; (9dc8 <z_sched_start+0x94>)
    9db6:	480a      	ldr	r0, [pc, #40]	; (9de0 <z_sched_start+0xac>)
    9db8:	f001 ff5a 	bl	bc70 <assert_print>
    9dbc:	21b9      	movs	r1, #185	; 0xb9
    9dbe:	4620      	mov	r0, r4
    9dc0:	f001 ff4f 	bl	bc62 <assert_post_action>
    9dc4:	e7ea      	b.n	9d9c <z_sched_start+0x68>
    9dc6:	bf00      	nop
    9dc8:	20001190 	.word	0x20001190
    9dcc:	0000d7f0 	.word	0x0000d7f0
    9dd0:	0000d850 	.word	0x0000d850
    9dd4:	0000d02c 	.word	0x0000d02c
    9dd8:	0000d868 	.word	0x0000d868
    9ddc:	0000d820 	.word	0x0000d820
    9de0:	0000d838 	.word	0x0000d838

00009de4 <z_thread_timeout>:
{
    9de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9de8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    9dea:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    9dee:	2500      	movs	r5, #0
	__asm__ volatile(
    9df0:	f04f 0320 	mov.w	r3, #32
    9df4:	f3ef 8711 	mrs	r7, BASEPRI
    9df8:	f383 8812 	msr	BASEPRI_MAX, r3
    9dfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e00:	482b      	ldr	r0, [pc, #172]	; (9eb0 <z_thread_timeout+0xcc>)
    9e02:	f7fe fe81 	bl	8b08 <z_spin_lock_valid>
    9e06:	b118      	cbz	r0, 9e10 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    9e08:	4829      	ldr	r0, [pc, #164]	; (9eb0 <z_thread_timeout+0xcc>)
    9e0a:	f7fe fe9d 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    9e0e:	e026      	b.n	9e5e <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e10:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9eb4 <z_thread_timeout+0xd0>
    9e14:	238e      	movs	r3, #142	; 0x8e
    9e16:	4642      	mov	r2, r8
    9e18:	4927      	ldr	r1, [pc, #156]	; (9eb8 <z_thread_timeout+0xd4>)
    9e1a:	4828      	ldr	r0, [pc, #160]	; (9ebc <z_thread_timeout+0xd8>)
    9e1c:	f001 ff28 	bl	bc70 <assert_print>
    9e20:	4923      	ldr	r1, [pc, #140]	; (9eb0 <z_thread_timeout+0xcc>)
    9e22:	4827      	ldr	r0, [pc, #156]	; (9ec0 <z_thread_timeout+0xdc>)
    9e24:	f001 ff24 	bl	bc70 <assert_print>
    9e28:	218e      	movs	r1, #142	; 0x8e
    9e2a:	4640      	mov	r0, r8
    9e2c:	f001 ff19 	bl	bc62 <assert_post_action>
    9e30:	e7ea      	b.n	9e08 <z_thread_timeout+0x24>
    9e32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    9e36:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    9e3a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9e3e:	f023 0310 	bic.w	r3, r3, #16
    9e42:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    9e46:	4630      	mov	r0, r6
    9e48:	f7ff fec8 	bl	9bdc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e4c:	4818      	ldr	r0, [pc, #96]	; (9eb0 <z_thread_timeout+0xcc>)
    9e4e:	f7fe fe6b 	bl	8b28 <z_spin_unlock_valid>
    9e52:	b1d8      	cbz	r0, 9e8c <z_thread_timeout+0xa8>
	__asm__ volatile(
    9e54:	f387 8811 	msr	BASEPRI, r7
    9e58:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9e5c:	2501      	movs	r5, #1
    9e5e:	bb2d      	cbnz	r5, 9eac <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    9e60:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    9e64:	f013 0f28 	tst.w	r3, #40	; 0x28
    9e68:	d1f0      	bne.n	9e4c <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    9e6a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d0df      	beq.n	9e32 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9e72:	4630      	mov	r0, r6
    9e74:	f7ff fb56 	bl	9524 <pended_on_thread>
    9e78:	4631      	mov	r1, r6
    9e7a:	f7ff fd31 	bl	98e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9e7e:	7b73      	ldrb	r3, [r6, #13]
    9e80:	f023 0302 	bic.w	r3, r3, #2
    9e84:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    9e86:	2300      	movs	r3, #0
    9e88:	60b3      	str	r3, [r6, #8]
}
    9e8a:	e7d2      	b.n	9e32 <z_thread_timeout+0x4e>
    9e8c:	4d09      	ldr	r5, [pc, #36]	; (9eb4 <z_thread_timeout+0xd0>)
    9e8e:	23b9      	movs	r3, #185	; 0xb9
    9e90:	462a      	mov	r2, r5
    9e92:	490c      	ldr	r1, [pc, #48]	; (9ec4 <z_thread_timeout+0xe0>)
    9e94:	4809      	ldr	r0, [pc, #36]	; (9ebc <z_thread_timeout+0xd8>)
    9e96:	f001 feeb 	bl	bc70 <assert_print>
    9e9a:	4905      	ldr	r1, [pc, #20]	; (9eb0 <z_thread_timeout+0xcc>)
    9e9c:	480a      	ldr	r0, [pc, #40]	; (9ec8 <z_thread_timeout+0xe4>)
    9e9e:	f001 fee7 	bl	bc70 <assert_print>
    9ea2:	21b9      	movs	r1, #185	; 0xb9
    9ea4:	4628      	mov	r0, r5
    9ea6:	f001 fedc 	bl	bc62 <assert_post_action>
    9eaa:	e7d3      	b.n	9e54 <z_thread_timeout+0x70>
}
    9eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eb0:	20001190 	.word	0x20001190
    9eb4:	0000d7f0 	.word	0x0000d7f0
    9eb8:	0000d850 	.word	0x0000d850
    9ebc:	0000d02c 	.word	0x0000d02c
    9ec0:	0000d868 	.word	0x0000d868
    9ec4:	0000d820 	.word	0x0000d820
    9ec8:	0000d838 	.word	0x0000d838

00009ecc <unready_thread>:
{
    9ecc:	b510      	push	{r4, lr}
    9ece:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    9ed0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9ed2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	db08      	blt.n	9eec <unready_thread+0x20>
	update_cache(thread == _current);
    9eda:	4b08      	ldr	r3, [pc, #32]	; (9efc <unready_thread+0x30>)
    9edc:	6898      	ldr	r0, [r3, #8]
    9ede:	42a0      	cmp	r0, r4
    9ee0:	bf14      	ite	ne
    9ee2:	2000      	movne	r0, #0
    9ee4:	2001      	moveq	r0, #1
    9ee6:	f7ff fd1f 	bl	9928 <update_cache>
}
    9eea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9ef0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9ef2:	4601      	mov	r1, r0
    9ef4:	4802      	ldr	r0, [pc, #8]	; (9f00 <unready_thread+0x34>)
    9ef6:	f7ff fcf3 	bl	98e0 <z_priq_dumb_remove>
}
    9efa:	e7ee      	b.n	9eda <unready_thread+0xe>
    9efc:	20001154 	.word	0x20001154
    9f00:	20001174 	.word	0x20001174

00009f04 <add_to_waitq_locked>:
{
    9f04:	b570      	push	{r4, r5, r6, lr}
    9f06:	4605      	mov	r5, r0
    9f08:	460e      	mov	r6, r1
	unready_thread(thread);
    9f0a:	f7ff ffdf 	bl	9ecc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9f0e:	7b6b      	ldrb	r3, [r5, #13]
    9f10:	f043 0302 	orr.w	r3, r3, #2
    9f14:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    9f16:	b1ce      	cbz	r6, 9f4c <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    9f18:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9f1a:	4b17      	ldr	r3, [pc, #92]	; (9f78 <add_to_waitq_locked+0x74>)
    9f1c:	429d      	cmp	r5, r3
    9f1e:	d016      	beq.n	9f4e <add_to_waitq_locked+0x4a>
	return list->head == list;
    9f20:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f22:	42a6      	cmp	r6, r4
    9f24:	d025      	beq.n	9f72 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f26:	b164      	cbz	r4, 9f42 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9f28:	4621      	mov	r1, r4
    9f2a:	4628      	mov	r0, r5
    9f2c:	f002 fdd7 	bl	cade <z_sched_prio_cmp>
    9f30:	2800      	cmp	r0, #0
    9f32:	dc18      	bgt.n	9f66 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9f34:	b12c      	cbz	r4, 9f42 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    9f36:	6873      	ldr	r3, [r6, #4]
    9f38:	429c      	cmp	r4, r3
    9f3a:	d002      	beq.n	9f42 <add_to_waitq_locked+0x3e>
    9f3c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f3e:	2c00      	cmp	r4, #0
    9f40:	d1f1      	bne.n	9f26 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    9f42:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    9f44:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    9f46:	606b      	str	r3, [r5, #4]
	tail->next = node;
    9f48:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9f4a:	6075      	str	r5, [r6, #4]
}
    9f4c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9f4e:	4c0b      	ldr	r4, [pc, #44]	; (9f7c <add_to_waitq_locked+0x78>)
    9f50:	23ba      	movs	r3, #186	; 0xba
    9f52:	4622      	mov	r2, r4
    9f54:	490a      	ldr	r1, [pc, #40]	; (9f80 <add_to_waitq_locked+0x7c>)
    9f56:	480b      	ldr	r0, [pc, #44]	; (9f84 <add_to_waitq_locked+0x80>)
    9f58:	f001 fe8a 	bl	bc70 <assert_print>
    9f5c:	21ba      	movs	r1, #186	; 0xba
    9f5e:	4620      	mov	r0, r4
    9f60:	f001 fe7f 	bl	bc62 <assert_post_action>
    9f64:	e7dc      	b.n	9f20 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9f66:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9f68:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9f6a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9f6c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9f6e:	6065      	str	r5, [r4, #4]
}
    9f70:	e7ec      	b.n	9f4c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f72:	2400      	movs	r4, #0
    9f74:	e7d7      	b.n	9f26 <add_to_waitq_locked+0x22>
    9f76:	bf00      	nop
    9f78:	20000490 	.word	0x20000490
    9f7c:	0000f0c8 	.word	0x0000f0c8
    9f80:	0000f104 	.word	0x0000f104
    9f84:	0000d02c 	.word	0x0000d02c

00009f88 <pend>:
{
    9f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f8c:	4605      	mov	r5, r0
    9f8e:	460e      	mov	r6, r1
    9f90:	4691      	mov	r9, r2
    9f92:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    9f94:	2400      	movs	r4, #0
	__asm__ volatile(
    9f96:	f04f 0320 	mov.w	r3, #32
    9f9a:	f3ef 8711 	mrs	r7, BASEPRI
    9f9e:	f383 8812 	msr	BASEPRI_MAX, r3
    9fa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fa6:	481f      	ldr	r0, [pc, #124]	; (a024 <pend+0x9c>)
    9fa8:	f7fe fdae 	bl	8b08 <z_spin_lock_valid>
    9fac:	b118      	cbz	r0, 9fb6 <pend+0x2e>
	z_spin_lock_set_owner(l);
    9fae:	481d      	ldr	r0, [pc, #116]	; (a024 <pend+0x9c>)
    9fb0:	f7fe fdca 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    9fb4:	e015      	b.n	9fe2 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fb6:	f8df a070 	ldr.w	sl, [pc, #112]	; a028 <pend+0xa0>
    9fba:	238e      	movs	r3, #142	; 0x8e
    9fbc:	4652      	mov	r2, sl
    9fbe:	491b      	ldr	r1, [pc, #108]	; (a02c <pend+0xa4>)
    9fc0:	481b      	ldr	r0, [pc, #108]	; (a030 <pend+0xa8>)
    9fc2:	f001 fe55 	bl	bc70 <assert_print>
    9fc6:	4917      	ldr	r1, [pc, #92]	; (a024 <pend+0x9c>)
    9fc8:	481a      	ldr	r0, [pc, #104]	; (a034 <pend+0xac>)
    9fca:	f001 fe51 	bl	bc70 <assert_print>
    9fce:	218e      	movs	r1, #142	; 0x8e
    9fd0:	4650      	mov	r0, sl
    9fd2:	f001 fe46 	bl	bc62 <assert_post_action>
    9fd6:	e7ea      	b.n	9fae <pend+0x26>
	__asm__ volatile(
    9fd8:	f387 8811 	msr	BASEPRI, r7
    9fdc:	f3bf 8f6f 	isb	sy
    9fe0:	2401      	movs	r4, #1
    9fe2:	b9c4      	cbnz	r4, a016 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    9fe4:	4631      	mov	r1, r6
    9fe6:	4628      	mov	r0, r5
    9fe8:	f7ff ff8c 	bl	9f04 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fec:	480d      	ldr	r0, [pc, #52]	; (a024 <pend+0x9c>)
    9fee:	f7fe fd9b 	bl	8b28 <z_spin_unlock_valid>
    9ff2:	2800      	cmp	r0, #0
    9ff4:	d1f0      	bne.n	9fd8 <pend+0x50>
    9ff6:	4c0c      	ldr	r4, [pc, #48]	; (a028 <pend+0xa0>)
    9ff8:	23b9      	movs	r3, #185	; 0xb9
    9ffa:	4622      	mov	r2, r4
    9ffc:	490e      	ldr	r1, [pc, #56]	; (a038 <pend+0xb0>)
    9ffe:	480c      	ldr	r0, [pc, #48]	; (a030 <pend+0xa8>)
    a000:	f001 fe36 	bl	bc70 <assert_print>
    a004:	4907      	ldr	r1, [pc, #28]	; (a024 <pend+0x9c>)
    a006:	480d      	ldr	r0, [pc, #52]	; (a03c <pend+0xb4>)
    a008:	f001 fe32 	bl	bc70 <assert_print>
    a00c:	21b9      	movs	r1, #185	; 0xb9
    a00e:	4620      	mov	r0, r4
    a010:	f001 fe27 	bl	bc62 <assert_post_action>
    a014:	e7e0      	b.n	9fd8 <pend+0x50>
	add_thread_timeout(thread, timeout);
    a016:	464a      	mov	r2, r9
    a018:	4643      	mov	r3, r8
    a01a:	4628      	mov	r0, r5
    a01c:	f7ff fa9c 	bl	9558 <add_thread_timeout>
}
    a020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a024:	20001190 	.word	0x20001190
    a028:	0000d7f0 	.word	0x0000d7f0
    a02c:	0000d850 	.word	0x0000d850
    a030:	0000d02c 	.word	0x0000d02c
    a034:	0000d868 	.word	0x0000d868
    a038:	0000d820 	.word	0x0000d820
    a03c:	0000d838 	.word	0x0000d838

0000a040 <z_pend_curr>:
{
    a040:	b570      	push	{r4, r5, r6, lr}
    a042:	4604      	mov	r4, r0
    a044:	460d      	mov	r5, r1
    a046:	4611      	mov	r1, r2
	pending_current = _current;
    a048:	4b0f      	ldr	r3, [pc, #60]	; (a088 <z_pend_curr+0x48>)
    a04a:	6898      	ldr	r0, [r3, #8]
    a04c:	4b0f      	ldr	r3, [pc, #60]	; (a08c <z_pend_curr+0x4c>)
    a04e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a054:	f7ff ff98 	bl	9f88 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a058:	4620      	mov	r0, r4
    a05a:	f7fe fd65 	bl	8b28 <z_spin_unlock_valid>
    a05e:	b118      	cbz	r0, a068 <z_pend_curr+0x28>
    a060:	4628      	mov	r0, r5
    a062:	f7fa f81f 	bl	40a4 <arch_swap>
}
    a066:	bd70      	pop	{r4, r5, r6, pc}
    a068:	4e09      	ldr	r6, [pc, #36]	; (a090 <z_pend_curr+0x50>)
    a06a:	23d0      	movs	r3, #208	; 0xd0
    a06c:	4632      	mov	r2, r6
    a06e:	4909      	ldr	r1, [pc, #36]	; (a094 <z_pend_curr+0x54>)
    a070:	4809      	ldr	r0, [pc, #36]	; (a098 <z_pend_curr+0x58>)
    a072:	f001 fdfd 	bl	bc70 <assert_print>
    a076:	4621      	mov	r1, r4
    a078:	4808      	ldr	r0, [pc, #32]	; (a09c <z_pend_curr+0x5c>)
    a07a:	f001 fdf9 	bl	bc70 <assert_print>
    a07e:	21d0      	movs	r1, #208	; 0xd0
    a080:	4630      	mov	r0, r6
    a082:	f001 fdee 	bl	bc62 <assert_post_action>
    a086:	e7eb      	b.n	a060 <z_pend_curr+0x20>
    a088:	20001154 	.word	0x20001154
    a08c:	2000118c 	.word	0x2000118c
    a090:	0000d7f0 	.word	0x0000d7f0
    a094:	0000d820 	.word	0x0000d820
    a098:	0000d02c 	.word	0x0000d02c
    a09c:	0000d838 	.word	0x0000d838

0000a0a0 <z_set_prio>:
{
    a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0a4:	4604      	mov	r4, r0
    a0a6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    a0a8:	2500      	movs	r5, #0
	__asm__ volatile(
    a0aa:	f04f 0320 	mov.w	r3, #32
    a0ae:	f3ef 8811 	mrs	r8, BASEPRI
    a0b2:	f383 8812 	msr	BASEPRI_MAX, r3
    a0b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0ba:	4844      	ldr	r0, [pc, #272]	; (a1cc <z_set_prio+0x12c>)
    a0bc:	f7fe fd24 	bl	8b08 <z_spin_lock_valid>
    a0c0:	b120      	cbz	r0, a0cc <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    a0c2:	4842      	ldr	r0, [pc, #264]	; (a1cc <z_set_prio+0x12c>)
    a0c4:	f7fe fd40 	bl	8b48 <z_spin_lock_set_owner>
	bool need_sched = 0;
    a0c8:	2700      	movs	r7, #0
	return k;
    a0ca:	e01d      	b.n	a108 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a0cc:	4f40      	ldr	r7, [pc, #256]	; (a1d0 <z_set_prio+0x130>)
    a0ce:	238e      	movs	r3, #142	; 0x8e
    a0d0:	463a      	mov	r2, r7
    a0d2:	4940      	ldr	r1, [pc, #256]	; (a1d4 <z_set_prio+0x134>)
    a0d4:	4840      	ldr	r0, [pc, #256]	; (a1d8 <z_set_prio+0x138>)
    a0d6:	f001 fdcb 	bl	bc70 <assert_print>
    a0da:	493c      	ldr	r1, [pc, #240]	; (a1cc <z_set_prio+0x12c>)
    a0dc:	483f      	ldr	r0, [pc, #252]	; (a1dc <z_set_prio+0x13c>)
    a0de:	f001 fdc7 	bl	bc70 <assert_print>
    a0e2:	218e      	movs	r1, #142	; 0x8e
    a0e4:	4638      	mov	r0, r7
    a0e6:	f001 fdbc 	bl	bc62 <assert_post_action>
    a0ea:	e7ea      	b.n	a0c2 <z_set_prio+0x22>
		if (need_sched) {
    a0ec:	f013 0701 	ands.w	r7, r3, #1
    a0f0:	d116      	bne.n	a120 <z_set_prio+0x80>
			thread->base.prio = prio;
    a0f2:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a0f4:	4835      	ldr	r0, [pc, #212]	; (a1cc <z_set_prio+0x12c>)
    a0f6:	f7fe fd17 	bl	8b28 <z_spin_unlock_valid>
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d053      	beq.n	a1a6 <z_set_prio+0x106>
	__asm__ volatile(
    a0fe:	f388 8811 	msr	BASEPRI, r8
    a102:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a106:	2501      	movs	r5, #1
    a108:	462b      	mov	r3, r5
    a10a:	2d00      	cmp	r5, #0
    a10c:	d15b      	bne.n	a1c6 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    a10e:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a110:	f012 0f1f 	tst.w	r2, #31
    a114:	d1ea      	bne.n	a0ec <z_set_prio+0x4c>
	return node->next != NULL;
    a116:	69a1      	ldr	r1, [r4, #24]
    a118:	2900      	cmp	r1, #0
    a11a:	d1e7      	bne.n	a0ec <z_set_prio+0x4c>
    a11c:	2301      	movs	r3, #1
    a11e:	e7e5      	b.n	a0ec <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a124:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a126:	4621      	mov	r1, r4
    a128:	482d      	ldr	r0, [pc, #180]	; (a1e0 <z_set_prio+0x140>)
    a12a:	f7ff fbd9 	bl	98e0 <z_priq_dumb_remove>
				thread->base.prio = prio;
    a12e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a130:	7b63      	ldrb	r3, [r4, #13]
    a132:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a136:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a138:	4b2a      	ldr	r3, [pc, #168]	; (a1e4 <z_set_prio+0x144>)
    a13a:	429c      	cmp	r4, r3
    a13c:	d01f      	beq.n	a17e <z_set_prio+0xde>
	return list->head == list;
    a13e:	4b2a      	ldr	r3, [pc, #168]	; (a1e8 <z_set_prio+0x148>)
    a140:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a144:	429d      	cmp	r5, r3
    a146:	d02c      	beq.n	a1a2 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a148:	b16d      	cbz	r5, a166 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a14a:	4629      	mov	r1, r5
    a14c:	4620      	mov	r0, r4
    a14e:	f002 fcc6 	bl	cade <z_sched_prio_cmp>
    a152:	2800      	cmp	r0, #0
    a154:	dc1f      	bgt.n	a196 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a156:	b135      	cbz	r5, a166 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    a158:	4b23      	ldr	r3, [pc, #140]	; (a1e8 <z_set_prio+0x148>)
    a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a15c:	429d      	cmp	r5, r3
    a15e:	d002      	beq.n	a166 <z_set_prio+0xc6>
    a160:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a162:	2d00      	cmp	r5, #0
    a164:	d1f0      	bne.n	a148 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    a166:	4b20      	ldr	r3, [pc, #128]	; (a1e8 <z_set_prio+0x148>)
    a168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a16a:	f103 0120 	add.w	r1, r3, #32
    a16e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a170:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a172:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a174:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    a176:	2001      	movs	r0, #1
    a178:	f7ff fbd6 	bl	9928 <update_cache>
    a17c:	e7ba      	b.n	a0f4 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a17e:	4d1b      	ldr	r5, [pc, #108]	; (a1ec <z_set_prio+0x14c>)
    a180:	23ba      	movs	r3, #186	; 0xba
    a182:	462a      	mov	r2, r5
    a184:	491a      	ldr	r1, [pc, #104]	; (a1f0 <z_set_prio+0x150>)
    a186:	4814      	ldr	r0, [pc, #80]	; (a1d8 <z_set_prio+0x138>)
    a188:	f001 fd72 	bl	bc70 <assert_print>
    a18c:	21ba      	movs	r1, #186	; 0xba
    a18e:	4628      	mov	r0, r5
    a190:	f001 fd67 	bl	bc62 <assert_post_action>
    a194:	e7d3      	b.n	a13e <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    a196:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a198:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a19a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a19c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a19e:	606c      	str	r4, [r5, #4]
}
    a1a0:	e7e9      	b.n	a176 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a1a2:	2500      	movs	r5, #0
    a1a4:	e7d0      	b.n	a148 <z_set_prio+0xa8>
    a1a6:	4d0a      	ldr	r5, [pc, #40]	; (a1d0 <z_set_prio+0x130>)
    a1a8:	23b9      	movs	r3, #185	; 0xb9
    a1aa:	462a      	mov	r2, r5
    a1ac:	4911      	ldr	r1, [pc, #68]	; (a1f4 <z_set_prio+0x154>)
    a1ae:	480a      	ldr	r0, [pc, #40]	; (a1d8 <z_set_prio+0x138>)
    a1b0:	f001 fd5e 	bl	bc70 <assert_print>
    a1b4:	4905      	ldr	r1, [pc, #20]	; (a1cc <z_set_prio+0x12c>)
    a1b6:	4810      	ldr	r0, [pc, #64]	; (a1f8 <z_set_prio+0x158>)
    a1b8:	f001 fd5a 	bl	bc70 <assert_print>
    a1bc:	21b9      	movs	r1, #185	; 0xb9
    a1be:	4628      	mov	r0, r5
    a1c0:	f001 fd4f 	bl	bc62 <assert_post_action>
    a1c4:	e79b      	b.n	a0fe <z_set_prio+0x5e>
}
    a1c6:	4638      	mov	r0, r7
    a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a1cc:	20001190 	.word	0x20001190
    a1d0:	0000d7f0 	.word	0x0000d7f0
    a1d4:	0000d850 	.word	0x0000d850
    a1d8:	0000d02c 	.word	0x0000d02c
    a1dc:	0000d868 	.word	0x0000d868
    a1e0:	20001174 	.word	0x20001174
    a1e4:	20000490 	.word	0x20000490
    a1e8:	20001154 	.word	0x20001154
    a1ec:	0000f0c8 	.word	0x0000f0c8
    a1f0:	0000f104 	.word	0x0000f104
    a1f4:	0000d820 	.word	0x0000d820
    a1f8:	0000d838 	.word	0x0000d838

0000a1fc <z_impl_k_thread_suspend>:
{
    a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a200:	3018      	adds	r0, #24
    a202:	f000 fdcf 	bl	ada4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a206:	2500      	movs	r5, #0
	__asm__ volatile(
    a208:	f04f 0320 	mov.w	r3, #32
    a20c:	f3ef 8611 	mrs	r6, BASEPRI
    a210:	f383 8812 	msr	BASEPRI_MAX, r3
    a214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a218:	482d      	ldr	r0, [pc, #180]	; (a2d0 <z_impl_k_thread_suspend+0xd4>)
    a21a:	f7fe fc75 	bl	8b08 <z_spin_lock_valid>
    a21e:	b118      	cbz	r0, a228 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    a220:	482b      	ldr	r0, [pc, #172]	; (a2d0 <z_impl_k_thread_suspend+0xd4>)
    a222:	f7fe fc91 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    a226:	e01c      	b.n	a262 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a228:	4f2a      	ldr	r7, [pc, #168]	; (a2d4 <z_impl_k_thread_suspend+0xd8>)
    a22a:	238e      	movs	r3, #142	; 0x8e
    a22c:	463a      	mov	r2, r7
    a22e:	492a      	ldr	r1, [pc, #168]	; (a2d8 <z_impl_k_thread_suspend+0xdc>)
    a230:	482a      	ldr	r0, [pc, #168]	; (a2dc <z_impl_k_thread_suspend+0xe0>)
    a232:	f001 fd1d 	bl	bc70 <assert_print>
    a236:	4926      	ldr	r1, [pc, #152]	; (a2d0 <z_impl_k_thread_suspend+0xd4>)
    a238:	4829      	ldr	r0, [pc, #164]	; (a2e0 <z_impl_k_thread_suspend+0xe4>)
    a23a:	f001 fd19 	bl	bc70 <assert_print>
    a23e:	218e      	movs	r1, #142	; 0x8e
    a240:	4638      	mov	r0, r7
    a242:	f001 fd0e 	bl	bc62 <assert_post_action>
    a246:	e7eb      	b.n	a220 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a248:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a24c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a24e:	4621      	mov	r1, r4
    a250:	4824      	ldr	r0, [pc, #144]	; (a2e4 <z_impl_k_thread_suspend+0xe8>)
    a252:	f7ff fb45 	bl	98e0 <z_priq_dumb_remove>
}
    a256:	e00a      	b.n	a26e <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    a258:	f386 8811 	msr	BASEPRI, r6
    a25c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a260:	2501      	movs	r5, #1
    a262:	bb2d      	cbnz	r5, a2b0 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    a264:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a266:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a26a:	2b00      	cmp	r3, #0
    a26c:	dbec      	blt.n	a248 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a26e:	7b63      	ldrb	r3, [r4, #13]
    a270:	f043 0310 	orr.w	r3, r3, #16
    a274:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a276:	4b1c      	ldr	r3, [pc, #112]	; (a2e8 <z_impl_k_thread_suspend+0xec>)
    a278:	6898      	ldr	r0, [r3, #8]
    a27a:	42a0      	cmp	r0, r4
    a27c:	bf14      	ite	ne
    a27e:	2000      	movne	r0, #0
    a280:	2001      	moveq	r0, #1
    a282:	f7ff fb51 	bl	9928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a286:	4812      	ldr	r0, [pc, #72]	; (a2d0 <z_impl_k_thread_suspend+0xd4>)
    a288:	f7fe fc4e 	bl	8b28 <z_spin_unlock_valid>
    a28c:	2800      	cmp	r0, #0
    a28e:	d1e3      	bne.n	a258 <z_impl_k_thread_suspend+0x5c>
    a290:	4d10      	ldr	r5, [pc, #64]	; (a2d4 <z_impl_k_thread_suspend+0xd8>)
    a292:	23b9      	movs	r3, #185	; 0xb9
    a294:	462a      	mov	r2, r5
    a296:	4915      	ldr	r1, [pc, #84]	; (a2ec <z_impl_k_thread_suspend+0xf0>)
    a298:	4810      	ldr	r0, [pc, #64]	; (a2dc <z_impl_k_thread_suspend+0xe0>)
    a29a:	f001 fce9 	bl	bc70 <assert_print>
    a29e:	490c      	ldr	r1, [pc, #48]	; (a2d0 <z_impl_k_thread_suspend+0xd4>)
    a2a0:	4813      	ldr	r0, [pc, #76]	; (a2f0 <z_impl_k_thread_suspend+0xf4>)
    a2a2:	f001 fce5 	bl	bc70 <assert_print>
    a2a6:	21b9      	movs	r1, #185	; 0xb9
    a2a8:	4628      	mov	r0, r5
    a2aa:	f001 fcda 	bl	bc62 <assert_post_action>
    a2ae:	e7d3      	b.n	a258 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    a2b0:	4b0d      	ldr	r3, [pc, #52]	; (a2e8 <z_impl_k_thread_suspend+0xec>)
    a2b2:	689b      	ldr	r3, [r3, #8]
    a2b4:	42a3      	cmp	r3, r4
    a2b6:	d000      	beq.n	a2ba <z_impl_k_thread_suspend+0xbe>
}
    a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    a2ba:	f04f 0320 	mov.w	r3, #32
    a2be:	f3ef 8011 	mrs	r0, BASEPRI
    a2c2:	f383 8812 	msr	BASEPRI_MAX, r3
    a2c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a2ca:	f002 fc12 	bl	caf2 <z_reschedule_irqlock>
    a2ce:	e7f3      	b.n	a2b8 <z_impl_k_thread_suspend+0xbc>
    a2d0:	20001190 	.word	0x20001190
    a2d4:	0000d7f0 	.word	0x0000d7f0
    a2d8:	0000d850 	.word	0x0000d850
    a2dc:	0000d02c 	.word	0x0000d02c
    a2e0:	0000d868 	.word	0x0000d868
    a2e4:	20001174 	.word	0x20001174
    a2e8:	20001154 	.word	0x20001154
    a2ec:	0000d820 	.word	0x0000d820
    a2f0:	0000d838 	.word	0x0000d838

0000a2f4 <k_sched_unlock>:
{
    a2f4:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    a2f6:	2400      	movs	r4, #0
    a2f8:	f04f 0320 	mov.w	r3, #32
    a2fc:	f3ef 8511 	mrs	r5, BASEPRI
    a300:	f383 8812 	msr	BASEPRI_MAX, r3
    a304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a308:	4838      	ldr	r0, [pc, #224]	; (a3ec <k_sched_unlock+0xf8>)
    a30a:	f7fe fbfd 	bl	8b08 <z_spin_lock_valid>
    a30e:	b118      	cbz	r0, a318 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    a310:	4836      	ldr	r0, [pc, #216]	; (a3ec <k_sched_unlock+0xf8>)
    a312:	f7fe fc19 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    a316:	e036      	b.n	a386 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a318:	4e35      	ldr	r6, [pc, #212]	; (a3f0 <k_sched_unlock+0xfc>)
    a31a:	238e      	movs	r3, #142	; 0x8e
    a31c:	4632      	mov	r2, r6
    a31e:	4935      	ldr	r1, [pc, #212]	; (a3f4 <k_sched_unlock+0x100>)
    a320:	4835      	ldr	r0, [pc, #212]	; (a3f8 <k_sched_unlock+0x104>)
    a322:	f001 fca5 	bl	bc70 <assert_print>
    a326:	4931      	ldr	r1, [pc, #196]	; (a3ec <k_sched_unlock+0xf8>)
    a328:	4834      	ldr	r0, [pc, #208]	; (a3fc <k_sched_unlock+0x108>)
    a32a:	f001 fca1 	bl	bc70 <assert_print>
    a32e:	218e      	movs	r1, #142	; 0x8e
    a330:	4630      	mov	r0, r6
    a332:	f001 fc96 	bl	bc62 <assert_post_action>
    a336:	e7eb      	b.n	a310 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a338:	4c31      	ldr	r4, [pc, #196]	; (a400 <k_sched_unlock+0x10c>)
    a33a:	f240 33bb 	movw	r3, #955	; 0x3bb
    a33e:	4622      	mov	r2, r4
    a340:	4930      	ldr	r1, [pc, #192]	; (a404 <k_sched_unlock+0x110>)
    a342:	482d      	ldr	r0, [pc, #180]	; (a3f8 <k_sched_unlock+0x104>)
    a344:	f001 fc94 	bl	bc70 <assert_print>
    a348:	482f      	ldr	r0, [pc, #188]	; (a408 <k_sched_unlock+0x114>)
    a34a:	f001 fc91 	bl	bc70 <assert_print>
    a34e:	f240 31bb 	movw	r1, #955	; 0x3bb
    a352:	4620      	mov	r0, r4
    a354:	f001 fc85 	bl	bc62 <assert_post_action>
    a358:	e01b      	b.n	a392 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    a35a:	4c29      	ldr	r4, [pc, #164]	; (a400 <k_sched_unlock+0x10c>)
    a35c:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    a360:	4622      	mov	r2, r4
    a362:	492a      	ldr	r1, [pc, #168]	; (a40c <k_sched_unlock+0x118>)
    a364:	4824      	ldr	r0, [pc, #144]	; (a3f8 <k_sched_unlock+0x104>)
    a366:	f001 fc83 	bl	bc70 <assert_print>
    a36a:	4827      	ldr	r0, [pc, #156]	; (a408 <k_sched_unlock+0x114>)
    a36c:	f001 fc80 	bl	bc70 <assert_print>
    a370:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    a374:	4620      	mov	r0, r4
    a376:	f001 fc74 	bl	bc62 <assert_post_action>
    a37a:	e00e      	b.n	a39a <k_sched_unlock+0xa6>
	__asm__ volatile(
    a37c:	f385 8811 	msr	BASEPRI, r5
    a380:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a384:	2401      	movs	r4, #1
    a386:	bb2c      	cbnz	r4, a3d4 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a388:	4b21      	ldr	r3, [pc, #132]	; (a410 <k_sched_unlock+0x11c>)
    a38a:	689b      	ldr	r3, [r3, #8]
    a38c:	7bdb      	ldrb	r3, [r3, #15]
    a38e:	2b00      	cmp	r3, #0
    a390:	d0d2      	beq.n	a338 <k_sched_unlock+0x44>
    a392:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    a396:	2b00      	cmp	r3, #0
    a398:	d1df      	bne.n	a35a <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    a39a:	4b1d      	ldr	r3, [pc, #116]	; (a410 <k_sched_unlock+0x11c>)
    a39c:	689a      	ldr	r2, [r3, #8]
    a39e:	7bd3      	ldrb	r3, [r2, #15]
    a3a0:	3301      	adds	r3, #1
    a3a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a3a4:	2000      	movs	r0, #0
    a3a6:	f7ff fabf 	bl	9928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a3aa:	4810      	ldr	r0, [pc, #64]	; (a3ec <k_sched_unlock+0xf8>)
    a3ac:	f7fe fbbc 	bl	8b28 <z_spin_unlock_valid>
    a3b0:	2800      	cmp	r0, #0
    a3b2:	d1e3      	bne.n	a37c <k_sched_unlock+0x88>
    a3b4:	4c0e      	ldr	r4, [pc, #56]	; (a3f0 <k_sched_unlock+0xfc>)
    a3b6:	23b9      	movs	r3, #185	; 0xb9
    a3b8:	4622      	mov	r2, r4
    a3ba:	4916      	ldr	r1, [pc, #88]	; (a414 <k_sched_unlock+0x120>)
    a3bc:	480e      	ldr	r0, [pc, #56]	; (a3f8 <k_sched_unlock+0x104>)
    a3be:	f001 fc57 	bl	bc70 <assert_print>
    a3c2:	490a      	ldr	r1, [pc, #40]	; (a3ec <k_sched_unlock+0xf8>)
    a3c4:	4814      	ldr	r0, [pc, #80]	; (a418 <k_sched_unlock+0x124>)
    a3c6:	f001 fc53 	bl	bc70 <assert_print>
    a3ca:	21b9      	movs	r1, #185	; 0xb9
    a3cc:	4620      	mov	r0, r4
    a3ce:	f001 fc48 	bl	bc62 <assert_post_action>
    a3d2:	e7d3      	b.n	a37c <k_sched_unlock+0x88>
	__asm__ volatile(
    a3d4:	f04f 0320 	mov.w	r3, #32
    a3d8:	f3ef 8011 	mrs	r0, BASEPRI
    a3dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a3e0:	f3bf 8f6f 	isb	sy
    a3e4:	f002 fb85 	bl	caf2 <z_reschedule_irqlock>
}
    a3e8:	bd70      	pop	{r4, r5, r6, pc}
    a3ea:	bf00      	nop
    a3ec:	20001190 	.word	0x20001190
    a3f0:	0000d7f0 	.word	0x0000d7f0
    a3f4:	0000d850 	.word	0x0000d850
    a3f8:	0000d02c 	.word	0x0000d02c
    a3fc:	0000d868 	.word	0x0000d868
    a400:	0000f0c8 	.word	0x0000f0c8
    a404:	0000f150 	.word	0x0000f150
    a408:	0000f020 	.word	0x0000f020
    a40c:	0000eed8 	.word	0x0000eed8
    a410:	20001154 	.word	0x20001154
    a414:	0000d820 	.word	0x0000d820
    a418:	0000d838 	.word	0x0000d838

0000a41c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    a41e:	7b43      	ldrb	r3, [r0, #13]
    a420:	f013 0f08 	tst.w	r3, #8
    a424:	d145      	bne.n	a4b2 <end_thread+0x96>
    a426:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    a428:	f043 0308 	orr.w	r3, r3, #8
    a42c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a42e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a432:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    a434:	f013 0f80 	tst.w	r3, #128	; 0x80
    a438:	d12d      	bne.n	a496 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    a43a:	68ab      	ldr	r3, [r5, #8]
    a43c:	b15b      	cbz	r3, a456 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a43e:	4628      	mov	r0, r5
    a440:	f7ff f870 	bl	9524 <pended_on_thread>
    a444:	4629      	mov	r1, r5
    a446:	f7ff fa4b 	bl	98e0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a44a:	7b6b      	ldrb	r3, [r5, #13]
    a44c:	f023 0302 	bic.w	r3, r3, #2
    a450:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    a452:	2300      	movs	r3, #0
    a454:	60ab      	str	r3, [r5, #8]
    a456:	f105 0018 	add.w	r0, r5, #24
    a45a:	f000 fca3 	bl	ada4 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    a45e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    a462:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a464:	42bc      	cmp	r4, r7
    a466:	d01e      	beq.n	a4a6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a468:	b1ec      	cbz	r4, a4a6 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a46a:	4620      	mov	r0, r4
    a46c:	f7ff f85a 	bl	9524 <pended_on_thread>
    a470:	4621      	mov	r1, r4
    a472:	f7ff fa35 	bl	98e0 <z_priq_dumb_remove>
    a476:	7b63      	ldrb	r3, [r4, #13]
    a478:	f023 0302 	bic.w	r3, r3, #2
    a47c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a47e:	2600      	movs	r6, #0
    a480:	60a6      	str	r6, [r4, #8]
    a482:	f104 0018 	add.w	r0, r4, #24
    a486:	f000 fc8d 	bl	ada4 <z_abort_timeout>
    a48a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    a48e:	4620      	mov	r0, r4
    a490:	f7ff fba4 	bl	9bdc <ready_thread>
    a494:	e7e5      	b.n	a462 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a49a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a49c:	4601      	mov	r1, r0
    a49e:	4805      	ldr	r0, [pc, #20]	; (a4b4 <end_thread+0x98>)
    a4a0:	f7ff fa1e 	bl	98e0 <z_priq_dumb_remove>
}
    a4a4:	e7c9      	b.n	a43a <end_thread+0x1e>
		update_cache(1);
    a4a6:	2001      	movs	r0, #1
    a4a8:	f7ff fa3e 	bl	9928 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    a4ac:	4628      	mov	r0, r5
    a4ae:	f7fe fb53 	bl	8b58 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4b4:	20001174 	.word	0x20001174

0000a4b8 <z_unpend1_no_timeout>:
{
    a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ba:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a4bc:	2500      	movs	r5, #0
    a4be:	f04f 0320 	mov.w	r3, #32
    a4c2:	f3ef 8711 	mrs	r7, BASEPRI
    a4c6:	f383 8812 	msr	BASEPRI_MAX, r3
    a4ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4ce:	4823      	ldr	r0, [pc, #140]	; (a55c <z_unpend1_no_timeout+0xa4>)
    a4d0:	f7fe fb1a 	bl	8b08 <z_spin_lock_valid>
    a4d4:	b120      	cbz	r0, a4e0 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    a4d6:	4821      	ldr	r0, [pc, #132]	; (a55c <z_unpend1_no_timeout+0xa4>)
    a4d8:	f7fe fb36 	bl	8b48 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    a4dc:	2400      	movs	r4, #0
	return k;
    a4de:	e018      	b.n	a512 <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4e0:	4c1f      	ldr	r4, [pc, #124]	; (a560 <z_unpend1_no_timeout+0xa8>)
    a4e2:	238e      	movs	r3, #142	; 0x8e
    a4e4:	4622      	mov	r2, r4
    a4e6:	491f      	ldr	r1, [pc, #124]	; (a564 <z_unpend1_no_timeout+0xac>)
    a4e8:	481f      	ldr	r0, [pc, #124]	; (a568 <z_unpend1_no_timeout+0xb0>)
    a4ea:	f001 fbc1 	bl	bc70 <assert_print>
    a4ee:	491b      	ldr	r1, [pc, #108]	; (a55c <z_unpend1_no_timeout+0xa4>)
    a4f0:	481e      	ldr	r0, [pc, #120]	; (a56c <z_unpend1_no_timeout+0xb4>)
    a4f2:	f001 fbbd 	bl	bc70 <assert_print>
    a4f6:	218e      	movs	r1, #142	; 0x8e
    a4f8:	4620      	mov	r0, r4
    a4fa:	f001 fbb2 	bl	bc62 <assert_post_action>
    a4fe:	e7ea      	b.n	a4d6 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a500:	4816      	ldr	r0, [pc, #88]	; (a55c <z_unpend1_no_timeout+0xa4>)
    a502:	f7fe fb11 	bl	8b28 <z_spin_unlock_valid>
    a506:	b1b8      	cbz	r0, a538 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    a508:	f387 8811 	msr	BASEPRI, r7
    a50c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a510:	2501      	movs	r5, #1
    a512:	bb0d      	cbnz	r5, a558 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    a514:	4630      	mov	r0, r6
    a516:	f002 fb01 	bl	cb1c <z_priq_dumb_best>
		if (thread != NULL) {
    a51a:	4604      	mov	r4, r0
    a51c:	2800      	cmp	r0, #0
    a51e:	d0ef      	beq.n	a500 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a520:	f7ff f800 	bl	9524 <pended_on_thread>
    a524:	4621      	mov	r1, r4
    a526:	f7ff f9db 	bl	98e0 <z_priq_dumb_remove>
    a52a:	7b63      	ldrb	r3, [r4, #13]
    a52c:	f023 0302 	bic.w	r3, r3, #2
    a530:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a532:	2300      	movs	r3, #0
    a534:	60a3      	str	r3, [r4, #8]
}
    a536:	e7e3      	b.n	a500 <z_unpend1_no_timeout+0x48>
    a538:	4d09      	ldr	r5, [pc, #36]	; (a560 <z_unpend1_no_timeout+0xa8>)
    a53a:	23b9      	movs	r3, #185	; 0xb9
    a53c:	462a      	mov	r2, r5
    a53e:	490c      	ldr	r1, [pc, #48]	; (a570 <z_unpend1_no_timeout+0xb8>)
    a540:	4809      	ldr	r0, [pc, #36]	; (a568 <z_unpend1_no_timeout+0xb0>)
    a542:	f001 fb95 	bl	bc70 <assert_print>
    a546:	4905      	ldr	r1, [pc, #20]	; (a55c <z_unpend1_no_timeout+0xa4>)
    a548:	480a      	ldr	r0, [pc, #40]	; (a574 <z_unpend1_no_timeout+0xbc>)
    a54a:	f001 fb91 	bl	bc70 <assert_print>
    a54e:	21b9      	movs	r1, #185	; 0xb9
    a550:	4628      	mov	r0, r5
    a552:	f001 fb86 	bl	bc62 <assert_post_action>
    a556:	e7d7      	b.n	a508 <z_unpend1_no_timeout+0x50>
}
    a558:	4620      	mov	r0, r4
    a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a55c:	20001190 	.word	0x20001190
    a560:	0000d7f0 	.word	0x0000d7f0
    a564:	0000d850 	.word	0x0000d850
    a568:	0000d02c 	.word	0x0000d02c
    a56c:	0000d868 	.word	0x0000d868
    a570:	0000d820 	.word	0x0000d820
    a574:	0000d838 	.word	0x0000d838

0000a578 <z_unpend_first_thread>:
{
    a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a57a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a57c:	2500      	movs	r5, #0
	__asm__ volatile(
    a57e:	f04f 0320 	mov.w	r3, #32
    a582:	f3ef 8711 	mrs	r7, BASEPRI
    a586:	f383 8812 	msr	BASEPRI_MAX, r3
    a58a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a58e:	4825      	ldr	r0, [pc, #148]	; (a624 <z_unpend_first_thread+0xac>)
    a590:	f7fe faba 	bl	8b08 <z_spin_lock_valid>
    a594:	b120      	cbz	r0, a5a0 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    a596:	4823      	ldr	r0, [pc, #140]	; (a624 <z_unpend_first_thread+0xac>)
    a598:	f7fe fad6 	bl	8b48 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    a59c:	2400      	movs	r4, #0
	return k;
    a59e:	e018      	b.n	a5d2 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5a0:	4c21      	ldr	r4, [pc, #132]	; (a628 <z_unpend_first_thread+0xb0>)
    a5a2:	238e      	movs	r3, #142	; 0x8e
    a5a4:	4622      	mov	r2, r4
    a5a6:	4921      	ldr	r1, [pc, #132]	; (a62c <z_unpend_first_thread+0xb4>)
    a5a8:	4821      	ldr	r0, [pc, #132]	; (a630 <z_unpend_first_thread+0xb8>)
    a5aa:	f001 fb61 	bl	bc70 <assert_print>
    a5ae:	491d      	ldr	r1, [pc, #116]	; (a624 <z_unpend_first_thread+0xac>)
    a5b0:	4820      	ldr	r0, [pc, #128]	; (a634 <z_unpend_first_thread+0xbc>)
    a5b2:	f001 fb5d 	bl	bc70 <assert_print>
    a5b6:	218e      	movs	r1, #142	; 0x8e
    a5b8:	4620      	mov	r0, r4
    a5ba:	f001 fb52 	bl	bc62 <assert_post_action>
    a5be:	e7ea      	b.n	a596 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5c0:	4818      	ldr	r0, [pc, #96]	; (a624 <z_unpend_first_thread+0xac>)
    a5c2:	f7fe fab1 	bl	8b28 <z_spin_unlock_valid>
    a5c6:	b1d8      	cbz	r0, a600 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    a5c8:	f387 8811 	msr	BASEPRI, r7
    a5cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a5d0:	2501      	movs	r5, #1
    a5d2:	bb2d      	cbnz	r5, a620 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    a5d4:	4630      	mov	r0, r6
    a5d6:	f002 faa1 	bl	cb1c <z_priq_dumb_best>
		if (thread != NULL) {
    a5da:	4604      	mov	r4, r0
    a5dc:	2800      	cmp	r0, #0
    a5de:	d0ef      	beq.n	a5c0 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a5e0:	f7fe ffa0 	bl	9524 <pended_on_thread>
    a5e4:	4621      	mov	r1, r4
    a5e6:	f7ff f97b 	bl	98e0 <z_priq_dumb_remove>
    a5ea:	7b63      	ldrb	r3, [r4, #13]
    a5ec:	f023 0302 	bic.w	r3, r3, #2
    a5f0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a5f2:	2300      	movs	r3, #0
    a5f4:	60a3      	str	r3, [r4, #8]
    a5f6:	f104 0018 	add.w	r0, r4, #24
    a5fa:	f000 fbd3 	bl	ada4 <z_abort_timeout>
    a5fe:	e7df      	b.n	a5c0 <z_unpend_first_thread+0x48>
    a600:	4d09      	ldr	r5, [pc, #36]	; (a628 <z_unpend_first_thread+0xb0>)
    a602:	23b9      	movs	r3, #185	; 0xb9
    a604:	462a      	mov	r2, r5
    a606:	490c      	ldr	r1, [pc, #48]	; (a638 <z_unpend_first_thread+0xc0>)
    a608:	4809      	ldr	r0, [pc, #36]	; (a630 <z_unpend_first_thread+0xb8>)
    a60a:	f001 fb31 	bl	bc70 <assert_print>
    a60e:	4905      	ldr	r1, [pc, #20]	; (a624 <z_unpend_first_thread+0xac>)
    a610:	480a      	ldr	r0, [pc, #40]	; (a63c <z_unpend_first_thread+0xc4>)
    a612:	f001 fb2d 	bl	bc70 <assert_print>
    a616:	21b9      	movs	r1, #185	; 0xb9
    a618:	4628      	mov	r0, r5
    a61a:	f001 fb22 	bl	bc62 <assert_post_action>
    a61e:	e7d3      	b.n	a5c8 <z_unpend_first_thread+0x50>
}
    a620:	4620      	mov	r0, r4
    a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a624:	20001190 	.word	0x20001190
    a628:	0000d7f0 	.word	0x0000d7f0
    a62c:	0000d850 	.word	0x0000d850
    a630:	0000d02c 	.word	0x0000d02c
    a634:	0000d868 	.word	0x0000d868
    a638:	0000d820 	.word	0x0000d820
    a63c:	0000d838 	.word	0x0000d838

0000a640 <z_sched_init>:
{
    a640:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    a642:	4804      	ldr	r0, [pc, #16]	; (a654 <z_sched_init+0x14>)
    a644:	f002 fa71 	bl	cb2a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    a648:	2100      	movs	r1, #0
    a64a:	4608      	mov	r0, r1
    a64c:	f7fe ffa8 	bl	95a0 <k_sched_time_slice_set>
}
    a650:	bd08      	pop	{r3, pc}
    a652:	bf00      	nop
    a654:	20001170 	.word	0x20001170

0000a658 <z_impl_k_yield>:
{
    a658:	b570      	push	{r4, r5, r6, lr}
    a65a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    a65e:	2b00      	cmp	r3, #0
    a660:	d149      	bne.n	a6f6 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    a662:	f04f 0320 	mov.w	r3, #32
    a666:	f3ef 8611 	mrs	r6, BASEPRI
    a66a:	f383 8812 	msr	BASEPRI_MAX, r3
    a66e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a672:	4843      	ldr	r0, [pc, #268]	; (a780 <z_impl_k_yield+0x128>)
    a674:	f7fe fa48 	bl	8b08 <z_spin_lock_valid>
    a678:	2800      	cmp	r0, #0
    a67a:	d04d      	beq.n	a718 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    a67c:	4840      	ldr	r0, [pc, #256]	; (a780 <z_impl_k_yield+0x128>)
    a67e:	f7fe fa63 	bl	8b48 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    a682:	4c40      	ldr	r4, [pc, #256]	; (a784 <z_impl_k_yield+0x12c>)
    a684:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a686:	7b4b      	ldrb	r3, [r1, #13]
    a688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a68c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a68e:	f104 0020 	add.w	r0, r4, #32
    a692:	f7ff f925 	bl	98e0 <z_priq_dumb_remove>
	queue_thread(_current);
    a696:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    a698:	7b6b      	ldrb	r3, [r5, #13]
    a69a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a69e:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a6a0:	4b39      	ldr	r3, [pc, #228]	; (a788 <z_impl_k_yield+0x130>)
    a6a2:	429d      	cmp	r5, r3
    a6a4:	d048      	beq.n	a738 <z_impl_k_yield+0xe0>
	return list->head == list;
    a6a6:	4b37      	ldr	r3, [pc, #220]	; (a784 <z_impl_k_yield+0x12c>)
    a6a8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6ac:	429c      	cmp	r4, r3
    a6ae:	d055      	beq.n	a75c <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a6b0:	b16c      	cbz	r4, a6ce <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a6b2:	4621      	mov	r1, r4
    a6b4:	4628      	mov	r0, r5
    a6b6:	f002 fa12 	bl	cade <z_sched_prio_cmp>
    a6ba:	2800      	cmp	r0, #0
    a6bc:	dc48      	bgt.n	a750 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a6be:	b134      	cbz	r4, a6ce <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    a6c0:	4b30      	ldr	r3, [pc, #192]	; (a784 <z_impl_k_yield+0x12c>)
    a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a6c4:	429c      	cmp	r4, r3
    a6c6:	d002      	beq.n	a6ce <z_impl_k_yield+0x76>
    a6c8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a6ca:	2c00      	cmp	r4, #0
    a6cc:	d1f0      	bne.n	a6b0 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    a6ce:	4b2d      	ldr	r3, [pc, #180]	; (a784 <z_impl_k_yield+0x12c>)
    a6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a6d2:	f103 0120 	add.w	r1, r3, #32
    a6d6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    a6d8:	606a      	str	r2, [r5, #4]
	tail->next = node;
    a6da:	6015      	str	r5, [r2, #0]
	list->tail = node;
    a6dc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    a6de:	2001      	movs	r0, #1
    a6e0:	f7ff f922 	bl	9928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a6e4:	4826      	ldr	r0, [pc, #152]	; (a780 <z_impl_k_yield+0x128>)
    a6e6:	f7fe fa1f 	bl	8b28 <z_spin_unlock_valid>
    a6ea:	2800      	cmp	r0, #0
    a6ec:	d038      	beq.n	a760 <z_impl_k_yield+0x108>
    a6ee:	4630      	mov	r0, r6
    a6f0:	f7f9 fcd8 	bl	40a4 <arch_swap>
}
    a6f4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    a6f6:	4c25      	ldr	r4, [pc, #148]	; (a78c <z_impl_k_yield+0x134>)
    a6f8:	f240 5332 	movw	r3, #1330	; 0x532
    a6fc:	4622      	mov	r2, r4
    a6fe:	4924      	ldr	r1, [pc, #144]	; (a790 <z_impl_k_yield+0x138>)
    a700:	4824      	ldr	r0, [pc, #144]	; (a794 <z_impl_k_yield+0x13c>)
    a702:	f001 fab5 	bl	bc70 <assert_print>
    a706:	4824      	ldr	r0, [pc, #144]	; (a798 <z_impl_k_yield+0x140>)
    a708:	f001 fab2 	bl	bc70 <assert_print>
    a70c:	f240 5132 	movw	r1, #1330	; 0x532
    a710:	4620      	mov	r0, r4
    a712:	f001 faa6 	bl	bc62 <assert_post_action>
    a716:	e7a4      	b.n	a662 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a718:	4c20      	ldr	r4, [pc, #128]	; (a79c <z_impl_k_yield+0x144>)
    a71a:	238e      	movs	r3, #142	; 0x8e
    a71c:	4622      	mov	r2, r4
    a71e:	4920      	ldr	r1, [pc, #128]	; (a7a0 <z_impl_k_yield+0x148>)
    a720:	481c      	ldr	r0, [pc, #112]	; (a794 <z_impl_k_yield+0x13c>)
    a722:	f001 faa5 	bl	bc70 <assert_print>
    a726:	4916      	ldr	r1, [pc, #88]	; (a780 <z_impl_k_yield+0x128>)
    a728:	481e      	ldr	r0, [pc, #120]	; (a7a4 <z_impl_k_yield+0x14c>)
    a72a:	f001 faa1 	bl	bc70 <assert_print>
    a72e:	218e      	movs	r1, #142	; 0x8e
    a730:	4620      	mov	r0, r4
    a732:	f001 fa96 	bl	bc62 <assert_post_action>
    a736:	e7a1      	b.n	a67c <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a738:	4c14      	ldr	r4, [pc, #80]	; (a78c <z_impl_k_yield+0x134>)
    a73a:	23ba      	movs	r3, #186	; 0xba
    a73c:	4622      	mov	r2, r4
    a73e:	491a      	ldr	r1, [pc, #104]	; (a7a8 <z_impl_k_yield+0x150>)
    a740:	4814      	ldr	r0, [pc, #80]	; (a794 <z_impl_k_yield+0x13c>)
    a742:	f001 fa95 	bl	bc70 <assert_print>
    a746:	21ba      	movs	r1, #186	; 0xba
    a748:	4620      	mov	r0, r4
    a74a:	f001 fa8a 	bl	bc62 <assert_post_action>
    a74e:	e7aa      	b.n	a6a6 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    a750:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a752:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a754:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a756:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a758:	6065      	str	r5, [r4, #4]
}
    a75a:	e7c0      	b.n	a6de <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a75c:	2400      	movs	r4, #0
    a75e:	e7a7      	b.n	a6b0 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a760:	4c0e      	ldr	r4, [pc, #56]	; (a79c <z_impl_k_yield+0x144>)
    a762:	23d0      	movs	r3, #208	; 0xd0
    a764:	4622      	mov	r2, r4
    a766:	4911      	ldr	r1, [pc, #68]	; (a7ac <z_impl_k_yield+0x154>)
    a768:	480a      	ldr	r0, [pc, #40]	; (a794 <z_impl_k_yield+0x13c>)
    a76a:	f001 fa81 	bl	bc70 <assert_print>
    a76e:	4904      	ldr	r1, [pc, #16]	; (a780 <z_impl_k_yield+0x128>)
    a770:	480f      	ldr	r0, [pc, #60]	; (a7b0 <z_impl_k_yield+0x158>)
    a772:	f001 fa7d 	bl	bc70 <assert_print>
    a776:	21d0      	movs	r1, #208	; 0xd0
    a778:	4620      	mov	r0, r4
    a77a:	f001 fa72 	bl	bc62 <assert_post_action>
    a77e:	e7b6      	b.n	a6ee <z_impl_k_yield+0x96>
    a780:	20001190 	.word	0x20001190
    a784:	20001154 	.word	0x20001154
    a788:	20000490 	.word	0x20000490
    a78c:	0000f0c8 	.word	0x0000f0c8
    a790:	0000eed8 	.word	0x0000eed8
    a794:	0000d02c 	.word	0x0000d02c
    a798:	0000f020 	.word	0x0000f020
    a79c:	0000d7f0 	.word	0x0000d7f0
    a7a0:	0000d850 	.word	0x0000d850
    a7a4:	0000d868 	.word	0x0000d868
    a7a8:	0000f104 	.word	0x0000f104
    a7ac:	0000d820 	.word	0x0000d820
    a7b0:	0000d838 	.word	0x0000d838

0000a7b4 <z_tick_sleep>:
{
    a7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a7b8:	4604      	mov	r4, r0
    a7ba:	460e      	mov	r6, r1
    a7bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d14e      	bne.n	a862 <z_tick_sleep+0xae>
	if (ticks == 0) {
    a7c4:	ea54 0306 	orrs.w	r3, r4, r6
    a7c8:	d05c      	beq.n	a884 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    a7ca:	f06f 0301 	mvn.w	r3, #1
    a7ce:	1b1b      	subs	r3, r3, r4
    a7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a7d4:	eb62 0206 	sbc.w	r2, r2, r6
    a7d8:	2b01      	cmp	r3, #1
    a7da:	f172 0300 	sbcs.w	r3, r2, #0
    a7de:	db55      	blt.n	a88c <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    a7e0:	f06f 0501 	mvn.w	r5, #1
    a7e4:	1b2d      	subs	r5, r5, r4
    a7e6:	f04f 0320 	mov.w	r3, #32
    a7ea:	f3ef 8911 	mrs	r9, BASEPRI
    a7ee:	f383 8812 	msr	BASEPRI_MAX, r3
    a7f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7f6:	4840      	ldr	r0, [pc, #256]	; (a8f8 <z_tick_sleep+0x144>)
    a7f8:	f7fe f986 	bl	8b08 <z_spin_lock_valid>
    a7fc:	2800      	cmp	r0, #0
    a7fe:	d049      	beq.n	a894 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    a800:	f8df 80f4 	ldr.w	r8, [pc, #244]	; a8f8 <z_tick_sleep+0x144>
    a804:	4640      	mov	r0, r8
    a806:	f7fe f99f 	bl	8b48 <z_spin_lock_set_owner>
	pending_current = _current;
    a80a:	4f3c      	ldr	r7, [pc, #240]	; (a8fc <z_tick_sleep+0x148>)
    a80c:	68b8      	ldr	r0, [r7, #8]
    a80e:	4b3c      	ldr	r3, [pc, #240]	; (a900 <z_tick_sleep+0x14c>)
    a810:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    a812:	f7ff fb5b 	bl	9ecc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    a816:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a818:	4622      	mov	r2, r4
    a81a:	4633      	mov	r3, r6
    a81c:	4939      	ldr	r1, [pc, #228]	; (a904 <z_tick_sleep+0x150>)
    a81e:	3018      	adds	r0, #24
    a820:	f000 f9dc 	bl	abdc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a824:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a826:	7b53      	ldrb	r3, [r2, #13]
    a828:	f043 0310 	orr.w	r3, r3, #16
    a82c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a82e:	4640      	mov	r0, r8
    a830:	f7fe f97a 	bl	8b28 <z_spin_unlock_valid>
    a834:	2800      	cmp	r0, #0
    a836:	d03d      	beq.n	a8b4 <z_tick_sleep+0x100>
    a838:	4648      	mov	r0, r9
    a83a:	f7f9 fc33 	bl	40a4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    a83e:	4b2f      	ldr	r3, [pc, #188]	; (a8fc <z_tick_sleep+0x148>)
    a840:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    a842:	7b5b      	ldrb	r3, [r3, #13]
    a844:	f013 0f10 	tst.w	r3, #16
    a848:	d144      	bne.n	a8d4 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a84a:	f002 f989 	bl	cb60 <sys_clock_tick_get_32>
    a84e:	1a28      	subs	r0, r5, r0
    a850:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a854:	2801      	cmp	r0, #1
    a856:	f173 0300 	sbcs.w	r3, r3, #0
    a85a:	da00      	bge.n	a85e <z_tick_sleep+0xaa>
	return 0;
    a85c:	2000      	movs	r0, #0
}
    a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    a862:	4d29      	ldr	r5, [pc, #164]	; (a908 <z_tick_sleep+0x154>)
    a864:	f240 534e 	movw	r3, #1358	; 0x54e
    a868:	462a      	mov	r2, r5
    a86a:	4928      	ldr	r1, [pc, #160]	; (a90c <z_tick_sleep+0x158>)
    a86c:	4828      	ldr	r0, [pc, #160]	; (a910 <z_tick_sleep+0x15c>)
    a86e:	f001 f9ff 	bl	bc70 <assert_print>
    a872:	4828      	ldr	r0, [pc, #160]	; (a914 <z_tick_sleep+0x160>)
    a874:	f001 f9fc 	bl	bc70 <assert_print>
    a878:	f240 514e 	movw	r1, #1358	; 0x54e
    a87c:	4628      	mov	r0, r5
    a87e:	f001 f9f0 	bl	bc62 <assert_post_action>
    a882:	e79f      	b.n	a7c4 <z_tick_sleep+0x10>
	z_impl_k_yield();
    a884:	f7ff fee8 	bl	a658 <z_impl_k_yield>
		return 0;
    a888:	2000      	movs	r0, #0
    a88a:	e7e8      	b.n	a85e <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a88c:	f002 f968 	bl	cb60 <sys_clock_tick_get_32>
    a890:	1905      	adds	r5, r0, r4
    a892:	e7a8      	b.n	a7e6 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a894:	4f20      	ldr	r7, [pc, #128]	; (a918 <z_tick_sleep+0x164>)
    a896:	238e      	movs	r3, #142	; 0x8e
    a898:	463a      	mov	r2, r7
    a89a:	4920      	ldr	r1, [pc, #128]	; (a91c <z_tick_sleep+0x168>)
    a89c:	481c      	ldr	r0, [pc, #112]	; (a910 <z_tick_sleep+0x15c>)
    a89e:	f001 f9e7 	bl	bc70 <assert_print>
    a8a2:	4915      	ldr	r1, [pc, #84]	; (a8f8 <z_tick_sleep+0x144>)
    a8a4:	481e      	ldr	r0, [pc, #120]	; (a920 <z_tick_sleep+0x16c>)
    a8a6:	f001 f9e3 	bl	bc70 <assert_print>
    a8aa:	218e      	movs	r1, #142	; 0x8e
    a8ac:	4638      	mov	r0, r7
    a8ae:	f001 f9d8 	bl	bc62 <assert_post_action>
    a8b2:	e7a5      	b.n	a800 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8b4:	4c18      	ldr	r4, [pc, #96]	; (a918 <z_tick_sleep+0x164>)
    a8b6:	23d0      	movs	r3, #208	; 0xd0
    a8b8:	4622      	mov	r2, r4
    a8ba:	491a      	ldr	r1, [pc, #104]	; (a924 <z_tick_sleep+0x170>)
    a8bc:	4814      	ldr	r0, [pc, #80]	; (a910 <z_tick_sleep+0x15c>)
    a8be:	f001 f9d7 	bl	bc70 <assert_print>
    a8c2:	4641      	mov	r1, r8
    a8c4:	4818      	ldr	r0, [pc, #96]	; (a928 <z_tick_sleep+0x174>)
    a8c6:	f001 f9d3 	bl	bc70 <assert_print>
    a8ca:	21d0      	movs	r1, #208	; 0xd0
    a8cc:	4620      	mov	r0, r4
    a8ce:	f001 f9c8 	bl	bc62 <assert_post_action>
    a8d2:	e7b1      	b.n	a838 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    a8d4:	4c0c      	ldr	r4, [pc, #48]	; (a908 <z_tick_sleep+0x154>)
    a8d6:	f240 536f 	movw	r3, #1391	; 0x56f
    a8da:	4622      	mov	r2, r4
    a8dc:	4913      	ldr	r1, [pc, #76]	; (a92c <z_tick_sleep+0x178>)
    a8de:	480c      	ldr	r0, [pc, #48]	; (a910 <z_tick_sleep+0x15c>)
    a8e0:	f001 f9c6 	bl	bc70 <assert_print>
    a8e4:	480b      	ldr	r0, [pc, #44]	; (a914 <z_tick_sleep+0x160>)
    a8e6:	f001 f9c3 	bl	bc70 <assert_print>
    a8ea:	f240 516f 	movw	r1, #1391	; 0x56f
    a8ee:	4620      	mov	r0, r4
    a8f0:	f001 f9b7 	bl	bc62 <assert_post_action>
    a8f4:	e7a9      	b.n	a84a <z_tick_sleep+0x96>
    a8f6:	bf00      	nop
    a8f8:	20001190 	.word	0x20001190
    a8fc:	20001154 	.word	0x20001154
    a900:	2000118c 	.word	0x2000118c
    a904:	00009de5 	.word	0x00009de5
    a908:	0000f0c8 	.word	0x0000f0c8
    a90c:	0000eed8 	.word	0x0000eed8
    a910:	0000d02c 	.word	0x0000d02c
    a914:	0000f020 	.word	0x0000f020
    a918:	0000d7f0 	.word	0x0000d7f0
    a91c:	0000d850 	.word	0x0000d850
    a920:	0000d868 	.word	0x0000d868
    a924:	0000d820 	.word	0x0000d820
    a928:	0000d838 	.word	0x0000d838
    a92c:	0000f184 	.word	0x0000f184

0000a930 <z_impl_k_sleep>:
{
    a930:	b570      	push	{r4, r5, r6, lr}
    a932:	4605      	mov	r5, r0
    a934:	460c      	mov	r4, r1
    a936:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    a93a:	bb13      	cbnz	r3, a982 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a93c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a940:	bf08      	it	eq
    a942:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    a946:	d02d      	beq.n	a9a4 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    a948:	4628      	mov	r0, r5
    a94a:	4621      	mov	r1, r4
    a94c:	f7ff ff32 	bl	a7b4 <z_tick_sleep>
    a950:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    a952:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    a954:	0151      	lsls	r1, r2, #5
    a956:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    a95a:	0143      	lsls	r3, r0, #5
    a95c:	1a1b      	subs	r3, r3, r0
    a95e:	eb61 0102 	sbc.w	r1, r1, r2
    a962:	0088      	lsls	r0, r1, #2
    a964:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    a968:	009b      	lsls	r3, r3, #2
    a96a:	eb13 030c 	adds.w	r3, r3, ip
    a96e:	eb42 0000 	adc.w	r0, r2, r0
    a972:	00c0      	lsls	r0, r0, #3
    a974:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    a978:	f3c3 3310 	ubfx	r3, r3, #12, #17
    a97c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    a980:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    a982:	4e0c      	ldr	r6, [pc, #48]	; (a9b4 <z_impl_k_sleep+0x84>)
    a984:	f240 537e 	movw	r3, #1406	; 0x57e
    a988:	4632      	mov	r2, r6
    a98a:	490b      	ldr	r1, [pc, #44]	; (a9b8 <z_impl_k_sleep+0x88>)
    a98c:	480b      	ldr	r0, [pc, #44]	; (a9bc <z_impl_k_sleep+0x8c>)
    a98e:	f001 f96f 	bl	bc70 <assert_print>
    a992:	480b      	ldr	r0, [pc, #44]	; (a9c0 <z_impl_k_sleep+0x90>)
    a994:	f001 f96c 	bl	bc70 <assert_print>
    a998:	f240 517e 	movw	r1, #1406	; 0x57e
    a99c:	4630      	mov	r0, r6
    a99e:	f001 f960 	bl	bc62 <assert_post_action>
    a9a2:	e7cb      	b.n	a93c <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    a9a4:	4b07      	ldr	r3, [pc, #28]	; (a9c4 <z_impl_k_sleep+0x94>)
    a9a6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a9a8:	f7ff fc28 	bl	a1fc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    a9ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a9b0:	e7e6      	b.n	a980 <z_impl_k_sleep+0x50>
    a9b2:	bf00      	nop
    a9b4:	0000f0c8 	.word	0x0000f0c8
    a9b8:	0000eed8 	.word	0x0000eed8
    a9bc:	0000d02c 	.word	0x0000d02c
    a9c0:	0000f020 	.word	0x0000f020
    a9c4:	20001154 	.word	0x20001154

0000a9c8 <z_impl_z_current_get>:
}
    a9c8:	4b01      	ldr	r3, [pc, #4]	; (a9d0 <z_impl_z_current_get+0x8>)
    a9ca:	6898      	ldr	r0, [r3, #8]
    a9cc:	4770      	bx	lr
    a9ce:	bf00      	nop
    a9d0:	20001154 	.word	0x20001154

0000a9d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    a9d4:	b570      	push	{r4, r5, r6, lr}
    a9d6:	4604      	mov	r4, r0
    a9d8:	f04f 0320 	mov.w	r3, #32
    a9dc:	f3ef 8511 	mrs	r5, BASEPRI
    a9e0:	f383 8812 	msr	BASEPRI_MAX, r3
    a9e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9e8:	4840      	ldr	r0, [pc, #256]	; (aaec <z_thread_abort+0x118>)
    a9ea:	f7fe f88d 	bl	8b08 <z_spin_lock_valid>
    a9ee:	b1b8      	cbz	r0, aa20 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    a9f0:	483e      	ldr	r0, [pc, #248]	; (aaec <z_thread_abort+0x118>)
    a9f2:	f7fe f8a9 	bl	8b48 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a9f6:	7b63      	ldrb	r3, [r4, #13]
    a9f8:	f013 0f08 	tst.w	r3, #8
    a9fc:	d120      	bne.n	aa40 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    a9fe:	4620      	mov	r0, r4
    aa00:	f7ff fd0c 	bl	a41c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    aa04:	4b3a      	ldr	r3, [pc, #232]	; (aaf0 <z_thread_abort+0x11c>)
    aa06:	689b      	ldr	r3, [r3, #8]
    aa08:	42a3      	cmp	r3, r4
    aa0a:	d032      	beq.n	aa72 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa0c:	4837      	ldr	r0, [pc, #220]	; (aaec <z_thread_abort+0x118>)
    aa0e:	f7fe f88b 	bl	8b28 <z_spin_unlock_valid>
    aa12:	2800      	cmp	r0, #0
    aa14:	d059      	beq.n	aaca <z_thread_abort+0xf6>
	__asm__ volatile(
    aa16:	f385 8811 	msr	BASEPRI, r5
    aa1a:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    aa1e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa20:	4e34      	ldr	r6, [pc, #208]	; (aaf4 <z_thread_abort+0x120>)
    aa22:	238e      	movs	r3, #142	; 0x8e
    aa24:	4632      	mov	r2, r6
    aa26:	4934      	ldr	r1, [pc, #208]	; (aaf8 <z_thread_abort+0x124>)
    aa28:	4834      	ldr	r0, [pc, #208]	; (aafc <z_thread_abort+0x128>)
    aa2a:	f001 f921 	bl	bc70 <assert_print>
    aa2e:	492f      	ldr	r1, [pc, #188]	; (aaec <z_thread_abort+0x118>)
    aa30:	4833      	ldr	r0, [pc, #204]	; (ab00 <z_thread_abort+0x12c>)
    aa32:	f001 f91d 	bl	bc70 <assert_print>
    aa36:	218e      	movs	r1, #142	; 0x8e
    aa38:	4630      	mov	r0, r6
    aa3a:	f001 f912 	bl	bc62 <assert_post_action>
    aa3e:	e7d7      	b.n	a9f0 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa40:	482a      	ldr	r0, [pc, #168]	; (aaec <z_thread_abort+0x118>)
    aa42:	f7fe f871 	bl	8b28 <z_spin_unlock_valid>
    aa46:	b120      	cbz	r0, aa52 <z_thread_abort+0x7e>
    aa48:	f385 8811 	msr	BASEPRI, r5
    aa4c:	f3bf 8f6f 	isb	sy
		return;
    aa50:	e7e5      	b.n	aa1e <z_thread_abort+0x4a>
    aa52:	4c28      	ldr	r4, [pc, #160]	; (aaf4 <z_thread_abort+0x120>)
    aa54:	23b9      	movs	r3, #185	; 0xb9
    aa56:	4622      	mov	r2, r4
    aa58:	492a      	ldr	r1, [pc, #168]	; (ab04 <z_thread_abort+0x130>)
    aa5a:	4828      	ldr	r0, [pc, #160]	; (aafc <z_thread_abort+0x128>)
    aa5c:	f001 f908 	bl	bc70 <assert_print>
    aa60:	4922      	ldr	r1, [pc, #136]	; (aaec <z_thread_abort+0x118>)
    aa62:	4829      	ldr	r0, [pc, #164]	; (ab08 <z_thread_abort+0x134>)
    aa64:	f001 f904 	bl	bc70 <assert_print>
    aa68:	21b9      	movs	r1, #185	; 0xb9
    aa6a:	4620      	mov	r0, r4
    aa6c:	f001 f8f9 	bl	bc62 <assert_post_action>
    aa70:	e7ea      	b.n	aa48 <z_thread_abort+0x74>
    aa72:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    aa76:	2b00      	cmp	r3, #0
    aa78:	d1c8      	bne.n	aa0c <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa7a:	481c      	ldr	r0, [pc, #112]	; (aaec <z_thread_abort+0x118>)
    aa7c:	f7fe f854 	bl	8b28 <z_spin_unlock_valid>
    aa80:	b198      	cbz	r0, aaaa <z_thread_abort+0xd6>
    aa82:	4628      	mov	r0, r5
    aa84:	f7f9 fb0e 	bl	40a4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    aa88:	4c20      	ldr	r4, [pc, #128]	; (ab0c <z_thread_abort+0x138>)
    aa8a:	f240 63ac 	movw	r3, #1708	; 0x6ac
    aa8e:	4622      	mov	r2, r4
    aa90:	491f      	ldr	r1, [pc, #124]	; (ab10 <z_thread_abort+0x13c>)
    aa92:	481a      	ldr	r0, [pc, #104]	; (aafc <z_thread_abort+0x128>)
    aa94:	f001 f8ec 	bl	bc70 <assert_print>
    aa98:	481e      	ldr	r0, [pc, #120]	; (ab14 <z_thread_abort+0x140>)
    aa9a:	f001 f8e9 	bl	bc70 <assert_print>
    aa9e:	f240 61ac 	movw	r1, #1708	; 0x6ac
    aaa2:	4620      	mov	r0, r4
    aaa4:	f001 f8dd 	bl	bc62 <assert_post_action>
    aaa8:	e7b0      	b.n	aa0c <z_thread_abort+0x38>
    aaaa:	4c12      	ldr	r4, [pc, #72]	; (aaf4 <z_thread_abort+0x120>)
    aaac:	23d0      	movs	r3, #208	; 0xd0
    aaae:	4622      	mov	r2, r4
    aab0:	4914      	ldr	r1, [pc, #80]	; (ab04 <z_thread_abort+0x130>)
    aab2:	4812      	ldr	r0, [pc, #72]	; (aafc <z_thread_abort+0x128>)
    aab4:	f001 f8dc 	bl	bc70 <assert_print>
    aab8:	490c      	ldr	r1, [pc, #48]	; (aaec <z_thread_abort+0x118>)
    aaba:	4813      	ldr	r0, [pc, #76]	; (ab08 <z_thread_abort+0x134>)
    aabc:	f001 f8d8 	bl	bc70 <assert_print>
    aac0:	21d0      	movs	r1, #208	; 0xd0
    aac2:	4620      	mov	r0, r4
    aac4:	f001 f8cd 	bl	bc62 <assert_post_action>
    aac8:	e7db      	b.n	aa82 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aaca:	4c0a      	ldr	r4, [pc, #40]	; (aaf4 <z_thread_abort+0x120>)
    aacc:	23b9      	movs	r3, #185	; 0xb9
    aace:	4622      	mov	r2, r4
    aad0:	490c      	ldr	r1, [pc, #48]	; (ab04 <z_thread_abort+0x130>)
    aad2:	480a      	ldr	r0, [pc, #40]	; (aafc <z_thread_abort+0x128>)
    aad4:	f001 f8cc 	bl	bc70 <assert_print>
    aad8:	4904      	ldr	r1, [pc, #16]	; (aaec <z_thread_abort+0x118>)
    aada:	480b      	ldr	r0, [pc, #44]	; (ab08 <z_thread_abort+0x134>)
    aadc:	f001 f8c8 	bl	bc70 <assert_print>
    aae0:	21b9      	movs	r1, #185	; 0xb9
    aae2:	4620      	mov	r0, r4
    aae4:	f001 f8bd 	bl	bc62 <assert_post_action>
    aae8:	e795      	b.n	aa16 <z_thread_abort+0x42>
    aaea:	bf00      	nop
    aaec:	20001190 	.word	0x20001190
    aaf0:	20001154 	.word	0x20001154
    aaf4:	0000d7f0 	.word	0x0000d7f0
    aaf8:	0000d850 	.word	0x0000d850
    aafc:	0000d02c 	.word	0x0000d02c
    ab00:	0000d868 	.word	0x0000d868
    ab04:	0000d820 	.word	0x0000d820
    ab08:	0000d838 	.word	0x0000d838
    ab0c:	0000f0c8 	.word	0x0000f0c8
    ab10:	0000d1f0 	.word	0x0000d1f0
    ab14:	0000f1c4 	.word	0x0000f1c4

0000ab18 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    ab18:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    ab1a:	4806      	ldr	r0, [pc, #24]	; (ab34 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    ab1c:	4a06      	ldr	r2, [pc, #24]	; (ab38 <z_data_copy+0x20>)
    ab1e:	1a12      	subs	r2, r2, r0
    ab20:	4906      	ldr	r1, [pc, #24]	; (ab3c <z_data_copy+0x24>)
    ab22:	f001 ff55 	bl	c9d0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    ab26:	4a06      	ldr	r2, [pc, #24]	; (ab40 <z_data_copy+0x28>)
    ab28:	4906      	ldr	r1, [pc, #24]	; (ab44 <z_data_copy+0x2c>)
    ab2a:	4807      	ldr	r0, [pc, #28]	; (ab48 <z_data_copy+0x30>)
    ab2c:	f001 ff50 	bl	c9d0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ab30:	bd08      	pop	{r3, pc}
    ab32:	bf00      	nop
    ab34:	20000000 	.word	0x20000000
    ab38:	20000260 	.word	0x20000260
    ab3c:	0000f328 	.word	0x0000f328
    ab40:	00000000 	.word	0x00000000
    ab44:	0000f328 	.word	0x0000f328
    ab48:	20000000 	.word	0x20000000

0000ab4c <first>:
	return list->head == list;
    ab4c:	4b03      	ldr	r3, [pc, #12]	; (ab5c <first+0x10>)
    ab4e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab50:	4298      	cmp	r0, r3
    ab52:	d000      	beq.n	ab56 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    ab54:	4770      	bx	lr
    ab56:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    ab58:	e7fc      	b.n	ab54 <first+0x8>
    ab5a:	bf00      	nop
    ab5c:	20000174 	.word	0x20000174

0000ab60 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ab60:	b130      	cbz	r0, ab70 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    ab62:	4a04      	ldr	r2, [pc, #16]	; (ab74 <next+0x14>)
    ab64:	6852      	ldr	r2, [r2, #4]
    ab66:	4290      	cmp	r0, r2
    ab68:	d001      	beq.n	ab6e <next+0xe>
    ab6a:	6800      	ldr	r0, [r0, #0]
    ab6c:	4770      	bx	lr
    ab6e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    ab70:	4770      	bx	lr
    ab72:	bf00      	nop
    ab74:	20000174 	.word	0x20000174

0000ab78 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    ab78:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ab7a:	4b04      	ldr	r3, [pc, #16]	; (ab8c <elapsed+0x14>)
    ab7c:	681b      	ldr	r3, [r3, #0]
    ab7e:	b10b      	cbz	r3, ab84 <elapsed+0xc>
    ab80:	2000      	movs	r0, #0
}
    ab82:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ab84:	f7fb fc28 	bl	63d8 <sys_clock_elapsed>
    ab88:	e7fb      	b.n	ab82 <elapsed+0xa>
    ab8a:	bf00      	nop
    ab8c:	2000119c 	.word	0x2000119c

0000ab90 <next_timeout>:

static int32_t next_timeout(void)
{
    ab90:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    ab92:	f7ff ffdb 	bl	ab4c <first>
    ab96:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ab98:	f7ff ffee 	bl	ab78 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    ab9c:	b17c      	cbz	r4, abbe <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    ab9e:	6923      	ldr	r3, [r4, #16]
    aba0:	6962      	ldr	r2, [r4, #20]
    aba2:	1a1b      	subs	r3, r3, r0
    aba4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    aba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    abac:	f170 0200 	sbcs.w	r2, r0, #0
    abb0:	da08      	bge.n	abc4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    abb2:	2800      	cmp	r0, #0
    abb4:	db01      	blt.n	abba <next_timeout+0x2a>
    abb6:	4618      	mov	r0, r3
    abb8:	e006      	b.n	abc8 <next_timeout+0x38>
    abba:	2300      	movs	r3, #0
    abbc:	e7fb      	b.n	abb6 <next_timeout+0x26>
		ret = MAX_WAIT;
    abbe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    abc2:	e001      	b.n	abc8 <next_timeout+0x38>
    abc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    abc8:	4b03      	ldr	r3, [pc, #12]	; (abd8 <next_timeout+0x48>)
    abca:	691b      	ldr	r3, [r3, #16]
    abcc:	b113      	cbz	r3, abd4 <next_timeout+0x44>
    abce:	4283      	cmp	r3, r0
    abd0:	da00      	bge.n	abd4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    abd2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    abd4:	bd10      	pop	{r4, pc}
    abd6:	bf00      	nop
    abd8:	20001154 	.word	0x20001154

0000abdc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    abdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    abe0:	bf08      	it	eq
    abe2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    abe6:	f000 80c1 	beq.w	ad6c <z_add_timeout+0x190>
{
    abea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abee:	4604      	mov	r4, r0
    abf0:	460f      	mov	r7, r1
    abf2:	4692      	mov	sl, r2
    abf4:	461d      	mov	r5, r3
	return node->next != NULL;
    abf6:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    abf8:	b173      	cbz	r3, ac18 <z_add_timeout+0x3c>
    abfa:	f8df 8174 	ldr.w	r8, [pc, #372]	; ad70 <z_add_timeout+0x194>
    abfe:	2363      	movs	r3, #99	; 0x63
    ac00:	4642      	mov	r2, r8
    ac02:	495c      	ldr	r1, [pc, #368]	; (ad74 <z_add_timeout+0x198>)
    ac04:	485c      	ldr	r0, [pc, #368]	; (ad78 <z_add_timeout+0x19c>)
    ac06:	f001 f833 	bl	bc70 <assert_print>
    ac0a:	485c      	ldr	r0, [pc, #368]	; (ad7c <z_add_timeout+0x1a0>)
    ac0c:	f001 f830 	bl	bc70 <assert_print>
    ac10:	2163      	movs	r1, #99	; 0x63
    ac12:	4640      	mov	r0, r8
    ac14:	f001 f825 	bl	bc62 <assert_post_action>
	to->fn = fn;
    ac18:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    ac1a:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    ac1e:	f04f 0320 	mov.w	r3, #32
    ac22:	f3ef 8711 	mrs	r7, BASEPRI
    ac26:	f383 8812 	msr	BASEPRI_MAX, r3
    ac2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac2e:	4854      	ldr	r0, [pc, #336]	; (ad80 <z_add_timeout+0x1a4>)
    ac30:	f7fd ff6a 	bl	8b08 <z_spin_lock_valid>
    ac34:	b118      	cbz	r0, ac3e <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    ac36:	4852      	ldr	r0, [pc, #328]	; (ad80 <z_add_timeout+0x1a4>)
    ac38:	f7fd ff86 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    ac3c:	e038      	b.n	acb0 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac3e:	f8df 9144 	ldr.w	r9, [pc, #324]	; ad84 <z_add_timeout+0x1a8>
    ac42:	238e      	movs	r3, #142	; 0x8e
    ac44:	464a      	mov	r2, r9
    ac46:	4950      	ldr	r1, [pc, #320]	; (ad88 <z_add_timeout+0x1ac>)
    ac48:	484b      	ldr	r0, [pc, #300]	; (ad78 <z_add_timeout+0x19c>)
    ac4a:	f001 f811 	bl	bc70 <assert_print>
    ac4e:	494c      	ldr	r1, [pc, #304]	; (ad80 <z_add_timeout+0x1a4>)
    ac50:	484e      	ldr	r0, [pc, #312]	; (ad8c <z_add_timeout+0x1b0>)
    ac52:	f001 f80d 	bl	bc70 <assert_print>
    ac56:	218e      	movs	r1, #142	; 0x8e
    ac58:	4648      	mov	r0, r9
    ac5a:	f001 f802 	bl	bc62 <assert_post_action>
    ac5e:	e7ea      	b.n	ac36 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    ac60:	f11a 0801 	adds.w	r8, sl, #1
    ac64:	f145 0900 	adc.w	r9, r5, #0
    ac68:	f7ff ff86 	bl	ab78 <elapsed>
    ac6c:	eb18 0300 	adds.w	r3, r8, r0
    ac70:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    ac74:	6123      	str	r3, [r4, #16]
    ac76:	6160      	str	r0, [r4, #20]
    ac78:	e03d      	b.n	acf6 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    ac7a:	1a51      	subs	r1, r2, r1
    ac7c:	eb66 0303 	sbc.w	r3, r6, r3
    ac80:	6101      	str	r1, [r0, #16]
    ac82:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    ac84:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    ac86:	6063      	str	r3, [r4, #4]
	node->next = successor;
    ac88:	6020      	str	r0, [r4, #0]
	prev->next = node;
    ac8a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ac8c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    ac8e:	2800      	cmp	r0, #0
    ac90:	d045      	beq.n	ad1e <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ac92:	f7ff ff5b 	bl	ab4c <first>
    ac96:	4284      	cmp	r4, r0
    ac98:	d048      	beq.n	ad2c <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac9a:	4839      	ldr	r0, [pc, #228]	; (ad80 <z_add_timeout+0x1a4>)
    ac9c:	f7fd ff44 	bl	8b28 <z_spin_unlock_valid>
    aca0:	2800      	cmp	r0, #0
    aca2:	d050      	beq.n	ad46 <z_add_timeout+0x16a>
	__asm__ volatile(
    aca4:	f387 8811 	msr	BASEPRI, r7
    aca8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    acac:	f04f 0801 	mov.w	r8, #1
    acb0:	f1b8 0f00 	cmp.w	r8, #0
    acb4:	d158      	bne.n	ad68 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    acb6:	4653      	mov	r3, sl
    acb8:	f06f 0101 	mvn.w	r1, #1
    acbc:	ebb1 010a 	subs.w	r1, r1, sl
    acc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    acc4:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    acc8:	2a00      	cmp	r2, #0
    acca:	dbc9      	blt.n	ac60 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    accc:	4a30      	ldr	r2, [pc, #192]	; (ad90 <z_add_timeout+0x1b4>)
    acce:	6811      	ldr	r1, [r2, #0]
    acd0:	6852      	ldr	r2, [r2, #4]
    acd2:	185b      	adds	r3, r3, r1
    acd4:	eb42 0205 	adc.w	r2, r2, r5
    acd8:	f06f 0101 	mvn.w	r1, #1
    acdc:	1acb      	subs	r3, r1, r3
    acde:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    ace2:	4618      	mov	r0, r3
    ace4:	4611      	mov	r1, r2
    ace6:	2b01      	cmp	r3, #1
    ace8:	f172 0300 	sbcs.w	r3, r2, #0
    acec:	da01      	bge.n	acf2 <z_add_timeout+0x116>
    acee:	2001      	movs	r0, #1
    acf0:	2100      	movs	r1, #0
    acf2:	6120      	str	r0, [r4, #16]
    acf4:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    acf6:	f7ff ff29 	bl	ab4c <first>
    acfa:	2800      	cmp	r0, #0
    acfc:	d0c7      	beq.n	ac8e <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    acfe:	6902      	ldr	r2, [r0, #16]
    ad00:	6946      	ldr	r6, [r0, #20]
    ad02:	6921      	ldr	r1, [r4, #16]
    ad04:	6963      	ldr	r3, [r4, #20]
    ad06:	4291      	cmp	r1, r2
    ad08:	eb73 0c06 	sbcs.w	ip, r3, r6
    ad0c:	dbb5      	blt.n	ac7a <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    ad0e:	1a89      	subs	r1, r1, r2
    ad10:	eb63 0306 	sbc.w	r3, r3, r6
    ad14:	6121      	str	r1, [r4, #16]
    ad16:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ad18:	f7ff ff22 	bl	ab60 <next>
    ad1c:	e7ed      	b.n	acfa <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    ad1e:	4b1d      	ldr	r3, [pc, #116]	; (ad94 <z_add_timeout+0x1b8>)
    ad20:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    ad22:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    ad24:	6062      	str	r2, [r4, #4]
	tail->next = node;
    ad26:	6014      	str	r4, [r2, #0]
	list->tail = node;
    ad28:	605c      	str	r4, [r3, #4]
}
    ad2a:	e7b2      	b.n	ac92 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ad2c:	f7ff ff30 	bl	ab90 <next_timeout>

			if (next_time == 0 ||
    ad30:	4603      	mov	r3, r0
    ad32:	b118      	cbz	r0, ad3c <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    ad34:	4a18      	ldr	r2, [pc, #96]	; (ad98 <z_add_timeout+0x1bc>)
    ad36:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    ad38:	4282      	cmp	r2, r0
    ad3a:	d0ae      	beq.n	ac9a <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    ad3c:	2100      	movs	r1, #0
    ad3e:	4618      	mov	r0, r3
    ad40:	f7fb fb18 	bl	6374 <sys_clock_set_timeout>
    ad44:	e7a9      	b.n	ac9a <z_add_timeout+0xbe>
    ad46:	f8df 803c 	ldr.w	r8, [pc, #60]	; ad84 <z_add_timeout+0x1a8>
    ad4a:	23b9      	movs	r3, #185	; 0xb9
    ad4c:	4642      	mov	r2, r8
    ad4e:	4913      	ldr	r1, [pc, #76]	; (ad9c <z_add_timeout+0x1c0>)
    ad50:	4809      	ldr	r0, [pc, #36]	; (ad78 <z_add_timeout+0x19c>)
    ad52:	f000 ff8d 	bl	bc70 <assert_print>
    ad56:	490a      	ldr	r1, [pc, #40]	; (ad80 <z_add_timeout+0x1a4>)
    ad58:	4811      	ldr	r0, [pc, #68]	; (ada0 <z_add_timeout+0x1c4>)
    ad5a:	f000 ff89 	bl	bc70 <assert_print>
    ad5e:	21b9      	movs	r1, #185	; 0xb9
    ad60:	4640      	mov	r0, r8
    ad62:	f000 ff7e 	bl	bc62 <assert_post_action>
    ad66:	e79d      	b.n	aca4 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad6c:	4770      	bx	lr
    ad6e:	bf00      	nop
    ad70:	0000f1e8 	.word	0x0000f1e8
    ad74:	0000f20c 	.word	0x0000f20c
    ad78:	0000d02c 	.word	0x0000d02c
    ad7c:	0000f020 	.word	0x0000f020
    ad80:	200011a0 	.word	0x200011a0
    ad84:	0000d7f0 	.word	0x0000d7f0
    ad88:	0000d850 	.word	0x0000d850
    ad8c:	0000d868 	.word	0x0000d868
    ad90:	200005f0 	.word	0x200005f0
    ad94:	20000174 	.word	0x20000174
    ad98:	20001154 	.word	0x20001154
    ad9c:	0000d820 	.word	0x0000d820
    ada0:	0000d838 	.word	0x0000d838

0000ada4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ada8:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    adaa:	2400      	movs	r4, #0
	__asm__ volatile(
    adac:	f04f 0320 	mov.w	r3, #32
    adb0:	f3ef 8711 	mrs	r7, BASEPRI
    adb4:	f383 8812 	msr	BASEPRI_MAX, r3
    adb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    adbc:	481f      	ldr	r0, [pc, #124]	; (ae3c <z_abort_timeout+0x98>)
    adbe:	f7fd fea3 	bl	8b08 <z_spin_lock_valid>
    adc2:	b128      	cbz	r0, add0 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    adc4:	481d      	ldr	r0, [pc, #116]	; (ae3c <z_abort_timeout+0x98>)
    adc6:	f7fd febf 	bl	8b48 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    adca:	f06f 0815 	mvn.w	r8, #21
	return k;
    adce:	e018      	b.n	ae02 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    add0:	4e1b      	ldr	r6, [pc, #108]	; (ae40 <z_abort_timeout+0x9c>)
    add2:	238e      	movs	r3, #142	; 0x8e
    add4:	4632      	mov	r2, r6
    add6:	491b      	ldr	r1, [pc, #108]	; (ae44 <z_abort_timeout+0xa0>)
    add8:	481b      	ldr	r0, [pc, #108]	; (ae48 <z_abort_timeout+0xa4>)
    adda:	f000 ff49 	bl	bc70 <assert_print>
    adde:	4917      	ldr	r1, [pc, #92]	; (ae3c <z_abort_timeout+0x98>)
    ade0:	481a      	ldr	r0, [pc, #104]	; (ae4c <z_abort_timeout+0xa8>)
    ade2:	f000 ff45 	bl	bc70 <assert_print>
    ade6:	218e      	movs	r1, #142	; 0x8e
    ade8:	4630      	mov	r0, r6
    adea:	f000 ff3a 	bl	bc62 <assert_post_action>
    adee:	e7e9      	b.n	adc4 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    adf0:	4812      	ldr	r0, [pc, #72]	; (ae3c <z_abort_timeout+0x98>)
    adf2:	f7fd fe99 	bl	8b28 <z_spin_unlock_valid>
    adf6:	b170      	cbz	r0, ae16 <z_abort_timeout+0x72>
	__asm__ volatile(
    adf8:	f387 8811 	msr	BASEPRI, r7
    adfc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ae00:	2401      	movs	r4, #1
    ae02:	4626      	mov	r6, r4
    ae04:	b9bc      	cbnz	r4, ae36 <z_abort_timeout+0x92>
	return node->next != NULL;
    ae06:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d0f1      	beq.n	adf0 <z_abort_timeout+0x4c>
			remove_timeout(to);
    ae0c:	4628      	mov	r0, r5
    ae0e:	f001 fe90 	bl	cb32 <remove_timeout>
			ret = 0;
    ae12:	46b0      	mov	r8, r6
    ae14:	e7ec      	b.n	adf0 <z_abort_timeout+0x4c>
    ae16:	4c0a      	ldr	r4, [pc, #40]	; (ae40 <z_abort_timeout+0x9c>)
    ae18:	23b9      	movs	r3, #185	; 0xb9
    ae1a:	4622      	mov	r2, r4
    ae1c:	490c      	ldr	r1, [pc, #48]	; (ae50 <z_abort_timeout+0xac>)
    ae1e:	480a      	ldr	r0, [pc, #40]	; (ae48 <z_abort_timeout+0xa4>)
    ae20:	f000 ff26 	bl	bc70 <assert_print>
    ae24:	4905      	ldr	r1, [pc, #20]	; (ae3c <z_abort_timeout+0x98>)
    ae26:	480b      	ldr	r0, [pc, #44]	; (ae54 <z_abort_timeout+0xb0>)
    ae28:	f000 ff22 	bl	bc70 <assert_print>
    ae2c:	21b9      	movs	r1, #185	; 0xb9
    ae2e:	4620      	mov	r0, r4
    ae30:	f000 ff17 	bl	bc62 <assert_post_action>
    ae34:	e7e0      	b.n	adf8 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    ae36:	4640      	mov	r0, r8
    ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae3c:	200011a0 	.word	0x200011a0
    ae40:	0000d7f0 	.word	0x0000d7f0
    ae44:	0000d850 	.word	0x0000d850
    ae48:	0000d02c 	.word	0x0000d02c
    ae4c:	0000d868 	.word	0x0000d868
    ae50:	0000d820 	.word	0x0000d820
    ae54:	0000d838 	.word	0x0000d838

0000ae58 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    ae58:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    ae5a:	2500      	movs	r5, #0
	__asm__ volatile(
    ae5c:	f04f 0320 	mov.w	r3, #32
    ae60:	f3ef 8611 	mrs	r6, BASEPRI
    ae64:	f383 8812 	msr	BASEPRI_MAX, r3
    ae68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae6c:	481c      	ldr	r0, [pc, #112]	; (aee0 <z_get_next_timeout_expiry+0x88>)
    ae6e:	f7fd fe4b 	bl	8b08 <z_spin_lock_valid>
    ae72:	b128      	cbz	r0, ae80 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    ae74:	481a      	ldr	r0, [pc, #104]	; (aee0 <z_get_next_timeout_expiry+0x88>)
    ae76:	f7fd fe67 	bl	8b48 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    ae7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    ae7e:	e014      	b.n	aeaa <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae80:	4c18      	ldr	r4, [pc, #96]	; (aee4 <z_get_next_timeout_expiry+0x8c>)
    ae82:	238e      	movs	r3, #142	; 0x8e
    ae84:	4622      	mov	r2, r4
    ae86:	4918      	ldr	r1, [pc, #96]	; (aee8 <z_get_next_timeout_expiry+0x90>)
    ae88:	4818      	ldr	r0, [pc, #96]	; (aeec <z_get_next_timeout_expiry+0x94>)
    ae8a:	f000 fef1 	bl	bc70 <assert_print>
    ae8e:	4914      	ldr	r1, [pc, #80]	; (aee0 <z_get_next_timeout_expiry+0x88>)
    ae90:	4817      	ldr	r0, [pc, #92]	; (aef0 <z_get_next_timeout_expiry+0x98>)
    ae92:	f000 feed 	bl	bc70 <assert_print>
    ae96:	218e      	movs	r1, #142	; 0x8e
    ae98:	4620      	mov	r0, r4
    ae9a:	f000 fee2 	bl	bc62 <assert_post_action>
    ae9e:	e7e9      	b.n	ae74 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    aea0:	f386 8811 	msr	BASEPRI, r6
    aea4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    aea8:	2501      	movs	r5, #1
    aeaa:	b9bd      	cbnz	r5, aedc <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    aeac:	f7ff fe70 	bl	ab90 <next_timeout>
    aeb0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aeb2:	480b      	ldr	r0, [pc, #44]	; (aee0 <z_get_next_timeout_expiry+0x88>)
    aeb4:	f7fd fe38 	bl	8b28 <z_spin_unlock_valid>
    aeb8:	2800      	cmp	r0, #0
    aeba:	d1f1      	bne.n	aea0 <z_get_next_timeout_expiry+0x48>
    aebc:	4d09      	ldr	r5, [pc, #36]	; (aee4 <z_get_next_timeout_expiry+0x8c>)
    aebe:	23b9      	movs	r3, #185	; 0xb9
    aec0:	462a      	mov	r2, r5
    aec2:	490c      	ldr	r1, [pc, #48]	; (aef4 <z_get_next_timeout_expiry+0x9c>)
    aec4:	4809      	ldr	r0, [pc, #36]	; (aeec <z_get_next_timeout_expiry+0x94>)
    aec6:	f000 fed3 	bl	bc70 <assert_print>
    aeca:	4905      	ldr	r1, [pc, #20]	; (aee0 <z_get_next_timeout_expiry+0x88>)
    aecc:	480a      	ldr	r0, [pc, #40]	; (aef8 <z_get_next_timeout_expiry+0xa0>)
    aece:	f000 fecf 	bl	bc70 <assert_print>
    aed2:	21b9      	movs	r1, #185	; 0xb9
    aed4:	4628      	mov	r0, r5
    aed6:	f000 fec4 	bl	bc62 <assert_post_action>
    aeda:	e7e1      	b.n	aea0 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    aedc:	4620      	mov	r0, r4
    aede:	bd70      	pop	{r4, r5, r6, pc}
    aee0:	200011a0 	.word	0x200011a0
    aee4:	0000d7f0 	.word	0x0000d7f0
    aee8:	0000d850 	.word	0x0000d850
    aeec:	0000d02c 	.word	0x0000d02c
    aef0:	0000d868 	.word	0x0000d868
    aef4:	0000d820 	.word	0x0000d820
    aef8:	0000d838 	.word	0x0000d838

0000aefc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af00:	4606      	mov	r6, r0
    af02:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    af04:	2500      	movs	r5, #0
	__asm__ volatile(
    af06:	f04f 0320 	mov.w	r3, #32
    af0a:	f3ef 8711 	mrs	r7, BASEPRI
    af0e:	f383 8812 	msr	BASEPRI_MAX, r3
    af12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af16:	4825      	ldr	r0, [pc, #148]	; (afac <z_set_timeout_expiry+0xb0>)
    af18:	f7fd fdf6 	bl	8b08 <z_spin_lock_valid>
    af1c:	b118      	cbz	r0, af26 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    af1e:	4823      	ldr	r0, [pc, #140]	; (afac <z_set_timeout_expiry+0xb0>)
    af20:	f7fd fe12 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    af24:	e01e      	b.n	af64 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af26:	4c22      	ldr	r4, [pc, #136]	; (afb0 <z_set_timeout_expiry+0xb4>)
    af28:	238e      	movs	r3, #142	; 0x8e
    af2a:	4622      	mov	r2, r4
    af2c:	4921      	ldr	r1, [pc, #132]	; (afb4 <z_set_timeout_expiry+0xb8>)
    af2e:	4822      	ldr	r0, [pc, #136]	; (afb8 <z_set_timeout_expiry+0xbc>)
    af30:	f000 fe9e 	bl	bc70 <assert_print>
    af34:	491d      	ldr	r1, [pc, #116]	; (afac <z_set_timeout_expiry+0xb0>)
    af36:	4821      	ldr	r0, [pc, #132]	; (afbc <z_set_timeout_expiry+0xc0>)
    af38:	f000 fe9a 	bl	bc70 <assert_print>
    af3c:	218e      	movs	r1, #142	; 0x8e
    af3e:	4620      	mov	r0, r4
    af40:	f000 fe8f 	bl	bc62 <assert_post_action>
    af44:	e7eb      	b.n	af1e <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    af46:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    af48:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    af4c:	2801      	cmp	r0, #1
    af4e:	dd00      	ble.n	af52 <z_set_timeout_expiry+0x56>
    af50:	b99c      	cbnz	r4, af7a <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af52:	4816      	ldr	r0, [pc, #88]	; (afac <z_set_timeout_expiry+0xb0>)
    af54:	f7fd fde8 	bl	8b28 <z_spin_unlock_valid>
    af58:	b1b0      	cbz	r0, af88 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    af5a:	f387 8811 	msr	BASEPRI, r7
    af5e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    af62:	2501      	movs	r5, #1
    af64:	462c      	mov	r4, r5
    af66:	b9fd      	cbnz	r5, afa8 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    af68:	f7ff fe12 	bl	ab90 <next_timeout>
			      || (ticks <= next_to);
    af6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    af70:	d0e9      	beq.n	af46 <z_set_timeout_expiry+0x4a>
    af72:	42b0      	cmp	r0, r6
    af74:	dbe8      	blt.n	af48 <z_set_timeout_expiry+0x4c>
    af76:	2401      	movs	r4, #1
    af78:	e7e6      	b.n	af48 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    af7a:	4641      	mov	r1, r8
    af7c:	42b0      	cmp	r0, r6
    af7e:	bfa8      	it	ge
    af80:	4630      	movge	r0, r6
    af82:	f7fb f9f7 	bl	6374 <sys_clock_set_timeout>
    af86:	e7e4      	b.n	af52 <z_set_timeout_expiry+0x56>
    af88:	4c09      	ldr	r4, [pc, #36]	; (afb0 <z_set_timeout_expiry+0xb4>)
    af8a:	23b9      	movs	r3, #185	; 0xb9
    af8c:	4622      	mov	r2, r4
    af8e:	490c      	ldr	r1, [pc, #48]	; (afc0 <z_set_timeout_expiry+0xc4>)
    af90:	4809      	ldr	r0, [pc, #36]	; (afb8 <z_set_timeout_expiry+0xbc>)
    af92:	f000 fe6d 	bl	bc70 <assert_print>
    af96:	4905      	ldr	r1, [pc, #20]	; (afac <z_set_timeout_expiry+0xb0>)
    af98:	480a      	ldr	r0, [pc, #40]	; (afc4 <z_set_timeout_expiry+0xc8>)
    af9a:	f000 fe69 	bl	bc70 <assert_print>
    af9e:	21b9      	movs	r1, #185	; 0xb9
    afa0:	4620      	mov	r0, r4
    afa2:	f000 fe5e 	bl	bc62 <assert_post_action>
    afa6:	e7d8      	b.n	af5a <z_set_timeout_expiry+0x5e>
		}
	}
}
    afa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afac:	200011a0 	.word	0x200011a0
    afb0:	0000d7f0 	.word	0x0000d7f0
    afb4:	0000d850 	.word	0x0000d850
    afb8:	0000d02c 	.word	0x0000d02c
    afbc:	0000d868 	.word	0x0000d868
    afc0:	0000d820 	.word	0x0000d820
    afc4:	0000d838 	.word	0x0000d838

0000afc8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    afc8:	b570      	push	{r4, r5, r6, lr}
    afca:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    afcc:	f7fe fd5e 	bl	9a8c <z_time_slice>
	__asm__ volatile(
    afd0:	f04f 0320 	mov.w	r3, #32
    afd4:	f3ef 8511 	mrs	r5, BASEPRI
    afd8:	f383 8812 	msr	BASEPRI_MAX, r3
    afdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    afe0:	4854      	ldr	r0, [pc, #336]	; (b134 <sys_clock_announce+0x16c>)
    afe2:	f7fd fd91 	bl	8b08 <z_spin_lock_valid>
    afe6:	b128      	cbz	r0, aff4 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    afe8:	4852      	ldr	r0, [pc, #328]	; (b134 <sys_clock_announce+0x16c>)
    afea:	f7fd fdad 	bl	8b48 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    afee:	4b52      	ldr	r3, [pc, #328]	; (b138 <sys_clock_announce+0x170>)
    aff0:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    aff2:	e022      	b.n	b03a <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aff4:	4e51      	ldr	r6, [pc, #324]	; (b13c <sys_clock_announce+0x174>)
    aff6:	238e      	movs	r3, #142	; 0x8e
    aff8:	4632      	mov	r2, r6
    affa:	4951      	ldr	r1, [pc, #324]	; (b140 <sys_clock_announce+0x178>)
    affc:	4851      	ldr	r0, [pc, #324]	; (b144 <sys_clock_announce+0x17c>)
    affe:	f000 fe37 	bl	bc70 <assert_print>
    b002:	494c      	ldr	r1, [pc, #304]	; (b134 <sys_clock_announce+0x16c>)
    b004:	4850      	ldr	r0, [pc, #320]	; (b148 <sys_clock_announce+0x180>)
    b006:	f000 fe33 	bl	bc70 <assert_print>
    b00a:	218e      	movs	r1, #142	; 0x8e
    b00c:	4630      	mov	r0, r6
    b00e:	f000 fe28 	bl	bc62 <assert_post_action>
    b012:	e7e9      	b.n	afe8 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b014:	4e49      	ldr	r6, [pc, #292]	; (b13c <sys_clock_announce+0x174>)
    b016:	23b9      	movs	r3, #185	; 0xb9
    b018:	4632      	mov	r2, r6
    b01a:	494c      	ldr	r1, [pc, #304]	; (b14c <sys_clock_announce+0x184>)
    b01c:	4849      	ldr	r0, [pc, #292]	; (b144 <sys_clock_announce+0x17c>)
    b01e:	f000 fe27 	bl	bc70 <assert_print>
    b022:	4944      	ldr	r1, [pc, #272]	; (b134 <sys_clock_announce+0x16c>)
    b024:	484a      	ldr	r0, [pc, #296]	; (b150 <sys_clock_announce+0x188>)
    b026:	f000 fe23 	bl	bc70 <assert_print>
    b02a:	21b9      	movs	r1, #185	; 0xb9
    b02c:	4630      	mov	r0, r6
    b02e:	f000 fe18 	bl	bc62 <assert_post_action>
    b032:	e027      	b.n	b084 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    b034:	483f      	ldr	r0, [pc, #252]	; (b134 <sys_clock_announce+0x16c>)
    b036:	f7fd fd87 	bl	8b48 <z_spin_lock_set_owner>
    b03a:	f7ff fd87 	bl	ab4c <first>
    b03e:	4604      	mov	r4, r0
    b040:	2800      	cmp	r0, #0
    b042:	d043      	beq.n	b0cc <sys_clock_announce+0x104>
    b044:	6902      	ldr	r2, [r0, #16]
    b046:	6941      	ldr	r1, [r0, #20]
    b048:	4b3b      	ldr	r3, [pc, #236]	; (b138 <sys_clock_announce+0x170>)
    b04a:	681b      	ldr	r3, [r3, #0]
    b04c:	17d8      	asrs	r0, r3, #31
    b04e:	4293      	cmp	r3, r2
    b050:	eb70 0101 	sbcs.w	r1, r0, r1
    b054:	db3a      	blt.n	b0cc <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b056:	483f      	ldr	r0, [pc, #252]	; (b154 <sys_clock_announce+0x18c>)
    b058:	6801      	ldr	r1, [r0, #0]
    b05a:	6846      	ldr	r6, [r0, #4]
    b05c:	1889      	adds	r1, r1, r2
    b05e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    b062:	6001      	str	r1, [r0, #0]
    b064:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    b066:	1a9b      	subs	r3, r3, r2
    b068:	4a33      	ldr	r2, [pc, #204]	; (b138 <sys_clock_announce+0x170>)
    b06a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b06c:	2200      	movs	r2, #0
    b06e:	2300      	movs	r3, #0
    b070:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b074:	4620      	mov	r0, r4
    b076:	f001 fd5c 	bl	cb32 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b07a:	482e      	ldr	r0, [pc, #184]	; (b134 <sys_clock_announce+0x16c>)
    b07c:	f7fd fd54 	bl	8b28 <z_spin_unlock_valid>
    b080:	2800      	cmp	r0, #0
    b082:	d0c7      	beq.n	b014 <sys_clock_announce+0x4c>
	__asm__ volatile(
    b084:	f385 8811 	msr	BASEPRI, r5
    b088:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b08c:	68a3      	ldr	r3, [r4, #8]
    b08e:	4620      	mov	r0, r4
    b090:	4798      	blx	r3
	__asm__ volatile(
    b092:	f04f 0320 	mov.w	r3, #32
    b096:	f3ef 8511 	mrs	r5, BASEPRI
    b09a:	f383 8812 	msr	BASEPRI_MAX, r3
    b09e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b0a2:	4824      	ldr	r0, [pc, #144]	; (b134 <sys_clock_announce+0x16c>)
    b0a4:	f7fd fd30 	bl	8b08 <z_spin_lock_valid>
    b0a8:	2800      	cmp	r0, #0
    b0aa:	d1c3      	bne.n	b034 <sys_clock_announce+0x6c>
    b0ac:	4c23      	ldr	r4, [pc, #140]	; (b13c <sys_clock_announce+0x174>)
    b0ae:	238e      	movs	r3, #142	; 0x8e
    b0b0:	4622      	mov	r2, r4
    b0b2:	4923      	ldr	r1, [pc, #140]	; (b140 <sys_clock_announce+0x178>)
    b0b4:	4823      	ldr	r0, [pc, #140]	; (b144 <sys_clock_announce+0x17c>)
    b0b6:	f000 fddb 	bl	bc70 <assert_print>
    b0ba:	491e      	ldr	r1, [pc, #120]	; (b134 <sys_clock_announce+0x16c>)
    b0bc:	4822      	ldr	r0, [pc, #136]	; (b148 <sys_clock_announce+0x180>)
    b0be:	f000 fdd7 	bl	bc70 <assert_print>
    b0c2:	218e      	movs	r1, #142	; 0x8e
    b0c4:	4620      	mov	r0, r4
    b0c6:	f000 fdcc 	bl	bc62 <assert_post_action>
    b0ca:	e7b3      	b.n	b034 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b0cc:	b144      	cbz	r4, b0e0 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    b0ce:	4b1a      	ldr	r3, [pc, #104]	; (b138 <sys_clock_announce+0x170>)
    b0d0:	6819      	ldr	r1, [r3, #0]
    b0d2:	6923      	ldr	r3, [r4, #16]
    b0d4:	6962      	ldr	r2, [r4, #20]
    b0d6:	1a5b      	subs	r3, r3, r1
    b0d8:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    b0dc:	6123      	str	r3, [r4, #16]
    b0de:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    b0e0:	4a1c      	ldr	r2, [pc, #112]	; (b154 <sys_clock_announce+0x18c>)
    b0e2:	4e15      	ldr	r6, [pc, #84]	; (b138 <sys_clock_announce+0x170>)
    b0e4:	6830      	ldr	r0, [r6, #0]
    b0e6:	6813      	ldr	r3, [r2, #0]
    b0e8:	6851      	ldr	r1, [r2, #4]
    b0ea:	181b      	adds	r3, r3, r0
    b0ec:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    b0f0:	6013      	str	r3, [r2, #0]
    b0f2:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    b0f4:	2400      	movs	r4, #0
    b0f6:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b0f8:	f7ff fd4a 	bl	ab90 <next_timeout>
    b0fc:	4621      	mov	r1, r4
    b0fe:	f7fb f939 	bl	6374 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b102:	480c      	ldr	r0, [pc, #48]	; (b134 <sys_clock_announce+0x16c>)
    b104:	f7fd fd10 	bl	8b28 <z_spin_unlock_valid>
    b108:	b120      	cbz	r0, b114 <sys_clock_announce+0x14c>
	__asm__ volatile(
    b10a:	f385 8811 	msr	BASEPRI, r5
    b10e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b112:	bd70      	pop	{r4, r5, r6, pc}
    b114:	4c09      	ldr	r4, [pc, #36]	; (b13c <sys_clock_announce+0x174>)
    b116:	23b9      	movs	r3, #185	; 0xb9
    b118:	4622      	mov	r2, r4
    b11a:	490c      	ldr	r1, [pc, #48]	; (b14c <sys_clock_announce+0x184>)
    b11c:	4809      	ldr	r0, [pc, #36]	; (b144 <sys_clock_announce+0x17c>)
    b11e:	f000 fda7 	bl	bc70 <assert_print>
    b122:	4904      	ldr	r1, [pc, #16]	; (b134 <sys_clock_announce+0x16c>)
    b124:	480a      	ldr	r0, [pc, #40]	; (b150 <sys_clock_announce+0x188>)
    b126:	f000 fda3 	bl	bc70 <assert_print>
    b12a:	21b9      	movs	r1, #185	; 0xb9
    b12c:	4620      	mov	r0, r4
    b12e:	f000 fd98 	bl	bc62 <assert_post_action>
    b132:	e7ea      	b.n	b10a <sys_clock_announce+0x142>
    b134:	200011a0 	.word	0x200011a0
    b138:	2000119c 	.word	0x2000119c
    b13c:	0000d7f0 	.word	0x0000d7f0
    b140:	0000d850 	.word	0x0000d850
    b144:	0000d02c 	.word	0x0000d02c
    b148:	0000d868 	.word	0x0000d868
    b14c:	0000d820 	.word	0x0000d820
    b150:	0000d838 	.word	0x0000d838
    b154:	200005f0 	.word	0x200005f0

0000b158 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b15a:	2600      	movs	r6, #0
	__asm__ volatile(
    b15c:	f04f 0320 	mov.w	r3, #32
    b160:	f3ef 8711 	mrs	r7, BASEPRI
    b164:	f383 8812 	msr	BASEPRI_MAX, r3
    b168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b16c:	481f      	ldr	r0, [pc, #124]	; (b1ec <sys_clock_tick_get+0x94>)
    b16e:	f7fd fccb 	bl	8b08 <z_spin_lock_valid>
    b172:	b128      	cbz	r0, b180 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    b174:	481d      	ldr	r0, [pc, #116]	; (b1ec <sys_clock_tick_get+0x94>)
    b176:	f7fd fce7 	bl	8b48 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    b17a:	2400      	movs	r4, #0
    b17c:	4625      	mov	r5, r4
	return k;
    b17e:	e014      	b.n	b1aa <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b180:	4c1b      	ldr	r4, [pc, #108]	; (b1f0 <sys_clock_tick_get+0x98>)
    b182:	238e      	movs	r3, #142	; 0x8e
    b184:	4622      	mov	r2, r4
    b186:	491b      	ldr	r1, [pc, #108]	; (b1f4 <sys_clock_tick_get+0x9c>)
    b188:	481b      	ldr	r0, [pc, #108]	; (b1f8 <sys_clock_tick_get+0xa0>)
    b18a:	f000 fd71 	bl	bc70 <assert_print>
    b18e:	4917      	ldr	r1, [pc, #92]	; (b1ec <sys_clock_tick_get+0x94>)
    b190:	481a      	ldr	r0, [pc, #104]	; (b1fc <sys_clock_tick_get+0xa4>)
    b192:	f000 fd6d 	bl	bc70 <assert_print>
    b196:	218e      	movs	r1, #142	; 0x8e
    b198:	4620      	mov	r0, r4
    b19a:	f000 fd62 	bl	bc62 <assert_post_action>
    b19e:	e7e9      	b.n	b174 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    b1a0:	f387 8811 	msr	BASEPRI, r7
    b1a4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b1a8:	2601      	movs	r6, #1
    b1aa:	b9e6      	cbnz	r6, b1e6 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    b1ac:	f7fb f914 	bl	63d8 <sys_clock_elapsed>
    b1b0:	4b13      	ldr	r3, [pc, #76]	; (b200 <sys_clock_tick_get+0xa8>)
    b1b2:	681c      	ldr	r4, [r3, #0]
    b1b4:	685d      	ldr	r5, [r3, #4]
    b1b6:	1904      	adds	r4, r0, r4
    b1b8:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b1bc:	480b      	ldr	r0, [pc, #44]	; (b1ec <sys_clock_tick_get+0x94>)
    b1be:	f7fd fcb3 	bl	8b28 <z_spin_unlock_valid>
    b1c2:	2800      	cmp	r0, #0
    b1c4:	d1ec      	bne.n	b1a0 <sys_clock_tick_get+0x48>
    b1c6:	4e0a      	ldr	r6, [pc, #40]	; (b1f0 <sys_clock_tick_get+0x98>)
    b1c8:	23b9      	movs	r3, #185	; 0xb9
    b1ca:	4632      	mov	r2, r6
    b1cc:	490d      	ldr	r1, [pc, #52]	; (b204 <sys_clock_tick_get+0xac>)
    b1ce:	480a      	ldr	r0, [pc, #40]	; (b1f8 <sys_clock_tick_get+0xa0>)
    b1d0:	f000 fd4e 	bl	bc70 <assert_print>
    b1d4:	4905      	ldr	r1, [pc, #20]	; (b1ec <sys_clock_tick_get+0x94>)
    b1d6:	480c      	ldr	r0, [pc, #48]	; (b208 <sys_clock_tick_get+0xb0>)
    b1d8:	f000 fd4a 	bl	bc70 <assert_print>
    b1dc:	21b9      	movs	r1, #185	; 0xb9
    b1de:	4630      	mov	r0, r6
    b1e0:	f000 fd3f 	bl	bc62 <assert_post_action>
    b1e4:	e7dc      	b.n	b1a0 <sys_clock_tick_get+0x48>
	}
	return t;
}
    b1e6:	4620      	mov	r0, r4
    b1e8:	4629      	mov	r1, r5
    b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1ec:	200011a0 	.word	0x200011a0
    b1f0:	0000d7f0 	.word	0x0000d7f0
    b1f4:	0000d850 	.word	0x0000d850
    b1f8:	0000d02c 	.word	0x0000d02c
    b1fc:	0000d868 	.word	0x0000d868
    b200:	200005f0 	.word	0x200005f0
    b204:	0000d820 	.word	0x0000d820
    b208:	0000d838 	.word	0x0000d838

0000b20c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b20c:	b570      	push	{r4, r5, r6, lr}
    b20e:	4604      	mov	r4, r0
	__asm__ volatile(
    b210:	f04f 0320 	mov.w	r3, #32
    b214:	f3ef 8611 	mrs	r6, BASEPRI
    b218:	f383 8812 	msr	BASEPRI_MAX, r3
    b21c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b220:	4857      	ldr	r0, [pc, #348]	; (b380 <z_timer_expiration_handler+0x174>)
    b222:	f7fd fc71 	bl	8b08 <z_spin_lock_valid>
    b226:	2800      	cmp	r0, #0
    b228:	d049      	beq.n	b2be <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    b22a:	4855      	ldr	r0, [pc, #340]	; (b380 <z_timer_expiration_handler+0x174>)
    b22c:	f7fd fc8c 	bl	8b48 <z_spin_lock_set_owner>
	return k;
    b230:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b234:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b236:	ea52 0103 	orrs.w	r1, r2, r3
    b23a:	d005      	beq.n	b248 <z_timer_expiration_handler+0x3c>
    b23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b240:	bf08      	it	eq
    b242:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b246:	d14a      	bne.n	b2de <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b248:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b24a:	3301      	adds	r3, #1
    b24c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b24e:	6a23      	ldr	r3, [r4, #32]
    b250:	b1db      	cbz	r3, b28a <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b252:	484b      	ldr	r0, [pc, #300]	; (b380 <z_timer_expiration_handler+0x174>)
    b254:	f7fd fc68 	bl	8b28 <z_spin_unlock_valid>
    b258:	2800      	cmp	r0, #0
    b25a:	d047      	beq.n	b2ec <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    b25c:	f386 8811 	msr	BASEPRI, r6
    b260:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b264:	6a23      	ldr	r3, [r4, #32]
    b266:	4620      	mov	r0, r4
    b268:	4798      	blx	r3
	__asm__ volatile(
    b26a:	f04f 0320 	mov.w	r3, #32
    b26e:	f3ef 8511 	mrs	r5, BASEPRI
    b272:	f383 8812 	msr	BASEPRI_MAX, r3
    b276:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b27a:	4841      	ldr	r0, [pc, #260]	; (b380 <z_timer_expiration_handler+0x174>)
    b27c:	f7fd fc44 	bl	8b08 <z_spin_lock_valid>
    b280:	2800      	cmp	r0, #0
    b282:	d043      	beq.n	b30c <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    b284:	483e      	ldr	r0, [pc, #248]	; (b380 <z_timer_expiration_handler+0x174>)
    b286:	f7fd fc5f 	bl	8b48 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b28a:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b28e:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b290:	42a3      	cmp	r3, r4
    b292:	d04b      	beq.n	b32c <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b294:	2c00      	cmp	r4, #0
    b296:	d049      	beq.n	b32c <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b298:	4620      	mov	r0, r4
    b29a:	f7fe f9f7 	bl	968c <z_unpend_thread_no_timeout>
    b29e:	2300      	movs	r3, #0
    b2a0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2a4:	4836      	ldr	r0, [pc, #216]	; (b380 <z_timer_expiration_handler+0x174>)
    b2a6:	f7fd fc3f 	bl	8b28 <z_spin_unlock_valid>
    b2aa:	2800      	cmp	r0, #0
    b2ac:	d057      	beq.n	b35e <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    b2ae:	f385 8811 	msr	BASEPRI, r5
    b2b2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b2b6:	4620      	mov	r0, r4
    b2b8:	f7fe fce6 	bl	9c88 <z_ready_thread>
}
    b2bc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2be:	4d31      	ldr	r5, [pc, #196]	; (b384 <z_timer_expiration_handler+0x178>)
    b2c0:	238e      	movs	r3, #142	; 0x8e
    b2c2:	462a      	mov	r2, r5
    b2c4:	4930      	ldr	r1, [pc, #192]	; (b388 <z_timer_expiration_handler+0x17c>)
    b2c6:	4831      	ldr	r0, [pc, #196]	; (b38c <z_timer_expiration_handler+0x180>)
    b2c8:	f000 fcd2 	bl	bc70 <assert_print>
    b2cc:	492c      	ldr	r1, [pc, #176]	; (b380 <z_timer_expiration_handler+0x174>)
    b2ce:	4830      	ldr	r0, [pc, #192]	; (b390 <z_timer_expiration_handler+0x184>)
    b2d0:	f000 fcce 	bl	bc70 <assert_print>
    b2d4:	218e      	movs	r1, #142	; 0x8e
    b2d6:	4628      	mov	r0, r5
    b2d8:	f000 fcc3 	bl	bc62 <assert_post_action>
    b2dc:	e7a5      	b.n	b22a <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b2de:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    b2e2:	492c      	ldr	r1, [pc, #176]	; (b394 <z_timer_expiration_handler+0x188>)
    b2e4:	4620      	mov	r0, r4
    b2e6:	f7ff fc79 	bl	abdc <z_add_timeout>
    b2ea:	e7ad      	b.n	b248 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2ec:	4d25      	ldr	r5, [pc, #148]	; (b384 <z_timer_expiration_handler+0x178>)
    b2ee:	23b9      	movs	r3, #185	; 0xb9
    b2f0:	462a      	mov	r2, r5
    b2f2:	4929      	ldr	r1, [pc, #164]	; (b398 <z_timer_expiration_handler+0x18c>)
    b2f4:	4825      	ldr	r0, [pc, #148]	; (b38c <z_timer_expiration_handler+0x180>)
    b2f6:	f000 fcbb 	bl	bc70 <assert_print>
    b2fa:	4921      	ldr	r1, [pc, #132]	; (b380 <z_timer_expiration_handler+0x174>)
    b2fc:	4827      	ldr	r0, [pc, #156]	; (b39c <z_timer_expiration_handler+0x190>)
    b2fe:	f000 fcb7 	bl	bc70 <assert_print>
    b302:	21b9      	movs	r1, #185	; 0xb9
    b304:	4628      	mov	r0, r5
    b306:	f000 fcac 	bl	bc62 <assert_post_action>
    b30a:	e7a7      	b.n	b25c <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b30c:	4e1d      	ldr	r6, [pc, #116]	; (b384 <z_timer_expiration_handler+0x178>)
    b30e:	238e      	movs	r3, #142	; 0x8e
    b310:	4632      	mov	r2, r6
    b312:	491d      	ldr	r1, [pc, #116]	; (b388 <z_timer_expiration_handler+0x17c>)
    b314:	481d      	ldr	r0, [pc, #116]	; (b38c <z_timer_expiration_handler+0x180>)
    b316:	f000 fcab 	bl	bc70 <assert_print>
    b31a:	4919      	ldr	r1, [pc, #100]	; (b380 <z_timer_expiration_handler+0x174>)
    b31c:	481c      	ldr	r0, [pc, #112]	; (b390 <z_timer_expiration_handler+0x184>)
    b31e:	f000 fca7 	bl	bc70 <assert_print>
    b322:	218e      	movs	r1, #142	; 0x8e
    b324:	4630      	mov	r0, r6
    b326:	f000 fc9c 	bl	bc62 <assert_post_action>
    b32a:	e7ab      	b.n	b284 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b32c:	4814      	ldr	r0, [pc, #80]	; (b380 <z_timer_expiration_handler+0x174>)
    b32e:	f7fd fbfb 	bl	8b28 <z_spin_unlock_valid>
    b332:	b120      	cbz	r0, b33e <z_timer_expiration_handler+0x132>
    b334:	f385 8811 	msr	BASEPRI, r5
    b338:	f3bf 8f6f 	isb	sy
		return;
    b33c:	e7be      	b.n	b2bc <z_timer_expiration_handler+0xb0>
    b33e:	4c11      	ldr	r4, [pc, #68]	; (b384 <z_timer_expiration_handler+0x178>)
    b340:	23b9      	movs	r3, #185	; 0xb9
    b342:	4622      	mov	r2, r4
    b344:	4914      	ldr	r1, [pc, #80]	; (b398 <z_timer_expiration_handler+0x18c>)
    b346:	4811      	ldr	r0, [pc, #68]	; (b38c <z_timer_expiration_handler+0x180>)
    b348:	f000 fc92 	bl	bc70 <assert_print>
    b34c:	490c      	ldr	r1, [pc, #48]	; (b380 <z_timer_expiration_handler+0x174>)
    b34e:	4813      	ldr	r0, [pc, #76]	; (b39c <z_timer_expiration_handler+0x190>)
    b350:	f000 fc8e 	bl	bc70 <assert_print>
    b354:	21b9      	movs	r1, #185	; 0xb9
    b356:	4620      	mov	r0, r4
    b358:	f000 fc83 	bl	bc62 <assert_post_action>
    b35c:	e7ea      	b.n	b334 <z_timer_expiration_handler+0x128>
    b35e:	4e09      	ldr	r6, [pc, #36]	; (b384 <z_timer_expiration_handler+0x178>)
    b360:	23b9      	movs	r3, #185	; 0xb9
    b362:	4632      	mov	r2, r6
    b364:	490c      	ldr	r1, [pc, #48]	; (b398 <z_timer_expiration_handler+0x18c>)
    b366:	4809      	ldr	r0, [pc, #36]	; (b38c <z_timer_expiration_handler+0x180>)
    b368:	f000 fc82 	bl	bc70 <assert_print>
    b36c:	4904      	ldr	r1, [pc, #16]	; (b380 <z_timer_expiration_handler+0x174>)
    b36e:	480b      	ldr	r0, [pc, #44]	; (b39c <z_timer_expiration_handler+0x190>)
    b370:	f000 fc7e 	bl	bc70 <assert_print>
    b374:	21b9      	movs	r1, #185	; 0xb9
    b376:	4630      	mov	r0, r6
    b378:	f000 fc73 	bl	bc62 <assert_post_action>
    b37c:	e797      	b.n	b2ae <z_timer_expiration_handler+0xa2>
    b37e:	bf00      	nop
    b380:	200011a4 	.word	0x200011a4
    b384:	0000d7f0 	.word	0x0000d7f0
    b388:	0000d850 	.word	0x0000d850
    b38c:	0000d02c 	.word	0x0000d02c
    b390:	0000d868 	.word	0x0000d868
    b394:	0000b20d 	.word	0x0000b20d
    b398:	0000d820 	.word	0x0000d820
    b39c:	0000d838 	.word	0x0000d838

0000b3a0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3a4:	9f06      	ldr	r7, [sp, #24]
    b3a6:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b3aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b3ae:	bf08      	it	eq
    b3b0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b3b4:	d02f      	beq.n	b416 <z_impl_k_timer_start+0x76>
    b3b6:	4605      	mov	r5, r0
    b3b8:	4614      	mov	r4, r2
    b3ba:	461e      	mov	r6, r3
    b3bc:	4611      	mov	r1, r2
    b3be:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b3c0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    b3c4:	bf08      	it	eq
    b3c6:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    b3ca:	d00d      	beq.n	b3e8 <z_impl_k_timer_start+0x48>
    b3cc:	ea57 0c08 	orrs.w	ip, r7, r8
    b3d0:	d00a      	beq.n	b3e8 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    b3d2:	f06f 0c01 	mvn.w	ip, #1
    b3d6:	ebbc 0c07 	subs.w	ip, ip, r7
    b3da:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b3de:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b3e2:	f1bc 0f00 	cmp.w	ip, #0
    b3e6:	db18      	blt.n	b41a <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b3e8:	f06f 0301 	mvn.w	r3, #1
    b3ec:	1a5b      	subs	r3, r3, r1
    b3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b3f2:	eb63 0300 	sbc.w	r3, r3, r0
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	db1a      	blt.n	b430 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b3fa:	4628      	mov	r0, r5
    b3fc:	f7ff fcd2 	bl	ada4 <z_abort_timeout>
	timer->period = period;
    b400:	62af      	str	r7, [r5, #40]	; 0x28
    b402:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    b406:	2300      	movs	r3, #0
    b408:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b40a:	4622      	mov	r2, r4
    b40c:	4633      	mov	r3, r6
    b40e:	490e      	ldr	r1, [pc, #56]	; (b448 <z_impl_k_timer_start+0xa8>)
    b410:	4628      	mov	r0, r5
    b412:	f7ff fbe3 	bl	abdc <z_add_timeout>
		     duration);
}
    b416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b41a:	2f02      	cmp	r7, #2
    b41c:	f178 0300 	sbcs.w	r3, r8, #0
    b420:	da02      	bge.n	b428 <z_impl_k_timer_start+0x88>
    b422:	2702      	movs	r7, #2
    b424:	f04f 0800 	mov.w	r8, #0
    b428:	3f01      	subs	r7, #1
    b42a:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    b42e:	e7db      	b.n	b3e8 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b430:	460c      	mov	r4, r1
    b432:	4606      	mov	r6, r0
    b434:	2901      	cmp	r1, #1
    b436:	f170 0300 	sbcs.w	r3, r0, #0
    b43a:	da01      	bge.n	b440 <z_impl_k_timer_start+0xa0>
    b43c:	2401      	movs	r4, #1
    b43e:	2600      	movs	r6, #0
    b440:	3c01      	subs	r4, #1
    b442:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    b446:	e7d8      	b.n	b3fa <z_impl_k_timer_start+0x5a>
    b448:	0000b20d 	.word	0x0000b20d

0000b44c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    b44c:	4b01      	ldr	r3, [pc, #4]	; (b454 <k_thread_system_pool_assign+0x8>)
    b44e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    b452:	4770      	bx	lr
    b454:	200001f8 	.word	0x200001f8

0000b458 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b458:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b45a:	4a03      	ldr	r2, [pc, #12]	; (b468 <boot_banner+0x10>)
    b45c:	4903      	ldr	r1, [pc, #12]	; (b46c <boot_banner+0x14>)
    b45e:	4804      	ldr	r0, [pc, #16]	; (b470 <boot_banner+0x18>)
    b460:	f000 fa81 	bl	b966 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b464:	bd08      	pop	{r3, pc}
    b466:	bf00      	nop
    b468:	0000e550 	.word	0x0000e550
    b46c:	0000f22c 	.word	0x0000f22c
    b470:	0000f23c 	.word	0x0000f23c

0000b474 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b474:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b476:	4c0f      	ldr	r4, [pc, #60]	; (b4b4 <statics_init+0x40>)
    b478:	e008      	b.n	b48c <statics_init+0x18>
    b47a:	4b0f      	ldr	r3, [pc, #60]	; (b4b8 <statics_init+0x44>)
    b47c:	429c      	cmp	r4, r3
    b47e:	d217      	bcs.n	b4b0 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b480:	68a2      	ldr	r2, [r4, #8]
    b482:	6861      	ldr	r1, [r4, #4]
    b484:	4620      	mov	r0, r4
    b486:	f001 fb94 	bl	cbb2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b48a:	3418      	adds	r4, #24
    b48c:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <statics_init+0x44>)
    b48e:	429c      	cmp	r4, r3
    b490:	d9f3      	bls.n	b47a <statics_init+0x6>
    b492:	4d0a      	ldr	r5, [pc, #40]	; (b4bc <statics_init+0x48>)
    b494:	2318      	movs	r3, #24
    b496:	462a      	mov	r2, r5
    b498:	4909      	ldr	r1, [pc, #36]	; (b4c0 <statics_init+0x4c>)
    b49a:	480a      	ldr	r0, [pc, #40]	; (b4c4 <statics_init+0x50>)
    b49c:	f000 fbe8 	bl	bc70 <assert_print>
    b4a0:	4809      	ldr	r0, [pc, #36]	; (b4c8 <statics_init+0x54>)
    b4a2:	f000 fbe5 	bl	bc70 <assert_print>
    b4a6:	2118      	movs	r1, #24
    b4a8:	4628      	mov	r0, r5
    b4aa:	f000 fbda 	bl	bc62 <assert_post_action>
    b4ae:	e7e4      	b.n	b47a <statics_init+0x6>
		}
	}
	return 0;
}
    b4b0:	2000      	movs	r0, #0
    b4b2:	bd38      	pop	{r3, r4, r5, pc}
    b4b4:	200001f8 	.word	0x200001f8
    b4b8:	20000210 	.word	0x20000210
    b4bc:	0000f264 	.word	0x0000f264
    b4c0:	0000f288 	.word	0x0000f288
    b4c4:	0000d02c 	.word	0x0000d02c
    b4c8:	0000edac 	.word	0x0000edac

0000b4cc <nrf_cc3xx_platform_init_no_rng>:
    b4cc:	b510      	push	{r4, lr}
    b4ce:	4c0a      	ldr	r4, [pc, #40]	; (b4f8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b4d0:	6823      	ldr	r3, [r4, #0]
    b4d2:	b11b      	cbz	r3, b4dc <nrf_cc3xx_platform_init_no_rng+0x10>
    b4d4:	2301      	movs	r3, #1
    b4d6:	6023      	str	r3, [r4, #0]
    b4d8:	2000      	movs	r0, #0
    b4da:	bd10      	pop	{r4, pc}
    b4dc:	f000 f8ce 	bl	b67c <CC_LibInitNoRng>
    b4e0:	2800      	cmp	r0, #0
    b4e2:	d0f7      	beq.n	b4d4 <nrf_cc3xx_platform_init_no_rng+0x8>
    b4e4:	3801      	subs	r0, #1
    b4e6:	2806      	cmp	r0, #6
    b4e8:	d803      	bhi.n	b4f2 <nrf_cc3xx_platform_init_no_rng+0x26>
    b4ea:	4b04      	ldr	r3, [pc, #16]	; (b4fc <nrf_cc3xx_platform_init_no_rng+0x30>)
    b4ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b4f0:	bd10      	pop	{r4, pc}
    b4f2:	4803      	ldr	r0, [pc, #12]	; (b500 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b4f4:	bd10      	pop	{r4, pc}
    b4f6:	bf00      	nop
    b4f8:	200011a8 	.word	0x200011a8
    b4fc:	0000f2a0 	.word	0x0000f2a0
    b500:	ffff8ffe 	.word	0xffff8ffe

0000b504 <nrf_cc3xx_platform_abort>:
    b504:	f3bf 8f4f 	dsb	sy
    b508:	4905      	ldr	r1, [pc, #20]	; (b520 <nrf_cc3xx_platform_abort+0x1c>)
    b50a:	4b06      	ldr	r3, [pc, #24]	; (b524 <nrf_cc3xx_platform_abort+0x20>)
    b50c:	68ca      	ldr	r2, [r1, #12]
    b50e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b512:	4313      	orrs	r3, r2
    b514:	60cb      	str	r3, [r1, #12]
    b516:	f3bf 8f4f 	dsb	sy
    b51a:	bf00      	nop
    b51c:	e7fd      	b.n	b51a <nrf_cc3xx_platform_abort+0x16>
    b51e:	bf00      	nop
    b520:	e000ed00 	.word	0xe000ed00
    b524:	05fa0004 	.word	0x05fa0004

0000b528 <CC_PalAbort>:
    b528:	b410      	push	{r4}
    b52a:	4b09      	ldr	r3, [pc, #36]	; (b550 <CC_PalAbort+0x28>)
    b52c:	4909      	ldr	r1, [pc, #36]	; (b554 <CC_PalAbort+0x2c>)
    b52e:	4c0a      	ldr	r4, [pc, #40]	; (b558 <CC_PalAbort+0x30>)
    b530:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    b534:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    b538:	6849      	ldr	r1, [r1, #4]
    b53a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    b53e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    b542:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    b546:	2300      	movs	r3, #0
    b548:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    b54c:	bc10      	pop	{r4}
    b54e:	4708      	bx	r1
    b550:	5002b000 	.word	0x5002b000
    b554:	2000017c 	.word	0x2000017c
    b558:	5002a000 	.word	0x5002a000

0000b55c <nrf_cc3xx_platform_set_abort>:
    b55c:	e9d0 1200 	ldrd	r1, r2, [r0]
    b560:	4b01      	ldr	r3, [pc, #4]	; (b568 <nrf_cc3xx_platform_set_abort+0xc>)
    b562:	e9c3 1200 	strd	r1, r2, [r3]
    b566:	4770      	bx	lr
    b568:	2000017c 	.word	0x2000017c

0000b56c <mutex_free>:
    b56c:	b510      	push	{r4, lr}
    b56e:	4604      	mov	r4, r0
    b570:	b130      	cbz	r0, b580 <mutex_free+0x14>
    b572:	6863      	ldr	r3, [r4, #4]
    b574:	06db      	lsls	r3, r3, #27
    b576:	d502      	bpl.n	b57e <mutex_free+0x12>
    b578:	2300      	movs	r3, #0
    b57a:	6023      	str	r3, [r4, #0]
    b57c:	6063      	str	r3, [r4, #4]
    b57e:	bd10      	pop	{r4, pc}
    b580:	4b02      	ldr	r3, [pc, #8]	; (b58c <mutex_free+0x20>)
    b582:	4803      	ldr	r0, [pc, #12]	; (b590 <mutex_free+0x24>)
    b584:	685b      	ldr	r3, [r3, #4]
    b586:	4798      	blx	r3
    b588:	e7f3      	b.n	b572 <mutex_free+0x6>
    b58a:	bf00      	nop
    b58c:	2000017c 	.word	0x2000017c
    b590:	0000f2bc 	.word	0x0000f2bc

0000b594 <mutex_lock>:
    b594:	b1b0      	cbz	r0, b5c4 <mutex_lock+0x30>
    b596:	6843      	ldr	r3, [r0, #4]
    b598:	b193      	cbz	r3, b5c0 <mutex_lock+0x2c>
    b59a:	06db      	lsls	r3, r3, #27
    b59c:	d50e      	bpl.n	b5bc <mutex_lock+0x28>
    b59e:	2301      	movs	r3, #1
    b5a0:	e850 2f00 	ldrex	r2, [r0]
    b5a4:	4619      	mov	r1, r3
    b5a6:	e840 1c00 	strex	ip, r1, [r0]
    b5aa:	f09c 0f00 	teq	ip, #0
    b5ae:	d1f7      	bne.n	b5a0 <mutex_lock+0xc>
    b5b0:	2a01      	cmp	r2, #1
    b5b2:	d0f5      	beq.n	b5a0 <mutex_lock+0xc>
    b5b4:	f3bf 8f5f 	dmb	sy
    b5b8:	2000      	movs	r0, #0
    b5ba:	4770      	bx	lr
    b5bc:	4803      	ldr	r0, [pc, #12]	; (b5cc <mutex_lock+0x38>)
    b5be:	4770      	bx	lr
    b5c0:	4803      	ldr	r0, [pc, #12]	; (b5d0 <mutex_lock+0x3c>)
    b5c2:	4770      	bx	lr
    b5c4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b5c8:	4770      	bx	lr
    b5ca:	bf00      	nop
    b5cc:	ffff8fe9 	.word	0xffff8fe9
    b5d0:	ffff8fea 	.word	0xffff8fea

0000b5d4 <mutex_unlock>:
    b5d4:	b168      	cbz	r0, b5f2 <mutex_unlock+0x1e>
    b5d6:	6843      	ldr	r3, [r0, #4]
    b5d8:	b13b      	cbz	r3, b5ea <mutex_unlock+0x16>
    b5da:	06db      	lsls	r3, r3, #27
    b5dc:	d507      	bpl.n	b5ee <mutex_unlock+0x1a>
    b5de:	f3bf 8f5f 	dmb	sy
    b5e2:	2300      	movs	r3, #0
    b5e4:	6003      	str	r3, [r0, #0]
    b5e6:	4618      	mov	r0, r3
    b5e8:	4770      	bx	lr
    b5ea:	4803      	ldr	r0, [pc, #12]	; (b5f8 <mutex_unlock+0x24>)
    b5ec:	4770      	bx	lr
    b5ee:	4803      	ldr	r0, [pc, #12]	; (b5fc <mutex_unlock+0x28>)
    b5f0:	4770      	bx	lr
    b5f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b5f6:	4770      	bx	lr
    b5f8:	ffff8fea 	.word	0xffff8fea
    b5fc:	ffff8fe9 	.word	0xffff8fe9

0000b600 <mutex_init>:
    b600:	b510      	push	{r4, lr}
    b602:	4604      	mov	r4, r0
    b604:	b120      	cbz	r0, b610 <mutex_init+0x10>
    b606:	2200      	movs	r2, #0
    b608:	2311      	movs	r3, #17
    b60a:	6022      	str	r2, [r4, #0]
    b60c:	6063      	str	r3, [r4, #4]
    b60e:	bd10      	pop	{r4, pc}
    b610:	4801      	ldr	r0, [pc, #4]	; (b618 <mutex_init+0x18>)
    b612:	f7ff ff89 	bl	b528 <CC_PalAbort>
    b616:	e7f6      	b.n	b606 <mutex_init+0x6>
    b618:	0000f2e4 	.word	0x0000f2e4

0000b61c <nrf_cc3xx_platform_set_mutexes>:
    b61c:	b570      	push	{r4, r5, r6, lr}
    b61e:	e9d0 2300 	ldrd	r2, r3, [r0]
    b622:	4c13      	ldr	r4, [pc, #76]	; (b670 <nrf_cc3xx_platform_set_mutexes+0x54>)
    b624:	4d13      	ldr	r5, [pc, #76]	; (b674 <nrf_cc3xx_platform_set_mutexes+0x58>)
    b626:	6063      	str	r3, [r4, #4]
    b628:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    b62c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    b630:	6022      	str	r2, [r4, #0]
    b632:	4b11      	ldr	r3, [pc, #68]	; (b678 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b634:	6808      	ldr	r0, [r1, #0]
    b636:	6018      	str	r0, [r3, #0]
    b638:	6848      	ldr	r0, [r1, #4]
    b63a:	6058      	str	r0, [r3, #4]
    b63c:	6888      	ldr	r0, [r1, #8]
    b63e:	6098      	str	r0, [r3, #8]
    b640:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    b644:	60d8      	str	r0, [r3, #12]
    b646:	6119      	str	r1, [r3, #16]
    b648:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    b64c:	06db      	lsls	r3, r3, #27
    b64e:	d50d      	bpl.n	b66c <nrf_cc3xx_platform_set_mutexes+0x50>
    b650:	2300      	movs	r3, #0
    b652:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    b656:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    b65a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    b65e:	4790      	blx	r2
    b660:	6823      	ldr	r3, [r4, #0]
    b662:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    b666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b66a:	4718      	bx	r3
    b66c:	bd70      	pop	{r4, r5, r6, pc}
    b66e:	bf00      	nop
    b670:	2000018c 	.word	0x2000018c
    b674:	200011c0 	.word	0x200011c0
    b678:	2000019c 	.word	0x2000019c

0000b67c <CC_LibInitNoRng>:
    b67c:	b538      	push	{r3, r4, r5, lr}
    b67e:	f000 f82f 	bl	b6e0 <CC_HalInit>
    b682:	b120      	cbz	r0, b68e <CC_LibInitNoRng+0x12>
    b684:	2403      	movs	r4, #3
    b686:	f000 f863 	bl	b750 <CC_PalTerminate>
    b68a:	4620      	mov	r0, r4
    b68c:	bd38      	pop	{r3, r4, r5, pc}
    b68e:	f000 f831 	bl	b6f4 <CC_PalInit>
    b692:	b998      	cbnz	r0, b6bc <CC_LibInitNoRng+0x40>
    b694:	f000 f8ac 	bl	b7f0 <CC_PalPowerSaveModeSelect>
    b698:	b998      	cbnz	r0, b6c2 <CC_LibInitNoRng+0x46>
    b69a:	4d0f      	ldr	r5, [pc, #60]	; (b6d8 <CC_LibInitNoRng+0x5c>)
    b69c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    b6a0:	0e1b      	lsrs	r3, r3, #24
    b6a2:	2bf0      	cmp	r3, #240	; 0xf0
    b6a4:	d108      	bne.n	b6b8 <CC_LibInitNoRng+0x3c>
    b6a6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    b6aa:	4b0c      	ldr	r3, [pc, #48]	; (b6dc <CC_LibInitNoRng+0x60>)
    b6ac:	429a      	cmp	r2, r3
    b6ae:	d00a      	beq.n	b6c6 <CC_LibInitNoRng+0x4a>
    b6b0:	2407      	movs	r4, #7
    b6b2:	f000 f817 	bl	b6e4 <CC_HalTerminate>
    b6b6:	e7e6      	b.n	b686 <CC_LibInitNoRng+0xa>
    b6b8:	2406      	movs	r4, #6
    b6ba:	e7fa      	b.n	b6b2 <CC_LibInitNoRng+0x36>
    b6bc:	2404      	movs	r4, #4
    b6be:	4620      	mov	r0, r4
    b6c0:	bd38      	pop	{r3, r4, r5, pc}
    b6c2:	2400      	movs	r4, #0
    b6c4:	e7f5      	b.n	b6b2 <CC_LibInitNoRng+0x36>
    b6c6:	2001      	movs	r0, #1
    b6c8:	f000 f892 	bl	b7f0 <CC_PalPowerSaveModeSelect>
    b6cc:	4604      	mov	r4, r0
    b6ce:	2800      	cmp	r0, #0
    b6d0:	d1f7      	bne.n	b6c2 <CC_LibInitNoRng+0x46>
    b6d2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    b6d6:	e7d8      	b.n	b68a <CC_LibInitNoRng+0xe>
    b6d8:	5002b000 	.word	0x5002b000
    b6dc:	20e00000 	.word	0x20e00000

0000b6e0 <CC_HalInit>:
    b6e0:	2000      	movs	r0, #0
    b6e2:	4770      	bx	lr

0000b6e4 <CC_HalTerminate>:
    b6e4:	2000      	movs	r0, #0
    b6e6:	4770      	bx	lr

0000b6e8 <CC_HalMaskInterrupt>:
    b6e8:	4b01      	ldr	r3, [pc, #4]	; (b6f0 <CC_HalMaskInterrupt+0x8>)
    b6ea:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    b6ee:	4770      	bx	lr
    b6f0:	5002b000 	.word	0x5002b000

0000b6f4 <CC_PalInit>:
    b6f4:	b510      	push	{r4, lr}
    b6f6:	4811      	ldr	r0, [pc, #68]	; (b73c <CC_PalInit+0x48>)
    b6f8:	f000 f848 	bl	b78c <CC_PalMutexCreate>
    b6fc:	b100      	cbz	r0, b700 <CC_PalInit+0xc>
    b6fe:	bd10      	pop	{r4, pc}
    b700:	480f      	ldr	r0, [pc, #60]	; (b740 <CC_PalInit+0x4c>)
    b702:	f000 f843 	bl	b78c <CC_PalMutexCreate>
    b706:	2800      	cmp	r0, #0
    b708:	d1f9      	bne.n	b6fe <CC_PalInit+0xa>
    b70a:	4c0e      	ldr	r4, [pc, #56]	; (b744 <CC_PalInit+0x50>)
    b70c:	4620      	mov	r0, r4
    b70e:	f000 f83d 	bl	b78c <CC_PalMutexCreate>
    b712:	2800      	cmp	r0, #0
    b714:	d1f3      	bne.n	b6fe <CC_PalInit+0xa>
    b716:	4b0c      	ldr	r3, [pc, #48]	; (b748 <CC_PalInit+0x54>)
    b718:	480c      	ldr	r0, [pc, #48]	; (b74c <CC_PalInit+0x58>)
    b71a:	601c      	str	r4, [r3, #0]
    b71c:	f000 f836 	bl	b78c <CC_PalMutexCreate>
    b720:	4601      	mov	r1, r0
    b722:	2800      	cmp	r0, #0
    b724:	d1eb      	bne.n	b6fe <CC_PalInit+0xa>
    b726:	f000 f82d 	bl	b784 <CC_PalDmaInit>
    b72a:	4604      	mov	r4, r0
    b72c:	b108      	cbz	r0, b732 <CC_PalInit+0x3e>
    b72e:	4620      	mov	r0, r4
    b730:	bd10      	pop	{r4, pc}
    b732:	f000 f83f 	bl	b7b4 <CC_PalPowerSaveModeInit>
    b736:	4620      	mov	r0, r4
    b738:	e7fa      	b.n	b730 <CC_PalInit+0x3c>
    b73a:	bf00      	nop
    b73c:	200001d4 	.word	0x200001d4
    b740:	200001c8 	.word	0x200001c8
    b744:	200001d0 	.word	0x200001d0
    b748:	200001d8 	.word	0x200001d8
    b74c:	200001cc 	.word	0x200001cc

0000b750 <CC_PalTerminate>:
    b750:	b508      	push	{r3, lr}
    b752:	4808      	ldr	r0, [pc, #32]	; (b774 <CC_PalTerminate+0x24>)
    b754:	f000 f824 	bl	b7a0 <CC_PalMutexDestroy>
    b758:	4807      	ldr	r0, [pc, #28]	; (b778 <CC_PalTerminate+0x28>)
    b75a:	f000 f821 	bl	b7a0 <CC_PalMutexDestroy>
    b75e:	4807      	ldr	r0, [pc, #28]	; (b77c <CC_PalTerminate+0x2c>)
    b760:	f000 f81e 	bl	b7a0 <CC_PalMutexDestroy>
    b764:	4806      	ldr	r0, [pc, #24]	; (b780 <CC_PalTerminate+0x30>)
    b766:	f000 f81b 	bl	b7a0 <CC_PalMutexDestroy>
    b76a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b76e:	f000 b80b 	b.w	b788 <CC_PalDmaTerminate>
    b772:	bf00      	nop
    b774:	200001d4 	.word	0x200001d4
    b778:	200001c8 	.word	0x200001c8
    b77c:	200001d0 	.word	0x200001d0
    b780:	200001cc 	.word	0x200001cc

0000b784 <CC_PalDmaInit>:
    b784:	2000      	movs	r0, #0
    b786:	4770      	bx	lr

0000b788 <CC_PalDmaTerminate>:
    b788:	4770      	bx	lr
    b78a:	bf00      	nop

0000b78c <CC_PalMutexCreate>:
    b78c:	b508      	push	{r3, lr}
    b78e:	4b03      	ldr	r3, [pc, #12]	; (b79c <CC_PalMutexCreate+0x10>)
    b790:	6802      	ldr	r2, [r0, #0]
    b792:	681b      	ldr	r3, [r3, #0]
    b794:	6810      	ldr	r0, [r2, #0]
    b796:	4798      	blx	r3
    b798:	2000      	movs	r0, #0
    b79a:	bd08      	pop	{r3, pc}
    b79c:	2000018c 	.word	0x2000018c

0000b7a0 <CC_PalMutexDestroy>:
    b7a0:	b508      	push	{r3, lr}
    b7a2:	4b03      	ldr	r3, [pc, #12]	; (b7b0 <CC_PalMutexDestroy+0x10>)
    b7a4:	6802      	ldr	r2, [r0, #0]
    b7a6:	685b      	ldr	r3, [r3, #4]
    b7a8:	6810      	ldr	r0, [r2, #0]
    b7aa:	4798      	blx	r3
    b7ac:	2000      	movs	r0, #0
    b7ae:	bd08      	pop	{r3, pc}
    b7b0:	2000018c 	.word	0x2000018c

0000b7b4 <CC_PalPowerSaveModeInit>:
    b7b4:	b570      	push	{r4, r5, r6, lr}
    b7b6:	4c09      	ldr	r4, [pc, #36]	; (b7dc <CC_PalPowerSaveModeInit+0x28>)
    b7b8:	4d09      	ldr	r5, [pc, #36]	; (b7e0 <CC_PalPowerSaveModeInit+0x2c>)
    b7ba:	6920      	ldr	r0, [r4, #16]
    b7bc:	68ab      	ldr	r3, [r5, #8]
    b7be:	4798      	blx	r3
    b7c0:	b118      	cbz	r0, b7ca <CC_PalPowerSaveModeInit+0x16>
    b7c2:	4b08      	ldr	r3, [pc, #32]	; (b7e4 <CC_PalPowerSaveModeInit+0x30>)
    b7c4:	4808      	ldr	r0, [pc, #32]	; (b7e8 <CC_PalPowerSaveModeInit+0x34>)
    b7c6:	685b      	ldr	r3, [r3, #4]
    b7c8:	4798      	blx	r3
    b7ca:	4a08      	ldr	r2, [pc, #32]	; (b7ec <CC_PalPowerSaveModeInit+0x38>)
    b7cc:	68eb      	ldr	r3, [r5, #12]
    b7ce:	6920      	ldr	r0, [r4, #16]
    b7d0:	2100      	movs	r1, #0
    b7d2:	6011      	str	r1, [r2, #0]
    b7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b7d8:	4718      	bx	r3
    b7da:	bf00      	nop
    b7dc:	2000019c 	.word	0x2000019c
    b7e0:	2000018c 	.word	0x2000018c
    b7e4:	2000017c 	.word	0x2000017c
    b7e8:	0000f308 	.word	0x0000f308
    b7ec:	200011bc 	.word	0x200011bc

0000b7f0 <CC_PalPowerSaveModeSelect>:
    b7f0:	b570      	push	{r4, r5, r6, lr}
    b7f2:	4d1b      	ldr	r5, [pc, #108]	; (b860 <CC_PalPowerSaveModeSelect+0x70>)
    b7f4:	4e1b      	ldr	r6, [pc, #108]	; (b864 <CC_PalPowerSaveModeSelect+0x74>)
    b7f6:	4604      	mov	r4, r0
    b7f8:	68b2      	ldr	r2, [r6, #8]
    b7fa:	6928      	ldr	r0, [r5, #16]
    b7fc:	4790      	blx	r2
    b7fe:	b9f8      	cbnz	r0, b840 <CC_PalPowerSaveModeSelect+0x50>
    b800:	b15c      	cbz	r4, b81a <CC_PalPowerSaveModeSelect+0x2a>
    b802:	4c19      	ldr	r4, [pc, #100]	; (b868 <CC_PalPowerSaveModeSelect+0x78>)
    b804:	6823      	ldr	r3, [r4, #0]
    b806:	b1b3      	cbz	r3, b836 <CC_PalPowerSaveModeSelect+0x46>
    b808:	2b01      	cmp	r3, #1
    b80a:	d01b      	beq.n	b844 <CC_PalPowerSaveModeSelect+0x54>
    b80c:	3b01      	subs	r3, #1
    b80e:	6023      	str	r3, [r4, #0]
    b810:	6928      	ldr	r0, [r5, #16]
    b812:	68f3      	ldr	r3, [r6, #12]
    b814:	4798      	blx	r3
    b816:	2000      	movs	r0, #0
    b818:	bd70      	pop	{r4, r5, r6, pc}
    b81a:	4c13      	ldr	r4, [pc, #76]	; (b868 <CC_PalPowerSaveModeSelect+0x78>)
    b81c:	6821      	ldr	r1, [r4, #0]
    b81e:	b941      	cbnz	r1, b832 <CC_PalPowerSaveModeSelect+0x42>
    b820:	4b12      	ldr	r3, [pc, #72]	; (b86c <CC_PalPowerSaveModeSelect+0x7c>)
    b822:	2201      	movs	r2, #1
    b824:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    b828:	4a11      	ldr	r2, [pc, #68]	; (b870 <CC_PalPowerSaveModeSelect+0x80>)
    b82a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    b82e:	2b00      	cmp	r3, #0
    b830:	d1fb      	bne.n	b82a <CC_PalPowerSaveModeSelect+0x3a>
    b832:	3101      	adds	r1, #1
    b834:	6021      	str	r1, [r4, #0]
    b836:	68f3      	ldr	r3, [r6, #12]
    b838:	6928      	ldr	r0, [r5, #16]
    b83a:	4798      	blx	r3
    b83c:	2000      	movs	r0, #0
    b83e:	bd70      	pop	{r4, r5, r6, pc}
    b840:	480c      	ldr	r0, [pc, #48]	; (b874 <CC_PalPowerSaveModeSelect+0x84>)
    b842:	bd70      	pop	{r4, r5, r6, pc}
    b844:	4a0a      	ldr	r2, [pc, #40]	; (b870 <CC_PalPowerSaveModeSelect+0x80>)
    b846:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    b84a:	2b00      	cmp	r3, #0
    b84c:	d1fb      	bne.n	b846 <CC_PalPowerSaveModeSelect+0x56>
    b84e:	4a07      	ldr	r2, [pc, #28]	; (b86c <CC_PalPowerSaveModeSelect+0x7c>)
    b850:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    b854:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b858:	f7ff ff46 	bl	b6e8 <CC_HalMaskInterrupt>
    b85c:	6823      	ldr	r3, [r4, #0]
    b85e:	e7d5      	b.n	b80c <CC_PalPowerSaveModeSelect+0x1c>
    b860:	2000019c 	.word	0x2000019c
    b864:	2000018c 	.word	0x2000018c
    b868:	200011bc 	.word	0x200011bc
    b86c:	5002a000 	.word	0x5002a000
    b870:	5002b000 	.word	0x5002b000
    b874:	ffff8fe9 	.word	0xffff8fe9

0000b878 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b878:	4770      	bx	lr

0000b87a <gpio_pin_configure_dt>:
{
    b87a:	b508      	push	{r3, lr}
    b87c:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    b87e:	6800      	ldr	r0, [r0, #0]
    b880:	f893 c004 	ldrb.w	ip, [r3, #4]
				  spec->dt_flags | extra_flags);
    b884:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b886:	430a      	orrs	r2, r1
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    b888:	4661      	mov	r1, ip
    b88a:	f7f4 ffb9 	bl	800 <z_impl_gpio_pin_configure>
}
    b88e:	bd08      	pop	{r3, pc}

0000b890 <precedentsAverage>:

int precedentsAverage(uint16_t *precedents, uint16_t current_read, uint16_t precedents_size)
{
    int sum = 0;
    for (uint16_t i = 0; i < precedents_size; i++)
    b890:	2300      	movs	r3, #0
    int sum = 0;
    b892:	469c      	mov	ip, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    b894:	4293      	cmp	r3, r2
    b896:	d20e      	bcs.n	b8b6 <precedentsAverage+0x26>
{
    b898:	b500      	push	{lr}
        sum += precedents[i];
    b89a:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
    b89e:	44f4      	add	ip, lr
    for (uint16_t i = 0; i < precedents_size; i++)
    b8a0:	3301      	adds	r3, #1
    b8a2:	b29b      	uxth	r3, r3
    b8a4:	4293      	cmp	r3, r2
    b8a6:	d3f8      	bcc.n	b89a <precedentsAverage+0xa>
    return (sum + current_read) / (precedents_size+1);
    b8a8:	eb01 000c 	add.w	r0, r1, ip
    b8ac:	3201      	adds	r2, #1
}
    b8ae:	fb90 f0f2 	sdiv	r0, r0, r2
    b8b2:	f85d fb04 	ldr.w	pc, [sp], #4
    return (sum + current_read) / (precedents_size+1);
    b8b6:	18c8      	adds	r0, r1, r3
    b8b8:	3201      	adds	r2, #1
}
    b8ba:	fb90 f0f2 	sdiv	r0, r0, r2
    b8be:	4770      	bx	lr

0000b8c0 <cbprintf_via_va_list>:
{
    b8c0:	b510      	push	{r4, lr}
    b8c2:	460c      	mov	r4, r1
    b8c4:	4611      	mov	r1, r2
    b8c6:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    b8c8:	9b02      	ldr	r3, [sp, #8]
    b8ca:	47a0      	blx	r4
}
    b8cc:	bd10      	pop	{r4, pc}

0000b8ce <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    b8ce:	b353      	cbz	r3, b926 <cbpprintf_external+0x58>
{
    b8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8d4:	b082      	sub	sp, #8
    b8d6:	4607      	mov	r7, r0
    b8d8:	4688      	mov	r8, r1
    b8da:	4691      	mov	r9, r2
    b8dc:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    b8de:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    b8e0:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    b8e2:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    b8e4:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    b8e6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    b8ea:	441c      	add	r4, r3
    b8ec:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    b8ee:	f04f 0a00 	mov.w	sl, #0
    b8f2:	e00a      	b.n	b90a <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    b8f4:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    b8f8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    b8fc:	4620      	mov	r0, r4
    b8fe:	f000 fb31 	bl	bf64 <strlen>
    b902:	3001      	adds	r0, #1
    b904:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    b906:	f10a 0a01 	add.w	sl, sl, #1
    b90a:	45b2      	cmp	sl, r6
    b90c:	d3f2      	bcc.n	b8f4 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    b90e:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    b912:	9300      	str	r3, [sp, #0]
    b914:	686b      	ldr	r3, [r5, #4]
    b916:	464a      	mov	r2, r9
    b918:	4641      	mov	r1, r8
    b91a:	4638      	mov	r0, r7
    b91c:	f7ff ffd0 	bl	b8c0 <cbprintf_via_va_list>
}
    b920:	b002      	add	sp, #8
    b922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    b926:	f06f 0015 	mvn.w	r0, #21
}
    b92a:	4770      	bx	lr

0000b92c <sys_notify_validate>:
	if (notify == NULL) {
    b92c:	4602      	mov	r2, r0
    b92e:	b158      	cbz	r0, b948 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b930:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b932:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    b936:	2b01      	cmp	r3, #1
    b938:	d003      	beq.n	b942 <sys_notify_validate+0x16>
    b93a:	2b03      	cmp	r3, #3
    b93c:	d107      	bne.n	b94e <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    b93e:	6803      	ldr	r3, [r0, #0]
    b940:	b143      	cbz	r3, b954 <sys_notify_validate+0x28>
		notify->result = 0;
    b942:	2000      	movs	r0, #0
    b944:	6090      	str	r0, [r2, #8]
    b946:	4770      	bx	lr
		return -EINVAL;
    b948:	f06f 0015 	mvn.w	r0, #21
    b94c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    b94e:	f06f 0015 	mvn.w	r0, #21
    b952:	4770      	bx	lr
			rv = -EINVAL;
    b954:	f06f 0015 	mvn.w	r0, #21
}
    b958:	4770      	bx	lr

0000b95a <arch_printk_char_out>:
}
    b95a:	2000      	movs	r0, #0
    b95c:	4770      	bx	lr

0000b95e <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    b95e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    b960:	f000 f99d 	bl	bc9e <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    b964:	bd08      	pop	{r3, pc}

0000b966 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    b966:	b40f      	push	{r0, r1, r2, r3}
    b968:	b500      	push	{lr}
    b96a:	b083      	sub	sp, #12
    b96c:	a904      	add	r1, sp, #16
    b96e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    b972:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    b974:	f7ff fff3 	bl	b95e <vprintk>

	va_end(ap);
}
    b978:	b003      	add	sp, #12
    b97a:	f85d eb04 	ldr.w	lr, [sp], #4
    b97e:	b004      	add	sp, #16
    b980:	4770      	bx	lr

0000b982 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    b982:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b986:	8b81      	ldrh	r1, [r0, #28]
    b988:	f021 0107 	bic.w	r1, r1, #7
    b98c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    b98e:	8381      	strh	r1, [r0, #28]
}
    b990:	4770      	bx	lr

0000b992 <notify_monitors>:
{
    b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b996:	4606      	mov	r6, r0
    b998:	460f      	mov	r7, r1
    b99a:	4690      	mov	r8, r2
	return list->head;
    b99c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b99e:	b119      	cbz	r1, b9a8 <notify_monitors+0x16>
    b9a0:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b9a2:	b131      	cbz	r1, b9b2 <notify_monitors+0x20>
	return node->next;
    b9a4:	680c      	ldr	r4, [r1, #0]
    b9a6:	e004      	b.n	b9b2 <notify_monitors+0x20>
    b9a8:	460c      	mov	r4, r1
    b9aa:	e002      	b.n	b9b2 <notify_monitors+0x20>
    b9ac:	4623      	mov	r3, r4
    b9ae:	4621      	mov	r1, r4
    b9b0:	461c      	mov	r4, r3
    b9b2:	b159      	cbz	r1, b9cc <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    b9b4:	684d      	ldr	r5, [r1, #4]
    b9b6:	4643      	mov	r3, r8
    b9b8:	463a      	mov	r2, r7
    b9ba:	4630      	mov	r0, r6
    b9bc:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b9be:	2c00      	cmp	r4, #0
    b9c0:	d0f4      	beq.n	b9ac <notify_monitors+0x1a>
    b9c2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    b9c4:	2c00      	cmp	r4, #0
    b9c6:	d0f2      	beq.n	b9ae <notify_monitors+0x1c>
	return node->next;
    b9c8:	6823      	ldr	r3, [r4, #0]
    b9ca:	e7f0      	b.n	b9ae <notify_monitors+0x1c>
}
    b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b9d0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b9d0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    b9d2:	f013 0307 	ands.w	r3, r3, #7
    b9d6:	d103      	bne.n	b9e0 <process_recheck+0x10>
	return list->head;
    b9d8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    b9da:	b10a      	cbz	r2, b9e0 <process_recheck+0x10>
		evt = EVT_START;
    b9dc:	2003      	movs	r0, #3
    b9de:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b9e0:	2b02      	cmp	r3, #2
    b9e2:	d003      	beq.n	b9ec <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    b9e4:	2b01      	cmp	r3, #1
    b9e6:	d006      	beq.n	b9f6 <process_recheck+0x26>
	int evt = EVT_NOP;
    b9e8:	2000      	movs	r0, #0
    b9ea:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    b9ec:	8bc2      	ldrh	r2, [r0, #30]
    b9ee:	2a00      	cmp	r2, #0
    b9f0:	d1f8      	bne.n	b9e4 <process_recheck+0x14>
		evt = EVT_STOP;
    b9f2:	2004      	movs	r0, #4
    b9f4:	4770      	bx	lr
    b9f6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    b9f8:	b10b      	cbz	r3, b9fe <process_recheck+0x2e>
		evt = EVT_RESET;
    b9fa:	2005      	movs	r0, #5
}
    b9fc:	4770      	bx	lr
	int evt = EVT_NOP;
    b9fe:	2000      	movs	r0, #0
    ba00:	4770      	bx	lr

0000ba02 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    ba02:	b158      	cbz	r0, ba1c <validate_args+0x1a>
{
    ba04:	b510      	push	{r4, lr}
    ba06:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    ba08:	b159      	cbz	r1, ba22 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    ba0a:	1d08      	adds	r0, r1, #4
    ba0c:	f7ff ff8e 	bl	b92c <sys_notify_validate>
	if ((rv == 0)
    ba10:	b918      	cbnz	r0, ba1a <validate_args+0x18>
	    && ((cli->notify.flags
    ba12:	68a3      	ldr	r3, [r4, #8]
    ba14:	f033 0303 	bics.w	r3, r3, #3
    ba18:	d106      	bne.n	ba28 <validate_args+0x26>
}
    ba1a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    ba1c:	f06f 0015 	mvn.w	r0, #21
}
    ba20:	4770      	bx	lr
		return -EINVAL;
    ba22:	f06f 0015 	mvn.w	r0, #21
    ba26:	e7f8      	b.n	ba1a <validate_args+0x18>
		rv = -EINVAL;
    ba28:	f06f 0015 	mvn.w	r0, #21
    ba2c:	e7f5      	b.n	ba1a <validate_args+0x18>

0000ba2e <notify_one>:
{
    ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba32:	4607      	mov	r7, r0
    ba34:	460c      	mov	r4, r1
    ba36:	4616      	mov	r6, r2
    ba38:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ba3a:	4619      	mov	r1, r3
    ba3c:	1d20      	adds	r0, r4, #4
    ba3e:	f7f6 fa13 	bl	1e68 <sys_notify_finalize>
	if (cb) {
    ba42:	b128      	cbz	r0, ba50 <notify_one+0x22>
    ba44:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    ba46:	462b      	mov	r3, r5
    ba48:	4632      	mov	r2, r6
    ba4a:	4621      	mov	r1, r4
    ba4c:	4638      	mov	r0, r7
    ba4e:	47c0      	blx	r8
}
    ba50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ba54 <notify_all>:
{
    ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba58:	4680      	mov	r8, r0
    ba5a:	460c      	mov	r4, r1
    ba5c:	4617      	mov	r7, r2
    ba5e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    ba60:	e004      	b.n	ba6c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    ba62:	4633      	mov	r3, r6
    ba64:	463a      	mov	r2, r7
    ba66:	4640      	mov	r0, r8
    ba68:	f7ff ffe1 	bl	ba2e <notify_one>
    ba6c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    ba6e:	b131      	cbz	r1, ba7e <notify_all+0x2a>
	return node->next;
    ba70:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    ba72:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ba74:	6863      	ldr	r3, [r4, #4]
    ba76:	428b      	cmp	r3, r1
    ba78:	d1f3      	bne.n	ba62 <notify_all+0xe>
	list->tail = node;
    ba7a:	6065      	str	r5, [r4, #4]
}
    ba7c:	e7f1      	b.n	ba62 <notify_all+0xe>
}
    ba7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ba82 <onoff_manager_init>:
	if ((mgr == NULL)
    ba82:	b170      	cbz	r0, baa2 <onoff_manager_init+0x20>
{
    ba84:	b538      	push	{r3, r4, r5, lr}
    ba86:	460c      	mov	r4, r1
    ba88:	4605      	mov	r5, r0
	    || (transitions == NULL)
    ba8a:	b169      	cbz	r1, baa8 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ba8c:	680b      	ldr	r3, [r1, #0]
    ba8e:	b173      	cbz	r3, baae <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    ba90:	684b      	ldr	r3, [r1, #4]
    ba92:	b17b      	cbz	r3, bab4 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ba94:	2220      	movs	r2, #32
    ba96:	2100      	movs	r1, #0
    ba98:	f000 fab1 	bl	bffe <memset>
    ba9c:	612c      	str	r4, [r5, #16]
	return 0;
    ba9e:	2000      	movs	r0, #0
}
    baa0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    baa2:	f06f 0015 	mvn.w	r0, #21
}
    baa6:	4770      	bx	lr
		return -EINVAL;
    baa8:	f06f 0015 	mvn.w	r0, #21
    baac:	e7f8      	b.n	baa0 <onoff_manager_init+0x1e>
    baae:	f06f 0015 	mvn.w	r0, #21
    bab2:	e7f5      	b.n	baa0 <onoff_manager_init+0x1e>
    bab4:	f06f 0015 	mvn.w	r0, #21
    bab8:	e7f2      	b.n	baa0 <onoff_manager_init+0x1e>

0000baba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    baba:	b508      	push	{r3, lr}
    babc:	4604      	mov	r4, r0
    babe:	4608      	mov	r0, r1
    bac0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bac2:	461a      	mov	r2, r3
    bac4:	47a0      	blx	r4
	return z_impl_z_current_get();
    bac6:	f7fe ff7f 	bl	a9c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    baca:	f7f8 ffd1 	bl	4a70 <z_impl_k_thread_abort>

0000bace <free_list_add_bidx>:
{
    bace:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    bad0:	1d13      	adds	r3, r2, #4
    bad2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bad6:	b97c      	cbnz	r4, baf8 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    bad8:	2301      	movs	r3, #1
    bada:	fa03 f402 	lsl.w	r4, r3, r2
    bade:	68c3      	ldr	r3, [r0, #12]
    bae0:	4323      	orrs	r3, r4
    bae2:	60c3      	str	r3, [r0, #12]
		b->next = c;
    bae4:	3204      	adds	r2, #4
    bae6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    baea:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    baec:	1d1a      	adds	r2, r3, #4
    baee:	b289      	uxth	r1, r1
    baf0:	5281      	strh	r1, [r0, r2]
    baf2:	3306      	adds	r3, #6
    baf4:	52c1      	strh	r1, [r0, r3]
}
    baf6:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    baf8:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    bafa:	3204      	adds	r2, #4
    bafc:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    bafe:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    bb02:	f10c 0e04 	add.w	lr, ip, #4
    bb06:	f820 300e 	strh.w	r3, [r0, lr]
    bb0a:	f10c 0c06 	add.w	ip, ip, #6
    bb0e:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    bb12:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    bb14:	3306      	adds	r3, #6
    bb16:	b289      	uxth	r1, r1
    bb18:	52c1      	strh	r1, [r0, r3]
    bb1a:	5281      	strh	r1, [r0, r2]
    bb1c:	e7eb      	b.n	baf6 <free_list_add_bidx+0x28>

0000bb1e <free_list_add>:
{
    bb1e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    bb20:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    bb24:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bb26:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    bb28:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    bb2c:	f1c2 021f 	rsb	r2, r2, #31
    bb30:	f7ff ffcd 	bl	bace <free_list_add_bidx>
}
    bb34:	bd08      	pop	{r3, pc}

0000bb36 <extract_decimal>:
{
    bb36:	4684      	mov	ip, r0
	const char *sp = *str;
    bb38:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    bb3a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    bb3c:	e005      	b.n	bb4a <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    bb3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    bb42:	3201      	adds	r2, #1
    bb44:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    bb48:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    bb4a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    bb4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    bb50:	2909      	cmp	r1, #9
    bb52:	d9f4      	bls.n	bb3e <extract_decimal+0x8>
	*str = sp;
    bb54:	f8cc 2000 	str.w	r2, [ip]
}
    bb58:	4770      	bx	lr

0000bb5a <encode_uint>:
{
    bb5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb5e:	b083      	sub	sp, #12
    bb60:	4604      	mov	r4, r0
    bb62:	460d      	mov	r5, r1
    bb64:	9201      	str	r2, [sp, #4]
    bb66:	469a      	mov	sl, r3
    bb68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    bb6a:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    bb6c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    bb70:	2b6f      	cmp	r3, #111	; 0x6f
    bb72:	d00f      	beq.n	bb94 <encode_uint+0x3a>
    bb74:	d906      	bls.n	bb84 <encode_uint+0x2a>
    bb76:	2b70      	cmp	r3, #112	; 0x70
    bb78:	d00f      	beq.n	bb9a <encode_uint+0x40>
    bb7a:	2b78      	cmp	r3, #120	; 0x78
    bb7c:	d110      	bne.n	bba0 <encode_uint+0x46>
		return 16;
    bb7e:	f04f 0910 	mov.w	r9, #16
    bb82:	e026      	b.n	bbd2 <encode_uint+0x78>
	switch (specifier) {
    bb84:	2b58      	cmp	r3, #88	; 0x58
    bb86:	d002      	beq.n	bb8e <encode_uint+0x34>
    bb88:	f04f 090a 	mov.w	r9, #10
    bb8c:	e021      	b.n	bbd2 <encode_uint+0x78>
		return 16;
    bb8e:	f04f 0910 	mov.w	r9, #16
    bb92:	e01e      	b.n	bbd2 <encode_uint+0x78>
		return 8;
    bb94:	f04f 0908 	mov.w	r9, #8
    bb98:	e01b      	b.n	bbd2 <encode_uint+0x78>
		return 16;
    bb9a:	f04f 0910 	mov.w	r9, #16
    bb9e:	e018      	b.n	bbd2 <encode_uint+0x78>
	switch (specifier) {
    bba0:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    bba4:	e015      	b.n	bbd2 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bba6:	f1bb 0f19 	cmp.w	fp, #25
    bbaa:	d821      	bhi.n	bbf0 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    bbac:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bbae:	3237      	adds	r2, #55	; 0x37
    bbb0:	b2d2      	uxtb	r2, r2
    bbb2:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    bbb6:	463a      	mov	r2, r7
    bbb8:	4643      	mov	r3, r8
    bbba:	4620      	mov	r0, r4
    bbbc:	4629      	mov	r1, r5
    bbbe:	f7f4 fc81 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    bbc2:	42bc      	cmp	r4, r7
    bbc4:	f175 0300 	sbcs.w	r3, r5, #0
    bbc8:	d316      	bcc.n	bbf8 <encode_uint+0x9e>
    bbca:	4556      	cmp	r6, sl
    bbcc:	d914      	bls.n	bbf8 <encode_uint+0x9e>
		value /= radix;
    bbce:	4604      	mov	r4, r0
    bbd0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    bbd2:	f04f 0800 	mov.w	r8, #0
    bbd6:	464f      	mov	r7, r9
    bbd8:	464a      	mov	r2, r9
    bbda:	4643      	mov	r3, r8
    bbdc:	4620      	mov	r0, r4
    bbde:	4629      	mov	r1, r5
    bbe0:	f7f4 fc70 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bbe4:	2a09      	cmp	r2, #9
    bbe6:	d8de      	bhi.n	bba6 <encode_uint+0x4c>
    bbe8:	b2d2      	uxtb	r2, r2
    bbea:	3230      	adds	r2, #48	; 0x30
    bbec:	b2d2      	uxtb	r2, r2
    bbee:	e7e0      	b.n	bbb2 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    bbf0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bbf2:	3257      	adds	r2, #87	; 0x57
    bbf4:	b2d2      	uxtb	r2, r2
    bbf6:	e7dc      	b.n	bbb2 <encode_uint+0x58>
	if (conv->flag_hash) {
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	f013 0f20 	tst.w	r3, #32
    bc00:	d005      	beq.n	bc0e <encode_uint+0xb4>
		if (radix == 8) {
    bc02:	f1b9 0f08 	cmp.w	r9, #8
    bc06:	d006      	beq.n	bc16 <encode_uint+0xbc>
		} else if (radix == 16) {
    bc08:	f1b9 0f10 	cmp.w	r9, #16
    bc0c:	d009      	beq.n	bc22 <encode_uint+0xc8>
}
    bc0e:	4630      	mov	r0, r6
    bc10:	b003      	add	sp, #12
    bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    bc16:	9a01      	ldr	r2, [sp, #4]
    bc18:	7893      	ldrb	r3, [r2, #2]
    bc1a:	f043 0308 	orr.w	r3, r3, #8
    bc1e:	7093      	strb	r3, [r2, #2]
    bc20:	e7f5      	b.n	bc0e <encode_uint+0xb4>
			conv->altform_0c = true;
    bc22:	9a01      	ldr	r2, [sp, #4]
    bc24:	7893      	ldrb	r3, [r2, #2]
    bc26:	f043 0310 	orr.w	r3, r3, #16
    bc2a:	7093      	strb	r3, [r2, #2]
    bc2c:	e7ef      	b.n	bc0e <encode_uint+0xb4>

0000bc2e <outs>:
{
    bc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc32:	4607      	mov	r7, r0
    bc34:	460e      	mov	r6, r1
    bc36:	4614      	mov	r4, r2
    bc38:	4698      	mov	r8, r3
	size_t count = 0;
    bc3a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    bc3c:	e006      	b.n	bc4c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    bc3e:	4631      	mov	r1, r6
    bc40:	f814 0b01 	ldrb.w	r0, [r4], #1
    bc44:	47b8      	blx	r7
		if (rc < 0) {
    bc46:	2800      	cmp	r0, #0
    bc48:	db09      	blt.n	bc5e <outs+0x30>
		++count;
    bc4a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    bc4c:	4544      	cmp	r4, r8
    bc4e:	d3f6      	bcc.n	bc3e <outs+0x10>
    bc50:	f1b8 0f00 	cmp.w	r8, #0
    bc54:	d102      	bne.n	bc5c <outs+0x2e>
    bc56:	7823      	ldrb	r3, [r4, #0]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d1f0      	bne.n	bc3e <outs+0x10>
	return (int)count;
    bc5c:	4628      	mov	r0, r5
}
    bc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bc62 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    bc62:	4040      	eors	r0, r0
    bc64:	f380 8811 	msr	BASEPRI, r0
    bc68:	f04f 0004 	mov.w	r0, #4
    bc6c:	df02      	svc	2
}
    bc6e:	4770      	bx	lr

0000bc70 <assert_print>:

void assert_print(const char *fmt, ...)
{
    bc70:	b40f      	push	{r0, r1, r2, r3}
    bc72:	b500      	push	{lr}
    bc74:	b083      	sub	sp, #12
    bc76:	a904      	add	r1, sp, #16
    bc78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    bc7c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    bc7e:	f7ff fe6e 	bl	b95e <vprintk>

	va_end(ap);
}
    bc82:	b003      	add	sp, #12
    bc84:	f85d eb04 	ldr.w	lr, [sp], #4
    bc88:	b004      	add	sp, #16
    bc8a:	4770      	bx	lr

0000bc8c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    bc8c:	4770      	bx	lr

0000bc8e <dummy_timestamp>:
}
    bc8e:	2000      	movs	r0, #0
    bc90:	4770      	bx	lr

0000bc92 <msg_filter_check>:
}
    bc92:	2001      	movs	r0, #1
    bc94:	4770      	bx	lr

0000bc96 <default_get_timestamp>:
{
    bc96:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    bc98:	f000 fd80 	bl	c79c <sys_clock_cycle_get_32>
}
    bc9c:	bd08      	pop	{r3, pc}

0000bc9e <z_log_vprintk>:
{
    bc9e:	b500      	push	{lr}
    bca0:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    bca2:	9103      	str	r1, [sp, #12]
    bca4:	9002      	str	r0, [sp, #8]
    bca6:	2000      	movs	r0, #0
    bca8:	9001      	str	r0, [sp, #4]
    bcaa:	9000      	str	r0, [sp, #0]
    bcac:	4603      	mov	r3, r0
    bcae:	4602      	mov	r2, r0
    bcb0:	4601      	mov	r1, r0
    bcb2:	f7f7 fd17 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    bcb6:	b005      	add	sp, #20
    bcb8:	f85d fb04 	ldr.w	pc, [sp], #4

0000bcbc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    bcbc:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    bcbe:	f7f7 f9e7 	bl	3090 <log_init>
	}

	return 0;
}
    bcc2:	2000      	movs	r0, #0
    bcc4:	bd08      	pop	{r3, pc}

0000bcc6 <z_log_get_tag>:
}
    bcc6:	2000      	movs	r0, #0
    bcc8:	4770      	bx	lr

0000bcca <out_func>:
{
    bcca:	b500      	push	{lr}
    bccc:	b083      	sub	sp, #12
		char x = (char)c;
    bcce:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    bcd2:	680b      	ldr	r3, [r1, #0]
    bcd4:	684a      	ldr	r2, [r1, #4]
    bcd6:	6852      	ldr	r2, [r2, #4]
    bcd8:	2101      	movs	r1, #1
    bcda:	f10d 0007 	add.w	r0, sp, #7
    bcde:	4798      	blx	r3
}
    bce0:	2000      	movs	r0, #0
    bce2:	b003      	add	sp, #12
    bce4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bce8 <cr_out_func>:
{
    bce8:	b538      	push	{r3, r4, r5, lr}
    bcea:	4604      	mov	r4, r0
    bcec:	460d      	mov	r5, r1
	out_func(c, ctx);
    bcee:	f7ff ffec 	bl	bcca <out_func>
	if (c == '\n') {
    bcf2:	2c0a      	cmp	r4, #10
    bcf4:	d001      	beq.n	bcfa <cr_out_func+0x12>
}
    bcf6:	2000      	movs	r0, #0
    bcf8:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    bcfa:	4629      	mov	r1, r5
    bcfc:	200d      	movs	r0, #13
    bcfe:	f7ff ffe4 	bl	bcca <out_func>
    bd02:	e7f8      	b.n	bcf6 <cr_out_func+0xe>

0000bd04 <buffer_write>:
{
    bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd06:	4607      	mov	r7, r0
    bd08:	460d      	mov	r5, r1
    bd0a:	4614      	mov	r4, r2
    bd0c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    bd0e:	4632      	mov	r2, r6
    bd10:	4621      	mov	r1, r4
    bd12:	4628      	mov	r0, r5
    bd14:	47b8      	blx	r7
		buf += processed;
    bd16:	4405      	add	r5, r0
	} while (len != 0);
    bd18:	1a24      	subs	r4, r4, r0
    bd1a:	d1f8      	bne.n	bd0e <buffer_write+0xa>
}
    bd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bd1e <color_prefix>:
{
    bd1e:	b508      	push	{r3, lr}
    bd20:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    bd22:	2201      	movs	r2, #1
    bd24:	f7f7 fb5a 	bl	33dc <color_print>
}
    bd28:	bd08      	pop	{r3, pc}

0000bd2a <color_postfix>:
{
    bd2a:	b508      	push	{r3, lr}
    bd2c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    bd2e:	2200      	movs	r2, #0
    bd30:	f7f7 fb54 	bl	33dc <color_print>
}
    bd34:	bd08      	pop	{r3, pc}

0000bd36 <postfix_print>:
{
    bd36:	b538      	push	{r3, r4, r5, lr}
    bd38:	4605      	mov	r5, r0
    bd3a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    bd3c:	f001 0101 	and.w	r1, r1, #1
    bd40:	f7ff fff3 	bl	bd2a <color_postfix>
	newline_print(output, flags);
    bd44:	4621      	mov	r1, r4
    bd46:	4628      	mov	r0, r5
    bd48:	f7f7 fb5e 	bl	3408 <newline_print>
}
    bd4c:	bd38      	pop	{r3, r4, r5, pc}

0000bd4e <log_msg2_hexdump>:
{
    bd4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd52:	b083      	sub	sp, #12
    bd54:	4680      	mov	r8, r0
    bd56:	460e      	mov	r6, r1
    bd58:	4615      	mov	r5, r2
    bd5a:	461f      	mov	r7, r3
    bd5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bd60:	462c      	mov	r4, r5
    bd62:	2d10      	cmp	r5, #16
    bd64:	bf28      	it	cs
    bd66:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    bd68:	f8cd 9000 	str.w	r9, [sp]
    bd6c:	463b      	mov	r3, r7
    bd6e:	4622      	mov	r2, r4
    bd70:	4631      	mov	r1, r6
    bd72:	4640      	mov	r0, r8
    bd74:	f7f7 fb5c 	bl	3430 <hexdump_line_print>
		data += length;
    bd78:	4426      	add	r6, r4
	} while (len);
    bd7a:	1b2d      	subs	r5, r5, r4
    bd7c:	d1f0      	bne.n	bd60 <log_msg2_hexdump+0x12>
}
    bd7e:	b003      	add	sp, #12
    bd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000bd84 <log_output_flush>:
{
    bd84:	b510      	push	{r4, lr}
    bd86:	4604      	mov	r4, r0
		     output->control_block->offset,
    bd88:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    bd8a:	6853      	ldr	r3, [r2, #4]
    bd8c:	6812      	ldr	r2, [r2, #0]
    bd8e:	6881      	ldr	r1, [r0, #8]
    bd90:	6800      	ldr	r0, [r0, #0]
    bd92:	f7ff ffb7 	bl	bd04 <buffer_write>
	output->control_block->offset = 0;
    bd96:	6863      	ldr	r3, [r4, #4]
    bd98:	2200      	movs	r2, #0
    bd9a:	601a      	str	r2, [r3, #0]
}
    bd9c:	bd10      	pop	{r4, pc}

0000bd9e <z_log_msg2_finalize>:
{
    bd9e:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    bda0:	b198      	cbz	r0, bdca <z_log_msg2_finalize+0x2c>
    bda2:	460e      	mov	r6, r1
    bda4:	4614      	mov	r4, r2
    bda6:	4619      	mov	r1, r3
    bda8:	4605      	mov	r5, r0
	if (data) {
    bdaa:	b143      	cbz	r3, bdbe <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    bdac:	f100 0310 	add.w	r3, r0, #16
    bdb0:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    bdb4:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    bdb8:	4418      	add	r0, r3
    bdba:	f000 f8f1 	bl	bfa0 <memcpy>
	msg->hdr.desc = desc;
    bdbe:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    bdc0:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    bdc2:	4628      	mov	r0, r5
    bdc4:	f7f7 fa46 	bl	3254 <z_log_msg2_commit>
}
    bdc8:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    bdca:	f7f7 fa23 	bl	3214 <z_log_dropped>
		return;
    bdce:	e7fb      	b.n	bdc8 <z_log_msg2_finalize+0x2a>

0000bdd0 <abort_function>:
{
    bdd0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    bdd2:	2000      	movs	r0, #0
    bdd4:	f7f7 f8e2 	bl	2f9c <sys_reboot>

0000bdd8 <z_log_msg2_runtime_create>:
{
    bdd8:	b510      	push	{r4, lr}
    bdda:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bddc:	ac0b      	add	r4, sp, #44	; 0x2c
    bdde:	9405      	str	r4, [sp, #20]
    bde0:	9403      	str	r4, [sp, #12]
    bde2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bde4:	9402      	str	r4, [sp, #8]
    bde6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bde8:	9401      	str	r4, [sp, #4]
    bdea:	9c08      	ldr	r4, [sp, #32]
    bdec:	9400      	str	r4, [sp, #0]
    bdee:	f7f7 fc79 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    bdf2:	b006      	add	sp, #24
    bdf4:	bd10      	pop	{r4, pc}

0000bdf6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    bdf6:	b538      	push	{r3, r4, r5, lr}
    bdf8:	4604      	mov	r4, r0

	if (esf != NULL) {
    bdfa:	460d      	mov	r5, r1
    bdfc:	b111      	cbz	r1, be04 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    bdfe:	4608      	mov	r0, r1
    be00:	f7f8 f894 	bl	3f2c <esf_dump>
	}
	z_fatal_error(reason, esf);
    be04:	4629      	mov	r1, r5
    be06:	4620      	mov	r0, r4
    be08:	f7fc fbfe 	bl	8608 <z_fatal_error>
}
    be0c:	bd38      	pop	{r3, r4, r5, pc}

0000be0e <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    be0e:	b508      	push	{r3, lr}
    be10:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    be12:	6800      	ldr	r0, [r0, #0]
    be14:	f7ff ffef 	bl	bdf6 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    be18:	bd08      	pop	{r3, pc}

0000be1a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    be1a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    be1c:	2100      	movs	r1, #0
    be1e:	2001      	movs	r0, #1
    be20:	f7ff ffe9 	bl	bdf6 <z_arm_fatal_error>
}
    be24:	bd08      	pop	{r3, pc}

0000be26 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    be26:	b508      	push	{r3, lr}
	handler();
    be28:	f7f8 f91c 	bl	4064 <z_SysNmiOnReset>
	z_arm_int_exit();
    be2c:	f7f8 fa12 	bl	4254 <z_arm_exc_exit>
}
    be30:	bd08      	pop	{r3, pc}

0000be32 <memory_fault_recoverable>:
}
    be32:	2000      	movs	r0, #0
    be34:	4770      	bx	lr

0000be36 <z_log_msg2_runtime_create>:
{
    be36:	b510      	push	{r4, lr}
    be38:	b086      	sub	sp, #24
	va_start(ap, fmt);
    be3a:	ac0b      	add	r4, sp, #44	; 0x2c
    be3c:	9405      	str	r4, [sp, #20]
    be3e:	9403      	str	r4, [sp, #12]
    be40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    be42:	9402      	str	r4, [sp, #8]
    be44:	9c09      	ldr	r4, [sp, #36]	; 0x24
    be46:	9401      	str	r4, [sp, #4]
    be48:	9c08      	ldr	r4, [sp, #32]
    be4a:	9400      	str	r4, [sp, #0]
    be4c:	f7f7 fc4a 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    be50:	b006      	add	sp, #24
    be52:	bd10      	pop	{r4, pc}

0000be54 <fault_handle>:
{
    be54:	b508      	push	{r3, lr}
	*recoverable = false;
    be56:	2300      	movs	r3, #0
    be58:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    be5a:	1ecb      	subs	r3, r1, #3
    be5c:	2b09      	cmp	r3, #9
    be5e:	d81a      	bhi.n	be96 <fault_handle+0x42>
    be60:	e8df f003 	tbb	[pc, r3]
    be64:	110d0905 	.word	0x110d0905
    be68:	19191919 	.word	0x19191919
    be6c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    be6e:	4611      	mov	r1, r2
    be70:	f7f8 fc42 	bl	46f8 <hard_fault>
}
    be74:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    be76:	2100      	movs	r1, #0
    be78:	f7f8 fb60 	bl	453c <mem_manage_fault>
		break;
    be7c:	e7fa      	b.n	be74 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    be7e:	2100      	movs	r1, #0
    be80:	f7f8 f9f6 	bl	4270 <bus_fault>
		break;
    be84:	e7f6      	b.n	be74 <fault_handle+0x20>
		reason = usage_fault(esf);
    be86:	f7f8 fa9b 	bl	43c0 <usage_fault>
		break;
    be8a:	e7f3      	b.n	be74 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    be8c:	4611      	mov	r1, r2
    be8e:	f7f8 fb21 	bl	44d4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    be92:	2000      	movs	r0, #0
		break;
    be94:	e7ee      	b.n	be74 <fault_handle+0x20>
		reserved_exception(esf, fault);
    be96:	f7f8 fb31 	bl	44fc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    be9a:	2000      	movs	r0, #0
	return reason;
    be9c:	e7ea      	b.n	be74 <fault_handle+0x20>

0000be9e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    be9e:	6843      	ldr	r3, [r0, #4]
    bea0:	1e5a      	subs	r2, r3, #1
		&&
    bea2:	4213      	tst	r3, r2
    bea4:	d106      	bne.n	beb4 <mpu_partition_is_valid+0x16>
		&&
    bea6:	2b1f      	cmp	r3, #31
    bea8:	d906      	bls.n	beb8 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    beaa:	6803      	ldr	r3, [r0, #0]
		&&
    beac:	421a      	tst	r2, r3
    beae:	d005      	beq.n	bebc <mpu_partition_is_valid+0x1e>
    beb0:	2000      	movs	r0, #0
    beb2:	4770      	bx	lr
    beb4:	2000      	movs	r0, #0
    beb6:	4770      	bx	lr
    beb8:	2000      	movs	r0, #0
    beba:	4770      	bx	lr
    bebc:	2001      	movs	r0, #1
}
    bebe:	4770      	bx	lr

0000bec0 <z_log_msg2_runtime_create>:
{
    bec0:	b510      	push	{r4, lr}
    bec2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bec4:	ac0b      	add	r4, sp, #44	; 0x2c
    bec6:	9405      	str	r4, [sp, #20]
    bec8:	9403      	str	r4, [sp, #12]
    beca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    becc:	9402      	str	r4, [sp, #8]
    bece:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bed0:	9401      	str	r4, [sp, #4]
    bed2:	9c08      	ldr	r4, [sp, #32]
    bed4:	9400      	str	r4, [sp, #0]
    bed6:	f7f7 fc05 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    beda:	b006      	add	sp, #24
    bedc:	bd10      	pop	{r4, pc}

0000bede <mpu_configure_region>:
{
    bede:	b500      	push	{lr}
    bee0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    bee2:	680b      	ldr	r3, [r1, #0]
    bee4:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    bee6:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    bee8:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    beea:	2b20      	cmp	r3, #32
    beec:	d912      	bls.n	bf14 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    beee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    bef2:	d811      	bhi.n	bf18 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    bef4:	3b01      	subs	r3, #1
    bef6:	fab3 f383 	clz	r3, r3
    befa:	f1c3 031f 	rsb	r3, r3, #31
    befe:	005b      	lsls	r3, r3, #1
    bf00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    bf04:	4313      	orrs	r3, r2
    bf06:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    bf08:	a901      	add	r1, sp, #4
    bf0a:	f7f8 fdff 	bl	4b0c <region_allocate_and_init>
}
    bf0e:	b005      	add	sp, #20
    bf10:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    bf14:	2308      	movs	r3, #8
    bf16:	e7f5      	b.n	bf04 <mpu_configure_region+0x26>
		return REGION_4G;
    bf18:	233e      	movs	r3, #62	; 0x3e
    bf1a:	e7f3      	b.n	bf04 <mpu_configure_region+0x26>

0000bf1c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    bf1c:	4602      	mov	r2, r0
    bf1e:	e002      	b.n	bf26 <strcpy+0xa>
		*d = *s;
    bf20:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    bf24:	3101      	adds	r1, #1
	while (*s != '\0') {
    bf26:	780b      	ldrb	r3, [r1, #0]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d1f9      	bne.n	bf20 <strcpy+0x4>
	}

	*d = '\0';
    bf2c:	7013      	strb	r3, [r2, #0]

	return dest;
}
    bf2e:	4770      	bx	lr

0000bf30 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    bf30:	4603      	mov	r3, r0
    bf32:	b1a2      	cbz	r2, bf5e <strncpy+0x2e>
{
    bf34:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    bf36:	780c      	ldrb	r4, [r1, #0]
    bf38:	b12c      	cbz	r4, bf46 <strncpy+0x16>
		*d = *s;
    bf3a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    bf3e:	3101      	adds	r1, #1
		d++;
		n--;
    bf40:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    bf42:	2a00      	cmp	r2, #0
    bf44:	d1f7      	bne.n	bf36 <strncpy+0x6>
	}

	while (n > 0) {
    bf46:	b122      	cbz	r2, bf52 <strncpy+0x22>
		*d = '\0';
    bf48:	2100      	movs	r1, #0
    bf4a:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    bf4e:	3a01      	subs	r2, #1
    bf50:	e7f9      	b.n	bf46 <strncpy+0x16>
	}

	return dest;
}
    bf52:	bc10      	pop	{r4}
    bf54:	4770      	bx	lr
		*d = '\0';
    bf56:	2100      	movs	r1, #0
    bf58:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    bf5c:	3a01      	subs	r2, #1
	while (n > 0) {
    bf5e:	2a00      	cmp	r2, #0
    bf60:	d1f9      	bne.n	bf56 <strncpy+0x26>
    bf62:	4770      	bx	lr

0000bf64 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    bf64:	4603      	mov	r3, r0
	size_t n = 0;
    bf66:	2000      	movs	r0, #0

	while (*s != '\0') {
    bf68:	e001      	b.n	bf6e <strlen+0xa>
		s++;
    bf6a:	3301      	adds	r3, #1
		n++;
    bf6c:	3001      	adds	r0, #1
	while (*s != '\0') {
    bf6e:	781a      	ldrb	r2, [r3, #0]
    bf70:	2a00      	cmp	r2, #0
    bf72:	d1fa      	bne.n	bf6a <strlen+0x6>
	}

	return n;
}
    bf74:	4770      	bx	lr

0000bf76 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    bf76:	4603      	mov	r3, r0
	size_t n = 0;
    bf78:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    bf7a:	e001      	b.n	bf80 <strnlen+0xa>
		s++;
    bf7c:	3301      	adds	r3, #1
		n++;
    bf7e:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    bf80:	781a      	ldrb	r2, [r3, #0]
    bf82:	b10a      	cbz	r2, bf88 <strnlen+0x12>
    bf84:	4288      	cmp	r0, r1
    bf86:	d3f9      	bcc.n	bf7c <strnlen+0x6>
	}

	return n;
}
    bf88:	4770      	bx	lr

0000bf8a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    bf8a:	e001      	b.n	bf90 <strcmp+0x6>
		s1++;
    bf8c:	3001      	adds	r0, #1
		s2++;
    bf8e:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    bf90:	7803      	ldrb	r3, [r0, #0]
    bf92:	780a      	ldrb	r2, [r1, #0]
    bf94:	4293      	cmp	r3, r2
    bf96:	d101      	bne.n	bf9c <strcmp+0x12>
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d1f7      	bne.n	bf8c <strcmp+0x2>
	}

	return *s1 - *s2;
}
    bf9c:	1a98      	subs	r0, r3, r2
    bf9e:	4770      	bx	lr

0000bfa0 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    bfa0:	ea80 0301 	eor.w	r3, r0, r1
    bfa4:	f013 0f03 	tst.w	r3, #3
    bfa8:	d001      	beq.n	bfae <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    bfaa:	4603      	mov	r3, r0
    bfac:	e023      	b.n	bff6 <memcpy+0x56>
    bfae:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    bfb0:	f013 0f03 	tst.w	r3, #3
    bfb4:	d00f      	beq.n	bfd6 <memcpy+0x36>
			if (n == 0) {
    bfb6:	b30a      	cbz	r2, bffc <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    bfb8:	f811 cb01 	ldrb.w	ip, [r1], #1
    bfbc:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    bfc0:	3a01      	subs	r2, #1
    bfc2:	e7f5      	b.n	bfb0 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    bfc4:	f811 cb01 	ldrb.w	ip, [r1], #1
    bfc8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    bfcc:	3a01      	subs	r2, #1
	while (n > 0) {
    bfce:	2a00      	cmp	r2, #0
    bfd0:	d1f8      	bne.n	bfc4 <memcpy+0x24>
	}

	return d;
}
    bfd2:	bc10      	pop	{r4}
    bfd4:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    bfd6:	2a03      	cmp	r2, #3
    bfd8:	d90d      	bls.n	bff6 <memcpy+0x56>
{
    bfda:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    bfdc:	f851 4b04 	ldr.w	r4, [r1], #4
    bfe0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    bfe4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    bfe6:	2a03      	cmp	r2, #3
    bfe8:	d8f8      	bhi.n	bfdc <memcpy+0x3c>
    bfea:	e7f0      	b.n	bfce <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    bfec:	f811 cb01 	ldrb.w	ip, [r1], #1
    bff0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    bff4:	3a01      	subs	r2, #1
	while (n > 0) {
    bff6:	2a00      	cmp	r2, #0
    bff8:	d1f8      	bne.n	bfec <memcpy+0x4c>
    bffa:	4770      	bx	lr
}
    bffc:	4770      	bx	lr

0000bffe <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    bffe:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    c002:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c004:	e002      	b.n	c00c <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    c006:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c00a:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c00c:	f013 0f03 	tst.w	r3, #3
    c010:	d002      	beq.n	c018 <memset+0x1a>
		if (n == 0) {
    c012:	2a00      	cmp	r2, #0
    c014:	d1f7      	bne.n	c006 <memset+0x8>
    c016:	e00f      	b.n	c038 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    c018:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    c01a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    c01e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    c022:	2a03      	cmp	r2, #3
    c024:	d906      	bls.n	c034 <memset+0x36>
		*(d_word++) = c_word;
    c026:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    c02a:	3a04      	subs	r2, #4
    c02c:	e7f9      	b.n	c022 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    c02e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c032:	3a01      	subs	r2, #1
	while (n > 0) {
    c034:	2a00      	cmp	r2, #0
    c036:	d1fa      	bne.n	c02e <memset+0x30>
	}

	return buf;
}
    c038:	4770      	bx	lr

0000c03a <_stdout_hook_default>:
}
    c03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c03e:	4770      	bx	lr

0000c040 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    c040:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    c042:	f7f8 fe97 	bl	4d74 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    c046:	bd08      	pop	{r3, pc}

0000c048 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c04c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c050:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c054:	2a08      	cmp	r2, #8
    c056:	d001      	beq.n	c05c <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    c058:	2000      	movs	r0, #0
    c05a:	4770      	bx	lr
                switch(var2)
    c05c:	2b02      	cmp	r3, #2
    c05e:	d001      	beq.n	c064 <nrf52_errata_197+0x1c>
                        return false;
    c060:	2000      	movs	r0, #0
    c062:	4770      	bx	lr
                        return true;
    c064:	2001      	movs	r0, #1
    #endif
}
    c066:	4770      	bx	lr

0000c068 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c068:	2806      	cmp	r0, #6
    c06a:	d000      	beq.n	c06e <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c06c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c072:	2201      	movs	r2, #1
    c074:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c078:	f3bf 8f4f 	dsb	sy
        __WFE();
    c07c:	bf20      	wfe
    while (true)
    c07e:	e7fd      	b.n	c07c <pm_state_set+0x14>

0000c080 <pm_state_exit_post_ops>:
    c080:	2300      	movs	r3, #0
    c082:	f383 8811 	msr	BASEPRI, r3
    c086:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c08a:	4770      	bx	lr

0000c08c <adc_context_on_timer_expired>:
{
    c08c:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    c08e:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c090:	f3bf 8f5b 	dmb	ish
    c094:	e850 3f00 	ldrex	r3, [r0]
    c098:	1c5a      	adds	r2, r3, #1
    c09a:	e840 2100 	strex	r1, r2, [r0]
    c09e:	2900      	cmp	r1, #0
    c0a0:	d1f8      	bne.n	c094 <adc_context_on_timer_expired+0x8>
    c0a2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    c0a6:	b11b      	cbz	r3, c0b0 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    c0a8:	f06f 030f 	mvn.w	r3, #15
    c0ac:	6603      	str	r3, [r0, #96]	; 0x60
}
    c0ae:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    c0b0:	f7f8 fec8 	bl	4e44 <adc_context_start_sampling>
    c0b4:	e7fb      	b.n	c0ae <adc_context_on_timer_expired+0x22>

0000c0b6 <z_log_msg2_runtime_create>:
{
    c0b6:	b510      	push	{r4, lr}
    c0b8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c0ba:	ac0b      	add	r4, sp, #44	; 0x2c
    c0bc:	9405      	str	r4, [sp, #20]
    c0be:	9403      	str	r4, [sp, #12]
    c0c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c0c2:	9402      	str	r4, [sp, #8]
    c0c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c0c6:	9401      	str	r4, [sp, #4]
    c0c8:	9c08      	ldr	r4, [sp, #32]
    c0ca:	9400      	str	r4, [sp, #0]
    c0cc:	f7f7 fb0a 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    c0d0:	b006      	add	sp, #24
    c0d2:	bd10      	pop	{r4, pc}

0000c0d4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    c0d4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    c0d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c0da:	0089      	lsls	r1, r1, #2
    c0dc:	3140      	adds	r1, #64	; 0x40
}
    c0de:	4408      	add	r0, r1
    c0e0:	4770      	bx	lr

0000c0e2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    c0e2:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    c0e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    c0e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c0ec:	4770      	bx	lr

0000c0ee <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    c0ee:	6900      	ldr	r0, [r0, #16]
}
    c0f0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    c0f4:	4770      	bx	lr

0000c0f6 <set_off_state>:
	__asm__ volatile(
    c0f6:	f04f 0320 	mov.w	r3, #32
    c0fa:	f3ef 8211 	mrs	r2, BASEPRI
    c0fe:	f383 8812 	msr	BASEPRI_MAX, r3
    c102:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c106:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c108:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c10c:	d001      	beq.n	c112 <set_off_state+0x1c>
    c10e:	428b      	cmp	r3, r1
    c110:	d107      	bne.n	c122 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c112:	2301      	movs	r3, #1
    c114:	6003      	str	r3, [r0, #0]
	int err = 0;
    c116:	2000      	movs	r0, #0
	__asm__ volatile(
    c118:	f382 8811 	msr	BASEPRI, r2
    c11c:	f3bf 8f6f 	isb	sy
}
    c120:	4770      	bx	lr
		err = -EPERM;
    c122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c126:	e7f7      	b.n	c118 <set_off_state+0x22>

0000c128 <set_starting_state>:
	__asm__ volatile(
    c128:	f04f 0320 	mov.w	r3, #32
    c12c:	f3ef 8211 	mrs	r2, BASEPRI
    c130:	f383 8812 	msr	BASEPRI_MAX, r3
    c134:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c138:	6803      	ldr	r3, [r0, #0]
    c13a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c13e:	f003 0307 	and.w	r3, r3, #7
    c142:	2b01      	cmp	r3, #1
    c144:	d008      	beq.n	c158 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    c146:	458c      	cmp	ip, r1
    c148:	d009      	beq.n	c15e <set_starting_state+0x36>
		err = -EPERM;
    c14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    c14e:	f382 8811 	msr	BASEPRI, r2
    c152:	f3bf 8f6f 	isb	sy
}
    c156:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c158:	6001      	str	r1, [r0, #0]
	int err = 0;
    c15a:	2000      	movs	r0, #0
    c15c:	e7f7      	b.n	c14e <set_starting_state+0x26>
		err = -EALREADY;
    c15e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c162:	e7f4      	b.n	c14e <set_starting_state+0x26>

0000c164 <set_on_state>:
	__asm__ volatile(
    c164:	f04f 0320 	mov.w	r3, #32
    c168:	f3ef 8211 	mrs	r2, BASEPRI
    c16c:	f383 8812 	msr	BASEPRI_MAX, r3
    c170:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c174:	6803      	ldr	r3, [r0, #0]
    c176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c17a:	f043 0302 	orr.w	r3, r3, #2
    c17e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c180:	f382 8811 	msr	BASEPRI, r2
    c184:	f3bf 8f6f 	isb	sy
}
    c188:	4770      	bx	lr

0000c18a <clkstarted_handle>:
{
    c18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c18c:	4606      	mov	r6, r0
    c18e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    c190:	f7ff ffa0 	bl	c0d4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    c194:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    c196:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    c198:	2300      	movs	r3, #0
    c19a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    c19e:	f7ff ffe1 	bl	c164 <set_on_state>
	if (callback) {
    c1a2:	b11d      	cbz	r5, c1ac <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c1a4:	463a      	mov	r2, r7
    c1a6:	4621      	mov	r1, r4
    c1a8:	4630      	mov	r0, r6
    c1aa:	47a8      	blx	r5
}
    c1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c1ae <async_start>:
{
    c1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1b2:	4606      	mov	r6, r0
    c1b4:	4690      	mov	r8, r2
    c1b6:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    c1b8:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c1ba:	4629      	mov	r1, r5
    c1bc:	f7ff ff8a 	bl	c0d4 <get_sub_data>
    c1c0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    c1c2:	9906      	ldr	r1, [sp, #24]
    c1c4:	3008      	adds	r0, #8
    c1c6:	f7ff ffaf 	bl	c128 <set_starting_state>
	if (err < 0) {
    c1ca:	2800      	cmp	r0, #0
    c1cc:	db09      	blt.n	c1e2 <async_start+0x34>
	subdata->cb = cb;
    c1ce:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    c1d2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    c1d4:	4629      	mov	r1, r5
    c1d6:	4630      	mov	r0, r6
    c1d8:	f7ff ff83 	bl	c0e2 <get_sub_config>
    c1dc:	6803      	ldr	r3, [r0, #0]
    c1de:	4798      	blx	r3
	return 0;
    c1e0:	2000      	movs	r0, #0
}
    c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c1e6 <api_start>:
{
    c1e6:	b510      	push	{r4, lr}
    c1e8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c1ea:	2480      	movs	r4, #128	; 0x80
    c1ec:	9400      	str	r4, [sp, #0]
    c1ee:	f7ff ffde 	bl	c1ae <async_start>
}
    c1f2:	b002      	add	sp, #8
    c1f4:	bd10      	pop	{r4, pc}

0000c1f6 <onoff_started_callback>:
{
    c1f6:	b510      	push	{r4, lr}
    c1f8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    c1fa:	b2c9      	uxtb	r1, r1
    c1fc:	f7ff ff77 	bl	c0ee <get_onoff_manager>
	notify(mgr, 0);
    c200:	2100      	movs	r1, #0
    c202:	47a0      	blx	r4
}
    c204:	bd10      	pop	{r4, pc}

0000c206 <hfclk_start>:
{
    c206:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c208:	2001      	movs	r0, #1
    c20a:	f7fb f805 	bl	7218 <nrfx_clock_start>
}
    c20e:	bd08      	pop	{r3, pc}

0000c210 <lfclk_start>:
{
    c210:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c212:	2000      	movs	r0, #0
    c214:	f7fb f800 	bl	7218 <nrfx_clock_start>
}
    c218:	bd08      	pop	{r3, pc}

0000c21a <hfclk_stop>:
{
    c21a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c21c:	2001      	movs	r0, #1
    c21e:	f7fb f871 	bl	7304 <nrfx_clock_stop>
}
    c222:	bd08      	pop	{r3, pc}

0000c224 <lfclk_stop>:
{
    c224:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c226:	2000      	movs	r0, #0
    c228:	f7fb f86c 	bl	7304 <nrfx_clock_stop>
}
    c22c:	bd08      	pop	{r3, pc}

0000c22e <api_stop>:
{
    c22e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    c230:	2280      	movs	r2, #128	; 0x80
    c232:	f7f9 f971 	bl	5518 <stop>
}
    c236:	bd08      	pop	{r3, pc}

0000c238 <blocking_start_callback>:
{
    c238:	b508      	push	{r3, lr}
    c23a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c23c:	f7fd f898 	bl	9370 <z_impl_k_sem_give>
}
    c240:	bd08      	pop	{r3, pc}

0000c242 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c242:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    c246:	f020 0001 	bic.w	r0, r0, #1
    c24a:	0540      	lsls	r0, r0, #21
    c24c:	0d40      	lsrs	r0, r0, #21
    c24e:	f240 2306 	movw	r3, #518	; 0x206
    c252:	4298      	cmp	r0, r3
    c254:	d033      	beq.n	c2be <get_drive+0x7c>
    c256:	d816      	bhi.n	c286 <get_drive+0x44>
    c258:	2806      	cmp	r0, #6
    c25a:	d02c      	beq.n	c2b6 <get_drive+0x74>
    c25c:	d906      	bls.n	c26c <get_drive+0x2a>
    c25e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c262:	d10d      	bne.n	c280 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    c264:	2301      	movs	r3, #1
    c266:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c268:	2000      	movs	r0, #0
		break;
    c26a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c26c:	b300      	cbz	r0, c2b0 <get_drive+0x6e>
    c26e:	2802      	cmp	r0, #2
    c270:	d103      	bne.n	c27a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    c272:	2304      	movs	r3, #4
    c274:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c276:	2000      	movs	r0, #0
		break;
    c278:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c27a:	f06f 0015 	mvn.w	r0, #21
    c27e:	4770      	bx	lr
    c280:	f06f 0015 	mvn.w	r0, #21
    c284:	4770      	bx	lr
    c286:	f240 4302 	movw	r3, #1026	; 0x402
    c28a:	4298      	cmp	r0, r3
    c28c:	d01b      	beq.n	c2c6 <get_drive+0x84>
    c28e:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    c292:	d103      	bne.n	c29c <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    c294:	2303      	movs	r3, #3
    c296:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c298:	2000      	movs	r0, #0
		break;
    c29a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c29c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    c2a0:	d103      	bne.n	c2aa <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    c2a2:	2302      	movs	r3, #2
    c2a4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c2a6:	2000      	movs	r0, #0
		break;
    c2a8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c2aa:	f06f 0015 	mvn.w	r0, #21
    c2ae:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    c2b0:	2000      	movs	r0, #0
    c2b2:	7008      	strb	r0, [r1, #0]
		break;
    c2b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    c2b6:	2306      	movs	r3, #6
    c2b8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c2ba:	2000      	movs	r0, #0
		break;
    c2bc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    c2be:	2307      	movs	r3, #7
    c2c0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c2c2:	2000      	movs	r0, #0
		break;
    c2c4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    c2c6:	2305      	movs	r3, #5
    c2c8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c2ca:	2000      	movs	r0, #0
}
    c2cc:	4770      	bx	lr

0000c2ce <get_pull>:
	if (flags & GPIO_PULL_UP) {
    c2ce:	f010 0f10 	tst.w	r0, #16
    c2d2:	d104      	bne.n	c2de <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    c2d4:	f010 0f20 	tst.w	r0, #32
    c2d8:	d103      	bne.n	c2e2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    c2da:	2000      	movs	r0, #0
    c2dc:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    c2de:	2003      	movs	r0, #3
    c2e0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    c2e2:	2001      	movs	r0, #1
}
    c2e4:	4770      	bx	lr

0000c2e6 <gpio_nrfx_port_get_raw>:
	return port->config;
    c2e6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c2e8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c2ea:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c2ee:	600b      	str	r3, [r1, #0]
}
    c2f0:	2000      	movs	r0, #0
    c2f2:	4770      	bx	lr

0000c2f4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    c2f4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c2f6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    c2f8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    c2fc:	4042      	eors	r2, r0
    c2fe:	400a      	ands	r2, r1
    c300:	4042      	eors	r2, r0
    p_reg->OUT = value;
    c302:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    c306:	2000      	movs	r0, #0
    c308:	4770      	bx	lr

0000c30a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    c30a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c30c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    c30e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    c312:	2000      	movs	r0, #0
    c314:	4770      	bx	lr

0000c316 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    c316:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c318:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    c31a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    c31e:	2000      	movs	r0, #0
    c320:	4770      	bx	lr

0000c322 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    c322:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c324:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c326:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    c32a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    c32c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    c330:	2000      	movs	r0, #0
    c332:	4770      	bx	lr

0000c334 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    c334:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    c338:	d007      	beq.n	c34a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c33a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    c33e:	d00d      	beq.n	c35c <get_trigger+0x28>
    c340:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c344:	d008      	beq.n	c358 <get_trigger+0x24>
    c346:	2001      	movs	r0, #1
}
    c348:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c34a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c34e:	d001      	beq.n	c354 <get_trigger+0x20>
    c350:	2005      	movs	r0, #5
    c352:	4770      	bx	lr
    c354:	2004      	movs	r0, #4
    c356:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c358:	2002      	movs	r0, #2
    c35a:	4770      	bx	lr
    c35c:	2003      	movs	r0, #3
    c35e:	4770      	bx	lr

0000c360 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    c360:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c362:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    c364:	f04f 0120 	mov.w	r1, #32
    c368:	f3ef 8211 	mrs	r2, BASEPRI
    c36c:	f381 8812 	msr	BASEPRI_MAX, r1
    c370:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c374:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c378:	b131      	cbz	r1, c388 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c37a:	2100      	movs	r1, #0
    c37c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c380:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c384:	2101      	movs	r1, #1
    c386:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c388:	f382 8811 	msr	BASEPRI, r2
    c38c:	f3bf 8f6f 	isb	sy
}
    c390:	4770      	bx	lr

0000c392 <uarte_nrfx_isr_int>:
{
    c392:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c394:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    c396:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    c398:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c39c:	f413 7f80 	tst.w	r3, #256	; 0x100
    c3a0:	d002      	beq.n	c3a8 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c3a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    c3a6:	b9d3      	cbnz	r3, c3de <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c3a8:	686b      	ldr	r3, [r5, #4]
    c3aa:	f013 0f10 	tst.w	r3, #16
    c3ae:	d015      	beq.n	c3dc <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    c3b0:	f04f 0220 	mov.w	r2, #32
    c3b4:	f3ef 8311 	mrs	r3, BASEPRI
    c3b8:	f382 8812 	msr	BASEPRI_MAX, r2
    c3bc:	f3bf 8f6f 	isb	sy
    c3c0:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c3c4:	b112      	cbz	r2, c3cc <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c3c6:	2200      	movs	r2, #0
    c3c8:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    c3cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c3d0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    c3d4:	f383 8811 	msr	BASEPRI, r3
    c3d8:	f3bf 8f6f 	isb	sy
}
    c3dc:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    c3de:	f7ff ffbf 	bl	c360 <endtx_isr>
    c3e2:	e7e1      	b.n	c3a8 <uarte_nrfx_isr_int+0x16>

0000c3e4 <uarte_nrfx_configure>:
{
    c3e4:	b570      	push	{r4, r5, r6, lr}
    c3e6:	b082      	sub	sp, #8
    c3e8:	4606      	mov	r6, r0
    c3ea:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    c3ec:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    c3ee:	794b      	ldrb	r3, [r1, #5]
    c3f0:	2b01      	cmp	r3, #1
    c3f2:	d006      	beq.n	c402 <uarte_nrfx_configure+0x1e>
    c3f4:	2b03      	cmp	r3, #3
    c3f6:	d011      	beq.n	c41c <uarte_nrfx_configure+0x38>
    c3f8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    c3fc:	4618      	mov	r0, r3
    c3fe:	b002      	add	sp, #8
    c400:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    c402:	2300      	movs	r3, #0
    c404:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c408:	79a3      	ldrb	r3, [r4, #6]
    c40a:	2b03      	cmp	r3, #3
    c40c:	d137      	bne.n	c47e <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    c40e:	79e3      	ldrb	r3, [r4, #7]
    c410:	b143      	cbz	r3, c424 <uarte_nrfx_configure+0x40>
    c412:	2b01      	cmp	r3, #1
    c414:	d010      	beq.n	c438 <uarte_nrfx_configure+0x54>
    c416:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c41a:	e7ef      	b.n	c3fc <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c41c:	2310      	movs	r3, #16
    c41e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    c422:	e7f1      	b.n	c408 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    c424:	2300      	movs	r3, #0
    c426:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    c42a:	7923      	ldrb	r3, [r4, #4]
    c42c:	b143      	cbz	r3, c440 <uarte_nrfx_configure+0x5c>
    c42e:	2b02      	cmp	r3, #2
    c430:	d021      	beq.n	c476 <uarte_nrfx_configure+0x92>
    c432:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c436:	e7e1      	b.n	c3fc <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    c438:	2301      	movs	r3, #1
    c43a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    c43e:	e7f4      	b.n	c42a <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    c440:	2300      	movs	r3, #0
    c442:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    c446:	6821      	ldr	r1, [r4, #0]
    c448:	4630      	mov	r0, r6
    c44a:	f7f9 fc6d 	bl	5d28 <baudrate_set>
    c44e:	4603      	mov	r3, r0
    c450:	b9c0      	cbnz	r0, c484 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    c452:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    c454:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c456:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    c45a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    c45e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c462:	4331      	orrs	r1, r6
    c464:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c466:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    c46a:	3504      	adds	r5, #4
    c46c:	e894 0003 	ldmia.w	r4, {r0, r1}
    c470:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    c474:	e7c2      	b.n	c3fc <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    c476:	230e      	movs	r3, #14
    c478:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    c47c:	e7e3      	b.n	c446 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    c47e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c482:	e7bb      	b.n	c3fc <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    c484:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c488:	e7b8      	b.n	c3fc <uarte_nrfx_configure+0x18>

0000c48a <uarte_nrfx_config_get>:
{
    c48a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    c48c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    c48e:	3304      	adds	r3, #4
    c490:	e893 0003 	ldmia.w	r3, {r0, r1}
    c494:	e882 0003 	stmia.w	r2, {r0, r1}
}
    c498:	2000      	movs	r0, #0
    c49a:	4770      	bx	lr

0000c49c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    c49c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c49e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    c4a0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    c4a4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    c4a8:	4770      	bx	lr

0000c4aa <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    c4aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c4ac:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c4ae:	685b      	ldr	r3, [r3, #4]
    c4b0:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c4b4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c4b8:	b929      	cbnz	r1, c4c6 <is_tx_ready+0x1c>
    c4ba:	b933      	cbnz	r3, c4ca <is_tx_ready+0x20>
    c4bc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    c4c0:	b92b      	cbnz	r3, c4ce <is_tx_ready+0x24>
    c4c2:	2000      	movs	r0, #0
    c4c4:	4770      	bx	lr
    c4c6:	2001      	movs	r0, #1
    c4c8:	4770      	bx	lr
    c4ca:	2000      	movs	r0, #0
    c4cc:	4770      	bx	lr
    c4ce:	2001      	movs	r0, #1
}
    c4d0:	4770      	bx	lr

0000c4d2 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    c4d2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c4d4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c4d6:	2208      	movs	r2, #8
    c4d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    c4dc:	4770      	bx	lr

0000c4de <tx_start>:
{
    c4de:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c4e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c4e2:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c4e4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c4e8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c4ec:	2200      	movs	r2, #0
    c4ee:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    c4f2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    c4f6:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    c4fa:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c4fe:	685b      	ldr	r3, [r3, #4]
    c500:	f013 0f10 	tst.w	r3, #16
    c504:	d102      	bne.n	c50c <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c506:	2301      	movs	r3, #1
    c508:	60a3      	str	r3, [r4, #8]
}
    c50a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    c50c:	2101      	movs	r1, #1
    c50e:	f7ff ffe0 	bl	c4d2 <uarte_enable>
    p_reg->INTENSET = mask;
    c512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    c516:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    c51a:	e7f4      	b.n	c506 <tx_start+0x28>

0000c51c <uarte_nrfx_poll_in>:
{
    c51c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    c51e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    c520:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c522:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c524:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    c528:	b152      	cbz	r2, c540 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    c52a:	7c62      	ldrb	r2, [r4, #17]
    c52c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c52e:	2000      	movs	r0, #0
    c530:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    c534:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c538:	2201      	movs	r2, #1
    c53a:	601a      	str	r2, [r3, #0]
}
    c53c:	bc10      	pop	{r4}
    c53e:	4770      	bx	lr
		return -1;
    c540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c544:	e7fa      	b.n	c53c <uarte_nrfx_poll_in+0x20>

0000c546 <wait_tx_ready>:
{
    c546:	b570      	push	{r4, r5, r6, lr}
    c548:	4606      	mov	r6, r0
    c54a:	e014      	b.n	c576 <wait_tx_ready+0x30>
		if (res) {
    c54c:	b17d      	cbz	r5, c56e <wait_tx_ready+0x28>
	__asm__ volatile(
    c54e:	f04f 0320 	mov.w	r3, #32
    c552:	f3ef 8411 	mrs	r4, BASEPRI
    c556:	f383 8812 	msr	BASEPRI_MAX, r3
    c55a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    c55e:	4630      	mov	r0, r6
    c560:	f7ff ffa3 	bl	c4aa <is_tx_ready>
    c564:	b9a0      	cbnz	r0, c590 <wait_tx_ready+0x4a>
	__asm__ volatile(
    c566:	f384 8811 	msr	BASEPRI, r4
    c56a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    c56e:	2021      	movs	r0, #33	; 0x21
    c570:	2100      	movs	r1, #0
    c572:	f7fe f9dd 	bl	a930 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    c576:	2464      	movs	r4, #100	; 0x64
    c578:	4630      	mov	r0, r6
    c57a:	f7ff ff96 	bl	c4aa <is_tx_ready>
    c57e:	4605      	mov	r5, r0
    c580:	2800      	cmp	r0, #0
    c582:	d1e3      	bne.n	c54c <wait_tx_ready+0x6>
    c584:	2001      	movs	r0, #1
    c586:	f000 f9c1 	bl	c90c <nrfx_busy_wait>
    c58a:	3c01      	subs	r4, #1
    c58c:	d1f4      	bne.n	c578 <wait_tx_ready+0x32>
    c58e:	e7dd      	b.n	c54c <wait_tx_ready+0x6>
}
    c590:	4620      	mov	r0, r4
    c592:	bd70      	pop	{r4, r5, r6, pc}

0000c594 <z_log_msg2_runtime_create>:
{
    c594:	b510      	push	{r4, lr}
    c596:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c598:	ac0b      	add	r4, sp, #44	; 0x2c
    c59a:	9405      	str	r4, [sp, #20]
    c59c:	9403      	str	r4, [sp, #12]
    c59e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c5a0:	9402      	str	r4, [sp, #8]
    c5a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c5a4:	9401      	str	r4, [sp, #4]
    c5a6:	9c08      	ldr	r4, [sp, #32]
    c5a8:	9400      	str	r4, [sp, #0]
    c5aa:	f7f7 f89b 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    c5ae:	b006      	add	sp, #24
    c5b0:	bd10      	pop	{r4, pc}

0000c5b2 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    c5b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c5b6:	b083      	sub	sp, #12
    c5b8:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    c5ba:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    c5bc:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    c5be:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c5c2:	2100      	movs	r1, #0
    c5c4:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    c5c8:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    c5cc:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    c5d0:	aa01      	add	r2, sp, #4
    c5d2:	4648      	mov	r0, r9
    c5d4:	f000 f8e6 	bl	c7a4 <pinctrl_lookup_state>
	if (ret < 0) {
    c5d8:	1e04      	subs	r4, r0, #0
    c5da:	db07      	blt.n	c5ec <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    c5dc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    c5de:	f8d9 2000 	ldr.w	r2, [r9]
    c5e2:	7919      	ldrb	r1, [r3, #4]
    c5e4:	6818      	ldr	r0, [r3, #0]
    c5e6:	f7f9 ff61 	bl	64ac <pinctrl_configure_pins>
    c5ea:	4604      	mov	r4, r0
	if (err < 0) {
    c5ec:	2c00      	cmp	r4, #0
    c5ee:	db35      	blt.n	c65c <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    c5f0:	f108 0104 	add.w	r1, r8, #4
    c5f4:	4628      	mov	r0, r5
    c5f6:	f7ff fef5 	bl	c3e4 <uarte_nrfx_configure>
	if (err) {
    c5fa:	4604      	mov	r4, r0
    c5fc:	bb70      	cbnz	r0, c65c <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    c5fe:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    c600:	f013 0f02 	tst.w	r3, #2
    c604:	d12e      	bne.n	c664 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c606:	2308      	movs	r3, #8
    c608:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    c60c:	7a3b      	ldrb	r3, [r7, #8]
    c60e:	b95b      	cbnz	r3, c628 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c610:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    c614:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    c618:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    c61c:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    c620:	2301      	movs	r3, #1
    c622:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c626:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    c628:	687b      	ldr	r3, [r7, #4]
    c62a:	f013 0f02 	tst.w	r3, #2
    c62e:	d103      	bne.n	c638 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    c630:	f44f 7380 	mov.w	r3, #256	; 0x100
    c634:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c638:	687b      	ldr	r3, [r7, #4]
    c63a:	f013 0f10 	tst.w	r3, #16
    c63e:	d003      	beq.n	c648 <uarte_instance_init+0x96>
    c640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    c644:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    c648:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c64c:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c650:	2300      	movs	r3, #0
    c652:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c656:	2301      	movs	r3, #1
    c658:	60b3      	str	r3, [r6, #8]
    c65a:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    c65c:	4620      	mov	r0, r4
    c65e:	b003      	add	sp, #12
    c660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    c664:	4641      	mov	r1, r8
    c666:	4630      	mov	r0, r6
    c668:	f7f9 fc3e 	bl	5ee8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    c66c:	2800      	cmp	r0, #0
    c66e:	daca      	bge.n	c606 <uarte_instance_init+0x54>
			return err;
    c670:	4604      	mov	r4, r0
    c672:	e7f3      	b.n	c65c <uarte_instance_init+0xaa>

0000c674 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    c674:	b510      	push	{r4, lr}
    c676:	4604      	mov	r4, r0
    c678:	2200      	movs	r2, #0
    c67a:	2101      	movs	r1, #1
    c67c:	2002      	movs	r0, #2
    c67e:	f7f7 fcbb 	bl	3ff8 <z_arm_irq_priority_set>
    c682:	2002      	movs	r0, #2
    c684:	f7f7 fc9c 	bl	3fc0 <arch_irq_enable>
    c688:	2100      	movs	r1, #0
    c68a:	4620      	mov	r0, r4
    c68c:	f7ff ff91 	bl	c5b2 <uarte_instance_init>
    c690:	bd10      	pop	{r4, pc}

0000c692 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    c692:	b510      	push	{r4, lr}
    c694:	4604      	mov	r4, r0
    c696:	2200      	movs	r2, #0
    c698:	2101      	movs	r1, #1
    c69a:	2028      	movs	r0, #40	; 0x28
    c69c:	f7f7 fcac 	bl	3ff8 <z_arm_irq_priority_set>
    c6a0:	2028      	movs	r0, #40	; 0x28
    c6a2:	f7f7 fc8d 	bl	3fc0 <arch_irq_enable>
    c6a6:	2100      	movs	r1, #0
    c6a8:	4620      	mov	r0, r4
    c6aa:	f7ff ff82 	bl	c5b2 <uarte_instance_init>
    c6ae:	bd10      	pop	{r4, pc}

0000c6b0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c6b0:	4770      	bx	lr

0000c6b2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    c6b2:	1a40      	subs	r0, r0, r1
}
    c6b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c6b8:	4770      	bx	lr

0000c6ba <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c6ba:	f100 0350 	add.w	r3, r0, #80	; 0x50
    c6be:	009b      	lsls	r3, r3, #2
    c6c0:	b29b      	uxth	r3, r3
    c6c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c6c6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    c6ca:	2200      	movs	r2, #0
    c6cc:	601a      	str	r2, [r3, #0]
    c6ce:	681b      	ldr	r3, [r3, #0]
}
    c6d0:	4770      	bx	lr

0000c6d2 <absolute_time_to_cc>:
}
    c6d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c6d6:	4770      	bx	lr

0000c6d8 <full_int_lock>:
	__asm__ volatile(
    c6d8:	f04f 0320 	mov.w	r3, #32
    c6dc:	f3ef 8011 	mrs	r0, BASEPRI
    c6e0:	f383 8812 	msr	BASEPRI_MAX, r3
    c6e4:	f3bf 8f6f 	isb	sy
}
    c6e8:	4770      	bx	lr

0000c6ea <full_int_unlock>:
	__asm__ volatile(
    c6ea:	f380 8811 	msr	BASEPRI, r0
    c6ee:	f3bf 8f6f 	isb	sy
}
    c6f2:	4770      	bx	lr

0000c6f4 <set_absolute_alarm>:
{
    c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6f6:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c6f8:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    c6fc:	f7f9 fc32 	bl	5f64 <get_comparator>
    c700:	4607      	mov	r7, r0
    c702:	e019      	b.n	c738 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    c704:	2013      	movs	r0, #19
    c706:	f000 fa33 	bl	cb70 <z_impl_k_busy_wait>
}
    c70a:	e022      	b.n	c752 <set_absolute_alarm+0x5e>
		event_clear(chan);
    c70c:	4630      	mov	r0, r6
    c70e:	f7ff ffd4 	bl	c6ba <event_clear>
		event_enable(chan);
    c712:	4630      	mov	r0, r6
    c714:	f7f9 fc2e 	bl	5f74 <event_enable>
		set_comparator(chan, cc_val);
    c718:	4629      	mov	r1, r5
    c71a:	4630      	mov	r0, r6
    c71c:	f7f9 fc18 	bl	5f50 <set_comparator>
		now2 = counter();
    c720:	f7f9 fc3c 	bl	5f9c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c724:	4284      	cmp	r4, r0
    c726:	d01e      	beq.n	c766 <set_absolute_alarm+0x72>
    c728:	1c81      	adds	r1, r0, #2
    c72a:	4628      	mov	r0, r5
    c72c:	f7ff ffc1 	bl	c6b2 <counter_sub>
	} while ((now2 != now) &&
    c730:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c734:	d917      	bls.n	c766 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    c736:	462f      	mov	r7, r5
		now = counter();
    c738:	f7f9 fc30 	bl	5f9c <counter>
    c73c:	4604      	mov	r4, r0
		set_comparator(chan, now);
    c73e:	4601      	mov	r1, r0
    c740:	4630      	mov	r0, r6
    c742:	f7f9 fc05 	bl	5f50 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    c746:	4621      	mov	r1, r4
    c748:	4638      	mov	r0, r7
    c74a:	f7ff ffb2 	bl	c6b2 <counter_sub>
    c74e:	2801      	cmp	r0, #1
    c750:	d0d8      	beq.n	c704 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c752:	1ca7      	adds	r7, r4, #2
    c754:	4639      	mov	r1, r7
    c756:	4628      	mov	r0, r5
    c758:	f7ff ffab 	bl	c6b2 <counter_sub>
    c75c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c760:	d9d4      	bls.n	c70c <set_absolute_alarm+0x18>
			cc_val = now + 2;
    c762:	463d      	mov	r5, r7
    c764:	e7d2      	b.n	c70c <set_absolute_alarm+0x18>
}
    c766:	4628      	mov	r0, r5
    c768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c76a <compare_set>:
{
    c76a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c76c:	b083      	sub	sp, #12
    c76e:	4604      	mov	r4, r0
    c770:	4617      	mov	r7, r2
    c772:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    c774:	f7f9 fc18 	bl	5fa8 <compare_int_lock>
    c778:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    c77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c77c:	9301      	str	r3, [sp, #4]
    c77e:	9b08      	ldr	r3, [sp, #32]
    c780:	9300      	str	r3, [sp, #0]
    c782:	463a      	mov	r2, r7
    c784:	462b      	mov	r3, r5
    c786:	4620      	mov	r0, r4
    c788:	f7f9 fcfe 	bl	6188 <compare_set_nolocks>
    c78c:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    c78e:	4631      	mov	r1, r6
    c790:	4620      	mov	r0, r4
    c792:	f7f9 fc6d 	bl	6070 <compare_int_unlock>
}
    c796:	4628      	mov	r0, r5
    c798:	b003      	add	sp, #12
    c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c79c <sys_clock_cycle_get_32>:
{
    c79c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c79e:	f7f9 fcd3 	bl	6148 <z_nrf_rtc_timer_read>
}
    c7a2:	bd08      	pop	{r3, pc}

0000c7a4 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    c7a4:	b410      	push	{r4}
	*state = &config->states[0];
    c7a6:	6843      	ldr	r3, [r0, #4]
    c7a8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    c7aa:	e001      	b.n	c7b0 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    c7ac:	3408      	adds	r4, #8
    c7ae:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    c7b0:	6814      	ldr	r4, [r2, #0]
    c7b2:	7a03      	ldrb	r3, [r0, #8]
    c7b4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    c7b8:	3b01      	subs	r3, #1
    c7ba:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c7be:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    c7c2:	429c      	cmp	r4, r3
    c7c4:	d804      	bhi.n	c7d0 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    c7c6:	7963      	ldrb	r3, [r4, #5]
    c7c8:	428b      	cmp	r3, r1
    c7ca:	d1ef      	bne.n	c7ac <pinctrl_lookup_state+0x8>
			return 0;
    c7cc:	2000      	movs	r0, #0
    c7ce:	e001      	b.n	c7d4 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    c7d0:	f06f 0001 	mvn.w	r0, #1
}
    c7d4:	bc10      	pop	{r4}
    c7d6:	4770      	bx	lr

0000c7d8 <z_log_msg2_runtime_create>:
{
    c7d8:	b510      	push	{r4, lr}
    c7da:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c7dc:	ac0b      	add	r4, sp, #44	; 0x2c
    c7de:	9405      	str	r4, [sp, #20]
    c7e0:	9403      	str	r4, [sp, #12]
    c7e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c7e4:	9402      	str	r4, [sp, #8]
    c7e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c7e8:	9401      	str	r4, [sp, #4]
    c7ea:	9c08      	ldr	r4, [sp, #32]
    c7ec:	9400      	str	r4, [sp, #0]
    c7ee:	f7f6 ff79 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    c7f2:	b006      	add	sp, #24
    c7f4:	bd10      	pop	{r4, pc}

0000c7f6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    c7f6:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    c7f8:	f7fe fe68 	bl	b4cc <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    c7fc:	bd08      	pop	{r3, pc}

0000c7fe <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    c7fe:	b510      	push	{r4, lr}
    c800:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    c802:	f7f7 faa3 	bl	3d4c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    c806:	f7f7 fb5f 	bl	3ec8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    c80a:	4620      	mov	r0, r4
    c80c:	f7ff fff3 	bl	c7f6 <hw_cc3xx_init_internal>
	return res;
}
    c810:	bd10      	pop	{r4, pc}

0000c812 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c816:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    c81a:	2b08      	cmp	r3, #8
    c81c:	d001      	beq.n	c822 <nrf52_errata_36+0x10>
        return false;
    c81e:	2000      	movs	r0, #0
    c820:	4770      	bx	lr
                        return true;
    c822:	2001      	movs	r0, #1
}
    c824:	4770      	bx	lr

0000c826 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c82a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    c82e:	2b08      	cmp	r3, #8
    c830:	d001      	beq.n	c836 <nrf52_errata_66+0x10>
        return false;
    c832:	2000      	movs	r0, #0
    c834:	4770      	bx	lr
                        return true;
    c836:	2001      	movs	r0, #1
}
    c838:	4770      	bx	lr

0000c83a <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c83a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c83e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c842:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c846:	2a08      	cmp	r2, #8
    c848:	d001      	beq.n	c84e <nrf52_errata_98+0x14>
        return false;
    c84a:	2000      	movs	r0, #0
    c84c:	4770      	bx	lr
                switch(var2)
    c84e:	2b00      	cmp	r3, #0
    c850:	d804      	bhi.n	c85c <nrf52_errata_98+0x22>
    c852:	e8df f003 	tbb	[pc, r3]
    c856:	01          	.byte	0x01
    c857:	00          	.byte	0x00
    c858:	2001      	movs	r0, #1
    c85a:	4770      	bx	lr
                        return false;
    c85c:	2000      	movs	r0, #0
}
    c85e:	4770      	bx	lr

0000c860 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c860:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c864:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c868:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c86c:	2a08      	cmp	r2, #8
    c86e:	d001      	beq.n	c874 <nrf52_errata_103+0x14>
        return false;
    c870:	2000      	movs	r0, #0
    c872:	4770      	bx	lr
                switch(var2)
    c874:	2b00      	cmp	r3, #0
    c876:	d804      	bhi.n	c882 <nrf52_errata_103+0x22>
    c878:	e8df f003 	tbb	[pc, r3]
    c87c:	01          	.byte	0x01
    c87d:	00          	.byte	0x00
    c87e:	2001      	movs	r0, #1
    c880:	4770      	bx	lr
                        return false;
    c882:	2000      	movs	r0, #0
}
    c884:	4770      	bx	lr

0000c886 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c886:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c88a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c88e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c892:	2a08      	cmp	r2, #8
    c894:	d001      	beq.n	c89a <nrf52_errata_115+0x14>
        return false;
    c896:	2000      	movs	r0, #0
    c898:	4770      	bx	lr
                switch(var2)
    c89a:	2b00      	cmp	r3, #0
    c89c:	d804      	bhi.n	c8a8 <nrf52_errata_115+0x22>
    c89e:	e8df f003 	tbb	[pc, r3]
    c8a2:	01          	.byte	0x01
    c8a3:	00          	.byte	0x00
    c8a4:	2001      	movs	r0, #1
    c8a6:	4770      	bx	lr
                        return false;
    c8a8:	2000      	movs	r0, #0
}
    c8aa:	4770      	bx	lr

0000c8ac <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c8ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c8b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c8b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    c8b8:	2a08      	cmp	r2, #8
    c8ba:	d001      	beq.n	c8c0 <nrf52_errata_120+0x14>
        return false;
    c8bc:	2000      	movs	r0, #0
    c8be:	4770      	bx	lr
                switch(var2)
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	d804      	bhi.n	c8ce <nrf52_errata_120+0x22>
    c8c4:	e8df f003 	tbb	[pc, r3]
    c8c8:	01          	.byte	0x01
    c8c9:	00          	.byte	0x00
    c8ca:	2001      	movs	r0, #1
    c8cc:	4770      	bx	lr
                        return false;
    c8ce:	2000      	movs	r0, #0
}
    c8d0:	4770      	bx	lr

0000c8d2 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c8d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c8d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    c8da:	2b08      	cmp	r3, #8
    c8dc:	d001      	beq.n	c8e2 <nrf52_errata_136+0x10>
        return false;
    c8de:	2000      	movs	r0, #0
    c8e0:	4770      	bx	lr
                        return true;
    c8e2:	2001      	movs	r0, #1
}
    c8e4:	4770      	bx	lr

0000c8e6 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c8e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c8ea:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c8ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c8f2:	2a08      	cmp	r2, #8
    c8f4:	d001      	beq.n	c8fa <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    c8f6:	2000      	movs	r0, #0
    c8f8:	4770      	bx	lr
                switch(var2)
    c8fa:	2b04      	cmp	r3, #4
    c8fc:	d801      	bhi.n	c902 <nrf52_configuration_249+0x1c>
    c8fe:	2000      	movs	r0, #0
    c900:	4770      	bx	lr
                        return true;
    c902:	2001      	movs	r0, #1
    #endif
}
    c904:	4770      	bx	lr

0000c906 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    c906:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    c908:	4780      	blx	r0
}
    c90a:	bd08      	pop	{r3, pc}

0000c90c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    c90c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    c90e:	f000 f92f 	bl	cb70 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    c912:	bd08      	pop	{r3, pc}

0000c914 <clock_initial_lfclksrc_get>:
}
    c914:	2000      	movs	r0, #0
    c916:	4770      	bx	lr

0000c918 <clock_lfclksrc_tweak>:
{
    c918:	b538      	push	{r3, r4, r5, lr}
    c91a:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    c91c:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c91e:	2b01      	cmp	r3, #1
    c920:	d002      	beq.n	c928 <clock_lfclksrc_tweak+0x10>
    c922:	b933      	cbnz	r3, c932 <clock_lfclksrc_tweak+0x1a>
    c924:	2301      	movs	r3, #1
    c926:	e000      	b.n	c92a <clock_lfclksrc_tweak+0x12>
    c928:	2301      	movs	r3, #1
    if (!is_correct_clk)
    c92a:	461d      	mov	r5, r3
    c92c:	b11b      	cbz	r3, c936 <clock_lfclksrc_tweak+0x1e>
}
    c92e:	4628      	mov	r0, r5
    c930:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c932:	2300      	movs	r3, #0
    c934:	e7f9      	b.n	c92a <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c936:	2000      	movs	r0, #0
    c938:	f7fa fb90 	bl	705c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    c93c:	f7ff ffea 	bl	c914 <clock_initial_lfclksrc_get>
    c940:	6020      	str	r0, [r4, #0]
    c942:	e7f4      	b.n	c92e <clock_lfclksrc_tweak+0x16>

0000c944 <pin_is_task_output>:
{
    c944:	b510      	push	{r4, lr}
    c946:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    c948:	f7fa fd5a 	bl	7400 <pin_is_output>
    c94c:	b128      	cbz	r0, c95a <pin_is_task_output+0x16>
    c94e:	4620      	mov	r0, r4
    c950:	f7fa fd40 	bl	73d4 <pin_in_use_by_te>
    c954:	b118      	cbz	r0, c95e <pin_is_task_output+0x1a>
    c956:	2001      	movs	r0, #1
    c958:	e000      	b.n	c95c <pin_is_task_output+0x18>
    c95a:	2000      	movs	r0, #0
}
    c95c:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    c95e:	2000      	movs	r0, #0
    c960:	e7fc      	b.n	c95c <pin_is_task_output+0x18>

0000c962 <pin_is_input>:
{
    c962:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    c964:	f7fa fd4c 	bl	7400 <pin_is_output>
    c968:	f080 0001 	eor.w	r0, r0, #1
}
    c96c:	b2c0      	uxtb	r0, r0
    c96e:	bd08      	pop	{r3, pc}

0000c970 <gpiote_polarity_to_trigger>:
}
    c970:	4770      	bx	lr

0000c972 <gpiote_trigger_to_polarity>:
}
    c972:	4770      	bx	lr

0000c974 <is_level>:
}
    c974:	2803      	cmp	r0, #3
    c976:	bf94      	ite	ls
    c978:	2000      	movls	r0, #0
    c97a:	2001      	movhi	r0, #1
    c97c:	4770      	bx	lr

0000c97e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    c97e:	b508      	push	{r3, lr}
  _DoInit();
    c980:	f7fb fd08 	bl	8394 <_DoInit>
}
    c984:	bd08      	pop	{r3, pc}

0000c986 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    c986:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    c988:	f7ff fff9 	bl	c97e <SEGGER_RTT_Init>

	return 0;
}
    c98c:	2000      	movs	r0, #0
    c98e:	bd08      	pop	{r3, pc}

0000c990 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    c990:	b148      	cbz	r0, c9a6 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    c992:	68c3      	ldr	r3, [r0, #12]
    c994:	8818      	ldrh	r0, [r3, #0]
    c996:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c99a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    c99e:	bf14      	ite	ne
    c9a0:	2000      	movne	r0, #0
    c9a2:	2001      	moveq	r0, #1
    c9a4:	4770      	bx	lr
		return false;
    c9a6:	2000      	movs	r0, #0
}
    c9a8:	4770      	bx	lr

0000c9aa <z_log_msg2_runtime_create>:
{
    c9aa:	b510      	push	{r4, lr}
    c9ac:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c9ae:	ac0b      	add	r4, sp, #44	; 0x2c
    c9b0:	9405      	str	r4, [sp, #20]
    c9b2:	9403      	str	r4, [sp, #12]
    c9b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c9b6:	9402      	str	r4, [sp, #8]
    c9b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c9ba:	9401      	str	r4, [sp, #4]
    c9bc:	9c08      	ldr	r4, [sp, #32]
    c9be:	9400      	str	r4, [sp, #0]
    c9c0:	f7f6 fe90 	bl	36e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    c9c4:	b006      	add	sp, #24
    c9c6:	bd10      	pop	{r4, pc}

0000c9c8 <z_early_memset>:
{
    c9c8:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    c9ca:	f7ff fb18 	bl	bffe <memset>
}
    c9ce:	bd08      	pop	{r3, pc}

0000c9d0 <z_early_memcpy>:
{
    c9d0:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    c9d2:	f7ff fae5 	bl	bfa0 <memcpy>
}
    c9d6:	bd08      	pop	{r3, pc}

0000c9d8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    c9d8:	6902      	ldr	r2, [r0, #16]
    c9da:	6943      	ldr	r3, [r0, #20]
    c9dc:	431a      	orrs	r2, r3
    c9de:	f012 0203 	ands.w	r2, r2, #3
    c9e2:	d10d      	bne.n	ca00 <create_free_list+0x28>
	slab->free_list = NULL;
    c9e4:	2100      	movs	r1, #0
    c9e6:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    c9e8:	e005      	b.n	c9f6 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    c9ea:	6981      	ldr	r1, [r0, #24]
    c9ec:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    c9ee:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    c9f0:	6901      	ldr	r1, [r0, #16]
    c9f2:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    c9f4:	3201      	adds	r2, #1
    c9f6:	68c1      	ldr	r1, [r0, #12]
    c9f8:	4291      	cmp	r1, r2
    c9fa:	d8f6      	bhi.n	c9ea <create_free_list+0x12>
	return 0;
    c9fc:	2000      	movs	r0, #0
    c9fe:	4770      	bx	lr
		return -EINVAL;
    ca00:	f06f 0015 	mvn.w	r0, #21
}
    ca04:	4770      	bx	lr

0000ca06 <k_mem_slab_init>:
{
    ca06:	b510      	push	{r4, lr}
    ca08:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    ca0a:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    ca0c:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    ca0e:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    ca10:	2300      	movs	r3, #0
    ca12:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    ca14:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    ca16:	f7ff ffdf 	bl	c9d8 <create_free_list>
	if (rc < 0) {
    ca1a:	2800      	cmp	r0, #0
    ca1c:	db01      	blt.n	ca22 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    ca1e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    ca20:	6064      	str	r4, [r4, #4]
}
    ca22:	bd10      	pop	{r4, pc}

0000ca24 <setup_thread_stack>:
{
    ca24:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    ca26:	3207      	adds	r2, #7
    ca28:	f022 0207 	bic.w	r2, r2, #7
    ca2c:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    ca30:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    ca34:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    ca38:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    ca3c:	2200      	movs	r2, #0
    ca3e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    ca42:	18c8      	adds	r0, r1, r3
    ca44:	bc10      	pop	{r4}
    ca46:	4770      	bx	lr

0000ca48 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ca48:	f3ef 8005 	mrs	r0, IPSR
}
    ca4c:	3800      	subs	r0, #0
    ca4e:	bf18      	it	ne
    ca50:	2001      	movne	r0, #1
    ca52:	4770      	bx	lr

0000ca54 <k_thread_name_get>:
}
    ca54:	3074      	adds	r0, #116	; 0x74
    ca56:	4770      	bx	lr

0000ca58 <z_impl_k_thread_start>:
{
    ca58:	b508      	push	{r3, lr}
	z_sched_start(thread);
    ca5a:	f7fd f96b 	bl	9d34 <z_sched_start>
}
    ca5e:	bd08      	pop	{r3, pc}

0000ca60 <z_init_thread_base>:
{
    ca60:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    ca62:	2400      	movs	r4, #0
    ca64:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    ca66:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    ca68:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    ca6a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    ca6c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    ca6e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    ca70:	61c4      	str	r4, [r0, #28]
}
    ca72:	bc10      	pop	{r4}
    ca74:	4770      	bx	lr

0000ca76 <z_pm_save_idle_exit>:
{
    ca76:	b508      	push	{r3, lr}
	pm_system_resume();
    ca78:	f7f6 ff72 	bl	3960 <pm_system_resume>
	sys_clock_idle_exit();
    ca7c:	f7ff fe18 	bl	c6b0 <sys_clock_idle_exit>
}
    ca80:	bd08      	pop	{r3, pc}

0000ca82 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    ca82:	4288      	cmp	r0, r1
    ca84:	da00      	bge.n	ca88 <new_prio_for_inheritance+0x6>
    ca86:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ca88:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    ca8c:	db01      	blt.n	ca92 <new_prio_for_inheritance+0x10>
    ca8e:	4608      	mov	r0, r1
    ca90:	4770      	bx	lr
    ca92:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    ca96:	4770      	bx	lr

0000ca98 <adjust_owner_prio>:
{
    ca98:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    ca9a:	6880      	ldr	r0, [r0, #8]
    ca9c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    caa0:	428b      	cmp	r3, r1
    caa2:	d101      	bne.n	caa8 <adjust_owner_prio+0x10>
	return false;
    caa4:	2000      	movs	r0, #0
}
    caa6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    caa8:	f7fd fafa 	bl	a0a0 <z_set_prio>
    caac:	e7fb      	b.n	caa6 <adjust_owner_prio+0xe>

0000caae <z_impl_k_mutex_init>:
{
    caae:	4603      	mov	r3, r0
	mutex->owner = NULL;
    cab0:	2000      	movs	r0, #0
    cab2:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    cab4:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    cab6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    cab8:	605b      	str	r3, [r3, #4]
}
    caba:	4770      	bx	lr

0000cabc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    cabc:	b13a      	cbz	r2, cace <z_impl_k_sem_init+0x12>
    cabe:	428a      	cmp	r2, r1
    cac0:	d308      	bcc.n	cad4 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    cac2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    cac4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    cac6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    cac8:	6040      	str	r0, [r0, #4]
	return 0;
    caca:	2000      	movs	r0, #0
    cacc:	4770      	bx	lr
		return -EINVAL;
    cace:	f06f 0015 	mvn.w	r0, #21
    cad2:	4770      	bx	lr
    cad4:	f06f 0015 	mvn.w	r0, #21
}
    cad8:	4770      	bx	lr

0000cada <thread_active_elsewhere>:
}
    cada:	2000      	movs	r0, #0
    cadc:	4770      	bx	lr

0000cade <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    cade:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    cae2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    cae6:	4283      	cmp	r3, r0
    cae8:	d001      	beq.n	caee <z_sched_prio_cmp+0x10>
		return b2 - b1;
    caea:	1ac0      	subs	r0, r0, r3
    caec:	4770      	bx	lr
	return 0;
    caee:	2000      	movs	r0, #0
}
    caf0:	4770      	bx	lr

0000caf2 <z_reschedule_irqlock>:
{
    caf2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    caf4:	4603      	mov	r3, r0
    caf6:	b920      	cbnz	r0, cb02 <z_reschedule_irqlock+0x10>
    caf8:	f3ef 8205 	mrs	r2, IPSR
    cafc:	b942      	cbnz	r2, cb10 <z_reschedule_irqlock+0x1e>
    cafe:	2201      	movs	r2, #1
    cb00:	e000      	b.n	cb04 <z_reschedule_irqlock+0x12>
    cb02:	2200      	movs	r2, #0
	if (resched(key)) {
    cb04:	b932      	cbnz	r2, cb14 <z_reschedule_irqlock+0x22>
    cb06:	f383 8811 	msr	BASEPRI, r3
    cb0a:	f3bf 8f6f 	isb	sy
}
    cb0e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cb10:	2200      	movs	r2, #0
    cb12:	e7f7      	b.n	cb04 <z_reschedule_irqlock+0x12>
    cb14:	4618      	mov	r0, r3
    cb16:	f7f7 fac5 	bl	40a4 <arch_swap>
	return ret;
    cb1a:	e7f8      	b.n	cb0e <z_reschedule_irqlock+0x1c>

0000cb1c <z_priq_dumb_best>:
{
    cb1c:	4603      	mov	r3, r0
	return list->head == list;
    cb1e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb20:	4283      	cmp	r3, r0
    cb22:	d000      	beq.n	cb26 <z_priq_dumb_best+0xa>
}
    cb24:	4770      	bx	lr
	struct k_thread *thread = NULL;
    cb26:	2000      	movs	r0, #0
	return thread;
    cb28:	e7fc      	b.n	cb24 <z_priq_dumb_best+0x8>

0000cb2a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    cb2a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    cb2c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    cb2e:	6083      	str	r3, [r0, #8]
}
    cb30:	4770      	bx	lr

0000cb32 <remove_timeout>:
{
    cb32:	b510      	push	{r4, lr}
    cb34:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    cb36:	f7fe f813 	bl	ab60 <next>
    cb3a:	b148      	cbz	r0, cb50 <remove_timeout+0x1e>
    cb3c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    cb3e:	6920      	ldr	r0, [r4, #16]
    cb40:	6961      	ldr	r1, [r4, #20]
    cb42:	6913      	ldr	r3, [r2, #16]
    cb44:	181b      	adds	r3, r3, r0
    cb46:	6950      	ldr	r0, [r2, #20]
    cb48:	eb41 0100 	adc.w	r1, r1, r0
    cb4c:	6113      	str	r3, [r2, #16]
    cb4e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    cb50:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    cb52:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    cb54:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cb56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cb58:	2300      	movs	r3, #0
    cb5a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    cb5c:	6063      	str	r3, [r4, #4]
}
    cb5e:	bd10      	pop	{r4, pc}

0000cb60 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    cb60:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    cb62:	f7fe faf9 	bl	b158 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    cb66:	bd08      	pop	{r3, pc}

0000cb68 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    cb68:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    cb6a:	f7fe faf5 	bl	b158 <sys_clock_tick_get>
}
    cb6e:	bd08      	pop	{r3, pc}

0000cb70 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    cb70:	b900      	cbnz	r0, cb74 <z_impl_k_busy_wait+0x4>
    cb72:	4770      	bx	lr
{
    cb74:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    cb76:	f7f8 f959 	bl	4e2c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    cb7a:	bd08      	pop	{r3, pc}

0000cb7c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    cb7c:	b510      	push	{r4, lr}
    cb7e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    cb80:	f7fe f910 	bl	ada4 <z_abort_timeout>

	if (inactive) {
    cb84:	b9a0      	cbnz	r0, cbb0 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    cb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cb88:	b10b      	cbz	r3, cb8e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    cb8a:	4620      	mov	r0, r4
    cb8c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    cb8e:	f104 0018 	add.w	r0, r4, #24
    cb92:	f7fd fc91 	bl	a4b8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    cb96:	b158      	cbz	r0, cbb0 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    cb98:	f7fd f876 	bl	9c88 <z_ready_thread>
	__asm__ volatile(
    cb9c:	f04f 0320 	mov.w	r3, #32
    cba0:	f3ef 8011 	mrs	r0, BASEPRI
    cba4:	f383 8812 	msr	BASEPRI_MAX, r3
    cba8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    cbac:	f7ff ffa1 	bl	caf2 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    cbb0:	bd10      	pop	{r4, pc}

0000cbb2 <k_heap_init>:
{
    cbb2:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    cbb4:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    cbb8:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    cbba:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    cbbc:	f7f5 fcd0 	bl	2560 <sys_heap_init>
}
    cbc0:	bd10      	pop	{r4, pc}
	...

0000cbc4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    cbc4:	f7fa b92a 	b.w	6e1c <SystemInit>
