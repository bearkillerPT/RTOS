
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 28 00 20 fd 4e 00 00 33 c4 00 00 b5 4e 00 00     .(. .N..3....N..
  10:	b5 4e 00 00 b5 4e 00 00 b5 4e 00 00 00 00 00 00     .N...N...N......
	...
  2c:	91 46 00 00 b5 4e 00 00 00 00 00 00 39 46 00 00     .F...N......9F..
  3c:	b5 4e 00 00                                         .N..

00000040 <_irq_vector_table>:
  40:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  50:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  60:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  70:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  80:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  90:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  a0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  b0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  c0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  d0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  e0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..
  f0:	71 47 00 00 71 47 00 00 71 47 00 00 71 47 00 00     qG..qG..qG..qG..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <button_pressed>:
    return ret;
}

/* Define a callback function. It is like an ISR that is called when the button is pressed */
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     7a0:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     7a2:	4802      	ldr	r0, [pc, #8]	; (7ac <button_pressed+0xc>)
     7a4:	f009 f892 	bl	98cc <z_impl_k_sem_give>

    k_sem_give(&sem_button);
    // k_sem_take(&sem_button,K_NO_WAIT);
}
     7a8:	bd08      	pop	{r3, pc}
     7aa:	bf00      	nop
     7ac:	200006bc 	.word	0x200006bc

000007b0 <adc_sample>:
{
     7b0:	b510      	push	{r4, lr}
     7b2:	b086      	sub	sp, #24
    const struct adc_sequence sequence = {
     7b4:	2300      	movs	r3, #0
     7b6:	9301      	str	r3, [sp, #4]
     7b8:	9302      	str	r3, [sp, #8]
     7ba:	9303      	str	r3, [sp, #12]
     7bc:	9304      	str	r3, [sp, #16]
     7be:	9305      	str	r3, [sp, #20]
     7c0:	2302      	movs	r3, #2
     7c2:	9302      	str	r3, [sp, #8]
     7c4:	4a0e      	ldr	r2, [pc, #56]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7c6:	9203      	str	r2, [sp, #12]
     7c8:	9304      	str	r3, [sp, #16]
     7ca:	230a      	movs	r3, #10
     7cc:	f88d 3014 	strb.w	r3, [sp, #20]
    if (adc_dev == NULL)
     7d0:	4b0c      	ldr	r3, [pc, #48]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7d2:	6818      	ldr	r0, [r3, #0]
     7d4:	b140      	cbz	r0, 7e8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7d6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7d8:	685b      	ldr	r3, [r3, #4]
     7da:	a901      	add	r1, sp, #4
     7dc:	4798      	blx	r3
    if (ret)
     7de:	4604      	mov	r4, r0
     7e0:	b940      	cbnz	r0, 7f4 <adc_sample+0x44>
}
     7e2:	4620      	mov	r0, r4
     7e4:	b006      	add	sp, #24
     7e6:	bd10      	pop	{r4, pc}
        printk("adc_sample(): error, must bind to adc first \n\r");
     7e8:	4807      	ldr	r0, [pc, #28]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7ea:	f00b fbc2 	bl	bf72 <printk>
        return -1;
     7ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7f2:	e7f6      	b.n	7e2 <adc_sample+0x32>
        printk("adc_read() failed with code %d\n", ret);
     7f4:	4601      	mov	r1, r0
     7f6:	4805      	ldr	r0, [pc, #20]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7f8:	f00b fbbb 	bl	bf72 <printk>
     7fc:	e7f1      	b.n	7e2 <adc_sample+0x32>
     7fe:	bf00      	nop
     800:	200006ac 	.word	0x200006ac
     804:	200006a8 	.word	0x200006a8
     808:	0000d558 	.word	0x0000d558
     80c:	0000d588 	.word	0x0000d588

00000810 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     814:	4605      	mov	r5, r0
     816:	460e      	mov	r6, r1
     818:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     81a:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     81e:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     822:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     826:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     82a:	d136      	bne.n	89a <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     82c:	f004 0330 	and.w	r3, r4, #48	; 0x30
     830:	2b30      	cmp	r3, #48	; 0x30
     832:	d043      	beq.n	8bc <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     834:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     838:	2b02      	cmp	r3, #2
     83a:	d050      	beq.n	8de <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     83c:	f004 0306 	and.w	r3, r4, #6
     840:	2b04      	cmp	r3, #4
     842:	d05d      	beq.n	900 <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     844:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     848:	d002      	beq.n	850 <z_impl_gpio_pin_configure+0x40>
     84a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     84e:	d065      	beq.n	91c <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     850:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     854:	d074      	beq.n	940 <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     856:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     85a:	d005      	beq.n	868 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     85c:	b127      	cbz	r7, 868 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     85e:	f014 0f01 	tst.w	r4, #1
     862:	d001      	beq.n	868 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     864:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     868:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     86c:	f8db 3000 	ldr.w	r3, [fp]
     870:	2701      	movs	r7, #1
     872:	40b7      	lsls	r7, r6
     874:	423b      	tst	r3, r7
     876:	d075      	beq.n	964 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     878:	f014 0f01 	tst.w	r4, #1
     87c:	f000 8084 	beq.w	988 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     880:	f8d8 3000 	ldr.w	r3, [r8]
     884:	433b      	orrs	r3, r7
     886:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     88a:	f8da 3000 	ldr.w	r3, [sl]
     88e:	464a      	mov	r2, r9
     890:	4631      	mov	r1, r6
     892:	4628      	mov	r0, r5
     894:	4798      	blx	r3
}
     896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     89a:	4f3f      	ldr	r7, [pc, #252]	; (998 <z_impl_gpio_pin_configure+0x188>)
     89c:	f240 23b5 	movw	r3, #693	; 0x2b5
     8a0:	463a      	mov	r2, r7
     8a2:	493e      	ldr	r1, [pc, #248]	; (99c <z_impl_gpio_pin_configure+0x18c>)
     8a4:	483e      	ldr	r0, [pc, #248]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8a6:	f00b fce9 	bl	c27c <assert_print>
     8aa:	483e      	ldr	r0, [pc, #248]	; (9a4 <z_impl_gpio_pin_configure+0x194>)
     8ac:	f00b fce6 	bl	c27c <assert_print>
     8b0:	f240 21b5 	movw	r1, #693	; 0x2b5
     8b4:	4638      	mov	r0, r7
     8b6:	f00b fcda 	bl	c26e <assert_post_action>
     8ba:	e7b7      	b.n	82c <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     8bc:	4f36      	ldr	r7, [pc, #216]	; (998 <z_impl_gpio_pin_configure+0x188>)
     8be:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     8c2:	463a      	mov	r2, r7
     8c4:	4938      	ldr	r1, [pc, #224]	; (9a8 <z_impl_gpio_pin_configure+0x198>)
     8c6:	4836      	ldr	r0, [pc, #216]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8c8:	f00b fcd8 	bl	c27c <assert_print>
     8cc:	4837      	ldr	r0, [pc, #220]	; (9ac <z_impl_gpio_pin_configure+0x19c>)
     8ce:	f00b fcd5 	bl	c27c <assert_print>
     8d2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     8d6:	4638      	mov	r0, r7
     8d8:	f00b fcc9 	bl	c26e <assert_post_action>
     8dc:	e7aa      	b.n	834 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     8de:	4f2e      	ldr	r7, [pc, #184]	; (998 <z_impl_gpio_pin_configure+0x188>)
     8e0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     8e4:	463a      	mov	r2, r7
     8e6:	4932      	ldr	r1, [pc, #200]	; (9b0 <z_impl_gpio_pin_configure+0x1a0>)
     8e8:	482d      	ldr	r0, [pc, #180]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8ea:	f00b fcc7 	bl	c27c <assert_print>
     8ee:	4831      	ldr	r0, [pc, #196]	; (9b4 <z_impl_gpio_pin_configure+0x1a4>)
     8f0:	f00b fcc4 	bl	c27c <assert_print>
     8f4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     8f8:	4638      	mov	r0, r7
     8fa:	f00b fcb8 	bl	c26e <assert_post_action>
     8fe:	e79d      	b.n	83c <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     900:	4f25      	ldr	r7, [pc, #148]	; (998 <z_impl_gpio_pin_configure+0x188>)
     902:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     906:	463a      	mov	r2, r7
     908:	492b      	ldr	r1, [pc, #172]	; (9b8 <z_impl_gpio_pin_configure+0x1a8>)
     90a:	4825      	ldr	r0, [pc, #148]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     90c:	f00b fcb6 	bl	c27c <assert_print>
     910:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     914:	4638      	mov	r0, r7
     916:	f00b fcaa 	bl	c26e <assert_post_action>
     91a:	e793      	b.n	844 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     91c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 998 <z_impl_gpio_pin_configure+0x188>
     920:	f240 23c3 	movw	r3, #707	; 0x2c3
     924:	464a      	mov	r2, r9
     926:	4925      	ldr	r1, [pc, #148]	; (9bc <z_impl_gpio_pin_configure+0x1ac>)
     928:	481d      	ldr	r0, [pc, #116]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     92a:	f00b fca7 	bl	c27c <assert_print>
     92e:	4824      	ldr	r0, [pc, #144]	; (9c0 <z_impl_gpio_pin_configure+0x1b0>)
     930:	f00b fca4 	bl	c27c <assert_print>
     934:	f240 21c3 	movw	r1, #707	; 0x2c3
     938:	4648      	mov	r0, r9
     93a:	f00b fc98 	bl	c26e <assert_post_action>
     93e:	e787      	b.n	850 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     940:	f8df 9054 	ldr.w	r9, [pc, #84]	; 998 <z_impl_gpio_pin_configure+0x188>
     944:	f240 23c7 	movw	r3, #711	; 0x2c7
     948:	464a      	mov	r2, r9
     94a:	491e      	ldr	r1, [pc, #120]	; (9c4 <z_impl_gpio_pin_configure+0x1b4>)
     94c:	4814      	ldr	r0, [pc, #80]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     94e:	f00b fc95 	bl	c27c <assert_print>
     952:	481d      	ldr	r0, [pc, #116]	; (9c8 <z_impl_gpio_pin_configure+0x1b8>)
     954:	f00b fc92 	bl	c27c <assert_print>
     958:	f240 21c7 	movw	r1, #711	; 0x2c7
     95c:	4648      	mov	r0, r9
     95e:	f00b fc86 	bl	c26e <assert_post_action>
     962:	e778      	b.n	856 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     964:	f8df b030 	ldr.w	fp, [pc, #48]	; 998 <z_impl_gpio_pin_configure+0x188>
     968:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     96c:	465a      	mov	r2, fp
     96e:	4917      	ldr	r1, [pc, #92]	; (9cc <z_impl_gpio_pin_configure+0x1bc>)
     970:	480b      	ldr	r0, [pc, #44]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     972:	f00b fc83 	bl	c27c <assert_print>
     976:	4816      	ldr	r0, [pc, #88]	; (9d0 <z_impl_gpio_pin_configure+0x1c0>)
     978:	f00b fc80 	bl	c27c <assert_print>
     97c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     980:	4658      	mov	r0, fp
     982:	f00b fc74 	bl	c26e <assert_post_action>
     986:	e777      	b.n	878 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     988:	f8d8 3000 	ldr.w	r3, [r8]
     98c:	ea23 0307 	bic.w	r3, r3, r7
     990:	f8c8 3000 	str.w	r3, [r8]
     994:	e779      	b.n	88a <z_impl_gpio_pin_configure+0x7a>
     996:	bf00      	nop
     998:	0000d5a8 	.word	0x0000d5a8
     99c:	0000d5dc 	.word	0x0000d5dc
     9a0:	0000d63c 	.word	0x0000d63c
     9a4:	0000d65c 	.word	0x0000d65c
     9a8:	0000d680 	.word	0x0000d680
     9ac:	0000d6bc 	.word	0x0000d6bc
     9b0:	0000d6fc 	.word	0x0000d6fc
     9b4:	0000d734 	.word	0x0000d734
     9b8:	0000d788 	.word	0x0000d788
     9bc:	0000d7bc 	.word	0x0000d7bc
     9c0:	0000d804 	.word	0x0000d804
     9c4:	0000d840 	.word	0x0000d840
     9c8:	0000d884 	.word	0x0000d884
     9cc:	0000d8b0 	.word	0x0000d8b0
     9d0:	0000d8f0 	.word	0x0000d8f0

000009d4 <thread_sensor_code>:
    return;
}

/* Thread code implementation */
void thread_sensor_code(void *argA, void *argB, void *argC)
{
     9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     9d8:	b085      	sub	sp, #20
    int64_t fin_time = 0, release_time = 0;

    /* Other variables */
    long int nact = 0;

    printk("Thread sensor init (periodic)\n");
     9da:	4865      	ldr	r0, [pc, #404]	; (b70 <thread_sensor_code+0x19c>)
     9dc:	f00b fac9 	bl	bf72 <printk>
	return z_impl_k_uptime_ticks();
     9e0:	f00c fbc8 	bl	d174 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     9e4:	014a      	lsls	r2, r1, #5
     9e6:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     9ea:	0143      	lsls	r3, r0, #5
     9ec:	1a1b      	subs	r3, r3, r0
     9ee:	eb62 0201 	sbc.w	r2, r2, r1
     9f2:	0092      	lsls	r2, r2, #2
     9f4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     9f8:	009b      	lsls	r3, r3, #2
     9fa:	181e      	adds	r6, r3, r0
     9fc:	eb42 0301 	adc.w	r3, r2, r1
     a00:	00db      	lsls	r3, r3, #3
     a02:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
     a06:	f3c6 3610 	ubfx	r6, r6, #12, #17
     a0a:	ea46 4643 	orr.w	r6, r6, r3, lsl #17
     a0e:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     a10:	f516 767a 	adds.w	r6, r6, #1000	; 0x3e8
     a14:	f143 0700 	adc.w	r7, r3, #0
    long int nact = 0;
     a18:	f04f 0800 	mov.w	r8, #0
     a1c:	e05f      	b.n	ade <thread_sensor_code+0x10a>
        printk("\n\nThread sensor instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());

        err = adc_sample();
        if (err)
        {
            printk("adc_sample() failed with error code %d\n\r", err);
     a1e:	4855      	ldr	r0, [pc, #340]	; (b74 <thread_sensor_code+0x1a0>)
     a20:	f00b faa7 	bl	bf72 <printk>
     a24:	e020      	b.n	a68 <thread_sensor_code+0x94>
                printk("adc reading out of range\n\r");
            }
            else
            {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r", adc_sample_buffer[0], (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023)));
     a26:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     a2a:	fb05 f004 	mul.w	r0, r5, r4
     a2e:	f7ff fcd5 	bl	3dc <__aeabi_i2f>
     a32:	4951      	ldr	r1, [pc, #324]	; (b78 <thread_sensor_code+0x1a4>)
     a34:	f7ff fb64 	bl	100 <__aeabi_fmul>
     a38:	f7ff fd24 	bl	484 <__aeabi_f2uiz>
     a3c:	b282      	uxth	r2, r0
     a3e:	4621      	mov	r1, r4
     a40:	484e      	ldr	r0, [pc, #312]	; (b7c <thread_sensor_code+0x1a8>)
     a42:	f00b fa96 	bl	bf72 <printk>
                sensor_processing = (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023));
     a46:	4b4e      	ldr	r3, [pc, #312]	; (b80 <thread_sensor_code+0x1ac>)
     a48:	8818      	ldrh	r0, [r3, #0]
     a4a:	fb05 f000 	mul.w	r0, r5, r0
     a4e:	f7ff fcc5 	bl	3dc <__aeabi_i2f>
     a52:	4949      	ldr	r1, [pc, #292]	; (b78 <thread_sensor_code+0x1a4>)
     a54:	f7ff fb54 	bl	100 <__aeabi_fmul>
     a58:	f7ff fd14 	bl	484 <__aeabi_f2uiz>
     a5c:	b281      	uxth	r1, r0
     a5e:	4b49      	ldr	r3, [pc, #292]	; (b84 <thread_sensor_code+0x1b0>)
     a60:	8019      	strh	r1, [r3, #0]
                printk("Thread sensor set sensor_processing value to: %d \n", sensor_processing);
     a62:	4849      	ldr	r0, [pc, #292]	; (b88 <thread_sensor_code+0x1b4>)
     a64:	f00b fa85 	bl	bf72 <printk>
	z_impl_k_sem_give(sem);
     a68:	4848      	ldr	r0, [pc, #288]	; (b8c <thread_sensor_code+0x1b8>)
     a6a:	f008 ff2f 	bl	98cc <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     a6e:	f00c fb81 	bl	d174 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     a72:	4602      	mov	r2, r0
     a74:	014b      	lsls	r3, r1, #5
     a76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     a7a:	0140      	lsls	r0, r0, #5
     a7c:	1a84      	subs	r4, r0, r2
     a7e:	eb63 0301 	sbc.w	r3, r3, r1
     a82:	009d      	lsls	r5, r3, #2
     a84:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
     a88:	00a4      	lsls	r4, r4, #2
     a8a:	18a4      	adds	r4, r4, r2
     a8c:	eb45 0501 	adc.w	r5, r5, r1
     a90:	00ed      	lsls	r5, r5, #3
     a92:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
     a96:	f3c4 3410 	ubfx	r4, r4, #12, #17
     a9a:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
     a9e:	0bed      	lsrs	r5, r5, #15
     aa0:	46a1      	mov	r9, r4
        k_sem_give(&sem_sensor_processing);

        /* Wait for next release instant */
        fin_time = k_uptime_get();

        printk("fin time=  %lld, release_time= %lld, sub=%lld", fin_time, release_time,release_time-fin_time );
     aa2:	1b32      	subs	r2, r6, r4
     aa4:	eb67 0305 	sbc.w	r3, r7, r5
     aa8:	9202      	str	r2, [sp, #8]
     aaa:	9303      	str	r3, [sp, #12]
     aac:	9600      	str	r6, [sp, #0]
     aae:	9701      	str	r7, [sp, #4]
     ab0:	4622      	mov	r2, r4
     ab2:	462b      	mov	r3, r5
     ab4:	4836      	ldr	r0, [pc, #216]	; (b90 <thread_sensor_code+0x1bc>)
     ab6:	f00b fa5c 	bl	bf72 <printk>
        if(fin_time - release_time > SAMP_PERIOD_MS){
     aba:	1ba1      	subs	r1, r4, r6
     abc:	eb65 0307 	sbc.w	r3, r5, r7
     ac0:	f240 32e9 	movw	r2, #1001	; 0x3e9
     ac4:	4291      	cmp	r1, r2
     ac6:	f173 0300 	sbcs.w	r3, r3, #0
     aca:	db04      	blt.n	ad6 <thread_sensor_code+0x102>
            release_time += SAMP_PERIOD_MS*5;
     acc:	f241 3388 	movw	r3, #5000	; 0x1388
     ad0:	18f6      	adds	r6, r6, r3
     ad2:	f147 0700 	adc.w	r7, r7, #0
        }
        if (fin_time < release_time)
     ad6:	45b1      	cmp	r9, r6
     ad8:	eb75 0307 	sbcs.w	r3, r5, r7
     adc:	db2e      	blt.n	b3c <thread_sensor_code+0x168>
        printk("\n\nThread sensor instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     ade:	f108 0801 	add.w	r8, r8, #1
     ae2:	f00c fb47 	bl	d174 <z_impl_k_uptime_ticks>
     ae6:	4602      	mov	r2, r0
     ae8:	014b      	lsls	r3, r1, #5
     aea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     aee:	0140      	lsls	r0, r0, #5
     af0:	1a80      	subs	r0, r0, r2
     af2:	eb63 0301 	sbc.w	r3, r3, r1
     af6:	009b      	lsls	r3, r3, #2
     af8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     afc:	0080      	lsls	r0, r0, #2
     afe:	1880      	adds	r0, r0, r2
     b00:	eb43 0301 	adc.w	r3, r3, r1
     b04:	00db      	lsls	r3, r3, #3
     b06:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     b0a:	f3c0 3010 	ubfx	r0, r0, #12, #17
     b0e:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     b12:	0bdb      	lsrs	r3, r3, #15
     b14:	4641      	mov	r1, r8
     b16:	481f      	ldr	r0, [pc, #124]	; (b94 <thread_sensor_code+0x1c0>)
     b18:	f00b fa2b 	bl	bf72 <printk>
        err = adc_sample();
     b1c:	f7ff fe48 	bl	7b0 <adc_sample>
        if (err)
     b20:	4601      	mov	r1, r0
     b22:	2800      	cmp	r0, #0
     b24:	f47f af7b 	bne.w	a1e <thread_sensor_code+0x4a>
            if (adc_sample_buffer[0] > 1023)
     b28:	4b15      	ldr	r3, [pc, #84]	; (b80 <thread_sensor_code+0x1ac>)
     b2a:	881c      	ldrh	r4, [r3, #0]
     b2c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     b30:	f4ff af79 	bcc.w	a26 <thread_sensor_code+0x52>
                printk("adc reading out of range\n\r");
     b34:	4818      	ldr	r0, [pc, #96]	; (b98 <thread_sensor_code+0x1c4>)
     b36:	f00b fa1c 	bl	bf72 <printk>
     b3a:	e795      	b.n	a68 <thread_sensor_code+0x94>
        {
            k_msleep(release_time - fin_time);
     b3c:	1b30      	subs	r0, r6, r4
	return k_sleep(Z_TIMEOUT_MS(ms));
     b3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     b42:	17c1      	asrs	r1, r0, #31
     b44:	03c9      	lsls	r1, r1, #15
     b46:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     b4a:	03c0      	lsls	r0, r0, #15
     b4c:	f240 34e7 	movw	r4, #999	; 0x3e7
     b50:	1900      	adds	r0, r0, r4
     b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b56:	f04f 0300 	mov.w	r3, #0
     b5a:	f141 0100 	adc.w	r1, r1, #0
     b5e:	f7ff fcb1 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     b62:	f00a f9eb 	bl	af3c <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     b66:	f516 767a 	adds.w	r6, r6, #1000	; 0x3e8
     b6a:	f147 0700 	adc.w	r7, r7, #0
     b6e:	e7b6      	b.n	ade <thread_sensor_code+0x10a>
     b70:	0000d904 	.word	0x0000d904
     b74:	0000d960 	.word	0x0000d960
     b78:	3b40300c 	.word	0x3b40300c
     b7c:	0000d9a8 	.word	0x0000d9a8
     b80:	200006ac 	.word	0x200006ac
     b84:	200001de 	.word	0x200001de
     b88:	0000d9cc 	.word	0x0000d9cc
     b8c:	200006dc 	.word	0x200006dc
     b90:	0000da00 	.word	0x0000da00
     b94:	0000d924 	.word	0x0000d924
     b98:	0000d98c 	.word	0x0000d98c

00000b9c <thread_button_code>:
        }
    }
}

void thread_button_code(void *argA, void *argB, void *argC)
{
     b9c:	b538      	push	{r3, r4, r5, lr}
    /* Other variables */
    int ret;

    printk("Thread button init (sporadic, waits on a semaphore by button pressed callback)\n");
     b9e:	489e      	ldr	r0, [pc, #632]	; (e18 <thread_button_code+0x27c>)
     ba0:	f00b f9e7 	bl	bf72 <printk>
     ba4:	e152      	b.n	e4c <thread_button_code+0x2b0>
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ba6:	4d9d      	ldr	r5, [pc, #628]	; (e1c <thread_button_code+0x280>)
     ba8:	f240 4392 	movw	r3, #1170	; 0x492
     bac:	462a      	mov	r2, r5
     bae:	499c      	ldr	r1, [pc, #624]	; (e20 <thread_button_code+0x284>)
     bb0:	489c      	ldr	r0, [pc, #624]	; (e24 <thread_button_code+0x288>)
     bb2:	f00b fb63 	bl	c27c <assert_print>
     bb6:	489c      	ldr	r0, [pc, #624]	; (e28 <thread_button_code+0x28c>)
     bb8:	f00b fb60 	bl	c27c <assert_print>
     bbc:	f240 4192 	movw	r1, #1170	; 0x492
     bc0:	4628      	mov	r0, r5
     bc2:	f00b fb54 	bl	c26e <assert_post_action>
     bc6:	e15c      	b.n	e82 <thread_button_code+0x2e6>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
     bc8:	2400      	movs	r4, #0
     bca:	e160      	b.n	e8e <thread_button_code+0x2f2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bcc:	4d93      	ldr	r5, [pc, #588]	; (e1c <thread_button_code+0x280>)
     bce:	f44f 638d 	mov.w	r3, #1128	; 0x468
     bd2:	462a      	mov	r2, r5
     bd4:	4992      	ldr	r1, [pc, #584]	; (e20 <thread_button_code+0x284>)
     bd6:	4893      	ldr	r0, [pc, #588]	; (e24 <thread_button_code+0x288>)
     bd8:	f00b fb50 	bl	c27c <assert_print>
     bdc:	4892      	ldr	r0, [pc, #584]	; (e28 <thread_button_code+0x28c>)
     bde:	f00b fb4d 	bl	c27c <assert_print>
     be2:	f44f 618d 	mov.w	r1, #1128	; 0x468
     be6:	4628      	mov	r0, r5
     be8:	f00b fb41 	bl	c26e <assert_post_action>
     bec:	e156      	b.n	e9c <thread_button_code+0x300>
	const struct gpio_driver_api *api =
     bee:	488f      	ldr	r0, [pc, #572]	; (e2c <thread_button_code+0x290>)
     bf0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     bf2:	691b      	ldr	r3, [r3, #16]
     bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     bf8:	4798      	blx	r3
     bfa:	e158      	b.n	eae <thread_button_code+0x312>
        k_thread_suspend(thread_processing_tid);
        k_thread_suspend(thread_output_tid);

        ret = gpio_pin_set_dt(&led0, 1);
        if (ret < 0)
            printk("SETTING LED VALUE FAILED");
     bfc:	488c      	ldr	r0, [pc, #560]	; (e30 <thread_button_code+0x294>)
     bfe:	f00b f9b8 	bl	bf72 <printk>
     c02:	e157      	b.n	eb4 <thread_button_code+0x318>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c04:	4d85      	ldr	r5, [pc, #532]	; (e1c <thread_button_code+0x280>)
     c06:	f240 4392 	movw	r3, #1170	; 0x492
     c0a:	462a      	mov	r2, r5
     c0c:	4984      	ldr	r1, [pc, #528]	; (e20 <thread_button_code+0x284>)
     c0e:	4885      	ldr	r0, [pc, #532]	; (e24 <thread_button_code+0x288>)
     c10:	f00b fb34 	bl	c27c <assert_print>
     c14:	4884      	ldr	r0, [pc, #528]	; (e28 <thread_button_code+0x28c>)
     c16:	f00b fb31 	bl	c27c <assert_print>
     c1a:	f240 4192 	movw	r1, #1170	; 0x492
     c1e:	4628      	mov	r0, r5
     c20:	f00b fb25 	bl	c26e <assert_post_action>
     c24:	e14e      	b.n	ec4 <thread_button_code+0x328>
		value = (value != 0) ? 0 : 1;
     c26:	2400      	movs	r4, #0
     c28:	e152      	b.n	ed0 <thread_button_code+0x334>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c2a:	4d7c      	ldr	r5, [pc, #496]	; (e1c <thread_button_code+0x280>)
     c2c:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c30:	462a      	mov	r2, r5
     c32:	497b      	ldr	r1, [pc, #492]	; (e20 <thread_button_code+0x284>)
     c34:	487b      	ldr	r0, [pc, #492]	; (e24 <thread_button_code+0x288>)
     c36:	f00b fb21 	bl	c27c <assert_print>
     c3a:	487b      	ldr	r0, [pc, #492]	; (e28 <thread_button_code+0x28c>)
     c3c:	f00b fb1e 	bl	c27c <assert_print>
     c40:	f44f 618d 	mov.w	r1, #1128	; 0x468
     c44:	4628      	mov	r0, r5
     c46:	f00b fb12 	bl	c26e <assert_post_action>
     c4a:	e148      	b.n	ede <thread_button_code+0x342>
	const struct gpio_driver_api *api =
     c4c:	4877      	ldr	r0, [pc, #476]	; (e2c <thread_button_code+0x290>)
     c4e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     c56:	4798      	blx	r3
     c58:	e14a      	b.n	ef0 <thread_button_code+0x354>
        ret = gpio_pin_set_dt(&led1, 1);
        if (ret < 0)
            printk("SETTING LED VALUE FAILED");
     c5a:	4875      	ldr	r0, [pc, #468]	; (e30 <thread_button_code+0x294>)
     c5c:	f00b f989 	bl	bf72 <printk>
     c60:	e149      	b.n	ef6 <thread_button_code+0x35a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c62:	4d6e      	ldr	r5, [pc, #440]	; (e1c <thread_button_code+0x280>)
     c64:	f240 4392 	movw	r3, #1170	; 0x492
     c68:	462a      	mov	r2, r5
     c6a:	496d      	ldr	r1, [pc, #436]	; (e20 <thread_button_code+0x284>)
     c6c:	486d      	ldr	r0, [pc, #436]	; (e24 <thread_button_code+0x288>)
     c6e:	f00b fb05 	bl	c27c <assert_print>
     c72:	486d      	ldr	r0, [pc, #436]	; (e28 <thread_button_code+0x28c>)
     c74:	f00b fb02 	bl	c27c <assert_print>
     c78:	f240 4192 	movw	r1, #1170	; 0x492
     c7c:	4628      	mov	r0, r5
     c7e:	f00b faf6 	bl	c26e <assert_post_action>
     c82:	e140      	b.n	f06 <thread_button_code+0x36a>
		value = (value != 0) ? 0 : 1;
     c84:	2400      	movs	r4, #0
     c86:	e144      	b.n	f12 <thread_button_code+0x376>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c88:	4d64      	ldr	r5, [pc, #400]	; (e1c <thread_button_code+0x280>)
     c8a:	f44f 638d 	mov.w	r3, #1128	; 0x468
     c8e:	462a      	mov	r2, r5
     c90:	4963      	ldr	r1, [pc, #396]	; (e20 <thread_button_code+0x284>)
     c92:	4864      	ldr	r0, [pc, #400]	; (e24 <thread_button_code+0x288>)
     c94:	f00b faf2 	bl	c27c <assert_print>
     c98:	4863      	ldr	r0, [pc, #396]	; (e28 <thread_button_code+0x28c>)
     c9a:	f00b faef 	bl	c27c <assert_print>
     c9e:	f44f 618d 	mov.w	r1, #1128	; 0x468
     ca2:	4628      	mov	r0, r5
     ca4:	f00b fae3 	bl	c26e <assert_post_action>
     ca8:	e13a      	b.n	f20 <thread_button_code+0x384>
	const struct gpio_driver_api *api =
     caa:	4860      	ldr	r0, [pc, #384]	; (e2c <thread_button_code+0x290>)
     cac:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     cae:	691b      	ldr	r3, [r3, #16]
     cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     cb4:	4798      	blx	r3
     cb6:	e13c      	b.n	f32 <thread_button_code+0x396>
        ret = gpio_pin_set_dt(&led2, 1);
        if (ret < 0)
            printk("SETTING LED VALUE FAILED");
     cb8:	485d      	ldr	r0, [pc, #372]	; (e30 <thread_button_code+0x294>)
     cba:	f00b f95a 	bl	bf72 <printk>
     cbe:	e13b      	b.n	f38 <thread_button_code+0x39c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     cc0:	4d56      	ldr	r5, [pc, #344]	; (e1c <thread_button_code+0x280>)
     cc2:	f240 4392 	movw	r3, #1170	; 0x492
     cc6:	462a      	mov	r2, r5
     cc8:	4955      	ldr	r1, [pc, #340]	; (e20 <thread_button_code+0x284>)
     cca:	4856      	ldr	r0, [pc, #344]	; (e24 <thread_button_code+0x288>)
     ccc:	f00b fad6 	bl	c27c <assert_print>
     cd0:	4855      	ldr	r0, [pc, #340]	; (e28 <thread_button_code+0x28c>)
     cd2:	f00b fad3 	bl	c27c <assert_print>
     cd6:	f240 4192 	movw	r1, #1170	; 0x492
     cda:	4628      	mov	r0, r5
     cdc:	f00b fac7 	bl	c26e <assert_post_action>
     ce0:	e132      	b.n	f48 <thread_button_code+0x3ac>
		value = (value != 0) ? 0 : 1;
     ce2:	2400      	movs	r4, #0
     ce4:	e136      	b.n	f54 <thread_button_code+0x3b8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ce6:	4d4d      	ldr	r5, [pc, #308]	; (e1c <thread_button_code+0x280>)
     ce8:	f44f 638d 	mov.w	r3, #1128	; 0x468
     cec:	462a      	mov	r2, r5
     cee:	494c      	ldr	r1, [pc, #304]	; (e20 <thread_button_code+0x284>)
     cf0:	484c      	ldr	r0, [pc, #304]	; (e24 <thread_button_code+0x288>)
     cf2:	f00b fac3 	bl	c27c <assert_print>
     cf6:	484c      	ldr	r0, [pc, #304]	; (e28 <thread_button_code+0x28c>)
     cf8:	f00b fac0 	bl	c27c <assert_print>
     cfc:	f44f 618d 	mov.w	r1, #1128	; 0x468
     d00:	4628      	mov	r0, r5
     d02:	f00b fab4 	bl	c26e <assert_post_action>
     d06:	e12c      	b.n	f62 <thread_button_code+0x3c6>
	const struct gpio_driver_api *api =
     d08:	4848      	ldr	r0, [pc, #288]	; (e2c <thread_button_code+0x290>)
     d0a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     d0c:	691b      	ldr	r3, [r3, #16]
     d0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     d12:	4798      	blx	r3
     d14:	e12e      	b.n	f74 <thread_button_code+0x3d8>
        ret = gpio_pin_set_dt(&led3, 1);
        if (ret < 0)
            printk("SETTING LED VALUE FAILED");
     d16:	4846      	ldr	r0, [pc, #280]	; (e30 <thread_button_code+0x294>)
     d18:	f00b f92b 	bl	bf72 <printk>
     d1c:	e12d      	b.n	f7a <thread_button_code+0x3de>
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d1e:	4c3f      	ldr	r4, [pc, #252]	; (e1c <thread_button_code+0x280>)
     d20:	f240 43bc 	movw	r3, #1212	; 0x4bc
     d24:	4622      	mov	r2, r4
     d26:	493e      	ldr	r1, [pc, #248]	; (e20 <thread_button_code+0x284>)
     d28:	483e      	ldr	r0, [pc, #248]	; (e24 <thread_button_code+0x288>)
     d2a:	f00b faa7 	bl	c27c <assert_print>
     d2e:	483e      	ldr	r0, [pc, #248]	; (e28 <thread_button_code+0x28c>)
     d30:	f00b faa4 	bl	c27c <assert_print>
     d34:	f240 41bc 	movw	r1, #1212	; 0x4bc
     d38:	4620      	mov	r0, r4
     d3a:	f00b fa98 	bl	c26e <assert_post_action>
     d3e:	e035      	b.n	dac <thread_button_code+0x210>
     d40:	4c36      	ldr	r4, [pc, #216]	; (e1c <thread_button_code+0x280>)
     d42:	f240 43bc 	movw	r3, #1212	; 0x4bc
     d46:	4622      	mov	r2, r4
     d48:	4935      	ldr	r1, [pc, #212]	; (e20 <thread_button_code+0x284>)
     d4a:	4836      	ldr	r0, [pc, #216]	; (e24 <thread_button_code+0x288>)
     d4c:	f00b fa96 	bl	c27c <assert_print>
     d50:	4835      	ldr	r0, [pc, #212]	; (e28 <thread_button_code+0x28c>)
     d52:	f00b fa93 	bl	c27c <assert_print>
     d56:	f240 41bc 	movw	r1, #1212	; 0x4bc
     d5a:	4620      	mov	r0, r4
     d5c:	f00b fa87 	bl	c26e <assert_post_action>
     d60:	e030      	b.n	dc4 <thread_button_code+0x228>
     d62:	4c2e      	ldr	r4, [pc, #184]	; (e1c <thread_button_code+0x280>)
     d64:	f240 43bc 	movw	r3, #1212	; 0x4bc
     d68:	4622      	mov	r2, r4
     d6a:	492d      	ldr	r1, [pc, #180]	; (e20 <thread_button_code+0x284>)
     d6c:	482d      	ldr	r0, [pc, #180]	; (e24 <thread_button_code+0x288>)
     d6e:	f00b fa85 	bl	c27c <assert_print>
     d72:	482d      	ldr	r0, [pc, #180]	; (e28 <thread_button_code+0x28c>)
     d74:	f00b fa82 	bl	c27c <assert_print>
     d78:	f240 41bc 	movw	r1, #1212	; 0x4bc
     d7c:	4620      	mov	r0, r4
     d7e:	f00b fa76 	bl	c26e <assert_post_action>
     d82:	e02b      	b.n	ddc <thread_button_code+0x240>
	const struct gpio_driver_api *api =
     d84:	4829      	ldr	r0, [pc, #164]	; (e2c <thread_button_code+0x290>)
     d86:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
     d88:	695b      	ldr	r3, [r3, #20]
     d8a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     d8e:	4798      	blx	r3
     d90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     d94:	2100      	movs	r1, #0
     d96:	f00a f8d1 	bl	af3c <z_impl_k_sleep>
        // k_msleep(SLEEP_TIME_MS);

        for (size_t i = 0; i < 10; i++)
     d9a:	3501      	adds	r5, #1
     d9c:	2d09      	cmp	r5, #9
     d9e:	d849      	bhi.n	e34 <thread_button_code+0x298>
	const struct gpio_driver_config *const cfg =
     da0:	4b22      	ldr	r3, [pc, #136]	; (e2c <thread_button_code+0x290>)
     da2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     daa:	d0b8      	beq.n	d1e <thread_button_code+0x182>
	const struct gpio_driver_api *api =
     dac:	4c1f      	ldr	r4, [pc, #124]	; (e2c <thread_button_code+0x290>)
     dae:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     db0:	695b      	ldr	r3, [r3, #20]
     db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     db6:	4620      	mov	r0, r4
     db8:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     dba:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     dc2:	d0bd      	beq.n	d40 <thread_button_code+0x1a4>
	const struct gpio_driver_api *api =
     dc4:	4c19      	ldr	r4, [pc, #100]	; (e2c <thread_button_code+0x290>)
     dc6:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     dc8:	695b      	ldr	r3, [r3, #20]
     dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     dce:	4620      	mov	r0, r4
     dd0:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     dd2:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     dda:	d0c2      	beq.n	d62 <thread_button_code+0x1c6>
	const struct gpio_driver_api *api =
     ddc:	4c13      	ldr	r4, [pc, #76]	; (e2c <thread_button_code+0x290>)
     dde:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     de0:	695b      	ldr	r3, [r3, #20]
     de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     de6:	4620      	mov	r0, r4
     de8:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     dea:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     df2:	d1c7      	bne.n	d84 <thread_button_code+0x1e8>
     df4:	4c09      	ldr	r4, [pc, #36]	; (e1c <thread_button_code+0x280>)
     df6:	f240 43bc 	movw	r3, #1212	; 0x4bc
     dfa:	4622      	mov	r2, r4
     dfc:	4908      	ldr	r1, [pc, #32]	; (e20 <thread_button_code+0x284>)
     dfe:	4809      	ldr	r0, [pc, #36]	; (e24 <thread_button_code+0x288>)
     e00:	f00b fa3c 	bl	c27c <assert_print>
     e04:	4808      	ldr	r0, [pc, #32]	; (e28 <thread_button_code+0x28c>)
     e06:	f00b fa39 	bl	c27c <assert_print>
     e0a:	f240 41bc 	movw	r1, #1212	; 0x4bc
     e0e:	4620      	mov	r0, r4
     e10:	f00b fa2d 	bl	c26e <assert_post_action>
     e14:	e7b6      	b.n	d84 <thread_button_code+0x1e8>
     e16:	bf00      	nop
     e18:	0000da30 	.word	0x0000da30
     e1c:	0000d5a8 	.word	0x0000d5a8
     e20:	0000d8b0 	.word	0x0000d8b0
     e24:	0000d63c 	.word	0x0000d63c
     e28:	0000d8f0 	.word	0x0000d8f0
     e2c:	0000d284 	.word	0x0000d284
     e30:	0000da80 	.word	0x0000da80
            gpio_pin_toggle_dt(&led2);
            gpio_pin_toggle_dt(&led3);
            k_msleep(SLEEP_TIME_MS);
        }

        k_thread_resume(thread_sensor_tid);
     e34:	4b52      	ldr	r3, [pc, #328]	; (f80 <thread_button_code+0x3e4>)
     e36:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_resume(thread);
     e38:	f009 fa82 	bl	a340 <z_impl_k_thread_resume>
        k_thread_resume(thread_processing_tid);
     e3c:	4b51      	ldr	r3, [pc, #324]	; (f84 <thread_button_code+0x3e8>)
     e3e:	6818      	ldr	r0, [r3, #0]
     e40:	f009 fa7e 	bl	a340 <z_impl_k_thread_resume>
        k_thread_resume(thread_output_tid);
     e44:	4b50      	ldr	r3, [pc, #320]	; (f88 <thread_button_code+0x3ec>)
     e46:	6818      	ldr	r0, [r3, #0]
     e48:	f009 fa7a 	bl	a340 <z_impl_k_thread_resume>
	return z_impl_k_sem_take(sem, timeout);
     e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e54:	484d      	ldr	r0, [pc, #308]	; (f8c <thread_button_code+0x3f0>)
     e56:	f008 fd7d 	bl	9954 <z_impl_k_sem_take>
        k_thread_suspend(thread_sensor_tid);
     e5a:	4b49      	ldr	r3, [pc, #292]	; (f80 <thread_button_code+0x3e4>)
     e5c:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
     e5e:	f009 fcd3 	bl	a808 <z_impl_k_thread_suspend>
        k_thread_suspend(thread_processing_tid);
     e62:	4b48      	ldr	r3, [pc, #288]	; (f84 <thread_button_code+0x3e8>)
     e64:	6818      	ldr	r0, [r3, #0]
     e66:	f009 fccf 	bl	a808 <z_impl_k_thread_suspend>
        k_thread_suspend(thread_output_tid);
     e6a:	4b47      	ldr	r3, [pc, #284]	; (f88 <thread_button_code+0x3ec>)
     e6c:	6818      	ldr	r0, [r3, #0]
     e6e:	f009 fccb 	bl	a808 <z_impl_k_thread_suspend>
	const struct gpio_driver_config *const cfg =
     e72:	4b47      	ldr	r3, [pc, #284]	; (f90 <thread_button_code+0x3f4>)
     e74:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     e76:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e78:	6813      	ldr	r3, [r2, #0]
     e7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e7e:	f43f ae92 	beq.w	ba6 <thread_button_code+0xa>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     e82:	6823      	ldr	r3, [r4, #0]
     e84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e88:	f47f ae9e 	bne.w	bc8 <thread_button_code+0x2c>
     e8c:	2401      	movs	r4, #1
	const struct gpio_driver_config *const cfg =
     e8e:	4b40      	ldr	r3, [pc, #256]	; (f90 <thread_button_code+0x3f4>)
     e90:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     e98:	f43f ae98 	beq.w	bcc <thread_button_code+0x30>
	if (value != 0)	{
     e9c:	2c00      	cmp	r4, #0
     e9e:	f43f aea6 	beq.w	bee <thread_button_code+0x52>
	const struct gpio_driver_api *api =
     ea2:	483b      	ldr	r0, [pc, #236]	; (f90 <thread_button_code+0x3f4>)
     ea4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ea6:	68db      	ldr	r3, [r3, #12]
     ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     eac:	4798      	blx	r3
        if (ret < 0)
     eae:	2800      	cmp	r0, #0
     eb0:	f6ff aea4 	blt.w	bfc <thread_button_code+0x60>
	const struct gpio_driver_config *const cfg =
     eb4:	4b36      	ldr	r3, [pc, #216]	; (f90 <thread_button_code+0x3f4>)
     eb6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     eb8:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eba:	6813      	ldr	r3, [r2, #0]
     ebc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ec0:	f43f aea0 	beq.w	c04 <thread_button_code+0x68>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     ec4:	6823      	ldr	r3, [r4, #0]
     ec6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     eca:	f47f aeac 	bne.w	c26 <thread_button_code+0x8a>
     ece:	2401      	movs	r4, #1
	const struct gpio_driver_config *const cfg =
     ed0:	4b2f      	ldr	r3, [pc, #188]	; (f90 <thread_button_code+0x3f4>)
     ed2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     eda:	f43f aea6 	beq.w	c2a <thread_button_code+0x8e>
	if (value != 0)	{
     ede:	2c00      	cmp	r4, #0
     ee0:	f43f aeb4 	beq.w	c4c <thread_button_code+0xb0>
	const struct gpio_driver_api *api =
     ee4:	482a      	ldr	r0, [pc, #168]	; (f90 <thread_button_code+0x3f4>)
     ee6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ee8:	68db      	ldr	r3, [r3, #12]
     eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eee:	4798      	blx	r3
        if (ret < 0)
     ef0:	2800      	cmp	r0, #0
     ef2:	f6ff aeb2 	blt.w	c5a <thread_button_code+0xbe>
	const struct gpio_driver_config *const cfg =
     ef6:	4b26      	ldr	r3, [pc, #152]	; (f90 <thread_button_code+0x3f4>)
     ef8:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     efa:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     efc:	6813      	ldr	r3, [r2, #0]
     efe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f02:	f43f aeae 	beq.w	c62 <thread_button_code+0xc6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f06:	6823      	ldr	r3, [r4, #0]
     f08:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f0c:	f47f aeba 	bne.w	c84 <thread_button_code+0xe8>
     f10:	2401      	movs	r4, #1
	const struct gpio_driver_config *const cfg =
     f12:	4b1f      	ldr	r3, [pc, #124]	; (f90 <thread_button_code+0x3f4>)
     f14:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     f1c:	f43f aeb4 	beq.w	c88 <thread_button_code+0xec>
	if (value != 0)	{
     f20:	2c00      	cmp	r4, #0
     f22:	f43f aec2 	beq.w	caa <thread_button_code+0x10e>
	const struct gpio_driver_api *api =
     f26:	481a      	ldr	r0, [pc, #104]	; (f90 <thread_button_code+0x3f4>)
     f28:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f2a:	68db      	ldr	r3, [r3, #12]
     f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     f30:	4798      	blx	r3
        if (ret < 0)
     f32:	2800      	cmp	r0, #0
     f34:	f6ff aec0 	blt.w	cb8 <thread_button_code+0x11c>
	const struct gpio_driver_config *const cfg =
     f38:	4b15      	ldr	r3, [pc, #84]	; (f90 <thread_button_code+0x3f4>)
     f3a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     f3c:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f3e:	6813      	ldr	r3, [r2, #0]
     f40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f44:	f43f aebc 	beq.w	cc0 <thread_button_code+0x124>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f48:	6823      	ldr	r3, [r4, #0]
     f4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f4e:	f47f aec8 	bne.w	ce2 <thread_button_code+0x146>
     f52:	2401      	movs	r4, #1
	const struct gpio_driver_config *const cfg =
     f54:	4b0e      	ldr	r3, [pc, #56]	; (f90 <thread_button_code+0x3f4>)
     f56:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     f5e:	f43f aec2 	beq.w	ce6 <thread_button_code+0x14a>
	if (value != 0)	{
     f62:	2c00      	cmp	r4, #0
     f64:	f43f aed0 	beq.w	d08 <thread_button_code+0x16c>
	const struct gpio_driver_api *api =
     f68:	4809      	ldr	r0, [pc, #36]	; (f90 <thread_button_code+0x3f4>)
     f6a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     f6c:	68db      	ldr	r3, [r3, #12]
     f6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     f72:	4798      	blx	r3
        if (ret < 0)
     f74:	2800      	cmp	r0, #0
     f76:	f6ff aece 	blt.w	d16 <thread_button_code+0x17a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     f7a:	2500      	movs	r5, #0
     f7c:	e70e      	b.n	d9c <thread_button_code+0x200>
     f7e:	bf00      	nop
     f80:	200006f8 	.word	0x200006f8
     f84:	200006f4 	.word	0x200006f4
     f88:	200006f0 	.word	0x200006f0
     f8c:	200006bc 	.word	0x200006bc
     f90:	0000d284 	.word	0x0000d284

00000f94 <thread_output_code>:
{
     f94:	b570      	push	{r4, r5, r6, lr}
    printk("Thread output init (sporadic, waits on a semaphore by task A)\n");
     f96:	485b      	ldr	r0, [pc, #364]	; (1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
     f98:	f00a ffeb 	bl	bf72 <printk>
    long int nact = 0;
     f9c:	2400      	movs	r4, #0
     f9e:	e0c8      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fa0:	4e59      	ldr	r6, [pc, #356]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     fa2:	f240 4392 	movw	r3, #1170	; 0x492
     fa6:	4632      	mov	r2, r6
     fa8:	4958      	ldr	r1, [pc, #352]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
     faa:	4859      	ldr	r0, [pc, #356]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     fac:	f00b f966 	bl	c27c <assert_print>
     fb0:	4858      	ldr	r0, [pc, #352]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
     fb2:	f00b f963 	bl	c27c <assert_print>
     fb6:	f240 4192 	movw	r1, #1170	; 0x492
     fba:	4630      	mov	r0, r6
     fbc:	f00b f957 	bl	c26e <assert_post_action>
     fc0:	e0ee      	b.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
		value = (value != 0) ? 0 : 1;
     fc2:	2500      	movs	r5, #0
     fc4:	e0f2      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fc6:	4e50      	ldr	r6, [pc, #320]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     fc8:	f44f 638d 	mov.w	r3, #1128	; 0x468
     fcc:	4632      	mov	r2, r6
     fce:	494f      	ldr	r1, [pc, #316]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
     fd0:	484f      	ldr	r0, [pc, #316]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     fd2:	f00b f953 	bl	c27c <assert_print>
     fd6:	484f      	ldr	r0, [pc, #316]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
     fd8:	f00b f950 	bl	c27c <assert_print>
     fdc:	f44f 618d 	mov.w	r1, #1128	; 0x468
     fe0:	4630      	mov	r0, r6
     fe2:	f00b f944 	bl	c26e <assert_post_action>
     fe6:	e0e8      	b.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
	const struct gpio_driver_api *api =
     fe8:	484b      	ldr	r0, [pc, #300]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     fea:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     fec:	691b      	ldr	r3, [r3, #16]
     fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ff2:	4798      	blx	r3
     ff4:	e0ea      	b.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
                printk("SETTING LED VALUE FAILED");
     ff6:	4849      	ldr	r0, [pc, #292]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     ff8:	f00a ffbb 	bl	bf72 <printk>
     ffc:	e0e9      	b.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ffe:	4e42      	ldr	r6, [pc, #264]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1000:	f240 4392 	movw	r3, #1170	; 0x492
    1004:	4632      	mov	r2, r6
    1006:	4941      	ldr	r1, [pc, #260]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    1008:	4841      	ldr	r0, [pc, #260]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    100a:	f00b f937 	bl	c27c <assert_print>
    100e:	4841      	ldr	r0, [pc, #260]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    1010:	f00b f934 	bl	c27c <assert_print>
    1014:	f240 4192 	movw	r1, #1170	; 0x492
    1018:	4630      	mov	r0, r6
    101a:	f00b f928 	bl	c26e <assert_post_action>
    101e:	e0e0      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
		value = (value != 0) ? 0 : 1;
    1020:	2500      	movs	r5, #0
    1022:	e0e4      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1024:	4e38      	ldr	r6, [pc, #224]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1026:	f44f 638d 	mov.w	r3, #1128	; 0x468
    102a:	4632      	mov	r2, r6
    102c:	4937      	ldr	r1, [pc, #220]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    102e:	4838      	ldr	r0, [pc, #224]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1030:	f00b f924 	bl	c27c <assert_print>
    1034:	4837      	ldr	r0, [pc, #220]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    1036:	f00b f921 	bl	c27c <assert_print>
    103a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    103e:	4630      	mov	r0, r6
    1040:	f00b f915 	bl	c26e <assert_post_action>
    1044:	e0da      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
	const struct gpio_driver_api *api =
    1046:	4834      	ldr	r0, [pc, #208]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1048:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    104a:	691b      	ldr	r3, [r3, #16]
    104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1050:	4798      	blx	r3
    1052:	e0dc      	b.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
                printk("SETTING LED VALUE FAILED");
    1054:	4831      	ldr	r0, [pc, #196]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    1056:	f00a ff8c 	bl	bf72 <printk>
    105a:	e0db      	b.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    105c:	4e2a      	ldr	r6, [pc, #168]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    105e:	f240 4392 	movw	r3, #1170	; 0x492
    1062:	4632      	mov	r2, r6
    1064:	4929      	ldr	r1, [pc, #164]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    1066:	482a      	ldr	r0, [pc, #168]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1068:	f00b f908 	bl	c27c <assert_print>
    106c:	4829      	ldr	r0, [pc, #164]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    106e:	f00b f905 	bl	c27c <assert_print>
    1072:	f240 4192 	movw	r1, #1170	; 0x492
    1076:	4630      	mov	r0, r6
    1078:	f00b f8f9 	bl	c26e <assert_post_action>
    107c:	e0d2      	b.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
		value = (value != 0) ? 0 : 1;
    107e:	2500      	movs	r5, #0
    1080:	e0d6      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1082:	4e21      	ldr	r6, [pc, #132]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1084:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1088:	4632      	mov	r2, r6
    108a:	4920      	ldr	r1, [pc, #128]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    108c:	4820      	ldr	r0, [pc, #128]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    108e:	f00b f8f5 	bl	c27c <assert_print>
    1092:	4820      	ldr	r0, [pc, #128]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    1094:	f00b f8f2 	bl	c27c <assert_print>
    1098:	f44f 618d 	mov.w	r1, #1128	; 0x468
    109c:	4630      	mov	r0, r6
    109e:	f00b f8e6 	bl	c26e <assert_post_action>
    10a2:	e0cc      	b.n	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
	const struct gpio_driver_api *api =
    10a4:	481c      	ldr	r0, [pc, #112]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    10a6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    10a8:	691b      	ldr	r3, [r3, #16]
    10aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    10ae:	4798      	blx	r3
    10b0:	e0ce      	b.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
                printk("SETTING LED VALUE FAILED");
    10b2:	481a      	ldr	r0, [pc, #104]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10b4:	f00a ff5d 	bl	bf72 <printk>
    10b8:	e0cd      	b.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10ba:	4e13      	ldr	r6, [pc, #76]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    10bc:	f240 4392 	movw	r3, #1170	; 0x492
    10c0:	4632      	mov	r2, r6
    10c2:	4912      	ldr	r1, [pc, #72]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    10c4:	4812      	ldr	r0, [pc, #72]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10c6:	f00b f8d9 	bl	c27c <assert_print>
    10ca:	4812      	ldr	r0, [pc, #72]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10cc:	f00b f8d6 	bl	c27c <assert_print>
    10d0:	f240 4192 	movw	r1, #1170	; 0x492
    10d4:	4630      	mov	r0, r6
    10d6:	f00b f8ca 	bl	c26e <assert_post_action>
    10da:	e0c4      	b.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
		value = (value != 0) ? 0 : 1;
    10dc:	2500      	movs	r5, #0
    10de:	e0c8      	b.n	1272 <CONFIG_FPROTECT_BLOCK_SIZE+0x272>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10e0:	4e09      	ldr	r6, [pc, #36]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    10e2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    10e6:	4632      	mov	r2, r6
    10e8:	4908      	ldr	r1, [pc, #32]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
    10ea:	4809      	ldr	r0, [pc, #36]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10ec:	f00b f8c6 	bl	c27c <assert_print>
    10f0:	4808      	ldr	r0, [pc, #32]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10f2:	f00b f8c3 	bl	c27c <assert_print>
    10f6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    10fa:	4630      	mov	r0, r6
    10fc:	f00b f8b7 	bl	c26e <assert_post_action>
    1100:	e0be      	b.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    1102:	bf00      	nop
    1104:	0000da9c 	.word	0x0000da9c
    1108:	0000d5a8 	.word	0x0000d5a8
    110c:	0000d8b0 	.word	0x0000d8b0
    1110:	0000d63c 	.word	0x0000d63c
    1114:	0000d8f0 	.word	0x0000d8f0
    1118:	0000d284 	.word	0x0000d284
    111c:	0000da80 	.word	0x0000da80
	const struct gpio_driver_api *api =
    1120:	48a7      	ldr	r0, [pc, #668]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1122:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1124:	691b      	ldr	r3, [r3, #16]
    1126:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    112a:	4798      	blx	r3
            if (ret < 0)
    112c:	2800      	cmp	r0, #0
    112e:	f2c0 80b1 	blt.w	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
	return z_impl_k_sem_take(sem, timeout);
    1132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    113a:	48a2      	ldr	r0, [pc, #648]	; (13c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c4>)
    113c:	f008 fc0a 	bl	9954 <z_impl_k_sem_take>
        printk("Thread output instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    1140:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
    1142:	f00c f817 	bl	d174 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    1146:	4602      	mov	r2, r0
    1148:	014b      	lsls	r3, r1, #5
    114a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    114e:	0140      	lsls	r0, r0, #5
    1150:	1a80      	subs	r0, r0, r2
    1152:	eb63 0301 	sbc.w	r3, r3, r1
    1156:	009b      	lsls	r3, r3, #2
    1158:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    115c:	0080      	lsls	r0, r0, #2
    115e:	1880      	adds	r0, r0, r2
    1160:	eb43 0301 	adc.w	r3, r3, r1
    1164:	00db      	lsls	r3, r3, #3
    1166:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    116a:	f3c0 3010 	ubfx	r0, r0, #12, #17
    116e:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    1172:	0bdb      	lsrs	r3, r3, #15
    1174:	4621      	mov	r1, r4
    1176:	4894      	ldr	r0, [pc, #592]	; (13c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c8>)
    1178:	f00a fefb 	bl	bf72 <printk>
        printk("Task output read processing_output value: %d\n", processing_output);
    117c:	4d93      	ldr	r5, [pc, #588]	; (13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>)
    117e:	8829      	ldrh	r1, [r5, #0]
    1180:	4893      	ldr	r0, [pc, #588]	; (13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>)
    1182:	f00a fef6 	bl	bf72 <printk>
        if (processing_output < 1000)
    1186:	882b      	ldrh	r3, [r5, #0]
    1188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    118c:	f080 8086 	bcs.w	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
	const struct gpio_driver_config *const cfg =
    1190:	4b8b      	ldr	r3, [pc, #556]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1192:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1194:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1196:	6813      	ldr	r3, [r2, #0]
    1198:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    119c:	f43f af00 	beq.w	fa0 <thread_output_code+0xc>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    11a0:	682b      	ldr	r3, [r5, #0]
    11a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    11a6:	f47f af0c 	bne.w	fc2 <thread_output_code+0x2e>
    11aa:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    11ac:	4b84      	ldr	r3, [pc, #528]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    11ae:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    11b6:	f43f af06 	beq.w	fc6 <thread_output_code+0x32>
	if (value != 0)	{
    11ba:	2d00      	cmp	r5, #0
    11bc:	f43f af14 	beq.w	fe8 <thread_output_code+0x54>
	const struct gpio_driver_api *api =
    11c0:	487f      	ldr	r0, [pc, #508]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    11c2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    11c4:	68db      	ldr	r3, [r3, #12]
    11c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    11ca:	4798      	blx	r3
            if (ret < 0)
    11cc:	2800      	cmp	r0, #0
    11ce:	f6ff af12 	blt.w	ff6 <thread_output_code+0x62>
	const struct gpio_driver_config *const cfg =
    11d2:	4b7b      	ldr	r3, [pc, #492]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    11d4:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    11d6:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11d8:	6813      	ldr	r3, [r2, #0]
    11da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    11de:	f43f af0e 	beq.w	ffe <thread_output_code+0x6a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    11e2:	682b      	ldr	r3, [r5, #0]
    11e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    11e8:	f47f af1a 	bne.w	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    11ec:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    11ee:	4b74      	ldr	r3, [pc, #464]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    11f0:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11f2:	681b      	ldr	r3, [r3, #0]
    11f4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    11f8:	f43f af14 	beq.w	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
	if (value != 0)	{
    11fc:	2d00      	cmp	r5, #0
    11fe:	f43f af22 	beq.w	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
	const struct gpio_driver_api *api =
    1202:	486f      	ldr	r0, [pc, #444]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1204:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1206:	68db      	ldr	r3, [r3, #12]
    1208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    120c:	4798      	blx	r3
            if (ret < 0)
    120e:	2800      	cmp	r0, #0
    1210:	f6ff af20 	blt.w	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
	const struct gpio_driver_config *const cfg =
    1214:	4b6a      	ldr	r3, [pc, #424]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1216:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1218:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    121a:	6813      	ldr	r3, [r2, #0]
    121c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1220:	f43f af1c 	beq.w	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1224:	682b      	ldr	r3, [r5, #0]
    1226:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    122a:	f47f af28 	bne.w	107e <CONFIG_FPROTECT_BLOCK_SIZE+0x7e>
    122e:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1230:	4b63      	ldr	r3, [pc, #396]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1232:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    123a:	f43f af22 	beq.w	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
	if (value != 0)	{
    123e:	2d00      	cmp	r5, #0
    1240:	f43f af30 	beq.w	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
	const struct gpio_driver_api *api =
    1244:	485e      	ldr	r0, [pc, #376]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1246:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1248:	68db      	ldr	r3, [r3, #12]
    124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    124e:	4798      	blx	r3
            if (ret < 0)
    1250:	2800      	cmp	r0, #0
    1252:	f6ff af2e 	blt.w	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
	const struct gpio_driver_config *const cfg =
    1256:	4b5a      	ldr	r3, [pc, #360]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1258:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    125a:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    125c:	6813      	ldr	r3, [r2, #0]
    125e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1262:	f43f af2a 	beq.w	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1266:	682b      	ldr	r3, [r5, #0]
    1268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    126c:	f47f af36 	bne.w	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
    1270:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1272:	4b53      	ldr	r3, [pc, #332]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1274:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1276:	681b      	ldr	r3, [r3, #0]
    1278:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    127c:	f43f af30 	beq.w	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
	if (value != 0)	{
    1280:	2d00      	cmp	r5, #0
    1282:	f43f af4d 	beq.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
	const struct gpio_driver_api *api =
    1286:	484e      	ldr	r0, [pc, #312]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1288:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    128a:	68db      	ldr	r3, [r3, #12]
    128c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1290:	4798      	blx	r3
    1292:	e74b      	b.n	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
                printk("SETTING LED VALUE FAILED");
    1294:	484f      	ldr	r0, [pc, #316]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    1296:	f00a fe6c 	bl	bf72 <printk>
    129a:	e74a      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
        else if (processing_output < 2000)
    129c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    12a0:	f0c0 809a 	bcc.w	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
        else if (processing_output < 3000)
    12a4:	f640 32b7 	movw	r2, #2999	; 0xbb7
    12a8:	4293      	cmp	r3, r2
    12aa:	f200 8299 	bhi.w	17e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e0>
	const struct gpio_driver_config *const cfg =
    12ae:	4b44      	ldr	r3, [pc, #272]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    12b0:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    12b2:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12b4:	6813      	ldr	r3, [r2, #0]
    12b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    12ba:	f000 81cc 	beq.w	1656 <CONFIG_FPROTECT_BLOCK_SIZE+0x656>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    12be:	682b      	ldr	r3, [r5, #0]
    12c0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    12c4:	f040 81d8 	bne.w	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    12c8:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    12ca:	4b3d      	ldr	r3, [pc, #244]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    12cc:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    12d4:	f000 81d2 	beq.w	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
	if (value != 0)	{
    12d8:	2d00      	cmp	r5, #0
    12da:	f000 81ed 	beq.w	16b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b8>
	const struct gpio_driver_api *api =
    12de:	4838      	ldr	r0, [pc, #224]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    12e0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    12e2:	68db      	ldr	r3, [r3, #12]
    12e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    12e8:	4798      	blx	r3
            if (ret < 0)
    12ea:	2800      	cmp	r0, #0
    12ec:	f2c0 81eb 	blt.w	16c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c6>
	const struct gpio_driver_config *const cfg =
    12f0:	4b33      	ldr	r3, [pc, #204]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    12f2:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    12f4:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12f6:	6813      	ldr	r3, [r2, #0]
    12f8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    12fc:	f000 81e7 	beq.w	16ce <CONFIG_FPROTECT_BLOCK_SIZE+0x6ce>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1300:	682b      	ldr	r3, [r5, #0]
    1302:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1306:	f040 81f3 	bne.w	16f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f0>
    130a:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    130c:	4b2c      	ldr	r3, [pc, #176]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    130e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1310:	681b      	ldr	r3, [r3, #0]
    1312:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1316:	f000 81ed 	beq.w	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
	if (value != 0)	{
    131a:	2d00      	cmp	r5, #0
    131c:	f000 81fb 	beq.w	1716 <CONFIG_FPROTECT_BLOCK_SIZE+0x716>
	const struct gpio_driver_api *api =
    1320:	4827      	ldr	r0, [pc, #156]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1322:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1324:	68db      	ldr	r3, [r3, #12]
    1326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    132a:	4798      	blx	r3
            if (ret < 0)
    132c:	2800      	cmp	r0, #0
    132e:	f2c0 81f9 	blt.w	1724 <CONFIG_FPROTECT_BLOCK_SIZE+0x724>
	const struct gpio_driver_config *const cfg =
    1332:	4b23      	ldr	r3, [pc, #140]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1334:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1336:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1338:	6813      	ldr	r3, [r2, #0]
    133a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    133e:	f000 81f5 	beq.w	172c <CONFIG_FPROTECT_BLOCK_SIZE+0x72c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1342:	682b      	ldr	r3, [r5, #0]
    1344:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1348:	f040 8201 	bne.w	174e <CONFIG_FPROTECT_BLOCK_SIZE+0x74e>
    134c:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    134e:	4b1c      	ldr	r3, [pc, #112]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1350:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1358:	f000 81fb 	beq.w	1752 <CONFIG_FPROTECT_BLOCK_SIZE+0x752>
	if (value != 0)	{
    135c:	2d00      	cmp	r5, #0
    135e:	f000 8209 	beq.w	1774 <CONFIG_FPROTECT_BLOCK_SIZE+0x774>
	const struct gpio_driver_api *api =
    1362:	4817      	ldr	r0, [pc, #92]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1364:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1366:	68db      	ldr	r3, [r3, #12]
    1368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    136c:	4798      	blx	r3
            if (ret < 0)
    136e:	2800      	cmp	r0, #0
    1370:	f2c0 8207 	blt.w	1782 <CONFIG_FPROTECT_BLOCK_SIZE+0x782>
	const struct gpio_driver_config *const cfg =
    1374:	4b12      	ldr	r3, [pc, #72]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1376:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1378:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    137a:	6813      	ldr	r3, [r2, #0]
    137c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1380:	f000 8203 	beq.w	178a <CONFIG_FPROTECT_BLOCK_SIZE+0x78a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1384:	682b      	ldr	r3, [r5, #0]
    1386:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    138a:	f040 820f 	bne.w	17ac <CONFIG_FPROTECT_BLOCK_SIZE+0x7ac>
    138e:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    1390:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    1392:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1394:	681b      	ldr	r3, [r3, #0]
    1396:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    139a:	f000 8209 	beq.w	17b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7b0>
	if (value != 0)	{
    139e:	2d00      	cmp	r5, #0
    13a0:	f000 8217 	beq.w	17d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x7d2>
	const struct gpio_driver_api *api =
    13a4:	4806      	ldr	r0, [pc, #24]	; (13c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c0>)
    13a6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    13a8:	68db      	ldr	r3, [r3, #12]
    13aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    13ae:	4798      	blx	r3
            if (ret < 0)
    13b0:	2800      	cmp	r0, #0
    13b2:	f6bf aebe 	bge.w	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
                printk("SETTING LED VALUE FAILED");
    13b6:	4807      	ldr	r0, [pc, #28]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    13b8:	f00a fddb 	bl	bf72 <printk>
    13bc:	e6b9      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
    13be:	bf00      	nop
    13c0:	0000d284 	.word	0x0000d284
    13c4:	200006cc 	.word	0x200006cc
    13c8:	0000dadc 	.word	0x0000dadc
    13cc:	200001dc 	.word	0x200001dc
    13d0:	0000db18 	.word	0x0000db18
    13d4:	0000da80 	.word	0x0000da80
	const struct gpio_driver_config *const cfg =
    13d8:	4bb1      	ldr	r3, [pc, #708]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    13da:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13dc:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13de:	6813      	ldr	r3, [r2, #0]
    13e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13e4:	d07f      	beq.n	14e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e6>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    13e6:	682b      	ldr	r3, [r5, #0]
    13e8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13ec:	f040 808c 	bne.w	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
    13f0:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    13f2:	4bab      	ldr	r3, [pc, #684]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    13f4:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13f6:	681b      	ldr	r3, [r3, #0]
    13f8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    13fc:	f000 8086 	beq.w	150c <CONFIG_FPROTECT_BLOCK_SIZE+0x50c>
	if (value != 0)	{
    1400:	2d00      	cmp	r5, #0
    1402:	f000 8094 	beq.w	152e <CONFIG_FPROTECT_BLOCK_SIZE+0x52e>
	const struct gpio_driver_api *api =
    1406:	48a6      	ldr	r0, [pc, #664]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1408:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    140a:	68db      	ldr	r3, [r3, #12]
    140c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1410:	4798      	blx	r3
            if (ret < 0)
    1412:	2800      	cmp	r0, #0
    1414:	f2c0 8092 	blt.w	153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>
	const struct gpio_driver_config *const cfg =
    1418:	4ba1      	ldr	r3, [pc, #644]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    141a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    141c:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    141e:	6813      	ldr	r3, [r2, #0]
    1420:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1424:	f000 808e 	beq.w	1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1428:	682b      	ldr	r3, [r5, #0]
    142a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    142e:	f040 809a 	bne.w	1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
    1432:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1434:	4b9a      	ldr	r3, [pc, #616]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1436:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    143e:	f000 8094 	beq.w	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
	if (value != 0)	{
    1442:	2d00      	cmp	r5, #0
    1444:	f000 80a2 	beq.w	158c <CONFIG_FPROTECT_BLOCK_SIZE+0x58c>
	const struct gpio_driver_api *api =
    1448:	4895      	ldr	r0, [pc, #596]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    144a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    144c:	68db      	ldr	r3, [r3, #12]
    144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1452:	4798      	blx	r3
            if (ret < 0)
    1454:	2800      	cmp	r0, #0
    1456:	f2c0 80a0 	blt.w	159a <CONFIG_FPROTECT_BLOCK_SIZE+0x59a>
	const struct gpio_driver_config *const cfg =
    145a:	4b91      	ldr	r3, [pc, #580]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    145c:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    145e:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1460:	6813      	ldr	r3, [r2, #0]
    1462:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1466:	f000 809c 	beq.w	15a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a2>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    146a:	682b      	ldr	r3, [r5, #0]
    146c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1470:	f040 80a8 	bne.w	15c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c4>
    1474:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1476:	4b8a      	ldr	r3, [pc, #552]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1478:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1480:	f000 80a2 	beq.w	15c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c8>
	if (value != 0)	{
    1484:	2d00      	cmp	r5, #0
    1486:	f000 80b0 	beq.w	15ea <CONFIG_FPROTECT_BLOCK_SIZE+0x5ea>
	const struct gpio_driver_api *api =
    148a:	4885      	ldr	r0, [pc, #532]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    148c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    148e:	68db      	ldr	r3, [r3, #12]
    1490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1494:	4798      	blx	r3
            if (ret < 0)
    1496:	2800      	cmp	r0, #0
    1498:	f2c0 80ae 	blt.w	15f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f8>
	const struct gpio_driver_config *const cfg =
    149c:	4b80      	ldr	r3, [pc, #512]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    149e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    14a0:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14a2:	6813      	ldr	r3, [r2, #0]
    14a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14a8:	f000 80aa 	beq.w	1600 <CONFIG_FPROTECT_BLOCK_SIZE+0x600>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    14ac:	682b      	ldr	r3, [r5, #0]
    14ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14b2:	f040 80b6 	bne.w	1622 <CONFIG_FPROTECT_BLOCK_SIZE+0x622>
    14b6:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    14b8:	4b79      	ldr	r3, [pc, #484]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    14ba:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14bc:	681b      	ldr	r3, [r3, #0]
    14be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    14c2:	f000 80b0 	beq.w	1626 <CONFIG_FPROTECT_BLOCK_SIZE+0x626>
	if (value != 0)	{
    14c6:	2d00      	cmp	r5, #0
    14c8:	f000 80be 	beq.w	1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>
	const struct gpio_driver_api *api =
    14cc:	4874      	ldr	r0, [pc, #464]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    14ce:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    14d0:	68db      	ldr	r3, [r3, #12]
    14d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    14d6:	4798      	blx	r3
            if (ret < 0)
    14d8:	2800      	cmp	r0, #0
    14da:	f6bf ae2a 	bge.w	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
                printk("SETTING LED VALUE FAILED");
    14de:	4871      	ldr	r0, [pc, #452]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    14e0:	f00a fd47 	bl	bf72 <printk>
    14e4:	e625      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14e6:	4e70      	ldr	r6, [pc, #448]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    14e8:	f240 4392 	movw	r3, #1170	; 0x492
    14ec:	4632      	mov	r2, r6
    14ee:	496f      	ldr	r1, [pc, #444]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    14f0:	486f      	ldr	r0, [pc, #444]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    14f2:	f00a fec3 	bl	c27c <assert_print>
    14f6:	486f      	ldr	r0, [pc, #444]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    14f8:	f00a fec0 	bl	c27c <assert_print>
    14fc:	f240 4192 	movw	r1, #1170	; 0x492
    1500:	4630      	mov	r0, r6
    1502:	f00a feb4 	bl	c26e <assert_post_action>
    1506:	e76e      	b.n	13e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e6>
		value = (value != 0) ? 0 : 1;
    1508:	2500      	movs	r5, #0
    150a:	e772      	b.n	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    150c:	4e66      	ldr	r6, [pc, #408]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    150e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1512:	4632      	mov	r2, r6
    1514:	4965      	ldr	r1, [pc, #404]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    1516:	4866      	ldr	r0, [pc, #408]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1518:	f00a feb0 	bl	c27c <assert_print>
    151c:	4865      	ldr	r0, [pc, #404]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    151e:	f00a fead 	bl	c27c <assert_print>
    1522:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1526:	4630      	mov	r0, r6
    1528:	f00a fea1 	bl	c26e <assert_post_action>
    152c:	e768      	b.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
	const struct gpio_driver_api *api =
    152e:	485c      	ldr	r0, [pc, #368]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    1530:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1532:	691b      	ldr	r3, [r3, #16]
    1534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1538:	4798      	blx	r3
    153a:	e76a      	b.n	1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
                printk("SETTING LED VALUE FAILED");
    153c:	4859      	ldr	r0, [pc, #356]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    153e:	f00a fd18 	bl	bf72 <printk>
    1542:	e769      	b.n	1418 <CONFIG_FPROTECT_BLOCK_SIZE+0x418>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1544:	4e58      	ldr	r6, [pc, #352]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    1546:	f240 4392 	movw	r3, #1170	; 0x492
    154a:	4632      	mov	r2, r6
    154c:	4957      	ldr	r1, [pc, #348]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    154e:	4858      	ldr	r0, [pc, #352]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1550:	f00a fe94 	bl	c27c <assert_print>
    1554:	4857      	ldr	r0, [pc, #348]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    1556:	f00a fe91 	bl	c27c <assert_print>
    155a:	f240 4192 	movw	r1, #1170	; 0x492
    155e:	4630      	mov	r0, r6
    1560:	f00a fe85 	bl	c26e <assert_post_action>
    1564:	e760      	b.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
		value = (value != 0) ? 0 : 1;
    1566:	2500      	movs	r5, #0
    1568:	e764      	b.n	1434 <CONFIG_FPROTECT_BLOCK_SIZE+0x434>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    156a:	4e4f      	ldr	r6, [pc, #316]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    156c:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1570:	4632      	mov	r2, r6
    1572:	494e      	ldr	r1, [pc, #312]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    1574:	484e      	ldr	r0, [pc, #312]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1576:	f00a fe81 	bl	c27c <assert_print>
    157a:	484e      	ldr	r0, [pc, #312]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    157c:	f00a fe7e 	bl	c27c <assert_print>
    1580:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1584:	4630      	mov	r0, r6
    1586:	f00a fe72 	bl	c26e <assert_post_action>
    158a:	e75a      	b.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
	const struct gpio_driver_api *api =
    158c:	4844      	ldr	r0, [pc, #272]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    158e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1590:	691b      	ldr	r3, [r3, #16]
    1592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1596:	4798      	blx	r3
    1598:	e75c      	b.n	1454 <CONFIG_FPROTECT_BLOCK_SIZE+0x454>
                printk("SETTING LED VALUE FAILED");
    159a:	4842      	ldr	r0, [pc, #264]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    159c:	f00a fce9 	bl	bf72 <printk>
    15a0:	e75b      	b.n	145a <CONFIG_FPROTECT_BLOCK_SIZE+0x45a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15a2:	4e41      	ldr	r6, [pc, #260]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    15a4:	f240 4392 	movw	r3, #1170	; 0x492
    15a8:	4632      	mov	r2, r6
    15aa:	4940      	ldr	r1, [pc, #256]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    15ac:	4840      	ldr	r0, [pc, #256]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    15ae:	f00a fe65 	bl	c27c <assert_print>
    15b2:	4840      	ldr	r0, [pc, #256]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    15b4:	f00a fe62 	bl	c27c <assert_print>
    15b8:	f240 4192 	movw	r1, #1170	; 0x492
    15bc:	4630      	mov	r0, r6
    15be:	f00a fe56 	bl	c26e <assert_post_action>
    15c2:	e752      	b.n	146a <CONFIG_FPROTECT_BLOCK_SIZE+0x46a>
		value = (value != 0) ? 0 : 1;
    15c4:	2500      	movs	r5, #0
    15c6:	e756      	b.n	1476 <CONFIG_FPROTECT_BLOCK_SIZE+0x476>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15c8:	4e37      	ldr	r6, [pc, #220]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    15ca:	f44f 638d 	mov.w	r3, #1128	; 0x468
    15ce:	4632      	mov	r2, r6
    15d0:	4936      	ldr	r1, [pc, #216]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    15d2:	4837      	ldr	r0, [pc, #220]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    15d4:	f00a fe52 	bl	c27c <assert_print>
    15d8:	4836      	ldr	r0, [pc, #216]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    15da:	f00a fe4f 	bl	c27c <assert_print>
    15de:	f44f 618d 	mov.w	r1, #1128	; 0x468
    15e2:	4630      	mov	r0, r6
    15e4:	f00a fe43 	bl	c26e <assert_post_action>
    15e8:	e74c      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
	const struct gpio_driver_api *api =
    15ea:	482d      	ldr	r0, [pc, #180]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    15ec:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    15ee:	691b      	ldr	r3, [r3, #16]
    15f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    15f4:	4798      	blx	r3
    15f6:	e74e      	b.n	1496 <CONFIG_FPROTECT_BLOCK_SIZE+0x496>
                printk("SETTING LED VALUE FAILED");
    15f8:	482a      	ldr	r0, [pc, #168]	; (16a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a4>)
    15fa:	f00a fcba 	bl	bf72 <printk>
    15fe:	e74d      	b.n	149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1600:	4e29      	ldr	r6, [pc, #164]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    1602:	f240 4392 	movw	r3, #1170	; 0x492
    1606:	4632      	mov	r2, r6
    1608:	4928      	ldr	r1, [pc, #160]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    160a:	4829      	ldr	r0, [pc, #164]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    160c:	f00a fe36 	bl	c27c <assert_print>
    1610:	4828      	ldr	r0, [pc, #160]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    1612:	f00a fe33 	bl	c27c <assert_print>
    1616:	f240 4192 	movw	r1, #1170	; 0x492
    161a:	4630      	mov	r0, r6
    161c:	f00a fe27 	bl	c26e <assert_post_action>
    1620:	e744      	b.n	14ac <CONFIG_FPROTECT_BLOCK_SIZE+0x4ac>
		value = (value != 0) ? 0 : 1;
    1622:	2501      	movs	r5, #1
    1624:	e748      	b.n	14b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1626:	4e20      	ldr	r6, [pc, #128]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    1628:	f44f 638d 	mov.w	r3, #1128	; 0x468
    162c:	4632      	mov	r2, r6
    162e:	491f      	ldr	r1, [pc, #124]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    1630:	481f      	ldr	r0, [pc, #124]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1632:	f00a fe23 	bl	c27c <assert_print>
    1636:	481f      	ldr	r0, [pc, #124]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    1638:	f00a fe20 	bl	c27c <assert_print>
    163c:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1640:	4630      	mov	r0, r6
    1642:	f00a fe14 	bl	c26e <assert_post_action>
    1646:	e73e      	b.n	14c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c6>
	const struct gpio_driver_api *api =
    1648:	4815      	ldr	r0, [pc, #84]	; (16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>)
    164a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    164c:	691b      	ldr	r3, [r3, #16]
    164e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1652:	4798      	blx	r3
    1654:	e740      	b.n	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1656:	4e14      	ldr	r6, [pc, #80]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    1658:	f240 4392 	movw	r3, #1170	; 0x492
    165c:	4632      	mov	r2, r6
    165e:	4913      	ldr	r1, [pc, #76]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    1660:	4813      	ldr	r0, [pc, #76]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1662:	f00a fe0b 	bl	c27c <assert_print>
    1666:	4813      	ldr	r0, [pc, #76]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    1668:	f00a fe08 	bl	c27c <assert_print>
    166c:	f240 4192 	movw	r1, #1170	; 0x492
    1670:	4630      	mov	r0, r6
    1672:	f00a fdfc 	bl	c26e <assert_post_action>
    1676:	e622      	b.n	12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
		value = (value != 0) ? 0 : 1;
    1678:	2500      	movs	r5, #0
    167a:	e626      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    167c:	4e0a      	ldr	r6, [pc, #40]	; (16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>)
    167e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1682:	4632      	mov	r2, r6
    1684:	4909      	ldr	r1, [pc, #36]	; (16ac <CONFIG_FPROTECT_BLOCK_SIZE+0x6ac>)
    1686:	480a      	ldr	r0, [pc, #40]	; (16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>)
    1688:	f00a fdf8 	bl	c27c <assert_print>
    168c:	4809      	ldr	r0, [pc, #36]	; (16b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b4>)
    168e:	f00a fdf5 	bl	c27c <assert_print>
    1692:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1696:	4630      	mov	r0, r6
    1698:	f00a fde9 	bl	c26e <assert_post_action>
    169c:	e61c      	b.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
    169e:	bf00      	nop
    16a0:	0000d284 	.word	0x0000d284
    16a4:	0000da80 	.word	0x0000da80
    16a8:	0000d5a8 	.word	0x0000d5a8
    16ac:	0000d8b0 	.word	0x0000d8b0
    16b0:	0000d63c 	.word	0x0000d63c
    16b4:	0000d8f0 	.word	0x0000d8f0
	const struct gpio_driver_api *api =
    16b8:	48ae      	ldr	r0, [pc, #696]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    16ba:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    16bc:	691b      	ldr	r3, [r3, #16]
    16be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    16c2:	4798      	blx	r3
    16c4:	e611      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
                printk("SETTING LED VALUE FAILED");
    16c6:	48ac      	ldr	r0, [pc, #688]	; (1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>)
    16c8:	f00a fc53 	bl	bf72 <printk>
    16cc:	e610      	b.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16ce:	4eab      	ldr	r6, [pc, #684]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    16d0:	f240 4392 	movw	r3, #1170	; 0x492
    16d4:	4632      	mov	r2, r6
    16d6:	49aa      	ldr	r1, [pc, #680]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    16d8:	48aa      	ldr	r0, [pc, #680]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    16da:	f00a fdcf 	bl	c27c <assert_print>
    16de:	48aa      	ldr	r0, [pc, #680]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    16e0:	f00a fdcc 	bl	c27c <assert_print>
    16e4:	f240 4192 	movw	r1, #1170	; 0x492
    16e8:	4630      	mov	r0, r6
    16ea:	f00a fdc0 	bl	c26e <assert_post_action>
    16ee:	e607      	b.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
		value = (value != 0) ? 0 : 1;
    16f0:	2500      	movs	r5, #0
    16f2:	e60b      	b.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16f4:	4ea1      	ldr	r6, [pc, #644]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    16f6:	f44f 638d 	mov.w	r3, #1128	; 0x468
    16fa:	4632      	mov	r2, r6
    16fc:	49a0      	ldr	r1, [pc, #640]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    16fe:	48a1      	ldr	r0, [pc, #644]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    1700:	f00a fdbc 	bl	c27c <assert_print>
    1704:	48a0      	ldr	r0, [pc, #640]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    1706:	f00a fdb9 	bl	c27c <assert_print>
    170a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    170e:	4630      	mov	r0, r6
    1710:	f00a fdad 	bl	c26e <assert_post_action>
    1714:	e601      	b.n	131a <CONFIG_FPROTECT_BLOCK_SIZE+0x31a>
	const struct gpio_driver_api *api =
    1716:	4897      	ldr	r0, [pc, #604]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1718:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    171a:	691b      	ldr	r3, [r3, #16]
    171c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1720:	4798      	blx	r3
    1722:	e603      	b.n	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
                printk("SETTING LED VALUE FAILED");
    1724:	4894      	ldr	r0, [pc, #592]	; (1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>)
    1726:	f00a fc24 	bl	bf72 <printk>
    172a:	e602      	b.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    172c:	4e93      	ldr	r6, [pc, #588]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    172e:	f240 4392 	movw	r3, #1170	; 0x492
    1732:	4632      	mov	r2, r6
    1734:	4992      	ldr	r1, [pc, #584]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    1736:	4893      	ldr	r0, [pc, #588]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    1738:	f00a fda0 	bl	c27c <assert_print>
    173c:	4892      	ldr	r0, [pc, #584]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    173e:	f00a fd9d 	bl	c27c <assert_print>
    1742:	f240 4192 	movw	r1, #1170	; 0x492
    1746:	4630      	mov	r0, r6
    1748:	f00a fd91 	bl	c26e <assert_post_action>
    174c:	e5f9      	b.n	1342 <CONFIG_FPROTECT_BLOCK_SIZE+0x342>
		value = (value != 0) ? 0 : 1;
    174e:	2501      	movs	r5, #1
    1750:	e5fd      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1752:	4e8a      	ldr	r6, [pc, #552]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    1754:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1758:	4632      	mov	r2, r6
    175a:	4989      	ldr	r1, [pc, #548]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    175c:	4889      	ldr	r0, [pc, #548]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    175e:	f00a fd8d 	bl	c27c <assert_print>
    1762:	4889      	ldr	r0, [pc, #548]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    1764:	f00a fd8a 	bl	c27c <assert_print>
    1768:	f44f 618d 	mov.w	r1, #1128	; 0x468
    176c:	4630      	mov	r0, r6
    176e:	f00a fd7e 	bl	c26e <assert_post_action>
    1772:	e5f3      	b.n	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
	const struct gpio_driver_api *api =
    1774:	487f      	ldr	r0, [pc, #508]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1776:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1778:	691b      	ldr	r3, [r3, #16]
    177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    177e:	4798      	blx	r3
    1780:	e5f5      	b.n	136e <CONFIG_FPROTECT_BLOCK_SIZE+0x36e>
                printk("SETTING LED VALUE FAILED");
    1782:	487d      	ldr	r0, [pc, #500]	; (1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>)
    1784:	f00a fbf5 	bl	bf72 <printk>
    1788:	e5f4      	b.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    178a:	4e7c      	ldr	r6, [pc, #496]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    178c:	f240 4392 	movw	r3, #1170	; 0x492
    1790:	4632      	mov	r2, r6
    1792:	497b      	ldr	r1, [pc, #492]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    1794:	487b      	ldr	r0, [pc, #492]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    1796:	f00a fd71 	bl	c27c <assert_print>
    179a:	487b      	ldr	r0, [pc, #492]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    179c:	f00a fd6e 	bl	c27c <assert_print>
    17a0:	f240 4192 	movw	r1, #1170	; 0x492
    17a4:	4630      	mov	r0, r6
    17a6:	f00a fd62 	bl	c26e <assert_post_action>
    17aa:	e5eb      	b.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
		value = (value != 0) ? 0 : 1;
    17ac:	2501      	movs	r5, #1
    17ae:	e5ef      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17b0:	4e72      	ldr	r6, [pc, #456]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    17b2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    17b6:	4632      	mov	r2, r6
    17b8:	4971      	ldr	r1, [pc, #452]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    17ba:	4872      	ldr	r0, [pc, #456]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    17bc:	f00a fd5e 	bl	c27c <assert_print>
    17c0:	4871      	ldr	r0, [pc, #452]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    17c2:	f00a fd5b 	bl	c27c <assert_print>
    17c6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    17ca:	4630      	mov	r0, r6
    17cc:	f00a fd4f 	bl	c26e <assert_post_action>
    17d0:	e5e5      	b.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
	const struct gpio_driver_api *api =
    17d2:	4868      	ldr	r0, [pc, #416]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    17d4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    17d6:	691b      	ldr	r3, [r3, #16]
    17d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    17dc:	4798      	blx	r3
    17de:	e5e7      	b.n	13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
	const struct gpio_driver_config *const cfg =
    17e0:	4b64      	ldr	r3, [pc, #400]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    17e2:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    17e4:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17e6:	6813      	ldr	r3, [r2, #0]
    17e8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    17ec:	d07f      	beq.n	18ee <CONFIG_FPROTECT_BLOCK_SIZE+0x8ee>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    17ee:	682b      	ldr	r3, [r5, #0]
    17f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    17f4:	f040 808c 	bne.w	1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>
    17f8:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    17fa:	4b5e      	ldr	r3, [pc, #376]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    17fc:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17fe:	681b      	ldr	r3, [r3, #0]
    1800:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1804:	f000 8086 	beq.w	1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>
	if (value != 0)	{
    1808:	2d00      	cmp	r5, #0
    180a:	f000 8094 	beq.w	1936 <CONFIG_FPROTECT_BLOCK_SIZE+0x936>
	const struct gpio_driver_api *api =
    180e:	4859      	ldr	r0, [pc, #356]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1810:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1812:	68db      	ldr	r3, [r3, #12]
    1814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1818:	4798      	blx	r3
            if (ret < 0)
    181a:	2800      	cmp	r0, #0
    181c:	f2c0 8092 	blt.w	1944 <CONFIG_FPROTECT_BLOCK_SIZE+0x944>
	const struct gpio_driver_config *const cfg =
    1820:	4b54      	ldr	r3, [pc, #336]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1822:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1824:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1826:	6813      	ldr	r3, [r2, #0]
    1828:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    182c:	f000 808e 	beq.w	194c <CONFIG_FPROTECT_BLOCK_SIZE+0x94c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1830:	682b      	ldr	r3, [r5, #0]
    1832:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1836:	f040 809a 	bne.w	196e <CONFIG_FPROTECT_BLOCK_SIZE+0x96e>
    183a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    183c:	4b4d      	ldr	r3, [pc, #308]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    183e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1846:	f000 80a1 	beq.w	198c <CONFIG_FPROTECT_BLOCK_SIZE+0x98c>
	if (value != 0)	{
    184a:	2d00      	cmp	r5, #0
    184c:	f000 80af 	beq.w	19ae <CONFIG_FPROTECT_BLOCK_SIZE+0x9ae>
	const struct gpio_driver_api *api =
    1850:	4848      	ldr	r0, [pc, #288]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1852:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1854:	68db      	ldr	r3, [r3, #12]
    1856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    185a:	4798      	blx	r3
            if (ret < 0)
    185c:	2800      	cmp	r0, #0
    185e:	f2c0 80ad 	blt.w	19bc <CONFIG_FPROTECT_BLOCK_SIZE+0x9bc>
	const struct gpio_driver_config *const cfg =
    1862:	4b44      	ldr	r3, [pc, #272]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1864:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1866:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1868:	6813      	ldr	r3, [r2, #0]
    186a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    186e:	f000 80a9 	beq.w	19c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1872:	682b      	ldr	r3, [r5, #0]
    1874:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1878:	f040 80b5 	bne.w	19e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e6>
    187c:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    187e:	4b3d      	ldr	r3, [pc, #244]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1880:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1882:	681b      	ldr	r3, [r3, #0]
    1884:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1888:	f000 80af 	beq.w	19ea <CONFIG_FPROTECT_BLOCK_SIZE+0x9ea>
	if (value != 0)	{
    188c:	2d00      	cmp	r5, #0
    188e:	f000 80bd 	beq.w	1a0c <CONFIG_FPROTECT_BLOCK_SIZE+0xa0c>
	const struct gpio_driver_api *api =
    1892:	4838      	ldr	r0, [pc, #224]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1894:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1896:	68db      	ldr	r3, [r3, #12]
    1898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    189c:	4798      	blx	r3
            if (ret < 0)
    189e:	2800      	cmp	r0, #0
    18a0:	f2c0 80bb 	blt.w	1a1a <CONFIG_FPROTECT_BLOCK_SIZE+0xa1a>
	const struct gpio_driver_config *const cfg =
    18a4:	4b33      	ldr	r3, [pc, #204]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    18a6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    18a8:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18aa:	6813      	ldr	r3, [r2, #0]
    18ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    18b0:	f000 80b7 	beq.w	1a22 <CONFIG_FPROTECT_BLOCK_SIZE+0xa22>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    18b4:	682b      	ldr	r3, [r5, #0]
    18b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    18ba:	f040 80c3 	bne.w	1a44 <CONFIG_FPROTECT_BLOCK_SIZE+0xa44>
    18be:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    18c0:	4b2c      	ldr	r3, [pc, #176]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    18c2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18c4:	681b      	ldr	r3, [r3, #0]
    18c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    18ca:	f000 80bd 	beq.w	1a48 <CONFIG_FPROTECT_BLOCK_SIZE+0xa48>
	if (value != 0)	{
    18ce:	2d00      	cmp	r5, #0
    18d0:	f000 80cb 	beq.w	1a6a <CONFIG_FPROTECT_BLOCK_SIZE+0xa6a>
	const struct gpio_driver_api *api =
    18d4:	4827      	ldr	r0, [pc, #156]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    18d6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    18d8:	68db      	ldr	r3, [r3, #12]
    18da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    18de:	4798      	blx	r3
            if (ret < 0)
    18e0:	2800      	cmp	r0, #0
    18e2:	f6bf ac26 	bge.w	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
                printk("SETTING LED VALUE FAILED");
    18e6:	4824      	ldr	r0, [pc, #144]	; (1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>)
    18e8:	f00a fb43 	bl	bf72 <printk>
    {
    18ec:	e421      	b.n	1132 <CONFIG_FPROTECT_BLOCK_SIZE+0x132>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18ee:	4e23      	ldr	r6, [pc, #140]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    18f0:	f240 4392 	movw	r3, #1170	; 0x492
    18f4:	4632      	mov	r2, r6
    18f6:	4922      	ldr	r1, [pc, #136]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    18f8:	4822      	ldr	r0, [pc, #136]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    18fa:	f00a fcbf 	bl	c27c <assert_print>
    18fe:	4822      	ldr	r0, [pc, #136]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    1900:	f00a fcbc 	bl	c27c <assert_print>
    1904:	f240 4192 	movw	r1, #1170	; 0x492
    1908:	4630      	mov	r0, r6
    190a:	f00a fcb0 	bl	c26e <assert_post_action>
    190e:	e76e      	b.n	17ee <CONFIG_FPROTECT_BLOCK_SIZE+0x7ee>
		value = (value != 0) ? 0 : 1;
    1910:	2500      	movs	r5, #0
    1912:	e772      	b.n	17fa <CONFIG_FPROTECT_BLOCK_SIZE+0x7fa>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1914:	4e19      	ldr	r6, [pc, #100]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    1916:	f44f 638d 	mov.w	r3, #1128	; 0x468
    191a:	4632      	mov	r2, r6
    191c:	4918      	ldr	r1, [pc, #96]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    191e:	4819      	ldr	r0, [pc, #100]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    1920:	f00a fcac 	bl	c27c <assert_print>
    1924:	4818      	ldr	r0, [pc, #96]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    1926:	f00a fca9 	bl	c27c <assert_print>
    192a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    192e:	4630      	mov	r0, r6
    1930:	f00a fc9d 	bl	c26e <assert_post_action>
    1934:	e768      	b.n	1808 <CONFIG_FPROTECT_BLOCK_SIZE+0x808>
	const struct gpio_driver_api *api =
    1936:	480f      	ldr	r0, [pc, #60]	; (1974 <CONFIG_FPROTECT_BLOCK_SIZE+0x974>)
    1938:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    193a:	691b      	ldr	r3, [r3, #16]
    193c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1940:	4798      	blx	r3
    1942:	e76a      	b.n	181a <CONFIG_FPROTECT_BLOCK_SIZE+0x81a>
                printk("SETTING LED VALUE FAILED");
    1944:	480c      	ldr	r0, [pc, #48]	; (1978 <CONFIG_FPROTECT_BLOCK_SIZE+0x978>)
    1946:	f00a fb14 	bl	bf72 <printk>
    194a:	e769      	b.n	1820 <CONFIG_FPROTECT_BLOCK_SIZE+0x820>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    194c:	4e0b      	ldr	r6, [pc, #44]	; (197c <CONFIG_FPROTECT_BLOCK_SIZE+0x97c>)
    194e:	f240 4392 	movw	r3, #1170	; 0x492
    1952:	4632      	mov	r2, r6
    1954:	490a      	ldr	r1, [pc, #40]	; (1980 <CONFIG_FPROTECT_BLOCK_SIZE+0x980>)
    1956:	480b      	ldr	r0, [pc, #44]	; (1984 <CONFIG_FPROTECT_BLOCK_SIZE+0x984>)
    1958:	f00a fc90 	bl	c27c <assert_print>
    195c:	480a      	ldr	r0, [pc, #40]	; (1988 <CONFIG_FPROTECT_BLOCK_SIZE+0x988>)
    195e:	f00a fc8d 	bl	c27c <assert_print>
    1962:	f240 4192 	movw	r1, #1170	; 0x492
    1966:	4630      	mov	r0, r6
    1968:	f00a fc81 	bl	c26e <assert_post_action>
    196c:	e760      	b.n	1830 <CONFIG_FPROTECT_BLOCK_SIZE+0x830>
		value = (value != 0) ? 0 : 1;
    196e:	2501      	movs	r5, #1
    1970:	e764      	b.n	183c <CONFIG_FPROTECT_BLOCK_SIZE+0x83c>
    1972:	bf00      	nop
    1974:	0000d284 	.word	0x0000d284
    1978:	0000da80 	.word	0x0000da80
    197c:	0000d5a8 	.word	0x0000d5a8
    1980:	0000d8b0 	.word	0x0000d8b0
    1984:	0000d63c 	.word	0x0000d63c
    1988:	0000d8f0 	.word	0x0000d8f0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    198c:	4e3a      	ldr	r6, [pc, #232]	; (1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    198e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1992:	4632      	mov	r2, r6
    1994:	4939      	ldr	r1, [pc, #228]	; (1a7c <CONFIG_FPROTECT_BLOCK_SIZE+0xa7c>)
    1996:	483a      	ldr	r0, [pc, #232]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    1998:	f00a fc70 	bl	c27c <assert_print>
    199c:	4839      	ldr	r0, [pc, #228]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    199e:	f00a fc6d 	bl	c27c <assert_print>
    19a2:	f44f 618d 	mov.w	r1, #1128	; 0x468
    19a6:	4630      	mov	r0, r6
    19a8:	f00a fc61 	bl	c26e <assert_post_action>
    19ac:	e74d      	b.n	184a <CONFIG_FPROTECT_BLOCK_SIZE+0x84a>
	const struct gpio_driver_api *api =
    19ae:	4836      	ldr	r0, [pc, #216]	; (1a88 <CONFIG_FPROTECT_BLOCK_SIZE+0xa88>)
    19b0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    19b2:	691b      	ldr	r3, [r3, #16]
    19b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    19b8:	4798      	blx	r3
    19ba:	e74f      	b.n	185c <CONFIG_FPROTECT_BLOCK_SIZE+0x85c>
                printk("SETTING LED VALUE FAILED");
    19bc:	4833      	ldr	r0, [pc, #204]	; (1a8c <CONFIG_FPROTECT_BLOCK_SIZE+0xa8c>)
    19be:	f00a fad8 	bl	bf72 <printk>
    19c2:	e74e      	b.n	1862 <CONFIG_FPROTECT_BLOCK_SIZE+0x862>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19c4:	4e2c      	ldr	r6, [pc, #176]	; (1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    19c6:	f240 4392 	movw	r3, #1170	; 0x492
    19ca:	4632      	mov	r2, r6
    19cc:	492b      	ldr	r1, [pc, #172]	; (1a7c <CONFIG_FPROTECT_BLOCK_SIZE+0xa7c>)
    19ce:	482c      	ldr	r0, [pc, #176]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    19d0:	f00a fc54 	bl	c27c <assert_print>
    19d4:	482b      	ldr	r0, [pc, #172]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    19d6:	f00a fc51 	bl	c27c <assert_print>
    19da:	f240 4192 	movw	r1, #1170	; 0x492
    19de:	4630      	mov	r0, r6
    19e0:	f00a fc45 	bl	c26e <assert_post_action>
    19e4:	e745      	b.n	1872 <CONFIG_FPROTECT_BLOCK_SIZE+0x872>
		value = (value != 0) ? 0 : 1;
    19e6:	2501      	movs	r5, #1
    19e8:	e749      	b.n	187e <CONFIG_FPROTECT_BLOCK_SIZE+0x87e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19ea:	4e23      	ldr	r6, [pc, #140]	; (1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    19ec:	f44f 638d 	mov.w	r3, #1128	; 0x468
    19f0:	4632      	mov	r2, r6
    19f2:	4922      	ldr	r1, [pc, #136]	; (1a7c <CONFIG_FPROTECT_BLOCK_SIZE+0xa7c>)
    19f4:	4822      	ldr	r0, [pc, #136]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    19f6:	f00a fc41 	bl	c27c <assert_print>
    19fa:	4822      	ldr	r0, [pc, #136]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    19fc:	f00a fc3e 	bl	c27c <assert_print>
    1a00:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1a04:	4630      	mov	r0, r6
    1a06:	f00a fc32 	bl	c26e <assert_post_action>
    1a0a:	e73f      	b.n	188c <CONFIG_FPROTECT_BLOCK_SIZE+0x88c>
	const struct gpio_driver_api *api =
    1a0c:	481e      	ldr	r0, [pc, #120]	; (1a88 <CONFIG_FPROTECT_BLOCK_SIZE+0xa88>)
    1a0e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1a10:	691b      	ldr	r3, [r3, #16]
    1a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1a16:	4798      	blx	r3
    1a18:	e741      	b.n	189e <CONFIG_FPROTECT_BLOCK_SIZE+0x89e>
                printk("SETTING LED VALUE FAILED");
    1a1a:	481c      	ldr	r0, [pc, #112]	; (1a8c <CONFIG_FPROTECT_BLOCK_SIZE+0xa8c>)
    1a1c:	f00a faa9 	bl	bf72 <printk>
    1a20:	e740      	b.n	18a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8a4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1a22:	4e15      	ldr	r6, [pc, #84]	; (1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    1a24:	f240 4392 	movw	r3, #1170	; 0x492
    1a28:	4632      	mov	r2, r6
    1a2a:	4914      	ldr	r1, [pc, #80]	; (1a7c <CONFIG_FPROTECT_BLOCK_SIZE+0xa7c>)
    1a2c:	4814      	ldr	r0, [pc, #80]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    1a2e:	f00a fc25 	bl	c27c <assert_print>
    1a32:	4814      	ldr	r0, [pc, #80]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    1a34:	f00a fc22 	bl	c27c <assert_print>
    1a38:	f240 4192 	movw	r1, #1170	; 0x492
    1a3c:	4630      	mov	r0, r6
    1a3e:	f00a fc16 	bl	c26e <assert_post_action>
    1a42:	e737      	b.n	18b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b4>
		value = (value != 0) ? 0 : 1;
    1a44:	2501      	movs	r5, #1
    1a46:	e73b      	b.n	18c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8c0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1a48:	4e0b      	ldr	r6, [pc, #44]	; (1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    1a4a:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1a4e:	4632      	mov	r2, r6
    1a50:	490a      	ldr	r1, [pc, #40]	; (1a7c <CONFIG_FPROTECT_BLOCK_SIZE+0xa7c>)
    1a52:	480b      	ldr	r0, [pc, #44]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    1a54:	f00a fc12 	bl	c27c <assert_print>
    1a58:	480a      	ldr	r0, [pc, #40]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    1a5a:	f00a fc0f 	bl	c27c <assert_print>
    1a5e:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1a62:	4630      	mov	r0, r6
    1a64:	f00a fc03 	bl	c26e <assert_post_action>
    1a68:	e731      	b.n	18ce <CONFIG_FPROTECT_BLOCK_SIZE+0x8ce>
	const struct gpio_driver_api *api =
    1a6a:	4807      	ldr	r0, [pc, #28]	; (1a88 <CONFIG_FPROTECT_BLOCK_SIZE+0xa88>)
    1a6c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1a6e:	691b      	ldr	r3, [r3, #16]
    1a70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1a74:	4798      	blx	r3
    1a76:	e733      	b.n	18e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e0>
    1a78:	0000d5a8 	.word	0x0000d5a8
    1a7c:	0000d8b0 	.word	0x0000d8b0
    1a80:	0000d63c 	.word	0x0000d63c
    1a84:	0000d8f0 	.word	0x0000d8f0
    1a88:	0000d284 	.word	0x0000d284
    1a8c:	0000da80 	.word	0x0000da80

00001a90 <main>:
{
    1a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a92:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1a94:	487e      	ldr	r0, [pc, #504]	; (1c90 <main+0x200>)
    1a96:	f00b fa81 	bl	cf9c <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1a9a:	b118      	cbz	r0, 1aa4 <main+0x14>
    1a9c:	487c      	ldr	r0, [pc, #496]	; (1c90 <main+0x200>)
    1a9e:	f00b fa7d 	bl	cf9c <z_device_is_ready>
    1aa2:	b920      	cbnz	r0, 1aae <main+0x1e>
        printk("Error: leds are not ready\n");
    1aa4:	487b      	ldr	r0, [pc, #492]	; (1c94 <main+0x204>)
    1aa6:	f00a fa64 	bl	bf72 <printk>
}
    1aaa:	b009      	add	sp, #36	; 0x24
    1aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aae:	4878      	ldr	r0, [pc, #480]	; (1c90 <main+0x200>)
    1ab0:	f00b fa74 	bl	cf9c <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d0f5      	beq.n	1aa4 <main+0x14>
    1ab8:	4875      	ldr	r0, [pc, #468]	; (1c90 <main+0x200>)
    1aba:	f00b fa6f 	bl	cf9c <z_device_is_ready>
    1abe:	2800      	cmp	r0, #0
    1ac0:	d0f0      	beq.n	1aa4 <main+0x14>
    1ac2:	4873      	ldr	r0, [pc, #460]	; (1c90 <main+0x200>)
    1ac4:	f00b fa6a 	bl	cf9c <z_device_is_ready>
    if (!device_is_ready(button.port))
    1ac8:	2800      	cmp	r0, #0
    1aca:	f000 80b7 	beq.w	1c3c <main+0x1ac>
    ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_INACTIVE);
    1ace:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1ad2:	4871      	ldr	r0, [pc, #452]	; (1c98 <main+0x208>)
    1ad4:	f00a f9d7 	bl	be86 <gpio_pin_configure_dt>
    if (ret < 0)
    1ad8:	2800      	cmp	r0, #0
    1ada:	dbe6      	blt.n	1aaa <main+0x1a>
    ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_INACTIVE);
    1adc:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1ae0:	486e      	ldr	r0, [pc, #440]	; (1c9c <main+0x20c>)
    1ae2:	f00a f9d0 	bl	be86 <gpio_pin_configure_dt>
    if (ret < 0)
    1ae6:	2800      	cmp	r0, #0
    1ae8:	dbdf      	blt.n	1aaa <main+0x1a>
    ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_INACTIVE);
    1aea:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1aee:	486c      	ldr	r0, [pc, #432]	; (1ca0 <main+0x210>)
    1af0:	f00a f9c9 	bl	be86 <gpio_pin_configure_dt>
    if (ret < 0)
    1af4:	2800      	cmp	r0, #0
    1af6:	dbd8      	blt.n	1aaa <main+0x1a>
    ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_INACTIVE);
    1af8:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1afc:	4869      	ldr	r0, [pc, #420]	; (1ca4 <main+0x214>)
    1afe:	f00a f9c2 	bl	be86 <gpio_pin_configure_dt>
    if (ret < 0)
    1b02:	2800      	cmp	r0, #0
    1b04:	dbd1      	blt.n	1aaa <main+0x1a>
    ret = gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_PULL_UP);
    1b06:	4968      	ldr	r1, [pc, #416]	; (1ca8 <main+0x218>)
    1b08:	4868      	ldr	r0, [pc, #416]	; (1cac <main+0x21c>)
    1b0a:	f00a f9bc 	bl	be86 <gpio_pin_configure_dt>
    if (ret < 0)
    1b0e:	1e01      	subs	r1, r0, #0
    1b10:	f2c0 809a 	blt.w	1c48 <main+0x1b8>
	const struct gpio_driver_api *api =
    1b14:	4b5e      	ldr	r3, [pc, #376]	; (1c90 <main+0x200>)
    1b16:	689c      	ldr	r4, [r3, #8]
	const struct gpio_driver_config *const cfg =
    1b18:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1b1a:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1b1c:	6813      	ldr	r3, [r2, #0]
    1b1e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1b22:	f000 8095 	beq.w	1c50 <main+0x1c0>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1b26:	682b      	ldr	r3, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1b28:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1b2c:	f040 80a1 	bne.w	1c72 <main+0x1e2>
    1b30:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1b34:	69a4      	ldr	r4, [r4, #24]
    1b36:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    1b3a:	f002 72a0 	and.w	r2, r2, #20971520	; 0x1400000
    1b3e:	210b      	movs	r1, #11
    1b40:	4853      	ldr	r0, [pc, #332]	; (1c90 <main+0x200>)
    1b42:	47a0      	blx	r4
    if (ret < 0)
    1b44:	1e01      	subs	r1, r0, #0
    1b46:	f2c0 8097 	blt.w	1c78 <main+0x1e8>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1b4a:	4b59      	ldr	r3, [pc, #356]	; (1cb0 <main+0x220>)
    1b4c:	4a59      	ldr	r2, [pc, #356]	; (1cb4 <main+0x224>)
    1b4e:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    1b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1b54:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
    1b56:	4b4e      	ldr	r3, [pc, #312]	; (1c90 <main+0x200>)
    1b58:	689b      	ldr	r3, [r3, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1b5a:	69db      	ldr	r3, [r3, #28]
    1b5c:	b11b      	cbz	r3, 1b66 <main+0xd6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1b5e:	2201      	movs	r2, #1
    1b60:	4953      	ldr	r1, [pc, #332]	; (1cb0 <main+0x220>)
    1b62:	484b      	ldr	r0, [pc, #300]	; (1c90 <main+0x200>)
    1b64:	4798      	blx	r3
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1b66:	4854      	ldr	r0, [pc, #336]	; (1cb8 <main+0x228>)
    1b68:	f006 ff9a 	bl	8aa0 <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
    1b6c:	4b53      	ldr	r3, [pc, #332]	; (1cbc <main+0x22c>)
    1b6e:	6018      	str	r0, [r3, #0]
    if (!adc_dev)
    1b70:	2800      	cmp	r0, #0
    1b72:	f000 8085 	beq.w	1c80 <main+0x1f0>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    1b76:	4b51      	ldr	r3, [pc, #324]	; (1cbc <main+0x22c>)
    1b78:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
    1b7a:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    1b7c:	681b      	ldr	r3, [r3, #0]
    1b7e:	4950      	ldr	r1, [pc, #320]	; (1cc0 <main+0x230>)
    1b80:	4798      	blx	r3
    if (err)
    1b82:	4601      	mov	r1, r0
    1b84:	2800      	cmp	r0, #0
    1b86:	d17f      	bne.n	1c88 <main+0x1f8>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    1b88:	2501      	movs	r5, #1
    1b8a:	4b4e      	ldr	r3, [pc, #312]	; (1cc4 <main+0x234>)
    1b8c:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    1b8e:	484e      	ldr	r0, [pc, #312]	; (1cc8 <main+0x238>)
    1b90:	f003 fbac 	bl	52ec <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1b94:	462a      	mov	r2, r5
    1b96:	2100      	movs	r1, #0
    1b98:	484c      	ldr	r0, [pc, #304]	; (1ccc <main+0x23c>)
    1b9a:	f00b fa95 	bl	d0c8 <z_impl_k_sem_init>
    1b9e:	462a      	mov	r2, r5
    1ba0:	2100      	movs	r1, #0
    1ba2:	484b      	ldr	r0, [pc, #300]	; (1cd0 <main+0x240>)
    1ba4:	f00b fa90 	bl	d0c8 <z_impl_k_sem_init>
    1ba8:	462a      	mov	r2, r5
    1baa:	2100      	movs	r1, #0
    1bac:	4849      	ldr	r0, [pc, #292]	; (1cd4 <main+0x244>)
    1bae:	f00b fa8b 	bl	d0c8 <z_impl_k_sem_init>
                                        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
    1bb2:	2600      	movs	r6, #0
    1bb4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1bb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1bba:	2400      	movs	r4, #0
    1bbc:	9404      	str	r4, [sp, #16]
    1bbe:	9503      	str	r5, [sp, #12]
    1bc0:	9402      	str	r4, [sp, #8]
    1bc2:	9401      	str	r4, [sp, #4]
    1bc4:	9400      	str	r4, [sp, #0]
    1bc6:	4b44      	ldr	r3, [pc, #272]	; (1cd8 <main+0x248>)
    1bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1bcc:	4943      	ldr	r1, [pc, #268]	; (1cdc <main+0x24c>)
    1bce:	4844      	ldr	r0, [pc, #272]	; (1ce0 <main+0x250>)
    1bd0:	f007 fb90 	bl	92f4 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
    1bd4:	4b43      	ldr	r3, [pc, #268]	; (1ce4 <main+0x254>)
    1bd6:	6018      	str	r0, [r3, #0]
    1bd8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1bdc:	9404      	str	r4, [sp, #16]
    1bde:	9503      	str	r5, [sp, #12]
    1be0:	9402      	str	r4, [sp, #8]
    1be2:	9401      	str	r4, [sp, #4]
    1be4:	9400      	str	r4, [sp, #0]
    1be6:	4b40      	ldr	r3, [pc, #256]	; (1ce8 <main+0x258>)
    1be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1bec:	493f      	ldr	r1, [pc, #252]	; (1cec <main+0x25c>)
    1bee:	4840      	ldr	r0, [pc, #256]	; (1cf0 <main+0x260>)
    1bf0:	f007 fb80 	bl	92f4 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
    1bf4:	4b3f      	ldr	r3, [pc, #252]	; (1cf4 <main+0x264>)
    1bf6:	6018      	str	r0, [r3, #0]
    1bf8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1bfc:	9404      	str	r4, [sp, #16]
    1bfe:	9503      	str	r5, [sp, #12]
    1c00:	9402      	str	r4, [sp, #8]
    1c02:	9401      	str	r4, [sp, #4]
    1c04:	9400      	str	r4, [sp, #0]
    1c06:	4b3c      	ldr	r3, [pc, #240]	; (1cf8 <main+0x268>)
    1c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c0c:	493b      	ldr	r1, [pc, #236]	; (1cfc <main+0x26c>)
    1c0e:	483c      	ldr	r0, [pc, #240]	; (1d00 <main+0x270>)
    1c10:	f007 fb70 	bl	92f4 <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    1c14:	4b3b      	ldr	r3, [pc, #236]	; (1d04 <main+0x274>)
    1c16:	6018      	str	r0, [r3, #0]
    1c18:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1c1c:	9404      	str	r4, [sp, #16]
    1c1e:	2302      	movs	r3, #2
    1c20:	9303      	str	r3, [sp, #12]
    1c22:	9402      	str	r4, [sp, #8]
    1c24:	9401      	str	r4, [sp, #4]
    1c26:	9400      	str	r4, [sp, #0]
    1c28:	4b37      	ldr	r3, [pc, #220]	; (1d08 <main+0x278>)
    1c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c2e:	4937      	ldr	r1, [pc, #220]	; (1d0c <main+0x27c>)
    1c30:	4837      	ldr	r0, [pc, #220]	; (1d10 <main+0x280>)
    1c32:	f007 fb5f 	bl	92f4 <z_impl_k_thread_create>
    thread_button_tid = k_thread_create(&thread_button_data, thread_button_stack,
    1c36:	4b37      	ldr	r3, [pc, #220]	; (1d14 <main+0x284>)
    1c38:	6018      	str	r0, [r3, #0]
    return;
    1c3a:	e736      	b.n	1aaa <main+0x1a>
        printk("Error: button device %s is not ready\n", button.port->name);
    1c3c:	4b14      	ldr	r3, [pc, #80]	; (1c90 <main+0x200>)
    1c3e:	6819      	ldr	r1, [r3, #0]
    1c40:	4835      	ldr	r0, [pc, #212]	; (1d18 <main+0x288>)
    1c42:	f00a f996 	bl	bf72 <printk>
        return;
    1c46:	e730      	b.n	1aaa <main+0x1a>
        printk("Error: gpio_pin_configure_dt failed for button, error:%d", ret);
    1c48:	4834      	ldr	r0, [pc, #208]	; (1d1c <main+0x28c>)
    1c4a:	f00a f992 	bl	bf72 <printk>
        return;
    1c4e:	e72c      	b.n	1aaa <main+0x1a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1c50:	4e33      	ldr	r6, [pc, #204]	; (1d20 <main+0x290>)
    1c52:	f240 2375 	movw	r3, #629	; 0x275
    1c56:	4632      	mov	r2, r6
    1c58:	4932      	ldr	r1, [pc, #200]	; (1d24 <main+0x294>)
    1c5a:	4833      	ldr	r0, [pc, #204]	; (1d28 <main+0x298>)
    1c5c:	f00a fb0e 	bl	c27c <assert_print>
    1c60:	4832      	ldr	r0, [pc, #200]	; (1d2c <main+0x29c>)
    1c62:	f00a fb0b 	bl	c27c <assert_print>
    1c66:	f240 2175 	movw	r1, #629	; 0x275
    1c6a:	4630      	mov	r0, r6
    1c6c:	f00a faff 	bl	c26e <assert_post_action>
    1c70:	e759      	b.n	1b26 <main+0x96>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    1c72:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
    1c76:	e75d      	b.n	1b34 <main+0xa4>
        printk("Error: gpio_pin_interrupt_configure_dt failed for button, error:%d", ret);
    1c78:	482d      	ldr	r0, [pc, #180]	; (1d30 <main+0x2a0>)
    1c7a:	f00a f97a 	bl	bf72 <printk>
        return;
    1c7e:	e714      	b.n	1aaa <main+0x1a>
        printk("ADC device_get_binding() failed\n");
    1c80:	482c      	ldr	r0, [pc, #176]	; (1d34 <main+0x2a4>)
    1c82:	f00a f976 	bl	bf72 <printk>
    1c86:	e776      	b.n	1b76 <main+0xe6>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1c88:	482b      	ldr	r0, [pc, #172]	; (1d38 <main+0x2a8>)
    1c8a:	f00a f972 	bl	bf72 <printk>
    1c8e:	e77b      	b.n	1b88 <main+0xf8>
    1c90:	0000d284 	.word	0x0000d284
    1c94:	0000db48 	.word	0x0000db48
    1c98:	0000ddc0 	.word	0x0000ddc0
    1c9c:	0000ddc8 	.word	0x0000ddc8
    1ca0:	0000ddd0 	.word	0x0000ddd0
    1ca4:	0000ddd8 	.word	0x0000ddd8
    1ca8:	00010010 	.word	0x00010010
    1cac:	0000ddb8 	.word	0x0000ddb8
    1cb0:	200006b0 	.word	0x200006b0
    1cb4:	000007a1 	.word	0x000007a1
    1cb8:	0000dc0c 	.word	0x0000dc0c
    1cbc:	200006a8 	.word	0x200006a8
    1cc0:	0000dde0 	.word	0x0000dde0
    1cc4:	40007000 	.word	0x40007000
    1cc8:	0000dc68 	.word	0x0000dc68
    1ccc:	200006dc 	.word	0x200006dc
    1cd0:	200006cc 	.word	0x200006cc
    1cd4:	200006bc 	.word	0x200006bc
    1cd8:	000009d5 	.word	0x000009d5
    1cdc:	20001460 	.word	0x20001460
    1ce0:	20000470 	.word	0x20000470
    1ce4:	200006f8 	.word	0x200006f8
    1ce8:	00001d3d 	.word	0x00001d3d
    1cec:	20001880 	.word	0x20001880
    1cf0:	200003c0 	.word	0x200003c0
    1cf4:	200006f4 	.word	0x200006f4
    1cf8:	00000f95 	.word	0x00000f95
    1cfc:	20001ca0 	.word	0x20001ca0
    1d00:	20000310 	.word	0x20000310
    1d04:	200006f0 	.word	0x200006f0
    1d08:	00000b9d 	.word	0x00000b9d
    1d0c:	200020c0 	.word	0x200020c0
    1d10:	20000260 	.word	0x20000260
    1d14:	200006ec 	.word	0x200006ec
    1d18:	0000db64 	.word	0x0000db64
    1d1c:	0000db8c 	.word	0x0000db8c
    1d20:	0000d5a8 	.word	0x0000d5a8
    1d24:	0000d8b0 	.word	0x0000d8b0
    1d28:	0000d63c 	.word	0x0000d63c
    1d2c:	0000d8f0 	.word	0x0000d8f0
    1d30:	0000dbc8 	.word	0x0000dbc8
    1d34:	0000dc14 	.word	0x0000dc14
    1d38:	0000dc38 	.word	0x0000dc38

00001d3c <thread_processing_code>:
{
    1d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d3e:	b08f      	sub	sp, #60	; 0x3c
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    1d40:	2500      	movs	r5, #0
    1d42:	9509      	str	r5, [sp, #36]	; 0x24
    1d44:	950a      	str	r5, [sp, #40]	; 0x28
    1d46:	950b      	str	r5, [sp, #44]	; 0x2c
    1d48:	950c      	str	r5, [sp, #48]	; 0x30
    1d4a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    printk("Thread processing  init (sporadic, waits on a semaphore by task A)\n");
    1d4e:	483b      	ldr	r0, [pc, #236]	; (1e3c <thread_processing_code+0x100>)
    1d50:	f00a f90f 	bl	bf72 <printk>
    int iterations = 0;
    1d54:	462c      	mov	r4, r5
    1d56:	e03d      	b.n	1dd4 <thread_processing_code+0x98>
            uint16_t avg = precedentsAverage(precedents, current_read, 9);
    1d58:	2209      	movs	r2, #9
    1d5a:	4631      	mov	r1, r6
    1d5c:	a809      	add	r0, sp, #36	; 0x24
    1d5e:	f00a f89d 	bl	be9c <precedentsAverage>
    1d62:	b287      	uxth	r7, r0
            processing_output = avg;
    1d64:	4b36      	ldr	r3, [pc, #216]	; (1e40 <thread_processing_code+0x104>)
    1d66:	801f      	strh	r7, [r3, #0]
	z_impl_k_sem_give(sem);
    1d68:	4836      	ldr	r0, [pc, #216]	; (1e44 <thread_processing_code+0x108>)
    1d6a:	f007 fdaf 	bl	98cc <z_impl_k_sem_give>
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], current_read, avg);
    1d6e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    1d72:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    1d76:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    1d7a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1d7e:	f8bd c032 	ldrh.w	ip, [sp, #50]	; 0x32
    1d82:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
    1d86:	9707      	str	r7, [sp, #28]
    1d88:	9606      	str	r6, [sp, #24]
    1d8a:	f8cd e014 	str.w	lr, [sp, #20]
    1d8e:	f8cd c010 	str.w	ip, [sp, #16]
    1d92:	9003      	str	r0, [sp, #12]
    1d94:	9102      	str	r1, [sp, #8]
    1d96:	9201      	str	r2, [sp, #4]
    1d98:	9300      	str	r3, [sp, #0]
    1d9a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1d9e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    1da2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    1da6:	4828      	ldr	r0, [pc, #160]	; (1e48 <thread_processing_code+0x10c>)
    1da8:	f00a f8e3 	bl	bf72 <printk>
            precedents[iterations % 9] = current_read;
    1dac:	4a27      	ldr	r2, [pc, #156]	; (1e4c <thread_processing_code+0x110>)
    1dae:	fb82 3204 	smull	r3, r2, r2, r4
    1db2:	17e3      	asrs	r3, r4, #31
    1db4:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    1db8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1dbc:	1ae3      	subs	r3, r4, r3
    1dbe:	aa0e      	add	r2, sp, #56	; 0x38
    1dc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1dc4:	f823 6c14 	strh.w	r6, [r3, #-20]
        iterations++;
    1dc8:	3401      	adds	r4, #1
        printk("Thread processing  set processing_output value to: %d \n", processing_output);
    1dca:	4b1d      	ldr	r3, [pc, #116]	; (1e40 <thread_processing_code+0x104>)
    1dcc:	8819      	ldrh	r1, [r3, #0]
    1dce:	4820      	ldr	r0, [pc, #128]	; (1e50 <thread_processing_code+0x114>)
    1dd0:	f00a f8cf 	bl	bf72 <printk>
	return z_impl_k_sem_take(sem, timeout);
    1dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ddc:	481d      	ldr	r0, [pc, #116]	; (1e54 <thread_processing_code+0x118>)
    1dde:	f007 fdb9 	bl	9954 <z_impl_k_sem_take>
        printk("Thread processing  instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    1de2:	3501      	adds	r5, #1
	return z_impl_k_uptime_ticks();
    1de4:	f00b f9c6 	bl	d174 <z_impl_k_uptime_ticks>
    1de8:	4602      	mov	r2, r0
    1dea:	014b      	lsls	r3, r1, #5
    1dec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    1df0:	0140      	lsls	r0, r0, #5
    1df2:	1a80      	subs	r0, r0, r2
    1df4:	eb63 0301 	sbc.w	r3, r3, r1
    1df8:	009b      	lsls	r3, r3, #2
    1dfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    1dfe:	0080      	lsls	r0, r0, #2
    1e00:	1880      	adds	r0, r0, r2
    1e02:	eb43 0301 	adc.w	r3, r3, r1
    1e06:	00db      	lsls	r3, r3, #3
    1e08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    1e0c:	f3c0 3010 	ubfx	r0, r0, #12, #17
    1e10:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    1e14:	0bdb      	lsrs	r3, r3, #15
    1e16:	4629      	mov	r1, r5
    1e18:	480f      	ldr	r0, [pc, #60]	; (1e58 <thread_processing_code+0x11c>)
    1e1a:	f00a f8aa 	bl	bf72 <printk>
        printk("Task processing read sensor_processing value: %d\n", sensor_processing);
    1e1e:	4e0f      	ldr	r6, [pc, #60]	; (1e5c <thread_processing_code+0x120>)
    1e20:	8831      	ldrh	r1, [r6, #0]
    1e22:	480f      	ldr	r0, [pc, #60]	; (1e60 <thread_processing_code+0x124>)
    1e24:	f00a f8a5 	bl	bf72 <printk>
        current_read = sensor_processing;
    1e28:	8836      	ldrh	r6, [r6, #0]
        if (iterations > 8)
    1e2a:	2c08      	cmp	r4, #8
    1e2c:	dc94      	bgt.n	1d58 <thread_processing_code+0x1c>
            precedents[iterations] = current_read;
    1e2e:	ab0e      	add	r3, sp, #56	; 0x38
    1e30:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1e34:	f823 6c14 	strh.w	r6, [r3, #-20]
    1e38:	e7c6      	b.n	1dc8 <thread_processing_code+0x8c>
    1e3a:	bf00      	nop
    1e3c:	0000dc9c 	.word	0x0000dc9c
    1e40:	200001dc 	.word	0x200001dc
    1e44:	200006cc 	.word	0x200006cc
    1e48:	0000dd54 	.word	0x0000dd54
    1e4c:	38e38e39 	.word	0x38e38e39
    1e50:	0000dd80 	.word	0x0000dd80
    1e54:	200006dc 	.word	0x200006dc
    1e58:	0000dce0 	.word	0x0000dce0
    1e5c:	200001de 	.word	0x200001de
    1e60:	0000dd20 	.word	0x0000dd20

00001e64 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e68:	b08d      	sub	sp, #52	; 0x34
    1e6a:	9205      	str	r2, [sp, #20]
    1e6c:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1e6e:	4613      	mov	r3, r2
    1e70:	f002 0204 	and.w	r2, r2, #4
    1e74:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1e76:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1e7a:	f010 0303 	ands.w	r3, r0, #3
    1e7e:	9302      	str	r3, [sp, #8]
    1e80:	f040 8293 	bne.w	23aa <cbvprintf_package+0x546>
    1e84:	4607      	mov	r7, r0
    1e86:	468a      	mov	sl, r1
    1e88:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1e8a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1e8c:	2800      	cmp	r0, #0
    1e8e:	d041      	beq.n	1f14 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1e90:	b127      	cbz	r7, 1e9c <cbvprintf_package+0x38>
    1e92:	1be3      	subs	r3, r4, r7
    1e94:	3304      	adds	r3, #4
    1e96:	4553      	cmp	r3, sl
    1e98:	f200 828a 	bhi.w	23b0 <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    1e9c:	9b03      	ldr	r3, [sp, #12]
    1e9e:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1ea0:	f8dd b008 	ldr.w	fp, [sp, #8]
    1ea4:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1ea8:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    1eac:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    1eae:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1eb2:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1eb4:	b10f      	cbz	r7, 1eba <cbvprintf_package+0x56>
				*(const char **)buf = s;
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1eba:	1e53      	subs	r3, r2, #1
    1ebc:	9307      	str	r3, [sp, #28]
    1ebe:	2a00      	cmp	r2, #0
    1ec0:	f340 80b7 	ble.w	2032 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1ec4:	9b05      	ldr	r3, [sp, #20]
    1ec6:	f013 0202 	ands.w	r2, r3, #2
    1eca:	d021      	beq.n	1f10 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1ecc:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1ece:	1be1      	subs	r1, r4, r7
    1ed0:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1ed2:	b11a      	cbz	r2, 1edc <cbvprintf_package+0x78>
    1ed4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1ed8:	f080 80bf 	bcs.w	205a <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1edc:	f1bb 0f0f 	cmp.w	fp, #15
    1ee0:	f200 80ce 	bhi.w	2080 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1ee4:	2f00      	cmp	r7, #0
    1ee6:	f000 80e2 	beq.w	20ae <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    1eea:	b2db      	uxtb	r3, r3
    1eec:	aa0c      	add	r2, sp, #48	; 0x30
    1eee:	445a      	add	r2, fp
    1ef0:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1ef4:	2800      	cmp	r0, #0
    1ef6:	f000 80d6 	beq.w	20a6 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1efe:	aa0c      	add	r2, sp, #48	; 0x30
    1f00:	445a      	add	r2, fp
    1f02:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    1f06:	9b04      	ldr	r3, [sp, #16]
    1f08:	3301      	adds	r3, #1
    1f0a:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    1f0c:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    1f10:	3404      	adds	r4, #4
    1f12:	e0f6      	b.n	2102 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1f14:	f001 0a07 	and.w	sl, r1, #7
    1f18:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1f1a:	f1ca 0a08 	rsb	sl, sl, #8
    1f1e:	e7b7      	b.n	1e90 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    1f20:	2b25      	cmp	r3, #37	; 0x25
    1f22:	f040 80ed 	bne.w	2100 <cbvprintf_package+0x29c>
				parsing = true;
    1f26:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    1f28:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    1f2c:	46c1      	mov	r9, r8
			continue;
    1f2e:	e0e7      	b.n	2100 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    1f30:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    1f34:	46c1      	mov	r9, r8
			continue;
    1f36:	e0e3      	b.n	2100 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    1f38:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    1f3c:	46c1      	mov	r9, r8
			continue;
    1f3e:	e0df      	b.n	2100 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    1f40:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    1f44:	46c1      	mov	r9, r8
			continue;
    1f46:	e0db      	b.n	2100 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    1f48:	782a      	ldrb	r2, [r5, #0]
    1f4a:	2a6c      	cmp	r2, #108	; 0x6c
    1f4c:	d026      	beq.n	1f9c <cbvprintf_package+0x138>
			parsing = false;
    1f4e:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    1f50:	eb04 0208 	add.w	r2, r4, r8
    1f54:	3a01      	subs	r2, #1
    1f56:	f1c8 0100 	rsb	r1, r8, #0
    1f5a:	400a      	ands	r2, r1
    1f5c:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1f5e:	b127      	cbz	r7, 1f6a <cbvprintf_package+0x106>
    1f60:	1bd1      	subs	r1, r2, r7
    1f62:	4449      	add	r1, r9
    1f64:	4551      	cmp	r1, sl
    1f66:	f200 8226 	bhi.w	23b6 <cbvprintf_package+0x552>
		if (*fmt == 's') {
    1f6a:	2b73      	cmp	r3, #115	; 0x73
    1f6c:	d059      	beq.n	2022 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    1f6e:	f1b9 0f04 	cmp.w	r9, #4
    1f72:	f000 80a8 	beq.w	20c6 <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1f76:	f1b9 0f08 	cmp.w	r9, #8
    1f7a:	f040 80ac 	bne.w	20d6 <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    1f7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f80:	3307      	adds	r3, #7
    1f82:	f023 0307 	bic.w	r3, r3, #7
    1f86:	f103 0108 	add.w	r1, r3, #8
    1f8a:	9116      	str	r1, [sp, #88]	; 0x58
    1f8c:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    1f90:	b10f      	cbz	r7, 1f96 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    1f92:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    1f96:	f102 0408 	add.w	r4, r2, #8
    1f9a:	e0b1      	b.n	2100 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    1f9c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    1fa0:	2a6c      	cmp	r2, #108	; 0x6c
    1fa2:	d004      	beq.n	1fae <cbvprintf_package+0x14a>
			parsing = false;
    1fa4:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    1fa6:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    1faa:	46c1      	mov	r9, r8
    1fac:	e7d0      	b.n	1f50 <cbvprintf_package+0xec>
			parsing = false;
    1fae:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    1fb0:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    1fb4:	46c1      	mov	r9, r8
    1fb6:	e7cb      	b.n	1f50 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    1fb8:	782b      	ldrb	r3, [r5, #0]
    1fba:	2b4c      	cmp	r3, #76	; 0x4c
    1fbc:	d01c      	beq.n	1ff8 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    1fbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1fc0:	3307      	adds	r3, #7
    1fc2:	f023 0307 	bic.w	r3, r3, #7
    1fc6:	f103 0208 	add.w	r2, r3, #8
    1fca:	9216      	str	r2, [sp, #88]	; 0x58
    1fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    1fd0:	1de2      	adds	r2, r4, #7
    1fd2:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    1fd6:	b147      	cbz	r7, 1fea <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    1fd8:	1bd3      	subs	r3, r2, r7
    1fda:	3308      	adds	r3, #8
    1fdc:	4553      	cmp	r3, sl
    1fde:	d815      	bhi.n	200c <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    1fe0:	782b      	ldrb	r3, [r5, #0]
    1fe2:	2b4c      	cmp	r3, #76	; 0x4c
    1fe4:	d015      	beq.n	2012 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    1fe6:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    1fea:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    1fee:	2600      	movs	r6, #0
			continue;
    1ff0:	f04f 0808 	mov.w	r8, #8
    1ff4:	46c1      	mov	r9, r8
    1ff6:	e083      	b.n	2100 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    1ff8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1ffa:	3307      	adds	r3, #7
    1ffc:	f023 0307 	bic.w	r3, r3, #7
    2000:	f103 0208 	add.w	r2, r3, #8
    2004:	9216      	str	r2, [sp, #88]	; 0x58
    2006:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    200a:	e7e1      	b.n	1fd0 <cbvprintf_package+0x16c>
					return -ENOSPC;
    200c:	f06f 001b 	mvn.w	r0, #27
    2010:	e1c8      	b.n	23a4 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    2012:	e9c2 0100 	strd	r0, r1, [r2]
    2016:	e7e8      	b.n	1fea <cbvprintf_package+0x186>
			parsing = false;
    2018:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    201a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    201e:	46c1      	mov	r9, r8
    2020:	e796      	b.n	1f50 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    2022:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2024:	1d1a      	adds	r2, r3, #4
    2026:	9216      	str	r2, [sp, #88]	; 0x58
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    202c:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    202e:	4665      	mov	r5, ip
    2030:	e740      	b.n	1eb4 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    2032:	4bbb      	ldr	r3, [pc, #748]	; (2320 <cbvprintf_package+0x4bc>)
    2034:	9a03      	ldr	r2, [sp, #12]
    2036:	429a      	cmp	r2, r3
    2038:	d304      	bcc.n	2044 <cbvprintf_package+0x1e0>
    203a:	4bba      	ldr	r3, [pc, #744]	; (2324 <cbvprintf_package+0x4c0>)
    203c:	429a      	cmp	r2, r3
    203e:	d30a      	bcc.n	2056 <cbvprintf_package+0x1f2>
    2040:	2300      	movs	r3, #0
    2042:	e000      	b.n	2046 <cbvprintf_package+0x1e2>
    2044:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2046:	2b00      	cmp	r3, #0
    2048:	f47f af3c 	bne.w	1ec4 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    204c:	9b05      	ldr	r3, [sp, #20]
    204e:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    2052:	2000      	movs	r0, #0
    2054:	e73b      	b.n	1ece <cbvprintf_package+0x6a>
    2056:	2301      	movs	r3, #1
    2058:	e7f5      	b.n	2046 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    205a:	4cb3      	ldr	r4, [pc, #716]	; (2328 <cbvprintf_package+0x4c4>)
    205c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    2060:	4622      	mov	r2, r4
    2062:	49b2      	ldr	r1, [pc, #712]	; (232c <cbvprintf_package+0x4c8>)
    2064:	48b2      	ldr	r0, [pc, #712]	; (2330 <cbvprintf_package+0x4cc>)
    2066:	f00a f909 	bl	c27c <assert_print>
    206a:	48b2      	ldr	r0, [pc, #712]	; (2334 <cbvprintf_package+0x4d0>)
    206c:	f00a f906 	bl	c27c <assert_print>
    2070:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    2074:	4620      	mov	r0, r4
    2076:	f00a f8fa 	bl	c26e <assert_post_action>
					return -EINVAL;
    207a:	f06f 0015 	mvn.w	r0, #21
    207e:	e191      	b.n	23a4 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    2080:	4ca9      	ldr	r4, [pc, #676]	; (2328 <cbvprintf_package+0x4c4>)
    2082:	f240 13f5 	movw	r3, #501	; 0x1f5
    2086:	4622      	mov	r2, r4
    2088:	49a8      	ldr	r1, [pc, #672]	; (232c <cbvprintf_package+0x4c8>)
    208a:	48a9      	ldr	r0, [pc, #676]	; (2330 <cbvprintf_package+0x4cc>)
    208c:	f00a f8f6 	bl	c27c <assert_print>
    2090:	48a9      	ldr	r0, [pc, #676]	; (2338 <cbvprintf_package+0x4d4>)
    2092:	f00a f8f3 	bl	c27c <assert_print>
    2096:	f240 11f5 	movw	r1, #501	; 0x1f5
    209a:	4620      	mov	r0, r4
    209c:	f00a f8e7 	bl	c26e <assert_post_action>
					return -EINVAL;
    20a0:	f06f 0015 	mvn.w	r0, #21
    20a4:	e17e      	b.n	23a4 <cbvprintf_package+0x540>
						s_rw_cnt++;
    20a6:	9b06      	ldr	r3, [sp, #24]
    20a8:	3301      	adds	r3, #1
    20aa:	9306      	str	r3, [sp, #24]
    20ac:	e72e      	b.n	1f0c <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    20ae:	b908      	cbnz	r0, 20b4 <cbvprintf_package+0x250>
    20b0:	9b01      	ldr	r3, [sp, #4]
    20b2:	b113      	cbz	r3, 20ba <cbvprintf_package+0x256>
					len += 1;
    20b4:	f10a 0a01 	add.w	sl, sl, #1
    20b8:	e728      	b.n	1f0c <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    20ba:	9803      	ldr	r0, [sp, #12]
    20bc:	f00a fa58 	bl	c570 <strlen>
    20c0:	1c83      	adds	r3, r0, #2
    20c2:	449a      	add	sl, r3
    20c4:	e722      	b.n	1f0c <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    20c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    20c8:	1d19      	adds	r1, r3, #4
    20ca:	9116      	str	r1, [sp, #88]	; 0x58
    20cc:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    20ce:	b107      	cbz	r7, 20d2 <cbvprintf_package+0x26e>
				*(int *)buf = v;
    20d0:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    20d2:	1d14      	adds	r4, r2, #4
    20d4:	e014      	b.n	2100 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    20d6:	4c94      	ldr	r4, [pc, #592]	; (2328 <cbvprintf_package+0x4c4>)
    20d8:	f240 2331 	movw	r3, #561	; 0x231
    20dc:	4622      	mov	r2, r4
    20de:	4993      	ldr	r1, [pc, #588]	; (232c <cbvprintf_package+0x4c8>)
    20e0:	4893      	ldr	r0, [pc, #588]	; (2330 <cbvprintf_package+0x4cc>)
    20e2:	f00a f8cb 	bl	c27c <assert_print>
    20e6:	4649      	mov	r1, r9
    20e8:	4894      	ldr	r0, [pc, #592]	; (233c <cbvprintf_package+0x4d8>)
    20ea:	f00a f8c7 	bl	c27c <assert_print>
    20ee:	f240 2131 	movw	r1, #561	; 0x231
    20f2:	4620      	mov	r0, r4
    20f4:	f00a f8bb 	bl	c26e <assert_post_action>
			return -EINVAL;
    20f8:	f06f 0015 	mvn.w	r0, #21
    20fc:	e152      	b.n	23a4 <cbvprintf_package+0x540>
		switch (*fmt) {
    20fe:	2600      	movs	r6, #0
    2100:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    2102:	f105 0c01 	add.w	ip, r5, #1
    2106:	786b      	ldrb	r3, [r5, #1]
    2108:	2b00      	cmp	r3, #0
    210a:	f000 80c1 	beq.w	2290 <cbvprintf_package+0x42c>
		if (!parsing) {
    210e:	2e00      	cmp	r6, #0
    2110:	f43f af06 	beq.w	1f20 <cbvprintf_package+0xbc>
		switch (*fmt) {
    2114:	f1a3 0120 	sub.w	r1, r3, #32
    2118:	295a      	cmp	r1, #90	; 0x5a
    211a:	d8f0      	bhi.n	20fe <cbvprintf_package+0x29a>
    211c:	a201      	add	r2, pc, #4	; (adr r2, 2124 <cbvprintf_package+0x2c0>)
    211e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    2122:	bf00      	nop
    2124:	00002101 	.word	0x00002101
    2128:	000020ff 	.word	0x000020ff
    212c:	000020ff 	.word	0x000020ff
    2130:	00002101 	.word	0x00002101
    2134:	000020ff 	.word	0x000020ff
    2138:	000020ff 	.word	0x000020ff
    213c:	000020ff 	.word	0x000020ff
    2140:	000020ff 	.word	0x000020ff
    2144:	000020ff 	.word	0x000020ff
    2148:	000020ff 	.word	0x000020ff
    214c:	00001f51 	.word	0x00001f51
    2150:	00002101 	.word	0x00002101
    2154:	000020ff 	.word	0x000020ff
    2158:	00002101 	.word	0x00002101
    215c:	00002101 	.word	0x00002101
    2160:	000020ff 	.word	0x000020ff
    2164:	00002101 	.word	0x00002101
    2168:	00002101 	.word	0x00002101
    216c:	00002101 	.word	0x00002101
    2170:	00002101 	.word	0x00002101
    2174:	00002101 	.word	0x00002101
    2178:	00002101 	.word	0x00002101
    217c:	00002101 	.word	0x00002101
    2180:	00002101 	.word	0x00002101
    2184:	00002101 	.word	0x00002101
    2188:	00002101 	.word	0x00002101
    218c:	000020ff 	.word	0x000020ff
    2190:	000020ff 	.word	0x000020ff
    2194:	000020ff 	.word	0x000020ff
    2198:	000020ff 	.word	0x000020ff
    219c:	000020ff 	.word	0x000020ff
    21a0:	000020ff 	.word	0x000020ff
    21a4:	000020ff 	.word	0x000020ff
    21a8:	00001fb9 	.word	0x00001fb9
    21ac:	000020ff 	.word	0x000020ff
    21b0:	000020ff 	.word	0x000020ff
    21b4:	000020ff 	.word	0x000020ff
    21b8:	00001fb9 	.word	0x00001fb9
    21bc:	00001fb9 	.word	0x00001fb9
    21c0:	00001fb9 	.word	0x00001fb9
    21c4:	000020ff 	.word	0x000020ff
    21c8:	000020ff 	.word	0x000020ff
    21cc:	000020ff 	.word	0x000020ff
    21d0:	000020ff 	.word	0x000020ff
    21d4:	00002101 	.word	0x00002101
    21d8:	000020ff 	.word	0x000020ff
    21dc:	000020ff 	.word	0x000020ff
    21e0:	000020ff 	.word	0x000020ff
    21e4:	000020ff 	.word	0x000020ff
    21e8:	000020ff 	.word	0x000020ff
    21ec:	000020ff 	.word	0x000020ff
    21f0:	000020ff 	.word	0x000020ff
    21f4:	000020ff 	.word	0x000020ff
    21f8:	000020ff 	.word	0x000020ff
    21fc:	000020ff 	.word	0x000020ff
    2200:	000020ff 	.word	0x000020ff
    2204:	00001f49 	.word	0x00001f49
    2208:	000020ff 	.word	0x000020ff
    220c:	000020ff 	.word	0x000020ff
    2210:	000020ff 	.word	0x000020ff
    2214:	000020ff 	.word	0x000020ff
    2218:	000020ff 	.word	0x000020ff
    221c:	000020ff 	.word	0x000020ff
    2220:	000020ff 	.word	0x000020ff
    2224:	000020ff 	.word	0x000020ff
    2228:	00001fb9 	.word	0x00001fb9
    222c:	000020ff 	.word	0x000020ff
    2230:	00001f49 	.word	0x00001f49
    2234:	00001f49 	.word	0x00001f49
    2238:	00001fb9 	.word	0x00001fb9
    223c:	00001fb9 	.word	0x00001fb9
    2240:	00001fb9 	.word	0x00001fb9
    2244:	00002101 	.word	0x00002101
    2248:	00001f49 	.word	0x00001f49
    224c:	00001f31 	.word	0x00001f31
    2250:	000020ff 	.word	0x000020ff
    2254:	00002101 	.word	0x00002101
    2258:	000020ff 	.word	0x000020ff
    225c:	00002019 	.word	0x00002019
    2260:	00001f49 	.word	0x00001f49
    2264:	00002019 	.word	0x00002019
    2268:	000020ff 	.word	0x000020ff
    226c:	000020ff 	.word	0x000020ff
    2270:	00002019 	.word	0x00002019
    2274:	00001f41 	.word	0x00001f41
    2278:	00001f49 	.word	0x00001f49
    227c:	000020ff 	.word	0x000020ff
    2280:	000020ff 	.word	0x000020ff
    2284:	00001f49 	.word	0x00001f49
    2288:	000020ff 	.word	0x000020ff
    228c:	00001f39 	.word	0x00001f39
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    2290:	1be3      	subs	r3, r4, r7
    2292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2296:	d211      	bcs.n	22bc <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    2298:	b31f      	cbz	r7, 22e2 <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    229a:	2200      	movs	r2, #0
    229c:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    229e:	089b      	lsrs	r3, r3, #2
    22a0:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    22a2:	9b01      	ldr	r3, [sp, #4]
    22a4:	b30b      	cbz	r3, 22ea <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    22a6:	9b06      	ldr	r3, [sp, #24]
    22a8:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    22aa:	9b04      	ldr	r3, [sp, #16]
    22ac:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    22ae:	bbab      	cbnz	r3, 231c <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    22b0:	9d02      	ldr	r5, [sp, #8]
    22b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
    22b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    22ba:	e058      	b.n	236e <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    22bc:	4c1a      	ldr	r4, [pc, #104]	; (2328 <cbvprintf_package+0x4c4>)
    22be:	f240 233d 	movw	r3, #573	; 0x23d
    22c2:	4622      	mov	r2, r4
    22c4:	4919      	ldr	r1, [pc, #100]	; (232c <cbvprintf_package+0x4c8>)
    22c6:	481a      	ldr	r0, [pc, #104]	; (2330 <cbvprintf_package+0x4cc>)
    22c8:	f009 ffd8 	bl	c27c <assert_print>
    22cc:	481c      	ldr	r0, [pc, #112]	; (2340 <cbvprintf_package+0x4dc>)
    22ce:	f009 ffd5 	bl	c27c <assert_print>
    22d2:	f240 213d 	movw	r1, #573	; 0x23d
    22d6:	4620      	mov	r0, r4
    22d8:	f009 ffc9 	bl	c26e <assert_post_action>
		return -EINVAL;
    22dc:	f06f 0015 	mvn.w	r0, #21
    22e0:	e060      	b.n	23a4 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    22e2:	4453      	add	r3, sl
    22e4:	f1a3 0008 	sub.w	r0, r3, #8
    22e8:	e05c      	b.n	23a4 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    22ea:	9b06      	ldr	r3, [sp, #24]
    22ec:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    22ee:	e7dc      	b.n	22aa <cbvprintf_package+0x446>
			*buf++ = pos;
    22f0:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    22f4:	3301      	adds	r3, #1
    22f6:	459b      	cmp	fp, r3
    22f8:	d9da      	bls.n	22b0 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    22fa:	aa0c      	add	r2, sp, #48	; 0x30
    22fc:	441a      	add	r2, r3
    22fe:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    2302:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    2306:	2a00      	cmp	r2, #0
    2308:	daf4      	bge.n	22f4 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    230a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    230e:	1be2      	subs	r2, r4, r7
    2310:	3201      	adds	r2, #1
    2312:	4552      	cmp	r2, sl
    2314:	d9ec      	bls.n	22f0 <cbvprintf_package+0x48c>
				return -ENOSPC;
    2316:	f06f 001b 	mvn.w	r0, #27
    231a:	e043      	b.n	23a4 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    231c:	9b02      	ldr	r3, [sp, #8]
    231e:	e7ea      	b.n	22f6 <cbvprintf_package+0x492>
    2320:	0000d1dc 	.word	0x0000d1dc
    2324:	0000faf4 	.word	0x0000faf4
    2328:	0000dde8 	.word	0x0000dde8
    232c:	0000d800 	.word	0x0000d800
    2330:	0000d63c 	.word	0x0000d63c
    2334:	0000de30 	.word	0x0000de30
    2338:	0000de54 	.word	0x0000de54
    233c:	0000de70 	.word	0x0000de70
    2340:	0000de88 	.word	0x0000de88
		if (rws_pos_en) {
    2344:	9b01      	ldr	r3, [sp, #4]
    2346:	b1f3      	cbz	r3, 2386 <cbvprintf_package+0x522>
			size = 0;
    2348:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    234a:	1be3      	subs	r3, r4, r7
    234c:	4433      	add	r3, r6
    234e:	3301      	adds	r3, #1
    2350:	4553      	cmp	r3, sl
    2352:	d833      	bhi.n	23bc <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    2354:	ab0c      	add	r3, sp, #48	; 0x30
    2356:	442b      	add	r3, r5
    2358:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    235c:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    2360:	4632      	mov	r2, r6
    2362:	4641      	mov	r1, r8
    2364:	4620      	mov	r0, r4
    2366:	f00a f921 	bl	c5ac <memcpy>
		buf += size;
    236a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    236c:	3501      	adds	r5, #1
    236e:	45ab      	cmp	fp, r5
    2370:	d917      	bls.n	23a2 <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    2372:	f1b9 0f00 	cmp.w	r9, #0
    2376:	d0e5      	beq.n	2344 <cbvprintf_package+0x4e0>
    2378:	ab0c      	add	r3, sp, #48	; 0x30
    237a:	442b      	add	r3, r5
    237c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    2380:	2b00      	cmp	r3, #0
    2382:	dadf      	bge.n	2344 <cbvprintf_package+0x4e0>
    2384:	e7f2      	b.n	236c <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    2386:	ab0c      	add	r3, sp, #48	; 0x30
    2388:	442b      	add	r3, r5
    238a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    238e:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    2392:	2200      	movs	r2, #0
    2394:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    2398:	4640      	mov	r0, r8
    239a:	f00a f8e9 	bl	c570 <strlen>
    239e:	1c46      	adds	r6, r0, #1
    23a0:	e7d3      	b.n	234a <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    23a2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    23a4:	b00d      	add	sp, #52	; 0x34
    23a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    23aa:	f06f 000d 	mvn.w	r0, #13
    23ae:	e7f9      	b.n	23a4 <cbvprintf_package+0x540>
		return -ENOSPC;
    23b0:	f06f 001b 	mvn.w	r0, #27
    23b4:	e7f6      	b.n	23a4 <cbvprintf_package+0x540>
			return -ENOSPC;
    23b6:	f06f 001b 	mvn.w	r0, #27
    23ba:	e7f3      	b.n	23a4 <cbvprintf_package+0x540>
			return -ENOSPC;
    23bc:	f06f 001b 	mvn.w	r0, #27
    23c0:	e7f0      	b.n	23a4 <cbvprintf_package+0x540>
    23c2:	bf00      	nop

000023c4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    23c4:	b538      	push	{r3, r4, r5, lr}
    23c6:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    23c8:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    23ca:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    23ce:	6081      	str	r1, [r0, #8]
	switch (method) {
    23d0:	2b02      	cmp	r3, #2
    23d2:	d903      	bls.n	23dc <sys_notify_finalize+0x18>
    23d4:	2b03      	cmp	r3, #3
    23d6:	d102      	bne.n	23de <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    23d8:	6800      	ldr	r0, [r0, #0]
		break;
    23da:	e00e      	b.n	23fa <sys_notify_finalize+0x36>
	switch (method) {
    23dc:	b963      	cbnz	r3, 23f8 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    23de:	4d08      	ldr	r5, [pc, #32]	; (2400 <sys_notify_finalize+0x3c>)
    23e0:	2345      	movs	r3, #69	; 0x45
    23e2:	462a      	mov	r2, r5
    23e4:	4907      	ldr	r1, [pc, #28]	; (2404 <sys_notify_finalize+0x40>)
    23e6:	4808      	ldr	r0, [pc, #32]	; (2408 <sys_notify_finalize+0x44>)
    23e8:	f009 ff48 	bl	c27c <assert_print>
    23ec:	2145      	movs	r1, #69	; 0x45
    23ee:	4628      	mov	r0, r5
    23f0:	f009 ff3d 	bl	c26e <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    23f4:	2000      	movs	r0, #0
    23f6:	e000      	b.n	23fa <sys_notify_finalize+0x36>
	switch (method) {
    23f8:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    23fa:	2300      	movs	r3, #0
    23fc:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    23fe:	bd38      	pop	{r3, r4, r5, pc}
    2400:	0000dea0 	.word	0x0000dea0
    2404:	0000d800 	.word	0x0000d800
    2408:	0000d63c 	.word	0x0000d63c

0000240c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    240c:	4b01      	ldr	r3, [pc, #4]	; (2414 <__printk_hook_install+0x8>)
    240e:	6018      	str	r0, [r3, #0]
}
    2410:	4770      	bx	lr
    2412:	bf00      	nop
    2414:	20000098 	.word	0x20000098

00002418 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    2418:	b538      	push	{r3, r4, r5, lr}
    241a:	4604      	mov	r4, r0
    241c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    241e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    2420:	2a00      	cmp	r2, #0
    2422:	db14      	blt.n	244e <process_complete+0x36>
    2424:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    2428:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    242a:	2a01      	cmp	r2, #1
    242c:	d91b      	bls.n	2466 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    242e:	2b04      	cmp	r3, #4
    2430:	d050      	beq.n	24d4 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    2432:	4c2f      	ldr	r4, [pc, #188]	; (24f0 <process_complete+0xd8>)
    2434:	f240 131b 	movw	r3, #283	; 0x11b
    2438:	4622      	mov	r2, r4
    243a:	492e      	ldr	r1, [pc, #184]	; (24f4 <process_complete+0xdc>)
    243c:	482e      	ldr	r0, [pc, #184]	; (24f8 <process_complete+0xe0>)
    243e:	f009 ff1d 	bl	c27c <assert_print>
    2442:	f240 111b 	movw	r1, #283	; 0x11b
    2446:	4620      	mov	r0, r4
    2448:	f009 ff11 	bl	c26e <assert_post_action>
	}
}
    244c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    244e:	e9d0 0100 	ldrd	r0, r1, [r0]
    2452:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2456:	2300      	movs	r3, #0
    2458:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    245a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    245c:	2101      	movs	r1, #1
    245e:	4620      	mov	r0, r4
    2460:	f009 fd95 	bl	bf8e <set_state>
    2464:	e7f2      	b.n	244c <process_complete+0x34>
		*clients = mgr->clients;
    2466:	e9d0 0100 	ldrd	r0, r1, [r0]
    246a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    246e:	2200      	movs	r2, #0
    2470:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    2472:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    2474:	2b06      	cmp	r3, #6
    2476:	d00f      	beq.n	2498 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    2478:	2b05      	cmp	r3, #5
    247a:	d11d      	bne.n	24b8 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    247c:	2100      	movs	r1, #0
    247e:	4620      	mov	r0, r4
    2480:	f009 fd85 	bl	bf8e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2484:	4620      	mov	r0, r4
    2486:	f009 fda9 	bl	bfdc <process_recheck>
    248a:	2800      	cmp	r0, #0
    248c:	d0de      	beq.n	244c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    248e:	8ba3      	ldrh	r3, [r4, #28]
    2490:	f043 0320 	orr.w	r3, r3, #32
    2494:	83a3      	strh	r3, [r4, #28]
    2496:	e7d9      	b.n	244c <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2498:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    249c:	b13b      	cbz	r3, 24ae <process_complete+0x96>
				mgr->refs += 1U;
    249e:	8be2      	ldrh	r2, [r4, #30]
    24a0:	3201      	adds	r2, #1
    24a2:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    24a4:	2b00      	cmp	r3, #0
    24a6:	d0f9      	beq.n	249c <process_complete+0x84>
	return node->next;
    24a8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    24aa:	2b00      	cmp	r3, #0
    24ac:	d1f6      	bne.n	249c <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    24ae:	2102      	movs	r1, #2
    24b0:	4620      	mov	r0, r4
    24b2:	f009 fd6c 	bl	bf8e <set_state>
    24b6:	e7e5      	b.n	2484 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    24b8:	4d0d      	ldr	r5, [pc, #52]	; (24f0 <process_complete+0xd8>)
    24ba:	f240 1309 	movw	r3, #265	; 0x109
    24be:	462a      	mov	r2, r5
    24c0:	490e      	ldr	r1, [pc, #56]	; (24fc <process_complete+0xe4>)
    24c2:	480d      	ldr	r0, [pc, #52]	; (24f8 <process_complete+0xe0>)
    24c4:	f009 feda 	bl	c27c <assert_print>
    24c8:	f240 1109 	movw	r1, #265	; 0x109
    24cc:	4628      	mov	r0, r5
    24ce:	f009 fece 	bl	c26e <assert_post_action>
    24d2:	e7d3      	b.n	247c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    24d4:	2100      	movs	r1, #0
    24d6:	f009 fd5a 	bl	bf8e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    24da:	4620      	mov	r0, r4
    24dc:	f009 fd7e 	bl	bfdc <process_recheck>
    24e0:	2800      	cmp	r0, #0
    24e2:	d0b3      	beq.n	244c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    24e4:	8ba3      	ldrh	r3, [r4, #28]
    24e6:	f043 0320 	orr.w	r3, r3, #32
    24ea:	83a3      	strh	r3, [r4, #28]
    24ec:	e7ae      	b.n	244c <process_complete+0x34>
    24ee:	bf00      	nop
    24f0:	0000dec4 	.word	0x0000dec4
    24f4:	0000d800 	.word	0x0000d800
    24f8:	0000d63c 	.word	0x0000d63c
    24fc:	0000dee8 	.word	0x0000dee8

00002500 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2504:	b083      	sub	sp, #12
    2506:	4604      	mov	r4, r0
    2508:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    250a:	8b83      	ldrh	r3, [r0, #28]
    250c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    2510:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    2514:	460d      	mov	r5, r1
    2516:	b131      	cbz	r1, 2526 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2518:	f1b8 0f00 	cmp.w	r8, #0
    251c:	d112      	bne.n	2544 <process_event+0x44>
	list->head = NULL;
    251e:	2300      	movs	r3, #0
    2520:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2522:	9301      	str	r3, [sp, #4]
}
    2524:	e0aa      	b.n	267c <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    2526:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 2808 <process_event+0x308>
    252a:	f240 1333 	movw	r3, #307	; 0x133
    252e:	464a      	mov	r2, r9
    2530:	49b6      	ldr	r1, [pc, #728]	; (280c <process_event+0x30c>)
    2532:	48b7      	ldr	r0, [pc, #732]	; (2810 <process_event+0x310>)
    2534:	f009 fea2 	bl	c27c <assert_print>
    2538:	f240 1133 	movw	r1, #307	; 0x133
    253c:	4648      	mov	r0, r9
    253e:	f009 fe96 	bl	c26e <assert_post_action>
    2542:	e7e9      	b.n	2518 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    2544:	2d01      	cmp	r5, #1
    2546:	d013      	beq.n	2570 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    2548:	2d02      	cmp	r5, #2
    254a:	d116      	bne.n	257a <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    254c:	8ba3      	ldrh	r3, [r4, #28]
    254e:	f043 0320 	orr.w	r3, r3, #32
    2552:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    2554:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2556:	4620      	mov	r0, r4
    2558:	f006 fd94 	bl	9084 <z_spin_unlock_valid>
    255c:	2800      	cmp	r0, #0
    255e:	f000 819c 	beq.w	289a <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2562:	f386 8811 	msr	BASEPRI, r6
    2566:	f3bf 8f6f 	isb	sy
}
    256a:	b003      	add	sp, #12
    256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2570:	8ba3      	ldrh	r3, [r4, #28]
    2572:	f043 0310 	orr.w	r3, r3, #16
    2576:	83a3      	strh	r3, [r4, #28]
    2578:	e7ec      	b.n	2554 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    257a:	4da3      	ldr	r5, [pc, #652]	; (2808 <process_event+0x308>)
    257c:	f44f 739e 	mov.w	r3, #316	; 0x13c
    2580:	462a      	mov	r2, r5
    2582:	49a4      	ldr	r1, [pc, #656]	; (2814 <process_event+0x314>)
    2584:	48a2      	ldr	r0, [pc, #648]	; (2810 <process_event+0x310>)
    2586:	f009 fe79 	bl	c27c <assert_print>
    258a:	f44f 719e 	mov.w	r1, #316	; 0x13c
    258e:	4628      	mov	r0, r5
    2590:	f009 fe6d 	bl	c26e <assert_post_action>
    2594:	e7da      	b.n	254c <process_event+0x4c>
			evt = process_recheck(mgr);
    2596:	4620      	mov	r0, r4
    2598:	f009 fd20 	bl	bfdc <process_recheck>
    259c:	4605      	mov	r5, r0
    259e:	e06f      	b.n	2680 <process_event+0x180>
			res = mgr->last_res;
    25a0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    25a4:	464a      	mov	r2, r9
    25a6:	4669      	mov	r1, sp
    25a8:	4620      	mov	r0, r4
    25aa:	f7ff ff35 	bl	2418 <process_complete>
		onoff_transition_fn transit = NULL;
    25ae:	2500      	movs	r5, #0
    25b0:	e011      	b.n	25d6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    25b2:	2f00      	cmp	r7, #0
    25b4:	f040 8081 	bne.w	26ba <process_event+0x1ba>
	return list->head;
    25b8:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    25ba:	2b00      	cmp	r3, #0
    25bc:	f000 808b 	beq.w	26d6 <process_event+0x1d6>
			transit = mgr->transitions->start;
    25c0:	6923      	ldr	r3, [r4, #16]
    25c2:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    25c4:	2d00      	cmp	r5, #0
    25c6:	f000 8094 	beq.w	26f2 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    25ca:	2106      	movs	r1, #6
    25cc:	4620      	mov	r0, r4
    25ce:	f009 fcde 	bl	bf8e <set_state>
		res = 0;
    25d2:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    25d6:	8ba3      	ldrh	r3, [r4, #28]
    25d8:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    25dc:	45b8      	cmp	r8, r7
    25de:	f000 810b 	beq.w	27f8 <process_event+0x2f8>
    25e2:	68a2      	ldr	r2, [r4, #8]
    25e4:	2a00      	cmp	r2, #0
    25e6:	f000 8109 	beq.w	27fc <process_event+0x2fc>
    25ea:	2201      	movs	r2, #1
		if (do_monitors
    25ec:	4617      	mov	r7, r2
    25ee:	b91a      	cbnz	r2, 25f8 <process_event+0xf8>
    25f0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    25f2:	2a00      	cmp	r2, #0
    25f4:	f000 8104 	beq.w	2800 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    25f8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    25fc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    25fe:	f104 0a14 	add.w	sl, r4, #20
    2602:	4650      	mov	r0, sl
    2604:	f006 fd3e 	bl	9084 <z_spin_unlock_valid>
    2608:	2800      	cmp	r0, #0
    260a:	f000 8115 	beq.w	2838 <process_event+0x338>
    260e:	f386 8811 	msr	BASEPRI, r6
    2612:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2616:	2f00      	cmp	r7, #0
    2618:	f040 811f 	bne.w	285a <process_event+0x35a>
    261c:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    261e:	b12b      	cbz	r3, 262c <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    2620:	464b      	mov	r3, r9
    2622:	4642      	mov	r2, r8
    2624:	4669      	mov	r1, sp
    2626:	4620      	mov	r0, r4
    2628:	f009 fd1a 	bl	c060 <notify_all>
			if (transit != NULL) {
    262c:	b115      	cbz	r5, 2634 <process_event+0x134>
				transit(mgr, transition_complete);
    262e:	497a      	ldr	r1, [pc, #488]	; (2818 <process_event+0x318>)
    2630:	4620      	mov	r0, r4
    2632:	47a8      	blx	r5
	__asm__ volatile(
    2634:	f04f 0320 	mov.w	r3, #32
    2638:	f3ef 8611 	mrs	r6, BASEPRI
    263c:	f383 8812 	msr	BASEPRI_MAX, r3
    2640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2644:	4650      	mov	r0, sl
    2646:	f006 fd0d 	bl	9064 <z_spin_lock_valid>
    264a:	2800      	cmp	r0, #0
    264c:	f000 810b 	beq.w	2866 <process_event+0x366>
	z_spin_lock_set_owner(l);
    2650:	4650      	mov	r0, sl
    2652:	f006 fd27 	bl	90a4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2656:	8ba3      	ldrh	r3, [r4, #28]
    2658:	f023 0308 	bic.w	r3, r3, #8
    265c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    265e:	8ba3      	ldrh	r3, [r4, #28]
    2660:	f013 0f10 	tst.w	r3, #16
    2664:	f000 810f 	beq.w	2886 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2668:	f023 0310 	bic.w	r3, r3, #16
    266c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    266e:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2670:	8ba7      	ldrh	r7, [r4, #28]
    2672:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    2676:	2d00      	cmp	r5, #0
    2678:	f43f af6c 	beq.w	2554 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    267c:	2d02      	cmp	r5, #2
    267e:	d08a      	beq.n	2596 <process_event+0x96>
		if (evt == EVT_NOP) {
    2680:	2d00      	cmp	r5, #0
    2682:	f43f af67 	beq.w	2554 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    2686:	2d01      	cmp	r5, #1
    2688:	d08a      	beq.n	25a0 <process_event+0xa0>
		} else if (evt == EVT_START) {
    268a:	2d03      	cmp	r5, #3
    268c:	d091      	beq.n	25b2 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    268e:	2d04      	cmp	r5, #4
    2690:	d03e      	beq.n	2710 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    2692:	2d05      	cmp	r5, #5
    2694:	f040 80a0 	bne.w	27d8 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2698:	2f01      	cmp	r7, #1
    269a:	d172      	bne.n	2782 <process_event+0x282>
    269c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    269e:	2b00      	cmp	r3, #0
    26a0:	d07d      	beq.n	279e <process_event+0x29e>
			transit = mgr->transitions->reset;
    26a2:	6923      	ldr	r3, [r4, #16]
    26a4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    26a6:	2d00      	cmp	r5, #0
    26a8:	f000 8087 	beq.w	27ba <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    26ac:	2105      	movs	r1, #5
    26ae:	4620      	mov	r0, r4
    26b0:	f009 fc6d 	bl	bf8e <set_state>
		res = 0;
    26b4:	f04f 0900 	mov.w	r9, #0
    26b8:	e78d      	b.n	25d6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    26ba:	4d53      	ldr	r5, [pc, #332]	; (2808 <process_event+0x308>)
    26bc:	f44f 73ab 	mov.w	r3, #342	; 0x156
    26c0:	462a      	mov	r2, r5
    26c2:	4956      	ldr	r1, [pc, #344]	; (281c <process_event+0x31c>)
    26c4:	4852      	ldr	r0, [pc, #328]	; (2810 <process_event+0x310>)
    26c6:	f009 fdd9 	bl	c27c <assert_print>
    26ca:	f44f 71ab 	mov.w	r1, #342	; 0x156
    26ce:	4628      	mov	r0, r5
    26d0:	f009 fdcd 	bl	c26e <assert_post_action>
    26d4:	e770      	b.n	25b8 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    26d6:	4d4c      	ldr	r5, [pc, #304]	; (2808 <process_event+0x308>)
    26d8:	f240 1357 	movw	r3, #343	; 0x157
    26dc:	462a      	mov	r2, r5
    26de:	4950      	ldr	r1, [pc, #320]	; (2820 <process_event+0x320>)
    26e0:	484b      	ldr	r0, [pc, #300]	; (2810 <process_event+0x310>)
    26e2:	f009 fdcb 	bl	c27c <assert_print>
    26e6:	f240 1157 	movw	r1, #343	; 0x157
    26ea:	4628      	mov	r0, r5
    26ec:	f009 fdbf 	bl	c26e <assert_post_action>
    26f0:	e766      	b.n	25c0 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    26f2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2808 <process_event+0x308>
    26f6:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    26fa:	4642      	mov	r2, r8
    26fc:	4949      	ldr	r1, [pc, #292]	; (2824 <process_event+0x324>)
    26fe:	4844      	ldr	r0, [pc, #272]	; (2810 <process_event+0x310>)
    2700:	f009 fdbc 	bl	c27c <assert_print>
    2704:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2708:	4640      	mov	r0, r8
    270a:	f009 fdb0 	bl	c26e <assert_post_action>
    270e:	e75c      	b.n	25ca <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    2710:	2f02      	cmp	r7, #2
    2712:	d10b      	bne.n	272c <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2714:	8be3      	ldrh	r3, [r4, #30]
    2716:	b9bb      	cbnz	r3, 2748 <process_event+0x248>
			transit = mgr->transitions->stop;
    2718:	6923      	ldr	r3, [r4, #16]
    271a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    271c:	b315      	cbz	r5, 2764 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    271e:	2104      	movs	r1, #4
    2720:	4620      	mov	r0, r4
    2722:	f009 fc34 	bl	bf8e <set_state>
		res = 0;
    2726:	f04f 0900 	mov.w	r9, #0
    272a:	e754      	b.n	25d6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    272c:	4d36      	ldr	r5, [pc, #216]	; (2808 <process_event+0x308>)
    272e:	f240 135d 	movw	r3, #349	; 0x15d
    2732:	462a      	mov	r2, r5
    2734:	493c      	ldr	r1, [pc, #240]	; (2828 <process_event+0x328>)
    2736:	4836      	ldr	r0, [pc, #216]	; (2810 <process_event+0x310>)
    2738:	f009 fda0 	bl	c27c <assert_print>
    273c:	f240 115d 	movw	r1, #349	; 0x15d
    2740:	4628      	mov	r0, r5
    2742:	f009 fd94 	bl	c26e <assert_post_action>
    2746:	e7e5      	b.n	2714 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2748:	4d2f      	ldr	r5, [pc, #188]	; (2808 <process_event+0x308>)
    274a:	f44f 73af 	mov.w	r3, #350	; 0x15e
    274e:	462a      	mov	r2, r5
    2750:	4936      	ldr	r1, [pc, #216]	; (282c <process_event+0x32c>)
    2752:	482f      	ldr	r0, [pc, #188]	; (2810 <process_event+0x310>)
    2754:	f009 fd92 	bl	c27c <assert_print>
    2758:	f44f 71af 	mov.w	r1, #350	; 0x15e
    275c:	4628      	mov	r0, r5
    275e:	f009 fd86 	bl	c26e <assert_post_action>
    2762:	e7d9      	b.n	2718 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    2764:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2808 <process_event+0x308>
    2768:	f240 1361 	movw	r3, #353	; 0x161
    276c:	4642      	mov	r2, r8
    276e:	492d      	ldr	r1, [pc, #180]	; (2824 <process_event+0x324>)
    2770:	4827      	ldr	r0, [pc, #156]	; (2810 <process_event+0x310>)
    2772:	f009 fd83 	bl	c27c <assert_print>
    2776:	f240 1161 	movw	r1, #353	; 0x161
    277a:	4640      	mov	r0, r8
    277c:	f009 fd77 	bl	c26e <assert_post_action>
    2780:	e7cd      	b.n	271e <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2782:	4d21      	ldr	r5, [pc, #132]	; (2808 <process_event+0x308>)
    2784:	f44f 73b2 	mov.w	r3, #356	; 0x164
    2788:	462a      	mov	r2, r5
    278a:	4929      	ldr	r1, [pc, #164]	; (2830 <process_event+0x330>)
    278c:	4820      	ldr	r0, [pc, #128]	; (2810 <process_event+0x310>)
    278e:	f009 fd75 	bl	c27c <assert_print>
    2792:	f44f 71b2 	mov.w	r1, #356	; 0x164
    2796:	4628      	mov	r0, r5
    2798:	f009 fd69 	bl	c26e <assert_post_action>
    279c:	e77e      	b.n	269c <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    279e:	4d1a      	ldr	r5, [pc, #104]	; (2808 <process_event+0x308>)
    27a0:	f240 1365 	movw	r3, #357	; 0x165
    27a4:	462a      	mov	r2, r5
    27a6:	491e      	ldr	r1, [pc, #120]	; (2820 <process_event+0x320>)
    27a8:	4819      	ldr	r0, [pc, #100]	; (2810 <process_event+0x310>)
    27aa:	f009 fd67 	bl	c27c <assert_print>
    27ae:	f240 1165 	movw	r1, #357	; 0x165
    27b2:	4628      	mov	r0, r5
    27b4:	f009 fd5b 	bl	c26e <assert_post_action>
    27b8:	e773      	b.n	26a2 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    27ba:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2808 <process_event+0x308>
    27be:	f44f 73b4 	mov.w	r3, #360	; 0x168
    27c2:	4642      	mov	r2, r8
    27c4:	4917      	ldr	r1, [pc, #92]	; (2824 <process_event+0x324>)
    27c6:	4812      	ldr	r0, [pc, #72]	; (2810 <process_event+0x310>)
    27c8:	f009 fd58 	bl	c27c <assert_print>
    27cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
    27d0:	4640      	mov	r0, r8
    27d2:	f009 fd4c 	bl	c26e <assert_post_action>
    27d6:	e769      	b.n	26ac <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    27d8:	4d0b      	ldr	r5, [pc, #44]	; (2808 <process_event+0x308>)
    27da:	f240 136b 	movw	r3, #363	; 0x16b
    27de:	462a      	mov	r2, r5
    27e0:	4914      	ldr	r1, [pc, #80]	; (2834 <process_event+0x334>)
    27e2:	480b      	ldr	r0, [pc, #44]	; (2810 <process_event+0x310>)
    27e4:	f009 fd4a 	bl	c27c <assert_print>
    27e8:	f240 116b 	movw	r1, #363	; 0x16b
    27ec:	4628      	mov	r0, r5
    27ee:	f009 fd3e 	bl	c26e <assert_post_action>
		onoff_transition_fn transit = NULL;
    27f2:	2500      	movs	r5, #0
		res = 0;
    27f4:	46a9      	mov	r9, r5
    27f6:	e6ee      	b.n	25d6 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    27f8:	2200      	movs	r2, #0
    27fa:	e6f7      	b.n	25ec <process_event+0xec>
    27fc:	2200      	movs	r2, #0
    27fe:	e6f5      	b.n	25ec <process_event+0xec>
		    || (transit != NULL)) {
    2800:	2d00      	cmp	r5, #0
    2802:	f47f aef9 	bne.w	25f8 <process_event+0xf8>
    2806:	e72a      	b.n	265e <process_event+0x15e>
    2808:	0000dec4 	.word	0x0000dec4
    280c:	0000df10 	.word	0x0000df10
    2810:	0000d63c 	.word	0x0000d63c
    2814:	0000df20 	.word	0x0000df20
    2818:	000028d5 	.word	0x000028d5
    281c:	0000df34 	.word	0x0000df34
    2820:	0000df40 	.word	0x0000df40
    2824:	0000df64 	.word	0x0000df64
    2828:	0000df7c 	.word	0x0000df7c
    282c:	0000df94 	.word	0x0000df94
    2830:	0000dfa4 	.word	0x0000dfa4
    2834:	0000d800 	.word	0x0000d800
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2838:	f8df b080 	ldr.w	fp, [pc, #128]	; 28bc <process_event+0x3bc>
    283c:	23b9      	movs	r3, #185	; 0xb9
    283e:	465a      	mov	r2, fp
    2840:	491f      	ldr	r1, [pc, #124]	; (28c0 <process_event+0x3c0>)
    2842:	4820      	ldr	r0, [pc, #128]	; (28c4 <process_event+0x3c4>)
    2844:	f009 fd1a 	bl	c27c <assert_print>
    2848:	4651      	mov	r1, sl
    284a:	481f      	ldr	r0, [pc, #124]	; (28c8 <process_event+0x3c8>)
    284c:	f009 fd16 	bl	c27c <assert_print>
    2850:	21b9      	movs	r1, #185	; 0xb9
    2852:	4658      	mov	r0, fp
    2854:	f009 fd0b 	bl	c26e <assert_post_action>
    2858:	e6d9      	b.n	260e <process_event+0x10e>
				notify_monitors(mgr, state, res);
    285a:	464a      	mov	r2, r9
    285c:	4641      	mov	r1, r8
    285e:	4620      	mov	r0, r4
    2860:	f009 fb9d 	bl	bf9e <notify_monitors>
    2864:	e6da      	b.n	261c <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2866:	4d15      	ldr	r5, [pc, #84]	; (28bc <process_event+0x3bc>)
    2868:	238e      	movs	r3, #142	; 0x8e
    286a:	462a      	mov	r2, r5
    286c:	4917      	ldr	r1, [pc, #92]	; (28cc <process_event+0x3cc>)
    286e:	4815      	ldr	r0, [pc, #84]	; (28c4 <process_event+0x3c4>)
    2870:	f009 fd04 	bl	c27c <assert_print>
    2874:	4651      	mov	r1, sl
    2876:	4816      	ldr	r0, [pc, #88]	; (28d0 <process_event+0x3d0>)
    2878:	f009 fd00 	bl	c27c <assert_print>
    287c:	218e      	movs	r1, #142	; 0x8e
    287e:	4628      	mov	r0, r5
    2880:	f009 fcf5 	bl	c26e <assert_post_action>
    2884:	e6e4      	b.n	2650 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2886:	f013 0f20 	tst.w	r3, #32
    288a:	d004      	beq.n	2896 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    288c:	f023 0320 	bic.w	r3, r3, #32
    2890:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    2892:	2502      	movs	r5, #2
    2894:	e6ec      	b.n	2670 <process_event+0x170>
		evt = EVT_NOP;
    2896:	2500      	movs	r5, #0
    2898:	e6ea      	b.n	2670 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    289a:	4d08      	ldr	r5, [pc, #32]	; (28bc <process_event+0x3bc>)
    289c:	23b9      	movs	r3, #185	; 0xb9
    289e:	462a      	mov	r2, r5
    28a0:	4907      	ldr	r1, [pc, #28]	; (28c0 <process_event+0x3c0>)
    28a2:	4808      	ldr	r0, [pc, #32]	; (28c4 <process_event+0x3c4>)
    28a4:	f009 fcea 	bl	c27c <assert_print>
    28a8:	4621      	mov	r1, r4
    28aa:	4807      	ldr	r0, [pc, #28]	; (28c8 <process_event+0x3c8>)
    28ac:	f009 fce6 	bl	c27c <assert_print>
    28b0:	21b9      	movs	r1, #185	; 0xb9
    28b2:	4628      	mov	r0, r5
    28b4:	f009 fcdb 	bl	c26e <assert_post_action>
    28b8:	e653      	b.n	2562 <process_event+0x62>
    28ba:	bf00      	nop
    28bc:	0000dfbc 	.word	0x0000dfbc
    28c0:	0000dfec 	.word	0x0000dfec
    28c4:	0000d63c 	.word	0x0000d63c
    28c8:	0000e004 	.word	0x0000e004
    28cc:	0000e01c 	.word	0x0000e01c
    28d0:	0000e034 	.word	0x0000e034

000028d4 <transition_complete>:
{
    28d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28d8:	4604      	mov	r4, r0
    28da:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    28dc:	f100 0614 	add.w	r6, r0, #20
    28e0:	f04f 0320 	mov.w	r3, #32
    28e4:	f3ef 8711 	mrs	r7, BASEPRI
    28e8:	f383 8812 	msr	BASEPRI_MAX, r3
    28ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28f0:	4630      	mov	r0, r6
    28f2:	f006 fbb7 	bl	9064 <z_spin_lock_valid>
    28f6:	b150      	cbz	r0, 290e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    28f8:	4630      	mov	r0, r6
    28fa:	f006 fbd3 	bl	90a4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    28fe:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2900:	463a      	mov	r2, r7
    2902:	2101      	movs	r1, #1
    2904:	4620      	mov	r0, r4
    2906:	f7ff fdfb 	bl	2500 <process_event>
}
    290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    290e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 2930 <transition_complete+0x5c>
    2912:	238e      	movs	r3, #142	; 0x8e
    2914:	4642      	mov	r2, r8
    2916:	4907      	ldr	r1, [pc, #28]	; (2934 <transition_complete+0x60>)
    2918:	4807      	ldr	r0, [pc, #28]	; (2938 <transition_complete+0x64>)
    291a:	f009 fcaf 	bl	c27c <assert_print>
    291e:	4631      	mov	r1, r6
    2920:	4806      	ldr	r0, [pc, #24]	; (293c <transition_complete+0x68>)
    2922:	f009 fcab 	bl	c27c <assert_print>
    2926:	218e      	movs	r1, #142	; 0x8e
    2928:	4640      	mov	r0, r8
    292a:	f009 fca0 	bl	c26e <assert_post_action>
    292e:	e7e3      	b.n	28f8 <transition_complete+0x24>
    2930:	0000dfbc 	.word	0x0000dfbc
    2934:	0000e01c 	.word	0x0000e01c
    2938:	0000d63c 	.word	0x0000d63c
    293c:	0000e034 	.word	0x0000e034

00002940 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2944:	4604      	mov	r4, r0
    2946:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2948:	f009 fb61 	bl	c00e <validate_args>

	if (rv < 0) {
    294c:	1e06      	subs	r6, r0, #0
    294e:	db58      	blt.n	2a02 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2950:	f104 0714 	add.w	r7, r4, #20
    2954:	f04f 0320 	mov.w	r3, #32
    2958:	f3ef 8911 	mrs	r9, BASEPRI
    295c:	f383 8812 	msr	BASEPRI_MAX, r3
    2960:	f3bf 8f6f 	isb	sy
    2964:	4638      	mov	r0, r7
    2966:	f006 fb7d 	bl	9064 <z_spin_lock_valid>
    296a:	b1e8      	cbz	r0, 29a8 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    296c:	4638      	mov	r0, r7
    296e:	f006 fb99 	bl	90a4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2972:	8ba5      	ldrh	r5, [r4, #28]
    2974:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2978:	8be3      	ldrh	r3, [r4, #30]
    297a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    297e:	4293      	cmp	r3, r2
    2980:	d056      	beq.n	2a30 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    2982:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    2984:	2d02      	cmp	r5, #2
    2986:	d01f      	beq.n	29c8 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    2988:	b32d      	cbz	r5, 29d6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    298a:	2d04      	cmp	r5, #4
    298c:	d023      	beq.n	29d6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    298e:	2d06      	cmp	r5, #6
    2990:	d021      	beq.n	29d6 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    2992:	2d05      	cmp	r5, #5
    2994:	d053      	beq.n	2a3e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2996:	2d01      	cmp	r5, #1
    2998:	d136      	bne.n	2a08 <onoff_request+0xc8>
		rv = -EIO;
    299a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    299e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    29a2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    29a4:	4652      	mov	r2, sl
    29a6:	e01c      	b.n	29e2 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    29a8:	4d3c      	ldr	r5, [pc, #240]	; (2a9c <onoff_request+0x15c>)
    29aa:	238e      	movs	r3, #142	; 0x8e
    29ac:	462a      	mov	r2, r5
    29ae:	493c      	ldr	r1, [pc, #240]	; (2aa0 <onoff_request+0x160>)
    29b0:	483c      	ldr	r0, [pc, #240]	; (2aa4 <onoff_request+0x164>)
    29b2:	f009 fc63 	bl	c27c <assert_print>
    29b6:	4639      	mov	r1, r7
    29b8:	483b      	ldr	r0, [pc, #236]	; (2aa8 <onoff_request+0x168>)
    29ba:	f009 fc5f 	bl	c27c <assert_print>
    29be:	218e      	movs	r1, #142	; 0x8e
    29c0:	4628      	mov	r0, r5
    29c2:	f009 fc54 	bl	c26e <assert_post_action>
    29c6:	e7d1      	b.n	296c <onoff_request+0x2c>
		mgr->refs += 1U;
    29c8:	3301      	adds	r3, #1
    29ca:	83e3      	strh	r3, [r4, #30]
		notify = true;
    29cc:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    29d0:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    29d2:	461a      	mov	r2, r3
    29d4:	e005      	b.n	29e2 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    29d6:	fab5 f385 	clz	r3, r5
    29da:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    29dc:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    29e0:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    29e2:	b142      	cbz	r2, 29f6 <onoff_request+0xb6>
	parent->next = child;
    29e4:	2200      	movs	r2, #0
    29e6:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    29ea:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    29ec:	b372      	cbz	r2, 2a4c <onoff_request+0x10c>
	parent->next = child;
    29ee:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    29f2:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    29f6:	b373      	cbz	r3, 2a56 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    29f8:	464a      	mov	r2, r9
    29fa:	2102      	movs	r1, #2
    29fc:	4620      	mov	r0, r4
    29fe:	f7ff fd7f 	bl	2500 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    2a02:	4630      	mov	r0, r6
    2a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2a08:	4e28      	ldr	r6, [pc, #160]	; (2aac <onoff_request+0x16c>)
    2a0a:	f240 13c9 	movw	r3, #457	; 0x1c9
    2a0e:	4632      	mov	r2, r6
    2a10:	4927      	ldr	r1, [pc, #156]	; (2ab0 <onoff_request+0x170>)
    2a12:	4824      	ldr	r0, [pc, #144]	; (2aa4 <onoff_request+0x164>)
    2a14:	f009 fc32 	bl	c27c <assert_print>
    2a18:	f240 11c9 	movw	r1, #457	; 0x1c9
    2a1c:	4630      	mov	r0, r6
    2a1e:	f009 fc26 	bl	c26e <assert_post_action>
		rv = -EIO;
    2a22:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    2a26:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2a2a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2a2c:	4652      	mov	r2, sl
    2a2e:	e7d8      	b.n	29e2 <onoff_request+0xa2>
		rv = -EAGAIN;
    2a30:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    2a34:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2a38:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2a3a:	4652      	mov	r2, sl
    2a3c:	e7d1      	b.n	29e2 <onoff_request+0xa2>
		rv = -ENOTSUP;
    2a3e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    2a42:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    2a46:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2a48:	4652      	mov	r2, sl
    2a4a:	e7ca      	b.n	29e2 <onoff_request+0xa2>
    2a4c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    2a50:	f8c4 8000 	str.w	r8, [r4]
}
    2a54:	e7cf      	b.n	29f6 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2a56:	4638      	mov	r0, r7
    2a58:	f006 fb14 	bl	9084 <z_spin_unlock_valid>
    2a5c:	b168      	cbz	r0, 2a7a <onoff_request+0x13a>
	__asm__ volatile(
    2a5e:	f389 8811 	msr	BASEPRI, r9
    2a62:	f3bf 8f6f 	isb	sy
		if (notify) {
    2a66:	f1ba 0f00 	cmp.w	sl, #0
    2a6a:	d0ca      	beq.n	2a02 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    2a6c:	2300      	movs	r3, #0
    2a6e:	462a      	mov	r2, r5
    2a70:	4641      	mov	r1, r8
    2a72:	4620      	mov	r0, r4
    2a74:	f009 fae1 	bl	c03a <notify_one>
    2a78:	e7c3      	b.n	2a02 <onoff_request+0xc2>
    2a7a:	f8df b020 	ldr.w	fp, [pc, #32]	; 2a9c <onoff_request+0x15c>
    2a7e:	23b9      	movs	r3, #185	; 0xb9
    2a80:	465a      	mov	r2, fp
    2a82:	490c      	ldr	r1, [pc, #48]	; (2ab4 <onoff_request+0x174>)
    2a84:	4807      	ldr	r0, [pc, #28]	; (2aa4 <onoff_request+0x164>)
    2a86:	f009 fbf9 	bl	c27c <assert_print>
    2a8a:	4639      	mov	r1, r7
    2a8c:	480a      	ldr	r0, [pc, #40]	; (2ab8 <onoff_request+0x178>)
    2a8e:	f009 fbf5 	bl	c27c <assert_print>
    2a92:	21b9      	movs	r1, #185	; 0xb9
    2a94:	4658      	mov	r0, fp
    2a96:	f009 fbea 	bl	c26e <assert_post_action>
    2a9a:	e7e0      	b.n	2a5e <onoff_request+0x11e>
    2a9c:	0000dfbc 	.word	0x0000dfbc
    2aa0:	0000e01c 	.word	0x0000e01c
    2aa4:	0000d63c 	.word	0x0000d63c
    2aa8:	0000e034 	.word	0x0000e034
    2aac:	0000dec4 	.word	0x0000dec4
    2ab0:	0000dfa4 	.word	0x0000dfa4
    2ab4:	0000dfec 	.word	0x0000dfec
    2ab8:	0000e004 	.word	0x0000e004

00002abc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ac0:	4606      	mov	r6, r0
    2ac2:	460d      	mov	r5, r1
    2ac4:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2ac6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    2aca:	d222      	bcs.n	2b12 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2acc:	2c04      	cmp	r4, #4
    2ace:	d931      	bls.n	2b34 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    2ad0:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2ad2:	1dec      	adds	r4, r5, #7
    2ad4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2ad8:	4415      	add	r5, r2
    2ada:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2ade:	1b2d      	subs	r5, r5, r4
    2ae0:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2ae4:	2d17      	cmp	r5, #23
    2ae6:	d936      	bls.n	2b56 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    2ae8:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    2aea:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    2aee:	2300      	movs	r3, #0
    2af0:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    2af2:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2af6:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2afa:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    2afe:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2b00:	3607      	adds	r6, #7
    2b02:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2b06:	f109 0301 	add.w	r3, r9, #1
    2b0a:	4543      	cmp	r3, r8
    2b0c:	d834      	bhi.n	2b78 <sys_heap_init+0xbc>
{
    2b0e:	2300      	movs	r3, #0
    2b10:	e049      	b.n	2ba6 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2b12:	4f38      	ldr	r7, [pc, #224]	; (2bf4 <sys_heap_init+0x138>)
    2b14:	f240 13e3 	movw	r3, #483	; 0x1e3
    2b18:	463a      	mov	r2, r7
    2b1a:	4937      	ldr	r1, [pc, #220]	; (2bf8 <sys_heap_init+0x13c>)
    2b1c:	4837      	ldr	r0, [pc, #220]	; (2bfc <sys_heap_init+0x140>)
    2b1e:	f009 fbad 	bl	c27c <assert_print>
    2b22:	4837      	ldr	r0, [pc, #220]	; (2c00 <sys_heap_init+0x144>)
    2b24:	f009 fbaa 	bl	c27c <assert_print>
    2b28:	f240 11e3 	movw	r1, #483	; 0x1e3
    2b2c:	4638      	mov	r0, r7
    2b2e:	f009 fb9e 	bl	c26e <assert_post_action>
    2b32:	e7cb      	b.n	2acc <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2b34:	4f2f      	ldr	r7, [pc, #188]	; (2bf4 <sys_heap_init+0x138>)
    2b36:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2b3a:	463a      	mov	r2, r7
    2b3c:	4931      	ldr	r1, [pc, #196]	; (2c04 <sys_heap_init+0x148>)
    2b3e:	482f      	ldr	r0, [pc, #188]	; (2bfc <sys_heap_init+0x140>)
    2b40:	f009 fb9c 	bl	c27c <assert_print>
    2b44:	4830      	ldr	r0, [pc, #192]	; (2c08 <sys_heap_init+0x14c>)
    2b46:	f009 fb99 	bl	c27c <assert_print>
    2b4a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2b4e:	4638      	mov	r0, r7
    2b50:	f009 fb8d 	bl	c26e <assert_post_action>
    2b54:	e7bc      	b.n	2ad0 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2b56:	4f27      	ldr	r7, [pc, #156]	; (2bf4 <sys_heap_init+0x138>)
    2b58:	f240 13f3 	movw	r3, #499	; 0x1f3
    2b5c:	463a      	mov	r2, r7
    2b5e:	492b      	ldr	r1, [pc, #172]	; (2c0c <sys_heap_init+0x150>)
    2b60:	4826      	ldr	r0, [pc, #152]	; (2bfc <sys_heap_init+0x140>)
    2b62:	f009 fb8b 	bl	c27c <assert_print>
    2b66:	4828      	ldr	r0, [pc, #160]	; (2c08 <sys_heap_init+0x14c>)
    2b68:	f009 fb88 	bl	c27c <assert_print>
    2b6c:	f240 11f3 	movw	r1, #499	; 0x1f3
    2b70:	4638      	mov	r0, r7
    2b72:	f009 fb7c 	bl	c26e <assert_post_action>
    2b76:	e7b7      	b.n	2ae8 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2b78:	f8df a078 	ldr.w	sl, [pc, #120]	; 2bf4 <sys_heap_init+0x138>
    2b7c:	f44f 7301 	mov.w	r3, #516	; 0x204
    2b80:	4652      	mov	r2, sl
    2b82:	4923      	ldr	r1, [pc, #140]	; (2c10 <sys_heap_init+0x154>)
    2b84:	481d      	ldr	r0, [pc, #116]	; (2bfc <sys_heap_init+0x140>)
    2b86:	f009 fb79 	bl	c27c <assert_print>
    2b8a:	481f      	ldr	r0, [pc, #124]	; (2c08 <sys_heap_init+0x14c>)
    2b8c:	f009 fb76 	bl	c27c <assert_print>
    2b90:	f44f 7101 	mov.w	r1, #516	; 0x204
    2b94:	4650      	mov	r0, sl
    2b96:	f009 fb6a 	bl	c26e <assert_post_action>
    2b9a:	e7b8      	b.n	2b0e <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    2b9c:	1d1a      	adds	r2, r3, #4
    2b9e:	2100      	movs	r1, #0
    2ba0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    2ba4:	3301      	adds	r3, #1
    2ba6:	42bb      	cmp	r3, r7
    2ba8:	dbf8      	blt.n	2b9c <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2baa:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    2bae:	b29b      	uxth	r3, r3
    2bb0:	8063      	strh	r3, [r4, #2]
    2bb2:	2200      	movs	r2, #0
    2bb4:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2bb6:	f043 0301 	orr.w	r3, r3, #1
    2bba:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2bbc:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2bc0:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    2bc4:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    2bc8:	1cb3      	adds	r3, r6, #2
    2bca:	52e1      	strh	r1, [r4, r3]
    2bcc:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    2bd0:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    2bd4:	1ca9      	adds	r1, r5, #2
    2bd6:	5262      	strh	r2, [r4, r1]
    2bd8:	4425      	add	r5, r4
    2bda:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2bde:	886b      	ldrh	r3, [r5, #2]
    2be0:	f043 0301 	orr.w	r3, r3, #1
    2be4:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2be6:	4649      	mov	r1, r9
    2be8:	4620      	mov	r0, r4
    2bea:	f009 fa9e 	bl	c12a <free_list_add>
}
    2bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bf2:	bf00      	nop
    2bf4:	0000e04c 	.word	0x0000e04c
    2bf8:	0000e120 	.word	0x0000e120
    2bfc:	0000d63c 	.word	0x0000d63c
    2c00:	0000e138 	.word	0x0000e138
    2c04:	0000e150 	.word	0x0000e150
    2c08:	0000e174 	.word	0x0000e174
    2c0c:	0000e190 	.word	0x0000e190
    2c10:	0000e1bc 	.word	0x0000e1bc

00002c14 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    2c14:	b570      	push	{r4, r5, r6, lr}
    2c16:	b082      	sub	sp, #8
    2c18:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    2c1a:	2300      	movs	r3, #0
    2c1c:	6003      	str	r3, [r0, #0]
    2c1e:	6043      	str	r3, [r0, #4]
    2c20:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    2c22:	784b      	ldrb	r3, [r1, #1]
    2c24:	2b25      	cmp	r3, #37	; 0x25
    2c26:	d002      	beq.n	2c2e <extract_conversion+0x1a>
    2c28:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    2c2a:	2501      	movs	r5, #1
    2c2c:	e01f      	b.n	2c6e <extract_conversion+0x5a>
		conv->specifier = *sp++;
    2c2e:	1c88      	adds	r0, r1, #2
    2c30:	70e3      	strb	r3, [r4, #3]
		return sp;
    2c32:	e145      	b.n	2ec0 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    2c34:	7823      	ldrb	r3, [r4, #0]
    2c36:	f043 0304 	orr.w	r3, r3, #4
    2c3a:	7023      	strb	r3, [r4, #0]
		if (loop) {
    2c3c:	b1b5      	cbz	r5, 2c6c <extract_conversion+0x58>
			++sp;
    2c3e:	3601      	adds	r6, #1
    2c40:	e014      	b.n	2c6c <extract_conversion+0x58>
			conv->flag_plus = true;
    2c42:	7823      	ldrb	r3, [r4, #0]
    2c44:	f043 0308 	orr.w	r3, r3, #8
    2c48:	7023      	strb	r3, [r4, #0]
			break;
    2c4a:	e7f7      	b.n	2c3c <extract_conversion+0x28>
			conv->flag_space = true;
    2c4c:	7823      	ldrb	r3, [r4, #0]
    2c4e:	f043 0310 	orr.w	r3, r3, #16
    2c52:	7023      	strb	r3, [r4, #0]
			break;
    2c54:	e7f2      	b.n	2c3c <extract_conversion+0x28>
			conv->flag_hash = true;
    2c56:	7823      	ldrb	r3, [r4, #0]
    2c58:	f043 0320 	orr.w	r3, r3, #32
    2c5c:	7023      	strb	r3, [r4, #0]
			break;
    2c5e:	e7ed      	b.n	2c3c <extract_conversion+0x28>
			conv->flag_zero = true;
    2c60:	7823      	ldrb	r3, [r4, #0]
    2c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c66:	7023      	strb	r3, [r4, #0]
			break;
    2c68:	e7e8      	b.n	2c3c <extract_conversion+0x28>
		switch (*sp) {
    2c6a:	2500      	movs	r5, #0
	} while (loop);
    2c6c:	b345      	cbz	r5, 2cc0 <extract_conversion+0xac>
		switch (*sp) {
    2c6e:	7833      	ldrb	r3, [r6, #0]
    2c70:	3b20      	subs	r3, #32
    2c72:	2b10      	cmp	r3, #16
    2c74:	d8f9      	bhi.n	2c6a <extract_conversion+0x56>
    2c76:	a201      	add	r2, pc, #4	; (adr r2, 2c7c <extract_conversion+0x68>)
    2c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c7c:	00002c4d 	.word	0x00002c4d
    2c80:	00002c6b 	.word	0x00002c6b
    2c84:	00002c6b 	.word	0x00002c6b
    2c88:	00002c57 	.word	0x00002c57
    2c8c:	00002c6b 	.word	0x00002c6b
    2c90:	00002c6b 	.word	0x00002c6b
    2c94:	00002c6b 	.word	0x00002c6b
    2c98:	00002c6b 	.word	0x00002c6b
    2c9c:	00002c6b 	.word	0x00002c6b
    2ca0:	00002c6b 	.word	0x00002c6b
    2ca4:	00002c6b 	.word	0x00002c6b
    2ca8:	00002c43 	.word	0x00002c43
    2cac:	00002c6b 	.word	0x00002c6b
    2cb0:	00002c35 	.word	0x00002c35
    2cb4:	00002c6b 	.word	0x00002c6b
    2cb8:	00002c6b 	.word	0x00002c6b
    2cbc:	00002c61 	.word	0x00002c61
	if (conv->flag_zero && conv->flag_dash) {
    2cc0:	7823      	ldrb	r3, [r4, #0]
    2cc2:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2cc6:	2b44      	cmp	r3, #68	; 0x44
    2cc8:	d05f      	beq.n	2d8a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    2cca:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    2ccc:	7823      	ldrb	r3, [r4, #0]
    2cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2cd2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    2cd4:	7833      	ldrb	r3, [r6, #0]
    2cd6:	2b2a      	cmp	r3, #42	; 0x2a
    2cd8:	d05c      	beq.n	2d94 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    2cda:	a801      	add	r0, sp, #4
    2cdc:	f009 fa31 	bl	c142 <extract_decimal>
	if (sp != wp) {
    2ce0:	9b01      	ldr	r3, [sp, #4]
    2ce2:	429e      	cmp	r6, r3
    2ce4:	d00f      	beq.n	2d06 <extract_conversion+0xf2>
		conv->width_present = true;
    2ce6:	7823      	ldrb	r3, [r4, #0]
    2ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2cec:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    2cee:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2cf6:	2800      	cmp	r0, #0
    2cf8:	db54      	blt.n	2da4 <extract_conversion+0x190>
    2cfa:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2cfc:	4313      	orrs	r3, r2
    2cfe:	7822      	ldrb	r2, [r4, #0]
    2d00:	f363 0241 	bfi	r2, r3, #1, #1
    2d04:	7022      	strb	r2, [r4, #0]
	return sp;
    2d06:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    2d08:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    2d0a:	781b      	ldrb	r3, [r3, #0]
    2d0c:	2b2e      	cmp	r3, #46	; 0x2e
    2d0e:	bf14      	ite	ne
    2d10:	2300      	movne	r3, #0
    2d12:	2301      	moveq	r3, #1
    2d14:	7862      	ldrb	r2, [r4, #1]
    2d16:	f363 0241 	bfi	r2, r3, #1, #1
    2d1a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d043      	beq.n	2da8 <extract_conversion+0x194>
	++sp;
    2d20:	9b01      	ldr	r3, [sp, #4]
    2d22:	1c5a      	adds	r2, r3, #1
    2d24:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    2d26:	785b      	ldrb	r3, [r3, #1]
    2d28:	2b2a      	cmp	r3, #42	; 0x2a
    2d2a:	d03f      	beq.n	2dac <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    2d2c:	a801      	add	r0, sp, #4
    2d2e:	f009 fa08 	bl	c142 <extract_decimal>
	conv->prec_value = prec;
    2d32:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    2d34:	7823      	ldrb	r3, [r4, #0]
    2d36:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2d3a:	2800      	cmp	r0, #0
    2d3c:	db3e      	blt.n	2dbc <extract_conversion+0x1a8>
    2d3e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2d40:	4313      	orrs	r3, r2
    2d42:	7822      	ldrb	r2, [r4, #0]
    2d44:	f363 0241 	bfi	r2, r3, #1, #1
    2d48:	7022      	strb	r2, [r4, #0]
	return sp;
    2d4a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    2d4c:	7803      	ldrb	r3, [r0, #0]
    2d4e:	3b4c      	subs	r3, #76	; 0x4c
    2d50:	2b2e      	cmp	r3, #46	; 0x2e
    2d52:	f200 809d 	bhi.w	2e90 <extract_conversion+0x27c>
    2d56:	e8df f003 	tbb	[pc, r3]
    2d5a:	9b90      	.short	0x9b90
    2d5c:	9b9b9b9b 	.word	0x9b9b9b9b
    2d60:	9b9b9b9b 	.word	0x9b9b9b9b
    2d64:	9b9b9b9b 	.word	0x9b9b9b9b
    2d68:	9b9b9b9b 	.word	0x9b9b9b9b
    2d6c:	9b9b9b9b 	.word	0x9b9b9b9b
    2d70:	9b9b9b9b 	.word	0x9b9b9b9b
    2d74:	9b339b9b 	.word	0x9b339b9b
    2d78:	9b459b57 	.word	0x9b459b57
    2d7c:	9b9b9b9b 	.word	0x9b9b9b9b
    2d80:	9b899b9b 	.word	0x9b899b9b
    2d84:	9b9b9b9b 	.word	0x9b9b9b9b
    2d88:	82          	.byte	0x82
    2d89:	00          	.byte	0x00
		conv->flag_zero = false;
    2d8a:	7823      	ldrb	r3, [r4, #0]
    2d8c:	f36f 1386 	bfc	r3, #6, #1
    2d90:	7023      	strb	r3, [r4, #0]
    2d92:	e79a      	b.n	2cca <extract_conversion+0xb6>
		conv->width_star = true;
    2d94:	7863      	ldrb	r3, [r4, #1]
    2d96:	f043 0301 	orr.w	r3, r3, #1
    2d9a:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2d9c:	4633      	mov	r3, r6
    2d9e:	3301      	adds	r3, #1
    2da0:	9301      	str	r3, [sp, #4]
    2da2:	e7b1      	b.n	2d08 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    2da4:	2201      	movs	r2, #1
    2da6:	e7a9      	b.n	2cfc <extract_conversion+0xe8>
		return sp;
    2da8:	9801      	ldr	r0, [sp, #4]
    2daa:	e7cf      	b.n	2d4c <extract_conversion+0x138>
		conv->prec_star = true;
    2dac:	7863      	ldrb	r3, [r4, #1]
    2dae:	f043 0304 	orr.w	r3, r3, #4
    2db2:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2db4:	4610      	mov	r0, r2
    2db6:	3001      	adds	r0, #1
    2db8:	9001      	str	r0, [sp, #4]
    2dba:	e7c7      	b.n	2d4c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    2dbc:	2201      	movs	r2, #1
    2dbe:	e7bf      	b.n	2d40 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    2dc0:	1c42      	adds	r2, r0, #1
    2dc2:	7843      	ldrb	r3, [r0, #1]
    2dc4:	2b68      	cmp	r3, #104	; 0x68
    2dc6:	d006      	beq.n	2dd6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    2dc8:	7863      	ldrb	r3, [r4, #1]
    2dca:	2102      	movs	r1, #2
    2dcc:	f361 03c6 	bfi	r3, r1, #3, #4
    2dd0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    2dd2:	4610      	mov	r0, r2
    2dd4:	e01e      	b.n	2e14 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    2dd6:	7863      	ldrb	r3, [r4, #1]
    2dd8:	2201      	movs	r2, #1
    2dda:	f362 03c6 	bfi	r3, r2, #3, #4
    2dde:	7063      	strb	r3, [r4, #1]
			++sp;
    2de0:	3002      	adds	r0, #2
    2de2:	e017      	b.n	2e14 <extract_conversion+0x200>
		if (*++sp == 'l') {
    2de4:	1c42      	adds	r2, r0, #1
    2de6:	7843      	ldrb	r3, [r0, #1]
    2de8:	2b6c      	cmp	r3, #108	; 0x6c
    2dea:	d006      	beq.n	2dfa <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    2dec:	7863      	ldrb	r3, [r4, #1]
    2dee:	2103      	movs	r1, #3
    2df0:	f361 03c6 	bfi	r3, r1, #3, #4
    2df4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    2df6:	4610      	mov	r0, r2
    2df8:	e00c      	b.n	2e14 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    2dfa:	7863      	ldrb	r3, [r4, #1]
    2dfc:	2204      	movs	r2, #4
    2dfe:	f362 03c6 	bfi	r3, r2, #3, #4
    2e02:	7063      	strb	r3, [r4, #1]
			++sp;
    2e04:	3002      	adds	r0, #2
    2e06:	e005      	b.n	2e14 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    2e08:	7863      	ldrb	r3, [r4, #1]
    2e0a:	2205      	movs	r2, #5
    2e0c:	f362 03c6 	bfi	r3, r2, #3, #4
    2e10:	7063      	strb	r3, [r4, #1]
		++sp;
    2e12:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    2e14:	f810 3b01 	ldrb.w	r3, [r0], #1
    2e18:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    2e1a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2e1e:	2a37      	cmp	r2, #55	; 0x37
    2e20:	d87d      	bhi.n	2f1e <extract_conversion+0x30a>
    2e22:	e8df f002 	tbb	[pc, r2]
    2e26:	7c5e      	.short	0x7c5e
    2e28:	5e5e7c7c 	.word	0x5e5e7c7c
    2e2c:	7c7c7c5e 	.word	0x7c7c7c5e
    2e30:	7c7c7c7c 	.word	0x7c7c7c7c
    2e34:	7c7c7c7c 	.word	0x7c7c7c7c
    2e38:	7c7c7c7c 	.word	0x7c7c7c7c
    2e3c:	7c7c4f7c 	.word	0x7c7c4f7c
    2e40:	7c7c7c7c 	.word	0x7c7c7c7c
    2e44:	7c5e7c7c 	.word	0x7c5e7c7c
    2e48:	5e5e3a4f 	.word	0x5e5e3a4f
    2e4c:	7c3a7c5e 	.word	0x7c3a7c5e
    2e50:	657c7c7c 	.word	0x657c7c7c
    2e54:	7c7c714f 	.word	0x7c7c714f
    2e58:	7c4f7c71 	.word	0x7c4f7c71
    2e5c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    2e5e:	7863      	ldrb	r3, [r4, #1]
    2e60:	2206      	movs	r2, #6
    2e62:	f362 03c6 	bfi	r3, r2, #3, #4
    2e66:	7063      	strb	r3, [r4, #1]
		++sp;
    2e68:	3001      	adds	r0, #1
		break;
    2e6a:	e7d3      	b.n	2e14 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    2e6c:	7863      	ldrb	r3, [r4, #1]
    2e6e:	2207      	movs	r2, #7
    2e70:	f362 03c6 	bfi	r3, r2, #3, #4
    2e74:	7063      	strb	r3, [r4, #1]
		++sp;
    2e76:	3001      	adds	r0, #1
		break;
    2e78:	e7cc      	b.n	2e14 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    2e7a:	7863      	ldrb	r3, [r4, #1]
    2e7c:	2208      	movs	r2, #8
    2e7e:	f362 03c6 	bfi	r3, r2, #3, #4
    2e82:	7063      	strb	r3, [r4, #1]
		++sp;
    2e84:	3001      	adds	r0, #1
		conv->unsupported = true;
    2e86:	7823      	ldrb	r3, [r4, #0]
    2e88:	f043 0302 	orr.w	r3, r3, #2
    2e8c:	7023      	strb	r3, [r4, #0]
		break;
    2e8e:	e7c1      	b.n	2e14 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    2e90:	7863      	ldrb	r3, [r4, #1]
    2e92:	f36f 03c6 	bfc	r3, #3, #4
    2e96:	7063      	strb	r3, [r4, #1]
		break;
    2e98:	e7bc      	b.n	2e14 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    2e9a:	78a2      	ldrb	r2, [r4, #2]
    2e9c:	2101      	movs	r1, #1
    2e9e:	f361 0202 	bfi	r2, r1, #0, #3
    2ea2:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2ea4:	7862      	ldrb	r2, [r4, #1]
    2ea6:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2eaa:	2a40      	cmp	r2, #64	; 0x40
    2eac:	d010      	beq.n	2ed0 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    2eae:	2b63      	cmp	r3, #99	; 0x63
    2eb0:	d013      	beq.n	2eda <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    2eb2:	7823      	ldrb	r3, [r4, #0]
    2eb4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2eb8:	4315      	orrs	r5, r2
    2eba:	f365 0341 	bfi	r3, r5, #1, #1
    2ebe:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    2ec0:	b002      	add	sp, #8
    2ec2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    2ec4:	78a2      	ldrb	r2, [r4, #2]
    2ec6:	2102      	movs	r1, #2
    2ec8:	f361 0202 	bfi	r2, r1, #0, #3
    2ecc:	70a2      	strb	r2, [r4, #2]
    2ece:	e7e9      	b.n	2ea4 <extract_conversion+0x290>
			conv->invalid = true;
    2ed0:	7821      	ldrb	r1, [r4, #0]
    2ed2:	f041 0101 	orr.w	r1, r1, #1
    2ed6:	7021      	strb	r1, [r4, #0]
    2ed8:	e7e9      	b.n	2eae <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2eda:	1e15      	subs	r5, r2, #0
    2edc:	bf18      	it	ne
    2ede:	2501      	movne	r5, #1
    2ee0:	e7e7      	b.n	2eb2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    2ee2:	78a3      	ldrb	r3, [r4, #2]
    2ee4:	2204      	movs	r2, #4
    2ee6:	f362 0302 	bfi	r3, r2, #0, #3
    2eea:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    2eec:	2501      	movs	r5, #1
			break;
    2eee:	e7e0      	b.n	2eb2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2ef0:	78a3      	ldrb	r3, [r4, #2]
    2ef2:	2203      	movs	r2, #3
    2ef4:	f362 0302 	bfi	r3, r2, #0, #3
    2ef8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2efa:	7863      	ldrb	r3, [r4, #1]
    2efc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2f00:	2b40      	cmp	r3, #64	; 0x40
    2f02:	d1d6      	bne.n	2eb2 <extract_conversion+0x29e>
			unsupported = true;
    2f04:	2501      	movs	r5, #1
    2f06:	e7d4      	b.n	2eb2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2f08:	78a3      	ldrb	r3, [r4, #2]
    2f0a:	2203      	movs	r2, #3
    2f0c:	f362 0302 	bfi	r3, r2, #0, #3
    2f10:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    2f12:	7863      	ldrb	r3, [r4, #1]
    2f14:	f013 0f78 	tst.w	r3, #120	; 0x78
    2f18:	d0cb      	beq.n	2eb2 <extract_conversion+0x29e>
			unsupported = true;
    2f1a:	2501      	movs	r5, #1
    2f1c:	e7c9      	b.n	2eb2 <extract_conversion+0x29e>
		conv->invalid = true;
    2f1e:	7823      	ldrb	r3, [r4, #0]
    2f20:	f043 0301 	orr.w	r3, r3, #1
    2f24:	7023      	strb	r3, [r4, #0]
		break;
    2f26:	e7c4      	b.n	2eb2 <extract_conversion+0x29e>

00002f28 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f2c:	b091      	sub	sp, #68	; 0x44
    2f2e:	4606      	mov	r6, r0
    2f30:	460d      	mov	r5, r1
    2f32:	4691      	mov	r9, r2
    2f34:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2f36:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2f38:	f899 0000 	ldrb.w	r0, [r9]
    2f3c:	2800      	cmp	r0, #0
    2f3e:	f000 82d5 	beq.w	34ec <cbvprintf+0x5c4>
		if (*fp != '%') {
    2f42:	2825      	cmp	r0, #37	; 0x25
    2f44:	d008      	beq.n	2f58 <cbvprintf+0x30>
			OUTC(*fp++);
    2f46:	f109 0901 	add.w	r9, r9, #1
    2f4a:	4629      	mov	r1, r5
    2f4c:	47b0      	blx	r6
    2f4e:	2800      	cmp	r0, #0
    2f50:	f2c0 82cd 	blt.w	34ee <cbvprintf+0x5c6>
    2f54:	3401      	adds	r4, #1
			continue;
    2f56:	e7ef      	b.n	2f38 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2f58:	2300      	movs	r3, #0
    2f5a:	9304      	str	r3, [sp, #16]
    2f5c:	9305      	str	r3, [sp, #20]
    2f5e:	9306      	str	r3, [sp, #24]
    2f60:	9307      	str	r3, [sp, #28]
    2f62:	9308      	str	r3, [sp, #32]
    2f64:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    2f66:	4649      	mov	r1, r9
    2f68:	a806      	add	r0, sp, #24
    2f6a:	f7ff fe53 	bl	2c14 <extract_conversion>
    2f6e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2f70:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2f74:	f013 0f01 	tst.w	r3, #1
    2f78:	f000 8097 	beq.w	30aa <cbvprintf+0x182>
			width = va_arg(ap, int);
    2f7c:	9b03      	ldr	r3, [sp, #12]
    2f7e:	1d1a      	adds	r2, r3, #4
    2f80:	9203      	str	r2, [sp, #12]
    2f82:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2f84:	2f00      	cmp	r7, #0
    2f86:	f2c0 8088 	blt.w	309a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2f8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2f8e:	f013 0f04 	tst.w	r3, #4
    2f92:	f000 809c 	beq.w	30ce <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    2f96:	9b03      	ldr	r3, [sp, #12]
    2f98:	1d1a      	adds	r2, r3, #4
    2f9a:	9203      	str	r2, [sp, #12]
    2f9c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    2fa0:	f1ba 0f00 	cmp.w	sl, #0
    2fa4:	f2c0 808a 	blt.w	30bc <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2fa8:	2300      	movs	r3, #0
    2faa:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    2fac:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2fae:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2fb2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2fb6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    2fba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2fbe:	2b01      	cmp	r3, #1
    2fc0:	f000 808e 	beq.w	30e0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2fc4:	2b02      	cmp	r3, #2
    2fc6:	f000 80d3 	beq.w	3170 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2fca:	2b04      	cmp	r3, #4
    2fcc:	f000 8124 	beq.w	3218 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2fd0:	2b03      	cmp	r3, #3
    2fd2:	f000 813b 	beq.w	324c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2fd6:	f89d 8018 	ldrb.w	r8, [sp, #24]
    2fda:	f018 0b03 	ands.w	fp, r8, #3
    2fde:	f040 813b 	bne.w	3258 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2fe2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2fe6:	3b25      	subs	r3, #37	; 0x25
    2fe8:	2b53      	cmp	r3, #83	; 0x53
    2fea:	f200 81e6 	bhi.w	33ba <cbvprintf+0x492>
    2fee:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ff2:	0140      	.short	0x0140
    2ff4:	01e401e4 	.word	0x01e401e4
    2ff8:	01e401e4 	.word	0x01e401e4
    2ffc:	01e401e4 	.word	0x01e401e4
    3000:	01e401e4 	.word	0x01e401e4
    3004:	01e401e4 	.word	0x01e401e4
    3008:	01e401e4 	.word	0x01e401e4
    300c:	01e401e4 	.word	0x01e401e4
    3010:	01e401e4 	.word	0x01e401e4
    3014:	01e401e4 	.word	0x01e401e4
    3018:	01e401e4 	.word	0x01e401e4
    301c:	01e401e4 	.word	0x01e401e4
    3020:	01e401e4 	.word	0x01e401e4
    3024:	01e401e4 	.word	0x01e401e4
    3028:	01e401e4 	.word	0x01e401e4
    302c:	01e401e4 	.word	0x01e401e4
    3030:	01e401e4 	.word	0x01e401e4
    3034:	01e401e4 	.word	0x01e401e4
    3038:	01e401e4 	.word	0x01e401e4
    303c:	01e401e4 	.word	0x01e401e4
    3040:	01e401e4 	.word	0x01e401e4
    3044:	01e401e4 	.word	0x01e401e4
    3048:	01e401e4 	.word	0x01e401e4
    304c:	01e401e4 	.word	0x01e401e4
    3050:	01e401e4 	.word	0x01e401e4
    3054:	01e401e4 	.word	0x01e401e4
    3058:	01e40181 	.word	0x01e40181
    305c:	01e401e4 	.word	0x01e401e4
    3060:	01e401e4 	.word	0x01e401e4
    3064:	01e401e4 	.word	0x01e401e4
    3068:	01e401e4 	.word	0x01e401e4
    306c:	015e01e4 	.word	0x015e01e4
    3070:	01e40167 	.word	0x01e40167
    3074:	01e401e4 	.word	0x01e401e4
    3078:	016701e4 	.word	0x016701e4
    307c:	01e401e4 	.word	0x01e401e4
    3080:	01e401e4 	.word	0x01e401e4
    3084:	018101be 	.word	0x018101be
    3088:	01e401a2 	.word	0x01e401a2
    308c:	014d01e4 	.word	0x014d01e4
    3090:	018101e4 	.word	0x018101e4
    3094:	01e401e4 	.word	0x01e401e4
    3098:	0181      	.short	0x0181
				conv->flag_dash = true;
    309a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    309e:	f043 0304 	orr.w	r3, r3, #4
    30a2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    30a6:	427f      	negs	r7, r7
    30a8:	e76f      	b.n	2f8a <cbvprintf+0x62>
		} else if (conv->width_present) {
    30aa:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    30ae:	2b00      	cmp	r3, #0
    30b0:	db02      	blt.n	30b8 <cbvprintf+0x190>
		int width = -1;
    30b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    30b6:	e768      	b.n	2f8a <cbvprintf+0x62>
			width = conv->width_value;
    30b8:	9f07      	ldr	r7, [sp, #28]
    30ba:	e766      	b.n	2f8a <cbvprintf+0x62>
				conv->prec_present = false;
    30bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    30c0:	f36f 0341 	bfc	r3, #1, #1
    30c4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    30c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    30cc:	e76c      	b.n	2fa8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    30ce:	f013 0f02 	tst.w	r3, #2
    30d2:	d002      	beq.n	30da <cbvprintf+0x1b2>
			precision = conv->prec_value;
    30d4:	f8dd a020 	ldr.w	sl, [sp, #32]
    30d8:	e766      	b.n	2fa8 <cbvprintf+0x80>
		int precision = -1;
    30da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    30de:	e763      	b.n	2fa8 <cbvprintf+0x80>
			switch (length_mod) {
    30e0:	1ecb      	subs	r3, r1, #3
    30e2:	2b04      	cmp	r3, #4
    30e4:	d804      	bhi.n	30f0 <cbvprintf+0x1c8>
    30e6:	e8df f003 	tbb	[pc, r3]
    30ea:	1d0b      	.short	0x1d0b
    30ec:	3529      	.short	0x3529
    30ee:	35          	.byte	0x35
    30ef:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    30f0:	9b03      	ldr	r3, [sp, #12]
    30f2:	1d1a      	adds	r2, r3, #4
    30f4:	9203      	str	r2, [sp, #12]
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	17da      	asrs	r2, r3, #31
    30fa:	9304      	str	r3, [sp, #16]
    30fc:	9205      	str	r2, [sp, #20]
				break;
    30fe:	e006      	b.n	310e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    3100:	9b03      	ldr	r3, [sp, #12]
    3102:	1d1a      	adds	r2, r3, #4
    3104:	9203      	str	r2, [sp, #12]
    3106:	681b      	ldr	r3, [r3, #0]
    3108:	17da      	asrs	r2, r3, #31
    310a:	9304      	str	r3, [sp, #16]
    310c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    310e:	2901      	cmp	r1, #1
    3110:	d028      	beq.n	3164 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    3112:	2902      	cmp	r1, #2
    3114:	f47f af5f 	bne.w	2fd6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    3118:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    311c:	17da      	asrs	r2, r3, #31
    311e:	9304      	str	r3, [sp, #16]
    3120:	9205      	str	r2, [sp, #20]
    3122:	e758      	b.n	2fd6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    3124:	9b03      	ldr	r3, [sp, #12]
    3126:	3307      	adds	r3, #7
    3128:	f023 0307 	bic.w	r3, r3, #7
    312c:	f103 0208 	add.w	r2, r3, #8
    3130:	9203      	str	r2, [sp, #12]
    3132:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3136:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    313a:	e7e8      	b.n	310e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    313c:	9b03      	ldr	r3, [sp, #12]
    313e:	3307      	adds	r3, #7
    3140:	f023 0307 	bic.w	r3, r3, #7
    3144:	f103 0208 	add.w	r2, r3, #8
    3148:	9203      	str	r2, [sp, #12]
    314a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    314e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    3152:	e7dc      	b.n	310e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3154:	9b03      	ldr	r3, [sp, #12]
    3156:	1d1a      	adds	r2, r3, #4
    3158:	9203      	str	r2, [sp, #12]
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	17da      	asrs	r2, r3, #31
				value->sint =
    315e:	9304      	str	r3, [sp, #16]
    3160:	9205      	str	r2, [sp, #20]
				break;
    3162:	e7d4      	b.n	310e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    3164:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3168:	9304      	str	r3, [sp, #16]
    316a:	2300      	movs	r3, #0
    316c:	9305      	str	r3, [sp, #20]
    316e:	e732      	b.n	2fd6 <cbvprintf+0xae>
			switch (length_mod) {
    3170:	1ecb      	subs	r3, r1, #3
    3172:	2b04      	cmp	r3, #4
    3174:	d804      	bhi.n	3180 <cbvprintf+0x258>
    3176:	e8df f003 	tbb	[pc, r3]
    317a:	1f0b      	.short	0x1f0b
    317c:	4135      	.short	0x4135
    317e:	41          	.byte	0x41
    317f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3180:	9b03      	ldr	r3, [sp, #12]
    3182:	1d1a      	adds	r2, r3, #4
    3184:	9203      	str	r2, [sp, #12]
    3186:	681b      	ldr	r3, [r3, #0]
    3188:	9304      	str	r3, [sp, #16]
    318a:	2300      	movs	r3, #0
    318c:	9305      	str	r3, [sp, #20]
				break;
    318e:	e01e      	b.n	31ce <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    3190:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    3194:	2b63      	cmp	r3, #99	; 0x63
    3196:	d007      	beq.n	31a8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    3198:	9b03      	ldr	r3, [sp, #12]
    319a:	1d1a      	adds	r2, r3, #4
    319c:	9203      	str	r2, [sp, #12]
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	9304      	str	r3, [sp, #16]
    31a2:	2300      	movs	r3, #0
    31a4:	9305      	str	r3, [sp, #20]
    31a6:	e012      	b.n	31ce <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    31a8:	9b03      	ldr	r3, [sp, #12]
    31aa:	1d1a      	adds	r2, r3, #4
    31ac:	9203      	str	r2, [sp, #12]
    31ae:	681b      	ldr	r3, [r3, #0]
    31b0:	9304      	str	r3, [sp, #16]
    31b2:	2300      	movs	r3, #0
    31b4:	9305      	str	r3, [sp, #20]
    31b6:	e00a      	b.n	31ce <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    31b8:	9b03      	ldr	r3, [sp, #12]
    31ba:	3307      	adds	r3, #7
    31bc:	f023 0307 	bic.w	r3, r3, #7
    31c0:	f103 0208 	add.w	r2, r3, #8
    31c4:	9203      	str	r2, [sp, #12]
    31c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    31ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    31ce:	2901      	cmp	r1, #1
    31d0:	d01c      	beq.n	320c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    31d2:	2902      	cmp	r1, #2
    31d4:	f47f aeff 	bne.w	2fd6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    31d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    31dc:	9304      	str	r3, [sp, #16]
    31de:	2300      	movs	r3, #0
    31e0:	9305      	str	r3, [sp, #20]
    31e2:	e6f8      	b.n	2fd6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    31e4:	9b03      	ldr	r3, [sp, #12]
    31e6:	3307      	adds	r3, #7
    31e8:	f023 0307 	bic.w	r3, r3, #7
    31ec:	f103 0208 	add.w	r2, r3, #8
    31f0:	9203      	str	r2, [sp, #12]
    31f2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    31f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    31fa:	e7e8      	b.n	31ce <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    31fc:	9b03      	ldr	r3, [sp, #12]
    31fe:	1d1a      	adds	r2, r3, #4
    3200:	9203      	str	r2, [sp, #12]
    3202:	681b      	ldr	r3, [r3, #0]
				value->uint =
    3204:	9304      	str	r3, [sp, #16]
    3206:	2300      	movs	r3, #0
    3208:	9305      	str	r3, [sp, #20]
				break;
    320a:	e7e0      	b.n	31ce <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    320c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3210:	9304      	str	r3, [sp, #16]
    3212:	2300      	movs	r3, #0
    3214:	9305      	str	r3, [sp, #20]
    3216:	e6de      	b.n	2fd6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    3218:	2908      	cmp	r1, #8
    321a:	d00b      	beq.n	3234 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    321c:	9b03      	ldr	r3, [sp, #12]
    321e:	3307      	adds	r3, #7
    3220:	f023 0307 	bic.w	r3, r3, #7
    3224:	f103 0208 	add.w	r2, r3, #8
    3228:	9203      	str	r2, [sp, #12]
    322a:	e9d3 2300 	ldrd	r2, r3, [r3]
    322e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3232:	e6d0      	b.n	2fd6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    3234:	9b03      	ldr	r3, [sp, #12]
    3236:	3307      	adds	r3, #7
    3238:	f023 0307 	bic.w	r3, r3, #7
    323c:	f103 0208 	add.w	r2, r3, #8
    3240:	9203      	str	r2, [sp, #12]
    3242:	e9d3 2300 	ldrd	r2, r3, [r3]
    3246:	e9cd 2304 	strd	r2, r3, [sp, #16]
    324a:	e6c4      	b.n	2fd6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    324c:	9b03      	ldr	r3, [sp, #12]
    324e:	1d1a      	adds	r2, r3, #4
    3250:	9203      	str	r2, [sp, #12]
    3252:	681b      	ldr	r3, [r3, #0]
    3254:	9304      	str	r3, [sp, #16]
    3256:	e6be      	b.n	2fd6 <cbvprintf+0xae>
			OUTS(sp, fp);
    3258:	9f02      	ldr	r7, [sp, #8]
    325a:	463b      	mov	r3, r7
    325c:	464a      	mov	r2, r9
    325e:	4629      	mov	r1, r5
    3260:	4630      	mov	r0, r6
    3262:	f008 ffea 	bl	c23a <outs>
    3266:	2800      	cmp	r0, #0
    3268:	f2c0 8141 	blt.w	34ee <cbvprintf+0x5c6>
    326c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    326e:	46b9      	mov	r9, r7
			continue;
    3270:	e662      	b.n	2f38 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3272:	4629      	mov	r1, r5
    3274:	2025      	movs	r0, #37	; 0x25
    3276:	47b0      	blx	r6
    3278:	2800      	cmp	r0, #0
    327a:	f2c0 8138 	blt.w	34ee <cbvprintf+0x5c6>
    327e:	3401      	adds	r4, #1
		char sign = 0;
    3280:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    3282:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    3286:	f04f 0900 	mov.w	r9, #0
			break;
    328a:	e09b      	b.n	33c4 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    328c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    3290:	f1ba 0f00 	cmp.w	sl, #0
    3294:	db07      	blt.n	32a6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    3296:	4651      	mov	r1, sl
    3298:	4648      	mov	r0, r9
    329a:	f009 f972 	bl	c582 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    329e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    32a2:	46d8      	mov	r8, fp
			precision = -1;

			break;
    32a4:	e08e      	b.n	33c4 <cbvprintf+0x49c>
				len = strlen(bps);
    32a6:	4648      	mov	r0, r9
    32a8:	f009 f962 	bl	c570 <strlen>
    32ac:	e7f7      	b.n	329e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    32ae:	9b04      	ldr	r3, [sp, #16]
    32b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    32b4:	46d8      	mov	r8, fp
			bpe = buf + 1;
    32b6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    32ba:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    32be:	e081      	b.n	33c4 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    32c0:	f018 0f08 	tst.w	r8, #8
    32c4:	d105      	bne.n	32d2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    32c6:	f018 0810 	ands.w	r8, r8, #16
    32ca:	d004      	beq.n	32d6 <cbvprintf+0x3ae>
				sign = ' ';
    32cc:	f04f 0820 	mov.w	r8, #32
    32d0:	e001      	b.n	32d6 <cbvprintf+0x3ae>
				sign = '+';
    32d2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    32d6:	9a04      	ldr	r2, [sp, #16]
    32d8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    32da:	2b00      	cmp	r3, #0
    32dc:	db02      	blt.n	32e4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    32de:	9204      	str	r2, [sp, #16]
    32e0:	9305      	str	r3, [sp, #20]
    32e2:	e008      	b.n	32f6 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    32e4:	4252      	negs	r2, r2
    32e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    32ea:	9204      	str	r2, [sp, #16]
    32ec:	9305      	str	r3, [sp, #20]
				sign = '-';
    32ee:	f04f 082d 	mov.w	r8, #45	; 0x2d
    32f2:	e000      	b.n	32f6 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    32f4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    32f6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    32fa:	9300      	str	r3, [sp, #0]
    32fc:	ab0a      	add	r3, sp, #40	; 0x28
    32fe:	aa06      	add	r2, sp, #24
    3300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3304:	f008 ff2f 	bl	c166 <encode_uint>
    3308:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    330a:	f1ba 0f00 	cmp.w	sl, #0
    330e:	f2c0 8088 	blt.w	3422 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    3312:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3316:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    331a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    331e:	f36f 1286 	bfc	r2, #6, #1
    3322:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3326:	459a      	cmp	sl, r3
    3328:	d97e      	bls.n	3428 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    332a:	ebaa 0303 	sub.w	r3, sl, r3
    332e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    3330:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3334:	e046      	b.n	33c4 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3336:	9804      	ldr	r0, [sp, #16]
    3338:	b928      	cbnz	r0, 3346 <cbvprintf+0x41e>
		char sign = 0;
    333a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    333c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 34f4 <cbvprintf+0x5cc>
			bps = "(nil)";
    3340:	f1aa 0905 	sub.w	r9, sl, #5
    3344:	e03e      	b.n	33c4 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3346:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    334a:	9300      	str	r3, [sp, #0]
    334c:	ab0a      	add	r3, sp, #40	; 0x28
    334e:	aa06      	add	r2, sp, #24
    3350:	2100      	movs	r1, #0
    3352:	f008 ff08 	bl	c166 <encode_uint>
    3356:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3358:	f89d 301a 	ldrb.w	r3, [sp, #26]
    335c:	f043 0310 	orr.w	r3, r3, #16
    3360:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    3364:	2378      	movs	r3, #120	; 0x78
    3366:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    336a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    336c:	e7cd      	b.n	330a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    336e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    3370:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3374:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3378:	2b07      	cmp	r3, #7
    337a:	d806      	bhi.n	338a <cbvprintf+0x462>
    337c:	e8df f003 	tbb	[pc, r3]
    3380:	0f0d0b04 	.word	0x0f0d0b04
    3384:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    3388:	6014      	str	r4, [r2, #0]
		char sign = 0;
    338a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    338c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    3390:	f04f 0900 	mov.w	r9, #0
}
    3394:	e016      	b.n	33c4 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    3396:	7014      	strb	r4, [r2, #0]
		break;
    3398:	e7f7      	b.n	338a <cbvprintf+0x462>
		*(short *)dp = (short)count;
    339a:	8014      	strh	r4, [r2, #0]
		break;
    339c:	e7f5      	b.n	338a <cbvprintf+0x462>
		*(long *)dp = (long)count;
    339e:	6014      	str	r4, [r2, #0]
		break;
    33a0:	e7f3      	b.n	338a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    33a2:	17e3      	asrs	r3, r4, #31
    33a4:	6014      	str	r4, [r2, #0]
    33a6:	6053      	str	r3, [r2, #4]
		break;
    33a8:	e7ef      	b.n	338a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    33aa:	17e3      	asrs	r3, r4, #31
    33ac:	6014      	str	r4, [r2, #0]
    33ae:	6053      	str	r3, [r2, #4]
		break;
    33b0:	e7eb      	b.n	338a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    33b2:	6014      	str	r4, [r2, #0]
		break;
    33b4:	e7e9      	b.n	338a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    33b6:	6014      	str	r4, [r2, #0]
		break;
    33b8:	e7e7      	b.n	338a <cbvprintf+0x462>
		switch (conv->specifier) {
    33ba:	46d8      	mov	r8, fp
    33bc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    33c0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    33c4:	f1b9 0f00 	cmp.w	r9, #0
    33c8:	f000 808d 	beq.w	34e6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    33cc:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    33d0:	f1b8 0f00 	cmp.w	r8, #0
    33d4:	d000      	beq.n	33d8 <cbvprintf+0x4b0>
			nj_len += 1U;
    33d6:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    33d8:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33dc:	f012 0f10 	tst.w	r2, #16
    33e0:	d025      	beq.n	342e <cbvprintf+0x506>
			nj_len += 2U;
    33e2:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    33e4:	9907      	ldr	r1, [sp, #28]
    33e6:	440b      	add	r3, r1
		if (conv->pad_fp) {
    33e8:	f012 0f40 	tst.w	r2, #64	; 0x40
    33ec:	d001      	beq.n	33f2 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    33ee:	9a08      	ldr	r2, [sp, #32]
    33f0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    33f2:	2f00      	cmp	r7, #0
    33f4:	dd31      	ble.n	345a <cbvprintf+0x532>
			width -= (int)nj_len;
    33f6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    33f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    33fc:	f013 0f04 	tst.w	r3, #4
    3400:	d12b      	bne.n	345a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3402:	f013 0f40 	tst.w	r3, #64	; 0x40
    3406:	d017      	beq.n	3438 <cbvprintf+0x510>
					if (sign != 0) {
    3408:	f1b8 0f00 	cmp.w	r8, #0
    340c:	d017      	beq.n	343e <cbvprintf+0x516>
						OUTC(sign);
    340e:	4629      	mov	r1, r5
    3410:	4640      	mov	r0, r8
    3412:	47b0      	blx	r6
    3414:	2800      	cmp	r0, #0
    3416:	db6a      	blt.n	34ee <cbvprintf+0x5c6>
    3418:	3401      	adds	r4, #1
						sign = 0;
    341a:	46d8      	mov	r8, fp
					}
					pad = '0';
    341c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    3420:	e00f      	b.n	3442 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    3422:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    3426:	e7cd      	b.n	33c4 <cbvprintf+0x49c>
    3428:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    342c:	e7ca      	b.n	33c4 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    342e:	f012 0f08 	tst.w	r2, #8
    3432:	d0d7      	beq.n	33e4 <cbvprintf+0x4bc>
			nj_len += 1U;
    3434:	3301      	adds	r3, #1
    3436:	e7d5      	b.n	33e4 <cbvprintf+0x4bc>
				char pad = ' ';
    3438:	f04f 0b20 	mov.w	fp, #32
    343c:	e001      	b.n	3442 <cbvprintf+0x51a>
					pad = '0';
    343e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    3442:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3444:	1e5f      	subs	r7, r3, #1
    3446:	2b00      	cmp	r3, #0
    3448:	dd07      	ble.n	345a <cbvprintf+0x532>
					OUTC(pad);
    344a:	4629      	mov	r1, r5
    344c:	4658      	mov	r0, fp
    344e:	47b0      	blx	r6
    3450:	2800      	cmp	r0, #0
    3452:	db4c      	blt.n	34ee <cbvprintf+0x5c6>
    3454:	3401      	adds	r4, #1
				while (width-- > 0) {
    3456:	463b      	mov	r3, r7
    3458:	e7f4      	b.n	3444 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    345a:	f1b8 0f00 	cmp.w	r8, #0
    345e:	d005      	beq.n	346c <cbvprintf+0x544>
			OUTC(sign);
    3460:	4629      	mov	r1, r5
    3462:	4640      	mov	r0, r8
    3464:	47b0      	blx	r6
    3466:	2800      	cmp	r0, #0
    3468:	db41      	blt.n	34ee <cbvprintf+0x5c6>
    346a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    346c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3470:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3474:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3478:	4313      	orrs	r3, r2
    347a:	d005      	beq.n	3488 <cbvprintf+0x560>
				OUTC('0');
    347c:	4629      	mov	r1, r5
    347e:	2030      	movs	r0, #48	; 0x30
    3480:	47b0      	blx	r6
    3482:	2800      	cmp	r0, #0
    3484:	db33      	blt.n	34ee <cbvprintf+0x5c6>
    3486:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3488:	f89d 301a 	ldrb.w	r3, [sp, #26]
    348c:	f013 0f10 	tst.w	r3, #16
    3490:	d006      	beq.n	34a0 <cbvprintf+0x578>
				OUTC(conv->specifier);
    3492:	4629      	mov	r1, r5
    3494:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3498:	47b0      	blx	r6
    349a:	2800      	cmp	r0, #0
    349c:	db27      	blt.n	34ee <cbvprintf+0x5c6>
    349e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    34a0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    34a2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    34a6:	2b00      	cmp	r3, #0
    34a8:	dd07      	ble.n	34ba <cbvprintf+0x592>
				OUTC('0');
    34aa:	4629      	mov	r1, r5
    34ac:	2030      	movs	r0, #48	; 0x30
    34ae:	47b0      	blx	r6
    34b0:	2800      	cmp	r0, #0
    34b2:	db1c      	blt.n	34ee <cbvprintf+0x5c6>
    34b4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    34b6:	4643      	mov	r3, r8
    34b8:	e7f3      	b.n	34a2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    34ba:	4653      	mov	r3, sl
    34bc:	464a      	mov	r2, r9
    34be:	4629      	mov	r1, r5
    34c0:	4630      	mov	r0, r6
    34c2:	f008 feba 	bl	c23a <outs>
    34c6:	2800      	cmp	r0, #0
    34c8:	db11      	blt.n	34ee <cbvprintf+0x5c6>
    34ca:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    34cc:	2f00      	cmp	r7, #0
    34ce:	dd07      	ble.n	34e0 <cbvprintf+0x5b8>
			OUTC(' ');
    34d0:	4629      	mov	r1, r5
    34d2:	2020      	movs	r0, #32
    34d4:	47b0      	blx	r6
    34d6:	2800      	cmp	r0, #0
    34d8:	db09      	blt.n	34ee <cbvprintf+0x5c6>
    34da:	3401      	adds	r4, #1
			--width;
    34dc:	3f01      	subs	r7, #1
    34de:	e7f5      	b.n	34cc <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    34e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
    34e4:	e528      	b.n	2f38 <cbvprintf+0x10>
    34e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    34ea:	e525      	b.n	2f38 <cbvprintf+0x10>
		}
	}

	return count;
    34ec:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    34ee:	b011      	add	sp, #68	; 0x44
    34f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34f4:	0000e1ed 	.word	0x0000e1ed

000034f8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    34f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    34fa:	f04f 0220 	mov.w	r2, #32
    34fe:	f3ef 8311 	mrs	r3, BASEPRI
    3502:	f382 8812 	msr	BASEPRI_MAX, r2
    3506:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    350a:	f001 ff27 	bl	535c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    350e:	4803      	ldr	r0, [pc, #12]	; (351c <sys_reboot+0x24>)
    3510:	f008 fd2f 	bl	bf72 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3514:	f000 ffa0 	bl	4458 <arch_cpu_idle>
    3518:	e7fc      	b.n	3514 <sys_reboot+0x1c>
    351a:	bf00      	nop
    351c:	0000e1f0 	.word	0x0000e1f0

00003520 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    3520:	2900      	cmp	r1, #0
    3522:	d150      	bne.n	35c6 <msg_process+0xa6>
{
    3524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3528:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    352a:	2400      	movs	r4, #0
    352c:	e022      	b.n	3574 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    352e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 35c8 <msg_process+0xa8>
    3532:	f44f 7399 	mov.w	r3, #306	; 0x132
    3536:	464a      	mov	r2, r9
    3538:	4924      	ldr	r1, [pc, #144]	; (35cc <msg_process+0xac>)
    353a:	4825      	ldr	r0, [pc, #148]	; (35d0 <msg_process+0xb0>)
    353c:	f008 fe9e 	bl	c27c <assert_print>
    3540:	f44f 7199 	mov.w	r1, #306	; 0x132
    3544:	4648      	mov	r0, r9
    3546:	f008 fe92 	bl	c26e <assert_post_action>
    354a:	e01f      	b.n	358c <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    354c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 35c8 <msg_process+0xa8>
    3550:	2385      	movs	r3, #133	; 0x85
    3552:	464a      	mov	r2, r9
    3554:	491d      	ldr	r1, [pc, #116]	; (35cc <msg_process+0xac>)
    3556:	481e      	ldr	r0, [pc, #120]	; (35d0 <msg_process+0xb0>)
    3558:	f008 fe90 	bl	c27c <assert_print>
    355c:	2185      	movs	r1, #133	; 0x85
    355e:	4648      	mov	r0, r9
    3560:	f008 fe85 	bl	c26e <assert_post_action>
    3564:	e01e      	b.n	35a4 <msg_process+0x84>
	backend->api->process(backend, msg);
    3566:	f858 3005 	ldr.w	r3, [r8, r5]
    356a:	681b      	ldr	r3, [r3, #0]
    356c:	4639      	mov	r1, r7
    356e:	4630      	mov	r0, r6
    3570:	4798      	blx	r3
    3572:	3401      	adds	r4, #1
    3574:	4b17      	ldr	r3, [pc, #92]	; (35d4 <msg_process+0xb4>)
    3576:	4a18      	ldr	r2, [pc, #96]	; (35d8 <msg_process+0xb8>)
    3578:	1a9b      	subs	r3, r3, r2
    357a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    357e:	da20      	bge.n	35c2 <msg_process+0xa2>
	return &__log_backends_start[idx];
    3580:	ea4f 1804 	mov.w	r8, r4, lsl #4
    3584:	4d14      	ldr	r5, [pc, #80]	; (35d8 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    3586:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    358a:	d0d0      	beq.n	352e <msg_process+0xe>
	return backend->cb->active;
    358c:	6873      	ldr	r3, [r6, #4]
    358e:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    3590:	2b00      	cmp	r3, #0
    3592:	d0ee      	beq.n	3572 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    3594:	4639      	mov	r1, r7
    3596:	4630      	mov	r0, r6
    3598:	f008 fe81 	bl	c29e <msg_filter_check>
			if (log_backend_is_active(backend) &&
    359c:	2800      	cmp	r0, #0
    359e:	d0e8      	beq.n	3572 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    35a0:	2e00      	cmp	r6, #0
    35a2:	d0d3      	beq.n	354c <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    35a4:	2f00      	cmp	r7, #0
    35a6:	d1de      	bne.n	3566 <msg_process+0x46>
    35a8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 35c8 <msg_process+0xa8>
    35ac:	2386      	movs	r3, #134	; 0x86
    35ae:	464a      	mov	r2, r9
    35b0:	490a      	ldr	r1, [pc, #40]	; (35dc <msg_process+0xbc>)
    35b2:	4807      	ldr	r0, [pc, #28]	; (35d0 <msg_process+0xb0>)
    35b4:	f008 fe62 	bl	c27c <assert_print>
    35b8:	2186      	movs	r1, #134	; 0x86
    35ba:	4648      	mov	r0, r9
    35bc:	f008 fe57 	bl	c26e <assert_post_action>
    35c0:	e7d1      	b.n	3566 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    35c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35c6:	4770      	bx	lr
    35c8:	0000e21c 	.word	0x0000e21c
    35cc:	0000e254 	.word	0x0000e254
    35d0:	0000d63c 	.word	0x0000d63c
    35d4:	0000d4d4 	.word	0x0000d4d4
    35d8:	0000d4b4 	.word	0x0000d4b4
    35dc:	0000e26c 	.word	0x0000e26c

000035e0 <log_format_func_t_get>:
}
    35e0:	4b01      	ldr	r3, [pc, #4]	; (35e8 <log_format_func_t_get+0x8>)
    35e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    35e6:	4770      	bx	lr
    35e8:	0000e2f0 	.word	0x0000e2f0

000035ec <log_init>:
{
    35ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    35ee:	4b20      	ldr	r3, [pc, #128]	; (3670 <log_init+0x84>)
    35f0:	4a20      	ldr	r2, [pc, #128]	; (3674 <log_init+0x88>)
    35f2:	1a9b      	subs	r3, r3, r2
    35f4:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    35f6:	2b90      	cmp	r3, #144	; 0x90
    35f8:	d80e      	bhi.n	3618 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    35fa:	4b1f      	ldr	r3, [pc, #124]	; (3678 <log_init+0x8c>)
    35fc:	f3bf 8f5b 	dmb	ish
    3600:	e853 2f00 	ldrex	r2, [r3]
    3604:	1c51      	adds	r1, r2, #1
    3606:	e843 1000 	strex	r0, r1, [r3]
    360a:	2800      	cmp	r0, #0
    360c:	d1f8      	bne.n	3600 <log_init+0x14>
    360e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3612:	bb5a      	cbnz	r2, 366c <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    3614:	2400      	movs	r4, #0
    3616:	e017      	b.n	3648 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3618:	4c18      	ldr	r4, [pc, #96]	; (367c <log_init+0x90>)
    361a:	f240 2373 	movw	r3, #627	; 0x273
    361e:	4622      	mov	r2, r4
    3620:	4917      	ldr	r1, [pc, #92]	; (3680 <log_init+0x94>)
    3622:	4818      	ldr	r0, [pc, #96]	; (3684 <log_init+0x98>)
    3624:	f008 fe2a 	bl	c27c <assert_print>
    3628:	f240 2173 	movw	r1, #627	; 0x273
    362c:	4620      	mov	r0, r4
    362e:	f008 fe1e 	bl	c26e <assert_post_action>
    3632:	e7e2      	b.n	35fa <log_init+0xe>
					   backend->cb->ctx,
    3634:	4b0f      	ldr	r3, [pc, #60]	; (3674 <log_init+0x88>)
    3636:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    363a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    363c:	2204      	movs	r2, #4
    363e:	6819      	ldr	r1, [r3, #0]
    3640:	4628      	mov	r0, r5
    3642:	f000 f8d3 	bl	37ec <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3646:	3401      	adds	r4, #1
    3648:	42b4      	cmp	r4, r6
    364a:	da0f      	bge.n	366c <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    364c:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    364e:	4d09      	ldr	r5, [pc, #36]	; (3674 <log_init+0x88>)
    3650:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    3654:	7b2b      	ldrb	r3, [r5, #12]
    3656:	2b00      	cmp	r3, #0
    3658:	d0f5      	beq.n	3646 <log_init+0x5a>
			if (backend->api->init != NULL) {
    365a:	0123      	lsls	r3, r4, #4
    365c:	4a05      	ldr	r2, [pc, #20]	; (3674 <log_init+0x88>)
    365e:	58d3      	ldr	r3, [r2, r3]
    3660:	699b      	ldr	r3, [r3, #24]
    3662:	2b00      	cmp	r3, #0
    3664:	d0e6      	beq.n	3634 <log_init+0x48>
				backend->api->init(backend);
    3666:	4628      	mov	r0, r5
    3668:	4798      	blx	r3
    366a:	e7e3      	b.n	3634 <log_init+0x48>
}
    366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    366e:	bf00      	nop
    3670:	0000d4d4 	.word	0x0000d4d4
    3674:	0000d4b4 	.word	0x0000d4b4
    3678:	20000704 	.word	0x20000704
    367c:	0000e280 	.word	0x0000e280
    3680:	0000e2c8 	.word	0x0000e2c8
    3684:	0000d63c 	.word	0x0000d63c

00003688 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    3688:	b138      	cbz	r0, 369a <log_set_timestamp_func+0x12>
{
    368a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    368c:	4a04      	ldr	r2, [pc, #16]	; (36a0 <log_set_timestamp_func+0x18>)
    368e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    3690:	4608      	mov	r0, r1
    3692:	f000 fabf 	bl	3c14 <log_output_timestamp_freq_set>
	return 0;
    3696:	2000      	movs	r0, #0
}
    3698:	bd08      	pop	{r3, pc}
		return -EINVAL;
    369a:	f06f 0015 	mvn.w	r0, #21
}
    369e:	4770      	bx	lr
    36a0:	2000009c 	.word	0x2000009c

000036a4 <log_core_init>:
{
    36a4:	b508      	push	{r3, lr}
	panic_mode = false;
    36a6:	2300      	movs	r3, #0
    36a8:	4a04      	ldr	r2, [pc, #16]	; (36bc <log_core_init+0x18>)
    36aa:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    36ac:	4a04      	ldr	r2, [pc, #16]	; (36c0 <log_core_init+0x1c>)
    36ae:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    36b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    36b4:	4803      	ldr	r0, [pc, #12]	; (36c4 <log_core_init+0x20>)
    36b6:	f7ff ffe7 	bl	3688 <log_set_timestamp_func>
}
    36ba:	bd08      	pop	{r3, pc}
    36bc:	20001455 	.word	0x20001455
    36c0:	20000700 	.word	0x20000700
    36c4:	0000c2a3 	.word	0x0000c2a3

000036c8 <z_impl_log_panic>:
	if (panic_mode) {
    36c8:	4b20      	ldr	r3, [pc, #128]	; (374c <z_impl_log_panic+0x84>)
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	b103      	cbz	r3, 36d0 <z_impl_log_panic+0x8>
    36ce:	4770      	bx	lr
{
    36d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    36d4:	f7ff ff8a 	bl	35ec <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    36d8:	2400      	movs	r4, #0
    36da:	e013      	b.n	3704 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    36dc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3750 <z_impl_log_panic+0x88>
    36e0:	f44f 7399 	mov.w	r3, #306	; 0x132
    36e4:	4642      	mov	r2, r8
    36e6:	491b      	ldr	r1, [pc, #108]	; (3754 <z_impl_log_panic+0x8c>)
    36e8:	481b      	ldr	r0, [pc, #108]	; (3758 <z_impl_log_panic+0x90>)
    36ea:	f008 fdc7 	bl	c27c <assert_print>
    36ee:	f44f 7199 	mov.w	r1, #306	; 0x132
    36f2:	4640      	mov	r0, r8
    36f4:	f008 fdbb 	bl	c26e <assert_post_action>
    36f8:	e00f      	b.n	371a <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    36fa:	597b      	ldr	r3, [r7, r5]
    36fc:	695b      	ldr	r3, [r3, #20]
    36fe:	4630      	mov	r0, r6
    3700:	4798      	blx	r3
    3702:	3401      	adds	r4, #1
    3704:	4b15      	ldr	r3, [pc, #84]	; (375c <z_impl_log_panic+0x94>)
    3706:	4a16      	ldr	r2, [pc, #88]	; (3760 <z_impl_log_panic+0x98>)
    3708:	1a9b      	subs	r3, r3, r2
    370a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    370e:	da17      	bge.n	3740 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    3710:	0127      	lsls	r7, r4, #4
    3712:	4d13      	ldr	r5, [pc, #76]	; (3760 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    3714:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    3718:	d0e0      	beq.n	36dc <z_impl_log_panic+0x14>
	return backend->cb->active;
    371a:	6873      	ldr	r3, [r6, #4]
    371c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    371e:	2b00      	cmp	r3, #0
    3720:	d0ef      	beq.n	3702 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    3722:	2e00      	cmp	r6, #0
    3724:	d1e9      	bne.n	36fa <z_impl_log_panic+0x32>
    3726:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3750 <z_impl_log_panic+0x88>
    372a:	23d7      	movs	r3, #215	; 0xd7
    372c:	4642      	mov	r2, r8
    372e:	4909      	ldr	r1, [pc, #36]	; (3754 <z_impl_log_panic+0x8c>)
    3730:	4809      	ldr	r0, [pc, #36]	; (3758 <z_impl_log_panic+0x90>)
    3732:	f008 fda3 	bl	c27c <assert_print>
    3736:	21d7      	movs	r1, #215	; 0xd7
    3738:	4640      	mov	r0, r8
    373a:	f008 fd98 	bl	c26e <assert_post_action>
    373e:	e7dc      	b.n	36fa <z_impl_log_panic+0x32>
	panic_mode = true;
    3740:	4b02      	ldr	r3, [pc, #8]	; (374c <z_impl_log_panic+0x84>)
    3742:	2201      	movs	r2, #1
    3744:	701a      	strb	r2, [r3, #0]
}
    3746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    374a:	bf00      	nop
    374c:	20001455 	.word	0x20001455
    3750:	0000e21c 	.word	0x0000e21c
    3754:	0000e254 	.word	0x0000e254
    3758:	0000d63c 	.word	0x0000d63c
    375c:	0000d4d4 	.word	0x0000d4d4
    3760:	0000d4b4 	.word	0x0000d4b4

00003764 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3764:	4b01      	ldr	r3, [pc, #4]	; (376c <z_log_notify_backend_enabled+0x8>)
    3766:	2201      	movs	r2, #1
    3768:	701a      	strb	r2, [r3, #0]
}
    376a:	4770      	bx	lr
    376c:	20001454 	.word	0x20001454

00003770 <z_log_dropped>:
    3770:	4b0d      	ldr	r3, [pc, #52]	; (37a8 <z_log_dropped+0x38>)
    3772:	f3bf 8f5b 	dmb	ish
    3776:	e853 2f00 	ldrex	r2, [r3]
    377a:	3201      	adds	r2, #1
    377c:	e843 2100 	strex	r1, r2, [r3]
    3780:	2900      	cmp	r1, #0
    3782:	d1f8      	bne.n	3776 <z_log_dropped+0x6>
    3784:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    3788:	b900      	cbnz	r0, 378c <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    378a:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    378c:	4b07      	ldr	r3, [pc, #28]	; (37ac <z_log_dropped+0x3c>)
    378e:	f3bf 8f5b 	dmb	ish
    3792:	e853 2f00 	ldrex	r2, [r3]
    3796:	3a01      	subs	r2, #1
    3798:	e843 2100 	strex	r1, r2, [r3]
    379c:	2900      	cmp	r1, #0
    379e:	d1f8      	bne.n	3792 <z_log_dropped+0x22>
    37a0:	f3bf 8f5b 	dmb	ish
    37a4:	e7f1      	b.n	378a <z_log_dropped+0x1a>
    37a6:	bf00      	nop
    37a8:	20000700 	.word	0x20000700
    37ac:	200006fc 	.word	0x200006fc

000037b0 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    37b0:	b510      	push	{r4, lr}
    37b2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <z_log_msg2_commit+0x18>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	4798      	blx	r3
    37ba:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    37bc:	2100      	movs	r1, #0
    37be:	4620      	mov	r0, r4
    37c0:	f7ff feae 	bl	3520 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    37c4:	bd10      	pop	{r4, pc}
    37c6:	bf00      	nop
    37c8:	2000009c 	.word	0x2000009c

000037cc <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    37cc:	4b05      	ldr	r3, [pc, #20]	; (37e4 <log_source_name_get+0x18>)
    37ce:	4a06      	ldr	r2, [pc, #24]	; (37e8 <log_source_name_get+0x1c>)
    37d0:	1a9b      	subs	r3, r3, r2
    37d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    37d6:	d202      	bcs.n	37de <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    37d8:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    37dc:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    37de:	2000      	movs	r0, #0
}
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	0000d4b4 	.word	0x0000d4b4
    37e8:	0000d464 	.word	0x0000d464

000037ec <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    37ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ee:	4604      	mov	r4, r0
    37f0:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    37f2:	4d1e      	ldr	r5, [pc, #120]	; (386c <log_backend_enable+0x80>)
    37f4:	1b45      	subs	r5, r0, r5
    37f6:	112d      	asrs	r5, r5, #4
    37f8:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    37fa:	6803      	ldr	r3, [r0, #0]
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	b163      	cbz	r3, 381a <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    3800:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    3802:	b1cc      	cbz	r4, 3838 <log_backend_enable+0x4c>
	backend->cb->id = id;
    3804:	6863      	ldr	r3, [r4, #4]
    3806:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    3808:	b314      	cbz	r4, 3850 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    380a:	6863      	ldr	r3, [r4, #4]
    380c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    380e:	6863      	ldr	r3, [r4, #4]
    3810:	2201      	movs	r2, #1
    3812:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    3814:	f7ff ffa6 	bl	3764 <z_log_notify_backend_enabled>
}
    3818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    381a:	4f15      	ldr	r7, [pc, #84]	; (3870 <log_backend_enable+0x84>)
    381c:	23bb      	movs	r3, #187	; 0xbb
    381e:	463a      	mov	r2, r7
    3820:	4914      	ldr	r1, [pc, #80]	; (3874 <log_backend_enable+0x88>)
    3822:	4815      	ldr	r0, [pc, #84]	; (3878 <log_backend_enable+0x8c>)
    3824:	f008 fd2a 	bl	c27c <assert_print>
    3828:	4814      	ldr	r0, [pc, #80]	; (387c <log_backend_enable+0x90>)
    382a:	f008 fd27 	bl	c27c <assert_print>
    382e:	21bb      	movs	r1, #187	; 0xbb
    3830:	4638      	mov	r0, r7
    3832:	f008 fd1c 	bl	c26e <assert_post_action>
    3836:	e7e3      	b.n	3800 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    3838:	4f11      	ldr	r7, [pc, #68]	; (3880 <log_backend_enable+0x94>)
    383a:	23e6      	movs	r3, #230	; 0xe6
    383c:	463a      	mov	r2, r7
    383e:	4911      	ldr	r1, [pc, #68]	; (3884 <log_backend_enable+0x98>)
    3840:	480d      	ldr	r0, [pc, #52]	; (3878 <log_backend_enable+0x8c>)
    3842:	f008 fd1b 	bl	c27c <assert_print>
    3846:	21e6      	movs	r1, #230	; 0xe6
    3848:	4638      	mov	r0, r7
    384a:	f008 fd10 	bl	c26e <assert_post_action>
    384e:	e7d9      	b.n	3804 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    3850:	4d0b      	ldr	r5, [pc, #44]	; (3880 <log_backend_enable+0x94>)
    3852:	f240 1317 	movw	r3, #279	; 0x117
    3856:	462a      	mov	r2, r5
    3858:	490a      	ldr	r1, [pc, #40]	; (3884 <log_backend_enable+0x98>)
    385a:	4807      	ldr	r0, [pc, #28]	; (3878 <log_backend_enable+0x8c>)
    385c:	f008 fd0e 	bl	c27c <assert_print>
    3860:	f240 1117 	movw	r1, #279	; 0x117
    3864:	4628      	mov	r0, r5
    3866:	f008 fd02 	bl	c26e <assert_post_action>
    386a:	e7ce      	b.n	380a <log_backend_enable+0x1e>
    386c:	0000d4b4 	.word	0x0000d4b4
    3870:	0000e2fc 	.word	0x0000e2fc
    3874:	0000e358 	.word	0x0000e358
    3878:	0000d63c 	.word	0x0000d63c
    387c:	0000e370 	.word	0x0000e370
    3880:	0000e21c 	.word	0x0000e21c
    3884:	0000e254 	.word	0x0000e254

00003888 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3888:	b40e      	push	{r1, r2, r3}
    388a:	b500      	push	{lr}
    388c:	b082      	sub	sp, #8
    388e:	4601      	mov	r1, r0
    3890:	ab03      	add	r3, sp, #12
    3892:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    3896:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3898:	4803      	ldr	r0, [pc, #12]	; (38a8 <print_formatted+0x20>)
    389a:	f7ff fb45 	bl	2f28 <cbvprintf>
	va_end(args);

	return length;
}
    389e:	b002      	add	sp, #8
    38a0:	f85d eb04 	ldr.w	lr, [sp], #4
    38a4:	b003      	add	sp, #12
    38a6:	4770      	bx	lr
    38a8:	0000c2d7 	.word	0x0000c2d7

000038ac <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    38ac:	b530      	push	{r4, r5, lr}
    38ae:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    38b0:	f011 0f44 	tst.w	r1, #68	; 0x44
    38b4:	d005      	beq.n	38c2 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    38b6:	4b1a      	ldr	r3, [pc, #104]	; (3920 <timestamp_print+0x74>)
    38b8:	681c      	ldr	r4, [r3, #0]
    38ba:	b934      	cbnz	r4, 38ca <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    38bc:	2000      	movs	r0, #0
	}

	return length;
}
    38be:	b005      	add	sp, #20
    38c0:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    38c2:	4918      	ldr	r1, [pc, #96]	; (3924 <timestamp_print+0x78>)
    38c4:	f7ff ffe0 	bl	3888 <print_formatted>
    38c8:	e7f9      	b.n	38be <timestamp_print+0x12>
		timestamp /= timestamp_div;
    38ca:	4b17      	ldr	r3, [pc, #92]	; (3928 <timestamp_print+0x7c>)
    38cc:	6819      	ldr	r1, [r3, #0]
    38ce:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    38d2:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    38d6:	4a15      	ldr	r2, [pc, #84]	; (392c <timestamp_print+0x80>)
    38d8:	fba2 320c 	umull	r3, r2, r2, ip
    38dc:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    38de:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    38e2:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    38e6:	4b12      	ldr	r3, [pc, #72]	; (3930 <timestamp_print+0x84>)
    38e8:	fba3 530e 	umull	r5, r3, r3, lr
    38ec:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    38ee:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    38f2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    38f6:	fb0c f101 	mul.w	r1, ip, r1
    38fa:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    38fe:	fb05 1114 	mls	r1, r5, r4, r1
    3902:	fb0c f101 	mul.w	r1, ip, r1
    3906:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    390a:	9102      	str	r1, [sp, #8]
    390c:	9501      	str	r5, [sp, #4]
    390e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    3912:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    3916:	9100      	str	r1, [sp, #0]
    3918:	4906      	ldr	r1, [pc, #24]	; (3934 <timestamp_print+0x88>)
    391a:	f7ff ffb5 	bl	3888 <print_formatted>
    391e:	e7ce      	b.n	38be <timestamp_print+0x12>
    3920:	20000708 	.word	0x20000708
    3924:	0000e394 	.word	0x0000e394
    3928:	2000070c 	.word	0x2000070c
    392c:	91a2b3c5 	.word	0x91a2b3c5
    3930:	88888889 	.word	0x88888889
    3934:	0000e3a0 	.word	0x0000e3a0

00003938 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3938:	b161      	cbz	r1, 3954 <color_print+0x1c>
{
    393a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    393c:	b12a      	cbz	r2, 394a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    393e:	4a06      	ldr	r2, [pc, #24]	; (3958 <color_print+0x20>)
    3940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3944:	b912      	cbnz	r2, 394c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3946:	4a05      	ldr	r2, [pc, #20]	; (395c <color_print+0x24>)
    3948:	e000      	b.n	394c <color_print+0x14>
    394a:	4a04      	ldr	r2, [pc, #16]	; (395c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    394c:	4904      	ldr	r1, [pc, #16]	; (3960 <color_print+0x28>)
    394e:	f7ff ff9b 	bl	3888 <print_formatted>
	}
}
    3952:	bd08      	pop	{r3, pc}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	0000e460 	.word	0x0000e460
    395c:	0000e3bc 	.word	0x0000e3bc
    3960:	0000e3c4 	.word	0x0000e3c4

00003964 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3964:	f011 0f10 	tst.w	r1, #16
    3968:	d10b      	bne.n	3982 <newline_print+0x1e>
{
    396a:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    396c:	f011 0f20 	tst.w	r1, #32
    3970:	d003      	beq.n	397a <newline_print+0x16>
		print_formatted(ctx, "\n");
    3972:	4904      	ldr	r1, [pc, #16]	; (3984 <newline_print+0x20>)
    3974:	f7ff ff88 	bl	3888 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    3978:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    397a:	4903      	ldr	r1, [pc, #12]	; (3988 <newline_print+0x24>)
    397c:	f7ff ff84 	bl	3888 <print_formatted>
    3980:	e7fa      	b.n	3978 <newline_print+0x14>
    3982:	4770      	bx	lr
    3984:	0000ec2c 	.word	0x0000ec2c
    3988:	0000fad0 	.word	0x0000fad0

0000398c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3990:	4605      	mov	r5, r0
    3992:	460f      	mov	r7, r1
    3994:	4616      	mov	r6, r2
    3996:	4698      	mov	r8, r3
	newline_print(output, flags);
    3998:	9906      	ldr	r1, [sp, #24]
    399a:	f7ff ffe3 	bl	3964 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    399e:	2400      	movs	r4, #0
    39a0:	4544      	cmp	r4, r8
    39a2:	da05      	bge.n	39b0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    39a4:	4923      	ldr	r1, [pc, #140]	; (3a34 <hexdump_line_print+0xa8>)
    39a6:	4628      	mov	r0, r5
    39a8:	f7ff ff6e 	bl	3888 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    39ac:	3401      	adds	r4, #1
    39ae:	e7f7      	b.n	39a0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39b0:	2400      	movs	r4, #0
    39b2:	e009      	b.n	39c8 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    39b4:	491f      	ldr	r1, [pc, #124]	; (3a34 <hexdump_line_print+0xa8>)
    39b6:	4628      	mov	r0, r5
    39b8:	f7ff ff66 	bl	3888 <print_formatted>
    39bc:	e00b      	b.n	39d6 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    39be:	491e      	ldr	r1, [pc, #120]	; (3a38 <hexdump_line_print+0xac>)
    39c0:	4628      	mov	r0, r5
    39c2:	f7ff ff61 	bl	3888 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39c6:	3401      	adds	r4, #1
    39c8:	2c0f      	cmp	r4, #15
    39ca:	dc0c      	bgt.n	39e6 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    39cc:	2c00      	cmp	r4, #0
    39ce:	dd02      	ble.n	39d6 <hexdump_line_print+0x4a>
    39d0:	f014 0f07 	tst.w	r4, #7
    39d4:	d0ee      	beq.n	39b4 <hexdump_line_print+0x28>
		if (i < length) {
    39d6:	42b4      	cmp	r4, r6
    39d8:	d2f1      	bcs.n	39be <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    39da:	5d3a      	ldrb	r2, [r7, r4]
    39dc:	4917      	ldr	r1, [pc, #92]	; (3a3c <hexdump_line_print+0xb0>)
    39de:	4628      	mov	r0, r5
    39e0:	f7ff ff52 	bl	3888 <print_formatted>
    39e4:	e7ef      	b.n	39c6 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    39e6:	4916      	ldr	r1, [pc, #88]	; (3a40 <hexdump_line_print+0xb4>)
    39e8:	4628      	mov	r0, r5
    39ea:	f7ff ff4d 	bl	3888 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39ee:	2400      	movs	r4, #0
    39f0:	e009      	b.n	3a06 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    39f2:	4910      	ldr	r1, [pc, #64]	; (3a34 <hexdump_line_print+0xa8>)
    39f4:	4628      	mov	r0, r5
    39f6:	f7ff ff47 	bl	3888 <print_formatted>
    39fa:	e00b      	b.n	3a14 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    39fc:	4911      	ldr	r1, [pc, #68]	; (3a44 <hexdump_line_print+0xb8>)
    39fe:	4628      	mov	r0, r5
    3a00:	f7ff ff42 	bl	3888 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3a04:	3401      	adds	r4, #1
    3a06:	2c0f      	cmp	r4, #15
    3a08:	dc12      	bgt.n	3a30 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    3a0a:	2c00      	cmp	r4, #0
    3a0c:	dd02      	ble.n	3a14 <hexdump_line_print+0x88>
    3a0e:	f014 0f07 	tst.w	r4, #7
    3a12:	d0ee      	beq.n	39f2 <hexdump_line_print+0x66>
		if (i < length) {
    3a14:	42b4      	cmp	r4, r6
    3a16:	d206      	bcs.n	3a26 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    3a18:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    3a1a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    3a1e:	2b5e      	cmp	r3, #94	; 0x5e
    3a20:	d9ec      	bls.n	39fc <hexdump_line_print+0x70>
    3a22:	222e      	movs	r2, #46	; 0x2e
    3a24:	e7ea      	b.n	39fc <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    3a26:	4903      	ldr	r1, [pc, #12]	; (3a34 <hexdump_line_print+0xa8>)
    3a28:	4628      	mov	r0, r5
    3a2a:	f7ff ff2d 	bl	3888 <print_formatted>
    3a2e:	e7e9      	b.n	3a04 <hexdump_line_print+0x78>
		}
	}
}
    3a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a34:	0000e3ec 	.word	0x0000e3ec
    3a38:	0000e3d0 	.word	0x0000e3d0
    3a3c:	0000e3c8 	.word	0x0000e3c8
    3a40:	0000e3d4 	.word	0x0000e3d4
    3a44:	0000e3d8 	.word	0x0000e3d8

00003a48 <ids_print>:
{
    3a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a4c:	4680      	mov	r8, r0
    3a4e:	4616      	mov	r6, r2
    3a50:	461d      	mov	r5, r3
    3a52:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    3a56:	b959      	cbnz	r1, 3a70 <ids_print+0x28>
	int total = 0;
    3a58:	2400      	movs	r4, #0
	if (source_id >= 0) {
    3a5a:	2f00      	cmp	r7, #0
    3a5c:	db1c      	blt.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
		total += print_formatted(output,
    3a5e:	b186      	cbz	r6, 3a82 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3a60:	2301      	movs	r3, #1
    3a62:	9a07      	ldr	r2, [sp, #28]
    3a64:	4093      	lsls	r3, r2
				(func_on &&
    3a66:	f013 0f10 	tst.w	r3, #16
    3a6a:	d118      	bne.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		total += print_formatted(output,
    3a6c:	4e0d      	ldr	r6, [pc, #52]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a6e:	e009      	b.n	3a84 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3a70:	4b0d      	ldr	r3, [pc, #52]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a72:	9a07      	ldr	r2, [sp, #28]
    3a74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a78:	490c      	ldr	r1, [pc, #48]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a7a:	f7ff ff05 	bl	3888 <print_formatted>
    3a7e:	4604      	mov	r4, r0
    3a80:	e7eb      	b.n	3a5a <ids_print+0x12>
		total += print_formatted(output,
    3a82:	4e08      	ldr	r6, [pc, #32]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a84:	4639      	mov	r1, r7
    3a86:	4628      	mov	r0, r5
    3a88:	f7ff fea0 	bl	37cc <log_source_name_get>
    3a8c:	4602      	mov	r2, r0
    3a8e:	4631      	mov	r1, r6
    3a90:	4640      	mov	r0, r8
    3a92:	f7ff fef9 	bl	3888 <print_formatted>
    3a96:	4404      	add	r4, r0
}
    3a98:	4620      	mov	r0, r4
    3a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3a9e:	4e04      	ldr	r6, [pc, #16]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3aa0:	e7f0      	b.n	3a84 <ids_print+0x3c>
    3aa2:	bf00      	nop
    3aa4:	0000e3dc 	.word	0x0000e3dc
    3aa8:	0000e474 	.word	0x0000e474
    3aac:	0000e3e8 	.word	0x0000e3e8
    3ab0:	0000e3e4 	.word	0x0000e3e4

00003ab4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab8:	b085      	sub	sp, #20
    3aba:	4605      	mov	r5, r0
    3abc:	460c      	mov	r4, r1
    3abe:	4616      	mov	r6, r2
    3ac0:	9303      	str	r3, [sp, #12]
    3ac2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3ac6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3aca:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3ace:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3ad2:	f008 fbfe 	bl	c2d2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3ad6:	b1e8      	cbz	r0, 3b14 <prefix_print+0x60>
    3ad8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3ada:	4913      	ldr	r1, [pc, #76]	; (3b28 <prefix_print+0x74>)
    3adc:	4628      	mov	r0, r5
    3ade:	f7ff fed3 	bl	3888 <print_formatted>
    3ae2:	4607      	mov	r7, r0
	}

	if (stamp) {
    3ae4:	f1bb 0f00 	cmp.w	fp, #0
    3ae8:	d116      	bne.n	3b18 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3aea:	4642      	mov	r2, r8
    3aec:	4651      	mov	r1, sl
    3aee:	4628      	mov	r0, r5
    3af0:	f008 fc1b 	bl	c32a <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3af4:	f8cd 8004 	str.w	r8, [sp, #4]
    3af8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    3afc:	9300      	str	r3, [sp, #0]
    3afe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3b02:	4632      	mov	r2, r6
    3b04:	4649      	mov	r1, r9
    3b06:	4628      	mov	r0, r5
    3b08:	f7ff ff9e 	bl	3a48 <ids_print>
			domain_id, source_id, level);


	return length;
}
    3b0c:	4438      	add	r0, r7
    3b0e:	b005      	add	sp, #20
    3b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3b14:	2700      	movs	r7, #0
    3b16:	e7e5      	b.n	3ae4 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3b18:	9a03      	ldr	r2, [sp, #12]
    3b1a:	4621      	mov	r1, r4
    3b1c:	4628      	mov	r0, r5
    3b1e:	f7ff fec5 	bl	38ac <timestamp_print>
    3b22:	4407      	add	r7, r0
    3b24:	e7e1      	b.n	3aea <prefix_print+0x36>
    3b26:	bf00      	nop
    3b28:	0000e3f0 	.word	0x0000e3f0

00003b2c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    3b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b30:	b084      	sub	sp, #16
    3b32:	4606      	mov	r6, r0
    3b34:	460c      	mov	r4, r1
    3b36:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    3b38:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    3b3a:	880a      	ldrh	r2, [r1, #0]
    3b3c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3b40:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    3b44:	d037      	beq.n	3bb6 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    3b46:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    3b48:	7809      	ldrb	r1, [r1, #0]
    3b4a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    3b4e:	b37a      	cbz	r2, 3bb0 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3b50:	4829      	ldr	r0, [pc, #164]	; (3bf8 <log_output_msg2_process+0xcc>)
    3b52:	1a12      	subs	r2, r2, r0
    3b54:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3b58:	9202      	str	r2, [sp, #8]
    3b5a:	9101      	str	r1, [sp, #4]
    3b5c:	f8cd 8000 	str.w	r8, [sp]
    3b60:	2200      	movs	r2, #0
    3b62:	4639      	mov	r1, r7
    3b64:	4630      	mov	r0, r6
    3b66:	f7ff ffa5 	bl	3ab4 <prefix_print>
    3b6a:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3b6c:	4625      	mov	r5, r4
    3b6e:	f855 3b10 	ldr.w	r3, [r5], #16
    3b72:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    3b76:	b153      	cbz	r3, 3b8e <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3b78:	f1b8 0f00 	cmp.w	r8, #0
    3b7c:	d11e      	bne.n	3bbc <log_output_msg2_process+0x90>
    3b7e:	481f      	ldr	r0, [pc, #124]	; (3bfc <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3b80:	462b      	mov	r3, r5
    3b82:	4632      	mov	r2, r6
    3b84:	491e      	ldr	r1, [pc, #120]	; (3c00 <log_output_msg2_process+0xd4>)
    3b86:	f008 f9a8 	bl	beda <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    3b8a:	2800      	cmp	r0, #0
    3b8c:	db18      	blt.n	3bc0 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    3b8e:	8862      	ldrh	r2, [r4, #2]
    3b90:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3b94:	6821      	ldr	r1, [r4, #0]
    3b96:	f3c1 2149 	ubfx	r1, r1, #9, #10
    3b9a:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    3b9c:	b9fa      	cbnz	r2, 3bde <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    3b9e:	f1b8 0f00 	cmp.w	r8, #0
    3ba2:	d122      	bne.n	3bea <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3ba4:	4630      	mov	r0, r6
    3ba6:	f008 fbf3 	bl	c390 <log_output_flush>
}
    3baa:	b004      	add	sp, #16
    3bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    3bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3bb4:	e7d0      	b.n	3b58 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    3bb6:	f04f 0900 	mov.w	r9, #0
    3bba:	e7d7      	b.n	3b6c <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3bbc:	4811      	ldr	r0, [pc, #68]	; (3c04 <log_output_msg2_process+0xd8>)
    3bbe:	e7df      	b.n	3b80 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    3bc0:	f8df a044 	ldr.w	sl, [pc, #68]	; 3c08 <log_output_msg2_process+0xdc>
    3bc4:	f240 23b7 	movw	r3, #695	; 0x2b7
    3bc8:	4652      	mov	r2, sl
    3bca:	4910      	ldr	r1, [pc, #64]	; (3c0c <log_output_msg2_process+0xe0>)
    3bcc:	4810      	ldr	r0, [pc, #64]	; (3c10 <log_output_msg2_process+0xe4>)
    3bce:	f008 fb55 	bl	c27c <assert_print>
    3bd2:	f240 21b7 	movw	r1, #695	; 0x2b7
    3bd6:	4650      	mov	r0, sl
    3bd8:	f008 fb49 	bl	c26e <assert_post_action>
    3bdc:	e7d7      	b.n	3b8e <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    3bde:	9700      	str	r7, [sp, #0]
    3be0:	464b      	mov	r3, r9
    3be2:	4630      	mov	r0, r6
    3be4:	f008 fbb9 	bl	c35a <log_msg2_hexdump>
    3be8:	e7d9      	b.n	3b9e <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    3bea:	4642      	mov	r2, r8
    3bec:	4639      	mov	r1, r7
    3bee:	4630      	mov	r0, r6
    3bf0:	f008 fba7 	bl	c342 <postfix_print>
    3bf4:	e7d6      	b.n	3ba4 <log_output_msg2_process+0x78>
    3bf6:	bf00      	nop
    3bf8:	0000d464 	.word	0x0000d464
    3bfc:	0000c2f5 	.word	0x0000c2f5
    3c00:	00002f29 	.word	0x00002f29
    3c04:	0000c2d7 	.word	0x0000c2d7
    3c08:	0000e3f4 	.word	0x0000e3f4
    3c0c:	0000e434 	.word	0x0000e434
    3c10:	0000d63c 	.word	0x0000d63c

00003c14 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3c14:	4b07      	ldr	r3, [pc, #28]	; (3c34 <log_output_timestamp_freq_set+0x20>)
    3c16:	2201      	movs	r2, #1
    3c18:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3c1a:	e004      	b.n	3c26 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3c1c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3c1e:	4a05      	ldr	r2, [pc, #20]	; (3c34 <log_output_timestamp_freq_set+0x20>)
    3c20:	6813      	ldr	r3, [r2, #0]
    3c22:	005b      	lsls	r3, r3, #1
    3c24:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3c26:	4b04      	ldr	r3, [pc, #16]	; (3c38 <log_output_timestamp_freq_set+0x24>)
    3c28:	4298      	cmp	r0, r3
    3c2a:	d8f7      	bhi.n	3c1c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3c2c:	4b03      	ldr	r3, [pc, #12]	; (3c3c <log_output_timestamp_freq_set+0x28>)
    3c2e:	6018      	str	r0, [r3, #0]
}
    3c30:	4770      	bx	lr
    3c32:	bf00      	nop
    3c34:	2000070c 	.word	0x2000070c
    3c38:	000f4240 	.word	0x000f4240
    3c3c:	20000708 	.word	0x20000708

00003c40 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c44:	b087      	sub	sp, #28
    3c46:	af02      	add	r7, sp, #8
    3c48:	4682      	mov	sl, r0
    3c4a:	6079      	str	r1, [r7, #4]
    3c4c:	4691      	mov	r9, r2
    3c4e:	4698      	mov	r8, r3
    3c50:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3c52:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    3c56:	f1bb 0f00 	cmp.w	fp, #0
    3c5a:	d016      	beq.n	3c8a <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    3c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c5e:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3c60:	9300      	str	r3, [sp, #0]
    3c62:	465b      	mov	r3, fp
    3c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c66:	2110      	movs	r1, #16
    3c68:	2000      	movs	r0, #0
    3c6a:	f7fe f8fb 	bl	1e64 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3c6e:	1e05      	subs	r5, r0, #0
    3c70:	da0c      	bge.n	3c8c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    3c72:	4c26      	ldr	r4, [pc, #152]	; (3d0c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    3c74:	2367      	movs	r3, #103	; 0x67
    3c76:	4622      	mov	r2, r4
    3c78:	4925      	ldr	r1, [pc, #148]	; (3d10 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3c7a:	4826      	ldr	r0, [pc, #152]	; (3d14 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3c7c:	f008 fafe 	bl	c27c <assert_print>
    3c80:	2167      	movs	r1, #103	; 0x67
    3c82:	4620      	mov	r0, r4
    3c84:	f008 faf3 	bl	c26e <assert_post_action>
		va_end(ap2);
    3c88:	e000      	b.n	3c8c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    3c8a:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3c8c:	4629      	mov	r1, r5
    3c8e:	19ab      	adds	r3, r5, r6
    3c90:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3c92:	2400      	movs	r4, #0
    3c94:	f36f 0400 	bfc	r4, #0, #1
    3c98:	f36f 0441 	bfc	r4, #1, #1
    3c9c:	f36f 0482 	bfc	r4, #2, #1
    3ca0:	f36a 04c5 	bfi	r4, sl, #3, #3
    3ca4:	f369 1488 	bfi	r4, r9, #6, #3
    3ca8:	f365 2452 	bfi	r4, r5, #9, #10
    3cac:	f366 44de 	bfi	r4, r6, #19, #12
    3cb0:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3cb4:	f023 0307 	bic.w	r3, r3, #7
    3cb8:	ebad 0d03 	sub.w	sp, sp, r3
    3cbc:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3cbe:	466b      	mov	r3, sp
    3cc0:	f113 0018 	adds.w	r0, r3, #24
    3cc4:	d00a      	beq.n	3cdc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3cc6:	f1bb 0f00 	cmp.w	fp, #0
    3cca:	d007      	beq.n	3cdc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3cce:	9300      	str	r3, [sp, #0]
    3cd0:	465b      	mov	r3, fp
    3cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3cd4:	f7fe f8c6 	bl	1e64 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    3cd8:	2800      	cmp	r0, #0
    3cda:	db09      	blt.n	3cf0 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3cdc:	4643      	mov	r3, r8
    3cde:	4622      	mov	r2, r4
    3ce0:	6879      	ldr	r1, [r7, #4]
    3ce2:	4628      	mov	r0, r5
    3ce4:	f008 fb61 	bl	c3aa <z_log_msg2_finalize>
	}
}
    3ce8:	3714      	adds	r7, #20
    3cea:	46bd      	mov	sp, r7
    3cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    3cf0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 3d0c <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    3cf4:	2381      	movs	r3, #129	; 0x81
    3cf6:	464a      	mov	r2, r9
    3cf8:	4905      	ldr	r1, [pc, #20]	; (3d10 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3cfa:	4806      	ldr	r0, [pc, #24]	; (3d14 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3cfc:	f008 fabe 	bl	c27c <assert_print>
    3d00:	2181      	movs	r1, #129	; 0x81
    3d02:	4648      	mov	r0, r9
    3d04:	f008 fab3 	bl	c26e <assert_post_action>
    3d08:	e7e8      	b.n	3cdc <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3d0a:	bf00      	nop
    3d0c:	0000e488 	.word	0x0000e488
    3d10:	0000e4c4 	.word	0x0000e4c4
    3d14:	0000d63c 	.word	0x0000d63c

00003d18 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3d18:	b570      	push	{r4, r5, r6, lr}
    3d1a:	4606      	mov	r6, r0
    3d1c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    3d1e:	2400      	movs	r4, #0
    3d20:	e006      	b.n	3d30 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    3d22:	4b05      	ldr	r3, [pc, #20]	; (3d38 <char_out+0x20>)
    3d24:	6818      	ldr	r0, [r3, #0]
    3d26:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3d28:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3d2a:	685b      	ldr	r3, [r3, #4]
    3d2c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3d2e:	3401      	adds	r4, #1
    3d30:	42ac      	cmp	r4, r5
    3d32:	d3f6      	bcc.n	3d22 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3d34:	4628      	mov	r0, r5
    3d36:	bd70      	pop	{r4, r5, r6, pc}
    3d38:	20000728 	.word	0x20000728

00003d3c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3d3c:	4b01      	ldr	r3, [pc, #4]	; (3d44 <format_set+0x8>)
    3d3e:	6019      	str	r1, [r3, #0]
	return 0;
}
    3d40:	2000      	movs	r0, #0
    3d42:	4770      	bx	lr
    3d44:	20000718 	.word	0x20000718

00003d48 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    3d48:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3d4a:	4809      	ldr	r0, [pc, #36]	; (3d70 <log_backend_uart_init+0x28>)
    3d4c:	4b09      	ldr	r3, [pc, #36]	; (3d74 <log_backend_uart_init+0x2c>)
    3d4e:	6018      	str	r0, [r3, #0]
    3d50:	f009 f924 	bl	cf9c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3d54:	b100      	cbz	r0, 3d58 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    3d56:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3d58:	4c07      	ldr	r4, [pc, #28]	; (3d78 <log_backend_uart_init+0x30>)
    3d5a:	2379      	movs	r3, #121	; 0x79
    3d5c:	4622      	mov	r2, r4
    3d5e:	4907      	ldr	r1, [pc, #28]	; (3d7c <log_backend_uart_init+0x34>)
    3d60:	4807      	ldr	r0, [pc, #28]	; (3d80 <log_backend_uart_init+0x38>)
    3d62:	f008 fa8b 	bl	c27c <assert_print>
    3d66:	2179      	movs	r1, #121	; 0x79
    3d68:	4620      	mov	r0, r4
    3d6a:	f008 fa80 	bl	c26e <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    3d6e:	e7f2      	b.n	3d56 <log_backend_uart_init+0xe>
    3d70:	0000d2b4 	.word	0x0000d2b4
    3d74:	20000728 	.word	0x20000728
    3d78:	0000e4d0 	.word	0x0000e4d0
    3d7c:	0000e508 	.word	0x0000e508
    3d80:	0000d63c 	.word	0x0000d63c

00003d84 <panic>:

static void panic(struct log_backend const *const backend)
{
    3d84:	b508      	push	{r3, lr}
	in_panic = true;
    3d86:	4b03      	ldr	r3, [pc, #12]	; (3d94 <panic+0x10>)
    3d88:	2201      	movs	r2, #1
    3d8a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3d8c:	4802      	ldr	r0, [pc, #8]	; (3d98 <panic+0x14>)
    3d8e:	f008 faff 	bl	c390 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3d92:	bd08      	pop	{r3, pc}
    3d94:	20001456 	.word	0x20001456
    3d98:	0000e564 	.word	0x0000e564

00003d9c <process>:
{
    3d9c:	b510      	push	{r4, lr}
    3d9e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3da0:	4b04      	ldr	r3, [pc, #16]	; (3db4 <process+0x18>)
    3da2:	6818      	ldr	r0, [r3, #0]
    3da4:	f7ff fc1c 	bl	35e0 <log_format_func_t_get>
    3da8:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    3daa:	220f      	movs	r2, #15
    3dac:	4621      	mov	r1, r4
    3dae:	4802      	ldr	r0, [pc, #8]	; (3db8 <process+0x1c>)
    3db0:	4798      	blx	r3
}
    3db2:	bd10      	pop	{r4, pc}
    3db4:	20000718 	.word	0x20000718
    3db8:	0000e564 	.word	0x0000e564

00003dbc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3dbc:	4b03      	ldr	r3, [pc, #12]	; (3dcc <log_backend_rtt_init+0x10>)
    3dbe:	2201      	movs	r2, #1
    3dc0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3dc2:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <log_backend_rtt_init+0x14>)
    3dc4:	4a03      	ldr	r2, [pc, #12]	; (3dd4 <log_backend_rtt_init+0x18>)
    3dc6:	601a      	str	r2, [r3, #0]
}
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	20001457 	.word	0x20001457
    3dd0:	20000754 	.word	0x20000754
    3dd4:	2000073c 	.word	0x2000073c

00003dd8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3dd8:	4b01      	ldr	r3, [pc, #4]	; (3de0 <format_set+0x8>)
    3dda:	6019      	str	r1, [r3, #0]
	return 0;
}
    3ddc:	2000      	movs	r0, #0
    3dde:	4770      	bx	lr
    3de0:	20000758 	.word	0x20000758

00003de4 <on_failed_write>:
{
    3de4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3de6:	b918      	cbnz	r0, 3df0 <on_failed_write+0xc>
		host_present = false;
    3de8:	4b04      	ldr	r3, [pc, #16]	; (3dfc <on_failed_write+0x18>)
    3dea:	2200      	movs	r2, #0
    3dec:	701a      	strb	r2, [r3, #0]
}
    3dee:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3df0:	f241 3088 	movw	r0, #5000	; 0x1388
    3df4:	f009 f9c2 	bl	d17c <z_impl_k_busy_wait>
    3df8:	e7f9      	b.n	3dee <on_failed_write+0xa>
    3dfa:	bf00      	nop
    3dfc:	20001457 	.word	0x20001457

00003e00 <on_write>:
{
    3e00:	b538      	push	{r3, r4, r5, lr}
    3e02:	4604      	mov	r4, r0
	host_present = true;
    3e04:	4b0a      	ldr	r3, [pc, #40]	; (3e30 <on_write+0x30>)
    3e06:	2201      	movs	r2, #1
    3e08:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3e0a:	4b0a      	ldr	r3, [pc, #40]	; (3e34 <on_write+0x34>)
    3e0c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3e0e:	b92b      	cbnz	r3, 3e1c <on_write+0x1c>
}
    3e10:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3e12:	1e65      	subs	r5, r4, #1
    3e14:	4620      	mov	r0, r4
    3e16:	f7ff ffe5 	bl	3de4 <on_failed_write>
    3e1a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3e1c:	2000      	movs	r0, #0
    3e1e:	f004 fdfb 	bl	8a18 <SEGGER_RTT_HasDataUp>
    3e22:	2800      	cmp	r0, #0
    3e24:	d0f4      	beq.n	3e10 <on_write+0x10>
    3e26:	4b02      	ldr	r3, [pc, #8]	; (3e30 <on_write+0x30>)
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d1f1      	bne.n	3e12 <on_write+0x12>
    3e2e:	e7ef      	b.n	3e10 <on_write+0x10>
    3e30:	20001457 	.word	0x20001457
    3e34:	20001458 	.word	0x20001458

00003e38 <data_out_block_mode>:
{
    3e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e3a:	4606      	mov	r6, r0
    3e3c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3e3e:	2704      	movs	r7, #4
    3e40:	e006      	b.n	3e50 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    3e42:	4638      	mov	r0, r7
    3e44:	f7ff ffdc 	bl	3e00 <on_write>
	} while ((ret == 0) && host_present);
    3e48:	b99c      	cbnz	r4, 3e72 <data_out_block_mode+0x3a>
    3e4a:	4b0d      	ldr	r3, [pc, #52]	; (3e80 <data_out_block_mode+0x48>)
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	b183      	cbz	r3, 3e72 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3e50:	462a      	mov	r2, r5
    3e52:	4631      	mov	r1, r6
    3e54:	2000      	movs	r0, #0
    3e56:	f004 fd7b 	bl	8950 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3e5a:	4604      	mov	r4, r0
    3e5c:	2800      	cmp	r0, #0
    3e5e:	d1f0      	bne.n	3e42 <data_out_block_mode+0xa>
		} else if (host_present) {
    3e60:	4b07      	ldr	r3, [pc, #28]	; (3e80 <data_out_block_mode+0x48>)
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d0ef      	beq.n	3e48 <data_out_block_mode+0x10>
			retry_cnt--;
    3e68:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3e6a:	4638      	mov	r0, r7
    3e6c:	f7ff ffba 	bl	3de4 <on_failed_write>
    3e70:	e7ea      	b.n	3e48 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    3e72:	b914      	cbnz	r4, 3e7a <data_out_block_mode+0x42>
    3e74:	4b02      	ldr	r3, [pc, #8]	; (3e80 <data_out_block_mode+0x48>)
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	b903      	cbnz	r3, 3e7c <data_out_block_mode+0x44>
    3e7a:	462c      	mov	r4, r5
}
    3e7c:	4620      	mov	r0, r4
    3e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e80:	20001457 	.word	0x20001457

00003e84 <panic>:
{
    3e84:	b508      	push	{r3, lr}
	panic_mode = true;
    3e86:	4b03      	ldr	r3, [pc, #12]	; (3e94 <panic+0x10>)
    3e88:	2201      	movs	r2, #1
    3e8a:	701a      	strb	r2, [r3, #0]
    3e8c:	4802      	ldr	r0, [pc, #8]	; (3e98 <panic+0x14>)
    3e8e:	f008 fa7f 	bl	c390 <log_output_flush>
}
    3e92:	bd08      	pop	{r3, pc}
    3e94:	20001458 	.word	0x20001458
    3e98:	0000e5a4 	.word	0x0000e5a4

00003e9c <process>:
{
    3e9c:	b510      	push	{r4, lr}
    3e9e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3ea0:	4b04      	ldr	r3, [pc, #16]	; (3eb4 <process+0x18>)
    3ea2:	6818      	ldr	r0, [r3, #0]
    3ea4:	f7ff fb9c 	bl	35e0 <log_format_func_t_get>
    3ea8:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3eaa:	220f      	movs	r2, #15
    3eac:	4621      	mov	r1, r4
    3eae:	4802      	ldr	r0, [pc, #8]	; (3eb8 <process+0x1c>)
    3eb0:	4798      	blx	r3
}
    3eb2:	bd10      	pop	{r4, pc}
    3eb4:	20000758 	.word	0x20000758
    3eb8:	0000e5a4 	.word	0x0000e5a4

00003ebc <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3ebc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    3ebe:	4b40      	ldr	r3, [pc, #256]	; (3fc0 <pm_system_resume+0x104>)
    3ec0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3ec2:	f005 031f 	and.w	r3, r5, #31
    3ec6:	2201      	movs	r2, #1
    3ec8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3eca:	0969      	lsrs	r1, r5, #5
    3ecc:	4b3d      	ldr	r3, [pc, #244]	; (3fc4 <pm_system_resume+0x108>)
    3ece:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3ed2:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ed4:	f3bf 8f5b 	dmb	ish
    3ed8:	e853 1f00 	ldrex	r1, [r3]
    3edc:	ea01 0400 	and.w	r4, r1, r0
    3ee0:	e843 4600 	strex	r6, r4, [r3]
    3ee4:	2e00      	cmp	r6, #0
    3ee6:	d1f7      	bne.n	3ed8 <pm_system_resume+0x1c>
    3ee8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3eec:	420a      	tst	r2, r1
    3eee:	d100      	bne.n	3ef2 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3ef2:	4a35      	ldr	r2, [pc, #212]	; (3fc8 <pm_system_resume+0x10c>)
    3ef4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3ef8:	0098      	lsls	r0, r3, #2
    3efa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    3efe:	4933      	ldr	r1, [pc, #204]	; (3fcc <pm_system_resume+0x110>)
    3f00:	b1a9      	cbz	r1, 3f2e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3f02:	7859      	ldrb	r1, [r3, #1]
    3f04:	5c10      	ldrb	r0, [r2, r0]
    3f06:	f008 fbc1 	bl	c68c <pm_state_exit_post_ops>
    3f0a:	f04f 0320 	mov.w	r3, #32
    3f0e:	f3ef 8611 	mrs	r6, BASEPRI
    3f12:	f383 8812 	msr	BASEPRI_MAX, r3
    3f16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f1a:	482d      	ldr	r0, [pc, #180]	; (3fd0 <pm_system_resume+0x114>)
    3f1c:	f005 f8a2 	bl	9064 <z_spin_lock_valid>
    3f20:	b158      	cbz	r0, 3f3a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    3f22:	482b      	ldr	r0, [pc, #172]	; (3fd0 <pm_system_resume+0x114>)
    3f24:	f005 f8be 	bl	90a4 <z_spin_lock_set_owner>
	return list->head;
    3f28:	4b2a      	ldr	r3, [pc, #168]	; (3fd4 <pm_system_resume+0x118>)
    3f2a:	681c      	ldr	r4, [r3, #0]
    3f2c:	e020      	b.n	3f70 <pm_system_resume+0xb4>
	__asm__ volatile(
    3f2e:	2300      	movs	r3, #0
    3f30:	f383 8811 	msr	BASEPRI, r3
    3f34:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3f38:	e7e7      	b.n	3f0a <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f3a:	4c27      	ldr	r4, [pc, #156]	; (3fd8 <pm_system_resume+0x11c>)
    3f3c:	238e      	movs	r3, #142	; 0x8e
    3f3e:	4622      	mov	r2, r4
    3f40:	4926      	ldr	r1, [pc, #152]	; (3fdc <pm_system_resume+0x120>)
    3f42:	4827      	ldr	r0, [pc, #156]	; (3fe0 <pm_system_resume+0x124>)
    3f44:	f008 f99a 	bl	c27c <assert_print>
    3f48:	4921      	ldr	r1, [pc, #132]	; (3fd0 <pm_system_resume+0x114>)
    3f4a:	4826      	ldr	r0, [pc, #152]	; (3fe4 <pm_system_resume+0x128>)
    3f4c:	f008 f996 	bl	c27c <assert_print>
    3f50:	218e      	movs	r1, #142	; 0x8e
    3f52:	4620      	mov	r0, r4
    3f54:	f008 f98b 	bl	c26e <assert_post_action>
    3f58:	e7e3      	b.n	3f22 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3f5a:	4b19      	ldr	r3, [pc, #100]	; (3fc0 <pm_system_resume+0x104>)
    3f5c:	7d1b      	ldrb	r3, [r3, #20]
    3f5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f62:	4919      	ldr	r1, [pc, #100]	; (3fc8 <pm_system_resume+0x10c>)
    3f64:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3f68:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3f6a:	b10c      	cbz	r4, 3f70 <pm_system_resume+0xb4>
	return node->next;
    3f6c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f6e:	b124      	cbz	r4, 3f7a <pm_system_resume+0xbe>
    3f70:	b11c      	cbz	r4, 3f7a <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    3f72:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    3f74:	2a00      	cmp	r2, #0
    3f76:	d1f0      	bne.n	3f5a <pm_system_resume+0x9e>
    3f78:	e7f7      	b.n	3f6a <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f7a:	4815      	ldr	r0, [pc, #84]	; (3fd0 <pm_system_resume+0x114>)
    3f7c:	f005 f882 	bl	9084 <z_spin_unlock_valid>
    3f80:	b170      	cbz	r0, 3fa0 <pm_system_resume+0xe4>
	__asm__ volatile(
    3f82:	f386 8811 	msr	BASEPRI, r6
    3f86:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3f8a:	4a0f      	ldr	r2, [pc, #60]	; (3fc8 <pm_system_resume+0x10c>)
    3f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3f90:	00a9      	lsls	r1, r5, #2
    3f92:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3f96:	2300      	movs	r3, #0
    3f98:	5053      	str	r3, [r2, r1]
    3f9a:	606b      	str	r3, [r5, #4]
    3f9c:	60ab      	str	r3, [r5, #8]
}
    3f9e:	e7a7      	b.n	3ef0 <pm_system_resume+0x34>
    3fa0:	4c0d      	ldr	r4, [pc, #52]	; (3fd8 <pm_system_resume+0x11c>)
    3fa2:	23b9      	movs	r3, #185	; 0xb9
    3fa4:	4622      	mov	r2, r4
    3fa6:	4910      	ldr	r1, [pc, #64]	; (3fe8 <pm_system_resume+0x12c>)
    3fa8:	480d      	ldr	r0, [pc, #52]	; (3fe0 <pm_system_resume+0x124>)
    3faa:	f008 f967 	bl	c27c <assert_print>
    3fae:	4908      	ldr	r1, [pc, #32]	; (3fd0 <pm_system_resume+0x114>)
    3fb0:	480e      	ldr	r0, [pc, #56]	; (3fec <pm_system_resume+0x130>)
    3fb2:	f008 f963 	bl	c27c <assert_print>
    3fb6:	21b9      	movs	r1, #185	; 0xb9
    3fb8:	4620      	mov	r0, r4
    3fba:	f008 f958 	bl	c26e <assert_post_action>
    3fbe:	e7e0      	b.n	3f82 <pm_system_resume+0xc6>
    3fc0:	20001228 	.word	0x20001228
    3fc4:	20000784 	.word	0x20000784
    3fc8:	20000774 	.word	0x20000774
    3fcc:	0000c68d 	.word	0x0000c68d
    3fd0:	20000768 	.word	0x20000768
    3fd4:	2000076c 	.word	0x2000076c
    3fd8:	0000dfbc 	.word	0x0000dfbc
    3fdc:	0000e01c 	.word	0x0000e01c
    3fe0:	0000d63c 	.word	0x0000d63c
    3fe4:	0000e034 	.word	0x0000e034
    3fe8:	0000dfec 	.word	0x0000dfec
    3fec:	0000e004 	.word	0x0000e004

00003ff0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3ff4:	4b6d      	ldr	r3, [pc, #436]	; (41ac <pm_system_suspend+0x1bc>)
    3ff6:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3ff8:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ffa:	f3bf 8f5b 	dmb	ish
    3ffe:	4b6c      	ldr	r3, [pc, #432]	; (41b0 <pm_system_suspend+0x1c0>)
    4000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4004:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4008:	f005 021f 	and.w	r2, r5, #31
    400c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    400e:	f013 0f01 	tst.w	r3, #1
    4012:	d01d      	beq.n	4050 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    4014:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4018:	4a66      	ldr	r2, [pc, #408]	; (41b4 <pm_system_suspend+0x1c4>)
    401a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    401e:	b333      	cbz	r3, 406e <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    4020:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4024:	d139      	bne.n	409a <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4026:	f005 fe87 	bl	9d38 <k_sched_lock>
	__asm__ volatile(
    402a:	f04f 0320 	mov.w	r3, #32
    402e:	f3ef 8611 	mrs	r6, BASEPRI
    4032:	f383 8812 	msr	BASEPRI_MAX, r3
    4036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    403a:	485f      	ldr	r0, [pc, #380]	; (41b8 <pm_system_suspend+0x1c8>)
    403c:	f005 f812 	bl	9064 <z_spin_lock_valid>
    4040:	2800      	cmp	r0, #0
    4042:	d040      	beq.n	40c6 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    4044:	485c      	ldr	r0, [pc, #368]	; (41b8 <pm_system_suspend+0x1c8>)
    4046:	f005 f82d 	bl	90a4 <z_spin_lock_set_owner>
	return list->head;
    404a:	4b5c      	ldr	r3, [pc, #368]	; (41bc <pm_system_suspend+0x1cc>)
    404c:	681c      	ldr	r4, [r3, #0]
    404e:	e055      	b.n	40fc <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    4050:	4601      	mov	r1, r0
    4052:	4628      	mov	r0, r5
    4054:	f000 f8d6 	bl	4204 <pm_policy_next_state>
		if (info != NULL) {
    4058:	2800      	cmp	r0, #0
    405a:	d0db      	beq.n	4014 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    405c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4060:	4a54      	ldr	r2, [pc, #336]	; (41b4 <pm_system_suspend+0x1c4>)
    4062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4066:	c807      	ldmia	r0, {r0, r1, r2}
    4068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    406c:	e7d2      	b.n	4014 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    406e:	f005 021f 	and.w	r2, r5, #31
    4072:	2301      	movs	r3, #1
    4074:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4076:	096d      	lsrs	r5, r5, #5
    4078:	4a4d      	ldr	r2, [pc, #308]	; (41b0 <pm_system_suspend+0x1c0>)
    407a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    407e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4080:	f3bf 8f5b 	dmb	ish
    4084:	e855 2f00 	ldrex	r2, [r5]
    4088:	401a      	ands	r2, r3
    408a:	e845 2100 	strex	r1, r2, [r5]
    408e:	2900      	cmp	r1, #0
    4090:	d1f8      	bne.n	4084 <pm_system_suspend+0x94>
    4092:	f3bf 8f5b 	dmb	ish
		ret = false;
    4096:	2000      	movs	r0, #0
		goto end;
    4098:	e077      	b.n	418a <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    409a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    409e:	4a45      	ldr	r2, [pc, #276]	; (41b4 <pm_system_suspend+0x1c4>)
    40a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40a4:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    40a6:	0c41      	lsrs	r1, r0, #17
    40a8:	03c0      	lsls	r0, r0, #15
    40aa:	4b45      	ldr	r3, [pc, #276]	; (41c0 <pm_system_suspend+0x1d0>)
    40ac:	18c0      	adds	r0, r0, r3
    40ae:	4a45      	ldr	r2, [pc, #276]	; (41c4 <pm_system_suspend+0x1d4>)
    40b0:	f04f 0300 	mov.w	r3, #0
    40b4:	f141 0100 	adc.w	r1, r1, #0
    40b8:	f7fc fa04 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    40bc:	2101      	movs	r1, #1
    40be:	1a20      	subs	r0, r4, r0
    40c0:	f007 fa22 	bl	b508 <z_set_timeout_expiry>
    40c4:	e7af      	b.n	4026 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40c6:	4c40      	ldr	r4, [pc, #256]	; (41c8 <pm_system_suspend+0x1d8>)
    40c8:	238e      	movs	r3, #142	; 0x8e
    40ca:	4622      	mov	r2, r4
    40cc:	493f      	ldr	r1, [pc, #252]	; (41cc <pm_system_suspend+0x1dc>)
    40ce:	4840      	ldr	r0, [pc, #256]	; (41d0 <pm_system_suspend+0x1e0>)
    40d0:	f008 f8d4 	bl	c27c <assert_print>
    40d4:	4938      	ldr	r1, [pc, #224]	; (41b8 <pm_system_suspend+0x1c8>)
    40d6:	483f      	ldr	r0, [pc, #252]	; (41d4 <pm_system_suspend+0x1e4>)
    40d8:	f008 f8d0 	bl	c27c <assert_print>
    40dc:	218e      	movs	r1, #142	; 0x8e
    40de:	4620      	mov	r0, r4
    40e0:	f008 f8c5 	bl	c26e <assert_post_action>
    40e4:	e7ae      	b.n	4044 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    40e6:	4b31      	ldr	r3, [pc, #196]	; (41ac <pm_system_suspend+0x1bc>)
    40e8:	7d1b      	ldrb	r3, [r3, #20]
    40ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40ee:	4931      	ldr	r1, [pc, #196]	; (41b4 <pm_system_suspend+0x1c4>)
    40f0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    40f4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    40f6:	b10c      	cbz	r4, 40fc <pm_system_suspend+0x10c>
	return node->next;
    40f8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    40fa:	b124      	cbz	r4, 4106 <pm_system_suspend+0x116>
    40fc:	b11c      	cbz	r4, 4106 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    40fe:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    4100:	2a00      	cmp	r2, #0
    4102:	d1f0      	bne.n	40e6 <pm_system_suspend+0xf6>
    4104:	e7f7      	b.n	40f6 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4106:	482c      	ldr	r0, [pc, #176]	; (41b8 <pm_system_suspend+0x1c8>)
    4108:	f004 ffbc 	bl	9084 <z_spin_unlock_valid>
    410c:	2800      	cmp	r0, #0
    410e:	d03d      	beq.n	418c <pm_system_suspend+0x19c>
	__asm__ volatile(
    4110:	f386 8811 	msr	BASEPRI, r6
    4114:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4118:	f005 031f 	and.w	r3, r5, #31
    411c:	2101      	movs	r1, #1
    411e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4120:	096b      	lsrs	r3, r5, #5
    4122:	4a2d      	ldr	r2, [pc, #180]	; (41d8 <pm_system_suspend+0x1e8>)
    4124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4128:	f3bf 8f5b 	dmb	ish
    412c:	e853 2f00 	ldrex	r2, [r3]
    4130:	430a      	orrs	r2, r1
    4132:	e843 2000 	strex	r0, r2, [r3]
    4136:	2800      	cmp	r0, #0
    4138:	d1f8      	bne.n	412c <pm_system_suspend+0x13c>
    413a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    413e:	4b27      	ldr	r3, [pc, #156]	; (41dc <pm_system_suspend+0x1ec>)
    4140:	b14b      	cbz	r3, 4156 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    4142:	4b1c      	ldr	r3, [pc, #112]	; (41b4 <pm_system_suspend+0x1c4>)
    4144:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4148:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    414c:	7849      	ldrb	r1, [r1, #1]
    414e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    4152:	f008 fa8f 	bl	c674 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    4156:	f7ff feb1 	bl	3ebc <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    415a:	f005 031f 	and.w	r3, r5, #31
    415e:	2401      	movs	r4, #1
    4160:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4164:	096d      	lsrs	r5, r5, #5
    4166:	4a12      	ldr	r2, [pc, #72]	; (41b0 <pm_system_suspend+0x1c0>)
    4168:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    416c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    416e:	f3bf 8f5b 	dmb	ish
    4172:	e855 2f00 	ldrex	r2, [r5]
    4176:	401a      	ands	r2, r3
    4178:	e845 2100 	strex	r1, r2, [r5]
    417c:	2900      	cmp	r1, #0
    417e:	d1f8      	bne.n	4172 <pm_system_suspend+0x182>
    4180:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    4184:	f006 fbbc 	bl	a900 <k_sched_unlock>
	bool ret = true;
    4188:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    418a:	bd70      	pop	{r4, r5, r6, pc}
    418c:	4c0e      	ldr	r4, [pc, #56]	; (41c8 <pm_system_suspend+0x1d8>)
    418e:	23b9      	movs	r3, #185	; 0xb9
    4190:	4622      	mov	r2, r4
    4192:	4913      	ldr	r1, [pc, #76]	; (41e0 <pm_system_suspend+0x1f0>)
    4194:	480e      	ldr	r0, [pc, #56]	; (41d0 <pm_system_suspend+0x1e0>)
    4196:	f008 f871 	bl	c27c <assert_print>
    419a:	4907      	ldr	r1, [pc, #28]	; (41b8 <pm_system_suspend+0x1c8>)
    419c:	4811      	ldr	r0, [pc, #68]	; (41e4 <pm_system_suspend+0x1f4>)
    419e:	f008 f86d 	bl	c27c <assert_print>
    41a2:	21b9      	movs	r1, #185	; 0xb9
    41a4:	4620      	mov	r0, r4
    41a6:	f008 f862 	bl	c26e <assert_post_action>
    41aa:	e7b1      	b.n	4110 <pm_system_suspend+0x120>
    41ac:	20001228 	.word	0x20001228
    41b0:	20000780 	.word	0x20000780
    41b4:	20000774 	.word	0x20000774
    41b8:	20000768 	.word	0x20000768
    41bc:	2000076c 	.word	0x2000076c
    41c0:	000f423f 	.word	0x000f423f
    41c4:	000f4240 	.word	0x000f4240
    41c8:	0000dfbc 	.word	0x0000dfbc
    41cc:	0000e01c 	.word	0x0000e01c
    41d0:	0000d63c 	.word	0x0000d63c
    41d4:	0000e034 	.word	0x0000e034
    41d8:	20000784 	.word	0x20000784
    41dc:	0000c675 	.word	0x0000c675
    41e0:	0000dfec 	.word	0x0000dfec
    41e4:	0000e004 	.word	0x0000e004

000041e8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    41e8:	f3bf 8f5b 	dmb	ish
    41ec:	4b04      	ldr	r3, [pc, #16]	; (4200 <pm_policy_state_lock_is_active+0x18>)
    41ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    41f2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    41f6:	3800      	subs	r0, #0
    41f8:	bf18      	it	ne
    41fa:	2001      	movne	r0, #1
    41fc:	4770      	bx	lr
    41fe:	bf00      	nop
    4200:	20000788 	.word	0x20000788

00004204 <pm_policy_next_state>:
{
    4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4208:	b082      	sub	sp, #8
    420a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    420c:	a901      	add	r1, sp, #4
    420e:	f000 f843 	bl	4298 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4212:	1e44      	subs	r4, r0, #1
    4214:	b224      	sxth	r4, r4
    4216:	e007      	b.n	4228 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    4218:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    421c:	d032      	beq.n	4284 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    421e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    4220:	42b0      	cmp	r0, r6
    4222:	d92f      	bls.n	4284 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4224:	3c01      	subs	r4, #1
    4226:	b224      	sxth	r4, r4
    4228:	2c00      	cmp	r4, #0
    422a:	db2a      	blt.n	4282 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    422c:	9b01      	ldr	r3, [sp, #4]
    422e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4232:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    4236:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    423a:	f7ff ffd5 	bl	41e8 <pm_policy_state_lock_is_active>
    423e:	2800      	cmp	r0, #0
    4240:	d1f0      	bne.n	4224 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    4242:	6868      	ldr	r0, [r5, #4]
    4244:	0c41      	lsrs	r1, r0, #17
    4246:	03c0      	lsls	r0, r0, #15
    4248:	4f10      	ldr	r7, [pc, #64]	; (428c <pm_policy_next_state+0x88>)
    424a:	19c0      	adds	r0, r0, r7
    424c:	4a10      	ldr	r2, [pc, #64]	; (4290 <pm_policy_next_state+0x8c>)
    424e:	f04f 0300 	mov.w	r3, #0
    4252:	f141 0100 	adc.w	r1, r1, #0
    4256:	f7fc f935 	bl	4c4 <__aeabi_uldivmod>
    425a:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    425c:	68ab      	ldr	r3, [r5, #8]
    425e:	0c59      	lsrs	r1, r3, #17
    4260:	03db      	lsls	r3, r3, #15
    4262:	19d8      	adds	r0, r3, r7
    4264:	4a0a      	ldr	r2, [pc, #40]	; (4290 <pm_policy_next_state+0x8c>)
    4266:	f04f 0300 	mov.w	r3, #0
    426a:	f141 0100 	adc.w	r1, r1, #0
    426e:	f7fc f929 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4272:	4b08      	ldr	r3, [pc, #32]	; (4294 <pm_policy_next_state+0x90>)
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    427a:	d0cd      	beq.n	4218 <pm_policy_next_state+0x14>
    427c:	4283      	cmp	r3, r0
    427e:	d8cb      	bhi.n	4218 <pm_policy_next_state+0x14>
    4280:	e7d0      	b.n	4224 <pm_policy_next_state+0x20>
	return NULL;
    4282:	2500      	movs	r5, #0
}
    4284:	4628      	mov	r0, r5
    4286:	b002      	add	sp, #8
    4288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    428c:	000f423f 	.word	0x000f423f
    4290:	000f4240 	.word	0x000f4240
    4294:	200000a0 	.word	0x200000a0

00004298 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    4298:	b908      	cbnz	r0, 429e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    429a:	4b02      	ldr	r3, [pc, #8]	; (42a4 <pm_state_cpu_get_all+0xc>)
    429c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    429e:	2000      	movs	r0, #0
    42a0:	4770      	bx	lr
    42a2:	bf00      	nop
    42a4:	0000e5b8 	.word	0x0000e5b8

000042a8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    42a8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    42aa:	4802      	ldr	r0, [pc, #8]	; (42b4 <nrf_cc3xx_platform_abort_init+0xc>)
    42ac:	f007 fc5c 	bl	bb68 <nrf_cc3xx_platform_set_abort>
}
    42b0:	bd08      	pop	{r3, pc}
    42b2:	bf00      	nop
    42b4:	0000e5b8 	.word	0x0000e5b8

000042b8 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    42b8:	b1d0      	cbz	r0, 42f0 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    42ba:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    42bc:	6842      	ldr	r2, [r0, #4]
    42be:	2a04      	cmp	r2, #4
    42c0:	d005      	beq.n	42ce <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    42c2:	b1d2      	cbz	r2, 42fa <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    42c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    42c6:	f005 fa2d 	bl	9724 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    42ca:	2000      	movs	r0, #0
    }
}
    42cc:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    42ce:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    42d0:	2200      	movs	r2, #0
    42d2:	f3bf 8f5b 	dmb	ish
    42d6:	e853 1f00 	ldrex	r1, [r3]
    42da:	2901      	cmp	r1, #1
    42dc:	d103      	bne.n	42e6 <mutex_unlock_platform+0x2e>
    42de:	e843 2000 	strex	r0, r2, [r3]
    42e2:	2800      	cmp	r0, #0
    42e4:	d1f7      	bne.n	42d6 <mutex_unlock_platform+0x1e>
    42e6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    42ea:	d104      	bne.n	42f6 <mutex_unlock_platform+0x3e>
    42ec:	4610      	mov	r0, r2
    42ee:	e7ed      	b.n	42cc <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    42f0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    42f4:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    42f6:	4802      	ldr	r0, [pc, #8]	; (4300 <mutex_unlock_platform+0x48>)
    42f8:	e7e8      	b.n	42cc <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    42fa:	4802      	ldr	r0, [pc, #8]	; (4304 <mutex_unlock_platform+0x4c>)
    42fc:	e7e6      	b.n	42cc <mutex_unlock_platform+0x14>
    42fe:	bf00      	nop
    4300:	ffff8fe9 	.word	0xffff8fe9
    4304:	ffff8fea 	.word	0xffff8fea

00004308 <mutex_lock_platform>:
    if(mutex == NULL) {
    4308:	b320      	cbz	r0, 4354 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    430a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    430c:	6842      	ldr	r2, [r0, #4]
    430e:	2a04      	cmp	r2, #4
    4310:	d002      	beq.n	4318 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4312:	b992      	cbnz	r2, 433a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4314:	4811      	ldr	r0, [pc, #68]	; (435c <mutex_lock_platform+0x54>)
    4316:	e00f      	b.n	4338 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4318:	6803      	ldr	r3, [r0, #0]
    431a:	2201      	movs	r2, #1
    431c:	f3bf 8f5b 	dmb	ish
    4320:	e853 1f00 	ldrex	r1, [r3]
    4324:	2900      	cmp	r1, #0
    4326:	d103      	bne.n	4330 <mutex_lock_platform+0x28>
    4328:	e843 2000 	strex	r0, r2, [r3]
    432c:	2800      	cmp	r0, #0
    432e:	d1f7      	bne.n	4320 <mutex_lock_platform+0x18>
    4330:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4334:	d10c      	bne.n	4350 <mutex_lock_platform+0x48>
    4336:	2000      	movs	r0, #0
}
    4338:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    433a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    433c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4344:	f005 f8ce 	bl	94e4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4348:	2800      	cmp	r0, #0
    434a:	d0f5      	beq.n	4338 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    434c:	4804      	ldr	r0, [pc, #16]	; (4360 <mutex_lock_platform+0x58>)
    434e:	e7f3      	b.n	4338 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4350:	4803      	ldr	r0, [pc, #12]	; (4360 <mutex_lock_platform+0x58>)
    4352:	e7f1      	b.n	4338 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4354:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4358:	4770      	bx	lr
    435a:	bf00      	nop
    435c:	ffff8fea 	.word	0xffff8fea
    4360:	ffff8fe9 	.word	0xffff8fe9

00004364 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4364:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4366:	4604      	mov	r4, r0
    4368:	b188      	cbz	r0, 438e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    436a:	6863      	ldr	r3, [r4, #4]
    436c:	2b04      	cmp	r3, #4
    436e:	d00d      	beq.n	438c <mutex_free_platform+0x28>
    4370:	2b08      	cmp	r3, #8
    4372:	d00b      	beq.n	438c <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4374:	b153      	cbz	r3, 438c <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4376:	f013 0f02 	tst.w	r3, #2
    437a:	d00d      	beq.n	4398 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    437c:	4621      	mov	r1, r4
    437e:	4809      	ldr	r0, [pc, #36]	; (43a4 <mutex_free_platform+0x40>)
    4380:	f004 fdfa 	bl	8f78 <k_mem_slab_free>
        mutex->mutex = NULL;
    4384:	2300      	movs	r3, #0
    4386:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4388:	2300      	movs	r3, #0
    438a:	6063      	str	r3, [r4, #4]
}
    438c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    438e:	4b06      	ldr	r3, [pc, #24]	; (43a8 <mutex_free_platform+0x44>)
    4390:	685b      	ldr	r3, [r3, #4]
    4392:	4806      	ldr	r0, [pc, #24]	; (43ac <mutex_free_platform+0x48>)
    4394:	4798      	blx	r3
    4396:	e7e8      	b.n	436a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4398:	2214      	movs	r2, #20
    439a:	2100      	movs	r1, #0
    439c:	6820      	ldr	r0, [r4, #0]
    439e:	f008 f934 	bl	c60a <memset>
    43a2:	e7f1      	b.n	4388 <mutex_free_platform+0x24>
    43a4:	200007a4 	.word	0x200007a4
    43a8:	2000017c 	.word	0x2000017c
    43ac:	0000e5c0 	.word	0x0000e5c0

000043b0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    43b0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    43b2:	4604      	mov	r4, r0
    43b4:	b178      	cbz	r0, 43d6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    43b6:	6863      	ldr	r3, [r4, #4]
    43b8:	2b04      	cmp	r3, #4
    43ba:	d00b      	beq.n	43d4 <mutex_init_platform+0x24>
    43bc:	2b08      	cmp	r3, #8
    43be:	d009      	beq.n	43d4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    43c0:	b90b      	cbnz	r3, 43c6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    43c2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    43c4:	b163      	cbz	r3, 43e0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    43c6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    43c8:	f008 fe77 	bl	d0ba <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    43cc:	6863      	ldr	r3, [r4, #4]
    43ce:	f043 0301 	orr.w	r3, r3, #1
    43d2:	6063      	str	r3, [r4, #4]
}
    43d4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    43d6:	4b0f      	ldr	r3, [pc, #60]	; (4414 <mutex_init_platform+0x64>)
    43d8:	685b      	ldr	r3, [r3, #4]
    43da:	480f      	ldr	r0, [pc, #60]	; (4418 <mutex_init_platform+0x68>)
    43dc:	4798      	blx	r3
    43de:	e7ea      	b.n	43b6 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    43e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43e8:	4621      	mov	r1, r4
    43ea:	480c      	ldr	r0, [pc, #48]	; (441c <mutex_init_platform+0x6c>)
    43ec:	f004 fd4e 	bl	8e8c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    43f0:	b908      	cbnz	r0, 43f6 <mutex_init_platform+0x46>
    43f2:	6823      	ldr	r3, [r4, #0]
    43f4:	b91b      	cbnz	r3, 43fe <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    43f6:	4b07      	ldr	r3, [pc, #28]	; (4414 <mutex_init_platform+0x64>)
    43f8:	685b      	ldr	r3, [r3, #4]
    43fa:	4809      	ldr	r0, [pc, #36]	; (4420 <mutex_init_platform+0x70>)
    43fc:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    43fe:	2214      	movs	r2, #20
    4400:	2100      	movs	r1, #0
    4402:	6820      	ldr	r0, [r4, #0]
    4404:	f008 f901 	bl	c60a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4408:	6863      	ldr	r3, [r4, #4]
    440a:	f043 0302 	orr.w	r3, r3, #2
    440e:	6063      	str	r3, [r4, #4]
    4410:	e7d9      	b.n	43c6 <mutex_init_platform+0x16>
    4412:	bf00      	nop
    4414:	2000017c 	.word	0x2000017c
    4418:	0000e5c0 	.word	0x0000e5c0
    441c:	200007a4 	.word	0x200007a4
    4420:	0000e5e8 	.word	0x0000e5e8

00004424 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4424:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4426:	2340      	movs	r3, #64	; 0x40
    4428:	2214      	movs	r2, #20
    442a:	4904      	ldr	r1, [pc, #16]	; (443c <nrf_cc3xx_platform_mutex_init+0x18>)
    442c:	4804      	ldr	r0, [pc, #16]	; (4440 <nrf_cc3xx_platform_mutex_init+0x1c>)
    442e:	f008 fdf0 	bl	d012 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4432:	4904      	ldr	r1, [pc, #16]	; (4444 <nrf_cc3xx_platform_mutex_init+0x20>)
    4434:	4804      	ldr	r0, [pc, #16]	; (4448 <nrf_cc3xx_platform_mutex_init+0x24>)
    4436:	f007 fbf7 	bl	bc28 <nrf_cc3xx_platform_set_mutexes>
}
    443a:	bd08      	pop	{r3, pc}
    443c:	200007c4 	.word	0x200007c4
    4440:	200007a4 	.word	0x200007a4
    4444:	0000e628 	.word	0x0000e628
    4448:	0000e618 	.word	0x0000e618

0000444c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    444c:	4901      	ldr	r1, [pc, #4]	; (4454 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    444e:	2210      	movs	r2, #16
	str	r2, [r1]
    4450:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4452:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4454:	e000ed10 	.word	0xe000ed10

00004458 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4458:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    445a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    445c:	f380 8811 	msr	BASEPRI, r0
	isb
    4460:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4464:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4468:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    446a:	b662      	cpsie	i
	isb
    446c:	f3bf 8f6f 	isb	sy

	bx	lr
    4470:	4770      	bx	lr
    4472:	bf00      	nop

00004474 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4474:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4476:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4478:	f381 8811 	msr	BASEPRI, r1

	wfe
    447c:	bf20      	wfe

	msr	BASEPRI, r0
    447e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4482:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4484:	4770      	bx	lr
    4486:	bf00      	nop

00004488 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4488:	b570      	push	{r4, r5, r6, lr}
    448a:	b086      	sub	sp, #24
    448c:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    448e:	4e1e      	ldr	r6, [pc, #120]	; (4508 <esf_dump+0x80>)
    4490:	6883      	ldr	r3, [r0, #8]
    4492:	9305      	str	r3, [sp, #20]
    4494:	6843      	ldr	r3, [r0, #4]
    4496:	9304      	str	r3, [sp, #16]
    4498:	6803      	ldr	r3, [r0, #0]
    449a:	9303      	str	r3, [sp, #12]
    449c:	4b1b      	ldr	r3, [pc, #108]	; (450c <esf_dump+0x84>)
    449e:	9302      	str	r3, [sp, #8]
    44a0:	2400      	movs	r4, #0
    44a2:	9401      	str	r4, [sp, #4]
    44a4:	9400      	str	r4, [sp, #0]
    44a6:	4623      	mov	r3, r4
    44a8:	2201      	movs	r2, #1
    44aa:	4631      	mov	r1, r6
    44ac:	4620      	mov	r0, r4
    44ae:	f007 ff99 	bl	c3e4 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    44b2:	696b      	ldr	r3, [r5, #20]
    44b4:	9305      	str	r3, [sp, #20]
    44b6:	692b      	ldr	r3, [r5, #16]
    44b8:	9304      	str	r3, [sp, #16]
    44ba:	68eb      	ldr	r3, [r5, #12]
    44bc:	9303      	str	r3, [sp, #12]
    44be:	4b14      	ldr	r3, [pc, #80]	; (4510 <esf_dump+0x88>)
    44c0:	9302      	str	r3, [sp, #8]
    44c2:	9401      	str	r4, [sp, #4]
    44c4:	9400      	str	r4, [sp, #0]
    44c6:	4623      	mov	r3, r4
    44c8:	2201      	movs	r2, #1
    44ca:	4631      	mov	r1, r6
    44cc:	4620      	mov	r0, r4
    44ce:	f007 ff89 	bl	c3e4 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    44d2:	69eb      	ldr	r3, [r5, #28]
    44d4:	9303      	str	r3, [sp, #12]
    44d6:	4b0f      	ldr	r3, [pc, #60]	; (4514 <esf_dump+0x8c>)
    44d8:	9302      	str	r3, [sp, #8]
    44da:	9401      	str	r4, [sp, #4]
    44dc:	9400      	str	r4, [sp, #0]
    44de:	4623      	mov	r3, r4
    44e0:	2201      	movs	r2, #1
    44e2:	4631      	mov	r1, r6
    44e4:	4620      	mov	r0, r4
    44e6:	f007 ff7d 	bl	c3e4 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    44ea:	69ab      	ldr	r3, [r5, #24]
    44ec:	9303      	str	r3, [sp, #12]
    44ee:	4b0a      	ldr	r3, [pc, #40]	; (4518 <esf_dump+0x90>)
    44f0:	9302      	str	r3, [sp, #8]
    44f2:	9401      	str	r4, [sp, #4]
    44f4:	9400      	str	r4, [sp, #0]
    44f6:	4623      	mov	r3, r4
    44f8:	2201      	movs	r2, #1
    44fa:	4631      	mov	r1, r6
    44fc:	4620      	mov	r0, r4
    44fe:	f007 ff71 	bl	c3e4 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    4502:	b006      	add	sp, #24
    4504:	bd70      	pop	{r4, r5, r6, pc}
    4506:	bf00      	nop
    4508:	0000d494 	.word	0x0000d494
    450c:	0000e63c 	.word	0x0000e63c
    4510:	0000e66c 	.word	0x0000e66c
    4514:	0000e69c 	.word	0x0000e69c
    4518:	0000e6ac 	.word	0x0000e6ac

0000451c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    451c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    451e:	2800      	cmp	r0, #0
    4520:	db07      	blt.n	4532 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4522:	f000 021f 	and.w	r2, r0, #31
    4526:	0940      	lsrs	r0, r0, #5
    4528:	2301      	movs	r3, #1
    452a:	4093      	lsls	r3, r2
    452c:	4a01      	ldr	r2, [pc, #4]	; (4534 <arch_irq_enable+0x18>)
    452e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    4532:	4770      	bx	lr
    4534:	e000e100 	.word	0xe000e100

00004538 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4538:	0942      	lsrs	r2, r0, #5
    453a:	4b05      	ldr	r3, [pc, #20]	; (4550 <arch_irq_is_enabled+0x18>)
    453c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4540:	f000 001f 	and.w	r0, r0, #31
    4544:	2301      	movs	r3, #1
    4546:	fa03 f000 	lsl.w	r0, r3, r0
}
    454a:	4010      	ands	r0, r2
    454c:	4770      	bx	lr
    454e:	bf00      	nop
    4550:	e000e100 	.word	0xe000e100

00004554 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    4554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4556:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4558:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    455a:	2d07      	cmp	r5, #7
    455c:	d80b      	bhi.n	4576 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    455e:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4560:	2800      	cmp	r0, #0
    4562:	db1b      	blt.n	459c <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4564:	016d      	lsls	r5, r5, #5
    4566:	b2ed      	uxtb	r5, r5
    4568:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    456c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4570:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    4574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4576:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4578:	4f0c      	ldr	r7, [pc, #48]	; (45ac <z_arm_irq_priority_set+0x58>)
    457a:	2357      	movs	r3, #87	; 0x57
    457c:	463a      	mov	r2, r7
    457e:	490c      	ldr	r1, [pc, #48]	; (45b0 <z_arm_irq_priority_set+0x5c>)
    4580:	480c      	ldr	r0, [pc, #48]	; (45b4 <z_arm_irq_priority_set+0x60>)
    4582:	f007 fe7b 	bl	c27c <assert_print>
    4586:	2307      	movs	r3, #7
    4588:	4622      	mov	r2, r4
    458a:	4631      	mov	r1, r6
    458c:	480a      	ldr	r0, [pc, #40]	; (45b8 <z_arm_irq_priority_set+0x64>)
    458e:	f007 fe75 	bl	c27c <assert_print>
    4592:	2157      	movs	r1, #87	; 0x57
    4594:	4638      	mov	r0, r7
    4596:	f007 fe6a 	bl	c26e <assert_post_action>
    459a:	e7e0      	b.n	455e <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    459c:	f000 000f 	and.w	r0, r0, #15
    45a0:	016d      	lsls	r5, r5, #5
    45a2:	b2ed      	uxtb	r5, r5
    45a4:	4b05      	ldr	r3, [pc, #20]	; (45bc <z_arm_irq_priority_set+0x68>)
    45a6:	541d      	strb	r5, [r3, r0]
}
    45a8:	e7e4      	b.n	4574 <z_arm_irq_priority_set+0x20>
    45aa:	bf00      	nop
    45ac:	0000e6dc 	.word	0x0000e6dc
    45b0:	0000e714 	.word	0x0000e714
    45b4:	0000d63c 	.word	0x0000d63c
    45b8:	0000e730 	.word	0x0000e730
    45bc:	e000ed14 	.word	0xe000ed14

000045c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    45c0:	bf30      	wfi
    b z_SysNmiOnReset
    45c2:	f7ff bffd 	b.w	45c0 <z_SysNmiOnReset>
    45c6:	bf00      	nop

000045c8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    45c8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    45ca:	4b0b      	ldr	r3, [pc, #44]	; (45f8 <z_arm_prep_c+0x30>)
    45cc:	4a0b      	ldr	r2, [pc, #44]	; (45fc <z_arm_prep_c+0x34>)
    45ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    45d2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    45d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    45dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    45e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    45e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    45e8:	f004 fb7c 	bl	8ce4 <z_bss_zero>
	z_data_copy();
    45ec:	f006 fd9a 	bl	b124 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    45f0:	f000 fc6a 	bl	4ec8 <z_arm_interrupt_init>
	z_cstart();
    45f4:	f004 fbd4 	bl	8da0 <z_cstart>
    45f8:	e000ed00 	.word	0xe000ed00
    45fc:	00000000 	.word	0x00000000

00004600 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4600:	4a0a      	ldr	r2, [pc, #40]	; (462c <arch_swap+0x2c>)
    4602:	6893      	ldr	r3, [r2, #8]
    4604:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4608:	4909      	ldr	r1, [pc, #36]	; (4630 <arch_swap+0x30>)
    460a:	6809      	ldr	r1, [r1, #0]
    460c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4610:	4908      	ldr	r1, [pc, #32]	; (4634 <arch_swap+0x34>)
    4612:	684b      	ldr	r3, [r1, #4]
    4614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4618:	604b      	str	r3, [r1, #4]
    461a:	2300      	movs	r3, #0
    461c:	f383 8811 	msr	BASEPRI, r3
    4620:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4624:	6893      	ldr	r3, [r2, #8]
}
    4626:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    462a:	4770      	bx	lr
    462c:	20001228 	.word	0x20001228
    4630:	0000f3d0 	.word	0x0000f3d0
    4634:	e000ed00 	.word	0xe000ed00

00004638 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4638:	4913      	ldr	r1, [pc, #76]	; (4688 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    463a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    463c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4640:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4642:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4646:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    464a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    464c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4650:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4654:	4f0d      	ldr	r7, [pc, #52]	; (468c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4656:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    465a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    465c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    465e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4660:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4664:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4666:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    466a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    466e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4670:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4672:	f000 fcd3 	bl	501c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4676:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    467a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    467e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4682:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4686:	4770      	bx	lr
    ldr r1, =_kernel
    4688:	20001228 	.word	0x20001228
    ldr v4, =_SCS_ICSR
    468c:	e000ed04 	.word	0xe000ed04

00004690 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4690:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4694:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4696:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    469a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    469e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    46a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    46a4:	2902      	cmp	r1, #2
    beq _oops
    46a6:	d0ff      	beq.n	46a8 <_oops>

000046a8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    46a8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    46aa:	f007 feb6 	bl	c41a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    46ae:	bd01      	pop	{r0, pc}

000046b0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    46b0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    46b2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    46b6:	490e      	ldr	r1, [pc, #56]	; (46f0 <arch_new_thread+0x40>)
    46b8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    46bc:	f021 0101 	bic.w	r1, r1, #1
    46c0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    46c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    46c8:	9b01      	ldr	r3, [sp, #4]
    46ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    46ce:	9b02      	ldr	r3, [sp, #8]
    46d0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    46d4:	9b03      	ldr	r3, [sp, #12]
    46d6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    46da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    46de:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    46e2:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    46e4:	2300      	movs	r3, #0
    46e6:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    46ea:	bc10      	pop	{r4}
    46ec:	4770      	bx	lr
    46ee:	bf00      	nop
    46f0:	0000c0c7 	.word	0x0000c0c7

000046f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    46f4:	4b12      	ldr	r3, [pc, #72]	; (4740 <z_check_thread_stack_fail+0x4c>)
    46f6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    46f8:	b302      	cbz	r2, 473c <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    46fa:	f110 0f16 	cmn.w	r0, #22
    46fe:	d011      	beq.n	4724 <z_check_thread_stack_fail+0x30>
    4700:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4704:	f1a3 0c20 	sub.w	ip, r3, #32
    4708:	4584      	cmp	ip, r0
    470a:	d805      	bhi.n	4718 <z_check_thread_stack_fail+0x24>
    470c:	4283      	cmp	r3, r0
    470e:	d905      	bls.n	471c <z_check_thread_stack_fail+0x28>
    4710:	428b      	cmp	r3, r1
    4712:	d805      	bhi.n	4720 <z_check_thread_stack_fail+0x2c>
    4714:	2100      	movs	r1, #0
    4716:	e00b      	b.n	4730 <z_check_thread_stack_fail+0x3c>
    4718:	2100      	movs	r1, #0
    471a:	e009      	b.n	4730 <z_check_thread_stack_fail+0x3c>
    471c:	2100      	movs	r1, #0
    471e:	e007      	b.n	4730 <z_check_thread_stack_fail+0x3c>
    4720:	2101      	movs	r1, #1
    4722:	e005      	b.n	4730 <z_check_thread_stack_fail+0x3c>
    4724:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4728:	428b      	cmp	r3, r1
    472a:	bf94      	ite	ls
    472c:	2100      	movls	r1, #0
    472e:	2101      	movhi	r1, #1
    4730:	b909      	cbnz	r1, 4736 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4732:	2000      	movs	r0, #0
}
    4734:	4770      	bx	lr
		return thread->stack_info.start;
    4736:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    473a:	4770      	bx	lr
		return 0;
    473c:	2000      	movs	r0, #0
    473e:	4770      	bx	lr
    4740:	20001228 	.word	0x20001228

00004744 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4744:	b508      	push	{r3, lr}
    4746:	460d      	mov	r5, r1
    4748:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    474a:	4b08      	ldr	r3, [pc, #32]	; (476c <arch_switch_to_main_thread+0x28>)
    474c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    474e:	f000 fc65 	bl	501c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4752:	4620      	mov	r0, r4
    4754:	f385 8809 	msr	PSP, r5
    4758:	2100      	movs	r1, #0
    475a:	b663      	cpsie	if
    475c:	f381 8811 	msr	BASEPRI, r1
    4760:	f3bf 8f6f 	isb	sy
    4764:	2200      	movs	r2, #0
    4766:	2300      	movs	r3, #0
    4768:	f007 fcad 	bl	c0c6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    476c:	20001228 	.word	0x20001228

00004770 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4770:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4772:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4774:	4a0b      	ldr	r2, [pc, #44]	; (47a4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4776:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4778:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    477a:	bf1e      	ittt	ne
	movne	r1, #0
    477c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    477e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4780:	f008 fc7f 	blne	d082 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4784:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4786:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    478a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    478e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4792:	4905      	ldr	r1, [pc, #20]	; (47a8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4794:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4796:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4798:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    479a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    479e:	4903      	ldr	r1, [pc, #12]	; (47ac <_isr_wrapper+0x3c>)
	bx r1
    47a0:	4708      	bx	r1
    47a2:	0000      	.short	0x0000
	ldr r2, =_kernel
    47a4:	20001228 	.word	0x20001228
	ldr r1, =_sw_isr_table
    47a8:	0000d2e4 	.word	0x0000d2e4
	ldr r1, =z_arm_int_exit
    47ac:	000047b1 	.word	0x000047b1

000047b0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    47b0:	4b04      	ldr	r3, [pc, #16]	; (47c4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    47b2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    47b4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    47b6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    47b8:	d003      	beq.n	47c2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    47ba:	4903      	ldr	r1, [pc, #12]	; (47c8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    47bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    47c0:	600a      	str	r2, [r1, #0]

000047c2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    47c2:	4770      	bx	lr
	ldr r3, =_kernel
    47c4:	20001228 	.word	0x20001228
	ldr r1, =_SCS_ICSR
    47c8:	e000ed04 	.word	0xe000ed04

000047cc <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b084      	sub	sp, #16
    47d0:	4605      	mov	r5, r0
    47d2:	460e      	mov	r6, r1
    47d4:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    47d6:	4b47      	ldr	r3, [pc, #284]	; (48f4 <bus_fault+0x128>)
    47d8:	9302      	str	r3, [sp, #8]
    47da:	2000      	movs	r0, #0
    47dc:	9001      	str	r0, [sp, #4]
    47de:	9000      	str	r0, [sp, #0]
    47e0:	4603      	mov	r3, r0
    47e2:	2201      	movs	r2, #1
    47e4:	4944      	ldr	r1, [pc, #272]	; (48f8 <bus_fault+0x12c>)
    47e6:	f007 fe2c 	bl	c442 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    47ea:	4b44      	ldr	r3, [pc, #272]	; (48fc <bus_fault+0x130>)
    47ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    47f2:	d125      	bne.n	4840 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    47f4:	4b41      	ldr	r3, [pc, #260]	; (48fc <bus_fault+0x130>)
    47f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47f8:	f413 6f00 	tst.w	r3, #2048	; 0x800
    47fc:	d12b      	bne.n	4856 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    47fe:	4b3f      	ldr	r3, [pc, #252]	; (48fc <bus_fault+0x130>)
    4800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4802:	f413 7f00 	tst.w	r3, #512	; 0x200
    4806:	d131      	bne.n	486c <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4808:	4b3c      	ldr	r3, [pc, #240]	; (48fc <bus_fault+0x130>)
    480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    480c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4810:	d14f      	bne.n	48b2 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4812:	4b3a      	ldr	r3, [pc, #232]	; (48fc <bus_fault+0x130>)
    4814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4816:	f413 7f80 	tst.w	r3, #256	; 0x100
    481a:	d155      	bne.n	48c8 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    481c:	4b37      	ldr	r3, [pc, #220]	; (48fc <bus_fault+0x130>)
    481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4820:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4824:	d15b      	bne.n	48de <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4826:	4a35      	ldr	r2, [pc, #212]	; (48fc <bus_fault+0x130>)
    4828:	6a93      	ldr	r3, [r2, #40]	; 0x28
    482a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    482e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4830:	2101      	movs	r1, #1
    4832:	4628      	mov	r0, r5
    4834:	f007 fe03 	bl	c43e <memory_fault_recoverable>
    4838:	7020      	strb	r0, [r4, #0]

	return reason;
}
    483a:	2000      	movs	r0, #0
    483c:	b004      	add	sp, #16
    483e:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    4840:	4b2f      	ldr	r3, [pc, #188]	; (4900 <bus_fault+0x134>)
    4842:	9302      	str	r3, [sp, #8]
    4844:	2000      	movs	r0, #0
    4846:	9001      	str	r0, [sp, #4]
    4848:	9000      	str	r0, [sp, #0]
    484a:	4603      	mov	r3, r0
    484c:	2201      	movs	r2, #1
    484e:	492a      	ldr	r1, [pc, #168]	; (48f8 <bus_fault+0x12c>)
    4850:	f007 fdf7 	bl	c442 <z_log_msg2_runtime_create>
    4854:	e7ce      	b.n	47f4 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    4856:	4b2b      	ldr	r3, [pc, #172]	; (4904 <bus_fault+0x138>)
    4858:	9302      	str	r3, [sp, #8]
    485a:	2000      	movs	r0, #0
    485c:	9001      	str	r0, [sp, #4]
    485e:	9000      	str	r0, [sp, #0]
    4860:	4603      	mov	r3, r0
    4862:	2201      	movs	r2, #1
    4864:	4924      	ldr	r1, [pc, #144]	; (48f8 <bus_fault+0x12c>)
    4866:	f007 fdec 	bl	c442 <z_log_msg2_runtime_create>
    486a:	e7c8      	b.n	47fe <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    486c:	4b26      	ldr	r3, [pc, #152]	; (4908 <bus_fault+0x13c>)
    486e:	9302      	str	r3, [sp, #8]
    4870:	2000      	movs	r0, #0
    4872:	9001      	str	r0, [sp, #4]
    4874:	9000      	str	r0, [sp, #0]
    4876:	4603      	mov	r3, r0
    4878:	2201      	movs	r2, #1
    487a:	491f      	ldr	r1, [pc, #124]	; (48f8 <bus_fault+0x12c>)
    487c:	f007 fde1 	bl	c442 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    4880:	4b1e      	ldr	r3, [pc, #120]	; (48fc <bus_fault+0x130>)
    4882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4886:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    488a:	d0bd      	beq.n	4808 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    488c:	9203      	str	r2, [sp, #12]
    488e:	4b1f      	ldr	r3, [pc, #124]	; (490c <bus_fault+0x140>)
    4890:	9302      	str	r3, [sp, #8]
    4892:	2000      	movs	r0, #0
    4894:	9001      	str	r0, [sp, #4]
    4896:	9000      	str	r0, [sp, #0]
    4898:	4603      	mov	r3, r0
    489a:	2201      	movs	r2, #1
    489c:	4916      	ldr	r1, [pc, #88]	; (48f8 <bus_fault+0x12c>)
    489e:	f007 fdd0 	bl	c442 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    48a2:	2e00      	cmp	r6, #0
    48a4:	d0b0      	beq.n	4808 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    48a6:	4a15      	ldr	r2, [pc, #84]	; (48fc <bus_fault+0x130>)
    48a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    48ae:	6293      	str	r3, [r2, #40]	; 0x28
    48b0:	e7aa      	b.n	4808 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    48b2:	4b17      	ldr	r3, [pc, #92]	; (4910 <bus_fault+0x144>)
    48b4:	9302      	str	r3, [sp, #8]
    48b6:	2000      	movs	r0, #0
    48b8:	9001      	str	r0, [sp, #4]
    48ba:	9000      	str	r0, [sp, #0]
    48bc:	4603      	mov	r3, r0
    48be:	2201      	movs	r2, #1
    48c0:	490d      	ldr	r1, [pc, #52]	; (48f8 <bus_fault+0x12c>)
    48c2:	f007 fdbe 	bl	c442 <z_log_msg2_runtime_create>
    48c6:	e7a4      	b.n	4812 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    48c8:	4b12      	ldr	r3, [pc, #72]	; (4914 <bus_fault+0x148>)
    48ca:	9302      	str	r3, [sp, #8]
    48cc:	2000      	movs	r0, #0
    48ce:	9001      	str	r0, [sp, #4]
    48d0:	9000      	str	r0, [sp, #0]
    48d2:	4603      	mov	r3, r0
    48d4:	2201      	movs	r2, #1
    48d6:	4908      	ldr	r1, [pc, #32]	; (48f8 <bus_fault+0x12c>)
    48d8:	f007 fdb3 	bl	c442 <z_log_msg2_runtime_create>
    48dc:	e7a3      	b.n	4826 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48de:	4b0e      	ldr	r3, [pc, #56]	; (4918 <bus_fault+0x14c>)
    48e0:	9302      	str	r3, [sp, #8]
    48e2:	2000      	movs	r0, #0
    48e4:	9001      	str	r0, [sp, #4]
    48e6:	9000      	str	r0, [sp, #0]
    48e8:	4603      	mov	r3, r0
    48ea:	2201      	movs	r2, #1
    48ec:	4902      	ldr	r1, [pc, #8]	; (48f8 <bus_fault+0x12c>)
    48ee:	f007 fda8 	bl	c442 <z_log_msg2_runtime_create>
    48f2:	e798      	b.n	4826 <bus_fault+0x5a>
    48f4:	0000e770 	.word	0x0000e770
    48f8:	0000d494 	.word	0x0000d494
    48fc:	e000ed00 	.word	0xe000ed00
    4900:	0000e788 	.word	0x0000e788
    4904:	0000e79c 	.word	0x0000e79c
    4908:	0000e7b0 	.word	0x0000e7b0
    490c:	0000e7cc 	.word	0x0000e7cc
    4910:	0000e7e4 	.word	0x0000e7e4
    4914:	0000e800 	.word	0x0000e800
    4918:	0000e818 	.word	0x0000e818

0000491c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    491c:	b500      	push	{lr}
    491e:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4920:	4b3a      	ldr	r3, [pc, #232]	; (4a0c <usage_fault+0xf0>)
    4922:	9302      	str	r3, [sp, #8]
    4924:	2000      	movs	r0, #0
    4926:	9001      	str	r0, [sp, #4]
    4928:	9000      	str	r0, [sp, #0]
    492a:	4603      	mov	r3, r0
    492c:	2201      	movs	r2, #1
    492e:	4938      	ldr	r1, [pc, #224]	; (4a10 <usage_fault+0xf4>)
    4930:	f007 fd87 	bl	c442 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4934:	4b37      	ldr	r3, [pc, #220]	; (4a14 <usage_fault+0xf8>)
    4936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4938:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    493c:	d123      	bne.n	4986 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    493e:	4b35      	ldr	r3, [pc, #212]	; (4a14 <usage_fault+0xf8>)
    4940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4942:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    4946:	d129      	bne.n	499c <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4948:	4b32      	ldr	r3, [pc, #200]	; (4a14 <usage_fault+0xf8>)
    494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    494c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    4950:	d12f      	bne.n	49b2 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4952:	4b30      	ldr	r3, [pc, #192]	; (4a14 <usage_fault+0xf8>)
    4954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4956:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    495a:	d135      	bne.n	49c8 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    495c:	4b2d      	ldr	r3, [pc, #180]	; (4a14 <usage_fault+0xf8>)
    495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4960:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    4964:	d13b      	bne.n	49de <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4966:	4b2b      	ldr	r3, [pc, #172]	; (4a14 <usage_fault+0xf8>)
    4968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    496a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    496e:	d141      	bne.n	49f4 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4970:	4a28      	ldr	r2, [pc, #160]	; (4a14 <usage_fault+0xf8>)
    4972:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4974:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4978:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    497c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    497e:	2000      	movs	r0, #0
    4980:	b005      	add	sp, #20
    4982:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    4986:	4b24      	ldr	r3, [pc, #144]	; (4a18 <usage_fault+0xfc>)
    4988:	9302      	str	r3, [sp, #8]
    498a:	2000      	movs	r0, #0
    498c:	9001      	str	r0, [sp, #4]
    498e:	9000      	str	r0, [sp, #0]
    4990:	4603      	mov	r3, r0
    4992:	2201      	movs	r2, #1
    4994:	491e      	ldr	r1, [pc, #120]	; (4a10 <usage_fault+0xf4>)
    4996:	f007 fd54 	bl	c442 <z_log_msg2_runtime_create>
    499a:	e7d0      	b.n	493e <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    499c:	4b1f      	ldr	r3, [pc, #124]	; (4a1c <usage_fault+0x100>)
    499e:	9302      	str	r3, [sp, #8]
    49a0:	2000      	movs	r0, #0
    49a2:	9001      	str	r0, [sp, #4]
    49a4:	9000      	str	r0, [sp, #0]
    49a6:	4603      	mov	r3, r0
    49a8:	2201      	movs	r2, #1
    49aa:	4919      	ldr	r1, [pc, #100]	; (4a10 <usage_fault+0xf4>)
    49ac:	f007 fd49 	bl	c442 <z_log_msg2_runtime_create>
    49b0:	e7ca      	b.n	4948 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    49b2:	4b1b      	ldr	r3, [pc, #108]	; (4a20 <usage_fault+0x104>)
    49b4:	9302      	str	r3, [sp, #8]
    49b6:	2000      	movs	r0, #0
    49b8:	9001      	str	r0, [sp, #4]
    49ba:	9000      	str	r0, [sp, #0]
    49bc:	4603      	mov	r3, r0
    49be:	2201      	movs	r2, #1
    49c0:	4913      	ldr	r1, [pc, #76]	; (4a10 <usage_fault+0xf4>)
    49c2:	f007 fd3e 	bl	c442 <z_log_msg2_runtime_create>
    49c6:	e7c4      	b.n	4952 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    49c8:	4b16      	ldr	r3, [pc, #88]	; (4a24 <usage_fault+0x108>)
    49ca:	9302      	str	r3, [sp, #8]
    49cc:	2000      	movs	r0, #0
    49ce:	9001      	str	r0, [sp, #4]
    49d0:	9000      	str	r0, [sp, #0]
    49d2:	4603      	mov	r3, r0
    49d4:	2201      	movs	r2, #1
    49d6:	490e      	ldr	r1, [pc, #56]	; (4a10 <usage_fault+0xf4>)
    49d8:	f007 fd33 	bl	c442 <z_log_msg2_runtime_create>
    49dc:	e7be      	b.n	495c <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    49de:	4b12      	ldr	r3, [pc, #72]	; (4a28 <usage_fault+0x10c>)
    49e0:	9302      	str	r3, [sp, #8]
    49e2:	2000      	movs	r0, #0
    49e4:	9001      	str	r0, [sp, #4]
    49e6:	9000      	str	r0, [sp, #0]
    49e8:	4603      	mov	r3, r0
    49ea:	2201      	movs	r2, #1
    49ec:	4908      	ldr	r1, [pc, #32]	; (4a10 <usage_fault+0xf4>)
    49ee:	f007 fd28 	bl	c442 <z_log_msg2_runtime_create>
    49f2:	e7b8      	b.n	4966 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    49f4:	4b0d      	ldr	r3, [pc, #52]	; (4a2c <usage_fault+0x110>)
    49f6:	9302      	str	r3, [sp, #8]
    49f8:	2000      	movs	r0, #0
    49fa:	9001      	str	r0, [sp, #4]
    49fc:	9000      	str	r0, [sp, #0]
    49fe:	4603      	mov	r3, r0
    4a00:	2201      	movs	r2, #1
    4a02:	4903      	ldr	r1, [pc, #12]	; (4a10 <usage_fault+0xf4>)
    4a04:	f007 fd1d 	bl	c442 <z_log_msg2_runtime_create>
    4a08:	e7b2      	b.n	4970 <usage_fault+0x54>
    4a0a:	bf00      	nop
    4a0c:	0000e848 	.word	0x0000e848
    4a10:	0000d494 	.word	0x0000d494
    4a14:	e000ed00 	.word	0xe000ed00
    4a18:	0000e860 	.word	0x0000e860
    4a1c:	0000e874 	.word	0x0000e874
    4a20:	0000e890 	.word	0x0000e890
    4a24:	0000e8b0 	.word	0x0000e8b0
    4a28:	0000e8d8 	.word	0x0000e8d8
    4a2c:	0000e8f4 	.word	0x0000e8f4

00004a30 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    4a30:	b500      	push	{lr}
    4a32:	b085      	sub	sp, #20
	*recoverable = false;
    4a34:	2000      	movs	r0, #0
    4a36:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    4a38:	4b05      	ldr	r3, [pc, #20]	; (4a50 <debug_monitor+0x20>)
    4a3a:	9302      	str	r3, [sp, #8]
    4a3c:	9001      	str	r0, [sp, #4]
    4a3e:	9000      	str	r0, [sp, #0]
    4a40:	4603      	mov	r3, r0
    4a42:	2201      	movs	r2, #1
    4a44:	4903      	ldr	r1, [pc, #12]	; (4a54 <debug_monitor+0x24>)
    4a46:	f007 fcfc 	bl	c442 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4a4a:	b005      	add	sp, #20
    4a4c:	f85d fb04 	ldr.w	pc, [sp], #4
    4a50:	0000e920 	.word	0x0000e920
    4a54:	0000d494 	.word	0x0000d494

00004a58 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4a58:	b500      	push	{lr}
    4a5a:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4a5c:	290f      	cmp	r1, #15
    4a5e:	dc10      	bgt.n	4a82 <reserved_exception+0x2a>
    4a60:	4b09      	ldr	r3, [pc, #36]	; (4a88 <reserved_exception+0x30>)
    4a62:	3910      	subs	r1, #16
    4a64:	9104      	str	r1, [sp, #16]
    4a66:	9303      	str	r3, [sp, #12]
    4a68:	4b08      	ldr	r3, [pc, #32]	; (4a8c <reserved_exception+0x34>)
    4a6a:	9302      	str	r3, [sp, #8]
    4a6c:	2000      	movs	r0, #0
    4a6e:	9001      	str	r0, [sp, #4]
    4a70:	9000      	str	r0, [sp, #0]
    4a72:	4603      	mov	r3, r0
    4a74:	2201      	movs	r2, #1
    4a76:	4906      	ldr	r1, [pc, #24]	; (4a90 <reserved_exception+0x38>)
    4a78:	f007 fce3 	bl	c442 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4a7c:	b007      	add	sp, #28
    4a7e:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    4a82:	4b04      	ldr	r3, [pc, #16]	; (4a94 <reserved_exception+0x3c>)
    4a84:	e7ed      	b.n	4a62 <reserved_exception+0xa>
    4a86:	bf00      	nop
    4a88:	0000e960 	.word	0x0000e960
    4a8c:	0000e978 	.word	0x0000e978
    4a90:	0000d494 	.word	0x0000d494
    4a94:	0000e944 	.word	0x0000e944

00004a98 <mem_manage_fault>:
{
    4a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9a:	b085      	sub	sp, #20
    4a9c:	4605      	mov	r5, r0
    4a9e:	460c      	mov	r4, r1
    4aa0:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4aa2:	4b5f      	ldr	r3, [pc, #380]	; (4c20 <mem_manage_fault+0x188>)
    4aa4:	9302      	str	r3, [sp, #8]
    4aa6:	2000      	movs	r0, #0
    4aa8:	9001      	str	r0, [sp, #4]
    4aaa:	9000      	str	r0, [sp, #0]
    4aac:	4603      	mov	r3, r0
    4aae:	2201      	movs	r2, #1
    4ab0:	495c      	ldr	r1, [pc, #368]	; (4c24 <mem_manage_fault+0x18c>)
    4ab2:	f007 fcc6 	bl	c442 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4ab6:	4b5c      	ldr	r3, [pc, #368]	; (4c28 <mem_manage_fault+0x190>)
    4ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4aba:	f013 0f10 	tst.w	r3, #16
    4abe:	d13b      	bne.n	4b38 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4ac0:	4b59      	ldr	r3, [pc, #356]	; (4c28 <mem_manage_fault+0x190>)
    4ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ac4:	f013 0f08 	tst.w	r3, #8
    4ac8:	d141      	bne.n	4b4e <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4aca:	4b57      	ldr	r3, [pc, #348]	; (4c28 <mem_manage_fault+0x190>)
    4acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ace:	f013 0f02 	tst.w	r3, #2
    4ad2:	d147      	bne.n	4b64 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    4ad4:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4ad8:	4b53      	ldr	r3, [pc, #332]	; (4c28 <mem_manage_fault+0x190>)
    4ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4adc:	f013 0f01 	tst.w	r3, #1
    4ae0:	d166      	bne.n	4bb0 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4ae2:	4b51      	ldr	r3, [pc, #324]	; (4c28 <mem_manage_fault+0x190>)
    4ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ae6:	f013 0f20 	tst.w	r3, #32
    4aea:	d16c      	bne.n	4bc6 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4aec:	4b4e      	ldr	r3, [pc, #312]	; (4c28 <mem_manage_fault+0x190>)
    4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4af0:	f013 0f10 	tst.w	r3, #16
    4af4:	d104      	bne.n	4b00 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4af6:	4b4c      	ldr	r3, [pc, #304]	; (4c28 <mem_manage_fault+0x190>)
    4af8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4afa:	f014 0402 	ands.w	r4, r4, #2
    4afe:	d004      	beq.n	4b0a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4b00:	4b49      	ldr	r3, [pc, #292]	; (4c28 <mem_manage_fault+0x190>)
    4b02:	685c      	ldr	r4, [r3, #4]
    4b04:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4b08:	d168      	bne.n	4bdc <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4b0a:	4b47      	ldr	r3, [pc, #284]	; (4c28 <mem_manage_fault+0x190>)
    4b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b0e:	f013 0f20 	tst.w	r3, #32
    4b12:	d004      	beq.n	4b1e <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4b14:	4a44      	ldr	r2, [pc, #272]	; (4c28 <mem_manage_fault+0x190>)
    4b16:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4b1c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4b1e:	4a42      	ldr	r2, [pc, #264]	; (4c28 <mem_manage_fault+0x190>)
    4b20:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b22:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4b26:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4b28:	2101      	movs	r1, #1
    4b2a:	4628      	mov	r0, r5
    4b2c:	f007 fc87 	bl	c43e <memory_fault_recoverable>
    4b30:	7030      	strb	r0, [r6, #0]
}
    4b32:	4620      	mov	r0, r4
    4b34:	b005      	add	sp, #20
    4b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    4b38:	4b3c      	ldr	r3, [pc, #240]	; (4c2c <mem_manage_fault+0x194>)
    4b3a:	9302      	str	r3, [sp, #8]
    4b3c:	2000      	movs	r0, #0
    4b3e:	9001      	str	r0, [sp, #4]
    4b40:	9000      	str	r0, [sp, #0]
    4b42:	4603      	mov	r3, r0
    4b44:	2201      	movs	r2, #1
    4b46:	4937      	ldr	r1, [pc, #220]	; (4c24 <mem_manage_fault+0x18c>)
    4b48:	f007 fc7b 	bl	c442 <z_log_msg2_runtime_create>
    4b4c:	e7b8      	b.n	4ac0 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    4b4e:	4b38      	ldr	r3, [pc, #224]	; (4c30 <mem_manage_fault+0x198>)
    4b50:	9302      	str	r3, [sp, #8]
    4b52:	2000      	movs	r0, #0
    4b54:	9001      	str	r0, [sp, #4]
    4b56:	9000      	str	r0, [sp, #0]
    4b58:	4603      	mov	r3, r0
    4b5a:	2201      	movs	r2, #1
    4b5c:	4931      	ldr	r1, [pc, #196]	; (4c24 <mem_manage_fault+0x18c>)
    4b5e:	f007 fc70 	bl	c442 <z_log_msg2_runtime_create>
    4b62:	e7b2      	b.n	4aca <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    4b64:	4b33      	ldr	r3, [pc, #204]	; (4c34 <mem_manage_fault+0x19c>)
    4b66:	9302      	str	r3, [sp, #8]
    4b68:	2000      	movs	r0, #0
    4b6a:	9001      	str	r0, [sp, #4]
    4b6c:	9000      	str	r0, [sp, #0]
    4b6e:	4603      	mov	r3, r0
    4b70:	2201      	movs	r2, #1
    4b72:	492c      	ldr	r1, [pc, #176]	; (4c24 <mem_manage_fault+0x18c>)
    4b74:	f007 fc65 	bl	c442 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    4b78:	4b2b      	ldr	r3, [pc, #172]	; (4c28 <mem_manage_fault+0x190>)
    4b7a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b7e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4b82:	d102      	bne.n	4b8a <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    4b84:	f06f 0715 	mvn.w	r7, #21
    4b88:	e7a6      	b.n	4ad8 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4b8a:	9703      	str	r7, [sp, #12]
    4b8c:	4b2a      	ldr	r3, [pc, #168]	; (4c38 <mem_manage_fault+0x1a0>)
    4b8e:	9302      	str	r3, [sp, #8]
    4b90:	2000      	movs	r0, #0
    4b92:	9001      	str	r0, [sp, #4]
    4b94:	9000      	str	r0, [sp, #0]
    4b96:	4603      	mov	r3, r0
    4b98:	2201      	movs	r2, #1
    4b9a:	4922      	ldr	r1, [pc, #136]	; (4c24 <mem_manage_fault+0x18c>)
    4b9c:	f007 fc51 	bl	c442 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    4ba0:	2c00      	cmp	r4, #0
    4ba2:	d099      	beq.n	4ad8 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4ba4:	4a20      	ldr	r2, [pc, #128]	; (4c28 <mem_manage_fault+0x190>)
    4ba6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4bac:	6293      	str	r3, [r2, #40]	; 0x28
    4bae:	e793      	b.n	4ad8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    4bb0:	4b22      	ldr	r3, [pc, #136]	; (4c3c <mem_manage_fault+0x1a4>)
    4bb2:	9302      	str	r3, [sp, #8]
    4bb4:	2000      	movs	r0, #0
    4bb6:	9001      	str	r0, [sp, #4]
    4bb8:	9000      	str	r0, [sp, #0]
    4bba:	4603      	mov	r3, r0
    4bbc:	2201      	movs	r2, #1
    4bbe:	4919      	ldr	r1, [pc, #100]	; (4c24 <mem_manage_fault+0x18c>)
    4bc0:	f007 fc3f 	bl	c442 <z_log_msg2_runtime_create>
    4bc4:	e78d      	b.n	4ae2 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    4bc6:	4b1e      	ldr	r3, [pc, #120]	; (4c40 <mem_manage_fault+0x1a8>)
    4bc8:	9302      	str	r3, [sp, #8]
    4bca:	2000      	movs	r0, #0
    4bcc:	9001      	str	r0, [sp, #4]
    4bce:	9000      	str	r0, [sp, #0]
    4bd0:	4603      	mov	r3, r0
    4bd2:	2201      	movs	r2, #1
    4bd4:	4913      	ldr	r1, [pc, #76]	; (4c24 <mem_manage_fault+0x18c>)
    4bd6:	f007 fc34 	bl	c442 <z_log_msg2_runtime_create>
    4bda:	e787      	b.n	4aec <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4bdc:	4629      	mov	r1, r5
    4bde:	4638      	mov	r0, r7
    4be0:	f7ff fd88 	bl	46f4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4be4:	4607      	mov	r7, r0
    4be6:	b9b0      	cbnz	r0, 4c16 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4be8:	4b0f      	ldr	r3, [pc, #60]	; (4c28 <mem_manage_fault+0x190>)
    4bea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4bec:	f014 0410 	ands.w	r4, r4, #16
    4bf0:	d08b      	beq.n	4b0a <mem_manage_fault+0x72>
    4bf2:	4c14      	ldr	r4, [pc, #80]	; (4c44 <mem_manage_fault+0x1ac>)
    4bf4:	f240 1349 	movw	r3, #329	; 0x149
    4bf8:	4622      	mov	r2, r4
    4bfa:	4913      	ldr	r1, [pc, #76]	; (4c48 <mem_manage_fault+0x1b0>)
    4bfc:	4813      	ldr	r0, [pc, #76]	; (4c4c <mem_manage_fault+0x1b4>)
    4bfe:	f007 fb3d 	bl	c27c <assert_print>
    4c02:	4813      	ldr	r0, [pc, #76]	; (4c50 <mem_manage_fault+0x1b8>)
    4c04:	f007 fb3a 	bl	c27c <assert_print>
    4c08:	f240 1149 	movw	r1, #329	; 0x149
    4c0c:	4620      	mov	r0, r4
    4c0e:	f007 fb2e 	bl	c26e <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4c12:	463c      	mov	r4, r7
    4c14:	e779      	b.n	4b0a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4c16:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4c1a:	2402      	movs	r4, #2
    4c1c:	e775      	b.n	4b0a <mem_manage_fault+0x72>
    4c1e:	bf00      	nop
    4c20:	0000e98c 	.word	0x0000e98c
    4c24:	0000d494 	.word	0x0000d494
    4c28:	e000ed00 	.word	0xe000ed00
    4c2c:	0000e9a4 	.word	0x0000e9a4
    4c30:	0000e79c 	.word	0x0000e79c
    4c34:	0000e9d8 	.word	0x0000e9d8
    4c38:	0000e9f0 	.word	0x0000e9f0
    4c3c:	0000ea08 	.word	0x0000ea08
    4c40:	0000e818 	.word	0x0000e818
    4c44:	0000ea28 	.word	0x0000ea28
    4c48:	0000ea64 	.word	0x0000ea64
    4c4c:	0000d63c 	.word	0x0000d63c
    4c50:	0000eab0 	.word	0x0000eab0

00004c54 <hard_fault>:
{
    4c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c56:	b085      	sub	sp, #20
    4c58:	4607      	mov	r7, r0
    4c5a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4c5c:	4b4b      	ldr	r3, [pc, #300]	; (4d8c <hard_fault+0x138>)
    4c5e:	9302      	str	r3, [sp, #8]
    4c60:	2400      	movs	r4, #0
    4c62:	9401      	str	r4, [sp, #4]
    4c64:	9400      	str	r4, [sp, #0]
    4c66:	4623      	mov	r3, r4
    4c68:	2201      	movs	r2, #1
    4c6a:	4949      	ldr	r1, [pc, #292]	; (4d90 <hard_fault+0x13c>)
    4c6c:	4620      	mov	r0, r4
    4c6e:	f007 fbe8 	bl	c442 <z_log_msg2_runtime_create>
	*recoverable = false;
    4c72:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4c74:	4b47      	ldr	r3, [pc, #284]	; (4d94 <hard_fault+0x140>)
    4c76:	6add      	ldr	r5, [r3, #44]	; 0x2c
    4c78:	f015 0502 	ands.w	r5, r5, #2
    4c7c:	d12d      	bne.n	4cda <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4c7e:	4b45      	ldr	r3, [pc, #276]	; (4d94 <hard_fault+0x140>)
    4c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c82:	2b00      	cmp	r3, #0
    4c84:	db36      	blt.n	4cf4 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4c86:	4b43      	ldr	r3, [pc, #268]	; (4d94 <hard_fault+0x140>)
    4c88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4c8a:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4c8e:	d06b      	beq.n	4d68 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    4c90:	4b41      	ldr	r3, [pc, #260]	; (4d98 <hard_fault+0x144>)
    4c92:	9302      	str	r3, [sp, #8]
    4c94:	2000      	movs	r0, #0
    4c96:	9001      	str	r0, [sp, #4]
    4c98:	9000      	str	r0, [sp, #0]
    4c9a:	4603      	mov	r3, r0
    4c9c:	2201      	movs	r2, #1
    4c9e:	493c      	ldr	r1, [pc, #240]	; (4d90 <hard_fault+0x13c>)
    4ca0:	f007 fbcf 	bl	c442 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4ca4:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4ca6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4caa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4cae:	429a      	cmp	r2, r3
    4cb0:	d02c      	beq.n	4d0c <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    4cb2:	4b38      	ldr	r3, [pc, #224]	; (4d94 <hard_fault+0x140>)
    4cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d135      	bne.n	4d28 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    4cbc:	4b35      	ldr	r3, [pc, #212]	; (4d94 <hard_fault+0x140>)
    4cbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d137      	bne.n	4d36 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    4cc6:	4b33      	ldr	r3, [pc, #204]	; (4d94 <hard_fault+0x140>)
    4cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4cca:	b29b      	uxth	r3, r3
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d039      	beq.n	4d44 <hard_fault+0xf0>
			reason = usage_fault(esf);
    4cd0:	4638      	mov	r0, r7
    4cd2:	f7ff fe23 	bl	491c <usage_fault>
    4cd6:	4604      	mov	r4, r0
    4cd8:	e009      	b.n	4cee <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    4cda:	4b30      	ldr	r3, [pc, #192]	; (4d9c <hard_fault+0x148>)
    4cdc:	9302      	str	r3, [sp, #8]
    4cde:	9401      	str	r4, [sp, #4]
    4ce0:	9400      	str	r4, [sp, #0]
    4ce2:	4623      	mov	r3, r4
    4ce4:	2201      	movs	r2, #1
    4ce6:	492a      	ldr	r1, [pc, #168]	; (4d90 <hard_fault+0x13c>)
    4ce8:	4620      	mov	r0, r4
    4cea:	f007 fbaa 	bl	c442 <z_log_msg2_runtime_create>
}
    4cee:	4620      	mov	r0, r4
    4cf0:	b005      	add	sp, #20
    4cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    4cf4:	4b2a      	ldr	r3, [pc, #168]	; (4da0 <hard_fault+0x14c>)
    4cf6:	9302      	str	r3, [sp, #8]
    4cf8:	2000      	movs	r0, #0
    4cfa:	9001      	str	r0, [sp, #4]
    4cfc:	9000      	str	r0, [sp, #0]
    4cfe:	4603      	mov	r3, r0
    4d00:	2201      	movs	r2, #1
    4d02:	4923      	ldr	r1, [pc, #140]	; (4d90 <hard_fault+0x13c>)
    4d04:	f007 fb9d 	bl	c442 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4d08:	462c      	mov	r4, r5
    4d0a:	e7f0      	b.n	4cee <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4d0c:	683b      	ldr	r3, [r7, #0]
    4d0e:	9303      	str	r3, [sp, #12]
    4d10:	4b24      	ldr	r3, [pc, #144]	; (4da4 <hard_fault+0x150>)
    4d12:	9302      	str	r3, [sp, #8]
    4d14:	2000      	movs	r0, #0
    4d16:	9001      	str	r0, [sp, #4]
    4d18:	9000      	str	r0, [sp, #0]
    4d1a:	4603      	mov	r3, r0
    4d1c:	2201      	movs	r2, #1
    4d1e:	491c      	ldr	r1, [pc, #112]	; (4d90 <hard_fault+0x13c>)
    4d20:	f007 fb8f 	bl	c442 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    4d24:	683c      	ldr	r4, [r7, #0]
    4d26:	e7e2      	b.n	4cee <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    4d28:	4632      	mov	r2, r6
    4d2a:	2101      	movs	r1, #1
    4d2c:	4638      	mov	r0, r7
    4d2e:	f7ff feb3 	bl	4a98 <mem_manage_fault>
    4d32:	4604      	mov	r4, r0
    4d34:	e7db      	b.n	4cee <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    4d36:	4632      	mov	r2, r6
    4d38:	2101      	movs	r1, #1
    4d3a:	4638      	mov	r0, r7
    4d3c:	f7ff fd46 	bl	47cc <bus_fault>
    4d40:	4604      	mov	r4, r0
    4d42:	e7d4      	b.n	4cee <hard_fault+0x9a>
			__ASSERT(0,
    4d44:	4c18      	ldr	r4, [pc, #96]	; (4da8 <hard_fault+0x154>)
    4d46:	f240 23cd 	movw	r3, #717	; 0x2cd
    4d4a:	4622      	mov	r2, r4
    4d4c:	4917      	ldr	r1, [pc, #92]	; (4dac <hard_fault+0x158>)
    4d4e:	4818      	ldr	r0, [pc, #96]	; (4db0 <hard_fault+0x15c>)
    4d50:	f007 fa94 	bl	c27c <assert_print>
    4d54:	4817      	ldr	r0, [pc, #92]	; (4db4 <hard_fault+0x160>)
    4d56:	f007 fa91 	bl	c27c <assert_print>
    4d5a:	f240 21cd 	movw	r1, #717	; 0x2cd
    4d5e:	4620      	mov	r0, r4
    4d60:	f007 fa85 	bl	c26e <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4d64:	462c      	mov	r4, r5
    4d66:	e7c2      	b.n	4cee <hard_fault+0x9a>
		__ASSERT(0,
    4d68:	4d0f      	ldr	r5, [pc, #60]	; (4da8 <hard_fault+0x154>)
    4d6a:	f240 23d1 	movw	r3, #721	; 0x2d1
    4d6e:	462a      	mov	r2, r5
    4d70:	490e      	ldr	r1, [pc, #56]	; (4dac <hard_fault+0x158>)
    4d72:	480f      	ldr	r0, [pc, #60]	; (4db0 <hard_fault+0x15c>)
    4d74:	f007 fa82 	bl	c27c <assert_print>
    4d78:	480f      	ldr	r0, [pc, #60]	; (4db8 <hard_fault+0x164>)
    4d7a:	f007 fa7f 	bl	c27c <assert_print>
    4d7e:	f240 21d1 	movw	r1, #721	; 0x2d1
    4d82:	4628      	mov	r0, r5
    4d84:	f007 fa73 	bl	c26e <assert_post_action>
	return reason;
    4d88:	e7b1      	b.n	4cee <hard_fault+0x9a>
    4d8a:	bf00      	nop
    4d8c:	0000ead4 	.word	0x0000ead4
    4d90:	0000d494 	.word	0x0000d494
    4d94:	e000ed00 	.word	0xe000ed00
    4d98:	0000eb20 	.word	0x0000eb20
    4d9c:	0000eaec 	.word	0x0000eaec
    4da0:	0000eb10 	.word	0x0000eb10
    4da4:	0000eb40 	.word	0x0000eb40
    4da8:	0000ea28 	.word	0x0000ea28
    4dac:	0000d800 	.word	0x0000d800
    4db0:	0000d63c 	.word	0x0000d63c
    4db4:	0000eb5c 	.word	0x0000eb5c
    4db8:	0000eb80 	.word	0x0000eb80

00004dbc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dbe:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4dc0:	4b31      	ldr	r3, [pc, #196]	; (4e88 <z_arm_fault+0xcc>)
    4dc2:	685d      	ldr	r5, [r3, #4]
    4dc4:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4dc8:	2300      	movs	r3, #0
    4dca:	f383 8811 	msr	BASEPRI, r3
    4dce:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4dd2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4dd6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4dda:	d125      	bne.n	4e28 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4ddc:	f002 030c 	and.w	r3, r2, #12
    4de0:	2b08      	cmp	r3, #8
    4de2:	d011      	beq.n	4e08 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4de4:	f012 0f08 	tst.w	r2, #8
    4de8:	d01b      	beq.n	4e22 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    4dea:	460c      	mov	r4, r1
	*nested_exc = false;
    4dec:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4dee:	b1f4      	cbz	r4, 4e2e <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4df0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    4df4:	4629      	mov	r1, r5
    4df6:	4620      	mov	r0, r4
    4df8:	f007 fb32 	bl	c460 <fault_handle>
    4dfc:	4605      	mov	r5, r0
	if (recoverable) {
    4dfe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    4e02:	b32b      	cbz	r3, 4e50 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4e04:	b00f      	add	sp, #60	; 0x3c
    4e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4e08:	4b20      	ldr	r3, [pc, #128]	; (4e8c <z_arm_fault+0xd0>)
    4e0a:	9302      	str	r3, [sp, #8]
    4e0c:	2400      	movs	r4, #0
    4e0e:	9401      	str	r4, [sp, #4]
    4e10:	9400      	str	r4, [sp, #0]
    4e12:	4623      	mov	r3, r4
    4e14:	2201      	movs	r2, #1
    4e16:	491e      	ldr	r1, [pc, #120]	; (4e90 <z_arm_fault+0xd4>)
    4e18:	4620      	mov	r0, r4
    4e1a:	f007 fb12 	bl	c442 <z_log_msg2_runtime_create>
	*nested_exc = false;
    4e1e:	4626      	mov	r6, r4
		return NULL;
    4e20:	e7e5      	b.n	4dee <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4e22:	4604      	mov	r4, r0
			*nested_exc = true;
    4e24:	2601      	movs	r6, #1
    4e26:	e7e2      	b.n	4dee <z_arm_fault+0x32>
	*nested_exc = false;
    4e28:	2600      	movs	r6, #0
		return NULL;
    4e2a:	4634      	mov	r4, r6
    4e2c:	e7df      	b.n	4dee <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    4e2e:	4f19      	ldr	r7, [pc, #100]	; (4e94 <z_arm_fault+0xd8>)
    4e30:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4e34:	463a      	mov	r2, r7
    4e36:	4918      	ldr	r1, [pc, #96]	; (4e98 <z_arm_fault+0xdc>)
    4e38:	4818      	ldr	r0, [pc, #96]	; (4e9c <z_arm_fault+0xe0>)
    4e3a:	f007 fa1f 	bl	c27c <assert_print>
    4e3e:	4818      	ldr	r0, [pc, #96]	; (4ea0 <z_arm_fault+0xe4>)
    4e40:	f007 fa1c 	bl	c27c <assert_print>
    4e44:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4e48:	4638      	mov	r0, r7
    4e4a:	f007 fa10 	bl	c26e <assert_post_action>
    4e4e:	e7cf      	b.n	4df0 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4e50:	2220      	movs	r2, #32
    4e52:	4621      	mov	r1, r4
    4e54:	a805      	add	r0, sp, #20
    4e56:	f007 fba9 	bl	c5ac <memcpy>
	if (nested_exc) {
    4e5a:	b14e      	cbz	r6, 4e70 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4e62:	b95a      	cbnz	r2, 4e7c <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4e64:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4e68:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4e6c:	930c      	str	r3, [sp, #48]	; 0x30
    4e6e:	e005      	b.n	4e7c <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e72:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4e76:	f023 0301 	bic.w	r3, r3, #1
    4e7a:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    4e7c:	a905      	add	r1, sp, #20
    4e7e:	4628      	mov	r0, r5
    4e80:	f007 fabf 	bl	c402 <z_arm_fatal_error>
    4e84:	e7be      	b.n	4e04 <z_arm_fault+0x48>
    4e86:	bf00      	nop
    4e88:	e000ed00 	.word	0xe000ed00
    4e8c:	0000ebb0 	.word	0x0000ebb0
    4e90:	0000d494 	.word	0x0000d494
    4e94:	0000ea28 	.word	0x0000ea28
    4e98:	0000ebdc 	.word	0x0000ebdc
    4e9c:	0000d63c 	.word	0x0000d63c
    4ea0:	0000ebf0 	.word	0x0000ebf0

00004ea4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ea4:	4a02      	ldr	r2, [pc, #8]	; (4eb0 <z_arm_fault_init+0xc>)
    4ea6:	6953      	ldr	r3, [r2, #20]
    4ea8:	f043 0310 	orr.w	r3, r3, #16
    4eac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4eae:	4770      	bx	lr
    4eb0:	e000ed00 	.word	0xe000ed00

00004eb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4eb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4eb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4ebc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4ebe:	4672      	mov	r2, lr
	bl z_arm_fault
    4ec0:	f7ff ff7c 	bl	4dbc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4ec4:	bd01      	pop	{r0, pc}
    4ec6:	bf00      	nop

00004ec8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4ec8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4eca:	e006      	b.n	4eda <z_arm_interrupt_init+0x12>
    4ecc:	f002 010f 	and.w	r1, r2, #15
    4ed0:	4b09      	ldr	r3, [pc, #36]	; (4ef8 <z_arm_interrupt_init+0x30>)
    4ed2:	440b      	add	r3, r1
    4ed4:	2120      	movs	r1, #32
    4ed6:	7619      	strb	r1, [r3, #24]
    4ed8:	3201      	adds	r2, #1
    4eda:	2a2f      	cmp	r2, #47	; 0x2f
    4edc:	dc0a      	bgt.n	4ef4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4ede:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	dbf3      	blt.n	4ecc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ee4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4ee8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4eec:	2120      	movs	r1, #32
    4eee:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4ef2:	e7f1      	b.n	4ed8 <z_arm_interrupt_init+0x10>
	}
}
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	e000ecfc 	.word	0xe000ecfc

00004efc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4efc:	2000      	movs	r0, #0
    msr CONTROL, r0
    4efe:	f380 8814 	msr	CONTROL, r0
    isb
    4f02:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4f06:	f008 f963 	bl	d1d0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4f0a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4f0c:	490d      	ldr	r1, [pc, #52]	; (4f44 <__start+0x48>)
    str r0, [r1]
    4f0e:	6008      	str	r0, [r1, #0]
    dsb
    4f10:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4f14:	480c      	ldr	r0, [pc, #48]	; (4f48 <__start+0x4c>)
    msr msp, r0
    4f16:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4f1a:	f000 f82d 	bl	4f78 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4f1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4f20:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4f24:	4809      	ldr	r0, [pc, #36]	; (4f4c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4f26:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4f2a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4f2c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4f30:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4f34:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4f36:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4f38:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4f3c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4f40:	f7ff fb42 	bl	45c8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4f44:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4f48:	200028e0 	.word	0x200028e0
    ldr r0, =z_interrupt_stacks
    4f4c:	20002a60 	.word	0x20002a60

00004f50 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4f50:	4b08      	ldr	r3, [pc, #32]	; (4f74 <z_arm_clear_arm_mpu_config+0x24>)
    4f52:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    4f56:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4f5a:	2300      	movs	r3, #0
    4f5c:	e006      	b.n	4f6c <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4f5e:	4a05      	ldr	r2, [pc, #20]	; (4f74 <z_arm_clear_arm_mpu_config+0x24>)
    4f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4f64:	2100      	movs	r1, #0
    4f66:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4f6a:	3301      	adds	r3, #1
    4f6c:	4283      	cmp	r3, r0
    4f6e:	dbf6      	blt.n	4f5e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4f70:	4770      	bx	lr
    4f72:	bf00      	nop
    4f74:	e000ed00 	.word	0xe000ed00

00004f78 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4f78:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4f7a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4f7c:	2400      	movs	r4, #0
    4f7e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4f82:	f7ff ffe5 	bl	4f50 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4f86:	4623      	mov	r3, r4
    4f88:	e008      	b.n	4f9c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4f8a:	f103 0120 	add.w	r1, r3, #32
    4f8e:	4a0e      	ldr	r2, [pc, #56]	; (4fc8 <z_arm_init_arch_hw_at_boot+0x50>)
    4f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f94:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4f98:	3301      	adds	r3, #1
    4f9a:	b2db      	uxtb	r3, r3
    4f9c:	2b07      	cmp	r3, #7
    4f9e:	d9f4      	bls.n	4f8a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4fa0:	2300      	movs	r3, #0
    4fa2:	e008      	b.n	4fb6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4fa4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4fa8:	4a07      	ldr	r2, [pc, #28]	; (4fc8 <z_arm_init_arch_hw_at_boot+0x50>)
    4faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4fae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4fb2:	3301      	adds	r3, #1
    4fb4:	b2db      	uxtb	r3, r3
    4fb6:	2b07      	cmp	r3, #7
    4fb8:	d9f4      	bls.n	4fa4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4fba:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fc0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4fc4:	bd10      	pop	{r4, pc}
    4fc6:	bf00      	nop
    4fc8:	e000e100 	.word	0xe000e100

00004fcc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4fcc:	b508      	push	{r3, lr}
	if (_current == thread) {
    4fce:	4b0a      	ldr	r3, [pc, #40]	; (4ff8 <z_impl_k_thread_abort+0x2c>)
    4fd0:	689b      	ldr	r3, [r3, #8]
    4fd2:	4283      	cmp	r3, r0
    4fd4:	d002      	beq.n	4fdc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4fd6:	f006 f803 	bl	afe0 <z_thread_abort>
}
    4fda:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4fdc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d0f8      	beq.n	4fd6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4fe4:	4b05      	ldr	r3, [pc, #20]	; (4ffc <z_impl_k_thread_abort+0x30>)
    4fe6:	685a      	ldr	r2, [r3, #4]
    4fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4fec:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4ff4:	625a      	str	r2, [r3, #36]	; 0x24
    4ff6:	e7ee      	b.n	4fd6 <z_impl_k_thread_abort+0xa>
    4ff8:	20001228 	.word	0x20001228
    4ffc:	e000ed00 	.word	0xe000ed00

00005000 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5000:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5002:	4b03      	ldr	r3, [pc, #12]	; (5010 <z_arm_configure_static_mpu_regions+0x10>)
    5004:	4a03      	ldr	r2, [pc, #12]	; (5014 <z_arm_configure_static_mpu_regions+0x14>)
    5006:	2101      	movs	r1, #1
    5008:	4803      	ldr	r0, [pc, #12]	; (5018 <z_arm_configure_static_mpu_regions+0x18>)
    500a:	f000 f8bb 	bl	5184 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    500e:	bd08      	pop	{r3, pc}
    5010:	20040000 	.word	0x20040000
    5014:	20000000 	.word	0x20000000
    5018:	0000ec34 	.word	0x0000ec34

0000501c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    501c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    501e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    5022:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5024:	4804      	ldr	r0, [pc, #16]	; (5038 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5026:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    5028:	2320      	movs	r3, #32
    502a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    502c:	4b03      	ldr	r3, [pc, #12]	; (503c <z_arm_configure_dynamic_mpu_regions+0x20>)
    502e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5030:	2101      	movs	r1, #1
    5032:	f000 f8c9 	bl	51c8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    5036:	bd08      	pop	{r3, pc}
    5038:	20000cc4 	.word	0x20000cc4
    503c:	150b0000 	.word	0x150b0000

00005040 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5040:	4a08      	ldr	r2, [pc, #32]	; (5064 <region_init+0x24>)
    5042:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5046:	680b      	ldr	r3, [r1, #0]
    5048:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    504c:	4303      	orrs	r3, r0
    504e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5056:	688b      	ldr	r3, [r1, #8]
    5058:	f043 0301 	orr.w	r3, r3, #1
    505c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    5060:	4770      	bx	lr
    5062:	bf00      	nop
    5064:	e000ed00 	.word	0xe000ed00

00005068 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    5068:	b510      	push	{r4, lr}
    506a:	b084      	sub	sp, #16
    506c:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    506e:	2807      	cmp	r0, #7
    5070:	d804      	bhi.n	507c <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    5072:	f7ff ffe5 	bl	5040 <region_init>

	return index;
    5076:	4620      	mov	r0, r4
}
    5078:	b004      	add	sp, #16
    507a:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    507c:	9003      	str	r0, [sp, #12]
    507e:	4b06      	ldr	r3, [pc, #24]	; (5098 <region_allocate_and_init+0x30>)
    5080:	9302      	str	r3, [sp, #8]
    5082:	2000      	movs	r0, #0
    5084:	9001      	str	r0, [sp, #4]
    5086:	9000      	str	r0, [sp, #0]
    5088:	4603      	mov	r3, r0
    508a:	2201      	movs	r2, #1
    508c:	4903      	ldr	r1, [pc, #12]	; (509c <region_allocate_and_init+0x34>)
    508e:	f007 fa1d 	bl	c4cc <z_log_msg2_runtime_create>
		return -EINVAL;
    5092:	f06f 0015 	mvn.w	r0, #21
    5096:	e7ef      	b.n	5078 <region_allocate_and_init+0x10>
    5098:	0000ec40 	.word	0x0000ec40
    509c:	0000d48c 	.word	0x0000d48c

000050a0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    50a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    50a4:	b085      	sub	sp, #20
    50a6:	4680      	mov	r8, r0
    50a8:	460f      	mov	r7, r1
    50aa:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    50ac:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    50ae:	2500      	movs	r5, #0
    50b0:	e009      	b.n	50c6 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    50b2:	4621      	mov	r1, r4
    50b4:	b2f0      	uxtb	r0, r6
    50b6:	f007 fa18 	bl	c4ea <mpu_configure_region>
    50ba:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    50bc:	f110 0f16 	cmn.w	r0, #22
    50c0:	d01e      	beq.n	5100 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    50c2:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    50c4:	3501      	adds	r5, #1
    50c6:	42bd      	cmp	r5, r7
    50c8:	da1a      	bge.n	5100 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    50ca:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    50ce:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    50d2:	6862      	ldr	r2, [r4, #4]
    50d4:	2a00      	cmp	r2, #0
    50d6:	d0f5      	beq.n	50c4 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    50d8:	f1b9 0f00 	cmp.w	r9, #0
    50dc:	d0e9      	beq.n	50b2 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    50de:	4620      	mov	r0, r4
    50e0:	f007 f9e3 	bl	c4aa <mpu_partition_is_valid>
		if (do_sanity_check &&
    50e4:	2800      	cmp	r0, #0
    50e6:	d1e4      	bne.n	50b2 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    50e8:	9503      	str	r5, [sp, #12]
    50ea:	4b07      	ldr	r3, [pc, #28]	; (5108 <mpu_configure_regions+0x68>)
    50ec:	9302      	str	r3, [sp, #8]
    50ee:	9001      	str	r0, [sp, #4]
    50f0:	9000      	str	r0, [sp, #0]
    50f2:	4603      	mov	r3, r0
    50f4:	2201      	movs	r2, #1
    50f6:	4905      	ldr	r1, [pc, #20]	; (510c <mpu_configure_regions+0x6c>)
    50f8:	f007 f9e8 	bl	c4cc <z_log_msg2_runtime_create>
			return -EINVAL;
    50fc:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    5100:	4630      	mov	r0, r6
    5102:	b005      	add	sp, #20
    5104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5108:	0000ec68 	.word	0x0000ec68
    510c:	0000d48c 	.word	0x0000d48c

00005110 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    5110:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    5112:	4c03      	ldr	r4, [pc, #12]	; (5120 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5114:	2301      	movs	r3, #1
    5116:	7822      	ldrb	r2, [r4, #0]
    5118:	f7ff ffc2 	bl	50a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    511c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    511e:	bd10      	pop	{r4, pc}
    5120:	20001459 	.word	0x20001459

00005124 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5124:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5126:	2300      	movs	r3, #0
    5128:	4a09      	ldr	r2, [pc, #36]	; (5150 <mpu_configure_dynamic_mpu_regions+0x2c>)
    512a:	7812      	ldrb	r2, [r2, #0]
    512c:	f7ff ffb8 	bl	50a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5130:	f110 0f16 	cmn.w	r0, #22
    5134:	d00a      	beq.n	514c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5136:	4603      	mov	r3, r0
    5138:	e006      	b.n	5148 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    513a:	4a06      	ldr	r2, [pc, #24]	; (5154 <mpu_configure_dynamic_mpu_regions+0x30>)
    513c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5140:	2100      	movs	r1, #0
    5142:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    5146:	3301      	adds	r3, #1
    5148:	2b07      	cmp	r3, #7
    514a:	ddf6      	ble.n	513a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    514c:	bd08      	pop	{r3, pc}
    514e:	bf00      	nop
    5150:	20001459 	.word	0x20001459
    5154:	e000ed00 	.word	0xe000ed00

00005158 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5158:	4b04      	ldr	r3, [pc, #16]	; (516c <arm_core_mpu_enable+0x14>)
    515a:	2205      	movs	r2, #5
    515c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    5160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5164:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5168:	4770      	bx	lr
    516a:	bf00      	nop
    516c:	e000ed00 	.word	0xe000ed00

00005170 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5170:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5174:	4b02      	ldr	r3, [pc, #8]	; (5180 <arm_core_mpu_disable+0x10>)
    5176:	2200      	movs	r2, #0
    5178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    517c:	4770      	bx	lr
    517e:	bf00      	nop
    5180:	e000ed00 	.word	0xe000ed00

00005184 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5184:	b538      	push	{r3, r4, r5, lr}
    5186:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5188:	f7ff ffc2 	bl	5110 <mpu_configure_static_mpu_regions>
    518c:	f110 0f16 	cmn.w	r0, #22
    5190:	d000      	beq.n	5194 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5192:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    5194:	4d08      	ldr	r5, [pc, #32]	; (51b8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    5196:	f240 1311 	movw	r3, #273	; 0x111
    519a:	462a      	mov	r2, r5
    519c:	4907      	ldr	r1, [pc, #28]	; (51bc <arm_core_mpu_configure_static_mpu_regions+0x38>)
    519e:	4808      	ldr	r0, [pc, #32]	; (51c0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    51a0:	f007 f86c 	bl	c27c <assert_print>
    51a4:	4621      	mov	r1, r4
    51a6:	4807      	ldr	r0, [pc, #28]	; (51c4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    51a8:	f007 f868 	bl	c27c <assert_print>
    51ac:	f240 1111 	movw	r1, #273	; 0x111
    51b0:	4628      	mov	r0, r5
    51b2:	f007 f85c 	bl	c26e <assert_post_action>
}
    51b6:	e7ec      	b.n	5192 <arm_core_mpu_configure_static_mpu_regions+0xe>
    51b8:	0000ec8c 	.word	0x0000ec8c
    51bc:	0000d800 	.word	0x0000d800
    51c0:	0000d63c 	.word	0x0000d63c
    51c4:	0000ecc4 	.word	0x0000ecc4

000051c8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    51c8:	b538      	push	{r3, r4, r5, lr}
    51ca:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    51cc:	f7ff ffaa 	bl	5124 <mpu_configure_dynamic_mpu_regions>
    51d0:	f110 0f16 	cmn.w	r0, #22
    51d4:	d000      	beq.n	51d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    51d6:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    51d8:	4d08      	ldr	r5, [pc, #32]	; (51fc <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    51da:	f44f 7398 	mov.w	r3, #304	; 0x130
    51de:	462a      	mov	r2, r5
    51e0:	4907      	ldr	r1, [pc, #28]	; (5200 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    51e2:	4808      	ldr	r0, [pc, #32]	; (5204 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    51e4:	f007 f84a 	bl	c27c <assert_print>
    51e8:	4621      	mov	r1, r4
    51ea:	4807      	ldr	r0, [pc, #28]	; (5208 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    51ec:	f007 f846 	bl	c27c <assert_print>
    51f0:	f44f 7198 	mov.w	r1, #304	; 0x130
    51f4:	4628      	mov	r0, r5
    51f6:	f007 f83a 	bl	c26e <assert_post_action>
}
    51fa:	e7ec      	b.n	51d6 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    51fc:	0000ec8c 	.word	0x0000ec8c
    5200:	0000d800 	.word	0x0000d800
    5204:	0000d63c 	.word	0x0000d63c
    5208:	0000ecf0 	.word	0x0000ecf0

0000520c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    520c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    520e:	4b24      	ldr	r3, [pc, #144]	; (52a0 <z_arm_mpu_init+0x94>)
    5210:	681d      	ldr	r5, [r3, #0]
    5212:	2d08      	cmp	r5, #8
    5214:	d803      	bhi.n	521e <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5216:	f7ff ffab 	bl	5170 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    521a:	2400      	movs	r4, #0
    521c:	e01e      	b.n	525c <z_arm_mpu_init+0x50>
		__ASSERT(0,
    521e:	4c21      	ldr	r4, [pc, #132]	; (52a4 <z_arm_mpu_init+0x98>)
    5220:	f44f 73a4 	mov.w	r3, #328	; 0x148
    5224:	4622      	mov	r2, r4
    5226:	4920      	ldr	r1, [pc, #128]	; (52a8 <z_arm_mpu_init+0x9c>)
    5228:	4820      	ldr	r0, [pc, #128]	; (52ac <z_arm_mpu_init+0xa0>)
    522a:	f007 f827 	bl	c27c <assert_print>
    522e:	2208      	movs	r2, #8
    5230:	4629      	mov	r1, r5
    5232:	481f      	ldr	r0, [pc, #124]	; (52b0 <z_arm_mpu_init+0xa4>)
    5234:	f007 f822 	bl	c27c <assert_print>
    5238:	f44f 71a4 	mov.w	r1, #328	; 0x148
    523c:	4620      	mov	r0, r4
    523e:	f007 f816 	bl	c26e <assert_post_action>
		return -1;
    5242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5246:	e017      	b.n	5278 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5248:	4b15      	ldr	r3, [pc, #84]	; (52a0 <z_arm_mpu_init+0x94>)
    524a:	6859      	ldr	r1, [r3, #4]
    524c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5250:	0093      	lsls	r3, r2, #2
    5252:	4419      	add	r1, r3
    5254:	4620      	mov	r0, r4
    5256:	f7ff fef3 	bl	5040 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    525a:	3401      	adds	r4, #1
    525c:	42a5      	cmp	r5, r4
    525e:	d8f3      	bhi.n	5248 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5260:	4b14      	ldr	r3, [pc, #80]	; (52b4 <z_arm_mpu_init+0xa8>)
    5262:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5264:	f7ff ff78 	bl	5158 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    5268:	4b13      	ldr	r3, [pc, #76]	; (52b8 <z_arm_mpu_init+0xac>)
    526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    526e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5272:	2b08      	cmp	r3, #8
    5274:	d101      	bne.n	527a <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5276:	2000      	movs	r0, #0
}
    5278:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    527a:	4c0a      	ldr	r4, [pc, #40]	; (52a4 <z_arm_mpu_init+0x98>)
    527c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    5280:	4622      	mov	r2, r4
    5282:	490e      	ldr	r1, [pc, #56]	; (52bc <z_arm_mpu_init+0xb0>)
    5284:	4809      	ldr	r0, [pc, #36]	; (52ac <z_arm_mpu_init+0xa0>)
    5286:	f006 fff9 	bl	c27c <assert_print>
    528a:	480d      	ldr	r0, [pc, #52]	; (52c0 <z_arm_mpu_init+0xb4>)
    528c:	f006 fff6 	bl	c27c <assert_print>
    5290:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    5294:	4620      	mov	r0, r4
    5296:	f006 ffea 	bl	c26e <assert_post_action>
	return 0;
    529a:	2000      	movs	r0, #0
    529c:	e7ec      	b.n	5278 <z_arm_mpu_init+0x6c>
    529e:	bf00      	nop
    52a0:	0000edd8 	.word	0x0000edd8
    52a4:	0000ec8c 	.word	0x0000ec8c
    52a8:	0000d800 	.word	0x0000d800
    52ac:	0000d63c 	.word	0x0000d63c
    52b0:	0000ed20 	.word	0x0000ed20
    52b4:	20001459 	.word	0x20001459
    52b8:	e000ed00 	.word	0xe000ed00
    52bc:	0000ed54 	.word	0x0000ed54
    52c0:	0000eda4 	.word	0x0000eda4

000052c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    52c4:	4b01      	ldr	r3, [pc, #4]	; (52cc <__stdout_hook_install+0x8>)
    52c6:	6018      	str	r0, [r3, #0]
}
    52c8:	4770      	bx	lr
    52ca:	bf00      	nop
    52cc:	200000c4 	.word	0x200000c4

000052d0 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    52d0:	3902      	subs	r1, #2
    52d2:	2901      	cmp	r1, #1
    52d4:	d804      	bhi.n	52e0 <z_impl_zephyr_fputc+0x10>
{
    52d6:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    52d8:	4b03      	ldr	r3, [pc, #12]	; (52e8 <z_impl_zephyr_fputc+0x18>)
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	4798      	blx	r3
}
    52de:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    52e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    52e4:	4770      	bx	lr
    52e6:	bf00      	nop
    52e8:	200000c4 	.word	0x200000c4

000052ec <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    52ec:	b40f      	push	{r0, r1, r2, r3}
    52ee:	b500      	push	{lr}
    52f0:	b083      	sub	sp, #12
    52f2:	ab04      	add	r3, sp, #16
    52f4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    52f8:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    52fa:	2102      	movs	r1, #2
    52fc:	4803      	ldr	r0, [pc, #12]	; (530c <printf+0x20>)
    52fe:	f7fd fe13 	bl	2f28 <cbvprintf>
	va_end(vargs);

	return r;
}
    5302:	b003      	add	sp, #12
    5304:	f85d eb04 	ldr.w	lr, [sp], #4
    5308:	b004      	add	sp, #16
    530a:	4770      	bx	lr
    530c:	0000c64d 	.word	0x0000c64d

00005310 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    5310:	b510      	push	{r4, lr}
	__asm__ volatile(
    5312:	f04f 0320 	mov.w	r3, #32
    5316:	f3ef 8411 	mrs	r4, BASEPRI
    531a:	f383 8812 	msr	BASEPRI_MAX, r3
    531e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5322:	2301      	movs	r3, #1
    5324:	4a0c      	ldr	r2, [pc, #48]	; (5358 <nordicsemi_nrf52_init+0x48>)
    5326:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    532a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    532e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    5332:	f007 f98f 	bl	c654 <nrf52_errata_197>
    5336:	b120      	cbz	r0, 5342 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    533c:	2201      	movs	r2, #1
    533e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5346:	2201      	movs	r2, #1
    5348:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    534c:	f384 8811 	msr	BASEPRI, r4
    5350:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5354:	2000      	movs	r0, #0
    5356:	bd10      	pop	{r4, pc}
    5358:	4001e000 	.word	0x4001e000

0000535c <sys_arch_reboot>:
    *p_gpregret = val;
    535c:	b2c0      	uxtb	r0, r0
    535e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5362:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5366:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    536a:	4905      	ldr	r1, [pc, #20]	; (5380 <sys_arch_reboot+0x24>)
    536c:	68ca      	ldr	r2, [r1, #12]
    536e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5372:	4b04      	ldr	r3, [pc, #16]	; (5384 <sys_arch_reboot+0x28>)
    5374:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5376:	60cb      	str	r3, [r1, #12]
    5378:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    537c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    537e:	e7fd      	b.n	537c <sys_arch_reboot+0x20>
    5380:	e000ed00 	.word	0xe000ed00
    5384:	05fa0004 	.word	0x05fa0004

00005388 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5388:	b130      	cbz	r0, 5398 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    538a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    538c:	0180      	lsls	r0, r0, #6
    538e:	4b03      	ldr	r3, [pc, #12]	; (539c <arch_busy_wait+0x14>)
    5390:	f043 0301 	orr.w	r3, r3, #1
    5394:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5396:	bd08      	pop	{r3, pc}
    5398:	4770      	bx	lr
    539a:	bf00      	nop
    539c:	0000d550 	.word	0x0000d550

000053a0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    53a0:	4b07      	ldr	r3, [pc, #28]	; (53c0 <adc_context_start_sampling+0x20>)
    53a2:	2201      	movs	r2, #1
    53a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    53a8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    53ac:	b113      	cbz	r3, 53b4 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53ae:	4b04      	ldr	r3, [pc, #16]	; (53c0 <adc_context_start_sampling+0x20>)
    53b0:	60da      	str	r2, [r3, #12]
}
    53b2:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53b4:	4b02      	ldr	r3, [pc, #8]	; (53c0 <adc_context_start_sampling+0x20>)
    53b6:	2201      	movs	r2, #1
    53b8:	601a      	str	r2, [r3, #0]
    53ba:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    53bc:	4770      	bx	lr
    53be:	bf00      	nop
    53c0:	40007000 	.word	0x40007000

000053c4 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    53c4:	b949      	cbnz	r1, 53da <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    53c6:	4b05      	ldr	r3, [pc, #20]	; (53dc <adc_context_update_buffer_pointer+0x18>)
    53c8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    53cc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    53d0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    53d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    53d6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    53da:	4770      	bx	lr
    53dc:	40007000 	.word	0x40007000

000053e0 <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    53e0:	7c02      	ldrb	r2, [r0, #16]
    53e2:	f1a2 0308 	sub.w	r3, r2, #8
    53e6:	2b06      	cmp	r3, #6
    53e8:	d80d      	bhi.n	5406 <set_resolution+0x26>
    53ea:	e8df f003 	tbb	[pc, r3]
    53ee:	0c1e      	.short	0x0c1e
    53f0:	0c040c20 	.word	0x0c040c20
    53f4:	0a          	.byte	0x0a
    53f5:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    53f6:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    53f8:	4b0e      	ldr	r3, [pc, #56]	; (5434 <set_resolution+0x54>)
    53fa:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    53fe:	2000      	movs	r0, #0
}
    5400:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    5402:	2203      	movs	r2, #3
		break;
    5404:	e7f8      	b.n	53f8 <set_resolution+0x18>
{
    5406:	b500      	push	{lr}
    5408:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    540a:	9203      	str	r2, [sp, #12]
    540c:	4b0a      	ldr	r3, [pc, #40]	; (5438 <set_resolution+0x58>)
    540e:	9302      	str	r3, [sp, #8]
    5410:	2000      	movs	r0, #0
    5412:	9001      	str	r0, [sp, #4]
    5414:	9000      	str	r0, [sp, #0]
    5416:	4603      	mov	r3, r0
    5418:	2201      	movs	r2, #1
    541a:	4908      	ldr	r1, [pc, #32]	; (543c <set_resolution+0x5c>)
    541c:	f007 f951 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    5420:	f06f 0015 	mvn.w	r0, #21
}
    5424:	b005      	add	sp, #20
    5426:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    542a:	2200      	movs	r2, #0
    542c:	e7e4      	b.n	53f8 <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    542e:	2201      	movs	r2, #1
    5430:	e7e2      	b.n	53f8 <set_resolution+0x18>
    5432:	bf00      	nop
    5434:	40007000 	.word	0x40007000
    5438:	0000edfc 	.word	0x0000edfc
    543c:	0000d464 	.word	0x0000d464

00005440 <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    5440:	b500      	push	{lr}
    5442:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    5444:	2901      	cmp	r1, #1
    5446:	d901      	bls.n	544c <set_oversampling+0xc>
    5448:	7c43      	ldrb	r3, [r0, #17]
    544a:	b94b      	cbnz	r3, 5460 <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    544c:	7c43      	ldrb	r3, [r0, #17]
    544e:	2b08      	cmp	r3, #8
    5450:	d813      	bhi.n	547a <set_oversampling+0x3a>
    5452:	e8df f003 	tbb	[pc, r3]
    5456:	2020      	.short	0x2020
    5458:	20202020 	.word	0x20202020
    545c:	2020      	.short	0x2020
    545e:	20          	.byte	0x20
    545f:	00          	.byte	0x00
		LOG_ERR(
    5460:	4b10      	ldr	r3, [pc, #64]	; (54a4 <set_oversampling+0x64>)
    5462:	9302      	str	r3, [sp, #8]
    5464:	2000      	movs	r0, #0
    5466:	9001      	str	r0, [sp, #4]
    5468:	9000      	str	r0, [sp, #0]
    546a:	4603      	mov	r3, r0
    546c:	2201      	movs	r2, #1
    546e:	490e      	ldr	r1, [pc, #56]	; (54a8 <set_oversampling+0x68>)
    5470:	f007 f927 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    5474:	f06f 0015 	mvn.w	r0, #21
    5478:	e011      	b.n	549e <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    547a:	9303      	str	r3, [sp, #12]
    547c:	4b0b      	ldr	r3, [pc, #44]	; (54ac <set_oversampling+0x6c>)
    547e:	9302      	str	r3, [sp, #8]
    5480:	2000      	movs	r0, #0
    5482:	9001      	str	r0, [sp, #4]
    5484:	9000      	str	r0, [sp, #0]
    5486:	4603      	mov	r3, r0
    5488:	2201      	movs	r2, #1
    548a:	4907      	ldr	r1, [pc, #28]	; (54a8 <set_oversampling+0x68>)
    548c:	f007 f919 	bl	c6c2 <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    5490:	f06f 0015 	mvn.w	r0, #21
    5494:	e003      	b.n	549e <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    5496:	4a06      	ldr	r2, [pc, #24]	; (54b0 <set_oversampling+0x70>)
    5498:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    549c:	2000      	movs	r0, #0
}
    549e:	b005      	add	sp, #20
    54a0:	f85d fb04 	ldr.w	pc, [sp], #4
    54a4:	0000ee24 	.word	0x0000ee24
    54a8:	0000d464 	.word	0x0000d464
    54ac:	0000ee58 	.word	0x0000ee58
    54b0:	40007000 	.word	0x40007000

000054b4 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    54b4:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    54b6:	6803      	ldr	r3, [r0, #0]
    54b8:	b113      	cbz	r3, 54c0 <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    54ba:	899b      	ldrh	r3, [r3, #12]
    54bc:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    54c0:	68c3      	ldr	r3, [r0, #12]
    54c2:	428b      	cmp	r3, r1
    54c4:	d301      	bcc.n	54ca <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    54c6:	2000      	movs	r0, #0
}
    54c8:	4770      	bx	lr
{
    54ca:	b500      	push	{lr}
    54cc:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    54ce:	9104      	str	r1, [sp, #16]
    54d0:	9303      	str	r3, [sp, #12]
    54d2:	4b07      	ldr	r3, [pc, #28]	; (54f0 <check_buffer_size+0x3c>)
    54d4:	9302      	str	r3, [sp, #8]
    54d6:	2000      	movs	r0, #0
    54d8:	9001      	str	r0, [sp, #4]
    54da:	9000      	str	r0, [sp, #0]
    54dc:	4603      	mov	r3, r0
    54de:	2201      	movs	r2, #1
    54e0:	4904      	ldr	r1, [pc, #16]	; (54f4 <check_buffer_size+0x40>)
    54e2:	f007 f8ee 	bl	c6c2 <z_log_msg2_runtime_create>
		return -ENOMEM;
    54e6:	f06f 000b 	mvn.w	r0, #11
}
    54ea:	b007      	add	sp, #28
    54ec:	f85d fb04 	ldr.w	pc, [sp], #4
    54f0:	0000ee7c 	.word	0x0000ee7c
    54f4:	0000d464 	.word	0x0000d464

000054f8 <adc_nrfx_channel_setup>:
{
    54f8:	b510      	push	{r4, lr}
    54fa:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    54fc:	2300      	movs	r3, #0
    54fe:	9304      	str	r3, [sp, #16]
    5500:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    5504:	790a      	ldrb	r2, [r1, #4]
    5506:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    550a:	2a07      	cmp	r2, #7
    550c:	f200 80d0 	bhi.w	56b0 <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    5510:	780b      	ldrb	r3, [r1, #0]
    5512:	2b09      	cmp	r3, #9
    5514:	d833      	bhi.n	557e <adc_nrfx_channel_setup+0x86>
    5516:	e8df f003 	tbb	[pc, r3]
    551a:	0508      	.short	0x0508
    551c:	32221e1a 	.word	0x32221e1a
    5520:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    5524:	2301      	movs	r3, #1
    5526:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    552a:	784b      	ldrb	r3, [r1, #1]
    552c:	2b03      	cmp	r3, #3
    552e:	d033      	beq.n	5598 <adc_nrfx_channel_setup+0xa0>
    5530:	2b04      	cmp	r3, #4
    5532:	d034      	beq.n	559e <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    5534:	4b60      	ldr	r3, [pc, #384]	; (56b8 <adc_nrfx_channel_setup+0x1c0>)
    5536:	9302      	str	r3, [sp, #8]
    5538:	2000      	movs	r0, #0
    553a:	9001      	str	r0, [sp, #4]
    553c:	9000      	str	r0, [sp, #0]
    553e:	4603      	mov	r3, r0
    5540:	2201      	movs	r2, #1
    5542:	495e      	ldr	r1, [pc, #376]	; (56bc <adc_nrfx_channel_setup+0x1c4>)
    5544:	f007 f8bd 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    5548:	f06f 0015 	mvn.w	r0, #21
    554c:	e091      	b.n	5672 <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    554e:	2302      	movs	r3, #2
    5550:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5554:	e7e9      	b.n	552a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    5556:	2303      	movs	r3, #3
    5558:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    555c:	e7e5      	b.n	552a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    555e:	2304      	movs	r3, #4
    5560:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5564:	e7e1      	b.n	552a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    5566:	2305      	movs	r3, #5
    5568:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    556c:	e7dd      	b.n	552a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    556e:	2306      	movs	r3, #6
    5570:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5574:	e7d9      	b.n	552a <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    5576:	2307      	movs	r3, #7
    5578:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    557c:	e7d5      	b.n	552a <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    557e:	4b50      	ldr	r3, [pc, #320]	; (56c0 <adc_nrfx_channel_setup+0x1c8>)
    5580:	9302      	str	r3, [sp, #8]
    5582:	2000      	movs	r0, #0
    5584:	9001      	str	r0, [sp, #4]
    5586:	9000      	str	r0, [sp, #0]
    5588:	4603      	mov	r3, r0
    558a:	2201      	movs	r2, #1
    558c:	494b      	ldr	r1, [pc, #300]	; (56bc <adc_nrfx_channel_setup+0x1c4>)
    558e:	f007 f898 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    5592:	f06f 0015 	mvn.w	r0, #21
    5596:	e06c      	b.n	5672 <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    5598:	2301      	movs	r3, #1
    559a:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    559e:	884b      	ldrh	r3, [r1, #2]
    55a0:	2b00      	cmp	r3, #0
    55a2:	d068      	beq.n	5676 <adc_nrfx_channel_setup+0x17e>
    55a4:	f244 0028 	movw	r0, #16424	; 0x4028
    55a8:	4283      	cmp	r3, r0
    55aa:	d874      	bhi.n	5696 <adc_nrfx_channel_setup+0x19e>
    55ac:	f244 0003 	movw	r0, #16387	; 0x4003
    55b0:	4283      	cmp	r3, r0
    55b2:	d370      	bcc.n	5696 <adc_nrfx_channel_setup+0x19e>
    55b4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    55b8:	3b03      	subs	r3, #3
    55ba:	2b25      	cmp	r3, #37	; 0x25
    55bc:	d86b      	bhi.n	5696 <adc_nrfx_channel_setup+0x19e>
    55be:	e8df f003 	tbb	[pc, r3]
    55c2:	6a16      	.short	0x6a16
    55c4:	6a6a6a13 	.word	0x6a6a6a13
    55c8:	6a6a5a6a 	.word	0x6a6a5a6a
    55cc:	6a5e6a6a 	.word	0x6a5e6a6a
    55d0:	626a6a6a 	.word	0x626a6a6a
    55d4:	6a6a6a6a 	.word	0x6a6a6a6a
    55d8:	6a6a6a6a 	.word	0x6a6a6a6a
    55dc:	6a6a6a6a 	.word	0x6a6a6a6a
    55e0:	6a6a6a6a 	.word	0x6a6a6a6a
    55e4:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    55e8:	2301      	movs	r3, #1
    55ea:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    55ee:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    55f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    55f4:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    55f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    55fc:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    5600:	f89d 0011 	ldrb.w	r0, [sp, #17]
    5604:	0100      	lsls	r0, r0, #4
    5606:	f000 0030 	and.w	r0, r0, #48	; 0x30
    560a:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    560c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    5610:	0200      	lsls	r0, r0, #8
    5612:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    5616:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    5618:	f89d 0013 	ldrb.w	r0, [sp, #19]
    561c:	0300      	lsls	r0, r0, #12
    561e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    5622:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    5624:	f89d 0014 	ldrb.w	r0, [sp, #20]
    5628:	0400      	lsls	r0, r0, #16
    562a:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    562e:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    5630:	f89d 0015 	ldrb.w	r0, [sp, #21]
    5634:	0500      	lsls	r0, r0, #20
    5636:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    563a:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    563c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    5640:	0600      	lsls	r0, r0, #24
    5642:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    5646:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    5648:	4c1e      	ldr	r4, [pc, #120]	; (56c4 <adc_nrfx_channel_setup+0x1cc>)
    564a:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    564e:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    5652:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    5654:	f102 0351 	add.w	r3, r2, #81	; 0x51
    5658:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    565c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    5660:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    5662:	2000      	movs	r0, #0
    5664:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    5668:	7949      	ldrb	r1, [r1, #5]
    566a:	4b17      	ldr	r3, [pc, #92]	; (56c8 <adc_nrfx_channel_setup+0x1d0>)
    566c:	441a      	add	r2, r3
    566e:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    5672:	b006      	add	sp, #24
    5674:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    5676:	2302      	movs	r3, #2
    5678:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    567c:	e7b7      	b.n	55ee <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    567e:	2303      	movs	r3, #3
    5680:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5684:	e7b3      	b.n	55ee <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    5686:	2304      	movs	r3, #4
    5688:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    568c:	e7af      	b.n	55ee <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    568e:	2305      	movs	r3, #5
    5690:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5694:	e7ab      	b.n	55ee <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    5696:	4b0d      	ldr	r3, [pc, #52]	; (56cc <adc_nrfx_channel_setup+0x1d4>)
    5698:	9302      	str	r3, [sp, #8]
    569a:	2000      	movs	r0, #0
    569c:	9001      	str	r0, [sp, #4]
    569e:	9000      	str	r0, [sp, #0]
    56a0:	4603      	mov	r3, r0
    56a2:	2201      	movs	r2, #1
    56a4:	4905      	ldr	r1, [pc, #20]	; (56bc <adc_nrfx_channel_setup+0x1c4>)
    56a6:	f007 f80c 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    56aa:	f06f 0015 	mvn.w	r0, #21
    56ae:	e7e0      	b.n	5672 <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    56b0:	f06f 0015 	mvn.w	r0, #21
    56b4:	e7dd      	b.n	5672 <adc_nrfx_channel_setup+0x17a>
    56b6:	bf00      	nop
    56b8:	0000eec4 	.word	0x0000eec4
    56bc:	0000d464 	.word	0x0000d464
    56c0:	0000eea4 	.word	0x0000eea4
    56c4:	40007000 	.word	0x40007000
    56c8:	20000000 	.word	0x20000000
    56cc:	0000eee8 	.word	0x0000eee8

000056d0 <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    56d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56d2:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    56d4:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    56d6:	b136      	cbz	r6, 56e6 <start_read+0x16>
    56d8:	460d      	mov	r5, r1
    56da:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    56de:	d102      	bne.n	56e6 <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    56e0:	2300      	movs	r3, #0
	active_channels = 0U;
    56e2:	461c      	mov	r4, r3
    56e4:	e024      	b.n	5730 <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    56e6:	4b54      	ldr	r3, [pc, #336]	; (5838 <start_read+0x168>)
    56e8:	9302      	str	r3, [sp, #8]
    56ea:	2000      	movs	r0, #0
    56ec:	9001      	str	r0, [sp, #4]
    56ee:	9000      	str	r0, [sp, #0]
    56f0:	4603      	mov	r3, r0
    56f2:	2201      	movs	r2, #1
    56f4:	4951      	ldr	r1, [pc, #324]	; (583c <start_read+0x16c>)
    56f6:	f006 ffe4 	bl	c6c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    56fa:	f06f 0315 	mvn.w	r3, #21
    56fe:	e03f      	b.n	5780 <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    5700:	9303      	str	r3, [sp, #12]
    5702:	4b4f      	ldr	r3, [pc, #316]	; (5840 <start_read+0x170>)
    5704:	9302      	str	r3, [sp, #8]
    5706:	2000      	movs	r0, #0
    5708:	9001      	str	r0, [sp, #4]
    570a:	9000      	str	r0, [sp, #0]
    570c:	4603      	mov	r3, r0
    570e:	2201      	movs	r2, #1
    5710:	494a      	ldr	r1, [pc, #296]	; (583c <start_read+0x16c>)
    5712:	f006 ffd6 	bl	c6c2 <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    5716:	f06f 0315 	mvn.w	r3, #21
    571a:	e031      	b.n	5780 <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    571c:	f103 0251 	add.w	r2, r3, #81	; 0x51
    5720:	0112      	lsls	r2, r2, #4
    5722:	4948      	ldr	r1, [pc, #288]	; (5844 <start_read+0x174>)
    5724:	2000      	movs	r0, #0
    5726:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    5728:	3301      	adds	r3, #1
    572a:	b2db      	uxtb	r3, r3
    572c:	2b07      	cmp	r3, #7
    572e:	d822      	bhi.n	5776 <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    5730:	461a      	mov	r2, r3
    5732:	fa26 f103 	lsr.w	r1, r6, r3
    5736:	f011 0f01 	tst.w	r1, #1
    573a:	d0ef      	beq.n	571c <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    573c:	4942      	ldr	r1, [pc, #264]	; (5848 <start_read+0x178>)
    573e:	4419      	add	r1, r3
    5740:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    5744:	2f00      	cmp	r7, #0
    5746:	d0db      	beq.n	5700 <start_read+0x30>
				(sequence->oversampling != 0U ?
    5748:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    574a:	1e01      	subs	r1, r0, #0
    574c:	bf18      	it	ne
    574e:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    5750:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 5844 <start_read+0x174>
    5754:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    5758:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    575c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    5760:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    5764:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    5768:	3251      	adds	r2, #81	; 0x51
    576a:	0112      	lsls	r2, r2, #4
    576c:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    5770:	3401      	adds	r4, #1
    5772:	b2e4      	uxtb	r4, r4
    5774:	e7d8      	b.n	5728 <start_read+0x58>

	error = set_resolution(sequence);
    5776:	4628      	mov	r0, r5
    5778:	f7ff fe32 	bl	53e0 <set_resolution>
	if (error) {
    577c:	4603      	mov	r3, r0
    577e:	b110      	cbz	r0, 5786 <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    5780:	4618      	mov	r0, r3
    5782:	b005      	add	sp, #20
    5784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    5786:	4621      	mov	r1, r4
    5788:	4628      	mov	r0, r5
    578a:	f7ff fe59 	bl	5440 <set_oversampling>
	if (error) {
    578e:	4603      	mov	r3, r0
    5790:	2800      	cmp	r0, #0
    5792:	d1f5      	bne.n	5780 <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    5794:	4621      	mov	r1, r4
    5796:	4628      	mov	r0, r5
    5798:	f7ff fe8c 	bl	54b4 <check_buffer_size>
	if (error) {
    579c:	4603      	mov	r3, r0
    579e:	2800      	cmp	r0, #0
    57a0:	d1ee      	bne.n	5780 <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    57a2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    57a4:	4b27      	ldr	r3, [pc, #156]	; (5844 <start_read+0x174>)
    57a6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    57aa:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    57ae:	4f26      	ldr	r7, [pc, #152]	; (5848 <start_read+0x178>)
    57b0:	f107 0464 	add.w	r4, r7, #100	; 0x64
    57b4:	462e      	mov	r6, r5
    57b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    57b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    57ba:	6833      	ldr	r3, [r6, #0]
    57bc:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    57be:	2300      	movs	r3, #0
    57c0:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    57c2:	682b      	ldr	r3, [r5, #0]
    57c4:	b14b      	cbz	r3, 57da <start_read+0x10a>
		ctx->options = *sequence->options;
    57c6:	f107 0478 	add.w	r4, r7, #120	; 0x78
    57ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    57cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    57d0:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    57d2:	2300      	movs	r3, #0
    57d4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    57d8:	b968      	cbnz	r0, 57f6 <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    57da:	481b      	ldr	r0, [pc, #108]	; (5848 <start_read+0x178>)
    57dc:	f7ff fde0 	bl	53a0 <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    57e0:	4c19      	ldr	r4, [pc, #100]	; (5848 <start_read+0x178>)
    57e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
    57ee:	f004 f8b1 	bl	9954 <z_impl_k_sem_take>
	return ctx->status;
    57f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    57f4:	e7c4      	b.n	5780 <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    57f6:	463c      	mov	r4, r7
    57f8:	2300      	movs	r3, #0
    57fa:	f3bf 8f5b 	dmb	ish
    57fe:	e854 2f00 	ldrex	r2, [r4]
    5802:	e844 3100 	strex	r1, r3, [r4]
    5806:	2900      	cmp	r1, #0
    5808:	d1f9      	bne.n	57fe <start_read+0x12e>
    580a:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    580e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    5810:	0c59      	lsrs	r1, r3, #17
    5812:	03db      	lsls	r3, r3, #15
    5814:	480d      	ldr	r0, [pc, #52]	; (584c <start_read+0x17c>)
    5816:	1818      	adds	r0, r3, r0
    5818:	4a0d      	ldr	r2, [pc, #52]	; (5850 <start_read+0x180>)
    581a:	f04f 0300 	mov.w	r3, #0
    581e:	f141 0100 	adc.w	r1, r1, #0
    5822:	f7fa fe4f 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    5826:	9000      	str	r0, [sp, #0]
    5828:	9101      	str	r1, [sp, #4]
    582a:	2200      	movs	r2, #0
    582c:	2300      	movs	r3, #0
    582e:	f104 0008 	add.w	r0, r4, #8
    5832:	f006 f8bb 	bl	b9ac <z_impl_k_timer_start>
}
    5836:	e7d3      	b.n	57e0 <start_read+0x110>
    5838:	0000ef14 	.word	0x0000ef14
    583c:	0000d464 	.word	0x0000d464
    5840:	0000ef34 	.word	0x0000ef34
    5844:	40007000 	.word	0x40007000
    5848:	20000000 	.word	0x20000000
    584c:	000f423f 	.word	0x000f423f
    5850:	000f4240 	.word	0x000f4240

00005854 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    5854:	b570      	push	{r4, r5, r6, lr}
    5856:	4604      	mov	r4, r0
    5858:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    585a:	4e09      	ldr	r6, [pc, #36]	; (5880 <adc_nrfx_read+0x2c>)
    585c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5864:	4630      	mov	r0, r6
    5866:	f004 f875 	bl	9954 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    586a:	4629      	mov	r1, r5
    586c:	4620      	mov	r0, r4
    586e:	f7ff ff2f 	bl	56d0 <start_read>
    5872:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5874:	4630      	mov	r0, r6
    5876:	f004 f829 	bl	98cc <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    587a:	4620      	mov	r0, r4
    587c:	bd70      	pop	{r4, r5, r6, pc}
    587e:	bf00      	nop
    5880:	20000040 	.word	0x20000040

00005884 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    5884:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5886:	4b0f      	ldr	r3, [pc, #60]	; (58c4 <init_saadc+0x40>)
    5888:	2400      	movs	r4, #0
    588a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    588e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    5892:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    5896:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    589a:	2212      	movs	r2, #18
    589c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    58a0:	2007      	movs	r0, #7
    58a2:	f7fe fe3b 	bl	451c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    58a6:	4622      	mov	r2, r4
    58a8:	2101      	movs	r1, #1
    58aa:	2007      	movs	r0, #7
    58ac:	f7fe fe52 	bl	4554 <z_arm_irq_priority_set>
	return sem->count;
    58b0:	4b05      	ldr	r3, [pc, #20]	; (58c8 <init_saadc+0x44>)
    58b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    58b4:	b10b      	cbz	r3, 58ba <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    58b6:	2000      	movs	r0, #0
    58b8:	bd10      	pop	{r4, pc}
    58ba:	4804      	ldr	r0, [pc, #16]	; (58cc <init_saadc+0x48>)
    58bc:	f004 f806 	bl	98cc <z_impl_k_sem_give>
}
    58c0:	e7f9      	b.n	58b6 <init_saadc+0x32>
    58c2:	bf00      	nop
    58c4:	40007000 	.word	0x40007000
    58c8:	20000000 	.word	0x20000000
    58cc:	20000040 	.word	0x20000040

000058d0 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58d0:	4b36      	ldr	r3, [pc, #216]	; (59ac <saadc_irq_handler+0xdc>)
    58d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    58d6:	b97b      	cbnz	r3, 58f8 <saadc_irq_handler+0x28>
    58d8:	4b34      	ldr	r3, [pc, #208]	; (59ac <saadc_irq_handler+0xdc>)
    58da:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    58de:	2b00      	cmp	r3, #0
    58e0:	d062      	beq.n	59a8 <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58e2:	4b32      	ldr	r3, [pc, #200]	; (59ac <saadc_irq_handler+0xdc>)
    58e4:	2200      	movs	r2, #0
    58e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    58ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58ee:	2201      	movs	r2, #1
    58f0:	609a      	str	r2, [r3, #8]
    58f2:	601a      	str	r2, [r3, #0]
    58f4:	605a      	str	r2, [r3, #4]
}
    58f6:	4770      	bx	lr
{
    58f8:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58fa:	4b2c      	ldr	r3, [pc, #176]	; (59ac <saadc_irq_handler+0xdc>)
    58fc:	2200      	movs	r2, #0
    58fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5902:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5906:	2101      	movs	r1, #1
    5908:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    590a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    590e:	4b28      	ldr	r3, [pc, #160]	; (59b0 <saadc_irq_handler+0xe0>)
    5910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5912:	b313      	cbz	r3, 595a <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    5914:	4b26      	ldr	r3, [pc, #152]	; (59b0 <saadc_irq_handler+0xe0>)
    5916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    5918:	b143      	cbz	r3, 592c <saadc_irq_handler+0x5c>
			action = callback(dev,
    591a:	4925      	ldr	r1, [pc, #148]	; (59b0 <saadc_irq_handler+0xe0>)
    591c:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    5920:	3164      	adds	r1, #100	; 0x64
    5922:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    5924:	2801      	cmp	r0, #1
    5926:	d00f      	beq.n	5948 <saadc_irq_handler+0x78>
    5928:	2802      	cmp	r0, #2
    592a:	d010      	beq.n	594e <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    592c:	4a20      	ldr	r2, [pc, #128]	; (59b0 <saadc_irq_handler+0xe0>)
    592e:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    5932:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    5936:	4293      	cmp	r3, r2
    5938:	d213      	bcs.n	5962 <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    593a:	3301      	adds	r3, #1
    593c:	4a1c      	ldr	r2, [pc, #112]	; (59b0 <saadc_irq_handler+0xe0>)
    593e:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    5942:	2100      	movs	r1, #0
		bool finish = false;
    5944:	460b      	mov	r3, r1
    5946:	e004      	b.n	5952 <saadc_irq_handler+0x82>
		switch (action) {
    5948:	2101      	movs	r1, #1
    594a:	2300      	movs	r3, #0
    594c:	e001      	b.n	5952 <saadc_irq_handler+0x82>
		bool repeat = false;
    594e:	2100      	movs	r1, #0
			finish = true;
    5950:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    5952:	b14b      	cbz	r3, 5968 <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    5954:	4b16      	ldr	r3, [pc, #88]	; (59b0 <saadc_irq_handler+0xe0>)
    5956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    5958:	bb13      	cbnz	r3, 59a0 <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    595a:	4816      	ldr	r0, [pc, #88]	; (59b4 <saadc_irq_handler+0xe4>)
    595c:	f003 ffb6 	bl	98cc <z_impl_k_sem_give>
}
    5960:	bd10      	pop	{r4, pc}
		bool repeat = false;
    5962:	2100      	movs	r1, #0
				finish = true;
    5964:	2301      	movs	r3, #1
    5966:	e7f4      	b.n	5952 <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    5968:	4c11      	ldr	r4, [pc, #68]	; (59b0 <saadc_irq_handler+0xe0>)
    596a:	4620      	mov	r0, r4
    596c:	f7ff fd2a 	bl	53c4 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    5970:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    5972:	b91b      	cbnz	r3, 597c <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    5974:	4620      	mov	r0, r4
    5976:	f7ff fd13 	bl	53a0 <adc_context_start_sampling>
    597a:	e7f1      	b.n	5960 <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    597c:	4b0c      	ldr	r3, [pc, #48]	; (59b0 <saadc_irq_handler+0xe0>)
    597e:	f3bf 8f5b 	dmb	ish
    5982:	e853 2f00 	ldrex	r2, [r3]
    5986:	1e51      	subs	r1, r2, #1
    5988:	e843 1000 	strex	r0, r1, [r3]
    598c:	2800      	cmp	r0, #0
    598e:	d1f8      	bne.n	5982 <saadc_irq_handler+0xb2>
    5990:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    5994:	2a01      	cmp	r2, #1
    5996:	dde3      	ble.n	5960 <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    5998:	4618      	mov	r0, r3
    599a:	f7ff fd01 	bl	53a0 <adc_context_start_sampling>
			return;
    599e:	e7df      	b.n	5960 <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    59a0:	4805      	ldr	r0, [pc, #20]	; (59b8 <saadc_irq_handler+0xe8>)
    59a2:	f007 fbf1 	bl	d188 <z_impl_k_timer_stop>
}
    59a6:	e7d8      	b.n	595a <saadc_irq_handler+0x8a>
    59a8:	4770      	bx	lr
    59aa:	bf00      	nop
    59ac:	40007000 	.word	0x40007000
    59b0:	20000000 	.word	0x20000000
    59b4:	20000050 	.word	0x20000050
    59b8:	20000008 	.word	0x20000008

000059bc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    59bc:	4800      	ldr	r0, [pc, #0]	; (59c0 <get_hf_flags+0x4>)
    59be:	4770      	bx	lr
    59c0:	20000d28 	.word	0x20000d28

000059c4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    59c4:	4b01      	ldr	r3, [pc, #4]	; (59cc <get_subsys+0x8>)
    59c6:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    59c8:	1140      	asrs	r0, r0, #5
    59ca:	4770      	bx	lr
    59cc:	20000ce0 	.word	0x20000ce0

000059d0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    59d0:	b530      	push	{r4, r5, lr}
    59d2:	b083      	sub	sp, #12
    59d4:	4605      	mov	r5, r0
    59d6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    59d8:	f7ff fff4 	bl	59c4 <get_subsys>
    59dc:	4601      	mov	r1, r0
    59de:	2340      	movs	r3, #64	; 0x40
    59e0:	9300      	str	r3, [sp, #0]
    59e2:	4623      	mov	r3, r4
    59e4:	4a05      	ldr	r2, [pc, #20]	; (59fc <onoff_start+0x2c>)
    59e6:	4806      	ldr	r0, [pc, #24]	; (5a00 <onoff_start+0x30>)
    59e8:	f006 fee7 	bl	c7ba <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    59ec:	1e01      	subs	r1, r0, #0
    59ee:	db01      	blt.n	59f4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    59f0:	b003      	add	sp, #12
    59f2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    59f4:	4628      	mov	r0, r5
    59f6:	47a0      	blx	r4
}
    59f8:	e7fa      	b.n	59f0 <onoff_start+0x20>
    59fa:	bf00      	nop
    59fc:	0000c803 	.word	0x0000c803
    5a00:	0000d254 	.word	0x0000d254

00005a04 <generic_hfclk_stop>:
{
    5a04:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a06:	4b0a      	ldr	r3, [pc, #40]	; (5a30 <generic_hfclk_stop+0x2c>)
    5a08:	f3bf 8f5b 	dmb	ish
    5a0c:	e853 2f00 	ldrex	r2, [r3]
    5a10:	f022 0102 	bic.w	r1, r2, #2
    5a14:	e843 1000 	strex	r0, r1, [r3]
    5a18:	2800      	cmp	r0, #0
    5a1a:	d1f7      	bne.n	5a0c <generic_hfclk_stop+0x8>
    5a1c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5a20:	f012 0f01 	tst.w	r2, #1
    5a24:	d000      	beq.n	5a28 <generic_hfclk_stop+0x24>
}
    5a26:	bd08      	pop	{r3, pc}
	hfclk_stop();
    5a28:	f006 fefd 	bl	c826 <hfclk_stop>
    5a2c:	e7fb      	b.n	5a26 <generic_hfclk_stop+0x22>
    5a2e:	bf00      	nop
    5a30:	20000d38 	.word	0x20000d38

00005a34 <get_status>:
{
    5a34:	b570      	push	{r4, r5, r6, lr}
    5a36:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5a38:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5a3a:	2c01      	cmp	r4, #1
    5a3c:	d807      	bhi.n	5a4e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5a3e:	4621      	mov	r1, r4
    5a40:	4628      	mov	r0, r5
    5a42:	f006 fe4d 	bl	c6e0 <get_sub_data>
    5a46:	6880      	ldr	r0, [r0, #8]
}
    5a48:	f000 0007 	and.w	r0, r0, #7
    5a4c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5a4e:	4e06      	ldr	r6, [pc, #24]	; (5a68 <get_status+0x34>)
    5a50:	2379      	movs	r3, #121	; 0x79
    5a52:	4632      	mov	r2, r6
    5a54:	4905      	ldr	r1, [pc, #20]	; (5a6c <get_status+0x38>)
    5a56:	4806      	ldr	r0, [pc, #24]	; (5a70 <get_status+0x3c>)
    5a58:	f006 fc10 	bl	c27c <assert_print>
    5a5c:	2179      	movs	r1, #121	; 0x79
    5a5e:	4630      	mov	r0, r6
    5a60:	f006 fc05 	bl	c26e <assert_post_action>
    5a64:	e7eb      	b.n	5a3e <get_status+0xa>
    5a66:	bf00      	nop
    5a68:	0000ef6c 	.word	0x0000ef6c
    5a6c:	0000efac 	.word	0x0000efac
    5a70:	0000d63c 	.word	0x0000d63c

00005a74 <stop>:
{
    5a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a78:	4607      	mov	r7, r0
    5a7a:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5a7c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5a7e:	4621      	mov	r1, r4
    5a80:	f006 fe2e 	bl	c6e0 <get_sub_data>
    5a84:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5a86:	2c01      	cmp	r4, #1
    5a88:	d80f      	bhi.n	5aaa <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    5a8a:	4631      	mov	r1, r6
    5a8c:	f105 0008 	add.w	r0, r5, #8
    5a90:	f006 fe37 	bl	c702 <set_off_state>
	if (err < 0) {
    5a94:	2800      	cmp	r0, #0
    5a96:	db06      	blt.n	5aa6 <stop+0x32>
	get_sub_config(dev, type)->stop();
    5a98:	4621      	mov	r1, r4
    5a9a:	4638      	mov	r0, r7
    5a9c:	f006 fe27 	bl	c6ee <get_sub_config>
    5aa0:	6843      	ldr	r3, [r0, #4]
    5aa2:	4798      	blx	r3
	return 0;
    5aa4:	2000      	movs	r0, #0
}
    5aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5aaa:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5ac8 <stop+0x54>
    5aae:	f240 134d 	movw	r3, #333	; 0x14d
    5ab2:	4642      	mov	r2, r8
    5ab4:	4905      	ldr	r1, [pc, #20]	; (5acc <stop+0x58>)
    5ab6:	4806      	ldr	r0, [pc, #24]	; (5ad0 <stop+0x5c>)
    5ab8:	f006 fbe0 	bl	c27c <assert_print>
    5abc:	f240 114d 	movw	r1, #333	; 0x14d
    5ac0:	4640      	mov	r0, r8
    5ac2:	f006 fbd4 	bl	c26e <assert_post_action>
    5ac6:	e7e0      	b.n	5a8a <stop+0x16>
    5ac8:	0000ef6c 	.word	0x0000ef6c
    5acc:	0000efac 	.word	0x0000efac
    5ad0:	0000d63c 	.word	0x0000d63c

00005ad4 <onoff_stop>:
{
    5ad4:	b538      	push	{r3, r4, r5, lr}
    5ad6:	4605      	mov	r5, r0
    5ad8:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5ada:	f7ff ff73 	bl	59c4 <get_subsys>
    5ade:	4601      	mov	r1, r0
    5ae0:	2240      	movs	r2, #64	; 0x40
    5ae2:	4803      	ldr	r0, [pc, #12]	; (5af0 <onoff_stop+0x1c>)
    5ae4:	f7ff ffc6 	bl	5a74 <stop>
    5ae8:	4601      	mov	r1, r0
	notify(mgr, res);
    5aea:	4628      	mov	r0, r5
    5aec:	47a0      	blx	r4
}
    5aee:	bd38      	pop	{r3, r4, r5, pc}
    5af0:	0000d254 	.word	0x0000d254

00005af4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    5af4:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    5af6:	2801      	cmp	r0, #1
    5af8:	d01d      	beq.n	5b36 <clock_event_handler+0x42>
    5afa:	2803      	cmp	r0, #3
    5afc:	d020      	beq.n	5b40 <clock_event_handler+0x4c>
    5afe:	b168      	cbz	r0, 5b1c <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    5b00:	4c16      	ldr	r4, [pc, #88]	; (5b5c <clock_event_handler+0x68>)
    5b02:	f240 2362 	movw	r3, #610	; 0x262
    5b06:	4622      	mov	r2, r4
    5b08:	4915      	ldr	r1, [pc, #84]	; (5b60 <clock_event_handler+0x6c>)
    5b0a:	4816      	ldr	r0, [pc, #88]	; (5b64 <clock_event_handler+0x70>)
    5b0c:	f006 fbb6 	bl	c27c <assert_print>
    5b10:	f240 2162 	movw	r1, #610	; 0x262
    5b14:	4620      	mov	r0, r4
    5b16:	f006 fbaa 	bl	c26e <assert_post_action>
		break;
	}
}
    5b1a:	e010      	b.n	5b3e <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5b1c:	2100      	movs	r1, #0
    5b1e:	4812      	ldr	r0, [pc, #72]	; (5b68 <clock_event_handler+0x74>)
    5b20:	f006 fdde 	bl	c6e0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5b24:	6883      	ldr	r3, [r0, #8]
    5b26:	f013 0f07 	tst.w	r3, #7
    5b2a:	d108      	bne.n	5b3e <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5b2c:	2100      	movs	r1, #0
    5b2e:	480e      	ldr	r0, [pc, #56]	; (5b68 <clock_event_handler+0x74>)
    5b30:	f006 fe31 	bl	c796 <clkstarted_handle>
    5b34:	e003      	b.n	5b3e <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5b36:	2101      	movs	r1, #1
    5b38:	480b      	ldr	r0, [pc, #44]	; (5b68 <clock_event_handler+0x74>)
    5b3a:	f006 fe2c 	bl	c796 <clkstarted_handle>
}
    5b3e:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    5b40:	4c06      	ldr	r4, [pc, #24]	; (5b5c <clock_event_handler+0x68>)
    5b42:	f240 235e 	movw	r3, #606	; 0x25e
    5b46:	4622      	mov	r2, r4
    5b48:	4905      	ldr	r1, [pc, #20]	; (5b60 <clock_event_handler+0x6c>)
    5b4a:	4806      	ldr	r0, [pc, #24]	; (5b64 <clock_event_handler+0x70>)
    5b4c:	f006 fb96 	bl	c27c <assert_print>
    5b50:	f240 215e 	movw	r1, #606	; 0x25e
    5b54:	4620      	mov	r0, r4
    5b56:	f006 fb8a 	bl	c26e <assert_post_action>
		break;
    5b5a:	e7f0      	b.n	5b3e <clock_event_handler+0x4a>
    5b5c:	0000ef6c 	.word	0x0000ef6c
    5b60:	0000d800 	.word	0x0000d800
    5b64:	0000d63c 	.word	0x0000d63c
    5b68:	0000d254 	.word	0x0000d254

00005b6c <api_blocking_start>:
{
    5b6c:	b500      	push	{lr}
    5b6e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5b70:	f8cd d000 	str.w	sp, [sp]
    5b74:	f8cd d004 	str.w	sp, [sp, #4]
    5b78:	2300      	movs	r3, #0
    5b7a:	9302      	str	r3, [sp, #8]
    5b7c:	2301      	movs	r3, #1
    5b7e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5b80:	466b      	mov	r3, sp
    5b82:	4a07      	ldr	r2, [pc, #28]	; (5ba0 <api_blocking_start+0x34>)
    5b84:	f006 fe35 	bl	c7f2 <api_start>
	if (err < 0) {
    5b88:	2800      	cmp	r0, #0
    5b8a:	db05      	blt.n	5b98 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    5b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5b90:	2300      	movs	r3, #0
    5b92:	4668      	mov	r0, sp
    5b94:	f003 fede 	bl	9954 <z_impl_k_sem_take>
}
    5b98:	b005      	add	sp, #20
    5b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b9e:	bf00      	nop
    5ba0:	0000c845 	.word	0x0000c845

00005ba4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5ba4:	b570      	push	{r4, r5, r6, lr}
    5ba6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ba8:	2200      	movs	r2, #0
    5baa:	2101      	movs	r1, #1
    5bac:	4610      	mov	r0, r2
    5bae:	f7fe fcd1 	bl	4554 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5bb2:	4811      	ldr	r0, [pc, #68]	; (5bf8 <clk_init+0x54>)
    5bb4:	f001 fd8c 	bl	76d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5bb8:	4b10      	ldr	r3, [pc, #64]	; (5bfc <clk_init+0x58>)
    5bba:	4298      	cmp	r0, r3
    5bbc:	d119      	bne.n	5bf2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5bbe:	f001 fdb1 	bl	7724 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    5bc2:	2400      	movs	r4, #0
    5bc4:	2c01      	cmp	r4, #1
    5bc6:	d812      	bhi.n	5bee <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5bc8:	4621      	mov	r1, r4
    5bca:	4630      	mov	r0, r6
    5bcc:	f006 fd88 	bl	c6e0 <get_sub_data>
    5bd0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5bd2:	4621      	mov	r1, r4
    5bd4:	4630      	mov	r0, r6
    5bd6:	f006 fd90 	bl	c6fa <get_onoff_manager>
    5bda:	4909      	ldr	r1, [pc, #36]	; (5c00 <clk_init+0x5c>)
    5bdc:	f006 fa57 	bl	c08e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5be0:	2800      	cmp	r0, #0
    5be2:	db05      	blt.n	5bf0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5be4:	2301      	movs	r3, #1
    5be6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5be8:	441c      	add	r4, r3
    5bea:	b2e4      	uxtb	r4, r4
    5bec:	e7ea      	b.n	5bc4 <clk_init+0x20>
	}

	return 0;
    5bee:	2000      	movs	r0, #0
}
    5bf0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5bf2:	f06f 0004 	mvn.w	r0, #4
    5bf6:	e7fb      	b.n	5bf0 <clk_init+0x4c>
    5bf8:	00005af5 	.word	0x00005af5
    5bfc:	0bad0000 	.word	0x0bad0000
    5c00:	0000f028 	.word	0x0000f028

00005c04 <lfclk_spinwait>:
{
    5c04:	b570      	push	{r4, r5, r6, lr}
    5c06:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5c08:	2801      	cmp	r0, #1
    5c0a:	d107      	bne.n	5c1c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5c14:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5c18:	2b01      	cmp	r3, #1
    5c1a:	d05a      	beq.n	5cd2 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5c1c:	f007 fa1a 	bl	d054 <k_is_in_isr>
    5c20:	b928      	cbnz	r0, 5c2e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    5c22:	4b2f      	ldr	r3, [pc, #188]	; (5ce0 <lfclk_spinwait+0xdc>)
    5c24:	781b      	ldrb	r3, [r3, #0]
    5c26:	2b00      	cmp	r3, #0
    5c28:	d043      	beq.n	5cb2 <lfclk_spinwait+0xae>
    5c2a:	2300      	movs	r3, #0
    5c2c:	e000      	b.n	5c30 <lfclk_spinwait+0x2c>
    5c2e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    5c30:	461c      	mov	r4, r3
    5c32:	2b00      	cmp	r3, #0
    5c34:	d03f      	beq.n	5cb6 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    5c36:	f04f 0320 	mov.w	r3, #32
    5c3a:	f3ef 8611 	mrs	r6, BASEPRI
    5c3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c42:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    5c46:	b924      	cbnz	r4, 5c52 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    5c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c4c:	2202      	movs	r2, #2
    5c4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5c56:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5c5a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c5e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5c62:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5c66:	d12d      	bne.n	5cc4 <lfclk_spinwait+0xc0>
    return false;
    5c68:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5c6a:	b11a      	cbz	r2, 5c74 <lfclk_spinwait+0x70>
    5c6c:	2b01      	cmp	r3, #1
    5c6e:	d02b      	beq.n	5cc8 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5c70:	2d01      	cmp	r5, #1
    5c72:	d029      	beq.n	5cc8 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5c74:	b30c      	cbz	r4, 5cba <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5c76:	4630      	mov	r0, r6
    5c78:	f7fe fbfc 	bl	4474 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c80:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5c84:	2b00      	cmp	r3, #0
    5c86:	d1e4      	bne.n	5c52 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5c90:	2b00      	cmp	r3, #0
    5c92:	d0de      	beq.n	5c52 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c98:	2200      	movs	r2, #0
    5c9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5c9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5ca2:	2201      	movs	r2, #1
    5ca4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ca8:	490e      	ldr	r1, [pc, #56]	; (5ce4 <lfclk_spinwait+0xe0>)
    5caa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cae:	609a      	str	r2, [r3, #8]
}
    5cb0:	e7cf      	b.n	5c52 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5cb2:	2301      	movs	r3, #1
    5cb4:	e7bc      	b.n	5c30 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    5cb6:	2600      	movs	r6, #0
    5cb8:	e7c5      	b.n	5c46 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    5cba:	2021      	movs	r0, #33	; 0x21
    5cbc:	2100      	movs	r1, #0
    5cbe:	f005 f93d 	bl	af3c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5cc2:	e7db      	b.n	5c7c <lfclk_spinwait+0x78>
                return true;
    5cc4:	2201      	movs	r2, #1
    5cc6:	e7d0      	b.n	5c6a <lfclk_spinwait+0x66>
	if (isr_mode) {
    5cc8:	b124      	cbz	r4, 5cd4 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    5cca:	f386 8811 	msr	BASEPRI, r6
    5cce:	f3bf 8f6f 	isb	sy
}
    5cd2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    5cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd8:	2202      	movs	r2, #2
    5cda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5cde:	e7f8      	b.n	5cd2 <lfclk_spinwait+0xce>
    5ce0:	2000145a 	.word	0x2000145a
    5ce4:	e000e100 	.word	0xe000e100

00005ce8 <generic_hfclk_start>:
{
    5ce8:	b510      	push	{r4, lr}
	__asm__ volatile(
    5cea:	f04f 0320 	mov.w	r3, #32
    5cee:	f3ef 8411 	mrs	r4, BASEPRI
    5cf2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cf6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5cfa:	4a13      	ldr	r2, [pc, #76]	; (5d48 <generic_hfclk_start+0x60>)
    5cfc:	6813      	ldr	r3, [r2, #0]
    5cfe:	f043 0302 	orr.w	r3, r3, #2
    5d02:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5d04:	f013 0f01 	tst.w	r3, #1
    5d08:	d108      	bne.n	5d1c <generic_hfclk_start+0x34>
	bool already_started = false;
    5d0a:	2300      	movs	r3, #0
	__asm__ volatile(
    5d0c:	f384 8811 	msr	BASEPRI, r4
    5d10:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5d14:	b99b      	cbnz	r3, 5d3e <generic_hfclk_start+0x56>
	hfclk_start();
    5d16:	f006 fd7c 	bl	c812 <hfclk_start>
}
    5d1a:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d20:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5d24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5d28:	f012 0f01 	tst.w	r2, #1
    5d2c:	d101      	bne.n	5d32 <generic_hfclk_start+0x4a>
	bool already_started = false;
    5d2e:	2300      	movs	r3, #0
    5d30:	e7ec      	b.n	5d0c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    5d32:	f7ff fe43 	bl	59bc <get_hf_flags>
    5d36:	f006 fd1b 	bl	c770 <set_on_state>
			already_started = true;
    5d3a:	2301      	movs	r3, #1
    5d3c:	e7e6      	b.n	5d0c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    5d3e:	2100      	movs	r1, #0
    5d40:	4802      	ldr	r0, [pc, #8]	; (5d4c <generic_hfclk_start+0x64>)
    5d42:	f006 fd28 	bl	c796 <clkstarted_handle>
		return;
    5d46:	e7e8      	b.n	5d1a <generic_hfclk_start+0x32>
    5d48:	20000d38 	.word	0x20000d38
    5d4c:	0000d254 	.word	0x0000d254

00005d50 <z_nrf_clock_control_lf_on>:
{
    5d50:	b538      	push	{r3, r4, r5, lr}
    5d52:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5d54:	4b1f      	ldr	r3, [pc, #124]	; (5dd4 <z_nrf_clock_control_lf_on+0x84>)
    5d56:	2101      	movs	r1, #1
    5d58:	f3bf 8f5b 	dmb	ish
    5d5c:	e853 2f00 	ldrex	r2, [r3]
    5d60:	e843 1000 	strex	r0, r1, [r3]
    5d64:	2800      	cmp	r0, #0
    5d66:	d1f9      	bne.n	5d5c <z_nrf_clock_control_lf_on+0xc>
    5d68:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5d6c:	b142      	cbz	r2, 5d80 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    5d6e:	b134      	cbz	r4, 5d7e <z_nrf_clock_control_lf_on+0x2e>
    5d70:	1e63      	subs	r3, r4, #1
    5d72:	b2db      	uxtb	r3, r3
    5d74:	2b01      	cmp	r3, #1
    5d76:	d81f      	bhi.n	5db8 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    5d78:	4620      	mov	r0, r4
    5d7a:	f7ff ff43 	bl	5c04 <lfclk_spinwait>
}
    5d7e:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    5d80:	4815      	ldr	r0, [pc, #84]	; (5dd8 <z_nrf_clock_control_lf_on+0x88>)
    5d82:	f006 fcba 	bl	c6fa <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5d86:	4915      	ldr	r1, [pc, #84]	; (5ddc <z_nrf_clock_control_lf_on+0x8c>)
    5d88:	2300      	movs	r3, #0
    5d8a:	604b      	str	r3, [r1, #4]
    5d8c:	608b      	str	r3, [r1, #8]
    5d8e:	60cb      	str	r3, [r1, #12]
    5d90:	2301      	movs	r3, #1
    5d92:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5d94:	f7fc fdd4 	bl	2940 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    5d98:	2800      	cmp	r0, #0
    5d9a:	dae8      	bge.n	5d6e <z_nrf_clock_control_lf_on+0x1e>
    5d9c:	4d10      	ldr	r5, [pc, #64]	; (5de0 <z_nrf_clock_control_lf_on+0x90>)
    5d9e:	f44f 7308 	mov.w	r3, #544	; 0x220
    5da2:	462a      	mov	r2, r5
    5da4:	490f      	ldr	r1, [pc, #60]	; (5de4 <z_nrf_clock_control_lf_on+0x94>)
    5da6:	4810      	ldr	r0, [pc, #64]	; (5de8 <z_nrf_clock_control_lf_on+0x98>)
    5da8:	f006 fa68 	bl	c27c <assert_print>
    5dac:	f44f 7108 	mov.w	r1, #544	; 0x220
    5db0:	4628      	mov	r0, r5
    5db2:	f006 fa5c 	bl	c26e <assert_post_action>
    5db6:	e7da      	b.n	5d6e <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    5db8:	4c09      	ldr	r4, [pc, #36]	; (5de0 <z_nrf_clock_control_lf_on+0x90>)
    5dba:	f240 2332 	movw	r3, #562	; 0x232
    5dbe:	4622      	mov	r2, r4
    5dc0:	490a      	ldr	r1, [pc, #40]	; (5dec <z_nrf_clock_control_lf_on+0x9c>)
    5dc2:	4809      	ldr	r0, [pc, #36]	; (5de8 <z_nrf_clock_control_lf_on+0x98>)
    5dc4:	f006 fa5a 	bl	c27c <assert_print>
    5dc8:	f240 2132 	movw	r1, #562	; 0x232
    5dcc:	4620      	mov	r0, r4
    5dce:	f006 fa4e 	bl	c26e <assert_post_action>
    5dd2:	e7d4      	b.n	5d7e <z_nrf_clock_control_lf_on+0x2e>
    5dd4:	20000d3c 	.word	0x20000d3c
    5dd8:	0000d254 	.word	0x0000d254
    5ddc:	20000cd0 	.word	0x20000cd0
    5de0:	0000ef6c 	.word	0x0000ef6c
    5de4:	0000e434 	.word	0x0000e434
    5de8:	0000d63c 	.word	0x0000d63c
    5dec:	0000d800 	.word	0x0000d800

00005df0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5df0:	b510      	push	{r4, lr}
    5df2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5df4:	280a      	cmp	r0, #10
    5df6:	d007      	beq.n	5e08 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5df8:	4b07      	ldr	r3, [pc, #28]	; (5e18 <console_out+0x28>)
    5dfa:	6818      	ldr	r0, [r3, #0]
    5dfc:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    5dfe:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5e00:	685b      	ldr	r3, [r3, #4]
    5e02:	4798      	blx	r3

	return c;
}
    5e04:	4620      	mov	r0, r4
    5e06:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    5e08:	4b03      	ldr	r3, [pc, #12]	; (5e18 <console_out+0x28>)
    5e0a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    5e0c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5e0e:	685b      	ldr	r3, [r3, #4]
    5e10:	210d      	movs	r1, #13
    5e12:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    5e14:	e7f0      	b.n	5df8 <console_out+0x8>
    5e16:	bf00      	nop
    5e18:	20000d40 	.word	0x20000d40

00005e1c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    5e1c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    5e1e:	4c04      	ldr	r4, [pc, #16]	; (5e30 <uart_console_hook_install+0x14>)
    5e20:	4620      	mov	r0, r4
    5e22:	f7ff fa4f 	bl	52c4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    5e26:	4620      	mov	r0, r4
    5e28:	f7fc faf0 	bl	240c <__printk_hook_install>
#endif
}
    5e2c:	bd10      	pop	{r4, pc}
    5e2e:	bf00      	nop
    5e30:	00005df1 	.word	0x00005df1

00005e34 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5e34:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5e36:	4806      	ldr	r0, [pc, #24]	; (5e50 <uart_console_init+0x1c>)
    5e38:	4b06      	ldr	r3, [pc, #24]	; (5e54 <uart_console_init+0x20>)
    5e3a:	6018      	str	r0, [r3, #0]
    5e3c:	f007 f8ae 	bl	cf9c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5e40:	b118      	cbz	r0, 5e4a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    5e42:	f7ff ffeb 	bl	5e1c <uart_console_hook_install>

	return 0;
    5e46:	2000      	movs	r0, #0
}
    5e48:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5e4a:	f06f 0012 	mvn.w	r0, #18
    5e4e:	e7fb      	b.n	5e48 <uart_console_init+0x14>
    5e50:	0000d2b4 	.word	0x0000d2b4
    5e54:	20000d40 	.word	0x20000d40

00005e58 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5e58:	b128      	cbz	r0, 5e66 <get_dev+0xe>
    5e5a:	2801      	cmp	r0, #1
    5e5c:	d101      	bne.n	5e62 <get_dev+0xa>
    5e5e:	4803      	ldr	r0, [pc, #12]	; (5e6c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5e60:	4770      	bx	lr
	const struct device *dev = NULL;
    5e62:	2000      	movs	r0, #0
    5e64:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5e66:	4802      	ldr	r0, [pc, #8]	; (5e70 <get_dev+0x18>)
    5e68:	4770      	bx	lr
    5e6a:	bf00      	nop
    5e6c:	0000d26c 	.word	0x0000d26c
    5e70:	0000d284 	.word	0x0000d284

00005e74 <gpio_nrfx_manage_callback>:
{
    5e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e78:	4616      	mov	r6, r2
	return port->data;
    5e7a:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5e7c:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    5e7e:	460c      	mov	r4, r1
    5e80:	b131      	cbz	r1, 5e90 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    5e82:	6863      	ldr	r3, [r4, #4]
    5e84:	b1a3      	cbz	r3, 5eb0 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    5e86:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    5e88:	2b00      	cmp	r3, #0
    5e8a:	d03b      	beq.n	5f04 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e8c:	2100      	movs	r1, #0
    5e8e:	e02a      	b.n	5ee6 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    5e90:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5f28 <gpio_nrfx_manage_callback+0xb4>
    5e94:	2324      	movs	r3, #36	; 0x24
    5e96:	4642      	mov	r2, r8
    5e98:	4924      	ldr	r1, [pc, #144]	; (5f2c <gpio_nrfx_manage_callback+0xb8>)
    5e9a:	4825      	ldr	r0, [pc, #148]	; (5f30 <gpio_nrfx_manage_callback+0xbc>)
    5e9c:	f006 f9ee 	bl	c27c <assert_print>
    5ea0:	4824      	ldr	r0, [pc, #144]	; (5f34 <gpio_nrfx_manage_callback+0xc0>)
    5ea2:	f006 f9eb 	bl	c27c <assert_print>
    5ea6:	2124      	movs	r1, #36	; 0x24
    5ea8:	4640      	mov	r0, r8
    5eaa:	f006 f9e0 	bl	c26e <assert_post_action>
    5eae:	e7e8      	b.n	5e82 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5eb0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5f28 <gpio_nrfx_manage_callback+0xb4>
    5eb4:	2325      	movs	r3, #37	; 0x25
    5eb6:	4642      	mov	r2, r8
    5eb8:	491f      	ldr	r1, [pc, #124]	; (5f38 <gpio_nrfx_manage_callback+0xc4>)
    5eba:	481d      	ldr	r0, [pc, #116]	; (5f30 <gpio_nrfx_manage_callback+0xbc>)
    5ebc:	f006 f9de 	bl	c27c <assert_print>
    5ec0:	481e      	ldr	r0, [pc, #120]	; (5f3c <gpio_nrfx_manage_callback+0xc8>)
    5ec2:	f006 f9db 	bl	c27c <assert_print>
    5ec6:	2125      	movs	r1, #37	; 0x25
    5ec8:	4640      	mov	r0, r8
    5eca:	f006 f9d0 	bl	c26e <assert_post_action>
    5ece:	e7da      	b.n	5e86 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5ed0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5ed2:	606b      	str	r3, [r5, #4]
	return list->tail;
    5ed4:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5ed6:	4294      	cmp	r4, r2
    5ed8:	d10f      	bne.n	5efa <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5eda:	607b      	str	r3, [r7, #4]
}
    5edc:	e00d      	b.n	5efa <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5ede:	6079      	str	r1, [r7, #4]
}
    5ee0:	e00b      	b.n	5efa <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ee2:	4619      	mov	r1, r3
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	b15b      	cbz	r3, 5f00 <gpio_nrfx_manage_callback+0x8c>
    5ee8:	429c      	cmp	r4, r3
    5eea:	d1fa      	bne.n	5ee2 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    5eec:	2900      	cmp	r1, #0
    5eee:	d0ef      	beq.n	5ed0 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5ef0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5ef2:	600b      	str	r3, [r1, #0]
	return list->tail;
    5ef4:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5ef6:	429c      	cmp	r4, r3
    5ef8:	d0f1      	beq.n	5ede <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    5efa:	2300      	movs	r3, #0
    5efc:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5efe:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5f00:	b903      	cbnz	r3, 5f04 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    5f02:	b156      	cbz	r6, 5f1a <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5f04:	b166      	cbz	r6, 5f20 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    5f06:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    5f08:	6023      	str	r3, [r4, #0]
	list->head = node;
    5f0a:	606c      	str	r4, [r5, #4]
	return list->tail;
    5f0c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    5f0e:	b10b      	cbz	r3, 5f14 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5f10:	2000      	movs	r0, #0
    5f12:	e006      	b.n	5f22 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    5f14:	607c      	str	r4, [r7, #4]
    5f16:	2000      	movs	r0, #0
}
    5f18:	e003      	b.n	5f22 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    5f1a:	f06f 0015 	mvn.w	r0, #21
    5f1e:	e000      	b.n	5f22 <gpio_nrfx_manage_callback+0xae>
	return 0;
    5f20:	2000      	movs	r0, #0
}
    5f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f26:	bf00      	nop
    5f28:	0000f034 	.word	0x0000f034
    5f2c:	0000f064 	.word	0x0000f064
    5f30:	0000d63c 	.word	0x0000d63c
    5f34:	0000f070 	.word	0x0000f070
    5f38:	0000f080 	.word	0x0000f080
    5f3c:	0000f094 	.word	0x0000f094

00005f40 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5f44:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    5f48:	0940      	lsrs	r0, r0, #5
    5f4a:	f7ff ff85 	bl	5e58 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    5f4e:	b380      	cbz	r0, 5fb2 <nrfx_gpio_handler+0x72>
    5f50:	4607      	mov	r7, r0
	return port->data;
    5f52:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    5f54:	2601      	movs	r6, #1
    5f56:	40a6      	lsls	r6, r4
	return list->head;
    5f58:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5f5a:	b11c      	cbz	r4, 5f64 <nrfx_gpio_handler+0x24>
    5f5c:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5f5e:	b17c      	cbz	r4, 5f80 <nrfx_gpio_handler+0x40>
	return node->next;
    5f60:	6825      	ldr	r5, [r4, #0]
    5f62:	e00d      	b.n	5f80 <nrfx_gpio_handler+0x40>
    5f64:	4625      	mov	r5, r4
    5f66:	e00b      	b.n	5f80 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5f68:	6863      	ldr	r3, [r4, #4]
    5f6a:	68a2      	ldr	r2, [r4, #8]
    5f6c:	4032      	ands	r2, r6
    5f6e:	4621      	mov	r1, r4
    5f70:	4638      	mov	r0, r7
    5f72:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5f74:	b1dd      	cbz	r5, 5fae <nrfx_gpio_handler+0x6e>
    5f76:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5f78:	b105      	cbz	r5, 5f7c <nrfx_gpio_handler+0x3c>
	return node->next;
    5f7a:	682b      	ldr	r3, [r5, #0]
    5f7c:	462c      	mov	r4, r5
    5f7e:	461d      	mov	r5, r3
    5f80:	b1bc      	cbz	r4, 5fb2 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    5f82:	68a3      	ldr	r3, [r4, #8]
    5f84:	421e      	tst	r6, r3
    5f86:	d0f5      	beq.n	5f74 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    5f88:	6863      	ldr	r3, [r4, #4]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d1ec      	bne.n	5f68 <nrfx_gpio_handler+0x28>
    5f8e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5fb8 <nrfx_gpio_handler+0x78>
    5f92:	2345      	movs	r3, #69	; 0x45
    5f94:	4642      	mov	r2, r8
    5f96:	4909      	ldr	r1, [pc, #36]	; (5fbc <nrfx_gpio_handler+0x7c>)
    5f98:	4809      	ldr	r0, [pc, #36]	; (5fc0 <nrfx_gpio_handler+0x80>)
    5f9a:	f006 f96f 	bl	c27c <assert_print>
    5f9e:	4809      	ldr	r0, [pc, #36]	; (5fc4 <nrfx_gpio_handler+0x84>)
    5fa0:	f006 f96c 	bl	c27c <assert_print>
    5fa4:	2145      	movs	r1, #69	; 0x45
    5fa6:	4640      	mov	r0, r8
    5fa8:	f006 f961 	bl	c26e <assert_post_action>
    5fac:	e7dc      	b.n	5f68 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5fae:	462b      	mov	r3, r5
    5fb0:	e7e4      	b.n	5f7c <nrfx_gpio_handler+0x3c>
}
    5fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fb6:	bf00      	nop
    5fb8:	0000f034 	.word	0x0000f034
    5fbc:	0000f0ac 	.word	0x0000f0ac
    5fc0:	0000d63c 	.word	0x0000d63c
    5fc4:	0000f094 	.word	0x0000f094

00005fc8 <gpio_nrfx_pin_interrupt_configure>:
{
    5fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fca:	b085      	sub	sp, #20
    5fcc:	460e      	mov	r6, r1
    5fce:	4619      	mov	r1, r3
	return port->config;
    5fd0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5fd2:	7b1b      	ldrb	r3, [r3, #12]
    5fd4:	f006 041f 	and.w	r4, r6, #31
    5fd8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5fdc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5fe0:	d022      	beq.n	6028 <gpio_nrfx_pin_interrupt_configure+0x60>
    5fe2:	4607      	mov	r7, r0
    5fe4:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5fe6:	2300      	movs	r3, #0
    5fe8:	9302      	str	r3, [sp, #8]
    5fea:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    5fec:	4610      	mov	r0, r2
    5fee:	f006 fca7 	bl	c940 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ff2:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    5ff6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5ff8:	6899      	ldr	r1, [r3, #8]
    5ffa:	40f1      	lsrs	r1, r6
    5ffc:	f011 0101 	ands.w	r1, r1, #1
    6000:	d102      	bne.n	6008 <gpio_nrfx_pin_interrupt_configure+0x40>
    6002:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    6006:	d014      	beq.n	6032 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6008:	2300      	movs	r3, #0
    600a:	aa02      	add	r2, sp, #8
    600c:	4619      	mov	r1, r3
    600e:	4620      	mov	r0, r4
    6010:	f002 f802 	bl	8018 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6014:	4b32      	ldr	r3, [pc, #200]	; (60e0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    6016:	4298      	cmp	r0, r3
    6018:	d15f      	bne.n	60da <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    601a:	2101      	movs	r1, #1
    601c:	4620      	mov	r0, r4
    601e:	f002 fa5f 	bl	84e0 <nrfx_gpiote_trigger_enable>
	return 0;
    6022:	2000      	movs	r0, #0
}
    6024:	b005      	add	sp, #20
    6026:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    6028:	4620      	mov	r0, r4
    602a:	f002 fb65 	bl	86f8 <nrfx_gpiote_trigger_disable>
		return 0;
    602e:	2000      	movs	r0, #0
    6030:	e7f8      	b.n	6024 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    6032:	0963      	lsrs	r3, r4, #5
    6034:	d01f      	beq.n	6076 <gpio_nrfx_pin_interrupt_configure+0xae>
    6036:	2b01      	cmp	r3, #1
    6038:	d101      	bne.n	603e <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    603a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    603e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6042:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6044:	f011 0f01 	tst.w	r1, #1
    6048:	d018      	beq.n	607c <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    604a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    604e:	0963      	lsrs	r3, r4, #5
    6050:	d022      	beq.n	6098 <gpio_nrfx_pin_interrupt_configure+0xd0>
    6052:	2b01      	cmp	r3, #1
    6054:	d023      	beq.n	609e <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    6056:	4e23      	ldr	r6, [pc, #140]	; (60e4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    6058:	f240 232e 	movw	r3, #558	; 0x22e
    605c:	4632      	mov	r2, r6
    605e:	4922      	ldr	r1, [pc, #136]	; (60e8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    6060:	4822      	ldr	r0, [pc, #136]	; (60ec <gpio_nrfx_pin_interrupt_configure+0x124>)
    6062:	f006 f90b 	bl	c27c <assert_print>
    6066:	f240 212e 	movw	r1, #558	; 0x22e
    606a:	4630      	mov	r0, r6
    606c:	f006 f8ff 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6070:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6074:	e014      	b.n	60a0 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    6076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    607a:	e7e0      	b.n	603e <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    607c:	4d19      	ldr	r5, [pc, #100]	; (60e4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    607e:	f240 2329 	movw	r3, #553	; 0x229
    6082:	462a      	mov	r2, r5
    6084:	491a      	ldr	r1, [pc, #104]	; (60f0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    6086:	4819      	ldr	r0, [pc, #100]	; (60ec <gpio_nrfx_pin_interrupt_configure+0x124>)
    6088:	f006 f8f8 	bl	c27c <assert_print>
    608c:	f240 2129 	movw	r1, #553	; 0x229
    6090:	4628      	mov	r0, r5
    6092:	f006 f8ec 	bl	c26e <assert_post_action>
    6096:	e7d8      	b.n	604a <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    6098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    609c:	e000      	b.n	60a0 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    609e:	4b15      	ldr	r3, [pc, #84]	; (60f4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    60a0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    60a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    60a8:	f013 0f01 	tst.w	r3, #1
    60ac:	d1ac      	bne.n	6008 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    60ae:	f10d 0107 	add.w	r1, sp, #7
    60b2:	4620      	mov	r0, r4
    60b4:	f002 f9a4 	bl	8400 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    60b8:	4b0f      	ldr	r3, [pc, #60]	; (60f8 <gpio_nrfx_pin_interrupt_configure+0x130>)
    60ba:	4298      	cmp	r0, r3
    60bc:	d003      	beq.n	60c6 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    60be:	f10d 0307 	add.w	r3, sp, #7
    60c2:	9303      	str	r3, [sp, #12]
    60c4:	e7a0      	b.n	6008 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    60c6:	f10d 0007 	add.w	r0, sp, #7
    60ca:	f002 fa01 	bl	84d0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    60ce:	4b04      	ldr	r3, [pc, #16]	; (60e0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    60d0:	4298      	cmp	r0, r3
    60d2:	d0f4      	beq.n	60be <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    60d4:	f06f 000b 	mvn.w	r0, #11
    60d8:	e7a4      	b.n	6024 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    60da:	f06f 0004 	mvn.w	r0, #4
    60de:	e7a1      	b.n	6024 <gpio_nrfx_pin_interrupt_configure+0x5c>
    60e0:	0bad0000 	.word	0x0bad0000
    60e4:	0000f0b8 	.word	0x0000f0b8
    60e8:	0000d800 	.word	0x0000d800
    60ec:	0000d63c 	.word	0x0000d63c
    60f0:	0000f0ec 	.word	0x0000f0ec
    60f4:	50000300 	.word	0x50000300
    60f8:	0bad0004 	.word	0x0bad0004

000060fc <pin_uninit>:
{
    60fc:	b530      	push	{r4, r5, lr}
    60fe:	b083      	sub	sp, #12
    6100:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    6102:	f10d 0107 	add.w	r1, sp, #7
    6106:	f002 f97b 	bl	8400 <nrfx_gpiote_channel_get>
    610a:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    610c:	4620      	mov	r0, r4
    610e:	f002 fb5b 	bl	87c8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    6112:	4b0b      	ldr	r3, [pc, #44]	; (6140 <pin_uninit+0x44>)
    6114:	4298      	cmp	r0, r3
    6116:	d10f      	bne.n	6138 <pin_uninit+0x3c>
	if (free_ch) {
    6118:	429d      	cmp	r5, r3
    611a:	d005      	beq.n	6128 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    611c:	4b08      	ldr	r3, [pc, #32]	; (6140 <pin_uninit+0x44>)
    611e:	4298      	cmp	r0, r3
    6120:	d107      	bne.n	6132 <pin_uninit+0x36>
    6122:	2000      	movs	r0, #0
}
    6124:	b003      	add	sp, #12
    6126:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    6128:	f89d 0007 	ldrb.w	r0, [sp, #7]
    612c:	f002 f9c8 	bl	84c0 <nrfx_gpiote_channel_free>
    6130:	e7f4      	b.n	611c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    6132:	f06f 0004 	mvn.w	r0, #4
    6136:	e7f5      	b.n	6124 <pin_uninit+0x28>
		return -EIO;
    6138:	f06f 0004 	mvn.w	r0, #4
    613c:	e7f2      	b.n	6124 <pin_uninit+0x28>
    613e:	bf00      	nop
    6140:	0bad0000 	.word	0x0bad0000

00006144 <gpio_nrfx_pin_configure>:
{
    6144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6148:	b087      	sub	sp, #28
	return port->config;
    614a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    614e:	f898 300c 	ldrb.w	r3, [r8, #12]
    6152:	f001 051f 	and.w	r5, r1, #31
    6156:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    615a:	2a00      	cmp	r2, #0
    615c:	d044      	beq.n	61e8 <gpio_nrfx_pin_configure+0xa4>
    615e:	460c      	mov	r4, r1
    6160:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6162:	2600      	movs	r6, #0
    6164:	9603      	str	r6, [sp, #12]
    6166:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    6168:	f10d 0117 	add.w	r1, sp, #23
    616c:	4620      	mov	r0, r4
    616e:	f002 f947 	bl	8400 <nrfx_gpiote_channel_get>
    6172:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6174:	4633      	mov	r3, r6
    6176:	aa03      	add	r2, sp, #12
    6178:	4631      	mov	r1, r6
    617a:	4628      	mov	r0, r5
    617c:	f001 ff4c 	bl	8018 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6180:	4b30      	ldr	r3, [pc, #192]	; (6244 <gpio_nrfx_pin_configure+0x100>)
    6182:	4298      	cmp	r0, r3
    6184:	d15b      	bne.n	623e <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    6186:	4599      	cmp	r9, r3
    6188:	d036      	beq.n	61f8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    618a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    618e:	d043      	beq.n	6218 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    6190:	f10d 0103 	add.w	r1, sp, #3
    6194:	4638      	mov	r0, r7
    6196:	f006 fb5a 	bl	c84e <get_drive>
		if (rv != 0) {
    619a:	4606      	mov	r6, r0
    619c:	bb40      	cbnz	r0, 61f0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    619e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    61a2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    61a6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    61aa:	bf0c      	ite	eq
    61ac:	2301      	moveq	r3, #1
    61ae:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    61b0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    61b4:	4638      	mov	r0, r7
    61b6:	f006 fb90 	bl	c8da <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    61ba:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    61be:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    61c2:	d01e      	beq.n	6202 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    61c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    61c8:	2101      	movs	r1, #1
    61ca:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    61ce:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    61d2:	2200      	movs	r2, #0
    61d4:	a901      	add	r1, sp, #4
    61d6:	4628      	mov	r0, r5
    61d8:	f002 f812 	bl	8200 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    61dc:	4b19      	ldr	r3, [pc, #100]	; (6244 <gpio_nrfx_pin_configure+0x100>)
    61de:	4298      	cmp	r0, r3
    61e0:	d006      	beq.n	61f0 <gpio_nrfx_pin_configure+0xac>
    61e2:	f06f 0615 	mvn.w	r6, #21
    61e6:	e003      	b.n	61f0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    61e8:	4628      	mov	r0, r5
    61ea:	f7ff ff87 	bl	60fc <pin_uninit>
    61ee:	4606      	mov	r6, r0
}
    61f0:	4630      	mov	r0, r6
    61f2:	b007      	add	sp, #28
    61f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    61f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    61fc:	f002 f960 	bl	84c0 <nrfx_gpiote_channel_free>
    6200:	e7c3      	b.n	618a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6202:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    6206:	d0e4      	beq.n	61d2 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6208:	f8d8 2004 	ldr.w	r2, [r8, #4]
    620c:	2301      	movs	r3, #1
    620e:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    6212:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    6216:	e7dc      	b.n	61d2 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    6218:	4638      	mov	r0, r7
    621a:	f006 fb5e 	bl	c8da <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    621e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6222:	2300      	movs	r3, #0
    6224:	461a      	mov	r2, r3
    6226:	a902      	add	r1, sp, #8
    6228:	4628      	mov	r0, r5
    622a:	f001 fef5 	bl	8018 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    622e:	4b05      	ldr	r3, [pc, #20]	; (6244 <gpio_nrfx_pin_configure+0x100>)
    6230:	4298      	cmp	r0, r3
    6232:	d101      	bne.n	6238 <gpio_nrfx_pin_configure+0xf4>
    6234:	2600      	movs	r6, #0
    6236:	e7db      	b.n	61f0 <gpio_nrfx_pin_configure+0xac>
    6238:	f06f 0615 	mvn.w	r6, #21
    623c:	e7d8      	b.n	61f0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    623e:	f06f 0615 	mvn.w	r6, #21
    6242:	e7d5      	b.n	61f0 <gpio_nrfx_pin_configure+0xac>
    6244:	0bad0000 	.word	0x0bad0000

00006248 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6248:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    624a:	f002 f92f 	bl	84ac <nrfx_gpiote_is_init>
    624e:	b108      	cbz	r0, 6254 <gpio_nrfx_init+0xc>
		return 0;
    6250:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6252:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    6254:	f002 f900 	bl	8458 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6258:	4b08      	ldr	r3, [pc, #32]	; (627c <gpio_nrfx_init+0x34>)
    625a:	4298      	cmp	r0, r3
    625c:	d10a      	bne.n	6274 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    625e:	2100      	movs	r1, #0
    6260:	4807      	ldr	r0, [pc, #28]	; (6280 <gpio_nrfx_init+0x38>)
    6262:	f002 f8c7 	bl	83f4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6266:	2200      	movs	r2, #0
    6268:	2105      	movs	r1, #5
    626a:	2006      	movs	r0, #6
    626c:	f7fe f972 	bl	4554 <z_arm_irq_priority_set>
	return 0;
    6270:	2000      	movs	r0, #0
    6272:	e7ee      	b.n	6252 <gpio_nrfx_init+0xa>
		return -EIO;
    6274:	f06f 0004 	mvn.w	r0, #4
    6278:	e7eb      	b.n	6252 <gpio_nrfx_init+0xa>
    627a:	bf00      	nop
    627c:	0bad0000 	.word	0x0bad0000
    6280:	00005f41 	.word	0x00005f41

00006284 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    6284:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    6286:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    6288:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    628c:	d06f      	beq.n	636e <baudrate_set+0xea>
    628e:	d83a      	bhi.n	6306 <baudrate_set+0x82>
    6290:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    6294:	d06e      	beq.n	6374 <baudrate_set+0xf0>
    6296:	d90a      	bls.n	62ae <baudrate_set+0x2a>
    6298:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    629c:	d075      	beq.n	638a <baudrate_set+0x106>
    629e:	d924      	bls.n	62ea <baudrate_set+0x66>
    62a0:	f647 2312 	movw	r3, #31250	; 0x7a12
    62a4:	4299      	cmp	r1, r3
    62a6:	d12b      	bne.n	6300 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    62a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    62ac:	e013      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    62ae:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    62b2:	d061      	beq.n	6378 <baudrate_set+0xf4>
    62b4:	d907      	bls.n	62c6 <baudrate_set+0x42>
    62b6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    62ba:	d063      	beq.n	6384 <baudrate_set+0x100>
    62bc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    62c0:	d110      	bne.n	62e4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    62c2:	4b3c      	ldr	r3, [pc, #240]	; (63b4 <baudrate_set+0x130>)
    62c4:	e007      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    62c6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    62ca:	d058      	beq.n	637e <baudrate_set+0xfa>
    62cc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    62d0:	d105      	bne.n	62de <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    62d2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    62d6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    62da:	2000      	movs	r0, #0
    62dc:	4770      	bx	lr
	switch (baudrate) {
    62de:	f06f 0015 	mvn.w	r0, #21
    62e2:	4770      	bx	lr
    62e4:	f06f 0015 	mvn.w	r0, #21
    62e8:	4770      	bx	lr
    62ea:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    62ee:	d04e      	beq.n	638e <baudrate_set+0x10a>
    62f0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    62f4:	d101      	bne.n	62fa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    62f6:	4b30      	ldr	r3, [pc, #192]	; (63b8 <baudrate_set+0x134>)
    62f8:	e7ed      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    62fa:	f06f 0015 	mvn.w	r0, #21
    62fe:	4770      	bx	lr
    6300:	f06f 0015 	mvn.w	r0, #21
    6304:	4770      	bx	lr
    6306:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    630a:	d042      	beq.n	6392 <baudrate_set+0x10e>
    630c:	d909      	bls.n	6322 <baudrate_set+0x9e>
    630e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    6312:	d046      	beq.n	63a2 <baudrate_set+0x11e>
    6314:	d91f      	bls.n	6356 <baudrate_set+0xd2>
    6316:	4b29      	ldr	r3, [pc, #164]	; (63bc <baudrate_set+0x138>)
    6318:	4299      	cmp	r1, r3
    631a:	d148      	bne.n	63ae <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    631c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6320:	e7d9      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    6322:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    6326:	d037      	beq.n	6398 <baudrate_set+0x114>
    6328:	d905      	bls.n	6336 <baudrate_set+0xb2>
    632a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    632e:	d10f      	bne.n	6350 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6330:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6334:	e7cf      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    6336:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    633a:	4299      	cmp	r1, r3
    633c:	d02e      	beq.n	639c <baudrate_set+0x118>
    633e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    6342:	d102      	bne.n	634a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6344:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6348:	e7c5      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    634a:	f06f 0015 	mvn.w	r0, #21
    634e:	4770      	bx	lr
    6350:	f06f 0015 	mvn.w	r0, #21
    6354:	4770      	bx	lr
    6356:	4b1a      	ldr	r3, [pc, #104]	; (63c0 <baudrate_set+0x13c>)
    6358:	4299      	cmp	r1, r3
    635a:	d025      	beq.n	63a8 <baudrate_set+0x124>
    635c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    6360:	d102      	bne.n	6368 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6362:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6366:	e7b6      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    6368:	f06f 0015 	mvn.w	r0, #21
    636c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    636e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6372:	e7b0      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6374:	4b13      	ldr	r3, [pc, #76]	; (63c4 <baudrate_set+0x140>)
    6376:	e7ae      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6378:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    637c:	e7ab      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    637e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6382:	e7a8      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6384:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6388:	e7a5      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    638a:	4b0f      	ldr	r3, [pc, #60]	; (63c8 <baudrate_set+0x144>)
    638c:	e7a3      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    638e:	4b0f      	ldr	r3, [pc, #60]	; (63cc <baudrate_set+0x148>)
    6390:	e7a1      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6392:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6396:	e79e      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6398:	4b0d      	ldr	r3, [pc, #52]	; (63d0 <baudrate_set+0x14c>)
    639a:	e79c      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    639c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    63a0:	e799      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    63a2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    63a6:	e796      	b.n	62d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    63a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    63ac:	e793      	b.n	62d6 <baudrate_set+0x52>
	switch (baudrate) {
    63ae:	f06f 0015 	mvn.w	r0, #21
}
    63b2:	4770      	bx	lr
    63b4:	0013b000 	.word	0x0013b000
    63b8:	004ea000 	.word	0x004ea000
    63bc:	000f4240 	.word	0x000f4240
    63c0:	0003d090 	.word	0x0003d090
    63c4:	00275000 	.word	0x00275000
    63c8:	0075c000 	.word	0x0075c000
    63cc:	003af000 	.word	0x003af000
    63d0:	013a9000 	.word	0x013a9000

000063d4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    63d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63d8:	4605      	mov	r5, r0
    63da:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    63dc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    63e0:	f006 fe38 	bl	d054 <k_is_in_isr>
    63e4:	b920      	cbnz	r0, 63f0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    63e6:	4b16      	ldr	r3, [pc, #88]	; (6440 <uarte_nrfx_poll_out+0x6c>)
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	b143      	cbz	r3, 63fe <uarte_nrfx_poll_out+0x2a>
    63ec:	2300      	movs	r3, #0
    63ee:	e000      	b.n	63f2 <uarte_nrfx_poll_out+0x1e>
    63f0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    63f2:	b953      	cbnz	r3, 640a <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    63f4:	4628      	mov	r0, r5
    63f6:	f006 fbac 	bl	cb52 <wait_tx_ready>
    63fa:	4606      	mov	r6, r0
    63fc:	e013      	b.n	6426 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    63fe:	2301      	movs	r3, #1
    6400:	e7f7      	b.n	63f2 <uarte_nrfx_poll_out+0x1e>
    6402:	f384 8811 	msr	BASEPRI, r4
    6406:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    640a:	f04f 0320 	mov.w	r3, #32
    640e:	f3ef 8411 	mrs	r4, BASEPRI
    6412:	f383 8812 	msr	BASEPRI_MAX, r3
    6416:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    641a:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    641c:	4628      	mov	r0, r5
    641e:	f006 fb4a 	bl	cab6 <is_tx_ready>
    6422:	2800      	cmp	r0, #0
    6424:	d0ed      	beq.n	6402 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    6426:	4641      	mov	r1, r8
    6428:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    642c:	2201      	movs	r2, #1
    642e:	4628      	mov	r0, r5
    6430:	f006 fb5b 	bl	caea <tx_start>
	__asm__ volatile(
    6434:	f386 8811 	msr	BASEPRI, r6
    6438:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6440:	2000145a 	.word	0x2000145a

00006444 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6444:	b530      	push	{r4, r5, lr}
    6446:	b085      	sub	sp, #20
    6448:	4604      	mov	r4, r0
    644a:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    644c:	f101 0012 	add.w	r0, r1, #18
    6450:	f002 fa46 	bl	88e0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6454:	4b11      	ldr	r3, [pc, #68]	; (649c <endtx_stoptx_ppi_init+0x58>)
    6456:	4298      	cmp	r0, r3
    6458:	d112      	bne.n	6480 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    645a:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    645c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    6460:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6462:	4a0f      	ldr	r2, [pc, #60]	; (64a0 <endtx_stoptx_ppi_init+0x5c>)
    6464:	33a2      	adds	r3, #162	; 0xa2
    6466:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    646a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    646e:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6470:	7ca9      	ldrb	r1, [r5, #18]
    6472:	2301      	movs	r3, #1
    6474:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    6476:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    647a:	2000      	movs	r0, #0
}
    647c:	b005      	add	sp, #20
    647e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    6480:	4b08      	ldr	r3, [pc, #32]	; (64a4 <endtx_stoptx_ppi_init+0x60>)
    6482:	9302      	str	r3, [sp, #8]
    6484:	2000      	movs	r0, #0
    6486:	9001      	str	r0, [sp, #4]
    6488:	9000      	str	r0, [sp, #0]
    648a:	4603      	mov	r3, r0
    648c:	2201      	movs	r2, #1
    648e:	4906      	ldr	r1, [pc, #24]	; (64a8 <endtx_stoptx_ppi_init+0x64>)
    6490:	f006 fb86 	bl	cba0 <z_log_msg2_runtime_create>
		return -EIO;
    6494:	f06f 0004 	mvn.w	r0, #4
    6498:	e7f0      	b.n	647c <endtx_stoptx_ppi_init+0x38>
    649a:	bf00      	nop
    649c:	0bad0000 	.word	0x0bad0000
    64a0:	4001f000 	.word	0x4001f000
    64a4:	0000f164 	.word	0x0000f164
    64a8:	0000d4ac 	.word	0x0000d4ac

000064ac <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    64ac:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    64b0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    64b4:	4b01      	ldr	r3, [pc, #4]	; (64bc <set_comparator+0x10>)
    64b6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    64ba:	4770      	bx	lr
    64bc:	40011000 	.word	0x40011000

000064c0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    64c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    64c4:	4b01      	ldr	r3, [pc, #4]	; (64cc <get_comparator+0xc>)
    64c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    64ca:	4770      	bx	lr
    64cc:	40011000 	.word	0x40011000

000064d0 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    64d4:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    64d6:	4a02      	ldr	r2, [pc, #8]	; (64e0 <event_enable+0x10>)
    64d8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    64dc:	4770      	bx	lr
    64de:	bf00      	nop
    64e0:	40011000 	.word	0x40011000

000064e4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    64e8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    64ea:	4a02      	ldr	r2, [pc, #8]	; (64f4 <event_disable+0x10>)
    64ec:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop
    64f4:	40011000 	.word	0x40011000

000064f8 <counter>:
     return p_reg->COUNTER;
    64f8:	4b01      	ldr	r3, [pc, #4]	; (6500 <counter+0x8>)
    64fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    64fe:	4770      	bx	lr
    6500:	40011000 	.word	0x40011000

00006504 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6504:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6506:	2301      	movs	r3, #1
    6508:	4083      	lsls	r3, r0
    650a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    650e:	4a10      	ldr	r2, [pc, #64]	; (6550 <compare_int_lock+0x4c>)
    6510:	f3bf 8f5b 	dmb	ish
    6514:	e852 1f00 	ldrex	r1, [r2]
    6518:	ea01 0e0c 	and.w	lr, r1, ip
    651c:	e842 e400 	strex	r4, lr, [r2]
    6520:	2c00      	cmp	r4, #0
    6522:	d1f7      	bne.n	6514 <compare_int_lock+0x10>
    6524:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6528:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    652c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    6530:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6538:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    653c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6540:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6544:	420b      	tst	r3, r1
}
    6546:	bf14      	ite	ne
    6548:	2001      	movne	r0, #1
    654a:	2000      	moveq	r0, #0
    654c:	bd10      	pop	{r4, pc}
    654e:	bf00      	nop
    6550:	20000d60 	.word	0x20000d60

00006554 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6554:	b570      	push	{r4, r5, r6, lr}
    6556:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6558:	f006 fbc4 	bl	cce4 <full_int_lock>
    655c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    655e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6562:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6564:	4a17      	ldr	r2, [pc, #92]	; (65c4 <channel_processing_check_and_clear+0x70>)
    6566:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    656a:	4213      	tst	r3, r2
    656c:	d105      	bne.n	657a <channel_processing_check_and_clear+0x26>
	bool result = false;
    656e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6570:	4628      	mov	r0, r5
    6572:	f006 fbc0 	bl	ccf6 <full_int_unlock>

	return result;
}
    6576:	4630      	mov	r0, r6
    6578:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    657a:	2301      	movs	r3, #1
    657c:	40a3      	lsls	r3, r4
    657e:	43db      	mvns	r3, r3
    6580:	4a11      	ldr	r2, [pc, #68]	; (65c8 <channel_processing_check_and_clear+0x74>)
    6582:	f3bf 8f5b 	dmb	ish
    6586:	e852 1f00 	ldrex	r1, [r2]
    658a:	ea01 0003 	and.w	r0, r1, r3
    658e:	e842 0600 	strex	r6, r0, [r2]
    6592:	2e00      	cmp	r6, #0
    6594:	d1f7      	bne.n	6586 <channel_processing_check_and_clear+0x32>
    6596:	f3bf 8f5b 	dmb	ish
    659a:	b959      	cbnz	r1, 65b4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    659c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    65a0:	009b      	lsls	r3, r3, #2
    65a2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    65a8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    65ac:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    65ae:	b113      	cbz	r3, 65b6 <channel_processing_check_and_clear+0x62>
    65b0:	2301      	movs	r3, #1
    65b2:	e000      	b.n	65b6 <channel_processing_check_and_clear+0x62>
    65b4:	2301      	movs	r3, #1
		if (result) {
    65b6:	461e      	mov	r6, r3
    65b8:	2b00      	cmp	r3, #0
    65ba:	d0d9      	beq.n	6570 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    65bc:	4620      	mov	r0, r4
    65be:	f006 fb82 	bl	ccc6 <event_clear>
    65c2:	e7d5      	b.n	6570 <channel_processing_check_and_clear+0x1c>
    65c4:	40011000 	.word	0x40011000
    65c8:	20000d5c 	.word	0x20000d5c

000065cc <compare_int_unlock>:
	if (key) {
    65cc:	b901      	cbnz	r1, 65d0 <compare_int_unlock+0x4>
}
    65ce:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    65d0:	2301      	movs	r3, #1
    65d2:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65d4:	4a11      	ldr	r2, [pc, #68]	; (661c <compare_int_unlock+0x50>)
    65d6:	f3bf 8f5b 	dmb	ish
    65da:	e852 1f00 	ldrex	r1, [r2]
    65de:	4319      	orrs	r1, r3
    65e0:	e842 1c00 	strex	ip, r1, [r2]
    65e4:	f1bc 0f00 	cmp.w	ip, #0
    65e8:	d1f7      	bne.n	65da <compare_int_unlock+0xe>
    65ea:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    65ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    65f2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    65f4:	4a0a      	ldr	r2, [pc, #40]	; (6620 <compare_int_unlock+0x54>)
    65f6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65fa:	f3bf 8f5b 	dmb	ish
    65fe:	4b09      	ldr	r3, [pc, #36]	; (6624 <compare_int_unlock+0x58>)
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6606:	fa23 f000 	lsr.w	r0, r3, r0
    660a:	f010 0f01 	tst.w	r0, #1
    660e:	d0de      	beq.n	65ce <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6610:	4b05      	ldr	r3, [pc, #20]	; (6628 <compare_int_unlock+0x5c>)
    6612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6616:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    661a:	e7d8      	b.n	65ce <compare_int_unlock+0x2>
    661c:	20000d60 	.word	0x20000d60
    6620:	40011000 	.word	0x40011000
    6624:	20000d5c 	.word	0x20000d5c
    6628:	e000e100 	.word	0xe000e100

0000662c <sys_clock_timeout_handler>:
{
    662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6630:	4607      	mov	r7, r0
    6632:	4614      	mov	r4, r2
    6634:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6636:	4610      	mov	r0, r2
    6638:	4619      	mov	r1, r3
    663a:	f006 fb50 	bl	ccde <absolute_time_to_cc>
    663e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6640:	4b15      	ldr	r3, [pc, #84]	; (6698 <sys_clock_timeout_handler+0x6c>)
    6642:	681a      	ldr	r2, [r3, #0]
    6644:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6646:	601c      	str	r4, [r3, #0]
    6648:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    664a:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    664e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6652:	d309      	bcc.n	6668 <sys_clock_timeout_handler+0x3c>
	return false;
    6654:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6656:	f004 ffbd 	bl	b5d4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    665a:	4638      	mov	r0, r7
    665c:	f7ff ff30 	bl	64c0 <get_comparator>
    6660:	42a8      	cmp	r0, r5
    6662:	d00e      	beq.n	6682 <sys_clock_timeout_handler+0x56>
}
    6664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6668:	4b0c      	ldr	r3, [pc, #48]	; (669c <sys_clock_timeout_handler+0x70>)
    666a:	681b      	ldr	r3, [r3, #0]
    666c:	0a1a      	lsrs	r2, r3, #8
    666e:	061b      	lsls	r3, r3, #24
    6670:	eb15 0803 	adds.w	r8, r5, r3
    6674:	f142 0900 	adc.w	r9, r2, #0
    6678:	4b09      	ldr	r3, [pc, #36]	; (66a0 <sys_clock_timeout_handler+0x74>)
    667a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    667e:	2401      	movs	r4, #1
    6680:	e7e9      	b.n	6656 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    6682:	b11c      	cbz	r4, 668c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    6684:	4638      	mov	r0, r7
    6686:	f7ff ff23 	bl	64d0 <event_enable>
}
    668a:	e7eb      	b.n	6664 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    668c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6690:	4638      	mov	r0, r7
    6692:	f7ff ff0b 	bl	64ac <set_comparator>
    6696:	e7f5      	b.n	6684 <sys_clock_timeout_handler+0x58>
    6698:	20000538 	.word	0x20000538
    669c:	20000d64 	.word	0x20000d64
    66a0:	20000520 	.word	0x20000520

000066a4 <z_nrf_rtc_timer_read>:
{
    66a4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    66a6:	4b0d      	ldr	r3, [pc, #52]	; (66dc <z_nrf_rtc_timer_read+0x38>)
    66a8:	681c      	ldr	r4, [r3, #0]
    66aa:	0a25      	lsrs	r5, r4, #8
    66ac:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    66ae:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    66b2:	f7ff ff21 	bl	64f8 <counter>
    66b6:	4603      	mov	r3, r0
	val += cntr;
    66b8:	1900      	adds	r0, r0, r4
    66ba:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    66be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    66c2:	d20a      	bcs.n	66da <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    66c4:	4b06      	ldr	r3, [pc, #24]	; (66e0 <z_nrf_rtc_timer_read+0x3c>)
    66c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    66ca:	4290      	cmp	r0, r2
    66cc:	eb71 0303 	sbcs.w	r3, r1, r3
    66d0:	d203      	bcs.n	66da <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    66d2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    66d6:	f141 0100 	adc.w	r1, r1, #0
}
    66da:	bd38      	pop	{r3, r4, r5, pc}
    66dc:	20000d64 	.word	0x20000d64
    66e0:	20000520 	.word	0x20000520

000066e4 <compare_set_nolocks>:
{
    66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e6:	4606      	mov	r6, r0
    66e8:	4614      	mov	r4, r2
    66ea:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    66ec:	4610      	mov	r0, r2
    66ee:	4619      	mov	r1, r3
    66f0:	f006 faf5 	bl	ccde <absolute_time_to_cc>
    66f4:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    66f6:	f7ff ffd5 	bl	66a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    66fa:	42a0      	cmp	r0, r4
    66fc:	eb71 0305 	sbcs.w	r3, r1, r5
    6700:	d21d      	bcs.n	673e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    6702:	1a23      	subs	r3, r4, r0
    6704:	eb65 0101 	sbc.w	r1, r5, r1
    6708:	4a1b      	ldr	r2, [pc, #108]	; (6778 <compare_set_nolocks+0x94>)
    670a:	4293      	cmp	r3, r2
    670c:	f171 0300 	sbcs.w	r3, r1, #0
    6710:	d22f      	bcs.n	6772 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    6712:	4b1a      	ldr	r3, [pc, #104]	; (677c <compare_set_nolocks+0x98>)
    6714:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6718:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    671c:	42ab      	cmp	r3, r5
    671e:	bf08      	it	eq
    6720:	42a2      	cmpeq	r2, r4
    6722:	d01a      	beq.n	675a <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6724:	4639      	mov	r1, r7
    6726:	4630      	mov	r0, r6
    6728:	f006 faea 	bl	cd00 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    672c:	4639      	mov	r1, r7
    672e:	f006 fac6 	bl	ccbe <counter_sub>
    6732:	1900      	adds	r0, r0, r4
    6734:	f145 0300 	adc.w	r3, r5, #0
    6738:	4604      	mov	r4, r0
    673a:	461d      	mov	r5, r3
    673c:	e00d      	b.n	675a <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    673e:	2301      	movs	r3, #1
    6740:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6742:	4a0f      	ldr	r2, [pc, #60]	; (6780 <compare_set_nolocks+0x9c>)
    6744:	f3bf 8f5b 	dmb	ish
    6748:	e852 1f00 	ldrex	r1, [r2]
    674c:	4319      	orrs	r1, r3
    674e:	e842 1000 	strex	r0, r1, [r2]
    6752:	2800      	cmp	r0, #0
    6754:	d1f8      	bne.n	6748 <compare_set_nolocks+0x64>
    6756:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    675a:	4b08      	ldr	r3, [pc, #32]	; (677c <compare_set_nolocks+0x98>)
    675c:	0132      	lsls	r2, r6, #4
    675e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6762:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6766:	9906      	ldr	r1, [sp, #24]
    6768:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    676a:	9b07      	ldr	r3, [sp, #28]
    676c:	6073      	str	r3, [r6, #4]
	return ret;
    676e:	2000      	movs	r0, #0
}
    6770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    6772:	f06f 0015 	mvn.w	r0, #21
    6776:	e7fb      	b.n	6770 <compare_set_nolocks+0x8c>
    6778:	01000001 	.word	0x01000001
    677c:	20000528 	.word	0x20000528
    6780:	20000d5c 	.word	0x20000d5c

00006784 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6784:	b530      	push	{r4, r5, lr}
    6786:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    6788:	2300      	movs	r3, #0
    678a:	4a1d      	ldr	r2, [pc, #116]	; (6800 <sys_clock_driver_init+0x7c>)
    678c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6790:	2b00      	cmp	r3, #0
    6792:	dd24      	ble.n	67de <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    6794:	4c1a      	ldr	r4, [pc, #104]	; (6800 <sys_clock_driver_init+0x7c>)
    6796:	2502      	movs	r5, #2
    6798:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    679c:	4b19      	ldr	r3, [pc, #100]	; (6804 <sys_clock_driver_init+0x80>)
    679e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    67a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    67a6:	2200      	movs	r2, #0
    67a8:	2101      	movs	r1, #1
    67aa:	2011      	movs	r0, #17
    67ac:	f7fd fed2 	bl	4554 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    67b0:	2011      	movs	r0, #17
    67b2:	f7fd feb3 	bl	451c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    67b6:	2301      	movs	r3, #1
    67b8:	60a3      	str	r3, [r4, #8]
    67ba:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    67bc:	4a12      	ldr	r2, [pc, #72]	; (6808 <sys_clock_driver_init+0x84>)
    67be:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    67c0:	2400      	movs	r4, #0
    67c2:	9401      	str	r4, [sp, #4]
    67c4:	4b11      	ldr	r3, [pc, #68]	; (680c <sys_clock_driver_init+0x88>)
    67c6:	9300      	str	r3, [sp, #0]
    67c8:	4a11      	ldr	r2, [pc, #68]	; (6810 <sys_clock_driver_init+0x8c>)
    67ca:	2300      	movs	r3, #0
    67cc:	4620      	mov	r0, r4
    67ce:	f006 fad2 	bl	cd76 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    67d2:	4628      	mov	r0, r5
    67d4:	f7ff fabc 	bl	5d50 <z_nrf_clock_control_lf_on>

	return 0;
}
    67d8:	4620      	mov	r0, r4
    67da:	b003      	add	sp, #12
    67dc:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    67de:	4a0d      	ldr	r2, [pc, #52]	; (6814 <sys_clock_driver_init+0x90>)
    67e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    67e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    67ec:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    67f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    67f4:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    67f6:	4902      	ldr	r1, [pc, #8]	; (6800 <sys_clock_driver_init+0x7c>)
    67f8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    67fc:	3301      	adds	r3, #1
    67fe:	e7c7      	b.n	6790 <sys_clock_driver_init+0xc>
    6800:	40011000 	.word	0x40011000
    6804:	e000e100 	.word	0xe000e100
    6808:	20000d60 	.word	0x20000d60
    680c:	0000662d 	.word	0x0000662d
    6810:	007fffff 	.word	0x007fffff
    6814:	20000528 	.word	0x20000528

00006818 <process_channel>:
{
    6818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    681c:	b082      	sub	sp, #8
    681e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6820:	f7ff fe98 	bl	6554 <channel_processing_check_and_clear>
    6824:	b910      	cbnz	r0, 682c <process_channel+0x14>
}
    6826:	b002      	add	sp, #8
    6828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    682c:	f7ff ff3a 	bl	66a4 <z_nrf_rtc_timer_read>
    6830:	4682      	mov	sl, r0
    6832:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    6834:	f006 fa56 	bl	cce4 <full_int_lock>
    6838:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    683a:	4b13      	ldr	r3, [pc, #76]	; (6888 <process_channel+0x70>)
    683c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6840:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    6844:	45c2      	cmp	sl, r8
    6846:	eb76 0309 	sbcs.w	r3, r6, r9
    684a:	d20b      	bcs.n	6864 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    684c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    684e:	4628      	mov	r0, r5
    6850:	f006 fa51 	bl	ccf6 <full_int_unlock>
		if (handler) {
    6854:	2e00      	cmp	r6, #0
    6856:	d0e6      	beq.n	6826 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6858:	9700      	str	r7, [sp, #0]
    685a:	4642      	mov	r2, r8
    685c:	464b      	mov	r3, r9
    685e:	4620      	mov	r0, r4
    6860:	47b0      	blx	r6
}
    6862:	e7e0      	b.n	6826 <process_channel+0xe>
			handler = cc_data[chan].callback;
    6864:	4a08      	ldr	r2, [pc, #32]	; (6888 <process_channel+0x70>)
    6866:	0123      	lsls	r3, r4, #4
    6868:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    686c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    686e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    6870:	2000      	movs	r0, #0
    6872:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    687c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    6880:	4620      	mov	r0, r4
    6882:	f7ff fe2f 	bl	64e4 <event_disable>
    6886:	e7e2      	b.n	684e <process_channel+0x36>
    6888:	20000528 	.word	0x20000528

0000688c <rtc_nrf_isr>:
{
    688c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    688e:	4b0e      	ldr	r3, [pc, #56]	; (68c8 <rtc_nrf_isr+0x3c>)
    6890:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6894:	f013 0f02 	tst.w	r3, #2
    6898:	d00d      	beq.n	68b6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    689a:	4b0b      	ldr	r3, [pc, #44]	; (68c8 <rtc_nrf_isr+0x3c>)
    689c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    68a0:	b14b      	cbz	r3, 68b6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    68a2:	4b09      	ldr	r3, [pc, #36]	; (68c8 <rtc_nrf_isr+0x3c>)
    68a4:	2200      	movs	r2, #0
    68a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    68aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    68ae:	4a07      	ldr	r2, [pc, #28]	; (68cc <rtc_nrf_isr+0x40>)
    68b0:	6813      	ldr	r3, [r2, #0]
    68b2:	3301      	adds	r3, #1
    68b4:	6013      	str	r3, [r2, #0]
{
    68b6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    68b8:	2c00      	cmp	r4, #0
    68ba:	dd00      	ble.n	68be <rtc_nrf_isr+0x32>
}
    68bc:	bd10      	pop	{r4, pc}
		process_channel(chan);
    68be:	4620      	mov	r0, r4
    68c0:	f7ff ffaa 	bl	6818 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    68c4:	3401      	adds	r4, #1
    68c6:	e7f7      	b.n	68b8 <rtc_nrf_isr+0x2c>
    68c8:	40011000 	.word	0x40011000
    68cc:	20000d64 	.word	0x20000d64

000068d0 <sys_clock_set_timeout>:
{
    68d0:	b510      	push	{r4, lr}
    68d2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    68d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    68d8:	d006      	beq.n	68e8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    68da:	2801      	cmp	r0, #1
    68dc:	dd06      	ble.n	68ec <sys_clock_set_timeout+0x1c>
    68de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    68e2:	da05      	bge.n	68f0 <sys_clock_set_timeout+0x20>
    68e4:	1e44      	subs	r4, r0, #1
    68e6:	e004      	b.n	68f2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    68e8:	480f      	ldr	r0, [pc, #60]	; (6928 <sys_clock_set_timeout+0x58>)
    68ea:	e7f8      	b.n	68de <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    68ec:	2400      	movs	r4, #0
    68ee:	e000      	b.n	68f2 <sys_clock_set_timeout+0x22>
    68f0:	4c0d      	ldr	r4, [pc, #52]	; (6928 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    68f2:	f7ff fed7 	bl	66a4 <z_nrf_rtc_timer_read>
    68f6:	4b0d      	ldr	r3, [pc, #52]	; (692c <sys_clock_set_timeout+0x5c>)
    68f8:	6819      	ldr	r1, [r3, #0]
    68fa:	685b      	ldr	r3, [r3, #4]
    68fc:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    68fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6902:	d300      	bcc.n	6906 <sys_clock_set_timeout+0x36>
		ticks = 0;
    6904:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6906:	4420      	add	r0, r4
    6908:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    690a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    690e:	d300      	bcc.n	6912 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    6910:	4a05      	ldr	r2, [pc, #20]	; (6928 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    6912:	2000      	movs	r0, #0
    6914:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6916:	9001      	str	r0, [sp, #4]
    6918:	4905      	ldr	r1, [pc, #20]	; (6930 <sys_clock_set_timeout+0x60>)
    691a:	9100      	str	r1, [sp, #0]
    691c:	f143 0300 	adc.w	r3, r3, #0
    6920:	f006 fa29 	bl	cd76 <compare_set>
}
    6924:	b002      	add	sp, #8
    6926:	bd10      	pop	{r4, pc}
    6928:	007fffff 	.word	0x007fffff
    692c:	20000538 	.word	0x20000538
    6930:	0000662d 	.word	0x0000662d

00006934 <sys_clock_elapsed>:
{
    6934:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6936:	f7ff feb5 	bl	66a4 <z_nrf_rtc_timer_read>
    693a:	4b02      	ldr	r3, [pc, #8]	; (6944 <sys_clock_elapsed+0x10>)
    693c:	681b      	ldr	r3, [r3, #0]
}
    693e:	1ac0      	subs	r0, r0, r3
    6940:	bd08      	pop	{r3, pc}
    6942:	bf00      	nop
    6944:	20000538 	.word	0x20000538

00006948 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    6948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    694c:	460c      	mov	r4, r1
    694e:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    6950:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    6954:	d002      	beq.n	695c <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6956:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    695a:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    695c:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    6960:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    6964:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    6968:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    696c:	f010 0f20 	tst.w	r0, #32
    6970:	d01d      	beq.n	69ae <nrf_pin_configure+0x66>
    6972:	b1fb      	cbz	r3, 69b4 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    6974:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6978:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    697c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    697e:	f013 0f01 	tst.w	r3, #1
    6982:	d019      	beq.n	69b8 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    6984:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6988:	096d      	lsrs	r5, r5, #5
    698a:	d023      	beq.n	69d4 <nrf_pin_configure+0x8c>
    698c:	bb2d      	cbnz	r5, 69da <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    698e:	4d19      	ldr	r5, [pc, #100]	; (69f4 <nrf_pin_configure+0xac>)
    6990:	f240 232e 	movw	r3, #558	; 0x22e
    6994:	462a      	mov	r2, r5
    6996:	4918      	ldr	r1, [pc, #96]	; (69f8 <nrf_pin_configure+0xb0>)
    6998:	4818      	ldr	r0, [pc, #96]	; (69fc <nrf_pin_configure+0xb4>)
    699a:	f005 fc6f 	bl	c27c <assert_print>
    699e:	f240 212e 	movw	r1, #558	; 0x22e
    69a2:	4628      	mov	r0, r5
    69a4:	f005 fc63 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    69a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69ac:	e016      	b.n	69dc <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    69ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    69b2:	e7e1      	b.n	6978 <nrf_pin_configure+0x30>
    switch (port)
    69b4:	2300      	movs	r3, #0
    69b6:	e7df      	b.n	6978 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69b8:	4e0e      	ldr	r6, [pc, #56]	; (69f4 <nrf_pin_configure+0xac>)
    69ba:	f240 2329 	movw	r3, #553	; 0x229
    69be:	4632      	mov	r2, r6
    69c0:	490f      	ldr	r1, [pc, #60]	; (6a00 <nrf_pin_configure+0xb8>)
    69c2:	480e      	ldr	r0, [pc, #56]	; (69fc <nrf_pin_configure+0xb4>)
    69c4:	f005 fc5a 	bl	c27c <assert_print>
    69c8:	f240 2129 	movw	r1, #553	; 0x229
    69cc:	4630      	mov	r0, r6
    69ce:	f005 fc4e 	bl	c26e <assert_post_action>
    69d2:	e7d7      	b.n	6984 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    69d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69d8:	e000      	b.n	69dc <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69da:	4b0a      	ldr	r3, [pc, #40]	; (6a04 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    69dc:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    69e0:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    69e4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    69e8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    69ec:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    69f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    69f4:	0000f0b8 	.word	0x0000f0b8
    69f8:	0000d800 	.word	0x0000d800
    69fc:	0000d63c 	.word	0x0000d63c
    6a00:	0000f0ec 	.word	0x0000f0ec
    6a04:	50000300 	.word	0x50000300

00006a08 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a0c:	4605      	mov	r5, r0
    6a0e:	460e      	mov	r6, r1
    6a10:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6a12:	2400      	movs	r4, #0
    6a14:	e04e      	b.n	6ab4 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a1a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6a1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6a22:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6a26:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    6a2a:	f013 0f20 	tst.w	r3, #32
    6a2e:	d01f      	beq.n	6a70 <pinctrl_configure_pins+0x68>
    6a30:	b109      	cbz	r1, 6a36 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    6a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6a36:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6a3a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a3c:	f012 0f01 	tst.w	r2, #1
    6a40:	d019      	beq.n	6a76 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    6a42:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a46:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6a4a:	d023      	beq.n	6a94 <pinctrl_configure_pins+0x8c>
    6a4c:	bb2b      	cbnz	r3, 6a9a <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    6a4e:	f8df 9344 	ldr.w	r9, [pc, #836]	; 6d94 <pinctrl_configure_pins+0x38c>
    6a52:	f240 232e 	movw	r3, #558	; 0x22e
    6a56:	464a      	mov	r2, r9
    6a58:	49cf      	ldr	r1, [pc, #828]	; (6d98 <pinctrl_configure_pins+0x390>)
    6a5a:	48d0      	ldr	r0, [pc, #832]	; (6d9c <pinctrl_configure_pins+0x394>)
    6a5c:	f005 fc0e 	bl	c27c <assert_print>
    6a60:	f240 212e 	movw	r1, #558	; 0x22e
    6a64:	4648      	mov	r0, r9
    6a66:	f005 fc02 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6a6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a6e:	e015      	b.n	6a9c <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    6a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a74:	e7df      	b.n	6a36 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a76:	f8df a31c 	ldr.w	sl, [pc, #796]	; 6d94 <pinctrl_configure_pins+0x38c>
    6a7a:	f240 2329 	movw	r3, #553	; 0x229
    6a7e:	4652      	mov	r2, sl
    6a80:	49c7      	ldr	r1, [pc, #796]	; (6da0 <pinctrl_configure_pins+0x398>)
    6a82:	48c6      	ldr	r0, [pc, #792]	; (6d9c <pinctrl_configure_pins+0x394>)
    6a84:	f005 fbfa 	bl	c27c <assert_print>
    6a88:	f240 2129 	movw	r1, #553	; 0x229
    6a8c:	4650      	mov	r0, sl
    6a8e:	f005 fbee 	bl	c26e <assert_post_action>
    6a92:	e7d6      	b.n	6a42 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    6a94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a98:	e000      	b.n	6a9c <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a9a:	4ac2      	ldr	r2, [pc, #776]	; (6da4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6a9c:	2101      	movs	r1, #1
    6a9e:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6aa2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6aa6:	460a      	mov	r2, r1
    6aa8:	f855 0008 	ldr.w	r0, [r5, r8]
    6aac:	f7ff ff4c 	bl	6948 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6ab0:	3401      	adds	r4, #1
    6ab2:	b2e4      	uxtb	r4, r4
    6ab4:	42b4      	cmp	r4, r6
    6ab6:	f080 841e 	bcs.w	72f6 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    6aba:	ea4f 0884 	mov.w	r8, r4, lsl #2
    6abe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6ac2:	0c1a      	lsrs	r2, r3, #16
    6ac4:	2a22      	cmp	r2, #34	; 0x22
    6ac6:	f200 8418 	bhi.w	72fa <pinctrl_configure_pins+0x8f2>
    6aca:	a101      	add	r1, pc, #4	; (adr r1, 6ad0 <pinctrl_configure_pins+0xc8>)
    6acc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6ad0:	00006a17 	.word	0x00006a17
    6ad4:	00006b5d 	.word	0x00006b5d
    6ad8:	00006b73 	.word	0x00006b73
    6adc:	00006c13 	.word	0x00006c13
    6ae0:	00006c29 	.word	0x00006c29
    6ae4:	00006cc9 	.word	0x00006cc9
    6ae8:	00006d69 	.word	0x00006d69
    6aec:	000072fb 	.word	0x000072fb
    6af0:	000072fb 	.word	0x000072fb
    6af4:	000072fb 	.word	0x000072fb
    6af8:	000072fb 	.word	0x000072fb
    6afc:	00006d7f 	.word	0x00006d7f
    6b00:	00006da9 	.word	0x00006da9
    6b04:	000072fb 	.word	0x000072fb
    6b08:	000072fb 	.word	0x000072fb
    6b0c:	000072fb 	.word	0x000072fb
    6b10:	000072fb 	.word	0x000072fb
    6b14:	000072fb 	.word	0x000072fb
    6b18:	000072fb 	.word	0x000072fb
    6b1c:	000072fb 	.word	0x000072fb
    6b20:	000072fb 	.word	0x000072fb
    6b24:	000072fb 	.word	0x000072fb
    6b28:	00006dbf 	.word	0x00006dbf
    6b2c:	00006ee5 	.word	0x00006ee5
    6b30:	0000700b 	.word	0x0000700b
    6b34:	00007147 	.word	0x00007147
    6b38:	000072fb 	.word	0x000072fb
    6b3c:	000072fb 	.word	0x000072fb
    6b40:	000072fb 	.word	0x000072fb
    6b44:	0000726d 	.word	0x0000726d
    6b48:	00007283 	.word	0x00007283
    6b4c:	00007299 	.word	0x00007299
    6b50:	000072af 	.word	0x000072af
    6b54:	000072c7 	.word	0x000072c7
    6b58:	000072df 	.word	0x000072df
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b60:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6b64:	2200      	movs	r2, #0
    6b66:	4611      	mov	r1, r2
    6b68:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6b6c:	f7ff feec 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6b70:	e79e      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b76:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6b7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6b7e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6b82:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6b86:	f013 0f20 	tst.w	r3, #32
    6b8a:	d01f      	beq.n	6bcc <pinctrl_configure_pins+0x1c4>
    6b8c:	b30a      	cbz	r2, 6bd2 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    6b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b92:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b96:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b98:	f013 0f01 	tst.w	r3, #1
    6b9c:	d01b      	beq.n	6bd6 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    6b9e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ba2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ba6:	d025      	beq.n	6bf4 <pinctrl_configure_pins+0x1ec>
    6ba8:	bb3b      	cbnz	r3, 6bfa <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    6baa:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 6d94 <pinctrl_configure_pins+0x38c>
    6bae:	f240 232e 	movw	r3, #558	; 0x22e
    6bb2:	464a      	mov	r2, r9
    6bb4:	4978      	ldr	r1, [pc, #480]	; (6d98 <pinctrl_configure_pins+0x390>)
    6bb6:	4879      	ldr	r0, [pc, #484]	; (6d9c <pinctrl_configure_pins+0x394>)
    6bb8:	f005 fb60 	bl	c27c <assert_print>
    6bbc:	f240 212e 	movw	r1, #558	; 0x22e
    6bc0:	4648      	mov	r0, r9
    6bc2:	f005 fb54 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6bc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bca:	e017      	b.n	6bfc <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    6bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bd0:	e7df      	b.n	6b92 <pinctrl_configure_pins+0x18a>
    switch (port)
    6bd2:	2300      	movs	r3, #0
    6bd4:	e7dd      	b.n	6b92 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bd6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 6d94 <pinctrl_configure_pins+0x38c>
    6bda:	f240 2329 	movw	r3, #553	; 0x229
    6bde:	4652      	mov	r2, sl
    6be0:	496f      	ldr	r1, [pc, #444]	; (6da0 <pinctrl_configure_pins+0x398>)
    6be2:	486e      	ldr	r0, [pc, #440]	; (6d9c <pinctrl_configure_pins+0x394>)
    6be4:	f005 fb4a 	bl	c27c <assert_print>
    6be8:	f240 2129 	movw	r1, #553	; 0x229
    6bec:	4650      	mov	r0, sl
    6bee:	f005 fb3e 	bl	c26e <assert_post_action>
    6bf2:	e7d4      	b.n	6b9e <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    6bf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bf8:	e000      	b.n	6bfc <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bfa:	4a6a      	ldr	r2, [pc, #424]	; (6da4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6bfc:	2101      	movs	r1, #1
    6bfe:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6c02:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c06:	460a      	mov	r2, r1
    6c08:	f855 0008 	ldr.w	r0, [r5, r8]
    6c0c:	f7ff fe9c 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6c10:	e74e      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    6c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c16:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6c1a:	2200      	movs	r2, #0
    6c1c:	4611      	mov	r1, r2
    6c1e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6c22:	f7ff fe91 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6c26:	e743      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c2c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6c30:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6c34:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6c38:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6c3c:	f013 0f20 	tst.w	r3, #32
    6c40:	d01f      	beq.n	6c82 <pinctrl_configure_pins+0x27a>
    6c42:	b30a      	cbz	r2, 6c88 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    6c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c48:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c4c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c4e:	f013 0f01 	tst.w	r3, #1
    6c52:	d01b      	beq.n	6c8c <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    6c54:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c58:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c5c:	d025      	beq.n	6caa <pinctrl_configure_pins+0x2a2>
    6c5e:	bb3b      	cbnz	r3, 6cb0 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    6c60:	f8df 9130 	ldr.w	r9, [pc, #304]	; 6d94 <pinctrl_configure_pins+0x38c>
    6c64:	f240 232e 	movw	r3, #558	; 0x22e
    6c68:	464a      	mov	r2, r9
    6c6a:	494b      	ldr	r1, [pc, #300]	; (6d98 <pinctrl_configure_pins+0x390>)
    6c6c:	484b      	ldr	r0, [pc, #300]	; (6d9c <pinctrl_configure_pins+0x394>)
    6c6e:	f005 fb05 	bl	c27c <assert_print>
    6c72:	f240 212e 	movw	r1, #558	; 0x22e
    6c76:	4648      	mov	r0, r9
    6c78:	f005 faf9 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6c7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c80:	e017      	b.n	6cb2 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    6c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c86:	e7df      	b.n	6c48 <pinctrl_configure_pins+0x240>
    switch (port)
    6c88:	2300      	movs	r3, #0
    6c8a:	e7dd      	b.n	6c48 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c8c:	f8df a104 	ldr.w	sl, [pc, #260]	; 6d94 <pinctrl_configure_pins+0x38c>
    6c90:	f240 2329 	movw	r3, #553	; 0x229
    6c94:	4652      	mov	r2, sl
    6c96:	4942      	ldr	r1, [pc, #264]	; (6da0 <pinctrl_configure_pins+0x398>)
    6c98:	4840      	ldr	r0, [pc, #256]	; (6d9c <pinctrl_configure_pins+0x394>)
    6c9a:	f005 faef 	bl	c27c <assert_print>
    6c9e:	f240 2129 	movw	r1, #553	; 0x229
    6ca2:	4650      	mov	r0, sl
    6ca4:	f005 fae3 	bl	c26e <assert_post_action>
    6ca8:	e7d4      	b.n	6c54 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    6caa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6cae:	e000      	b.n	6cb2 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cb0:	4a3c      	ldr	r2, [pc, #240]	; (6da4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6cb2:	2101      	movs	r1, #1
    6cb4:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6cb8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6cbc:	2200      	movs	r2, #0
    6cbe:	f855 0008 	ldr.w	r0, [r5, r8]
    6cc2:	f7ff fe41 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6cc6:	e6f3      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ccc:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6cd0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6cd4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6cd8:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6cdc:	f013 0f20 	tst.w	r3, #32
    6ce0:	d01f      	beq.n	6d22 <pinctrl_configure_pins+0x31a>
    6ce2:	b30a      	cbz	r2, 6d28 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    6ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ce8:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6cec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6cee:	f013 0f01 	tst.w	r3, #1
    6cf2:	d01b      	beq.n	6d2c <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    6cf4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cf8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6cfc:	d025      	beq.n	6d4a <pinctrl_configure_pins+0x342>
    6cfe:	bb3b      	cbnz	r3, 6d50 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    6d00:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6d94 <pinctrl_configure_pins+0x38c>
    6d04:	f240 232e 	movw	r3, #558	; 0x22e
    6d08:	464a      	mov	r2, r9
    6d0a:	4923      	ldr	r1, [pc, #140]	; (6d98 <pinctrl_configure_pins+0x390>)
    6d0c:	4823      	ldr	r0, [pc, #140]	; (6d9c <pinctrl_configure_pins+0x394>)
    6d0e:	f005 fab5 	bl	c27c <assert_print>
    6d12:	f240 212e 	movw	r1, #558	; 0x22e
    6d16:	4648      	mov	r0, r9
    6d18:	f005 faa9 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d20:	e017      	b.n	6d52 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    6d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6d26:	e7df      	b.n	6ce8 <pinctrl_configure_pins+0x2e0>
    switch (port)
    6d28:	2300      	movs	r3, #0
    6d2a:	e7dd      	b.n	6ce8 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d2c:	f8df a064 	ldr.w	sl, [pc, #100]	; 6d94 <pinctrl_configure_pins+0x38c>
    6d30:	f240 2329 	movw	r3, #553	; 0x229
    6d34:	4652      	mov	r2, sl
    6d36:	491a      	ldr	r1, [pc, #104]	; (6da0 <pinctrl_configure_pins+0x398>)
    6d38:	4818      	ldr	r0, [pc, #96]	; (6d9c <pinctrl_configure_pins+0x394>)
    6d3a:	f005 fa9f 	bl	c27c <assert_print>
    6d3e:	f240 2129 	movw	r1, #553	; 0x229
    6d42:	4650      	mov	r0, sl
    6d44:	f005 fa93 	bl	c26e <assert_post_action>
    6d48:	e7d4      	b.n	6cf4 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    6d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d4e:	e000      	b.n	6d52 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d50:	4a14      	ldr	r2, [pc, #80]	; (6da4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6d52:	2101      	movs	r1, #1
    6d54:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6d58:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6d5c:	460a      	mov	r2, r1
    6d5e:	f855 0008 	ldr.w	r0, [r5, r8]
    6d62:	f7ff fdf1 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d66:	e6a3      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d6c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d70:	2200      	movs	r2, #0
    6d72:	4611      	mov	r1, r2
    6d74:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d78:	f7ff fde6 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6d7c:	e698      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d82:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d86:	2200      	movs	r2, #0
    6d88:	4611      	mov	r1, r2
    6d8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d8e:	f7ff fddb 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6d92:	e68d      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
    6d94:	0000f0b8 	.word	0x0000f0b8
    6d98:	0000d800 	.word	0x0000d800
    6d9c:	0000d63c 	.word	0x0000d63c
    6da0:	0000f0ec 	.word	0x0000f0ec
    6da4:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6dac:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6db0:	2200      	movs	r2, #0
    6db2:	4611      	mov	r1, r2
    6db4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6db8:	f7ff fdc6 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6dbc:	e678      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6dc2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6dc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6dca:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6dce:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6dd2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6dd6:	d144      	bne.n	6e62 <pinctrl_configure_pins+0x45a>
    switch (port)
    6dd8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6ddc:	d01f      	beq.n	6e1e <pinctrl_configure_pins+0x416>
    6dde:	b10b      	cbz	r3, 6de4 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    6de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6de4:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6de8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dea:	f012 0f01 	tst.w	r2, #1
    6dee:	d019      	beq.n	6e24 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    6df0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6df4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6df8:	d023      	beq.n	6e42 <pinctrl_configure_pins+0x43a>
    6dfa:	bb2b      	cbnz	r3, 6e48 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    6dfc:	f8df 9300 	ldr.w	r9, [pc, #768]	; 7100 <pinctrl_configure_pins+0x6f8>
    6e00:	f240 232e 	movw	r3, #558	; 0x22e
    6e04:	464a      	mov	r2, r9
    6e06:	49bf      	ldr	r1, [pc, #764]	; (7104 <pinctrl_configure_pins+0x6fc>)
    6e08:	48bf      	ldr	r0, [pc, #764]	; (7108 <pinctrl_configure_pins+0x700>)
    6e0a:	f005 fa37 	bl	c27c <assert_print>
    6e0e:	f240 212e 	movw	r1, #558	; 0x22e
    6e12:	4648      	mov	r0, r9
    6e14:	f005 fa2b 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6e18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e1c:	e015      	b.n	6e4a <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    6e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e22:	e7df      	b.n	6de4 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e24:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 7100 <pinctrl_configure_pins+0x6f8>
    6e28:	f240 2329 	movw	r3, #553	; 0x229
    6e2c:	4652      	mov	r2, sl
    6e2e:	49b7      	ldr	r1, [pc, #732]	; (710c <pinctrl_configure_pins+0x704>)
    6e30:	48b5      	ldr	r0, [pc, #724]	; (7108 <pinctrl_configure_pins+0x700>)
    6e32:	f005 fa23 	bl	c27c <assert_print>
    6e36:	f240 2129 	movw	r1, #553	; 0x229
    6e3a:	4650      	mov	r0, sl
    6e3c:	f005 fa17 	bl	c26e <assert_post_action>
    6e40:	e7d6      	b.n	6df0 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    6e42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e46:	e000      	b.n	6e4a <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e48:	4ab1      	ldr	r2, [pc, #708]	; (7110 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6e4a:	2301      	movs	r3, #1
    6e4c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6e50:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6e54:	2201      	movs	r2, #1
    6e56:	4611      	mov	r1, r2
    6e58:	f855 0008 	ldr.w	r0, [r5, r8]
    6e5c:	f7ff fd74 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6e60:	e626      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
    switch (port)
    6e62:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e66:	d01f      	beq.n	6ea8 <pinctrl_configure_pins+0x4a0>
    6e68:	b30b      	cbz	r3, 6eae <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    6e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e6e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e72:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e74:	f013 0f01 	tst.w	r3, #1
    6e78:	d01b      	beq.n	6eb2 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    6e7a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e7e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e82:	d025      	beq.n	6ed0 <pinctrl_configure_pins+0x4c8>
    6e84:	bb3b      	cbnz	r3, 6ed6 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    6e86:	f8df 9278 	ldr.w	r9, [pc, #632]	; 7100 <pinctrl_configure_pins+0x6f8>
    6e8a:	f240 232e 	movw	r3, #558	; 0x22e
    6e8e:	464a      	mov	r2, r9
    6e90:	499c      	ldr	r1, [pc, #624]	; (7104 <pinctrl_configure_pins+0x6fc>)
    6e92:	489d      	ldr	r0, [pc, #628]	; (7108 <pinctrl_configure_pins+0x700>)
    6e94:	f005 f9f2 	bl	c27c <assert_print>
    6e98:	f240 212e 	movw	r1, #558	; 0x22e
    6e9c:	4648      	mov	r0, r9
    6e9e:	f005 f9e6 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6ea2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ea6:	e017      	b.n	6ed8 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    6ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6eac:	e7df      	b.n	6e6e <pinctrl_configure_pins+0x466>
    switch (port)
    6eae:	2300      	movs	r3, #0
    6eb0:	e7dd      	b.n	6e6e <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eb2:	f8df a24c 	ldr.w	sl, [pc, #588]	; 7100 <pinctrl_configure_pins+0x6f8>
    6eb6:	f240 2329 	movw	r3, #553	; 0x229
    6eba:	4652      	mov	r2, sl
    6ebc:	4993      	ldr	r1, [pc, #588]	; (710c <pinctrl_configure_pins+0x704>)
    6ebe:	4892      	ldr	r0, [pc, #584]	; (7108 <pinctrl_configure_pins+0x700>)
    6ec0:	f005 f9dc 	bl	c27c <assert_print>
    6ec4:	f240 2129 	movw	r1, #553	; 0x229
    6ec8:	4650      	mov	r0, sl
    6eca:	f005 f9d0 	bl	c26e <assert_post_action>
    6ece:	e7d4      	b.n	6e7a <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    6ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ed4:	e000      	b.n	6ed8 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ed6:	4a8e      	ldr	r2, [pc, #568]	; (7110 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6ed8:	2301      	movs	r3, #1
    6eda:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6ede:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6ee2:	e7b7      	b.n	6e54 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ee8:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6eec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6ef0:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6ef4:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6ef8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6efc:	d144      	bne.n	6f88 <pinctrl_configure_pins+0x580>
    switch (port)
    6efe:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f02:	d01f      	beq.n	6f44 <pinctrl_configure_pins+0x53c>
    6f04:	b10b      	cbz	r3, 6f0a <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    6f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6f0a:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f0e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f10:	f012 0f01 	tst.w	r2, #1
    6f14:	d019      	beq.n	6f4a <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    6f16:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f1a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f1e:	d023      	beq.n	6f68 <pinctrl_configure_pins+0x560>
    6f20:	bb2b      	cbnz	r3, 6f6e <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    6f22:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 7100 <pinctrl_configure_pins+0x6f8>
    6f26:	f240 232e 	movw	r3, #558	; 0x22e
    6f2a:	464a      	mov	r2, r9
    6f2c:	4975      	ldr	r1, [pc, #468]	; (7104 <pinctrl_configure_pins+0x6fc>)
    6f2e:	4876      	ldr	r0, [pc, #472]	; (7108 <pinctrl_configure_pins+0x700>)
    6f30:	f005 f9a4 	bl	c27c <assert_print>
    6f34:	f240 212e 	movw	r1, #558	; 0x22e
    6f38:	4648      	mov	r0, r9
    6f3a:	f005 f998 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f42:	e015      	b.n	6f70 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    6f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f48:	e7df      	b.n	6f0a <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f4a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 7100 <pinctrl_configure_pins+0x6f8>
    6f4e:	f240 2329 	movw	r3, #553	; 0x229
    6f52:	4652      	mov	r2, sl
    6f54:	496d      	ldr	r1, [pc, #436]	; (710c <pinctrl_configure_pins+0x704>)
    6f56:	486c      	ldr	r0, [pc, #432]	; (7108 <pinctrl_configure_pins+0x700>)
    6f58:	f005 f990 	bl	c27c <assert_print>
    6f5c:	f240 2129 	movw	r1, #553	; 0x229
    6f60:	4650      	mov	r0, sl
    6f62:	f005 f984 	bl	c26e <assert_post_action>
    6f66:	e7d6      	b.n	6f16 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    6f68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f6c:	e000      	b.n	6f70 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f6e:	4a68      	ldr	r2, [pc, #416]	; (7110 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6f70:	2301      	movs	r3, #1
    6f72:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6f76:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6f7a:	2201      	movs	r2, #1
    6f7c:	4611      	mov	r1, r2
    6f7e:	f855 0008 	ldr.w	r0, [r5, r8]
    6f82:	f7ff fce1 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6f86:	e593      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
    switch (port)
    6f88:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f8c:	d01f      	beq.n	6fce <pinctrl_configure_pins+0x5c6>
    6f8e:	b30b      	cbz	r3, 6fd4 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    6f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6f94:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f9a:	f013 0f01 	tst.w	r3, #1
    6f9e:	d01b      	beq.n	6fd8 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    6fa0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6fa4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6fa8:	d025      	beq.n	6ff6 <pinctrl_configure_pins+0x5ee>
    6faa:	bb3b      	cbnz	r3, 6ffc <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    6fac:	f8df 9150 	ldr.w	r9, [pc, #336]	; 7100 <pinctrl_configure_pins+0x6f8>
    6fb0:	f240 232e 	movw	r3, #558	; 0x22e
    6fb4:	464a      	mov	r2, r9
    6fb6:	4953      	ldr	r1, [pc, #332]	; (7104 <pinctrl_configure_pins+0x6fc>)
    6fb8:	4853      	ldr	r0, [pc, #332]	; (7108 <pinctrl_configure_pins+0x700>)
    6fba:	f005 f95f 	bl	c27c <assert_print>
    6fbe:	f240 212e 	movw	r1, #558	; 0x22e
    6fc2:	4648      	mov	r0, r9
    6fc4:	f005 f953 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    6fc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6fcc:	e017      	b.n	6ffe <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    6fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fd2:	e7df      	b.n	6f94 <pinctrl_configure_pins+0x58c>
    switch (port)
    6fd4:	2300      	movs	r3, #0
    6fd6:	e7dd      	b.n	6f94 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6fd8:	f8df a124 	ldr.w	sl, [pc, #292]	; 7100 <pinctrl_configure_pins+0x6f8>
    6fdc:	f240 2329 	movw	r3, #553	; 0x229
    6fe0:	4652      	mov	r2, sl
    6fe2:	494a      	ldr	r1, [pc, #296]	; (710c <pinctrl_configure_pins+0x704>)
    6fe4:	4848      	ldr	r0, [pc, #288]	; (7108 <pinctrl_configure_pins+0x700>)
    6fe6:	f005 f949 	bl	c27c <assert_print>
    6fea:	f240 2129 	movw	r1, #553	; 0x229
    6fee:	4650      	mov	r0, sl
    6ff0:	f005 f93d 	bl	c26e <assert_post_action>
    6ff4:	e7d4      	b.n	6fa0 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    6ff6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ffa:	e000      	b.n	6ffe <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6ffc:	4a44      	ldr	r2, [pc, #272]	; (7110 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6ffe:	2301      	movs	r3, #1
    7000:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    7004:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7008:	e7b7      	b.n	6f7a <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    700a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    700e:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7012:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7016:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    701a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    701e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    7022:	d144      	bne.n	70ae <pinctrl_configure_pins+0x6a6>
    switch (port)
    7024:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7028:	d01f      	beq.n	706a <pinctrl_configure_pins+0x662>
    702a:	b10b      	cbz	r3, 7030 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    702c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7030:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7034:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7036:	f012 0f01 	tst.w	r2, #1
    703a:	d019      	beq.n	7070 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    703c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7040:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7044:	d023      	beq.n	708e <pinctrl_configure_pins+0x686>
    7046:	bb2b      	cbnz	r3, 7094 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    7048:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 7100 <pinctrl_configure_pins+0x6f8>
    704c:	f240 232e 	movw	r3, #558	; 0x22e
    7050:	464a      	mov	r2, r9
    7052:	492c      	ldr	r1, [pc, #176]	; (7104 <pinctrl_configure_pins+0x6fc>)
    7054:	482c      	ldr	r0, [pc, #176]	; (7108 <pinctrl_configure_pins+0x700>)
    7056:	f005 f911 	bl	c27c <assert_print>
    705a:	f240 212e 	movw	r1, #558	; 0x22e
    705e:	4648      	mov	r0, r9
    7060:	f005 f905 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7068:	e015      	b.n	7096 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    706a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    706e:	e7df      	b.n	7030 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7070:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7100 <pinctrl_configure_pins+0x6f8>
    7074:	f240 2329 	movw	r3, #553	; 0x229
    7078:	4652      	mov	r2, sl
    707a:	4924      	ldr	r1, [pc, #144]	; (710c <pinctrl_configure_pins+0x704>)
    707c:	4822      	ldr	r0, [pc, #136]	; (7108 <pinctrl_configure_pins+0x700>)
    707e:	f005 f8fd 	bl	c27c <assert_print>
    7082:	f240 2129 	movw	r1, #553	; 0x229
    7086:	4650      	mov	r0, sl
    7088:	f005 f8f1 	bl	c26e <assert_post_action>
    708c:	e7d6      	b.n	703c <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    708e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7092:	e000      	b.n	7096 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7094:	4a1e      	ldr	r2, [pc, #120]	; (7110 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7096:	2301      	movs	r3, #1
    7098:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    709c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    70a0:	2201      	movs	r2, #1
    70a2:	4611      	mov	r1, r2
    70a4:	f855 0008 	ldr.w	r0, [r5, r8]
    70a8:	f7ff fc4e 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    70ac:	e500      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
    switch (port)
    70ae:	ea5f 1359 	movs.w	r3, r9, lsr #5
    70b2:	d01f      	beq.n	70f4 <pinctrl_configure_pins+0x6ec>
    70b4:	b30b      	cbz	r3, 70fa <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    70b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    70ba:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    70be:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70c0:	f013 0f01 	tst.w	r3, #1
    70c4:	d026      	beq.n	7114 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    70c6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    70ca:	ea5f 1359 	movs.w	r3, r9, lsr #5
    70ce:	d030      	beq.n	7132 <pinctrl_configure_pins+0x72a>
    70d0:	bb93      	cbnz	r3, 7138 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    70d2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 7100 <pinctrl_configure_pins+0x6f8>
    70d6:	f240 232e 	movw	r3, #558	; 0x22e
    70da:	464a      	mov	r2, r9
    70dc:	4909      	ldr	r1, [pc, #36]	; (7104 <pinctrl_configure_pins+0x6fc>)
    70de:	480a      	ldr	r0, [pc, #40]	; (7108 <pinctrl_configure_pins+0x700>)
    70e0:	f005 f8cc 	bl	c27c <assert_print>
    70e4:	f240 212e 	movw	r1, #558	; 0x22e
    70e8:	4648      	mov	r0, r9
    70ea:	f005 f8c0 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    70ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    70f2:	e022      	b.n	713a <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    70f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70f8:	e7df      	b.n	70ba <pinctrl_configure_pins+0x6b2>
    switch (port)
    70fa:	2300      	movs	r3, #0
    70fc:	e7dd      	b.n	70ba <pinctrl_configure_pins+0x6b2>
    70fe:	bf00      	nop
    7100:	0000f0b8 	.word	0x0000f0b8
    7104:	0000d800 	.word	0x0000d800
    7108:	0000d63c 	.word	0x0000d63c
    710c:	0000f0ec 	.word	0x0000f0ec
    7110:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7114:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 7304 <pinctrl_configure_pins+0x8fc>
    7118:	f240 2329 	movw	r3, #553	; 0x229
    711c:	4652      	mov	r2, sl
    711e:	497a      	ldr	r1, [pc, #488]	; (7308 <pinctrl_configure_pins+0x900>)
    7120:	487a      	ldr	r0, [pc, #488]	; (730c <pinctrl_configure_pins+0x904>)
    7122:	f005 f8ab 	bl	c27c <assert_print>
    7126:	f240 2129 	movw	r1, #553	; 0x229
    712a:	4650      	mov	r0, sl
    712c:	f005 f89f 	bl	c26e <assert_post_action>
    7130:	e7c9      	b.n	70c6 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    7132:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7136:	e000      	b.n	713a <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7138:	4a75      	ldr	r2, [pc, #468]	; (7310 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    713a:	2301      	movs	r3, #1
    713c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    7140:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7144:	e7ac      	b.n	70a0 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    714a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    714e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7152:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    7156:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    715a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    715e:	d144      	bne.n	71ea <pinctrl_configure_pins+0x7e2>
    switch (port)
    7160:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7164:	d01f      	beq.n	71a6 <pinctrl_configure_pins+0x79e>
    7166:	b10b      	cbz	r3, 716c <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    7168:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    716c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7170:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7172:	f012 0f01 	tst.w	r2, #1
    7176:	d019      	beq.n	71ac <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    7178:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    717c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7180:	d023      	beq.n	71ca <pinctrl_configure_pins+0x7c2>
    7182:	bb2b      	cbnz	r3, 71d0 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    7184:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7304 <pinctrl_configure_pins+0x8fc>
    7188:	f240 232e 	movw	r3, #558	; 0x22e
    718c:	464a      	mov	r2, r9
    718e:	4961      	ldr	r1, [pc, #388]	; (7314 <pinctrl_configure_pins+0x90c>)
    7190:	485e      	ldr	r0, [pc, #376]	; (730c <pinctrl_configure_pins+0x904>)
    7192:	f005 f873 	bl	c27c <assert_print>
    7196:	f240 212e 	movw	r1, #558	; 0x22e
    719a:	4648      	mov	r0, r9
    719c:	f005 f867 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    71a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71a4:	e015      	b.n	71d2 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    71a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71aa:	e7df      	b.n	716c <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71ac:	f8df a154 	ldr.w	sl, [pc, #340]	; 7304 <pinctrl_configure_pins+0x8fc>
    71b0:	f240 2329 	movw	r3, #553	; 0x229
    71b4:	4652      	mov	r2, sl
    71b6:	4954      	ldr	r1, [pc, #336]	; (7308 <pinctrl_configure_pins+0x900>)
    71b8:	4854      	ldr	r0, [pc, #336]	; (730c <pinctrl_configure_pins+0x904>)
    71ba:	f005 f85f 	bl	c27c <assert_print>
    71be:	f240 2129 	movw	r1, #553	; 0x229
    71c2:	4650      	mov	r0, sl
    71c4:	f005 f853 	bl	c26e <assert_post_action>
    71c8:	e7d6      	b.n	7178 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    71ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71ce:	e000      	b.n	71d2 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71d0:	4a4f      	ldr	r2, [pc, #316]	; (7310 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    71d2:	2301      	movs	r3, #1
    71d4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    71d8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    71dc:	2201      	movs	r2, #1
    71de:	4611      	mov	r1, r2
    71e0:	f855 0008 	ldr.w	r0, [r5, r8]
    71e4:	f7ff fbb0 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    71e8:	e462      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
    switch (port)
    71ea:	ea5f 1359 	movs.w	r3, r9, lsr #5
    71ee:	d01f      	beq.n	7230 <pinctrl_configure_pins+0x828>
    71f0:	b30b      	cbz	r3, 7236 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    71f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    71f6:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    71fa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71fc:	f013 0f01 	tst.w	r3, #1
    7200:	d01b      	beq.n	723a <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    7202:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7206:	ea5f 1359 	movs.w	r3, r9, lsr #5
    720a:	d025      	beq.n	7258 <pinctrl_configure_pins+0x850>
    720c:	bb3b      	cbnz	r3, 725e <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    720e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 7304 <pinctrl_configure_pins+0x8fc>
    7212:	f240 232e 	movw	r3, #558	; 0x22e
    7216:	464a      	mov	r2, r9
    7218:	493e      	ldr	r1, [pc, #248]	; (7314 <pinctrl_configure_pins+0x90c>)
    721a:	483c      	ldr	r0, [pc, #240]	; (730c <pinctrl_configure_pins+0x904>)
    721c:	f005 f82e 	bl	c27c <assert_print>
    7220:	f240 212e 	movw	r1, #558	; 0x22e
    7224:	4648      	mov	r0, r9
    7226:	f005 f822 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    722a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    722e:	e017      	b.n	7260 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    7230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7234:	e7df      	b.n	71f6 <pinctrl_configure_pins+0x7ee>
    switch (port)
    7236:	2300      	movs	r3, #0
    7238:	e7dd      	b.n	71f6 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    723a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 7304 <pinctrl_configure_pins+0x8fc>
    723e:	f240 2329 	movw	r3, #553	; 0x229
    7242:	4652      	mov	r2, sl
    7244:	4930      	ldr	r1, [pc, #192]	; (7308 <pinctrl_configure_pins+0x900>)
    7246:	4831      	ldr	r0, [pc, #196]	; (730c <pinctrl_configure_pins+0x904>)
    7248:	f005 f818 	bl	c27c <assert_print>
    724c:	f240 2129 	movw	r1, #553	; 0x229
    7250:	4650      	mov	r0, sl
    7252:	f005 f80c 	bl	c26e <assert_post_action>
    7256:	e7d4      	b.n	7202 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    7258:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    725c:	e000      	b.n	7260 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    725e:	4a2c      	ldr	r2, [pc, #176]	; (7310 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7260:	2301      	movs	r3, #1
    7262:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    7266:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    726a:	e7b7      	b.n	71dc <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    726c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7270:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7274:	2201      	movs	r2, #1
    7276:	2100      	movs	r1, #0
    7278:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    727c:	f7ff fb64 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7280:	e416      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    7282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7286:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    728a:	2201      	movs	r2, #1
    728c:	2100      	movs	r1, #0
    728e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7292:	f7ff fb59 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7296:	e40b      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    729c:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72a0:	2201      	movs	r2, #1
    72a2:	2100      	movs	r1, #0
    72a4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    72a8:	f7ff fb4e 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    72ac:	e400      	b.n	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    72ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72b2:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72b6:	2201      	movs	r2, #1
    72b8:	2100      	movs	r1, #0
    72ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    72be:	f7ff fb43 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    72c2:	f7ff bbf5 	b.w	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    72c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72ca:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72ce:	2201      	movs	r2, #1
    72d0:	2100      	movs	r1, #0
    72d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    72d6:	f7ff fb37 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    72da:	f7ff bbe9 	b.w	6ab0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    72de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    72e2:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72e6:	2201      	movs	r2, #1
    72e8:	2100      	movs	r1, #0
    72ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    72ee:	f7ff fb2b 	bl	6948 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    72f2:	f7ff bbdd 	b.w	6ab0 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    72f6:	2000      	movs	r0, #0
    72f8:	e001      	b.n	72fe <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    72fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    72fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7302:	bf00      	nop
    7304:	0000f0b8 	.word	0x0000f0b8
    7308:	0000f0ec 	.word	0x0000f0ec
    730c:	0000d63c 	.word	0x0000d63c
    7310:	50000300 	.word	0x50000300
    7314:	0000d800 	.word	0x0000d800

00007318 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7318:	b510      	push	{r4, lr}
    731a:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    731c:	f7fc f9d4 	bl	36c8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    7320:	4b06      	ldr	r3, [pc, #24]	; (733c <k_sys_fatal_error_handler+0x24>)
    7322:	9302      	str	r3, [sp, #8]
    7324:	2400      	movs	r4, #0
    7326:	9401      	str	r4, [sp, #4]
    7328:	9400      	str	r4, [sp, #0]
    732a:	4623      	mov	r3, r4
    732c:	2201      	movs	r2, #1
    732e:	4904      	ldr	r1, [pc, #16]	; (7340 <k_sys_fatal_error_handler+0x28>)
    7330:	4620      	mov	r0, r4
    7332:	f005 fd57 	bl	cde4 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    7336:	4620      	mov	r0, r4
    7338:	f7fe f810 	bl	535c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    733c:	0000f218 	.word	0x0000f218
    7340:	0000d474 	.word	0x0000d474

00007344 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7344:	4b02      	ldr	r3, [pc, #8]	; (7350 <nvmc_wait+0xc>)
    7346:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    734a:	2b00      	cmp	r3, #0
    734c:	d0fa      	beq.n	7344 <nvmc_wait>
}
    734e:	4770      	bx	lr
    7350:	4001e000 	.word	0x4001e000

00007354 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    7354:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7356:	4b03      	ldr	r3, [pc, #12]	; (7364 <nvmc_config+0x10>)
    7358:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    735c:	f7ff fff2 	bl	7344 <nvmc_wait>
}
    7360:	bd08      	pop	{r3, pc}
    7362:	bf00      	nop
    7364:	4001e000 	.word	0x4001e000

00007368 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7368:	4b01      	ldr	r3, [pc, #4]	; (7370 <SystemCoreClockUpdate+0x8>)
    736a:	4a02      	ldr	r2, [pc, #8]	; (7374 <SystemCoreClockUpdate+0xc>)
    736c:	601a      	str	r2, [r3, #0]
}
    736e:	4770      	bx	lr
    7370:	200000f0 	.word	0x200000f0
    7374:	03d09000 	.word	0x03d09000

00007378 <SystemInit>:

void SystemInit(void)
{
    7378:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    737a:	f005 fd50 	bl	ce1e <nrf52_errata_36>
    737e:	b140      	cbz	r0, 7392 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    7380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7384:	2200      	movs	r2, #0
    7386:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    738a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    738e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    7392:	f005 fd4e 	bl	ce32 <nrf52_errata_66>
    7396:	2800      	cmp	r0, #0
    7398:	d046      	beq.n	7428 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    739a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    739e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    73a2:	4b59      	ldr	r3, [pc, #356]	; (7508 <SystemInit+0x190>)
    73a4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    73a8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    73ac:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    73b0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    73b4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    73b8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    73bc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    73c0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    73c4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    73c8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    73cc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    73d0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    73d4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    73d8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    73dc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    73e0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    73e4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    73e8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    73ec:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    73f0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    73f4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    73f8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    73fc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    7400:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    7404:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    7408:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    740c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    7410:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    7414:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    7418:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    741c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    7420:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    7424:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    7428:	f005 fd0d 	bl	ce46 <nrf52_errata_98>
    742c:	b118      	cbz	r0, 7436 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    742e:	4b37      	ldr	r3, [pc, #220]	; (750c <SystemInit+0x194>)
    7430:	4a37      	ldr	r2, [pc, #220]	; (7510 <SystemInit+0x198>)
    7432:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    7436:	f005 fd19 	bl	ce6c <nrf52_errata_103>
    743a:	b118      	cbz	r0, 7444 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    743c:	4b35      	ldr	r3, [pc, #212]	; (7514 <SystemInit+0x19c>)
    743e:	22fb      	movs	r2, #251	; 0xfb
    7440:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    7444:	f005 fd25 	bl	ce92 <nrf52_errata_115>
    7448:	b170      	cbz	r0, 7468 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    744a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    744e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    7452:	f023 030f 	bic.w	r3, r3, #15
    7456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    745a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    745e:	f002 020f 	and.w	r2, r2, #15
    7462:	4313      	orrs	r3, r2
    7464:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7468:	f005 fd26 	bl	ceb8 <nrf52_errata_120>
    746c:	b120      	cbz	r0, 7478 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    746e:	4b2a      	ldr	r3, [pc, #168]	; (7518 <SystemInit+0x1a0>)
    7470:	f44f 7200 	mov.w	r2, #512	; 0x200
    7474:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    7478:	f005 fd31 	bl	cede <nrf52_errata_136>
    747c:	b160      	cbz	r0, 7498 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    747e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7482:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7486:	f013 0f01 	tst.w	r3, #1
    748a:	d005      	beq.n	7498 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    748c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7490:	f06f 0201 	mvn.w	r2, #1
    7494:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7498:	f005 fd2b 	bl	cef2 <nrf52_configuration_249>
    749c:	b138      	cbz	r0, 74ae <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    749e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    74a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    74a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74aa:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    74ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    74b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    74b6:	2b00      	cmp	r3, #0
    74b8:	db08      	blt.n	74cc <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    74ba:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    74be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    74c2:	2b00      	cmp	r3, #0
    74c4:	db02      	blt.n	74cc <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    74c6:	f7ff ff4f 	bl	7368 <SystemCoreClockUpdate>
}
    74ca:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    74cc:	2001      	movs	r0, #1
    74ce:	f7ff ff41 	bl	7354 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    74d2:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    74d6:	2512      	movs	r5, #18
    74d8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    74dc:	f7ff ff32 	bl	7344 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    74e0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    74e4:	f7ff ff2e 	bl	7344 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    74e8:	2000      	movs	r0, #0
    74ea:	f7ff ff33 	bl	7354 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    74ee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    74f2:	490a      	ldr	r1, [pc, #40]	; (751c <SystemInit+0x1a4>)
    74f4:	68ca      	ldr	r2, [r1, #12]
    74f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    74fa:	4b09      	ldr	r3, [pc, #36]	; (7520 <SystemInit+0x1a8>)
    74fc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    74fe:	60cb      	str	r3, [r1, #12]
    7500:	f3bf 8f4f 	dsb	sy
    __NOP();
    7504:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7506:	e7fd      	b.n	7504 <SystemInit+0x18c>
    7508:	4000c000 	.word	0x4000c000
    750c:	40005000 	.word	0x40005000
    7510:	00038148 	.word	0x00038148
    7514:	4000f000 	.word	0x4000f000
    7518:	40029000 	.word	0x40029000
    751c:	e000ed00 	.word	0xe000ed00
    7520:	05fa0004 	.word	0x05fa0004

00007524 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7524:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    7526:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    7528:	fab4 f384 	clz	r3, r4
    752c:	f1c3 031f 	rsb	r3, r3, #31
    7530:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    7534:	2b00      	cmp	r3, #0
    7536:	db16      	blt.n	7566 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    7538:	2201      	movs	r2, #1
    753a:	fa02 f303 	lsl.w	r3, r2, r3
    753e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7542:	f3bf 8f5b 	dmb	ish
    7546:	e850 2f00 	ldrex	r2, [r0]
    754a:	42a2      	cmp	r2, r4
    754c:	d104      	bne.n	7558 <nrfx_flag32_alloc+0x34>
    754e:	e840 3e00 	strex	lr, r3, [r0]
    7552:	f1be 0f00 	cmp.w	lr, #0
    7556:	d1f6      	bne.n	7546 <nrfx_flag32_alloc+0x22>
    7558:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    755c:	d1e3      	bne.n	7526 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    755e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    7562:	4802      	ldr	r0, [pc, #8]	; (756c <nrfx_flag32_alloc+0x48>)
}
    7564:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    7566:	4802      	ldr	r0, [pc, #8]	; (7570 <nrfx_flag32_alloc+0x4c>)
    7568:	e7fc      	b.n	7564 <nrfx_flag32_alloc+0x40>
    756a:	bf00      	nop
    756c:	0bad0000 	.word	0x0bad0000
    7570:	0bad0002 	.word	0x0bad0002

00007574 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7574:	6803      	ldr	r3, [r0, #0]
    7576:	40cb      	lsrs	r3, r1
    7578:	f013 0f01 	tst.w	r3, #1
    757c:	d115      	bne.n	75aa <nrfx_flag32_free+0x36>
{
    757e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    7580:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    7582:	2301      	movs	r3, #1
    7584:	408b      	lsls	r3, r1
    7586:	4313      	orrs	r3, r2
    7588:	f3bf 8f5b 	dmb	ish
    758c:	e850 cf00 	ldrex	ip, [r0]
    7590:	4594      	cmp	ip, r2
    7592:	d104      	bne.n	759e <nrfx_flag32_free+0x2a>
    7594:	e840 3e00 	strex	lr, r3, [r0]
    7598:	f1be 0f00 	cmp.w	lr, #0
    759c:	d1f6      	bne.n	758c <nrfx_flag32_free+0x18>
    759e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    75a2:	d1ed      	bne.n	7580 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    75a4:	4802      	ldr	r0, [pc, #8]	; (75b0 <nrfx_flag32_free+0x3c>)
}
    75a6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    75aa:	4802      	ldr	r0, [pc, #8]	; (75b4 <nrfx_flag32_free+0x40>)
}
    75ac:	4770      	bx	lr
    75ae:	bf00      	nop
    75b0:	0bad0000 	.word	0x0bad0000
    75b4:	0bad0004 	.word	0x0bad0004

000075b8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    75b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ba:	b083      	sub	sp, #12
    switch (domain)
    75bc:	4605      	mov	r5, r0
    75be:	b168      	cbz	r0, 75dc <clock_stop+0x24>
    75c0:	2801      	cmp	r0, #1
    75c2:	d020      	beq.n	7606 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    75c4:	4c3d      	ldr	r4, [pc, #244]	; (76bc <clock_stop+0x104>)
    75c6:	23d8      	movs	r3, #216	; 0xd8
    75c8:	4622      	mov	r2, r4
    75ca:	493d      	ldr	r1, [pc, #244]	; (76c0 <clock_stop+0x108>)
    75cc:	483d      	ldr	r0, [pc, #244]	; (76c4 <clock_stop+0x10c>)
    75ce:	f004 fe55 	bl	c27c <assert_print>
    75d2:	21d8      	movs	r1, #216	; 0xd8
    75d4:	4620      	mov	r0, r4
    75d6:	f004 fe4a 	bl	c26e <assert_post_action>
            return;
    75da:	e068      	b.n	76ae <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    75dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75e0:	2202      	movs	r2, #2
    75e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75e6:	2200      	movs	r2, #0
    75e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    75ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75f0:	2201      	movs	r2, #1
    75f2:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    75f4:	2301      	movs	r3, #1
    75f6:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    75fa:	429d      	cmp	r5, r3
    75fc:	d00f      	beq.n	761e <clock_stop+0x66>
    75fe:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7600:	f242 7410 	movw	r4, #10000	; 0x2710
    7604:	e029      	b.n	765a <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    7606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    760a:	2201      	movs	r2, #1
    760c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7610:	2100      	movs	r1, #0
    7612:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7616:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    761a:	605a      	str	r2, [r3, #4]
}
    761c:	e7ea      	b.n	75f4 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    761e:	f10d 0607 	add.w	r6, sp, #7
    7622:	e7ed      	b.n	7600 <clock_stop+0x48>
            if (p_clk_src != NULL)
    7624:	b136      	cbz	r6, 7634 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    762a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    762e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7632:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7638:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    763c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7640:	d12f      	bne.n	76a2 <clock_stop+0xea>
    return false;
    7642:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7644:	b38b      	cbz	r3, 76aa <clock_stop+0xf2>
    7646:	b11e      	cbz	r6, 7650 <clock_stop+0x98>
    7648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    764c:	2b01      	cmp	r3, #1
    764e:	d12c      	bne.n	76aa <clock_stop+0xf2>
    7650:	2001      	movs	r0, #1
    7652:	f005 fc61 	bl	cf18 <nrfx_busy_wait>
    7656:	3c01      	subs	r4, #1
    7658:	d027      	beq.n	76aa <clock_stop+0xf2>
    switch (domain)
    765a:	2d00      	cmp	r5, #0
    765c:	d0e2      	beq.n	7624 <clock_stop+0x6c>
    765e:	2d01      	cmp	r5, #1
    7660:	d00e      	beq.n	7680 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    7662:	4f19      	ldr	r7, [pc, #100]	; (76c8 <clock_stop+0x110>)
    7664:	f44f 734f 	mov.w	r3, #828	; 0x33c
    7668:	463a      	mov	r2, r7
    766a:	4915      	ldr	r1, [pc, #84]	; (76c0 <clock_stop+0x108>)
    766c:	4815      	ldr	r0, [pc, #84]	; (76c4 <clock_stop+0x10c>)
    766e:	f004 fe05 	bl	c27c <assert_print>
    7672:	f44f 714f 	mov.w	r1, #828	; 0x33c
    7676:	4638      	mov	r0, r7
    7678:	f004 fdf9 	bl	c26e <assert_post_action>
            return false;
    767c:	2300      	movs	r3, #0
    767e:	e7e1      	b.n	7644 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    7680:	b136      	cbz	r6, 7690 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7686:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    768a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    768e:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7694:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7698:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    769c:	d103      	bne.n	76a6 <clock_stop+0xee>
    return false;
    769e:	2300      	movs	r3, #0
    76a0:	e7d0      	b.n	7644 <clock_stop+0x8c>
                return true;
    76a2:	2301      	movs	r3, #1
    76a4:	e7ce      	b.n	7644 <clock_stop+0x8c>
                return true;
    76a6:	2301      	movs	r3, #1
    76a8:	e7cc      	b.n	7644 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    76aa:	2d01      	cmp	r5, #1
    76ac:	d001      	beq.n	76b2 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    76ae:	b003      	add	sp, #12
    76b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    76b2:	4b06      	ldr	r3, [pc, #24]	; (76cc <clock_stop+0x114>)
    76b4:	2200      	movs	r2, #0
    76b6:	715a      	strb	r2, [r3, #5]
    76b8:	e7f9      	b.n	76ae <clock_stop+0xf6>
    76ba:	bf00      	nop
    76bc:	0000f238 	.word	0x0000f238
    76c0:	0000d800 	.word	0x0000d800
    76c4:	0000d63c 	.word	0x0000d63c
    76c8:	0000f278 	.word	0x0000f278
    76cc:	20000d68 	.word	0x20000d68

000076d0 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    76d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    76d2:	4604      	mov	r4, r0
    76d4:	b150      	cbz	r0, 76ec <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    76d6:	4b0d      	ldr	r3, [pc, #52]	; (770c <nrfx_clock_init+0x3c>)
    76d8:	791b      	ldrb	r3, [r3, #4]
    76da:	b9ab      	cbnz	r3, 7708 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    76dc:	4b0b      	ldr	r3, [pc, #44]	; (770c <nrfx_clock_init+0x3c>)
    76de:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    76e0:	2201      	movs	r2, #1
    76e2:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    76e4:	2200      	movs	r2, #0
    76e6:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    76e8:	4809      	ldr	r0, [pc, #36]	; (7710 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    76ea:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    76ec:	4d09      	ldr	r5, [pc, #36]	; (7714 <nrfx_clock_init+0x44>)
    76ee:	f240 1315 	movw	r3, #277	; 0x115
    76f2:	462a      	mov	r2, r5
    76f4:	4908      	ldr	r1, [pc, #32]	; (7718 <nrfx_clock_init+0x48>)
    76f6:	4809      	ldr	r0, [pc, #36]	; (771c <nrfx_clock_init+0x4c>)
    76f8:	f004 fdc0 	bl	c27c <assert_print>
    76fc:	f240 1115 	movw	r1, #277	; 0x115
    7700:	4628      	mov	r0, r5
    7702:	f004 fdb4 	bl	c26e <assert_post_action>
    7706:	e7e6      	b.n	76d6 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7708:	4805      	ldr	r0, [pc, #20]	; (7720 <nrfx_clock_init+0x50>)
    return err_code;
    770a:	e7ee      	b.n	76ea <nrfx_clock_init+0x1a>
    770c:	20000d68 	.word	0x20000d68
    7710:	0bad0000 	.word	0x0bad0000
    7714:	0000f238 	.word	0x0000f238
    7718:	0000f2ac 	.word	0x0000f2ac
    771c:	0000d63c 	.word	0x0000d63c
    7720:	0bad000c 	.word	0x0bad000c

00007724 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7724:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7726:	4b0f      	ldr	r3, [pc, #60]	; (7764 <nrfx_clock_enable+0x40>)
    7728:	791b      	ldrb	r3, [r3, #4]
    772a:	b153      	cbz	r3, 7742 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    772c:	2000      	movs	r0, #0
    772e:	f7fc ff03 	bl	4538 <arch_irq_is_enabled>
    7732:	b1a0      	cbz	r0, 775e <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    7734:	f005 fbf4 	bl	cf20 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    773c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7740:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7742:	4c09      	ldr	r4, [pc, #36]	; (7768 <nrfx_clock_enable+0x44>)
    7744:	f44f 7397 	mov.w	r3, #302	; 0x12e
    7748:	4622      	mov	r2, r4
    774a:	4908      	ldr	r1, [pc, #32]	; (776c <nrfx_clock_enable+0x48>)
    774c:	4808      	ldr	r0, [pc, #32]	; (7770 <nrfx_clock_enable+0x4c>)
    774e:	f004 fd95 	bl	c27c <assert_print>
    7752:	f44f 7197 	mov.w	r1, #302	; 0x12e
    7756:	4620      	mov	r0, r4
    7758:	f004 fd89 	bl	c26e <assert_post_action>
    775c:	e7e6      	b.n	772c <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    775e:	f7fc fedd 	bl	451c <arch_irq_enable>
    7762:	e7e7      	b.n	7734 <nrfx_clock_enable+0x10>
    7764:	20000d68 	.word	0x20000d68
    7768:	0000f238 	.word	0x0000f238
    776c:	0000f2bc 	.word	0x0000f2bc
    7770:	0000d63c 	.word	0x0000d63c

00007774 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    7774:	b530      	push	{r4, r5, lr}
    7776:	b083      	sub	sp, #12
    7778:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    777a:	4b34      	ldr	r3, [pc, #208]	; (784c <nrfx_clock_start+0xd8>)
    777c:	791b      	ldrb	r3, [r3, #4]
    777e:	b183      	cbz	r3, 77a2 <nrfx_clock_start+0x2e>
    switch (domain)
    7780:	b1ec      	cbz	r4, 77be <nrfx_clock_start+0x4a>
    7782:	2c01      	cmp	r4, #1
    7784:	d055      	beq.n	7832 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7786:	4c32      	ldr	r4, [pc, #200]	; (7850 <nrfx_clock_start+0xdc>)
    7788:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    778c:	4622      	mov	r2, r4
    778e:	4931      	ldr	r1, [pc, #196]	; (7854 <nrfx_clock_start+0xe0>)
    7790:	4831      	ldr	r0, [pc, #196]	; (7858 <nrfx_clock_start+0xe4>)
    7792:	f004 fd73 	bl	c27c <assert_print>
    7796:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    779a:	4620      	mov	r0, r4
    779c:	f004 fd67 	bl	c26e <assert_post_action>
            break;
    }
}
    77a0:	e052      	b.n	7848 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    77a2:	4d2b      	ldr	r5, [pc, #172]	; (7850 <nrfx_clock_start+0xdc>)
    77a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
    77a8:	462a      	mov	r2, r5
    77aa:	492c      	ldr	r1, [pc, #176]	; (785c <nrfx_clock_start+0xe8>)
    77ac:	482a      	ldr	r0, [pc, #168]	; (7858 <nrfx_clock_start+0xe4>)
    77ae:	f004 fd65 	bl	c27c <assert_print>
    77b2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    77b6:	4628      	mov	r0, r5
    77b8:	f004 fd59 	bl	c26e <assert_post_action>
    77bc:	e7e0      	b.n	7780 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    77be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    77c2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    77c6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    77ca:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    77cc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    77d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    77d4:	d117      	bne.n	7806 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    77d6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    77da:	f013 0f01 	tst.w	r3, #1
    77de:	d116      	bne.n	780e <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    77e0:	f005 fb9e 	bl	cf20 <clock_initial_lfclksrc_get>
    77e4:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    77e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77ea:	9a01      	ldr	r2, [sp, #4]
    77ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77f0:	2200      	movs	r2, #0
    77f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    77f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    77fa:	2202      	movs	r2, #2
    77fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7800:	2201      	movs	r2, #1
    7802:	609a      	str	r2, [r3, #8]
}
    7804:	e020      	b.n	7848 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7806:	a801      	add	r0, sp, #4
    7808:	f005 fb8c 	bl	cf24 <clock_lfclksrc_tweak>
    780c:	e7eb      	b.n	77e6 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    780e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7812:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7816:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    781a:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    781c:	a801      	add	r0, sp, #4
    781e:	f005 fb81 	bl	cf24 <clock_lfclksrc_tweak>
    7822:	2800      	cmp	r0, #0
    7824:	d0df      	beq.n	77e6 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    7826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    782a:	2202      	movs	r2, #2
    782c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    7830:	e00a      	b.n	7848 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7836:	2200      	movs	r2, #0
    7838:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    783c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7840:	2201      	movs	r2, #1
    7842:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7846:	601a      	str	r2, [r3, #0]
}
    7848:	b003      	add	sp, #12
    784a:	bd30      	pop	{r4, r5, pc}
    784c:	20000d68 	.word	0x20000d68
    7850:	0000f238 	.word	0x0000f238
    7854:	0000d800 	.word	0x0000d800
    7858:	0000d63c 	.word	0x0000d63c
    785c:	0000f2bc 	.word	0x0000f2bc

00007860 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    7860:	b538      	push	{r3, r4, r5, lr}
    7862:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7864:	4b0a      	ldr	r3, [pc, #40]	; (7890 <nrfx_clock_stop+0x30>)
    7866:	791b      	ldrb	r3, [r3, #4]
    7868:	b11b      	cbz	r3, 7872 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    786a:	4620      	mov	r0, r4
    786c:	f7ff fea4 	bl	75b8 <clock_stop>
}
    7870:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7872:	4d08      	ldr	r5, [pc, #32]	; (7894 <nrfx_clock_stop+0x34>)
    7874:	f240 13ad 	movw	r3, #429	; 0x1ad
    7878:	462a      	mov	r2, r5
    787a:	4907      	ldr	r1, [pc, #28]	; (7898 <nrfx_clock_stop+0x38>)
    787c:	4807      	ldr	r0, [pc, #28]	; (789c <nrfx_clock_stop+0x3c>)
    787e:	f004 fcfd 	bl	c27c <assert_print>
    7882:	f240 11ad 	movw	r1, #429	; 0x1ad
    7886:	4628      	mov	r0, r5
    7888:	f004 fcf1 	bl	c26e <assert_post_action>
    788c:	e7ed      	b.n	786a <nrfx_clock_stop+0xa>
    788e:	bf00      	nop
    7890:	20000d68 	.word	0x20000d68
    7894:	0000f238 	.word	0x0000f238
    7898:	0000f2bc 	.word	0x0000f2bc
    789c:	0000d63c 	.word	0x0000d63c

000078a0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    78a0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    78a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    78aa:	b18b      	cbz	r3, 78d0 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78b0:	2200      	movs	r2, #0
    78b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    78b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    78ba:	2201      	movs	r2, #1
    78bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    78c0:	4b15      	ldr	r3, [pc, #84]	; (7918 <nrfx_power_clock_irq_handler+0x78>)
    78c2:	795b      	ldrb	r3, [r3, #5]
    78c4:	b923      	cbnz	r3, 78d0 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    78c6:	4b14      	ldr	r3, [pc, #80]	; (7918 <nrfx_power_clock_irq_handler+0x78>)
    78c8:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    78ca:	681b      	ldr	r3, [r3, #0]
    78cc:	2000      	movs	r0, #0
    78ce:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    78d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    78d8:	b19b      	cbz	r3, 7902 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78de:	2200      	movs	r2, #0
    78e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    78e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    78e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    78ec:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    78f0:	f012 0f03 	tst.w	r2, #3
    78f4:	d106      	bne.n	7904 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    78f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78fa:	2201      	movs	r2, #1
    78fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7900:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7902:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    7904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7908:	2202      	movs	r2, #2
    790a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    790e:	4b02      	ldr	r3, [pc, #8]	; (7918 <nrfx_power_clock_irq_handler+0x78>)
    7910:	681b      	ldr	r3, [r3, #0]
    7912:	2001      	movs	r0, #1
    7914:	4798      	blx	r3
}
    7916:	e7f4      	b.n	7902 <nrfx_power_clock_irq_handler+0x62>
    7918:	20000d68 	.word	0x20000d68

0000791c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    791c:	3008      	adds	r0, #8
    791e:	4b03      	ldr	r3, [pc, #12]	; (792c <pin_in_use+0x10>)
    7920:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7924:	f000 0001 	and.w	r0, r0, #1
    7928:	4770      	bx	lr
    792a:	bf00      	nop
    792c:	200000f4 	.word	0x200000f4

00007930 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7930:	3008      	adds	r0, #8
    7932:	4b03      	ldr	r3, [pc, #12]	; (7940 <pin_in_use_by_te+0x10>)
    7934:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7938:	f3c0 1040 	ubfx	r0, r0, #5, #1
    793c:	4770      	bx	lr
    793e:	bf00      	nop
    7940:	200000f4 	.word	0x200000f4

00007944 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    7944:	3008      	adds	r0, #8
    7946:	4b04      	ldr	r3, [pc, #16]	; (7958 <pin_has_trigger+0x14>)
    7948:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    794c:	f010 001c 	ands.w	r0, r0, #28
    7950:	bf18      	it	ne
    7952:	2001      	movne	r0, #1
    7954:	4770      	bx	lr
    7956:	bf00      	nop
    7958:	200000f4 	.word	0x200000f4

0000795c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    795c:	3008      	adds	r0, #8
    795e:	4b03      	ldr	r3, [pc, #12]	; (796c <pin_is_output+0x10>)
    7960:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7964:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7968:	4770      	bx	lr
    796a:	bf00      	nop
    796c:	200000f4 	.word	0x200000f4

00007970 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7970:	3008      	adds	r0, #8
    7972:	4b02      	ldr	r3, [pc, #8]	; (797c <pin_te_get+0xc>)
    7974:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7978:	0b40      	lsrs	r0, r0, #13
    797a:	4770      	bx	lr
    797c:	200000f4 	.word	0x200000f4

00007980 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7980:	2200      	movs	r2, #0
    7982:	e004      	b.n	798e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7988:	4283      	cmp	r3, r0
    798a:	d00f      	beq.n	79ac <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    798c:	3201      	adds	r2, #1
    798e:	2a2f      	cmp	r2, #47	; 0x2f
    7990:	d80a      	bhi.n	79a8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7992:	f102 0308 	add.w	r3, r2, #8
    7996:	4906      	ldr	r1, [pc, #24]	; (79b0 <handler_in_use+0x30>)
    7998:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    799c:	f413 7f80 	tst.w	r3, #256	; 0x100
    79a0:	d0f0      	beq.n	7984 <handler_in_use+0x4>
    79a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    79a6:	e7ef      	b.n	7988 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    79a8:	2000      	movs	r0, #0
    79aa:	4770      	bx	lr
            return true;
    79ac:	2001      	movs	r0, #1
}
    79ae:	4770      	bx	lr
    79b0:	200000f4 	.word	0x200000f4

000079b4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    79b4:	2300      	movs	r3, #0
    79b6:	b113      	cbz	r3, 79be <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    79b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    79bc:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    79be:	4a07      	ldr	r2, [pc, #28]	; (79dc <find_handler+0x28>)
    79c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    79c4:	4282      	cmp	r2, r0
    79c6:	d001      	beq.n	79cc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    79c8:	3301      	adds	r3, #1
    79ca:	e7f4      	b.n	79b6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    79cc:	4a03      	ldr	r2, [pc, #12]	; (79dc <find_handler+0x28>)
    79ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    79d2:	6852      	ldr	r2, [r2, #4]
    79d4:	428a      	cmp	r2, r1
    79d6:	d1f7      	bne.n	79c8 <find_handler+0x14>
            return i;
    79d8:	4618      	mov	r0, r3
    79da:	4770      	bx	lr
    79dc:	200000f4 	.word	0x200000f4

000079e0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79e0:	3008      	adds	r0, #8
    79e2:	4b06      	ldr	r3, [pc, #24]	; (79fc <channel_handler_get+0x1c>)
    79e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    79e8:	f410 7f80 	tst.w	r0, #256	; 0x100
    79ec:	d004      	beq.n	79f8 <channel_handler_get+0x18>
    79ee:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    79f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    79f6:	4770      	bx	lr
        return NULL;
    79f8:	2000      	movs	r0, #0
}
    79fa:	4770      	bx	lr
    79fc:	200000f4 	.word	0x200000f4

00007a00 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7a00:	b570      	push	{r4, r5, r6, lr}
    7a02:	4604      	mov	r4, r0
    7a04:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    7a06:	f7ff ffeb 	bl	79e0 <channel_handler_get>

    if (handler)
    7a0a:	b120      	cbz	r0, 7a16 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    7a0c:	6806      	ldr	r6, [r0, #0]
    7a0e:	6842      	ldr	r2, [r0, #4]
    7a10:	4629      	mov	r1, r5
    7a12:	4620      	mov	r0, r4
    7a14:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    7a16:	4b04      	ldr	r3, [pc, #16]	; (7a28 <call_handler+0x28>)
    7a18:	689b      	ldr	r3, [r3, #8]
    7a1a:	b123      	cbz	r3, 7a26 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7a1c:	4a02      	ldr	r2, [pc, #8]	; (7a28 <call_handler+0x28>)
    7a1e:	68d2      	ldr	r2, [r2, #12]
    7a20:	4629      	mov	r1, r5
    7a22:	4620      	mov	r0, r4
    7a24:	4798      	blx	r3
    }
}
    7a26:	bd70      	pop	{r4, r5, r6, pc}
    7a28:	200000f4 	.word	0x200000f4

00007a2c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7a2c:	f100 0208 	add.w	r2, r0, #8
    7a30:	4b16      	ldr	r3, [pc, #88]	; (7a8c <release_handler+0x60>)
    7a32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7a36:	f413 7f80 	tst.w	r3, #256	; 0x100
    7a3a:	d026      	beq.n	7a8a <release_handler+0x5e>
{
    7a3c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7a3e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7a42:	4610      	mov	r0, r2
    7a44:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7a48:	4a10      	ldr	r2, [pc, #64]	; (7a8c <release_handler+0x60>)
    7a4a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    7a4e:	4620      	mov	r0, r4
    7a50:	f7ff ff96 	bl	7980 <handler_in_use>
    7a54:	b100      	cbz	r0, 7a58 <release_handler+0x2c>
}
    7a56:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    7a58:	480c      	ldr	r0, [pc, #48]	; (7a8c <release_handler+0x60>)
    7a5a:	2300      	movs	r3, #0
    7a5c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7a60:	4621      	mov	r1, r4
    7a62:	3074      	adds	r0, #116	; 0x74
    7a64:	f7ff fd86 	bl	7574 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7a68:	4b09      	ldr	r3, [pc, #36]	; (7a90 <release_handler+0x64>)
    7a6a:	4298      	cmp	r0, r3
    7a6c:	d0f3      	beq.n	7a56 <release_handler+0x2a>
    7a6e:	4c09      	ldr	r4, [pc, #36]	; (7a94 <release_handler+0x68>)
    7a70:	f44f 7399 	mov.w	r3, #306	; 0x132
    7a74:	4622      	mov	r2, r4
    7a76:	4908      	ldr	r1, [pc, #32]	; (7a98 <release_handler+0x6c>)
    7a78:	4808      	ldr	r0, [pc, #32]	; (7a9c <release_handler+0x70>)
    7a7a:	f004 fbff 	bl	c27c <assert_print>
    7a7e:	f44f 7199 	mov.w	r1, #306	; 0x132
    7a82:	4620      	mov	r0, r4
    7a84:	f004 fbf3 	bl	c26e <assert_post_action>
    7a88:	e7e5      	b.n	7a56 <release_handler+0x2a>
    7a8a:	4770      	bx	lr
    7a8c:	200000f4 	.word	0x200000f4
    7a90:	0bad0000 	.word	0x0bad0000
    7a94:	0000f2dc 	.word	0x0000f2dc
    7a98:	0000f31c 	.word	0x0000f31c
    7a9c:	0000d63c 	.word	0x0000d63c

00007aa0 <pin_handler_trigger_uninit>:
{
    7aa0:	b510      	push	{r4, lr}
    7aa2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    7aa4:	f7ff ff44 	bl	7930 <pin_in_use_by_te>
    7aa8:	b140      	cbz	r0, 7abc <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7aaa:	4620      	mov	r0, r4
    7aac:	f7ff ff60 	bl	7970 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7ab0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7ab4:	4b06      	ldr	r3, [pc, #24]	; (7ad0 <pin_handler_trigger_uninit+0x30>)
    7ab6:	2200      	movs	r2, #0
    7ab8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7abc:	4620      	mov	r0, r4
    7abe:	f7ff ffb5 	bl	7a2c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7ac2:	3408      	adds	r4, #8
    7ac4:	4b03      	ldr	r3, [pc, #12]	; (7ad4 <pin_handler_trigger_uninit+0x34>)
    7ac6:	2200      	movs	r2, #0
    7ac8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7acc:	bd10      	pop	{r4, pc}
    7ace:	bf00      	nop
    7ad0:	40006000 	.word	0x40006000
    7ad4:	200000f4 	.word	0x200000f4

00007ad8 <pin_handler_set>:
{
    7ad8:	b570      	push	{r4, r5, r6, lr}
    7ada:	b082      	sub	sp, #8
    7adc:	4606      	mov	r6, r0
    7ade:	460c      	mov	r4, r1
    7ae0:	4615      	mov	r5, r2
    release_handler(pin);
    7ae2:	f7ff ffa3 	bl	7a2c <release_handler>
    if (!handler)
    7ae6:	b324      	cbz	r4, 7b32 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    7ae8:	4629      	mov	r1, r5
    7aea:	4620      	mov	r0, r4
    7aec:	f7ff ff62 	bl	79b4 <find_handler>
    if (handler_id < 0)
    7af0:	1e03      	subs	r3, r0, #0
    7af2:	db13      	blt.n	7b1c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7af4:	4a10      	ldr	r2, [pc, #64]	; (7b38 <pin_handler_set+0x60>)
    7af6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7afa:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7afe:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7b00:	025b      	lsls	r3, r3, #9
    7b02:	b29b      	uxth	r3, r3
    7b04:	f106 0008 	add.w	r0, r6, #8
    7b08:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    7b0c:	430b      	orrs	r3, r1
    7b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7b12:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    7b16:	4809      	ldr	r0, [pc, #36]	; (7b3c <pin_handler_set+0x64>)
}
    7b18:	b002      	add	sp, #8
    7b1a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7b1c:	f10d 0107 	add.w	r1, sp, #7
    7b20:	4807      	ldr	r0, [pc, #28]	; (7b40 <pin_handler_set+0x68>)
    7b22:	f7ff fcff 	bl	7524 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7b26:	4b05      	ldr	r3, [pc, #20]	; (7b3c <pin_handler_set+0x64>)
    7b28:	4298      	cmp	r0, r3
    7b2a:	d1f5      	bne.n	7b18 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    7b2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b30:	e7e0      	b.n	7af4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    7b32:	4802      	ldr	r0, [pc, #8]	; (7b3c <pin_handler_set+0x64>)
    7b34:	e7f0      	b.n	7b18 <pin_handler_set+0x40>
    7b36:	bf00      	nop
    7b38:	200000f4 	.word	0x200000f4
    7b3c:	0bad0000 	.word	0x0bad0000
    7b40:	20000168 	.word	0x20000168

00007b44 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7b44:	b538      	push	{r3, r4, r5, lr}
    7b46:	4604      	mov	r4, r0
    while (mask)
    7b48:	e018      	b.n	7b7c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    7b4a:	fa94 f3a4 	rbit	r3, r4
    7b4e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7b52:	2201      	movs	r2, #1
    7b54:	409a      	lsls	r2, r3
    7b56:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7b5a:	4a0a      	ldr	r2, [pc, #40]	; (7b84 <gpiote_evt_handle+0x40>)
    7b5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7b60:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7b64:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7b68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7b6c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    7b70:	f005 fa04 	bl	cf7c <gpiote_polarity_to_trigger>
    7b74:	4601      	mov	r1, r0
    7b76:	4628      	mov	r0, r5
    7b78:	f7ff ff42 	bl	7a00 <call_handler>
    while (mask)
    7b7c:	2c00      	cmp	r4, #0
    7b7e:	d1e4      	bne.n	7b4a <gpiote_evt_handle+0x6>
    }
}
    7b80:	bd38      	pop	{r3, r4, r5, pc}
    7b82:	bf00      	nop
    7b84:	40006000 	.word	0x40006000

00007b88 <latch_pending_read_and_check>:
{
    7b88:	b082      	sub	sp, #8
    7b8a:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7b8c:	4b11      	ldr	r3, [pc, #68]	; (7bd4 <latch_pending_read_and_check+0x4c>)
    7b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
    7b92:	ab02      	add	r3, sp, #8
    7b94:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7b98:	4660      	mov	r0, ip
    7b9a:	2300      	movs	r3, #0
    7b9c:	e00b      	b.n	7bb6 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    7b9e:	aa02      	add	r2, sp, #8
    7ba0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7ba4:	f852 2c08 	ldr.w	r2, [r2, #-8]
    7ba8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7bac:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7bb0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7bb4:	3301      	adds	r3, #1
    7bb6:	2b01      	cmp	r3, #1
    7bb8:	d9f1      	bls.n	7b9e <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7bba:	2300      	movs	r3, #0
    7bbc:	2b01      	cmp	r3, #1
    7bbe:	d804      	bhi.n	7bca <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    7bc0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    7bc4:	b922      	cbnz	r2, 7bd0 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7bc6:	3301      	adds	r3, #1
    7bc8:	e7f8      	b.n	7bbc <latch_pending_read_and_check+0x34>
    return false;
    7bca:	2000      	movs	r0, #0
}
    7bcc:	b002      	add	sp, #8
    7bce:	4770      	bx	lr
            return true;
    7bd0:	2001      	movs	r0, #1
    7bd2:	e7fb      	b.n	7bcc <latch_pending_read_and_check+0x44>
    7bd4:	0000d540 	.word	0x0000d540

00007bd8 <next_sense_cond_call_handler>:
{
    7bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7bdc:	4604      	mov	r4, r0
    7bde:	460d      	mov	r5, r1
    7be0:	4616      	mov	r6, r2
    if (is_level(trigger))
    7be2:	4608      	mov	r0, r1
    7be4:	f005 f9cc 	bl	cf80 <is_level>
    7be8:	bb60      	cbnz	r0, 7c44 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7bea:	2e02      	cmp	r6, #2
    7bec:	f000 80f5 	beq.w	7dda <next_sense_cond_call_handler+0x202>
    7bf0:	f04f 0802 	mov.w	r8, #2
    switch (port)
    7bf4:	0963      	lsrs	r3, r4, #5
    7bf6:	f000 80f3 	beq.w	7de0 <next_sense_cond_call_handler+0x208>
    7bfa:	2b01      	cmp	r3, #1
    7bfc:	f040 80f3 	bne.w	7de6 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    7c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c04:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c08:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c0a:	f013 0f01 	tst.w	r3, #1
    7c0e:	f000 80ec 	beq.w	7dea <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    7c12:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c16:	0963      	lsrs	r3, r4, #5
    7c18:	f000 80f5 	beq.w	7e06 <next_sense_cond_call_handler+0x22e>
    7c1c:	2b01      	cmp	r3, #1
    7c1e:	f000 80f5 	beq.w	7e0c <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    7c22:	f8df 9224 	ldr.w	r9, [pc, #548]	; 7e48 <next_sense_cond_call_handler+0x270>
    7c26:	f240 232e 	movw	r3, #558	; 0x22e
    7c2a:	464a      	mov	r2, r9
    7c2c:	4987      	ldr	r1, [pc, #540]	; (7e4c <next_sense_cond_call_handler+0x274>)
    7c2e:	4888      	ldr	r0, [pc, #544]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7c30:	f004 fb24 	bl	c27c <assert_print>
    7c34:	f240 212e 	movw	r1, #558	; 0x22e
    7c38:	4648      	mov	r0, r9
    7c3a:	f004 fb18 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7c3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7c42:	e0e4      	b.n	7e0e <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    7c44:	4629      	mov	r1, r5
    7c46:	4620      	mov	r0, r4
    7c48:	f7ff feda 	bl	7a00 <call_handler>
    switch (port)
    7c4c:	0963      	lsrs	r3, r4, #5
    7c4e:	d01f      	beq.n	7c90 <next_sense_cond_call_handler+0xb8>
    7c50:	2b01      	cmp	r3, #1
    7c52:	d120      	bne.n	7c96 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    7c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c58:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c5c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c5e:	f013 0f01 	tst.w	r3, #1
    7c62:	d01a      	beq.n	7c9a <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    7c64:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c68:	0963      	lsrs	r3, r4, #5
    7c6a:	d024      	beq.n	7cb6 <next_sense_cond_call_handler+0xde>
    7c6c:	2b01      	cmp	r3, #1
    7c6e:	d025      	beq.n	7cbc <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    7c70:	4f75      	ldr	r7, [pc, #468]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7c72:	f240 232e 	movw	r3, #558	; 0x22e
    7c76:	463a      	mov	r2, r7
    7c78:	4974      	ldr	r1, [pc, #464]	; (7e4c <next_sense_cond_call_handler+0x274>)
    7c7a:	4875      	ldr	r0, [pc, #468]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7c7c:	f004 fafe 	bl	c27c <assert_print>
    7c80:	f240 212e 	movw	r1, #558	; 0x22e
    7c84:	4638      	mov	r0, r7
    7c86:	f004 faf2 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7c8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7c8e:	e016      	b.n	7cbe <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    7c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c94:	e7e0      	b.n	7c58 <next_sense_cond_call_handler+0x80>
    switch (port)
    7c96:	2300      	movs	r3, #0
    7c98:	e7de      	b.n	7c58 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c9a:	4d6b      	ldr	r5, [pc, #428]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7c9c:	f240 2329 	movw	r3, #553	; 0x229
    7ca0:	462a      	mov	r2, r5
    7ca2:	496c      	ldr	r1, [pc, #432]	; (7e54 <next_sense_cond_call_handler+0x27c>)
    7ca4:	486a      	ldr	r0, [pc, #424]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7ca6:	f004 fae9 	bl	c27c <assert_print>
    7caa:	f240 2129 	movw	r1, #553	; 0x229
    7cae:	4628      	mov	r0, r5
    7cb0:	f004 fadd 	bl	c26e <assert_post_action>
    7cb4:	e7d6      	b.n	7c64 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    7cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7cba:	e000      	b.n	7cbe <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cbc:	4b66      	ldr	r3, [pc, #408]	; (7e58 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7cbe:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7cc2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7cc6:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7cca:	429e      	cmp	r6, r3
    7ccc:	f040 80af 	bne.w	7e2e <next_sense_cond_call_handler+0x256>
    switch (port)
    7cd0:	0963      	lsrs	r3, r4, #5
    7cd2:	d01f      	beq.n	7d14 <next_sense_cond_call_handler+0x13c>
    7cd4:	2b01      	cmp	r3, #1
    7cd6:	d120      	bne.n	7d1a <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    7cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7cdc:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ce0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ce2:	f013 0f01 	tst.w	r3, #1
    7ce6:	d01a      	beq.n	7d1e <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    7ce8:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cec:	0963      	lsrs	r3, r4, #5
    7cee:	d024      	beq.n	7d3a <next_sense_cond_call_handler+0x162>
    7cf0:	2b01      	cmp	r3, #1
    7cf2:	d025      	beq.n	7d40 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    7cf4:	4f54      	ldr	r7, [pc, #336]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7cf6:	f240 232e 	movw	r3, #558	; 0x22e
    7cfa:	463a      	mov	r2, r7
    7cfc:	4953      	ldr	r1, [pc, #332]	; (7e4c <next_sense_cond_call_handler+0x274>)
    7cfe:	4854      	ldr	r0, [pc, #336]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7d00:	f004 fabc 	bl	c27c <assert_print>
    7d04:	f240 212e 	movw	r1, #558	; 0x22e
    7d08:	4638      	mov	r0, r7
    7d0a:	f004 fab0 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7d0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d12:	e016      	b.n	7d42 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    7d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d18:	e7e0      	b.n	7cdc <next_sense_cond_call_handler+0x104>
    switch (port)
    7d1a:	2300      	movs	r3, #0
    7d1c:	e7de      	b.n	7cdc <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d1e:	4d4a      	ldr	r5, [pc, #296]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7d20:	f240 2329 	movw	r3, #553	; 0x229
    7d24:	462a      	mov	r2, r5
    7d26:	494b      	ldr	r1, [pc, #300]	; (7e54 <next_sense_cond_call_handler+0x27c>)
    7d28:	4849      	ldr	r0, [pc, #292]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7d2a:	f004 faa7 	bl	c27c <assert_print>
    7d2e:	f240 2129 	movw	r1, #553	; 0x229
    7d32:	4628      	mov	r0, r5
    7d34:	f004 fa9b 	bl	c26e <assert_post_action>
    7d38:	e7d6      	b.n	7ce8 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    7d3a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d3e:	e000      	b.n	7d42 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d40:	4945      	ldr	r1, [pc, #276]	; (7e58 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d42:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7d46:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7d4a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    7d52:	0963      	lsrs	r3, r4, #5
    7d54:	d01f      	beq.n	7d96 <next_sense_cond_call_handler+0x1be>
    7d56:	2b01      	cmp	r3, #1
    7d58:	d120      	bne.n	7d9c <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    7d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7d5e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7d62:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d64:	f013 0f01 	tst.w	r3, #1
    7d68:	d01a      	beq.n	7da0 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    7d6a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d6e:	0964      	lsrs	r4, r4, #5
    7d70:	d024      	beq.n	7dbc <next_sense_cond_call_handler+0x1e4>
    7d72:	2c01      	cmp	r4, #1
    7d74:	d025      	beq.n	7dc2 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    7d76:	4c34      	ldr	r4, [pc, #208]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7d78:	f240 232e 	movw	r3, #558	; 0x22e
    7d7c:	4622      	mov	r2, r4
    7d7e:	4933      	ldr	r1, [pc, #204]	; (7e4c <next_sense_cond_call_handler+0x274>)
    7d80:	4833      	ldr	r0, [pc, #204]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7d82:	f004 fa7b 	bl	c27c <assert_print>
    7d86:	f240 212e 	movw	r1, #558	; 0x22e
    7d8a:	4620      	mov	r0, r4
    7d8c:	f004 fa6f 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7d90:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d94:	e016      	b.n	7dc4 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    7d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d9a:	e7e0      	b.n	7d5e <next_sense_cond_call_handler+0x186>
    switch (port)
    7d9c:	2300      	movs	r3, #0
    7d9e:	e7de      	b.n	7d5e <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7da0:	4d29      	ldr	r5, [pc, #164]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7da2:	f240 2329 	movw	r3, #553	; 0x229
    7da6:	462a      	mov	r2, r5
    7da8:	492a      	ldr	r1, [pc, #168]	; (7e54 <next_sense_cond_call_handler+0x27c>)
    7daa:	4829      	ldr	r0, [pc, #164]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7dac:	f004 fa66 	bl	c27c <assert_print>
    7db0:	f240 2129 	movw	r1, #553	; 0x229
    7db4:	4628      	mov	r0, r5
    7db6:	f004 fa5a 	bl	c26e <assert_post_action>
    7dba:	e7d6      	b.n	7d6a <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    7dbc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7dc0:	e000      	b.n	7dc4 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7dc2:	4925      	ldr	r1, [pc, #148]	; (7e58 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7dc4:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7dc8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7dcc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7dd0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7dd4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    7dd8:	e029      	b.n	7e2e <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7dda:	f04f 0803 	mov.w	r8, #3
    7dde:	e709      	b.n	7bf4 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    7de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7de4:	e70e      	b.n	7c04 <next_sense_cond_call_handler+0x2c>
    switch (port)
    7de6:	2300      	movs	r3, #0
    7de8:	e70c      	b.n	7c04 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7dea:	4f17      	ldr	r7, [pc, #92]	; (7e48 <next_sense_cond_call_handler+0x270>)
    7dec:	f240 2329 	movw	r3, #553	; 0x229
    7df0:	463a      	mov	r2, r7
    7df2:	4918      	ldr	r1, [pc, #96]	; (7e54 <next_sense_cond_call_handler+0x27c>)
    7df4:	4816      	ldr	r0, [pc, #88]	; (7e50 <next_sense_cond_call_handler+0x278>)
    7df6:	f004 fa41 	bl	c27c <assert_print>
    7dfa:	f240 2129 	movw	r1, #553	; 0x229
    7dfe:	4638      	mov	r0, r7
    7e00:	f004 fa35 	bl	c26e <assert_post_action>
    7e04:	e705      	b.n	7c12 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    7e06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7e0a:	e000      	b.n	7e0e <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e0c:	4912      	ldr	r1, [pc, #72]	; (7e58 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7e0e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    7e12:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7e16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7e1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7e1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7e22:	2d03      	cmp	r5, #3
    7e24:	d007      	beq.n	7e36 <next_sense_cond_call_handler+0x25e>
    7e26:	2e02      	cmp	r6, #2
    7e28:	d003      	beq.n	7e32 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7e2a:	2e03      	cmp	r6, #3
    7e2c:	d008      	beq.n	7e40 <next_sense_cond_call_handler+0x268>
}
    7e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7e32:	2d01      	cmp	r5, #1
    7e34:	d1f9      	bne.n	7e2a <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    7e36:	4629      	mov	r1, r5
    7e38:	4620      	mov	r0, r4
    7e3a:	f7ff fde1 	bl	7a00 <call_handler>
}
    7e3e:	e7f6      	b.n	7e2e <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7e40:	2d02      	cmp	r5, #2
    7e42:	d1f4      	bne.n	7e2e <next_sense_cond_call_handler+0x256>
    7e44:	e7f7      	b.n	7e36 <next_sense_cond_call_handler+0x25e>
    7e46:	bf00      	nop
    7e48:	0000f0b8 	.word	0x0000f0b8
    7e4c:	0000d800 	.word	0x0000d800
    7e50:	0000d63c 	.word	0x0000d63c
    7e54:	0000f0ec 	.word	0x0000f0ec
    7e58:	50000300 	.word	0x50000300

00007e5c <port_event_handle>:
{
    7e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e60:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7e62:	4a65      	ldr	r2, [pc, #404]	; (7ff8 <port_event_handle+0x19c>)
    7e64:	466b      	mov	r3, sp
    7e66:	e892 0003 	ldmia.w	r2, {r0, r1}
    7e6a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7e6e:	2300      	movs	r3, #0
    7e70:	a802      	add	r0, sp, #8
    7e72:	e00b      	b.n	7e8c <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    7e74:	aa04      	add	r2, sp, #16
    7e76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7e7a:	f852 2c10 	ldr.w	r2, [r2, #-16]
    7e7e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7e82:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7e86:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7e8a:	3301      	adds	r3, #1
    7e8c:	2b01      	cmp	r3, #1
    7e8e:	d9f1      	bls.n	7e74 <port_event_handle+0x18>
    7e90:	e0ad      	b.n	7fee <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    7e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e96:	e07f      	b.n	7f98 <port_event_handle+0x13c>
    switch (port)
    7e98:	2300      	movs	r3, #0
    7e9a:	e07d      	b.n	7f98 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e9c:	4f57      	ldr	r7, [pc, #348]	; (7ffc <port_event_handle+0x1a0>)
    7e9e:	f240 2329 	movw	r3, #553	; 0x229
    7ea2:	463a      	mov	r2, r7
    7ea4:	4956      	ldr	r1, [pc, #344]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7ea6:	4857      	ldr	r0, [pc, #348]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ea8:	f004 f9e8 	bl	c27c <assert_print>
    7eac:	f240 2129 	movw	r1, #553	; 0x229
    7eb0:	4638      	mov	r0, r7
    7eb2:	f004 f9dc 	bl	c26e <assert_post_action>
    7eb6:	e076      	b.n	7fa6 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    7eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7ebc:	e000      	b.n	7ec0 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ebe:	4b52      	ldr	r3, [pc, #328]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7ec0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7ec4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    7ec8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    7ecc:	4631      	mov	r1, r6
    7ece:	4620      	mov	r0, r4
    7ed0:	f7ff fe82 	bl	7bd8 <next_sense_cond_call_handler>
    switch (port)
    7ed4:	0963      	lsrs	r3, r4, #5
    7ed6:	d01f      	beq.n	7f18 <port_event_handle+0xbc>
    7ed8:	2b01      	cmp	r3, #1
    7eda:	d120      	bne.n	7f1e <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    7edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7ee0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ee4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ee6:	f013 0f01 	tst.w	r3, #1
    7eea:	d01a      	beq.n	7f22 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    7eec:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ef0:	0964      	lsrs	r4, r4, #5
    7ef2:	d024      	beq.n	7f3e <port_event_handle+0xe2>
    7ef4:	2c01      	cmp	r4, #1
    7ef6:	d025      	beq.n	7f44 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    7ef8:	4c40      	ldr	r4, [pc, #256]	; (7ffc <port_event_handle+0x1a0>)
    7efa:	f240 232e 	movw	r3, #558	; 0x22e
    7efe:	4622      	mov	r2, r4
    7f00:	4942      	ldr	r1, [pc, #264]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f02:	4840      	ldr	r0, [pc, #256]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f04:	f004 f9ba 	bl	c27c <assert_print>
    7f08:	f240 212e 	movw	r1, #558	; 0x22e
    7f0c:	4620      	mov	r0, r4
    7f0e:	f004 f9ae 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7f12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7f16:	e016      	b.n	7f46 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    7f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f1c:	e7e0      	b.n	7ee0 <port_event_handle+0x84>
    switch (port)
    7f1e:	2300      	movs	r3, #0
    7f20:	e7de      	b.n	7ee0 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f22:	4e36      	ldr	r6, [pc, #216]	; (7ffc <port_event_handle+0x1a0>)
    7f24:	f240 2329 	movw	r3, #553	; 0x229
    7f28:	4632      	mov	r2, r6
    7f2a:	4935      	ldr	r1, [pc, #212]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f2c:	4835      	ldr	r0, [pc, #212]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f2e:	f004 f9a5 	bl	c27c <assert_print>
    7f32:	f240 2129 	movw	r1, #553	; 0x229
    7f36:	4630      	mov	r0, r6
    7f38:	f004 f999 	bl	c26e <assert_post_action>
    7f3c:	e7d6      	b.n	7eec <port_event_handle+0x90>
        case 0: return NRF_P0;
    7f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7f42:	e000      	b.n	7f46 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7f44:	4a30      	ldr	r2, [pc, #192]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    reg->LATCH = (1 << pin_number);
    7f46:	2301      	movs	r3, #1
    7f48:	40b3      	lsls	r3, r6
    7f4a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    7f4e:	ab04      	add	r3, sp, #16
    7f50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7f54:	f853 4c08 	ldr.w	r4, [r3, #-8]
    7f58:	2c00      	cmp	r4, #0
    7f5a:	d03b      	beq.n	7fd4 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    7f5c:	fa94 f4a4 	rbit	r4, r4
    7f60:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7f64:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7f68:	f104 0208 	add.w	r2, r4, #8
    7f6c:	4b28      	ldr	r3, [pc, #160]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f6e:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    7f72:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7f76:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    7f78:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7f7c:	a802      	add	r0, sp, #8
    7f7e:	2301      	movs	r3, #1
    7f80:	fa03 f202 	lsl.w	r2, r3, r2
    7f84:	5c43      	ldrb	r3, [r0, r1]
    7f86:	ea23 0302 	bic.w	r3, r3, r2
    7f8a:	5443      	strb	r3, [r0, r1]
    switch (port)
    7f8c:	0963      	lsrs	r3, r4, #5
    7f8e:	d080      	beq.n	7e92 <port_event_handle+0x36>
    7f90:	2b01      	cmp	r3, #1
    7f92:	d181      	bne.n	7e98 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    7f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7f98:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7f9c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f9e:	f013 0f01 	tst.w	r3, #1
    7fa2:	f43f af7b 	beq.w	7e9c <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    7fa6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7faa:	0963      	lsrs	r3, r4, #5
    7fac:	d084      	beq.n	7eb8 <port_event_handle+0x5c>
    7fae:	2b01      	cmp	r3, #1
    7fb0:	d085      	beq.n	7ebe <port_event_handle+0x62>
            NRFX_ASSERT(0);
    7fb2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7ffc <port_event_handle+0x1a0>
    7fb6:	f240 232e 	movw	r3, #558	; 0x22e
    7fba:	4642      	mov	r2, r8
    7fbc:	4913      	ldr	r1, [pc, #76]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fbe:	4811      	ldr	r0, [pc, #68]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fc0:	f004 f95c 	bl	c27c <assert_print>
    7fc4:	f240 212e 	movw	r1, #558	; 0x22e
    7fc8:	4640      	mov	r0, r8
    7fca:	f004 f950 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    7fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7fd2:	e775      	b.n	7ec0 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7fd4:	3501      	adds	r5, #1
    7fd6:	2d01      	cmp	r5, #1
    7fd8:	d9b9      	bls.n	7f4e <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7fda:	4b0e      	ldr	r3, [pc, #56]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fdc:	2200      	movs	r2, #0
    7fde:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7fe2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    7fe6:	a802      	add	r0, sp, #8
    7fe8:	f7ff fdce 	bl	7b88 <latch_pending_read_and_check>
    7fec:	b108      	cbz	r0, 7ff2 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7fee:	2500      	movs	r5, #0
    7ff0:	e7f1      	b.n	7fd6 <port_event_handle+0x17a>
}
    7ff2:	b004      	add	sp, #16
    7ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ff8:	0000d540 	.word	0x0000d540
    7ffc:	0000f0b8 	.word	0x0000f0b8
    8000:	0000f0ec 	.word	0x0000f0ec
    8004:	0000d63c 	.word	0x0000d63c
    8008:	50000300 	.word	0x50000300
    800c:	0000d800 	.word	0x0000d800
    8010:	200000f4 	.word	0x200000f4
    8014:	40006000 	.word	0x40006000

00008018 <nrfx_gpiote_input_configure>:
{
    8018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    801c:	4604      	mov	r4, r0
    801e:	4615      	mov	r5, r2
    8020:	461e      	mov	r6, r3
    if (p_input_config)
    8022:	2900      	cmp	r1, #0
    8024:	d064      	beq.n	80f0 <nrfx_gpiote_input_configure+0xd8>
    8026:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    8028:	f004 ff92 	bl	cf50 <pin_is_task_output>
    802c:	2800      	cmp	r0, #0
    802e:	f040 80cd 	bne.w	81cc <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    8032:	0963      	lsrs	r3, r4, #5
    8034:	d020      	beq.n	8078 <nrfx_gpiote_input_configure+0x60>
    8036:	2b01      	cmp	r3, #1
    8038:	d121      	bne.n	807e <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    803a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    803e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8042:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8044:	f013 0f01 	tst.w	r3, #1
    8048:	d01b      	beq.n	8082 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    804a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    804e:	0963      	lsrs	r3, r4, #5
    8050:	d025      	beq.n	809e <nrfx_gpiote_input_configure+0x86>
    8052:	2b01      	cmp	r3, #1
    8054:	d026      	beq.n	80a4 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    8056:	f8df 9184 	ldr.w	r9, [pc, #388]	; 81dc <nrfx_gpiote_input_configure+0x1c4>
    805a:	f240 232e 	movw	r3, #558	; 0x22e
    805e:	464a      	mov	r2, r9
    8060:	495f      	ldr	r1, [pc, #380]	; (81e0 <nrfx_gpiote_input_configure+0x1c8>)
    8062:	4860      	ldr	r0, [pc, #384]	; (81e4 <nrfx_gpiote_input_configure+0x1cc>)
    8064:	f004 f90a 	bl	c27c <assert_print>
    8068:	f240 212e 	movw	r1, #558	; 0x22e
    806c:	4648      	mov	r0, r9
    806e:	f004 f8fe 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    8072:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8076:	e016      	b.n	80a6 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    8078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    807c:	e7df      	b.n	803e <nrfx_gpiote_input_configure+0x26>
    switch (port)
    807e:	2300      	movs	r3, #0
    8080:	e7dd      	b.n	803e <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8082:	4f56      	ldr	r7, [pc, #344]	; (81dc <nrfx_gpiote_input_configure+0x1c4>)
    8084:	f240 2329 	movw	r3, #553	; 0x229
    8088:	463a      	mov	r2, r7
    808a:	4957      	ldr	r1, [pc, #348]	; (81e8 <nrfx_gpiote_input_configure+0x1d0>)
    808c:	4855      	ldr	r0, [pc, #340]	; (81e4 <nrfx_gpiote_input_configure+0x1cc>)
    808e:	f004 f8f5 	bl	c27c <assert_print>
    8092:	f240 2129 	movw	r1, #553	; 0x229
    8096:	4638      	mov	r0, r7
    8098:	f004 f8e9 	bl	c26e <assert_post_action>
    809c:	e7d5      	b.n	804a <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    809e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    80a2:	e000      	b.n	80a6 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80a4:	4951      	ldr	r1, [pc, #324]	; (81ec <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    80a6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    80aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    80ae:	f1b8 0f00 	cmp.w	r8, #0
    80b2:	d03f      	beq.n	8134 <nrfx_gpiote_input_configure+0x11c>
    80b4:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    80b6:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    80ba:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    80be:	f1b8 0f00 	cmp.w	r8, #0
    80c2:	d039      	beq.n	8138 <nrfx_gpiote_input_configure+0x120>
    80c4:	f898 2000 	ldrb.w	r2, [r8]
    80c8:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    80ca:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    80cc:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    80d0:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    80d4:	4a46      	ldr	r2, [pc, #280]	; (81f0 <nrfx_gpiote_input_configure+0x1d8>)
    80d6:	f104 0108 	add.w	r1, r4, #8
    80da:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    80de:	f023 0302 	bic.w	r3, r3, #2
    80e2:	b29b      	uxth	r3, r3
    80e4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    80e8:	f043 0301 	orr.w	r3, r3, #1
    80ec:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    80f0:	b1bd      	cbz	r5, 8122 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    80f2:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    80f4:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    80f8:	4620      	mov	r0, r4
    80fa:	f7ff fc2f 	bl	795c <pin_is_output>
    80fe:	b1e8      	cbz	r0, 813c <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    8100:	f1b8 0f00 	cmp.w	r8, #0
    8104:	d164      	bne.n	81d0 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8106:	4a3a      	ldr	r2, [pc, #232]	; (81f0 <nrfx_gpiote_input_configure+0x1d8>)
    8108:	f104 0108 	add.w	r1, r4, #8
    810c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8110:	f023 031c 	bic.w	r3, r3, #28
    8114:	b29b      	uxth	r3, r3
    8116:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    811a:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    811e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    8122:	2e00      	cmp	r6, #0
    8124:	d058      	beq.n	81d8 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8126:	6872      	ldr	r2, [r6, #4]
    8128:	6831      	ldr	r1, [r6, #0]
    812a:	4620      	mov	r0, r4
    812c:	f7ff fcd4 	bl	7ad8 <pin_handler_set>
}
    8130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8134:	2200      	movs	r2, #0
    8136:	e7be      	b.n	80b6 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8138:	2200      	movs	r2, #0
    813a:	e7c6      	b.n	80ca <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    813c:	4a2c      	ldr	r2, [pc, #176]	; (81f0 <nrfx_gpiote_input_configure+0x1d8>)
    813e:	f104 0108 	add.w	r1, r4, #8
    8142:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8146:	f023 0320 	bic.w	r3, r3, #32
    814a:	04db      	lsls	r3, r3, #19
    814c:	0cdb      	lsrs	r3, r3, #19
    814e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    8152:	f1b8 0f00 	cmp.w	r8, #0
    8156:	d0d6      	beq.n	8106 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    8158:	2f03      	cmp	r7, #3
    815a:	d83b      	bhi.n	81d4 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    815c:	686b      	ldr	r3, [r5, #4]
    815e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8160:	b937      	cbnz	r7, 8170 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    8162:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    8166:	4b23      	ldr	r3, [pc, #140]	; (81f4 <nrfx_gpiote_input_configure+0x1dc>)
    8168:	2200      	movs	r2, #0
    816a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    816e:	e7ca      	b.n	8106 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    8170:	4638      	mov	r0, r7
    8172:	f004 ff04 	bl	cf7e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8176:	4b1f      	ldr	r3, [pc, #124]	; (81f4 <nrfx_gpiote_input_configure+0x1dc>)
    8178:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    817c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8180:	f021 0103 	bic.w	r1, r1, #3
    8184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    818c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    8190:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    8194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8198:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    819c:	0221      	lsls	r1, r4, #8
    819e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    81a2:	0400      	lsls	r0, r0, #16
    81a4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    81a8:	4301      	orrs	r1, r0
    81aa:	ea4c 0101 	orr.w	r1, ip, r1
    81ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    81b2:	036b      	lsls	r3, r5, #13
    81b4:	b29b      	uxth	r3, r3
    81b6:	4a0e      	ldr	r2, [pc, #56]	; (81f0 <nrfx_gpiote_input_configure+0x1d8>)
    81b8:	f104 0108 	add.w	r1, r4, #8
    81bc:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    81c0:	4303      	orrs	r3, r0
    81c2:	f043 0320 	orr.w	r3, r3, #32
    81c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    81ca:	e79c      	b.n	8106 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    81cc:	480a      	ldr	r0, [pc, #40]	; (81f8 <nrfx_gpiote_input_configure+0x1e0>)
    81ce:	e7af      	b.n	8130 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    81d0:	4809      	ldr	r0, [pc, #36]	; (81f8 <nrfx_gpiote_input_configure+0x1e0>)
    81d2:	e7ad      	b.n	8130 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    81d4:	4808      	ldr	r0, [pc, #32]	; (81f8 <nrfx_gpiote_input_configure+0x1e0>)
    81d6:	e7ab      	b.n	8130 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    81d8:	4808      	ldr	r0, [pc, #32]	; (81fc <nrfx_gpiote_input_configure+0x1e4>)
    81da:	e7a9      	b.n	8130 <nrfx_gpiote_input_configure+0x118>
    81dc:	0000f0b8 	.word	0x0000f0b8
    81e0:	0000d800 	.word	0x0000d800
    81e4:	0000d63c 	.word	0x0000d63c
    81e8:	0000f0ec 	.word	0x0000f0ec
    81ec:	50000300 	.word	0x50000300
    81f0:	200000f4 	.word	0x200000f4
    81f4:	40006000 	.word	0x40006000
    81f8:	0bad0004 	.word	0x0bad0004
    81fc:	0bad0000 	.word	0x0bad0000

00008200 <nrfx_gpiote_output_configure>:
{
    8200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8204:	4604      	mov	r4, r0
    8206:	4615      	mov	r5, r2
    if (p_config)
    8208:	2900      	cmp	r1, #0
    820a:	f000 8086 	beq.w	831a <nrfx_gpiote_output_configure+0x11a>
    820e:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8210:	f004 fead 	bl	cf6e <pin_is_input>
    8214:	b128      	cbz	r0, 8222 <nrfx_gpiote_output_configure+0x22>
    8216:	4620      	mov	r0, r4
    8218:	f7ff fb8a 	bl	7930 <pin_in_use_by_te>
    821c:	2800      	cmp	r0, #0
    821e:	f040 80ce 	bne.w	83be <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8222:	4620      	mov	r0, r4
    8224:	f7ff fb8e 	bl	7944 <pin_has_trigger>
    8228:	b118      	cbz	r0, 8232 <nrfx_gpiote_output_configure+0x32>
    822a:	787b      	ldrb	r3, [r7, #1]
    822c:	2b01      	cmp	r3, #1
    822e:	f000 80c8 	beq.w	83c2 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    8232:	f107 0901 	add.w	r9, r7, #1
    8236:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    823a:	0963      	lsrs	r3, r4, #5
    823c:	d020      	beq.n	8280 <nrfx_gpiote_output_configure+0x80>
    823e:	2b01      	cmp	r3, #1
    8240:	d121      	bne.n	8286 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    8242:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8246:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    824a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    824c:	f013 0f01 	tst.w	r3, #1
    8250:	d01b      	beq.n	828a <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    8252:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8256:	0963      	lsrs	r3, r4, #5
    8258:	d025      	beq.n	82a6 <nrfx_gpiote_output_configure+0xa6>
    825a:	2b01      	cmp	r3, #1
    825c:	d026      	beq.n	82ac <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    825e:	f8df a170 	ldr.w	sl, [pc, #368]	; 83d0 <nrfx_gpiote_output_configure+0x1d0>
    8262:	f240 232e 	movw	r3, #558	; 0x22e
    8266:	4652      	mov	r2, sl
    8268:	495a      	ldr	r1, [pc, #360]	; (83d4 <nrfx_gpiote_output_configure+0x1d4>)
    826a:	485b      	ldr	r0, [pc, #364]	; (83d8 <nrfx_gpiote_output_configure+0x1d8>)
    826c:	f004 f806 	bl	c27c <assert_print>
    8270:	f240 212e 	movw	r1, #558	; 0x22e
    8274:	4650      	mov	r0, sl
    8276:	f003 fffa 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    827a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    827e:	e016      	b.n	82ae <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    8280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8284:	e7df      	b.n	8246 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    8286:	2300      	movs	r3, #0
    8288:	e7dd      	b.n	8246 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    828a:	4e51      	ldr	r6, [pc, #324]	; (83d0 <nrfx_gpiote_output_configure+0x1d0>)
    828c:	f240 2329 	movw	r3, #553	; 0x229
    8290:	4632      	mov	r2, r6
    8292:	4952      	ldr	r1, [pc, #328]	; (83dc <nrfx_gpiote_output_configure+0x1dc>)
    8294:	4850      	ldr	r0, [pc, #320]	; (83d8 <nrfx_gpiote_output_configure+0x1d8>)
    8296:	f003 fff1 	bl	c27c <assert_print>
    829a:	f240 2129 	movw	r1, #553	; 0x229
    829e:	4630      	mov	r0, r6
    82a0:	f003 ffe5 	bl	c26e <assert_post_action>
    82a4:	e7d5      	b.n	8252 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    82a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    82aa:	e000      	b.n	82ae <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82ac:	4a4c      	ldr	r2, [pc, #304]	; (83e0 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    82ae:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    82b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    82b6:	f1b9 0f00 	cmp.w	r9, #0
    82ba:	d04b      	beq.n	8354 <nrfx_gpiote_output_configure+0x154>
    82bc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    82be:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    82c2:	f1b8 0f00 	cmp.w	r8, #0
    82c6:	d047      	beq.n	8358 <nrfx_gpiote_output_configure+0x158>
    82c8:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    82ca:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    82cc:	2f00      	cmp	r7, #0
    82ce:	d045      	beq.n	835c <nrfx_gpiote_output_configure+0x15c>
    82d0:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    82d4:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    82d6:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    82da:	f1b9 0f00 	cmp.w	r9, #0
    82de:	d03f      	beq.n	8360 <nrfx_gpiote_output_configure+0x160>
    82e0:	787b      	ldrb	r3, [r7, #1]
    82e2:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    82e4:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    82e8:	f1b8 0f00 	cmp.w	r8, #0
    82ec:	d03a      	beq.n	8364 <nrfx_gpiote_output_configure+0x164>
    82ee:	78b8      	ldrb	r0, [r7, #2]
    82f0:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    82f2:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    82f4:	2f00      	cmp	r7, #0
    82f6:	d037      	beq.n	8368 <nrfx_gpiote_output_configure+0x168>
    82f8:	7838      	ldrb	r0, [r7, #0]
    82fa:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    82fc:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    82fe:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    8300:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8304:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8308:	4a36      	ldr	r2, [pc, #216]	; (83e4 <nrfx_gpiote_output_configure+0x1e4>)
    830a:	f104 0108 	add.w	r1, r4, #8
    830e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    8312:	f043 0303 	orr.w	r3, r3, #3
    8316:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    831a:	2d00      	cmp	r5, #0
    831c:	d053      	beq.n	83c6 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    831e:	4620      	mov	r0, r4
    8320:	f004 fe25 	bl	cf6e <pin_is_input>
    8324:	2800      	cmp	r0, #0
    8326:	d150      	bne.n	83ca <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    8328:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    832a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    832e:	4a2e      	ldr	r2, [pc, #184]	; (83e8 <nrfx_gpiote_output_configure+0x1e8>)
    8330:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8334:	492b      	ldr	r1, [pc, #172]	; (83e4 <nrfx_gpiote_output_configure+0x1e4>)
    8336:	f104 0008 	add.w	r0, r4, #8
    833a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    833e:	f022 0220 	bic.w	r2, r2, #32
    8342:	04d2      	lsls	r2, r2, #19
    8344:	0cd2      	lsrs	r2, r2, #19
    8346:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    834a:	786a      	ldrb	r2, [r5, #1]
    834c:	b972      	cbnz	r2, 836c <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    834e:	4827      	ldr	r0, [pc, #156]	; (83ec <nrfx_gpiote_output_configure+0x1ec>)
}
    8350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8354:	2300      	movs	r3, #0
    8356:	e7b2      	b.n	82be <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8358:	2000      	movs	r0, #0
    835a:	e7b6      	b.n	82ca <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    835c:	2000      	movs	r0, #0
    835e:	e7b9      	b.n	82d4 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8360:	2300      	movs	r3, #0
    8362:	e7bf      	b.n	82e4 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8364:	2000      	movs	r0, #0
    8366:	e7c4      	b.n	82f2 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8368:	2000      	movs	r0, #0
    836a:	e7c7      	b.n	82fc <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    836c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    836e:	481e      	ldr	r0, [pc, #120]	; (83e8 <nrfx_gpiote_output_configure+0x1e8>)
    8370:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    8374:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8378:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    837c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    8380:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8384:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    8388:	0221      	lsls	r1, r4, #8
    838a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    838e:	0412      	lsls	r2, r2, #16
    8390:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8394:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8396:	0539      	lsls	r1, r7, #20
    8398:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    839c:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    839e:	4332      	orrs	r2, r6
    83a0:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    83a4:	035b      	lsls	r3, r3, #13
    83a6:	b29b      	uxth	r3, r3
    83a8:	4a0e      	ldr	r2, [pc, #56]	; (83e4 <nrfx_gpiote_output_configure+0x1e4>)
    83aa:	3408      	adds	r4, #8
    83ac:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    83b0:	430b      	orrs	r3, r1
    83b2:	f043 0320 	orr.w	r3, r3, #32
    83b6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    83ba:	480c      	ldr	r0, [pc, #48]	; (83ec <nrfx_gpiote_output_configure+0x1ec>)
    83bc:	e7c8      	b.n	8350 <nrfx_gpiote_output_configure+0x150>
    83be:	480c      	ldr	r0, [pc, #48]	; (83f0 <nrfx_gpiote_output_configure+0x1f0>)
    83c0:	e7c6      	b.n	8350 <nrfx_gpiote_output_configure+0x150>
    83c2:	480b      	ldr	r0, [pc, #44]	; (83f0 <nrfx_gpiote_output_configure+0x1f0>)
    83c4:	e7c4      	b.n	8350 <nrfx_gpiote_output_configure+0x150>
    83c6:	4809      	ldr	r0, [pc, #36]	; (83ec <nrfx_gpiote_output_configure+0x1ec>)
    83c8:	e7c2      	b.n	8350 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    83ca:	4809      	ldr	r0, [pc, #36]	; (83f0 <nrfx_gpiote_output_configure+0x1f0>)
    83cc:	e7c0      	b.n	8350 <nrfx_gpiote_output_configure+0x150>
    83ce:	bf00      	nop
    83d0:	0000f0b8 	.word	0x0000f0b8
    83d4:	0000d800 	.word	0x0000d800
    83d8:	0000d63c 	.word	0x0000d63c
    83dc:	0000f0ec 	.word	0x0000f0ec
    83e0:	50000300 	.word	0x50000300
    83e4:	200000f4 	.word	0x200000f4
    83e8:	40006000 	.word	0x40006000
    83ec:	0bad0000 	.word	0x0bad0000
    83f0:	0bad0004 	.word	0x0bad0004

000083f4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    83f4:	4b01      	ldr	r3, [pc, #4]	; (83fc <nrfx_gpiote_global_callback_set+0x8>)
    83f6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    83f8:	60d9      	str	r1, [r3, #12]
}
    83fa:	4770      	bx	lr
    83fc:	200000f4 	.word	0x200000f4

00008400 <nrfx_gpiote_channel_get>:
{
    8400:	b570      	push	{r4, r5, r6, lr}
    8402:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    8404:	460d      	mov	r5, r1
    8406:	b159      	cbz	r1, 8420 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    8408:	4620      	mov	r0, r4
    840a:	f7ff fa91 	bl	7930 <pin_in_use_by_te>
    840e:	b1a8      	cbz	r0, 843c <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8410:	3408      	adds	r4, #8
    8412:	4b0b      	ldr	r3, [pc, #44]	; (8440 <nrfx_gpiote_channel_get+0x40>)
    8414:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8418:	0b5b      	lsrs	r3, r3, #13
    841a:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    841c:	4809      	ldr	r0, [pc, #36]	; (8444 <nrfx_gpiote_channel_get+0x44>)
}
    841e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    8420:	4e09      	ldr	r6, [pc, #36]	; (8448 <nrfx_gpiote_channel_get+0x48>)
    8422:	f240 2335 	movw	r3, #565	; 0x235
    8426:	4632      	mov	r2, r6
    8428:	4908      	ldr	r1, [pc, #32]	; (844c <nrfx_gpiote_channel_get+0x4c>)
    842a:	4809      	ldr	r0, [pc, #36]	; (8450 <nrfx_gpiote_channel_get+0x50>)
    842c:	f003 ff26 	bl	c27c <assert_print>
    8430:	f240 2135 	movw	r1, #565	; 0x235
    8434:	4630      	mov	r0, r6
    8436:	f003 ff1a 	bl	c26e <assert_post_action>
    843a:	e7e5      	b.n	8408 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    843c:	4805      	ldr	r0, [pc, #20]	; (8454 <nrfx_gpiote_channel_get+0x54>)
    843e:	e7ee      	b.n	841e <nrfx_gpiote_channel_get+0x1e>
    8440:	200000f4 	.word	0x200000f4
    8444:	0bad0000 	.word	0x0bad0000
    8448:	0000f2dc 	.word	0x0000f2dc
    844c:	0000f330 	.word	0x0000f330
    8450:	0000d63c 	.word	0x0000d63c
    8454:	0bad0004 	.word	0x0bad0004

00008458 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8458:	4b10      	ldr	r3, [pc, #64]	; (849c <nrfx_gpiote_init+0x44>)
    845a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    845e:	b10b      	cbz	r3, 8464 <nrfx_gpiote_init+0xc>
        return err_code;
    8460:	480f      	ldr	r0, [pc, #60]	; (84a0 <nrfx_gpiote_init+0x48>)
}
    8462:	4770      	bx	lr
{
    8464:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8466:	4c0d      	ldr	r4, [pc, #52]	; (849c <nrfx_gpiote_init+0x44>)
    8468:	2260      	movs	r2, #96	; 0x60
    846a:	2100      	movs	r1, #0
    846c:	f104 0010 	add.w	r0, r4, #16
    8470:	f004 f8cb 	bl	c60a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8474:	2006      	movs	r0, #6
    8476:	f7fc f851 	bl	451c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    847a:	4b0a      	ldr	r3, [pc, #40]	; (84a4 <nrfx_gpiote_init+0x4c>)
    847c:	2200      	movs	r2, #0
    847e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    8482:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    848a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    848e:	2301      	movs	r3, #1
    8490:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8494:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    8496:	4804      	ldr	r0, [pc, #16]	; (84a8 <nrfx_gpiote_init+0x50>)
}
    8498:	bd10      	pop	{r4, pc}
    849a:	bf00      	nop
    849c:	200000f4 	.word	0x200000f4
    84a0:	0bad0005 	.word	0x0bad0005
    84a4:	40006000 	.word	0x40006000
    84a8:	0bad0000 	.word	0x0bad0000

000084ac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    84ac:	4b03      	ldr	r3, [pc, #12]	; (84bc <nrfx_gpiote_is_init+0x10>)
    84ae:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    84b2:	3800      	subs	r0, #0
    84b4:	bf18      	it	ne
    84b6:	2001      	movne	r0, #1
    84b8:	4770      	bx	lr
    84ba:	bf00      	nop
    84bc:	200000f4 	.word	0x200000f4

000084c0 <nrfx_gpiote_channel_free>:
{
    84c0:	b508      	push	{r3, lr}
    84c2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    84c4:	4801      	ldr	r0, [pc, #4]	; (84cc <nrfx_gpiote_channel_free+0xc>)
    84c6:	f7ff f855 	bl	7574 <nrfx_flag32_free>
}
    84ca:	bd08      	pop	{r3, pc}
    84cc:	20000164 	.word	0x20000164

000084d0 <nrfx_gpiote_channel_alloc>:
{
    84d0:	b508      	push	{r3, lr}
    84d2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    84d4:	4801      	ldr	r0, [pc, #4]	; (84dc <nrfx_gpiote_channel_alloc+0xc>)
    84d6:	f7ff f825 	bl	7524 <nrfx_flag32_alloc>
}
    84da:	bd08      	pop	{r3, pc}
    84dc:	20000164 	.word	0x20000164

000084e0 <nrfx_gpiote_trigger_enable>:
{
    84e0:	b570      	push	{r4, r5, r6, lr}
    84e2:	4604      	mov	r4, r0
    84e4:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    84e6:	f7ff fa2d 	bl	7944 <pin_has_trigger>
    84ea:	b1b8      	cbz	r0, 851c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    84ec:	4620      	mov	r0, r4
    84ee:	f7ff fa1f 	bl	7930 <pin_in_use_by_te>
    84f2:	b118      	cbz	r0, 84fc <nrfx_gpiote_trigger_enable+0x1c>
    84f4:	4620      	mov	r0, r4
    84f6:	f004 fd3a 	bl	cf6e <pin_is_input>
    84fa:	b9e8      	cbnz	r0, 8538 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    84fc:	2d00      	cmp	r5, #0
    84fe:	d04c      	beq.n	859a <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8500:	f104 0308 	add.w	r3, r4, #8
    8504:	4a70      	ldr	r2, [pc, #448]	; (86c8 <nrfx_gpiote_trigger_enable+0x1e8>)
    8506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    850a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    850e:	2b04      	cmp	r3, #4
    8510:	f000 8092 	beq.w	8638 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8514:	2b05      	cmp	r3, #5
    8516:	d14e      	bne.n	85b6 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8518:	2602      	movs	r6, #2
    851a:	e08e      	b.n	863a <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    851c:	4e6b      	ldr	r6, [pc, #428]	; (86cc <nrfx_gpiote_trigger_enable+0x1ec>)
    851e:	f240 33df 	movw	r3, #991	; 0x3df
    8522:	4632      	mov	r2, r6
    8524:	496a      	ldr	r1, [pc, #424]	; (86d0 <nrfx_gpiote_trigger_enable+0x1f0>)
    8526:	486b      	ldr	r0, [pc, #428]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    8528:	f003 fea8 	bl	c27c <assert_print>
    852c:	f240 31df 	movw	r1, #991	; 0x3df
    8530:	4630      	mov	r0, r6
    8532:	f003 fe9c 	bl	c26e <assert_post_action>
    8536:	e7d9      	b.n	84ec <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    8538:	4620      	mov	r0, r4
    853a:	f7ff fa19 	bl	7970 <pin_te_get>
    853e:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    8540:	2807      	cmp	r0, #7
    8542:	d81c      	bhi.n	857e <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8544:	00a3      	lsls	r3, r4, #2
    8546:	f503 7380 	add.w	r3, r3, #256	; 0x100
    854a:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    854c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8550:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8554:	2200      	movs	r2, #0
    8556:	601a      	str	r2, [r3, #0]
    8558:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    855a:	4a5f      	ldr	r2, [pc, #380]	; (86d8 <nrfx_gpiote_trigger_enable+0x1f8>)
    855c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    8560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8564:	f043 0301 	orr.w	r3, r3, #1
    8568:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    856c:	2d00      	cmp	r5, #0
    856e:	f000 80a9 	beq.w	86c4 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8572:	2001      	movs	r0, #1
    8574:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    8578:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    857c:	e0a2      	b.n	86c4 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    857e:	4e57      	ldr	r6, [pc, #348]	; (86dc <nrfx_gpiote_trigger_enable+0x1fc>)
    8580:	f44f 7323 	mov.w	r3, #652	; 0x28c
    8584:	4632      	mov	r2, r6
    8586:	4956      	ldr	r1, [pc, #344]	; (86e0 <nrfx_gpiote_trigger_enable+0x200>)
    8588:	4852      	ldr	r0, [pc, #328]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    858a:	f003 fe77 	bl	c27c <assert_print>
    858e:	f44f 7123 	mov.w	r1, #652	; 0x28c
    8592:	4630      	mov	r0, r6
    8594:	f003 fe6b 	bl	c26e <assert_post_action>
    8598:	e7d4      	b.n	8544 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    859a:	4d4c      	ldr	r5, [pc, #304]	; (86cc <nrfx_gpiote_trigger_enable+0x1ec>)
    859c:	f240 33ee 	movw	r3, #1006	; 0x3ee
    85a0:	462a      	mov	r2, r5
    85a2:	4950      	ldr	r1, [pc, #320]	; (86e4 <nrfx_gpiote_trigger_enable+0x204>)
    85a4:	484b      	ldr	r0, [pc, #300]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    85a6:	f003 fe69 	bl	c27c <assert_print>
    85aa:	f240 31ee 	movw	r1, #1006	; 0x3ee
    85ae:	4628      	mov	r0, r5
    85b0:	f003 fe5d 	bl	c26e <assert_post_action>
    85b4:	e7a4      	b.n	8500 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    85b6:	0963      	lsrs	r3, r4, #5
    85b8:	d01f      	beq.n	85fa <nrfx_gpiote_trigger_enable+0x11a>
    85ba:	2b01      	cmp	r3, #1
    85bc:	d120      	bne.n	8600 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    85be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    85c2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    85c6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85c8:	f013 0f01 	tst.w	r3, #1
    85cc:	d01a      	beq.n	8604 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    85ce:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85d2:	0963      	lsrs	r3, r4, #5
    85d4:	d024      	beq.n	8620 <nrfx_gpiote_trigger_enable+0x140>
    85d6:	2b01      	cmp	r3, #1
    85d8:	d025      	beq.n	8626 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    85da:	4e43      	ldr	r6, [pc, #268]	; (86e8 <nrfx_gpiote_trigger_enable+0x208>)
    85dc:	f240 232e 	movw	r3, #558	; 0x22e
    85e0:	4632      	mov	r2, r6
    85e2:	4942      	ldr	r1, [pc, #264]	; (86ec <nrfx_gpiote_trigger_enable+0x20c>)
    85e4:	483b      	ldr	r0, [pc, #236]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    85e6:	f003 fe49 	bl	c27c <assert_print>
    85ea:	f240 212e 	movw	r1, #558	; 0x22e
    85ee:	4630      	mov	r0, r6
    85f0:	f003 fe3d 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    85f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    85f8:	e016      	b.n	8628 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    85fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    85fe:	e7e0      	b.n	85c2 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    8600:	2300      	movs	r3, #0
    8602:	e7de      	b.n	85c2 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8604:	4d38      	ldr	r5, [pc, #224]	; (86e8 <nrfx_gpiote_trigger_enable+0x208>)
    8606:	f240 2329 	movw	r3, #553	; 0x229
    860a:	462a      	mov	r2, r5
    860c:	4938      	ldr	r1, [pc, #224]	; (86f0 <nrfx_gpiote_trigger_enable+0x210>)
    860e:	4831      	ldr	r0, [pc, #196]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    8610:	f003 fe34 	bl	c27c <assert_print>
    8614:	f240 2129 	movw	r1, #553	; 0x229
    8618:	4628      	mov	r0, r5
    861a:	f003 fe28 	bl	c26e <assert_post_action>
    861e:	e7d6      	b.n	85ce <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    8620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8624:	e000      	b.n	8628 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8626:	4b33      	ldr	r3, [pc, #204]	; (86f4 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    8628:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    862c:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    862e:	f013 0f01 	tst.w	r3, #1
    8632:	d024      	beq.n	867e <nrfx_gpiote_trigger_enable+0x19e>
    8634:	2603      	movs	r6, #3
    8636:	e000      	b.n	863a <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8638:	2603      	movs	r6, #3
    switch (port)
    863a:	0963      	lsrs	r3, r4, #5
    863c:	d021      	beq.n	8682 <nrfx_gpiote_trigger_enable+0x1a2>
    863e:	2b01      	cmp	r3, #1
    8640:	d122      	bne.n	8688 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    8642:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8646:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    864a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    864c:	f013 0f01 	tst.w	r3, #1
    8650:	d01c      	beq.n	868c <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    8652:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8656:	0964      	lsrs	r4, r4, #5
    8658:	d026      	beq.n	86a8 <nrfx_gpiote_trigger_enable+0x1c8>
    865a:	2c01      	cmp	r4, #1
    865c:	d027      	beq.n	86ae <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    865e:	4c22      	ldr	r4, [pc, #136]	; (86e8 <nrfx_gpiote_trigger_enable+0x208>)
    8660:	f240 232e 	movw	r3, #558	; 0x22e
    8664:	4622      	mov	r2, r4
    8666:	4921      	ldr	r1, [pc, #132]	; (86ec <nrfx_gpiote_trigger_enable+0x20c>)
    8668:	481a      	ldr	r0, [pc, #104]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    866a:	f003 fe07 	bl	c27c <assert_print>
    866e:	f240 212e 	movw	r1, #558	; 0x22e
    8672:	4620      	mov	r0, r4
    8674:	f003 fdfb 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    8678:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    867c:	e018      	b.n	86b0 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    867e:	2602      	movs	r6, #2
    8680:	e7db      	b.n	863a <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    8682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8686:	e7de      	b.n	8646 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    8688:	2300      	movs	r3, #0
    868a:	e7dc      	b.n	8646 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    868c:	4d16      	ldr	r5, [pc, #88]	; (86e8 <nrfx_gpiote_trigger_enable+0x208>)
    868e:	f240 2329 	movw	r3, #553	; 0x229
    8692:	462a      	mov	r2, r5
    8694:	4916      	ldr	r1, [pc, #88]	; (86f0 <nrfx_gpiote_trigger_enable+0x210>)
    8696:	480f      	ldr	r0, [pc, #60]	; (86d4 <nrfx_gpiote_trigger_enable+0x1f4>)
    8698:	f003 fdf0 	bl	c27c <assert_print>
    869c:	f240 2129 	movw	r1, #553	; 0x229
    86a0:	4628      	mov	r0, r5
    86a2:	f003 fde4 	bl	c26e <assert_post_action>
    86a6:	e7d4      	b.n	8652 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    86a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    86ac:	e000      	b.n	86b0 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86ae:	4911      	ldr	r1, [pc, #68]	; (86f4 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    86b0:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    86b4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    86b8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    86bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    86c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    86c4:	bd70      	pop	{r4, r5, r6, pc}
    86c6:	bf00      	nop
    86c8:	200000f4 	.word	0x200000f4
    86cc:	0000f2dc 	.word	0x0000f2dc
    86d0:	0000f380 	.word	0x0000f380
    86d4:	0000d63c 	.word	0x0000d63c
    86d8:	40006000 	.word	0x40006000
    86dc:	0000f33c 	.word	0x0000f33c
    86e0:	0000f374 	.word	0x0000f374
    86e4:	0000f398 	.word	0x0000f398
    86e8:	0000f0b8 	.word	0x0000f0b8
    86ec:	0000d800 	.word	0x0000d800
    86f0:	0000f0ec 	.word	0x0000f0ec
    86f4:	50000300 	.word	0x50000300

000086f8 <nrfx_gpiote_trigger_disable>:
{
    86f8:	b538      	push	{r3, r4, r5, lr}
    86fa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    86fc:	f7ff f918 	bl	7930 <pin_in_use_by_te>
    8700:	b1a0      	cbz	r0, 872c <nrfx_gpiote_trigger_disable+0x34>
    8702:	4620      	mov	r0, r4
    8704:	f004 fc33 	bl	cf6e <pin_is_input>
    8708:	b180      	cbz	r0, 872c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    870a:	4620      	mov	r0, r4
    870c:	f7ff f930 	bl	7970 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8710:	2201      	movs	r2, #1
    8712:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    8714:	4b26      	ldr	r3, [pc, #152]	; (87b0 <nrfx_gpiote_trigger_disable+0xb8>)
    8716:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    871a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    871e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    8722:	f022 0203 	bic.w	r2, r2, #3
    8726:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    872a:	e040      	b.n	87ae <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    872c:	0963      	lsrs	r3, r4, #5
    872e:	d01f      	beq.n	8770 <nrfx_gpiote_trigger_disable+0x78>
    8730:	2b01      	cmp	r3, #1
    8732:	d120      	bne.n	8776 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    8734:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8738:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    873c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    873e:	f013 0f01 	tst.w	r3, #1
    8742:	d01a      	beq.n	877a <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    8744:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8748:	0964      	lsrs	r4, r4, #5
    874a:	d024      	beq.n	8796 <nrfx_gpiote_trigger_disable+0x9e>
    874c:	2c01      	cmp	r4, #1
    874e:	d025      	beq.n	879c <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    8750:	4c18      	ldr	r4, [pc, #96]	; (87b4 <nrfx_gpiote_trigger_disable+0xbc>)
    8752:	f240 232e 	movw	r3, #558	; 0x22e
    8756:	4622      	mov	r2, r4
    8758:	4917      	ldr	r1, [pc, #92]	; (87b8 <nrfx_gpiote_trigger_disable+0xc0>)
    875a:	4818      	ldr	r0, [pc, #96]	; (87bc <nrfx_gpiote_trigger_disable+0xc4>)
    875c:	f003 fd8e 	bl	c27c <assert_print>
    8760:	f240 212e 	movw	r1, #558	; 0x22e
    8764:	4620      	mov	r0, r4
    8766:	f003 fd82 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    876a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    876e:	e016      	b.n	879e <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    8770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8774:	e7e0      	b.n	8738 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    8776:	2300      	movs	r3, #0
    8778:	e7de      	b.n	8738 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    877a:	4d0e      	ldr	r5, [pc, #56]	; (87b4 <nrfx_gpiote_trigger_disable+0xbc>)
    877c:	f240 2329 	movw	r3, #553	; 0x229
    8780:	462a      	mov	r2, r5
    8782:	490f      	ldr	r1, [pc, #60]	; (87c0 <nrfx_gpiote_trigger_disable+0xc8>)
    8784:	480d      	ldr	r0, [pc, #52]	; (87bc <nrfx_gpiote_trigger_disable+0xc4>)
    8786:	f003 fd79 	bl	c27c <assert_print>
    878a:	f240 2129 	movw	r1, #553	; 0x229
    878e:	4628      	mov	r0, r5
    8790:	f003 fd6d 	bl	c26e <assert_post_action>
    8794:	e7d6      	b.n	8744 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    8796:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    879a:	e000      	b.n	879e <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    879c:	4909      	ldr	r1, [pc, #36]	; (87c4 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    879e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    87a2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    87a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    87aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    87ae:	bd38      	pop	{r3, r4, r5, pc}
    87b0:	40006000 	.word	0x40006000
    87b4:	0000f0b8 	.word	0x0000f0b8
    87b8:	0000d800 	.word	0x0000d800
    87bc:	0000d63c 	.word	0x0000d63c
    87c0:	0000f0ec 	.word	0x0000f0ec
    87c4:	50000300 	.word	0x50000300

000087c8 <nrfx_gpiote_pin_uninit>:
{
    87c8:	b538      	push	{r3, r4, r5, lr}
    87ca:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    87cc:	f7ff f8a6 	bl	791c <pin_in_use>
    87d0:	b908      	cbnz	r0, 87d6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    87d2:	4824      	ldr	r0, [pc, #144]	; (8864 <nrfx_gpiote_pin_uninit+0x9c>)
}
    87d4:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    87d6:	4620      	mov	r0, r4
    87d8:	f7ff ff8e 	bl	86f8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    87dc:	4620      	mov	r0, r4
    87de:	f7ff f95f 	bl	7aa0 <pin_handler_trigger_uninit>
    switch (port)
    87e2:	0963      	lsrs	r3, r4, #5
    87e4:	d01f      	beq.n	8826 <nrfx_gpiote_pin_uninit+0x5e>
    87e6:	2b01      	cmp	r3, #1
    87e8:	d120      	bne.n	882c <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    87ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    87ee:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    87f2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    87f4:	f013 0f01 	tst.w	r3, #1
    87f8:	d01a      	beq.n	8830 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    87fa:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87fe:	0964      	lsrs	r4, r4, #5
    8800:	d024      	beq.n	884c <nrfx_gpiote_pin_uninit+0x84>
    8802:	2c01      	cmp	r4, #1
    8804:	d025      	beq.n	8852 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    8806:	4c18      	ldr	r4, [pc, #96]	; (8868 <nrfx_gpiote_pin_uninit+0xa0>)
    8808:	f240 232e 	movw	r3, #558	; 0x22e
    880c:	4622      	mov	r2, r4
    880e:	4917      	ldr	r1, [pc, #92]	; (886c <nrfx_gpiote_pin_uninit+0xa4>)
    8810:	4817      	ldr	r0, [pc, #92]	; (8870 <nrfx_gpiote_pin_uninit+0xa8>)
    8812:	f003 fd33 	bl	c27c <assert_print>
    8816:	f240 212e 	movw	r1, #558	; 0x22e
    881a:	4620      	mov	r0, r4
    881c:	f003 fd27 	bl	c26e <assert_post_action>
        case 0: return NRF_P0;
    8820:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8824:	e016      	b.n	8854 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    8826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    882a:	e7e0      	b.n	87ee <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    882c:	2300      	movs	r3, #0
    882e:	e7de      	b.n	87ee <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8830:	4d0d      	ldr	r5, [pc, #52]	; (8868 <nrfx_gpiote_pin_uninit+0xa0>)
    8832:	f240 2329 	movw	r3, #553	; 0x229
    8836:	462a      	mov	r2, r5
    8838:	490e      	ldr	r1, [pc, #56]	; (8874 <nrfx_gpiote_pin_uninit+0xac>)
    883a:	480d      	ldr	r0, [pc, #52]	; (8870 <nrfx_gpiote_pin_uninit+0xa8>)
    883c:	f003 fd1e 	bl	c27c <assert_print>
    8840:	f240 2129 	movw	r1, #553	; 0x229
    8844:	4628      	mov	r0, r5
    8846:	f003 fd12 	bl	c26e <assert_post_action>
    884a:	e7d6      	b.n	87fa <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    884c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8850:	e000      	b.n	8854 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8852:	4b09      	ldr	r3, [pc, #36]	; (8878 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    8854:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    8858:	2202      	movs	r2, #2
    885a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    885e:	4807      	ldr	r0, [pc, #28]	; (887c <nrfx_gpiote_pin_uninit+0xb4>)
}
    8860:	e7b8      	b.n	87d4 <nrfx_gpiote_pin_uninit+0xc>
    8862:	bf00      	nop
    8864:	0bad0004 	.word	0x0bad0004
    8868:	0000f0b8 	.word	0x0000f0b8
    886c:	0000d800 	.word	0x0000d800
    8870:	0000d63c 	.word	0x0000d63c
    8874:	0000f0ec 	.word	0x0000f0ec
    8878:	50000300 	.word	0x50000300
    887c:	0bad0000 	.word	0x0bad0000

00008880 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    8880:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8882:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    8884:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8888:	2100      	movs	r1, #0
    uint32_t status = 0;
    888a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    888c:	e003      	b.n	8896 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    888e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    8890:	3304      	adds	r3, #4
    8892:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8894:	3101      	adds	r1, #1
    8896:	2907      	cmp	r1, #7
    8898:	d814      	bhi.n	88c4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    889a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    889e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    88a2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    88a4:	2a00      	cmp	r2, #0
    88a6:	d0f2      	beq.n	888e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    88a8:	4a0c      	ldr	r2, [pc, #48]	; (88dc <nrfx_gpiote_irq_handler+0x5c>)
    88aa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    88ae:	4210      	tst	r0, r2
    88b0:	d0ed      	beq.n	888e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    88b2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    88b6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    88ba:	2500      	movs	r5, #0
    88bc:	6015      	str	r5, [r2, #0]
    88be:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    88c0:	4304      	orrs	r4, r0
    88c2:	e7e4      	b.n	888e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88c4:	4b05      	ldr	r3, [pc, #20]	; (88dc <nrfx_gpiote_irq_handler+0x5c>)
    88c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    88ca:	b91b      	cbnz	r3, 88d4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    88cc:	4620      	mov	r0, r4
    88ce:	f7ff f939 	bl	7b44 <gpiote_evt_handle>
}
    88d2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    88d4:	f7ff fac2 	bl	7e5c <port_event_handle>
    88d8:	e7f8      	b.n	88cc <nrfx_gpiote_irq_handler+0x4c>
    88da:	bf00      	nop
    88dc:	40006000 	.word	0x40006000

000088e0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    88e0:	b508      	push	{r3, lr}
    88e2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    88e4:	4801      	ldr	r0, [pc, #4]	; (88ec <nrfx_ppi_channel_alloc+0xc>)
    88e6:	f7fe fe1d 	bl	7524 <nrfx_flag32_alloc>
}
    88ea:	bd08      	pop	{r3, pc}
    88ec:	20000170 	.word	0x20000170

000088f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    88f0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    88f2:	4c11      	ldr	r4, [pc, #68]	; (8938 <_DoInit+0x48>)
    88f4:	2303      	movs	r3, #3
    88f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    88f8:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    88fa:	4a10      	ldr	r2, [pc, #64]	; (893c <_DoInit+0x4c>)
    88fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    88fe:	4b10      	ldr	r3, [pc, #64]	; (8940 <_DoInit+0x50>)
    8900:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    8902:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8906:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    8908:	2300      	movs	r3, #0
    890a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    890c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    890e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    8910:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    8912:	4a0c      	ldr	r2, [pc, #48]	; (8944 <_DoInit+0x54>)
    8914:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    8916:	2210      	movs	r2, #16
    8918:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    891a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    891c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    891e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    8920:	4909      	ldr	r1, [pc, #36]	; (8948 <_DoInit+0x58>)
    8922:	1de0      	adds	r0, r4, #7
    8924:	f003 fe00 	bl	c528 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    8928:	4908      	ldr	r1, [pc, #32]	; (894c <_DoInit+0x5c>)
    892a:	4620      	mov	r0, r4
    892c:	f003 fdfc 	bl	c528 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    8930:	2320      	movs	r3, #32
    8932:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    8934:	bd10      	pop	{r4, pc}
    8936:	bf00      	nop
    8938:	20000d70 	.word	0x20000d70
    893c:	0000f3a4 	.word	0x0000f3a4
    8940:	20000e28 	.word	0x20000e28
    8944:	20000e18 	.word	0x20000e18
    8948:	0000f3b0 	.word	0x0000f3b0
    894c:	0000f3b4 	.word	0x0000f3b4

00008950 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8954:	4604      	mov	r4, r0
    8956:	460e      	mov	r6, r1
    8958:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    895a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    895e:	4a2d      	ldr	r2, [pc, #180]	; (8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8960:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8964:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    8966:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8968:	42bb      	cmp	r3, r7
    896a:	d84b      	bhi.n	8a04 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    896c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8970:	4928      	ldr	r1, [pc, #160]	; (8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    8972:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    8976:	f8d2 8020 	ldr.w	r8, [r2, #32]
    897a:	eba8 0907 	sub.w	r9, r8, r7
    897e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    8982:	4295      	cmp	r5, r2
    8984:	d904      	bls.n	8990 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    8986:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    8988:	429d      	cmp	r5, r3
    898a:	d916      	bls.n	89ba <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    898c:	2000      	movs	r0, #0
    898e:	e03e      	b.n	8a0e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8990:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    8994:	1c63      	adds	r3, r4, #1
    8996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    899a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    899e:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    89a0:	462a      	mov	r2, r5
    89a2:	4631      	mov	r1, r6
    89a4:	4438      	add	r0, r7
    89a6:	f003 fe01 	bl	c5ac <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    89aa:	443d      	add	r5, r7
    89ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    89b0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    89b4:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    89b6:	2001      	movs	r0, #1
    89b8:	e029      	b.n	8a0e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    89ba:	1c43      	adds	r3, r0, #1
    89bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    89c0:	4a14      	ldr	r2, [pc, #80]	; (8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    89c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    89c6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    89c8:	464a      	mov	r2, r9
    89ca:	4631      	mov	r1, r6
    89cc:	4438      	add	r0, r7
    89ce:	f003 fded 	bl	c5ac <memcpy>
      NumBytes -= Rem;
    89d2:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    89d6:	197f      	adds	r7, r7, r5
    89d8:	d107      	bne.n	89ea <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    89da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    89de:	4b0d      	ldr	r3, [pc, #52]	; (8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    89e0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    89e4:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    89e6:	2001      	movs	r0, #1
    89e8:	e011      	b.n	8a0e <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    89ea:	1c63      	adds	r3, r4, #1
    89ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    89f0:	4a08      	ldr	r2, [pc, #32]	; (8a14 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    89f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    89f6:	463a      	mov	r2, r7
    89f8:	eb06 0109 	add.w	r1, r6, r9
    89fc:	6858      	ldr	r0, [r3, #4]
    89fe:	f003 fdd5 	bl	c5ac <memcpy>
    8a02:	e7ea      	b.n	89da <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    8a04:	1bdb      	subs	r3, r3, r7
    8a06:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    8a08:	42ab      	cmp	r3, r5
    8a0a:	d2c1      	bcs.n	8990 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    8a0c:	2000      	movs	r0, #0
}
    8a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a12:	bf00      	nop
    8a14:	20000d70 	.word	0x20000d70

00008a18 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    8a18:	4b06      	ldr	r3, [pc, #24]	; (8a34 <SEGGER_RTT_HasDataUp+0x1c>)
    8a1a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8a1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    8a22:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    8a24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8a28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8a2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    8a2e:	1a80      	subs	r0, r0, r2
    8a30:	4770      	bx	lr
    8a32:	bf00      	nop
    8a34:	20000d70 	.word	0x20000d70

00008a38 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    8a38:	4b03      	ldr	r3, [pc, #12]	; (8a48 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    8a3a:	e000      	b.n	8a3e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    8a3c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    8a3e:	4a03      	ldr	r2, [pc, #12]	; (8a4c <z_device_state_init+0x14>)
    8a40:	4293      	cmp	r3, r2
    8a42:	d3fb      	bcc.n	8a3c <z_device_state_init+0x4>
	}
}
    8a44:	4770      	bx	lr
    8a46:	bf00      	nop
    8a48:	0000d254 	.word	0x0000d254
    8a4c:	0000d2e4 	.word	0x0000d2e4

00008a50 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    8a50:	b570      	push	{r4, r5, r6, lr}
    8a52:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8a54:	4b11      	ldr	r3, [pc, #68]	; (8a9c <z_sys_init_run_level+0x4c>)
    8a56:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8a5a:	e009      	b.n	8a70 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    8a5c:	4240      	negs	r0, r0
    8a5e:	e017      	b.n	8a90 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    8a60:	68eb      	ldr	r3, [r5, #12]
    8a62:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    8a64:	68ea      	ldr	r2, [r5, #12]
    8a66:	7853      	ldrb	r3, [r2, #1]
    8a68:	f043 0301 	orr.w	r3, r3, #1
    8a6c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8a6e:	3408      	adds	r4, #8
    8a70:	1c73      	adds	r3, r6, #1
    8a72:	4a0a      	ldr	r2, [pc, #40]	; (8a9c <z_sys_init_run_level+0x4c>)
    8a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a78:	42a3      	cmp	r3, r4
    8a7a:	d90d      	bls.n	8a98 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    8a7c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    8a7e:	6823      	ldr	r3, [r4, #0]
    8a80:	4628      	mov	r0, r5
    8a82:	4798      	blx	r3
		if (dev != NULL) {
    8a84:	2d00      	cmp	r5, #0
    8a86:	d0f2      	beq.n	8a6e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    8a88:	2800      	cmp	r0, #0
    8a8a:	d0eb      	beq.n	8a64 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    8a8c:	2800      	cmp	r0, #0
    8a8e:	dbe5      	blt.n	8a5c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    8a90:	28ff      	cmp	r0, #255	; 0xff
    8a92:	dde5      	ble.n	8a60 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    8a94:	20ff      	movs	r0, #255	; 0xff
    8a96:	e7e3      	b.n	8a60 <z_sys_init_run_level+0x10>
		}
	}
}
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	bf00      	nop
    8a9c:	0000f3bc 	.word	0x0000f3bc

00008aa0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    8aa0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    8aa2:	4605      	mov	r5, r0
    8aa4:	b328      	cbz	r0, 8af2 <z_impl_device_get_binding+0x52>
    8aa6:	7803      	ldrb	r3, [r0, #0]
    8aa8:	b32b      	cbz	r3, 8af6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    8aaa:	4c14      	ldr	r4, [pc, #80]	; (8afc <z_impl_device_get_binding+0x5c>)
    8aac:	e000      	b.n	8ab0 <z_impl_device_get_binding+0x10>
    8aae:	3418      	adds	r4, #24
    8ab0:	4b13      	ldr	r3, [pc, #76]	; (8b00 <z_impl_device_get_binding+0x60>)
    8ab2:	429c      	cmp	r4, r3
    8ab4:	d008      	beq.n	8ac8 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    8ab6:	4620      	mov	r0, r4
    8ab8:	f004 fa70 	bl	cf9c <z_device_is_ready>
    8abc:	2800      	cmp	r0, #0
    8abe:	d0f6      	beq.n	8aae <z_impl_device_get_binding+0xe>
    8ac0:	6823      	ldr	r3, [r4, #0]
    8ac2:	42ab      	cmp	r3, r5
    8ac4:	d1f3      	bne.n	8aae <z_impl_device_get_binding+0xe>
    8ac6:	e012      	b.n	8aee <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    8ac8:	4c0c      	ldr	r4, [pc, #48]	; (8afc <z_impl_device_get_binding+0x5c>)
    8aca:	e000      	b.n	8ace <z_impl_device_get_binding+0x2e>
    8acc:	3418      	adds	r4, #24
    8ace:	4b0c      	ldr	r3, [pc, #48]	; (8b00 <z_impl_device_get_binding+0x60>)
    8ad0:	429c      	cmp	r4, r3
    8ad2:	d00b      	beq.n	8aec <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8ad4:	4620      	mov	r0, r4
    8ad6:	f004 fa61 	bl	cf9c <z_device_is_ready>
    8ada:	2800      	cmp	r0, #0
    8adc:	d0f6      	beq.n	8acc <z_impl_device_get_binding+0x2c>
    8ade:	6821      	ldr	r1, [r4, #0]
    8ae0:	4628      	mov	r0, r5
    8ae2:	f003 fd58 	bl	c596 <strcmp>
    8ae6:	2800      	cmp	r0, #0
    8ae8:	d1f0      	bne.n	8acc <z_impl_device_get_binding+0x2c>
    8aea:	e000      	b.n	8aee <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    8aec:	2400      	movs	r4, #0
}
    8aee:	4620      	mov	r0, r4
    8af0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8af2:	4604      	mov	r4, r0
    8af4:	e7fb      	b.n	8aee <z_impl_device_get_binding+0x4e>
    8af6:	2400      	movs	r4, #0
    8af8:	e7f9      	b.n	8aee <z_impl_device_get_binding+0x4e>
    8afa:	bf00      	nop
    8afc:	0000d254 	.word	0x0000d254
    8b00:	0000d2e4 	.word	0x0000d2e4

00008b04 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    8b04:	2804      	cmp	r0, #4
    8b06:	d80c      	bhi.n	8b22 <reason_to_str+0x1e>
    8b08:	e8df f000 	tbb	[pc, r0]
    8b0c:	07050d03 	.word	0x07050d03
    8b10:	09          	.byte	0x09
    8b11:	00          	.byte	0x00
    8b12:	4806      	ldr	r0, [pc, #24]	; (8b2c <reason_to_str+0x28>)
    8b14:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    8b16:	4806      	ldr	r0, [pc, #24]	; (8b30 <reason_to_str+0x2c>)
    8b18:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    8b1a:	4806      	ldr	r0, [pc, #24]	; (8b34 <reason_to_str+0x30>)
    8b1c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    8b1e:	4806      	ldr	r0, [pc, #24]	; (8b38 <reason_to_str+0x34>)
    8b20:	4770      	bx	lr
	default:
		return "Unknown error";
    8b22:	4806      	ldr	r0, [pc, #24]	; (8b3c <reason_to_str+0x38>)
    8b24:	4770      	bx	lr
		return "Unhandled interrupt";
    8b26:	4806      	ldr	r0, [pc, #24]	; (8b40 <reason_to_str+0x3c>)
	}
}
    8b28:	4770      	bx	lr
    8b2a:	bf00      	nop
    8b2c:	0000f424 	.word	0x0000f424
    8b30:	0000f3f8 	.word	0x0000f3f8
    8b34:	0000f408 	.word	0x0000f408
    8b38:	0000f414 	.word	0x0000f414
    8b3c:	0000f3d4 	.word	0x0000f3d4
    8b40:	0000f3e4 	.word	0x0000f3e4

00008b44 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8b44:	b130      	cbz	r0, 8b54 <thread_name_get+0x10>
{
    8b46:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8b48:	f004 fa8a 	bl	d060 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    8b4c:	b120      	cbz	r0, 8b58 <thread_name_get+0x14>
    8b4e:	7803      	ldrb	r3, [r0, #0]
    8b50:	b123      	cbz	r3, 8b5c <thread_name_get+0x18>
}
    8b52:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    8b54:	4802      	ldr	r0, [pc, #8]	; (8b60 <thread_name_get+0x1c>)
}
    8b56:	4770      	bx	lr
		thread_name = "unknown";
    8b58:	4801      	ldr	r0, [pc, #4]	; (8b60 <thread_name_get+0x1c>)
    8b5a:	e7fa      	b.n	8b52 <thread_name_get+0xe>
    8b5c:	4800      	ldr	r0, [pc, #0]	; (8b60 <thread_name_get+0x1c>)
	return thread_name;
    8b5e:	e7f8      	b.n	8b52 <thread_name_get+0xe>
    8b60:	0000f434 	.word	0x0000f434

00008b64 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b66:	b087      	sub	sp, #28
    8b68:	4604      	mov	r4, r0
    8b6a:	460e      	mov	r6, r1
	__asm__ volatile(
    8b6c:	f04f 0320 	mov.w	r3, #32
    8b70:	f3ef 8711 	mrs	r7, BASEPRI
    8b74:	f383 8812 	msr	BASEPRI_MAX, r3
    8b78:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8b7c:	f002 fa2a 	bl	afd4 <z_impl_z_current_get>
    8b80:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8b82:	4620      	mov	r0, r4
    8b84:	f7ff ffbe 	bl	8b04 <reason_to_str>
    8b88:	2300      	movs	r3, #0
    8b8a:	9305      	str	r3, [sp, #20]
    8b8c:	9004      	str	r0, [sp, #16]
    8b8e:	9403      	str	r4, [sp, #12]
    8b90:	4a22      	ldr	r2, [pc, #136]	; (8c1c <z_fatal_error+0xb8>)
    8b92:	9202      	str	r2, [sp, #8]
    8b94:	9301      	str	r3, [sp, #4]
    8b96:	9300      	str	r3, [sp, #0]
    8b98:	2201      	movs	r2, #1
    8b9a:	4921      	ldr	r1, [pc, #132]	; (8c20 <z_fatal_error+0xbc>)
    8b9c:	4618      	mov	r0, r3
    8b9e:	f004 fa0a 	bl	cfb6 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    8ba2:	b11e      	cbz	r6, 8bac <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    8ba4:	69f3      	ldr	r3, [r6, #28]
    8ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8baa:	b9eb      	cbnz	r3, 8be8 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8bac:	4628      	mov	r0, r5
    8bae:	f7ff ffc9 	bl	8b44 <thread_name_get>
    8bb2:	9004      	str	r0, [sp, #16]
    8bb4:	9503      	str	r5, [sp, #12]
    8bb6:	4b1b      	ldr	r3, [pc, #108]	; (8c24 <z_fatal_error+0xc0>)
    8bb8:	9302      	str	r3, [sp, #8]
    8bba:	2000      	movs	r0, #0
    8bbc:	9001      	str	r0, [sp, #4]
    8bbe:	9000      	str	r0, [sp, #0]
    8bc0:	4603      	mov	r3, r0
    8bc2:	2201      	movs	r2, #1
    8bc4:	4916      	ldr	r1, [pc, #88]	; (8c20 <z_fatal_error+0xbc>)
    8bc6:	f004 f9f6 	bl	cfb6 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8bca:	4631      	mov	r1, r6
    8bcc:	4620      	mov	r0, r4
    8bce:	f7fe fba3 	bl	7318 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8bd2:	2c04      	cmp	r4, #4
    8bd4:	d013      	beq.n	8bfe <z_fatal_error+0x9a>
	__asm__ volatile(
    8bd6:	f387 8811 	msr	BASEPRI, r7
    8bda:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8bde:	4628      	mov	r0, r5
    8be0:	f7fc f9f4 	bl	4fcc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8be4:	b007      	add	sp, #28
    8be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    8be8:	4b0f      	ldr	r3, [pc, #60]	; (8c28 <z_fatal_error+0xc4>)
    8bea:	9302      	str	r3, [sp, #8]
    8bec:	2000      	movs	r0, #0
    8bee:	9001      	str	r0, [sp, #4]
    8bf0:	9000      	str	r0, [sp, #0]
    8bf2:	4603      	mov	r3, r0
    8bf4:	2201      	movs	r2, #1
    8bf6:	490a      	ldr	r1, [pc, #40]	; (8c20 <z_fatal_error+0xbc>)
    8bf8:	f004 f9dd 	bl	cfb6 <z_log_msg2_runtime_create>
    8bfc:	e7d6      	b.n	8bac <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8bfe:	4c0b      	ldr	r4, [pc, #44]	; (8c2c <z_fatal_error+0xc8>)
    8c00:	238f      	movs	r3, #143	; 0x8f
    8c02:	4622      	mov	r2, r4
    8c04:	490a      	ldr	r1, [pc, #40]	; (8c30 <z_fatal_error+0xcc>)
    8c06:	480b      	ldr	r0, [pc, #44]	; (8c34 <z_fatal_error+0xd0>)
    8c08:	f003 fb38 	bl	c27c <assert_print>
    8c0c:	480a      	ldr	r0, [pc, #40]	; (8c38 <z_fatal_error+0xd4>)
    8c0e:	f003 fb35 	bl	c27c <assert_print>
    8c12:	218f      	movs	r1, #143	; 0x8f
    8c14:	4620      	mov	r0, r4
    8c16:	f003 fb2a 	bl	c26e <assert_post_action>
    8c1a:	e7dc      	b.n	8bd6 <z_fatal_error+0x72>
    8c1c:	0000f43c 	.word	0x0000f43c
    8c20:	0000d494 	.word	0x0000d494
    8c24:	0000f488 	.word	0x0000f488
    8c28:	0000f464 	.word	0x0000f464
    8c2c:	0000f4a0 	.word	0x0000f4a0
    8c30:	0000f4c4 	.word	0x0000f4c4
    8c34:	0000d63c 	.word	0x0000d63c
    8c38:	0000f4e4 	.word	0x0000f4e4

00008c3c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    8c3c:	b510      	push	{r4, lr}
    8c3e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    8c40:	4c11      	ldr	r4, [pc, #68]	; (8c88 <init_idle_thread+0x4c>)
    8c42:	23b0      	movs	r3, #176	; 0xb0
    8c44:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8c48:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8c4c:	4b0f      	ldr	r3, [pc, #60]	; (8c8c <init_idle_thread+0x50>)
    8c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    8c52:	4a0f      	ldr	r2, [pc, #60]	; (8c90 <init_idle_thread+0x54>)
    8c54:	9205      	str	r2, [sp, #20]
    8c56:	2201      	movs	r2, #1
    8c58:	9204      	str	r2, [sp, #16]
    8c5a:	220f      	movs	r2, #15
    8c5c:	9203      	str	r2, [sp, #12]
    8c5e:	2200      	movs	r2, #0
    8c60:	9202      	str	r2, [sp, #8]
    8c62:	9201      	str	r2, [sp, #4]
    8c64:	9300      	str	r3, [sp, #0]
    8c66:	4b0b      	ldr	r3, [pc, #44]	; (8c94 <init_idle_thread+0x58>)
    8c68:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8c6c:	490a      	ldr	r1, [pc, #40]	; (8c98 <init_idle_thread+0x5c>)
    8c6e:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    8c72:	fb0c 1100 	mla	r1, ip, r0, r1
    8c76:	4620      	mov	r0, r4
    8c78:	f000 fa76 	bl	9168 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8c7c:	7b63      	ldrb	r3, [r4, #13]
    8c7e:	f023 0304 	bic.w	r3, r3, #4
    8c82:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    8c84:	b006      	add	sp, #24
    8c86:	bd10      	pop	{r4, pc}
    8c88:	20000540 	.word	0x20000540
    8c8c:	20001228 	.word	0x20001228
    8c90:	0000f51c 	.word	0x0000f51c
    8c94:	0000947d 	.word	0x0000947d
    8c98:	20002900 	.word	0x20002900

00008c9c <bg_thread_main>:
{
    8c9c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8c9e:	4b0a      	ldr	r3, [pc, #40]	; (8cc8 <bg_thread_main+0x2c>)
    8ca0:	2201      	movs	r2, #1
    8ca2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8ca4:	2002      	movs	r0, #2
    8ca6:	f7ff fed3 	bl	8a50 <z_sys_init_run_level>
	boot_banner();
    8caa:	f002 fedb 	bl	ba64 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8cae:	2003      	movs	r0, #3
    8cb0:	f7ff fece 	bl	8a50 <z_sys_init_run_level>
	z_init_static_threads();
    8cb4:	f000 fb68 	bl	9388 <z_init_static_threads>
	main();
    8cb8:	f7f8 feea 	bl	1a90 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8cbc:	4a03      	ldr	r2, [pc, #12]	; (8ccc <bg_thread_main+0x30>)
    8cbe:	7b13      	ldrb	r3, [r2, #12]
    8cc0:	f023 0301 	bic.w	r3, r3, #1
    8cc4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8cc6:	bd08      	pop	{r3, pc}
    8cc8:	2000145a 	.word	0x2000145a
    8ccc:	200005f0 	.word	0x200005f0

00008cd0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    8cd0:	b508      	push	{r3, lr}
    8cd2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8cd4:	4a01      	ldr	r2, [pc, #4]	; (8cdc <switch_to_main_thread+0xc>)
    8cd6:	4802      	ldr	r0, [pc, #8]	; (8ce0 <switch_to_main_thread+0x10>)
    8cd8:	f7fb fd34 	bl	4744 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8cdc:	00008c9d 	.word	0x00008c9d
    8ce0:	200005f0 	.word	0x200005f0

00008ce4 <z_bss_zero>:
{
    8ce4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8ce6:	4803      	ldr	r0, [pc, #12]	; (8cf4 <z_bss_zero+0x10>)
    8ce8:	4a03      	ldr	r2, [pc, #12]	; (8cf8 <z_bss_zero+0x14>)
    8cea:	1a12      	subs	r2, r2, r0
    8cec:	2100      	movs	r1, #0
    8cee:	f004 f971 	bl	cfd4 <z_early_memset>
}
    8cf2:	bd08      	pop	{r3, pc}
    8cf4:	20000260 	.word	0x20000260
    8cf8:	2000145c 	.word	0x2000145c

00008cfc <z_init_cpu>:
{
    8cfc:	b510      	push	{r4, lr}
    8cfe:	4604      	mov	r4, r0
	init_idle_thread(id);
    8d00:	f7ff ff9c 	bl	8c3c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8d04:	490b      	ldr	r1, [pc, #44]	; (8d34 <z_init_cpu+0x38>)
    8d06:	23b0      	movs	r3, #176	; 0xb0
    8d08:	fb03 1104 	mla	r1, r3, r4, r1
    8d0c:	4a0a      	ldr	r2, [pc, #40]	; (8d38 <z_init_cpu+0x3c>)
    8d0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    8d12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8d16:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    8d18:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8d1a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    8d1e:	4b07      	ldr	r3, [pc, #28]	; (8d3c <z_init_cpu+0x40>)
    8d20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8d24:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    8d28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8d2c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    8d30:	6063      	str	r3, [r4, #4]
}
    8d32:	bd10      	pop	{r4, pc}
    8d34:	20000540 	.word	0x20000540
    8d38:	20001228 	.word	0x20001228
    8d3c:	20002a60 	.word	0x20002a60

00008d40 <prepare_multithreading>:
{
    8d40:	b570      	push	{r4, r5, r6, lr}
    8d42:	b086      	sub	sp, #24
	z_sched_init();
    8d44:	f001 ff82 	bl	ac4c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    8d48:	4d10      	ldr	r5, [pc, #64]	; (8d8c <prepare_multithreading+0x4c>)
    8d4a:	4b11      	ldr	r3, [pc, #68]	; (8d90 <prepare_multithreading+0x50>)
    8d4c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8d4e:	4b11      	ldr	r3, [pc, #68]	; (8d94 <prepare_multithreading+0x54>)
    8d50:	9305      	str	r3, [sp, #20]
    8d52:	2301      	movs	r3, #1
    8d54:	9304      	str	r3, [sp, #16]
    8d56:	2400      	movs	r4, #0
    8d58:	9403      	str	r4, [sp, #12]
    8d5a:	9402      	str	r4, [sp, #8]
    8d5c:	9401      	str	r4, [sp, #4]
    8d5e:	9400      	str	r4, [sp, #0]
    8d60:	4b0d      	ldr	r3, [pc, #52]	; (8d98 <prepare_multithreading+0x58>)
    8d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8d66:	490d      	ldr	r1, [pc, #52]	; (8d9c <prepare_multithreading+0x5c>)
    8d68:	4628      	mov	r0, r5
    8d6a:	f000 f9fd 	bl	9168 <z_setup_new_thread>
    8d6e:	4606      	mov	r6, r0
    8d70:	7b6b      	ldrb	r3, [r5, #13]
    8d72:	f023 0304 	bic.w	r3, r3, #4
    8d76:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    8d78:	4628      	mov	r0, r5
    8d7a:	f001 fa33 	bl	a1e4 <z_ready_thread>
	z_init_cpu(0);
    8d7e:	4620      	mov	r0, r4
    8d80:	f7ff ffbc 	bl	8cfc <z_init_cpu>
}
    8d84:	4630      	mov	r0, r6
    8d86:	b006      	add	sp, #24
    8d88:	bd70      	pop	{r4, r5, r6, pc}
    8d8a:	bf00      	nop
    8d8c:	200005f0 	.word	0x200005f0
    8d90:	20001228 	.word	0x20001228
    8d94:	0000f524 	.word	0x0000f524
    8d98:	00008c9d 	.word	0x00008c9d
    8d9c:	200024e0 	.word	0x200024e0

00008da0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8da0:	b500      	push	{lr}
    8da2:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8da4:	4b1f      	ldr	r3, [pc, #124]	; (8e24 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8da6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    8daa:	4c1f      	ldr	r4, [pc, #124]	; (8e28 <z_cstart+0x88>)
    8dac:	6963      	ldr	r3, [r4, #20]
    8dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8db2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8db4:	23e0      	movs	r3, #224	; 0xe0
    8db6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    8dba:	2500      	movs	r5, #0
    8dbc:	77e5      	strb	r5, [r4, #31]
    8dbe:	7625      	strb	r5, [r4, #24]
    8dc0:	7665      	strb	r5, [r4, #25]
    8dc2:	76a5      	strb	r5, [r4, #26]
    8dc4:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8dca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8dce:	6263      	str	r3, [r4, #36]	; 0x24
    8dd0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8dd4:	f7fc f866 	bl	4ea4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8dd8:	f7fb fb38 	bl	444c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8de0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8de2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8de4:	f7fc fa12 	bl	520c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8de8:	f7fc f90a 	bl	5000 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8dec:	f7fa fc5a 	bl	36a4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    8df0:	2401      	movs	r4, #1
    8df2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    8df6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    8dfa:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    8dfc:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    8dfe:	4668      	mov	r0, sp
    8e00:	f002 fe2a 	bl	ba58 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    8e04:	4b09      	ldr	r3, [pc, #36]	; (8e2c <z_cstart+0x8c>)
    8e06:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8e0a:	f7ff fe15 	bl	8a38 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8e0e:	4628      	mov	r0, r5
    8e10:	f7ff fe1e 	bl	8a50 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8e14:	4620      	mov	r0, r4
    8e16:	f7ff fe1b 	bl	8a50 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    8e1a:	f7ff ff91 	bl	8d40 <prepare_multithreading>
    8e1e:	f7ff ff57 	bl	8cd0 <switch_to_main_thread>
    8e22:	bf00      	nop
    8e24:	20003280 	.word	0x20003280
    8e28:	e000ed00 	.word	0xe000ed00
    8e2c:	20001228 	.word	0x20001228

00008e30 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8e30:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8e32:	4c10      	ldr	r4, [pc, #64]	; (8e74 <init_mem_slab_module+0x44>)
	int rc = 0;
    8e34:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8e36:	e008      	b.n	8e4a <init_mem_slab_module+0x1a>
    8e38:	4b0f      	ldr	r3, [pc, #60]	; (8e78 <init_mem_slab_module+0x48>)
    8e3a:	429c      	cmp	r4, r3
    8e3c:	d217      	bcs.n	8e6e <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    8e3e:	4620      	mov	r0, r4
    8e40:	f004 f8d0 	bl	cfe4 <create_free_list>
		if (rc < 0) {
    8e44:	1e05      	subs	r5, r0, #0
    8e46:	db12      	blt.n	8e6e <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8e48:	3420      	adds	r4, #32
    8e4a:	4b0b      	ldr	r3, [pc, #44]	; (8e78 <init_mem_slab_module+0x48>)
    8e4c:	429c      	cmp	r4, r3
    8e4e:	d9f3      	bls.n	8e38 <init_mem_slab_module+0x8>
    8e50:	4e0a      	ldr	r6, [pc, #40]	; (8e7c <init_mem_slab_module+0x4c>)
    8e52:	233d      	movs	r3, #61	; 0x3d
    8e54:	4632      	mov	r2, r6
    8e56:	490a      	ldr	r1, [pc, #40]	; (8e80 <init_mem_slab_module+0x50>)
    8e58:	480a      	ldr	r0, [pc, #40]	; (8e84 <init_mem_slab_module+0x54>)
    8e5a:	f003 fa0f 	bl	c27c <assert_print>
    8e5e:	480a      	ldr	r0, [pc, #40]	; (8e88 <init_mem_slab_module+0x58>)
    8e60:	f003 fa0c 	bl	c27c <assert_print>
    8e64:	213d      	movs	r1, #61	; 0x3d
    8e66:	4630      	mov	r0, r6
    8e68:	f003 fa01 	bl	c26e <assert_post_action>
    8e6c:	e7e4      	b.n	8e38 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    8e6e:	4628      	mov	r0, r5
    8e70:	bd70      	pop	{r4, r5, r6, pc}
    8e72:	bf00      	nop
    8e74:	200001f8 	.word	0x200001f8
    8e78:	200001f8 	.word	0x200001f8
    8e7c:	0000f530 	.word	0x0000f530
    8e80:	0000f558 	.word	0x0000f558
    8e84:	0000d63c 	.word	0x0000d63c
    8e88:	0000f578 	.word	0x0000f578

00008e8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e90:	b082      	sub	sp, #8
    8e92:	4604      	mov	r4, r0
    8e94:	460e      	mov	r6, r1
    8e96:	4690      	mov	r8, r2
    8e98:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8e9a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    8e9e:	f04f 0320 	mov.w	r3, #32
    8ea2:	f3ef 8711 	mrs	r7, BASEPRI
    8ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    8eaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8eae:	4628      	mov	r0, r5
    8eb0:	f000 f8d8 	bl	9064 <z_spin_lock_valid>
    8eb4:	b1c0      	cbz	r0, 8ee8 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    8eb6:	4628      	mov	r0, r5
    8eb8:	f000 f8f4 	bl	90a4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8ebc:	69a1      	ldr	r1, [r4, #24]
    8ebe:	b321      	cbz	r1, 8f0a <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    8ec0:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    8ec2:	69a3      	ldr	r3, [r4, #24]
    8ec4:	681b      	ldr	r3, [r3, #0]
    8ec6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    8ec8:	69e3      	ldr	r3, [r4, #28]
    8eca:	3301      	adds	r3, #1
    8ecc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8ece:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ed0:	4628      	mov	r0, r5
    8ed2:	f000 f8d7 	bl	9084 <z_spin_unlock_valid>
    8ed6:	b388      	cbz	r0, 8f3c <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    8ed8:	f387 8811 	msr	BASEPRI, r7
    8edc:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    8ee0:	4620      	mov	r0, r4
    8ee2:	b002      	add	sp, #8
    8ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ee8:	f8df a070 	ldr.w	sl, [pc, #112]	; 8f5c <k_mem_slab_alloc+0xd0>
    8eec:	238e      	movs	r3, #142	; 0x8e
    8eee:	4652      	mov	r2, sl
    8ef0:	491b      	ldr	r1, [pc, #108]	; (8f60 <k_mem_slab_alloc+0xd4>)
    8ef2:	481c      	ldr	r0, [pc, #112]	; (8f64 <k_mem_slab_alloc+0xd8>)
    8ef4:	f003 f9c2 	bl	c27c <assert_print>
    8ef8:	4629      	mov	r1, r5
    8efa:	481b      	ldr	r0, [pc, #108]	; (8f68 <k_mem_slab_alloc+0xdc>)
    8efc:	f003 f9be 	bl	c27c <assert_print>
    8f00:	218e      	movs	r1, #142	; 0x8e
    8f02:	4650      	mov	r0, sl
    8f04:	f003 f9b3 	bl	c26e <assert_post_action>
    8f08:	e7d5      	b.n	8eb6 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8f0a:	ea59 0308 	orrs.w	r3, r9, r8
    8f0e:	d104      	bne.n	8f1a <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    8f10:	2300      	movs	r3, #0
    8f12:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    8f14:	f06f 040b 	mvn.w	r4, #11
    8f18:	e7da      	b.n	8ed0 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8f1a:	f8cd 8000 	str.w	r8, [sp]
    8f1e:	f8cd 9004 	str.w	r9, [sp, #4]
    8f22:	4622      	mov	r2, r4
    8f24:	4639      	mov	r1, r7
    8f26:	4628      	mov	r0, r5
    8f28:	f001 fb90 	bl	a64c <z_pend_curr>
		if (result == 0) {
    8f2c:	4604      	mov	r4, r0
    8f2e:	2800      	cmp	r0, #0
    8f30:	d1d6      	bne.n	8ee0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8f32:	4b0e      	ldr	r3, [pc, #56]	; (8f6c <k_mem_slab_alloc+0xe0>)
    8f34:	689b      	ldr	r3, [r3, #8]
    8f36:	695b      	ldr	r3, [r3, #20]
    8f38:	6033      	str	r3, [r6, #0]
		return result;
    8f3a:	e7d1      	b.n	8ee0 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f3c:	4e07      	ldr	r6, [pc, #28]	; (8f5c <k_mem_slab_alloc+0xd0>)
    8f3e:	23b9      	movs	r3, #185	; 0xb9
    8f40:	4632      	mov	r2, r6
    8f42:	490b      	ldr	r1, [pc, #44]	; (8f70 <k_mem_slab_alloc+0xe4>)
    8f44:	4807      	ldr	r0, [pc, #28]	; (8f64 <k_mem_slab_alloc+0xd8>)
    8f46:	f003 f999 	bl	c27c <assert_print>
    8f4a:	4629      	mov	r1, r5
    8f4c:	4809      	ldr	r0, [pc, #36]	; (8f74 <k_mem_slab_alloc+0xe8>)
    8f4e:	f003 f995 	bl	c27c <assert_print>
    8f52:	21b9      	movs	r1, #185	; 0xb9
    8f54:	4630      	mov	r0, r6
    8f56:	f003 f98a 	bl	c26e <assert_post_action>
    8f5a:	e7bd      	b.n	8ed8 <k_mem_slab_alloc+0x4c>
    8f5c:	0000dfbc 	.word	0x0000dfbc
    8f60:	0000e01c 	.word	0x0000e01c
    8f64:	0000d63c 	.word	0x0000d63c
    8f68:	0000e034 	.word	0x0000e034
    8f6c:	20001228 	.word	0x20001228
    8f70:	0000dfec 	.word	0x0000dfec
    8f74:	0000e004 	.word	0x0000e004

00008f78 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f7c:	4604      	mov	r4, r0
    8f7e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8f80:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    8f84:	f04f 0320 	mov.w	r3, #32
    8f88:	f3ef 8711 	mrs	r7, BASEPRI
    8f8c:	f383 8812 	msr	BASEPRI_MAX, r3
    8f90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f94:	4630      	mov	r0, r6
    8f96:	f000 f865 	bl	9064 <z_spin_lock_valid>
    8f9a:	b1b0      	cbz	r0, 8fca <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    8f9c:	4630      	mov	r0, r6
    8f9e:	f000 f881 	bl	90a4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8fa2:	69a3      	ldr	r3, [r4, #24]
    8fa4:	b313      	cbz	r3, 8fec <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    8fa6:	682b      	ldr	r3, [r5, #0]
    8fa8:	69a2      	ldr	r2, [r4, #24]
    8faa:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8fac:	682b      	ldr	r3, [r5, #0]
    8fae:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8fb0:	69e3      	ldr	r3, [r4, #28]
    8fb2:	3b01      	subs	r3, #1
    8fb4:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8fb6:	4630      	mov	r0, r6
    8fb8:	f000 f864 	bl	9084 <z_spin_unlock_valid>
    8fbc:	b338      	cbz	r0, 900e <k_mem_slab_free+0x96>
	__asm__ volatile(
    8fbe:	f387 8811 	msr	BASEPRI, r7
    8fc2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8fca:	f8df 8064 	ldr.w	r8, [pc, #100]	; 9030 <k_mem_slab_free+0xb8>
    8fce:	238e      	movs	r3, #142	; 0x8e
    8fd0:	4642      	mov	r2, r8
    8fd2:	4918      	ldr	r1, [pc, #96]	; (9034 <k_mem_slab_free+0xbc>)
    8fd4:	4818      	ldr	r0, [pc, #96]	; (9038 <k_mem_slab_free+0xc0>)
    8fd6:	f003 f951 	bl	c27c <assert_print>
    8fda:	4631      	mov	r1, r6
    8fdc:	4817      	ldr	r0, [pc, #92]	; (903c <k_mem_slab_free+0xc4>)
    8fde:	f003 f94d 	bl	c27c <assert_print>
    8fe2:	218e      	movs	r1, #142	; 0x8e
    8fe4:	4640      	mov	r0, r8
    8fe6:	f003 f942 	bl	c26e <assert_post_action>
    8fea:	e7d7      	b.n	8f9c <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8fec:	4620      	mov	r0, r4
    8fee:	f001 fdc9 	bl	ab84 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8ff2:	2800      	cmp	r0, #0
    8ff4:	d0d7      	beq.n	8fa6 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8ff6:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8ff8:	2100      	movs	r1, #0
    8ffa:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8ffe:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    9000:	f001 f8f0 	bl	a1e4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9004:	4639      	mov	r1, r7
    9006:	4630      	mov	r0, r6
    9008:	f000 fe48 	bl	9c9c <z_reschedule>
			return;
    900c:	e7db      	b.n	8fc6 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    900e:	4c08      	ldr	r4, [pc, #32]	; (9030 <k_mem_slab_free+0xb8>)
    9010:	23b9      	movs	r3, #185	; 0xb9
    9012:	4622      	mov	r2, r4
    9014:	490a      	ldr	r1, [pc, #40]	; (9040 <k_mem_slab_free+0xc8>)
    9016:	4808      	ldr	r0, [pc, #32]	; (9038 <k_mem_slab_free+0xc0>)
    9018:	f003 f930 	bl	c27c <assert_print>
    901c:	4631      	mov	r1, r6
    901e:	4809      	ldr	r0, [pc, #36]	; (9044 <k_mem_slab_free+0xcc>)
    9020:	f003 f92c 	bl	c27c <assert_print>
    9024:	21b9      	movs	r1, #185	; 0xb9
    9026:	4620      	mov	r0, r4
    9028:	f003 f921 	bl	c26e <assert_post_action>
    902c:	e7c7      	b.n	8fbe <k_mem_slab_free+0x46>
    902e:	bf00      	nop
    9030:	0000dfbc 	.word	0x0000dfbc
    9034:	0000e01c 	.word	0x0000e01c
    9038:	0000d63c 	.word	0x0000d63c
    903c:	0000e034 	.word	0x0000e034
    9040:	0000dfec 	.word	0x0000dfec
    9044:	0000e004 	.word	0x0000e004

00009048 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    9048:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    904a:	ea53 0102 	orrs.w	r1, r3, r2
    904e:	d102      	bne.n	9056 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    9050:	f004 f808 	bl	d064 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    9054:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9056:	4902      	ldr	r1, [pc, #8]	; (9060 <schedule_new_thread+0x18>)
    9058:	3018      	adds	r0, #24
    905a:	f002 f8c5 	bl	b1e8 <z_add_timeout>
    905e:	e7f9      	b.n	9054 <schedule_new_thread+0xc>
    9060:	0000a3f1 	.word	0x0000a3f1

00009064 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    9064:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    9066:	b13b      	cbz	r3, 9078 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    9068:	f003 0303 	and.w	r3, r3, #3
    906c:	4a04      	ldr	r2, [pc, #16]	; (9080 <z_spin_lock_valid+0x1c>)
    906e:	7d12      	ldrb	r2, [r2, #20]
    9070:	4293      	cmp	r3, r2
    9072:	d003      	beq.n	907c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    9074:	2001      	movs	r0, #1
    9076:	4770      	bx	lr
    9078:	2001      	movs	r0, #1
    907a:	4770      	bx	lr
			return false;
    907c:	2000      	movs	r0, #0
}
    907e:	4770      	bx	lr
    9080:	20001228 	.word	0x20001228

00009084 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    9084:	6801      	ldr	r1, [r0, #0]
    9086:	4a06      	ldr	r2, [pc, #24]	; (90a0 <z_spin_unlock_valid+0x1c>)
    9088:	7d13      	ldrb	r3, [r2, #20]
    908a:	6892      	ldr	r2, [r2, #8]
    908c:	4313      	orrs	r3, r2
    908e:	4299      	cmp	r1, r3
    9090:	d103      	bne.n	909a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    9092:	2300      	movs	r3, #0
    9094:	6003      	str	r3, [r0, #0]
	return true;
    9096:	2001      	movs	r0, #1
    9098:	4770      	bx	lr
		return false;
    909a:	2000      	movs	r0, #0
}
    909c:	4770      	bx	lr
    909e:	bf00      	nop
    90a0:	20001228 	.word	0x20001228

000090a4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    90a4:	4a02      	ldr	r2, [pc, #8]	; (90b0 <z_spin_lock_set_owner+0xc>)
    90a6:	7d13      	ldrb	r3, [r2, #20]
    90a8:	6892      	ldr	r2, [r2, #8]
    90aa:	4313      	orrs	r3, r2
    90ac:	6003      	str	r3, [r0, #0]
}
    90ae:	4770      	bx	lr
    90b0:	20001228 	.word	0x20001228

000090b4 <z_thread_monitor_exit>:
{
    90b4:	b570      	push	{r4, r5, r6, lr}
    90b6:	4604      	mov	r4, r0
	__asm__ volatile(
    90b8:	f04f 0320 	mov.w	r3, #32
    90bc:	f3ef 8511 	mrs	r5, BASEPRI
    90c0:	f383 8812 	msr	BASEPRI_MAX, r3
    90c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90c8:	481f      	ldr	r0, [pc, #124]	; (9148 <z_thread_monitor_exit+0x94>)
    90ca:	f7ff ffcb 	bl	9064 <z_spin_lock_valid>
    90ce:	b150      	cbz	r0, 90e6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    90d0:	481d      	ldr	r0, [pc, #116]	; (9148 <z_thread_monitor_exit+0x94>)
    90d2:	f7ff ffe7 	bl	90a4 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    90d6:	4b1d      	ldr	r3, [pc, #116]	; (914c <z_thread_monitor_exit+0x98>)
    90d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90da:	42a3      	cmp	r3, r4
    90dc:	d114      	bne.n	9108 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    90de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    90e0:	4b1a      	ldr	r3, [pc, #104]	; (914c <z_thread_monitor_exit+0x98>)
    90e2:	629a      	str	r2, [r3, #40]	; 0x28
    90e4:	e017      	b.n	9116 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90e6:	4e1a      	ldr	r6, [pc, #104]	; (9150 <z_thread_monitor_exit+0x9c>)
    90e8:	238e      	movs	r3, #142	; 0x8e
    90ea:	4632      	mov	r2, r6
    90ec:	4919      	ldr	r1, [pc, #100]	; (9154 <z_thread_monitor_exit+0xa0>)
    90ee:	481a      	ldr	r0, [pc, #104]	; (9158 <z_thread_monitor_exit+0xa4>)
    90f0:	f003 f8c4 	bl	c27c <assert_print>
    90f4:	4914      	ldr	r1, [pc, #80]	; (9148 <z_thread_monitor_exit+0x94>)
    90f6:	4819      	ldr	r0, [pc, #100]	; (915c <z_thread_monitor_exit+0xa8>)
    90f8:	f003 f8c0 	bl	c27c <assert_print>
    90fc:	218e      	movs	r1, #142	; 0x8e
    90fe:	4630      	mov	r0, r6
    9100:	f003 f8b5 	bl	c26e <assert_post_action>
    9104:	e7e4      	b.n	90d0 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    9106:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    9108:	b113      	cbz	r3, 9110 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    910a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    910c:	42a2      	cmp	r2, r4
    910e:	d1fa      	bne.n	9106 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    9110:	b10b      	cbz	r3, 9116 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    9112:	6f22      	ldr	r2, [r4, #112]	; 0x70
    9114:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9116:	480c      	ldr	r0, [pc, #48]	; (9148 <z_thread_monitor_exit+0x94>)
    9118:	f7ff ffb4 	bl	9084 <z_spin_unlock_valid>
    911c:	b120      	cbz	r0, 9128 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    911e:	f385 8811 	msr	BASEPRI, r5
    9122:	f3bf 8f6f 	isb	sy
}
    9126:	bd70      	pop	{r4, r5, r6, pc}
    9128:	4c09      	ldr	r4, [pc, #36]	; (9150 <z_thread_monitor_exit+0x9c>)
    912a:	23b9      	movs	r3, #185	; 0xb9
    912c:	4622      	mov	r2, r4
    912e:	490c      	ldr	r1, [pc, #48]	; (9160 <z_thread_monitor_exit+0xac>)
    9130:	4809      	ldr	r0, [pc, #36]	; (9158 <z_thread_monitor_exit+0xa4>)
    9132:	f003 f8a3 	bl	c27c <assert_print>
    9136:	4904      	ldr	r1, [pc, #16]	; (9148 <z_thread_monitor_exit+0x94>)
    9138:	480a      	ldr	r0, [pc, #40]	; (9164 <z_thread_monitor_exit+0xb0>)
    913a:	f003 f89f 	bl	c27c <assert_print>
    913e:	21b9      	movs	r1, #185	; 0xb9
    9140:	4620      	mov	r0, r4
    9142:	f003 f894 	bl	c26e <assert_post_action>
    9146:	e7ea      	b.n	911e <z_thread_monitor_exit+0x6a>
    9148:	20001254 	.word	0x20001254
    914c:	20001228 	.word	0x20001228
    9150:	0000dfbc 	.word	0x0000dfbc
    9154:	0000e01c 	.word	0x0000e01c
    9158:	0000d63c 	.word	0x0000d63c
    915c:	0000e034 	.word	0x0000e034
    9160:	0000dfec 	.word	0x0000dfec
    9164:	0000e004 	.word	0x0000e004

00009168 <z_setup_new_thread>:
{
    9168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    916c:	b085      	sub	sp, #20
    916e:	4604      	mov	r4, r0
    9170:	460e      	mov	r6, r1
    9172:	4690      	mov	r8, r2
    9174:	461d      	mov	r5, r3
    9176:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    917a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    917e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    9180:	2f0f      	cmp	r7, #15
    9182:	d05e      	beq.n	9242 <z_setup_new_thread+0xda>
    9184:	f107 0310 	add.w	r3, r7, #16
    9188:	2b1e      	cmp	r3, #30
    918a:	d85e      	bhi.n	924a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    918c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    9190:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    9192:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    9194:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9196:	2204      	movs	r2, #4
    9198:	4639      	mov	r1, r7
    919a:	4620      	mov	r0, r4
    919c:	f003 ff66 	bl	d06c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    91a0:	4642      	mov	r2, r8
    91a2:	4631      	mov	r1, r6
    91a4:	4620      	mov	r0, r4
    91a6:	f003 ff43 	bl	d030 <setup_thread_stack>
    91aa:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    91ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    91ae:	9302      	str	r3, [sp, #8]
    91b0:	f8cd a004 	str.w	sl, [sp, #4]
    91b4:	f8cd b000 	str.w	fp, [sp]
    91b8:	462b      	mov	r3, r5
    91ba:	4602      	mov	r2, r0
    91bc:	4631      	mov	r1, r6
    91be:	4620      	mov	r0, r4
    91c0:	f7fb fa76 	bl	46b0 <arch_new_thread>
	new_thread->init_data = NULL;
    91c4:	2300      	movs	r3, #0
    91c6:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    91c8:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    91ca:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    91ce:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    91d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    91d4:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    91d6:	f04f 0320 	mov.w	r3, #32
    91da:	f3ef 8611 	mrs	r6, BASEPRI
    91de:	f383 8812 	msr	BASEPRI_MAX, r3
    91e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91e6:	4837      	ldr	r0, [pc, #220]	; (92c4 <z_setup_new_thread+0x15c>)
    91e8:	f7ff ff3c 	bl	9064 <z_spin_lock_valid>
    91ec:	2800      	cmp	r0, #0
    91ee:	d042      	beq.n	9276 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    91f0:	4d34      	ldr	r5, [pc, #208]	; (92c4 <z_setup_new_thread+0x15c>)
    91f2:	4628      	mov	r0, r5
    91f4:	f7ff ff56 	bl	90a4 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    91f8:	4b33      	ldr	r3, [pc, #204]	; (92c8 <z_setup_new_thread+0x160>)
    91fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    91fc:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    91fe:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9200:	4628      	mov	r0, r5
    9202:	f7ff ff3f 	bl	9084 <z_spin_unlock_valid>
    9206:	2800      	cmp	r0, #0
    9208:	d045      	beq.n	9296 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    920a:	f386 8811 	msr	BASEPRI, r6
    920e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    9212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9214:	2b00      	cmp	r3, #0
    9216:	d04e      	beq.n	92b6 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    9218:	221f      	movs	r2, #31
    921a:	4619      	mov	r1, r3
    921c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    9220:	f003 f98c 	bl	c53c <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    9224:	2300      	movs	r3, #0
    9226:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    922a:	4b27      	ldr	r3, [pc, #156]	; (92c8 <z_setup_new_thread+0x160>)
    922c:	689b      	ldr	r3, [r3, #8]
    922e:	2b00      	cmp	r3, #0
    9230:	d045      	beq.n	92be <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    9232:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9236:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    923a:	4638      	mov	r0, r7
    923c:	b005      	add	sp, #20
    923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    9242:	4b22      	ldr	r3, [pc, #136]	; (92cc <z_setup_new_thread+0x164>)
    9244:	429d      	cmp	r5, r3
    9246:	d19d      	bne.n	9184 <z_setup_new_thread+0x1c>
    9248:	e7a0      	b.n	918c <z_setup_new_thread+0x24>
    924a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 92d0 <z_setup_new_thread+0x168>
    924e:	f240 13ff 	movw	r3, #511	; 0x1ff
    9252:	464a      	mov	r2, r9
    9254:	491f      	ldr	r1, [pc, #124]	; (92d4 <z_setup_new_thread+0x16c>)
    9256:	4820      	ldr	r0, [pc, #128]	; (92d8 <z_setup_new_thread+0x170>)
    9258:	f003 f810 	bl	c27c <assert_print>
    925c:	f06f 030f 	mvn.w	r3, #15
    9260:	220e      	movs	r2, #14
    9262:	4639      	mov	r1, r7
    9264:	481d      	ldr	r0, [pc, #116]	; (92dc <z_setup_new_thread+0x174>)
    9266:	f003 f809 	bl	c27c <assert_print>
    926a:	f240 11ff 	movw	r1, #511	; 0x1ff
    926e:	4648      	mov	r0, r9
    9270:	f002 fffd 	bl	c26e <assert_post_action>
    9274:	e78a      	b.n	918c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9276:	4d1a      	ldr	r5, [pc, #104]	; (92e0 <z_setup_new_thread+0x178>)
    9278:	238e      	movs	r3, #142	; 0x8e
    927a:	462a      	mov	r2, r5
    927c:	4919      	ldr	r1, [pc, #100]	; (92e4 <z_setup_new_thread+0x17c>)
    927e:	4816      	ldr	r0, [pc, #88]	; (92d8 <z_setup_new_thread+0x170>)
    9280:	f002 fffc 	bl	c27c <assert_print>
    9284:	490f      	ldr	r1, [pc, #60]	; (92c4 <z_setup_new_thread+0x15c>)
    9286:	4818      	ldr	r0, [pc, #96]	; (92e8 <z_setup_new_thread+0x180>)
    9288:	f002 fff8 	bl	c27c <assert_print>
    928c:	218e      	movs	r1, #142	; 0x8e
    928e:	4628      	mov	r0, r5
    9290:	f002 ffed 	bl	c26e <assert_post_action>
    9294:	e7ac      	b.n	91f0 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9296:	4d12      	ldr	r5, [pc, #72]	; (92e0 <z_setup_new_thread+0x178>)
    9298:	23b9      	movs	r3, #185	; 0xb9
    929a:	462a      	mov	r2, r5
    929c:	4913      	ldr	r1, [pc, #76]	; (92ec <z_setup_new_thread+0x184>)
    929e:	480e      	ldr	r0, [pc, #56]	; (92d8 <z_setup_new_thread+0x170>)
    92a0:	f002 ffec 	bl	c27c <assert_print>
    92a4:	4907      	ldr	r1, [pc, #28]	; (92c4 <z_setup_new_thread+0x15c>)
    92a6:	4812      	ldr	r0, [pc, #72]	; (92f0 <z_setup_new_thread+0x188>)
    92a8:	f002 ffe8 	bl	c27c <assert_print>
    92ac:	21b9      	movs	r1, #185	; 0xb9
    92ae:	4628      	mov	r0, r5
    92b0:	f002 ffdd 	bl	c26e <assert_post_action>
    92b4:	e7a9      	b.n	920a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    92b6:	2300      	movs	r3, #0
    92b8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    92bc:	e7b5      	b.n	922a <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    92be:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    92c2:	e7ba      	b.n	923a <z_setup_new_thread+0xd2>
    92c4:	20001254 	.word	0x20001254
    92c8:	20001228 	.word	0x20001228
    92cc:	0000947d 	.word	0x0000947d
    92d0:	0000f598 	.word	0x0000f598
    92d4:	0000f5f0 	.word	0x0000f5f0
    92d8:	0000d63c 	.word	0x0000d63c
    92dc:	0000f670 	.word	0x0000f670
    92e0:	0000dfbc 	.word	0x0000dfbc
    92e4:	0000e01c 	.word	0x0000e01c
    92e8:	0000e034 	.word	0x0000e034
    92ec:	0000dfec 	.word	0x0000dfec
    92f0:	0000e004 	.word	0x0000e004

000092f4 <z_impl_k_thread_create>:
{
    92f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92f8:	b086      	sub	sp, #24
    92fa:	4604      	mov	r4, r0
    92fc:	460d      	mov	r5, r1
    92fe:	4616      	mov	r6, r2
    9300:	461f      	mov	r7, r3
    9302:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    9306:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    930a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    930e:	b9db      	cbnz	r3, 9348 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9310:	2300      	movs	r3, #0
    9312:	9305      	str	r3, [sp, #20]
    9314:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9316:	9304      	str	r3, [sp, #16]
    9318:	9b11      	ldr	r3, [sp, #68]	; 0x44
    931a:	9303      	str	r3, [sp, #12]
    931c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    931e:	9302      	str	r3, [sp, #8]
    9320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9322:	9301      	str	r3, [sp, #4]
    9324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9326:	9300      	str	r3, [sp, #0]
    9328:	463b      	mov	r3, r7
    932a:	4632      	mov	r2, r6
    932c:	4629      	mov	r1, r5
    932e:	4620      	mov	r0, r4
    9330:	f7ff ff1a 	bl	9168 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    9334:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9338:	bf08      	it	eq
    933a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    933e:	d115      	bne.n	936c <z_impl_k_thread_create+0x78>
}
    9340:	4620      	mov	r0, r4
    9342:	b006      	add	sp, #24
    9344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    9348:	f8df a02c 	ldr.w	sl, [pc, #44]	; 9378 <z_impl_k_thread_create+0x84>
    934c:	f240 236e 	movw	r3, #622	; 0x26e
    9350:	4652      	mov	r2, sl
    9352:	490a      	ldr	r1, [pc, #40]	; (937c <z_impl_k_thread_create+0x88>)
    9354:	480a      	ldr	r0, [pc, #40]	; (9380 <z_impl_k_thread_create+0x8c>)
    9356:	f002 ff91 	bl	c27c <assert_print>
    935a:	480a      	ldr	r0, [pc, #40]	; (9384 <z_impl_k_thread_create+0x90>)
    935c:	f002 ff8e 	bl	c27c <assert_print>
    9360:	f240 216e 	movw	r1, #622	; 0x26e
    9364:	4650      	mov	r0, sl
    9366:	f002 ff82 	bl	c26e <assert_post_action>
    936a:	e7d1      	b.n	9310 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    936c:	464a      	mov	r2, r9
    936e:	4643      	mov	r3, r8
    9370:	4620      	mov	r0, r4
    9372:	f7ff fe69 	bl	9048 <schedule_new_thread>
    9376:	e7e3      	b.n	9340 <z_impl_k_thread_create+0x4c>
    9378:	0000f598 	.word	0x0000f598
    937c:	0000f6a4 	.word	0x0000f6a4
    9380:	0000d63c 	.word	0x0000d63c
    9384:	0000f6b8 	.word	0x0000f6b8

00009388 <z_init_static_threads>:
{
    9388:	b530      	push	{r4, r5, lr}
    938a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    938c:	4c35      	ldr	r4, [pc, #212]	; (9464 <z_init_static_threads+0xdc>)
    938e:	e017      	b.n	93c0 <z_init_static_threads+0x38>
    9390:	4b35      	ldr	r3, [pc, #212]	; (9468 <z_init_static_threads+0xe0>)
    9392:	429c      	cmp	r4, r3
    9394:	d228      	bcs.n	93e8 <z_init_static_threads+0x60>
		z_setup_new_thread(
    9396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9398:	9305      	str	r3, [sp, #20]
    939a:	6a23      	ldr	r3, [r4, #32]
    939c:	9304      	str	r3, [sp, #16]
    939e:	69e3      	ldr	r3, [r4, #28]
    93a0:	9303      	str	r3, [sp, #12]
    93a2:	69a3      	ldr	r3, [r4, #24]
    93a4:	9302      	str	r3, [sp, #8]
    93a6:	6963      	ldr	r3, [r4, #20]
    93a8:	9301      	str	r3, [sp, #4]
    93aa:	6923      	ldr	r3, [r4, #16]
    93ac:	9300      	str	r3, [sp, #0]
    93ae:	68e3      	ldr	r3, [r4, #12]
    93b0:	68a2      	ldr	r2, [r4, #8]
    93b2:	6861      	ldr	r1, [r4, #4]
    93b4:	6820      	ldr	r0, [r4, #0]
    93b6:	f7ff fed7 	bl	9168 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    93ba:	6823      	ldr	r3, [r4, #0]
    93bc:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    93be:	3430      	adds	r4, #48	; 0x30
    93c0:	4b29      	ldr	r3, [pc, #164]	; (9468 <z_init_static_threads+0xe0>)
    93c2:	429c      	cmp	r4, r3
    93c4:	d9e4      	bls.n	9390 <z_init_static_threads+0x8>
    93c6:	4d29      	ldr	r5, [pc, #164]	; (946c <z_init_static_threads+0xe4>)
    93c8:	f240 23d5 	movw	r3, #725	; 0x2d5
    93cc:	462a      	mov	r2, r5
    93ce:	4928      	ldr	r1, [pc, #160]	; (9470 <z_init_static_threads+0xe8>)
    93d0:	4828      	ldr	r0, [pc, #160]	; (9474 <z_init_static_threads+0xec>)
    93d2:	f002 ff53 	bl	c27c <assert_print>
    93d6:	4828      	ldr	r0, [pc, #160]	; (9478 <z_init_static_threads+0xf0>)
    93d8:	f002 ff50 	bl	c27c <assert_print>
    93dc:	f240 21d5 	movw	r1, #725	; 0x2d5
    93e0:	4628      	mov	r0, r5
    93e2:	f002 ff44 	bl	c26e <assert_post_action>
    93e6:	e7d3      	b.n	9390 <z_init_static_threads+0x8>
	k_sched_lock();
    93e8:	f000 fca6 	bl	9d38 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    93ec:	4c1d      	ldr	r4, [pc, #116]	; (9464 <z_init_static_threads+0xdc>)
    93ee:	e000      	b.n	93f2 <z_init_static_threads+0x6a>
    93f0:	3430      	adds	r4, #48	; 0x30
    93f2:	4b1d      	ldr	r3, [pc, #116]	; (9468 <z_init_static_threads+0xe0>)
    93f4:	429c      	cmp	r4, r3
    93f6:	d81f      	bhi.n	9438 <z_init_static_threads+0xb0>
    93f8:	4b1b      	ldr	r3, [pc, #108]	; (9468 <z_init_static_threads+0xe0>)
    93fa:	429c      	cmp	r4, r3
    93fc:	d22d      	bcs.n	945a <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    93fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9404:	d0f4      	beq.n	93f0 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    9406:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    9408:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    940c:	17c1      	asrs	r1, r0, #31
    940e:	03c9      	lsls	r1, r1, #15
    9410:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    9414:	03c0      	lsls	r0, r0, #15
    9416:	f240 33e7 	movw	r3, #999	; 0x3e7
    941a:	18c0      	adds	r0, r0, r3
    941c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9420:	f04f 0300 	mov.w	r3, #0
    9424:	f141 0100 	adc.w	r1, r1, #0
    9428:	f7f7 f84c 	bl	4c4 <__aeabi_uldivmod>
    942c:	4602      	mov	r2, r0
    942e:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    9430:	4628      	mov	r0, r5
    9432:	f7ff fe09 	bl	9048 <schedule_new_thread>
    9436:	e7db      	b.n	93f0 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    9438:	4d0c      	ldr	r5, [pc, #48]	; (946c <z_init_static_threads+0xe4>)
    943a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    943e:	462a      	mov	r2, r5
    9440:	490b      	ldr	r1, [pc, #44]	; (9470 <z_init_static_threads+0xe8>)
    9442:	480c      	ldr	r0, [pc, #48]	; (9474 <z_init_static_threads+0xec>)
    9444:	f002 ff1a 	bl	c27c <assert_print>
    9448:	480b      	ldr	r0, [pc, #44]	; (9478 <z_init_static_threads+0xf0>)
    944a:	f002 ff17 	bl	c27c <assert_print>
    944e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    9452:	4628      	mov	r0, r5
    9454:	f002 ff0b 	bl	c26e <assert_post_action>
    9458:	e7ce      	b.n	93f8 <z_init_static_threads+0x70>
	k_sched_unlock();
    945a:	f001 fa51 	bl	a900 <k_sched_unlock>
}
    945e:	b007      	add	sp, #28
    9460:	bd30      	pop	{r4, r5, pc}
    9462:	bf00      	nop
    9464:	200001f8 	.word	0x200001f8
    9468:	200001f8 	.word	0x200001f8
    946c:	0000f598 	.word	0x0000f598
    9470:	0000f6e0 	.word	0x0000f6e0
    9474:	0000d63c 	.word	0x0000d63c
    9478:	0000f578 	.word	0x0000f578

0000947c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    947c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    947e:	4b14      	ldr	r3, [pc, #80]	; (94d0 <idle+0x54>)
    9480:	689b      	ldr	r3, [r3, #8]
    9482:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9486:	2b00      	cmp	r3, #0
    9488:	da0d      	bge.n	94a6 <idle+0x2a>
    948a:	4c12      	ldr	r4, [pc, #72]	; (94d4 <idle+0x58>)
    948c:	2327      	movs	r3, #39	; 0x27
    948e:	4622      	mov	r2, r4
    9490:	4911      	ldr	r1, [pc, #68]	; (94d8 <idle+0x5c>)
    9492:	4812      	ldr	r0, [pc, #72]	; (94dc <idle+0x60>)
    9494:	f002 fef2 	bl	c27c <assert_print>
    9498:	2127      	movs	r1, #39	; 0x27
    949a:	4620      	mov	r0, r4
    949c:	f002 fee7 	bl	c26e <assert_post_action>
    94a0:	e001      	b.n	94a6 <idle+0x2a>
	arch_cpu_idle();
    94a2:	f7fa ffd9 	bl	4458 <arch_cpu_idle>
	__asm__ volatile(
    94a6:	f04f 0220 	mov.w	r2, #32
    94aa:	f3ef 8311 	mrs	r3, BASEPRI
    94ae:	f382 8812 	msr	BASEPRI_MAX, r2
    94b2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    94b6:	f001 ffd5 	bl	b464 <z_get_next_timeout_expiry>
    94ba:	4b05      	ldr	r3, [pc, #20]	; (94d0 <idle+0x54>)
    94bc:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    94be:	4b08      	ldr	r3, [pc, #32]	; (94e0 <idle+0x64>)
    94c0:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    94c2:	2b00      	cmp	r3, #0
    94c4:	d0ed      	beq.n	94a2 <idle+0x26>
    94c6:	f7fa fd93 	bl	3ff0 <pm_system_suspend>
    94ca:	2800      	cmp	r0, #0
    94cc:	d1eb      	bne.n	94a6 <idle+0x2a>
    94ce:	e7e8      	b.n	94a2 <idle+0x26>
    94d0:	20001228 	.word	0x20001228
    94d4:	0000f710 	.word	0x0000f710
    94d8:	0000f734 	.word	0x0000f734
    94dc:	0000d63c 	.word	0x0000d63c
    94e0:	2000145a 	.word	0x2000145a

000094e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    94e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    94e8:	b083      	sub	sp, #12
    94ea:	4604      	mov	r4, r0
    94ec:	4616      	mov	r6, r2
    94ee:	461d      	mov	r5, r3
    94f0:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    94f4:	2900      	cmp	r1, #0
    94f6:	d12b      	bne.n	9550 <z_impl_k_mutex_lock+0x6c>
    94f8:	f04f 0320 	mov.w	r3, #32
    94fc:	f3ef 8711 	mrs	r7, BASEPRI
    9500:	f383 8812 	msr	BASEPRI_MAX, r3
    9504:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9508:	487b      	ldr	r0, [pc, #492]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    950a:	f7ff fdab 	bl	9064 <z_spin_lock_valid>
    950e:	2800      	cmp	r0, #0
    9510:	d02d      	beq.n	956e <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    9512:	4879      	ldr	r0, [pc, #484]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9514:	f7ff fdc6 	bl	90a4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9518:	68e1      	ldr	r1, [r4, #12]
    951a:	2900      	cmp	r1, #0
    951c:	d138      	bne.n	9590 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    951e:	2900      	cmp	r1, #0
    9520:	d17d      	bne.n	961e <z_impl_k_mutex_lock+0x13a>
    9522:	4b76      	ldr	r3, [pc, #472]	; (96fc <z_impl_k_mutex_lock+0x218>)
    9524:	689b      	ldr	r3, [r3, #8]
    9526:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    952a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    952c:	3101      	adds	r1, #1
    952e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    9530:	4b72      	ldr	r3, [pc, #456]	; (96fc <z_impl_k_mutex_lock+0x218>)
    9532:	689b      	ldr	r3, [r3, #8]
    9534:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9536:	4870      	ldr	r0, [pc, #448]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9538:	f7ff fda4 	bl	9084 <z_spin_unlock_valid>
    953c:	2800      	cmp	r0, #0
    953e:	d070      	beq.n	9622 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    9540:	f387 8811 	msr	BASEPRI, r7
    9544:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    9548:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    954a:	b003      	add	sp, #12
    954c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9550:	4f6b      	ldr	r7, [pc, #428]	; (9700 <z_impl_k_mutex_lock+0x21c>)
    9552:	2365      	movs	r3, #101	; 0x65
    9554:	463a      	mov	r2, r7
    9556:	496b      	ldr	r1, [pc, #428]	; (9704 <z_impl_k_mutex_lock+0x220>)
    9558:	486b      	ldr	r0, [pc, #428]	; (9708 <z_impl_k_mutex_lock+0x224>)
    955a:	f002 fe8f 	bl	c27c <assert_print>
    955e:	486b      	ldr	r0, [pc, #428]	; (970c <z_impl_k_mutex_lock+0x228>)
    9560:	f002 fe8c 	bl	c27c <assert_print>
    9564:	2165      	movs	r1, #101	; 0x65
    9566:	4638      	mov	r0, r7
    9568:	f002 fe81 	bl	c26e <assert_post_action>
    956c:	e7c4      	b.n	94f8 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    956e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 9710 <z_impl_k_mutex_lock+0x22c>
    9572:	238e      	movs	r3, #142	; 0x8e
    9574:	4642      	mov	r2, r8
    9576:	4967      	ldr	r1, [pc, #412]	; (9714 <z_impl_k_mutex_lock+0x230>)
    9578:	4863      	ldr	r0, [pc, #396]	; (9708 <z_impl_k_mutex_lock+0x224>)
    957a:	f002 fe7f 	bl	c27c <assert_print>
    957e:	495e      	ldr	r1, [pc, #376]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9580:	4865      	ldr	r0, [pc, #404]	; (9718 <z_impl_k_mutex_lock+0x234>)
    9582:	f002 fe7b 	bl	c27c <assert_print>
    9586:	218e      	movs	r1, #142	; 0x8e
    9588:	4640      	mov	r0, r8
    958a:	f002 fe70 	bl	c26e <assert_post_action>
    958e:	e7c0      	b.n	9512 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9590:	68a2      	ldr	r2, [r4, #8]
    9592:	4b5a      	ldr	r3, [pc, #360]	; (96fc <z_impl_k_mutex_lock+0x218>)
    9594:	689b      	ldr	r3, [r3, #8]
    9596:	429a      	cmp	r2, r3
    9598:	d0c1      	beq.n	951e <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    959a:	ea55 0106 	orrs.w	r1, r5, r6
    959e:	bf0c      	ite	eq
    95a0:	f04f 0801 	moveq.w	r8, #1
    95a4:	f04f 0800 	movne.w	r8, #0
    95a8:	d04b      	beq.n	9642 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    95aa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    95ae:	4649      	mov	r1, r9
    95b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    95b4:	f003 fd6b 	bl	d08e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    95b8:	4581      	cmp	r9, r0
    95ba:	dc5d      	bgt.n	9678 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    95bc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    95c0:	9600      	str	r6, [sp, #0]
    95c2:	9501      	str	r5, [sp, #4]
    95c4:	4622      	mov	r2, r4
    95c6:	4639      	mov	r1, r7
    95c8:	484b      	ldr	r0, [pc, #300]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    95ca:	f001 f83f 	bl	a64c <z_pend_curr>
	if (got_mutex == 0) {
    95ce:	2800      	cmp	r0, #0
    95d0:	d0bb      	beq.n	954a <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    95d2:	f04f 0320 	mov.w	r3, #32
    95d6:	f3ef 8511 	mrs	r5, BASEPRI
    95da:	f383 8812 	msr	BASEPRI_MAX, r3
    95de:	f3bf 8f6f 	isb	sy
    95e2:	4845      	ldr	r0, [pc, #276]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    95e4:	f7ff fd3e 	bl	9064 <z_spin_lock_valid>
    95e8:	2800      	cmp	r0, #0
    95ea:	d04b      	beq.n	9684 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    95ec:	4842      	ldr	r0, [pc, #264]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    95ee:	f7ff fd59 	bl	90a4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    95f2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95f4:	42a3      	cmp	r3, r4
    95f6:	d055      	beq.n	96a4 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    95f8:	2b00      	cmp	r3, #0
    95fa:	d053      	beq.n	96a4 <z_impl_k_mutex_lock+0x1c0>
    95fc:	6921      	ldr	r1, [r4, #16]
    95fe:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9602:	f003 fd44 	bl	d08e <new_prio_for_inheritance>
    9606:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    9608:	4620      	mov	r0, r4
    960a:	f003 fd4b 	bl	d0a4 <adjust_owner_prio>
    960e:	2800      	cmp	r0, #0
    9610:	d14a      	bne.n	96a8 <z_impl_k_mutex_lock+0x1c4>
    9612:	f1b9 0f00 	cmp.w	r9, #0
    9616:	d049      	beq.n	96ac <z_impl_k_mutex_lock+0x1c8>
    9618:	f04f 0801 	mov.w	r8, #1
    961c:	e046      	b.n	96ac <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    961e:	6923      	ldr	r3, [r4, #16]
    9620:	e783      	b.n	952a <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9622:	4c3b      	ldr	r4, [pc, #236]	; (9710 <z_impl_k_mutex_lock+0x22c>)
    9624:	23b9      	movs	r3, #185	; 0xb9
    9626:	4622      	mov	r2, r4
    9628:	493c      	ldr	r1, [pc, #240]	; (971c <z_impl_k_mutex_lock+0x238>)
    962a:	4837      	ldr	r0, [pc, #220]	; (9708 <z_impl_k_mutex_lock+0x224>)
    962c:	f002 fe26 	bl	c27c <assert_print>
    9630:	4931      	ldr	r1, [pc, #196]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9632:	483b      	ldr	r0, [pc, #236]	; (9720 <z_impl_k_mutex_lock+0x23c>)
    9634:	f002 fe22 	bl	c27c <assert_print>
    9638:	21b9      	movs	r1, #185	; 0xb9
    963a:	4620      	mov	r0, r4
    963c:	f002 fe17 	bl	c26e <assert_post_action>
    9640:	e77e      	b.n	9540 <z_impl_k_mutex_lock+0x5c>
    9642:	482d      	ldr	r0, [pc, #180]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9644:	f7ff fd1e 	bl	9084 <z_spin_unlock_valid>
    9648:	b130      	cbz	r0, 9658 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    964a:	f387 8811 	msr	BASEPRI, r7
    964e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    9652:	f06f 000f 	mvn.w	r0, #15
    9656:	e778      	b.n	954a <z_impl_k_mutex_lock+0x66>
    9658:	4c2d      	ldr	r4, [pc, #180]	; (9710 <z_impl_k_mutex_lock+0x22c>)
    965a:	23b9      	movs	r3, #185	; 0xb9
    965c:	4622      	mov	r2, r4
    965e:	492f      	ldr	r1, [pc, #188]	; (971c <z_impl_k_mutex_lock+0x238>)
    9660:	4829      	ldr	r0, [pc, #164]	; (9708 <z_impl_k_mutex_lock+0x224>)
    9662:	f002 fe0b 	bl	c27c <assert_print>
    9666:	4924      	ldr	r1, [pc, #144]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9668:	482d      	ldr	r0, [pc, #180]	; (9720 <z_impl_k_mutex_lock+0x23c>)
    966a:	f002 fe07 	bl	c27c <assert_print>
    966e:	21b9      	movs	r1, #185	; 0xb9
    9670:	4620      	mov	r0, r4
    9672:	f002 fdfc 	bl	c26e <assert_post_action>
    9676:	e7e8      	b.n	964a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    9678:	4601      	mov	r1, r0
    967a:	4620      	mov	r0, r4
    967c:	f003 fd12 	bl	d0a4 <adjust_owner_prio>
    9680:	4681      	mov	r9, r0
    9682:	e79d      	b.n	95c0 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9684:	4e22      	ldr	r6, [pc, #136]	; (9710 <z_impl_k_mutex_lock+0x22c>)
    9686:	238e      	movs	r3, #142	; 0x8e
    9688:	4632      	mov	r2, r6
    968a:	4922      	ldr	r1, [pc, #136]	; (9714 <z_impl_k_mutex_lock+0x230>)
    968c:	481e      	ldr	r0, [pc, #120]	; (9708 <z_impl_k_mutex_lock+0x224>)
    968e:	f002 fdf5 	bl	c27c <assert_print>
    9692:	4919      	ldr	r1, [pc, #100]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    9694:	4820      	ldr	r0, [pc, #128]	; (9718 <z_impl_k_mutex_lock+0x234>)
    9696:	f002 fdf1 	bl	c27c <assert_print>
    969a:	218e      	movs	r1, #142	; 0x8e
    969c:	4630      	mov	r0, r6
    969e:	f002 fde6 	bl	c26e <assert_post_action>
    96a2:	e7a3      	b.n	95ec <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    96a4:	6921      	ldr	r1, [r4, #16]
    96a6:	e7af      	b.n	9608 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    96a8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    96ac:	f1b8 0f00 	cmp.w	r8, #0
    96b0:	d006      	beq.n	96c0 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    96b2:	4629      	mov	r1, r5
    96b4:	4810      	ldr	r0, [pc, #64]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    96b6:	f000 faf1 	bl	9c9c <z_reschedule>
	return -EAGAIN;
    96ba:	f06f 000a 	mvn.w	r0, #10
    96be:	e744      	b.n	954a <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96c0:	480d      	ldr	r0, [pc, #52]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    96c2:	f7ff fcdf 	bl	9084 <z_spin_unlock_valid>
    96c6:	b130      	cbz	r0, 96d6 <z_impl_k_mutex_lock+0x1f2>
    96c8:	f385 8811 	msr	BASEPRI, r5
    96cc:	f3bf 8f6f 	isb	sy
    96d0:	f06f 000a 	mvn.w	r0, #10
    96d4:	e739      	b.n	954a <z_impl_k_mutex_lock+0x66>
    96d6:	4c0e      	ldr	r4, [pc, #56]	; (9710 <z_impl_k_mutex_lock+0x22c>)
    96d8:	23b9      	movs	r3, #185	; 0xb9
    96da:	4622      	mov	r2, r4
    96dc:	490f      	ldr	r1, [pc, #60]	; (971c <z_impl_k_mutex_lock+0x238>)
    96de:	480a      	ldr	r0, [pc, #40]	; (9708 <z_impl_k_mutex_lock+0x224>)
    96e0:	f002 fdcc 	bl	c27c <assert_print>
    96e4:	4904      	ldr	r1, [pc, #16]	; (96f8 <z_impl_k_mutex_lock+0x214>)
    96e6:	480e      	ldr	r0, [pc, #56]	; (9720 <z_impl_k_mutex_lock+0x23c>)
    96e8:	f002 fdc8 	bl	c27c <assert_print>
    96ec:	21b9      	movs	r1, #185	; 0xb9
    96ee:	4620      	mov	r0, r4
    96f0:	f002 fdbd 	bl	c26e <assert_post_action>
    96f4:	e7e8      	b.n	96c8 <z_impl_k_mutex_lock+0x1e4>
    96f6:	bf00      	nop
    96f8:	20001258 	.word	0x20001258
    96fc:	20001228 	.word	0x20001228
    9700:	0000f75c 	.word	0x0000f75c
    9704:	0000f6a4 	.word	0x0000f6a4
    9708:	0000d63c 	.word	0x0000d63c
    970c:	0000f780 	.word	0x0000f780
    9710:	0000dfbc 	.word	0x0000dfbc
    9714:	0000e01c 	.word	0x0000e01c
    9718:	0000e034 	.word	0x0000e034
    971c:	0000dfec 	.word	0x0000dfec
    9720:	0000e004 	.word	0x0000e004

00009724 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9724:	b570      	push	{r4, r5, r6, lr}
    9726:	4604      	mov	r4, r0
    9728:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    972c:	bb03      	cbnz	r3, 9770 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    972e:	68a3      	ldr	r3, [r4, #8]
    9730:	2b00      	cmp	r3, #0
    9732:	f000 80a6 	beq.w	9882 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9736:	4a56      	ldr	r2, [pc, #344]	; (9890 <z_impl_k_mutex_unlock+0x16c>)
    9738:	6892      	ldr	r2, [r2, #8]
    973a:	4293      	cmp	r3, r2
    973c:	f040 80a4 	bne.w	9888 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    9740:	68e3      	ldr	r3, [r4, #12]
    9742:	b323      	cbz	r3, 978e <z_impl_k_mutex_unlock+0x6a>
    9744:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    9748:	bb6b      	cbnz	r3, 97a6 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    974a:	4b51      	ldr	r3, [pc, #324]	; (9890 <z_impl_k_mutex_unlock+0x16c>)
    974c:	689b      	ldr	r3, [r3, #8]
    974e:	7bdb      	ldrb	r3, [r3, #15]
    9750:	2b01      	cmp	r3, #1
    9752:	d037      	beq.n	97c4 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    9754:	4b4e      	ldr	r3, [pc, #312]	; (9890 <z_impl_k_mutex_unlock+0x16c>)
    9756:	689a      	ldr	r2, [r3, #8]
    9758:	7bd3      	ldrb	r3, [r2, #15]
    975a:	3b01      	subs	r3, #1
    975c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    975e:	68e3      	ldr	r3, [r4, #12]
    9760:	2b01      	cmp	r3, #1
    9762:	d93e      	bls.n	97e2 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    9764:	3b01      	subs	r3, #1
    9766:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    9768:	f001 f8ca 	bl	a900 <k_sched_unlock>

	return 0;
    976c:	2000      	movs	r0, #0
}
    976e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9770:	4d48      	ldr	r5, [pc, #288]	; (9894 <z_impl_k_mutex_unlock+0x170>)
    9772:	23c7      	movs	r3, #199	; 0xc7
    9774:	462a      	mov	r2, r5
    9776:	4948      	ldr	r1, [pc, #288]	; (9898 <z_impl_k_mutex_unlock+0x174>)
    9778:	4848      	ldr	r0, [pc, #288]	; (989c <z_impl_k_mutex_unlock+0x178>)
    977a:	f002 fd7f 	bl	c27c <assert_print>
    977e:	4848      	ldr	r0, [pc, #288]	; (98a0 <z_impl_k_mutex_unlock+0x17c>)
    9780:	f002 fd7c 	bl	c27c <assert_print>
    9784:	21c7      	movs	r1, #199	; 0xc7
    9786:	4628      	mov	r0, r5
    9788:	f002 fd71 	bl	c26e <assert_post_action>
    978c:	e7cf      	b.n	972e <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    978e:	4d41      	ldr	r5, [pc, #260]	; (9894 <z_impl_k_mutex_unlock+0x170>)
    9790:	23df      	movs	r3, #223	; 0xdf
    9792:	462a      	mov	r2, r5
    9794:	4943      	ldr	r1, [pc, #268]	; (98a4 <z_impl_k_mutex_unlock+0x180>)
    9796:	4841      	ldr	r0, [pc, #260]	; (989c <z_impl_k_mutex_unlock+0x178>)
    9798:	f002 fd70 	bl	c27c <assert_print>
    979c:	21df      	movs	r1, #223	; 0xdf
    979e:	4628      	mov	r0, r5
    97a0:	f002 fd65 	bl	c26e <assert_post_action>
    97a4:	e7ce      	b.n	9744 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    97a6:	4d40      	ldr	r5, [pc, #256]	; (98a8 <z_impl_k_mutex_unlock+0x184>)
    97a8:	23fd      	movs	r3, #253	; 0xfd
    97aa:	462a      	mov	r2, r5
    97ac:	493a      	ldr	r1, [pc, #232]	; (9898 <z_impl_k_mutex_unlock+0x174>)
    97ae:	483b      	ldr	r0, [pc, #236]	; (989c <z_impl_k_mutex_unlock+0x178>)
    97b0:	f002 fd64 	bl	c27c <assert_print>
    97b4:	483d      	ldr	r0, [pc, #244]	; (98ac <z_impl_k_mutex_unlock+0x188>)
    97b6:	f002 fd61 	bl	c27c <assert_print>
    97ba:	21fd      	movs	r1, #253	; 0xfd
    97bc:	4628      	mov	r0, r5
    97be:	f002 fd56 	bl	c26e <assert_post_action>
    97c2:	e7c2      	b.n	974a <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    97c4:	4d38      	ldr	r5, [pc, #224]	; (98a8 <z_impl_k_mutex_unlock+0x184>)
    97c6:	23fe      	movs	r3, #254	; 0xfe
    97c8:	462a      	mov	r2, r5
    97ca:	4939      	ldr	r1, [pc, #228]	; (98b0 <z_impl_k_mutex_unlock+0x18c>)
    97cc:	4833      	ldr	r0, [pc, #204]	; (989c <z_impl_k_mutex_unlock+0x178>)
    97ce:	f002 fd55 	bl	c27c <assert_print>
    97d2:	4836      	ldr	r0, [pc, #216]	; (98ac <z_impl_k_mutex_unlock+0x188>)
    97d4:	f002 fd52 	bl	c27c <assert_print>
    97d8:	21fe      	movs	r1, #254	; 0xfe
    97da:	4628      	mov	r0, r5
    97dc:	f002 fd47 	bl	c26e <assert_post_action>
    97e0:	e7b8      	b.n	9754 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    97e2:	f04f 0320 	mov.w	r3, #32
    97e6:	f3ef 8511 	mrs	r5, BASEPRI
    97ea:	f383 8812 	msr	BASEPRI_MAX, r3
    97ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97f2:	4830      	ldr	r0, [pc, #192]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    97f4:	f7ff fc36 	bl	9064 <z_spin_lock_valid>
    97f8:	b1c0      	cbz	r0, 982c <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    97fa:	482e      	ldr	r0, [pc, #184]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    97fc:	f7ff fc52 	bl	90a4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    9800:	6921      	ldr	r1, [r4, #16]
    9802:	4620      	mov	r0, r4
    9804:	f003 fc4e 	bl	d0a4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9808:	4620      	mov	r0, r4
    980a:	f001 f9bb 	bl	ab84 <z_unpend_first_thread>
	mutex->owner = new_owner;
    980e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    9810:	b1e0      	cbz	r0, 984c <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    9812:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9816:	6123      	str	r3, [r4, #16]
    9818:	2300      	movs	r3, #0
    981a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    981e:	f000 fce1 	bl	a1e4 <z_ready_thread>
		z_reschedule(&lock, key);
    9822:	4629      	mov	r1, r5
    9824:	4823      	ldr	r0, [pc, #140]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    9826:	f000 fa39 	bl	9c9c <z_reschedule>
    982a:	e79d      	b.n	9768 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    982c:	4e22      	ldr	r6, [pc, #136]	; (98b8 <z_impl_k_mutex_unlock+0x194>)
    982e:	238e      	movs	r3, #142	; 0x8e
    9830:	4632      	mov	r2, r6
    9832:	4922      	ldr	r1, [pc, #136]	; (98bc <z_impl_k_mutex_unlock+0x198>)
    9834:	4819      	ldr	r0, [pc, #100]	; (989c <z_impl_k_mutex_unlock+0x178>)
    9836:	f002 fd21 	bl	c27c <assert_print>
    983a:	491e      	ldr	r1, [pc, #120]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    983c:	4820      	ldr	r0, [pc, #128]	; (98c0 <z_impl_k_mutex_unlock+0x19c>)
    983e:	f002 fd1d 	bl	c27c <assert_print>
    9842:	218e      	movs	r1, #142	; 0x8e
    9844:	4630      	mov	r0, r6
    9846:	f002 fd12 	bl	c26e <assert_post_action>
    984a:	e7d6      	b.n	97fa <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    984c:	2300      	movs	r3, #0
    984e:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9850:	4818      	ldr	r0, [pc, #96]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    9852:	f7ff fc17 	bl	9084 <z_spin_unlock_valid>
    9856:	b120      	cbz	r0, 9862 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    9858:	f385 8811 	msr	BASEPRI, r5
    985c:	f3bf 8f6f 	isb	sy
    9860:	e782      	b.n	9768 <z_impl_k_mutex_unlock+0x44>
    9862:	4c15      	ldr	r4, [pc, #84]	; (98b8 <z_impl_k_mutex_unlock+0x194>)
    9864:	23b9      	movs	r3, #185	; 0xb9
    9866:	4622      	mov	r2, r4
    9868:	4916      	ldr	r1, [pc, #88]	; (98c4 <z_impl_k_mutex_unlock+0x1a0>)
    986a:	480c      	ldr	r0, [pc, #48]	; (989c <z_impl_k_mutex_unlock+0x178>)
    986c:	f002 fd06 	bl	c27c <assert_print>
    9870:	4910      	ldr	r1, [pc, #64]	; (98b4 <z_impl_k_mutex_unlock+0x190>)
    9872:	4815      	ldr	r0, [pc, #84]	; (98c8 <z_impl_k_mutex_unlock+0x1a4>)
    9874:	f002 fd02 	bl	c27c <assert_print>
    9878:	21b9      	movs	r1, #185	; 0xb9
    987a:	4620      	mov	r0, r4
    987c:	f002 fcf7 	bl	c26e <assert_post_action>
    9880:	e7ea      	b.n	9858 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    9882:	f06f 0015 	mvn.w	r0, #21
    9886:	e772      	b.n	976e <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    9888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    988c:	e76f      	b.n	976e <z_impl_k_mutex_unlock+0x4a>
    988e:	bf00      	nop
    9890:	20001228 	.word	0x20001228
    9894:	0000f75c 	.word	0x0000f75c
    9898:	0000f6a4 	.word	0x0000f6a4
    989c:	0000d63c 	.word	0x0000d63c
    98a0:	0000f780 	.word	0x0000f780
    98a4:	0000f7a8 	.word	0x0000f7a8
    98a8:	0000f7c0 	.word	0x0000f7c0
    98ac:	0000f7ec 	.word	0x0000f7ec
    98b0:	0000f7f0 	.word	0x0000f7f0
    98b4:	20001258 	.word	0x20001258
    98b8:	0000dfbc 	.word	0x0000dfbc
    98bc:	0000e01c 	.word	0x0000e01c
    98c0:	0000e034 	.word	0x0000e034
    98c4:	0000dfec 	.word	0x0000dfec
    98c8:	0000e004 	.word	0x0000e004

000098cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    98cc:	b570      	push	{r4, r5, r6, lr}
    98ce:	4604      	mov	r4, r0
	__asm__ volatile(
    98d0:	f04f 0320 	mov.w	r3, #32
    98d4:	f3ef 8511 	mrs	r5, BASEPRI
    98d8:	f383 8812 	msr	BASEPRI_MAX, r3
    98dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98e0:	4817      	ldr	r0, [pc, #92]	; (9940 <z_impl_k_sem_give+0x74>)
    98e2:	f7ff fbbf 	bl	9064 <z_spin_lock_valid>
    98e6:	b180      	cbz	r0, 990a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    98e8:	4815      	ldr	r0, [pc, #84]	; (9940 <z_impl_k_sem_give+0x74>)
    98ea:	f7ff fbdb 	bl	90a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    98ee:	4620      	mov	r0, r4
    98f0:	f001 f948 	bl	ab84 <z_unpend_first_thread>

	if (thread != NULL) {
    98f4:	b1c8      	cbz	r0, 992a <z_impl_k_sem_give+0x5e>
    98f6:	2200      	movs	r2, #0
    98f8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    98fc:	f000 fc72 	bl	a1e4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    9900:	4629      	mov	r1, r5
    9902:	480f      	ldr	r0, [pc, #60]	; (9940 <z_impl_k_sem_give+0x74>)
    9904:	f000 f9ca 	bl	9c9c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9908:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    990a:	4e0e      	ldr	r6, [pc, #56]	; (9944 <z_impl_k_sem_give+0x78>)
    990c:	238e      	movs	r3, #142	; 0x8e
    990e:	4632      	mov	r2, r6
    9910:	490d      	ldr	r1, [pc, #52]	; (9948 <z_impl_k_sem_give+0x7c>)
    9912:	480e      	ldr	r0, [pc, #56]	; (994c <z_impl_k_sem_give+0x80>)
    9914:	f002 fcb2 	bl	c27c <assert_print>
    9918:	4909      	ldr	r1, [pc, #36]	; (9940 <z_impl_k_sem_give+0x74>)
    991a:	480d      	ldr	r0, [pc, #52]	; (9950 <z_impl_k_sem_give+0x84>)
    991c:	f002 fcae 	bl	c27c <assert_print>
    9920:	218e      	movs	r1, #142	; 0x8e
    9922:	4630      	mov	r0, r6
    9924:	f002 fca3 	bl	c26e <assert_post_action>
    9928:	e7de      	b.n	98e8 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    992a:	68a3      	ldr	r3, [r4, #8]
    992c:	68e2      	ldr	r2, [r4, #12]
    992e:	4293      	cmp	r3, r2
    9930:	d003      	beq.n	993a <z_impl_k_sem_give+0x6e>
    9932:	2201      	movs	r2, #1
    9934:	4413      	add	r3, r2
    9936:	60a3      	str	r3, [r4, #8]
}
    9938:	e7e2      	b.n	9900 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    993a:	2200      	movs	r2, #0
    993c:	e7fa      	b.n	9934 <z_impl_k_sem_give+0x68>
    993e:	bf00      	nop
    9940:	2000125c 	.word	0x2000125c
    9944:	0000dfbc 	.word	0x0000dfbc
    9948:	0000e01c 	.word	0x0000e01c
    994c:	0000d63c 	.word	0x0000d63c
    9950:	0000e034 	.word	0x0000e034

00009954 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    9954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9958:	b082      	sub	sp, #8
    995a:	4604      	mov	r4, r0
    995c:	4617      	mov	r7, r2
    995e:	461d      	mov	r5, r3
    9960:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    9964:	b111      	cbz	r1, 996c <z_impl_k_sem_take+0x18>
    9966:	ea55 0302 	orrs.w	r3, r5, r2
    996a:	d11f      	bne.n	99ac <z_impl_k_sem_take+0x58>
    996c:	f04f 0320 	mov.w	r3, #32
    9970:	f3ef 8611 	mrs	r6, BASEPRI
    9974:	f383 8812 	msr	BASEPRI_MAX, r3
    9978:	f3bf 8f6f 	isb	sy
    997c:	4836      	ldr	r0, [pc, #216]	; (9a58 <z_impl_k_sem_take+0x104>)
    997e:	f7ff fb71 	bl	9064 <z_spin_lock_valid>
    9982:	b310      	cbz	r0, 99ca <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    9984:	4834      	ldr	r0, [pc, #208]	; (9a58 <z_impl_k_sem_take+0x104>)
    9986:	f7ff fb8d 	bl	90a4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    998a:	68a1      	ldr	r1, [r4, #8]
    998c:	2900      	cmp	r1, #0
    998e:	d03d      	beq.n	9a0c <z_impl_k_sem_take+0xb8>
		sem->count--;
    9990:	3901      	subs	r1, #1
    9992:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9994:	4830      	ldr	r0, [pc, #192]	; (9a58 <z_impl_k_sem_take+0x104>)
    9996:	f7ff fb75 	bl	9084 <z_spin_unlock_valid>
    999a:	b338      	cbz	r0, 99ec <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    999c:	f386 8811 	msr	BASEPRI, r6
    99a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    99a4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    99a6:	b002      	add	sp, #8
    99a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    99ac:	4e2b      	ldr	r6, [pc, #172]	; (9a5c <z_impl_k_sem_take+0x108>)
    99ae:	2379      	movs	r3, #121	; 0x79
    99b0:	4632      	mov	r2, r6
    99b2:	492b      	ldr	r1, [pc, #172]	; (9a60 <z_impl_k_sem_take+0x10c>)
    99b4:	482b      	ldr	r0, [pc, #172]	; (9a64 <z_impl_k_sem_take+0x110>)
    99b6:	f002 fc61 	bl	c27c <assert_print>
    99ba:	482b      	ldr	r0, [pc, #172]	; (9a68 <z_impl_k_sem_take+0x114>)
    99bc:	f002 fc5e 	bl	c27c <assert_print>
    99c0:	2179      	movs	r1, #121	; 0x79
    99c2:	4630      	mov	r0, r6
    99c4:	f002 fc53 	bl	c26e <assert_post_action>
    99c8:	e7d0      	b.n	996c <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9a6c <z_impl_k_sem_take+0x118>
    99ce:	238e      	movs	r3, #142	; 0x8e
    99d0:	4642      	mov	r2, r8
    99d2:	4927      	ldr	r1, [pc, #156]	; (9a70 <z_impl_k_sem_take+0x11c>)
    99d4:	4823      	ldr	r0, [pc, #140]	; (9a64 <z_impl_k_sem_take+0x110>)
    99d6:	f002 fc51 	bl	c27c <assert_print>
    99da:	491f      	ldr	r1, [pc, #124]	; (9a58 <z_impl_k_sem_take+0x104>)
    99dc:	4825      	ldr	r0, [pc, #148]	; (9a74 <z_impl_k_sem_take+0x120>)
    99de:	f002 fc4d 	bl	c27c <assert_print>
    99e2:	218e      	movs	r1, #142	; 0x8e
    99e4:	4640      	mov	r0, r8
    99e6:	f002 fc42 	bl	c26e <assert_post_action>
    99ea:	e7cb      	b.n	9984 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99ec:	4c1f      	ldr	r4, [pc, #124]	; (9a6c <z_impl_k_sem_take+0x118>)
    99ee:	23b9      	movs	r3, #185	; 0xb9
    99f0:	4622      	mov	r2, r4
    99f2:	4921      	ldr	r1, [pc, #132]	; (9a78 <z_impl_k_sem_take+0x124>)
    99f4:	481b      	ldr	r0, [pc, #108]	; (9a64 <z_impl_k_sem_take+0x110>)
    99f6:	f002 fc41 	bl	c27c <assert_print>
    99fa:	4917      	ldr	r1, [pc, #92]	; (9a58 <z_impl_k_sem_take+0x104>)
    99fc:	481f      	ldr	r0, [pc, #124]	; (9a7c <z_impl_k_sem_take+0x128>)
    99fe:	f002 fc3d 	bl	c27c <assert_print>
    9a02:	21b9      	movs	r1, #185	; 0xb9
    9a04:	4620      	mov	r0, r4
    9a06:	f002 fc32 	bl	c26e <assert_post_action>
    9a0a:	e7c7      	b.n	999c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9a0c:	ea55 0307 	orrs.w	r3, r5, r7
    9a10:	d007      	beq.n	9a22 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9a12:	9700      	str	r7, [sp, #0]
    9a14:	9501      	str	r5, [sp, #4]
    9a16:	4622      	mov	r2, r4
    9a18:	4631      	mov	r1, r6
    9a1a:	480f      	ldr	r0, [pc, #60]	; (9a58 <z_impl_k_sem_take+0x104>)
    9a1c:	f000 fe16 	bl	a64c <z_pend_curr>
	return ret;
    9a20:	e7c1      	b.n	99a6 <z_impl_k_sem_take+0x52>
    9a22:	480d      	ldr	r0, [pc, #52]	; (9a58 <z_impl_k_sem_take+0x104>)
    9a24:	f7ff fb2e 	bl	9084 <z_spin_unlock_valid>
    9a28:	b130      	cbz	r0, 9a38 <z_impl_k_sem_take+0xe4>
    9a2a:	f386 8811 	msr	BASEPRI, r6
    9a2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    9a32:	f06f 000f 	mvn.w	r0, #15
    9a36:	e7b6      	b.n	99a6 <z_impl_k_sem_take+0x52>
    9a38:	4c0c      	ldr	r4, [pc, #48]	; (9a6c <z_impl_k_sem_take+0x118>)
    9a3a:	23b9      	movs	r3, #185	; 0xb9
    9a3c:	4622      	mov	r2, r4
    9a3e:	490e      	ldr	r1, [pc, #56]	; (9a78 <z_impl_k_sem_take+0x124>)
    9a40:	4808      	ldr	r0, [pc, #32]	; (9a64 <z_impl_k_sem_take+0x110>)
    9a42:	f002 fc1b 	bl	c27c <assert_print>
    9a46:	4904      	ldr	r1, [pc, #16]	; (9a58 <z_impl_k_sem_take+0x104>)
    9a48:	480c      	ldr	r0, [pc, #48]	; (9a7c <z_impl_k_sem_take+0x128>)
    9a4a:	f002 fc17 	bl	c27c <assert_print>
    9a4e:	21b9      	movs	r1, #185	; 0xb9
    9a50:	4620      	mov	r0, r4
    9a52:	f002 fc0c 	bl	c26e <assert_post_action>
    9a56:	e7e8      	b.n	9a2a <z_impl_k_sem_take+0xd6>
    9a58:	2000125c 	.word	0x2000125c
    9a5c:	0000f824 	.word	0x0000f824
    9a60:	0000f844 	.word	0x0000f844
    9a64:	0000d63c 	.word	0x0000d63c
    9a68:	0000f7ec 	.word	0x0000f7ec
    9a6c:	0000dfbc 	.word	0x0000dfbc
    9a70:	0000e01c 	.word	0x0000e01c
    9a74:	0000e034 	.word	0x0000e034
    9a78:	0000dfec 	.word	0x0000dfec
    9a7c:	0000e004 	.word	0x0000e004

00009a80 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    9a80:	b538      	push	{r3, r4, r5, lr}
    9a82:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    9a84:	6883      	ldr	r3, [r0, #8]
    9a86:	b10b      	cbz	r3, 9a8c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    9a88:	68a0      	ldr	r0, [r4, #8]
    9a8a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    9a8c:	4d06      	ldr	r5, [pc, #24]	; (9aa8 <pended_on_thread+0x28>)
    9a8e:	f240 23b9 	movw	r3, #697	; 0x2b9
    9a92:	462a      	mov	r2, r5
    9a94:	4905      	ldr	r1, [pc, #20]	; (9aac <pended_on_thread+0x2c>)
    9a96:	4806      	ldr	r0, [pc, #24]	; (9ab0 <pended_on_thread+0x30>)
    9a98:	f002 fbf0 	bl	c27c <assert_print>
    9a9c:	f240 21b9 	movw	r1, #697	; 0x2b9
    9aa0:	4628      	mov	r0, r5
    9aa2:	f002 fbe4 	bl	c26e <assert_post_action>
    9aa6:	e7ef      	b.n	9a88 <pended_on_thread+0x8>
    9aa8:	0000f894 	.word	0x0000f894
    9aac:	0000f8b8 	.word	0x0000f8b8
    9ab0:	0000d63c 	.word	0x0000d63c

00009ab4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9ab8:	bf08      	it	eq
    9aba:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9abe:	d100      	bne.n	9ac2 <add_thread_timeout+0xe>
    9ac0:	4770      	bx	lr
{
    9ac2:	b508      	push	{r3, lr}
    9ac4:	4902      	ldr	r1, [pc, #8]	; (9ad0 <add_thread_timeout+0x1c>)
    9ac6:	3018      	adds	r0, #24
    9ac8:	f001 fb8e 	bl	b1e8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    9acc:	bd08      	pop	{r3, pc}
    9ace:	bf00      	nop
    9ad0:	0000a3f1 	.word	0x0000a3f1

00009ad4 <z_reset_time_slice>:
{
    9ad4:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    9ad6:	4b07      	ldr	r3, [pc, #28]	; (9af4 <z_reset_time_slice+0x20>)
    9ad8:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    9ada:	b904      	cbnz	r4, 9ade <z_reset_time_slice+0xa>
}
    9adc:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9ade:	f7fc ff29 	bl	6934 <sys_clock_elapsed>
    9ae2:	4404      	add	r4, r0
    9ae4:	4b04      	ldr	r3, [pc, #16]	; (9af8 <z_reset_time_slice+0x24>)
    9ae6:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9ae8:	2100      	movs	r1, #0
    9aea:	4b02      	ldr	r3, [pc, #8]	; (9af4 <z_reset_time_slice+0x20>)
    9aec:	6818      	ldr	r0, [r3, #0]
    9aee:	f001 fd0b 	bl	b508 <z_set_timeout_expiry>
}
    9af2:	e7f3      	b.n	9adc <z_reset_time_slice+0x8>
    9af4:	2000126c 	.word	0x2000126c
    9af8:	20001228 	.word	0x20001228

00009afc <k_sched_time_slice_set>:
{
    9afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b00:	4604      	mov	r4, r0
    9b02:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    9b04:	2700      	movs	r7, #0
	__asm__ volatile(
    9b06:	f04f 0320 	mov.w	r3, #32
    9b0a:	f3ef 8611 	mrs	r6, BASEPRI
    9b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b16:	482a      	ldr	r0, [pc, #168]	; (9bc0 <k_sched_time_slice_set+0xc4>)
    9b18:	f7ff faa4 	bl	9064 <z_spin_lock_valid>
    9b1c:	b118      	cbz	r0, 9b26 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    9b1e:	4828      	ldr	r0, [pc, #160]	; (9bc0 <k_sched_time_slice_set+0xc4>)
    9b20:	f7ff fac0 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    9b24:	e023      	b.n	9b6e <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b26:	f8df 809c 	ldr.w	r8, [pc, #156]	; 9bc4 <k_sched_time_slice_set+0xc8>
    9b2a:	238e      	movs	r3, #142	; 0x8e
    9b2c:	4642      	mov	r2, r8
    9b2e:	4926      	ldr	r1, [pc, #152]	; (9bc8 <k_sched_time_slice_set+0xcc>)
    9b30:	4826      	ldr	r0, [pc, #152]	; (9bcc <k_sched_time_slice_set+0xd0>)
    9b32:	f002 fba3 	bl	c27c <assert_print>
    9b36:	4922      	ldr	r1, [pc, #136]	; (9bc0 <k_sched_time_slice_set+0xc4>)
    9b38:	4825      	ldr	r0, [pc, #148]	; (9bd0 <k_sched_time_slice_set+0xd4>)
    9b3a:	f002 fb9f 	bl	c27c <assert_print>
    9b3e:	218e      	movs	r1, #142	; 0x8e
    9b40:	4640      	mov	r0, r8
    9b42:	f002 fb94 	bl	c26e <assert_post_action>
    9b46:	e7ea      	b.n	9b1e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    9b48:	2802      	cmp	r0, #2
    9b4a:	bfb8      	it	lt
    9b4c:	2002      	movlt	r0, #2
    9b4e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    9b50:	4b20      	ldr	r3, [pc, #128]	; (9bd4 <k_sched_time_slice_set+0xd8>)
    9b52:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9b54:	4b20      	ldr	r3, [pc, #128]	; (9bd8 <k_sched_time_slice_set+0xdc>)
    9b56:	6898      	ldr	r0, [r3, #8]
    9b58:	f7ff ffbc 	bl	9ad4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b5c:	4818      	ldr	r0, [pc, #96]	; (9bc0 <k_sched_time_slice_set+0xc4>)
    9b5e:	f7ff fa91 	bl	9084 <z_spin_unlock_valid>
    9b62:	b1d0      	cbz	r0, 9b9a <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    9b64:	f386 8811 	msr	BASEPRI, r6
    9b68:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9b6c:	2701      	movs	r7, #1
    9b6e:	bb27      	cbnz	r7, 9bba <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    9b70:	4b19      	ldr	r3, [pc, #100]	; (9bd8 <k_sched_time_slice_set+0xdc>)
    9b72:	2200      	movs	r2, #0
    9b74:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    9b76:	0c61      	lsrs	r1, r4, #17
    9b78:	03e3      	lsls	r3, r4, #15
    9b7a:	f240 30e7 	movw	r0, #999	; 0x3e7
    9b7e:	1818      	adds	r0, r3, r0
    9b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9b84:	f04f 0300 	mov.w	r3, #0
    9b88:	f141 0100 	adc.w	r1, r1, #0
    9b8c:	f7f6 fc9a 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    9b90:	4b12      	ldr	r3, [pc, #72]	; (9bdc <k_sched_time_slice_set+0xe0>)
    9b92:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9b94:	2c00      	cmp	r4, #0
    9b96:	dcd7      	bgt.n	9b48 <k_sched_time_slice_set+0x4c>
    9b98:	e7da      	b.n	9b50 <k_sched_time_slice_set+0x54>
    9b9a:	4f0a      	ldr	r7, [pc, #40]	; (9bc4 <k_sched_time_slice_set+0xc8>)
    9b9c:	23b9      	movs	r3, #185	; 0xb9
    9b9e:	463a      	mov	r2, r7
    9ba0:	490f      	ldr	r1, [pc, #60]	; (9be0 <k_sched_time_slice_set+0xe4>)
    9ba2:	480a      	ldr	r0, [pc, #40]	; (9bcc <k_sched_time_slice_set+0xd0>)
    9ba4:	f002 fb6a 	bl	c27c <assert_print>
    9ba8:	4905      	ldr	r1, [pc, #20]	; (9bc0 <k_sched_time_slice_set+0xc4>)
    9baa:	480e      	ldr	r0, [pc, #56]	; (9be4 <k_sched_time_slice_set+0xe8>)
    9bac:	f002 fb66 	bl	c27c <assert_print>
    9bb0:	21b9      	movs	r1, #185	; 0xb9
    9bb2:	4638      	mov	r0, r7
    9bb4:	f002 fb5b 	bl	c26e <assert_post_action>
    9bb8:	e7d4      	b.n	9b64 <k_sched_time_slice_set+0x68>
}
    9bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bbe:	bf00      	nop
    9bc0:	20001264 	.word	0x20001264
    9bc4:	0000dfbc 	.word	0x0000dfbc
    9bc8:	0000e01c 	.word	0x0000e01c
    9bcc:	0000d63c 	.word	0x0000d63c
    9bd0:	0000e034 	.word	0x0000e034
    9bd4:	20001268 	.word	0x20001268
    9bd8:	20001228 	.word	0x20001228
    9bdc:	2000126c 	.word	0x2000126c
    9be0:	0000dfec 	.word	0x0000dfec
    9be4:	0000e004 	.word	0x0000e004

00009be8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    9be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bea:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9bec:	2500      	movs	r5, #0
	__asm__ volatile(
    9bee:	f04f 0320 	mov.w	r3, #32
    9bf2:	f3ef 8611 	mrs	r6, BASEPRI
    9bf6:	f383 8812 	msr	BASEPRI_MAX, r3
    9bfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bfe:	4820      	ldr	r0, [pc, #128]	; (9c80 <z_unpend_thread_no_timeout+0x98>)
    9c00:	f7ff fa30 	bl	9064 <z_spin_lock_valid>
    9c04:	b118      	cbz	r0, 9c0e <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    9c06:	481e      	ldr	r0, [pc, #120]	; (9c80 <z_unpend_thread_no_timeout+0x98>)
    9c08:	f7ff fa4c 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    9c0c:	e014      	b.n	9c38 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c0e:	4f1d      	ldr	r7, [pc, #116]	; (9c84 <z_unpend_thread_no_timeout+0x9c>)
    9c10:	238e      	movs	r3, #142	; 0x8e
    9c12:	463a      	mov	r2, r7
    9c14:	491c      	ldr	r1, [pc, #112]	; (9c88 <z_unpend_thread_no_timeout+0xa0>)
    9c16:	481d      	ldr	r0, [pc, #116]	; (9c8c <z_unpend_thread_no_timeout+0xa4>)
    9c18:	f002 fb30 	bl	c27c <assert_print>
    9c1c:	4918      	ldr	r1, [pc, #96]	; (9c80 <z_unpend_thread_no_timeout+0x98>)
    9c1e:	481c      	ldr	r0, [pc, #112]	; (9c90 <z_unpend_thread_no_timeout+0xa8>)
    9c20:	f002 fb2c 	bl	c27c <assert_print>
    9c24:	218e      	movs	r1, #142	; 0x8e
    9c26:	4638      	mov	r0, r7
    9c28:	f002 fb21 	bl	c26e <assert_post_action>
    9c2c:	e7eb      	b.n	9c06 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    9c2e:	f386 8811 	msr	BASEPRI, r6
    9c32:	f3bf 8f6f 	isb	sy
    9c36:	2501      	movs	r5, #1
    9c38:	bb05      	cbnz	r5, 9c7c <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9c3a:	4620      	mov	r0, r4
    9c3c:	f7ff ff20 	bl	9a80 <pended_on_thread>
    9c40:	4621      	mov	r1, r4
    9c42:	f000 f8fb 	bl	9e3c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9c46:	7b63      	ldrb	r3, [r4, #13]
    9c48:	f023 0302 	bic.w	r3, r3, #2
    9c4c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9c4e:	2300      	movs	r3, #0
    9c50:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c52:	480b      	ldr	r0, [pc, #44]	; (9c80 <z_unpend_thread_no_timeout+0x98>)
    9c54:	f7ff fa16 	bl	9084 <z_spin_unlock_valid>
    9c58:	2800      	cmp	r0, #0
    9c5a:	d1e8      	bne.n	9c2e <z_unpend_thread_no_timeout+0x46>
    9c5c:	4d09      	ldr	r5, [pc, #36]	; (9c84 <z_unpend_thread_no_timeout+0x9c>)
    9c5e:	23b9      	movs	r3, #185	; 0xb9
    9c60:	462a      	mov	r2, r5
    9c62:	490c      	ldr	r1, [pc, #48]	; (9c94 <z_unpend_thread_no_timeout+0xac>)
    9c64:	4809      	ldr	r0, [pc, #36]	; (9c8c <z_unpend_thread_no_timeout+0xa4>)
    9c66:	f002 fb09 	bl	c27c <assert_print>
    9c6a:	4905      	ldr	r1, [pc, #20]	; (9c80 <z_unpend_thread_no_timeout+0x98>)
    9c6c:	480a      	ldr	r0, [pc, #40]	; (9c98 <z_unpend_thread_no_timeout+0xb0>)
    9c6e:	f002 fb05 	bl	c27c <assert_print>
    9c72:	21b9      	movs	r1, #185	; 0xb9
    9c74:	4628      	mov	r0, r5
    9c76:	f002 fafa 	bl	c26e <assert_post_action>
    9c7a:	e7d8      	b.n	9c2e <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    9c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c7e:	bf00      	nop
    9c80:	20001264 	.word	0x20001264
    9c84:	0000dfbc 	.word	0x0000dfbc
    9c88:	0000e01c 	.word	0x0000e01c
    9c8c:	0000d63c 	.word	0x0000d63c
    9c90:	0000e034 	.word	0x0000e034
    9c94:	0000dfec 	.word	0x0000dfec
    9c98:	0000e004 	.word	0x0000e004

00009c9c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9c9c:	b570      	push	{r4, r5, r6, lr}
    9c9e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    9ca0:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9ca2:	b921      	cbnz	r1, 9cae <z_reschedule+0x12>
    9ca4:	f3ef 8305 	mrs	r3, IPSR
    9ca8:	b913      	cbnz	r3, 9cb0 <z_reschedule+0x14>
    9caa:	2101      	movs	r1, #1
    9cac:	e000      	b.n	9cb0 <z_reschedule+0x14>
    9cae:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    9cb0:	f011 0f01 	tst.w	r1, #1
    9cb4:	d01c      	beq.n	9cf0 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    9cb6:	4b1b      	ldr	r3, [pc, #108]	; (9d24 <z_reschedule+0x88>)
    9cb8:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    9cba:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    9cbc:	429a      	cmp	r2, r3
    9cbe:	d017      	beq.n	9cf0 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cc0:	4620      	mov	r0, r4
    9cc2:	f7ff f9df 	bl	9084 <z_spin_unlock_valid>
    9cc6:	b118      	cbz	r0, 9cd0 <z_reschedule+0x34>
	ret = arch_swap(key);
    9cc8:	4628      	mov	r0, r5
    9cca:	f7fa fc99 	bl	4600 <arch_swap>
		z_swap(lock, key);
    9cce:	e017      	b.n	9d00 <z_reschedule+0x64>
    9cd0:	4e15      	ldr	r6, [pc, #84]	; (9d28 <z_reschedule+0x8c>)
    9cd2:	23d0      	movs	r3, #208	; 0xd0
    9cd4:	4632      	mov	r2, r6
    9cd6:	4915      	ldr	r1, [pc, #84]	; (9d2c <z_reschedule+0x90>)
    9cd8:	4815      	ldr	r0, [pc, #84]	; (9d30 <z_reschedule+0x94>)
    9cda:	f002 facf 	bl	c27c <assert_print>
    9cde:	4621      	mov	r1, r4
    9ce0:	4814      	ldr	r0, [pc, #80]	; (9d34 <z_reschedule+0x98>)
    9ce2:	f002 facb 	bl	c27c <assert_print>
    9ce6:	21d0      	movs	r1, #208	; 0xd0
    9ce8:	4630      	mov	r0, r6
    9cea:	f002 fac0 	bl	c26e <assert_post_action>
    9cee:	e7eb      	b.n	9cc8 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9cf0:	4620      	mov	r0, r4
    9cf2:	f7ff f9c7 	bl	9084 <z_spin_unlock_valid>
    9cf6:	b120      	cbz	r0, 9d02 <z_reschedule+0x66>
    9cf8:	f385 8811 	msr	BASEPRI, r5
    9cfc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    9d00:	bd70      	pop	{r4, r5, r6, pc}
    9d02:	4e09      	ldr	r6, [pc, #36]	; (9d28 <z_reschedule+0x8c>)
    9d04:	23b9      	movs	r3, #185	; 0xb9
    9d06:	4632      	mov	r2, r6
    9d08:	4908      	ldr	r1, [pc, #32]	; (9d2c <z_reschedule+0x90>)
    9d0a:	4809      	ldr	r0, [pc, #36]	; (9d30 <z_reschedule+0x94>)
    9d0c:	f002 fab6 	bl	c27c <assert_print>
    9d10:	4621      	mov	r1, r4
    9d12:	4808      	ldr	r0, [pc, #32]	; (9d34 <z_reschedule+0x98>)
    9d14:	f002 fab2 	bl	c27c <assert_print>
    9d18:	21b9      	movs	r1, #185	; 0xb9
    9d1a:	4630      	mov	r0, r6
    9d1c:	f002 faa7 	bl	c26e <assert_post_action>
    9d20:	e7ea      	b.n	9cf8 <z_reschedule+0x5c>
    9d22:	bf00      	nop
    9d24:	20001228 	.word	0x20001228
    9d28:	0000dfbc 	.word	0x0000dfbc
    9d2c:	0000dfec 	.word	0x0000dfec
    9d30:	0000d63c 	.word	0x0000d63c
    9d34:	0000e004 	.word	0x0000e004

00009d38 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    9d38:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9d3a:	2400      	movs	r4, #0
	__asm__ volatile(
    9d3c:	f04f 0320 	mov.w	r3, #32
    9d40:	f3ef 8511 	mrs	r5, BASEPRI
    9d44:	f383 8812 	msr	BASEPRI_MAX, r3
    9d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d4c:	482f      	ldr	r0, [pc, #188]	; (9e0c <k_sched_lock+0xd4>)
    9d4e:	f7ff f989 	bl	9064 <z_spin_lock_valid>
    9d52:	b118      	cbz	r0, 9d5c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    9d54:	482d      	ldr	r0, [pc, #180]	; (9e0c <k_sched_lock+0xd4>)
    9d56:	f7ff f9a5 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    9d5a:	e022      	b.n	9da2 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d5c:	4e2c      	ldr	r6, [pc, #176]	; (9e10 <k_sched_lock+0xd8>)
    9d5e:	238e      	movs	r3, #142	; 0x8e
    9d60:	4632      	mov	r2, r6
    9d62:	492c      	ldr	r1, [pc, #176]	; (9e14 <k_sched_lock+0xdc>)
    9d64:	482c      	ldr	r0, [pc, #176]	; (9e18 <k_sched_lock+0xe0>)
    9d66:	f002 fa89 	bl	c27c <assert_print>
    9d6a:	4928      	ldr	r1, [pc, #160]	; (9e0c <k_sched_lock+0xd4>)
    9d6c:	482b      	ldr	r0, [pc, #172]	; (9e1c <k_sched_lock+0xe4>)
    9d6e:	f002 fa85 	bl	c27c <assert_print>
    9d72:	218e      	movs	r1, #142	; 0x8e
    9d74:	4630      	mov	r0, r6
    9d76:	f002 fa7a 	bl	c26e <assert_post_action>
    9d7a:	e7eb      	b.n	9d54 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9d7c:	4b28      	ldr	r3, [pc, #160]	; (9e20 <k_sched_lock+0xe8>)
    9d7e:	689b      	ldr	r3, [r3, #8]
    9d80:	7bdb      	ldrb	r3, [r3, #15]
    9d82:	2b01      	cmp	r3, #1
    9d84:	d022      	beq.n	9dcc <k_sched_lock+0x94>
	--_current->base.sched_locked;
    9d86:	4b26      	ldr	r3, [pc, #152]	; (9e20 <k_sched_lock+0xe8>)
    9d88:	689a      	ldr	r2, [r3, #8]
    9d8a:	7bd3      	ldrb	r3, [r2, #15]
    9d8c:	3b01      	subs	r3, #1
    9d8e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d90:	481e      	ldr	r0, [pc, #120]	; (9e0c <k_sched_lock+0xd4>)
    9d92:	f7ff f977 	bl	9084 <z_spin_unlock_valid>
    9d96:	b340      	cbz	r0, 9dea <k_sched_lock+0xb2>
	__asm__ volatile(
    9d98:	f385 8811 	msr	BASEPRI, r5
    9d9c:	f3bf 8f6f 	isb	sy
    9da0:	2401      	movs	r4, #1
    9da2:	2c00      	cmp	r4, #0
    9da4:	d131      	bne.n	9e0a <k_sched_lock+0xd2>
    9da6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9daa:	2b00      	cmp	r3, #0
    9dac:	d0e6      	beq.n	9d7c <k_sched_lock+0x44>
    9dae:	4c1d      	ldr	r4, [pc, #116]	; (9e24 <k_sched_lock+0xec>)
    9db0:	23fd      	movs	r3, #253	; 0xfd
    9db2:	4622      	mov	r2, r4
    9db4:	491c      	ldr	r1, [pc, #112]	; (9e28 <k_sched_lock+0xf0>)
    9db6:	4818      	ldr	r0, [pc, #96]	; (9e18 <k_sched_lock+0xe0>)
    9db8:	f002 fa60 	bl	c27c <assert_print>
    9dbc:	481b      	ldr	r0, [pc, #108]	; (9e2c <k_sched_lock+0xf4>)
    9dbe:	f002 fa5d 	bl	c27c <assert_print>
    9dc2:	21fd      	movs	r1, #253	; 0xfd
    9dc4:	4620      	mov	r0, r4
    9dc6:	f002 fa52 	bl	c26e <assert_post_action>
    9dca:	e7d7      	b.n	9d7c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9dcc:	4c15      	ldr	r4, [pc, #84]	; (9e24 <k_sched_lock+0xec>)
    9dce:	23fe      	movs	r3, #254	; 0xfe
    9dd0:	4622      	mov	r2, r4
    9dd2:	4917      	ldr	r1, [pc, #92]	; (9e30 <k_sched_lock+0xf8>)
    9dd4:	4810      	ldr	r0, [pc, #64]	; (9e18 <k_sched_lock+0xe0>)
    9dd6:	f002 fa51 	bl	c27c <assert_print>
    9dda:	4814      	ldr	r0, [pc, #80]	; (9e2c <k_sched_lock+0xf4>)
    9ddc:	f002 fa4e 	bl	c27c <assert_print>
    9de0:	21fe      	movs	r1, #254	; 0xfe
    9de2:	4620      	mov	r0, r4
    9de4:	f002 fa43 	bl	c26e <assert_post_action>
    9de8:	e7cd      	b.n	9d86 <k_sched_lock+0x4e>
    9dea:	4c09      	ldr	r4, [pc, #36]	; (9e10 <k_sched_lock+0xd8>)
    9dec:	23b9      	movs	r3, #185	; 0xb9
    9dee:	4622      	mov	r2, r4
    9df0:	4910      	ldr	r1, [pc, #64]	; (9e34 <k_sched_lock+0xfc>)
    9df2:	4809      	ldr	r0, [pc, #36]	; (9e18 <k_sched_lock+0xe0>)
    9df4:	f002 fa42 	bl	c27c <assert_print>
    9df8:	4904      	ldr	r1, [pc, #16]	; (9e0c <k_sched_lock+0xd4>)
    9dfa:	480f      	ldr	r0, [pc, #60]	; (9e38 <k_sched_lock+0x100>)
    9dfc:	f002 fa3e 	bl	c27c <assert_print>
    9e00:	21b9      	movs	r1, #185	; 0xb9
    9e02:	4620      	mov	r0, r4
    9e04:	f002 fa33 	bl	c26e <assert_post_action>
    9e08:	e7c6      	b.n	9d98 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
    9e0c:	20001264 	.word	0x20001264
    9e10:	0000dfbc 	.word	0x0000dfbc
    9e14:	0000e01c 	.word	0x0000e01c
    9e18:	0000d63c 	.word	0x0000d63c
    9e1c:	0000e034 	.word	0x0000e034
    9e20:	20001228 	.word	0x20001228
    9e24:	0000f7c0 	.word	0x0000f7c0
    9e28:	0000f6a4 	.word	0x0000f6a4
    9e2c:	0000f7ec 	.word	0x0000f7ec
    9e30:	0000f7f0 	.word	0x0000f7f0
    9e34:	0000dfec 	.word	0x0000dfec
    9e38:	0000e004 	.word	0x0000e004

00009e3c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    9e3c:	b538      	push	{r3, r4, r5, lr}
    9e3e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9e40:	4b0c      	ldr	r3, [pc, #48]	; (9e74 <z_priq_dumb_remove+0x38>)
    9e42:	4299      	cmp	r1, r3
    9e44:	d007      	beq.n	9e56 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9e46:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    9e48:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    9e4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9e4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9e4e:	2300      	movs	r3, #0
    9e50:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9e52:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    9e54:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9e56:	4d08      	ldr	r5, [pc, #32]	; (9e78 <z_priq_dumb_remove+0x3c>)
    9e58:	f240 433d 	movw	r3, #1085	; 0x43d
    9e5c:	462a      	mov	r2, r5
    9e5e:	4907      	ldr	r1, [pc, #28]	; (9e7c <z_priq_dumb_remove+0x40>)
    9e60:	4807      	ldr	r0, [pc, #28]	; (9e80 <z_priq_dumb_remove+0x44>)
    9e62:	f002 fa0b 	bl	c27c <assert_print>
    9e66:	f240 413d 	movw	r1, #1085	; 0x43d
    9e6a:	4628      	mov	r0, r5
    9e6c:	f002 f9ff 	bl	c26e <assert_post_action>
    9e70:	e7e9      	b.n	9e46 <z_priq_dumb_remove+0xa>
    9e72:	bf00      	nop
    9e74:	20000540 	.word	0x20000540
    9e78:	0000f894 	.word	0x0000f894
    9e7c:	0000f8d0 	.word	0x0000f8d0
    9e80:	0000d63c 	.word	0x0000d63c

00009e84 <update_cache>:
{
    9e84:	b538      	push	{r3, r4, r5, lr}
    9e86:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    9e88:	4819      	ldr	r0, [pc, #100]	; (9ef0 <update_cache+0x6c>)
    9e8a:	f003 f94d 	bl	d128 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9e8e:	4605      	mov	r5, r0
    9e90:	b188      	cbz	r0, 9eb6 <update_cache+0x32>
	if (preempt_ok != 0) {
    9e92:	bb14      	cbnz	r4, 9eda <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    9e94:	4b17      	ldr	r3, [pc, #92]	; (9ef4 <update_cache+0x70>)
    9e96:	689b      	ldr	r3, [r3, #8]
    9e98:	b183      	cbz	r3, 9ebc <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    9e9a:	4b16      	ldr	r3, [pc, #88]	; (9ef4 <update_cache+0x70>)
    9e9c:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9e9e:	7b5a      	ldrb	r2, [r3, #13]
    9ea0:	f012 0f1f 	tst.w	r2, #31
    9ea4:	d119      	bne.n	9eda <update_cache+0x56>
	return node->next != NULL;
    9ea6:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9ea8:	b9ba      	cbnz	r2, 9eda <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9eaa:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    9eac:	2a7f      	cmp	r2, #127	; 0x7f
    9eae:	d914      	bls.n	9eda <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    9eb0:	4a10      	ldr	r2, [pc, #64]	; (9ef4 <update_cache+0x70>)
    9eb2:	61d3      	str	r3, [r2, #28]
    9eb4:	e01a      	b.n	9eec <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9eb6:	4b0f      	ldr	r3, [pc, #60]	; (9ef4 <update_cache+0x70>)
    9eb8:	68dd      	ldr	r5, [r3, #12]
    9eba:	e7ea      	b.n	9e92 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    9ebc:	4c0e      	ldr	r4, [pc, #56]	; (9ef8 <update_cache+0x74>)
    9ebe:	2389      	movs	r3, #137	; 0x89
    9ec0:	4622      	mov	r2, r4
    9ec2:	490e      	ldr	r1, [pc, #56]	; (9efc <update_cache+0x78>)
    9ec4:	480e      	ldr	r0, [pc, #56]	; (9f00 <update_cache+0x7c>)
    9ec6:	f002 f9d9 	bl	c27c <assert_print>
    9eca:	480e      	ldr	r0, [pc, #56]	; (9f04 <update_cache+0x80>)
    9ecc:	f002 f9d6 	bl	c27c <assert_print>
    9ed0:	2189      	movs	r1, #137	; 0x89
    9ed2:	4620      	mov	r0, r4
    9ed4:	f002 f9cb 	bl	c26e <assert_post_action>
    9ed8:	e7df      	b.n	9e9a <update_cache+0x16>
		if (thread != _current) {
    9eda:	4b06      	ldr	r3, [pc, #24]	; (9ef4 <update_cache+0x70>)
    9edc:	689b      	ldr	r3, [r3, #8]
    9ede:	42ab      	cmp	r3, r5
    9ee0:	d002      	beq.n	9ee8 <update_cache+0x64>
			z_reset_time_slice(thread);
    9ee2:	4628      	mov	r0, r5
    9ee4:	f7ff fdf6 	bl	9ad4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9ee8:	4b02      	ldr	r3, [pc, #8]	; (9ef4 <update_cache+0x70>)
    9eea:	61dd      	str	r5, [r3, #28]
}
    9eec:	bd38      	pop	{r3, r4, r5, pc}
    9eee:	bf00      	nop
    9ef0:	20001248 	.word	0x20001248
    9ef4:	20001228 	.word	0x20001228
    9ef8:	0000f894 	.word	0x0000f894
    9efc:	0000f8f4 	.word	0x0000f8f4
    9f00:	0000d63c 	.word	0x0000d63c
    9f04:	0000f7ec 	.word	0x0000f7ec

00009f08 <move_thread_to_end_of_prio_q>:
{
    9f08:	b538      	push	{r3, r4, r5, lr}
    9f0a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    9f0c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9f0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9f12:	2b00      	cmp	r3, #0
    9f14:	db2b      	blt.n	9f6e <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    9f16:	7b6b      	ldrb	r3, [r5, #13]
    9f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9f1c:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9f1e:	4b22      	ldr	r3, [pc, #136]	; (9fa8 <move_thread_to_end_of_prio_q+0xa0>)
    9f20:	429d      	cmp	r5, r3
    9f22:	d02c      	beq.n	9f7e <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    9f24:	4b21      	ldr	r3, [pc, #132]	; (9fac <move_thread_to_end_of_prio_q+0xa4>)
    9f26:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f2a:	429c      	cmp	r4, r3
    9f2c:	d039      	beq.n	9fa2 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f2e:	b16c      	cbz	r4, 9f4c <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9f30:	4621      	mov	r1, r4
    9f32:	4628      	mov	r0, r5
    9f34:	f003 f8d9 	bl	d0ea <z_sched_prio_cmp>
    9f38:	2800      	cmp	r0, #0
    9f3a:	dc2c      	bgt.n	9f96 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9f3c:	b134      	cbz	r4, 9f4c <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    9f3e:	4b1b      	ldr	r3, [pc, #108]	; (9fac <move_thread_to_end_of_prio_q+0xa4>)
    9f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9f42:	429c      	cmp	r4, r3
    9f44:	d002      	beq.n	9f4c <move_thread_to_end_of_prio_q+0x44>
    9f46:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f48:	2c00      	cmp	r4, #0
    9f4a:	d1f0      	bne.n	9f2e <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    9f4c:	4b17      	ldr	r3, [pc, #92]	; (9fac <move_thread_to_end_of_prio_q+0xa4>)
    9f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9f50:	f103 0120 	add.w	r1, r3, #32
    9f54:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9f56:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9f58:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9f5a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    9f5c:	4b13      	ldr	r3, [pc, #76]	; (9fac <move_thread_to_end_of_prio_q+0xa4>)
    9f5e:	6898      	ldr	r0, [r3, #8]
    9f60:	42a8      	cmp	r0, r5
    9f62:	bf14      	ite	ne
    9f64:	2000      	movne	r0, #0
    9f66:	2001      	moveq	r0, #1
    9f68:	f7ff ff8c 	bl	9e84 <update_cache>
}
    9f6c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9f72:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9f74:	4601      	mov	r1, r0
    9f76:	480e      	ldr	r0, [pc, #56]	; (9fb0 <move_thread_to_end_of_prio_q+0xa8>)
    9f78:	f7ff ff60 	bl	9e3c <z_priq_dumb_remove>
}
    9f7c:	e7cb      	b.n	9f16 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9f7e:	4c0d      	ldr	r4, [pc, #52]	; (9fb4 <move_thread_to_end_of_prio_q+0xac>)
    9f80:	23ba      	movs	r3, #186	; 0xba
    9f82:	4622      	mov	r2, r4
    9f84:	490c      	ldr	r1, [pc, #48]	; (9fb8 <move_thread_to_end_of_prio_q+0xb0>)
    9f86:	480d      	ldr	r0, [pc, #52]	; (9fbc <move_thread_to_end_of_prio_q+0xb4>)
    9f88:	f002 f978 	bl	c27c <assert_print>
    9f8c:	21ba      	movs	r1, #186	; 0xba
    9f8e:	4620      	mov	r0, r4
    9f90:	f002 f96d 	bl	c26e <assert_post_action>
    9f94:	e7c6      	b.n	9f24 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9f96:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9f98:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9f9a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9f9c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9f9e:	6065      	str	r5, [r4, #4]
}
    9fa0:	e7dc      	b.n	9f5c <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9fa2:	2400      	movs	r4, #0
    9fa4:	e7c3      	b.n	9f2e <move_thread_to_end_of_prio_q+0x26>
    9fa6:	bf00      	nop
    9fa8:	20000540 	.word	0x20000540
    9fac:	20001228 	.word	0x20001228
    9fb0:	20001248 	.word	0x20001248
    9fb4:	0000f894 	.word	0x0000f894
    9fb8:	0000f8d0 	.word	0x0000f8d0
    9fbc:	0000d63c 	.word	0x0000d63c

00009fc0 <slice_expired_locked>:
{
    9fc0:	b538      	push	{r3, r4, r5, lr}
    9fc2:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9fc4:	4b07      	ldr	r3, [pc, #28]	; (9fe4 <slice_expired_locked+0x24>)
    9fc6:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9fc8:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    9fca:	f013 0f1f 	tst.w	r3, #31
    9fce:	d004      	beq.n	9fda <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9fd0:	4628      	mov	r0, r5
    9fd2:	f7ff fd7f 	bl	9ad4 <z_reset_time_slice>
}
    9fd6:	4620      	mov	r0, r4
    9fd8:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    9fda:	4628      	mov	r0, r5
    9fdc:	f7ff ff94 	bl	9f08 <move_thread_to_end_of_prio_q>
    9fe0:	e7f6      	b.n	9fd0 <slice_expired_locked+0x10>
    9fe2:	bf00      	nop
    9fe4:	20001228 	.word	0x20001228

00009fe8 <z_time_slice>:
{
    9fe8:	b570      	push	{r4, r5, r6, lr}
    9fea:	4604      	mov	r4, r0
	__asm__ volatile(
    9fec:	f04f 0320 	mov.w	r3, #32
    9ff0:	f3ef 8511 	mrs	r5, BASEPRI
    9ff4:	f383 8812 	msr	BASEPRI_MAX, r3
    9ff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ffc:	4842      	ldr	r0, [pc, #264]	; (a108 <z_time_slice+0x120>)
    9ffe:	f7ff f831 	bl	9064 <z_spin_lock_valid>
    a002:	b310      	cbz	r0, a04a <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    a004:	4840      	ldr	r0, [pc, #256]	; (a108 <z_time_slice+0x120>)
    a006:	f7ff f84d 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a00a:	462b      	mov	r3, r5
	if (pending_current == _current) {
    a00c:	4a3f      	ldr	r2, [pc, #252]	; (a10c <z_time_slice+0x124>)
    a00e:	6892      	ldr	r2, [r2, #8]
    a010:	493f      	ldr	r1, [pc, #252]	; (a110 <z_time_slice+0x128>)
    a012:	6809      	ldr	r1, [r1, #0]
    a014:	428a      	cmp	r2, r1
    a016:	d028      	beq.n	a06a <z_time_slice+0x82>
	pending_current = NULL;
    a018:	493d      	ldr	r1, [pc, #244]	; (a110 <z_time_slice+0x128>)
    a01a:	2000      	movs	r0, #0
    a01c:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    a01e:	493d      	ldr	r1, [pc, #244]	; (a114 <z_time_slice+0x12c>)
    a020:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    a022:	2900      	cmp	r1, #0
    a024:	d052      	beq.n	a0cc <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    a026:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    a028:	297f      	cmp	r1, #127	; 0x7f
    a02a:	d83a      	bhi.n	a0a2 <z_time_slice+0xba>
    a02c:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    a02e:	f011 0f1f 	tst.w	r1, #31
    a032:	d140      	bne.n	a0b6 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    a034:	f992 000e 	ldrsb.w	r0, [r2, #14]
    a038:	4937      	ldr	r1, [pc, #220]	; (a118 <z_time_slice+0x130>)
    a03a:	6809      	ldr	r1, [r1, #0]
    a03c:	4288      	cmp	r0, r1
    a03e:	db3c      	blt.n	a0ba <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    a040:	4936      	ldr	r1, [pc, #216]	; (a11c <z_time_slice+0x134>)
    a042:	428a      	cmp	r2, r1
    a044:	d03b      	beq.n	a0be <z_time_slice+0xd6>
    a046:	2201      	movs	r2, #1
    a048:	e02c      	b.n	a0a4 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a04a:	4e35      	ldr	r6, [pc, #212]	; (a120 <z_time_slice+0x138>)
    a04c:	238e      	movs	r3, #142	; 0x8e
    a04e:	4632      	mov	r2, r6
    a050:	4934      	ldr	r1, [pc, #208]	; (a124 <z_time_slice+0x13c>)
    a052:	4835      	ldr	r0, [pc, #212]	; (a128 <z_time_slice+0x140>)
    a054:	f002 f912 	bl	c27c <assert_print>
    a058:	492b      	ldr	r1, [pc, #172]	; (a108 <z_time_slice+0x120>)
    a05a:	4834      	ldr	r0, [pc, #208]	; (a12c <z_time_slice+0x144>)
    a05c:	f002 f90e 	bl	c27c <assert_print>
    a060:	218e      	movs	r1, #142	; 0x8e
    a062:	4630      	mov	r0, r6
    a064:	f002 f903 	bl	c26e <assert_post_action>
    a068:	e7cc      	b.n	a004 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    a06a:	4610      	mov	r0, r2
    a06c:	f7ff fd32 	bl	9ad4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a070:	4825      	ldr	r0, [pc, #148]	; (a108 <z_time_slice+0x120>)
    a072:	f7ff f807 	bl	9084 <z_spin_unlock_valid>
    a076:	b120      	cbz	r0, a082 <z_time_slice+0x9a>
	__asm__ volatile(
    a078:	f385 8811 	msr	BASEPRI, r5
    a07c:	f3bf 8f6f 	isb	sy
		return;
    a080:	e030      	b.n	a0e4 <z_time_slice+0xfc>
    a082:	4c27      	ldr	r4, [pc, #156]	; (a120 <z_time_slice+0x138>)
    a084:	23b9      	movs	r3, #185	; 0xb9
    a086:	4622      	mov	r2, r4
    a088:	4929      	ldr	r1, [pc, #164]	; (a130 <z_time_slice+0x148>)
    a08a:	4827      	ldr	r0, [pc, #156]	; (a128 <z_time_slice+0x140>)
    a08c:	f002 f8f6 	bl	c27c <assert_print>
    a090:	491d      	ldr	r1, [pc, #116]	; (a108 <z_time_slice+0x120>)
    a092:	4828      	ldr	r0, [pc, #160]	; (a134 <z_time_slice+0x14c>)
    a094:	f002 f8f2 	bl	c27c <assert_print>
    a098:	21b9      	movs	r1, #185	; 0xb9
    a09a:	4620      	mov	r0, r4
    a09c:	f002 f8e7 	bl	c26e <assert_post_action>
    a0a0:	e7ea      	b.n	a078 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    a0a2:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    a0a4:	b192      	cbz	r2, a0cc <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    a0a6:	4a19      	ldr	r2, [pc, #100]	; (a10c <z_time_slice+0x124>)
    a0a8:	6910      	ldr	r0, [r2, #16]
    a0aa:	42a0      	cmp	r0, r4
    a0ac:	dd09      	ble.n	a0c2 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    a0ae:	1b00      	subs	r0, r0, r4
    a0b0:	4a16      	ldr	r2, [pc, #88]	; (a10c <z_time_slice+0x124>)
    a0b2:	6110      	str	r0, [r2, #16]
    a0b4:	e00d      	b.n	a0d2 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    a0b6:	2200      	movs	r2, #0
    a0b8:	e7f4      	b.n	a0a4 <z_time_slice+0xbc>
    a0ba:	2200      	movs	r2, #0
    a0bc:	e7f2      	b.n	a0a4 <z_time_slice+0xbc>
    a0be:	2200      	movs	r2, #0
    a0c0:	e7f0      	b.n	a0a4 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    a0c2:	4628      	mov	r0, r5
    a0c4:	f7ff ff7c 	bl	9fc0 <slice_expired_locked>
    a0c8:	4603      	mov	r3, r0
    a0ca:	e002      	b.n	a0d2 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    a0cc:	4a0f      	ldr	r2, [pc, #60]	; (a10c <z_time_slice+0x124>)
    a0ce:	2100      	movs	r1, #0
    a0d0:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    a0d2:	461c      	mov	r4, r3
    a0d4:	480c      	ldr	r0, [pc, #48]	; (a108 <z_time_slice+0x120>)
    a0d6:	f7fe ffd5 	bl	9084 <z_spin_unlock_valid>
    a0da:	b120      	cbz	r0, a0e6 <z_time_slice+0xfe>
    a0dc:	f384 8811 	msr	BASEPRI, r4
    a0e0:	f3bf 8f6f 	isb	sy
}
    a0e4:	bd70      	pop	{r4, r5, r6, pc}
    a0e6:	4d0e      	ldr	r5, [pc, #56]	; (a120 <z_time_slice+0x138>)
    a0e8:	23b9      	movs	r3, #185	; 0xb9
    a0ea:	462a      	mov	r2, r5
    a0ec:	4910      	ldr	r1, [pc, #64]	; (a130 <z_time_slice+0x148>)
    a0ee:	480e      	ldr	r0, [pc, #56]	; (a128 <z_time_slice+0x140>)
    a0f0:	f002 f8c4 	bl	c27c <assert_print>
    a0f4:	4904      	ldr	r1, [pc, #16]	; (a108 <z_time_slice+0x120>)
    a0f6:	480f      	ldr	r0, [pc, #60]	; (a134 <z_time_slice+0x14c>)
    a0f8:	f002 f8c0 	bl	c27c <assert_print>
    a0fc:	21b9      	movs	r1, #185	; 0xb9
    a0fe:	4628      	mov	r0, r5
    a100:	f002 f8b5 	bl	c26e <assert_post_action>
    a104:	e7ea      	b.n	a0dc <z_time_slice+0xf4>
    a106:	bf00      	nop
    a108:	20001264 	.word	0x20001264
    a10c:	20001228 	.word	0x20001228
    a110:	20001260 	.word	0x20001260
    a114:	2000126c 	.word	0x2000126c
    a118:	20001268 	.word	0x20001268
    a11c:	20000540 	.word	0x20000540
    a120:	0000dfbc 	.word	0x0000dfbc
    a124:	0000e01c 	.word	0x0000e01c
    a128:	0000d63c 	.word	0x0000d63c
    a12c:	0000e034 	.word	0x0000e034
    a130:	0000dfec 	.word	0x0000dfec
    a134:	0000e004 	.word	0x0000e004

0000a138 <ready_thread>:
{
    a138:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    a13a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a13c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    a140:	2a00      	cmp	r2, #0
    a142:	db30      	blt.n	a1a6 <ready_thread+0x6e>
    a144:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a146:	f013 0f1f 	tst.w	r3, #31
    a14a:	d105      	bne.n	a158 <ready_thread+0x20>
	return node->next != NULL;
    a14c:	6982      	ldr	r2, [r0, #24]
    a14e:	b10a      	cbz	r2, a154 <ready_thread+0x1c>
    a150:	2200      	movs	r2, #0
    a152:	e002      	b.n	a15a <ready_thread+0x22>
    a154:	2201      	movs	r2, #1
    a156:	e000      	b.n	a15a <ready_thread+0x22>
    a158:	2200      	movs	r2, #0
    a15a:	b322      	cbz	r2, a1a6 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    a15c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a160:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a162:	4b1b      	ldr	r3, [pc, #108]	; (a1d0 <ready_thread+0x98>)
    a164:	429c      	cmp	r4, r3
    a166:	d01f      	beq.n	a1a8 <ready_thread+0x70>
	return list->head == list;
    a168:	4b1a      	ldr	r3, [pc, #104]	; (a1d4 <ready_thread+0x9c>)
    a16a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a16e:	429d      	cmp	r5, r3
    a170:	d02c      	beq.n	a1cc <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a172:	b16d      	cbz	r5, a190 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a174:	4629      	mov	r1, r5
    a176:	4620      	mov	r0, r4
    a178:	f002 ffb7 	bl	d0ea <z_sched_prio_cmp>
    a17c:	2800      	cmp	r0, #0
    a17e:	dc1f      	bgt.n	a1c0 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a180:	b135      	cbz	r5, a190 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    a182:	4b14      	ldr	r3, [pc, #80]	; (a1d4 <ready_thread+0x9c>)
    a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a186:	429d      	cmp	r5, r3
    a188:	d002      	beq.n	a190 <ready_thread+0x58>
    a18a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a18c:	2d00      	cmp	r5, #0
    a18e:	d1f0      	bne.n	a172 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    a190:	4b10      	ldr	r3, [pc, #64]	; (a1d4 <ready_thread+0x9c>)
    a192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a194:	f103 0120 	add.w	r1, r3, #32
    a198:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a19a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a19c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a19e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    a1a0:	2000      	movs	r0, #0
    a1a2:	f7ff fe6f 	bl	9e84 <update_cache>
}
    a1a6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a1a8:	4d0b      	ldr	r5, [pc, #44]	; (a1d8 <ready_thread+0xa0>)
    a1aa:	23ba      	movs	r3, #186	; 0xba
    a1ac:	462a      	mov	r2, r5
    a1ae:	490b      	ldr	r1, [pc, #44]	; (a1dc <ready_thread+0xa4>)
    a1b0:	480b      	ldr	r0, [pc, #44]	; (a1e0 <ready_thread+0xa8>)
    a1b2:	f002 f863 	bl	c27c <assert_print>
    a1b6:	21ba      	movs	r1, #186	; 0xba
    a1b8:	4628      	mov	r0, r5
    a1ba:	f002 f858 	bl	c26e <assert_post_action>
    a1be:	e7d3      	b.n	a168 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    a1c0:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a1c2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a1c4:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a1c6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a1c8:	606c      	str	r4, [r5, #4]
}
    a1ca:	e7e9      	b.n	a1a0 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a1cc:	2500      	movs	r5, #0
    a1ce:	e7d0      	b.n	a172 <ready_thread+0x3a>
    a1d0:	20000540 	.word	0x20000540
    a1d4:	20001228 	.word	0x20001228
    a1d8:	0000f894 	.word	0x0000f894
    a1dc:	0000f8d0 	.word	0x0000f8d0
    a1e0:	0000d63c 	.word	0x0000d63c

0000a1e4 <z_ready_thread>:
{
    a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1e6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    a1e8:	2400      	movs	r4, #0
	__asm__ volatile(
    a1ea:	f04f 0320 	mov.w	r3, #32
    a1ee:	f3ef 8611 	mrs	r6, BASEPRI
    a1f2:	f383 8812 	msr	BASEPRI_MAX, r3
    a1f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1fa:	481e      	ldr	r0, [pc, #120]	; (a274 <z_ready_thread+0x90>)
    a1fc:	f7fe ff32 	bl	9064 <z_spin_lock_valid>
    a200:	b118      	cbz	r0, a20a <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    a202:	481c      	ldr	r0, [pc, #112]	; (a274 <z_ready_thread+0x90>)
    a204:	f7fe ff4e 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a208:	e018      	b.n	a23c <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a20a:	4f1b      	ldr	r7, [pc, #108]	; (a278 <z_ready_thread+0x94>)
    a20c:	238e      	movs	r3, #142	; 0x8e
    a20e:	463a      	mov	r2, r7
    a210:	491a      	ldr	r1, [pc, #104]	; (a27c <z_ready_thread+0x98>)
    a212:	481b      	ldr	r0, [pc, #108]	; (a280 <z_ready_thread+0x9c>)
    a214:	f002 f832 	bl	c27c <assert_print>
    a218:	4916      	ldr	r1, [pc, #88]	; (a274 <z_ready_thread+0x90>)
    a21a:	481a      	ldr	r0, [pc, #104]	; (a284 <z_ready_thread+0xa0>)
    a21c:	f002 f82e 	bl	c27c <assert_print>
    a220:	218e      	movs	r1, #142	; 0x8e
    a222:	4638      	mov	r0, r7
    a224:	f002 f823 	bl	c26e <assert_post_action>
    a228:	e7eb      	b.n	a202 <z_ready_thread+0x1e>
			ready_thread(thread);
    a22a:	4628      	mov	r0, r5
    a22c:	f7ff ff84 	bl	a138 <ready_thread>
    a230:	e00a      	b.n	a248 <z_ready_thread+0x64>
	__asm__ volatile(
    a232:	f386 8811 	msr	BASEPRI, r6
    a236:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a23a:	2401      	movs	r4, #1
    a23c:	b9cc      	cbnz	r4, a272 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    a23e:	4628      	mov	r0, r5
    a240:	f002 ff51 	bl	d0e6 <thread_active_elsewhere>
    a244:	2800      	cmp	r0, #0
    a246:	d0f0      	beq.n	a22a <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a248:	480a      	ldr	r0, [pc, #40]	; (a274 <z_ready_thread+0x90>)
    a24a:	f7fe ff1b 	bl	9084 <z_spin_unlock_valid>
    a24e:	2800      	cmp	r0, #0
    a250:	d1ef      	bne.n	a232 <z_ready_thread+0x4e>
    a252:	4c09      	ldr	r4, [pc, #36]	; (a278 <z_ready_thread+0x94>)
    a254:	23b9      	movs	r3, #185	; 0xb9
    a256:	4622      	mov	r2, r4
    a258:	490b      	ldr	r1, [pc, #44]	; (a288 <z_ready_thread+0xa4>)
    a25a:	4809      	ldr	r0, [pc, #36]	; (a280 <z_ready_thread+0x9c>)
    a25c:	f002 f80e 	bl	c27c <assert_print>
    a260:	4904      	ldr	r1, [pc, #16]	; (a274 <z_ready_thread+0x90>)
    a262:	480a      	ldr	r0, [pc, #40]	; (a28c <z_ready_thread+0xa8>)
    a264:	f002 f80a 	bl	c27c <assert_print>
    a268:	21b9      	movs	r1, #185	; 0xb9
    a26a:	4620      	mov	r0, r4
    a26c:	f001 ffff 	bl	c26e <assert_post_action>
    a270:	e7df      	b.n	a232 <z_ready_thread+0x4e>
}
    a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a274:	20001264 	.word	0x20001264
    a278:	0000dfbc 	.word	0x0000dfbc
    a27c:	0000e01c 	.word	0x0000e01c
    a280:	0000d63c 	.word	0x0000d63c
    a284:	0000e034 	.word	0x0000e034
    a288:	0000dfec 	.word	0x0000dfec
    a28c:	0000e004 	.word	0x0000e004

0000a290 <z_sched_start>:
{
    a290:	b570      	push	{r4, r5, r6, lr}
    a292:	4604      	mov	r4, r0
	__asm__ volatile(
    a294:	f04f 0320 	mov.w	r3, #32
    a298:	f3ef 8511 	mrs	r5, BASEPRI
    a29c:	f383 8812 	msr	BASEPRI_MAX, r3
    a2a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2a4:	481f      	ldr	r0, [pc, #124]	; (a324 <z_sched_start+0x94>)
    a2a6:	f7fe fedd 	bl	9064 <z_spin_lock_valid>
    a2aa:	b188      	cbz	r0, a2d0 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    a2ac:	481d      	ldr	r0, [pc, #116]	; (a324 <z_sched_start+0x94>)
    a2ae:	f7fe fef9 	bl	90a4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a2b2:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    a2b4:	f013 0f04 	tst.w	r3, #4
    a2b8:	d01a      	beq.n	a2f0 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a2ba:	f023 0304 	bic.w	r3, r3, #4
    a2be:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    a2c0:	4620      	mov	r0, r4
    a2c2:	f7ff ff39 	bl	a138 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a2c6:	4629      	mov	r1, r5
    a2c8:	4816      	ldr	r0, [pc, #88]	; (a324 <z_sched_start+0x94>)
    a2ca:	f7ff fce7 	bl	9c9c <z_reschedule>
}
    a2ce:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2d0:	4e15      	ldr	r6, [pc, #84]	; (a328 <z_sched_start+0x98>)
    a2d2:	238e      	movs	r3, #142	; 0x8e
    a2d4:	4632      	mov	r2, r6
    a2d6:	4915      	ldr	r1, [pc, #84]	; (a32c <z_sched_start+0x9c>)
    a2d8:	4815      	ldr	r0, [pc, #84]	; (a330 <z_sched_start+0xa0>)
    a2da:	f001 ffcf 	bl	c27c <assert_print>
    a2de:	4911      	ldr	r1, [pc, #68]	; (a324 <z_sched_start+0x94>)
    a2e0:	4814      	ldr	r0, [pc, #80]	; (a334 <z_sched_start+0xa4>)
    a2e2:	f001 ffcb 	bl	c27c <assert_print>
    a2e6:	218e      	movs	r1, #142	; 0x8e
    a2e8:	4630      	mov	r0, r6
    a2ea:	f001 ffc0 	bl	c26e <assert_post_action>
    a2ee:	e7dd      	b.n	a2ac <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a2f0:	480c      	ldr	r0, [pc, #48]	; (a324 <z_sched_start+0x94>)
    a2f2:	f7fe fec7 	bl	9084 <z_spin_unlock_valid>
    a2f6:	b120      	cbz	r0, a302 <z_sched_start+0x72>
	__asm__ volatile(
    a2f8:	f385 8811 	msr	BASEPRI, r5
    a2fc:	f3bf 8f6f 	isb	sy
		return;
    a300:	e7e5      	b.n	a2ce <z_sched_start+0x3e>
    a302:	4c09      	ldr	r4, [pc, #36]	; (a328 <z_sched_start+0x98>)
    a304:	23b9      	movs	r3, #185	; 0xb9
    a306:	4622      	mov	r2, r4
    a308:	490b      	ldr	r1, [pc, #44]	; (a338 <z_sched_start+0xa8>)
    a30a:	4809      	ldr	r0, [pc, #36]	; (a330 <z_sched_start+0xa0>)
    a30c:	f001 ffb6 	bl	c27c <assert_print>
    a310:	4904      	ldr	r1, [pc, #16]	; (a324 <z_sched_start+0x94>)
    a312:	480a      	ldr	r0, [pc, #40]	; (a33c <z_sched_start+0xac>)
    a314:	f001 ffb2 	bl	c27c <assert_print>
    a318:	21b9      	movs	r1, #185	; 0xb9
    a31a:	4620      	mov	r0, r4
    a31c:	f001 ffa7 	bl	c26e <assert_post_action>
    a320:	e7ea      	b.n	a2f8 <z_sched_start+0x68>
    a322:	bf00      	nop
    a324:	20001264 	.word	0x20001264
    a328:	0000dfbc 	.word	0x0000dfbc
    a32c:	0000e01c 	.word	0x0000e01c
    a330:	0000d63c 	.word	0x0000d63c
    a334:	0000e034 	.word	0x0000e034
    a338:	0000dfec 	.word	0x0000dfec
    a33c:	0000e004 	.word	0x0000e004

0000a340 <z_impl_k_thread_resume>:
{
    a340:	b570      	push	{r4, r5, r6, lr}
    a342:	4604      	mov	r4, r0
	__asm__ volatile(
    a344:	f04f 0320 	mov.w	r3, #32
    a348:	f3ef 8511 	mrs	r5, BASEPRI
    a34c:	f383 8812 	msr	BASEPRI_MAX, r3
    a350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a354:	481f      	ldr	r0, [pc, #124]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a356:	f7fe fe85 	bl	9064 <z_spin_lock_valid>
    a35a:	b188      	cbz	r0, a380 <z_impl_k_thread_resume+0x40>
	z_spin_lock_set_owner(l);
    a35c:	481d      	ldr	r0, [pc, #116]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a35e:	f7fe fea1 	bl	90a4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
    a362:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
    a364:	f013 0f10 	tst.w	r3, #16
    a368:	d01a      	beq.n	a3a0 <z_impl_k_thread_resume+0x60>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a36a:	f023 0310 	bic.w	r3, r3, #16
    a36e:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    a370:	4620      	mov	r0, r4
    a372:	f7ff fee1 	bl	a138 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a376:	4629      	mov	r1, r5
    a378:	4816      	ldr	r0, [pc, #88]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a37a:	f7ff fc8f 	bl	9c9c <z_reschedule>
}
    a37e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a380:	4e15      	ldr	r6, [pc, #84]	; (a3d8 <z_impl_k_thread_resume+0x98>)
    a382:	238e      	movs	r3, #142	; 0x8e
    a384:	4632      	mov	r2, r6
    a386:	4915      	ldr	r1, [pc, #84]	; (a3dc <z_impl_k_thread_resume+0x9c>)
    a388:	4815      	ldr	r0, [pc, #84]	; (a3e0 <z_impl_k_thread_resume+0xa0>)
    a38a:	f001 ff77 	bl	c27c <assert_print>
    a38e:	4911      	ldr	r1, [pc, #68]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a390:	4814      	ldr	r0, [pc, #80]	; (a3e4 <z_impl_k_thread_resume+0xa4>)
    a392:	f001 ff73 	bl	c27c <assert_print>
    a396:	218e      	movs	r1, #142	; 0x8e
    a398:	4630      	mov	r0, r6
    a39a:	f001 ff68 	bl	c26e <assert_post_action>
    a39e:	e7dd      	b.n	a35c <z_impl_k_thread_resume+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a3a0:	480c      	ldr	r0, [pc, #48]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a3a2:	f7fe fe6f 	bl	9084 <z_spin_unlock_valid>
    a3a6:	b120      	cbz	r0, a3b2 <z_impl_k_thread_resume+0x72>
	__asm__ volatile(
    a3a8:	f385 8811 	msr	BASEPRI, r5
    a3ac:	f3bf 8f6f 	isb	sy
		return;
    a3b0:	e7e5      	b.n	a37e <z_impl_k_thread_resume+0x3e>
    a3b2:	4c09      	ldr	r4, [pc, #36]	; (a3d8 <z_impl_k_thread_resume+0x98>)
    a3b4:	23b9      	movs	r3, #185	; 0xb9
    a3b6:	4622      	mov	r2, r4
    a3b8:	490b      	ldr	r1, [pc, #44]	; (a3e8 <z_impl_k_thread_resume+0xa8>)
    a3ba:	4809      	ldr	r0, [pc, #36]	; (a3e0 <z_impl_k_thread_resume+0xa0>)
    a3bc:	f001 ff5e 	bl	c27c <assert_print>
    a3c0:	4904      	ldr	r1, [pc, #16]	; (a3d4 <z_impl_k_thread_resume+0x94>)
    a3c2:	480a      	ldr	r0, [pc, #40]	; (a3ec <z_impl_k_thread_resume+0xac>)
    a3c4:	f001 ff5a 	bl	c27c <assert_print>
    a3c8:	21b9      	movs	r1, #185	; 0xb9
    a3ca:	4620      	mov	r0, r4
    a3cc:	f001 ff4f 	bl	c26e <assert_post_action>
    a3d0:	e7ea      	b.n	a3a8 <z_impl_k_thread_resume+0x68>
    a3d2:	bf00      	nop
    a3d4:	20001264 	.word	0x20001264
    a3d8:	0000dfbc 	.word	0x0000dfbc
    a3dc:	0000e01c 	.word	0x0000e01c
    a3e0:	0000d63c 	.word	0x0000d63c
    a3e4:	0000e034 	.word	0x0000e034
    a3e8:	0000dfec 	.word	0x0000dfec
    a3ec:	0000e004 	.word	0x0000e004

0000a3f0 <z_thread_timeout>:
{
    a3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3f4:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    a3f6:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    a3fa:	2500      	movs	r5, #0
	__asm__ volatile(
    a3fc:	f04f 0320 	mov.w	r3, #32
    a400:	f3ef 8711 	mrs	r7, BASEPRI
    a404:	f383 8812 	msr	BASEPRI_MAX, r3
    a408:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a40c:	482b      	ldr	r0, [pc, #172]	; (a4bc <z_thread_timeout+0xcc>)
    a40e:	f7fe fe29 	bl	9064 <z_spin_lock_valid>
    a412:	b118      	cbz	r0, a41c <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    a414:	4829      	ldr	r0, [pc, #164]	; (a4bc <z_thread_timeout+0xcc>)
    a416:	f7fe fe45 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a41a:	e026      	b.n	a46a <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a41c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; a4c0 <z_thread_timeout+0xd0>
    a420:	238e      	movs	r3, #142	; 0x8e
    a422:	4642      	mov	r2, r8
    a424:	4927      	ldr	r1, [pc, #156]	; (a4c4 <z_thread_timeout+0xd4>)
    a426:	4828      	ldr	r0, [pc, #160]	; (a4c8 <z_thread_timeout+0xd8>)
    a428:	f001 ff28 	bl	c27c <assert_print>
    a42c:	4923      	ldr	r1, [pc, #140]	; (a4bc <z_thread_timeout+0xcc>)
    a42e:	4827      	ldr	r0, [pc, #156]	; (a4cc <z_thread_timeout+0xdc>)
    a430:	f001 ff24 	bl	c27c <assert_print>
    a434:	218e      	movs	r1, #142	; 0x8e
    a436:	4640      	mov	r0, r8
    a438:	f001 ff19 	bl	c26e <assert_post_action>
    a43c:	e7ea      	b.n	a414 <z_thread_timeout+0x24>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a43e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a442:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a446:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a44a:	f023 0310 	bic.w	r3, r3, #16
    a44e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    a452:	4630      	mov	r0, r6
    a454:	f7ff fe70 	bl	a138 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a458:	4818      	ldr	r0, [pc, #96]	; (a4bc <z_thread_timeout+0xcc>)
    a45a:	f7fe fe13 	bl	9084 <z_spin_unlock_valid>
    a45e:	b1d8      	cbz	r0, a498 <z_thread_timeout+0xa8>
	__asm__ volatile(
    a460:	f387 8811 	msr	BASEPRI, r7
    a464:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a468:	2501      	movs	r5, #1
    a46a:	bb2d      	cbnz	r5, a4b8 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    a46c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    a470:	f013 0f28 	tst.w	r3, #40	; 0x28
    a474:	d1f0      	bne.n	a458 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    a476:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a47a:	2b00      	cmp	r3, #0
    a47c:	d0df      	beq.n	a43e <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a47e:	4630      	mov	r0, r6
    a480:	f7ff fafe 	bl	9a80 <pended_on_thread>
    a484:	4631      	mov	r1, r6
    a486:	f7ff fcd9 	bl	9e3c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a48a:	7b73      	ldrb	r3, [r6, #13]
    a48c:	f023 0302 	bic.w	r3, r3, #2
    a490:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    a492:	2300      	movs	r3, #0
    a494:	60b3      	str	r3, [r6, #8]
}
    a496:	e7d2      	b.n	a43e <z_thread_timeout+0x4e>
    a498:	4d09      	ldr	r5, [pc, #36]	; (a4c0 <z_thread_timeout+0xd0>)
    a49a:	23b9      	movs	r3, #185	; 0xb9
    a49c:	462a      	mov	r2, r5
    a49e:	490c      	ldr	r1, [pc, #48]	; (a4d0 <z_thread_timeout+0xe0>)
    a4a0:	4809      	ldr	r0, [pc, #36]	; (a4c8 <z_thread_timeout+0xd8>)
    a4a2:	f001 feeb 	bl	c27c <assert_print>
    a4a6:	4905      	ldr	r1, [pc, #20]	; (a4bc <z_thread_timeout+0xcc>)
    a4a8:	480a      	ldr	r0, [pc, #40]	; (a4d4 <z_thread_timeout+0xe4>)
    a4aa:	f001 fee7 	bl	c27c <assert_print>
    a4ae:	21b9      	movs	r1, #185	; 0xb9
    a4b0:	4628      	mov	r0, r5
    a4b2:	f001 fedc 	bl	c26e <assert_post_action>
    a4b6:	e7d3      	b.n	a460 <z_thread_timeout+0x70>
}
    a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4bc:	20001264 	.word	0x20001264
    a4c0:	0000dfbc 	.word	0x0000dfbc
    a4c4:	0000e01c 	.word	0x0000e01c
    a4c8:	0000d63c 	.word	0x0000d63c
    a4cc:	0000e034 	.word	0x0000e034
    a4d0:	0000dfec 	.word	0x0000dfec
    a4d4:	0000e004 	.word	0x0000e004

0000a4d8 <unready_thread>:
{
    a4d8:	b510      	push	{r4, lr}
    a4da:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    a4dc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    a4de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a4e2:	2b00      	cmp	r3, #0
    a4e4:	db08      	blt.n	a4f8 <unready_thread+0x20>
	update_cache(thread == _current);
    a4e6:	4b08      	ldr	r3, [pc, #32]	; (a508 <unready_thread+0x30>)
    a4e8:	6898      	ldr	r0, [r3, #8]
    a4ea:	42a0      	cmp	r0, r4
    a4ec:	bf14      	ite	ne
    a4ee:	2000      	movne	r0, #0
    a4f0:	2001      	moveq	r0, #1
    a4f2:	f7ff fcc7 	bl	9e84 <update_cache>
}
    a4f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a4f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a4fc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a4fe:	4601      	mov	r1, r0
    a500:	4802      	ldr	r0, [pc, #8]	; (a50c <unready_thread+0x34>)
    a502:	f7ff fc9b 	bl	9e3c <z_priq_dumb_remove>
}
    a506:	e7ee      	b.n	a4e6 <unready_thread+0xe>
    a508:	20001228 	.word	0x20001228
    a50c:	20001248 	.word	0x20001248

0000a510 <add_to_waitq_locked>:
{
    a510:	b570      	push	{r4, r5, r6, lr}
    a512:	4605      	mov	r5, r0
    a514:	460e      	mov	r6, r1
	unready_thread(thread);
    a516:	f7ff ffdf 	bl	a4d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a51a:	7b6b      	ldrb	r3, [r5, #13]
    a51c:	f043 0302 	orr.w	r3, r3, #2
    a520:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    a522:	b1ce      	cbz	r6, a558 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    a524:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a526:	4b17      	ldr	r3, [pc, #92]	; (a584 <add_to_waitq_locked+0x74>)
    a528:	429d      	cmp	r5, r3
    a52a:	d016      	beq.n	a55a <add_to_waitq_locked+0x4a>
	return list->head == list;
    a52c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a52e:	42a6      	cmp	r6, r4
    a530:	d025      	beq.n	a57e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a532:	b164      	cbz	r4, a54e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a534:	4621      	mov	r1, r4
    a536:	4628      	mov	r0, r5
    a538:	f002 fdd7 	bl	d0ea <z_sched_prio_cmp>
    a53c:	2800      	cmp	r0, #0
    a53e:	dc18      	bgt.n	a572 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a540:	b12c      	cbz	r4, a54e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    a542:	6873      	ldr	r3, [r6, #4]
    a544:	429c      	cmp	r4, r3
    a546:	d002      	beq.n	a54e <add_to_waitq_locked+0x3e>
    a548:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a54a:	2c00      	cmp	r4, #0
    a54c:	d1f1      	bne.n	a532 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    a54e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    a550:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    a552:	606b      	str	r3, [r5, #4]
	tail->next = node;
    a554:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a556:	6075      	str	r5, [r6, #4]
}
    a558:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a55a:	4c0b      	ldr	r4, [pc, #44]	; (a588 <add_to_waitq_locked+0x78>)
    a55c:	23ba      	movs	r3, #186	; 0xba
    a55e:	4622      	mov	r2, r4
    a560:	490a      	ldr	r1, [pc, #40]	; (a58c <add_to_waitq_locked+0x7c>)
    a562:	480b      	ldr	r0, [pc, #44]	; (a590 <add_to_waitq_locked+0x80>)
    a564:	f001 fe8a 	bl	c27c <assert_print>
    a568:	21ba      	movs	r1, #186	; 0xba
    a56a:	4620      	mov	r0, r4
    a56c:	f001 fe7f 	bl	c26e <assert_post_action>
    a570:	e7dc      	b.n	a52c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    a572:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a574:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a576:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a578:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a57a:	6065      	str	r5, [r4, #4]
}
    a57c:	e7ec      	b.n	a558 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a57e:	2400      	movs	r4, #0
    a580:	e7d7      	b.n	a532 <add_to_waitq_locked+0x22>
    a582:	bf00      	nop
    a584:	20000540 	.word	0x20000540
    a588:	0000f894 	.word	0x0000f894
    a58c:	0000f8d0 	.word	0x0000f8d0
    a590:	0000d63c 	.word	0x0000d63c

0000a594 <pend>:
{
    a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a598:	4605      	mov	r5, r0
    a59a:	460e      	mov	r6, r1
    a59c:	4691      	mov	r9, r2
    a59e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    a5a0:	2400      	movs	r4, #0
	__asm__ volatile(
    a5a2:	f04f 0320 	mov.w	r3, #32
    a5a6:	f3ef 8711 	mrs	r7, BASEPRI
    a5aa:	f383 8812 	msr	BASEPRI_MAX, r3
    a5ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5b2:	481f      	ldr	r0, [pc, #124]	; (a630 <pend+0x9c>)
    a5b4:	f7fe fd56 	bl	9064 <z_spin_lock_valid>
    a5b8:	b118      	cbz	r0, a5c2 <pend+0x2e>
	z_spin_lock_set_owner(l);
    a5ba:	481d      	ldr	r0, [pc, #116]	; (a630 <pend+0x9c>)
    a5bc:	f7fe fd72 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a5c0:	e015      	b.n	a5ee <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5c2:	f8df a070 	ldr.w	sl, [pc, #112]	; a634 <pend+0xa0>
    a5c6:	238e      	movs	r3, #142	; 0x8e
    a5c8:	4652      	mov	r2, sl
    a5ca:	491b      	ldr	r1, [pc, #108]	; (a638 <pend+0xa4>)
    a5cc:	481b      	ldr	r0, [pc, #108]	; (a63c <pend+0xa8>)
    a5ce:	f001 fe55 	bl	c27c <assert_print>
    a5d2:	4917      	ldr	r1, [pc, #92]	; (a630 <pend+0x9c>)
    a5d4:	481a      	ldr	r0, [pc, #104]	; (a640 <pend+0xac>)
    a5d6:	f001 fe51 	bl	c27c <assert_print>
    a5da:	218e      	movs	r1, #142	; 0x8e
    a5dc:	4650      	mov	r0, sl
    a5de:	f001 fe46 	bl	c26e <assert_post_action>
    a5e2:	e7ea      	b.n	a5ba <pend+0x26>
	__asm__ volatile(
    a5e4:	f387 8811 	msr	BASEPRI, r7
    a5e8:	f3bf 8f6f 	isb	sy
    a5ec:	2401      	movs	r4, #1
    a5ee:	b9c4      	cbnz	r4, a622 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    a5f0:	4631      	mov	r1, r6
    a5f2:	4628      	mov	r0, r5
    a5f4:	f7ff ff8c 	bl	a510 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5f8:	480d      	ldr	r0, [pc, #52]	; (a630 <pend+0x9c>)
    a5fa:	f7fe fd43 	bl	9084 <z_spin_unlock_valid>
    a5fe:	2800      	cmp	r0, #0
    a600:	d1f0      	bne.n	a5e4 <pend+0x50>
    a602:	4c0c      	ldr	r4, [pc, #48]	; (a634 <pend+0xa0>)
    a604:	23b9      	movs	r3, #185	; 0xb9
    a606:	4622      	mov	r2, r4
    a608:	490e      	ldr	r1, [pc, #56]	; (a644 <pend+0xb0>)
    a60a:	480c      	ldr	r0, [pc, #48]	; (a63c <pend+0xa8>)
    a60c:	f001 fe36 	bl	c27c <assert_print>
    a610:	4907      	ldr	r1, [pc, #28]	; (a630 <pend+0x9c>)
    a612:	480d      	ldr	r0, [pc, #52]	; (a648 <pend+0xb4>)
    a614:	f001 fe32 	bl	c27c <assert_print>
    a618:	21b9      	movs	r1, #185	; 0xb9
    a61a:	4620      	mov	r0, r4
    a61c:	f001 fe27 	bl	c26e <assert_post_action>
    a620:	e7e0      	b.n	a5e4 <pend+0x50>
	add_thread_timeout(thread, timeout);
    a622:	464a      	mov	r2, r9
    a624:	4643      	mov	r3, r8
    a626:	4628      	mov	r0, r5
    a628:	f7ff fa44 	bl	9ab4 <add_thread_timeout>
}
    a62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a630:	20001264 	.word	0x20001264
    a634:	0000dfbc 	.word	0x0000dfbc
    a638:	0000e01c 	.word	0x0000e01c
    a63c:	0000d63c 	.word	0x0000d63c
    a640:	0000e034 	.word	0x0000e034
    a644:	0000dfec 	.word	0x0000dfec
    a648:	0000e004 	.word	0x0000e004

0000a64c <z_pend_curr>:
{
    a64c:	b570      	push	{r4, r5, r6, lr}
    a64e:	4604      	mov	r4, r0
    a650:	460d      	mov	r5, r1
    a652:	4611      	mov	r1, r2
	pending_current = _current;
    a654:	4b0f      	ldr	r3, [pc, #60]	; (a694 <z_pend_curr+0x48>)
    a656:	6898      	ldr	r0, [r3, #8]
    a658:	4b0f      	ldr	r3, [pc, #60]	; (a698 <z_pend_curr+0x4c>)
    a65a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a660:	f7ff ff98 	bl	a594 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a664:	4620      	mov	r0, r4
    a666:	f7fe fd0d 	bl	9084 <z_spin_unlock_valid>
    a66a:	b118      	cbz	r0, a674 <z_pend_curr+0x28>
    a66c:	4628      	mov	r0, r5
    a66e:	f7f9 ffc7 	bl	4600 <arch_swap>
}
    a672:	bd70      	pop	{r4, r5, r6, pc}
    a674:	4e09      	ldr	r6, [pc, #36]	; (a69c <z_pend_curr+0x50>)
    a676:	23d0      	movs	r3, #208	; 0xd0
    a678:	4632      	mov	r2, r6
    a67a:	4909      	ldr	r1, [pc, #36]	; (a6a0 <z_pend_curr+0x54>)
    a67c:	4809      	ldr	r0, [pc, #36]	; (a6a4 <z_pend_curr+0x58>)
    a67e:	f001 fdfd 	bl	c27c <assert_print>
    a682:	4621      	mov	r1, r4
    a684:	4808      	ldr	r0, [pc, #32]	; (a6a8 <z_pend_curr+0x5c>)
    a686:	f001 fdf9 	bl	c27c <assert_print>
    a68a:	21d0      	movs	r1, #208	; 0xd0
    a68c:	4630      	mov	r0, r6
    a68e:	f001 fdee 	bl	c26e <assert_post_action>
    a692:	e7eb      	b.n	a66c <z_pend_curr+0x20>
    a694:	20001228 	.word	0x20001228
    a698:	20001260 	.word	0x20001260
    a69c:	0000dfbc 	.word	0x0000dfbc
    a6a0:	0000dfec 	.word	0x0000dfec
    a6a4:	0000d63c 	.word	0x0000d63c
    a6a8:	0000e004 	.word	0x0000e004

0000a6ac <z_set_prio>:
{
    a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6b0:	4604      	mov	r4, r0
    a6b2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    a6b4:	2500      	movs	r5, #0
	__asm__ volatile(
    a6b6:	f04f 0320 	mov.w	r3, #32
    a6ba:	f3ef 8811 	mrs	r8, BASEPRI
    a6be:	f383 8812 	msr	BASEPRI_MAX, r3
    a6c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6c6:	4844      	ldr	r0, [pc, #272]	; (a7d8 <z_set_prio+0x12c>)
    a6c8:	f7fe fccc 	bl	9064 <z_spin_lock_valid>
    a6cc:	b120      	cbz	r0, a6d8 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    a6ce:	4842      	ldr	r0, [pc, #264]	; (a7d8 <z_set_prio+0x12c>)
    a6d0:	f7fe fce8 	bl	90a4 <z_spin_lock_set_owner>
	bool need_sched = 0;
    a6d4:	2700      	movs	r7, #0
	return k;
    a6d6:	e01d      	b.n	a714 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6d8:	4f40      	ldr	r7, [pc, #256]	; (a7dc <z_set_prio+0x130>)
    a6da:	238e      	movs	r3, #142	; 0x8e
    a6dc:	463a      	mov	r2, r7
    a6de:	4940      	ldr	r1, [pc, #256]	; (a7e0 <z_set_prio+0x134>)
    a6e0:	4840      	ldr	r0, [pc, #256]	; (a7e4 <z_set_prio+0x138>)
    a6e2:	f001 fdcb 	bl	c27c <assert_print>
    a6e6:	493c      	ldr	r1, [pc, #240]	; (a7d8 <z_set_prio+0x12c>)
    a6e8:	483f      	ldr	r0, [pc, #252]	; (a7e8 <z_set_prio+0x13c>)
    a6ea:	f001 fdc7 	bl	c27c <assert_print>
    a6ee:	218e      	movs	r1, #142	; 0x8e
    a6f0:	4638      	mov	r0, r7
    a6f2:	f001 fdbc 	bl	c26e <assert_post_action>
    a6f6:	e7ea      	b.n	a6ce <z_set_prio+0x22>
		if (need_sched) {
    a6f8:	f013 0701 	ands.w	r7, r3, #1
    a6fc:	d116      	bne.n	a72c <z_set_prio+0x80>
			thread->base.prio = prio;
    a6fe:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a700:	4835      	ldr	r0, [pc, #212]	; (a7d8 <z_set_prio+0x12c>)
    a702:	f7fe fcbf 	bl	9084 <z_spin_unlock_valid>
    a706:	2800      	cmp	r0, #0
    a708:	d053      	beq.n	a7b2 <z_set_prio+0x106>
	__asm__ volatile(
    a70a:	f388 8811 	msr	BASEPRI, r8
    a70e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a712:	2501      	movs	r5, #1
    a714:	462b      	mov	r3, r5
    a716:	2d00      	cmp	r5, #0
    a718:	d15b      	bne.n	a7d2 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    a71a:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a71c:	f012 0f1f 	tst.w	r2, #31
    a720:	d1ea      	bne.n	a6f8 <z_set_prio+0x4c>
	return node->next != NULL;
    a722:	69a1      	ldr	r1, [r4, #24]
    a724:	2900      	cmp	r1, #0
    a726:	d1e7      	bne.n	a6f8 <z_set_prio+0x4c>
    a728:	2301      	movs	r3, #1
    a72a:	e7e5      	b.n	a6f8 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a72c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a730:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a732:	4621      	mov	r1, r4
    a734:	482d      	ldr	r0, [pc, #180]	; (a7ec <z_set_prio+0x140>)
    a736:	f7ff fb81 	bl	9e3c <z_priq_dumb_remove>
				thread->base.prio = prio;
    a73a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a73c:	7b63      	ldrb	r3, [r4, #13]
    a73e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a742:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a744:	4b2a      	ldr	r3, [pc, #168]	; (a7f0 <z_set_prio+0x144>)
    a746:	429c      	cmp	r4, r3
    a748:	d01f      	beq.n	a78a <z_set_prio+0xde>
	return list->head == list;
    a74a:	4b2a      	ldr	r3, [pc, #168]	; (a7f4 <z_set_prio+0x148>)
    a74c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a750:	429d      	cmp	r5, r3
    a752:	d02c      	beq.n	a7ae <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a754:	b16d      	cbz	r5, a772 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a756:	4629      	mov	r1, r5
    a758:	4620      	mov	r0, r4
    a75a:	f002 fcc6 	bl	d0ea <z_sched_prio_cmp>
    a75e:	2800      	cmp	r0, #0
    a760:	dc1f      	bgt.n	a7a2 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a762:	b135      	cbz	r5, a772 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    a764:	4b23      	ldr	r3, [pc, #140]	; (a7f4 <z_set_prio+0x148>)
    a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a768:	429d      	cmp	r5, r3
    a76a:	d002      	beq.n	a772 <z_set_prio+0xc6>
    a76c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a76e:	2d00      	cmp	r5, #0
    a770:	d1f0      	bne.n	a754 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    a772:	4b20      	ldr	r3, [pc, #128]	; (a7f4 <z_set_prio+0x148>)
    a774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a776:	f103 0120 	add.w	r1, r3, #32
    a77a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a77c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a77e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a780:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    a782:	2001      	movs	r0, #1
    a784:	f7ff fb7e 	bl	9e84 <update_cache>
    a788:	e7ba      	b.n	a700 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a78a:	4d1b      	ldr	r5, [pc, #108]	; (a7f8 <z_set_prio+0x14c>)
    a78c:	23ba      	movs	r3, #186	; 0xba
    a78e:	462a      	mov	r2, r5
    a790:	491a      	ldr	r1, [pc, #104]	; (a7fc <z_set_prio+0x150>)
    a792:	4814      	ldr	r0, [pc, #80]	; (a7e4 <z_set_prio+0x138>)
    a794:	f001 fd72 	bl	c27c <assert_print>
    a798:	21ba      	movs	r1, #186	; 0xba
    a79a:	4628      	mov	r0, r5
    a79c:	f001 fd67 	bl	c26e <assert_post_action>
    a7a0:	e7d3      	b.n	a74a <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    a7a2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a7a4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a7a6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a7a8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a7aa:	606c      	str	r4, [r5, #4]
}
    a7ac:	e7e9      	b.n	a782 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a7ae:	2500      	movs	r5, #0
    a7b0:	e7d0      	b.n	a754 <z_set_prio+0xa8>
    a7b2:	4d0a      	ldr	r5, [pc, #40]	; (a7dc <z_set_prio+0x130>)
    a7b4:	23b9      	movs	r3, #185	; 0xb9
    a7b6:	462a      	mov	r2, r5
    a7b8:	4911      	ldr	r1, [pc, #68]	; (a800 <z_set_prio+0x154>)
    a7ba:	480a      	ldr	r0, [pc, #40]	; (a7e4 <z_set_prio+0x138>)
    a7bc:	f001 fd5e 	bl	c27c <assert_print>
    a7c0:	4905      	ldr	r1, [pc, #20]	; (a7d8 <z_set_prio+0x12c>)
    a7c2:	4810      	ldr	r0, [pc, #64]	; (a804 <z_set_prio+0x158>)
    a7c4:	f001 fd5a 	bl	c27c <assert_print>
    a7c8:	21b9      	movs	r1, #185	; 0xb9
    a7ca:	4628      	mov	r0, r5
    a7cc:	f001 fd4f 	bl	c26e <assert_post_action>
    a7d0:	e79b      	b.n	a70a <z_set_prio+0x5e>
}
    a7d2:	4638      	mov	r0, r7
    a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7d8:	20001264 	.word	0x20001264
    a7dc:	0000dfbc 	.word	0x0000dfbc
    a7e0:	0000e01c 	.word	0x0000e01c
    a7e4:	0000d63c 	.word	0x0000d63c
    a7e8:	0000e034 	.word	0x0000e034
    a7ec:	20001248 	.word	0x20001248
    a7f0:	20000540 	.word	0x20000540
    a7f4:	20001228 	.word	0x20001228
    a7f8:	0000f894 	.word	0x0000f894
    a7fc:	0000f8d0 	.word	0x0000f8d0
    a800:	0000dfec 	.word	0x0000dfec
    a804:	0000e004 	.word	0x0000e004

0000a808 <z_impl_k_thread_suspend>:
{
    a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a80a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a80c:	3018      	adds	r0, #24
    a80e:	f000 fdcf 	bl	b3b0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a812:	2500      	movs	r5, #0
	__asm__ volatile(
    a814:	f04f 0320 	mov.w	r3, #32
    a818:	f3ef 8611 	mrs	r6, BASEPRI
    a81c:	f383 8812 	msr	BASEPRI_MAX, r3
    a820:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a824:	482d      	ldr	r0, [pc, #180]	; (a8dc <z_impl_k_thread_suspend+0xd4>)
    a826:	f7fe fc1d 	bl	9064 <z_spin_lock_valid>
    a82a:	b118      	cbz	r0, a834 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    a82c:	482b      	ldr	r0, [pc, #172]	; (a8dc <z_impl_k_thread_suspend+0xd4>)
    a82e:	f7fe fc39 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a832:	e01c      	b.n	a86e <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a834:	4f2a      	ldr	r7, [pc, #168]	; (a8e0 <z_impl_k_thread_suspend+0xd8>)
    a836:	238e      	movs	r3, #142	; 0x8e
    a838:	463a      	mov	r2, r7
    a83a:	492a      	ldr	r1, [pc, #168]	; (a8e4 <z_impl_k_thread_suspend+0xdc>)
    a83c:	482a      	ldr	r0, [pc, #168]	; (a8e8 <z_impl_k_thread_suspend+0xe0>)
    a83e:	f001 fd1d 	bl	c27c <assert_print>
    a842:	4926      	ldr	r1, [pc, #152]	; (a8dc <z_impl_k_thread_suspend+0xd4>)
    a844:	4829      	ldr	r0, [pc, #164]	; (a8ec <z_impl_k_thread_suspend+0xe4>)
    a846:	f001 fd19 	bl	c27c <assert_print>
    a84a:	218e      	movs	r1, #142	; 0x8e
    a84c:	4638      	mov	r0, r7
    a84e:	f001 fd0e 	bl	c26e <assert_post_action>
    a852:	e7eb      	b.n	a82c <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a858:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a85a:	4621      	mov	r1, r4
    a85c:	4824      	ldr	r0, [pc, #144]	; (a8f0 <z_impl_k_thread_suspend+0xe8>)
    a85e:	f7ff faed 	bl	9e3c <z_priq_dumb_remove>
}
    a862:	e00a      	b.n	a87a <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    a864:	f386 8811 	msr	BASEPRI, r6
    a868:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a86c:	2501      	movs	r5, #1
    a86e:	bb2d      	cbnz	r5, a8bc <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    a870:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a872:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a876:	2b00      	cmp	r3, #0
    a878:	dbec      	blt.n	a854 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a87a:	7b63      	ldrb	r3, [r4, #13]
    a87c:	f043 0310 	orr.w	r3, r3, #16
    a880:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a882:	4b1c      	ldr	r3, [pc, #112]	; (a8f4 <z_impl_k_thread_suspend+0xec>)
    a884:	6898      	ldr	r0, [r3, #8]
    a886:	42a0      	cmp	r0, r4
    a888:	bf14      	ite	ne
    a88a:	2000      	movne	r0, #0
    a88c:	2001      	moveq	r0, #1
    a88e:	f7ff faf9 	bl	9e84 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a892:	4812      	ldr	r0, [pc, #72]	; (a8dc <z_impl_k_thread_suspend+0xd4>)
    a894:	f7fe fbf6 	bl	9084 <z_spin_unlock_valid>
    a898:	2800      	cmp	r0, #0
    a89a:	d1e3      	bne.n	a864 <z_impl_k_thread_suspend+0x5c>
    a89c:	4d10      	ldr	r5, [pc, #64]	; (a8e0 <z_impl_k_thread_suspend+0xd8>)
    a89e:	23b9      	movs	r3, #185	; 0xb9
    a8a0:	462a      	mov	r2, r5
    a8a2:	4915      	ldr	r1, [pc, #84]	; (a8f8 <z_impl_k_thread_suspend+0xf0>)
    a8a4:	4810      	ldr	r0, [pc, #64]	; (a8e8 <z_impl_k_thread_suspend+0xe0>)
    a8a6:	f001 fce9 	bl	c27c <assert_print>
    a8aa:	490c      	ldr	r1, [pc, #48]	; (a8dc <z_impl_k_thread_suspend+0xd4>)
    a8ac:	4813      	ldr	r0, [pc, #76]	; (a8fc <z_impl_k_thread_suspend+0xf4>)
    a8ae:	f001 fce5 	bl	c27c <assert_print>
    a8b2:	21b9      	movs	r1, #185	; 0xb9
    a8b4:	4628      	mov	r0, r5
    a8b6:	f001 fcda 	bl	c26e <assert_post_action>
    a8ba:	e7d3      	b.n	a864 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    a8bc:	4b0d      	ldr	r3, [pc, #52]	; (a8f4 <z_impl_k_thread_suspend+0xec>)
    a8be:	689b      	ldr	r3, [r3, #8]
    a8c0:	42a3      	cmp	r3, r4
    a8c2:	d000      	beq.n	a8c6 <z_impl_k_thread_suspend+0xbe>
}
    a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    a8c6:	f04f 0320 	mov.w	r3, #32
    a8ca:	f3ef 8011 	mrs	r0, BASEPRI
    a8ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a8d6:	f002 fc12 	bl	d0fe <z_reschedule_irqlock>
    a8da:	e7f3      	b.n	a8c4 <z_impl_k_thread_suspend+0xbc>
    a8dc:	20001264 	.word	0x20001264
    a8e0:	0000dfbc 	.word	0x0000dfbc
    a8e4:	0000e01c 	.word	0x0000e01c
    a8e8:	0000d63c 	.word	0x0000d63c
    a8ec:	0000e034 	.word	0x0000e034
    a8f0:	20001248 	.word	0x20001248
    a8f4:	20001228 	.word	0x20001228
    a8f8:	0000dfec 	.word	0x0000dfec
    a8fc:	0000e004 	.word	0x0000e004

0000a900 <k_sched_unlock>:
{
    a900:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    a902:	2400      	movs	r4, #0
    a904:	f04f 0320 	mov.w	r3, #32
    a908:	f3ef 8511 	mrs	r5, BASEPRI
    a90c:	f383 8812 	msr	BASEPRI_MAX, r3
    a910:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a914:	4838      	ldr	r0, [pc, #224]	; (a9f8 <k_sched_unlock+0xf8>)
    a916:	f7fe fba5 	bl	9064 <z_spin_lock_valid>
    a91a:	b118      	cbz	r0, a924 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    a91c:	4836      	ldr	r0, [pc, #216]	; (a9f8 <k_sched_unlock+0xf8>)
    a91e:	f7fe fbc1 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    a922:	e036      	b.n	a992 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a924:	4e35      	ldr	r6, [pc, #212]	; (a9fc <k_sched_unlock+0xfc>)
    a926:	238e      	movs	r3, #142	; 0x8e
    a928:	4632      	mov	r2, r6
    a92a:	4935      	ldr	r1, [pc, #212]	; (aa00 <k_sched_unlock+0x100>)
    a92c:	4835      	ldr	r0, [pc, #212]	; (aa04 <k_sched_unlock+0x104>)
    a92e:	f001 fca5 	bl	c27c <assert_print>
    a932:	4931      	ldr	r1, [pc, #196]	; (a9f8 <k_sched_unlock+0xf8>)
    a934:	4834      	ldr	r0, [pc, #208]	; (aa08 <k_sched_unlock+0x108>)
    a936:	f001 fca1 	bl	c27c <assert_print>
    a93a:	218e      	movs	r1, #142	; 0x8e
    a93c:	4630      	mov	r0, r6
    a93e:	f001 fc96 	bl	c26e <assert_post_action>
    a942:	e7eb      	b.n	a91c <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a944:	4c31      	ldr	r4, [pc, #196]	; (aa0c <k_sched_unlock+0x10c>)
    a946:	f240 33bb 	movw	r3, #955	; 0x3bb
    a94a:	4622      	mov	r2, r4
    a94c:	4930      	ldr	r1, [pc, #192]	; (aa10 <k_sched_unlock+0x110>)
    a94e:	482d      	ldr	r0, [pc, #180]	; (aa04 <k_sched_unlock+0x104>)
    a950:	f001 fc94 	bl	c27c <assert_print>
    a954:	482f      	ldr	r0, [pc, #188]	; (aa14 <k_sched_unlock+0x114>)
    a956:	f001 fc91 	bl	c27c <assert_print>
    a95a:	f240 31bb 	movw	r1, #955	; 0x3bb
    a95e:	4620      	mov	r0, r4
    a960:	f001 fc85 	bl	c26e <assert_post_action>
    a964:	e01b      	b.n	a99e <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    a966:	4c29      	ldr	r4, [pc, #164]	; (aa0c <k_sched_unlock+0x10c>)
    a968:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    a96c:	4622      	mov	r2, r4
    a96e:	492a      	ldr	r1, [pc, #168]	; (aa18 <k_sched_unlock+0x118>)
    a970:	4824      	ldr	r0, [pc, #144]	; (aa04 <k_sched_unlock+0x104>)
    a972:	f001 fc83 	bl	c27c <assert_print>
    a976:	4827      	ldr	r0, [pc, #156]	; (aa14 <k_sched_unlock+0x114>)
    a978:	f001 fc80 	bl	c27c <assert_print>
    a97c:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    a980:	4620      	mov	r0, r4
    a982:	f001 fc74 	bl	c26e <assert_post_action>
    a986:	e00e      	b.n	a9a6 <k_sched_unlock+0xa6>
	__asm__ volatile(
    a988:	f385 8811 	msr	BASEPRI, r5
    a98c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a990:	2401      	movs	r4, #1
    a992:	bb2c      	cbnz	r4, a9e0 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a994:	4b21      	ldr	r3, [pc, #132]	; (aa1c <k_sched_unlock+0x11c>)
    a996:	689b      	ldr	r3, [r3, #8]
    a998:	7bdb      	ldrb	r3, [r3, #15]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d0d2      	beq.n	a944 <k_sched_unlock+0x44>
    a99e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d1df      	bne.n	a966 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    a9a6:	4b1d      	ldr	r3, [pc, #116]	; (aa1c <k_sched_unlock+0x11c>)
    a9a8:	689a      	ldr	r2, [r3, #8]
    a9aa:	7bd3      	ldrb	r3, [r2, #15]
    a9ac:	3301      	adds	r3, #1
    a9ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a9b0:	2000      	movs	r0, #0
    a9b2:	f7ff fa67 	bl	9e84 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9b6:	4810      	ldr	r0, [pc, #64]	; (a9f8 <k_sched_unlock+0xf8>)
    a9b8:	f7fe fb64 	bl	9084 <z_spin_unlock_valid>
    a9bc:	2800      	cmp	r0, #0
    a9be:	d1e3      	bne.n	a988 <k_sched_unlock+0x88>
    a9c0:	4c0e      	ldr	r4, [pc, #56]	; (a9fc <k_sched_unlock+0xfc>)
    a9c2:	23b9      	movs	r3, #185	; 0xb9
    a9c4:	4622      	mov	r2, r4
    a9c6:	4916      	ldr	r1, [pc, #88]	; (aa20 <k_sched_unlock+0x120>)
    a9c8:	480e      	ldr	r0, [pc, #56]	; (aa04 <k_sched_unlock+0x104>)
    a9ca:	f001 fc57 	bl	c27c <assert_print>
    a9ce:	490a      	ldr	r1, [pc, #40]	; (a9f8 <k_sched_unlock+0xf8>)
    a9d0:	4814      	ldr	r0, [pc, #80]	; (aa24 <k_sched_unlock+0x124>)
    a9d2:	f001 fc53 	bl	c27c <assert_print>
    a9d6:	21b9      	movs	r1, #185	; 0xb9
    a9d8:	4620      	mov	r0, r4
    a9da:	f001 fc48 	bl	c26e <assert_post_action>
    a9de:	e7d3      	b.n	a988 <k_sched_unlock+0x88>
	__asm__ volatile(
    a9e0:	f04f 0320 	mov.w	r3, #32
    a9e4:	f3ef 8011 	mrs	r0, BASEPRI
    a9e8:	f383 8812 	msr	BASEPRI_MAX, r3
    a9ec:	f3bf 8f6f 	isb	sy
    a9f0:	f002 fb85 	bl	d0fe <z_reschedule_irqlock>
}
    a9f4:	bd70      	pop	{r4, r5, r6, pc}
    a9f6:	bf00      	nop
    a9f8:	20001264 	.word	0x20001264
    a9fc:	0000dfbc 	.word	0x0000dfbc
    aa00:	0000e01c 	.word	0x0000e01c
    aa04:	0000d63c 	.word	0x0000d63c
    aa08:	0000e034 	.word	0x0000e034
    aa0c:	0000f894 	.word	0x0000f894
    aa10:	0000f91c 	.word	0x0000f91c
    aa14:	0000f7ec 	.word	0x0000f7ec
    aa18:	0000f6a4 	.word	0x0000f6a4
    aa1c:	20001228 	.word	0x20001228
    aa20:	0000dfec 	.word	0x0000dfec
    aa24:	0000e004 	.word	0x0000e004

0000aa28 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    aa2a:	7b43      	ldrb	r3, [r0, #13]
    aa2c:	f013 0f08 	tst.w	r3, #8
    aa30:	d145      	bne.n	aabe <end_thread+0x96>
    aa32:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    aa34:	f043 0308 	orr.w	r3, r3, #8
    aa38:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    aa3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    aa3e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    aa40:	f013 0f80 	tst.w	r3, #128	; 0x80
    aa44:	d12d      	bne.n	aaa2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    aa46:	68ab      	ldr	r3, [r5, #8]
    aa48:	b15b      	cbz	r3, aa62 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa4a:	4628      	mov	r0, r5
    aa4c:	f7ff f818 	bl	9a80 <pended_on_thread>
    aa50:	4629      	mov	r1, r5
    aa52:	f7ff f9f3 	bl	9e3c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    aa56:	7b6b      	ldrb	r3, [r5, #13]
    aa58:	f023 0302 	bic.w	r3, r3, #2
    aa5c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    aa5e:	2300      	movs	r3, #0
    aa60:	60ab      	str	r3, [r5, #8]
    aa62:	f105 0018 	add.w	r0, r5, #24
    aa66:	f000 fca3 	bl	b3b0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    aa6a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    aa6e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa70:	42bc      	cmp	r4, r7
    aa72:	d01e      	beq.n	aab2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    aa74:	b1ec      	cbz	r4, aab2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa76:	4620      	mov	r0, r4
    aa78:	f7ff f802 	bl	9a80 <pended_on_thread>
    aa7c:	4621      	mov	r1, r4
    aa7e:	f7ff f9dd 	bl	9e3c <z_priq_dumb_remove>
    aa82:	7b63      	ldrb	r3, [r4, #13]
    aa84:	f023 0302 	bic.w	r3, r3, #2
    aa88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aa8a:	2600      	movs	r6, #0
    aa8c:	60a6      	str	r6, [r4, #8]
    aa8e:	f104 0018 	add.w	r0, r4, #24
    aa92:	f000 fc8d 	bl	b3b0 <z_abort_timeout>
    aa96:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    aa9a:	4620      	mov	r0, r4
    aa9c:	f7ff fb4c 	bl	a138 <ready_thread>
    aaa0:	e7e5      	b.n	aa6e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aaa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aaa6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    aaa8:	4601      	mov	r1, r0
    aaaa:	4805      	ldr	r0, [pc, #20]	; (aac0 <end_thread+0x98>)
    aaac:	f7ff f9c6 	bl	9e3c <z_priq_dumb_remove>
}
    aab0:	e7c9      	b.n	aa46 <end_thread+0x1e>
		update_cache(1);
    aab2:	2001      	movs	r0, #1
    aab4:	f7ff f9e6 	bl	9e84 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    aab8:	4628      	mov	r0, r5
    aaba:	f7fe fafb 	bl	90b4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    aabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aac0:	20001248 	.word	0x20001248

0000aac4 <z_unpend1_no_timeout>:
{
    aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aac6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    aac8:	2500      	movs	r5, #0
    aaca:	f04f 0320 	mov.w	r3, #32
    aace:	f3ef 8711 	mrs	r7, BASEPRI
    aad2:	f383 8812 	msr	BASEPRI_MAX, r3
    aad6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aada:	4823      	ldr	r0, [pc, #140]	; (ab68 <z_unpend1_no_timeout+0xa4>)
    aadc:	f7fe fac2 	bl	9064 <z_spin_lock_valid>
    aae0:	b120      	cbz	r0, aaec <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    aae2:	4821      	ldr	r0, [pc, #132]	; (ab68 <z_unpend1_no_timeout+0xa4>)
    aae4:	f7fe fade 	bl	90a4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    aae8:	2400      	movs	r4, #0
	return k;
    aaea:	e018      	b.n	ab1e <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aaec:	4c1f      	ldr	r4, [pc, #124]	; (ab6c <z_unpend1_no_timeout+0xa8>)
    aaee:	238e      	movs	r3, #142	; 0x8e
    aaf0:	4622      	mov	r2, r4
    aaf2:	491f      	ldr	r1, [pc, #124]	; (ab70 <z_unpend1_no_timeout+0xac>)
    aaf4:	481f      	ldr	r0, [pc, #124]	; (ab74 <z_unpend1_no_timeout+0xb0>)
    aaf6:	f001 fbc1 	bl	c27c <assert_print>
    aafa:	491b      	ldr	r1, [pc, #108]	; (ab68 <z_unpend1_no_timeout+0xa4>)
    aafc:	481e      	ldr	r0, [pc, #120]	; (ab78 <z_unpend1_no_timeout+0xb4>)
    aafe:	f001 fbbd 	bl	c27c <assert_print>
    ab02:	218e      	movs	r1, #142	; 0x8e
    ab04:	4620      	mov	r0, r4
    ab06:	f001 fbb2 	bl	c26e <assert_post_action>
    ab0a:	e7ea      	b.n	aae2 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ab0c:	4816      	ldr	r0, [pc, #88]	; (ab68 <z_unpend1_no_timeout+0xa4>)
    ab0e:	f7fe fab9 	bl	9084 <z_spin_unlock_valid>
    ab12:	b1b8      	cbz	r0, ab44 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    ab14:	f387 8811 	msr	BASEPRI, r7
    ab18:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ab1c:	2501      	movs	r5, #1
    ab1e:	bb0d      	cbnz	r5, ab64 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    ab20:	4630      	mov	r0, r6
    ab22:	f002 fb01 	bl	d128 <z_priq_dumb_best>
		if (thread != NULL) {
    ab26:	4604      	mov	r4, r0
    ab28:	2800      	cmp	r0, #0
    ab2a:	d0ef      	beq.n	ab0c <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ab2c:	f7fe ffa8 	bl	9a80 <pended_on_thread>
    ab30:	4621      	mov	r1, r4
    ab32:	f7ff f983 	bl	9e3c <z_priq_dumb_remove>
    ab36:	7b63      	ldrb	r3, [r4, #13]
    ab38:	f023 0302 	bic.w	r3, r3, #2
    ab3c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ab3e:	2300      	movs	r3, #0
    ab40:	60a3      	str	r3, [r4, #8]
}
    ab42:	e7e3      	b.n	ab0c <z_unpend1_no_timeout+0x48>
    ab44:	4d09      	ldr	r5, [pc, #36]	; (ab6c <z_unpend1_no_timeout+0xa8>)
    ab46:	23b9      	movs	r3, #185	; 0xb9
    ab48:	462a      	mov	r2, r5
    ab4a:	490c      	ldr	r1, [pc, #48]	; (ab7c <z_unpend1_no_timeout+0xb8>)
    ab4c:	4809      	ldr	r0, [pc, #36]	; (ab74 <z_unpend1_no_timeout+0xb0>)
    ab4e:	f001 fb95 	bl	c27c <assert_print>
    ab52:	4905      	ldr	r1, [pc, #20]	; (ab68 <z_unpend1_no_timeout+0xa4>)
    ab54:	480a      	ldr	r0, [pc, #40]	; (ab80 <z_unpend1_no_timeout+0xbc>)
    ab56:	f001 fb91 	bl	c27c <assert_print>
    ab5a:	21b9      	movs	r1, #185	; 0xb9
    ab5c:	4628      	mov	r0, r5
    ab5e:	f001 fb86 	bl	c26e <assert_post_action>
    ab62:	e7d7      	b.n	ab14 <z_unpend1_no_timeout+0x50>
}
    ab64:	4620      	mov	r0, r4
    ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab68:	20001264 	.word	0x20001264
    ab6c:	0000dfbc 	.word	0x0000dfbc
    ab70:	0000e01c 	.word	0x0000e01c
    ab74:	0000d63c 	.word	0x0000d63c
    ab78:	0000e034 	.word	0x0000e034
    ab7c:	0000dfec 	.word	0x0000dfec
    ab80:	0000e004 	.word	0x0000e004

0000ab84 <z_unpend_first_thread>:
{
    ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab86:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    ab88:	2500      	movs	r5, #0
	__asm__ volatile(
    ab8a:	f04f 0320 	mov.w	r3, #32
    ab8e:	f3ef 8711 	mrs	r7, BASEPRI
    ab92:	f383 8812 	msr	BASEPRI_MAX, r3
    ab96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab9a:	4825      	ldr	r0, [pc, #148]	; (ac30 <z_unpend_first_thread+0xac>)
    ab9c:	f7fe fa62 	bl	9064 <z_spin_lock_valid>
    aba0:	b120      	cbz	r0, abac <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    aba2:	4823      	ldr	r0, [pc, #140]	; (ac30 <z_unpend_first_thread+0xac>)
    aba4:	f7fe fa7e 	bl	90a4 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    aba8:	2400      	movs	r4, #0
	return k;
    abaa:	e018      	b.n	abde <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    abac:	4c21      	ldr	r4, [pc, #132]	; (ac34 <z_unpend_first_thread+0xb0>)
    abae:	238e      	movs	r3, #142	; 0x8e
    abb0:	4622      	mov	r2, r4
    abb2:	4921      	ldr	r1, [pc, #132]	; (ac38 <z_unpend_first_thread+0xb4>)
    abb4:	4821      	ldr	r0, [pc, #132]	; (ac3c <z_unpend_first_thread+0xb8>)
    abb6:	f001 fb61 	bl	c27c <assert_print>
    abba:	491d      	ldr	r1, [pc, #116]	; (ac30 <z_unpend_first_thread+0xac>)
    abbc:	4820      	ldr	r0, [pc, #128]	; (ac40 <z_unpend_first_thread+0xbc>)
    abbe:	f001 fb5d 	bl	c27c <assert_print>
    abc2:	218e      	movs	r1, #142	; 0x8e
    abc4:	4620      	mov	r0, r4
    abc6:	f001 fb52 	bl	c26e <assert_post_action>
    abca:	e7ea      	b.n	aba2 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abcc:	4818      	ldr	r0, [pc, #96]	; (ac30 <z_unpend_first_thread+0xac>)
    abce:	f7fe fa59 	bl	9084 <z_spin_unlock_valid>
    abd2:	b1d8      	cbz	r0, ac0c <z_unpend_first_thread+0x88>
	__asm__ volatile(
    abd4:	f387 8811 	msr	BASEPRI, r7
    abd8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    abdc:	2501      	movs	r5, #1
    abde:	bb2d      	cbnz	r5, ac2c <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    abe0:	4630      	mov	r0, r6
    abe2:	f002 faa1 	bl	d128 <z_priq_dumb_best>
		if (thread != NULL) {
    abe6:	4604      	mov	r4, r0
    abe8:	2800      	cmp	r0, #0
    abea:	d0ef      	beq.n	abcc <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    abec:	f7fe ff48 	bl	9a80 <pended_on_thread>
    abf0:	4621      	mov	r1, r4
    abf2:	f7ff f923 	bl	9e3c <z_priq_dumb_remove>
    abf6:	7b63      	ldrb	r3, [r4, #13]
    abf8:	f023 0302 	bic.w	r3, r3, #2
    abfc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    abfe:	2300      	movs	r3, #0
    ac00:	60a3      	str	r3, [r4, #8]
    ac02:	f104 0018 	add.w	r0, r4, #24
    ac06:	f000 fbd3 	bl	b3b0 <z_abort_timeout>
    ac0a:	e7df      	b.n	abcc <z_unpend_first_thread+0x48>
    ac0c:	4d09      	ldr	r5, [pc, #36]	; (ac34 <z_unpend_first_thread+0xb0>)
    ac0e:	23b9      	movs	r3, #185	; 0xb9
    ac10:	462a      	mov	r2, r5
    ac12:	490c      	ldr	r1, [pc, #48]	; (ac44 <z_unpend_first_thread+0xc0>)
    ac14:	4809      	ldr	r0, [pc, #36]	; (ac3c <z_unpend_first_thread+0xb8>)
    ac16:	f001 fb31 	bl	c27c <assert_print>
    ac1a:	4905      	ldr	r1, [pc, #20]	; (ac30 <z_unpend_first_thread+0xac>)
    ac1c:	480a      	ldr	r0, [pc, #40]	; (ac48 <z_unpend_first_thread+0xc4>)
    ac1e:	f001 fb2d 	bl	c27c <assert_print>
    ac22:	21b9      	movs	r1, #185	; 0xb9
    ac24:	4628      	mov	r0, r5
    ac26:	f001 fb22 	bl	c26e <assert_post_action>
    ac2a:	e7d3      	b.n	abd4 <z_unpend_first_thread+0x50>
}
    ac2c:	4620      	mov	r0, r4
    ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac30:	20001264 	.word	0x20001264
    ac34:	0000dfbc 	.word	0x0000dfbc
    ac38:	0000e01c 	.word	0x0000e01c
    ac3c:	0000d63c 	.word	0x0000d63c
    ac40:	0000e034 	.word	0x0000e034
    ac44:	0000dfec 	.word	0x0000dfec
    ac48:	0000e004 	.word	0x0000e004

0000ac4c <z_sched_init>:
{
    ac4c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    ac4e:	4804      	ldr	r0, [pc, #16]	; (ac60 <z_sched_init+0x14>)
    ac50:	f002 fa71 	bl	d136 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    ac54:	2100      	movs	r1, #0
    ac56:	4608      	mov	r0, r1
    ac58:	f7fe ff50 	bl	9afc <k_sched_time_slice_set>
}
    ac5c:	bd08      	pop	{r3, pc}
    ac5e:	bf00      	nop
    ac60:	20001244 	.word	0x20001244

0000ac64 <z_impl_k_yield>:
{
    ac64:	b570      	push	{r4, r5, r6, lr}
    ac66:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d149      	bne.n	ad02 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    ac6e:	f04f 0320 	mov.w	r3, #32
    ac72:	f3ef 8611 	mrs	r6, BASEPRI
    ac76:	f383 8812 	msr	BASEPRI_MAX, r3
    ac7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac7e:	4843      	ldr	r0, [pc, #268]	; (ad8c <z_impl_k_yield+0x128>)
    ac80:	f7fe f9f0 	bl	9064 <z_spin_lock_valid>
    ac84:	2800      	cmp	r0, #0
    ac86:	d04d      	beq.n	ad24 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    ac88:	4840      	ldr	r0, [pc, #256]	; (ad8c <z_impl_k_yield+0x128>)
    ac8a:	f7fe fa0b 	bl	90a4 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    ac8e:	4c40      	ldr	r4, [pc, #256]	; (ad90 <z_impl_k_yield+0x12c>)
    ac90:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ac92:	7b4b      	ldrb	r3, [r1, #13]
    ac94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ac98:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ac9a:	f104 0020 	add.w	r0, r4, #32
    ac9e:	f7ff f8cd 	bl	9e3c <z_priq_dumb_remove>
	queue_thread(_current);
    aca2:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    aca4:	7b6b      	ldrb	r3, [r5, #13]
    aca6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    acaa:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    acac:	4b39      	ldr	r3, [pc, #228]	; (ad94 <z_impl_k_yield+0x130>)
    acae:	429d      	cmp	r5, r3
    acb0:	d048      	beq.n	ad44 <z_impl_k_yield+0xe0>
	return list->head == list;
    acb2:	4b37      	ldr	r3, [pc, #220]	; (ad90 <z_impl_k_yield+0x12c>)
    acb4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    acb8:	429c      	cmp	r4, r3
    acba:	d055      	beq.n	ad68 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    acbc:	b16c      	cbz	r4, acda <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    acbe:	4621      	mov	r1, r4
    acc0:	4628      	mov	r0, r5
    acc2:	f002 fa12 	bl	d0ea <z_sched_prio_cmp>
    acc6:	2800      	cmp	r0, #0
    acc8:	dc48      	bgt.n	ad5c <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    acca:	b134      	cbz	r4, acda <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    accc:	4b30      	ldr	r3, [pc, #192]	; (ad90 <z_impl_k_yield+0x12c>)
    acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acd0:	429c      	cmp	r4, r3
    acd2:	d002      	beq.n	acda <z_impl_k_yield+0x76>
    acd4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    acd6:	2c00      	cmp	r4, #0
    acd8:	d1f0      	bne.n	acbc <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    acda:	4b2d      	ldr	r3, [pc, #180]	; (ad90 <z_impl_k_yield+0x12c>)
    acdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    acde:	f103 0120 	add.w	r1, r3, #32
    ace2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    ace4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    ace6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    ace8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    acea:	2001      	movs	r0, #1
    acec:	f7ff f8ca 	bl	9e84 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    acf0:	4826      	ldr	r0, [pc, #152]	; (ad8c <z_impl_k_yield+0x128>)
    acf2:	f7fe f9c7 	bl	9084 <z_spin_unlock_valid>
    acf6:	2800      	cmp	r0, #0
    acf8:	d038      	beq.n	ad6c <z_impl_k_yield+0x108>
    acfa:	4630      	mov	r0, r6
    acfc:	f7f9 fc80 	bl	4600 <arch_swap>
}
    ad00:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ad02:	4c25      	ldr	r4, [pc, #148]	; (ad98 <z_impl_k_yield+0x134>)
    ad04:	f240 5332 	movw	r3, #1330	; 0x532
    ad08:	4622      	mov	r2, r4
    ad0a:	4924      	ldr	r1, [pc, #144]	; (ad9c <z_impl_k_yield+0x138>)
    ad0c:	4824      	ldr	r0, [pc, #144]	; (ada0 <z_impl_k_yield+0x13c>)
    ad0e:	f001 fab5 	bl	c27c <assert_print>
    ad12:	4824      	ldr	r0, [pc, #144]	; (ada4 <z_impl_k_yield+0x140>)
    ad14:	f001 fab2 	bl	c27c <assert_print>
    ad18:	f240 5132 	movw	r1, #1330	; 0x532
    ad1c:	4620      	mov	r0, r4
    ad1e:	f001 faa6 	bl	c26e <assert_post_action>
    ad22:	e7a4      	b.n	ac6e <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad24:	4c20      	ldr	r4, [pc, #128]	; (ada8 <z_impl_k_yield+0x144>)
    ad26:	238e      	movs	r3, #142	; 0x8e
    ad28:	4622      	mov	r2, r4
    ad2a:	4920      	ldr	r1, [pc, #128]	; (adac <z_impl_k_yield+0x148>)
    ad2c:	481c      	ldr	r0, [pc, #112]	; (ada0 <z_impl_k_yield+0x13c>)
    ad2e:	f001 faa5 	bl	c27c <assert_print>
    ad32:	4916      	ldr	r1, [pc, #88]	; (ad8c <z_impl_k_yield+0x128>)
    ad34:	481e      	ldr	r0, [pc, #120]	; (adb0 <z_impl_k_yield+0x14c>)
    ad36:	f001 faa1 	bl	c27c <assert_print>
    ad3a:	218e      	movs	r1, #142	; 0x8e
    ad3c:	4620      	mov	r0, r4
    ad3e:	f001 fa96 	bl	c26e <assert_post_action>
    ad42:	e7a1      	b.n	ac88 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ad44:	4c14      	ldr	r4, [pc, #80]	; (ad98 <z_impl_k_yield+0x134>)
    ad46:	23ba      	movs	r3, #186	; 0xba
    ad48:	4622      	mov	r2, r4
    ad4a:	491a      	ldr	r1, [pc, #104]	; (adb4 <z_impl_k_yield+0x150>)
    ad4c:	4814      	ldr	r0, [pc, #80]	; (ada0 <z_impl_k_yield+0x13c>)
    ad4e:	f001 fa95 	bl	c27c <assert_print>
    ad52:	21ba      	movs	r1, #186	; 0xba
    ad54:	4620      	mov	r0, r4
    ad56:	f001 fa8a 	bl	c26e <assert_post_action>
    ad5a:	e7aa      	b.n	acb2 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    ad5c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ad5e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ad60:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ad62:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ad64:	6065      	str	r5, [r4, #4]
}
    ad66:	e7c0      	b.n	acea <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ad68:	2400      	movs	r4, #0
    ad6a:	e7a7      	b.n	acbc <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad6c:	4c0e      	ldr	r4, [pc, #56]	; (ada8 <z_impl_k_yield+0x144>)
    ad6e:	23d0      	movs	r3, #208	; 0xd0
    ad70:	4622      	mov	r2, r4
    ad72:	4911      	ldr	r1, [pc, #68]	; (adb8 <z_impl_k_yield+0x154>)
    ad74:	480a      	ldr	r0, [pc, #40]	; (ada0 <z_impl_k_yield+0x13c>)
    ad76:	f001 fa81 	bl	c27c <assert_print>
    ad7a:	4904      	ldr	r1, [pc, #16]	; (ad8c <z_impl_k_yield+0x128>)
    ad7c:	480f      	ldr	r0, [pc, #60]	; (adbc <z_impl_k_yield+0x158>)
    ad7e:	f001 fa7d 	bl	c27c <assert_print>
    ad82:	21d0      	movs	r1, #208	; 0xd0
    ad84:	4620      	mov	r0, r4
    ad86:	f001 fa72 	bl	c26e <assert_post_action>
    ad8a:	e7b6      	b.n	acfa <z_impl_k_yield+0x96>
    ad8c:	20001264 	.word	0x20001264
    ad90:	20001228 	.word	0x20001228
    ad94:	20000540 	.word	0x20000540
    ad98:	0000f894 	.word	0x0000f894
    ad9c:	0000f6a4 	.word	0x0000f6a4
    ada0:	0000d63c 	.word	0x0000d63c
    ada4:	0000f7ec 	.word	0x0000f7ec
    ada8:	0000dfbc 	.word	0x0000dfbc
    adac:	0000e01c 	.word	0x0000e01c
    adb0:	0000e034 	.word	0x0000e034
    adb4:	0000f8d0 	.word	0x0000f8d0
    adb8:	0000dfec 	.word	0x0000dfec
    adbc:	0000e004 	.word	0x0000e004

0000adc0 <z_tick_sleep>:
{
    adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    adc4:	4604      	mov	r4, r0
    adc6:	460e      	mov	r6, r1
    adc8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    adcc:	2b00      	cmp	r3, #0
    adce:	d14e      	bne.n	ae6e <z_tick_sleep+0xae>
	if (ticks == 0) {
    add0:	ea54 0306 	orrs.w	r3, r4, r6
    add4:	d05c      	beq.n	ae90 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    add6:	f06f 0301 	mvn.w	r3, #1
    adda:	1b1b      	subs	r3, r3, r4
    addc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ade0:	eb62 0206 	sbc.w	r2, r2, r6
    ade4:	2b01      	cmp	r3, #1
    ade6:	f172 0300 	sbcs.w	r3, r2, #0
    adea:	db55      	blt.n	ae98 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    adec:	f06f 0501 	mvn.w	r5, #1
    adf0:	1b2d      	subs	r5, r5, r4
    adf2:	f04f 0320 	mov.w	r3, #32
    adf6:	f3ef 8911 	mrs	r9, BASEPRI
    adfa:	f383 8812 	msr	BASEPRI_MAX, r3
    adfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae02:	4840      	ldr	r0, [pc, #256]	; (af04 <z_tick_sleep+0x144>)
    ae04:	f7fe f92e 	bl	9064 <z_spin_lock_valid>
    ae08:	2800      	cmp	r0, #0
    ae0a:	d049      	beq.n	aea0 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    ae0c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; af04 <z_tick_sleep+0x144>
    ae10:	4640      	mov	r0, r8
    ae12:	f7fe f947 	bl	90a4 <z_spin_lock_set_owner>
	pending_current = _current;
    ae16:	4f3c      	ldr	r7, [pc, #240]	; (af08 <z_tick_sleep+0x148>)
    ae18:	68b8      	ldr	r0, [r7, #8]
    ae1a:	4b3c      	ldr	r3, [pc, #240]	; (af0c <z_tick_sleep+0x14c>)
    ae1c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ae1e:	f7ff fb5b 	bl	a4d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ae22:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ae24:	4622      	mov	r2, r4
    ae26:	4633      	mov	r3, r6
    ae28:	4939      	ldr	r1, [pc, #228]	; (af10 <z_tick_sleep+0x150>)
    ae2a:	3018      	adds	r0, #24
    ae2c:	f000 f9dc 	bl	b1e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ae30:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ae32:	7b53      	ldrb	r3, [r2, #13]
    ae34:	f043 0310 	orr.w	r3, r3, #16
    ae38:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae3a:	4640      	mov	r0, r8
    ae3c:	f7fe f922 	bl	9084 <z_spin_unlock_valid>
    ae40:	2800      	cmp	r0, #0
    ae42:	d03d      	beq.n	aec0 <z_tick_sleep+0x100>
    ae44:	4648      	mov	r0, r9
    ae46:	f7f9 fbdb 	bl	4600 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    ae4a:	4b2f      	ldr	r3, [pc, #188]	; (af08 <z_tick_sleep+0x148>)
    ae4c:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    ae4e:	7b5b      	ldrb	r3, [r3, #13]
    ae50:	f013 0f10 	tst.w	r3, #16
    ae54:	d144      	bne.n	aee0 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ae56:	f002 f989 	bl	d16c <sys_clock_tick_get_32>
    ae5a:	1a28      	subs	r0, r5, r0
    ae5c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    ae60:	2801      	cmp	r0, #1
    ae62:	f173 0300 	sbcs.w	r3, r3, #0
    ae66:	da00      	bge.n	ae6a <z_tick_sleep+0xaa>
	return 0;
    ae68:	2000      	movs	r0, #0
}
    ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ae6e:	4d29      	ldr	r5, [pc, #164]	; (af14 <z_tick_sleep+0x154>)
    ae70:	f240 534e 	movw	r3, #1358	; 0x54e
    ae74:	462a      	mov	r2, r5
    ae76:	4928      	ldr	r1, [pc, #160]	; (af18 <z_tick_sleep+0x158>)
    ae78:	4828      	ldr	r0, [pc, #160]	; (af1c <z_tick_sleep+0x15c>)
    ae7a:	f001 f9ff 	bl	c27c <assert_print>
    ae7e:	4828      	ldr	r0, [pc, #160]	; (af20 <z_tick_sleep+0x160>)
    ae80:	f001 f9fc 	bl	c27c <assert_print>
    ae84:	f240 514e 	movw	r1, #1358	; 0x54e
    ae88:	4628      	mov	r0, r5
    ae8a:	f001 f9f0 	bl	c26e <assert_post_action>
    ae8e:	e79f      	b.n	add0 <z_tick_sleep+0x10>
	z_impl_k_yield();
    ae90:	f7ff fee8 	bl	ac64 <z_impl_k_yield>
		return 0;
    ae94:	2000      	movs	r0, #0
    ae96:	e7e8      	b.n	ae6a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ae98:	f002 f968 	bl	d16c <sys_clock_tick_get_32>
    ae9c:	1905      	adds	r5, r0, r4
    ae9e:	e7a8      	b.n	adf2 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aea0:	4f20      	ldr	r7, [pc, #128]	; (af24 <z_tick_sleep+0x164>)
    aea2:	238e      	movs	r3, #142	; 0x8e
    aea4:	463a      	mov	r2, r7
    aea6:	4920      	ldr	r1, [pc, #128]	; (af28 <z_tick_sleep+0x168>)
    aea8:	481c      	ldr	r0, [pc, #112]	; (af1c <z_tick_sleep+0x15c>)
    aeaa:	f001 f9e7 	bl	c27c <assert_print>
    aeae:	4915      	ldr	r1, [pc, #84]	; (af04 <z_tick_sleep+0x144>)
    aeb0:	481e      	ldr	r0, [pc, #120]	; (af2c <z_tick_sleep+0x16c>)
    aeb2:	f001 f9e3 	bl	c27c <assert_print>
    aeb6:	218e      	movs	r1, #142	; 0x8e
    aeb8:	4638      	mov	r0, r7
    aeba:	f001 f9d8 	bl	c26e <assert_post_action>
    aebe:	e7a5      	b.n	ae0c <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aec0:	4c18      	ldr	r4, [pc, #96]	; (af24 <z_tick_sleep+0x164>)
    aec2:	23d0      	movs	r3, #208	; 0xd0
    aec4:	4622      	mov	r2, r4
    aec6:	491a      	ldr	r1, [pc, #104]	; (af30 <z_tick_sleep+0x170>)
    aec8:	4814      	ldr	r0, [pc, #80]	; (af1c <z_tick_sleep+0x15c>)
    aeca:	f001 f9d7 	bl	c27c <assert_print>
    aece:	4641      	mov	r1, r8
    aed0:	4818      	ldr	r0, [pc, #96]	; (af34 <z_tick_sleep+0x174>)
    aed2:	f001 f9d3 	bl	c27c <assert_print>
    aed6:	21d0      	movs	r1, #208	; 0xd0
    aed8:	4620      	mov	r0, r4
    aeda:	f001 f9c8 	bl	c26e <assert_post_action>
    aede:	e7b1      	b.n	ae44 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    aee0:	4c0c      	ldr	r4, [pc, #48]	; (af14 <z_tick_sleep+0x154>)
    aee2:	f240 536f 	movw	r3, #1391	; 0x56f
    aee6:	4622      	mov	r2, r4
    aee8:	4913      	ldr	r1, [pc, #76]	; (af38 <z_tick_sleep+0x178>)
    aeea:	480c      	ldr	r0, [pc, #48]	; (af1c <z_tick_sleep+0x15c>)
    aeec:	f001 f9c6 	bl	c27c <assert_print>
    aef0:	480b      	ldr	r0, [pc, #44]	; (af20 <z_tick_sleep+0x160>)
    aef2:	f001 f9c3 	bl	c27c <assert_print>
    aef6:	f240 516f 	movw	r1, #1391	; 0x56f
    aefa:	4620      	mov	r0, r4
    aefc:	f001 f9b7 	bl	c26e <assert_post_action>
    af00:	e7a9      	b.n	ae56 <z_tick_sleep+0x96>
    af02:	bf00      	nop
    af04:	20001264 	.word	0x20001264
    af08:	20001228 	.word	0x20001228
    af0c:	20001260 	.word	0x20001260
    af10:	0000a3f1 	.word	0x0000a3f1
    af14:	0000f894 	.word	0x0000f894
    af18:	0000f6a4 	.word	0x0000f6a4
    af1c:	0000d63c 	.word	0x0000d63c
    af20:	0000f7ec 	.word	0x0000f7ec
    af24:	0000dfbc 	.word	0x0000dfbc
    af28:	0000e01c 	.word	0x0000e01c
    af2c:	0000e034 	.word	0x0000e034
    af30:	0000dfec 	.word	0x0000dfec
    af34:	0000e004 	.word	0x0000e004
    af38:	0000f950 	.word	0x0000f950

0000af3c <z_impl_k_sleep>:
{
    af3c:	b570      	push	{r4, r5, r6, lr}
    af3e:	4605      	mov	r5, r0
    af40:	460c      	mov	r4, r1
    af42:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    af46:	bb13      	cbnz	r3, af8e <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    af48:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    af4c:	bf08      	it	eq
    af4e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    af52:	d02d      	beq.n	afb0 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    af54:	4628      	mov	r0, r5
    af56:	4621      	mov	r1, r4
    af58:	f7ff ff32 	bl	adc0 <z_tick_sleep>
    af5c:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    af5e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    af60:	0151      	lsls	r1, r2, #5
    af62:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    af66:	0143      	lsls	r3, r0, #5
    af68:	1a1b      	subs	r3, r3, r0
    af6a:	eb61 0102 	sbc.w	r1, r1, r2
    af6e:	0088      	lsls	r0, r1, #2
    af70:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    af74:	009b      	lsls	r3, r3, #2
    af76:	eb13 030c 	adds.w	r3, r3, ip
    af7a:	eb42 0000 	adc.w	r0, r2, r0
    af7e:	00c0      	lsls	r0, r0, #3
    af80:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    af84:	f3c3 3310 	ubfx	r3, r3, #12, #17
    af88:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    af8c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    af8e:	4e0c      	ldr	r6, [pc, #48]	; (afc0 <z_impl_k_sleep+0x84>)
    af90:	f240 537e 	movw	r3, #1406	; 0x57e
    af94:	4632      	mov	r2, r6
    af96:	490b      	ldr	r1, [pc, #44]	; (afc4 <z_impl_k_sleep+0x88>)
    af98:	480b      	ldr	r0, [pc, #44]	; (afc8 <z_impl_k_sleep+0x8c>)
    af9a:	f001 f96f 	bl	c27c <assert_print>
    af9e:	480b      	ldr	r0, [pc, #44]	; (afcc <z_impl_k_sleep+0x90>)
    afa0:	f001 f96c 	bl	c27c <assert_print>
    afa4:	f240 517e 	movw	r1, #1406	; 0x57e
    afa8:	4630      	mov	r0, r6
    afaa:	f001 f960 	bl	c26e <assert_post_action>
    afae:	e7cb      	b.n	af48 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    afb0:	4b07      	ldr	r3, [pc, #28]	; (afd0 <z_impl_k_sleep+0x94>)
    afb2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    afb4:	f7ff fc28 	bl	a808 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    afb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    afbc:	e7e6      	b.n	af8c <z_impl_k_sleep+0x50>
    afbe:	bf00      	nop
    afc0:	0000f894 	.word	0x0000f894
    afc4:	0000f6a4 	.word	0x0000f6a4
    afc8:	0000d63c 	.word	0x0000d63c
    afcc:	0000f7ec 	.word	0x0000f7ec
    afd0:	20001228 	.word	0x20001228

0000afd4 <z_impl_z_current_get>:
}
    afd4:	4b01      	ldr	r3, [pc, #4]	; (afdc <z_impl_z_current_get+0x8>)
    afd6:	6898      	ldr	r0, [r3, #8]
    afd8:	4770      	bx	lr
    afda:	bf00      	nop
    afdc:	20001228 	.word	0x20001228

0000afe0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    afe0:	b570      	push	{r4, r5, r6, lr}
    afe2:	4604      	mov	r4, r0
    afe4:	f04f 0320 	mov.w	r3, #32
    afe8:	f3ef 8511 	mrs	r5, BASEPRI
    afec:	f383 8812 	msr	BASEPRI_MAX, r3
    aff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aff4:	4840      	ldr	r0, [pc, #256]	; (b0f8 <z_thread_abort+0x118>)
    aff6:	f7fe f835 	bl	9064 <z_spin_lock_valid>
    affa:	b1b8      	cbz	r0, b02c <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    affc:	483e      	ldr	r0, [pc, #248]	; (b0f8 <z_thread_abort+0x118>)
    affe:	f7fe f851 	bl	90a4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b002:	7b63      	ldrb	r3, [r4, #13]
    b004:	f013 0f08 	tst.w	r3, #8
    b008:	d120      	bne.n	b04c <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    b00a:	4620      	mov	r0, r4
    b00c:	f7ff fd0c 	bl	aa28 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    b010:	4b3a      	ldr	r3, [pc, #232]	; (b0fc <z_thread_abort+0x11c>)
    b012:	689b      	ldr	r3, [r3, #8]
    b014:	42a3      	cmp	r3, r4
    b016:	d032      	beq.n	b07e <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b018:	4837      	ldr	r0, [pc, #220]	; (b0f8 <z_thread_abort+0x118>)
    b01a:	f7fe f833 	bl	9084 <z_spin_unlock_valid>
    b01e:	2800      	cmp	r0, #0
    b020:	d059      	beq.n	b0d6 <z_thread_abort+0xf6>
	__asm__ volatile(
    b022:	f385 8811 	msr	BASEPRI, r5
    b026:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b02a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b02c:	4e34      	ldr	r6, [pc, #208]	; (b100 <z_thread_abort+0x120>)
    b02e:	238e      	movs	r3, #142	; 0x8e
    b030:	4632      	mov	r2, r6
    b032:	4934      	ldr	r1, [pc, #208]	; (b104 <z_thread_abort+0x124>)
    b034:	4834      	ldr	r0, [pc, #208]	; (b108 <z_thread_abort+0x128>)
    b036:	f001 f921 	bl	c27c <assert_print>
    b03a:	492f      	ldr	r1, [pc, #188]	; (b0f8 <z_thread_abort+0x118>)
    b03c:	4833      	ldr	r0, [pc, #204]	; (b10c <z_thread_abort+0x12c>)
    b03e:	f001 f91d 	bl	c27c <assert_print>
    b042:	218e      	movs	r1, #142	; 0x8e
    b044:	4630      	mov	r0, r6
    b046:	f001 f912 	bl	c26e <assert_post_action>
    b04a:	e7d7      	b.n	affc <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b04c:	482a      	ldr	r0, [pc, #168]	; (b0f8 <z_thread_abort+0x118>)
    b04e:	f7fe f819 	bl	9084 <z_spin_unlock_valid>
    b052:	b120      	cbz	r0, b05e <z_thread_abort+0x7e>
    b054:	f385 8811 	msr	BASEPRI, r5
    b058:	f3bf 8f6f 	isb	sy
		return;
    b05c:	e7e5      	b.n	b02a <z_thread_abort+0x4a>
    b05e:	4c28      	ldr	r4, [pc, #160]	; (b100 <z_thread_abort+0x120>)
    b060:	23b9      	movs	r3, #185	; 0xb9
    b062:	4622      	mov	r2, r4
    b064:	492a      	ldr	r1, [pc, #168]	; (b110 <z_thread_abort+0x130>)
    b066:	4828      	ldr	r0, [pc, #160]	; (b108 <z_thread_abort+0x128>)
    b068:	f001 f908 	bl	c27c <assert_print>
    b06c:	4922      	ldr	r1, [pc, #136]	; (b0f8 <z_thread_abort+0x118>)
    b06e:	4829      	ldr	r0, [pc, #164]	; (b114 <z_thread_abort+0x134>)
    b070:	f001 f904 	bl	c27c <assert_print>
    b074:	21b9      	movs	r1, #185	; 0xb9
    b076:	4620      	mov	r0, r4
    b078:	f001 f8f9 	bl	c26e <assert_post_action>
    b07c:	e7ea      	b.n	b054 <z_thread_abort+0x74>
    b07e:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    b082:	2b00      	cmp	r3, #0
    b084:	d1c8      	bne.n	b018 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b086:	481c      	ldr	r0, [pc, #112]	; (b0f8 <z_thread_abort+0x118>)
    b088:	f7fd fffc 	bl	9084 <z_spin_unlock_valid>
    b08c:	b198      	cbz	r0, b0b6 <z_thread_abort+0xd6>
    b08e:	4628      	mov	r0, r5
    b090:	f7f9 fab6 	bl	4600 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    b094:	4c20      	ldr	r4, [pc, #128]	; (b118 <z_thread_abort+0x138>)
    b096:	f240 63ac 	movw	r3, #1708	; 0x6ac
    b09a:	4622      	mov	r2, r4
    b09c:	491f      	ldr	r1, [pc, #124]	; (b11c <z_thread_abort+0x13c>)
    b09e:	481a      	ldr	r0, [pc, #104]	; (b108 <z_thread_abort+0x128>)
    b0a0:	f001 f8ec 	bl	c27c <assert_print>
    b0a4:	481e      	ldr	r0, [pc, #120]	; (b120 <z_thread_abort+0x140>)
    b0a6:	f001 f8e9 	bl	c27c <assert_print>
    b0aa:	f240 61ac 	movw	r1, #1708	; 0x6ac
    b0ae:	4620      	mov	r0, r4
    b0b0:	f001 f8dd 	bl	c26e <assert_post_action>
    b0b4:	e7b0      	b.n	b018 <z_thread_abort+0x38>
    b0b6:	4c12      	ldr	r4, [pc, #72]	; (b100 <z_thread_abort+0x120>)
    b0b8:	23d0      	movs	r3, #208	; 0xd0
    b0ba:	4622      	mov	r2, r4
    b0bc:	4914      	ldr	r1, [pc, #80]	; (b110 <z_thread_abort+0x130>)
    b0be:	4812      	ldr	r0, [pc, #72]	; (b108 <z_thread_abort+0x128>)
    b0c0:	f001 f8dc 	bl	c27c <assert_print>
    b0c4:	490c      	ldr	r1, [pc, #48]	; (b0f8 <z_thread_abort+0x118>)
    b0c6:	4813      	ldr	r0, [pc, #76]	; (b114 <z_thread_abort+0x134>)
    b0c8:	f001 f8d8 	bl	c27c <assert_print>
    b0cc:	21d0      	movs	r1, #208	; 0xd0
    b0ce:	4620      	mov	r0, r4
    b0d0:	f001 f8cd 	bl	c26e <assert_post_action>
    b0d4:	e7db      	b.n	b08e <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b0d6:	4c0a      	ldr	r4, [pc, #40]	; (b100 <z_thread_abort+0x120>)
    b0d8:	23b9      	movs	r3, #185	; 0xb9
    b0da:	4622      	mov	r2, r4
    b0dc:	490c      	ldr	r1, [pc, #48]	; (b110 <z_thread_abort+0x130>)
    b0de:	480a      	ldr	r0, [pc, #40]	; (b108 <z_thread_abort+0x128>)
    b0e0:	f001 f8cc 	bl	c27c <assert_print>
    b0e4:	4904      	ldr	r1, [pc, #16]	; (b0f8 <z_thread_abort+0x118>)
    b0e6:	480b      	ldr	r0, [pc, #44]	; (b114 <z_thread_abort+0x134>)
    b0e8:	f001 f8c8 	bl	c27c <assert_print>
    b0ec:	21b9      	movs	r1, #185	; 0xb9
    b0ee:	4620      	mov	r0, r4
    b0f0:	f001 f8bd 	bl	c26e <assert_post_action>
    b0f4:	e795      	b.n	b022 <z_thread_abort+0x42>
    b0f6:	bf00      	nop
    b0f8:	20001264 	.word	0x20001264
    b0fc:	20001228 	.word	0x20001228
    b100:	0000dfbc 	.word	0x0000dfbc
    b104:	0000e01c 	.word	0x0000e01c
    b108:	0000d63c 	.word	0x0000d63c
    b10c:	0000e034 	.word	0x0000e034
    b110:	0000dfec 	.word	0x0000dfec
    b114:	0000e004 	.word	0x0000e004
    b118:	0000f894 	.word	0x0000f894
    b11c:	0000d800 	.word	0x0000d800
    b120:	0000f990 	.word	0x0000f990

0000b124 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b124:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b126:	4806      	ldr	r0, [pc, #24]	; (b140 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b128:	4a06      	ldr	r2, [pc, #24]	; (b144 <z_data_copy+0x20>)
    b12a:	1a12      	subs	r2, r2, r0
    b12c:	4906      	ldr	r1, [pc, #24]	; (b148 <z_data_copy+0x24>)
    b12e:	f001 ff55 	bl	cfdc <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b132:	4a06      	ldr	r2, [pc, #24]	; (b14c <z_data_copy+0x28>)
    b134:	4906      	ldr	r1, [pc, #24]	; (b150 <z_data_copy+0x2c>)
    b136:	4807      	ldr	r0, [pc, #28]	; (b154 <z_data_copy+0x30>)
    b138:	f001 ff50 	bl	cfdc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b13c:	bd08      	pop	{r3, pc}
    b13e:	bf00      	nop
    b140:	20000000 	.word	0x20000000
    b144:	20000260 	.word	0x20000260
    b148:	0000faf4 	.word	0x0000faf4
    b14c:	00000000 	.word	0x00000000
    b150:	0000faf4 	.word	0x0000faf4
    b154:	20000000 	.word	0x20000000

0000b158 <first>:
	return list->head == list;
    b158:	4b03      	ldr	r3, [pc, #12]	; (b168 <first+0x10>)
    b15a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b15c:	4298      	cmp	r0, r3
    b15e:	d000      	beq.n	b162 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    b160:	4770      	bx	lr
    b162:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    b164:	e7fc      	b.n	b160 <first+0x8>
    b166:	bf00      	nop
    b168:	20000174 	.word	0x20000174

0000b16c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b16c:	b130      	cbz	r0, b17c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    b16e:	4a04      	ldr	r2, [pc, #16]	; (b180 <next+0x14>)
    b170:	6852      	ldr	r2, [r2, #4]
    b172:	4290      	cmp	r0, r2
    b174:	d001      	beq.n	b17a <next+0xe>
    b176:	6800      	ldr	r0, [r0, #0]
    b178:	4770      	bx	lr
    b17a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b17c:	4770      	bx	lr
    b17e:	bf00      	nop
    b180:	20000174 	.word	0x20000174

0000b184 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b184:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b186:	4b04      	ldr	r3, [pc, #16]	; (b198 <elapsed+0x14>)
    b188:	681b      	ldr	r3, [r3, #0]
    b18a:	b10b      	cbz	r3, b190 <elapsed+0xc>
    b18c:	2000      	movs	r0, #0
}
    b18e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b190:	f7fb fbd0 	bl	6934 <sys_clock_elapsed>
    b194:	e7fb      	b.n	b18e <elapsed+0xa>
    b196:	bf00      	nop
    b198:	20001270 	.word	0x20001270

0000b19c <next_timeout>:

static int32_t next_timeout(void)
{
    b19c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    b19e:	f7ff ffdb 	bl	b158 <first>
    b1a2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    b1a4:	f7ff ffee 	bl	b184 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    b1a8:	b17c      	cbz	r4, b1ca <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b1aa:	6923      	ldr	r3, [r4, #16]
    b1ac:	6962      	ldr	r2, [r4, #20]
    b1ae:	1a1b      	subs	r3, r3, r0
    b1b0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    b1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b1b8:	f170 0200 	sbcs.w	r2, r0, #0
    b1bc:	da08      	bge.n	b1d0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    b1be:	2800      	cmp	r0, #0
    b1c0:	db01      	blt.n	b1c6 <next_timeout+0x2a>
    b1c2:	4618      	mov	r0, r3
    b1c4:	e006      	b.n	b1d4 <next_timeout+0x38>
    b1c6:	2300      	movs	r3, #0
    b1c8:	e7fb      	b.n	b1c2 <next_timeout+0x26>
		ret = MAX_WAIT;
    b1ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b1ce:	e001      	b.n	b1d4 <next_timeout+0x38>
    b1d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b1d4:	4b03      	ldr	r3, [pc, #12]	; (b1e4 <next_timeout+0x48>)
    b1d6:	691b      	ldr	r3, [r3, #16]
    b1d8:	b113      	cbz	r3, b1e0 <next_timeout+0x44>
    b1da:	4283      	cmp	r3, r0
    b1dc:	da00      	bge.n	b1e0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    b1de:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    b1e0:	bd10      	pop	{r4, pc}
    b1e2:	bf00      	nop
    b1e4:	20001228 	.word	0x20001228

0000b1e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b1ec:	bf08      	it	eq
    b1ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b1f2:	f000 80c1 	beq.w	b378 <z_add_timeout+0x190>
{
    b1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b1fa:	4604      	mov	r4, r0
    b1fc:	460f      	mov	r7, r1
    b1fe:	4692      	mov	sl, r2
    b200:	461d      	mov	r5, r3
	return node->next != NULL;
    b202:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    b204:	b173      	cbz	r3, b224 <z_add_timeout+0x3c>
    b206:	f8df 8174 	ldr.w	r8, [pc, #372]	; b37c <z_add_timeout+0x194>
    b20a:	2363      	movs	r3, #99	; 0x63
    b20c:	4642      	mov	r2, r8
    b20e:	495c      	ldr	r1, [pc, #368]	; (b380 <z_add_timeout+0x198>)
    b210:	485c      	ldr	r0, [pc, #368]	; (b384 <z_add_timeout+0x19c>)
    b212:	f001 f833 	bl	c27c <assert_print>
    b216:	485c      	ldr	r0, [pc, #368]	; (b388 <z_add_timeout+0x1a0>)
    b218:	f001 f830 	bl	c27c <assert_print>
    b21c:	2163      	movs	r1, #99	; 0x63
    b21e:	4640      	mov	r0, r8
    b220:	f001 f825 	bl	c26e <assert_post_action>
	to->fn = fn;
    b224:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    b226:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    b22a:	f04f 0320 	mov.w	r3, #32
    b22e:	f3ef 8711 	mrs	r7, BASEPRI
    b232:	f383 8812 	msr	BASEPRI_MAX, r3
    b236:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b23a:	4854      	ldr	r0, [pc, #336]	; (b38c <z_add_timeout+0x1a4>)
    b23c:	f7fd ff12 	bl	9064 <z_spin_lock_valid>
    b240:	b118      	cbz	r0, b24a <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    b242:	4852      	ldr	r0, [pc, #328]	; (b38c <z_add_timeout+0x1a4>)
    b244:	f7fd ff2e 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    b248:	e038      	b.n	b2bc <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b24a:	f8df 9144 	ldr.w	r9, [pc, #324]	; b390 <z_add_timeout+0x1a8>
    b24e:	238e      	movs	r3, #142	; 0x8e
    b250:	464a      	mov	r2, r9
    b252:	4950      	ldr	r1, [pc, #320]	; (b394 <z_add_timeout+0x1ac>)
    b254:	484b      	ldr	r0, [pc, #300]	; (b384 <z_add_timeout+0x19c>)
    b256:	f001 f811 	bl	c27c <assert_print>
    b25a:	494c      	ldr	r1, [pc, #304]	; (b38c <z_add_timeout+0x1a4>)
    b25c:	484e      	ldr	r0, [pc, #312]	; (b398 <z_add_timeout+0x1b0>)
    b25e:	f001 f80d 	bl	c27c <assert_print>
    b262:	218e      	movs	r1, #142	; 0x8e
    b264:	4648      	mov	r0, r9
    b266:	f001 f802 	bl	c26e <assert_post_action>
    b26a:	e7ea      	b.n	b242 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b26c:	f11a 0801 	adds.w	r8, sl, #1
    b270:	f145 0900 	adc.w	r9, r5, #0
    b274:	f7ff ff86 	bl	b184 <elapsed>
    b278:	eb18 0300 	adds.w	r3, r8, r0
    b27c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    b280:	6123      	str	r3, [r4, #16]
    b282:	6160      	str	r0, [r4, #20]
    b284:	e03d      	b.n	b302 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b286:	1a51      	subs	r1, r2, r1
    b288:	eb66 0303 	sbc.w	r3, r6, r3
    b28c:	6101      	str	r1, [r0, #16]
    b28e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    b290:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    b292:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b294:	6020      	str	r0, [r4, #0]
	prev->next = node;
    b296:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b298:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b29a:	2800      	cmp	r0, #0
    b29c:	d045      	beq.n	b32a <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b29e:	f7ff ff5b 	bl	b158 <first>
    b2a2:	4284      	cmp	r4, r0
    b2a4:	d048      	beq.n	b338 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2a6:	4839      	ldr	r0, [pc, #228]	; (b38c <z_add_timeout+0x1a4>)
    b2a8:	f7fd feec 	bl	9084 <z_spin_unlock_valid>
    b2ac:	2800      	cmp	r0, #0
    b2ae:	d050      	beq.n	b352 <z_add_timeout+0x16a>
	__asm__ volatile(
    b2b0:	f387 8811 	msr	BASEPRI, r7
    b2b4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b2b8:	f04f 0801 	mov.w	r8, #1
    b2bc:	f1b8 0f00 	cmp.w	r8, #0
    b2c0:	d158      	bne.n	b374 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b2c2:	4653      	mov	r3, sl
    b2c4:	f06f 0101 	mvn.w	r1, #1
    b2c8:	ebb1 010a 	subs.w	r1, r1, sl
    b2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b2d0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b2d4:	2a00      	cmp	r2, #0
    b2d6:	dbc9      	blt.n	b26c <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b2d8:	4a30      	ldr	r2, [pc, #192]	; (b39c <z_add_timeout+0x1b4>)
    b2da:	6811      	ldr	r1, [r2, #0]
    b2dc:	6852      	ldr	r2, [r2, #4]
    b2de:	185b      	adds	r3, r3, r1
    b2e0:	eb42 0205 	adc.w	r2, r2, r5
    b2e4:	f06f 0101 	mvn.w	r1, #1
    b2e8:	1acb      	subs	r3, r1, r3
    b2ea:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    b2ee:	4618      	mov	r0, r3
    b2f0:	4611      	mov	r1, r2
    b2f2:	2b01      	cmp	r3, #1
    b2f4:	f172 0300 	sbcs.w	r3, r2, #0
    b2f8:	da01      	bge.n	b2fe <z_add_timeout+0x116>
    b2fa:	2001      	movs	r0, #1
    b2fc:	2100      	movs	r1, #0
    b2fe:	6120      	str	r0, [r4, #16]
    b300:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b302:	f7ff ff29 	bl	b158 <first>
    b306:	2800      	cmp	r0, #0
    b308:	d0c7      	beq.n	b29a <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    b30a:	6902      	ldr	r2, [r0, #16]
    b30c:	6946      	ldr	r6, [r0, #20]
    b30e:	6921      	ldr	r1, [r4, #16]
    b310:	6963      	ldr	r3, [r4, #20]
    b312:	4291      	cmp	r1, r2
    b314:	eb73 0c06 	sbcs.w	ip, r3, r6
    b318:	dbb5      	blt.n	b286 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    b31a:	1a89      	subs	r1, r1, r2
    b31c:	eb63 0306 	sbc.w	r3, r3, r6
    b320:	6121      	str	r1, [r4, #16]
    b322:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b324:	f7ff ff22 	bl	b16c <next>
    b328:	e7ed      	b.n	b306 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    b32a:	4b1d      	ldr	r3, [pc, #116]	; (b3a0 <z_add_timeout+0x1b8>)
    b32c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b32e:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    b330:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b332:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b334:	605c      	str	r4, [r3, #4]
}
    b336:	e7b2      	b.n	b29e <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b338:	f7ff ff30 	bl	b19c <next_timeout>

			if (next_time == 0 ||
    b33c:	4603      	mov	r3, r0
    b33e:	b118      	cbz	r0, b348 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    b340:	4a18      	ldr	r2, [pc, #96]	; (b3a4 <z_add_timeout+0x1bc>)
    b342:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    b344:	4282      	cmp	r2, r0
    b346:	d0ae      	beq.n	b2a6 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    b348:	2100      	movs	r1, #0
    b34a:	4618      	mov	r0, r3
    b34c:	f7fb fac0 	bl	68d0 <sys_clock_set_timeout>
    b350:	e7a9      	b.n	b2a6 <z_add_timeout+0xbe>
    b352:	f8df 803c 	ldr.w	r8, [pc, #60]	; b390 <z_add_timeout+0x1a8>
    b356:	23b9      	movs	r3, #185	; 0xb9
    b358:	4642      	mov	r2, r8
    b35a:	4913      	ldr	r1, [pc, #76]	; (b3a8 <z_add_timeout+0x1c0>)
    b35c:	4809      	ldr	r0, [pc, #36]	; (b384 <z_add_timeout+0x19c>)
    b35e:	f000 ff8d 	bl	c27c <assert_print>
    b362:	490a      	ldr	r1, [pc, #40]	; (b38c <z_add_timeout+0x1a4>)
    b364:	4811      	ldr	r0, [pc, #68]	; (b3ac <z_add_timeout+0x1c4>)
    b366:	f000 ff89 	bl	c27c <assert_print>
    b36a:	21b9      	movs	r1, #185	; 0xb9
    b36c:	4640      	mov	r0, r8
    b36e:	f000 ff7e 	bl	c26e <assert_post_action>
    b372:	e79d      	b.n	b2b0 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b378:	4770      	bx	lr
    b37a:	bf00      	nop
    b37c:	0000f9b4 	.word	0x0000f9b4
    b380:	0000f9d8 	.word	0x0000f9d8
    b384:	0000d63c 	.word	0x0000d63c
    b388:	0000f7ec 	.word	0x0000f7ec
    b38c:	20001274 	.word	0x20001274
    b390:	0000dfbc 	.word	0x0000dfbc
    b394:	0000e01c 	.word	0x0000e01c
    b398:	0000e034 	.word	0x0000e034
    b39c:	200006a0 	.word	0x200006a0
    b3a0:	20000174 	.word	0x20000174
    b3a4:	20001228 	.word	0x20001228
    b3a8:	0000dfec 	.word	0x0000dfec
    b3ac:	0000e004 	.word	0x0000e004

0000b3b0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3b4:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    b3b6:	2400      	movs	r4, #0
	__asm__ volatile(
    b3b8:	f04f 0320 	mov.w	r3, #32
    b3bc:	f3ef 8711 	mrs	r7, BASEPRI
    b3c0:	f383 8812 	msr	BASEPRI_MAX, r3
    b3c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3c8:	481f      	ldr	r0, [pc, #124]	; (b448 <z_abort_timeout+0x98>)
    b3ca:	f7fd fe4b 	bl	9064 <z_spin_lock_valid>
    b3ce:	b128      	cbz	r0, b3dc <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    b3d0:	481d      	ldr	r0, [pc, #116]	; (b448 <z_abort_timeout+0x98>)
    b3d2:	f7fd fe67 	bl	90a4 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    b3d6:	f06f 0815 	mvn.w	r8, #21
	return k;
    b3da:	e018      	b.n	b40e <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3dc:	4e1b      	ldr	r6, [pc, #108]	; (b44c <z_abort_timeout+0x9c>)
    b3de:	238e      	movs	r3, #142	; 0x8e
    b3e0:	4632      	mov	r2, r6
    b3e2:	491b      	ldr	r1, [pc, #108]	; (b450 <z_abort_timeout+0xa0>)
    b3e4:	481b      	ldr	r0, [pc, #108]	; (b454 <z_abort_timeout+0xa4>)
    b3e6:	f000 ff49 	bl	c27c <assert_print>
    b3ea:	4917      	ldr	r1, [pc, #92]	; (b448 <z_abort_timeout+0x98>)
    b3ec:	481a      	ldr	r0, [pc, #104]	; (b458 <z_abort_timeout+0xa8>)
    b3ee:	f000 ff45 	bl	c27c <assert_print>
    b3f2:	218e      	movs	r1, #142	; 0x8e
    b3f4:	4630      	mov	r0, r6
    b3f6:	f000 ff3a 	bl	c26e <assert_post_action>
    b3fa:	e7e9      	b.n	b3d0 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b3fc:	4812      	ldr	r0, [pc, #72]	; (b448 <z_abort_timeout+0x98>)
    b3fe:	f7fd fe41 	bl	9084 <z_spin_unlock_valid>
    b402:	b170      	cbz	r0, b422 <z_abort_timeout+0x72>
	__asm__ volatile(
    b404:	f387 8811 	msr	BASEPRI, r7
    b408:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b40c:	2401      	movs	r4, #1
    b40e:	4626      	mov	r6, r4
    b410:	b9bc      	cbnz	r4, b442 <z_abort_timeout+0x92>
	return node->next != NULL;
    b412:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    b414:	2b00      	cmp	r3, #0
    b416:	d0f1      	beq.n	b3fc <z_abort_timeout+0x4c>
			remove_timeout(to);
    b418:	4628      	mov	r0, r5
    b41a:	f001 fe90 	bl	d13e <remove_timeout>
			ret = 0;
    b41e:	46b0      	mov	r8, r6
    b420:	e7ec      	b.n	b3fc <z_abort_timeout+0x4c>
    b422:	4c0a      	ldr	r4, [pc, #40]	; (b44c <z_abort_timeout+0x9c>)
    b424:	23b9      	movs	r3, #185	; 0xb9
    b426:	4622      	mov	r2, r4
    b428:	490c      	ldr	r1, [pc, #48]	; (b45c <z_abort_timeout+0xac>)
    b42a:	480a      	ldr	r0, [pc, #40]	; (b454 <z_abort_timeout+0xa4>)
    b42c:	f000 ff26 	bl	c27c <assert_print>
    b430:	4905      	ldr	r1, [pc, #20]	; (b448 <z_abort_timeout+0x98>)
    b432:	480b      	ldr	r0, [pc, #44]	; (b460 <z_abort_timeout+0xb0>)
    b434:	f000 ff22 	bl	c27c <assert_print>
    b438:	21b9      	movs	r1, #185	; 0xb9
    b43a:	4620      	mov	r0, r4
    b43c:	f000 ff17 	bl	c26e <assert_post_action>
    b440:	e7e0      	b.n	b404 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    b442:	4640      	mov	r0, r8
    b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b448:	20001274 	.word	0x20001274
    b44c:	0000dfbc 	.word	0x0000dfbc
    b450:	0000e01c 	.word	0x0000e01c
    b454:	0000d63c 	.word	0x0000d63c
    b458:	0000e034 	.word	0x0000e034
    b45c:	0000dfec 	.word	0x0000dfec
    b460:	0000e004 	.word	0x0000e004

0000b464 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    b464:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    b466:	2500      	movs	r5, #0
	__asm__ volatile(
    b468:	f04f 0320 	mov.w	r3, #32
    b46c:	f3ef 8611 	mrs	r6, BASEPRI
    b470:	f383 8812 	msr	BASEPRI_MAX, r3
    b474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b478:	481c      	ldr	r0, [pc, #112]	; (b4ec <z_get_next_timeout_expiry+0x88>)
    b47a:	f7fd fdf3 	bl	9064 <z_spin_lock_valid>
    b47e:	b128      	cbz	r0, b48c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    b480:	481a      	ldr	r0, [pc, #104]	; (b4ec <z_get_next_timeout_expiry+0x88>)
    b482:	f7fd fe0f 	bl	90a4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    b486:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    b48a:	e014      	b.n	b4b6 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b48c:	4c18      	ldr	r4, [pc, #96]	; (b4f0 <z_get_next_timeout_expiry+0x8c>)
    b48e:	238e      	movs	r3, #142	; 0x8e
    b490:	4622      	mov	r2, r4
    b492:	4918      	ldr	r1, [pc, #96]	; (b4f4 <z_get_next_timeout_expiry+0x90>)
    b494:	4818      	ldr	r0, [pc, #96]	; (b4f8 <z_get_next_timeout_expiry+0x94>)
    b496:	f000 fef1 	bl	c27c <assert_print>
    b49a:	4914      	ldr	r1, [pc, #80]	; (b4ec <z_get_next_timeout_expiry+0x88>)
    b49c:	4817      	ldr	r0, [pc, #92]	; (b4fc <z_get_next_timeout_expiry+0x98>)
    b49e:	f000 feed 	bl	c27c <assert_print>
    b4a2:	218e      	movs	r1, #142	; 0x8e
    b4a4:	4620      	mov	r0, r4
    b4a6:	f000 fee2 	bl	c26e <assert_post_action>
    b4aa:	e7e9      	b.n	b480 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    b4ac:	f386 8811 	msr	BASEPRI, r6
    b4b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b4b4:	2501      	movs	r5, #1
    b4b6:	b9bd      	cbnz	r5, b4e8 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    b4b8:	f7ff fe70 	bl	b19c <next_timeout>
    b4bc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4be:	480b      	ldr	r0, [pc, #44]	; (b4ec <z_get_next_timeout_expiry+0x88>)
    b4c0:	f7fd fde0 	bl	9084 <z_spin_unlock_valid>
    b4c4:	2800      	cmp	r0, #0
    b4c6:	d1f1      	bne.n	b4ac <z_get_next_timeout_expiry+0x48>
    b4c8:	4d09      	ldr	r5, [pc, #36]	; (b4f0 <z_get_next_timeout_expiry+0x8c>)
    b4ca:	23b9      	movs	r3, #185	; 0xb9
    b4cc:	462a      	mov	r2, r5
    b4ce:	490c      	ldr	r1, [pc, #48]	; (b500 <z_get_next_timeout_expiry+0x9c>)
    b4d0:	4809      	ldr	r0, [pc, #36]	; (b4f8 <z_get_next_timeout_expiry+0x94>)
    b4d2:	f000 fed3 	bl	c27c <assert_print>
    b4d6:	4905      	ldr	r1, [pc, #20]	; (b4ec <z_get_next_timeout_expiry+0x88>)
    b4d8:	480a      	ldr	r0, [pc, #40]	; (b504 <z_get_next_timeout_expiry+0xa0>)
    b4da:	f000 fecf 	bl	c27c <assert_print>
    b4de:	21b9      	movs	r1, #185	; 0xb9
    b4e0:	4628      	mov	r0, r5
    b4e2:	f000 fec4 	bl	c26e <assert_post_action>
    b4e6:	e7e1      	b.n	b4ac <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    b4e8:	4620      	mov	r0, r4
    b4ea:	bd70      	pop	{r4, r5, r6, pc}
    b4ec:	20001274 	.word	0x20001274
    b4f0:	0000dfbc 	.word	0x0000dfbc
    b4f4:	0000e01c 	.word	0x0000e01c
    b4f8:	0000d63c 	.word	0x0000d63c
    b4fc:	0000e034 	.word	0x0000e034
    b500:	0000dfec 	.word	0x0000dfec
    b504:	0000e004 	.word	0x0000e004

0000b508 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    b508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b50c:	4606      	mov	r6, r0
    b50e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    b510:	2500      	movs	r5, #0
	__asm__ volatile(
    b512:	f04f 0320 	mov.w	r3, #32
    b516:	f3ef 8711 	mrs	r7, BASEPRI
    b51a:	f383 8812 	msr	BASEPRI_MAX, r3
    b51e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b522:	4825      	ldr	r0, [pc, #148]	; (b5b8 <z_set_timeout_expiry+0xb0>)
    b524:	f7fd fd9e 	bl	9064 <z_spin_lock_valid>
    b528:	b118      	cbz	r0, b532 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    b52a:	4823      	ldr	r0, [pc, #140]	; (b5b8 <z_set_timeout_expiry+0xb0>)
    b52c:	f7fd fdba 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    b530:	e01e      	b.n	b570 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b532:	4c22      	ldr	r4, [pc, #136]	; (b5bc <z_set_timeout_expiry+0xb4>)
    b534:	238e      	movs	r3, #142	; 0x8e
    b536:	4622      	mov	r2, r4
    b538:	4921      	ldr	r1, [pc, #132]	; (b5c0 <z_set_timeout_expiry+0xb8>)
    b53a:	4822      	ldr	r0, [pc, #136]	; (b5c4 <z_set_timeout_expiry+0xbc>)
    b53c:	f000 fe9e 	bl	c27c <assert_print>
    b540:	491d      	ldr	r1, [pc, #116]	; (b5b8 <z_set_timeout_expiry+0xb0>)
    b542:	4821      	ldr	r0, [pc, #132]	; (b5c8 <z_set_timeout_expiry+0xc0>)
    b544:	f000 fe9a 	bl	c27c <assert_print>
    b548:	218e      	movs	r1, #142	; 0x8e
    b54a:	4620      	mov	r0, r4
    b54c:	f000 fe8f 	bl	c26e <assert_post_action>
    b550:	e7eb      	b.n	b52a <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    b552:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    b554:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b558:	2801      	cmp	r0, #1
    b55a:	dd00      	ble.n	b55e <z_set_timeout_expiry+0x56>
    b55c:	b99c      	cbnz	r4, b586 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b55e:	4816      	ldr	r0, [pc, #88]	; (b5b8 <z_set_timeout_expiry+0xb0>)
    b560:	f7fd fd90 	bl	9084 <z_spin_unlock_valid>
    b564:	b1b0      	cbz	r0, b594 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    b566:	f387 8811 	msr	BASEPRI, r7
    b56a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b56e:	2501      	movs	r5, #1
    b570:	462c      	mov	r4, r5
    b572:	b9fd      	cbnz	r5, b5b4 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    b574:	f7ff fe12 	bl	b19c <next_timeout>
			      || (ticks <= next_to);
    b578:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b57c:	d0e9      	beq.n	b552 <z_set_timeout_expiry+0x4a>
    b57e:	42b0      	cmp	r0, r6
    b580:	dbe8      	blt.n	b554 <z_set_timeout_expiry+0x4c>
    b582:	2401      	movs	r4, #1
    b584:	e7e6      	b.n	b554 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    b586:	4641      	mov	r1, r8
    b588:	42b0      	cmp	r0, r6
    b58a:	bfa8      	it	ge
    b58c:	4630      	movge	r0, r6
    b58e:	f7fb f99f 	bl	68d0 <sys_clock_set_timeout>
    b592:	e7e4      	b.n	b55e <z_set_timeout_expiry+0x56>
    b594:	4c09      	ldr	r4, [pc, #36]	; (b5bc <z_set_timeout_expiry+0xb4>)
    b596:	23b9      	movs	r3, #185	; 0xb9
    b598:	4622      	mov	r2, r4
    b59a:	490c      	ldr	r1, [pc, #48]	; (b5cc <z_set_timeout_expiry+0xc4>)
    b59c:	4809      	ldr	r0, [pc, #36]	; (b5c4 <z_set_timeout_expiry+0xbc>)
    b59e:	f000 fe6d 	bl	c27c <assert_print>
    b5a2:	4905      	ldr	r1, [pc, #20]	; (b5b8 <z_set_timeout_expiry+0xb0>)
    b5a4:	480a      	ldr	r0, [pc, #40]	; (b5d0 <z_set_timeout_expiry+0xc8>)
    b5a6:	f000 fe69 	bl	c27c <assert_print>
    b5aa:	21b9      	movs	r1, #185	; 0xb9
    b5ac:	4620      	mov	r0, r4
    b5ae:	f000 fe5e 	bl	c26e <assert_post_action>
    b5b2:	e7d8      	b.n	b566 <z_set_timeout_expiry+0x5e>
		}
	}
}
    b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5b8:	20001274 	.word	0x20001274
    b5bc:	0000dfbc 	.word	0x0000dfbc
    b5c0:	0000e01c 	.word	0x0000e01c
    b5c4:	0000d63c 	.word	0x0000d63c
    b5c8:	0000e034 	.word	0x0000e034
    b5cc:	0000dfec 	.word	0x0000dfec
    b5d0:	0000e004 	.word	0x0000e004

0000b5d4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    b5d4:	b570      	push	{r4, r5, r6, lr}
    b5d6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b5d8:	f7fe fd06 	bl	9fe8 <z_time_slice>
	__asm__ volatile(
    b5dc:	f04f 0320 	mov.w	r3, #32
    b5e0:	f3ef 8511 	mrs	r5, BASEPRI
    b5e4:	f383 8812 	msr	BASEPRI_MAX, r3
    b5e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b5ec:	4854      	ldr	r0, [pc, #336]	; (b740 <sys_clock_announce+0x16c>)
    b5ee:	f7fd fd39 	bl	9064 <z_spin_lock_valid>
    b5f2:	b128      	cbz	r0, b600 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    b5f4:	4852      	ldr	r0, [pc, #328]	; (b740 <sys_clock_announce+0x16c>)
    b5f6:	f7fd fd55 	bl	90a4 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b5fa:	4b52      	ldr	r3, [pc, #328]	; (b744 <sys_clock_announce+0x170>)
    b5fc:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b5fe:	e022      	b.n	b646 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b600:	4e51      	ldr	r6, [pc, #324]	; (b748 <sys_clock_announce+0x174>)
    b602:	238e      	movs	r3, #142	; 0x8e
    b604:	4632      	mov	r2, r6
    b606:	4951      	ldr	r1, [pc, #324]	; (b74c <sys_clock_announce+0x178>)
    b608:	4851      	ldr	r0, [pc, #324]	; (b750 <sys_clock_announce+0x17c>)
    b60a:	f000 fe37 	bl	c27c <assert_print>
    b60e:	494c      	ldr	r1, [pc, #304]	; (b740 <sys_clock_announce+0x16c>)
    b610:	4850      	ldr	r0, [pc, #320]	; (b754 <sys_clock_announce+0x180>)
    b612:	f000 fe33 	bl	c27c <assert_print>
    b616:	218e      	movs	r1, #142	; 0x8e
    b618:	4630      	mov	r0, r6
    b61a:	f000 fe28 	bl	c26e <assert_post_action>
    b61e:	e7e9      	b.n	b5f4 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b620:	4e49      	ldr	r6, [pc, #292]	; (b748 <sys_clock_announce+0x174>)
    b622:	23b9      	movs	r3, #185	; 0xb9
    b624:	4632      	mov	r2, r6
    b626:	494c      	ldr	r1, [pc, #304]	; (b758 <sys_clock_announce+0x184>)
    b628:	4849      	ldr	r0, [pc, #292]	; (b750 <sys_clock_announce+0x17c>)
    b62a:	f000 fe27 	bl	c27c <assert_print>
    b62e:	4944      	ldr	r1, [pc, #272]	; (b740 <sys_clock_announce+0x16c>)
    b630:	484a      	ldr	r0, [pc, #296]	; (b75c <sys_clock_announce+0x188>)
    b632:	f000 fe23 	bl	c27c <assert_print>
    b636:	21b9      	movs	r1, #185	; 0xb9
    b638:	4630      	mov	r0, r6
    b63a:	f000 fe18 	bl	c26e <assert_post_action>
    b63e:	e027      	b.n	b690 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    b640:	483f      	ldr	r0, [pc, #252]	; (b740 <sys_clock_announce+0x16c>)
    b642:	f7fd fd2f 	bl	90a4 <z_spin_lock_set_owner>
    b646:	f7ff fd87 	bl	b158 <first>
    b64a:	4604      	mov	r4, r0
    b64c:	2800      	cmp	r0, #0
    b64e:	d043      	beq.n	b6d8 <sys_clock_announce+0x104>
    b650:	6902      	ldr	r2, [r0, #16]
    b652:	6941      	ldr	r1, [r0, #20]
    b654:	4b3b      	ldr	r3, [pc, #236]	; (b744 <sys_clock_announce+0x170>)
    b656:	681b      	ldr	r3, [r3, #0]
    b658:	17d8      	asrs	r0, r3, #31
    b65a:	4293      	cmp	r3, r2
    b65c:	eb70 0101 	sbcs.w	r1, r0, r1
    b660:	db3a      	blt.n	b6d8 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b662:	483f      	ldr	r0, [pc, #252]	; (b760 <sys_clock_announce+0x18c>)
    b664:	6801      	ldr	r1, [r0, #0]
    b666:	6846      	ldr	r6, [r0, #4]
    b668:	1889      	adds	r1, r1, r2
    b66a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    b66e:	6001      	str	r1, [r0, #0]
    b670:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    b672:	1a9b      	subs	r3, r3, r2
    b674:	4a33      	ldr	r2, [pc, #204]	; (b744 <sys_clock_announce+0x170>)
    b676:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b678:	2200      	movs	r2, #0
    b67a:	2300      	movs	r3, #0
    b67c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b680:	4620      	mov	r0, r4
    b682:	f001 fd5c 	bl	d13e <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b686:	482e      	ldr	r0, [pc, #184]	; (b740 <sys_clock_announce+0x16c>)
    b688:	f7fd fcfc 	bl	9084 <z_spin_unlock_valid>
    b68c:	2800      	cmp	r0, #0
    b68e:	d0c7      	beq.n	b620 <sys_clock_announce+0x4c>
	__asm__ volatile(
    b690:	f385 8811 	msr	BASEPRI, r5
    b694:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b698:	68a3      	ldr	r3, [r4, #8]
    b69a:	4620      	mov	r0, r4
    b69c:	4798      	blx	r3
	__asm__ volatile(
    b69e:	f04f 0320 	mov.w	r3, #32
    b6a2:	f3ef 8511 	mrs	r5, BASEPRI
    b6a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b6aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b6ae:	4824      	ldr	r0, [pc, #144]	; (b740 <sys_clock_announce+0x16c>)
    b6b0:	f7fd fcd8 	bl	9064 <z_spin_lock_valid>
    b6b4:	2800      	cmp	r0, #0
    b6b6:	d1c3      	bne.n	b640 <sys_clock_announce+0x6c>
    b6b8:	4c23      	ldr	r4, [pc, #140]	; (b748 <sys_clock_announce+0x174>)
    b6ba:	238e      	movs	r3, #142	; 0x8e
    b6bc:	4622      	mov	r2, r4
    b6be:	4923      	ldr	r1, [pc, #140]	; (b74c <sys_clock_announce+0x178>)
    b6c0:	4823      	ldr	r0, [pc, #140]	; (b750 <sys_clock_announce+0x17c>)
    b6c2:	f000 fddb 	bl	c27c <assert_print>
    b6c6:	491e      	ldr	r1, [pc, #120]	; (b740 <sys_clock_announce+0x16c>)
    b6c8:	4822      	ldr	r0, [pc, #136]	; (b754 <sys_clock_announce+0x180>)
    b6ca:	f000 fdd7 	bl	c27c <assert_print>
    b6ce:	218e      	movs	r1, #142	; 0x8e
    b6d0:	4620      	mov	r0, r4
    b6d2:	f000 fdcc 	bl	c26e <assert_post_action>
    b6d6:	e7b3      	b.n	b640 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b6d8:	b144      	cbz	r4, b6ec <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    b6da:	4b1a      	ldr	r3, [pc, #104]	; (b744 <sys_clock_announce+0x170>)
    b6dc:	6819      	ldr	r1, [r3, #0]
    b6de:	6923      	ldr	r3, [r4, #16]
    b6e0:	6962      	ldr	r2, [r4, #20]
    b6e2:	1a5b      	subs	r3, r3, r1
    b6e4:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    b6e8:	6123      	str	r3, [r4, #16]
    b6ea:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    b6ec:	4a1c      	ldr	r2, [pc, #112]	; (b760 <sys_clock_announce+0x18c>)
    b6ee:	4e15      	ldr	r6, [pc, #84]	; (b744 <sys_clock_announce+0x170>)
    b6f0:	6830      	ldr	r0, [r6, #0]
    b6f2:	6813      	ldr	r3, [r2, #0]
    b6f4:	6851      	ldr	r1, [r2, #4]
    b6f6:	181b      	adds	r3, r3, r0
    b6f8:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    b6fc:	6013      	str	r3, [r2, #0]
    b6fe:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    b700:	2400      	movs	r4, #0
    b702:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b704:	f7ff fd4a 	bl	b19c <next_timeout>
    b708:	4621      	mov	r1, r4
    b70a:	f7fb f8e1 	bl	68d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b70e:	480c      	ldr	r0, [pc, #48]	; (b740 <sys_clock_announce+0x16c>)
    b710:	f7fd fcb8 	bl	9084 <z_spin_unlock_valid>
    b714:	b120      	cbz	r0, b720 <sys_clock_announce+0x14c>
	__asm__ volatile(
    b716:	f385 8811 	msr	BASEPRI, r5
    b71a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b71e:	bd70      	pop	{r4, r5, r6, pc}
    b720:	4c09      	ldr	r4, [pc, #36]	; (b748 <sys_clock_announce+0x174>)
    b722:	23b9      	movs	r3, #185	; 0xb9
    b724:	4622      	mov	r2, r4
    b726:	490c      	ldr	r1, [pc, #48]	; (b758 <sys_clock_announce+0x184>)
    b728:	4809      	ldr	r0, [pc, #36]	; (b750 <sys_clock_announce+0x17c>)
    b72a:	f000 fda7 	bl	c27c <assert_print>
    b72e:	4904      	ldr	r1, [pc, #16]	; (b740 <sys_clock_announce+0x16c>)
    b730:	480a      	ldr	r0, [pc, #40]	; (b75c <sys_clock_announce+0x188>)
    b732:	f000 fda3 	bl	c27c <assert_print>
    b736:	21b9      	movs	r1, #185	; 0xb9
    b738:	4620      	mov	r0, r4
    b73a:	f000 fd98 	bl	c26e <assert_post_action>
    b73e:	e7ea      	b.n	b716 <sys_clock_announce+0x142>
    b740:	20001274 	.word	0x20001274
    b744:	20001270 	.word	0x20001270
    b748:	0000dfbc 	.word	0x0000dfbc
    b74c:	0000e01c 	.word	0x0000e01c
    b750:	0000d63c 	.word	0x0000d63c
    b754:	0000e034 	.word	0x0000e034
    b758:	0000dfec 	.word	0x0000dfec
    b75c:	0000e004 	.word	0x0000e004
    b760:	200006a0 	.word	0x200006a0

0000b764 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b766:	2600      	movs	r6, #0
	__asm__ volatile(
    b768:	f04f 0320 	mov.w	r3, #32
    b76c:	f3ef 8711 	mrs	r7, BASEPRI
    b770:	f383 8812 	msr	BASEPRI_MAX, r3
    b774:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b778:	481f      	ldr	r0, [pc, #124]	; (b7f8 <sys_clock_tick_get+0x94>)
    b77a:	f7fd fc73 	bl	9064 <z_spin_lock_valid>
    b77e:	b128      	cbz	r0, b78c <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    b780:	481d      	ldr	r0, [pc, #116]	; (b7f8 <sys_clock_tick_get+0x94>)
    b782:	f7fd fc8f 	bl	90a4 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    b786:	2400      	movs	r4, #0
    b788:	4625      	mov	r5, r4
	return k;
    b78a:	e014      	b.n	b7b6 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b78c:	4c1b      	ldr	r4, [pc, #108]	; (b7fc <sys_clock_tick_get+0x98>)
    b78e:	238e      	movs	r3, #142	; 0x8e
    b790:	4622      	mov	r2, r4
    b792:	491b      	ldr	r1, [pc, #108]	; (b800 <sys_clock_tick_get+0x9c>)
    b794:	481b      	ldr	r0, [pc, #108]	; (b804 <sys_clock_tick_get+0xa0>)
    b796:	f000 fd71 	bl	c27c <assert_print>
    b79a:	4917      	ldr	r1, [pc, #92]	; (b7f8 <sys_clock_tick_get+0x94>)
    b79c:	481a      	ldr	r0, [pc, #104]	; (b808 <sys_clock_tick_get+0xa4>)
    b79e:	f000 fd6d 	bl	c27c <assert_print>
    b7a2:	218e      	movs	r1, #142	; 0x8e
    b7a4:	4620      	mov	r0, r4
    b7a6:	f000 fd62 	bl	c26e <assert_post_action>
    b7aa:	e7e9      	b.n	b780 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    b7ac:	f387 8811 	msr	BASEPRI, r7
    b7b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b7b4:	2601      	movs	r6, #1
    b7b6:	b9e6      	cbnz	r6, b7f2 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    b7b8:	f7fb f8bc 	bl	6934 <sys_clock_elapsed>
    b7bc:	4b13      	ldr	r3, [pc, #76]	; (b80c <sys_clock_tick_get+0xa8>)
    b7be:	681c      	ldr	r4, [r3, #0]
    b7c0:	685d      	ldr	r5, [r3, #4]
    b7c2:	1904      	adds	r4, r0, r4
    b7c4:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7c8:	480b      	ldr	r0, [pc, #44]	; (b7f8 <sys_clock_tick_get+0x94>)
    b7ca:	f7fd fc5b 	bl	9084 <z_spin_unlock_valid>
    b7ce:	2800      	cmp	r0, #0
    b7d0:	d1ec      	bne.n	b7ac <sys_clock_tick_get+0x48>
    b7d2:	4e0a      	ldr	r6, [pc, #40]	; (b7fc <sys_clock_tick_get+0x98>)
    b7d4:	23b9      	movs	r3, #185	; 0xb9
    b7d6:	4632      	mov	r2, r6
    b7d8:	490d      	ldr	r1, [pc, #52]	; (b810 <sys_clock_tick_get+0xac>)
    b7da:	480a      	ldr	r0, [pc, #40]	; (b804 <sys_clock_tick_get+0xa0>)
    b7dc:	f000 fd4e 	bl	c27c <assert_print>
    b7e0:	4905      	ldr	r1, [pc, #20]	; (b7f8 <sys_clock_tick_get+0x94>)
    b7e2:	480c      	ldr	r0, [pc, #48]	; (b814 <sys_clock_tick_get+0xb0>)
    b7e4:	f000 fd4a 	bl	c27c <assert_print>
    b7e8:	21b9      	movs	r1, #185	; 0xb9
    b7ea:	4630      	mov	r0, r6
    b7ec:	f000 fd3f 	bl	c26e <assert_post_action>
    b7f0:	e7dc      	b.n	b7ac <sys_clock_tick_get+0x48>
	}
	return t;
}
    b7f2:	4620      	mov	r0, r4
    b7f4:	4629      	mov	r1, r5
    b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7f8:	20001274 	.word	0x20001274
    b7fc:	0000dfbc 	.word	0x0000dfbc
    b800:	0000e01c 	.word	0x0000e01c
    b804:	0000d63c 	.word	0x0000d63c
    b808:	0000e034 	.word	0x0000e034
    b80c:	200006a0 	.word	0x200006a0
    b810:	0000dfec 	.word	0x0000dfec
    b814:	0000e004 	.word	0x0000e004

0000b818 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b818:	b570      	push	{r4, r5, r6, lr}
    b81a:	4604      	mov	r4, r0
	__asm__ volatile(
    b81c:	f04f 0320 	mov.w	r3, #32
    b820:	f3ef 8611 	mrs	r6, BASEPRI
    b824:	f383 8812 	msr	BASEPRI_MAX, r3
    b828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b82c:	4857      	ldr	r0, [pc, #348]	; (b98c <z_timer_expiration_handler+0x174>)
    b82e:	f7fd fc19 	bl	9064 <z_spin_lock_valid>
    b832:	2800      	cmp	r0, #0
    b834:	d049      	beq.n	b8ca <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    b836:	4855      	ldr	r0, [pc, #340]	; (b98c <z_timer_expiration_handler+0x174>)
    b838:	f7fd fc34 	bl	90a4 <z_spin_lock_set_owner>
	return k;
    b83c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b83e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b840:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b842:	ea52 0103 	orrs.w	r1, r2, r3
    b846:	d005      	beq.n	b854 <z_timer_expiration_handler+0x3c>
    b848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b84c:	bf08      	it	eq
    b84e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b852:	d14a      	bne.n	b8ea <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b854:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b856:	3301      	adds	r3, #1
    b858:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b85a:	6a23      	ldr	r3, [r4, #32]
    b85c:	b1db      	cbz	r3, b896 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b85e:	484b      	ldr	r0, [pc, #300]	; (b98c <z_timer_expiration_handler+0x174>)
    b860:	f7fd fc10 	bl	9084 <z_spin_unlock_valid>
    b864:	2800      	cmp	r0, #0
    b866:	d047      	beq.n	b8f8 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    b868:	f386 8811 	msr	BASEPRI, r6
    b86c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b870:	6a23      	ldr	r3, [r4, #32]
    b872:	4620      	mov	r0, r4
    b874:	4798      	blx	r3
	__asm__ volatile(
    b876:	f04f 0320 	mov.w	r3, #32
    b87a:	f3ef 8511 	mrs	r5, BASEPRI
    b87e:	f383 8812 	msr	BASEPRI_MAX, r3
    b882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b886:	4841      	ldr	r0, [pc, #260]	; (b98c <z_timer_expiration_handler+0x174>)
    b888:	f7fd fbec 	bl	9064 <z_spin_lock_valid>
    b88c:	2800      	cmp	r0, #0
    b88e:	d043      	beq.n	b918 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    b890:	483e      	ldr	r0, [pc, #248]	; (b98c <z_timer_expiration_handler+0x174>)
    b892:	f7fd fc07 	bl	90a4 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b896:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b89a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b89c:	42a3      	cmp	r3, r4
    b89e:	d04b      	beq.n	b938 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b8a0:	2c00      	cmp	r4, #0
    b8a2:	d049      	beq.n	b938 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b8a4:	4620      	mov	r0, r4
    b8a6:	f7fe f99f 	bl	9be8 <z_unpend_thread_no_timeout>
    b8aa:	2300      	movs	r3, #0
    b8ac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b8b0:	4836      	ldr	r0, [pc, #216]	; (b98c <z_timer_expiration_handler+0x174>)
    b8b2:	f7fd fbe7 	bl	9084 <z_spin_unlock_valid>
    b8b6:	2800      	cmp	r0, #0
    b8b8:	d057      	beq.n	b96a <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    b8ba:	f385 8811 	msr	BASEPRI, r5
    b8be:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b8c2:	4620      	mov	r0, r4
    b8c4:	f7fe fc8e 	bl	a1e4 <z_ready_thread>
}
    b8c8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b8ca:	4d31      	ldr	r5, [pc, #196]	; (b990 <z_timer_expiration_handler+0x178>)
    b8cc:	238e      	movs	r3, #142	; 0x8e
    b8ce:	462a      	mov	r2, r5
    b8d0:	4930      	ldr	r1, [pc, #192]	; (b994 <z_timer_expiration_handler+0x17c>)
    b8d2:	4831      	ldr	r0, [pc, #196]	; (b998 <z_timer_expiration_handler+0x180>)
    b8d4:	f000 fcd2 	bl	c27c <assert_print>
    b8d8:	492c      	ldr	r1, [pc, #176]	; (b98c <z_timer_expiration_handler+0x174>)
    b8da:	4830      	ldr	r0, [pc, #192]	; (b99c <z_timer_expiration_handler+0x184>)
    b8dc:	f000 fcce 	bl	c27c <assert_print>
    b8e0:	218e      	movs	r1, #142	; 0x8e
    b8e2:	4628      	mov	r0, r5
    b8e4:	f000 fcc3 	bl	c26e <assert_post_action>
    b8e8:	e7a5      	b.n	b836 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b8ea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    b8ee:	492c      	ldr	r1, [pc, #176]	; (b9a0 <z_timer_expiration_handler+0x188>)
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7ff fc79 	bl	b1e8 <z_add_timeout>
    b8f6:	e7ad      	b.n	b854 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b8f8:	4d25      	ldr	r5, [pc, #148]	; (b990 <z_timer_expiration_handler+0x178>)
    b8fa:	23b9      	movs	r3, #185	; 0xb9
    b8fc:	462a      	mov	r2, r5
    b8fe:	4929      	ldr	r1, [pc, #164]	; (b9a4 <z_timer_expiration_handler+0x18c>)
    b900:	4825      	ldr	r0, [pc, #148]	; (b998 <z_timer_expiration_handler+0x180>)
    b902:	f000 fcbb 	bl	c27c <assert_print>
    b906:	4921      	ldr	r1, [pc, #132]	; (b98c <z_timer_expiration_handler+0x174>)
    b908:	4827      	ldr	r0, [pc, #156]	; (b9a8 <z_timer_expiration_handler+0x190>)
    b90a:	f000 fcb7 	bl	c27c <assert_print>
    b90e:	21b9      	movs	r1, #185	; 0xb9
    b910:	4628      	mov	r0, r5
    b912:	f000 fcac 	bl	c26e <assert_post_action>
    b916:	e7a7      	b.n	b868 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b918:	4e1d      	ldr	r6, [pc, #116]	; (b990 <z_timer_expiration_handler+0x178>)
    b91a:	238e      	movs	r3, #142	; 0x8e
    b91c:	4632      	mov	r2, r6
    b91e:	491d      	ldr	r1, [pc, #116]	; (b994 <z_timer_expiration_handler+0x17c>)
    b920:	481d      	ldr	r0, [pc, #116]	; (b998 <z_timer_expiration_handler+0x180>)
    b922:	f000 fcab 	bl	c27c <assert_print>
    b926:	4919      	ldr	r1, [pc, #100]	; (b98c <z_timer_expiration_handler+0x174>)
    b928:	481c      	ldr	r0, [pc, #112]	; (b99c <z_timer_expiration_handler+0x184>)
    b92a:	f000 fca7 	bl	c27c <assert_print>
    b92e:	218e      	movs	r1, #142	; 0x8e
    b930:	4630      	mov	r0, r6
    b932:	f000 fc9c 	bl	c26e <assert_post_action>
    b936:	e7ab      	b.n	b890 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b938:	4814      	ldr	r0, [pc, #80]	; (b98c <z_timer_expiration_handler+0x174>)
    b93a:	f7fd fba3 	bl	9084 <z_spin_unlock_valid>
    b93e:	b120      	cbz	r0, b94a <z_timer_expiration_handler+0x132>
    b940:	f385 8811 	msr	BASEPRI, r5
    b944:	f3bf 8f6f 	isb	sy
		return;
    b948:	e7be      	b.n	b8c8 <z_timer_expiration_handler+0xb0>
    b94a:	4c11      	ldr	r4, [pc, #68]	; (b990 <z_timer_expiration_handler+0x178>)
    b94c:	23b9      	movs	r3, #185	; 0xb9
    b94e:	4622      	mov	r2, r4
    b950:	4914      	ldr	r1, [pc, #80]	; (b9a4 <z_timer_expiration_handler+0x18c>)
    b952:	4811      	ldr	r0, [pc, #68]	; (b998 <z_timer_expiration_handler+0x180>)
    b954:	f000 fc92 	bl	c27c <assert_print>
    b958:	490c      	ldr	r1, [pc, #48]	; (b98c <z_timer_expiration_handler+0x174>)
    b95a:	4813      	ldr	r0, [pc, #76]	; (b9a8 <z_timer_expiration_handler+0x190>)
    b95c:	f000 fc8e 	bl	c27c <assert_print>
    b960:	21b9      	movs	r1, #185	; 0xb9
    b962:	4620      	mov	r0, r4
    b964:	f000 fc83 	bl	c26e <assert_post_action>
    b968:	e7ea      	b.n	b940 <z_timer_expiration_handler+0x128>
    b96a:	4e09      	ldr	r6, [pc, #36]	; (b990 <z_timer_expiration_handler+0x178>)
    b96c:	23b9      	movs	r3, #185	; 0xb9
    b96e:	4632      	mov	r2, r6
    b970:	490c      	ldr	r1, [pc, #48]	; (b9a4 <z_timer_expiration_handler+0x18c>)
    b972:	4809      	ldr	r0, [pc, #36]	; (b998 <z_timer_expiration_handler+0x180>)
    b974:	f000 fc82 	bl	c27c <assert_print>
    b978:	4904      	ldr	r1, [pc, #16]	; (b98c <z_timer_expiration_handler+0x174>)
    b97a:	480b      	ldr	r0, [pc, #44]	; (b9a8 <z_timer_expiration_handler+0x190>)
    b97c:	f000 fc7e 	bl	c27c <assert_print>
    b980:	21b9      	movs	r1, #185	; 0xb9
    b982:	4630      	mov	r0, r6
    b984:	f000 fc73 	bl	c26e <assert_post_action>
    b988:	e797      	b.n	b8ba <z_timer_expiration_handler+0xa2>
    b98a:	bf00      	nop
    b98c:	20001278 	.word	0x20001278
    b990:	0000dfbc 	.word	0x0000dfbc
    b994:	0000e01c 	.word	0x0000e01c
    b998:	0000d63c 	.word	0x0000d63c
    b99c:	0000e034 	.word	0x0000e034
    b9a0:	0000b819 	.word	0x0000b819
    b9a4:	0000dfec 	.word	0x0000dfec
    b9a8:	0000e004 	.word	0x0000e004

0000b9ac <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9b0:	9f06      	ldr	r7, [sp, #24]
    b9b2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b9ba:	bf08      	it	eq
    b9bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b9c0:	d02f      	beq.n	ba22 <z_impl_k_timer_start+0x76>
    b9c2:	4605      	mov	r5, r0
    b9c4:	4614      	mov	r4, r2
    b9c6:	461e      	mov	r6, r3
    b9c8:	4611      	mov	r1, r2
    b9ca:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b9cc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    b9d0:	bf08      	it	eq
    b9d2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    b9d6:	d00d      	beq.n	b9f4 <z_impl_k_timer_start+0x48>
    b9d8:	ea57 0c08 	orrs.w	ip, r7, r8
    b9dc:	d00a      	beq.n	b9f4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    b9de:	f06f 0c01 	mvn.w	ip, #1
    b9e2:	ebbc 0c07 	subs.w	ip, ip, r7
    b9e6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b9ea:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b9ee:	f1bc 0f00 	cmp.w	ip, #0
    b9f2:	db18      	blt.n	ba26 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b9f4:	f06f 0301 	mvn.w	r3, #1
    b9f8:	1a5b      	subs	r3, r3, r1
    b9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b9fe:	eb63 0300 	sbc.w	r3, r3, r0
    ba02:	2b00      	cmp	r3, #0
    ba04:	db1a      	blt.n	ba3c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    ba06:	4628      	mov	r0, r5
    ba08:	f7ff fcd2 	bl	b3b0 <z_abort_timeout>
	timer->period = period;
    ba0c:	62af      	str	r7, [r5, #40]	; 0x28
    ba0e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    ba12:	2300      	movs	r3, #0
    ba14:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ba16:	4622      	mov	r2, r4
    ba18:	4633      	mov	r3, r6
    ba1a:	490e      	ldr	r1, [pc, #56]	; (ba54 <z_impl_k_timer_start+0xa8>)
    ba1c:	4628      	mov	r0, r5
    ba1e:	f7ff fbe3 	bl	b1e8 <z_add_timeout>
		     duration);
}
    ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    ba26:	2f02      	cmp	r7, #2
    ba28:	f178 0300 	sbcs.w	r3, r8, #0
    ba2c:	da02      	bge.n	ba34 <z_impl_k_timer_start+0x88>
    ba2e:	2702      	movs	r7, #2
    ba30:	f04f 0800 	mov.w	r8, #0
    ba34:	3f01      	subs	r7, #1
    ba36:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    ba3a:	e7db      	b.n	b9f4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    ba3c:	460c      	mov	r4, r1
    ba3e:	4606      	mov	r6, r0
    ba40:	2901      	cmp	r1, #1
    ba42:	f170 0300 	sbcs.w	r3, r0, #0
    ba46:	da01      	bge.n	ba4c <z_impl_k_timer_start+0xa0>
    ba48:	2401      	movs	r4, #1
    ba4a:	2600      	movs	r6, #0
    ba4c:	3c01      	subs	r4, #1
    ba4e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    ba52:	e7d8      	b.n	ba06 <z_impl_k_timer_start+0x5a>
    ba54:	0000b819 	.word	0x0000b819

0000ba58 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    ba58:	4b01      	ldr	r3, [pc, #4]	; (ba60 <k_thread_system_pool_assign+0x8>)
    ba5a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    ba5e:	4770      	bx	lr
    ba60:	200001f8 	.word	0x200001f8

0000ba64 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    ba64:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ba66:	4a03      	ldr	r2, [pc, #12]	; (ba74 <boot_banner+0x10>)
    ba68:	4903      	ldr	r1, [pc, #12]	; (ba78 <boot_banner+0x14>)
    ba6a:	4804      	ldr	r0, [pc, #16]	; (ba7c <boot_banner+0x18>)
    ba6c:	f000 fa81 	bl	bf72 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    ba70:	bd08      	pop	{r3, pc}
    ba72:	bf00      	nop
    ba74:	0000ed1c 	.word	0x0000ed1c
    ba78:	0000f9f8 	.word	0x0000f9f8
    ba7c:	0000fa08 	.word	0x0000fa08

0000ba80 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    ba80:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ba82:	4c0f      	ldr	r4, [pc, #60]	; (bac0 <statics_init+0x40>)
    ba84:	e008      	b.n	ba98 <statics_init+0x18>
    ba86:	4b0f      	ldr	r3, [pc, #60]	; (bac4 <statics_init+0x44>)
    ba88:	429c      	cmp	r4, r3
    ba8a:	d217      	bcs.n	babc <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ba8c:	68a2      	ldr	r2, [r4, #8]
    ba8e:	6861      	ldr	r1, [r4, #4]
    ba90:	4620      	mov	r0, r4
    ba92:	f001 fb94 	bl	d1be <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ba96:	3418      	adds	r4, #24
    ba98:	4b0a      	ldr	r3, [pc, #40]	; (bac4 <statics_init+0x44>)
    ba9a:	429c      	cmp	r4, r3
    ba9c:	d9f3      	bls.n	ba86 <statics_init+0x6>
    ba9e:	4d0a      	ldr	r5, [pc, #40]	; (bac8 <statics_init+0x48>)
    baa0:	2318      	movs	r3, #24
    baa2:	462a      	mov	r2, r5
    baa4:	4909      	ldr	r1, [pc, #36]	; (bacc <statics_init+0x4c>)
    baa6:	480a      	ldr	r0, [pc, #40]	; (bad0 <statics_init+0x50>)
    baa8:	f000 fbe8 	bl	c27c <assert_print>
    baac:	4809      	ldr	r0, [pc, #36]	; (bad4 <statics_init+0x54>)
    baae:	f000 fbe5 	bl	c27c <assert_print>
    bab2:	2118      	movs	r1, #24
    bab4:	4628      	mov	r0, r5
    bab6:	f000 fbda 	bl	c26e <assert_post_action>
    baba:	e7e4      	b.n	ba86 <statics_init+0x6>
		}
	}
	return 0;
}
    babc:	2000      	movs	r0, #0
    babe:	bd38      	pop	{r3, r4, r5, pc}
    bac0:	200001f8 	.word	0x200001f8
    bac4:	20000210 	.word	0x20000210
    bac8:	0000fa30 	.word	0x0000fa30
    bacc:	0000fa54 	.word	0x0000fa54
    bad0:	0000d63c 	.word	0x0000d63c
    bad4:	0000f578 	.word	0x0000f578

0000bad8 <nrf_cc3xx_platform_init_no_rng>:
    bad8:	b510      	push	{r4, lr}
    bada:	4c0a      	ldr	r4, [pc, #40]	; (bb04 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    badc:	6823      	ldr	r3, [r4, #0]
    bade:	b11b      	cbz	r3, bae8 <nrf_cc3xx_platform_init_no_rng+0x10>
    bae0:	2301      	movs	r3, #1
    bae2:	6023      	str	r3, [r4, #0]
    bae4:	2000      	movs	r0, #0
    bae6:	bd10      	pop	{r4, pc}
    bae8:	f000 f8ce 	bl	bc88 <CC_LibInitNoRng>
    baec:	2800      	cmp	r0, #0
    baee:	d0f7      	beq.n	bae0 <nrf_cc3xx_platform_init_no_rng+0x8>
    baf0:	3801      	subs	r0, #1
    baf2:	2806      	cmp	r0, #6
    baf4:	d803      	bhi.n	bafe <nrf_cc3xx_platform_init_no_rng+0x26>
    baf6:	4b04      	ldr	r3, [pc, #16]	; (bb08 <nrf_cc3xx_platform_init_no_rng+0x30>)
    baf8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    bafc:	bd10      	pop	{r4, pc}
    bafe:	4803      	ldr	r0, [pc, #12]	; (bb0c <nrf_cc3xx_platform_init_no_rng+0x34>)
    bb00:	bd10      	pop	{r4, pc}
    bb02:	bf00      	nop
    bb04:	2000127c 	.word	0x2000127c
    bb08:	0000fa6c 	.word	0x0000fa6c
    bb0c:	ffff8ffe 	.word	0xffff8ffe

0000bb10 <nrf_cc3xx_platform_abort>:
    bb10:	f3bf 8f4f 	dsb	sy
    bb14:	4905      	ldr	r1, [pc, #20]	; (bb2c <nrf_cc3xx_platform_abort+0x1c>)
    bb16:	4b06      	ldr	r3, [pc, #24]	; (bb30 <nrf_cc3xx_platform_abort+0x20>)
    bb18:	68ca      	ldr	r2, [r1, #12]
    bb1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bb1e:	4313      	orrs	r3, r2
    bb20:	60cb      	str	r3, [r1, #12]
    bb22:	f3bf 8f4f 	dsb	sy
    bb26:	bf00      	nop
    bb28:	e7fd      	b.n	bb26 <nrf_cc3xx_platform_abort+0x16>
    bb2a:	bf00      	nop
    bb2c:	e000ed00 	.word	0xe000ed00
    bb30:	05fa0004 	.word	0x05fa0004

0000bb34 <CC_PalAbort>:
    bb34:	b410      	push	{r4}
    bb36:	4b09      	ldr	r3, [pc, #36]	; (bb5c <CC_PalAbort+0x28>)
    bb38:	4909      	ldr	r1, [pc, #36]	; (bb60 <CC_PalAbort+0x2c>)
    bb3a:	4c0a      	ldr	r4, [pc, #40]	; (bb64 <CC_PalAbort+0x30>)
    bb3c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    bb40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    bb44:	6849      	ldr	r1, [r1, #4]
    bb46:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    bb4a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    bb4e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    bb52:	2300      	movs	r3, #0
    bb54:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    bb58:	bc10      	pop	{r4}
    bb5a:	4708      	bx	r1
    bb5c:	5002b000 	.word	0x5002b000
    bb60:	2000017c 	.word	0x2000017c
    bb64:	5002a000 	.word	0x5002a000

0000bb68 <nrf_cc3xx_platform_set_abort>:
    bb68:	e9d0 1200 	ldrd	r1, r2, [r0]
    bb6c:	4b01      	ldr	r3, [pc, #4]	; (bb74 <nrf_cc3xx_platform_set_abort+0xc>)
    bb6e:	e9c3 1200 	strd	r1, r2, [r3]
    bb72:	4770      	bx	lr
    bb74:	2000017c 	.word	0x2000017c

0000bb78 <mutex_free>:
    bb78:	b510      	push	{r4, lr}
    bb7a:	4604      	mov	r4, r0
    bb7c:	b130      	cbz	r0, bb8c <mutex_free+0x14>
    bb7e:	6863      	ldr	r3, [r4, #4]
    bb80:	06db      	lsls	r3, r3, #27
    bb82:	d502      	bpl.n	bb8a <mutex_free+0x12>
    bb84:	2300      	movs	r3, #0
    bb86:	6023      	str	r3, [r4, #0]
    bb88:	6063      	str	r3, [r4, #4]
    bb8a:	bd10      	pop	{r4, pc}
    bb8c:	4b02      	ldr	r3, [pc, #8]	; (bb98 <mutex_free+0x20>)
    bb8e:	4803      	ldr	r0, [pc, #12]	; (bb9c <mutex_free+0x24>)
    bb90:	685b      	ldr	r3, [r3, #4]
    bb92:	4798      	blx	r3
    bb94:	e7f3      	b.n	bb7e <mutex_free+0x6>
    bb96:	bf00      	nop
    bb98:	2000017c 	.word	0x2000017c
    bb9c:	0000fa88 	.word	0x0000fa88

0000bba0 <mutex_lock>:
    bba0:	b1b0      	cbz	r0, bbd0 <mutex_lock+0x30>
    bba2:	6843      	ldr	r3, [r0, #4]
    bba4:	b193      	cbz	r3, bbcc <mutex_lock+0x2c>
    bba6:	06db      	lsls	r3, r3, #27
    bba8:	d50e      	bpl.n	bbc8 <mutex_lock+0x28>
    bbaa:	2301      	movs	r3, #1
    bbac:	e850 2f00 	ldrex	r2, [r0]
    bbb0:	4619      	mov	r1, r3
    bbb2:	e840 1c00 	strex	ip, r1, [r0]
    bbb6:	f09c 0f00 	teq	ip, #0
    bbba:	d1f7      	bne.n	bbac <mutex_lock+0xc>
    bbbc:	2a01      	cmp	r2, #1
    bbbe:	d0f5      	beq.n	bbac <mutex_lock+0xc>
    bbc0:	f3bf 8f5f 	dmb	sy
    bbc4:	2000      	movs	r0, #0
    bbc6:	4770      	bx	lr
    bbc8:	4803      	ldr	r0, [pc, #12]	; (bbd8 <mutex_lock+0x38>)
    bbca:	4770      	bx	lr
    bbcc:	4803      	ldr	r0, [pc, #12]	; (bbdc <mutex_lock+0x3c>)
    bbce:	4770      	bx	lr
    bbd0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    bbd4:	4770      	bx	lr
    bbd6:	bf00      	nop
    bbd8:	ffff8fe9 	.word	0xffff8fe9
    bbdc:	ffff8fea 	.word	0xffff8fea

0000bbe0 <mutex_unlock>:
    bbe0:	b168      	cbz	r0, bbfe <mutex_unlock+0x1e>
    bbe2:	6843      	ldr	r3, [r0, #4]
    bbe4:	b13b      	cbz	r3, bbf6 <mutex_unlock+0x16>
    bbe6:	06db      	lsls	r3, r3, #27
    bbe8:	d507      	bpl.n	bbfa <mutex_unlock+0x1a>
    bbea:	f3bf 8f5f 	dmb	sy
    bbee:	2300      	movs	r3, #0
    bbf0:	6003      	str	r3, [r0, #0]
    bbf2:	4618      	mov	r0, r3
    bbf4:	4770      	bx	lr
    bbf6:	4803      	ldr	r0, [pc, #12]	; (bc04 <mutex_unlock+0x24>)
    bbf8:	4770      	bx	lr
    bbfa:	4803      	ldr	r0, [pc, #12]	; (bc08 <mutex_unlock+0x28>)
    bbfc:	4770      	bx	lr
    bbfe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    bc02:	4770      	bx	lr
    bc04:	ffff8fea 	.word	0xffff8fea
    bc08:	ffff8fe9 	.word	0xffff8fe9

0000bc0c <mutex_init>:
    bc0c:	b510      	push	{r4, lr}
    bc0e:	4604      	mov	r4, r0
    bc10:	b120      	cbz	r0, bc1c <mutex_init+0x10>
    bc12:	2200      	movs	r2, #0
    bc14:	2311      	movs	r3, #17
    bc16:	6022      	str	r2, [r4, #0]
    bc18:	6063      	str	r3, [r4, #4]
    bc1a:	bd10      	pop	{r4, pc}
    bc1c:	4801      	ldr	r0, [pc, #4]	; (bc24 <mutex_init+0x18>)
    bc1e:	f7ff ff89 	bl	bb34 <CC_PalAbort>
    bc22:	e7f6      	b.n	bc12 <mutex_init+0x6>
    bc24:	0000fab0 	.word	0x0000fab0

0000bc28 <nrf_cc3xx_platform_set_mutexes>:
    bc28:	b570      	push	{r4, r5, r6, lr}
    bc2a:	e9d0 2300 	ldrd	r2, r3, [r0]
    bc2e:	4c13      	ldr	r4, [pc, #76]	; (bc7c <nrf_cc3xx_platform_set_mutexes+0x54>)
    bc30:	4d13      	ldr	r5, [pc, #76]	; (bc80 <nrf_cc3xx_platform_set_mutexes+0x58>)
    bc32:	6063      	str	r3, [r4, #4]
    bc34:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    bc38:	e9c4 3002 	strd	r3, r0, [r4, #8]
    bc3c:	6022      	str	r2, [r4, #0]
    bc3e:	4b11      	ldr	r3, [pc, #68]	; (bc84 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    bc40:	6808      	ldr	r0, [r1, #0]
    bc42:	6018      	str	r0, [r3, #0]
    bc44:	6848      	ldr	r0, [r1, #4]
    bc46:	6058      	str	r0, [r3, #4]
    bc48:	6888      	ldr	r0, [r1, #8]
    bc4a:	6098      	str	r0, [r3, #8]
    bc4c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    bc50:	60d8      	str	r0, [r3, #12]
    bc52:	6119      	str	r1, [r3, #16]
    bc54:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    bc58:	06db      	lsls	r3, r3, #27
    bc5a:	d50d      	bpl.n	bc78 <nrf_cc3xx_platform_set_mutexes+0x50>
    bc5c:	2300      	movs	r3, #0
    bc5e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    bc62:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    bc66:	f505 708a 	add.w	r0, r5, #276	; 0x114
    bc6a:	4790      	blx	r2
    bc6c:	6823      	ldr	r3, [r4, #0]
    bc6e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    bc72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc76:	4718      	bx	r3
    bc78:	bd70      	pop	{r4, r5, r6, pc}
    bc7a:	bf00      	nop
    bc7c:	2000018c 	.word	0x2000018c
    bc80:	20001294 	.word	0x20001294
    bc84:	2000019c 	.word	0x2000019c

0000bc88 <CC_LibInitNoRng>:
    bc88:	b538      	push	{r3, r4, r5, lr}
    bc8a:	f000 f82f 	bl	bcec <CC_HalInit>
    bc8e:	b120      	cbz	r0, bc9a <CC_LibInitNoRng+0x12>
    bc90:	2403      	movs	r4, #3
    bc92:	f000 f863 	bl	bd5c <CC_PalTerminate>
    bc96:	4620      	mov	r0, r4
    bc98:	bd38      	pop	{r3, r4, r5, pc}
    bc9a:	f000 f831 	bl	bd00 <CC_PalInit>
    bc9e:	b998      	cbnz	r0, bcc8 <CC_LibInitNoRng+0x40>
    bca0:	f000 f8ac 	bl	bdfc <CC_PalPowerSaveModeSelect>
    bca4:	b998      	cbnz	r0, bcce <CC_LibInitNoRng+0x46>
    bca6:	4d0f      	ldr	r5, [pc, #60]	; (bce4 <CC_LibInitNoRng+0x5c>)
    bca8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    bcac:	0e1b      	lsrs	r3, r3, #24
    bcae:	2bf0      	cmp	r3, #240	; 0xf0
    bcb0:	d108      	bne.n	bcc4 <CC_LibInitNoRng+0x3c>
    bcb2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    bcb6:	4b0c      	ldr	r3, [pc, #48]	; (bce8 <CC_LibInitNoRng+0x60>)
    bcb8:	429a      	cmp	r2, r3
    bcba:	d00a      	beq.n	bcd2 <CC_LibInitNoRng+0x4a>
    bcbc:	2407      	movs	r4, #7
    bcbe:	f000 f817 	bl	bcf0 <CC_HalTerminate>
    bcc2:	e7e6      	b.n	bc92 <CC_LibInitNoRng+0xa>
    bcc4:	2406      	movs	r4, #6
    bcc6:	e7fa      	b.n	bcbe <CC_LibInitNoRng+0x36>
    bcc8:	2404      	movs	r4, #4
    bcca:	4620      	mov	r0, r4
    bccc:	bd38      	pop	{r3, r4, r5, pc}
    bcce:	2400      	movs	r4, #0
    bcd0:	e7f5      	b.n	bcbe <CC_LibInitNoRng+0x36>
    bcd2:	2001      	movs	r0, #1
    bcd4:	f000 f892 	bl	bdfc <CC_PalPowerSaveModeSelect>
    bcd8:	4604      	mov	r4, r0
    bcda:	2800      	cmp	r0, #0
    bcdc:	d1f7      	bne.n	bcce <CC_LibInitNoRng+0x46>
    bcde:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    bce2:	e7d8      	b.n	bc96 <CC_LibInitNoRng+0xe>
    bce4:	5002b000 	.word	0x5002b000
    bce8:	20e00000 	.word	0x20e00000

0000bcec <CC_HalInit>:
    bcec:	2000      	movs	r0, #0
    bcee:	4770      	bx	lr

0000bcf0 <CC_HalTerminate>:
    bcf0:	2000      	movs	r0, #0
    bcf2:	4770      	bx	lr

0000bcf4 <CC_HalMaskInterrupt>:
    bcf4:	4b01      	ldr	r3, [pc, #4]	; (bcfc <CC_HalMaskInterrupt+0x8>)
    bcf6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    bcfa:	4770      	bx	lr
    bcfc:	5002b000 	.word	0x5002b000

0000bd00 <CC_PalInit>:
    bd00:	b510      	push	{r4, lr}
    bd02:	4811      	ldr	r0, [pc, #68]	; (bd48 <CC_PalInit+0x48>)
    bd04:	f000 f848 	bl	bd98 <CC_PalMutexCreate>
    bd08:	b100      	cbz	r0, bd0c <CC_PalInit+0xc>
    bd0a:	bd10      	pop	{r4, pc}
    bd0c:	480f      	ldr	r0, [pc, #60]	; (bd4c <CC_PalInit+0x4c>)
    bd0e:	f000 f843 	bl	bd98 <CC_PalMutexCreate>
    bd12:	2800      	cmp	r0, #0
    bd14:	d1f9      	bne.n	bd0a <CC_PalInit+0xa>
    bd16:	4c0e      	ldr	r4, [pc, #56]	; (bd50 <CC_PalInit+0x50>)
    bd18:	4620      	mov	r0, r4
    bd1a:	f000 f83d 	bl	bd98 <CC_PalMutexCreate>
    bd1e:	2800      	cmp	r0, #0
    bd20:	d1f3      	bne.n	bd0a <CC_PalInit+0xa>
    bd22:	4b0c      	ldr	r3, [pc, #48]	; (bd54 <CC_PalInit+0x54>)
    bd24:	480c      	ldr	r0, [pc, #48]	; (bd58 <CC_PalInit+0x58>)
    bd26:	601c      	str	r4, [r3, #0]
    bd28:	f000 f836 	bl	bd98 <CC_PalMutexCreate>
    bd2c:	4601      	mov	r1, r0
    bd2e:	2800      	cmp	r0, #0
    bd30:	d1eb      	bne.n	bd0a <CC_PalInit+0xa>
    bd32:	f000 f82d 	bl	bd90 <CC_PalDmaInit>
    bd36:	4604      	mov	r4, r0
    bd38:	b108      	cbz	r0, bd3e <CC_PalInit+0x3e>
    bd3a:	4620      	mov	r0, r4
    bd3c:	bd10      	pop	{r4, pc}
    bd3e:	f000 f83f 	bl	bdc0 <CC_PalPowerSaveModeInit>
    bd42:	4620      	mov	r0, r4
    bd44:	e7fa      	b.n	bd3c <CC_PalInit+0x3c>
    bd46:	bf00      	nop
    bd48:	200001d4 	.word	0x200001d4
    bd4c:	200001c8 	.word	0x200001c8
    bd50:	200001d0 	.word	0x200001d0
    bd54:	200001d8 	.word	0x200001d8
    bd58:	200001cc 	.word	0x200001cc

0000bd5c <CC_PalTerminate>:
    bd5c:	b508      	push	{r3, lr}
    bd5e:	4808      	ldr	r0, [pc, #32]	; (bd80 <CC_PalTerminate+0x24>)
    bd60:	f000 f824 	bl	bdac <CC_PalMutexDestroy>
    bd64:	4807      	ldr	r0, [pc, #28]	; (bd84 <CC_PalTerminate+0x28>)
    bd66:	f000 f821 	bl	bdac <CC_PalMutexDestroy>
    bd6a:	4807      	ldr	r0, [pc, #28]	; (bd88 <CC_PalTerminate+0x2c>)
    bd6c:	f000 f81e 	bl	bdac <CC_PalMutexDestroy>
    bd70:	4806      	ldr	r0, [pc, #24]	; (bd8c <CC_PalTerminate+0x30>)
    bd72:	f000 f81b 	bl	bdac <CC_PalMutexDestroy>
    bd76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd7a:	f000 b80b 	b.w	bd94 <CC_PalDmaTerminate>
    bd7e:	bf00      	nop
    bd80:	200001d4 	.word	0x200001d4
    bd84:	200001c8 	.word	0x200001c8
    bd88:	200001d0 	.word	0x200001d0
    bd8c:	200001cc 	.word	0x200001cc

0000bd90 <CC_PalDmaInit>:
    bd90:	2000      	movs	r0, #0
    bd92:	4770      	bx	lr

0000bd94 <CC_PalDmaTerminate>:
    bd94:	4770      	bx	lr
    bd96:	bf00      	nop

0000bd98 <CC_PalMutexCreate>:
    bd98:	b508      	push	{r3, lr}
    bd9a:	4b03      	ldr	r3, [pc, #12]	; (bda8 <CC_PalMutexCreate+0x10>)
    bd9c:	6802      	ldr	r2, [r0, #0]
    bd9e:	681b      	ldr	r3, [r3, #0]
    bda0:	6810      	ldr	r0, [r2, #0]
    bda2:	4798      	blx	r3
    bda4:	2000      	movs	r0, #0
    bda6:	bd08      	pop	{r3, pc}
    bda8:	2000018c 	.word	0x2000018c

0000bdac <CC_PalMutexDestroy>:
    bdac:	b508      	push	{r3, lr}
    bdae:	4b03      	ldr	r3, [pc, #12]	; (bdbc <CC_PalMutexDestroy+0x10>)
    bdb0:	6802      	ldr	r2, [r0, #0]
    bdb2:	685b      	ldr	r3, [r3, #4]
    bdb4:	6810      	ldr	r0, [r2, #0]
    bdb6:	4798      	blx	r3
    bdb8:	2000      	movs	r0, #0
    bdba:	bd08      	pop	{r3, pc}
    bdbc:	2000018c 	.word	0x2000018c

0000bdc0 <CC_PalPowerSaveModeInit>:
    bdc0:	b570      	push	{r4, r5, r6, lr}
    bdc2:	4c09      	ldr	r4, [pc, #36]	; (bde8 <CC_PalPowerSaveModeInit+0x28>)
    bdc4:	4d09      	ldr	r5, [pc, #36]	; (bdec <CC_PalPowerSaveModeInit+0x2c>)
    bdc6:	6920      	ldr	r0, [r4, #16]
    bdc8:	68ab      	ldr	r3, [r5, #8]
    bdca:	4798      	blx	r3
    bdcc:	b118      	cbz	r0, bdd6 <CC_PalPowerSaveModeInit+0x16>
    bdce:	4b08      	ldr	r3, [pc, #32]	; (bdf0 <CC_PalPowerSaveModeInit+0x30>)
    bdd0:	4808      	ldr	r0, [pc, #32]	; (bdf4 <CC_PalPowerSaveModeInit+0x34>)
    bdd2:	685b      	ldr	r3, [r3, #4]
    bdd4:	4798      	blx	r3
    bdd6:	4a08      	ldr	r2, [pc, #32]	; (bdf8 <CC_PalPowerSaveModeInit+0x38>)
    bdd8:	68eb      	ldr	r3, [r5, #12]
    bdda:	6920      	ldr	r0, [r4, #16]
    bddc:	2100      	movs	r1, #0
    bdde:	6011      	str	r1, [r2, #0]
    bde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bde4:	4718      	bx	r3
    bde6:	bf00      	nop
    bde8:	2000019c 	.word	0x2000019c
    bdec:	2000018c 	.word	0x2000018c
    bdf0:	2000017c 	.word	0x2000017c
    bdf4:	0000fad4 	.word	0x0000fad4
    bdf8:	20001290 	.word	0x20001290

0000bdfc <CC_PalPowerSaveModeSelect>:
    bdfc:	b570      	push	{r4, r5, r6, lr}
    bdfe:	4d1b      	ldr	r5, [pc, #108]	; (be6c <CC_PalPowerSaveModeSelect+0x70>)
    be00:	4e1b      	ldr	r6, [pc, #108]	; (be70 <CC_PalPowerSaveModeSelect+0x74>)
    be02:	4604      	mov	r4, r0
    be04:	68b2      	ldr	r2, [r6, #8]
    be06:	6928      	ldr	r0, [r5, #16]
    be08:	4790      	blx	r2
    be0a:	b9f8      	cbnz	r0, be4c <CC_PalPowerSaveModeSelect+0x50>
    be0c:	b15c      	cbz	r4, be26 <CC_PalPowerSaveModeSelect+0x2a>
    be0e:	4c19      	ldr	r4, [pc, #100]	; (be74 <CC_PalPowerSaveModeSelect+0x78>)
    be10:	6823      	ldr	r3, [r4, #0]
    be12:	b1b3      	cbz	r3, be42 <CC_PalPowerSaveModeSelect+0x46>
    be14:	2b01      	cmp	r3, #1
    be16:	d01b      	beq.n	be50 <CC_PalPowerSaveModeSelect+0x54>
    be18:	3b01      	subs	r3, #1
    be1a:	6023      	str	r3, [r4, #0]
    be1c:	6928      	ldr	r0, [r5, #16]
    be1e:	68f3      	ldr	r3, [r6, #12]
    be20:	4798      	blx	r3
    be22:	2000      	movs	r0, #0
    be24:	bd70      	pop	{r4, r5, r6, pc}
    be26:	4c13      	ldr	r4, [pc, #76]	; (be74 <CC_PalPowerSaveModeSelect+0x78>)
    be28:	6821      	ldr	r1, [r4, #0]
    be2a:	b941      	cbnz	r1, be3e <CC_PalPowerSaveModeSelect+0x42>
    be2c:	4b12      	ldr	r3, [pc, #72]	; (be78 <CC_PalPowerSaveModeSelect+0x7c>)
    be2e:	2201      	movs	r2, #1
    be30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    be34:	4a11      	ldr	r2, [pc, #68]	; (be7c <CC_PalPowerSaveModeSelect+0x80>)
    be36:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    be3a:	2b00      	cmp	r3, #0
    be3c:	d1fb      	bne.n	be36 <CC_PalPowerSaveModeSelect+0x3a>
    be3e:	3101      	adds	r1, #1
    be40:	6021      	str	r1, [r4, #0]
    be42:	68f3      	ldr	r3, [r6, #12]
    be44:	6928      	ldr	r0, [r5, #16]
    be46:	4798      	blx	r3
    be48:	2000      	movs	r0, #0
    be4a:	bd70      	pop	{r4, r5, r6, pc}
    be4c:	480c      	ldr	r0, [pc, #48]	; (be80 <CC_PalPowerSaveModeSelect+0x84>)
    be4e:	bd70      	pop	{r4, r5, r6, pc}
    be50:	4a0a      	ldr	r2, [pc, #40]	; (be7c <CC_PalPowerSaveModeSelect+0x80>)
    be52:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    be56:	2b00      	cmp	r3, #0
    be58:	d1fb      	bne.n	be52 <CC_PalPowerSaveModeSelect+0x56>
    be5a:	4a07      	ldr	r2, [pc, #28]	; (be78 <CC_PalPowerSaveModeSelect+0x7c>)
    be5c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    be60:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    be64:	f7ff ff46 	bl	bcf4 <CC_HalMaskInterrupt>
    be68:	6823      	ldr	r3, [r4, #0]
    be6a:	e7d5      	b.n	be18 <CC_PalPowerSaveModeSelect+0x1c>
    be6c:	2000019c 	.word	0x2000019c
    be70:	2000018c 	.word	0x2000018c
    be74:	20001290 	.word	0x20001290
    be78:	5002a000 	.word	0x5002a000
    be7c:	5002b000 	.word	0x5002b000
    be80:	ffff8fe9 	.word	0xffff8fe9

0000be84 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    be84:	4770      	bx	lr

0000be86 <gpio_pin_configure_dt>:
{
    be86:	b508      	push	{r3, lr}
    be88:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    be8a:	6800      	ldr	r0, [r0, #0]
    be8c:	f893 c004 	ldrb.w	ip, [r3, #4]
				  spec->dt_flags | extra_flags);
    be90:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    be92:	430a      	orrs	r2, r1
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    be94:	4661      	mov	r1, ip
    be96:	f7f4 fcbb 	bl	810 <z_impl_gpio_pin_configure>
}
    be9a:	bd08      	pop	{r3, pc}

0000be9c <precedentsAverage>:
}

int precedentsAverage(uint16_t *precedents, uint16_t current_read, uint16_t precedents_size)
{
    int sum = 0;
    for (uint16_t i = 0; i < precedents_size; i++)
    be9c:	2300      	movs	r3, #0
    int sum = 0;
    be9e:	469c      	mov	ip, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    bea0:	4293      	cmp	r3, r2
    bea2:	d20e      	bcs.n	bec2 <precedentsAverage+0x26>
{
    bea4:	b500      	push	{lr}
        sum += precedents[i];
    bea6:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
    beaa:	44f4      	add	ip, lr
    for (uint16_t i = 0; i < precedents_size; i++)
    beac:	3301      	adds	r3, #1
    beae:	b29b      	uxth	r3, r3
    beb0:	4293      	cmp	r3, r2
    beb2:	d3f8      	bcc.n	bea6 <precedentsAverage+0xa>
    return (sum + current_read) / (precedents_size + 1);
    beb4:	eb01 000c 	add.w	r0, r1, ip
    beb8:	3201      	adds	r2, #1
}
    beba:	fb90 f0f2 	sdiv	r0, r0, r2
    bebe:	f85d fb04 	ldr.w	pc, [sp], #4
    return (sum + current_read) / (precedents_size + 1);
    bec2:	18c8      	adds	r0, r1, r3
    bec4:	3201      	adds	r2, #1
}
    bec6:	fb90 f0f2 	sdiv	r0, r0, r2
    beca:	4770      	bx	lr

0000becc <cbprintf_via_va_list>:
{
    becc:	b510      	push	{r4, lr}
    bece:	460c      	mov	r4, r1
    bed0:	4611      	mov	r1, r2
    bed2:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    bed4:	9b02      	ldr	r3, [sp, #8]
    bed6:	47a0      	blx	r4
}
    bed8:	bd10      	pop	{r4, pc}

0000beda <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    beda:	b353      	cbz	r3, bf32 <cbpprintf_external+0x58>
{
    bedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bee0:	b082      	sub	sp, #8
    bee2:	4607      	mov	r7, r0
    bee4:	4688      	mov	r8, r1
    bee6:	4691      	mov	r9, r2
    bee8:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    beea:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    beec:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    beee:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    bef0:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    bef2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bef6:	441c      	add	r4, r3
    bef8:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    befa:	f04f 0a00 	mov.w	sl, #0
    befe:	e00a      	b.n	bf16 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    bf00:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    bf04:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    bf08:	4620      	mov	r0, r4
    bf0a:	f000 fb31 	bl	c570 <strlen>
    bf0e:	3001      	adds	r0, #1
    bf10:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    bf12:	f10a 0a01 	add.w	sl, sl, #1
    bf16:	45b2      	cmp	sl, r6
    bf18:	d3f2      	bcc.n	bf00 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    bf1a:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    bf1e:	9300      	str	r3, [sp, #0]
    bf20:	686b      	ldr	r3, [r5, #4]
    bf22:	464a      	mov	r2, r9
    bf24:	4641      	mov	r1, r8
    bf26:	4638      	mov	r0, r7
    bf28:	f7ff ffd0 	bl	becc <cbprintf_via_va_list>
}
    bf2c:	b002      	add	sp, #8
    bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    bf32:	f06f 0015 	mvn.w	r0, #21
}
    bf36:	4770      	bx	lr

0000bf38 <sys_notify_validate>:
	if (notify == NULL) {
    bf38:	4602      	mov	r2, r0
    bf3a:	b158      	cbz	r0, bf54 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bf3c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bf3e:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    bf42:	2b01      	cmp	r3, #1
    bf44:	d003      	beq.n	bf4e <sys_notify_validate+0x16>
    bf46:	2b03      	cmp	r3, #3
    bf48:	d107      	bne.n	bf5a <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    bf4a:	6803      	ldr	r3, [r0, #0]
    bf4c:	b143      	cbz	r3, bf60 <sys_notify_validate+0x28>
		notify->result = 0;
    bf4e:	2000      	movs	r0, #0
    bf50:	6090      	str	r0, [r2, #8]
    bf52:	4770      	bx	lr
		return -EINVAL;
    bf54:	f06f 0015 	mvn.w	r0, #21
    bf58:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    bf5a:	f06f 0015 	mvn.w	r0, #21
    bf5e:	4770      	bx	lr
			rv = -EINVAL;
    bf60:	f06f 0015 	mvn.w	r0, #21
}
    bf64:	4770      	bx	lr

0000bf66 <arch_printk_char_out>:
}
    bf66:	2000      	movs	r0, #0
    bf68:	4770      	bx	lr

0000bf6a <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    bf6a:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    bf6c:	f000 f99d 	bl	c2aa <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    bf70:	bd08      	pop	{r3, pc}

0000bf72 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    bf72:	b40f      	push	{r0, r1, r2, r3}
    bf74:	b500      	push	{lr}
    bf76:	b083      	sub	sp, #12
    bf78:	a904      	add	r1, sp, #16
    bf7a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    bf7e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    bf80:	f7ff fff3 	bl	bf6a <vprintk>

	va_end(ap);
}
    bf84:	b003      	add	sp, #12
    bf86:	f85d eb04 	ldr.w	lr, [sp], #4
    bf8a:	b004      	add	sp, #16
    bf8c:	4770      	bx	lr

0000bf8e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    bf8e:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bf92:	8b81      	ldrh	r1, [r0, #28]
    bf94:	f021 0107 	bic.w	r1, r1, #7
    bf98:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    bf9a:	8381      	strh	r1, [r0, #28]
}
    bf9c:	4770      	bx	lr

0000bf9e <notify_monitors>:
{
    bf9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfa2:	4606      	mov	r6, r0
    bfa4:	460f      	mov	r7, r1
    bfa6:	4690      	mov	r8, r2
	return list->head;
    bfa8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bfaa:	b119      	cbz	r1, bfb4 <notify_monitors+0x16>
    bfac:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    bfae:	b131      	cbz	r1, bfbe <notify_monitors+0x20>
	return node->next;
    bfb0:	680c      	ldr	r4, [r1, #0]
    bfb2:	e004      	b.n	bfbe <notify_monitors+0x20>
    bfb4:	460c      	mov	r4, r1
    bfb6:	e002      	b.n	bfbe <notify_monitors+0x20>
    bfb8:	4623      	mov	r3, r4
    bfba:	4621      	mov	r1, r4
    bfbc:	461c      	mov	r4, r3
    bfbe:	b159      	cbz	r1, bfd8 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    bfc0:	684d      	ldr	r5, [r1, #4]
    bfc2:	4643      	mov	r3, r8
    bfc4:	463a      	mov	r2, r7
    bfc6:	4630      	mov	r0, r6
    bfc8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bfca:	2c00      	cmp	r4, #0
    bfcc:	d0f4      	beq.n	bfb8 <notify_monitors+0x1a>
    bfce:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    bfd0:	2c00      	cmp	r4, #0
    bfd2:	d0f2      	beq.n	bfba <notify_monitors+0x1c>
	return node->next;
    bfd4:	6823      	ldr	r3, [r4, #0]
    bfd6:	e7f0      	b.n	bfba <notify_monitors+0x1c>
}
    bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bfdc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bfdc:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    bfde:	f013 0307 	ands.w	r3, r3, #7
    bfe2:	d103      	bne.n	bfec <process_recheck+0x10>
	return list->head;
    bfe4:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    bfe6:	b10a      	cbz	r2, bfec <process_recheck+0x10>
		evt = EVT_START;
    bfe8:	2003      	movs	r0, #3
    bfea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bfec:	2b02      	cmp	r3, #2
    bfee:	d003      	beq.n	bff8 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    bff0:	2b01      	cmp	r3, #1
    bff2:	d006      	beq.n	c002 <process_recheck+0x26>
	int evt = EVT_NOP;
    bff4:	2000      	movs	r0, #0
    bff6:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    bff8:	8bc2      	ldrh	r2, [r0, #30]
    bffa:	2a00      	cmp	r2, #0
    bffc:	d1f8      	bne.n	bff0 <process_recheck+0x14>
		evt = EVT_STOP;
    bffe:	2004      	movs	r0, #4
    c000:	4770      	bx	lr
    c002:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    c004:	b10b      	cbz	r3, c00a <process_recheck+0x2e>
		evt = EVT_RESET;
    c006:	2005      	movs	r0, #5
}
    c008:	4770      	bx	lr
	int evt = EVT_NOP;
    c00a:	2000      	movs	r0, #0
    c00c:	4770      	bx	lr

0000c00e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    c00e:	b158      	cbz	r0, c028 <validate_args+0x1a>
{
    c010:	b510      	push	{r4, lr}
    c012:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c014:	b159      	cbz	r1, c02e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    c016:	1d08      	adds	r0, r1, #4
    c018:	f7ff ff8e 	bl	bf38 <sys_notify_validate>
	if ((rv == 0)
    c01c:	b918      	cbnz	r0, c026 <validate_args+0x18>
	    && ((cli->notify.flags
    c01e:	68a3      	ldr	r3, [r4, #8]
    c020:	f033 0303 	bics.w	r3, r3, #3
    c024:	d106      	bne.n	c034 <validate_args+0x26>
}
    c026:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c028:	f06f 0015 	mvn.w	r0, #21
}
    c02c:	4770      	bx	lr
		return -EINVAL;
    c02e:	f06f 0015 	mvn.w	r0, #21
    c032:	e7f8      	b.n	c026 <validate_args+0x18>
		rv = -EINVAL;
    c034:	f06f 0015 	mvn.w	r0, #21
    c038:	e7f5      	b.n	c026 <validate_args+0x18>

0000c03a <notify_one>:
{
    c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c03e:	4607      	mov	r7, r0
    c040:	460c      	mov	r4, r1
    c042:	4616      	mov	r6, r2
    c044:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c046:	4619      	mov	r1, r3
    c048:	1d20      	adds	r0, r4, #4
    c04a:	f7f6 f9bb 	bl	23c4 <sys_notify_finalize>
	if (cb) {
    c04e:	b128      	cbz	r0, c05c <notify_one+0x22>
    c050:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    c052:	462b      	mov	r3, r5
    c054:	4632      	mov	r2, r6
    c056:	4621      	mov	r1, r4
    c058:	4638      	mov	r0, r7
    c05a:	47c0      	blx	r8
}
    c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c060 <notify_all>:
{
    c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c064:	4680      	mov	r8, r0
    c066:	460c      	mov	r4, r1
    c068:	4617      	mov	r7, r2
    c06a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    c06c:	e004      	b.n	c078 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    c06e:	4633      	mov	r3, r6
    c070:	463a      	mov	r2, r7
    c072:	4640      	mov	r0, r8
    c074:	f7ff ffe1 	bl	c03a <notify_one>
    c078:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    c07a:	b131      	cbz	r1, c08a <notify_all+0x2a>
	return node->next;
    c07c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    c07e:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c080:	6863      	ldr	r3, [r4, #4]
    c082:	428b      	cmp	r3, r1
    c084:	d1f3      	bne.n	c06e <notify_all+0xe>
	list->tail = node;
    c086:	6065      	str	r5, [r4, #4]
}
    c088:	e7f1      	b.n	c06e <notify_all+0xe>
}
    c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c08e <onoff_manager_init>:
	if ((mgr == NULL)
    c08e:	b170      	cbz	r0, c0ae <onoff_manager_init+0x20>
{
    c090:	b538      	push	{r3, r4, r5, lr}
    c092:	460c      	mov	r4, r1
    c094:	4605      	mov	r5, r0
	    || (transitions == NULL)
    c096:	b169      	cbz	r1, c0b4 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    c098:	680b      	ldr	r3, [r1, #0]
    c09a:	b173      	cbz	r3, c0ba <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    c09c:	684b      	ldr	r3, [r1, #4]
    c09e:	b17b      	cbz	r3, c0c0 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c0a0:	2220      	movs	r2, #32
    c0a2:	2100      	movs	r1, #0
    c0a4:	f000 fab1 	bl	c60a <memset>
    c0a8:	612c      	str	r4, [r5, #16]
	return 0;
    c0aa:	2000      	movs	r0, #0
}
    c0ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c0ae:	f06f 0015 	mvn.w	r0, #21
}
    c0b2:	4770      	bx	lr
		return -EINVAL;
    c0b4:	f06f 0015 	mvn.w	r0, #21
    c0b8:	e7f8      	b.n	c0ac <onoff_manager_init+0x1e>
    c0ba:	f06f 0015 	mvn.w	r0, #21
    c0be:	e7f5      	b.n	c0ac <onoff_manager_init+0x1e>
    c0c0:	f06f 0015 	mvn.w	r0, #21
    c0c4:	e7f2      	b.n	c0ac <onoff_manager_init+0x1e>

0000c0c6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c0c6:	b508      	push	{r3, lr}
    c0c8:	4604      	mov	r4, r0
    c0ca:	4608      	mov	r0, r1
    c0cc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c0ce:	461a      	mov	r2, r3
    c0d0:	47a0      	blx	r4
	return z_impl_z_current_get();
    c0d2:	f7fe ff7f 	bl	afd4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c0d6:	f7f8 ff79 	bl	4fcc <z_impl_k_thread_abort>

0000c0da <free_list_add_bidx>:
{
    c0da:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    c0dc:	1d13      	adds	r3, r2, #4
    c0de:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c0e2:	b97c      	cbnz	r4, c104 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    c0e4:	2301      	movs	r3, #1
    c0e6:	fa03 f402 	lsl.w	r4, r3, r2
    c0ea:	68c3      	ldr	r3, [r0, #12]
    c0ec:	4323      	orrs	r3, r4
    c0ee:	60c3      	str	r3, [r0, #12]
		b->next = c;
    c0f0:	3204      	adds	r2, #4
    c0f2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    c0f6:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    c0f8:	1d1a      	adds	r2, r3, #4
    c0fa:	b289      	uxth	r1, r1
    c0fc:	5281      	strh	r1, [r0, r2]
    c0fe:	3306      	adds	r3, #6
    c100:	52c1      	strh	r1, [r0, r3]
}
    c102:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    c104:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    c106:	3204      	adds	r2, #4
    c108:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    c10a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    c10e:	f10c 0e04 	add.w	lr, ip, #4
    c112:	f820 300e 	strh.w	r3, [r0, lr]
    c116:	f10c 0c06 	add.w	ip, ip, #6
    c11a:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    c11e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    c120:	3306      	adds	r3, #6
    c122:	b289      	uxth	r1, r1
    c124:	52c1      	strh	r1, [r0, r3]
    c126:	5281      	strh	r1, [r0, r2]
    c128:	e7eb      	b.n	c102 <free_list_add_bidx+0x28>

0000c12a <free_list_add>:
{
    c12a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c12c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c130:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c132:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    c134:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    c138:	f1c2 021f 	rsb	r2, r2, #31
    c13c:	f7ff ffcd 	bl	c0da <free_list_add_bidx>
}
    c140:	bd08      	pop	{r3, pc}

0000c142 <extract_decimal>:
{
    c142:	4684      	mov	ip, r0
	const char *sp = *str;
    c144:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c146:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    c148:	e005      	b.n	c156 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    c14a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c14e:	3201      	adds	r2, #1
    c150:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    c154:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c156:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c158:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c15c:	2909      	cmp	r1, #9
    c15e:	d9f4      	bls.n	c14a <extract_decimal+0x8>
	*str = sp;
    c160:	f8cc 2000 	str.w	r2, [ip]
}
    c164:	4770      	bx	lr

0000c166 <encode_uint>:
{
    c166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c16a:	b083      	sub	sp, #12
    c16c:	4604      	mov	r4, r0
    c16e:	460d      	mov	r5, r1
    c170:	9201      	str	r2, [sp, #4]
    c172:	469a      	mov	sl, r3
    c174:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c176:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c178:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c17c:	2b6f      	cmp	r3, #111	; 0x6f
    c17e:	d00f      	beq.n	c1a0 <encode_uint+0x3a>
    c180:	d906      	bls.n	c190 <encode_uint+0x2a>
    c182:	2b70      	cmp	r3, #112	; 0x70
    c184:	d00f      	beq.n	c1a6 <encode_uint+0x40>
    c186:	2b78      	cmp	r3, #120	; 0x78
    c188:	d110      	bne.n	c1ac <encode_uint+0x46>
		return 16;
    c18a:	f04f 0910 	mov.w	r9, #16
    c18e:	e026      	b.n	c1de <encode_uint+0x78>
	switch (specifier) {
    c190:	2b58      	cmp	r3, #88	; 0x58
    c192:	d002      	beq.n	c19a <encode_uint+0x34>
    c194:	f04f 090a 	mov.w	r9, #10
    c198:	e021      	b.n	c1de <encode_uint+0x78>
		return 16;
    c19a:	f04f 0910 	mov.w	r9, #16
    c19e:	e01e      	b.n	c1de <encode_uint+0x78>
		return 8;
    c1a0:	f04f 0908 	mov.w	r9, #8
    c1a4:	e01b      	b.n	c1de <encode_uint+0x78>
		return 16;
    c1a6:	f04f 0910 	mov.w	r9, #16
    c1aa:	e018      	b.n	c1de <encode_uint+0x78>
	switch (specifier) {
    c1ac:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c1b0:	e015      	b.n	c1de <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c1b2:	f1bb 0f19 	cmp.w	fp, #25
    c1b6:	d821      	bhi.n	c1fc <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c1b8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c1ba:	3237      	adds	r2, #55	; 0x37
    c1bc:	b2d2      	uxtb	r2, r2
    c1be:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    c1c2:	463a      	mov	r2, r7
    c1c4:	4643      	mov	r3, r8
    c1c6:	4620      	mov	r0, r4
    c1c8:	4629      	mov	r1, r5
    c1ca:	f7f4 f97b 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c1ce:	42bc      	cmp	r4, r7
    c1d0:	f175 0300 	sbcs.w	r3, r5, #0
    c1d4:	d316      	bcc.n	c204 <encode_uint+0x9e>
    c1d6:	4556      	cmp	r6, sl
    c1d8:	d914      	bls.n	c204 <encode_uint+0x9e>
		value /= radix;
    c1da:	4604      	mov	r4, r0
    c1dc:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c1de:	f04f 0800 	mov.w	r8, #0
    c1e2:	464f      	mov	r7, r9
    c1e4:	464a      	mov	r2, r9
    c1e6:	4643      	mov	r3, r8
    c1e8:	4620      	mov	r0, r4
    c1ea:	4629      	mov	r1, r5
    c1ec:	f7f4 f96a 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c1f0:	2a09      	cmp	r2, #9
    c1f2:	d8de      	bhi.n	c1b2 <encode_uint+0x4c>
    c1f4:	b2d2      	uxtb	r2, r2
    c1f6:	3230      	adds	r2, #48	; 0x30
    c1f8:	b2d2      	uxtb	r2, r2
    c1fa:	e7e0      	b.n	c1be <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c1fc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c1fe:	3257      	adds	r2, #87	; 0x57
    c200:	b2d2      	uxtb	r2, r2
    c202:	e7dc      	b.n	c1be <encode_uint+0x58>
	if (conv->flag_hash) {
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	f013 0f20 	tst.w	r3, #32
    c20c:	d005      	beq.n	c21a <encode_uint+0xb4>
		if (radix == 8) {
    c20e:	f1b9 0f08 	cmp.w	r9, #8
    c212:	d006      	beq.n	c222 <encode_uint+0xbc>
		} else if (radix == 16) {
    c214:	f1b9 0f10 	cmp.w	r9, #16
    c218:	d009      	beq.n	c22e <encode_uint+0xc8>
}
    c21a:	4630      	mov	r0, r6
    c21c:	b003      	add	sp, #12
    c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c222:	9a01      	ldr	r2, [sp, #4]
    c224:	7893      	ldrb	r3, [r2, #2]
    c226:	f043 0308 	orr.w	r3, r3, #8
    c22a:	7093      	strb	r3, [r2, #2]
    c22c:	e7f5      	b.n	c21a <encode_uint+0xb4>
			conv->altform_0c = true;
    c22e:	9a01      	ldr	r2, [sp, #4]
    c230:	7893      	ldrb	r3, [r2, #2]
    c232:	f043 0310 	orr.w	r3, r3, #16
    c236:	7093      	strb	r3, [r2, #2]
    c238:	e7ef      	b.n	c21a <encode_uint+0xb4>

0000c23a <outs>:
{
    c23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c23e:	4607      	mov	r7, r0
    c240:	460e      	mov	r6, r1
    c242:	4614      	mov	r4, r2
    c244:	4698      	mov	r8, r3
	size_t count = 0;
    c246:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c248:	e006      	b.n	c258 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c24a:	4631      	mov	r1, r6
    c24c:	f814 0b01 	ldrb.w	r0, [r4], #1
    c250:	47b8      	blx	r7
		if (rc < 0) {
    c252:	2800      	cmp	r0, #0
    c254:	db09      	blt.n	c26a <outs+0x30>
		++count;
    c256:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c258:	4544      	cmp	r4, r8
    c25a:	d3f6      	bcc.n	c24a <outs+0x10>
    c25c:	f1b8 0f00 	cmp.w	r8, #0
    c260:	d102      	bne.n	c268 <outs+0x2e>
    c262:	7823      	ldrb	r3, [r4, #0]
    c264:	2b00      	cmp	r3, #0
    c266:	d1f0      	bne.n	c24a <outs+0x10>
	return (int)count;
    c268:	4628      	mov	r0, r5
}
    c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c26e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    c26e:	4040      	eors	r0, r0
    c270:	f380 8811 	msr	BASEPRI, r0
    c274:	f04f 0004 	mov.w	r0, #4
    c278:	df02      	svc	2
}
    c27a:	4770      	bx	lr

0000c27c <assert_print>:

void assert_print(const char *fmt, ...)
{
    c27c:	b40f      	push	{r0, r1, r2, r3}
    c27e:	b500      	push	{lr}
    c280:	b083      	sub	sp, #12
    c282:	a904      	add	r1, sp, #16
    c284:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    c288:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    c28a:	f7ff fe6e 	bl	bf6a <vprintk>

	va_end(ap);
}
    c28e:	b003      	add	sp, #12
    c290:	f85d eb04 	ldr.w	lr, [sp], #4
    c294:	b004      	add	sp, #16
    c296:	4770      	bx	lr

0000c298 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    c298:	4770      	bx	lr

0000c29a <dummy_timestamp>:
}
    c29a:	2000      	movs	r0, #0
    c29c:	4770      	bx	lr

0000c29e <msg_filter_check>:
}
    c29e:	2001      	movs	r0, #1
    c2a0:	4770      	bx	lr

0000c2a2 <default_get_timestamp>:
{
    c2a2:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c2a4:	f000 fd80 	bl	cda8 <sys_clock_cycle_get_32>
}
    c2a8:	bd08      	pop	{r3, pc}

0000c2aa <z_log_vprintk>:
{
    c2aa:	b500      	push	{lr}
    c2ac:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c2ae:	9103      	str	r1, [sp, #12]
    c2b0:	9002      	str	r0, [sp, #8]
    c2b2:	2000      	movs	r0, #0
    c2b4:	9001      	str	r0, [sp, #4]
    c2b6:	9000      	str	r0, [sp, #0]
    c2b8:	4603      	mov	r3, r0
    c2ba:	4602      	mov	r2, r0
    c2bc:	4601      	mov	r1, r0
    c2be:	f7f7 fcbf 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c2c2:	b005      	add	sp, #20
    c2c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2c8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    c2c8:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    c2ca:	f7f7 f98f 	bl	35ec <log_init>
	}

	return 0;
}
    c2ce:	2000      	movs	r0, #0
    c2d0:	bd08      	pop	{r3, pc}

0000c2d2 <z_log_get_tag>:
}
    c2d2:	2000      	movs	r0, #0
    c2d4:	4770      	bx	lr

0000c2d6 <out_func>:
{
    c2d6:	b500      	push	{lr}
    c2d8:	b083      	sub	sp, #12
		char x = (char)c;
    c2da:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    c2de:	680b      	ldr	r3, [r1, #0]
    c2e0:	684a      	ldr	r2, [r1, #4]
    c2e2:	6852      	ldr	r2, [r2, #4]
    c2e4:	2101      	movs	r1, #1
    c2e6:	f10d 0007 	add.w	r0, sp, #7
    c2ea:	4798      	blx	r3
}
    c2ec:	2000      	movs	r0, #0
    c2ee:	b003      	add	sp, #12
    c2f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2f4 <cr_out_func>:
{
    c2f4:	b538      	push	{r3, r4, r5, lr}
    c2f6:	4604      	mov	r4, r0
    c2f8:	460d      	mov	r5, r1
	out_func(c, ctx);
    c2fa:	f7ff ffec 	bl	c2d6 <out_func>
	if (c == '\n') {
    c2fe:	2c0a      	cmp	r4, #10
    c300:	d001      	beq.n	c306 <cr_out_func+0x12>
}
    c302:	2000      	movs	r0, #0
    c304:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    c306:	4629      	mov	r1, r5
    c308:	200d      	movs	r0, #13
    c30a:	f7ff ffe4 	bl	c2d6 <out_func>
    c30e:	e7f8      	b.n	c302 <cr_out_func+0xe>

0000c310 <buffer_write>:
{
    c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c312:	4607      	mov	r7, r0
    c314:	460d      	mov	r5, r1
    c316:	4614      	mov	r4, r2
    c318:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c31a:	4632      	mov	r2, r6
    c31c:	4621      	mov	r1, r4
    c31e:	4628      	mov	r0, r5
    c320:	47b8      	blx	r7
		buf += processed;
    c322:	4405      	add	r5, r0
	} while (len != 0);
    c324:	1a24      	subs	r4, r4, r0
    c326:	d1f8      	bne.n	c31a <buffer_write+0xa>
}
    c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c32a <color_prefix>:
{
    c32a:	b508      	push	{r3, lr}
    c32c:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c32e:	2201      	movs	r2, #1
    c330:	f7f7 fb02 	bl	3938 <color_print>
}
    c334:	bd08      	pop	{r3, pc}

0000c336 <color_postfix>:
{
    c336:	b508      	push	{r3, lr}
    c338:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c33a:	2200      	movs	r2, #0
    c33c:	f7f7 fafc 	bl	3938 <color_print>
}
    c340:	bd08      	pop	{r3, pc}

0000c342 <postfix_print>:
{
    c342:	b538      	push	{r3, r4, r5, lr}
    c344:	4605      	mov	r5, r0
    c346:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c348:	f001 0101 	and.w	r1, r1, #1
    c34c:	f7ff fff3 	bl	c336 <color_postfix>
	newline_print(output, flags);
    c350:	4621      	mov	r1, r4
    c352:	4628      	mov	r0, r5
    c354:	f7f7 fb06 	bl	3964 <newline_print>
}
    c358:	bd38      	pop	{r3, r4, r5, pc}

0000c35a <log_msg2_hexdump>:
{
    c35a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c35e:	b083      	sub	sp, #12
    c360:	4680      	mov	r8, r0
    c362:	460e      	mov	r6, r1
    c364:	4615      	mov	r5, r2
    c366:	461f      	mov	r7, r3
    c368:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c36c:	462c      	mov	r4, r5
    c36e:	2d10      	cmp	r5, #16
    c370:	bf28      	it	cs
    c372:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    c374:	f8cd 9000 	str.w	r9, [sp]
    c378:	463b      	mov	r3, r7
    c37a:	4622      	mov	r2, r4
    c37c:	4631      	mov	r1, r6
    c37e:	4640      	mov	r0, r8
    c380:	f7f7 fb04 	bl	398c <hexdump_line_print>
		data += length;
    c384:	4426      	add	r6, r4
	} while (len);
    c386:	1b2d      	subs	r5, r5, r4
    c388:	d1f0      	bne.n	c36c <log_msg2_hexdump+0x12>
}
    c38a:	b003      	add	sp, #12
    c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c390 <log_output_flush>:
{
    c390:	b510      	push	{r4, lr}
    c392:	4604      	mov	r4, r0
		     output->control_block->offset,
    c394:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c396:	6853      	ldr	r3, [r2, #4]
    c398:	6812      	ldr	r2, [r2, #0]
    c39a:	6881      	ldr	r1, [r0, #8]
    c39c:	6800      	ldr	r0, [r0, #0]
    c39e:	f7ff ffb7 	bl	c310 <buffer_write>
	output->control_block->offset = 0;
    c3a2:	6863      	ldr	r3, [r4, #4]
    c3a4:	2200      	movs	r2, #0
    c3a6:	601a      	str	r2, [r3, #0]
}
    c3a8:	bd10      	pop	{r4, pc}

0000c3aa <z_log_msg2_finalize>:
{
    c3aa:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    c3ac:	b198      	cbz	r0, c3d6 <z_log_msg2_finalize+0x2c>
    c3ae:	460e      	mov	r6, r1
    c3b0:	4614      	mov	r4, r2
    c3b2:	4619      	mov	r1, r3
    c3b4:	4605      	mov	r5, r0
	if (data) {
    c3b6:	b143      	cbz	r3, c3ca <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    c3b8:	f100 0310 	add.w	r3, r0, #16
    c3bc:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    c3c0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    c3c4:	4418      	add	r0, r3
    c3c6:	f000 f8f1 	bl	c5ac <memcpy>
	msg->hdr.desc = desc;
    c3ca:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    c3cc:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    c3ce:	4628      	mov	r0, r5
    c3d0:	f7f7 f9ee 	bl	37b0 <z_log_msg2_commit>
}
    c3d4:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    c3d6:	f7f7 f9cb 	bl	3770 <z_log_dropped>
		return;
    c3da:	e7fb      	b.n	c3d4 <z_log_msg2_finalize+0x2a>

0000c3dc <abort_function>:
{
    c3dc:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c3de:	2000      	movs	r0, #0
    c3e0:	f7f7 f88a 	bl	34f8 <sys_reboot>

0000c3e4 <z_log_msg2_runtime_create>:
{
    c3e4:	b510      	push	{r4, lr}
    c3e6:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c3e8:	ac0b      	add	r4, sp, #44	; 0x2c
    c3ea:	9405      	str	r4, [sp, #20]
    c3ec:	9403      	str	r4, [sp, #12]
    c3ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c3f0:	9402      	str	r4, [sp, #8]
    c3f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c3f4:	9401      	str	r4, [sp, #4]
    c3f6:	9c08      	ldr	r4, [sp, #32]
    c3f8:	9400      	str	r4, [sp, #0]
    c3fa:	f7f7 fc21 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c3fe:	b006      	add	sp, #24
    c400:	bd10      	pop	{r4, pc}

0000c402 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c402:	b538      	push	{r3, r4, r5, lr}
    c404:	4604      	mov	r4, r0

	if (esf != NULL) {
    c406:	460d      	mov	r5, r1
    c408:	b111      	cbz	r1, c410 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    c40a:	4608      	mov	r0, r1
    c40c:	f7f8 f83c 	bl	4488 <esf_dump>
	}
	z_fatal_error(reason, esf);
    c410:	4629      	mov	r1, r5
    c412:	4620      	mov	r0, r4
    c414:	f7fc fba6 	bl	8b64 <z_fatal_error>
}
    c418:	bd38      	pop	{r3, r4, r5, pc}

0000c41a <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    c41a:	b508      	push	{r3, lr}
    c41c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c41e:	6800      	ldr	r0, [r0, #0]
    c420:	f7ff ffef 	bl	c402 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    c424:	bd08      	pop	{r3, pc}

0000c426 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    c426:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c428:	2100      	movs	r1, #0
    c42a:	2001      	movs	r0, #1
    c42c:	f7ff ffe9 	bl	c402 <z_arm_fatal_error>
}
    c430:	bd08      	pop	{r3, pc}

0000c432 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c432:	b508      	push	{r3, lr}
	handler();
    c434:	f7f8 f8c4 	bl	45c0 <z_SysNmiOnReset>
	z_arm_int_exit();
    c438:	f7f8 f9ba 	bl	47b0 <z_arm_exc_exit>
}
    c43c:	bd08      	pop	{r3, pc}

0000c43e <memory_fault_recoverable>:
}
    c43e:	2000      	movs	r0, #0
    c440:	4770      	bx	lr

0000c442 <z_log_msg2_runtime_create>:
{
    c442:	b510      	push	{r4, lr}
    c444:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c446:	ac0b      	add	r4, sp, #44	; 0x2c
    c448:	9405      	str	r4, [sp, #20]
    c44a:	9403      	str	r4, [sp, #12]
    c44c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c44e:	9402      	str	r4, [sp, #8]
    c450:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c452:	9401      	str	r4, [sp, #4]
    c454:	9c08      	ldr	r4, [sp, #32]
    c456:	9400      	str	r4, [sp, #0]
    c458:	f7f7 fbf2 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c45c:	b006      	add	sp, #24
    c45e:	bd10      	pop	{r4, pc}

0000c460 <fault_handle>:
{
    c460:	b508      	push	{r3, lr}
	*recoverable = false;
    c462:	2300      	movs	r3, #0
    c464:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    c466:	1ecb      	subs	r3, r1, #3
    c468:	2b09      	cmp	r3, #9
    c46a:	d81a      	bhi.n	c4a2 <fault_handle+0x42>
    c46c:	e8df f003 	tbb	[pc, r3]
    c470:	110d0905 	.word	0x110d0905
    c474:	19191919 	.word	0x19191919
    c478:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    c47a:	4611      	mov	r1, r2
    c47c:	f7f8 fbea 	bl	4c54 <hard_fault>
}
    c480:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    c482:	2100      	movs	r1, #0
    c484:	f7f8 fb08 	bl	4a98 <mem_manage_fault>
		break;
    c488:	e7fa      	b.n	c480 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    c48a:	2100      	movs	r1, #0
    c48c:	f7f8 f99e 	bl	47cc <bus_fault>
		break;
    c490:	e7f6      	b.n	c480 <fault_handle+0x20>
		reason = usage_fault(esf);
    c492:	f7f8 fa43 	bl	491c <usage_fault>
		break;
    c496:	e7f3      	b.n	c480 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    c498:	4611      	mov	r1, r2
    c49a:	f7f8 fac9 	bl	4a30 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c49e:	2000      	movs	r0, #0
		break;
    c4a0:	e7ee      	b.n	c480 <fault_handle+0x20>
		reserved_exception(esf, fault);
    c4a2:	f7f8 fad9 	bl	4a58 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c4a6:	2000      	movs	r0, #0
	return reason;
    c4a8:	e7ea      	b.n	c480 <fault_handle+0x20>

0000c4aa <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    c4aa:	6843      	ldr	r3, [r0, #4]
    c4ac:	1e5a      	subs	r2, r3, #1
		&&
    c4ae:	4213      	tst	r3, r2
    c4b0:	d106      	bne.n	c4c0 <mpu_partition_is_valid+0x16>
		&&
    c4b2:	2b1f      	cmp	r3, #31
    c4b4:	d906      	bls.n	c4c4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    c4b6:	6803      	ldr	r3, [r0, #0]
		&&
    c4b8:	421a      	tst	r2, r3
    c4ba:	d005      	beq.n	c4c8 <mpu_partition_is_valid+0x1e>
    c4bc:	2000      	movs	r0, #0
    c4be:	4770      	bx	lr
    c4c0:	2000      	movs	r0, #0
    c4c2:	4770      	bx	lr
    c4c4:	2000      	movs	r0, #0
    c4c6:	4770      	bx	lr
    c4c8:	2001      	movs	r0, #1
}
    c4ca:	4770      	bx	lr

0000c4cc <z_log_msg2_runtime_create>:
{
    c4cc:	b510      	push	{r4, lr}
    c4ce:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c4d0:	ac0b      	add	r4, sp, #44	; 0x2c
    c4d2:	9405      	str	r4, [sp, #20]
    c4d4:	9403      	str	r4, [sp, #12]
    c4d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c4d8:	9402      	str	r4, [sp, #8]
    c4da:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c4dc:	9401      	str	r4, [sp, #4]
    c4de:	9c08      	ldr	r4, [sp, #32]
    c4e0:	9400      	str	r4, [sp, #0]
    c4e2:	f7f7 fbad 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c4e6:	b006      	add	sp, #24
    c4e8:	bd10      	pop	{r4, pc}

0000c4ea <mpu_configure_region>:
{
    c4ea:	b500      	push	{lr}
    c4ec:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    c4ee:	680b      	ldr	r3, [r1, #0]
    c4f0:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    c4f2:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c4f4:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    c4f6:	2b20      	cmp	r3, #32
    c4f8:	d912      	bls.n	c520 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    c4fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c4fe:	d811      	bhi.n	c524 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c500:	3b01      	subs	r3, #1
    c502:	fab3 f383 	clz	r3, r3
    c506:	f1c3 031f 	rsb	r3, r3, #31
    c50a:	005b      	lsls	r3, r3, #1
    c50c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c510:	4313      	orrs	r3, r2
    c512:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    c514:	a901      	add	r1, sp, #4
    c516:	f7f8 fda7 	bl	5068 <region_allocate_and_init>
}
    c51a:	b005      	add	sp, #20
    c51c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    c520:	2308      	movs	r3, #8
    c522:	e7f5      	b.n	c510 <mpu_configure_region+0x26>
		return REGION_4G;
    c524:	233e      	movs	r3, #62	; 0x3e
    c526:	e7f3      	b.n	c510 <mpu_configure_region+0x26>

0000c528 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    c528:	4602      	mov	r2, r0
    c52a:	e002      	b.n	c532 <strcpy+0xa>
		*d = *s;
    c52c:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    c530:	3101      	adds	r1, #1
	while (*s != '\0') {
    c532:	780b      	ldrb	r3, [r1, #0]
    c534:	2b00      	cmp	r3, #0
    c536:	d1f9      	bne.n	c52c <strcpy+0x4>
	}

	*d = '\0';
    c538:	7013      	strb	r3, [r2, #0]

	return dest;
}
    c53a:	4770      	bx	lr

0000c53c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    c53c:	4603      	mov	r3, r0
    c53e:	b1a2      	cbz	r2, c56a <strncpy+0x2e>
{
    c540:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    c542:	780c      	ldrb	r4, [r1, #0]
    c544:	b12c      	cbz	r4, c552 <strncpy+0x16>
		*d = *s;
    c546:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    c54a:	3101      	adds	r1, #1
		d++;
		n--;
    c54c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    c54e:	2a00      	cmp	r2, #0
    c550:	d1f7      	bne.n	c542 <strncpy+0x6>
	}

	while (n > 0) {
    c552:	b122      	cbz	r2, c55e <strncpy+0x22>
		*d = '\0';
    c554:	2100      	movs	r1, #0
    c556:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    c55a:	3a01      	subs	r2, #1
    c55c:	e7f9      	b.n	c552 <strncpy+0x16>
	}

	return dest;
}
    c55e:	bc10      	pop	{r4}
    c560:	4770      	bx	lr
		*d = '\0';
    c562:	2100      	movs	r1, #0
    c564:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c568:	3a01      	subs	r2, #1
	while (n > 0) {
    c56a:	2a00      	cmp	r2, #0
    c56c:	d1f9      	bne.n	c562 <strncpy+0x26>
    c56e:	4770      	bx	lr

0000c570 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c570:	4603      	mov	r3, r0
	size_t n = 0;
    c572:	2000      	movs	r0, #0

	while (*s != '\0') {
    c574:	e001      	b.n	c57a <strlen+0xa>
		s++;
    c576:	3301      	adds	r3, #1
		n++;
    c578:	3001      	adds	r0, #1
	while (*s != '\0') {
    c57a:	781a      	ldrb	r2, [r3, #0]
    c57c:	2a00      	cmp	r2, #0
    c57e:	d1fa      	bne.n	c576 <strlen+0x6>
	}

	return n;
}
    c580:	4770      	bx	lr

0000c582 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c582:	4603      	mov	r3, r0
	size_t n = 0;
    c584:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c586:	e001      	b.n	c58c <strnlen+0xa>
		s++;
    c588:	3301      	adds	r3, #1
		n++;
    c58a:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    c58c:	781a      	ldrb	r2, [r3, #0]
    c58e:	b10a      	cbz	r2, c594 <strnlen+0x12>
    c590:	4288      	cmp	r0, r1
    c592:	d3f9      	bcc.n	c588 <strnlen+0x6>
	}

	return n;
}
    c594:	4770      	bx	lr

0000c596 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c596:	e001      	b.n	c59c <strcmp+0x6>
		s1++;
    c598:	3001      	adds	r0, #1
		s2++;
    c59a:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c59c:	7803      	ldrb	r3, [r0, #0]
    c59e:	780a      	ldrb	r2, [r1, #0]
    c5a0:	4293      	cmp	r3, r2
    c5a2:	d101      	bne.n	c5a8 <strcmp+0x12>
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d1f7      	bne.n	c598 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    c5a8:	1a98      	subs	r0, r3, r2
    c5aa:	4770      	bx	lr

0000c5ac <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    c5ac:	ea80 0301 	eor.w	r3, r0, r1
    c5b0:	f013 0f03 	tst.w	r3, #3
    c5b4:	d001      	beq.n	c5ba <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    c5b6:	4603      	mov	r3, r0
    c5b8:	e023      	b.n	c602 <memcpy+0x56>
    c5ba:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    c5bc:	f013 0f03 	tst.w	r3, #3
    c5c0:	d00f      	beq.n	c5e2 <memcpy+0x36>
			if (n == 0) {
    c5c2:	b30a      	cbz	r2, c608 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    c5c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5c8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    c5cc:	3a01      	subs	r2, #1
    c5ce:	e7f5      	b.n	c5bc <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    c5d0:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5d4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c5d8:	3a01      	subs	r2, #1
	while (n > 0) {
    c5da:	2a00      	cmp	r2, #0
    c5dc:	d1f8      	bne.n	c5d0 <memcpy+0x24>
	}

	return d;
}
    c5de:	bc10      	pop	{r4}
    c5e0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    c5e2:	2a03      	cmp	r2, #3
    c5e4:	d90d      	bls.n	c602 <memcpy+0x56>
{
    c5e6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    c5e8:	f851 4b04 	ldr.w	r4, [r1], #4
    c5ec:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    c5f0:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    c5f2:	2a03      	cmp	r2, #3
    c5f4:	d8f8      	bhi.n	c5e8 <memcpy+0x3c>
    c5f6:	e7f0      	b.n	c5da <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    c5f8:	f811 cb01 	ldrb.w	ip, [r1], #1
    c5fc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c600:	3a01      	subs	r2, #1
	while (n > 0) {
    c602:	2a00      	cmp	r2, #0
    c604:	d1f8      	bne.n	c5f8 <memcpy+0x4c>
    c606:	4770      	bx	lr
}
    c608:	4770      	bx	lr

0000c60a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c60a:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    c60e:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c610:	e002      	b.n	c618 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    c612:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c616:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c618:	f013 0f03 	tst.w	r3, #3
    c61c:	d002      	beq.n	c624 <memset+0x1a>
		if (n == 0) {
    c61e:	2a00      	cmp	r2, #0
    c620:	d1f7      	bne.n	c612 <memset+0x8>
    c622:	e00f      	b.n	c644 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    c624:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    c626:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    c62a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    c62e:	2a03      	cmp	r2, #3
    c630:	d906      	bls.n	c640 <memset+0x36>
		*(d_word++) = c_word;
    c632:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    c636:	3a04      	subs	r2, #4
    c638:	e7f9      	b.n	c62e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    c63a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c63e:	3a01      	subs	r2, #1
	while (n > 0) {
    c640:	2a00      	cmp	r2, #0
    c642:	d1fa      	bne.n	c63a <memset+0x30>
	}

	return buf;
}
    c644:	4770      	bx	lr

0000c646 <_stdout_hook_default>:
}
    c646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c64a:	4770      	bx	lr

0000c64c <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    c64c:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    c64e:	f7f8 fe3f 	bl	52d0 <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    c652:	bd08      	pop	{r3, pc}

0000c654 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c658:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c65c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c660:	2a08      	cmp	r2, #8
    c662:	d001      	beq.n	c668 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    c664:	2000      	movs	r0, #0
    c666:	4770      	bx	lr
                switch(var2)
    c668:	2b02      	cmp	r3, #2
    c66a:	d001      	beq.n	c670 <nrf52_errata_197+0x1c>
                        return false;
    c66c:	2000      	movs	r0, #0
    c66e:	4770      	bx	lr
                        return true;
    c670:	2001      	movs	r0, #1
    #endif
}
    c672:	4770      	bx	lr

0000c674 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c674:	2806      	cmp	r0, #6
    c676:	d000      	beq.n	c67a <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c678:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c67a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c67e:	2201      	movs	r2, #1
    c680:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c684:	f3bf 8f4f 	dsb	sy
        __WFE();
    c688:	bf20      	wfe
    while (true)
    c68a:	e7fd      	b.n	c688 <pm_state_set+0x14>

0000c68c <pm_state_exit_post_ops>:
    c68c:	2300      	movs	r3, #0
    c68e:	f383 8811 	msr	BASEPRI, r3
    c692:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c696:	4770      	bx	lr

0000c698 <adc_context_on_timer_expired>:
{
    c698:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    c69a:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c69c:	f3bf 8f5b 	dmb	ish
    c6a0:	e850 3f00 	ldrex	r3, [r0]
    c6a4:	1c5a      	adds	r2, r3, #1
    c6a6:	e840 2100 	strex	r1, r2, [r0]
    c6aa:	2900      	cmp	r1, #0
    c6ac:	d1f8      	bne.n	c6a0 <adc_context_on_timer_expired+0x8>
    c6ae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    c6b2:	b11b      	cbz	r3, c6bc <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    c6b4:	f06f 030f 	mvn.w	r3, #15
    c6b8:	6603      	str	r3, [r0, #96]	; 0x60
}
    c6ba:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    c6bc:	f7f8 fe70 	bl	53a0 <adc_context_start_sampling>
    c6c0:	e7fb      	b.n	c6ba <adc_context_on_timer_expired+0x22>

0000c6c2 <z_log_msg2_runtime_create>:
{
    c6c2:	b510      	push	{r4, lr}
    c6c4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c6c6:	ac0b      	add	r4, sp, #44	; 0x2c
    c6c8:	9405      	str	r4, [sp, #20]
    c6ca:	9403      	str	r4, [sp, #12]
    c6cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c6ce:	9402      	str	r4, [sp, #8]
    c6d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c6d2:	9401      	str	r4, [sp, #4]
    c6d4:	9c08      	ldr	r4, [sp, #32]
    c6d6:	9400      	str	r4, [sp, #0]
    c6d8:	f7f7 fab2 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    c6dc:	b006      	add	sp, #24
    c6de:	bd10      	pop	{r4, pc}

0000c6e0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    c6e0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    c6e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c6e6:	0089      	lsls	r1, r1, #2
    c6e8:	3140      	adds	r1, #64	; 0x40
}
    c6ea:	4408      	add	r0, r1
    c6ec:	4770      	bx	lr

0000c6ee <get_sub_config>:
	const struct nrf_clock_control_config *config =
    c6ee:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    c6f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    c6f4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c6f8:	4770      	bx	lr

0000c6fa <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    c6fa:	6900      	ldr	r0, [r0, #16]
}
    c6fc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    c700:	4770      	bx	lr

0000c702 <set_off_state>:
	__asm__ volatile(
    c702:	f04f 0320 	mov.w	r3, #32
    c706:	f3ef 8211 	mrs	r2, BASEPRI
    c70a:	f383 8812 	msr	BASEPRI_MAX, r3
    c70e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c712:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c714:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c718:	d001      	beq.n	c71e <set_off_state+0x1c>
    c71a:	428b      	cmp	r3, r1
    c71c:	d107      	bne.n	c72e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c71e:	2301      	movs	r3, #1
    c720:	6003      	str	r3, [r0, #0]
	int err = 0;
    c722:	2000      	movs	r0, #0
	__asm__ volatile(
    c724:	f382 8811 	msr	BASEPRI, r2
    c728:	f3bf 8f6f 	isb	sy
}
    c72c:	4770      	bx	lr
		err = -EPERM;
    c72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c732:	e7f7      	b.n	c724 <set_off_state+0x22>

0000c734 <set_starting_state>:
	__asm__ volatile(
    c734:	f04f 0320 	mov.w	r3, #32
    c738:	f3ef 8211 	mrs	r2, BASEPRI
    c73c:	f383 8812 	msr	BASEPRI_MAX, r3
    c740:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c744:	6803      	ldr	r3, [r0, #0]
    c746:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c74a:	f003 0307 	and.w	r3, r3, #7
    c74e:	2b01      	cmp	r3, #1
    c750:	d008      	beq.n	c764 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    c752:	458c      	cmp	ip, r1
    c754:	d009      	beq.n	c76a <set_starting_state+0x36>
		err = -EPERM;
    c756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    c75a:	f382 8811 	msr	BASEPRI, r2
    c75e:	f3bf 8f6f 	isb	sy
}
    c762:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c764:	6001      	str	r1, [r0, #0]
	int err = 0;
    c766:	2000      	movs	r0, #0
    c768:	e7f7      	b.n	c75a <set_starting_state+0x26>
		err = -EALREADY;
    c76a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c76e:	e7f4      	b.n	c75a <set_starting_state+0x26>

0000c770 <set_on_state>:
	__asm__ volatile(
    c770:	f04f 0320 	mov.w	r3, #32
    c774:	f3ef 8211 	mrs	r2, BASEPRI
    c778:	f383 8812 	msr	BASEPRI_MAX, r3
    c77c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c780:	6803      	ldr	r3, [r0, #0]
    c782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c786:	f043 0302 	orr.w	r3, r3, #2
    c78a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c78c:	f382 8811 	msr	BASEPRI, r2
    c790:	f3bf 8f6f 	isb	sy
}
    c794:	4770      	bx	lr

0000c796 <clkstarted_handle>:
{
    c796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c798:	4606      	mov	r6, r0
    c79a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    c79c:	f7ff ffa0 	bl	c6e0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    c7a0:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    c7a2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    c7a4:	2300      	movs	r3, #0
    c7a6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    c7aa:	f7ff ffe1 	bl	c770 <set_on_state>
	if (callback) {
    c7ae:	b11d      	cbz	r5, c7b8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c7b0:	463a      	mov	r2, r7
    c7b2:	4621      	mov	r1, r4
    c7b4:	4630      	mov	r0, r6
    c7b6:	47a8      	blx	r5
}
    c7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c7ba <async_start>:
{
    c7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7be:	4606      	mov	r6, r0
    c7c0:	4690      	mov	r8, r2
    c7c2:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    c7c4:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c7c6:	4629      	mov	r1, r5
    c7c8:	f7ff ff8a 	bl	c6e0 <get_sub_data>
    c7cc:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    c7ce:	9906      	ldr	r1, [sp, #24]
    c7d0:	3008      	adds	r0, #8
    c7d2:	f7ff ffaf 	bl	c734 <set_starting_state>
	if (err < 0) {
    c7d6:	2800      	cmp	r0, #0
    c7d8:	db09      	blt.n	c7ee <async_start+0x34>
	subdata->cb = cb;
    c7da:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    c7de:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    c7e0:	4629      	mov	r1, r5
    c7e2:	4630      	mov	r0, r6
    c7e4:	f7ff ff83 	bl	c6ee <get_sub_config>
    c7e8:	6803      	ldr	r3, [r0, #0]
    c7ea:	4798      	blx	r3
	return 0;
    c7ec:	2000      	movs	r0, #0
}
    c7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c7f2 <api_start>:
{
    c7f2:	b510      	push	{r4, lr}
    c7f4:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c7f6:	2480      	movs	r4, #128	; 0x80
    c7f8:	9400      	str	r4, [sp, #0]
    c7fa:	f7ff ffde 	bl	c7ba <async_start>
}
    c7fe:	b002      	add	sp, #8
    c800:	bd10      	pop	{r4, pc}

0000c802 <onoff_started_callback>:
{
    c802:	b510      	push	{r4, lr}
    c804:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    c806:	b2c9      	uxtb	r1, r1
    c808:	f7ff ff77 	bl	c6fa <get_onoff_manager>
	notify(mgr, 0);
    c80c:	2100      	movs	r1, #0
    c80e:	47a0      	blx	r4
}
    c810:	bd10      	pop	{r4, pc}

0000c812 <hfclk_start>:
{
    c812:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c814:	2001      	movs	r0, #1
    c816:	f7fa ffad 	bl	7774 <nrfx_clock_start>
}
    c81a:	bd08      	pop	{r3, pc}

0000c81c <lfclk_start>:
{
    c81c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c81e:	2000      	movs	r0, #0
    c820:	f7fa ffa8 	bl	7774 <nrfx_clock_start>
}
    c824:	bd08      	pop	{r3, pc}

0000c826 <hfclk_stop>:
{
    c826:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c828:	2001      	movs	r0, #1
    c82a:	f7fb f819 	bl	7860 <nrfx_clock_stop>
}
    c82e:	bd08      	pop	{r3, pc}

0000c830 <lfclk_stop>:
{
    c830:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c832:	2000      	movs	r0, #0
    c834:	f7fb f814 	bl	7860 <nrfx_clock_stop>
}
    c838:	bd08      	pop	{r3, pc}

0000c83a <api_stop>:
{
    c83a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    c83c:	2280      	movs	r2, #128	; 0x80
    c83e:	f7f9 f919 	bl	5a74 <stop>
}
    c842:	bd08      	pop	{r3, pc}

0000c844 <blocking_start_callback>:
{
    c844:	b508      	push	{r3, lr}
    c846:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c848:	f7fd f840 	bl	98cc <z_impl_k_sem_give>
}
    c84c:	bd08      	pop	{r3, pc}

0000c84e <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c84e:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    c852:	f020 0001 	bic.w	r0, r0, #1
    c856:	0540      	lsls	r0, r0, #21
    c858:	0d40      	lsrs	r0, r0, #21
    c85a:	f240 2306 	movw	r3, #518	; 0x206
    c85e:	4298      	cmp	r0, r3
    c860:	d033      	beq.n	c8ca <get_drive+0x7c>
    c862:	d816      	bhi.n	c892 <get_drive+0x44>
    c864:	2806      	cmp	r0, #6
    c866:	d02c      	beq.n	c8c2 <get_drive+0x74>
    c868:	d906      	bls.n	c878 <get_drive+0x2a>
    c86a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c86e:	d10d      	bne.n	c88c <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    c870:	2301      	movs	r3, #1
    c872:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c874:	2000      	movs	r0, #0
		break;
    c876:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c878:	b300      	cbz	r0, c8bc <get_drive+0x6e>
    c87a:	2802      	cmp	r0, #2
    c87c:	d103      	bne.n	c886 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    c87e:	2304      	movs	r3, #4
    c880:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c882:	2000      	movs	r0, #0
		break;
    c884:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c886:	f06f 0015 	mvn.w	r0, #21
    c88a:	4770      	bx	lr
    c88c:	f06f 0015 	mvn.w	r0, #21
    c890:	4770      	bx	lr
    c892:	f240 4302 	movw	r3, #1026	; 0x402
    c896:	4298      	cmp	r0, r3
    c898:	d01b      	beq.n	c8d2 <get_drive+0x84>
    c89a:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    c89e:	d103      	bne.n	c8a8 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    c8a0:	2303      	movs	r3, #3
    c8a2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c8a4:	2000      	movs	r0, #0
		break;
    c8a6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c8a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    c8ac:	d103      	bne.n	c8b6 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    c8ae:	2302      	movs	r3, #2
    c8b0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c8b2:	2000      	movs	r0, #0
		break;
    c8b4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c8b6:	f06f 0015 	mvn.w	r0, #21
    c8ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    c8bc:	2000      	movs	r0, #0
    c8be:	7008      	strb	r0, [r1, #0]
		break;
    c8c0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    c8c2:	2306      	movs	r3, #6
    c8c4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c8c6:	2000      	movs	r0, #0
		break;
    c8c8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    c8ca:	2307      	movs	r3, #7
    c8cc:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c8ce:	2000      	movs	r0, #0
		break;
    c8d0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    c8d2:	2305      	movs	r3, #5
    c8d4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c8d6:	2000      	movs	r0, #0
}
    c8d8:	4770      	bx	lr

0000c8da <get_pull>:
	if (flags & GPIO_PULL_UP) {
    c8da:	f010 0f10 	tst.w	r0, #16
    c8de:	d104      	bne.n	c8ea <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    c8e0:	f010 0f20 	tst.w	r0, #32
    c8e4:	d103      	bne.n	c8ee <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    c8e6:	2000      	movs	r0, #0
    c8e8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    c8ea:	2003      	movs	r0, #3
    c8ec:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    c8ee:	2001      	movs	r0, #1
}
    c8f0:	4770      	bx	lr

0000c8f2 <gpio_nrfx_port_get_raw>:
	return port->config;
    c8f2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c8f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c8f6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c8fa:	600b      	str	r3, [r1, #0]
}
    c8fc:	2000      	movs	r0, #0
    c8fe:	4770      	bx	lr

0000c900 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    c900:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c902:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    c904:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    c908:	4042      	eors	r2, r0
    c90a:	400a      	ands	r2, r1
    c90c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    c90e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    c912:	2000      	movs	r0, #0
    c914:	4770      	bx	lr

0000c916 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    c916:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c918:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    c91a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    c91e:	2000      	movs	r0, #0
    c920:	4770      	bx	lr

0000c922 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    c922:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c924:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    c926:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    c92a:	2000      	movs	r0, #0
    c92c:	4770      	bx	lr

0000c92e <gpio_nrfx_port_toggle_bits>:
	return port->config;
    c92e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c930:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c932:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    c936:	404b      	eors	r3, r1
    p_reg->OUT = value;
    c938:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    c93c:	2000      	movs	r0, #0
    c93e:	4770      	bx	lr

0000c940 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    c940:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    c944:	d007      	beq.n	c956 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c946:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    c94a:	d00d      	beq.n	c968 <get_trigger+0x28>
    c94c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c950:	d008      	beq.n	c964 <get_trigger+0x24>
    c952:	2001      	movs	r0, #1
}
    c954:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c956:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c95a:	d001      	beq.n	c960 <get_trigger+0x20>
    c95c:	2005      	movs	r0, #5
    c95e:	4770      	bx	lr
    c960:	2004      	movs	r0, #4
    c962:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c964:	2002      	movs	r0, #2
    c966:	4770      	bx	lr
    c968:	2003      	movs	r0, #3
    c96a:	4770      	bx	lr

0000c96c <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    c96c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c96e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    c970:	f04f 0120 	mov.w	r1, #32
    c974:	f3ef 8211 	mrs	r2, BASEPRI
    c978:	f381 8812 	msr	BASEPRI_MAX, r1
    c97c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c980:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c984:	b131      	cbz	r1, c994 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c986:	2100      	movs	r1, #0
    c988:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c98c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c990:	2101      	movs	r1, #1
    c992:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c994:	f382 8811 	msr	BASEPRI, r2
    c998:	f3bf 8f6f 	isb	sy
}
    c99c:	4770      	bx	lr

0000c99e <uarte_nrfx_isr_int>:
{
    c99e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c9a0:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    c9a2:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    c9a4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c9a8:	f413 7f80 	tst.w	r3, #256	; 0x100
    c9ac:	d002      	beq.n	c9b4 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c9ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    c9b2:	b9d3      	cbnz	r3, c9ea <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c9b4:	686b      	ldr	r3, [r5, #4]
    c9b6:	f013 0f10 	tst.w	r3, #16
    c9ba:	d015      	beq.n	c9e8 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    c9bc:	f04f 0220 	mov.w	r2, #32
    c9c0:	f3ef 8311 	mrs	r3, BASEPRI
    c9c4:	f382 8812 	msr	BASEPRI_MAX, r2
    c9c8:	f3bf 8f6f 	isb	sy
    c9cc:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c9d0:	b112      	cbz	r2, c9d8 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c9d2:	2200      	movs	r2, #0
    c9d4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    c9d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c9dc:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    c9e0:	f383 8811 	msr	BASEPRI, r3
    c9e4:	f3bf 8f6f 	isb	sy
}
    c9e8:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    c9ea:	f7ff ffbf 	bl	c96c <endtx_isr>
    c9ee:	e7e1      	b.n	c9b4 <uarte_nrfx_isr_int+0x16>

0000c9f0 <uarte_nrfx_configure>:
{
    c9f0:	b570      	push	{r4, r5, r6, lr}
    c9f2:	b082      	sub	sp, #8
    c9f4:	4606      	mov	r6, r0
    c9f6:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    c9f8:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    c9fa:	794b      	ldrb	r3, [r1, #5]
    c9fc:	2b01      	cmp	r3, #1
    c9fe:	d006      	beq.n	ca0e <uarte_nrfx_configure+0x1e>
    ca00:	2b03      	cmp	r3, #3
    ca02:	d011      	beq.n	ca28 <uarte_nrfx_configure+0x38>
    ca04:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    ca08:	4618      	mov	r0, r3
    ca0a:	b002      	add	sp, #8
    ca0c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    ca0e:	2300      	movs	r3, #0
    ca10:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ca14:	79a3      	ldrb	r3, [r4, #6]
    ca16:	2b03      	cmp	r3, #3
    ca18:	d137      	bne.n	ca8a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    ca1a:	79e3      	ldrb	r3, [r4, #7]
    ca1c:	b143      	cbz	r3, ca30 <uarte_nrfx_configure+0x40>
    ca1e:	2b01      	cmp	r3, #1
    ca20:	d010      	beq.n	ca44 <uarte_nrfx_configure+0x54>
    ca22:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ca26:	e7ef      	b.n	ca08 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ca28:	2310      	movs	r3, #16
    ca2a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    ca2e:	e7f1      	b.n	ca14 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    ca30:	2300      	movs	r3, #0
    ca32:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    ca36:	7923      	ldrb	r3, [r4, #4]
    ca38:	b143      	cbz	r3, ca4c <uarte_nrfx_configure+0x5c>
    ca3a:	2b02      	cmp	r3, #2
    ca3c:	d021      	beq.n	ca82 <uarte_nrfx_configure+0x92>
    ca3e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ca42:	e7e1      	b.n	ca08 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    ca44:	2301      	movs	r3, #1
    ca46:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    ca4a:	e7f4      	b.n	ca36 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    ca4c:	2300      	movs	r3, #0
    ca4e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ca52:	6821      	ldr	r1, [r4, #0]
    ca54:	4630      	mov	r0, r6
    ca56:	f7f9 fc15 	bl	6284 <baudrate_set>
    ca5a:	4603      	mov	r3, r0
    ca5c:	b9c0      	cbnz	r0, ca90 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    ca5e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    ca60:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ca62:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    ca66:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    ca6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ca6e:	4331      	orrs	r1, r6
    ca70:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ca72:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    ca76:	3504      	adds	r5, #4
    ca78:	e894 0003 	ldmia.w	r4, {r0, r1}
    ca7c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    ca80:	e7c2      	b.n	ca08 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ca82:	230e      	movs	r3, #14
    ca84:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    ca88:	e7e3      	b.n	ca52 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    ca8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ca8e:	e7bb      	b.n	ca08 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    ca90:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ca94:	e7b8      	b.n	ca08 <uarte_nrfx_configure+0x18>

0000ca96 <uarte_nrfx_config_get>:
{
    ca96:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    ca98:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    ca9a:	3304      	adds	r3, #4
    ca9c:	e893 0003 	ldmia.w	r3, {r0, r1}
    caa0:	e882 0003 	stmia.w	r2, {r0, r1}
}
    caa4:	2000      	movs	r0, #0
    caa6:	4770      	bx	lr

0000caa8 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    caa8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    caaa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    caac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    cab0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    cab4:	4770      	bx	lr

0000cab6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    cab6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    cab8:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    caba:	685b      	ldr	r3, [r3, #4]
    cabc:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cac0:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    cac4:	b929      	cbnz	r1, cad2 <is_tx_ready+0x1c>
    cac6:	b933      	cbnz	r3, cad6 <is_tx_ready+0x20>
    cac8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    cacc:	b92b      	cbnz	r3, cada <is_tx_ready+0x24>
    cace:	2000      	movs	r0, #0
    cad0:	4770      	bx	lr
    cad2:	2001      	movs	r0, #1
    cad4:	4770      	bx	lr
    cad6:	2000      	movs	r0, #0
    cad8:	4770      	bx	lr
    cada:	2001      	movs	r0, #1
}
    cadc:	4770      	bx	lr

0000cade <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    cade:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    cae0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    cae2:	2208      	movs	r2, #8
    cae4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    cae8:	4770      	bx	lr

0000caea <tx_start>:
{
    caea:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    caec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    caee:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    caf0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    caf4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    caf8:	2200      	movs	r2, #0
    cafa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    cafe:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    cb02:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    cb06:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cb0a:	685b      	ldr	r3, [r3, #4]
    cb0c:	f013 0f10 	tst.w	r3, #16
    cb10:	d102      	bne.n	cb18 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb12:	2301      	movs	r3, #1
    cb14:	60a3      	str	r3, [r4, #8]
}
    cb16:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    cb18:	2101      	movs	r1, #1
    cb1a:	f7ff ffe0 	bl	cade <uarte_enable>
    p_reg->INTENSET = mask;
    cb1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    cb22:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    cb26:	e7f4      	b.n	cb12 <tx_start+0x28>

0000cb28 <uarte_nrfx_poll_in>:
{
    cb28:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    cb2a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    cb2c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    cb2e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cb30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    cb34:	b152      	cbz	r2, cb4c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    cb36:	7c62      	ldrb	r2, [r4, #17]
    cb38:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb3a:	2000      	movs	r0, #0
    cb3c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    cb40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb44:	2201      	movs	r2, #1
    cb46:	601a      	str	r2, [r3, #0]
}
    cb48:	bc10      	pop	{r4}
    cb4a:	4770      	bx	lr
		return -1;
    cb4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cb50:	e7fa      	b.n	cb48 <uarte_nrfx_poll_in+0x20>

0000cb52 <wait_tx_ready>:
{
    cb52:	b570      	push	{r4, r5, r6, lr}
    cb54:	4606      	mov	r6, r0
    cb56:	e014      	b.n	cb82 <wait_tx_ready+0x30>
		if (res) {
    cb58:	b17d      	cbz	r5, cb7a <wait_tx_ready+0x28>
	__asm__ volatile(
    cb5a:	f04f 0320 	mov.w	r3, #32
    cb5e:	f3ef 8411 	mrs	r4, BASEPRI
    cb62:	f383 8812 	msr	BASEPRI_MAX, r3
    cb66:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    cb6a:	4630      	mov	r0, r6
    cb6c:	f7ff ffa3 	bl	cab6 <is_tx_ready>
    cb70:	b9a0      	cbnz	r0, cb9c <wait_tx_ready+0x4a>
	__asm__ volatile(
    cb72:	f384 8811 	msr	BASEPRI, r4
    cb76:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    cb7a:	2021      	movs	r0, #33	; 0x21
    cb7c:	2100      	movs	r1, #0
    cb7e:	f7fe f9dd 	bl	af3c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    cb82:	2464      	movs	r4, #100	; 0x64
    cb84:	4630      	mov	r0, r6
    cb86:	f7ff ff96 	bl	cab6 <is_tx_ready>
    cb8a:	4605      	mov	r5, r0
    cb8c:	2800      	cmp	r0, #0
    cb8e:	d1e3      	bne.n	cb58 <wait_tx_ready+0x6>
    cb90:	2001      	movs	r0, #1
    cb92:	f000 f9c1 	bl	cf18 <nrfx_busy_wait>
    cb96:	3c01      	subs	r4, #1
    cb98:	d1f4      	bne.n	cb84 <wait_tx_ready+0x32>
    cb9a:	e7dd      	b.n	cb58 <wait_tx_ready+0x6>
}
    cb9c:	4620      	mov	r0, r4
    cb9e:	bd70      	pop	{r4, r5, r6, pc}

0000cba0 <z_log_msg2_runtime_create>:
{
    cba0:	b510      	push	{r4, lr}
    cba2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    cba4:	ac0b      	add	r4, sp, #44	; 0x2c
    cba6:	9405      	str	r4, [sp, #20]
    cba8:	9403      	str	r4, [sp, #12]
    cbaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cbac:	9402      	str	r4, [sp, #8]
    cbae:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cbb0:	9401      	str	r4, [sp, #4]
    cbb2:	9c08      	ldr	r4, [sp, #32]
    cbb4:	9400      	str	r4, [sp, #0]
    cbb6:	f7f7 f843 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    cbba:	b006      	add	sp, #24
    cbbc:	bd10      	pop	{r4, pc}

0000cbbe <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    cbbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cbc2:	b083      	sub	sp, #12
    cbc4:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    cbc6:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    cbc8:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    cbca:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    cbce:	2100      	movs	r1, #0
    cbd0:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    cbd4:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    cbd8:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    cbdc:	aa01      	add	r2, sp, #4
    cbde:	4648      	mov	r0, r9
    cbe0:	f000 f8e6 	bl	cdb0 <pinctrl_lookup_state>
	if (ret < 0) {
    cbe4:	1e04      	subs	r4, r0, #0
    cbe6:	db07      	blt.n	cbf8 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    cbe8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    cbea:	f8d9 2000 	ldr.w	r2, [r9]
    cbee:	7919      	ldrb	r1, [r3, #4]
    cbf0:	6818      	ldr	r0, [r3, #0]
    cbf2:	f7f9 ff09 	bl	6a08 <pinctrl_configure_pins>
    cbf6:	4604      	mov	r4, r0
	if (err < 0) {
    cbf8:	2c00      	cmp	r4, #0
    cbfa:	db35      	blt.n	cc68 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    cbfc:	f108 0104 	add.w	r1, r8, #4
    cc00:	4628      	mov	r0, r5
    cc02:	f7ff fef5 	bl	c9f0 <uarte_nrfx_configure>
	if (err) {
    cc06:	4604      	mov	r4, r0
    cc08:	bb70      	cbnz	r0, cc68 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    cc0a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    cc0c:	f013 0f02 	tst.w	r3, #2
    cc10:	d12e      	bne.n	cc70 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    cc12:	2308      	movs	r3, #8
    cc14:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    cc18:	7a3b      	ldrb	r3, [r7, #8]
    cc1a:	b95b      	cbnz	r3, cc34 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc1c:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    cc20:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    cc24:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    cc28:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    cc2c:	2301      	movs	r3, #1
    cc2e:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc32:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    cc34:	687b      	ldr	r3, [r7, #4]
    cc36:	f013 0f02 	tst.w	r3, #2
    cc3a:	d103      	bne.n	cc44 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    cc3c:	f44f 7380 	mov.w	r3, #256	; 0x100
    cc40:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cc44:	687b      	ldr	r3, [r7, #4]
    cc46:	f013 0f10 	tst.w	r3, #16
    cc4a:	d003      	beq.n	cc54 <uarte_instance_init+0x96>
    cc4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    cc50:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    cc54:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    cc58:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    cc5c:	2300      	movs	r3, #0
    cc5e:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc62:	2301      	movs	r3, #1
    cc64:	60b3      	str	r3, [r6, #8]
    cc66:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    cc68:	4620      	mov	r0, r4
    cc6a:	b003      	add	sp, #12
    cc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    cc70:	4641      	mov	r1, r8
    cc72:	4630      	mov	r0, r6
    cc74:	f7f9 fbe6 	bl	6444 <endtx_stoptx_ppi_init>
		if (err < 0) {
    cc78:	2800      	cmp	r0, #0
    cc7a:	daca      	bge.n	cc12 <uarte_instance_init+0x54>
			return err;
    cc7c:	4604      	mov	r4, r0
    cc7e:	e7f3      	b.n	cc68 <uarte_instance_init+0xaa>

0000cc80 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    cc80:	b510      	push	{r4, lr}
    cc82:	4604      	mov	r4, r0
    cc84:	2200      	movs	r2, #0
    cc86:	2101      	movs	r1, #1
    cc88:	2002      	movs	r0, #2
    cc8a:	f7f7 fc63 	bl	4554 <z_arm_irq_priority_set>
    cc8e:	2002      	movs	r0, #2
    cc90:	f7f7 fc44 	bl	451c <arch_irq_enable>
    cc94:	2100      	movs	r1, #0
    cc96:	4620      	mov	r0, r4
    cc98:	f7ff ff91 	bl	cbbe <uarte_instance_init>
    cc9c:	bd10      	pop	{r4, pc}

0000cc9e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    cc9e:	b510      	push	{r4, lr}
    cca0:	4604      	mov	r4, r0
    cca2:	2200      	movs	r2, #0
    cca4:	2101      	movs	r1, #1
    cca6:	2028      	movs	r0, #40	; 0x28
    cca8:	f7f7 fc54 	bl	4554 <z_arm_irq_priority_set>
    ccac:	2028      	movs	r0, #40	; 0x28
    ccae:	f7f7 fc35 	bl	451c <arch_irq_enable>
    ccb2:	2100      	movs	r1, #0
    ccb4:	4620      	mov	r0, r4
    ccb6:	f7ff ff82 	bl	cbbe <uarte_instance_init>
    ccba:	bd10      	pop	{r4, pc}

0000ccbc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ccbc:	4770      	bx	lr

0000ccbe <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ccbe:	1a40      	subs	r0, r0, r1
}
    ccc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ccc4:	4770      	bx	lr

0000ccc6 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ccc6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ccca:	009b      	lsls	r3, r3, #2
    cccc:	b29b      	uxth	r3, r3
    ccce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ccd2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    ccd6:	2200      	movs	r2, #0
    ccd8:	601a      	str	r2, [r3, #0]
    ccda:	681b      	ldr	r3, [r3, #0]
}
    ccdc:	4770      	bx	lr

0000ccde <absolute_time_to_cc>:
}
    ccde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cce2:	4770      	bx	lr

0000cce4 <full_int_lock>:
	__asm__ volatile(
    cce4:	f04f 0320 	mov.w	r3, #32
    cce8:	f3ef 8011 	mrs	r0, BASEPRI
    ccec:	f383 8812 	msr	BASEPRI_MAX, r3
    ccf0:	f3bf 8f6f 	isb	sy
}
    ccf4:	4770      	bx	lr

0000ccf6 <full_int_unlock>:
	__asm__ volatile(
    ccf6:	f380 8811 	msr	BASEPRI, r0
    ccfa:	f3bf 8f6f 	isb	sy
}
    ccfe:	4770      	bx	lr

0000cd00 <set_absolute_alarm>:
{
    cd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd02:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    cd04:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    cd08:	f7f9 fbda 	bl	64c0 <get_comparator>
    cd0c:	4607      	mov	r7, r0
    cd0e:	e019      	b.n	cd44 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    cd10:	2013      	movs	r0, #19
    cd12:	f000 fa33 	bl	d17c <z_impl_k_busy_wait>
}
    cd16:	e022      	b.n	cd5e <set_absolute_alarm+0x5e>
		event_clear(chan);
    cd18:	4630      	mov	r0, r6
    cd1a:	f7ff ffd4 	bl	ccc6 <event_clear>
		event_enable(chan);
    cd1e:	4630      	mov	r0, r6
    cd20:	f7f9 fbd6 	bl	64d0 <event_enable>
		set_comparator(chan, cc_val);
    cd24:	4629      	mov	r1, r5
    cd26:	4630      	mov	r0, r6
    cd28:	f7f9 fbc0 	bl	64ac <set_comparator>
		now2 = counter();
    cd2c:	f7f9 fbe4 	bl	64f8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    cd30:	4284      	cmp	r4, r0
    cd32:	d01e      	beq.n	cd72 <set_absolute_alarm+0x72>
    cd34:	1c81      	adds	r1, r0, #2
    cd36:	4628      	mov	r0, r5
    cd38:	f7ff ffc1 	bl	ccbe <counter_sub>
	} while ((now2 != now) &&
    cd3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cd40:	d917      	bls.n	cd72 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    cd42:	462f      	mov	r7, r5
		now = counter();
    cd44:	f7f9 fbd8 	bl	64f8 <counter>
    cd48:	4604      	mov	r4, r0
		set_comparator(chan, now);
    cd4a:	4601      	mov	r1, r0
    cd4c:	4630      	mov	r0, r6
    cd4e:	f7f9 fbad 	bl	64ac <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    cd52:	4621      	mov	r1, r4
    cd54:	4638      	mov	r0, r7
    cd56:	f7ff ffb2 	bl	ccbe <counter_sub>
    cd5a:	2801      	cmp	r0, #1
    cd5c:	d0d8      	beq.n	cd10 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    cd5e:	1ca7      	adds	r7, r4, #2
    cd60:	4639      	mov	r1, r7
    cd62:	4628      	mov	r0, r5
    cd64:	f7ff ffab 	bl	ccbe <counter_sub>
    cd68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cd6c:	d9d4      	bls.n	cd18 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    cd6e:	463d      	mov	r5, r7
    cd70:	e7d2      	b.n	cd18 <set_absolute_alarm+0x18>
}
    cd72:	4628      	mov	r0, r5
    cd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cd76 <compare_set>:
{
    cd76:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd78:	b083      	sub	sp, #12
    cd7a:	4604      	mov	r4, r0
    cd7c:	4617      	mov	r7, r2
    cd7e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    cd80:	f7f9 fbc0 	bl	6504 <compare_int_lock>
    cd84:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd88:	9301      	str	r3, [sp, #4]
    cd8a:	9b08      	ldr	r3, [sp, #32]
    cd8c:	9300      	str	r3, [sp, #0]
    cd8e:	463a      	mov	r2, r7
    cd90:	462b      	mov	r3, r5
    cd92:	4620      	mov	r0, r4
    cd94:	f7f9 fca6 	bl	66e4 <compare_set_nolocks>
    cd98:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    cd9a:	4631      	mov	r1, r6
    cd9c:	4620      	mov	r0, r4
    cd9e:	f7f9 fc15 	bl	65cc <compare_int_unlock>
}
    cda2:	4628      	mov	r0, r5
    cda4:	b003      	add	sp, #12
    cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cda8 <sys_clock_cycle_get_32>:
{
    cda8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    cdaa:	f7f9 fc7b 	bl	66a4 <z_nrf_rtc_timer_read>
}
    cdae:	bd08      	pop	{r3, pc}

0000cdb0 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    cdb0:	b410      	push	{r4}
	*state = &config->states[0];
    cdb2:	6843      	ldr	r3, [r0, #4]
    cdb4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cdb6:	e001      	b.n	cdbc <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    cdb8:	3408      	adds	r4, #8
    cdba:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cdbc:	6814      	ldr	r4, [r2, #0]
    cdbe:	7a03      	ldrb	r3, [r0, #8]
    cdc0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    cdc4:	3b01      	subs	r3, #1
    cdc6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    cdca:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    cdce:	429c      	cmp	r4, r3
    cdd0:	d804      	bhi.n	cddc <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    cdd2:	7963      	ldrb	r3, [r4, #5]
    cdd4:	428b      	cmp	r3, r1
    cdd6:	d1ef      	bne.n	cdb8 <pinctrl_lookup_state+0x8>
			return 0;
    cdd8:	2000      	movs	r0, #0
    cdda:	e001      	b.n	cde0 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    cddc:	f06f 0001 	mvn.w	r0, #1
}
    cde0:	bc10      	pop	{r4}
    cde2:	4770      	bx	lr

0000cde4 <z_log_msg2_runtime_create>:
{
    cde4:	b510      	push	{r4, lr}
    cde6:	b086      	sub	sp, #24
	va_start(ap, fmt);
    cde8:	ac0b      	add	r4, sp, #44	; 0x2c
    cdea:	9405      	str	r4, [sp, #20]
    cdec:	9403      	str	r4, [sp, #12]
    cdee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cdf0:	9402      	str	r4, [sp, #8]
    cdf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cdf4:	9401      	str	r4, [sp, #4]
    cdf6:	9c08      	ldr	r4, [sp, #32]
    cdf8:	9400      	str	r4, [sp, #0]
    cdfa:	f7f6 ff21 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    cdfe:	b006      	add	sp, #24
    ce00:	bd10      	pop	{r4, pc}

0000ce02 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    ce02:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    ce04:	f7fe fe68 	bl	bad8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    ce08:	bd08      	pop	{r3, pc}

0000ce0a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    ce0a:	b510      	push	{r4, lr}
    ce0c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    ce0e:	f7f7 fa4b 	bl	42a8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ce12:	f7f7 fb07 	bl	4424 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    ce16:	4620      	mov	r0, r4
    ce18:	f7ff fff3 	bl	ce02 <hw_cc3xx_init_internal>
	return res;
}
    ce1c:	bd10      	pop	{r4, pc}

0000ce1e <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ce1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce22:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ce26:	2b08      	cmp	r3, #8
    ce28:	d001      	beq.n	ce2e <nrf52_errata_36+0x10>
        return false;
    ce2a:	2000      	movs	r0, #0
    ce2c:	4770      	bx	lr
                        return true;
    ce2e:	2001      	movs	r0, #1
}
    ce30:	4770      	bx	lr

0000ce32 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ce32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce36:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ce3a:	2b08      	cmp	r3, #8
    ce3c:	d001      	beq.n	ce42 <nrf52_errata_66+0x10>
        return false;
    ce3e:	2000      	movs	r0, #0
    ce40:	4770      	bx	lr
                        return true;
    ce42:	2001      	movs	r0, #1
}
    ce44:	4770      	bx	lr

0000ce46 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ce46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce4a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ce4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ce52:	2a08      	cmp	r2, #8
    ce54:	d001      	beq.n	ce5a <nrf52_errata_98+0x14>
        return false;
    ce56:	2000      	movs	r0, #0
    ce58:	4770      	bx	lr
                switch(var2)
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d804      	bhi.n	ce68 <nrf52_errata_98+0x22>
    ce5e:	e8df f003 	tbb	[pc, r3]
    ce62:	01          	.byte	0x01
    ce63:	00          	.byte	0x00
    ce64:	2001      	movs	r0, #1
    ce66:	4770      	bx	lr
                        return false;
    ce68:	2000      	movs	r0, #0
}
    ce6a:	4770      	bx	lr

0000ce6c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ce6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ce74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ce78:	2a08      	cmp	r2, #8
    ce7a:	d001      	beq.n	ce80 <nrf52_errata_103+0x14>
        return false;
    ce7c:	2000      	movs	r0, #0
    ce7e:	4770      	bx	lr
                switch(var2)
    ce80:	2b00      	cmp	r3, #0
    ce82:	d804      	bhi.n	ce8e <nrf52_errata_103+0x22>
    ce84:	e8df f003 	tbb	[pc, r3]
    ce88:	01          	.byte	0x01
    ce89:	00          	.byte	0x00
    ce8a:	2001      	movs	r0, #1
    ce8c:	4770      	bx	lr
                        return false;
    ce8e:	2000      	movs	r0, #0
}
    ce90:	4770      	bx	lr

0000ce92 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ce92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce96:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ce9a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ce9e:	2a08      	cmp	r2, #8
    cea0:	d001      	beq.n	cea6 <nrf52_errata_115+0x14>
        return false;
    cea2:	2000      	movs	r0, #0
    cea4:	4770      	bx	lr
                switch(var2)
    cea6:	2b00      	cmp	r3, #0
    cea8:	d804      	bhi.n	ceb4 <nrf52_errata_115+0x22>
    ceaa:	e8df f003 	tbb	[pc, r3]
    ceae:	01          	.byte	0x01
    ceaf:	00          	.byte	0x00
    ceb0:	2001      	movs	r0, #1
    ceb2:	4770      	bx	lr
                        return false;
    ceb4:	2000      	movs	r0, #0
}
    ceb6:	4770      	bx	lr

0000ceb8 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ceb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cebc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cec0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cec4:	2a08      	cmp	r2, #8
    cec6:	d001      	beq.n	cecc <nrf52_errata_120+0x14>
        return false;
    cec8:	2000      	movs	r0, #0
    ceca:	4770      	bx	lr
                switch(var2)
    cecc:	2b00      	cmp	r3, #0
    cece:	d804      	bhi.n	ceda <nrf52_errata_120+0x22>
    ced0:	e8df f003 	tbb	[pc, r3]
    ced4:	01          	.byte	0x01
    ced5:	00          	.byte	0x00
    ced6:	2001      	movs	r0, #1
    ced8:	4770      	bx	lr
                        return false;
    ceda:	2000      	movs	r0, #0
}
    cedc:	4770      	bx	lr

0000cede <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cee2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    cee6:	2b08      	cmp	r3, #8
    cee8:	d001      	beq.n	ceee <nrf52_errata_136+0x10>
        return false;
    ceea:	2000      	movs	r0, #0
    ceec:	4770      	bx	lr
                        return true;
    ceee:	2001      	movs	r0, #1
}
    cef0:	4770      	bx	lr

0000cef2 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cef6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cefa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    cefe:	2a08      	cmp	r2, #8
    cf00:	d001      	beq.n	cf06 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    cf02:	2000      	movs	r0, #0
    cf04:	4770      	bx	lr
                switch(var2)
    cf06:	2b04      	cmp	r3, #4
    cf08:	d801      	bhi.n	cf0e <nrf52_configuration_249+0x1c>
    cf0a:	2000      	movs	r0, #0
    cf0c:	4770      	bx	lr
                        return true;
    cf0e:	2001      	movs	r0, #1
    #endif
}
    cf10:	4770      	bx	lr

0000cf12 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    cf12:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    cf14:	4780      	blx	r0
}
    cf16:	bd08      	pop	{r3, pc}

0000cf18 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    cf18:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    cf1a:	f000 f92f 	bl	d17c <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    cf1e:	bd08      	pop	{r3, pc}

0000cf20 <clock_initial_lfclksrc_get>:
}
    cf20:	2000      	movs	r0, #0
    cf22:	4770      	bx	lr

0000cf24 <clock_lfclksrc_tweak>:
{
    cf24:	b538      	push	{r3, r4, r5, lr}
    cf26:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    cf28:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cf2a:	2b01      	cmp	r3, #1
    cf2c:	d002      	beq.n	cf34 <clock_lfclksrc_tweak+0x10>
    cf2e:	b933      	cbnz	r3, cf3e <clock_lfclksrc_tweak+0x1a>
    cf30:	2301      	movs	r3, #1
    cf32:	e000      	b.n	cf36 <clock_lfclksrc_tweak+0x12>
    cf34:	2301      	movs	r3, #1
    if (!is_correct_clk)
    cf36:	461d      	mov	r5, r3
    cf38:	b11b      	cbz	r3, cf42 <clock_lfclksrc_tweak+0x1e>
}
    cf3a:	4628      	mov	r0, r5
    cf3c:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cf3e:	2300      	movs	r3, #0
    cf40:	e7f9      	b.n	cf36 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cf42:	2000      	movs	r0, #0
    cf44:	f7fa fb38 	bl	75b8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    cf48:	f7ff ffea 	bl	cf20 <clock_initial_lfclksrc_get>
    cf4c:	6020      	str	r0, [r4, #0]
    cf4e:	e7f4      	b.n	cf3a <clock_lfclksrc_tweak+0x16>

0000cf50 <pin_is_task_output>:
{
    cf50:	b510      	push	{r4, lr}
    cf52:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    cf54:	f7fa fd02 	bl	795c <pin_is_output>
    cf58:	b128      	cbz	r0, cf66 <pin_is_task_output+0x16>
    cf5a:	4620      	mov	r0, r4
    cf5c:	f7fa fce8 	bl	7930 <pin_in_use_by_te>
    cf60:	b118      	cbz	r0, cf6a <pin_is_task_output+0x1a>
    cf62:	2001      	movs	r0, #1
    cf64:	e000      	b.n	cf68 <pin_is_task_output+0x18>
    cf66:	2000      	movs	r0, #0
}
    cf68:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    cf6a:	2000      	movs	r0, #0
    cf6c:	e7fc      	b.n	cf68 <pin_is_task_output+0x18>

0000cf6e <pin_is_input>:
{
    cf6e:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    cf70:	f7fa fcf4 	bl	795c <pin_is_output>
    cf74:	f080 0001 	eor.w	r0, r0, #1
}
    cf78:	b2c0      	uxtb	r0, r0
    cf7a:	bd08      	pop	{r3, pc}

0000cf7c <gpiote_polarity_to_trigger>:
}
    cf7c:	4770      	bx	lr

0000cf7e <gpiote_trigger_to_polarity>:
}
    cf7e:	4770      	bx	lr

0000cf80 <is_level>:
}
    cf80:	2803      	cmp	r0, #3
    cf82:	bf94      	ite	ls
    cf84:	2000      	movls	r0, #0
    cf86:	2001      	movhi	r0, #1
    cf88:	4770      	bx	lr

0000cf8a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    cf8a:	b508      	push	{r3, lr}
  _DoInit();
    cf8c:	f7fb fcb0 	bl	88f0 <_DoInit>
}
    cf90:	bd08      	pop	{r3, pc}

0000cf92 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    cf92:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    cf94:	f7ff fff9 	bl	cf8a <SEGGER_RTT_Init>

	return 0;
}
    cf98:	2000      	movs	r0, #0
    cf9a:	bd08      	pop	{r3, pc}

0000cf9c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    cf9c:	b148      	cbz	r0, cfb2 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    cf9e:	68c3      	ldr	r3, [r0, #12]
    cfa0:	8818      	ldrh	r0, [r3, #0]
    cfa2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    cfa6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    cfaa:	bf14      	ite	ne
    cfac:	2000      	movne	r0, #0
    cfae:	2001      	moveq	r0, #1
    cfb0:	4770      	bx	lr
		return false;
    cfb2:	2000      	movs	r0, #0
}
    cfb4:	4770      	bx	lr

0000cfb6 <z_log_msg2_runtime_create>:
{
    cfb6:	b510      	push	{r4, lr}
    cfb8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    cfba:	ac0b      	add	r4, sp, #44	; 0x2c
    cfbc:	9405      	str	r4, [sp, #20]
    cfbe:	9403      	str	r4, [sp, #12]
    cfc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cfc2:	9402      	str	r4, [sp, #8]
    cfc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cfc6:	9401      	str	r4, [sp, #4]
    cfc8:	9c08      	ldr	r4, [sp, #32]
    cfca:	9400      	str	r4, [sp, #0]
    cfcc:	f7f6 fe38 	bl	3c40 <z_impl_z_log_msg2_runtime_vcreate>
}
    cfd0:	b006      	add	sp, #24
    cfd2:	bd10      	pop	{r4, pc}

0000cfd4 <z_early_memset>:
{
    cfd4:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    cfd6:	f7ff fb18 	bl	c60a <memset>
}
    cfda:	bd08      	pop	{r3, pc}

0000cfdc <z_early_memcpy>:
{
    cfdc:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    cfde:	f7ff fae5 	bl	c5ac <memcpy>
}
    cfe2:	bd08      	pop	{r3, pc}

0000cfe4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    cfe4:	6902      	ldr	r2, [r0, #16]
    cfe6:	6943      	ldr	r3, [r0, #20]
    cfe8:	431a      	orrs	r2, r3
    cfea:	f012 0203 	ands.w	r2, r2, #3
    cfee:	d10d      	bne.n	d00c <create_free_list+0x28>
	slab->free_list = NULL;
    cff0:	2100      	movs	r1, #0
    cff2:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    cff4:	e005      	b.n	d002 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    cff6:	6981      	ldr	r1, [r0, #24]
    cff8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    cffa:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    cffc:	6901      	ldr	r1, [r0, #16]
    cffe:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    d000:	3201      	adds	r2, #1
    d002:	68c1      	ldr	r1, [r0, #12]
    d004:	4291      	cmp	r1, r2
    d006:	d8f6      	bhi.n	cff6 <create_free_list+0x12>
	return 0;
    d008:	2000      	movs	r0, #0
    d00a:	4770      	bx	lr
		return -EINVAL;
    d00c:	f06f 0015 	mvn.w	r0, #21
}
    d010:	4770      	bx	lr

0000d012 <k_mem_slab_init>:
{
    d012:	b510      	push	{r4, lr}
    d014:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    d016:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    d018:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    d01a:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    d01c:	2300      	movs	r3, #0
    d01e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    d020:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    d022:	f7ff ffdf 	bl	cfe4 <create_free_list>
	if (rc < 0) {
    d026:	2800      	cmp	r0, #0
    d028:	db01      	blt.n	d02e <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    d02a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    d02c:	6064      	str	r4, [r4, #4]
}
    d02e:	bd10      	pop	{r4, pc}

0000d030 <setup_thread_stack>:
{
    d030:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d032:	3207      	adds	r2, #7
    d034:	f022 0207 	bic.w	r2, r2, #7
    d038:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    d03c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    d040:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    d044:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    d048:	2200      	movs	r2, #0
    d04a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    d04e:	18c8      	adds	r0, r1, r3
    d050:	bc10      	pop	{r4}
    d052:	4770      	bx	lr

0000d054 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d054:	f3ef 8005 	mrs	r0, IPSR
}
    d058:	3800      	subs	r0, #0
    d05a:	bf18      	it	ne
    d05c:	2001      	movne	r0, #1
    d05e:	4770      	bx	lr

0000d060 <k_thread_name_get>:
}
    d060:	3074      	adds	r0, #116	; 0x74
    d062:	4770      	bx	lr

0000d064 <z_impl_k_thread_start>:
{
    d064:	b508      	push	{r3, lr}
	z_sched_start(thread);
    d066:	f7fd f913 	bl	a290 <z_sched_start>
}
    d06a:	bd08      	pop	{r3, pc}

0000d06c <z_init_thread_base>:
{
    d06c:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    d06e:	2400      	movs	r4, #0
    d070:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    d072:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    d074:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    d076:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    d078:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    d07a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    d07c:	61c4      	str	r4, [r0, #28]
}
    d07e:	bc10      	pop	{r4}
    d080:	4770      	bx	lr

0000d082 <z_pm_save_idle_exit>:
{
    d082:	b508      	push	{r3, lr}
	pm_system_resume();
    d084:	f7f6 ff1a 	bl	3ebc <pm_system_resume>
	sys_clock_idle_exit();
    d088:	f7ff fe18 	bl	ccbc <sys_clock_idle_exit>
}
    d08c:	bd08      	pop	{r3, pc}

0000d08e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    d08e:	4288      	cmp	r0, r1
    d090:	da00      	bge.n	d094 <new_prio_for_inheritance+0x6>
    d092:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    d094:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    d098:	db01      	blt.n	d09e <new_prio_for_inheritance+0x10>
    d09a:	4608      	mov	r0, r1
    d09c:	4770      	bx	lr
    d09e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    d0a2:	4770      	bx	lr

0000d0a4 <adjust_owner_prio>:
{
    d0a4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    d0a6:	6880      	ldr	r0, [r0, #8]
    d0a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    d0ac:	428b      	cmp	r3, r1
    d0ae:	d101      	bne.n	d0b4 <adjust_owner_prio+0x10>
	return false;
    d0b0:	2000      	movs	r0, #0
}
    d0b2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    d0b4:	f7fd fafa 	bl	a6ac <z_set_prio>
    d0b8:	e7fb      	b.n	d0b2 <adjust_owner_prio+0xe>

0000d0ba <z_impl_k_mutex_init>:
{
    d0ba:	4603      	mov	r3, r0
	mutex->owner = NULL;
    d0bc:	2000      	movs	r0, #0
    d0be:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    d0c0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    d0c2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    d0c4:	605b      	str	r3, [r3, #4]
}
    d0c6:	4770      	bx	lr

0000d0c8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    d0c8:	b13a      	cbz	r2, d0da <z_impl_k_sem_init+0x12>
    d0ca:	428a      	cmp	r2, r1
    d0cc:	d308      	bcc.n	d0e0 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    d0ce:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    d0d0:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    d0d2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    d0d4:	6040      	str	r0, [r0, #4]
	return 0;
    d0d6:	2000      	movs	r0, #0
    d0d8:	4770      	bx	lr
		return -EINVAL;
    d0da:	f06f 0015 	mvn.w	r0, #21
    d0de:	4770      	bx	lr
    d0e0:	f06f 0015 	mvn.w	r0, #21
}
    d0e4:	4770      	bx	lr

0000d0e6 <thread_active_elsewhere>:
}
    d0e6:	2000      	movs	r0, #0
    d0e8:	4770      	bx	lr

0000d0ea <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    d0ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    d0ee:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    d0f2:	4283      	cmp	r3, r0
    d0f4:	d001      	beq.n	d0fa <z_sched_prio_cmp+0x10>
		return b2 - b1;
    d0f6:	1ac0      	subs	r0, r0, r3
    d0f8:	4770      	bx	lr
	return 0;
    d0fa:	2000      	movs	r0, #0
}
    d0fc:	4770      	bx	lr

0000d0fe <z_reschedule_irqlock>:
{
    d0fe:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d100:	4603      	mov	r3, r0
    d102:	b920      	cbnz	r0, d10e <z_reschedule_irqlock+0x10>
    d104:	f3ef 8205 	mrs	r2, IPSR
    d108:	b942      	cbnz	r2, d11c <z_reschedule_irqlock+0x1e>
    d10a:	2201      	movs	r2, #1
    d10c:	e000      	b.n	d110 <z_reschedule_irqlock+0x12>
    d10e:	2200      	movs	r2, #0
	if (resched(key)) {
    d110:	b932      	cbnz	r2, d120 <z_reschedule_irqlock+0x22>
    d112:	f383 8811 	msr	BASEPRI, r3
    d116:	f3bf 8f6f 	isb	sy
}
    d11a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d11c:	2200      	movs	r2, #0
    d11e:	e7f7      	b.n	d110 <z_reschedule_irqlock+0x12>
    d120:	4618      	mov	r0, r3
    d122:	f7f7 fa6d 	bl	4600 <arch_swap>
	return ret;
    d126:	e7f8      	b.n	d11a <z_reschedule_irqlock+0x1c>

0000d128 <z_priq_dumb_best>:
{
    d128:	4603      	mov	r3, r0
	return list->head == list;
    d12a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d12c:	4283      	cmp	r3, r0
    d12e:	d000      	beq.n	d132 <z_priq_dumb_best+0xa>
}
    d130:	4770      	bx	lr
	struct k_thread *thread = NULL;
    d132:	2000      	movs	r0, #0
	return thread;
    d134:	e7fc      	b.n	d130 <z_priq_dumb_best+0x8>

0000d136 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    d136:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    d138:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    d13a:	6083      	str	r3, [r0, #8]
}
    d13c:	4770      	bx	lr

0000d13e <remove_timeout>:
{
    d13e:	b510      	push	{r4, lr}
    d140:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    d142:	f7fe f813 	bl	b16c <next>
    d146:	b148      	cbz	r0, d15c <remove_timeout+0x1e>
    d148:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    d14a:	6920      	ldr	r0, [r4, #16]
    d14c:	6961      	ldr	r1, [r4, #20]
    d14e:	6913      	ldr	r3, [r2, #16]
    d150:	181b      	adds	r3, r3, r0
    d152:	6950      	ldr	r0, [r2, #20]
    d154:	eb41 0100 	adc.w	r1, r1, r0
    d158:	6113      	str	r3, [r2, #16]
    d15a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    d15c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    d15e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    d160:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d162:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d164:	2300      	movs	r3, #0
    d166:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    d168:	6063      	str	r3, [r4, #4]
}
    d16a:	bd10      	pop	{r4, pc}

0000d16c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d16c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d16e:	f7fe faf9 	bl	b764 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d172:	bd08      	pop	{r3, pc}

0000d174 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    d174:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    d176:	f7fe faf5 	bl	b764 <sys_clock_tick_get>
}
    d17a:	bd08      	pop	{r3, pc}

0000d17c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d17c:	b900      	cbnz	r0, d180 <z_impl_k_busy_wait+0x4>
    d17e:	4770      	bx	lr
{
    d180:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d182:	f7f8 f901 	bl	5388 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d186:	bd08      	pop	{r3, pc}

0000d188 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d188:	b510      	push	{r4, lr}
    d18a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    d18c:	f7fe f910 	bl	b3b0 <z_abort_timeout>

	if (inactive) {
    d190:	b9a0      	cbnz	r0, d1bc <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    d192:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d194:	b10b      	cbz	r3, d19a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d196:	4620      	mov	r0, r4
    d198:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d19a:	f104 0018 	add.w	r0, r4, #24
    d19e:	f7fd fc91 	bl	aac4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d1a2:	b158      	cbz	r0, d1bc <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    d1a4:	f7fd f81e 	bl	a1e4 <z_ready_thread>
	__asm__ volatile(
    d1a8:	f04f 0320 	mov.w	r3, #32
    d1ac:	f3ef 8011 	mrs	r0, BASEPRI
    d1b0:	f383 8812 	msr	BASEPRI_MAX, r3
    d1b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d1b8:	f7ff ffa1 	bl	d0fe <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    d1bc:	bd10      	pop	{r4, pc}

0000d1be <k_heap_init>:
{
    d1be:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    d1c0:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    d1c4:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    d1c6:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    d1c8:	f7f5 fc78 	bl	2abc <sys_heap_init>
}
    d1cc:	bd10      	pop	{r4, pc}
	...

0000d1d0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d1d0:	f7fa b8d2 	b.w	7378 <SystemInit>
