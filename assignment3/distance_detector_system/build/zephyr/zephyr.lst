
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 28 00 20 99 4e 00 00 1f c3 00 00 51 4e 00 00     .(. .N......QN..
  10:	51 4e 00 00 51 4e 00 00 51 4e 00 00 00 00 00 00     QN..QN..QN......
	...
  2c:	2d 46 00 00 51 4e 00 00 00 00 00 00 d5 45 00 00     -F..QN.......E..
  3c:	51 4e 00 00                                         QN..

00000040 <_irq_vector_table>:
  40:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  50:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  60:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  70:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  80:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  90:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  a0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  b0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  c0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  d0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  e0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..
  f0:	0d 47 00 00 0d 47 00 00 0d 47 00 00 0d 47 00 00     .G...G...G...G..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x18>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x70>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0x6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x3e>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x7e>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x5e>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x7e>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x6c>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x7e>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <button_pressed>:
    return ret;
}

/* Define a callback function. It is like an ISR that is called when the button is pressed */
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     7a0:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     7a2:	4802      	ldr	r0, [pc, #8]	; (7ac <button_pressed+0xc>)
     7a4:	f009 f860 	bl	9868 <z_impl_k_sem_give>
    k_sem_give(&sem_button);
}
     7a8:	bd08      	pop	{r3, pc}
     7aa:	bf00      	nop
     7ac:	200006dc 	.word	0x200006dc

000007b0 <adc_sample>:
{
     7b0:	b510      	push	{r4, lr}
     7b2:	b086      	sub	sp, #24
    const struct adc_sequence sequence = {
     7b4:	2300      	movs	r3, #0
     7b6:	9301      	str	r3, [sp, #4]
     7b8:	9302      	str	r3, [sp, #8]
     7ba:	9303      	str	r3, [sp, #12]
     7bc:	9304      	str	r3, [sp, #16]
     7be:	9305      	str	r3, [sp, #20]
     7c0:	2302      	movs	r3, #2
     7c2:	9302      	str	r3, [sp, #8]
     7c4:	4a0e      	ldr	r2, [pc, #56]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7c6:	9203      	str	r2, [sp, #12]
     7c8:	9304      	str	r3, [sp, #16]
     7ca:	230a      	movs	r3, #10
     7cc:	f88d 3014 	strb.w	r3, [sp, #20]
    if (adc_dev == NULL)
     7d0:	4b0c      	ldr	r3, [pc, #48]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7d2:	6818      	ldr	r0, [r3, #0]
     7d4:	b140      	cbz	r0, 7e8 <adc_sample+0x38>
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
     7d6:	6883      	ldr	r3, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     7d8:	685b      	ldr	r3, [r3, #4]
     7da:	a901      	add	r1, sp, #4
     7dc:	4798      	blx	r3
    if (ret)
     7de:	4604      	mov	r4, r0
     7e0:	b940      	cbnz	r0, 7f4 <adc_sample+0x44>
}
     7e2:	4620      	mov	r0, r4
     7e4:	b006      	add	sp, #24
     7e6:	bd10      	pop	{r4, pc}
        printk("adc_sample(): error, must bind to adc first \n\r");
     7e8:	4807      	ldr	r0, [pc, #28]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7ea:	f00b fb38 	bl	be5e <printk>
        return -1;
     7ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7f2:	e7f6      	b.n	7e2 <adc_sample+0x32>
        printk("adc_read() failed with code %d\n", ret);
     7f4:	4601      	mov	r1, r0
     7f6:	4805      	ldr	r0, [pc, #20]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7f8:	f00b fb31 	bl	be5e <printk>
     7fc:	e7f1      	b.n	7e2 <adc_sample+0x32>
     7fe:	bf00      	nop
     800:	200006ac 	.word	0x200006ac
     804:	200006a8 	.word	0x200006a8
     808:	0000d438 	.word	0x0000d438
     80c:	0000d468 	.word	0x0000d468

00000810 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
     810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     814:	4605      	mov	r5, r0
     816:	460e      	mov	r6, r1
     818:	4614      	mov	r4, r2
	const struct gpio_driver_api *api =
     81a:	f8d0 a008 	ldr.w	sl, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
     81e:	f8d0 b004 	ldr.w	fp, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     822:	f8d0 8010 	ldr.w	r8, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
     826:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
     82a:	d136      	bne.n	89a <z_impl_gpio_pin_configure+0x8a>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     82c:	f004 0330 	and.w	r3, r4, #48	; 0x30
     830:	2b30      	cmp	r3, #48	; 0x30
     832:	d043      	beq.n	8bc <z_impl_gpio_pin_configure+0xac>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     834:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     838:	2b02      	cmp	r3, #2
     83a:	d050      	beq.n	8de <z_impl_gpio_pin_configure+0xce>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     83c:	f004 0306 	and.w	r3, r4, #6
     840:	2b04      	cmp	r3, #4
     842:	d05d      	beq.n	900 <z_impl_gpio_pin_configure+0xf0>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     844:	f414 2740 	ands.w	r7, r4, #786432	; 0xc0000
     848:	d002      	beq.n	850 <z_impl_gpio_pin_configure+0x40>
     84a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
     84e:	d065      	beq.n	91c <z_impl_gpio_pin_configure+0x10c>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     850:	f5b7 2f40 	cmp.w	r7, #786432	; 0xc0000
     854:	d074      	beq.n	940 <z_impl_gpio_pin_configure+0x130>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     856:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
     85a:	d005      	beq.n	868 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     85c:	b127      	cbz	r7, 868 <z_impl_gpio_pin_configure+0x58>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     85e:	f014 0f01 	tst.w	r4, #1
     862:	d001      	beq.n	868 <z_impl_gpio_pin_configure+0x58>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     864:	f484 2440 	eor.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     868:	f424 1980 	bic.w	r9, r4, #1048576	; 0x100000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     86c:	f8db 3000 	ldr.w	r3, [fp]
     870:	2701      	movs	r7, #1
     872:	40b7      	lsls	r7, r6
     874:	423b      	tst	r3, r7
     876:	d075      	beq.n	964 <z_impl_gpio_pin_configure+0x154>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     878:	f014 0f01 	tst.w	r4, #1
     87c:	f000 8084 	beq.w	988 <z_impl_gpio_pin_configure+0x178>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     880:	f8d8 3000 	ldr.w	r3, [r8]
     884:	433b      	orrs	r3, r7
     886:	f8c8 3000 	str.w	r3, [r8]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     88a:	f8da 3000 	ldr.w	r3, [sl]
     88e:	464a      	mov	r2, r9
     890:	4631      	mov	r1, r6
     892:	4628      	mov	r0, r5
     894:	4798      	blx	r3
}
     896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
     89a:	4f3f      	ldr	r7, [pc, #252]	; (998 <z_impl_gpio_pin_configure+0x188>)
     89c:	f240 23b5 	movw	r3, #693	; 0x2b5
     8a0:	463a      	mov	r2, r7
     8a2:	493e      	ldr	r1, [pc, #248]	; (99c <z_impl_gpio_pin_configure+0x18c>)
     8a4:	483e      	ldr	r0, [pc, #248]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8a6:	f00b fc5f 	bl	c168 <assert_print>
     8aa:	483e      	ldr	r0, [pc, #248]	; (9a4 <z_impl_gpio_pin_configure+0x194>)
     8ac:	f00b fc5c 	bl	c168 <assert_print>
     8b0:	f240 21b5 	movw	r1, #693	; 0x2b5
     8b4:	4638      	mov	r0, r7
     8b6:	f00b fc50 	bl	c15a <assert_post_action>
     8ba:	e7b7      	b.n	82c <z_impl_gpio_pin_configure+0x1c>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     8bc:	4f36      	ldr	r7, [pc, #216]	; (998 <z_impl_gpio_pin_configure+0x188>)
     8be:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     8c2:	463a      	mov	r2, r7
     8c4:	4938      	ldr	r1, [pc, #224]	; (9a8 <z_impl_gpio_pin_configure+0x198>)
     8c6:	4836      	ldr	r0, [pc, #216]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8c8:	f00b fc4e 	bl	c168 <assert_print>
     8cc:	4837      	ldr	r0, [pc, #220]	; (9ac <z_impl_gpio_pin_configure+0x19c>)
     8ce:	f00b fc4b 	bl	c168 <assert_print>
     8d2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     8d6:	4638      	mov	r0, r7
     8d8:	f00b fc3f 	bl	c15a <assert_post_action>
     8dc:	e7aa      	b.n	834 <z_impl_gpio_pin_configure+0x24>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     8de:	4f2e      	ldr	r7, [pc, #184]	; (998 <z_impl_gpio_pin_configure+0x188>)
     8e0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     8e4:	463a      	mov	r2, r7
     8e6:	4932      	ldr	r1, [pc, #200]	; (9b0 <z_impl_gpio_pin_configure+0x1a0>)
     8e8:	482d      	ldr	r0, [pc, #180]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     8ea:	f00b fc3d 	bl	c168 <assert_print>
     8ee:	4831      	ldr	r0, [pc, #196]	; (9b4 <z_impl_gpio_pin_configure+0x1a4>)
     8f0:	f00b fc3a 	bl	c168 <assert_print>
     8f4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     8f8:	4638      	mov	r0, r7
     8fa:	f00b fc2e 	bl	c15a <assert_post_action>
     8fe:	e79d      	b.n	83c <z_impl_gpio_pin_configure+0x2c>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     900:	4f25      	ldr	r7, [pc, #148]	; (998 <z_impl_gpio_pin_configure+0x188>)
     902:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     906:	463a      	mov	r2, r7
     908:	492b      	ldr	r1, [pc, #172]	; (9b8 <z_impl_gpio_pin_configure+0x1a8>)
     90a:	4825      	ldr	r0, [pc, #148]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     90c:	f00b fc2c 	bl	c168 <assert_print>
     910:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     914:	4638      	mov	r0, r7
     916:	f00b fc20 	bl	c15a <assert_post_action>
     91a:	e793      	b.n	844 <z_impl_gpio_pin_configure+0x34>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     91c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 998 <z_impl_gpio_pin_configure+0x188>
     920:	f240 23c3 	movw	r3, #707	; 0x2c3
     924:	464a      	mov	r2, r9
     926:	4925      	ldr	r1, [pc, #148]	; (9bc <z_impl_gpio_pin_configure+0x1ac>)
     928:	481d      	ldr	r0, [pc, #116]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     92a:	f00b fc1d 	bl	c168 <assert_print>
     92e:	4824      	ldr	r0, [pc, #144]	; (9c0 <z_impl_gpio_pin_configure+0x1b0>)
     930:	f00b fc1a 	bl	c168 <assert_print>
     934:	f240 21c3 	movw	r1, #707	; 0x2c3
     938:	4648      	mov	r0, r9
     93a:	f00b fc0e 	bl	c15a <assert_post_action>
     93e:	e787      	b.n	850 <z_impl_gpio_pin_configure+0x40>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
     940:	f8df 9054 	ldr.w	r9, [pc, #84]	; 998 <z_impl_gpio_pin_configure+0x188>
     944:	f240 23c7 	movw	r3, #711	; 0x2c7
     948:	464a      	mov	r2, r9
     94a:	491e      	ldr	r1, [pc, #120]	; (9c4 <z_impl_gpio_pin_configure+0x1b4>)
     94c:	4814      	ldr	r0, [pc, #80]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     94e:	f00b fc0b 	bl	c168 <assert_print>
     952:	481d      	ldr	r0, [pc, #116]	; (9c8 <z_impl_gpio_pin_configure+0x1b8>)
     954:	f00b fc08 	bl	c168 <assert_print>
     958:	f240 21c7 	movw	r1, #711	; 0x2c7
     95c:	4648      	mov	r0, r9
     95e:	f00b fbfc 	bl	c15a <assert_post_action>
     962:	e778      	b.n	856 <z_impl_gpio_pin_configure+0x46>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     964:	f8df b030 	ldr.w	fp, [pc, #48]	; 998 <z_impl_gpio_pin_configure+0x188>
     968:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     96c:	465a      	mov	r2, fp
     96e:	4917      	ldr	r1, [pc, #92]	; (9cc <z_impl_gpio_pin_configure+0x1bc>)
     970:	480b      	ldr	r0, [pc, #44]	; (9a0 <z_impl_gpio_pin_configure+0x190>)
     972:	f00b fbf9 	bl	c168 <assert_print>
     976:	4816      	ldr	r0, [pc, #88]	; (9d0 <z_impl_gpio_pin_configure+0x1c0>)
     978:	f00b fbf6 	bl	c168 <assert_print>
     97c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     980:	4658      	mov	r0, fp
     982:	f00b fbea 	bl	c15a <assert_post_action>
     986:	e777      	b.n	878 <z_impl_gpio_pin_configure+0x68>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     988:	f8d8 3000 	ldr.w	r3, [r8]
     98c:	ea23 0307 	bic.w	r3, r3, r7
     990:	f8c8 3000 	str.w	r3, [r8]
     994:	e779      	b.n	88a <z_impl_gpio_pin_configure+0x7a>
     996:	bf00      	nop
     998:	0000d488 	.word	0x0000d488
     99c:	0000d4bc 	.word	0x0000d4bc
     9a0:	0000d51c 	.word	0x0000d51c
     9a4:	0000d53c 	.word	0x0000d53c
     9a8:	0000d560 	.word	0x0000d560
     9ac:	0000d59c 	.word	0x0000d59c
     9b0:	0000d5dc 	.word	0x0000d5dc
     9b4:	0000d614 	.word	0x0000d614
     9b8:	0000d668 	.word	0x0000d668
     9bc:	0000d69c 	.word	0x0000d69c
     9c0:	0000d6e4 	.word	0x0000d6e4
     9c4:	0000d720 	.word	0x0000d720
     9c8:	0000d764 	.word	0x0000d764
     9cc:	0000d790 	.word	0x0000d790
     9d0:	0000d7d0 	.word	0x0000d7d0

000009d4 <thread_sensor_code>:
   return;
}

/* Thread code implementation */
void thread_sensor_code(void *argA, void *argB, void *argC)
{
     9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int64_t fin_time = 0, release_time = 0;

    /* Other variables */
    long int nact = 0;

    printk("Thread A init (periodic)\n");
     9d8:	4856      	ldr	r0, [pc, #344]	; (b34 <thread_sensor_code+0x160>)
     9da:	f00b fa40 	bl	be5e <printk>
	return z_impl_k_uptime_ticks();
     9de:	f00c fb3f 	bl	d060 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     9e2:	014a      	lsls	r2, r1, #5
     9e4:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     9e8:	0143      	lsls	r3, r0, #5
     9ea:	1a1b      	subs	r3, r3, r0
     9ec:	eb62 0201 	sbc.w	r2, r2, r1
     9f0:	0092      	lsls	r2, r2, #2
     9f2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     9f6:	009b      	lsls	r3, r3, #2
     9f8:	181c      	adds	r4, r3, r0
     9fa:	eb42 0301 	adc.w	r3, r2, r1
     9fe:	00db      	lsls	r3, r3, #3
     a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
     a04:	f3c4 3410 	ubfx	r4, r4, #12, #17
     a08:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     a0c:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     a0e:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     a12:	f143 0600 	adc.w	r6, r3, #0
    long int nact = 0;
     a16:	2500      	movs	r5, #0
     a18:	e046      	b.n	aa8 <thread_sensor_code+0xd4>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());

        err = adc_sample();
        if (err)
        {
            printk("adc_sample() failed with error code %d\n\r", err);
     a1a:	4847      	ldr	r0, [pc, #284]	; (b38 <thread_sensor_code+0x164>)
     a1c:	f00b fa1f 	bl	be5e <printk>
     a20:	e020      	b.n	a64 <thread_sensor_code+0x90>
                printk("adc reading out of range\n\r");
            }
            else
            {
                /* ADC is set to use gain of 1/4 and reference VDD/4, so input range is 0...VDD (3 V), with 10 bit resolution */
                printk("adc reading: raw:%4u / %4u mV: \n\r", adc_sample_buffer[0], (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023)));
     a22:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
     a26:	fb08 f007 	mul.w	r0, r8, r7
     a2a:	f7ff fcd7 	bl	3dc <__aeabi_i2f>
     a2e:	4943      	ldr	r1, [pc, #268]	; (b3c <thread_sensor_code+0x168>)
     a30:	f7ff fb66 	bl	100 <__aeabi_fmul>
     a34:	f7ff fd26 	bl	484 <__aeabi_f2uiz>
     a38:	b282      	uxth	r2, r0
     a3a:	4639      	mov	r1, r7
     a3c:	4840      	ldr	r0, [pc, #256]	; (b40 <thread_sensor_code+0x16c>)
     a3e:	f00b fa0e 	bl	be5e <printk>
                ab = (uint16_t)(1000 * adc_sample_buffer[0] * ((float)3 / 1023));
     a42:	4b40      	ldr	r3, [pc, #256]	; (b44 <thread_sensor_code+0x170>)
     a44:	8818      	ldrh	r0, [r3, #0]
     a46:	fb08 f000 	mul.w	r0, r8, r0
     a4a:	f7ff fcc7 	bl	3dc <__aeabi_i2f>
     a4e:	493b      	ldr	r1, [pc, #236]	; (b3c <thread_sensor_code+0x168>)
     a50:	f7ff fb56 	bl	100 <__aeabi_fmul>
     a54:	f7ff fd16 	bl	484 <__aeabi_f2uiz>
     a58:	b281      	uxth	r1, r0
     a5a:	4b3b      	ldr	r3, [pc, #236]	; (b48 <thread_sensor_code+0x174>)
     a5c:	8019      	strh	r1, [r3, #0]
                printk("Thread A set ab value to: %d \n", ab);
     a5e:	483b      	ldr	r0, [pc, #236]	; (b4c <thread_sensor_code+0x178>)
     a60:	f00b f9fd 	bl	be5e <printk>
	z_impl_k_sem_give(sem);
     a64:	483a      	ldr	r0, [pc, #232]	; (b50 <thread_sensor_code+0x17c>)
     a66:	f008 feff 	bl	9868 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     a6a:	f00c faf9 	bl	d060 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     a6e:	4684      	mov	ip, r0
     a70:	014a      	lsls	r2, r1, #5
     a72:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     a76:	0140      	lsls	r0, r0, #5
     a78:	ebb0 030c 	subs.w	r3, r0, ip
     a7c:	eb62 0201 	sbc.w	r2, r2, r1
     a80:	0092      	lsls	r2, r2, #2
     a82:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     a86:	009b      	lsls	r3, r3, #2
     a88:	eb13 030c 	adds.w	r3, r3, ip
     a8c:	eb42 0101 	adc.w	r1, r2, r1
     a90:	00c9      	lsls	r1, r1, #3
     a92:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
     a96:	f3c3 3310 	ubfx	r3, r3, #12, #17
     a9a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     a9e:	0bc9      	lsrs	r1, r1, #15

        k_sem_give(&sem_ab);

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        if (fin_time < release_time)
     aa0:	42a3      	cmp	r3, r4
     aa2:	eb71 0206 	sbcs.w	r2, r1, r6
     aa6:	db2b      	blt.n	b00 <thread_sensor_code+0x12c>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     aa8:	3501      	adds	r5, #1
     aaa:	f00c fad9 	bl	d060 <z_impl_k_uptime_ticks>
     aae:	4602      	mov	r2, r0
     ab0:	014b      	lsls	r3, r1, #5
     ab2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     ab6:	0140      	lsls	r0, r0, #5
     ab8:	1a80      	subs	r0, r0, r2
     aba:	eb63 0301 	sbc.w	r3, r3, r1
     abe:	009b      	lsls	r3, r3, #2
     ac0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
     ac4:	0080      	lsls	r0, r0, #2
     ac6:	1880      	adds	r0, r0, r2
     ac8:	eb43 0301 	adc.w	r3, r3, r1
     acc:	00db      	lsls	r3, r3, #3
     ace:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
     ad2:	f3c0 3010 	ubfx	r0, r0, #12, #17
     ad6:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
     ada:	0bdb      	lsrs	r3, r3, #15
     adc:	4629      	mov	r1, r5
     ade:	481d      	ldr	r0, [pc, #116]	; (b54 <thread_sensor_code+0x180>)
     ae0:	f00b f9bd 	bl	be5e <printk>
        err = adc_sample();
     ae4:	f7ff fe64 	bl	7b0 <adc_sample>
        if (err)
     ae8:	4601      	mov	r1, r0
     aea:	2800      	cmp	r0, #0
     aec:	d195      	bne.n	a1a <thread_sensor_code+0x46>
            if (adc_sample_buffer[0] > 1023)
     aee:	4b15      	ldr	r3, [pc, #84]	; (b44 <thread_sensor_code+0x170>)
     af0:	881f      	ldrh	r7, [r3, #0]
     af2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     af6:	d394      	bcc.n	a22 <thread_sensor_code+0x4e>
                printk("adc reading out of range\n\r");
     af8:	4817      	ldr	r0, [pc, #92]	; (b58 <thread_sensor_code+0x184>)
     afa:	f00b f9b0 	bl	be5e <printk>
     afe:	e7b1      	b.n	a64 <thread_sensor_code+0x90>
        {
            k_msleep(release_time - fin_time);
     b00:	1ae0      	subs	r0, r4, r3
	return k_sleep(Z_TIMEOUT_MS(ms));
     b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     b06:	17c1      	asrs	r1, r0, #31
     b08:	03c9      	lsls	r1, r1, #15
     b0a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
     b0e:	03c0      	lsls	r0, r0, #15
     b10:	f240 33e7 	movw	r3, #999	; 0x3e7
     b14:	18c0      	adds	r0, r0, r3
     b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b1a:	f04f 0300 	mov.w	r3, #0
     b1e:	f141 0100 	adc.w	r1, r1, #0
     b22:	f7ff fccf 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     b26:	f00a f97f 	bl	ae28 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     b2a:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     b2e:	f146 0600 	adc.w	r6, r6, #0
     b32:	e7b9      	b.n	aa8 <thread_sensor_code+0xd4>
     b34:	0000d7e4 	.word	0x0000d7e4
     b38:	0000d838 	.word	0x0000d838
     b3c:	3b40300c 	.word	0x3b40300c
     b40:	0000d880 	.word	0x0000d880
     b44:	200006ac 	.word	0x200006ac
     b48:	200001dc 	.word	0x200001dc
     b4c:	0000d8a4 	.word	0x0000d8a4
     b50:	200006bc 	.word	0x200006bc
     b54:	0000d800 	.word	0x0000d800
     b58:	0000d864 	.word	0x0000d864

00000b5c <thread_button_code>:
        }
    }
}

void thread_button_code(void *argA, void *argB, void *argC)
{
     b5c:	b538      	push	{r3, r4, r5, lr}
    /* Other variables */
    int ret;

    printk("Thread button init (sporadic, waits on a semaphore by button pressed callback)\n");
     b5e:	48b1      	ldr	r0, [pc, #708]	; (e24 <thread_button_code+0x2c8>)
     b60:	f00b f97d 	bl	be5e <printk>
	return z_impl_k_sem_take(sem, timeout);
     b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     b6c:	48ae      	ldr	r0, [pc, #696]	; (e28 <thread_button_code+0x2cc>)
     b6e:	f008 febf 	bl	98f0 <z_impl_k_sem_take>
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
     b72:	4bae      	ldr	r3, [pc, #696]	; (e2c <thread_button_code+0x2d0>)
     b74:	685a      	ldr	r2, [r3, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
     b76:	691c      	ldr	r4, [r3, #16]
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b78:	6813      	ldr	r3, [r2, #0]
     b7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     b7e:	f000 8083 	beq.w	c88 <thread_button_code+0x12c>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     b82:	6823      	ldr	r3, [r4, #0]
     b84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     b88:	f040 808f 	bne.w	caa <thread_button_code+0x14e>
     b8c:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
     b8e:	4ba7      	ldr	r3, [pc, #668]	; (e2c <thread_button_code+0x2d0>)
     b90:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     b98:	f000 8089 	beq.w	cae <thread_button_code+0x152>
	if (value != 0)	{
     b9c:	2c00      	cmp	r4, #0
     b9e:	f000 8097 	beq.w	cd0 <thread_button_code+0x174>
	const struct gpio_driver_api *api =
     ba2:	48a2      	ldr	r0, [pc, #648]	; (e2c <thread_button_code+0x2d0>)
     ba4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     ba6:	68db      	ldr	r3, [r3, #12]
     ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     bac:	4798      	blx	r3

    while (1)
    {
        k_sem_take(&sem_button, K_FOREVER);
        ret = gpio_pin_set_dt(&led0, 0);
        if (ret < 0)
     bae:	2800      	cmp	r0, #0
     bb0:	f2c0 8095 	blt.w	cde <thread_button_code+0x182>
	const struct gpio_driver_config *const cfg =
     bb4:	4b9d      	ldr	r3, [pc, #628]	; (e2c <thread_button_code+0x2d0>)
     bb6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     bb8:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bba:	6813      	ldr	r3, [r2, #0]
     bbc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     bc0:	f000 8091 	beq.w	ce6 <thread_button_code+0x18a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     bc4:	6823      	ldr	r3, [r4, #0]
     bc6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     bca:	f040 809d 	bne.w	d08 <thread_button_code+0x1ac>
     bce:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
     bd0:	4b96      	ldr	r3, [pc, #600]	; (e2c <thread_button_code+0x2d0>)
     bd2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     bda:	f000 8097 	beq.w	d0c <thread_button_code+0x1b0>
	if (value != 0)	{
     bde:	2c00      	cmp	r4, #0
     be0:	f000 80a5 	beq.w	d2e <thread_button_code+0x1d2>
	const struct gpio_driver_api *api =
     be4:	4891      	ldr	r0, [pc, #580]	; (e2c <thread_button_code+0x2d0>)
     be6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     be8:	68db      	ldr	r3, [r3, #12]
     bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     bee:	4798      	blx	r3
            printk("SETTING LED VALUE FAILED");
        ret = gpio_pin_set_dt(&led1, 0);
        if (ret < 0)
     bf0:	2800      	cmp	r0, #0
     bf2:	f2c0 80a3 	blt.w	d3c <thread_button_code+0x1e0>
	const struct gpio_driver_config *const cfg =
     bf6:	4b8d      	ldr	r3, [pc, #564]	; (e2c <thread_button_code+0x2d0>)
     bf8:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     bfa:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bfc:	6813      	ldr	r3, [r2, #0]
     bfe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     c02:	f000 809f 	beq.w	d44 <thread_button_code+0x1e8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     c06:	6823      	ldr	r3, [r4, #0]
     c08:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     c0c:	f040 80ab 	bne.w	d66 <thread_button_code+0x20a>
     c10:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
     c12:	4b86      	ldr	r3, [pc, #536]	; (e2c <thread_button_code+0x2d0>)
     c14:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     c1c:	f000 80a5 	beq.w	d6a <thread_button_code+0x20e>
	if (value != 0)	{
     c20:	2c00      	cmp	r4, #0
     c22:	f000 80b3 	beq.w	d8c <thread_button_code+0x230>
	const struct gpio_driver_api *api =
     c26:	4881      	ldr	r0, [pc, #516]	; (e2c <thread_button_code+0x2d0>)
     c28:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     c2a:	68db      	ldr	r3, [r3, #12]
     c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     c30:	4798      	blx	r3
            printk("SETTING LED VALUE FAILED");
        ret = gpio_pin_set_dt(&led2, 0);
        if (ret < 0)
     c32:	2800      	cmp	r0, #0
     c34:	f2c0 80b1 	blt.w	d9a <thread_button_code+0x23e>
	const struct gpio_driver_config *const cfg =
     c38:	4b7c      	ldr	r3, [pc, #496]	; (e2c <thread_button_code+0x2d0>)
     c3a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
     c3c:	691c      	ldr	r4, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c3e:	6813      	ldr	r3, [r2, #0]
     c40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     c44:	f000 80ad 	beq.w	da2 <thread_button_code+0x246>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     c48:	6823      	ldr	r3, [r4, #0]
     c4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     c4e:	f040 80b9 	bne.w	dc4 <thread_button_code+0x268>
     c52:	2400      	movs	r4, #0
	const struct gpio_driver_config *const cfg =
     c54:	4b75      	ldr	r3, [pc, #468]	; (e2c <thread_button_code+0x2d0>)
     c56:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     c5e:	f000 80b3 	beq.w	dc8 <thread_button_code+0x26c>
	if (value != 0)	{
     c62:	2c00      	cmp	r4, #0
     c64:	f000 80c1 	beq.w	dea <thread_button_code+0x28e>
	const struct gpio_driver_api *api =
     c68:	4870      	ldr	r0, [pc, #448]	; (e2c <thread_button_code+0x2d0>)
     c6a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
     c6c:	68db      	ldr	r3, [r3, #12]
     c6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     c72:	4798      	blx	r3
            printk("SETTING LED VALUE FAILED");
        ret = gpio_pin_set_dt(&led3, 0);
        if (ret < 0)
     c74:	2800      	cmp	r0, #0
     c76:	f2c0 80bf 	blt.w	df8 <thread_button_code+0x29c>
	return z_impl_k_sleep(timeout);
     c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     c7e:	2100      	movs	r1, #0
     c80:	f00a f8d2 	bl	ae28 <z_impl_k_sleep>
            printk("SETTING LED VALUE FAILED");
        k_msleep(SLEEP_TIME_MS);

        for (size_t i = 0; i < 10; i++)
     c84:	2500      	movs	r5, #0
     c86:	e10b      	b.n	ea0 <thread_button_code+0x344>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     c88:	4d69      	ldr	r5, [pc, #420]	; (e30 <thread_button_code+0x2d4>)
     c8a:	f240 4392 	movw	r3, #1170	; 0x492
     c8e:	462a      	mov	r2, r5
     c90:	4968      	ldr	r1, [pc, #416]	; (e34 <thread_button_code+0x2d8>)
     c92:	4869      	ldr	r0, [pc, #420]	; (e38 <thread_button_code+0x2dc>)
     c94:	f00b fa68 	bl	c168 <assert_print>
     c98:	4868      	ldr	r0, [pc, #416]	; (e3c <thread_button_code+0x2e0>)
     c9a:	f00b fa65 	bl	c168 <assert_print>
     c9e:	f240 4192 	movw	r1, #1170	; 0x492
     ca2:	4628      	mov	r0, r5
     ca4:	f00b fa59 	bl	c15a <assert_post_action>
     ca8:	e76b      	b.n	b82 <thread_button_code+0x26>
		value = (value != 0) ? 0 : 1;
     caa:	2401      	movs	r4, #1
     cac:	e76f      	b.n	b8e <thread_button_code+0x32>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     cae:	4d60      	ldr	r5, [pc, #384]	; (e30 <thread_button_code+0x2d4>)
     cb0:	f44f 638d 	mov.w	r3, #1128	; 0x468
     cb4:	462a      	mov	r2, r5
     cb6:	495f      	ldr	r1, [pc, #380]	; (e34 <thread_button_code+0x2d8>)
     cb8:	485f      	ldr	r0, [pc, #380]	; (e38 <thread_button_code+0x2dc>)
     cba:	f00b fa55 	bl	c168 <assert_print>
     cbe:	485f      	ldr	r0, [pc, #380]	; (e3c <thread_button_code+0x2e0>)
     cc0:	f00b fa52 	bl	c168 <assert_print>
     cc4:	f44f 618d 	mov.w	r1, #1128	; 0x468
     cc8:	4628      	mov	r0, r5
     cca:	f00b fa46 	bl	c15a <assert_post_action>
     cce:	e765      	b.n	b9c <thread_button_code+0x40>
	const struct gpio_driver_api *api =
     cd0:	4856      	ldr	r0, [pc, #344]	; (e2c <thread_button_code+0x2d0>)
     cd2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     cd4:	691b      	ldr	r3, [r3, #16]
     cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     cda:	4798      	blx	r3
     cdc:	e767      	b.n	bae <thread_button_code+0x52>
            printk("SETTING LED VALUE FAILED");
     cde:	4858      	ldr	r0, [pc, #352]	; (e40 <thread_button_code+0x2e4>)
     ce0:	f00b f8bd 	bl	be5e <printk>
     ce4:	e766      	b.n	bb4 <thread_button_code+0x58>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ce6:	4d52      	ldr	r5, [pc, #328]	; (e30 <thread_button_code+0x2d4>)
     ce8:	f240 4392 	movw	r3, #1170	; 0x492
     cec:	462a      	mov	r2, r5
     cee:	4951      	ldr	r1, [pc, #324]	; (e34 <thread_button_code+0x2d8>)
     cf0:	4851      	ldr	r0, [pc, #324]	; (e38 <thread_button_code+0x2dc>)
     cf2:	f00b fa39 	bl	c168 <assert_print>
     cf6:	4851      	ldr	r0, [pc, #324]	; (e3c <thread_button_code+0x2e0>)
     cf8:	f00b fa36 	bl	c168 <assert_print>
     cfc:	f240 4192 	movw	r1, #1170	; 0x492
     d00:	4628      	mov	r0, r5
     d02:	f00b fa2a 	bl	c15a <assert_post_action>
     d06:	e75d      	b.n	bc4 <thread_button_code+0x68>
		value = (value != 0) ? 0 : 1;
     d08:	2401      	movs	r4, #1
     d0a:	e761      	b.n	bd0 <thread_button_code+0x74>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d0c:	4d48      	ldr	r5, [pc, #288]	; (e30 <thread_button_code+0x2d4>)
     d0e:	f44f 638d 	mov.w	r3, #1128	; 0x468
     d12:	462a      	mov	r2, r5
     d14:	4947      	ldr	r1, [pc, #284]	; (e34 <thread_button_code+0x2d8>)
     d16:	4848      	ldr	r0, [pc, #288]	; (e38 <thread_button_code+0x2dc>)
     d18:	f00b fa26 	bl	c168 <assert_print>
     d1c:	4847      	ldr	r0, [pc, #284]	; (e3c <thread_button_code+0x2e0>)
     d1e:	f00b fa23 	bl	c168 <assert_print>
     d22:	f44f 618d 	mov.w	r1, #1128	; 0x468
     d26:	4628      	mov	r0, r5
     d28:	f00b fa17 	bl	c15a <assert_post_action>
     d2c:	e757      	b.n	bde <thread_button_code+0x82>
	const struct gpio_driver_api *api =
     d2e:	483f      	ldr	r0, [pc, #252]	; (e2c <thread_button_code+0x2d0>)
     d30:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     d32:	691b      	ldr	r3, [r3, #16]
     d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     d38:	4798      	blx	r3
     d3a:	e759      	b.n	bf0 <thread_button_code+0x94>
            printk("SETTING LED VALUE FAILED");
     d3c:	4840      	ldr	r0, [pc, #256]	; (e40 <thread_button_code+0x2e4>)
     d3e:	f00b f88e 	bl	be5e <printk>
     d42:	e758      	b.n	bf6 <thread_button_code+0x9a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d44:	4d3a      	ldr	r5, [pc, #232]	; (e30 <thread_button_code+0x2d4>)
     d46:	f240 4392 	movw	r3, #1170	; 0x492
     d4a:	462a      	mov	r2, r5
     d4c:	4939      	ldr	r1, [pc, #228]	; (e34 <thread_button_code+0x2d8>)
     d4e:	483a      	ldr	r0, [pc, #232]	; (e38 <thread_button_code+0x2dc>)
     d50:	f00b fa0a 	bl	c168 <assert_print>
     d54:	4839      	ldr	r0, [pc, #228]	; (e3c <thread_button_code+0x2e0>)
     d56:	f00b fa07 	bl	c168 <assert_print>
     d5a:	f240 4192 	movw	r1, #1170	; 0x492
     d5e:	4628      	mov	r0, r5
     d60:	f00b f9fb 	bl	c15a <assert_post_action>
     d64:	e74f      	b.n	c06 <thread_button_code+0xaa>
		value = (value != 0) ? 0 : 1;
     d66:	2401      	movs	r4, #1
     d68:	e753      	b.n	c12 <thread_button_code+0xb6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d6a:	4d31      	ldr	r5, [pc, #196]	; (e30 <thread_button_code+0x2d4>)
     d6c:	f44f 638d 	mov.w	r3, #1128	; 0x468
     d70:	462a      	mov	r2, r5
     d72:	4930      	ldr	r1, [pc, #192]	; (e34 <thread_button_code+0x2d8>)
     d74:	4830      	ldr	r0, [pc, #192]	; (e38 <thread_button_code+0x2dc>)
     d76:	f00b f9f7 	bl	c168 <assert_print>
     d7a:	4830      	ldr	r0, [pc, #192]	; (e3c <thread_button_code+0x2e0>)
     d7c:	f00b f9f4 	bl	c168 <assert_print>
     d80:	f44f 618d 	mov.w	r1, #1128	; 0x468
     d84:	4628      	mov	r0, r5
     d86:	f00b f9e8 	bl	c15a <assert_post_action>
     d8a:	e749      	b.n	c20 <thread_button_code+0xc4>
	const struct gpio_driver_api *api =
     d8c:	4827      	ldr	r0, [pc, #156]	; (e2c <thread_button_code+0x2d0>)
     d8e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     d90:	691b      	ldr	r3, [r3, #16]
     d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     d96:	4798      	blx	r3
     d98:	e74b      	b.n	c32 <thread_button_code+0xd6>
            printk("SETTING LED VALUE FAILED");
     d9a:	4829      	ldr	r0, [pc, #164]	; (e40 <thread_button_code+0x2e4>)
     d9c:	f00b f85f 	bl	be5e <printk>
     da0:	e74a      	b.n	c38 <thread_button_code+0xdc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     da2:	4d23      	ldr	r5, [pc, #140]	; (e30 <thread_button_code+0x2d4>)
     da4:	f240 4392 	movw	r3, #1170	; 0x492
     da8:	462a      	mov	r2, r5
     daa:	4922      	ldr	r1, [pc, #136]	; (e34 <thread_button_code+0x2d8>)
     dac:	4822      	ldr	r0, [pc, #136]	; (e38 <thread_button_code+0x2dc>)
     dae:	f00b f9db 	bl	c168 <assert_print>
     db2:	4822      	ldr	r0, [pc, #136]	; (e3c <thread_button_code+0x2e0>)
     db4:	f00b f9d8 	bl	c168 <assert_print>
     db8:	f240 4192 	movw	r1, #1170	; 0x492
     dbc:	4628      	mov	r0, r5
     dbe:	f00b f9cc 	bl	c15a <assert_post_action>
     dc2:	e741      	b.n	c48 <thread_button_code+0xec>
		value = (value != 0) ? 0 : 1;
     dc4:	2401      	movs	r4, #1
     dc6:	e745      	b.n	c54 <thread_button_code+0xf8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     dc8:	4d19      	ldr	r5, [pc, #100]	; (e30 <thread_button_code+0x2d4>)
     dca:	f44f 638d 	mov.w	r3, #1128	; 0x468
     dce:	462a      	mov	r2, r5
     dd0:	4918      	ldr	r1, [pc, #96]	; (e34 <thread_button_code+0x2d8>)
     dd2:	4819      	ldr	r0, [pc, #100]	; (e38 <thread_button_code+0x2dc>)
     dd4:	f00b f9c8 	bl	c168 <assert_print>
     dd8:	4818      	ldr	r0, [pc, #96]	; (e3c <thread_button_code+0x2e0>)
     dda:	f00b f9c5 	bl	c168 <assert_print>
     dde:	f44f 618d 	mov.w	r1, #1128	; 0x468
     de2:	4628      	mov	r0, r5
     de4:	f00b f9b9 	bl	c15a <assert_post_action>
     de8:	e73b      	b.n	c62 <thread_button_code+0x106>
	const struct gpio_driver_api *api =
     dea:	4810      	ldr	r0, [pc, #64]	; (e2c <thread_button_code+0x2d0>)
     dec:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     dee:	691b      	ldr	r3, [r3, #16]
     df0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     df4:	4798      	blx	r3
     df6:	e73d      	b.n	c74 <thread_button_code+0x118>
            printk("SETTING LED VALUE FAILED");
     df8:	4811      	ldr	r0, [pc, #68]	; (e40 <thread_button_code+0x2e4>)
     dfa:	f00b f830 	bl	be5e <printk>
     dfe:	e73c      	b.n	c7a <thread_button_code+0x11e>
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e00:	4c0b      	ldr	r4, [pc, #44]	; (e30 <thread_button_code+0x2d4>)
     e02:	f240 43bc 	movw	r3, #1212	; 0x4bc
     e06:	4622      	mov	r2, r4
     e08:	490a      	ldr	r1, [pc, #40]	; (e34 <thread_button_code+0x2d8>)
     e0a:	480b      	ldr	r0, [pc, #44]	; (e38 <thread_button_code+0x2dc>)
     e0c:	f00b f9ac 	bl	c168 <assert_print>
     e10:	480a      	ldr	r0, [pc, #40]	; (e3c <thread_button_code+0x2e0>)
     e12:	f00b f9a9 	bl	c168 <assert_print>
     e16:	f240 41bc 	movw	r1, #1212	; 0x4bc
     e1a:	4620      	mov	r0, r4
     e1c:	f00b f99d 	bl	c15a <assert_post_action>
     e20:	e047      	b.n	eb2 <thread_button_code+0x356>
     e22:	bf00      	nop
     e24:	0000d8c4 	.word	0x0000d8c4
     e28:	200006dc 	.word	0x200006dc
     e2c:	0000d170 	.word	0x0000d170
     e30:	0000d488 	.word	0x0000d488
     e34:	0000d790 	.word	0x0000d790
     e38:	0000d51c 	.word	0x0000d51c
     e3c:	0000d7d0 	.word	0x0000d7d0
     e40:	0000d914 	.word	0x0000d914
     e44:	4c35      	ldr	r4, [pc, #212]	; (f1c <thread_button_code+0x3c0>)
     e46:	f240 43bc 	movw	r3, #1212	; 0x4bc
     e4a:	4622      	mov	r2, r4
     e4c:	4934      	ldr	r1, [pc, #208]	; (f20 <thread_button_code+0x3c4>)
     e4e:	4835      	ldr	r0, [pc, #212]	; (f24 <thread_button_code+0x3c8>)
     e50:	f00b f98a 	bl	c168 <assert_print>
     e54:	4834      	ldr	r0, [pc, #208]	; (f28 <thread_button_code+0x3cc>)
     e56:	f00b f987 	bl	c168 <assert_print>
     e5a:	f240 41bc 	movw	r1, #1212	; 0x4bc
     e5e:	4620      	mov	r0, r4
     e60:	f00b f97b 	bl	c15a <assert_post_action>
     e64:	e031      	b.n	eca <thread_button_code+0x36e>
     e66:	4c2d      	ldr	r4, [pc, #180]	; (f1c <thread_button_code+0x3c0>)
     e68:	f240 43bc 	movw	r3, #1212	; 0x4bc
     e6c:	4622      	mov	r2, r4
     e6e:	492c      	ldr	r1, [pc, #176]	; (f20 <thread_button_code+0x3c4>)
     e70:	482c      	ldr	r0, [pc, #176]	; (f24 <thread_button_code+0x3c8>)
     e72:	f00b f979 	bl	c168 <assert_print>
     e76:	482c      	ldr	r0, [pc, #176]	; (f28 <thread_button_code+0x3cc>)
     e78:	f00b f976 	bl	c168 <assert_print>
     e7c:	f240 41bc 	movw	r1, #1212	; 0x4bc
     e80:	4620      	mov	r0, r4
     e82:	f00b f96a 	bl	c15a <assert_post_action>
     e86:	e02c      	b.n	ee2 <thread_button_code+0x386>
	const struct gpio_driver_api *api =
     e88:	4828      	ldr	r0, [pc, #160]	; (f2c <thread_button_code+0x3d0>)
     e8a:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
     e8c:	695b      	ldr	r3, [r3, #20]
     e8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e92:	4798      	blx	r3
     e94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     e98:	2100      	movs	r1, #0
     e9a:	f009 ffc5 	bl	ae28 <z_impl_k_sleep>
        for (size_t i = 0; i < 10; i++)
     e9e:	3501      	adds	r5, #1
     ea0:	2d09      	cmp	r5, #9
     ea2:	f63f ae5f 	bhi.w	b64 <thread_button_code+0x8>
	const struct gpio_driver_config *const cfg =
     ea6:	4b21      	ldr	r3, [pc, #132]	; (f2c <thread_button_code+0x3d0>)
     ea8:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     eb0:	d0a6      	beq.n	e00 <thread_button_code+0x2a4>
	const struct gpio_driver_api *api =
     eb2:	4c1e      	ldr	r4, [pc, #120]	; (f2c <thread_button_code+0x3d0>)
     eb4:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     eb6:	695b      	ldr	r3, [r3, #20]
     eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ebc:	4620      	mov	r0, r4
     ebe:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     ec0:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
     ec8:	d0bc      	beq.n	e44 <thread_button_code+0x2e8>
	const struct gpio_driver_api *api =
     eca:	4c18      	ldr	r4, [pc, #96]	; (f2c <thread_button_code+0x3d0>)
     ecc:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     ece:	695b      	ldr	r3, [r3, #20]
     ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     ed4:	4620      	mov	r0, r4
     ed6:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     ed8:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     ee0:	d0c1      	beq.n	e66 <thread_button_code+0x30a>
	const struct gpio_driver_api *api =
     ee2:	4c12      	ldr	r4, [pc, #72]	; (f2c <thread_button_code+0x3d0>)
     ee4:	68a3      	ldr	r3, [r4, #8]
	return api->port_toggle_bits(port, pins);
     ee6:	695b      	ldr	r3, [r3, #20]
     ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     eec:	4620      	mov	r0, r4
     eee:	4798      	blx	r3
	const struct gpio_driver_config *const cfg =
     ef0:	6863      	ldr	r3, [r4, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     ef8:	d1c6      	bne.n	e88 <thread_button_code+0x32c>
     efa:	4c08      	ldr	r4, [pc, #32]	; (f1c <thread_button_code+0x3c0>)
     efc:	f240 43bc 	movw	r3, #1212	; 0x4bc
     f00:	4622      	mov	r2, r4
     f02:	4907      	ldr	r1, [pc, #28]	; (f20 <thread_button_code+0x3c4>)
     f04:	4807      	ldr	r0, [pc, #28]	; (f24 <thread_button_code+0x3c8>)
     f06:	f00b f92f 	bl	c168 <assert_print>
     f0a:	4807      	ldr	r0, [pc, #28]	; (f28 <thread_button_code+0x3cc>)
     f0c:	f00b f92c 	bl	c168 <assert_print>
     f10:	f240 41bc 	movw	r1, #1212	; 0x4bc
     f14:	4620      	mov	r0, r4
     f16:	f00b f920 	bl	c15a <assert_post_action>
     f1a:	e7b5      	b.n	e88 <thread_button_code+0x32c>
     f1c:	0000d488 	.word	0x0000d488
     f20:	0000d790 	.word	0x0000d790
     f24:	0000d51c 	.word	0x0000d51c
     f28:	0000d7d0 	.word	0x0000d7d0
     f2c:	0000d170 	.word	0x0000d170

00000f30 <thread_output_code>:
{
     f30:	b570      	push	{r4, r5, r6, lr}
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     f32:	485b      	ldr	r0, [pc, #364]	; (10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>)
     f34:	f00a ff93 	bl	be5e <printk>
    long int nact = 0;
     f38:	2400      	movs	r4, #0
     f3a:	e0c8      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f3c:	4e59      	ldr	r6, [pc, #356]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     f3e:	f240 4392 	movw	r3, #1170	; 0x492
     f42:	4632      	mov	r2, r6
     f44:	4958      	ldr	r1, [pc, #352]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     f46:	4859      	ldr	r0, [pc, #356]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
     f48:	f00b f90e 	bl	c168 <assert_print>
     f4c:	4858      	ldr	r0, [pc, #352]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
     f4e:	f00b f90b 	bl	c168 <assert_print>
     f52:	f240 4192 	movw	r1, #1170	; 0x492
     f56:	4630      	mov	r0, r6
     f58:	f00b f8ff 	bl	c15a <assert_post_action>
     f5c:	e0ee      	b.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
		value = (value != 0) ? 0 : 1;
     f5e:	2500      	movs	r5, #0
     f60:	e0f2      	b.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f62:	4e50      	ldr	r6, [pc, #320]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     f64:	f44f 638d 	mov.w	r3, #1128	; 0x468
     f68:	4632      	mov	r2, r6
     f6a:	494f      	ldr	r1, [pc, #316]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     f6c:	484f      	ldr	r0, [pc, #316]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
     f6e:	f00b f8fb 	bl	c168 <assert_print>
     f72:	484f      	ldr	r0, [pc, #316]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
     f74:	f00b f8f8 	bl	c168 <assert_print>
     f78:	f44f 618d 	mov.w	r1, #1128	; 0x468
     f7c:	4630      	mov	r0, r6
     f7e:	f00b f8ec 	bl	c15a <assert_post_action>
     f82:	e0e8      	b.n	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
	const struct gpio_driver_api *api =
     f84:	484b      	ldr	r0, [pc, #300]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
     f86:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     f88:	691b      	ldr	r3, [r3, #16]
     f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     f8e:	4798      	blx	r3
     f90:	e0ea      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
                printk("SETTING LED VALUE FAILED");
     f92:	4849      	ldr	r0, [pc, #292]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
     f94:	f00a ff63 	bl	be5e <printk>
     f98:	e0e9      	b.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     f9a:	4e42      	ldr	r6, [pc, #264]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     f9c:	f240 4392 	movw	r3, #1170	; 0x492
     fa0:	4632      	mov	r2, r6
     fa2:	4941      	ldr	r1, [pc, #260]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fa4:	4841      	ldr	r0, [pc, #260]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
     fa6:	f00b f8df 	bl	c168 <assert_print>
     faa:	4841      	ldr	r0, [pc, #260]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
     fac:	f00b f8dc 	bl	c168 <assert_print>
     fb0:	f240 4192 	movw	r1, #1170	; 0x492
     fb4:	4630      	mov	r0, r6
     fb6:	f00b f8d0 	bl	c15a <assert_post_action>
     fba:	e0e0      	b.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
		value = (value != 0) ? 0 : 1;
     fbc:	2500      	movs	r5, #0
     fbe:	e0e4      	b.n	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     fc0:	4e38      	ldr	r6, [pc, #224]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     fc2:	f44f 638d 	mov.w	r3, #1128	; 0x468
     fc6:	4632      	mov	r2, r6
     fc8:	4937      	ldr	r1, [pc, #220]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
     fca:	4838      	ldr	r0, [pc, #224]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
     fcc:	f00b f8cc 	bl	c168 <assert_print>
     fd0:	4837      	ldr	r0, [pc, #220]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
     fd2:	f00b f8c9 	bl	c168 <assert_print>
     fd6:	f44f 618d 	mov.w	r1, #1128	; 0x468
     fda:	4630      	mov	r0, r6
     fdc:	f00b f8bd 	bl	c15a <assert_post_action>
     fe0:	e0da      	b.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
	const struct gpio_driver_api *api =
     fe2:	4834      	ldr	r0, [pc, #208]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
     fe4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
     fe6:	691b      	ldr	r3, [r3, #16]
     fe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     fec:	4798      	blx	r3
     fee:	e0dc      	b.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
                printk("SETTING LED VALUE FAILED");
     ff0:	4831      	ldr	r0, [pc, #196]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
     ff2:	f00a ff34 	bl	be5e <printk>
     ff6:	e0db      	b.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     ff8:	4e2a      	ldr	r6, [pc, #168]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
     ffa:	f240 4392 	movw	r3, #1170	; 0x492
     ffe:	4632      	mov	r2, r6
    1000:	4929      	ldr	r1, [pc, #164]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1002:	482a      	ldr	r0, [pc, #168]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    1004:	f00b f8b0 	bl	c168 <assert_print>
    1008:	4829      	ldr	r0, [pc, #164]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    100a:	f00b f8ad 	bl	c168 <assert_print>
    100e:	f240 4192 	movw	r1, #1170	; 0x492
    1012:	4630      	mov	r0, r6
    1014:	f00b f8a1 	bl	c15a <assert_post_action>
    1018:	e0d2      	b.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
		value = (value != 0) ? 0 : 1;
    101a:	2500      	movs	r5, #0
    101c:	e0d6      	b.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    101e:	4e21      	ldr	r6, [pc, #132]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
    1020:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1024:	4632      	mov	r2, r6
    1026:	4920      	ldr	r1, [pc, #128]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1028:	4820      	ldr	r0, [pc, #128]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    102a:	f00b f89d 	bl	c168 <assert_print>
    102e:	4820      	ldr	r0, [pc, #128]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    1030:	f00b f89a 	bl	c168 <assert_print>
    1034:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1038:	4630      	mov	r0, r6
    103a:	f00b f88e 	bl	c15a <assert_post_action>
    103e:	e0cc      	b.n	11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
	const struct gpio_driver_api *api =
    1040:	481c      	ldr	r0, [pc, #112]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    1042:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1044:	691b      	ldr	r3, [r3, #16]
    1046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    104a:	4798      	blx	r3
    104c:	e0ce      	b.n	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
                printk("SETTING LED VALUE FAILED");
    104e:	481a      	ldr	r0, [pc, #104]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    1050:	f00a ff05 	bl	be5e <printk>
    1054:	e0cd      	b.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1056:	4e13      	ldr	r6, [pc, #76]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
    1058:	f240 4392 	movw	r3, #1170	; 0x492
    105c:	4632      	mov	r2, r6
    105e:	4912      	ldr	r1, [pc, #72]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1060:	4812      	ldr	r0, [pc, #72]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    1062:	f00b f881 	bl	c168 <assert_print>
    1066:	4812      	ldr	r0, [pc, #72]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    1068:	f00b f87e 	bl	c168 <assert_print>
    106c:	f240 4192 	movw	r1, #1170	; 0x492
    1070:	4630      	mov	r0, r6
    1072:	f00b f872 	bl	c15a <assert_post_action>
    1076:	e0c4      	b.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
		value = (value != 0) ? 0 : 1;
    1078:	2500      	movs	r5, #0
    107a:	e0c8      	b.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    107c:	4e09      	ldr	r6, [pc, #36]	; (10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>)
    107e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1082:	4632      	mov	r2, r6
    1084:	4908      	ldr	r1, [pc, #32]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1086:	4809      	ldr	r0, [pc, #36]	; (10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>)
    1088:	f00b f86e 	bl	c168 <assert_print>
    108c:	4808      	ldr	r0, [pc, #32]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    108e:	f00b f86b 	bl	c168 <assert_print>
    1092:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1096:	4630      	mov	r0, r6
    1098:	f00b f85f 	bl	c15a <assert_post_action>
    109c:	e0be      	b.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    109e:	bf00      	nop
    10a0:	0000d930 	.word	0x0000d930
    10a4:	0000d488 	.word	0x0000d488
    10a8:	0000d790 	.word	0x0000d790
    10ac:	0000d51c 	.word	0x0000d51c
    10b0:	0000d7d0 	.word	0x0000d7d0
    10b4:	0000d170 	.word	0x0000d170
    10b8:	0000d914 	.word	0x0000d914
	const struct gpio_driver_api *api =
    10bc:	48a7      	ldr	r0, [pc, #668]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    10be:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    10c0:	691b      	ldr	r3, [r3, #16]
    10c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    10c6:	4798      	blx	r3
            if (ret < 0)
    10c8:	2800      	cmp	r0, #0
    10ca:	f2c0 80b1 	blt.w	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
	return z_impl_k_sem_take(sem, timeout);
    10ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    10d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10d6:	48a2      	ldr	r0, [pc, #648]	; (1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>)
    10d8:	f008 fc0a 	bl	98f0 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    10dc:	3401      	adds	r4, #1
	return z_impl_k_uptime_ticks();
    10de:	f00b ffbf 	bl	d060 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    10e2:	4602      	mov	r2, r0
    10e4:	014b      	lsls	r3, r1, #5
    10e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    10ea:	0140      	lsls	r0, r0, #5
    10ec:	1a80      	subs	r0, r0, r2
    10ee:	eb63 0301 	sbc.w	r3, r3, r1
    10f2:	009b      	lsls	r3, r3, #2
    10f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    10f8:	0080      	lsls	r0, r0, #2
    10fa:	1880      	adds	r0, r0, r2
    10fc:	eb43 0301 	adc.w	r3, r3, r1
    1100:	00db      	lsls	r3, r3, #3
    1102:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    1106:	f3c0 3010 	ubfx	r0, r0, #12, #17
    110a:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    110e:	0bdb      	lsrs	r3, r3, #15
    1110:	4621      	mov	r1, r4
    1112:	4894      	ldr	r0, [pc, #592]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    1114:	f00a fea3 	bl	be5e <printk>
        printk("Task C read bc value: %d\n", bc);
    1118:	4d93      	ldr	r5, [pc, #588]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
    111a:	8829      	ldrh	r1, [r5, #0]
    111c:	4893      	ldr	r0, [pc, #588]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    111e:	f00a fe9e 	bl	be5e <printk>
        if (bc < 1000)
    1122:	882b      	ldrh	r3, [r5, #0]
    1124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1128:	f080 8086 	bcs.w	1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>
	const struct gpio_driver_config *const cfg =
    112c:	4b8b      	ldr	r3, [pc, #556]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    112e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1130:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1132:	6813      	ldr	r3, [r2, #0]
    1134:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1138:	f43f af00 	beq.w	f3c <thread_output_code+0xc>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    113c:	682b      	ldr	r3, [r5, #0]
    113e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1142:	f47f af0c 	bne.w	f5e <thread_output_code+0x2e>
    1146:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1148:	4b84      	ldr	r3, [pc, #528]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    114a:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1152:	f43f af06 	beq.w	f62 <thread_output_code+0x32>
	if (value != 0)	{
    1156:	2d00      	cmp	r5, #0
    1158:	f43f af14 	beq.w	f84 <thread_output_code+0x54>
	const struct gpio_driver_api *api =
    115c:	487f      	ldr	r0, [pc, #508]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    115e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1160:	68db      	ldr	r3, [r3, #12]
    1162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1166:	4798      	blx	r3
            if (ret < 0)
    1168:	2800      	cmp	r0, #0
    116a:	f6ff af12 	blt.w	f92 <thread_output_code+0x62>
	const struct gpio_driver_config *const cfg =
    116e:	4b7b      	ldr	r3, [pc, #492]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1170:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1172:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1174:	6813      	ldr	r3, [r2, #0]
    1176:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    117a:	f43f af0e 	beq.w	f9a <thread_output_code+0x6a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    117e:	682b      	ldr	r3, [r5, #0]
    1180:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1184:	f47f af1a 	bne.w	fbc <thread_output_code+0x8c>
    1188:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    118a:	4b74      	ldr	r3, [pc, #464]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    118c:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1194:	f43f af14 	beq.w	fc0 <thread_output_code+0x90>
	if (value != 0)	{
    1198:	2d00      	cmp	r5, #0
    119a:	f43f af22 	beq.w	fe2 <thread_output_code+0xb2>
	const struct gpio_driver_api *api =
    119e:	486f      	ldr	r0, [pc, #444]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    11a0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    11a2:	68db      	ldr	r3, [r3, #12]
    11a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    11a8:	4798      	blx	r3
            if (ret < 0)
    11aa:	2800      	cmp	r0, #0
    11ac:	f6ff af20 	blt.w	ff0 <thread_output_code+0xc0>
	const struct gpio_driver_config *const cfg =
    11b0:	4b6a      	ldr	r3, [pc, #424]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    11b2:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    11b4:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11b6:	6813      	ldr	r3, [r2, #0]
    11b8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    11bc:	f43f af1c 	beq.w	ff8 <thread_output_code+0xc8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    11c0:	682b      	ldr	r3, [r5, #0]
    11c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    11c6:	f47f af28 	bne.w	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    11ca:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    11cc:	4b63      	ldr	r3, [pc, #396]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    11ce:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    11d6:	f43f af22 	beq.w	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
	if (value != 0)	{
    11da:	2d00      	cmp	r5, #0
    11dc:	f43f af30 	beq.w	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
	const struct gpio_driver_api *api =
    11e0:	485e      	ldr	r0, [pc, #376]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    11e2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    11e4:	68db      	ldr	r3, [r3, #12]
    11e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    11ea:	4798      	blx	r3
            if (ret < 0)
    11ec:	2800      	cmp	r0, #0
    11ee:	f6ff af2e 	blt.w	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
	const struct gpio_driver_config *const cfg =
    11f2:	4b5a      	ldr	r3, [pc, #360]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    11f4:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    11f6:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    11f8:	6813      	ldr	r3, [r2, #0]
    11fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    11fe:	f43f af2a 	beq.w	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1202:	682b      	ldr	r3, [r5, #0]
    1204:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1208:	f47f af36 	bne.w	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    120c:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    120e:	4b53      	ldr	r3, [pc, #332]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1210:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1212:	681b      	ldr	r3, [r3, #0]
    1214:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1218:	f43f af30 	beq.w	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
	if (value != 0)	{
    121c:	2d00      	cmp	r5, #0
    121e:	f43f af4d 	beq.w	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
	const struct gpio_driver_api *api =
    1222:	484e      	ldr	r0, [pc, #312]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1224:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1226:	68db      	ldr	r3, [r3, #12]
    1228:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    122c:	4798      	blx	r3
    122e:	e74b      	b.n	10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
                printk("SETTING LED VALUE FAILED");
    1230:	484f      	ldr	r0, [pc, #316]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
    1232:	f00a fe14 	bl	be5e <printk>
    1236:	e74a      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
        else if (bc < 2000)
    1238:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    123c:	f0c0 809a 	bcc.w	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
        else if (bc < 3000)
    1240:	f640 32b7 	movw	r2, #2999	; 0xbb7
    1244:	4293      	cmp	r3, r2
    1246:	f200 8299 	bhi.w	177c <CONFIG_FPROTECT_BLOCK_SIZE+0x77c>
	const struct gpio_driver_config *const cfg =
    124a:	4b44      	ldr	r3, [pc, #272]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    124c:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    124e:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1250:	6813      	ldr	r3, [r2, #0]
    1252:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1256:	f000 81cc 	beq.w	15f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f2>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    125a:	682b      	ldr	r3, [r5, #0]
    125c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1260:	f040 81d8 	bne.w	1614 <CONFIG_FPROTECT_BLOCK_SIZE+0x614>
    1264:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1266:	4b3d      	ldr	r3, [pc, #244]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1268:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    126a:	681b      	ldr	r3, [r3, #0]
    126c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1270:	f000 81d2 	beq.w	1618 <CONFIG_FPROTECT_BLOCK_SIZE+0x618>
	if (value != 0)	{
    1274:	2d00      	cmp	r5, #0
    1276:	f000 81ed 	beq.w	1654 <CONFIG_FPROTECT_BLOCK_SIZE+0x654>
	const struct gpio_driver_api *api =
    127a:	4838      	ldr	r0, [pc, #224]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    127c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    127e:	68db      	ldr	r3, [r3, #12]
    1280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    1284:	4798      	blx	r3
            if (ret < 0)
    1286:	2800      	cmp	r0, #0
    1288:	f2c0 81eb 	blt.w	1662 <CONFIG_FPROTECT_BLOCK_SIZE+0x662>
	const struct gpio_driver_config *const cfg =
    128c:	4b33      	ldr	r3, [pc, #204]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    128e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1290:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1292:	6813      	ldr	r3, [r2, #0]
    1294:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    1298:	f000 81e7 	beq.w	166a <CONFIG_FPROTECT_BLOCK_SIZE+0x66a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    129c:	682b      	ldr	r3, [r5, #0]
    129e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    12a2:	f040 81f3 	bne.w	168c <CONFIG_FPROTECT_BLOCK_SIZE+0x68c>
    12a6:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    12a8:	4b2c      	ldr	r3, [pc, #176]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    12aa:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12ac:	681b      	ldr	r3, [r3, #0]
    12ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    12b2:	f000 81ed 	beq.w	1690 <CONFIG_FPROTECT_BLOCK_SIZE+0x690>
	if (value != 0)	{
    12b6:	2d00      	cmp	r5, #0
    12b8:	f000 81fb 	beq.w	16b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b2>
	const struct gpio_driver_api *api =
    12bc:	4827      	ldr	r0, [pc, #156]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    12be:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    12c0:	68db      	ldr	r3, [r3, #12]
    12c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    12c6:	4798      	blx	r3
            if (ret < 0)
    12c8:	2800      	cmp	r0, #0
    12ca:	f2c0 81f9 	blt.w	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
	const struct gpio_driver_config *const cfg =
    12ce:	4b23      	ldr	r3, [pc, #140]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    12d0:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    12d2:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12d4:	6813      	ldr	r3, [r2, #0]
    12d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    12da:	f000 81f5 	beq.w	16c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    12de:	682b      	ldr	r3, [r5, #0]
    12e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    12e4:	f040 8201 	bne.w	16ea <CONFIG_FPROTECT_BLOCK_SIZE+0x6ea>
    12e8:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    12ea:	4b1c      	ldr	r3, [pc, #112]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    12ec:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    12f4:	f000 81fb 	beq.w	16ee <CONFIG_FPROTECT_BLOCK_SIZE+0x6ee>
	if (value != 0)	{
    12f8:	2d00      	cmp	r5, #0
    12fa:	f000 8209 	beq.w	1710 <CONFIG_FPROTECT_BLOCK_SIZE+0x710>
	const struct gpio_driver_api *api =
    12fe:	4817      	ldr	r0, [pc, #92]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1300:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1302:	68db      	ldr	r3, [r3, #12]
    1304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1308:	4798      	blx	r3
            if (ret < 0)
    130a:	2800      	cmp	r0, #0
    130c:	f2c0 8207 	blt.w	171e <CONFIG_FPROTECT_BLOCK_SIZE+0x71e>
	const struct gpio_driver_config *const cfg =
    1310:	4b12      	ldr	r3, [pc, #72]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1312:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1314:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1316:	6813      	ldr	r3, [r2, #0]
    1318:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    131c:	f000 8203 	beq.w	1726 <CONFIG_FPROTECT_BLOCK_SIZE+0x726>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1320:	682b      	ldr	r3, [r5, #0]
    1322:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1326:	f040 820f 	bne.w	1748 <CONFIG_FPROTECT_BLOCK_SIZE+0x748>
    132a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    132c:	4b0b      	ldr	r3, [pc, #44]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    132e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1330:	681b      	ldr	r3, [r3, #0]
    1332:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1336:	f000 8209 	beq.w	174c <CONFIG_FPROTECT_BLOCK_SIZE+0x74c>
	if (value != 0)	{
    133a:	2d00      	cmp	r5, #0
    133c:	f000 8217 	beq.w	176e <CONFIG_FPROTECT_BLOCK_SIZE+0x76e>
	const struct gpio_driver_api *api =
    1340:	4806      	ldr	r0, [pc, #24]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    1342:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1344:	68db      	ldr	r3, [r3, #12]
    1346:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    134a:	4798      	blx	r3
            if (ret < 0)
    134c:	2800      	cmp	r0, #0
    134e:	f6bf aebe 	bge.w	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
                printk("SETTING LED VALUE FAILED");
    1352:	4807      	ldr	r0, [pc, #28]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
    1354:	f00a fd83 	bl	be5e <printk>
    1358:	e6b9      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    135a:	bf00      	nop
    135c:	0000d170 	.word	0x0000d170
    1360:	200006cc 	.word	0x200006cc
    1364:	0000d96c 	.word	0x0000d96c
    1368:	200001de 	.word	0x200001de
    136c:	0000d9a4 	.word	0x0000d9a4
    1370:	0000d914 	.word	0x0000d914
	const struct gpio_driver_config *const cfg =
    1374:	4bb1      	ldr	r3, [pc, #708]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1376:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1378:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    137a:	6813      	ldr	r3, [r2, #0]
    137c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1380:	d07f      	beq.n	1482 <CONFIG_FPROTECT_BLOCK_SIZE+0x482>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1382:	682b      	ldr	r3, [r5, #0]
    1384:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1388:	f040 808c 	bne.w	14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>
    138c:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    138e:	4bab      	ldr	r3, [pc, #684]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1390:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1398:	f000 8086 	beq.w	14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
	if (value != 0)	{
    139c:	2d00      	cmp	r5, #0
    139e:	f000 8094 	beq.w	14ca <CONFIG_FPROTECT_BLOCK_SIZE+0x4ca>
	const struct gpio_driver_api *api =
    13a2:	48a6      	ldr	r0, [pc, #664]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    13a4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    13a6:	68db      	ldr	r3, [r3, #12]
    13a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    13ac:	4798      	blx	r3
            if (ret < 0)
    13ae:	2800      	cmp	r0, #0
    13b0:	f2c0 8092 	blt.w	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
	const struct gpio_driver_config *const cfg =
    13b4:	4ba1      	ldr	r3, [pc, #644]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    13b6:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13b8:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13ba:	6813      	ldr	r3, [r2, #0]
    13bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    13c0:	f000 808e 	beq.w	14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    13c4:	682b      	ldr	r3, [r5, #0]
    13c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    13ca:	f040 809a 	bne.w	1502 <CONFIG_FPROTECT_BLOCK_SIZE+0x502>
    13ce:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    13d0:	4b9a      	ldr	r3, [pc, #616]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    13d2:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    13da:	f000 8094 	beq.w	1506 <CONFIG_FPROTECT_BLOCK_SIZE+0x506>
	if (value != 0)	{
    13de:	2d00      	cmp	r5, #0
    13e0:	f000 80a2 	beq.w	1528 <CONFIG_FPROTECT_BLOCK_SIZE+0x528>
	const struct gpio_driver_api *api =
    13e4:	4895      	ldr	r0, [pc, #596]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    13e6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    13e8:	68db      	ldr	r3, [r3, #12]
    13ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    13ee:	4798      	blx	r3
            if (ret < 0)
    13f0:	2800      	cmp	r0, #0
    13f2:	f2c0 80a0 	blt.w	1536 <CONFIG_FPROTECT_BLOCK_SIZE+0x536>
	const struct gpio_driver_config *const cfg =
    13f6:	4b91      	ldr	r3, [pc, #580]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    13f8:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    13fa:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    13fc:	6813      	ldr	r3, [r2, #0]
    13fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1402:	f000 809c 	beq.w	153e <CONFIG_FPROTECT_BLOCK_SIZE+0x53e>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1406:	682b      	ldr	r3, [r5, #0]
    1408:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    140c:	f040 80a8 	bne.w	1560 <CONFIG_FPROTECT_BLOCK_SIZE+0x560>
    1410:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1412:	4b8a      	ldr	r3, [pc, #552]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1414:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    141c:	f000 80a2 	beq.w	1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>
	if (value != 0)	{
    1420:	2d00      	cmp	r5, #0
    1422:	f000 80b0 	beq.w	1586 <CONFIG_FPROTECT_BLOCK_SIZE+0x586>
	const struct gpio_driver_api *api =
    1426:	4885      	ldr	r0, [pc, #532]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1428:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    142a:	68db      	ldr	r3, [r3, #12]
    142c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1430:	4798      	blx	r3
            if (ret < 0)
    1432:	2800      	cmp	r0, #0
    1434:	f2c0 80ae 	blt.w	1594 <CONFIG_FPROTECT_BLOCK_SIZE+0x594>
	const struct gpio_driver_config *const cfg =
    1438:	4b80      	ldr	r3, [pc, #512]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    143a:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    143c:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    143e:	6813      	ldr	r3, [r2, #0]
    1440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1444:	f000 80aa 	beq.w	159c <CONFIG_FPROTECT_BLOCK_SIZE+0x59c>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1448:	682b      	ldr	r3, [r5, #0]
    144a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    144e:	f040 80b6 	bne.w	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
    1452:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    1454:	4b79      	ldr	r3, [pc, #484]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1456:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    145e:	f000 80b0 	beq.w	15c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c2>
	if (value != 0)	{
    1462:	2d00      	cmp	r5, #0
    1464:	f000 80be 	beq.w	15e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e4>
	const struct gpio_driver_api *api =
    1468:	4874      	ldr	r0, [pc, #464]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    146a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    146c:	68db      	ldr	r3, [r3, #12]
    146e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1472:	4798      	blx	r3
            if (ret < 0)
    1474:	2800      	cmp	r0, #0
    1476:	f6bf ae2a 	bge.w	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
                printk("SETTING LED VALUE FAILED");
    147a:	4871      	ldr	r0, [pc, #452]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    147c:	f00a fcef 	bl	be5e <printk>
    1480:	e625      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1482:	4e70      	ldr	r6, [pc, #448]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1484:	f240 4392 	movw	r3, #1170	; 0x492
    1488:	4632      	mov	r2, r6
    148a:	496f      	ldr	r1, [pc, #444]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    148c:	486f      	ldr	r0, [pc, #444]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    148e:	f00a fe6b 	bl	c168 <assert_print>
    1492:	486f      	ldr	r0, [pc, #444]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1494:	f00a fe68 	bl	c168 <assert_print>
    1498:	f240 4192 	movw	r1, #1170	; 0x492
    149c:	4630      	mov	r0, r6
    149e:	f00a fe5c 	bl	c15a <assert_post_action>
    14a2:	e76e      	b.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
		value = (value != 0) ? 0 : 1;
    14a4:	2500      	movs	r5, #0
    14a6:	e772      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14a8:	4e66      	ldr	r6, [pc, #408]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    14aa:	f44f 638d 	mov.w	r3, #1128	; 0x468
    14ae:	4632      	mov	r2, r6
    14b0:	4965      	ldr	r1, [pc, #404]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    14b2:	4866      	ldr	r0, [pc, #408]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    14b4:	f00a fe58 	bl	c168 <assert_print>
    14b8:	4865      	ldr	r0, [pc, #404]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    14ba:	f00a fe55 	bl	c168 <assert_print>
    14be:	f44f 618d 	mov.w	r1, #1128	; 0x468
    14c2:	4630      	mov	r0, r6
    14c4:	f00a fe49 	bl	c15a <assert_post_action>
    14c8:	e768      	b.n	139c <CONFIG_FPROTECT_BLOCK_SIZE+0x39c>
	const struct gpio_driver_api *api =
    14ca:	485c      	ldr	r0, [pc, #368]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    14cc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    14ce:	691b      	ldr	r3, [r3, #16]
    14d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    14d4:	4798      	blx	r3
    14d6:	e76a      	b.n	13ae <CONFIG_FPROTECT_BLOCK_SIZE+0x3ae>
                printk("SETTING LED VALUE FAILED");
    14d8:	4859      	ldr	r0, [pc, #356]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    14da:	f00a fcc0 	bl	be5e <printk>
    14de:	e769      	b.n	13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    14e0:	4e58      	ldr	r6, [pc, #352]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    14e2:	f240 4392 	movw	r3, #1170	; 0x492
    14e6:	4632      	mov	r2, r6
    14e8:	4957      	ldr	r1, [pc, #348]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    14ea:	4858      	ldr	r0, [pc, #352]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    14ec:	f00a fe3c 	bl	c168 <assert_print>
    14f0:	4857      	ldr	r0, [pc, #348]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    14f2:	f00a fe39 	bl	c168 <assert_print>
    14f6:	f240 4192 	movw	r1, #1170	; 0x492
    14fa:	4630      	mov	r0, r6
    14fc:	f00a fe2d 	bl	c15a <assert_post_action>
    1500:	e760      	b.n	13c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c4>
		value = (value != 0) ? 0 : 1;
    1502:	2500      	movs	r5, #0
    1504:	e764      	b.n	13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1506:	4e4f      	ldr	r6, [pc, #316]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1508:	f44f 638d 	mov.w	r3, #1128	; 0x468
    150c:	4632      	mov	r2, r6
    150e:	494e      	ldr	r1, [pc, #312]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    1510:	484e      	ldr	r0, [pc, #312]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    1512:	f00a fe29 	bl	c168 <assert_print>
    1516:	484e      	ldr	r0, [pc, #312]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1518:	f00a fe26 	bl	c168 <assert_print>
    151c:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1520:	4630      	mov	r0, r6
    1522:	f00a fe1a 	bl	c15a <assert_post_action>
    1526:	e75a      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
	const struct gpio_driver_api *api =
    1528:	4844      	ldr	r0, [pc, #272]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    152a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    152c:	691b      	ldr	r3, [r3, #16]
    152e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1532:	4798      	blx	r3
    1534:	e75c      	b.n	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
                printk("SETTING LED VALUE FAILED");
    1536:	4842      	ldr	r0, [pc, #264]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    1538:	f00a fc91 	bl	be5e <printk>
    153c:	e75b      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    153e:	4e41      	ldr	r6, [pc, #260]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1540:	f240 4392 	movw	r3, #1170	; 0x492
    1544:	4632      	mov	r2, r6
    1546:	4940      	ldr	r1, [pc, #256]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    1548:	4840      	ldr	r0, [pc, #256]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    154a:	f00a fe0d 	bl	c168 <assert_print>
    154e:	4840      	ldr	r0, [pc, #256]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1550:	f00a fe0a 	bl	c168 <assert_print>
    1554:	f240 4192 	movw	r1, #1170	; 0x492
    1558:	4630      	mov	r0, r6
    155a:	f00a fdfe 	bl	c15a <assert_post_action>
    155e:	e752      	b.n	1406 <CONFIG_FPROTECT_BLOCK_SIZE+0x406>
		value = (value != 0) ? 0 : 1;
    1560:	2500      	movs	r5, #0
    1562:	e756      	b.n	1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1564:	4e37      	ldr	r6, [pc, #220]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    1566:	f44f 638d 	mov.w	r3, #1128	; 0x468
    156a:	4632      	mov	r2, r6
    156c:	4936      	ldr	r1, [pc, #216]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    156e:	4837      	ldr	r0, [pc, #220]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    1570:	f00a fdfa 	bl	c168 <assert_print>
    1574:	4836      	ldr	r0, [pc, #216]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1576:	f00a fdf7 	bl	c168 <assert_print>
    157a:	f44f 618d 	mov.w	r1, #1128	; 0x468
    157e:	4630      	mov	r0, r6
    1580:	f00a fdeb 	bl	c15a <assert_post_action>
    1584:	e74c      	b.n	1420 <CONFIG_FPROTECT_BLOCK_SIZE+0x420>
	const struct gpio_driver_api *api =
    1586:	482d      	ldr	r0, [pc, #180]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    1588:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    158a:	691b      	ldr	r3, [r3, #16]
    158c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1590:	4798      	blx	r3
    1592:	e74e      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
                printk("SETTING LED VALUE FAILED");
    1594:	482a      	ldr	r0, [pc, #168]	; (1640 <CONFIG_FPROTECT_BLOCK_SIZE+0x640>)
    1596:	f00a fc62 	bl	be5e <printk>
    159a:	e74d      	b.n	1438 <CONFIG_FPROTECT_BLOCK_SIZE+0x438>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    159c:	4e29      	ldr	r6, [pc, #164]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    159e:	f240 4392 	movw	r3, #1170	; 0x492
    15a2:	4632      	mov	r2, r6
    15a4:	4928      	ldr	r1, [pc, #160]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    15a6:	4829      	ldr	r0, [pc, #164]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    15a8:	f00a fdde 	bl	c168 <assert_print>
    15ac:	4828      	ldr	r0, [pc, #160]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    15ae:	f00a fddb 	bl	c168 <assert_print>
    15b2:	f240 4192 	movw	r1, #1170	; 0x492
    15b6:	4630      	mov	r0, r6
    15b8:	f00a fdcf 	bl	c15a <assert_post_action>
    15bc:	e744      	b.n	1448 <CONFIG_FPROTECT_BLOCK_SIZE+0x448>
		value = (value != 0) ? 0 : 1;
    15be:	2501      	movs	r5, #1
    15c0:	e748      	b.n	1454 <CONFIG_FPROTECT_BLOCK_SIZE+0x454>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15c2:	4e20      	ldr	r6, [pc, #128]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    15c4:	f44f 638d 	mov.w	r3, #1128	; 0x468
    15c8:	4632      	mov	r2, r6
    15ca:	491f      	ldr	r1, [pc, #124]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    15cc:	481f      	ldr	r0, [pc, #124]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    15ce:	f00a fdcb 	bl	c168 <assert_print>
    15d2:	481f      	ldr	r0, [pc, #124]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    15d4:	f00a fdc8 	bl	c168 <assert_print>
    15d8:	f44f 618d 	mov.w	r1, #1128	; 0x468
    15dc:	4630      	mov	r0, r6
    15de:	f00a fdbc 	bl	c15a <assert_post_action>
    15e2:	e73e      	b.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
	const struct gpio_driver_api *api =
    15e4:	4815      	ldr	r0, [pc, #84]	; (163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>)
    15e6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    15e8:	691b      	ldr	r3, [r3, #16]
    15ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    15ee:	4798      	blx	r3
    15f0:	e740      	b.n	1474 <CONFIG_FPROTECT_BLOCK_SIZE+0x474>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    15f2:	4e14      	ldr	r6, [pc, #80]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    15f4:	f240 4392 	movw	r3, #1170	; 0x492
    15f8:	4632      	mov	r2, r6
    15fa:	4913      	ldr	r1, [pc, #76]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    15fc:	4813      	ldr	r0, [pc, #76]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    15fe:	f00a fdb3 	bl	c168 <assert_print>
    1602:	4813      	ldr	r0, [pc, #76]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    1604:	f00a fdb0 	bl	c168 <assert_print>
    1608:	f240 4192 	movw	r1, #1170	; 0x492
    160c:	4630      	mov	r0, r6
    160e:	f00a fda4 	bl	c15a <assert_post_action>
    1612:	e622      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
		value = (value != 0) ? 0 : 1;
    1614:	2500      	movs	r5, #0
    1616:	e626      	b.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1618:	4e0a      	ldr	r6, [pc, #40]	; (1644 <CONFIG_FPROTECT_BLOCK_SIZE+0x644>)
    161a:	f44f 638d 	mov.w	r3, #1128	; 0x468
    161e:	4632      	mov	r2, r6
    1620:	4909      	ldr	r1, [pc, #36]	; (1648 <CONFIG_FPROTECT_BLOCK_SIZE+0x648>)
    1622:	480a      	ldr	r0, [pc, #40]	; (164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>)
    1624:	f00a fda0 	bl	c168 <assert_print>
    1628:	4809      	ldr	r0, [pc, #36]	; (1650 <CONFIG_FPROTECT_BLOCK_SIZE+0x650>)
    162a:	f00a fd9d 	bl	c168 <assert_print>
    162e:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1632:	4630      	mov	r0, r6
    1634:	f00a fd91 	bl	c15a <assert_post_action>
    1638:	e61c      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    163a:	bf00      	nop
    163c:	0000d170 	.word	0x0000d170
    1640:	0000d914 	.word	0x0000d914
    1644:	0000d488 	.word	0x0000d488
    1648:	0000d790 	.word	0x0000d790
    164c:	0000d51c 	.word	0x0000d51c
    1650:	0000d7d0 	.word	0x0000d7d0
	const struct gpio_driver_api *api =
    1654:	48ae      	ldr	r0, [pc, #696]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1656:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1658:	691b      	ldr	r3, [r3, #16]
    165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    165e:	4798      	blx	r3
    1660:	e611      	b.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
                printk("SETTING LED VALUE FAILED");
    1662:	48ac      	ldr	r0, [pc, #688]	; (1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>)
    1664:	f00a fbfb 	bl	be5e <printk>
    1668:	e610      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    166a:	4eab      	ldr	r6, [pc, #684]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    166c:	f240 4392 	movw	r3, #1170	; 0x492
    1670:	4632      	mov	r2, r6
    1672:	49aa      	ldr	r1, [pc, #680]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    1674:	48aa      	ldr	r0, [pc, #680]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    1676:	f00a fd77 	bl	c168 <assert_print>
    167a:	48aa      	ldr	r0, [pc, #680]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    167c:	f00a fd74 	bl	c168 <assert_print>
    1680:	f240 4192 	movw	r1, #1170	; 0x492
    1684:	4630      	mov	r0, r6
    1686:	f00a fd68 	bl	c15a <assert_post_action>
    168a:	e607      	b.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
		value = (value != 0) ? 0 : 1;
    168c:	2500      	movs	r5, #0
    168e:	e60b      	b.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1690:	4ea1      	ldr	r6, [pc, #644]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    1692:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1696:	4632      	mov	r2, r6
    1698:	49a0      	ldr	r1, [pc, #640]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    169a:	48a1      	ldr	r0, [pc, #644]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    169c:	f00a fd64 	bl	c168 <assert_print>
    16a0:	48a0      	ldr	r0, [pc, #640]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    16a2:	f00a fd61 	bl	c168 <assert_print>
    16a6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    16aa:	4630      	mov	r0, r6
    16ac:	f00a fd55 	bl	c15a <assert_post_action>
    16b0:	e601      	b.n	12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
	const struct gpio_driver_api *api =
    16b2:	4897      	ldr	r0, [pc, #604]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    16b4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    16b6:	691b      	ldr	r3, [r3, #16]
    16b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    16bc:	4798      	blx	r3
    16be:	e603      	b.n	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>
                printk("SETTING LED VALUE FAILED");
    16c0:	4894      	ldr	r0, [pc, #592]	; (1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>)
    16c2:	f00a fbcc 	bl	be5e <printk>
    16c6:	e602      	b.n	12ce <CONFIG_FPROTECT_BLOCK_SIZE+0x2ce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16c8:	4e93      	ldr	r6, [pc, #588]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    16ca:	f240 4392 	movw	r3, #1170	; 0x492
    16ce:	4632      	mov	r2, r6
    16d0:	4992      	ldr	r1, [pc, #584]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    16d2:	4893      	ldr	r0, [pc, #588]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    16d4:	f00a fd48 	bl	c168 <assert_print>
    16d8:	4892      	ldr	r0, [pc, #584]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    16da:	f00a fd45 	bl	c168 <assert_print>
    16de:	f240 4192 	movw	r1, #1170	; 0x492
    16e2:	4630      	mov	r0, r6
    16e4:	f00a fd39 	bl	c15a <assert_post_action>
    16e8:	e5f9      	b.n	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
		value = (value != 0) ? 0 : 1;
    16ea:	2501      	movs	r5, #1
    16ec:	e5fd      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    16ee:	4e8a      	ldr	r6, [pc, #552]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    16f0:	f44f 638d 	mov.w	r3, #1128	; 0x468
    16f4:	4632      	mov	r2, r6
    16f6:	4989      	ldr	r1, [pc, #548]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    16f8:	4889      	ldr	r0, [pc, #548]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    16fa:	f00a fd35 	bl	c168 <assert_print>
    16fe:	4889      	ldr	r0, [pc, #548]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    1700:	f00a fd32 	bl	c168 <assert_print>
    1704:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1708:	4630      	mov	r0, r6
    170a:	f00a fd26 	bl	c15a <assert_post_action>
    170e:	e5f3      	b.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
	const struct gpio_driver_api *api =
    1710:	487f      	ldr	r0, [pc, #508]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1712:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1714:	691b      	ldr	r3, [r3, #16]
    1716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    171a:	4798      	blx	r3
    171c:	e5f5      	b.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
                printk("SETTING LED VALUE FAILED");
    171e:	487d      	ldr	r0, [pc, #500]	; (1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>)
    1720:	f00a fb9d 	bl	be5e <printk>
    1724:	e5f4      	b.n	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1726:	4e7c      	ldr	r6, [pc, #496]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    1728:	f240 4392 	movw	r3, #1170	; 0x492
    172c:	4632      	mov	r2, r6
    172e:	497b      	ldr	r1, [pc, #492]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    1730:	487b      	ldr	r0, [pc, #492]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    1732:	f00a fd19 	bl	c168 <assert_print>
    1736:	487b      	ldr	r0, [pc, #492]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    1738:	f00a fd16 	bl	c168 <assert_print>
    173c:	f240 4192 	movw	r1, #1170	; 0x492
    1740:	4630      	mov	r0, r6
    1742:	f00a fd0a 	bl	c15a <assert_post_action>
    1746:	e5eb      	b.n	1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>
		value = (value != 0) ? 0 : 1;
    1748:	2501      	movs	r5, #1
    174a:	e5ef      	b.n	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    174c:	4e72      	ldr	r6, [pc, #456]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    174e:	f44f 638d 	mov.w	r3, #1128	; 0x468
    1752:	4632      	mov	r2, r6
    1754:	4971      	ldr	r1, [pc, #452]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    1756:	4872      	ldr	r0, [pc, #456]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    1758:	f00a fd06 	bl	c168 <assert_print>
    175c:	4871      	ldr	r0, [pc, #452]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    175e:	f00a fd03 	bl	c168 <assert_print>
    1762:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1766:	4630      	mov	r0, r6
    1768:	f00a fcf7 	bl	c15a <assert_post_action>
    176c:	e5e5      	b.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
	const struct gpio_driver_api *api =
    176e:	4868      	ldr	r0, [pc, #416]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1770:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1772:	691b      	ldr	r3, [r3, #16]
    1774:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1778:	4798      	blx	r3
    177a:	e5e7      	b.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
	const struct gpio_driver_config *const cfg =
    177c:	4b64      	ldr	r3, [pc, #400]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    177e:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1780:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1782:	6813      	ldr	r3, [r2, #0]
    1784:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1788:	d07f      	beq.n	188a <CONFIG_FPROTECT_BLOCK_SIZE+0x88a>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    178a:	682b      	ldr	r3, [r5, #0]
    178c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1790:	f040 808c 	bne.w	18ac <CONFIG_FPROTECT_BLOCK_SIZE+0x8ac>
    1794:	2501      	movs	r5, #1
	const struct gpio_driver_config *const cfg =
    1796:	4b5e      	ldr	r3, [pc, #376]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1798:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    17a0:	f000 8086 	beq.w	18b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b0>
	if (value != 0)	{
    17a4:	2d00      	cmp	r5, #0
    17a6:	f000 8094 	beq.w	18d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x8d2>
	const struct gpio_driver_api *api =
    17aa:	4859      	ldr	r0, [pc, #356]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    17ac:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    17ae:	68db      	ldr	r3, [r3, #12]
    17b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    17b4:	4798      	blx	r3
            if (ret < 0)
    17b6:	2800      	cmp	r0, #0
    17b8:	f2c0 8092 	blt.w	18e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e0>
	const struct gpio_driver_config *const cfg =
    17bc:	4b54      	ldr	r3, [pc, #336]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    17be:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    17c0:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17c2:	6813      	ldr	r3, [r2, #0]
    17c4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    17c8:	f000 808e 	beq.w	18e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x8e8>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    17cc:	682b      	ldr	r3, [r5, #0]
    17ce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    17d2:	f040 809a 	bne.w	190a <CONFIG_FPROTECT_BLOCK_SIZE+0x90a>
    17d6:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    17d8:	4b4d      	ldr	r3, [pc, #308]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    17da:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    17dc:	681b      	ldr	r3, [r3, #0]
    17de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    17e2:	f000 80a1 	beq.w	1928 <CONFIG_FPROTECT_BLOCK_SIZE+0x928>
	if (value != 0)	{
    17e6:	2d00      	cmp	r5, #0
    17e8:	f000 80af 	beq.w	194a <CONFIG_FPROTECT_BLOCK_SIZE+0x94a>
	const struct gpio_driver_api *api =
    17ec:	4848      	ldr	r0, [pc, #288]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    17ee:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    17f0:	68db      	ldr	r3, [r3, #12]
    17f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    17f6:	4798      	blx	r3
            if (ret < 0)
    17f8:	2800      	cmp	r0, #0
    17fa:	f2c0 80ad 	blt.w	1958 <CONFIG_FPROTECT_BLOCK_SIZE+0x958>
	const struct gpio_driver_config *const cfg =
    17fe:	4b44      	ldr	r3, [pc, #272]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1800:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1802:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1804:	6813      	ldr	r3, [r2, #0]
    1806:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    180a:	f000 80a9 	beq.w	1960 <CONFIG_FPROTECT_BLOCK_SIZE+0x960>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    180e:	682b      	ldr	r3, [r5, #0]
    1810:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1814:	f040 80b5 	bne.w	1982 <CONFIG_FPROTECT_BLOCK_SIZE+0x982>
    1818:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    181a:	4b3d      	ldr	r3, [pc, #244]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    181c:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1824:	f000 80af 	beq.w	1986 <CONFIG_FPROTECT_BLOCK_SIZE+0x986>
	if (value != 0)	{
    1828:	2d00      	cmp	r5, #0
    182a:	f000 80bd 	beq.w	19a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9a8>
	const struct gpio_driver_api *api =
    182e:	4838      	ldr	r0, [pc, #224]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1830:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1832:	68db      	ldr	r3, [r3, #12]
    1834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1838:	4798      	blx	r3
            if (ret < 0)
    183a:	2800      	cmp	r0, #0
    183c:	f2c0 80bb 	blt.w	19b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x9b6>
	const struct gpio_driver_config *const cfg =
    1840:	4b33      	ldr	r3, [pc, #204]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1842:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1844:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1846:	6813      	ldr	r3, [r2, #0]
    1848:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    184c:	f000 80b7 	beq.w	19be <CONFIG_FPROTECT_BLOCK_SIZE+0x9be>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1850:	682b      	ldr	r3, [r5, #0]
    1852:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1856:	f040 80c3 	bne.w	19e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e0>
    185a:	2500      	movs	r5, #0
	const struct gpio_driver_config *const cfg =
    185c:	4b2c      	ldr	r3, [pc, #176]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    185e:	685b      	ldr	r3, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1866:	f000 80bd 	beq.w	19e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e4>
	if (value != 0)	{
    186a:	2d00      	cmp	r5, #0
    186c:	f000 80cb 	beq.w	1a06 <CONFIG_FPROTECT_BLOCK_SIZE+0xa06>
	const struct gpio_driver_api *api =
    1870:	4827      	ldr	r0, [pc, #156]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    1872:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    1874:	68db      	ldr	r3, [r3, #12]
    1876:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    187a:	4798      	blx	r3
            if (ret < 0)
    187c:	2800      	cmp	r0, #0
    187e:	f6bf ac26 	bge.w	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
                printk("SETTING LED VALUE FAILED");
    1882:	4824      	ldr	r0, [pc, #144]	; (1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>)
    1884:	f00a faeb 	bl	be5e <printk>
    {
    1888:	e421      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    188a:	4e23      	ldr	r6, [pc, #140]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    188c:	f240 4392 	movw	r3, #1170	; 0x492
    1890:	4632      	mov	r2, r6
    1892:	4922      	ldr	r1, [pc, #136]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    1894:	4822      	ldr	r0, [pc, #136]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    1896:	f00a fc67 	bl	c168 <assert_print>
    189a:	4822      	ldr	r0, [pc, #136]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    189c:	f00a fc64 	bl	c168 <assert_print>
    18a0:	f240 4192 	movw	r1, #1170	; 0x492
    18a4:	4630      	mov	r0, r6
    18a6:	f00a fc58 	bl	c15a <assert_post_action>
    18aa:	e76e      	b.n	178a <CONFIG_FPROTECT_BLOCK_SIZE+0x78a>
		value = (value != 0) ? 0 : 1;
    18ac:	2500      	movs	r5, #0
    18ae:	e772      	b.n	1796 <CONFIG_FPROTECT_BLOCK_SIZE+0x796>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18b0:	4e19      	ldr	r6, [pc, #100]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    18b2:	f44f 638d 	mov.w	r3, #1128	; 0x468
    18b6:	4632      	mov	r2, r6
    18b8:	4918      	ldr	r1, [pc, #96]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    18ba:	4819      	ldr	r0, [pc, #100]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    18bc:	f00a fc54 	bl	c168 <assert_print>
    18c0:	4818      	ldr	r0, [pc, #96]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    18c2:	f00a fc51 	bl	c168 <assert_print>
    18c6:	f44f 618d 	mov.w	r1, #1128	; 0x468
    18ca:	4630      	mov	r0, r6
    18cc:	f00a fc45 	bl	c15a <assert_post_action>
    18d0:	e768      	b.n	17a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x7a4>
	const struct gpio_driver_api *api =
    18d2:	480f      	ldr	r0, [pc, #60]	; (1910 <CONFIG_FPROTECT_BLOCK_SIZE+0x910>)
    18d4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    18d6:	691b      	ldr	r3, [r3, #16]
    18d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    18dc:	4798      	blx	r3
    18de:	e76a      	b.n	17b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7b6>
                printk("SETTING LED VALUE FAILED");
    18e0:	480c      	ldr	r0, [pc, #48]	; (1914 <CONFIG_FPROTECT_BLOCK_SIZE+0x914>)
    18e2:	f00a fabc 	bl	be5e <printk>
    18e6:	e769      	b.n	17bc <CONFIG_FPROTECT_BLOCK_SIZE+0x7bc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    18e8:	4e0b      	ldr	r6, [pc, #44]	; (1918 <CONFIG_FPROTECT_BLOCK_SIZE+0x918>)
    18ea:	f240 4392 	movw	r3, #1170	; 0x492
    18ee:	4632      	mov	r2, r6
    18f0:	490a      	ldr	r1, [pc, #40]	; (191c <CONFIG_FPROTECT_BLOCK_SIZE+0x91c>)
    18f2:	480b      	ldr	r0, [pc, #44]	; (1920 <CONFIG_FPROTECT_BLOCK_SIZE+0x920>)
    18f4:	f00a fc38 	bl	c168 <assert_print>
    18f8:	480a      	ldr	r0, [pc, #40]	; (1924 <CONFIG_FPROTECT_BLOCK_SIZE+0x924>)
    18fa:	f00a fc35 	bl	c168 <assert_print>
    18fe:	f240 4192 	movw	r1, #1170	; 0x492
    1902:	4630      	mov	r0, r6
    1904:	f00a fc29 	bl	c15a <assert_post_action>
    1908:	e760      	b.n	17cc <CONFIG_FPROTECT_BLOCK_SIZE+0x7cc>
		value = (value != 0) ? 0 : 1;
    190a:	2501      	movs	r5, #1
    190c:	e764      	b.n	17d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7d8>
    190e:	bf00      	nop
    1910:	0000d170 	.word	0x0000d170
    1914:	0000d914 	.word	0x0000d914
    1918:	0000d488 	.word	0x0000d488
    191c:	0000d790 	.word	0x0000d790
    1920:	0000d51c 	.word	0x0000d51c
    1924:	0000d7d0 	.word	0x0000d7d0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1928:	4e3a      	ldr	r6, [pc, #232]	; (1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>)
    192a:	f44f 638d 	mov.w	r3, #1128	; 0x468
    192e:	4632      	mov	r2, r6
    1930:	4939      	ldr	r1, [pc, #228]	; (1a18 <CONFIG_FPROTECT_BLOCK_SIZE+0xa18>)
    1932:	483a      	ldr	r0, [pc, #232]	; (1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>)
    1934:	f00a fc18 	bl	c168 <assert_print>
    1938:	4839      	ldr	r0, [pc, #228]	; (1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>)
    193a:	f00a fc15 	bl	c168 <assert_print>
    193e:	f44f 618d 	mov.w	r1, #1128	; 0x468
    1942:	4630      	mov	r0, r6
    1944:	f00a fc09 	bl	c15a <assert_post_action>
    1948:	e74d      	b.n	17e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e6>
	const struct gpio_driver_api *api =
    194a:	4836      	ldr	r0, [pc, #216]	; (1a24 <CONFIG_FPROTECT_BLOCK_SIZE+0xa24>)
    194c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    194e:	691b      	ldr	r3, [r3, #16]
    1950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1954:	4798      	blx	r3
    1956:	e74f      	b.n	17f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f8>
                printk("SETTING LED VALUE FAILED");
    1958:	4833      	ldr	r0, [pc, #204]	; (1a28 <CONFIG_FPROTECT_BLOCK_SIZE+0xa28>)
    195a:	f00a fa80 	bl	be5e <printk>
    195e:	e74e      	b.n	17fe <CONFIG_FPROTECT_BLOCK_SIZE+0x7fe>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1960:	4e2c      	ldr	r6, [pc, #176]	; (1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>)
    1962:	f240 4392 	movw	r3, #1170	; 0x492
    1966:	4632      	mov	r2, r6
    1968:	492b      	ldr	r1, [pc, #172]	; (1a18 <CONFIG_FPROTECT_BLOCK_SIZE+0xa18>)
    196a:	482c      	ldr	r0, [pc, #176]	; (1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>)
    196c:	f00a fbfc 	bl	c168 <assert_print>
    1970:	482b      	ldr	r0, [pc, #172]	; (1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>)
    1972:	f00a fbf9 	bl	c168 <assert_print>
    1976:	f240 4192 	movw	r1, #1170	; 0x492
    197a:	4630      	mov	r0, r6
    197c:	f00a fbed 	bl	c15a <assert_post_action>
    1980:	e745      	b.n	180e <CONFIG_FPROTECT_BLOCK_SIZE+0x80e>
		value = (value != 0) ? 0 : 1;
    1982:	2501      	movs	r5, #1
    1984:	e749      	b.n	181a <CONFIG_FPROTECT_BLOCK_SIZE+0x81a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1986:	4e23      	ldr	r6, [pc, #140]	; (1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>)
    1988:	f44f 638d 	mov.w	r3, #1128	; 0x468
    198c:	4632      	mov	r2, r6
    198e:	4922      	ldr	r1, [pc, #136]	; (1a18 <CONFIG_FPROTECT_BLOCK_SIZE+0xa18>)
    1990:	4822      	ldr	r0, [pc, #136]	; (1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>)
    1992:	f00a fbe9 	bl	c168 <assert_print>
    1996:	4822      	ldr	r0, [pc, #136]	; (1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>)
    1998:	f00a fbe6 	bl	c168 <assert_print>
    199c:	f44f 618d 	mov.w	r1, #1128	; 0x468
    19a0:	4630      	mov	r0, r6
    19a2:	f00a fbda 	bl	c15a <assert_post_action>
    19a6:	e73f      	b.n	1828 <CONFIG_FPROTECT_BLOCK_SIZE+0x828>
	const struct gpio_driver_api *api =
    19a8:	481e      	ldr	r0, [pc, #120]	; (1a24 <CONFIG_FPROTECT_BLOCK_SIZE+0xa24>)
    19aa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    19ac:	691b      	ldr	r3, [r3, #16]
    19ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    19b2:	4798      	blx	r3
    19b4:	e741      	b.n	183a <CONFIG_FPROTECT_BLOCK_SIZE+0x83a>
                printk("SETTING LED VALUE FAILED");
    19b6:	481c      	ldr	r0, [pc, #112]	; (1a28 <CONFIG_FPROTECT_BLOCK_SIZE+0xa28>)
    19b8:	f00a fa51 	bl	be5e <printk>
    19bc:	e740      	b.n	1840 <CONFIG_FPROTECT_BLOCK_SIZE+0x840>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19be:	4e15      	ldr	r6, [pc, #84]	; (1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>)
    19c0:	f240 4392 	movw	r3, #1170	; 0x492
    19c4:	4632      	mov	r2, r6
    19c6:	4914      	ldr	r1, [pc, #80]	; (1a18 <CONFIG_FPROTECT_BLOCK_SIZE+0xa18>)
    19c8:	4814      	ldr	r0, [pc, #80]	; (1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>)
    19ca:	f00a fbcd 	bl	c168 <assert_print>
    19ce:	4814      	ldr	r0, [pc, #80]	; (1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>)
    19d0:	f00a fbca 	bl	c168 <assert_print>
    19d4:	f240 4192 	movw	r1, #1170	; 0x492
    19d8:	4630      	mov	r0, r6
    19da:	f00a fbbe 	bl	c15a <assert_post_action>
    19de:	e737      	b.n	1850 <CONFIG_FPROTECT_BLOCK_SIZE+0x850>
		value = (value != 0) ? 0 : 1;
    19e0:	2501      	movs	r5, #1
    19e2:	e73b      	b.n	185c <CONFIG_FPROTECT_BLOCK_SIZE+0x85c>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    19e4:	4e0b      	ldr	r6, [pc, #44]	; (1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>)
    19e6:	f44f 638d 	mov.w	r3, #1128	; 0x468
    19ea:	4632      	mov	r2, r6
    19ec:	490a      	ldr	r1, [pc, #40]	; (1a18 <CONFIG_FPROTECT_BLOCK_SIZE+0xa18>)
    19ee:	480b      	ldr	r0, [pc, #44]	; (1a1c <CONFIG_FPROTECT_BLOCK_SIZE+0xa1c>)
    19f0:	f00a fbba 	bl	c168 <assert_print>
    19f4:	480a      	ldr	r0, [pc, #40]	; (1a20 <CONFIG_FPROTECT_BLOCK_SIZE+0xa20>)
    19f6:	f00a fbb7 	bl	c168 <assert_print>
    19fa:	f44f 618d 	mov.w	r1, #1128	; 0x468
    19fe:	4630      	mov	r0, r6
    1a00:	f00a fbab 	bl	c15a <assert_post_action>
    1a04:	e731      	b.n	186a <CONFIG_FPROTECT_BLOCK_SIZE+0x86a>
	const struct gpio_driver_api *api =
    1a06:	4807      	ldr	r0, [pc, #28]	; (1a24 <CONFIG_FPROTECT_BLOCK_SIZE+0xa24>)
    1a08:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    1a0a:	691b      	ldr	r3, [r3, #16]
    1a0c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1a10:	4798      	blx	r3
    1a12:	e733      	b.n	187c <CONFIG_FPROTECT_BLOCK_SIZE+0x87c>
    1a14:	0000d488 	.word	0x0000d488
    1a18:	0000d790 	.word	0x0000d790
    1a1c:	0000d51c 	.word	0x0000d51c
    1a20:	0000d7d0 	.word	0x0000d7d0
    1a24:	0000d170 	.word	0x0000d170
    1a28:	0000d914 	.word	0x0000d914

00001a2c <main>:
{
    1a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2e:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1a30:	487e      	ldr	r0, [pc, #504]	; (1c2c <main+0x200>)
    1a32:	f00b fa29 	bl	ce88 <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1a36:	b118      	cbz	r0, 1a40 <main+0x14>
    1a38:	487c      	ldr	r0, [pc, #496]	; (1c2c <main+0x200>)
    1a3a:	f00b fa25 	bl	ce88 <z_device_is_ready>
    1a3e:	b920      	cbnz	r0, 1a4a <main+0x1e>
        printk("Error: leds are not ready\n");
    1a40:	487b      	ldr	r0, [pc, #492]	; (1c30 <main+0x204>)
    1a42:	f00a fa0c 	bl	be5e <printk>
}
    1a46:	b009      	add	sp, #36	; 0x24
    1a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a4a:	4878      	ldr	r0, [pc, #480]	; (1c2c <main+0x200>)
    1a4c:	f00b fa1c 	bl	ce88 <z_device_is_ready>
    if (!device_is_ready(led0.port) || !device_is_ready(led1.port) || !device_is_ready(led2.port) || !device_is_ready(led3.port))
    1a50:	2800      	cmp	r0, #0
    1a52:	d0f5      	beq.n	1a40 <main+0x14>
    1a54:	4875      	ldr	r0, [pc, #468]	; (1c2c <main+0x200>)
    1a56:	f00b fa17 	bl	ce88 <z_device_is_ready>
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d0f0      	beq.n	1a40 <main+0x14>
    1a5e:	4873      	ldr	r0, [pc, #460]	; (1c2c <main+0x200>)
    1a60:	f00b fa12 	bl	ce88 <z_device_is_ready>
    if (!device_is_ready(button.port))
    1a64:	2800      	cmp	r0, #0
    1a66:	f000 80b7 	beq.w	1bd8 <main+0x1ac>
    ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_INACTIVE);
    1a6a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a6e:	4871      	ldr	r0, [pc, #452]	; (1c34 <main+0x208>)
    1a70:	f00a f97f 	bl	bd72 <gpio_pin_configure_dt>
    if (ret < 0)
    1a74:	2800      	cmp	r0, #0
    1a76:	dbe6      	blt.n	1a46 <main+0x1a>
    ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_INACTIVE);
    1a78:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a7c:	486e      	ldr	r0, [pc, #440]	; (1c38 <main+0x20c>)
    1a7e:	f00a f978 	bl	bd72 <gpio_pin_configure_dt>
    if (ret < 0)
    1a82:	2800      	cmp	r0, #0
    1a84:	dbdf      	blt.n	1a46 <main+0x1a>
    ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_INACTIVE);
    1a86:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a8a:	486c      	ldr	r0, [pc, #432]	; (1c3c <main+0x210>)
    1a8c:	f00a f971 	bl	bd72 <gpio_pin_configure_dt>
    if (ret < 0)
    1a90:	2800      	cmp	r0, #0
    1a92:	dbd8      	blt.n	1a46 <main+0x1a>
    ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_INACTIVE);
    1a94:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    1a98:	4869      	ldr	r0, [pc, #420]	; (1c40 <main+0x214>)
    1a9a:	f00a f96a 	bl	bd72 <gpio_pin_configure_dt>
    if (ret < 0)
    1a9e:	2800      	cmp	r0, #0
    1aa0:	dbd1      	blt.n	1a46 <main+0x1a>
    ret = gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_PULL_UP);
    1aa2:	4968      	ldr	r1, [pc, #416]	; (1c44 <main+0x218>)
    1aa4:	4868      	ldr	r0, [pc, #416]	; (1c48 <main+0x21c>)
    1aa6:	f00a f964 	bl	bd72 <gpio_pin_configure_dt>
    if (ret < 0)
    1aaa:	1e01      	subs	r1, r0, #0
    1aac:	f2c0 809a 	blt.w	1be4 <main+0x1b8>
	const struct gpio_driver_api *api =
    1ab0:	4b5e      	ldr	r3, [pc, #376]	; (1c2c <main+0x200>)
    1ab2:	689c      	ldr	r4, [r3, #8]
	const struct gpio_driver_config *const cfg =
    1ab4:	685a      	ldr	r2, [r3, #4]
	const struct gpio_driver_data *const data =
    1ab6:	691d      	ldr	r5, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1ab8:	6813      	ldr	r3, [r2, #0]
    1aba:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1abe:	f000 8095 	beq.w	1bec <main+0x1c0>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1ac2:	682b      	ldr	r3, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    1ac4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1ac8:	f040 80a1 	bne.w	1c0e <main+0x1e2>
    1acc:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1ad0:	69a4      	ldr	r4, [r4, #24]
    1ad2:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    1ad6:	f002 72a0 	and.w	r2, r2, #20971520	; 0x1400000
    1ada:	210b      	movs	r1, #11
    1adc:	4853      	ldr	r0, [pc, #332]	; (1c2c <main+0x200>)
    1ade:	47a0      	blx	r4
    if (ret < 0)
    1ae0:	1e01      	subs	r1, r0, #0
    1ae2:	f2c0 8097 	blt.w	1c14 <main+0x1e8>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1ae6:	4b59      	ldr	r3, [pc, #356]	; (1c4c <main+0x220>)
    1ae8:	4a59      	ldr	r2, [pc, #356]	; (1c50 <main+0x224>)
    1aea:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    1aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1af0:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
    1af2:	4b4e      	ldr	r3, [pc, #312]	; (1c2c <main+0x200>)
    1af4:	689b      	ldr	r3, [r3, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1af6:	69db      	ldr	r3, [r3, #28]
    1af8:	b11b      	cbz	r3, 1b02 <main+0xd6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1afa:	2201      	movs	r2, #1
    1afc:	4953      	ldr	r1, [pc, #332]	; (1c4c <main+0x220>)
    1afe:	484b      	ldr	r0, [pc, #300]	; (1c2c <main+0x200>)
    1b00:	4798      	blx	r3
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1b02:	4854      	ldr	r0, [pc, #336]	; (1c54 <main+0x228>)
    1b04:	f006 ff9a 	bl	8a3c <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
    1b08:	4b53      	ldr	r3, [pc, #332]	; (1c58 <main+0x22c>)
    1b0a:	6018      	str	r0, [r3, #0]
    if (!adc_dev)
    1b0c:	2800      	cmp	r0, #0
    1b0e:	f000 8085 	beq.w	1c1c <main+0x1f0>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    1b12:	4b51      	ldr	r3, [pc, #324]	; (1c58 <main+0x22c>)
    1b14:	6818      	ldr	r0, [r3, #0]
	const struct adc_driver_api *api =
    1b16:	6883      	ldr	r3, [r0, #8]
	return api->channel_setup(dev, channel_cfg);
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	4950      	ldr	r1, [pc, #320]	; (1c5c <main+0x230>)
    1b1c:	4798      	blx	r3
    if (err)
    1b1e:	4601      	mov	r1, r0
    1b20:	2800      	cmp	r0, #0
    1b22:	d17f      	bne.n	1c24 <main+0x1f8>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    1b24:	2501      	movs	r5, #1
    1b26:	4b4e      	ldr	r3, [pc, #312]	; (1c60 <main+0x234>)
    1b28:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    1b2a:	484e      	ldr	r0, [pc, #312]	; (1c64 <main+0x238>)
    1b2c:	f003 fbac 	bl	5288 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1b30:	462a      	mov	r2, r5
    1b32:	2100      	movs	r1, #0
    1b34:	484c      	ldr	r0, [pc, #304]	; (1c68 <main+0x23c>)
    1b36:	f00b fa3d 	bl	cfb4 <z_impl_k_sem_init>
    1b3a:	462a      	mov	r2, r5
    1b3c:	2100      	movs	r1, #0
    1b3e:	484b      	ldr	r0, [pc, #300]	; (1c6c <main+0x240>)
    1b40:	f00b fa38 	bl	cfb4 <z_impl_k_sem_init>
    1b44:	462a      	mov	r2, r5
    1b46:	2100      	movs	r1, #0
    1b48:	4849      	ldr	r0, [pc, #292]	; (1c70 <main+0x244>)
    1b4a:	f00b fa33 	bl	cfb4 <z_impl_k_sem_init>
                                        NULL, NULL, NULL, thread_sensor_prio, 0, K_NO_WAIT);
    1b4e:	2600      	movs	r6, #0
    1b50:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1b52:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b56:	2400      	movs	r4, #0
    1b58:	9404      	str	r4, [sp, #16]
    1b5a:	9503      	str	r5, [sp, #12]
    1b5c:	9402      	str	r4, [sp, #8]
    1b5e:	9401      	str	r4, [sp, #4]
    1b60:	9400      	str	r4, [sp, #0]
    1b62:	4b44      	ldr	r3, [pc, #272]	; (1c74 <main+0x248>)
    1b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b68:	4943      	ldr	r1, [pc, #268]	; (1c78 <main+0x24c>)
    1b6a:	4844      	ldr	r0, [pc, #272]	; (1c7c <main+0x250>)
    1b6c:	f007 fb90 	bl	9290 <z_impl_k_thread_create>
    thread_sensor_tid = k_thread_create(&thread_sensor_data, thread_sensor_stack,
    1b70:	4b43      	ldr	r3, [pc, #268]	; (1c80 <main+0x254>)
    1b72:	6018      	str	r0, [r3, #0]
    1b74:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b78:	9404      	str	r4, [sp, #16]
    1b7a:	9503      	str	r5, [sp, #12]
    1b7c:	9402      	str	r4, [sp, #8]
    1b7e:	9401      	str	r4, [sp, #4]
    1b80:	9400      	str	r4, [sp, #0]
    1b82:	4b40      	ldr	r3, [pc, #256]	; (1c84 <main+0x258>)
    1b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b88:	493f      	ldr	r1, [pc, #252]	; (1c88 <main+0x25c>)
    1b8a:	4840      	ldr	r0, [pc, #256]	; (1c8c <main+0x260>)
    1b8c:	f007 fb80 	bl	9290 <z_impl_k_thread_create>
    thread_processing_tid = k_thread_create(&thread_processing_data, thread_processing_stack,
    1b90:	4b3f      	ldr	r3, [pc, #252]	; (1c90 <main+0x264>)
    1b92:	6018      	str	r0, [r3, #0]
    1b94:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1b98:	9404      	str	r4, [sp, #16]
    1b9a:	9503      	str	r5, [sp, #12]
    1b9c:	9402      	str	r4, [sp, #8]
    1b9e:	9401      	str	r4, [sp, #4]
    1ba0:	9400      	str	r4, [sp, #0]
    1ba2:	4b3c      	ldr	r3, [pc, #240]	; (1c94 <main+0x268>)
    1ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1ba8:	493b      	ldr	r1, [pc, #236]	; (1c98 <main+0x26c>)
    1baa:	483c      	ldr	r0, [pc, #240]	; (1c9c <main+0x270>)
    1bac:	f007 fb70 	bl	9290 <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    1bb0:	4b3b      	ldr	r3, [pc, #236]	; (1ca0 <main+0x274>)
    1bb2:	6018      	str	r0, [r3, #0]
    1bb4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1bb8:	9404      	str	r4, [sp, #16]
    1bba:	2302      	movs	r3, #2
    1bbc:	9303      	str	r3, [sp, #12]
    1bbe:	9402      	str	r4, [sp, #8]
    1bc0:	9401      	str	r4, [sp, #4]
    1bc2:	9400      	str	r4, [sp, #0]
    1bc4:	4b37      	ldr	r3, [pc, #220]	; (1ca4 <main+0x278>)
    1bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1bca:	4937      	ldr	r1, [pc, #220]	; (1ca8 <main+0x27c>)
    1bcc:	4837      	ldr	r0, [pc, #220]	; (1cac <main+0x280>)
    1bce:	f007 fb5f 	bl	9290 <z_impl_k_thread_create>
    thread_button_tid = k_thread_create(&thread_button_data, thread_button_stack,
    1bd2:	4b37      	ldr	r3, [pc, #220]	; (1cb0 <main+0x284>)
    1bd4:	6018      	str	r0, [r3, #0]
   return;
    1bd6:	e736      	b.n	1a46 <main+0x1a>
        printk("Error: button device %s is not ready\n", button.port->name);
    1bd8:	4b14      	ldr	r3, [pc, #80]	; (1c2c <main+0x200>)
    1bda:	6819      	ldr	r1, [r3, #0]
    1bdc:	4835      	ldr	r0, [pc, #212]	; (1cb4 <main+0x288>)
    1bde:	f00a f93e 	bl	be5e <printk>
        return;
    1be2:	e730      	b.n	1a46 <main+0x1a>
        printk("Error: gpio_pin_configure_dt failed for button, error:%d", ret);
    1be4:	4834      	ldr	r0, [pc, #208]	; (1cb8 <main+0x28c>)
    1be6:	f00a f93a 	bl	be5e <printk>
        return;
    1bea:	e72c      	b.n	1a46 <main+0x1a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1bec:	4e33      	ldr	r6, [pc, #204]	; (1cbc <main+0x290>)
    1bee:	f240 2375 	movw	r3, #629	; 0x275
    1bf2:	4632      	mov	r2, r6
    1bf4:	4932      	ldr	r1, [pc, #200]	; (1cc0 <main+0x294>)
    1bf6:	4833      	ldr	r0, [pc, #204]	; (1cc4 <main+0x298>)
    1bf8:	f00a fab6 	bl	c168 <assert_print>
    1bfc:	4832      	ldr	r0, [pc, #200]	; (1cc8 <main+0x29c>)
    1bfe:	f00a fab3 	bl	c168 <assert_print>
    1c02:	f240 2175 	movw	r1, #629	; 0x275
    1c06:	4630      	mov	r0, r6
    1c08:	f00a faa7 	bl	c15a <assert_post_action>
    1c0c:	e759      	b.n	1ac2 <main+0x96>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    1c0e:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
    1c12:	e75d      	b.n	1ad0 <main+0xa4>
        printk("Error: gpio_pin_interrupt_configure_dt failed for button, error:%d", ret);
    1c14:	482d      	ldr	r0, [pc, #180]	; (1ccc <main+0x2a0>)
    1c16:	f00a f922 	bl	be5e <printk>
        return;
    1c1a:	e714      	b.n	1a46 <main+0x1a>
        printk("ADC device_get_binding() failed\n");
    1c1c:	482c      	ldr	r0, [pc, #176]	; (1cd0 <main+0x2a4>)
    1c1e:	f00a f91e 	bl	be5e <printk>
    1c22:	e776      	b.n	1b12 <main+0xe6>
        printk("adc_channel_setup() failed with error code %d\n", err);
    1c24:	482b      	ldr	r0, [pc, #172]	; (1cd4 <main+0x2a8>)
    1c26:	f00a f91a 	bl	be5e <printk>
    1c2a:	e77b      	b.n	1b24 <main+0xf8>
    1c2c:	0000d170 	.word	0x0000d170
    1c30:	0000d9c0 	.word	0x0000d9c0
    1c34:	0000dbf8 	.word	0x0000dbf8
    1c38:	0000dc00 	.word	0x0000dc00
    1c3c:	0000dc08 	.word	0x0000dc08
    1c40:	0000dc10 	.word	0x0000dc10
    1c44:	00010010 	.word	0x00010010
    1c48:	0000dbf0 	.word	0x0000dbf0
    1c4c:	200006b0 	.word	0x200006b0
    1c50:	000007a1 	.word	0x000007a1
    1c54:	0000da84 	.word	0x0000da84
    1c58:	200006a8 	.word	0x200006a8
    1c5c:	0000dc18 	.word	0x0000dc18
    1c60:	40007000 	.word	0x40007000
    1c64:	0000dae0 	.word	0x0000dae0
    1c68:	200006bc 	.word	0x200006bc
    1c6c:	200006cc 	.word	0x200006cc
    1c70:	200006dc 	.word	0x200006dc
    1c74:	000009d5 	.word	0x000009d5
    1c78:	20001460 	.word	0x20001460
    1c7c:	20000470 	.word	0x20000470
    1c80:	200006f8 	.word	0x200006f8
    1c84:	00001cd9 	.word	0x00001cd9
    1c88:	20001880 	.word	0x20001880
    1c8c:	200003c0 	.word	0x200003c0
    1c90:	200006f4 	.word	0x200006f4
    1c94:	00000f31 	.word	0x00000f31
    1c98:	20001ca0 	.word	0x20001ca0
    1c9c:	20000310 	.word	0x20000310
    1ca0:	200006f0 	.word	0x200006f0
    1ca4:	00000b5d 	.word	0x00000b5d
    1ca8:	200020c0 	.word	0x200020c0
    1cac:	20000260 	.word	0x20000260
    1cb0:	200006ec 	.word	0x200006ec
    1cb4:	0000d9dc 	.word	0x0000d9dc
    1cb8:	0000da04 	.word	0x0000da04
    1cbc:	0000d488 	.word	0x0000d488
    1cc0:	0000d790 	.word	0x0000d790
    1cc4:	0000d51c 	.word	0x0000d51c
    1cc8:	0000d7d0 	.word	0x0000d7d0
    1ccc:	0000da40 	.word	0x0000da40
    1cd0:	0000da8c 	.word	0x0000da8c
    1cd4:	0000dab0 	.word	0x0000dab0

00001cd8 <thread_processing_code>:
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	b08f      	sub	sp, #60	; 0x3c
    uint16_t precedents[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    1cdc:	2500      	movs	r5, #0
    1cde:	9509      	str	r5, [sp, #36]	; 0x24
    1ce0:	950a      	str	r5, [sp, #40]	; 0x28
    1ce2:	950b      	str	r5, [sp, #44]	; 0x2c
    1ce4:	950c      	str	r5, [sp, #48]	; 0x30
    1ce6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
    1cea:	483b      	ldr	r0, [pc, #236]	; (1dd8 <thread_processing_code+0x100>)
    1cec:	f00a f8b7 	bl	be5e <printk>
    int iterations = 0;
    1cf0:	462c      	mov	r4, r5
    1cf2:	e03d      	b.n	1d70 <thread_processing_code+0x98>
            uint16_t avg = precedentsAverage(precedents, current_read, 9);
    1cf4:	2209      	movs	r2, #9
    1cf6:	4631      	mov	r1, r6
    1cf8:	a809      	add	r0, sp, #36	; 0x24
    1cfa:	f00a f845 	bl	bd88 <precedentsAverage>
    1cfe:	b287      	uxth	r7, r0
            bc = avg;
    1d00:	4b36      	ldr	r3, [pc, #216]	; (1ddc <thread_processing_code+0x104>)
    1d02:	801f      	strh	r7, [r3, #0]
	z_impl_k_sem_give(sem);
    1d04:	4836      	ldr	r0, [pc, #216]	; (1de0 <thread_processing_code+0x108>)
    1d06:	f007 fdaf 	bl	9868 <z_impl_k_sem_give>
            printk("avg([%d,%d,%d,%d,%d,%d,%d,%d,%d,%d]]) = %d\n", precedents[0], precedents[1], precedents[2], precedents[3], precedents[4], precedents[5], precedents[6], precedents[7], precedents[8], current_read, avg);
    1d0a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    1d0e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    1d12:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    1d16:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1d1a:	f8bd c032 	ldrh.w	ip, [sp, #50]	; 0x32
    1d1e:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
    1d22:	9707      	str	r7, [sp, #28]
    1d24:	9606      	str	r6, [sp, #24]
    1d26:	f8cd e014 	str.w	lr, [sp, #20]
    1d2a:	f8cd c010 	str.w	ip, [sp, #16]
    1d2e:	9003      	str	r0, [sp, #12]
    1d30:	9102      	str	r1, [sp, #8]
    1d32:	9201      	str	r2, [sp, #4]
    1d34:	9300      	str	r3, [sp, #0]
    1d36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1d3a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
    1d3e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    1d42:	4828      	ldr	r0, [pc, #160]	; (1de4 <thread_processing_code+0x10c>)
    1d44:	f00a f88b 	bl	be5e <printk>
            precedents[iterations % 9] = current_read;
    1d48:	4a27      	ldr	r2, [pc, #156]	; (1de8 <thread_processing_code+0x110>)
    1d4a:	fb82 3204 	smull	r3, r2, r2, r4
    1d4e:	17e3      	asrs	r3, r4, #31
    1d50:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    1d54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1d58:	1ae3      	subs	r3, r4, r3
    1d5a:	aa0e      	add	r2, sp, #56	; 0x38
    1d5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    1d60:	f823 6c14 	strh.w	r6, [r3, #-20]
        iterations++;
    1d64:	3401      	adds	r4, #1
        printk("Thread B set bc value to: %d \n", bc);
    1d66:	4b1d      	ldr	r3, [pc, #116]	; (1ddc <thread_processing_code+0x104>)
    1d68:	8819      	ldrh	r1, [r3, #0]
    1d6a:	4820      	ldr	r0, [pc, #128]	; (1dec <thread_processing_code+0x114>)
    1d6c:	f00a f877 	bl	be5e <printk>
	return z_impl_k_sem_take(sem, timeout);
    1d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1d78:	481d      	ldr	r0, [pc, #116]	; (1df0 <thread_processing_code+0x118>)
    1d7a:	f007 fdb9 	bl	98f0 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
    1d7e:	3501      	adds	r5, #1
	return z_impl_k_uptime_ticks();
    1d80:	f00b f96e 	bl	d060 <z_impl_k_uptime_ticks>
    1d84:	4602      	mov	r2, r0
    1d86:	014b      	lsls	r3, r1, #5
    1d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    1d8c:	0140      	lsls	r0, r0, #5
    1d8e:	1a80      	subs	r0, r0, r2
    1d90:	eb63 0301 	sbc.w	r3, r3, r1
    1d94:	009b      	lsls	r3, r3, #2
    1d96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    1d9a:	0080      	lsls	r0, r0, #2
    1d9c:	1880      	adds	r0, r0, r2
    1d9e:	eb43 0301 	adc.w	r3, r3, r1
    1da2:	00db      	lsls	r3, r3, #3
    1da4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    1da8:	f3c0 3010 	ubfx	r0, r0, #12, #17
    1dac:	ea40 4243 	orr.w	r2, r0, r3, lsl #17
    1db0:	0bdb      	lsrs	r3, r3, #15
    1db2:	4629      	mov	r1, r5
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <thread_processing_code+0x11c>)
    1db6:	f00a f852 	bl	be5e <printk>
        printk("Task B read ab value: %d\n", ab);
    1dba:	4e0f      	ldr	r6, [pc, #60]	; (1df8 <thread_processing_code+0x120>)
    1dbc:	8831      	ldrh	r1, [r6, #0]
    1dbe:	480f      	ldr	r0, [pc, #60]	; (1dfc <thread_processing_code+0x124>)
    1dc0:	f00a f84d 	bl	be5e <printk>
        current_read = ab;
    1dc4:	8836      	ldrh	r6, [r6, #0]
        if (iterations > 8)
    1dc6:	2c08      	cmp	r4, #8
    1dc8:	dc94      	bgt.n	1cf4 <thread_processing_code+0x1c>
            precedents[iterations] = current_read;
    1dca:	ab0e      	add	r3, sp, #56	; 0x38
    1dcc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1dd0:	f823 6c14 	strh.w	r6, [r3, #-20]
    1dd4:	e7c6      	b.n	1d64 <thread_processing_code+0x8c>
    1dd6:	bf00      	nop
    1dd8:	0000db14 	.word	0x0000db14
    1ddc:	200001de 	.word	0x200001de
    1de0:	200006cc 	.word	0x200006cc
    1de4:	0000dba4 	.word	0x0000dba4
    1de8:	38e38e39 	.word	0x38e38e39
    1dec:	0000dbd0 	.word	0x0000dbd0
    1df0:	200006bc 	.word	0x200006bc
    1df4:	0000db50 	.word	0x0000db50
    1df8:	200001dc 	.word	0x200001dc
    1dfc:	0000db88 	.word	0x0000db88

00001e00 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e04:	b08d      	sub	sp, #52	; 0x34
    1e06:	9205      	str	r2, [sp, #20]
    1e08:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1e0a:	4613      	mov	r3, r2
    1e0c:	f002 0204 	and.w	r2, r2, #4
    1e10:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1e12:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1e16:	f010 0303 	ands.w	r3, r0, #3
    1e1a:	9302      	str	r3, [sp, #8]
    1e1c:	f040 8293 	bne.w	2346 <cbvprintf_package+0x546>
    1e20:	4607      	mov	r7, r0
    1e22:	468a      	mov	sl, r1
    1e24:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1e26:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1e28:	2800      	cmp	r0, #0
    1e2a:	d041      	beq.n	1eb0 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1e2c:	b127      	cbz	r7, 1e38 <cbvprintf_package+0x38>
    1e2e:	1be3      	subs	r3, r4, r7
    1e30:	3304      	adds	r3, #4
    1e32:	4553      	cmp	r3, sl
    1e34:	f200 828a 	bhi.w	234c <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    1e38:	9b03      	ldr	r3, [sp, #12]
    1e3a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1e3c:	f8dd b008 	ldr.w	fp, [sp, #8]
    1e40:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1e44:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    1e48:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    1e4a:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1e4e:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1e50:	b10f      	cbz	r7, 1e56 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    1e52:	9b03      	ldr	r3, [sp, #12]
    1e54:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1e56:	1e53      	subs	r3, r2, #1
    1e58:	9307      	str	r3, [sp, #28]
    1e5a:	2a00      	cmp	r2, #0
    1e5c:	f340 80b7 	ble.w	1fce <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1e60:	9b05      	ldr	r3, [sp, #20]
    1e62:	f013 0202 	ands.w	r2, r3, #2
    1e66:	d021      	beq.n	1eac <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1e68:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1e6a:	1be1      	subs	r1, r4, r7
    1e6c:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1e6e:	b11a      	cbz	r2, 1e78 <cbvprintf_package+0x78>
    1e70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1e74:	f080 80bf 	bcs.w	1ff6 <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1e78:	f1bb 0f0f 	cmp.w	fp, #15
    1e7c:	f200 80ce 	bhi.w	201c <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1e80:	2f00      	cmp	r7, #0
    1e82:	f000 80e2 	beq.w	204a <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    1e86:	b2db      	uxtb	r3, r3
    1e88:	aa0c      	add	r2, sp, #48	; 0x30
    1e8a:	445a      	add	r2, fp
    1e8c:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1e90:	2800      	cmp	r0, #0
    1e92:	f000 80d6 	beq.w	2042 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1e9a:	aa0c      	add	r2, sp, #48	; 0x30
    1e9c:	445a      	add	r2, fp
    1e9e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    1ea2:	9b04      	ldr	r3, [sp, #16]
    1ea4:	3301      	adds	r3, #1
    1ea6:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    1ea8:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    1eac:	3404      	adds	r4, #4
    1eae:	e0f6      	b.n	209e <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1eb0:	f001 0a07 	and.w	sl, r1, #7
    1eb4:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1eb6:	f1ca 0a08 	rsb	sl, sl, #8
    1eba:	e7b7      	b.n	1e2c <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    1ebc:	2b25      	cmp	r3, #37	; 0x25
    1ebe:	f040 80ed 	bne.w	209c <cbvprintf_package+0x29c>
				parsing = true;
    1ec2:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    1ec4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    1ec8:	46c1      	mov	r9, r8
			continue;
    1eca:	e0e7      	b.n	209c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    1ecc:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    1ed0:	46c1      	mov	r9, r8
			continue;
    1ed2:	e0e3      	b.n	209c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    1ed4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    1ed8:	46c1      	mov	r9, r8
			continue;
    1eda:	e0df      	b.n	209c <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    1edc:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    1ee0:	46c1      	mov	r9, r8
			continue;
    1ee2:	e0db      	b.n	209c <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    1ee4:	782a      	ldrb	r2, [r5, #0]
    1ee6:	2a6c      	cmp	r2, #108	; 0x6c
    1ee8:	d026      	beq.n	1f38 <cbvprintf_package+0x138>
			parsing = false;
    1eea:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    1eec:	eb04 0208 	add.w	r2, r4, r8
    1ef0:	3a01      	subs	r2, #1
    1ef2:	f1c8 0100 	rsb	r1, r8, #0
    1ef6:	400a      	ands	r2, r1
    1ef8:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1efa:	b127      	cbz	r7, 1f06 <cbvprintf_package+0x106>
    1efc:	1bd1      	subs	r1, r2, r7
    1efe:	4449      	add	r1, r9
    1f00:	4551      	cmp	r1, sl
    1f02:	f200 8226 	bhi.w	2352 <cbvprintf_package+0x552>
		if (*fmt == 's') {
    1f06:	2b73      	cmp	r3, #115	; 0x73
    1f08:	d059      	beq.n	1fbe <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    1f0a:	f1b9 0f04 	cmp.w	r9, #4
    1f0e:	f000 80a8 	beq.w	2062 <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1f12:	f1b9 0f08 	cmp.w	r9, #8
    1f16:	f040 80ac 	bne.w	2072 <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    1f1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f1c:	3307      	adds	r3, #7
    1f1e:	f023 0307 	bic.w	r3, r3, #7
    1f22:	f103 0108 	add.w	r1, r3, #8
    1f26:	9116      	str	r1, [sp, #88]	; 0x58
    1f28:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    1f2c:	b10f      	cbz	r7, 1f32 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    1f2e:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    1f32:	f102 0408 	add.w	r4, r2, #8
    1f36:	e0b1      	b.n	209c <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    1f38:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    1f3c:	2a6c      	cmp	r2, #108	; 0x6c
    1f3e:	d004      	beq.n	1f4a <cbvprintf_package+0x14a>
			parsing = false;
    1f40:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    1f42:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    1f46:	46c1      	mov	r9, r8
    1f48:	e7d0      	b.n	1eec <cbvprintf_package+0xec>
			parsing = false;
    1f4a:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    1f4c:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    1f50:	46c1      	mov	r9, r8
    1f52:	e7cb      	b.n	1eec <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    1f54:	782b      	ldrb	r3, [r5, #0]
    1f56:	2b4c      	cmp	r3, #76	; 0x4c
    1f58:	d01c      	beq.n	1f94 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    1f5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f5c:	3307      	adds	r3, #7
    1f5e:	f023 0307 	bic.w	r3, r3, #7
    1f62:	f103 0208 	add.w	r2, r3, #8
    1f66:	9216      	str	r2, [sp, #88]	; 0x58
    1f68:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    1f6c:	1de2      	adds	r2, r4, #7
    1f6e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    1f72:	b147      	cbz	r7, 1f86 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    1f74:	1bd3      	subs	r3, r2, r7
    1f76:	3308      	adds	r3, #8
    1f78:	4553      	cmp	r3, sl
    1f7a:	d815      	bhi.n	1fa8 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    1f7c:	782b      	ldrb	r3, [r5, #0]
    1f7e:	2b4c      	cmp	r3, #76	; 0x4c
    1f80:	d015      	beq.n	1fae <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    1f82:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    1f86:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    1f8a:	2600      	movs	r6, #0
			continue;
    1f8c:	f04f 0808 	mov.w	r8, #8
    1f90:	46c1      	mov	r9, r8
    1f92:	e083      	b.n	209c <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    1f94:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f96:	3307      	adds	r3, #7
    1f98:	f023 0307 	bic.w	r3, r3, #7
    1f9c:	f103 0208 	add.w	r2, r3, #8
    1fa0:	9216      	str	r2, [sp, #88]	; 0x58
    1fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    1fa6:	e7e1      	b.n	1f6c <cbvprintf_package+0x16c>
					return -ENOSPC;
    1fa8:	f06f 001b 	mvn.w	r0, #27
    1fac:	e1c8      	b.n	2340 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    1fae:	e9c2 0100 	strd	r0, r1, [r2]
    1fb2:	e7e8      	b.n	1f86 <cbvprintf_package+0x186>
			parsing = false;
    1fb4:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    1fb6:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    1fba:	46c1      	mov	r9, r8
    1fbc:	e796      	b.n	1eec <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    1fbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1fc0:	1d1a      	adds	r2, r3, #4
    1fc2:	9216      	str	r2, [sp, #88]	; 0x58
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1fc8:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    1fca:	4665      	mov	r5, ip
    1fcc:	e740      	b.n	1e50 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1fce:	4bbb      	ldr	r3, [pc, #748]	; (22bc <cbvprintf_package+0x4bc>)
    1fd0:	9a03      	ldr	r2, [sp, #12]
    1fd2:	429a      	cmp	r2, r3
    1fd4:	d304      	bcc.n	1fe0 <cbvprintf_package+0x1e0>
    1fd6:	4bba      	ldr	r3, [pc, #744]	; (22c0 <cbvprintf_package+0x4c0>)
    1fd8:	429a      	cmp	r2, r3
    1fda:	d30a      	bcc.n	1ff2 <cbvprintf_package+0x1f2>
    1fdc:	2300      	movs	r3, #0
    1fde:	e000      	b.n	1fe2 <cbvprintf_package+0x1e2>
    1fe0:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	f47f af3c 	bne.w	1e60 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    1fe8:	9b05      	ldr	r3, [sp, #20]
    1fea:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1fee:	2000      	movs	r0, #0
    1ff0:	e73b      	b.n	1e6a <cbvprintf_package+0x6a>
    1ff2:	2301      	movs	r3, #1
    1ff4:	e7f5      	b.n	1fe2 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    1ff6:	4cb3      	ldr	r4, [pc, #716]	; (22c4 <cbvprintf_package+0x4c4>)
    1ff8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1ffc:	4622      	mov	r2, r4
    1ffe:	49b2      	ldr	r1, [pc, #712]	; (22c8 <cbvprintf_package+0x4c8>)
    2000:	48b2      	ldr	r0, [pc, #712]	; (22cc <cbvprintf_package+0x4cc>)
    2002:	f00a f8b1 	bl	c168 <assert_print>
    2006:	48b2      	ldr	r0, [pc, #712]	; (22d0 <cbvprintf_package+0x4d0>)
    2008:	f00a f8ae 	bl	c168 <assert_print>
    200c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    2010:	4620      	mov	r0, r4
    2012:	f00a f8a2 	bl	c15a <assert_post_action>
					return -EINVAL;
    2016:	f06f 0015 	mvn.w	r0, #21
    201a:	e191      	b.n	2340 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    201c:	4ca9      	ldr	r4, [pc, #676]	; (22c4 <cbvprintf_package+0x4c4>)
    201e:	f240 13f5 	movw	r3, #501	; 0x1f5
    2022:	4622      	mov	r2, r4
    2024:	49a8      	ldr	r1, [pc, #672]	; (22c8 <cbvprintf_package+0x4c8>)
    2026:	48a9      	ldr	r0, [pc, #676]	; (22cc <cbvprintf_package+0x4cc>)
    2028:	f00a f89e 	bl	c168 <assert_print>
    202c:	48a9      	ldr	r0, [pc, #676]	; (22d4 <cbvprintf_package+0x4d4>)
    202e:	f00a f89b 	bl	c168 <assert_print>
    2032:	f240 11f5 	movw	r1, #501	; 0x1f5
    2036:	4620      	mov	r0, r4
    2038:	f00a f88f 	bl	c15a <assert_post_action>
					return -EINVAL;
    203c:	f06f 0015 	mvn.w	r0, #21
    2040:	e17e      	b.n	2340 <cbvprintf_package+0x540>
						s_rw_cnt++;
    2042:	9b06      	ldr	r3, [sp, #24]
    2044:	3301      	adds	r3, #1
    2046:	9306      	str	r3, [sp, #24]
    2048:	e72e      	b.n	1ea8 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    204a:	b908      	cbnz	r0, 2050 <cbvprintf_package+0x250>
    204c:	9b01      	ldr	r3, [sp, #4]
    204e:	b113      	cbz	r3, 2056 <cbvprintf_package+0x256>
					len += 1;
    2050:	f10a 0a01 	add.w	sl, sl, #1
    2054:	e728      	b.n	1ea8 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    2056:	9803      	ldr	r0, [sp, #12]
    2058:	f00a fa00 	bl	c45c <strlen>
    205c:	1c83      	adds	r3, r0, #2
    205e:	449a      	add	sl, r3
    2060:	e722      	b.n	1ea8 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    2062:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2064:	1d19      	adds	r1, r3, #4
    2066:	9116      	str	r1, [sp, #88]	; 0x58
    2068:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    206a:	b107      	cbz	r7, 206e <cbvprintf_package+0x26e>
				*(int *)buf = v;
    206c:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    206e:	1d14      	adds	r4, r2, #4
    2070:	e014      	b.n	209c <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    2072:	4c94      	ldr	r4, [pc, #592]	; (22c4 <cbvprintf_package+0x4c4>)
    2074:	f240 2331 	movw	r3, #561	; 0x231
    2078:	4622      	mov	r2, r4
    207a:	4993      	ldr	r1, [pc, #588]	; (22c8 <cbvprintf_package+0x4c8>)
    207c:	4893      	ldr	r0, [pc, #588]	; (22cc <cbvprintf_package+0x4cc>)
    207e:	f00a f873 	bl	c168 <assert_print>
    2082:	4649      	mov	r1, r9
    2084:	4894      	ldr	r0, [pc, #592]	; (22d8 <cbvprintf_package+0x4d8>)
    2086:	f00a f86f 	bl	c168 <assert_print>
    208a:	f240 2131 	movw	r1, #561	; 0x231
    208e:	4620      	mov	r0, r4
    2090:	f00a f863 	bl	c15a <assert_post_action>
			return -EINVAL;
    2094:	f06f 0015 	mvn.w	r0, #21
    2098:	e152      	b.n	2340 <cbvprintf_package+0x540>
		switch (*fmt) {
    209a:	2600      	movs	r6, #0
    209c:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    209e:	f105 0c01 	add.w	ip, r5, #1
    20a2:	786b      	ldrb	r3, [r5, #1]
    20a4:	2b00      	cmp	r3, #0
    20a6:	f000 80c1 	beq.w	222c <cbvprintf_package+0x42c>
		if (!parsing) {
    20aa:	2e00      	cmp	r6, #0
    20ac:	f43f af06 	beq.w	1ebc <cbvprintf_package+0xbc>
		switch (*fmt) {
    20b0:	f1a3 0120 	sub.w	r1, r3, #32
    20b4:	295a      	cmp	r1, #90	; 0x5a
    20b6:	d8f0      	bhi.n	209a <cbvprintf_package+0x29a>
    20b8:	a201      	add	r2, pc, #4	; (adr r2, 20c0 <cbvprintf_package+0x2c0>)
    20ba:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    20be:	bf00      	nop
    20c0:	0000209d 	.word	0x0000209d
    20c4:	0000209b 	.word	0x0000209b
    20c8:	0000209b 	.word	0x0000209b
    20cc:	0000209d 	.word	0x0000209d
    20d0:	0000209b 	.word	0x0000209b
    20d4:	0000209b 	.word	0x0000209b
    20d8:	0000209b 	.word	0x0000209b
    20dc:	0000209b 	.word	0x0000209b
    20e0:	0000209b 	.word	0x0000209b
    20e4:	0000209b 	.word	0x0000209b
    20e8:	00001eed 	.word	0x00001eed
    20ec:	0000209d 	.word	0x0000209d
    20f0:	0000209b 	.word	0x0000209b
    20f4:	0000209d 	.word	0x0000209d
    20f8:	0000209d 	.word	0x0000209d
    20fc:	0000209b 	.word	0x0000209b
    2100:	0000209d 	.word	0x0000209d
    2104:	0000209d 	.word	0x0000209d
    2108:	0000209d 	.word	0x0000209d
    210c:	0000209d 	.word	0x0000209d
    2110:	0000209d 	.word	0x0000209d
    2114:	0000209d 	.word	0x0000209d
    2118:	0000209d 	.word	0x0000209d
    211c:	0000209d 	.word	0x0000209d
    2120:	0000209d 	.word	0x0000209d
    2124:	0000209d 	.word	0x0000209d
    2128:	0000209b 	.word	0x0000209b
    212c:	0000209b 	.word	0x0000209b
    2130:	0000209b 	.word	0x0000209b
    2134:	0000209b 	.word	0x0000209b
    2138:	0000209b 	.word	0x0000209b
    213c:	0000209b 	.word	0x0000209b
    2140:	0000209b 	.word	0x0000209b
    2144:	00001f55 	.word	0x00001f55
    2148:	0000209b 	.word	0x0000209b
    214c:	0000209b 	.word	0x0000209b
    2150:	0000209b 	.word	0x0000209b
    2154:	00001f55 	.word	0x00001f55
    2158:	00001f55 	.word	0x00001f55
    215c:	00001f55 	.word	0x00001f55
    2160:	0000209b 	.word	0x0000209b
    2164:	0000209b 	.word	0x0000209b
    2168:	0000209b 	.word	0x0000209b
    216c:	0000209b 	.word	0x0000209b
    2170:	0000209d 	.word	0x0000209d
    2174:	0000209b 	.word	0x0000209b
    2178:	0000209b 	.word	0x0000209b
    217c:	0000209b 	.word	0x0000209b
    2180:	0000209b 	.word	0x0000209b
    2184:	0000209b 	.word	0x0000209b
    2188:	0000209b 	.word	0x0000209b
    218c:	0000209b 	.word	0x0000209b
    2190:	0000209b 	.word	0x0000209b
    2194:	0000209b 	.word	0x0000209b
    2198:	0000209b 	.word	0x0000209b
    219c:	0000209b 	.word	0x0000209b
    21a0:	00001ee5 	.word	0x00001ee5
    21a4:	0000209b 	.word	0x0000209b
    21a8:	0000209b 	.word	0x0000209b
    21ac:	0000209b 	.word	0x0000209b
    21b0:	0000209b 	.word	0x0000209b
    21b4:	0000209b 	.word	0x0000209b
    21b8:	0000209b 	.word	0x0000209b
    21bc:	0000209b 	.word	0x0000209b
    21c0:	0000209b 	.word	0x0000209b
    21c4:	00001f55 	.word	0x00001f55
    21c8:	0000209b 	.word	0x0000209b
    21cc:	00001ee5 	.word	0x00001ee5
    21d0:	00001ee5 	.word	0x00001ee5
    21d4:	00001f55 	.word	0x00001f55
    21d8:	00001f55 	.word	0x00001f55
    21dc:	00001f55 	.word	0x00001f55
    21e0:	0000209d 	.word	0x0000209d
    21e4:	00001ee5 	.word	0x00001ee5
    21e8:	00001ecd 	.word	0x00001ecd
    21ec:	0000209b 	.word	0x0000209b
    21f0:	0000209d 	.word	0x0000209d
    21f4:	0000209b 	.word	0x0000209b
    21f8:	00001fb5 	.word	0x00001fb5
    21fc:	00001ee5 	.word	0x00001ee5
    2200:	00001fb5 	.word	0x00001fb5
    2204:	0000209b 	.word	0x0000209b
    2208:	0000209b 	.word	0x0000209b
    220c:	00001fb5 	.word	0x00001fb5
    2210:	00001edd 	.word	0x00001edd
    2214:	00001ee5 	.word	0x00001ee5
    2218:	0000209b 	.word	0x0000209b
    221c:	0000209b 	.word	0x0000209b
    2220:	00001ee5 	.word	0x00001ee5
    2224:	0000209b 	.word	0x0000209b
    2228:	00001ed5 	.word	0x00001ed5
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    222c:	1be3      	subs	r3, r4, r7
    222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2232:	d211      	bcs.n	2258 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    2234:	b31f      	cbz	r7, 227e <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    2236:	2200      	movs	r2, #0
    2238:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    223a:	089b      	lsrs	r3, r3, #2
    223c:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    223e:	9b01      	ldr	r3, [sp, #4]
    2240:	b30b      	cbz	r3, 2286 <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    2242:	9b06      	ldr	r3, [sp, #24]
    2244:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    2246:	9b04      	ldr	r3, [sp, #16]
    2248:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    224a:	bbab      	cbnz	r3, 22b8 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    224c:	9d02      	ldr	r5, [sp, #8]
    224e:	f8dd 9010 	ldr.w	r9, [sp, #16]
    2252:	f8dd 800c 	ldr.w	r8, [sp, #12]
    2256:	e058      	b.n	230a <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    2258:	4c1a      	ldr	r4, [pc, #104]	; (22c4 <cbvprintf_package+0x4c4>)
    225a:	f240 233d 	movw	r3, #573	; 0x23d
    225e:	4622      	mov	r2, r4
    2260:	4919      	ldr	r1, [pc, #100]	; (22c8 <cbvprintf_package+0x4c8>)
    2262:	481a      	ldr	r0, [pc, #104]	; (22cc <cbvprintf_package+0x4cc>)
    2264:	f009 ff80 	bl	c168 <assert_print>
    2268:	481c      	ldr	r0, [pc, #112]	; (22dc <cbvprintf_package+0x4dc>)
    226a:	f009 ff7d 	bl	c168 <assert_print>
    226e:	f240 213d 	movw	r1, #573	; 0x23d
    2272:	4620      	mov	r0, r4
    2274:	f009 ff71 	bl	c15a <assert_post_action>
		return -EINVAL;
    2278:	f06f 0015 	mvn.w	r0, #21
    227c:	e060      	b.n	2340 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    227e:	4453      	add	r3, sl
    2280:	f1a3 0008 	sub.w	r0, r3, #8
    2284:	e05c      	b.n	2340 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    2286:	9b06      	ldr	r3, [sp, #24]
    2288:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    228a:	e7dc      	b.n	2246 <cbvprintf_package+0x446>
			*buf++ = pos;
    228c:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    2290:	3301      	adds	r3, #1
    2292:	459b      	cmp	fp, r3
    2294:	d9da      	bls.n	224c <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    2296:	aa0c      	add	r2, sp, #48	; 0x30
    2298:	441a      	add	r2, r3
    229a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    229e:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    22a2:	2a00      	cmp	r2, #0
    22a4:	daf4      	bge.n	2290 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    22a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    22aa:	1be2      	subs	r2, r4, r7
    22ac:	3201      	adds	r2, #1
    22ae:	4552      	cmp	r2, sl
    22b0:	d9ec      	bls.n	228c <cbvprintf_package+0x48c>
				return -ENOSPC;
    22b2:	f06f 001b 	mvn.w	r0, #27
    22b6:	e043      	b.n	2340 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    22b8:	9b02      	ldr	r3, [sp, #8]
    22ba:	e7ea      	b.n	2292 <cbvprintf_package+0x492>
    22bc:	0000d0c8 	.word	0x0000d0c8
    22c0:	0000f92c 	.word	0x0000f92c
    22c4:	0000dc20 	.word	0x0000dc20
    22c8:	0000d6e0 	.word	0x0000d6e0
    22cc:	0000d51c 	.word	0x0000d51c
    22d0:	0000dc68 	.word	0x0000dc68
    22d4:	0000dc8c 	.word	0x0000dc8c
    22d8:	0000dca8 	.word	0x0000dca8
    22dc:	0000dcc0 	.word	0x0000dcc0
		if (rws_pos_en) {
    22e0:	9b01      	ldr	r3, [sp, #4]
    22e2:	b1f3      	cbz	r3, 2322 <cbvprintf_package+0x522>
			size = 0;
    22e4:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    22e6:	1be3      	subs	r3, r4, r7
    22e8:	4433      	add	r3, r6
    22ea:	3301      	adds	r3, #1
    22ec:	4553      	cmp	r3, sl
    22ee:	d833      	bhi.n	2358 <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    22f0:	ab0c      	add	r3, sp, #48	; 0x30
    22f2:	442b      	add	r3, r5
    22f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    22f8:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    22fc:	4632      	mov	r2, r6
    22fe:	4641      	mov	r1, r8
    2300:	4620      	mov	r0, r4
    2302:	f00a f8c9 	bl	c498 <memcpy>
		buf += size;
    2306:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    2308:	3501      	adds	r5, #1
    230a:	45ab      	cmp	fp, r5
    230c:	d917      	bls.n	233e <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    230e:	f1b9 0f00 	cmp.w	r9, #0
    2312:	d0e5      	beq.n	22e0 <cbvprintf_package+0x4e0>
    2314:	ab0c      	add	r3, sp, #48	; 0x30
    2316:	442b      	add	r3, r5
    2318:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    231c:	2b00      	cmp	r3, #0
    231e:	dadf      	bge.n	22e0 <cbvprintf_package+0x4e0>
    2320:	e7f2      	b.n	2308 <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    2322:	ab0c      	add	r3, sp, #48	; 0x30
    2324:	442b      	add	r3, r5
    2326:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    232a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    232e:	2200      	movs	r2, #0
    2330:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    2334:	4640      	mov	r0, r8
    2336:	f00a f891 	bl	c45c <strlen>
    233a:	1c46      	adds	r6, r0, #1
    233c:	e7d3      	b.n	22e6 <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    233e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    2340:	b00d      	add	sp, #52	; 0x34
    2342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    2346:	f06f 000d 	mvn.w	r0, #13
    234a:	e7f9      	b.n	2340 <cbvprintf_package+0x540>
		return -ENOSPC;
    234c:	f06f 001b 	mvn.w	r0, #27
    2350:	e7f6      	b.n	2340 <cbvprintf_package+0x540>
			return -ENOSPC;
    2352:	f06f 001b 	mvn.w	r0, #27
    2356:	e7f3      	b.n	2340 <cbvprintf_package+0x540>
			return -ENOSPC;
    2358:	f06f 001b 	mvn.w	r0, #27
    235c:	e7f0      	b.n	2340 <cbvprintf_package+0x540>
    235e:	bf00      	nop

00002360 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    2360:	b538      	push	{r3, r4, r5, lr}
    2362:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    2364:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    2366:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    236a:	6081      	str	r1, [r0, #8]
	switch (method) {
    236c:	2b02      	cmp	r3, #2
    236e:	d903      	bls.n	2378 <sys_notify_finalize+0x18>
    2370:	2b03      	cmp	r3, #3
    2372:	d102      	bne.n	237a <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    2374:	6800      	ldr	r0, [r0, #0]
		break;
    2376:	e00e      	b.n	2396 <sys_notify_finalize+0x36>
	switch (method) {
    2378:	b963      	cbnz	r3, 2394 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    237a:	4d08      	ldr	r5, [pc, #32]	; (239c <sys_notify_finalize+0x3c>)
    237c:	2345      	movs	r3, #69	; 0x45
    237e:	462a      	mov	r2, r5
    2380:	4907      	ldr	r1, [pc, #28]	; (23a0 <sys_notify_finalize+0x40>)
    2382:	4808      	ldr	r0, [pc, #32]	; (23a4 <sys_notify_finalize+0x44>)
    2384:	f009 fef0 	bl	c168 <assert_print>
    2388:	2145      	movs	r1, #69	; 0x45
    238a:	4628      	mov	r0, r5
    238c:	f009 fee5 	bl	c15a <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    2390:	2000      	movs	r0, #0
    2392:	e000      	b.n	2396 <sys_notify_finalize+0x36>
	switch (method) {
    2394:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    2396:	2300      	movs	r3, #0
    2398:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    239a:	bd38      	pop	{r3, r4, r5, pc}
    239c:	0000dcd8 	.word	0x0000dcd8
    23a0:	0000d6e0 	.word	0x0000d6e0
    23a4:	0000d51c 	.word	0x0000d51c

000023a8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    23a8:	4b01      	ldr	r3, [pc, #4]	; (23b0 <__printk_hook_install+0x8>)
    23aa:	6018      	str	r0, [r3, #0]
}
    23ac:	4770      	bx	lr
    23ae:	bf00      	nop
    23b0:	20000098 	.word	0x20000098

000023b4 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    23b4:	b538      	push	{r3, r4, r5, lr}
    23b6:	4604      	mov	r4, r0
    23b8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    23ba:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    23bc:	2a00      	cmp	r2, #0
    23be:	db14      	blt.n	23ea <process_complete+0x36>
    23c0:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    23c4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    23c6:	2a01      	cmp	r2, #1
    23c8:	d91b      	bls.n	2402 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    23ca:	2b04      	cmp	r3, #4
    23cc:	d050      	beq.n	2470 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    23ce:	4c2f      	ldr	r4, [pc, #188]	; (248c <process_complete+0xd8>)
    23d0:	f240 131b 	movw	r3, #283	; 0x11b
    23d4:	4622      	mov	r2, r4
    23d6:	492e      	ldr	r1, [pc, #184]	; (2490 <process_complete+0xdc>)
    23d8:	482e      	ldr	r0, [pc, #184]	; (2494 <process_complete+0xe0>)
    23da:	f009 fec5 	bl	c168 <assert_print>
    23de:	f240 111b 	movw	r1, #283	; 0x11b
    23e2:	4620      	mov	r0, r4
    23e4:	f009 feb9 	bl	c15a <assert_post_action>
	}
}
    23e8:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    23ea:	e9d0 0100 	ldrd	r0, r1, [r0]
    23ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    23f2:	2300      	movs	r3, #0
    23f4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    23f6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    23f8:	2101      	movs	r1, #1
    23fa:	4620      	mov	r0, r4
    23fc:	f009 fd3d 	bl	be7a <set_state>
    2400:	e7f2      	b.n	23e8 <process_complete+0x34>
		*clients = mgr->clients;
    2402:	e9d0 0100 	ldrd	r0, r1, [r0]
    2406:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    240a:	2200      	movs	r2, #0
    240c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    240e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    2410:	2b06      	cmp	r3, #6
    2412:	d00f      	beq.n	2434 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    2414:	2b05      	cmp	r3, #5
    2416:	d11d      	bne.n	2454 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    2418:	2100      	movs	r1, #0
    241a:	4620      	mov	r0, r4
    241c:	f009 fd2d 	bl	be7a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2420:	4620      	mov	r0, r4
    2422:	f009 fd51 	bl	bec8 <process_recheck>
    2426:	2800      	cmp	r0, #0
    2428:	d0de      	beq.n	23e8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    242a:	8ba3      	ldrh	r3, [r4, #28]
    242c:	f043 0320 	orr.w	r3, r3, #32
    2430:	83a3      	strh	r3, [r4, #28]
    2432:	e7d9      	b.n	23e8 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2434:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2438:	b13b      	cbz	r3, 244a <process_complete+0x96>
				mgr->refs += 1U;
    243a:	8be2      	ldrh	r2, [r4, #30]
    243c:	3201      	adds	r2, #1
    243e:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2440:	2b00      	cmp	r3, #0
    2442:	d0f9      	beq.n	2438 <process_complete+0x84>
	return node->next;
    2444:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2446:	2b00      	cmp	r3, #0
    2448:	d1f6      	bne.n	2438 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    244a:	2102      	movs	r1, #2
    244c:	4620      	mov	r0, r4
    244e:	f009 fd14 	bl	be7a <set_state>
    2452:	e7e5      	b.n	2420 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    2454:	4d0d      	ldr	r5, [pc, #52]	; (248c <process_complete+0xd8>)
    2456:	f240 1309 	movw	r3, #265	; 0x109
    245a:	462a      	mov	r2, r5
    245c:	490e      	ldr	r1, [pc, #56]	; (2498 <process_complete+0xe4>)
    245e:	480d      	ldr	r0, [pc, #52]	; (2494 <process_complete+0xe0>)
    2460:	f009 fe82 	bl	c168 <assert_print>
    2464:	f240 1109 	movw	r1, #265	; 0x109
    2468:	4628      	mov	r0, r5
    246a:	f009 fe76 	bl	c15a <assert_post_action>
    246e:	e7d3      	b.n	2418 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    2470:	2100      	movs	r1, #0
    2472:	f009 fd02 	bl	be7a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    2476:	4620      	mov	r0, r4
    2478:	f009 fd26 	bl	bec8 <process_recheck>
    247c:	2800      	cmp	r0, #0
    247e:	d0b3      	beq.n	23e8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2480:	8ba3      	ldrh	r3, [r4, #28]
    2482:	f043 0320 	orr.w	r3, r3, #32
    2486:	83a3      	strh	r3, [r4, #28]
    2488:	e7ae      	b.n	23e8 <process_complete+0x34>
    248a:	bf00      	nop
    248c:	0000dcfc 	.word	0x0000dcfc
    2490:	0000d6e0 	.word	0x0000d6e0
    2494:	0000d51c 	.word	0x0000d51c
    2498:	0000dd20 	.word	0x0000dd20

0000249c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24a0:	b083      	sub	sp, #12
    24a2:	4604      	mov	r4, r0
    24a4:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    24a6:	8b83      	ldrh	r3, [r0, #28]
    24a8:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    24ac:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    24b0:	460d      	mov	r5, r1
    24b2:	b131      	cbz	r1, 24c2 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    24b4:	f1b8 0f00 	cmp.w	r8, #0
    24b8:	d112      	bne.n	24e0 <process_event+0x44>
	list->head = NULL;
    24ba:	2300      	movs	r3, #0
    24bc:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    24be:	9301      	str	r3, [sp, #4]
}
    24c0:	e0aa      	b.n	2618 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    24c2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 27a4 <process_event+0x308>
    24c6:	f240 1333 	movw	r3, #307	; 0x133
    24ca:	464a      	mov	r2, r9
    24cc:	49b6      	ldr	r1, [pc, #728]	; (27a8 <process_event+0x30c>)
    24ce:	48b7      	ldr	r0, [pc, #732]	; (27ac <process_event+0x310>)
    24d0:	f009 fe4a 	bl	c168 <assert_print>
    24d4:	f240 1133 	movw	r1, #307	; 0x133
    24d8:	4648      	mov	r0, r9
    24da:	f009 fe3e 	bl	c15a <assert_post_action>
    24de:	e7e9      	b.n	24b4 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    24e0:	2d01      	cmp	r5, #1
    24e2:	d013      	beq.n	250c <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    24e4:	2d02      	cmp	r5, #2
    24e6:	d116      	bne.n	2516 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    24e8:	8ba3      	ldrh	r3, [r4, #28]
    24ea:	f043 0320 	orr.w	r3, r3, #32
    24ee:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    24f0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24f2:	4620      	mov	r0, r4
    24f4:	f006 fd94 	bl	9020 <z_spin_unlock_valid>
    24f8:	2800      	cmp	r0, #0
    24fa:	f000 819c 	beq.w	2836 <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    24fe:	f386 8811 	msr	BASEPRI, r6
    2502:	f3bf 8f6f 	isb	sy
}
    2506:	b003      	add	sp, #12
    2508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    250c:	8ba3      	ldrh	r3, [r4, #28]
    250e:	f043 0310 	orr.w	r3, r3, #16
    2512:	83a3      	strh	r3, [r4, #28]
    2514:	e7ec      	b.n	24f0 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    2516:	4da3      	ldr	r5, [pc, #652]	; (27a4 <process_event+0x308>)
    2518:	f44f 739e 	mov.w	r3, #316	; 0x13c
    251c:	462a      	mov	r2, r5
    251e:	49a4      	ldr	r1, [pc, #656]	; (27b0 <process_event+0x314>)
    2520:	48a2      	ldr	r0, [pc, #648]	; (27ac <process_event+0x310>)
    2522:	f009 fe21 	bl	c168 <assert_print>
    2526:	f44f 719e 	mov.w	r1, #316	; 0x13c
    252a:	4628      	mov	r0, r5
    252c:	f009 fe15 	bl	c15a <assert_post_action>
    2530:	e7da      	b.n	24e8 <process_event+0x4c>
			evt = process_recheck(mgr);
    2532:	4620      	mov	r0, r4
    2534:	f009 fcc8 	bl	bec8 <process_recheck>
    2538:	4605      	mov	r5, r0
    253a:	e06f      	b.n	261c <process_event+0x180>
			res = mgr->last_res;
    253c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    2540:	464a      	mov	r2, r9
    2542:	4669      	mov	r1, sp
    2544:	4620      	mov	r0, r4
    2546:	f7ff ff35 	bl	23b4 <process_complete>
		onoff_transition_fn transit = NULL;
    254a:	2500      	movs	r5, #0
    254c:	e011      	b.n	2572 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    254e:	2f00      	cmp	r7, #0
    2550:	f040 8081 	bne.w	2656 <process_event+0x1ba>
	return list->head;
    2554:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2556:	2b00      	cmp	r3, #0
    2558:	f000 808b 	beq.w	2672 <process_event+0x1d6>
			transit = mgr->transitions->start;
    255c:	6923      	ldr	r3, [r4, #16]
    255e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    2560:	2d00      	cmp	r5, #0
    2562:	f000 8094 	beq.w	268e <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    2566:	2106      	movs	r1, #6
    2568:	4620      	mov	r0, r4
    256a:	f009 fc86 	bl	be7a <set_state>
		res = 0;
    256e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2572:	8ba3      	ldrh	r3, [r4, #28]
    2574:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2578:	45b8      	cmp	r8, r7
    257a:	f000 810b 	beq.w	2794 <process_event+0x2f8>
    257e:	68a2      	ldr	r2, [r4, #8]
    2580:	2a00      	cmp	r2, #0
    2582:	f000 8109 	beq.w	2798 <process_event+0x2fc>
    2586:	2201      	movs	r2, #1
		if (do_monitors
    2588:	4617      	mov	r7, r2
    258a:	b91a      	cbnz	r2, 2594 <process_event+0xf8>
    258c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    258e:	2a00      	cmp	r2, #0
    2590:	f000 8104 	beq.w	279c <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2594:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2598:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    259a:	f104 0a14 	add.w	sl, r4, #20
    259e:	4650      	mov	r0, sl
    25a0:	f006 fd3e 	bl	9020 <z_spin_unlock_valid>
    25a4:	2800      	cmp	r0, #0
    25a6:	f000 8115 	beq.w	27d4 <process_event+0x338>
    25aa:	f386 8811 	msr	BASEPRI, r6
    25ae:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    25b2:	2f00      	cmp	r7, #0
    25b4:	f040 811f 	bne.w	27f6 <process_event+0x35a>
    25b8:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    25ba:	b12b      	cbz	r3, 25c8 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    25bc:	464b      	mov	r3, r9
    25be:	4642      	mov	r2, r8
    25c0:	4669      	mov	r1, sp
    25c2:	4620      	mov	r0, r4
    25c4:	f009 fcc2 	bl	bf4c <notify_all>
			if (transit != NULL) {
    25c8:	b115      	cbz	r5, 25d0 <process_event+0x134>
				transit(mgr, transition_complete);
    25ca:	497a      	ldr	r1, [pc, #488]	; (27b4 <process_event+0x318>)
    25cc:	4620      	mov	r0, r4
    25ce:	47a8      	blx	r5
	__asm__ volatile(
    25d0:	f04f 0320 	mov.w	r3, #32
    25d4:	f3ef 8611 	mrs	r6, BASEPRI
    25d8:	f383 8812 	msr	BASEPRI_MAX, r3
    25dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    25e0:	4650      	mov	r0, sl
    25e2:	f006 fd0d 	bl	9000 <z_spin_lock_valid>
    25e6:	2800      	cmp	r0, #0
    25e8:	f000 810b 	beq.w	2802 <process_event+0x366>
	z_spin_lock_set_owner(l);
    25ec:	4650      	mov	r0, sl
    25ee:	f006 fd27 	bl	9040 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    25f2:	8ba3      	ldrh	r3, [r4, #28]
    25f4:	f023 0308 	bic.w	r3, r3, #8
    25f8:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    25fa:	8ba3      	ldrh	r3, [r4, #28]
    25fc:	f013 0f10 	tst.w	r3, #16
    2600:	f000 810f 	beq.w	2822 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2604:	f023 0310 	bic.w	r3, r3, #16
    2608:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    260a:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    260c:	8ba7      	ldrh	r7, [r4, #28]
    260e:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    2612:	2d00      	cmp	r5, #0
    2614:	f43f af6c 	beq.w	24f0 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    2618:	2d02      	cmp	r5, #2
    261a:	d08a      	beq.n	2532 <process_event+0x96>
		if (evt == EVT_NOP) {
    261c:	2d00      	cmp	r5, #0
    261e:	f43f af67 	beq.w	24f0 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    2622:	2d01      	cmp	r5, #1
    2624:	d08a      	beq.n	253c <process_event+0xa0>
		} else if (evt == EVT_START) {
    2626:	2d03      	cmp	r5, #3
    2628:	d091      	beq.n	254e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    262a:	2d04      	cmp	r5, #4
    262c:	d03e      	beq.n	26ac <process_event+0x210>
		} else if (evt == EVT_RESET) {
    262e:	2d05      	cmp	r5, #5
    2630:	f040 80a0 	bne.w	2774 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2634:	2f01      	cmp	r7, #1
    2636:	d172      	bne.n	271e <process_event+0x282>
    2638:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    263a:	2b00      	cmp	r3, #0
    263c:	d07d      	beq.n	273a <process_event+0x29e>
			transit = mgr->transitions->reset;
    263e:	6923      	ldr	r3, [r4, #16]
    2640:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    2642:	2d00      	cmp	r5, #0
    2644:	f000 8087 	beq.w	2756 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    2648:	2105      	movs	r1, #5
    264a:	4620      	mov	r0, r4
    264c:	f009 fc15 	bl	be7a <set_state>
		res = 0;
    2650:	f04f 0900 	mov.w	r9, #0
    2654:	e78d      	b.n	2572 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2656:	4d53      	ldr	r5, [pc, #332]	; (27a4 <process_event+0x308>)
    2658:	f44f 73ab 	mov.w	r3, #342	; 0x156
    265c:	462a      	mov	r2, r5
    265e:	4956      	ldr	r1, [pc, #344]	; (27b8 <process_event+0x31c>)
    2660:	4852      	ldr	r0, [pc, #328]	; (27ac <process_event+0x310>)
    2662:	f009 fd81 	bl	c168 <assert_print>
    2666:	f44f 71ab 	mov.w	r1, #342	; 0x156
    266a:	4628      	mov	r0, r5
    266c:	f009 fd75 	bl	c15a <assert_post_action>
    2670:	e770      	b.n	2554 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2672:	4d4c      	ldr	r5, [pc, #304]	; (27a4 <process_event+0x308>)
    2674:	f240 1357 	movw	r3, #343	; 0x157
    2678:	462a      	mov	r2, r5
    267a:	4950      	ldr	r1, [pc, #320]	; (27bc <process_event+0x320>)
    267c:	484b      	ldr	r0, [pc, #300]	; (27ac <process_event+0x310>)
    267e:	f009 fd73 	bl	c168 <assert_print>
    2682:	f240 1157 	movw	r1, #343	; 0x157
    2686:	4628      	mov	r0, r5
    2688:	f009 fd67 	bl	c15a <assert_post_action>
    268c:	e766      	b.n	255c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    268e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 27a4 <process_event+0x308>
    2692:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    2696:	4642      	mov	r2, r8
    2698:	4949      	ldr	r1, [pc, #292]	; (27c0 <process_event+0x324>)
    269a:	4844      	ldr	r0, [pc, #272]	; (27ac <process_event+0x310>)
    269c:	f009 fd64 	bl	c168 <assert_print>
    26a0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    26a4:	4640      	mov	r0, r8
    26a6:	f009 fd58 	bl	c15a <assert_post_action>
    26aa:	e75c      	b.n	2566 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    26ac:	2f02      	cmp	r7, #2
    26ae:	d10b      	bne.n	26c8 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    26b0:	8be3      	ldrh	r3, [r4, #30]
    26b2:	b9bb      	cbnz	r3, 26e4 <process_event+0x248>
			transit = mgr->transitions->stop;
    26b4:	6923      	ldr	r3, [r4, #16]
    26b6:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    26b8:	b315      	cbz	r5, 2700 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    26ba:	2104      	movs	r1, #4
    26bc:	4620      	mov	r0, r4
    26be:	f009 fbdc 	bl	be7a <set_state>
		res = 0;
    26c2:	f04f 0900 	mov.w	r9, #0
    26c6:	e754      	b.n	2572 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    26c8:	4d36      	ldr	r5, [pc, #216]	; (27a4 <process_event+0x308>)
    26ca:	f240 135d 	movw	r3, #349	; 0x15d
    26ce:	462a      	mov	r2, r5
    26d0:	493c      	ldr	r1, [pc, #240]	; (27c4 <process_event+0x328>)
    26d2:	4836      	ldr	r0, [pc, #216]	; (27ac <process_event+0x310>)
    26d4:	f009 fd48 	bl	c168 <assert_print>
    26d8:	f240 115d 	movw	r1, #349	; 0x15d
    26dc:	4628      	mov	r0, r5
    26de:	f009 fd3c 	bl	c15a <assert_post_action>
    26e2:	e7e5      	b.n	26b0 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    26e4:	4d2f      	ldr	r5, [pc, #188]	; (27a4 <process_event+0x308>)
    26e6:	f44f 73af 	mov.w	r3, #350	; 0x15e
    26ea:	462a      	mov	r2, r5
    26ec:	4936      	ldr	r1, [pc, #216]	; (27c8 <process_event+0x32c>)
    26ee:	482f      	ldr	r0, [pc, #188]	; (27ac <process_event+0x310>)
    26f0:	f009 fd3a 	bl	c168 <assert_print>
    26f4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    26f8:	4628      	mov	r0, r5
    26fa:	f009 fd2e 	bl	c15a <assert_post_action>
    26fe:	e7d9      	b.n	26b4 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    2700:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 27a4 <process_event+0x308>
    2704:	f240 1361 	movw	r3, #353	; 0x161
    2708:	4642      	mov	r2, r8
    270a:	492d      	ldr	r1, [pc, #180]	; (27c0 <process_event+0x324>)
    270c:	4827      	ldr	r0, [pc, #156]	; (27ac <process_event+0x310>)
    270e:	f009 fd2b 	bl	c168 <assert_print>
    2712:	f240 1161 	movw	r1, #353	; 0x161
    2716:	4640      	mov	r0, r8
    2718:	f009 fd1f 	bl	c15a <assert_post_action>
    271c:	e7cd      	b.n	26ba <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    271e:	4d21      	ldr	r5, [pc, #132]	; (27a4 <process_event+0x308>)
    2720:	f44f 73b2 	mov.w	r3, #356	; 0x164
    2724:	462a      	mov	r2, r5
    2726:	4929      	ldr	r1, [pc, #164]	; (27cc <process_event+0x330>)
    2728:	4820      	ldr	r0, [pc, #128]	; (27ac <process_event+0x310>)
    272a:	f009 fd1d 	bl	c168 <assert_print>
    272e:	f44f 71b2 	mov.w	r1, #356	; 0x164
    2732:	4628      	mov	r0, r5
    2734:	f009 fd11 	bl	c15a <assert_post_action>
    2738:	e77e      	b.n	2638 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    273a:	4d1a      	ldr	r5, [pc, #104]	; (27a4 <process_event+0x308>)
    273c:	f240 1365 	movw	r3, #357	; 0x165
    2740:	462a      	mov	r2, r5
    2742:	491e      	ldr	r1, [pc, #120]	; (27bc <process_event+0x320>)
    2744:	4819      	ldr	r0, [pc, #100]	; (27ac <process_event+0x310>)
    2746:	f009 fd0f 	bl	c168 <assert_print>
    274a:	f240 1165 	movw	r1, #357	; 0x165
    274e:	4628      	mov	r0, r5
    2750:	f009 fd03 	bl	c15a <assert_post_action>
    2754:	e773      	b.n	263e <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    2756:	f8df 804c 	ldr.w	r8, [pc, #76]	; 27a4 <process_event+0x308>
    275a:	f44f 73b4 	mov.w	r3, #360	; 0x168
    275e:	4642      	mov	r2, r8
    2760:	4917      	ldr	r1, [pc, #92]	; (27c0 <process_event+0x324>)
    2762:	4812      	ldr	r0, [pc, #72]	; (27ac <process_event+0x310>)
    2764:	f009 fd00 	bl	c168 <assert_print>
    2768:	f44f 71b4 	mov.w	r1, #360	; 0x168
    276c:	4640      	mov	r0, r8
    276e:	f009 fcf4 	bl	c15a <assert_post_action>
    2772:	e769      	b.n	2648 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    2774:	4d0b      	ldr	r5, [pc, #44]	; (27a4 <process_event+0x308>)
    2776:	f240 136b 	movw	r3, #363	; 0x16b
    277a:	462a      	mov	r2, r5
    277c:	4914      	ldr	r1, [pc, #80]	; (27d0 <process_event+0x334>)
    277e:	480b      	ldr	r0, [pc, #44]	; (27ac <process_event+0x310>)
    2780:	f009 fcf2 	bl	c168 <assert_print>
    2784:	f240 116b 	movw	r1, #363	; 0x16b
    2788:	4628      	mov	r0, r5
    278a:	f009 fce6 	bl	c15a <assert_post_action>
		onoff_transition_fn transit = NULL;
    278e:	2500      	movs	r5, #0
		res = 0;
    2790:	46a9      	mov	r9, r5
    2792:	e6ee      	b.n	2572 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    2794:	2200      	movs	r2, #0
    2796:	e6f7      	b.n	2588 <process_event+0xec>
    2798:	2200      	movs	r2, #0
    279a:	e6f5      	b.n	2588 <process_event+0xec>
		    || (transit != NULL)) {
    279c:	2d00      	cmp	r5, #0
    279e:	f47f aef9 	bne.w	2594 <process_event+0xf8>
    27a2:	e72a      	b.n	25fa <process_event+0x15e>
    27a4:	0000dcfc 	.word	0x0000dcfc
    27a8:	0000dd48 	.word	0x0000dd48
    27ac:	0000d51c 	.word	0x0000d51c
    27b0:	0000dd58 	.word	0x0000dd58
    27b4:	00002871 	.word	0x00002871
    27b8:	0000dd6c 	.word	0x0000dd6c
    27bc:	0000dd78 	.word	0x0000dd78
    27c0:	0000dd9c 	.word	0x0000dd9c
    27c4:	0000ddb4 	.word	0x0000ddb4
    27c8:	0000ddcc 	.word	0x0000ddcc
    27cc:	0000dddc 	.word	0x0000dddc
    27d0:	0000d6e0 	.word	0x0000d6e0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27d4:	f8df b080 	ldr.w	fp, [pc, #128]	; 2858 <process_event+0x3bc>
    27d8:	23b9      	movs	r3, #185	; 0xb9
    27da:	465a      	mov	r2, fp
    27dc:	491f      	ldr	r1, [pc, #124]	; (285c <process_event+0x3c0>)
    27de:	4820      	ldr	r0, [pc, #128]	; (2860 <process_event+0x3c4>)
    27e0:	f009 fcc2 	bl	c168 <assert_print>
    27e4:	4651      	mov	r1, sl
    27e6:	481f      	ldr	r0, [pc, #124]	; (2864 <process_event+0x3c8>)
    27e8:	f009 fcbe 	bl	c168 <assert_print>
    27ec:	21b9      	movs	r1, #185	; 0xb9
    27ee:	4658      	mov	r0, fp
    27f0:	f009 fcb3 	bl	c15a <assert_post_action>
    27f4:	e6d9      	b.n	25aa <process_event+0x10e>
				notify_monitors(mgr, state, res);
    27f6:	464a      	mov	r2, r9
    27f8:	4641      	mov	r1, r8
    27fa:	4620      	mov	r0, r4
    27fc:	f009 fb45 	bl	be8a <notify_monitors>
    2800:	e6da      	b.n	25b8 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2802:	4d15      	ldr	r5, [pc, #84]	; (2858 <process_event+0x3bc>)
    2804:	238e      	movs	r3, #142	; 0x8e
    2806:	462a      	mov	r2, r5
    2808:	4917      	ldr	r1, [pc, #92]	; (2868 <process_event+0x3cc>)
    280a:	4815      	ldr	r0, [pc, #84]	; (2860 <process_event+0x3c4>)
    280c:	f009 fcac 	bl	c168 <assert_print>
    2810:	4651      	mov	r1, sl
    2812:	4816      	ldr	r0, [pc, #88]	; (286c <process_event+0x3d0>)
    2814:	f009 fca8 	bl	c168 <assert_print>
    2818:	218e      	movs	r1, #142	; 0x8e
    281a:	4628      	mov	r0, r5
    281c:	f009 fc9d 	bl	c15a <assert_post_action>
    2820:	e6e4      	b.n	25ec <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2822:	f013 0f20 	tst.w	r3, #32
    2826:	d004      	beq.n	2832 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2828:	f023 0320 	bic.w	r3, r3, #32
    282c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    282e:	2502      	movs	r5, #2
    2830:	e6ec      	b.n	260c <process_event+0x170>
		evt = EVT_NOP;
    2832:	2500      	movs	r5, #0
    2834:	e6ea      	b.n	260c <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2836:	4d08      	ldr	r5, [pc, #32]	; (2858 <process_event+0x3bc>)
    2838:	23b9      	movs	r3, #185	; 0xb9
    283a:	462a      	mov	r2, r5
    283c:	4907      	ldr	r1, [pc, #28]	; (285c <process_event+0x3c0>)
    283e:	4808      	ldr	r0, [pc, #32]	; (2860 <process_event+0x3c4>)
    2840:	f009 fc92 	bl	c168 <assert_print>
    2844:	4621      	mov	r1, r4
    2846:	4807      	ldr	r0, [pc, #28]	; (2864 <process_event+0x3c8>)
    2848:	f009 fc8e 	bl	c168 <assert_print>
    284c:	21b9      	movs	r1, #185	; 0xb9
    284e:	4628      	mov	r0, r5
    2850:	f009 fc83 	bl	c15a <assert_post_action>
    2854:	e653      	b.n	24fe <process_event+0x62>
    2856:	bf00      	nop
    2858:	0000ddf4 	.word	0x0000ddf4
    285c:	0000de24 	.word	0x0000de24
    2860:	0000d51c 	.word	0x0000d51c
    2864:	0000de3c 	.word	0x0000de3c
    2868:	0000de54 	.word	0x0000de54
    286c:	0000de6c 	.word	0x0000de6c

00002870 <transition_complete>:
{
    2870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2874:	4604      	mov	r4, r0
    2876:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2878:	f100 0614 	add.w	r6, r0, #20
    287c:	f04f 0320 	mov.w	r3, #32
    2880:	f3ef 8711 	mrs	r7, BASEPRI
    2884:	f383 8812 	msr	BASEPRI_MAX, r3
    2888:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    288c:	4630      	mov	r0, r6
    288e:	f006 fbb7 	bl	9000 <z_spin_lock_valid>
    2892:	b150      	cbz	r0, 28aa <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    2894:	4630      	mov	r0, r6
    2896:	f006 fbd3 	bl	9040 <z_spin_lock_set_owner>
	mgr->last_res = res;
    289a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    289c:	463a      	mov	r2, r7
    289e:	2101      	movs	r1, #1
    28a0:	4620      	mov	r0, r4
    28a2:	f7ff fdfb 	bl	249c <process_event>
}
    28a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28aa:	f8df 8020 	ldr.w	r8, [pc, #32]	; 28cc <transition_complete+0x5c>
    28ae:	238e      	movs	r3, #142	; 0x8e
    28b0:	4642      	mov	r2, r8
    28b2:	4907      	ldr	r1, [pc, #28]	; (28d0 <transition_complete+0x60>)
    28b4:	4807      	ldr	r0, [pc, #28]	; (28d4 <transition_complete+0x64>)
    28b6:	f009 fc57 	bl	c168 <assert_print>
    28ba:	4631      	mov	r1, r6
    28bc:	4806      	ldr	r0, [pc, #24]	; (28d8 <transition_complete+0x68>)
    28be:	f009 fc53 	bl	c168 <assert_print>
    28c2:	218e      	movs	r1, #142	; 0x8e
    28c4:	4640      	mov	r0, r8
    28c6:	f009 fc48 	bl	c15a <assert_post_action>
    28ca:	e7e3      	b.n	2894 <transition_complete+0x24>
    28cc:	0000ddf4 	.word	0x0000ddf4
    28d0:	0000de54 	.word	0x0000de54
    28d4:	0000d51c 	.word	0x0000d51c
    28d8:	0000de6c 	.word	0x0000de6c

000028dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    28dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e0:	4604      	mov	r4, r0
    28e2:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    28e4:	f009 fb09 	bl	befa <validate_args>

	if (rv < 0) {
    28e8:	1e06      	subs	r6, r0, #0
    28ea:	db58      	blt.n	299e <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    28ec:	f104 0714 	add.w	r7, r4, #20
    28f0:	f04f 0320 	mov.w	r3, #32
    28f4:	f3ef 8911 	mrs	r9, BASEPRI
    28f8:	f383 8812 	msr	BASEPRI_MAX, r3
    28fc:	f3bf 8f6f 	isb	sy
    2900:	4638      	mov	r0, r7
    2902:	f006 fb7d 	bl	9000 <z_spin_lock_valid>
    2906:	b1e8      	cbz	r0, 2944 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    2908:	4638      	mov	r0, r7
    290a:	f006 fb99 	bl	9040 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    290e:	8ba5      	ldrh	r5, [r4, #28]
    2910:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    2914:	8be3      	ldrh	r3, [r4, #30]
    2916:	f64f 72ff 	movw	r2, #65535	; 0xffff
    291a:	4293      	cmp	r3, r2
    291c:	d056      	beq.n	29cc <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    291e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    2920:	2d02      	cmp	r5, #2
    2922:	d01f      	beq.n	2964 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    2924:	b32d      	cbz	r5, 2972 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    2926:	2d04      	cmp	r5, #4
    2928:	d023      	beq.n	2972 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    292a:	2d06      	cmp	r5, #6
    292c:	d021      	beq.n	2972 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    292e:	2d05      	cmp	r5, #5
    2930:	d053      	beq.n	29da <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2932:	2d01      	cmp	r5, #1
    2934:	d136      	bne.n	29a4 <onoff_request+0xc8>
		rv = -EIO;
    2936:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    293a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    293e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    2940:	4652      	mov	r2, sl
    2942:	e01c      	b.n	297e <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2944:	4d3c      	ldr	r5, [pc, #240]	; (2a38 <onoff_request+0x15c>)
    2946:	238e      	movs	r3, #142	; 0x8e
    2948:	462a      	mov	r2, r5
    294a:	493c      	ldr	r1, [pc, #240]	; (2a3c <onoff_request+0x160>)
    294c:	483c      	ldr	r0, [pc, #240]	; (2a40 <onoff_request+0x164>)
    294e:	f009 fc0b 	bl	c168 <assert_print>
    2952:	4639      	mov	r1, r7
    2954:	483b      	ldr	r0, [pc, #236]	; (2a44 <onoff_request+0x168>)
    2956:	f009 fc07 	bl	c168 <assert_print>
    295a:	218e      	movs	r1, #142	; 0x8e
    295c:	4628      	mov	r0, r5
    295e:	f009 fbfc 	bl	c15a <assert_post_action>
    2962:	e7d1      	b.n	2908 <onoff_request+0x2c>
		mgr->refs += 1U;
    2964:	3301      	adds	r3, #1
    2966:	83e3      	strh	r3, [r4, #30]
		notify = true;
    2968:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    296c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    296e:	461a      	mov	r2, r3
    2970:	e005      	b.n	297e <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    2972:	fab5 f385 	clz	r3, r5
    2976:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    2978:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    297c:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    297e:	b142      	cbz	r2, 2992 <onoff_request+0xb6>
	parent->next = child;
    2980:	2200      	movs	r2, #0
    2982:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    2986:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2988:	b372      	cbz	r2, 29e8 <onoff_request+0x10c>
	parent->next = child;
    298a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    298e:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    2992:	b373      	cbz	r3, 29f2 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    2994:	464a      	mov	r2, r9
    2996:	2102      	movs	r1, #2
    2998:	4620      	mov	r0, r4
    299a:	f7ff fd7f 	bl	249c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    299e:	4630      	mov	r0, r6
    29a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    29a4:	4e28      	ldr	r6, [pc, #160]	; (2a48 <onoff_request+0x16c>)
    29a6:	f240 13c9 	movw	r3, #457	; 0x1c9
    29aa:	4632      	mov	r2, r6
    29ac:	4927      	ldr	r1, [pc, #156]	; (2a4c <onoff_request+0x170>)
    29ae:	4824      	ldr	r0, [pc, #144]	; (2a40 <onoff_request+0x164>)
    29b0:	f009 fbda 	bl	c168 <assert_print>
    29b4:	f240 11c9 	movw	r1, #457	; 0x1c9
    29b8:	4630      	mov	r0, r6
    29ba:	f009 fbce 	bl	c15a <assert_post_action>
		rv = -EIO;
    29be:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    29c2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    29c6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    29c8:	4652      	mov	r2, sl
    29ca:	e7d8      	b.n	297e <onoff_request+0xa2>
		rv = -EAGAIN;
    29cc:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    29d0:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    29d4:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    29d6:	4652      	mov	r2, sl
    29d8:	e7d1      	b.n	297e <onoff_request+0xa2>
		rv = -ENOTSUP;
    29da:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    29de:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    29e2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    29e4:	4652      	mov	r2, sl
    29e6:	e7ca      	b.n	297e <onoff_request+0xa2>
    29e8:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    29ec:	f8c4 8000 	str.w	r8, [r4]
}
    29f0:	e7cf      	b.n	2992 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    29f2:	4638      	mov	r0, r7
    29f4:	f006 fb14 	bl	9020 <z_spin_unlock_valid>
    29f8:	b168      	cbz	r0, 2a16 <onoff_request+0x13a>
	__asm__ volatile(
    29fa:	f389 8811 	msr	BASEPRI, r9
    29fe:	f3bf 8f6f 	isb	sy
		if (notify) {
    2a02:	f1ba 0f00 	cmp.w	sl, #0
    2a06:	d0ca      	beq.n	299e <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    2a08:	2300      	movs	r3, #0
    2a0a:	462a      	mov	r2, r5
    2a0c:	4641      	mov	r1, r8
    2a0e:	4620      	mov	r0, r4
    2a10:	f009 fa89 	bl	bf26 <notify_one>
    2a14:	e7c3      	b.n	299e <onoff_request+0xc2>
    2a16:	f8df b020 	ldr.w	fp, [pc, #32]	; 2a38 <onoff_request+0x15c>
    2a1a:	23b9      	movs	r3, #185	; 0xb9
    2a1c:	465a      	mov	r2, fp
    2a1e:	490c      	ldr	r1, [pc, #48]	; (2a50 <onoff_request+0x174>)
    2a20:	4807      	ldr	r0, [pc, #28]	; (2a40 <onoff_request+0x164>)
    2a22:	f009 fba1 	bl	c168 <assert_print>
    2a26:	4639      	mov	r1, r7
    2a28:	480a      	ldr	r0, [pc, #40]	; (2a54 <onoff_request+0x178>)
    2a2a:	f009 fb9d 	bl	c168 <assert_print>
    2a2e:	21b9      	movs	r1, #185	; 0xb9
    2a30:	4658      	mov	r0, fp
    2a32:	f009 fb92 	bl	c15a <assert_post_action>
    2a36:	e7e0      	b.n	29fa <onoff_request+0x11e>
    2a38:	0000ddf4 	.word	0x0000ddf4
    2a3c:	0000de54 	.word	0x0000de54
    2a40:	0000d51c 	.word	0x0000d51c
    2a44:	0000de6c 	.word	0x0000de6c
    2a48:	0000dcfc 	.word	0x0000dcfc
    2a4c:	0000dddc 	.word	0x0000dddc
    2a50:	0000de24 	.word	0x0000de24
    2a54:	0000de3c 	.word	0x0000de3c

00002a58 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a5c:	4606      	mov	r6, r0
    2a5e:	460d      	mov	r5, r1
    2a60:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2a62:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    2a66:	d222      	bcs.n	2aae <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2a68:	2c04      	cmp	r4, #4
    2a6a:	d931      	bls.n	2ad0 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    2a6c:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2a6e:	1dec      	adds	r4, r5, #7
    2a70:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2a74:	4415      	add	r5, r2
    2a76:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2a7a:	1b2d      	subs	r5, r5, r4
    2a7c:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2a80:	2d17      	cmp	r5, #23
    2a82:	d936      	bls.n	2af2 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    2a84:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    2a86:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    2a8a:	2300      	movs	r3, #0
    2a8c:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    2a8e:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2a92:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2a96:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    2a9a:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2a9c:	3607      	adds	r6, #7
    2a9e:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2aa2:	f109 0301 	add.w	r3, r9, #1
    2aa6:	4543      	cmp	r3, r8
    2aa8:	d834      	bhi.n	2b14 <sys_heap_init+0xbc>
{
    2aaa:	2300      	movs	r3, #0
    2aac:	e049      	b.n	2b42 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2aae:	4f38      	ldr	r7, [pc, #224]	; (2b90 <sys_heap_init+0x138>)
    2ab0:	f240 13e3 	movw	r3, #483	; 0x1e3
    2ab4:	463a      	mov	r2, r7
    2ab6:	4937      	ldr	r1, [pc, #220]	; (2b94 <sys_heap_init+0x13c>)
    2ab8:	4837      	ldr	r0, [pc, #220]	; (2b98 <sys_heap_init+0x140>)
    2aba:	f009 fb55 	bl	c168 <assert_print>
    2abe:	4837      	ldr	r0, [pc, #220]	; (2b9c <sys_heap_init+0x144>)
    2ac0:	f009 fb52 	bl	c168 <assert_print>
    2ac4:	f240 11e3 	movw	r1, #483	; 0x1e3
    2ac8:	4638      	mov	r0, r7
    2aca:	f009 fb46 	bl	c15a <assert_post_action>
    2ace:	e7cb      	b.n	2a68 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2ad0:	4f2f      	ldr	r7, [pc, #188]	; (2b90 <sys_heap_init+0x138>)
    2ad2:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2ad6:	463a      	mov	r2, r7
    2ad8:	4931      	ldr	r1, [pc, #196]	; (2ba0 <sys_heap_init+0x148>)
    2ada:	482f      	ldr	r0, [pc, #188]	; (2b98 <sys_heap_init+0x140>)
    2adc:	f009 fb44 	bl	c168 <assert_print>
    2ae0:	4830      	ldr	r0, [pc, #192]	; (2ba4 <sys_heap_init+0x14c>)
    2ae2:	f009 fb41 	bl	c168 <assert_print>
    2ae6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2aea:	4638      	mov	r0, r7
    2aec:	f009 fb35 	bl	c15a <assert_post_action>
    2af0:	e7bc      	b.n	2a6c <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2af2:	4f27      	ldr	r7, [pc, #156]	; (2b90 <sys_heap_init+0x138>)
    2af4:	f240 13f3 	movw	r3, #499	; 0x1f3
    2af8:	463a      	mov	r2, r7
    2afa:	492b      	ldr	r1, [pc, #172]	; (2ba8 <sys_heap_init+0x150>)
    2afc:	4826      	ldr	r0, [pc, #152]	; (2b98 <sys_heap_init+0x140>)
    2afe:	f009 fb33 	bl	c168 <assert_print>
    2b02:	4828      	ldr	r0, [pc, #160]	; (2ba4 <sys_heap_init+0x14c>)
    2b04:	f009 fb30 	bl	c168 <assert_print>
    2b08:	f240 11f3 	movw	r1, #499	; 0x1f3
    2b0c:	4638      	mov	r0, r7
    2b0e:	f009 fb24 	bl	c15a <assert_post_action>
    2b12:	e7b7      	b.n	2a84 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2b14:	f8df a078 	ldr.w	sl, [pc, #120]	; 2b90 <sys_heap_init+0x138>
    2b18:	f44f 7301 	mov.w	r3, #516	; 0x204
    2b1c:	4652      	mov	r2, sl
    2b1e:	4923      	ldr	r1, [pc, #140]	; (2bac <sys_heap_init+0x154>)
    2b20:	481d      	ldr	r0, [pc, #116]	; (2b98 <sys_heap_init+0x140>)
    2b22:	f009 fb21 	bl	c168 <assert_print>
    2b26:	481f      	ldr	r0, [pc, #124]	; (2ba4 <sys_heap_init+0x14c>)
    2b28:	f009 fb1e 	bl	c168 <assert_print>
    2b2c:	f44f 7101 	mov.w	r1, #516	; 0x204
    2b30:	4650      	mov	r0, sl
    2b32:	f009 fb12 	bl	c15a <assert_post_action>
    2b36:	e7b8      	b.n	2aaa <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    2b38:	1d1a      	adds	r2, r3, #4
    2b3a:	2100      	movs	r1, #0
    2b3c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    2b40:	3301      	adds	r3, #1
    2b42:	42bb      	cmp	r3, r7
    2b44:	dbf8      	blt.n	2b38 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2b46:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    2b4a:	b29b      	uxth	r3, r3
    2b4c:	8063      	strh	r3, [r4, #2]
    2b4e:	2200      	movs	r2, #0
    2b50:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2b52:	f043 0301 	orr.w	r3, r3, #1
    2b56:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2b58:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2b5c:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    2b60:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    2b64:	1cb3      	adds	r3, r6, #2
    2b66:	52e1      	strh	r1, [r4, r3]
    2b68:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    2b6c:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    2b70:	1ca9      	adds	r1, r5, #2
    2b72:	5262      	strh	r2, [r4, r1]
    2b74:	4425      	add	r5, r4
    2b76:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2b7a:	886b      	ldrh	r3, [r5, #2]
    2b7c:	f043 0301 	orr.w	r3, r3, #1
    2b80:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2b82:	4649      	mov	r1, r9
    2b84:	4620      	mov	r0, r4
    2b86:	f009 fa46 	bl	c016 <free_list_add>
}
    2b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b8e:	bf00      	nop
    2b90:	0000de84 	.word	0x0000de84
    2b94:	0000df58 	.word	0x0000df58
    2b98:	0000d51c 	.word	0x0000d51c
    2b9c:	0000df70 	.word	0x0000df70
    2ba0:	0000df88 	.word	0x0000df88
    2ba4:	0000dfac 	.word	0x0000dfac
    2ba8:	0000dfc8 	.word	0x0000dfc8
    2bac:	0000dff4 	.word	0x0000dff4

00002bb0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    2bb6:	2300      	movs	r3, #0
    2bb8:	6003      	str	r3, [r0, #0]
    2bba:	6043      	str	r3, [r0, #4]
    2bbc:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    2bbe:	784b      	ldrb	r3, [r1, #1]
    2bc0:	2b25      	cmp	r3, #37	; 0x25
    2bc2:	d002      	beq.n	2bca <extract_conversion+0x1a>
    2bc4:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    2bc6:	2501      	movs	r5, #1
    2bc8:	e01f      	b.n	2c0a <extract_conversion+0x5a>
		conv->specifier = *sp++;
    2bca:	1c88      	adds	r0, r1, #2
    2bcc:	70e3      	strb	r3, [r4, #3]
		return sp;
    2bce:	e145      	b.n	2e5c <extract_conversion+0x2ac>
			conv->flag_dash = true;
    2bd0:	7823      	ldrb	r3, [r4, #0]
    2bd2:	f043 0304 	orr.w	r3, r3, #4
    2bd6:	7023      	strb	r3, [r4, #0]
		if (loop) {
    2bd8:	b1b5      	cbz	r5, 2c08 <extract_conversion+0x58>
			++sp;
    2bda:	3601      	adds	r6, #1
    2bdc:	e014      	b.n	2c08 <extract_conversion+0x58>
			conv->flag_plus = true;
    2bde:	7823      	ldrb	r3, [r4, #0]
    2be0:	f043 0308 	orr.w	r3, r3, #8
    2be4:	7023      	strb	r3, [r4, #0]
			break;
    2be6:	e7f7      	b.n	2bd8 <extract_conversion+0x28>
			conv->flag_space = true;
    2be8:	7823      	ldrb	r3, [r4, #0]
    2bea:	f043 0310 	orr.w	r3, r3, #16
    2bee:	7023      	strb	r3, [r4, #0]
			break;
    2bf0:	e7f2      	b.n	2bd8 <extract_conversion+0x28>
			conv->flag_hash = true;
    2bf2:	7823      	ldrb	r3, [r4, #0]
    2bf4:	f043 0320 	orr.w	r3, r3, #32
    2bf8:	7023      	strb	r3, [r4, #0]
			break;
    2bfa:	e7ed      	b.n	2bd8 <extract_conversion+0x28>
			conv->flag_zero = true;
    2bfc:	7823      	ldrb	r3, [r4, #0]
    2bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c02:	7023      	strb	r3, [r4, #0]
			break;
    2c04:	e7e8      	b.n	2bd8 <extract_conversion+0x28>
		switch (*sp) {
    2c06:	2500      	movs	r5, #0
	} while (loop);
    2c08:	b345      	cbz	r5, 2c5c <extract_conversion+0xac>
		switch (*sp) {
    2c0a:	7833      	ldrb	r3, [r6, #0]
    2c0c:	3b20      	subs	r3, #32
    2c0e:	2b10      	cmp	r3, #16
    2c10:	d8f9      	bhi.n	2c06 <extract_conversion+0x56>
    2c12:	a201      	add	r2, pc, #4	; (adr r2, 2c18 <extract_conversion+0x68>)
    2c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c18:	00002be9 	.word	0x00002be9
    2c1c:	00002c07 	.word	0x00002c07
    2c20:	00002c07 	.word	0x00002c07
    2c24:	00002bf3 	.word	0x00002bf3
    2c28:	00002c07 	.word	0x00002c07
    2c2c:	00002c07 	.word	0x00002c07
    2c30:	00002c07 	.word	0x00002c07
    2c34:	00002c07 	.word	0x00002c07
    2c38:	00002c07 	.word	0x00002c07
    2c3c:	00002c07 	.word	0x00002c07
    2c40:	00002c07 	.word	0x00002c07
    2c44:	00002bdf 	.word	0x00002bdf
    2c48:	00002c07 	.word	0x00002c07
    2c4c:	00002bd1 	.word	0x00002bd1
    2c50:	00002c07 	.word	0x00002c07
    2c54:	00002c07 	.word	0x00002c07
    2c58:	00002bfd 	.word	0x00002bfd
	if (conv->flag_zero && conv->flag_dash) {
    2c5c:	7823      	ldrb	r3, [r4, #0]
    2c5e:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2c62:	2b44      	cmp	r3, #68	; 0x44
    2c64:	d05f      	beq.n	2d26 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    2c66:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    2c68:	7823      	ldrb	r3, [r4, #0]
    2c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c6e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    2c70:	7833      	ldrb	r3, [r6, #0]
    2c72:	2b2a      	cmp	r3, #42	; 0x2a
    2c74:	d05c      	beq.n	2d30 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    2c76:	a801      	add	r0, sp, #4
    2c78:	f009 f9d9 	bl	c02e <extract_decimal>
	if (sp != wp) {
    2c7c:	9b01      	ldr	r3, [sp, #4]
    2c7e:	429e      	cmp	r6, r3
    2c80:	d00f      	beq.n	2ca2 <extract_conversion+0xf2>
		conv->width_present = true;
    2c82:	7823      	ldrb	r3, [r4, #0]
    2c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c88:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    2c8a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    2c92:	2800      	cmp	r0, #0
    2c94:	db54      	blt.n	2d40 <extract_conversion+0x190>
    2c96:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2c98:	4313      	orrs	r3, r2
    2c9a:	7822      	ldrb	r2, [r4, #0]
    2c9c:	f363 0241 	bfi	r2, r3, #1, #1
    2ca0:	7022      	strb	r2, [r4, #0]
	return sp;
    2ca2:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    2ca4:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	2b2e      	cmp	r3, #46	; 0x2e
    2caa:	bf14      	ite	ne
    2cac:	2300      	movne	r3, #0
    2cae:	2301      	moveq	r3, #1
    2cb0:	7862      	ldrb	r2, [r4, #1]
    2cb2:	f363 0241 	bfi	r2, r3, #1, #1
    2cb6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d043      	beq.n	2d44 <extract_conversion+0x194>
	++sp;
    2cbc:	9b01      	ldr	r3, [sp, #4]
    2cbe:	1c5a      	adds	r2, r3, #1
    2cc0:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    2cc2:	785b      	ldrb	r3, [r3, #1]
    2cc4:	2b2a      	cmp	r3, #42	; 0x2a
    2cc6:	d03f      	beq.n	2d48 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    2cc8:	a801      	add	r0, sp, #4
    2cca:	f009 f9b0 	bl	c02e <extract_decimal>
	conv->prec_value = prec;
    2cce:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    2cd0:	7823      	ldrb	r3, [r4, #0]
    2cd2:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2cd6:	2800      	cmp	r0, #0
    2cd8:	db3e      	blt.n	2d58 <extract_conversion+0x1a8>
    2cda:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2cdc:	4313      	orrs	r3, r2
    2cde:	7822      	ldrb	r2, [r4, #0]
    2ce0:	f363 0241 	bfi	r2, r3, #1, #1
    2ce4:	7022      	strb	r2, [r4, #0]
	return sp;
    2ce6:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    2ce8:	7803      	ldrb	r3, [r0, #0]
    2cea:	3b4c      	subs	r3, #76	; 0x4c
    2cec:	2b2e      	cmp	r3, #46	; 0x2e
    2cee:	f200 809d 	bhi.w	2e2c <extract_conversion+0x27c>
    2cf2:	e8df f003 	tbb	[pc, r3]
    2cf6:	9b90      	.short	0x9b90
    2cf8:	9b9b9b9b 	.word	0x9b9b9b9b
    2cfc:	9b9b9b9b 	.word	0x9b9b9b9b
    2d00:	9b9b9b9b 	.word	0x9b9b9b9b
    2d04:	9b9b9b9b 	.word	0x9b9b9b9b
    2d08:	9b9b9b9b 	.word	0x9b9b9b9b
    2d0c:	9b9b9b9b 	.word	0x9b9b9b9b
    2d10:	9b339b9b 	.word	0x9b339b9b
    2d14:	9b459b57 	.word	0x9b459b57
    2d18:	9b9b9b9b 	.word	0x9b9b9b9b
    2d1c:	9b899b9b 	.word	0x9b899b9b
    2d20:	9b9b9b9b 	.word	0x9b9b9b9b
    2d24:	82          	.byte	0x82
    2d25:	00          	.byte	0x00
		conv->flag_zero = false;
    2d26:	7823      	ldrb	r3, [r4, #0]
    2d28:	f36f 1386 	bfc	r3, #6, #1
    2d2c:	7023      	strb	r3, [r4, #0]
    2d2e:	e79a      	b.n	2c66 <extract_conversion+0xb6>
		conv->width_star = true;
    2d30:	7863      	ldrb	r3, [r4, #1]
    2d32:	f043 0301 	orr.w	r3, r3, #1
    2d36:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2d38:	4633      	mov	r3, r6
    2d3a:	3301      	adds	r3, #1
    2d3c:	9301      	str	r3, [sp, #4]
    2d3e:	e7b1      	b.n	2ca4 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    2d40:	2201      	movs	r2, #1
    2d42:	e7a9      	b.n	2c98 <extract_conversion+0xe8>
		return sp;
    2d44:	9801      	ldr	r0, [sp, #4]
    2d46:	e7cf      	b.n	2ce8 <extract_conversion+0x138>
		conv->prec_star = true;
    2d48:	7863      	ldrb	r3, [r4, #1]
    2d4a:	f043 0304 	orr.w	r3, r3, #4
    2d4e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    2d50:	4610      	mov	r0, r2
    2d52:	3001      	adds	r0, #1
    2d54:	9001      	str	r0, [sp, #4]
    2d56:	e7c7      	b.n	2ce8 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    2d58:	2201      	movs	r2, #1
    2d5a:	e7bf      	b.n	2cdc <extract_conversion+0x12c>
		if (*++sp == 'h') {
    2d5c:	1c42      	adds	r2, r0, #1
    2d5e:	7843      	ldrb	r3, [r0, #1]
    2d60:	2b68      	cmp	r3, #104	; 0x68
    2d62:	d006      	beq.n	2d72 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    2d64:	7863      	ldrb	r3, [r4, #1]
    2d66:	2102      	movs	r1, #2
    2d68:	f361 03c6 	bfi	r3, r1, #3, #4
    2d6c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    2d6e:	4610      	mov	r0, r2
    2d70:	e01e      	b.n	2db0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    2d72:	7863      	ldrb	r3, [r4, #1]
    2d74:	2201      	movs	r2, #1
    2d76:	f362 03c6 	bfi	r3, r2, #3, #4
    2d7a:	7063      	strb	r3, [r4, #1]
			++sp;
    2d7c:	3002      	adds	r0, #2
    2d7e:	e017      	b.n	2db0 <extract_conversion+0x200>
		if (*++sp == 'l') {
    2d80:	1c42      	adds	r2, r0, #1
    2d82:	7843      	ldrb	r3, [r0, #1]
    2d84:	2b6c      	cmp	r3, #108	; 0x6c
    2d86:	d006      	beq.n	2d96 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    2d88:	7863      	ldrb	r3, [r4, #1]
    2d8a:	2103      	movs	r1, #3
    2d8c:	f361 03c6 	bfi	r3, r1, #3, #4
    2d90:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    2d92:	4610      	mov	r0, r2
    2d94:	e00c      	b.n	2db0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    2d96:	7863      	ldrb	r3, [r4, #1]
    2d98:	2204      	movs	r2, #4
    2d9a:	f362 03c6 	bfi	r3, r2, #3, #4
    2d9e:	7063      	strb	r3, [r4, #1]
			++sp;
    2da0:	3002      	adds	r0, #2
    2da2:	e005      	b.n	2db0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    2da4:	7863      	ldrb	r3, [r4, #1]
    2da6:	2205      	movs	r2, #5
    2da8:	f362 03c6 	bfi	r3, r2, #3, #4
    2dac:	7063      	strb	r3, [r4, #1]
		++sp;
    2dae:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    2db0:	f810 3b01 	ldrb.w	r3, [r0], #1
    2db4:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    2db6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2dba:	2a37      	cmp	r2, #55	; 0x37
    2dbc:	d87d      	bhi.n	2eba <extract_conversion+0x30a>
    2dbe:	e8df f002 	tbb	[pc, r2]
    2dc2:	7c5e      	.short	0x7c5e
    2dc4:	5e5e7c7c 	.word	0x5e5e7c7c
    2dc8:	7c7c7c5e 	.word	0x7c7c7c5e
    2dcc:	7c7c7c7c 	.word	0x7c7c7c7c
    2dd0:	7c7c7c7c 	.word	0x7c7c7c7c
    2dd4:	7c7c7c7c 	.word	0x7c7c7c7c
    2dd8:	7c7c4f7c 	.word	0x7c7c4f7c
    2ddc:	7c7c7c7c 	.word	0x7c7c7c7c
    2de0:	7c5e7c7c 	.word	0x7c5e7c7c
    2de4:	5e5e3a4f 	.word	0x5e5e3a4f
    2de8:	7c3a7c5e 	.word	0x7c3a7c5e
    2dec:	657c7c7c 	.word	0x657c7c7c
    2df0:	7c7c714f 	.word	0x7c7c714f
    2df4:	7c4f7c71 	.word	0x7c4f7c71
    2df8:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    2dfa:	7863      	ldrb	r3, [r4, #1]
    2dfc:	2206      	movs	r2, #6
    2dfe:	f362 03c6 	bfi	r3, r2, #3, #4
    2e02:	7063      	strb	r3, [r4, #1]
		++sp;
    2e04:	3001      	adds	r0, #1
		break;
    2e06:	e7d3      	b.n	2db0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    2e08:	7863      	ldrb	r3, [r4, #1]
    2e0a:	2207      	movs	r2, #7
    2e0c:	f362 03c6 	bfi	r3, r2, #3, #4
    2e10:	7063      	strb	r3, [r4, #1]
		++sp;
    2e12:	3001      	adds	r0, #1
		break;
    2e14:	e7cc      	b.n	2db0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    2e16:	7863      	ldrb	r3, [r4, #1]
    2e18:	2208      	movs	r2, #8
    2e1a:	f362 03c6 	bfi	r3, r2, #3, #4
    2e1e:	7063      	strb	r3, [r4, #1]
		++sp;
    2e20:	3001      	adds	r0, #1
		conv->unsupported = true;
    2e22:	7823      	ldrb	r3, [r4, #0]
    2e24:	f043 0302 	orr.w	r3, r3, #2
    2e28:	7023      	strb	r3, [r4, #0]
		break;
    2e2a:	e7c1      	b.n	2db0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    2e2c:	7863      	ldrb	r3, [r4, #1]
    2e2e:	f36f 03c6 	bfc	r3, #3, #4
    2e32:	7063      	strb	r3, [r4, #1]
		break;
    2e34:	e7bc      	b.n	2db0 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    2e36:	78a2      	ldrb	r2, [r4, #2]
    2e38:	2101      	movs	r1, #1
    2e3a:	f361 0202 	bfi	r2, r1, #0, #3
    2e3e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2e40:	7862      	ldrb	r2, [r4, #1]
    2e42:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2e46:	2a40      	cmp	r2, #64	; 0x40
    2e48:	d010      	beq.n	2e6c <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    2e4a:	2b63      	cmp	r3, #99	; 0x63
    2e4c:	d013      	beq.n	2e76 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    2e4e:	7823      	ldrb	r3, [r4, #0]
    2e50:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2e54:	4315      	orrs	r5, r2
    2e56:	f365 0341 	bfi	r3, r5, #1, #1
    2e5a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    2e5c:	b002      	add	sp, #8
    2e5e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    2e60:	78a2      	ldrb	r2, [r4, #2]
    2e62:	2102      	movs	r1, #2
    2e64:	f361 0202 	bfi	r2, r1, #0, #3
    2e68:	70a2      	strb	r2, [r4, #2]
    2e6a:	e7e9      	b.n	2e40 <extract_conversion+0x290>
			conv->invalid = true;
    2e6c:	7821      	ldrb	r1, [r4, #0]
    2e6e:	f041 0101 	orr.w	r1, r1, #1
    2e72:	7021      	strb	r1, [r4, #0]
    2e74:	e7e9      	b.n	2e4a <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2e76:	1e15      	subs	r5, r2, #0
    2e78:	bf18      	it	ne
    2e7a:	2501      	movne	r5, #1
    2e7c:	e7e7      	b.n	2e4e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    2e7e:	78a3      	ldrb	r3, [r4, #2]
    2e80:	2204      	movs	r2, #4
    2e82:	f362 0302 	bfi	r3, r2, #0, #3
    2e86:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    2e88:	2501      	movs	r5, #1
			break;
    2e8a:	e7e0      	b.n	2e4e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2e8c:	78a3      	ldrb	r3, [r4, #2]
    2e8e:	2203      	movs	r2, #3
    2e90:	f362 0302 	bfi	r3, r2, #0, #3
    2e94:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2e96:	7863      	ldrb	r3, [r4, #1]
    2e98:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2e9c:	2b40      	cmp	r3, #64	; 0x40
    2e9e:	d1d6      	bne.n	2e4e <extract_conversion+0x29e>
			unsupported = true;
    2ea0:	2501      	movs	r5, #1
    2ea2:	e7d4      	b.n	2e4e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2ea4:	78a3      	ldrb	r3, [r4, #2]
    2ea6:	2203      	movs	r2, #3
    2ea8:	f362 0302 	bfi	r3, r2, #0, #3
    2eac:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    2eae:	7863      	ldrb	r3, [r4, #1]
    2eb0:	f013 0f78 	tst.w	r3, #120	; 0x78
    2eb4:	d0cb      	beq.n	2e4e <extract_conversion+0x29e>
			unsupported = true;
    2eb6:	2501      	movs	r5, #1
    2eb8:	e7c9      	b.n	2e4e <extract_conversion+0x29e>
		conv->invalid = true;
    2eba:	7823      	ldrb	r3, [r4, #0]
    2ebc:	f043 0301 	orr.w	r3, r3, #1
    2ec0:	7023      	strb	r3, [r4, #0]
		break;
    2ec2:	e7c4      	b.n	2e4e <extract_conversion+0x29e>

00002ec4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec8:	b091      	sub	sp, #68	; 0x44
    2eca:	4606      	mov	r6, r0
    2ecc:	460d      	mov	r5, r1
    2ece:	4691      	mov	r9, r2
    2ed0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2ed2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2ed4:	f899 0000 	ldrb.w	r0, [r9]
    2ed8:	2800      	cmp	r0, #0
    2eda:	f000 82d5 	beq.w	3488 <cbvprintf+0x5c4>
		if (*fp != '%') {
    2ede:	2825      	cmp	r0, #37	; 0x25
    2ee0:	d008      	beq.n	2ef4 <cbvprintf+0x30>
			OUTC(*fp++);
    2ee2:	f109 0901 	add.w	r9, r9, #1
    2ee6:	4629      	mov	r1, r5
    2ee8:	47b0      	blx	r6
    2eea:	2800      	cmp	r0, #0
    2eec:	f2c0 82cd 	blt.w	348a <cbvprintf+0x5c6>
    2ef0:	3401      	adds	r4, #1
			continue;
    2ef2:	e7ef      	b.n	2ed4 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2ef4:	2300      	movs	r3, #0
    2ef6:	9304      	str	r3, [sp, #16]
    2ef8:	9305      	str	r3, [sp, #20]
    2efa:	9306      	str	r3, [sp, #24]
    2efc:	9307      	str	r3, [sp, #28]
    2efe:	9308      	str	r3, [sp, #32]
    2f00:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    2f02:	4649      	mov	r1, r9
    2f04:	a806      	add	r0, sp, #24
    2f06:	f7ff fe53 	bl	2bb0 <extract_conversion>
    2f0a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2f0c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2f10:	f013 0f01 	tst.w	r3, #1
    2f14:	f000 8097 	beq.w	3046 <cbvprintf+0x182>
			width = va_arg(ap, int);
    2f18:	9b03      	ldr	r3, [sp, #12]
    2f1a:	1d1a      	adds	r2, r3, #4
    2f1c:	9203      	str	r2, [sp, #12]
    2f1e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2f20:	2f00      	cmp	r7, #0
    2f22:	f2c0 8088 	blt.w	3036 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2f26:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2f2a:	f013 0f04 	tst.w	r3, #4
    2f2e:	f000 809c 	beq.w	306a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    2f32:	9b03      	ldr	r3, [sp, #12]
    2f34:	1d1a      	adds	r2, r3, #4
    2f36:	9203      	str	r2, [sp, #12]
    2f38:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    2f3c:	f1ba 0f00 	cmp.w	sl, #0
    2f40:	f2c0 808a 	blt.w	3058 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2f44:	2300      	movs	r3, #0
    2f46:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    2f48:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2f4a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2f4e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2f52:	f89d 1019 	ldrb.w	r1, [sp, #25]
    2f56:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2f5a:	2b01      	cmp	r3, #1
    2f5c:	f000 808e 	beq.w	307c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2f60:	2b02      	cmp	r3, #2
    2f62:	f000 80d3 	beq.w	310c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2f66:	2b04      	cmp	r3, #4
    2f68:	f000 8124 	beq.w	31b4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2f6c:	2b03      	cmp	r3, #3
    2f6e:	f000 813b 	beq.w	31e8 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2f72:	f89d 8018 	ldrb.w	r8, [sp, #24]
    2f76:	f018 0b03 	ands.w	fp, r8, #3
    2f7a:	f040 813b 	bne.w	31f4 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2f7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f82:	3b25      	subs	r3, #37	; 0x25
    2f84:	2b53      	cmp	r3, #83	; 0x53
    2f86:	f200 81e6 	bhi.w	3356 <cbvprintf+0x492>
    2f8a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f8e:	0140      	.short	0x0140
    2f90:	01e401e4 	.word	0x01e401e4
    2f94:	01e401e4 	.word	0x01e401e4
    2f98:	01e401e4 	.word	0x01e401e4
    2f9c:	01e401e4 	.word	0x01e401e4
    2fa0:	01e401e4 	.word	0x01e401e4
    2fa4:	01e401e4 	.word	0x01e401e4
    2fa8:	01e401e4 	.word	0x01e401e4
    2fac:	01e401e4 	.word	0x01e401e4
    2fb0:	01e401e4 	.word	0x01e401e4
    2fb4:	01e401e4 	.word	0x01e401e4
    2fb8:	01e401e4 	.word	0x01e401e4
    2fbc:	01e401e4 	.word	0x01e401e4
    2fc0:	01e401e4 	.word	0x01e401e4
    2fc4:	01e401e4 	.word	0x01e401e4
    2fc8:	01e401e4 	.word	0x01e401e4
    2fcc:	01e401e4 	.word	0x01e401e4
    2fd0:	01e401e4 	.word	0x01e401e4
    2fd4:	01e401e4 	.word	0x01e401e4
    2fd8:	01e401e4 	.word	0x01e401e4
    2fdc:	01e401e4 	.word	0x01e401e4
    2fe0:	01e401e4 	.word	0x01e401e4
    2fe4:	01e401e4 	.word	0x01e401e4
    2fe8:	01e401e4 	.word	0x01e401e4
    2fec:	01e401e4 	.word	0x01e401e4
    2ff0:	01e401e4 	.word	0x01e401e4
    2ff4:	01e40181 	.word	0x01e40181
    2ff8:	01e401e4 	.word	0x01e401e4
    2ffc:	01e401e4 	.word	0x01e401e4
    3000:	01e401e4 	.word	0x01e401e4
    3004:	01e401e4 	.word	0x01e401e4
    3008:	015e01e4 	.word	0x015e01e4
    300c:	01e40167 	.word	0x01e40167
    3010:	01e401e4 	.word	0x01e401e4
    3014:	016701e4 	.word	0x016701e4
    3018:	01e401e4 	.word	0x01e401e4
    301c:	01e401e4 	.word	0x01e401e4
    3020:	018101be 	.word	0x018101be
    3024:	01e401a2 	.word	0x01e401a2
    3028:	014d01e4 	.word	0x014d01e4
    302c:	018101e4 	.word	0x018101e4
    3030:	01e401e4 	.word	0x01e401e4
    3034:	0181      	.short	0x0181
				conv->flag_dash = true;
    3036:	f89d 3018 	ldrb.w	r3, [sp, #24]
    303a:	f043 0304 	orr.w	r3, r3, #4
    303e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    3042:	427f      	negs	r7, r7
    3044:	e76f      	b.n	2f26 <cbvprintf+0x62>
		} else if (conv->width_present) {
    3046:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    304a:	2b00      	cmp	r3, #0
    304c:	db02      	blt.n	3054 <cbvprintf+0x190>
		int width = -1;
    304e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3052:	e768      	b.n	2f26 <cbvprintf+0x62>
			width = conv->width_value;
    3054:	9f07      	ldr	r7, [sp, #28]
    3056:	e766      	b.n	2f26 <cbvprintf+0x62>
				conv->prec_present = false;
    3058:	f89d 3019 	ldrb.w	r3, [sp, #25]
    305c:	f36f 0341 	bfc	r3, #1, #1
    3060:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    3064:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    3068:	e76c      	b.n	2f44 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    306a:	f013 0f02 	tst.w	r3, #2
    306e:	d002      	beq.n	3076 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    3070:	f8dd a020 	ldr.w	sl, [sp, #32]
    3074:	e766      	b.n	2f44 <cbvprintf+0x80>
		int precision = -1;
    3076:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    307a:	e763      	b.n	2f44 <cbvprintf+0x80>
			switch (length_mod) {
    307c:	1ecb      	subs	r3, r1, #3
    307e:	2b04      	cmp	r3, #4
    3080:	d804      	bhi.n	308c <cbvprintf+0x1c8>
    3082:	e8df f003 	tbb	[pc, r3]
    3086:	1d0b      	.short	0x1d0b
    3088:	3529      	.short	0x3529
    308a:	35          	.byte	0x35
    308b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    308c:	9b03      	ldr	r3, [sp, #12]
    308e:	1d1a      	adds	r2, r3, #4
    3090:	9203      	str	r2, [sp, #12]
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	17da      	asrs	r2, r3, #31
    3096:	9304      	str	r3, [sp, #16]
    3098:	9205      	str	r2, [sp, #20]
				break;
    309a:	e006      	b.n	30aa <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	1d1a      	adds	r2, r3, #4
    30a0:	9203      	str	r2, [sp, #12]
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	17da      	asrs	r2, r3, #31
    30a6:	9304      	str	r3, [sp, #16]
    30a8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    30aa:	2901      	cmp	r1, #1
    30ac:	d028      	beq.n	3100 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    30ae:	2902      	cmp	r1, #2
    30b0:	f47f af5f 	bne.w	2f72 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    30b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    30b8:	17da      	asrs	r2, r3, #31
    30ba:	9304      	str	r3, [sp, #16]
    30bc:	9205      	str	r2, [sp, #20]
    30be:	e758      	b.n	2f72 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    30c0:	9b03      	ldr	r3, [sp, #12]
    30c2:	3307      	adds	r3, #7
    30c4:	f023 0307 	bic.w	r3, r3, #7
    30c8:	f103 0208 	add.w	r2, r3, #8
    30cc:	9203      	str	r2, [sp, #12]
    30ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    30d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    30d6:	e7e8      	b.n	30aa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    30d8:	9b03      	ldr	r3, [sp, #12]
    30da:	3307      	adds	r3, #7
    30dc:	f023 0307 	bic.w	r3, r3, #7
    30e0:	f103 0208 	add.w	r2, r3, #8
    30e4:	9203      	str	r2, [sp, #12]
    30e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    30ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    30ee:	e7dc      	b.n	30aa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    30f0:	9b03      	ldr	r3, [sp, #12]
    30f2:	1d1a      	adds	r2, r3, #4
    30f4:	9203      	str	r2, [sp, #12]
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	17da      	asrs	r2, r3, #31
				value->sint =
    30fa:	9304      	str	r3, [sp, #16]
    30fc:	9205      	str	r2, [sp, #20]
				break;
    30fe:	e7d4      	b.n	30aa <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    3100:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3104:	9304      	str	r3, [sp, #16]
    3106:	2300      	movs	r3, #0
    3108:	9305      	str	r3, [sp, #20]
    310a:	e732      	b.n	2f72 <cbvprintf+0xae>
			switch (length_mod) {
    310c:	1ecb      	subs	r3, r1, #3
    310e:	2b04      	cmp	r3, #4
    3110:	d804      	bhi.n	311c <cbvprintf+0x258>
    3112:	e8df f003 	tbb	[pc, r3]
    3116:	1f0b      	.short	0x1f0b
    3118:	4135      	.short	0x4135
    311a:	41          	.byte	0x41
    311b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    311c:	9b03      	ldr	r3, [sp, #12]
    311e:	1d1a      	adds	r2, r3, #4
    3120:	9203      	str	r2, [sp, #12]
    3122:	681b      	ldr	r3, [r3, #0]
    3124:	9304      	str	r3, [sp, #16]
    3126:	2300      	movs	r3, #0
    3128:	9305      	str	r3, [sp, #20]
				break;
    312a:	e01e      	b.n	316a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    312c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    3130:	2b63      	cmp	r3, #99	; 0x63
    3132:	d007      	beq.n	3144 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    3134:	9b03      	ldr	r3, [sp, #12]
    3136:	1d1a      	adds	r2, r3, #4
    3138:	9203      	str	r2, [sp, #12]
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	9304      	str	r3, [sp, #16]
    313e:	2300      	movs	r3, #0
    3140:	9305      	str	r3, [sp, #20]
    3142:	e012      	b.n	316a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    3144:	9b03      	ldr	r3, [sp, #12]
    3146:	1d1a      	adds	r2, r3, #4
    3148:	9203      	str	r2, [sp, #12]
    314a:	681b      	ldr	r3, [r3, #0]
    314c:	9304      	str	r3, [sp, #16]
    314e:	2300      	movs	r3, #0
    3150:	9305      	str	r3, [sp, #20]
    3152:	e00a      	b.n	316a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    3154:	9b03      	ldr	r3, [sp, #12]
    3156:	3307      	adds	r3, #7
    3158:	f023 0307 	bic.w	r3, r3, #7
    315c:	f103 0208 	add.w	r2, r3, #8
    3160:	9203      	str	r2, [sp, #12]
    3162:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3166:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    316a:	2901      	cmp	r1, #1
    316c:	d01c      	beq.n	31a8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    316e:	2902      	cmp	r1, #2
    3170:	f47f aeff 	bne.w	2f72 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    3174:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3178:	9304      	str	r3, [sp, #16]
    317a:	2300      	movs	r3, #0
    317c:	9305      	str	r3, [sp, #20]
    317e:	e6f8      	b.n	2f72 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    3180:	9b03      	ldr	r3, [sp, #12]
    3182:	3307      	adds	r3, #7
    3184:	f023 0307 	bic.w	r3, r3, #7
    3188:	f103 0208 	add.w	r2, r3, #8
    318c:	9203      	str	r2, [sp, #12]
    318e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3192:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    3196:	e7e8      	b.n	316a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    3198:	9b03      	ldr	r3, [sp, #12]
    319a:	1d1a      	adds	r2, r3, #4
    319c:	9203      	str	r2, [sp, #12]
    319e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    31a0:	9304      	str	r3, [sp, #16]
    31a2:	2300      	movs	r3, #0
    31a4:	9305      	str	r3, [sp, #20]
				break;
    31a6:	e7e0      	b.n	316a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    31a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    31ac:	9304      	str	r3, [sp, #16]
    31ae:	2300      	movs	r3, #0
    31b0:	9305      	str	r3, [sp, #20]
    31b2:	e6de      	b.n	2f72 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    31b4:	2908      	cmp	r1, #8
    31b6:	d00b      	beq.n	31d0 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    31b8:	9b03      	ldr	r3, [sp, #12]
    31ba:	3307      	adds	r3, #7
    31bc:	f023 0307 	bic.w	r3, r3, #7
    31c0:	f103 0208 	add.w	r2, r3, #8
    31c4:	9203      	str	r2, [sp, #12]
    31c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    31ce:	e6d0      	b.n	2f72 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    31d0:	9b03      	ldr	r3, [sp, #12]
    31d2:	3307      	adds	r3, #7
    31d4:	f023 0307 	bic.w	r3, r3, #7
    31d8:	f103 0208 	add.w	r2, r3, #8
    31dc:	9203      	str	r2, [sp, #12]
    31de:	e9d3 2300 	ldrd	r2, r3, [r3]
    31e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    31e6:	e6c4      	b.n	2f72 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    31e8:	9b03      	ldr	r3, [sp, #12]
    31ea:	1d1a      	adds	r2, r3, #4
    31ec:	9203      	str	r2, [sp, #12]
    31ee:	681b      	ldr	r3, [r3, #0]
    31f0:	9304      	str	r3, [sp, #16]
    31f2:	e6be      	b.n	2f72 <cbvprintf+0xae>
			OUTS(sp, fp);
    31f4:	9f02      	ldr	r7, [sp, #8]
    31f6:	463b      	mov	r3, r7
    31f8:	464a      	mov	r2, r9
    31fa:	4629      	mov	r1, r5
    31fc:	4630      	mov	r0, r6
    31fe:	f008 ff92 	bl	c126 <outs>
    3202:	2800      	cmp	r0, #0
    3204:	f2c0 8141 	blt.w	348a <cbvprintf+0x5c6>
    3208:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    320a:	46b9      	mov	r9, r7
			continue;
    320c:	e662      	b.n	2ed4 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    320e:	4629      	mov	r1, r5
    3210:	2025      	movs	r0, #37	; 0x25
    3212:	47b0      	blx	r6
    3214:	2800      	cmp	r0, #0
    3216:	f2c0 8138 	blt.w	348a <cbvprintf+0x5c6>
    321a:	3401      	adds	r4, #1
		char sign = 0;
    321c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    321e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    3222:	f04f 0900 	mov.w	r9, #0
			break;
    3226:	e09b      	b.n	3360 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    3228:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    322c:	f1ba 0f00 	cmp.w	sl, #0
    3230:	db07      	blt.n	3242 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    3232:	4651      	mov	r1, sl
    3234:	4648      	mov	r0, r9
    3236:	f009 f91a 	bl	c46e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    323a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    323e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    3240:	e08e      	b.n	3360 <cbvprintf+0x49c>
				len = strlen(bps);
    3242:	4648      	mov	r0, r9
    3244:	f009 f90a 	bl	c45c <strlen>
    3248:	e7f7      	b.n	323a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    324a:	9b04      	ldr	r3, [sp, #16]
    324c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    3250:	46d8      	mov	r8, fp
			bpe = buf + 1;
    3252:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    3256:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    325a:	e081      	b.n	3360 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    325c:	f018 0f08 	tst.w	r8, #8
    3260:	d105      	bne.n	326e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    3262:	f018 0810 	ands.w	r8, r8, #16
    3266:	d004      	beq.n	3272 <cbvprintf+0x3ae>
				sign = ' ';
    3268:	f04f 0820 	mov.w	r8, #32
    326c:	e001      	b.n	3272 <cbvprintf+0x3ae>
				sign = '+';
    326e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3272:	9a04      	ldr	r2, [sp, #16]
    3274:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    3276:	2b00      	cmp	r3, #0
    3278:	db02      	blt.n	3280 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    327a:	9204      	str	r2, [sp, #16]
    327c:	9305      	str	r3, [sp, #20]
    327e:	e008      	b.n	3292 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    3280:	4252      	negs	r2, r2
    3282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3286:	9204      	str	r2, [sp, #16]
    3288:	9305      	str	r3, [sp, #20]
				sign = '-';
    328a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    328e:	e000      	b.n	3292 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    3290:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3292:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    3296:	9300      	str	r3, [sp, #0]
    3298:	ab0a      	add	r3, sp, #40	; 0x28
    329a:	aa06      	add	r2, sp, #24
    329c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    32a0:	f008 fed7 	bl	c052 <encode_uint>
    32a4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    32a6:	f1ba 0f00 	cmp.w	sl, #0
    32aa:	f2c0 8088 	blt.w	33be <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    32ae:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    32b2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    32b6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    32ba:	f36f 1286 	bfc	r2, #6, #1
    32be:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    32c2:	459a      	cmp	sl, r3
    32c4:	d97e      	bls.n	33c4 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    32c6:	ebaa 0303 	sub.w	r3, sl, r3
    32ca:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    32cc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    32d0:	e046      	b.n	3360 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    32d2:	9804      	ldr	r0, [sp, #16]
    32d4:	b928      	cbnz	r0, 32e2 <cbvprintf+0x41e>
		char sign = 0;
    32d6:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    32d8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 3490 <cbvprintf+0x5cc>
			bps = "(nil)";
    32dc:	f1aa 0905 	sub.w	r9, sl, #5
    32e0:	e03e      	b.n	3360 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    32e2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    32e6:	9300      	str	r3, [sp, #0]
    32e8:	ab0a      	add	r3, sp, #40	; 0x28
    32ea:	aa06      	add	r2, sp, #24
    32ec:	2100      	movs	r1, #0
    32ee:	f008 feb0 	bl	c052 <encode_uint>
    32f2:	4681      	mov	r9, r0
				conv->altform_0c = true;
    32f4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    32f8:	f043 0310 	orr.w	r3, r3, #16
    32fc:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    3300:	2378      	movs	r3, #120	; 0x78
    3302:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    3306:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    3308:	e7cd      	b.n	32a6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    330a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    330c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3310:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3314:	2b07      	cmp	r3, #7
    3316:	d806      	bhi.n	3326 <cbvprintf+0x462>
    3318:	e8df f003 	tbb	[pc, r3]
    331c:	0f0d0b04 	.word	0x0f0d0b04
    3320:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    3324:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3326:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    3328:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    332c:	f04f 0900 	mov.w	r9, #0
}
    3330:	e016      	b.n	3360 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    3332:	7014      	strb	r4, [r2, #0]
		break;
    3334:	e7f7      	b.n	3326 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    3336:	8014      	strh	r4, [r2, #0]
		break;
    3338:	e7f5      	b.n	3326 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    333a:	6014      	str	r4, [r2, #0]
		break;
    333c:	e7f3      	b.n	3326 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    333e:	17e3      	asrs	r3, r4, #31
    3340:	6014      	str	r4, [r2, #0]
    3342:	6053      	str	r3, [r2, #4]
		break;
    3344:	e7ef      	b.n	3326 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    3346:	17e3      	asrs	r3, r4, #31
    3348:	6014      	str	r4, [r2, #0]
    334a:	6053      	str	r3, [r2, #4]
		break;
    334c:	e7eb      	b.n	3326 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    334e:	6014      	str	r4, [r2, #0]
		break;
    3350:	e7e9      	b.n	3326 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3352:	6014      	str	r4, [r2, #0]
		break;
    3354:	e7e7      	b.n	3326 <cbvprintf+0x462>
		switch (conv->specifier) {
    3356:	46d8      	mov	r8, fp
    3358:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    335c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3360:	f1b9 0f00 	cmp.w	r9, #0
    3364:	f000 808d 	beq.w	3482 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3368:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    336c:	f1b8 0f00 	cmp.w	r8, #0
    3370:	d000      	beq.n	3374 <cbvprintf+0x4b0>
			nj_len += 1U;
    3372:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    3374:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3378:	f012 0f10 	tst.w	r2, #16
    337c:	d025      	beq.n	33ca <cbvprintf+0x506>
			nj_len += 2U;
    337e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3380:	9907      	ldr	r1, [sp, #28]
    3382:	440b      	add	r3, r1
		if (conv->pad_fp) {
    3384:	f012 0f40 	tst.w	r2, #64	; 0x40
    3388:	d001      	beq.n	338e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    338a:	9a08      	ldr	r2, [sp, #32]
    338c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    338e:	2f00      	cmp	r7, #0
    3390:	dd31      	ble.n	33f6 <cbvprintf+0x532>
			width -= (int)nj_len;
    3392:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3394:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3398:	f013 0f04 	tst.w	r3, #4
    339c:	d12b      	bne.n	33f6 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    339e:	f013 0f40 	tst.w	r3, #64	; 0x40
    33a2:	d017      	beq.n	33d4 <cbvprintf+0x510>
					if (sign != 0) {
    33a4:	f1b8 0f00 	cmp.w	r8, #0
    33a8:	d017      	beq.n	33da <cbvprintf+0x516>
						OUTC(sign);
    33aa:	4629      	mov	r1, r5
    33ac:	4640      	mov	r0, r8
    33ae:	47b0      	blx	r6
    33b0:	2800      	cmp	r0, #0
    33b2:	db6a      	blt.n	348a <cbvprintf+0x5c6>
    33b4:	3401      	adds	r4, #1
						sign = 0;
    33b6:	46d8      	mov	r8, fp
					}
					pad = '0';
    33b8:	f04f 0b30 	mov.w	fp, #48	; 0x30
    33bc:	e00f      	b.n	33de <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    33be:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    33c2:	e7cd      	b.n	3360 <cbvprintf+0x49c>
    33c4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    33c8:	e7ca      	b.n	3360 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    33ca:	f012 0f08 	tst.w	r2, #8
    33ce:	d0d7      	beq.n	3380 <cbvprintf+0x4bc>
			nj_len += 1U;
    33d0:	3301      	adds	r3, #1
    33d2:	e7d5      	b.n	3380 <cbvprintf+0x4bc>
				char pad = ' ';
    33d4:	f04f 0b20 	mov.w	fp, #32
    33d8:	e001      	b.n	33de <cbvprintf+0x51a>
					pad = '0';
    33da:	f04f 0b30 	mov.w	fp, #48	; 0x30
    33de:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    33e0:	1e5f      	subs	r7, r3, #1
    33e2:	2b00      	cmp	r3, #0
    33e4:	dd07      	ble.n	33f6 <cbvprintf+0x532>
					OUTC(pad);
    33e6:	4629      	mov	r1, r5
    33e8:	4658      	mov	r0, fp
    33ea:	47b0      	blx	r6
    33ec:	2800      	cmp	r0, #0
    33ee:	db4c      	blt.n	348a <cbvprintf+0x5c6>
    33f0:	3401      	adds	r4, #1
				while (width-- > 0) {
    33f2:	463b      	mov	r3, r7
    33f4:	e7f4      	b.n	33e0 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    33f6:	f1b8 0f00 	cmp.w	r8, #0
    33fa:	d005      	beq.n	3408 <cbvprintf+0x544>
			OUTC(sign);
    33fc:	4629      	mov	r1, r5
    33fe:	4640      	mov	r0, r8
    3400:	47b0      	blx	r6
    3402:	2800      	cmp	r0, #0
    3404:	db41      	blt.n	348a <cbvprintf+0x5c6>
    3406:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3408:	f89d 301a 	ldrb.w	r3, [sp, #26]
    340c:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3410:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3414:	4313      	orrs	r3, r2
    3416:	d005      	beq.n	3424 <cbvprintf+0x560>
				OUTC('0');
    3418:	4629      	mov	r1, r5
    341a:	2030      	movs	r0, #48	; 0x30
    341c:	47b0      	blx	r6
    341e:	2800      	cmp	r0, #0
    3420:	db33      	blt.n	348a <cbvprintf+0x5c6>
    3422:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3424:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3428:	f013 0f10 	tst.w	r3, #16
    342c:	d006      	beq.n	343c <cbvprintf+0x578>
				OUTC(conv->specifier);
    342e:	4629      	mov	r1, r5
    3430:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3434:	47b0      	blx	r6
    3436:	2800      	cmp	r0, #0
    3438:	db27      	blt.n	348a <cbvprintf+0x5c6>
    343a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    343c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    343e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3442:	2b00      	cmp	r3, #0
    3444:	dd07      	ble.n	3456 <cbvprintf+0x592>
				OUTC('0');
    3446:	4629      	mov	r1, r5
    3448:	2030      	movs	r0, #48	; 0x30
    344a:	47b0      	blx	r6
    344c:	2800      	cmp	r0, #0
    344e:	db1c      	blt.n	348a <cbvprintf+0x5c6>
    3450:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3452:	4643      	mov	r3, r8
    3454:	e7f3      	b.n	343e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    3456:	4653      	mov	r3, sl
    3458:	464a      	mov	r2, r9
    345a:	4629      	mov	r1, r5
    345c:	4630      	mov	r0, r6
    345e:	f008 fe62 	bl	c126 <outs>
    3462:	2800      	cmp	r0, #0
    3464:	db11      	blt.n	348a <cbvprintf+0x5c6>
    3466:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3468:	2f00      	cmp	r7, #0
    346a:	dd07      	ble.n	347c <cbvprintf+0x5b8>
			OUTC(' ');
    346c:	4629      	mov	r1, r5
    346e:	2020      	movs	r0, #32
    3470:	47b0      	blx	r6
    3472:	2800      	cmp	r0, #0
    3474:	db09      	blt.n	348a <cbvprintf+0x5c6>
    3476:	3401      	adds	r4, #1
			--width;
    3478:	3f01      	subs	r7, #1
    347a:	e7f5      	b.n	3468 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    347c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3480:	e528      	b.n	2ed4 <cbvprintf+0x10>
    3482:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3486:	e525      	b.n	2ed4 <cbvprintf+0x10>
		}
	}

	return count;
    3488:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    348a:	b011      	add	sp, #68	; 0x44
    348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3490:	0000e025 	.word	0x0000e025

00003494 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    3494:	b508      	push	{r3, lr}
	__asm__ volatile(
    3496:	f04f 0220 	mov.w	r2, #32
    349a:	f3ef 8311 	mrs	r3, BASEPRI
    349e:	f382 8812 	msr	BASEPRI_MAX, r2
    34a2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    34a6:	f001 ff27 	bl	52f8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    34aa:	4803      	ldr	r0, [pc, #12]	; (34b8 <sys_reboot+0x24>)
    34ac:	f008 fcd7 	bl	be5e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    34b0:	f000 ffa0 	bl	43f4 <arch_cpu_idle>
    34b4:	e7fc      	b.n	34b0 <sys_reboot+0x1c>
    34b6:	bf00      	nop
    34b8:	0000e028 	.word	0x0000e028

000034bc <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    34bc:	2900      	cmp	r1, #0
    34be:	d150      	bne.n	3562 <msg_process+0xa6>
{
    34c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    34c4:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    34c6:	2400      	movs	r4, #0
    34c8:	e022      	b.n	3510 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    34ca:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3564 <msg_process+0xa8>
    34ce:	f44f 7399 	mov.w	r3, #306	; 0x132
    34d2:	464a      	mov	r2, r9
    34d4:	4924      	ldr	r1, [pc, #144]	; (3568 <msg_process+0xac>)
    34d6:	4825      	ldr	r0, [pc, #148]	; (356c <msg_process+0xb0>)
    34d8:	f008 fe46 	bl	c168 <assert_print>
    34dc:	f44f 7199 	mov.w	r1, #306	; 0x132
    34e0:	4648      	mov	r0, r9
    34e2:	f008 fe3a 	bl	c15a <assert_post_action>
    34e6:	e01f      	b.n	3528 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    34e8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 3564 <msg_process+0xa8>
    34ec:	2385      	movs	r3, #133	; 0x85
    34ee:	464a      	mov	r2, r9
    34f0:	491d      	ldr	r1, [pc, #116]	; (3568 <msg_process+0xac>)
    34f2:	481e      	ldr	r0, [pc, #120]	; (356c <msg_process+0xb0>)
    34f4:	f008 fe38 	bl	c168 <assert_print>
    34f8:	2185      	movs	r1, #133	; 0x85
    34fa:	4648      	mov	r0, r9
    34fc:	f008 fe2d 	bl	c15a <assert_post_action>
    3500:	e01e      	b.n	3540 <msg_process+0x84>
	backend->api->process(backend, msg);
    3502:	f858 3005 	ldr.w	r3, [r8, r5]
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	4639      	mov	r1, r7
    350a:	4630      	mov	r0, r6
    350c:	4798      	blx	r3
    350e:	3401      	adds	r4, #1
    3510:	4b17      	ldr	r3, [pc, #92]	; (3570 <msg_process+0xb4>)
    3512:	4a18      	ldr	r2, [pc, #96]	; (3574 <msg_process+0xb8>)
    3514:	1a9b      	subs	r3, r3, r2
    3516:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    351a:	da20      	bge.n	355e <msg_process+0xa2>
	return &__log_backends_start[idx];
    351c:	ea4f 1804 	mov.w	r8, r4, lsl #4
    3520:	4d14      	ldr	r5, [pc, #80]	; (3574 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    3522:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    3526:	d0d0      	beq.n	34ca <msg_process+0xe>
	return backend->cb->active;
    3528:	6873      	ldr	r3, [r6, #4]
    352a:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    352c:	2b00      	cmp	r3, #0
    352e:	d0ee      	beq.n	350e <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    3530:	4639      	mov	r1, r7
    3532:	4630      	mov	r0, r6
    3534:	f008 fe29 	bl	c18a <msg_filter_check>
			if (log_backend_is_active(backend) &&
    3538:	2800      	cmp	r0, #0
    353a:	d0e8      	beq.n	350e <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    353c:	2e00      	cmp	r6, #0
    353e:	d0d3      	beq.n	34e8 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    3540:	2f00      	cmp	r7, #0
    3542:	d1de      	bne.n	3502 <msg_process+0x46>
    3544:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3564 <msg_process+0xa8>
    3548:	2386      	movs	r3, #134	; 0x86
    354a:	464a      	mov	r2, r9
    354c:	490a      	ldr	r1, [pc, #40]	; (3578 <msg_process+0xbc>)
    354e:	4807      	ldr	r0, [pc, #28]	; (356c <msg_process+0xb0>)
    3550:	f008 fe0a 	bl	c168 <assert_print>
    3554:	2186      	movs	r1, #134	; 0x86
    3556:	4648      	mov	r0, r9
    3558:	f008 fdff 	bl	c15a <assert_post_action>
    355c:	e7d1      	b.n	3502 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    355e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3562:	4770      	bx	lr
    3564:	0000e054 	.word	0x0000e054
    3568:	0000e08c 	.word	0x0000e08c
    356c:	0000d51c 	.word	0x0000d51c
    3570:	0000d3c0 	.word	0x0000d3c0
    3574:	0000d3a0 	.word	0x0000d3a0
    3578:	0000e0a4 	.word	0x0000e0a4

0000357c <log_format_func_t_get>:
}
    357c:	4b01      	ldr	r3, [pc, #4]	; (3584 <log_format_func_t_get+0x8>)
    357e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3582:	4770      	bx	lr
    3584:	0000e128 	.word	0x0000e128

00003588 <log_init>:
{
    3588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    358a:	4b20      	ldr	r3, [pc, #128]	; (360c <log_init+0x84>)
    358c:	4a20      	ldr	r2, [pc, #128]	; (3610 <log_init+0x88>)
    358e:	1a9b      	subs	r3, r3, r2
    3590:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3592:	2b90      	cmp	r3, #144	; 0x90
    3594:	d80e      	bhi.n	35b4 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3596:	4b1f      	ldr	r3, [pc, #124]	; (3614 <log_init+0x8c>)
    3598:	f3bf 8f5b 	dmb	ish
    359c:	e853 2f00 	ldrex	r2, [r3]
    35a0:	1c51      	adds	r1, r2, #1
    35a2:	e843 1000 	strex	r0, r1, [r3]
    35a6:	2800      	cmp	r0, #0
    35a8:	d1f8      	bne.n	359c <log_init+0x14>
    35aa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    35ae:	bb5a      	cbnz	r2, 3608 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    35b0:	2400      	movs	r4, #0
    35b2:	e017      	b.n	35e4 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    35b4:	4c18      	ldr	r4, [pc, #96]	; (3618 <log_init+0x90>)
    35b6:	f240 2373 	movw	r3, #627	; 0x273
    35ba:	4622      	mov	r2, r4
    35bc:	4917      	ldr	r1, [pc, #92]	; (361c <log_init+0x94>)
    35be:	4818      	ldr	r0, [pc, #96]	; (3620 <log_init+0x98>)
    35c0:	f008 fdd2 	bl	c168 <assert_print>
    35c4:	f240 2173 	movw	r1, #627	; 0x273
    35c8:	4620      	mov	r0, r4
    35ca:	f008 fdc6 	bl	c15a <assert_post_action>
    35ce:	e7e2      	b.n	3596 <log_init+0xe>
					   backend->cb->ctx,
    35d0:	4b0f      	ldr	r3, [pc, #60]	; (3610 <log_init+0x88>)
    35d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    35d6:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    35d8:	2204      	movs	r2, #4
    35da:	6819      	ldr	r1, [r3, #0]
    35dc:	4628      	mov	r0, r5
    35de:	f000 f8d3 	bl	3788 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    35e2:	3401      	adds	r4, #1
    35e4:	42b4      	cmp	r4, r6
    35e6:	da0f      	bge.n	3608 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    35e8:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    35ea:	4d09      	ldr	r5, [pc, #36]	; (3610 <log_init+0x88>)
    35ec:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    35f0:	7b2b      	ldrb	r3, [r5, #12]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d0f5      	beq.n	35e2 <log_init+0x5a>
			if (backend->api->init != NULL) {
    35f6:	0123      	lsls	r3, r4, #4
    35f8:	4a05      	ldr	r2, [pc, #20]	; (3610 <log_init+0x88>)
    35fa:	58d3      	ldr	r3, [r2, r3]
    35fc:	699b      	ldr	r3, [r3, #24]
    35fe:	2b00      	cmp	r3, #0
    3600:	d0e6      	beq.n	35d0 <log_init+0x48>
				backend->api->init(backend);
    3602:	4628      	mov	r0, r5
    3604:	4798      	blx	r3
    3606:	e7e3      	b.n	35d0 <log_init+0x48>
}
    3608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    360a:	bf00      	nop
    360c:	0000d3c0 	.word	0x0000d3c0
    3610:	0000d3a0 	.word	0x0000d3a0
    3614:	20000704 	.word	0x20000704
    3618:	0000e0b8 	.word	0x0000e0b8
    361c:	0000e100 	.word	0x0000e100
    3620:	0000d51c 	.word	0x0000d51c

00003624 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    3624:	b138      	cbz	r0, 3636 <log_set_timestamp_func+0x12>
{
    3626:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    3628:	4a04      	ldr	r2, [pc, #16]	; (363c <log_set_timestamp_func+0x18>)
    362a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    362c:	4608      	mov	r0, r1
    362e:	f000 fabf 	bl	3bb0 <log_output_timestamp_freq_set>
	return 0;
    3632:	2000      	movs	r0, #0
}
    3634:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3636:	f06f 0015 	mvn.w	r0, #21
}
    363a:	4770      	bx	lr
    363c:	2000009c 	.word	0x2000009c

00003640 <log_core_init>:
{
    3640:	b508      	push	{r3, lr}
	panic_mode = false;
    3642:	2300      	movs	r3, #0
    3644:	4a04      	ldr	r2, [pc, #16]	; (3658 <log_core_init+0x18>)
    3646:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3648:	4a04      	ldr	r2, [pc, #16]	; (365c <log_core_init+0x1c>)
    364a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    364c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3650:	4803      	ldr	r0, [pc, #12]	; (3660 <log_core_init+0x20>)
    3652:	f7ff ffe7 	bl	3624 <log_set_timestamp_func>
}
    3656:	bd08      	pop	{r3, pc}
    3658:	20001455 	.word	0x20001455
    365c:	20000700 	.word	0x20000700
    3660:	0000c18f 	.word	0x0000c18f

00003664 <z_impl_log_panic>:
	if (panic_mode) {
    3664:	4b20      	ldr	r3, [pc, #128]	; (36e8 <z_impl_log_panic+0x84>)
    3666:	781b      	ldrb	r3, [r3, #0]
    3668:	b103      	cbz	r3, 366c <z_impl_log_panic+0x8>
    366a:	4770      	bx	lr
{
    366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    3670:	f7ff ff8a 	bl	3588 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3674:	2400      	movs	r4, #0
    3676:	e013      	b.n	36a0 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    3678:	f8df 8070 	ldr.w	r8, [pc, #112]	; 36ec <z_impl_log_panic+0x88>
    367c:	f44f 7399 	mov.w	r3, #306	; 0x132
    3680:	4642      	mov	r2, r8
    3682:	491b      	ldr	r1, [pc, #108]	; (36f0 <z_impl_log_panic+0x8c>)
    3684:	481b      	ldr	r0, [pc, #108]	; (36f4 <z_impl_log_panic+0x90>)
    3686:	f008 fd6f 	bl	c168 <assert_print>
    368a:	f44f 7199 	mov.w	r1, #306	; 0x132
    368e:	4640      	mov	r0, r8
    3690:	f008 fd63 	bl	c15a <assert_post_action>
    3694:	e00f      	b.n	36b6 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    3696:	597b      	ldr	r3, [r7, r5]
    3698:	695b      	ldr	r3, [r3, #20]
    369a:	4630      	mov	r0, r6
    369c:	4798      	blx	r3
    369e:	3401      	adds	r4, #1
    36a0:	4b15      	ldr	r3, [pc, #84]	; (36f8 <z_impl_log_panic+0x94>)
    36a2:	4a16      	ldr	r2, [pc, #88]	; (36fc <z_impl_log_panic+0x98>)
    36a4:	1a9b      	subs	r3, r3, r2
    36a6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    36aa:	da17      	bge.n	36dc <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    36ac:	0127      	lsls	r7, r4, #4
    36ae:	4d13      	ldr	r5, [pc, #76]	; (36fc <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    36b0:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    36b4:	d0e0      	beq.n	3678 <z_impl_log_panic+0x14>
	return backend->cb->active;
    36b6:	6873      	ldr	r3, [r6, #4]
    36b8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    36ba:	2b00      	cmp	r3, #0
    36bc:	d0ef      	beq.n	369e <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    36be:	2e00      	cmp	r6, #0
    36c0:	d1e9      	bne.n	3696 <z_impl_log_panic+0x32>
    36c2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 36ec <z_impl_log_panic+0x88>
    36c6:	23d7      	movs	r3, #215	; 0xd7
    36c8:	4642      	mov	r2, r8
    36ca:	4909      	ldr	r1, [pc, #36]	; (36f0 <z_impl_log_panic+0x8c>)
    36cc:	4809      	ldr	r0, [pc, #36]	; (36f4 <z_impl_log_panic+0x90>)
    36ce:	f008 fd4b 	bl	c168 <assert_print>
    36d2:	21d7      	movs	r1, #215	; 0xd7
    36d4:	4640      	mov	r0, r8
    36d6:	f008 fd40 	bl	c15a <assert_post_action>
    36da:	e7dc      	b.n	3696 <z_impl_log_panic+0x32>
	panic_mode = true;
    36dc:	4b02      	ldr	r3, [pc, #8]	; (36e8 <z_impl_log_panic+0x84>)
    36de:	2201      	movs	r2, #1
    36e0:	701a      	strb	r2, [r3, #0]
}
    36e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36e6:	bf00      	nop
    36e8:	20001455 	.word	0x20001455
    36ec:	0000e054 	.word	0x0000e054
    36f0:	0000e08c 	.word	0x0000e08c
    36f4:	0000d51c 	.word	0x0000d51c
    36f8:	0000d3c0 	.word	0x0000d3c0
    36fc:	0000d3a0 	.word	0x0000d3a0

00003700 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3700:	4b01      	ldr	r3, [pc, #4]	; (3708 <z_log_notify_backend_enabled+0x8>)
    3702:	2201      	movs	r2, #1
    3704:	701a      	strb	r2, [r3, #0]
}
    3706:	4770      	bx	lr
    3708:	20001454 	.word	0x20001454

0000370c <z_log_dropped>:
    370c:	4b0d      	ldr	r3, [pc, #52]	; (3744 <z_log_dropped+0x38>)
    370e:	f3bf 8f5b 	dmb	ish
    3712:	e853 2f00 	ldrex	r2, [r3]
    3716:	3201      	adds	r2, #1
    3718:	e843 2100 	strex	r1, r2, [r3]
    371c:	2900      	cmp	r1, #0
    371e:	d1f8      	bne.n	3712 <z_log_dropped+0x6>
    3720:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    3724:	b900      	cbnz	r0, 3728 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    3726:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3728:	4b07      	ldr	r3, [pc, #28]	; (3748 <z_log_dropped+0x3c>)
    372a:	f3bf 8f5b 	dmb	ish
    372e:	e853 2f00 	ldrex	r2, [r3]
    3732:	3a01      	subs	r2, #1
    3734:	e843 2100 	strex	r1, r2, [r3]
    3738:	2900      	cmp	r1, #0
    373a:	d1f8      	bne.n	372e <z_log_dropped+0x22>
    373c:	f3bf 8f5b 	dmb	ish
    3740:	e7f1      	b.n	3726 <z_log_dropped+0x1a>
    3742:	bf00      	nop
    3744:	20000700 	.word	0x20000700
    3748:	200006fc 	.word	0x200006fc

0000374c <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    374c:	b510      	push	{r4, lr}
    374e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3750:	4b04      	ldr	r3, [pc, #16]	; (3764 <z_log_msg2_commit+0x18>)
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	4798      	blx	r3
    3756:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    3758:	2100      	movs	r1, #0
    375a:	4620      	mov	r0, r4
    375c:	f7ff feae 	bl	34bc <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3760:	bd10      	pop	{r4, pc}
    3762:	bf00      	nop
    3764:	2000009c 	.word	0x2000009c

00003768 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3768:	4b05      	ldr	r3, [pc, #20]	; (3780 <log_source_name_get+0x18>)
    376a:	4a06      	ldr	r2, [pc, #24]	; (3784 <log_source_name_get+0x1c>)
    376c:	1a9b      	subs	r3, r3, r2
    376e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    3772:	d202      	bcs.n	377a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    3774:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3778:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    377a:	2000      	movs	r0, #0
}
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	0000d3a0 	.word	0x0000d3a0
    3784:	0000d350 	.word	0x0000d350

00003788 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378a:	4604      	mov	r4, r0
    378c:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    378e:	4d1e      	ldr	r5, [pc, #120]	; (3808 <log_backend_enable+0x80>)
    3790:	1b45      	subs	r5, r0, r5
    3792:	112d      	asrs	r5, r5, #4
    3794:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3796:	6803      	ldr	r3, [r0, #0]
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	b163      	cbz	r3, 37b6 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    379c:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    379e:	b1cc      	cbz	r4, 37d4 <log_backend_enable+0x4c>
	backend->cb->id = id;
    37a0:	6863      	ldr	r3, [r4, #4]
    37a2:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    37a4:	b314      	cbz	r4, 37ec <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    37a6:	6863      	ldr	r3, [r4, #4]
    37a8:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    37aa:	6863      	ldr	r3, [r4, #4]
    37ac:	2201      	movs	r2, #1
    37ae:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    37b0:	f7ff ffa6 	bl	3700 <z_log_notify_backend_enabled>
}
    37b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    37b6:	4f15      	ldr	r7, [pc, #84]	; (380c <log_backend_enable+0x84>)
    37b8:	23bb      	movs	r3, #187	; 0xbb
    37ba:	463a      	mov	r2, r7
    37bc:	4914      	ldr	r1, [pc, #80]	; (3810 <log_backend_enable+0x88>)
    37be:	4815      	ldr	r0, [pc, #84]	; (3814 <log_backend_enable+0x8c>)
    37c0:	f008 fcd2 	bl	c168 <assert_print>
    37c4:	4814      	ldr	r0, [pc, #80]	; (3818 <log_backend_enable+0x90>)
    37c6:	f008 fccf 	bl	c168 <assert_print>
    37ca:	21bb      	movs	r1, #187	; 0xbb
    37cc:	4638      	mov	r0, r7
    37ce:	f008 fcc4 	bl	c15a <assert_post_action>
    37d2:	e7e3      	b.n	379c <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    37d4:	4f11      	ldr	r7, [pc, #68]	; (381c <log_backend_enable+0x94>)
    37d6:	23e6      	movs	r3, #230	; 0xe6
    37d8:	463a      	mov	r2, r7
    37da:	4911      	ldr	r1, [pc, #68]	; (3820 <log_backend_enable+0x98>)
    37dc:	480d      	ldr	r0, [pc, #52]	; (3814 <log_backend_enable+0x8c>)
    37de:	f008 fcc3 	bl	c168 <assert_print>
    37e2:	21e6      	movs	r1, #230	; 0xe6
    37e4:	4638      	mov	r0, r7
    37e6:	f008 fcb8 	bl	c15a <assert_post_action>
    37ea:	e7d9      	b.n	37a0 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    37ec:	4d0b      	ldr	r5, [pc, #44]	; (381c <log_backend_enable+0x94>)
    37ee:	f240 1317 	movw	r3, #279	; 0x117
    37f2:	462a      	mov	r2, r5
    37f4:	490a      	ldr	r1, [pc, #40]	; (3820 <log_backend_enable+0x98>)
    37f6:	4807      	ldr	r0, [pc, #28]	; (3814 <log_backend_enable+0x8c>)
    37f8:	f008 fcb6 	bl	c168 <assert_print>
    37fc:	f240 1117 	movw	r1, #279	; 0x117
    3800:	4628      	mov	r0, r5
    3802:	f008 fcaa 	bl	c15a <assert_post_action>
    3806:	e7ce      	b.n	37a6 <log_backend_enable+0x1e>
    3808:	0000d3a0 	.word	0x0000d3a0
    380c:	0000e134 	.word	0x0000e134
    3810:	0000e190 	.word	0x0000e190
    3814:	0000d51c 	.word	0x0000d51c
    3818:	0000e1a8 	.word	0x0000e1a8
    381c:	0000e054 	.word	0x0000e054
    3820:	0000e08c 	.word	0x0000e08c

00003824 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3824:	b40e      	push	{r1, r2, r3}
    3826:	b500      	push	{lr}
    3828:	b082      	sub	sp, #8
    382a:	4601      	mov	r1, r0
    382c:	ab03      	add	r3, sp, #12
    382e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    3832:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3834:	4803      	ldr	r0, [pc, #12]	; (3844 <print_formatted+0x20>)
    3836:	f7ff fb45 	bl	2ec4 <cbvprintf>
	va_end(args);

	return length;
}
    383a:	b002      	add	sp, #8
    383c:	f85d eb04 	ldr.w	lr, [sp], #4
    3840:	b003      	add	sp, #12
    3842:	4770      	bx	lr
    3844:	0000c1c3 	.word	0x0000c1c3

00003848 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    3848:	b530      	push	{r4, r5, lr}
    384a:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    384c:	f011 0f44 	tst.w	r1, #68	; 0x44
    3850:	d005      	beq.n	385e <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    3852:	4b1a      	ldr	r3, [pc, #104]	; (38bc <timestamp_print+0x74>)
    3854:	681c      	ldr	r4, [r3, #0]
    3856:	b934      	cbnz	r4, 3866 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    3858:	2000      	movs	r0, #0
	}

	return length;
}
    385a:	b005      	add	sp, #20
    385c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    385e:	4918      	ldr	r1, [pc, #96]	; (38c0 <timestamp_print+0x78>)
    3860:	f7ff ffe0 	bl	3824 <print_formatted>
    3864:	e7f9      	b.n	385a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    3866:	4b17      	ldr	r3, [pc, #92]	; (38c4 <timestamp_print+0x7c>)
    3868:	6819      	ldr	r1, [r3, #0]
    386a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    386e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    3872:	4a15      	ldr	r2, [pc, #84]	; (38c8 <timestamp_print+0x80>)
    3874:	fba2 320c 	umull	r3, r2, r2, ip
    3878:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    387a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    387e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    3882:	4b12      	ldr	r3, [pc, #72]	; (38cc <timestamp_print+0x84>)
    3884:	fba3 530e 	umull	r5, r3, r3, lr
    3888:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    388a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    388e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    3892:	fb0c f101 	mul.w	r1, ip, r1
    3896:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    389a:	fb05 1114 	mls	r1, r5, r4, r1
    389e:	fb0c f101 	mul.w	r1, ip, r1
    38a2:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    38a6:	9102      	str	r1, [sp, #8]
    38a8:	9501      	str	r5, [sp, #4]
    38aa:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    38ae:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    38b2:	9100      	str	r1, [sp, #0]
    38b4:	4906      	ldr	r1, [pc, #24]	; (38d0 <timestamp_print+0x88>)
    38b6:	f7ff ffb5 	bl	3824 <print_formatted>
    38ba:	e7ce      	b.n	385a <timestamp_print+0x12>
    38bc:	20000708 	.word	0x20000708
    38c0:	0000e1cc 	.word	0x0000e1cc
    38c4:	2000070c 	.word	0x2000070c
    38c8:	91a2b3c5 	.word	0x91a2b3c5
    38cc:	88888889 	.word	0x88888889
    38d0:	0000e1d8 	.word	0x0000e1d8

000038d4 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    38d4:	b161      	cbz	r1, 38f0 <color_print+0x1c>
{
    38d6:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    38d8:	b12a      	cbz	r2, 38e6 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    38da:	4a06      	ldr	r2, [pc, #24]	; (38f4 <color_print+0x20>)
    38dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    38e0:	b912      	cbnz	r2, 38e8 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    38e2:	4a05      	ldr	r2, [pc, #20]	; (38f8 <color_print+0x24>)
    38e4:	e000      	b.n	38e8 <color_print+0x14>
    38e6:	4a04      	ldr	r2, [pc, #16]	; (38f8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    38e8:	4904      	ldr	r1, [pc, #16]	; (38fc <color_print+0x28>)
    38ea:	f7ff ff9b 	bl	3824 <print_formatted>
	}
}
    38ee:	bd08      	pop	{r3, pc}
    38f0:	4770      	bx	lr
    38f2:	bf00      	nop
    38f4:	0000e298 	.word	0x0000e298
    38f8:	0000e1f4 	.word	0x0000e1f4
    38fc:	0000e1fc 	.word	0x0000e1fc

00003900 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3900:	f011 0f10 	tst.w	r1, #16
    3904:	d10b      	bne.n	391e <newline_print+0x1e>
{
    3906:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3908:	f011 0f20 	tst.w	r1, #32
    390c:	d003      	beq.n	3916 <newline_print+0x16>
		print_formatted(ctx, "\n");
    390e:	4904      	ldr	r1, [pc, #16]	; (3920 <newline_print+0x20>)
    3910:	f7ff ff88 	bl	3824 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    3914:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    3916:	4903      	ldr	r1, [pc, #12]	; (3924 <newline_print+0x24>)
    3918:	f7ff ff84 	bl	3824 <print_formatted>
    391c:	e7fa      	b.n	3914 <newline_print+0x14>
    391e:	4770      	bx	lr
    3920:	0000d9a0 	.word	0x0000d9a0
    3924:	0000f908 	.word	0x0000f908

00003928 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    392c:	4605      	mov	r5, r0
    392e:	460f      	mov	r7, r1
    3930:	4616      	mov	r6, r2
    3932:	4698      	mov	r8, r3
	newline_print(output, flags);
    3934:	9906      	ldr	r1, [sp, #24]
    3936:	f7ff ffe3 	bl	3900 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    393a:	2400      	movs	r4, #0
    393c:	4544      	cmp	r4, r8
    393e:	da05      	bge.n	394c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3940:	4923      	ldr	r1, [pc, #140]	; (39d0 <hexdump_line_print+0xa8>)
    3942:	4628      	mov	r0, r5
    3944:	f7ff ff6e 	bl	3824 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3948:	3401      	adds	r4, #1
    394a:	e7f7      	b.n	393c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    394c:	2400      	movs	r4, #0
    394e:	e009      	b.n	3964 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3950:	491f      	ldr	r1, [pc, #124]	; (39d0 <hexdump_line_print+0xa8>)
    3952:	4628      	mov	r0, r5
    3954:	f7ff ff66 	bl	3824 <print_formatted>
    3958:	e00b      	b.n	3972 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    395a:	491e      	ldr	r1, [pc, #120]	; (39d4 <hexdump_line_print+0xac>)
    395c:	4628      	mov	r0, r5
    395e:	f7ff ff61 	bl	3824 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3962:	3401      	adds	r4, #1
    3964:	2c0f      	cmp	r4, #15
    3966:	dc0c      	bgt.n	3982 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    3968:	2c00      	cmp	r4, #0
    396a:	dd02      	ble.n	3972 <hexdump_line_print+0x4a>
    396c:	f014 0f07 	tst.w	r4, #7
    3970:	d0ee      	beq.n	3950 <hexdump_line_print+0x28>
		if (i < length) {
    3972:	42b4      	cmp	r4, r6
    3974:	d2f1      	bcs.n	395a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    3976:	5d3a      	ldrb	r2, [r7, r4]
    3978:	4917      	ldr	r1, [pc, #92]	; (39d8 <hexdump_line_print+0xb0>)
    397a:	4628      	mov	r0, r5
    397c:	f7ff ff52 	bl	3824 <print_formatted>
    3980:	e7ef      	b.n	3962 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    3982:	4916      	ldr	r1, [pc, #88]	; (39dc <hexdump_line_print+0xb4>)
    3984:	4628      	mov	r0, r5
    3986:	f7ff ff4d 	bl	3824 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    398a:	2400      	movs	r4, #0
    398c:	e009      	b.n	39a2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    398e:	4910      	ldr	r1, [pc, #64]	; (39d0 <hexdump_line_print+0xa8>)
    3990:	4628      	mov	r0, r5
    3992:	f7ff ff47 	bl	3824 <print_formatted>
    3996:	e00b      	b.n	39b0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    3998:	4911      	ldr	r1, [pc, #68]	; (39e0 <hexdump_line_print+0xb8>)
    399a:	4628      	mov	r0, r5
    399c:	f7ff ff42 	bl	3824 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39a0:	3401      	adds	r4, #1
    39a2:	2c0f      	cmp	r4, #15
    39a4:	dc12      	bgt.n	39cc <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    39a6:	2c00      	cmp	r4, #0
    39a8:	dd02      	ble.n	39b0 <hexdump_line_print+0x88>
    39aa:	f014 0f07 	tst.w	r4, #7
    39ae:	d0ee      	beq.n	398e <hexdump_line_print+0x66>
		if (i < length) {
    39b0:	42b4      	cmp	r4, r6
    39b2:	d206      	bcs.n	39c2 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    39b4:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    39b6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    39ba:	2b5e      	cmp	r3, #94	; 0x5e
    39bc:	d9ec      	bls.n	3998 <hexdump_line_print+0x70>
    39be:	222e      	movs	r2, #46	; 0x2e
    39c0:	e7ea      	b.n	3998 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    39c2:	4903      	ldr	r1, [pc, #12]	; (39d0 <hexdump_line_print+0xa8>)
    39c4:	4628      	mov	r0, r5
    39c6:	f7ff ff2d 	bl	3824 <print_formatted>
    39ca:	e7e9      	b.n	39a0 <hexdump_line_print+0x78>
		}
	}
}
    39cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39d0:	0000e224 	.word	0x0000e224
    39d4:	0000e208 	.word	0x0000e208
    39d8:	0000e200 	.word	0x0000e200
    39dc:	0000e20c 	.word	0x0000e20c
    39e0:	0000e210 	.word	0x0000e210

000039e4 <ids_print>:
{
    39e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39e8:	4680      	mov	r8, r0
    39ea:	4616      	mov	r6, r2
    39ec:	461d      	mov	r5, r3
    39ee:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    39f2:	b959      	cbnz	r1, 3a0c <ids_print+0x28>
	int total = 0;
    39f4:	2400      	movs	r4, #0
	if (source_id >= 0) {
    39f6:	2f00      	cmp	r7, #0
    39f8:	db1c      	blt.n	3a34 <ids_print+0x50>
		total += print_formatted(output,
    39fa:	b186      	cbz	r6, 3a1e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    39fc:	2301      	movs	r3, #1
    39fe:	9a07      	ldr	r2, [sp, #28]
    3a00:	4093      	lsls	r3, r2
				(func_on &&
    3a02:	f013 0f10 	tst.w	r3, #16
    3a06:	d118      	bne.n	3a3a <ids_print+0x56>
		total += print_formatted(output,
    3a08:	4e0d      	ldr	r6, [pc, #52]	; (3a40 <ids_print+0x5c>)
    3a0a:	e009      	b.n	3a20 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3a0c:	4b0d      	ldr	r3, [pc, #52]	; (3a44 <ids_print+0x60>)
    3a0e:	9a07      	ldr	r2, [sp, #28]
    3a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a14:	490c      	ldr	r1, [pc, #48]	; (3a48 <ids_print+0x64>)
    3a16:	f7ff ff05 	bl	3824 <print_formatted>
    3a1a:	4604      	mov	r4, r0
    3a1c:	e7eb      	b.n	39f6 <ids_print+0x12>
		total += print_formatted(output,
    3a1e:	4e08      	ldr	r6, [pc, #32]	; (3a40 <ids_print+0x5c>)
    3a20:	4639      	mov	r1, r7
    3a22:	4628      	mov	r0, r5
    3a24:	f7ff fea0 	bl	3768 <log_source_name_get>
    3a28:	4602      	mov	r2, r0
    3a2a:	4631      	mov	r1, r6
    3a2c:	4640      	mov	r0, r8
    3a2e:	f7ff fef9 	bl	3824 <print_formatted>
    3a32:	4404      	add	r4, r0
}
    3a34:	4620      	mov	r0, r4
    3a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3a3a:	4e04      	ldr	r6, [pc, #16]	; (3a4c <ids_print+0x68>)
    3a3c:	e7f0      	b.n	3a20 <ids_print+0x3c>
    3a3e:	bf00      	nop
    3a40:	0000e214 	.word	0x0000e214
    3a44:	0000e2ac 	.word	0x0000e2ac
    3a48:	0000e220 	.word	0x0000e220
    3a4c:	0000e21c 	.word	0x0000e21c

00003a50 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a54:	b085      	sub	sp, #20
    3a56:	4605      	mov	r5, r0
    3a58:	460c      	mov	r4, r1
    3a5a:	4616      	mov	r6, r2
    3a5c:	9303      	str	r3, [sp, #12]
    3a5e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3a62:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3a66:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3a6a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    3a6e:	f008 fba6 	bl	c1be <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3a72:	b1e8      	cbz	r0, 3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3a74:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    3a76:	4913      	ldr	r1, [pc, #76]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a78:	4628      	mov	r0, r5
    3a7a:	f7ff fed3 	bl	3824 <print_formatted>
    3a7e:	4607      	mov	r7, r0
	}

	if (stamp) {
    3a80:	f1bb 0f00 	cmp.w	fp, #0
    3a84:	d116      	bne.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3a86:	4642      	mov	r2, r8
    3a88:	4651      	mov	r1, sl
    3a8a:	4628      	mov	r0, r5
    3a8c:	f008 fbc3 	bl	c216 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3a90:	f8cd 8004 	str.w	r8, [sp, #4]
    3a94:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    3a98:	9300      	str	r3, [sp, #0]
    3a9a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3a9e:	4632      	mov	r2, r6
    3aa0:	4649      	mov	r1, r9
    3aa2:	4628      	mov	r0, r5
    3aa4:	f7ff ff9e 	bl	39e4 <ids_print>
			domain_id, source_id, level);


	return length;
}
    3aa8:	4438      	add	r0, r7
    3aaa:	b005      	add	sp, #20
    3aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3ab0:	2700      	movs	r7, #0
    3ab2:	e7e5      	b.n	3a80 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    3ab4:	9a03      	ldr	r2, [sp, #12]
    3ab6:	4621      	mov	r1, r4
    3ab8:	4628      	mov	r0, r5
    3aba:	f7ff fec5 	bl	3848 <timestamp_print>
    3abe:	4407      	add	r7, r0
    3ac0:	e7e1      	b.n	3a86 <prefix_print+0x36>
    3ac2:	bf00      	nop
    3ac4:	0000e228 	.word	0x0000e228

00003ac8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    3ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3acc:	b084      	sub	sp, #16
    3ace:	4606      	mov	r6, r0
    3ad0:	460c      	mov	r4, r1
    3ad2:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    3ad4:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    3ad6:	880a      	ldrh	r2, [r1, #0]
    3ad8:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3adc:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    3ae0:	d037      	beq.n	3b52 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    3ae2:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    3ae4:	7809      	ldrb	r1, [r1, #0]
    3ae6:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    3aea:	b37a      	cbz	r2, 3b4c <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3aec:	4829      	ldr	r0, [pc, #164]	; (3b94 <log_output_msg2_process+0xcc>)
    3aee:	1a12      	subs	r2, r2, r0
    3af0:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3af4:	9202      	str	r2, [sp, #8]
    3af6:	9101      	str	r1, [sp, #4]
    3af8:	f8cd 8000 	str.w	r8, [sp]
    3afc:	2200      	movs	r2, #0
    3afe:	4639      	mov	r1, r7
    3b00:	4630      	mov	r0, r6
    3b02:	f7ff ffa5 	bl	3a50 <prefix_print>
    3b06:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3b08:	4625      	mov	r5, r4
    3b0a:	f855 3b10 	ldr.w	r3, [r5], #16
    3b0e:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    3b12:	b153      	cbz	r3, 3b2a <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3b14:	f1b8 0f00 	cmp.w	r8, #0
    3b18:	d11e      	bne.n	3b58 <log_output_msg2_process+0x90>
    3b1a:	481f      	ldr	r0, [pc, #124]	; (3b98 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3b1c:	462b      	mov	r3, r5
    3b1e:	4632      	mov	r2, r6
    3b20:	491e      	ldr	r1, [pc, #120]	; (3b9c <log_output_msg2_process+0xd4>)
    3b22:	f008 f950 	bl	bdc6 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    3b26:	2800      	cmp	r0, #0
    3b28:	db18      	blt.n	3b5c <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    3b2a:	8862      	ldrh	r2, [r4, #2]
    3b2c:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3b30:	6821      	ldr	r1, [r4, #0]
    3b32:	f3c1 2149 	ubfx	r1, r1, #9, #10
    3b36:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    3b38:	b9fa      	cbnz	r2, 3b7a <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    3b3a:	f1b8 0f00 	cmp.w	r8, #0
    3b3e:	d122      	bne.n	3b86 <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3b40:	4630      	mov	r0, r6
    3b42:	f008 fb9b 	bl	c27c <log_output_flush>
}
    3b46:	b004      	add	sp, #16
    3b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    3b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b50:	e7d0      	b.n	3af4 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    3b52:	f04f 0900 	mov.w	r9, #0
    3b56:	e7d7      	b.n	3b08 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3b58:	4811      	ldr	r0, [pc, #68]	; (3ba0 <log_output_msg2_process+0xd8>)
    3b5a:	e7df      	b.n	3b1c <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    3b5c:	f8df a044 	ldr.w	sl, [pc, #68]	; 3ba4 <log_output_msg2_process+0xdc>
    3b60:	f240 23b7 	movw	r3, #695	; 0x2b7
    3b64:	4652      	mov	r2, sl
    3b66:	4910      	ldr	r1, [pc, #64]	; (3ba8 <log_output_msg2_process+0xe0>)
    3b68:	4810      	ldr	r0, [pc, #64]	; (3bac <log_output_msg2_process+0xe4>)
    3b6a:	f008 fafd 	bl	c168 <assert_print>
    3b6e:	f240 21b7 	movw	r1, #695	; 0x2b7
    3b72:	4650      	mov	r0, sl
    3b74:	f008 faf1 	bl	c15a <assert_post_action>
    3b78:	e7d7      	b.n	3b2a <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    3b7a:	9700      	str	r7, [sp, #0]
    3b7c:	464b      	mov	r3, r9
    3b7e:	4630      	mov	r0, r6
    3b80:	f008 fb61 	bl	c246 <log_msg2_hexdump>
    3b84:	e7d9      	b.n	3b3a <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    3b86:	4642      	mov	r2, r8
    3b88:	4639      	mov	r1, r7
    3b8a:	4630      	mov	r0, r6
    3b8c:	f008 fb4f 	bl	c22e <postfix_print>
    3b90:	e7d6      	b.n	3b40 <log_output_msg2_process+0x78>
    3b92:	bf00      	nop
    3b94:	0000d350 	.word	0x0000d350
    3b98:	0000c1e1 	.word	0x0000c1e1
    3b9c:	00002ec5 	.word	0x00002ec5
    3ba0:	0000c1c3 	.word	0x0000c1c3
    3ba4:	0000e22c 	.word	0x0000e22c
    3ba8:	0000e26c 	.word	0x0000e26c
    3bac:	0000d51c 	.word	0x0000d51c

00003bb0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3bb0:	4b07      	ldr	r3, [pc, #28]	; (3bd0 <log_output_timestamp_freq_set+0x20>)
    3bb2:	2201      	movs	r2, #1
    3bb4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3bb6:	e004      	b.n	3bc2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3bb8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3bba:	4a05      	ldr	r2, [pc, #20]	; (3bd0 <log_output_timestamp_freq_set+0x20>)
    3bbc:	6813      	ldr	r3, [r2, #0]
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3bc2:	4b04      	ldr	r3, [pc, #16]	; (3bd4 <log_output_timestamp_freq_set+0x24>)
    3bc4:	4298      	cmp	r0, r3
    3bc6:	d8f7      	bhi.n	3bb8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3bc8:	4b03      	ldr	r3, [pc, #12]	; (3bd8 <log_output_timestamp_freq_set+0x28>)
    3bca:	6018      	str	r0, [r3, #0]
}
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop
    3bd0:	2000070c 	.word	0x2000070c
    3bd4:	000f4240 	.word	0x000f4240
    3bd8:	20000708 	.word	0x20000708

00003bdc <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3be0:	b087      	sub	sp, #28
    3be2:	af02      	add	r7, sp, #8
    3be4:	4682      	mov	sl, r0
    3be6:	6079      	str	r1, [r7, #4]
    3be8:	4691      	mov	r9, r2
    3bea:	4698      	mov	r8, r3
    3bec:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3bee:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    3bf2:	f1bb 0f00 	cmp.w	fp, #0
    3bf6:	d016      	beq.n	3c26 <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    3bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3bfa:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3bfc:	9300      	str	r3, [sp, #0]
    3bfe:	465b      	mov	r3, fp
    3c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c02:	2110      	movs	r1, #16
    3c04:	2000      	movs	r0, #0
    3c06:	f7fe f8fb 	bl	1e00 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3c0a:	1e05      	subs	r5, r0, #0
    3c0c:	da0c      	bge.n	3c28 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    3c0e:	4c26      	ldr	r4, [pc, #152]	; (3ca8 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    3c10:	2367      	movs	r3, #103	; 0x67
    3c12:	4622      	mov	r2, r4
    3c14:	4925      	ldr	r1, [pc, #148]	; (3cac <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3c16:	4826      	ldr	r0, [pc, #152]	; (3cb0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3c18:	f008 faa6 	bl	c168 <assert_print>
    3c1c:	2167      	movs	r1, #103	; 0x67
    3c1e:	4620      	mov	r0, r4
    3c20:	f008 fa9b 	bl	c15a <assert_post_action>
		va_end(ap2);
    3c24:	e000      	b.n	3c28 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    3c26:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3c28:	4629      	mov	r1, r5
    3c2a:	19ab      	adds	r3, r5, r6
    3c2c:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3c2e:	2400      	movs	r4, #0
    3c30:	f36f 0400 	bfc	r4, #0, #1
    3c34:	f36f 0441 	bfc	r4, #1, #1
    3c38:	f36f 0482 	bfc	r4, #2, #1
    3c3c:	f36a 04c5 	bfi	r4, sl, #3, #3
    3c40:	f369 1488 	bfi	r4, r9, #6, #3
    3c44:	f365 2452 	bfi	r4, r5, #9, #10
    3c48:	f366 44de 	bfi	r4, r6, #19, #12
    3c4c:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3c50:	f023 0307 	bic.w	r3, r3, #7
    3c54:	ebad 0d03 	sub.w	sp, sp, r3
    3c58:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3c5a:	466b      	mov	r3, sp
    3c5c:	f113 0018 	adds.w	r0, r3, #24
    3c60:	d00a      	beq.n	3c78 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3c62:	f1bb 0f00 	cmp.w	fp, #0
    3c66:	d007      	beq.n	3c78 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3c6a:	9300      	str	r3, [sp, #0]
    3c6c:	465b      	mov	r3, fp
    3c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3c70:	f7fe f8c6 	bl	1e00 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    3c74:	2800      	cmp	r0, #0
    3c76:	db09      	blt.n	3c8c <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3c78:	4643      	mov	r3, r8
    3c7a:	4622      	mov	r2, r4
    3c7c:	6879      	ldr	r1, [r7, #4]
    3c7e:	4628      	mov	r0, r5
    3c80:	f008 fb09 	bl	c296 <z_log_msg2_finalize>
	}
}
    3c84:	3714      	adds	r7, #20
    3c86:	46bd      	mov	sp, r7
    3c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    3c8c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 3ca8 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    3c90:	2381      	movs	r3, #129	; 0x81
    3c92:	464a      	mov	r2, r9
    3c94:	4905      	ldr	r1, [pc, #20]	; (3cac <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    3c96:	4806      	ldr	r0, [pc, #24]	; (3cb0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    3c98:	f008 fa66 	bl	c168 <assert_print>
    3c9c:	2181      	movs	r1, #129	; 0x81
    3c9e:	4648      	mov	r0, r9
    3ca0:	f008 fa5b 	bl	c15a <assert_post_action>
    3ca4:	e7e8      	b.n	3c78 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    3ca6:	bf00      	nop
    3ca8:	0000e2c0 	.word	0x0000e2c0
    3cac:	0000e2fc 	.word	0x0000e2fc
    3cb0:	0000d51c 	.word	0x0000d51c

00003cb4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3cb4:	b570      	push	{r4, r5, r6, lr}
    3cb6:	4606      	mov	r6, r0
    3cb8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    3cba:	2400      	movs	r4, #0
    3cbc:	e006      	b.n	3ccc <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    3cbe:	4b05      	ldr	r3, [pc, #20]	; (3cd4 <char_out+0x20>)
    3cc0:	6818      	ldr	r0, [r3, #0]
    3cc2:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3cc4:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3cc6:	685b      	ldr	r3, [r3, #4]
    3cc8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3cca:	3401      	adds	r4, #1
    3ccc:	42ac      	cmp	r4, r5
    3cce:	d3f6      	bcc.n	3cbe <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3cd0:	4628      	mov	r0, r5
    3cd2:	bd70      	pop	{r4, r5, r6, pc}
    3cd4:	20000728 	.word	0x20000728

00003cd8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3cd8:	4b01      	ldr	r3, [pc, #4]	; (3ce0 <format_set+0x8>)
    3cda:	6019      	str	r1, [r3, #0]
	return 0;
}
    3cdc:	2000      	movs	r0, #0
    3cde:	4770      	bx	lr
    3ce0:	20000718 	.word	0x20000718

00003ce4 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    3ce4:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3ce6:	4809      	ldr	r0, [pc, #36]	; (3d0c <log_backend_uart_init+0x28>)
    3ce8:	4b09      	ldr	r3, [pc, #36]	; (3d10 <log_backend_uart_init+0x2c>)
    3cea:	6018      	str	r0, [r3, #0]
    3cec:	f009 f8cc 	bl	ce88 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3cf0:	b100      	cbz	r0, 3cf4 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    3cf2:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3cf4:	4c07      	ldr	r4, [pc, #28]	; (3d14 <log_backend_uart_init+0x30>)
    3cf6:	2379      	movs	r3, #121	; 0x79
    3cf8:	4622      	mov	r2, r4
    3cfa:	4907      	ldr	r1, [pc, #28]	; (3d18 <log_backend_uart_init+0x34>)
    3cfc:	4807      	ldr	r0, [pc, #28]	; (3d1c <log_backend_uart_init+0x38>)
    3cfe:	f008 fa33 	bl	c168 <assert_print>
    3d02:	2179      	movs	r1, #121	; 0x79
    3d04:	4620      	mov	r0, r4
    3d06:	f008 fa28 	bl	c15a <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    3d0a:	e7f2      	b.n	3cf2 <log_backend_uart_init+0xe>
    3d0c:	0000d1a0 	.word	0x0000d1a0
    3d10:	20000728 	.word	0x20000728
    3d14:	0000e308 	.word	0x0000e308
    3d18:	0000e340 	.word	0x0000e340
    3d1c:	0000d51c 	.word	0x0000d51c

00003d20 <panic>:

static void panic(struct log_backend const *const backend)
{
    3d20:	b508      	push	{r3, lr}
	in_panic = true;
    3d22:	4b03      	ldr	r3, [pc, #12]	; (3d30 <panic+0x10>)
    3d24:	2201      	movs	r2, #1
    3d26:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3d28:	4802      	ldr	r0, [pc, #8]	; (3d34 <panic+0x14>)
    3d2a:	f008 faa7 	bl	c27c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3d2e:	bd08      	pop	{r3, pc}
    3d30:	20001456 	.word	0x20001456
    3d34:	0000e39c 	.word	0x0000e39c

00003d38 <process>:
{
    3d38:	b510      	push	{r4, lr}
    3d3a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3d3c:	4b04      	ldr	r3, [pc, #16]	; (3d50 <process+0x18>)
    3d3e:	6818      	ldr	r0, [r3, #0]
    3d40:	f7ff fc1c 	bl	357c <log_format_func_t_get>
    3d44:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    3d46:	220f      	movs	r2, #15
    3d48:	4621      	mov	r1, r4
    3d4a:	4802      	ldr	r0, [pc, #8]	; (3d54 <process+0x1c>)
    3d4c:	4798      	blx	r3
}
    3d4e:	bd10      	pop	{r4, pc}
    3d50:	20000718 	.word	0x20000718
    3d54:	0000e39c 	.word	0x0000e39c

00003d58 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3d58:	4b03      	ldr	r3, [pc, #12]	; (3d68 <log_backend_rtt_init+0x10>)
    3d5a:	2201      	movs	r2, #1
    3d5c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3d5e:	4b03      	ldr	r3, [pc, #12]	; (3d6c <log_backend_rtt_init+0x14>)
    3d60:	4a03      	ldr	r2, [pc, #12]	; (3d70 <log_backend_rtt_init+0x18>)
    3d62:	601a      	str	r2, [r3, #0]
}
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop
    3d68:	20001457 	.word	0x20001457
    3d6c:	20000754 	.word	0x20000754
    3d70:	2000073c 	.word	0x2000073c

00003d74 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3d74:	4b01      	ldr	r3, [pc, #4]	; (3d7c <format_set+0x8>)
    3d76:	6019      	str	r1, [r3, #0]
	return 0;
}
    3d78:	2000      	movs	r0, #0
    3d7a:	4770      	bx	lr
    3d7c:	20000758 	.word	0x20000758

00003d80 <on_failed_write>:
{
    3d80:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3d82:	b918      	cbnz	r0, 3d8c <on_failed_write+0xc>
		host_present = false;
    3d84:	4b04      	ldr	r3, [pc, #16]	; (3d98 <on_failed_write+0x18>)
    3d86:	2200      	movs	r2, #0
    3d88:	701a      	strb	r2, [r3, #0]
}
    3d8a:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    3d8c:	f241 3088 	movw	r0, #5000	; 0x1388
    3d90:	f009 f96a 	bl	d068 <z_impl_k_busy_wait>
    3d94:	e7f9      	b.n	3d8a <on_failed_write+0xa>
    3d96:	bf00      	nop
    3d98:	20001457 	.word	0x20001457

00003d9c <on_write>:
{
    3d9c:	b538      	push	{r3, r4, r5, lr}
    3d9e:	4604      	mov	r4, r0
	host_present = true;
    3da0:	4b0a      	ldr	r3, [pc, #40]	; (3dcc <on_write+0x30>)
    3da2:	2201      	movs	r2, #1
    3da4:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3da6:	4b0a      	ldr	r3, [pc, #40]	; (3dd0 <on_write+0x34>)
    3da8:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3daa:	b92b      	cbnz	r3, 3db8 <on_write+0x1c>
}
    3dac:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3dae:	1e65      	subs	r5, r4, #1
    3db0:	4620      	mov	r0, r4
    3db2:	f7ff ffe5 	bl	3d80 <on_failed_write>
    3db6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3db8:	2000      	movs	r0, #0
    3dba:	f004 fdfb 	bl	89b4 <SEGGER_RTT_HasDataUp>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d0f4      	beq.n	3dac <on_write+0x10>
    3dc2:	4b02      	ldr	r3, [pc, #8]	; (3dcc <on_write+0x30>)
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d1f1      	bne.n	3dae <on_write+0x12>
    3dca:	e7ef      	b.n	3dac <on_write+0x10>
    3dcc:	20001457 	.word	0x20001457
    3dd0:	20001458 	.word	0x20001458

00003dd4 <data_out_block_mode>:
{
    3dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dd6:	4606      	mov	r6, r0
    3dd8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3dda:	2704      	movs	r7, #4
    3ddc:	e006      	b.n	3dec <data_out_block_mode+0x18>
			on_write(retry_cnt);
    3dde:	4638      	mov	r0, r7
    3de0:	f7ff ffdc 	bl	3d9c <on_write>
	} while ((ret == 0) && host_present);
    3de4:	b99c      	cbnz	r4, 3e0e <data_out_block_mode+0x3a>
    3de6:	4b0d      	ldr	r3, [pc, #52]	; (3e1c <data_out_block_mode+0x48>)
    3de8:	781b      	ldrb	r3, [r3, #0]
    3dea:	b183      	cbz	r3, 3e0e <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3dec:	462a      	mov	r2, r5
    3dee:	4631      	mov	r1, r6
    3df0:	2000      	movs	r0, #0
    3df2:	f004 fd7b 	bl	88ec <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3df6:	4604      	mov	r4, r0
    3df8:	2800      	cmp	r0, #0
    3dfa:	d1f0      	bne.n	3dde <data_out_block_mode+0xa>
		} else if (host_present) {
    3dfc:	4b07      	ldr	r3, [pc, #28]	; (3e1c <data_out_block_mode+0x48>)
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	2b00      	cmp	r3, #0
    3e02:	d0ef      	beq.n	3de4 <data_out_block_mode+0x10>
			retry_cnt--;
    3e04:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3e06:	4638      	mov	r0, r7
    3e08:	f7ff ffba 	bl	3d80 <on_failed_write>
    3e0c:	e7ea      	b.n	3de4 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    3e0e:	b914      	cbnz	r4, 3e16 <data_out_block_mode+0x42>
    3e10:	4b02      	ldr	r3, [pc, #8]	; (3e1c <data_out_block_mode+0x48>)
    3e12:	781b      	ldrb	r3, [r3, #0]
    3e14:	b903      	cbnz	r3, 3e18 <data_out_block_mode+0x44>
    3e16:	462c      	mov	r4, r5
}
    3e18:	4620      	mov	r0, r4
    3e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e1c:	20001457 	.word	0x20001457

00003e20 <panic>:
{
    3e20:	b508      	push	{r3, lr}
	panic_mode = true;
    3e22:	4b03      	ldr	r3, [pc, #12]	; (3e30 <panic+0x10>)
    3e24:	2201      	movs	r2, #1
    3e26:	701a      	strb	r2, [r3, #0]
    3e28:	4802      	ldr	r0, [pc, #8]	; (3e34 <panic+0x14>)
    3e2a:	f008 fa27 	bl	c27c <log_output_flush>
}
    3e2e:	bd08      	pop	{r3, pc}
    3e30:	20001458 	.word	0x20001458
    3e34:	0000e3dc 	.word	0x0000e3dc

00003e38 <process>:
{
    3e38:	b510      	push	{r4, lr}
    3e3a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3e3c:	4b04      	ldr	r3, [pc, #16]	; (3e50 <process+0x18>)
    3e3e:	6818      	ldr	r0, [r3, #0]
    3e40:	f7ff fb9c 	bl	357c <log_format_func_t_get>
    3e44:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3e46:	220f      	movs	r2, #15
    3e48:	4621      	mov	r1, r4
    3e4a:	4802      	ldr	r0, [pc, #8]	; (3e54 <process+0x1c>)
    3e4c:	4798      	blx	r3
}
    3e4e:	bd10      	pop	{r4, pc}
    3e50:	20000758 	.word	0x20000758
    3e54:	0000e3dc 	.word	0x0000e3dc

00003e58 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    3e58:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    3e5a:	4b40      	ldr	r3, [pc, #256]	; (3f5c <pm_system_resume+0x104>)
    3e5c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3e5e:	f005 031f 	and.w	r3, r5, #31
    3e62:	2201      	movs	r2, #1
    3e64:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3e66:	0969      	lsrs	r1, r5, #5
    3e68:	4b3d      	ldr	r3, [pc, #244]	; (3f60 <pm_system_resume+0x108>)
    3e6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3e6e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e70:	f3bf 8f5b 	dmb	ish
    3e74:	e853 1f00 	ldrex	r1, [r3]
    3e78:	ea01 0400 	and.w	r4, r1, r0
    3e7c:	e843 4600 	strex	r6, r4, [r3]
    3e80:	2e00      	cmp	r6, #0
    3e82:	d1f7      	bne.n	3e74 <pm_system_resume+0x1c>
    3e84:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3e88:	420a      	tst	r2, r1
    3e8a:	d100      	bne.n	3e8e <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    3e8c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    3e8e:	4a35      	ldr	r2, [pc, #212]	; (3f64 <pm_system_resume+0x10c>)
    3e90:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3e94:	0098      	lsls	r0, r3, #2
    3e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    3e9a:	4933      	ldr	r1, [pc, #204]	; (3f68 <pm_system_resume+0x110>)
    3e9c:	b1a9      	cbz	r1, 3eca <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3e9e:	7859      	ldrb	r1, [r3, #1]
    3ea0:	5c10      	ldrb	r0, [r2, r0]
    3ea2:	f008 fb69 	bl	c578 <pm_state_exit_post_ops>
    3ea6:	f04f 0320 	mov.w	r3, #32
    3eaa:	f3ef 8611 	mrs	r6, BASEPRI
    3eae:	f383 8812 	msr	BASEPRI_MAX, r3
    3eb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3eb6:	482d      	ldr	r0, [pc, #180]	; (3f6c <pm_system_resume+0x114>)
    3eb8:	f005 f8a2 	bl	9000 <z_spin_lock_valid>
    3ebc:	b158      	cbz	r0, 3ed6 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    3ebe:	482b      	ldr	r0, [pc, #172]	; (3f6c <pm_system_resume+0x114>)
    3ec0:	f005 f8be 	bl	9040 <z_spin_lock_set_owner>
	return list->head;
    3ec4:	4b2a      	ldr	r3, [pc, #168]	; (3f70 <pm_system_resume+0x118>)
    3ec6:	681c      	ldr	r4, [r3, #0]
    3ec8:	e020      	b.n	3f0c <pm_system_resume+0xb4>
	__asm__ volatile(
    3eca:	2300      	movs	r3, #0
    3ecc:	f383 8811 	msr	BASEPRI, r3
    3ed0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3ed4:	e7e7      	b.n	3ea6 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ed6:	4c27      	ldr	r4, [pc, #156]	; (3f74 <pm_system_resume+0x11c>)
    3ed8:	238e      	movs	r3, #142	; 0x8e
    3eda:	4622      	mov	r2, r4
    3edc:	4926      	ldr	r1, [pc, #152]	; (3f78 <pm_system_resume+0x120>)
    3ede:	4827      	ldr	r0, [pc, #156]	; (3f7c <pm_system_resume+0x124>)
    3ee0:	f008 f942 	bl	c168 <assert_print>
    3ee4:	4921      	ldr	r1, [pc, #132]	; (3f6c <pm_system_resume+0x114>)
    3ee6:	4826      	ldr	r0, [pc, #152]	; (3f80 <pm_system_resume+0x128>)
    3ee8:	f008 f93e 	bl	c168 <assert_print>
    3eec:	218e      	movs	r1, #142	; 0x8e
    3eee:	4620      	mov	r0, r4
    3ef0:	f008 f933 	bl	c15a <assert_post_action>
    3ef4:	e7e3      	b.n	3ebe <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3ef6:	4b19      	ldr	r3, [pc, #100]	; (3f5c <pm_system_resume+0x104>)
    3ef8:	7d1b      	ldrb	r3, [r3, #20]
    3efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3efe:	4919      	ldr	r1, [pc, #100]	; (3f64 <pm_system_resume+0x10c>)
    3f00:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    3f04:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    3f06:	b10c      	cbz	r4, 3f0c <pm_system_resume+0xb4>
	return node->next;
    3f08:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f0a:	b124      	cbz	r4, 3f16 <pm_system_resume+0xbe>
    3f0c:	b11c      	cbz	r4, 3f16 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    3f0e:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    3f10:	2a00      	cmp	r2, #0
    3f12:	d1f0      	bne.n	3ef6 <pm_system_resume+0x9e>
    3f14:	e7f7      	b.n	3f06 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f16:	4815      	ldr	r0, [pc, #84]	; (3f6c <pm_system_resume+0x114>)
    3f18:	f005 f882 	bl	9020 <z_spin_unlock_valid>
    3f1c:	b170      	cbz	r0, 3f3c <pm_system_resume+0xe4>
	__asm__ volatile(
    3f1e:	f386 8811 	msr	BASEPRI, r6
    3f22:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3f26:	4a0f      	ldr	r2, [pc, #60]	; (3f64 <pm_system_resume+0x10c>)
    3f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3f2c:	00a9      	lsls	r1, r5, #2
    3f2e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3f32:	2300      	movs	r3, #0
    3f34:	5053      	str	r3, [r2, r1]
    3f36:	606b      	str	r3, [r5, #4]
    3f38:	60ab      	str	r3, [r5, #8]
}
    3f3a:	e7a7      	b.n	3e8c <pm_system_resume+0x34>
    3f3c:	4c0d      	ldr	r4, [pc, #52]	; (3f74 <pm_system_resume+0x11c>)
    3f3e:	23b9      	movs	r3, #185	; 0xb9
    3f40:	4622      	mov	r2, r4
    3f42:	4910      	ldr	r1, [pc, #64]	; (3f84 <pm_system_resume+0x12c>)
    3f44:	480d      	ldr	r0, [pc, #52]	; (3f7c <pm_system_resume+0x124>)
    3f46:	f008 f90f 	bl	c168 <assert_print>
    3f4a:	4908      	ldr	r1, [pc, #32]	; (3f6c <pm_system_resume+0x114>)
    3f4c:	480e      	ldr	r0, [pc, #56]	; (3f88 <pm_system_resume+0x130>)
    3f4e:	f008 f90b 	bl	c168 <assert_print>
    3f52:	21b9      	movs	r1, #185	; 0xb9
    3f54:	4620      	mov	r0, r4
    3f56:	f008 f900 	bl	c15a <assert_post_action>
    3f5a:	e7e0      	b.n	3f1e <pm_system_resume+0xc6>
    3f5c:	20001228 	.word	0x20001228
    3f60:	20000784 	.word	0x20000784
    3f64:	20000774 	.word	0x20000774
    3f68:	0000c579 	.word	0x0000c579
    3f6c:	20000768 	.word	0x20000768
    3f70:	2000076c 	.word	0x2000076c
    3f74:	0000ddf4 	.word	0x0000ddf4
    3f78:	0000de54 	.word	0x0000de54
    3f7c:	0000d51c 	.word	0x0000d51c
    3f80:	0000de6c 	.word	0x0000de6c
    3f84:	0000de24 	.word	0x0000de24
    3f88:	0000de3c 	.word	0x0000de3c

00003f8c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3f8c:	b570      	push	{r4, r5, r6, lr}
    3f8e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3f90:	4b6d      	ldr	r3, [pc, #436]	; (4148 <pm_system_suspend+0x1bc>)
    3f92:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3f94:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3f96:	f3bf 8f5b 	dmb	ish
    3f9a:	4b6c      	ldr	r3, [pc, #432]	; (414c <pm_system_suspend+0x1c0>)
    3f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3fa0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3fa4:	f005 021f 	and.w	r2, r5, #31
    3fa8:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3faa:	f013 0f01 	tst.w	r3, #1
    3fae:	d01d      	beq.n	3fec <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3fb0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3fb4:	4a66      	ldr	r2, [pc, #408]	; (4150 <pm_system_suspend+0x1c4>)
    3fb6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3fba:	b333      	cbz	r3, 400a <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    3fbc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3fc0:	d139      	bne.n	4036 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3fc2:	f005 fe87 	bl	9cd4 <k_sched_lock>
	__asm__ volatile(
    3fc6:	f04f 0320 	mov.w	r3, #32
    3fca:	f3ef 8611 	mrs	r6, BASEPRI
    3fce:	f383 8812 	msr	BASEPRI_MAX, r3
    3fd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3fd6:	485f      	ldr	r0, [pc, #380]	; (4154 <pm_system_suspend+0x1c8>)
    3fd8:	f005 f812 	bl	9000 <z_spin_lock_valid>
    3fdc:	2800      	cmp	r0, #0
    3fde:	d040      	beq.n	4062 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    3fe0:	485c      	ldr	r0, [pc, #368]	; (4154 <pm_system_suspend+0x1c8>)
    3fe2:	f005 f82d 	bl	9040 <z_spin_lock_set_owner>
	return list->head;
    3fe6:	4b5c      	ldr	r3, [pc, #368]	; (4158 <pm_system_suspend+0x1cc>)
    3fe8:	681c      	ldr	r4, [r3, #0]
    3fea:	e055      	b.n	4098 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    3fec:	4601      	mov	r1, r0
    3fee:	4628      	mov	r0, r5
    3ff0:	f000 f8d6 	bl	41a0 <pm_policy_next_state>
		if (info != NULL) {
    3ff4:	2800      	cmp	r0, #0
    3ff6:	d0db      	beq.n	3fb0 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    3ff8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3ffc:	4a54      	ldr	r2, [pc, #336]	; (4150 <pm_system_suspend+0x1c4>)
    3ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4002:	c807      	ldmia	r0, {r0, r1, r2}
    4004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4008:	e7d2      	b.n	3fb0 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    400a:	f005 021f 	and.w	r2, r5, #31
    400e:	2301      	movs	r3, #1
    4010:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4012:	096d      	lsrs	r5, r5, #5
    4014:	4a4d      	ldr	r2, [pc, #308]	; (414c <pm_system_suspend+0x1c0>)
    4016:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    401a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    401c:	f3bf 8f5b 	dmb	ish
    4020:	e855 2f00 	ldrex	r2, [r5]
    4024:	401a      	ands	r2, r3
    4026:	e845 2100 	strex	r1, r2, [r5]
    402a:	2900      	cmp	r1, #0
    402c:	d1f8      	bne.n	4020 <pm_system_suspend+0x94>
    402e:	f3bf 8f5b 	dmb	ish
		ret = false;
    4032:	2000      	movs	r0, #0
		goto end;
    4034:	e077      	b.n	4126 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    4036:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    403a:	4a45      	ldr	r2, [pc, #276]	; (4150 <pm_system_suspend+0x1c4>)
    403c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4040:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4042:	0c41      	lsrs	r1, r0, #17
    4044:	03c0      	lsls	r0, r0, #15
    4046:	4b45      	ldr	r3, [pc, #276]	; (415c <pm_system_suspend+0x1d0>)
    4048:	18c0      	adds	r0, r0, r3
    404a:	4a45      	ldr	r2, [pc, #276]	; (4160 <pm_system_suspend+0x1d4>)
    404c:	f04f 0300 	mov.w	r3, #0
    4050:	f141 0100 	adc.w	r1, r1, #0
    4054:	f7fc fa36 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    4058:	2101      	movs	r1, #1
    405a:	1a20      	subs	r0, r4, r0
    405c:	f007 f9ca 	bl	b3f4 <z_set_timeout_expiry>
    4060:	e7af      	b.n	3fc2 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4062:	4c40      	ldr	r4, [pc, #256]	; (4164 <pm_system_suspend+0x1d8>)
    4064:	238e      	movs	r3, #142	; 0x8e
    4066:	4622      	mov	r2, r4
    4068:	493f      	ldr	r1, [pc, #252]	; (4168 <pm_system_suspend+0x1dc>)
    406a:	4840      	ldr	r0, [pc, #256]	; (416c <pm_system_suspend+0x1e0>)
    406c:	f008 f87c 	bl	c168 <assert_print>
    4070:	4938      	ldr	r1, [pc, #224]	; (4154 <pm_system_suspend+0x1c8>)
    4072:	483f      	ldr	r0, [pc, #252]	; (4170 <pm_system_suspend+0x1e4>)
    4074:	f008 f878 	bl	c168 <assert_print>
    4078:	218e      	movs	r1, #142	; 0x8e
    407a:	4620      	mov	r0, r4
    407c:	f008 f86d 	bl	c15a <assert_post_action>
    4080:	e7ae      	b.n	3fe0 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4082:	4b31      	ldr	r3, [pc, #196]	; (4148 <pm_system_suspend+0x1bc>)
    4084:	7d1b      	ldrb	r3, [r3, #20]
    4086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    408a:	4931      	ldr	r1, [pc, #196]	; (4150 <pm_system_suspend+0x1c4>)
    408c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    4090:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    4092:	b10c      	cbz	r4, 4098 <pm_system_suspend+0x10c>
	return node->next;
    4094:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4096:	b124      	cbz	r4, 40a2 <pm_system_suspend+0x116>
    4098:	b11c      	cbz	r4, 40a2 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    409a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    409c:	2a00      	cmp	r2, #0
    409e:	d1f0      	bne.n	4082 <pm_system_suspend+0xf6>
    40a0:	e7f7      	b.n	4092 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40a2:	482c      	ldr	r0, [pc, #176]	; (4154 <pm_system_suspend+0x1c8>)
    40a4:	f004 ffbc 	bl	9020 <z_spin_unlock_valid>
    40a8:	2800      	cmp	r0, #0
    40aa:	d03d      	beq.n	4128 <pm_system_suspend+0x19c>
	__asm__ volatile(
    40ac:	f386 8811 	msr	BASEPRI, r6
    40b0:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    40b4:	f005 031f 	and.w	r3, r5, #31
    40b8:	2101      	movs	r1, #1
    40ba:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    40bc:	096b      	lsrs	r3, r5, #5
    40be:	4a2d      	ldr	r2, [pc, #180]	; (4174 <pm_system_suspend+0x1e8>)
    40c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    40c4:	f3bf 8f5b 	dmb	ish
    40c8:	e853 2f00 	ldrex	r2, [r3]
    40cc:	430a      	orrs	r2, r1
    40ce:	e843 2000 	strex	r0, r2, [r3]
    40d2:	2800      	cmp	r0, #0
    40d4:	d1f8      	bne.n	40c8 <pm_system_suspend+0x13c>
    40d6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    40da:	4b27      	ldr	r3, [pc, #156]	; (4178 <pm_system_suspend+0x1ec>)
    40dc:	b14b      	cbz	r3, 40f2 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    40de:	4b1c      	ldr	r3, [pc, #112]	; (4150 <pm_system_suspend+0x1c4>)
    40e0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    40e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    40e8:	7849      	ldrb	r1, [r1, #1]
    40ea:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    40ee:	f008 fa37 	bl	c560 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    40f2:	f7ff feb1 	bl	3e58 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    40f6:	f005 031f 	and.w	r3, r5, #31
    40fa:	2401      	movs	r4, #1
    40fc:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4100:	096d      	lsrs	r5, r5, #5
    4102:	4a12      	ldr	r2, [pc, #72]	; (414c <pm_system_suspend+0x1c0>)
    4104:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4108:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    410a:	f3bf 8f5b 	dmb	ish
    410e:	e855 2f00 	ldrex	r2, [r5]
    4112:	401a      	ands	r2, r3
    4114:	e845 2100 	strex	r1, r2, [r5]
    4118:	2900      	cmp	r1, #0
    411a:	d1f8      	bne.n	410e <pm_system_suspend+0x182>
    411c:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    4120:	f006 fb64 	bl	a7ec <k_sched_unlock>
	bool ret = true;
    4124:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    4126:	bd70      	pop	{r4, r5, r6, pc}
    4128:	4c0e      	ldr	r4, [pc, #56]	; (4164 <pm_system_suspend+0x1d8>)
    412a:	23b9      	movs	r3, #185	; 0xb9
    412c:	4622      	mov	r2, r4
    412e:	4913      	ldr	r1, [pc, #76]	; (417c <pm_system_suspend+0x1f0>)
    4130:	480e      	ldr	r0, [pc, #56]	; (416c <pm_system_suspend+0x1e0>)
    4132:	f008 f819 	bl	c168 <assert_print>
    4136:	4907      	ldr	r1, [pc, #28]	; (4154 <pm_system_suspend+0x1c8>)
    4138:	4811      	ldr	r0, [pc, #68]	; (4180 <pm_system_suspend+0x1f4>)
    413a:	f008 f815 	bl	c168 <assert_print>
    413e:	21b9      	movs	r1, #185	; 0xb9
    4140:	4620      	mov	r0, r4
    4142:	f008 f80a 	bl	c15a <assert_post_action>
    4146:	e7b1      	b.n	40ac <pm_system_suspend+0x120>
    4148:	20001228 	.word	0x20001228
    414c:	20000780 	.word	0x20000780
    4150:	20000774 	.word	0x20000774
    4154:	20000768 	.word	0x20000768
    4158:	2000076c 	.word	0x2000076c
    415c:	000f423f 	.word	0x000f423f
    4160:	000f4240 	.word	0x000f4240
    4164:	0000ddf4 	.word	0x0000ddf4
    4168:	0000de54 	.word	0x0000de54
    416c:	0000d51c 	.word	0x0000d51c
    4170:	0000de6c 	.word	0x0000de6c
    4174:	20000784 	.word	0x20000784
    4178:	0000c561 	.word	0x0000c561
    417c:	0000de24 	.word	0x0000de24
    4180:	0000de3c 	.word	0x0000de3c

00004184 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4184:	f3bf 8f5b 	dmb	ish
    4188:	4b04      	ldr	r3, [pc, #16]	; (419c <pm_policy_state_lock_is_active+0x18>)
    418a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    418e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    4192:	3800      	subs	r0, #0
    4194:	bf18      	it	ne
    4196:	2001      	movne	r0, #1
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	20000788 	.word	0x20000788

000041a0 <pm_policy_next_state>:
{
    41a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a4:	b082      	sub	sp, #8
    41a6:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    41a8:	a901      	add	r1, sp, #4
    41aa:	f000 f843 	bl	4234 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    41ae:	1e44      	subs	r4, r0, #1
    41b0:	b224      	sxth	r4, r4
    41b2:	e007      	b.n	41c4 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    41b4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    41b8:	d032      	beq.n	4220 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    41ba:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    41bc:	42b0      	cmp	r0, r6
    41be:	d92f      	bls.n	4220 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    41c0:	3c01      	subs	r4, #1
    41c2:	b224      	sxth	r4, r4
    41c4:	2c00      	cmp	r4, #0
    41c6:	db2a      	blt.n	421e <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    41c8:	9b01      	ldr	r3, [sp, #4]
    41ca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    41ce:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    41d2:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    41d6:	f7ff ffd5 	bl	4184 <pm_policy_state_lock_is_active>
    41da:	2800      	cmp	r0, #0
    41dc:	d1f0      	bne.n	41c0 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    41de:	6868      	ldr	r0, [r5, #4]
    41e0:	0c41      	lsrs	r1, r0, #17
    41e2:	03c0      	lsls	r0, r0, #15
    41e4:	4f10      	ldr	r7, [pc, #64]	; (4228 <pm_policy_next_state+0x88>)
    41e6:	19c0      	adds	r0, r0, r7
    41e8:	4a10      	ldr	r2, [pc, #64]	; (422c <pm_policy_next_state+0x8c>)
    41ea:	f04f 0300 	mov.w	r3, #0
    41ee:	f141 0100 	adc.w	r1, r1, #0
    41f2:	f7fc f967 	bl	4c4 <__aeabi_uldivmod>
    41f6:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    41f8:	68ab      	ldr	r3, [r5, #8]
    41fa:	0c59      	lsrs	r1, r3, #17
    41fc:	03db      	lsls	r3, r3, #15
    41fe:	19d8      	adds	r0, r3, r7
    4200:	4a0a      	ldr	r2, [pc, #40]	; (422c <pm_policy_next_state+0x8c>)
    4202:	f04f 0300 	mov.w	r3, #0
    4206:	f141 0100 	adc.w	r1, r1, #0
    420a:	f7fc f95b 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    420e:	4b08      	ldr	r3, [pc, #32]	; (4230 <pm_policy_next_state+0x90>)
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4216:	d0cd      	beq.n	41b4 <pm_policy_next_state+0x14>
    4218:	4283      	cmp	r3, r0
    421a:	d8cb      	bhi.n	41b4 <pm_policy_next_state+0x14>
    421c:	e7d0      	b.n	41c0 <pm_policy_next_state+0x20>
	return NULL;
    421e:	2500      	movs	r5, #0
}
    4220:	4628      	mov	r0, r5
    4222:	b002      	add	sp, #8
    4224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4228:	000f423f 	.word	0x000f423f
    422c:	000f4240 	.word	0x000f4240
    4230:	200000a0 	.word	0x200000a0

00004234 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    4234:	b908      	cbnz	r0, 423a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    4236:	4b02      	ldr	r3, [pc, #8]	; (4240 <pm_state_cpu_get_all+0xc>)
    4238:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    423a:	2000      	movs	r0, #0
    423c:	4770      	bx	lr
    423e:	bf00      	nop
    4240:	0000e3f0 	.word	0x0000e3f0

00004244 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4244:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4246:	4802      	ldr	r0, [pc, #8]	; (4250 <nrf_cc3xx_platform_abort_init+0xc>)
    4248:	f007 fc04 	bl	ba54 <nrf_cc3xx_platform_set_abort>
}
    424c:	bd08      	pop	{r3, pc}
    424e:	bf00      	nop
    4250:	0000e3f0 	.word	0x0000e3f0

00004254 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4254:	b1d0      	cbz	r0, 428c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4256:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4258:	6842      	ldr	r2, [r0, #4]
    425a:	2a04      	cmp	r2, #4
    425c:	d005      	beq.n	426a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    425e:	b1d2      	cbz	r2, 4296 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4260:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4262:	f005 fa2d 	bl	96c0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4266:	2000      	movs	r0, #0
    }
}
    4268:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    426a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    426c:	2200      	movs	r2, #0
    426e:	f3bf 8f5b 	dmb	ish
    4272:	e853 1f00 	ldrex	r1, [r3]
    4276:	2901      	cmp	r1, #1
    4278:	d103      	bne.n	4282 <mutex_unlock_platform+0x2e>
    427a:	e843 2000 	strex	r0, r2, [r3]
    427e:	2800      	cmp	r0, #0
    4280:	d1f7      	bne.n	4272 <mutex_unlock_platform+0x1e>
    4282:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4286:	d104      	bne.n	4292 <mutex_unlock_platform+0x3e>
    4288:	4610      	mov	r0, r2
    428a:	e7ed      	b.n	4268 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    428c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4290:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4292:	4802      	ldr	r0, [pc, #8]	; (429c <mutex_unlock_platform+0x48>)
    4294:	e7e8      	b.n	4268 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4296:	4802      	ldr	r0, [pc, #8]	; (42a0 <mutex_unlock_platform+0x4c>)
    4298:	e7e6      	b.n	4268 <mutex_unlock_platform+0x14>
    429a:	bf00      	nop
    429c:	ffff8fe9 	.word	0xffff8fe9
    42a0:	ffff8fea 	.word	0xffff8fea

000042a4 <mutex_lock_platform>:
    if(mutex == NULL) {
    42a4:	b320      	cbz	r0, 42f0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    42a6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    42a8:	6842      	ldr	r2, [r0, #4]
    42aa:	2a04      	cmp	r2, #4
    42ac:	d002      	beq.n	42b4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    42ae:	b992      	cbnz	r2, 42d6 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    42b0:	4811      	ldr	r0, [pc, #68]	; (42f8 <mutex_lock_platform+0x54>)
    42b2:	e00f      	b.n	42d4 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    42b4:	6803      	ldr	r3, [r0, #0]
    42b6:	2201      	movs	r2, #1
    42b8:	f3bf 8f5b 	dmb	ish
    42bc:	e853 1f00 	ldrex	r1, [r3]
    42c0:	2900      	cmp	r1, #0
    42c2:	d103      	bne.n	42cc <mutex_lock_platform+0x28>
    42c4:	e843 2000 	strex	r0, r2, [r3]
    42c8:	2800      	cmp	r0, #0
    42ca:	d1f7      	bne.n	42bc <mutex_lock_platform+0x18>
    42cc:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    42d0:	d10c      	bne.n	42ec <mutex_lock_platform+0x48>
    42d2:	2000      	movs	r0, #0
}
    42d4:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    42d6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    42d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42e0:	f005 f8ce 	bl	9480 <z_impl_k_mutex_lock>
        if (ret == 0) {
    42e4:	2800      	cmp	r0, #0
    42e6:	d0f5      	beq.n	42d4 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    42e8:	4804      	ldr	r0, [pc, #16]	; (42fc <mutex_lock_platform+0x58>)
    42ea:	e7f3      	b.n	42d4 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    42ec:	4803      	ldr	r0, [pc, #12]	; (42fc <mutex_lock_platform+0x58>)
    42ee:	e7f1      	b.n	42d4 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    42f0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    42f4:	4770      	bx	lr
    42f6:	bf00      	nop
    42f8:	ffff8fea 	.word	0xffff8fea
    42fc:	ffff8fe9 	.word	0xffff8fe9

00004300 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4300:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4302:	4604      	mov	r4, r0
    4304:	b188      	cbz	r0, 432a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4306:	6863      	ldr	r3, [r4, #4]
    4308:	2b04      	cmp	r3, #4
    430a:	d00d      	beq.n	4328 <mutex_free_platform+0x28>
    430c:	2b08      	cmp	r3, #8
    430e:	d00b      	beq.n	4328 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4310:	b153      	cbz	r3, 4328 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4312:	f013 0f02 	tst.w	r3, #2
    4316:	d00d      	beq.n	4334 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4318:	4621      	mov	r1, r4
    431a:	4809      	ldr	r0, [pc, #36]	; (4340 <mutex_free_platform+0x40>)
    431c:	f004 fdfa 	bl	8f14 <k_mem_slab_free>
        mutex->mutex = NULL;
    4320:	2300      	movs	r3, #0
    4322:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4324:	2300      	movs	r3, #0
    4326:	6063      	str	r3, [r4, #4]
}
    4328:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    432a:	4b06      	ldr	r3, [pc, #24]	; (4344 <mutex_free_platform+0x44>)
    432c:	685b      	ldr	r3, [r3, #4]
    432e:	4806      	ldr	r0, [pc, #24]	; (4348 <mutex_free_platform+0x48>)
    4330:	4798      	blx	r3
    4332:	e7e8      	b.n	4306 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4334:	2214      	movs	r2, #20
    4336:	2100      	movs	r1, #0
    4338:	6820      	ldr	r0, [r4, #0]
    433a:	f008 f8dc 	bl	c4f6 <memset>
    433e:	e7f1      	b.n	4324 <mutex_free_platform+0x24>
    4340:	200007a4 	.word	0x200007a4
    4344:	2000017c 	.word	0x2000017c
    4348:	0000e3f8 	.word	0x0000e3f8

0000434c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    434c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    434e:	4604      	mov	r4, r0
    4350:	b178      	cbz	r0, 4372 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4352:	6863      	ldr	r3, [r4, #4]
    4354:	2b04      	cmp	r3, #4
    4356:	d00b      	beq.n	4370 <mutex_init_platform+0x24>
    4358:	2b08      	cmp	r3, #8
    435a:	d009      	beq.n	4370 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    435c:	b90b      	cbnz	r3, 4362 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    435e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4360:	b163      	cbz	r3, 437c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4362:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4364:	f008 fe1f 	bl	cfa6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4368:	6863      	ldr	r3, [r4, #4]
    436a:	f043 0301 	orr.w	r3, r3, #1
    436e:	6063      	str	r3, [r4, #4]
}
    4370:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4372:	4b0f      	ldr	r3, [pc, #60]	; (43b0 <mutex_init_platform+0x64>)
    4374:	685b      	ldr	r3, [r3, #4]
    4376:	480f      	ldr	r0, [pc, #60]	; (43b4 <mutex_init_platform+0x68>)
    4378:	4798      	blx	r3
    437a:	e7ea      	b.n	4352 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    437c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4384:	4621      	mov	r1, r4
    4386:	480c      	ldr	r0, [pc, #48]	; (43b8 <mutex_init_platform+0x6c>)
    4388:	f004 fd4e 	bl	8e28 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    438c:	b908      	cbnz	r0, 4392 <mutex_init_platform+0x46>
    438e:	6823      	ldr	r3, [r4, #0]
    4390:	b91b      	cbnz	r3, 439a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    4392:	4b07      	ldr	r3, [pc, #28]	; (43b0 <mutex_init_platform+0x64>)
    4394:	685b      	ldr	r3, [r3, #4]
    4396:	4809      	ldr	r0, [pc, #36]	; (43bc <mutex_init_platform+0x70>)
    4398:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    439a:	2214      	movs	r2, #20
    439c:	2100      	movs	r1, #0
    439e:	6820      	ldr	r0, [r4, #0]
    43a0:	f008 f8a9 	bl	c4f6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    43a4:	6863      	ldr	r3, [r4, #4]
    43a6:	f043 0302 	orr.w	r3, r3, #2
    43aa:	6063      	str	r3, [r4, #4]
    43ac:	e7d9      	b.n	4362 <mutex_init_platform+0x16>
    43ae:	bf00      	nop
    43b0:	2000017c 	.word	0x2000017c
    43b4:	0000e3f8 	.word	0x0000e3f8
    43b8:	200007a4 	.word	0x200007a4
    43bc:	0000e420 	.word	0x0000e420

000043c0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    43c0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    43c2:	2340      	movs	r3, #64	; 0x40
    43c4:	2214      	movs	r2, #20
    43c6:	4904      	ldr	r1, [pc, #16]	; (43d8 <nrf_cc3xx_platform_mutex_init+0x18>)
    43c8:	4804      	ldr	r0, [pc, #16]	; (43dc <nrf_cc3xx_platform_mutex_init+0x1c>)
    43ca:	f008 fd98 	bl	cefe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    43ce:	4904      	ldr	r1, [pc, #16]	; (43e0 <nrf_cc3xx_platform_mutex_init+0x20>)
    43d0:	4804      	ldr	r0, [pc, #16]	; (43e4 <nrf_cc3xx_platform_mutex_init+0x24>)
    43d2:	f007 fb9f 	bl	bb14 <nrf_cc3xx_platform_set_mutexes>
}
    43d6:	bd08      	pop	{r3, pc}
    43d8:	200007c4 	.word	0x200007c4
    43dc:	200007a4 	.word	0x200007a4
    43e0:	0000e460 	.word	0x0000e460
    43e4:	0000e450 	.word	0x0000e450

000043e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    43e8:	4901      	ldr	r1, [pc, #4]	; (43f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    43ea:	2210      	movs	r2, #16
	str	r2, [r1]
    43ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    43ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    43f0:	e000ed10 	.word	0xe000ed10

000043f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    43f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    43f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    43f8:	f380 8811 	msr	BASEPRI, r0
	isb
    43fc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4400:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4404:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4406:	b662      	cpsie	i
	isb
    4408:	f3bf 8f6f 	isb	sy

	bx	lr
    440c:	4770      	bx	lr
    440e:	bf00      	nop

00004410 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4410:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4412:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4414:	f381 8811 	msr	BASEPRI, r1

	wfe
    4418:	bf20      	wfe

	msr	BASEPRI, r0
    441a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    441e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4420:	4770      	bx	lr
    4422:	bf00      	nop

00004424 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4424:	b570      	push	{r4, r5, r6, lr}
    4426:	b086      	sub	sp, #24
    4428:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    442a:	4e1e      	ldr	r6, [pc, #120]	; (44a4 <esf_dump+0x80>)
    442c:	6883      	ldr	r3, [r0, #8]
    442e:	9305      	str	r3, [sp, #20]
    4430:	6843      	ldr	r3, [r0, #4]
    4432:	9304      	str	r3, [sp, #16]
    4434:	6803      	ldr	r3, [r0, #0]
    4436:	9303      	str	r3, [sp, #12]
    4438:	4b1b      	ldr	r3, [pc, #108]	; (44a8 <esf_dump+0x84>)
    443a:	9302      	str	r3, [sp, #8]
    443c:	2400      	movs	r4, #0
    443e:	9401      	str	r4, [sp, #4]
    4440:	9400      	str	r4, [sp, #0]
    4442:	4623      	mov	r3, r4
    4444:	2201      	movs	r2, #1
    4446:	4631      	mov	r1, r6
    4448:	4620      	mov	r0, r4
    444a:	f007 ff41 	bl	c2d0 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    444e:	696b      	ldr	r3, [r5, #20]
    4450:	9305      	str	r3, [sp, #20]
    4452:	692b      	ldr	r3, [r5, #16]
    4454:	9304      	str	r3, [sp, #16]
    4456:	68eb      	ldr	r3, [r5, #12]
    4458:	9303      	str	r3, [sp, #12]
    445a:	4b14      	ldr	r3, [pc, #80]	; (44ac <esf_dump+0x88>)
    445c:	9302      	str	r3, [sp, #8]
    445e:	9401      	str	r4, [sp, #4]
    4460:	9400      	str	r4, [sp, #0]
    4462:	4623      	mov	r3, r4
    4464:	2201      	movs	r2, #1
    4466:	4631      	mov	r1, r6
    4468:	4620      	mov	r0, r4
    446a:	f007 ff31 	bl	c2d0 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    446e:	69eb      	ldr	r3, [r5, #28]
    4470:	9303      	str	r3, [sp, #12]
    4472:	4b0f      	ldr	r3, [pc, #60]	; (44b0 <esf_dump+0x8c>)
    4474:	9302      	str	r3, [sp, #8]
    4476:	9401      	str	r4, [sp, #4]
    4478:	9400      	str	r4, [sp, #0]
    447a:	4623      	mov	r3, r4
    447c:	2201      	movs	r2, #1
    447e:	4631      	mov	r1, r6
    4480:	4620      	mov	r0, r4
    4482:	f007 ff25 	bl	c2d0 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4486:	69ab      	ldr	r3, [r5, #24]
    4488:	9303      	str	r3, [sp, #12]
    448a:	4b0a      	ldr	r3, [pc, #40]	; (44b4 <esf_dump+0x90>)
    448c:	9302      	str	r3, [sp, #8]
    448e:	9401      	str	r4, [sp, #4]
    4490:	9400      	str	r4, [sp, #0]
    4492:	4623      	mov	r3, r4
    4494:	2201      	movs	r2, #1
    4496:	4631      	mov	r1, r6
    4498:	4620      	mov	r0, r4
    449a:	f007 ff19 	bl	c2d0 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    449e:	b006      	add	sp, #24
    44a0:	bd70      	pop	{r4, r5, r6, pc}
    44a2:	bf00      	nop
    44a4:	0000d380 	.word	0x0000d380
    44a8:	0000e474 	.word	0x0000e474
    44ac:	0000e4a4 	.word	0x0000e4a4
    44b0:	0000e4d4 	.word	0x0000e4d4
    44b4:	0000e4e4 	.word	0x0000e4e4

000044b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    44b8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    44ba:	2800      	cmp	r0, #0
    44bc:	db07      	blt.n	44ce <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44be:	f000 021f 	and.w	r2, r0, #31
    44c2:	0940      	lsrs	r0, r0, #5
    44c4:	2301      	movs	r3, #1
    44c6:	4093      	lsls	r3, r2
    44c8:	4a01      	ldr	r2, [pc, #4]	; (44d0 <arch_irq_enable+0x18>)
    44ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    44ce:	4770      	bx	lr
    44d0:	e000e100 	.word	0xe000e100

000044d4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    44d4:	0942      	lsrs	r2, r0, #5
    44d6:	4b05      	ldr	r3, [pc, #20]	; (44ec <arch_irq_is_enabled+0x18>)
    44d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    44dc:	f000 001f 	and.w	r0, r0, #31
    44e0:	2301      	movs	r3, #1
    44e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    44e6:	4010      	ands	r0, r2
    44e8:	4770      	bx	lr
    44ea:	bf00      	nop
    44ec:	e000e100 	.word	0xe000e100

000044f0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    44f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44f2:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    44f4:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    44f6:	2d07      	cmp	r5, #7
    44f8:	d80b      	bhi.n	4512 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    44fa:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    44fc:	2800      	cmp	r0, #0
    44fe:	db1b      	blt.n	4538 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4500:	016d      	lsls	r5, r5, #5
    4502:	b2ed      	uxtb	r5, r5
    4504:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4508:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    450c:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    4510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4512:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    4514:	4f0c      	ldr	r7, [pc, #48]	; (4548 <z_arm_irq_priority_set+0x58>)
    4516:	2357      	movs	r3, #87	; 0x57
    4518:	463a      	mov	r2, r7
    451a:	490c      	ldr	r1, [pc, #48]	; (454c <z_arm_irq_priority_set+0x5c>)
    451c:	480c      	ldr	r0, [pc, #48]	; (4550 <z_arm_irq_priority_set+0x60>)
    451e:	f007 fe23 	bl	c168 <assert_print>
    4522:	2307      	movs	r3, #7
    4524:	4622      	mov	r2, r4
    4526:	4631      	mov	r1, r6
    4528:	480a      	ldr	r0, [pc, #40]	; (4554 <z_arm_irq_priority_set+0x64>)
    452a:	f007 fe1d 	bl	c168 <assert_print>
    452e:	2157      	movs	r1, #87	; 0x57
    4530:	4638      	mov	r0, r7
    4532:	f007 fe12 	bl	c15a <assert_post_action>
    4536:	e7e0      	b.n	44fa <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4538:	f000 000f 	and.w	r0, r0, #15
    453c:	016d      	lsls	r5, r5, #5
    453e:	b2ed      	uxtb	r5, r5
    4540:	4b05      	ldr	r3, [pc, #20]	; (4558 <z_arm_irq_priority_set+0x68>)
    4542:	541d      	strb	r5, [r3, r0]
}
    4544:	e7e4      	b.n	4510 <z_arm_irq_priority_set+0x20>
    4546:	bf00      	nop
    4548:	0000e514 	.word	0x0000e514
    454c:	0000e54c 	.word	0x0000e54c
    4550:	0000d51c 	.word	0x0000d51c
    4554:	0000e568 	.word	0x0000e568
    4558:	e000ed14 	.word	0xe000ed14

0000455c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    455c:	bf30      	wfi
    b z_SysNmiOnReset
    455e:	f7ff bffd 	b.w	455c <z_SysNmiOnReset>
    4562:	bf00      	nop

00004564 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4564:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4566:	4b0b      	ldr	r3, [pc, #44]	; (4594 <z_arm_prep_c+0x30>)
    4568:	4a0b      	ldr	r2, [pc, #44]	; (4598 <z_arm_prep_c+0x34>)
    456a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    456e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4570:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4574:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4578:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    457c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4584:	f004 fb7c 	bl	8c80 <z_bss_zero>
	z_data_copy();
    4588:	f006 fd42 	bl	b010 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    458c:	f000 fc6a 	bl	4e64 <z_arm_interrupt_init>
	z_cstart();
    4590:	f004 fbd4 	bl	8d3c <z_cstart>
    4594:	e000ed00 	.word	0xe000ed00
    4598:	00000000 	.word	0x00000000

0000459c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    459c:	4a0a      	ldr	r2, [pc, #40]	; (45c8 <arch_swap+0x2c>)
    459e:	6893      	ldr	r3, [r2, #8]
    45a0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    45a4:	4909      	ldr	r1, [pc, #36]	; (45cc <arch_swap+0x30>)
    45a6:	6809      	ldr	r1, [r1, #0]
    45a8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    45ac:	4908      	ldr	r1, [pc, #32]	; (45d0 <arch_swap+0x34>)
    45ae:	684b      	ldr	r3, [r1, #4]
    45b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    45b4:	604b      	str	r3, [r1, #4]
    45b6:	2300      	movs	r3, #0
    45b8:	f383 8811 	msr	BASEPRI, r3
    45bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    45c0:	6893      	ldr	r3, [r2, #8]
}
    45c2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    45c6:	4770      	bx	lr
    45c8:	20001228 	.word	0x20001228
    45cc:	0000f208 	.word	0x0000f208
    45d0:	e000ed00 	.word	0xe000ed00

000045d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    45d4:	4913      	ldr	r1, [pc, #76]	; (4624 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    45d6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    45d8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    45dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    45de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    45e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    45e6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    45e8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    45ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    45f0:	4f0d      	ldr	r7, [pc, #52]	; (4628 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    45f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    45f6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    45f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    45fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    45fc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4600:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4602:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4606:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    460a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    460c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    460e:	f000 fcd3 	bl	4fb8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4612:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4616:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    461a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    461e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4622:	4770      	bx	lr
    ldr r1, =_kernel
    4624:	20001228 	.word	0x20001228
    ldr v4, =_SCS_ICSR
    4628:	e000ed04 	.word	0xe000ed04

0000462c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    462c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4630:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4632:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4636:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    463a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    463c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4640:	2902      	cmp	r1, #2
    beq _oops
    4642:	d0ff      	beq.n	4644 <_oops>

00004644 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4644:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4646:	f007 fe5e 	bl	c306 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    464a:	bd01      	pop	{r0, pc}

0000464c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    464c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    464e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4652:	490e      	ldr	r1, [pc, #56]	; (468c <arch_new_thread+0x40>)
    4654:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4658:	f021 0101 	bic.w	r1, r1, #1
    465c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4660:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4664:	9b01      	ldr	r3, [sp, #4]
    4666:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    466a:	9b02      	ldr	r3, [sp, #8]
    466c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4670:	9b03      	ldr	r3, [sp, #12]
    4672:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    467a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    467e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4680:	2300      	movs	r3, #0
    4682:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4686:	bc10      	pop	{r4}
    4688:	4770      	bx	lr
    468a:	bf00      	nop
    468c:	0000bfb3 	.word	0x0000bfb3

00004690 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4690:	4b12      	ldr	r3, [pc, #72]	; (46dc <z_check_thread_stack_fail+0x4c>)
    4692:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4694:	b302      	cbz	r2, 46d8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4696:	f110 0f16 	cmn.w	r0, #22
    469a:	d011      	beq.n	46c0 <z_check_thread_stack_fail+0x30>
    469c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    46a0:	f1a3 0c20 	sub.w	ip, r3, #32
    46a4:	4584      	cmp	ip, r0
    46a6:	d805      	bhi.n	46b4 <z_check_thread_stack_fail+0x24>
    46a8:	4283      	cmp	r3, r0
    46aa:	d905      	bls.n	46b8 <z_check_thread_stack_fail+0x28>
    46ac:	428b      	cmp	r3, r1
    46ae:	d805      	bhi.n	46bc <z_check_thread_stack_fail+0x2c>
    46b0:	2100      	movs	r1, #0
    46b2:	e00b      	b.n	46cc <z_check_thread_stack_fail+0x3c>
    46b4:	2100      	movs	r1, #0
    46b6:	e009      	b.n	46cc <z_check_thread_stack_fail+0x3c>
    46b8:	2100      	movs	r1, #0
    46ba:	e007      	b.n	46cc <z_check_thread_stack_fail+0x3c>
    46bc:	2101      	movs	r1, #1
    46be:	e005      	b.n	46cc <z_check_thread_stack_fail+0x3c>
    46c0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    46c4:	428b      	cmp	r3, r1
    46c6:	bf94      	ite	ls
    46c8:	2100      	movls	r1, #0
    46ca:	2101      	movhi	r1, #1
    46cc:	b909      	cbnz	r1, 46d2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    46ce:	2000      	movs	r0, #0
}
    46d0:	4770      	bx	lr
		return thread->stack_info.start;
    46d2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    46d6:	4770      	bx	lr
		return 0;
    46d8:	2000      	movs	r0, #0
    46da:	4770      	bx	lr
    46dc:	20001228 	.word	0x20001228

000046e0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    46e0:	b508      	push	{r3, lr}
    46e2:	460d      	mov	r5, r1
    46e4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    46e6:	4b08      	ldr	r3, [pc, #32]	; (4708 <arch_switch_to_main_thread+0x28>)
    46e8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    46ea:	f000 fc65 	bl	4fb8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    46ee:	4620      	mov	r0, r4
    46f0:	f385 8809 	msr	PSP, r5
    46f4:	2100      	movs	r1, #0
    46f6:	b663      	cpsie	if
    46f8:	f381 8811 	msr	BASEPRI, r1
    46fc:	f3bf 8f6f 	isb	sy
    4700:	2200      	movs	r2, #0
    4702:	2300      	movs	r3, #0
    4704:	f007 fc55 	bl	bfb2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4708:	20001228 	.word	0x20001228

0000470c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    470c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    470e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4710:	4a0b      	ldr	r2, [pc, #44]	; (4740 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4712:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4714:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4716:	bf1e      	ittt	ne
	movne	r1, #0
    4718:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    471a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    471c:	f008 fc27 	blne	cf6e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4720:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4722:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4726:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    472a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    472e:	4905      	ldr	r1, [pc, #20]	; (4744 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4730:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4732:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4734:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4736:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    473a:	4903      	ldr	r1, [pc, #12]	; (4748 <_isr_wrapper+0x3c>)
	bx r1
    473c:	4708      	bx	r1
    473e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4740:	20001228 	.word	0x20001228
	ldr r1, =_sw_isr_table
    4744:	0000d1d0 	.word	0x0000d1d0
	ldr r1, =z_arm_int_exit
    4748:	0000474d 	.word	0x0000474d

0000474c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    474c:	4b04      	ldr	r3, [pc, #16]	; (4760 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    474e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4750:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4752:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4754:	d003      	beq.n	475e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4756:	4903      	ldr	r1, [pc, #12]	; (4764 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    475c:	600a      	str	r2, [r1, #0]

0000475e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    475e:	4770      	bx	lr
	ldr r3, =_kernel
    4760:	20001228 	.word	0x20001228
	ldr r1, =_SCS_ICSR
    4764:	e000ed04 	.word	0xe000ed04

00004768 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4768:	b570      	push	{r4, r5, r6, lr}
    476a:	b084      	sub	sp, #16
    476c:	4605      	mov	r5, r0
    476e:	460e      	mov	r6, r1
    4770:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4772:	4b47      	ldr	r3, [pc, #284]	; (4890 <bus_fault+0x128>)
    4774:	9302      	str	r3, [sp, #8]
    4776:	2000      	movs	r0, #0
    4778:	9001      	str	r0, [sp, #4]
    477a:	9000      	str	r0, [sp, #0]
    477c:	4603      	mov	r3, r0
    477e:	2201      	movs	r2, #1
    4780:	4944      	ldr	r1, [pc, #272]	; (4894 <bus_fault+0x12c>)
    4782:	f007 fdd4 	bl	c32e <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4786:	4b44      	ldr	r3, [pc, #272]	; (4898 <bus_fault+0x130>)
    4788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    478a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    478e:	d125      	bne.n	47dc <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4790:	4b41      	ldr	r3, [pc, #260]	; (4898 <bus_fault+0x130>)
    4792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4794:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4798:	d12b      	bne.n	47f2 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    479a:	4b3f      	ldr	r3, [pc, #252]	; (4898 <bus_fault+0x130>)
    479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    479e:	f413 7f00 	tst.w	r3, #512	; 0x200
    47a2:	d131      	bne.n	4808 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    47a4:	4b3c      	ldr	r3, [pc, #240]	; (4898 <bus_fault+0x130>)
    47a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    47ac:	d14f      	bne.n	484e <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    47ae:	4b3a      	ldr	r3, [pc, #232]	; (4898 <bus_fault+0x130>)
    47b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47b2:	f413 7f80 	tst.w	r3, #256	; 0x100
    47b6:	d155      	bne.n	4864 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    47b8:	4b37      	ldr	r3, [pc, #220]	; (4898 <bus_fault+0x130>)
    47ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    47c0:	d15b      	bne.n	487a <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    47c2:	4a35      	ldr	r2, [pc, #212]	; (4898 <bus_fault+0x130>)
    47c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    47c6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    47ca:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    47cc:	2101      	movs	r1, #1
    47ce:	4628      	mov	r0, r5
    47d0:	f007 fdab 	bl	c32a <memory_fault_recoverable>
    47d4:	7020      	strb	r0, [r4, #0]

	return reason;
}
    47d6:	2000      	movs	r0, #0
    47d8:	b004      	add	sp, #16
    47da:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    47dc:	4b2f      	ldr	r3, [pc, #188]	; (489c <bus_fault+0x134>)
    47de:	9302      	str	r3, [sp, #8]
    47e0:	2000      	movs	r0, #0
    47e2:	9001      	str	r0, [sp, #4]
    47e4:	9000      	str	r0, [sp, #0]
    47e6:	4603      	mov	r3, r0
    47e8:	2201      	movs	r2, #1
    47ea:	492a      	ldr	r1, [pc, #168]	; (4894 <bus_fault+0x12c>)
    47ec:	f007 fd9f 	bl	c32e <z_log_msg2_runtime_create>
    47f0:	e7ce      	b.n	4790 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    47f2:	4b2b      	ldr	r3, [pc, #172]	; (48a0 <bus_fault+0x138>)
    47f4:	9302      	str	r3, [sp, #8]
    47f6:	2000      	movs	r0, #0
    47f8:	9001      	str	r0, [sp, #4]
    47fa:	9000      	str	r0, [sp, #0]
    47fc:	4603      	mov	r3, r0
    47fe:	2201      	movs	r2, #1
    4800:	4924      	ldr	r1, [pc, #144]	; (4894 <bus_fault+0x12c>)
    4802:	f007 fd94 	bl	c32e <z_log_msg2_runtime_create>
    4806:	e7c8      	b.n	479a <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    4808:	4b26      	ldr	r3, [pc, #152]	; (48a4 <bus_fault+0x13c>)
    480a:	9302      	str	r3, [sp, #8]
    480c:	2000      	movs	r0, #0
    480e:	9001      	str	r0, [sp, #4]
    4810:	9000      	str	r0, [sp, #0]
    4812:	4603      	mov	r3, r0
    4814:	2201      	movs	r2, #1
    4816:	491f      	ldr	r1, [pc, #124]	; (4894 <bus_fault+0x12c>)
    4818:	f007 fd89 	bl	c32e <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    481c:	4b1e      	ldr	r3, [pc, #120]	; (4898 <bus_fault+0x130>)
    481e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4822:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4826:	d0bd      	beq.n	47a4 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4828:	9203      	str	r2, [sp, #12]
    482a:	4b1f      	ldr	r3, [pc, #124]	; (48a8 <bus_fault+0x140>)
    482c:	9302      	str	r3, [sp, #8]
    482e:	2000      	movs	r0, #0
    4830:	9001      	str	r0, [sp, #4]
    4832:	9000      	str	r0, [sp, #0]
    4834:	4603      	mov	r3, r0
    4836:	2201      	movs	r2, #1
    4838:	4916      	ldr	r1, [pc, #88]	; (4894 <bus_fault+0x12c>)
    483a:	f007 fd78 	bl	c32e <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    483e:	2e00      	cmp	r6, #0
    4840:	d0b0      	beq.n	47a4 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4842:	4a15      	ldr	r2, [pc, #84]	; (4898 <bus_fault+0x130>)
    4844:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4846:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    484a:	6293      	str	r3, [r2, #40]	; 0x28
    484c:	e7aa      	b.n	47a4 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    484e:	4b17      	ldr	r3, [pc, #92]	; (48ac <bus_fault+0x144>)
    4850:	9302      	str	r3, [sp, #8]
    4852:	2000      	movs	r0, #0
    4854:	9001      	str	r0, [sp, #4]
    4856:	9000      	str	r0, [sp, #0]
    4858:	4603      	mov	r3, r0
    485a:	2201      	movs	r2, #1
    485c:	490d      	ldr	r1, [pc, #52]	; (4894 <bus_fault+0x12c>)
    485e:	f007 fd66 	bl	c32e <z_log_msg2_runtime_create>
    4862:	e7a4      	b.n	47ae <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    4864:	4b12      	ldr	r3, [pc, #72]	; (48b0 <bus_fault+0x148>)
    4866:	9302      	str	r3, [sp, #8]
    4868:	2000      	movs	r0, #0
    486a:	9001      	str	r0, [sp, #4]
    486c:	9000      	str	r0, [sp, #0]
    486e:	4603      	mov	r3, r0
    4870:	2201      	movs	r2, #1
    4872:	4908      	ldr	r1, [pc, #32]	; (4894 <bus_fault+0x12c>)
    4874:	f007 fd5b 	bl	c32e <z_log_msg2_runtime_create>
    4878:	e7a3      	b.n	47c2 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    487a:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <bus_fault+0x14c>)
    487c:	9302      	str	r3, [sp, #8]
    487e:	2000      	movs	r0, #0
    4880:	9001      	str	r0, [sp, #4]
    4882:	9000      	str	r0, [sp, #0]
    4884:	4603      	mov	r3, r0
    4886:	2201      	movs	r2, #1
    4888:	4902      	ldr	r1, [pc, #8]	; (4894 <bus_fault+0x12c>)
    488a:	f007 fd50 	bl	c32e <z_log_msg2_runtime_create>
    488e:	e798      	b.n	47c2 <bus_fault+0x5a>
    4890:	0000e5a8 	.word	0x0000e5a8
    4894:	0000d380 	.word	0x0000d380
    4898:	e000ed00 	.word	0xe000ed00
    489c:	0000e5c0 	.word	0x0000e5c0
    48a0:	0000e5d4 	.word	0x0000e5d4
    48a4:	0000e5e8 	.word	0x0000e5e8
    48a8:	0000e604 	.word	0x0000e604
    48ac:	0000e61c 	.word	0x0000e61c
    48b0:	0000e638 	.word	0x0000e638
    48b4:	0000e650 	.word	0x0000e650

000048b8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    48b8:	b500      	push	{lr}
    48ba:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    48bc:	4b3a      	ldr	r3, [pc, #232]	; (49a8 <usage_fault+0xf0>)
    48be:	9302      	str	r3, [sp, #8]
    48c0:	2000      	movs	r0, #0
    48c2:	9001      	str	r0, [sp, #4]
    48c4:	9000      	str	r0, [sp, #0]
    48c6:	4603      	mov	r3, r0
    48c8:	2201      	movs	r2, #1
    48ca:	4938      	ldr	r1, [pc, #224]	; (49ac <usage_fault+0xf4>)
    48cc:	f007 fd2f 	bl	c32e <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    48d0:	4b37      	ldr	r3, [pc, #220]	; (49b0 <usage_fault+0xf8>)
    48d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    48d8:	d123      	bne.n	4922 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    48da:	4b35      	ldr	r3, [pc, #212]	; (49b0 <usage_fault+0xf8>)
    48dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    48e2:	d129      	bne.n	4938 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    48e4:	4b32      	ldr	r3, [pc, #200]	; (49b0 <usage_fault+0xf8>)
    48e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48e8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    48ec:	d12f      	bne.n	494e <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    48ee:	4b30      	ldr	r3, [pc, #192]	; (49b0 <usage_fault+0xf8>)
    48f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    48f6:	d135      	bne.n	4964 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    48f8:	4b2d      	ldr	r3, [pc, #180]	; (49b0 <usage_fault+0xf8>)
    48fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    4900:	d13b      	bne.n	497a <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4902:	4b2b      	ldr	r3, [pc, #172]	; (49b0 <usage_fault+0xf8>)
    4904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4906:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    490a:	d141      	bne.n	4990 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    490c:	4a28      	ldr	r2, [pc, #160]	; (49b0 <usage_fault+0xf8>)
    490e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4910:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4914:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4918:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    491a:	2000      	movs	r0, #0
    491c:	b005      	add	sp, #20
    491e:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    4922:	4b24      	ldr	r3, [pc, #144]	; (49b4 <usage_fault+0xfc>)
    4924:	9302      	str	r3, [sp, #8]
    4926:	2000      	movs	r0, #0
    4928:	9001      	str	r0, [sp, #4]
    492a:	9000      	str	r0, [sp, #0]
    492c:	4603      	mov	r3, r0
    492e:	2201      	movs	r2, #1
    4930:	491e      	ldr	r1, [pc, #120]	; (49ac <usage_fault+0xf4>)
    4932:	f007 fcfc 	bl	c32e <z_log_msg2_runtime_create>
    4936:	e7d0      	b.n	48da <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    4938:	4b1f      	ldr	r3, [pc, #124]	; (49b8 <usage_fault+0x100>)
    493a:	9302      	str	r3, [sp, #8]
    493c:	2000      	movs	r0, #0
    493e:	9001      	str	r0, [sp, #4]
    4940:	9000      	str	r0, [sp, #0]
    4942:	4603      	mov	r3, r0
    4944:	2201      	movs	r2, #1
    4946:	4919      	ldr	r1, [pc, #100]	; (49ac <usage_fault+0xf4>)
    4948:	f007 fcf1 	bl	c32e <z_log_msg2_runtime_create>
    494c:	e7ca      	b.n	48e4 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    494e:	4b1b      	ldr	r3, [pc, #108]	; (49bc <usage_fault+0x104>)
    4950:	9302      	str	r3, [sp, #8]
    4952:	2000      	movs	r0, #0
    4954:	9001      	str	r0, [sp, #4]
    4956:	9000      	str	r0, [sp, #0]
    4958:	4603      	mov	r3, r0
    495a:	2201      	movs	r2, #1
    495c:	4913      	ldr	r1, [pc, #76]	; (49ac <usage_fault+0xf4>)
    495e:	f007 fce6 	bl	c32e <z_log_msg2_runtime_create>
    4962:	e7c4      	b.n	48ee <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4964:	4b16      	ldr	r3, [pc, #88]	; (49c0 <usage_fault+0x108>)
    4966:	9302      	str	r3, [sp, #8]
    4968:	2000      	movs	r0, #0
    496a:	9001      	str	r0, [sp, #4]
    496c:	9000      	str	r0, [sp, #0]
    496e:	4603      	mov	r3, r0
    4970:	2201      	movs	r2, #1
    4972:	490e      	ldr	r1, [pc, #56]	; (49ac <usage_fault+0xf4>)
    4974:	f007 fcdb 	bl	c32e <z_log_msg2_runtime_create>
    4978:	e7be      	b.n	48f8 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    497a:	4b12      	ldr	r3, [pc, #72]	; (49c4 <usage_fault+0x10c>)
    497c:	9302      	str	r3, [sp, #8]
    497e:	2000      	movs	r0, #0
    4980:	9001      	str	r0, [sp, #4]
    4982:	9000      	str	r0, [sp, #0]
    4984:	4603      	mov	r3, r0
    4986:	2201      	movs	r2, #1
    4988:	4908      	ldr	r1, [pc, #32]	; (49ac <usage_fault+0xf4>)
    498a:	f007 fcd0 	bl	c32e <z_log_msg2_runtime_create>
    498e:	e7b8      	b.n	4902 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4990:	4b0d      	ldr	r3, [pc, #52]	; (49c8 <usage_fault+0x110>)
    4992:	9302      	str	r3, [sp, #8]
    4994:	2000      	movs	r0, #0
    4996:	9001      	str	r0, [sp, #4]
    4998:	9000      	str	r0, [sp, #0]
    499a:	4603      	mov	r3, r0
    499c:	2201      	movs	r2, #1
    499e:	4903      	ldr	r1, [pc, #12]	; (49ac <usage_fault+0xf4>)
    49a0:	f007 fcc5 	bl	c32e <z_log_msg2_runtime_create>
    49a4:	e7b2      	b.n	490c <usage_fault+0x54>
    49a6:	bf00      	nop
    49a8:	0000e680 	.word	0x0000e680
    49ac:	0000d380 	.word	0x0000d380
    49b0:	e000ed00 	.word	0xe000ed00
    49b4:	0000e698 	.word	0x0000e698
    49b8:	0000e6ac 	.word	0x0000e6ac
    49bc:	0000e6c8 	.word	0x0000e6c8
    49c0:	0000e6e8 	.word	0x0000e6e8
    49c4:	0000e710 	.word	0x0000e710
    49c8:	0000e72c 	.word	0x0000e72c

000049cc <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    49cc:	b500      	push	{lr}
    49ce:	b085      	sub	sp, #20
	*recoverable = false;
    49d0:	2000      	movs	r0, #0
    49d2:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    49d4:	4b05      	ldr	r3, [pc, #20]	; (49ec <debug_monitor+0x20>)
    49d6:	9302      	str	r3, [sp, #8]
    49d8:	9001      	str	r0, [sp, #4]
    49da:	9000      	str	r0, [sp, #0]
    49dc:	4603      	mov	r3, r0
    49de:	2201      	movs	r2, #1
    49e0:	4903      	ldr	r1, [pc, #12]	; (49f0 <debug_monitor+0x24>)
    49e2:	f007 fca4 	bl	c32e <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    49e6:	b005      	add	sp, #20
    49e8:	f85d fb04 	ldr.w	pc, [sp], #4
    49ec:	0000e758 	.word	0x0000e758
    49f0:	0000d380 	.word	0x0000d380

000049f4 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    49f4:	b500      	push	{lr}
    49f6:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    49f8:	290f      	cmp	r1, #15
    49fa:	dc10      	bgt.n	4a1e <reserved_exception+0x2a>
    49fc:	4b09      	ldr	r3, [pc, #36]	; (4a24 <reserved_exception+0x30>)
    49fe:	3910      	subs	r1, #16
    4a00:	9104      	str	r1, [sp, #16]
    4a02:	9303      	str	r3, [sp, #12]
    4a04:	4b08      	ldr	r3, [pc, #32]	; (4a28 <reserved_exception+0x34>)
    4a06:	9302      	str	r3, [sp, #8]
    4a08:	2000      	movs	r0, #0
    4a0a:	9001      	str	r0, [sp, #4]
    4a0c:	9000      	str	r0, [sp, #0]
    4a0e:	4603      	mov	r3, r0
    4a10:	2201      	movs	r2, #1
    4a12:	4906      	ldr	r1, [pc, #24]	; (4a2c <reserved_exception+0x38>)
    4a14:	f007 fc8b 	bl	c32e <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4a18:	b007      	add	sp, #28
    4a1a:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    4a1e:	4b04      	ldr	r3, [pc, #16]	; (4a30 <reserved_exception+0x3c>)
    4a20:	e7ed      	b.n	49fe <reserved_exception+0xa>
    4a22:	bf00      	nop
    4a24:	0000e798 	.word	0x0000e798
    4a28:	0000e7b0 	.word	0x0000e7b0
    4a2c:	0000d380 	.word	0x0000d380
    4a30:	0000e77c 	.word	0x0000e77c

00004a34 <mem_manage_fault>:
{
    4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a36:	b085      	sub	sp, #20
    4a38:	4605      	mov	r5, r0
    4a3a:	460c      	mov	r4, r1
    4a3c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4a3e:	4b5f      	ldr	r3, [pc, #380]	; (4bbc <mem_manage_fault+0x188>)
    4a40:	9302      	str	r3, [sp, #8]
    4a42:	2000      	movs	r0, #0
    4a44:	9001      	str	r0, [sp, #4]
    4a46:	9000      	str	r0, [sp, #0]
    4a48:	4603      	mov	r3, r0
    4a4a:	2201      	movs	r2, #1
    4a4c:	495c      	ldr	r1, [pc, #368]	; (4bc0 <mem_manage_fault+0x18c>)
    4a4e:	f007 fc6e 	bl	c32e <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4a52:	4b5c      	ldr	r3, [pc, #368]	; (4bc4 <mem_manage_fault+0x190>)
    4a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a56:	f013 0f10 	tst.w	r3, #16
    4a5a:	d13b      	bne.n	4ad4 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4a5c:	4b59      	ldr	r3, [pc, #356]	; (4bc4 <mem_manage_fault+0x190>)
    4a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a60:	f013 0f08 	tst.w	r3, #8
    4a64:	d141      	bne.n	4aea <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4a66:	4b57      	ldr	r3, [pc, #348]	; (4bc4 <mem_manage_fault+0x190>)
    4a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a6a:	f013 0f02 	tst.w	r3, #2
    4a6e:	d147      	bne.n	4b00 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    4a70:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4a74:	4b53      	ldr	r3, [pc, #332]	; (4bc4 <mem_manage_fault+0x190>)
    4a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a78:	f013 0f01 	tst.w	r3, #1
    4a7c:	d166      	bne.n	4b4c <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4a7e:	4b51      	ldr	r3, [pc, #324]	; (4bc4 <mem_manage_fault+0x190>)
    4a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a82:	f013 0f20 	tst.w	r3, #32
    4a86:	d16c      	bne.n	4b62 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4a88:	4b4e      	ldr	r3, [pc, #312]	; (4bc4 <mem_manage_fault+0x190>)
    4a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a8c:	f013 0f10 	tst.w	r3, #16
    4a90:	d104      	bne.n	4a9c <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4a92:	4b4c      	ldr	r3, [pc, #304]	; (4bc4 <mem_manage_fault+0x190>)
    4a94:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4a96:	f014 0402 	ands.w	r4, r4, #2
    4a9a:	d004      	beq.n	4aa6 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4a9c:	4b49      	ldr	r3, [pc, #292]	; (4bc4 <mem_manage_fault+0x190>)
    4a9e:	685c      	ldr	r4, [r3, #4]
    4aa0:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4aa4:	d168      	bne.n	4b78 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4aa6:	4b47      	ldr	r3, [pc, #284]	; (4bc4 <mem_manage_fault+0x190>)
    4aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4aaa:	f013 0f20 	tst.w	r3, #32
    4aae:	d004      	beq.n	4aba <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4ab0:	4a44      	ldr	r2, [pc, #272]	; (4bc4 <mem_manage_fault+0x190>)
    4ab2:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4ab8:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4aba:	4a42      	ldr	r2, [pc, #264]	; (4bc4 <mem_manage_fault+0x190>)
    4abc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4abe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4ac2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4ac4:	2101      	movs	r1, #1
    4ac6:	4628      	mov	r0, r5
    4ac8:	f007 fc2f 	bl	c32a <memory_fault_recoverable>
    4acc:	7030      	strb	r0, [r6, #0]
}
    4ace:	4620      	mov	r0, r4
    4ad0:	b005      	add	sp, #20
    4ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    4ad4:	4b3c      	ldr	r3, [pc, #240]	; (4bc8 <mem_manage_fault+0x194>)
    4ad6:	9302      	str	r3, [sp, #8]
    4ad8:	2000      	movs	r0, #0
    4ada:	9001      	str	r0, [sp, #4]
    4adc:	9000      	str	r0, [sp, #0]
    4ade:	4603      	mov	r3, r0
    4ae0:	2201      	movs	r2, #1
    4ae2:	4937      	ldr	r1, [pc, #220]	; (4bc0 <mem_manage_fault+0x18c>)
    4ae4:	f007 fc23 	bl	c32e <z_log_msg2_runtime_create>
    4ae8:	e7b8      	b.n	4a5c <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    4aea:	4b38      	ldr	r3, [pc, #224]	; (4bcc <mem_manage_fault+0x198>)
    4aec:	9302      	str	r3, [sp, #8]
    4aee:	2000      	movs	r0, #0
    4af0:	9001      	str	r0, [sp, #4]
    4af2:	9000      	str	r0, [sp, #0]
    4af4:	4603      	mov	r3, r0
    4af6:	2201      	movs	r2, #1
    4af8:	4931      	ldr	r1, [pc, #196]	; (4bc0 <mem_manage_fault+0x18c>)
    4afa:	f007 fc18 	bl	c32e <z_log_msg2_runtime_create>
    4afe:	e7b2      	b.n	4a66 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    4b00:	4b33      	ldr	r3, [pc, #204]	; (4bd0 <mem_manage_fault+0x19c>)
    4b02:	9302      	str	r3, [sp, #8]
    4b04:	2000      	movs	r0, #0
    4b06:	9001      	str	r0, [sp, #4]
    4b08:	9000      	str	r0, [sp, #0]
    4b0a:	4603      	mov	r3, r0
    4b0c:	2201      	movs	r2, #1
    4b0e:	492c      	ldr	r1, [pc, #176]	; (4bc0 <mem_manage_fault+0x18c>)
    4b10:	f007 fc0d 	bl	c32e <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    4b14:	4b2b      	ldr	r3, [pc, #172]	; (4bc4 <mem_manage_fault+0x190>)
    4b16:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b1a:	f013 0f80 	tst.w	r3, #128	; 0x80
    4b1e:	d102      	bne.n	4b26 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    4b20:	f06f 0715 	mvn.w	r7, #21
    4b24:	e7a6      	b.n	4a74 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4b26:	9703      	str	r7, [sp, #12]
    4b28:	4b2a      	ldr	r3, [pc, #168]	; (4bd4 <mem_manage_fault+0x1a0>)
    4b2a:	9302      	str	r3, [sp, #8]
    4b2c:	2000      	movs	r0, #0
    4b2e:	9001      	str	r0, [sp, #4]
    4b30:	9000      	str	r0, [sp, #0]
    4b32:	4603      	mov	r3, r0
    4b34:	2201      	movs	r2, #1
    4b36:	4922      	ldr	r1, [pc, #136]	; (4bc0 <mem_manage_fault+0x18c>)
    4b38:	f007 fbf9 	bl	c32e <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    4b3c:	2c00      	cmp	r4, #0
    4b3e:	d099      	beq.n	4a74 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4b40:	4a20      	ldr	r2, [pc, #128]	; (4bc4 <mem_manage_fault+0x190>)
    4b42:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4b48:	6293      	str	r3, [r2, #40]	; 0x28
    4b4a:	e793      	b.n	4a74 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    4b4c:	4b22      	ldr	r3, [pc, #136]	; (4bd8 <mem_manage_fault+0x1a4>)
    4b4e:	9302      	str	r3, [sp, #8]
    4b50:	2000      	movs	r0, #0
    4b52:	9001      	str	r0, [sp, #4]
    4b54:	9000      	str	r0, [sp, #0]
    4b56:	4603      	mov	r3, r0
    4b58:	2201      	movs	r2, #1
    4b5a:	4919      	ldr	r1, [pc, #100]	; (4bc0 <mem_manage_fault+0x18c>)
    4b5c:	f007 fbe7 	bl	c32e <z_log_msg2_runtime_create>
    4b60:	e78d      	b.n	4a7e <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    4b62:	4b1e      	ldr	r3, [pc, #120]	; (4bdc <mem_manage_fault+0x1a8>)
    4b64:	9302      	str	r3, [sp, #8]
    4b66:	2000      	movs	r0, #0
    4b68:	9001      	str	r0, [sp, #4]
    4b6a:	9000      	str	r0, [sp, #0]
    4b6c:	4603      	mov	r3, r0
    4b6e:	2201      	movs	r2, #1
    4b70:	4913      	ldr	r1, [pc, #76]	; (4bc0 <mem_manage_fault+0x18c>)
    4b72:	f007 fbdc 	bl	c32e <z_log_msg2_runtime_create>
    4b76:	e787      	b.n	4a88 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4b78:	4629      	mov	r1, r5
    4b7a:	4638      	mov	r0, r7
    4b7c:	f7ff fd88 	bl	4690 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4b80:	4607      	mov	r7, r0
    4b82:	b9b0      	cbnz	r0, 4bb2 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4b84:	4b0f      	ldr	r3, [pc, #60]	; (4bc4 <mem_manage_fault+0x190>)
    4b86:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4b88:	f014 0410 	ands.w	r4, r4, #16
    4b8c:	d08b      	beq.n	4aa6 <mem_manage_fault+0x72>
    4b8e:	4c14      	ldr	r4, [pc, #80]	; (4be0 <mem_manage_fault+0x1ac>)
    4b90:	f240 1349 	movw	r3, #329	; 0x149
    4b94:	4622      	mov	r2, r4
    4b96:	4913      	ldr	r1, [pc, #76]	; (4be4 <mem_manage_fault+0x1b0>)
    4b98:	4813      	ldr	r0, [pc, #76]	; (4be8 <mem_manage_fault+0x1b4>)
    4b9a:	f007 fae5 	bl	c168 <assert_print>
    4b9e:	4813      	ldr	r0, [pc, #76]	; (4bec <mem_manage_fault+0x1b8>)
    4ba0:	f007 fae2 	bl	c168 <assert_print>
    4ba4:	f240 1149 	movw	r1, #329	; 0x149
    4ba8:	4620      	mov	r0, r4
    4baa:	f007 fad6 	bl	c15a <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4bae:	463c      	mov	r4, r7
    4bb0:	e779      	b.n	4aa6 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4bb2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4bb6:	2402      	movs	r4, #2
    4bb8:	e775      	b.n	4aa6 <mem_manage_fault+0x72>
    4bba:	bf00      	nop
    4bbc:	0000e7c4 	.word	0x0000e7c4
    4bc0:	0000d380 	.word	0x0000d380
    4bc4:	e000ed00 	.word	0xe000ed00
    4bc8:	0000e7dc 	.word	0x0000e7dc
    4bcc:	0000e5d4 	.word	0x0000e5d4
    4bd0:	0000e810 	.word	0x0000e810
    4bd4:	0000e828 	.word	0x0000e828
    4bd8:	0000e840 	.word	0x0000e840
    4bdc:	0000e650 	.word	0x0000e650
    4be0:	0000e860 	.word	0x0000e860
    4be4:	0000e89c 	.word	0x0000e89c
    4be8:	0000d51c 	.word	0x0000d51c
    4bec:	0000e8e8 	.word	0x0000e8e8

00004bf0 <hard_fault>:
{
    4bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bf2:	b085      	sub	sp, #20
    4bf4:	4607      	mov	r7, r0
    4bf6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    4bf8:	4b4b      	ldr	r3, [pc, #300]	; (4d28 <hard_fault+0x138>)
    4bfa:	9302      	str	r3, [sp, #8]
    4bfc:	2400      	movs	r4, #0
    4bfe:	9401      	str	r4, [sp, #4]
    4c00:	9400      	str	r4, [sp, #0]
    4c02:	4623      	mov	r3, r4
    4c04:	2201      	movs	r2, #1
    4c06:	4949      	ldr	r1, [pc, #292]	; (4d2c <hard_fault+0x13c>)
    4c08:	4620      	mov	r0, r4
    4c0a:	f007 fb90 	bl	c32e <z_log_msg2_runtime_create>
	*recoverable = false;
    4c0e:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4c10:	4b47      	ldr	r3, [pc, #284]	; (4d30 <hard_fault+0x140>)
    4c12:	6add      	ldr	r5, [r3, #44]	; 0x2c
    4c14:	f015 0502 	ands.w	r5, r5, #2
    4c18:	d12d      	bne.n	4c76 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4c1a:	4b45      	ldr	r3, [pc, #276]	; (4d30 <hard_fault+0x140>)
    4c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c1e:	2b00      	cmp	r3, #0
    4c20:	db36      	blt.n	4c90 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4c22:	4b43      	ldr	r3, [pc, #268]	; (4d30 <hard_fault+0x140>)
    4c24:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4c26:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    4c2a:	d06b      	beq.n	4d04 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    4c2c:	4b41      	ldr	r3, [pc, #260]	; (4d34 <hard_fault+0x144>)
    4c2e:	9302      	str	r3, [sp, #8]
    4c30:	2000      	movs	r0, #0
    4c32:	9001      	str	r0, [sp, #4]
    4c34:	9000      	str	r0, [sp, #0]
    4c36:	4603      	mov	r3, r0
    4c38:	2201      	movs	r2, #1
    4c3a:	493c      	ldr	r1, [pc, #240]	; (4d2c <hard_fault+0x13c>)
    4c3c:	f007 fb77 	bl	c32e <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4c40:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4c42:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4c46:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4c4a:	429a      	cmp	r2, r3
    4c4c:	d02c      	beq.n	4ca8 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    4c4e:	4b38      	ldr	r3, [pc, #224]	; (4d30 <hard_fault+0x140>)
    4c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    4c54:	2b00      	cmp	r3, #0
    4c56:	d135      	bne.n	4cc4 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    4c58:	4b35      	ldr	r3, [pc, #212]	; (4d30 <hard_fault+0x140>)
    4c5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d137      	bne.n	4cd2 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    4c62:	4b33      	ldr	r3, [pc, #204]	; (4d30 <hard_fault+0x140>)
    4c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4c66:	b29b      	uxth	r3, r3
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d039      	beq.n	4ce0 <hard_fault+0xf0>
			reason = usage_fault(esf);
    4c6c:	4638      	mov	r0, r7
    4c6e:	f7ff fe23 	bl	48b8 <usage_fault>
    4c72:	4604      	mov	r4, r0
    4c74:	e009      	b.n	4c8a <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    4c76:	4b30      	ldr	r3, [pc, #192]	; (4d38 <hard_fault+0x148>)
    4c78:	9302      	str	r3, [sp, #8]
    4c7a:	9401      	str	r4, [sp, #4]
    4c7c:	9400      	str	r4, [sp, #0]
    4c7e:	4623      	mov	r3, r4
    4c80:	2201      	movs	r2, #1
    4c82:	492a      	ldr	r1, [pc, #168]	; (4d2c <hard_fault+0x13c>)
    4c84:	4620      	mov	r0, r4
    4c86:	f007 fb52 	bl	c32e <z_log_msg2_runtime_create>
}
    4c8a:	4620      	mov	r0, r4
    4c8c:	b005      	add	sp, #20
    4c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    4c90:	4b2a      	ldr	r3, [pc, #168]	; (4d3c <hard_fault+0x14c>)
    4c92:	9302      	str	r3, [sp, #8]
    4c94:	2000      	movs	r0, #0
    4c96:	9001      	str	r0, [sp, #4]
    4c98:	9000      	str	r0, [sp, #0]
    4c9a:	4603      	mov	r3, r0
    4c9c:	2201      	movs	r2, #1
    4c9e:	4923      	ldr	r1, [pc, #140]	; (4d2c <hard_fault+0x13c>)
    4ca0:	f007 fb45 	bl	c32e <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4ca4:	462c      	mov	r4, r5
    4ca6:	e7f0      	b.n	4c8a <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4ca8:	683b      	ldr	r3, [r7, #0]
    4caa:	9303      	str	r3, [sp, #12]
    4cac:	4b24      	ldr	r3, [pc, #144]	; (4d40 <hard_fault+0x150>)
    4cae:	9302      	str	r3, [sp, #8]
    4cb0:	2000      	movs	r0, #0
    4cb2:	9001      	str	r0, [sp, #4]
    4cb4:	9000      	str	r0, [sp, #0]
    4cb6:	4603      	mov	r3, r0
    4cb8:	2201      	movs	r2, #1
    4cba:	491c      	ldr	r1, [pc, #112]	; (4d2c <hard_fault+0x13c>)
    4cbc:	f007 fb37 	bl	c32e <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    4cc0:	683c      	ldr	r4, [r7, #0]
    4cc2:	e7e2      	b.n	4c8a <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    4cc4:	4632      	mov	r2, r6
    4cc6:	2101      	movs	r1, #1
    4cc8:	4638      	mov	r0, r7
    4cca:	f7ff feb3 	bl	4a34 <mem_manage_fault>
    4cce:	4604      	mov	r4, r0
    4cd0:	e7db      	b.n	4c8a <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    4cd2:	4632      	mov	r2, r6
    4cd4:	2101      	movs	r1, #1
    4cd6:	4638      	mov	r0, r7
    4cd8:	f7ff fd46 	bl	4768 <bus_fault>
    4cdc:	4604      	mov	r4, r0
    4cde:	e7d4      	b.n	4c8a <hard_fault+0x9a>
			__ASSERT(0,
    4ce0:	4c18      	ldr	r4, [pc, #96]	; (4d44 <hard_fault+0x154>)
    4ce2:	f240 23cd 	movw	r3, #717	; 0x2cd
    4ce6:	4622      	mov	r2, r4
    4ce8:	4917      	ldr	r1, [pc, #92]	; (4d48 <hard_fault+0x158>)
    4cea:	4818      	ldr	r0, [pc, #96]	; (4d4c <hard_fault+0x15c>)
    4cec:	f007 fa3c 	bl	c168 <assert_print>
    4cf0:	4817      	ldr	r0, [pc, #92]	; (4d50 <hard_fault+0x160>)
    4cf2:	f007 fa39 	bl	c168 <assert_print>
    4cf6:	f240 21cd 	movw	r1, #717	; 0x2cd
    4cfa:	4620      	mov	r0, r4
    4cfc:	f007 fa2d 	bl	c15a <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4d00:	462c      	mov	r4, r5
    4d02:	e7c2      	b.n	4c8a <hard_fault+0x9a>
		__ASSERT(0,
    4d04:	4d0f      	ldr	r5, [pc, #60]	; (4d44 <hard_fault+0x154>)
    4d06:	f240 23d1 	movw	r3, #721	; 0x2d1
    4d0a:	462a      	mov	r2, r5
    4d0c:	490e      	ldr	r1, [pc, #56]	; (4d48 <hard_fault+0x158>)
    4d0e:	480f      	ldr	r0, [pc, #60]	; (4d4c <hard_fault+0x15c>)
    4d10:	f007 fa2a 	bl	c168 <assert_print>
    4d14:	480f      	ldr	r0, [pc, #60]	; (4d54 <hard_fault+0x164>)
    4d16:	f007 fa27 	bl	c168 <assert_print>
    4d1a:	f240 21d1 	movw	r1, #721	; 0x2d1
    4d1e:	4628      	mov	r0, r5
    4d20:	f007 fa1b 	bl	c15a <assert_post_action>
	return reason;
    4d24:	e7b1      	b.n	4c8a <hard_fault+0x9a>
    4d26:	bf00      	nop
    4d28:	0000e90c 	.word	0x0000e90c
    4d2c:	0000d380 	.word	0x0000d380
    4d30:	e000ed00 	.word	0xe000ed00
    4d34:	0000e958 	.word	0x0000e958
    4d38:	0000e924 	.word	0x0000e924
    4d3c:	0000e948 	.word	0x0000e948
    4d40:	0000e978 	.word	0x0000e978
    4d44:	0000e860 	.word	0x0000e860
    4d48:	0000d6e0 	.word	0x0000d6e0
    4d4c:	0000d51c 	.word	0x0000d51c
    4d50:	0000e994 	.word	0x0000e994
    4d54:	0000e9b8 	.word	0x0000e9b8

00004d58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5a:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d5c:	4b31      	ldr	r3, [pc, #196]	; (4e24 <z_arm_fault+0xcc>)
    4d5e:	685d      	ldr	r5, [r3, #4]
    4d60:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4d64:	2300      	movs	r3, #0
    4d66:	f383 8811 	msr	BASEPRI, r3
    4d6a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4d6e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4d72:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4d76:	d125      	bne.n	4dc4 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4d78:	f002 030c 	and.w	r3, r2, #12
    4d7c:	2b08      	cmp	r3, #8
    4d7e:	d011      	beq.n	4da4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4d80:	f012 0f08 	tst.w	r2, #8
    4d84:	d01b      	beq.n	4dbe <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    4d86:	460c      	mov	r4, r1
	*nested_exc = false;
    4d88:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4d8a:	b1f4      	cbz	r4, 4dca <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4d8c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    4d90:	4629      	mov	r1, r5
    4d92:	4620      	mov	r0, r4
    4d94:	f007 fada 	bl	c34c <fault_handle>
    4d98:	4605      	mov	r5, r0
	if (recoverable) {
    4d9a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    4d9e:	b32b      	cbz	r3, 4dec <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4da0:	b00f      	add	sp, #60	; 0x3c
    4da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4da4:	4b20      	ldr	r3, [pc, #128]	; (4e28 <z_arm_fault+0xd0>)
    4da6:	9302      	str	r3, [sp, #8]
    4da8:	2400      	movs	r4, #0
    4daa:	9401      	str	r4, [sp, #4]
    4dac:	9400      	str	r4, [sp, #0]
    4dae:	4623      	mov	r3, r4
    4db0:	2201      	movs	r2, #1
    4db2:	491e      	ldr	r1, [pc, #120]	; (4e2c <z_arm_fault+0xd4>)
    4db4:	4620      	mov	r0, r4
    4db6:	f007 faba 	bl	c32e <z_log_msg2_runtime_create>
	*nested_exc = false;
    4dba:	4626      	mov	r6, r4
		return NULL;
    4dbc:	e7e5      	b.n	4d8a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4dbe:	4604      	mov	r4, r0
			*nested_exc = true;
    4dc0:	2601      	movs	r6, #1
    4dc2:	e7e2      	b.n	4d8a <z_arm_fault+0x32>
	*nested_exc = false;
    4dc4:	2600      	movs	r6, #0
		return NULL;
    4dc6:	4634      	mov	r4, r6
    4dc8:	e7df      	b.n	4d8a <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    4dca:	4f19      	ldr	r7, [pc, #100]	; (4e30 <z_arm_fault+0xd8>)
    4dcc:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4dd0:	463a      	mov	r2, r7
    4dd2:	4918      	ldr	r1, [pc, #96]	; (4e34 <z_arm_fault+0xdc>)
    4dd4:	4818      	ldr	r0, [pc, #96]	; (4e38 <z_arm_fault+0xe0>)
    4dd6:	f007 f9c7 	bl	c168 <assert_print>
    4dda:	4818      	ldr	r0, [pc, #96]	; (4e3c <z_arm_fault+0xe4>)
    4ddc:	f007 f9c4 	bl	c168 <assert_print>
    4de0:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4de4:	4638      	mov	r0, r7
    4de6:	f007 f9b8 	bl	c15a <assert_post_action>
    4dea:	e7cf      	b.n	4d8c <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4dec:	2220      	movs	r2, #32
    4dee:	4621      	mov	r1, r4
    4df0:	a805      	add	r0, sp, #20
    4df2:	f007 fb51 	bl	c498 <memcpy>
	if (nested_exc) {
    4df6:	b14e      	cbz	r6, 4e0c <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4dfe:	b95a      	cbnz	r2, 4e18 <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4e00:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4e04:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4e08:	930c      	str	r3, [sp, #48]	; 0x30
    4e0a:	e005      	b.n	4e18 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e0e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4e12:	f023 0301 	bic.w	r3, r3, #1
    4e16:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    4e18:	a905      	add	r1, sp, #20
    4e1a:	4628      	mov	r0, r5
    4e1c:	f007 fa67 	bl	c2ee <z_arm_fatal_error>
    4e20:	e7be      	b.n	4da0 <z_arm_fault+0x48>
    4e22:	bf00      	nop
    4e24:	e000ed00 	.word	0xe000ed00
    4e28:	0000e9e8 	.word	0x0000e9e8
    4e2c:	0000d380 	.word	0x0000d380
    4e30:	0000e860 	.word	0x0000e860
    4e34:	0000ea14 	.word	0x0000ea14
    4e38:	0000d51c 	.word	0x0000d51c
    4e3c:	0000ea28 	.word	0x0000ea28

00004e40 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4e40:	4a02      	ldr	r2, [pc, #8]	; (4e4c <z_arm_fault_init+0xc>)
    4e42:	6953      	ldr	r3, [r2, #20]
    4e44:	f043 0310 	orr.w	r3, r3, #16
    4e48:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4e4a:	4770      	bx	lr
    4e4c:	e000ed00 	.word	0xe000ed00

00004e50 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4e50:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4e54:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4e58:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4e5a:	4672      	mov	r2, lr
	bl z_arm_fault
    4e5c:	f7ff ff7c 	bl	4d58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4e60:	bd01      	pop	{r0, pc}
    4e62:	bf00      	nop

00004e64 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4e64:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4e66:	e006      	b.n	4e76 <z_arm_interrupt_init+0x12>
    4e68:	f002 010f 	and.w	r1, r2, #15
    4e6c:	4b09      	ldr	r3, [pc, #36]	; (4e94 <z_arm_interrupt_init+0x30>)
    4e6e:	440b      	add	r3, r1
    4e70:	2120      	movs	r1, #32
    4e72:	7619      	strb	r1, [r3, #24]
    4e74:	3201      	adds	r2, #1
    4e76:	2a2f      	cmp	r2, #47	; 0x2f
    4e78:	dc0a      	bgt.n	4e90 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4e7a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	dbf3      	blt.n	4e68 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4e84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4e88:	2120      	movs	r1, #32
    4e8a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4e8e:	e7f1      	b.n	4e74 <z_arm_interrupt_init+0x10>
	}
}
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop
    4e94:	e000ecfc 	.word	0xe000ecfc

00004e98 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4e98:	2000      	movs	r0, #0
    msr CONTROL, r0
    4e9a:	f380 8814 	msr	CONTROL, r0
    isb
    4e9e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4ea2:	f008 f90b 	bl	d0bc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4ea6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4ea8:	490d      	ldr	r1, [pc, #52]	; (4ee0 <__start+0x48>)
    str r0, [r1]
    4eaa:	6008      	str	r0, [r1, #0]
    dsb
    4eac:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4eb0:	480c      	ldr	r0, [pc, #48]	; (4ee4 <__start+0x4c>)
    msr msp, r0
    4eb2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4eb6:	f000 f82d 	bl	4f14 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4eba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4ebc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4ec0:	4809      	ldr	r0, [pc, #36]	; (4ee8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4ec2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4ec6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4ec8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4ecc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4ed0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4ed2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4ed4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4ed8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4edc:	f7ff fb42 	bl	4564 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4ee0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4ee4:	200028e0 	.word	0x200028e0
    ldr r0, =z_interrupt_stacks
    4ee8:	20002a60 	.word	0x20002a60

00004eec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4eec:	4b08      	ldr	r3, [pc, #32]	; (4f10 <z_arm_clear_arm_mpu_config+0x24>)
    4eee:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    4ef2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4ef6:	2300      	movs	r3, #0
    4ef8:	e006      	b.n	4f08 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4efa:	4a05      	ldr	r2, [pc, #20]	; (4f10 <z_arm_clear_arm_mpu_config+0x24>)
    4efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4f00:	2100      	movs	r1, #0
    4f02:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4f06:	3301      	adds	r3, #1
    4f08:	4283      	cmp	r3, r0
    4f0a:	dbf6      	blt.n	4efa <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4f0c:	4770      	bx	lr
    4f0e:	bf00      	nop
    4f10:	e000ed00 	.word	0xe000ed00

00004f14 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4f14:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4f16:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4f18:	2400      	movs	r4, #0
    4f1a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4f1e:	f7ff ffe5 	bl	4eec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4f22:	4623      	mov	r3, r4
    4f24:	e008      	b.n	4f38 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4f26:	f103 0120 	add.w	r1, r3, #32
    4f2a:	4a0e      	ldr	r2, [pc, #56]	; (4f64 <z_arm_init_arch_hw_at_boot+0x50>)
    4f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f30:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4f34:	3301      	adds	r3, #1
    4f36:	b2db      	uxtb	r3, r3
    4f38:	2b07      	cmp	r3, #7
    4f3a:	d9f4      	bls.n	4f26 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4f3c:	2300      	movs	r3, #0
    4f3e:	e008      	b.n	4f52 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4f40:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4f44:	4a07      	ldr	r2, [pc, #28]	; (4f64 <z_arm_init_arch_hw_at_boot+0x50>)
    4f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4f4e:	3301      	adds	r3, #1
    4f50:	b2db      	uxtb	r3, r3
    4f52:	2b07      	cmp	r3, #7
    4f54:	d9f4      	bls.n	4f40 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4f56:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4f58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f5c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4f60:	bd10      	pop	{r4, pc}
    4f62:	bf00      	nop
    4f64:	e000e100 	.word	0xe000e100

00004f68 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4f68:	b508      	push	{r3, lr}
	if (_current == thread) {
    4f6a:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <z_impl_k_thread_abort+0x2c>)
    4f6c:	689b      	ldr	r3, [r3, #8]
    4f6e:	4283      	cmp	r3, r0
    4f70:	d002      	beq.n	4f78 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4f72:	f005 ffab 	bl	aecc <z_thread_abort>
}
    4f76:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f78:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d0f8      	beq.n	4f72 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f80:	4b05      	ldr	r3, [pc, #20]	; (4f98 <z_impl_k_thread_abort+0x30>)
    4f82:	685a      	ldr	r2, [r3, #4]
    4f84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4f88:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4f90:	625a      	str	r2, [r3, #36]	; 0x24
    4f92:	e7ee      	b.n	4f72 <z_impl_k_thread_abort+0xa>
    4f94:	20001228 	.word	0x20001228
    4f98:	e000ed00 	.word	0xe000ed00

00004f9c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4f9c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4f9e:	4b03      	ldr	r3, [pc, #12]	; (4fac <z_arm_configure_static_mpu_regions+0x10>)
    4fa0:	4a03      	ldr	r2, [pc, #12]	; (4fb0 <z_arm_configure_static_mpu_regions+0x14>)
    4fa2:	2101      	movs	r1, #1
    4fa4:	4803      	ldr	r0, [pc, #12]	; (4fb4 <z_arm_configure_static_mpu_regions+0x18>)
    4fa6:	f000 f8bb 	bl	5120 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4faa:	bd08      	pop	{r3, pc}
    4fac:	20040000 	.word	0x20040000
    4fb0:	20000000 	.word	0x20000000
    4fb4:	0000ea6c 	.word	0x0000ea6c

00004fb8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4fb8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4fba:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4fbe:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4fc0:	4804      	ldr	r0, [pc, #16]	; (4fd4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4fc2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4fc4:	2320      	movs	r3, #32
    4fc6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4fc8:	4b03      	ldr	r3, [pc, #12]	; (4fd8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4fca:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4fcc:	2101      	movs	r1, #1
    4fce:	f000 f8c9 	bl	5164 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4fd2:	bd08      	pop	{r3, pc}
    4fd4:	20000cc4 	.word	0x20000cc4
    4fd8:	150b0000 	.word	0x150b0000

00004fdc <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4fdc:	4a08      	ldr	r2, [pc, #32]	; (5000 <region_init+0x24>)
    4fde:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4fe2:	680b      	ldr	r3, [r1, #0]
    4fe4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4fe8:	4303      	orrs	r3, r0
    4fea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4fee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4ff2:	688b      	ldr	r3, [r1, #8]
    4ff4:	f043 0301 	orr.w	r3, r3, #1
    4ff8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4ffc:	4770      	bx	lr
    4ffe:	bf00      	nop
    5000:	e000ed00 	.word	0xe000ed00

00005004 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    5004:	b510      	push	{r4, lr}
    5006:	b084      	sub	sp, #16
    5008:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    500a:	2807      	cmp	r0, #7
    500c:	d804      	bhi.n	5018 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    500e:	f7ff ffe5 	bl	4fdc <region_init>

	return index;
    5012:	4620      	mov	r0, r4
}
    5014:	b004      	add	sp, #16
    5016:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5018:	9003      	str	r0, [sp, #12]
    501a:	4b06      	ldr	r3, [pc, #24]	; (5034 <region_allocate_and_init+0x30>)
    501c:	9302      	str	r3, [sp, #8]
    501e:	2000      	movs	r0, #0
    5020:	9001      	str	r0, [sp, #4]
    5022:	9000      	str	r0, [sp, #0]
    5024:	4603      	mov	r3, r0
    5026:	2201      	movs	r2, #1
    5028:	4903      	ldr	r1, [pc, #12]	; (5038 <region_allocate_and_init+0x34>)
    502a:	f007 f9c5 	bl	c3b8 <z_log_msg2_runtime_create>
		return -EINVAL;
    502e:	f06f 0015 	mvn.w	r0, #21
    5032:	e7ef      	b.n	5014 <region_allocate_and_init+0x10>
    5034:	0000ea78 	.word	0x0000ea78
    5038:	0000d378 	.word	0x0000d378

0000503c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    503c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5040:	b085      	sub	sp, #20
    5042:	4680      	mov	r8, r0
    5044:	460f      	mov	r7, r1
    5046:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    5048:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    504a:	2500      	movs	r5, #0
    504c:	e009      	b.n	5062 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    504e:	4621      	mov	r1, r4
    5050:	b2f0      	uxtb	r0, r6
    5052:	f007 f9c0 	bl	c3d6 <mpu_configure_region>
    5056:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    5058:	f110 0f16 	cmn.w	r0, #22
    505c:	d01e      	beq.n	509c <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    505e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5060:	3501      	adds	r5, #1
    5062:	42bd      	cmp	r5, r7
    5064:	da1a      	bge.n	509c <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    5066:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    506a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    506e:	6862      	ldr	r2, [r4, #4]
    5070:	2a00      	cmp	r2, #0
    5072:	d0f5      	beq.n	5060 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    5074:	f1b9 0f00 	cmp.w	r9, #0
    5078:	d0e9      	beq.n	504e <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    507a:	4620      	mov	r0, r4
    507c:	f007 f98b 	bl	c396 <mpu_partition_is_valid>
		if (do_sanity_check &&
    5080:	2800      	cmp	r0, #0
    5082:	d1e4      	bne.n	504e <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    5084:	9503      	str	r5, [sp, #12]
    5086:	4b07      	ldr	r3, [pc, #28]	; (50a4 <mpu_configure_regions+0x68>)
    5088:	9302      	str	r3, [sp, #8]
    508a:	9001      	str	r0, [sp, #4]
    508c:	9000      	str	r0, [sp, #0]
    508e:	4603      	mov	r3, r0
    5090:	2201      	movs	r2, #1
    5092:	4905      	ldr	r1, [pc, #20]	; (50a8 <mpu_configure_regions+0x6c>)
    5094:	f007 f990 	bl	c3b8 <z_log_msg2_runtime_create>
			return -EINVAL;
    5098:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    509c:	4630      	mov	r0, r6
    509e:	b005      	add	sp, #20
    50a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    50a4:	0000eaa0 	.word	0x0000eaa0
    50a8:	0000d378 	.word	0x0000d378

000050ac <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    50ac:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    50ae:	4c03      	ldr	r4, [pc, #12]	; (50bc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    50b0:	2301      	movs	r3, #1
    50b2:	7822      	ldrb	r2, [r4, #0]
    50b4:	f7ff ffc2 	bl	503c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    50b8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    50ba:	bd10      	pop	{r4, pc}
    50bc:	20001459 	.word	0x20001459

000050c0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    50c0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    50c2:	2300      	movs	r3, #0
    50c4:	4a09      	ldr	r2, [pc, #36]	; (50ec <mpu_configure_dynamic_mpu_regions+0x2c>)
    50c6:	7812      	ldrb	r2, [r2, #0]
    50c8:	f7ff ffb8 	bl	503c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    50cc:	f110 0f16 	cmn.w	r0, #22
    50d0:	d00a      	beq.n	50e8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    50d2:	4603      	mov	r3, r0
    50d4:	e006      	b.n	50e4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    50d6:	4a06      	ldr	r2, [pc, #24]	; (50f0 <mpu_configure_dynamic_mpu_regions+0x30>)
    50d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    50dc:	2100      	movs	r1, #0
    50de:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    50e2:	3301      	adds	r3, #1
    50e4:	2b07      	cmp	r3, #7
    50e6:	ddf6      	ble.n	50d6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    50e8:	bd08      	pop	{r3, pc}
    50ea:	bf00      	nop
    50ec:	20001459 	.word	0x20001459
    50f0:	e000ed00 	.word	0xe000ed00

000050f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    50f4:	4b04      	ldr	r3, [pc, #16]	; (5108 <arm_core_mpu_enable+0x14>)
    50f6:	2205      	movs	r2, #5
    50f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    50fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5100:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5104:	4770      	bx	lr
    5106:	bf00      	nop
    5108:	e000ed00 	.word	0xe000ed00

0000510c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    510c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5110:	4b02      	ldr	r3, [pc, #8]	; (511c <arm_core_mpu_disable+0x10>)
    5112:	2200      	movs	r2, #0
    5114:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5118:	4770      	bx	lr
    511a:	bf00      	nop
    511c:	e000ed00 	.word	0xe000ed00

00005120 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5120:	b538      	push	{r3, r4, r5, lr}
    5122:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5124:	f7ff ffc2 	bl	50ac <mpu_configure_static_mpu_regions>
    5128:	f110 0f16 	cmn.w	r0, #22
    512c:	d000      	beq.n	5130 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    512e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    5130:	4d08      	ldr	r5, [pc, #32]	; (5154 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    5132:	f240 1311 	movw	r3, #273	; 0x111
    5136:	462a      	mov	r2, r5
    5138:	4907      	ldr	r1, [pc, #28]	; (5158 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    513a:	4808      	ldr	r0, [pc, #32]	; (515c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    513c:	f007 f814 	bl	c168 <assert_print>
    5140:	4621      	mov	r1, r4
    5142:	4807      	ldr	r0, [pc, #28]	; (5160 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    5144:	f007 f810 	bl	c168 <assert_print>
    5148:	f240 1111 	movw	r1, #273	; 0x111
    514c:	4628      	mov	r0, r5
    514e:	f007 f804 	bl	c15a <assert_post_action>
}
    5152:	e7ec      	b.n	512e <arm_core_mpu_configure_static_mpu_regions+0xe>
    5154:	0000eac4 	.word	0x0000eac4
    5158:	0000d6e0 	.word	0x0000d6e0
    515c:	0000d51c 	.word	0x0000d51c
    5160:	0000eafc 	.word	0x0000eafc

00005164 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5164:	b538      	push	{r3, r4, r5, lr}
    5166:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    5168:	f7ff ffaa 	bl	50c0 <mpu_configure_dynamic_mpu_regions>
    516c:	f110 0f16 	cmn.w	r0, #22
    5170:	d000      	beq.n	5174 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5172:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    5174:	4d08      	ldr	r5, [pc, #32]	; (5198 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    5176:	f44f 7398 	mov.w	r3, #304	; 0x130
    517a:	462a      	mov	r2, r5
    517c:	4907      	ldr	r1, [pc, #28]	; (519c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    517e:	4808      	ldr	r0, [pc, #32]	; (51a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    5180:	f006 fff2 	bl	c168 <assert_print>
    5184:	4621      	mov	r1, r4
    5186:	4807      	ldr	r0, [pc, #28]	; (51a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    5188:	f006 ffee 	bl	c168 <assert_print>
    518c:	f44f 7198 	mov.w	r1, #304	; 0x130
    5190:	4628      	mov	r0, r5
    5192:	f006 ffe2 	bl	c15a <assert_post_action>
}
    5196:	e7ec      	b.n	5172 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    5198:	0000eac4 	.word	0x0000eac4
    519c:	0000d6e0 	.word	0x0000d6e0
    51a0:	0000d51c 	.word	0x0000d51c
    51a4:	0000eb28 	.word	0x0000eb28

000051a8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    51a8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    51aa:	4b24      	ldr	r3, [pc, #144]	; (523c <z_arm_mpu_init+0x94>)
    51ac:	681d      	ldr	r5, [r3, #0]
    51ae:	2d08      	cmp	r5, #8
    51b0:	d803      	bhi.n	51ba <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    51b2:	f7ff ffab 	bl	510c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    51b6:	2400      	movs	r4, #0
    51b8:	e01e      	b.n	51f8 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    51ba:	4c21      	ldr	r4, [pc, #132]	; (5240 <z_arm_mpu_init+0x98>)
    51bc:	f44f 73a4 	mov.w	r3, #328	; 0x148
    51c0:	4622      	mov	r2, r4
    51c2:	4920      	ldr	r1, [pc, #128]	; (5244 <z_arm_mpu_init+0x9c>)
    51c4:	4820      	ldr	r0, [pc, #128]	; (5248 <z_arm_mpu_init+0xa0>)
    51c6:	f006 ffcf 	bl	c168 <assert_print>
    51ca:	2208      	movs	r2, #8
    51cc:	4629      	mov	r1, r5
    51ce:	481f      	ldr	r0, [pc, #124]	; (524c <z_arm_mpu_init+0xa4>)
    51d0:	f006 ffca 	bl	c168 <assert_print>
    51d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    51d8:	4620      	mov	r0, r4
    51da:	f006 ffbe 	bl	c15a <assert_post_action>
		return -1;
    51de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    51e2:	e017      	b.n	5214 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    51e4:	4b15      	ldr	r3, [pc, #84]	; (523c <z_arm_mpu_init+0x94>)
    51e6:	6859      	ldr	r1, [r3, #4]
    51e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    51ec:	0093      	lsls	r3, r2, #2
    51ee:	4419      	add	r1, r3
    51f0:	4620      	mov	r0, r4
    51f2:	f7ff fef3 	bl	4fdc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    51f6:	3401      	adds	r4, #1
    51f8:	42a5      	cmp	r5, r4
    51fa:	d8f3      	bhi.n	51e4 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    51fc:	4b14      	ldr	r3, [pc, #80]	; (5250 <z_arm_mpu_init+0xa8>)
    51fe:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5200:	f7ff ff78 	bl	50f4 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    5204:	4b13      	ldr	r3, [pc, #76]	; (5254 <z_arm_mpu_init+0xac>)
    5206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    520a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    520e:	2b08      	cmp	r3, #8
    5210:	d101      	bne.n	5216 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5212:	2000      	movs	r0, #0
}
    5214:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    5216:	4c0a      	ldr	r4, [pc, #40]	; (5240 <z_arm_mpu_init+0x98>)
    5218:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    521c:	4622      	mov	r2, r4
    521e:	490e      	ldr	r1, [pc, #56]	; (5258 <z_arm_mpu_init+0xb0>)
    5220:	4809      	ldr	r0, [pc, #36]	; (5248 <z_arm_mpu_init+0xa0>)
    5222:	f006 ffa1 	bl	c168 <assert_print>
    5226:	480d      	ldr	r0, [pc, #52]	; (525c <z_arm_mpu_init+0xb4>)
    5228:	f006 ff9e 	bl	c168 <assert_print>
    522c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    5230:	4620      	mov	r0, r4
    5232:	f006 ff92 	bl	c15a <assert_post_action>
	return 0;
    5236:	2000      	movs	r0, #0
    5238:	e7ec      	b.n	5214 <z_arm_mpu_init+0x6c>
    523a:	bf00      	nop
    523c:	0000ec10 	.word	0x0000ec10
    5240:	0000eac4 	.word	0x0000eac4
    5244:	0000d6e0 	.word	0x0000d6e0
    5248:	0000d51c 	.word	0x0000d51c
    524c:	0000eb58 	.word	0x0000eb58
    5250:	20001459 	.word	0x20001459
    5254:	e000ed00 	.word	0xe000ed00
    5258:	0000eb8c 	.word	0x0000eb8c
    525c:	0000ebdc 	.word	0x0000ebdc

00005260 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5260:	4b01      	ldr	r3, [pc, #4]	; (5268 <__stdout_hook_install+0x8>)
    5262:	6018      	str	r0, [r3, #0]
}
    5264:	4770      	bx	lr
    5266:	bf00      	nop
    5268:	200000c4 	.word	0x200000c4

0000526c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    526c:	3902      	subs	r1, #2
    526e:	2901      	cmp	r1, #1
    5270:	d804      	bhi.n	527c <z_impl_zephyr_fputc+0x10>
{
    5272:	b508      	push	{r3, lr}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    5274:	4b03      	ldr	r3, [pc, #12]	; (5284 <z_impl_zephyr_fputc+0x18>)
    5276:	681b      	ldr	r3, [r3, #0]
    5278:	4798      	blx	r3
}
    527a:	bd08      	pop	{r3, pc}
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    527c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5280:	4770      	bx	lr
    5282:	bf00      	nop
    5284:	200000c4 	.word	0x200000c4

00005288 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    5288:	b40f      	push	{r0, r1, r2, r3}
    528a:	b500      	push	{lr}
    528c:	b083      	sub	sp, #12
    528e:	ab04      	add	r3, sp, #16
    5290:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    5294:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    5296:	2102      	movs	r1, #2
    5298:	4803      	ldr	r0, [pc, #12]	; (52a8 <printf+0x20>)
    529a:	f7fd fe13 	bl	2ec4 <cbvprintf>
	va_end(vargs);

	return r;
}
    529e:	b003      	add	sp, #12
    52a0:	f85d eb04 	ldr.w	lr, [sp], #4
    52a4:	b004      	add	sp, #16
    52a6:	4770      	bx	lr
    52a8:	0000c539 	.word	0x0000c539

000052ac <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    52ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    52ae:	f04f 0320 	mov.w	r3, #32
    52b2:	f3ef 8411 	mrs	r4, BASEPRI
    52b6:	f383 8812 	msr	BASEPRI_MAX, r3
    52ba:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    52be:	2301      	movs	r3, #1
    52c0:	4a0c      	ldr	r2, [pc, #48]	; (52f4 <nordicsemi_nrf52_init+0x48>)
    52c2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    52c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    52ca:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    52ce:	f007 f937 	bl	c540 <nrf52_errata_197>
    52d2:	b120      	cbz	r0, 52de <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    52d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52d8:	2201      	movs	r2, #1
    52da:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    52de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52e2:	2201      	movs	r2, #1
    52e4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    52e8:	f384 8811 	msr	BASEPRI, r4
    52ec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    52f0:	2000      	movs	r0, #0
    52f2:	bd10      	pop	{r4, pc}
    52f4:	4001e000 	.word	0x4001e000

000052f8 <sys_arch_reboot>:
    *p_gpregret = val;
    52f8:	b2c0      	uxtb	r0, r0
    52fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    52fe:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5302:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5306:	4905      	ldr	r1, [pc, #20]	; (531c <sys_arch_reboot+0x24>)
    5308:	68ca      	ldr	r2, [r1, #12]
    530a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    530e:	4b04      	ldr	r3, [pc, #16]	; (5320 <sys_arch_reboot+0x28>)
    5310:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5312:	60cb      	str	r3, [r1, #12]
    5314:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5318:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    531a:	e7fd      	b.n	5318 <sys_arch_reboot+0x20>
    531c:	e000ed00 	.word	0xe000ed00
    5320:	05fa0004 	.word	0x05fa0004

00005324 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5324:	b130      	cbz	r0, 5334 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    5326:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5328:	0180      	lsls	r0, r0, #6
    532a:	4b03      	ldr	r3, [pc, #12]	; (5338 <arch_busy_wait+0x14>)
    532c:	f043 0301 	orr.w	r3, r3, #1
    5330:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5332:	bd08      	pop	{r3, pc}
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	0000d430 	.word	0x0000d430

0000533c <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    533c:	4b07      	ldr	r3, [pc, #28]	; (535c <adc_context_start_sampling+0x20>)
    533e:	2201      	movs	r2, #1
    5340:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    5344:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    5348:	b113      	cbz	r3, 5350 <adc_context_start_sampling+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    534a:	4b04      	ldr	r3, [pc, #16]	; (535c <adc_context_start_sampling+0x20>)
    534c:	60da      	str	r2, [r3, #12]
}
    534e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5350:	4b02      	ldr	r3, [pc, #8]	; (535c <adc_context_start_sampling+0x20>)
    5352:	2201      	movs	r2, #1
    5354:	601a      	str	r2, [r3, #0]
    5356:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    5358:	4770      	bx	lr
    535a:	bf00      	nop
    535c:	40007000 	.word	0x40007000

00005360 <adc_context_update_buffer_pointer>:
static void adc_context_update_buffer_pointer(struct adc_context *ctx,
					      bool repeat)
{
	ARG_UNUSED(ctx);

	if (!repeat) {
    5360:	b949      	cbnz	r1, 5376 <adc_context_update_buffer_pointer+0x16>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
}

NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get(NRF_SAADC_Type const * p_reg)
{
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    5362:	4b05      	ldr	r3, [pc, #20]	; (5378 <adc_context_update_buffer_pointer+0x18>)
    5364:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
}

NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get(NRF_SAADC_Type const * p_reg)
{
    return p_reg->RESULT.AMOUNT;
    5368:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
		nrf_saadc_buffer_pointer_set(
			NRF_SAADC,
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    536c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    536e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5372:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			nrf_saadc_amount_get(NRF_SAADC));
	}
}
    5376:	4770      	bx	lr
    5378:	40007000 	.word	0x40007000

0000537c <set_resolution>:

static int set_resolution(const struct adc_sequence *sequence)
{
	nrf_saadc_resolution_t nrf_resolution;

	switch (sequence->resolution) {
    537c:	7c02      	ldrb	r2, [r0, #16]
    537e:	f1a2 0308 	sub.w	r3, r2, #8
    5382:	2b06      	cmp	r3, #6
    5384:	d80d      	bhi.n	53a2 <set_resolution+0x26>
    5386:	e8df f003 	tbb	[pc, r3]
    538a:	0c1e      	.short	0x0c1e
    538c:	0c040c20 	.word	0x0c040c20
    5390:	0a          	.byte	0x0a
    5391:	00          	.byte	0x00
		break;
	case 10:
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
		break;
	case 12:
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    5392:	2202      	movs	r2, #2
}

NRF_STATIC_INLINE void nrf_saadc_resolution_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_resolution_t resolution)
{
    p_reg->RESOLUTION = resolution;
    5394:	4b0e      	ldr	r3, [pc, #56]	; (53d0 <set_resolution+0x54>)
    5396:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
			    sequence->resolution);
		return -EINVAL;
	}

	nrf_saadc_resolution_set(NRF_SAADC, nrf_resolution);
	return 0;
    539a:	2000      	movs	r0, #0
}
    539c:	4770      	bx	lr
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    539e:	2203      	movs	r2, #3
		break;
    53a0:	e7f8      	b.n	5394 <set_resolution+0x18>
{
    53a2:	b500      	push	{lr}
    53a4:	b085      	sub	sp, #20
		LOG_ERR("ADC resolution value %d is not valid",
    53a6:	9203      	str	r2, [sp, #12]
    53a8:	4b0a      	ldr	r3, [pc, #40]	; (53d4 <set_resolution+0x58>)
    53aa:	9302      	str	r3, [sp, #8]
    53ac:	2000      	movs	r0, #0
    53ae:	9001      	str	r0, [sp, #4]
    53b0:	9000      	str	r0, [sp, #0]
    53b2:	4603      	mov	r3, r0
    53b4:	2201      	movs	r2, #1
    53b6:	4908      	ldr	r1, [pc, #32]	; (53d8 <set_resolution+0x5c>)
    53b8:	f007 f8f9 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    53bc:	f06f 0015 	mvn.w	r0, #21
}
    53c0:	b005      	add	sp, #20
    53c2:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (sequence->resolution) {
    53c6:	2200      	movs	r2, #0
    53c8:	e7e4      	b.n	5394 <set_resolution+0x18>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
    53ca:	2201      	movs	r2, #1
    53cc:	e7e2      	b.n	5394 <set_resolution+0x18>
    53ce:	bf00      	nop
    53d0:	40007000 	.word	0x40007000
    53d4:	0000ec34 	.word	0x0000ec34
    53d8:	0000d350 	.word	0x0000d350

000053dc <set_oversampling>:

static int set_oversampling(const struct adc_sequence *sequence,
			    uint8_t active_channels)
{
    53dc:	b500      	push	{lr}
    53de:	b085      	sub	sp, #20
	nrf_saadc_oversample_t nrf_oversampling;

	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    53e0:	2901      	cmp	r1, #1
    53e2:	d901      	bls.n	53e8 <set_oversampling+0xc>
    53e4:	7c43      	ldrb	r3, [r0, #17]
    53e6:	b94b      	cbnz	r3, 53fc <set_oversampling+0x20>
		LOG_ERR(
			"Oversampling is supported for single channel only");
		return -EINVAL;
	}

	switch (sequence->oversampling) {
    53e8:	7c43      	ldrb	r3, [r0, #17]
    53ea:	2b08      	cmp	r3, #8
    53ec:	d813      	bhi.n	5416 <set_oversampling+0x3a>
    53ee:	e8df f003 	tbb	[pc, r3]
    53f2:	2020      	.short	0x2020
    53f4:	20202020 	.word	0x20202020
    53f8:	2020      	.short	0x2020
    53fa:	20          	.byte	0x20
    53fb:	00          	.byte	0x00
		LOG_ERR(
    53fc:	4b10      	ldr	r3, [pc, #64]	; (5440 <set_oversampling+0x64>)
    53fe:	9302      	str	r3, [sp, #8]
    5400:	2000      	movs	r0, #0
    5402:	9001      	str	r0, [sp, #4]
    5404:	9000      	str	r0, [sp, #0]
    5406:	4603      	mov	r3, r0
    5408:	2201      	movs	r2, #1
    540a:	490e      	ldr	r1, [pc, #56]	; (5444 <set_oversampling+0x68>)
    540c:	f007 f8cf 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    5410:	f06f 0015 	mvn.w	r0, #21
    5414:	e011      	b.n	543a <set_oversampling+0x5e>
		break;
	case 8:
		nrf_oversampling = NRF_SAADC_OVERSAMPLE_256X;
		break;
	default:
		LOG_ERR("Oversampling value %d is not valid",
    5416:	9303      	str	r3, [sp, #12]
    5418:	4b0b      	ldr	r3, [pc, #44]	; (5448 <set_oversampling+0x6c>)
    541a:	9302      	str	r3, [sp, #8]
    541c:	2000      	movs	r0, #0
    541e:	9001      	str	r0, [sp, #4]
    5420:	9000      	str	r0, [sp, #0]
    5422:	4603      	mov	r3, r0
    5424:	2201      	movs	r2, #1
    5426:	4907      	ldr	r1, [pc, #28]	; (5444 <set_oversampling+0x68>)
    5428:	f007 f8c1 	bl	c5ae <z_log_msg2_runtime_create>
			    sequence->oversampling);
		return -EINVAL;
    542c:	f06f 0015 	mvn.w	r0, #21
    5430:	e003      	b.n	543a <set_oversampling+0x5e>
}

NRF_STATIC_INLINE void nrf_saadc_oversample_set(NRF_SAADC_Type *       p_reg,
                                                nrf_saadc_oversample_t oversample)
{
    p_reg->OVERSAMPLE = oversample;
    5432:	4a06      	ldr	r2, [pc, #24]	; (544c <set_oversampling+0x70>)
    5434:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	}

	nrf_saadc_oversample_set(NRF_SAADC, nrf_oversampling);
	return 0;
    5438:	2000      	movs	r0, #0
}
    543a:	b005      	add	sp, #20
    543c:	f85d fb04 	ldr.w	pc, [sp], #4
    5440:	0000ec5c 	.word	0x0000ec5c
    5444:	0000d350 	.word	0x0000d350
    5448:	0000ec90 	.word	0x0000ec90
    544c:	40007000 	.word	0x40007000

00005450 <check_buffer_size>:
static int check_buffer_size(const struct adc_sequence *sequence,
			     uint8_t active_channels)
{
	size_t needed_buffer_size;

	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    5450:	0049      	lsls	r1, r1, #1
	if (sequence->options) {
    5452:	6803      	ldr	r3, [r0, #0]
    5454:	b113      	cbz	r3, 545c <check_buffer_size+0xc>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    5456:	899b      	ldrh	r3, [r3, #12]
    5458:	fb03 1101 	mla	r1, r3, r1, r1
	}

	if (sequence->buffer_size < needed_buffer_size) {
    545c:	68c3      	ldr	r3, [r0, #12]
    545e:	428b      	cmp	r3, r1
    5460:	d301      	bcc.n	5466 <check_buffer_size+0x16>
		LOG_ERR("Provided buffer is too small (%u/%u)",
			    sequence->buffer_size, needed_buffer_size);
		return -ENOMEM;
	}

	return 0;
    5462:	2000      	movs	r0, #0
}
    5464:	4770      	bx	lr
{
    5466:	b500      	push	{lr}
    5468:	b087      	sub	sp, #28
		LOG_ERR("Provided buffer is too small (%u/%u)",
    546a:	9104      	str	r1, [sp, #16]
    546c:	9303      	str	r3, [sp, #12]
    546e:	4b07      	ldr	r3, [pc, #28]	; (548c <check_buffer_size+0x3c>)
    5470:	9302      	str	r3, [sp, #8]
    5472:	2000      	movs	r0, #0
    5474:	9001      	str	r0, [sp, #4]
    5476:	9000      	str	r0, [sp, #0]
    5478:	4603      	mov	r3, r0
    547a:	2201      	movs	r2, #1
    547c:	4904      	ldr	r1, [pc, #16]	; (5490 <check_buffer_size+0x40>)
    547e:	f007 f896 	bl	c5ae <z_log_msg2_runtime_create>
		return -ENOMEM;
    5482:	f06f 000b 	mvn.w	r0, #11
}
    5486:	b007      	add	sp, #28
    5488:	f85d fb04 	ldr.w	pc, [sp], #4
    548c:	0000ecb4 	.word	0x0000ecb4
    5490:	0000d350 	.word	0x0000d350

00005494 <adc_nrfx_channel_setup>:
{
    5494:	b510      	push	{r4, lr}
    5496:	b086      	sub	sp, #24
	nrf_saadc_channel_config_t config = {
    5498:	2300      	movs	r3, #0
    549a:	9304      	str	r3, [sp, #16]
    549c:	f8cd 3013 	str.w	r3, [sp, #19]
	uint8_t channel_id = channel_cfg->channel_id;
    54a0:	790a      	ldrb	r2, [r1, #4]
    54a2:	f002 021f 	and.w	r2, r2, #31
	if (channel_id >= SAADC_CH_NUM) {
    54a6:	2a07      	cmp	r2, #7
    54a8:	f200 80d0 	bhi.w	564c <adc_nrfx_channel_setup+0x1b8>
	switch (channel_cfg->gain) {
    54ac:	780b      	ldrb	r3, [r1, #0]
    54ae:	2b09      	cmp	r3, #9
    54b0:	d833      	bhi.n	551a <adc_nrfx_channel_setup+0x86>
    54b2:	e8df f003 	tbb	[pc, r3]
    54b6:	0508      	.short	0x0508
    54b8:	32221e1a 	.word	0x32221e1a
    54bc:	2e322a26 	.word	0x2e322a26
		config.gain = NRF_SAADC_GAIN1_5;
    54c0:	2301      	movs	r3, #1
    54c2:	f88d 3012 	strb.w	r3, [sp, #18]
	switch (channel_cfg->reference) {
    54c6:	784b      	ldrb	r3, [r1, #1]
    54c8:	2b03      	cmp	r3, #3
    54ca:	d033      	beq.n	5534 <adc_nrfx_channel_setup+0xa0>
    54cc:	2b04      	cmp	r3, #4
    54ce:	d034      	beq.n	553a <adc_nrfx_channel_setup+0xa6>
		LOG_ERR("Selected ADC reference is not valid");
    54d0:	4b60      	ldr	r3, [pc, #384]	; (5654 <adc_nrfx_channel_setup+0x1c0>)
    54d2:	9302      	str	r3, [sp, #8]
    54d4:	2000      	movs	r0, #0
    54d6:	9001      	str	r0, [sp, #4]
    54d8:	9000      	str	r0, [sp, #0]
    54da:	4603      	mov	r3, r0
    54dc:	2201      	movs	r2, #1
    54de:	495e      	ldr	r1, [pc, #376]	; (5658 <adc_nrfx_channel_setup+0x1c4>)
    54e0:	f007 f865 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    54e4:	f06f 0015 	mvn.w	r0, #21
    54e8:	e091      	b.n	560e <adc_nrfx_channel_setup+0x17a>
		config.gain = NRF_SAADC_GAIN1_4;
    54ea:	2302      	movs	r3, #2
    54ec:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54f0:	e7e9      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_3;
    54f2:	2303      	movs	r3, #3
    54f4:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    54f8:	e7e5      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1_2;
    54fa:	2304      	movs	r3, #4
    54fc:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5500:	e7e1      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN1;
    5502:	2305      	movs	r3, #5
    5504:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5508:	e7dd      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN2;
    550a:	2306      	movs	r3, #6
    550c:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5510:	e7d9      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		config.gain = NRF_SAADC_GAIN4;
    5512:	2307      	movs	r3, #7
    5514:	f88d 3012 	strb.w	r3, [sp, #18]
		break;
    5518:	e7d5      	b.n	54c6 <adc_nrfx_channel_setup+0x32>
		LOG_ERR("Selected ADC gain is not valid");
    551a:	4b50      	ldr	r3, [pc, #320]	; (565c <adc_nrfx_channel_setup+0x1c8>)
    551c:	9302      	str	r3, [sp, #8]
    551e:	2000      	movs	r0, #0
    5520:	9001      	str	r0, [sp, #4]
    5522:	9000      	str	r0, [sp, #0]
    5524:	4603      	mov	r3, r0
    5526:	2201      	movs	r2, #1
    5528:	494b      	ldr	r1, [pc, #300]	; (5658 <adc_nrfx_channel_setup+0x1c4>)
    552a:	f007 f840 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    552e:	f06f 0015 	mvn.w	r0, #21
    5532:	e06c      	b.n	560e <adc_nrfx_channel_setup+0x17a>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    5534:	2301      	movs	r3, #1
    5536:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (channel_cfg->acquisition_time) {
    553a:	884b      	ldrh	r3, [r1, #2]
    553c:	2b00      	cmp	r3, #0
    553e:	d068      	beq.n	5612 <adc_nrfx_channel_setup+0x17e>
    5540:	f244 0028 	movw	r0, #16424	; 0x4028
    5544:	4283      	cmp	r3, r0
    5546:	d874      	bhi.n	5632 <adc_nrfx_channel_setup+0x19e>
    5548:	f244 0003 	movw	r0, #16387	; 0x4003
    554c:	4283      	cmp	r3, r0
    554e:	d370      	bcc.n	5632 <adc_nrfx_channel_setup+0x19e>
    5550:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    5554:	3b03      	subs	r3, #3
    5556:	2b25      	cmp	r3, #37	; 0x25
    5558:	d86b      	bhi.n	5632 <adc_nrfx_channel_setup+0x19e>
    555a:	e8df f003 	tbb	[pc, r3]
    555e:	6a16      	.short	0x6a16
    5560:	6a6a6a13 	.word	0x6a6a6a13
    5564:	6a6a5a6a 	.word	0x6a6a5a6a
    5568:	6a5e6a6a 	.word	0x6a5e6a6a
    556c:	626a6a6a 	.word	0x626a6a6a
    5570:	6a6a6a6a 	.word	0x6a6a6a6a
    5574:	6a6a6a6a 	.word	0x6a6a6a6a
    5578:	6a6a6a6a 	.word	0x6a6a6a6a
    557c:	6a6a6a6a 	.word	0x6a6a6a6a
    5580:	666a6a6a 	.word	0x666a6a6a
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    5584:	2301      	movs	r3, #1
    5586:	f88d 3014 	strb.w	r3, [sp, #20]
	config.mode = (channel_cfg->differential ?
    558a:	790b      	ldrb	r3, [r1, #4]
		NRF_SAADC_MODE_DIFFERENTIAL : NRF_SAADC_MODE_SINGLE_ENDED);
    558c:	f3c3 1340 	ubfx	r3, r3, #5, #1
	config.mode = (channel_cfg->differential ?
    5590:	f88d 3015 	strb.w	r3, [sp, #21]
NRF_STATIC_INLINE void nrf_saadc_channel_init(NRF_SAADC_Type *                   p_reg,
                                              uint8_t                            channel,
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
    5594:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5598:	f003 0303 	and.w	r3, r3, #3
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
    559c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    55a0:	0100      	lsls	r0, r0, #4
    55a2:	f000 0030 	and.w	r0, r0, #48	; 0x30
    55a6:	4303      	orrs	r3, r0
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    55a8:	f89d 0012 	ldrb.w	r0, [sp, #18]
    55ac:	0200      	lsls	r0, r0, #8
    55ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    55b2:	4303      	orrs	r3, r0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
    55b4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    55b8:	0300      	lsls	r0, r0, #12
    55ba:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
    55be:	4303      	orrs	r3, r0
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
    55c0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    55c4:	0400      	lsls	r0, r0, #16
    55c6:	f400 20e0 	and.w	r0, r0, #458752	; 0x70000
    55ca:	4303      	orrs	r3, r0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    55cc:	f89d 0015 	ldrb.w	r0, [sp, #21]
    55d0:	0500      	lsls	r0, r0, #20
    55d2:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
    55d6:	4303      	orrs	r3, r0
            | ((config->burst      << SAADC_CH_CONFIG_BURST_Pos)  & SAADC_CH_CONFIG_BURST_Msk);
    55d8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    55dc:	0600      	lsls	r0, r0, #24
    55de:	f000 7080 	and.w	r0, r0, #16777216	; 0x1000000
    55e2:	4303      	orrs	r3, r0
    p_reg->CH[channel].CONFIG =
    55e4:	4c1e      	ldr	r4, [pc, #120]	; (5660 <adc_nrfx_channel_setup+0x1cc>)
    55e6:	eb04 1002 	add.w	r0, r4, r2, lsl #4
    55ea:	f8c0 3518 	str.w	r3, [r0, #1304]	; 0x518
				    channel_cfg->input_negative);
    55ee:	7988      	ldrb	r0, [r1, #6]
    p_reg->CH[channel].PSELN = pseln;
    55f0:	f102 0351 	add.w	r3, r2, #81	; 0x51
    55f4:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    55f8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    55fc:	6058      	str	r0, [r3, #4]
    p_reg->CH[channel].PSELP = pselp;
    55fe:	2000      	movs	r0, #0
    5600:	f844 000c 	str.w	r0, [r4, ip]
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    5604:	7949      	ldrb	r1, [r1, #5]
    5606:	4b17      	ldr	r3, [pc, #92]	; (5664 <adc_nrfx_channel_setup+0x1d0>)
    5608:	441a      	add	r2, r3
    560a:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
}
    560e:	b006      	add	sp, #24
    5610:	bd10      	pop	{r4, pc}
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    5612:	2302      	movs	r3, #2
    5614:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5618:	e7b7      	b.n	558a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    561a:	2303      	movs	r3, #3
    561c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5620:	e7b3      	b.n	558a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    5622:	2304      	movs	r3, #4
    5624:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5628:	e7af      	b.n	558a <adc_nrfx_channel_setup+0xf6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    562a:	2305      	movs	r3, #5
    562c:	f88d 3014 	strb.w	r3, [sp, #20]
		break;
    5630:	e7ab      	b.n	558a <adc_nrfx_channel_setup+0xf6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    5632:	4b0d      	ldr	r3, [pc, #52]	; (5668 <adc_nrfx_channel_setup+0x1d4>)
    5634:	9302      	str	r3, [sp, #8]
    5636:	2000      	movs	r0, #0
    5638:	9001      	str	r0, [sp, #4]
    563a:	9000      	str	r0, [sp, #0]
    563c:	4603      	mov	r3, r0
    563e:	2201      	movs	r2, #1
    5640:	4905      	ldr	r1, [pc, #20]	; (5658 <adc_nrfx_channel_setup+0x1c4>)
    5642:	f006 ffb4 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    5646:	f06f 0015 	mvn.w	r0, #21
    564a:	e7e0      	b.n	560e <adc_nrfx_channel_setup+0x17a>
		return -EINVAL;
    564c:	f06f 0015 	mvn.w	r0, #21
    5650:	e7dd      	b.n	560e <adc_nrfx_channel_setup+0x17a>
    5652:	bf00      	nop
    5654:	0000ecfc 	.word	0x0000ecfc
    5658:	0000d350 	.word	0x0000d350
    565c:	0000ecdc 	.word	0x0000ecdc
    5660:	40007000 	.word	0x40007000
    5664:	20000000 	.word	0x20000000
    5668:	0000ed20 	.word	0x0000ed20

0000566c <start_read>:

static int start_read(const struct device *dev,
		      const struct adc_sequence *sequence)
{
    566c:	b5f0      	push	{r4, r5, r6, r7, lr}
    566e:	b085      	sub	sp, #20
	int error;
	uint32_t selected_channels = sequence->channels;
    5670:	684e      	ldr	r6, [r1, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    5672:	b136      	cbz	r6, 5682 <start_read+0x16>
    5674:	460d      	mov	r5, r1
    5676:	f036 03ff 	bics.w	r3, r6, #255	; 0xff
    567a:	d102      	bne.n	5682 <start_read+0x16>
	active_channels = 0U;

	/* Enable only the channels selected for the pointed sequence.
	 * Disable all the rest.
	 */
	channel_id = 0U;
    567c:	2300      	movs	r3, #0
	active_channels = 0U;
    567e:	461c      	mov	r4, r3
    5680:	e024      	b.n	56cc <start_read+0x60>
		LOG_ERR("Invalid selection of channels");
    5682:	4b54      	ldr	r3, [pc, #336]	; (57d4 <start_read+0x168>)
    5684:	9302      	str	r3, [sp, #8]
    5686:	2000      	movs	r0, #0
    5688:	9001      	str	r0, [sp, #4]
    568a:	9000      	str	r0, [sp, #0]
    568c:	4603      	mov	r3, r0
    568e:	2201      	movs	r2, #1
    5690:	4951      	ldr	r1, [pc, #324]	; (57d8 <start_read+0x16c>)
    5692:	f006 ff8c 	bl	c5ae <z_log_msg2_runtime_create>
		return -EINVAL;
    5696:	f06f 0315 	mvn.w	r3, #21
    569a:	e03f      	b.n	571c <start_read+0xb0>
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
				LOG_ERR("Channel %u not configured",
    569c:	9303      	str	r3, [sp, #12]
    569e:	4b4f      	ldr	r3, [pc, #316]	; (57dc <start_read+0x170>)
    56a0:	9302      	str	r3, [sp, #8]
    56a2:	2000      	movs	r0, #0
    56a4:	9001      	str	r0, [sp, #4]
    56a6:	9000      	str	r0, [sp, #0]
    56a8:	4603      	mov	r3, r0
    56aa:	2201      	movs	r2, #1
    56ac:	494a      	ldr	r1, [pc, #296]	; (57d8 <start_read+0x16c>)
    56ae:	f006 ff7e 	bl	c5ae <z_log_msg2_runtime_create>
					    channel_id);
				return -EINVAL;
    56b2:	f06f 0315 	mvn.w	r3, #21
    56b6:	e031      	b.n	571c <start_read+0xb0>
    p_reg->CH[channel].PSELP = pselp;
    56b8:	f103 0251 	add.w	r2, r3, #81	; 0x51
    56bc:	0112      	lsls	r2, r2, #4
    56be:	4948      	ldr	r1, [pc, #288]	; (57e0 <start_read+0x174>)
    56c0:	2000      	movs	r0, #0
    56c2:	5088      	str	r0, [r1, r2]
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
    56c4:	3301      	adds	r3, #1
    56c6:	b2db      	uxtb	r3, r3
    56c8:	2b07      	cmp	r3, #7
    56ca:	d822      	bhi.n	5712 <start_read+0xa6>
		if (selected_channels & BIT(channel_id)) {
    56cc:	461a      	mov	r2, r3
    56ce:	fa26 f103 	lsr.w	r1, r6, r3
    56d2:	f011 0f01 	tst.w	r1, #1
    56d6:	d0ef      	beq.n	56b8 <start_read+0x4c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    56d8:	4942      	ldr	r1, [pc, #264]	; (57e4 <start_read+0x178>)
    56da:	4419      	add	r1, r3
    56dc:	f891 7090 	ldrb.w	r7, [r1, #144]	; 0x90
    56e0:	2f00      	cmp	r7, #0
    56e2:	d0db      	beq.n	569c <start_read+0x30>
				(sequence->oversampling != 0U ?
    56e4:	7c68      	ldrb	r0, [r5, #17]
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    56e6:	1e01      	subs	r1, r0, #0
    56e8:	bf18      	it	ne
    56ea:	2101      	movne	r1, #1

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    56ec:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 57e0 <start_read+0x174>
    56f0:	eb0c 1e03 	add.w	lr, ip, r3, lsl #4
    56f4:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    56f8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    56fc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    5700:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    5704:	3251      	adds	r2, #81	; 0x51
    5706:	0112      	lsls	r2, r2, #4
    5708:	f84c 7002 	str.w	r7, [ip, r2]
			++active_channels;
    570c:	3401      	adds	r4, #1
    570e:	b2e4      	uxtb	r4, r4
    5710:	e7d8      	b.n	56c4 <start_read+0x58>

	error = set_resolution(sequence);
    5712:	4628      	mov	r0, r5
    5714:	f7ff fe32 	bl	537c <set_resolution>
	if (error) {
    5718:	4603      	mov	r3, r0
    571a:	b110      	cbz	r0, 5722 <start_read+0xb6>

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    571c:	4618      	mov	r0, r3
    571e:	b005      	add	sp, #20
    5720:	bdf0      	pop	{r4, r5, r6, r7, pc}
	error = set_oversampling(sequence, active_channels);
    5722:	4621      	mov	r1, r4
    5724:	4628      	mov	r0, r5
    5726:	f7ff fe59 	bl	53dc <set_oversampling>
	if (error) {
    572a:	4603      	mov	r3, r0
    572c:	2800      	cmp	r0, #0
    572e:	d1f5      	bne.n	571c <start_read+0xb0>
	error = check_buffer_size(sequence, active_channels);
    5730:	4621      	mov	r1, r4
    5732:	4628      	mov	r0, r5
    5734:	f7ff fe8c 	bl	5450 <check_buffer_size>
	if (error) {
    5738:	4603      	mov	r3, r0
    573a:	2800      	cmp	r0, #0
    573c:	d1ee      	bne.n	571c <start_read+0xb0>
			      (nrf_saadc_value_t *)sequence->buffer,
    573e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    5740:	4b27      	ldr	r3, [pc, #156]	; (57e0 <start_read+0x174>)
    5742:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
    p_reg->RESULT.MAXCNT = size;
    5746:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    574a:	4f26      	ldr	r7, [pc, #152]	; (57e4 <start_read+0x178>)
    574c:	f107 0464 	add.w	r4, r7, #100	; 0x64
    5750:	462e      	mov	r6, r5
    5752:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5756:	6833      	ldr	r3, [r6, #0]
    5758:	6023      	str	r3, [r4, #0]
	ctx->status = 0;
    575a:	2300      	movs	r3, #0
    575c:	663b      	str	r3, [r7, #96]	; 0x60

	if (sequence->options) {
    575e:	682b      	ldr	r3, [r5, #0]
    5760:	b14b      	cbz	r3, 5776 <start_read+0x10a>
		ctx->options = *sequence->options;
    5762:	f107 0478 	add.w	r4, r7, #120	; 0x78
    5766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    576c:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    576e:	2300      	movs	r3, #0
    5770:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    5774:	b968      	cbnz	r0, 5792 <start_read+0x126>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    5776:	481b      	ldr	r0, [pc, #108]	; (57e4 <start_read+0x178>)
    5778:	f7ff fde0 	bl	533c <adc_context_start_sampling>
	return z_impl_k_sem_take(sem, timeout);
    577c:	4c19      	ldr	r4, [pc, #100]	; (57e4 <start_read+0x178>)
    577e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5786:	f104 0050 	add.w	r0, r4, #80	; 0x50
    578a:	f004 f8b1 	bl	98f0 <z_impl_k_sem_take>
	return ctx->status;
    578e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return error;
    5790:	e7c4      	b.n	571c <start_read+0xb0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5792:	463c      	mov	r4, r7
    5794:	2300      	movs	r3, #0
    5796:	f3bf 8f5b 	dmb	ish
    579a:	e854 2f00 	ldrex	r2, [r4]
    579e:	e844 3100 	strex	r1, r3, [r4]
    57a2:	2900      	cmp	r1, #0
    57a4:	d1f9      	bne.n	579a <start_read+0x12e>
    57a6:	f3bf 8f5b 	dmb	ish
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
    57aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			return ((t * to_hz + off) / from_hz);
    57ac:	0c59      	lsrs	r1, r3, #17
    57ae:	03db      	lsls	r3, r3, #15
    57b0:	480d      	ldr	r0, [pc, #52]	; (57e8 <start_read+0x17c>)
    57b2:	1818      	adds	r0, r3, r0
    57b4:	4a0d      	ldr	r2, [pc, #52]	; (57ec <start_read+0x180>)
    57b6:	f04f 0300 	mov.w	r3, #0
    57ba:	f141 0100 	adc.w	r1, r1, #0
    57be:	f7fa fe81 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    57c2:	9000      	str	r0, [sp, #0]
    57c4:	9101      	str	r1, [sp, #4]
    57c6:	2200      	movs	r2, #0
    57c8:	2300      	movs	r3, #0
    57ca:	f104 0008 	add.w	r0, r4, #8
    57ce:	f006 f863 	bl	b898 <z_impl_k_timer_start>
}
    57d2:	e7d3      	b.n	577c <start_read+0x110>
    57d4:	0000ed4c 	.word	0x0000ed4c
    57d8:	0000d350 	.word	0x0000d350
    57dc:	0000ed6c 	.word	0x0000ed6c
    57e0:	40007000 	.word	0x40007000
    57e4:	20000000 	.word	0x20000000
    57e8:	000f423f 	.word	0x000f423f
    57ec:	000f4240 	.word	0x000f4240

000057f0 <adc_nrfx_read>:

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    57f0:	b570      	push	{r4, r5, r6, lr}
    57f2:	4604      	mov	r4, r0
    57f4:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    57f6:	4e09      	ldr	r6, [pc, #36]	; (581c <adc_nrfx_read+0x2c>)
    57f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5800:	4630      	mov	r0, r6
    5802:	f004 f875 	bl	98f0 <z_impl_k_sem_take>
	int error;

	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
    5806:	4629      	mov	r1, r5
    5808:	4620      	mov	r0, r4
    580a:	f7ff ff2f 	bl	566c <start_read>
    580e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5810:	4630      	mov	r0, r6
    5812:	f004 f829 	bl	9868 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    5816:	4620      	mov	r0, r4
    5818:	bd70      	pop	{r4, r5, r6, pc}
    581a:	bf00      	nop
    581c:	20000040 	.word	0x20000040

00005820 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    5820:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5822:	4b0f      	ldr	r3, [pc, #60]	; (5860 <init_saadc+0x40>)
    5824:	2400      	movs	r4, #0
    5826:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    582a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    582e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    5832:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    5836:	2212      	movs	r2, #18
    5838:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    583c:	2007      	movs	r0, #7
    583e:	f7fe fe3b 	bl	44b8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5842:	4622      	mov	r2, r4
    5844:	2101      	movs	r1, #1
    5846:	2007      	movs	r0, #7
    5848:	f7fe fe52 	bl	44f0 <z_arm_irq_priority_set>
	return sem->count;
    584c:	4b05      	ldr	r3, [pc, #20]	; (5864 <init_saadc+0x44>)
    584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if (!k_sem_count_get(&ctx->lock)) {
    5850:	b10b      	cbz	r3, 5856 <init_saadc+0x36>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    5852:	2000      	movs	r0, #0
    5854:	bd10      	pop	{r4, pc}
    5856:	4804      	ldr	r0, [pc, #16]	; (5868 <init_saadc+0x48>)
    5858:	f004 f806 	bl	9868 <z_impl_k_sem_give>
}
    585c:	e7f9      	b.n	5852 <init_saadc+0x32>
    585e:	bf00      	nop
    5860:	40007000 	.word	0x40007000
    5864:	20000000 	.word	0x20000000
    5868:	20000040 	.word	0x20000040

0000586c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    586c:	4b36      	ldr	r3, [pc, #216]	; (5948 <saadc_irq_handler+0xdc>)
    586e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    5872:	b97b      	cbnz	r3, 5894 <saadc_irq_handler+0x28>
    5874:	4b34      	ldr	r3, [pc, #208]	; (5948 <saadc_irq_handler+0xdc>)
    5876:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    587a:	2b00      	cmp	r3, #0
    587c:	d062      	beq.n	5944 <saadc_irq_handler+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    587e:	4b32      	ldr	r3, [pc, #200]	; (5948 <saadc_irq_handler+0xdc>)
    5880:	2200      	movs	r2, #0
    5882:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5886:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    588a:	2201      	movs	r2, #1
    588c:	609a      	str	r2, [r3, #8]
    588e:	601a      	str	r2, [r3, #0]
    5890:	605a      	str	r2, [r3, #4]
}
    5892:	4770      	bx	lr
{
    5894:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5896:	4b2c      	ldr	r3, [pc, #176]	; (5948 <saadc_irq_handler+0xdc>)
    5898:	2200      	movs	r2, #0
    589a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    589e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58a2:	2101      	movs	r1, #1
    58a4:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    58a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    58aa:	4b28      	ldr	r3, [pc, #160]	; (594c <saadc_irq_handler+0xe0>)
    58ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    58ae:	b313      	cbz	r3, 58f6 <saadc_irq_handler+0x8a>
		adc_sequence_callback callback = ctx->options.callback;
    58b0:	4b26      	ldr	r3, [pc, #152]	; (594c <saadc_irq_handler+0xe0>)
    58b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    58b4:	b143      	cbz	r3, 58c8 <saadc_irq_handler+0x5c>
			action = callback(dev,
    58b6:	4925      	ldr	r1, [pc, #148]	; (594c <saadc_irq_handler+0xe0>)
    58b8:	f8b1 2088 	ldrh.w	r2, [r1, #136]	; 0x88
    58bc:	3164      	adds	r1, #100	; 0x64
    58be:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    58c0:	2801      	cmp	r0, #1
    58c2:	d00f      	beq.n	58e4 <saadc_irq_handler+0x78>
    58c4:	2802      	cmp	r0, #2
    58c6:	d010      	beq.n	58ea <saadc_irq_handler+0x7e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    58c8:	4a20      	ldr	r2, [pc, #128]	; (594c <saadc_irq_handler+0xe0>)
    58ca:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			    ctx->options.extra_samplings) {
    58ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
			if (ctx->sampling_index <
    58d2:	4293      	cmp	r3, r2
    58d4:	d213      	bcs.n	58fe <saadc_irq_handler+0x92>
				++ctx->sampling_index;
    58d6:	3301      	adds	r3, #1
    58d8:	4a1c      	ldr	r2, [pc, #112]	; (594c <saadc_irq_handler+0xe0>)
    58da:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
		bool repeat = false;
    58de:	2100      	movs	r1, #0
		bool finish = false;
    58e0:	460b      	mov	r3, r1
    58e2:	e004      	b.n	58ee <saadc_irq_handler+0x82>
		switch (action) {
    58e4:	2101      	movs	r1, #1
    58e6:	2300      	movs	r3, #0
    58e8:	e001      	b.n	58ee <saadc_irq_handler+0x82>
		bool repeat = false;
    58ea:	2100      	movs	r1, #0
			finish = true;
    58ec:	2301      	movs	r3, #1
			} else {
				finish = true;
			}
		}

		if (!finish) {
    58ee:	b14b      	cbz	r3, 5904 <saadc_irq_handler+0x98>
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    58f0:	4b16      	ldr	r3, [pc, #88]	; (594c <saadc_irq_handler+0xe0>)
    58f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    58f4:	bb13      	cbnz	r3, 593c <saadc_irq_handler+0xd0>
	z_impl_k_sem_give(sem);
    58f6:	4816      	ldr	r0, [pc, #88]	; (5950 <saadc_irq_handler+0xe4>)
    58f8:	f003 ffb6 	bl	9868 <z_impl_k_sem_give>
}
    58fc:	bd10      	pop	{r4, pc}
		bool repeat = false;
    58fe:	2100      	movs	r1, #0
				finish = true;
    5900:	2301      	movs	r3, #1
    5902:	e7f4      	b.n	58ee <saadc_irq_handler+0x82>
			adc_context_update_buffer_pointer(ctx, repeat);
    5904:	4c11      	ldr	r4, [pc, #68]	; (594c <saadc_irq_handler+0xe0>)
    5906:	4620      	mov	r0, r4
    5908:	f7ff fd2a 	bl	5360 <adc_context_update_buffer_pointer>
			if (ctx->options.interval_us == 0U) {
    590c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    590e:	b91b      	cbnz	r3, 5918 <saadc_irq_handler+0xac>
				adc_context_start_sampling(ctx);
    5910:	4620      	mov	r0, r4
    5912:	f7ff fd13 	bl	533c <adc_context_start_sampling>
    5916:	e7f1      	b.n	58fc <saadc_irq_handler+0x90>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5918:	4b0c      	ldr	r3, [pc, #48]	; (594c <saadc_irq_handler+0xe0>)
    591a:	f3bf 8f5b 	dmb	ish
    591e:	e853 2f00 	ldrex	r2, [r3]
    5922:	1e51      	subs	r1, r2, #1
    5924:	e843 1000 	strex	r0, r1, [r3]
    5928:	2800      	cmp	r0, #0
    592a:	d1f8      	bne.n	591e <saadc_irq_handler+0xb2>
    592c:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    5930:	2a01      	cmp	r2, #1
    5932:	dde3      	ble.n	58fc <saadc_irq_handler+0x90>
				adc_context_start_sampling(ctx);
    5934:	4618      	mov	r0, r3
    5936:	f7ff fd01 	bl	533c <adc_context_start_sampling>
			return;
    593a:	e7df      	b.n	58fc <saadc_irq_handler+0x90>
	z_impl_k_timer_stop(timer);
    593c:	4805      	ldr	r0, [pc, #20]	; (5954 <saadc_irq_handler+0xe8>)
    593e:	f007 fb99 	bl	d074 <z_impl_k_timer_stop>
}
    5942:	e7d8      	b.n	58f6 <saadc_irq_handler+0x8a>
    5944:	4770      	bx	lr
    5946:	bf00      	nop
    5948:	40007000 	.word	0x40007000
    594c:	20000000 	.word	0x20000000
    5950:	20000050 	.word	0x20000050
    5954:	20000008 	.word	0x20000008

00005958 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    5958:	4800      	ldr	r0, [pc, #0]	; (595c <get_hf_flags+0x4>)
    595a:	4770      	bx	lr
    595c:	20000d28 	.word	0x20000d28

00005960 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5960:	4b01      	ldr	r3, [pc, #4]	; (5968 <get_subsys+0x8>)
    5962:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    5964:	1140      	asrs	r0, r0, #5
    5966:	4770      	bx	lr
    5968:	20000ce0 	.word	0x20000ce0

0000596c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    596c:	b530      	push	{r4, r5, lr}
    596e:	b083      	sub	sp, #12
    5970:	4605      	mov	r5, r0
    5972:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5974:	f7ff fff4 	bl	5960 <get_subsys>
    5978:	4601      	mov	r1, r0
    597a:	2340      	movs	r3, #64	; 0x40
    597c:	9300      	str	r3, [sp, #0]
    597e:	4623      	mov	r3, r4
    5980:	4a05      	ldr	r2, [pc, #20]	; (5998 <onoff_start+0x2c>)
    5982:	4806      	ldr	r0, [pc, #24]	; (599c <onoff_start+0x30>)
    5984:	f006 fe8f 	bl	c6a6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5988:	1e01      	subs	r1, r0, #0
    598a:	db01      	blt.n	5990 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    598c:	b003      	add	sp, #12
    598e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    5990:	4628      	mov	r0, r5
    5992:	47a0      	blx	r4
}
    5994:	e7fa      	b.n	598c <onoff_start+0x20>
    5996:	bf00      	nop
    5998:	0000c6ef 	.word	0x0000c6ef
    599c:	0000d140 	.word	0x0000d140

000059a0 <generic_hfclk_stop>:
{
    59a0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59a2:	4b0a      	ldr	r3, [pc, #40]	; (59cc <generic_hfclk_stop+0x2c>)
    59a4:	f3bf 8f5b 	dmb	ish
    59a8:	e853 2f00 	ldrex	r2, [r3]
    59ac:	f022 0102 	bic.w	r1, r2, #2
    59b0:	e843 1000 	strex	r0, r1, [r3]
    59b4:	2800      	cmp	r0, #0
    59b6:	d1f7      	bne.n	59a8 <generic_hfclk_stop+0x8>
    59b8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    59bc:	f012 0f01 	tst.w	r2, #1
    59c0:	d000      	beq.n	59c4 <generic_hfclk_stop+0x24>
}
    59c2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    59c4:	f006 fea5 	bl	c712 <hfclk_stop>
    59c8:	e7fb      	b.n	59c2 <generic_hfclk_stop+0x22>
    59ca:	bf00      	nop
    59cc:	20000d38 	.word	0x20000d38

000059d0 <get_status>:
{
    59d0:	b570      	push	{r4, r5, r6, lr}
    59d2:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    59d4:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    59d6:	2c01      	cmp	r4, #1
    59d8:	d807      	bhi.n	59ea <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    59da:	4621      	mov	r1, r4
    59dc:	4628      	mov	r0, r5
    59de:	f006 fdf5 	bl	c5cc <get_sub_data>
    59e2:	6880      	ldr	r0, [r0, #8]
}
    59e4:	f000 0007 	and.w	r0, r0, #7
    59e8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    59ea:	4e06      	ldr	r6, [pc, #24]	; (5a04 <get_status+0x34>)
    59ec:	2379      	movs	r3, #121	; 0x79
    59ee:	4632      	mov	r2, r6
    59f0:	4905      	ldr	r1, [pc, #20]	; (5a08 <get_status+0x38>)
    59f2:	4806      	ldr	r0, [pc, #24]	; (5a0c <get_status+0x3c>)
    59f4:	f006 fbb8 	bl	c168 <assert_print>
    59f8:	2179      	movs	r1, #121	; 0x79
    59fa:	4630      	mov	r0, r6
    59fc:	f006 fbad 	bl	c15a <assert_post_action>
    5a00:	e7eb      	b.n	59da <get_status+0xa>
    5a02:	bf00      	nop
    5a04:	0000eda4 	.word	0x0000eda4
    5a08:	0000ede4 	.word	0x0000ede4
    5a0c:	0000d51c 	.word	0x0000d51c

00005a10 <stop>:
{
    5a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a14:	4607      	mov	r7, r0
    5a16:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5a18:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5a1a:	4621      	mov	r1, r4
    5a1c:	f006 fdd6 	bl	c5cc <get_sub_data>
    5a20:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5a22:	2c01      	cmp	r4, #1
    5a24:	d80f      	bhi.n	5a46 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    5a26:	4631      	mov	r1, r6
    5a28:	f105 0008 	add.w	r0, r5, #8
    5a2c:	f006 fddf 	bl	c5ee <set_off_state>
	if (err < 0) {
    5a30:	2800      	cmp	r0, #0
    5a32:	db06      	blt.n	5a42 <stop+0x32>
	get_sub_config(dev, type)->stop();
    5a34:	4621      	mov	r1, r4
    5a36:	4638      	mov	r0, r7
    5a38:	f006 fdcf 	bl	c5da <get_sub_config>
    5a3c:	6843      	ldr	r3, [r0, #4]
    5a3e:	4798      	blx	r3
	return 0;
    5a40:	2000      	movs	r0, #0
}
    5a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5a46:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5a64 <stop+0x54>
    5a4a:	f240 134d 	movw	r3, #333	; 0x14d
    5a4e:	4642      	mov	r2, r8
    5a50:	4905      	ldr	r1, [pc, #20]	; (5a68 <stop+0x58>)
    5a52:	4806      	ldr	r0, [pc, #24]	; (5a6c <stop+0x5c>)
    5a54:	f006 fb88 	bl	c168 <assert_print>
    5a58:	f240 114d 	movw	r1, #333	; 0x14d
    5a5c:	4640      	mov	r0, r8
    5a5e:	f006 fb7c 	bl	c15a <assert_post_action>
    5a62:	e7e0      	b.n	5a26 <stop+0x16>
    5a64:	0000eda4 	.word	0x0000eda4
    5a68:	0000ede4 	.word	0x0000ede4
    5a6c:	0000d51c 	.word	0x0000d51c

00005a70 <onoff_stop>:
{
    5a70:	b538      	push	{r3, r4, r5, lr}
    5a72:	4605      	mov	r5, r0
    5a74:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5a76:	f7ff ff73 	bl	5960 <get_subsys>
    5a7a:	4601      	mov	r1, r0
    5a7c:	2240      	movs	r2, #64	; 0x40
    5a7e:	4803      	ldr	r0, [pc, #12]	; (5a8c <onoff_stop+0x1c>)
    5a80:	f7ff ffc6 	bl	5a10 <stop>
    5a84:	4601      	mov	r1, r0
	notify(mgr, res);
    5a86:	4628      	mov	r0, r5
    5a88:	47a0      	blx	r4
}
    5a8a:	bd38      	pop	{r3, r4, r5, pc}
    5a8c:	0000d140 	.word	0x0000d140

00005a90 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    5a90:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    5a92:	2801      	cmp	r0, #1
    5a94:	d01d      	beq.n	5ad2 <clock_event_handler+0x42>
    5a96:	2803      	cmp	r0, #3
    5a98:	d020      	beq.n	5adc <clock_event_handler+0x4c>
    5a9a:	b168      	cbz	r0, 5ab8 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    5a9c:	4c16      	ldr	r4, [pc, #88]	; (5af8 <clock_event_handler+0x68>)
    5a9e:	f240 2362 	movw	r3, #610	; 0x262
    5aa2:	4622      	mov	r2, r4
    5aa4:	4915      	ldr	r1, [pc, #84]	; (5afc <clock_event_handler+0x6c>)
    5aa6:	4816      	ldr	r0, [pc, #88]	; (5b00 <clock_event_handler+0x70>)
    5aa8:	f006 fb5e 	bl	c168 <assert_print>
    5aac:	f240 2162 	movw	r1, #610	; 0x262
    5ab0:	4620      	mov	r0, r4
    5ab2:	f006 fb52 	bl	c15a <assert_post_action>
		break;
	}
}
    5ab6:	e010      	b.n	5ada <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5ab8:	2100      	movs	r1, #0
    5aba:	4812      	ldr	r0, [pc, #72]	; (5b04 <clock_event_handler+0x74>)
    5abc:	f006 fd86 	bl	c5cc <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5ac0:	6883      	ldr	r3, [r0, #8]
    5ac2:	f013 0f07 	tst.w	r3, #7
    5ac6:	d108      	bne.n	5ada <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5ac8:	2100      	movs	r1, #0
    5aca:	480e      	ldr	r0, [pc, #56]	; (5b04 <clock_event_handler+0x74>)
    5acc:	f006 fdd9 	bl	c682 <clkstarted_handle>
    5ad0:	e003      	b.n	5ada <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5ad2:	2101      	movs	r1, #1
    5ad4:	480b      	ldr	r0, [pc, #44]	; (5b04 <clock_event_handler+0x74>)
    5ad6:	f006 fdd4 	bl	c682 <clkstarted_handle>
}
    5ada:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    5adc:	4c06      	ldr	r4, [pc, #24]	; (5af8 <clock_event_handler+0x68>)
    5ade:	f240 235e 	movw	r3, #606	; 0x25e
    5ae2:	4622      	mov	r2, r4
    5ae4:	4905      	ldr	r1, [pc, #20]	; (5afc <clock_event_handler+0x6c>)
    5ae6:	4806      	ldr	r0, [pc, #24]	; (5b00 <clock_event_handler+0x70>)
    5ae8:	f006 fb3e 	bl	c168 <assert_print>
    5aec:	f240 215e 	movw	r1, #606	; 0x25e
    5af0:	4620      	mov	r0, r4
    5af2:	f006 fb32 	bl	c15a <assert_post_action>
		break;
    5af6:	e7f0      	b.n	5ada <clock_event_handler+0x4a>
    5af8:	0000eda4 	.word	0x0000eda4
    5afc:	0000d6e0 	.word	0x0000d6e0
    5b00:	0000d51c 	.word	0x0000d51c
    5b04:	0000d140 	.word	0x0000d140

00005b08 <api_blocking_start>:
{
    5b08:	b500      	push	{lr}
    5b0a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5b0c:	f8cd d000 	str.w	sp, [sp]
    5b10:	f8cd d004 	str.w	sp, [sp, #4]
    5b14:	2300      	movs	r3, #0
    5b16:	9302      	str	r3, [sp, #8]
    5b18:	2301      	movs	r3, #1
    5b1a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5b1c:	466b      	mov	r3, sp
    5b1e:	4a07      	ldr	r2, [pc, #28]	; (5b3c <api_blocking_start+0x34>)
    5b20:	f006 fddd 	bl	c6de <api_start>
	if (err < 0) {
    5b24:	2800      	cmp	r0, #0
    5b26:	db05      	blt.n	5b34 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    5b28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5b2c:	2300      	movs	r3, #0
    5b2e:	4668      	mov	r0, sp
    5b30:	f003 fede 	bl	98f0 <z_impl_k_sem_take>
}
    5b34:	b005      	add	sp, #20
    5b36:	f85d fb04 	ldr.w	pc, [sp], #4
    5b3a:	bf00      	nop
    5b3c:	0000c731 	.word	0x0000c731

00005b40 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    5b40:	b570      	push	{r4, r5, r6, lr}
    5b42:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5b44:	2200      	movs	r2, #0
    5b46:	2101      	movs	r1, #1
    5b48:	4610      	mov	r0, r2
    5b4a:	f7fe fcd1 	bl	44f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5b4e:	4811      	ldr	r0, [pc, #68]	; (5b94 <clk_init+0x54>)
    5b50:	f001 fd8c 	bl	766c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5b54:	4b10      	ldr	r3, [pc, #64]	; (5b98 <clk_init+0x58>)
    5b56:	4298      	cmp	r0, r3
    5b58:	d119      	bne.n	5b8e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5b5a:	f001 fdb1 	bl	76c0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    5b5e:	2400      	movs	r4, #0
    5b60:	2c01      	cmp	r4, #1
    5b62:	d812      	bhi.n	5b8a <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5b64:	4621      	mov	r1, r4
    5b66:	4630      	mov	r0, r6
    5b68:	f006 fd30 	bl	c5cc <get_sub_data>
    5b6c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5b6e:	4621      	mov	r1, r4
    5b70:	4630      	mov	r0, r6
    5b72:	f006 fd38 	bl	c5e6 <get_onoff_manager>
    5b76:	4909      	ldr	r1, [pc, #36]	; (5b9c <clk_init+0x5c>)
    5b78:	f006 f9ff 	bl	bf7a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5b7c:	2800      	cmp	r0, #0
    5b7e:	db05      	blt.n	5b8c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5b80:	2301      	movs	r3, #1
    5b82:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    5b84:	441c      	add	r4, r3
    5b86:	b2e4      	uxtb	r4, r4
    5b88:	e7ea      	b.n	5b60 <clk_init+0x20>
	}

	return 0;
    5b8a:	2000      	movs	r0, #0
}
    5b8c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5b8e:	f06f 0004 	mvn.w	r0, #4
    5b92:	e7fb      	b.n	5b8c <clk_init+0x4c>
    5b94:	00005a91 	.word	0x00005a91
    5b98:	0bad0000 	.word	0x0bad0000
    5b9c:	0000ee60 	.word	0x0000ee60

00005ba0 <lfclk_spinwait>:
{
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5ba4:	2801      	cmp	r0, #1
    5ba6:	d107      	bne.n	5bb8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5bb0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5bb4:	2b01      	cmp	r3, #1
    5bb6:	d05a      	beq.n	5c6e <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5bb8:	f007 f9c2 	bl	cf40 <k_is_in_isr>
    5bbc:	b928      	cbnz	r0, 5bca <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    5bbe:	4b2f      	ldr	r3, [pc, #188]	; (5c7c <lfclk_spinwait+0xdc>)
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d043      	beq.n	5c4e <lfclk_spinwait+0xae>
    5bc6:	2300      	movs	r3, #0
    5bc8:	e000      	b.n	5bcc <lfclk_spinwait+0x2c>
    5bca:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    5bcc:	461c      	mov	r4, r3
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d03f      	beq.n	5c52 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    5bd2:	f04f 0320 	mov.w	r3, #32
    5bd6:	f3ef 8611 	mrs	r6, BASEPRI
    5bda:	f383 8812 	msr	BASEPRI_MAX, r3
    5bde:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    5be2:	b924      	cbnz	r4, 5bee <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    5be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5be8:	2202      	movs	r2, #2
    5bea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5bf2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5bf6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5bfa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5bfe:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5c02:	d12d      	bne.n	5c60 <lfclk_spinwait+0xc0>
    return false;
    5c04:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5c06:	b11a      	cbz	r2, 5c10 <lfclk_spinwait+0x70>
    5c08:	2b01      	cmp	r3, #1
    5c0a:	d02b      	beq.n	5c64 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5c0c:	2d01      	cmp	r5, #1
    5c0e:	d029      	beq.n	5c64 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5c10:	b30c      	cbz	r4, 5c56 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5c12:	4630      	mov	r0, r6
    5c14:	f7fe fbfc 	bl	4410 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c1c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5c20:	2b00      	cmp	r3, #0
    5c22:	d1e4      	bne.n	5bee <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c28:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d0de      	beq.n	5bee <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c34:	2200      	movs	r2, #0
    5c36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5c3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5c3e:	2201      	movs	r2, #1
    5c40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c44:	490e      	ldr	r1, [pc, #56]	; (5c80 <lfclk_spinwait+0xe0>)
    5c46:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c4a:	609a      	str	r2, [r3, #8]
}
    5c4c:	e7cf      	b.n	5bee <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5c4e:	2301      	movs	r3, #1
    5c50:	e7bc      	b.n	5bcc <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    5c52:	2600      	movs	r6, #0
    5c54:	e7c5      	b.n	5be2 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    5c56:	2021      	movs	r0, #33	; 0x21
    5c58:	2100      	movs	r1, #0
    5c5a:	f005 f8e5 	bl	ae28 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5c5e:	e7db      	b.n	5c18 <lfclk_spinwait+0x78>
                return true;
    5c60:	2201      	movs	r2, #1
    5c62:	e7d0      	b.n	5c06 <lfclk_spinwait+0x66>
	if (isr_mode) {
    5c64:	b124      	cbz	r4, 5c70 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    5c66:	f386 8811 	msr	BASEPRI, r6
    5c6a:	f3bf 8f6f 	isb	sy
}
    5c6e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    5c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c74:	2202      	movs	r2, #2
    5c76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5c7a:	e7f8      	b.n	5c6e <lfclk_spinwait+0xce>
    5c7c:	2000145a 	.word	0x2000145a
    5c80:	e000e100 	.word	0xe000e100

00005c84 <generic_hfclk_start>:
{
    5c84:	b510      	push	{r4, lr}
	__asm__ volatile(
    5c86:	f04f 0320 	mov.w	r3, #32
    5c8a:	f3ef 8411 	mrs	r4, BASEPRI
    5c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c92:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5c96:	4a13      	ldr	r2, [pc, #76]	; (5ce4 <generic_hfclk_start+0x60>)
    5c98:	6813      	ldr	r3, [r2, #0]
    5c9a:	f043 0302 	orr.w	r3, r3, #2
    5c9e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5ca0:	f013 0f01 	tst.w	r3, #1
    5ca4:	d108      	bne.n	5cb8 <generic_hfclk_start+0x34>
	bool already_started = false;
    5ca6:	2300      	movs	r3, #0
	__asm__ volatile(
    5ca8:	f384 8811 	msr	BASEPRI, r4
    5cac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5cb0:	b99b      	cbnz	r3, 5cda <generic_hfclk_start+0x56>
	hfclk_start();
    5cb2:	f006 fd24 	bl	c6fe <hfclk_start>
}
    5cb6:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cbc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5cc0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5cc4:	f012 0f01 	tst.w	r2, #1
    5cc8:	d101      	bne.n	5cce <generic_hfclk_start+0x4a>
	bool already_started = false;
    5cca:	2300      	movs	r3, #0
    5ccc:	e7ec      	b.n	5ca8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    5cce:	f7ff fe43 	bl	5958 <get_hf_flags>
    5cd2:	f006 fcc3 	bl	c65c <set_on_state>
			already_started = true;
    5cd6:	2301      	movs	r3, #1
    5cd8:	e7e6      	b.n	5ca8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    5cda:	2100      	movs	r1, #0
    5cdc:	4802      	ldr	r0, [pc, #8]	; (5ce8 <generic_hfclk_start+0x64>)
    5cde:	f006 fcd0 	bl	c682 <clkstarted_handle>
		return;
    5ce2:	e7e8      	b.n	5cb6 <generic_hfclk_start+0x32>
    5ce4:	20000d38 	.word	0x20000d38
    5ce8:	0000d140 	.word	0x0000d140

00005cec <z_nrf_clock_control_lf_on>:
{
    5cec:	b538      	push	{r3, r4, r5, lr}
    5cee:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5cf0:	4b1f      	ldr	r3, [pc, #124]	; (5d70 <z_nrf_clock_control_lf_on+0x84>)
    5cf2:	2101      	movs	r1, #1
    5cf4:	f3bf 8f5b 	dmb	ish
    5cf8:	e853 2f00 	ldrex	r2, [r3]
    5cfc:	e843 1000 	strex	r0, r1, [r3]
    5d00:	2800      	cmp	r0, #0
    5d02:	d1f9      	bne.n	5cf8 <z_nrf_clock_control_lf_on+0xc>
    5d04:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5d08:	b142      	cbz	r2, 5d1c <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    5d0a:	b134      	cbz	r4, 5d1a <z_nrf_clock_control_lf_on+0x2e>
    5d0c:	1e63      	subs	r3, r4, #1
    5d0e:	b2db      	uxtb	r3, r3
    5d10:	2b01      	cmp	r3, #1
    5d12:	d81f      	bhi.n	5d54 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    5d14:	4620      	mov	r0, r4
    5d16:	f7ff ff43 	bl	5ba0 <lfclk_spinwait>
}
    5d1a:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    5d1c:	4815      	ldr	r0, [pc, #84]	; (5d74 <z_nrf_clock_control_lf_on+0x88>)
    5d1e:	f006 fc62 	bl	c5e6 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5d22:	4915      	ldr	r1, [pc, #84]	; (5d78 <z_nrf_clock_control_lf_on+0x8c>)
    5d24:	2300      	movs	r3, #0
    5d26:	604b      	str	r3, [r1, #4]
    5d28:	608b      	str	r3, [r1, #8]
    5d2a:	60cb      	str	r3, [r1, #12]
    5d2c:	2301      	movs	r3, #1
    5d2e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    5d30:	f7fc fdd4 	bl	28dc <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    5d34:	2800      	cmp	r0, #0
    5d36:	dae8      	bge.n	5d0a <z_nrf_clock_control_lf_on+0x1e>
    5d38:	4d10      	ldr	r5, [pc, #64]	; (5d7c <z_nrf_clock_control_lf_on+0x90>)
    5d3a:	f44f 7308 	mov.w	r3, #544	; 0x220
    5d3e:	462a      	mov	r2, r5
    5d40:	490f      	ldr	r1, [pc, #60]	; (5d80 <z_nrf_clock_control_lf_on+0x94>)
    5d42:	4810      	ldr	r0, [pc, #64]	; (5d84 <z_nrf_clock_control_lf_on+0x98>)
    5d44:	f006 fa10 	bl	c168 <assert_print>
    5d48:	f44f 7108 	mov.w	r1, #544	; 0x220
    5d4c:	4628      	mov	r0, r5
    5d4e:	f006 fa04 	bl	c15a <assert_post_action>
    5d52:	e7da      	b.n	5d0a <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    5d54:	4c09      	ldr	r4, [pc, #36]	; (5d7c <z_nrf_clock_control_lf_on+0x90>)
    5d56:	f240 2332 	movw	r3, #562	; 0x232
    5d5a:	4622      	mov	r2, r4
    5d5c:	490a      	ldr	r1, [pc, #40]	; (5d88 <z_nrf_clock_control_lf_on+0x9c>)
    5d5e:	4809      	ldr	r0, [pc, #36]	; (5d84 <z_nrf_clock_control_lf_on+0x98>)
    5d60:	f006 fa02 	bl	c168 <assert_print>
    5d64:	f240 2132 	movw	r1, #562	; 0x232
    5d68:	4620      	mov	r0, r4
    5d6a:	f006 f9f6 	bl	c15a <assert_post_action>
    5d6e:	e7d4      	b.n	5d1a <z_nrf_clock_control_lf_on+0x2e>
    5d70:	20000d3c 	.word	0x20000d3c
    5d74:	0000d140 	.word	0x0000d140
    5d78:	20000cd0 	.word	0x20000cd0
    5d7c:	0000eda4 	.word	0x0000eda4
    5d80:	0000e26c 	.word	0x0000e26c
    5d84:	0000d51c 	.word	0x0000d51c
    5d88:	0000d6e0 	.word	0x0000d6e0

00005d8c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    5d8c:	b510      	push	{r4, lr}
    5d8e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    5d90:	280a      	cmp	r0, #10
    5d92:	d007      	beq.n	5da4 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    5d94:	4b07      	ldr	r3, [pc, #28]	; (5db4 <console_out+0x28>)
    5d96:	6818      	ldr	r0, [r3, #0]
    5d98:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    5d9a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5d9c:	685b      	ldr	r3, [r3, #4]
    5d9e:	4798      	blx	r3

	return c;
}
    5da0:	4620      	mov	r0, r4
    5da2:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    5da4:	4b03      	ldr	r3, [pc, #12]	; (5db4 <console_out+0x28>)
    5da6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    5da8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5daa:	685b      	ldr	r3, [r3, #4]
    5dac:	210d      	movs	r1, #13
    5dae:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    5db0:	e7f0      	b.n	5d94 <console_out+0x8>
    5db2:	bf00      	nop
    5db4:	20000d40 	.word	0x20000d40

00005db8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    5db8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    5dba:	4c04      	ldr	r4, [pc, #16]	; (5dcc <uart_console_hook_install+0x14>)
    5dbc:	4620      	mov	r0, r4
    5dbe:	f7ff fa4f 	bl	5260 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    5dc2:	4620      	mov	r0, r4
    5dc4:	f7fc faf0 	bl	23a8 <__printk_hook_install>
#endif
}
    5dc8:	bd10      	pop	{r4, pc}
    5dca:	bf00      	nop
    5dcc:	00005d8d 	.word	0x00005d8d

00005dd0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5dd0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5dd2:	4806      	ldr	r0, [pc, #24]	; (5dec <uart_console_init+0x1c>)
    5dd4:	4b06      	ldr	r3, [pc, #24]	; (5df0 <uart_console_init+0x20>)
    5dd6:	6018      	str	r0, [r3, #0]
    5dd8:	f007 f856 	bl	ce88 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5ddc:	b118      	cbz	r0, 5de6 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    5dde:	f7ff ffeb 	bl	5db8 <uart_console_hook_install>

	return 0;
    5de2:	2000      	movs	r0, #0
}
    5de4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5de6:	f06f 0012 	mvn.w	r0, #18
    5dea:	e7fb      	b.n	5de4 <uart_console_init+0x14>
    5dec:	0000d1a0 	.word	0x0000d1a0
    5df0:	20000d40 	.word	0x20000d40

00005df4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5df4:	b128      	cbz	r0, 5e02 <get_dev+0xe>
    5df6:	2801      	cmp	r0, #1
    5df8:	d101      	bne.n	5dfe <get_dev+0xa>
    5dfa:	4803      	ldr	r0, [pc, #12]	; (5e08 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    5dfc:	4770      	bx	lr
	const struct device *dev = NULL;
    5dfe:	2000      	movs	r0, #0
    5e00:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5e02:	4802      	ldr	r0, [pc, #8]	; (5e0c <get_dev+0x18>)
    5e04:	4770      	bx	lr
    5e06:	bf00      	nop
    5e08:	0000d158 	.word	0x0000d158
    5e0c:	0000d170 	.word	0x0000d170

00005e10 <gpio_nrfx_manage_callback>:
{
    5e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e14:	4616      	mov	r6, r2
	return port->data;
    5e16:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5e18:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    5e1a:	460c      	mov	r4, r1
    5e1c:	b131      	cbz	r1, 5e2c <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    5e1e:	6863      	ldr	r3, [r4, #4]
    5e20:	b1a3      	cbz	r3, 5e4c <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    5e22:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    5e24:	2b00      	cmp	r3, #0
    5e26:	d03b      	beq.n	5ea0 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e28:	2100      	movs	r1, #0
    5e2a:	e02a      	b.n	5e82 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    5e2c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5ec4 <gpio_nrfx_manage_callback+0xb4>
    5e30:	2324      	movs	r3, #36	; 0x24
    5e32:	4642      	mov	r2, r8
    5e34:	4924      	ldr	r1, [pc, #144]	; (5ec8 <gpio_nrfx_manage_callback+0xb8>)
    5e36:	4825      	ldr	r0, [pc, #148]	; (5ecc <gpio_nrfx_manage_callback+0xbc>)
    5e38:	f006 f996 	bl	c168 <assert_print>
    5e3c:	4824      	ldr	r0, [pc, #144]	; (5ed0 <gpio_nrfx_manage_callback+0xc0>)
    5e3e:	f006 f993 	bl	c168 <assert_print>
    5e42:	2124      	movs	r1, #36	; 0x24
    5e44:	4640      	mov	r0, r8
    5e46:	f006 f988 	bl	c15a <assert_post_action>
    5e4a:	e7e8      	b.n	5e1e <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    5e4c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5ec4 <gpio_nrfx_manage_callback+0xb4>
    5e50:	2325      	movs	r3, #37	; 0x25
    5e52:	4642      	mov	r2, r8
    5e54:	491f      	ldr	r1, [pc, #124]	; (5ed4 <gpio_nrfx_manage_callback+0xc4>)
    5e56:	481d      	ldr	r0, [pc, #116]	; (5ecc <gpio_nrfx_manage_callback+0xbc>)
    5e58:	f006 f986 	bl	c168 <assert_print>
    5e5c:	481e      	ldr	r0, [pc, #120]	; (5ed8 <gpio_nrfx_manage_callback+0xc8>)
    5e5e:	f006 f983 	bl	c168 <assert_print>
    5e62:	2125      	movs	r1, #37	; 0x25
    5e64:	4640      	mov	r0, r8
    5e66:	f006 f978 	bl	c15a <assert_post_action>
    5e6a:	e7da      	b.n	5e22 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    5e6c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5e6e:	606b      	str	r3, [r5, #4]
	return list->tail;
    5e70:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e72:	4294      	cmp	r4, r2
    5e74:	d10f      	bne.n	5e96 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5e76:	607b      	str	r3, [r7, #4]
}
    5e78:	e00d      	b.n	5e96 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    5e7a:	6079      	str	r1, [r7, #4]
}
    5e7c:	e00b      	b.n	5e96 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e7e:	4619      	mov	r1, r3
    5e80:	681b      	ldr	r3, [r3, #0]
    5e82:	b15b      	cbz	r3, 5e9c <gpio_nrfx_manage_callback+0x8c>
    5e84:	429c      	cmp	r4, r3
    5e86:	d1fa      	bne.n	5e7e <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    5e88:	2900      	cmp	r1, #0
    5e8a:	d0ef      	beq.n	5e6c <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    5e8c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5e8e:	600b      	str	r3, [r1, #0]
	return list->tail;
    5e90:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e92:	429c      	cmp	r4, r3
    5e94:	d0f1      	beq.n	5e7a <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    5e96:	2300      	movs	r3, #0
    5e98:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e9a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5e9c:	b903      	cbnz	r3, 5ea0 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    5e9e:	b156      	cbz	r6, 5eb6 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    5ea0:	b166      	cbz	r6, 5ebc <gpio_nrfx_manage_callback+0xac>
	return list->head;
    5ea2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    5ea4:	6023      	str	r3, [r4, #0]
	list->head = node;
    5ea6:	606c      	str	r4, [r5, #4]
	return list->tail;
    5ea8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    5eaa:	b10b      	cbz	r3, 5eb0 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5eac:	2000      	movs	r0, #0
    5eae:	e006      	b.n	5ebe <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    5eb0:	607c      	str	r4, [r7, #4]
    5eb2:	2000      	movs	r0, #0
}
    5eb4:	e003      	b.n	5ebe <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    5eb6:	f06f 0015 	mvn.w	r0, #21
    5eba:	e000      	b.n	5ebe <gpio_nrfx_manage_callback+0xae>
	return 0;
    5ebc:	2000      	movs	r0, #0
}
    5ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ec2:	bf00      	nop
    5ec4:	0000ee6c 	.word	0x0000ee6c
    5ec8:	0000ee9c 	.word	0x0000ee9c
    5ecc:	0000d51c 	.word	0x0000d51c
    5ed0:	0000eea8 	.word	0x0000eea8
    5ed4:	0000eeb8 	.word	0x0000eeb8
    5ed8:	0000eecc 	.word	0x0000eecc

00005edc <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    5edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5ee0:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    5ee4:	0940      	lsrs	r0, r0, #5
    5ee6:	f7ff ff85 	bl	5df4 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    5eea:	b380      	cbz	r0, 5f4e <nrfx_gpio_handler+0x72>
    5eec:	4607      	mov	r7, r0
	return port->data;
    5eee:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    5ef0:	2601      	movs	r6, #1
    5ef2:	40a6      	lsls	r6, r4
	return list->head;
    5ef4:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5ef6:	b11c      	cbz	r4, 5f00 <nrfx_gpio_handler+0x24>
    5ef8:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5efa:	b17c      	cbz	r4, 5f1c <nrfx_gpio_handler+0x40>
	return node->next;
    5efc:	6825      	ldr	r5, [r4, #0]
    5efe:	e00d      	b.n	5f1c <nrfx_gpio_handler+0x40>
    5f00:	4625      	mov	r5, r4
    5f02:	e00b      	b.n	5f1c <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5f04:	6863      	ldr	r3, [r4, #4]
    5f06:	68a2      	ldr	r2, [r4, #8]
    5f08:	4032      	ands	r2, r6
    5f0a:	4621      	mov	r1, r4
    5f0c:	4638      	mov	r0, r7
    5f0e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5f10:	b1dd      	cbz	r5, 5f4a <nrfx_gpio_handler+0x6e>
    5f12:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5f14:	b105      	cbz	r5, 5f18 <nrfx_gpio_handler+0x3c>
	return node->next;
    5f16:	682b      	ldr	r3, [r5, #0]
    5f18:	462c      	mov	r4, r5
    5f1a:	461d      	mov	r5, r3
    5f1c:	b1bc      	cbz	r4, 5f4e <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    5f1e:	68a3      	ldr	r3, [r4, #8]
    5f20:	421e      	tst	r6, r3
    5f22:	d0f5      	beq.n	5f10 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    5f24:	6863      	ldr	r3, [r4, #4]
    5f26:	2b00      	cmp	r3, #0
    5f28:	d1ec      	bne.n	5f04 <nrfx_gpio_handler+0x28>
    5f2a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 5f54 <nrfx_gpio_handler+0x78>
    5f2e:	2345      	movs	r3, #69	; 0x45
    5f30:	4642      	mov	r2, r8
    5f32:	4909      	ldr	r1, [pc, #36]	; (5f58 <nrfx_gpio_handler+0x7c>)
    5f34:	4809      	ldr	r0, [pc, #36]	; (5f5c <nrfx_gpio_handler+0x80>)
    5f36:	f006 f917 	bl	c168 <assert_print>
    5f3a:	4809      	ldr	r0, [pc, #36]	; (5f60 <nrfx_gpio_handler+0x84>)
    5f3c:	f006 f914 	bl	c168 <assert_print>
    5f40:	2145      	movs	r1, #69	; 0x45
    5f42:	4640      	mov	r0, r8
    5f44:	f006 f909 	bl	c15a <assert_post_action>
    5f48:	e7dc      	b.n	5f04 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5f4a:	462b      	mov	r3, r5
    5f4c:	e7e4      	b.n	5f18 <nrfx_gpio_handler+0x3c>
}
    5f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f52:	bf00      	nop
    5f54:	0000ee6c 	.word	0x0000ee6c
    5f58:	0000eee4 	.word	0x0000eee4
    5f5c:	0000d51c 	.word	0x0000d51c
    5f60:	0000eecc 	.word	0x0000eecc

00005f64 <gpio_nrfx_pin_interrupt_configure>:
{
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	b085      	sub	sp, #20
    5f68:	460e      	mov	r6, r1
    5f6a:	4619      	mov	r1, r3
	return port->config;
    5f6c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5f6e:	7b1b      	ldrb	r3, [r3, #12]
    5f70:	f006 041f 	and.w	r4, r6, #31
    5f74:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5f78:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    5f7c:	d022      	beq.n	5fc4 <gpio_nrfx_pin_interrupt_configure+0x60>
    5f7e:	4607      	mov	r7, r0
    5f80:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f82:	2300      	movs	r3, #0
    5f84:	9302      	str	r3, [sp, #8]
    5f86:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    5f88:	4610      	mov	r0, r2
    5f8a:	f006 fc4f 	bl	c82c <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f8e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    5f92:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5f94:	6899      	ldr	r1, [r3, #8]
    5f96:	40f1      	lsrs	r1, r6
    5f98:	f011 0101 	ands.w	r1, r1, #1
    5f9c:	d102      	bne.n	5fa4 <gpio_nrfx_pin_interrupt_configure+0x40>
    5f9e:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    5fa2:	d014      	beq.n	5fce <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5fa4:	2300      	movs	r3, #0
    5fa6:	aa02      	add	r2, sp, #8
    5fa8:	4619      	mov	r1, r3
    5faa:	4620      	mov	r0, r4
    5fac:	f002 f802 	bl	7fb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5fb0:	4b32      	ldr	r3, [pc, #200]	; (607c <gpio_nrfx_pin_interrupt_configure+0x118>)
    5fb2:	4298      	cmp	r0, r3
    5fb4:	d15f      	bne.n	6076 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5fb6:	2101      	movs	r1, #1
    5fb8:	4620      	mov	r0, r4
    5fba:	f002 fa5f 	bl	847c <nrfx_gpiote_trigger_enable>
	return 0;
    5fbe:	2000      	movs	r0, #0
}
    5fc0:	b005      	add	sp, #20
    5fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    5fc4:	4620      	mov	r0, r4
    5fc6:	f002 fb65 	bl	8694 <nrfx_gpiote_trigger_disable>
		return 0;
    5fca:	2000      	movs	r0, #0
    5fcc:	e7f8      	b.n	5fc0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    5fce:	0963      	lsrs	r3, r4, #5
    5fd0:	d01f      	beq.n	6012 <gpio_nrfx_pin_interrupt_configure+0xae>
    5fd2:	2b01      	cmp	r3, #1
    5fd4:	d101      	bne.n	5fda <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    5fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    5fda:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5fde:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fe0:	f011 0f01 	tst.w	r1, #1
    5fe4:	d018      	beq.n	6018 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    5fe6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fea:	0963      	lsrs	r3, r4, #5
    5fec:	d022      	beq.n	6034 <gpio_nrfx_pin_interrupt_configure+0xd0>
    5fee:	2b01      	cmp	r3, #1
    5ff0:	d023      	beq.n	603a <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    5ff2:	4e23      	ldr	r6, [pc, #140]	; (6080 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5ff4:	f240 232e 	movw	r3, #558	; 0x22e
    5ff8:	4632      	mov	r2, r6
    5ffa:	4922      	ldr	r1, [pc, #136]	; (6084 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5ffc:	4822      	ldr	r0, [pc, #136]	; (6088 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5ffe:	f006 f8b3 	bl	c168 <assert_print>
    6002:	f240 212e 	movw	r1, #558	; 0x22e
    6006:	4630      	mov	r0, r6
    6008:	f006 f8a7 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    600c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6010:	e014      	b.n	603c <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    6012:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6016:	e7e0      	b.n	5fda <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6018:	4d19      	ldr	r5, [pc, #100]	; (6080 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    601a:	f240 2329 	movw	r3, #553	; 0x229
    601e:	462a      	mov	r2, r5
    6020:	491a      	ldr	r1, [pc, #104]	; (608c <gpio_nrfx_pin_interrupt_configure+0x128>)
    6022:	4819      	ldr	r0, [pc, #100]	; (6088 <gpio_nrfx_pin_interrupt_configure+0x124>)
    6024:	f006 f8a0 	bl	c168 <assert_print>
    6028:	f240 2129 	movw	r1, #553	; 0x229
    602c:	4628      	mov	r0, r5
    602e:	f006 f894 	bl	c15a <assert_post_action>
    6032:	e7d8      	b.n	5fe6 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    6034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6038:	e000      	b.n	603c <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    603a:	4b15      	ldr	r3, [pc, #84]	; (6090 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    603c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6040:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    6044:	f013 0f01 	tst.w	r3, #1
    6048:	d1ac      	bne.n	5fa4 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    604a:	f10d 0107 	add.w	r1, sp, #7
    604e:	4620      	mov	r0, r4
    6050:	f002 f9a4 	bl	839c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    6054:	4b0f      	ldr	r3, [pc, #60]	; (6094 <gpio_nrfx_pin_interrupt_configure+0x130>)
    6056:	4298      	cmp	r0, r3
    6058:	d003      	beq.n	6062 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    605a:	f10d 0307 	add.w	r3, sp, #7
    605e:	9303      	str	r3, [sp, #12]
    6060:	e7a0      	b.n	5fa4 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    6062:	f10d 0007 	add.w	r0, sp, #7
    6066:	f002 fa01 	bl	846c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    606a:	4b04      	ldr	r3, [pc, #16]	; (607c <gpio_nrfx_pin_interrupt_configure+0x118>)
    606c:	4298      	cmp	r0, r3
    606e:	d0f4      	beq.n	605a <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    6070:	f06f 000b 	mvn.w	r0, #11
    6074:	e7a4      	b.n	5fc0 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    6076:	f06f 0004 	mvn.w	r0, #4
    607a:	e7a1      	b.n	5fc0 <gpio_nrfx_pin_interrupt_configure+0x5c>
    607c:	0bad0000 	.word	0x0bad0000
    6080:	0000eef0 	.word	0x0000eef0
    6084:	0000d6e0 	.word	0x0000d6e0
    6088:	0000d51c 	.word	0x0000d51c
    608c:	0000ef24 	.word	0x0000ef24
    6090:	50000300 	.word	0x50000300
    6094:	0bad0004 	.word	0x0bad0004

00006098 <pin_uninit>:
{
    6098:	b530      	push	{r4, r5, lr}
    609a:	b083      	sub	sp, #12
    609c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    609e:	f10d 0107 	add.w	r1, sp, #7
    60a2:	f002 f97b 	bl	839c <nrfx_gpiote_channel_get>
    60a6:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    60a8:	4620      	mov	r0, r4
    60aa:	f002 fb5b 	bl	8764 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    60ae:	4b0b      	ldr	r3, [pc, #44]	; (60dc <pin_uninit+0x44>)
    60b0:	4298      	cmp	r0, r3
    60b2:	d10f      	bne.n	60d4 <pin_uninit+0x3c>
	if (free_ch) {
    60b4:	429d      	cmp	r5, r3
    60b6:	d005      	beq.n	60c4 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    60b8:	4b08      	ldr	r3, [pc, #32]	; (60dc <pin_uninit+0x44>)
    60ba:	4298      	cmp	r0, r3
    60bc:	d107      	bne.n	60ce <pin_uninit+0x36>
    60be:	2000      	movs	r0, #0
}
    60c0:	b003      	add	sp, #12
    60c2:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    60c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    60c8:	f002 f9c8 	bl	845c <nrfx_gpiote_channel_free>
    60cc:	e7f4      	b.n	60b8 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    60ce:	f06f 0004 	mvn.w	r0, #4
    60d2:	e7f5      	b.n	60c0 <pin_uninit+0x28>
		return -EIO;
    60d4:	f06f 0004 	mvn.w	r0, #4
    60d8:	e7f2      	b.n	60c0 <pin_uninit+0x28>
    60da:	bf00      	nop
    60dc:	0bad0000 	.word	0x0bad0000

000060e0 <gpio_nrfx_pin_configure>:
{
    60e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60e4:	b087      	sub	sp, #28
	return port->config;
    60e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    60ea:	f898 300c 	ldrb.w	r3, [r8, #12]
    60ee:	f001 051f 	and.w	r5, r1, #31
    60f2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    60f6:	2a00      	cmp	r2, #0
    60f8:	d044      	beq.n	6184 <gpio_nrfx_pin_configure+0xa4>
    60fa:	460c      	mov	r4, r1
    60fc:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    60fe:	2600      	movs	r6, #0
    6100:	9603      	str	r6, [sp, #12]
    6102:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    6104:	f10d 0117 	add.w	r1, sp, #23
    6108:	4620      	mov	r0, r4
    610a:	f002 f947 	bl	839c <nrfx_gpiote_channel_get>
    610e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6110:	4633      	mov	r3, r6
    6112:	aa03      	add	r2, sp, #12
    6114:	4631      	mov	r1, r6
    6116:	4628      	mov	r0, r5
    6118:	f001 ff4c 	bl	7fb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    611c:	4b30      	ldr	r3, [pc, #192]	; (61e0 <gpio_nrfx_pin_configure+0x100>)
    611e:	4298      	cmp	r0, r3
    6120:	d15b      	bne.n	61da <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    6122:	4599      	cmp	r9, r3
    6124:	d036      	beq.n	6194 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    6126:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    612a:	d043      	beq.n	61b4 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    612c:	f10d 0103 	add.w	r1, sp, #3
    6130:	4638      	mov	r0, r7
    6132:	f006 fb02 	bl	c73a <get_drive>
		if (rv != 0) {
    6136:	4606      	mov	r6, r0
    6138:	bb40      	cbnz	r0, 618c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    613a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    613e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6142:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    6146:	bf0c      	ite	eq
    6148:	2301      	moveq	r3, #1
    614a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    614c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    6150:	4638      	mov	r0, r7
    6152:	f006 fb38 	bl	c7c6 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    6156:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    615a:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    615e:	d01e      	beq.n	619e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6160:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6164:	2101      	movs	r1, #1
    6166:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    616a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    616e:	2200      	movs	r2, #0
    6170:	a901      	add	r1, sp, #4
    6172:	4628      	mov	r0, r5
    6174:	f002 f812 	bl	819c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6178:	4b19      	ldr	r3, [pc, #100]	; (61e0 <gpio_nrfx_pin_configure+0x100>)
    617a:	4298      	cmp	r0, r3
    617c:	d006      	beq.n	618c <gpio_nrfx_pin_configure+0xac>
    617e:	f06f 0615 	mvn.w	r6, #21
    6182:	e003      	b.n	618c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    6184:	4628      	mov	r0, r5
    6186:	f7ff ff87 	bl	6098 <pin_uninit>
    618a:	4606      	mov	r6, r0
}
    618c:	4630      	mov	r0, r6
    618e:	b007      	add	sp, #28
    6190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    6194:	f89d 0017 	ldrb.w	r0, [sp, #23]
    6198:	f002 f960 	bl	845c <nrfx_gpiote_channel_free>
    619c:	e7c3      	b.n	6126 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    619e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    61a2:	d0e4      	beq.n	616e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    61a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    61a8:	2301      	movs	r3, #1
    61aa:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    61ae:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    61b2:	e7dc      	b.n	616e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    61b4:	4638      	mov	r0, r7
    61b6:	f006 fb06 	bl	c7c6 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    61ba:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    61be:	2300      	movs	r3, #0
    61c0:	461a      	mov	r2, r3
    61c2:	a902      	add	r1, sp, #8
    61c4:	4628      	mov	r0, r5
    61c6:	f001 fef5 	bl	7fb4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    61ca:	4b05      	ldr	r3, [pc, #20]	; (61e0 <gpio_nrfx_pin_configure+0x100>)
    61cc:	4298      	cmp	r0, r3
    61ce:	d101      	bne.n	61d4 <gpio_nrfx_pin_configure+0xf4>
    61d0:	2600      	movs	r6, #0
    61d2:	e7db      	b.n	618c <gpio_nrfx_pin_configure+0xac>
    61d4:	f06f 0615 	mvn.w	r6, #21
    61d8:	e7d8      	b.n	618c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    61da:	f06f 0615 	mvn.w	r6, #21
    61de:	e7d5      	b.n	618c <gpio_nrfx_pin_configure+0xac>
    61e0:	0bad0000 	.word	0x0bad0000

000061e4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    61e4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    61e6:	f002 f92f 	bl	8448 <nrfx_gpiote_is_init>
    61ea:	b108      	cbz	r0, 61f0 <gpio_nrfx_init+0xc>
		return 0;
    61ec:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    61ee:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    61f0:	f002 f900 	bl	83f4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    61f4:	4b08      	ldr	r3, [pc, #32]	; (6218 <gpio_nrfx_init+0x34>)
    61f6:	4298      	cmp	r0, r3
    61f8:	d10a      	bne.n	6210 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    61fa:	2100      	movs	r1, #0
    61fc:	4807      	ldr	r0, [pc, #28]	; (621c <gpio_nrfx_init+0x38>)
    61fe:	f002 f8c7 	bl	8390 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6202:	2200      	movs	r2, #0
    6204:	2105      	movs	r1, #5
    6206:	2006      	movs	r0, #6
    6208:	f7fe f972 	bl	44f0 <z_arm_irq_priority_set>
	return 0;
    620c:	2000      	movs	r0, #0
    620e:	e7ee      	b.n	61ee <gpio_nrfx_init+0xa>
		return -EIO;
    6210:	f06f 0004 	mvn.w	r0, #4
    6214:	e7eb      	b.n	61ee <gpio_nrfx_init+0xa>
    6216:	bf00      	nop
    6218:	0bad0000 	.word	0x0bad0000
    621c:	00005edd 	.word	0x00005edd

00006220 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    6220:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    6222:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    6224:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    6228:	d06f      	beq.n	630a <baudrate_set+0xea>
    622a:	d83a      	bhi.n	62a2 <baudrate_set+0x82>
    622c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    6230:	d06e      	beq.n	6310 <baudrate_set+0xf0>
    6232:	d90a      	bls.n	624a <baudrate_set+0x2a>
    6234:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    6238:	d075      	beq.n	6326 <baudrate_set+0x106>
    623a:	d924      	bls.n	6286 <baudrate_set+0x66>
    623c:	f647 2312 	movw	r3, #31250	; 0x7a12
    6240:	4299      	cmp	r1, r3
    6242:	d12b      	bne.n	629c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    6244:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6248:	e013      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    624a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    624e:	d061      	beq.n	6314 <baudrate_set+0xf4>
    6250:	d907      	bls.n	6262 <baudrate_set+0x42>
    6252:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    6256:	d063      	beq.n	6320 <baudrate_set+0x100>
    6258:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    625c:	d110      	bne.n	6280 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    625e:	4b3c      	ldr	r3, [pc, #240]	; (6350 <baudrate_set+0x130>)
    6260:	e007      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    6262:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    6266:	d058      	beq.n	631a <baudrate_set+0xfa>
    6268:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    626c:	d105      	bne.n	627a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    626e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6272:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    6276:	2000      	movs	r0, #0
    6278:	4770      	bx	lr
	switch (baudrate) {
    627a:	f06f 0015 	mvn.w	r0, #21
    627e:	4770      	bx	lr
    6280:	f06f 0015 	mvn.w	r0, #21
    6284:	4770      	bx	lr
    6286:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    628a:	d04e      	beq.n	632a <baudrate_set+0x10a>
    628c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    6290:	d101      	bne.n	6296 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    6292:	4b30      	ldr	r3, [pc, #192]	; (6354 <baudrate_set+0x134>)
    6294:	e7ed      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    6296:	f06f 0015 	mvn.w	r0, #21
    629a:	4770      	bx	lr
    629c:	f06f 0015 	mvn.w	r0, #21
    62a0:	4770      	bx	lr
    62a2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    62a6:	d042      	beq.n	632e <baudrate_set+0x10e>
    62a8:	d909      	bls.n	62be <baudrate_set+0x9e>
    62aa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    62ae:	d046      	beq.n	633e <baudrate_set+0x11e>
    62b0:	d91f      	bls.n	62f2 <baudrate_set+0xd2>
    62b2:	4b29      	ldr	r3, [pc, #164]	; (6358 <baudrate_set+0x138>)
    62b4:	4299      	cmp	r1, r3
    62b6:	d148      	bne.n	634a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    62b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    62bc:	e7d9      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    62be:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    62c2:	d037      	beq.n	6334 <baudrate_set+0x114>
    62c4:	d905      	bls.n	62d2 <baudrate_set+0xb2>
    62c6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    62ca:	d10f      	bne.n	62ec <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    62cc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    62d0:	e7cf      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    62d2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    62d6:	4299      	cmp	r1, r3
    62d8:	d02e      	beq.n	6338 <baudrate_set+0x118>
    62da:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    62de:	d102      	bne.n	62e6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    62e0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    62e4:	e7c5      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    62e6:	f06f 0015 	mvn.w	r0, #21
    62ea:	4770      	bx	lr
    62ec:	f06f 0015 	mvn.w	r0, #21
    62f0:	4770      	bx	lr
    62f2:	4b1a      	ldr	r3, [pc, #104]	; (635c <baudrate_set+0x13c>)
    62f4:	4299      	cmp	r1, r3
    62f6:	d025      	beq.n	6344 <baudrate_set+0x124>
    62f8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    62fc:	d102      	bne.n	6304 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    62fe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6302:	e7b6      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    6304:	f06f 0015 	mvn.w	r0, #21
    6308:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    630a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    630e:	e7b0      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6310:	4b13      	ldr	r3, [pc, #76]	; (6360 <baudrate_set+0x140>)
    6312:	e7ae      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6314:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6318:	e7ab      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    631a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    631e:	e7a8      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6320:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6324:	e7a5      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    6326:	4b0f      	ldr	r3, [pc, #60]	; (6364 <baudrate_set+0x144>)
    6328:	e7a3      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    632a:	4b0f      	ldr	r3, [pc, #60]	; (6368 <baudrate_set+0x148>)
    632c:	e7a1      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    632e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6332:	e79e      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6334:	4b0d      	ldr	r3, [pc, #52]	; (636c <baudrate_set+0x14c>)
    6336:	e79c      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    6338:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    633c:	e799      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    633e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6342:	e796      	b.n	6272 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6344:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6348:	e793      	b.n	6272 <baudrate_set+0x52>
	switch (baudrate) {
    634a:	f06f 0015 	mvn.w	r0, #21
}
    634e:	4770      	bx	lr
    6350:	0013b000 	.word	0x0013b000
    6354:	004ea000 	.word	0x004ea000
    6358:	000f4240 	.word	0x000f4240
    635c:	0003d090 	.word	0x0003d090
    6360:	00275000 	.word	0x00275000
    6364:	0075c000 	.word	0x0075c000
    6368:	003af000 	.word	0x003af000
    636c:	013a9000 	.word	0x013a9000

00006370 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6374:	4605      	mov	r5, r0
    6376:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    6378:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    637c:	f006 fde0 	bl	cf40 <k_is_in_isr>
    6380:	b920      	cbnz	r0, 638c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    6382:	4b16      	ldr	r3, [pc, #88]	; (63dc <uarte_nrfx_poll_out+0x6c>)
    6384:	781b      	ldrb	r3, [r3, #0]
    6386:	b143      	cbz	r3, 639a <uarte_nrfx_poll_out+0x2a>
    6388:	2300      	movs	r3, #0
    638a:	e000      	b.n	638e <uarte_nrfx_poll_out+0x1e>
    638c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    638e:	b953      	cbnz	r3, 63a6 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6390:	4628      	mov	r0, r5
    6392:	f006 fb54 	bl	ca3e <wait_tx_ready>
    6396:	4606      	mov	r6, r0
    6398:	e013      	b.n	63c2 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    639a:	2301      	movs	r3, #1
    639c:	e7f7      	b.n	638e <uarte_nrfx_poll_out+0x1e>
    639e:	f384 8811 	msr	BASEPRI, r4
    63a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    63a6:	f04f 0320 	mov.w	r3, #32
    63aa:	f3ef 8411 	mrs	r4, BASEPRI
    63ae:	f383 8812 	msr	BASEPRI_MAX, r3
    63b2:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    63b6:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    63b8:	4628      	mov	r0, r5
    63ba:	f006 faf2 	bl	c9a2 <is_tx_ready>
    63be:	2800      	cmp	r0, #0
    63c0:	d0ed      	beq.n	639e <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    63c2:	4641      	mov	r1, r8
    63c4:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    63c8:	2201      	movs	r2, #1
    63ca:	4628      	mov	r0, r5
    63cc:	f006 fb03 	bl	c9d6 <tx_start>
	__asm__ volatile(
    63d0:	f386 8811 	msr	BASEPRI, r6
    63d4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    63d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63dc:	2000145a 	.word	0x2000145a

000063e0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    63e0:	b530      	push	{r4, r5, lr}
    63e2:	b085      	sub	sp, #20
    63e4:	4604      	mov	r4, r0
    63e6:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    63e8:	f101 0012 	add.w	r0, r1, #18
    63ec:	f002 fa46 	bl	887c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    63f0:	4b11      	ldr	r3, [pc, #68]	; (6438 <endtx_stoptx_ppi_init+0x58>)
    63f2:	4298      	cmp	r0, r3
    63f4:	d112      	bne.n	641c <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    63f6:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    63f8:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    63fc:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    63fe:	4a0f      	ldr	r2, [pc, #60]	; (643c <endtx_stoptx_ppi_init+0x5c>)
    6400:	33a2      	adds	r3, #162	; 0xa2
    6402:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6406:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    640a:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    640c:	7ca9      	ldrb	r1, [r5, #18]
    640e:	2301      	movs	r3, #1
    6410:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    6412:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6416:	2000      	movs	r0, #0
}
    6418:	b005      	add	sp, #20
    641a:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    641c:	4b08      	ldr	r3, [pc, #32]	; (6440 <endtx_stoptx_ppi_init+0x60>)
    641e:	9302      	str	r3, [sp, #8]
    6420:	2000      	movs	r0, #0
    6422:	9001      	str	r0, [sp, #4]
    6424:	9000      	str	r0, [sp, #0]
    6426:	4603      	mov	r3, r0
    6428:	2201      	movs	r2, #1
    642a:	4906      	ldr	r1, [pc, #24]	; (6444 <endtx_stoptx_ppi_init+0x64>)
    642c:	f006 fb2e 	bl	ca8c <z_log_msg2_runtime_create>
		return -EIO;
    6430:	f06f 0004 	mvn.w	r0, #4
    6434:	e7f0      	b.n	6418 <endtx_stoptx_ppi_init+0x38>
    6436:	bf00      	nop
    6438:	0bad0000 	.word	0x0bad0000
    643c:	4001f000 	.word	0x4001f000
    6440:	0000ef9c 	.word	0x0000ef9c
    6444:	0000d398 	.word	0x0000d398

00006448 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6448:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    644c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6450:	4b01      	ldr	r3, [pc, #4]	; (6458 <set_comparator+0x10>)
    6452:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6456:	4770      	bx	lr
    6458:	40011000 	.word	0x40011000

0000645c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    645c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6460:	4b01      	ldr	r3, [pc, #4]	; (6468 <get_comparator+0xc>)
    6462:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6466:	4770      	bx	lr
    6468:	40011000 	.word	0x40011000

0000646c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    646c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6470:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6472:	4a02      	ldr	r2, [pc, #8]	; (647c <event_enable+0x10>)
    6474:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6478:	4770      	bx	lr
    647a:	bf00      	nop
    647c:	40011000 	.word	0x40011000

00006480 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6484:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6486:	4a02      	ldr	r2, [pc, #8]	; (6490 <event_disable+0x10>)
    6488:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    648c:	4770      	bx	lr
    648e:	bf00      	nop
    6490:	40011000 	.word	0x40011000

00006494 <counter>:
     return p_reg->COUNTER;
    6494:	4b01      	ldr	r3, [pc, #4]	; (649c <counter+0x8>)
    6496:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    649a:	4770      	bx	lr
    649c:	40011000 	.word	0x40011000

000064a0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    64a0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    64a2:	2301      	movs	r3, #1
    64a4:	4083      	lsls	r3, r0
    64a6:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    64aa:	4a10      	ldr	r2, [pc, #64]	; (64ec <compare_int_lock+0x4c>)
    64ac:	f3bf 8f5b 	dmb	ish
    64b0:	e852 1f00 	ldrex	r1, [r2]
    64b4:	ea01 0e0c 	and.w	lr, r1, ip
    64b8:	e842 e400 	strex	r4, lr, [r2]
    64bc:	2c00      	cmp	r4, #0
    64be:	d1f7      	bne.n	64b0 <compare_int_lock+0x10>
    64c0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    64c8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    64cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    64d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    64d4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    64d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64dc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    64e0:	420b      	tst	r3, r1
}
    64e2:	bf14      	ite	ne
    64e4:	2001      	movne	r0, #1
    64e6:	2000      	moveq	r0, #0
    64e8:	bd10      	pop	{r4, pc}
    64ea:	bf00      	nop
    64ec:	20000d60 	.word	0x20000d60

000064f0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    64f0:	b570      	push	{r4, r5, r6, lr}
    64f2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    64f4:	f006 fb6c 	bl	cbd0 <full_int_lock>
    64f8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    64fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    64fe:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6500:	4a17      	ldr	r2, [pc, #92]	; (6560 <channel_processing_check_and_clear+0x70>)
    6502:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6506:	4213      	tst	r3, r2
    6508:	d105      	bne.n	6516 <channel_processing_check_and_clear+0x26>
	bool result = false;
    650a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    650c:	4628      	mov	r0, r5
    650e:	f006 fb68 	bl	cbe2 <full_int_unlock>

	return result;
}
    6512:	4630      	mov	r0, r6
    6514:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6516:	2301      	movs	r3, #1
    6518:	40a3      	lsls	r3, r4
    651a:	43db      	mvns	r3, r3
    651c:	4a11      	ldr	r2, [pc, #68]	; (6564 <channel_processing_check_and_clear+0x74>)
    651e:	f3bf 8f5b 	dmb	ish
    6522:	e852 1f00 	ldrex	r1, [r2]
    6526:	ea01 0003 	and.w	r0, r1, r3
    652a:	e842 0600 	strex	r6, r0, [r2]
    652e:	2e00      	cmp	r6, #0
    6530:	d1f7      	bne.n	6522 <channel_processing_check_and_clear+0x32>
    6532:	f3bf 8f5b 	dmb	ish
    6536:	b959      	cbnz	r1, 6550 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6538:	f104 0350 	add.w	r3, r4, #80	; 0x50
    653c:	009b      	lsls	r3, r3, #2
    653e:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6540:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6544:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6548:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    654a:	b113      	cbz	r3, 6552 <channel_processing_check_and_clear+0x62>
    654c:	2301      	movs	r3, #1
    654e:	e000      	b.n	6552 <channel_processing_check_and_clear+0x62>
    6550:	2301      	movs	r3, #1
		if (result) {
    6552:	461e      	mov	r6, r3
    6554:	2b00      	cmp	r3, #0
    6556:	d0d9      	beq.n	650c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6558:	4620      	mov	r0, r4
    655a:	f006 fb2a 	bl	cbb2 <event_clear>
    655e:	e7d5      	b.n	650c <channel_processing_check_and_clear+0x1c>
    6560:	40011000 	.word	0x40011000
    6564:	20000d5c 	.word	0x20000d5c

00006568 <compare_int_unlock>:
	if (key) {
    6568:	b901      	cbnz	r1, 656c <compare_int_unlock+0x4>
}
    656a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    656c:	2301      	movs	r3, #1
    656e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6570:	4a11      	ldr	r2, [pc, #68]	; (65b8 <compare_int_unlock+0x50>)
    6572:	f3bf 8f5b 	dmb	ish
    6576:	e852 1f00 	ldrex	r1, [r2]
    657a:	4319      	orrs	r1, r3
    657c:	e842 1c00 	strex	ip, r1, [r2]
    6580:	f1bc 0f00 	cmp.w	ip, #0
    6584:	d1f7      	bne.n	6576 <compare_int_unlock+0xe>
    6586:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    658a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    658e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6590:	4a0a      	ldr	r2, [pc, #40]	; (65bc <compare_int_unlock+0x54>)
    6592:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6596:	f3bf 8f5b 	dmb	ish
    659a:	4b09      	ldr	r3, [pc, #36]	; (65c0 <compare_int_unlock+0x58>)
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    65a2:	fa23 f000 	lsr.w	r0, r3, r0
    65a6:	f010 0f01 	tst.w	r0, #1
    65aa:	d0de      	beq.n	656a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65ac:	4b05      	ldr	r3, [pc, #20]	; (65c4 <compare_int_unlock+0x5c>)
    65ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    65b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    65b6:	e7d8      	b.n	656a <compare_int_unlock+0x2>
    65b8:	20000d60 	.word	0x20000d60
    65bc:	40011000 	.word	0x40011000
    65c0:	20000d5c 	.word	0x20000d5c
    65c4:	e000e100 	.word	0xe000e100

000065c8 <sys_clock_timeout_handler>:
{
    65c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65cc:	4607      	mov	r7, r0
    65ce:	4614      	mov	r4, r2
    65d0:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    65d2:	4610      	mov	r0, r2
    65d4:	4619      	mov	r1, r3
    65d6:	f006 faf8 	bl	cbca <absolute_time_to_cc>
    65da:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    65dc:	4b15      	ldr	r3, [pc, #84]	; (6634 <sys_clock_timeout_handler+0x6c>)
    65de:	681a      	ldr	r2, [r3, #0]
    65e0:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    65e2:	601c      	str	r4, [r3, #0]
    65e4:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    65e6:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    65ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    65ee:	d309      	bcc.n	6604 <sys_clock_timeout_handler+0x3c>
	return false;
    65f0:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    65f2:	f004 ff65 	bl	b4c0 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    65f6:	4638      	mov	r0, r7
    65f8:	f7ff ff30 	bl	645c <get_comparator>
    65fc:	42a8      	cmp	r0, r5
    65fe:	d00e      	beq.n	661e <sys_clock_timeout_handler+0x56>
}
    6600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6604:	4b0c      	ldr	r3, [pc, #48]	; (6638 <sys_clock_timeout_handler+0x70>)
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	0a1a      	lsrs	r2, r3, #8
    660a:	061b      	lsls	r3, r3, #24
    660c:	eb15 0803 	adds.w	r8, r5, r3
    6610:	f142 0900 	adc.w	r9, r2, #0
    6614:	4b09      	ldr	r3, [pc, #36]	; (663c <sys_clock_timeout_handler+0x74>)
    6616:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    661a:	2401      	movs	r4, #1
    661c:	e7e9      	b.n	65f2 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    661e:	b11c      	cbz	r4, 6628 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    6620:	4638      	mov	r0, r7
    6622:	f7ff ff23 	bl	646c <event_enable>
}
    6626:	e7eb      	b.n	6600 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6628:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    662c:	4638      	mov	r0, r7
    662e:	f7ff ff0b 	bl	6448 <set_comparator>
    6632:	e7f5      	b.n	6620 <sys_clock_timeout_handler+0x58>
    6634:	20000538 	.word	0x20000538
    6638:	20000d64 	.word	0x20000d64
    663c:	20000520 	.word	0x20000520

00006640 <z_nrf_rtc_timer_read>:
{
    6640:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6642:	4b0d      	ldr	r3, [pc, #52]	; (6678 <z_nrf_rtc_timer_read+0x38>)
    6644:	681c      	ldr	r4, [r3, #0]
    6646:	0a25      	lsrs	r5, r4, #8
    6648:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    664a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    664e:	f7ff ff21 	bl	6494 <counter>
    6652:	4603      	mov	r3, r0
	val += cntr;
    6654:	1900      	adds	r0, r0, r4
    6656:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    665a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    665e:	d20a      	bcs.n	6676 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6660:	4b06      	ldr	r3, [pc, #24]	; (667c <z_nrf_rtc_timer_read+0x3c>)
    6662:	e9d3 2300 	ldrd	r2, r3, [r3]
    6666:	4290      	cmp	r0, r2
    6668:	eb71 0303 	sbcs.w	r3, r1, r3
    666c:	d203      	bcs.n	6676 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    666e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6672:	f141 0100 	adc.w	r1, r1, #0
}
    6676:	bd38      	pop	{r3, r4, r5, pc}
    6678:	20000d64 	.word	0x20000d64
    667c:	20000520 	.word	0x20000520

00006680 <compare_set_nolocks>:
{
    6680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6682:	4606      	mov	r6, r0
    6684:	4614      	mov	r4, r2
    6686:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6688:	4610      	mov	r0, r2
    668a:	4619      	mov	r1, r3
    668c:	f006 fa9d 	bl	cbca <absolute_time_to_cc>
    6690:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6692:	f7ff ffd5 	bl	6640 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6696:	42a0      	cmp	r0, r4
    6698:	eb71 0305 	sbcs.w	r3, r1, r5
    669c:	d21d      	bcs.n	66da <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    669e:	1a23      	subs	r3, r4, r0
    66a0:	eb65 0101 	sbc.w	r1, r5, r1
    66a4:	4a1b      	ldr	r2, [pc, #108]	; (6714 <compare_set_nolocks+0x94>)
    66a6:	4293      	cmp	r3, r2
    66a8:	f171 0300 	sbcs.w	r3, r1, #0
    66ac:	d22f      	bcs.n	670e <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    66ae:	4b1a      	ldr	r3, [pc, #104]	; (6718 <compare_set_nolocks+0x98>)
    66b0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    66b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    66b8:	42ab      	cmp	r3, r5
    66ba:	bf08      	it	eq
    66bc:	42a2      	cmpeq	r2, r4
    66be:	d01a      	beq.n	66f6 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    66c0:	4639      	mov	r1, r7
    66c2:	4630      	mov	r0, r6
    66c4:	f006 fa92 	bl	cbec <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    66c8:	4639      	mov	r1, r7
    66ca:	f006 fa6e 	bl	cbaa <counter_sub>
    66ce:	1900      	adds	r0, r0, r4
    66d0:	f145 0300 	adc.w	r3, r5, #0
    66d4:	4604      	mov	r4, r0
    66d6:	461d      	mov	r5, r3
    66d8:	e00d      	b.n	66f6 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    66da:	2301      	movs	r3, #1
    66dc:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    66de:	4a0f      	ldr	r2, [pc, #60]	; (671c <compare_set_nolocks+0x9c>)
    66e0:	f3bf 8f5b 	dmb	ish
    66e4:	e852 1f00 	ldrex	r1, [r2]
    66e8:	4319      	orrs	r1, r3
    66ea:	e842 1000 	strex	r0, r1, [r2]
    66ee:	2800      	cmp	r0, #0
    66f0:	d1f8      	bne.n	66e4 <compare_set_nolocks+0x64>
    66f2:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    66f6:	4b08      	ldr	r3, [pc, #32]	; (6718 <compare_set_nolocks+0x98>)
    66f8:	0132      	lsls	r2, r6, #4
    66fa:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    66fe:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6702:	9906      	ldr	r1, [sp, #24]
    6704:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    6706:	9b07      	ldr	r3, [sp, #28]
    6708:	6073      	str	r3, [r6, #4]
	return ret;
    670a:	2000      	movs	r0, #0
}
    670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    670e:	f06f 0015 	mvn.w	r0, #21
    6712:	e7fb      	b.n	670c <compare_set_nolocks+0x8c>
    6714:	01000001 	.word	0x01000001
    6718:	20000528 	.word	0x20000528
    671c:	20000d5c 	.word	0x20000d5c

00006720 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6720:	b530      	push	{r4, r5, lr}
    6722:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    6724:	2300      	movs	r3, #0
    6726:	4a1d      	ldr	r2, [pc, #116]	; (679c <sys_clock_driver_init+0x7c>)
    6728:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    672c:	2b00      	cmp	r3, #0
    672e:	dd24      	ble.n	677a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    6730:	4c1a      	ldr	r4, [pc, #104]	; (679c <sys_clock_driver_init+0x7c>)
    6732:	2502      	movs	r5, #2
    6734:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6738:	4b19      	ldr	r3, [pc, #100]	; (67a0 <sys_clock_driver_init+0x80>)
    673a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    673e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6742:	2200      	movs	r2, #0
    6744:	2101      	movs	r1, #1
    6746:	2011      	movs	r0, #17
    6748:	f7fd fed2 	bl	44f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    674c:	2011      	movs	r0, #17
    674e:	f7fd feb3 	bl	44b8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6752:	2301      	movs	r3, #1
    6754:	60a3      	str	r3, [r4, #8]
    6756:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6758:	4a12      	ldr	r2, [pc, #72]	; (67a4 <sys_clock_driver_init+0x84>)
    675a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    675c:	2400      	movs	r4, #0
    675e:	9401      	str	r4, [sp, #4]
    6760:	4b11      	ldr	r3, [pc, #68]	; (67a8 <sys_clock_driver_init+0x88>)
    6762:	9300      	str	r3, [sp, #0]
    6764:	4a11      	ldr	r2, [pc, #68]	; (67ac <sys_clock_driver_init+0x8c>)
    6766:	2300      	movs	r3, #0
    6768:	4620      	mov	r0, r4
    676a:	f006 fa7a 	bl	cc62 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    676e:	4628      	mov	r0, r5
    6770:	f7ff fabc 	bl	5cec <z_nrf_clock_control_lf_on>

	return 0;
}
    6774:	4620      	mov	r0, r4
    6776:	b003      	add	sp, #12
    6778:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    677a:	4a0d      	ldr	r2, [pc, #52]	; (67b0 <sys_clock_driver_init+0x90>)
    677c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6788:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    678c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6790:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6792:	4902      	ldr	r1, [pc, #8]	; (679c <sys_clock_driver_init+0x7c>)
    6794:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6798:	3301      	adds	r3, #1
    679a:	e7c7      	b.n	672c <sys_clock_driver_init+0xc>
    679c:	40011000 	.word	0x40011000
    67a0:	e000e100 	.word	0xe000e100
    67a4:	20000d60 	.word	0x20000d60
    67a8:	000065c9 	.word	0x000065c9
    67ac:	007fffff 	.word	0x007fffff
    67b0:	20000528 	.word	0x20000528

000067b4 <process_channel>:
{
    67b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67b8:	b082      	sub	sp, #8
    67ba:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    67bc:	f7ff fe98 	bl	64f0 <channel_processing_check_and_clear>
    67c0:	b910      	cbnz	r0, 67c8 <process_channel+0x14>
}
    67c2:	b002      	add	sp, #8
    67c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    67c8:	f7ff ff3a 	bl	6640 <z_nrf_rtc_timer_read>
    67cc:	4682      	mov	sl, r0
    67ce:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    67d0:	f006 f9fe 	bl	cbd0 <full_int_lock>
    67d4:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    67d6:	4b13      	ldr	r3, [pc, #76]	; (6824 <process_channel+0x70>)
    67d8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    67dc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    67e0:	45c2      	cmp	sl, r8
    67e2:	eb76 0309 	sbcs.w	r3, r6, r9
    67e6:	d20b      	bcs.n	6800 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    67e8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    67ea:	4628      	mov	r0, r5
    67ec:	f006 f9f9 	bl	cbe2 <full_int_unlock>
		if (handler) {
    67f0:	2e00      	cmp	r6, #0
    67f2:	d0e6      	beq.n	67c2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    67f4:	9700      	str	r7, [sp, #0]
    67f6:	4642      	mov	r2, r8
    67f8:	464b      	mov	r3, r9
    67fa:	4620      	mov	r0, r4
    67fc:	47b0      	blx	r6
}
    67fe:	e7e0      	b.n	67c2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    6800:	4a08      	ldr	r2, [pc, #32]	; (6824 <process_channel+0x70>)
    6802:	0123      	lsls	r3, r4, #4
    6804:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6808:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    680a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    680c:	2000      	movs	r0, #0
    680e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6818:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    681c:	4620      	mov	r0, r4
    681e:	f7ff fe2f 	bl	6480 <event_disable>
    6822:	e7e2      	b.n	67ea <process_channel+0x36>
    6824:	20000528 	.word	0x20000528

00006828 <rtc_nrf_isr>:
{
    6828:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    682a:	4b0e      	ldr	r3, [pc, #56]	; (6864 <rtc_nrf_isr+0x3c>)
    682c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6830:	f013 0f02 	tst.w	r3, #2
    6834:	d00d      	beq.n	6852 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6836:	4b0b      	ldr	r3, [pc, #44]	; (6864 <rtc_nrf_isr+0x3c>)
    6838:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    683c:	b14b      	cbz	r3, 6852 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    683e:	4b09      	ldr	r3, [pc, #36]	; (6864 <rtc_nrf_isr+0x3c>)
    6840:	2200      	movs	r2, #0
    6842:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6846:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    684a:	4a07      	ldr	r2, [pc, #28]	; (6868 <rtc_nrf_isr+0x40>)
    684c:	6813      	ldr	r3, [r2, #0]
    684e:	3301      	adds	r3, #1
    6850:	6013      	str	r3, [r2, #0]
{
    6852:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6854:	2c00      	cmp	r4, #0
    6856:	dd00      	ble.n	685a <rtc_nrf_isr+0x32>
}
    6858:	bd10      	pop	{r4, pc}
		process_channel(chan);
    685a:	4620      	mov	r0, r4
    685c:	f7ff ffaa 	bl	67b4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6860:	3401      	adds	r4, #1
    6862:	e7f7      	b.n	6854 <rtc_nrf_isr+0x2c>
    6864:	40011000 	.word	0x40011000
    6868:	20000d64 	.word	0x20000d64

0000686c <sys_clock_set_timeout>:
{
    686c:	b510      	push	{r4, lr}
    686e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6870:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6874:	d006      	beq.n	6884 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6876:	2801      	cmp	r0, #1
    6878:	dd06      	ble.n	6888 <sys_clock_set_timeout+0x1c>
    687a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    687e:	da05      	bge.n	688c <sys_clock_set_timeout+0x20>
    6880:	1e44      	subs	r4, r0, #1
    6882:	e004      	b.n	688e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6884:	480f      	ldr	r0, [pc, #60]	; (68c4 <sys_clock_set_timeout+0x58>)
    6886:	e7f8      	b.n	687a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6888:	2400      	movs	r4, #0
    688a:	e000      	b.n	688e <sys_clock_set_timeout+0x22>
    688c:	4c0d      	ldr	r4, [pc, #52]	; (68c4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    688e:	f7ff fed7 	bl	6640 <z_nrf_rtc_timer_read>
    6892:	4b0d      	ldr	r3, [pc, #52]	; (68c8 <sys_clock_set_timeout+0x5c>)
    6894:	6819      	ldr	r1, [r3, #0]
    6896:	685b      	ldr	r3, [r3, #4]
    6898:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    689a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    689e:	d300      	bcc.n	68a2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    68a0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    68a2:	4420      	add	r0, r4
    68a4:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    68a6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    68aa:	d300      	bcc.n	68ae <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    68ac:	4a05      	ldr	r2, [pc, #20]	; (68c4 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    68ae:	2000      	movs	r0, #0
    68b0:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    68b2:	9001      	str	r0, [sp, #4]
    68b4:	4905      	ldr	r1, [pc, #20]	; (68cc <sys_clock_set_timeout+0x60>)
    68b6:	9100      	str	r1, [sp, #0]
    68b8:	f143 0300 	adc.w	r3, r3, #0
    68bc:	f006 f9d1 	bl	cc62 <compare_set>
}
    68c0:	b002      	add	sp, #8
    68c2:	bd10      	pop	{r4, pc}
    68c4:	007fffff 	.word	0x007fffff
    68c8:	20000538 	.word	0x20000538
    68cc:	000065c9 	.word	0x000065c9

000068d0 <sys_clock_elapsed>:
{
    68d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    68d2:	f7ff feb5 	bl	6640 <z_nrf_rtc_timer_read>
    68d6:	4b02      	ldr	r3, [pc, #8]	; (68e0 <sys_clock_elapsed+0x10>)
    68d8:	681b      	ldr	r3, [r3, #0]
}
    68da:	1ac0      	subs	r0, r0, r3
    68dc:	bd08      	pop	{r3, pc}
    68de:	bf00      	nop
    68e0:	20000538 	.word	0x20000538

000068e4 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    68e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68e8:	460c      	mov	r4, r1
    68ea:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    68ec:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    68f0:	d002      	beq.n	68f8 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    68f2:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    68f6:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    68f8:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    68fc:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    6900:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    6904:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    6908:	f010 0f20 	tst.w	r0, #32
    690c:	d01d      	beq.n	694a <nrf_pin_configure+0x66>
    690e:	b1fb      	cbz	r3, 6950 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    6910:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6914:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6918:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    691a:	f013 0f01 	tst.w	r3, #1
    691e:	d019      	beq.n	6954 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    6920:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6924:	096d      	lsrs	r5, r5, #5
    6926:	d023      	beq.n	6970 <nrf_pin_configure+0x8c>
    6928:	bb2d      	cbnz	r5, 6976 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    692a:	4d19      	ldr	r5, [pc, #100]	; (6990 <nrf_pin_configure+0xac>)
    692c:	f240 232e 	movw	r3, #558	; 0x22e
    6930:	462a      	mov	r2, r5
    6932:	4918      	ldr	r1, [pc, #96]	; (6994 <nrf_pin_configure+0xb0>)
    6934:	4818      	ldr	r0, [pc, #96]	; (6998 <nrf_pin_configure+0xb4>)
    6936:	f005 fc17 	bl	c168 <assert_print>
    693a:	f240 212e 	movw	r1, #558	; 0x22e
    693e:	4628      	mov	r0, r5
    6940:	f005 fc0b 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6948:	e016      	b.n	6978 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    694a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    694e:	e7e1      	b.n	6914 <nrf_pin_configure+0x30>
    switch (port)
    6950:	2300      	movs	r3, #0
    6952:	e7df      	b.n	6914 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6954:	4e0e      	ldr	r6, [pc, #56]	; (6990 <nrf_pin_configure+0xac>)
    6956:	f240 2329 	movw	r3, #553	; 0x229
    695a:	4632      	mov	r2, r6
    695c:	490f      	ldr	r1, [pc, #60]	; (699c <nrf_pin_configure+0xb8>)
    695e:	480e      	ldr	r0, [pc, #56]	; (6998 <nrf_pin_configure+0xb4>)
    6960:	f005 fc02 	bl	c168 <assert_print>
    6964:	f240 2129 	movw	r1, #553	; 0x229
    6968:	4630      	mov	r0, r6
    696a:	f005 fbf6 	bl	c15a <assert_post_action>
    696e:	e7d7      	b.n	6920 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    6970:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6974:	e000      	b.n	6978 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6976:	4b0a      	ldr	r3, [pc, #40]	; (69a0 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6978:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    697c:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6980:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    6984:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6988:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    698c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6990:	0000eef0 	.word	0x0000eef0
    6994:	0000d6e0 	.word	0x0000d6e0
    6998:	0000d51c 	.word	0x0000d51c
    699c:	0000ef24 	.word	0x0000ef24
    69a0:	50000300 	.word	0x50000300

000069a4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    69a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69a8:	4605      	mov	r5, r0
    69aa:	460e      	mov	r6, r1
    69ac:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    69ae:	2400      	movs	r4, #0
    69b0:	e04e      	b.n	6a50 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    69b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69b6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    69ba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    69be:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    69c2:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    69c6:	f013 0f20 	tst.w	r3, #32
    69ca:	d01f      	beq.n	6a0c <pinctrl_configure_pins+0x68>
    69cc:	b109      	cbz	r1, 69d2 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    69ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    69d2:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    69d6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    69d8:	f012 0f01 	tst.w	r2, #1
    69dc:	d019      	beq.n	6a12 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    69de:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    69e2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    69e6:	d023      	beq.n	6a30 <pinctrl_configure_pins+0x8c>
    69e8:	bb2b      	cbnz	r3, 6a36 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    69ea:	f8df 9344 	ldr.w	r9, [pc, #836]	; 6d30 <pinctrl_configure_pins+0x38c>
    69ee:	f240 232e 	movw	r3, #558	; 0x22e
    69f2:	464a      	mov	r2, r9
    69f4:	49cf      	ldr	r1, [pc, #828]	; (6d34 <pinctrl_configure_pins+0x390>)
    69f6:	48d0      	ldr	r0, [pc, #832]	; (6d38 <pinctrl_configure_pins+0x394>)
    69f8:	f005 fbb6 	bl	c168 <assert_print>
    69fc:	f240 212e 	movw	r1, #558	; 0x22e
    6a00:	4648      	mov	r0, r9
    6a02:	f005 fbaa 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6a06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a0a:	e015      	b.n	6a38 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    6a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a10:	e7df      	b.n	69d2 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6a12:	f8df a31c 	ldr.w	sl, [pc, #796]	; 6d30 <pinctrl_configure_pins+0x38c>
    6a16:	f240 2329 	movw	r3, #553	; 0x229
    6a1a:	4652      	mov	r2, sl
    6a1c:	49c7      	ldr	r1, [pc, #796]	; (6d3c <pinctrl_configure_pins+0x398>)
    6a1e:	48c6      	ldr	r0, [pc, #792]	; (6d38 <pinctrl_configure_pins+0x394>)
    6a20:	f005 fba2 	bl	c168 <assert_print>
    6a24:	f240 2129 	movw	r1, #553	; 0x229
    6a28:	4650      	mov	r0, sl
    6a2a:	f005 fb96 	bl	c15a <assert_post_action>
    6a2e:	e7d6      	b.n	69de <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    6a30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6a34:	e000      	b.n	6a38 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6a36:	4ac2      	ldr	r2, [pc, #776]	; (6d40 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6a38:	2101      	movs	r1, #1
    6a3a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6a3e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6a42:	460a      	mov	r2, r1
    6a44:	f855 0008 	ldr.w	r0, [r5, r8]
    6a48:	f7ff ff4c 	bl	68e4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6a4c:	3401      	adds	r4, #1
    6a4e:	b2e4      	uxtb	r4, r4
    6a50:	42b4      	cmp	r4, r6
    6a52:	f080 841e 	bcs.w	7292 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    6a56:	ea4f 0884 	mov.w	r8, r4, lsl #2
    6a5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6a5e:	0c1a      	lsrs	r2, r3, #16
    6a60:	2a22      	cmp	r2, #34	; 0x22
    6a62:	f200 8418 	bhi.w	7296 <pinctrl_configure_pins+0x8f2>
    6a66:	a101      	add	r1, pc, #4	; (adr r1, 6a6c <pinctrl_configure_pins+0xc8>)
    6a68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    6a6c:	000069b3 	.word	0x000069b3
    6a70:	00006af9 	.word	0x00006af9
    6a74:	00006b0f 	.word	0x00006b0f
    6a78:	00006baf 	.word	0x00006baf
    6a7c:	00006bc5 	.word	0x00006bc5
    6a80:	00006c65 	.word	0x00006c65
    6a84:	00006d05 	.word	0x00006d05
    6a88:	00007297 	.word	0x00007297
    6a8c:	00007297 	.word	0x00007297
    6a90:	00007297 	.word	0x00007297
    6a94:	00007297 	.word	0x00007297
    6a98:	00006d1b 	.word	0x00006d1b
    6a9c:	00006d45 	.word	0x00006d45
    6aa0:	00007297 	.word	0x00007297
    6aa4:	00007297 	.word	0x00007297
    6aa8:	00007297 	.word	0x00007297
    6aac:	00007297 	.word	0x00007297
    6ab0:	00007297 	.word	0x00007297
    6ab4:	00007297 	.word	0x00007297
    6ab8:	00007297 	.word	0x00007297
    6abc:	00007297 	.word	0x00007297
    6ac0:	00007297 	.word	0x00007297
    6ac4:	00006d5b 	.word	0x00006d5b
    6ac8:	00006e81 	.word	0x00006e81
    6acc:	00006fa7 	.word	0x00006fa7
    6ad0:	000070e3 	.word	0x000070e3
    6ad4:	00007297 	.word	0x00007297
    6ad8:	00007297 	.word	0x00007297
    6adc:	00007297 	.word	0x00007297
    6ae0:	00007209 	.word	0x00007209
    6ae4:	0000721f 	.word	0x0000721f
    6ae8:	00007235 	.word	0x00007235
    6aec:	0000724b 	.word	0x0000724b
    6af0:	00007263 	.word	0x00007263
    6af4:	0000727b 	.word	0x0000727b
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6afc:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6b00:	2200      	movs	r2, #0
    6b02:	4611      	mov	r1, r2
    6b04:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6b08:	f7ff feec 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6b0c:	e79e      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b12:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6b16:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6b1a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6b1e:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6b22:	f013 0f20 	tst.w	r3, #32
    6b26:	d01f      	beq.n	6b68 <pinctrl_configure_pins+0x1c4>
    6b28:	b30a      	cbz	r2, 6b6e <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    6b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6b2e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6b32:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b34:	f013 0f01 	tst.w	r3, #1
    6b38:	d01b      	beq.n	6b72 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    6b3a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b3e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6b42:	d025      	beq.n	6b90 <pinctrl_configure_pins+0x1ec>
    6b44:	bb3b      	cbnz	r3, 6b96 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    6b46:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 6d30 <pinctrl_configure_pins+0x38c>
    6b4a:	f240 232e 	movw	r3, #558	; 0x22e
    6b4e:	464a      	mov	r2, r9
    6b50:	4978      	ldr	r1, [pc, #480]	; (6d34 <pinctrl_configure_pins+0x390>)
    6b52:	4879      	ldr	r0, [pc, #484]	; (6d38 <pinctrl_configure_pins+0x394>)
    6b54:	f005 fb08 	bl	c168 <assert_print>
    6b58:	f240 212e 	movw	r1, #558	; 0x22e
    6b5c:	4648      	mov	r0, r9
    6b5e:	f005 fafc 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6b62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b66:	e017      	b.n	6b98 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    6b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b6c:	e7df      	b.n	6b2e <pinctrl_configure_pins+0x18a>
    switch (port)
    6b6e:	2300      	movs	r3, #0
    6b70:	e7dd      	b.n	6b2e <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6b72:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 6d30 <pinctrl_configure_pins+0x38c>
    6b76:	f240 2329 	movw	r3, #553	; 0x229
    6b7a:	4652      	mov	r2, sl
    6b7c:	496f      	ldr	r1, [pc, #444]	; (6d3c <pinctrl_configure_pins+0x398>)
    6b7e:	486e      	ldr	r0, [pc, #440]	; (6d38 <pinctrl_configure_pins+0x394>)
    6b80:	f005 faf2 	bl	c168 <assert_print>
    6b84:	f240 2129 	movw	r1, #553	; 0x229
    6b88:	4650      	mov	r0, sl
    6b8a:	f005 fae6 	bl	c15a <assert_post_action>
    6b8e:	e7d4      	b.n	6b3a <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    6b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6b94:	e000      	b.n	6b98 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6b96:	4a6a      	ldr	r2, [pc, #424]	; (6d40 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6b98:	2101      	movs	r1, #1
    6b9a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    6b9e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6ba2:	460a      	mov	r2, r1
    6ba4:	f855 0008 	ldr.w	r0, [r5, r8]
    6ba8:	f7ff fe9c 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6bac:	e74e      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    6bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bb2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6bb6:	2200      	movs	r2, #0
    6bb8:	4611      	mov	r1, r2
    6bba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6bbe:	f7ff fe91 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6bc2:	e743      	b.n	6a4c <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bc8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6bcc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6bd0:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6bd4:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6bd8:	f013 0f20 	tst.w	r3, #32
    6bdc:	d01f      	beq.n	6c1e <pinctrl_configure_pins+0x27a>
    6bde:	b30a      	cbz	r2, 6c24 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    6be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6be4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6be8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bea:	f013 0f01 	tst.w	r3, #1
    6bee:	d01b      	beq.n	6c28 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    6bf0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bf4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6bf8:	d025      	beq.n	6c46 <pinctrl_configure_pins+0x2a2>
    6bfa:	bb3b      	cbnz	r3, 6c4c <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    6bfc:	f8df 9130 	ldr.w	r9, [pc, #304]	; 6d30 <pinctrl_configure_pins+0x38c>
    6c00:	f240 232e 	movw	r3, #558	; 0x22e
    6c04:	464a      	mov	r2, r9
    6c06:	494b      	ldr	r1, [pc, #300]	; (6d34 <pinctrl_configure_pins+0x390>)
    6c08:	484b      	ldr	r0, [pc, #300]	; (6d38 <pinctrl_configure_pins+0x394>)
    6c0a:	f005 faad 	bl	c168 <assert_print>
    6c0e:	f240 212e 	movw	r1, #558	; 0x22e
    6c12:	4648      	mov	r0, r9
    6c14:	f005 faa1 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6c18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c1c:	e017      	b.n	6c4e <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    6c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c22:	e7df      	b.n	6be4 <pinctrl_configure_pins+0x240>
    switch (port)
    6c24:	2300      	movs	r3, #0
    6c26:	e7dd      	b.n	6be4 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c28:	f8df a104 	ldr.w	sl, [pc, #260]	; 6d30 <pinctrl_configure_pins+0x38c>
    6c2c:	f240 2329 	movw	r3, #553	; 0x229
    6c30:	4652      	mov	r2, sl
    6c32:	4942      	ldr	r1, [pc, #264]	; (6d3c <pinctrl_configure_pins+0x398>)
    6c34:	4840      	ldr	r0, [pc, #256]	; (6d38 <pinctrl_configure_pins+0x394>)
    6c36:	f005 fa97 	bl	c168 <assert_print>
    6c3a:	f240 2129 	movw	r1, #553	; 0x229
    6c3e:	4650      	mov	r0, sl
    6c40:	f005 fa8b 	bl	c15a <assert_post_action>
    6c44:	e7d4      	b.n	6bf0 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    6c46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c4a:	e000      	b.n	6c4e <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c4c:	4a3c      	ldr	r2, [pc, #240]	; (6d40 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c4e:	2101      	movs	r1, #1
    6c50:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6c54:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c58:	2200      	movs	r2, #0
    6c5a:	f855 0008 	ldr.w	r0, [r5, r8]
    6c5e:	f7ff fe41 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6c62:	e6f3      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c68:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6c6c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6c70:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    6c74:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    6c78:	f013 0f20 	tst.w	r3, #32
    6c7c:	d01f      	beq.n	6cbe <pinctrl_configure_pins+0x31a>
    6c7e:	b30a      	cbz	r2, 6cc4 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    6c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c84:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c88:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c8a:	f013 0f01 	tst.w	r3, #1
    6c8e:	d01b      	beq.n	6cc8 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    6c90:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c94:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6c98:	d025      	beq.n	6ce6 <pinctrl_configure_pins+0x342>
    6c9a:	bb3b      	cbnz	r3, 6cec <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    6c9c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6d30 <pinctrl_configure_pins+0x38c>
    6ca0:	f240 232e 	movw	r3, #558	; 0x22e
    6ca4:	464a      	mov	r2, r9
    6ca6:	4923      	ldr	r1, [pc, #140]	; (6d34 <pinctrl_configure_pins+0x390>)
    6ca8:	4823      	ldr	r0, [pc, #140]	; (6d38 <pinctrl_configure_pins+0x394>)
    6caa:	f005 fa5d 	bl	c168 <assert_print>
    6cae:	f240 212e 	movw	r1, #558	; 0x22e
    6cb2:	4648      	mov	r0, r9
    6cb4:	f005 fa51 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6cbc:	e017      	b.n	6cee <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    6cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6cc2:	e7df      	b.n	6c84 <pinctrl_configure_pins+0x2e0>
    switch (port)
    6cc4:	2300      	movs	r3, #0
    6cc6:	e7dd      	b.n	6c84 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6cc8:	f8df a064 	ldr.w	sl, [pc, #100]	; 6d30 <pinctrl_configure_pins+0x38c>
    6ccc:	f240 2329 	movw	r3, #553	; 0x229
    6cd0:	4652      	mov	r2, sl
    6cd2:	491a      	ldr	r1, [pc, #104]	; (6d3c <pinctrl_configure_pins+0x398>)
    6cd4:	4818      	ldr	r0, [pc, #96]	; (6d38 <pinctrl_configure_pins+0x394>)
    6cd6:	f005 fa47 	bl	c168 <assert_print>
    6cda:	f240 2129 	movw	r1, #553	; 0x229
    6cde:	4650      	mov	r0, sl
    6ce0:	f005 fa3b 	bl	c15a <assert_post_action>
    6ce4:	e7d4      	b.n	6c90 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    6ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6cea:	e000      	b.n	6cee <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cec:	4a14      	ldr	r2, [pc, #80]	; (6d40 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6cee:	2101      	movs	r1, #1
    6cf0:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    6cf4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6cf8:	460a      	mov	r2, r1
    6cfa:	f855 0008 	ldr.w	r0, [r5, r8]
    6cfe:	f7ff fdf1 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6d02:	e6a3      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d08:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d0c:	2200      	movs	r2, #0
    6d0e:	4611      	mov	r1, r2
    6d10:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d14:	f7ff fde6 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6d18:	e698      	b.n	6a4c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d1e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d22:	2200      	movs	r2, #0
    6d24:	4611      	mov	r1, r2
    6d26:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d2a:	f7ff fddb 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6d2e:	e68d      	b.n	6a4c <pinctrl_configure_pins+0xa8>
    6d30:	0000eef0 	.word	0x0000eef0
    6d34:	0000d6e0 	.word	0x0000d6e0
    6d38:	0000d51c 	.word	0x0000d51c
    6d3c:	0000ef24 	.word	0x0000ef24
    6d40:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d48:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d4c:	2200      	movs	r2, #0
    6d4e:	4611      	mov	r1, r2
    6d50:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    6d54:	f7ff fdc6 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    6d58:	e678      	b.n	6a4c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d5e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6d62:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6d66:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6d6a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6d6e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6d72:	d144      	bne.n	6dfe <pinctrl_configure_pins+0x45a>
    switch (port)
    6d74:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6d78:	d01f      	beq.n	6dba <pinctrl_configure_pins+0x416>
    6d7a:	b10b      	cbz	r3, 6d80 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    6d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6d80:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d84:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d86:	f012 0f01 	tst.w	r2, #1
    6d8a:	d019      	beq.n	6dc0 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    6d8c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d90:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6d94:	d023      	beq.n	6dde <pinctrl_configure_pins+0x43a>
    6d96:	bb2b      	cbnz	r3, 6de4 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    6d98:	f8df 9300 	ldr.w	r9, [pc, #768]	; 709c <pinctrl_configure_pins+0x6f8>
    6d9c:	f240 232e 	movw	r3, #558	; 0x22e
    6da0:	464a      	mov	r2, r9
    6da2:	49bf      	ldr	r1, [pc, #764]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    6da4:	48bf      	ldr	r0, [pc, #764]	; (70a4 <pinctrl_configure_pins+0x700>)
    6da6:	f005 f9df 	bl	c168 <assert_print>
    6daa:	f240 212e 	movw	r1, #558	; 0x22e
    6dae:	4648      	mov	r0, r9
    6db0:	f005 f9d3 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6db4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6db8:	e015      	b.n	6de6 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    6dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6dbe:	e7df      	b.n	6d80 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dc0:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 709c <pinctrl_configure_pins+0x6f8>
    6dc4:	f240 2329 	movw	r3, #553	; 0x229
    6dc8:	4652      	mov	r2, sl
    6dca:	49b7      	ldr	r1, [pc, #732]	; (70a8 <pinctrl_configure_pins+0x704>)
    6dcc:	48b5      	ldr	r0, [pc, #724]	; (70a4 <pinctrl_configure_pins+0x700>)
    6dce:	f005 f9cb 	bl	c168 <assert_print>
    6dd2:	f240 2129 	movw	r1, #553	; 0x229
    6dd6:	4650      	mov	r0, sl
    6dd8:	f005 f9bf 	bl	c15a <assert_post_action>
    6ddc:	e7d6      	b.n	6d8c <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    6dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6de2:	e000      	b.n	6de6 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6de4:	4ab1      	ldr	r2, [pc, #708]	; (70ac <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6de6:	2301      	movs	r3, #1
    6de8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6dec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6df0:	2201      	movs	r2, #1
    6df2:	4611      	mov	r1, r2
    6df4:	f855 0008 	ldr.w	r0, [r5, r8]
    6df8:	f7ff fd74 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6dfc:	e626      	b.n	6a4c <pinctrl_configure_pins+0xa8>
    switch (port)
    6dfe:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e02:	d01f      	beq.n	6e44 <pinctrl_configure_pins+0x4a0>
    6e04:	b30b      	cbz	r3, 6e4a <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    6e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e0a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e0e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e10:	f013 0f01 	tst.w	r3, #1
    6e14:	d01b      	beq.n	6e4e <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    6e16:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e1a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e1e:	d025      	beq.n	6e6c <pinctrl_configure_pins+0x4c8>
    6e20:	bb3b      	cbnz	r3, 6e72 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    6e22:	f8df 9278 	ldr.w	r9, [pc, #632]	; 709c <pinctrl_configure_pins+0x6f8>
    6e26:	f240 232e 	movw	r3, #558	; 0x22e
    6e2a:	464a      	mov	r2, r9
    6e2c:	499c      	ldr	r1, [pc, #624]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    6e2e:	489d      	ldr	r0, [pc, #628]	; (70a4 <pinctrl_configure_pins+0x700>)
    6e30:	f005 f99a 	bl	c168 <assert_print>
    6e34:	f240 212e 	movw	r1, #558	; 0x22e
    6e38:	4648      	mov	r0, r9
    6e3a:	f005 f98e 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6e3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e42:	e017      	b.n	6e74 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    6e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e48:	e7df      	b.n	6e0a <pinctrl_configure_pins+0x466>
    switch (port)
    6e4a:	2300      	movs	r3, #0
    6e4c:	e7dd      	b.n	6e0a <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e4e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 709c <pinctrl_configure_pins+0x6f8>
    6e52:	f240 2329 	movw	r3, #553	; 0x229
    6e56:	4652      	mov	r2, sl
    6e58:	4993      	ldr	r1, [pc, #588]	; (70a8 <pinctrl_configure_pins+0x704>)
    6e5a:	4892      	ldr	r0, [pc, #584]	; (70a4 <pinctrl_configure_pins+0x700>)
    6e5c:	f005 f984 	bl	c168 <assert_print>
    6e60:	f240 2129 	movw	r1, #553	; 0x229
    6e64:	4650      	mov	r0, sl
    6e66:	f005 f978 	bl	c15a <assert_post_action>
    6e6a:	e7d4      	b.n	6e16 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    6e6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6e70:	e000      	b.n	6e74 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e72:	4a8e      	ldr	r2, [pc, #568]	; (70ac <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6e74:	2301      	movs	r3, #1
    6e76:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6e7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6e7e:	e7b7      	b.n	6df0 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e84:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6e88:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6e8c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6e90:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6e94:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6e98:	d144      	bne.n	6f24 <pinctrl_configure_pins+0x580>
    switch (port)
    6e9a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6e9e:	d01f      	beq.n	6ee0 <pinctrl_configure_pins+0x53c>
    6ea0:	b10b      	cbz	r3, 6ea6 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    6ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6ea6:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6eaa:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6eac:	f012 0f01 	tst.w	r2, #1
    6eb0:	d019      	beq.n	6ee6 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    6eb2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6eb6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6eba:	d023      	beq.n	6f04 <pinctrl_configure_pins+0x560>
    6ebc:	bb2b      	cbnz	r3, 6f0a <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    6ebe:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 709c <pinctrl_configure_pins+0x6f8>
    6ec2:	f240 232e 	movw	r3, #558	; 0x22e
    6ec6:	464a      	mov	r2, r9
    6ec8:	4975      	ldr	r1, [pc, #468]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    6eca:	4876      	ldr	r0, [pc, #472]	; (70a4 <pinctrl_configure_pins+0x700>)
    6ecc:	f005 f94c 	bl	c168 <assert_print>
    6ed0:	f240 212e 	movw	r1, #558	; 0x22e
    6ed4:	4648      	mov	r0, r9
    6ed6:	f005 f940 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6ede:	e015      	b.n	6f0c <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    6ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6ee4:	e7df      	b.n	6ea6 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ee6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 709c <pinctrl_configure_pins+0x6f8>
    6eea:	f240 2329 	movw	r3, #553	; 0x229
    6eee:	4652      	mov	r2, sl
    6ef0:	496d      	ldr	r1, [pc, #436]	; (70a8 <pinctrl_configure_pins+0x704>)
    6ef2:	486c      	ldr	r0, [pc, #432]	; (70a4 <pinctrl_configure_pins+0x700>)
    6ef4:	f005 f938 	bl	c168 <assert_print>
    6ef8:	f240 2129 	movw	r1, #553	; 0x229
    6efc:	4650      	mov	r0, sl
    6efe:	f005 f92c 	bl	c15a <assert_post_action>
    6f02:	e7d6      	b.n	6eb2 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    6f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f08:	e000      	b.n	6f0c <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f0a:	4a68      	ldr	r2, [pc, #416]	; (70ac <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6f0c:	2301      	movs	r3, #1
    6f0e:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    6f12:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6f16:	2201      	movs	r2, #1
    6f18:	4611      	mov	r1, r2
    6f1a:	f855 0008 	ldr.w	r0, [r5, r8]
    6f1e:	f7ff fce1 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    6f22:	e593      	b.n	6a4c <pinctrl_configure_pins+0xa8>
    switch (port)
    6f24:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f28:	d01f      	beq.n	6f6a <pinctrl_configure_pins+0x5c6>
    6f2a:	b30b      	cbz	r3, 6f70 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    6f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6f30:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f34:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f36:	f013 0f01 	tst.w	r3, #1
    6f3a:	d01b      	beq.n	6f74 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    6f3c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f40:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6f44:	d025      	beq.n	6f92 <pinctrl_configure_pins+0x5ee>
    6f46:	bb3b      	cbnz	r3, 6f98 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    6f48:	f8df 9150 	ldr.w	r9, [pc, #336]	; 709c <pinctrl_configure_pins+0x6f8>
    6f4c:	f240 232e 	movw	r3, #558	; 0x22e
    6f50:	464a      	mov	r2, r9
    6f52:	4953      	ldr	r1, [pc, #332]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    6f54:	4853      	ldr	r0, [pc, #332]	; (70a4 <pinctrl_configure_pins+0x700>)
    6f56:	f005 f907 	bl	c168 <assert_print>
    6f5a:	f240 212e 	movw	r1, #558	; 0x22e
    6f5e:	4648      	mov	r0, r9
    6f60:	f005 f8fb 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    6f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f68:	e017      	b.n	6f9a <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    6f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f6e:	e7df      	b.n	6f30 <pinctrl_configure_pins+0x58c>
    switch (port)
    6f70:	2300      	movs	r3, #0
    6f72:	e7dd      	b.n	6f30 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6f74:	f8df a124 	ldr.w	sl, [pc, #292]	; 709c <pinctrl_configure_pins+0x6f8>
    6f78:	f240 2329 	movw	r3, #553	; 0x229
    6f7c:	4652      	mov	r2, sl
    6f7e:	494a      	ldr	r1, [pc, #296]	; (70a8 <pinctrl_configure_pins+0x704>)
    6f80:	4848      	ldr	r0, [pc, #288]	; (70a4 <pinctrl_configure_pins+0x700>)
    6f82:	f005 f8f1 	bl	c168 <assert_print>
    6f86:	f240 2129 	movw	r1, #553	; 0x229
    6f8a:	4650      	mov	r0, sl
    6f8c:	f005 f8e5 	bl	c15a <assert_post_action>
    6f90:	e7d4      	b.n	6f3c <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    6f92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6f96:	e000      	b.n	6f9a <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6f98:	4a44      	ldr	r2, [pc, #272]	; (70ac <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6f9a:	2301      	movs	r3, #1
    6f9c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    6fa0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    6fa4:	e7b7      	b.n	6f16 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6faa:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6fae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    6fb2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    6fb6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    6fba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6fbe:	d144      	bne.n	704a <pinctrl_configure_pins+0x6a6>
    switch (port)
    6fc0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6fc4:	d01f      	beq.n	7006 <pinctrl_configure_pins+0x662>
    6fc6:	b10b      	cbz	r3, 6fcc <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    6fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6fcc:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6fd0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6fd2:	f012 0f01 	tst.w	r2, #1
    6fd6:	d019      	beq.n	700c <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    6fd8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6fdc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    6fe0:	d023      	beq.n	702a <pinctrl_configure_pins+0x686>
    6fe2:	bb2b      	cbnz	r3, 7030 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    6fe4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 709c <pinctrl_configure_pins+0x6f8>
    6fe8:	f240 232e 	movw	r3, #558	; 0x22e
    6fec:	464a      	mov	r2, r9
    6fee:	492c      	ldr	r1, [pc, #176]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    6ff0:	482c      	ldr	r0, [pc, #176]	; (70a4 <pinctrl_configure_pins+0x700>)
    6ff2:	f005 f8b9 	bl	c168 <assert_print>
    6ff6:	f240 212e 	movw	r1, #558	; 0x22e
    6ffa:	4648      	mov	r0, r9
    6ffc:	f005 f8ad 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7000:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7004:	e015      	b.n	7032 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    7006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    700a:	e7df      	b.n	6fcc <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    700c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 709c <pinctrl_configure_pins+0x6f8>
    7010:	f240 2329 	movw	r3, #553	; 0x229
    7014:	4652      	mov	r2, sl
    7016:	4924      	ldr	r1, [pc, #144]	; (70a8 <pinctrl_configure_pins+0x704>)
    7018:	4822      	ldr	r0, [pc, #136]	; (70a4 <pinctrl_configure_pins+0x700>)
    701a:	f005 f8a5 	bl	c168 <assert_print>
    701e:	f240 2129 	movw	r1, #553	; 0x229
    7022:	4650      	mov	r0, sl
    7024:	f005 f899 	bl	c15a <assert_post_action>
    7028:	e7d6      	b.n	6fd8 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    702a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    702e:	e000      	b.n	7032 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7030:	4a1e      	ldr	r2, [pc, #120]	; (70ac <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7032:	2301      	movs	r3, #1
    7034:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    7038:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    703c:	2201      	movs	r2, #1
    703e:	4611      	mov	r1, r2
    7040:	f855 0008 	ldr.w	r0, [r5, r8]
    7044:	f7ff fc4e 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7048:	e500      	b.n	6a4c <pinctrl_configure_pins+0xa8>
    switch (port)
    704a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    704e:	d01f      	beq.n	7090 <pinctrl_configure_pins+0x6ec>
    7050:	b30b      	cbz	r3, 7096 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    7052:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7056:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    705a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    705c:	f013 0f01 	tst.w	r3, #1
    7060:	d026      	beq.n	70b0 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    7062:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7066:	ea5f 1359 	movs.w	r3, r9, lsr #5
    706a:	d030      	beq.n	70ce <pinctrl_configure_pins+0x72a>
    706c:	bb93      	cbnz	r3, 70d4 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    706e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 709c <pinctrl_configure_pins+0x6f8>
    7072:	f240 232e 	movw	r3, #558	; 0x22e
    7076:	464a      	mov	r2, r9
    7078:	4909      	ldr	r1, [pc, #36]	; (70a0 <pinctrl_configure_pins+0x6fc>)
    707a:	480a      	ldr	r0, [pc, #40]	; (70a4 <pinctrl_configure_pins+0x700>)
    707c:	f005 f874 	bl	c168 <assert_print>
    7080:	f240 212e 	movw	r1, #558	; 0x22e
    7084:	4648      	mov	r0, r9
    7086:	f005 f868 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    708a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    708e:	e022      	b.n	70d6 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    7090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7094:	e7df      	b.n	7056 <pinctrl_configure_pins+0x6b2>
    switch (port)
    7096:	2300      	movs	r3, #0
    7098:	e7dd      	b.n	7056 <pinctrl_configure_pins+0x6b2>
    709a:	bf00      	nop
    709c:	0000eef0 	.word	0x0000eef0
    70a0:	0000d6e0 	.word	0x0000d6e0
    70a4:	0000d51c 	.word	0x0000d51c
    70a8:	0000ef24 	.word	0x0000ef24
    70ac:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    70b0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 72a0 <pinctrl_configure_pins+0x8fc>
    70b4:	f240 2329 	movw	r3, #553	; 0x229
    70b8:	4652      	mov	r2, sl
    70ba:	497a      	ldr	r1, [pc, #488]	; (72a4 <pinctrl_configure_pins+0x900>)
    70bc:	487a      	ldr	r0, [pc, #488]	; (72a8 <pinctrl_configure_pins+0x904>)
    70be:	f005 f853 	bl	c168 <assert_print>
    70c2:	f240 2129 	movw	r1, #553	; 0x229
    70c6:	4650      	mov	r0, sl
    70c8:	f005 f847 	bl	c15a <assert_post_action>
    70cc:	e7c9      	b.n	7062 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    70ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    70d2:	e000      	b.n	70d6 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    70d4:	4a75      	ldr	r2, [pc, #468]	; (72ac <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    70d6:	2301      	movs	r3, #1
    70d8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    70dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    70e0:	e7ac      	b.n	703c <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    70e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70e6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    70ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    70ee:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    70f2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    70f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    70fa:	d144      	bne.n	7186 <pinctrl_configure_pins+0x7e2>
    switch (port)
    70fc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7100:	d01f      	beq.n	7142 <pinctrl_configure_pins+0x79e>
    7102:	b10b      	cbz	r3, 7108 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    7104:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7108:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    710c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    710e:	f012 0f01 	tst.w	r2, #1
    7112:	d019      	beq.n	7148 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    7114:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7118:	ea5f 1359 	movs.w	r3, r9, lsr #5
    711c:	d023      	beq.n	7166 <pinctrl_configure_pins+0x7c2>
    711e:	bb2b      	cbnz	r3, 716c <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    7120:	f8df 917c 	ldr.w	r9, [pc, #380]	; 72a0 <pinctrl_configure_pins+0x8fc>
    7124:	f240 232e 	movw	r3, #558	; 0x22e
    7128:	464a      	mov	r2, r9
    712a:	4961      	ldr	r1, [pc, #388]	; (72b0 <pinctrl_configure_pins+0x90c>)
    712c:	485e      	ldr	r0, [pc, #376]	; (72a8 <pinctrl_configure_pins+0x904>)
    712e:	f005 f81b 	bl	c168 <assert_print>
    7132:	f240 212e 	movw	r1, #558	; 0x22e
    7136:	4648      	mov	r0, r9
    7138:	f005 f80f 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    713c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7140:	e015      	b.n	716e <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    7142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7146:	e7df      	b.n	7108 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7148:	f8df a154 	ldr.w	sl, [pc, #340]	; 72a0 <pinctrl_configure_pins+0x8fc>
    714c:	f240 2329 	movw	r3, #553	; 0x229
    7150:	4652      	mov	r2, sl
    7152:	4954      	ldr	r1, [pc, #336]	; (72a4 <pinctrl_configure_pins+0x900>)
    7154:	4854      	ldr	r0, [pc, #336]	; (72a8 <pinctrl_configure_pins+0x904>)
    7156:	f005 f807 	bl	c168 <assert_print>
    715a:	f240 2129 	movw	r1, #553	; 0x229
    715e:	4650      	mov	r0, sl
    7160:	f004 fffb 	bl	c15a <assert_post_action>
    7164:	e7d6      	b.n	7114 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    7166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    716a:	e000      	b.n	716e <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    716c:	4a4f      	ldr	r2, [pc, #316]	; (72ac <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    716e:	2301      	movs	r3, #1
    7170:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    7174:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7178:	2201      	movs	r2, #1
    717a:	4611      	mov	r1, r2
    717c:	f855 0008 	ldr.w	r0, [r5, r8]
    7180:	f7ff fbb0 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7184:	e462      	b.n	6a4c <pinctrl_configure_pins+0xa8>
    switch (port)
    7186:	ea5f 1359 	movs.w	r3, r9, lsr #5
    718a:	d01f      	beq.n	71cc <pinctrl_configure_pins+0x828>
    718c:	b30b      	cbz	r3, 71d2 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    718e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7192:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7196:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7198:	f013 0f01 	tst.w	r3, #1
    719c:	d01b      	beq.n	71d6 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    719e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71a2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    71a6:	d025      	beq.n	71f4 <pinctrl_configure_pins+0x850>
    71a8:	bb3b      	cbnz	r3, 71fa <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    71aa:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 72a0 <pinctrl_configure_pins+0x8fc>
    71ae:	f240 232e 	movw	r3, #558	; 0x22e
    71b2:	464a      	mov	r2, r9
    71b4:	493e      	ldr	r1, [pc, #248]	; (72b0 <pinctrl_configure_pins+0x90c>)
    71b6:	483c      	ldr	r0, [pc, #240]	; (72a8 <pinctrl_configure_pins+0x904>)
    71b8:	f004 ffd6 	bl	c168 <assert_print>
    71bc:	f240 212e 	movw	r1, #558	; 0x22e
    71c0:	4648      	mov	r0, r9
    71c2:	f004 ffca 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    71c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71ca:	e017      	b.n	71fc <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    71cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71d0:	e7df      	b.n	7192 <pinctrl_configure_pins+0x7ee>
    switch (port)
    71d2:	2300      	movs	r3, #0
    71d4:	e7dd      	b.n	7192 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    71d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 72a0 <pinctrl_configure_pins+0x8fc>
    71da:	f240 2329 	movw	r3, #553	; 0x229
    71de:	4652      	mov	r2, sl
    71e0:	4930      	ldr	r1, [pc, #192]	; (72a4 <pinctrl_configure_pins+0x900>)
    71e2:	4831      	ldr	r0, [pc, #196]	; (72a8 <pinctrl_configure_pins+0x904>)
    71e4:	f004 ffc0 	bl	c168 <assert_print>
    71e8:	f240 2129 	movw	r1, #553	; 0x229
    71ec:	4650      	mov	r0, sl
    71ee:	f004 ffb4 	bl	c15a <assert_post_action>
    71f2:	e7d4      	b.n	719e <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    71f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    71f8:	e000      	b.n	71fc <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    71fa:	4a2c      	ldr	r2, [pc, #176]	; (72ac <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    71fc:	2301      	movs	r3, #1
    71fe:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    7202:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7206:	e7b7      	b.n	7178 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    7208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    720c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7210:	2201      	movs	r2, #1
    7212:	2100      	movs	r1, #0
    7214:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7218:	f7ff fb64 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    721c:	e416      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    721e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7222:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7226:	2201      	movs	r2, #1
    7228:	2100      	movs	r1, #0
    722a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    722e:	f7ff fb59 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7232:	e40b      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7238:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    723c:	2201      	movs	r2, #1
    723e:	2100      	movs	r1, #0
    7240:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7244:	f7ff fb4e 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7248:	e400      	b.n	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    724a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    724e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7252:	2201      	movs	r2, #1
    7254:	2100      	movs	r1, #0
    7256:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    725a:	f7ff fb43 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    725e:	f7ff bbf5 	b.w	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    7262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7266:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    726a:	2201      	movs	r2, #1
    726c:	2100      	movs	r1, #0
    726e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7272:	f7ff fb37 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7276:	f7ff bbe9 	b.w	6a4c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    727a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    727e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7282:	2201      	movs	r2, #1
    7284:	2100      	movs	r1, #0
    7286:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    728a:	f7ff fb2b 	bl	68e4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    728e:	f7ff bbdd 	b.w	6a4c <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7292:	2000      	movs	r0, #0
    7294:	e001      	b.n	729a <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    7296:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    729e:	bf00      	nop
    72a0:	0000eef0 	.word	0x0000eef0
    72a4:	0000ef24 	.word	0x0000ef24
    72a8:	0000d51c 	.word	0x0000d51c
    72ac:	50000300 	.word	0x50000300
    72b0:	0000d6e0 	.word	0x0000d6e0

000072b4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    72b4:	b510      	push	{r4, lr}
    72b6:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    72b8:	f7fc f9d4 	bl	3664 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    72bc:	4b06      	ldr	r3, [pc, #24]	; (72d8 <k_sys_fatal_error_handler+0x24>)
    72be:	9302      	str	r3, [sp, #8]
    72c0:	2400      	movs	r4, #0
    72c2:	9401      	str	r4, [sp, #4]
    72c4:	9400      	str	r4, [sp, #0]
    72c6:	4623      	mov	r3, r4
    72c8:	2201      	movs	r2, #1
    72ca:	4904      	ldr	r1, [pc, #16]	; (72dc <k_sys_fatal_error_handler+0x28>)
    72cc:	4620      	mov	r0, r4
    72ce:	f005 fcff 	bl	ccd0 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    72d2:	4620      	mov	r0, r4
    72d4:	f7fe f810 	bl	52f8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    72d8:	0000f050 	.word	0x0000f050
    72dc:	0000d360 	.word	0x0000d360

000072e0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    72e0:	4b02      	ldr	r3, [pc, #8]	; (72ec <nvmc_wait+0xc>)
    72e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    72e6:	2b00      	cmp	r3, #0
    72e8:	d0fa      	beq.n	72e0 <nvmc_wait>
}
    72ea:	4770      	bx	lr
    72ec:	4001e000 	.word	0x4001e000

000072f0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    72f0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    72f2:	4b03      	ldr	r3, [pc, #12]	; (7300 <nvmc_config+0x10>)
    72f4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    72f8:	f7ff fff2 	bl	72e0 <nvmc_wait>
}
    72fc:	bd08      	pop	{r3, pc}
    72fe:	bf00      	nop
    7300:	4001e000 	.word	0x4001e000

00007304 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7304:	4b01      	ldr	r3, [pc, #4]	; (730c <SystemCoreClockUpdate+0x8>)
    7306:	4a02      	ldr	r2, [pc, #8]	; (7310 <SystemCoreClockUpdate+0xc>)
    7308:	601a      	str	r2, [r3, #0]
}
    730a:	4770      	bx	lr
    730c:	200000f0 	.word	0x200000f0
    7310:	03d09000 	.word	0x03d09000

00007314 <SystemInit>:

void SystemInit(void)
{
    7314:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    7316:	f005 fcf8 	bl	cd0a <nrf52_errata_36>
    731a:	b140      	cbz	r0, 732e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    731c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7320:	2200      	movs	r2, #0
    7322:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7326:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    732a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    732e:	f005 fcf6 	bl	cd1e <nrf52_errata_66>
    7332:	2800      	cmp	r0, #0
    7334:	d046      	beq.n	73c4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    733a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    733e:	4b59      	ldr	r3, [pc, #356]	; (74a4 <SystemInit+0x190>)
    7340:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7344:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7348:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    734c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7350:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7354:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7358:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    735c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7360:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7364:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7368:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    736c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7370:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7374:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    7378:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    737c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    7380:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7384:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    7388:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    738c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    7390:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    7394:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    7398:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    739c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    73a0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    73a4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    73a8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    73ac:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    73b0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    73b4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    73b8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    73bc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    73c0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    73c4:	f005 fcb5 	bl	cd32 <nrf52_errata_98>
    73c8:	b118      	cbz	r0, 73d2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    73ca:	4b37      	ldr	r3, [pc, #220]	; (74a8 <SystemInit+0x194>)
    73cc:	4a37      	ldr	r2, [pc, #220]	; (74ac <SystemInit+0x198>)
    73ce:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    73d2:	f005 fcc1 	bl	cd58 <nrf52_errata_103>
    73d6:	b118      	cbz	r0, 73e0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    73d8:	4b35      	ldr	r3, [pc, #212]	; (74b0 <SystemInit+0x19c>)
    73da:	22fb      	movs	r2, #251	; 0xfb
    73dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    73e0:	f005 fccd 	bl	cd7e <nrf52_errata_115>
    73e4:	b170      	cbz	r0, 7404 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    73e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    73ea:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    73ee:	f023 030f 	bic.w	r3, r3, #15
    73f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    73f6:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    73fa:	f002 020f 	and.w	r2, r2, #15
    73fe:	4313      	orrs	r3, r2
    7400:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7404:	f005 fcce 	bl	cda4 <nrf52_errata_120>
    7408:	b120      	cbz	r0, 7414 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    740a:	4b2a      	ldr	r3, [pc, #168]	; (74b4 <SystemInit+0x1a0>)
    740c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7410:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    7414:	f005 fcd9 	bl	cdca <nrf52_errata_136>
    7418:	b160      	cbz	r0, 7434 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    741a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    741e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7422:	f013 0f01 	tst.w	r3, #1
    7426:	d005      	beq.n	7434 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    742c:	f06f 0201 	mvn.w	r2, #1
    7430:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7434:	f005 fcd3 	bl	cdde <nrf52_configuration_249>
    7438:	b138      	cbz	r0, 744a <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    743a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    743e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7446:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    744a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    744e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7452:	2b00      	cmp	r3, #0
    7454:	db08      	blt.n	7468 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7456:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    745a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    745e:	2b00      	cmp	r3, #0
    7460:	db02      	blt.n	7468 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    7462:	f7ff ff4f 	bl	7304 <SystemCoreClockUpdate>
}
    7466:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    7468:	2001      	movs	r0, #1
    746a:	f7ff ff41 	bl	72f0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    746e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    7472:	2512      	movs	r5, #18
    7474:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    7478:	f7ff ff32 	bl	72e0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    747c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    7480:	f7ff ff2e 	bl	72e0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    7484:	2000      	movs	r0, #0
    7486:	f7ff ff33 	bl	72f0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    748a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    748e:	490a      	ldr	r1, [pc, #40]	; (74b8 <SystemInit+0x1a4>)
    7490:	68ca      	ldr	r2, [r1, #12]
    7492:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7496:	4b09      	ldr	r3, [pc, #36]	; (74bc <SystemInit+0x1a8>)
    7498:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    749a:	60cb      	str	r3, [r1, #12]
    749c:	f3bf 8f4f 	dsb	sy
    __NOP();
    74a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    74a2:	e7fd      	b.n	74a0 <SystemInit+0x18c>
    74a4:	4000c000 	.word	0x4000c000
    74a8:	40005000 	.word	0x40005000
    74ac:	00038148 	.word	0x00038148
    74b0:	4000f000 	.word	0x4000f000
    74b4:	40029000 	.word	0x40029000
    74b8:	e000ed00 	.word	0xe000ed00
    74bc:	05fa0004 	.word	0x05fa0004

000074c0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    74c0:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    74c2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    74c4:	fab4 f384 	clz	r3, r4
    74c8:	f1c3 031f 	rsb	r3, r3, #31
    74cc:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    74d0:	2b00      	cmp	r3, #0
    74d2:	db16      	blt.n	7502 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    74d4:	2201      	movs	r2, #1
    74d6:	fa02 f303 	lsl.w	r3, r2, r3
    74da:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    74de:	f3bf 8f5b 	dmb	ish
    74e2:	e850 2f00 	ldrex	r2, [r0]
    74e6:	42a2      	cmp	r2, r4
    74e8:	d104      	bne.n	74f4 <nrfx_flag32_alloc+0x34>
    74ea:	e840 3e00 	strex	lr, r3, [r0]
    74ee:	f1be 0f00 	cmp.w	lr, #0
    74f2:	d1f6      	bne.n	74e2 <nrfx_flag32_alloc+0x22>
    74f4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    74f8:	d1e3      	bne.n	74c2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    74fa:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    74fe:	4802      	ldr	r0, [pc, #8]	; (7508 <nrfx_flag32_alloc+0x48>)
}
    7500:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    7502:	4802      	ldr	r0, [pc, #8]	; (750c <nrfx_flag32_alloc+0x4c>)
    7504:	e7fc      	b.n	7500 <nrfx_flag32_alloc+0x40>
    7506:	bf00      	nop
    7508:	0bad0000 	.word	0x0bad0000
    750c:	0bad0002 	.word	0x0bad0002

00007510 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7510:	6803      	ldr	r3, [r0, #0]
    7512:	40cb      	lsrs	r3, r1
    7514:	f013 0f01 	tst.w	r3, #1
    7518:	d115      	bne.n	7546 <nrfx_flag32_free+0x36>
{
    751a:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    751c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    751e:	2301      	movs	r3, #1
    7520:	408b      	lsls	r3, r1
    7522:	4313      	orrs	r3, r2
    7524:	f3bf 8f5b 	dmb	ish
    7528:	e850 cf00 	ldrex	ip, [r0]
    752c:	4594      	cmp	ip, r2
    752e:	d104      	bne.n	753a <nrfx_flag32_free+0x2a>
    7530:	e840 3e00 	strex	lr, r3, [r0]
    7534:	f1be 0f00 	cmp.w	lr, #0
    7538:	d1f6      	bne.n	7528 <nrfx_flag32_free+0x18>
    753a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    753e:	d1ed      	bne.n	751c <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    7540:	4802      	ldr	r0, [pc, #8]	; (754c <nrfx_flag32_free+0x3c>)
}
    7542:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    7546:	4802      	ldr	r0, [pc, #8]	; (7550 <nrfx_flag32_free+0x40>)
}
    7548:	4770      	bx	lr
    754a:	bf00      	nop
    754c:	0bad0000 	.word	0x0bad0000
    7550:	0bad0004 	.word	0x0bad0004

00007554 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    7554:	b5f0      	push	{r4, r5, r6, r7, lr}
    7556:	b083      	sub	sp, #12
    switch (domain)
    7558:	4605      	mov	r5, r0
    755a:	b168      	cbz	r0, 7578 <clock_stop+0x24>
    755c:	2801      	cmp	r0, #1
    755e:	d020      	beq.n	75a2 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7560:	4c3d      	ldr	r4, [pc, #244]	; (7658 <clock_stop+0x104>)
    7562:	23d8      	movs	r3, #216	; 0xd8
    7564:	4622      	mov	r2, r4
    7566:	493d      	ldr	r1, [pc, #244]	; (765c <clock_stop+0x108>)
    7568:	483d      	ldr	r0, [pc, #244]	; (7660 <clock_stop+0x10c>)
    756a:	f004 fdfd 	bl	c168 <assert_print>
    756e:	21d8      	movs	r1, #216	; 0xd8
    7570:	4620      	mov	r0, r4
    7572:	f004 fdf2 	bl	c15a <assert_post_action>
            return;
    7576:	e068      	b.n	764a <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    7578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    757c:	2202      	movs	r2, #2
    757e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7582:	2200      	movs	r2, #0
    7584:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7588:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    758c:	2201      	movs	r2, #1
    758e:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7590:	2301      	movs	r3, #1
    7592:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7596:	429d      	cmp	r5, r3
    7598:	d00f      	beq.n	75ba <clock_stop+0x66>
    759a:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    759c:	f242 7410 	movw	r4, #10000	; 0x2710
    75a0:	e029      	b.n	75f6 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    75a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75a6:	2201      	movs	r2, #1
    75a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ac:	2100      	movs	r1, #0
    75ae:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    75b2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75b6:	605a      	str	r2, [r3, #4]
}
    75b8:	e7ea      	b.n	7590 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    75ba:	f10d 0607 	add.w	r6, sp, #7
    75be:	e7ed      	b.n	759c <clock_stop+0x48>
            if (p_clk_src != NULL)
    75c0:	b136      	cbz	r6, 75d0 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    75c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75c6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    75ca:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    75ce:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    75d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75d4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    75d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    75dc:	d12f      	bne.n	763e <clock_stop+0xea>
    return false;
    75de:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    75e0:	b38b      	cbz	r3, 7646 <clock_stop+0xf2>
    75e2:	b11e      	cbz	r6, 75ec <clock_stop+0x98>
    75e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e8:	2b01      	cmp	r3, #1
    75ea:	d12c      	bne.n	7646 <clock_stop+0xf2>
    75ec:	2001      	movs	r0, #1
    75ee:	f005 fc09 	bl	ce04 <nrfx_busy_wait>
    75f2:	3c01      	subs	r4, #1
    75f4:	d027      	beq.n	7646 <clock_stop+0xf2>
    switch (domain)
    75f6:	2d00      	cmp	r5, #0
    75f8:	d0e2      	beq.n	75c0 <clock_stop+0x6c>
    75fa:	2d01      	cmp	r5, #1
    75fc:	d00e      	beq.n	761c <clock_stop+0xc8>
            NRFX_ASSERT(0);
    75fe:	4f19      	ldr	r7, [pc, #100]	; (7664 <clock_stop+0x110>)
    7600:	f44f 734f 	mov.w	r3, #828	; 0x33c
    7604:	463a      	mov	r2, r7
    7606:	4915      	ldr	r1, [pc, #84]	; (765c <clock_stop+0x108>)
    7608:	4815      	ldr	r0, [pc, #84]	; (7660 <clock_stop+0x10c>)
    760a:	f004 fdad 	bl	c168 <assert_print>
    760e:	f44f 714f 	mov.w	r1, #828	; 0x33c
    7612:	4638      	mov	r0, r7
    7614:	f004 fda1 	bl	c15a <assert_post_action>
            return false;
    7618:	2300      	movs	r3, #0
    761a:	e7e1      	b.n	75e0 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    761c:	b136      	cbz	r6, 762c <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    761e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7622:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7626:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    762a:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    762c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7630:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7634:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7638:	d103      	bne.n	7642 <clock_stop+0xee>
    return false;
    763a:	2300      	movs	r3, #0
    763c:	e7d0      	b.n	75e0 <clock_stop+0x8c>
                return true;
    763e:	2301      	movs	r3, #1
    7640:	e7ce      	b.n	75e0 <clock_stop+0x8c>
                return true;
    7642:	2301      	movs	r3, #1
    7644:	e7cc      	b.n	75e0 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7646:	2d01      	cmp	r5, #1
    7648:	d001      	beq.n	764e <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    764a:	b003      	add	sp, #12
    764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    764e:	4b06      	ldr	r3, [pc, #24]	; (7668 <clock_stop+0x114>)
    7650:	2200      	movs	r2, #0
    7652:	715a      	strb	r2, [r3, #5]
    7654:	e7f9      	b.n	764a <clock_stop+0xf6>
    7656:	bf00      	nop
    7658:	0000f070 	.word	0x0000f070
    765c:	0000d6e0 	.word	0x0000d6e0
    7660:	0000d51c 	.word	0x0000d51c
    7664:	0000f0b0 	.word	0x0000f0b0
    7668:	20000d68 	.word	0x20000d68

0000766c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    766c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    766e:	4604      	mov	r4, r0
    7670:	b150      	cbz	r0, 7688 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7672:	4b0d      	ldr	r3, [pc, #52]	; (76a8 <nrfx_clock_init+0x3c>)
    7674:	791b      	ldrb	r3, [r3, #4]
    7676:	b9ab      	cbnz	r3, 76a4 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    7678:	4b0b      	ldr	r3, [pc, #44]	; (76a8 <nrfx_clock_init+0x3c>)
    767a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    767c:	2201      	movs	r2, #1
    767e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    7680:	2200      	movs	r2, #0
    7682:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7684:	4809      	ldr	r0, [pc, #36]	; (76ac <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7686:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    7688:	4d09      	ldr	r5, [pc, #36]	; (76b0 <nrfx_clock_init+0x44>)
    768a:	f240 1315 	movw	r3, #277	; 0x115
    768e:	462a      	mov	r2, r5
    7690:	4908      	ldr	r1, [pc, #32]	; (76b4 <nrfx_clock_init+0x48>)
    7692:	4809      	ldr	r0, [pc, #36]	; (76b8 <nrfx_clock_init+0x4c>)
    7694:	f004 fd68 	bl	c168 <assert_print>
    7698:	f240 1115 	movw	r1, #277	; 0x115
    769c:	4628      	mov	r0, r5
    769e:	f004 fd5c 	bl	c15a <assert_post_action>
    76a2:	e7e6      	b.n	7672 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    76a4:	4805      	ldr	r0, [pc, #20]	; (76bc <nrfx_clock_init+0x50>)
    return err_code;
    76a6:	e7ee      	b.n	7686 <nrfx_clock_init+0x1a>
    76a8:	20000d68 	.word	0x20000d68
    76ac:	0bad0000 	.word	0x0bad0000
    76b0:	0000f070 	.word	0x0000f070
    76b4:	0000f0e4 	.word	0x0000f0e4
    76b8:	0000d51c 	.word	0x0000d51c
    76bc:	0bad000c 	.word	0x0bad000c

000076c0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    76c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    76c2:	4b0f      	ldr	r3, [pc, #60]	; (7700 <nrfx_clock_enable+0x40>)
    76c4:	791b      	ldrb	r3, [r3, #4]
    76c6:	b153      	cbz	r3, 76de <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    76c8:	2000      	movs	r0, #0
    76ca:	f7fc ff03 	bl	44d4 <arch_irq_is_enabled>
    76ce:	b1a0      	cbz	r0, 76fa <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    76d0:	f005 fb9c 	bl	ce0c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    76d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76d8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    76dc:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    76de:	4c09      	ldr	r4, [pc, #36]	; (7704 <nrfx_clock_enable+0x44>)
    76e0:	f44f 7397 	mov.w	r3, #302	; 0x12e
    76e4:	4622      	mov	r2, r4
    76e6:	4908      	ldr	r1, [pc, #32]	; (7708 <nrfx_clock_enable+0x48>)
    76e8:	4808      	ldr	r0, [pc, #32]	; (770c <nrfx_clock_enable+0x4c>)
    76ea:	f004 fd3d 	bl	c168 <assert_print>
    76ee:	f44f 7197 	mov.w	r1, #302	; 0x12e
    76f2:	4620      	mov	r0, r4
    76f4:	f004 fd31 	bl	c15a <assert_post_action>
    76f8:	e7e6      	b.n	76c8 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    76fa:	f7fc fedd 	bl	44b8 <arch_irq_enable>
    76fe:	e7e7      	b.n	76d0 <nrfx_clock_enable+0x10>
    7700:	20000d68 	.word	0x20000d68
    7704:	0000f070 	.word	0x0000f070
    7708:	0000f0f4 	.word	0x0000f0f4
    770c:	0000d51c 	.word	0x0000d51c

00007710 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    7710:	b530      	push	{r4, r5, lr}
    7712:	b083      	sub	sp, #12
    7714:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7716:	4b34      	ldr	r3, [pc, #208]	; (77e8 <nrfx_clock_start+0xd8>)
    7718:	791b      	ldrb	r3, [r3, #4]
    771a:	b183      	cbz	r3, 773e <nrfx_clock_start+0x2e>
    switch (domain)
    771c:	b1ec      	cbz	r4, 775a <nrfx_clock_start+0x4a>
    771e:	2c01      	cmp	r4, #1
    7720:	d055      	beq.n	77ce <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    7722:	4c32      	ldr	r4, [pc, #200]	; (77ec <nrfx_clock_start+0xdc>)
    7724:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    7728:	4622      	mov	r2, r4
    772a:	4931      	ldr	r1, [pc, #196]	; (77f0 <nrfx_clock_start+0xe0>)
    772c:	4831      	ldr	r0, [pc, #196]	; (77f4 <nrfx_clock_start+0xe4>)
    772e:	f004 fd1b 	bl	c168 <assert_print>
    7732:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    7736:	4620      	mov	r0, r4
    7738:	f004 fd0f 	bl	c15a <assert_post_action>
            break;
    }
}
    773c:	e052      	b.n	77e4 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    773e:	4d2b      	ldr	r5, [pc, #172]	; (77ec <nrfx_clock_start+0xdc>)
    7740:	f44f 73b4 	mov.w	r3, #360	; 0x168
    7744:	462a      	mov	r2, r5
    7746:	492c      	ldr	r1, [pc, #176]	; (77f8 <nrfx_clock_start+0xe8>)
    7748:	482a      	ldr	r0, [pc, #168]	; (77f4 <nrfx_clock_start+0xe4>)
    774a:	f004 fd0d 	bl	c168 <assert_print>
    774e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    7752:	4628      	mov	r0, r5
    7754:	f004 fd01 	bl	c15a <assert_post_action>
    7758:	e7e0      	b.n	771c <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    775a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    775e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7762:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7766:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7768:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    776c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7770:	d117      	bne.n	77a2 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7772:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7776:	f013 0f01 	tst.w	r3, #1
    777a:	d116      	bne.n	77aa <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    777c:	f005 fb46 	bl	ce0c <clock_initial_lfclksrc_get>
    7780:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7786:	9a01      	ldr	r2, [sp, #4]
    7788:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    778c:	2200      	movs	r2, #0
    778e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7792:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    7796:	2202      	movs	r2, #2
    7798:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    779c:	2201      	movs	r2, #1
    779e:	609a      	str	r2, [r3, #8]
}
    77a0:	e020      	b.n	77e4 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    77a2:	a801      	add	r0, sp, #4
    77a4:	f005 fb34 	bl	ce10 <clock_lfclksrc_tweak>
    77a8:	e7eb      	b.n	7782 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    77aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77ae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    77b2:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    77b6:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    77b8:	a801      	add	r0, sp, #4
    77ba:	f005 fb29 	bl	ce10 <clock_lfclksrc_tweak>
    77be:	2800      	cmp	r0, #0
    77c0:	d0df      	beq.n	7782 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    77c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77c6:	2202      	movs	r2, #2
    77c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    77cc:	e00a      	b.n	77e4 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77d2:	2200      	movs	r2, #0
    77d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    77d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    77dc:	2201      	movs	r2, #1
    77de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77e2:	601a      	str	r2, [r3, #0]
}
    77e4:	b003      	add	sp, #12
    77e6:	bd30      	pop	{r4, r5, pc}
    77e8:	20000d68 	.word	0x20000d68
    77ec:	0000f070 	.word	0x0000f070
    77f0:	0000d6e0 	.word	0x0000d6e0
    77f4:	0000d51c 	.word	0x0000d51c
    77f8:	0000f0f4 	.word	0x0000f0f4

000077fc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    77fc:	b538      	push	{r3, r4, r5, lr}
    77fe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    7800:	4b0a      	ldr	r3, [pc, #40]	; (782c <nrfx_clock_stop+0x30>)
    7802:	791b      	ldrb	r3, [r3, #4]
    7804:	b11b      	cbz	r3, 780e <nrfx_clock_stop+0x12>
    clock_stop(domain);
    7806:	4620      	mov	r0, r4
    7808:	f7ff fea4 	bl	7554 <clock_stop>
}
    780c:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    780e:	4d08      	ldr	r5, [pc, #32]	; (7830 <nrfx_clock_stop+0x34>)
    7810:	f240 13ad 	movw	r3, #429	; 0x1ad
    7814:	462a      	mov	r2, r5
    7816:	4907      	ldr	r1, [pc, #28]	; (7834 <nrfx_clock_stop+0x38>)
    7818:	4807      	ldr	r0, [pc, #28]	; (7838 <nrfx_clock_stop+0x3c>)
    781a:	f004 fca5 	bl	c168 <assert_print>
    781e:	f240 11ad 	movw	r1, #429	; 0x1ad
    7822:	4628      	mov	r0, r5
    7824:	f004 fc99 	bl	c15a <assert_post_action>
    7828:	e7ed      	b.n	7806 <nrfx_clock_stop+0xa>
    782a:	bf00      	nop
    782c:	20000d68 	.word	0x20000d68
    7830:	0000f070 	.word	0x0000f070
    7834:	0000f0f4 	.word	0x0000f0f4
    7838:	0000d51c 	.word	0x0000d51c

0000783c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    783c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    783e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7842:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7846:	b18b      	cbz	r3, 786c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    784c:	2200      	movs	r2, #0
    784e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7852:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    7856:	2201      	movs	r2, #1
    7858:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    785c:	4b15      	ldr	r3, [pc, #84]	; (78b4 <nrfx_power_clock_irq_handler+0x78>)
    785e:	795b      	ldrb	r3, [r3, #5]
    7860:	b923      	cbnz	r3, 786c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    7862:	4b14      	ldr	r3, [pc, #80]	; (78b4 <nrfx_power_clock_irq_handler+0x78>)
    7864:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	2000      	movs	r0, #0
    786a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    786c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7870:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7874:	b19b      	cbz	r3, 789e <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    787a:	2200      	movs	r2, #0
    787c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7880:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7884:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7888:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    788c:	f012 0f03 	tst.w	r2, #3
    7890:	d106      	bne.n	78a0 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7896:	2201      	movs	r2, #1
    7898:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    789c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    789e:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    78a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78a4:	2202      	movs	r2, #2
    78a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    78aa:	4b02      	ldr	r3, [pc, #8]	; (78b4 <nrfx_power_clock_irq_handler+0x78>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	2001      	movs	r0, #1
    78b0:	4798      	blx	r3
}
    78b2:	e7f4      	b.n	789e <nrfx_power_clock_irq_handler+0x62>
    78b4:	20000d68 	.word	0x20000d68

000078b8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    78b8:	3008      	adds	r0, #8
    78ba:	4b03      	ldr	r3, [pc, #12]	; (78c8 <pin_in_use+0x10>)
    78bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78c0:	f000 0001 	and.w	r0, r0, #1
    78c4:	4770      	bx	lr
    78c6:	bf00      	nop
    78c8:	200000f4 	.word	0x200000f4

000078cc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    78cc:	3008      	adds	r0, #8
    78ce:	4b03      	ldr	r3, [pc, #12]	; (78dc <pin_in_use_by_te+0x10>)
    78d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    78d8:	4770      	bx	lr
    78da:	bf00      	nop
    78dc:	200000f4 	.word	0x200000f4

000078e0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    78e0:	3008      	adds	r0, #8
    78e2:	4b04      	ldr	r3, [pc, #16]	; (78f4 <pin_has_trigger+0x14>)
    78e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    78e8:	f010 001c 	ands.w	r0, r0, #28
    78ec:	bf18      	it	ne
    78ee:	2001      	movne	r0, #1
    78f0:	4770      	bx	lr
    78f2:	bf00      	nop
    78f4:	200000f4 	.word	0x200000f4

000078f8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    78f8:	3008      	adds	r0, #8
    78fa:	4b03      	ldr	r3, [pc, #12]	; (7908 <pin_is_output+0x10>)
    78fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7900:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7904:	4770      	bx	lr
    7906:	bf00      	nop
    7908:	200000f4 	.word	0x200000f4

0000790c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    790c:	3008      	adds	r0, #8
    790e:	4b02      	ldr	r3, [pc, #8]	; (7918 <pin_te_get+0xc>)
    7910:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7914:	0b40      	lsrs	r0, r0, #13
    7916:	4770      	bx	lr
    7918:	200000f4 	.word	0x200000f4

0000791c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    791c:	2200      	movs	r2, #0
    791e:	e004      	b.n	792a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7924:	4283      	cmp	r3, r0
    7926:	d00f      	beq.n	7948 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7928:	3201      	adds	r2, #1
    792a:	2a2f      	cmp	r2, #47	; 0x2f
    792c:	d80a      	bhi.n	7944 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    792e:	f102 0308 	add.w	r3, r2, #8
    7932:	4906      	ldr	r1, [pc, #24]	; (794c <handler_in_use+0x30>)
    7934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7938:	f413 7f80 	tst.w	r3, #256	; 0x100
    793c:	d0f0      	beq.n	7920 <handler_in_use+0x4>
    793e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7942:	e7ef      	b.n	7924 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    7944:	2000      	movs	r0, #0
    7946:	4770      	bx	lr
            return true;
    7948:	2001      	movs	r0, #1
}
    794a:	4770      	bx	lr
    794c:	200000f4 	.word	0x200000f4

00007950 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7950:	2300      	movs	r3, #0
    7952:	b113      	cbz	r3, 795a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    7954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7958:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    795a:	4a07      	ldr	r2, [pc, #28]	; (7978 <find_handler+0x28>)
    795c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7960:	4282      	cmp	r2, r0
    7962:	d001      	beq.n	7968 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7964:	3301      	adds	r3, #1
    7966:	e7f4      	b.n	7952 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7968:	4a03      	ldr	r2, [pc, #12]	; (7978 <find_handler+0x28>)
    796a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    796e:	6852      	ldr	r2, [r2, #4]
    7970:	428a      	cmp	r2, r1
    7972:	d1f7      	bne.n	7964 <find_handler+0x14>
            return i;
    7974:	4618      	mov	r0, r3
    7976:	4770      	bx	lr
    7978:	200000f4 	.word	0x200000f4

0000797c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    797c:	3008      	adds	r0, #8
    797e:	4b06      	ldr	r3, [pc, #24]	; (7998 <channel_handler_get+0x1c>)
    7980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    7984:	f410 7f80 	tst.w	r0, #256	; 0x100
    7988:	d004      	beq.n	7994 <channel_handler_get+0x18>
    798a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    798e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7992:	4770      	bx	lr
        return NULL;
    7994:	2000      	movs	r0, #0
}
    7996:	4770      	bx	lr
    7998:	200000f4 	.word	0x200000f4

0000799c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    799c:	b570      	push	{r4, r5, r6, lr}
    799e:	4604      	mov	r4, r0
    79a0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    79a2:	f7ff ffeb 	bl	797c <channel_handler_get>

    if (handler)
    79a6:	b120      	cbz	r0, 79b2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    79a8:	6806      	ldr	r6, [r0, #0]
    79aa:	6842      	ldr	r2, [r0, #4]
    79ac:	4629      	mov	r1, r5
    79ae:	4620      	mov	r0, r4
    79b0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    79b2:	4b04      	ldr	r3, [pc, #16]	; (79c4 <call_handler+0x28>)
    79b4:	689b      	ldr	r3, [r3, #8]
    79b6:	b123      	cbz	r3, 79c2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    79b8:	4a02      	ldr	r2, [pc, #8]	; (79c4 <call_handler+0x28>)
    79ba:	68d2      	ldr	r2, [r2, #12]
    79bc:	4629      	mov	r1, r5
    79be:	4620      	mov	r0, r4
    79c0:	4798      	blx	r3
    }
}
    79c2:	bd70      	pop	{r4, r5, r6, pc}
    79c4:	200000f4 	.word	0x200000f4

000079c8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79c8:	f100 0208 	add.w	r2, r0, #8
    79cc:	4b16      	ldr	r3, [pc, #88]	; (7a28 <release_handler+0x60>)
    79ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    79d2:	f413 7f80 	tst.w	r3, #256	; 0x100
    79d6:	d026      	beq.n	7a26 <release_handler+0x5e>
{
    79d8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    79da:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    79de:	4610      	mov	r0, r2
    79e0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    79e4:	4a10      	ldr	r2, [pc, #64]	; (7a28 <release_handler+0x60>)
    79e6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    79ea:	4620      	mov	r0, r4
    79ec:	f7ff ff96 	bl	791c <handler_in_use>
    79f0:	b100      	cbz	r0, 79f4 <release_handler+0x2c>
}
    79f2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    79f4:	480c      	ldr	r0, [pc, #48]	; (7a28 <release_handler+0x60>)
    79f6:	2300      	movs	r3, #0
    79f8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    79fc:	4621      	mov	r1, r4
    79fe:	3074      	adds	r0, #116	; 0x74
    7a00:	f7ff fd86 	bl	7510 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    7a04:	4b09      	ldr	r3, [pc, #36]	; (7a2c <release_handler+0x64>)
    7a06:	4298      	cmp	r0, r3
    7a08:	d0f3      	beq.n	79f2 <release_handler+0x2a>
    7a0a:	4c09      	ldr	r4, [pc, #36]	; (7a30 <release_handler+0x68>)
    7a0c:	f44f 7399 	mov.w	r3, #306	; 0x132
    7a10:	4622      	mov	r2, r4
    7a12:	4908      	ldr	r1, [pc, #32]	; (7a34 <release_handler+0x6c>)
    7a14:	4808      	ldr	r0, [pc, #32]	; (7a38 <release_handler+0x70>)
    7a16:	f004 fba7 	bl	c168 <assert_print>
    7a1a:	f44f 7199 	mov.w	r1, #306	; 0x132
    7a1e:	4620      	mov	r0, r4
    7a20:	f004 fb9b 	bl	c15a <assert_post_action>
    7a24:	e7e5      	b.n	79f2 <release_handler+0x2a>
    7a26:	4770      	bx	lr
    7a28:	200000f4 	.word	0x200000f4
    7a2c:	0bad0000 	.word	0x0bad0000
    7a30:	0000f114 	.word	0x0000f114
    7a34:	0000f154 	.word	0x0000f154
    7a38:	0000d51c 	.word	0x0000d51c

00007a3c <pin_handler_trigger_uninit>:
{
    7a3c:	b510      	push	{r4, lr}
    7a3e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    7a40:	f7ff ff44 	bl	78cc <pin_in_use_by_te>
    7a44:	b140      	cbz	r0, 7a58 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7a46:	4620      	mov	r0, r4
    7a48:	f7ff ff60 	bl	790c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7a4c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7a50:	4b06      	ldr	r3, [pc, #24]	; (7a6c <pin_handler_trigger_uninit+0x30>)
    7a52:	2200      	movs	r2, #0
    7a54:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7a58:	4620      	mov	r0, r4
    7a5a:	f7ff ffb5 	bl	79c8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7a5e:	3408      	adds	r4, #8
    7a60:	4b03      	ldr	r3, [pc, #12]	; (7a70 <pin_handler_trigger_uninit+0x34>)
    7a62:	2200      	movs	r2, #0
    7a64:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7a68:	bd10      	pop	{r4, pc}
    7a6a:	bf00      	nop
    7a6c:	40006000 	.word	0x40006000
    7a70:	200000f4 	.word	0x200000f4

00007a74 <pin_handler_set>:
{
    7a74:	b570      	push	{r4, r5, r6, lr}
    7a76:	b082      	sub	sp, #8
    7a78:	4606      	mov	r6, r0
    7a7a:	460c      	mov	r4, r1
    7a7c:	4615      	mov	r5, r2
    release_handler(pin);
    7a7e:	f7ff ffa3 	bl	79c8 <release_handler>
    if (!handler)
    7a82:	b324      	cbz	r4, 7ace <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    7a84:	4629      	mov	r1, r5
    7a86:	4620      	mov	r0, r4
    7a88:	f7ff ff62 	bl	7950 <find_handler>
    if (handler_id < 0)
    7a8c:	1e03      	subs	r3, r0, #0
    7a8e:	db13      	blt.n	7ab8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7a90:	4a10      	ldr	r2, [pc, #64]	; (7ad4 <pin_handler_set+0x60>)
    7a92:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7a96:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7a9a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7a9c:	025b      	lsls	r3, r3, #9
    7a9e:	b29b      	uxth	r3, r3
    7aa0:	f106 0008 	add.w	r0, r6, #8
    7aa4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    7aa8:	430b      	orrs	r3, r1
    7aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7aae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    7ab2:	4809      	ldr	r0, [pc, #36]	; (7ad8 <pin_handler_set+0x64>)
}
    7ab4:	b002      	add	sp, #8
    7ab6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7ab8:	f10d 0107 	add.w	r1, sp, #7
    7abc:	4807      	ldr	r0, [pc, #28]	; (7adc <pin_handler_set+0x68>)
    7abe:	f7ff fcff 	bl	74c0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7ac2:	4b05      	ldr	r3, [pc, #20]	; (7ad8 <pin_handler_set+0x64>)
    7ac4:	4298      	cmp	r0, r3
    7ac6:	d1f5      	bne.n	7ab4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    7ac8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7acc:	e7e0      	b.n	7a90 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    7ace:	4802      	ldr	r0, [pc, #8]	; (7ad8 <pin_handler_set+0x64>)
    7ad0:	e7f0      	b.n	7ab4 <pin_handler_set+0x40>
    7ad2:	bf00      	nop
    7ad4:	200000f4 	.word	0x200000f4
    7ad8:	0bad0000 	.word	0x0bad0000
    7adc:	20000168 	.word	0x20000168

00007ae0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7ae0:	b538      	push	{r3, r4, r5, lr}
    7ae2:	4604      	mov	r4, r0
    while (mask)
    7ae4:	e018      	b.n	7b18 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    7ae6:	fa94 f3a4 	rbit	r3, r4
    7aea:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7aee:	2201      	movs	r2, #1
    7af0:	409a      	lsls	r2, r3
    7af2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7af6:	4a0a      	ldr	r2, [pc, #40]	; (7b20 <gpiote_evt_handle+0x40>)
    7af8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7afc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7b00:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7b08:	f3c0 4001 	ubfx	r0, r0, #16, #2
    7b0c:	f005 f9ac 	bl	ce68 <gpiote_polarity_to_trigger>
    7b10:	4601      	mov	r1, r0
    7b12:	4628      	mov	r0, r5
    7b14:	f7ff ff42 	bl	799c <call_handler>
    while (mask)
    7b18:	2c00      	cmp	r4, #0
    7b1a:	d1e4      	bne.n	7ae6 <gpiote_evt_handle+0x6>
    }
}
    7b1c:	bd38      	pop	{r3, r4, r5, pc}
    7b1e:	bf00      	nop
    7b20:	40006000 	.word	0x40006000

00007b24 <latch_pending_read_and_check>:
{
    7b24:	b082      	sub	sp, #8
    7b26:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7b28:	4b11      	ldr	r3, [pc, #68]	; (7b70 <latch_pending_read_and_check+0x4c>)
    7b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
    7b2e:	ab02      	add	r3, sp, #8
    7b30:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7b34:	4660      	mov	r0, ip
    7b36:	2300      	movs	r3, #0
    7b38:	e00b      	b.n	7b52 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    7b3a:	aa02      	add	r2, sp, #8
    7b3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7b40:	f852 2c08 	ldr.w	r2, [r2, #-8]
    7b44:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7b48:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7b4c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7b50:	3301      	adds	r3, #1
    7b52:	2b01      	cmp	r3, #1
    7b54:	d9f1      	bls.n	7b3a <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7b56:	2300      	movs	r3, #0
    7b58:	2b01      	cmp	r3, #1
    7b5a:	d804      	bhi.n	7b66 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    7b5c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    7b60:	b922      	cbnz	r2, 7b6c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7b62:	3301      	adds	r3, #1
    7b64:	e7f8      	b.n	7b58 <latch_pending_read_and_check+0x34>
    return false;
    7b66:	2000      	movs	r0, #0
}
    7b68:	b002      	add	sp, #8
    7b6a:	4770      	bx	lr
            return true;
    7b6c:	2001      	movs	r0, #1
    7b6e:	e7fb      	b.n	7b68 <latch_pending_read_and_check+0x44>
    7b70:	0000d420 	.word	0x0000d420

00007b74 <next_sense_cond_call_handler>:
{
    7b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b78:	4604      	mov	r4, r0
    7b7a:	460d      	mov	r5, r1
    7b7c:	4616      	mov	r6, r2
    if (is_level(trigger))
    7b7e:	4608      	mov	r0, r1
    7b80:	f005 f974 	bl	ce6c <is_level>
    7b84:	bb60      	cbnz	r0, 7be0 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7b86:	2e02      	cmp	r6, #2
    7b88:	f000 80f5 	beq.w	7d76 <next_sense_cond_call_handler+0x202>
    7b8c:	f04f 0802 	mov.w	r8, #2
    switch (port)
    7b90:	0963      	lsrs	r3, r4, #5
    7b92:	f000 80f3 	beq.w	7d7c <next_sense_cond_call_handler+0x208>
    7b96:	2b01      	cmp	r3, #1
    7b98:	f040 80f3 	bne.w	7d82 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    7b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7ba0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ba4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ba6:	f013 0f01 	tst.w	r3, #1
    7baa:	f000 80ec 	beq.w	7d86 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    7bae:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7bb2:	0963      	lsrs	r3, r4, #5
    7bb4:	f000 80f5 	beq.w	7da2 <next_sense_cond_call_handler+0x22e>
    7bb8:	2b01      	cmp	r3, #1
    7bba:	f000 80f5 	beq.w	7da8 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    7bbe:	f8df 9224 	ldr.w	r9, [pc, #548]	; 7de4 <next_sense_cond_call_handler+0x270>
    7bc2:	f240 232e 	movw	r3, #558	; 0x22e
    7bc6:	464a      	mov	r2, r9
    7bc8:	4987      	ldr	r1, [pc, #540]	; (7de8 <next_sense_cond_call_handler+0x274>)
    7bca:	4888      	ldr	r0, [pc, #544]	; (7dec <next_sense_cond_call_handler+0x278>)
    7bcc:	f004 facc 	bl	c168 <assert_print>
    7bd0:	f240 212e 	movw	r1, #558	; 0x22e
    7bd4:	4648      	mov	r0, r9
    7bd6:	f004 fac0 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7bda:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7bde:	e0e4      	b.n	7daa <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    7be0:	4629      	mov	r1, r5
    7be2:	4620      	mov	r0, r4
    7be4:	f7ff feda 	bl	799c <call_handler>
    switch (port)
    7be8:	0963      	lsrs	r3, r4, #5
    7bea:	d01f      	beq.n	7c2c <next_sense_cond_call_handler+0xb8>
    7bec:	2b01      	cmp	r3, #1
    7bee:	d120      	bne.n	7c32 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    7bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7bf4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7bf8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7bfa:	f013 0f01 	tst.w	r3, #1
    7bfe:	d01a      	beq.n	7c36 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    7c00:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c04:	0963      	lsrs	r3, r4, #5
    7c06:	d024      	beq.n	7c52 <next_sense_cond_call_handler+0xde>
    7c08:	2b01      	cmp	r3, #1
    7c0a:	d025      	beq.n	7c58 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    7c0c:	4f75      	ldr	r7, [pc, #468]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7c0e:	f240 232e 	movw	r3, #558	; 0x22e
    7c12:	463a      	mov	r2, r7
    7c14:	4974      	ldr	r1, [pc, #464]	; (7de8 <next_sense_cond_call_handler+0x274>)
    7c16:	4875      	ldr	r0, [pc, #468]	; (7dec <next_sense_cond_call_handler+0x278>)
    7c18:	f004 faa6 	bl	c168 <assert_print>
    7c1c:	f240 212e 	movw	r1, #558	; 0x22e
    7c20:	4638      	mov	r0, r7
    7c22:	f004 fa9a 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7c2a:	e016      	b.n	7c5a <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    7c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c30:	e7e0      	b.n	7bf4 <next_sense_cond_call_handler+0x80>
    switch (port)
    7c32:	2300      	movs	r3, #0
    7c34:	e7de      	b.n	7bf4 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c36:	4d6b      	ldr	r5, [pc, #428]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7c38:	f240 2329 	movw	r3, #553	; 0x229
    7c3c:	462a      	mov	r2, r5
    7c3e:	496c      	ldr	r1, [pc, #432]	; (7df0 <next_sense_cond_call_handler+0x27c>)
    7c40:	486a      	ldr	r0, [pc, #424]	; (7dec <next_sense_cond_call_handler+0x278>)
    7c42:	f004 fa91 	bl	c168 <assert_print>
    7c46:	f240 2129 	movw	r1, #553	; 0x229
    7c4a:	4628      	mov	r0, r5
    7c4c:	f004 fa85 	bl	c15a <assert_post_action>
    7c50:	e7d6      	b.n	7c00 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    7c52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7c56:	e000      	b.n	7c5a <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c58:	4b66      	ldr	r3, [pc, #408]	; (7df4 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7c5a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7c5e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7c62:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7c66:	429e      	cmp	r6, r3
    7c68:	f040 80af 	bne.w	7dca <next_sense_cond_call_handler+0x256>
    switch (port)
    7c6c:	0963      	lsrs	r3, r4, #5
    7c6e:	d01f      	beq.n	7cb0 <next_sense_cond_call_handler+0x13c>
    7c70:	2b01      	cmp	r3, #1
    7c72:	d120      	bne.n	7cb6 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    7c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c78:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c7c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c7e:	f013 0f01 	tst.w	r3, #1
    7c82:	d01a      	beq.n	7cba <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    7c84:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c88:	0963      	lsrs	r3, r4, #5
    7c8a:	d024      	beq.n	7cd6 <next_sense_cond_call_handler+0x162>
    7c8c:	2b01      	cmp	r3, #1
    7c8e:	d025      	beq.n	7cdc <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    7c90:	4f54      	ldr	r7, [pc, #336]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7c92:	f240 232e 	movw	r3, #558	; 0x22e
    7c96:	463a      	mov	r2, r7
    7c98:	4953      	ldr	r1, [pc, #332]	; (7de8 <next_sense_cond_call_handler+0x274>)
    7c9a:	4854      	ldr	r0, [pc, #336]	; (7dec <next_sense_cond_call_handler+0x278>)
    7c9c:	f004 fa64 	bl	c168 <assert_print>
    7ca0:	f240 212e 	movw	r1, #558	; 0x22e
    7ca4:	4638      	mov	r0, r7
    7ca6:	f004 fa58 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7caa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7cae:	e016      	b.n	7cde <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    7cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cb4:	e7e0      	b.n	7c78 <next_sense_cond_call_handler+0x104>
    switch (port)
    7cb6:	2300      	movs	r3, #0
    7cb8:	e7de      	b.n	7c78 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7cba:	4d4a      	ldr	r5, [pc, #296]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7cbc:	f240 2329 	movw	r3, #553	; 0x229
    7cc0:	462a      	mov	r2, r5
    7cc2:	494b      	ldr	r1, [pc, #300]	; (7df0 <next_sense_cond_call_handler+0x27c>)
    7cc4:	4849      	ldr	r0, [pc, #292]	; (7dec <next_sense_cond_call_handler+0x278>)
    7cc6:	f004 fa4f 	bl	c168 <assert_print>
    7cca:	f240 2129 	movw	r1, #553	; 0x229
    7cce:	4628      	mov	r0, r5
    7cd0:	f004 fa43 	bl	c15a <assert_post_action>
    7cd4:	e7d6      	b.n	7c84 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    7cd6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7cda:	e000      	b.n	7cde <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cdc:	4945      	ldr	r1, [pc, #276]	; (7df4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7cde:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7ce2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7ce6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    7cee:	0963      	lsrs	r3, r4, #5
    7cf0:	d01f      	beq.n	7d32 <next_sense_cond_call_handler+0x1be>
    7cf2:	2b01      	cmp	r3, #1
    7cf4:	d120      	bne.n	7d38 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    7cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7cfa:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7cfe:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d00:	f013 0f01 	tst.w	r3, #1
    7d04:	d01a      	beq.n	7d3c <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    7d06:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d0a:	0964      	lsrs	r4, r4, #5
    7d0c:	d024      	beq.n	7d58 <next_sense_cond_call_handler+0x1e4>
    7d0e:	2c01      	cmp	r4, #1
    7d10:	d025      	beq.n	7d5e <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    7d12:	4c34      	ldr	r4, [pc, #208]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7d14:	f240 232e 	movw	r3, #558	; 0x22e
    7d18:	4622      	mov	r2, r4
    7d1a:	4933      	ldr	r1, [pc, #204]	; (7de8 <next_sense_cond_call_handler+0x274>)
    7d1c:	4833      	ldr	r0, [pc, #204]	; (7dec <next_sense_cond_call_handler+0x278>)
    7d1e:	f004 fa23 	bl	c168 <assert_print>
    7d22:	f240 212e 	movw	r1, #558	; 0x22e
    7d26:	4620      	mov	r0, r4
    7d28:	f004 fa17 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7d2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d30:	e016      	b.n	7d60 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    7d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d36:	e7e0      	b.n	7cfa <next_sense_cond_call_handler+0x186>
    switch (port)
    7d38:	2300      	movs	r3, #0
    7d3a:	e7de      	b.n	7cfa <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d3c:	4d29      	ldr	r5, [pc, #164]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7d3e:	f240 2329 	movw	r3, #553	; 0x229
    7d42:	462a      	mov	r2, r5
    7d44:	492a      	ldr	r1, [pc, #168]	; (7df0 <next_sense_cond_call_handler+0x27c>)
    7d46:	4829      	ldr	r0, [pc, #164]	; (7dec <next_sense_cond_call_handler+0x278>)
    7d48:	f004 fa0e 	bl	c168 <assert_print>
    7d4c:	f240 2129 	movw	r1, #553	; 0x229
    7d50:	4628      	mov	r0, r5
    7d52:	f004 fa02 	bl	c15a <assert_post_action>
    7d56:	e7d6      	b.n	7d06 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    7d58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7d5c:	e000      	b.n	7d60 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d5e:	4925      	ldr	r1, [pc, #148]	; (7df4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d60:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    7d64:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7d68:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d6c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7d70:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    7d74:	e029      	b.n	7dca <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7d76:	f04f 0803 	mov.w	r8, #3
    7d7a:	e709      	b.n	7b90 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    7d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d80:	e70e      	b.n	7ba0 <next_sense_cond_call_handler+0x2c>
    switch (port)
    7d82:	2300      	movs	r3, #0
    7d84:	e70c      	b.n	7ba0 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d86:	4f17      	ldr	r7, [pc, #92]	; (7de4 <next_sense_cond_call_handler+0x270>)
    7d88:	f240 2329 	movw	r3, #553	; 0x229
    7d8c:	463a      	mov	r2, r7
    7d8e:	4918      	ldr	r1, [pc, #96]	; (7df0 <next_sense_cond_call_handler+0x27c>)
    7d90:	4816      	ldr	r0, [pc, #88]	; (7dec <next_sense_cond_call_handler+0x278>)
    7d92:	f004 f9e9 	bl	c168 <assert_print>
    7d96:	f240 2129 	movw	r1, #553	; 0x229
    7d9a:	4638      	mov	r0, r7
    7d9c:	f004 f9dd 	bl	c15a <assert_post_action>
    7da0:	e705      	b.n	7bae <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    7da2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7da6:	e000      	b.n	7daa <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7da8:	4912      	ldr	r1, [pc, #72]	; (7df4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7daa:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    7dae:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7db2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7dba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7dbe:	2d03      	cmp	r5, #3
    7dc0:	d007      	beq.n	7dd2 <next_sense_cond_call_handler+0x25e>
    7dc2:	2e02      	cmp	r6, #2
    7dc4:	d003      	beq.n	7dce <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7dc6:	2e03      	cmp	r6, #3
    7dc8:	d008      	beq.n	7ddc <next_sense_cond_call_handler+0x268>
}
    7dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7dce:	2d01      	cmp	r5, #1
    7dd0:	d1f9      	bne.n	7dc6 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    7dd2:	4629      	mov	r1, r5
    7dd4:	4620      	mov	r0, r4
    7dd6:	f7ff fde1 	bl	799c <call_handler>
}
    7dda:	e7f6      	b.n	7dca <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7ddc:	2d02      	cmp	r5, #2
    7dde:	d1f4      	bne.n	7dca <next_sense_cond_call_handler+0x256>
    7de0:	e7f7      	b.n	7dd2 <next_sense_cond_call_handler+0x25e>
    7de2:	bf00      	nop
    7de4:	0000eef0 	.word	0x0000eef0
    7de8:	0000d6e0 	.word	0x0000d6e0
    7dec:	0000d51c 	.word	0x0000d51c
    7df0:	0000ef24 	.word	0x0000ef24
    7df4:	50000300 	.word	0x50000300

00007df8 <port_event_handle>:
{
    7df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dfc:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7dfe:	4a65      	ldr	r2, [pc, #404]	; (7f94 <port_event_handle+0x19c>)
    7e00:	466b      	mov	r3, sp
    7e02:	e892 0003 	ldmia.w	r2, {r0, r1}
    7e06:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    7e0a:	2300      	movs	r3, #0
    7e0c:	a802      	add	r0, sp, #8
    7e0e:	e00b      	b.n	7e28 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    7e10:	aa04      	add	r2, sp, #16
    7e12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7e16:	f852 2c10 	ldr.w	r2, [r2, #-16]
    7e1a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7e1e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7e22:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    7e26:	3301      	adds	r3, #1
    7e28:	2b01      	cmp	r3, #1
    7e2a:	d9f1      	bls.n	7e10 <port_event_handle+0x18>
    7e2c:	e0ad      	b.n	7f8a <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    7e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e32:	e07f      	b.n	7f34 <port_event_handle+0x13c>
    switch (port)
    7e34:	2300      	movs	r3, #0
    7e36:	e07d      	b.n	7f34 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e38:	4f57      	ldr	r7, [pc, #348]	; (7f98 <port_event_handle+0x1a0>)
    7e3a:	f240 2329 	movw	r3, #553	; 0x229
    7e3e:	463a      	mov	r2, r7
    7e40:	4956      	ldr	r1, [pc, #344]	; (7f9c <port_event_handle+0x1a4>)
    7e42:	4857      	ldr	r0, [pc, #348]	; (7fa0 <port_event_handle+0x1a8>)
    7e44:	f004 f990 	bl	c168 <assert_print>
    7e48:	f240 2129 	movw	r1, #553	; 0x229
    7e4c:	4638      	mov	r0, r7
    7e4e:	f004 f984 	bl	c15a <assert_post_action>
    7e52:	e076      	b.n	7f42 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    7e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7e58:	e000      	b.n	7e5c <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e5a:	4b52      	ldr	r3, [pc, #328]	; (7fa4 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7e5c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    7e60:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    7e64:	f3c2 4201 	ubfx	r2, r2, #16, #2
    7e68:	4631      	mov	r1, r6
    7e6a:	4620      	mov	r0, r4
    7e6c:	f7ff fe82 	bl	7b74 <next_sense_cond_call_handler>
    switch (port)
    7e70:	0963      	lsrs	r3, r4, #5
    7e72:	d01f      	beq.n	7eb4 <port_event_handle+0xbc>
    7e74:	2b01      	cmp	r3, #1
    7e76:	d120      	bne.n	7eba <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    7e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7e7c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7e80:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e82:	f013 0f01 	tst.w	r3, #1
    7e86:	d01a      	beq.n	7ebe <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    7e88:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e8c:	0964      	lsrs	r4, r4, #5
    7e8e:	d024      	beq.n	7eda <port_event_handle+0xe2>
    7e90:	2c01      	cmp	r4, #1
    7e92:	d025      	beq.n	7ee0 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    7e94:	4c40      	ldr	r4, [pc, #256]	; (7f98 <port_event_handle+0x1a0>)
    7e96:	f240 232e 	movw	r3, #558	; 0x22e
    7e9a:	4622      	mov	r2, r4
    7e9c:	4942      	ldr	r1, [pc, #264]	; (7fa8 <port_event_handle+0x1b0>)
    7e9e:	4840      	ldr	r0, [pc, #256]	; (7fa0 <port_event_handle+0x1a8>)
    7ea0:	f004 f962 	bl	c168 <assert_print>
    7ea4:	f240 212e 	movw	r1, #558	; 0x22e
    7ea8:	4620      	mov	r0, r4
    7eaa:	f004 f956 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7eae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7eb2:	e016      	b.n	7ee2 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    7eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7eb8:	e7e0      	b.n	7e7c <port_event_handle+0x84>
    switch (port)
    7eba:	2300      	movs	r3, #0
    7ebc:	e7de      	b.n	7e7c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ebe:	4e36      	ldr	r6, [pc, #216]	; (7f98 <port_event_handle+0x1a0>)
    7ec0:	f240 2329 	movw	r3, #553	; 0x229
    7ec4:	4632      	mov	r2, r6
    7ec6:	4935      	ldr	r1, [pc, #212]	; (7f9c <port_event_handle+0x1a4>)
    7ec8:	4835      	ldr	r0, [pc, #212]	; (7fa0 <port_event_handle+0x1a8>)
    7eca:	f004 f94d 	bl	c168 <assert_print>
    7ece:	f240 2129 	movw	r1, #553	; 0x229
    7ed2:	4630      	mov	r0, r6
    7ed4:	f004 f941 	bl	c15a <assert_post_action>
    7ed8:	e7d6      	b.n	7e88 <port_event_handle+0x90>
        case 0: return NRF_P0;
    7eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7ede:	e000      	b.n	7ee2 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ee0:	4a30      	ldr	r2, [pc, #192]	; (7fa4 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    7ee2:	2301      	movs	r3, #1
    7ee4:	40b3      	lsls	r3, r6
    7ee6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    7eea:	ab04      	add	r3, sp, #16
    7eec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7ef0:	f853 4c08 	ldr.w	r4, [r3, #-8]
    7ef4:	2c00      	cmp	r4, #0
    7ef6:	d03b      	beq.n	7f70 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    7ef8:	fa94 f4a4 	rbit	r4, r4
    7efc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7f00:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7f04:	f104 0208 	add.w	r2, r4, #8
    7f08:	4b28      	ldr	r3, [pc, #160]	; (7fac <port_event_handle+0x1b4>)
    7f0a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    7f0e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7f12:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    7f14:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7f18:	a802      	add	r0, sp, #8
    7f1a:	2301      	movs	r3, #1
    7f1c:	fa03 f202 	lsl.w	r2, r3, r2
    7f20:	5c43      	ldrb	r3, [r0, r1]
    7f22:	ea23 0302 	bic.w	r3, r3, r2
    7f26:	5443      	strb	r3, [r0, r1]
    switch (port)
    7f28:	0963      	lsrs	r3, r4, #5
    7f2a:	d080      	beq.n	7e2e <port_event_handle+0x36>
    7f2c:	2b01      	cmp	r3, #1
    7f2e:	d181      	bne.n	7e34 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    7f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7f34:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7f38:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f3a:	f013 0f01 	tst.w	r3, #1
    7f3e:	f43f af7b 	beq.w	7e38 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    7f42:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7f46:	0963      	lsrs	r3, r4, #5
    7f48:	d084      	beq.n	7e54 <port_event_handle+0x5c>
    7f4a:	2b01      	cmp	r3, #1
    7f4c:	d085      	beq.n	7e5a <port_event_handle+0x62>
            NRFX_ASSERT(0);
    7f4e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7f98 <port_event_handle+0x1a0>
    7f52:	f240 232e 	movw	r3, #558	; 0x22e
    7f56:	4642      	mov	r2, r8
    7f58:	4913      	ldr	r1, [pc, #76]	; (7fa8 <port_event_handle+0x1b0>)
    7f5a:	4811      	ldr	r0, [pc, #68]	; (7fa0 <port_event_handle+0x1a8>)
    7f5c:	f004 f904 	bl	c168 <assert_print>
    7f60:	f240 212e 	movw	r1, #558	; 0x22e
    7f64:	4640      	mov	r0, r8
    7f66:	f004 f8f8 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    7f6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7f6e:	e775      	b.n	7e5c <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7f70:	3501      	adds	r5, #1
    7f72:	2d01      	cmp	r5, #1
    7f74:	d9b9      	bls.n	7eea <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7f76:	4b0e      	ldr	r3, [pc, #56]	; (7fb0 <port_event_handle+0x1b8>)
    7f78:	2200      	movs	r2, #0
    7f7a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    7f7e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    7f82:	a802      	add	r0, sp, #8
    7f84:	f7ff fdce 	bl	7b24 <latch_pending_read_and_check>
    7f88:	b108      	cbz	r0, 7f8e <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7f8a:	2500      	movs	r5, #0
    7f8c:	e7f1      	b.n	7f72 <port_event_handle+0x17a>
}
    7f8e:	b004      	add	sp, #16
    7f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f94:	0000d420 	.word	0x0000d420
    7f98:	0000eef0 	.word	0x0000eef0
    7f9c:	0000ef24 	.word	0x0000ef24
    7fa0:	0000d51c 	.word	0x0000d51c
    7fa4:	50000300 	.word	0x50000300
    7fa8:	0000d6e0 	.word	0x0000d6e0
    7fac:	200000f4 	.word	0x200000f4
    7fb0:	40006000 	.word	0x40006000

00007fb4 <nrfx_gpiote_input_configure>:
{
    7fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fb8:	4604      	mov	r4, r0
    7fba:	4615      	mov	r5, r2
    7fbc:	461e      	mov	r6, r3
    if (p_input_config)
    7fbe:	2900      	cmp	r1, #0
    7fc0:	d064      	beq.n	808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
    7fc2:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    7fc4:	f004 ff3a 	bl	ce3c <pin_is_task_output>
    7fc8:	2800      	cmp	r0, #0
    7fca:	f040 80cd 	bne.w	8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    switch (port)
    7fce:	0963      	lsrs	r3, r4, #5
    7fd0:	d020      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    7fd2:	2b01      	cmp	r3, #1
    7fd4:	d121      	bne.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
            mask = P1_FEATURE_PINS_PRESENT;
    7fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7fda:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7fde:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7fe0:	f013 0f01 	tst.w	r3, #1
    7fe4:	d01b      	beq.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    *p_pin = pin_number & 0x1F;
    7fe6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fea:	0963      	lsrs	r3, r4, #5
    7fec:	d025      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    7fee:	2b01      	cmp	r3, #1
    7ff0:	d026      	beq.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
            NRFX_ASSERT(0);
    7ff2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>
    7ff6:	f240 232e 	movw	r3, #558	; 0x22e
    7ffa:	464a      	mov	r2, r9
    7ffc:	495f      	ldr	r1, [pc, #380]	; (817c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17c>)
    7ffe:	4860      	ldr	r0, [pc, #384]	; (8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    8000:	f004 f8b2 	bl	c168 <assert_print>
    8004:	f240 212e 	movw	r1, #558	; 0x22e
    8008:	4648      	mov	r0, r9
    800a:	f004 f8a6 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    800e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8012:	e016      	b.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
            mask = P0_FEATURE_PINS_PRESENT;
    8014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8018:	e7df      	b.n	7fda <nrfx_gpiote_input_configure+0x26>
    switch (port)
    801a:	2300      	movs	r3, #0
    801c:	e7dd      	b.n	7fda <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    801e:	4f56      	ldr	r7, [pc, #344]	; (8178 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178>)
    8020:	f240 2329 	movw	r3, #553	; 0x229
    8024:	463a      	mov	r2, r7
    8026:	4957      	ldr	r1, [pc, #348]	; (8184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x184>)
    8028:	4855      	ldr	r0, [pc, #340]	; (8180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x180>)
    802a:	f004 f89d 	bl	c168 <assert_print>
    802e:	f240 2129 	movw	r1, #553	; 0x229
    8032:	4638      	mov	r0, r7
    8034:	f004 f891 	bl	c15a <assert_post_action>
    8038:	e7d5      	b.n	7fe6 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    803a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    803e:	e000      	b.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8040:	4951      	ldr	r1, [pc, #324]	; (8188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8042:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    8046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    804a:	f1b8 0f00 	cmp.w	r8, #0
    804e:	d03f      	beq.n	80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    8050:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8052:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    8056:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    805a:	f1b8 0f00 	cmp.w	r8, #0
    805e:	d039      	beq.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    8060:	f898 2000 	ldrb.w	r2, [r8]
    8064:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8066:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    8068:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    806c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8070:	4a46      	ldr	r2, [pc, #280]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8072:	f104 0108 	add.w	r1, r4, #8
    8076:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    807a:	f023 0302 	bic.w	r3, r3, #2
    807e:	b29b      	uxth	r3, r3
    8080:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8084:	f043 0301 	orr.w	r3, r3, #1
    8088:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    808c:	b1bd      	cbz	r5, 80be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    808e:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8090:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    8094:	4620      	mov	r0, r4
    8096:	f7ff fc2f 	bl	78f8 <pin_is_output>
    809a:	b1e8      	cbz	r0, 80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
            if (use_evt)
    809c:	f1b8 0f00 	cmp.w	r8, #0
    80a0:	d164      	bne.n	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    80a2:	4a3a      	ldr	r2, [pc, #232]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    80a4:	f104 0108 	add.w	r1, r4, #8
    80a8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    80ac:	f023 031c 	bic.w	r3, r3, #28
    80b0:	b29b      	uxth	r3, r3
    80b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    80b6:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    80ba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    80be:	2e00      	cmp	r6, #0
    80c0:	d058      	beq.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    80c2:	6872      	ldr	r2, [r6, #4]
    80c4:	6831      	ldr	r1, [r6, #0]
    80c6:	4620      	mov	r0, r4
    80c8:	f7ff fcd4 	bl	7a74 <pin_handler_set>
}
    80cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    80d0:	2200      	movs	r2, #0
    80d2:	e7be      	b.n	8052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    80d4:	2200      	movs	r2, #0
    80d6:	e7c6      	b.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    80d8:	4a2c      	ldr	r2, [pc, #176]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    80da:	f104 0108 	add.w	r1, r4, #8
    80de:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    80e2:	f023 0320 	bic.w	r3, r3, #32
    80e6:	04db      	lsls	r3, r3, #19
    80e8:	0cdb      	lsrs	r3, r3, #19
    80ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    80ee:	f1b8 0f00 	cmp.w	r8, #0
    80f2:	d0d6      	beq.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
                if (!edge)
    80f4:	2f03      	cmp	r7, #3
    80f6:	d83b      	bhi.n	8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
                uint8_t ch = *p_trigger_config->p_in_channel;
    80f8:	686b      	ldr	r3, [r5, #4]
    80fa:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    80fc:	b937      	cbnz	r7, 810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    p_reg->CONFIG[idx] = 0;
    80fe:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    8102:	4b23      	ldr	r3, [pc, #140]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    8104:	2200      	movs	r2, #0
    8106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    810a:	e7ca      	b.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    810c:	4638      	mov	r0, r7
    810e:	f004 feac 	bl	ce6a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8112:	4b1f      	ldr	r3, [pc, #124]	; (8190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190>)
    8114:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    8118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    811c:	f021 0103 	bic.w	r1, r1, #3
    8120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8128:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    812c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    8130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8134:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    8138:	0221      	lsls	r1, r4, #8
    813a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    813e:	0400      	lsls	r0, r0, #16
    8140:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8144:	4301      	orrs	r1, r0
    8146:	ea4c 0101 	orr.w	r1, ip, r1
    814a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    814e:	036b      	lsls	r3, r5, #13
    8150:	b29b      	uxth	r3, r3
    8152:	4a0e      	ldr	r2, [pc, #56]	; (818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>)
    8154:	f104 0108 	add.w	r1, r4, #8
    8158:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    815c:	4303      	orrs	r3, r0
    815e:	f043 0320 	orr.w	r3, r3, #32
    8162:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    8166:	e79c      	b.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
            return NRFX_ERROR_INVALID_PARAM;
    8168:	480a      	ldr	r0, [pc, #40]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    816a:	e7af      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
                return NRFX_ERROR_INVALID_PARAM;
    816c:	4809      	ldr	r0, [pc, #36]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    816e:	e7ad      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
                    return NRFX_ERROR_INVALID_PARAM;
    8170:	4808      	ldr	r0, [pc, #32]	; (8194 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194>)
    8172:	e7ab      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
        err = NRFX_SUCCESS;
    8174:	4808      	ldr	r0, [pc, #32]	; (8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>)
    8176:	e7a9      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    8178:	0000eef0 	.word	0x0000eef0
    817c:	0000d6e0 	.word	0x0000d6e0
    8180:	0000d51c 	.word	0x0000d51c
    8184:	0000ef24 	.word	0x0000ef24
    8188:	50000300 	.word	0x50000300
    818c:	200000f4 	.word	0x200000f4
    8190:	40006000 	.word	0x40006000
    8194:	0bad0004 	.word	0x0bad0004
    8198:	0bad0000 	.word	0x0bad0000

0000819c <nrfx_gpiote_output_configure>:
{
    819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81a0:	4604      	mov	r4, r0
    81a2:	4615      	mov	r5, r2
    if (p_config)
    81a4:	2900      	cmp	r1, #0
    81a6:	f000 8086 	beq.w	82b6 <nrfx_gpiote_output_configure+0x11a>
    81aa:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    81ac:	f004 fe55 	bl	ce5a <pin_is_input>
    81b0:	b128      	cbz	r0, 81be <nrfx_gpiote_output_configure+0x22>
    81b2:	4620      	mov	r0, r4
    81b4:	f7ff fb8a 	bl	78cc <pin_in_use_by_te>
    81b8:	2800      	cmp	r0, #0
    81ba:	f040 80ce 	bne.w	835a <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    81be:	4620      	mov	r0, r4
    81c0:	f7ff fb8e 	bl	78e0 <pin_has_trigger>
    81c4:	b118      	cbz	r0, 81ce <nrfx_gpiote_output_configure+0x32>
    81c6:	787b      	ldrb	r3, [r7, #1]
    81c8:	2b01      	cmp	r3, #1
    81ca:	f000 80c8 	beq.w	835e <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    81ce:	f107 0901 	add.w	r9, r7, #1
    81d2:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    81d6:	0963      	lsrs	r3, r4, #5
    81d8:	d020      	beq.n	821c <nrfx_gpiote_output_configure+0x80>
    81da:	2b01      	cmp	r3, #1
    81dc:	d121      	bne.n	8222 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    81de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    81e2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    81e6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81e8:	f013 0f01 	tst.w	r3, #1
    81ec:	d01b      	beq.n	8226 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    81ee:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81f2:	0963      	lsrs	r3, r4, #5
    81f4:	d025      	beq.n	8242 <nrfx_gpiote_output_configure+0xa6>
    81f6:	2b01      	cmp	r3, #1
    81f8:	d026      	beq.n	8248 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    81fa:	f8df a170 	ldr.w	sl, [pc, #368]	; 836c <nrfx_gpiote_output_configure+0x1d0>
    81fe:	f240 232e 	movw	r3, #558	; 0x22e
    8202:	4652      	mov	r2, sl
    8204:	495a      	ldr	r1, [pc, #360]	; (8370 <nrfx_gpiote_output_configure+0x1d4>)
    8206:	485b      	ldr	r0, [pc, #364]	; (8374 <nrfx_gpiote_output_configure+0x1d8>)
    8208:	f003 ffae 	bl	c168 <assert_print>
    820c:	f240 212e 	movw	r1, #558	; 0x22e
    8210:	4650      	mov	r0, sl
    8212:	f003 ffa2 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    8216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    821a:	e016      	b.n	824a <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8220:	e7df      	b.n	81e2 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    8222:	2300      	movs	r3, #0
    8224:	e7dd      	b.n	81e2 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8226:	4e51      	ldr	r6, [pc, #324]	; (836c <nrfx_gpiote_output_configure+0x1d0>)
    8228:	f240 2329 	movw	r3, #553	; 0x229
    822c:	4632      	mov	r2, r6
    822e:	4952      	ldr	r1, [pc, #328]	; (8378 <nrfx_gpiote_output_configure+0x1dc>)
    8230:	4850      	ldr	r0, [pc, #320]	; (8374 <nrfx_gpiote_output_configure+0x1d8>)
    8232:	f003 ff99 	bl	c168 <assert_print>
    8236:	f240 2129 	movw	r1, #553	; 0x229
    823a:	4630      	mov	r0, r6
    823c:	f003 ff8d 	bl	c15a <assert_post_action>
    8240:	e7d5      	b.n	81ee <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    8242:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8246:	e000      	b.n	824a <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8248:	4a4c      	ldr	r2, [pc, #304]	; (837c <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    824a:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    824e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8252:	f1b9 0f00 	cmp.w	r9, #0
    8256:	d04b      	beq.n	82f0 <nrfx_gpiote_output_configure+0x154>
    8258:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    825a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    825e:	f1b8 0f00 	cmp.w	r8, #0
    8262:	d047      	beq.n	82f4 <nrfx_gpiote_output_configure+0x158>
    8264:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8266:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8268:	2f00      	cmp	r7, #0
    826a:	d045      	beq.n	82f8 <nrfx_gpiote_output_configure+0x15c>
    826c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8270:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    8272:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8276:	f1b9 0f00 	cmp.w	r9, #0
    827a:	d03f      	beq.n	82fc <nrfx_gpiote_output_configure+0x160>
    827c:	787b      	ldrb	r3, [r7, #1]
    827e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8280:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8284:	f1b8 0f00 	cmp.w	r8, #0
    8288:	d03a      	beq.n	8300 <nrfx_gpiote_output_configure+0x164>
    828a:	78b8      	ldrb	r0, [r7, #2]
    828c:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    828e:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8290:	2f00      	cmp	r7, #0
    8292:	d037      	beq.n	8304 <nrfx_gpiote_output_configure+0x168>
    8294:	7838      	ldrb	r0, [r7, #0]
    8296:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8298:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    829a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    829c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    82a0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    82a4:	4a36      	ldr	r2, [pc, #216]	; (8380 <nrfx_gpiote_output_configure+0x1e4>)
    82a6:	f104 0108 	add.w	r1, r4, #8
    82aa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    82ae:	f043 0303 	orr.w	r3, r3, #3
    82b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    82b6:	2d00      	cmp	r5, #0
    82b8:	d053      	beq.n	8362 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    82ba:	4620      	mov	r0, r4
    82bc:	f004 fdcd 	bl	ce5a <pin_is_input>
    82c0:	2800      	cmp	r0, #0
    82c2:	d150      	bne.n	8366 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    82c4:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    82c6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    82ca:	4a2e      	ldr	r2, [pc, #184]	; (8384 <nrfx_gpiote_output_configure+0x1e8>)
    82cc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    82d0:	492b      	ldr	r1, [pc, #172]	; (8380 <nrfx_gpiote_output_configure+0x1e4>)
    82d2:	f104 0008 	add.w	r0, r4, #8
    82d6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    82da:	f022 0220 	bic.w	r2, r2, #32
    82de:	04d2      	lsls	r2, r2, #19
    82e0:	0cd2      	lsrs	r2, r2, #19
    82e2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    82e6:	786a      	ldrb	r2, [r5, #1]
    82e8:	b972      	cbnz	r2, 8308 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    82ea:	4827      	ldr	r0, [pc, #156]	; (8388 <nrfx_gpiote_output_configure+0x1ec>)
}
    82ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    82f0:	2300      	movs	r3, #0
    82f2:	e7b2      	b.n	825a <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    82f4:	2000      	movs	r0, #0
    82f6:	e7b6      	b.n	8266 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    82f8:	2000      	movs	r0, #0
    82fa:	e7b9      	b.n	8270 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    82fc:	2300      	movs	r3, #0
    82fe:	e7bf      	b.n	8280 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8300:	2000      	movs	r0, #0
    8302:	e7c4      	b.n	828e <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8304:	2000      	movs	r0, #0
    8306:	e7c7      	b.n	8298 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    8308:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    830a:	481e      	ldr	r0, [pc, #120]	; (8384 <nrfx_gpiote_output_configure+0x1e8>)
    830c:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    8310:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8314:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    8318:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    831c:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8320:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    8324:	0221      	lsls	r1, r4, #8
    8326:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    832a:	0412      	lsls	r2, r2, #16
    832c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8330:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8332:	0539      	lsls	r1, r7, #20
    8334:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8338:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    833a:	4332      	orrs	r2, r6
    833c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8340:	035b      	lsls	r3, r3, #13
    8342:	b29b      	uxth	r3, r3
    8344:	4a0e      	ldr	r2, [pc, #56]	; (8380 <nrfx_gpiote_output_configure+0x1e4>)
    8346:	3408      	adds	r4, #8
    8348:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    834c:	430b      	orrs	r3, r1
    834e:	f043 0320 	orr.w	r3, r3, #32
    8352:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    8356:	480c      	ldr	r0, [pc, #48]	; (8388 <nrfx_gpiote_output_configure+0x1ec>)
    8358:	e7c8      	b.n	82ec <nrfx_gpiote_output_configure+0x150>
    835a:	480c      	ldr	r0, [pc, #48]	; (838c <nrfx_gpiote_output_configure+0x1f0>)
    835c:	e7c6      	b.n	82ec <nrfx_gpiote_output_configure+0x150>
    835e:	480b      	ldr	r0, [pc, #44]	; (838c <nrfx_gpiote_output_configure+0x1f0>)
    8360:	e7c4      	b.n	82ec <nrfx_gpiote_output_configure+0x150>
    8362:	4809      	ldr	r0, [pc, #36]	; (8388 <nrfx_gpiote_output_configure+0x1ec>)
    8364:	e7c2      	b.n	82ec <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    8366:	4809      	ldr	r0, [pc, #36]	; (838c <nrfx_gpiote_output_configure+0x1f0>)
    8368:	e7c0      	b.n	82ec <nrfx_gpiote_output_configure+0x150>
    836a:	bf00      	nop
    836c:	0000eef0 	.word	0x0000eef0
    8370:	0000d6e0 	.word	0x0000d6e0
    8374:	0000d51c 	.word	0x0000d51c
    8378:	0000ef24 	.word	0x0000ef24
    837c:	50000300 	.word	0x50000300
    8380:	200000f4 	.word	0x200000f4
    8384:	40006000 	.word	0x40006000
    8388:	0bad0000 	.word	0x0bad0000
    838c:	0bad0004 	.word	0x0bad0004

00008390 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8390:	4b01      	ldr	r3, [pc, #4]	; (8398 <nrfx_gpiote_global_callback_set+0x8>)
    8392:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    8394:	60d9      	str	r1, [r3, #12]
}
    8396:	4770      	bx	lr
    8398:	200000f4 	.word	0x200000f4

0000839c <nrfx_gpiote_channel_get>:
{
    839c:	b570      	push	{r4, r5, r6, lr}
    839e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    83a0:	460d      	mov	r5, r1
    83a2:	b159      	cbz	r1, 83bc <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    83a4:	4620      	mov	r0, r4
    83a6:	f7ff fa91 	bl	78cc <pin_in_use_by_te>
    83aa:	b1a8      	cbz	r0, 83d8 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    83ac:	3408      	adds	r4, #8
    83ae:	4b0b      	ldr	r3, [pc, #44]	; (83dc <nrfx_gpiote_channel_get+0x40>)
    83b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    83b4:	0b5b      	lsrs	r3, r3, #13
    83b6:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    83b8:	4809      	ldr	r0, [pc, #36]	; (83e0 <nrfx_gpiote_channel_get+0x44>)
}
    83ba:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    83bc:	4e09      	ldr	r6, [pc, #36]	; (83e4 <nrfx_gpiote_channel_get+0x48>)
    83be:	f240 2335 	movw	r3, #565	; 0x235
    83c2:	4632      	mov	r2, r6
    83c4:	4908      	ldr	r1, [pc, #32]	; (83e8 <nrfx_gpiote_channel_get+0x4c>)
    83c6:	4809      	ldr	r0, [pc, #36]	; (83ec <nrfx_gpiote_channel_get+0x50>)
    83c8:	f003 fece 	bl	c168 <assert_print>
    83cc:	f240 2135 	movw	r1, #565	; 0x235
    83d0:	4630      	mov	r0, r6
    83d2:	f003 fec2 	bl	c15a <assert_post_action>
    83d6:	e7e5      	b.n	83a4 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    83d8:	4805      	ldr	r0, [pc, #20]	; (83f0 <nrfx_gpiote_channel_get+0x54>)
    83da:	e7ee      	b.n	83ba <nrfx_gpiote_channel_get+0x1e>
    83dc:	200000f4 	.word	0x200000f4
    83e0:	0bad0000 	.word	0x0bad0000
    83e4:	0000f114 	.word	0x0000f114
    83e8:	0000f168 	.word	0x0000f168
    83ec:	0000d51c 	.word	0x0000d51c
    83f0:	0bad0004 	.word	0x0bad0004

000083f4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    83f4:	4b10      	ldr	r3, [pc, #64]	; (8438 <nrfx_gpiote_init+0x44>)
    83f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    83fa:	b10b      	cbz	r3, 8400 <nrfx_gpiote_init+0xc>
        return err_code;
    83fc:	480f      	ldr	r0, [pc, #60]	; (843c <nrfx_gpiote_init+0x48>)
}
    83fe:	4770      	bx	lr
{
    8400:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8402:	4c0d      	ldr	r4, [pc, #52]	; (8438 <nrfx_gpiote_init+0x44>)
    8404:	2260      	movs	r2, #96	; 0x60
    8406:	2100      	movs	r1, #0
    8408:	f104 0010 	add.w	r0, r4, #16
    840c:	f004 f873 	bl	c4f6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8410:	2006      	movs	r0, #6
    8412:	f7fc f851 	bl	44b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8416:	4b0a      	ldr	r3, [pc, #40]	; (8440 <nrfx_gpiote_init+0x4c>)
    8418:	2200      	movs	r2, #0
    841a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    841e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8426:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    842a:	2301      	movs	r3, #1
    842c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8430:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    8432:	4804      	ldr	r0, [pc, #16]	; (8444 <nrfx_gpiote_init+0x50>)
}
    8434:	bd10      	pop	{r4, pc}
    8436:	bf00      	nop
    8438:	200000f4 	.word	0x200000f4
    843c:	0bad0005 	.word	0x0bad0005
    8440:	40006000 	.word	0x40006000
    8444:	0bad0000 	.word	0x0bad0000

00008448 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8448:	4b03      	ldr	r3, [pc, #12]	; (8458 <nrfx_gpiote_is_init+0x10>)
    844a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    844e:	3800      	subs	r0, #0
    8450:	bf18      	it	ne
    8452:	2001      	movne	r0, #1
    8454:	4770      	bx	lr
    8456:	bf00      	nop
    8458:	200000f4 	.word	0x200000f4

0000845c <nrfx_gpiote_channel_free>:
{
    845c:	b508      	push	{r3, lr}
    845e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8460:	4801      	ldr	r0, [pc, #4]	; (8468 <nrfx_gpiote_channel_free+0xc>)
    8462:	f7ff f855 	bl	7510 <nrfx_flag32_free>
}
    8466:	bd08      	pop	{r3, pc}
    8468:	20000164 	.word	0x20000164

0000846c <nrfx_gpiote_channel_alloc>:
{
    846c:	b508      	push	{r3, lr}
    846e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8470:	4801      	ldr	r0, [pc, #4]	; (8478 <nrfx_gpiote_channel_alloc+0xc>)
    8472:	f7ff f825 	bl	74c0 <nrfx_flag32_alloc>
}
    8476:	bd08      	pop	{r3, pc}
    8478:	20000164 	.word	0x20000164

0000847c <nrfx_gpiote_trigger_enable>:
{
    847c:	b570      	push	{r4, r5, r6, lr}
    847e:	4604      	mov	r4, r0
    8480:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    8482:	f7ff fa2d 	bl	78e0 <pin_has_trigger>
    8486:	b1b8      	cbz	r0, 84b8 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8488:	4620      	mov	r0, r4
    848a:	f7ff fa1f 	bl	78cc <pin_in_use_by_te>
    848e:	b118      	cbz	r0, 8498 <nrfx_gpiote_trigger_enable+0x1c>
    8490:	4620      	mov	r0, r4
    8492:	f004 fce2 	bl	ce5a <pin_is_input>
    8496:	b9e8      	cbnz	r0, 84d4 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    8498:	2d00      	cmp	r5, #0
    849a:	d04c      	beq.n	8536 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    849c:	f104 0308 	add.w	r3, r4, #8
    84a0:	4a70      	ldr	r2, [pc, #448]	; (8664 <nrfx_gpiote_trigger_enable+0x1e8>)
    84a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    84a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    84aa:	2b04      	cmp	r3, #4
    84ac:	f000 8092 	beq.w	85d4 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    84b0:	2b05      	cmp	r3, #5
    84b2:	d14e      	bne.n	8552 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    84b4:	2602      	movs	r6, #2
    84b6:	e08e      	b.n	85d6 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    84b8:	4e6b      	ldr	r6, [pc, #428]	; (8668 <nrfx_gpiote_trigger_enable+0x1ec>)
    84ba:	f240 33df 	movw	r3, #991	; 0x3df
    84be:	4632      	mov	r2, r6
    84c0:	496a      	ldr	r1, [pc, #424]	; (866c <nrfx_gpiote_trigger_enable+0x1f0>)
    84c2:	486b      	ldr	r0, [pc, #428]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    84c4:	f003 fe50 	bl	c168 <assert_print>
    84c8:	f240 31df 	movw	r1, #991	; 0x3df
    84cc:	4630      	mov	r0, r6
    84ce:	f003 fe44 	bl	c15a <assert_post_action>
    84d2:	e7d9      	b.n	8488 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    84d4:	4620      	mov	r0, r4
    84d6:	f7ff fa19 	bl	790c <pin_te_get>
    84da:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    84dc:	2807      	cmp	r0, #7
    84de:	d81c      	bhi.n	851a <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    84e0:	00a3      	lsls	r3, r4, #2
    84e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    84e6:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    84e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    84ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    84f0:	2200      	movs	r2, #0
    84f2:	601a      	str	r2, [r3, #0]
    84f4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    84f6:	4a5f      	ldr	r2, [pc, #380]	; (8674 <nrfx_gpiote_trigger_enable+0x1f8>)
    84f8:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    84fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8500:	f043 0301 	orr.w	r3, r3, #1
    8504:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    8508:	2d00      	cmp	r5, #0
    850a:	f000 80a9 	beq.w	8660 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    850e:	2001      	movs	r0, #1
    8510:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    8514:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    8518:	e0a2      	b.n	8660 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    851a:	4e57      	ldr	r6, [pc, #348]	; (8678 <nrfx_gpiote_trigger_enable+0x1fc>)
    851c:	f44f 7323 	mov.w	r3, #652	; 0x28c
    8520:	4632      	mov	r2, r6
    8522:	4956      	ldr	r1, [pc, #344]	; (867c <nrfx_gpiote_trigger_enable+0x200>)
    8524:	4852      	ldr	r0, [pc, #328]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    8526:	f003 fe1f 	bl	c168 <assert_print>
    852a:	f44f 7123 	mov.w	r1, #652	; 0x28c
    852e:	4630      	mov	r0, r6
    8530:	f003 fe13 	bl	c15a <assert_post_action>
    8534:	e7d4      	b.n	84e0 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    8536:	4d4c      	ldr	r5, [pc, #304]	; (8668 <nrfx_gpiote_trigger_enable+0x1ec>)
    8538:	f240 33ee 	movw	r3, #1006	; 0x3ee
    853c:	462a      	mov	r2, r5
    853e:	4950      	ldr	r1, [pc, #320]	; (8680 <nrfx_gpiote_trigger_enable+0x204>)
    8540:	484b      	ldr	r0, [pc, #300]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    8542:	f003 fe11 	bl	c168 <assert_print>
    8546:	f240 31ee 	movw	r1, #1006	; 0x3ee
    854a:	4628      	mov	r0, r5
    854c:	f003 fe05 	bl	c15a <assert_post_action>
    8550:	e7a4      	b.n	849c <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    8552:	0963      	lsrs	r3, r4, #5
    8554:	d01f      	beq.n	8596 <nrfx_gpiote_trigger_enable+0x11a>
    8556:	2b01      	cmp	r3, #1
    8558:	d120      	bne.n	859c <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    855a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    855e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8562:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d01a      	beq.n	85a0 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    856a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    856e:	0963      	lsrs	r3, r4, #5
    8570:	d024      	beq.n	85bc <nrfx_gpiote_trigger_enable+0x140>
    8572:	2b01      	cmp	r3, #1
    8574:	d025      	beq.n	85c2 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    8576:	4e43      	ldr	r6, [pc, #268]	; (8684 <nrfx_gpiote_trigger_enable+0x208>)
    8578:	f240 232e 	movw	r3, #558	; 0x22e
    857c:	4632      	mov	r2, r6
    857e:	4942      	ldr	r1, [pc, #264]	; (8688 <nrfx_gpiote_trigger_enable+0x20c>)
    8580:	483b      	ldr	r0, [pc, #236]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    8582:	f003 fdf1 	bl	c168 <assert_print>
    8586:	f240 212e 	movw	r1, #558	; 0x22e
    858a:	4630      	mov	r0, r6
    858c:	f003 fde5 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    8590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8594:	e016      	b.n	85c4 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    8596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    859a:	e7e0      	b.n	855e <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    859c:	2300      	movs	r3, #0
    859e:	e7de      	b.n	855e <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85a0:	4d38      	ldr	r5, [pc, #224]	; (8684 <nrfx_gpiote_trigger_enable+0x208>)
    85a2:	f240 2329 	movw	r3, #553	; 0x229
    85a6:	462a      	mov	r2, r5
    85a8:	4938      	ldr	r1, [pc, #224]	; (868c <nrfx_gpiote_trigger_enable+0x210>)
    85aa:	4831      	ldr	r0, [pc, #196]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    85ac:	f003 fddc 	bl	c168 <assert_print>
    85b0:	f240 2129 	movw	r1, #553	; 0x229
    85b4:	4628      	mov	r0, r5
    85b6:	f003 fdd0 	bl	c15a <assert_post_action>
    85ba:	e7d6      	b.n	856a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    85bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    85c0:	e000      	b.n	85c4 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85c2:	4b33      	ldr	r3, [pc, #204]	; (8690 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    85c4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    85c8:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    85ca:	f013 0f01 	tst.w	r3, #1
    85ce:	d024      	beq.n	861a <nrfx_gpiote_trigger_enable+0x19e>
    85d0:	2603      	movs	r6, #3
    85d2:	e000      	b.n	85d6 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    85d4:	2603      	movs	r6, #3
    switch (port)
    85d6:	0963      	lsrs	r3, r4, #5
    85d8:	d021      	beq.n	861e <nrfx_gpiote_trigger_enable+0x1a2>
    85da:	2b01      	cmp	r3, #1
    85dc:	d122      	bne.n	8624 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    85de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    85e2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    85e6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85e8:	f013 0f01 	tst.w	r3, #1
    85ec:	d01c      	beq.n	8628 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    85ee:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85f2:	0964      	lsrs	r4, r4, #5
    85f4:	d026      	beq.n	8644 <nrfx_gpiote_trigger_enable+0x1c8>
    85f6:	2c01      	cmp	r4, #1
    85f8:	d027      	beq.n	864a <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    85fa:	4c22      	ldr	r4, [pc, #136]	; (8684 <nrfx_gpiote_trigger_enable+0x208>)
    85fc:	f240 232e 	movw	r3, #558	; 0x22e
    8600:	4622      	mov	r2, r4
    8602:	4921      	ldr	r1, [pc, #132]	; (8688 <nrfx_gpiote_trigger_enable+0x20c>)
    8604:	481a      	ldr	r0, [pc, #104]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    8606:	f003 fdaf 	bl	c168 <assert_print>
    860a:	f240 212e 	movw	r1, #558	; 0x22e
    860e:	4620      	mov	r0, r4
    8610:	f003 fda3 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    8614:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8618:	e018      	b.n	864c <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    861a:	2602      	movs	r6, #2
    861c:	e7db      	b.n	85d6 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    861e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8622:	e7de      	b.n	85e2 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    8624:	2300      	movs	r3, #0
    8626:	e7dc      	b.n	85e2 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8628:	4d16      	ldr	r5, [pc, #88]	; (8684 <nrfx_gpiote_trigger_enable+0x208>)
    862a:	f240 2329 	movw	r3, #553	; 0x229
    862e:	462a      	mov	r2, r5
    8630:	4916      	ldr	r1, [pc, #88]	; (868c <nrfx_gpiote_trigger_enable+0x210>)
    8632:	480f      	ldr	r0, [pc, #60]	; (8670 <nrfx_gpiote_trigger_enable+0x1f4>)
    8634:	f003 fd98 	bl	c168 <assert_print>
    8638:	f240 2129 	movw	r1, #553	; 0x229
    863c:	4628      	mov	r0, r5
    863e:	f003 fd8c 	bl	c15a <assert_post_action>
    8642:	e7d4      	b.n	85ee <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    8644:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8648:	e000      	b.n	864c <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    864a:	4911      	ldr	r1, [pc, #68]	; (8690 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    864c:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    8650:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    8654:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8658:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    865c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    8660:	bd70      	pop	{r4, r5, r6, pc}
    8662:	bf00      	nop
    8664:	200000f4 	.word	0x200000f4
    8668:	0000f114 	.word	0x0000f114
    866c:	0000f1b8 	.word	0x0000f1b8
    8670:	0000d51c 	.word	0x0000d51c
    8674:	40006000 	.word	0x40006000
    8678:	0000f174 	.word	0x0000f174
    867c:	0000f1ac 	.word	0x0000f1ac
    8680:	0000f1d0 	.word	0x0000f1d0
    8684:	0000eef0 	.word	0x0000eef0
    8688:	0000d6e0 	.word	0x0000d6e0
    868c:	0000ef24 	.word	0x0000ef24
    8690:	50000300 	.word	0x50000300

00008694 <nrfx_gpiote_trigger_disable>:
{
    8694:	b538      	push	{r3, r4, r5, lr}
    8696:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8698:	f7ff f918 	bl	78cc <pin_in_use_by_te>
    869c:	b1a0      	cbz	r0, 86c8 <nrfx_gpiote_trigger_disable+0x34>
    869e:	4620      	mov	r0, r4
    86a0:	f004 fbdb 	bl	ce5a <pin_is_input>
    86a4:	b180      	cbz	r0, 86c8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    86a6:	4620      	mov	r0, r4
    86a8:	f7ff f930 	bl	790c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    86ac:	2201      	movs	r2, #1
    86ae:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    86b0:	4b26      	ldr	r3, [pc, #152]	; (874c <nrfx_gpiote_trigger_disable+0xb8>)
    86b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    86b6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    86ba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    86be:	f022 0203 	bic.w	r2, r2, #3
    86c2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    86c6:	e040      	b.n	874a <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    86c8:	0963      	lsrs	r3, r4, #5
    86ca:	d01f      	beq.n	870c <nrfx_gpiote_trigger_disable+0x78>
    86cc:	2b01      	cmp	r3, #1
    86ce:	d120      	bne.n	8712 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    86d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    86d4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86d8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86da:	f013 0f01 	tst.w	r3, #1
    86de:	d01a      	beq.n	8716 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    86e0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86e4:	0964      	lsrs	r4, r4, #5
    86e6:	d024      	beq.n	8732 <nrfx_gpiote_trigger_disable+0x9e>
    86e8:	2c01      	cmp	r4, #1
    86ea:	d025      	beq.n	8738 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    86ec:	4c18      	ldr	r4, [pc, #96]	; (8750 <nrfx_gpiote_trigger_disable+0xbc>)
    86ee:	f240 232e 	movw	r3, #558	; 0x22e
    86f2:	4622      	mov	r2, r4
    86f4:	4917      	ldr	r1, [pc, #92]	; (8754 <nrfx_gpiote_trigger_disable+0xc0>)
    86f6:	4818      	ldr	r0, [pc, #96]	; (8758 <nrfx_gpiote_trigger_disable+0xc4>)
    86f8:	f003 fd36 	bl	c168 <assert_print>
    86fc:	f240 212e 	movw	r1, #558	; 0x22e
    8700:	4620      	mov	r0, r4
    8702:	f003 fd2a 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    8706:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    870a:	e016      	b.n	873a <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    870c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8710:	e7e0      	b.n	86d4 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    8712:	2300      	movs	r3, #0
    8714:	e7de      	b.n	86d4 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8716:	4d0e      	ldr	r5, [pc, #56]	; (8750 <nrfx_gpiote_trigger_disable+0xbc>)
    8718:	f240 2329 	movw	r3, #553	; 0x229
    871c:	462a      	mov	r2, r5
    871e:	490f      	ldr	r1, [pc, #60]	; (875c <nrfx_gpiote_trigger_disable+0xc8>)
    8720:	480d      	ldr	r0, [pc, #52]	; (8758 <nrfx_gpiote_trigger_disable+0xc4>)
    8722:	f003 fd21 	bl	c168 <assert_print>
    8726:	f240 2129 	movw	r1, #553	; 0x229
    872a:	4628      	mov	r0, r5
    872c:	f003 fd15 	bl	c15a <assert_post_action>
    8730:	e7d6      	b.n	86e0 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    8732:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8736:	e000      	b.n	873a <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8738:	4909      	ldr	r1, [pc, #36]	; (8760 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    873a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    873e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    8742:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    8746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    874a:	bd38      	pop	{r3, r4, r5, pc}
    874c:	40006000 	.word	0x40006000
    8750:	0000eef0 	.word	0x0000eef0
    8754:	0000d6e0 	.word	0x0000d6e0
    8758:	0000d51c 	.word	0x0000d51c
    875c:	0000ef24 	.word	0x0000ef24
    8760:	50000300 	.word	0x50000300

00008764 <nrfx_gpiote_pin_uninit>:
{
    8764:	b538      	push	{r3, r4, r5, lr}
    8766:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8768:	f7ff f8a6 	bl	78b8 <pin_in_use>
    876c:	b908      	cbnz	r0, 8772 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    876e:	4824      	ldr	r0, [pc, #144]	; (8800 <nrfx_gpiote_pin_uninit+0x9c>)
}
    8770:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    8772:	4620      	mov	r0, r4
    8774:	f7ff ff8e 	bl	8694 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8778:	4620      	mov	r0, r4
    877a:	f7ff f95f 	bl	7a3c <pin_handler_trigger_uninit>
    switch (port)
    877e:	0963      	lsrs	r3, r4, #5
    8780:	d01f      	beq.n	87c2 <nrfx_gpiote_pin_uninit+0x5e>
    8782:	2b01      	cmp	r3, #1
    8784:	d120      	bne.n	87c8 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    8786:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    878a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    878e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8790:	f013 0f01 	tst.w	r3, #1
    8794:	d01a      	beq.n	87cc <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    8796:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    879a:	0964      	lsrs	r4, r4, #5
    879c:	d024      	beq.n	87e8 <nrfx_gpiote_pin_uninit+0x84>
    879e:	2c01      	cmp	r4, #1
    87a0:	d025      	beq.n	87ee <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    87a2:	4c18      	ldr	r4, [pc, #96]	; (8804 <nrfx_gpiote_pin_uninit+0xa0>)
    87a4:	f240 232e 	movw	r3, #558	; 0x22e
    87a8:	4622      	mov	r2, r4
    87aa:	4917      	ldr	r1, [pc, #92]	; (8808 <nrfx_gpiote_pin_uninit+0xa4>)
    87ac:	4817      	ldr	r0, [pc, #92]	; (880c <nrfx_gpiote_pin_uninit+0xa8>)
    87ae:	f003 fcdb 	bl	c168 <assert_print>
    87b2:	f240 212e 	movw	r1, #558	; 0x22e
    87b6:	4620      	mov	r0, r4
    87b8:	f003 fccf 	bl	c15a <assert_post_action>
        case 0: return NRF_P0;
    87bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    87c0:	e016      	b.n	87f0 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    87c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    87c6:	e7e0      	b.n	878a <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    87c8:	2300      	movs	r3, #0
    87ca:	e7de      	b.n	878a <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    87cc:	4d0d      	ldr	r5, [pc, #52]	; (8804 <nrfx_gpiote_pin_uninit+0xa0>)
    87ce:	f240 2329 	movw	r3, #553	; 0x229
    87d2:	462a      	mov	r2, r5
    87d4:	490e      	ldr	r1, [pc, #56]	; (8810 <nrfx_gpiote_pin_uninit+0xac>)
    87d6:	480d      	ldr	r0, [pc, #52]	; (880c <nrfx_gpiote_pin_uninit+0xa8>)
    87d8:	f003 fcc6 	bl	c168 <assert_print>
    87dc:	f240 2129 	movw	r1, #553	; 0x229
    87e0:	4628      	mov	r0, r5
    87e2:	f003 fcba 	bl	c15a <assert_post_action>
    87e6:	e7d6      	b.n	8796 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    87e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    87ec:	e000      	b.n	87f0 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87ee:	4b09      	ldr	r3, [pc, #36]	; (8814 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    87f0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    87f4:	2202      	movs	r2, #2
    87f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    87fa:	4807      	ldr	r0, [pc, #28]	; (8818 <nrfx_gpiote_pin_uninit+0xb4>)
}
    87fc:	e7b8      	b.n	8770 <nrfx_gpiote_pin_uninit+0xc>
    87fe:	bf00      	nop
    8800:	0bad0004 	.word	0x0bad0004
    8804:	0000eef0 	.word	0x0000eef0
    8808:	0000d6e0 	.word	0x0000d6e0
    880c:	0000d51c 	.word	0x0000d51c
    8810:	0000ef24 	.word	0x0000ef24
    8814:	50000300 	.word	0x50000300
    8818:	0bad0000 	.word	0x0bad0000

0000881c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    881c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    881e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    8820:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8824:	2100      	movs	r1, #0
    uint32_t status = 0;
    8826:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8828:	e003      	b.n	8832 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    882a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    882c:	3304      	adds	r3, #4
    882e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8830:	3101      	adds	r1, #1
    8832:	2907      	cmp	r1, #7
    8834:	d814      	bhi.n	8860 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8836:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    883a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    883e:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8840:	2a00      	cmp	r2, #0
    8842:	d0f2      	beq.n	882a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    8844:	4a0c      	ldr	r2, [pc, #48]	; (8878 <nrfx_gpiote_irq_handler+0x5c>)
    8846:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    884a:	4210      	tst	r0, r2
    884c:	d0ed      	beq.n	882a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    884e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    8852:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8856:	2500      	movs	r5, #0
    8858:	6015      	str	r5, [r2, #0]
    885a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    885c:	4304      	orrs	r4, r0
    885e:	e7e4      	b.n	882a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8860:	4b05      	ldr	r3, [pc, #20]	; (8878 <nrfx_gpiote_irq_handler+0x5c>)
    8862:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8866:	b91b      	cbnz	r3, 8870 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    8868:	4620      	mov	r0, r4
    886a:	f7ff f939 	bl	7ae0 <gpiote_evt_handle>
}
    886e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    8870:	f7ff fac2 	bl	7df8 <port_event_handle>
    8874:	e7f8      	b.n	8868 <nrfx_gpiote_irq_handler+0x4c>
    8876:	bf00      	nop
    8878:	40006000 	.word	0x40006000

0000887c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    887c:	b508      	push	{r3, lr}
    887e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    8880:	4801      	ldr	r0, [pc, #4]	; (8888 <nrfx_ppi_channel_alloc+0xc>)
    8882:	f7fe fe1d 	bl	74c0 <nrfx_flag32_alloc>
}
    8886:	bd08      	pop	{r3, pc}
    8888:	20000170 	.word	0x20000170

0000888c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    888c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    888e:	4c11      	ldr	r4, [pc, #68]	; (88d4 <_DoInit+0x48>)
    8890:	2303      	movs	r3, #3
    8892:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    8894:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    8896:	4a10      	ldr	r2, [pc, #64]	; (88d8 <_DoInit+0x4c>)
    8898:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    889a:	4b10      	ldr	r3, [pc, #64]	; (88dc <_DoInit+0x50>)
    889c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    889e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    88a2:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    88a4:	2300      	movs	r3, #0
    88a6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    88a8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    88aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    88ac:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    88ae:	4a0c      	ldr	r2, [pc, #48]	; (88e0 <_DoInit+0x54>)
    88b0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    88b2:	2210      	movs	r2, #16
    88b4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    88b6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    88b8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    88ba:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    88bc:	4909      	ldr	r1, [pc, #36]	; (88e4 <_DoInit+0x58>)
    88be:	1de0      	adds	r0, r4, #7
    88c0:	f003 fda8 	bl	c414 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    88c4:	4908      	ldr	r1, [pc, #32]	; (88e8 <_DoInit+0x5c>)
    88c6:	4620      	mov	r0, r4
    88c8:	f003 fda4 	bl	c414 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    88cc:	2320      	movs	r3, #32
    88ce:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    88d0:	bd10      	pop	{r4, pc}
    88d2:	bf00      	nop
    88d4:	20000d70 	.word	0x20000d70
    88d8:	0000f1dc 	.word	0x0000f1dc
    88dc:	20000e28 	.word	0x20000e28
    88e0:	20000e18 	.word	0x20000e18
    88e4:	0000f1e8 	.word	0x0000f1e8
    88e8:	0000f1ec 	.word	0x0000f1ec

000088ec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    88ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88f0:	4604      	mov	r4, r0
    88f2:	460e      	mov	r6, r1
    88f4:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    88f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    88fa:	4a2d      	ldr	r2, [pc, #180]	; (89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    88fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8900:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    8902:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8904:	42bb      	cmp	r3, r7
    8906:	d84b      	bhi.n	89a0 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    8908:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    890c:	4928      	ldr	r1, [pc, #160]	; (89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    890e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    8912:	f8d2 8020 	ldr.w	r8, [r2, #32]
    8916:	eba8 0907 	sub.w	r9, r8, r7
    891a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    891e:	4295      	cmp	r5, r2
    8920:	d904      	bls.n	892c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    8922:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    8924:	429d      	cmp	r5, r3
    8926:	d916      	bls.n	8956 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    8928:	2000      	movs	r0, #0
    892a:	e03e      	b.n	89aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    892c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    8930:	1c63      	adds	r3, r4, #1
    8932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8936:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    893a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    893c:	462a      	mov	r2, r5
    893e:	4631      	mov	r1, r6
    8940:	4438      	add	r0, r7
    8942:	f003 fda9 	bl	c498 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    8946:	443d      	add	r5, r7
    8948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    894c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    8950:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    8952:	2001      	movs	r0, #1
    8954:	e029      	b.n	89aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8956:	1c43      	adds	r3, r0, #1
    8958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    895c:	4a14      	ldr	r2, [pc, #80]	; (89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    895e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8962:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    8964:	464a      	mov	r2, r9
    8966:	4631      	mov	r1, r6
    8968:	4438      	add	r0, r7
    896a:	f003 fd95 	bl	c498 <memcpy>
      NumBytes -= Rem;
    896e:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    8972:	197f      	adds	r7, r7, r5
    8974:	d107      	bne.n	8986 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    8976:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    897a:	4b0d      	ldr	r3, [pc, #52]	; (89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    897c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    8980:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    8982:	2001      	movs	r0, #1
    8984:	e011      	b.n	89aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    8986:	1c63      	adds	r3, r4, #1
    8988:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    898c:	4a08      	ldr	r2, [pc, #32]	; (89b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    898e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    8992:	463a      	mov	r2, r7
    8994:	eb06 0109 	add.w	r1, r6, r9
    8998:	6858      	ldr	r0, [r3, #4]
    899a:	f003 fd7d 	bl	c498 <memcpy>
    899e:	e7ea      	b.n	8976 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    89a0:	1bdb      	subs	r3, r3, r7
    89a2:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    89a4:	42ab      	cmp	r3, r5
    89a6:	d2c1      	bcs.n	892c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    89a8:	2000      	movs	r0, #0
}
    89aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    89ae:	bf00      	nop
    89b0:	20000d70 	.word	0x20000d70

000089b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    89b4:	4b06      	ldr	r3, [pc, #24]	; (89d0 <SEGGER_RTT_HasDataUp+0x1c>)
    89b6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    89ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    89be:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    89c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    89c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    89c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    89ca:	1a80      	subs	r0, r0, r2
    89cc:	4770      	bx	lr
    89ce:	bf00      	nop
    89d0:	20000d70 	.word	0x20000d70

000089d4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    89d4:	4b03      	ldr	r3, [pc, #12]	; (89e4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    89d6:	e000      	b.n	89da <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    89d8:	3318      	adds	r3, #24
	while (dev < __device_end) {
    89da:	4a03      	ldr	r2, [pc, #12]	; (89e8 <z_device_state_init+0x14>)
    89dc:	4293      	cmp	r3, r2
    89de:	d3fb      	bcc.n	89d8 <z_device_state_init+0x4>
	}
}
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	0000d140 	.word	0x0000d140
    89e8:	0000d1d0 	.word	0x0000d1d0

000089ec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    89ec:	b570      	push	{r4, r5, r6, lr}
    89ee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    89f0:	4b11      	ldr	r3, [pc, #68]	; (8a38 <z_sys_init_run_level+0x4c>)
    89f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    89f6:	e009      	b.n	8a0c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    89f8:	4240      	negs	r0, r0
    89fa:	e017      	b.n	8a2c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    89fc:	68eb      	ldr	r3, [r5, #12]
    89fe:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    8a00:	68ea      	ldr	r2, [r5, #12]
    8a02:	7853      	ldrb	r3, [r2, #1]
    8a04:	f043 0301 	orr.w	r3, r3, #1
    8a08:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8a0a:	3408      	adds	r4, #8
    8a0c:	1c73      	adds	r3, r6, #1
    8a0e:	4a0a      	ldr	r2, [pc, #40]	; (8a38 <z_sys_init_run_level+0x4c>)
    8a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a14:	42a3      	cmp	r3, r4
    8a16:	d90d      	bls.n	8a34 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    8a18:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    8a1a:	6823      	ldr	r3, [r4, #0]
    8a1c:	4628      	mov	r0, r5
    8a1e:	4798      	blx	r3
		if (dev != NULL) {
    8a20:	2d00      	cmp	r5, #0
    8a22:	d0f2      	beq.n	8a0a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    8a24:	2800      	cmp	r0, #0
    8a26:	d0eb      	beq.n	8a00 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    8a28:	2800      	cmp	r0, #0
    8a2a:	dbe5      	blt.n	89f8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    8a2c:	28ff      	cmp	r0, #255	; 0xff
    8a2e:	dde5      	ble.n	89fc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    8a30:	20ff      	movs	r0, #255	; 0xff
    8a32:	e7e3      	b.n	89fc <z_sys_init_run_level+0x10>
		}
	}
}
    8a34:	bd70      	pop	{r4, r5, r6, pc}
    8a36:	bf00      	nop
    8a38:	0000f1f4 	.word	0x0000f1f4

00008a3c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    8a3c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    8a3e:	4605      	mov	r5, r0
    8a40:	b328      	cbz	r0, 8a8e <z_impl_device_get_binding+0x52>
    8a42:	7803      	ldrb	r3, [r0, #0]
    8a44:	b32b      	cbz	r3, 8a92 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    8a46:	4c14      	ldr	r4, [pc, #80]	; (8a98 <z_impl_device_get_binding+0x5c>)
    8a48:	e000      	b.n	8a4c <z_impl_device_get_binding+0x10>
    8a4a:	3418      	adds	r4, #24
    8a4c:	4b13      	ldr	r3, [pc, #76]	; (8a9c <z_impl_device_get_binding+0x60>)
    8a4e:	429c      	cmp	r4, r3
    8a50:	d008      	beq.n	8a64 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    8a52:	4620      	mov	r0, r4
    8a54:	f004 fa18 	bl	ce88 <z_device_is_ready>
    8a58:	2800      	cmp	r0, #0
    8a5a:	d0f6      	beq.n	8a4a <z_impl_device_get_binding+0xe>
    8a5c:	6823      	ldr	r3, [r4, #0]
    8a5e:	42ab      	cmp	r3, r5
    8a60:	d1f3      	bne.n	8a4a <z_impl_device_get_binding+0xe>
    8a62:	e012      	b.n	8a8a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    8a64:	4c0c      	ldr	r4, [pc, #48]	; (8a98 <z_impl_device_get_binding+0x5c>)
    8a66:	e000      	b.n	8a6a <z_impl_device_get_binding+0x2e>
    8a68:	3418      	adds	r4, #24
    8a6a:	4b0c      	ldr	r3, [pc, #48]	; (8a9c <z_impl_device_get_binding+0x60>)
    8a6c:	429c      	cmp	r4, r3
    8a6e:	d00b      	beq.n	8a88 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8a70:	4620      	mov	r0, r4
    8a72:	f004 fa09 	bl	ce88 <z_device_is_ready>
    8a76:	2800      	cmp	r0, #0
    8a78:	d0f6      	beq.n	8a68 <z_impl_device_get_binding+0x2c>
    8a7a:	6821      	ldr	r1, [r4, #0]
    8a7c:	4628      	mov	r0, r5
    8a7e:	f003 fd00 	bl	c482 <strcmp>
    8a82:	2800      	cmp	r0, #0
    8a84:	d1f0      	bne.n	8a68 <z_impl_device_get_binding+0x2c>
    8a86:	e000      	b.n	8a8a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    8a88:	2400      	movs	r4, #0
}
    8a8a:	4620      	mov	r0, r4
    8a8c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8a8e:	4604      	mov	r4, r0
    8a90:	e7fb      	b.n	8a8a <z_impl_device_get_binding+0x4e>
    8a92:	2400      	movs	r4, #0
    8a94:	e7f9      	b.n	8a8a <z_impl_device_get_binding+0x4e>
    8a96:	bf00      	nop
    8a98:	0000d140 	.word	0x0000d140
    8a9c:	0000d1d0 	.word	0x0000d1d0

00008aa0 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    8aa0:	2804      	cmp	r0, #4
    8aa2:	d80c      	bhi.n	8abe <reason_to_str+0x1e>
    8aa4:	e8df f000 	tbb	[pc, r0]
    8aa8:	07050d03 	.word	0x07050d03
    8aac:	09          	.byte	0x09
    8aad:	00          	.byte	0x00
    8aae:	4806      	ldr	r0, [pc, #24]	; (8ac8 <reason_to_str+0x28>)
    8ab0:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    8ab2:	4806      	ldr	r0, [pc, #24]	; (8acc <reason_to_str+0x2c>)
    8ab4:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    8ab6:	4806      	ldr	r0, [pc, #24]	; (8ad0 <reason_to_str+0x30>)
    8ab8:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    8aba:	4806      	ldr	r0, [pc, #24]	; (8ad4 <reason_to_str+0x34>)
    8abc:	4770      	bx	lr
	default:
		return "Unknown error";
    8abe:	4806      	ldr	r0, [pc, #24]	; (8ad8 <reason_to_str+0x38>)
    8ac0:	4770      	bx	lr
		return "Unhandled interrupt";
    8ac2:	4806      	ldr	r0, [pc, #24]	; (8adc <reason_to_str+0x3c>)
	}
}
    8ac4:	4770      	bx	lr
    8ac6:	bf00      	nop
    8ac8:	0000f25c 	.word	0x0000f25c
    8acc:	0000f230 	.word	0x0000f230
    8ad0:	0000f240 	.word	0x0000f240
    8ad4:	0000f24c 	.word	0x0000f24c
    8ad8:	0000f20c 	.word	0x0000f20c
    8adc:	0000f21c 	.word	0x0000f21c

00008ae0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8ae0:	b130      	cbz	r0, 8af0 <thread_name_get+0x10>
{
    8ae2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8ae4:	f004 fa32 	bl	cf4c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    8ae8:	b120      	cbz	r0, 8af4 <thread_name_get+0x14>
    8aea:	7803      	ldrb	r3, [r0, #0]
    8aec:	b123      	cbz	r3, 8af8 <thread_name_get+0x18>
}
    8aee:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    8af0:	4802      	ldr	r0, [pc, #8]	; (8afc <thread_name_get+0x1c>)
}
    8af2:	4770      	bx	lr
		thread_name = "unknown";
    8af4:	4801      	ldr	r0, [pc, #4]	; (8afc <thread_name_get+0x1c>)
    8af6:	e7fa      	b.n	8aee <thread_name_get+0xe>
    8af8:	4800      	ldr	r0, [pc, #0]	; (8afc <thread_name_get+0x1c>)
	return thread_name;
    8afa:	e7f8      	b.n	8aee <thread_name_get+0xe>
    8afc:	0000f26c 	.word	0x0000f26c

00008b00 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b02:	b087      	sub	sp, #28
    8b04:	4604      	mov	r4, r0
    8b06:	460e      	mov	r6, r1
	__asm__ volatile(
    8b08:	f04f 0320 	mov.w	r3, #32
    8b0c:	f3ef 8711 	mrs	r7, BASEPRI
    8b10:	f383 8812 	msr	BASEPRI_MAX, r3
    8b14:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8b18:	f002 f9d2 	bl	aec0 <z_impl_z_current_get>
    8b1c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8b1e:	4620      	mov	r0, r4
    8b20:	f7ff ffbe 	bl	8aa0 <reason_to_str>
    8b24:	2300      	movs	r3, #0
    8b26:	9305      	str	r3, [sp, #20]
    8b28:	9004      	str	r0, [sp, #16]
    8b2a:	9403      	str	r4, [sp, #12]
    8b2c:	4a22      	ldr	r2, [pc, #136]	; (8bb8 <z_fatal_error+0xb8>)
    8b2e:	9202      	str	r2, [sp, #8]
    8b30:	9301      	str	r3, [sp, #4]
    8b32:	9300      	str	r3, [sp, #0]
    8b34:	2201      	movs	r2, #1
    8b36:	4921      	ldr	r1, [pc, #132]	; (8bbc <z_fatal_error+0xbc>)
    8b38:	4618      	mov	r0, r3
    8b3a:	f004 f9b2 	bl	cea2 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    8b3e:	b11e      	cbz	r6, 8b48 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    8b40:	69f3      	ldr	r3, [r6, #28]
    8b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8b46:	b9eb      	cbnz	r3, 8b84 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8b48:	4628      	mov	r0, r5
    8b4a:	f7ff ffc9 	bl	8ae0 <thread_name_get>
    8b4e:	9004      	str	r0, [sp, #16]
    8b50:	9503      	str	r5, [sp, #12]
    8b52:	4b1b      	ldr	r3, [pc, #108]	; (8bc0 <z_fatal_error+0xc0>)
    8b54:	9302      	str	r3, [sp, #8]
    8b56:	2000      	movs	r0, #0
    8b58:	9001      	str	r0, [sp, #4]
    8b5a:	9000      	str	r0, [sp, #0]
    8b5c:	4603      	mov	r3, r0
    8b5e:	2201      	movs	r2, #1
    8b60:	4916      	ldr	r1, [pc, #88]	; (8bbc <z_fatal_error+0xbc>)
    8b62:	f004 f99e 	bl	cea2 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8b66:	4631      	mov	r1, r6
    8b68:	4620      	mov	r0, r4
    8b6a:	f7fe fba3 	bl	72b4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8b6e:	2c04      	cmp	r4, #4
    8b70:	d013      	beq.n	8b9a <z_fatal_error+0x9a>
	__asm__ volatile(
    8b72:	f387 8811 	msr	BASEPRI, r7
    8b76:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8b7a:	4628      	mov	r0, r5
    8b7c:	f7fc f9f4 	bl	4f68 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8b80:	b007      	add	sp, #28
    8b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    8b84:	4b0f      	ldr	r3, [pc, #60]	; (8bc4 <z_fatal_error+0xc4>)
    8b86:	9302      	str	r3, [sp, #8]
    8b88:	2000      	movs	r0, #0
    8b8a:	9001      	str	r0, [sp, #4]
    8b8c:	9000      	str	r0, [sp, #0]
    8b8e:	4603      	mov	r3, r0
    8b90:	2201      	movs	r2, #1
    8b92:	490a      	ldr	r1, [pc, #40]	; (8bbc <z_fatal_error+0xbc>)
    8b94:	f004 f985 	bl	cea2 <z_log_msg2_runtime_create>
    8b98:	e7d6      	b.n	8b48 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    8b9a:	4c0b      	ldr	r4, [pc, #44]	; (8bc8 <z_fatal_error+0xc8>)
    8b9c:	238f      	movs	r3, #143	; 0x8f
    8b9e:	4622      	mov	r2, r4
    8ba0:	490a      	ldr	r1, [pc, #40]	; (8bcc <z_fatal_error+0xcc>)
    8ba2:	480b      	ldr	r0, [pc, #44]	; (8bd0 <z_fatal_error+0xd0>)
    8ba4:	f003 fae0 	bl	c168 <assert_print>
    8ba8:	480a      	ldr	r0, [pc, #40]	; (8bd4 <z_fatal_error+0xd4>)
    8baa:	f003 fadd 	bl	c168 <assert_print>
    8bae:	218f      	movs	r1, #143	; 0x8f
    8bb0:	4620      	mov	r0, r4
    8bb2:	f003 fad2 	bl	c15a <assert_post_action>
    8bb6:	e7dc      	b.n	8b72 <z_fatal_error+0x72>
    8bb8:	0000f274 	.word	0x0000f274
    8bbc:	0000d380 	.word	0x0000d380
    8bc0:	0000f2c0 	.word	0x0000f2c0
    8bc4:	0000f29c 	.word	0x0000f29c
    8bc8:	0000f2d8 	.word	0x0000f2d8
    8bcc:	0000f2fc 	.word	0x0000f2fc
    8bd0:	0000d51c 	.word	0x0000d51c
    8bd4:	0000f31c 	.word	0x0000f31c

00008bd8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    8bd8:	b510      	push	{r4, lr}
    8bda:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    8bdc:	4c11      	ldr	r4, [pc, #68]	; (8c24 <init_idle_thread+0x4c>)
    8bde:	23b0      	movs	r3, #176	; 0xb0
    8be0:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8be4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    8be8:	4b0f      	ldr	r3, [pc, #60]	; (8c28 <init_idle_thread+0x50>)
    8bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    8bee:	4a0f      	ldr	r2, [pc, #60]	; (8c2c <init_idle_thread+0x54>)
    8bf0:	9205      	str	r2, [sp, #20]
    8bf2:	2201      	movs	r2, #1
    8bf4:	9204      	str	r2, [sp, #16]
    8bf6:	220f      	movs	r2, #15
    8bf8:	9203      	str	r2, [sp, #12]
    8bfa:	2200      	movs	r2, #0
    8bfc:	9202      	str	r2, [sp, #8]
    8bfe:	9201      	str	r2, [sp, #4]
    8c00:	9300      	str	r3, [sp, #0]
    8c02:	4b0b      	ldr	r3, [pc, #44]	; (8c30 <init_idle_thread+0x58>)
    8c04:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8c08:	490a      	ldr	r1, [pc, #40]	; (8c34 <init_idle_thread+0x5c>)
    8c0a:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    8c0e:	fb0c 1100 	mla	r1, ip, r0, r1
    8c12:	4620      	mov	r0, r4
    8c14:	f000 fa76 	bl	9104 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8c18:	7b63      	ldrb	r3, [r4, #13]
    8c1a:	f023 0304 	bic.w	r3, r3, #4
    8c1e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    8c20:	b006      	add	sp, #24
    8c22:	bd10      	pop	{r4, pc}
    8c24:	20000540 	.word	0x20000540
    8c28:	20001228 	.word	0x20001228
    8c2c:	0000f354 	.word	0x0000f354
    8c30:	00009419 	.word	0x00009419
    8c34:	20002900 	.word	0x20002900

00008c38 <bg_thread_main>:
{
    8c38:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    8c3a:	4b0a      	ldr	r3, [pc, #40]	; (8c64 <bg_thread_main+0x2c>)
    8c3c:	2201      	movs	r2, #1
    8c3e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8c40:	2002      	movs	r0, #2
    8c42:	f7ff fed3 	bl	89ec <z_sys_init_run_level>
	boot_banner();
    8c46:	f002 fe83 	bl	b950 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8c4a:	2003      	movs	r0, #3
    8c4c:	f7ff fece 	bl	89ec <z_sys_init_run_level>
	z_init_static_threads();
    8c50:	f000 fb68 	bl	9324 <z_init_static_threads>
	main();
    8c54:	f7f8 feea 	bl	1a2c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8c58:	4a03      	ldr	r2, [pc, #12]	; (8c68 <bg_thread_main+0x30>)
    8c5a:	7b13      	ldrb	r3, [r2, #12]
    8c5c:	f023 0301 	bic.w	r3, r3, #1
    8c60:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8c62:	bd08      	pop	{r3, pc}
    8c64:	2000145a 	.word	0x2000145a
    8c68:	200005f0 	.word	0x200005f0

00008c6c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    8c6c:	b508      	push	{r3, lr}
    8c6e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8c70:	4a01      	ldr	r2, [pc, #4]	; (8c78 <switch_to_main_thread+0xc>)
    8c72:	4802      	ldr	r0, [pc, #8]	; (8c7c <switch_to_main_thread+0x10>)
    8c74:	f7fb fd34 	bl	46e0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8c78:	00008c39 	.word	0x00008c39
    8c7c:	200005f0 	.word	0x200005f0

00008c80 <z_bss_zero>:
{
    8c80:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8c82:	4803      	ldr	r0, [pc, #12]	; (8c90 <z_bss_zero+0x10>)
    8c84:	4a03      	ldr	r2, [pc, #12]	; (8c94 <z_bss_zero+0x14>)
    8c86:	1a12      	subs	r2, r2, r0
    8c88:	2100      	movs	r1, #0
    8c8a:	f004 f919 	bl	cec0 <z_early_memset>
}
    8c8e:	bd08      	pop	{r3, pc}
    8c90:	20000260 	.word	0x20000260
    8c94:	2000145c 	.word	0x2000145c

00008c98 <z_init_cpu>:
{
    8c98:	b510      	push	{r4, lr}
    8c9a:	4604      	mov	r4, r0
	init_idle_thread(id);
    8c9c:	f7ff ff9c 	bl	8bd8 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8ca0:	490b      	ldr	r1, [pc, #44]	; (8cd0 <z_init_cpu+0x38>)
    8ca2:	23b0      	movs	r3, #176	; 0xb0
    8ca4:	fb03 1104 	mla	r1, r3, r4, r1
    8ca8:	4a0a      	ldr	r2, [pc, #40]	; (8cd4 <z_init_cpu+0x3c>)
    8caa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    8cae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8cb2:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    8cb4:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8cb6:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    8cba:	4b07      	ldr	r3, [pc, #28]	; (8cd8 <z_init_cpu+0x40>)
    8cbc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8cc0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    8cc4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8cc8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    8ccc:	6063      	str	r3, [r4, #4]
}
    8cce:	bd10      	pop	{r4, pc}
    8cd0:	20000540 	.word	0x20000540
    8cd4:	20001228 	.word	0x20001228
    8cd8:	20002a60 	.word	0x20002a60

00008cdc <prepare_multithreading>:
{
    8cdc:	b570      	push	{r4, r5, r6, lr}
    8cde:	b086      	sub	sp, #24
	z_sched_init();
    8ce0:	f001 ff2a 	bl	ab38 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    8ce4:	4d10      	ldr	r5, [pc, #64]	; (8d28 <prepare_multithreading+0x4c>)
    8ce6:	4b11      	ldr	r3, [pc, #68]	; (8d2c <prepare_multithreading+0x50>)
    8ce8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8cea:	4b11      	ldr	r3, [pc, #68]	; (8d30 <prepare_multithreading+0x54>)
    8cec:	9305      	str	r3, [sp, #20]
    8cee:	2301      	movs	r3, #1
    8cf0:	9304      	str	r3, [sp, #16]
    8cf2:	2400      	movs	r4, #0
    8cf4:	9403      	str	r4, [sp, #12]
    8cf6:	9402      	str	r4, [sp, #8]
    8cf8:	9401      	str	r4, [sp, #4]
    8cfa:	9400      	str	r4, [sp, #0]
    8cfc:	4b0d      	ldr	r3, [pc, #52]	; (8d34 <prepare_multithreading+0x58>)
    8cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8d02:	490d      	ldr	r1, [pc, #52]	; (8d38 <prepare_multithreading+0x5c>)
    8d04:	4628      	mov	r0, r5
    8d06:	f000 f9fd 	bl	9104 <z_setup_new_thread>
    8d0a:	4606      	mov	r6, r0
    8d0c:	7b6b      	ldrb	r3, [r5, #13]
    8d0e:	f023 0304 	bic.w	r3, r3, #4
    8d12:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    8d14:	4628      	mov	r0, r5
    8d16:	f001 fa33 	bl	a180 <z_ready_thread>
	z_init_cpu(0);
    8d1a:	4620      	mov	r0, r4
    8d1c:	f7ff ffbc 	bl	8c98 <z_init_cpu>
}
    8d20:	4630      	mov	r0, r6
    8d22:	b006      	add	sp, #24
    8d24:	bd70      	pop	{r4, r5, r6, pc}
    8d26:	bf00      	nop
    8d28:	200005f0 	.word	0x200005f0
    8d2c:	20001228 	.word	0x20001228
    8d30:	0000f35c 	.word	0x0000f35c
    8d34:	00008c39 	.word	0x00008c39
    8d38:	200024e0 	.word	0x200024e0

00008d3c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8d3c:	b500      	push	{lr}
    8d3e:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8d40:	4b1f      	ldr	r3, [pc, #124]	; (8dc0 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8d42:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    8d46:	4c1f      	ldr	r4, [pc, #124]	; (8dc4 <z_cstart+0x88>)
    8d48:	6963      	ldr	r3, [r4, #20]
    8d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8d4e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8d50:	23e0      	movs	r3, #224	; 0xe0
    8d52:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    8d56:	2500      	movs	r5, #0
    8d58:	77e5      	strb	r5, [r4, #31]
    8d5a:	7625      	strb	r5, [r4, #24]
    8d5c:	7665      	strb	r5, [r4, #25]
    8d5e:	76a5      	strb	r5, [r4, #26]
    8d60:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8d66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8d6a:	6263      	str	r3, [r4, #36]	; 0x24
    8d6c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8d70:	f7fc f866 	bl	4e40 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8d74:	f7fb fb38 	bl	43e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d7c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8d80:	f7fc fa12 	bl	51a8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8d84:	f7fc f90a 	bl	4f9c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8d88:	f7fa fc5a 	bl	3640 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    8d8c:	2401      	movs	r4, #1
    8d8e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    8d92:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    8d96:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    8d98:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    8d9a:	4668      	mov	r0, sp
    8d9c:	f002 fdd2 	bl	b944 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    8da0:	4b09      	ldr	r3, [pc, #36]	; (8dc8 <z_cstart+0x8c>)
    8da2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8da6:	f7ff fe15 	bl	89d4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8daa:	4628      	mov	r0, r5
    8dac:	f7ff fe1e 	bl	89ec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8db0:	4620      	mov	r0, r4
    8db2:	f7ff fe1b 	bl	89ec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    8db6:	f7ff ff91 	bl	8cdc <prepare_multithreading>
    8dba:	f7ff ff57 	bl	8c6c <switch_to_main_thread>
    8dbe:	bf00      	nop
    8dc0:	20003280 	.word	0x20003280
    8dc4:	e000ed00 	.word	0xe000ed00
    8dc8:	20001228 	.word	0x20001228

00008dcc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8dcc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8dce:	4c10      	ldr	r4, [pc, #64]	; (8e10 <init_mem_slab_module+0x44>)
	int rc = 0;
    8dd0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8dd2:	e008      	b.n	8de6 <init_mem_slab_module+0x1a>
    8dd4:	4b0f      	ldr	r3, [pc, #60]	; (8e14 <init_mem_slab_module+0x48>)
    8dd6:	429c      	cmp	r4, r3
    8dd8:	d217      	bcs.n	8e0a <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    8dda:	4620      	mov	r0, r4
    8ddc:	f004 f878 	bl	ced0 <create_free_list>
		if (rc < 0) {
    8de0:	1e05      	subs	r5, r0, #0
    8de2:	db12      	blt.n	8e0a <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8de4:	3420      	adds	r4, #32
    8de6:	4b0b      	ldr	r3, [pc, #44]	; (8e14 <init_mem_slab_module+0x48>)
    8de8:	429c      	cmp	r4, r3
    8dea:	d9f3      	bls.n	8dd4 <init_mem_slab_module+0x8>
    8dec:	4e0a      	ldr	r6, [pc, #40]	; (8e18 <init_mem_slab_module+0x4c>)
    8dee:	233d      	movs	r3, #61	; 0x3d
    8df0:	4632      	mov	r2, r6
    8df2:	490a      	ldr	r1, [pc, #40]	; (8e1c <init_mem_slab_module+0x50>)
    8df4:	480a      	ldr	r0, [pc, #40]	; (8e20 <init_mem_slab_module+0x54>)
    8df6:	f003 f9b7 	bl	c168 <assert_print>
    8dfa:	480a      	ldr	r0, [pc, #40]	; (8e24 <init_mem_slab_module+0x58>)
    8dfc:	f003 f9b4 	bl	c168 <assert_print>
    8e00:	213d      	movs	r1, #61	; 0x3d
    8e02:	4630      	mov	r0, r6
    8e04:	f003 f9a9 	bl	c15a <assert_post_action>
    8e08:	e7e4      	b.n	8dd4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    8e0a:	4628      	mov	r0, r5
    8e0c:	bd70      	pop	{r4, r5, r6, pc}
    8e0e:	bf00      	nop
    8e10:	200001f8 	.word	0x200001f8
    8e14:	200001f8 	.word	0x200001f8
    8e18:	0000f368 	.word	0x0000f368
    8e1c:	0000f390 	.word	0x0000f390
    8e20:	0000d51c 	.word	0x0000d51c
    8e24:	0000f3b0 	.word	0x0000f3b0

00008e28 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e2c:	b082      	sub	sp, #8
    8e2e:	4604      	mov	r4, r0
    8e30:	460e      	mov	r6, r1
    8e32:	4690      	mov	r8, r2
    8e34:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8e36:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    8e3a:	f04f 0320 	mov.w	r3, #32
    8e3e:	f3ef 8711 	mrs	r7, BASEPRI
    8e42:	f383 8812 	msr	BASEPRI_MAX, r3
    8e46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e4a:	4628      	mov	r0, r5
    8e4c:	f000 f8d8 	bl	9000 <z_spin_lock_valid>
    8e50:	b1c0      	cbz	r0, 8e84 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    8e52:	4628      	mov	r0, r5
    8e54:	f000 f8f4 	bl	9040 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8e58:	69a1      	ldr	r1, [r4, #24]
    8e5a:	b321      	cbz	r1, 8ea6 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    8e5c:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    8e5e:	69a3      	ldr	r3, [r4, #24]
    8e60:	681b      	ldr	r3, [r3, #0]
    8e62:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    8e64:	69e3      	ldr	r3, [r4, #28]
    8e66:	3301      	adds	r3, #1
    8e68:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8e6a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e6c:	4628      	mov	r0, r5
    8e6e:	f000 f8d7 	bl	9020 <z_spin_unlock_valid>
    8e72:	b388      	cbz	r0, 8ed8 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    8e74:	f387 8811 	msr	BASEPRI, r7
    8e78:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    8e7c:	4620      	mov	r0, r4
    8e7e:	b002      	add	sp, #8
    8e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e84:	f8df a070 	ldr.w	sl, [pc, #112]	; 8ef8 <k_mem_slab_alloc+0xd0>
    8e88:	238e      	movs	r3, #142	; 0x8e
    8e8a:	4652      	mov	r2, sl
    8e8c:	491b      	ldr	r1, [pc, #108]	; (8efc <k_mem_slab_alloc+0xd4>)
    8e8e:	481c      	ldr	r0, [pc, #112]	; (8f00 <k_mem_slab_alloc+0xd8>)
    8e90:	f003 f96a 	bl	c168 <assert_print>
    8e94:	4629      	mov	r1, r5
    8e96:	481b      	ldr	r0, [pc, #108]	; (8f04 <k_mem_slab_alloc+0xdc>)
    8e98:	f003 f966 	bl	c168 <assert_print>
    8e9c:	218e      	movs	r1, #142	; 0x8e
    8e9e:	4650      	mov	r0, sl
    8ea0:	f003 f95b 	bl	c15a <assert_post_action>
    8ea4:	e7d5      	b.n	8e52 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8ea6:	ea59 0308 	orrs.w	r3, r9, r8
    8eaa:	d104      	bne.n	8eb6 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    8eac:	2300      	movs	r3, #0
    8eae:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    8eb0:	f06f 040b 	mvn.w	r4, #11
    8eb4:	e7da      	b.n	8e6c <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8eb6:	f8cd 8000 	str.w	r8, [sp]
    8eba:	f8cd 9004 	str.w	r9, [sp, #4]
    8ebe:	4622      	mov	r2, r4
    8ec0:	4639      	mov	r1, r7
    8ec2:	4628      	mov	r0, r5
    8ec4:	f001 fb38 	bl	a538 <z_pend_curr>
		if (result == 0) {
    8ec8:	4604      	mov	r4, r0
    8eca:	2800      	cmp	r0, #0
    8ecc:	d1d6      	bne.n	8e7c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8ece:	4b0e      	ldr	r3, [pc, #56]	; (8f08 <k_mem_slab_alloc+0xe0>)
    8ed0:	689b      	ldr	r3, [r3, #8]
    8ed2:	695b      	ldr	r3, [r3, #20]
    8ed4:	6033      	str	r3, [r6, #0]
		return result;
    8ed6:	e7d1      	b.n	8e7c <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ed8:	4e07      	ldr	r6, [pc, #28]	; (8ef8 <k_mem_slab_alloc+0xd0>)
    8eda:	23b9      	movs	r3, #185	; 0xb9
    8edc:	4632      	mov	r2, r6
    8ede:	490b      	ldr	r1, [pc, #44]	; (8f0c <k_mem_slab_alloc+0xe4>)
    8ee0:	4807      	ldr	r0, [pc, #28]	; (8f00 <k_mem_slab_alloc+0xd8>)
    8ee2:	f003 f941 	bl	c168 <assert_print>
    8ee6:	4629      	mov	r1, r5
    8ee8:	4809      	ldr	r0, [pc, #36]	; (8f10 <k_mem_slab_alloc+0xe8>)
    8eea:	f003 f93d 	bl	c168 <assert_print>
    8eee:	21b9      	movs	r1, #185	; 0xb9
    8ef0:	4630      	mov	r0, r6
    8ef2:	f003 f932 	bl	c15a <assert_post_action>
    8ef6:	e7bd      	b.n	8e74 <k_mem_slab_alloc+0x4c>
    8ef8:	0000ddf4 	.word	0x0000ddf4
    8efc:	0000de54 	.word	0x0000de54
    8f00:	0000d51c 	.word	0x0000d51c
    8f04:	0000de6c 	.word	0x0000de6c
    8f08:	20001228 	.word	0x20001228
    8f0c:	0000de24 	.word	0x0000de24
    8f10:	0000de3c 	.word	0x0000de3c

00008f14 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f18:	4604      	mov	r4, r0
    8f1a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    8f1c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    8f20:	f04f 0320 	mov.w	r3, #32
    8f24:	f3ef 8711 	mrs	r7, BASEPRI
    8f28:	f383 8812 	msr	BASEPRI_MAX, r3
    8f2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f30:	4630      	mov	r0, r6
    8f32:	f000 f865 	bl	9000 <z_spin_lock_valid>
    8f36:	b1b0      	cbz	r0, 8f66 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    8f38:	4630      	mov	r0, r6
    8f3a:	f000 f881 	bl	9040 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8f3e:	69a3      	ldr	r3, [r4, #24]
    8f40:	b313      	cbz	r3, 8f88 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    8f42:	682b      	ldr	r3, [r5, #0]
    8f44:	69a2      	ldr	r2, [r4, #24]
    8f46:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8f48:	682b      	ldr	r3, [r5, #0]
    8f4a:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    8f4c:	69e3      	ldr	r3, [r4, #28]
    8f4e:	3b01      	subs	r3, #1
    8f50:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f52:	4630      	mov	r0, r6
    8f54:	f000 f864 	bl	9020 <z_spin_unlock_valid>
    8f58:	b338      	cbz	r0, 8faa <k_mem_slab_free+0x96>
	__asm__ volatile(
    8f5a:	f387 8811 	msr	BASEPRI, r7
    8f5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f66:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8fcc <k_mem_slab_free+0xb8>
    8f6a:	238e      	movs	r3, #142	; 0x8e
    8f6c:	4642      	mov	r2, r8
    8f6e:	4918      	ldr	r1, [pc, #96]	; (8fd0 <k_mem_slab_free+0xbc>)
    8f70:	4818      	ldr	r0, [pc, #96]	; (8fd4 <k_mem_slab_free+0xc0>)
    8f72:	f003 f8f9 	bl	c168 <assert_print>
    8f76:	4631      	mov	r1, r6
    8f78:	4817      	ldr	r0, [pc, #92]	; (8fd8 <k_mem_slab_free+0xc4>)
    8f7a:	f003 f8f5 	bl	c168 <assert_print>
    8f7e:	218e      	movs	r1, #142	; 0x8e
    8f80:	4640      	mov	r0, r8
    8f82:	f003 f8ea 	bl	c15a <assert_post_action>
    8f86:	e7d7      	b.n	8f38 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8f88:	4620      	mov	r0, r4
    8f8a:	f001 fd71 	bl	aa70 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    8f8e:	2800      	cmp	r0, #0
    8f90:	d0d7      	beq.n	8f42 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8f92:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8f94:	2100      	movs	r1, #0
    8f96:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8f9a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8f9c:	f001 f8f0 	bl	a180 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8fa0:	4639      	mov	r1, r7
    8fa2:	4630      	mov	r0, r6
    8fa4:	f000 fe48 	bl	9c38 <z_reschedule>
			return;
    8fa8:	e7db      	b.n	8f62 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8faa:	4c08      	ldr	r4, [pc, #32]	; (8fcc <k_mem_slab_free+0xb8>)
    8fac:	23b9      	movs	r3, #185	; 0xb9
    8fae:	4622      	mov	r2, r4
    8fb0:	490a      	ldr	r1, [pc, #40]	; (8fdc <k_mem_slab_free+0xc8>)
    8fb2:	4808      	ldr	r0, [pc, #32]	; (8fd4 <k_mem_slab_free+0xc0>)
    8fb4:	f003 f8d8 	bl	c168 <assert_print>
    8fb8:	4631      	mov	r1, r6
    8fba:	4809      	ldr	r0, [pc, #36]	; (8fe0 <k_mem_slab_free+0xcc>)
    8fbc:	f003 f8d4 	bl	c168 <assert_print>
    8fc0:	21b9      	movs	r1, #185	; 0xb9
    8fc2:	4620      	mov	r0, r4
    8fc4:	f003 f8c9 	bl	c15a <assert_post_action>
    8fc8:	e7c7      	b.n	8f5a <k_mem_slab_free+0x46>
    8fca:	bf00      	nop
    8fcc:	0000ddf4 	.word	0x0000ddf4
    8fd0:	0000de54 	.word	0x0000de54
    8fd4:	0000d51c 	.word	0x0000d51c
    8fd8:	0000de6c 	.word	0x0000de6c
    8fdc:	0000de24 	.word	0x0000de24
    8fe0:	0000de3c 	.word	0x0000de3c

00008fe4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    8fe4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8fe6:	ea53 0102 	orrs.w	r1, r3, r2
    8fea:	d102      	bne.n	8ff2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    8fec:	f003 ffb0 	bl	cf50 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    8ff0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8ff2:	4902      	ldr	r1, [pc, #8]	; (8ffc <schedule_new_thread+0x18>)
    8ff4:	3018      	adds	r0, #24
    8ff6:	f002 f86d 	bl	b0d4 <z_add_timeout>
    8ffa:	e7f9      	b.n	8ff0 <schedule_new_thread+0xc>
    8ffc:	0000a2dd 	.word	0x0000a2dd

00009000 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    9000:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    9002:	b13b      	cbz	r3, 9014 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    9004:	f003 0303 	and.w	r3, r3, #3
    9008:	4a04      	ldr	r2, [pc, #16]	; (901c <z_spin_lock_valid+0x1c>)
    900a:	7d12      	ldrb	r2, [r2, #20]
    900c:	4293      	cmp	r3, r2
    900e:	d003      	beq.n	9018 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    9010:	2001      	movs	r0, #1
    9012:	4770      	bx	lr
    9014:	2001      	movs	r0, #1
    9016:	4770      	bx	lr
			return false;
    9018:	2000      	movs	r0, #0
}
    901a:	4770      	bx	lr
    901c:	20001228 	.word	0x20001228

00009020 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    9020:	6801      	ldr	r1, [r0, #0]
    9022:	4a06      	ldr	r2, [pc, #24]	; (903c <z_spin_unlock_valid+0x1c>)
    9024:	7d13      	ldrb	r3, [r2, #20]
    9026:	6892      	ldr	r2, [r2, #8]
    9028:	4313      	orrs	r3, r2
    902a:	4299      	cmp	r1, r3
    902c:	d103      	bne.n	9036 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    902e:	2300      	movs	r3, #0
    9030:	6003      	str	r3, [r0, #0]
	return true;
    9032:	2001      	movs	r0, #1
    9034:	4770      	bx	lr
		return false;
    9036:	2000      	movs	r0, #0
}
    9038:	4770      	bx	lr
    903a:	bf00      	nop
    903c:	20001228 	.word	0x20001228

00009040 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    9040:	4a02      	ldr	r2, [pc, #8]	; (904c <z_spin_lock_set_owner+0xc>)
    9042:	7d13      	ldrb	r3, [r2, #20]
    9044:	6892      	ldr	r2, [r2, #8]
    9046:	4313      	orrs	r3, r2
    9048:	6003      	str	r3, [r0, #0]
}
    904a:	4770      	bx	lr
    904c:	20001228 	.word	0x20001228

00009050 <z_thread_monitor_exit>:
{
    9050:	b570      	push	{r4, r5, r6, lr}
    9052:	4604      	mov	r4, r0
	__asm__ volatile(
    9054:	f04f 0320 	mov.w	r3, #32
    9058:	f3ef 8511 	mrs	r5, BASEPRI
    905c:	f383 8812 	msr	BASEPRI_MAX, r3
    9060:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9064:	481f      	ldr	r0, [pc, #124]	; (90e4 <z_thread_monitor_exit+0x94>)
    9066:	f7ff ffcb 	bl	9000 <z_spin_lock_valid>
    906a:	b150      	cbz	r0, 9082 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    906c:	481d      	ldr	r0, [pc, #116]	; (90e4 <z_thread_monitor_exit+0x94>)
    906e:	f7ff ffe7 	bl	9040 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    9072:	4b1d      	ldr	r3, [pc, #116]	; (90e8 <z_thread_monitor_exit+0x98>)
    9074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9076:	42a3      	cmp	r3, r4
    9078:	d114      	bne.n	90a4 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    907a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    907c:	4b1a      	ldr	r3, [pc, #104]	; (90e8 <z_thread_monitor_exit+0x98>)
    907e:	629a      	str	r2, [r3, #40]	; 0x28
    9080:	e017      	b.n	90b2 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9082:	4e1a      	ldr	r6, [pc, #104]	; (90ec <z_thread_monitor_exit+0x9c>)
    9084:	238e      	movs	r3, #142	; 0x8e
    9086:	4632      	mov	r2, r6
    9088:	4919      	ldr	r1, [pc, #100]	; (90f0 <z_thread_monitor_exit+0xa0>)
    908a:	481a      	ldr	r0, [pc, #104]	; (90f4 <z_thread_monitor_exit+0xa4>)
    908c:	f003 f86c 	bl	c168 <assert_print>
    9090:	4914      	ldr	r1, [pc, #80]	; (90e4 <z_thread_monitor_exit+0x94>)
    9092:	4819      	ldr	r0, [pc, #100]	; (90f8 <z_thread_monitor_exit+0xa8>)
    9094:	f003 f868 	bl	c168 <assert_print>
    9098:	218e      	movs	r1, #142	; 0x8e
    909a:	4630      	mov	r0, r6
    909c:	f003 f85d 	bl	c15a <assert_post_action>
    90a0:	e7e4      	b.n	906c <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    90a2:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    90a4:	b113      	cbz	r3, 90ac <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    90a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    90a8:	42a2      	cmp	r2, r4
    90aa:	d1fa      	bne.n	90a2 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    90ac:	b10b      	cbz	r3, 90b2 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    90ae:	6f22      	ldr	r2, [r4, #112]	; 0x70
    90b0:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90b2:	480c      	ldr	r0, [pc, #48]	; (90e4 <z_thread_monitor_exit+0x94>)
    90b4:	f7ff ffb4 	bl	9020 <z_spin_unlock_valid>
    90b8:	b120      	cbz	r0, 90c4 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    90ba:	f385 8811 	msr	BASEPRI, r5
    90be:	f3bf 8f6f 	isb	sy
}
    90c2:	bd70      	pop	{r4, r5, r6, pc}
    90c4:	4c09      	ldr	r4, [pc, #36]	; (90ec <z_thread_monitor_exit+0x9c>)
    90c6:	23b9      	movs	r3, #185	; 0xb9
    90c8:	4622      	mov	r2, r4
    90ca:	490c      	ldr	r1, [pc, #48]	; (90fc <z_thread_monitor_exit+0xac>)
    90cc:	4809      	ldr	r0, [pc, #36]	; (90f4 <z_thread_monitor_exit+0xa4>)
    90ce:	f003 f84b 	bl	c168 <assert_print>
    90d2:	4904      	ldr	r1, [pc, #16]	; (90e4 <z_thread_monitor_exit+0x94>)
    90d4:	480a      	ldr	r0, [pc, #40]	; (9100 <z_thread_monitor_exit+0xb0>)
    90d6:	f003 f847 	bl	c168 <assert_print>
    90da:	21b9      	movs	r1, #185	; 0xb9
    90dc:	4620      	mov	r0, r4
    90de:	f003 f83c 	bl	c15a <assert_post_action>
    90e2:	e7ea      	b.n	90ba <z_thread_monitor_exit+0x6a>
    90e4:	20001254 	.word	0x20001254
    90e8:	20001228 	.word	0x20001228
    90ec:	0000ddf4 	.word	0x0000ddf4
    90f0:	0000de54 	.word	0x0000de54
    90f4:	0000d51c 	.word	0x0000d51c
    90f8:	0000de6c 	.word	0x0000de6c
    90fc:	0000de24 	.word	0x0000de24
    9100:	0000de3c 	.word	0x0000de3c

00009104 <z_setup_new_thread>:
{
    9104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9108:	b085      	sub	sp, #20
    910a:	4604      	mov	r4, r0
    910c:	460e      	mov	r6, r1
    910e:	4690      	mov	r8, r2
    9110:	461d      	mov	r5, r3
    9112:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    9116:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    911a:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    911c:	2f0f      	cmp	r7, #15
    911e:	d05e      	beq.n	91de <z_setup_new_thread+0xda>
    9120:	f107 0310 	add.w	r3, r7, #16
    9124:	2b1e      	cmp	r3, #30
    9126:	d85e      	bhi.n	91e6 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9128:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    912c:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    912e:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    9130:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9132:	2204      	movs	r2, #4
    9134:	4639      	mov	r1, r7
    9136:	4620      	mov	r0, r4
    9138:	f003 ff0e 	bl	cf58 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    913c:	4642      	mov	r2, r8
    913e:	4631      	mov	r1, r6
    9140:	4620      	mov	r0, r4
    9142:	f003 feeb 	bl	cf1c <setup_thread_stack>
    9146:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9148:	9b10      	ldr	r3, [sp, #64]	; 0x40
    914a:	9302      	str	r3, [sp, #8]
    914c:	f8cd a004 	str.w	sl, [sp, #4]
    9150:	f8cd b000 	str.w	fp, [sp]
    9154:	462b      	mov	r3, r5
    9156:	4602      	mov	r2, r0
    9158:	4631      	mov	r1, r6
    915a:	4620      	mov	r0, r4
    915c:	f7fb fa76 	bl	464c <arch_new_thread>
	new_thread->init_data = NULL;
    9160:	2300      	movs	r3, #0
    9162:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    9164:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    9166:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    916a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    916e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9170:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    9172:	f04f 0320 	mov.w	r3, #32
    9176:	f3ef 8611 	mrs	r6, BASEPRI
    917a:	f383 8812 	msr	BASEPRI_MAX, r3
    917e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9182:	4837      	ldr	r0, [pc, #220]	; (9260 <z_setup_new_thread+0x15c>)
    9184:	f7ff ff3c 	bl	9000 <z_spin_lock_valid>
    9188:	2800      	cmp	r0, #0
    918a:	d042      	beq.n	9212 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    918c:	4d34      	ldr	r5, [pc, #208]	; (9260 <z_setup_new_thread+0x15c>)
    918e:	4628      	mov	r0, r5
    9190:	f7ff ff56 	bl	9040 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    9194:	4b33      	ldr	r3, [pc, #204]	; (9264 <z_setup_new_thread+0x160>)
    9196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9198:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    919a:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    919c:	4628      	mov	r0, r5
    919e:	f7ff ff3f 	bl	9020 <z_spin_unlock_valid>
    91a2:	2800      	cmp	r0, #0
    91a4:	d045      	beq.n	9232 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    91a6:	f386 8811 	msr	BASEPRI, r6
    91aa:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    91ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    91b0:	2b00      	cmp	r3, #0
    91b2:	d04e      	beq.n	9252 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    91b4:	221f      	movs	r2, #31
    91b6:	4619      	mov	r1, r3
    91b8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    91bc:	f003 f934 	bl	c428 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    91c0:	2300      	movs	r3, #0
    91c2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    91c6:	4b27      	ldr	r3, [pc, #156]	; (9264 <z_setup_new_thread+0x160>)
    91c8:	689b      	ldr	r3, [r3, #8]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d045      	beq.n	925a <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    91ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    91d2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    91d6:	4638      	mov	r0, r7
    91d8:	b005      	add	sp, #20
    91da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    91de:	4b22      	ldr	r3, [pc, #136]	; (9268 <z_setup_new_thread+0x164>)
    91e0:	429d      	cmp	r5, r3
    91e2:	d19d      	bne.n	9120 <z_setup_new_thread+0x1c>
    91e4:	e7a0      	b.n	9128 <z_setup_new_thread+0x24>
    91e6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 926c <z_setup_new_thread+0x168>
    91ea:	f240 13ff 	movw	r3, #511	; 0x1ff
    91ee:	464a      	mov	r2, r9
    91f0:	491f      	ldr	r1, [pc, #124]	; (9270 <z_setup_new_thread+0x16c>)
    91f2:	4820      	ldr	r0, [pc, #128]	; (9274 <z_setup_new_thread+0x170>)
    91f4:	f002 ffb8 	bl	c168 <assert_print>
    91f8:	f06f 030f 	mvn.w	r3, #15
    91fc:	220e      	movs	r2, #14
    91fe:	4639      	mov	r1, r7
    9200:	481d      	ldr	r0, [pc, #116]	; (9278 <z_setup_new_thread+0x174>)
    9202:	f002 ffb1 	bl	c168 <assert_print>
    9206:	f240 11ff 	movw	r1, #511	; 0x1ff
    920a:	4648      	mov	r0, r9
    920c:	f002 ffa5 	bl	c15a <assert_post_action>
    9210:	e78a      	b.n	9128 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9212:	4d1a      	ldr	r5, [pc, #104]	; (927c <z_setup_new_thread+0x178>)
    9214:	238e      	movs	r3, #142	; 0x8e
    9216:	462a      	mov	r2, r5
    9218:	4919      	ldr	r1, [pc, #100]	; (9280 <z_setup_new_thread+0x17c>)
    921a:	4816      	ldr	r0, [pc, #88]	; (9274 <z_setup_new_thread+0x170>)
    921c:	f002 ffa4 	bl	c168 <assert_print>
    9220:	490f      	ldr	r1, [pc, #60]	; (9260 <z_setup_new_thread+0x15c>)
    9222:	4818      	ldr	r0, [pc, #96]	; (9284 <z_setup_new_thread+0x180>)
    9224:	f002 ffa0 	bl	c168 <assert_print>
    9228:	218e      	movs	r1, #142	; 0x8e
    922a:	4628      	mov	r0, r5
    922c:	f002 ff95 	bl	c15a <assert_post_action>
    9230:	e7ac      	b.n	918c <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9232:	4d12      	ldr	r5, [pc, #72]	; (927c <z_setup_new_thread+0x178>)
    9234:	23b9      	movs	r3, #185	; 0xb9
    9236:	462a      	mov	r2, r5
    9238:	4913      	ldr	r1, [pc, #76]	; (9288 <z_setup_new_thread+0x184>)
    923a:	480e      	ldr	r0, [pc, #56]	; (9274 <z_setup_new_thread+0x170>)
    923c:	f002 ff94 	bl	c168 <assert_print>
    9240:	4907      	ldr	r1, [pc, #28]	; (9260 <z_setup_new_thread+0x15c>)
    9242:	4812      	ldr	r0, [pc, #72]	; (928c <z_setup_new_thread+0x188>)
    9244:	f002 ff90 	bl	c168 <assert_print>
    9248:	21b9      	movs	r1, #185	; 0xb9
    924a:	4628      	mov	r0, r5
    924c:	f002 ff85 	bl	c15a <assert_post_action>
    9250:	e7a9      	b.n	91a6 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    9252:	2300      	movs	r3, #0
    9254:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    9258:	e7b5      	b.n	91c6 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    925a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    925e:	e7ba      	b.n	91d6 <z_setup_new_thread+0xd2>
    9260:	20001254 	.word	0x20001254
    9264:	20001228 	.word	0x20001228
    9268:	00009419 	.word	0x00009419
    926c:	0000f3d0 	.word	0x0000f3d0
    9270:	0000f428 	.word	0x0000f428
    9274:	0000d51c 	.word	0x0000d51c
    9278:	0000f4a8 	.word	0x0000f4a8
    927c:	0000ddf4 	.word	0x0000ddf4
    9280:	0000de54 	.word	0x0000de54
    9284:	0000de6c 	.word	0x0000de6c
    9288:	0000de24 	.word	0x0000de24
    928c:	0000de3c 	.word	0x0000de3c

00009290 <z_impl_k_thread_create>:
{
    9290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9294:	b086      	sub	sp, #24
    9296:	4604      	mov	r4, r0
    9298:	460d      	mov	r5, r1
    929a:	4616      	mov	r6, r2
    929c:	461f      	mov	r7, r3
    929e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    92a2:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    92a6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    92aa:	b9db      	cbnz	r3, 92e4 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    92ac:	2300      	movs	r3, #0
    92ae:	9305      	str	r3, [sp, #20]
    92b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    92b2:	9304      	str	r3, [sp, #16]
    92b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    92b6:	9303      	str	r3, [sp, #12]
    92b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    92ba:	9302      	str	r3, [sp, #8]
    92bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92be:	9301      	str	r3, [sp, #4]
    92c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    92c2:	9300      	str	r3, [sp, #0]
    92c4:	463b      	mov	r3, r7
    92c6:	4632      	mov	r2, r6
    92c8:	4629      	mov	r1, r5
    92ca:	4620      	mov	r0, r4
    92cc:	f7ff ff1a 	bl	9104 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    92d0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    92d4:	bf08      	it	eq
    92d6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    92da:	d115      	bne.n	9308 <z_impl_k_thread_create+0x78>
}
    92dc:	4620      	mov	r0, r4
    92de:	b006      	add	sp, #24
    92e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    92e4:	f8df a02c 	ldr.w	sl, [pc, #44]	; 9314 <z_impl_k_thread_create+0x84>
    92e8:	f240 236e 	movw	r3, #622	; 0x26e
    92ec:	4652      	mov	r2, sl
    92ee:	490a      	ldr	r1, [pc, #40]	; (9318 <z_impl_k_thread_create+0x88>)
    92f0:	480a      	ldr	r0, [pc, #40]	; (931c <z_impl_k_thread_create+0x8c>)
    92f2:	f002 ff39 	bl	c168 <assert_print>
    92f6:	480a      	ldr	r0, [pc, #40]	; (9320 <z_impl_k_thread_create+0x90>)
    92f8:	f002 ff36 	bl	c168 <assert_print>
    92fc:	f240 216e 	movw	r1, #622	; 0x26e
    9300:	4650      	mov	r0, sl
    9302:	f002 ff2a 	bl	c15a <assert_post_action>
    9306:	e7d1      	b.n	92ac <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    9308:	464a      	mov	r2, r9
    930a:	4643      	mov	r3, r8
    930c:	4620      	mov	r0, r4
    930e:	f7ff fe69 	bl	8fe4 <schedule_new_thread>
    9312:	e7e3      	b.n	92dc <z_impl_k_thread_create+0x4c>
    9314:	0000f3d0 	.word	0x0000f3d0
    9318:	0000f4dc 	.word	0x0000f4dc
    931c:	0000d51c 	.word	0x0000d51c
    9320:	0000f4f0 	.word	0x0000f4f0

00009324 <z_init_static_threads>:
{
    9324:	b530      	push	{r4, r5, lr}
    9326:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    9328:	4c35      	ldr	r4, [pc, #212]	; (9400 <z_init_static_threads+0xdc>)
    932a:	e017      	b.n	935c <z_init_static_threads+0x38>
    932c:	4b35      	ldr	r3, [pc, #212]	; (9404 <z_init_static_threads+0xe0>)
    932e:	429c      	cmp	r4, r3
    9330:	d228      	bcs.n	9384 <z_init_static_threads+0x60>
		z_setup_new_thread(
    9332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9334:	9305      	str	r3, [sp, #20]
    9336:	6a23      	ldr	r3, [r4, #32]
    9338:	9304      	str	r3, [sp, #16]
    933a:	69e3      	ldr	r3, [r4, #28]
    933c:	9303      	str	r3, [sp, #12]
    933e:	69a3      	ldr	r3, [r4, #24]
    9340:	9302      	str	r3, [sp, #8]
    9342:	6963      	ldr	r3, [r4, #20]
    9344:	9301      	str	r3, [sp, #4]
    9346:	6923      	ldr	r3, [r4, #16]
    9348:	9300      	str	r3, [sp, #0]
    934a:	68e3      	ldr	r3, [r4, #12]
    934c:	68a2      	ldr	r2, [r4, #8]
    934e:	6861      	ldr	r1, [r4, #4]
    9350:	6820      	ldr	r0, [r4, #0]
    9352:	f7ff fed7 	bl	9104 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9356:	6823      	ldr	r3, [r4, #0]
    9358:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    935a:	3430      	adds	r4, #48	; 0x30
    935c:	4b29      	ldr	r3, [pc, #164]	; (9404 <z_init_static_threads+0xe0>)
    935e:	429c      	cmp	r4, r3
    9360:	d9e4      	bls.n	932c <z_init_static_threads+0x8>
    9362:	4d29      	ldr	r5, [pc, #164]	; (9408 <z_init_static_threads+0xe4>)
    9364:	f240 23d5 	movw	r3, #725	; 0x2d5
    9368:	462a      	mov	r2, r5
    936a:	4928      	ldr	r1, [pc, #160]	; (940c <z_init_static_threads+0xe8>)
    936c:	4828      	ldr	r0, [pc, #160]	; (9410 <z_init_static_threads+0xec>)
    936e:	f002 fefb 	bl	c168 <assert_print>
    9372:	4828      	ldr	r0, [pc, #160]	; (9414 <z_init_static_threads+0xf0>)
    9374:	f002 fef8 	bl	c168 <assert_print>
    9378:	f240 21d5 	movw	r1, #725	; 0x2d5
    937c:	4628      	mov	r0, r5
    937e:	f002 feec 	bl	c15a <assert_post_action>
    9382:	e7d3      	b.n	932c <z_init_static_threads+0x8>
	k_sched_lock();
    9384:	f000 fca6 	bl	9cd4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9388:	4c1d      	ldr	r4, [pc, #116]	; (9400 <z_init_static_threads+0xdc>)
    938a:	e000      	b.n	938e <z_init_static_threads+0x6a>
    938c:	3430      	adds	r4, #48	; 0x30
    938e:	4b1d      	ldr	r3, [pc, #116]	; (9404 <z_init_static_threads+0xe0>)
    9390:	429c      	cmp	r4, r3
    9392:	d81f      	bhi.n	93d4 <z_init_static_threads+0xb0>
    9394:	4b1b      	ldr	r3, [pc, #108]	; (9404 <z_init_static_threads+0xe0>)
    9396:	429c      	cmp	r4, r3
    9398:	d22d      	bcs.n	93f6 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    939a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    939c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    93a0:	d0f4      	beq.n	938c <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    93a2:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    93a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    93a8:	17c1      	asrs	r1, r0, #31
    93aa:	03c9      	lsls	r1, r1, #15
    93ac:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    93b0:	03c0      	lsls	r0, r0, #15
    93b2:	f240 33e7 	movw	r3, #999	; 0x3e7
    93b6:	18c0      	adds	r0, r0, r3
    93b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    93bc:	f04f 0300 	mov.w	r3, #0
    93c0:	f141 0100 	adc.w	r1, r1, #0
    93c4:	f7f7 f87e 	bl	4c4 <__aeabi_uldivmod>
    93c8:	4602      	mov	r2, r0
    93ca:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    93cc:	4628      	mov	r0, r5
    93ce:	f7ff fe09 	bl	8fe4 <schedule_new_thread>
    93d2:	e7db      	b.n	938c <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    93d4:	4d0c      	ldr	r5, [pc, #48]	; (9408 <z_init_static_threads+0xe4>)
    93d6:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    93da:	462a      	mov	r2, r5
    93dc:	490b      	ldr	r1, [pc, #44]	; (940c <z_init_static_threads+0xe8>)
    93de:	480c      	ldr	r0, [pc, #48]	; (9410 <z_init_static_threads+0xec>)
    93e0:	f002 fec2 	bl	c168 <assert_print>
    93e4:	480b      	ldr	r0, [pc, #44]	; (9414 <z_init_static_threads+0xf0>)
    93e6:	f002 febf 	bl	c168 <assert_print>
    93ea:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    93ee:	4628      	mov	r0, r5
    93f0:	f002 feb3 	bl	c15a <assert_post_action>
    93f4:	e7ce      	b.n	9394 <z_init_static_threads+0x70>
	k_sched_unlock();
    93f6:	f001 f9f9 	bl	a7ec <k_sched_unlock>
}
    93fa:	b007      	add	sp, #28
    93fc:	bd30      	pop	{r4, r5, pc}
    93fe:	bf00      	nop
    9400:	200001f8 	.word	0x200001f8
    9404:	200001f8 	.word	0x200001f8
    9408:	0000f3d0 	.word	0x0000f3d0
    940c:	0000f518 	.word	0x0000f518
    9410:	0000d51c 	.word	0x0000d51c
    9414:	0000f3b0 	.word	0x0000f3b0

00009418 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    9418:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    941a:	4b14      	ldr	r3, [pc, #80]	; (946c <idle+0x54>)
    941c:	689b      	ldr	r3, [r3, #8]
    941e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9422:	2b00      	cmp	r3, #0
    9424:	da0d      	bge.n	9442 <idle+0x2a>
    9426:	4c12      	ldr	r4, [pc, #72]	; (9470 <idle+0x58>)
    9428:	2327      	movs	r3, #39	; 0x27
    942a:	4622      	mov	r2, r4
    942c:	4911      	ldr	r1, [pc, #68]	; (9474 <idle+0x5c>)
    942e:	4812      	ldr	r0, [pc, #72]	; (9478 <idle+0x60>)
    9430:	f002 fe9a 	bl	c168 <assert_print>
    9434:	2127      	movs	r1, #39	; 0x27
    9436:	4620      	mov	r0, r4
    9438:	f002 fe8f 	bl	c15a <assert_post_action>
    943c:	e001      	b.n	9442 <idle+0x2a>
	arch_cpu_idle();
    943e:	f7fa ffd9 	bl	43f4 <arch_cpu_idle>
	__asm__ volatile(
    9442:	f04f 0220 	mov.w	r2, #32
    9446:	f3ef 8311 	mrs	r3, BASEPRI
    944a:	f382 8812 	msr	BASEPRI_MAX, r2
    944e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    9452:	f001 ff7d 	bl	b350 <z_get_next_timeout_expiry>
    9456:	4b05      	ldr	r3, [pc, #20]	; (946c <idle+0x54>)
    9458:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    945a:	4b08      	ldr	r3, [pc, #32]	; (947c <idle+0x64>)
    945c:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    945e:	2b00      	cmp	r3, #0
    9460:	d0ed      	beq.n	943e <idle+0x26>
    9462:	f7fa fd93 	bl	3f8c <pm_system_suspend>
    9466:	2800      	cmp	r0, #0
    9468:	d1eb      	bne.n	9442 <idle+0x2a>
    946a:	e7e8      	b.n	943e <idle+0x26>
    946c:	20001228 	.word	0x20001228
    9470:	0000f548 	.word	0x0000f548
    9474:	0000f56c 	.word	0x0000f56c
    9478:	0000d51c 	.word	0x0000d51c
    947c:	2000145a 	.word	0x2000145a

00009480 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9484:	b083      	sub	sp, #12
    9486:	4604      	mov	r4, r0
    9488:	4616      	mov	r6, r2
    948a:	461d      	mov	r5, r3
    948c:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    9490:	2900      	cmp	r1, #0
    9492:	d12b      	bne.n	94ec <z_impl_k_mutex_lock+0x6c>
    9494:	f04f 0320 	mov.w	r3, #32
    9498:	f3ef 8711 	mrs	r7, BASEPRI
    949c:	f383 8812 	msr	BASEPRI_MAX, r3
    94a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94a4:	487b      	ldr	r0, [pc, #492]	; (9694 <z_impl_k_mutex_lock+0x214>)
    94a6:	f7ff fdab 	bl	9000 <z_spin_lock_valid>
    94aa:	2800      	cmp	r0, #0
    94ac:	d02d      	beq.n	950a <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    94ae:	4879      	ldr	r0, [pc, #484]	; (9694 <z_impl_k_mutex_lock+0x214>)
    94b0:	f7ff fdc6 	bl	9040 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    94b4:	68e1      	ldr	r1, [r4, #12]
    94b6:	2900      	cmp	r1, #0
    94b8:	d138      	bne.n	952c <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    94ba:	2900      	cmp	r1, #0
    94bc:	d17d      	bne.n	95ba <z_impl_k_mutex_lock+0x13a>
    94be:	4b76      	ldr	r3, [pc, #472]	; (9698 <z_impl_k_mutex_lock+0x218>)
    94c0:	689b      	ldr	r3, [r3, #8]
    94c2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    94c6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    94c8:	3101      	adds	r1, #1
    94ca:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    94cc:	4b72      	ldr	r3, [pc, #456]	; (9698 <z_impl_k_mutex_lock+0x218>)
    94ce:	689b      	ldr	r3, [r3, #8]
    94d0:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94d2:	4870      	ldr	r0, [pc, #448]	; (9694 <z_impl_k_mutex_lock+0x214>)
    94d4:	f7ff fda4 	bl	9020 <z_spin_unlock_valid>
    94d8:	2800      	cmp	r0, #0
    94da:	d070      	beq.n	95be <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    94dc:	f387 8811 	msr	BASEPRI, r7
    94e0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    94e4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    94e6:	b003      	add	sp, #12
    94e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    94ec:	4f6b      	ldr	r7, [pc, #428]	; (969c <z_impl_k_mutex_lock+0x21c>)
    94ee:	2365      	movs	r3, #101	; 0x65
    94f0:	463a      	mov	r2, r7
    94f2:	496b      	ldr	r1, [pc, #428]	; (96a0 <z_impl_k_mutex_lock+0x220>)
    94f4:	486b      	ldr	r0, [pc, #428]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    94f6:	f002 fe37 	bl	c168 <assert_print>
    94fa:	486b      	ldr	r0, [pc, #428]	; (96a8 <z_impl_k_mutex_lock+0x228>)
    94fc:	f002 fe34 	bl	c168 <assert_print>
    9500:	2165      	movs	r1, #101	; 0x65
    9502:	4638      	mov	r0, r7
    9504:	f002 fe29 	bl	c15a <assert_post_action>
    9508:	e7c4      	b.n	9494 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    950a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 96ac <z_impl_k_mutex_lock+0x22c>
    950e:	238e      	movs	r3, #142	; 0x8e
    9510:	4642      	mov	r2, r8
    9512:	4967      	ldr	r1, [pc, #412]	; (96b0 <z_impl_k_mutex_lock+0x230>)
    9514:	4863      	ldr	r0, [pc, #396]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    9516:	f002 fe27 	bl	c168 <assert_print>
    951a:	495e      	ldr	r1, [pc, #376]	; (9694 <z_impl_k_mutex_lock+0x214>)
    951c:	4865      	ldr	r0, [pc, #404]	; (96b4 <z_impl_k_mutex_lock+0x234>)
    951e:	f002 fe23 	bl	c168 <assert_print>
    9522:	218e      	movs	r1, #142	; 0x8e
    9524:	4640      	mov	r0, r8
    9526:	f002 fe18 	bl	c15a <assert_post_action>
    952a:	e7c0      	b.n	94ae <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    952c:	68a2      	ldr	r2, [r4, #8]
    952e:	4b5a      	ldr	r3, [pc, #360]	; (9698 <z_impl_k_mutex_lock+0x218>)
    9530:	689b      	ldr	r3, [r3, #8]
    9532:	429a      	cmp	r2, r3
    9534:	d0c1      	beq.n	94ba <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9536:	ea55 0106 	orrs.w	r1, r5, r6
    953a:	bf0c      	ite	eq
    953c:	f04f 0801 	moveq.w	r8, #1
    9540:	f04f 0800 	movne.w	r8, #0
    9544:	d04b      	beq.n	95de <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    9546:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    954a:	4649      	mov	r1, r9
    954c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9550:	f003 fd13 	bl	cf7a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9554:	4581      	cmp	r9, r0
    9556:	dc5d      	bgt.n	9614 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    9558:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    955c:	9600      	str	r6, [sp, #0]
    955e:	9501      	str	r5, [sp, #4]
    9560:	4622      	mov	r2, r4
    9562:	4639      	mov	r1, r7
    9564:	484b      	ldr	r0, [pc, #300]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9566:	f000 ffe7 	bl	a538 <z_pend_curr>
	if (got_mutex == 0) {
    956a:	2800      	cmp	r0, #0
    956c:	d0bb      	beq.n	94e6 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    956e:	f04f 0320 	mov.w	r3, #32
    9572:	f3ef 8511 	mrs	r5, BASEPRI
    9576:	f383 8812 	msr	BASEPRI_MAX, r3
    957a:	f3bf 8f6f 	isb	sy
    957e:	4845      	ldr	r0, [pc, #276]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9580:	f7ff fd3e 	bl	9000 <z_spin_lock_valid>
    9584:	2800      	cmp	r0, #0
    9586:	d04b      	beq.n	9620 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    9588:	4842      	ldr	r0, [pc, #264]	; (9694 <z_impl_k_mutex_lock+0x214>)
    958a:	f7ff fd59 	bl	9040 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    958e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9590:	42a3      	cmp	r3, r4
    9592:	d055      	beq.n	9640 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9594:	2b00      	cmp	r3, #0
    9596:	d053      	beq.n	9640 <z_impl_k_mutex_lock+0x1c0>
    9598:	6921      	ldr	r1, [r4, #16]
    959a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    959e:	f003 fcec 	bl	cf7a <new_prio_for_inheritance>
    95a2:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    95a4:	4620      	mov	r0, r4
    95a6:	f003 fcf3 	bl	cf90 <adjust_owner_prio>
    95aa:	2800      	cmp	r0, #0
    95ac:	d14a      	bne.n	9644 <z_impl_k_mutex_lock+0x1c4>
    95ae:	f1b9 0f00 	cmp.w	r9, #0
    95b2:	d049      	beq.n	9648 <z_impl_k_mutex_lock+0x1c8>
    95b4:	f04f 0801 	mov.w	r8, #1
    95b8:	e046      	b.n	9648 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    95ba:	6923      	ldr	r3, [r4, #16]
    95bc:	e783      	b.n	94c6 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95be:	4c3b      	ldr	r4, [pc, #236]	; (96ac <z_impl_k_mutex_lock+0x22c>)
    95c0:	23b9      	movs	r3, #185	; 0xb9
    95c2:	4622      	mov	r2, r4
    95c4:	493c      	ldr	r1, [pc, #240]	; (96b8 <z_impl_k_mutex_lock+0x238>)
    95c6:	4837      	ldr	r0, [pc, #220]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    95c8:	f002 fdce 	bl	c168 <assert_print>
    95cc:	4931      	ldr	r1, [pc, #196]	; (9694 <z_impl_k_mutex_lock+0x214>)
    95ce:	483b      	ldr	r0, [pc, #236]	; (96bc <z_impl_k_mutex_lock+0x23c>)
    95d0:	f002 fdca 	bl	c168 <assert_print>
    95d4:	21b9      	movs	r1, #185	; 0xb9
    95d6:	4620      	mov	r0, r4
    95d8:	f002 fdbf 	bl	c15a <assert_post_action>
    95dc:	e77e      	b.n	94dc <z_impl_k_mutex_lock+0x5c>
    95de:	482d      	ldr	r0, [pc, #180]	; (9694 <z_impl_k_mutex_lock+0x214>)
    95e0:	f7ff fd1e 	bl	9020 <z_spin_unlock_valid>
    95e4:	b130      	cbz	r0, 95f4 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    95e6:	f387 8811 	msr	BASEPRI, r7
    95ea:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    95ee:	f06f 000f 	mvn.w	r0, #15
    95f2:	e778      	b.n	94e6 <z_impl_k_mutex_lock+0x66>
    95f4:	4c2d      	ldr	r4, [pc, #180]	; (96ac <z_impl_k_mutex_lock+0x22c>)
    95f6:	23b9      	movs	r3, #185	; 0xb9
    95f8:	4622      	mov	r2, r4
    95fa:	492f      	ldr	r1, [pc, #188]	; (96b8 <z_impl_k_mutex_lock+0x238>)
    95fc:	4829      	ldr	r0, [pc, #164]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    95fe:	f002 fdb3 	bl	c168 <assert_print>
    9602:	4924      	ldr	r1, [pc, #144]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9604:	482d      	ldr	r0, [pc, #180]	; (96bc <z_impl_k_mutex_lock+0x23c>)
    9606:	f002 fdaf 	bl	c168 <assert_print>
    960a:	21b9      	movs	r1, #185	; 0xb9
    960c:	4620      	mov	r0, r4
    960e:	f002 fda4 	bl	c15a <assert_post_action>
    9612:	e7e8      	b.n	95e6 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    9614:	4601      	mov	r1, r0
    9616:	4620      	mov	r0, r4
    9618:	f003 fcba 	bl	cf90 <adjust_owner_prio>
    961c:	4681      	mov	r9, r0
    961e:	e79d      	b.n	955c <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9620:	4e22      	ldr	r6, [pc, #136]	; (96ac <z_impl_k_mutex_lock+0x22c>)
    9622:	238e      	movs	r3, #142	; 0x8e
    9624:	4632      	mov	r2, r6
    9626:	4922      	ldr	r1, [pc, #136]	; (96b0 <z_impl_k_mutex_lock+0x230>)
    9628:	481e      	ldr	r0, [pc, #120]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    962a:	f002 fd9d 	bl	c168 <assert_print>
    962e:	4919      	ldr	r1, [pc, #100]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9630:	4820      	ldr	r0, [pc, #128]	; (96b4 <z_impl_k_mutex_lock+0x234>)
    9632:	f002 fd99 	bl	c168 <assert_print>
    9636:	218e      	movs	r1, #142	; 0x8e
    9638:	4630      	mov	r0, r6
    963a:	f002 fd8e 	bl	c15a <assert_post_action>
    963e:	e7a3      	b.n	9588 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9640:	6921      	ldr	r1, [r4, #16]
    9642:	e7af      	b.n	95a4 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    9644:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    9648:	f1b8 0f00 	cmp.w	r8, #0
    964c:	d006      	beq.n	965c <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    964e:	4629      	mov	r1, r5
    9650:	4810      	ldr	r0, [pc, #64]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9652:	f000 faf1 	bl	9c38 <z_reschedule>
	return -EAGAIN;
    9656:	f06f 000a 	mvn.w	r0, #10
    965a:	e744      	b.n	94e6 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    965c:	480d      	ldr	r0, [pc, #52]	; (9694 <z_impl_k_mutex_lock+0x214>)
    965e:	f7ff fcdf 	bl	9020 <z_spin_unlock_valid>
    9662:	b130      	cbz	r0, 9672 <z_impl_k_mutex_lock+0x1f2>
    9664:	f385 8811 	msr	BASEPRI, r5
    9668:	f3bf 8f6f 	isb	sy
    966c:	f06f 000a 	mvn.w	r0, #10
    9670:	e739      	b.n	94e6 <z_impl_k_mutex_lock+0x66>
    9672:	4c0e      	ldr	r4, [pc, #56]	; (96ac <z_impl_k_mutex_lock+0x22c>)
    9674:	23b9      	movs	r3, #185	; 0xb9
    9676:	4622      	mov	r2, r4
    9678:	490f      	ldr	r1, [pc, #60]	; (96b8 <z_impl_k_mutex_lock+0x238>)
    967a:	480a      	ldr	r0, [pc, #40]	; (96a4 <z_impl_k_mutex_lock+0x224>)
    967c:	f002 fd74 	bl	c168 <assert_print>
    9680:	4904      	ldr	r1, [pc, #16]	; (9694 <z_impl_k_mutex_lock+0x214>)
    9682:	480e      	ldr	r0, [pc, #56]	; (96bc <z_impl_k_mutex_lock+0x23c>)
    9684:	f002 fd70 	bl	c168 <assert_print>
    9688:	21b9      	movs	r1, #185	; 0xb9
    968a:	4620      	mov	r0, r4
    968c:	f002 fd65 	bl	c15a <assert_post_action>
    9690:	e7e8      	b.n	9664 <z_impl_k_mutex_lock+0x1e4>
    9692:	bf00      	nop
    9694:	20001258 	.word	0x20001258
    9698:	20001228 	.word	0x20001228
    969c:	0000f594 	.word	0x0000f594
    96a0:	0000f4dc 	.word	0x0000f4dc
    96a4:	0000d51c 	.word	0x0000d51c
    96a8:	0000f5b8 	.word	0x0000f5b8
    96ac:	0000ddf4 	.word	0x0000ddf4
    96b0:	0000de54 	.word	0x0000de54
    96b4:	0000de6c 	.word	0x0000de6c
    96b8:	0000de24 	.word	0x0000de24
    96bc:	0000de3c 	.word	0x0000de3c

000096c0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    96c0:	b570      	push	{r4, r5, r6, lr}
    96c2:	4604      	mov	r4, r0
    96c4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    96c8:	bb03      	cbnz	r3, 970c <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    96ca:	68a3      	ldr	r3, [r4, #8]
    96cc:	2b00      	cmp	r3, #0
    96ce:	f000 80a6 	beq.w	981e <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    96d2:	4a56      	ldr	r2, [pc, #344]	; (982c <z_impl_k_mutex_unlock+0x16c>)
    96d4:	6892      	ldr	r2, [r2, #8]
    96d6:	4293      	cmp	r3, r2
    96d8:	f040 80a4 	bne.w	9824 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    96dc:	68e3      	ldr	r3, [r4, #12]
    96de:	b323      	cbz	r3, 972a <z_impl_k_mutex_unlock+0x6a>
    96e0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    96e4:	bb6b      	cbnz	r3, 9742 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    96e6:	4b51      	ldr	r3, [pc, #324]	; (982c <z_impl_k_mutex_unlock+0x16c>)
    96e8:	689b      	ldr	r3, [r3, #8]
    96ea:	7bdb      	ldrb	r3, [r3, #15]
    96ec:	2b01      	cmp	r3, #1
    96ee:	d037      	beq.n	9760 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    96f0:	4b4e      	ldr	r3, [pc, #312]	; (982c <z_impl_k_mutex_unlock+0x16c>)
    96f2:	689a      	ldr	r2, [r3, #8]
    96f4:	7bd3      	ldrb	r3, [r2, #15]
    96f6:	3b01      	subs	r3, #1
    96f8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    96fa:	68e3      	ldr	r3, [r4, #12]
    96fc:	2b01      	cmp	r3, #1
    96fe:	d93e      	bls.n	977e <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    9700:	3b01      	subs	r3, #1
    9702:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    9704:	f001 f872 	bl	a7ec <k_sched_unlock>

	return 0;
    9708:	2000      	movs	r0, #0
}
    970a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    970c:	4d48      	ldr	r5, [pc, #288]	; (9830 <z_impl_k_mutex_unlock+0x170>)
    970e:	23c7      	movs	r3, #199	; 0xc7
    9710:	462a      	mov	r2, r5
    9712:	4948      	ldr	r1, [pc, #288]	; (9834 <z_impl_k_mutex_unlock+0x174>)
    9714:	4848      	ldr	r0, [pc, #288]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    9716:	f002 fd27 	bl	c168 <assert_print>
    971a:	4848      	ldr	r0, [pc, #288]	; (983c <z_impl_k_mutex_unlock+0x17c>)
    971c:	f002 fd24 	bl	c168 <assert_print>
    9720:	21c7      	movs	r1, #199	; 0xc7
    9722:	4628      	mov	r0, r5
    9724:	f002 fd19 	bl	c15a <assert_post_action>
    9728:	e7cf      	b.n	96ca <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    972a:	4d41      	ldr	r5, [pc, #260]	; (9830 <z_impl_k_mutex_unlock+0x170>)
    972c:	23df      	movs	r3, #223	; 0xdf
    972e:	462a      	mov	r2, r5
    9730:	4943      	ldr	r1, [pc, #268]	; (9840 <z_impl_k_mutex_unlock+0x180>)
    9732:	4841      	ldr	r0, [pc, #260]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    9734:	f002 fd18 	bl	c168 <assert_print>
    9738:	21df      	movs	r1, #223	; 0xdf
    973a:	4628      	mov	r0, r5
    973c:	f002 fd0d 	bl	c15a <assert_post_action>
    9740:	e7ce      	b.n	96e0 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    9742:	4d40      	ldr	r5, [pc, #256]	; (9844 <z_impl_k_mutex_unlock+0x184>)
    9744:	23fd      	movs	r3, #253	; 0xfd
    9746:	462a      	mov	r2, r5
    9748:	493a      	ldr	r1, [pc, #232]	; (9834 <z_impl_k_mutex_unlock+0x174>)
    974a:	483b      	ldr	r0, [pc, #236]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    974c:	f002 fd0c 	bl	c168 <assert_print>
    9750:	483d      	ldr	r0, [pc, #244]	; (9848 <z_impl_k_mutex_unlock+0x188>)
    9752:	f002 fd09 	bl	c168 <assert_print>
    9756:	21fd      	movs	r1, #253	; 0xfd
    9758:	4628      	mov	r0, r5
    975a:	f002 fcfe 	bl	c15a <assert_post_action>
    975e:	e7c2      	b.n	96e6 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9760:	4d38      	ldr	r5, [pc, #224]	; (9844 <z_impl_k_mutex_unlock+0x184>)
    9762:	23fe      	movs	r3, #254	; 0xfe
    9764:	462a      	mov	r2, r5
    9766:	4939      	ldr	r1, [pc, #228]	; (984c <z_impl_k_mutex_unlock+0x18c>)
    9768:	4833      	ldr	r0, [pc, #204]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    976a:	f002 fcfd 	bl	c168 <assert_print>
    976e:	4836      	ldr	r0, [pc, #216]	; (9848 <z_impl_k_mutex_unlock+0x188>)
    9770:	f002 fcfa 	bl	c168 <assert_print>
    9774:	21fe      	movs	r1, #254	; 0xfe
    9776:	4628      	mov	r0, r5
    9778:	f002 fcef 	bl	c15a <assert_post_action>
    977c:	e7b8      	b.n	96f0 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    977e:	f04f 0320 	mov.w	r3, #32
    9782:	f3ef 8511 	mrs	r5, BASEPRI
    9786:	f383 8812 	msr	BASEPRI_MAX, r3
    978a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    978e:	4830      	ldr	r0, [pc, #192]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    9790:	f7ff fc36 	bl	9000 <z_spin_lock_valid>
    9794:	b1c0      	cbz	r0, 97c8 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    9796:	482e      	ldr	r0, [pc, #184]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    9798:	f7ff fc52 	bl	9040 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    979c:	6921      	ldr	r1, [r4, #16]
    979e:	4620      	mov	r0, r4
    97a0:	f003 fbf6 	bl	cf90 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    97a4:	4620      	mov	r0, r4
    97a6:	f001 f963 	bl	aa70 <z_unpend_first_thread>
	mutex->owner = new_owner;
    97aa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    97ac:	b1e0      	cbz	r0, 97e8 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    97ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    97b2:	6123      	str	r3, [r4, #16]
    97b4:	2300      	movs	r3, #0
    97b6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    97ba:	f000 fce1 	bl	a180 <z_ready_thread>
		z_reschedule(&lock, key);
    97be:	4629      	mov	r1, r5
    97c0:	4823      	ldr	r0, [pc, #140]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    97c2:	f000 fa39 	bl	9c38 <z_reschedule>
    97c6:	e79d      	b.n	9704 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97c8:	4e22      	ldr	r6, [pc, #136]	; (9854 <z_impl_k_mutex_unlock+0x194>)
    97ca:	238e      	movs	r3, #142	; 0x8e
    97cc:	4632      	mov	r2, r6
    97ce:	4922      	ldr	r1, [pc, #136]	; (9858 <z_impl_k_mutex_unlock+0x198>)
    97d0:	4819      	ldr	r0, [pc, #100]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    97d2:	f002 fcc9 	bl	c168 <assert_print>
    97d6:	491e      	ldr	r1, [pc, #120]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    97d8:	4820      	ldr	r0, [pc, #128]	; (985c <z_impl_k_mutex_unlock+0x19c>)
    97da:	f002 fcc5 	bl	c168 <assert_print>
    97de:	218e      	movs	r1, #142	; 0x8e
    97e0:	4630      	mov	r0, r6
    97e2:	f002 fcba 	bl	c15a <assert_post_action>
    97e6:	e7d6      	b.n	9796 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    97e8:	2300      	movs	r3, #0
    97ea:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97ec:	4818      	ldr	r0, [pc, #96]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    97ee:	f7ff fc17 	bl	9020 <z_spin_unlock_valid>
    97f2:	b120      	cbz	r0, 97fe <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    97f4:	f385 8811 	msr	BASEPRI, r5
    97f8:	f3bf 8f6f 	isb	sy
    97fc:	e782      	b.n	9704 <z_impl_k_mutex_unlock+0x44>
    97fe:	4c15      	ldr	r4, [pc, #84]	; (9854 <z_impl_k_mutex_unlock+0x194>)
    9800:	23b9      	movs	r3, #185	; 0xb9
    9802:	4622      	mov	r2, r4
    9804:	4916      	ldr	r1, [pc, #88]	; (9860 <z_impl_k_mutex_unlock+0x1a0>)
    9806:	480c      	ldr	r0, [pc, #48]	; (9838 <z_impl_k_mutex_unlock+0x178>)
    9808:	f002 fcae 	bl	c168 <assert_print>
    980c:	4910      	ldr	r1, [pc, #64]	; (9850 <z_impl_k_mutex_unlock+0x190>)
    980e:	4815      	ldr	r0, [pc, #84]	; (9864 <z_impl_k_mutex_unlock+0x1a4>)
    9810:	f002 fcaa 	bl	c168 <assert_print>
    9814:	21b9      	movs	r1, #185	; 0xb9
    9816:	4620      	mov	r0, r4
    9818:	f002 fc9f 	bl	c15a <assert_post_action>
    981c:	e7ea      	b.n	97f4 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    981e:	f06f 0015 	mvn.w	r0, #21
    9822:	e772      	b.n	970a <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    9824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9828:	e76f      	b.n	970a <z_impl_k_mutex_unlock+0x4a>
    982a:	bf00      	nop
    982c:	20001228 	.word	0x20001228
    9830:	0000f594 	.word	0x0000f594
    9834:	0000f4dc 	.word	0x0000f4dc
    9838:	0000d51c 	.word	0x0000d51c
    983c:	0000f5b8 	.word	0x0000f5b8
    9840:	0000f5e0 	.word	0x0000f5e0
    9844:	0000f5f8 	.word	0x0000f5f8
    9848:	0000f624 	.word	0x0000f624
    984c:	0000f628 	.word	0x0000f628
    9850:	20001258 	.word	0x20001258
    9854:	0000ddf4 	.word	0x0000ddf4
    9858:	0000de54 	.word	0x0000de54
    985c:	0000de6c 	.word	0x0000de6c
    9860:	0000de24 	.word	0x0000de24
    9864:	0000de3c 	.word	0x0000de3c

00009868 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9868:	b570      	push	{r4, r5, r6, lr}
    986a:	4604      	mov	r4, r0
	__asm__ volatile(
    986c:	f04f 0320 	mov.w	r3, #32
    9870:	f3ef 8511 	mrs	r5, BASEPRI
    9874:	f383 8812 	msr	BASEPRI_MAX, r3
    9878:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    987c:	4817      	ldr	r0, [pc, #92]	; (98dc <z_impl_k_sem_give+0x74>)
    987e:	f7ff fbbf 	bl	9000 <z_spin_lock_valid>
    9882:	b180      	cbz	r0, 98a6 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    9884:	4815      	ldr	r0, [pc, #84]	; (98dc <z_impl_k_sem_give+0x74>)
    9886:	f7ff fbdb 	bl	9040 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    988a:	4620      	mov	r0, r4
    988c:	f001 f8f0 	bl	aa70 <z_unpend_first_thread>

	if (thread != NULL) {
    9890:	b1c8      	cbz	r0, 98c6 <z_impl_k_sem_give+0x5e>
    9892:	2200      	movs	r2, #0
    9894:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    9898:	f000 fc72 	bl	a180 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    989c:	4629      	mov	r1, r5
    989e:	480f      	ldr	r0, [pc, #60]	; (98dc <z_impl_k_sem_give+0x74>)
    98a0:	f000 f9ca 	bl	9c38 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    98a4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98a6:	4e0e      	ldr	r6, [pc, #56]	; (98e0 <z_impl_k_sem_give+0x78>)
    98a8:	238e      	movs	r3, #142	; 0x8e
    98aa:	4632      	mov	r2, r6
    98ac:	490d      	ldr	r1, [pc, #52]	; (98e4 <z_impl_k_sem_give+0x7c>)
    98ae:	480e      	ldr	r0, [pc, #56]	; (98e8 <z_impl_k_sem_give+0x80>)
    98b0:	f002 fc5a 	bl	c168 <assert_print>
    98b4:	4909      	ldr	r1, [pc, #36]	; (98dc <z_impl_k_sem_give+0x74>)
    98b6:	480d      	ldr	r0, [pc, #52]	; (98ec <z_impl_k_sem_give+0x84>)
    98b8:	f002 fc56 	bl	c168 <assert_print>
    98bc:	218e      	movs	r1, #142	; 0x8e
    98be:	4630      	mov	r0, r6
    98c0:	f002 fc4b 	bl	c15a <assert_post_action>
    98c4:	e7de      	b.n	9884 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    98c6:	68a3      	ldr	r3, [r4, #8]
    98c8:	68e2      	ldr	r2, [r4, #12]
    98ca:	4293      	cmp	r3, r2
    98cc:	d003      	beq.n	98d6 <z_impl_k_sem_give+0x6e>
    98ce:	2201      	movs	r2, #1
    98d0:	4413      	add	r3, r2
    98d2:	60a3      	str	r3, [r4, #8]
}
    98d4:	e7e2      	b.n	989c <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    98d6:	2200      	movs	r2, #0
    98d8:	e7fa      	b.n	98d0 <z_impl_k_sem_give+0x68>
    98da:	bf00      	nop
    98dc:	2000125c 	.word	0x2000125c
    98e0:	0000ddf4 	.word	0x0000ddf4
    98e4:	0000de54 	.word	0x0000de54
    98e8:	0000d51c 	.word	0x0000d51c
    98ec:	0000de6c 	.word	0x0000de6c

000098f0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    98f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98f4:	b082      	sub	sp, #8
    98f6:	4604      	mov	r4, r0
    98f8:	4617      	mov	r7, r2
    98fa:	461d      	mov	r5, r3
    98fc:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    9900:	b111      	cbz	r1, 9908 <z_impl_k_sem_take+0x18>
    9902:	ea55 0302 	orrs.w	r3, r5, r2
    9906:	d11f      	bne.n	9948 <z_impl_k_sem_take+0x58>
    9908:	f04f 0320 	mov.w	r3, #32
    990c:	f3ef 8611 	mrs	r6, BASEPRI
    9910:	f383 8812 	msr	BASEPRI_MAX, r3
    9914:	f3bf 8f6f 	isb	sy
    9918:	4836      	ldr	r0, [pc, #216]	; (99f4 <z_impl_k_sem_take+0x104>)
    991a:	f7ff fb71 	bl	9000 <z_spin_lock_valid>
    991e:	b310      	cbz	r0, 9966 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    9920:	4834      	ldr	r0, [pc, #208]	; (99f4 <z_impl_k_sem_take+0x104>)
    9922:	f7ff fb8d 	bl	9040 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    9926:	68a1      	ldr	r1, [r4, #8]
    9928:	2900      	cmp	r1, #0
    992a:	d03d      	beq.n	99a8 <z_impl_k_sem_take+0xb8>
		sem->count--;
    992c:	3901      	subs	r1, #1
    992e:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9930:	4830      	ldr	r0, [pc, #192]	; (99f4 <z_impl_k_sem_take+0x104>)
    9932:	f7ff fb75 	bl	9020 <z_spin_unlock_valid>
    9936:	b338      	cbz	r0, 9988 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    9938:	f386 8811 	msr	BASEPRI, r6
    993c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9940:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    9942:	b002      	add	sp, #8
    9944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    9948:	4e2b      	ldr	r6, [pc, #172]	; (99f8 <z_impl_k_sem_take+0x108>)
    994a:	2379      	movs	r3, #121	; 0x79
    994c:	4632      	mov	r2, r6
    994e:	492b      	ldr	r1, [pc, #172]	; (99fc <z_impl_k_sem_take+0x10c>)
    9950:	482b      	ldr	r0, [pc, #172]	; (9a00 <z_impl_k_sem_take+0x110>)
    9952:	f002 fc09 	bl	c168 <assert_print>
    9956:	482b      	ldr	r0, [pc, #172]	; (9a04 <z_impl_k_sem_take+0x114>)
    9958:	f002 fc06 	bl	c168 <assert_print>
    995c:	2179      	movs	r1, #121	; 0x79
    995e:	4630      	mov	r0, r6
    9960:	f002 fbfb 	bl	c15a <assert_post_action>
    9964:	e7d0      	b.n	9908 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9966:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9a08 <z_impl_k_sem_take+0x118>
    996a:	238e      	movs	r3, #142	; 0x8e
    996c:	4642      	mov	r2, r8
    996e:	4927      	ldr	r1, [pc, #156]	; (9a0c <z_impl_k_sem_take+0x11c>)
    9970:	4823      	ldr	r0, [pc, #140]	; (9a00 <z_impl_k_sem_take+0x110>)
    9972:	f002 fbf9 	bl	c168 <assert_print>
    9976:	491f      	ldr	r1, [pc, #124]	; (99f4 <z_impl_k_sem_take+0x104>)
    9978:	4825      	ldr	r0, [pc, #148]	; (9a10 <z_impl_k_sem_take+0x120>)
    997a:	f002 fbf5 	bl	c168 <assert_print>
    997e:	218e      	movs	r1, #142	; 0x8e
    9980:	4640      	mov	r0, r8
    9982:	f002 fbea 	bl	c15a <assert_post_action>
    9986:	e7cb      	b.n	9920 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9988:	4c1f      	ldr	r4, [pc, #124]	; (9a08 <z_impl_k_sem_take+0x118>)
    998a:	23b9      	movs	r3, #185	; 0xb9
    998c:	4622      	mov	r2, r4
    998e:	4921      	ldr	r1, [pc, #132]	; (9a14 <z_impl_k_sem_take+0x124>)
    9990:	481b      	ldr	r0, [pc, #108]	; (9a00 <z_impl_k_sem_take+0x110>)
    9992:	f002 fbe9 	bl	c168 <assert_print>
    9996:	4917      	ldr	r1, [pc, #92]	; (99f4 <z_impl_k_sem_take+0x104>)
    9998:	481f      	ldr	r0, [pc, #124]	; (9a18 <z_impl_k_sem_take+0x128>)
    999a:	f002 fbe5 	bl	c168 <assert_print>
    999e:	21b9      	movs	r1, #185	; 0xb9
    99a0:	4620      	mov	r0, r4
    99a2:	f002 fbda 	bl	c15a <assert_post_action>
    99a6:	e7c7      	b.n	9938 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    99a8:	ea55 0307 	orrs.w	r3, r5, r7
    99ac:	d007      	beq.n	99be <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    99ae:	9700      	str	r7, [sp, #0]
    99b0:	9501      	str	r5, [sp, #4]
    99b2:	4622      	mov	r2, r4
    99b4:	4631      	mov	r1, r6
    99b6:	480f      	ldr	r0, [pc, #60]	; (99f4 <z_impl_k_sem_take+0x104>)
    99b8:	f000 fdbe 	bl	a538 <z_pend_curr>
	return ret;
    99bc:	e7c1      	b.n	9942 <z_impl_k_sem_take+0x52>
    99be:	480d      	ldr	r0, [pc, #52]	; (99f4 <z_impl_k_sem_take+0x104>)
    99c0:	f7ff fb2e 	bl	9020 <z_spin_unlock_valid>
    99c4:	b130      	cbz	r0, 99d4 <z_impl_k_sem_take+0xe4>
    99c6:	f386 8811 	msr	BASEPRI, r6
    99ca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    99ce:	f06f 000f 	mvn.w	r0, #15
    99d2:	e7b6      	b.n	9942 <z_impl_k_sem_take+0x52>
    99d4:	4c0c      	ldr	r4, [pc, #48]	; (9a08 <z_impl_k_sem_take+0x118>)
    99d6:	23b9      	movs	r3, #185	; 0xb9
    99d8:	4622      	mov	r2, r4
    99da:	490e      	ldr	r1, [pc, #56]	; (9a14 <z_impl_k_sem_take+0x124>)
    99dc:	4808      	ldr	r0, [pc, #32]	; (9a00 <z_impl_k_sem_take+0x110>)
    99de:	f002 fbc3 	bl	c168 <assert_print>
    99e2:	4904      	ldr	r1, [pc, #16]	; (99f4 <z_impl_k_sem_take+0x104>)
    99e4:	480c      	ldr	r0, [pc, #48]	; (9a18 <z_impl_k_sem_take+0x128>)
    99e6:	f002 fbbf 	bl	c168 <assert_print>
    99ea:	21b9      	movs	r1, #185	; 0xb9
    99ec:	4620      	mov	r0, r4
    99ee:	f002 fbb4 	bl	c15a <assert_post_action>
    99f2:	e7e8      	b.n	99c6 <z_impl_k_sem_take+0xd6>
    99f4:	2000125c 	.word	0x2000125c
    99f8:	0000f65c 	.word	0x0000f65c
    99fc:	0000f67c 	.word	0x0000f67c
    9a00:	0000d51c 	.word	0x0000d51c
    9a04:	0000f624 	.word	0x0000f624
    9a08:	0000ddf4 	.word	0x0000ddf4
    9a0c:	0000de54 	.word	0x0000de54
    9a10:	0000de6c 	.word	0x0000de6c
    9a14:	0000de24 	.word	0x0000de24
    9a18:	0000de3c 	.word	0x0000de3c

00009a1c <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    9a1c:	b538      	push	{r3, r4, r5, lr}
    9a1e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    9a20:	6883      	ldr	r3, [r0, #8]
    9a22:	b10b      	cbz	r3, 9a28 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    9a24:	68a0      	ldr	r0, [r4, #8]
    9a26:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    9a28:	4d06      	ldr	r5, [pc, #24]	; (9a44 <pended_on_thread+0x28>)
    9a2a:	f240 23b9 	movw	r3, #697	; 0x2b9
    9a2e:	462a      	mov	r2, r5
    9a30:	4905      	ldr	r1, [pc, #20]	; (9a48 <pended_on_thread+0x2c>)
    9a32:	4806      	ldr	r0, [pc, #24]	; (9a4c <pended_on_thread+0x30>)
    9a34:	f002 fb98 	bl	c168 <assert_print>
    9a38:	f240 21b9 	movw	r1, #697	; 0x2b9
    9a3c:	4628      	mov	r0, r5
    9a3e:	f002 fb8c 	bl	c15a <assert_post_action>
    9a42:	e7ef      	b.n	9a24 <pended_on_thread+0x8>
    9a44:	0000f6cc 	.word	0x0000f6cc
    9a48:	0000f6f0 	.word	0x0000f6f0
    9a4c:	0000d51c 	.word	0x0000d51c

00009a50 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9a54:	bf08      	it	eq
    9a56:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9a5a:	d100      	bne.n	9a5e <add_thread_timeout+0xe>
    9a5c:	4770      	bx	lr
{
    9a5e:	b508      	push	{r3, lr}
    9a60:	4902      	ldr	r1, [pc, #8]	; (9a6c <add_thread_timeout+0x1c>)
    9a62:	3018      	adds	r0, #24
    9a64:	f001 fb36 	bl	b0d4 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    9a68:	bd08      	pop	{r3, pc}
    9a6a:	bf00      	nop
    9a6c:	0000a2dd 	.word	0x0000a2dd

00009a70 <z_reset_time_slice>:
{
    9a70:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    9a72:	4b07      	ldr	r3, [pc, #28]	; (9a90 <z_reset_time_slice+0x20>)
    9a74:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    9a76:	b904      	cbnz	r4, 9a7a <z_reset_time_slice+0xa>
}
    9a78:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9a7a:	f7fc ff29 	bl	68d0 <sys_clock_elapsed>
    9a7e:	4404      	add	r4, r0
    9a80:	4b04      	ldr	r3, [pc, #16]	; (9a94 <z_reset_time_slice+0x24>)
    9a82:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    9a84:	2100      	movs	r1, #0
    9a86:	4b02      	ldr	r3, [pc, #8]	; (9a90 <z_reset_time_slice+0x20>)
    9a88:	6818      	ldr	r0, [r3, #0]
    9a8a:	f001 fcb3 	bl	b3f4 <z_set_timeout_expiry>
}
    9a8e:	e7f3      	b.n	9a78 <z_reset_time_slice+0x8>
    9a90:	2000126c 	.word	0x2000126c
    9a94:	20001228 	.word	0x20001228

00009a98 <k_sched_time_slice_set>:
{
    9a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a9c:	4604      	mov	r4, r0
    9a9e:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    9aa0:	2700      	movs	r7, #0
	__asm__ volatile(
    9aa2:	f04f 0320 	mov.w	r3, #32
    9aa6:	f3ef 8611 	mrs	r6, BASEPRI
    9aaa:	f383 8812 	msr	BASEPRI_MAX, r3
    9aae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ab2:	482a      	ldr	r0, [pc, #168]	; (9b5c <k_sched_time_slice_set+0xc4>)
    9ab4:	f7ff faa4 	bl	9000 <z_spin_lock_valid>
    9ab8:	b118      	cbz	r0, 9ac2 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    9aba:	4828      	ldr	r0, [pc, #160]	; (9b5c <k_sched_time_slice_set+0xc4>)
    9abc:	f7ff fac0 	bl	9040 <z_spin_lock_set_owner>
	return k;
    9ac0:	e023      	b.n	9b0a <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ac2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 9b60 <k_sched_time_slice_set+0xc8>
    9ac6:	238e      	movs	r3, #142	; 0x8e
    9ac8:	4642      	mov	r2, r8
    9aca:	4926      	ldr	r1, [pc, #152]	; (9b64 <k_sched_time_slice_set+0xcc>)
    9acc:	4826      	ldr	r0, [pc, #152]	; (9b68 <k_sched_time_slice_set+0xd0>)
    9ace:	f002 fb4b 	bl	c168 <assert_print>
    9ad2:	4922      	ldr	r1, [pc, #136]	; (9b5c <k_sched_time_slice_set+0xc4>)
    9ad4:	4825      	ldr	r0, [pc, #148]	; (9b6c <k_sched_time_slice_set+0xd4>)
    9ad6:	f002 fb47 	bl	c168 <assert_print>
    9ada:	218e      	movs	r1, #142	; 0x8e
    9adc:	4640      	mov	r0, r8
    9ade:	f002 fb3c 	bl	c15a <assert_post_action>
    9ae2:	e7ea      	b.n	9aba <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    9ae4:	2802      	cmp	r0, #2
    9ae6:	bfb8      	it	lt
    9ae8:	2002      	movlt	r0, #2
    9aea:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    9aec:	4b20      	ldr	r3, [pc, #128]	; (9b70 <k_sched_time_slice_set+0xd8>)
    9aee:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9af0:	4b20      	ldr	r3, [pc, #128]	; (9b74 <k_sched_time_slice_set+0xdc>)
    9af2:	6898      	ldr	r0, [r3, #8]
    9af4:	f7ff ffbc 	bl	9a70 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9af8:	4818      	ldr	r0, [pc, #96]	; (9b5c <k_sched_time_slice_set+0xc4>)
    9afa:	f7ff fa91 	bl	9020 <z_spin_unlock_valid>
    9afe:	b1d0      	cbz	r0, 9b36 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    9b00:	f386 8811 	msr	BASEPRI, r6
    9b04:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9b08:	2701      	movs	r7, #1
    9b0a:	bb27      	cbnz	r7, 9b56 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    9b0c:	4b19      	ldr	r3, [pc, #100]	; (9b74 <k_sched_time_slice_set+0xdc>)
    9b0e:	2200      	movs	r2, #0
    9b10:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    9b12:	0c61      	lsrs	r1, r4, #17
    9b14:	03e3      	lsls	r3, r4, #15
    9b16:	f240 30e7 	movw	r0, #999	; 0x3e7
    9b1a:	1818      	adds	r0, r3, r0
    9b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9b20:	f04f 0300 	mov.w	r3, #0
    9b24:	f141 0100 	adc.w	r1, r1, #0
    9b28:	f7f6 fccc 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    9b2c:	4b12      	ldr	r3, [pc, #72]	; (9b78 <k_sched_time_slice_set+0xe0>)
    9b2e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9b30:	2c00      	cmp	r4, #0
    9b32:	dcd7      	bgt.n	9ae4 <k_sched_time_slice_set+0x4c>
    9b34:	e7da      	b.n	9aec <k_sched_time_slice_set+0x54>
    9b36:	4f0a      	ldr	r7, [pc, #40]	; (9b60 <k_sched_time_slice_set+0xc8>)
    9b38:	23b9      	movs	r3, #185	; 0xb9
    9b3a:	463a      	mov	r2, r7
    9b3c:	490f      	ldr	r1, [pc, #60]	; (9b7c <k_sched_time_slice_set+0xe4>)
    9b3e:	480a      	ldr	r0, [pc, #40]	; (9b68 <k_sched_time_slice_set+0xd0>)
    9b40:	f002 fb12 	bl	c168 <assert_print>
    9b44:	4905      	ldr	r1, [pc, #20]	; (9b5c <k_sched_time_slice_set+0xc4>)
    9b46:	480e      	ldr	r0, [pc, #56]	; (9b80 <k_sched_time_slice_set+0xe8>)
    9b48:	f002 fb0e 	bl	c168 <assert_print>
    9b4c:	21b9      	movs	r1, #185	; 0xb9
    9b4e:	4638      	mov	r0, r7
    9b50:	f002 fb03 	bl	c15a <assert_post_action>
    9b54:	e7d4      	b.n	9b00 <k_sched_time_slice_set+0x68>
}
    9b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b5a:	bf00      	nop
    9b5c:	20001264 	.word	0x20001264
    9b60:	0000ddf4 	.word	0x0000ddf4
    9b64:	0000de54 	.word	0x0000de54
    9b68:	0000d51c 	.word	0x0000d51c
    9b6c:	0000de6c 	.word	0x0000de6c
    9b70:	20001268 	.word	0x20001268
    9b74:	20001228 	.word	0x20001228
    9b78:	2000126c 	.word	0x2000126c
    9b7c:	0000de24 	.word	0x0000de24
    9b80:	0000de3c 	.word	0x0000de3c

00009b84 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    9b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b86:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9b88:	2500      	movs	r5, #0
	__asm__ volatile(
    9b8a:	f04f 0320 	mov.w	r3, #32
    9b8e:	f3ef 8611 	mrs	r6, BASEPRI
    9b92:	f383 8812 	msr	BASEPRI_MAX, r3
    9b96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b9a:	4820      	ldr	r0, [pc, #128]	; (9c1c <z_unpend_thread_no_timeout+0x98>)
    9b9c:	f7ff fa30 	bl	9000 <z_spin_lock_valid>
    9ba0:	b118      	cbz	r0, 9baa <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    9ba2:	481e      	ldr	r0, [pc, #120]	; (9c1c <z_unpend_thread_no_timeout+0x98>)
    9ba4:	f7ff fa4c 	bl	9040 <z_spin_lock_set_owner>
	return k;
    9ba8:	e014      	b.n	9bd4 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9baa:	4f1d      	ldr	r7, [pc, #116]	; (9c20 <z_unpend_thread_no_timeout+0x9c>)
    9bac:	238e      	movs	r3, #142	; 0x8e
    9bae:	463a      	mov	r2, r7
    9bb0:	491c      	ldr	r1, [pc, #112]	; (9c24 <z_unpend_thread_no_timeout+0xa0>)
    9bb2:	481d      	ldr	r0, [pc, #116]	; (9c28 <z_unpend_thread_no_timeout+0xa4>)
    9bb4:	f002 fad8 	bl	c168 <assert_print>
    9bb8:	4918      	ldr	r1, [pc, #96]	; (9c1c <z_unpend_thread_no_timeout+0x98>)
    9bba:	481c      	ldr	r0, [pc, #112]	; (9c2c <z_unpend_thread_no_timeout+0xa8>)
    9bbc:	f002 fad4 	bl	c168 <assert_print>
    9bc0:	218e      	movs	r1, #142	; 0x8e
    9bc2:	4638      	mov	r0, r7
    9bc4:	f002 fac9 	bl	c15a <assert_post_action>
    9bc8:	e7eb      	b.n	9ba2 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    9bca:	f386 8811 	msr	BASEPRI, r6
    9bce:	f3bf 8f6f 	isb	sy
    9bd2:	2501      	movs	r5, #1
    9bd4:	bb05      	cbnz	r5, 9c18 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9bd6:	4620      	mov	r0, r4
    9bd8:	f7ff ff20 	bl	9a1c <pended_on_thread>
    9bdc:	4621      	mov	r1, r4
    9bde:	f000 f8fb 	bl	9dd8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9be2:	7b63      	ldrb	r3, [r4, #13]
    9be4:	f023 0302 	bic.w	r3, r3, #2
    9be8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9bea:	2300      	movs	r3, #0
    9bec:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bee:	480b      	ldr	r0, [pc, #44]	; (9c1c <z_unpend_thread_no_timeout+0x98>)
    9bf0:	f7ff fa16 	bl	9020 <z_spin_unlock_valid>
    9bf4:	2800      	cmp	r0, #0
    9bf6:	d1e8      	bne.n	9bca <z_unpend_thread_no_timeout+0x46>
    9bf8:	4d09      	ldr	r5, [pc, #36]	; (9c20 <z_unpend_thread_no_timeout+0x9c>)
    9bfa:	23b9      	movs	r3, #185	; 0xb9
    9bfc:	462a      	mov	r2, r5
    9bfe:	490c      	ldr	r1, [pc, #48]	; (9c30 <z_unpend_thread_no_timeout+0xac>)
    9c00:	4809      	ldr	r0, [pc, #36]	; (9c28 <z_unpend_thread_no_timeout+0xa4>)
    9c02:	f002 fab1 	bl	c168 <assert_print>
    9c06:	4905      	ldr	r1, [pc, #20]	; (9c1c <z_unpend_thread_no_timeout+0x98>)
    9c08:	480a      	ldr	r0, [pc, #40]	; (9c34 <z_unpend_thread_no_timeout+0xb0>)
    9c0a:	f002 faad 	bl	c168 <assert_print>
    9c0e:	21b9      	movs	r1, #185	; 0xb9
    9c10:	4628      	mov	r0, r5
    9c12:	f002 faa2 	bl	c15a <assert_post_action>
    9c16:	e7d8      	b.n	9bca <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    9c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c1a:	bf00      	nop
    9c1c:	20001264 	.word	0x20001264
    9c20:	0000ddf4 	.word	0x0000ddf4
    9c24:	0000de54 	.word	0x0000de54
    9c28:	0000d51c 	.word	0x0000d51c
    9c2c:	0000de6c 	.word	0x0000de6c
    9c30:	0000de24 	.word	0x0000de24
    9c34:	0000de3c 	.word	0x0000de3c

00009c38 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    9c38:	b570      	push	{r4, r5, r6, lr}
    9c3a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    9c3c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9c3e:	b921      	cbnz	r1, 9c4a <z_reschedule+0x12>
    9c40:	f3ef 8305 	mrs	r3, IPSR
    9c44:	b913      	cbnz	r3, 9c4c <z_reschedule+0x14>
    9c46:	2101      	movs	r1, #1
    9c48:	e000      	b.n	9c4c <z_reschedule+0x14>
    9c4a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    9c4c:	f011 0f01 	tst.w	r1, #1
    9c50:	d01c      	beq.n	9c8c <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    9c52:	4b1b      	ldr	r3, [pc, #108]	; (9cc0 <z_reschedule+0x88>)
    9c54:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    9c56:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    9c58:	429a      	cmp	r2, r3
    9c5a:	d017      	beq.n	9c8c <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c5c:	4620      	mov	r0, r4
    9c5e:	f7ff f9df 	bl	9020 <z_spin_unlock_valid>
    9c62:	b118      	cbz	r0, 9c6c <z_reschedule+0x34>
	ret = arch_swap(key);
    9c64:	4628      	mov	r0, r5
    9c66:	f7fa fc99 	bl	459c <arch_swap>
		z_swap(lock, key);
    9c6a:	e017      	b.n	9c9c <z_reschedule+0x64>
    9c6c:	4e15      	ldr	r6, [pc, #84]	; (9cc4 <z_reschedule+0x8c>)
    9c6e:	23d0      	movs	r3, #208	; 0xd0
    9c70:	4632      	mov	r2, r6
    9c72:	4915      	ldr	r1, [pc, #84]	; (9cc8 <z_reschedule+0x90>)
    9c74:	4815      	ldr	r0, [pc, #84]	; (9ccc <z_reschedule+0x94>)
    9c76:	f002 fa77 	bl	c168 <assert_print>
    9c7a:	4621      	mov	r1, r4
    9c7c:	4814      	ldr	r0, [pc, #80]	; (9cd0 <z_reschedule+0x98>)
    9c7e:	f002 fa73 	bl	c168 <assert_print>
    9c82:	21d0      	movs	r1, #208	; 0xd0
    9c84:	4630      	mov	r0, r6
    9c86:	f002 fa68 	bl	c15a <assert_post_action>
    9c8a:	e7eb      	b.n	9c64 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c8c:	4620      	mov	r0, r4
    9c8e:	f7ff f9c7 	bl	9020 <z_spin_unlock_valid>
    9c92:	b120      	cbz	r0, 9c9e <z_reschedule+0x66>
    9c94:	f385 8811 	msr	BASEPRI, r5
    9c98:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    9c9c:	bd70      	pop	{r4, r5, r6, pc}
    9c9e:	4e09      	ldr	r6, [pc, #36]	; (9cc4 <z_reschedule+0x8c>)
    9ca0:	23b9      	movs	r3, #185	; 0xb9
    9ca2:	4632      	mov	r2, r6
    9ca4:	4908      	ldr	r1, [pc, #32]	; (9cc8 <z_reschedule+0x90>)
    9ca6:	4809      	ldr	r0, [pc, #36]	; (9ccc <z_reschedule+0x94>)
    9ca8:	f002 fa5e 	bl	c168 <assert_print>
    9cac:	4621      	mov	r1, r4
    9cae:	4808      	ldr	r0, [pc, #32]	; (9cd0 <z_reschedule+0x98>)
    9cb0:	f002 fa5a 	bl	c168 <assert_print>
    9cb4:	21b9      	movs	r1, #185	; 0xb9
    9cb6:	4630      	mov	r0, r6
    9cb8:	f002 fa4f 	bl	c15a <assert_post_action>
    9cbc:	e7ea      	b.n	9c94 <z_reschedule+0x5c>
    9cbe:	bf00      	nop
    9cc0:	20001228 	.word	0x20001228
    9cc4:	0000ddf4 	.word	0x0000ddf4
    9cc8:	0000de24 	.word	0x0000de24
    9ccc:	0000d51c 	.word	0x0000d51c
    9cd0:	0000de3c 	.word	0x0000de3c

00009cd4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    9cd4:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    9cd6:	2400      	movs	r4, #0
	__asm__ volatile(
    9cd8:	f04f 0320 	mov.w	r3, #32
    9cdc:	f3ef 8511 	mrs	r5, BASEPRI
    9ce0:	f383 8812 	msr	BASEPRI_MAX, r3
    9ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9ce8:	482f      	ldr	r0, [pc, #188]	; (9da8 <k_sched_lock+0xd4>)
    9cea:	f7ff f989 	bl	9000 <z_spin_lock_valid>
    9cee:	b118      	cbz	r0, 9cf8 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    9cf0:	482d      	ldr	r0, [pc, #180]	; (9da8 <k_sched_lock+0xd4>)
    9cf2:	f7ff f9a5 	bl	9040 <z_spin_lock_set_owner>
	return k;
    9cf6:	e022      	b.n	9d3e <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cf8:	4e2c      	ldr	r6, [pc, #176]	; (9dac <k_sched_lock+0xd8>)
    9cfa:	238e      	movs	r3, #142	; 0x8e
    9cfc:	4632      	mov	r2, r6
    9cfe:	492c      	ldr	r1, [pc, #176]	; (9db0 <k_sched_lock+0xdc>)
    9d00:	482c      	ldr	r0, [pc, #176]	; (9db4 <k_sched_lock+0xe0>)
    9d02:	f002 fa31 	bl	c168 <assert_print>
    9d06:	4928      	ldr	r1, [pc, #160]	; (9da8 <k_sched_lock+0xd4>)
    9d08:	482b      	ldr	r0, [pc, #172]	; (9db8 <k_sched_lock+0xe4>)
    9d0a:	f002 fa2d 	bl	c168 <assert_print>
    9d0e:	218e      	movs	r1, #142	; 0x8e
    9d10:	4630      	mov	r0, r6
    9d12:	f002 fa22 	bl	c15a <assert_post_action>
    9d16:	e7eb      	b.n	9cf0 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9d18:	4b28      	ldr	r3, [pc, #160]	; (9dbc <k_sched_lock+0xe8>)
    9d1a:	689b      	ldr	r3, [r3, #8]
    9d1c:	7bdb      	ldrb	r3, [r3, #15]
    9d1e:	2b01      	cmp	r3, #1
    9d20:	d022      	beq.n	9d68 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    9d22:	4b26      	ldr	r3, [pc, #152]	; (9dbc <k_sched_lock+0xe8>)
    9d24:	689a      	ldr	r2, [r3, #8]
    9d26:	7bd3      	ldrb	r3, [r2, #15]
    9d28:	3b01      	subs	r3, #1
    9d2a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d2c:	481e      	ldr	r0, [pc, #120]	; (9da8 <k_sched_lock+0xd4>)
    9d2e:	f7ff f977 	bl	9020 <z_spin_unlock_valid>
    9d32:	b340      	cbz	r0, 9d86 <k_sched_lock+0xb2>
	__asm__ volatile(
    9d34:	f385 8811 	msr	BASEPRI, r5
    9d38:	f3bf 8f6f 	isb	sy
    9d3c:	2401      	movs	r4, #1
    9d3e:	2c00      	cmp	r4, #0
    9d40:	d131      	bne.n	9da6 <k_sched_lock+0xd2>
    9d42:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9d46:	2b00      	cmp	r3, #0
    9d48:	d0e6      	beq.n	9d18 <k_sched_lock+0x44>
    9d4a:	4c1d      	ldr	r4, [pc, #116]	; (9dc0 <k_sched_lock+0xec>)
    9d4c:	23fd      	movs	r3, #253	; 0xfd
    9d4e:	4622      	mov	r2, r4
    9d50:	491c      	ldr	r1, [pc, #112]	; (9dc4 <k_sched_lock+0xf0>)
    9d52:	4818      	ldr	r0, [pc, #96]	; (9db4 <k_sched_lock+0xe0>)
    9d54:	f002 fa08 	bl	c168 <assert_print>
    9d58:	481b      	ldr	r0, [pc, #108]	; (9dc8 <k_sched_lock+0xf4>)
    9d5a:	f002 fa05 	bl	c168 <assert_print>
    9d5e:	21fd      	movs	r1, #253	; 0xfd
    9d60:	4620      	mov	r0, r4
    9d62:	f002 f9fa 	bl	c15a <assert_post_action>
    9d66:	e7d7      	b.n	9d18 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    9d68:	4c15      	ldr	r4, [pc, #84]	; (9dc0 <k_sched_lock+0xec>)
    9d6a:	23fe      	movs	r3, #254	; 0xfe
    9d6c:	4622      	mov	r2, r4
    9d6e:	4917      	ldr	r1, [pc, #92]	; (9dcc <k_sched_lock+0xf8>)
    9d70:	4810      	ldr	r0, [pc, #64]	; (9db4 <k_sched_lock+0xe0>)
    9d72:	f002 f9f9 	bl	c168 <assert_print>
    9d76:	4814      	ldr	r0, [pc, #80]	; (9dc8 <k_sched_lock+0xf4>)
    9d78:	f002 f9f6 	bl	c168 <assert_print>
    9d7c:	21fe      	movs	r1, #254	; 0xfe
    9d7e:	4620      	mov	r0, r4
    9d80:	f002 f9eb 	bl	c15a <assert_post_action>
    9d84:	e7cd      	b.n	9d22 <k_sched_lock+0x4e>
    9d86:	4c09      	ldr	r4, [pc, #36]	; (9dac <k_sched_lock+0xd8>)
    9d88:	23b9      	movs	r3, #185	; 0xb9
    9d8a:	4622      	mov	r2, r4
    9d8c:	4910      	ldr	r1, [pc, #64]	; (9dd0 <k_sched_lock+0xfc>)
    9d8e:	4809      	ldr	r0, [pc, #36]	; (9db4 <k_sched_lock+0xe0>)
    9d90:	f002 f9ea 	bl	c168 <assert_print>
    9d94:	4904      	ldr	r1, [pc, #16]	; (9da8 <k_sched_lock+0xd4>)
    9d96:	480f      	ldr	r0, [pc, #60]	; (9dd4 <k_sched_lock+0x100>)
    9d98:	f002 f9e6 	bl	c168 <assert_print>
    9d9c:	21b9      	movs	r1, #185	; 0xb9
    9d9e:	4620      	mov	r0, r4
    9da0:	f002 f9db 	bl	c15a <assert_post_action>
    9da4:	e7c6      	b.n	9d34 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    9da6:	bd70      	pop	{r4, r5, r6, pc}
    9da8:	20001264 	.word	0x20001264
    9dac:	0000ddf4 	.word	0x0000ddf4
    9db0:	0000de54 	.word	0x0000de54
    9db4:	0000d51c 	.word	0x0000d51c
    9db8:	0000de6c 	.word	0x0000de6c
    9dbc:	20001228 	.word	0x20001228
    9dc0:	0000f5f8 	.word	0x0000f5f8
    9dc4:	0000f4dc 	.word	0x0000f4dc
    9dc8:	0000f624 	.word	0x0000f624
    9dcc:	0000f628 	.word	0x0000f628
    9dd0:	0000de24 	.word	0x0000de24
    9dd4:	0000de3c 	.word	0x0000de3c

00009dd8 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    9dd8:	b538      	push	{r3, r4, r5, lr}
    9dda:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9ddc:	4b0c      	ldr	r3, [pc, #48]	; (9e10 <z_priq_dumb_remove+0x38>)
    9dde:	4299      	cmp	r1, r3
    9de0:	d007      	beq.n	9df2 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9de2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    9de4:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    9de6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9de8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9dea:	2300      	movs	r3, #0
    9dec:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    9dee:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    9df0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9df2:	4d08      	ldr	r5, [pc, #32]	; (9e14 <z_priq_dumb_remove+0x3c>)
    9df4:	f240 433d 	movw	r3, #1085	; 0x43d
    9df8:	462a      	mov	r2, r5
    9dfa:	4907      	ldr	r1, [pc, #28]	; (9e18 <z_priq_dumb_remove+0x40>)
    9dfc:	4807      	ldr	r0, [pc, #28]	; (9e1c <z_priq_dumb_remove+0x44>)
    9dfe:	f002 f9b3 	bl	c168 <assert_print>
    9e02:	f240 413d 	movw	r1, #1085	; 0x43d
    9e06:	4628      	mov	r0, r5
    9e08:	f002 f9a7 	bl	c15a <assert_post_action>
    9e0c:	e7e9      	b.n	9de2 <z_priq_dumb_remove+0xa>
    9e0e:	bf00      	nop
    9e10:	20000540 	.word	0x20000540
    9e14:	0000f6cc 	.word	0x0000f6cc
    9e18:	0000f708 	.word	0x0000f708
    9e1c:	0000d51c 	.word	0x0000d51c

00009e20 <update_cache>:
{
    9e20:	b538      	push	{r3, r4, r5, lr}
    9e22:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    9e24:	4819      	ldr	r0, [pc, #100]	; (9e8c <update_cache+0x6c>)
    9e26:	f003 f8f5 	bl	d014 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9e2a:	4605      	mov	r5, r0
    9e2c:	b188      	cbz	r0, 9e52 <update_cache+0x32>
	if (preempt_ok != 0) {
    9e2e:	bb14      	cbnz	r4, 9e76 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    9e30:	4b17      	ldr	r3, [pc, #92]	; (9e90 <update_cache+0x70>)
    9e32:	689b      	ldr	r3, [r3, #8]
    9e34:	b183      	cbz	r3, 9e58 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    9e36:	4b16      	ldr	r3, [pc, #88]	; (9e90 <update_cache+0x70>)
    9e38:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9e3a:	7b5a      	ldrb	r2, [r3, #13]
    9e3c:	f012 0f1f 	tst.w	r2, #31
    9e40:	d119      	bne.n	9e76 <update_cache+0x56>
	return node->next != NULL;
    9e42:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9e44:	b9ba      	cbnz	r2, 9e76 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9e46:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    9e48:	2a7f      	cmp	r2, #127	; 0x7f
    9e4a:	d914      	bls.n	9e76 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    9e4c:	4a10      	ldr	r2, [pc, #64]	; (9e90 <update_cache+0x70>)
    9e4e:	61d3      	str	r3, [r2, #28]
    9e50:	e01a      	b.n	9e88 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9e52:	4b0f      	ldr	r3, [pc, #60]	; (9e90 <update_cache+0x70>)
    9e54:	68dd      	ldr	r5, [r3, #12]
    9e56:	e7ea      	b.n	9e2e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    9e58:	4c0e      	ldr	r4, [pc, #56]	; (9e94 <update_cache+0x74>)
    9e5a:	2389      	movs	r3, #137	; 0x89
    9e5c:	4622      	mov	r2, r4
    9e5e:	490e      	ldr	r1, [pc, #56]	; (9e98 <update_cache+0x78>)
    9e60:	480e      	ldr	r0, [pc, #56]	; (9e9c <update_cache+0x7c>)
    9e62:	f002 f981 	bl	c168 <assert_print>
    9e66:	480e      	ldr	r0, [pc, #56]	; (9ea0 <update_cache+0x80>)
    9e68:	f002 f97e 	bl	c168 <assert_print>
    9e6c:	2189      	movs	r1, #137	; 0x89
    9e6e:	4620      	mov	r0, r4
    9e70:	f002 f973 	bl	c15a <assert_post_action>
    9e74:	e7df      	b.n	9e36 <update_cache+0x16>
		if (thread != _current) {
    9e76:	4b06      	ldr	r3, [pc, #24]	; (9e90 <update_cache+0x70>)
    9e78:	689b      	ldr	r3, [r3, #8]
    9e7a:	42ab      	cmp	r3, r5
    9e7c:	d002      	beq.n	9e84 <update_cache+0x64>
			z_reset_time_slice(thread);
    9e7e:	4628      	mov	r0, r5
    9e80:	f7ff fdf6 	bl	9a70 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9e84:	4b02      	ldr	r3, [pc, #8]	; (9e90 <update_cache+0x70>)
    9e86:	61dd      	str	r5, [r3, #28]
}
    9e88:	bd38      	pop	{r3, r4, r5, pc}
    9e8a:	bf00      	nop
    9e8c:	20001248 	.word	0x20001248
    9e90:	20001228 	.word	0x20001228
    9e94:	0000f6cc 	.word	0x0000f6cc
    9e98:	0000f72c 	.word	0x0000f72c
    9e9c:	0000d51c 	.word	0x0000d51c
    9ea0:	0000f624 	.word	0x0000f624

00009ea4 <move_thread_to_end_of_prio_q>:
{
    9ea4:	b538      	push	{r3, r4, r5, lr}
    9ea6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    9ea8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    9eaa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	db2b      	blt.n	9f0a <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    9eb2:	7b6b      	ldrb	r3, [r5, #13]
    9eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9eb8:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9eba:	4b22      	ldr	r3, [pc, #136]	; (9f44 <move_thread_to_end_of_prio_q+0xa0>)
    9ebc:	429d      	cmp	r5, r3
    9ebe:	d02c      	beq.n	9f1a <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    9ec0:	4b21      	ldr	r3, [pc, #132]	; (9f48 <move_thread_to_end_of_prio_q+0xa4>)
    9ec2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ec6:	429c      	cmp	r4, r3
    9ec8:	d039      	beq.n	9f3e <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9eca:	b16c      	cbz	r4, 9ee8 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9ecc:	4621      	mov	r1, r4
    9ece:	4628      	mov	r0, r5
    9ed0:	f003 f881 	bl	cfd6 <z_sched_prio_cmp>
    9ed4:	2800      	cmp	r0, #0
    9ed6:	dc2c      	bgt.n	9f32 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9ed8:	b134      	cbz	r4, 9ee8 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    9eda:	4b1b      	ldr	r3, [pc, #108]	; (9f48 <move_thread_to_end_of_prio_q+0xa4>)
    9edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ede:	429c      	cmp	r4, r3
    9ee0:	d002      	beq.n	9ee8 <move_thread_to_end_of_prio_q+0x44>
    9ee2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9ee4:	2c00      	cmp	r4, #0
    9ee6:	d1f0      	bne.n	9eca <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    9ee8:	4b17      	ldr	r3, [pc, #92]	; (9f48 <move_thread_to_end_of_prio_q+0xa4>)
    9eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    9eec:	f103 0120 	add.w	r1, r3, #32
    9ef0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9ef2:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9ef4:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9ef6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    9ef8:	4b13      	ldr	r3, [pc, #76]	; (9f48 <move_thread_to_end_of_prio_q+0xa4>)
    9efa:	6898      	ldr	r0, [r3, #8]
    9efc:	42a8      	cmp	r0, r5
    9efe:	bf14      	ite	ne
    9f00:	2000      	movne	r0, #0
    9f02:	2001      	moveq	r0, #1
    9f04:	f7ff ff8c 	bl	9e20 <update_cache>
}
    9f08:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9f0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9f0e:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9f10:	4601      	mov	r1, r0
    9f12:	480e      	ldr	r0, [pc, #56]	; (9f4c <move_thread_to_end_of_prio_q+0xa8>)
    9f14:	f7ff ff60 	bl	9dd8 <z_priq_dumb_remove>
}
    9f18:	e7cb      	b.n	9eb2 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9f1a:	4c0d      	ldr	r4, [pc, #52]	; (9f50 <move_thread_to_end_of_prio_q+0xac>)
    9f1c:	23ba      	movs	r3, #186	; 0xba
    9f1e:	4622      	mov	r2, r4
    9f20:	490c      	ldr	r1, [pc, #48]	; (9f54 <move_thread_to_end_of_prio_q+0xb0>)
    9f22:	480d      	ldr	r0, [pc, #52]	; (9f58 <move_thread_to_end_of_prio_q+0xb4>)
    9f24:	f002 f920 	bl	c168 <assert_print>
    9f28:	21ba      	movs	r1, #186	; 0xba
    9f2a:	4620      	mov	r0, r4
    9f2c:	f002 f915 	bl	c15a <assert_post_action>
    9f30:	e7c6      	b.n	9ec0 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    9f32:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    9f34:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9f36:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9f38:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9f3a:	6065      	str	r5, [r4, #4]
}
    9f3c:	e7dc      	b.n	9ef8 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9f3e:	2400      	movs	r4, #0
    9f40:	e7c3      	b.n	9eca <move_thread_to_end_of_prio_q+0x26>
    9f42:	bf00      	nop
    9f44:	20000540 	.word	0x20000540
    9f48:	20001228 	.word	0x20001228
    9f4c:	20001248 	.word	0x20001248
    9f50:	0000f6cc 	.word	0x0000f6cc
    9f54:	0000f708 	.word	0x0000f708
    9f58:	0000d51c 	.word	0x0000d51c

00009f5c <slice_expired_locked>:
{
    9f5c:	b538      	push	{r3, r4, r5, lr}
    9f5e:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    9f60:	4b07      	ldr	r3, [pc, #28]	; (9f80 <slice_expired_locked+0x24>)
    9f62:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    9f64:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    9f66:	f013 0f1f 	tst.w	r3, #31
    9f6a:	d004      	beq.n	9f76 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    9f6c:	4628      	mov	r0, r5
    9f6e:	f7ff fd7f 	bl	9a70 <z_reset_time_slice>
}
    9f72:	4620      	mov	r0, r4
    9f74:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    9f76:	4628      	mov	r0, r5
    9f78:	f7ff ff94 	bl	9ea4 <move_thread_to_end_of_prio_q>
    9f7c:	e7f6      	b.n	9f6c <slice_expired_locked+0x10>
    9f7e:	bf00      	nop
    9f80:	20001228 	.word	0x20001228

00009f84 <z_time_slice>:
{
    9f84:	b570      	push	{r4, r5, r6, lr}
    9f86:	4604      	mov	r4, r0
	__asm__ volatile(
    9f88:	f04f 0320 	mov.w	r3, #32
    9f8c:	f3ef 8511 	mrs	r5, BASEPRI
    9f90:	f383 8812 	msr	BASEPRI_MAX, r3
    9f94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f98:	4842      	ldr	r0, [pc, #264]	; (a0a4 <z_time_slice+0x120>)
    9f9a:	f7ff f831 	bl	9000 <z_spin_lock_valid>
    9f9e:	b310      	cbz	r0, 9fe6 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    9fa0:	4840      	ldr	r0, [pc, #256]	; (a0a4 <z_time_slice+0x120>)
    9fa2:	f7ff f84d 	bl	9040 <z_spin_lock_set_owner>
	return k;
    9fa6:	462b      	mov	r3, r5
	if (pending_current == _current) {
    9fa8:	4a3f      	ldr	r2, [pc, #252]	; (a0a8 <z_time_slice+0x124>)
    9faa:	6892      	ldr	r2, [r2, #8]
    9fac:	493f      	ldr	r1, [pc, #252]	; (a0ac <z_time_slice+0x128>)
    9fae:	6809      	ldr	r1, [r1, #0]
    9fb0:	428a      	cmp	r2, r1
    9fb2:	d028      	beq.n	a006 <z_time_slice+0x82>
	pending_current = NULL;
    9fb4:	493d      	ldr	r1, [pc, #244]	; (a0ac <z_time_slice+0x128>)
    9fb6:	2000      	movs	r0, #0
    9fb8:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    9fba:	493d      	ldr	r1, [pc, #244]	; (a0b0 <z_time_slice+0x12c>)
    9fbc:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    9fbe:	2900      	cmp	r1, #0
    9fc0:	d052      	beq.n	a068 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    9fc2:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    9fc4:	297f      	cmp	r1, #127	; 0x7f
    9fc6:	d83a      	bhi.n	a03e <z_time_slice+0xba>
    9fc8:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    9fca:	f011 0f1f 	tst.w	r1, #31
    9fce:	d140      	bne.n	a052 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9fd0:	f992 000e 	ldrsb.w	r0, [r2, #14]
    9fd4:	4937      	ldr	r1, [pc, #220]	; (a0b4 <z_time_slice+0x130>)
    9fd6:	6809      	ldr	r1, [r1, #0]
    9fd8:	4288      	cmp	r0, r1
    9fda:	db3c      	blt.n	a056 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    9fdc:	4936      	ldr	r1, [pc, #216]	; (a0b8 <z_time_slice+0x134>)
    9fde:	428a      	cmp	r2, r1
    9fe0:	d03b      	beq.n	a05a <z_time_slice+0xd6>
    9fe2:	2201      	movs	r2, #1
    9fe4:	e02c      	b.n	a040 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9fe6:	4e35      	ldr	r6, [pc, #212]	; (a0bc <z_time_slice+0x138>)
    9fe8:	238e      	movs	r3, #142	; 0x8e
    9fea:	4632      	mov	r2, r6
    9fec:	4934      	ldr	r1, [pc, #208]	; (a0c0 <z_time_slice+0x13c>)
    9fee:	4835      	ldr	r0, [pc, #212]	; (a0c4 <z_time_slice+0x140>)
    9ff0:	f002 f8ba 	bl	c168 <assert_print>
    9ff4:	492b      	ldr	r1, [pc, #172]	; (a0a4 <z_time_slice+0x120>)
    9ff6:	4834      	ldr	r0, [pc, #208]	; (a0c8 <z_time_slice+0x144>)
    9ff8:	f002 f8b6 	bl	c168 <assert_print>
    9ffc:	218e      	movs	r1, #142	; 0x8e
    9ffe:	4630      	mov	r0, r6
    a000:	f002 f8ab 	bl	c15a <assert_post_action>
    a004:	e7cc      	b.n	9fa0 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    a006:	4610      	mov	r0, r2
    a008:	f7ff fd32 	bl	9a70 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a00c:	4825      	ldr	r0, [pc, #148]	; (a0a4 <z_time_slice+0x120>)
    a00e:	f7ff f807 	bl	9020 <z_spin_unlock_valid>
    a012:	b120      	cbz	r0, a01e <z_time_slice+0x9a>
	__asm__ volatile(
    a014:	f385 8811 	msr	BASEPRI, r5
    a018:	f3bf 8f6f 	isb	sy
		return;
    a01c:	e030      	b.n	a080 <z_time_slice+0xfc>
    a01e:	4c27      	ldr	r4, [pc, #156]	; (a0bc <z_time_slice+0x138>)
    a020:	23b9      	movs	r3, #185	; 0xb9
    a022:	4622      	mov	r2, r4
    a024:	4929      	ldr	r1, [pc, #164]	; (a0cc <z_time_slice+0x148>)
    a026:	4827      	ldr	r0, [pc, #156]	; (a0c4 <z_time_slice+0x140>)
    a028:	f002 f89e 	bl	c168 <assert_print>
    a02c:	491d      	ldr	r1, [pc, #116]	; (a0a4 <z_time_slice+0x120>)
    a02e:	4828      	ldr	r0, [pc, #160]	; (a0d0 <z_time_slice+0x14c>)
    a030:	f002 f89a 	bl	c168 <assert_print>
    a034:	21b9      	movs	r1, #185	; 0xb9
    a036:	4620      	mov	r0, r4
    a038:	f002 f88f 	bl	c15a <assert_post_action>
    a03c:	e7ea      	b.n	a014 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    a03e:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    a040:	b192      	cbz	r2, a068 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    a042:	4a19      	ldr	r2, [pc, #100]	; (a0a8 <z_time_slice+0x124>)
    a044:	6910      	ldr	r0, [r2, #16]
    a046:	42a0      	cmp	r0, r4
    a048:	dd09      	ble.n	a05e <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    a04a:	1b00      	subs	r0, r0, r4
    a04c:	4a16      	ldr	r2, [pc, #88]	; (a0a8 <z_time_slice+0x124>)
    a04e:	6110      	str	r0, [r2, #16]
    a050:	e00d      	b.n	a06e <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    a052:	2200      	movs	r2, #0
    a054:	e7f4      	b.n	a040 <z_time_slice+0xbc>
    a056:	2200      	movs	r2, #0
    a058:	e7f2      	b.n	a040 <z_time_slice+0xbc>
    a05a:	2200      	movs	r2, #0
    a05c:	e7f0      	b.n	a040 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    a05e:	4628      	mov	r0, r5
    a060:	f7ff ff7c 	bl	9f5c <slice_expired_locked>
    a064:	4603      	mov	r3, r0
    a066:	e002      	b.n	a06e <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    a068:	4a0f      	ldr	r2, [pc, #60]	; (a0a8 <z_time_slice+0x124>)
    a06a:	2100      	movs	r1, #0
    a06c:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    a06e:	461c      	mov	r4, r3
    a070:	480c      	ldr	r0, [pc, #48]	; (a0a4 <z_time_slice+0x120>)
    a072:	f7fe ffd5 	bl	9020 <z_spin_unlock_valid>
    a076:	b120      	cbz	r0, a082 <z_time_slice+0xfe>
    a078:	f384 8811 	msr	BASEPRI, r4
    a07c:	f3bf 8f6f 	isb	sy
}
    a080:	bd70      	pop	{r4, r5, r6, pc}
    a082:	4d0e      	ldr	r5, [pc, #56]	; (a0bc <z_time_slice+0x138>)
    a084:	23b9      	movs	r3, #185	; 0xb9
    a086:	462a      	mov	r2, r5
    a088:	4910      	ldr	r1, [pc, #64]	; (a0cc <z_time_slice+0x148>)
    a08a:	480e      	ldr	r0, [pc, #56]	; (a0c4 <z_time_slice+0x140>)
    a08c:	f002 f86c 	bl	c168 <assert_print>
    a090:	4904      	ldr	r1, [pc, #16]	; (a0a4 <z_time_slice+0x120>)
    a092:	480f      	ldr	r0, [pc, #60]	; (a0d0 <z_time_slice+0x14c>)
    a094:	f002 f868 	bl	c168 <assert_print>
    a098:	21b9      	movs	r1, #185	; 0xb9
    a09a:	4628      	mov	r0, r5
    a09c:	f002 f85d 	bl	c15a <assert_post_action>
    a0a0:	e7ea      	b.n	a078 <z_time_slice+0xf4>
    a0a2:	bf00      	nop
    a0a4:	20001264 	.word	0x20001264
    a0a8:	20001228 	.word	0x20001228
    a0ac:	20001260 	.word	0x20001260
    a0b0:	2000126c 	.word	0x2000126c
    a0b4:	20001268 	.word	0x20001268
    a0b8:	20000540 	.word	0x20000540
    a0bc:	0000ddf4 	.word	0x0000ddf4
    a0c0:	0000de54 	.word	0x0000de54
    a0c4:	0000d51c 	.word	0x0000d51c
    a0c8:	0000de6c 	.word	0x0000de6c
    a0cc:	0000de24 	.word	0x0000de24
    a0d0:	0000de3c 	.word	0x0000de3c

0000a0d4 <ready_thread>:
{
    a0d4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    a0d6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a0d8:	f990 200d 	ldrsb.w	r2, [r0, #13]
    a0dc:	2a00      	cmp	r2, #0
    a0de:	db30      	blt.n	a142 <ready_thread+0x6e>
    a0e0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a0e2:	f013 0f1f 	tst.w	r3, #31
    a0e6:	d105      	bne.n	a0f4 <ready_thread+0x20>
	return node->next != NULL;
    a0e8:	6982      	ldr	r2, [r0, #24]
    a0ea:	b10a      	cbz	r2, a0f0 <ready_thread+0x1c>
    a0ec:	2200      	movs	r2, #0
    a0ee:	e002      	b.n	a0f6 <ready_thread+0x22>
    a0f0:	2201      	movs	r2, #1
    a0f2:	e000      	b.n	a0f6 <ready_thread+0x22>
    a0f4:	2200      	movs	r2, #0
    a0f6:	b322      	cbz	r2, a142 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    a0f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a0fc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a0fe:	4b1b      	ldr	r3, [pc, #108]	; (a16c <ready_thread+0x98>)
    a100:	429c      	cmp	r4, r3
    a102:	d01f      	beq.n	a144 <ready_thread+0x70>
	return list->head == list;
    a104:	4b1a      	ldr	r3, [pc, #104]	; (a170 <ready_thread+0x9c>)
    a106:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a10a:	429d      	cmp	r5, r3
    a10c:	d02c      	beq.n	a168 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a10e:	b16d      	cbz	r5, a12c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a110:	4629      	mov	r1, r5
    a112:	4620      	mov	r0, r4
    a114:	f002 ff5f 	bl	cfd6 <z_sched_prio_cmp>
    a118:	2800      	cmp	r0, #0
    a11a:	dc1f      	bgt.n	a15c <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a11c:	b135      	cbz	r5, a12c <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    a11e:	4b14      	ldr	r3, [pc, #80]	; (a170 <ready_thread+0x9c>)
    a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a122:	429d      	cmp	r5, r3
    a124:	d002      	beq.n	a12c <ready_thread+0x58>
    a126:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a128:	2d00      	cmp	r5, #0
    a12a:	d1f0      	bne.n	a10e <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    a12c:	4b10      	ldr	r3, [pc, #64]	; (a170 <ready_thread+0x9c>)
    a12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a130:	f103 0120 	add.w	r1, r3, #32
    a134:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a136:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a138:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a13a:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    a13c:	2000      	movs	r0, #0
    a13e:	f7ff fe6f 	bl	9e20 <update_cache>
}
    a142:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a144:	4d0b      	ldr	r5, [pc, #44]	; (a174 <ready_thread+0xa0>)
    a146:	23ba      	movs	r3, #186	; 0xba
    a148:	462a      	mov	r2, r5
    a14a:	490b      	ldr	r1, [pc, #44]	; (a178 <ready_thread+0xa4>)
    a14c:	480b      	ldr	r0, [pc, #44]	; (a17c <ready_thread+0xa8>)
    a14e:	f002 f80b 	bl	c168 <assert_print>
    a152:	21ba      	movs	r1, #186	; 0xba
    a154:	4628      	mov	r0, r5
    a156:	f002 f800 	bl	c15a <assert_post_action>
    a15a:	e7d3      	b.n	a104 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    a15c:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a15e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a160:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a162:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a164:	606c      	str	r4, [r5, #4]
}
    a166:	e7e9      	b.n	a13c <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a168:	2500      	movs	r5, #0
    a16a:	e7d0      	b.n	a10e <ready_thread+0x3a>
    a16c:	20000540 	.word	0x20000540
    a170:	20001228 	.word	0x20001228
    a174:	0000f6cc 	.word	0x0000f6cc
    a178:	0000f708 	.word	0x0000f708
    a17c:	0000d51c 	.word	0x0000d51c

0000a180 <z_ready_thread>:
{
    a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a182:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    a184:	2400      	movs	r4, #0
	__asm__ volatile(
    a186:	f04f 0320 	mov.w	r3, #32
    a18a:	f3ef 8611 	mrs	r6, BASEPRI
    a18e:	f383 8812 	msr	BASEPRI_MAX, r3
    a192:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a196:	481e      	ldr	r0, [pc, #120]	; (a210 <z_ready_thread+0x90>)
    a198:	f7fe ff32 	bl	9000 <z_spin_lock_valid>
    a19c:	b118      	cbz	r0, a1a6 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    a19e:	481c      	ldr	r0, [pc, #112]	; (a210 <z_ready_thread+0x90>)
    a1a0:	f7fe ff4e 	bl	9040 <z_spin_lock_set_owner>
	return k;
    a1a4:	e018      	b.n	a1d8 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a1a6:	4f1b      	ldr	r7, [pc, #108]	; (a214 <z_ready_thread+0x94>)
    a1a8:	238e      	movs	r3, #142	; 0x8e
    a1aa:	463a      	mov	r2, r7
    a1ac:	491a      	ldr	r1, [pc, #104]	; (a218 <z_ready_thread+0x98>)
    a1ae:	481b      	ldr	r0, [pc, #108]	; (a21c <z_ready_thread+0x9c>)
    a1b0:	f001 ffda 	bl	c168 <assert_print>
    a1b4:	4916      	ldr	r1, [pc, #88]	; (a210 <z_ready_thread+0x90>)
    a1b6:	481a      	ldr	r0, [pc, #104]	; (a220 <z_ready_thread+0xa0>)
    a1b8:	f001 ffd6 	bl	c168 <assert_print>
    a1bc:	218e      	movs	r1, #142	; 0x8e
    a1be:	4638      	mov	r0, r7
    a1c0:	f001 ffcb 	bl	c15a <assert_post_action>
    a1c4:	e7eb      	b.n	a19e <z_ready_thread+0x1e>
			ready_thread(thread);
    a1c6:	4628      	mov	r0, r5
    a1c8:	f7ff ff84 	bl	a0d4 <ready_thread>
    a1cc:	e00a      	b.n	a1e4 <z_ready_thread+0x64>
	__asm__ volatile(
    a1ce:	f386 8811 	msr	BASEPRI, r6
    a1d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a1d6:	2401      	movs	r4, #1
    a1d8:	b9cc      	cbnz	r4, a20e <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    a1da:	4628      	mov	r0, r5
    a1dc:	f002 fef9 	bl	cfd2 <thread_active_elsewhere>
    a1e0:	2800      	cmp	r0, #0
    a1e2:	d0f0      	beq.n	a1c6 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a1e4:	480a      	ldr	r0, [pc, #40]	; (a210 <z_ready_thread+0x90>)
    a1e6:	f7fe ff1b 	bl	9020 <z_spin_unlock_valid>
    a1ea:	2800      	cmp	r0, #0
    a1ec:	d1ef      	bne.n	a1ce <z_ready_thread+0x4e>
    a1ee:	4c09      	ldr	r4, [pc, #36]	; (a214 <z_ready_thread+0x94>)
    a1f0:	23b9      	movs	r3, #185	; 0xb9
    a1f2:	4622      	mov	r2, r4
    a1f4:	490b      	ldr	r1, [pc, #44]	; (a224 <z_ready_thread+0xa4>)
    a1f6:	4809      	ldr	r0, [pc, #36]	; (a21c <z_ready_thread+0x9c>)
    a1f8:	f001 ffb6 	bl	c168 <assert_print>
    a1fc:	4904      	ldr	r1, [pc, #16]	; (a210 <z_ready_thread+0x90>)
    a1fe:	480a      	ldr	r0, [pc, #40]	; (a228 <z_ready_thread+0xa8>)
    a200:	f001 ffb2 	bl	c168 <assert_print>
    a204:	21b9      	movs	r1, #185	; 0xb9
    a206:	4620      	mov	r0, r4
    a208:	f001 ffa7 	bl	c15a <assert_post_action>
    a20c:	e7df      	b.n	a1ce <z_ready_thread+0x4e>
}
    a20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a210:	20001264 	.word	0x20001264
    a214:	0000ddf4 	.word	0x0000ddf4
    a218:	0000de54 	.word	0x0000de54
    a21c:	0000d51c 	.word	0x0000d51c
    a220:	0000de6c 	.word	0x0000de6c
    a224:	0000de24 	.word	0x0000de24
    a228:	0000de3c 	.word	0x0000de3c

0000a22c <z_sched_start>:
{
    a22c:	b570      	push	{r4, r5, r6, lr}
    a22e:	4604      	mov	r4, r0
	__asm__ volatile(
    a230:	f04f 0320 	mov.w	r3, #32
    a234:	f3ef 8511 	mrs	r5, BASEPRI
    a238:	f383 8812 	msr	BASEPRI_MAX, r3
    a23c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a240:	481f      	ldr	r0, [pc, #124]	; (a2c0 <z_sched_start+0x94>)
    a242:	f7fe fedd 	bl	9000 <z_spin_lock_valid>
    a246:	b188      	cbz	r0, a26c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    a248:	481d      	ldr	r0, [pc, #116]	; (a2c0 <z_sched_start+0x94>)
    a24a:	f7fe fef9 	bl	9040 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a24e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    a250:	f013 0f04 	tst.w	r3, #4
    a254:	d01a      	beq.n	a28c <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a256:	f023 0304 	bic.w	r3, r3, #4
    a25a:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    a25c:	4620      	mov	r0, r4
    a25e:	f7ff ff39 	bl	a0d4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a262:	4629      	mov	r1, r5
    a264:	4816      	ldr	r0, [pc, #88]	; (a2c0 <z_sched_start+0x94>)
    a266:	f7ff fce7 	bl	9c38 <z_reschedule>
}
    a26a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a26c:	4e15      	ldr	r6, [pc, #84]	; (a2c4 <z_sched_start+0x98>)
    a26e:	238e      	movs	r3, #142	; 0x8e
    a270:	4632      	mov	r2, r6
    a272:	4915      	ldr	r1, [pc, #84]	; (a2c8 <z_sched_start+0x9c>)
    a274:	4815      	ldr	r0, [pc, #84]	; (a2cc <z_sched_start+0xa0>)
    a276:	f001 ff77 	bl	c168 <assert_print>
    a27a:	4911      	ldr	r1, [pc, #68]	; (a2c0 <z_sched_start+0x94>)
    a27c:	4814      	ldr	r0, [pc, #80]	; (a2d0 <z_sched_start+0xa4>)
    a27e:	f001 ff73 	bl	c168 <assert_print>
    a282:	218e      	movs	r1, #142	; 0x8e
    a284:	4630      	mov	r0, r6
    a286:	f001 ff68 	bl	c15a <assert_post_action>
    a28a:	e7dd      	b.n	a248 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a28c:	480c      	ldr	r0, [pc, #48]	; (a2c0 <z_sched_start+0x94>)
    a28e:	f7fe fec7 	bl	9020 <z_spin_unlock_valid>
    a292:	b120      	cbz	r0, a29e <z_sched_start+0x72>
	__asm__ volatile(
    a294:	f385 8811 	msr	BASEPRI, r5
    a298:	f3bf 8f6f 	isb	sy
		return;
    a29c:	e7e5      	b.n	a26a <z_sched_start+0x3e>
    a29e:	4c09      	ldr	r4, [pc, #36]	; (a2c4 <z_sched_start+0x98>)
    a2a0:	23b9      	movs	r3, #185	; 0xb9
    a2a2:	4622      	mov	r2, r4
    a2a4:	490b      	ldr	r1, [pc, #44]	; (a2d4 <z_sched_start+0xa8>)
    a2a6:	4809      	ldr	r0, [pc, #36]	; (a2cc <z_sched_start+0xa0>)
    a2a8:	f001 ff5e 	bl	c168 <assert_print>
    a2ac:	4904      	ldr	r1, [pc, #16]	; (a2c0 <z_sched_start+0x94>)
    a2ae:	480a      	ldr	r0, [pc, #40]	; (a2d8 <z_sched_start+0xac>)
    a2b0:	f001 ff5a 	bl	c168 <assert_print>
    a2b4:	21b9      	movs	r1, #185	; 0xb9
    a2b6:	4620      	mov	r0, r4
    a2b8:	f001 ff4f 	bl	c15a <assert_post_action>
    a2bc:	e7ea      	b.n	a294 <z_sched_start+0x68>
    a2be:	bf00      	nop
    a2c0:	20001264 	.word	0x20001264
    a2c4:	0000ddf4 	.word	0x0000ddf4
    a2c8:	0000de54 	.word	0x0000de54
    a2cc:	0000d51c 	.word	0x0000d51c
    a2d0:	0000de6c 	.word	0x0000de6c
    a2d4:	0000de24 	.word	0x0000de24
    a2d8:	0000de3c 	.word	0x0000de3c

0000a2dc <z_thread_timeout>:
{
    a2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2e0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    a2e2:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    a2e6:	2500      	movs	r5, #0
	__asm__ volatile(
    a2e8:	f04f 0320 	mov.w	r3, #32
    a2ec:	f3ef 8711 	mrs	r7, BASEPRI
    a2f0:	f383 8812 	msr	BASEPRI_MAX, r3
    a2f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2f8:	482b      	ldr	r0, [pc, #172]	; (a3a8 <z_thread_timeout+0xcc>)
    a2fa:	f7fe fe81 	bl	9000 <z_spin_lock_valid>
    a2fe:	b118      	cbz	r0, a308 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    a300:	4829      	ldr	r0, [pc, #164]	; (a3a8 <z_thread_timeout+0xcc>)
    a302:	f7fe fe9d 	bl	9040 <z_spin_lock_set_owner>
	return k;
    a306:	e026      	b.n	a356 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a308:	f8df 80a0 	ldr.w	r8, [pc, #160]	; a3ac <z_thread_timeout+0xd0>
    a30c:	238e      	movs	r3, #142	; 0x8e
    a30e:	4642      	mov	r2, r8
    a310:	4927      	ldr	r1, [pc, #156]	; (a3b0 <z_thread_timeout+0xd4>)
    a312:	4828      	ldr	r0, [pc, #160]	; (a3b4 <z_thread_timeout+0xd8>)
    a314:	f001 ff28 	bl	c168 <assert_print>
    a318:	4923      	ldr	r1, [pc, #140]	; (a3a8 <z_thread_timeout+0xcc>)
    a31a:	4827      	ldr	r0, [pc, #156]	; (a3b8 <z_thread_timeout+0xdc>)
    a31c:	f001 ff24 	bl	c168 <assert_print>
    a320:	218e      	movs	r1, #142	; 0x8e
    a322:	4640      	mov	r0, r8
    a324:	f001 ff19 	bl	c15a <assert_post_action>
    a328:	e7ea      	b.n	a300 <z_thread_timeout+0x24>
    a32a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    a32e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a332:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a336:	f023 0310 	bic.w	r3, r3, #16
    a33a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    a33e:	4630      	mov	r0, r6
    a340:	f7ff fec8 	bl	a0d4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a344:	4818      	ldr	r0, [pc, #96]	; (a3a8 <z_thread_timeout+0xcc>)
    a346:	f7fe fe6b 	bl	9020 <z_spin_unlock_valid>
    a34a:	b1d8      	cbz	r0, a384 <z_thread_timeout+0xa8>
	__asm__ volatile(
    a34c:	f387 8811 	msr	BASEPRI, r7
    a350:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a354:	2501      	movs	r5, #1
    a356:	bb2d      	cbnz	r5, a3a4 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    a358:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    a35c:	f013 0f28 	tst.w	r3, #40	; 0x28
    a360:	d1f0      	bne.n	a344 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    a362:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a366:	2b00      	cmp	r3, #0
    a368:	d0df      	beq.n	a32a <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a36a:	4630      	mov	r0, r6
    a36c:	f7ff fb56 	bl	9a1c <pended_on_thread>
    a370:	4631      	mov	r1, r6
    a372:	f7ff fd31 	bl	9dd8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a376:	7b73      	ldrb	r3, [r6, #13]
    a378:	f023 0302 	bic.w	r3, r3, #2
    a37c:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    a37e:	2300      	movs	r3, #0
    a380:	60b3      	str	r3, [r6, #8]
}
    a382:	e7d2      	b.n	a32a <z_thread_timeout+0x4e>
    a384:	4d09      	ldr	r5, [pc, #36]	; (a3ac <z_thread_timeout+0xd0>)
    a386:	23b9      	movs	r3, #185	; 0xb9
    a388:	462a      	mov	r2, r5
    a38a:	490c      	ldr	r1, [pc, #48]	; (a3bc <z_thread_timeout+0xe0>)
    a38c:	4809      	ldr	r0, [pc, #36]	; (a3b4 <z_thread_timeout+0xd8>)
    a38e:	f001 feeb 	bl	c168 <assert_print>
    a392:	4905      	ldr	r1, [pc, #20]	; (a3a8 <z_thread_timeout+0xcc>)
    a394:	480a      	ldr	r0, [pc, #40]	; (a3c0 <z_thread_timeout+0xe4>)
    a396:	f001 fee7 	bl	c168 <assert_print>
    a39a:	21b9      	movs	r1, #185	; 0xb9
    a39c:	4628      	mov	r0, r5
    a39e:	f001 fedc 	bl	c15a <assert_post_action>
    a3a2:	e7d3      	b.n	a34c <z_thread_timeout+0x70>
}
    a3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3a8:	20001264 	.word	0x20001264
    a3ac:	0000ddf4 	.word	0x0000ddf4
    a3b0:	0000de54 	.word	0x0000de54
    a3b4:	0000d51c 	.word	0x0000d51c
    a3b8:	0000de6c 	.word	0x0000de6c
    a3bc:	0000de24 	.word	0x0000de24
    a3c0:	0000de3c 	.word	0x0000de3c

0000a3c4 <unready_thread>:
{
    a3c4:	b510      	push	{r4, lr}
    a3c6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    a3c8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    a3ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	db08      	blt.n	a3e4 <unready_thread+0x20>
	update_cache(thread == _current);
    a3d2:	4b08      	ldr	r3, [pc, #32]	; (a3f4 <unready_thread+0x30>)
    a3d4:	6898      	ldr	r0, [r3, #8]
    a3d6:	42a0      	cmp	r0, r4
    a3d8:	bf14      	ite	ne
    a3da:	2000      	movne	r0, #0
    a3dc:	2001      	moveq	r0, #1
    a3de:	f7ff fd1f 	bl	9e20 <update_cache>
}
    a3e2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a3e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a3e8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a3ea:	4601      	mov	r1, r0
    a3ec:	4802      	ldr	r0, [pc, #8]	; (a3f8 <unready_thread+0x34>)
    a3ee:	f7ff fcf3 	bl	9dd8 <z_priq_dumb_remove>
}
    a3f2:	e7ee      	b.n	a3d2 <unready_thread+0xe>
    a3f4:	20001228 	.word	0x20001228
    a3f8:	20001248 	.word	0x20001248

0000a3fc <add_to_waitq_locked>:
{
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	4605      	mov	r5, r0
    a400:	460e      	mov	r6, r1
	unready_thread(thread);
    a402:	f7ff ffdf 	bl	a3c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a406:	7b6b      	ldrb	r3, [r5, #13]
    a408:	f043 0302 	orr.w	r3, r3, #2
    a40c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    a40e:	b1ce      	cbz	r6, a444 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    a410:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a412:	4b17      	ldr	r3, [pc, #92]	; (a470 <add_to_waitq_locked+0x74>)
    a414:	429d      	cmp	r5, r3
    a416:	d016      	beq.n	a446 <add_to_waitq_locked+0x4a>
	return list->head == list;
    a418:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a41a:	42a6      	cmp	r6, r4
    a41c:	d025      	beq.n	a46a <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a41e:	b164      	cbz	r4, a43a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a420:	4621      	mov	r1, r4
    a422:	4628      	mov	r0, r5
    a424:	f002 fdd7 	bl	cfd6 <z_sched_prio_cmp>
    a428:	2800      	cmp	r0, #0
    a42a:	dc18      	bgt.n	a45e <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a42c:	b12c      	cbz	r4, a43a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    a42e:	6873      	ldr	r3, [r6, #4]
    a430:	429c      	cmp	r4, r3
    a432:	d002      	beq.n	a43a <add_to_waitq_locked+0x3e>
    a434:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a436:	2c00      	cmp	r4, #0
    a438:	d1f1      	bne.n	a41e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    a43a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    a43c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    a43e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    a440:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a442:	6075      	str	r5, [r6, #4]
}
    a444:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a446:	4c0b      	ldr	r4, [pc, #44]	; (a474 <add_to_waitq_locked+0x78>)
    a448:	23ba      	movs	r3, #186	; 0xba
    a44a:	4622      	mov	r2, r4
    a44c:	490a      	ldr	r1, [pc, #40]	; (a478 <add_to_waitq_locked+0x7c>)
    a44e:	480b      	ldr	r0, [pc, #44]	; (a47c <add_to_waitq_locked+0x80>)
    a450:	f001 fe8a 	bl	c168 <assert_print>
    a454:	21ba      	movs	r1, #186	; 0xba
    a456:	4620      	mov	r0, r4
    a458:	f001 fe7f 	bl	c15a <assert_post_action>
    a45c:	e7dc      	b.n	a418 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    a45e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a460:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a462:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a464:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a466:	6065      	str	r5, [r4, #4]
}
    a468:	e7ec      	b.n	a444 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a46a:	2400      	movs	r4, #0
    a46c:	e7d7      	b.n	a41e <add_to_waitq_locked+0x22>
    a46e:	bf00      	nop
    a470:	20000540 	.word	0x20000540
    a474:	0000f6cc 	.word	0x0000f6cc
    a478:	0000f708 	.word	0x0000f708
    a47c:	0000d51c 	.word	0x0000d51c

0000a480 <pend>:
{
    a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a484:	4605      	mov	r5, r0
    a486:	460e      	mov	r6, r1
    a488:	4691      	mov	r9, r2
    a48a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    a48c:	2400      	movs	r4, #0
	__asm__ volatile(
    a48e:	f04f 0320 	mov.w	r3, #32
    a492:	f3ef 8711 	mrs	r7, BASEPRI
    a496:	f383 8812 	msr	BASEPRI_MAX, r3
    a49a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a49e:	481f      	ldr	r0, [pc, #124]	; (a51c <pend+0x9c>)
    a4a0:	f7fe fdae 	bl	9000 <z_spin_lock_valid>
    a4a4:	b118      	cbz	r0, a4ae <pend+0x2e>
	z_spin_lock_set_owner(l);
    a4a6:	481d      	ldr	r0, [pc, #116]	; (a51c <pend+0x9c>)
    a4a8:	f7fe fdca 	bl	9040 <z_spin_lock_set_owner>
	return k;
    a4ac:	e015      	b.n	a4da <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a4ae:	f8df a070 	ldr.w	sl, [pc, #112]	; a520 <pend+0xa0>
    a4b2:	238e      	movs	r3, #142	; 0x8e
    a4b4:	4652      	mov	r2, sl
    a4b6:	491b      	ldr	r1, [pc, #108]	; (a524 <pend+0xa4>)
    a4b8:	481b      	ldr	r0, [pc, #108]	; (a528 <pend+0xa8>)
    a4ba:	f001 fe55 	bl	c168 <assert_print>
    a4be:	4917      	ldr	r1, [pc, #92]	; (a51c <pend+0x9c>)
    a4c0:	481a      	ldr	r0, [pc, #104]	; (a52c <pend+0xac>)
    a4c2:	f001 fe51 	bl	c168 <assert_print>
    a4c6:	218e      	movs	r1, #142	; 0x8e
    a4c8:	4650      	mov	r0, sl
    a4ca:	f001 fe46 	bl	c15a <assert_post_action>
    a4ce:	e7ea      	b.n	a4a6 <pend+0x26>
	__asm__ volatile(
    a4d0:	f387 8811 	msr	BASEPRI, r7
    a4d4:	f3bf 8f6f 	isb	sy
    a4d8:	2401      	movs	r4, #1
    a4da:	b9c4      	cbnz	r4, a50e <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    a4dc:	4631      	mov	r1, r6
    a4de:	4628      	mov	r0, r5
    a4e0:	f7ff ff8c 	bl	a3fc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a4e4:	480d      	ldr	r0, [pc, #52]	; (a51c <pend+0x9c>)
    a4e6:	f7fe fd9b 	bl	9020 <z_spin_unlock_valid>
    a4ea:	2800      	cmp	r0, #0
    a4ec:	d1f0      	bne.n	a4d0 <pend+0x50>
    a4ee:	4c0c      	ldr	r4, [pc, #48]	; (a520 <pend+0xa0>)
    a4f0:	23b9      	movs	r3, #185	; 0xb9
    a4f2:	4622      	mov	r2, r4
    a4f4:	490e      	ldr	r1, [pc, #56]	; (a530 <pend+0xb0>)
    a4f6:	480c      	ldr	r0, [pc, #48]	; (a528 <pend+0xa8>)
    a4f8:	f001 fe36 	bl	c168 <assert_print>
    a4fc:	4907      	ldr	r1, [pc, #28]	; (a51c <pend+0x9c>)
    a4fe:	480d      	ldr	r0, [pc, #52]	; (a534 <pend+0xb4>)
    a500:	f001 fe32 	bl	c168 <assert_print>
    a504:	21b9      	movs	r1, #185	; 0xb9
    a506:	4620      	mov	r0, r4
    a508:	f001 fe27 	bl	c15a <assert_post_action>
    a50c:	e7e0      	b.n	a4d0 <pend+0x50>
	add_thread_timeout(thread, timeout);
    a50e:	464a      	mov	r2, r9
    a510:	4643      	mov	r3, r8
    a512:	4628      	mov	r0, r5
    a514:	f7ff fa9c 	bl	9a50 <add_thread_timeout>
}
    a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a51c:	20001264 	.word	0x20001264
    a520:	0000ddf4 	.word	0x0000ddf4
    a524:	0000de54 	.word	0x0000de54
    a528:	0000d51c 	.word	0x0000d51c
    a52c:	0000de6c 	.word	0x0000de6c
    a530:	0000de24 	.word	0x0000de24
    a534:	0000de3c 	.word	0x0000de3c

0000a538 <z_pend_curr>:
{
    a538:	b570      	push	{r4, r5, r6, lr}
    a53a:	4604      	mov	r4, r0
    a53c:	460d      	mov	r5, r1
    a53e:	4611      	mov	r1, r2
	pending_current = _current;
    a540:	4b0f      	ldr	r3, [pc, #60]	; (a580 <z_pend_curr+0x48>)
    a542:	6898      	ldr	r0, [r3, #8]
    a544:	4b0f      	ldr	r3, [pc, #60]	; (a584 <z_pend_curr+0x4c>)
    a546:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a54c:	f7ff ff98 	bl	a480 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a550:	4620      	mov	r0, r4
    a552:	f7fe fd65 	bl	9020 <z_spin_unlock_valid>
    a556:	b118      	cbz	r0, a560 <z_pend_curr+0x28>
    a558:	4628      	mov	r0, r5
    a55a:	f7fa f81f 	bl	459c <arch_swap>
}
    a55e:	bd70      	pop	{r4, r5, r6, pc}
    a560:	4e09      	ldr	r6, [pc, #36]	; (a588 <z_pend_curr+0x50>)
    a562:	23d0      	movs	r3, #208	; 0xd0
    a564:	4632      	mov	r2, r6
    a566:	4909      	ldr	r1, [pc, #36]	; (a58c <z_pend_curr+0x54>)
    a568:	4809      	ldr	r0, [pc, #36]	; (a590 <z_pend_curr+0x58>)
    a56a:	f001 fdfd 	bl	c168 <assert_print>
    a56e:	4621      	mov	r1, r4
    a570:	4808      	ldr	r0, [pc, #32]	; (a594 <z_pend_curr+0x5c>)
    a572:	f001 fdf9 	bl	c168 <assert_print>
    a576:	21d0      	movs	r1, #208	; 0xd0
    a578:	4630      	mov	r0, r6
    a57a:	f001 fdee 	bl	c15a <assert_post_action>
    a57e:	e7eb      	b.n	a558 <z_pend_curr+0x20>
    a580:	20001228 	.word	0x20001228
    a584:	20001260 	.word	0x20001260
    a588:	0000ddf4 	.word	0x0000ddf4
    a58c:	0000de24 	.word	0x0000de24
    a590:	0000d51c 	.word	0x0000d51c
    a594:	0000de3c 	.word	0x0000de3c

0000a598 <z_set_prio>:
{
    a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a59c:	4604      	mov	r4, r0
    a59e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    a5a0:	2500      	movs	r5, #0
	__asm__ volatile(
    a5a2:	f04f 0320 	mov.w	r3, #32
    a5a6:	f3ef 8811 	mrs	r8, BASEPRI
    a5aa:	f383 8812 	msr	BASEPRI_MAX, r3
    a5ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5b2:	4844      	ldr	r0, [pc, #272]	; (a6c4 <z_set_prio+0x12c>)
    a5b4:	f7fe fd24 	bl	9000 <z_spin_lock_valid>
    a5b8:	b120      	cbz	r0, a5c4 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    a5ba:	4842      	ldr	r0, [pc, #264]	; (a6c4 <z_set_prio+0x12c>)
    a5bc:	f7fe fd40 	bl	9040 <z_spin_lock_set_owner>
	bool need_sched = 0;
    a5c0:	2700      	movs	r7, #0
	return k;
    a5c2:	e01d      	b.n	a600 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5c4:	4f40      	ldr	r7, [pc, #256]	; (a6c8 <z_set_prio+0x130>)
    a5c6:	238e      	movs	r3, #142	; 0x8e
    a5c8:	463a      	mov	r2, r7
    a5ca:	4940      	ldr	r1, [pc, #256]	; (a6cc <z_set_prio+0x134>)
    a5cc:	4840      	ldr	r0, [pc, #256]	; (a6d0 <z_set_prio+0x138>)
    a5ce:	f001 fdcb 	bl	c168 <assert_print>
    a5d2:	493c      	ldr	r1, [pc, #240]	; (a6c4 <z_set_prio+0x12c>)
    a5d4:	483f      	ldr	r0, [pc, #252]	; (a6d4 <z_set_prio+0x13c>)
    a5d6:	f001 fdc7 	bl	c168 <assert_print>
    a5da:	218e      	movs	r1, #142	; 0x8e
    a5dc:	4638      	mov	r0, r7
    a5de:	f001 fdbc 	bl	c15a <assert_post_action>
    a5e2:	e7ea      	b.n	a5ba <z_set_prio+0x22>
		if (need_sched) {
    a5e4:	f013 0701 	ands.w	r7, r3, #1
    a5e8:	d116      	bne.n	a618 <z_set_prio+0x80>
			thread->base.prio = prio;
    a5ea:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5ec:	4835      	ldr	r0, [pc, #212]	; (a6c4 <z_set_prio+0x12c>)
    a5ee:	f7fe fd17 	bl	9020 <z_spin_unlock_valid>
    a5f2:	2800      	cmp	r0, #0
    a5f4:	d053      	beq.n	a69e <z_set_prio+0x106>
	__asm__ volatile(
    a5f6:	f388 8811 	msr	BASEPRI, r8
    a5fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a5fe:	2501      	movs	r5, #1
    a600:	462b      	mov	r3, r5
    a602:	2d00      	cmp	r5, #0
    a604:	d15b      	bne.n	a6be <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    a606:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a608:	f012 0f1f 	tst.w	r2, #31
    a60c:	d1ea      	bne.n	a5e4 <z_set_prio+0x4c>
	return node->next != NULL;
    a60e:	69a1      	ldr	r1, [r4, #24]
    a610:	2900      	cmp	r1, #0
    a612:	d1e7      	bne.n	a5e4 <z_set_prio+0x4c>
    a614:	2301      	movs	r3, #1
    a616:	e7e5      	b.n	a5e4 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a61c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a61e:	4621      	mov	r1, r4
    a620:	482d      	ldr	r0, [pc, #180]	; (a6d8 <z_set_prio+0x140>)
    a622:	f7ff fbd9 	bl	9dd8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    a626:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a628:	7b63      	ldrb	r3, [r4, #13]
    a62a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a62e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a630:	4b2a      	ldr	r3, [pc, #168]	; (a6dc <z_set_prio+0x144>)
    a632:	429c      	cmp	r4, r3
    a634:	d01f      	beq.n	a676 <z_set_prio+0xde>
	return list->head == list;
    a636:	4b2a      	ldr	r3, [pc, #168]	; (a6e0 <z_set_prio+0x148>)
    a638:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a63c:	429d      	cmp	r5, r3
    a63e:	d02c      	beq.n	a69a <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a640:	b16d      	cbz	r5, a65e <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a642:	4629      	mov	r1, r5
    a644:	4620      	mov	r0, r4
    a646:	f002 fcc6 	bl	cfd6 <z_sched_prio_cmp>
    a64a:	2800      	cmp	r0, #0
    a64c:	dc1f      	bgt.n	a68e <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a64e:	b135      	cbz	r5, a65e <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    a650:	4b23      	ldr	r3, [pc, #140]	; (a6e0 <z_set_prio+0x148>)
    a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a654:	429d      	cmp	r5, r3
    a656:	d002      	beq.n	a65e <z_set_prio+0xc6>
    a658:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a65a:	2d00      	cmp	r5, #0
    a65c:	d1f0      	bne.n	a640 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    a65e:	4b20      	ldr	r3, [pc, #128]	; (a6e0 <z_set_prio+0x148>)
    a660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a662:	f103 0120 	add.w	r1, r3, #32
    a666:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a668:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a66a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a66c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    a66e:	2001      	movs	r0, #1
    a670:	f7ff fbd6 	bl	9e20 <update_cache>
    a674:	e7ba      	b.n	a5ec <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    a676:	4d1b      	ldr	r5, [pc, #108]	; (a6e4 <z_set_prio+0x14c>)
    a678:	23ba      	movs	r3, #186	; 0xba
    a67a:	462a      	mov	r2, r5
    a67c:	491a      	ldr	r1, [pc, #104]	; (a6e8 <z_set_prio+0x150>)
    a67e:	4814      	ldr	r0, [pc, #80]	; (a6d0 <z_set_prio+0x138>)
    a680:	f001 fd72 	bl	c168 <assert_print>
    a684:	21ba      	movs	r1, #186	; 0xba
    a686:	4628      	mov	r0, r5
    a688:	f001 fd67 	bl	c15a <assert_post_action>
    a68c:	e7d3      	b.n	a636 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    a68e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a690:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a692:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a694:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a696:	606c      	str	r4, [r5, #4]
}
    a698:	e7e9      	b.n	a66e <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a69a:	2500      	movs	r5, #0
    a69c:	e7d0      	b.n	a640 <z_set_prio+0xa8>
    a69e:	4d0a      	ldr	r5, [pc, #40]	; (a6c8 <z_set_prio+0x130>)
    a6a0:	23b9      	movs	r3, #185	; 0xb9
    a6a2:	462a      	mov	r2, r5
    a6a4:	4911      	ldr	r1, [pc, #68]	; (a6ec <z_set_prio+0x154>)
    a6a6:	480a      	ldr	r0, [pc, #40]	; (a6d0 <z_set_prio+0x138>)
    a6a8:	f001 fd5e 	bl	c168 <assert_print>
    a6ac:	4905      	ldr	r1, [pc, #20]	; (a6c4 <z_set_prio+0x12c>)
    a6ae:	4810      	ldr	r0, [pc, #64]	; (a6f0 <z_set_prio+0x158>)
    a6b0:	f001 fd5a 	bl	c168 <assert_print>
    a6b4:	21b9      	movs	r1, #185	; 0xb9
    a6b6:	4628      	mov	r0, r5
    a6b8:	f001 fd4f 	bl	c15a <assert_post_action>
    a6bc:	e79b      	b.n	a5f6 <z_set_prio+0x5e>
}
    a6be:	4638      	mov	r0, r7
    a6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6c4:	20001264 	.word	0x20001264
    a6c8:	0000ddf4 	.word	0x0000ddf4
    a6cc:	0000de54 	.word	0x0000de54
    a6d0:	0000d51c 	.word	0x0000d51c
    a6d4:	0000de6c 	.word	0x0000de6c
    a6d8:	20001248 	.word	0x20001248
    a6dc:	20000540 	.word	0x20000540
    a6e0:	20001228 	.word	0x20001228
    a6e4:	0000f6cc 	.word	0x0000f6cc
    a6e8:	0000f708 	.word	0x0000f708
    a6ec:	0000de24 	.word	0x0000de24
    a6f0:	0000de3c 	.word	0x0000de3c

0000a6f4 <z_impl_k_thread_suspend>:
{
    a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6f6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a6f8:	3018      	adds	r0, #24
    a6fa:	f000 fdcf 	bl	b29c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a6fe:	2500      	movs	r5, #0
	__asm__ volatile(
    a700:	f04f 0320 	mov.w	r3, #32
    a704:	f3ef 8611 	mrs	r6, BASEPRI
    a708:	f383 8812 	msr	BASEPRI_MAX, r3
    a70c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a710:	482d      	ldr	r0, [pc, #180]	; (a7c8 <z_impl_k_thread_suspend+0xd4>)
    a712:	f7fe fc75 	bl	9000 <z_spin_lock_valid>
    a716:	b118      	cbz	r0, a720 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    a718:	482b      	ldr	r0, [pc, #172]	; (a7c8 <z_impl_k_thread_suspend+0xd4>)
    a71a:	f7fe fc91 	bl	9040 <z_spin_lock_set_owner>
	return k;
    a71e:	e01c      	b.n	a75a <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a720:	4f2a      	ldr	r7, [pc, #168]	; (a7cc <z_impl_k_thread_suspend+0xd8>)
    a722:	238e      	movs	r3, #142	; 0x8e
    a724:	463a      	mov	r2, r7
    a726:	492a      	ldr	r1, [pc, #168]	; (a7d0 <z_impl_k_thread_suspend+0xdc>)
    a728:	482a      	ldr	r0, [pc, #168]	; (a7d4 <z_impl_k_thread_suspend+0xe0>)
    a72a:	f001 fd1d 	bl	c168 <assert_print>
    a72e:	4926      	ldr	r1, [pc, #152]	; (a7c8 <z_impl_k_thread_suspend+0xd4>)
    a730:	4829      	ldr	r0, [pc, #164]	; (a7d8 <z_impl_k_thread_suspend+0xe4>)
    a732:	f001 fd19 	bl	c168 <assert_print>
    a736:	218e      	movs	r1, #142	; 0x8e
    a738:	4638      	mov	r0, r7
    a73a:	f001 fd0e 	bl	c15a <assert_post_action>
    a73e:	e7eb      	b.n	a718 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a744:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a746:	4621      	mov	r1, r4
    a748:	4824      	ldr	r0, [pc, #144]	; (a7dc <z_impl_k_thread_suspend+0xe8>)
    a74a:	f7ff fb45 	bl	9dd8 <z_priq_dumb_remove>
}
    a74e:	e00a      	b.n	a766 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    a750:	f386 8811 	msr	BASEPRI, r6
    a754:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a758:	2501      	movs	r5, #1
    a75a:	bb2d      	cbnz	r5, a7a8 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    a75c:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a75e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a762:	2b00      	cmp	r3, #0
    a764:	dbec      	blt.n	a740 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a766:	7b63      	ldrb	r3, [r4, #13]
    a768:	f043 0310 	orr.w	r3, r3, #16
    a76c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a76e:	4b1c      	ldr	r3, [pc, #112]	; (a7e0 <z_impl_k_thread_suspend+0xec>)
    a770:	6898      	ldr	r0, [r3, #8]
    a772:	42a0      	cmp	r0, r4
    a774:	bf14      	ite	ne
    a776:	2000      	movne	r0, #0
    a778:	2001      	moveq	r0, #1
    a77a:	f7ff fb51 	bl	9e20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a77e:	4812      	ldr	r0, [pc, #72]	; (a7c8 <z_impl_k_thread_suspend+0xd4>)
    a780:	f7fe fc4e 	bl	9020 <z_spin_unlock_valid>
    a784:	2800      	cmp	r0, #0
    a786:	d1e3      	bne.n	a750 <z_impl_k_thread_suspend+0x5c>
    a788:	4d10      	ldr	r5, [pc, #64]	; (a7cc <z_impl_k_thread_suspend+0xd8>)
    a78a:	23b9      	movs	r3, #185	; 0xb9
    a78c:	462a      	mov	r2, r5
    a78e:	4915      	ldr	r1, [pc, #84]	; (a7e4 <z_impl_k_thread_suspend+0xf0>)
    a790:	4810      	ldr	r0, [pc, #64]	; (a7d4 <z_impl_k_thread_suspend+0xe0>)
    a792:	f001 fce9 	bl	c168 <assert_print>
    a796:	490c      	ldr	r1, [pc, #48]	; (a7c8 <z_impl_k_thread_suspend+0xd4>)
    a798:	4813      	ldr	r0, [pc, #76]	; (a7e8 <z_impl_k_thread_suspend+0xf4>)
    a79a:	f001 fce5 	bl	c168 <assert_print>
    a79e:	21b9      	movs	r1, #185	; 0xb9
    a7a0:	4628      	mov	r0, r5
    a7a2:	f001 fcda 	bl	c15a <assert_post_action>
    a7a6:	e7d3      	b.n	a750 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    a7a8:	4b0d      	ldr	r3, [pc, #52]	; (a7e0 <z_impl_k_thread_suspend+0xec>)
    a7aa:	689b      	ldr	r3, [r3, #8]
    a7ac:	42a3      	cmp	r3, r4
    a7ae:	d000      	beq.n	a7b2 <z_impl_k_thread_suspend+0xbe>
}
    a7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    a7b2:	f04f 0320 	mov.w	r3, #32
    a7b6:	f3ef 8011 	mrs	r0, BASEPRI
    a7ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a7be:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a7c2:	f002 fc12 	bl	cfea <z_reschedule_irqlock>
    a7c6:	e7f3      	b.n	a7b0 <z_impl_k_thread_suspend+0xbc>
    a7c8:	20001264 	.word	0x20001264
    a7cc:	0000ddf4 	.word	0x0000ddf4
    a7d0:	0000de54 	.word	0x0000de54
    a7d4:	0000d51c 	.word	0x0000d51c
    a7d8:	0000de6c 	.word	0x0000de6c
    a7dc:	20001248 	.word	0x20001248
    a7e0:	20001228 	.word	0x20001228
    a7e4:	0000de24 	.word	0x0000de24
    a7e8:	0000de3c 	.word	0x0000de3c

0000a7ec <k_sched_unlock>:
{
    a7ec:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    a7ee:	2400      	movs	r4, #0
    a7f0:	f04f 0320 	mov.w	r3, #32
    a7f4:	f3ef 8511 	mrs	r5, BASEPRI
    a7f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a7fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a800:	4838      	ldr	r0, [pc, #224]	; (a8e4 <k_sched_unlock+0xf8>)
    a802:	f7fe fbfd 	bl	9000 <z_spin_lock_valid>
    a806:	b118      	cbz	r0, a810 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    a808:	4836      	ldr	r0, [pc, #216]	; (a8e4 <k_sched_unlock+0xf8>)
    a80a:	f7fe fc19 	bl	9040 <z_spin_lock_set_owner>
	return k;
    a80e:	e036      	b.n	a87e <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a810:	4e35      	ldr	r6, [pc, #212]	; (a8e8 <k_sched_unlock+0xfc>)
    a812:	238e      	movs	r3, #142	; 0x8e
    a814:	4632      	mov	r2, r6
    a816:	4935      	ldr	r1, [pc, #212]	; (a8ec <k_sched_unlock+0x100>)
    a818:	4835      	ldr	r0, [pc, #212]	; (a8f0 <k_sched_unlock+0x104>)
    a81a:	f001 fca5 	bl	c168 <assert_print>
    a81e:	4931      	ldr	r1, [pc, #196]	; (a8e4 <k_sched_unlock+0xf8>)
    a820:	4834      	ldr	r0, [pc, #208]	; (a8f4 <k_sched_unlock+0x108>)
    a822:	f001 fca1 	bl	c168 <assert_print>
    a826:	218e      	movs	r1, #142	; 0x8e
    a828:	4630      	mov	r0, r6
    a82a:	f001 fc96 	bl	c15a <assert_post_action>
    a82e:	e7eb      	b.n	a808 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a830:	4c31      	ldr	r4, [pc, #196]	; (a8f8 <k_sched_unlock+0x10c>)
    a832:	f240 33bb 	movw	r3, #955	; 0x3bb
    a836:	4622      	mov	r2, r4
    a838:	4930      	ldr	r1, [pc, #192]	; (a8fc <k_sched_unlock+0x110>)
    a83a:	482d      	ldr	r0, [pc, #180]	; (a8f0 <k_sched_unlock+0x104>)
    a83c:	f001 fc94 	bl	c168 <assert_print>
    a840:	482f      	ldr	r0, [pc, #188]	; (a900 <k_sched_unlock+0x114>)
    a842:	f001 fc91 	bl	c168 <assert_print>
    a846:	f240 31bb 	movw	r1, #955	; 0x3bb
    a84a:	4620      	mov	r0, r4
    a84c:	f001 fc85 	bl	c15a <assert_post_action>
    a850:	e01b      	b.n	a88a <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    a852:	4c29      	ldr	r4, [pc, #164]	; (a8f8 <k_sched_unlock+0x10c>)
    a854:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    a858:	4622      	mov	r2, r4
    a85a:	492a      	ldr	r1, [pc, #168]	; (a904 <k_sched_unlock+0x118>)
    a85c:	4824      	ldr	r0, [pc, #144]	; (a8f0 <k_sched_unlock+0x104>)
    a85e:	f001 fc83 	bl	c168 <assert_print>
    a862:	4827      	ldr	r0, [pc, #156]	; (a900 <k_sched_unlock+0x114>)
    a864:	f001 fc80 	bl	c168 <assert_print>
    a868:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    a86c:	4620      	mov	r0, r4
    a86e:	f001 fc74 	bl	c15a <assert_post_action>
    a872:	e00e      	b.n	a892 <k_sched_unlock+0xa6>
	__asm__ volatile(
    a874:	f385 8811 	msr	BASEPRI, r5
    a878:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a87c:	2401      	movs	r4, #1
    a87e:	bb2c      	cbnz	r4, a8cc <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    a880:	4b21      	ldr	r3, [pc, #132]	; (a908 <k_sched_unlock+0x11c>)
    a882:	689b      	ldr	r3, [r3, #8]
    a884:	7bdb      	ldrb	r3, [r3, #15]
    a886:	2b00      	cmp	r3, #0
    a888:	d0d2      	beq.n	a830 <k_sched_unlock+0x44>
    a88a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    a88e:	2b00      	cmp	r3, #0
    a890:	d1df      	bne.n	a852 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    a892:	4b1d      	ldr	r3, [pc, #116]	; (a908 <k_sched_unlock+0x11c>)
    a894:	689a      	ldr	r2, [r3, #8]
    a896:	7bd3      	ldrb	r3, [r2, #15]
    a898:	3301      	adds	r3, #1
    a89a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a89c:	2000      	movs	r0, #0
    a89e:	f7ff fabf 	bl	9e20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8a2:	4810      	ldr	r0, [pc, #64]	; (a8e4 <k_sched_unlock+0xf8>)
    a8a4:	f7fe fbbc 	bl	9020 <z_spin_unlock_valid>
    a8a8:	2800      	cmp	r0, #0
    a8aa:	d1e3      	bne.n	a874 <k_sched_unlock+0x88>
    a8ac:	4c0e      	ldr	r4, [pc, #56]	; (a8e8 <k_sched_unlock+0xfc>)
    a8ae:	23b9      	movs	r3, #185	; 0xb9
    a8b0:	4622      	mov	r2, r4
    a8b2:	4916      	ldr	r1, [pc, #88]	; (a90c <k_sched_unlock+0x120>)
    a8b4:	480e      	ldr	r0, [pc, #56]	; (a8f0 <k_sched_unlock+0x104>)
    a8b6:	f001 fc57 	bl	c168 <assert_print>
    a8ba:	490a      	ldr	r1, [pc, #40]	; (a8e4 <k_sched_unlock+0xf8>)
    a8bc:	4814      	ldr	r0, [pc, #80]	; (a910 <k_sched_unlock+0x124>)
    a8be:	f001 fc53 	bl	c168 <assert_print>
    a8c2:	21b9      	movs	r1, #185	; 0xb9
    a8c4:	4620      	mov	r0, r4
    a8c6:	f001 fc48 	bl	c15a <assert_post_action>
    a8ca:	e7d3      	b.n	a874 <k_sched_unlock+0x88>
	__asm__ volatile(
    a8cc:	f04f 0320 	mov.w	r3, #32
    a8d0:	f3ef 8011 	mrs	r0, BASEPRI
    a8d4:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d8:	f3bf 8f6f 	isb	sy
    a8dc:	f002 fb85 	bl	cfea <z_reschedule_irqlock>
}
    a8e0:	bd70      	pop	{r4, r5, r6, pc}
    a8e2:	bf00      	nop
    a8e4:	20001264 	.word	0x20001264
    a8e8:	0000ddf4 	.word	0x0000ddf4
    a8ec:	0000de54 	.word	0x0000de54
    a8f0:	0000d51c 	.word	0x0000d51c
    a8f4:	0000de6c 	.word	0x0000de6c
    a8f8:	0000f6cc 	.word	0x0000f6cc
    a8fc:	0000f754 	.word	0x0000f754
    a900:	0000f624 	.word	0x0000f624
    a904:	0000f4dc 	.word	0x0000f4dc
    a908:	20001228 	.word	0x20001228
    a90c:	0000de24 	.word	0x0000de24
    a910:	0000de3c 	.word	0x0000de3c

0000a914 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    a916:	7b43      	ldrb	r3, [r0, #13]
    a918:	f013 0f08 	tst.w	r3, #8
    a91c:	d145      	bne.n	a9aa <end_thread+0x96>
    a91e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    a920:	f043 0308 	orr.w	r3, r3, #8
    a924:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a92a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    a92c:	f013 0f80 	tst.w	r3, #128	; 0x80
    a930:	d12d      	bne.n	a98e <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    a932:	68ab      	ldr	r3, [r5, #8]
    a934:	b15b      	cbz	r3, a94e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a936:	4628      	mov	r0, r5
    a938:	f7ff f870 	bl	9a1c <pended_on_thread>
    a93c:	4629      	mov	r1, r5
    a93e:	f7ff fa4b 	bl	9dd8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a942:	7b6b      	ldrb	r3, [r5, #13]
    a944:	f023 0302 	bic.w	r3, r3, #2
    a948:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    a94a:	2300      	movs	r3, #0
    a94c:	60ab      	str	r3, [r5, #8]
    a94e:	f105 0018 	add.w	r0, r5, #24
    a952:	f000 fca3 	bl	b29c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    a956:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    a95a:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a95c:	42bc      	cmp	r4, r7
    a95e:	d01e      	beq.n	a99e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a960:	b1ec      	cbz	r4, a99e <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a962:	4620      	mov	r0, r4
    a964:	f7ff f85a 	bl	9a1c <pended_on_thread>
    a968:	4621      	mov	r1, r4
    a96a:	f7ff fa35 	bl	9dd8 <z_priq_dumb_remove>
    a96e:	7b63      	ldrb	r3, [r4, #13]
    a970:	f023 0302 	bic.w	r3, r3, #2
    a974:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    a976:	2600      	movs	r6, #0
    a978:	60a6      	str	r6, [r4, #8]
    a97a:	f104 0018 	add.w	r0, r4, #24
    a97e:	f000 fc8d 	bl	b29c <z_abort_timeout>
    a982:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    a986:	4620      	mov	r0, r4
    a988:	f7ff fba4 	bl	a0d4 <ready_thread>
    a98c:	e7e5      	b.n	a95a <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a992:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    a994:	4601      	mov	r1, r0
    a996:	4805      	ldr	r0, [pc, #20]	; (a9ac <end_thread+0x98>)
    a998:	f7ff fa1e 	bl	9dd8 <z_priq_dumb_remove>
}
    a99c:	e7c9      	b.n	a932 <end_thread+0x1e>
		update_cache(1);
    a99e:	2001      	movs	r0, #1
    a9a0:	f7ff fa3e 	bl	9e20 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    a9a4:	4628      	mov	r0, r5
    a9a6:	f7fe fb53 	bl	9050 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9ac:	20001248 	.word	0x20001248

0000a9b0 <z_unpend1_no_timeout>:
{
    a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9b2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a9b4:	2500      	movs	r5, #0
    a9b6:	f04f 0320 	mov.w	r3, #32
    a9ba:	f3ef 8711 	mrs	r7, BASEPRI
    a9be:	f383 8812 	msr	BASEPRI_MAX, r3
    a9c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9c6:	4823      	ldr	r0, [pc, #140]	; (aa54 <z_unpend1_no_timeout+0xa4>)
    a9c8:	f7fe fb1a 	bl	9000 <z_spin_lock_valid>
    a9cc:	b120      	cbz	r0, a9d8 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    a9ce:	4821      	ldr	r0, [pc, #132]	; (aa54 <z_unpend1_no_timeout+0xa4>)
    a9d0:	f7fe fb36 	bl	9040 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    a9d4:	2400      	movs	r4, #0
	return k;
    a9d6:	e018      	b.n	aa0a <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9d8:	4c1f      	ldr	r4, [pc, #124]	; (aa58 <z_unpend1_no_timeout+0xa8>)
    a9da:	238e      	movs	r3, #142	; 0x8e
    a9dc:	4622      	mov	r2, r4
    a9de:	491f      	ldr	r1, [pc, #124]	; (aa5c <z_unpend1_no_timeout+0xac>)
    a9e0:	481f      	ldr	r0, [pc, #124]	; (aa60 <z_unpend1_no_timeout+0xb0>)
    a9e2:	f001 fbc1 	bl	c168 <assert_print>
    a9e6:	491b      	ldr	r1, [pc, #108]	; (aa54 <z_unpend1_no_timeout+0xa4>)
    a9e8:	481e      	ldr	r0, [pc, #120]	; (aa64 <z_unpend1_no_timeout+0xb4>)
    a9ea:	f001 fbbd 	bl	c168 <assert_print>
    a9ee:	218e      	movs	r1, #142	; 0x8e
    a9f0:	4620      	mov	r0, r4
    a9f2:	f001 fbb2 	bl	c15a <assert_post_action>
    a9f6:	e7ea      	b.n	a9ce <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9f8:	4816      	ldr	r0, [pc, #88]	; (aa54 <z_unpend1_no_timeout+0xa4>)
    a9fa:	f7fe fb11 	bl	9020 <z_spin_unlock_valid>
    a9fe:	b1b8      	cbz	r0, aa30 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    aa00:	f387 8811 	msr	BASEPRI, r7
    aa04:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aa08:	2501      	movs	r5, #1
    aa0a:	bb0d      	cbnz	r5, aa50 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    aa0c:	4630      	mov	r0, r6
    aa0e:	f002 fb01 	bl	d014 <z_priq_dumb_best>
		if (thread != NULL) {
    aa12:	4604      	mov	r4, r0
    aa14:	2800      	cmp	r0, #0
    aa16:	d0ef      	beq.n	a9f8 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa18:	f7ff f800 	bl	9a1c <pended_on_thread>
    aa1c:	4621      	mov	r1, r4
    aa1e:	f7ff f9db 	bl	9dd8 <z_priq_dumb_remove>
    aa22:	7b63      	ldrb	r3, [r4, #13]
    aa24:	f023 0302 	bic.w	r3, r3, #2
    aa28:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aa2a:	2300      	movs	r3, #0
    aa2c:	60a3      	str	r3, [r4, #8]
}
    aa2e:	e7e3      	b.n	a9f8 <z_unpend1_no_timeout+0x48>
    aa30:	4d09      	ldr	r5, [pc, #36]	; (aa58 <z_unpend1_no_timeout+0xa8>)
    aa32:	23b9      	movs	r3, #185	; 0xb9
    aa34:	462a      	mov	r2, r5
    aa36:	490c      	ldr	r1, [pc, #48]	; (aa68 <z_unpend1_no_timeout+0xb8>)
    aa38:	4809      	ldr	r0, [pc, #36]	; (aa60 <z_unpend1_no_timeout+0xb0>)
    aa3a:	f001 fb95 	bl	c168 <assert_print>
    aa3e:	4905      	ldr	r1, [pc, #20]	; (aa54 <z_unpend1_no_timeout+0xa4>)
    aa40:	480a      	ldr	r0, [pc, #40]	; (aa6c <z_unpend1_no_timeout+0xbc>)
    aa42:	f001 fb91 	bl	c168 <assert_print>
    aa46:	21b9      	movs	r1, #185	; 0xb9
    aa48:	4628      	mov	r0, r5
    aa4a:	f001 fb86 	bl	c15a <assert_post_action>
    aa4e:	e7d7      	b.n	aa00 <z_unpend1_no_timeout+0x50>
}
    aa50:	4620      	mov	r0, r4
    aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa54:	20001264 	.word	0x20001264
    aa58:	0000ddf4 	.word	0x0000ddf4
    aa5c:	0000de54 	.word	0x0000de54
    aa60:	0000d51c 	.word	0x0000d51c
    aa64:	0000de6c 	.word	0x0000de6c
    aa68:	0000de24 	.word	0x0000de24
    aa6c:	0000de3c 	.word	0x0000de3c

0000aa70 <z_unpend_first_thread>:
{
    aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa72:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    aa74:	2500      	movs	r5, #0
	__asm__ volatile(
    aa76:	f04f 0320 	mov.w	r3, #32
    aa7a:	f3ef 8711 	mrs	r7, BASEPRI
    aa7e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa86:	4825      	ldr	r0, [pc, #148]	; (ab1c <z_unpend_first_thread+0xac>)
    aa88:	f7fe faba 	bl	9000 <z_spin_lock_valid>
    aa8c:	b120      	cbz	r0, aa98 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    aa8e:	4823      	ldr	r0, [pc, #140]	; (ab1c <z_unpend_first_thread+0xac>)
    aa90:	f7fe fad6 	bl	9040 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    aa94:	2400      	movs	r4, #0
	return k;
    aa96:	e018      	b.n	aaca <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa98:	4c21      	ldr	r4, [pc, #132]	; (ab20 <z_unpend_first_thread+0xb0>)
    aa9a:	238e      	movs	r3, #142	; 0x8e
    aa9c:	4622      	mov	r2, r4
    aa9e:	4921      	ldr	r1, [pc, #132]	; (ab24 <z_unpend_first_thread+0xb4>)
    aaa0:	4821      	ldr	r0, [pc, #132]	; (ab28 <z_unpend_first_thread+0xb8>)
    aaa2:	f001 fb61 	bl	c168 <assert_print>
    aaa6:	491d      	ldr	r1, [pc, #116]	; (ab1c <z_unpend_first_thread+0xac>)
    aaa8:	4820      	ldr	r0, [pc, #128]	; (ab2c <z_unpend_first_thread+0xbc>)
    aaaa:	f001 fb5d 	bl	c168 <assert_print>
    aaae:	218e      	movs	r1, #142	; 0x8e
    aab0:	4620      	mov	r0, r4
    aab2:	f001 fb52 	bl	c15a <assert_post_action>
    aab6:	e7ea      	b.n	aa8e <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aab8:	4818      	ldr	r0, [pc, #96]	; (ab1c <z_unpend_first_thread+0xac>)
    aaba:	f7fe fab1 	bl	9020 <z_spin_unlock_valid>
    aabe:	b1d8      	cbz	r0, aaf8 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    aac0:	f387 8811 	msr	BASEPRI, r7
    aac4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aac8:	2501      	movs	r5, #1
    aaca:	bb2d      	cbnz	r5, ab18 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    aacc:	4630      	mov	r0, r6
    aace:	f002 faa1 	bl	d014 <z_priq_dumb_best>
		if (thread != NULL) {
    aad2:	4604      	mov	r4, r0
    aad4:	2800      	cmp	r0, #0
    aad6:	d0ef      	beq.n	aab8 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aad8:	f7fe ffa0 	bl	9a1c <pended_on_thread>
    aadc:	4621      	mov	r1, r4
    aade:	f7ff f97b 	bl	9dd8 <z_priq_dumb_remove>
    aae2:	7b63      	ldrb	r3, [r4, #13]
    aae4:	f023 0302 	bic.w	r3, r3, #2
    aae8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aaea:	2300      	movs	r3, #0
    aaec:	60a3      	str	r3, [r4, #8]
    aaee:	f104 0018 	add.w	r0, r4, #24
    aaf2:	f000 fbd3 	bl	b29c <z_abort_timeout>
    aaf6:	e7df      	b.n	aab8 <z_unpend_first_thread+0x48>
    aaf8:	4d09      	ldr	r5, [pc, #36]	; (ab20 <z_unpend_first_thread+0xb0>)
    aafa:	23b9      	movs	r3, #185	; 0xb9
    aafc:	462a      	mov	r2, r5
    aafe:	490c      	ldr	r1, [pc, #48]	; (ab30 <z_unpend_first_thread+0xc0>)
    ab00:	4809      	ldr	r0, [pc, #36]	; (ab28 <z_unpend_first_thread+0xb8>)
    ab02:	f001 fb31 	bl	c168 <assert_print>
    ab06:	4905      	ldr	r1, [pc, #20]	; (ab1c <z_unpend_first_thread+0xac>)
    ab08:	480a      	ldr	r0, [pc, #40]	; (ab34 <z_unpend_first_thread+0xc4>)
    ab0a:	f001 fb2d 	bl	c168 <assert_print>
    ab0e:	21b9      	movs	r1, #185	; 0xb9
    ab10:	4628      	mov	r0, r5
    ab12:	f001 fb22 	bl	c15a <assert_post_action>
    ab16:	e7d3      	b.n	aac0 <z_unpend_first_thread+0x50>
}
    ab18:	4620      	mov	r0, r4
    ab1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab1c:	20001264 	.word	0x20001264
    ab20:	0000ddf4 	.word	0x0000ddf4
    ab24:	0000de54 	.word	0x0000de54
    ab28:	0000d51c 	.word	0x0000d51c
    ab2c:	0000de6c 	.word	0x0000de6c
    ab30:	0000de24 	.word	0x0000de24
    ab34:	0000de3c 	.word	0x0000de3c

0000ab38 <z_sched_init>:
{
    ab38:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    ab3a:	4804      	ldr	r0, [pc, #16]	; (ab4c <z_sched_init+0x14>)
    ab3c:	f002 fa71 	bl	d022 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    ab40:	2100      	movs	r1, #0
    ab42:	4608      	mov	r0, r1
    ab44:	f7fe ffa8 	bl	9a98 <k_sched_time_slice_set>
}
    ab48:	bd08      	pop	{r3, pc}
    ab4a:	bf00      	nop
    ab4c:	20001244 	.word	0x20001244

0000ab50 <z_impl_k_yield>:
{
    ab50:	b570      	push	{r4, r5, r6, lr}
    ab52:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ab56:	2b00      	cmp	r3, #0
    ab58:	d149      	bne.n	abee <z_impl_k_yield+0x9e>
	__asm__ volatile(
    ab5a:	f04f 0320 	mov.w	r3, #32
    ab5e:	f3ef 8611 	mrs	r6, BASEPRI
    ab62:	f383 8812 	msr	BASEPRI_MAX, r3
    ab66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab6a:	4843      	ldr	r0, [pc, #268]	; (ac78 <z_impl_k_yield+0x128>)
    ab6c:	f7fe fa48 	bl	9000 <z_spin_lock_valid>
    ab70:	2800      	cmp	r0, #0
    ab72:	d04d      	beq.n	ac10 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    ab74:	4840      	ldr	r0, [pc, #256]	; (ac78 <z_impl_k_yield+0x128>)
    ab76:	f7fe fa63 	bl	9040 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    ab7a:	4c40      	ldr	r4, [pc, #256]	; (ac7c <z_impl_k_yield+0x12c>)
    ab7c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ab7e:	7b4b      	ldrb	r3, [r1, #13]
    ab80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ab84:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ab86:	f104 0020 	add.w	r0, r4, #32
    ab8a:	f7ff f925 	bl	9dd8 <z_priq_dumb_remove>
	queue_thread(_current);
    ab8e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    ab90:	7b6b      	ldrb	r3, [r5, #13]
    ab92:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab96:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ab98:	4b39      	ldr	r3, [pc, #228]	; (ac80 <z_impl_k_yield+0x130>)
    ab9a:	429d      	cmp	r5, r3
    ab9c:	d048      	beq.n	ac30 <z_impl_k_yield+0xe0>
	return list->head == list;
    ab9e:	4b37      	ldr	r3, [pc, #220]	; (ac7c <z_impl_k_yield+0x12c>)
    aba0:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aba4:	429c      	cmp	r4, r3
    aba6:	d055      	beq.n	ac54 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aba8:	b16c      	cbz	r4, abc6 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    abaa:	4621      	mov	r1, r4
    abac:	4628      	mov	r0, r5
    abae:	f002 fa12 	bl	cfd6 <z_sched_prio_cmp>
    abb2:	2800      	cmp	r0, #0
    abb4:	dc48      	bgt.n	ac48 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    abb6:	b134      	cbz	r4, abc6 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    abb8:	4b30      	ldr	r3, [pc, #192]	; (ac7c <z_impl_k_yield+0x12c>)
    abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    abbc:	429c      	cmp	r4, r3
    abbe:	d002      	beq.n	abc6 <z_impl_k_yield+0x76>
    abc0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    abc2:	2c00      	cmp	r4, #0
    abc4:	d1f0      	bne.n	aba8 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    abc6:	4b2d      	ldr	r3, [pc, #180]	; (ac7c <z_impl_k_yield+0x12c>)
    abc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    abca:	f103 0120 	add.w	r1, r3, #32
    abce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    abd0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    abd2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    abd4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    abd6:	2001      	movs	r0, #1
    abd8:	f7ff f922 	bl	9e20 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abdc:	4826      	ldr	r0, [pc, #152]	; (ac78 <z_impl_k_yield+0x128>)
    abde:	f7fe fa1f 	bl	9020 <z_spin_unlock_valid>
    abe2:	2800      	cmp	r0, #0
    abe4:	d038      	beq.n	ac58 <z_impl_k_yield+0x108>
    abe6:	4630      	mov	r0, r6
    abe8:	f7f9 fcd8 	bl	459c <arch_swap>
}
    abec:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    abee:	4c25      	ldr	r4, [pc, #148]	; (ac84 <z_impl_k_yield+0x134>)
    abf0:	f240 5332 	movw	r3, #1330	; 0x532
    abf4:	4622      	mov	r2, r4
    abf6:	4924      	ldr	r1, [pc, #144]	; (ac88 <z_impl_k_yield+0x138>)
    abf8:	4824      	ldr	r0, [pc, #144]	; (ac8c <z_impl_k_yield+0x13c>)
    abfa:	f001 fab5 	bl	c168 <assert_print>
    abfe:	4824      	ldr	r0, [pc, #144]	; (ac90 <z_impl_k_yield+0x140>)
    ac00:	f001 fab2 	bl	c168 <assert_print>
    ac04:	f240 5132 	movw	r1, #1330	; 0x532
    ac08:	4620      	mov	r0, r4
    ac0a:	f001 faa6 	bl	c15a <assert_post_action>
    ac0e:	e7a4      	b.n	ab5a <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac10:	4c20      	ldr	r4, [pc, #128]	; (ac94 <z_impl_k_yield+0x144>)
    ac12:	238e      	movs	r3, #142	; 0x8e
    ac14:	4622      	mov	r2, r4
    ac16:	4920      	ldr	r1, [pc, #128]	; (ac98 <z_impl_k_yield+0x148>)
    ac18:	481c      	ldr	r0, [pc, #112]	; (ac8c <z_impl_k_yield+0x13c>)
    ac1a:	f001 faa5 	bl	c168 <assert_print>
    ac1e:	4916      	ldr	r1, [pc, #88]	; (ac78 <z_impl_k_yield+0x128>)
    ac20:	481e      	ldr	r0, [pc, #120]	; (ac9c <z_impl_k_yield+0x14c>)
    ac22:	f001 faa1 	bl	c168 <assert_print>
    ac26:	218e      	movs	r1, #142	; 0x8e
    ac28:	4620      	mov	r0, r4
    ac2a:	f001 fa96 	bl	c15a <assert_post_action>
    ac2e:	e7a1      	b.n	ab74 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ac30:	4c14      	ldr	r4, [pc, #80]	; (ac84 <z_impl_k_yield+0x134>)
    ac32:	23ba      	movs	r3, #186	; 0xba
    ac34:	4622      	mov	r2, r4
    ac36:	491a      	ldr	r1, [pc, #104]	; (aca0 <z_impl_k_yield+0x150>)
    ac38:	4814      	ldr	r0, [pc, #80]	; (ac8c <z_impl_k_yield+0x13c>)
    ac3a:	f001 fa95 	bl	c168 <assert_print>
    ac3e:	21ba      	movs	r1, #186	; 0xba
    ac40:	4620      	mov	r0, r4
    ac42:	f001 fa8a 	bl	c15a <assert_post_action>
    ac46:	e7aa      	b.n	ab9e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    ac48:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ac4a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ac4c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ac4e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ac50:	6065      	str	r5, [r4, #4]
}
    ac52:	e7c0      	b.n	abd6 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ac54:	2400      	movs	r4, #0
    ac56:	e7a7      	b.n	aba8 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac58:	4c0e      	ldr	r4, [pc, #56]	; (ac94 <z_impl_k_yield+0x144>)
    ac5a:	23d0      	movs	r3, #208	; 0xd0
    ac5c:	4622      	mov	r2, r4
    ac5e:	4911      	ldr	r1, [pc, #68]	; (aca4 <z_impl_k_yield+0x154>)
    ac60:	480a      	ldr	r0, [pc, #40]	; (ac8c <z_impl_k_yield+0x13c>)
    ac62:	f001 fa81 	bl	c168 <assert_print>
    ac66:	4904      	ldr	r1, [pc, #16]	; (ac78 <z_impl_k_yield+0x128>)
    ac68:	480f      	ldr	r0, [pc, #60]	; (aca8 <z_impl_k_yield+0x158>)
    ac6a:	f001 fa7d 	bl	c168 <assert_print>
    ac6e:	21d0      	movs	r1, #208	; 0xd0
    ac70:	4620      	mov	r0, r4
    ac72:	f001 fa72 	bl	c15a <assert_post_action>
    ac76:	e7b6      	b.n	abe6 <z_impl_k_yield+0x96>
    ac78:	20001264 	.word	0x20001264
    ac7c:	20001228 	.word	0x20001228
    ac80:	20000540 	.word	0x20000540
    ac84:	0000f6cc 	.word	0x0000f6cc
    ac88:	0000f4dc 	.word	0x0000f4dc
    ac8c:	0000d51c 	.word	0x0000d51c
    ac90:	0000f624 	.word	0x0000f624
    ac94:	0000ddf4 	.word	0x0000ddf4
    ac98:	0000de54 	.word	0x0000de54
    ac9c:	0000de6c 	.word	0x0000de6c
    aca0:	0000f708 	.word	0x0000f708
    aca4:	0000de24 	.word	0x0000de24
    aca8:	0000de3c 	.word	0x0000de3c

0000acac <z_tick_sleep>:
{
    acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    acb0:	4604      	mov	r4, r0
    acb2:	460e      	mov	r6, r1
    acb4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    acb8:	2b00      	cmp	r3, #0
    acba:	d14e      	bne.n	ad5a <z_tick_sleep+0xae>
	if (ticks == 0) {
    acbc:	ea54 0306 	orrs.w	r3, r4, r6
    acc0:	d05c      	beq.n	ad7c <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    acc2:	f06f 0301 	mvn.w	r3, #1
    acc6:	1b1b      	subs	r3, r3, r4
    acc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    accc:	eb62 0206 	sbc.w	r2, r2, r6
    acd0:	2b01      	cmp	r3, #1
    acd2:	f172 0300 	sbcs.w	r3, r2, #0
    acd6:	db55      	blt.n	ad84 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    acd8:	f06f 0501 	mvn.w	r5, #1
    acdc:	1b2d      	subs	r5, r5, r4
    acde:	f04f 0320 	mov.w	r3, #32
    ace2:	f3ef 8911 	mrs	r9, BASEPRI
    ace6:	f383 8812 	msr	BASEPRI_MAX, r3
    acea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    acee:	4840      	ldr	r0, [pc, #256]	; (adf0 <z_tick_sleep+0x144>)
    acf0:	f7fe f986 	bl	9000 <z_spin_lock_valid>
    acf4:	2800      	cmp	r0, #0
    acf6:	d049      	beq.n	ad8c <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    acf8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; adf0 <z_tick_sleep+0x144>
    acfc:	4640      	mov	r0, r8
    acfe:	f7fe f99f 	bl	9040 <z_spin_lock_set_owner>
	pending_current = _current;
    ad02:	4f3c      	ldr	r7, [pc, #240]	; (adf4 <z_tick_sleep+0x148>)
    ad04:	68b8      	ldr	r0, [r7, #8]
    ad06:	4b3c      	ldr	r3, [pc, #240]	; (adf8 <z_tick_sleep+0x14c>)
    ad08:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ad0a:	f7ff fb5b 	bl	a3c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ad0e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ad10:	4622      	mov	r2, r4
    ad12:	4633      	mov	r3, r6
    ad14:	4939      	ldr	r1, [pc, #228]	; (adfc <z_tick_sleep+0x150>)
    ad16:	3018      	adds	r0, #24
    ad18:	f000 f9dc 	bl	b0d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ad1c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ad1e:	7b53      	ldrb	r3, [r2, #13]
    ad20:	f043 0310 	orr.w	r3, r3, #16
    ad24:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad26:	4640      	mov	r0, r8
    ad28:	f7fe f97a 	bl	9020 <z_spin_unlock_valid>
    ad2c:	2800      	cmp	r0, #0
    ad2e:	d03d      	beq.n	adac <z_tick_sleep+0x100>
    ad30:	4648      	mov	r0, r9
    ad32:	f7f9 fc33 	bl	459c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    ad36:	4b2f      	ldr	r3, [pc, #188]	; (adf4 <z_tick_sleep+0x148>)
    ad38:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    ad3a:	7b5b      	ldrb	r3, [r3, #13]
    ad3c:	f013 0f10 	tst.w	r3, #16
    ad40:	d144      	bne.n	adcc <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ad42:	f002 f989 	bl	d058 <sys_clock_tick_get_32>
    ad46:	1a28      	subs	r0, r5, r0
    ad48:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    ad4c:	2801      	cmp	r0, #1
    ad4e:	f173 0300 	sbcs.w	r3, r3, #0
    ad52:	da00      	bge.n	ad56 <z_tick_sleep+0xaa>
	return 0;
    ad54:	2000      	movs	r0, #0
}
    ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ad5a:	4d29      	ldr	r5, [pc, #164]	; (ae00 <z_tick_sleep+0x154>)
    ad5c:	f240 534e 	movw	r3, #1358	; 0x54e
    ad60:	462a      	mov	r2, r5
    ad62:	4928      	ldr	r1, [pc, #160]	; (ae04 <z_tick_sleep+0x158>)
    ad64:	4828      	ldr	r0, [pc, #160]	; (ae08 <z_tick_sleep+0x15c>)
    ad66:	f001 f9ff 	bl	c168 <assert_print>
    ad6a:	4828      	ldr	r0, [pc, #160]	; (ae0c <z_tick_sleep+0x160>)
    ad6c:	f001 f9fc 	bl	c168 <assert_print>
    ad70:	f240 514e 	movw	r1, #1358	; 0x54e
    ad74:	4628      	mov	r0, r5
    ad76:	f001 f9f0 	bl	c15a <assert_post_action>
    ad7a:	e79f      	b.n	acbc <z_tick_sleep+0x10>
	z_impl_k_yield();
    ad7c:	f7ff fee8 	bl	ab50 <z_impl_k_yield>
		return 0;
    ad80:	2000      	movs	r0, #0
    ad82:	e7e8      	b.n	ad56 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ad84:	f002 f968 	bl	d058 <sys_clock_tick_get_32>
    ad88:	1905      	adds	r5, r0, r4
    ad8a:	e7a8      	b.n	acde <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad8c:	4f20      	ldr	r7, [pc, #128]	; (ae10 <z_tick_sleep+0x164>)
    ad8e:	238e      	movs	r3, #142	; 0x8e
    ad90:	463a      	mov	r2, r7
    ad92:	4920      	ldr	r1, [pc, #128]	; (ae14 <z_tick_sleep+0x168>)
    ad94:	481c      	ldr	r0, [pc, #112]	; (ae08 <z_tick_sleep+0x15c>)
    ad96:	f001 f9e7 	bl	c168 <assert_print>
    ad9a:	4915      	ldr	r1, [pc, #84]	; (adf0 <z_tick_sleep+0x144>)
    ad9c:	481e      	ldr	r0, [pc, #120]	; (ae18 <z_tick_sleep+0x16c>)
    ad9e:	f001 f9e3 	bl	c168 <assert_print>
    ada2:	218e      	movs	r1, #142	; 0x8e
    ada4:	4638      	mov	r0, r7
    ada6:	f001 f9d8 	bl	c15a <assert_post_action>
    adaa:	e7a5      	b.n	acf8 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    adac:	4c18      	ldr	r4, [pc, #96]	; (ae10 <z_tick_sleep+0x164>)
    adae:	23d0      	movs	r3, #208	; 0xd0
    adb0:	4622      	mov	r2, r4
    adb2:	491a      	ldr	r1, [pc, #104]	; (ae1c <z_tick_sleep+0x170>)
    adb4:	4814      	ldr	r0, [pc, #80]	; (ae08 <z_tick_sleep+0x15c>)
    adb6:	f001 f9d7 	bl	c168 <assert_print>
    adba:	4641      	mov	r1, r8
    adbc:	4818      	ldr	r0, [pc, #96]	; (ae20 <z_tick_sleep+0x174>)
    adbe:	f001 f9d3 	bl	c168 <assert_print>
    adc2:	21d0      	movs	r1, #208	; 0xd0
    adc4:	4620      	mov	r0, r4
    adc6:	f001 f9c8 	bl	c15a <assert_post_action>
    adca:	e7b1      	b.n	ad30 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    adcc:	4c0c      	ldr	r4, [pc, #48]	; (ae00 <z_tick_sleep+0x154>)
    adce:	f240 536f 	movw	r3, #1391	; 0x56f
    add2:	4622      	mov	r2, r4
    add4:	4913      	ldr	r1, [pc, #76]	; (ae24 <z_tick_sleep+0x178>)
    add6:	480c      	ldr	r0, [pc, #48]	; (ae08 <z_tick_sleep+0x15c>)
    add8:	f001 f9c6 	bl	c168 <assert_print>
    addc:	480b      	ldr	r0, [pc, #44]	; (ae0c <z_tick_sleep+0x160>)
    adde:	f001 f9c3 	bl	c168 <assert_print>
    ade2:	f240 516f 	movw	r1, #1391	; 0x56f
    ade6:	4620      	mov	r0, r4
    ade8:	f001 f9b7 	bl	c15a <assert_post_action>
    adec:	e7a9      	b.n	ad42 <z_tick_sleep+0x96>
    adee:	bf00      	nop
    adf0:	20001264 	.word	0x20001264
    adf4:	20001228 	.word	0x20001228
    adf8:	20001260 	.word	0x20001260
    adfc:	0000a2dd 	.word	0x0000a2dd
    ae00:	0000f6cc 	.word	0x0000f6cc
    ae04:	0000f4dc 	.word	0x0000f4dc
    ae08:	0000d51c 	.word	0x0000d51c
    ae0c:	0000f624 	.word	0x0000f624
    ae10:	0000ddf4 	.word	0x0000ddf4
    ae14:	0000de54 	.word	0x0000de54
    ae18:	0000de6c 	.word	0x0000de6c
    ae1c:	0000de24 	.word	0x0000de24
    ae20:	0000de3c 	.word	0x0000de3c
    ae24:	0000f788 	.word	0x0000f788

0000ae28 <z_impl_k_sleep>:
{
    ae28:	b570      	push	{r4, r5, r6, lr}
    ae2a:	4605      	mov	r5, r0
    ae2c:	460c      	mov	r4, r1
    ae2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ae32:	bb13      	cbnz	r3, ae7a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ae34:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    ae38:	bf08      	it	eq
    ae3a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    ae3e:	d02d      	beq.n	ae9c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    ae40:	4628      	mov	r0, r5
    ae42:	4621      	mov	r1, r4
    ae44:	f7ff ff32 	bl	acac <z_tick_sleep>
    ae48:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    ae4a:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    ae4c:	0151      	lsls	r1, r2, #5
    ae4e:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    ae52:	0143      	lsls	r3, r0, #5
    ae54:	1a1b      	subs	r3, r3, r0
    ae56:	eb61 0102 	sbc.w	r1, r1, r2
    ae5a:	0088      	lsls	r0, r1, #2
    ae5c:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    ae60:	009b      	lsls	r3, r3, #2
    ae62:	eb13 030c 	adds.w	r3, r3, ip
    ae66:	eb42 0000 	adc.w	r0, r2, r0
    ae6a:	00c0      	lsls	r0, r0, #3
    ae6c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    ae70:	f3c3 3310 	ubfx	r3, r3, #12, #17
    ae74:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    ae78:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    ae7a:	4e0c      	ldr	r6, [pc, #48]	; (aeac <z_impl_k_sleep+0x84>)
    ae7c:	f240 537e 	movw	r3, #1406	; 0x57e
    ae80:	4632      	mov	r2, r6
    ae82:	490b      	ldr	r1, [pc, #44]	; (aeb0 <z_impl_k_sleep+0x88>)
    ae84:	480b      	ldr	r0, [pc, #44]	; (aeb4 <z_impl_k_sleep+0x8c>)
    ae86:	f001 f96f 	bl	c168 <assert_print>
    ae8a:	480b      	ldr	r0, [pc, #44]	; (aeb8 <z_impl_k_sleep+0x90>)
    ae8c:	f001 f96c 	bl	c168 <assert_print>
    ae90:	f240 517e 	movw	r1, #1406	; 0x57e
    ae94:	4630      	mov	r0, r6
    ae96:	f001 f960 	bl	c15a <assert_post_action>
    ae9a:	e7cb      	b.n	ae34 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    ae9c:	4b07      	ldr	r3, [pc, #28]	; (aebc <z_impl_k_sleep+0x94>)
    ae9e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    aea0:	f7ff fc28 	bl	a6f4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    aea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aea8:	e7e6      	b.n	ae78 <z_impl_k_sleep+0x50>
    aeaa:	bf00      	nop
    aeac:	0000f6cc 	.word	0x0000f6cc
    aeb0:	0000f4dc 	.word	0x0000f4dc
    aeb4:	0000d51c 	.word	0x0000d51c
    aeb8:	0000f624 	.word	0x0000f624
    aebc:	20001228 	.word	0x20001228

0000aec0 <z_impl_z_current_get>:
}
    aec0:	4b01      	ldr	r3, [pc, #4]	; (aec8 <z_impl_z_current_get+0x8>)
    aec2:	6898      	ldr	r0, [r3, #8]
    aec4:	4770      	bx	lr
    aec6:	bf00      	nop
    aec8:	20001228 	.word	0x20001228

0000aecc <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    aecc:	b570      	push	{r4, r5, r6, lr}
    aece:	4604      	mov	r4, r0
    aed0:	f04f 0320 	mov.w	r3, #32
    aed4:	f3ef 8511 	mrs	r5, BASEPRI
    aed8:	f383 8812 	msr	BASEPRI_MAX, r3
    aedc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aee0:	4840      	ldr	r0, [pc, #256]	; (afe4 <z_thread_abort+0x118>)
    aee2:	f7fe f88d 	bl	9000 <z_spin_lock_valid>
    aee6:	b1b8      	cbz	r0, af18 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    aee8:	483e      	ldr	r0, [pc, #248]	; (afe4 <z_thread_abort+0x118>)
    aeea:	f7fe f8a9 	bl	9040 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    aeee:	7b63      	ldrb	r3, [r4, #13]
    aef0:	f013 0f08 	tst.w	r3, #8
    aef4:	d120      	bne.n	af38 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    aef6:	4620      	mov	r0, r4
    aef8:	f7ff fd0c 	bl	a914 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    aefc:	4b3a      	ldr	r3, [pc, #232]	; (afe8 <z_thread_abort+0x11c>)
    aefe:	689b      	ldr	r3, [r3, #8]
    af00:	42a3      	cmp	r3, r4
    af02:	d032      	beq.n	af6a <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af04:	4837      	ldr	r0, [pc, #220]	; (afe4 <z_thread_abort+0x118>)
    af06:	f7fe f88b 	bl	9020 <z_spin_unlock_valid>
    af0a:	2800      	cmp	r0, #0
    af0c:	d059      	beq.n	afc2 <z_thread_abort+0xf6>
	__asm__ volatile(
    af0e:	f385 8811 	msr	BASEPRI, r5
    af12:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    af16:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af18:	4e34      	ldr	r6, [pc, #208]	; (afec <z_thread_abort+0x120>)
    af1a:	238e      	movs	r3, #142	; 0x8e
    af1c:	4632      	mov	r2, r6
    af1e:	4934      	ldr	r1, [pc, #208]	; (aff0 <z_thread_abort+0x124>)
    af20:	4834      	ldr	r0, [pc, #208]	; (aff4 <z_thread_abort+0x128>)
    af22:	f001 f921 	bl	c168 <assert_print>
    af26:	492f      	ldr	r1, [pc, #188]	; (afe4 <z_thread_abort+0x118>)
    af28:	4833      	ldr	r0, [pc, #204]	; (aff8 <z_thread_abort+0x12c>)
    af2a:	f001 f91d 	bl	c168 <assert_print>
    af2e:	218e      	movs	r1, #142	; 0x8e
    af30:	4630      	mov	r0, r6
    af32:	f001 f912 	bl	c15a <assert_post_action>
    af36:	e7d7      	b.n	aee8 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af38:	482a      	ldr	r0, [pc, #168]	; (afe4 <z_thread_abort+0x118>)
    af3a:	f7fe f871 	bl	9020 <z_spin_unlock_valid>
    af3e:	b120      	cbz	r0, af4a <z_thread_abort+0x7e>
    af40:	f385 8811 	msr	BASEPRI, r5
    af44:	f3bf 8f6f 	isb	sy
		return;
    af48:	e7e5      	b.n	af16 <z_thread_abort+0x4a>
    af4a:	4c28      	ldr	r4, [pc, #160]	; (afec <z_thread_abort+0x120>)
    af4c:	23b9      	movs	r3, #185	; 0xb9
    af4e:	4622      	mov	r2, r4
    af50:	492a      	ldr	r1, [pc, #168]	; (affc <z_thread_abort+0x130>)
    af52:	4828      	ldr	r0, [pc, #160]	; (aff4 <z_thread_abort+0x128>)
    af54:	f001 f908 	bl	c168 <assert_print>
    af58:	4922      	ldr	r1, [pc, #136]	; (afe4 <z_thread_abort+0x118>)
    af5a:	4829      	ldr	r0, [pc, #164]	; (b000 <z_thread_abort+0x134>)
    af5c:	f001 f904 	bl	c168 <assert_print>
    af60:	21b9      	movs	r1, #185	; 0xb9
    af62:	4620      	mov	r0, r4
    af64:	f001 f8f9 	bl	c15a <assert_post_action>
    af68:	e7ea      	b.n	af40 <z_thread_abort+0x74>
    af6a:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    af6e:	2b00      	cmp	r3, #0
    af70:	d1c8      	bne.n	af04 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    af72:	481c      	ldr	r0, [pc, #112]	; (afe4 <z_thread_abort+0x118>)
    af74:	f7fe f854 	bl	9020 <z_spin_unlock_valid>
    af78:	b198      	cbz	r0, afa2 <z_thread_abort+0xd6>
    af7a:	4628      	mov	r0, r5
    af7c:	f7f9 fb0e 	bl	459c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    af80:	4c20      	ldr	r4, [pc, #128]	; (b004 <z_thread_abort+0x138>)
    af82:	f240 63ac 	movw	r3, #1708	; 0x6ac
    af86:	4622      	mov	r2, r4
    af88:	491f      	ldr	r1, [pc, #124]	; (b008 <z_thread_abort+0x13c>)
    af8a:	481a      	ldr	r0, [pc, #104]	; (aff4 <z_thread_abort+0x128>)
    af8c:	f001 f8ec 	bl	c168 <assert_print>
    af90:	481e      	ldr	r0, [pc, #120]	; (b00c <z_thread_abort+0x140>)
    af92:	f001 f8e9 	bl	c168 <assert_print>
    af96:	f240 61ac 	movw	r1, #1708	; 0x6ac
    af9a:	4620      	mov	r0, r4
    af9c:	f001 f8dd 	bl	c15a <assert_post_action>
    afa0:	e7b0      	b.n	af04 <z_thread_abort+0x38>
    afa2:	4c12      	ldr	r4, [pc, #72]	; (afec <z_thread_abort+0x120>)
    afa4:	23d0      	movs	r3, #208	; 0xd0
    afa6:	4622      	mov	r2, r4
    afa8:	4914      	ldr	r1, [pc, #80]	; (affc <z_thread_abort+0x130>)
    afaa:	4812      	ldr	r0, [pc, #72]	; (aff4 <z_thread_abort+0x128>)
    afac:	f001 f8dc 	bl	c168 <assert_print>
    afb0:	490c      	ldr	r1, [pc, #48]	; (afe4 <z_thread_abort+0x118>)
    afb2:	4813      	ldr	r0, [pc, #76]	; (b000 <z_thread_abort+0x134>)
    afb4:	f001 f8d8 	bl	c168 <assert_print>
    afb8:	21d0      	movs	r1, #208	; 0xd0
    afba:	4620      	mov	r0, r4
    afbc:	f001 f8cd 	bl	c15a <assert_post_action>
    afc0:	e7db      	b.n	af7a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    afc2:	4c0a      	ldr	r4, [pc, #40]	; (afec <z_thread_abort+0x120>)
    afc4:	23b9      	movs	r3, #185	; 0xb9
    afc6:	4622      	mov	r2, r4
    afc8:	490c      	ldr	r1, [pc, #48]	; (affc <z_thread_abort+0x130>)
    afca:	480a      	ldr	r0, [pc, #40]	; (aff4 <z_thread_abort+0x128>)
    afcc:	f001 f8cc 	bl	c168 <assert_print>
    afd0:	4904      	ldr	r1, [pc, #16]	; (afe4 <z_thread_abort+0x118>)
    afd2:	480b      	ldr	r0, [pc, #44]	; (b000 <z_thread_abort+0x134>)
    afd4:	f001 f8c8 	bl	c168 <assert_print>
    afd8:	21b9      	movs	r1, #185	; 0xb9
    afda:	4620      	mov	r0, r4
    afdc:	f001 f8bd 	bl	c15a <assert_post_action>
    afe0:	e795      	b.n	af0e <z_thread_abort+0x42>
    afe2:	bf00      	nop
    afe4:	20001264 	.word	0x20001264
    afe8:	20001228 	.word	0x20001228
    afec:	0000ddf4 	.word	0x0000ddf4
    aff0:	0000de54 	.word	0x0000de54
    aff4:	0000d51c 	.word	0x0000d51c
    aff8:	0000de6c 	.word	0x0000de6c
    affc:	0000de24 	.word	0x0000de24
    b000:	0000de3c 	.word	0x0000de3c
    b004:	0000f6cc 	.word	0x0000f6cc
    b008:	0000d6e0 	.word	0x0000d6e0
    b00c:	0000f7c8 	.word	0x0000f7c8

0000b010 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b010:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b012:	4806      	ldr	r0, [pc, #24]	; (b02c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b014:	4a06      	ldr	r2, [pc, #24]	; (b030 <z_data_copy+0x20>)
    b016:	1a12      	subs	r2, r2, r0
    b018:	4906      	ldr	r1, [pc, #24]	; (b034 <z_data_copy+0x24>)
    b01a:	f001 ff55 	bl	cec8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b01e:	4a06      	ldr	r2, [pc, #24]	; (b038 <z_data_copy+0x28>)
    b020:	4906      	ldr	r1, [pc, #24]	; (b03c <z_data_copy+0x2c>)
    b022:	4807      	ldr	r0, [pc, #28]	; (b040 <z_data_copy+0x30>)
    b024:	f001 ff50 	bl	cec8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b028:	bd08      	pop	{r3, pc}
    b02a:	bf00      	nop
    b02c:	20000000 	.word	0x20000000
    b030:	20000260 	.word	0x20000260
    b034:	0000f92c 	.word	0x0000f92c
    b038:	00000000 	.word	0x00000000
    b03c:	0000f92c 	.word	0x0000f92c
    b040:	20000000 	.word	0x20000000

0000b044 <first>:
	return list->head == list;
    b044:	4b03      	ldr	r3, [pc, #12]	; (b054 <first+0x10>)
    b046:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b048:	4298      	cmp	r0, r3
    b04a:	d000      	beq.n	b04e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    b04c:	4770      	bx	lr
    b04e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    b050:	e7fc      	b.n	b04c <first+0x8>
    b052:	bf00      	nop
    b054:	20000174 	.word	0x20000174

0000b058 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b058:	b130      	cbz	r0, b068 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    b05a:	4a04      	ldr	r2, [pc, #16]	; (b06c <next+0x14>)
    b05c:	6852      	ldr	r2, [r2, #4]
    b05e:	4290      	cmp	r0, r2
    b060:	d001      	beq.n	b066 <next+0xe>
    b062:	6800      	ldr	r0, [r0, #0]
    b064:	4770      	bx	lr
    b066:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b068:	4770      	bx	lr
    b06a:	bf00      	nop
    b06c:	20000174 	.word	0x20000174

0000b070 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b070:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b072:	4b04      	ldr	r3, [pc, #16]	; (b084 <elapsed+0x14>)
    b074:	681b      	ldr	r3, [r3, #0]
    b076:	b10b      	cbz	r3, b07c <elapsed+0xc>
    b078:	2000      	movs	r0, #0
}
    b07a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b07c:	f7fb fc28 	bl	68d0 <sys_clock_elapsed>
    b080:	e7fb      	b.n	b07a <elapsed+0xa>
    b082:	bf00      	nop
    b084:	20001270 	.word	0x20001270

0000b088 <next_timeout>:

static int32_t next_timeout(void)
{
    b088:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    b08a:	f7ff ffdb 	bl	b044 <first>
    b08e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    b090:	f7ff ffee 	bl	b070 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    b094:	b17c      	cbz	r4, b0b6 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b096:	6923      	ldr	r3, [r4, #16]
    b098:	6962      	ldr	r2, [r4, #20]
    b09a:	1a1b      	subs	r3, r3, r0
    b09c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    b0a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b0a4:	f170 0200 	sbcs.w	r2, r0, #0
    b0a8:	da08      	bge.n	b0bc <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    b0aa:	2800      	cmp	r0, #0
    b0ac:	db01      	blt.n	b0b2 <next_timeout+0x2a>
    b0ae:	4618      	mov	r0, r3
    b0b0:	e006      	b.n	b0c0 <next_timeout+0x38>
    b0b2:	2300      	movs	r3, #0
    b0b4:	e7fb      	b.n	b0ae <next_timeout+0x26>
		ret = MAX_WAIT;
    b0b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b0ba:	e001      	b.n	b0c0 <next_timeout+0x38>
    b0bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b0c0:	4b03      	ldr	r3, [pc, #12]	; (b0d0 <next_timeout+0x48>)
    b0c2:	691b      	ldr	r3, [r3, #16]
    b0c4:	b113      	cbz	r3, b0cc <next_timeout+0x44>
    b0c6:	4283      	cmp	r3, r0
    b0c8:	da00      	bge.n	b0cc <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    b0ca:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    b0cc:	bd10      	pop	{r4, pc}
    b0ce:	bf00      	nop
    b0d0:	20001228 	.word	0x20001228

0000b0d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b0d8:	bf08      	it	eq
    b0da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b0de:	f000 80c1 	beq.w	b264 <z_add_timeout+0x190>
{
    b0e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0e6:	4604      	mov	r4, r0
    b0e8:	460f      	mov	r7, r1
    b0ea:	4692      	mov	sl, r2
    b0ec:	461d      	mov	r5, r3
	return node->next != NULL;
    b0ee:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    b0f0:	b173      	cbz	r3, b110 <z_add_timeout+0x3c>
    b0f2:	f8df 8174 	ldr.w	r8, [pc, #372]	; b268 <z_add_timeout+0x194>
    b0f6:	2363      	movs	r3, #99	; 0x63
    b0f8:	4642      	mov	r2, r8
    b0fa:	495c      	ldr	r1, [pc, #368]	; (b26c <z_add_timeout+0x198>)
    b0fc:	485c      	ldr	r0, [pc, #368]	; (b270 <z_add_timeout+0x19c>)
    b0fe:	f001 f833 	bl	c168 <assert_print>
    b102:	485c      	ldr	r0, [pc, #368]	; (b274 <z_add_timeout+0x1a0>)
    b104:	f001 f830 	bl	c168 <assert_print>
    b108:	2163      	movs	r1, #99	; 0x63
    b10a:	4640      	mov	r0, r8
    b10c:	f001 f825 	bl	c15a <assert_post_action>
	to->fn = fn;
    b110:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    b112:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    b116:	f04f 0320 	mov.w	r3, #32
    b11a:	f3ef 8711 	mrs	r7, BASEPRI
    b11e:	f383 8812 	msr	BASEPRI_MAX, r3
    b122:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b126:	4854      	ldr	r0, [pc, #336]	; (b278 <z_add_timeout+0x1a4>)
    b128:	f7fd ff6a 	bl	9000 <z_spin_lock_valid>
    b12c:	b118      	cbz	r0, b136 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    b12e:	4852      	ldr	r0, [pc, #328]	; (b278 <z_add_timeout+0x1a4>)
    b130:	f7fd ff86 	bl	9040 <z_spin_lock_set_owner>
	return k;
    b134:	e038      	b.n	b1a8 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b136:	f8df 9144 	ldr.w	r9, [pc, #324]	; b27c <z_add_timeout+0x1a8>
    b13a:	238e      	movs	r3, #142	; 0x8e
    b13c:	464a      	mov	r2, r9
    b13e:	4950      	ldr	r1, [pc, #320]	; (b280 <z_add_timeout+0x1ac>)
    b140:	484b      	ldr	r0, [pc, #300]	; (b270 <z_add_timeout+0x19c>)
    b142:	f001 f811 	bl	c168 <assert_print>
    b146:	494c      	ldr	r1, [pc, #304]	; (b278 <z_add_timeout+0x1a4>)
    b148:	484e      	ldr	r0, [pc, #312]	; (b284 <z_add_timeout+0x1b0>)
    b14a:	f001 f80d 	bl	c168 <assert_print>
    b14e:	218e      	movs	r1, #142	; 0x8e
    b150:	4648      	mov	r0, r9
    b152:	f001 f802 	bl	c15a <assert_post_action>
    b156:	e7ea      	b.n	b12e <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b158:	f11a 0801 	adds.w	r8, sl, #1
    b15c:	f145 0900 	adc.w	r9, r5, #0
    b160:	f7ff ff86 	bl	b070 <elapsed>
    b164:	eb18 0300 	adds.w	r3, r8, r0
    b168:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    b16c:	6123      	str	r3, [r4, #16]
    b16e:	6160      	str	r0, [r4, #20]
    b170:	e03d      	b.n	b1ee <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b172:	1a51      	subs	r1, r2, r1
    b174:	eb66 0303 	sbc.w	r3, r6, r3
    b178:	6101      	str	r1, [r0, #16]
    b17a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    b17c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    b17e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b180:	6020      	str	r0, [r4, #0]
	prev->next = node;
    b182:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b184:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b186:	2800      	cmp	r0, #0
    b188:	d045      	beq.n	b216 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b18a:	f7ff ff5b 	bl	b044 <first>
    b18e:	4284      	cmp	r4, r0
    b190:	d048      	beq.n	b224 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b192:	4839      	ldr	r0, [pc, #228]	; (b278 <z_add_timeout+0x1a4>)
    b194:	f7fd ff44 	bl	9020 <z_spin_unlock_valid>
    b198:	2800      	cmp	r0, #0
    b19a:	d050      	beq.n	b23e <z_add_timeout+0x16a>
	__asm__ volatile(
    b19c:	f387 8811 	msr	BASEPRI, r7
    b1a0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b1a4:	f04f 0801 	mov.w	r8, #1
    b1a8:	f1b8 0f00 	cmp.w	r8, #0
    b1ac:	d158      	bne.n	b260 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b1ae:	4653      	mov	r3, sl
    b1b0:	f06f 0101 	mvn.w	r1, #1
    b1b4:	ebb1 010a 	subs.w	r1, r1, sl
    b1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b1bc:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b1c0:	2a00      	cmp	r2, #0
    b1c2:	dbc9      	blt.n	b158 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b1c4:	4a30      	ldr	r2, [pc, #192]	; (b288 <z_add_timeout+0x1b4>)
    b1c6:	6811      	ldr	r1, [r2, #0]
    b1c8:	6852      	ldr	r2, [r2, #4]
    b1ca:	185b      	adds	r3, r3, r1
    b1cc:	eb42 0205 	adc.w	r2, r2, r5
    b1d0:	f06f 0101 	mvn.w	r1, #1
    b1d4:	1acb      	subs	r3, r1, r3
    b1d6:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    b1da:	4618      	mov	r0, r3
    b1dc:	4611      	mov	r1, r2
    b1de:	2b01      	cmp	r3, #1
    b1e0:	f172 0300 	sbcs.w	r3, r2, #0
    b1e4:	da01      	bge.n	b1ea <z_add_timeout+0x116>
    b1e6:	2001      	movs	r0, #1
    b1e8:	2100      	movs	r1, #0
    b1ea:	6120      	str	r0, [r4, #16]
    b1ec:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b1ee:	f7ff ff29 	bl	b044 <first>
    b1f2:	2800      	cmp	r0, #0
    b1f4:	d0c7      	beq.n	b186 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    b1f6:	6902      	ldr	r2, [r0, #16]
    b1f8:	6946      	ldr	r6, [r0, #20]
    b1fa:	6921      	ldr	r1, [r4, #16]
    b1fc:	6963      	ldr	r3, [r4, #20]
    b1fe:	4291      	cmp	r1, r2
    b200:	eb73 0c06 	sbcs.w	ip, r3, r6
    b204:	dbb5      	blt.n	b172 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    b206:	1a89      	subs	r1, r1, r2
    b208:	eb63 0306 	sbc.w	r3, r3, r6
    b20c:	6121      	str	r1, [r4, #16]
    b20e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b210:	f7ff ff22 	bl	b058 <next>
    b214:	e7ed      	b.n	b1f2 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    b216:	4b1d      	ldr	r3, [pc, #116]	; (b28c <z_add_timeout+0x1b8>)
    b218:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b21a:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    b21c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b21e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b220:	605c      	str	r4, [r3, #4]
}
    b222:	e7b2      	b.n	b18a <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b224:	f7ff ff30 	bl	b088 <next_timeout>

			if (next_time == 0 ||
    b228:	4603      	mov	r3, r0
    b22a:	b118      	cbz	r0, b234 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    b22c:	4a18      	ldr	r2, [pc, #96]	; (b290 <z_add_timeout+0x1bc>)
    b22e:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    b230:	4282      	cmp	r2, r0
    b232:	d0ae      	beq.n	b192 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    b234:	2100      	movs	r1, #0
    b236:	4618      	mov	r0, r3
    b238:	f7fb fb18 	bl	686c <sys_clock_set_timeout>
    b23c:	e7a9      	b.n	b192 <z_add_timeout+0xbe>
    b23e:	f8df 803c 	ldr.w	r8, [pc, #60]	; b27c <z_add_timeout+0x1a8>
    b242:	23b9      	movs	r3, #185	; 0xb9
    b244:	4642      	mov	r2, r8
    b246:	4913      	ldr	r1, [pc, #76]	; (b294 <z_add_timeout+0x1c0>)
    b248:	4809      	ldr	r0, [pc, #36]	; (b270 <z_add_timeout+0x19c>)
    b24a:	f000 ff8d 	bl	c168 <assert_print>
    b24e:	490a      	ldr	r1, [pc, #40]	; (b278 <z_add_timeout+0x1a4>)
    b250:	4811      	ldr	r0, [pc, #68]	; (b298 <z_add_timeout+0x1c4>)
    b252:	f000 ff89 	bl	c168 <assert_print>
    b256:	21b9      	movs	r1, #185	; 0xb9
    b258:	4640      	mov	r0, r8
    b25a:	f000 ff7e 	bl	c15a <assert_post_action>
    b25e:	e79d      	b.n	b19c <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b264:	4770      	bx	lr
    b266:	bf00      	nop
    b268:	0000f7ec 	.word	0x0000f7ec
    b26c:	0000f810 	.word	0x0000f810
    b270:	0000d51c 	.word	0x0000d51c
    b274:	0000f624 	.word	0x0000f624
    b278:	20001274 	.word	0x20001274
    b27c:	0000ddf4 	.word	0x0000ddf4
    b280:	0000de54 	.word	0x0000de54
    b284:	0000de6c 	.word	0x0000de6c
    b288:	200006a0 	.word	0x200006a0
    b28c:	20000174 	.word	0x20000174
    b290:	20001228 	.word	0x20001228
    b294:	0000de24 	.word	0x0000de24
    b298:	0000de3c 	.word	0x0000de3c

0000b29c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    b29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2a0:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    b2a2:	2400      	movs	r4, #0
	__asm__ volatile(
    b2a4:	f04f 0320 	mov.w	r3, #32
    b2a8:	f3ef 8711 	mrs	r7, BASEPRI
    b2ac:	f383 8812 	msr	BASEPRI_MAX, r3
    b2b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2b4:	481f      	ldr	r0, [pc, #124]	; (b334 <z_abort_timeout+0x98>)
    b2b6:	f7fd fea3 	bl	9000 <z_spin_lock_valid>
    b2ba:	b128      	cbz	r0, b2c8 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    b2bc:	481d      	ldr	r0, [pc, #116]	; (b334 <z_abort_timeout+0x98>)
    b2be:	f7fd febf 	bl	9040 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    b2c2:	f06f 0815 	mvn.w	r8, #21
	return k;
    b2c6:	e018      	b.n	b2fa <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2c8:	4e1b      	ldr	r6, [pc, #108]	; (b338 <z_abort_timeout+0x9c>)
    b2ca:	238e      	movs	r3, #142	; 0x8e
    b2cc:	4632      	mov	r2, r6
    b2ce:	491b      	ldr	r1, [pc, #108]	; (b33c <z_abort_timeout+0xa0>)
    b2d0:	481b      	ldr	r0, [pc, #108]	; (b340 <z_abort_timeout+0xa4>)
    b2d2:	f000 ff49 	bl	c168 <assert_print>
    b2d6:	4917      	ldr	r1, [pc, #92]	; (b334 <z_abort_timeout+0x98>)
    b2d8:	481a      	ldr	r0, [pc, #104]	; (b344 <z_abort_timeout+0xa8>)
    b2da:	f000 ff45 	bl	c168 <assert_print>
    b2de:	218e      	movs	r1, #142	; 0x8e
    b2e0:	4630      	mov	r0, r6
    b2e2:	f000 ff3a 	bl	c15a <assert_post_action>
    b2e6:	e7e9      	b.n	b2bc <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2e8:	4812      	ldr	r0, [pc, #72]	; (b334 <z_abort_timeout+0x98>)
    b2ea:	f7fd fe99 	bl	9020 <z_spin_unlock_valid>
    b2ee:	b170      	cbz	r0, b30e <z_abort_timeout+0x72>
	__asm__ volatile(
    b2f0:	f387 8811 	msr	BASEPRI, r7
    b2f4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b2f8:	2401      	movs	r4, #1
    b2fa:	4626      	mov	r6, r4
    b2fc:	b9bc      	cbnz	r4, b32e <z_abort_timeout+0x92>
	return node->next != NULL;
    b2fe:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    b300:	2b00      	cmp	r3, #0
    b302:	d0f1      	beq.n	b2e8 <z_abort_timeout+0x4c>
			remove_timeout(to);
    b304:	4628      	mov	r0, r5
    b306:	f001 fe90 	bl	d02a <remove_timeout>
			ret = 0;
    b30a:	46b0      	mov	r8, r6
    b30c:	e7ec      	b.n	b2e8 <z_abort_timeout+0x4c>
    b30e:	4c0a      	ldr	r4, [pc, #40]	; (b338 <z_abort_timeout+0x9c>)
    b310:	23b9      	movs	r3, #185	; 0xb9
    b312:	4622      	mov	r2, r4
    b314:	490c      	ldr	r1, [pc, #48]	; (b348 <z_abort_timeout+0xac>)
    b316:	480a      	ldr	r0, [pc, #40]	; (b340 <z_abort_timeout+0xa4>)
    b318:	f000 ff26 	bl	c168 <assert_print>
    b31c:	4905      	ldr	r1, [pc, #20]	; (b334 <z_abort_timeout+0x98>)
    b31e:	480b      	ldr	r0, [pc, #44]	; (b34c <z_abort_timeout+0xb0>)
    b320:	f000 ff22 	bl	c168 <assert_print>
    b324:	21b9      	movs	r1, #185	; 0xb9
    b326:	4620      	mov	r0, r4
    b328:	f000 ff17 	bl	c15a <assert_post_action>
    b32c:	e7e0      	b.n	b2f0 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    b32e:	4640      	mov	r0, r8
    b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b334:	20001274 	.word	0x20001274
    b338:	0000ddf4 	.word	0x0000ddf4
    b33c:	0000de54 	.word	0x0000de54
    b340:	0000d51c 	.word	0x0000d51c
    b344:	0000de6c 	.word	0x0000de6c
    b348:	0000de24 	.word	0x0000de24
    b34c:	0000de3c 	.word	0x0000de3c

0000b350 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    b350:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    b352:	2500      	movs	r5, #0
	__asm__ volatile(
    b354:	f04f 0320 	mov.w	r3, #32
    b358:	f3ef 8611 	mrs	r6, BASEPRI
    b35c:	f383 8812 	msr	BASEPRI_MAX, r3
    b360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b364:	481c      	ldr	r0, [pc, #112]	; (b3d8 <z_get_next_timeout_expiry+0x88>)
    b366:	f7fd fe4b 	bl	9000 <z_spin_lock_valid>
    b36a:	b128      	cbz	r0, b378 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    b36c:	481a      	ldr	r0, [pc, #104]	; (b3d8 <z_get_next_timeout_expiry+0x88>)
    b36e:	f7fd fe67 	bl	9040 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    b372:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    b376:	e014      	b.n	b3a2 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b378:	4c18      	ldr	r4, [pc, #96]	; (b3dc <z_get_next_timeout_expiry+0x8c>)
    b37a:	238e      	movs	r3, #142	; 0x8e
    b37c:	4622      	mov	r2, r4
    b37e:	4918      	ldr	r1, [pc, #96]	; (b3e0 <z_get_next_timeout_expiry+0x90>)
    b380:	4818      	ldr	r0, [pc, #96]	; (b3e4 <z_get_next_timeout_expiry+0x94>)
    b382:	f000 fef1 	bl	c168 <assert_print>
    b386:	4914      	ldr	r1, [pc, #80]	; (b3d8 <z_get_next_timeout_expiry+0x88>)
    b388:	4817      	ldr	r0, [pc, #92]	; (b3e8 <z_get_next_timeout_expiry+0x98>)
    b38a:	f000 feed 	bl	c168 <assert_print>
    b38e:	218e      	movs	r1, #142	; 0x8e
    b390:	4620      	mov	r0, r4
    b392:	f000 fee2 	bl	c15a <assert_post_action>
    b396:	e7e9      	b.n	b36c <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    b398:	f386 8811 	msr	BASEPRI, r6
    b39c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b3a0:	2501      	movs	r5, #1
    b3a2:	b9bd      	cbnz	r5, b3d4 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    b3a4:	f7ff fe70 	bl	b088 <next_timeout>
    b3a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b3aa:	480b      	ldr	r0, [pc, #44]	; (b3d8 <z_get_next_timeout_expiry+0x88>)
    b3ac:	f7fd fe38 	bl	9020 <z_spin_unlock_valid>
    b3b0:	2800      	cmp	r0, #0
    b3b2:	d1f1      	bne.n	b398 <z_get_next_timeout_expiry+0x48>
    b3b4:	4d09      	ldr	r5, [pc, #36]	; (b3dc <z_get_next_timeout_expiry+0x8c>)
    b3b6:	23b9      	movs	r3, #185	; 0xb9
    b3b8:	462a      	mov	r2, r5
    b3ba:	490c      	ldr	r1, [pc, #48]	; (b3ec <z_get_next_timeout_expiry+0x9c>)
    b3bc:	4809      	ldr	r0, [pc, #36]	; (b3e4 <z_get_next_timeout_expiry+0x94>)
    b3be:	f000 fed3 	bl	c168 <assert_print>
    b3c2:	4905      	ldr	r1, [pc, #20]	; (b3d8 <z_get_next_timeout_expiry+0x88>)
    b3c4:	480a      	ldr	r0, [pc, #40]	; (b3f0 <z_get_next_timeout_expiry+0xa0>)
    b3c6:	f000 fecf 	bl	c168 <assert_print>
    b3ca:	21b9      	movs	r1, #185	; 0xb9
    b3cc:	4628      	mov	r0, r5
    b3ce:	f000 fec4 	bl	c15a <assert_post_action>
    b3d2:	e7e1      	b.n	b398 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    b3d4:	4620      	mov	r0, r4
    b3d6:	bd70      	pop	{r4, r5, r6, pc}
    b3d8:	20001274 	.word	0x20001274
    b3dc:	0000ddf4 	.word	0x0000ddf4
    b3e0:	0000de54 	.word	0x0000de54
    b3e4:	0000d51c 	.word	0x0000d51c
    b3e8:	0000de6c 	.word	0x0000de6c
    b3ec:	0000de24 	.word	0x0000de24
    b3f0:	0000de3c 	.word	0x0000de3c

0000b3f4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3f8:	4606      	mov	r6, r0
    b3fa:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    b3fc:	2500      	movs	r5, #0
	__asm__ volatile(
    b3fe:	f04f 0320 	mov.w	r3, #32
    b402:	f3ef 8711 	mrs	r7, BASEPRI
    b406:	f383 8812 	msr	BASEPRI_MAX, r3
    b40a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b40e:	4825      	ldr	r0, [pc, #148]	; (b4a4 <z_set_timeout_expiry+0xb0>)
    b410:	f7fd fdf6 	bl	9000 <z_spin_lock_valid>
    b414:	b118      	cbz	r0, b41e <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    b416:	4823      	ldr	r0, [pc, #140]	; (b4a4 <z_set_timeout_expiry+0xb0>)
    b418:	f7fd fe12 	bl	9040 <z_spin_lock_set_owner>
	return k;
    b41c:	e01e      	b.n	b45c <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b41e:	4c22      	ldr	r4, [pc, #136]	; (b4a8 <z_set_timeout_expiry+0xb4>)
    b420:	238e      	movs	r3, #142	; 0x8e
    b422:	4622      	mov	r2, r4
    b424:	4921      	ldr	r1, [pc, #132]	; (b4ac <z_set_timeout_expiry+0xb8>)
    b426:	4822      	ldr	r0, [pc, #136]	; (b4b0 <z_set_timeout_expiry+0xbc>)
    b428:	f000 fe9e 	bl	c168 <assert_print>
    b42c:	491d      	ldr	r1, [pc, #116]	; (b4a4 <z_set_timeout_expiry+0xb0>)
    b42e:	4821      	ldr	r0, [pc, #132]	; (b4b4 <z_set_timeout_expiry+0xc0>)
    b430:	f000 fe9a 	bl	c168 <assert_print>
    b434:	218e      	movs	r1, #142	; 0x8e
    b436:	4620      	mov	r0, r4
    b438:	f000 fe8f 	bl	c15a <assert_post_action>
    b43c:	e7eb      	b.n	b416 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    b43e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    b440:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b444:	2801      	cmp	r0, #1
    b446:	dd00      	ble.n	b44a <z_set_timeout_expiry+0x56>
    b448:	b99c      	cbnz	r4, b472 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b44a:	4816      	ldr	r0, [pc, #88]	; (b4a4 <z_set_timeout_expiry+0xb0>)
    b44c:	f7fd fde8 	bl	9020 <z_spin_unlock_valid>
    b450:	b1b0      	cbz	r0, b480 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    b452:	f387 8811 	msr	BASEPRI, r7
    b456:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b45a:	2501      	movs	r5, #1
    b45c:	462c      	mov	r4, r5
    b45e:	b9fd      	cbnz	r5, b4a0 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    b460:	f7ff fe12 	bl	b088 <next_timeout>
			      || (ticks <= next_to);
    b464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b468:	d0e9      	beq.n	b43e <z_set_timeout_expiry+0x4a>
    b46a:	42b0      	cmp	r0, r6
    b46c:	dbe8      	blt.n	b440 <z_set_timeout_expiry+0x4c>
    b46e:	2401      	movs	r4, #1
    b470:	e7e6      	b.n	b440 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    b472:	4641      	mov	r1, r8
    b474:	42b0      	cmp	r0, r6
    b476:	bfa8      	it	ge
    b478:	4630      	movge	r0, r6
    b47a:	f7fb f9f7 	bl	686c <sys_clock_set_timeout>
    b47e:	e7e4      	b.n	b44a <z_set_timeout_expiry+0x56>
    b480:	4c09      	ldr	r4, [pc, #36]	; (b4a8 <z_set_timeout_expiry+0xb4>)
    b482:	23b9      	movs	r3, #185	; 0xb9
    b484:	4622      	mov	r2, r4
    b486:	490c      	ldr	r1, [pc, #48]	; (b4b8 <z_set_timeout_expiry+0xc4>)
    b488:	4809      	ldr	r0, [pc, #36]	; (b4b0 <z_set_timeout_expiry+0xbc>)
    b48a:	f000 fe6d 	bl	c168 <assert_print>
    b48e:	4905      	ldr	r1, [pc, #20]	; (b4a4 <z_set_timeout_expiry+0xb0>)
    b490:	480a      	ldr	r0, [pc, #40]	; (b4bc <z_set_timeout_expiry+0xc8>)
    b492:	f000 fe69 	bl	c168 <assert_print>
    b496:	21b9      	movs	r1, #185	; 0xb9
    b498:	4620      	mov	r0, r4
    b49a:	f000 fe5e 	bl	c15a <assert_post_action>
    b49e:	e7d8      	b.n	b452 <z_set_timeout_expiry+0x5e>
		}
	}
}
    b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4a4:	20001274 	.word	0x20001274
    b4a8:	0000ddf4 	.word	0x0000ddf4
    b4ac:	0000de54 	.word	0x0000de54
    b4b0:	0000d51c 	.word	0x0000d51c
    b4b4:	0000de6c 	.word	0x0000de6c
    b4b8:	0000de24 	.word	0x0000de24
    b4bc:	0000de3c 	.word	0x0000de3c

0000b4c0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    b4c0:	b570      	push	{r4, r5, r6, lr}
    b4c2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b4c4:	f7fe fd5e 	bl	9f84 <z_time_slice>
	__asm__ volatile(
    b4c8:	f04f 0320 	mov.w	r3, #32
    b4cc:	f3ef 8511 	mrs	r5, BASEPRI
    b4d0:	f383 8812 	msr	BASEPRI_MAX, r3
    b4d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4d8:	4854      	ldr	r0, [pc, #336]	; (b62c <sys_clock_announce+0x16c>)
    b4da:	f7fd fd91 	bl	9000 <z_spin_lock_valid>
    b4de:	b128      	cbz	r0, b4ec <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    b4e0:	4852      	ldr	r0, [pc, #328]	; (b62c <sys_clock_announce+0x16c>)
    b4e2:	f7fd fdad 	bl	9040 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b4e6:	4b52      	ldr	r3, [pc, #328]	; (b630 <sys_clock_announce+0x170>)
    b4e8:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b4ea:	e022      	b.n	b532 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4ec:	4e51      	ldr	r6, [pc, #324]	; (b634 <sys_clock_announce+0x174>)
    b4ee:	238e      	movs	r3, #142	; 0x8e
    b4f0:	4632      	mov	r2, r6
    b4f2:	4951      	ldr	r1, [pc, #324]	; (b638 <sys_clock_announce+0x178>)
    b4f4:	4851      	ldr	r0, [pc, #324]	; (b63c <sys_clock_announce+0x17c>)
    b4f6:	f000 fe37 	bl	c168 <assert_print>
    b4fa:	494c      	ldr	r1, [pc, #304]	; (b62c <sys_clock_announce+0x16c>)
    b4fc:	4850      	ldr	r0, [pc, #320]	; (b640 <sys_clock_announce+0x180>)
    b4fe:	f000 fe33 	bl	c168 <assert_print>
    b502:	218e      	movs	r1, #142	; 0x8e
    b504:	4630      	mov	r0, r6
    b506:	f000 fe28 	bl	c15a <assert_post_action>
    b50a:	e7e9      	b.n	b4e0 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b50c:	4e49      	ldr	r6, [pc, #292]	; (b634 <sys_clock_announce+0x174>)
    b50e:	23b9      	movs	r3, #185	; 0xb9
    b510:	4632      	mov	r2, r6
    b512:	494c      	ldr	r1, [pc, #304]	; (b644 <sys_clock_announce+0x184>)
    b514:	4849      	ldr	r0, [pc, #292]	; (b63c <sys_clock_announce+0x17c>)
    b516:	f000 fe27 	bl	c168 <assert_print>
    b51a:	4944      	ldr	r1, [pc, #272]	; (b62c <sys_clock_announce+0x16c>)
    b51c:	484a      	ldr	r0, [pc, #296]	; (b648 <sys_clock_announce+0x188>)
    b51e:	f000 fe23 	bl	c168 <assert_print>
    b522:	21b9      	movs	r1, #185	; 0xb9
    b524:	4630      	mov	r0, r6
    b526:	f000 fe18 	bl	c15a <assert_post_action>
    b52a:	e027      	b.n	b57c <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    b52c:	483f      	ldr	r0, [pc, #252]	; (b62c <sys_clock_announce+0x16c>)
    b52e:	f7fd fd87 	bl	9040 <z_spin_lock_set_owner>
    b532:	f7ff fd87 	bl	b044 <first>
    b536:	4604      	mov	r4, r0
    b538:	2800      	cmp	r0, #0
    b53a:	d043      	beq.n	b5c4 <sys_clock_announce+0x104>
    b53c:	6902      	ldr	r2, [r0, #16]
    b53e:	6941      	ldr	r1, [r0, #20]
    b540:	4b3b      	ldr	r3, [pc, #236]	; (b630 <sys_clock_announce+0x170>)
    b542:	681b      	ldr	r3, [r3, #0]
    b544:	17d8      	asrs	r0, r3, #31
    b546:	4293      	cmp	r3, r2
    b548:	eb70 0101 	sbcs.w	r1, r0, r1
    b54c:	db3a      	blt.n	b5c4 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b54e:	483f      	ldr	r0, [pc, #252]	; (b64c <sys_clock_announce+0x18c>)
    b550:	6801      	ldr	r1, [r0, #0]
    b552:	6846      	ldr	r6, [r0, #4]
    b554:	1889      	adds	r1, r1, r2
    b556:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    b55a:	6001      	str	r1, [r0, #0]
    b55c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    b55e:	1a9b      	subs	r3, r3, r2
    b560:	4a33      	ldr	r2, [pc, #204]	; (b630 <sys_clock_announce+0x170>)
    b562:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b564:	2200      	movs	r2, #0
    b566:	2300      	movs	r3, #0
    b568:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b56c:	4620      	mov	r0, r4
    b56e:	f001 fd5c 	bl	d02a <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b572:	482e      	ldr	r0, [pc, #184]	; (b62c <sys_clock_announce+0x16c>)
    b574:	f7fd fd54 	bl	9020 <z_spin_unlock_valid>
    b578:	2800      	cmp	r0, #0
    b57a:	d0c7      	beq.n	b50c <sys_clock_announce+0x4c>
	__asm__ volatile(
    b57c:	f385 8811 	msr	BASEPRI, r5
    b580:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b584:	68a3      	ldr	r3, [r4, #8]
    b586:	4620      	mov	r0, r4
    b588:	4798      	blx	r3
	__asm__ volatile(
    b58a:	f04f 0320 	mov.w	r3, #32
    b58e:	f3ef 8511 	mrs	r5, BASEPRI
    b592:	f383 8812 	msr	BASEPRI_MAX, r3
    b596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b59a:	4824      	ldr	r0, [pc, #144]	; (b62c <sys_clock_announce+0x16c>)
    b59c:	f7fd fd30 	bl	9000 <z_spin_lock_valid>
    b5a0:	2800      	cmp	r0, #0
    b5a2:	d1c3      	bne.n	b52c <sys_clock_announce+0x6c>
    b5a4:	4c23      	ldr	r4, [pc, #140]	; (b634 <sys_clock_announce+0x174>)
    b5a6:	238e      	movs	r3, #142	; 0x8e
    b5a8:	4622      	mov	r2, r4
    b5aa:	4923      	ldr	r1, [pc, #140]	; (b638 <sys_clock_announce+0x178>)
    b5ac:	4823      	ldr	r0, [pc, #140]	; (b63c <sys_clock_announce+0x17c>)
    b5ae:	f000 fddb 	bl	c168 <assert_print>
    b5b2:	491e      	ldr	r1, [pc, #120]	; (b62c <sys_clock_announce+0x16c>)
    b5b4:	4822      	ldr	r0, [pc, #136]	; (b640 <sys_clock_announce+0x180>)
    b5b6:	f000 fdd7 	bl	c168 <assert_print>
    b5ba:	218e      	movs	r1, #142	; 0x8e
    b5bc:	4620      	mov	r0, r4
    b5be:	f000 fdcc 	bl	c15a <assert_post_action>
    b5c2:	e7b3      	b.n	b52c <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b5c4:	b144      	cbz	r4, b5d8 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    b5c6:	4b1a      	ldr	r3, [pc, #104]	; (b630 <sys_clock_announce+0x170>)
    b5c8:	6819      	ldr	r1, [r3, #0]
    b5ca:	6923      	ldr	r3, [r4, #16]
    b5cc:	6962      	ldr	r2, [r4, #20]
    b5ce:	1a5b      	subs	r3, r3, r1
    b5d0:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    b5d4:	6123      	str	r3, [r4, #16]
    b5d6:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    b5d8:	4a1c      	ldr	r2, [pc, #112]	; (b64c <sys_clock_announce+0x18c>)
    b5da:	4e15      	ldr	r6, [pc, #84]	; (b630 <sys_clock_announce+0x170>)
    b5dc:	6830      	ldr	r0, [r6, #0]
    b5de:	6813      	ldr	r3, [r2, #0]
    b5e0:	6851      	ldr	r1, [r2, #4]
    b5e2:	181b      	adds	r3, r3, r0
    b5e4:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    b5e8:	6013      	str	r3, [r2, #0]
    b5ea:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    b5ec:	2400      	movs	r4, #0
    b5ee:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b5f0:	f7ff fd4a 	bl	b088 <next_timeout>
    b5f4:	4621      	mov	r1, r4
    b5f6:	f7fb f939 	bl	686c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b5fa:	480c      	ldr	r0, [pc, #48]	; (b62c <sys_clock_announce+0x16c>)
    b5fc:	f7fd fd10 	bl	9020 <z_spin_unlock_valid>
    b600:	b120      	cbz	r0, b60c <sys_clock_announce+0x14c>
	__asm__ volatile(
    b602:	f385 8811 	msr	BASEPRI, r5
    b606:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b60a:	bd70      	pop	{r4, r5, r6, pc}
    b60c:	4c09      	ldr	r4, [pc, #36]	; (b634 <sys_clock_announce+0x174>)
    b60e:	23b9      	movs	r3, #185	; 0xb9
    b610:	4622      	mov	r2, r4
    b612:	490c      	ldr	r1, [pc, #48]	; (b644 <sys_clock_announce+0x184>)
    b614:	4809      	ldr	r0, [pc, #36]	; (b63c <sys_clock_announce+0x17c>)
    b616:	f000 fda7 	bl	c168 <assert_print>
    b61a:	4904      	ldr	r1, [pc, #16]	; (b62c <sys_clock_announce+0x16c>)
    b61c:	480a      	ldr	r0, [pc, #40]	; (b648 <sys_clock_announce+0x188>)
    b61e:	f000 fda3 	bl	c168 <assert_print>
    b622:	21b9      	movs	r1, #185	; 0xb9
    b624:	4620      	mov	r0, r4
    b626:	f000 fd98 	bl	c15a <assert_post_action>
    b62a:	e7ea      	b.n	b602 <sys_clock_announce+0x142>
    b62c:	20001274 	.word	0x20001274
    b630:	20001270 	.word	0x20001270
    b634:	0000ddf4 	.word	0x0000ddf4
    b638:	0000de54 	.word	0x0000de54
    b63c:	0000d51c 	.word	0x0000d51c
    b640:	0000de6c 	.word	0x0000de6c
    b644:	0000de24 	.word	0x0000de24
    b648:	0000de3c 	.word	0x0000de3c
    b64c:	200006a0 	.word	0x200006a0

0000b650 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b652:	2600      	movs	r6, #0
	__asm__ volatile(
    b654:	f04f 0320 	mov.w	r3, #32
    b658:	f3ef 8711 	mrs	r7, BASEPRI
    b65c:	f383 8812 	msr	BASEPRI_MAX, r3
    b660:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b664:	481f      	ldr	r0, [pc, #124]	; (b6e4 <sys_clock_tick_get+0x94>)
    b666:	f7fd fccb 	bl	9000 <z_spin_lock_valid>
    b66a:	b128      	cbz	r0, b678 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    b66c:	481d      	ldr	r0, [pc, #116]	; (b6e4 <sys_clock_tick_get+0x94>)
    b66e:	f7fd fce7 	bl	9040 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    b672:	2400      	movs	r4, #0
    b674:	4625      	mov	r5, r4
	return k;
    b676:	e014      	b.n	b6a2 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b678:	4c1b      	ldr	r4, [pc, #108]	; (b6e8 <sys_clock_tick_get+0x98>)
    b67a:	238e      	movs	r3, #142	; 0x8e
    b67c:	4622      	mov	r2, r4
    b67e:	491b      	ldr	r1, [pc, #108]	; (b6ec <sys_clock_tick_get+0x9c>)
    b680:	481b      	ldr	r0, [pc, #108]	; (b6f0 <sys_clock_tick_get+0xa0>)
    b682:	f000 fd71 	bl	c168 <assert_print>
    b686:	4917      	ldr	r1, [pc, #92]	; (b6e4 <sys_clock_tick_get+0x94>)
    b688:	481a      	ldr	r0, [pc, #104]	; (b6f4 <sys_clock_tick_get+0xa4>)
    b68a:	f000 fd6d 	bl	c168 <assert_print>
    b68e:	218e      	movs	r1, #142	; 0x8e
    b690:	4620      	mov	r0, r4
    b692:	f000 fd62 	bl	c15a <assert_post_action>
    b696:	e7e9      	b.n	b66c <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    b698:	f387 8811 	msr	BASEPRI, r7
    b69c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b6a0:	2601      	movs	r6, #1
    b6a2:	b9e6      	cbnz	r6, b6de <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    b6a4:	f7fb f914 	bl	68d0 <sys_clock_elapsed>
    b6a8:	4b13      	ldr	r3, [pc, #76]	; (b6f8 <sys_clock_tick_get+0xa8>)
    b6aa:	681c      	ldr	r4, [r3, #0]
    b6ac:	685d      	ldr	r5, [r3, #4]
    b6ae:	1904      	adds	r4, r0, r4
    b6b0:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b6b4:	480b      	ldr	r0, [pc, #44]	; (b6e4 <sys_clock_tick_get+0x94>)
    b6b6:	f7fd fcb3 	bl	9020 <z_spin_unlock_valid>
    b6ba:	2800      	cmp	r0, #0
    b6bc:	d1ec      	bne.n	b698 <sys_clock_tick_get+0x48>
    b6be:	4e0a      	ldr	r6, [pc, #40]	; (b6e8 <sys_clock_tick_get+0x98>)
    b6c0:	23b9      	movs	r3, #185	; 0xb9
    b6c2:	4632      	mov	r2, r6
    b6c4:	490d      	ldr	r1, [pc, #52]	; (b6fc <sys_clock_tick_get+0xac>)
    b6c6:	480a      	ldr	r0, [pc, #40]	; (b6f0 <sys_clock_tick_get+0xa0>)
    b6c8:	f000 fd4e 	bl	c168 <assert_print>
    b6cc:	4905      	ldr	r1, [pc, #20]	; (b6e4 <sys_clock_tick_get+0x94>)
    b6ce:	480c      	ldr	r0, [pc, #48]	; (b700 <sys_clock_tick_get+0xb0>)
    b6d0:	f000 fd4a 	bl	c168 <assert_print>
    b6d4:	21b9      	movs	r1, #185	; 0xb9
    b6d6:	4630      	mov	r0, r6
    b6d8:	f000 fd3f 	bl	c15a <assert_post_action>
    b6dc:	e7dc      	b.n	b698 <sys_clock_tick_get+0x48>
	}
	return t;
}
    b6de:	4620      	mov	r0, r4
    b6e0:	4629      	mov	r1, r5
    b6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6e4:	20001274 	.word	0x20001274
    b6e8:	0000ddf4 	.word	0x0000ddf4
    b6ec:	0000de54 	.word	0x0000de54
    b6f0:	0000d51c 	.word	0x0000d51c
    b6f4:	0000de6c 	.word	0x0000de6c
    b6f8:	200006a0 	.word	0x200006a0
    b6fc:	0000de24 	.word	0x0000de24
    b700:	0000de3c 	.word	0x0000de3c

0000b704 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b704:	b570      	push	{r4, r5, r6, lr}
    b706:	4604      	mov	r4, r0
	__asm__ volatile(
    b708:	f04f 0320 	mov.w	r3, #32
    b70c:	f3ef 8611 	mrs	r6, BASEPRI
    b710:	f383 8812 	msr	BASEPRI_MAX, r3
    b714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b718:	4857      	ldr	r0, [pc, #348]	; (b878 <z_timer_expiration_handler+0x174>)
    b71a:	f7fd fc71 	bl	9000 <z_spin_lock_valid>
    b71e:	2800      	cmp	r0, #0
    b720:	d049      	beq.n	b7b6 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    b722:	4855      	ldr	r0, [pc, #340]	; (b878 <z_timer_expiration_handler+0x174>)
    b724:	f7fd fc8c 	bl	9040 <z_spin_lock_set_owner>
	return k;
    b728:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b72a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b72c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b72e:	ea52 0103 	orrs.w	r1, r2, r3
    b732:	d005      	beq.n	b740 <z_timer_expiration_handler+0x3c>
    b734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b738:	bf08      	it	eq
    b73a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b73e:	d14a      	bne.n	b7d6 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b740:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b742:	3301      	adds	r3, #1
    b744:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b746:	6a23      	ldr	r3, [r4, #32]
    b748:	b1db      	cbz	r3, b782 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b74a:	484b      	ldr	r0, [pc, #300]	; (b878 <z_timer_expiration_handler+0x174>)
    b74c:	f7fd fc68 	bl	9020 <z_spin_unlock_valid>
    b750:	2800      	cmp	r0, #0
    b752:	d047      	beq.n	b7e4 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    b754:	f386 8811 	msr	BASEPRI, r6
    b758:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b75c:	6a23      	ldr	r3, [r4, #32]
    b75e:	4620      	mov	r0, r4
    b760:	4798      	blx	r3
	__asm__ volatile(
    b762:	f04f 0320 	mov.w	r3, #32
    b766:	f3ef 8511 	mrs	r5, BASEPRI
    b76a:	f383 8812 	msr	BASEPRI_MAX, r3
    b76e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b772:	4841      	ldr	r0, [pc, #260]	; (b878 <z_timer_expiration_handler+0x174>)
    b774:	f7fd fc44 	bl	9000 <z_spin_lock_valid>
    b778:	2800      	cmp	r0, #0
    b77a:	d043      	beq.n	b804 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    b77c:	483e      	ldr	r0, [pc, #248]	; (b878 <z_timer_expiration_handler+0x174>)
    b77e:	f7fd fc5f 	bl	9040 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b782:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b786:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b788:	42a3      	cmp	r3, r4
    b78a:	d04b      	beq.n	b824 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b78c:	2c00      	cmp	r4, #0
    b78e:	d049      	beq.n	b824 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b790:	4620      	mov	r0, r4
    b792:	f7fe f9f7 	bl	9b84 <z_unpend_thread_no_timeout>
    b796:	2300      	movs	r3, #0
    b798:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b79c:	4836      	ldr	r0, [pc, #216]	; (b878 <z_timer_expiration_handler+0x174>)
    b79e:	f7fd fc3f 	bl	9020 <z_spin_unlock_valid>
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d057      	beq.n	b856 <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    b7a6:	f385 8811 	msr	BASEPRI, r5
    b7aa:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b7ae:	4620      	mov	r0, r4
    b7b0:	f7fe fce6 	bl	a180 <z_ready_thread>
}
    b7b4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7b6:	4d31      	ldr	r5, [pc, #196]	; (b87c <z_timer_expiration_handler+0x178>)
    b7b8:	238e      	movs	r3, #142	; 0x8e
    b7ba:	462a      	mov	r2, r5
    b7bc:	4930      	ldr	r1, [pc, #192]	; (b880 <z_timer_expiration_handler+0x17c>)
    b7be:	4831      	ldr	r0, [pc, #196]	; (b884 <z_timer_expiration_handler+0x180>)
    b7c0:	f000 fcd2 	bl	c168 <assert_print>
    b7c4:	492c      	ldr	r1, [pc, #176]	; (b878 <z_timer_expiration_handler+0x174>)
    b7c6:	4830      	ldr	r0, [pc, #192]	; (b888 <z_timer_expiration_handler+0x184>)
    b7c8:	f000 fcce 	bl	c168 <assert_print>
    b7cc:	218e      	movs	r1, #142	; 0x8e
    b7ce:	4628      	mov	r0, r5
    b7d0:	f000 fcc3 	bl	c15a <assert_post_action>
    b7d4:	e7a5      	b.n	b722 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b7d6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    b7da:	492c      	ldr	r1, [pc, #176]	; (b88c <z_timer_expiration_handler+0x188>)
    b7dc:	4620      	mov	r0, r4
    b7de:	f7ff fc79 	bl	b0d4 <z_add_timeout>
    b7e2:	e7ad      	b.n	b740 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7e4:	4d25      	ldr	r5, [pc, #148]	; (b87c <z_timer_expiration_handler+0x178>)
    b7e6:	23b9      	movs	r3, #185	; 0xb9
    b7e8:	462a      	mov	r2, r5
    b7ea:	4929      	ldr	r1, [pc, #164]	; (b890 <z_timer_expiration_handler+0x18c>)
    b7ec:	4825      	ldr	r0, [pc, #148]	; (b884 <z_timer_expiration_handler+0x180>)
    b7ee:	f000 fcbb 	bl	c168 <assert_print>
    b7f2:	4921      	ldr	r1, [pc, #132]	; (b878 <z_timer_expiration_handler+0x174>)
    b7f4:	4827      	ldr	r0, [pc, #156]	; (b894 <z_timer_expiration_handler+0x190>)
    b7f6:	f000 fcb7 	bl	c168 <assert_print>
    b7fa:	21b9      	movs	r1, #185	; 0xb9
    b7fc:	4628      	mov	r0, r5
    b7fe:	f000 fcac 	bl	c15a <assert_post_action>
    b802:	e7a7      	b.n	b754 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b804:	4e1d      	ldr	r6, [pc, #116]	; (b87c <z_timer_expiration_handler+0x178>)
    b806:	238e      	movs	r3, #142	; 0x8e
    b808:	4632      	mov	r2, r6
    b80a:	491d      	ldr	r1, [pc, #116]	; (b880 <z_timer_expiration_handler+0x17c>)
    b80c:	481d      	ldr	r0, [pc, #116]	; (b884 <z_timer_expiration_handler+0x180>)
    b80e:	f000 fcab 	bl	c168 <assert_print>
    b812:	4919      	ldr	r1, [pc, #100]	; (b878 <z_timer_expiration_handler+0x174>)
    b814:	481c      	ldr	r0, [pc, #112]	; (b888 <z_timer_expiration_handler+0x184>)
    b816:	f000 fca7 	bl	c168 <assert_print>
    b81a:	218e      	movs	r1, #142	; 0x8e
    b81c:	4630      	mov	r0, r6
    b81e:	f000 fc9c 	bl	c15a <assert_post_action>
    b822:	e7ab      	b.n	b77c <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b824:	4814      	ldr	r0, [pc, #80]	; (b878 <z_timer_expiration_handler+0x174>)
    b826:	f7fd fbfb 	bl	9020 <z_spin_unlock_valid>
    b82a:	b120      	cbz	r0, b836 <z_timer_expiration_handler+0x132>
    b82c:	f385 8811 	msr	BASEPRI, r5
    b830:	f3bf 8f6f 	isb	sy
		return;
    b834:	e7be      	b.n	b7b4 <z_timer_expiration_handler+0xb0>
    b836:	4c11      	ldr	r4, [pc, #68]	; (b87c <z_timer_expiration_handler+0x178>)
    b838:	23b9      	movs	r3, #185	; 0xb9
    b83a:	4622      	mov	r2, r4
    b83c:	4914      	ldr	r1, [pc, #80]	; (b890 <z_timer_expiration_handler+0x18c>)
    b83e:	4811      	ldr	r0, [pc, #68]	; (b884 <z_timer_expiration_handler+0x180>)
    b840:	f000 fc92 	bl	c168 <assert_print>
    b844:	490c      	ldr	r1, [pc, #48]	; (b878 <z_timer_expiration_handler+0x174>)
    b846:	4813      	ldr	r0, [pc, #76]	; (b894 <z_timer_expiration_handler+0x190>)
    b848:	f000 fc8e 	bl	c168 <assert_print>
    b84c:	21b9      	movs	r1, #185	; 0xb9
    b84e:	4620      	mov	r0, r4
    b850:	f000 fc83 	bl	c15a <assert_post_action>
    b854:	e7ea      	b.n	b82c <z_timer_expiration_handler+0x128>
    b856:	4e09      	ldr	r6, [pc, #36]	; (b87c <z_timer_expiration_handler+0x178>)
    b858:	23b9      	movs	r3, #185	; 0xb9
    b85a:	4632      	mov	r2, r6
    b85c:	490c      	ldr	r1, [pc, #48]	; (b890 <z_timer_expiration_handler+0x18c>)
    b85e:	4809      	ldr	r0, [pc, #36]	; (b884 <z_timer_expiration_handler+0x180>)
    b860:	f000 fc82 	bl	c168 <assert_print>
    b864:	4904      	ldr	r1, [pc, #16]	; (b878 <z_timer_expiration_handler+0x174>)
    b866:	480b      	ldr	r0, [pc, #44]	; (b894 <z_timer_expiration_handler+0x190>)
    b868:	f000 fc7e 	bl	c168 <assert_print>
    b86c:	21b9      	movs	r1, #185	; 0xb9
    b86e:	4630      	mov	r0, r6
    b870:	f000 fc73 	bl	c15a <assert_post_action>
    b874:	e797      	b.n	b7a6 <z_timer_expiration_handler+0xa2>
    b876:	bf00      	nop
    b878:	20001278 	.word	0x20001278
    b87c:	0000ddf4 	.word	0x0000ddf4
    b880:	0000de54 	.word	0x0000de54
    b884:	0000d51c 	.word	0x0000d51c
    b888:	0000de6c 	.word	0x0000de6c
    b88c:	0000b705 	.word	0x0000b705
    b890:	0000de24 	.word	0x0000de24
    b894:	0000de3c 	.word	0x0000de3c

0000b898 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b89c:	9f06      	ldr	r7, [sp, #24]
    b89e:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b8a6:	bf08      	it	eq
    b8a8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b8ac:	d02f      	beq.n	b90e <z_impl_k_timer_start+0x76>
    b8ae:	4605      	mov	r5, r0
    b8b0:	4614      	mov	r4, r2
    b8b2:	461e      	mov	r6, r3
    b8b4:	4611      	mov	r1, r2
    b8b6:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b8b8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    b8bc:	bf08      	it	eq
    b8be:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    b8c2:	d00d      	beq.n	b8e0 <z_impl_k_timer_start+0x48>
    b8c4:	ea57 0c08 	orrs.w	ip, r7, r8
    b8c8:	d00a      	beq.n	b8e0 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    b8ca:	f06f 0c01 	mvn.w	ip, #1
    b8ce:	ebbc 0c07 	subs.w	ip, ip, r7
    b8d2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b8d6:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b8da:	f1bc 0f00 	cmp.w	ip, #0
    b8de:	db18      	blt.n	b912 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b8e0:	f06f 0301 	mvn.w	r3, #1
    b8e4:	1a5b      	subs	r3, r3, r1
    b8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b8ea:	eb63 0300 	sbc.w	r3, r3, r0
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	db1a      	blt.n	b928 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b8f2:	4628      	mov	r0, r5
    b8f4:	f7ff fcd2 	bl	b29c <z_abort_timeout>
	timer->period = period;
    b8f8:	62af      	str	r7, [r5, #40]	; 0x28
    b8fa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    b8fe:	2300      	movs	r3, #0
    b900:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b902:	4622      	mov	r2, r4
    b904:	4633      	mov	r3, r6
    b906:	490e      	ldr	r1, [pc, #56]	; (b940 <z_impl_k_timer_start+0xa8>)
    b908:	4628      	mov	r0, r5
    b90a:	f7ff fbe3 	bl	b0d4 <z_add_timeout>
		     duration);
}
    b90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b912:	2f02      	cmp	r7, #2
    b914:	f178 0300 	sbcs.w	r3, r8, #0
    b918:	da02      	bge.n	b920 <z_impl_k_timer_start+0x88>
    b91a:	2702      	movs	r7, #2
    b91c:	f04f 0800 	mov.w	r8, #0
    b920:	3f01      	subs	r7, #1
    b922:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    b926:	e7db      	b.n	b8e0 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b928:	460c      	mov	r4, r1
    b92a:	4606      	mov	r6, r0
    b92c:	2901      	cmp	r1, #1
    b92e:	f170 0300 	sbcs.w	r3, r0, #0
    b932:	da01      	bge.n	b938 <z_impl_k_timer_start+0xa0>
    b934:	2401      	movs	r4, #1
    b936:	2600      	movs	r6, #0
    b938:	3c01      	subs	r4, #1
    b93a:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    b93e:	e7d8      	b.n	b8f2 <z_impl_k_timer_start+0x5a>
    b940:	0000b705 	.word	0x0000b705

0000b944 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    b944:	4b01      	ldr	r3, [pc, #4]	; (b94c <k_thread_system_pool_assign+0x8>)
    b946:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    b94a:	4770      	bx	lr
    b94c:	200001f8 	.word	0x200001f8

0000b950 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b950:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b952:	4a03      	ldr	r2, [pc, #12]	; (b960 <boot_banner+0x10>)
    b954:	4903      	ldr	r1, [pc, #12]	; (b964 <boot_banner+0x14>)
    b956:	4804      	ldr	r0, [pc, #16]	; (b968 <boot_banner+0x18>)
    b958:	f000 fa81 	bl	be5e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b95c:	bd08      	pop	{r3, pc}
    b95e:	bf00      	nop
    b960:	0000eb54 	.word	0x0000eb54
    b964:	0000f830 	.word	0x0000f830
    b968:	0000f840 	.word	0x0000f840

0000b96c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b96c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b96e:	4c0f      	ldr	r4, [pc, #60]	; (b9ac <statics_init+0x40>)
    b970:	e008      	b.n	b984 <statics_init+0x18>
    b972:	4b0f      	ldr	r3, [pc, #60]	; (b9b0 <statics_init+0x44>)
    b974:	429c      	cmp	r4, r3
    b976:	d217      	bcs.n	b9a8 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b978:	68a2      	ldr	r2, [r4, #8]
    b97a:	6861      	ldr	r1, [r4, #4]
    b97c:	4620      	mov	r0, r4
    b97e:	f001 fb94 	bl	d0aa <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b982:	3418      	adds	r4, #24
    b984:	4b0a      	ldr	r3, [pc, #40]	; (b9b0 <statics_init+0x44>)
    b986:	429c      	cmp	r4, r3
    b988:	d9f3      	bls.n	b972 <statics_init+0x6>
    b98a:	4d0a      	ldr	r5, [pc, #40]	; (b9b4 <statics_init+0x48>)
    b98c:	2318      	movs	r3, #24
    b98e:	462a      	mov	r2, r5
    b990:	4909      	ldr	r1, [pc, #36]	; (b9b8 <statics_init+0x4c>)
    b992:	480a      	ldr	r0, [pc, #40]	; (b9bc <statics_init+0x50>)
    b994:	f000 fbe8 	bl	c168 <assert_print>
    b998:	4809      	ldr	r0, [pc, #36]	; (b9c0 <statics_init+0x54>)
    b99a:	f000 fbe5 	bl	c168 <assert_print>
    b99e:	2118      	movs	r1, #24
    b9a0:	4628      	mov	r0, r5
    b9a2:	f000 fbda 	bl	c15a <assert_post_action>
    b9a6:	e7e4      	b.n	b972 <statics_init+0x6>
		}
	}
	return 0;
}
    b9a8:	2000      	movs	r0, #0
    b9aa:	bd38      	pop	{r3, r4, r5, pc}
    b9ac:	200001f8 	.word	0x200001f8
    b9b0:	20000210 	.word	0x20000210
    b9b4:	0000f868 	.word	0x0000f868
    b9b8:	0000f88c 	.word	0x0000f88c
    b9bc:	0000d51c 	.word	0x0000d51c
    b9c0:	0000f3b0 	.word	0x0000f3b0

0000b9c4 <nrf_cc3xx_platform_init_no_rng>:
    b9c4:	b510      	push	{r4, lr}
    b9c6:	4c0a      	ldr	r4, [pc, #40]	; (b9f0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b9c8:	6823      	ldr	r3, [r4, #0]
    b9ca:	b11b      	cbz	r3, b9d4 <nrf_cc3xx_platform_init_no_rng+0x10>
    b9cc:	2301      	movs	r3, #1
    b9ce:	6023      	str	r3, [r4, #0]
    b9d0:	2000      	movs	r0, #0
    b9d2:	bd10      	pop	{r4, pc}
    b9d4:	f000 f8ce 	bl	bb74 <CC_LibInitNoRng>
    b9d8:	2800      	cmp	r0, #0
    b9da:	d0f7      	beq.n	b9cc <nrf_cc3xx_platform_init_no_rng+0x8>
    b9dc:	3801      	subs	r0, #1
    b9de:	2806      	cmp	r0, #6
    b9e0:	d803      	bhi.n	b9ea <nrf_cc3xx_platform_init_no_rng+0x26>
    b9e2:	4b04      	ldr	r3, [pc, #16]	; (b9f4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b9e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b9e8:	bd10      	pop	{r4, pc}
    b9ea:	4803      	ldr	r0, [pc, #12]	; (b9f8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b9ec:	bd10      	pop	{r4, pc}
    b9ee:	bf00      	nop
    b9f0:	2000127c 	.word	0x2000127c
    b9f4:	0000f8a4 	.word	0x0000f8a4
    b9f8:	ffff8ffe 	.word	0xffff8ffe

0000b9fc <nrf_cc3xx_platform_abort>:
    b9fc:	f3bf 8f4f 	dsb	sy
    ba00:	4905      	ldr	r1, [pc, #20]	; (ba18 <nrf_cc3xx_platform_abort+0x1c>)
    ba02:	4b06      	ldr	r3, [pc, #24]	; (ba1c <nrf_cc3xx_platform_abort+0x20>)
    ba04:	68ca      	ldr	r2, [r1, #12]
    ba06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ba0a:	4313      	orrs	r3, r2
    ba0c:	60cb      	str	r3, [r1, #12]
    ba0e:	f3bf 8f4f 	dsb	sy
    ba12:	bf00      	nop
    ba14:	e7fd      	b.n	ba12 <nrf_cc3xx_platform_abort+0x16>
    ba16:	bf00      	nop
    ba18:	e000ed00 	.word	0xe000ed00
    ba1c:	05fa0004 	.word	0x05fa0004

0000ba20 <CC_PalAbort>:
    ba20:	b410      	push	{r4}
    ba22:	4b09      	ldr	r3, [pc, #36]	; (ba48 <CC_PalAbort+0x28>)
    ba24:	4909      	ldr	r1, [pc, #36]	; (ba4c <CC_PalAbort+0x2c>)
    ba26:	4c0a      	ldr	r4, [pc, #40]	; (ba50 <CC_PalAbort+0x30>)
    ba28:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    ba2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ba30:	6849      	ldr	r1, [r1, #4]
    ba32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    ba36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    ba3a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    ba3e:	2300      	movs	r3, #0
    ba40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    ba44:	bc10      	pop	{r4}
    ba46:	4708      	bx	r1
    ba48:	5002b000 	.word	0x5002b000
    ba4c:	2000017c 	.word	0x2000017c
    ba50:	5002a000 	.word	0x5002a000

0000ba54 <nrf_cc3xx_platform_set_abort>:
    ba54:	e9d0 1200 	ldrd	r1, r2, [r0]
    ba58:	4b01      	ldr	r3, [pc, #4]	; (ba60 <nrf_cc3xx_platform_set_abort+0xc>)
    ba5a:	e9c3 1200 	strd	r1, r2, [r3]
    ba5e:	4770      	bx	lr
    ba60:	2000017c 	.word	0x2000017c

0000ba64 <mutex_free>:
    ba64:	b510      	push	{r4, lr}
    ba66:	4604      	mov	r4, r0
    ba68:	b130      	cbz	r0, ba78 <mutex_free+0x14>
    ba6a:	6863      	ldr	r3, [r4, #4]
    ba6c:	06db      	lsls	r3, r3, #27
    ba6e:	d502      	bpl.n	ba76 <mutex_free+0x12>
    ba70:	2300      	movs	r3, #0
    ba72:	6023      	str	r3, [r4, #0]
    ba74:	6063      	str	r3, [r4, #4]
    ba76:	bd10      	pop	{r4, pc}
    ba78:	4b02      	ldr	r3, [pc, #8]	; (ba84 <mutex_free+0x20>)
    ba7a:	4803      	ldr	r0, [pc, #12]	; (ba88 <mutex_free+0x24>)
    ba7c:	685b      	ldr	r3, [r3, #4]
    ba7e:	4798      	blx	r3
    ba80:	e7f3      	b.n	ba6a <mutex_free+0x6>
    ba82:	bf00      	nop
    ba84:	2000017c 	.word	0x2000017c
    ba88:	0000f8c0 	.word	0x0000f8c0

0000ba8c <mutex_lock>:
    ba8c:	b1b0      	cbz	r0, babc <mutex_lock+0x30>
    ba8e:	6843      	ldr	r3, [r0, #4]
    ba90:	b193      	cbz	r3, bab8 <mutex_lock+0x2c>
    ba92:	06db      	lsls	r3, r3, #27
    ba94:	d50e      	bpl.n	bab4 <mutex_lock+0x28>
    ba96:	2301      	movs	r3, #1
    ba98:	e850 2f00 	ldrex	r2, [r0]
    ba9c:	4619      	mov	r1, r3
    ba9e:	e840 1c00 	strex	ip, r1, [r0]
    baa2:	f09c 0f00 	teq	ip, #0
    baa6:	d1f7      	bne.n	ba98 <mutex_lock+0xc>
    baa8:	2a01      	cmp	r2, #1
    baaa:	d0f5      	beq.n	ba98 <mutex_lock+0xc>
    baac:	f3bf 8f5f 	dmb	sy
    bab0:	2000      	movs	r0, #0
    bab2:	4770      	bx	lr
    bab4:	4803      	ldr	r0, [pc, #12]	; (bac4 <mutex_lock+0x38>)
    bab6:	4770      	bx	lr
    bab8:	4803      	ldr	r0, [pc, #12]	; (bac8 <mutex_lock+0x3c>)
    baba:	4770      	bx	lr
    babc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    bac0:	4770      	bx	lr
    bac2:	bf00      	nop
    bac4:	ffff8fe9 	.word	0xffff8fe9
    bac8:	ffff8fea 	.word	0xffff8fea

0000bacc <mutex_unlock>:
    bacc:	b168      	cbz	r0, baea <mutex_unlock+0x1e>
    bace:	6843      	ldr	r3, [r0, #4]
    bad0:	b13b      	cbz	r3, bae2 <mutex_unlock+0x16>
    bad2:	06db      	lsls	r3, r3, #27
    bad4:	d507      	bpl.n	bae6 <mutex_unlock+0x1a>
    bad6:	f3bf 8f5f 	dmb	sy
    bada:	2300      	movs	r3, #0
    badc:	6003      	str	r3, [r0, #0]
    bade:	4618      	mov	r0, r3
    bae0:	4770      	bx	lr
    bae2:	4803      	ldr	r0, [pc, #12]	; (baf0 <mutex_unlock+0x24>)
    bae4:	4770      	bx	lr
    bae6:	4803      	ldr	r0, [pc, #12]	; (baf4 <mutex_unlock+0x28>)
    bae8:	4770      	bx	lr
    baea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    baee:	4770      	bx	lr
    baf0:	ffff8fea 	.word	0xffff8fea
    baf4:	ffff8fe9 	.word	0xffff8fe9

0000baf8 <mutex_init>:
    baf8:	b510      	push	{r4, lr}
    bafa:	4604      	mov	r4, r0
    bafc:	b120      	cbz	r0, bb08 <mutex_init+0x10>
    bafe:	2200      	movs	r2, #0
    bb00:	2311      	movs	r3, #17
    bb02:	6022      	str	r2, [r4, #0]
    bb04:	6063      	str	r3, [r4, #4]
    bb06:	bd10      	pop	{r4, pc}
    bb08:	4801      	ldr	r0, [pc, #4]	; (bb10 <mutex_init+0x18>)
    bb0a:	f7ff ff89 	bl	ba20 <CC_PalAbort>
    bb0e:	e7f6      	b.n	bafe <mutex_init+0x6>
    bb10:	0000f8e8 	.word	0x0000f8e8

0000bb14 <nrf_cc3xx_platform_set_mutexes>:
    bb14:	b570      	push	{r4, r5, r6, lr}
    bb16:	e9d0 2300 	ldrd	r2, r3, [r0]
    bb1a:	4c13      	ldr	r4, [pc, #76]	; (bb68 <nrf_cc3xx_platform_set_mutexes+0x54>)
    bb1c:	4d13      	ldr	r5, [pc, #76]	; (bb6c <nrf_cc3xx_platform_set_mutexes+0x58>)
    bb1e:	6063      	str	r3, [r4, #4]
    bb20:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    bb24:	e9c4 3002 	strd	r3, r0, [r4, #8]
    bb28:	6022      	str	r2, [r4, #0]
    bb2a:	4b11      	ldr	r3, [pc, #68]	; (bb70 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    bb2c:	6808      	ldr	r0, [r1, #0]
    bb2e:	6018      	str	r0, [r3, #0]
    bb30:	6848      	ldr	r0, [r1, #4]
    bb32:	6058      	str	r0, [r3, #4]
    bb34:	6888      	ldr	r0, [r1, #8]
    bb36:	6098      	str	r0, [r3, #8]
    bb38:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    bb3c:	60d8      	str	r0, [r3, #12]
    bb3e:	6119      	str	r1, [r3, #16]
    bb40:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    bb44:	06db      	lsls	r3, r3, #27
    bb46:	d50d      	bpl.n	bb64 <nrf_cc3xx_platform_set_mutexes+0x50>
    bb48:	2300      	movs	r3, #0
    bb4a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    bb4e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    bb52:	f505 708a 	add.w	r0, r5, #276	; 0x114
    bb56:	4790      	blx	r2
    bb58:	6823      	ldr	r3, [r4, #0]
    bb5a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    bb5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb62:	4718      	bx	r3
    bb64:	bd70      	pop	{r4, r5, r6, pc}
    bb66:	bf00      	nop
    bb68:	2000018c 	.word	0x2000018c
    bb6c:	20001294 	.word	0x20001294
    bb70:	2000019c 	.word	0x2000019c

0000bb74 <CC_LibInitNoRng>:
    bb74:	b538      	push	{r3, r4, r5, lr}
    bb76:	f000 f82f 	bl	bbd8 <CC_HalInit>
    bb7a:	b120      	cbz	r0, bb86 <CC_LibInitNoRng+0x12>
    bb7c:	2403      	movs	r4, #3
    bb7e:	f000 f863 	bl	bc48 <CC_PalTerminate>
    bb82:	4620      	mov	r0, r4
    bb84:	bd38      	pop	{r3, r4, r5, pc}
    bb86:	f000 f831 	bl	bbec <CC_PalInit>
    bb8a:	b998      	cbnz	r0, bbb4 <CC_LibInitNoRng+0x40>
    bb8c:	f000 f8ac 	bl	bce8 <CC_PalPowerSaveModeSelect>
    bb90:	b998      	cbnz	r0, bbba <CC_LibInitNoRng+0x46>
    bb92:	4d0f      	ldr	r5, [pc, #60]	; (bbd0 <CC_LibInitNoRng+0x5c>)
    bb94:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    bb98:	0e1b      	lsrs	r3, r3, #24
    bb9a:	2bf0      	cmp	r3, #240	; 0xf0
    bb9c:	d108      	bne.n	bbb0 <CC_LibInitNoRng+0x3c>
    bb9e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    bba2:	4b0c      	ldr	r3, [pc, #48]	; (bbd4 <CC_LibInitNoRng+0x60>)
    bba4:	429a      	cmp	r2, r3
    bba6:	d00a      	beq.n	bbbe <CC_LibInitNoRng+0x4a>
    bba8:	2407      	movs	r4, #7
    bbaa:	f000 f817 	bl	bbdc <CC_HalTerminate>
    bbae:	e7e6      	b.n	bb7e <CC_LibInitNoRng+0xa>
    bbb0:	2406      	movs	r4, #6
    bbb2:	e7fa      	b.n	bbaa <CC_LibInitNoRng+0x36>
    bbb4:	2404      	movs	r4, #4
    bbb6:	4620      	mov	r0, r4
    bbb8:	bd38      	pop	{r3, r4, r5, pc}
    bbba:	2400      	movs	r4, #0
    bbbc:	e7f5      	b.n	bbaa <CC_LibInitNoRng+0x36>
    bbbe:	2001      	movs	r0, #1
    bbc0:	f000 f892 	bl	bce8 <CC_PalPowerSaveModeSelect>
    bbc4:	4604      	mov	r4, r0
    bbc6:	2800      	cmp	r0, #0
    bbc8:	d1f7      	bne.n	bbba <CC_LibInitNoRng+0x46>
    bbca:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    bbce:	e7d8      	b.n	bb82 <CC_LibInitNoRng+0xe>
    bbd0:	5002b000 	.word	0x5002b000
    bbd4:	20e00000 	.word	0x20e00000

0000bbd8 <CC_HalInit>:
    bbd8:	2000      	movs	r0, #0
    bbda:	4770      	bx	lr

0000bbdc <CC_HalTerminate>:
    bbdc:	2000      	movs	r0, #0
    bbde:	4770      	bx	lr

0000bbe0 <CC_HalMaskInterrupt>:
    bbe0:	4b01      	ldr	r3, [pc, #4]	; (bbe8 <CC_HalMaskInterrupt+0x8>)
    bbe2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    bbe6:	4770      	bx	lr
    bbe8:	5002b000 	.word	0x5002b000

0000bbec <CC_PalInit>:
    bbec:	b510      	push	{r4, lr}
    bbee:	4811      	ldr	r0, [pc, #68]	; (bc34 <CC_PalInit+0x48>)
    bbf0:	f000 f848 	bl	bc84 <CC_PalMutexCreate>
    bbf4:	b100      	cbz	r0, bbf8 <CC_PalInit+0xc>
    bbf6:	bd10      	pop	{r4, pc}
    bbf8:	480f      	ldr	r0, [pc, #60]	; (bc38 <CC_PalInit+0x4c>)
    bbfa:	f000 f843 	bl	bc84 <CC_PalMutexCreate>
    bbfe:	2800      	cmp	r0, #0
    bc00:	d1f9      	bne.n	bbf6 <CC_PalInit+0xa>
    bc02:	4c0e      	ldr	r4, [pc, #56]	; (bc3c <CC_PalInit+0x50>)
    bc04:	4620      	mov	r0, r4
    bc06:	f000 f83d 	bl	bc84 <CC_PalMutexCreate>
    bc0a:	2800      	cmp	r0, #0
    bc0c:	d1f3      	bne.n	bbf6 <CC_PalInit+0xa>
    bc0e:	4b0c      	ldr	r3, [pc, #48]	; (bc40 <CC_PalInit+0x54>)
    bc10:	480c      	ldr	r0, [pc, #48]	; (bc44 <CC_PalInit+0x58>)
    bc12:	601c      	str	r4, [r3, #0]
    bc14:	f000 f836 	bl	bc84 <CC_PalMutexCreate>
    bc18:	4601      	mov	r1, r0
    bc1a:	2800      	cmp	r0, #0
    bc1c:	d1eb      	bne.n	bbf6 <CC_PalInit+0xa>
    bc1e:	f000 f82d 	bl	bc7c <CC_PalDmaInit>
    bc22:	4604      	mov	r4, r0
    bc24:	b108      	cbz	r0, bc2a <CC_PalInit+0x3e>
    bc26:	4620      	mov	r0, r4
    bc28:	bd10      	pop	{r4, pc}
    bc2a:	f000 f83f 	bl	bcac <CC_PalPowerSaveModeInit>
    bc2e:	4620      	mov	r0, r4
    bc30:	e7fa      	b.n	bc28 <CC_PalInit+0x3c>
    bc32:	bf00      	nop
    bc34:	200001d4 	.word	0x200001d4
    bc38:	200001c8 	.word	0x200001c8
    bc3c:	200001d0 	.word	0x200001d0
    bc40:	200001d8 	.word	0x200001d8
    bc44:	200001cc 	.word	0x200001cc

0000bc48 <CC_PalTerminate>:
    bc48:	b508      	push	{r3, lr}
    bc4a:	4808      	ldr	r0, [pc, #32]	; (bc6c <CC_PalTerminate+0x24>)
    bc4c:	f000 f824 	bl	bc98 <CC_PalMutexDestroy>
    bc50:	4807      	ldr	r0, [pc, #28]	; (bc70 <CC_PalTerminate+0x28>)
    bc52:	f000 f821 	bl	bc98 <CC_PalMutexDestroy>
    bc56:	4807      	ldr	r0, [pc, #28]	; (bc74 <CC_PalTerminate+0x2c>)
    bc58:	f000 f81e 	bl	bc98 <CC_PalMutexDestroy>
    bc5c:	4806      	ldr	r0, [pc, #24]	; (bc78 <CC_PalTerminate+0x30>)
    bc5e:	f000 f81b 	bl	bc98 <CC_PalMutexDestroy>
    bc62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bc66:	f000 b80b 	b.w	bc80 <CC_PalDmaTerminate>
    bc6a:	bf00      	nop
    bc6c:	200001d4 	.word	0x200001d4
    bc70:	200001c8 	.word	0x200001c8
    bc74:	200001d0 	.word	0x200001d0
    bc78:	200001cc 	.word	0x200001cc

0000bc7c <CC_PalDmaInit>:
    bc7c:	2000      	movs	r0, #0
    bc7e:	4770      	bx	lr

0000bc80 <CC_PalDmaTerminate>:
    bc80:	4770      	bx	lr
    bc82:	bf00      	nop

0000bc84 <CC_PalMutexCreate>:
    bc84:	b508      	push	{r3, lr}
    bc86:	4b03      	ldr	r3, [pc, #12]	; (bc94 <CC_PalMutexCreate+0x10>)
    bc88:	6802      	ldr	r2, [r0, #0]
    bc8a:	681b      	ldr	r3, [r3, #0]
    bc8c:	6810      	ldr	r0, [r2, #0]
    bc8e:	4798      	blx	r3
    bc90:	2000      	movs	r0, #0
    bc92:	bd08      	pop	{r3, pc}
    bc94:	2000018c 	.word	0x2000018c

0000bc98 <CC_PalMutexDestroy>:
    bc98:	b508      	push	{r3, lr}
    bc9a:	4b03      	ldr	r3, [pc, #12]	; (bca8 <CC_PalMutexDestroy+0x10>)
    bc9c:	6802      	ldr	r2, [r0, #0]
    bc9e:	685b      	ldr	r3, [r3, #4]
    bca0:	6810      	ldr	r0, [r2, #0]
    bca2:	4798      	blx	r3
    bca4:	2000      	movs	r0, #0
    bca6:	bd08      	pop	{r3, pc}
    bca8:	2000018c 	.word	0x2000018c

0000bcac <CC_PalPowerSaveModeInit>:
    bcac:	b570      	push	{r4, r5, r6, lr}
    bcae:	4c09      	ldr	r4, [pc, #36]	; (bcd4 <CC_PalPowerSaveModeInit+0x28>)
    bcb0:	4d09      	ldr	r5, [pc, #36]	; (bcd8 <CC_PalPowerSaveModeInit+0x2c>)
    bcb2:	6920      	ldr	r0, [r4, #16]
    bcb4:	68ab      	ldr	r3, [r5, #8]
    bcb6:	4798      	blx	r3
    bcb8:	b118      	cbz	r0, bcc2 <CC_PalPowerSaveModeInit+0x16>
    bcba:	4b08      	ldr	r3, [pc, #32]	; (bcdc <CC_PalPowerSaveModeInit+0x30>)
    bcbc:	4808      	ldr	r0, [pc, #32]	; (bce0 <CC_PalPowerSaveModeInit+0x34>)
    bcbe:	685b      	ldr	r3, [r3, #4]
    bcc0:	4798      	blx	r3
    bcc2:	4a08      	ldr	r2, [pc, #32]	; (bce4 <CC_PalPowerSaveModeInit+0x38>)
    bcc4:	68eb      	ldr	r3, [r5, #12]
    bcc6:	6920      	ldr	r0, [r4, #16]
    bcc8:	2100      	movs	r1, #0
    bcca:	6011      	str	r1, [r2, #0]
    bccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bcd0:	4718      	bx	r3
    bcd2:	bf00      	nop
    bcd4:	2000019c 	.word	0x2000019c
    bcd8:	2000018c 	.word	0x2000018c
    bcdc:	2000017c 	.word	0x2000017c
    bce0:	0000f90c 	.word	0x0000f90c
    bce4:	20001290 	.word	0x20001290

0000bce8 <CC_PalPowerSaveModeSelect>:
    bce8:	b570      	push	{r4, r5, r6, lr}
    bcea:	4d1b      	ldr	r5, [pc, #108]	; (bd58 <CC_PalPowerSaveModeSelect+0x70>)
    bcec:	4e1b      	ldr	r6, [pc, #108]	; (bd5c <CC_PalPowerSaveModeSelect+0x74>)
    bcee:	4604      	mov	r4, r0
    bcf0:	68b2      	ldr	r2, [r6, #8]
    bcf2:	6928      	ldr	r0, [r5, #16]
    bcf4:	4790      	blx	r2
    bcf6:	b9f8      	cbnz	r0, bd38 <CC_PalPowerSaveModeSelect+0x50>
    bcf8:	b15c      	cbz	r4, bd12 <CC_PalPowerSaveModeSelect+0x2a>
    bcfa:	4c19      	ldr	r4, [pc, #100]	; (bd60 <CC_PalPowerSaveModeSelect+0x78>)
    bcfc:	6823      	ldr	r3, [r4, #0]
    bcfe:	b1b3      	cbz	r3, bd2e <CC_PalPowerSaveModeSelect+0x46>
    bd00:	2b01      	cmp	r3, #1
    bd02:	d01b      	beq.n	bd3c <CC_PalPowerSaveModeSelect+0x54>
    bd04:	3b01      	subs	r3, #1
    bd06:	6023      	str	r3, [r4, #0]
    bd08:	6928      	ldr	r0, [r5, #16]
    bd0a:	68f3      	ldr	r3, [r6, #12]
    bd0c:	4798      	blx	r3
    bd0e:	2000      	movs	r0, #0
    bd10:	bd70      	pop	{r4, r5, r6, pc}
    bd12:	4c13      	ldr	r4, [pc, #76]	; (bd60 <CC_PalPowerSaveModeSelect+0x78>)
    bd14:	6821      	ldr	r1, [r4, #0]
    bd16:	b941      	cbnz	r1, bd2a <CC_PalPowerSaveModeSelect+0x42>
    bd18:	4b12      	ldr	r3, [pc, #72]	; (bd64 <CC_PalPowerSaveModeSelect+0x7c>)
    bd1a:	2201      	movs	r2, #1
    bd1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    bd20:	4a11      	ldr	r2, [pc, #68]	; (bd68 <CC_PalPowerSaveModeSelect+0x80>)
    bd22:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    bd26:	2b00      	cmp	r3, #0
    bd28:	d1fb      	bne.n	bd22 <CC_PalPowerSaveModeSelect+0x3a>
    bd2a:	3101      	adds	r1, #1
    bd2c:	6021      	str	r1, [r4, #0]
    bd2e:	68f3      	ldr	r3, [r6, #12]
    bd30:	6928      	ldr	r0, [r5, #16]
    bd32:	4798      	blx	r3
    bd34:	2000      	movs	r0, #0
    bd36:	bd70      	pop	{r4, r5, r6, pc}
    bd38:	480c      	ldr	r0, [pc, #48]	; (bd6c <CC_PalPowerSaveModeSelect+0x84>)
    bd3a:	bd70      	pop	{r4, r5, r6, pc}
    bd3c:	4a0a      	ldr	r2, [pc, #40]	; (bd68 <CC_PalPowerSaveModeSelect+0x80>)
    bd3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    bd42:	2b00      	cmp	r3, #0
    bd44:	d1fb      	bne.n	bd3e <CC_PalPowerSaveModeSelect+0x56>
    bd46:	4a07      	ldr	r2, [pc, #28]	; (bd64 <CC_PalPowerSaveModeSelect+0x7c>)
    bd48:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    bd4c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    bd50:	f7ff ff46 	bl	bbe0 <CC_HalMaskInterrupt>
    bd54:	6823      	ldr	r3, [r4, #0]
    bd56:	e7d5      	b.n	bd04 <CC_PalPowerSaveModeSelect+0x1c>
    bd58:	2000019c 	.word	0x2000019c
    bd5c:	2000018c 	.word	0x2000018c
    bd60:	20001290 	.word	0x20001290
    bd64:	5002a000 	.word	0x5002a000
    bd68:	5002b000 	.word	0x5002b000
    bd6c:	ffff8fe9 	.word	0xffff8fe9

0000bd70 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    bd70:	4770      	bx	lr

0000bd72 <gpio_pin_configure_dt>:
{
    bd72:	b508      	push	{r3, lr}
    bd74:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    bd76:	6800      	ldr	r0, [r0, #0]
    bd78:	f893 c004 	ldrb.w	ip, [r3, #4]
				  spec->dt_flags | extra_flags);
    bd7c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    bd7e:	430a      	orrs	r2, r1
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    bd80:	4661      	mov	r1, ip
    bd82:	f7f4 fd45 	bl	810 <z_impl_gpio_pin_configure>
}
    bd86:	bd08      	pop	{r3, pc}

0000bd88 <precedentsAverage>:


int precedentsAverage(uint16_t *precedents, uint16_t current_read, uint16_t precedents_size)
{
    int sum = 0;
    for (uint16_t i = 0; i < precedents_size; i++)
    bd88:	2300      	movs	r3, #0
    int sum = 0;
    bd8a:	469c      	mov	ip, r3
    for (uint16_t i = 0; i < precedents_size; i++)
    bd8c:	4293      	cmp	r3, r2
    bd8e:	d20e      	bcs.n	bdae <precedentsAverage+0x26>
{
    bd90:	b500      	push	{lr}
        sum += precedents[i];
    bd92:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
    bd96:	44f4      	add	ip, lr
    for (uint16_t i = 0; i < precedents_size; i++)
    bd98:	3301      	adds	r3, #1
    bd9a:	b29b      	uxth	r3, r3
    bd9c:	4293      	cmp	r3, r2
    bd9e:	d3f8      	bcc.n	bd92 <precedentsAverage+0xa>
    return (sum + current_read) / (precedents_size + 1);
    bda0:	eb01 000c 	add.w	r0, r1, ip
    bda4:	3201      	adds	r2, #1
}
    bda6:	fb90 f0f2 	sdiv	r0, r0, r2
    bdaa:	f85d fb04 	ldr.w	pc, [sp], #4
    return (sum + current_read) / (precedents_size + 1);
    bdae:	18c8      	adds	r0, r1, r3
    bdb0:	3201      	adds	r2, #1
}
    bdb2:	fb90 f0f2 	sdiv	r0, r0, r2
    bdb6:	4770      	bx	lr

0000bdb8 <cbprintf_via_va_list>:
{
    bdb8:	b510      	push	{r4, lr}
    bdba:	460c      	mov	r4, r1
    bdbc:	4611      	mov	r1, r2
    bdbe:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    bdc0:	9b02      	ldr	r3, [sp, #8]
    bdc2:	47a0      	blx	r4
}
    bdc4:	bd10      	pop	{r4, pc}

0000bdc6 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    bdc6:	b353      	cbz	r3, be1e <cbpprintf_external+0x58>
{
    bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdcc:	b082      	sub	sp, #8
    bdce:	4607      	mov	r7, r0
    bdd0:	4688      	mov	r8, r1
    bdd2:	4691      	mov	r9, r2
    bdd4:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    bdd6:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    bdd8:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    bdda:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    bddc:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    bdde:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bde2:	441c      	add	r4, r3
    bde4:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    bde6:	f04f 0a00 	mov.w	sl, #0
    bdea:	e00a      	b.n	be02 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    bdec:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    bdf0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    bdf4:	4620      	mov	r0, r4
    bdf6:	f000 fb31 	bl	c45c <strlen>
    bdfa:	3001      	adds	r0, #1
    bdfc:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    bdfe:	f10a 0a01 	add.w	sl, sl, #1
    be02:	45b2      	cmp	sl, r6
    be04:	d3f2      	bcc.n	bdec <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    be06:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    be0a:	9300      	str	r3, [sp, #0]
    be0c:	686b      	ldr	r3, [r5, #4]
    be0e:	464a      	mov	r2, r9
    be10:	4641      	mov	r1, r8
    be12:	4638      	mov	r0, r7
    be14:	f7ff ffd0 	bl	bdb8 <cbprintf_via_va_list>
}
    be18:	b002      	add	sp, #8
    be1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    be1e:	f06f 0015 	mvn.w	r0, #21
}
    be22:	4770      	bx	lr

0000be24 <sys_notify_validate>:
	if (notify == NULL) {
    be24:	4602      	mov	r2, r0
    be26:	b158      	cbz	r0, be40 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    be28:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    be2a:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    be2e:	2b01      	cmp	r3, #1
    be30:	d003      	beq.n	be3a <sys_notify_validate+0x16>
    be32:	2b03      	cmp	r3, #3
    be34:	d107      	bne.n	be46 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    be36:	6803      	ldr	r3, [r0, #0]
    be38:	b143      	cbz	r3, be4c <sys_notify_validate+0x28>
		notify->result = 0;
    be3a:	2000      	movs	r0, #0
    be3c:	6090      	str	r0, [r2, #8]
    be3e:	4770      	bx	lr
		return -EINVAL;
    be40:	f06f 0015 	mvn.w	r0, #21
    be44:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    be46:	f06f 0015 	mvn.w	r0, #21
    be4a:	4770      	bx	lr
			rv = -EINVAL;
    be4c:	f06f 0015 	mvn.w	r0, #21
}
    be50:	4770      	bx	lr

0000be52 <arch_printk_char_out>:
}
    be52:	2000      	movs	r0, #0
    be54:	4770      	bx	lr

0000be56 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    be56:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    be58:	f000 f99d 	bl	c196 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    be5c:	bd08      	pop	{r3, pc}

0000be5e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    be5e:	b40f      	push	{r0, r1, r2, r3}
    be60:	b500      	push	{lr}
    be62:	b083      	sub	sp, #12
    be64:	a904      	add	r1, sp, #16
    be66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    be6a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    be6c:	f7ff fff3 	bl	be56 <vprintk>

	va_end(ap);
}
    be70:	b003      	add	sp, #12
    be72:	f85d eb04 	ldr.w	lr, [sp], #4
    be76:	b004      	add	sp, #16
    be78:	4770      	bx	lr

0000be7a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    be7a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    be7e:	8b81      	ldrh	r1, [r0, #28]
    be80:	f021 0107 	bic.w	r1, r1, #7
    be84:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    be86:	8381      	strh	r1, [r0, #28]
}
    be88:	4770      	bx	lr

0000be8a <notify_monitors>:
{
    be8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be8e:	4606      	mov	r6, r0
    be90:	460f      	mov	r7, r1
    be92:	4690      	mov	r8, r2
	return list->head;
    be94:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    be96:	b119      	cbz	r1, bea0 <notify_monitors+0x16>
    be98:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    be9a:	b131      	cbz	r1, beaa <notify_monitors+0x20>
	return node->next;
    be9c:	680c      	ldr	r4, [r1, #0]
    be9e:	e004      	b.n	beaa <notify_monitors+0x20>
    bea0:	460c      	mov	r4, r1
    bea2:	e002      	b.n	beaa <notify_monitors+0x20>
    bea4:	4623      	mov	r3, r4
    bea6:	4621      	mov	r1, r4
    bea8:	461c      	mov	r4, r3
    beaa:	b159      	cbz	r1, bec4 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    beac:	684d      	ldr	r5, [r1, #4]
    beae:	4643      	mov	r3, r8
    beb0:	463a      	mov	r2, r7
    beb2:	4630      	mov	r0, r6
    beb4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    beb6:	2c00      	cmp	r4, #0
    beb8:	d0f4      	beq.n	bea4 <notify_monitors+0x1a>
    beba:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    bebc:	2c00      	cmp	r4, #0
    bebe:	d0f2      	beq.n	bea6 <notify_monitors+0x1c>
	return node->next;
    bec0:	6823      	ldr	r3, [r4, #0]
    bec2:	e7f0      	b.n	bea6 <notify_monitors+0x1c>
}
    bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bec8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bec8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    beca:	f013 0307 	ands.w	r3, r3, #7
    bece:	d103      	bne.n	bed8 <process_recheck+0x10>
	return list->head;
    bed0:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    bed2:	b10a      	cbz	r2, bed8 <process_recheck+0x10>
		evt = EVT_START;
    bed4:	2003      	movs	r0, #3
    bed6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bed8:	2b02      	cmp	r3, #2
    beda:	d003      	beq.n	bee4 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    bedc:	2b01      	cmp	r3, #1
    bede:	d006      	beq.n	beee <process_recheck+0x26>
	int evt = EVT_NOP;
    bee0:	2000      	movs	r0, #0
    bee2:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    bee4:	8bc2      	ldrh	r2, [r0, #30]
    bee6:	2a00      	cmp	r2, #0
    bee8:	d1f8      	bne.n	bedc <process_recheck+0x14>
		evt = EVT_STOP;
    beea:	2004      	movs	r0, #4
    beec:	4770      	bx	lr
    beee:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    bef0:	b10b      	cbz	r3, bef6 <process_recheck+0x2e>
		evt = EVT_RESET;
    bef2:	2005      	movs	r0, #5
}
    bef4:	4770      	bx	lr
	int evt = EVT_NOP;
    bef6:	2000      	movs	r0, #0
    bef8:	4770      	bx	lr

0000befa <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    befa:	b158      	cbz	r0, bf14 <validate_args+0x1a>
{
    befc:	b510      	push	{r4, lr}
    befe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bf00:	b159      	cbz	r1, bf1a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    bf02:	1d08      	adds	r0, r1, #4
    bf04:	f7ff ff8e 	bl	be24 <sys_notify_validate>
	if ((rv == 0)
    bf08:	b918      	cbnz	r0, bf12 <validate_args+0x18>
	    && ((cli->notify.flags
    bf0a:	68a3      	ldr	r3, [r4, #8]
    bf0c:	f033 0303 	bics.w	r3, r3, #3
    bf10:	d106      	bne.n	bf20 <validate_args+0x26>
}
    bf12:	bd10      	pop	{r4, pc}
		return -EINVAL;
    bf14:	f06f 0015 	mvn.w	r0, #21
}
    bf18:	4770      	bx	lr
		return -EINVAL;
    bf1a:	f06f 0015 	mvn.w	r0, #21
    bf1e:	e7f8      	b.n	bf12 <validate_args+0x18>
		rv = -EINVAL;
    bf20:	f06f 0015 	mvn.w	r0, #21
    bf24:	e7f5      	b.n	bf12 <validate_args+0x18>

0000bf26 <notify_one>:
{
    bf26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf2a:	4607      	mov	r7, r0
    bf2c:	460c      	mov	r4, r1
    bf2e:	4616      	mov	r6, r2
    bf30:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bf32:	4619      	mov	r1, r3
    bf34:	1d20      	adds	r0, r4, #4
    bf36:	f7f6 fa13 	bl	2360 <sys_notify_finalize>
	if (cb) {
    bf3a:	b128      	cbz	r0, bf48 <notify_one+0x22>
    bf3c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    bf3e:	462b      	mov	r3, r5
    bf40:	4632      	mov	r2, r6
    bf42:	4621      	mov	r1, r4
    bf44:	4638      	mov	r0, r7
    bf46:	47c0      	blx	r8
}
    bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bf4c <notify_all>:
{
    bf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf50:	4680      	mov	r8, r0
    bf52:	460c      	mov	r4, r1
    bf54:	4617      	mov	r7, r2
    bf56:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    bf58:	e004      	b.n	bf64 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    bf5a:	4633      	mov	r3, r6
    bf5c:	463a      	mov	r2, r7
    bf5e:	4640      	mov	r0, r8
    bf60:	f7ff ffe1 	bl	bf26 <notify_one>
    bf64:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    bf66:	b131      	cbz	r1, bf76 <notify_all+0x2a>
	return node->next;
    bf68:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    bf6a:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    bf6c:	6863      	ldr	r3, [r4, #4]
    bf6e:	428b      	cmp	r3, r1
    bf70:	d1f3      	bne.n	bf5a <notify_all+0xe>
	list->tail = node;
    bf72:	6065      	str	r5, [r4, #4]
}
    bf74:	e7f1      	b.n	bf5a <notify_all+0xe>
}
    bf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bf7a <onoff_manager_init>:
	if ((mgr == NULL)
    bf7a:	b170      	cbz	r0, bf9a <onoff_manager_init+0x20>
{
    bf7c:	b538      	push	{r3, r4, r5, lr}
    bf7e:	460c      	mov	r4, r1
    bf80:	4605      	mov	r5, r0
	    || (transitions == NULL)
    bf82:	b169      	cbz	r1, bfa0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    bf84:	680b      	ldr	r3, [r1, #0]
    bf86:	b173      	cbz	r3, bfa6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    bf88:	684b      	ldr	r3, [r1, #4]
    bf8a:	b17b      	cbz	r3, bfac <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bf8c:	2220      	movs	r2, #32
    bf8e:	2100      	movs	r1, #0
    bf90:	f000 fab1 	bl	c4f6 <memset>
    bf94:	612c      	str	r4, [r5, #16]
	return 0;
    bf96:	2000      	movs	r0, #0
}
    bf98:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bf9a:	f06f 0015 	mvn.w	r0, #21
}
    bf9e:	4770      	bx	lr
		return -EINVAL;
    bfa0:	f06f 0015 	mvn.w	r0, #21
    bfa4:	e7f8      	b.n	bf98 <onoff_manager_init+0x1e>
    bfa6:	f06f 0015 	mvn.w	r0, #21
    bfaa:	e7f5      	b.n	bf98 <onoff_manager_init+0x1e>
    bfac:	f06f 0015 	mvn.w	r0, #21
    bfb0:	e7f2      	b.n	bf98 <onoff_manager_init+0x1e>

0000bfb2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bfb2:	b508      	push	{r3, lr}
    bfb4:	4604      	mov	r4, r0
    bfb6:	4608      	mov	r0, r1
    bfb8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bfba:	461a      	mov	r2, r3
    bfbc:	47a0      	blx	r4
	return z_impl_z_current_get();
    bfbe:	f7fe ff7f 	bl	aec0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bfc2:	f7f8 ffd1 	bl	4f68 <z_impl_k_thread_abort>

0000bfc6 <free_list_add_bidx>:
{
    bfc6:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    bfc8:	1d13      	adds	r3, r2, #4
    bfca:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bfce:	b97c      	cbnz	r4, bff0 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    bfd0:	2301      	movs	r3, #1
    bfd2:	fa03 f402 	lsl.w	r4, r3, r2
    bfd6:	68c3      	ldr	r3, [r0, #12]
    bfd8:	4323      	orrs	r3, r4
    bfda:	60c3      	str	r3, [r0, #12]
		b->next = c;
    bfdc:	3204      	adds	r2, #4
    bfde:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    bfe2:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    bfe4:	1d1a      	adds	r2, r3, #4
    bfe6:	b289      	uxth	r1, r1
    bfe8:	5281      	strh	r1, [r0, r2]
    bfea:	3306      	adds	r3, #6
    bfec:	52c1      	strh	r1, [r0, r3]
}
    bfee:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    bff0:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    bff2:	3204      	adds	r2, #4
    bff4:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    bff6:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    bffa:	f10c 0e04 	add.w	lr, ip, #4
    bffe:	f820 300e 	strh.w	r3, [r0, lr]
    c002:	f10c 0c06 	add.w	ip, ip, #6
    c006:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    c00a:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    c00c:	3306      	adds	r3, #6
    c00e:	b289      	uxth	r1, r1
    c010:	52c1      	strh	r1, [r0, r3]
    c012:	5281      	strh	r1, [r0, r2]
    c014:	e7eb      	b.n	bfee <free_list_add_bidx+0x28>

0000c016 <free_list_add>:
{
    c016:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c018:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c01c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c01e:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    c020:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    c024:	f1c2 021f 	rsb	r2, r2, #31
    c028:	f7ff ffcd 	bl	bfc6 <free_list_add_bidx>
}
    c02c:	bd08      	pop	{r3, pc}

0000c02e <extract_decimal>:
{
    c02e:	4684      	mov	ip, r0
	const char *sp = *str;
    c030:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c032:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    c034:	e005      	b.n	c042 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    c036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c03a:	3201      	adds	r2, #1
    c03c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    c040:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    c042:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c044:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c048:	2909      	cmp	r1, #9
    c04a:	d9f4      	bls.n	c036 <extract_decimal+0x8>
	*str = sp;
    c04c:	f8cc 2000 	str.w	r2, [ip]
}
    c050:	4770      	bx	lr

0000c052 <encode_uint>:
{
    c052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c056:	b083      	sub	sp, #12
    c058:	4604      	mov	r4, r0
    c05a:	460d      	mov	r5, r1
    c05c:	9201      	str	r2, [sp, #4]
    c05e:	469a      	mov	sl, r3
    c060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c062:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c064:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c068:	2b6f      	cmp	r3, #111	; 0x6f
    c06a:	d00f      	beq.n	c08c <encode_uint+0x3a>
    c06c:	d906      	bls.n	c07c <encode_uint+0x2a>
    c06e:	2b70      	cmp	r3, #112	; 0x70
    c070:	d00f      	beq.n	c092 <encode_uint+0x40>
    c072:	2b78      	cmp	r3, #120	; 0x78
    c074:	d110      	bne.n	c098 <encode_uint+0x46>
		return 16;
    c076:	f04f 0910 	mov.w	r9, #16
    c07a:	e026      	b.n	c0ca <encode_uint+0x78>
	switch (specifier) {
    c07c:	2b58      	cmp	r3, #88	; 0x58
    c07e:	d002      	beq.n	c086 <encode_uint+0x34>
    c080:	f04f 090a 	mov.w	r9, #10
    c084:	e021      	b.n	c0ca <encode_uint+0x78>
		return 16;
    c086:	f04f 0910 	mov.w	r9, #16
    c08a:	e01e      	b.n	c0ca <encode_uint+0x78>
		return 8;
    c08c:	f04f 0908 	mov.w	r9, #8
    c090:	e01b      	b.n	c0ca <encode_uint+0x78>
		return 16;
    c092:	f04f 0910 	mov.w	r9, #16
    c096:	e018      	b.n	c0ca <encode_uint+0x78>
	switch (specifier) {
    c098:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c09c:	e015      	b.n	c0ca <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c09e:	f1bb 0f19 	cmp.w	fp, #25
    c0a2:	d821      	bhi.n	c0e8 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c0a4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0a6:	3237      	adds	r2, #55	; 0x37
    c0a8:	b2d2      	uxtb	r2, r2
    c0aa:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    c0ae:	463a      	mov	r2, r7
    c0b0:	4643      	mov	r3, r8
    c0b2:	4620      	mov	r0, r4
    c0b4:	4629      	mov	r1, r5
    c0b6:	f7f4 fa05 	bl	4c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c0ba:	42bc      	cmp	r4, r7
    c0bc:	f175 0300 	sbcs.w	r3, r5, #0
    c0c0:	d316      	bcc.n	c0f0 <encode_uint+0x9e>
    c0c2:	4556      	cmp	r6, sl
    c0c4:	d914      	bls.n	c0f0 <encode_uint+0x9e>
		value /= radix;
    c0c6:	4604      	mov	r4, r0
    c0c8:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c0ca:	f04f 0800 	mov.w	r8, #0
    c0ce:	464f      	mov	r7, r9
    c0d0:	464a      	mov	r2, r9
    c0d2:	4643      	mov	r3, r8
    c0d4:	4620      	mov	r0, r4
    c0d6:	4629      	mov	r1, r5
    c0d8:	f7f4 f9f4 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0dc:	2a09      	cmp	r2, #9
    c0de:	d8de      	bhi.n	c09e <encode_uint+0x4c>
    c0e0:	b2d2      	uxtb	r2, r2
    c0e2:	3230      	adds	r2, #48	; 0x30
    c0e4:	b2d2      	uxtb	r2, r2
    c0e6:	e7e0      	b.n	c0aa <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c0e8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0ea:	3257      	adds	r2, #87	; 0x57
    c0ec:	b2d2      	uxtb	r2, r2
    c0ee:	e7dc      	b.n	c0aa <encode_uint+0x58>
	if (conv->flag_hash) {
    c0f0:	9b01      	ldr	r3, [sp, #4]
    c0f2:	781b      	ldrb	r3, [r3, #0]
    c0f4:	f013 0f20 	tst.w	r3, #32
    c0f8:	d005      	beq.n	c106 <encode_uint+0xb4>
		if (radix == 8) {
    c0fa:	f1b9 0f08 	cmp.w	r9, #8
    c0fe:	d006      	beq.n	c10e <encode_uint+0xbc>
		} else if (radix == 16) {
    c100:	f1b9 0f10 	cmp.w	r9, #16
    c104:	d009      	beq.n	c11a <encode_uint+0xc8>
}
    c106:	4630      	mov	r0, r6
    c108:	b003      	add	sp, #12
    c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c10e:	9a01      	ldr	r2, [sp, #4]
    c110:	7893      	ldrb	r3, [r2, #2]
    c112:	f043 0308 	orr.w	r3, r3, #8
    c116:	7093      	strb	r3, [r2, #2]
    c118:	e7f5      	b.n	c106 <encode_uint+0xb4>
			conv->altform_0c = true;
    c11a:	9a01      	ldr	r2, [sp, #4]
    c11c:	7893      	ldrb	r3, [r2, #2]
    c11e:	f043 0310 	orr.w	r3, r3, #16
    c122:	7093      	strb	r3, [r2, #2]
    c124:	e7ef      	b.n	c106 <encode_uint+0xb4>

0000c126 <outs>:
{
    c126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c12a:	4607      	mov	r7, r0
    c12c:	460e      	mov	r6, r1
    c12e:	4614      	mov	r4, r2
    c130:	4698      	mov	r8, r3
	size_t count = 0;
    c132:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c134:	e006      	b.n	c144 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c136:	4631      	mov	r1, r6
    c138:	f814 0b01 	ldrb.w	r0, [r4], #1
    c13c:	47b8      	blx	r7
		if (rc < 0) {
    c13e:	2800      	cmp	r0, #0
    c140:	db09      	blt.n	c156 <outs+0x30>
		++count;
    c142:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c144:	4544      	cmp	r4, r8
    c146:	d3f6      	bcc.n	c136 <outs+0x10>
    c148:	f1b8 0f00 	cmp.w	r8, #0
    c14c:	d102      	bne.n	c154 <outs+0x2e>
    c14e:	7823      	ldrb	r3, [r4, #0]
    c150:	2b00      	cmp	r3, #0
    c152:	d1f0      	bne.n	c136 <outs+0x10>
	return (int)count;
    c154:	4628      	mov	r0, r5
}
    c156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c15a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    c15a:	4040      	eors	r0, r0
    c15c:	f380 8811 	msr	BASEPRI, r0
    c160:	f04f 0004 	mov.w	r0, #4
    c164:	df02      	svc	2
}
    c166:	4770      	bx	lr

0000c168 <assert_print>:

void assert_print(const char *fmt, ...)
{
    c168:	b40f      	push	{r0, r1, r2, r3}
    c16a:	b500      	push	{lr}
    c16c:	b083      	sub	sp, #12
    c16e:	a904      	add	r1, sp, #16
    c170:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    c174:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    c176:	f7ff fe6e 	bl	be56 <vprintk>

	va_end(ap);
}
    c17a:	b003      	add	sp, #12
    c17c:	f85d eb04 	ldr.w	lr, [sp], #4
    c180:	b004      	add	sp, #16
    c182:	4770      	bx	lr

0000c184 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    c184:	4770      	bx	lr

0000c186 <dummy_timestamp>:
}
    c186:	2000      	movs	r0, #0
    c188:	4770      	bx	lr

0000c18a <msg_filter_check>:
}
    c18a:	2001      	movs	r0, #1
    c18c:	4770      	bx	lr

0000c18e <default_get_timestamp>:
{
    c18e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c190:	f000 fd80 	bl	cc94 <sys_clock_cycle_get_32>
}
    c194:	bd08      	pop	{r3, pc}

0000c196 <z_log_vprintk>:
{
    c196:	b500      	push	{lr}
    c198:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c19a:	9103      	str	r1, [sp, #12]
    c19c:	9002      	str	r0, [sp, #8]
    c19e:	2000      	movs	r0, #0
    c1a0:	9001      	str	r0, [sp, #4]
    c1a2:	9000      	str	r0, [sp, #0]
    c1a4:	4603      	mov	r3, r0
    c1a6:	4602      	mov	r2, r0
    c1a8:	4601      	mov	r1, r0
    c1aa:	f7f7 fd17 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    c1ae:	b005      	add	sp, #20
    c1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1b4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    c1b4:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    c1b6:	f7f7 f9e7 	bl	3588 <log_init>
	}

	return 0;
}
    c1ba:	2000      	movs	r0, #0
    c1bc:	bd08      	pop	{r3, pc}

0000c1be <z_log_get_tag>:
}
    c1be:	2000      	movs	r0, #0
    c1c0:	4770      	bx	lr

0000c1c2 <out_func>:
{
    c1c2:	b500      	push	{lr}
    c1c4:	b083      	sub	sp, #12
		char x = (char)c;
    c1c6:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    c1ca:	680b      	ldr	r3, [r1, #0]
    c1cc:	684a      	ldr	r2, [r1, #4]
    c1ce:	6852      	ldr	r2, [r2, #4]
    c1d0:	2101      	movs	r1, #1
    c1d2:	f10d 0007 	add.w	r0, sp, #7
    c1d6:	4798      	blx	r3
}
    c1d8:	2000      	movs	r0, #0
    c1da:	b003      	add	sp, #12
    c1dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1e0 <cr_out_func>:
{
    c1e0:	b538      	push	{r3, r4, r5, lr}
    c1e2:	4604      	mov	r4, r0
    c1e4:	460d      	mov	r5, r1
	out_func(c, ctx);
    c1e6:	f7ff ffec 	bl	c1c2 <out_func>
	if (c == '\n') {
    c1ea:	2c0a      	cmp	r4, #10
    c1ec:	d001      	beq.n	c1f2 <cr_out_func+0x12>
}
    c1ee:	2000      	movs	r0, #0
    c1f0:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    c1f2:	4629      	mov	r1, r5
    c1f4:	200d      	movs	r0, #13
    c1f6:	f7ff ffe4 	bl	c1c2 <out_func>
    c1fa:	e7f8      	b.n	c1ee <cr_out_func+0xe>

0000c1fc <buffer_write>:
{
    c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1fe:	4607      	mov	r7, r0
    c200:	460d      	mov	r5, r1
    c202:	4614      	mov	r4, r2
    c204:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c206:	4632      	mov	r2, r6
    c208:	4621      	mov	r1, r4
    c20a:	4628      	mov	r0, r5
    c20c:	47b8      	blx	r7
		buf += processed;
    c20e:	4405      	add	r5, r0
	} while (len != 0);
    c210:	1a24      	subs	r4, r4, r0
    c212:	d1f8      	bne.n	c206 <buffer_write+0xa>
}
    c214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c216 <color_prefix>:
{
    c216:	b508      	push	{r3, lr}
    c218:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c21a:	2201      	movs	r2, #1
    c21c:	f7f7 fb5a 	bl	38d4 <color_print>
}
    c220:	bd08      	pop	{r3, pc}

0000c222 <color_postfix>:
{
    c222:	b508      	push	{r3, lr}
    c224:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c226:	2200      	movs	r2, #0
    c228:	f7f7 fb54 	bl	38d4 <color_print>
}
    c22c:	bd08      	pop	{r3, pc}

0000c22e <postfix_print>:
{
    c22e:	b538      	push	{r3, r4, r5, lr}
    c230:	4605      	mov	r5, r0
    c232:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c234:	f001 0101 	and.w	r1, r1, #1
    c238:	f7ff fff3 	bl	c222 <color_postfix>
	newline_print(output, flags);
    c23c:	4621      	mov	r1, r4
    c23e:	4628      	mov	r0, r5
    c240:	f7f7 fb5e 	bl	3900 <newline_print>
}
    c244:	bd38      	pop	{r3, r4, r5, pc}

0000c246 <log_msg2_hexdump>:
{
    c246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c24a:	b083      	sub	sp, #12
    c24c:	4680      	mov	r8, r0
    c24e:	460e      	mov	r6, r1
    c250:	4615      	mov	r5, r2
    c252:	461f      	mov	r7, r3
    c254:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    c258:	462c      	mov	r4, r5
    c25a:	2d10      	cmp	r5, #16
    c25c:	bf28      	it	cs
    c25e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    c260:	f8cd 9000 	str.w	r9, [sp]
    c264:	463b      	mov	r3, r7
    c266:	4622      	mov	r2, r4
    c268:	4631      	mov	r1, r6
    c26a:	4640      	mov	r0, r8
    c26c:	f7f7 fb5c 	bl	3928 <hexdump_line_print>
		data += length;
    c270:	4426      	add	r6, r4
	} while (len);
    c272:	1b2d      	subs	r5, r5, r4
    c274:	d1f0      	bne.n	c258 <log_msg2_hexdump+0x12>
}
    c276:	b003      	add	sp, #12
    c278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c27c <log_output_flush>:
{
    c27c:	b510      	push	{r4, lr}
    c27e:	4604      	mov	r4, r0
		     output->control_block->offset,
    c280:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c282:	6853      	ldr	r3, [r2, #4]
    c284:	6812      	ldr	r2, [r2, #0]
    c286:	6881      	ldr	r1, [r0, #8]
    c288:	6800      	ldr	r0, [r0, #0]
    c28a:	f7ff ffb7 	bl	c1fc <buffer_write>
	output->control_block->offset = 0;
    c28e:	6863      	ldr	r3, [r4, #4]
    c290:	2200      	movs	r2, #0
    c292:	601a      	str	r2, [r3, #0]
}
    c294:	bd10      	pop	{r4, pc}

0000c296 <z_log_msg2_finalize>:
{
    c296:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    c298:	b198      	cbz	r0, c2c2 <z_log_msg2_finalize+0x2c>
    c29a:	460e      	mov	r6, r1
    c29c:	4614      	mov	r4, r2
    c29e:	4619      	mov	r1, r3
    c2a0:	4605      	mov	r5, r0
	if (data) {
    c2a2:	b143      	cbz	r3, c2b6 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    c2a4:	f100 0310 	add.w	r3, r0, #16
    c2a8:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    c2ac:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    c2b0:	4418      	add	r0, r3
    c2b2:	f000 f8f1 	bl	c498 <memcpy>
	msg->hdr.desc = desc;
    c2b6:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    c2b8:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    c2ba:	4628      	mov	r0, r5
    c2bc:	f7f7 fa46 	bl	374c <z_log_msg2_commit>
}
    c2c0:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    c2c2:	f7f7 fa23 	bl	370c <z_log_dropped>
		return;
    c2c6:	e7fb      	b.n	c2c0 <z_log_msg2_finalize+0x2a>

0000c2c8 <abort_function>:
{
    c2c8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c2ca:	2000      	movs	r0, #0
    c2cc:	f7f7 f8e2 	bl	3494 <sys_reboot>

0000c2d0 <z_log_msg2_runtime_create>:
{
    c2d0:	b510      	push	{r4, lr}
    c2d2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c2d4:	ac0b      	add	r4, sp, #44	; 0x2c
    c2d6:	9405      	str	r4, [sp, #20]
    c2d8:	9403      	str	r4, [sp, #12]
    c2da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c2dc:	9402      	str	r4, [sp, #8]
    c2de:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c2e0:	9401      	str	r4, [sp, #4]
    c2e2:	9c08      	ldr	r4, [sp, #32]
    c2e4:	9400      	str	r4, [sp, #0]
    c2e6:	f7f7 fc79 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    c2ea:	b006      	add	sp, #24
    c2ec:	bd10      	pop	{r4, pc}

0000c2ee <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c2ee:	b538      	push	{r3, r4, r5, lr}
    c2f0:	4604      	mov	r4, r0

	if (esf != NULL) {
    c2f2:	460d      	mov	r5, r1
    c2f4:	b111      	cbz	r1, c2fc <z_arm_fatal_error+0xe>
		esf_dump(esf);
    c2f6:	4608      	mov	r0, r1
    c2f8:	f7f8 f894 	bl	4424 <esf_dump>
	}
	z_fatal_error(reason, esf);
    c2fc:	4629      	mov	r1, r5
    c2fe:	4620      	mov	r0, r4
    c300:	f7fc fbfe 	bl	8b00 <z_fatal_error>
}
    c304:	bd38      	pop	{r3, r4, r5, pc}

0000c306 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    c306:	b508      	push	{r3, lr}
    c308:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c30a:	6800      	ldr	r0, [r0, #0]
    c30c:	f7ff ffef 	bl	c2ee <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    c310:	bd08      	pop	{r3, pc}

0000c312 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    c312:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c314:	2100      	movs	r1, #0
    c316:	2001      	movs	r0, #1
    c318:	f7ff ffe9 	bl	c2ee <z_arm_fatal_error>
}
    c31c:	bd08      	pop	{r3, pc}

0000c31e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c31e:	b508      	push	{r3, lr}
	handler();
    c320:	f7f8 f91c 	bl	455c <z_SysNmiOnReset>
	z_arm_int_exit();
    c324:	f7f8 fa12 	bl	474c <z_arm_exc_exit>
}
    c328:	bd08      	pop	{r3, pc}

0000c32a <memory_fault_recoverable>:
}
    c32a:	2000      	movs	r0, #0
    c32c:	4770      	bx	lr

0000c32e <z_log_msg2_runtime_create>:
{
    c32e:	b510      	push	{r4, lr}
    c330:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c332:	ac0b      	add	r4, sp, #44	; 0x2c
    c334:	9405      	str	r4, [sp, #20]
    c336:	9403      	str	r4, [sp, #12]
    c338:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c33a:	9402      	str	r4, [sp, #8]
    c33c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c33e:	9401      	str	r4, [sp, #4]
    c340:	9c08      	ldr	r4, [sp, #32]
    c342:	9400      	str	r4, [sp, #0]
    c344:	f7f7 fc4a 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    c348:	b006      	add	sp, #24
    c34a:	bd10      	pop	{r4, pc}

0000c34c <fault_handle>:
{
    c34c:	b508      	push	{r3, lr}
	*recoverable = false;
    c34e:	2300      	movs	r3, #0
    c350:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    c352:	1ecb      	subs	r3, r1, #3
    c354:	2b09      	cmp	r3, #9
    c356:	d81a      	bhi.n	c38e <fault_handle+0x42>
    c358:	e8df f003 	tbb	[pc, r3]
    c35c:	110d0905 	.word	0x110d0905
    c360:	19191919 	.word	0x19191919
    c364:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    c366:	4611      	mov	r1, r2
    c368:	f7f8 fc42 	bl	4bf0 <hard_fault>
}
    c36c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    c36e:	2100      	movs	r1, #0
    c370:	f7f8 fb60 	bl	4a34 <mem_manage_fault>
		break;
    c374:	e7fa      	b.n	c36c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    c376:	2100      	movs	r1, #0
    c378:	f7f8 f9f6 	bl	4768 <bus_fault>
		break;
    c37c:	e7f6      	b.n	c36c <fault_handle+0x20>
		reason = usage_fault(esf);
    c37e:	f7f8 fa9b 	bl	48b8 <usage_fault>
		break;
    c382:	e7f3      	b.n	c36c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    c384:	4611      	mov	r1, r2
    c386:	f7f8 fb21 	bl	49cc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c38a:	2000      	movs	r0, #0
		break;
    c38c:	e7ee      	b.n	c36c <fault_handle+0x20>
		reserved_exception(esf, fault);
    c38e:	f7f8 fb31 	bl	49f4 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    c392:	2000      	movs	r0, #0
	return reason;
    c394:	e7ea      	b.n	c36c <fault_handle+0x20>

0000c396 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    c396:	6843      	ldr	r3, [r0, #4]
    c398:	1e5a      	subs	r2, r3, #1
		&&
    c39a:	4213      	tst	r3, r2
    c39c:	d106      	bne.n	c3ac <mpu_partition_is_valid+0x16>
		&&
    c39e:	2b1f      	cmp	r3, #31
    c3a0:	d906      	bls.n	c3b0 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    c3a2:	6803      	ldr	r3, [r0, #0]
		&&
    c3a4:	421a      	tst	r2, r3
    c3a6:	d005      	beq.n	c3b4 <mpu_partition_is_valid+0x1e>
    c3a8:	2000      	movs	r0, #0
    c3aa:	4770      	bx	lr
    c3ac:	2000      	movs	r0, #0
    c3ae:	4770      	bx	lr
    c3b0:	2000      	movs	r0, #0
    c3b2:	4770      	bx	lr
    c3b4:	2001      	movs	r0, #1
}
    c3b6:	4770      	bx	lr

0000c3b8 <z_log_msg2_runtime_create>:
{
    c3b8:	b510      	push	{r4, lr}
    c3ba:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c3bc:	ac0b      	add	r4, sp, #44	; 0x2c
    c3be:	9405      	str	r4, [sp, #20]
    c3c0:	9403      	str	r4, [sp, #12]
    c3c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c3c4:	9402      	str	r4, [sp, #8]
    c3c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c3c8:	9401      	str	r4, [sp, #4]
    c3ca:	9c08      	ldr	r4, [sp, #32]
    c3cc:	9400      	str	r4, [sp, #0]
    c3ce:	f7f7 fc05 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    c3d2:	b006      	add	sp, #24
    c3d4:	bd10      	pop	{r4, pc}

0000c3d6 <mpu_configure_region>:
{
    c3d6:	b500      	push	{lr}
    c3d8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    c3da:	680b      	ldr	r3, [r1, #0]
    c3dc:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    c3de:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c3e0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    c3e2:	2b20      	cmp	r3, #32
    c3e4:	d912      	bls.n	c40c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    c3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c3ea:	d811      	bhi.n	c410 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    c3ec:	3b01      	subs	r3, #1
    c3ee:	fab3 f383 	clz	r3, r3
    c3f2:	f1c3 031f 	rsb	r3, r3, #31
    c3f6:	005b      	lsls	r3, r3, #1
    c3f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    c3fc:	4313      	orrs	r3, r2
    c3fe:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    c400:	a901      	add	r1, sp, #4
    c402:	f7f8 fdff 	bl	5004 <region_allocate_and_init>
}
    c406:	b005      	add	sp, #20
    c408:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    c40c:	2308      	movs	r3, #8
    c40e:	e7f5      	b.n	c3fc <mpu_configure_region+0x26>
		return REGION_4G;
    c410:	233e      	movs	r3, #62	; 0x3e
    c412:	e7f3      	b.n	c3fc <mpu_configure_region+0x26>

0000c414 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    c414:	4602      	mov	r2, r0
    c416:	e002      	b.n	c41e <strcpy+0xa>
		*d = *s;
    c418:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    c41c:	3101      	adds	r1, #1
	while (*s != '\0') {
    c41e:	780b      	ldrb	r3, [r1, #0]
    c420:	2b00      	cmp	r3, #0
    c422:	d1f9      	bne.n	c418 <strcpy+0x4>
	}

	*d = '\0';
    c424:	7013      	strb	r3, [r2, #0]

	return dest;
}
    c426:	4770      	bx	lr

0000c428 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    c428:	4603      	mov	r3, r0
    c42a:	b1a2      	cbz	r2, c456 <strncpy+0x2e>
{
    c42c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    c42e:	780c      	ldrb	r4, [r1, #0]
    c430:	b12c      	cbz	r4, c43e <strncpy+0x16>
		*d = *s;
    c432:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    c436:	3101      	adds	r1, #1
		d++;
		n--;
    c438:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    c43a:	2a00      	cmp	r2, #0
    c43c:	d1f7      	bne.n	c42e <strncpy+0x6>
	}

	while (n > 0) {
    c43e:	b122      	cbz	r2, c44a <strncpy+0x22>
		*d = '\0';
    c440:	2100      	movs	r1, #0
    c442:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    c446:	3a01      	subs	r2, #1
    c448:	e7f9      	b.n	c43e <strncpy+0x16>
	}

	return dest;
}
    c44a:	bc10      	pop	{r4}
    c44c:	4770      	bx	lr
		*d = '\0';
    c44e:	2100      	movs	r1, #0
    c450:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c454:	3a01      	subs	r2, #1
	while (n > 0) {
    c456:	2a00      	cmp	r2, #0
    c458:	d1f9      	bne.n	c44e <strncpy+0x26>
    c45a:	4770      	bx	lr

0000c45c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c45c:	4603      	mov	r3, r0
	size_t n = 0;
    c45e:	2000      	movs	r0, #0

	while (*s != '\0') {
    c460:	e001      	b.n	c466 <strlen+0xa>
		s++;
    c462:	3301      	adds	r3, #1
		n++;
    c464:	3001      	adds	r0, #1
	while (*s != '\0') {
    c466:	781a      	ldrb	r2, [r3, #0]
    c468:	2a00      	cmp	r2, #0
    c46a:	d1fa      	bne.n	c462 <strlen+0x6>
	}

	return n;
}
    c46c:	4770      	bx	lr

0000c46e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c46e:	4603      	mov	r3, r0
	size_t n = 0;
    c470:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c472:	e001      	b.n	c478 <strnlen+0xa>
		s++;
    c474:	3301      	adds	r3, #1
		n++;
    c476:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    c478:	781a      	ldrb	r2, [r3, #0]
    c47a:	b10a      	cbz	r2, c480 <strnlen+0x12>
    c47c:	4288      	cmp	r0, r1
    c47e:	d3f9      	bcc.n	c474 <strnlen+0x6>
	}

	return n;
}
    c480:	4770      	bx	lr

0000c482 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c482:	e001      	b.n	c488 <strcmp+0x6>
		s1++;
    c484:	3001      	adds	r0, #1
		s2++;
    c486:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c488:	7803      	ldrb	r3, [r0, #0]
    c48a:	780a      	ldrb	r2, [r1, #0]
    c48c:	4293      	cmp	r3, r2
    c48e:	d101      	bne.n	c494 <strcmp+0x12>
    c490:	2b00      	cmp	r3, #0
    c492:	d1f7      	bne.n	c484 <strcmp+0x2>
	}

	return *s1 - *s2;
}
    c494:	1a98      	subs	r0, r3, r2
    c496:	4770      	bx	lr

0000c498 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    c498:	ea80 0301 	eor.w	r3, r0, r1
    c49c:	f013 0f03 	tst.w	r3, #3
    c4a0:	d001      	beq.n	c4a6 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    c4a2:	4603      	mov	r3, r0
    c4a4:	e023      	b.n	c4ee <memcpy+0x56>
    c4a6:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    c4a8:	f013 0f03 	tst.w	r3, #3
    c4ac:	d00f      	beq.n	c4ce <memcpy+0x36>
			if (n == 0) {
    c4ae:	b30a      	cbz	r2, c4f4 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    c4b0:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4b4:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    c4b8:	3a01      	subs	r2, #1
    c4ba:	e7f5      	b.n	c4a8 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    c4bc:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4c0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c4c4:	3a01      	subs	r2, #1
	while (n > 0) {
    c4c6:	2a00      	cmp	r2, #0
    c4c8:	d1f8      	bne.n	c4bc <memcpy+0x24>
	}

	return d;
}
    c4ca:	bc10      	pop	{r4}
    c4cc:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    c4ce:	2a03      	cmp	r2, #3
    c4d0:	d90d      	bls.n	c4ee <memcpy+0x56>
{
    c4d2:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    c4d4:	f851 4b04 	ldr.w	r4, [r1], #4
    c4d8:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    c4dc:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    c4de:	2a03      	cmp	r2, #3
    c4e0:	d8f8      	bhi.n	c4d4 <memcpy+0x3c>
    c4e2:	e7f0      	b.n	c4c6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    c4e4:	f811 cb01 	ldrb.w	ip, [r1], #1
    c4e8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c4ec:	3a01      	subs	r2, #1
	while (n > 0) {
    c4ee:	2a00      	cmp	r2, #0
    c4f0:	d1f8      	bne.n	c4e4 <memcpy+0x4c>
    c4f2:	4770      	bx	lr
}
    c4f4:	4770      	bx	lr

0000c4f6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c4f6:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    c4fa:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c4fc:	e002      	b.n	c504 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    c4fe:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c502:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    c504:	f013 0f03 	tst.w	r3, #3
    c508:	d002      	beq.n	c510 <memset+0x1a>
		if (n == 0) {
    c50a:	2a00      	cmp	r2, #0
    c50c:	d1f7      	bne.n	c4fe <memset+0x8>
    c50e:	e00f      	b.n	c530 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    c510:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    c512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    c516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    c51a:	2a03      	cmp	r2, #3
    c51c:	d906      	bls.n	c52c <memset+0x36>
		*(d_word++) = c_word;
    c51e:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    c522:	3a04      	subs	r2, #4
    c524:	e7f9      	b.n	c51a <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    c526:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    c52a:	3a01      	subs	r2, #1
	while (n > 0) {
    c52c:	2a00      	cmp	r2, #0
    c52e:	d1fa      	bne.n	c526 <memset+0x30>
	}

	return buf;
}
    c530:	4770      	bx	lr

0000c532 <_stdout_hook_default>:
}
    c532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c536:	4770      	bx	lr

0000c538 <fputc>:
}
#include <syscalls/zephyr_fputc_mrsh.c>
#endif

int fputc(int c, FILE *stream)
{
    c538:	b508      	push	{r3, lr}
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    c53a:	f7f8 fe97 	bl	526c <z_impl_zephyr_fputc>
	return zephyr_fputc(c, stream);
}
    c53e:	bd08      	pop	{r3, pc}

0000c540 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    c540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c544:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    c548:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    c54c:	2a08      	cmp	r2, #8
    c54e:	d001      	beq.n	c554 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    c550:	2000      	movs	r0, #0
    c552:	4770      	bx	lr
                switch(var2)
    c554:	2b02      	cmp	r3, #2
    c556:	d001      	beq.n	c55c <nrf52_errata_197+0x1c>
                        return false;
    c558:	2000      	movs	r0, #0
    c55a:	4770      	bx	lr
                        return true;
    c55c:	2001      	movs	r0, #1
    #endif
}
    c55e:	4770      	bx	lr

0000c560 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c560:	2806      	cmp	r0, #6
    c562:	d000      	beq.n	c566 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c564:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c56a:	2201      	movs	r2, #1
    c56c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c570:	f3bf 8f4f 	dsb	sy
        __WFE();
    c574:	bf20      	wfe
    while (true)
    c576:	e7fd      	b.n	c574 <pm_state_set+0x14>

0000c578 <pm_state_exit_post_ops>:
    c578:	2300      	movs	r3, #0
    c57a:	f383 8811 	msr	BASEPRI, r3
    c57e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c582:	4770      	bx	lr

0000c584 <adc_context_on_timer_expired>:
{
    c584:	b508      	push	{r3, lr}
	struct adc_context *ctx =
    c586:	3808      	subs	r0, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c588:	f3bf 8f5b 	dmb	ish
    c58c:	e850 3f00 	ldrex	r3, [r0]
    c590:	1c5a      	adds	r2, r3, #1
    c592:	e840 2100 	strex	r1, r2, [r0]
    c596:	2900      	cmp	r1, #0
    c598:	d1f8      	bne.n	c58c <adc_context_on_timer_expired+0x8>
    c59a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    c59e:	b11b      	cbz	r3, c5a8 <adc_context_on_timer_expired+0x24>
		ctx->status = -EBUSY;
    c5a0:	f06f 030f 	mvn.w	r3, #15
    c5a4:	6603      	str	r3, [r0, #96]	; 0x60
}
    c5a6:	bd08      	pop	{r3, pc}
		adc_context_start_sampling(ctx);
    c5a8:	f7f8 fec8 	bl	533c <adc_context_start_sampling>
    c5ac:	e7fb      	b.n	c5a6 <adc_context_on_timer_expired+0x22>

0000c5ae <z_log_msg2_runtime_create>:
{
    c5ae:	b510      	push	{r4, lr}
    c5b0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    c5b2:	ac0b      	add	r4, sp, #44	; 0x2c
    c5b4:	9405      	str	r4, [sp, #20]
    c5b6:	9403      	str	r4, [sp, #12]
    c5b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c5ba:	9402      	str	r4, [sp, #8]
    c5bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c5be:	9401      	str	r4, [sp, #4]
    c5c0:	9c08      	ldr	r4, [sp, #32]
    c5c2:	9400      	str	r4, [sp, #0]
    c5c4:	f7f7 fb0a 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    c5c8:	b006      	add	sp, #24
    c5ca:	bd10      	pop	{r4, pc}

0000c5cc <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    c5cc:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    c5ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c5d2:	0089      	lsls	r1, r1, #2
    c5d4:	3140      	adds	r1, #64	; 0x40
}
    c5d6:	4408      	add	r0, r1
    c5d8:	4770      	bx	lr

0000c5da <get_sub_config>:
	const struct nrf_clock_control_config *config =
    c5da:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    c5dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    c5e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c5e4:	4770      	bx	lr

0000c5e6 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    c5e6:	6900      	ldr	r0, [r0, #16]
}
    c5e8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    c5ec:	4770      	bx	lr

0000c5ee <set_off_state>:
	__asm__ volatile(
    c5ee:	f04f 0320 	mov.w	r3, #32
    c5f2:	f3ef 8211 	mrs	r2, BASEPRI
    c5f6:	f383 8812 	msr	BASEPRI_MAX, r3
    c5fa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c5fe:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c600:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    c604:	d001      	beq.n	c60a <set_off_state+0x1c>
    c606:	428b      	cmp	r3, r1
    c608:	d107      	bne.n	c61a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c60a:	2301      	movs	r3, #1
    c60c:	6003      	str	r3, [r0, #0]
	int err = 0;
    c60e:	2000      	movs	r0, #0
	__asm__ volatile(
    c610:	f382 8811 	msr	BASEPRI, r2
    c614:	f3bf 8f6f 	isb	sy
}
    c618:	4770      	bx	lr
		err = -EPERM;
    c61a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c61e:	e7f7      	b.n	c610 <set_off_state+0x22>

0000c620 <set_starting_state>:
	__asm__ volatile(
    c620:	f04f 0320 	mov.w	r3, #32
    c624:	f3ef 8211 	mrs	r2, BASEPRI
    c628:	f383 8812 	msr	BASEPRI_MAX, r3
    c62c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c630:	6803      	ldr	r3, [r0, #0]
    c632:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c636:	f003 0307 	and.w	r3, r3, #7
    c63a:	2b01      	cmp	r3, #1
    c63c:	d008      	beq.n	c650 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    c63e:	458c      	cmp	ip, r1
    c640:	d009      	beq.n	c656 <set_starting_state+0x36>
		err = -EPERM;
    c642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    c646:	f382 8811 	msr	BASEPRI, r2
    c64a:	f3bf 8f6f 	isb	sy
}
    c64e:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c650:	6001      	str	r1, [r0, #0]
	int err = 0;
    c652:	2000      	movs	r0, #0
    c654:	e7f7      	b.n	c646 <set_starting_state+0x26>
		err = -EALREADY;
    c656:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c65a:	e7f4      	b.n	c646 <set_starting_state+0x26>

0000c65c <set_on_state>:
	__asm__ volatile(
    c65c:	f04f 0320 	mov.w	r3, #32
    c660:	f3ef 8211 	mrs	r2, BASEPRI
    c664:	f383 8812 	msr	BASEPRI_MAX, r3
    c668:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c66c:	6803      	ldr	r3, [r0, #0]
    c66e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c672:	f043 0302 	orr.w	r3, r3, #2
    c676:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c678:	f382 8811 	msr	BASEPRI, r2
    c67c:	f3bf 8f6f 	isb	sy
}
    c680:	4770      	bx	lr

0000c682 <clkstarted_handle>:
{
    c682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c684:	4606      	mov	r6, r0
    c686:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    c688:	f7ff ffa0 	bl	c5cc <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    c68c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    c68e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    c690:	2300      	movs	r3, #0
    c692:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    c696:	f7ff ffe1 	bl	c65c <set_on_state>
	if (callback) {
    c69a:	b11d      	cbz	r5, c6a4 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    c69c:	463a      	mov	r2, r7
    c69e:	4621      	mov	r1, r4
    c6a0:	4630      	mov	r0, r6
    c6a2:	47a8      	blx	r5
}
    c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c6a6 <async_start>:
{
    c6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6aa:	4606      	mov	r6, r0
    c6ac:	4690      	mov	r8, r2
    c6ae:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    c6b0:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    c6b2:	4629      	mov	r1, r5
    c6b4:	f7ff ff8a 	bl	c5cc <get_sub_data>
    c6b8:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    c6ba:	9906      	ldr	r1, [sp, #24]
    c6bc:	3008      	adds	r0, #8
    c6be:	f7ff ffaf 	bl	c620 <set_starting_state>
	if (err < 0) {
    c6c2:	2800      	cmp	r0, #0
    c6c4:	db09      	blt.n	c6da <async_start+0x34>
	subdata->cb = cb;
    c6c6:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    c6ca:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    c6cc:	4629      	mov	r1, r5
    c6ce:	4630      	mov	r0, r6
    c6d0:	f7ff ff83 	bl	c5da <get_sub_config>
    c6d4:	6803      	ldr	r3, [r0, #0]
    c6d6:	4798      	blx	r3
	return 0;
    c6d8:	2000      	movs	r0, #0
}
    c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c6de <api_start>:
{
    c6de:	b510      	push	{r4, lr}
    c6e0:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c6e2:	2480      	movs	r4, #128	; 0x80
    c6e4:	9400      	str	r4, [sp, #0]
    c6e6:	f7ff ffde 	bl	c6a6 <async_start>
}
    c6ea:	b002      	add	sp, #8
    c6ec:	bd10      	pop	{r4, pc}

0000c6ee <onoff_started_callback>:
{
    c6ee:	b510      	push	{r4, lr}
    c6f0:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    c6f2:	b2c9      	uxtb	r1, r1
    c6f4:	f7ff ff77 	bl	c5e6 <get_onoff_manager>
	notify(mgr, 0);
    c6f8:	2100      	movs	r1, #0
    c6fa:	47a0      	blx	r4
}
    c6fc:	bd10      	pop	{r4, pc}

0000c6fe <hfclk_start>:
{
    c6fe:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c700:	2001      	movs	r0, #1
    c702:	f7fb f805 	bl	7710 <nrfx_clock_start>
}
    c706:	bd08      	pop	{r3, pc}

0000c708 <lfclk_start>:
{
    c708:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c70a:	2000      	movs	r0, #0
    c70c:	f7fb f800 	bl	7710 <nrfx_clock_start>
}
    c710:	bd08      	pop	{r3, pc}

0000c712 <hfclk_stop>:
{
    c712:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c714:	2001      	movs	r0, #1
    c716:	f7fb f871 	bl	77fc <nrfx_clock_stop>
}
    c71a:	bd08      	pop	{r3, pc}

0000c71c <lfclk_stop>:
{
    c71c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c71e:	2000      	movs	r0, #0
    c720:	f7fb f86c 	bl	77fc <nrfx_clock_stop>
}
    c724:	bd08      	pop	{r3, pc}

0000c726 <api_stop>:
{
    c726:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    c728:	2280      	movs	r2, #128	; 0x80
    c72a:	f7f9 f971 	bl	5a10 <stop>
}
    c72e:	bd08      	pop	{r3, pc}

0000c730 <blocking_start_callback>:
{
    c730:	b508      	push	{r3, lr}
    c732:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c734:	f7fd f898 	bl	9868 <z_impl_k_sem_give>
}
    c738:	bd08      	pop	{r3, pc}

0000c73a <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c73a:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    c73e:	f020 0001 	bic.w	r0, r0, #1
    c742:	0540      	lsls	r0, r0, #21
    c744:	0d40      	lsrs	r0, r0, #21
    c746:	f240 2306 	movw	r3, #518	; 0x206
    c74a:	4298      	cmp	r0, r3
    c74c:	d033      	beq.n	c7b6 <get_drive+0x7c>
    c74e:	d816      	bhi.n	c77e <get_drive+0x44>
    c750:	2806      	cmp	r0, #6
    c752:	d02c      	beq.n	c7ae <get_drive+0x74>
    c754:	d906      	bls.n	c764 <get_drive+0x2a>
    c756:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c75a:	d10d      	bne.n	c778 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    c75c:	2301      	movs	r3, #1
    c75e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c760:	2000      	movs	r0, #0
		break;
    c762:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c764:	b300      	cbz	r0, c7a8 <get_drive+0x6e>
    c766:	2802      	cmp	r0, #2
    c768:	d103      	bne.n	c772 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    c76a:	2304      	movs	r3, #4
    c76c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c76e:	2000      	movs	r0, #0
		break;
    c770:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c772:	f06f 0015 	mvn.w	r0, #21
    c776:	4770      	bx	lr
    c778:	f06f 0015 	mvn.w	r0, #21
    c77c:	4770      	bx	lr
    c77e:	f240 4302 	movw	r3, #1026	; 0x402
    c782:	4298      	cmp	r0, r3
    c784:	d01b      	beq.n	c7be <get_drive+0x84>
    c786:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    c78a:	d103      	bne.n	c794 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    c78c:	2303      	movs	r3, #3
    c78e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c790:	2000      	movs	r0, #0
		break;
    c792:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c794:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    c798:	d103      	bne.n	c7a2 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    c79a:	2302      	movs	r3, #2
    c79c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c79e:	2000      	movs	r0, #0
		break;
    c7a0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    c7a2:	f06f 0015 	mvn.w	r0, #21
    c7a6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    c7a8:	2000      	movs	r0, #0
    c7aa:	7008      	strb	r0, [r1, #0]
		break;
    c7ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    c7ae:	2306      	movs	r3, #6
    c7b0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c7b2:	2000      	movs	r0, #0
		break;
    c7b4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    c7b6:	2307      	movs	r3, #7
    c7b8:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c7ba:	2000      	movs	r0, #0
		break;
    c7bc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    c7be:	2305      	movs	r3, #5
    c7c0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    c7c2:	2000      	movs	r0, #0
}
    c7c4:	4770      	bx	lr

0000c7c6 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    c7c6:	f010 0f10 	tst.w	r0, #16
    c7ca:	d104      	bne.n	c7d6 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    c7cc:	f010 0f20 	tst.w	r0, #32
    c7d0:	d103      	bne.n	c7da <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    c7d2:	2000      	movs	r0, #0
    c7d4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    c7d6:	2003      	movs	r0, #3
    c7d8:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    c7da:	2001      	movs	r0, #1
}
    c7dc:	4770      	bx	lr

0000c7de <gpio_nrfx_port_get_raw>:
	return port->config;
    c7de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c7e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c7e2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c7e6:	600b      	str	r3, [r1, #0]
}
    c7e8:	2000      	movs	r0, #0
    c7ea:	4770      	bx	lr

0000c7ec <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    c7ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c7ee:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    c7f0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    c7f4:	4042      	eors	r2, r0
    c7f6:	400a      	ands	r2, r1
    c7f8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    c7fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    c7fe:	2000      	movs	r0, #0
    c800:	4770      	bx	lr

0000c802 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    c802:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c804:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    c806:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    c80a:	2000      	movs	r0, #0
    c80c:	4770      	bx	lr

0000c80e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    c80e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c810:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    c812:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    c816:	2000      	movs	r0, #0
    c818:	4770      	bx	lr

0000c81a <gpio_nrfx_port_toggle_bits>:
	return port->config;
    c81a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c81c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c81e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    c822:	404b      	eors	r3, r1
    p_reg->OUT = value;
    c824:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    c828:	2000      	movs	r0, #0
    c82a:	4770      	bx	lr

0000c82c <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    c82c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    c830:	d007      	beq.n	c842 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c832:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    c836:	d00d      	beq.n	c854 <get_trigger+0x28>
    c838:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c83c:	d008      	beq.n	c850 <get_trigger+0x24>
    c83e:	2001      	movs	r0, #1
}
    c840:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    c842:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    c846:	d001      	beq.n	c84c <get_trigger+0x20>
    c848:	2005      	movs	r0, #5
    c84a:	4770      	bx	lr
    c84c:	2004      	movs	r0, #4
    c84e:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    c850:	2002      	movs	r0, #2
    c852:	4770      	bx	lr
    c854:	2003      	movs	r0, #3
    c856:	4770      	bx	lr

0000c858 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    c858:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c85a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    c85c:	f04f 0120 	mov.w	r1, #32
    c860:	f3ef 8211 	mrs	r2, BASEPRI
    c864:	f381 8812 	msr	BASEPRI_MAX, r1
    c868:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c86c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c870:	b131      	cbz	r1, c880 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c872:	2100      	movs	r1, #0
    c874:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    c878:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c87c:	2101      	movs	r1, #1
    c87e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    c880:	f382 8811 	msr	BASEPRI, r2
    c884:	f3bf 8f6f 	isb	sy
}
    c888:	4770      	bx	lr

0000c88a <uarte_nrfx_isr_int>:
{
    c88a:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c88c:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    c88e:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    c890:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c894:	f413 7f80 	tst.w	r3, #256	; 0x100
    c898:	d002      	beq.n	c8a0 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c89a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    c89e:	b9d3      	cbnz	r3, c8d6 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c8a0:	686b      	ldr	r3, [r5, #4]
    c8a2:	f013 0f10 	tst.w	r3, #16
    c8a6:	d015      	beq.n	c8d4 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    c8a8:	f04f 0220 	mov.w	r2, #32
    c8ac:	f3ef 8311 	mrs	r3, BASEPRI
    c8b0:	f382 8812 	msr	BASEPRI_MAX, r2
    c8b4:	f3bf 8f6f 	isb	sy
    c8b8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c8bc:	b112      	cbz	r2, c8c4 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c8be:	2200      	movs	r2, #0
    c8c0:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    c8c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c8c8:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    c8cc:	f383 8811 	msr	BASEPRI, r3
    c8d0:	f3bf 8f6f 	isb	sy
}
    c8d4:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    c8d6:	f7ff ffbf 	bl	c858 <endtx_isr>
    c8da:	e7e1      	b.n	c8a0 <uarte_nrfx_isr_int+0x16>

0000c8dc <uarte_nrfx_configure>:
{
    c8dc:	b570      	push	{r4, r5, r6, lr}
    c8de:	b082      	sub	sp, #8
    c8e0:	4606      	mov	r6, r0
    c8e2:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    c8e4:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    c8e6:	794b      	ldrb	r3, [r1, #5]
    c8e8:	2b01      	cmp	r3, #1
    c8ea:	d006      	beq.n	c8fa <uarte_nrfx_configure+0x1e>
    c8ec:	2b03      	cmp	r3, #3
    c8ee:	d011      	beq.n	c914 <uarte_nrfx_configure+0x38>
    c8f0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    c8f4:	4618      	mov	r0, r3
    c8f6:	b002      	add	sp, #8
    c8f8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    c8fa:	2300      	movs	r3, #0
    c8fc:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    c900:	79a3      	ldrb	r3, [r4, #6]
    c902:	2b03      	cmp	r3, #3
    c904:	d137      	bne.n	c976 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    c906:	79e3      	ldrb	r3, [r4, #7]
    c908:	b143      	cbz	r3, c91c <uarte_nrfx_configure+0x40>
    c90a:	2b01      	cmp	r3, #1
    c90c:	d010      	beq.n	c930 <uarte_nrfx_configure+0x54>
    c90e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c912:	e7ef      	b.n	c8f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    c914:	2310      	movs	r3, #16
    c916:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    c91a:	e7f1      	b.n	c900 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    c91c:	2300      	movs	r3, #0
    c91e:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    c922:	7923      	ldrb	r3, [r4, #4]
    c924:	b143      	cbz	r3, c938 <uarte_nrfx_configure+0x5c>
    c926:	2b02      	cmp	r3, #2
    c928:	d021      	beq.n	c96e <uarte_nrfx_configure+0x92>
    c92a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c92e:	e7e1      	b.n	c8f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    c930:	2301      	movs	r3, #1
    c932:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    c936:	e7f4      	b.n	c922 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    c938:	2300      	movs	r3, #0
    c93a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    c93e:	6821      	ldr	r1, [r4, #0]
    c940:	4630      	mov	r0, r6
    c942:	f7f9 fc6d 	bl	6220 <baudrate_set>
    c946:	4603      	mov	r3, r0
    c948:	b9c0      	cbnz	r0, c97c <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    c94a:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    c94c:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c94e:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    c952:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    c956:	f89d 2004 	ldrb.w	r2, [sp, #4]
    c95a:	4331      	orrs	r1, r6
    c95c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    c95e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    c962:	3504      	adds	r5, #4
    c964:	e894 0003 	ldmia.w	r4, {r0, r1}
    c968:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    c96c:	e7c2      	b.n	c8f4 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    c96e:	230e      	movs	r3, #14
    c970:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    c974:	e7e3      	b.n	c93e <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    c976:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c97a:	e7bb      	b.n	c8f4 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    c97c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    c980:	e7b8      	b.n	c8f4 <uarte_nrfx_configure+0x18>

0000c982 <uarte_nrfx_config_get>:
{
    c982:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    c984:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    c986:	3304      	adds	r3, #4
    c988:	e893 0003 	ldmia.w	r3, {r0, r1}
    c98c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    c990:	2000      	movs	r0, #0
    c992:	4770      	bx	lr

0000c994 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    c994:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c996:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    c998:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    c99c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    c9a0:	4770      	bx	lr

0000c9a2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    c9a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c9a4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c9a6:	685b      	ldr	r3, [r3, #4]
    c9a8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c9ac:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c9b0:	b929      	cbnz	r1, c9be <is_tx_ready+0x1c>
    c9b2:	b933      	cbnz	r3, c9c2 <is_tx_ready+0x20>
    c9b4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    c9b8:	b92b      	cbnz	r3, c9c6 <is_tx_ready+0x24>
    c9ba:	2000      	movs	r0, #0
    c9bc:	4770      	bx	lr
    c9be:	2001      	movs	r0, #1
    c9c0:	4770      	bx	lr
    c9c2:	2000      	movs	r0, #0
    c9c4:	4770      	bx	lr
    c9c6:	2001      	movs	r0, #1
}
    c9c8:	4770      	bx	lr

0000c9ca <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    c9ca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c9cc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c9ce:	2208      	movs	r2, #8
    c9d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    c9d4:	4770      	bx	lr

0000c9d6 <tx_start>:
{
    c9d6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    c9d8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    c9da:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c9dc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c9e0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c9e4:	2200      	movs	r2, #0
    c9e6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    c9ea:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    c9ee:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    c9f2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c9f6:	685b      	ldr	r3, [r3, #4]
    c9f8:	f013 0f10 	tst.w	r3, #16
    c9fc:	d102      	bne.n	ca04 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c9fe:	2301      	movs	r3, #1
    ca00:	60a3      	str	r3, [r4, #8]
}
    ca02:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    ca04:	2101      	movs	r1, #1
    ca06:	f7ff ffe0 	bl	c9ca <uarte_enable>
    p_reg->INTENSET = mask;
    ca0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ca0e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    ca12:	e7f4      	b.n	c9fe <tx_start+0x28>

0000ca14 <uarte_nrfx_poll_in>:
{
    ca14:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    ca16:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    ca18:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ca1a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ca1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ca20:	b152      	cbz	r2, ca38 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    ca22:	7c62      	ldrb	r2, [r4, #17]
    ca24:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ca26:	2000      	movs	r0, #0
    ca28:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    ca2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ca30:	2201      	movs	r2, #1
    ca32:	601a      	str	r2, [r3, #0]
}
    ca34:	bc10      	pop	{r4}
    ca36:	4770      	bx	lr
		return -1;
    ca38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ca3c:	e7fa      	b.n	ca34 <uarte_nrfx_poll_in+0x20>

0000ca3e <wait_tx_ready>:
{
    ca3e:	b570      	push	{r4, r5, r6, lr}
    ca40:	4606      	mov	r6, r0
    ca42:	e014      	b.n	ca6e <wait_tx_ready+0x30>
		if (res) {
    ca44:	b17d      	cbz	r5, ca66 <wait_tx_ready+0x28>
	__asm__ volatile(
    ca46:	f04f 0320 	mov.w	r3, #32
    ca4a:	f3ef 8411 	mrs	r4, BASEPRI
    ca4e:	f383 8812 	msr	BASEPRI_MAX, r3
    ca52:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ca56:	4630      	mov	r0, r6
    ca58:	f7ff ffa3 	bl	c9a2 <is_tx_ready>
    ca5c:	b9a0      	cbnz	r0, ca88 <wait_tx_ready+0x4a>
	__asm__ volatile(
    ca5e:	f384 8811 	msr	BASEPRI, r4
    ca62:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ca66:	2021      	movs	r0, #33	; 0x21
    ca68:	2100      	movs	r1, #0
    ca6a:	f7fe f9dd 	bl	ae28 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ca6e:	2464      	movs	r4, #100	; 0x64
    ca70:	4630      	mov	r0, r6
    ca72:	f7ff ff96 	bl	c9a2 <is_tx_ready>
    ca76:	4605      	mov	r5, r0
    ca78:	2800      	cmp	r0, #0
    ca7a:	d1e3      	bne.n	ca44 <wait_tx_ready+0x6>
    ca7c:	2001      	movs	r0, #1
    ca7e:	f000 f9c1 	bl	ce04 <nrfx_busy_wait>
    ca82:	3c01      	subs	r4, #1
    ca84:	d1f4      	bne.n	ca70 <wait_tx_ready+0x32>
    ca86:	e7dd      	b.n	ca44 <wait_tx_ready+0x6>
}
    ca88:	4620      	mov	r0, r4
    ca8a:	bd70      	pop	{r4, r5, r6, pc}

0000ca8c <z_log_msg2_runtime_create>:
{
    ca8c:	b510      	push	{r4, lr}
    ca8e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ca90:	ac0b      	add	r4, sp, #44	; 0x2c
    ca92:	9405      	str	r4, [sp, #20]
    ca94:	9403      	str	r4, [sp, #12]
    ca96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ca98:	9402      	str	r4, [sp, #8]
    ca9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ca9c:	9401      	str	r4, [sp, #4]
    ca9e:	9c08      	ldr	r4, [sp, #32]
    caa0:	9400      	str	r4, [sp, #0]
    caa2:	f7f7 f89b 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    caa6:	b006      	add	sp, #24
    caa8:	bd10      	pop	{r4, pc}

0000caaa <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    caaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    caae:	b083      	sub	sp, #12
    cab0:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    cab2:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    cab4:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    cab6:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    caba:	2100      	movs	r1, #0
    cabc:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    cac0:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    cac4:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    cac8:	aa01      	add	r2, sp, #4
    caca:	4648      	mov	r0, r9
    cacc:	f000 f8e6 	bl	cc9c <pinctrl_lookup_state>
	if (ret < 0) {
    cad0:	1e04      	subs	r4, r0, #0
    cad2:	db07      	blt.n	cae4 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    cad4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    cad6:	f8d9 2000 	ldr.w	r2, [r9]
    cada:	7919      	ldrb	r1, [r3, #4]
    cadc:	6818      	ldr	r0, [r3, #0]
    cade:	f7f9 ff61 	bl	69a4 <pinctrl_configure_pins>
    cae2:	4604      	mov	r4, r0
	if (err < 0) {
    cae4:	2c00      	cmp	r4, #0
    cae6:	db35      	blt.n	cb54 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    cae8:	f108 0104 	add.w	r1, r8, #4
    caec:	4628      	mov	r0, r5
    caee:	f7ff fef5 	bl	c8dc <uarte_nrfx_configure>
	if (err) {
    caf2:	4604      	mov	r4, r0
    caf4:	bb70      	cbnz	r0, cb54 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    caf6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    caf8:	f013 0f02 	tst.w	r3, #2
    cafc:	d12e      	bne.n	cb5c <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    cafe:	2308      	movs	r3, #8
    cb00:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    cb04:	7a3b      	ldrb	r3, [r7, #8]
    cb06:	b95b      	cbnz	r3, cb20 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb08:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    cb0c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    cb10:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    cb14:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    cb18:	2301      	movs	r3, #1
    cb1a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb1e:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    cb20:	687b      	ldr	r3, [r7, #4]
    cb22:	f013 0f02 	tst.w	r3, #2
    cb26:	d103      	bne.n	cb30 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    cb28:	f44f 7380 	mov.w	r3, #256	; 0x100
    cb2c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    cb30:	687b      	ldr	r3, [r7, #4]
    cb32:	f013 0f10 	tst.w	r3, #16
    cb36:	d003      	beq.n	cb40 <uarte_instance_init+0x96>
    cb38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    cb3c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    cb40:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    cb44:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    cb48:	2300      	movs	r3, #0
    cb4a:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cb4e:	2301      	movs	r3, #1
    cb50:	60b3      	str	r3, [r6, #8]
    cb52:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    cb54:	4620      	mov	r0, r4
    cb56:	b003      	add	sp, #12
    cb58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    cb5c:	4641      	mov	r1, r8
    cb5e:	4630      	mov	r0, r6
    cb60:	f7f9 fc3e 	bl	63e0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    cb64:	2800      	cmp	r0, #0
    cb66:	daca      	bge.n	cafe <uarte_instance_init+0x54>
			return err;
    cb68:	4604      	mov	r4, r0
    cb6a:	e7f3      	b.n	cb54 <uarte_instance_init+0xaa>

0000cb6c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    cb6c:	b510      	push	{r4, lr}
    cb6e:	4604      	mov	r4, r0
    cb70:	2200      	movs	r2, #0
    cb72:	2101      	movs	r1, #1
    cb74:	2002      	movs	r0, #2
    cb76:	f7f7 fcbb 	bl	44f0 <z_arm_irq_priority_set>
    cb7a:	2002      	movs	r0, #2
    cb7c:	f7f7 fc9c 	bl	44b8 <arch_irq_enable>
    cb80:	2100      	movs	r1, #0
    cb82:	4620      	mov	r0, r4
    cb84:	f7ff ff91 	bl	caaa <uarte_instance_init>
    cb88:	bd10      	pop	{r4, pc}

0000cb8a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    cb8a:	b510      	push	{r4, lr}
    cb8c:	4604      	mov	r4, r0
    cb8e:	2200      	movs	r2, #0
    cb90:	2101      	movs	r1, #1
    cb92:	2028      	movs	r0, #40	; 0x28
    cb94:	f7f7 fcac 	bl	44f0 <z_arm_irq_priority_set>
    cb98:	2028      	movs	r0, #40	; 0x28
    cb9a:	f7f7 fc8d 	bl	44b8 <arch_irq_enable>
    cb9e:	2100      	movs	r1, #0
    cba0:	4620      	mov	r0, r4
    cba2:	f7ff ff82 	bl	caaa <uarte_instance_init>
    cba6:	bd10      	pop	{r4, pc}

0000cba8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    cba8:	4770      	bx	lr

0000cbaa <counter_sub>:
	return (a - b) & COUNTER_MAX;
    cbaa:	1a40      	subs	r0, r0, r1
}
    cbac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cbb0:	4770      	bx	lr

0000cbb2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    cbb2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    cbb6:	009b      	lsls	r3, r3, #2
    cbb8:	b29b      	uxth	r3, r3
    cbba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cbbe:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    cbc2:	2200      	movs	r2, #0
    cbc4:	601a      	str	r2, [r3, #0]
    cbc6:	681b      	ldr	r3, [r3, #0]
}
    cbc8:	4770      	bx	lr

0000cbca <absolute_time_to_cc>:
}
    cbca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cbce:	4770      	bx	lr

0000cbd0 <full_int_lock>:
	__asm__ volatile(
    cbd0:	f04f 0320 	mov.w	r3, #32
    cbd4:	f3ef 8011 	mrs	r0, BASEPRI
    cbd8:	f383 8812 	msr	BASEPRI_MAX, r3
    cbdc:	f3bf 8f6f 	isb	sy
}
    cbe0:	4770      	bx	lr

0000cbe2 <full_int_unlock>:
	__asm__ volatile(
    cbe2:	f380 8811 	msr	BASEPRI, r0
    cbe6:	f3bf 8f6f 	isb	sy
}
    cbea:	4770      	bx	lr

0000cbec <set_absolute_alarm>:
{
    cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbee:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    cbf0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    cbf4:	f7f9 fc32 	bl	645c <get_comparator>
    cbf8:	4607      	mov	r7, r0
    cbfa:	e019      	b.n	cc30 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    cbfc:	2013      	movs	r0, #19
    cbfe:	f000 fa33 	bl	d068 <z_impl_k_busy_wait>
}
    cc02:	e022      	b.n	cc4a <set_absolute_alarm+0x5e>
		event_clear(chan);
    cc04:	4630      	mov	r0, r6
    cc06:	f7ff ffd4 	bl	cbb2 <event_clear>
		event_enable(chan);
    cc0a:	4630      	mov	r0, r6
    cc0c:	f7f9 fc2e 	bl	646c <event_enable>
		set_comparator(chan, cc_val);
    cc10:	4629      	mov	r1, r5
    cc12:	4630      	mov	r0, r6
    cc14:	f7f9 fc18 	bl	6448 <set_comparator>
		now2 = counter();
    cc18:	f7f9 fc3c 	bl	6494 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    cc1c:	4284      	cmp	r4, r0
    cc1e:	d01e      	beq.n	cc5e <set_absolute_alarm+0x72>
    cc20:	1c81      	adds	r1, r0, #2
    cc22:	4628      	mov	r0, r5
    cc24:	f7ff ffc1 	bl	cbaa <counter_sub>
	} while ((now2 != now) &&
    cc28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cc2c:	d917      	bls.n	cc5e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    cc2e:	462f      	mov	r7, r5
		now = counter();
    cc30:	f7f9 fc30 	bl	6494 <counter>
    cc34:	4604      	mov	r4, r0
		set_comparator(chan, now);
    cc36:	4601      	mov	r1, r0
    cc38:	4630      	mov	r0, r6
    cc3a:	f7f9 fc05 	bl	6448 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    cc3e:	4621      	mov	r1, r4
    cc40:	4638      	mov	r0, r7
    cc42:	f7ff ffb2 	bl	cbaa <counter_sub>
    cc46:	2801      	cmp	r0, #1
    cc48:	d0d8      	beq.n	cbfc <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    cc4a:	1ca7      	adds	r7, r4, #2
    cc4c:	4639      	mov	r1, r7
    cc4e:	4628      	mov	r0, r5
    cc50:	f7ff ffab 	bl	cbaa <counter_sub>
    cc54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cc58:	d9d4      	bls.n	cc04 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    cc5a:	463d      	mov	r5, r7
    cc5c:	e7d2      	b.n	cc04 <set_absolute_alarm+0x18>
}
    cc5e:	4628      	mov	r0, r5
    cc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cc62 <compare_set>:
{
    cc62:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc64:	b083      	sub	sp, #12
    cc66:	4604      	mov	r4, r0
    cc68:	4617      	mov	r7, r2
    cc6a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    cc6c:	f7f9 fc18 	bl	64a0 <compare_int_lock>
    cc70:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    cc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc74:	9301      	str	r3, [sp, #4]
    cc76:	9b08      	ldr	r3, [sp, #32]
    cc78:	9300      	str	r3, [sp, #0]
    cc7a:	463a      	mov	r2, r7
    cc7c:	462b      	mov	r3, r5
    cc7e:	4620      	mov	r0, r4
    cc80:	f7f9 fcfe 	bl	6680 <compare_set_nolocks>
    cc84:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    cc86:	4631      	mov	r1, r6
    cc88:	4620      	mov	r0, r4
    cc8a:	f7f9 fc6d 	bl	6568 <compare_int_unlock>
}
    cc8e:	4628      	mov	r0, r5
    cc90:	b003      	add	sp, #12
    cc92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cc94 <sys_clock_cycle_get_32>:
{
    cc94:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    cc96:	f7f9 fcd3 	bl	6640 <z_nrf_rtc_timer_read>
}
    cc9a:	bd08      	pop	{r3, pc}

0000cc9c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    cc9c:	b410      	push	{r4}
	*state = &config->states[0];
    cc9e:	6843      	ldr	r3, [r0, #4]
    cca0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cca2:	e001      	b.n	cca8 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    cca4:	3408      	adds	r4, #8
    cca6:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    cca8:	6814      	ldr	r4, [r2, #0]
    ccaa:	7a03      	ldrb	r3, [r0, #8]
    ccac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ccb0:	3b01      	subs	r3, #1
    ccb2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ccb6:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    ccba:	429c      	cmp	r4, r3
    ccbc:	d804      	bhi.n	ccc8 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    ccbe:	7963      	ldrb	r3, [r4, #5]
    ccc0:	428b      	cmp	r3, r1
    ccc2:	d1ef      	bne.n	cca4 <pinctrl_lookup_state+0x8>
			return 0;
    ccc4:	2000      	movs	r0, #0
    ccc6:	e001      	b.n	cccc <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    ccc8:	f06f 0001 	mvn.w	r0, #1
}
    cccc:	bc10      	pop	{r4}
    ccce:	4770      	bx	lr

0000ccd0 <z_log_msg2_runtime_create>:
{
    ccd0:	b510      	push	{r4, lr}
    ccd2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ccd4:	ac0b      	add	r4, sp, #44	; 0x2c
    ccd6:	9405      	str	r4, [sp, #20]
    ccd8:	9403      	str	r4, [sp, #12]
    ccda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ccdc:	9402      	str	r4, [sp, #8]
    ccde:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cce0:	9401      	str	r4, [sp, #4]
    cce2:	9c08      	ldr	r4, [sp, #32]
    cce4:	9400      	str	r4, [sp, #0]
    cce6:	f7f6 ff79 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    ccea:	b006      	add	sp, #24
    ccec:	bd10      	pop	{r4, pc}

0000ccee <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    ccee:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    ccf0:	f7fe fe68 	bl	b9c4 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    ccf4:	bd08      	pop	{r3, pc}

0000ccf6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    ccf6:	b510      	push	{r4, lr}
    ccf8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    ccfa:	f7f7 faa3 	bl	4244 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ccfe:	f7f7 fb5f 	bl	43c0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    cd02:	4620      	mov	r0, r4
    cd04:	f7ff fff3 	bl	ccee <hw_cc3xx_init_internal>
	return res;
}
    cd08:	bd10      	pop	{r4, pc}

0000cd0a <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd0e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    cd12:	2b08      	cmp	r3, #8
    cd14:	d001      	beq.n	cd1a <nrf52_errata_36+0x10>
        return false;
    cd16:	2000      	movs	r0, #0
    cd18:	4770      	bx	lr
                        return true;
    cd1a:	2001      	movs	r0, #1
}
    cd1c:	4770      	bx	lr

0000cd1e <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd22:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    cd26:	2b08      	cmp	r3, #8
    cd28:	d001      	beq.n	cd2e <nrf52_errata_66+0x10>
        return false;
    cd2a:	2000      	movs	r0, #0
    cd2c:	4770      	bx	lr
                        return true;
    cd2e:	2001      	movs	r0, #1
}
    cd30:	4770      	bx	lr

0000cd32 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd36:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd3e:	2a08      	cmp	r2, #8
    cd40:	d001      	beq.n	cd46 <nrf52_errata_98+0x14>
        return false;
    cd42:	2000      	movs	r0, #0
    cd44:	4770      	bx	lr
                switch(var2)
    cd46:	2b00      	cmp	r3, #0
    cd48:	d804      	bhi.n	cd54 <nrf52_errata_98+0x22>
    cd4a:	e8df f003 	tbb	[pc, r3]
    cd4e:	01          	.byte	0x01
    cd4f:	00          	.byte	0x00
    cd50:	2001      	movs	r0, #1
    cd52:	4770      	bx	lr
                        return false;
    cd54:	2000      	movs	r0, #0
}
    cd56:	4770      	bx	lr

0000cd58 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd5c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd64:	2a08      	cmp	r2, #8
    cd66:	d001      	beq.n	cd6c <nrf52_errata_103+0x14>
        return false;
    cd68:	2000      	movs	r0, #0
    cd6a:	4770      	bx	lr
                switch(var2)
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d804      	bhi.n	cd7a <nrf52_errata_103+0x22>
    cd70:	e8df f003 	tbb	[pc, r3]
    cd74:	01          	.byte	0x01
    cd75:	00          	.byte	0x00
    cd76:	2001      	movs	r0, #1
    cd78:	4770      	bx	lr
                        return false;
    cd7a:	2000      	movs	r0, #0
}
    cd7c:	4770      	bx	lr

0000cd7e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cd7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd82:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cd86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cd8a:	2a08      	cmp	r2, #8
    cd8c:	d001      	beq.n	cd92 <nrf52_errata_115+0x14>
        return false;
    cd8e:	2000      	movs	r0, #0
    cd90:	4770      	bx	lr
                switch(var2)
    cd92:	2b00      	cmp	r3, #0
    cd94:	d804      	bhi.n	cda0 <nrf52_errata_115+0x22>
    cd96:	e8df f003 	tbb	[pc, r3]
    cd9a:	01          	.byte	0x01
    cd9b:	00          	.byte	0x00
    cd9c:	2001      	movs	r0, #1
    cd9e:	4770      	bx	lr
                        return false;
    cda0:	2000      	movs	r0, #0
}
    cda2:	4770      	bx	lr

0000cda4 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cda4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cda8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cdac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    cdb0:	2a08      	cmp	r2, #8
    cdb2:	d001      	beq.n	cdb8 <nrf52_errata_120+0x14>
        return false;
    cdb4:	2000      	movs	r0, #0
    cdb6:	4770      	bx	lr
                switch(var2)
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d804      	bhi.n	cdc6 <nrf52_errata_120+0x22>
    cdbc:	e8df f003 	tbb	[pc, r3]
    cdc0:	01          	.byte	0x01
    cdc1:	00          	.byte	0x00
    cdc2:	2001      	movs	r0, #1
    cdc4:	4770      	bx	lr
                        return false;
    cdc6:	2000      	movs	r0, #0
}
    cdc8:	4770      	bx	lr

0000cdca <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cdca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    cdd2:	2b08      	cmp	r3, #8
    cdd4:	d001      	beq.n	cdda <nrf52_errata_136+0x10>
        return false;
    cdd6:	2000      	movs	r0, #0
    cdd8:	4770      	bx	lr
                        return true;
    cdda:	2001      	movs	r0, #1
}
    cddc:	4770      	bx	lr

0000cdde <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cdde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cde2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cde6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    cdea:	2a08      	cmp	r2, #8
    cdec:	d001      	beq.n	cdf2 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    cdee:	2000      	movs	r0, #0
    cdf0:	4770      	bx	lr
                switch(var2)
    cdf2:	2b04      	cmp	r3, #4
    cdf4:	d801      	bhi.n	cdfa <nrf52_configuration_249+0x1c>
    cdf6:	2000      	movs	r0, #0
    cdf8:	4770      	bx	lr
                        return true;
    cdfa:	2001      	movs	r0, #1
    #endif
}
    cdfc:	4770      	bx	lr

0000cdfe <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    cdfe:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    ce00:	4780      	blx	r0
}
    ce02:	bd08      	pop	{r3, pc}

0000ce04 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    ce04:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    ce06:	f000 f92f 	bl	d068 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    ce0a:	bd08      	pop	{r3, pc}

0000ce0c <clock_initial_lfclksrc_get>:
}
    ce0c:	2000      	movs	r0, #0
    ce0e:	4770      	bx	lr

0000ce10 <clock_lfclksrc_tweak>:
{
    ce10:	b538      	push	{r3, r4, r5, lr}
    ce12:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    ce14:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ce16:	2b01      	cmp	r3, #1
    ce18:	d002      	beq.n	ce20 <clock_lfclksrc_tweak+0x10>
    ce1a:	b933      	cbnz	r3, ce2a <clock_lfclksrc_tweak+0x1a>
    ce1c:	2301      	movs	r3, #1
    ce1e:	e000      	b.n	ce22 <clock_lfclksrc_tweak+0x12>
    ce20:	2301      	movs	r3, #1
    if (!is_correct_clk)
    ce22:	461d      	mov	r5, r3
    ce24:	b11b      	cbz	r3, ce2e <clock_lfclksrc_tweak+0x1e>
}
    ce26:	4628      	mov	r0, r5
    ce28:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    ce2a:	2300      	movs	r3, #0
    ce2c:	e7f9      	b.n	ce22 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ce2e:	2000      	movs	r0, #0
    ce30:	f7fa fb90 	bl	7554 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    ce34:	f7ff ffea 	bl	ce0c <clock_initial_lfclksrc_get>
    ce38:	6020      	str	r0, [r4, #0]
    ce3a:	e7f4      	b.n	ce26 <clock_lfclksrc_tweak+0x16>

0000ce3c <pin_is_task_output>:
{
    ce3c:	b510      	push	{r4, lr}
    ce3e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ce40:	f7fa fd5a 	bl	78f8 <pin_is_output>
    ce44:	b128      	cbz	r0, ce52 <pin_is_task_output+0x16>
    ce46:	4620      	mov	r0, r4
    ce48:	f7fa fd40 	bl	78cc <pin_in_use_by_te>
    ce4c:	b118      	cbz	r0, ce56 <pin_is_task_output+0x1a>
    ce4e:	2001      	movs	r0, #1
    ce50:	e000      	b.n	ce54 <pin_is_task_output+0x18>
    ce52:	2000      	movs	r0, #0
}
    ce54:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ce56:	2000      	movs	r0, #0
    ce58:	e7fc      	b.n	ce54 <pin_is_task_output+0x18>

0000ce5a <pin_is_input>:
{
    ce5a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    ce5c:	f7fa fd4c 	bl	78f8 <pin_is_output>
    ce60:	f080 0001 	eor.w	r0, r0, #1
}
    ce64:	b2c0      	uxtb	r0, r0
    ce66:	bd08      	pop	{r3, pc}

0000ce68 <gpiote_polarity_to_trigger>:
}
    ce68:	4770      	bx	lr

0000ce6a <gpiote_trigger_to_polarity>:
}
    ce6a:	4770      	bx	lr

0000ce6c <is_level>:
}
    ce6c:	2803      	cmp	r0, #3
    ce6e:	bf94      	ite	ls
    ce70:	2000      	movls	r0, #0
    ce72:	2001      	movhi	r0, #1
    ce74:	4770      	bx	lr

0000ce76 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    ce76:	b508      	push	{r3, lr}
  _DoInit();
    ce78:	f7fb fd08 	bl	888c <_DoInit>
}
    ce7c:	bd08      	pop	{r3, pc}

0000ce7e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ce7e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ce80:	f7ff fff9 	bl	ce76 <SEGGER_RTT_Init>

	return 0;
}
    ce84:	2000      	movs	r0, #0
    ce86:	bd08      	pop	{r3, pc}

0000ce88 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ce88:	b148      	cbz	r0, ce9e <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ce8a:	68c3      	ldr	r3, [r0, #12]
    ce8c:	8818      	ldrh	r0, [r3, #0]
    ce8e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ce92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ce96:	bf14      	ite	ne
    ce98:	2000      	movne	r0, #0
    ce9a:	2001      	moveq	r0, #1
    ce9c:	4770      	bx	lr
		return false;
    ce9e:	2000      	movs	r0, #0
}
    cea0:	4770      	bx	lr

0000cea2 <z_log_msg2_runtime_create>:
{
    cea2:	b510      	push	{r4, lr}
    cea4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    cea6:	ac0b      	add	r4, sp, #44	; 0x2c
    cea8:	9405      	str	r4, [sp, #20]
    ceaa:	9403      	str	r4, [sp, #12]
    ceac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ceae:	9402      	str	r4, [sp, #8]
    ceb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ceb2:	9401      	str	r4, [sp, #4]
    ceb4:	9c08      	ldr	r4, [sp, #32]
    ceb6:	9400      	str	r4, [sp, #0]
    ceb8:	f7f6 fe90 	bl	3bdc <z_impl_z_log_msg2_runtime_vcreate>
}
    cebc:	b006      	add	sp, #24
    cebe:	bd10      	pop	{r4, pc}

0000cec0 <z_early_memset>:
{
    cec0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    cec2:	f7ff fb18 	bl	c4f6 <memset>
}
    cec6:	bd08      	pop	{r3, pc}

0000cec8 <z_early_memcpy>:
{
    cec8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    ceca:	f7ff fae5 	bl	c498 <memcpy>
}
    cece:	bd08      	pop	{r3, pc}

0000ced0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ced0:	6902      	ldr	r2, [r0, #16]
    ced2:	6943      	ldr	r3, [r0, #20]
    ced4:	431a      	orrs	r2, r3
    ced6:	f012 0203 	ands.w	r2, r2, #3
    ceda:	d10d      	bne.n	cef8 <create_free_list+0x28>
	slab->free_list = NULL;
    cedc:	2100      	movs	r1, #0
    cede:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    cee0:	e005      	b.n	ceee <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    cee2:	6981      	ldr	r1, [r0, #24]
    cee4:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    cee6:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    cee8:	6901      	ldr	r1, [r0, #16]
    ceea:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    ceec:	3201      	adds	r2, #1
    ceee:	68c1      	ldr	r1, [r0, #12]
    cef0:	4291      	cmp	r1, r2
    cef2:	d8f6      	bhi.n	cee2 <create_free_list+0x12>
	return 0;
    cef4:	2000      	movs	r0, #0
    cef6:	4770      	bx	lr
		return -EINVAL;
    cef8:	f06f 0015 	mvn.w	r0, #21
}
    cefc:	4770      	bx	lr

0000cefe <k_mem_slab_init>:
{
    cefe:	b510      	push	{r4, lr}
    cf00:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    cf02:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    cf04:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    cf06:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    cf08:	2300      	movs	r3, #0
    cf0a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    cf0c:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    cf0e:	f7ff ffdf 	bl	ced0 <create_free_list>
	if (rc < 0) {
    cf12:	2800      	cmp	r0, #0
    cf14:	db01      	blt.n	cf1a <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    cf16:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    cf18:	6064      	str	r4, [r4, #4]
}
    cf1a:	bd10      	pop	{r4, pc}

0000cf1c <setup_thread_stack>:
{
    cf1c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    cf1e:	3207      	adds	r2, #7
    cf20:	f022 0207 	bic.w	r2, r2, #7
    cf24:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    cf28:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    cf2c:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    cf30:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    cf34:	2200      	movs	r2, #0
    cf36:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    cf3a:	18c8      	adds	r0, r1, r3
    cf3c:	bc10      	pop	{r4}
    cf3e:	4770      	bx	lr

0000cf40 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    cf40:	f3ef 8005 	mrs	r0, IPSR
}
    cf44:	3800      	subs	r0, #0
    cf46:	bf18      	it	ne
    cf48:	2001      	movne	r0, #1
    cf4a:	4770      	bx	lr

0000cf4c <k_thread_name_get>:
}
    cf4c:	3074      	adds	r0, #116	; 0x74
    cf4e:	4770      	bx	lr

0000cf50 <z_impl_k_thread_start>:
{
    cf50:	b508      	push	{r3, lr}
	z_sched_start(thread);
    cf52:	f7fd f96b 	bl	a22c <z_sched_start>
}
    cf56:	bd08      	pop	{r3, pc}

0000cf58 <z_init_thread_base>:
{
    cf58:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    cf5a:	2400      	movs	r4, #0
    cf5c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    cf5e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    cf60:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    cf62:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    cf64:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    cf66:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    cf68:	61c4      	str	r4, [r0, #28]
}
    cf6a:	bc10      	pop	{r4}
    cf6c:	4770      	bx	lr

0000cf6e <z_pm_save_idle_exit>:
{
    cf6e:	b508      	push	{r3, lr}
	pm_system_resume();
    cf70:	f7f6 ff72 	bl	3e58 <pm_system_resume>
	sys_clock_idle_exit();
    cf74:	f7ff fe18 	bl	cba8 <sys_clock_idle_exit>
}
    cf78:	bd08      	pop	{r3, pc}

0000cf7a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    cf7a:	4288      	cmp	r0, r1
    cf7c:	da00      	bge.n	cf80 <new_prio_for_inheritance+0x6>
    cf7e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    cf80:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    cf84:	db01      	blt.n	cf8a <new_prio_for_inheritance+0x10>
    cf86:	4608      	mov	r0, r1
    cf88:	4770      	bx	lr
    cf8a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    cf8e:	4770      	bx	lr

0000cf90 <adjust_owner_prio>:
{
    cf90:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    cf92:	6880      	ldr	r0, [r0, #8]
    cf94:	f990 300e 	ldrsb.w	r3, [r0, #14]
    cf98:	428b      	cmp	r3, r1
    cf9a:	d101      	bne.n	cfa0 <adjust_owner_prio+0x10>
	return false;
    cf9c:	2000      	movs	r0, #0
}
    cf9e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    cfa0:	f7fd fafa 	bl	a598 <z_set_prio>
    cfa4:	e7fb      	b.n	cf9e <adjust_owner_prio+0xe>

0000cfa6 <z_impl_k_mutex_init>:
{
    cfa6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    cfa8:	2000      	movs	r0, #0
    cfaa:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    cfac:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    cfae:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    cfb0:	605b      	str	r3, [r3, #4]
}
    cfb2:	4770      	bx	lr

0000cfb4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    cfb4:	b13a      	cbz	r2, cfc6 <z_impl_k_sem_init+0x12>
    cfb6:	428a      	cmp	r2, r1
    cfb8:	d308      	bcc.n	cfcc <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    cfba:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    cfbc:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    cfbe:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    cfc0:	6040      	str	r0, [r0, #4]
	return 0;
    cfc2:	2000      	movs	r0, #0
    cfc4:	4770      	bx	lr
		return -EINVAL;
    cfc6:	f06f 0015 	mvn.w	r0, #21
    cfca:	4770      	bx	lr
    cfcc:	f06f 0015 	mvn.w	r0, #21
}
    cfd0:	4770      	bx	lr

0000cfd2 <thread_active_elsewhere>:
}
    cfd2:	2000      	movs	r0, #0
    cfd4:	4770      	bx	lr

0000cfd6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    cfd6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    cfda:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    cfde:	4283      	cmp	r3, r0
    cfe0:	d001      	beq.n	cfe6 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    cfe2:	1ac0      	subs	r0, r0, r3
    cfe4:	4770      	bx	lr
	return 0;
    cfe6:	2000      	movs	r0, #0
}
    cfe8:	4770      	bx	lr

0000cfea <z_reschedule_irqlock>:
{
    cfea:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cfec:	4603      	mov	r3, r0
    cfee:	b920      	cbnz	r0, cffa <z_reschedule_irqlock+0x10>
    cff0:	f3ef 8205 	mrs	r2, IPSR
    cff4:	b942      	cbnz	r2, d008 <z_reschedule_irqlock+0x1e>
    cff6:	2201      	movs	r2, #1
    cff8:	e000      	b.n	cffc <z_reschedule_irqlock+0x12>
    cffa:	2200      	movs	r2, #0
	if (resched(key)) {
    cffc:	b932      	cbnz	r2, d00c <z_reschedule_irqlock+0x22>
    cffe:	f383 8811 	msr	BASEPRI, r3
    d002:	f3bf 8f6f 	isb	sy
}
    d006:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d008:	2200      	movs	r2, #0
    d00a:	e7f7      	b.n	cffc <z_reschedule_irqlock+0x12>
    d00c:	4618      	mov	r0, r3
    d00e:	f7f7 fac5 	bl	459c <arch_swap>
	return ret;
    d012:	e7f8      	b.n	d006 <z_reschedule_irqlock+0x1c>

0000d014 <z_priq_dumb_best>:
{
    d014:	4603      	mov	r3, r0
	return list->head == list;
    d016:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d018:	4283      	cmp	r3, r0
    d01a:	d000      	beq.n	d01e <z_priq_dumb_best+0xa>
}
    d01c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    d01e:	2000      	movs	r0, #0
	return thread;
    d020:	e7fc      	b.n	d01c <z_priq_dumb_best+0x8>

0000d022 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    d022:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    d024:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    d026:	6083      	str	r3, [r0, #8]
}
    d028:	4770      	bx	lr

0000d02a <remove_timeout>:
{
    d02a:	b510      	push	{r4, lr}
    d02c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    d02e:	f7fe f813 	bl	b058 <next>
    d032:	b148      	cbz	r0, d048 <remove_timeout+0x1e>
    d034:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    d036:	6920      	ldr	r0, [r4, #16]
    d038:	6961      	ldr	r1, [r4, #20]
    d03a:	6913      	ldr	r3, [r2, #16]
    d03c:	181b      	adds	r3, r3, r0
    d03e:	6950      	ldr	r0, [r2, #20]
    d040:	eb41 0100 	adc.w	r1, r1, r0
    d044:	6113      	str	r3, [r2, #16]
    d046:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    d048:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    d04a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    d04c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d04e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d050:	2300      	movs	r3, #0
    d052:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    d054:	6063      	str	r3, [r4, #4]
}
    d056:	bd10      	pop	{r4, pc}

0000d058 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d058:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d05a:	f7fe faf9 	bl	b650 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d05e:	bd08      	pop	{r3, pc}

0000d060 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    d060:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    d062:	f7fe faf5 	bl	b650 <sys_clock_tick_get>
}
    d066:	bd08      	pop	{r3, pc}

0000d068 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d068:	b900      	cbnz	r0, d06c <z_impl_k_busy_wait+0x4>
    d06a:	4770      	bx	lr
{
    d06c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d06e:	f7f8 f959 	bl	5324 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d072:	bd08      	pop	{r3, pc}

0000d074 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d074:	b510      	push	{r4, lr}
    d076:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    d078:	f7fe f910 	bl	b29c <z_abort_timeout>

	if (inactive) {
    d07c:	b9a0      	cbnz	r0, d0a8 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    d07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d080:	b10b      	cbz	r3, d086 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d082:	4620      	mov	r0, r4
    d084:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d086:	f104 0018 	add.w	r0, r4, #24
    d08a:	f7fd fc91 	bl	a9b0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d08e:	b158      	cbz	r0, d0a8 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    d090:	f7fd f876 	bl	a180 <z_ready_thread>
	__asm__ volatile(
    d094:	f04f 0320 	mov.w	r3, #32
    d098:	f3ef 8011 	mrs	r0, BASEPRI
    d09c:	f383 8812 	msr	BASEPRI_MAX, r3
    d0a0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d0a4:	f7ff ffa1 	bl	cfea <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    d0a8:	bd10      	pop	{r4, pc}

0000d0aa <k_heap_init>:
{
    d0aa:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    d0ac:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    d0b0:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    d0b2:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    d0b4:	f7f5 fcd0 	bl	2a58 <sys_heap_init>
}
    d0b8:	bd10      	pop	{r4, pc}
	...

0000d0bc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    d0bc:	f7fa b92a 	b.w	7314 <SystemInit>
